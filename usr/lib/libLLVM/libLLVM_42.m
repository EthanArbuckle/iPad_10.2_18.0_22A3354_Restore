void llvm::LTOModule::addAsmGlobalSymbolUndef(_QWORD *a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t **v4;
  char v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  _BYTE v33[21];
  __int16 v34;
  char v35;
  uint64_t v36;

  v35 = 0;
  v34 = 0;
  memset(v33, 0, sizeof(v33));
  v36 = 0;
  v4 = (uint64_t **)sub_1C58FB744((llvm::StringMapImpl *)(a1 + 36), a2, a3, v33);
  v6 = v5;
  v7 = (uint64_t)(*v4 + 5);
  v9 = (uint64_t *)a1[41];
  v8 = a1[42];
  if ((unint64_t)v9 >= v8)
  {
    v11 = (_QWORD *)a1[40];
    v12 = v9 - v11;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      goto LABEL_38;
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        goto LABEL_39;
      v16 = (char *)operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (uint64_t *)&v16[8 * v12];
    *v17 = v7;
    v10 = v17 + 1;
    if (v9 != v11)
    {
      do
      {
        v18 = *--v9;
        *--v17 = v18;
      }
      while (v9 != v11);
      v9 = (uint64_t *)a1[40];
    }
    a1[40] = v17;
    a1[41] = v10;
    a1[42] = &v16[8 * v15];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v9 = v7;
    v10 = v9 + 1;
  }
  a1[41] = v10;
  v19 = (uint64_t)(*v4 + 5);
  v20 = **v4;
  v22 = (uint64_t *)a1[44];
  v21 = a1[45];
  if ((unint64_t)v22 < v21)
  {
    *v22 = v19;
    v22[1] = v20;
    v23 = v22 + 2;
    goto LABEL_35;
  }
  v24 = (uint64_t *)a1[43];
  v25 = ((char *)v22 - (char *)v24) >> 4;
  v26 = v25 + 1;
  if ((unint64_t)(v25 + 1) >> 60)
LABEL_38:
    abort();
  v27 = v21 - (_QWORD)v24;
  if (v27 >> 3 > v26)
    v26 = v27 >> 3;
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
    v28 = 0xFFFFFFFFFFFFFFFLL;
  else
    v28 = v26;
  if (!v28)
  {
    v29 = 0;
    goto LABEL_30;
  }
  if (v28 >> 60)
LABEL_39:
    sub_1C4764EE4();
  v29 = (char *)operator new(16 * v28);
LABEL_30:
  v30 = (uint64_t *)&v29[16 * v25];
  *v30 = v19;
  v30[1] = v20;
  v23 = v30 + 2;
  if (v22 != v24)
  {
    do
    {
      *((_OWORD *)v30 - 1) = *((_OWORD *)v22 - 1);
      v30 -= 2;
      v22 -= 2;
    }
    while (v22 != v24);
    v22 = (uint64_t *)a1[43];
  }
  a1[43] = v30;
  a1[44] = v23;
  a1[45] = &v29[16 * v28];
  if (v22)
    operator delete(v22);
LABEL_35:
  a1[44] = v23;
  if (v6)
  {
    v31 = *v4;
    v32 = **v4;
    v31[1] = (uint64_t)(*v4 + 5);
    v31[2] = v32;
    *((_DWORD *)v31 + 6) = 7168;
    *((_BYTE *)v31 + 28) = 0;
    v31[4] = 0;
  }
}

void llvm::LTOModule::addPotentialUndefinedSymbol(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t **v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  llvm::GlobalValue *v11;
  int v12;
  _BYTE v13[21];
  __int16 v14;
  char v15;
  uint64_t v16;
  uint64_t (**v17)();
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  void **v25;
  void *v26;
  __int128 v27;
  _QWORD v28[9];

  v28[8] = *MEMORY[0x1E0C80C00];
  v26 = v28;
  v27 = xmmword_1C64638C0;
  v18 = 0;
  v22 = 0;
  v23 = 0;
  v17 = &off_1E81A7280;
  v25 = &v26;
  v24 = 0;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  llvm::ModuleSymbolTable::printSymbolName(a1 + 72, (llvm::raw_ostream *)&v17, a2);
  v6 = v27;
  if ((unint64_t)(v27 + 1) > *((_QWORD *)&v27 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v26, v28, v27 + 1, 1);
    v6 = v27;
  }
  *((_BYTE *)v26 + v6) = 0;
  v17 = (uint64_t (**)())off_1E81A6E70;
  if (v24 == 1 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8077774924);
  v14 = 0;
  v15 = 0;
  memset(v13, 0, sizeof(v13));
  v16 = 0;
  v7 = (uint64_t **)sub_1C58FB744((llvm::StringMapImpl *)(a1 + 288), (unsigned __int8 *)v26, v27, v13);
  if (v8)
  {
    v9 = *v7;
    v10 = **v7;
    v9[1] = (uint64_t)(*v7 + 5);
    v9[2] = v10;
    if ((a2 & 4) != 0)
      v11 = 0;
    else
      v11 = (llvm::GlobalValue *)(a2 & 0xFFFFFFFFFFFFFFF8);
    if (llvm::GlobalValue::hasExternalWeakLinkage(v11))
      v12 = 1280;
    else
      v12 = 1024;
    *((_DWORD *)v9 + 6) = v12;
    *((_BYTE *)v9 + 28) = a3;
    v9[4] = (uint64_t)v11;
  }
  if (v26 != v28)
    free(v26);
}

char *llvm::LTOModule::createInputFile(uint64_t a1, uint64_t a2, char *__s, uint64_t a4)
{
  size_t v8;
  char *v9;
  size_t v11;
  std::string::size_type v12;
  std::string *p_dst;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  char *v17;
  std::string::size_type v18;
  std::string *p_p;
  std::string::size_type size;
  std::string *v21;
  std::string::size_type v22;
  char v23;
  uint64_t v24;
  char *v25;
  std::string __p;
  std::string __dst;
  std::string v28;
  __int128 v29;
  char *v30;
  size_t v31;
  _QWORD v32[2];
  char *v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (__s)
    v8 = strlen(__s);
  else
    v8 = 0;
  *(_QWORD *)&v29 = a1;
  *((_QWORD *)&v29 + 1) = a2;
  v30 = __s;
  v31 = v8;
  llvm::lto::InputFile::create(&v29, (uint64_t)&v33);
  if ((v34 & 1) == 0)
  {
    v9 = v33;
    v33 = 0;
    goto LABEL_6;
  }
  v11 = strlen(__s);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v12;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11;
    p_dst = &__dst;
    if (!v11)
      goto LABEL_15;
  }
  memcpy(p_dst, __s, v12);
LABEL_15:
  p_dst->__r_.__value_.__s.__data_[v12] = 0;
  v16 = std::string::append(&__dst, ": Could not read LTO input file: ");
  v17 = 0;
  v18 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v18;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v34 & 1) != 0)
  {
    v17 = v33;
    v33 = 0;
  }
  v25 = v17;
  sub_1C61D2548(&v25, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v21 = std::string::append(&v28, (const std::string::value_type *)p_p, size);
  v22 = v21->__r_.__value_.__r.__words[0];
  v32[0] = v21->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v32 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
  v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  v24 = v32[0];
  *(_QWORD *)a4 = v22;
  *(_QWORD *)(a4 + 8) = v24;
  *(_QWORD *)(a4 + 15) = *(_QWORD *)((char *)v32 + 7);
  *(_BYTE *)(a4 + 23) = v23;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v25)
    (*(void (**)(char *))(*(_QWORD *)v25 + 8))(v25);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v9 = 0;
LABEL_6:
  sub_1C58FB958((uint64_t)&v33);
  return v9;
}

uint64_t llvm::LTOModule::getDependentLibraryCount(llvm::LTOModule *this, llvm::lto::InputFile *a2)
{
  return (uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 4;
}

uint64_t llvm::LTOModule::getDependentLibrary(llvm::LTOModule *this, llvm::lto::InputFile *a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t *v4;
  uint64_t result;

  v4 = (uint64_t *)(*((_QWORD *)this + 18) + 16 * (_QWORD)a2);
  result = *v4;
  *a3 = v4[1];
  return result;
}

void llvm::LTOModule::getMachOCPUType(llvm::LTOModule *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4[4];
  __int16 v5;
  void *__p[2];
  char v7;

  v3 = *((_QWORD *)this + 4) + 216;
  v5 = 260;
  v4[0] = v3;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v4);
  llvm::MachO::getCPUType((llvm::MachO *)__p, a2);
  if (v7 < 0)
    operator delete(__p[0]);
}

void llvm::LTOModule::getMachOCPUSubType(llvm::LTOModule *this@<X0>, uint64_t a2@<X8>)
{
  llvm::Module *v4;
  uint64_t v5;
  unint64_t PtrAuthABIVersion;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[4];
  __int16 v13;
  void *__p[2];
  char v15;

  v4 = (llvm::Module *)*((_QWORD *)this + 4);
  v5 = *((_QWORD *)v4 + 20);
  if (v5)
  {
    (*(void (**)(void **__return_ptr, _QWORD))(*(_QWORD *)v5 + 32))(__p, *((_QWORD *)v4 + 20));
    v11 = __p[0];
    if (__p[0])
    {
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v11;
      return;
    }
    v4 = (llvm::Module *)*((_QWORD *)this + 4);
  }
  PtrAuthABIVersion = llvm::Module::getPtrAuthABIVersion(v4);
  if (v7)
  {
    v8 = PtrAuthABIVersion;
    v9 = *((_QWORD *)this + 4) + 216;
    v13 = 260;
    v12[0] = v9;
    llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v12);
    llvm::MachO::getCPUSubType((llvm::MachO *)__p, (const llvm::Triple *)v8, (v8 & 0xFF00000000) != 0, a2);
  }
  else
  {
    v10 = *((_QWORD *)this + 4) + 216;
    v13 = 260;
    v12[0] = v10;
    llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v12);
    llvm::MachO::getCPUSubType((llvm::MachO *)__p, a2);
  }
  if (v15 < 0)
    operator delete(__p[0]);
}

uint64_t llvm::LTOModule::hasCtorDtor(llvm::LTOModule *this)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  _BOOL4 v14;
  int v17;
  int v18;

  v1 = (_QWORD *)*((_QWORD *)this + 22);
  v2 = (_QWORD *)*((_QWORD *)this + 23);
  if (v2 != v1)
  {
    while (1)
    {
      if ((*v1 & 4) != 0)
        goto LABEL_23;
      v3 = *v1 & 0xFFFFFFFFFFFFFFF8;
      if (!v3 || (*(_BYTE *)(v3 + 23) & 0x10) == 0)
        goto LABEL_23;
      v4 = ***(_QWORD ***)v3;
      v5 = *(_QWORD *)(v4 + 152);
      v6 = *(unsigned int *)(v4 + 168);
      if (!(_DWORD)v6)
        goto LABEL_11;
      LODWORD(v7) = (v6 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      v8 = (uint64_t *)(v5 + 16 * v7);
      v9 = *v8;
      if (*v8 != v3)
        break;
LABEL_12:
      v12 = v8[1];
      if (*(_QWORD *)v12 >= 0xCuLL)
      {
        v13 = *(_QWORD *)(v12 + 16) == 0x6F6C672E6D766C6CLL && *(_DWORD *)(v12 + 24) == 1600938338;
        v14 = !v13;
        if (!v14 && *(_QWORD *)v12 == 17)
        {
          if (*(_DWORD *)(v12 + 28) == 1919906915 && *(_BYTE *)(v12 + 32) == 115)
            return 1;
          v17 = *(_DWORD *)(v12 + 28);
          v18 = *(unsigned __int8 *)(v12 + 32);
          if (v17 == 1919906916 && v18 == 115)
            return 1;
        }
      }
LABEL_23:
      if (++v1 == v2)
        return 0;
    }
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_QWORD *)(v5 + 16 * v7);
      if (v9 == v3)
      {
        v8 = (uint64_t *)(v5 + 16 * v7);
        goto LABEL_12;
      }
    }
LABEL_11:
    v8 = (uint64_t *)(v5 + 16 * v6);
    goto LABEL_12;
  }
  return 0;
}

void sub_1C58FB6CC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C58FB6E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817EA48;
  result[1] = v3;
  return result;
}

uint64_t sub_1C58FB714(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817EA48;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C58FB730(uint64_t a1, const llvm::DiagnosticInfo *a2)
{
  return llvm::LLVMContext::diagnose(*(_QWORD *)(a1 + 8), a2);
}

void sub_1C58FB738(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

_QWORD *sub_1C58FB744(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n, _OWORD *a4)
{
  unsigned int v7;
  int v8;
  size_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *i;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD *v28;
  _OWORD *v29;

  v7 = *((_DWORD *)a1 + 2);
  if (!v7)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v28 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v28)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v28[16] = 2;
    *(_QWORD *)a1 = v28;
    v7 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v29 = a4;
  v8 = 0;
  if (__n)
  {
    v9 = __n;
    v10 = a2;
    do
    {
      v11 = *v10++;
      v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  v12 = *(_QWORD *)a1;
  v13 = v7 - 1;
  v14 = *(_QWORD *)a1 + 8 * v7 + 8;
  v15 = -1;
  v16 = 1;
  v17 = v8;
  while (1)
  {
    v18 = v17 & v13;
    v19 = *(_QWORD **)(v12 + 8 * v18);
    if (!v19)
      break;
    if (v19 == (_QWORD *)-8)
    {
      if (v15 == -1)
        v15 = v17 & v13;
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8
           && __n == *v19
           && (!__n || !memcmp(a2, (char *)v19 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    v17 = v16 + v18;
    ++v16;
  }
  v20 = v15;
  if (v15 == -1)
  {
    v20 = v18;
    v18 = v18;
  }
  else
  {
    v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  v19 = *(_QWORD **)(v12 + 8 * v18);
LABEL_20:
  i = (_QWORD *)(v12 + 8 * v18);
  if (v19 == (_QWORD *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v19)
  {
    return i;
  }
  v22 = (char *)operator new(__n + 41, (std::align_val_t)8uLL);
  v23 = v22;
  v24 = v22 + 40;
  if (__n)
    memcpy(v22 + 40, a2, __n);
  v24[__n] = 0;
  *(_QWORD *)v23 = __n;
  v25 = v29[1];
  *(_OWORD *)(v23 + 8) = *v29;
  *(_OWORD *)(v23 + 24) = v25;
  *i = v23;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v18));
        !*i || *i == -8;
  return i;
}

uint64_t sub_1C58FB958(uint64_t a1)
{
  char v2;
  void **v3;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(void ***)a1;
  *(_QWORD *)a1 = 0;
  if ((v2 & 1) != 0)
  {
    if (v3)
      (*((void (**)(void **))*v3 + 1))(v3);
  }
  else if (v3)
  {
    llvm::lto::InputFile::~InputFile(v3);
    MEMORY[0x1CAA32FC0]();
  }
  return a1;
}

const char *llvm::LTOCodeGenerator::getVersionString(llvm::LTOCodeGenerator *this)
{
  return "LLVM version 32023.334";
}

_QWORD *sub_1C58FB9C4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E817EA90;
  v2 = a1 + 63;
  v3 = (_QWORD *)a1[66];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E817EAF8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

llvm::LTOCodeGenerator *llvm::LTOCodeGenerator::LTOCodeGenerator(llvm::LTOCodeGenerator *this, llvm::LLVMContext *a2)
{
  uint64_t v4;
  llvm::IRMover *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t (**v10)();
  char *v11;
  void (**v12)(char *);
  _QWORD v14[3];
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = a2;
  v4 = operator new();
  *((_QWORD *)this + 1) = llvm::Module::Module(v4, "ld-temp.o", 9uLL, (uint64_t)a2);
  v5 = (llvm::IRMover *)operator new();
  *((_QWORD *)this + 2) = llvm::IRMover::IRMover(v5, *((llvm::Module **)this + 1));
  *((_QWORD *)this + 3) = 0;
  *(_DWORD *)((char *)this + 31) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0x800000000;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0x800000000;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0x1000000000;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 31) = 0;
  *((_BYTE *)this + 256) = byte_1ED833F88;
  *((_BYTE *)this + 257) = 0;
  sub_1C6207FE0((uint64_t)this + 264, "__hidden#", 9uLL, "_", 1uLL, (uint64_t)"__ir_hidden#", 12);
  *((_BYTE *)this + 512) = 0;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_QWORD *)this + 69) = 0;
  sub_1C4D7B55C((uint64_t)this + 560);
  *((_QWORD *)this + 117) = 0;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_DWORD *)this + 236) = 1;
  *((_BYTE *)this + 948) = 1;
  *((_BYTE *)this + 952) = 0;
  *((_BYTE *)this + 956) = 0;
  *((_QWORD *)this + 120) = 0x100000002;
  *((_QWORD *)this + 121) = 2;
  *((_WORD *)this + 488) = 256;
  *((_QWORD *)this + 160) = 0;
  *(_OWORD *)((char *)this + 978) = 0u;
  *(_OWORD *)((char *)this + 994) = 0u;
  *(_OWORD *)((char *)this + 1010) = 0u;
  *(_OWORD *)((char *)this + 1026) = 0u;
  *(_OWORD *)((char *)this + 1042) = 0u;
  *(_OWORD *)((char *)this + 1058) = 0u;
  *(_OWORD *)((char *)this + 1074) = 0u;
  *(_OWORD *)((char *)this + 1090) = 0u;
  *(_OWORD *)((char *)this + 1106) = 0u;
  *(_OWORD *)((char *)this + 1122) = 0u;
  *(_OWORD *)((char *)this + 1138) = 0u;
  *(_OWORD *)((char *)this + 1154) = 0u;
  *(_OWORD *)((char *)this + 1170) = 0u;
  *(_OWORD *)((char *)this + 1186) = 0u;
  *(_OWORD *)((char *)this + 1202) = 0u;
  *(_OWORD *)((char *)this + 1218) = 0u;
  *(_OWORD *)((char *)this + 1234) = 0u;
  *(_OWORD *)((char *)this + 1250) = 0u;
  *(_QWORD *)((char *)this + 1265) = 0;
  *((_BYTE *)this + 1288) = 1;
  *((_QWORD *)this + 162) = 0;
  *((_QWORD *)this + 164) = 0;
  *((_QWORD *)this + 163) = 0;
  *((_BYTE *)this + 1320) = 0;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_BYTE *)this + 1376) = 0;
  *((_DWORD *)this + 345) = 500;
  *((_BYTE *)this + 1384) = 1;
  *((_QWORD *)this + 177) = 0;
  *((_BYTE *)this + 1424) = 0;
  *((_QWORD *)this + 179) = 0;
  *((_DWORD *)this + 360) = 16777473;
  *((_BYTE *)this + 1444) = byte_1ED836110;
  *((_DWORD *)this + 362) = dword_1ED835F90;
  *((_DWORD *)this + 363) = dword_1ED836050;
  *((_BYTE *)this + 1456) = 1;
  *((_BYTE *)this + 1457) = byte_1ED834CC8;
  *((_BYTE *)this + 1458) = byte_1ED834C08;
  *((_QWORD *)this + 186) = 0;
  *((_QWORD *)this + 190) = 0;
  *((_QWORD *)this + 194) = 0;
  *((_QWORD *)this + 198) = 0;
  *((_QWORD *)this + 202) = 0;
  *((_QWORD *)this + 206) = 0;
  *((_QWORD *)this + 210) = 0;
  v6 = *(_QWORD *)a2;
  *(_BYTE *)(v6 + 2664) = byte_1ED834048;
  if (!*(_BYTE *)(v6 + 1184))
  {
    sub_1C6240860(v6 + 1160);
    *(_DWORD *)(v6 + 1176) = 0;
    *(_OWORD *)(v6 + 1160) = 0u;
    *(_BYTE *)(v6 + 1184) = 1;
  }
  *((_QWORD *)this + 119) = 0;
  if (byte_1ED83476F >= 0)
    v7 = &qword_1ED834758;
  else
    v7 = (uint64_t *)qword_1ED834758;
  if (byte_1ED83476F >= 0)
    v8 = byte_1ED83476F & 0x7F;
  else
    v8 = unk_1ED834760;
  MEMORY[0x1CAA32AC8]((char *)this + 1328, v7, v8);
  v9 = (char *)this + 912;
  v10 = &off_1E817EC30;
  v14[0] = &off_1E817EC30;
  v15 = (char *)v14;
  if ((_QWORD *)((char *)this + 912) == v14)
    goto LABEL_15;
  v11 = (char *)*((_QWORD *)this + 117);
  if (v11 == v9)
  {
    v15 = 0;
    (*(void (**)(char *, _QWORD *))(*((_QWORD *)this + 114) + 24))((char *)this + 912, v14);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 117) + 32))(*((_QWORD *)this + 117));
    v15 = (char *)v14;
    *((_QWORD *)this + 114) = &off_1E817EC30;
    *((_QWORD *)this + 117) = v9;
    v10 = (uint64_t (**)())v14[0];
    goto LABEL_15;
  }
  *((_QWORD *)this + 114) = &off_1E817EC30;
  v15 = v11;
  *((_QWORD *)this + 117) = v9;
  if (v11 == (char *)v14)
  {
LABEL_15:
    v12 = (void (**)(char *))(v10 + 4);
    v11 = (char *)v14;
    goto LABEL_16;
  }
  if (v11)
  {
    v12 = (void (**)(char *))(*(_QWORD *)v11 + 40);
LABEL_16:
    (*v12)(v11);
  }
  return this;
}

void llvm::LTOCodeGenerator::~LTOCodeGenerator(llvm::LTOCodeGenerator *this)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  llvm::Module *v11;
  void **v12;

  sub_1C58ED854((uint64_t)this + 536);
  v2 = (_BYTE *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v2)
    sub_1C49C7E54((uint64_t)this + 528, v2);
  v3 = (_BYTE *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v3)
    sub_1C49C7E54((uint64_t)this + 520, v3);
  sub_1C6208174((uint64_t)this + 264);
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  v12 = (void **)((char *)this + 136);
  sub_1C4765410(&v12);
  if (*((_DWORD *)this + 29))
  {
    v4 = *((unsigned int *)this + 28);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 8 * v4;
      do
      {
        v7 = *(_QWORD *)(*((_QWORD *)this + 13) + v5);
        if (v7 != -8 && v7 != 0)
          MEMORY[0x1CAA32FB4]();
        v5 += 8;
      }
      while (v6 != v5);
    }
  }
  free(*((void **)this + 13));
  sub_1C4F02264((uint64_t)this + 72);
  sub_1C4F02264((uint64_t)this + 40);
  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
    sub_1C58FFF48(v10);
  v11 = (llvm::Module *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    llvm::Module::~Module(v11);
    MEMORY[0x1CAA32FC0]();
  }
}

_QWORD *llvm::LTOCodeGenerator::setAsmUndefinedRefs(_QWORD *this, llvm::LTOModule *a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::StringMapImpl *v4;
  unsigned __int8 *v5;
  size_t v6;

  v2 = *((_QWORD *)a2 + 43);
  v3 = *((_QWORD *)a2 + 44);
  if (v2 != v3)
  {
    v4 = (llvm::StringMapImpl *)(this + 9);
    do
    {
      v5 = *(unsigned __int8 **)v2;
      v6 = *(_QWORD *)(v2 + 8);
      v2 += 16;
      this = sub_1C4F024D8(v4, v5, v6);
    }
    while (v2 != v3);
  }
  return this;
}

BOOL llvm::LTOCodeGenerator::addModule(llvm::LTOCodeGenerator *this, llvm::LTOModule *a2)
{
  llvm::LLVMContextImpl ****v4;
  llvm::Module *v5;
  _BOOL4 v6;
  void (**v7)(void);
  llvm::Module *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;
  llvm::Module *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::LLVMContextImpl ****)*((_QWORD *)this + 2);
  v5 = (llvm::Module *)*((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v15 = v5;
  v17 = 0;
  v6 = llvm::Linker::linkInModule(v4, &v15, 0, v16);
  if (v17 == v16)
  {
    v7 = (void (**)(void))(v16[0] + 32);
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v7 = (void (**)(void))(*v17 + 40);
  }
  (*v7)();
LABEL_6:
  v8 = v15;
  v15 = 0;
  if (v8)
  {
    llvm::Module::~Module(v8);
    MEMORY[0x1CAA32FC0](v9);
  }
  v10 = *((_QWORD *)a2 + 43);
  v11 = *((_QWORD *)a2 + 44);
  while (v10 != v11)
  {
    v12 = *(unsigned __int8 **)v10;
    v13 = *(_QWORD *)(v10 + 8);
    v10 += 16;
    sub_1C4F024D8((llvm::LTOCodeGenerator *)((char *)this + 72), v12, v13);
  }
  *((_BYTE *)this + 34) = 0;
  return !v6;
}

_QWORD *llvm::LTOCodeGenerator::setModule(uint64_t a1, uint64_t *a2)
{
  llvm::StringMapImpl *v4;
  llvm::Module *v5;
  llvm::Module *v6;
  llvm::IRMover *v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  size_t v13;

  v4 = (llvm::StringMapImpl *)(a1 + 72);
  sub_1C62A23BC(a1 + 72);
  v5 = *(llvm::Module **)(*a2 + 32);
  *(_QWORD *)(*a2 + 32) = 0;
  v6 = *(llvm::Module **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if (v6)
  {
    llvm::Module::~Module(v6);
    MEMORY[0x1CAA32FC0]();
    v5 = *(llvm::Module **)(a1 + 8);
  }
  v7 = (llvm::IRMover *)operator new();
  llvm::IRMover::IRMover(v7, v5);
  result = *(_QWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  if (result)
    sub_1C58FFF48((uint64_t)result);
  v9 = *a2;
  v10 = *(_QWORD *)(*a2 + 344);
  v11 = *(_QWORD *)(v9 + 352);
  while (v10 != v11)
  {
    v12 = *(unsigned __int8 **)v10;
    v13 = *(_QWORD *)(v10 + 8);
    v10 += 16;
    result = sub_1C4F024D8(v4, v12, v13);
  }
  *(_BYTE *)(a1 + 34) = 0;
  return result;
}

uint64_t llvm::LTOCodeGenerator::setTargetOptions(llvm::LTOCodeGenerator *this, const llvm::TargetOptions *a2)
{
  return sub_1C58FC150((uint64_t)this + 560, (uint64_t)a2);
}

uint64_t sub_1C58FC150(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  int v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a1 & 0xFE | *(_BYTE *)a2 & 1;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)(a2 + 4);
  v4 = *(_OWORD *)(a2 + 12);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 12) = v4;
  sub_1C4D82DC0((_QWORD *)(a1 + 40), (uint64_t *)(a2 + 40));
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  v5 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  v6 = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = v6;
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)(a2 + 184));
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  v7 = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = v7;
  if (a1 != a2)
    sub_1C4D82E38(a1 + 256, *(std::string **)(a2 + 256), *(std::string **)(a2 + 264), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3));
  std::string::operator=((std::string *)(a1 + 280), (const std::string *)(a2 + 280));
  return a1;
}

uint64_t llvm::LTOCodeGenerator::setDebugInfo(uint64_t result, int a2)
{
  *(_BYTE *)(result + 32) = a2 != 0;
  return result;
}

uint64_t llvm::LTOCodeGenerator::setOptLevel(uint64_t this, unsigned int a2)
{
  *(_DWORD *)(this + 968) = a2;
  *(_BYTE *)(this + 1441) = a2 > 1;
  *(_BYTE *)(this + 1442) = a2 > 1;
  *(_DWORD *)(this + 960) = a2;
  return this;
}

uint64_t llvm::LTOCodeGenerator::writeMergedModules(uint64_t a1, std::string::value_type *a2, std::string::size_type a3)
{
  uint64_t v6;
  std::string *p_dst;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  std::string::size_type v17;
  void **v18;
  std::string::size_type v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  void **v28;
  std::string::size_type v29;
  llvm::raw_fd_ostream *v30;
  const std::error_category *v31;
  std::error_code v32;
  std::string v33;
  std::string __dst;
  std::string v35;
  void *__p[2];
  uint64_t v37;
  std::string v38;
  std::string v39;
  char v40;
  uint64_t v41;
  char v42;
  llvm::raw_fd_ostream *v43;
  std::error_code v44;

  if (!llvm::LTOCodeGenerator::determineTarget((std::string *)a1))
    return 0;
  llvm::LTOCodeGenerator::verifyMergedModuleOnce(a1);
  llvm::LTOCodeGenerator::applyScopeRestrictions(a1);
  v44.__val_ = 0;
  v44.__cat_ = std::system_category();
  llvm::ToolOutputFile::ToolOutputFile(&v39, a2, a3, (uint64_t)&v44, 0);
  if (v44.__val_)
  {
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    *(_OWORD *)&v38.__r_.__value_.__r.__words[1] = xmmword_1C86516D0;
    strcpy(v38.__r_.__value_.__l.__data_, "could not open bitcode file for writing: ");
    if (!a2)
    {
      memset(&__dst, 0, sizeof(__dst));
LABEL_22:
      v12 = std::string::append(&__dst, ": ");
      v13 = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      std::error_code::message(&v33, &v44);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v33;
      else
        v14 = (std::string *)v33.__r_.__value_.__r.__words[0];
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v33.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v33.__r_.__value_.__l.__size_;
      v16 = std::string::append(&v35, (const std::string::value_type *)v14, size);
      v17 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v37 = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (v37 >= 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      if (v37 >= 0)
        v19 = HIBYTE(v37) & 0x7F;
      else
        v19 = (std::string::size_type)__p[1];
      std::string::append(&v38, (const std::string::value_type *)v18, v19);
      if (SHIBYTE(v37) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      llvm::LTOCodeGenerator::emitError((uint64_t *)a1, (uint64_t *)&v38);
LABEL_71:
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      v6 = 0;
      goto LABEL_74;
    }
    if (a3 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a3 >= 0x17)
      {
        v10 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a3 | 7) != 0x17)
          v10 = a3 | 7;
        v11 = v10 + 1;
        p_dst = (std::string *)operator new(v10 + 1);
        __dst.__r_.__value_.__l.__size_ = a3;
        __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a3;
        p_dst = &__dst;
        if (!a3)
          goto LABEL_21;
      }
      memmove(p_dst, a2, a3);
LABEL_21:
      p_dst->__r_.__value_.__s.__data_[a3] = 0;
      goto LABEL_22;
    }
LABEL_77:
    abort();
  }
  llvm::WriteBitcodeToFile(*(const llvm::Module **)(a1 + 8), v43, *(unsigned __int8 *)(a1 + 257), 0, 0, 0);
  llvm::raw_fd_ostream::close(v43);
  if (*((_DWORD *)v43 + 18))
  {
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&v38.__r_.__value_.__r.__words[1] = xmmword_1C8655410;
    strcpy(v38.__r_.__value_.__l.__data_, "could not write bitcode file: ");
    if (!a2)
    {
      memset(&__dst, 0, sizeof(__dst));
LABEL_50:
      v22 = std::string::append(&__dst, ": ");
      v23 = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v32 = *(std::error_code *)((char *)v43 + 72);
      std::error_code::message(&v33, &v32);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v33;
      else
        v24 = (std::string *)v33.__r_.__value_.__r.__words[0];
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = *((_BYTE *)&v33.__r_.__value_.__s + 23) & 0x7F;
      else
        v25 = v33.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v35, (const std::string::value_type *)v24, v25);
      v27 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v37 = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (v37 >= 0)
        v28 = __p;
      else
        v28 = (void **)__p[0];
      if (v37 >= 0)
        v29 = HIBYTE(v37) & 0x7F;
      else
        v29 = (std::string::size_type)__p[1];
      std::string::append(&v38, (const std::string::value_type *)v28, v29);
      if (SHIBYTE(v37) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      llvm::LTOCodeGenerator::emitError((uint64_t *)a1, (uint64_t *)&v38);
      v30 = v43;
      v31 = std::system_category();
      *((_DWORD *)v30 + 18) = 0;
      *((_QWORD *)v30 + 10) = v31;
      goto LABEL_71;
    }
    if (a3 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_77;
    if (a3 >= 0x17)
    {
      v20 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v20 = a3 | 7;
      v21 = v20 + 1;
      v9 = (std::string *)operator new(v20 + 1);
      __dst.__r_.__value_.__l.__size_ = a3;
      __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a3;
      v9 = &__dst;
      if (!a3)
        goto LABEL_49;
    }
    memmove(v9, a2, a3);
LABEL_49:
    v9->__r_.__value_.__s.__data_[a3] = 0;
    goto LABEL_50;
  }
  v6 = 1;
  v40 = 1;
LABEL_74:
  if (v42)
  {
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v41);
    v42 = 0;
  }
  llvm::ToolOutputFile::CleanupInstaller::~CleanupInstaller((llvm::ToolOutputFile::CleanupInstaller *)&v39);
  return v6;
}

BOOL llvm::LTOCodeGenerator::determineTarget(std::string *this)
{
  _BOOL8 v1;
  std::string *v3;
  char v4;
  BOOL v5;
  std::string::pointer data;
  size_t v7;
  size_t size;
  uint64_t *v9;
  std::string::pointer v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::pointer v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  const std::string::value_type *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string::pointer i;
  char v22;
  BOOL v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string *v27;
  uint64_t v28;
  void **v29;
  std::string::size_type v30;
  const char *v31;
  std::string::pointer v32;
  std::string v33;
  int64x2_t v34;
  uint64_t v35;
  void *__p[2];
  uint64_t v37;
  __int16 v38;
  void *v39[2];
  std::string::size_type v40;
  int v41;
  int v42;
  unsigned int v43;

  if (this[1].__r_.__value_.__r.__words[0])
    return 1;
  v3 = this + 9;
  std::string::operator=(this + 9, (const std::string *)(this->__r_.__value_.__l.__size_ + 216));
  if (SHIBYTE(this[9].__r_.__value_.__r.__words[2]) < 0)
  {
    if (this[9].__r_.__value_.__l.__size_)
      goto LABEL_16;
  }
  else if (*((_BYTE *)&this[9].__r_.__value_.__s + 23))
  {
    goto LABEL_16;
  }
  llvm::sys::getDefaultTargetTriple((uint64_t)v39);
  if (SHIBYTE(this[9].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3->__r_.__value_.__l.__data_);
  *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)v39;
  v3->__r_.__value_.__r.__words[2] = v40;
  v4 = HIBYTE(this[9].__r_.__value_.__r.__words[2]);
  v5 = v4 < 0;
  if (v4 >= 0)
    data = (std::string::pointer)v3;
  else
    data = this[9].__r_.__value_.__l.__data_;
  v7 = v4 & 0x7F;
  if (v5)
    size = this[9].__r_.__value_.__l.__size_;
  else
    size = v7;
  sub_1C4D828E4(this->__r_.__value_.__l.__size_, data, size);
LABEL_16:
  v38 = 260;
  __p[0] = v3;
  llvm::Triple::Triple((uint64_t)v39, (llvm::Twine *)__p);
  __p[0] = 0;
  __p[1] = 0;
  v37 = 0;
  v9 = llvm::TargetRegistry::lookupTarget((std::string::size_type)v3, (uint64_t)__p);
  this[8].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
  v1 = v9 != 0;
  if (v9)
  {
    v11 = this[36].__r_.__value_.__l.__data_;
    v12 = this[36].__r_.__value_.__l.__size_;
    memset(&v33, 0, sizeof(v33));
    if (v11 != (std::string::pointer)v12)
    {
      v13 = 0;
      v14 = v11;
      do
      {
        if (v14[23] < 0)
          v15 = *((_QWORD *)v14 + 1);
        else
          v15 = v14[23];
        v13 += v15;
        v14 += 24;
      }
      while (v14 != (std::string::pointer)v12);
      std::string::reserve(&v33, v13);
      v16 = v11[23];
      v17 = v16 < 0;
      v18 = v16 >= 0 ? v11 : *(const std::string::value_type **)v11;
      v19 = v16 & 0x7F;
      v20 = v17 ? *((_QWORD *)v11 + 1) : v19;
      std::string::append(&v33, v18, v20);
      for (i = v11 + 24; i != (std::string::pointer)v12; i += 24)
      {
        std::string::append(&v33, "", 0);
        v22 = i[23];
        v23 = v22 < 0;
        if (v22 >= 0)
          v24 = i;
        else
          v24 = *(const std::string::value_type **)i;
        v25 = v22 & 0x7F;
        if (v23)
          v26 = *((_QWORD *)i + 1);
        else
          v26 = v25;
        std::string::append(&v33, v24, v26);
      }
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v33;
    else
      v27 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = *((_BYTE *)&v33.__r_.__value_.__s + 23) & 0x7F;
    else
      v28 = v33.__r_.__value_.__l.__size_;
    v35 = 0;
    v34 = 0uLL;
    llvm::SubtargetFeatures::Split((unint64_t *)&v34, (uint64_t)v27, v28);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    llvm::SubtargetFeatures::getDefaultSubtargetFeatures(&v34, (const llvm::Triple *)v39);
    sub_1C5021A04((std::string *)v34.i64[0], (std::string *)v34.i64[1], ",", 1uLL, &v33);
    v29 = (void **)&this[6].__r_.__value_.__r.__words[2];
    if (this[7].__r_.__value_.__s.__data_[15] < 0)
      operator delete(*v29);
    *(_OWORD *)v29 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
    this[7].__r_.__value_.__l.__size_ = v33.__r_.__value_.__r.__words[2];
    if (this[23].__r_.__value_.__s.__data_[7] < 0)
      v30 = this[22].__r_.__value_.__r.__words[2];
    else
      v30 = this[23].__r_.__value_.__s.__data_[7];
    if (v30 || v43 > 0x21 || ((1 << v43) & 0x3F0000888) == 0)
      goto LABEL_71;
    if (v41 > 40)
    {
      if (v41 == 42)
      {
        v31 = "core2";
      }
      else
      {
        if (v41 != 41)
        {
LABEL_71:
          llvm::LTOCodeGenerator::createTargetMachine((llvm::LTOCodeGenerator *)this, &v33);
          v32 = this[1].__r_.__value_.__l.__data_;
          this[1].__r_.__value_.__r.__words[0] = v33.__r_.__value_.__r.__words[0];
          if (v32)
            (*(void (**)(std::string::pointer))(*(_QWORD *)v32 + 8))(v32);
          v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
          sub_1C4765410((void ***)&v33);
          goto LABEL_18;
        }
        v31 = "yonah";
      }
    }
    else
    {
      if (v41 == 3)
      {
        if (v42 != 31)
        {
          v31 = "cyclone";
          goto LABEL_70;
        }
      }
      else if (v41 != 5)
      {
        goto LABEL_71;
      }
      v31 = "apple-a12";
    }
LABEL_70:
    MEMORY[0x1CAA32ABC](&this[22].__r_.__value_.__r.__words[1], v31);
    goto LABEL_71;
  }
  llvm::LTOCodeGenerator::emitError((uint64_t *)this, (uint64_t *)__p);
LABEL_18:
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v40) < 0)
    operator delete(v39[0]);
  return v1;
}

uint64_t llvm::LTOCodeGenerator::verifyMergedModuleOnce(uint64_t this)
{
  uint64_t v1;
  llvm *v2;
  llvm *v3;
  BOOL *v4;
  llvm::Module *v5;
  void *__p;
  __int128 v7;
  char v8;

  if (!*(_BYTE *)(this + 34))
  {
    v1 = this;
    *(_BYTE *)(this + 34) = 1;
    v8 = 0;
    v2 = *(llvm **)(this + 8);
    v3 = llvm::dbgs((llvm *)this);
    this = llvm::verifyModule(v2, v3, (llvm::raw_ostream *)&v8, v4);
    if ((_DWORD)this)
      llvm::report_fatal_error((llvm *)"Broken module found, compilation aborted!", (const char *)1);
    if (v8)
    {
      __p = operator new(0x38uLL);
      v7 = xmmword_1C8662E80;
      strcpy((char *)__p, "Invalid debug info found, debug info will be stripped");
      llvm::LTOCodeGenerator::emitWarning((uint64_t *)v1, (uint64_t *)&__p);
      if (SHIBYTE(v7) < 0)
        operator delete(__p);
      return llvm::StripDebugInfo(*(llvm **)(v1 + 8), v5);
    }
  }
  return this;
}

uint64_t llvm::LTOCodeGenerator::applyScopeRestrictions(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t ***v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ****v12;
  uint64_t ***v13;
  int v14;
  int v15;
  uint64_t ***v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t ***v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ****v27;
  uint64_t ***v28;
  int v29;
  int v30;
  uint64_t ***v31;
  size_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t ***v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ****v42;
  uint64_t ***v43;
  int v44;
  int v45;
  uint64_t ***v46;
  size_t v47;
  llvm::Module *v48;
  char *v49;
  size_t *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _QWORD v54[2];
  int v55;
  void *v56;
  __int128 v57;
  _BYTE v58[64];
  uint64_t ***v59;
  size_t v60;
  _DWORD v61[4];
  size_t *v62;
  _QWORD v63[5];

  v63[4] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 33))
    return this;
  v1 = this;
  v54[0] = 0;
  v54[1] = 0;
  v55 = 0;
  v56 = v58;
  v57 = xmmword_1C64638C0;
  *(_QWORD *)&v52 = &v56;
  *((_QWORD *)&v52 + 1) = v54;
  v53 = this;
  llvm::LTOCodeGenerator::preserveDiscardableGVs(this, *(_QWORD *)(this + 8), (uint64_t)sub_1C58FFA18, (uint64_t)&v52);
  if (!*(_BYTE *)(v1 + 256))
    goto LABEL_65;
  v2 = *(_QWORD **)(v1 + 8);
  if (!*(_BYTE *)(v1 + 512))
    goto LABEL_61;
  v3 = v2 + 3;
  v4 = (_QWORD *)v2[4];
  if (v4 != v2 + 3)
  {
    while (1)
    {
      if (v4)
        v5 = (uint64_t ***)(v4 - 7);
      else
        v5 = 0;
      v6 = (_DWORD)v5[4] & 0xF;
      v7 = v6 > 8 || ((1 << v6) & 0x182) == 0;
      if (!v7 || (*((_BYTE *)v5 + 23) & 0x10) == 0)
        goto LABEL_12;
      v8 = ***v5;
      v9 = *(_QWORD *)(v8 + 152);
      v10 = *(unsigned int *)(v8 + 168);
      if (!(_DWORD)v10)
        goto LABEL_21;
      LODWORD(v11) = (v10 - 1) & ((v5 >> 4) ^ (v5 >> 9));
      v12 = (uint64_t ****)(v9 + 16 * v11);
      v13 = *v12;
      if (*v12 != v5)
        break;
LABEL_22:
      v16 = v12[1];
      v17 = (size_t)*v16;
      v59 = v16 + 2;
      v60 = v17;
      v61[0] = v6;
      sub_1C58FF3B0(v1 + 104, (unsigned __int8 *)v16 + 16, v17, v61);
LABEL_12:
      v4 = (_QWORD *)v4[1];
      if (v4 == v3)
      {
        v2 = *(_QWORD **)(v1 + 8);
        goto LABEL_23;
      }
    }
    v14 = 1;
    while (v13 != (uint64_t ***)-4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(uint64_t ****)(v9 + 16 * v11);
      if (v13 == v5)
      {
        v12 = (uint64_t ****)(v9 + 16 * v11);
        goto LABEL_22;
      }
    }
LABEL_21:
    v12 = (uint64_t ****)(v9 + 16 * v10);
    goto LABEL_22;
  }
LABEL_23:
  v18 = v2 + 1;
  v19 = (_QWORD *)v2[2];
  if (v19 != v2 + 1)
  {
    while (1)
    {
      if (v19)
        v20 = (uint64_t ***)(v19 - 7);
      else
        v20 = 0;
      v21 = (_DWORD)v20[4] & 0xF;
      v22 = v21 > 8 || ((1 << v21) & 0x182) == 0;
      if (!v22 || (*((_BYTE *)v20 + 23) & 0x10) == 0)
        goto LABEL_31;
      v23 = ***v20;
      v24 = *(_QWORD *)(v23 + 152);
      v25 = *(unsigned int *)(v23 + 168);
      if (!(_DWORD)v25)
        goto LABEL_40;
      LODWORD(v26) = (v25 - 1) & ((v20 >> 4) ^ (v20 >> 9));
      v27 = (uint64_t ****)(v24 + 16 * v26);
      v28 = *v27;
      if (*v27 != v20)
        break;
LABEL_41:
      v31 = v27[1];
      v32 = (size_t)*v31;
      v59 = v31 + 2;
      v60 = v32;
      v61[0] = v21;
      sub_1C58FF3B0(v1 + 104, (unsigned __int8 *)v31 + 16, v32, v61);
LABEL_31:
      v19 = (_QWORD *)v19[1];
      if (v19 == v18)
      {
        v2 = *(_QWORD **)(v1 + 8);
        goto LABEL_42;
      }
    }
    v29 = 1;
    while (v28 != (uint64_t ***)-4096)
    {
      v30 = v26 + v29++;
      v26 = v30 & (v25 - 1);
      v28 = *(uint64_t ****)(v24 + 16 * v26);
      if (v28 == v20)
      {
        v27 = (uint64_t ****)(v24 + 16 * v26);
        goto LABEL_41;
      }
    }
LABEL_40:
    v27 = (uint64_t ****)(v24 + 16 * v25);
    goto LABEL_41;
  }
LABEL_42:
  v33 = v2 + 5;
  v34 = (_QWORD *)v2[6];
  if (v34 == v2 + 5)
    goto LABEL_61;
  do
  {
    if (v34)
      v35 = (uint64_t ***)(v34 - 6);
    else
      v35 = 0;
    v36 = (_DWORD)v35[4] & 0xF;
    v37 = v36 > 8 || ((1 << v36) & 0x182) == 0;
    if (v37 && (*((_BYTE *)v35 + 23) & 0x10) != 0)
    {
      v38 = ***v35;
      v39 = *(_QWORD *)(v38 + 152);
      v40 = *(unsigned int *)(v38 + 168);
      if ((_DWORD)v40)
      {
        LODWORD(v41) = (v40 - 1) & ((v35 >> 4) ^ (v35 >> 9));
        v42 = (uint64_t ****)(v39 + 16 * v41);
        v43 = *v42;
        if (*v42 == v35)
        {
LABEL_60:
          v46 = v42[1];
          v47 = (size_t)*v46;
          v59 = v46 + 2;
          v60 = v47;
          v61[0] = v36;
          sub_1C58FF3B0(v1 + 104, (unsigned __int8 *)v46 + 16, v47, v61);
          goto LABEL_50;
        }
        v44 = 1;
        while (v43 != (uint64_t ***)-4096)
        {
          v45 = v41 + v44++;
          v41 = v45 & (v40 - 1);
          v43 = *(uint64_t ****)(v39 + 16 * v41);
          if (v43 == v35)
          {
            v42 = (uint64_t ****)(v39 + 16 * v41);
            goto LABEL_60;
          }
        }
      }
      v42 = (uint64_t ****)(v39 + 16 * v40);
      goto LABEL_60;
    }
LABEL_50:
    v34 = (_QWORD *)v34[1];
  }
  while (v34 != v33);
  v2 = *(_QWORD **)(v1 + 8);
LABEL_61:
  llvm::updateCompilerUsed((uint64_t)v2, *(_QWORD *)(v1 + 24), v1 + 72);
  v48 = *(llvm::Module **)(v1 + 8);
  v49 = (char *)operator new(0x20uLL);
  *(_QWORD *)v49 = &off_1E817ECE0;
  *(_OWORD *)(v49 + 8) = v52;
  *((_QWORD *)v49 + 3) = v53;
  LOBYTE(v59) = 0;
  v62 = (size_t *)v49;
  v63[0] = 0;
  v63[1] = 0;
  v63[2] = 0x800000000;
  llvm::InternalizePass::internalizeModule((llvm::InternalizePass *)&v59, v48, 0);
  sub_1C4F02264((uint64_t)v63);
  v50 = v62;
  if (v62 == &v60)
  {
    v51 = 4;
    v50 = &v60;
    goto LABEL_63;
  }
  if (v62)
  {
    v51 = 5;
LABEL_63:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  *(_BYTE *)(v1 + 33) = 1;
LABEL_65:
  if (v56 != v58)
    free(v56);
  return MEMORY[0x1CAA32FB4](v54[0], 8);
}

uint64_t llvm::LTOCodeGenerator::emitError(uint64_t *a1, uint64_t *a2)
{
  uint64_t (*v2)(_QWORD, uint64_t *, uint64_t);
  uint64_t v4;
  uint64_t *v5;
  __int16 v6;
  uint64_t (**v7)(llvm::DiagnosticInfo *__hidden);
  int v8;
  char v9;
  uint64_t **v10;

  v2 = (uint64_t (*)(_QWORD, uint64_t *, uint64_t))a1[30];
  if (v2)
  {
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    return v2(0, a2, a1[31]);
  }
  else
  {
    v4 = *a1;
    v6 = 260;
    v5 = a2;
    v8 = 3;
    v9 = 0;
    v7 = &off_1E817EB68;
    v10 = &v5;
    return llvm::LLVMContext::diagnose(v4, (const llvm::DiagnosticInfo *)&v7);
  }
}

BOOL llvm::LTOCodeGenerator::compileOptimizedToFile(llvm::LTOCodeGenerator *this, const char **a2)
{
  llvm::raw_ostream *v4;
  _BOOL8 v5;
  llvm *v6;
  uint64_t (**v7)(void);
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[3];
  llvm *v15;
  void *v16;
  __int128 v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x1E0C80C00];
  v17 = xmmword_1C85F20B0;
  v14[0] = &off_1E817EC78;
  v14[1] = this;
  v14[2] = &v16;
  v15 = (llvm *)v14;
  v16 = v18;
  v5 = llvm::LTOCodeGenerator::compileOptimized((uint64_t)this, v14, 1u);
  v6 = v15;
  if (v15 == (llvm *)v14)
  {
    v7 = (uint64_t (**)(void))(v14[0] + 32);
  }
  else
  {
    if (!v15)
      goto LABEL_6;
    v7 = (uint64_t (**)(void))(*(_QWORD *)v15 + 40);
  }
  v6 = (llvm *)(*v7)();
LABEL_6:
  if (v5)
  {
    v8 = *((_QWORD *)this + 66);
    if (v8)
    {
      llvm::PrintStatisticsJSON(*(const char ***)(v8 + 136), v4);
    }
    else if ((byte_1ED836D79 & 1) != 0 || byte_1EF8F7308)
    {
      llvm::PrintStatistics(v6);
    }
    v9 = v17;
    if ((unint64_t)(v17 + 1) > *((_QWORD *)&v17 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v16, v18, v17 + 1, 1);
      v9 = v17;
    }
    *((_BYTE *)v16 + v9) = 0;
    v10 = (char *)this + 184;
    MEMORY[0x1CAA32ABC]((char *)this + 184, v16);
    if (*((char *)this + 207) < 0)
      v10 = *(const char **)v10;
    *a2 = v10;
  }
  else
  {
    v13 = 261;
    v12[0] = v16;
    v12[1] = v17;
    llvm::sys::fs::remove((llvm::sys::fs *)v12, (const llvm::Twine *)1);
  }
  if (v16 != v18)
    free(v16);
  return v5;
}

BOOL llvm::LTOCodeGenerator::compileOptimized(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  _BOOL8 result;
  llvm::Module *v7;
  _QWORD *v8;
  llvm::raw_ostream *v9;
  llvm *v10;
  uint64_t (**v11)(llvm *);
  uint64_t v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  _QWORD v18[3];
  llvm *v19;
  void *__p;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  char v29;
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD v32[3];
  _QWORD v33[4];
  _QWORD v34[6];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  result = llvm::LTOCodeGenerator::determineTarget((std::string *)a1);
  if (!result)
    return result;
  llvm::LTOCodeGenerator::verifyMergedModuleOnce(a1);
  if (byte_1ED834108 && llvm::InlineAsm::containArchDependentInlineAsm(*(llvm::InlineAsm **)(a1 + 8), v7))
  {
    __p = operator new(0x28uLL);
    v21 = xmmword_1C8662E90;
    strcpy((char *)__p, "inline asm is not allowed in the module");
    llvm::LTOCodeGenerator::emitError((uint64_t *)a1, (uint64_t *)&__p);
    if (SHIBYTE(v21) < 0)
      operator delete(__p);
    return 0;
  }
  llvm::LTOCodeGenerator::restoreLinkageForExternals(a1);
  __p = &v21;
  v21 = 0uLL;
  v22 = 0;
  v23 = 0;
  v24 = 0x2800000000;
  v25 = v26;
  v26[0] = 0;
  v27[0] = 0;
  v27[1] = 0;
  v26[1] = 0;
  v26[2] = v27;
  v27[2] = v28;
  memset(v28, 0, sizeof(v28));
  v29 = 0;
  v30 = v31;
  v31[0] = 0;
  v32[0] = 0;
  v32[1] = 0;
  v31[1] = 0;
  v31[2] = v32;
  v32[2] = v33;
  v33[0] = 0;
  v33[1] = 0;
  v33[2] = v34;
  v33[3] = 0x400000000;
  v34[4] = &v35;
  v34[5] = 0;
  v35 = 0;
  v36 = xmmword_1C64169E0;
  *(_BYTE *)(a1 + 975) = 1;
  v8 = (_QWORD *)a2[3];
  if (v8)
  {
    if (v8 == a2)
    {
      v19 = (llvm *)v18;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v18);
    }
    else
    {
      v19 = (llvm *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    }
  }
  else
  {
    v19 = 0;
  }
  llvm::lto::backend(a1 + 536, v18, a3, *(uint64_t **)(a1 + 8), (llvm *)&__p, &v17);
  v10 = v19;
  if (v19 == (llvm *)v18)
  {
    v11 = (uint64_t (**)(llvm *))(v18[0] + 32);
    v10 = (llvm *)v18;
LABEL_17:
    v10 = (llvm *)(*v11)(v10);
    goto LABEL_18;
  }
  if (v19)
  {
    v11 = (uint64_t (**)(llvm *))(*(_QWORD *)v19 + 40);
    goto LABEL_17;
  }
LABEL_18:
  v12 = *(_QWORD *)(a1 + 528);
  if (v12)
  {
    llvm::PrintStatisticsJSON(*(const char ***)(v12 + 136), v9);
  }
  else if ((byte_1ED836D79 & 1) != 0 || byte_1EF8F7308)
  {
    llvm::PrintStatistics(v10);
  }
  llvm::reportAndResetTimings(0, v9);
  v13 = *(_QWORD *)(a1 + 520);
  if (v13)
  {
    *(_BYTE *)(v13 + 24) = 1;
    v14 = *(llvm::raw_ostream **)(v13 + 136);
    v15 = (const char *)*((_QWORD *)v14 + 4);
    v16 = (const char *)*((_QWORD *)v14 + 2);
    if (v15 != v16)
    {
      *((_QWORD *)v14 + 4) = v16;
      llvm::raw_ostream::flush_tied_then_write(v14, v16, v15 - v16);
    }
  }
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  sub_1C61A8910((uint64_t)&__p);
  return 1;
}

uint64_t llvm::LTOCodeGenerator::compileOptimized@<X0>(llvm::LTOCodeGenerator *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  char v5;
  uint64_t v6;
  std::error_code v7;
  std::string v8;
  __int16 v9;
  char *v10;
  std::error_code v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  result = llvm::LTOCodeGenerator::compileOptimizedToFile(this, (const char **)&v10);
  if ((result & 1) == 0)
    goto LABEL_10;
  v5 = 1;
  HIBYTE(v9) = 1;
  if (*v10)
  {
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    v5 = 3;
  }
  LOBYTE(v9) = v5;
  sub_1C5E1F6CC((unsigned __int8 *)&v8, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 0, 0, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v6 = *(_QWORD *)&v11.__val_;
    v7 = v11;
    if (!v11.__val_)
      goto LABEL_11;
    std::error_code::message(&v8, &v7);
    llvm::LTOCodeGenerator::emitError((uint64_t *)this, (uint64_t *)&v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    v9 = 260;
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 184;
    result = llvm::sys::fs::remove((llvm::sys::fs *)&v8, (const llvm::Twine *)1);
LABEL_10:
    *a2 = 0;
    return result;
  }
  std::system_category();
  v6 = *(_QWORD *)&v11.__val_;
LABEL_11:
  v9 = 260;
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 184;
  result = llvm::sys::fs::remove((llvm::sys::fs *)&v8, (const llvm::Twine *)1);
  *a2 = v6;
  return result;
}

uint64_t llvm::LTOCodeGenerator::compile_to_file(std::string *this, const char **a2)
{
  uint64_t result;

  result = llvm::LTOCodeGenerator::optimize(this);
  if ((_DWORD)result)
    return llvm::LTOCodeGenerator::compileOptimizedToFile((llvm::LTOCodeGenerator *)this, a2);
  return result;
}

uint64_t llvm::LTOCodeGenerator::optimize(std::string *this)
{
  uint64_t v2;
  size_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  llvm *v10;
  char *v11;
  _BYTE *v12;
  std::string::size_type v13;
  std::string::value_type *v14;
  llvm *v15;
  char *v16;
  std::string::pointer data;
  uint64_t v18;
  std::string::size_type v19;
  uint64_t v20;
  void *v21;
  std::string::pointer v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  llvm::raw_ostream *v25;
  _DWORD *v26;
  char *v27;
  llvm::raw_ostream *v28;
  llvm::raw_ostream *v29;
  _DWORD *v30;
  std::string *v31;
  size_t v32;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  char *v35;
  std::string *v36;
  size_t size;
  llvm::raw_ostream *v38;
  _BYTE *v39;
  void *__p;
  __int128 v41;
  char *v42;
  char *v43;
  std::string v44;
  uint64_t v45;
  _QWORD ****v46;
  __int128 v47;
  _QWORD ***v48;
  _QWORD **v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD v53[3];
  char v54;
  _QWORD *v55;
  _QWORD v56[3];
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD v62[2];
  _QWORD v63[4];
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  char *v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (!llvm::LTOCodeGenerator::determineTarget(this))
    return 0;
  if (byte_1ED8344B7 >= 0)
    v4 = byte_1ED8344B7 & 0x7F;
  else
    v4 = qword_1ED8344A8;
  if (byte_1ED8344B7 >= 0)
    v5 = &qword_1ED8344A0;
  else
    v5 = (uint64_t *)qword_1ED8344A0;
  if (byte_1ED83459F >= 0)
    v6 = byte_1ED83459F & 0x7F;
  else
    v6 = qword_1ED834590;
  if (byte_1ED83459F >= 0)
    v7 = (char *)&qword_1ED834588;
  else
    v7 = (char *)qword_1ED834588;
  if (byte_1ED834687 >= 0)
    v8 = byte_1ED834687 & 0x7F;
  else
    v8 = qword_1ED834678;
  if (byte_1ED834687 >= 0)
    v9 = &qword_1ED834670;
  else
    v9 = (uint64_t *)qword_1ED834670;
  llvm::lto::setupLLVMOptimizationRemarks(v5, v4, (uint64_t *)this->__r_.__value_.__l.__data_, v7, v6, (uint64_t)v9, v8, byte_1ED8341C8, (uint64_t)&v72, qword_1ED834288, *(uint64_t *)&byte_1ED834290, -1);
  if ((v73 & 1) != 0)
  {
    v24 = (llvm::raw_ostream *)llvm::errs(v10);
    v25 = v24;
    v26 = (_DWORD *)*((_QWORD *)v24 + 4);
    if (*((_QWORD *)v24 + 3) - (_QWORD)v26 > 6uLL)
    {
      *(_DWORD *)((char *)v26 + 3) = 540701295;
      *v26 = 1869771333;
      *((_QWORD *)v24 + 4) += 7;
    }
    else
    {
      v25 = llvm::raw_ostream::write(v24, "Error: ", 7uLL);
    }
    if ((v73 & 1) != 0)
    {
      v27 = v72;
      v72 = 0;
    }
    else
    {
      v27 = 0;
    }
    v43 = v27;
    sub_1C61D2548(&v43, &v44);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v44;
    else
      v36 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v44.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v44.__r_.__value_.__l.__size_;
    v38 = llvm::raw_ostream::write(v25, (const char *)v36, size);
    v39 = (_BYTE *)*((_QWORD *)v38 + 4);
    if (*((_BYTE **)v38 + 3) == v39)
    {
      llvm::raw_ostream::write(v38, "\n", 1uLL);
    }
    else
    {
      *v39 = 10;
      ++*((_QWORD *)v38 + 4);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (v43)
      (*(void (**)(char *))(*(_QWORD *)v43 + 8))(v43);
    v35 = "Can't get an output file for the remarks";
LABEL_75:
    llvm::report_fatal_error((llvm *)v35, (const char *)1);
  }
  v11 = v72;
  v72 = 0;
  v12 = (_BYTE *)this[21].__r_.__value_.__r.__words[2];
  this[21].__r_.__value_.__r.__words[2] = (std::string::size_type)v11;
  if (v12)
    sub_1C49C7E54((uint64_t)&this[21].__r_.__value_.__r.__words[2], v12);
  if (byte_1ED83476F >= 0)
    v13 = byte_1ED83476F & 0x7F;
  else
    v13 = unk_1ED834760;
  if (byte_1ED83476F >= 0)
    v14 = (std::string::value_type *)&qword_1ED834758;
  else
    v14 = (std::string::value_type *)qword_1ED834758;
  llvm::lto::setupStatsFile(v14, v13, (uint64_t)&v70);
  if ((v71 & 1) != 0)
  {
    v28 = (llvm::raw_ostream *)llvm::errs(v15);
    v29 = v28;
    v30 = (_DWORD *)*((_QWORD *)v28 + 4);
    if (*((_QWORD *)v28 + 3) - (_QWORD)v30 > 6uLL)
    {
      *(_DWORD *)((char *)v30 + 3) = 540701295;
      *v30 = 1869771333;
      *((_QWORD *)v28 + 4) += 7;
    }
    else
    {
      v29 = llvm::raw_ostream::write(v28, "Error: ", 7uLL);
    }
    v42 = v70;
    sub_1C61D2548(&v42, &v44);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v44;
    else
      v31 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = *((_BYTE *)&v44.__r_.__value_.__s + 23) & 0x7F;
    else
      v32 = v44.__r_.__value_.__l.__size_;
    v33 = llvm::raw_ostream::write(v29, (const char *)v31, v32);
    v34 = (_BYTE *)*((_QWORD *)v33 + 4);
    if (*((_BYTE **)v33 + 3) == v34)
    {
      llvm::raw_ostream::write(v33, "\n", 1uLL);
    }
    else
    {
      *v34 = 10;
      ++*((_QWORD *)v33 + 4);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (v42)
      (*(void (**)(char *))(*(_QWORD *)v42 + 8))(v42);
    v35 = "Can't get an output file for the statistics";
    goto LABEL_75;
  }
  v16 = v70;
  v70 = 0;
  data = this[22].__r_.__value_.__l.__data_;
  this[22].__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (data)
    sub_1C49C7E54((uint64_t)&this[22], data);
  v18 = this->__r_.__value_.__l.__size_;
  memset(&v44, 0, sizeof(v44));
  llvm::updateVCallVisibilityInModule(v18, 0, (uint64_t)&v44);
  MEMORY[0x1CAA32FB4](0, 8);
  llvm::LTOCodeGenerator::verifyMergedModuleOnce((uint64_t)this);
  llvm::LTOCodeGenerator::applyScopeRestrictions((uint64_t)this);
  llvm::Module::addModuleFlag((uint64_t **)this->__r_.__value_.__l.__size_, (llvm::Type *)1, "LTOPostLink", 0xBuLL, (llvm::Type *)1);
  v19 = this->__r_.__value_.__l.__size_;
  v20 = this[1].__r_.__value_.__r.__words[0] + 16;
  LOWORD(v44.__r_.__value_.__r.__words[1]) = 0;
  WORD2(v44.__r_.__value_.__r.__words[2]) = 0;
  v46 = &v48;
  v47 = xmmword_1C6464ED0;
  v49 = &v51;
  v50 = 0x1000000000;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v62[0] = v63;
  v62[1] = 0x800000000;
  v66 = 0;
  v67 = &v69;
  v68 = 0x800000000;
  sub_1C48815D8((uint64_t)&v44, v20);
  sub_1C48815D8(v19 + 272, (uint64_t)&v44);
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v44);
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44.__r_.__value_.__l.__size_;
  *(_OWORD *)&v44.__r_.__value_.__r.__words[1] = 0uLL;
  v45 = 0;
  v46 = 0;
  *(_QWORD *)&v47 = 0x2800000000;
  v48 = &v49;
  v49 = 0;
  v52[0] = 0;
  v52[1] = 0;
  v50 = 0;
  v51 = v52;
  v52[2] = v53;
  memset(v53, 0, sizeof(v53));
  v54 = 0;
  v55 = v56;
  v56[0] = 0;
  v57[0] = 0;
  v57[1] = 0;
  v56[1] = 0;
  v56[2] = v57;
  v57[2] = &v58;
  v58 = 0;
  v59 = 0;
  v60 = v62;
  v61 = 0x400000000;
  v63[2] = &v64;
  v63[3] = 0;
  v64 = 0;
  v65 = xmmword_1C64169E0;
  llvm::LTOCodeGenerator::createTargetMachine((llvm::LTOCodeGenerator *)this, &__p);
  v21 = __p;
  v22 = this[1].__r_.__value_.__l.__data_;
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  if (v22)
  {
    (*(void (**)(std::string::pointer))(*(_QWORD *)v22 + 8))(v22);
    v21 = this[1].__r_.__value_.__l.__data_;
  }
  v23 = this->__r_.__value_.__l.__size_;
  __p = 0;
  v41 = 0uLL;
  v2 = llvm::lto::opt((uint64_t)&this[22].__r_.__value_.__l.__size_, (uint64_t)v21, 0, v23);
  if (__p)
  {
    *(_QWORD *)&v41 = __p;
    operator delete(__p);
  }
  if ((v2 & 1) == 0)
  {
    __p = operator new(0x28uLL);
    v41 = xmmword_1C85FC090;
    strcpy((char *)__p, "LTO middle-end optimizations failed");
    llvm::LTOCodeGenerator::emitError((uint64_t *)this, (uint64_t *)&__p);
    if (SHIBYTE(v41) < 0)
      operator delete(__p);
  }
  sub_1C61A8910((uint64_t)&v44);
  sub_1C62B2694((uint64_t)&v70);
  sub_1C62B2694((uint64_t)&v72);
  return v2;
}

uint64_t llvm::LTOCodeGenerator::compile@<X0>(std::string *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = llvm::LTOCodeGenerator::optimize(this);
  if ((result & 1) != 0)
    return llvm::LTOCodeGenerator::compileOptimized((llvm::LTOCodeGenerator *)this, a2);
  *a2 = 0;
  return result;
}

uint64_t llvm::LTOCodeGenerator::createTargetMachine@<X0>(llvm::LTOCodeGenerator *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;

  v5 = *((_QWORD *)this + 27);
  v3 = (char *)this + 216;
  v4 = v5;
  v6 = *((_QWORD *)v3 - 1);
  v7 = v3[23];
  v8 = v7;
  if (v7 >= 0)
    v9 = (uint64_t)v3;
  else
    v9 = v4;
  v10 = v7 & 0x7F;
  if (v8 >= 0)
    v11 = v10;
  else
    v11 = *((_QWORD *)v3 + 1);
  v12 = v3[343];
  if (v12 >= 0)
    v13 = (uint64_t)(v3 + 320);
  else
    v13 = *((_QWORD *)v3 + 40);
  if (v12 >= 0)
    v14 = v12 & 0x7F;
  else
    v14 = *((_QWORD *)v3 + 41);
  v15 = *(v3 - 33);
  v16 = *((_QWORD *)v3 - 6);
  v17 = (uint64_t)(v3 + 344);
  v18 = *((_QWORD *)v3 + 91);
  v19 = *((_DWORD *)v3 + 186);
  v20 = v15 < 0;
  v23 = *((_QWORD *)v3 - 7);
  v21 = v3 - 56;
  v22 = v23;
  if (v15 >= 0)
    v24 = (uint64_t)v21;
  else
    v24 = v22;
  v25 = v15 & 0x7F;
  if (v20)
    v26 = v16;
  else
    v26 = v25;
  result = sub_1C4D7B2D4(v6, v9, v11, v13, v14, v24, v26, v17, v18, 0, v19, 0);
  *a2 = result;
  return result;
}

void llvm::LTOCodeGenerator::preserveDiscardableGVs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t i;
  uint64_t ***v7;
  uint64_t j;
  uint64_t ***v9;
  uint64_t k;
  uint64_t ***v11;
  llvm::UndefValue **v12;
  _QWORD v13[3];
  llvm::UndefValue **v14;
  llvm::UndefValue **v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = a3;
  v17[1] = a4;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v13[0] = v17;
  v13[1] = a1;
  v13[2] = &v14;
  v5 = a2 + 24;
  for (i = *(_QWORD *)(a2 + 32); i != v5; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v7 = (uint64_t ***)(i - 56);
    else
      v7 = 0;
    sub_1C58FDD1C(v13, v7);
  }
  for (j = *(_QWORD *)(a2 + 16); j != a2 + 8; j = *(_QWORD *)(j + 8))
  {
    if (j)
      v9 = (uint64_t ***)(j - 56);
    else
      v9 = 0;
    sub_1C58FDD1C(v13, v9);
  }
  for (k = *(_QWORD *)(a2 + 48); k != a2 + 40; k = *(_QWORD *)(k + 8))
  {
    if (k)
      v11 = (uint64_t ***)(k - 48);
    else
      v11 = 0;
    sub_1C58FDD1C(v13, v11);
  }
  v12 = v14;
  if (v14 != v15)
  {
    sub_1C5F50CB4((uint64_t **)a2, "llvm.compiler.used", 0x12uLL, v14, v15 - v14);
    v12 = v14;
  }
  if (v12)
  {
    v15 = v12;
    operator delete(v12);
  }
}

void sub_1C58FDD1C(_QWORD *a1, uint64_t ***a2)
{
  int v2;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ****v19;
  uint64_t ***v20;
  int v21;
  int v22;
  char **v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t ***v35;
  char *v36;
  uint64_t **v37;
  uint64_t **v38;
  const char *v39;
  uint64_t ***v40;
  uint64_t **v41;
  _QWORD v42[4];
  __int16 v43;
  _QWORD v44[4];
  __int16 v45;
  void *v46[2];
  char v47;

  v2 = *((_DWORD *)a2 + 8);
  if ((v2 & 0xFu) > 8 || ((1 << (v2 & 0xF)) & 0x18E) == 0)
    return;
  v6 = (uint64_t *)a1[1];
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      return;
  }
  else if ((v2 & 0x800000) == 0 && a2[9] == (uint64_t **)(a2 + 9))
  {
    return;
  }
  if (!(*(unsigned int (**)(_QWORD, uint64_t ***))*a1)(*(_QWORD *)(*a1 + 8), a2))
    return;
  if (((_DWORD)a2[4] & 0xF) == 7)
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v37 = 0;
      v36 = &byte_1C871356D;
      goto LABEL_51;
    }
    v15 = ***a2;
    v16 = *(_QWORD *)(v15 + 152);
    v17 = *(unsigned int *)(v15 + 168);
    if ((_DWORD)v17)
    {
      LODWORD(v18) = (v17 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v19 = (uint64_t ****)(v16 + 16 * v18);
      v20 = *v19;
      if (*v19 == a2)
      {
LABEL_50:
        v40 = v19[1];
        v41 = *v40;
        v36 = (char *)(v40 + 2);
        v37 = v41;
LABEL_51:
        v39 = "Linker asked to preserve internal global: '";
LABEL_52:
        v42[0] = v39;
        v42[2] = v36;
        v42[3] = v37;
        v43 = 1283;
        v44[0] = v42;
        v44[2] = "'";
        v45 = 770;
        llvm::Twine::str((llvm::Twine *)v44, v46);
        llvm::LTOCodeGenerator::emitWarning(v6, (uint64_t *)v46);
        if (v47 < 0)
          operator delete(v46[0]);
        return;
      }
      v21 = 1;
      while (v20 != (uint64_t ***)-4096)
      {
        v22 = v18 + v21++;
        v18 = v22 & (v17 - 1);
        v20 = *(uint64_t ****)(v16 + 16 * v18);
        if (v20 == a2)
        {
          v19 = (uint64_t ****)(v16 + 16 * v18);
          goto LABEL_50;
        }
      }
    }
    v19 = (uint64_t ****)(v16 + 16 * v17);
    goto LABEL_50;
  }
  if (((_DWORD)a2[4] & 0xF) == 1)
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v37 = 0;
      v36 = &byte_1C871356D;
      goto LABEL_48;
    }
    v7 = ***a2;
    v8 = *(_QWORD *)(v7 + 152);
    v9 = *(unsigned int *)(v7 + 168);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v11 = (uint64_t ****)(v8 + 16 * v10);
      v12 = *v11;
      if (*v11 == a2)
      {
LABEL_47:
        v35 = v11[1];
        v38 = *v35;
        v36 = (char *)(v35 + 2);
        v37 = v38;
LABEL_48:
        v39 = "Linker asked to preserve available_externally global: '";
        goto LABEL_52;
      }
      v13 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(uint64_t ****)(v8 + 16 * v10);
        if (v12 == a2)
        {
          v11 = (uint64_t ****)(v8 + 16 * v10);
          goto LABEL_47;
        }
      }
    }
    v11 = (uint64_t ****)(v8 + 16 * v9);
    goto LABEL_47;
  }
  v23 = (char **)a1[2];
  v25 = v23[1];
  v24 = (unint64_t)v23[2];
  if ((unint64_t)v25 >= v24)
  {
    v27 = *v23;
    v28 = (v25 - *v23) >> 3;
    v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 61)
      abort();
    v30 = v24 - (_QWORD)v27;
    if (v30 >> 2 > v29)
      v29 = v30 >> 2;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v29;
    if (v31)
    {
      if (v31 >> 61)
        sub_1C4764EE4();
      v32 = (char *)operator new(8 * v31);
    }
    else
    {
      v32 = 0;
    }
    v33 = &v32[8 * v28];
    *(_QWORD *)v33 = a2;
    v26 = v33 + 8;
    if (v25 != v27)
    {
      do
      {
        v34 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *((_QWORD *)v33 - 1) = v34;
        v33 -= 8;
      }
      while (v25 != v27);
      v25 = *v23;
    }
    *v23 = v33;
    v23[1] = v26;
    v23[2] = &v32[8 * v31];
    if (v25)
      operator delete(v25);
  }
  else
  {
    *(_QWORD *)v25 = a2;
    v26 = v25 + 8;
  }
  v23[1] = v26;
}

uint64_t llvm::LTOCodeGenerator::restoreLinkageForExternals(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  int v10;
  int v11;
  size_t *v12;
  unsigned __int8 *v13;
  size_t v14;
  size_t v15;
  int v16;
  size_t v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _DWORD *v35;
  int v36;
  int v37;
  size_t *v38;
  unsigned __int8 *v39;
  size_t v40;
  size_t v41;
  int v42;
  size_t v43;
  unsigned __int8 *v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  _QWORD *v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _DWORD *v61;
  int v62;
  int v63;
  size_t *v64;
  unsigned __int8 *v65;
  size_t v66;
  size_t v67;
  int v68;
  size_t v69;
  unsigned __int8 *v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;

  v89 = this;
  if (!*(_BYTE *)(this + 256) || !*(_BYTE *)(this + 512) || !*(_DWORD *)(this + 116))
    return this;
  v1 = *(_QWORD **)(this + 8);
  v2 = (_QWORD *)v1[4];
  v86 = v1 + 3;
  if (v2 != v1 + 3)
  {
    while (1)
    {
      if (v2)
        v3 = v2 - 7;
      else
        v3 = 0;
      v83 = v3[8];
      if ((v83 & 0xF) - 7 > 1 || (*((_BYTE *)v3 + 23) & 0x10) == 0)
        goto LABEL_10;
      v4 = ***(_QWORD ***)v3;
      v5 = *(_QWORD *)(v4 + 152);
      v6 = *(unsigned int *)(v4 + 168);
      if (!(_DWORD)v6)
        goto LABEL_18;
      LODWORD(v7) = (v6 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      v8 = (_QWORD *)(v5 + 16 * v7);
      v9 = (_DWORD *)*v8;
      if ((_DWORD *)*v8 != v3)
        break;
LABEL_19:
      v80 = *(unsigned int *)(v89 + 112);
      if (!(_DWORD)v80)
        goto LABEL_10;
      v12 = (size_t *)v8[1];
      v15 = *v12;
      v13 = (unsigned __int8 *)(v12 + 2);
      v14 = v15;
      if (v15)
      {
        v16 = 0;
        v17 = v14;
        v18 = v13;
        do
        {
          v19 = *v18++;
          v16 = 33 * v16 + v19;
          --v17;
        }
        while (v17);
      }
      else
      {
        v16 = 0;
      }
      v20 = *(_QWORD *)(v89 + 104);
      v21 = 1;
      v22 = v16;
      while (1)
      {
        v23 = v22 & (v80 - 1);
        v24 = *(_QWORD **)(v20 + 8 * v23);
        if (v24 != (_QWORD *)-8)
        {
          if (!v24)
            goto LABEL_10;
          if (*(_DWORD *)(v20 + 8 * v80 + 8 + 4 * v23) == v16 && v14 == *v24)
          {
            if (!v14)
              break;
            this = memcmp(v13, (char *)v24 + *(unsigned int *)(v89 + 124), v14);
            if (!(_DWORD)this)
              break;
          }
        }
        v22 = v21 + v23;
        ++v21;
      }
      if ((_DWORD)v23 == -1 || (int)v23 == v80)
        goto LABEL_10;
      v25 = *(_DWORD *)(*(_QWORD *)(v20 + 8 * (int)v23) + 8);
      v26 = v83 & 0xFFFFFFCF;
      if ((v25 - 7) >= 2)
        v26 = v83;
      v27 = v26 & 0xFFFFFFF0 | *(_DWORD *)(*(_QWORD *)(v20 + 8 * (int)v23) + 8) & 0xF;
      v3[8] = v27;
      if ((v25 & 0xFu) - 7 >= 2)
      {
        if ((v26 & 0x30) == 0)
          goto LABEL_10;
        this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v3);
        if ((this & 1) != 0)
          goto LABEL_10;
        v27 = v3[8];
      }
      v3[8] = v27 | 0x4000;
LABEL_10:
      v2 = (_QWORD *)v2[1];
      if (v2 == v86)
      {
        v1 = *(_QWORD **)(v89 + 8);
        goto LABEL_41;
      }
    }
    v10 = 1;
    while (v9 != (_DWORD *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(_DWORD **)(v5 + 16 * v7);
      if (v9 == v3)
      {
        v8 = (_QWORD *)(v5 + 16 * v7);
        goto LABEL_19;
      }
    }
LABEL_18:
    v8 = (_QWORD *)(v5 + 16 * v6);
    goto LABEL_19;
  }
LABEL_41:
  v28 = (_QWORD *)v1[2];
  v87 = v1 + 1;
  if (v28 == v1 + 1)
    goto LABEL_78;
  do
  {
    if (v28)
      v29 = v28 - 7;
    else
      v29 = 0;
    v84 = v29[8];
    if ((v84 & 0xF) - 7 > 1 || (*((_BYTE *)v29 + 23) & 0x10) == 0)
      goto LABEL_47;
    v30 = ***(_QWORD ***)v29;
    v31 = *(_QWORD *)(v30 + 152);
    v32 = *(unsigned int *)(v30 + 168);
    if ((_DWORD)v32)
    {
      LODWORD(v33) = (v32 - 1) & ((v29 >> 4) ^ (v29 >> 9));
      v34 = (_QWORD *)(v31 + 16 * v33);
      v35 = (_DWORD *)*v34;
      if ((_DWORD *)*v34 == v29)
        goto LABEL_56;
      v36 = 1;
      while (v35 != (_DWORD *)-4096)
      {
        v37 = v33 + v36++;
        v33 = v37 & (v32 - 1);
        v35 = *(_DWORD **)(v31 + 16 * v33);
        if (v35 == v29)
        {
          v34 = (_QWORD *)(v31 + 16 * v33);
          goto LABEL_56;
        }
      }
    }
    v34 = (_QWORD *)(v31 + 16 * v32);
LABEL_56:
    v81 = *(unsigned int *)(v89 + 112);
    if ((_DWORD)v81)
    {
      v38 = (size_t *)v34[1];
      v41 = *v38;
      v39 = (unsigned __int8 *)(v38 + 2);
      v40 = v41;
      if (v41)
      {
        v42 = 0;
        v43 = v40;
        v44 = v39;
        do
        {
          v45 = *v44++;
          v42 = 33 * v42 + v45;
          --v43;
        }
        while (v43);
      }
      else
      {
        v42 = 0;
      }
      v46 = *(_QWORD *)(v89 + 104);
      v47 = 1;
      v48 = v42;
      while (1)
      {
        v49 = v48 & (v81 - 1);
        v50 = *(_QWORD **)(v46 + 8 * v49);
        if (v50 != (_QWORD *)-8)
        {
          if (!v50)
            goto LABEL_47;
          if (*(_DWORD *)(v46 + 8 * v81 + 8 + 4 * v49) == v42 && v40 == *v50)
          {
            if (!v40)
              break;
            this = memcmp(v39, (char *)v50 + *(unsigned int *)(v89 + 124), v40);
            if (!(_DWORD)this)
              break;
          }
        }
        v48 = v47 + v49;
        ++v47;
      }
      if ((_DWORD)v49 != -1 && (int)v49 != v81)
      {
        v51 = *(_DWORD *)(*(_QWORD *)(v46 + 8 * (int)v49) + 8);
        v52 = v84 & 0xFFFFFFCF;
        if ((v51 - 7) >= 2)
          v52 = v84;
        v53 = v52 & 0xFFFFFFF0 | *(_DWORD *)(*(_QWORD *)(v46 + 8 * (int)v49) + 8) & 0xF;
        v29[8] = v53;
        if ((v51 & 0xFu) - 7 < 2)
          goto LABEL_76;
        if ((v52 & 0x30) != 0)
        {
          this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v29);
          if ((this & 1) == 0)
          {
            v53 = v29[8];
LABEL_76:
            v29[8] = v53 | 0x4000;
          }
        }
      }
    }
LABEL_47:
    v28 = (_QWORD *)v28[1];
  }
  while (v28 != v87);
  v1 = *(_QWORD **)(v89 + 8);
LABEL_78:
  v54 = (_QWORD *)v1[6];
  v88 = v1 + 5;
  if (v54 != v1 + 5)
  {
    while (2)
    {
      if (v54)
        v55 = v54 - 6;
      else
        v55 = 0;
      v85 = v55[8];
      if ((v85 & 0xF) - 7 > 1 || (*((_BYTE *)v55 + 23) & 0x10) == 0)
        goto LABEL_84;
      v56 = ***(_QWORD ***)v55;
      v57 = *(_QWORD *)(v56 + 152);
      v58 = *(unsigned int *)(v56 + 168);
      if ((_DWORD)v58)
      {
        LODWORD(v59) = (v58 - 1) & ((v55 >> 4) ^ (v55 >> 9));
        v60 = (_QWORD *)(v57 + 16 * v59);
        v61 = (_DWORD *)*v60;
        if ((_DWORD *)*v60 != v55)
        {
          v62 = 1;
          while (v61 != (_DWORD *)-4096)
          {
            v63 = v59 + v62++;
            v59 = v63 & (v58 - 1);
            v61 = *(_DWORD **)(v57 + 16 * v59);
            if (v61 == v55)
            {
              v60 = (_QWORD *)(v57 + 16 * v59);
              goto LABEL_93;
            }
          }
          goto LABEL_92;
        }
      }
      else
      {
LABEL_92:
        v60 = (_QWORD *)(v57 + 16 * v58);
      }
LABEL_93:
      v82 = *(unsigned int *)(v89 + 112);
      if ((_DWORD)v82)
      {
        v64 = (size_t *)v60[1];
        v67 = *v64;
        v65 = (unsigned __int8 *)(v64 + 2);
        v66 = v67;
        if (v67)
        {
          v68 = 0;
          v69 = v66;
          v70 = v65;
          do
          {
            v71 = *v70++;
            v68 = 33 * v68 + v71;
            --v69;
          }
          while (v69);
        }
        else
        {
          v68 = 0;
        }
        v72 = *(_QWORD *)(v89 + 104);
        v73 = 1;
        v74 = v68;
        while (1)
        {
          v75 = v74 & (v82 - 1);
          v76 = *(_QWORD **)(v72 + 8 * v75);
          if (v76 != (_QWORD *)-8)
          {
            if (!v76)
              goto LABEL_84;
            if (*(_DWORD *)(v72 + 8 * v82 + 8 + 4 * v75) == v68 && v66 == *v76)
            {
              if (!v66)
                break;
              this = memcmp(v65, (char *)v76 + *(unsigned int *)(v89 + 124), v66);
              if (!(_DWORD)this)
                break;
            }
          }
          v74 = v73 + v75;
          ++v73;
        }
        if ((_DWORD)v75 != -1 && (int)v75 != v82)
        {
          v77 = *(_DWORD *)(*(_QWORD *)(v72 + 8 * (int)v75) + 8);
          v78 = v85 & 0xFFFFFFCF;
          if ((v77 - 7) >= 2)
            v78 = v85;
          v79 = v78 & 0xFFFFFFF0 | *(_DWORD *)(*(_QWORD *)(v72 + 8 * (int)v75) + 8) & 0xF;
          v55[8] = v79;
          if ((v77 & 0xFu) - 7 >= 2)
          {
            if ((v78 & 0x30) == 0)
              goto LABEL_84;
            this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v55);
            if ((this & 1) != 0)
              goto LABEL_84;
            v79 = v55[8];
          }
          v55[8] = v79 | 0x4000;
        }
      }
LABEL_84:
      v54 = (_QWORD *)v54[1];
      if (v54 == v88)
        return this;
      continue;
    }
  }
  return this;
}

uint64_t llvm::LTOCodeGenerator::emitWarning(uint64_t *a1, uint64_t *a2)
{
  uint64_t (*v2)(uint64_t, uint64_t *, uint64_t);
  uint64_t v4;
  uint64_t *v5;
  __int16 v6;
  uint64_t (**v7)(llvm::DiagnosticInfo *__hidden);
  int v8;
  char v9;
  uint64_t **v10;

  v2 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t))a1[30];
  if (v2)
  {
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    return v2(1, a2, a1[31]);
  }
  else
  {
    v4 = *a1;
    v6 = 260;
    v5 = a2;
    v8 = 3;
    v9 = 1;
    v7 = &off_1E817EB68;
    v10 = &v5;
    return llvm::LLVMContext::diagnose(v4, (const llvm::DiagnosticInfo *)&v7);
  }
}

llvm::raw_ostream *llvm::LTOCodeGenerator::finishOptimizationRemarks(llvm::raw_ostream *this)
{
  uint64_t v1;
  const char *v2;
  const char *v3;

  v1 = *((_QWORD *)this + 65);
  if (v1)
  {
    *(_BYTE *)(v1 + 24) = 1;
    this = *(llvm::raw_ostream **)(v1 + 136);
    v2 = (const char *)*((_QWORD *)this + 4);
    v3 = (const char *)*((_QWORD *)this + 2);
    if (v2 != v3)
    {
      *((_QWORD *)this + 4) = v3;
      return (llvm::raw_ostream *)llvm::raw_ostream::flush_tied_then_write(this, v3, v2 - v3);
    }
  }
  return this;
}

uint64_t llvm::LTOCodeGenerator::resetContext(llvm::LTOCodeGenerator *this, llvm::LLVMContext *a2)
{
  uint64_t v4;
  llvm::Module *v5;
  llvm::IRMover *v6;
  uint64_t result;

  v4 = operator new();
  llvm::Module::Module(v4, "ld-temp.o", 9uLL, (uint64_t)a2);
  v5 = (llvm::Module *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4;
  if (v5)
  {
    llvm::Module::~Module(v5);
    MEMORY[0x1CAA32FC0]();
  }
  v6 = (llvm::IRMover *)operator new();
  llvm::IRMover::IRMover(v6, *((llvm::Module **)this + 1));
  result = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v6;
  if (result)
    sub_1C58FFF48(result);
  *(_QWORD *)this = a2;
  return result;
}

uint64_t llvm::LTOCodeGenerator::hideSymbols(llvm::LTOCodeGenerator *this)
{
  llvm::Module *v2;

  llvm::LTOCodeGenerator::determineTarget((std::string *)this);
  llvm::stripNonLineTableDebugInfo(*((uint64_t ***)this + 1), v2);
  llvm::obfuscateModule(*((_QWORD *)this + 1), *((_QWORD *)this + 3), (uint64_t)this + 264, (uint64_t)this + 40);
  return 1;
}

uint64_t llvm::LTOCodeGenerator::lookupHiddenName(llvm::LTOCodeGenerator *this, char *__s)
{
  char *v3;
  std::error_category_vtbl *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!__s)
    return 0;
  v3 = (char *)this + 264;
  v4 = (std::error_category_vtbl *)strlen(__s);
  llvm::Obfuscator::lookupForwardMap((unsigned __int8 *)__s, v4, (uint64_t)v3, (uint64_t)&v6);
  if ((v7 & 1) != 0)
    return 0;
  else
    return v6;
}

uint64_t llvm::LTOCodeGenerator::writeReverseMap(llvm::LTOCodeGenerator *this, char *a2)
{
  std::string::size_type v4;
  uint64_t v5;
  llvm::raw_fd_ostream *v6;
  const std::error_category *v7;
  std::string v9;
  char v10;
  uint64_t v11;
  char v12;
  llvm::raw_fd_ostream *v13;
  int v14;
  const std::error_category *v15;

  v14 = 0;
  v15 = std::system_category();
  if (a2)
    v4 = strlen(a2);
  else
    v4 = 0;
  llvm::ToolOutputFile::ToolOutputFile(&v9, a2, v4, (uint64_t)&v14, 0);
  v5 = 0;
  if (!v14)
  {
    (*(void (**)(char *, llvm::raw_fd_ostream *))(*((_QWORD *)this + 33) + 16))((char *)this + 264, v13);
    llvm::raw_fd_ostream::close(v13);
    v6 = v13;
    if (*((_DWORD *)v13 + 18))
    {
      v7 = std::system_category();
      v5 = 0;
      *((_DWORD *)v6 + 18) = 0;
      *((_QWORD *)v6 + 10) = v7;
    }
    else
    {
      v5 = 1;
      v10 = 1;
    }
  }
  if (v12)
  {
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v11);
    v12 = 0;
  }
  llvm::ToolOutputFile::CleanupInstaller::~CleanupInstaller((llvm::ToolOutputFile::CleanupInstaller *)&v9);
  return v5;
}

void llvm::LTOCodeGenerator::setCodeGenDebugOptions(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  char v23;
  char *v24;
  void *__p[2];
  unint64_t v26;
  uint64_t v27;
  int64x2_t v28;
  unint64_t v29;
  _QWORD *v30;

  if (a3)
  {
    v3 = a2;
    v5 = a1 + 19;
    v6 = a2 + 16 * a3;
    while (1)
    {
      v7 = *(const void **)v3;
      if (*(_QWORD *)v3)
        break;
      __p[0] = 0;
      __p[1] = 0;
      v26 = 0;
LABEL_14:
      v12 = a1[18];
      v13 = a1[19];
      if (v12 >= v13)
      {
        v14 = a1[17];
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_35:
          abort();
        if (0x5555555555555556 * ((uint64_t)(v13 - v14) >> 3) > v16)
          v16 = 0x5555555555555556 * ((uint64_t)(v13 - v14) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v14) >> 3) >= 0x555555555555555)
          v17 = 0xAAAAAAAAAAAAAAALL;
        else
          v17 = v16;
        v30 = v5;
        if (v17)
        {
          if (v17 > 0xAAAAAAAAAAAAAAALL)
            sub_1C4764EE4();
          v18 = (char *)operator new(24 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[8 * ((uint64_t)(v12 - v14) >> 3)];
        *(_OWORD *)v19 = *(_OWORD *)__p;
        *((_QWORD *)v19 + 2) = v26;
        __p[1] = 0;
        v26 = 0;
        __p[0] = 0;
        if (v12 == v14)
        {
          v23 = 0;
          v22 = vdupq_n_s64(v12);
          v20 = &v18[24 * v15];
        }
        else
        {
          v20 = &v18[8 * ((uint64_t)(v12 - v14) >> 3)];
          do
          {
            v21 = *(_OWORD *)(v12 - 24);
            *((_QWORD *)v20 - 1) = *(_QWORD *)(v12 - 8);
            *(_OWORD *)(v20 - 24) = v21;
            v20 -= 24;
            *(_QWORD *)(v12 - 16) = 0;
            *(_QWORD *)(v12 - 8) = 0;
            *(_QWORD *)(v12 - 24) = 0;
            v12 -= 24;
          }
          while (v12 != v14);
          v22 = *(int64x2_t *)(a1 + 17);
          v13 = a1[19];
          v23 = HIBYTE(v26);
        }
        v24 = v19 + 24;
        a1[17] = v20;
        a1[18] = v19 + 24;
        v28 = v22;
        a1[19] = &v18[24 * v17];
        v29 = v13;
        v27 = v22.i64[0];
        sub_1C4D868F0((uint64_t)&v27);
        a1[18] = v24;
        if (v23 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)__p;
        *(_QWORD *)(v12 + 16) = v26;
        a1[18] = v12 + 24;
      }
      v3 += 16;
      if (v3 == v6)
        return;
    }
    v8 = *(_QWORD *)(v3 + 8);
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_35;
    if (v8 >= 0x17)
    {
      v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v10 = v8 | 7;
      v11 = v10 + 1;
      v9 = operator new(v10 + 1);
      __p[1] = (void *)v8;
      v26 = v11 | 0x8000000000000000;
      __p[0] = v9;
    }
    else
    {
      HIBYTE(v26) = *(_QWORD *)(v3 + 8);
      v9 = __p;
      if (!v8)
        goto LABEL_13;
    }
    memmove(v9, v7, v8);
LABEL_13:
    *((_BYTE *)v9 + v8) = 0;
    goto LABEL_14;
  }
}

void llvm::LTOCodeGenerator::parseCodeGenDebugOptions(llvm::LTOCodeGenerator *this)
{
  uint64_t **v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 17);
  v3 = *((_QWORD *)this + 18);
  v1 = (uint64_t **)((char *)this + 136);
  if (v2 != v3)
    llvm::parseCommandLineOptions(v1);
}

void llvm::parseCommandLineOptions(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    v3 = (char *)operator new(8uLL);
    *(_QWORD *)v3 = "libLLVMLTO";
    v4 = v3 + 8;
    v5 = v3 + 8;
    do
    {
      v6 = v1;
      if (*((char *)v1 + 23) < 0)
        v6 = (uint64_t *)*v1;
      if (v5 >= v4)
      {
        v7 = (v5 - v3) >> 3;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 61)
          abort();
        if ((v4 - v3) >> 2 > v8)
          v8 = (v4 - v3) >> 2;
        if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF8)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v8;
        if (v9)
        {
          if (v9 >> 61)
            sub_1C4764EE4();
          v10 = (char *)operator new(8 * v9);
        }
        else
        {
          v10 = 0;
        }
        v11 = &v10[8 * v7];
        v4 = &v10[8 * v9];
        *(_QWORD *)v11 = v6;
        v12 = v11 + 8;
        if (v5 == v3)
          goto LABEL_20;
        do
        {
          v13 = *((_QWORD *)v5 - 1);
          v5 -= 8;
          *((_QWORD *)v11 - 1) = v13;
          v11 -= 8;
        }
        while (v5 != v3);
        if (v3)
LABEL_20:
          operator delete(v3);
        v3 = v11;
        v5 = v12;
      }
      else
      {
        *(_QWORD *)v5 = v6;
        v5 += 8;
      }
      v1 += 3;
    }
    while (v1 != v2);
    llvm::cl::ParseCommandLineOptions((llvm *)((unint64_t)(v5 - v3) >> 3), v3, (uint64_t)"", 0, 0, 0, 0);
    if (v3)
      operator delete(v3);
  }
}

void llvm::LTOCodeGenerator::DiagnosticHandler(llvm::LTOCodeGenerator *this, const llvm::DiagnosticInfo *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _QWORD v7[2];
  void (**v8)(llvm::raw_ostream *__hidden);
  int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  int v15;
  void **v16;
  void *v17[2];
  uint64_t v18;

  v3 = *((char *)a2 + 12) - 1;
  if (v3 > 2)
    v4 = 0;
  else
    v4 = dword_1C8662EA0[v3];
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v9 = 0;
  v13 = 0;
  v14 = 0;
  v8 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v16 = v17;
  v15 = 0;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v7[0] = &unk_1E814E990;
  v7[1] = &v8;
  (*(void (**)(const llvm::DiagnosticInfo *, _QWORD *))(*(_QWORD *)a2 + 24))(a2, v7);
  v5 = v12 - v10;
  if (v12 != v10)
  {
    v12 = v10;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v8, v10, v5);
  }
  if (v18 >= 0)
    v6 = v17;
  else
    v6 = (void **)v17[0];
  (*((void (**)(uint64_t, void **, _QWORD))this + 30))(v4, v6, *((_QWORD *)this + 31));
  v8 = off_1E81A6E70;
  if (v15 == 1 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8077774924);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
}

uint64_t llvm::LTOCodeGenerator::setDiagnosticHandler(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t result;
  char v7;
  char v8;

  a1[30] = a2;
  a1[31] = a3;
  v3 = *a1;
  if (!a2)
  {
    v7 = 0;
    v8 = 0;
    result = *(_QWORD *)(*(_QWORD *)v3 + 72);
    *(_QWORD *)(*(_QWORD *)v3 + 72) = 0;
    if (!result)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E817ED28;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = a1;
  result = *(_QWORD *)(*(_QWORD *)v3 + 72);
  *(_QWORD *)(*(_QWORD *)v3 + 72) = v5;
  v7 = 1;
  v8 = 1;
  if (result)
  {
LABEL_3:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v8 = v7;
  }
LABEL_4:
  *(_BYTE *)(*(_QWORD *)v3 + 80) = v8;
  return result;
}

_QWORD *sub_1C58FEF00(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817EAF8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C58FEF40(uint64_t a1, __int16 a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v17;
  unint64_t v18;
  llvm *v19;
  llvm::raw_ostream *v20;
  __int128 v21;
  unint64_t *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  void **v30;
  void *__p[2];
  uint64_t v32;
  unint64_t v33[2];
  unint64_t *v34;
  uint64_t v35;
  __int16 v36;

  v7 = a6;
  v21 = 0uLL;
  if (a6 == 4 && *(_DWORD *)a5 == 1869903201)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    v33[0] = 0;
    v22 = a5;
    v23 = a6;
    llvm::consumeSignedInteger((llvm *)&v22, (llvm::StringRef *)0xA, v33, a4);
    if ((v11 & 1) != 0 || v23)
    {
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      v17 = qword_1ED836B58[0];
      __p[0] = 0;
      __p[1] = 0;
      v32 = 0;
      LODWORD(v23) = 0;
      v27 = 0;
      v28 = 0;
      v22 = (unint64_t *)&unk_1E81A7208;
      v30 = __p;
      v29 = 0;
      v25 = 0;
      v26 = 0;
      v24 = 0;
      v33[0] = (unint64_t)&off_1E8132A78;
      v33[1] = (unint64_t)"Not an integer: %s";
      v34 = a5;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v22, (uint64_t)v33);
      v18 = (unint64_t)v30;
      v6 = operator new();
      v36 = 260;
      v33[0] = v18;
      *(_QWORD *)v6 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v6 + 8));
      *(_QWORD *)(v6 + 32) = 3;
      *(_QWORD *)(v6 + 40) = v17;
      *(_BYTE *)(v6 + 48) = 1;
      v22 = (unint64_t *)off_1E81A6E70;
      if (v29 == 1)
        goto LABEL_18;
      goto LABEL_13;
    }
    v12 = v33[0] & ~((uint64_t)v33[0] >> 63);
    v13 = 1;
  }
  *(_QWORD *)&v21 = v12;
  BYTE8(v21) = v13;
  do
  {
    *(_OWORD *)(a1 + 128) = v21;
    *(_WORD *)(a1 + 12) = a2;
    v14 = *(_QWORD *)(a1 + 528);
    if (v14)
    {
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 48))(v14, &v21);
      return 0;
    }
    sub_1C485C2F0();
LABEL_18:
    v19 = (llvm *)v24;
    if (v24)
      v19 = (llvm *)MEMORY[0x1CAA32F9C](v24, 0x1000C8077774924);
LABEL_13:
    if (SHIBYTE(v32) < 0)
      operator delete(__p[0]);
    v36 = 1283;
    v33[0] = (unint64_t)"Invalid argument '";
    v34 = a5;
    v35 = v7;
    v22 = v33;
    v24 = "', only integer or 'auto' is supported.";
    LOWORD(v26) = 770;
    v20 = (llvm::raw_ostream *)llvm::errs(v19);
    v7 = llvm::cl::Option::error((_QWORD *)a1, (llvm::Twine *)&v22, 0, 0, v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  while ((v7 & 1) == 0);
  return 1;
}

uint64_t sub_1C58FF1C0(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C58FF1D8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E817EA90;
  v2 = a1 + 63;
  v3 = (_QWORD *)a1[66];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E817EAF8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C58FF268(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C58FF274(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C58FF284(llvm::raw_ostream *result, int a2, int a3)
{
  uint64_t (**v3)();

  if (a3)
  {
    v3 = &off_1E817EB48;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v3, (llvm::raw_ostream *)((char *)result + 144), a2);
  }
  return result;
}

uint64_t sub_1C58FF2C4(uint64_t result)
{
  *(_QWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = 0;
  return result;
}

_QWORD *sub_1C58FF2CC(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

_QWORD *sub_1C58FF2D4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817EAF8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void sub_1C58FF314(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817EAF8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C58FF364(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C58FF36C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * a2);
}

uint64_t sub_1C58FF380(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * a2 + 16);
}

uint64_t sub_1C58FF394(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 40 * a2 + 32;
}

uint64_t sub_1C58FF3A8()
{
  return 0;
}

uint64_t sub_1C58FF3B0(uint64_t result, unsigned __int8 *a2, size_t __n, _DWORD *a4)
{
  llvm::StringMapImpl *v6;
  unsigned int v7;
  int v8;
  size_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  _QWORD *i;
  _DWORD *v26;

  v6 = (llvm::StringMapImpl *)result;
  v7 = *(_DWORD *)(result + 8);
  if (!v7)
  {
    *(_DWORD *)(result + 12) = 0;
    *(_DWORD *)(result + 16) = 0;
    result = (uint64_t)malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!result)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *(_QWORD *)(result + 128) = 2;
    *(_QWORD *)v6 = result;
    v7 = 16;
    *((_DWORD *)v6 + 2) = 16;
  }
  v26 = a4;
  v8 = 0;
  if (__n)
  {
    v9 = __n;
    v10 = a2;
    do
    {
      v11 = *v10++;
      v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  v12 = *(_QWORD *)v6;
  v13 = v7 - 1;
  v14 = *(_QWORD *)v6 + 8 * v7 + 8;
  v15 = -1;
  v16 = 1;
  v17 = v8;
  while (1)
  {
    v18 = v17 & v13;
    v19 = *(_QWORD **)(v12 + 8 * v18);
    if (!v19)
      break;
    if (v19 == (_QWORD *)-8)
    {
      if (v15 == -1)
        v15 = v17 & v13;
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8 && __n == *v19)
    {
      if (!__n)
        goto LABEL_20;
      result = memcmp(a2, (char *)v19 + *((unsigned int *)v6 + 5), __n);
      if (!(_DWORD)result)
        goto LABEL_20;
    }
    v17 = v16 + v18;
    ++v16;
  }
  v20 = v15;
  if (v15 == -1)
  {
    v20 = v18;
    v18 = v18;
  }
  else
  {
    v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  v19 = *(_QWORD **)(v12 + 8 * v18);
LABEL_20:
  if (v19 == (_QWORD *)-8)
  {
    --*((_DWORD *)v6 + 4);
  }
  else if (v19)
  {
    return result;
  }
  v21 = (char *)operator new(__n + 17, (std::align_val_t)8uLL);
  v22 = v21;
  v23 = v21 + 16;
  if (__n)
    memcpy(v21 + 16, a2, __n);
  v23[__n] = 0;
  *(_QWORD *)v22 = __n;
  *((_DWORD *)v22 + 2) = *v26;
  *(_QWORD *)(v12 + 8 * v18) = v22;
  ++*((_DWORD *)v6 + 3);
  result = llvm::StringMapImpl::RehashTable(v6, v18);
  for (i = (_QWORD *)(*(_QWORD *)v6 + 8 * result); !*i || *i == -8; ++i)
    ;
  return result;
}

void sub_1C58FF5B8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C58FF5CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, *(_QWORD *)(a1 + 16));
}

void sub_1C58FF5E4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817EAF8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C58FF638()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C58FF64C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E817EBE8;
  return result;
}

void sub_1C58FF670(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817EBE8;
}

llvm::cl::Option *sub_1C58FF68C(llvm::cl::Option *a1, char *a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v8;
  size_t v9;

  v8 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_QWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 168) = 0;
  *(_QWORD *)(v8 + 176) = 0;
  *(_QWORD *)(v8 + 160) = 0;
  *(_BYTE *)(v8 + 184) = 0;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = &unk_1E819E950;
  *(_QWORD *)v8 = &unk_1E819E480;
  *(_QWORD *)(v8 + 192) = &unk_1E819E970;
  *(_QWORD *)(v8 + 200) = &off_1E7FA8CB8;
  *(_QWORD *)(v8 + 224) = v8 + 200;
  v9 = strlen(a2);
  llvm::cl::Option::setArgStr((uint64_t)a1, (unsigned __int8 *)a2, v9);
  *((_OWORD *)a1 + 2) = *a3;
  *((_OWORD *)a1 + 3) = *a4;
  llvm::cl::Option::addArgument(a1);
  return a1;
}

void sub_1C58FF754()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C58FF768()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E817EC30;
  return result;
}

void sub_1C58FF78C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817EC30;
}

uint64_t sub_1C58FF7A4(llvm *a1, uint64_t a2)
{
  uint64_t ObjCARCContractPass;

  ObjCARCContractPass = llvm::createObjCARCContractPass(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, ObjCARCContractPass);
}

void sub_1C58FF7D8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C58FF7EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E817EC78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C58FF824(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817EC78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C58FF844@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  char *v6;
  const std::error_category *v7;
  uint64_t v8;
  uint64_t result;
  std::string __p;
  __int16 v11;
  std::error_code v12;
  int v13;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  v5 = *(_DWORD *)(v4 + 964);
  v13 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"lto-llvm";
  v11 = 259;
  if (v5)
    v6 = "o";
  else
    v6 = "s";
  *(_QWORD *)&v12.__val_ = sub_1C5E7DA50((uint64_t *)&__p, (__int128 *)v6, 1, &v13, v3, 1, 0);
  v12.__cat_ = v7;
  if (v12.__val_)
  {
    std::error_code::message(&__p, &v12);
    llvm::LTOCodeGenerator::emitError((uint64_t *)v4, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v8 = operator new();
  llvm::raw_fd_ostream::raw_fd_ostream(v8, v13, 1, 0, 0);
  result = operator new();
  *(_QWORD *)result = &unk_1E817ECC0;
  *(_QWORD *)(result + 8) = v8;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 39) = 0;
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = result;
  return result;
}

uint64_t sub_1C58FF958(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_1E817ECC0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C58FF9B0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_1E817ECC0;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C58FFA18(unsigned __int8 ***a1, llvm::GlobalValue *a2)
{
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::GlobalValue *v12;
  int v13;
  int v14;
  unint64_t v15;
  llvm::Mangler *v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 *v19;
  size_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t (**v31)();
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  unsigned __int8 **v39;

  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    return 0;
  v5 = a1[2];
  v6 = *a1;
  v6[1] = 0;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v15 = 1;
    goto LABEL_12;
  }
  v7 = ***(_QWORD ***)a2;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if (!(_DWORD)v9)
    goto LABEL_10;
  LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = v8 + 16 * v10;
  v12 = *(llvm::GlobalValue **)v11;
  if (*(llvm::GlobalValue **)v11 != a2)
  {
    v13 = 1;
    while (v12 != (llvm::GlobalValue *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(llvm::GlobalValue **)(v8 + 16 * v10);
      if (v12 == a2)
      {
        v11 = v8 + 16 * v10;
        goto LABEL_11;
      }
    }
LABEL_10:
    v11 = v8 + 16 * v9;
  }
LABEL_11:
  v15 = **(_QWORD **)(v11 + 8) + 1;
LABEL_12:
  if ((unint64_t)v6[2] < v15)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v6, v6 + 3, v15, 1);
    v6 = *a1;
  }
  v16 = (llvm::Mangler *)a1[1];
  v32 = 0;
  v36 = 0;
  v37 = 0;
  v31 = &off_1E81A7280;
  v39 = v6;
  v38 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  llvm::Mangler::getNameWithPrefix(v16, (llvm::raw_ostream *)&v31, a2, 0);
  v31 = (uint64_t (**)())off_1E81A6E70;
  if (v38 == 1 && v33)
    MEMORY[0x1CAA32F9C](v33, 0x1000C8077774924);
  v17 = *((unsigned int *)v5 + 12);
  if ((_DWORD)v17)
  {
    v18 = *a1;
    v19 = **a1;
    v20 = (size_t)v18[1];
    if (v20)
    {
      v21 = 0;
      v22 = v18[1];
      v23 = v19;
      do
      {
        v24 = *v23++;
        v21 = 33 * v21 + v24;
        --v22;
      }
      while (v22);
    }
    else
    {
      v21 = 0;
    }
    v25 = v5[5];
    v26 = 1;
    v27 = v21;
    while (1)
    {
      v28 = v27 & (v17 - 1);
      v29 = *(_QWORD **)&v25[8 * v28];
      if (v29 != (_QWORD *)-8)
      {
        if (!v29)
        {
          v30 = v17;
          return v30 != v17;
        }
        if (*(_DWORD *)&v25[8 * v17 + 8 + 4 * v28] == v21
          && v20 == *v29
          && (!v20 || !memcmp(v19, (char *)v29 + *((unsigned int *)v5 + 15), v20)))
        {
          break;
        }
      }
      v27 = v26 + v28;
      ++v26;
    }
    v30 = (int)v28;
    if ((_DWORD)v28 == -1)
      v30 = v17;
  }
  else
  {
    v17 = 0;
    v30 = 0;
  }
  return v30 != v17;
}

void sub_1C58FFC74()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C58FFC88(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E817ECE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C58FFCC8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817ECE0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C58FFCF0(_QWORD *a1, llvm::GlobalValue *a2)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::GlobalValue *v12;
  int v13;
  int v14;
  unint64_t v15;
  llvm::Mangler *v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 *v19;
  size_t v20;
  int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t (**v31)();
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;

  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    return 0;
  v5 = a1[3];
  v6 = (_QWORD *)a1[1];
  v6[1] = 0;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v15 = 1;
    goto LABEL_12;
  }
  v7 = ***(_QWORD ***)a2;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if (!(_DWORD)v9)
    goto LABEL_10;
  LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = v8 + 16 * v10;
  v12 = *(llvm::GlobalValue **)v11;
  if (*(llvm::GlobalValue **)v11 != a2)
  {
    v13 = 1;
    while (v12 != (llvm::GlobalValue *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(llvm::GlobalValue **)(v8 + 16 * v10);
      if (v12 == a2)
      {
        v11 = v8 + 16 * v10;
        goto LABEL_11;
      }
    }
LABEL_10:
    v11 = v8 + 16 * v9;
  }
LABEL_11:
  v15 = **(_QWORD **)(v11 + 8) + 1;
LABEL_12:
  if (v6[2] < v15)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v6, v6 + 3, v15, 1);
    v6 = (_QWORD *)a1[1];
  }
  v16 = (llvm::Mangler *)a1[2];
  v32 = 0;
  v36 = 0;
  v37 = 0;
  v31 = &off_1E81A7280;
  v39 = v6;
  v38 = 0;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  llvm::Mangler::getNameWithPrefix(v16, (llvm::raw_ostream *)&v31, a2, 0);
  v31 = (uint64_t (**)())off_1E81A6E70;
  if (v38 == 1 && v33)
    MEMORY[0x1CAA32F9C](v33, 0x1000C8077774924);
  v17 = *(unsigned int *)(v5 + 48);
  if ((_DWORD)v17)
  {
    v18 = (unsigned __int8 **)a1[1];
    v19 = *v18;
    v20 = (size_t)v18[1];
    if (v20)
    {
      v21 = 0;
      v22 = v18[1];
      v23 = v19;
      do
      {
        v24 = *v23++;
        v21 = 33 * v21 + v24;
        --v22;
      }
      while (v22);
    }
    else
    {
      v21 = 0;
    }
    v25 = *(_QWORD *)(v5 + 40);
    v26 = 1;
    v27 = v21;
    while (1)
    {
      v28 = v27 & (v17 - 1);
      v29 = *(_QWORD **)(v25 + 8 * v28);
      if (v29 != (_QWORD *)-8)
      {
        if (!v29)
        {
          v30 = v17;
          return v30 != v17;
        }
        if (*(_DWORD *)(v25 + 8 * v17 + 8 + 4 * v28) == v21
          && v20 == *v29
          && (!v20 || !memcmp(v19, (char *)v29 + *(unsigned int *)(v5 + 60), v20)))
        {
          break;
        }
      }
      v27 = v26 + v28;
      ++v26;
    }
    v30 = (int)v28;
    if ((_DWORD)v28 == -1)
      v30 = v17;
  }
  else
  {
    v17 = 0;
    v30 = 0;
  }
  return v30 != v17;
}

void sub_1C58FFF48(uint64_t a1)
{
  sub_1C4E43068(a1 + 56);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  sub_1C56D815C((_QWORD *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C58FFF98()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C58FFFAC(uint64_t a1, const llvm::DiagnosticInfo *a2)
{
  llvm::LTOCodeGenerator::DiagnosticHandler(*(llvm::LTOCodeGenerator **)(a1 + 24), a2);
  return 1;
}

uint64_t sub_1C58FFFC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  char v6;
  __int128 v7;
  __n128 v8;

  v8.n128_u64[0] = (unint64_t)"Strip names from Value during LTO (other than GlobalValue).";
  v8.n128_u64[1] = 59;
  v6 = 1;
  *(_QWORD *)&v7 = &v6;
  v5 = 1;
  sub_1C6147A00((llvm::cl::Option *)&llvm::LTODiscardValueNames, "lto-discard-value-names", &v8, (_BYTE **)&v7, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::LTODiscardValueNames, &dword_1C475E000);
  v8.n128_u64[0] = (unint64_t)"No assembly allowed in LTO module";
  v8.n128_u64[1] = 33;
  LOBYTE(v5) = 0;
  *(_QWORD *)&v7 = &v5;
  sub_1C614D990((uint64_t)&llvm::LTOModuleNoAsm, "lto-module-no-asm", &v8, (_BYTE **)&v7);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::LTOModuleNoAsm, &dword_1C475E000);
  v0 = sub_1C47AD050((uint64_t)&llvm::RemarksWithHotness, 0, 0);
  byte_1ED8341C8 = 0;
  qword_1ED8341D0 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED8341D8 = 0;
  llvm::RemarksWithHotness = (uint64_t)&unk_1E819E898;
  qword_1ED8341E0 = (uint64_t)&off_1E819E9A0;
  qword_1ED8341E8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED834200 = (uint64_t)&qword_1ED8341E8;
  llvm::cl::Option::setArgStr(v0, "lto-pass-remarks-with-hotness", 0x1DuLL);
  qword_1ED834168 = (uint64_t)"With PGO, include profile count in optimization remarks";
  unk_1ED834170 = 55;
  word_1ED834152 = word_1ED834152 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::RemarksWithHotness);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::RemarksWithHotness, &dword_1C475E000);
  v1 = sub_1C47AD050((uint64_t)&llvm::RemarksHotnessThreshold, 0, 0);
  LOBYTE(qword_1ED834288) = 0;
  byte_1ED834290 = 0;
  llvm::RemarksHotnessThreshold = (uint64_t)off_1E817EA90;
  qword_1ED8342A8 = (uint64_t)&llvm::RemarksHotnessThreshold;
  unk_1ED8342B0 = algn_1ED8342C0;
  qword_1ED8342B8 = 0x800000000;
  qword_1ED834298 = (uint64_t)&off_1E817EB48;
  unk_1ED8342A0 = &off_1E817EB98;
  qword_1ED834400 = (uint64_t)&off_1E817EBE8;
  qword_1ED834418 = (uint64_t)&qword_1ED834400;
  llvm::cl::Option::setArgStr(v1, "lto-pass-remarks-hotness-threshold", 0x22uLL);
  qword_1ED834228 = (uint64_t)"Minimum profile count required for an optimization remark to be output. Use 'auto' to apply"
                             " the threshold from profile summary.";
  unk_1ED834230 = 127;
  qword_1ED834238 = (uint64_t)"uint or 'auto'";
  unk_1ED834240 = 14;
  qword_1ED834288 = 0;
  byte_1ED834290 = 1;
  word_1ED834212 = word_1ED834212 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::RemarksHotnessThreshold);
  __cxa_atexit((void (*)(void *))sub_1C58FB9C4, &llvm::RemarksHotnessThreshold, &dword_1C475E000);
  v8.n128_u64[0] = (unint64_t)"Output filename for pass remarks";
  v8.n128_u64[1] = 32;
  *(_QWORD *)&v7 = "filename";
  *((_QWORD *)&v7 + 1) = 8;
  sub_1C58FF68C((llvm::cl::Option *)&llvm::RemarksFilename, "lto-pass-remarks-output", &v8, &v7);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &llvm::RemarksFilename, &dword_1C475E000);
  v8.n128_u64[0] = (unint64_t)"Only record optimization remarks from passes whose names match the given regular expression";
  v8.n128_u64[1] = 91;
  *(_QWORD *)&v7 = "regex";
  *((_QWORD *)&v7 + 1) = 5;
  sub_1C58FF68C((llvm::cl::Option *)&llvm::RemarksPasses, "lto-pass-remarks-filter", &v8, &v7);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &llvm::RemarksPasses, &dword_1C475E000);
  v8.n128_u64[0] = (unint64_t)"yaml";
  v2 = sub_1C47AD050((uint64_t)llvm::RemarksFormat, 0, 0);
  qword_1ED834670 = 0;
  qword_1ED834678 = 0;
  qword_1ED834698 = 0;
  unk_1ED8346A0 = 0;
  qword_1ED834690 = 0;
  byte_1ED8346A8 = 0;
  unk_1ED834680 = 0;
  unk_1ED834688 = &unk_1E819E950;
  llvm::RemarksFormat[0] = (uint64_t)&unk_1E819E480;
  qword_1ED8346B0 = (uint64_t)&unk_1E819E970;
  qword_1ED8346B8 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED8346D0 = (uint64_t)&qword_1ED8346B8;
  llvm::cl::Option::setArgStr(v2, "lto-pass-remarks-format", 0x17uLL);
  qword_1ED834610 = (uint64_t)"The format used for serializing remarks (default: YAML)";
  unk_1ED834618 = 55;
  qword_1ED834620 = (uint64_t)"format";
  unk_1ED834628 = 6;
  sub_1C49C7D74((const char **)&v8, (uint64_t)llvm::RemarksFormat);
  llvm::cl::Option::addArgument((llvm::cl::Option *)llvm::RemarksFormat);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, llvm::RemarksFormat, &dword_1C475E000);
  v3 = sub_1C47AD050((uint64_t)&llvm::LTOStatsFile, 0, 0);
  qword_1ED834758 = 0;
  unk_1ED834760 = 0;
  qword_1ED834780 = 0;
  unk_1ED834788 = 0;
  qword_1ED834770 = (uint64_t)&unk_1E819E950;
  unk_1ED834778 = 0;
  byte_1ED834790 = 0;
  unk_1ED834768 = 0;
  llvm::LTOStatsFile = (uint64_t)&unk_1E819E480;
  qword_1ED834798 = (uint64_t)&unk_1E819E970;
  qword_1ED8347A0 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED8347B8 = (uint64_t)&qword_1ED8347A0;
  llvm::cl::Option::setArgStr(v3, "lto-stats-file", 0xEuLL);
  qword_1ED8346F8 = (uint64_t)"Save statistics to the specified file";
  unk_1ED834700 = 37;
  word_1ED8346E2 = word_1ED8346E2 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::LTOStatsFile);
  return __cxa_atexit((void (*)(void *))sub_1C49BEA38, &llvm::LTOStatsFile, &dword_1C475E000);
}

void llvm::computeSyntheticCounts(llvm *this, llvm::ModuleSummaryIndex *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  llvm *v12;
  char v13;
  char v14;
  char v15;
  _QWORD v16[10];
  _QWORD *v17;
  _QWORD *v18;

  if (byte_1ED834840)
  {
    sub_1C4F7695C((uint64_t)this, (uint64_t)v16);
    v3 = v17;
    v4 = v18;
    if (v18 != v17)
    {
      v5 = dword_1ED833598;
      do
      {
        v6 = *v3 & 0xFFFFFFFFFFFFFFF8;
        v7 = *(uint64_t **)(v6 + 24);
        v8 = *(_QWORD *)(v6 + 32) - (_QWORD)v7;
        if (v8)
        {
          v9 = 8 * (v8 >> 3);
          do
          {
            v10 = *v7;
            if (*v7)
              v11 = *(_DWORD *)(*v7 + 8) == 0;
            else
              v11 = 0;
            if (v11)
              v10 = *(_QWORD *)(v10 + 72);
            *(_QWORD *)(v10 + 72) = v5;
            ++v7;
            v9 -= 8;
          }
          while (v9);
        }
        v3 += 2;
      }
      while (v3 != v4);
    }
    sub_1C61A85AC(v16);
    v16[0] = &v15;
    v16[1] = &v14;
    v12 = this;
    llvm::SyntheticCountsUtils<llvm::ModuleSummaryIndex *>::propagate((uint64_t *)&v12, (void (*)(unint64_t *__return_ptr, uint64_t, _QWORD, uint64_t *))sub_1C5900508, (uint64_t)v16, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t))sub_1C5900598, (uint64_t)&v13);
    *((_BYTE *)this + 131) = 1;
  }
}

__n128 sub_1C5900508@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __n128 *v9;
  __n128 result;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;

  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(uint64_t **)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (*(uint64_t **)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) == v5)
  {
    v8 = 0;
  }
  else
  {
    v6 = *v5;
    if (v6)
      v7 = *(_DWORD *)(v6 + 8) == 0;
    else
      v7 = 0;
    if (v7)
      v6 = *(_QWORD *)(v6 + 72);
    v8 = *(_QWORD *)(v6 + 72);
  }
  v11 = v8;
  v12 = 0;
  v13 = v4 >> 3;
  v14 = -8;
  v9 = (__n128 *)sub_1C4DB6028((uint64_t)&v13, (uint64_t)&v11);
  result = *v9;
  *a3 = *v9;
  a3[1].n128_u8[0] = 1;
  return result;
}

void sub_1C5900598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  _QWORD v13[2];

  v13[0] = a3;
  v13[1] = a4;
  v4 = *(uint64_t **)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32) - (_QWORD)v4;
  if (v5)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v7 = *v4;
      if (*v4)
        v8 = *(_DWORD *)(*v4 + 8) == 0;
      else
        v8 = 0;
      if (v8)
        v7 = *(_QWORD *)(v7 + 72);
      v9 = *(_QWORD *)(v7 + 72);
      v10 = sub_1C4DB9F50((uint64_t)v13);
      v11 = v10 + v9;
      v12 = __CFADD__(v10, v9);
      if (v11 < v10)
        v12 = 1;
      if (v12)
        v11 = -1;
      *(_QWORD *)(v7 + 72) = v11;
      ++v4;
      v6 -= 8;
    }
    while (v6);
  }
}

uint64_t sub_1C5900624()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Synthesize entry counts based on the summary";
  v1.n128_u64[1] = 44;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8347C0, "thinlto-synthesize-entry-counts", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8347C0, &dword_1C475E000);
}

void llvm::updateCompilerUsed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  char v6;
  unsigned int v7;
  unsigned __int8 *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  size_t v20;
  uint64_t i;
  const llvm::GlobalValue *v22;
  uint64_t j;
  const llvm::GlobalValue *v24;
  uint64_t k;
  const llvm::GlobalValue *v26;
  llvm::UndefValue **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD v33[5];
  llvm::UndefValue **v34;
  llvm::UndefValue **v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void *__p[2];
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  _OWORD v47[6];
  _BYTE v48[21];
  uint64_t v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v28 = a3;
  v29 = a2;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33[0] = 0;
  v33[1] = 0;
  v33[2] = 0x800000000;
  v33[4] = &v34;
  if (*(char *)(a2 + 471) < 0)
  {
    sub_1C47EBC30(__p, *(void **)(a2 + 448), *(_QWORD *)(a2 + 456));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 448);
    v43 = *(_QWORD *)(a2 + 464);
  }
  v45 = *(_QWORD *)(a2 + 488);
  v44 = *(_OWORD *)(a2 + 472);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  v47[0] = v5;
  v47[1] = v5;
  v47[2] = v5;
  v47[3] = v5;
  v47[4] = v5;
  v47[5] = v5;
  *(_OWORD *)v48 = v5;
  *(_QWORD *)&v48[13] = -1;
  sub_1C4F777B0((uint64_t)v47, (int *)__p);
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  __p[0] = v47;
  __p[1] = &v44;
  v43 = 0x600000000;
  sub_1C4765AA4((char *)&__p[1], 8uLL, 0);
  v6 = 0;
  v7 = 0;
  v46 = 468;
  do
  {
    if (((*((_QWORD *)__p[1] + (v7 >> 6)) >> v7) & 1) == 0
      && ((*((unsigned __int8 *)__p[0] + ((unint64_t)v7 >> 2)) >> (v6 & 6)) & 3) != 0)
    {
      v8 = (unsigned __int8 *)sub_1C56EAC88(__p, v7);
      sub_1C4F024D8((llvm::StringMapImpl *)v33, v8, v9);
    }
    ++v7;
    v6 += 2;
  }
  while (v7 != 468);
  v37 = &v41;
  v38 = &v41;
  v39 = 1;
  v40 = 0;
  v10 = a1 + 24;
  v11 = *(_QWORD *)(a1 + 32);
  if (v11 != a1 + 24)
  {
    do
    {
      if (v11)
        v12 = v11 - 56;
      else
        v12 = 0;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, v12);
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 120))(v13);
      if (v14)
      {
        v15 = v14;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v37, v14);
        if (v16)
        {
          v17 = 0;
          v18 = v15 + 174048;
          do
          {
            v19 = *(unsigned __int8 **)(v18 + 8 * v17);
            if (v19)
            {
              v20 = strlen(*(const char **)(v18 + 8 * v17));
              sub_1C4F024D8((llvm::StringMapImpl *)v33, v19, v20);
            }
            ++v17;
          }
          while (v17 != 637);
        }
      }
      v11 = *(_QWORD *)(v11 + 8);
    }
    while (v11 != v10);
    if (v38 != v37)
      free(v38);
  }
  if (__p[1] != &v44)
    free(__p[1]);
  sub_1C61BB478((uint64_t *)v47);
  for (i = *(_QWORD *)(a1 + 32); i != v10; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v22 = (const llvm::GlobalValue *)(i - 56);
    else
      v22 = 0;
    sub_1C5900A34(&v28, v22);
  }
  for (j = *(_QWORD *)(a1 + 16); j != a1 + 8; j = *(_QWORD *)(j + 8))
  {
    if (j)
      v24 = (const llvm::GlobalValue *)(j - 56);
    else
      v24 = 0;
    sub_1C5900A34(&v28, v24);
  }
  for (k = *(_QWORD *)(a1 + 48); k != a1 + 40; k = *(_QWORD *)(k + 8))
  {
    if (k)
      v26 = (const llvm::GlobalValue *)(k - 48);
    else
      v26 = 0;
    sub_1C5900A34(&v28, v26);
  }
  sub_1C4F02264((uint64_t)v33);
  MEMORY[0x1CAA32FB4](v30, 8);
  v27 = v34;
  if (v34 != v35)
  {
    sub_1C5F50CB4((uint64_t **)a1, "llvm.compiler.used", 0x12uLL, v34, v35 - v34);
    v27 = v34;
  }
  if (v27)
  {
    v35 = v27;
    operator delete(v27);
  }
}

void sub_1C5900A34(uint64_t *a1, const llvm::GlobalValue *a2)
{
  int v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const llvm::GlobalValue **v11;
  const llvm::GlobalValue *v12;
  int v13;
  int v14;
  unsigned int v15;
  const llvm::GlobalValue *v16;
  size_t v17;
  char *v18;
  size_t v19;
  uint64_t v20;
  int v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  const llvm::GlobalValue ***v30;
  unint64_t v31;
  const llvm::GlobalValue **v32;
  const llvm::GlobalValue **v33;
  const llvm::GlobalValue **v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  _QWORD *v41;
  uint64_t v42;
  size_t v43;
  int v44;
  size_t v45;
  unsigned __int8 *v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  _QWORD *v54;
  const llvm::GlobalValue ***v55;
  unint64_t v56;
  const llvm::GlobalValue **v57;
  const llvm::GlobalValue **v58;
  const llvm::GlobalValue **v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  const llvm::GlobalValue **v65;
  const llvm::GlobalValue *v66;
  const llvm::GlobalValue **v67;
  const llvm::GlobalValue *v68;
  uint64_t v69;
  uint64_t v70;
  void *__s1;
  size_t __n[2];
  _QWORD v74[9];

  v74[8] = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a2 + 16))
  {
    if (v3 == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      return;
  }
  else if (*((const llvm::GlobalValue **)a2 + 9) == (const llvm::GlobalValue *)((char *)a2 + 72)
         && (*((_BYTE *)a2 + 34) & 0x80) == 0)
  {
    return;
  }
  if ((*((_DWORD *)a2 + 8) & 0xF) == 8)
    return;
  if (v3 == 1)
  {
    v4 = *((_QWORD *)a2 - 4);
    if (v4)
      v5 = *(_BYTE *)(v4 + 16) == 0;
    else
      v5 = 0;
    v6 = v5;
  }
  else
  {
    v6 = 0;
    if (!*((_BYTE *)a2 + 16))
      goto LABEL_17;
  }
  if (!v6)
    goto LABEL_53;
LABEL_17:
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v7 = ***(_QWORD ***)a2;
    v8 = *(_QWORD *)(v7 + 152);
    v9 = *(unsigned int *)(v7 + 168);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v11 = (const llvm::GlobalValue **)(v8 + 16 * v10);
      v12 = *v11;
      if (*v11 == a2)
        goto LABEL_25;
      v13 = 1;
      while (v12 != (const llvm::GlobalValue *)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(const llvm::GlobalValue **)(v8 + 16 * v10);
        if (v12 == a2)
        {
          v11 = (const llvm::GlobalValue **)(v8 + 16 * v10);
          goto LABEL_25;
        }
      }
    }
    v11 = (const llvm::GlobalValue **)(v8 + 16 * v9);
LABEL_25:
    v15 = *((_DWORD *)a1 + 12);
    if (v15)
    {
      v16 = v11[1];
      v19 = *(_QWORD *)v16;
      v18 = (char *)v16 + 16;
      v17 = v19;
      if (v19)
      {
        v20 = 0;
        v21 = 0;
        do
          v21 = 33 * v21 + v18[v20++];
        while (v17 != v20);
        v22 = 0;
      }
      else
      {
        v21 = 0;
        v22 = 1;
      }
      goto LABEL_30;
    }
    goto LABEL_53;
  }
  v15 = *((_DWORD *)a1 + 12);
  if (v15)
  {
    v17 = 0;
    v21 = 0;
    v22 = 1;
    v18 = &byte_1C871356D;
LABEL_30:
    v23 = v15 - 1;
    v24 = a1[5];
    v70 = v15;
    v25 = v24 + 8 * v15 + 8;
    v26 = 1;
    v27 = v21;
    while (1)
    {
      v28 = v27 & v23;
      v29 = *(_QWORD **)(v24 + 8 * v28);
      if (v29 != (_QWORD *)-8)
      {
        if (!v29)
          goto LABEL_53;
        if (*(_DWORD *)(v25 + 4 * v28) == v21
          && v17 == *v29
          && ((v22 & 1) != 0 || !memcmp(v18, (char *)v29 + *((unsigned int *)a1 + 15), v17)))
        {
          break;
        }
      }
      v27 = v26 + v28;
      ++v26;
    }
    if ((_DWORD)v28 != -1 && (int)v28 != v70)
    {
      v30 = (const llvm::GlobalValue ***)a1[9];
      v32 = v30[1];
      v31 = (unint64_t)v30[2];
      if ((unint64_t)v32 < v31)
      {
        *v32 = a2;
        v33 = v32 + 1;
LABEL_88:
        v30[1] = v33;
        return;
      }
      v34 = *v30;
      v35 = v32 - *v30;
      v36 = v35 + 1;
      if (!((unint64_t)(v35 + 1) >> 61))
      {
        v37 = v31 - (_QWORD)v34;
        if (v37 >> 2 > v36)
          v36 = v37 >> 2;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (!v38)
        {
          v39 = 0;
          goto LABEL_83;
        }
        if (!(v38 >> 61))
        {
          v39 = (char *)operator new(8 * v38);
LABEL_83:
          v65 = (const llvm::GlobalValue **)&v39[8 * v35];
          *v65 = a2;
          v33 = v65 + 1;
          if (v32 != v34)
          {
            do
            {
              v66 = *--v32;
              *--v65 = v66;
            }
            while (v32 != v34);
            v32 = *v30;
          }
          *v30 = v65;
          v30[1] = v33;
          v30[2] = (const llvm::GlobalValue **)&v39[8 * v38];
          if (v32)
            operator delete(v32);
          goto LABEL_88;
        }
LABEL_97:
        sub_1C4764EE4();
      }
LABEL_96:
      abort();
    }
  }
LABEL_53:
  __s1 = v74;
  *(_OWORD *)__n = xmmword_1C64638C0;
  llvm::TargetMachine::getNameWithPrefix(a1[1], (uint64_t)&__s1, a2, (llvm::Mangler *)(a1 + 2), 0);
  v40 = (uint64_t *)*a1;
  v41 = __s1;
  v42 = *(unsigned int *)(*a1 + 8);
  if ((_DWORD)v42)
  {
    v43 = __n[0];
    v44 = 0;
    if (__n[0])
    {
      v45 = __n[0];
      v46 = (unsigned __int8 *)__s1;
      do
      {
        v47 = *v46++;
        v44 = 33 * v44 + v47;
        --v45;
      }
      while (v45);
    }
    v48 = v42 - 1;
    v49 = *v40;
    v69 = *(unsigned int *)(*a1 + 8);
    v50 = *v40 + 8 * v42 + 8;
    v51 = 1;
    v52 = v44;
    while (1)
    {
      v53 = v52 & v48;
      v54 = *(_QWORD **)(v49 + 8 * v53);
      if (v54 != (_QWORD *)-8)
      {
        if (!v54)
          goto LABEL_65;
        if (*(_DWORD *)(v50 + 4 * v53) == v44
          && v43 == *v54
          && (!v43 || !memcmp(v41, (char *)v54 + *((unsigned int *)v40 + 5), v43)))
        {
          break;
        }
      }
      v52 = v51 + v53;
      ++v51;
    }
    if ((_DWORD)v53 != -1 && (int)v53 != v69)
    {
      v55 = (const llvm::GlobalValue ***)a1[9];
      v57 = v55[1];
      v56 = (unint64_t)v55[2];
      if ((unint64_t)v57 >= v56)
      {
        v59 = *v55;
        v60 = v57 - *v55;
        v61 = v60 + 1;
        if ((unint64_t)(v60 + 1) >> 61)
          goto LABEL_96;
        v62 = v56 - (_QWORD)v59;
        if (v62 >> 2 > v61)
          v61 = v62 >> 2;
        if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
          v63 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v63 = v61;
        if (v63)
        {
          if (v63 >> 61)
            goto LABEL_97;
          v64 = (char *)operator new(8 * v63);
        }
        else
        {
          v64 = 0;
        }
        v67 = (const llvm::GlobalValue **)&v64[8 * v60];
        *v67 = a2;
        v58 = v67 + 1;
        if (v57 != v59)
        {
          do
          {
            v68 = *--v57;
            *--v67 = v68;
          }
          while (v57 != v59);
          v57 = *v55;
        }
        *v55 = v67;
        v55[1] = v58;
        v55[2] = (const llvm::GlobalValue **)&v64[8 * v63];
        if (v57)
          operator delete(v57);
      }
      else
      {
        *v57 = a2;
        v58 = v57 + 1;
      }
      v55[1] = v58;
      v41 = __s1;
    }
  }
LABEL_65:
  if (v41 != v74)
    free(v41);
}

__n128 llvm::TargetMachineBuilder::init(std::string *this, const llvm::Triple *a2)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  const char *v8;
  llvm::Triple *ArchName;
  uint64_t v10;
  std::string::size_type v12;
  __n128 result;

  if (SHIBYTE(this[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (this[2].__r_.__value_.__l.__size_)
      goto LABEL_24;
  }
  else if (*((_BYTE *)&this[2].__r_.__value_.__s + 23))
  {
    goto LABEL_24;
  }
  v4 = *((_DWORD *)a2 + 9);
  v5 = v4 > 0x21;
  v6 = (1 << v4) & 0x3F0000888;
  if (!v5 && v6 != 0)
  {
    if (LODWORD(this[1].__r_.__value_.__l.__data_) == 42)
    {
      v8 = "core2";
LABEL_23:
      MEMORY[0x1CAA32ABC](&this[2], v8);
      goto LABEL_24;
    }
    if (*((_DWORD *)a2 + 6) == 41)
    {
      v8 = "yonah";
      goto LABEL_23;
    }
    ArchName = llvm::Triple::getArchName(a2);
    if (v10 == 6 && *(_DWORD *)ArchName == 913142369 && *((_WORD *)ArchName + 2) == 25908)
    {
      v8 = "apple-a12";
      goto LABEL_23;
    }
    if (LODWORD(this[1].__r_.__value_.__l.__data_) == 5)
    {
      v8 = "apple-s4";
      goto LABEL_23;
    }
    if (*((_DWORD *)a2 + 6) == 3)
    {
      v8 = "cyclone";
      goto LABEL_23;
    }
  }
LABEL_24:
  std::string::operator=(this, (const std::string *)a2);
  v12 = *((_QWORD *)a2 + 5);
  result = *(__n128 *)((char *)a2 + 24);
  *(__n128 *)&this[1].__r_.__value_.__l.__data_ = result;
  this[1].__r_.__value_.__r.__words[2] = v12;
  return result;
}

void llvm::ThinLTOCodeGenerator::saveTempBitcode(uint64_t a1, const llvm::Module *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  void **v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;
  void **v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16[5];
  _QWORD v17[4];
  __int16 v18;
  _DWORD v19[4];
  _QWORD v20[4];
  __int16 v21;
  void *v22[2];
  char v23;

  if (a4)
  {
    v20[0] = a3;
    v20[1] = a4;
    v20[2] = a5;
    v21 = 2053;
    v17[0] = v20;
    v17[2] = a6;
    v17[3] = a7;
    v18 = 1282;
    llvm::Twine::str((llvm::Twine *)v17, v22);
    v19[0] = 0;
    std::system_category();
    if (v23 >= 0)
      v8 = v22;
    else
      v8 = (void **)v22[0];
    if (v23 >= 0)
      v9 = v23 & 0x7F;
    else
      v9 = (uint64_t)v22[1];
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v17, v8, v9, (uint64_t)v19, 0);
    if (v19[0])
    {
      v14 = "Failed to open ";
      v15 = 259;
      v13 = 260;
      v12 = v22;
      sub_1C6131AAC((uint64_t *)&v14, (uint64_t *)&v12, (uint64_t)v16);
      v10 = " to save optimized bitcode\n";
      v11 = 259;
      sub_1C6131AAC(v16, (uint64_t *)&v10, (uint64_t)v20);
      llvm::report_fatal_error((uint64_t)v20, 1);
    }
    llvm::WriteBitcodeToFile(a2, (llvm::raw_ostream *)v17, 1, 0, 0, 0);
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v17);
    if (v23 < 0)
      operator delete(v22[0]);
  }
}

void llvm::ThinLTOCodeGenerator::generateModuleMap(uint64_t **a1@<X1>, llvm::StringMapImpl *a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  size_t v12;
  size_t v13;

  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0x1000000000;
  v3 = *a1;
  v4 = a1[1];
  while (v3 != v4)
  {
    v6 = *v3++;
    v5 = v6;
    v7 = *(_BYTE *)(v6 + 247);
    v8 = (unsigned __int8 *)(v6 + 224);
    v9 = *(unsigned __int8 **)(v6 + 224);
    v10 = v7;
    if (v7 >= 0)
      v11 = v8;
    else
      v11 = v9;
    v12 = v7 & 0x7F;
    if (v10 >= 0)
      v13 = v12;
    else
      v13 = *(_QWORD *)(v5 + 232);
    *(_QWORD *)(*sub_1C590765C(a2, v11, v13) + 8) = v5;
  }
}

void llvm::ThinLTOCodeGenerator::loadModuleFromInput(__int128 **a1@<X1>, llvm::LLVMContext *a2@<X2>, int a3@<W3>, char a4@<W4>, llvm **a5@<X8>)
{
  __int128 *v7;
  llvm *v8;
  llvm *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  llvm *v25;
  char v26;
  __int128 v27;
  void *v28[2];
  __int128 v29;
  int v30;
  void *v31[2];
  __int128 v32;
  __int128 v33;
  __int128 __p;
  uint64_t v35;
  char *v36[2];
  _QWORD v37[22];

  v37[21] = *MEMORY[0x1E0C80C00];
  v7 = *a1;
  v30 = 0;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  *(_OWORD *)v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  __p = 0u;
  v35 = 0;
  v36[0] = (char *)v37;
  v36[1] = (char *)0x400000000;
  if (a3)
  {
    llvm::BitcodeModule::getModuleImpl(v7, (uint64_t)a2, 0, 1, a4, (uint64_t)sub_1C5017E80, (uint64_t)&v24, (uint64_t)&v25);
    if ((v26 & 1) == 0)
    {
      v8 = v25;
      goto LABEL_6;
    }
LABEL_15:
    v9 = v25;
    v19 = v7;
    if (v25)
    {
      if ((*(unsigned int (**)(llvm *, void *))(*(_QWORD *)v25 + 48))(v25, &llvm::ErrorList::ID))
      {
        v12 = (uint64_t *)*((_QWORD *)v9 + 1);
        v13 = (uint64_t *)*((_QWORD *)v9 + 2);
        if (v12 == v13)
        {
          v14 = 0;
        }
        else
        {
          v14 = 0;
          do
          {
            v23 = v14;
            v17 = *v12;
            *v12 = 0;
            v21 = v17;
            sub_1C5907858(&v22, &v21, (uint64_t)&v19);
            sub_1C6174794(&v23, &v22, &v24);
            v14 = v24;
            v24 = 0;
            if (v22)
              (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
            v18 = v21;
            v21 = 0;
            if (v18)
              (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
            if (v23)
              (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
            ++v12;
          }
          while (v12 != v13);
        }
        v20 = v14;
        (*(void (**)(llvm *, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, v10, v11);
      }
      else
      {
        v24 = (char *)v9;
        sub_1C5907858(&v20, &v24, (uint64_t)&v19);
        if (v24)
          (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v24 + 8))(v24, v15, v16);
      }
    }
    else
    {
      v20 = 0;
    }
    llvm::report_fatal_error((llvm *)"Can't load module, abort.", (const char *)1);
  }
  llvm::BitcodeModule::getModuleImpl(v7, (uint64_t)a2, 1, 0, 0, (uint64_t)sub_1C62B26EC, (uint64_t)&v23, (uint64_t)&v25);
  if ((v26 & 1) != 0)
    goto LABEL_15;
  v8 = v25;
  sub_1C5901474(v25);
LABEL_6:
  v25 = 0;
  *a5 = v8;
  sub_1C4FF9CA4((uint64_t)&v25);
  sub_1C4FAD100(v36);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (SHIBYTE(v33) < 0)
    operator delete(*((void **)&v32 + 1));
  if (SBYTE7(v32) < 0)
    operator delete(v31[0]);
  if (SBYTE7(v29) < 0)
    operator delete(v28[0]);
}

uint64_t sub_1C5901474(llvm *a1)
{
  llvm *v2;
  BOOL *v3;
  uint64_t result;
  llvm::Module *v5;
  uint64_t v6;
  llvm::Module *v7;
  char *v8;
  const char *v9;
  __int16 v10;
  uint64_t (**v11)(llvm::DiagnosticInfo *__hidden);
  int v12;
  char v13;
  const char **v14;
  char v15;

  v15 = 0;
  v2 = llvm::dbgs(a1);
  result = llvm::verifyModule(a1, v2, (llvm::raw_ostream *)&v15, v3);
  if ((_DWORD)result)
  {
    v8 = "Broken module found, compilation aborted!";
    goto LABEL_9;
  }
  if (v15)
  {
    v6 = *(_QWORD *)a1;
    v9 = "Invalid debug info found, debug info will be stripped";
    v10 = 259;
    v12 = 3;
    v13 = 1;
    v11 = &off_1E817EDE8;
    v14 = &v9;
    llvm::LLVMContext::diagnose(v6, (const llvm::DiagnosticInfo *)&v11);
    result = llvm::StripDebugInfo(a1, v7);
  }
  if (byte_1ED834108)
  {
    result = llvm::InlineAsm::containArchDependentInlineAsm(a1, v5);
    if ((_DWORD)result)
    {
      v8 = "no inline asm is allowed, abort!";
LABEL_9:
      llvm::report_fatal_error((llvm *)v8, (const char *)1);
    }
  }
  return result;
}

_QWORD *llvm::ThinLTOCodeGenerator::crossImportIntoModule(uint64_t a1, llvm *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v12;
  char *v13;
  _QWORD *result;
  uint64_t v15;
  llvm *v16;
  char *v17;
  uint64_t *v18;
  uint64_t *v19;
  char *v20;
  void (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  llvm *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  uint64_t v32;
  _BYTE v33[24];
  _BYTE *v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v12 = operator new(0x20uLL);
  *v12 = &off_1E817EEA8;
  v12[1] = a4;
  v12[2] = a1;
  v12[3] = a2;
  v32 = a3;
  v34 = v12;
  v35 = a6;
  llvm::FunctionImporter::importFunctions((uint64_t)&v32, (uint64_t)a2, a5, (uint64_t)&v30);
  if ((v31 & 1) != 0)
  {
    v16 = a2;
    v17 = v30;
    v30 = 0;
    v24 = v16;
    if (!v17)
    {
      v25 = 0;
      goto LABEL_28;
    }
    if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)v17 + 48))(v17, &llvm::ErrorList::ID))
    {
      v18 = (uint64_t *)*((_QWORD *)v17 + 1);
      v19 = (uint64_t *)*((_QWORD *)v17 + 2);
      if (v18 == v19)
      {
        v20 = 0;
      }
      else
      {
        v20 = 0;
        do
        {
          v28 = v20;
          v22 = *v18;
          *v18 = 0;
          v26 = v22;
          sub_1C5907BB8(&v27, &v26, (uint64_t)&v24);
          sub_1C6174794(&v28, &v27, &v29);
          v20 = v29;
          v29 = 0;
          if (v27)
            (*(void (**)(char *))(*(_QWORD *)v27 + 8))(v27);
          v23 = v26;
          v26 = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          if (v28)
            (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
          ++v18;
        }
        while (v18 != v19);
      }
      v25 = v20;
      v21 = *(void (**)(void))(*(_QWORD *)v17 + 8);
    }
    else
    {
      v29 = v17;
      sub_1C5907BB8(&v25, &v29, (uint64_t)&v24);
      if (!v29)
        goto LABEL_28;
      v21 = *(void (**)(void))(*(_QWORD *)v29 + 8);
    }
    v21();
LABEL_28:
    llvm::report_fatal_error((llvm *)"importFunctions failed", (const char *)1);
  }
  sub_1C5901474(a2);
  if ((v31 & 1) != 0)
  {
    v13 = v30;
    v30 = 0;
    if (v13)
      (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
  }
  result = v34;
  if (v34 == v33)
  {
    v15 = 4;
    result = v33;
  }
  else
  {
    if (!v34)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void llvm::ThinLTOCodeGenerator::computeThinLTOOutputPath(unsigned int a1@<W1>, const void *a2@<X2>, unint64_t a3@<X3>, llvm::Triple *a4@<X4>, _QWORD *a5@<X8>)
{
  llvm::Triple *ArchName;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void **v20;
  __int16 v21;
  _QWORD *v22;
  __int16 v23;
  _QWORD *v24;
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD *v30[4];
  __int16 v31;
  _BYTE *v32;
  __int128 v33;
  _QWORD v34[17];

  v34[16] = *MEMORY[0x1E0C80C00];
  ArchName = llvm::Triple::getArchName(a4);
  v11 = v10;
  v32 = v34;
  v33 = xmmword_1C85F20B0;
  if (a3 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v32, v34, a3, 1);
    v12 = v33;
  }
  else
  {
    v12 = 0;
    if (!a3)
      goto LABEL_4;
  }
  memcpy(&v32[v12], a2, a3);
  v12 = v33;
LABEL_4:
  *(_QWORD *)&v33 = v12 + a3;
  v26[0] = a1;
  v26[2] = ".";
  v27 = 776;
  v28[0] = v26;
  v28[2] = ArchName;
  v28[3] = v11;
  v29 = 1282;
  v30[0] = v28;
  v30[2] = ".thinlto.o";
  v31 = 770;
  v25 = 257;
  v23 = 257;
  v21 = 257;
  llvm::sys::path::append(&v32, 0, v30, &v24, &v22, &v20);
  v13 = v33;
  if ((unint64_t)(v33 + 1) > *((_QWORD *)&v33 + 1))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v32, v34, v33 + 1, 1);
    v13 = v33;
  }
  v32[v13] = 0;
  v14 = v32;
  v15 = strlen(v32);
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    a5[1] = v16;
    a5[2] = v18 | 0x8000000000000000;
    *a5 = v19;
    a5 = v19;
    goto LABEL_13;
  }
  *((_BYTE *)a5 + 23) = v15;
  if (v15)
LABEL_13:
    memmove(a5, v14, v16);
  *((_BYTE *)a5 + v16) = 0;
  if (v32 != (_BYTE *)v34)
    free(v32);
}

void llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 **v5;
  size_t v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int *p_p;
  size_t size;
  unsigned __int8 **i;
  uint64_t v25;
  std::string __p;
  uint64_t v27[2];
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 ***)(a2 + 48);
  for (i = *(unsigned __int8 ***)(a2 + 56); v5 != i; v5 += 10)
  {
    v25 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v25)
    {
      v7 = *v5;
      v6 = (size_t)v5[1];
      v8 = 0;
      if (v6)
      {
        v9 = v5[1];
        v10 = *v5;
        do
        {
          v11 = *v10++;
          v8 = 33 * v8 + v11;
          --v9;
        }
        while (v9);
      }
      v12 = *a3;
      v13 = *a3 + 8 * v25 + 8;
      v14 = *((unsigned int *)a3 + 5);
      v15 = 1;
      v16 = v8;
      while (1)
      {
        v17 = v16 & (v25 - 1);
        v18 = *(_QWORD **)(v12 + 8 * v17);
        if (v18 != (_QWORD *)-8)
        {
          if (!v18)
            goto LABEL_17;
          if (*(_DWORD *)(v13 + 4 * v17) == v8 && v6 == *v18 && (!v6 || !memcmp(v7, (char *)v18 + v14, v6)))
            break;
        }
        v16 = v15 + v17;
        ++v15;
      }
      if ((_DWORD)v17 != -1 && (int)v17 != v25)
      {
        v19 = (uint64_t)v5[3];
        if (v19)
        {
          llvm::GlobalValue::getGlobalIdentifier("", 0, v5[2], v19, 0, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = (int *)&__p;
          else
            p_p = (int *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __p.__r_.__value_.__l.__size_;
          v28 = xmmword_1C85F4BB0;
          v29 = 0;
          llvm::MD5::update((int *)&v28, p_p, size);
          llvm::MD5::final((int *)&v28, (int *)v27);
          sub_1C61A7854(a5, v27, (uint64_t)&v28);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
LABEL_17:
    ;
  }
}

void llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = sub_1C4EEA0EC(a3, *(_DWORD *)(a2 + 12));
  llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols((uint64_t)v6, a1, (uint64_t *)a2, v7, (uint64_t)a3);
}

_QWORD *llvm::ThinLTOCodeGenerator::addUsedSymbolToPreservedGUID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  size_t v9;
  _QWORD *result;
  uint64_t v11[2];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56) - v3;
  if (v4)
  {
    v6 = 80 * (v4 / 80);
    v7 = v3 + 24;
    do
    {
      if ((*(_BYTE *)(v7 + 12) & 0x80) != 0)
      {
        v8 = *(int **)(v7 - 8);
        v9 = *(_QWORD *)v7;
        v12 = xmmword_1C85F4BB0;
        v13 = 0;
        llvm::MD5::update((int *)&v12, v8, v9);
        llvm::MD5::final((int *)&v12, (int *)v11);
        result = sub_1C61A7854(a3, v11, (uint64_t)&v12);
      }
      v7 += 80;
      v6 -= 80;
    }
    while (v6);
  }
  return result;
}

void llvm::ThinLTOCodeGenerator::ProcessThinLTOModule(llvm::Module *this@<X1>, uint64_t PIELevel@<X0>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, unsigned int a16, unsigned int a17, char a18)
{
  char v23;
  int v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  void (**v29)(_QWORD *);
  _QWORD *v30;
  void (**v31)(_QWORD *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Module *v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t (**v48)();
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  int v55;
  void **v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[3];
  _QWORD *v60;
  _QWORD v61[38];
  _QWORD *v62;
  __int128 v63;
  _QWORD v64[18];

  v34 = PIELevel;
  v23 = 0;
  v64[16] = *MEMORY[0x1E0C80C00];
  v24 = *(_DWORD *)(a4 + 12);
  if (*(_DWORD *)(a5 + 492) == 3 && *(_DWORD *)(a5 + 544))
  {
    PIELevel = llvm::Module::getPIELevel(this);
    v23 = (_DWORD)PIELevel == 0;
  }
  if (v24 != 1)
  {
    if (llvm::renameModuleForThinLTO((uint64_t)this, a3, v23, 0))
      llvm::report_fatal_error((llvm *)"renameModuleForThinLTO failed", (const char *)1);
    v27 = llvm::thinLTOFinalizeInModule((uint64_t)this, a10, 1);
    llvm::ThinLTOCodeGenerator::saveTempBitcode(v27, this, a13, a14, a17, (uint64_t)".1.promoted.bc", 14);
  }
  if (*(_DWORD *)(a7 + 8) | *(_DWORD *)(a8 + 8))
    PIELevel = llvm::thinLTOInternalizeModule(this, a10);
  llvm::ThinLTOCodeGenerator::saveTempBitcode(PIELevel, this, a13, a14, a17, (uint64_t)".2.internalized.bc", 18);
  if (v24 != 1)
  {
    v25 = llvm::ThinLTOCodeGenerator::crossImportIntoModule(v34, this, a3, a4, a6, v23);
    llvm::ThinLTOCodeGenerator::saveTempBitcode((uint64_t)v25, this, a13, a14, a17, (uint64_t)".3.imported.bc", 14);
  }
  v26 = sub_1C59020C8((uint64_t)this, a5, a16, a15);
  llvm::ThinLTOCodeGenerator::saveTempBitcode((uint64_t)v26, this, a13, a14, a17, (uint64_t)".4.opt.bc", 9);
  if (!a12)
  {
    sub_1C5902774(this, a5, a9);
    return;
  }
  v62 = v64;
  v63 = xmmword_1C85F20B0;
  v49 = 0;
  v53 = 0;
  v54 = 0;
  v48 = &off_1E81A7280;
  v56 = (void **)&v62;
  v55 = 0;
  v51 = 0;
  v52 = 0;
  v50 = 0;
  v38 = this;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  llvm::ProfileSummaryInfo::refresh((unsigned __int8 *)&v38);
  v60 = 0;
  v57[0] = &off_1E817EEF0;
  v58 = v57;
  llvm::buildModuleSummaryIndex((uint64_t)this, (uint64_t)v59, (uint64_t)&v38, v57, (uint64_t)v61);
  v28 = v58;
  if (v58 == v57)
  {
    v29 = (void (**)(_QWORD *))(v57[0] + 32);
    v28 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_18;
    v29 = (void (**)(_QWORD *))(*v58 + 40);
  }
  (*v29)(v28);
LABEL_18:
  v30 = v60;
  if (v60 == v59)
  {
    v31 = (void (**)(_QWORD *))(v59[0] + 32);
    v30 = v59;
LABEL_22:
    (*v31)(v30);
    goto LABEL_23;
  }
  if (v60)
  {
    v31 = (void (**)(_QWORD *))(*v60 + 40);
    goto LABEL_22;
  }
LABEL_23:
  llvm::WriteBitcodeToFile(this, (llvm::raw_ostream *)&v48, 1, v61, 0, 0);
  sub_1C61A8910((uint64_t)v61);
  MEMORY[0x1CAA32FB4](v45, 8);
  v32 = v39;
  v39 = 0;
  if (v32)
    sub_1C4E5DDC4((uint64_t)&v39, v32);
  v48 = (uint64_t (**)())off_1E81A6E70;
  if (v55 == 1 && v50)
    MEMORY[0x1CAA32F9C](v50, 0x1000C8077774924);
  v33 = operator new();
  *a9 = sub_1C5906388(v33, (uint64_t)&v62, "<in-memory object>", 0x12uLL, 0);
  if (v62 != v64)
    free(v62);
}

uint64_t *sub_1C59020C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void **v21;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  __int128 v45;
  char v46;
  __int128 v47;
  char v48;
  char v49;
  char v50;
  __int128 v51;
  int v52;
  __int128 v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  int v58;
  __int128 v59;
  int v60;
  __int128 v61;
  int v62;
  __int128 v63;
  int v64;
  __int128 v65;
  int v66;
  __int128 v67;
  int v68;
  __int128 v69;
  int v70;
  __int128 v71;
  int v72;
  __int128 v73;
  int v74;
  void ***v75;
  _BYTE v76[1992];
  _BYTE v77[696];
  char *v78[2];
  _QWORD v79[18];
  _QWORD v80[18];
  _QWORD v81[18];
  _QWORD v82[18];
  _QWORD v83[18];
  _QWORD v84[18];
  _QWORD v85[18];
  _QWORD v86[18];
  _OWORD v87[9];
  int v88;
  int v89;
  __int128 __p;
  char *v91;
  __int128 v92;
  uint64_t v93;
  char v94;
  void **p_p;
  void **v96;
  uint64_t v97;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v40 = v4;
  v97 = *MEMORY[0x1E0C80C00];
  v69 = 0u;
  v71 = 0u;
  v70 = 0;
  v72 = 0;
  v73 = 0u;
  v74 = 0;
  v63 = 0u;
  v65 = 0u;
  v64 = 0;
  v66 = 0;
  v67 = 0u;
  v68 = 0;
  v57 = 0u;
  v59 = 0u;
  v58 = 0;
  v60 = 0;
  v61 = 0u;
  v62 = 0;
  v51 = 0u;
  v53 = 0u;
  v52 = 0;
  v54 = 0;
  v55 = 0u;
  v56 = 0;
  v78[0] = (char *)v79;
  v78[1] = (char *)0x400000000;
  v79[16] = v80;
  v79[17] = 0x400000000;
  v80[16] = v81;
  v80[17] = 0x400000000;
  v81[16] = v82;
  v81[17] = 0x400000000;
  v82[16] = v83;
  v82[17] = 0x400000000;
  v83[16] = v84;
  v83[17] = 0x400000000;
  v84[16] = v85;
  v84[17] = 0x400000000;
  v85[16] = v86;
  v85[17] = 0x400000000;
  v86[16] = v87;
  v86[17] = 0x400000000;
  v87[8] = 0u;
  v88 = 0;
  v89 = 32;
  llvm::StandardInstrumentations::StandardInstrumentations((uint64_t)v77, v13, 0, 0);
  llvm::StandardInstrumentations::registerCallbacks((uint64_t)v77, (uint64_t)v78, &v63);
  LODWORD(v47) = 16843009;
  BYTE4(v47) = byte_1ED836110;
  *((_QWORD *)&v47 + 1) = __PAIR64__(dword_1ED836050, dword_1ED835F90);
  v48 = 1;
  v49 = byte_1ED834CC8;
  v50 = byte_1ED834C08;
  LOBYTE(v45) = 0;
  v46 = 0;
  llvm::PassBuilder::PassBuilder((uint64_t)v76, v12, &v47, &v45, (uint64_t)v78);
  v14 = operator new();
  if (*(char *)(v12 + 471) < 0)
  {
    sub_1C47EBC30(&__p, *(void **)(v12 + 448), *(_QWORD *)(v12 + 456));
  }
  else
  {
    __p = *(_OWORD *)(v12 + 448);
    v91 = *(char **)(v12 + 464);
  }
  v93 = *(_QWORD *)(v12 + 488);
  v92 = *(_OWORD *)(v12 + 472);
  *(_QWORD *)(v14 + 120) = 0;
  *(_QWORD *)(v14 + 128) = 0;
  *(_DWORD *)(v14 + 136) = 0;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 168) = 0u;
  *(_OWORD *)(v14 + 184) = 0u;
  *(_QWORD *)&v15 = -1;
  *((_QWORD *)&v15 + 1) = -1;
  *(_OWORD *)v14 = v15;
  *(_OWORD *)(v14 + 16) = v15;
  *(_OWORD *)(v14 + 32) = v15;
  *(_OWORD *)(v14 + 48) = v15;
  *(_OWORD *)(v14 + 64) = v15;
  *(_OWORD *)(v14 + 80) = v15;
  *(_OWORD *)(v14 + 96) = v15;
  *(_QWORD *)(v14 + 109) = -1;
  sub_1C4F777B0(v14, (int *)&__p);
  if (SHIBYTE(v91) < 0)
    operator delete((void *)__p);
  if (v8)
  {
    *(_QWORD *)(v14 + 109) = 0;
    *(_OWORD *)(v14 + 80) = 0u;
    *(_OWORD *)(v14 + 96) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)v14 = 0u;
  }
  *(_QWORD *)&__p = &llvm::TargetLibraryAnalysis::Key;
  v16 = sub_1C54E652C(&v63, &__p);
  if (!v16[1])
  {
    v17 = v16;
    v18 = operator new();
    llvm::TargetLibraryInfoImpl::TargetLibraryInfoImpl((uint64_t)&p_p, (__int128 *)v14);
    llvm::TargetLibraryInfoImpl::TargetLibraryInfoImpl((uint64_t)&__p, (uint64_t)&p_p);
    v94 = 1;
    sub_1C61BB478((uint64_t *)&p_p);
    *(_QWORD *)v18 = &unk_1E816D5D0;
    *(_BYTE *)(v18 + 8) = 0;
    *(_BYTE *)(v18 + 208) = 0;
    if (v94)
    {
      llvm::TargetLibraryInfoImpl::TargetLibraryInfoImpl(v18 + 8, (uint64_t)&__p);
      *(_BYTE *)(v18 + 208) = 1;
    }
    v19 = v17[1];
    v17[1] = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (v94)
      sub_1C61BB478((uint64_t *)&__p);
  }
  llvm::PassBuilder::registerModuleAnalyses((uint64_t)v76, &v51);
  llvm::PassBuilder::registerCGSCCAnalyses((uint64_t)v76, (uint64_t)&v57);
  llvm::PassBuilder::registerFunctionAnalyses((uint64_t)v76, &v63);
  llvm::PassBuilder::registerLoopAnalyses((uint64_t)v76, (uint64_t)&v69);
  llvm::PassBuilder::crossRegisterProxies((uint64_t)v76, (uint64_t)&v69, &v63, (uint64_t)&v57, &v51);
  __p = 0uLL;
  v91 = 0;
  llvm::PassBuilder::buildThinLTODefaultPipeline((uint64_t)v76, *off_1E817F018[v10], v6, (uint64_t)&p_p);
  v20 = p_p;
  v21 = v96;
  if (p_p != v96)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      if (v23 >= v91)
      {
        v26 = (v23 - v22) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          abort();
        v28 = v91 - v22;
        if ((v91 - v22) >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          if (v29 >> 61)
            sub_1C4764EE4();
          v30 = (char *)operator new(8 * v29);
        }
        else
        {
          v30 = 0;
        }
        v22 = &v30[8 * v26];
        v31 = &v30[8 * v29];
        v32 = *v20;
        *v20 = 0;
        *(_QWORD *)v22 = v32;
        v25 = v22 + 8;
        v33 = (char *)__p;
        if (v23 == (char *)__p)
        {
          *(_QWORD *)&__p = v22;
          *((_QWORD *)&__p + 1) = v22 + 8;
          v91 = &v30[8 * v29];
        }
        else
        {
          do
          {
            v34 = *((_QWORD *)v23 - 1);
            v23 -= 8;
            *(_QWORD *)v23 = 0;
            *((_QWORD *)v22 - 1) = v34;
            v22 -= 8;
          }
          while (v23 != v33);
          v35 = (char *)*((_QWORD *)&__p + 1);
          v23 = (char *)__p;
          *(_QWORD *)&__p = v22;
          *((_QWORD *)&__p + 1) = v25;
          v91 = v31;
          while (v35 != v23)
          {
            v37 = *((_QWORD *)v35 - 1);
            v35 -= 8;
            v36 = v37;
            *(_QWORD *)v35 = 0;
            if (v37)
              (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          }
        }
        if (v23)
          operator delete(v23);
      }
      else
      {
        v24 = *v20;
        *v20 = 0;
        *(_QWORD *)v23 = v24;
        v25 = v23 + 8;
      }
      *((_QWORD *)&__p + 1) = v25;
      ++v20;
      v23 = v25;
    }
    while (v20 != v21);
  }
  v75 = &p_p;
  sub_1C4764BBC((void ***)&v75);
  llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::run(&__p, v40, (uint64_t)&v51, (uint64_t)&v41);
  if (v44 != v43)
    free(v44);
  if (v42 != v41)
    free(v42);
  p_p = (void **)&__p;
  sub_1C4764BBC(&p_p);
  v38 = sub_1C61BB478((uint64_t *)v14);
  MEMORY[0x1CAA32FC0](v38, 0x1020C4008A01BC9);
  sub_1C62B2F4C((uint64_t)v76);
  sub_1C62B316C((uint64_t)v77);
  sub_1C58F6F3C(v78);
  MEMORY[0x1CAA32FB4](v55, 8);
  sub_1C4D8B440((uint64_t *)&v53);
  sub_1C4D8B52C((uint64_t *)&v51);
  MEMORY[0x1CAA32FB4](v61, 8);
  sub_1C4D8B440((uint64_t *)&v59);
  sub_1C4D8B52C((uint64_t *)&v57);
  MEMORY[0x1CAA32FB4](v67, 8);
  sub_1C4D8B440((uint64_t *)&v65);
  sub_1C4D8B52C((uint64_t *)&v63);
  MEMORY[0x1CAA32FB4](v73, 8);
  sub_1C4D8B440((uint64_t *)&v71);
  return sub_1C4D8B52C((uint64_t *)&v69);
}

void sub_1C5902774(llvm::Module *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm *v6;
  const void **ObjCARCContractPass;
  uint64_t v8;
  void (**v9)(llvm::legacy::PassManager *__hidden);
  llvm::legacy::PassManagerImpl *v10;
  uint64_t (**v11)();
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20;
  __int128 v21;
  _QWORD v22[17];

  v22[16] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = xmmword_1C85F20B0;
  v12 = 0;
  v16 = 0;
  v17 = 0;
  v11 = &off_1E81A7280;
  v19 = &v20;
  v18 = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v6 = llvm::legacy::PassManager::PassManager((llvm::legacy::PassManager *)&v9);
  ObjCARCContractPass = (const void **)llvm::createObjCARCContractPass(v6);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)v10 + 52, ObjCARCContractPass);
  if ((*(unsigned int (**)(uint64_t, void (***)(llvm::legacy::PassManager *__hidden), uint64_t (***)(), _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 120))(a2, &v9, &v11, 0, 1, 1, 0))
  {
    llvm::report_fatal_error((llvm *)"Failed to setup codegen", (const char *)1);
  }
  llvm::legacy::PassManagerImpl::run(v10, a1);
  v9 = &off_1E81682B8;
  if (v10)
    (*(void (**)(llvm::legacy::PassManagerImpl *))(*(_QWORD *)v10 + 8))(v10);
  v11 = (uint64_t (**)())off_1E81A6E70;
  if (v18 == 1 && v13)
    MEMORY[0x1CAA32F9C](v13, 0x1000C8077774924);
  v8 = operator new();
  *a3 = sub_1C5906388(v8, (uint64_t)&v20, "<in-memory object>", 0x12uLL, 1);
  if (v20 != v22)
    free(v20);
}

uint64_t llvm::ThinLTOCodeGenerator::resolvePrevailingInIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  char v9;
  int v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  int v47;
  int v48;
  __int16 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[23];
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  char v77;
  int v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  int v83;
  char v84;
  int v85;
  int v86;
  char v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v6 = a3;
  v7 = a5;
  v10 = 0;
  v11 = 0;
  memset(v8, 0, sizeof(v8));
  v9 = 0;
  v12 = 1024;
  v13 = 0x100000001;
  v14 = 0;
  v15 = 0x3000000000;
  v16 = 4;
  v20 = 0u;
  v21 = 0u;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v22 = xmmword_1C677F4F0;
  v23 = -65536;
  v24 = 0;
  v25 = 4096;
  v26 = 2;
  v41 = 0;
  v40 = 0;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v42 = 1;
  v43 = 1;
  v44 = 0;
  v45 = 0;
  v46 = 0x100000002;
  v47 = 2;
  v48 = 0;
  v49 = 256;
  v68 = 0;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  memset(v67, 0, sizeof(v67));
  v69 = 1;
  v70 = 0;
  v72 = 0;
  v71 = 0;
  v73 = 0;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0;
  v78 = 500;
  v79 = 1;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  v83 = 16777473;
  v84 = byte_1ED836110;
  v85 = dword_1ED835F90;
  v86 = dword_1ED836050;
  v87 = 1;
  v88 = byte_1ED834CC8;
  v89 = byte_1ED834C08;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  llvm::thinLTOResolvePrevailingInIndex((uint64_t)v8, a2, (unsigned int (*)(uint64_t, _QWORD))sub_1C5907EB4, (uint64_t)&v7, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_1C5907F18, (uint64_t)&v6, a4);
  return sub_1C58ED854((uint64_t)v8);
}

void llvm::ModuleCacheEntry::computeCacheKey(unsigned __int8 *__s1@<X2>, size_t __n@<X3>, uint64_t a3@<X1>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, int a9, char a10, uint64_t a11)
{
  uint64_t v11;
  int v14;
  size_t v15;
  unsigned __int8 *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  size_t v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  int i;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  _OWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  _QWORD *v44;
  uint64_t v45;
  char v46;
  char *v47;
  char *v48;
  int64x2_t v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  size_t v55;
  __int128 *p_dst;
  size_t v57;
  size_t v58;
  _QWORD *v59;
  _QWORD **v66;
  _QWORD *v67[2];
  __int128 __dst;
  unint64_t v69;
  void *__src;
  size_t __len[2];
  _QWORD v72[5];
  std::string v73;
  char v74[4];
  int v75;
  int v76;
  __int16 v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  int v88;
  int v89;
  __int16 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _OWORD v102[3];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  int v109;
  int v110;
  __int16 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _BYTE v129[23];
  uint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  char v139;
  int v140;
  char v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  int v145;
  char v146;
  int v147;
  int v148;
  char v149;
  char v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  v11 = *(unsigned int *)(a3 + 32);
  if (!(_DWORD)v11)
    goto LABEL_30;
  v14 = 0;
  if (__n)
  {
    v15 = __n;
    v16 = __s1;
    do
    {
      v17 = *v16++;
      v14 = 33 * v14 + v17;
      --v15;
    }
    while (v15);
  }
  v18 = v11 - 1;
  v19 = *(_QWORD *)(a3 + 24);
  v20 = v19 + 8 * v11 + 8;
  v21 = *(unsigned int *)(a3 + 44);
  v22 = 1;
  v23 = v14;
  while (1)
  {
    v24 = v23 & v18;
    v25 = *(_QWORD **)(v19 + 8 * v24);
    if (v25 != (_QWORD *)-8)
    {
      if (!v25)
        goto LABEL_30;
      if (*(_DWORD *)(v20 + 4 * v24) == v14 && __n == *v25)
        break;
    }
LABEL_12:
    v23 = v22 + v24;
    ++v22;
  }
  if (!__n)
  {
    if ((_DWORD)v24 == -1 || (int)v24 == v11)
      goto LABEL_30;
    v26 = 0;
LABEL_17:
    v30 = 1;
    for (i = v26; ; i = v32 + v30++)
    {
      v32 = i & v18;
      v33 = *(_QWORD **)(v19 + 8 * v32);
      if (v33 != (_QWORD *)-8)
      {
        if (!v33)
          goto LABEL_27;
        if (*(_DWORD *)(v20 + 4 * v32) == v26 && __n == *v33 && (!__n || !memcmp(__s1, (char *)v33 + v21, __n)))
          break;
      }
    }
    if ((_DWORD)v32 != -1)
      v11 = (int)v32;
LABEL_27:
    v34 = 0;
    while (!*(_DWORD *)(*(_QWORD *)(v19 + 8 * v11) + 16 + v34))
    {
      v34 += 4;
      if (v34 == 20)
        goto LABEL_30;
    }
    v75 = 0;
    v76 = 0;
    memset(&v73, 0, sizeof(v73));
    v74[0] = 0;
    v77 = 1024;
    v78 = 0x100000001;
    v79 = 0;
    v80 = 0x3000000000;
    v81 = 4;
    v85 = 0u;
    v86 = 0u;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v87 = xmmword_1C677F4F0;
    v88 = -65536;
    v89 = 0;
    v90 = 4096;
    v91 = 2;
    v104 = 0;
    v103 = 0;
    v101 = 0u;
    memset(v102, 0, sizeof(v102));
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v92 = 0u;
    LODWORD(v105) = 1;
    BYTE4(v105) = 1;
    v106 = 0;
    v107 = 0;
    v108 = 0x100000002;
    v110 = 0;
    v111 = 256;
    v130 = 0;
    v112 = 0u;
    v113 = 0u;
    v114 = 0u;
    v115 = 0u;
    v116 = 0u;
    v117 = 0u;
    v118 = 0u;
    v119 = 0u;
    v120 = 0u;
    v121 = 0u;
    v122 = 0u;
    v123 = 0u;
    v124 = 0u;
    v125 = 0u;
    v126 = 0u;
    v127 = 0u;
    v128 = 0u;
    memset(v129, 0, sizeof(v129));
    v131 = 1;
    v132 = 0;
    v134 = 0;
    v133 = 0;
    v135 = 0;
    v136 = 0u;
    v137 = 0u;
    v138 = 0u;
    v139 = 0;
    v140 = 500;
    v141 = 1;
    v142 = 0;
    v143 = 0;
    v144 = 0;
    v145 = 16777473;
    v146 = byte_1ED836110;
    v147 = dword_1ED835F90;
    v148 = dword_1ED836050;
    v149 = 1;
    v150 = byte_1ED834CC8;
    v151 = byte_1ED834C08;
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v155 = 0;
    v156 = 0;
    v157 = 0;
    v158 = 0;
    v109 = a9;
    sub_1C58FC150((uint64_t)v74, a11 + 96);
    std::string::operator=(&v73, (const std::string *)(a11 + 48));
    v35 = a11;
    v36 = (_OWORD *)(a11 + 72);
    v37 = *(_OWORD **)&v102[1];
    if (*(_QWORD *)&v102[1] >= *((_QWORD *)&v102[1] + 1))
    {
      v38 = *((_QWORD *)&v102[0] + 1);
      v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v102[1] - *((_QWORD *)&v102[0] + 1)) >> 3);
      v40 = v39 + 1;
      if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_72;
      if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v102[1] + 1) - *((_QWORD *)&v102[0] + 1)) >> 3) > v40)
        v40 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v102[1] + 1) - *((_QWORD *)&v102[0] + 1)) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v102[1] + 1) - *((_QWORD *)&v102[0] + 1)) >> 3) >= 0x555555555555555)
        v41 = 0xAAAAAAAAAAAAAAALL;
      else
        v41 = v40;
      v72[1] = (char *)&v102[1] + 8;
      if (v41)
      {
        if (v41 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v42 = (char *)operator new(24 * v41);
        v35 = a11;
      }
      else
      {
        v42 = 0;
      }
      v48 = &v42[24 * v39];
      if (*(char *)(v35 + 95) < 0)
      {
        sub_1C47EBC30(v48, *(void **)(v35 + 72), *(_QWORD *)(v35 + 80));
        v37 = *(_OWORD **)&v102[1];
        v38 = *((_QWORD *)&v102[0] + 1);
      }
      else
      {
        *(_OWORD *)v48 = *v36;
        *((_QWORD *)v48 + 2) = *(_QWORD *)(a11 + 88);
      }
      v44 = a6;
      if (v37 == (_OWORD *)v38)
      {
        v49 = vdupq_n_s64(v38);
        v50 = v48;
      }
      else
      {
        v50 = v48;
        do
        {
          v51 = *(_OWORD *)((char *)v37 - 24);
          *((_QWORD *)v50 - 1) = *((_QWORD *)v37 - 1);
          *(_OWORD *)(v50 - 24) = v51;
          v50 -= 24;
          *((_QWORD *)v37 - 2) = 0;
          *((_QWORD *)v37 - 1) = 0;
          *((_QWORD *)v37 - 3) = 0;
          v37 = (_OWORD *)((char *)v37 - 24);
        }
        while (v37 != (_OWORD *)v38);
        v49 = *(int64x2_t *)((char *)v102 + 8);
      }
      v47 = v48 + 24;
      *((_QWORD *)&v102[0] + 1) = v50;
      *(_QWORD *)&v102[1] = v47;
      *(int64x2_t *)__len = v49;
      v52 = *((_QWORD *)&v102[1] + 1);
      *((_QWORD *)&v102[1] + 1) = &v42[24 * v41];
      v72[0] = v52;
      __src = (void *)v49.i64[0];
      sub_1C4D868F0((uint64_t)&__src);
      v45 = a7;
      v46 = a10;
    }
    else
    {
      if (*(char *)(a11 + 95) < 0)
      {
        sub_1C47EBC30(*(_BYTE **)&v102[1], *(void **)(a11 + 72), *(_QWORD *)(a11 + 80));
      }
      else
      {
        v43 = *v36;
        *(_QWORD *)(*(_QWORD *)&v102[1] + 16) = *(_QWORD *)(a11 + 88);
        *v37 = v43;
      }
      v44 = a6;
      v45 = a7;
      v46 = a10;
      v47 = (char *)v37 + 24;
    }
    v53 = *(_QWORD *)(a11 + 400);
    *(_QWORD *)&v102[1] = v47;
    v105 = v53;
    LODWORD(v108) = *(_DWORD *)(a11 + 408);
    BYTE2(v110) = v46;
    v69 = 0;
    __src = v72;
    *(_OWORD *)__len = xmmword_1C64638D0;
    *(_QWORD *)&__dst = (char *)&__dst + 8;
    *((_QWORD *)&__dst + 1) = 0;
    v67[0] = 0;
    v67[1] = 0;
    v66 = v67;
    llvm::computeLTOCacheKey(&__src, (uint64_t)&v73, a3, __s1, __n, a4, a5, v44, v45, (size_t)&__dst, (uint64_t)&v66);
    sub_1C47655E8((uint64_t)&v66, v67[0]);
    sub_1C47655E8((uint64_t)&__dst, *((_QWORD **)&__dst + 1));
    v54 = __src;
    if (!__src)
    {
      __dst = 0uLL;
      v69 = 0;
LABEL_66:
      *(_OWORD *)a8 = __dst;
      v59 = __src;
      *(_QWORD *)(a8 + 16) = v69;
      *(_BYTE *)(a8 + 24) = 1;
      if (v59 != v72)
        free(v59);
      sub_1C58ED854((uint64_t)&v73);
      return;
    }
    v55 = __len[0];
    if (__len[0] < 0x7FFFFFFFFFFFFFF8)
    {
      if (__len[0] >= 0x17)
      {
        v57 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len[0] | 7) != 0x17)
          v57 = __len[0] | 7;
        v58 = v57 + 1;
        p_dst = (__int128 *)operator new(v57 + 1);
        *((_QWORD *)&__dst + 1) = v55;
        v69 = v58 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v69) = __len[0];
        p_dst = &__dst;
        if (!__len[0])
          goto LABEL_65;
      }
      memmove(p_dst, v54, v55);
LABEL_65:
      *((_BYTE *)p_dst + v55) = 0;
      goto LABEL_66;
    }
LABEL_72:
    abort();
  }
  if (memcmp(__s1, (char *)v25 + v21, __n))
    goto LABEL_12;
  if ((_DWORD)v24 != -1 && (int)v24 != v11)
  {
    v26 = 0;
    v27 = __n;
    v28 = __s1;
    do
    {
      v29 = *v28++;
      v26 = 33 * v26 + v29;
      --v27;
    }
    while (v27);
    goto LABEL_17;
  }
LABEL_30:
  *(_BYTE *)a8 = 0;
  *(_BYTE *)(a8 + 24) = 0;
}

void llvm::ModuleCacheEntry::write(void (***a1)(void **__return_ptr), void *a2, uint64_t a3)
{
  uint64_t v6;
  const llvm::Twine *v7;
  void *v8[2];
  char v9;
  void **v10;
  __int16 v11;
  void *__p;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  (**a1)(&__p);
  if ((v14 & 0x80u) == 0)
    v6 = v14;
  else
    v6 = v13;
  if ((char)v14 < 0)
  {
    operator delete(__p);
    if (!v6)
      return;
  }
  else if (!v6)
  {
    return;
  }
  v15 = 261;
  __p = a2;
  v13 = a3;
  ((void (*)(void **__return_ptr, void (***)(void **__return_ptr)))**a1)(v8, a1);
  v11 = 260;
  v10 = v8;
  llvm::sys::fs::create_hard_link((llvm::sys::fs *)&__p, (const llvm::Twine *)&v10, v7);
  if (v9 < 0)
    operator delete(v8[0]);
}

void llvm::ModuleCacheEntry::writeObject(uint64_t a1@<X1>, _BYTE *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  _QWORD v15[4];
  __int16 v16;
  _BYTE v17[24];
  uint64_t v18;
  char *v19;
  uint64_t v20;
  const std::error_category *v21;
  void *v22[2];
  char v23;
  void **v24;
  uint64_t v25[2];

  LODWORD(v20) = 0;
  v21 = std::system_category();
  v8 = sub_1C5E71274(a2, a3, (uint64_t)&v20, 0, 2, 0);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v17, v8, 1, 0, 0);
  if ((_DWORD)v20)
  {
    v9 = v20;
    v10 = (uint64_t)v21;
    v15[0] = "Can't open output '";
    v15[2] = a2;
    v15[3] = a3;
    v16 = 1283;
    llvm::Twine::str((llvm::Twine *)v15, v22);
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    v25[0] = v9;
    v25[1] = v10;
    v24 = v11;
    sub_1C5DF1730((_BYTE **)&v24, v25, a4);
    if (v23 < 0)
      operator delete(v22[0]);
  }
  else
  {
    v12 = *(_BYTE **)(a1 + 8);
    v13 = *(_BYTE **)(a1 + 16);
    v14 = v13 - v12;
    if (v13 - v12 <= (unint64_t)(v18 - (_QWORD)v19))
    {
      if (v13 != v12)
      {
        memcpy(v19, v12, v13 - v12);
        v19 += v14;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v17, v12, v13 - v12);
    }
    *a4 = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v17);
}

uint64_t llvm::ThinLTOCodeGenerator::createModuleCacheEntry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, size_t a4@<X3>, void *a5@<X4>, size_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, _QWORD *a10, uint64_t a11, int a12, char a13, uint64_t a14)
{
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;

  v17 = *(_DWORD *)(a1 + 632);
  if (v17 == 2)
  {
    v24 = operator new();
    result = sub_1C5909204(v24, a1 + 656, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13, a14);
  }
  else if (v17 == 1)
  {
    v18 = *(_QWORD *)(a1 + 640);
    v19 = *(_QWORD *)(a1 + 648);
    v20 = operator new();
    result = sub_1C5908C88(v20, v18, v19, a2, a3, a4, a7, a8, a10, a11, a12, a13, a14);
  }
  else
  {
    v25 = operator new();
    v26 = *(_BYTE *)(a1 + 583);
    v27 = v26;
    if (v26 >= 0)
      v28 = (_QWORD *)(a1 + 560);
    else
      v28 = *(_QWORD **)(a1 + 560);
    v29 = (_QWORD *)(v26 & 0x7F);
    if (v27 >= 0)
      v30 = v29;
    else
      v30 = *(_QWORD **)(a1 + 568);
    result = sub_1C5907F74(v25, v28, v30, a2, a3, a4, a7, a8, a10, a11, a12, a13, a14);
  }
  *a9 = result;
  return result;
}

uint64_t llvm::ThinLTOCodeGenerator::addModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v6;
  void *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void **v23;
  void **v24;
  char *v26;
  void *v27[2];
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *v31[2];
  uint64_t v32;
  _BYTE v33[24];
  char *v34;
  std::string __p;
  uint64_t v36[4];
  __int16 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v38 = a4;
  *((_QWORD *)&v38 + 1) = a5;
  v39 = a2;
  v40 = a3;
  llvm::lto::InputFile::create(&v38, (uint64_t)&v41);
  if ((v42 & 1) != 0)
  {
    v27[0] = "ThinLTO cannot create input file: ";
    WORD4(v29) = 259;
    v26 = (char *)v41;
    v41 = 0;
    v34 = v26;
    sub_1C61D2548(&v34, &__p);
    v37 = 260;
    v36[0] = (uint64_t)&__p;
    sub_1C6131AAC((uint64_t *)v27, v36, (uint64_t)v31);
    llvm::report_fatal_error((uint64_t)v31, 1);
  }
  v7 = *(void **)(v41 + 96);
  v6 = *(void **)(v41 + 104);
  WORD4(v29) = 261;
  v27[0] = v7;
  v27[1] = v6;
  llvm::Triple::Triple((uint64_t)v31, (llvm::Twine *)v27);
  if (*(_QWORD *)(a1 + 472) == *(_QWORD *)(a1 + 480))
  {
    if (SHIBYTE(v32) < 0)
    {
      sub_1C47EBC30(v27, v31[0], (unint64_t)v31[1]);
    }
    else
    {
      *(_OWORD *)v27 = *(_OWORD *)v31;
      v28 = v32;
    }
    v29 = *(_OWORD *)v33;
    v30 = *(_QWORD *)&v33[16];
  }
  else
  {
    if (*(_DWORD *)(a1 + 32) == *(_DWORD *)v33
      && *(_QWORD *)(a1 + 36) == *(_QWORD *)&v33[4]
      && *(_QWORD *)(a1 + 44) == *(_QWORD *)&v33[12]
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)&v33[20])
    {
      goto LABEL_16;
    }
    if (!llvm::Triple::isCompatibleWith((llvm::Triple *)(a1 + 8), (const llvm::Triple *)v31))
      llvm::report_fatal_error((llvm *)"ThinLTO modules with incompatible triples not supported", (const char *)1);
    llvm::Triple::merge((_DWORD *)(a1 + 8), (const llvm::Triple *)v31, (uint64_t)&__p);
    v37 = 260;
    v36[0] = (uint64_t)&__p;
    llvm::Triple::Triple((uint64_t)v27, (llvm::Twine *)v36);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  llvm::TargetMachineBuilder::init((std::string *)(a1 + 8), (const llvm::Triple *)v27);
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
LABEL_16:
  v9 = *(_QWORD **)(a1 + 480);
  v8 = *(_QWORD *)(a1 + 488);
  if ((unint64_t)v9 >= v8)
  {
    v12 = *(_QWORD **)(a1 + 472);
    v13 = v9 - v12;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      abort();
    v15 = v8 - (_QWORD)v12;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        sub_1C4764EE4();
      v17 = (char *)operator new(8 * v16);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[8 * v13];
    v19 = &v17[8 * v16];
    v20 = v41;
    v41 = 0;
    *(_QWORD *)v18 = v20;
    v11 = v18 + 8;
    if (v9 == v12)
    {
      *(_QWORD *)(a1 + 472) = v18;
      *(_QWORD *)(a1 + 480) = v11;
      *(_QWORD *)(a1 + 488) = v19;
    }
    else
    {
      do
      {
        v21 = *--v9;
        *v9 = 0;
        *((_QWORD *)v18 - 1) = v21;
        v18 -= 8;
      }
      while (v9 != v12);
      v9 = *(_QWORD **)(a1 + 472);
      v22 = *(_QWORD **)(a1 + 480);
      *(_QWORD *)(a1 + 472) = v18;
      *(_QWORD *)(a1 + 480) = v11;
      *(_QWORD *)(a1 + 488) = v19;
      while (v22 != v9)
      {
        v24 = (void **)*--v22;
        v23 = v24;
        *v22 = 0;
        if (v24)
        {
          llvm::lto::InputFile::~InputFile(v23);
          MEMORY[0x1CAA32FC0]();
        }
      }
    }
    if (v9)
      operator delete(v9);
  }
  else
  {
    v10 = v41;
    v41 = 0;
    *v9 = v10;
    v11 = v9 + 1;
  }
  *(_QWORD *)(a1 + 480) = v11;
  if (SHIBYTE(v32) < 0)
    operator delete(v31[0]);
  return sub_1C58FB958((uint64_t)&v41);
}

void llvm::ThinLTOCodeGenerator::computePrevailingCopies(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v7 = (uint64_t *)v4[7];
      v6 = (uint64_t *)v4[8];
      if ((unint64_t)((char *)v6 - (char *)v7) >= 9)
      {
        if (v7 == v6)
        {
LABEL_10:
          v9 = 0;
        }
        else
        {
          v8 = (uint64_t *)v4[7];
          while (1)
          {
            v9 = *v8;
            v10 = *(_WORD *)(*v8 + 12) & 0xF;
            if ((v10 - 1) >= 5 && (v10 - 9) > 1)
              break;
            if (++v8 == v6)
            {
              while (1)
              {
                v9 = *v7;
                if ((*(_WORD *)(*v7 + 12) & 0xF) != 1)
                  goto LABEL_11;
                if (++v7 == v6)
                  goto LABEL_10;
              }
            }
          }
        }
LABEL_11:
        sub_1C5909D9C(a3, v4 + 4)[1] = v9;
      }
      v11 = (_QWORD *)v4[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v4[2];
          v13 = *v12 == (_QWORD)v4;
          v4 = v12;
        }
        while (!v13);
      }
      v4 = v12;
    }
    while (v12 != v3);
  }
}

_QWORD *llvm::ThinLTOCodeGenerator::preserveSymbol(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  return sub_1C4F024D8((llvm::StringMapImpl *)(a1 + 496), a2, a3);
}

_QWORD *llvm::ThinLTOCodeGenerator::crossReferenceSymbol(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  return sub_1C4F024D8((llvm::StringMapImpl *)(a1 + 496), a2, a3);
}

void llvm::TargetMachineBuilder::create(llvm::TargetMachineBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  char v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  BOOL v12;
  llvm::TargetMachineBuilder *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  std::string *p_p;
  uint64_t size;
  void **v23;
  __int16 v24;
  std::string __p;
  __int16 v26;
  int64x2_t v27;
  uint64_t v28;
  void *v29[2];
  uint64_t v30;

  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  v4 = llvm::TargetRegistry::lookupTarget((std::string::size_type)this, (uint64_t)v29);
  if (!v4)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"Can't load target for this Triple: ";
    v26 = 259;
    v24 = 260;
    v23 = v29;
    sub_1C6131AAC((uint64_t *)&__p, (uint64_t *)&v23, (uint64_t)&v27);
    llvm::report_fatal_error((uint64_t)&v27, 1);
  }
  v5 = (uint64_t)v4;
  v6 = *((_BYTE *)this + 95);
  v7 = v6;
  if (v6 >= 0)
    v8 = (char *)this + 72;
  else
    v8 = (char *)*((_QWORD *)this + 9);
  v9 = v6 & 0x7F;
  if (v7 >= 0)
    v10 = v9;
  else
    v10 = *((_QWORD *)this + 10);
  v28 = 0;
  v27 = 0uLL;
  llvm::SubtargetFeatures::Split((unint64_t *)&v27, (uint64_t)v8, v10);
  llvm::SubtargetFeatures::getDefaultSubtargetFeatures(&v27, this);
  sub_1C5021A04((std::string *)v27.i64[0], (std::string *)v27.i64[1], ",", 1uLL, &__p);
  v11 = *((_BYTE *)this + 23);
  v12 = v11 < 0;
  if (v11 >= 0)
    v13 = this;
  else
    v13 = *(llvm::TargetMachineBuilder **)this;
  v14 = v11 & 0x7F;
  if (v12)
    v15 = *((_QWORD *)this + 1);
  else
    v15 = v14;
  v16 = *((_BYTE *)this + 71);
  v17 = v16;
  if (v16 >= 0)
    v18 = (char *)this + 48;
  else
    v18 = (char *)*((_QWORD *)this + 6);
  v19 = v16 & 0x7F;
  if (v17 >= 0)
    v20 = v19;
  else
    v20 = *((_QWORD *)this + 7);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  *a2 = sub_1C4D7B2D4(v5, (uint64_t)v13, v15, (uint64_t)v18, v20, (uint64_t)p_p, size, (uint64_t)this + 96, *((_QWORD *)this + 50), 0, *((_DWORD *)this + 102), 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  sub_1C4765410((void ***)&__p);
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
}

void llvm::ThinLTOCodeGenerator::linkCombinedIndex(llvm::ThinLTOCodeGenerator *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  llvm *v11;
  llvm::raw_ostream *v12;
  uint64_t v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v4 = operator new();
  sub_1C61A7328(v4, 0, 0);
  v5 = (uint64_t **)*((_QWORD *)this + 59);
  v6 = (uint64_t **)*((_QWORD *)this + 60);
  if (v5 == v6)
  {
LABEL_11:
    *a2 = v4;
  }
  else
  {
    v7 = 0;
    while (1)
    {
      v8 = *((_BYTE *)*v5 + 247);
      v9 = v8 >= 0 ? (uint64_t)(*v5 + 28) : (*v5)[28];
      v10 = v8 >= 0 ? v8 & 0x7F : (*v5)[29];
      llvm::BitcodeModule::readSummary(**v5, v4, v9, v10, v7, &v17);
      if (v17)
        break;
      ++v7;
      if (++v5 == v6)
        goto LABEL_11;
    }
    v16 = v17;
    v17 = 0;
    v12 = (llvm::raw_ostream *)llvm::errs(v11);
    v14 = "error: can't create module summary index for buffer: ";
    v15 = 259;
    llvm::logAllUnhandledErrors(&v16, v12, (uint64_t)&v14);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    *a2 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v13 = sub_1C61A8910(v4);
    MEMORY[0x1CAA32FC0](v13, 0x10B0C4007EAB999);
  }
}

_QWORD *llvm::ThinLTOCodeGenerator::computeDeadSymbolsInIndex(int a1, llvm **this, llvm::ModuleSummaryIndex *a3)
{
  char v6;

  llvm::computeDeadSymbolsAndUpdateIndirectCalls(this, a3, (void (*)(uint64_t, _QWORD))sub_1C5909E54, (uint64_t)&v6);
  return llvm::ModuleSummaryIndex::propagateAttributes(this, (uint64_t)a3);
}

void llvm::ThinLTOCodeGenerator::promote(llvm::ThinLTOCodeGenerator *this, llvm::Module *a2, llvm::ModuleSummaryIndex *a3, const llvm::lto::InputFile *a4)
{
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *p_dst;
  size_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  _QWORD v23[4];
  _QWORD v24[2];
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  _QWORD v33[2];
  _QWORD v34[3];
  __int128 __dst;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void *__p;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  int v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  char v47;
  int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  char v78;
  char v79;
  uint64_t v80;
  int v81;
  int v82;
  char v83;
  char v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _BYTE v102[23];
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char v112;
  int v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  int v118;
  char v119;
  int v120;
  int v121;
  char v122;
  char v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v8 = *((_DWORD *)a3 + 9);
  if (*((char *)a2 + 191) < 0)
  {
    sub_1C47EBC30(&__dst, *((void **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    __dst = *(_OWORD *)((char *)a2 + 168);
    v36 = *((_QWORD *)a2 + 23);
  }
  v34[0] = 0;
  v34[1] = 0;
  v34[2] = 0x2000000000;
  sub_1C58ED534(a3, (uint64_t)v34);
  v32 = 260;
  v29 = (char *)a2 + 216;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v29);
  v9 = sub_1C4EEA0EC(v33, *((_DWORD *)this + 127));
  llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols((uint64_t)v9, (uint64_t)a4, (uint64_t *)this + 62, v10, (uint64_t)v33);
  if (SHIBYTE(v41) < 0)
    operator delete(__p);
  llvm::ThinLTOCodeGenerator::addUsedSymbolToPreservedGUID(v11, (uint64_t)a4, (uint64_t)v33);
  llvm::computeDeadSymbolsAndUpdateIndirectCalls((llvm **)a3, (llvm::ModuleSummaryIndex *)v33, (void (*)(uint64_t, _QWORD))sub_1C5909E54, (uint64_t)&__p);
  llvm::ModuleSummaryIndex::propagateAttributes(a3, (uint64_t)v33);
  v29 = 0;
  v30 = 0;
  v31 = 0x2800000000;
  if (v8)
  {
    v18 = (4 * v8 / 3u + 1) | ((unint64_t)(4 * v8 / 3u + 1) >> 1);
    v19 = v18 | (v18 >> 2) | ((v18 | (v18 >> 2)) >> 4);
    v20 = v19 | (v19 >> 8) | ((v19 | (v19 >> 8)) >> 16);
    v13 = v20 + 1;
    v21 = v20 + 2;
    v22 = (char *)sub_1C5074000(v20 + 2, 0xCuLL);
    *(_QWORD *)&v22[8 * v13] = 2;
    v29 = v22;
    LODWORD(v30) = v13;
    v27 = 0;
    v28 = 0x2000000000;
    v12 = sub_1C5074000(v21, 0xCuLL);
    v12[v13] = 2;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    LODWORD(v30) = 0;
    v27 = 0;
    v28 = 0x2000000000;
  }
  v26 = v12;
  LODWORD(v27) = v13;
  llvm::ComputeCrossModuleImport((uint64_t)a3, (uint64_t)v34, (llvm::StringMapImpl *)&v29, (uint64_t)&v26);
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  llvm::ThinLTOCodeGenerator::computePrevailingCopies(v14, a3, (uint64_t)v24);
  v23[0] = 0;
  v23[1] = 0;
  v23[2] = 0x2000000000;
  v37 = v23;
  v38 = v24;
  __p = 0;
  v40 = 0;
  v41 = 0;
  v42 &= ~1u;
  v44 = 0;
  v43 = 0;
  v45 = v45 & 0xE000 | 0x400;
  v46 = 0x100000001;
  v47 &= 0xF8u;
  v48 = 0;
  v49 = v49 & 0xFE000000 | 0x30;
  v50 = 4;
  v51 = 0;
  v52 = 0;
  v53 &= 0xF000u;
  v54 = 0u;
  v55 = 0u;
  v56 = xmmword_1C677F4F0;
  v57 = -65536;
  v58 = 0;
  v59 = v59 & 0xC000 | 0x1000;
  v60 = 2;
  v75 = 0;
  v74 = 0;
  v73 = 0u;
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v76 = 1;
  v77 = 1;
  v78 = 0;
  v79 = 0;
  v80 = 0x100000002;
  v81 = 2;
  v83 = 0;
  v82 = 0;
  v84 = 1;
  v103 = 0;
  v101 = 0u;
  memset(v102, 0, sizeof(v102));
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v104 = 1;
  v105 = 0;
  v107 = 0;
  v106 = 0;
  v108 = 0;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v112 = 0;
  v113 = 500;
  v114 = 1;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v118 = 16777473;
  v119 = byte_1ED836110;
  v120 = dword_1ED835F90;
  v121 = dword_1ED836050;
  v122 = 1;
  v123 = byte_1ED834CC8;
  v124 = byte_1ED834C08;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  llvm::thinLTOResolvePrevailingInIndex((uint64_t)&__p, (uint64_t)a3, (unsigned int (*)(uint64_t, _QWORD))sub_1C5907EB4, (uint64_t)&v38, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_1C5907F18, (uint64_t)&v37, (uint64_t)v33);
  sub_1C58ED854((uint64_t)&__p);
  if (v36 >= 0)
    p_dst = (unsigned __int8 *)&__dst;
  else
    p_dst = (unsigned __int8 *)__dst;
  if (v36 >= 0)
    v16 = HIBYTE(v36) & 0x7F;
  else
    v16 = *((_QWORD *)&__dst + 1);
  v17 = sub_1C62B21C4((uint64_t)v34, p_dst, v16);
  llvm::thinLTOFinalizeInModule((uint64_t)a2, *v17 + 8, 0);
  __p = &v26;
  v40 = v33;
  v38 = v24;
  llvm::thinLTOInternalizeAndPromoteInIndex((uint64_t)a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))sub_1C5909E5C, (uint64_t)&__p, (uint64_t (*)(uint64_t, _QWORD))sub_1C5909FF8, (uint64_t)&v38);
  if (llvm::renameModuleForThinLTO((uint64_t)a2, (uint64_t)a3, 0, 0))
    llvm::report_fatal_error((llvm *)"renameModuleForThinLTO failed", (const char *)1);
  sub_1C58F18EC((uint64_t)v23);
  MEMORY[0x1CAA32FB4](v24[0], 8);
  sub_1C58F186C((uint64_t)&v26);
  sub_1C58F17E8((uint64_t)&v29);
  MEMORY[0x1CAA32FB4](v33[0], 8);
  sub_1C62B26F8((uint64_t)v34);
  if (SHIBYTE(v36) < 0)
    operator delete((void *)__dst);
}

uint64_t llvm::ThinLTOCodeGenerator::crossModuleImport(llvm::ThinLTOCodeGenerator *this, llvm::Module *a2, llvm::ModuleSummaryIndex *a3, const llvm::lto::InputFile *a4)
{
  int v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char v16;
  int v17;
  unsigned __int8 *v18;
  size_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  void *__p;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[32];

  llvm::ThinLTOCodeGenerator::generateModuleMap((uint64_t **)this + 59, (llvm::StringMapImpl *)v42);
  v8 = *((_DWORD *)a3 + 9);
  v40 = 0;
  v41 = 0x2000000000;
  if (v8)
  {
    v23 = (4 * v8 / 3u + 1) | ((unint64_t)(4 * v8 / 3u + 1) >> 1);
    v24 = v23 | (v23 >> 2) | ((v23 | (v23 >> 2)) >> 4);
    v25 = v24 | (v24 >> 8) | ((v24 | (v24 >> 8)) >> 16);
    v10 = v25 + 1;
    v9 = sub_1C5074000(v25 + 2, 0xCuLL);
    v9[v10] = 2;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v39 = v9;
  LODWORD(v40) = v10;
  sub_1C58ED534(a3, (uint64_t)&v39);
  v34 = 260;
  v31 = (char *)a2 + 216;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v31);
  v11 = sub_1C4EEA0EC(v38, *((_DWORD *)this + 127));
  llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols((uint64_t)v11, (uint64_t)a4, (uint64_t *)this + 62, v12, (uint64_t)v38);
  if (SHIBYTE(v37) < 0)
    operator delete(__p);
  llvm::ThinLTOCodeGenerator::addUsedSymbolToPreservedGUID(v13, (uint64_t)a4, (uint64_t)v38);
  llvm::computeDeadSymbolsAndUpdateIndirectCalls((llvm **)a3, (llvm::ModuleSummaryIndex *)v38, (void (*)(uint64_t, _QWORD))sub_1C5909E54, (uint64_t)&__p);
  llvm::ModuleSummaryIndex::propagateAttributes(a3, (uint64_t)v38);
  __p = 0;
  v36 = 0;
  v37 = 0x2800000000;
  if (v8)
  {
    v26 = (4 * v8 / 3u + 1) | ((unint64_t)(4 * v8 / 3u + 1) >> 1);
    v27 = v26 | (v26 >> 2) | ((v26 | (v26 >> 2)) >> 4);
    v28 = v27 | (v27 >> 8) | ((v27 | (v27 >> 8)) >> 16);
    v15 = v28 + 1;
    v29 = v28 + 2;
    v30 = sub_1C5074000(v28 + 2, 0xCuLL);
    v30[v15] = 2;
    __p = v30;
    LODWORD(v36) = v15;
    v32 = 0;
    v33 = 0x2000000000;
    v14 = (char *)sub_1C5074000(v29, 0xCuLL);
    *(_QWORD *)&v14[8 * v15] = 2;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    LODWORD(v36) = 0;
    v32 = 0;
    v33 = 0x2000000000;
  }
  v31 = v14;
  LODWORD(v32) = v15;
  llvm::ComputeCrossModuleImport((uint64_t)a3, (uint64_t)&v39, (llvm::StringMapImpl *)&__p, (uint64_t)&v31);
  v16 = *((_BYTE *)a2 + 191);
  v17 = v16;
  if (v16 >= 0)
    v18 = (unsigned __int8 *)a2 + 168;
  else
    v18 = (unsigned __int8 *)*((_QWORD *)a2 + 21);
  v19 = v16 & 0x7F;
  if (v17 >= 0)
    v20 = v19;
  else
    v20 = *((_QWORD *)a2 + 22);
  v21 = sub_1C56D84B0((llvm::StringMapImpl *)&__p, v18, v20);
  llvm::ThinLTOCodeGenerator::crossImportIntoModule((uint64_t)this, a2, (uint64_t)a3, (uint64_t)v42, *v21 + 8, 0);
  sub_1C58F186C((uint64_t)&v31);
  sub_1C58F17E8((uint64_t)&__p);
  MEMORY[0x1CAA32FB4](v38[0], 8);
  sub_1C62B26F8((uint64_t)&v39);
  return sub_1C61A8A20((uint64_t)v42);
}

void llvm::ThinLTOCodeGenerator::gatherImportedSummariesForModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, uint64_t a5)
{
  int v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  unsigned __int8 *p_dst;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  void *__p;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 __dst;
  uint64_t v41;

  v10 = *(_DWORD *)(a3 + 36);
  if (*(char *)(a2 + 191) < 0)
  {
    sub_1C47EBC30(&__dst, *(void **)(a2 + 168), *(_QWORD *)(a2 + 176));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 168);
    v41 = *(_QWORD *)(a2 + 184);
  }
  v38 = 0;
  v39 = 0x2000000000;
  if (v10)
  {
    v21 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
    v22 = v21 | (v21 >> 2) | ((v21 | (v21 >> 2)) >> 4);
    v23 = v22 | (v22 >> 8) | ((v22 | (v22 >> 8)) >> 16);
    v12 = v23 + 1;
    v11 = sub_1C5074000(v23 + 2, 0xCuLL);
    v11[v12] = 2;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v37 = v11;
  LODWORD(v38) = v12;
  sub_1C58ED534((_QWORD *)a3, (uint64_t)&v37);
  v32 = 260;
  v29 = (_QWORD *)(a2 + 216);
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v29);
  v13 = sub_1C4EEA0EC(v36, *(_DWORD *)(a1 + 508));
  llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols((uint64_t)v13, a5, (uint64_t *)(a1 + 496), v14, (uint64_t)v36);
  if (SHIBYTE(v35) < 0)
    operator delete(__p);
  llvm::ThinLTOCodeGenerator::addUsedSymbolToPreservedGUID(v15, a5, (uint64_t)v36);
  llvm::computeDeadSymbolsAndUpdateIndirectCalls((llvm **)a3, (llvm::ModuleSummaryIndex *)v36, (void (*)(uint64_t, _QWORD))sub_1C5909E54, (uint64_t)&__p);
  llvm::ModuleSummaryIndex::propagateAttributes((_QWORD *)a3, (uint64_t)v36);
  __p = 0;
  v34 = 0;
  v35 = 0x2800000000;
  if (v10)
  {
    v24 = (4 * v10 / 3u + 1) | ((unint64_t)(4 * v10 / 3u + 1) >> 1);
    v25 = v24 | (v24 >> 2) | ((v24 | (v24 >> 2)) >> 4);
    v26 = v25 | (v25 >> 8) | ((v25 | (v25 >> 8)) >> 16);
    v17 = v26 + 1;
    v27 = v26 + 2;
    v28 = sub_1C5074000(v26 + 2, 0xCuLL);
    v28[v17] = 2;
    __p = v28;
    LODWORD(v34) = v17;
    v30 = 0;
    v31 = 0x2000000000;
    v16 = sub_1C5074000(v27, 0xCuLL);
    v16[v17] = 2;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    LODWORD(v34) = 0;
    v30 = 0;
    v31 = 0x2000000000;
  }
  v29 = v16;
  LODWORD(v30) = v17;
  llvm::ComputeCrossModuleImport(a3, (uint64_t)&v37, (llvm::StringMapImpl *)&__p, (uint64_t)&v29);
  if (v41 >= 0)
    p_dst = (unsigned __int8 *)&__dst;
  else
    p_dst = (unsigned __int8 *)__dst;
  if (v41 >= 0)
    v19 = HIBYTE(v41) & 0x7F;
  else
    v19 = *((_QWORD *)&__dst + 1);
  v20 = sub_1C56D84B0((llvm::StringMapImpl *)&__p, p_dst, v19);
  llvm::gatherImportedSummariesForModule(p_dst, v19, (uint64_t *)&v37, *v20 + 8, a4);
  sub_1C58F186C((uint64_t)&v29);
  sub_1C58F17E8((uint64_t)&__p);
  MEMORY[0x1CAA32FB4](v36[0], 8);
  sub_1C62B26F8((uint64_t)&v37);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__dst);
}

void llvm::ThinLTOCodeGenerator::emitImports(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  unsigned __int8 *p_dst;
  size_t v21;
  _QWORD *v22;
  __int128 *v23;
  size_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  _QWORD *v32;
  const char *v33;
  __int16 v34;
  uint64_t v35[4];
  __int16 v36;
  const char *v37;
  __int16 v38;
  char **v39;
  char *v40[2];
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[4];
  __int16 v48;
  void *v49[2];
  char v50;
  _QWORD v51[3];
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 __dst;
  uint64_t v56;

  v12 = *(_DWORD *)(a5 + 36);
  if (*(char *)(a2 + 191) < 0)
  {
    sub_1C47EBC30(&__dst, *(void **)(a2 + 168), *(_QWORD *)(a2 + 176));
  }
  else
  {
    __dst = *(_OWORD *)(a2 + 168);
    v56 = *(_QWORD *)(a2 + 184);
  }
  v53 = 0;
  v54 = 0x2000000000;
  if (v12)
  {
    v25 = (4 * v12 / 3u + 1) | ((unint64_t)(4 * v12 / 3u + 1) >> 1);
    v26 = v25 | (v25 >> 2) | ((v25 | (v25 >> 2)) >> 4);
    v27 = v26 | (v26 >> 8) | ((v26 | (v26 >> 8)) >> 16);
    v14 = v27 + 1;
    v13 = sub_1C5074000(v27 + 2, 0xCuLL);
    v13[v14] = 2;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v52 = v13;
  LODWORD(v53) = v14;
  sub_1C58ED534((_QWORD *)a5, (uint64_t)&v52);
  v48 = 260;
  v47[0] = a2 + 216;
  llvm::Triple::Triple((uint64_t)v49, (llvm::Twine *)v47);
  v15 = sub_1C4EEA0EC(v51, *(_DWORD *)(a1 + 508));
  llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols((uint64_t)v15, a6, (uint64_t *)(a1 + 496), v16, (uint64_t)v51);
  if (v50 < 0)
    operator delete(v49[0]);
  llvm::ThinLTOCodeGenerator::addUsedSymbolToPreservedGUID(v17, a6, (uint64_t)v51);
  llvm::computeDeadSymbolsAndUpdateIndirectCalls((llvm **)a5, (llvm::ModuleSummaryIndex *)v51, (void (*)(uint64_t, _QWORD))sub_1C5909E54, (uint64_t)v49);
  llvm::ModuleSummaryIndex::propagateAttributes((_QWORD *)a5, (uint64_t)v51);
  v44 = 0;
  v45 = 0;
  v46 = 0x2800000000;
  if (v12)
  {
    v28 = (4 * v12 / 3u + 1) | ((unint64_t)(4 * v12 / 3u + 1) >> 1);
    v29 = v28 | (v28 >> 2) | ((v28 | (v28 >> 2)) >> 4);
    v30 = v29 | (v29 >> 8) | ((v29 | (v29 >> 8)) >> 16);
    v19 = v30 + 1;
    v31 = v30 + 2;
    v32 = sub_1C5074000(v30 + 2, 0xCuLL);
    v32[v19] = 2;
    v44 = v32;
    LODWORD(v45) = v19;
    v42 = 0;
    v43 = 0x2000000000;
    v18 = sub_1C5074000(v31, 0xCuLL);
    v18[v19] = 2;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    LODWORD(v45) = 0;
    v42 = 0;
    v43 = 0x2000000000;
  }
  v41 = v18;
  LODWORD(v42) = v19;
  llvm::ComputeCrossModuleImport(a5, (uint64_t)&v52, (llvm::StringMapImpl *)&v44, (uint64_t)&v41);
  v40[0] = 0;
  v40[1] = 0;
  v39 = v40;
  if (v56 >= 0)
    p_dst = (unsigned __int8 *)&__dst;
  else
    p_dst = (unsigned __int8 *)__dst;
  if (v56 >= 0)
    v21 = HIBYTE(v56) & 0x7F;
  else
    v21 = *((_QWORD *)&__dst + 1);
  v22 = sub_1C56D84B0((llvm::StringMapImpl *)&v44, p_dst, v21);
  llvm::gatherImportedSummariesForModule(p_dst, v21, (uint64_t *)&v52, *v22 + 8, (uint64_t **)&v39);
  std::system_category();
  if (v56 >= 0)
    v23 = &__dst;
  else
    v23 = (__int128 *)__dst;
  if (v56 >= 0)
    v24 = HIBYTE(v56) & 0x7F;
  else
    v24 = *((_QWORD *)&__dst + 1);
  if (llvm::EmitImportsFiles(v23, v24, a3, a4, &v39))
  {
    v37 = "Failed to open ";
    v38 = 259;
    v36 = 261;
    v35[0] = (uint64_t)a3;
    v35[1] = a4;
    sub_1C6131AAC((uint64_t *)&v37, v35, (uint64_t)v47);
    v33 = " to save imports lists\n";
    v34 = 259;
    sub_1C6131AAC(v47, (uint64_t *)&v33, (uint64_t)v49);
    llvm::report_fatal_error((uint64_t)v49, 1);
  }
  sub_1C58F178C((uint64_t)&v39, v40[0]);
  sub_1C58F186C((uint64_t)&v41);
  sub_1C58F17E8((uint64_t)&v44);
  MEMORY[0x1CAA32FB4](v51[0], 8);
  sub_1C62B26F8((uint64_t)&v52);
  if (SHIBYTE(v56) < 0)
    operator delete((void *)__dst);
}

void llvm::ThinLTOCodeGenerator::internalize(llvm::ThinLTOCodeGenerator *this, llvm::Module *a2, llvm::ModuleSummaryIndex *a3, const llvm::lto::InputFile *a4)
{
  std::string *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  _QWORD *v15;
  int v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t **v19;
  unsigned __int8 *v20;
  size_t v21;
  uint64_t *v22;
  unsigned __int8 *v23;
  size_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  _QWORD *v33;
  _QWORD v34[4];
  _QWORD v35[2];
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void *__dst[2];
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  _QWORD *v51;
  _QWORD *v52;
  void *__p;
  uint64_t *v54;
  uint64_t v55;
  char v56;
  int v57;
  int v58;
  __int16 v59;
  uint64_t v60;
  char v61;
  int v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char v91;
  char v92;
  char v93;
  uint64_t v94;
  int v95;
  int v96;
  char v97;
  char v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _BYTE v116[23];
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  char v126;
  int v127;
  char v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  int v132;
  char v133;
  int v134;
  int v135;
  char v136;
  char v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v8 = (std::string *)((char *)this + 8);
  v50 = 260;
  v47 = (char *)a2 + 216;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v47);
  llvm::TargetMachineBuilder::init(v8, (const llvm::Triple *)&__p);
  if (SHIBYTE(v55) < 0)
    operator delete(__p);
  v9 = *((_DWORD *)a3 + 9);
  if (*((char *)a2 + 191) < 0)
  {
    sub_1C47EBC30(__dst, *((void **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)((char *)a2 + 168);
    v46 = *((_QWORD *)a2 + 23);
  }
  v10 = sub_1C4EEA0EC(&v43, *((_DWORD *)this + 127));
  llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols((uint64_t)v10, (uint64_t)a4, (uint64_t *)this + 62, v11, (uint64_t)&v43);
  llvm::ThinLTOCodeGenerator::addUsedSymbolToPreservedGUID(v12, (uint64_t)a4, (uint64_t)&v43);
  v48 = 0;
  v49 = 0x2000000000;
  if (v9)
  {
    v26 = (4 * v9 / 3u + 1) | ((unint64_t)(4 * v9 / 3u + 1) >> 1);
    v27 = v26 | (v26 >> 2) | ((v26 | (v26 >> 2)) >> 4);
    v28 = v27 | (v27 >> 8) | ((v27 | (v27 >> 8)) >> 16);
    v14 = v28 + 1;
    v13 = (char *)sub_1C5074000(v28 + 2, 0xCuLL);
    *(_QWORD *)&v13[8 * v14] = 2;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  v47 = v13;
  LODWORD(v48) = v14;
  sub_1C58ED534(a3, (uint64_t)&v47);
  llvm::computeDeadSymbolsAndUpdateIndirectCalls((llvm **)a3, (llvm::ModuleSummaryIndex *)&v43, (void (*)(uint64_t, _QWORD))sub_1C5909E54, (uint64_t)&__p);
  llvm::ModuleSummaryIndex::propagateAttributes(a3, (uint64_t)&v43);
  v40 = 0;
  v41 = 0;
  v42 = 0x2800000000;
  if (v9)
  {
    v29 = (4 * v9 / 3u + 1) | ((unint64_t)(4 * v9 / 3u + 1) >> 1);
    v30 = v29 | (v29 >> 2) | ((v29 | (v29 >> 2)) >> 4);
    v31 = v30 | (v30 >> 8) | ((v30 | (v30 >> 8)) >> 16);
    v16 = v31 + 1;
    v32 = v31 + 2;
    v33 = sub_1C5074000(v31 + 2, 0xCuLL);
    v33[v16] = 2;
    v40 = v33;
    LODWORD(v41) = v16;
    v38 = 0;
    v39 = 0x2000000000;
    v15 = sub_1C5074000(v32, 0xCuLL);
    v15[v16] = 2;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    LODWORD(v41) = 0;
    v38 = 0;
    v39 = 0x2000000000;
  }
  v37 = v15;
  LODWORD(v38) = v16;
  llvm::ComputeCrossModuleImport((uint64_t)a3, (uint64_t)&v47, (llvm::StringMapImpl *)&v40, (uint64_t)&v37);
  if (v46 >= 0)
    v17 = (unsigned __int8 *)__dst;
  else
    v17 = (unsigned __int8 *)__dst[0];
  if (v46 >= 0)
    v18 = HIBYTE(v46) & 0x7F;
  else
    v18 = (size_t)__dst[1];
  v19 = sub_1C6292894((uint64_t)&v37, v17, v18);
  if (*((_DWORD *)*v19 + 4) | v44)
  {
    v35[0] = 0;
    v35[1] = 0;
    v36 = 0;
    llvm::ThinLTOCodeGenerator::computePrevailingCopies((uint64_t)v19, a3, (uint64_t)v35);
    v34[0] = 0;
    v34[1] = 0;
    v34[2] = 0x2000000000;
    v51 = v34;
    v52 = v35;
    __p = 0;
    v54 = 0;
    v55 = 0;
    v56 &= ~1u;
    v58 = 0;
    v57 = 0;
    v59 = v59 & 0xE000 | 0x400;
    v60 = 0x100000001;
    v61 &= 0xF8u;
    v62 = 0;
    v63 = v63 & 0xFE000000 | 0x30;
    v64 = 4;
    v65 = 0;
    v66 = 0;
    v67 &= 0xF000u;
    v69 = 0u;
    v68 = 0u;
    v70 = xmmword_1C677F4F0;
    v71 = -65536;
    v72 = 0;
    v73 = v73 & 0xC000 | 0x1000;
    v74 = 2;
    v89 = 0;
    v88 = 0;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    v90 = 1;
    v91 = 1;
    v92 = 0;
    v93 = 0;
    v94 = 0x100000002;
    v95 = 2;
    v97 = 0;
    v96 = 0;
    v98 = 1;
    v117 = 0;
    v115 = 0u;
    memset(v116, 0, sizeof(v116));
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v118 = 1;
    v119 = 0;
    v121 = 0;
    v120 = 0;
    v122 = 0;
    v123 = 0u;
    v124 = 0u;
    v125 = 0u;
    v126 = 0;
    v127 = 500;
    v128 = 1;
    v129 = 0;
    v130 = 0;
    v131 = 0;
    v132 = 16777473;
    v133 = byte_1ED836110;
    v134 = dword_1ED835F90;
    v135 = dword_1ED836050;
    v136 = 1;
    v137 = byte_1ED834CC8;
    v138 = byte_1ED834C08;
    v139 = 0;
    v140 = 0;
    v141 = 0;
    v142 = 0;
    v143 = 0;
    v144 = 0;
    v145 = 0;
    llvm::thinLTOResolvePrevailingInIndex((uint64_t)&__p, (uint64_t)a3, (unsigned int (*)(uint64_t, _QWORD))sub_1C5907EB4, (uint64_t)&v52, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_1C5907F18, (uint64_t)&v51, (uint64_t)&v43);
    sub_1C58ED854((uint64_t)&__p);
    __p = &v37;
    v54 = &v43;
    v52 = v35;
    llvm::thinLTOInternalizeAndPromoteInIndex((uint64_t)a3, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))sub_1C5909E5C, (uint64_t)&__p, (uint64_t (*)(uint64_t, _QWORD))sub_1C5909FF8, (uint64_t)&v52);
    if (llvm::renameModuleForThinLTO((uint64_t)a2, (uint64_t)a3, 0, 0))
      llvm::report_fatal_error((llvm *)"renameModuleForThinLTO failed", (const char *)1);
    if (v46 >= 0)
      v20 = (unsigned __int8 *)__dst;
    else
      v20 = (unsigned __int8 *)__dst[0];
    if (v46 >= 0)
      v21 = HIBYTE(v46) & 0x7F;
    else
      v21 = (size_t)__dst[1];
    v22 = sub_1C62B21C4((uint64_t)&v47, v20, v21);
    llvm::thinLTOFinalizeInModule((uint64_t)a2, *v22 + 8, 0);
    if (v46 >= 0)
      v23 = (unsigned __int8 *)__dst;
    else
      v23 = (unsigned __int8 *)__dst[0];
    if (v46 >= 0)
      v24 = HIBYTE(v46) & 0x7F;
    else
      v24 = (size_t)__dst[1];
    v25 = sub_1C62B21C4((uint64_t)&v47, v23, v24);
    llvm::thinLTOInternalizeModule(a2, *v25 + 8);
    sub_1C58F18EC((uint64_t)v34);
    MEMORY[0x1CAA32FB4](v35[0], 8);
  }
  sub_1C58F186C((uint64_t)&v37);
  sub_1C58F17E8((uint64_t)&v40);
  sub_1C62B26F8((uint64_t)&v47);
  MEMORY[0x1CAA32FB4](v43, 8);
  if (SHIBYTE(v46) < 0)
    operator delete(__dst[0]);
}

uint64_t llvm::ThinLTOCodeGenerator::optimize(llvm::ThinLTOCodeGenerator *this, llvm::Module *a2)
{
  std::string *v4;
  void *v5;
  char *v7;
  __int16 v8;
  void *__p[2];
  char v10;

  v4 = (std::string *)((char *)this + 8);
  v8 = 260;
  v7 = (char *)a2 + 216;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v7);
  llvm::TargetMachineBuilder::init(v4, (const llvm::Triple *)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  llvm::TargetMachineBuilder::create((llvm::TargetMachineBuilder *)v4, (uint64_t *)__p);
  v5 = __p[0];
  sub_1C59020C8((uint64_t)a2, (uint64_t)__p[0], *((unsigned int *)this + 183), *((unsigned __int8 *)this + 730));
  return (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t llvm::ThinLTOCodeGenerator::codegen@<X0>(llvm::ThinLTOCodeGenerator *this@<X0>, llvm::Module *a2@<X1>, uint64_t *a3@<X8>)
{
  std::string *v5;
  void *v6;
  char *v8;
  __int16 v9;
  void *__p[2];
  char v11;

  v5 = (std::string *)((char *)this + 8);
  v9 = 260;
  v8 = (char *)a2 + 216;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v8);
  llvm::TargetMachineBuilder::init(v5, (const llvm::Triple *)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  llvm::TargetMachineBuilder::create((llvm::TargetMachineBuilder *)v5, (uint64_t *)__p);
  v6 = __p[0];
  sub_1C5902774(a2, (uint64_t)__p[0], a3);
  return (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 8))(v6);
}

void llvm::ThinLTOCodeGenerator::writeGeneratedObject(_BYTE *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25[5];
  _BYTE v26[40];
  _QWORD v27[4];
  char *v28;
  int v29[4];
  uint64_t v30;

  if (!a3)
  {
    v29[0] = 0;
    std::system_category();
    v12 = sub_1C5E71274(a1, a2, (uint64_t)v29, 0, 2, 0);
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v27, v12, 1, 0, 0);
    if (v29[0])
    {
      v23 = "Can't open output '";
      v24 = 259;
      v22 = 261;
      v21[0] = (uint64_t)a1;
      v21[1] = a2;
      sub_1C6131AAC((uint64_t *)&v23, v21, (uint64_t)v25);
      v19 = "'\n";
      v20 = 259;
      sub_1C6131AAC(v25, (uint64_t *)&v19, (uint64_t)v26);
      llvm::report_fatal_error((uint64_t)v26, 1);
    }
    v13 = *(_BYTE **)(a4 + 8);
    v14 = *(_BYTE **)(a4 + 16);
    v15 = v14 - v13;
    if ((unint64_t)(v14 - v13) <= v27[3] - (_QWORD)v28)
    {
      if (v14 != v13)
      {
        memcpy(v28, v13, v14 - v13);
        v28 += v15;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v27, v13, v14 - v13);
    }
    if (!a1)
    {
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
LABEL_32:
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v27);
      return;
    }
    if (a2 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_34;
    if (a2 >= 0x17)
    {
      v16 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17)
        v16 = a2 | 7;
      v17 = v16 + 1;
      v18 = operator new(v16 + 1);
      a5[1] = a2;
      a5[2] = v17 | 0x8000000000000000;
      *a5 = v18;
      a5 = v18;
    }
    else
    {
      *((_BYTE *)a5 + 23) = a2;
      if (!a2)
        goto LABEL_31;
    }
    memmove(a5, a1, a2);
LABEL_31:
    *((_BYTE *)a5 + a2) = 0;
    goto LABEL_32;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _BYTE *, unint64_t))(*(_QWORD *)a3 + 32))(v27, a3, a4, a1, a2);
  if (v27[0])
  {
    v30 = v27[0];
    v27[0] = 0;
    llvm::report_fatal_error(&v30);
  }
  if (!a1)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  if (a2 > 0x7FFFFFFFFFFFFFF7)
LABEL_34:
    abort();
  if (a2 >= 0x17)
  {
    v9 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v9 = a2 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    a5[1] = a2;
    a5[2] = v10 | 0x8000000000000000;
    *a5 = v11;
    a5 = v11;
    goto LABEL_12;
  }
  *((_BYTE *)a5 + 23) = a2;
  if (a2)
LABEL_12:
    memmove(a5, a1, a2);
  *((_BYTE *)a5 + a2) = 0;
  if (v27[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v27[0] + 8))(v27[0]);
}

void llvm::ThinLTOCodeGenerator::run(llvm::ThinLTOCodeGenerator *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  BOOL *v6;
  size_t v7;
  void *p_p;
  char *v9;
  _BYTE *v10;
  uint64_t v11;
  llvm::ModuleSummaryIndex *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  std::mutex *v17;
  void (**v18)(std::mutex *);
  uint64_t v19;
  void **v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  llvm::ModuleSummaryIndex *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  BOOL v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  llvm::ModuleSummaryIndex *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 *v40;
  char v41;
  unsigned __int8 *v42;
  size_t v43;
  size_t v44;
  uint64_t **v45;
  uint64_t **v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  llvm *v62;
  void *v63;
  int *v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t *v69;
  void (**v70)(uint64_t *);
  char v71;
  BOOL v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  __int128 v76;
  llvm *v77;
  llvm::raw_ostream *v78;
  llvm::ModuleSummaryIndex *v79;
  char v80;
  std::string::size_type size;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  size_t v90;
  const char *v91;
  void *v92;
  int v93;
  _OWORD v94[3];
  std::shared_future<void> v95;
  void *v96;
  int *v97;
  void *v98;
  char *v99;
  char *v100;
  _QWORD v101[2];
  int v102;
  uint64_t v103;
  const std::error_category *v104;
  uint64_t v105;
  void *__p;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  _QWORD *v110[2];
  uint64_t *v111;
  _QWORD *v112[2];
  _QWORD v113[2];
  int v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  __int16 v118;
  llvm::ModuleSummaryIndex *v119;
  std::shared_future<void> v120;
  void **v121;
  uint64_t v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125[4];
  __int16 v126;
  std::string v127;
  unsigned __int8 v128;
  std::mutex v129;
  void *v130;
  uint64_t v131[3];
  uint64_t *v132;
  __int16 v133;
  void *v134;
  __int128 v135;
  _BYTE v136[4];
  int v137;
  int v138;
  __int16 v139;
  uint64_t v140;
  char v141;
  int v142;
  unsigned int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  __int16 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  int v151;
  int v152;
  __int16 v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  char v171;
  char v172;
  char v173;
  uint64_t v174;
  int v175;
  int v176;
  char v177;
  char v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  _BYTE v196[23];
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  char v206;
  int v207;
  char v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  int v212;
  char v213;
  int v214;
  int v215;
  char v216;
  char v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;

  v226 = *MEMORY[0x1E0C80C00];
  llvm::timeTraceProfilerBegin("ThinLink", 8uLL, (uint64_t)"", 0);
  v2 = *((unsigned __int8 *)this + 727);
  if (*((char *)this + 727) < 0)
    v3 = *((_QWORD *)this + 89);
  else
    v3 = *((unsigned __int8 *)this + 727);
  v4 = v3 == 0;
  v128 = v4;
  memset(&v127, 0, sizeof(v127));
  if (*((_DWORD *)this + 158) == 2)
  {
    if ((v2 & 0x80) != 0)
      v2 = *((_QWORD *)this + 89);
    if (!v2)
    {
      v134 = v136;
      v135 = xmmword_1C85F20B0;
      v129.__m_.__sig = (uint64_t)"temp";
      *(_WORD *)&v129.__m_.__opaque[24] = 259;
      if (llvm::sys::fs::createUniqueDirectory(&v129.__m_.__sig, &v134))
        llvm::report_fatal_error((llvm *)"cannot create temp directory", (const char *)1);
      v5 = v135;
      if ((unint64_t)(v135 + 1) > *((_QWORD *)&v135 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v134, v136, v135 + 1, 1);
        v5 = v135;
      }
      *((_BYTE *)v134 + v5) = 0;
      MEMORY[0x1CAA32ABC]((char *)this + 704, v134);
      std::string::operator=(&v127, (const std::string *)((char *)this + 704));
      if (v134 != v136)
        free(v134);
      v4 = v128;
    }
  }
  if (v4)
    sub_1C5906298((_QWORD *)this + 53, (uint64_t)(*((_QWORD *)this + 60) - *((_QWORD *)this + 59)) >> 3);
  if (*((char *)this + 727) < 0)
  {
    if (!*((_QWORD *)this + 89))
      goto LABEL_22;
  }
  else if (!*((_BYTE *)this + 727))
  {
    goto LABEL_22;
  }
  LOWORD(v138) = 260;
  v134 = (char *)this + 704;
  llvm::sys::fs::create_directories((unsigned __int8 **)&v134, 1, 504);
  LOBYTE(v115) = 0;
  LOWORD(v138) = 260;
  v134 = (char *)this + 704;
  llvm::sys::fs::is_directory((llvm::sys::fs *)&v134, (const llvm::Twine *)&v115, v6);
  if (!(_BYTE)v115)
  {
    v131[0] = (uint64_t)"Unexistent dir: '";
    v133 = 259;
    v126 = 260;
    v125[0] = (uint64_t)this + 704;
    sub_1C6131AAC(v131, v125, (uint64_t)&v129);
    v121 = (void **)"'";
    v124 = 259;
    sub_1C6131AAC(&v129.__m_.__sig, (uint64_t *)&v121, (uint64_t)&v134);
    v92 = &v134;
    goto LABEL_143;
  }
  sub_1C571119C((int64x2_t *)this + 28, (uint64_t)(*((_QWORD *)this + 60) - *((_QWORD *)this + 59)) >> 3);
LABEL_22:
  v93 = *((unsigned __int8 *)this + 729);
  if (*((_BYTE *)this + 729))
  {
    llvm::ThreadPool::ThreadPool((uint64_t)&v134, 0x100000000);
    v13 = *((_QWORD *)this + 59);
    v14 = *((_QWORD *)this + 60);
    if (v13 == v14)
    {
LABEL_53:
      llvm::ThreadPool::~ThreadPool((llvm::ThreadPool *)&v134);
      goto LABEL_126;
    }
    v15 = 0;
    while (1)
    {
      v16 = operator new(0x28uLL);
      *v16 = &off_1E817EE18;
      v16[1] = this;
      v16[2] = v13;
      v16[3] = &v128;
      *((_DWORD *)v16 + 8) = v15;
      *(_QWORD *)&v129.__m_.__opaque[16] = v16;
      sub_1C6208584((uint64_t)&v134, &v129, 0, (std::future<void> *)&v120);
      v17 = *(std::mutex **)&v129.__m_.__opaque[16];
      if (*(std::mutex **)&v129.__m_.__opaque[16] == &v129)
        break;
      if (*(_QWORD *)&v129.__m_.__opaque[16])
      {
        v18 = (void (**)(std::mutex *))(**(_QWORD **)&v129.__m_.__opaque[16] + 40);
        goto LABEL_51;
      }
LABEL_52:
      std::shared_future<void>::~shared_future(&v120);
      v13 += 8;
      ++v15;
      if (v13 == v14)
        goto LABEL_53;
    }
    v18 = (void (**)(std::mutex *))(v129.__m_.__sig + 32);
    v17 = &v129;
LABEL_51:
    (*v18)(v17);
    goto LABEL_52;
  }
  llvm::ThinLTOCodeGenerator::linkCombinedIndex(this, (uint64_t *)&v119);
  if (*((char *)this + 703) < 0)
  {
    if (*((_QWORD *)this + 86))
    {
LABEL_25:
      if (*((char *)this + 703) >= 0)
        v7 = *((unsigned __int8 *)this + 703);
      else
        v7 = *((_QWORD *)this + 86);
      sub_1C484371C((uint64_t)&__p, v7 + 8);
      if (v108 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v7)
      {
        if (*((char *)this + 703) >= 0)
          v9 = (char *)this + 680;
        else
          v9 = (char *)*((_QWORD *)this + 85);
        memmove(p_p, v9, v7);
      }
      strcpy((char *)p_p + v7, "index.bc");
      LODWORD(v103) = 0;
      v104 = std::system_category();
      if (v108 >= 0)
        v10 = &__p;
      else
        v10 = __p;
      if (v108 >= 0)
        v11 = HIBYTE(v108) & 0x7F;
      else
        v11 = v107;
      llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v134, v10, v11, (uint64_t)&v103, 0);
      if (!(_DWORD)v103)
      {
        v12 = v119;
        llvm::writeIndexToFile(v119, (llvm::raw_ostream *)&v134, 0);
        llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v134);
        if (SHIBYTE(v108) < 0)
          operator delete(__p);
        goto LABEL_56;
      }
      v125[0] = (uint64_t)"Failed to open ";
      v126 = 259;
      v124 = 260;
      v121 = &__p;
      sub_1C6131AAC(v125, (uint64_t *)&v121, (uint64_t)v131);
      v115 = " to save optimized bitcode\n";
      v118 = 259;
      sub_1C6131AAC(v131, (uint64_t *)&v115, (uint64_t)&v129);
      v92 = &v129;
LABEL_143:
      llvm::report_fatal_error((uint64_t)v92, 1);
    }
  }
  else if (*((_BYTE *)this + 703))
  {
    goto LABEL_25;
  }
  v12 = v119;
LABEL_56:
  llvm::ThinLTOCodeGenerator::generateModuleMap((uint64_t **)this + 59, (llvm::StringMapImpl *)v125);
  v19 = (*((_QWORD *)this + 60) - *((_QWORD *)this + 59)) >> 3;
  v121 = 0;
  v122 = 0;
  v123 = 0x2000000000;
  if ((_DWORD)v19)
  {
    v84 = (4 * (int)v19 / 3u + 1) | ((unint64_t)(4 * (int)v19 / 3u + 1) >> 1);
    v85 = v84 | (v84 >> 2) | ((v84 | (v84 >> 2)) >> 4);
    v86 = v85 | (v85 >> 8) | ((v85 | (v85 >> 8)) >> 16);
    v21 = v86 + 1;
    v20 = (void **)sub_1C5074000(v86 + 2, 0xCuLL);
    v20[v21] = (void *)2;
  }
  else
  {
    v20 = 0;
    v21 = 0;
  }
  v121 = v20;
  LODWORD(v122) = v21;
  v22 = sub_1C58ED534(v12, (uint64_t)&v121);
  v113[0] = 0;
  v113[1] = 0;
  v114 = 0;
  v24 = (uint64_t *)*((_QWORD *)this + 59);
  v25 = (uint64_t *)*((_QWORD *)this + 60);
  if (v24 != v25)
  {
    do
    {
      v49 = *v24++;
      llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols((uint64_t)v22, v49, (uint64_t *)this + 62, v23, (uint64_t)v113);
    }
    while (v24 != v25);
    v50 = (uint64_t *)*((_QWORD *)this + 59);
    v51 = (uint64_t *)*((_QWORD *)this + 60);
    while (v50 != v51)
    {
      v52 = *v50++;
      v22 = llvm::ThinLTOCodeGenerator::addUsedSymbolToPreservedGUID((uint64_t)v22, v52, (uint64_t)v113);
    }
  }
  llvm::computeDeadSymbolsAndUpdateIndirectCalls((llvm **)v12, (llvm::ModuleSummaryIndex *)v113, (void (*)(uint64_t, _QWORD))sub_1C5909E54, (uint64_t)&v134);
  llvm::ModuleSummaryIndex::propagateAttributes(v12, (uint64_t)v113);
  llvm::computeSyntheticCounts(v12, v26);
  v135 = 0uLL;
  v134 = 0;
  llvm::updateVCallVisibilityInIndex(v12, 0, (uint64_t)&v134);
  MEMORY[0x1CAA32FB4](0, 8);
  v112[0] = 0;
  v112[1] = 0;
  v110[1] = 0;
  v111 = (uint64_t *)v112;
  v109 = (uint64_t *)v110;
  v110[0] = 0;
  llvm::runWholeProgramDevirtOnIndex((uint64_t)v12, &v109, &v111);
  v27 = v109;
  if (v109 != (uint64_t *)v110)
  {
    do
    {
      v129.__m_.__sig = v27[4];
      sub_1C61A7854((uint64_t)v113, &v129.__m_.__sig, (uint64_t)&v134);
      v28 = (uint64_t *)v27[1];
      if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (uint64_t *)v27[2];
          v30 = *v29 == (_QWORD)v27;
          v27 = v29;
        }
        while (!v30);
      }
      v27 = v29;
    }
    while (v29 != (uint64_t *)v110);
  }
  v115 = 0;
  v116 = 0;
  v117 = 0x2800000000;
  if ((_DWORD)v19)
  {
    v87 = (4 * (int)v19 / 3u + 1) | ((unint64_t)(4 * (int)v19 / 3u + 1) >> 1);
    v88 = v87 | (v87 >> 2) | ((v87 | (v87 >> 2)) >> 4);
    v89 = v88 | (v88 >> 8) | ((v88 | (v88 >> 8)) >> 16);
    v32 = v89 + 1;
    v90 = v89 + 2;
    v91 = (const char *)sub_1C5074000(v89 + 2, 0xCuLL);
    *(_QWORD *)&v91[8 * v32] = 2;
    v115 = v91;
    LODWORD(v116) = v32;
    __p = 0;
    v107 = 0;
    v108 = 0x2000000000;
    v31 = sub_1C5074000(v90, 0xCuLL);
    v31[v32] = 2;
  }
  else
  {
    v31 = 0;
    v32 = 0;
    LODWORD(v116) = 0;
    v107 = 0;
    v108 = 0x2000000000;
  }
  __p = v31;
  LODWORD(v107) = v32;
  llvm::ComputeCrossModuleImport((uint64_t)v12, (uint64_t)&v121, (llvm::StringMapImpl *)&v115, (uint64_t)&__p);
  v103 = 0;
  v104 = 0;
  v105 = 0x2000000000;
  v101[0] = 0;
  v101[1] = 0;
  v102 = 0;
  llvm::ThinLTOCodeGenerator::computePrevailingCopies(v33, v12, (uint64_t)v101);
  v129.__m_.__sig = (uint64_t)v101;
  v131[0] = (uint64_t)&v103;
  v135 = 0uLL;
  v134 = 0;
  v136[0] &= ~1u;
  v138 = 0;
  v137 = 0;
  v139 = v139 & 0xE000 | 0x400;
  v140 = 0x100000001;
  v141 &= 0xF8u;
  v142 = 0;
  v143 = v143 & 0xFE000000 | 0x30;
  v144 = 4;
  v146 = 0;
  v145 = 0;
  v147 &= 0xF000u;
  v149 = 0u;
  v148 = 0u;
  v150 = xmmword_1C677F4F0;
  v151 = -65536;
  v152 = 0;
  v153 = v153 & 0xC000 | 0x1000;
  v154 = 2;
  v169 = 0;
  v168 = 0;
  v166 = 0u;
  v167 = 0u;
  v164 = 0u;
  v165 = 0u;
  v162 = 0u;
  v163 = 0u;
  v160 = 0u;
  v161 = 0u;
  v158 = 0u;
  v159 = 0u;
  v156 = 0u;
  v157 = 0u;
  v155 = 0u;
  v170 = 1;
  v171 = 1;
  v172 = 0;
  v173 = 0;
  v174 = 0x100000002;
  v175 = 2;
  v177 = 0;
  v176 = 0;
  v178 = 1;
  v197 = 0;
  v195 = 0u;
  memset(v196, 0, sizeof(v196));
  v193 = 0u;
  v194 = 0u;
  v191 = 0u;
  v192 = 0u;
  v189 = 0u;
  v190 = 0u;
  v187 = 0u;
  v188 = 0u;
  v185 = 0u;
  v186 = 0u;
  v183 = 0u;
  v184 = 0u;
  v181 = 0u;
  v182 = 0u;
  v179 = 0u;
  v180 = 0u;
  v198 = 1;
  v199 = 0;
  v201 = 0;
  v200 = 0;
  v202 = 0;
  v203 = 0u;
  v204 = 0u;
  v205 = 0u;
  v206 = 0;
  v207 = 500;
  v208 = 1;
  v209 = 0;
  v210 = 0;
  v211 = 0;
  v212 = 16777473;
  v213 = byte_1ED836110;
  v214 = dword_1ED835F90;
  v215 = dword_1ED836050;
  v216 = 1;
  v217 = byte_1ED834CC8;
  v218 = byte_1ED834C08;
  v219 = 0;
  v220 = 0;
  v221 = 0;
  v222 = 0;
  v223 = 0;
  v224 = 0;
  v225 = 0;
  llvm::thinLTOResolvePrevailingInIndex((uint64_t)&v134, (uint64_t)v12, (unsigned int (*)(uint64_t, _QWORD))sub_1C5907EB4, (uint64_t)&v129, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_1C5907F18, (uint64_t)v131, (uint64_t)v113);
  sub_1C58ED854((uint64_t)&v134);
  v134 = &__p;
  *(_QWORD *)&v135 = v113;
  llvm::updateIndexWPDForExports((uint64_t)v12, (unsigned int (*)(uint64_t, _QWORD, _QWORD))sub_1C5909E5C, (uint64_t)&v134, &v111);
  v34 = v119;
  v134 = &__p;
  *(_QWORD *)&v135 = v113;
  v129.__m_.__sig = (uint64_t)v101;
  llvm::thinLTOInternalizeAndPromoteInIndex((uint64_t)v119, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))sub_1C5909E5C, (uint64_t)&v134, (uint64_t (*)(uint64_t, _QWORD))sub_1C5909FF8, (uint64_t)&v129);
  v134 = v101;
  llvm::thinLTOPropagateFunctionAttrs((uint64_t)v34, (uint64_t (*)(uint64_t, _QWORD))sub_1C5909FF8, (uint64_t)&v134);
  v35 = (uint64_t *)*((_QWORD *)this + 59);
  v36 = (uint64_t *)*((_QWORD *)this + 60);
  if (v35 == v36)
  {
    v37 = *((_QWORD *)this + 59);
  }
  else
  {
    do
    {
      v38 = *v35++;
      v39 = v38 + 224;
      v40 = *(unsigned __int8 **)(v38 + 224);
      v41 = *(_BYTE *)(v38 + 247);
      if (v41 >= 0)
        v42 = (unsigned __int8 *)v39;
      else
        v42 = v40;
      v43 = *(_QWORD *)(v39 + 8);
      if (v41 >= 0)
        v44 = v41 & 0x7F;
      else
        v44 = v43;
      sub_1C6292894((uint64_t)&__p, v42, v44);
      sub_1C56D84B0((llvm::StringMapImpl *)&v115, v42, v44);
      sub_1C58EDD20((llvm::StringMapImpl *)&v103, v42, v44);
      sub_1C62B21C4((uint64_t)&v121, v42, v44);
    }
    while (v35 != v36);
    v35 = (uint64_t *)*((_QWORD *)this + 59);
    v37 = *((_QWORD *)this + 60);
  }
  v98 = 0;
  v99 = 0;
  v100 = 0;
  sub_1C4DB1D18((uint64_t)&v98, (v37 - (uint64_t)v35) >> 3);
  v45 = (uint64_t **)*((_QWORD *)this + 59);
  v46 = (uint64_t **)*((_QWORD *)this + 60);
  v47 = v99;
  if (v45 == v46)
  {
    v48 = v99;
  }
  else
  {
    do
    {
      v53 = **v45;
      if (v47 >= v100)
      {
        v54 = (char *)v98;
        v55 = (v47 - (_BYTE *)v98) >> 3;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 61)
          abort();
        v57 = v100 - (_BYTE *)v98;
        if ((v100 - (_BYTE *)v98) >> 2 > v56)
          v56 = v57 >> 2;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
          v58 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          if (v58 >> 61)
            sub_1C4764EE4();
          v59 = (char *)operator new(8 * v58);
        }
        else
        {
          v59 = 0;
        }
        v60 = &v59[8 * v55];
        *(_QWORD *)v60 = v53;
        v48 = v60 + 8;
        if (v47 != v54)
        {
          do
          {
            v61 = *((_QWORD *)v47 - 1);
            v47 -= 8;
            *((_QWORD *)v60 - 1) = v61;
            v60 -= 8;
          }
          while (v47 != v54);
          v47 = (char *)v98;
        }
        v98 = v60;
        v99 = v48;
        v100 = &v59[8 * v58];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *(_QWORD *)v47 = v53;
        v48 = v47 + 8;
      }
      v99 = v48;
      ++v45;
      v47 = v48;
    }
    while (v45 != v46);
  }
  llvm::lto::generateModulesOrdering((uint64_t)v98, (v48 - (_BYTE *)v98) >> 3, (uint64_t)&v96);
  v62 = *(llvm **)((uint64_t (*)(void))off_1EF8EEB50)();
  if (v62)
    v62 = (llvm *)sub_1C6392DC0((uint64_t)v62);
  v63 = llvm::errs(v62);
  memset(v129.__m_.__opaque, 0, sizeof(v129.__m_.__opaque));
  v129.__m_.__sig = 850045863;
  v130 = v63;
  llvm::ThreadPool::ThreadPool((uint64_t)&v134, dword_1ED834900);
  v64 = (int *)v96;
  v65 = v97;
  if (v96 != v97)
  {
    while (1)
    {
      v66 = *v64;
      v67 = *((_QWORD *)this + 59) + 8 * v66;
      v68 = operator new(0x68uLL);
      *v68 = &off_1E817EE60;
      v68[1] = v67;
      v68[2] = &__p;
      v68[3] = &v121;
      v68[4] = this;
      v68[5] = &v119;
      v68[6] = &v115;
      v68[7] = &v103;
      v68[8] = &v129;
      v68[9] = &v128;
      v68[10] = v125;
      v68[11] = v113;
      *((_DWORD *)v68 + 24) = v66;
      v132 = v68;
      sub_1C6208584((uint64_t)&v134, v131, 0, (std::future<void> *)&v95);
      v69 = v132;
      if (v132 == v131)
        break;
      if (v132)
      {
        v70 = (void (**)(uint64_t *))(*v132 + 40);
        goto LABEL_109;
      }
LABEL_110:
      std::shared_future<void>::~shared_future(&v95);
      if (++v64 == v65)
        goto LABEL_111;
    }
    v70 = (void (**)(uint64_t *))(v131[0] + 32);
    v69 = v131;
LABEL_109:
    (*v70)(v69);
    goto LABEL_110;
  }
LABEL_111:
  llvm::ThreadPool::~ThreadPool((llvm::ThreadPool *)&v134);
  v71 = *((_BYTE *)this + 583);
  v72 = v71 < 0;
  if (v71 >= 0)
    v73 = (char *)this + 560;
  else
    v73 = (char *)*((_QWORD *)this + 70);
  v74 = v71 & 0x7F;
  if (v72)
    v75 = *((_QWORD *)this + 71);
  else
    v75 = v74;
  v76 = *(_OWORD *)((char *)this + 600);
  v94[0] = *(_OWORD *)((char *)this + 584);
  v94[1] = v76;
  v94[2] = *(_OWORD *)((char *)this + 616);
  v77 = (llvm *)llvm::pruneCache(v73, v75, (uint64_t)v94);
  if ((byte_1ED836D79 & 1) != 0 || byte_1EF8F7308)
    llvm::PrintStatistics(v77);
  llvm::reportAndResetTimings(0, v78);
  std::mutex::~mutex(&v129);
  if (v96)
  {
    v97 = (int *)v96;
    operator delete(v96);
  }
  if (v98)
  {
    v99 = (char *)v98;
    operator delete(v98);
  }
  MEMORY[0x1CAA32FB4](v101[0], 8);
  sub_1C58F18EC((uint64_t)&v103);
  sub_1C58F186C((uint64_t)&__p);
  sub_1C58F17E8((uint64_t)&v115);
  sub_1C47655E8((uint64_t)&v109, v110[0]);
  sub_1C58F196C((uint64_t)&v111, v112[0]);
  MEMORY[0x1CAA32FB4](v113[0], 8);
  sub_1C62B26F8((uint64_t)&v121);
  sub_1C61A8A20((uint64_t)v125);
  v79 = v119;
  v119 = 0;
  if (v79)
  {
    v83 = sub_1C61A8910((uint64_t)v79);
    MEMORY[0x1CAA32FC0](v83, 0x10B0C4007EAB999);
  }
LABEL_126:
  v80 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  size = *((_BYTE *)&v127.__r_.__value_.__s + 23) & 0x7F;
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v127.__r_.__value_.__l.__size_;
  if (size)
  {
    LOWORD(v138) = 260;
    v134 = &v127;
    llvm::sys::fs::remove_directories((const char **)&v134, (const llvm::Twine *)1);
    v80 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  }
  if (v80 < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (v93)
  {
    v82 = *(_QWORD *)off_1EF8EEB50(&off_1EF8EEB50);
    if (v82)
      sub_1C6392DC0(v82);
  }
}

void sub_1C5906298(_QWORD *a1, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)a1[1];
  v4 = ((uint64_t)v3 - *a1) >> 3;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 8 * a2;
      while (v3 != (_QWORD *)v5)
      {
        v7 = *--v3;
        v6 = v7;
        *v3 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      a1[1] = v5;
    }
  }
  else
  {
    sub_1C590A05C((uint64_t)a1, a2 - v4);
  }
}

void sub_1C590631C(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[8] = 0;
}

void sub_1C5906334(uint64_t a1)
{
  sub_1C59074A4(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C590635C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5906370(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, *(_QWORD *)(a1 + 16));
}

uint64_t sub_1C5906388(uint64_t a1, uint64_t a2, void *__src, size_t __len, int a5)
{
  void *v9;
  _QWORD *v10;
  uint64_t *v11;
  void *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = (void *)(a1 + 48);
  *(_QWORD *)(a1 + 24) = a1 + 48;
  v10 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &off_1E81A1708;
  *(_QWORD *)(a1 + 32) = 0;
  v11 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  if (*(_QWORD *)(a2 + 8))
    sub_1C4FE6ED8(a1 + 24, a2);
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v13 = __len | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    *(_QWORD *)(a1 + 56) = __len;
    *(_QWORD *)(a1 + 64) = v14 | 0x8000000000000000;
    *(_QWORD *)(a1 + 48) = v12;
    goto LABEL_10;
  }
  *(_BYTE *)(a1 + 71) = __len;
  v12 = v9;
  if (__len)
LABEL_10:
    memmove(v12, __src, __len);
  *((_BYTE *)v12 + __len) = 0;
  if (a5)
  {
    v15 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)(v15 + 1) > *(_QWORD *)(a1 + 40))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v10, v9, v15 + 1, 1);
      v15 = *v11;
    }
    *(_BYTE *)(*v10 + v15) = 0;
  }
  v16 = *(_QWORD *)(a1 + 24);
  v17 = v16 + *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v17;
  return a1;
}

void sub_1C59064BC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C59064D0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E817EE18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C5906510(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817EE18;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C5906538(uint64_t a1)
{
  signed int v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  const void *v7;
  unint64_t v8;
  unint64_t v9;
  llvm::Module *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  unint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  llvm *v21;
  void *__p[2];
  char v23;
  llvm::LLVMContextImpl *v24;

  v2 = *(_DWORD *)(a1 + 32);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v24);
  *((_BYTE *)v24 + 2664) = byte_1ED834048;
  v5 = *(_BYTE *)(v4 + 727);
  v6 = v5;
  if (v5 >= 0)
    v7 = (const void *)(v4 + 704);
  else
    v7 = *(const void **)(v4 + 704);
  v8 = v5 & 0x7F;
  if (v6 >= 0)
    v9 = v8;
  else
    v9 = *(_QWORD *)(v4 + 712);
  llvm::ThinLTOCodeGenerator::computeThinLTOOutputPath(v2, v7, v9, (llvm::Triple *)(v4 + 8), __p);
  llvm::ThinLTOCodeGenerator::loadModuleFromInput(**(__int128 ****)(a1 + 16), (llvm::LLVMContext *)&v24, 0, 0, &v21);
  v10 = v21;
  llvm::TargetMachineBuilder::create((llvm::TargetMachineBuilder *)(v4 + 8), (uint64_t *)&v18);
  v11 = v18;
  sub_1C5902774(v10, v18, &v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (!**(_BYTE **)(a1 + 24))
  {
    if (v23 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    if (v23 >= 0)
      v15 = v23 & 0x7F;
    else
      v15 = (unint64_t)__p[1];
    v13 = v20;
    llvm::ThinLTOCodeGenerator::writeGeneratedObject(v14, v15, 0, v20, &v18);
    v16 = *(_QWORD *)(v4 + 448) + 24 * (int)v3;
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
    *(_OWORD *)v16 = v18;
    *(_QWORD *)(v16 + 16) = v19;
    goto LABEL_19;
  }
  v12 = *(_QWORD *)(v4 + 424);
  v13 = *(_QWORD *)(v12 + 8 * v3);
  *(_QWORD *)(v12 + 8 * v3) = v20;
  if (v13)
LABEL_19:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  llvm::Module::~Module(v10);
  MEMORY[0x1CAA32FC0]();
  if (v23 < 0)
    operator delete(__p[0]);
  llvm::LLVMContext::~LLVMContext(&v24, v17);
}

void sub_1C59066E8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C59066FC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = &off_1E817EE60;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C590675C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_1E817EE60;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_1C59067A4(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  size_t v12;
  size_t v13;
  size_t *v14;
  char v15;
  int v16;
  const void *v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::LLVMContextImpl *v40;
  size_t v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  llvm *v47;
  uint64_t v48;
  llvm::Module *v49;
  char v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  BOOL v60;
  uint64_t v61;
  llvm::Module *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  unint64_t v68;
  uint64_t v69;
  llvm::raw_ostream *v70;
  llvm::raw_ostream *v71;
  _DWORD *v72;
  char *v73;
  std::string::size_type v74;
  std::string *v75;
  size_t size;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  std::string::size_type v80;
  llvm::Value *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const llvm::Module *v87;
  llvm::LLVMContextImpl *v88;
  std::string v89;
  unsigned __int8 **v90;
  void *__p[2];
  char v92;
  void (***v93)(void **__return_ptr, _QWORD);
  void *v94;
  size_t v95;
  char v96;
  unsigned __int8 *v97;
  size_t v98;
  unsigned int v99;
  char *v100;
  char v101;
  char v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 96);
  v99 = v2;
  v4 = *(uint64_t **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = *v4;
  v8 = *(unsigned __int8 **)(v5 + 224);
  v6 = v5 + 224;
  v7 = v8;
  v9 = *(_BYTE *)(v6 + 23);
  v10 = *(_QWORD *)(a1 + 32);
  if (v9 >= 0)
    v11 = (unsigned __int8 *)v6;
  else
    v11 = v7;
  v12 = *(_QWORD *)(v6 + 8);
  if (v9 >= 0)
    v13 = v9 & 0x7F;
  else
    v13 = v12;
  v97 = v11;
  v98 = v13;
  v14 = *sub_1C6292894(v3, v11, v13) + 1;
  v84 = *sub_1C62B21C4(*(_QWORD *)(a1 + 24), v11, v13) + 8;
  v15 = *(_BYTE *)(v10 + 727);
  v16 = v15;
  if (v15 >= 0)
    v17 = (const void *)(v10 + 704);
  else
    v17 = *(const void **)(v10 + 704);
  v18 = v15 & 0x7F;
  if (v16 >= 0)
    v19 = v18;
  else
    v19 = *(_QWORD *)(v10 + 712);
  v20 = &v94;
  llvm::ThinLTOCodeGenerator::computeThinLTOOutputPath(v2, v17, v19, (llvm::Triple *)(v10 + 8), &v94);
  v21 = **(_QWORD **)(a1 + 40);
  if (v96 >= 0)
  {
    v22 = v96 & 0x7F;
  }
  else
  {
    v20 = v94;
    v22 = v95;
  }
  v23 = *sub_1C56D84B0(*(llvm::StringMapImpl **)(a1 + 48), v11, v13) + 8;
  v24 = sub_1C58EDD20(*(llvm::StringMapImpl **)(a1 + 56), v11, v13);
  v25 = a1;
  v26 = v20;
  v27 = (uint64_t)v14;
  llvm::ThinLTOCodeGenerator::createModuleCacheEntry(v10, v21, v11, v13, v26, v22, v23, (uint64_t)v14, (uint64_t *)&v93, (_QWORD *)(*v24 + 8), v84, *(_DWORD *)(v10 + 732), *(_BYTE *)(v10 + 730), v10 + 8);
  v28 = (uint64_t)v93;
  (**v93)(__p, v93);
  if (byte_1ED819440)
  {
    v29 = *(_QWORD *)(a1 + 64);
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
    sub_1C5906F9C(v29, (void (*)(uint64_t, _QWORD))sub_1C5907048, (uint64_t)&v89);
  }
  (*(void (**)(char **__return_ptr, uint64_t))(*(_QWORD *)v28 + 8))(&v100, v28);
  if (byte_1ED819440)
  {
    v30 = *(_QWORD *)(a1 + 64);
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
    v89.__r_.__value_.__l.__size_ = (std::string::size_type)__p;
    v89.__r_.__value_.__r.__words[2] = (std::string::size_type)&v99;
    v90 = &v97;
    sub_1C5906F9C(v30, (void (*)(uint64_t, _QWORD))sub_1C5907138, (uint64_t)&v89);
  }
  v31 = v102;
  if ((v102 & 1) != 0)
    goto LABEL_121;
  if (**(_BYTE **)(a1 + 72))
  {
    v32 = *(_QWORD *)(v10 + 424);
    v33 = (uint64_t)v100;
    v100 = 0;
    v34 = *(_QWORD *)(v32 + 8 * (int)v99);
    *(_QWORD *)(v32 + 8 * (int)v99) = v33;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  else
  {
    if (v96 >= 0)
      v35 = &v94;
    else
      v35 = v94;
    if (v96 >= 0)
      v36 = v96 & 0x7F;
    else
      v36 = v95;
    llvm::ThinLTOCodeGenerator::writeGeneratedObject(v35, v36, v28, (uint64_t)v100, &v89);
    v37 = *(_QWORD *)(v10 + 448) + 24 * (int)v99;
    if (*(char *)(v37 + 23) < 0)
      operator delete(*(void **)v37);
    *(std::string *)v37 = v89;
  }
  v31 = v102;
  if (byte_1ED819500)
  {
LABEL_121:
    if ((v31 & 1) == 0)
    {
      v39 = (uint64_t)v100;
      v100 = 0;
      if (v39)
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    }
    llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v88);
    v40 = v88;
    *((_BYTE *)v88 + 2664) = byte_1ED834048;
    if (!*((_BYTE *)v40 + 1184))
    {
      sub_1C6240860((uint64_t)v40 + 1160);
      *((_DWORD *)v40 + 294) = 0;
      *(_OWORD *)((char *)v40 + 1160) = 0u;
      *((_BYTE *)v40 + 1184) = 1;
    }
    if (byte_1ED8344B7 >= 0)
      v41 = byte_1ED8344B7 & 0x7F;
    else
      v41 = qword_1ED8344A8;
    if (byte_1ED8344B7 >= 0)
      v42 = &qword_1ED8344A0;
    else
      v42 = (uint64_t *)qword_1ED8344A0;
    if (byte_1ED83459F >= 0)
      v43 = byte_1ED83459F & 0x7F;
    else
      v43 = qword_1ED834590;
    if (byte_1ED83459F >= 0)
      v44 = (char *)&qword_1ED834588;
    else
      v44 = (char *)qword_1ED834588;
    if (byte_1ED834687 >= 0)
      v45 = byte_1ED834687 & 0x7F;
    else
      v45 = qword_1ED834678;
    if (byte_1ED834687 >= 0)
      v46 = &qword_1ED834670;
    else
      v46 = (uint64_t *)qword_1ED834670;
    llvm::lto::setupLLVMOptimizationRemarks(v42, v41, (uint64_t *)&v88, v44, v43, (uint64_t)v46, v45, byte_1ED8341C8, (uint64_t)&v100, qword_1ED834288, *(uint64_t *)&byte_1ED834290, v99);
    if ((v101 & 1) != 0)
    {
      v70 = (llvm::raw_ostream *)llvm::errs(v47);
      v71 = v70;
      v72 = (_DWORD *)*((_QWORD *)v70 + 4);
      if (*((_QWORD *)v70 + 3) - (_QWORD)v72 > 6uLL)
      {
        *(_DWORD *)((char *)v72 + 3) = 540701295;
        *v72 = 1869771333;
        *((_QWORD *)v70 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v70, "Error: ", 7uLL);
      }
      if ((v101 & 1) != 0)
      {
        v73 = v100;
        v100 = 0;
      }
      else
      {
        v73 = 0;
      }
      v87 = (const llvm::Module *)v73;
      sub_1C61D2548((char **)&v87, &v89);
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = &v89;
      else
        v75 = (std::string *)v89.__r_.__value_.__r.__words[0];
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v89.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v89.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v71, (const char *)v75, size);
      v77 = (_BYTE *)*((_QWORD *)v71 + 4);
      if (*((_BYTE **)v71 + 3) == v77)
      {
        llvm::raw_ostream::write(v71, "\n", 1uLL);
      }
      else
      {
        *v77 = 10;
        ++*((_QWORD *)v71 + 4);
      }
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      if (v87)
        (*(void (**)(const llvm::Module *))(*(_QWORD *)v87 + 8))(v87);
      llvm::report_fatal_error((llvm *)"ThinLTO: Can't get an output file for the remarks", (const char *)1);
    }
    llvm::ThinLTOCodeGenerator::loadModuleFromInput(**(__int128 ****)(v25 + 8), (llvm::LLVMContext *)&v88, 0, 0, &v87);
    v49 = v87;
    v50 = *(_BYTE *)(v10 + 703);
    v51 = v50;
    if (v50 >= 0)
      v52 = v10 + 680;
    else
      v52 = *(_QWORD *)(v10 + 680);
    v53 = v50 & 0x7F;
    if (v51 >= 0)
      v54 = v53;
    else
      v54 = *(_QWORD *)(v10 + 688);
    llvm::ThinLTOCodeGenerator::saveTempBitcode(v48, v87, v52, v54, v99, (uint64_t)".0.original.bc", 14);
    v85 = *sub_1C56D84B0(*(llvm::StringMapImpl **)(v25 + 48), v97, v98) + 8;
    v83 = **(_QWORD **)(v25 + 40);
    v55 = *(_QWORD *)(v25 + 80);
    llvm::TargetMachineBuilder::create((llvm::TargetMachineBuilder *)(v10 + 8), (uint64_t *)&v89);
    v56 = v89.__r_.__value_.__r.__words[0];
    v57 = *(_QWORD *)(v25 + 88);
    v58 = *sub_1C62B21C4(*(_QWORD *)(v25 + 24), v97, v98) + 8;
    v59 = *(_BYTE *)(v10 + 703);
    v60 = v59 < 0;
    if (v59 >= 0)
      v61 = v10 + 680;
    else
      v61 = *(_QWORD *)(v10 + 680);
    v62 = v49;
    v63 = *(_QWORD *)(v10 + 688);
    v64 = v59 & 0x7F;
    if (!v60)
      v63 = v64;
    llvm::ThinLTOCodeGenerator::ProcessThinLTOModule(v49, v10, v83, v55, v56, v85, v27, v57, &v86, v58, v82, *(_BYTE *)(v10 + 728), v61, v63, *(_BYTE *)(v10 + 730), *(_DWORD *)(v10 + 732), v99, *(_BYTE *)(v10 + 736));
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    if (byte_1ED819440)
    {
      v65 = *(_QWORD *)(v25 + 64);
      v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
      sub_1C5906F9C(v65, (void (*)(uint64_t, _QWORD))sub_1C59073B4, (uint64_t)&v89);
    }
    v66 = v86;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v86);
    if (**(_BYTE **)(v25 + 72))
    {
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v28 + 40))(&v89, v28);
      if (v89.__r_.__value_.__s.__data_[8])
      {
        v74 = v89.__r_.__value_.__r.__words[0];
        v89.__r_.__value_.__r.__words[0] = 0;
        if (v66)
          (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
      }
      else
      {
        v74 = v66;
      }
      v78 = *(_QWORD *)(v10 + 424);
      v79 = *(_QWORD *)(v78 + 8 * (int)v99);
      *(_QWORD *)(v78 + 8 * (int)v99) = v74;
      if (v79)
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
      if (v89.__r_.__value_.__s.__data_[8])
      {
        v80 = v89.__r_.__value_.__r.__words[0];
        v89.__r_.__value_.__r.__words[0] = 0;
        if (v80)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v80 + 8))(v80);
      }
    }
    else
    {
      if (v96 >= 0)
        v67 = &v94;
      else
        v67 = v94;
      if (v96 >= 0)
        v68 = v96 & 0x7F;
      else
        v68 = v95;
      llvm::ThinLTOCodeGenerator::writeGeneratedObject(v67, v68, v28, v66, &v89);
      v69 = *(_QWORD *)(v10 + 448) + 24 * (int)v99;
      if (*(char *)(v69 + 23) < 0)
        operator delete(*(void **)v69);
      *(std::string *)v69 = v89;
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
    }
    llvm::Module::~Module(v62);
    MEMORY[0x1CAA32FC0]();
    sub_1C62B2694((uint64_t)&v100);
    llvm::LLVMContext::~LLVMContext(&v88, v81);
  }
  else if ((v102 & 1) == 0)
  {
    v38 = (uint64_t)v100;
    v100 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  if (v92 < 0)
    operator delete(__p[0]);
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 56))(v28);
  if (v96 < 0)
    operator delete(v94);
}

void sub_1C5906F9C(uint64_t a1, void (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  std::chrono::system_clock::time_point v6;
  llvm::raw_ostream *v7;
  _WORD *v8;
  llvm::raw_ostream *v9;
  const char *v10;
  const char *v11;

  std::mutex::lock((std::mutex *)a1);
  v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v7 = llvm::operator<<(*(llvm::raw_ostream **)(a1 + 64), 1000 * v6.__d_.__rep_);
  v8 = (_WORD *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 8250;
    *((_QWORD *)v7 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v7, ": ", 2uLL);
  }
  a2(a3, *(_QWORD *)(a1 + 64));
  v9 = *(llvm::raw_ostream **)(a1 + 64);
  v10 = (const char *)*((_QWORD *)v9 + 4);
  v11 = (const char *)*((_QWORD *)v9 + 2);
  if (v10 != v11)
  {
    *((_QWORD *)v9 + 4) = v11;
    llvm::raw_ostream::flush_tied_then_write(v9, v11, v10 - v11);
  }
  std::mutex::unlock((std::mutex *)a1);
}

llvm::raw_ostream *sub_1C5907048(const void ***a1, llvm::raw_ostream *this)
{
  void *v4;
  llvm::raw_ostream *result;
  const void *v6;
  size_t v7;

  v4 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0x17uLL)
  {
    qmemcpy(v4, "Look up cache entry for ", 24);
    result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + 24);
    *((_QWORD *)this + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(this, "Look up cache entry for ", 0x18uLL);
    result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  }
  v6 = **a1;
  v7 = (size_t)(*a1)[1];
  if (v7 <= *((_QWORD *)this + 3) - (_QWORD)result)
  {
    if (v7)
    {
      memcpy(result, v6, v7);
      result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + v7);
      *((_QWORD *)this + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)v6, v7);
    result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  }
  if (*((llvm::raw_ostream **)this + 3) == result)
    return llvm::raw_ostream::write(this, "\n", 1uLL);
  *(_BYTE *)result = 10;
  ++*((_QWORD *)this + 4);
  return result;
}

llvm::raw_ostream *sub_1C5907138(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v4;
  void *v5;
  const char *v6;
  size_t v7;
  _WORD *v8;
  uint64_t v9;
  char v10;
  const char *v11;
  size_t v12;
  void *v13;
  unint64_t v14;
  llvm::raw_ostream *v15;
  int v16;
  _BYTE *v17;
  llvm::raw_ostream *result;
  uint64_t v19;
  const void *v20;
  size_t v21;

  v4 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v4) > 5)
  {
    *(_WORD *)(v4 + 4) = 8293;
    *(_DWORD *)v4 = 1751343427;
    v5 = (void *)(*((_QWORD *)this + 4) + 6);
    *((_QWORD *)this + 4) = v5;
  }
  else
  {
    llvm::raw_ostream::write(this, "Cache ", 6uLL);
    v5 = (void *)*((_QWORD *)this + 4);
  }
  if ((*(_BYTE *)(*(_QWORD *)a1 + 16) & 1) != 0)
    v6 = "miss";
  else
    v6 = "hit";
  if ((*(_BYTE *)(*(_QWORD *)a1 + 16) & 1) != 0)
    v7 = 4;
  else
    v7 = 3;
  if (v7 <= *((_QWORD *)this + 3) - (_QWORD)v5)
  {
    memcpy(v5, v6, v7);
    v8 = (_WORD *)(*((_QWORD *)this + 4) + v7);
    *((_QWORD *)this + 4) = v8;
  }
  else
  {
    llvm::raw_ostream::write(this, v6, v7);
    v8 = (_WORD *)*((_QWORD *)this + 4);
  }
  if (*((_QWORD *)this + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 10016;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, " '", 2uLL);
  }
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(v9 + 23);
  if (v10 >= 0)
    v11 = *(const char **)(a1 + 8);
  else
    v11 = *(const char **)v9;
  if (v10 >= 0)
    v12 = v10 & 0x7F;
  else
    v12 = *(_QWORD *)(v9 + 8);
  llvm::raw_ostream::write(this, v11, v12);
  v13 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v13 > 0xCuLL)
  {
    qmemcpy(v13, "' for buffer ", 13);
    *((_QWORD *)this + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(this, "' for buffer ", 0xDuLL);
  }
  v14 = **(int **)(a1 + 16);
  if ((v14 & 0x80000000) != 0)
  {
    v14 = -(uint64_t)v14;
    v15 = this;
    v16 = 1;
  }
  else
  {
    v15 = this;
    v16 = 0;
  }
  sub_1C5E21910(v15, v14, 0, 0, v16);
  v17 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v17)
  {
    llvm::raw_ostream::write(this, " ", 1uLL);
    result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  }
  else
  {
    *v17 = 32;
    result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + 1);
    *((_QWORD *)this + 4) = result;
  }
  v19 = *(_QWORD *)(a1 + 24);
  v20 = *(const void **)v19;
  v21 = *(_QWORD *)(v19 + 8);
  if (v21 <= *((_QWORD *)this + 3) - (_QWORD)result)
  {
    if (v21)
    {
      memcpy(result, v20, v21);
      result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + v21);
      *((_QWORD *)this + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)v20, v21);
    result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  }
  if (*((llvm::raw_ostream **)this + 3) == result)
    return llvm::raw_ostream::write(this, "\n", 1uLL);
  *(_BYTE *)result = 10;
  ++*((_QWORD *)this + 4);
  return result;
}

llvm::raw_ostream *sub_1C59073B4(const void ***a1, llvm::raw_ostream *this)
{
  void *v4;
  llvm::raw_ostream *result;
  const void *v6;
  size_t v7;

  v4 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0x18uLL)
  {
    qmemcpy(v4, "Update cached result for ", 25);
    result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + 25);
    *((_QWORD *)this + 4) = result;
  }
  else
  {
    llvm::raw_ostream::write(this, "Update cached result for ", 0x19uLL);
    result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  }
  v6 = **a1;
  v7 = (size_t)(*a1)[1];
  if (v7 <= *((_QWORD *)this + 3) - (_QWORD)result)
  {
    if (v7)
    {
      memcpy(result, v6, v7);
      result = (llvm::raw_ostream *)(*((_QWORD *)this + 4) + v7);
      *((_QWORD *)this + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)v6, v7);
    result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
  }
  if (*((llvm::raw_ostream **)this + 3) == result)
    return llvm::raw_ostream::write(this, "\n", 1uLL);
  *(_BYTE *)result = 10;
  ++*((_QWORD *)this + 4);
  return result;
}

uint64_t sub_1C59074A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void **v8;

  *(_QWORD *)a1 = &off_1E817EDC0;
  if (*(char *)(a1 + 727) < 0)
    operator delete(*(void **)(a1 + 704));
  if (*(char *)(a1 + 703) < 0)
    operator delete(*(void **)(a1 + 680));
  if (*(_BYTE *)(a1 + 672))
  {
    v2 = *(_QWORD *)(a1 + 664);
    *(_QWORD *)(a1 + 664) = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    v3 = *(_QWORD *)(a1 + 656);
    *(_QWORD *)(a1 + 656) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    *(_BYTE *)(a1 + 672) = 0;
  }
  v4 = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 648) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  v5 = *(_QWORD *)(a1 + 640);
  *(_QWORD *)(a1 + 640) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 128))(v5);
  if (*(char *)(a1 + 583) < 0)
    operator delete(*(void **)(a1 + 560));
  sub_1C4F02264(a1 + 528);
  sub_1C4F02264(a1 + 496);
  v6 = *(_QWORD **)(a1 + 472);
  if (v6)
  {
    sub_1C59075F8(a1 + 472, v6);
    operator delete(*(void **)(a1 + 472));
  }
  v8 = (void **)(a1 + 448);
  sub_1C4765410(&v8);
  v8 = (void **)(a1 + 424);
  sub_1C4764BBC(&v8);
  sub_1C48433E8(a1 + 104);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1C59075F8(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *--v4;
    result = v5;
    *v4 = 0;
    if (v5)
    {
      llvm::lto::InputFile::~InputFile((void **)result);
      result = MEMORY[0x1CAA32FC0]();
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

_QWORD *sub_1C590765C(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *i;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v25;

  v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v25[16] = 2;
    *(_QWORD *)a1 = v25;
    v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v6 = 0;
  if (__n)
  {
    v7 = __n;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = *(_QWORD *)a1;
  v11 = v5 - 1;
  v12 = *(_QWORD *)a1 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && __n == *v17
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_20:
  i = (_QWORD *)(v10 + 8 * v16);
  if (v17 == (_QWORD *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v17)
  {
    return i;
  }
  v20 = operator new(__n + 17, (std::align_val_t)8uLL);
  v21 = v20;
  v22 = (char *)(v20 + 2);
  if (__n)
    memcpy(v20 + 2, a2, __n);
  v22[__n] = 0;
  *v21 = __n;
  v21[1] = 0;
  *i = v21;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*i || *i == -8;
  return i;
}

uint64_t sub_1C5907858(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  size_t v8;
  const void *v9;
  llvm *v10;
  void **v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  void *__p[2];
  char v21;
  _QWORD v22[2];
  void *v23[2];
  unint64_t v24;
  uint64_t v25;
  int v26;
  void *v27[2];
  unint64_t v28;
  void *v29[2];
  void *v30[2];
  __int128 v31;
  char *v32[2];
  _QWORD v33[21];

  v33[20] = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  v7 = *a2;
  *a2 = 0;
  if (!(_DWORD)result)
  {
    *a1 = v7;
    return result;
  }
  v9 = *(const void **)(*(_QWORD *)a3 + 16);
  v8 = *(_QWORD *)(*(_QWORD *)a3 + 24);
  v10 = (llvm *)(*(_QWORD *(**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 24))(__p, v7);
  if (v21 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v21 >= 0)
    v12 = v21 & 0x7F;
  else
    v12 = (size_t)__p[1];
  v22[0] = 0;
  v22[1] = 0;
  if (v8 > 0x7FFFFFFFFFFFFFF7)
LABEL_36:
    abort();
  if (v8 >= 0x17)
  {
    v14 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v14 = v8 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    v23[1] = (void *)v8;
    v24 = v15 | 0x8000000000000000;
    v23[0] = v13;
    goto LABEL_16;
  }
  v13 = v23;
  HIBYTE(v24) = v8;
  if (v8)
LABEL_16:
    v10 = (llvm *)memmove(v13, v9, v8);
  *((_BYTE *)v13 + v8) = 0;
  v25 = -1;
  v26 = 0;
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_36;
  if (v12 >= 0x17)
  {
    v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v17 = v12 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    v27[1] = (void *)v12;
    v28 = v18 | 0x8000000000000000;
    v27[0] = v16;
  }
  else
  {
    v16 = v27;
    HIBYTE(v28) = v12;
    if (!v12)
      goto LABEL_25;
  }
  v10 = (llvm *)memmove(v16, v11, v12);
LABEL_25:
  *((_BYTE *)v16 + v12) = 0;
  v31 = 0u;
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)v29 = 0u;
  v32[0] = (char *)v33;
  v32[1] = (char *)0x400000000;
  if (v21 < 0)
    operator delete(__p[0]);
  v19 = (llvm::raw_ostream *)llvm::errs(v10);
  llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v22, "ThinLTO", v19, 1, 1);
  sub_1C4FAD100(v32);
  if (v30[1])
  {
    *(void **)&v31 = v30[1];
    operator delete(v30[1]);
  }
  if (SHIBYTE(v30[0]) < 0)
    operator delete(v29[0]);
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  *a1 = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

void sub_1C5907AE0()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5907AF4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E817EEA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C5907B34(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817EEA8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C5907B5C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;

  v5 = sub_1C590765C(*(llvm::StringMapImpl **)(a1 + 8), *(unsigned __int8 **)a2, *(_QWORD *)(a2 + 8));
  llvm::ThinLTOCodeGenerator::loadModuleFromInput(*(__int128 ***)(*v5 + 8), **(llvm::LLVMContext ***)(a1 + 24), 1, 1, (llvm **)a3);
  *(_BYTE *)(a3 + 8) &= ~1u;
}

uint64_t sub_1C5907BB8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  const void *v9;
  size_t v10;
  llvm *v11;
  void **v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  void *__p[2];
  char v22;
  _QWORD v23[2];
  void *v24[2];
  unint64_t v25;
  uint64_t v26;
  int v27;
  void *v28[2];
  unint64_t v29;
  void *v30[2];
  void *v31[2];
  __int128 v32;
  char *v33[2];
  _QWORD v34[21];

  v34[20] = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  v7 = *a2;
  *a2 = 0;
  if (!(_DWORD)result)
  {
    *a1 = v7;
    return result;
  }
  v8 = *(_BYTE *)(*(_QWORD *)a3 + 191);
  if (v8 >= 0)
    v9 = (const void *)(*(_QWORD *)a3 + 168);
  else
    v9 = *(const void **)(*(_QWORD *)a3 + 168);
  if (v8 >= 0)
    v10 = v8 & 0x7F;
  else
    v10 = *(_QWORD *)(*(_QWORD *)a3 + 176);
  v11 = (llvm *)(*(_QWORD *(**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 24))(__p, v7);
  if (v22 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (v22 >= 0)
    v13 = v22 & 0x7F;
  else
    v13 = (size_t)__p[1];
  v23[0] = 0;
  v23[1] = 0;
  if (v10 > 0x7FFFFFFFFFFFFFF7)
LABEL_42:
    abort();
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    v24[1] = (void *)v10;
    v25 = v16 | 0x8000000000000000;
    v24[0] = v14;
    goto LABEL_22;
  }
  v14 = v24;
  HIBYTE(v25) = v10;
  if (v10)
LABEL_22:
    v11 = (llvm *)memmove(v14, v9, v10);
  *((_BYTE *)v14 + v10) = 0;
  v26 = -1;
  v27 = 0;
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_42;
  if (v13 >= 0x17)
  {
    v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v18 = v13 | 7;
    v19 = v18 + 1;
    v17 = operator new(v18 + 1);
    v28[1] = (void *)v13;
    v29 = v19 | 0x8000000000000000;
    v28[0] = v17;
  }
  else
  {
    v17 = v28;
    HIBYTE(v29) = v13;
    if (!v13)
      goto LABEL_31;
  }
  v11 = (llvm *)memmove(v17, v12, v13);
LABEL_31:
  *((_BYTE *)v17 + v13) = 0;
  v32 = 0u;
  *(_OWORD *)v31 = 0u;
  *(_OWORD *)v30 = 0u;
  v33[0] = (char *)v34;
  v33[1] = (char *)0x400000000;
  if (v22 < 0)
    operator delete(__p[0]);
  v20 = (llvm::raw_ostream *)llvm::errs(v11);
  llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v23, "ThinLTO", v20, 1, 1);
  sub_1C4FAD100(v33);
  if (v31[1])
  {
    *(void **)&v32 = v31[1];
    operator delete(v31[1]);
  }
  if (SHIBYTE(v31[0]) < 0)
    operator delete(v30[0]);
  if (SHIBYTE(v29) < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v25) < 0)
    operator delete(v24[0]);
  *a1 = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

void sub_1C5907E5C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5907E70()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E817EEF0;
  return result;
}

void sub_1C5907E94(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817EEF0;
}

uint64_t sub_1C5907EAC()
{
  return 0;
}

BOOL sub_1C5907EB4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v7;

  v7 = a2;
  v5 = sub_1C5309DE0(*a1, &v7);
  return (uint64_t *)(**a1 + 16 * *((unsigned int *)*a1 + 4)) == v5 || v5[1] == a3;
}

uint64_t **sub_1C5907F18(llvm::StringMapImpl **a1, unsigned __int8 *a2, size_t a3, unint64_t a4, int a5)
{
  uint64_t **v6;
  uint64_t **result;
  unint64_t v8;
  uint64_t **v9;

  v8 = a4;
  v6 = (uint64_t **)(*sub_1C58EDD20(*a1, a2, a3) + 8);
  v9 = (uint64_t **)&v8;
  result = sub_1C58F1BF8(v6, &v8, (uint64_t)&std::piecewise_construct, &v9);
  *((_DWORD *)result + 10) = a5;
  return result;
}

uint64_t sub_1C5907F74(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, unsigned __int8 *__s1, size_t __n, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, int a11, char a12, uint64_t a13)
{
  _QWORD *v14;
  void **v18;
  __int16 v19;
  _QWORD *v20;
  __int16 v21;
  void *__p;
  char v23;
  void **p_p;
  __int16 v25;
  _QWORD *v26[4];
  __int16 v27;
  void *v28;
  char v29;
  char v30;

  *(_QWORD *)a1 = &off_1E817EF38;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  v14 = (_QWORD *)(a1 + 8);
  *(_OWORD *)(a1 + 16) = xmmword_1C85F20B0;
  if (a3)
  {
    llvm::ModuleCacheEntry::computeCacheKey(__s1, __n, a4, a7, a8, a9, a10, (uint64_t)&v28, a11, a12, a13);
    if (v30)
    {
      v27 = 261;
      v26[0] = a2;
      v26[1] = a3;
      std::operator+<char>();
      v25 = 260;
      p_p = &__p;
      v21 = 257;
      v19 = 257;
      llvm::sys::path::append(v14, 0, v26, &p_p, &v20, &v18);
      if (v23 < 0)
        operator delete(__p);
      if (v30 && v29 < 0)
        operator delete(v28);
    }
  }
  return a1;
}

_QWORD *sub_1C59080A4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = (_QWORD *)a2;
  v3 = (const void *)result[1];
  if (!v3)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return result;
  }
  v4 = result[2];
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v4 >= 0x17)
  {
    v5 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v5 = v4 | 7;
    v6 = v5 + 1;
    v7 = operator new(v5 + 1);
    v2[1] = v4;
    v2[2] = v6 | 0x8000000000000000;
    *v2 = v7;
    v2 = v7;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = v4;
    if (!v4)
      goto LABEL_11;
  }
  result = memmove(v2, v3, v4);
LABEL_11:
  *((_BYTE *)v2 + v4) = 0;
  return result;
}

void sub_1C5908148(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  llvm::sys::Process *v5;
  uint64_t v6;
  const std::error_category *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  int v14[2];
  char v15;
  void *v16;
  __int128 v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v16 = v18;
    v17 = xmmword_1C64638C0;
    v13 = 261;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = v3;
    llvm::sys::fs::openNativeFileForRead((unsigned __int8 *)&v11, 32, &v16, (uint64_t)v14);
    if ((v15 & 1) != 0)
    {
      v10 = *(_QWORD **)v14;
      v8 = llvm::errorToErrorCode(&v10);
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v8;
      *(_QWORD *)(a2 + 8) = v9;
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
    else
    {
      v5 = (llvm::sys::Process *)v14[0];
      v13 = 261;
      v6 = *(_QWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 8);
      v12 = v6;
      sub_1C5E1FFD0(v14[0], (uint64_t)&v11, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 0, a2);
      llvm::sys::Process::SafelyCloseFileDescriptor(v5);
    }
    if (v16 != v18)
      free(v16);
  }
  else
  {
    v7 = std::system_category();
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v7;
  }
}

void sub_1C5908294(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _DWORD **v6;
  _DWORD **v7;
  _QWORD *v8;
  _DWORD *v9;
  _QWORD *v10;
  void **v11;
  __int16 v12;
  _QWORD *v13[4];
  __int16 v14;
  _QWORD *v15[4];
  __int16 v16;
  _QWORD *v17[4];
  __int16 v18;
  void *v19;
  __int128 v20;
  _BYTE v21[128];
  _QWORD *v22;
  __int128 v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 16))
    return;
  v22 = v24;
  v23 = xmmword_1C85F20B0;
  v19 = v21;
  v20 = xmmword_1C85F20B0;
  sub_1C50502AC((uint64_t)&v19, a1 + 8);
  v4 = (_QWORD *)sub_1C5E7BE8C((unsigned __int8 *)v19, v20, 0);
  if (v4 == (_QWORD *)-1)
    v4 = (_QWORD *)v20;
  else
    *(_QWORD *)&v20 = v4;
  v18 = 261;
  v17[0] = v19;
  v17[1] = v4;
  v15[0] = "Thin-%%%%%%.tmp.o";
  v16 = 259;
  v14 = 257;
  v12 = 257;
  llvm::sys::path::append(&v22, 0, v17, v15, v13, &v11);
  llvm::writeFileAtomically(v22, v23, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8), (uint64_t *)&v10);
  v5 = v10;
  if (v10)
  {
    v10 = 0;
    if ((*(unsigned int (**)(_QWORD *, void *))(*v5 + 48))(v5, &llvm::ErrorList::ID))
    {
      v6 = (_DWORD **)v5[1];
      v7 = (_DWORD **)v5[2];
      if (v6 != v7)
      {
        v8 = 0;
        do
        {
          v15[0] = v8;
          v9 = *v6;
          *v6 = 0;
          if ((*(unsigned int (**)(_DWORD *, void *))(*(_QWORD *)v9 + 48))(v9, &llvm::AtomicFileWriteError::ID))
          {
            sub_1C5908B94(v9);
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
            v9 = 0;
          }
          v13[0] = v9;
          sub_1C6174794((char **)v15, (char **)v13, v17);
          v8 = v17[0];
          v17[0] = 0;
          if (v13[0])
            (*(void (**)(_QWORD *))(*v13[0] + 8))(v13[0]);
          if (v15[0])
            (*(void (**)(_QWORD *))(*v15[0] + 8))(v15[0]);
          ++v6;
        }
        while (v6 != v7);
        goto LABEL_20;
      }
    }
    else
    {
      if (!(*(unsigned int (**)(_QWORD *, void *))(*v5 + 48))(v5, &llvm::AtomicFileWriteError::ID))
      {
LABEL_21:
        if (v10)
          (*(void (**)(_QWORD *))(*v10 + 8))(v10);
        if (v5)
        {
          v15[0] = v5;
          sub_1C4D62BD4((char **)v15, (char **)v17);
          if (v15[0])
            (*(void (**)(_QWORD *))(*v15[0] + 8))(v15[0]);
        }
        goto LABEL_26;
      }
      sub_1C5908B94(v5);
    }
    v8 = 0;
LABEL_20:
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    v5 = v8;
    goto LABEL_21;
  }
LABEL_26:
  if (v19 != v21)
    free(v19);
  if (v22 != v24)
    free(v22);
}

void sub_1C5908534(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, size_t a4@<X3>, _QWORD *a5@<X8>)
{
  const llvm::Twine *v10;
  const void *v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  const llvm::Twine *v16;
  llvm *v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  void *v20;
  const char *v21;
  size_t v22;
  uint64_t v23;
  _WORD *v24;
  _BYTE *v25;
  size_t v26;
  __int16 v27;
  void **__dst;
  size_t v29;
  int64_t v30;
  _QWORD v31[4];
  __int16 v32;

  v32 = 261;
  v31[0] = a3;
  v31[1] = a4;
  llvm::sys::fs::remove((llvm::sys::fs *)v31, (const llvm::Twine *)1);
  v11 = *(const void **)(a1 + 8);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 16);
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v12 >= 0x17)
    {
      v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v14 = v12 | 7;
      v15 = v14 + 1;
      p_dst = (void **)operator new(v14 + 1);
      v29 = v12;
      v30 = v15 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v30) = v12;
      p_dst = (void **)&__dst;
      if (!v12)
        goto LABEL_11;
    }
    memmove(p_dst, v11, v12);
LABEL_11:
    *((_BYTE *)p_dst + v12) = 0;
    goto LABEL_12;
  }
  __dst = 0;
  v29 = 0;
  v30 = 0;
LABEL_12:
  v32 = 260;
  v31[0] = &__dst;
  v27 = 261;
  v25 = a3;
  v26 = a4;
  if (llvm::sys::fs::create_hard_link((llvm::sys::fs *)v31, (const llvm::Twine *)&v25, v10)
    && (v32 = 260,
        v31[0] = &__dst,
        v27 = 261,
        v25 = a3,
        v26 = a4,
        v17 = (llvm *)llvm::sys::fs::copy_file((llvm::sys::fs *)v31, (const llvm::Twine *)&v25, v16),
        (_DWORD)v17))
  {
    v18 = (llvm::raw_ostream *)llvm::errs(v17);
    v19 = v18;
    v20 = (void *)*((_QWORD *)v18 + 4);
    if (*((_QWORD *)v18 + 3) - (_QWORD)v20 > 0x2DuLL)
    {
      qmemcpy(v20, "remark: can't link or copy from cached entry '", 46);
      *((_QWORD *)v18 + 4) += 46;
    }
    else
    {
      llvm::raw_ostream::write(v18, "remark: can't link or copy from cached entry '", 0x2EuLL);
    }
    if (v30 >= 0)
      v21 = (const char *)&__dst;
    else
      v21 = (const char *)__dst;
    if (v30 >= 0)
      v22 = HIBYTE(v30) & 0x7F;
    else
      v22 = v29;
    llvm::raw_ostream::write(v19, v21, v22);
    v23 = *((_QWORD *)v19 + 4);
    if ((unint64_t)(*((_QWORD *)v19 + 3) - v23) > 5)
    {
      *(_WORD *)(v23 + 4) = 10016;
      *(_DWORD *)v23 = 1869881383;
      v24 = (_WORD *)(*((_QWORD *)v19 + 4) + 6);
      *((_QWORD *)v19 + 4) = v24;
    }
    else
    {
      llvm::raw_ostream::write(v19, "' to '", 6uLL);
      v24 = (_WORD *)*((_QWORD *)v19 + 4);
    }
    if (a4 <= *((_QWORD *)v19 + 3) - (_QWORD)v24)
    {
      if (a4)
      {
        memcpy(v24, a3, a4);
        v24 = (_WORD *)(*((_QWORD *)v19 + 4) + a4);
        *((_QWORD *)v19 + 4) = v24;
      }
    }
    else
    {
      llvm::raw_ostream::write(v19, a3, a4);
      v24 = (_WORD *)*((_QWORD *)v19 + 4);
    }
    if (*((_QWORD *)v19 + 3) - (_QWORD)v24 > 1uLL)
    {
      *v24 = 2599;
      *((_QWORD *)v19 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v19, "'\n", 2uLL);
    }
    llvm::ModuleCacheEntry::writeObject(a2, a3, a4, a5);
  }
  else
  {
    *a5 = 0;
  }
  if (SHIBYTE(v30) < 0)
    operator delete(__dst);
}

void sub_1C59087DC(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  const void *v3;
  size_t v5;
  std::error_code *p_dst;
  uint64_t v7;
  uint64_t v8;
  const std::error_category *cat;
  llvm *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  void *v13;
  const void *v14;
  size_t v15;
  void *v16;
  size_t v17;
  void **v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  void **v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  std::string *p_p;
  size_t size;
  _BYTE *v29;
  std::string __p;
  void *v31;
  size_t v32;
  unint64_t v33;
  std::error_code v34;
  std::error_code __dst;
  int64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = *(const void **)(a1 + 8);
  if (!v3)
    goto LABEL_18;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_57;
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    p_dst = (std::error_code *)operator new(v7 + 1);
    __dst.__cat_ = (const std::error_category *)v5;
    v36 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst.__val_ = p_dst;
    goto LABEL_9;
  }
  HIBYTE(v36) = *(_QWORD *)(a1 + 16);
  p_dst = &__dst;
  if (v5)
LABEL_9:
    memmove(p_dst, v3, v5);
  *((_BYTE *)&p_dst->__val_ + v5) = 0;
  if (v36 >= 0)
    cat = (const std::error_category *)HIBYTE(v36);
  else
    cat = __dst.__cat_;
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    if (cat)
      goto LABEL_15;
LABEL_18:
    *a2 = 0;
    a2[8] = 0;
    return;
  }
  operator delete(*(void **)&__dst.__val_);
  if (!cat)
    goto LABEL_18;
LABEL_15:
  sub_1C5908148(a1, (uint64_t)&__dst);
  if ((v36 & 1) != 0)
  {
    v34 = __dst;
    if (!__dst.__val_)
      goto LABEL_53;
    v11 = (llvm::raw_ostream *)llvm::errs(v10);
    v12 = v11;
    v13 = (void *)*((_QWORD *)v11 + 4);
    if (*((_QWORD *)v11 + 3) - (_QWORD)v13 > 0x21uLL)
    {
      qmemcpy(v13, "remark: can't reload cached file '", 34);
      *((_QWORD *)v11 + 4) += 34;
    }
    else
    {
      llvm::raw_ostream::write(v11, "remark: can't reload cached file '", 0x22uLL);
    }
    v14 = *(const void **)(a1 + 8);
    if (!v14)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v31 = 0;
      v32 = 0;
      v33 = 0;
LABEL_33:
      v22 = v19 < 0;
      if (v19 >= 0)
        v23 = &v31;
      else
        v23 = v18;
      v24 = v19 & 0x7F;
      if (v22)
        v25 = v17;
      else
        v25 = v24;
      llvm::raw_ostream::write(v12, (const char *)v23, v25);
      v26 = *((_QWORD *)v12 + 4);
      if ((unint64_t)(*((_QWORD *)v12 + 3) - v26) > 2)
      {
        *(_BYTE *)(v26 + 2) = 32;
        *(_WORD *)v26 = 14887;
        *((_QWORD *)v12 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v12, "': ", 3uLL);
      }
      std::error_code::message(&__p, &v34);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __p.__r_.__value_.__l.__size_;
      llvm::raw_ostream::write(v12, (const char *)p_p, size);
      v29 = (_BYTE *)*((_QWORD *)v12 + 4);
      if (*((_BYTE **)v12 + 3) == v29)
      {
        llvm::raw_ostream::write(v12, "\n", 1uLL);
      }
      else
      {
        *v29 = 10;
        ++*((_QWORD *)v12 + 4);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33) < 0)
        operator delete(v31);
      goto LABEL_53;
    }
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v15 >= 0x17)
      {
        v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v20 = v15 | 7;
        v21 = v20 + 1;
        v16 = operator new(v20 + 1);
        v32 = v15;
        v33 = v21 | 0x8000000000000000;
        v31 = v16;
      }
      else
      {
        HIBYTE(v33) = v15;
        v16 = &v31;
        if (!v15)
          goto LABEL_32;
      }
      memmove(v16, v14, v15);
LABEL_32:
      *((_BYTE *)v16 + v15) = 0;
      v19 = HIBYTE(v33);
      v18 = (void **)v31;
      v17 = v32;
      goto LABEL_33;
    }
LABEL_57:
    abort();
  }
  std::system_category();
LABEL_53:
  *(_QWORD *)a2 = *(_QWORD *)&__dst.__val_;
  a2[8] = 1;
}

_QWORD *sub_1C5908B04(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817EF38;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void sub_1C5908B44(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817EF38;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5908B94(_DWORD *a1)
{
  llvm *v2;
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  void (**v6)(llvm::raw_ostream *__hidden);
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  void **v14;
  void *v15[2];
  uint64_t v16;

  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v7 = 0;
  v11 = 0;
  v12 = 0;
  v6 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v14 = v15;
  v13 = 0;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  v2 = (llvm *)(*(uint64_t (**)(_DWORD *, void (***)(llvm::raw_ostream *__hidden)))(*(_QWORD *)a1 + 16))(a1, &v6);
  if (!a1[2])
  {
    v3 = (llvm::raw_ostream *)llvm::errs(v2);
    v4 = sub_1C4816AD8(v3, "Error: ");
    v5 = sub_1C620429C(v4, (uint64_t *)v15);
    sub_1C4816AD8(v5, "\n");
    llvm::report_fatal_error((llvm *)"ThinLTO: Can't get a temporary file", (const char *)1);
  }
  v6 = off_1E81A6E70;
  if (v13 == 1 && v8)
    MEMORY[0x1CAA32F9C](v8, 0x1000C8077774924);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

uint64_t sub_1C5908C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *__s1, size_t __n, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, int a11, char a12, uint64_t a13)
{
  uint64_t v15;
  void *__p;
  char v18;
  char v19;
  char *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[3];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E817EF88;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 24) = 0;
  v15 = a1 + 24;
  *(_BYTE *)(a1 + 88) = 0;
  llvm::ModuleCacheEntry::computeCacheKey(__s1, __n, a4, a7, a8, a9, a10, (uint64_t)&__p, a11, a12, a13);
  if (v19)
  {
    llvm::cas::ObjectStore::createProxy(a2, (uint64_t)v24);
    if ((v25 & 1) != 0)
    {
      v20 = (char *)v24[0];
      sub_1C4D62BD4(&v20, &v21);
      if (v20)
        (*(void (**)(char *))(*(_QWORD *)v20 + 8))(v20);
    }
    else
    {
      (*(void (**)(char **__return_ptr, _QWORD, _QWORD))(*(_QWORD *)v24[0] + 24))(&v21, v24[0], v24[2]);
      sub_1C61D4BD4(v15, &v21);
      if (v22 != &v23)
        free(v22);
    }
    if (v19 && v18 < 0)
      operator delete(__p);
  }
  return a1;
}

uint64_t sub_1C5908E10@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(_BYTE *)(result + 88))
    return llvm::cas::CASID::toString((llvm::cas::CASID *)(result + 24), (_QWORD *)a2);
  *(_BYTE *)(a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  return result;
}

void sub_1C5908E2C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void **v5;
  void *v6;
  const std::error_category *v7;
  const std::error_category *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *__p[2];
  uint64_t v21;
  char v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 88))
  {
    v8 = std::system_category();
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v8;
    return;
  }
  v4 = *(_QWORD *)(a1 + 16);
  llvm::cas::CacheKey::CacheKey(__p, a1 + 24);
  if (v21 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if (v21 >= 0)
    v6 = (void *)(HIBYTE(v21) & 0x7F);
  else
    v6 = __p[1];
  (*(void (**)(_QWORD **__return_ptr, uint64_t, void **, void *))(*(_QWORD *)v4 + 24))(&v23, v4, v5, v6);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if ((v27 & 1) != 0)
  {
    v9 = v23;
    v23 = 0;
    v19 = v9;
    v10 = llvm::errorToErrorCode(&v19);
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v11;
    v12 = v19;
    if (!v19)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (!v26)
  {
    v7 = std::system_category();
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v7;
    goto LABEL_16;
  }
  llvm::cas::ObjectStore::getProxy(*(llvm::cas::ObjectStore **)(a1 + 8), (const llvm::cas::CASID *)&v23, (uint64_t)__p);
  if ((v22 & 1) == 0)
  {
    v14 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)__p[0] + 88))(__p[0], v21, 1);
    llvm::MemoryBuffer::getMemBuffer(v14, v15, (uint64_t)"", 0, (char **)a2);
    *(_BYTE *)(a2 + 16) &= ~1u;
    goto LABEL_16;
  }
  v18 = __p[0];
  v16 = llvm::errorToErrorCode(&v18);
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v16;
  *(_QWORD *)(a2 + 8) = v17;
  v12 = v18;
  if (v18)
LABEL_15:
    (*(void (**)(_QWORD *))(*v12 + 8))(v12);
LABEL_16:
  if ((v27 & 1) != 0)
  {
    v13 = v23;
    v23 = 0;
    if (v13)
      (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  }
  else if (v26)
  {
    if (v24 != &v25)
      free(v24);
  }
}

void sub_1C5909024(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[3];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 88))
    return;
  llvm::cas::ObjectStore::createProxy(*(_QWORD *)(a1 + 8), (uint64_t)v15);
  if ((v16 & 1) != 0)
  {
    v11 = v15[0];
    v6 = &v11;
LABEL_17:
    llvm::report_fatal_error(v6);
  }
  v2 = a1 + 24;
  v3 = *(_QWORD *)(a1 + 16);
  llvm::cas::CacheKey::CacheKey(__p, v2);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)v15[0] + 24))(&v12, v15[0], v15[2]);
  if (v9 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (v9 >= 0)
    v5 = (void *)(v9 & 0x7F);
  else
    v5 = __p[1];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, void *, uint64_t *))(*(_QWORD *)v3 + 32))(&v10, v3, v4, v5, &v12);
  if (v13 != &v14)
    free(v13);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v10)
  {
    v7 = v10;
    v10 = 0;
    v6 = &v7;
    goto LABEL_17;
  }
}

uint64_t sub_1C590915C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E817EF88;
  if (*(_BYTE *)(a1 + 88))
  {
    v2 = *(void **)(a1 + 32);
    if (v2 != (void *)(a1 + 56))
      free(v2);
    *(_BYTE *)(a1 + 88) = 0;
  }
  return a1;
}

void sub_1C59091A8(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E817EF88;
  if (*(_BYTE *)(a1 + 88))
  {
    v2 = *(void **)(a1 + 32);
    if (v2 != (void *)(a1 + 56))
      free(v2);
    *(_BYTE *)(a1 + 88) = 0;
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5909204(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *__s1, size_t __n, void *__src, size_t __len, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, int a12, char a13, uint64_t a14)
{
  std::string *v19;
  _QWORD *v20;
  size_t v23;
  size_t v24;
  std::string __str;
  char v27;

  *(_QWORD *)a1 = &off_1E817EFD8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  v19 = (std::string *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v20 = (_QWORD *)(a1 + 40);
  if (__src)
  {
    if (__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len >= 0x17)
    {
      v23 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v23 = __len | 7;
      v24 = v23 + 1;
      v20 = operator new(v23 + 1);
      *(_QWORD *)(a1 + 48) = __len;
      *(_QWORD *)(a1 + 56) = v24 | 0x8000000000000000;
      *(_QWORD *)(a1 + 40) = v20;
    }
    else
    {
      *(_BYTE *)(a1 + 63) = __len;
      if (!__len)
        goto LABEL_11;
    }
    memmove(v20, __src, __len);
LABEL_11:
    *((_BYTE *)v20 + __len) = 0;
    goto LABEL_12;
  }
  *v20 = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
LABEL_12:
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  llvm::ModuleCacheEntry::computeCacheKey(__s1, __n, a3, a8, a9, a10, a11, (uint64_t)&__str, a12, a13, a14);
  if (v27)
  {
    std::string::operator=(v19, &__str);
    if (v27)
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

char *sub_1C5909368@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[39] < 0)
    return (char *)sub_1C47EBC30((_BYTE *)a2, *((void **)result + 2), *((_QWORD *)result + 3));
  *(_OWORD *)a2 = *((_OWORD *)result + 1);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 4);
  return result;
}

void sub_1C5909394(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int v8;
  int i;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  int v13;
  int v14;
  const std::error_category *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const std::error_category *v21;
  uint64_t v22;
  const std::error_category *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  const std::error_category *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32[2];
  uint64_t v33;
  char v34;
  __int16 v35;
  _QWORD *v36;
  void *v37[2];
  uint64_t v38;
  char v39;
  void *v40[2];
  uint64_t v41;
  _QWORD *v42;
  void *__dst[2];
  uint64_t v44;
  void *v45[2];
  uint64_t v46;
  void *__p[2];
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  _QWORD *v52;
  unsigned int v53;
  unsigned int v54;
  char v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 39))
    {
      v4 = a1 + 8;
      v5 = **(_QWORD **)(a1 + 8);
      *(_OWORD *)__dst = *(_OWORD *)(a1 + 16);
      v44 = *(_QWORD *)(a1 + 32);
      goto LABEL_6;
    }
LABEL_23:
    v16 = std::system_category();
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v16;
    return;
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    goto LABEL_23;
  v4 = a1 + 8;
  v5 = **(_QWORD **)(a1 + 8);
  sub_1C47EBC30(__dst, *(void **)(a1 + 16), v6);
LABEL_6:
  *(_OWORD *)__p = *(_OWORD *)__dst;
  v48 = v44;
  __dst[0] = 0;
  __dst[1] = 0;
  v44 = 0;
  (*(void (**)(_QWORD **__return_ptr, uint64_t, void **))(*(_QWORD *)v5 + 24))(&v52, v5, __p);
  if (SHIBYTE(v48) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v44) < 0)
    operator delete(__dst[0]);
  if ((v56 & 1) != 0)
  {
    v17 = v52;
    v52 = 0;
    v42 = v17;
    v18 = llvm::errorToErrorCode(&v42);
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v18;
    *(_QWORD *)(a2 + 8) = v19;
    v20 = v42;
    if (!v42)
      goto LABEL_30;
    goto LABEL_25;
  }
  if (!v55)
  {
    v21 = std::system_category();
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v21;
    goto LABEL_30;
  }
  if (!v53)
    goto LABEL_29;
  v7 = v52;
  v8 = 1;
  for (i = -1060223855; ; i = v10 + v8++)
  {
    v10 = i & (v53 - 1);
    v11 = (_QWORD *)v52[v10];
    if (v11 != (_QWORD *)-8)
    {
      if (!v11)
        goto LABEL_29;
      if (*((_DWORD *)&v52[v53 + 1] + v10) == -1060223855 && *v11 == 6)
      {
        v12 = (char *)v11 + v54;
        v13 = *(_DWORD *)v12;
        v14 = *((unsigned __int16 *)v12 + 2);
        if (v13 == 1886680399 && v14 == 29813)
          break;
      }
    }
  }
  if ((_DWORD)v10 == -1 || (v22 = (int)v10, (int)v10 == (unint64_t)v53))
  {
LABEL_29:
    v23 = std::generic_category();
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = 40;
    *(_QWORD *)(a2 + 8) = v23;
    goto LABEL_30;
  }
  if (byte_1ED819500)
    sub_1C5909D34((std::string *)(a1 + 72), (const std::string *)(v52[(int)v10] + 8));
  v25 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v26 = v7[v22];
  if (*(char *)(v26 + 31) < 0)
  {
    sub_1C47EBC30(v40, *(void **)(v26 + 8), *(_QWORD *)(v26 + 16));
  }
  else
  {
    v27 = *(_OWORD *)(v26 + 8);
    v41 = *(_QWORD *)(v26 + 24);
    *(_OWORD *)v40 = v27;
  }
  if (*(char *)(a1 + 63) < 0)
  {
    sub_1C47EBC30(v37, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)v37 = *(_OWORD *)(a1 + 40);
    v38 = *(_QWORD *)(a1 + 56);
  }
  v39 = 1;
  *(_OWORD *)v45 = *(_OWORD *)v40;
  v46 = v41;
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  *(_OWORD *)v32 = *(_OWORD *)v37;
  v33 = v38;
  v37[0] = 0;
  v37[1] = 0;
  v38 = 0;
  v34 = 1;
  (*(void (**)(void **__return_ptr, uint64_t, void **, void **))(*(_QWORD *)v25 + 24))(__p, v25, v45, v32);
  if (v34)
  {
    if (SHIBYTE(v33) < 0)
      operator delete(v32[0]);
    v34 = 0;
  }
  if (SHIBYTE(v46) < 0)
    operator delete(v45[0]);
  if (v39)
  {
    if (SHIBYTE(v38) < 0)
      operator delete(v37[0]);
    v39 = 0;
  }
  if (SHIBYTE(v41) < 0)
    operator delete(v40[0]);
  if ((v51 & 1) != 0)
  {
    v29 = __p[0];
    __p[0] = 0;
    v36 = v29;
    v30 = llvm::errorToErrorCode(&v36);
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v30;
    *(_QWORD *)(a2 + 8) = v31;
    if (v36)
      (*(void (**)(_QWORD *))(*v36 + 8))(v36);
  }
  else if (LOBYTE(__p[0]))
  {
    v28 = std::system_category();
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = v28;
  }
  else
  {
    *(_BYTE *)(a1 + 64) = 1;
    v35 = 260;
    v32[0] = (void *)(a1 + 40);
    sub_1C5E1F6CC((unsigned __int8 *)v32, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, a2);
  }
  if ((v51 & 1) == 0)
  {
    if (v50 && v49 < 0)
      operator delete(__p[1]);
    goto LABEL_30;
  }
  v20 = __p[0];
  __p[0] = 0;
  if (v20)
LABEL_25:
    (*(void (**)(_QWORD *))(*v20 + 8))(v20);
LABEL_30:
  if ((v56 & 1) != 0)
  {
    v24 = v52;
    v52 = 0;
    if (v24)
      (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  }
  else if (v55)
  {
    sub_1C58F7164((uint64_t)&v52);
  }
}

void sub_1C59097FC(uint64_t a1, uint64_t a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type size;
  std::string *p_str;
  unsigned __int8 *v12;
  _QWORD *v13;
  uint64_t v14;
  std::string::size_type v15;
  std::string::size_type v16;
  uint64_t *v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  const char *v21;
  __int16 v22;
  std::string *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27[4];
  __int16 v28;
  const char *v29;
  __int16 v30;
  uint64_t v31[5];
  uint64_t v32[5];
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  std::string::size_type v37;
  __int128 __dst;
  uint64_t v39;
  uint64_t v40;
  std::string __str;
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(_QWORD *)(a1 + 24))
      return;
  }
  else if (!*(_BYTE *)(a1 + 39))
  {
    return;
  }
  if (!*(_BYTE *)(a1 + 64))
  {
    v3 = *(_BYTE *)(a1 + 63);
    if (v3 >= 0)
      v4 = (_BYTE *)(a1 + 40);
    else
      v4 = *(_BYTE **)(a1 + 40);
    if (v3 >= 0)
      v5 = v3 & 0x7F;
    else
      v5 = *(_QWORD *)(a1 + 48);
    llvm::ModuleCacheEntry::writeObject(a2, v4, v5, &v40);
  }
  *(_BYTE *)(a1 + 64) = 1;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_1C47EBC30(&__dst, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
  }
  else
  {
    __dst = *(_OWORD *)(a1 + 40);
    v39 = *(_QWORD *)(a1 + 56);
  }
  v35 = __dst;
  v36 = v39;
  __dst = 0uLL;
  v39 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v6 + 40))(&__str, v6, &v35);
  if (SHIBYTE(v36) < 0)
    operator delete((void *)v35);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)__dst);
  if ((v42 & 1) != 0)
  {
    v16 = __str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[0] = 0;
    v37 = v16;
    v17 = (uint64_t *)&v37;
    goto LABEL_56;
  }
  if (byte_1ED819500 && *(_BYTE *)(a1 + 96))
  {
    v7 = *(_BYTE *)(a1 + 95);
    v8 = v7 & 0x7F;
    if (v7 >= 0)
      v9 = v7 & 0x7F;
    else
      v9 = *(_QWORD *)(a1 + 80);
    size = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (v9 != size)
      goto LABEL_53;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((*(_BYTE *)(a1 + 95) & 0x80) != 0)
    {
      if (memcmp(*(const void **)(a1 + 72), p_str, *(_QWORD *)(a1 + 80)))
        goto LABEL_53;
    }
    else if ((v7 & 0x7F) != 0)
    {
      v12 = (unsigned __int8 *)(a1 + 72);
      while (*v12 == p_str->__r_.__value_.__s.__data_[0])
      {
        ++v12;
        p_str = (std::string *)((char *)p_str + 1);
        if (!--v8)
          goto LABEL_39;
      }
LABEL_53:
      v29 = "ThinLTO deterministic check failed: ";
      v30 = 259;
      v28 = 260;
      v27[0] = a1 + 72;
      sub_1C6131AAC((uint64_t *)&v29, v27, (uint64_t)v31);
      v25 = " (expected) vs. ";
      v26 = 259;
      sub_1C6131AAC(v31, (uint64_t *)&v25, (uint64_t)v32);
      v24 = 260;
      v23 = &__str;
      sub_1C6131AAC(v32, (uint64_t *)&v23, (uint64_t)&v33);
      v21 = " (actual)";
      v22 = 259;
      sub_1C6131AAC((uint64_t *)&v33, (uint64_t *)&v21, (uint64_t)&v35);
      llvm::report_fatal_error((uint64_t)&v35, 1);
    }
  }
LABEL_39:
  v35 = 0uLL;
  v36 = 0x2000000000;
  v13 = sub_1C5426790((llvm::StringMapImpl *)&v35, "Output", 6uLL);
  std::string::operator=((std::string *)(*v13 + 8), &__str);
  v14 = **(_QWORD **)(a1 + 8);
  if (*(char *)(a1 + 39) < 0)
  {
    sub_1C47EBC30(__p, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 16);
    v20 = *(_QWORD *)(a1 + 32);
  }
  v33 = *(_OWORD *)__p;
  v34 = v20;
  __p[0] = 0;
  __p[1] = 0;
  v20 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, __int128 *, __int128 *))(*(_QWORD *)v14 + 32))(v32, v14, &v33, &v35);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (v32[0])
  {
    v18 = v32[0];
    v32[0] = 0;
    v17 = &v18;
LABEL_56:
    llvm::report_fatal_error(v17);
  }
  sub_1C58F7164((uint64_t)&v35);
  if ((v42 & 1) != 0)
  {
    v15 = __str.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__r.__words[0] = 0;
    if (v15)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v15 + 8))(v15);
  }
  else if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C5909B94(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1C5909B9C@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  unsigned __int8 v4[32];
  __int16 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)result + 64))
  {
    v5 = 260;
    *(_QWORD *)v4 = result + 5;
    result = sub_1C5E1F6CC(v4, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v6);
    if ((v7 & 1) != 0)
    {
      v3 = 0;
      *a2 = 0;
    }
    else
    {
      *(_QWORD *)a2 = v6;
      v3 = 1;
    }
    a2[8] = v3;
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
  return result;
}

uint64_t sub_1C5909C54(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E817EFD8;
  if (*(_BYTE *)(a1 + 96))
  {
    if (*(char *)(a1 + 95) < 0)
      operator delete(*(void **)(a1 + 72));
    *(_BYTE *)(a1 + 96) = 0;
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C5909CBC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E817EFD8;
  if (*(_BYTE *)(a1 + 96))
  {
    if (*(char *)(a1 + 95) < 0)
      operator delete(*(void **)(a1 + 72));
    *(_BYTE *)(a1 + 96) = 0;
  }
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

std::string *sub_1C5909D34(std::string *__dst, const std::string *a2)
{
  __int128 v3;

  if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(__dst, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1C47EBC30(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }
    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return __dst;
}

_QWORD *sub_1C5909D9C(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_1C547FE3C(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

uint64_t sub_1C5909E54()
{
  return 2;
}

BOOL sub_1C5909E5C(uint64_t **a1, unsigned __int8 *__s1, size_t __n, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  int v8;
  size_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _BOOL8 result;
  uint64_t *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v31 = a4;
  v4 = *a1;
  v5 = *((unsigned int *)*a1 + 2);
  v29 = a4;
  if ((_DWORD)v5)
  {
    v8 = 0;
    if (__n)
    {
      v9 = __n;
      v10 = __s1;
      do
      {
        v11 = *v10++;
        v8 = 33 * v8 + v11;
        --v9;
      }
      while (v9);
    }
    v12 = *v4;
    v13 = *v4 + 8 * v5 + 8;
    v14 = 1;
    v15 = v8;
    while (1)
    {
      v16 = v15 & (v5 - 1);
      v17 = *(_QWORD **)(v12 + 8 * v16);
      if (v17 != (_QWORD *)-8)
      {
        if (!v17)
          goto LABEL_15;
        if (*(_DWORD *)(v13 + 4 * v16) == v8
          && __n == *v17
          && (!__n || !memcmp(__s1, (char *)v17 + *((unsigned int *)v4 + 5), __n)))
        {
          break;
        }
      }
      v15 = v14 + v16;
      ++v14;
    }
    if ((_DWORD)v16 != -1 && (int)v16 != v5)
    {
      v26 = (uint64_t *)(*(_QWORD *)(v12 + 8 * (int)v16) + 8);
      v32 = 0;
      if ((sub_1C61A7654(v26, &v31, &v32) & 1) != 0)
        return 1;
      v29 = v31;
    }
  }
LABEL_15:
  v18 = a1[1];
  v19 = *((_DWORD *)v18 + 4);
  if (!v19)
    return 0;
  v20 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8);
  v21 = *v18;
  v22 = v19 - 1;
  v23 = v22 & (37 * v20);
  v24 = *(_QWORD *)(v21 + 8 * v23);
  if (v20 == v24)
    return 1;
  v27 = 1;
  do
  {
    result = v24 != -1;
    if (v24 == -1)
      break;
    v28 = v23 + v27++;
    v23 = v28 & v22;
    v24 = *(_QWORD *)(v21 + 8 * v23);
  }
  while (v20 != v24);
  return result;
}

BOOL sub_1C5909FF8(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v7;

  v7 = a2;
  v5 = sub_1C5309DE0(*a1, &v7);
  return (uint64_t *)(**a1 + 16 * *((unsigned int *)*a1 + 4)) == v5 || v5[1] == a3;
}

void sub_1C590A05C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 8 * a2);
      v5 += a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = (uint64_t)v5 - *(_QWORD *)a1;
    v8 = a2 + (v7 >> 3);
    if (v8 >> 61)
      abort();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 2 > v8)
      v8 = v9 >> 2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 61)
        sub_1C4764EE4();
      v11 = (char *)operator new(8 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * (v7 >> 3)];
    v13 = &v11[8 * v10];
    bzero(v12, 8 * a2);
    v14 = &v11[8 * a2 + v7];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      do
      {
        v15 = *--v5;
        *v5 = 0;
        *((_QWORD *)v12 - 1) = v15;
        v12 -= 8;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
      v16 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)(a1 + 16) = v13;
      while (v16 != v5)
      {
        v18 = *--v16;
        v17 = v18;
        *v16 = 0;
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_1C590A1B0()
{
  uint64_t v0;
  int v2;
  void *__p[2];
  char v4;
  char v5;
  char v6;
  char *v7;
  __n128 v8;

  v0 = sub_1C47AD050((uint64_t)&llvm::ThreadCount, 0, 0);
  dword_1ED834900 = 0;
  qword_1ED834908 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED834910 = 0;
  llvm::ThreadCount = (uint64_t)&unk_1E819E418;
  qword_1ED834918 = (uint64_t)&unk_1E819E230;
  qword_1ED834920 = (uint64_t)&off_1E7FA9D80;
  qword_1ED834938 = (uint64_t)&qword_1ED834920;
  llvm::cl::Option::setArgStr(v0, "threads", 7uLL);
  dword_1ED834900 = 0;
  byte_1ED834914 = 1;
  dword_1ED834910 = 0;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::ThreadCount);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &llvm::ThreadCount, &dword_1C475E000);
  v8.n128_u64[0] = (unint64_t)"Enable logging for thinLTO caching";
  v8.n128_u64[1] = 34;
  llvm::sys::Process::GetEnv("LLVM_THINLTO_CACHE_LOGGING", 0x1AuLL, (uint64_t)__p);
  v6 = v5;
  v7 = &v6;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED8193C0, "thinlto-cache-logging", &v8, &v7, &v2);
  if (v5 && v4 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8193C0, &dword_1C475E000);
  v8.n128_u64[0] = (unint64_t)"Enable deterministic check for thinLTO caching";
  v8.n128_u64[1] = 46;
  llvm::sys::Process::GetEnv("LLVM_CACHE_CHECK_REPRODUCIBLE_CACHING_ISSUES", 0x2CuLL, (uint64_t)__p);
  v6 = v5;
  v7 = &v6;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED819480, "thinlto-deterministic-check", &v8, &v7, &v2);
  if (v5 && v4 < 0)
    operator delete(__p[0]);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED819480, &dword_1C475E000);
}

void llvm::ThinLTOCodegenManager::createInvocation(uint64_t a1, uint64_t a2, void *a3, size_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v8;
  void (**v9)(void);
  _QWORD v10[3];
  _QWORD *v11;
  _BYTE v12[8];
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  llvm::ClangThinLTOInvocation::ClangThinLTOInvocation((uint64_t)v12, a2, a3, a4, a5);
  v8 = (_QWORD *)a6[3];
  if (v8)
  {
    if (v8 == a6)
    {
      v11 = v10;
      (*(void (**)(_QWORD *, _QWORD *))(*a6 + 24))(a6, v10);
    }
    else
    {
      v11 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
    }
  }
  else
  {
    v11 = 0;
  }
  (*(void (**)(uint64_t, _BYTE *, _QWORD *))(*(_QWORD *)a1 + 48))(a1, v12, v10);
  if (v11 == v10)
  {
    v9 = (void (**)(void))(v10[0] + 32);
  }
  else
  {
    if (!v11)
      goto LABEL_11;
    v9 = (void (**)(void))(*v11 + 40);
  }
  (*v9)();
LABEL_11:
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v15 != &v16)
    free(v15);
  if (v13 != &v14)
    free(v13);
}

void llvm::LocalProcessCodegenManager::materializeModule(llvm::LocalProcessCodegenManager *this, llvm::lto::InputFile *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  void *v7;
  size_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  const char *v13;
  __int16 v14;
  uint64_t v15[3];
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19[5];
  __int128 __dst;
  unint64_t v21;
  uint64_t v22[4];
  char *v23;
  unint64_t v24;
  void *__src;
  __int128 __len;
  _QWORD v27[129];

  v27[128] = *MEMORY[0x1E0C80C00];
  __src = v27;
  __len = xmmword_1C86520E0;
  v3 = llvm::sys::path::stem(*(_QWORD *)(*(_QWORD *)a2 + 16), *(_QWORD *)(*(_QWORD *)a2 + 24), 0);
  LOWORD(v23) = 261;
  v22[0] = v3;
  v22[1] = v4;
  v24 = llvm::sys::fs::createTemporaryFile(v22, (__int128 *)"bc", 2, &__src, 0);
  if ((_DWORD)v24)
    llvm::report_fatal_error((llvm *)"Could not create temporary file to materialize module", (const char *)1);
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v22, __src, __len, (uint64_t)&v24, 0);
  if ((_DWORD)v24)
  {
    v17 = "Failed to open ";
    v18 = 259;
    v16 = 261;
    v15[0] = (uint64_t)__src;
    v15[1] = __len;
    sub_1C6131AAC((uint64_t *)&v17, v15, (uint64_t)v19);
    v13 = " to save module bitcode\n";
    v14 = 259;
    sub_1C6131AAC(v19, (uint64_t *)&v13, (uint64_t)&__dst);
    llvm::report_fatal_error((uint64_t)&__dst, 1);
  }
  v5 = (const void *)*((_QWORD *)a2 + 24);
  v6 = *((_QWORD *)a2 + 25);
  if (v6 <= v22[3] - (uint64_t)v23)
  {
    if (v6)
    {
      memcpy(v23, v5, *((_QWORD *)a2 + 25));
      v23 += v6;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v22, (const char *)v5, *((_QWORD *)a2 + 25));
  }
  v7 = __src;
  if (!__src)
  {
    __dst = 0uLL;
    v21 = 0;
    goto LABEL_18;
  }
  v8 = __len;
  if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if ((unint64_t)__len >= 0x17)
  {
    v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if (((unint64_t)__len | 7) != 0x17)
      v10 = __len | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v21 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v21) = __len;
    p_dst = &__dst;
    if (!(_QWORD)__len)
      goto LABEL_17;
  }
  memmove(p_dst, v7, v8);
LABEL_17:
  *((_BYTE *)p_dst + v8) = 0;
LABEL_18:
  v12 = (void **)((char *)a2 + 224);
  if (*((char *)a2 + 247) < 0)
    operator delete(*v12);
  *(_OWORD *)v12 = __dst;
  *((_QWORD *)a2 + 30) = v21;
  llvm::sys::RemoveFileOnSignal(__src, __len);
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v22);
  if (__src != v27)
    free(__src);
}

void llvm::LocalProcessCodegenManager::execute(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::LocalProcessCodegenManager *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *ExecutablePath;
  std::string::size_type v17;
  std::string::size_type v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  __int16 v31;
  uint64_t v32[4];
  __int16 v33;
  _BYTE v34[40];
  __int128 v35;
  char v36;
  _QWORD v37[4];
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;
  void *v41;
  __int128 v42;
  _QWORD v43[4];
  void *v44;
  __int128 v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  _QWORD v49[130];

  v49[128] = *MEMORY[0x1E0C80C00];
  v5 = a2[1];
  v6 = *(_QWORD *)(*a2 + 224);
  v7 = *(_BYTE *)(*a2 + 247);
  if (v7 >= 0)
    v6 = *a2 + 224;
  v29 = v6;
  v8 = *(_QWORD *)(*a2 + 232);
  if (v7 >= 0)
    v8 = v7 & 0x7F;
  v28 = v8;
  v9 = a2[2];
  v39[0] = "-fthinlto-index=";
  v39[2] = v5;
  v39[3] = v9;
  v40 = 1283;
  v47 = v49;
  v48 = xmmword_1C86520E0;
  llvm::Twine::toVector((uint64_t)v39, (uint64_t)&v47);
  v26 = v47;
  v27 = v48;
  v10 = *(unsigned int *)(a1 + 416);
  v37[0] = "-O";
  v37[2] = v10;
  v38 = 2307;
  v44 = &v46;
  v45 = xmmword_1C6464ED0;
  llvm::Twine::toVector((uint64_t)v37, (uint64_t)&v44);
  v12 = v44;
  v13 = v45;
  v41 = v43;
  v42 = xmmword_1C677F680;
  switch(*(_DWORD *)(a1 + 408))
  {
    case 0:
      qmemcpy(v43, "static", 6);
      v14 = 6;
      goto LABEL_13;
    case 1:
      qmemcpy(v43, "pic", 3);
      v14 = 3;
      goto LABEL_13;
    case 2:
      qmemcpy(v43, "dynamic-no-pic", 14);
      v14 = 14;
      goto LABEL_13;
    case 3:
      v15 = 1768976242;
      goto LABEL_11;
    case 4:
      v15 = 1768978290;
LABEL_11:
      LODWORD(v43[0]) = v15;
      v14 = 4;
      goto LABEL_13;
    case 5:
      LOBYTE(v43[1]) = 105;
      v43[0] = *(_QWORD *)"ropi-rwpi";
      v14 = 9;
LABEL_13:
      *(_QWORD *)&v42 = v14;
      break;
    default:
      break;
  }
  ExecutablePath = llvm::LocalProcessCodegenManager::getExecutablePath(v11);
  v18 = v17;
  v19 = v41;
  v20 = v42;
  v21 = a2[132];
  v22 = a2[133];
  v23 = operator new(0xD0uLL);
  *v23 = ExecutablePath;
  v23[1] = v18;
  v23[2] = v12;
  v23[3] = v13;
  v23[4] = "-x";
  v23[5] = 2;
  v23[6] = "ir";
  v23[7] = 2;
  v23[8] = v29;
  v23[9] = v28;
  v23[10] = "-c";
  v23[11] = 2;
  v23[12] = "-Xclang";
  v23[13] = 7;
  v23[14] = "-mrelocation-model";
  v23[15] = 18;
  v23[16] = "-Xclang";
  v23[17] = 7;
  v23[18] = v19;
  v23[19] = v20;
  v23[20] = v26;
  v23[21] = v27;
  v23[22] = "-o";
  v23[23] = 2;
  v23[24] = v21;
  v23[25] = v22;
  LOBYTE(v35) = 0;
  v36 = 0;
  if (llvm::sys::ExecuteAndWait(ExecutablePath, v18, (uint64_t)v23, 13, &v35, 0, 0, 0, 0, 0, 0, 0))
  {
    v33 = 1283;
    v32[0] = (uint64_t)"Clang Invocation failed for Input file: ";
    v32[2] = v29;
    v32[3] = v28;
    v30 = "\n";
    v31 = 259;
    sub_1C6131AAC(v32, (uint64_t *)&v30, (uint64_t)v34);
    llvm::report_fatal_error((uint64_t)v34, 1);
  }
  v24 = *(_QWORD *)(a3 + 24);
  if (!v24)
    sub_1C485C2F0();
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v24 + 48))(v24, a2);
  operator delete(v23);
  if (v41 != v43)
    free(v41);
  if (v44 != &v46)
    free(v44);
  if (v47 != v49)
    free(v47);
}

uint64_t *llvm::LocalProcessCodegenManager::getExecutablePath(llvm::LocalProcessCodegenManager *this)
{
  char v1;
  uint64_t v2;
  std::string __str;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = byte_1EF8F7207;
  if (byte_1EF8F7207 >= 0)
    v2 = byte_1EF8F7207 & 0x7F;
  else
    v2 = qword_1EF8F71F8;
  if (!v2)
  {
    llvm::sys::findProgramByName("clang", 5uLL, 0, 0, (uint64_t)&__str);
    if ((v5 & 1) != 0)
      llvm::report_fatal_error((llvm *)"Could not find clang executable!", (const char *)1);
    std::string::operator=((std::string *)&llvm::LocalProcessCodegenManager::ExecutablePath, &__str);
    if ((v5 & 1) == 0 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v1 = byte_1EF8F7207;
  }
  if (v1 >= 0)
    return &llvm::LocalProcessCodegenManager::ExecutablePath;
  else
    return (uint64_t *)llvm::LocalProcessCodegenManager::ExecutablePath;
}

uint64_t llvm::ClangThinLTOInvocation::ClangThinLTOInvocation(uint64_t a1, uint64_t a2, void *__src, size_t __n, uint64_t a5)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[4];
  __int16 v17;

  *(_QWORD *)a1 = a2;
  v10 = (void *)(a1 + 32);
  *(_QWORD *)(a1 + 8) = a1 + 32;
  v11 = a1 + 8;
  *(_OWORD *)(a1 + 16) = xmmword_1C86520E0;
  if (__n < 0x401)
  {
    v12 = 0;
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod(v11, v10, __n, 1);
  v12 = *(_QWORD *)(a1 + 16);
  if (__n)
  {
LABEL_3:
    memcpy((void *)(*(_QWORD *)(a1 + 8) + v12), __src, __n);
    v12 = *(_QWORD *)(a1 + 16);
  }
LABEL_4:
  *(_QWORD *)(a1 + 16) = v12 + __n;
  *(_QWORD *)(a1 + 1056) = a1 + 1080;
  *(_QWORD *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1072) = 1024;
  *(_QWORD *)(a1 + 2104) = 0;
  *(_QWORD *)(a1 + 2120) = 0;
  *(_QWORD *)(a1 + 2112) = 0;
  *(_OWORD *)(a1 + 2104) = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 2120) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v13 = llvm::sys::path::stem(*(_QWORD *)(*(_QWORD *)a2 + 16), *(_QWORD *)(*(_QWORD *)a2 + 24), 0);
  v17 = 261;
  v16[0] = v13;
  v16[1] = v14;
  if (llvm::sys::fs::createTemporaryFile(v16, (__int128 *)"thinlto.o", 9, (_QWORD *)(a1 + 1056), 0))
    llvm::report_fatal_error((llvm *)"Could not create temporary file to store thinlto codegen output", (const char *)1);
  return a1;
}

void llvm::ThinLTOOutOfProcessCodeGenerator::run(llvm::ThinLTOOutOfProcessCodeGenerator *this)
{
  BOOL *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t *v10;
  void (**v11)(uint64_t *);
  size_t v12;
  void *p_p;
  char *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int v19;
  llvm **v20;
  uint64_t *v21;
  uint64_t *v22;
  llvm::ModuleSummaryIndex *v23;
  const char *v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  int *v28;
  int *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  char v34;
  unsigned __int8 *v35;
  size_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int *v46;
  unint64_t v47;
  uint64_t v48;
  int *v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  void (**v55)(uint64_t *);
  char v56;
  int v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  llvm::sys *v62;
  llvm *v63;
  llvm::raw_ostream *v64;
  llvm::ModuleSummaryIndex *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  size_t v73;
  void **v74;
  uint64_t *v75;
  _OWORD v76[3];
  std::shared_future<void> v77;
  void *v78;
  int *v79;
  uint64_t v80;
  void *__p;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  int v85;
  uint64_t v86;
  const std::error_category *v87;
  int v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  llvm::ModuleSummaryIndex *v93;
  std::shared_future<void> v94;
  void **v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103[4];
  __int16 v104;
  unsigned __int8 *v105[4];
  __int16 v106;
  uint64_t v107[3];
  uint64_t *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 93) + 16))(*((_QWORD *)this + 93), (char *)this + 8);
  if ((*((char *)this + 727) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 727))
      goto LABEL_3;
LABEL_6:
    sub_1C5906298((_QWORD *)this + 53, (uint64_t)(*((_QWORD *)this + 60) - *((_QWORD *)this + 59)) >> 3);
    goto LABEL_7;
  }
  if (!*((_QWORD *)this + 89))
    goto LABEL_6;
LABEL_3:
  v106 = 260;
  v105[0] = (unsigned __int8 *)this + 704;
  llvm::sys::fs::create_directories(v105, 1, 504);
  LOBYTE(v89) = 0;
  v106 = 260;
  v105[0] = (unsigned __int8 *)this + 704;
  llvm::sys::fs::is_directory((llvm::sys::fs *)v105, (const llvm::Twine *)&v89, v2);
  if (!(_BYTE)v89)
  {
    v103[0] = (uint64_t)"Unexistent dir: '";
    v104 = 259;
    v102 = 260;
    v99 = (char *)this + 704;
    sub_1C6131AAC(v103, (uint64_t *)&v99, (uint64_t)v107);
    v95 = (void **)"'";
    v98 = 259;
    sub_1C6131AAC(v107, (uint64_t *)&v95, (uint64_t)v105);
    v75 = (uint64_t *)v105;
    goto LABEL_97;
  }
  sub_1C571119C((int64x2_t *)this + 28, (uint64_t)(*((_QWORD *)this + 60) - *((_QWORD *)this + 59)) >> 3);
LABEL_7:
  if (*((_BYTE *)this + 729))
  {
    llvm::ThreadPool::ThreadPool((uint64_t)v105, 0x100000000);
    v6 = *((_QWORD *)this + 59);
    v7 = *((_QWORD *)this + 60);
    if (v6 == v7)
    {
LABEL_19:
      llvm::ThreadPool::~ThreadPool((llvm::ThreadPool *)v105);
      return;
    }
    v8 = 0;
    while (1)
    {
      v9 = operator new(0x20uLL);
      *v9 = &off_1E817F0B8;
      v9[1] = this;
      v9[2] = v6;
      *((_DWORD *)v9 + 6) = v8;
      v108 = v9;
      sub_1C6208584((uint64_t)v105, v107, 0, (std::future<void> *)&v94);
      v10 = v108;
      if (v108 == v107)
        break;
      if (v108)
      {
        v11 = (void (**)(uint64_t *))(*v108 + 40);
        goto LABEL_17;
      }
LABEL_18:
      std::shared_future<void>::~shared_future(&v94);
      v6 += 8;
      ++v8;
      if (v6 == v7)
        goto LABEL_19;
    }
    v11 = (void (**)(uint64_t *))(v107[0] + 32);
    v10 = v107;
LABEL_17:
    (*v11)(v10);
    goto LABEL_18;
  }
  v3 = (uint64_t *)*((_QWORD *)this + 59);
  v4 = (uint64_t *)*((_QWORD *)this + 60);
  while (v3 != v4)
  {
    v5 = *v3++;
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 93) + 40))(*((_QWORD *)this + 93), v5);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 93) + 24))(*((_QWORD *)this + 93));
  llvm::ThinLTOCodeGenerator::linkCombinedIndex(this, (uint64_t *)&v93);
  if (*((char *)this + 703) < 0)
  {
    if (!*((_QWORD *)this + 86))
      goto LABEL_44;
    goto LABEL_24;
  }
  if (*((_BYTE *)this + 703))
  {
LABEL_24:
    if (*((char *)this + 703) >= 0)
      v12 = *((unsigned __int8 *)this + 703);
    else
      v12 = *((_QWORD *)this + 86);
    sub_1C484371C((uint64_t)&__p, v12 + 8);
    if (v83 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v12)
    {
      if (*((char *)this + 703) >= 0)
        v14 = (char *)this + 680;
      else
        v14 = (char *)*((_QWORD *)this + 85);
      memmove(p_p, v14, v12);
    }
    strcpy((char *)p_p + v12, "index.bc");
    LODWORD(v86) = 0;
    v87 = std::system_category();
    if (v83 >= 0)
      v15 = &__p;
    else
      v15 = __p;
    if (v83 >= 0)
      v16 = HIBYTE(v83) & 0x7F;
    else
      v16 = v82;
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v105, v15, v16, (uint64_t)&v86, 0);
    if (!(_DWORD)v86)
    {
      llvm::writeIndexToFile(v93, (llvm::raw_ostream *)v105, 0);
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v105);
      if (SHIBYTE(v83) < 0)
        operator delete(__p);
      goto LABEL_44;
    }
    v99 = "Failed to open ";
    v102 = 259;
    v98 = 260;
    v95 = &__p;
    sub_1C6131AAC((uint64_t *)&v99, (uint64_t *)&v95, (uint64_t)v103);
    v89 = " to save optimized bitcode\n";
    v92 = 259;
    sub_1C6131AAC(v103, (uint64_t *)&v89, (uint64_t)v107);
    v75 = v107;
LABEL_97:
    llvm::report_fatal_error((uint64_t)v75, 1);
  }
LABEL_44:
  llvm::ThinLTOCodeGenerator::generateModuleMap((uint64_t **)this + 59, (llvm::StringMapImpl *)v103);
  v17 = (*((_QWORD *)this + 60) - *((_QWORD *)this + 59)) >> 3;
  v100 = 0;
  v101 = 0x2000000000;
  if ((_DWORD)v17)
  {
    v67 = (4 * (int)v17 / 3u + 1) | ((unint64_t)(4 * (int)v17 / 3u + 1) >> 1);
    v68 = v67 | (v67 >> 2) | ((v67 | (v67 >> 2)) >> 4);
    v69 = v68 | (v68 >> 8) | ((v68 | (v68 >> 8)) >> 16);
    v19 = v69 + 1;
    v18 = (const char *)sub_1C5074000(v69 + 2, 0xCuLL);
    *(_QWORD *)&v18[8 * v19] = 2;
  }
  else
  {
    v18 = 0;
    v19 = 0;
  }
  v99 = v18;
  LODWORD(v100) = v19;
  v20 = (llvm **)v93;
  sub_1C58ED534(v93, (uint64_t)&v99);
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v21 = (uint64_t *)*((_QWORD *)this + 59);
  v22 = (uint64_t *)*((_QWORD *)this + 60);
  if (v21 != v22)
  {
    do
    {
      v41 = *v21++;
      llvm::ThinLTOCodeGenerator::computeGUIDPreservedSymbols((uint64_t)this, v41, (uint64_t *)this + 62, (uint64_t)this + 8, (uint64_t)&v86);
    }
    while (v21 != v22);
    v42 = (uint64_t *)*((_QWORD *)this + 59);
    v43 = (uint64_t *)*((_QWORD *)this + 60);
    while (v42 != v43)
    {
      v44 = *v42++;
      llvm::ThinLTOCodeGenerator::addUsedSymbolToPreservedGUID((uint64_t)this, v44, (uint64_t)&v86);
    }
  }
  llvm::computeDeadSymbolsAndUpdateIndirectCalls(v20, (llvm::ModuleSummaryIndex *)&v86, (void (*)(uint64_t, _QWORD))sub_1C5909E54, (uint64_t)v105);
  llvm::ModuleSummaryIndex::propagateAttributes(v20, (uint64_t)&v86);
  llvm::computeSyntheticCounts((llvm *)v20, v23);
  v95 = 0;
  v96 = 0;
  v97 = 0x2800000000;
  if ((_DWORD)v17)
  {
    v70 = (4 * (int)v17 / 3u + 1) | ((unint64_t)(4 * (int)v17 / 3u + 1) >> 1);
    v71 = v70 | (v70 >> 2) | ((v70 | (v70 >> 2)) >> 4);
    v72 = v71 | (v71 >> 8) | ((v71 | (v71 >> 8)) >> 16);
    v25 = v72 + 1;
    v73 = v72 + 2;
    v74 = (void **)sub_1C5074000(v72 + 2, 0xCuLL);
    v74[v25] = (void *)2;
    v95 = v74;
    LODWORD(v96) = v25;
    v90 = 0;
    v91 = 0x2000000000;
    v24 = (const char *)sub_1C5074000(v73, 0xCuLL);
    *(_QWORD *)&v24[8 * v25] = 2;
  }
  else
  {
    v24 = 0;
    v25 = 0;
    LODWORD(v96) = 0;
    v90 = 0;
    v91 = 0x2000000000;
  }
  v89 = v24;
  LODWORD(v90) = v25;
  llvm::ComputeCrossModuleImport((uint64_t)v20, (uint64_t)&v99, (llvm::StringMapImpl *)&v95, (uint64_t)&v89);
  v84[0] = 0;
  v84[1] = 0;
  v85 = 0;
  llvm::ThinLTOCodeGenerator::computePrevailingCopies((uint64_t)this, v20, (uint64_t)v84);
  __p = 0;
  v82 = 0;
  v83 = 0x2000000000;
  llvm::ThinLTOCodeGenerator::resolvePrevailingInIndex((uint64_t)this, (uint64_t)v20, (uint64_t)&__p, (uint64_t)&v86, (uint64_t)v84);
  v105[0] = (unsigned __int8 *)&v89;
  v105[1] = (unsigned __int8 *)&v86;
  v107[0] = (uint64_t)v84;
  llvm::thinLTOInternalizeAndPromoteInIndex((uint64_t)v20, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t))sub_1C590C830, (uint64_t)v105, (uint64_t (*)(uint64_t, _QWORD))sub_1C590C9CC, (uint64_t)v107);
  v26 = (uint64_t *)*((_QWORD *)this + 59);
  v27 = (uint64_t *)*((_QWORD *)this + 60);
  if (v26 == v27)
  {
    v28 = 0;
    v29 = 0;
    v78 = 0;
    v79 = 0;
    v30 = 1;
    v80 = 0;
  }
  else
  {
    do
    {
      v31 = *v26++;
      v32 = v31 + 224;
      v33 = *(unsigned __int8 **)(v31 + 224);
      v34 = *(_BYTE *)(v31 + 247);
      if (v34 >= 0)
        v35 = (unsigned __int8 *)v32;
      else
        v35 = v33;
      v36 = *(_QWORD *)(v32 + 8);
      if (v34 >= 0)
        v37 = v34 & 0x7F;
      else
        v37 = v36;
      sub_1C6292894((uint64_t)&v89, v35, v37);
      sub_1C56D84B0((llvm::StringMapImpl *)&v95, v35, v37);
      sub_1C58EDD20((llvm::StringMapImpl *)&__p, v35, v37);
      sub_1C62B21C4((uint64_t)&v99, v35, v37);
    }
    while (v26 != v27);
    v39 = *((_QWORD *)this + 59);
    v38 = *((_QWORD *)this + 60);
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v40 = v38 - v39;
    if (v40)
    {
      sub_1C4D63CD0((char **)&v78, v40 >> 3);
      v28 = (int *)v78;
      v29 = v79;
      if (v78 == v79)
      {
        v30 = 1;
        v29 = (int *)v78;
      }
      else
      {
        v45 = 0;
        v46 = (int *)v78;
        do
          *v46++ = v45++;
        while (v46 != v29);
        v30 = 0;
      }
    }
    else
    {
      v28 = 0;
      v29 = 0;
      v30 = 1;
    }
  }
  v105[0] = (unsigned __int8 *)this;
  v47 = 126 - 2 * __clz(v29 - v28);
  if (v30)
    v48 = 0;
  else
    v48 = v47;
  sub_1C590CA30(v28, v29, (uint64_t)v105, v48, 1);
  llvm::ThreadPool::ThreadPool((uint64_t)v105, dword_1ED834900);
  v49 = (int *)v78;
  v50 = v79;
  if (v78 != v79)
  {
    while (1)
    {
      v51 = *v49;
      v52 = *((_QWORD *)this + 59) + 8 * v51;
      v53 = operator new(0x48uLL);
      *v53 = &off_1E817F100;
      v53[1] = v52;
      v53[2] = &v89;
      v53[3] = &v99;
      v53[4] = this;
      v53[5] = &v93;
      v53[6] = &v95;
      v53[7] = &__p;
      *((_DWORD *)v53 + 16) = v51;
      v108 = v53;
      sub_1C6208584((uint64_t)v105, v107, 0, (std::future<void> *)&v77);
      v54 = v108;
      if (v108 == v107)
        break;
      if (v108)
      {
        v55 = (void (**)(uint64_t *))(*v108 + 40);
        goto LABEL_77;
      }
LABEL_78:
      std::shared_future<void>::~shared_future(&v77);
      if (++v49 == v50)
        goto LABEL_79;
    }
    v55 = (void (**)(uint64_t *))(v107[0] + 32);
    v54 = v107;
LABEL_77:
    (*v55)(v54);
    goto LABEL_78;
  }
LABEL_79:
  llvm::ThreadPool::~ThreadPool((llvm::ThreadPool *)v105);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 93) + 32))(*((_QWORD *)this + 93));
  v56 = *((_BYTE *)this + 583);
  v57 = v56;
  if (v56 >= 0)
    v58 = (char *)this + 560;
  else
    v58 = (char *)*((_QWORD *)this + 70);
  v59 = v56 & 0x7F;
  if (v57 >= 0)
    v60 = v59;
  else
    v60 = *((_QWORD *)this + 71);
  v61 = *(_OWORD *)((char *)this + 600);
  v76[0] = *(_OWORD *)((char *)this + 584);
  v76[1] = v61;
  v76[2] = *(_OWORD *)((char *)this + 616);
  v62 = (llvm::sys *)llvm::pruneCache(v58, v60, (uint64_t)v76);
  llvm::sys::RunInterruptHandlers(v62);
  if ((byte_1ED836D79 & 1) != 0 || byte_1EF8F7308)
    llvm::PrintStatistics(v63);
  llvm::reportAndResetTimings(0, v64);
  if (v78)
  {
    v79 = (int *)v78;
    operator delete(v78);
  }
  sub_1C58F18EC((uint64_t)&__p);
  MEMORY[0x1CAA32FB4](v84[0], 8);
  sub_1C58F186C((uint64_t)&v89);
  sub_1C58F17E8((uint64_t)&v95);
  MEMORY[0x1CAA32FB4](v86, 8);
  sub_1C62B26F8((uint64_t)&v99);
  sub_1C61A8A20((uint64_t)v103);
  v65 = v93;
  v93 = 0;
  if (v65)
  {
    v66 = sub_1C61A8910((uint64_t)v65);
    MEMORY[0x1CAA32FC0](v66, 0x10B0C4007EAB999);
  }
}

uint64_t sub_1C590B598(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E817F048;
  std::mutex::~mutex((std::mutex *)(a1 + 752));
  v2 = *(_QWORD *)(a1 + 744);
  *(_QWORD *)(a1 + 744) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_1C59074A4(a1);
}

void sub_1C590B5E4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E817F048;
  std::mutex::~mutex((std::mutex *)(a1 + 752));
  v2 = *(_QWORD *)(a1 + 744);
  *(_QWORD *)(a1 + 744) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1C59074A4(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C590B644(_QWORD *a1)
{
  *a1 = off_1E817F190;
  sub_1C590C728((uint64_t)(a1 + 1));
  return a1;
}

void sub_1C590B674(_QWORD *a1)
{
  *a1 = off_1E817F190;
  sub_1C590C728((uint64_t)(a1 + 1));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C590B6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;

  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 48) = v4;
  std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 72));
  result = sub_1C58FC150(a1 + 104, a2 + 96);
  v6 = *(_DWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 416) = v6;
  return result;
}

void sub_1C590B72C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C590B740(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E817F0B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C590B780(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817F0B8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C590B7A8(uint64_t a1)
{
  signed int v2;
  uint64_t v3;
  char v4;
  int v5;
  const void *v6;
  unint64_t v7;
  unint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  llvm::Module *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Module *v22;
  void *__p[2];
  char v24;
  llvm::LLVMContextImpl *v25;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 8);
  llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v25);
  *((_BYTE *)v25 + 2664) = byte_1ED834048;
  v4 = *(_BYTE *)(v3 + 727);
  v5 = v4;
  if (v4 >= 0)
    v6 = (const void *)(v3 + 704);
  else
    v6 = *(const void **)(v3 + 704);
  v7 = v4 & 0x7F;
  if (v5 >= 0)
    v8 = v7;
  else
    v8 = *(_QWORD *)(v3 + 712);
  llvm::ThinLTOCodeGenerator::computeThinLTOOutputPath(v2, v6, v8, (llvm::Triple *)(v3 + 8), __p);
  llvm::ThinLTOCodeGenerator::loadModuleFromInput(**(__int128 ****)(a1 + 16), (llvm::LLVMContext *)&v25, 0, 0, &v22);
  llvm::ThinLTOCodeGenerator::codegen((llvm::ThinLTOCodeGenerator *)v3, v22, &v21);
  if (*(char *)(v3 + 727) < 0)
    v10 = *(_QWORD *)(v3 + 712);
  else
    v10 = *(unsigned __int8 *)(v3 + 727);
  v11 = v2;
  if (v10)
  {
    if (v24 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if (v24 >= 0)
      v13 = v24 & 0x7F;
    else
      v13 = (unint64_t)__p[1];
    v14 = v21;
    llvm::ThinLTOCodeGenerator::writeGeneratedObject(v12, v13, 0, v21, &v19);
    v15 = *(_QWORD *)(v3 + 448) + 24 * (int)v11;
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    v16 = v19;
    *(_QWORD *)(v15 + 16) = v20;
    *(_OWORD *)v15 = v16;
  }
  else
  {
    v17 = *(_QWORD *)(v3 + 424);
    v14 = *(_QWORD *)(v17 + 8 * v2);
    *(_QWORD *)(v17 + 8 * v11) = v21;
    if (!v14)
      goto LABEL_22;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
LABEL_22:
  v18 = v22;
  v22 = 0;
  if (v18)
  {
    llvm::Module::~Module(v18);
    MEMORY[0x1CAA32FC0]();
  }
  if (v24 < 0)
    operator delete(__p[0]);
  llvm::LLVMContext::~LLVMContext(&v25, v9);
}

void sub_1C590B948()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C590B95C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1E817F100;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1C590B9AC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E817F100;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C590B9E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  char v15;
  int v16;
  const void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  std::string::size_type v31;
  uint64_t v32;
  std::string::size_type v33;
  llvm::LLVMContextImpl *v34;
  size_t v35;
  uint64_t *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t *v40;
  llvm *v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t *v48;
  char v49;
  int v50;
  const void *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t **v61;
  char v62;
  BOOL v63;
  uint64_t *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  char **v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  _QWORD *v74;
  __int128 *v75;
  void (**v76)(__int128 *);
  llvm::raw_ostream *v77;
  llvm::raw_ostream *v78;
  _DWORD *v79;
  uint64_t v80;
  std::string *v81;
  size_t size;
  _BYTE *v83;
  char *v84;
  llvm::Value *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  size_t *__s2;
  unsigned __int8 *__s2a;
  void *v91[3];
  _QWORD v92[2];
  char **v93;
  char *v94[2];
  llvm::LLVMContextImpl *v95;
  void *__p;
  char v97;
  void (***v98)(void **__return_ptr, _QWORD);
  void *v99;
  size_t v100;
  char v101;
  __int128 v102;
  uint64_t v103;
  __int128 *v104;
  __int16 v105;
  std::string v106;
  _BYTE v107[1024];
  uint64_t v108;
  char v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a1 + 64);
  v88 = (int)v2;
  v4 = *(uint64_t **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5 = *v4;
  v8 = *(unsigned __int8 **)(v5 + 224);
  v6 = v5 + 224;
  v7 = v8;
  v9 = *(_BYTE *)(v6 + 23);
  v10 = *(_QWORD *)(a1 + 32);
  if (v9 >= 0)
    v11 = (unsigned __int8 *)v6;
  else
    v11 = v7;
  v12 = *(_QWORD *)(v6 + 8);
  if (v9 >= 0)
    v13 = v9 & 0x7F;
  else
    v13 = v12;
  __s2 = *sub_1C6292894(v3, v11, v13) + 1;
  v14 = *sub_1C62B21C4(*(_QWORD *)(a1 + 24), v11, v13) + 8;
  v15 = *(_BYTE *)(v10 + 727);
  v16 = v15;
  if (v15 >= 0)
    v17 = (const void *)(v10 + 704);
  else
    v17 = *(const void **)(v10 + 704);
  v18 = v15 & 0x7F;
  if (v16 >= 0)
    v19 = v18;
  else
    v19 = *(_QWORD *)(v10 + 712);
  v87 = v2;
  llvm::ThinLTOCodeGenerator::computeThinLTOOutputPath(v2, v17, v19, (llvm::Triple *)(v10 + 8), &v99);
  v20 = **(_QWORD **)(a1 + 40);
  if (v101 >= 0)
    v21 = &v99;
  else
    v21 = v99;
  if (v101 >= 0)
    v22 = v101 & 0x7F;
  else
    v22 = v100;
  v23 = *sub_1C56D84B0(*(llvm::StringMapImpl **)(a1 + 48), v11, v13) + 8;
  v24 = sub_1C58EDD20(*(llvm::StringMapImpl **)(a1 + 56), v11, v13);
  llvm::ThinLTOCodeGenerator::createModuleCacheEntry(v10, v20, v11, v13, v21, v22, v23, (uint64_t)__s2, (uint64_t *)&v98, (_QWORD *)(*v24 + 8), v14, *(_DWORD *)(v10 + 732), *(_BYTE *)(v10 + 730), v10 + 8);
  v25 = (uint64_t)v98;
  (**v98)(&__p, v98);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v25 + 8))(&v106, v25);
  if ((v106.__r_.__value_.__s.__data_[16] & 1) == 0)
  {
    if (*(char *)(v10 + 727) < 0)
    {
      if (*(_QWORD *)(v10 + 712))
        goto LABEL_22;
    }
    else if (*(_BYTE *)(v10 + 727))
    {
LABEL_22:
      if (v101 >= 0)
        v26 = &v99;
      else
        v26 = v99;
      if (v101 >= 0)
        v27 = v101 & 0x7F;
      else
        v27 = v100;
      llvm::ThinLTOCodeGenerator::writeGeneratedObject(v26, v27, v25, (uint64_t)v106.__r_.__value_.__l.__data_, &v102);
      v28 = *(_QWORD *)(v10 + 448) + 24 * (int)v88;
      if (*(char *)(v28 + 23) < 0)
        operator delete(*(void **)v28);
      v29 = v102;
      *(_QWORD *)(v28 + 16) = v103;
      *(_OWORD *)v28 = v29;
LABEL_34:
      if ((v106.__r_.__value_.__s.__data_[16] & 1) == 0)
      {
        v33 = v106.__r_.__value_.__r.__words[0];
        v106.__r_.__value_.__r.__words[0] = 0;
        if (v33)
          (*(void (**)(std::string::size_type))(*(_QWORD *)v33 + 8))(v33);
      }
      goto LABEL_37;
    }
    v30 = *(_QWORD *)(v10 + 424);
    v31 = v106.__r_.__value_.__r.__words[0];
    v106.__r_.__value_.__r.__words[0] = 0;
    v32 = *(_QWORD *)(v30 + 8 * v88);
    *(_QWORD *)(v30 + 8 * v88) = v31;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    goto LABEL_34;
  }
  v86 = a1;
  llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v95);
  v34 = v95;
  *((_BYTE *)v95 + 2664) = byte_1ED834048;
  if (!*((_BYTE *)v34 + 1184))
  {
    sub_1C6240860((uint64_t)v34 + 1160);
    *((_DWORD *)v34 + 294) = 0;
    *(_OWORD *)((char *)v34 + 1160) = 0u;
    *((_BYTE *)v34 + 1184) = 1;
  }
  if (byte_1ED8344B7 >= 0)
    v35 = byte_1ED8344B7 & 0x7F;
  else
    v35 = qword_1ED8344A8;
  if (byte_1ED8344B7 >= 0)
    v36 = &qword_1ED8344A0;
  else
    v36 = (uint64_t *)qword_1ED8344A0;
  if (byte_1ED83459F >= 0)
    v37 = byte_1ED83459F & 0x7F;
  else
    v37 = qword_1ED834590;
  if (byte_1ED83459F >= 0)
    v38 = (char *)&qword_1ED834588;
  else
    v38 = (char *)qword_1ED834588;
  if (byte_1ED834687 >= 0)
    v39 = byte_1ED834687 & 0x7F;
  else
    v39 = qword_1ED834678;
  if (byte_1ED834687 >= 0)
    v40 = &qword_1ED834670;
  else
    v40 = (uint64_t *)qword_1ED834670;
  llvm::lto::setupLLVMOptimizationRemarks(v36, v35, (uint64_t *)&v95, v38, v37, (uint64_t)v40, v39, byte_1ED8341C8, (uint64_t)&v108, v88, 1, -1);
  if ((v109 & 1) != 0)
  {
    v77 = (llvm::raw_ostream *)llvm::errs(v41);
    v78 = v77;
    v79 = (_DWORD *)*((_QWORD *)v77 + 4);
    if (*((_QWORD *)v77 + 3) - (_QWORD)v79 > 6uLL)
    {
      *(_DWORD *)((char *)v79 + 3) = 540701295;
      *v79 = 1869771333;
      *((_QWORD *)v77 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v77, "Error: ", 7uLL);
    }
    if ((v109 & 1) != 0)
    {
      v80 = v108;
      v108 = 0;
    }
    else
    {
      v80 = 0;
    }
    *(_QWORD *)&v102 = v80;
    sub_1C61D2548((char **)&v102, &v106);
    if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v81 = &v106;
    else
      v81 = (std::string *)v106.__r_.__value_.__r.__words[0];
    if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v106.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v106.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v78, (const char *)v81, size);
    v83 = (_BYTE *)*((_QWORD *)v78 + 4);
    if (*((_BYTE **)v78 + 3) == v83)
    {
      llvm::raw_ostream::write(v78, "\n", 1uLL);
    }
    else
    {
      *v83 = 10;
      ++*((_QWORD *)v78 + 4);
    }
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v106.__r_.__value_.__l.__data_);
    if ((_QWORD)v102)
      (*(void (**)(_QWORD))(*(_QWORD *)v102 + 8))(v102);
    v84 = "ThinLTO: Can't get an output file for the remarks";
LABEL_128:
    llvm::report_fatal_error((llvm *)v84, (const char *)1);
  }
  v94[0] = 0;
  v94[1] = 0;
  v93 = v94;
  v42 = *(uint64_t **)(a1 + 24);
  v43 = sub_1C56D84B0(*(llvm::StringMapImpl **)(a1 + 48), v11, v13);
  llvm::gatherImportedSummariesForModule(v11, v13, v42, *v43 + 8, (uint64_t **)&v93);
  v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
  *(_OWORD *)&v106.__r_.__value_.__r.__words[1] = xmmword_1C86520E0;
  *(_QWORD *)&v102 = "index-";
  v103 = v87;
  v105 = 2307;
  v92[0] = llvm::sys::fs::createTemporaryFile((uint64_t *)&v102, (__int128 *)"bc", 2, &v106, 0);
  v92[1] = v44;
  if (LODWORD(v92[0]))
  {
    v84 = "could not create temporary file for thinlto codegen output";
    goto LABEL_128;
  }
  __s2a = v11;
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v102, v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_, (uint64_t)v92, 0);
  if (LODWORD(v92[0]))
  {
    v84 = "could not open temporary file to write thinlto codegen output";
    goto LABEL_128;
  }
  llvm::writeIndexToFile(**(llvm::ModuleSummaryIndex ***)(a1 + 40), (llvm::raw_ostream *)&v102, &v93);
  std::mutex::lock((std::mutex *)(v10 + 752));
  llvm::sys::RemoveFileOnSignal(v106.__r_.__value_.__l.__data_, v106.__r_.__value_.__l.__size_);
  std::mutex::unlock((std::mutex *)(v10 + 752));
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v102);
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = (uint64_t *)v93;
  if (v93 != v94)
  {
    v47 = 0;
    v46 = 0;
    v45 = 0;
    do
    {
      v49 = *((_BYTE *)v48 + 55);
      v50 = v49;
      if (v49 >= 0)
        v51 = v48 + 4;
      else
        v51 = (const void *)v48[4];
      v52 = v48[5];
      v53 = v49 & 0x7F;
      if (v50 >= 0)
        v52 = v53;
      if (v52 != v13 || v13 && memcmp(v51, __s2a, v13))
      {
        if (v46 >= v45)
        {
          v57 = (v46 - v47) >> 4;
          v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 60)
            abort();
          if ((v45 - v47) >> 3 > v58)
            v58 = (v45 - v47) >> 3;
          if ((unint64_t)(v45 - v47) >= 0x7FFFFFFFFFFFFFF0)
            v59 = 0xFFFFFFFFFFFFFFFLL;
          else
            v59 = v58;
          if (v59 >> 60)
            sub_1C4764EE4();
          v60 = (char *)operator new(16 * v59);
          v61 = (uint64_t **)&v60[16 * v57];
          v62 = *((_BYTE *)v48 + 55);
          v63 = v62 < 0;
          if (v62 >= 0)
            v64 = v48 + 4;
          else
            v64 = (uint64_t *)v48[4];
          *v61 = v64;
          v65 = v62 & 0x7F;
          if (v63)
            v65 = v48[5];
          v61[1] = (uint64_t *)v65;
          if (v46 == v47)
          {
            v67 = &v60[16 * v57];
          }
          else
          {
            v66 = &v60[16 * v57];
            do
            {
              v67 = v66 - 16;
              *((_OWORD *)v66 - 1) = *((_OWORD *)v46 - 1);
              v46 -= 16;
              v66 -= 16;
            }
            while (v46 != v47);
          }
          v45 = &v60[16 * v59];
          v46 = (char *)(v61 + 2);
          if (v47)
            operator delete(v47);
          v47 = v67;
        }
        else
        {
          *(_QWORD *)v46 = v51;
          v54 = *((_BYTE *)v48 + 55);
          v55 = v54;
          v56 = v54 & 0x7F;
          if (v55 < 0)
            v56 = v48[5];
          *((_QWORD *)v46 + 1) = v56;
          v46 += 16;
        }
      }
      v68 = (char *)v48[1];
      if (v68)
      {
        do
        {
          v69 = (char **)v68;
          v68 = *(char **)v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          v69 = (char **)v48[2];
          v70 = *v69 == (char *)v48;
          v48 = (uint64_t *)v69;
        }
        while (!v70);
      }
      v48 = (uint64_t *)v69;
    }
    while (v69 != v94);
    v25 = (uint64_t)v98;
  }
  v71 = *(_QWORD *)(v10 + 744);
  v72 = **(_QWORD **)(v86 + 8);
  v73 = *(_OWORD *)&v106.__r_.__value_.__l.__data_;
  v91[0] = v47;
  v91[1] = v46;
  v91[2] = v45;
  v74 = operator new(0x20uLL);
  *v74 = &off_1E817F148;
  v74[1] = v25;
  v74[2] = v10;
  *((_DWORD *)v74 + 6) = v87;
  v104 = (__int128 *)v74;
  llvm::ThinLTOCodegenManager::createInvocation(v71, v72, (void *)v73, *((size_t *)&v73 + 1), (uint64_t)v91, &v102);
  v75 = v104;
  if (v104 == &v102)
  {
    v76 = (void (**)(__int128 *))(v102 + 32);
    v75 = &v102;
LABEL_131:
    (*v76)(v75);
    goto LABEL_132;
  }
  if (v104)
  {
    v76 = (void (**)(__int128 *))(*(_QWORD *)v104 + 40);
    goto LABEL_131;
  }
LABEL_132:
  if (v91[0])
    operator delete(v91[0]);
  if (v106.__r_.__value_.__l.__data_ != v107)
    free(v106.__r_.__value_.__l.__data_);
  sub_1C58F178C((uint64_t)&v93, v94[0]);
  sub_1C62B2694((uint64_t)&v108);
  llvm::LLVMContext::~LLVMContext(&v95, v85);
LABEL_37:
  if (v97 < 0)
    operator delete(__p);
  v98 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 56))(v25);
  if (v101 < 0)
    operator delete(v99);
}

void sub_1C590C250()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C590C264(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E817F148;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C590C2A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817F148;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C590C2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  const llvm::Twine *v18;
  const std::error_category *v19;
  void *v20;
  size_t v21;
  __int128 *p_dst;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  void **p_src;
  uint64_t v29;
  uint64_t v30[4];
  __int16 v31;
  std::string v32;
  uint64_t v33[4];
  __int16 v34;
  uint64_t v35[4];
  __int16 v36;
  uint64_t v37[4];
  __int16 v38;
  void **v39[4];
  __int16 v40;
  uint64_t v41[4];
  __int16 v42;
  _QWORD *v43[4];
  __int16 v44;
  __int128 __dst;
  const char *v46;
  __int16 v47;
  std::error_code v48;
  std::error_code v49;
  char v50;
  __int16 v51;
  void *__src;
  __int128 __len;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 1056), *(_QWORD *)(a2 + 1064));
  v5 = *(_BYTE *)(v4 + 727);
  if (v5 < 0)
  {
    if (!*(_QWORD *)(v4 + 712))
      goto LABEL_3;
  }
  else if (!*(_BYTE *)(v4 + 727))
  {
LABEL_3:
    v55 = 261;
    v6 = *(_QWORD *)(a2 + 1064);
    __src = *(void **)(a2 + 1056);
    *(_QWORD *)&__len = v6;
    sub_1C5E1F6CC((unsigned __int8 *)&__src, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v49);
    if ((v50 & 1) == 0)
    {
      std::system_category();
      v7 = *(_QWORD *)&v49.__val_;
LABEL_6:
      v8 = *(int *)(a1 + 24);
      v9 = *(_QWORD *)(v4 + 424);
      v10 = *(_QWORD *)(v9 + 8 * v8);
      *(_QWORD *)(v9 + 8 * v8) = v7;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v55 = 261;
      v11 = *(_QWORD *)(a2 + 1064);
      __src = *(void **)(a2 + 1056);
      *(_QWORD *)&__len = v11;
      llvm::sys::fs::remove((llvm::sys::fs *)&__src, (const llvm::Twine *)1);
      return;
    }
    v7 = *(_QWORD *)&v49.__val_;
    v48 = v49;
    if (!v49.__val_)
      goto LABEL_6;
    v39[0] = (void **)"Could not load output memory buffer for ";
    v40 = 259;
    v38 = 261;
    v27 = *(_QWORD *)(a2 + 1064);
    v37[0] = *(_QWORD *)(a2 + 1056);
    v37[1] = v27;
    sub_1C6131AAC((uint64_t *)v39, v37, (uint64_t)v41);
    v35[0] = (uint64_t)"': ";
    v36 = 259;
    sub_1C6131AAC(v41, v35, (uint64_t)v43);
    std::error_code::message(&v32, &v48);
    v34 = 260;
    v33[0] = (uint64_t)&v32;
    sub_1C6131AAC((uint64_t *)v43, v33, (uint64_t)&__dst);
    v30[0] = (uint64_t)"\n";
    v31 = 259;
    sub_1C6131AAC((uint64_t *)&__dst, v30, (uint64_t)&__src);
    p_src = &__src;
LABEL_38:
    llvm::report_fatal_error((uint64_t)p_src, 1);
  }
  if (v5 >= 0)
    v12 = (const void *)(v4 + 704);
  else
    v12 = *(const void **)(v4 + 704);
  if (v5 >= 0)
    v13 = *(unsigned __int8 *)(v4 + 727);
  else
    v13 = *(_QWORD *)(v4 + 712);
  __src = &v54;
  __len = xmmword_1C86520E0;
  if (v13 >= 0x401)
  {
    v26 = v12;
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, &v54, v13, 1);
    v12 = v26;
    v16 = (uint64_t *)__src;
    v14 = __len;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = &v54;
    if (!v13)
      goto LABEL_20;
  }
  memcpy((char *)v16 + v14, v12, v13);
  v15 = __len;
LABEL_20:
  *(_QWORD *)&__len = v15 + v13;
  *(_QWORD *)&__dst = *(unsigned int *)(a1 + 24);
  v46 = "thinlto.bc";
  v47 = 777;
  v44 = 257;
  v42 = 257;
  v40 = 257;
  llvm::sys::path::append(&__src, 0, (_QWORD **)&__dst, v43, (_QWORD **)v41, v39);
  v47 = 261;
  v17 = *(_QWORD *)(a2 + 1064);
  *(_QWORD *)&__dst = *(_QWORD *)(a2 + 1056);
  *((_QWORD *)&__dst + 1) = v17;
  v44 = 261;
  v43[0] = __src;
  v43[1] = (_QWORD *)__len;
  *(_QWORD *)&v48.__val_ = llvm::sys::fs::rename((llvm::sys::fs *)&__dst, (const llvm::Twine *)v43, v18);
  v48.__cat_ = v19;
  if (v48.__val_)
  {
    v37[0] = (uint64_t)"Could not write output to output file directory for";
    v38 = 259;
    v36 = 261;
    v29 = *(_QWORD *)(a2 + 1064);
    v35[0] = *(_QWORD *)(a2 + 1056);
    v35[1] = v29;
    sub_1C6131AAC(v37, v35, (uint64_t)v39);
    v33[0] = (uint64_t)": ";
    v34 = 259;
    sub_1C6131AAC((uint64_t *)v39, v33, (uint64_t)v41);
    std::error_code::message(&v32, &v48);
    v31 = 260;
    v30[0] = (uint64_t)&v32;
    sub_1C6131AAC(v41, v30, (uint64_t)v43);
    *(_QWORD *)&v49.__val_ = "\n";
    v51 = 259;
    sub_1C6131AAC((uint64_t *)v43, (uint64_t *)&v49.__val_, (uint64_t)&__dst);
    p_src = (void **)&__dst;
    goto LABEL_38;
  }
  v20 = __src;
  if (__src)
  {
    v21 = __len;
    if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if ((unint64_t)__len >= 0x17)
    {
      v23 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)__len | 7) != 0x17)
        v23 = __len | 7;
      v24 = v23 + 1;
      p_dst = (__int128 *)operator new(v23 + 1);
      *((_QWORD *)&__dst + 1) = v21;
      v46 = (const char *)(v24 | 0x8000000000000000);
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v46) = __len;
      p_dst = &__dst;
      if (!(_QWORD)__len)
        goto LABEL_31;
    }
    memmove(p_dst, v20, v21);
LABEL_31:
    *((_BYTE *)p_dst + v21) = 0;
    goto LABEL_32;
  }
  __dst = 0uLL;
  v46 = 0;
LABEL_32:
  v25 = *(_QWORD *)(v4 + 448) + 24 * *(int *)(a1 + 24);
  if (*(char *)(v25 + 23) < 0)
    operator delete(*(void **)v25);
  *(_OWORD *)v25 = __dst;
  *(_QWORD *)(v25 + 16) = v46;
  if (__src != &v54)
    free(__src);
}

uint64_t sub_1C590C728(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v6;

  if (*(char *)(a1 + 399) < 0)
    operator delete(*(void **)(a1 + 376));
  v6 = (void **)(a1 + 352);
  sub_1C4765410(&v6);
  if (*(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  if (*(char *)(a1 + 303) < 0)
    operator delete(*(void **)(a1 + 280));
  if (*(char *)(a1 + 279) < 0)
    operator delete(*(void **)(a1 + 256));
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(char *)(a1 + 183) < 0)
    operator delete(*(void **)(a1 + 160));
  v2 = *(std::__shared_weak_count **)(a1 + 144);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

BOOL sub_1C590C830(uint64_t **a1, unsigned __int8 *__s1, size_t __n, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  int v8;
  size_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  _BOOL8 result;
  uint64_t *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v31 = a4;
  v4 = *a1;
  v5 = *((unsigned int *)*a1 + 2);
  v29 = a4;
  if ((_DWORD)v5)
  {
    v8 = 0;
    if (__n)
    {
      v9 = __n;
      v10 = __s1;
      do
      {
        v11 = *v10++;
        v8 = 33 * v8 + v11;
        --v9;
      }
      while (v9);
    }
    v12 = *v4;
    v13 = *v4 + 8 * v5 + 8;
    v14 = 1;
    v15 = v8;
    while (1)
    {
      v16 = v15 & (v5 - 1);
      v17 = *(_QWORD **)(v12 + 8 * v16);
      if (v17 != (_QWORD *)-8)
      {
        if (!v17)
          goto LABEL_15;
        if (*(_DWORD *)(v13 + 4 * v16) == v8
          && __n == *v17
          && (!__n || !memcmp(__s1, (char *)v17 + *((unsigned int *)v4 + 5), __n)))
        {
          break;
        }
      }
      v15 = v14 + v16;
      ++v14;
    }
    if ((_DWORD)v16 != -1 && (int)v16 != v5)
    {
      v26 = (uint64_t *)(*(_QWORD *)(v12 + 8 * (int)v16) + 8);
      v32 = 0;
      if ((sub_1C61A7654(v26, &v31, &v32) & 1) != 0)
        return 1;
      v29 = v31;
    }
  }
LABEL_15:
  v18 = a1[1];
  v19 = *((_DWORD *)v18 + 4);
  if (!v19)
    return 0;
  v20 = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8);
  v21 = *v18;
  v22 = v19 - 1;
  v23 = v22 & (37 * v20);
  v24 = *(_QWORD *)(v21 + 8 * v23);
  if (v20 == v24)
    return 1;
  v27 = 1;
  do
  {
    result = v24 != -1;
    if (v24 == -1)
      break;
    v28 = v23 + v27++;
    v23 = v28 & v22;
    v24 = *(_QWORD *)(v21 + 8 * v23);
  }
  while (v20 != v24);
  return result;
}

BOOL sub_1C590C9CC(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v7;

  v7 = a2;
  v5 = sub_1C5309DE0(*a1, &v7);
  return (uint64_t *)(**a1 + 16 * *((unsigned int *)*a1 + 4)) == v5 || v5[1] == a3;
}

int *sub_1C590CA30(int *result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  BOOL v33;
  uint64_t v34;
  int *v35;
  int *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int *v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  int *v69;
  uint64_t v70;
  int *v71;
  int v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  unint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int *v81;
  int *v82;
  int *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int *v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v43 = *(a2 - 1);
        v44 = *v10;
        if (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)a3 + 472) + 8 * v43) + 8) > *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)a3 + 472) + 8 * v44) + 8))
        {
          *v10 = v43;
          *(a2 - 1) = v44;
        }
        return result;
      case 3:
        return sub_1C590D304(v10, v10 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 472));
      case 4:
        return sub_1C590D630(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5:
        v45 = v10 + 2;
        v46 = v10 + 3;
        result = sub_1C590D630(v10, v10 + 1, v10 + 2, v10 + 3, a3);
        v47 = *(a2 - 1);
        v48 = v10[3];
        v49 = *(_QWORD *)(*(_QWORD *)a3 + 472);
        if (*(_QWORD *)(**(_QWORD **)(v49 + 8 * v47) + 8) > *(_QWORD *)(**(_QWORD **)(v49 + 8 * v48) + 8))
        {
          *v46 = v47;
          *(a2 - 1) = v48;
          v50 = *v46;
          v51 = *v45;
          v52 = *(_QWORD *)(**(_QWORD **)(v49 + 8 * v50) + 8);
          if (v52 > *(_QWORD *)(**(_QWORD **)(v49 + 8 * v51) + 8))
          {
            *v45 = v50;
            *v46 = v51;
            v53 = v10[1];
            if (v52 > *(_QWORD *)(**(_QWORD **)(v49 + 8 * v53) + 8))
            {
              v10[1] = v50;
              v10[2] = v53;
              v54 = *v10;
              if (v52 > *(_QWORD *)(**(_QWORD **)(v49 + 8 * v54) + 8))
              {
                *v10 = v50;
                v10[1] = v54;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 95)
        {
          v55 = v10 + 1;
          v57 = v10 == a2 || v55 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = *(_QWORD *)(*(_QWORD *)a3 + 472);
              v60 = v10;
              do
              {
                v62 = *v60;
                v61 = v60[1];
                v60 = v55;
                v63 = *(_QWORD *)(**(_QWORD **)(v59 + 8 * v61) + 8);
                if (v63 > *(_QWORD *)(**(_QWORD **)(v59 + 8 * v62) + 8))
                {
                  v64 = v58;
                  while (1)
                  {
                    *(int *)((char *)v10 + v64 + 4) = v62;
                    if (!v64)
                      break;
                    v62 = *(int *)((char *)v10 + v64 - 4);
                    v64 -= 4;
                    if (v63 <= *(_QWORD *)(**(_QWORD **)(v59 + 8 * v62) + 8))
                    {
                      v65 = (int *)((char *)v10 + v64 + 4);
                      goto LABEL_80;
                    }
                  }
                  v65 = v10;
LABEL_80:
                  *v65 = v61;
                }
                v55 = v60 + 1;
                v58 += 4;
              }
              while (v60 + 1 != a2);
            }
          }
          else if (!v57)
          {
            v96 = *(_QWORD *)(*(_QWORD *)a3 + 472);
            do
            {
              v98 = *v9;
              v97 = v9[1];
              v9 = v55;
              v99 = *(_QWORD *)(**(_QWORD **)(v96 + 8 * v97) + 8);
              if (v99 > *(_QWORD *)(**(_QWORD **)(v96 + 8 * v98) + 8))
              {
                do
                {
                  *v55 = v98;
                  v98 = *(v55 - 2);
                  --v55;
                }
                while (v99 > *(_QWORD *)(**(_QWORD **)(v96 + 8 * v98) + 8));
                *v55 = v97;
              }
              v55 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v66 = (unint64_t)(v12 - 2) >> 1;
            result = *(int **)a3;
            v67 = v66;
            do
            {
              v68 = v67;
              v69 = result;
              if (v66 >= v67)
              {
                v70 = (2 * v67) | 1;
                v71 = &v10[v70];
                v72 = *v71;
                if (2 * v68 + 2 >= v12)
                {
                  v73 = *((_QWORD *)result + 59);
                }
                else
                {
                  v73 = *((_QWORD *)result + 59);
                  if (*(_QWORD *)(**(_QWORD **)(v73 + 8 * v72) + 8) > *(_QWORD *)(**(_QWORD **)(v73 + 8 * v71[1])
                                                                                     + 8))
                  {
                    v72 = v71[1];
                    ++v71;
                    v70 = 2 * v68 + 2;
                  }
                }
                v74 = &v10[v68];
                v75 = *v74;
                v76 = *(_QWORD *)(**(_QWORD **)(v73 + 8 * v75) + 8);
                if (*(_QWORD *)(**(_QWORD **)(v73 + 8 * v72) + 8) <= v76)
                {
                  do
                  {
                    v77 = v71;
                    *v74 = v72;
                    if (v66 < v70)
                      break;
                    v78 = (2 * v70) | 1;
                    v71 = &v10[v78];
                    v70 = 2 * v70 + 2;
                    v72 = *v71;
                    if (v70 >= v12)
                    {
                      v70 = v78;
                    }
                    else if (*(_QWORD *)(**(_QWORD **)(v73 + 8 * v72) + 8) <= *(_QWORD *)(**(_QWORD **)(v73 + 8 * v71[1])
                                                                                             + 8))
                    {
                      v70 = v78;
                    }
                    else
                    {
                      v72 = v71[1];
                      ++v71;
                    }
                    v74 = v77;
                  }
                  while (*(_QWORD *)(**(_QWORD **)(v73 + 8 * v72) + 8) <= v76);
                  *v77 = v75;
                  result = *(int **)a3;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            do
            {
              v79 = 0;
              v80 = *v10;
              v81 = v10;
              do
              {
                v82 = &v81[v79];
                v85 = v82[1];
                v83 = v82 + 1;
                v84 = v85;
                v86 = (2 * v79) | 1;
                v79 = 2 * v79 + 2;
                if (v79 >= v12)
                {
                  v79 = v86;
                }
                else
                {
                  result = v83 + 1;
                  if (*(_QWORD *)(**(_QWORD **)(*((_QWORD *)v69 + 59) + 8 * v84) + 8) <= *(_QWORD *)(**(_QWORD **)(*((_QWORD *)v69 + 59) + 8 * v83[1]) + 8))
                  {
                    v79 = v86;
                  }
                  else
                  {
                    v84 = v83[1];
                    ++v83;
                  }
                }
                *v81 = v84;
                v81 = v83;
              }
              while (v79 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
              if (v83 == --a2)
              {
                *v83 = v80;
              }
              else
              {
                *v83 = *a2;
                *a2 = v80;
                v87 = (char *)v83 - (char *)v10 + 4;
                if (v87 >= 5)
                {
                  v88 = (((unint64_t)v87 >> 2) - 2) >> 1;
                  v89 = &v10[v88];
                  v90 = *v89;
                  v91 = *v83;
                  v92 = *((_QWORD *)v69 + 59);
                  v93 = *(_QWORD *)(**(_QWORD **)(v92 + 8 * v91) + 8);
                  if (*(_QWORD *)(**(_QWORD **)(v92 + 8 * v90) + 8) > v93)
                  {
                    do
                    {
                      v94 = v89;
                      *v83 = v90;
                      if (!v88)
                        break;
                      v88 = (v88 - 1) >> 1;
                      v89 = &v10[v88];
                      v90 = *v89;
                      result = *(int **)(**(_QWORD **)(v92 + 8 * v90) + 8);
                      v83 = v94;
                    }
                    while ((unint64_t)result > v93);
                    *v94 = v91;
                  }
                }
              }
            }
            while (v12-- > 2);
          }
          return result;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &v10[(unint64_t)v12 >> 1];
        v15 = *(_QWORD *)(*(_QWORD *)a3 + 472);
        if ((unint64_t)v11 < 0x201)
        {
          result = sub_1C590D304(v14, v9, a2 - 1, v15);
        }
        else
        {
          sub_1C590D304(v9, v14, a2 - 1, v15);
          sub_1C590D304(v9 + 1, v14 - 1, a2 - 2, *(_QWORD *)(*(_QWORD *)a3 + 472));
          sub_1C590D304(v9 + 2, &v9[v13 + 1], a2 - 3, *(_QWORD *)(*(_QWORD *)a3 + 472));
          result = sub_1C590D304(v14 - 1, v14, &v9[v13 + 1], *(_QWORD *)(*(_QWORD *)a3 + 472));
          v16 = *v9;
          *v9 = *v14;
          *v14 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = *(_QWORD *)a3;
        if ((a5 & 1) == 0)
        {
          v19 = *(_QWORD *)(v18 + 472);
          v20 = *(_QWORD *)(**(_QWORD **)(v19 + 8 * v17) + 8);
          if (*(_QWORD *)(**(_QWORD **)(v19 + 8 * *(v9 - 1)) + 8) > v20)
            goto LABEL_12;
          if (v20 <= *(_QWORD *)(**(_QWORD **)(v19 + 8 * *(a2 - 1)) + 8))
          {
            v35 = v9 + 1;
            do
            {
              v10 = v35;
              if (v35 >= a2)
                break;
              ++v35;
            }
            while (v20 <= *(_QWORD *)(**(_QWORD **)(v19 + 8 * *v10) + 8));
          }
          else
          {
            v10 = v9;
            do
            {
              v34 = v10[1];
              ++v10;
            }
            while (v20 <= *(_QWORD *)(**(_QWORD **)(v19 + 8 * v34) + 8));
          }
          v36 = a2;
          if (v10 < a2)
          {
            v36 = a2;
            do
              v37 = *--v36;
            while (v20 > *(_QWORD *)(**(_QWORD **)(v19 + 8 * v37) + 8));
          }
          if (v10 < v36)
          {
            v38 = *v10;
            v39 = *v36;
            do
            {
              *v10 = v39;
              *v36 = v38;
              do
              {
                v40 = v10[1];
                ++v10;
                v38 = v40;
              }
              while (v20 <= *(_QWORD *)(**(_QWORD **)(v19 + 8 * v40) + 8));
              do
              {
                v41 = *--v36;
                v39 = v41;
              }
              while (v20 > *(_QWORD *)(**(_QWORD **)(v19 + 8 * v41) + 8));
            }
            while (v10 < v36);
          }
          v42 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v42;
          a5 = 0;
          *v42 = v17;
          continue;
        }
        v19 = *(_QWORD *)(v18 + 472);
        v20 = *(_QWORD *)(**(_QWORD **)(v19 + 8 * v17) + 8);
LABEL_12:
        v21 = 0;
        do
          v22 = v9[++v21];
        while (*(_QWORD *)(**(_QWORD **)(v19 + 8 * v22) + 8) > v20);
        v23 = &v9[v21];
        v24 = a2;
        if (v21 == 1)
        {
          v24 = a2;
          do
          {
            if (v23 >= v24)
              break;
            v26 = *--v24;
          }
          while (*(_QWORD *)(**(_QWORD **)(v19 + 8 * v26) + 8) <= v20);
        }
        else
        {
          do
            v25 = *--v24;
          while (*(_QWORD *)(**(_QWORD **)(v19 + 8 * v25) + 8) <= v20);
        }
        if (v23 >= v24)
        {
          v10 = &v9[v21];
        }
        else
        {
          v27 = *v24;
          v28 = v22;
          v10 = v23;
          v29 = v24;
          do
          {
            *v10 = v27;
            *v29 = v28;
            do
            {
              v30 = v10[1];
              ++v10;
              v28 = v30;
            }
            while (*(_QWORD *)(**(_QWORD **)(v19 + 8 * v30) + 8) > v20);
            do
            {
              v31 = *--v29;
              v27 = v31;
            }
            while (*(_QWORD *)(**(_QWORD **)(v19 + 8 * v31) + 8) <= v20);
          }
          while (v10 < v29);
        }
        v32 = v10 - 1;
        if (v10 - 1 != v9)
          *v9 = *v32;
        *v32 = v17;
        if (v23 < v24)
        {
LABEL_33:
          result = (int *)sub_1C590CA30(v9, v10 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v33 = sub_1C590D3BC(v9, v10 - 1, a3);
        result = (int *)sub_1C590D3BC(v10, a2, a3);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = v10 - 1;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

int *sub_1C590D304(int *result, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *result;
  v6 = *(_QWORD *)(**(_QWORD **)(a4 + 8 * v4) + 8);
  v7 = *(_QWORD *)(**(_QWORD **)(a4 + 8 * v5) + 8);
  v8 = *a3;
  v9 = *(_QWORD *)(**(_QWORD **)(a4 + 8 * v8) + 8);
  if (v6 <= v7)
  {
    if (v9 > v6)
    {
      *a2 = v8;
      *a3 = v4;
      v10 = *a2;
      v11 = *result;
      if (*(_QWORD *)(**(_QWORD **)(a4 + 8 * v10) + 8) > *(_QWORD *)(**(_QWORD **)(a4 + 8 * v11) + 8))
      {
        *result = v10;
        *a2 = v11;
      }
    }
  }
  else
  {
    if (v9 <= v6)
    {
      *result = v4;
      *a2 = v5;
      v12 = *a3;
      if (*(_QWORD *)(**(_QWORD **)(a4 + 8 * v12) + 8) <= v7)
        return result;
      *a2 = v12;
    }
    else
    {
      *result = v8;
    }
    *a3 = v5;
  }
  return result;
}

BOOL sub_1C590D3BC(int *a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)a3 + 472) + 8 * v8) + 8) > *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)a3 + 472) + 8 * v9) + 8))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      sub_1C590D304(a1, a1 + 1, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 472));
      return 1;
    case 4:
      sub_1C590D630(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v21 = a1 + 2;
      v22 = a1 + 3;
      sub_1C590D630(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v23 = *(a2 - 1);
      v24 = a1[3];
      v25 = *(_QWORD *)(*(_QWORD *)a3 + 472);
      if (*(_QWORD *)(**(_QWORD **)(v25 + 8 * v23) + 8) > *(_QWORD *)(**(_QWORD **)(v25 + 8 * v24) + 8))
      {
        *v22 = v23;
        *(a2 - 1) = v24;
        v26 = *v22;
        v27 = *v21;
        v28 = *(_QWORD *)(**(_QWORD **)(v25 + 8 * v26) + 8);
        if (v28 > *(_QWORD *)(**(_QWORD **)(v25 + 8 * v27) + 8))
        {
          *v21 = v26;
          *v22 = v27;
          v29 = a1[1];
          if (v28 > *(_QWORD *)(**(_QWORD **)(v25 + 8 * v29) + 8))
          {
            a1[1] = v26;
            a1[2] = v29;
            v30 = *a1;
            if (v28 > *(_QWORD *)(**(_QWORD **)(v25 + 8 * v30) + 8))
            {
              *a1 = v26;
              a1[1] = v30;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      sub_1C590D304(a1, a1 + 1, a1 + 2, *(_QWORD *)(*(_QWORD *)a3 + 472));
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *(_QWORD *)(*(_QWORD *)a3 + 472);
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(_QWORD *)(**(_QWORD **)(v13 + 8 * v15) + 8);
    if (v17 > *(_QWORD *)(**(_QWORD **)(v13 + 8 * v16) + 8))
    {
      v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 <= *(_QWORD *)(**(_QWORD **)(v13 + 8 * v16) + 8))
        {
          v20 = (int *)((char *)a1 + v19);
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

int *sub_1C590D630(int *a1, int *a2, int *a3, int *a4, uint64_t a5)
{
  int *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_1C590D304(a1, a2, a3, *(_QWORD *)(*(_QWORD *)a5 + 472));
  v11 = *a4;
  v12 = *a3;
  v13 = *(_QWORD *)(*(_QWORD *)a5 + 472);
  if (*(_QWORD *)(**(_QWORD **)(v13 + 8 * v11) + 8) > *(_QWORD *)(**(_QWORD **)(v13 + 8 * v12) + 8))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(_QWORD *)(**(_QWORD **)(v13 + 8 * v14) + 8) > *(_QWORD *)(**(_QWORD **)(v13 + 8 * v15) + 8))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(_QWORD *)(**(_QWORD **)(v13 + 8 * v16) + 8) > *(_QWORD *)(**(_QWORD **)(v13 + 8 * v17) + 8))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t sub_1C590D710()
{
  byte_1EF8F7207 = 0;
  LOBYTE(llvm::LocalProcessCodegenManager::ExecutablePath) = 0;
  return __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE44D0], &llvm::LocalProcessCodegenManager::ExecutablePath, &dword_1C475E000);
}

uint64_t llvm::LinkDiagnosticInfo::LinkDiagnosticInfo(uint64_t result, char a2, uint64_t a3)
{
  *(_DWORD *)(result + 8) = 3;
  *(_BYTE *)(result + 12) = a2;
  *(_QWORD *)result = &off_1E817F1D8;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

{
  *(_DWORD *)(result + 8) = 3;
  *(_BYTE *)(result + 12) = a2;
  *(_QWORD *)result = &off_1E817F1D8;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

uint64_t llvm::IRMover::StructTypeKeyInfo::KeyTy::KeyTy(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = a4;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = a4;
  return result;
}

uint64_t llvm::IRMover::StructTypeKeyInfo::KeyTy::KeyTy(uint64_t this, const llvm::StructType *a2)
{
  uint64_t v2;

  v2 = *((unsigned int *)a2 + 3);
  *(_QWORD *)this = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 8) = v2;
  *(_BYTE *)(this + 16) = (*((_DWORD *)a2 + 2) & 0x200) != 0;
  return this;
}

{
  uint64_t v2;

  v2 = *((unsigned int *)a2 + 3);
  *(_QWORD *)this = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 8) = v2;
  *(_BYTE *)(this + 16) = (*((_DWORD *)a2 + 2) & 0x200) != 0;
  return this;
}

BOOL llvm::IRMover::StructTypeKeyInfo::KeyTy::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
    && (v2 = *(_QWORD *)(a1 + 8), v2 == *(_QWORD *)(a2 + 8)))
  {
    return memcmp(*(const void **)a1, *(const void **)a2, 8 * v2) == 0;
  }
  else
  {
    return 0;
  }
}

BOOL llvm::IRMover::StructTypeKeyInfo::KeyTy::operator!=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
    && (v2 = *(_QWORD *)(a1 + 8), v2 == *(_QWORD *)(a2 + 8)))
  {
    return memcmp(*(const void **)a1, *(const void **)a2, 8 * v2) != 0;
  }
  else
  {
    return 1;
  }
}

unint64_t llvm::IRMover::StructTypeKeyInfo::getHashValue(llvm::IRMover::StructTypeKeyInfo *this, const llvm::IRMover::StructTypeKeyInfo::KeyTy *a2)
{
  unint64_t v4;

  v4 = sub_1C4F5AB38(*(_QWORD **)this, *(_QWORD *)this + 8 * *((_QWORD *)this + 1));
  return sub_1C5435634(&v4, (_BYTE *)this + 16);
}

unint64_t llvm::IRMover::StructTypeKeyInfo::getHashValue(llvm::IRMover::StructTypeKeyInfo *this, const llvm::StructType *a2)
{
  _QWORD *v3;
  uint64_t v4;
  BOOL v5[8];
  unint64_t v6;

  v3 = (_QWORD *)*((_QWORD *)this + 2);
  v4 = *((unsigned int *)this + 3);
  v5[0] = (*((_DWORD *)this + 2) & 0x200) != 0;
  v6 = sub_1C4F5AB38(v3, (uint64_t)&v3[v4]);
  return sub_1C5435634(&v6, v5);
}

BOOL llvm::IRMover::StructTypeKeyInfo::isEqual(const void **this, unint64_t a2, const llvm::StructType *a3)
{
  unint64_t v4;

  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return 0;
  if (*((_BYTE *)this + 16) == ((*(_DWORD *)(a2 + 8) >> 9) & 1))
  {
    v4 = *(unsigned int *)(a2 + 12);
    if (this[1] == (const void *)v4)
      return memcmp(*this, *(const void **)(a2 + 16), 8 * v4) == 0;
  }
  return 0;
}

BOOL llvm::IRMover::StructTypeKeyInfo::isEqual(const void **this, const void **a2, const llvm::StructType *a3)
{
  _BOOL8 result;
  uint64_t v5;

  if (((unint64_t)a2 | 0x1000) == 0xFFFFFFFFFFFFF000)
    return this == a2;
  result = 0;
  if (((*((_DWORD *)a2 + 2) ^ *((_DWORD *)this + 2)) & 0x200) == 0)
  {
    v5 = *((unsigned int *)this + 3);
    if ((_DWORD)v5 == *((_DWORD *)a2 + 3))
      return memcmp(this[2], a2[2], 8 * v5) == 0;
  }
  return result;
}

llvm::IRMover *llvm::IRMover::IRMover(llvm::IRMover *this, llvm::Module *a2)
{
  char *v3;
  char *v4;
  _DWORD *v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  char v13;
  unsigned __int8 **v14;
  _QWORD *v15;
  _QWORD v17[2];
  int v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void *__p;
  char *v29;
  uint64_t v30;
  char v31;
  unsigned __int8 *v32;
  _QWORD *v33[3];

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v3 = (char *)this + 8;
  *((_QWORD *)this + 4) = 0;
  v4 = (char *)this + 32;
  *((_QWORD *)this + 7) = 0;
  v5 = (_DWORD *)((char *)this + 56);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v29 = 0;
  v30 = 0;
  __p = 0;
  v31 = 0;
  llvm::TypeFinder::run((llvm::TypeFinder *)v17, a2, 0);
  v6 = (char *)__p;
  v7 = v29;
  while (v6 != v7)
  {
    if ((*(_BYTE *)(*(_QWORD *)v6 + 9) & 1) != 0)
    {
      v32 = *(unsigned __int8 **)v6;
      sub_1C62B3E88((uint64_t)v33, (uint64_t)v4, (uint64_t *)&v32);
    }
    else
    {
      v32 = *(unsigned __int8 **)v6;
      sub_1C5913FC0((uint64_t)v33, (uint64_t)v3, (uint64_t *)&v32);
    }
    v6 += 8;
  }
  v8 = &v19[v21];
  if ((_DWORD)v20)
  {
    if (v21)
    {
      v9 = 8 * v21;
      v10 = v19;
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v10;
        v9 -= 8;
        if (!v9)
          goto LABEL_12;
      }
    }
    else
    {
      v10 = v19;
    }
  }
  else
  {
LABEL_12:
    v10 = &v19[v21];
  }
  v11 = &v19[v21];
LABEL_15:
  while (v10 != v11)
  {
    v12 = (unsigned __int8 *)*v10;
    v32 = (unsigned __int8 *)*v10;
    v33[0] = 0;
    v13 = sub_1C4926528((uint64_t)v5, &v32, v33);
    v14 = (unsigned __int8 **)v33[0];
    if ((v13 & 1) == 0)
    {
      v14 = (unsigned __int8 **)sub_1C5914288(v5, (uint64_t)&v32, &v32, v33[0]);
      *v14 = v32;
      v14[1] = 0;
    }
    sub_1C4FCE378(v14 + 1, v12);
    v15 = v10 + 1;
    v10 = v8;
    if (v15 != v8)
    {
      v10 = v15;
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v10 == v8)
        {
          v10 = v8;
          goto LABEL_15;
        }
      }
    }
  }
  if (__p)
  {
    v29 = (char *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v25, 8);
  MEMORY[0x1CAA32FB4](v22, 8);
  MEMORY[0x1CAA32FB4](v19, 8);
  MEMORY[0x1CAA32FB4](v17[0], 8);
  return this;
}

llvm *llvm::IRMover::move@<X0>(llvm::LLVMContextImpl ****a1@<X0>, llvm **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  llvm::IRMover::IdentifiedStructTypeSet *v9;
  llvm::LLVMContextImpl ***v10;
  uint64_t v11;
  llvm *v12;
  unint64_t v13;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t NamedMetadata;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  char v31;
  const char **v32;
  uint64_t v33;
  uint64_t *v34;
  llvm::Metadata *Impl;
  uint64_t v36;
  char *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  llvm *v45;
  char v46;
  char *v47;
  size_t v48;
  int v49;
  std::string *v50;
  std::string::size_type v51;
  char v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *v57;
  std::string::size_type v58;
  char v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  std::string::size_type v65;
  char v66;
  const std::string::value_type *v67;
  std::string::size_type v68;
  std::string *v69;
  std::string::size_type v70;
  std::string *v71;
  void **v72;
  uint64_t v73;
  void **v74;
  void *v75;
  _BOOL4 v76;
  unint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  size_t v82;
  BOOL v83;
  char v84;
  _DWORD *v85;
  uint64_t v86;
  BOOL v87;
  _DWORD *VendorName;
  uint64_t v89;
  BOOL v90;
  _DWORD *OSName;
  uint64_t v92;
  _BOOL4 v94;
  char v95;
  std::string *v96;
  std::string::size_type v97;
  char v98;
  const std::string::value_type *v99;
  std::string::size_type v100;
  std::string *v101;
  std::string::size_type v102;
  std::string *v103;
  std::string::size_type v104;
  char v105;
  const std::string::value_type *v106;
  std::string::size_type v107;
  std::string *v108;
  std::string::size_type v109;
  std::string *v110;
  std::string::size_type v111;
  char v112;
  const std::string::value_type *v113;
  std::string::size_type v114;
  std::string *v115;
  std::string::size_type v116;
  std::string *v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  void **v121;
  size_t v122;
  llvm *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t ***v130;
  uint64_t *v131;
  char *v132;
  char *v133;
  uint64_t ***v134;
  uint64_t *v135;
  unsigned __int8 *v136;
  const void ***v137;
  const void ***v138;
  uint64_t v139;
  uint64_t v140;
  size_t *v141;
  size_t v142;
  uint64_t v143;
  int v144;
  size_t v145;
  int v146;
  const void **TypeByName;
  uint64_t v148;
  void **v149;
  void **v150;
  _QWORD *v151;
  llvm::StructType *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  unint64_t v160;
  uint64_t v161;
  int v162;
  unsigned int v163;
  void *v164;
  unsigned __int8 *v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int8 *v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  unsigned __int8 *v174;
  int v175;
  int v176;
  llvm::LLVMContext *v177;
  llvm::ValueAsMetadata **v178;
  llvm::ValueAsMetadata **v179;
  llvm::Value *v180;
  llvm::ValueAsMetadata *v181;
  uint64_t v182;
  llvm *v183;
  char *v184;
  uint64_t v185;
  char v186;
  size_t v187;
  size_t v188;
  uint64_t v189;
  _QWORD *v190;
  BOOL v191;
  std::string *v193;
  std::string::size_type v194;
  char v195;
  const std::string::value_type *v196;
  std::string::size_type v197;
  std::string *v198;
  std::string::size_type v199;
  std::string *v200;
  void **v201;
  uint64_t v202;
  unsigned __int8 *v203;
  size_t v204;
  uint64_t inserted;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  llvm::MDNode *v210;
  _QWORD *v211;
  llvm::LLVMContext *v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  llvm *v216;
  char *v217;
  char *v218;
  uint64_t *v219;
  llvm::MDNode **v220;
  llvm::Value *v221;
  llvm::LLVMContext *v222;
  llvm::Value *v223;
  uint64_t v225;
  llvm::Module *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int64x2_t v231;
  uint64_t v232;
  uint64_t j;
  uint64_t v234;
  void **v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  int64x2_t v241;
  unsigned int *v242;
  unsigned int *v243;
  _QWORD *v244;
  uint64_t v245;
  unsigned int v246;
  std::string::size_type v247;
  uint64_t v248;
  unsigned int *v249;
  uint64_t v250;
  int v251;
  unsigned int v252;
  _QWORD *v253;
  int v254;
  unsigned int *v255;
  uint64_t v256;
  _QWORD *v257;
  int v258;
  BOOL v261;
  uint64_t k;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned __int8 *v268;
  _BOOL4 v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int **v272;
  int v273;
  int v274;
  _QWORD *v275;
  uint64_t v276;
  unsigned int **v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int *v281;
  _QWORD *v282;
  uint64_t v283;
  _QWORD *v284;
  _QWORD *v285;
  unsigned int *v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int *v289;
  _QWORD *v290;
  _QWORD *v291;
  _QWORD *v292;
  unsigned __int8 *v293;
  size_t *v294;
  const void *v295;
  size_t v296;
  size_t v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int v301;
  unint64_t v302;
  uint64_t v303;
  unsigned __int8 *v304;
  _DWORD *v305;
  char v306;
  const char *v307;
  size_t v308;
  _DWORD *v309;
  _DWORD *v310;
  char v311;
  const char *v312;
  size_t v313;
  _BYTE *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  std::string::size_type *v318;
  std::string::size_type v319;
  std::string::size_type v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  _QWORD *v328;
  uint64_t v329;
  void **v330;
  std::string::size_type v331;
  uint64_t *v332;
  uint64_t v333;
  const char *v334;
  _QWORD *v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  int v344;
  llvm::LLVMContext *v345;
  _QWORD *v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t *v351;
  uint64_t v352;
  int32x2_t *v353;
  unint64_t v354;
  uint64_t v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t v359;
  int v360;
  int v361;
  unint64_t v363;
  unint64_t *v364;
  uint64_t v365;
  int32x2_t *v366;
  unint64_t v367;
  uint64_t v368;
  unsigned int v369;
  uint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  int v373;
  int v374;
  _QWORD *v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  unint64_t *v380;
  uint64_t v381;
  int32x2_t *v382;
  unint64_t v383;
  uint64_t v384;
  unsigned int v385;
  uint64_t v386;
  uint64_t *v387;
  uint64_t v388;
  int v389;
  int v390;
  unint64_t v392;
  unint64_t *v393;
  uint64_t v394;
  int32x2_t *v395;
  unint64_t v396;
  uint64_t v397;
  unsigned int v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t v401;
  int v402;
  int v403;
  llvm *result;
  uint64_t *v405;
  uint64_t v406;
  uint64_t v408;
  uint64_t v409;
  int64x2_t v411;
  __int128 v414;
  uint64_t v415;
  unint64_t v416;
  std::string v417;
  std::string v418;
  void *v419[2];
  char v420;
  int v421;
  void *v422[2];
  char v423;
  int v424;
  int v425;
  std::string v426;
  uint64_t v427;
  __int16 v428;
  std::string v429;
  __int16 v430;
  std::string v431;
  __int16 v432;
  std::string v433;
  __int16 v434;
  std::string v435;
  int v436[2];
  llvm *v437;
  __int128 v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t (**v441)(llvm::ValueMapTypeRemapper *__hidden);
  uint64_t v442[2];
  int v443;
  void *v444;
  uint64_t v445;
  _BYTE v446[128];
  void *v447;
  uint64_t v448;
  _BYTE v449[128];
  void *v450;
  uint64_t v451;
  _BYTE v452[128];
  _BYTE *v453;
  void *__b;
  _BYTE v455[12];
  _BYTE v456[128];
  llvm::IRMover::IdentifiedStructTypeSet *v457;
  _QWORD v458[2];
  _QWORD v459[2];
  uint64_t v460;
  _QWORD v461[2];
  unsigned int v462;
  uint64_t v463;
  int v464;
  int v465;
  int v466;
  char v467;
  _QWORD v468[2];
  unsigned int v469;
  uint64_t v470[3];
  char v471;
  __int128 v472;
  int v473;
  __int128 v474;
  __int128 v475;
  __int128 v476;
  char v477;
  char v478;
  uint64_t v479;
  char v480;
  _DWORD *v481;
  int v482;
  void *v483[2];
  const char *v484;
  unint64_t v485;
  void *__dst;
  char v487;
  uint64_t v488;
  int v489;
  std::string *v490;
  void *v491;
  uint64_t v492;
  _BYTE v493[136];
  void *__p[2];
  void **v495;
  uint64_t v496;
  __int16 v497;
  void *v498[2];
  uint64_t v499;
  unint64_t v500;
  void *v501;
  int v502;
  void *v503;
  uint64_t v504;
  _QWORD v505[19];

  v505[17] = *MEMORY[0x1E0C80C00];
  v9 = (llvm::IRMover::IdentifiedStructTypeSet *)(a1 + 1);
  v10 = *a1;
  v11 = (uint64_t)(a1 + 7);
  v12 = *a2;
  *a2 = 0;
  v13 = *((_QWORD *)a5 + 3);
  v416 = v13;
  if (v13 <= 7)
  {
    *(_QWORD *)v436 = v10;
    v437 = v12;
    v440 = v13;
    goto LABEL_12;
  }
  if ((~(_BYTE)v13 & 6) != 0)
  {
    v414 = *a5;
    v415 = *((_QWORD *)a5 + 2);
    *((_QWORD *)a5 + 3) = 0;
    *(_QWORD *)v436 = v10;
    v437 = v12;
    v440 = v13;
  }
  else
  {
    (*(void (**)(__int128 *, __int128 *))((v13 & 0xFFFFFFFFFFFFFFF8) + 8))(&v414, a5);
    v13 = v416;
    *((_QWORD *)a5 + 3) = 0;
    *(_QWORD *)v436 = v10;
    v437 = v12;
    v440 = v13;
    if (v13 < 8)
      goto LABEL_12;
  }
  if ((v13 & 2) != 0 && (v13 & 4) != 0)
  {
    (*(void (**)(__int128 *, __int128 *))((v13 & 0xFFFFFFFFFFFFFFF8) + 8))(&v438, &v414);
  }
  else
  {
    v438 = v414;
    v439 = v415;
  }
  v416 = 0;
LABEL_12:
  v442[1] = 0;
  v441 = &off_1E817F208;
  v442[0] = 0;
  v443 = 0;
  v444 = v446;
  v445 = 0x1000000000;
  v447 = v449;
  v448 = 0x1000000000;
  v450 = v452;
  v451 = 0x1000000000;
  v453 = v456;
  __b = v456;
  *(_QWORD *)v455 = 16;
  *(_DWORD *)&v455[8] = 0;
  v457 = v9;
  v458[0] = &off_1E817F238;
  v458[1] = v436;
  v459[0] = &off_1E817F2A0;
  v459[1] = v436;
  v460 = v11;
  v462 = 128;
  v15 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  v461[0] = v15;
  v461[1] = 0;
  if (v462)
  {
    v16 = (unint64_t)v462 << 6;
    v17 = v15 + 16;
    do
    {
      *v17 = 0;
      v17[1] = -4096;
      *(v17 - 2) = &unk_1E814DA10;
      *(v17 - 1) = 2;
      v17[2] = 0;
      v17 += 8;
      v16 -= 64;
    }
    while (v16);
  }
  LOBYTE(v463) = 0;
  v467 = 0;
  v469 = 128;
  v18 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  v468[0] = v18;
  v468[1] = 0;
  if (v469)
  {
    v19 = (unint64_t)v469 << 6;
    v20 = v18 + 16;
    do
    {
      *v20 = 0;
      v20[1] = -4096;
      *(v20 - 2) = &unk_1E814DA10;
      *(v20 - 1) = 2;
      v20[2] = 0;
      v20 += 8;
      v19 -= 64;
    }
    while (v19);
  }
  LOBYTE(v470[0]) = 0;
  v471 = 0;
  v472 = 0u;
  v473 = 0;
  v474 = 0u;
  v475 = 0u;
  v476 = 0u;
  v477 = a6;
  v478 = 0;
  LOBYTE(v479) = 0;
  v480 = 0;
  v21 = (_DWORD *)operator new();
  *v21 = 6;
  *((_QWORD *)v21 + 1) = &v441;
  v21[4] = 0;
  *((_QWORD *)v21 + 5) = v461;
  *((_QWORD *)v21 + 3) = v21 + 10;
  *((_QWORD *)v21 + 6) = v458;
  *((_QWORD *)v21 + 4) = 0x200000001;
  *((_QWORD *)v21 + 9) = v21 + 22;
  *((_QWORD *)v21 + 10) = 0x400000000;
  *((_QWORD *)v21 + 23) = v21 + 50;
  *((_QWORD *)v21 + 24) = 0x100000000;
  *((_QWORD *)v21 + 27) = v21 + 58;
  *((_QWORD *)v21 + 28) = 0x1000000000;
  v481 = v21;
  v482 = llvm::ValueMapper::registerAlternateMappingContext((uint64_t *)&v481, (uint64_t)v468, (uint64_t)v459);
  sub_1C62B38B0((uint64_t)&v463, v11);
  if (a4)
  {
    v22 = 8 * a4;
    do
    {
      v23 = *a3++;
      sub_1C5910880(v436, v23);
      v22 -= 8;
    }
    while (v22);
  }
  if ((a6 & 1) != 0)
  {
    v498[0] = "llvm.dbg.cu";
    LOWORD(v501) = 259;
    NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)v437, (uint64_t)v498);
    if (NamedMetadata)
    {
      v25 = NamedMetadata;
      v26 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
      if ((_DWORD)v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v28 = *(_QWORD *)(**(_QWORD **)(v25 + 48) + 8 * i);
          llvm::MDNode::replaceOperandWith((llvm::MDNode *)v28, 4, 0);
          llvm::MDNode::replaceOperandWith((llvm::MDNode *)v28, 8, 0);
          llvm::MDNode::replaceOperandWith((llvm::MDNode *)v28, 5, 0);
          llvm::MDNode::replaceOperandWith((llvm::MDNode *)v28, 6, 0);
          v483[0] = &v484;
          v483[1] = (void *)0x400000000;
          v29 = *(_QWORD *)(v28 - 8 * *(unsigned int *)(v28 + 8) + 56);
          if (v29)
            v30 = (void **)(v29 - 8 * *(unsigned int *)(v29 + 8));
          else
            v30 = 0;
          if (v30 != (void **)v29)
          {
            v31 = 0;
            do
            {
              while (1)
              {
                v498[0] = 0;
                v498[0] = *v30;
                if (**((unsigned __int8 **)v498[0] - *((unsigned int *)v498[0] + 2)) - 17 <= 2)
                  break;
                ++v30;
                v31 = 1;
                if (v30 == (void **)v29)
                  goto LABEL_36;
              }
              sub_1C622B174((uint64_t)v483, (unsigned __int8 **)v498);
              ++v30;
            }
            while (v30 != (void **)v29);
            if ((v31 & 1) == 0)
              goto LABEL_38;
LABEL_36:
            if (LODWORD(v483[1]))
            {
              v33 = *(_QWORD *)(v28 + 16);
              v34 = (uint64_t *)(v33 & 0xFFFFFFFFFFFFFFF8);
              if ((v33 & 4) != 0)
                v34 = (uint64_t *)*v34;
              v498[0] = &v499;
              v498[1] = (void *)0x1000000000;
              sub_1C6177054((unsigned int *)v498, (char *)v483[0], (char *)v483[0] + 8 * LODWORD(v483[1]));
              Impl = (llvm::Metadata *)llvm::MDTuple::getImpl(v34, (_QWORD *)v498[0], LODWORD(v498[1]), 0, 1);
              llvm::MDNode::replaceOperandWith((llvm::MDNode *)v28, 7, Impl);
              if (v498[0] != &v499)
                free(v498[0]);
            }
            else
            {
              llvm::MDNode::replaceOperandWith((llvm::MDNode *)v28, 7, 0);
            }
          }
LABEL_38:
          v32 = (const char **)v483[0];
          if (LODWORD(v483[1]))
          {
            v36 = 8 * LODWORD(v483[1]);
            v37 = (char *)v483[0] - 8;
            do
            {
              v38 = *(unsigned __int8 **)&v37[v36];
              if (v38)
                llvm::MetadataTracking::untrack((uint64_t)&v37[v36], v38);
              v36 -= 8;
            }
            while (v36);
            v32 = (const char **)v483[0];
          }
          if (v32 != &v484)
            free(v32);
        }
      }
    }
  }
  sub_1C5052E10(&v414);
  v39 = *((_QWORD *)v437 + 20);
  if (v39)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 32))(v39);
    if (*a7)
      goto LABEL_581;
  }
  v40 = *(_QWORD *)v436;
  v41 = *(_BYTE *)(*(_QWORD *)v436 + 503);
  v42 = v41;
  v43 = v41 & 0x7F;
  if (v42 < 0)
    v43 = *(_QWORD *)(*(_QWORD *)v436 + 488);
  if (!v43)
  {
    sub_1C48815D8(*(_QWORD *)v436 + 272, (uint64_t)v437 + 272);
    v40 = *(_QWORD *)v436;
  }
  if (*(char *)(v40 + 239) < 0)
    v44 = *(_QWORD *)(v40 + 224);
  else
    v44 = *(unsigned __int8 *)(v40 + 239);
  v45 = v437;
  if (!v44)
  {
    v46 = *((_BYTE *)v437 + 239);
    if (v46 < 0)
    {
      if (!*((_QWORD *)v437 + 28))
        goto LABEL_71;
    }
    else if (!*((_BYTE *)v437 + 239))
    {
      goto LABEL_71;
    }
    if (v46 >= 0)
      v47 = (char *)v437 + 216;
    else
      v47 = (char *)*((_QWORD *)v437 + 27);
    if (v46 >= 0)
      v48 = *((unsigned __int8 *)v437 + 239);
    else
      v48 = *((_QWORD *)v437 + 28);
    sub_1C4D828E4(v40, v47, v48);
    v45 = v437;
  }
LABEL_71:
  LOWORD(v501) = 260;
  v498[0] = (char *)v45 + 216;
  llvm::Triple::Triple((uint64_t)v422, (llvm::Twine *)v498);
  LOWORD(v501) = 260;
  v498[0] = (void *)(*(_QWORD *)v436 + 216);
  llvm::Triple::Triple((uint64_t)v419, (llvm::Twine *)v498);
  if ((v424 & 0xFFFFFFFE) == 0x2C && (v421 & 0xFFFFFFFE) == 0x2C)
  {
    if (*((char *)v437 + 191) < 0)
    {
      sub_1C47EBC30(v483, *((void **)v437 + 21), *((_QWORD *)v437 + 22));
    }
    else
    {
      *(_OWORD *)v483 = *(_OWORD *)((char *)v437 + 168);
      v484 = (const char *)*((_QWORD *)v437 + 23);
    }
    v74 = v483;
    if (SHIBYTE(v484) < 0)
      v74 = (void **)v483[0];
    v75 = (void *)(HIBYTE(v484) & 0x7F);
    if (SHIBYTE(v484) < 0)
      v75 = v483[1];
    v500 = 0;
    v499 = 0;
    v498[0] = v74;
    v498[1] = v75;
    v501 = v75;
    v502 = 0;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)v498);
    v76 = 0;
    if (v500 >= 9)
      v76 = *(_QWORD *)v499 == 0x636976656462696CLL
         && *(_BYTE *)(v499 + 8) == 101
         && *(_DWORD *)(v499 + v500 - 6) == 774910254
         && *(_WORD *)(v499 + v500 - 2) == 25442;
    v79 = *((unsigned __int8 *)v437 + 503);
    if (*((char *)v437 + 503) < 0)
    {
      if (*((_QWORD *)v437 + 61))
      {
LABEL_134:
        if ((v79 & 0x80u) == 0)
          v80 = *((unsigned __int8 *)v437 + 503);
        else
          v80 = *((_QWORD *)v437 + 61);
        if (v80 == 32)
        {
          v81 = (_QWORD *)((char *)v437 + 480);
          if ((v79 & 0x80) != 0)
          {
            v81 = (_QWORD *)*v81;
            v79 = *((_QWORD *)v437 + 61);
          }
          if (v79 >= 0x20)
            v82 = 32;
          else
            v82 = v79;
          v83 = memcmp(v81, "e-i64:64-v16:16-v32:32-n16:32:64", v82) == 0;
          v84 = v79 == 32 && v83;
        }
        else
        {
          v84 = 0;
        }
LABEL_149:
        if (v425 == 8
          && (v85 = (_DWORD *)llvm::Triple::getOSName((llvm::Triple *)v422), v86 == 7)
          && (*v85 == 1819635815 ? (v87 = *(_DWORD *)((char *)v85 + 3) == 1935829356) : (v87 = 0), v87))
        {
          v94 = 1;
        }
        else
        {
          VendorName = (_DWORD *)llvm::Triple::getVendorName((llvm::Triple *)v422);
          v94 = v89 == 7
             && (*VendorName == 1852534389 ? (v90 = *(_DWORD *)((char *)VendorName + 3) == 1853321070) : (v90 = 0),
                 v90 && (OSName = (_DWORD *)llvm::Triple::getOSName((llvm::Triple *)v422), v92 == 7))
             && *OSName == 1852534389
             && *(_DWORD *)((char *)OSName + 3) == 1853321070;
        }
        v49 = !v76 || !v94;
        v95 = v76 & v84;
        if (SHIBYTE(v484) < 0)
          operator delete(v483[0]);
        if ((v95 & 1) != 0)
          goto LABEL_172;
        goto LABEL_76;
      }
    }
    else if (*((_BYTE *)v437 + 503))
    {
      goto LABEL_134;
    }
    v84 = 1;
    goto LABEL_149;
  }
  v49 = 1;
LABEL_76:
  if ((llvm::DataLayout::operator==((unsigned __int8 *)v437 + 272, (unsigned __int8 *)(*(_QWORD *)v436 + 272)) & 1) == 0)
  {
    std::operator+<char>();
    v50 = std::string::append(&v417, "' is '");
    v51 = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v418.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v418.__r_.__value_.__r.__words[2] = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    v52 = *((_BYTE *)v437 + 503);
    if (v52 >= 0)
      v53 = (char *)v437 + 480;
    else
      v53 = (const std::string::value_type *)*((_QWORD *)v437 + 60);
    if (v52 >= 0)
      v54 = v52 & 0x7F;
    else
      v54 = *((_QWORD *)v437 + 61);
    v55 = std::string::append(&v418, v53, v54);
    v56 = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v435.__r_.__value_.__l.__data_ = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v435.__r_.__value_.__r.__words[2] = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = std::string::append(&v435, "' whereas '");
    v58 = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v426.__r_.__value_.__l.__data_ = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v426.__r_.__value_.__r.__words[2] = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    v59 = *(_BYTE *)(*(_QWORD *)v436 + 191);
    if (v59 >= 0)
      v60 = (const std::string::value_type *)(*(_QWORD *)v436 + 168);
    else
      v60 = *(const std::string::value_type **)(*(_QWORD *)v436 + 168);
    if (v59 >= 0)
      v61 = v59 & 0x7F;
    else
      v61 = *(_QWORD *)(*(_QWORD *)v436 + 176);
    v62 = std::string::append(&v426, v60, v61);
    v63 = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v429.__r_.__value_.__l.__data_ = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v429.__r_.__value_.__r.__words[2] = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    v64 = std::string::append(&v429, "' is '");
    v65 = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v431.__r_.__value_.__l.__data_ = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v431.__r_.__value_.__r.__words[2] = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    v66 = *(_BYTE *)(*(_QWORD *)v436 + 503);
    if (v66 >= 0)
      v67 = (const std::string::value_type *)(*(_QWORD *)v436 + 480);
    else
      v67 = *(const std::string::value_type **)(*(_QWORD *)v436 + 480);
    if (v66 >= 0)
      v68 = v66 & 0x7F;
    else
      v68 = *(_QWORD *)(*(_QWORD *)v436 + 488);
    v69 = std::string::append(&v431, v67, v68);
    v70 = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v433.__r_.__value_.__l.__data_ = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    v433.__r_.__value_.__r.__words[2] = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    v71 = std::string::append(&v433, "'\n");
    v72 = (void **)v71->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    v495 = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    LOWORD(v501) = 260;
    v498[0] = __p;
    v73 = *(_QWORD *)v437;
    LODWORD(v483[1]) = 3;
    BYTE4(v483[1]) = 1;
    v483[0] = &off_1E817F1D8;
    v484 = (const char *)v498;
    llvm::LLVMContext::diagnose(v73, (const llvm::DiagnosticInfo *)v483);
    if (SHIBYTE(v495) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v433.__r_.__value_.__l.__data_);
    if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v431.__r_.__value_.__l.__data_);
    if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v429.__r_.__value_.__l.__data_);
    if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v426.__r_.__value_.__l.__data_);
    if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v435.__r_.__value_.__l.__data_);
    if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v418.__r_.__value_.__l.__data_);
    if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v417.__r_.__value_.__l.__data_);
    if ((v49 & 1) == 0)
      goto LABEL_212;
    goto LABEL_173;
  }
LABEL_172:
  if (!v49)
    goto LABEL_212;
LABEL_173:
  if (*((char *)v437 + 239) < 0)
  {
    if (!*((_QWORD *)v437 + 28))
      goto LABEL_212;
  }
  else if (!*((_BYTE *)v437 + 239))
  {
    goto LABEL_212;
  }
  if (!llvm::Triple::isCompatibleWith((llvm::Triple *)v422, (const llvm::Triple *)v419))
  {
    std::operator+<char>();
    v96 = std::string::append(&v417, "' is '");
    v97 = v96->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v418.__r_.__value_.__l.__data_ = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    v418.__r_.__value_.__r.__words[2] = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    v98 = *((_BYTE *)v437 + 239);
    if (v98 >= 0)
      v99 = (char *)v437 + 216;
    else
      v99 = (const std::string::value_type *)*((_QWORD *)v437 + 27);
    if (v98 >= 0)
      v100 = v98 & 0x7F;
    else
      v100 = *((_QWORD *)v437 + 28);
    v101 = std::string::append(&v418, v99, v100);
    v102 = v101->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v435.__r_.__value_.__l.__data_ = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
    v435.__r_.__value_.__r.__words[2] = v102;
    v101->__r_.__value_.__l.__size_ = 0;
    v101->__r_.__value_.__r.__words[2] = 0;
    v101->__r_.__value_.__r.__words[0] = 0;
    v103 = std::string::append(&v435, "' whereas '");
    v104 = v103->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v426.__r_.__value_.__l.__data_ = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
    v426.__r_.__value_.__r.__words[2] = v104;
    v103->__r_.__value_.__l.__size_ = 0;
    v103->__r_.__value_.__r.__words[2] = 0;
    v103->__r_.__value_.__r.__words[0] = 0;
    v105 = *(_BYTE *)(*(_QWORD *)v436 + 191);
    if (v105 >= 0)
      v106 = (const std::string::value_type *)(*(_QWORD *)v436 + 168);
    else
      v106 = *(const std::string::value_type **)(*(_QWORD *)v436 + 168);
    if (v105 >= 0)
      v107 = v105 & 0x7F;
    else
      v107 = *(_QWORD *)(*(_QWORD *)v436 + 176);
    v108 = std::string::append(&v426, v106, v107);
    v109 = v108->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v429.__r_.__value_.__l.__data_ = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
    v429.__r_.__value_.__r.__words[2] = v109;
    v108->__r_.__value_.__l.__size_ = 0;
    v108->__r_.__value_.__r.__words[2] = 0;
    v108->__r_.__value_.__r.__words[0] = 0;
    v110 = std::string::append(&v429, "' is '");
    v111 = v110->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v431.__r_.__value_.__l.__data_ = *(_OWORD *)&v110->__r_.__value_.__l.__data_;
    v431.__r_.__value_.__r.__words[2] = v111;
    v110->__r_.__value_.__l.__size_ = 0;
    v110->__r_.__value_.__r.__words[2] = 0;
    v110->__r_.__value_.__r.__words[0] = 0;
    v112 = *(_BYTE *)(*(_QWORD *)v436 + 239);
    if (v112 >= 0)
      v113 = (const std::string::value_type *)(*(_QWORD *)v436 + 216);
    else
      v113 = *(const std::string::value_type **)(*(_QWORD *)v436 + 216);
    if (v112 >= 0)
      v114 = v112 & 0x7F;
    else
      v114 = *(_QWORD *)(*(_QWORD *)v436 + 224);
    v115 = std::string::append(&v431, v113, v114);
    v116 = v115->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v433.__r_.__value_.__l.__data_ = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
    v433.__r_.__value_.__r.__words[2] = v116;
    v115->__r_.__value_.__l.__size_ = 0;
    v115->__r_.__value_.__r.__words[2] = 0;
    v115->__r_.__value_.__r.__words[0] = 0;
    v117 = std::string::append(&v433, "'\n");
    v118 = (void **)v117->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
    v495 = v118;
    v117->__r_.__value_.__l.__size_ = 0;
    v117->__r_.__value_.__r.__words[2] = 0;
    v117->__r_.__value_.__r.__words[0] = 0;
    LOWORD(v501) = 260;
    v498[0] = __p;
    v119 = *(_QWORD *)v437;
    LODWORD(v483[1]) = 3;
    BYTE4(v483[1]) = 1;
    v483[0] = &off_1E817F1D8;
    v484 = (const char *)v498;
    llvm::LLVMContext::diagnose(v119, (const llvm::DiagnosticInfo *)v483);
    if (SHIBYTE(v495) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v433.__r_.__value_.__l.__data_);
    if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v431.__r_.__value_.__l.__data_);
    if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v429.__r_.__value_.__l.__data_);
    if (SHIBYTE(v426.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v426.__r_.__value_.__l.__data_);
    if (SHIBYTE(v435.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v435.__r_.__value_.__l.__data_);
    if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v418.__r_.__value_.__l.__data_);
    if (SHIBYTE(v417.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v417.__r_.__value_.__l.__data_);
  }
LABEL_212:
  v120 = *(_QWORD *)v436;
  llvm::Triple::merge(v422, (const llvm::Triple *)v419, (uint64_t)v498);
  if (v499 >= 0)
    v121 = v498;
  else
    v121 = (void **)v498[0];
  if (v499 >= 0)
    v122 = HIBYTE(v499) & 0x7F;
  else
    v122 = (size_t)v498[1];
  sub_1C4D828E4(v120, v121, v122);
  if (SHIBYTE(v499) < 0)
    operator delete(v498[0]);
  v123 = v437;
  v124 = (char *)v437 + 8;
  v125 = (char *)*((_QWORD *)v437 + 2);
  if (v125 != (char *)v437 + 8)
  {
    do
    {
      if (v125)
        v126 = (uint64_t)(v125 - 56);
      else
        v126 = 0;
      v127 = sub_1C59132BC((uint64_t)v436, (uint64_t ***)v126);
      if (v127)
      {
        if ((*(_DWORD *)(v127 + 32) & 0xF) == 6)
        {
          if ((*(_DWORD *)(v126 + 32) & 0xF) == 6)
          {
            v127 = *(_QWORD *)(v127 + 24) + 24;
            v126 = *(_QWORD *)(v126 + 24) + 24;
          }
          else
          {
            v126 = (uint64_t)(v125 - 56);
          }
        }
        sub_1C5913664((uint64_t)&v441, *(_QWORD *)v127, *(_QWORD *)v126);
      }
      v125 = (char *)*((_QWORD *)v125 + 1);
    }
    while (v125 != v124);
    v123 = v437;
  }
  v128 = (char *)v123 + 24;
  v129 = (char *)*((_QWORD *)v123 + 4);
  if (v129 != (char *)v123 + 24)
  {
    do
    {
      if (v129)
        v130 = (uint64_t ***)(v129 - 56);
      else
        v130 = 0;
      v131 = (uint64_t *)sub_1C59132BC((uint64_t)v436, v130);
      if (v131 && (uint64_t **)*v131 != *v130)
        sub_1C5913664((uint64_t)&v441, *v131, (uint64_t)*v130);
      v129 = (char *)*((_QWORD *)v129 + 1);
    }
    while (v129 != v128);
    v123 = v437;
  }
  v132 = (char *)v123 + 40;
  v133 = (char *)*((_QWORD *)v123 + 6);
  if (v133 != (char *)v123 + 40)
  {
    do
    {
      if (v133)
        v134 = (uint64_t ***)(v133 - 48);
      else
        v134 = 0;
      v135 = (uint64_t *)sub_1C59132BC((uint64_t)v436, v134);
      if (v135)
        sub_1C5913664((uint64_t)&v441, *v135, (uint64_t)*v134);
      v133 = (char *)*((_QWORD *)v133 + 1);
    }
    while (v133 != v132);
    v123 = v437;
  }
  llvm::Module::getIdentifiedStructTypes(v123, v483);
  v137 = (const void ***)v483[0];
  v138 = (const void ***)v483[1];
  if (v483[0] != v483[1])
  {
    v139 = MEMORY[0x1E0C80978];
    do
    {
      v140 = (uint64_t)*v137;
      if ((*v137)[3] && (llvm::IRMover::IdentifiedStructTypeSet::hasType(v457, *v137) & 1) == 0)
      {
        v141 = *(size_t **)(v140 + 24);
        if (v141)
        {
          v136 = (unsigned __int8 *)(v141 + 2);
          v142 = *v141;
        }
        else
        {
          v136 = 0;
          v142 = 0;
        }
        v143 = 0;
        while (v142 + v143)
        {
          v144 = v136[v142 - 1 + v143--];
          if (v144 == 46)
          {
            v145 = v142 + v143;
            if (v142 + v143 + 1 >= 2 && v136[v142 - 1] != 46)
            {
              v146 = *(_DWORD *)(v139 + 4 * v136[v142 + 1 + v143] + 60);
              if (v142 < v145)
                v145 = v142;
              if ((v146 & 0x400) != 0)
                v142 = v145;
            }
            break;
          }
        }
        if (v141)
          v141 = (size_t *)*v141;
        if ((size_t *)v142 != v141)
        {
          TypeByName = (const void **)llvm::StructType::getTypeByName(*(uint64_t **)v140, v136, v142);
          if (TypeByName)
          {
            v148 = (uint64_t)TypeByName;
            if (llvm::IRMover::IdentifiedStructTypeSet::hasType(v457, TypeByName))
              sub_1C5913664((uint64_t)&v441, v148, v140);
          }
        }
      }
      ++v137;
    }
    while (v137 != v138);
  }
  v498[0] = &v499;
  v498[1] = (void *)0x1000000000;
  if ((_DWORD)v451)
  {
    v149 = (void **)v450;
    v150 = (void **)((char *)v450 + 8 * v451);
    do
    {
      __p[0] = *v149;
      v151 = __p[0];
      v152 = (llvm::StructType *)sub_1C62B3A04(v442, __p)[1];
      sub_1C515FA1C((uint64_t)v498, *((unsigned int *)v151 + 3));
      if (LODWORD(v498[1]))
      {
        v154 = 0;
        v155 = 8 * LODWORD(v498[1]);
        do
        {
          v156 = sub_1C5910AC0((uint64_t)&v441, *(llvm::StructType **)(v151[2] + v154));
          *(_QWORD *)((char *)v498[0] + v154) = v156;
          v154 += 8;
        }
        while (v155 != v154);
        v153 = LODWORD(v498[1]);
      }
      else
      {
        v153 = 0;
      }
      llvm::StructType::setBody((uint64_t)v152, (uint64_t)v498[0], v153, (*((_DWORD *)v151 + 2) >> 9) & 1);
      llvm::IRMover::IdentifiedStructTypeSet::switchToNonOpaque((int32x2_t *)v457, v152);
      ++v149;
    }
    while (v149 != v150);
  }
  LODWORD(v451) = 0;
  if (__b == v453)
    goto LABEL_282;
  if (*(_DWORD *)v455 < 0x21u || (4 * (*(_DWORD *)&v455[4] - *(_DWORD *)&v455[8])) >= *(_DWORD *)v455)
  {
    memset(__b, 255, 8 * *(unsigned int *)v455);
LABEL_282:
    *(_QWORD *)&v455[4] = 0;
    goto LABEL_283;
  }
  free(__b);
  v162 = 1 << (33 - __clz(*(_DWORD *)&v455[4] - *(_DWORD *)&v455[8] - 1));
  if ((*(_DWORD *)&v455[4] - *(_DWORD *)&v455[8]) <= 0x10)
    v163 = 32;
  else
    v163 = v162;
  *(_DWORD *)v455 = v163;
  *(_QWORD *)&v455[4] = 0;
  v164 = malloc_type_malloc(8 * v163, 0x4065EBACuLL);
  if (!v164)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  __b = v164;
  memset(v164, 255, 8 * *(unsigned int *)v455);
LABEL_283:
  if (v498[0] != &v499)
    free(v498[0]);
  if (v483[0])
  {
    v483[1] = v483[0];
    operator delete(v483[0]);
  }
  v158 = *((_QWORD *)&v474 + 1);
  v157 = v474;
  if ((_QWORD)v474 != *((_QWORD *)&v474 + 1))
  {
    v159 = (_QWORD *)(*((_QWORD *)&v474 + 1) - 8);
    if ((unint64_t)v474 < *((_QWORD *)&v474 + 1) - 8)
    {
      v160 = v474 + 8;
      do
      {
        v161 = *(_QWORD *)(v160 - 8);
        *(_QWORD *)(v160 - 8) = *v159;
        *v159-- = v161;
        v261 = v160 >= (unint64_t)v159;
        v160 += 8;
      }
      while (!v261);
LABEL_303:
      v158 = *((_QWORD *)&v474 + 1);
      v157 = v474;
      goto LABEL_304;
    }
  }
  while (1)
  {
    while (1)
    {
LABEL_304:
      if (v157 == v158)
      {
        v478 = 1;
        v498[0] = v481;
        *v481 |= 8u;
        sub_1C5FD3718((uint64_t *)v498, (llvm::LLVMContext *)v136);
        v498[0] = "llvm.module.flags";
        LOWORD(v501) = 259;
        v182 = llvm::Module::getNamedMetadata((uint64_t)v437, (uint64_t)v498);
        v183 = v437;
        v184 = (char *)v437 + 72;
        v185 = *((_QWORD *)v437 + 10);
        if ((llvm *)v185 == (llvm *)((char *)v437 + 72))
          goto LABEL_373;
        while (1)
        {
          if (v185 != v182)
          {
            v186 = *(_BYTE *)(v185 + 39);
            if (v477)
            {
              v187 = *(_QWORD *)(v185 + 24);
              v188 = v186 & 0x7F;
              if (v186 >= 0)
                v189 = v186 & 0x7F;
              else
                v189 = *(_QWORD *)(v185 + 24);
              if (v189 == 22)
              {
                v190 = v186 >= 0 ? (_QWORD *)(v185 + 16) : *(_QWORD **)(v185 + 16);
                v191 = *v190 == 0x6573702E6D766C6CLL && v190[1] == 0x626F72705F6F6475;
                if (v191 && *(_QWORD *)((char *)v190 + 14) == 0x637365645F65626FLL)
                {
                  LOWORD(v501) = 261;
                  v498[0] = v190;
                  v498[1] = (void *)22;
                  if (!llvm::Module::getNamedMetadata(*(uint64_t *)v436, (uint64_t)v498))
                  {
                    std::operator+<char>();
                    v193 = std::string::append(&v429, "' is compiled with -fpseudo-probe-for-profiling while destination module '");
                    v194 = v193->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v431.__r_.__value_.__l.__data_ = *(_OWORD *)&v193->__r_.__value_.__l.__data_;
                    v431.__r_.__value_.__r.__words[2] = v194;
                    v193->__r_.__value_.__l.__size_ = 0;
                    v193->__r_.__value_.__r.__words[2] = 0;
                    v193->__r_.__value_.__r.__words[0] = 0;
                    v195 = *(_BYTE *)(*(_QWORD *)v436 + 191);
                    if (v195 >= 0)
                      v196 = (const std::string::value_type *)(*(_QWORD *)v436 + 168);
                    else
                      v196 = *(const std::string::value_type **)(*(_QWORD *)v436 + 168);
                    if (v195 >= 0)
                      v197 = v195 & 0x7F;
                    else
                      v197 = *(_QWORD *)(*(_QWORD *)v436 + 176);
                    v198 = std::string::append(&v431, v196, v197);
                    v199 = v198->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v433.__r_.__value_.__l.__data_ = *(_OWORD *)&v198->__r_.__value_.__l.__data_;
                    v433.__r_.__value_.__r.__words[2] = v199;
                    v198->__r_.__value_.__l.__size_ = 0;
                    v198->__r_.__value_.__r.__words[2] = 0;
                    v198->__r_.__value_.__r.__words[0] = 0;
                    v200 = std::string::append(&v433, "' is not\n");
                    v201 = (void **)v200->__r_.__value_.__r.__words[2];
                    *(_OWORD *)__p = *(_OWORD *)&v200->__r_.__value_.__l.__data_;
                    v495 = v201;
                    v200->__r_.__value_.__l.__size_ = 0;
                    v200->__r_.__value_.__r.__words[2] = 0;
                    v200->__r_.__value_.__r.__words[0] = 0;
                    LOWORD(v501) = 260;
                    v498[0] = __p;
                    v202 = *(_QWORD *)v437;
                    LODWORD(v483[1]) = 3;
                    BYTE4(v483[1]) = 1;
                    v483[0] = &off_1E817F1D8;
                    v484 = (const char *)v498;
                    llvm::LLVMContext::diagnose(v202, (const llvm::DiagnosticInfo *)v483);
                    if (SHIBYTE(v495) < 0)
                      operator delete(__p[0]);
                    if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v433.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v431.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v431.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v429.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v429.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_371;
                }
              }
            }
            else
            {
              v187 = *(_QWORD *)(v185 + 24);
              v188 = v186 & 0x7F;
            }
            if (v186 >= 0)
              v203 = (unsigned __int8 *)(v185 + 16);
            else
              v203 = *(unsigned __int8 **)(v185 + 16);
            if (v186 >= 0)
              v204 = v188;
            else
              v204 = v187;
            inserted = llvm::Module::getOrInsertNamedMetadata(*(uint64_t *)v436, v203, v204);
            v206 = *(unsigned int *)(*(_QWORD *)(v185 + 48) + 8);
            if ((_DWORD)v206)
            {
              v207 = inserted;
              v208 = 0;
              v209 = 8 * v206;
              do
              {
                v210 = *(llvm::MDNode **)(**(_QWORD **)(v185 + 48) + v208);
                v498[0] = v481;
                v211 = sub_1C5FD6E5C((uint64_t)v481, v210);
                sub_1C5FD3718((uint64_t *)v498, v212);
                v498[0] = v211;
                v213 = *(_QWORD *)(v207 + 48);
                v214 = *(unsigned int *)(v213 + 8);
                if (v214 >= *(_DWORD *)(v213 + 12))
                {
                  sub_1C5419FD8(*(_QWORD *)(v207 + 48), (unsigned __int8 **)v498);
                }
                else
                {
                  v215 = (_QWORD *)(*(_QWORD *)v213 + 8 * v214);
                  *v215 = v211;
                  if (v211)
                  {
                    llvm::MetadataTracking::track((uint64_t)v215, (unsigned __int8 *)v211, 2);
                    LODWORD(v214) = *(_DWORD *)(v213 + 8);
                  }
                  *(_DWORD *)(v213 + 8) = v214 + 1;
                }
                v208 += 8;
              }
              while (v209 != v208);
            }
          }
LABEL_371:
          v185 = *(_QWORD *)(v185 + 8);
          if ((char *)v185 == v184)
          {
            v183 = v437;
LABEL_373:
            if (v477)
            {
              __p[0] = v436;
              v498[0] = sub_1C5913B70;
              v498[1] = __p;
              v483[0] = v498;
              sub_1C5A04E30((uint64_t)v183, (void (*)(uint64_t, std::string *))sub_1C5A059DC, (uint64_t)v483);
              goto LABEL_375;
            }
            if (*((char *)v183 + 111) < 0)
            {
              if (!*((_QWORD *)v183 + 12))
                goto LABEL_375;
            }
            else if (!*((_BYTE *)v183 + 111))
            {
              goto LABEL_375;
            }
            v329 = *(_QWORD *)v436;
            if ((v424 - 1) >= 2 && (v424 - 39) > 1)
            {
              if ((*((_BYTE *)v183 + 111) & 0x80) != 0)
              {
                sub_1C47EBC30(v498, *((void **)v183 + 11), *((_QWORD *)v183 + 12));
              }
              else
              {
                *(_OWORD *)v498 = *(_OWORD *)((char *)v183 + 88);
                v499 = *((_QWORD *)v183 + 13);
              }
            }
            else
            {
              std::operator+<char>();
            }
            if (v499 >= 0)
              v330 = v498;
            else
              v330 = (void **)v498[0];
            if (v499 >= 0)
              v331 = HIBYTE(v499) & 0x7F;
            else
              v331 = (std::string::size_type)v498[1];
            LLVMAppendModuleInlineAsm_0(v329, (const std::string::value_type *)v330, v331);
            if (SHIBYTE(v499) < 0)
              operator delete(v498[0]);
LABEL_375:
            v216 = v437;
            v217 = (char *)v437 + 8;
            v218 = (char *)*((_QWORD *)v437 + 2);
            if (v218 != (char *)v437 + 8)
            {
              v219 = (uint64_t *)(*(_QWORD *)v436 + 8);
              do
              {
                if (v218)
                  v220 = (llvm::MDNode **)(v218 - 56);
                else
                  v220 = 0;
                if (((_DWORD)v220[4] & 0xF) != 6)
                {
                  v498[0] = v481;
                  v221 = (llvm::Value *)sub_1C5FD3BE0((uint64_t)v481, v220);
                  sub_1C5FD3718((uint64_t *)v498, v222);
                  if (v221)
                  {
                    v223 = llvm::Value::stripPointerCasts(v221);
                    if (v223 && *((_BYTE *)v223 + 16) == 3)
                      sub_1C62B398C((uint64_t)v219, v219, (uint64_t)v219, (uint64_t *)v223 + 7);
                  }
                }
                v218 = (char *)*((_QWORD *)v218 + 1);
              }
              while (v218 != v217);
              v216 = v437;
            }
            v498[0] = "llvm.module.flags";
            LOWORD(v501) = 259;
            v225 = llvm::Module::getNamedMetadata((uint64_t)v216, (uint64_t)v498);
            if (v225)
            {
              v227 = v225;
              llvm::UpgradeModuleFlags((uint64_t **)v437, v226);
              v228 = llvm::Module::getOrInsertNamedMetadata(*(uint64_t *)v436, "llvm.module.flags", 0x11uLL);
              v229 = v228;
              if (*(_DWORD *)(*(_QWORD *)(v228 + 48) + 8))
              {
                memset(&v435, 0, 20);
                v498[0] = (void *)1;
                v230 = 1;
                v231 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
                do
                {
                  *(int64x2_t *)&v498[v230] = v231;
                  v230 += 2;
                }
                while (v230 != 17);
                v503 = v505;
                v504 = 0x1000000000;
                v232 = *(unsigned int *)(*(_QWORD *)(v228 + 48) + 8);
                if ((_DWORD)v232)
                {
                  for (j = 0; j != v232; ++j)
                  {
                    v234 = *(_QWORD *)(**(_QWORD **)(v229 + 48) + 8 * j);
                    v235 = (void **)(v234 - 8 * *(unsigned int *)(v234 + 8));
                    v236 = *((_QWORD *)*v235 + 16);
                    v483[0] = v235[1];
                    v237 = (_QWORD *)(v236 + 24);
                    if (*(_DWORD *)(v236 + 32) >= 0x41u)
                      v237 = (_QWORD *)*v237;
                    if (*v237 == 3)
                    {
                      __p[0] = v235[2];
                      sub_1C62B3A60((uint64_t)v498, (uint64_t *)__p);
                    }
                    else
                    {
                      v238 = sub_1C61E016C((uint64_t)&v435, (uint64_t *)v483);
                      v238[1] = v234;
                      *((_DWORD *)v238 + 4) = j;
                    }
                  }
                }
                v409 = v229;
                v239 = *(unsigned int *)(*(_QWORD *)(v227 + 48) + 8);
                if (!(_DWORD)v239)
                {
LABEL_535:
                  if ((_DWORD)v504)
                  {
                    v316 = 0;
                    v317 = 8 * v504;
                    while (1)
                    {
                      v318 = (std::string::size_type *)(*(_QWORD *)((char *)v503 + v316)
                                                      - 8 * *(unsigned int *)(*(_QWORD *)((char *)v503 + v316) + 8));
                      v319 = *v318;
                      v433.__r_.__value_.__r.__words[0] = *v318;
                      v320 = v318[1];
                      v321 = sub_1C61E016C((uint64_t)&v435, (uint64_t *)&v433)[1];
                      if (!v321 || *(_QWORD *)(v321 - 8 * *(unsigned int *)(v321 + 8) + 16) != v320)
                        break;
                      v316 += 8;
                      if (v317 == v316)
                        goto LABEL_540;
                    }
                    v335 = *(_QWORD **)(v319 + 8);
                    v336 = *v335;
                    v497 = 1283;
                    __p[0] = "linking module flags '";
                    v495 = (void **)(v335 + 3);
                    v496 = v336;
                    v483[0] = __p;
                    v484 = "': does not have the required value";
LABEL_569:
                    LOWORD(__dst) = 770;
                    if (!atomic_load(qword_1ED836B58))
                      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
LABEL_571:
                    v340 = qword_1ED836B58[0];
                    v341 = operator new();
                    *(_QWORD *)v341 = off_1E81A0C88;
                    llvm::Twine::str((llvm::Twine *)v483, (_QWORD *)(v341 + 8));
                    *(_QWORD *)(v341 + 32) = 3;
                    *(_QWORD *)(v341 + 40) = v340;
                    *(_BYTE *)(v341 + 48) = 1;
                    *a7 = v341;
                  }
                  else
                  {
LABEL_540:
                    *a7 = 0;
                  }
                  if (v503 != v505)
                    free(v503);
                  if (((uint64_t)v498[0] & 1) == 0)
                    MEMORY[0x1CAA32FB4](v498[1], 8);
                  MEMORY[0x1CAA32FB4](v435.__r_.__value_.__r.__words[0], 8);
                  goto LABEL_577;
                }
                v240 = 0;
                v241 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
                v408 = *(unsigned int *)(*(_QWORD *)(v227 + 48) + 8);
                v411 = v241;
                while (2)
                {
                  v242 = *(unsigned int **)(**(_QWORD **)(v227 + 48) + 8 * v240);
                  v243 = &v242[-2 * v242[2]];
                  v244 = (_QWORD *)*((_QWORD *)v243 + 1);
                  v245 = *(_QWORD *)(*(_QWORD *)v243 + 128);
                  v418.__r_.__value_.__r.__words[0] = (std::string::size_type)v244;
                  if (LODWORD(v435.__r_.__value_.__r.__words[2]))
                  {
                    v246 = ((v244 >> 4) ^ (v244 >> 9)) & (LODWORD(v435.__r_.__value_.__r.__words[2])
                                                                                    - 1);
                    v247 = v435.__r_.__value_.__r.__words[0] + 24 * v246;
                    v248 = *(_QWORD *)v247;
                    if (v244 == *(_QWORD **)v247)
                    {
LABEL_405:
                      v249 = *(unsigned int **)(v247 + 8);
                      v250 = *(unsigned int *)(v247 + 16);
                      goto LABEL_411;
                    }
                    v251 = 1;
                    while (v248 != -4096)
                    {
                      v252 = v246 + v251++;
                      v246 = v252 & (LODWORD(v435.__r_.__value_.__r.__words[2]) - 1);
                      v247 = v435.__r_.__value_.__r.__words[0] + 24 * v246;
                      v248 = *(_QWORD *)v247;
                      if (v244 == *(_QWORD **)v247)
                        goto LABEL_405;
                    }
                  }
                  v250 = 0;
                  v249 = 0;
LABEL_411:
                  v253 = (_QWORD *)(v245 + 24);
                  if (*(_DWORD *)(v245 + 32) >= 0x41u)
                    v253 = (_QWORD *)*v253;
                  v254 = *(_DWORD *)v253;
                  if (*(_DWORD *)v253 == 3)
                  {
                    v483[0] = *((void **)v243 + 2);
                    v269 = sub_1C62B3A60((uint64_t)v498, (uint64_t *)v483);
                    v241 = v411;
                    if (!v269)
                      goto LABEL_488;
                    v483[0] = v242;
                    v270 = *(_QWORD *)(v409 + 48);
                    v271 = *(unsigned int *)(v270 + 8);
                    if (v271 < *(_DWORD *)(v270 + 12))
                    {
                      v272 = (unsigned int **)(*(_QWORD *)v270 + 8 * v271);
                      *v272 = v242;
                      llvm::MetadataTracking::track((uint64_t)v272, (unsigned __int8 *)v242, 2);
                      v273 = *(_DWORD *)(v270 + 8) + 1;
LABEL_463:
                      *(_DWORD *)(v270 + 8) = v273;
                      goto LABEL_486;
                    }
                  }
                  else
                  {
                    if (v249)
                    {
                      v255 = &v249[-2 * v249[2]];
                      v256 = *(_QWORD *)(*(_QWORD *)v255 + 128);
                      v257 = (_QWORD *)(v256 + 24);
                      if (*(_DWORD *)(v256 + 32) >= 0x41u)
                        v257 = (_QWORD *)*v257;
                      v258 = *(_DWORD *)v257;
                      if (*(_DWORD *)v257 == 4)
                      {
                        if (v254 == 4 && *((_QWORD *)v243 + 2) != *((_QWORD *)v255 + 2))
                        {
                          v332 = (uint64_t *)v244[1];
                          v333 = *v332;
                          v428 = 1283;
                          v426.__r_.__value_.__r.__words[0] = (std::string::size_type)"linking module flags '";
                          v426.__r_.__value_.__r.__words[2] = (std::string::size_type)(v332 + 3);
                          v427 = v333;
                          v334 = "': IDs have conflicting override values in '";
LABEL_568:
                          v429.__r_.__value_.__r.__words[0] = (std::string::size_type)&v426;
                          v429.__r_.__value_.__r.__words[2] = (std::string::size_type)v334;
                          v430 = 770;
                          v431.__r_.__value_.__r.__words[0] = (std::string::size_type)&v429;
                          v431.__r_.__value_.__r.__words[2] = (std::string::size_type)v437 + 168;
                          v432 = 1026;
                          v433.__r_.__value_.__r.__words[0] = (std::string::size_type)&v431;
                          v433.__r_.__value_.__r.__words[2] = (std::string::size_type)"' and '";
                          v434 = 770;
                          __p[0] = &v433;
                          v495 = (void **)(*(_QWORD *)v436 + 168);
                          v497 = 1026;
                          v483[0] = __p;
                          v484 = "'";
                          goto LABEL_569;
                        }
                        goto LABEL_488;
                      }
                      if (v254 == 4)
                      {
                        sub_1C4FCE378((unsigned __int8 **)(**(_QWORD **)(v409 + 48) + 8 * v250), (unsigned __int8 *)v242);
                        v278 = sub_1C61E016C((uint64_t)&v435, (uint64_t *)&v418);
                        v241 = v411;
                        v278[1] = v242;
                        goto LABEL_488;
                      }
                      if (v254 == v258)
                      {
                        if (v254 != 2 && v258 != 2)
                          goto LABEL_437;
                      }
                      else if ((v254 - 7) > 1 || v258 != 2)
                      {
                        v261 = v254 != 2 || (v258 - 7) >= 2;
                        if (v261)
                        {
                          v405 = (uint64_t *)v244[1];
                          v406 = *v405;
                          v428 = 1283;
                          v426.__r_.__value_.__r.__words[0] = (std::string::size_type)"linking module flags '";
                          v426.__r_.__value_.__r.__words[2] = (std::string::size_type)(v405 + 3);
                          v427 = v406;
                          v429.__r_.__value_.__r.__words[0] = (std::string::size_type)&v426;
                          v429.__r_.__value_.__r.__words[2] = (std::string::size_type)"': IDs have conflicting behaviors in '";
                          v430 = 770;
                          v431.__r_.__value_.__r.__words[0] = (std::string::size_type)&v429;
                          v431.__r_.__value_.__r.__words[2] = (std::string::size_type)v437 + 168;
                          v432 = 1026;
                          v433.__r_.__value_.__r.__words[0] = (std::string::size_type)&v431;
                          v433.__r_.__value_.__r.__words[2] = (std::string::size_type)"' and '";
                          v434 = 770;
                          __p[0] = &v433;
                          v495 = (void **)(*(_QWORD *)v436 + 168);
                          v497 = 1026;
                          v483[0] = __p;
                          v484 = "'";
                          LOWORD(__dst) = 770;
                          if (!atomic_load(qword_1ED836B58))
                            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
                          goto LABEL_571;
                        }
                      }
                      if (*((_QWORD *)v243 + 2) != *((_QWORD *)v255 + 2))
                      {
                        memset(&v433, 0, sizeof(v433));
                        LODWORD(v483[1]) = 0;
                        v487 = 0;
                        v488 = 0;
                        v483[0] = &unk_1E81A7208;
                        v490 = &v433;
                        v489 = 0;
                        v485 = 0;
                        __dst = 0;
                        v484 = 0;
                        llvm::raw_ostream::write((llvm::raw_ostream *)v483, "linking module flags '", 0x16uLL);
                        v294 = (size_t *)v244[1];
                        v297 = *v294;
                        v295 = v294 + 3;
                        v296 = v297;
                        v298 = (char *)__dst;
                        if (v297 <= v485 - (unint64_t)__dst)
                        {
                          if (v296)
                          {
                            memcpy(__dst, v295, v296);
                            v298 = (char *)__dst + v296;
                            __dst = (char *)__dst + v296;
                          }
                        }
                        else
                        {
                          llvm::raw_ostream::write((llvm::raw_ostream *)v483, (const char *)v295, v296);
                          v298 = (char *)__dst;
                        }
                        v239 = v408;
                        if (v485 - (unint64_t)v298 > 0x20)
                        {
                          qmemcpy(v298, "': IDs have conflicting values ('", 33);
                          __dst = (char *)__dst + 33;
                        }
                        else
                        {
                          llvm::raw_ostream::write((llvm::raw_ostream *)v483, "': IDs have conflicting values ('", 0x21uLL);
                        }
                        llvm::Metadata::print(*(uint64_t ***)&v242[-2 * v242[2] + 4], (llvm::raw_ostream *)v483, 0);
                        v305 = __dst;
                        if (v485 - (unint64_t)__dst > 6)
                        {
                          *(_DWORD *)((char *)__dst + 3) = 544042866;
                          *v305 = 1919295527;
                          __dst = (char *)__dst + 7;
                        }
                        else
                        {
                          llvm::raw_ostream::write((llvm::raw_ostream *)v483, "' from ", 7uLL);
                        }
                        v306 = *((_BYTE *)v437 + 191);
                        if (v306 >= 0)
                          v307 = (char *)v437 + 168;
                        else
                          v307 = (const char *)*((_QWORD *)v437 + 21);
                        if (v306 >= 0)
                          v308 = v306 & 0x7F;
                        else
                          v308 = *((_QWORD *)v437 + 22);
                        llvm::raw_ostream::write((llvm::raw_ostream *)v483, v307, v308);
                        v309 = __dst;
                        if (v485 - (unint64_t)__dst > 6)
                        {
                          *(_DWORD *)((char *)__dst + 3) = 656435316;
                          *v309 = 1953068832;
                          __dst = (char *)__dst + 7;
                        }
                        else
                        {
                          llvm::raw_ostream::write((llvm::raw_ostream *)v483, " with '", 7uLL);
                        }
                        llvm::Metadata::print(*(uint64_t ***)&v249[-2 * v249[2] + 4], (llvm::raw_ostream *)v483, 0);
                        v310 = __dst;
                        if (v485 - (unint64_t)__dst > 6)
                        {
                          *(_DWORD *)((char *)__dst + 3) = 544042866;
                          *v310 = 1919295527;
                          __dst = (char *)__dst + 7;
                        }
                        else
                        {
                          llvm::raw_ostream::write((llvm::raw_ostream *)v483, "' from ", 7uLL);
                        }
                        v311 = *(_BYTE *)(*(_QWORD *)v436 + 191);
                        if (v311 >= 0)
                          v312 = (const char *)(*(_QWORD *)v436 + 168);
                        else
                          v312 = *(const char **)(*(_QWORD *)v436 + 168);
                        if (v311 >= 0)
                          v313 = v311 & 0x7F;
                        else
                          v313 = *(_QWORD *)(*(_QWORD *)v436 + 176);
                        llvm::raw_ostream::write((llvm::raw_ostream *)v483, v312, v313);
                        v314 = __dst;
                        if ((unint64_t)__dst >= v485)
                        {
                          llvm::raw_ostream::write((llvm::raw_ostream *)v483, 41);
                        }
                        else
                        {
                          __dst = (char *)__dst + 1;
                          *v314 = 41;
                        }
                        v483[0] = off_1E81A6E70;
                        if (v489 == 1 && v484)
                          MEMORY[0x1CAA32F9C](v484, 0x1000C8077774924);
                        LOWORD(__dst) = 260;
                        v483[0] = &v433;
                        v315 = *(_QWORD *)v437;
                        LODWORD(__p[1]) = 3;
                        BYTE4(__p[1]) = 1;
                        __p[0] = &off_1E817F1D8;
                        v495 = v483;
                        llvm::LLVMContext::diagnose(v315, (const llvm::DiagnosticInfo *)__p);
                        if (SHIBYTE(v433.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v433.__r_.__value_.__l.__data_);
                        v241 = v411;
                      }
LABEL_437:
                      if (v254 == 8 || v258 == 8)
                      {
                        v279 = *(_QWORD *)(*(_QWORD *)&v249[-2 * v249[2] + 4] + 128);
                        v280 = *(_QWORD *)(*(_QWORD *)&v242[-2 * v242[2] + 4] + 128);
                        v484 = 0;
                        v483[1] = 0;
                        v483[0] = 0;
                        if (v258 == 8)
                          v281 = v249;
                        else
                          v281 = v242;
                        v483[0] = *(void **)&v281[-2 * v281[2]];
                        v483[1] = v244;
                        v282 = (_QWORD *)(v280 + 24);
                        if (*(_DWORD *)(v280 + 32) >= 0x41u)
                          v282 = (_QWORD *)*v282;
                        v283 = v409;
                        v284 = (_QWORD *)*v282;
                        v285 = (_QWORD *)(v279 + 24);
                        if (*(_DWORD *)(v279 + 32) >= 0x41u)
                          v285 = (_QWORD *)*v285;
                        if ((unint64_t)v284 >= *v285)
                          v286 = v249;
                        else
                          v286 = v242;
                      }
                      else
                      {
                        if (v254 != 7 && v258 != 7)
                        {
                          if (v254 == 1)
                          {
                            if (*(_QWORD *)&v242[-2 * v242[2] + 4] != *(_QWORD *)&v249[-2 * v249[2] + 4])
                            {
                              v337 = (uint64_t *)v244[1];
                              v338 = *v337;
                              v428 = 1283;
                              v426.__r_.__value_.__r.__words[0] = (std::string::size_type)"linking module flags '";
                              v426.__r_.__value_.__r.__words[2] = (std::string::size_type)(v337 + 3);
                              v427 = v338;
                              v334 = "': IDs have conflicting values in '";
                              goto LABEL_568;
                            }
                            goto LABEL_488;
                          }
                          if (v254 != 5)
                          {
                            if (v254 == 6)
                            {
                              v483[0] = (void *)1;
                              for (k = 1; k != 17; k += 2)
                                *(int64x2_t *)&v483[k] = v241;
                              v491 = v493;
                              v492 = 0x1000000000;
                              v265 = *(_QWORD *)&v249[-2 * v249[2] + 4];
                              v266 = *(_QWORD *)&v242[-2 * v242[2] + 4];
                              sub_1C62B3AEC(v483, (uint64_t *)(v265 - 8 * *(unsigned int *)(v265 + 8)), (uint64_t *)v265);
                              sub_1C62B3AEC(v483, (uint64_t *)(v266 - 8 * *(unsigned int *)(v266 + 8)), (uint64_t *)v266);
                              v267 = llvm::MDTuple::getImpl(**(uint64_t ***)v436, v491, v492, 0, 1);
                              __p[0] = *(void **)&v249[-2 * v249[2]];
                              __p[1] = v244;
                              v495 = (void **)v267;
                              v268 = (unsigned __int8 *)llvm::MDTuple::getImpl(**(uint64_t ***)v436, __p, 3, 0, 1);
                              sub_1C4FCE378((unsigned __int8 **)(**(_QWORD **)(v409 + 48) + 8 * v250), v268);
                              sub_1C61E016C((uint64_t)&v435, (uint64_t *)&v418)[1] = v268;
                              if (v491 != v493)
                                free(v491);
                              v239 = v408;
                              if (((uint64_t)v483[0] & 1) == 0)
                                MEMORY[0x1CAA32FB4](v483[1], 8);
LABEL_487:
                              v241 = v411;
                            }
LABEL_488:
                            if (++v240 == v239)
                              goto LABEL_535;
                            continue;
                          }
                          v299 = *(_QWORD *)&v249[-2 * v249[2] + 4];
                          v300 = *(_QWORD *)&v242[-2 * v242[2] + 4];
                          v483[0] = &v484;
                          v483[1] = (void *)0x800000000;
                          v301 = *(_DWORD *)(v299 + 8);
                          v302 = *(_DWORD *)(v300 + 8) + v301;
                          if (v302 >= 9)
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v483, (uint64_t)&v484, v302, 8);
                            v301 = *(_DWORD *)(v299 + 8);
                          }
                          sub_1C485BB4C((unsigned int *)v483, (char *)(v299 - 8 * v301), (char *)v299);
                          sub_1C485BB4C((unsigned int *)v483, (char *)(v300 - 8 * *(unsigned int *)(v300 + 8)), (char *)v300);
                          v303 = llvm::MDTuple::getImpl(**(uint64_t ***)v436, (_QWORD *)v483[0], LODWORD(v483[1]), 0, 1);
                          __p[0] = *(void **)&v249[-2 * v249[2]];
                          __p[1] = v244;
                          v495 = (void **)v303;
                          v304 = (unsigned __int8 *)llvm::MDTuple::getImpl(**(uint64_t ***)v436, __p, 3, 0, 1);
                          sub_1C4FCE378((unsigned __int8 **)(**(_QWORD **)(v409 + 48) + 8 * v250), v304);
                          sub_1C61E016C((uint64_t)&v435, (uint64_t *)&v418)[1] = v304;
                          if (v483[0] != &v484)
                            free(v483[0]);
LABEL_486:
                          v239 = v408;
                          goto LABEL_487;
                        }
                        v287 = *(_QWORD *)(*(_QWORD *)&v249[-2 * v249[2] + 4] + 128);
                        v288 = *(_QWORD *)(*(_QWORD *)&v242[-2 * v242[2] + 4] + 128);
                        v484 = 0;
                        v483[1] = 0;
                        v483[0] = 0;
                        if (v258 == 7)
                          v289 = v249;
                        else
                          v289 = v242;
                        v483[0] = *(void **)&v289[-2 * v289[2]];
                        v483[1] = v244;
                        v290 = (_QWORD *)(v288 + 24);
                        if (*(_DWORD *)(v288 + 32) >= 0x41u)
                          v290 = (_QWORD *)*v290;
                        v283 = v409;
                        v291 = (_QWORD *)*v290;
                        v292 = (_QWORD *)(v287 + 24);
                        if (*(_DWORD *)(v287 + 32) >= 0x41u)
                          v292 = (_QWORD *)*v292;
                        if ((unint64_t)v291 <= *v292)
                          v286 = v249;
                        else
                          v286 = v242;
                      }
                      v484 = *(const char **)&v286[-2 * v286[2] + 4];
                      v293 = (unsigned __int8 *)llvm::MDTuple::getImpl(**(uint64_t ***)v436, v483, 3, 0, 1);
                      sub_1C4FCE378((unsigned __int8 **)(**(_QWORD **)(v283 + 48) + 8 * v250), v293);
                      sub_1C61E016C((uint64_t)&v435, (uint64_t *)&v418)[1] = v293;
                      goto LABEL_486;
                    }
                    v274 = *(_DWORD *)(*(_QWORD *)(v409 + 48) + 8);
                    v275 = sub_1C61E016C((uint64_t)&v435, (uint64_t *)&v418);
                    v275[1] = v242;
                    *((_DWORD *)v275 + 4) = v274;
                    v483[0] = v242;
                    v270 = *(_QWORD *)(v409 + 48);
                    v276 = *(unsigned int *)(v270 + 8);
                    if (v276 < *(_DWORD *)(v270 + 12))
                    {
                      v277 = (unsigned int **)(*(_QWORD *)v270 + 8 * v276);
                      *v277 = v242;
                      if (v242)
                      {
                        llvm::MetadataTracking::track((uint64_t)v277, (unsigned __int8 *)v242, 2);
                        LODWORD(v276) = *(_DWORD *)(v270 + 8);
                      }
                      v273 = v276 + 1;
                      goto LABEL_463;
                    }
                  }
                  break;
                }
                sub_1C5419FD8(v270, (unsigned __int8 **)v483);
                goto LABEL_486;
              }
              v322 = *(unsigned int *)(*(_QWORD *)(v227 + 48) + 8);
              if ((_DWORD)v322)
              {
                v323 = 0;
                v324 = 8 * v322;
                do
                {
                  v325 = *(void **)(**(_QWORD **)(v227 + 48) + v323);
                  v498[0] = v325;
                  v326 = *(_QWORD *)(v229 + 48);
                  v327 = *(unsigned int *)(v326 + 8);
                  if (v327 >= *(_DWORD *)(v326 + 12))
                  {
                    sub_1C5419FD8(*(_QWORD *)(v229 + 48), (unsigned __int8 **)v498);
                  }
                  else
                  {
                    v328 = (_QWORD *)(*(_QWORD *)v326 + 8 * v327);
                    *v328 = v325;
                    if (v325)
                    {
                      llvm::MetadataTracking::track((uint64_t)v328, (unsigned __int8 *)v325, 2);
                      LODWORD(v327) = *(_DWORD *)(v326 + 8);
                    }
                    *(_DWORD *)(v326 + 8) = v327 + 1;
                  }
                  v323 += 8;
                }
                while (v324 != v323);
              }
            }
            *a7 = 0;
            goto LABEL_577;
          }
        }
      }
      v165 = *(unsigned __int8 **)(v158 - 8);
      v158 -= 8;
      v136 = v165;
      *((_QWORD *)&v474 + 1) = v158;
      v166 = v165 >> 4;
      if (!v462)
        goto LABEL_311;
      v167 = (v462 - 1) & (v166 ^ (v136 >> 9));
      v168 = v461[0] + (v167 << 6);
      v169 = *(unsigned __int8 **)(v168 + 24);
      if (v136 != v169)
        break;
LABEL_310:
      if (v168 == v461[0] + ((unint64_t)v462 << 6))
        goto LABEL_311;
    }
    v170 = 1;
    while (v169 != (unsigned __int8 *)-4096)
    {
      v171 = v167 + v170++;
      v167 = v171 & (v462 - 1);
      v168 = v461[0] + (v167 << 6);
      v169 = *(unsigned __int8 **)(v168 + 24);
      if (v136 == v169)
        goto LABEL_310;
    }
LABEL_311:
    if (!v469)
      goto LABEL_317;
    v172 = (v469 - 1) & (v166 ^ (v136 >> 9));
    v173 = v468[0] + (v172 << 6);
    v174 = *(unsigned __int8 **)(v173 + 24);
    if (v136 != v174)
      break;
LABEL_316:
    if (v173 == v468[0] + ((unint64_t)v469 << 6))
      goto LABEL_317;
  }
  v175 = 1;
  while (v174 != (unsigned __int8 *)-4096)
  {
    v176 = v172 + v175++;
    v172 = v176 & (v469 - 1);
    v173 = v468[0] + (v172 << 6);
    v174 = *(unsigned __int8 **)(v173 + 24);
    if (v136 == v174)
      goto LABEL_316;
  }
LABEL_317:
  v498[0] = v481;
  sub_1C5FD3BE0((uint64_t)v481, (llvm::MDNode **)v136);
  sub_1C5FD3718((uint64_t *)v498, v177);
  if (!v480)
  {
    v178 = (llvm::ValueAsMetadata **)*((_QWORD *)&v475 + 1);
    v179 = (llvm::ValueAsMetadata **)v476;
    if (*((_QWORD *)&v475 + 1) != (_QWORD)v476)
    {
      do
      {
        v181 = *v178;
        v180 = v178[1];
        v178 += 2;
        llvm::Value::doRAUW(v181, v180, (llvm::Value *)1);
        llvm::GlobalValue::eraseFromParent(v181);
      }
      while (v178 != v179);
      v178 = (llvm::ValueAsMetadata **)*((_QWORD *)&v475 + 1);
    }
    *(_QWORD *)&v476 = v178;
    goto LABEL_303;
  }
  *a7 = v479;
  v479 = 0;
LABEL_577:
  if (v420 < 0)
    operator delete(v419[0]);
  if (v423 < 0)
    operator delete(v422[0]);
LABEL_581:
  llvm::LLVMContextImpl::dropTriviallyDeadConstantArrays(***a1);
  v342 = v460;
  sub_1C4E43068(v460);
  MEMORY[0x1CAA32FB4](*(_QWORD *)v342, 8);
  *(_QWORD *)v342 = 0;
  *(_QWORD *)(v342 + 8) = 0;
  *(_DWORD *)(v342 + 16) = 0;
  *(_QWORD *)v342 = v463;
  v463 = 0;
  *(_DWORD *)(v342 + 8) = v464;
  v464 = 0;
  v343 = *(_DWORD *)(v342 + 12);
  *(_DWORD *)(v342 + 12) = v465;
  v465 = v343;
  v344 = *(_DWORD *)(v342 + 16);
  *(_DWORD *)(v342 + 16) = v466;
  v466 = v344;
  llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v481, v345);
  if (v480)
  {
    if (v479)
      (*(void (**)(uint64_t))(*(_QWORD *)v479 + 8))(v479);
    v480 = 0;
  }
  if (*((_QWORD *)&v475 + 1))
  {
    *(_QWORD *)&v476 = *((_QWORD *)&v475 + 1);
    operator delete(*((void **)&v475 + 1));
  }
  if ((_QWORD)v474)
  {
    *((_QWORD *)&v474 + 1) = v474;
    operator delete((void *)v474);
  }
  MEMORY[0x1CAA32FB4](v472, 8);
  if (v471)
  {
    sub_1C4E43068((uint64_t)v470);
    MEMORY[0x1CAA32FB4](v470[0], 8);
    v471 = 0;
  }
  v346 = (_QWORD *)v468[0];
  if (v469)
  {
    v347 = v468[0] + ((unint64_t)v469 << 6);
    do
    {
      v348 = v346[3];
      if ((v348 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v349 = v346[7];
        if (v349)
        {
          if (v349 != -8192 && v349 != -4096)
          {
            v350 = v346[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v350 = v346[6];
            v351 = (unint64_t *)v346[6];
            if (v351)
            {
              *v351 = *v351 & 7 | v350;
            }
            else
            {
              v352 = v346[7];
              v353 = ***(int32x2_t ****)v352;
              v354 = (unint64_t)v353[303];
              if (v354 <= v350)
              {
                v355 = v353[305].u32[0];
                if (v354 + 16 * v355 > v350)
                {
                  v356 = v355 - 1;
                  LODWORD(v357) = v356 & ((v352 >> 4) ^ (v352 >> 9));
                  v358 = (uint64_t *)(v354 + 16 * v357);
                  v359 = *v358;
                  if (v352 == *v358)
                  {
LABEL_605:
                    *v358 = -8192;
                    v353[304] = vadd_s32(v353[304], (int32x2_t)0x1FFFFFFFFLL);
                    v352 = v346[7];
                  }
                  else
                  {
                    v360 = 1;
                    while (v359 != -4096)
                    {
                      v361 = v357 + v360++;
                      v357 = v361 & v356;
                      v359 = *(_QWORD *)(v354 + 16 * v357);
                      if (v352 == v359)
                      {
                        v358 = (uint64_t *)(v354 + 16 * v357);
                        goto LABEL_605;
                      }
                    }
                  }
                  *(_BYTE *)(v352 + 17) &= ~1u;
                }
              }
            }
            v348 = v346[3];
          }
        }
      }
      if (v348 != -4096 && v348 != -8192 && v348 != 0)
      {
        v363 = v346[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v363 = v346[2];
        v364 = (unint64_t *)v346[2];
        if (v364)
        {
          *v364 = *v364 & 7 | v363;
        }
        else
        {
          v365 = v346[3];
          v366 = ***(int32x2_t ****)v365;
          v367 = (unint64_t)v366[303];
          if (v367 <= v363)
          {
            v368 = v366[305].u32[0];
            if (v367 + 16 * v368 > v363)
            {
              v369 = v368 - 1;
              LODWORD(v370) = v369 & ((v365 >> 4) ^ (v365 >> 9));
              v371 = (uint64_t *)(v367 + 16 * v370);
              v372 = *v371;
              if (v365 == *v371)
              {
LABEL_624:
                *v371 = -8192;
                v366[304] = vadd_s32(v366[304], (int32x2_t)0x1FFFFFFFFLL);
                v365 = v346[3];
              }
              else
              {
                v373 = 1;
                while (v372 != -4096)
                {
                  v374 = v370 + v373++;
                  v370 = v374 & v369;
                  v372 = *(_QWORD *)(v367 + 16 * v370);
                  if (v365 == v372)
                  {
                    v371 = (uint64_t *)(v367 + 16 * v370);
                    goto LABEL_624;
                  }
                }
              }
              *(_BYTE *)(v365 + 17) &= ~1u;
            }
          }
        }
      }
      v346 += 8;
    }
    while (v346 != (_QWORD *)v347);
    v346 = (_QWORD *)v468[0];
  }
  MEMORY[0x1CAA32FB4](v346, 8);
  if (v467)
  {
    sub_1C4E43068((uint64_t)&v463);
    MEMORY[0x1CAA32FB4](v463, 8);
    v467 = 0;
  }
  v375 = (_QWORD *)v461[0];
  if (v462)
  {
    v376 = v461[0] + ((unint64_t)v462 << 6);
    do
    {
      v377 = v375[3];
      if ((v377 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v378 = v375[7];
        if (v378)
        {
          if (v378 != -8192 && v378 != -4096)
          {
            v379 = v375[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v379 = v375[6];
            v380 = (unint64_t *)v375[6];
            if (v380)
            {
              *v380 = *v380 & 7 | v379;
            }
            else
            {
              v381 = v375[7];
              v382 = ***(int32x2_t ****)v381;
              v383 = (unint64_t)v382[303];
              if (v383 <= v379)
              {
                v384 = v382[305].u32[0];
                if (v383 + 16 * v384 > v379)
                {
                  v385 = v384 - 1;
                  LODWORD(v386) = v385 & ((v381 >> 4) ^ (v381 >> 9));
                  v387 = (uint64_t *)(v383 + 16 * v386);
                  v388 = *v387;
                  if (v381 == *v387)
                  {
LABEL_643:
                    *v387 = -8192;
                    v382[304] = vadd_s32(v382[304], (int32x2_t)0x1FFFFFFFFLL);
                    v381 = v375[7];
                  }
                  else
                  {
                    v389 = 1;
                    while (v388 != -4096)
                    {
                      v390 = v386 + v389++;
                      v386 = v390 & v385;
                      v388 = *(_QWORD *)(v383 + 16 * v386);
                      if (v381 == v388)
                      {
                        v387 = (uint64_t *)(v383 + 16 * v386);
                        goto LABEL_643;
                      }
                    }
                  }
                  *(_BYTE *)(v381 + 17) &= ~1u;
                }
              }
            }
            v377 = v375[3];
          }
        }
      }
      if (v377 != -4096 && v377 != -8192 && v377 != 0)
      {
        v392 = v375[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v392 = v375[2];
        v393 = (unint64_t *)v375[2];
        if (v393)
        {
          *v393 = *v393 & 7 | v392;
        }
        else
        {
          v394 = v375[3];
          v395 = ***(int32x2_t ****)v394;
          v396 = (unint64_t)v395[303];
          if (v396 <= v392)
          {
            v397 = v395[305].u32[0];
            if (v396 + 16 * v397 > v392)
            {
              v398 = v397 - 1;
              LODWORD(v399) = v398 & ((v394 >> 4) ^ (v394 >> 9));
              v400 = (uint64_t *)(v396 + 16 * v399);
              v401 = *v400;
              if (v394 == *v400)
              {
LABEL_662:
                *v400 = -8192;
                v395[304] = vadd_s32(v395[304], (int32x2_t)0x1FFFFFFFFLL);
                v394 = v375[3];
              }
              else
              {
                v402 = 1;
                while (v401 != -4096)
                {
                  v403 = v399 + v402++;
                  v399 = v403 & v398;
                  v401 = *(_QWORD *)(v396 + 16 * v399);
                  if (v394 == v401)
                  {
                    v400 = (uint64_t *)(v396 + 16 * v399);
                    goto LABEL_662;
                  }
                }
              }
              *(_BYTE *)(v394 + 17) &= ~1u;
            }
          }
        }
      }
      v375 += 8;
    }
    while (v375 != (_QWORD *)v376);
    v375 = (_QWORD *)v461[0];
  }
  MEMORY[0x1CAA32FB4](v375, 8);
  v441 = &off_1E817F208;
  if (__b != v453)
    free(__b);
  if (v450 != v452)
    free(v450);
  if (v447 != v449)
    free(v447);
  if (v444 != v446)
    free(v444);
  MEMORY[0x1CAA32FB4](v442[0], 8);
  sub_1C5052E10(&v438);
  result = v437;
  v437 = 0;
  if (result)
  {
    llvm::Module::~Module(result);
    return (llvm *)MEMORY[0x1CAA32FC0]();
  }
  return result;
}

void sub_1C5910880(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[31];

  v14 = a2;
  sub_1C56CA114((uint64_t)(a1 + 106), &v14, (uint64_t)v15);
  if (v15[16])
  {
    v3 = (_QWORD *)a1[110];
    v4 = a1[111];
    if ((unint64_t)v3 >= v4)
    {
      v6 = (_QWORD *)a1[109];
      v7 = v3 - v6;
      v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61)
        abort();
      v9 = v4 - (_QWORD)v6;
      if (v9 >> 2 > v8)
        v8 = v9 >> 2;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v10 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v10 = v8;
      if (v10)
      {
        if (v10 >> 61)
          sub_1C4764EE4();
        v11 = (char *)operator new(8 * v10);
      }
      else
      {
        v11 = 0;
      }
      v12 = &v11[8 * v7];
      *(_QWORD *)v12 = v14;
      v5 = v12 + 8;
      if (v3 != v6)
      {
        do
        {
          v13 = *--v3;
          *((_QWORD *)v12 - 1) = v13;
          v12 -= 8;
        }
        while (v3 != v6);
        v3 = (_QWORD *)a1[109];
      }
      a1[109] = v12;
      a1[110] = v5;
      a1[111] = &v11[8 * v10];
      if (v3)
        operator delete(v3);
    }
    else
    {
      *v3 = v14;
      v5 = v3 + 1;
    }
    a1[110] = v5;
  }
}

_QWORD *sub_1C591099C(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *a1 = &off_1E817F208;
  v2 = (void *)a1[59];
  if (v2 != (void *)a1[58])
    free(v2);
  v3 = (_QWORD *)a1[40];
  if (v3 != a1 + 42)
    free(v3);
  v4 = (_QWORD *)a1[22];
  if (v4 != a1 + 24)
    free(v4);
  v5 = (_QWORD *)a1[4];
  if (v5 != a1 + 6)
    free(v5);
  MEMORY[0x1CAA32FB4](a1[1], 8);
  return a1;
}

void sub_1C5910A24(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *a1 = &off_1E817F208;
  v2 = (void *)a1[59];
  if (v2 != (void *)a1[58])
    free(v2);
  v3 = (_QWORD *)a1[40];
  if (v3 != a1 + 42)
    free(v3);
  v4 = (_QWORD *)a1[22];
  if (v4 != a1 + 24)
    free(v4);
  v5 = (_QWORD *)a1[4];
  if (v5 != a1 + 6)
    free(v5);
  MEMORY[0x1CAA32FB4](a1[1], 8);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5910AC0(uint64_t a1, llvm::StructType *a2)
{
  uint64_t v2;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  int v7;
  _BYTE v8[64];

  v4 = v8;
  v5 = v8;
  v6 = 8;
  v7 = 0;
  v2 = sub_1C5910B1C(a1, a2, (llvm::SmallPtrSetImplBase *)&v4);
  if (v5 != v4)
    free(v5);
  return v2;
}

uint64_t sub_1C5910B1C(uint64_t a1, llvm::StructType *a2, llvm::SmallPtrSetImplBase *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  llvm::StructType **v10;
  llvm::StructType *v11;
  llvm::StructType **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  unsigned int v20;
  llvm::StructType *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  llvm::StructType **v32;
  llvm::StructType *v33;
  llvm::StructType **v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  uint64_t v38;
  llvm::StructType **v40;
  llvm::StructType **v41;
  llvm::StructType *v42;
  void *v43;
  uint64_t v44;
  _QWORD v45[5];

  v45[4] = *MEMORY[0x1E0C80C00];
  v42 = a2;
  v6 = a1 + 8;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 24);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
    v10 = (llvm::StructType **)(v5 + 16 * v9);
    v11 = *v10;
    if (*v10 == a2)
      goto LABEL_11;
    v12 = 0;
    v13 = 1;
    while (v11 != (llvm::StructType *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (llvm::StructType *)-8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (llvm::StructType **)(v5 + 16 * v9);
      v11 = *v10;
      if (*v10 == a2)
        goto LABEL_11;
    }
    if (v12)
      v40 = v12;
    else
      v40 = v10;
  }
  else
  {
    v40 = 0;
  }
  v10 = (llvm::StructType **)sub_1C55BA394(a1 + 8, (uint64_t)&v42, &v42, v40);
  *v10 = v42;
  v10[1] = 0;
LABEL_11:
  v16 = (uint64_t)v10[1];
  if (v16)
    return v16;
  v16 = (uint64_t)v42;
  v17 = *((_DWORD *)v42 + 2);
  v18 = v17 & 0x4FF;
  if (v18 == 16)
  {
    if ((v17 & 0x100) == 0)
    {
      if ((llvm::IRMover::IdentifiedStructTypeSet::hasType(*(llvm::IRMover::IdentifiedStructTypeSet **)(a1 + 624), (const void **)v42) & 1) != 0)
      {
        v10[1] = (llvm::StructType *)v16;
        return v16;
      }
      v16 = (uint64_t)v42;
    }
    sub_1C4774094(a3, v16);
    if (!v19)
    {
      v38 = *(_QWORD *)v42;
      v16 = sub_1C484358C(**(_QWORD **)v42 + 2040, 32, 3);
      *(_QWORD *)v16 = v38;
      *(_DWORD *)(v16 + 8) = 16;
      *(_QWORD *)(v16 + 20) = 0;
      *(_QWORD *)(v16 + 12) = 0;
      *(_DWORD *)(v16 + 28) = 0;
      v10[1] = (llvm::StructType *)v16;
      return v16;
    }
    v43 = v45;
    v44 = 0x400000000;
    v20 = *((_DWORD *)v42 + 3);
LABEL_17:
    sub_1C515FA1C((uint64_t)&v43, v20);
    v21 = v42;
    v22 = *((unsigned int *)v42 + 3);
    if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = 0;
      v25 = *((_QWORD *)v42 + 2);
      v26 = 8 * v22;
      do
      {
        v27 = sub_1C5910B1C(a1, *(_QWORD *)(v25 + v23), a3);
        *(_QWORD *)((char *)v43 + v23) = v27;
        v21 = v42;
        v25 = *((_QWORD *)v42 + 2);
        v24 |= *(_QWORD *)((char *)v43 + v23) != *(_QWORD *)(v25 + v23);
        v23 += 8;
      }
      while (v26 != v23);
    }
    else
    {
      v24 = 0;
    }
    v28 = *(_DWORD *)(a1 + 24);
    if (v28)
    {
      v29 = *(_QWORD *)(a1 + 8);
      v30 = v28 - 1;
      v31 = ((v21 >> 4) ^ (v21 >> 9)) & v30;
      v32 = (llvm::StructType **)(v29 + 16 * v31);
      v33 = *v32;
      if (v21 == *v32)
        goto LABEL_32;
      v34 = 0;
      v35 = 1;
      while (v33 != (llvm::StructType *)-4096)
      {
        if (v34)
          v36 = 0;
        else
          v36 = v33 == (llvm::StructType *)-8192;
        if (v36)
          v34 = v32;
        v37 = v31 + v35++;
        v31 = v37 & v30;
        v32 = (llvm::StructType **)(v29 + 16 * v31);
        v33 = *v32;
        if (v21 == *v32)
          goto LABEL_32;
      }
      if (v34)
        v41 = v34;
      else
        v41 = v32;
    }
    else
    {
      v41 = 0;
    }
    v32 = (llvm::StructType **)sub_1C55BA394(v6, (uint64_t)&v42, &v42, v41);
    *v32 = v42;
    v32[1] = 0;
LABEL_32:
    v16 = (uint64_t)v32[1];
    if (v16)
    {
      if ((*(_DWORD *)(v16 + 8) & 0x1FF) == 0x10)
      {
        sub_1C5911008(a1, (uint64_t)v32[1], (uint64_t)v42, (uint64_t)v43, v44);
        v16 = (uint64_t)v32[1];
      }
    }
    else
    {
      v16 = (uint64_t)v42;
      if ((v18 == 16) | v24 & 1)
        __asm { BR              X11 }
      v32[1] = v42;
    }
    goto LABEL_43;
  }
  v43 = v45;
  v44 = 0x400000000;
  v20 = *((_DWORD *)v42 + 3);
  if (v20)
    goto LABEL_17;
  v10[1] = v42;
LABEL_43:
  if (v43 != v45)
    free(v43);
  return v16;
}

uint64_t sub_1C5911008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t *v8;
  unint64_t v9;
  const void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;
  __int128 v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  llvm::StructType::setBody(a2, a4, a5, (*(_DWORD *)(a3 + 8) >> 9) & 1);
  v8 = *(unint64_t **)(a3 + 24);
  if (!v8)
    goto LABEL_7;
  v11 = *v8;
  v10 = v8 + 2;
  v9 = v11;
  v17 = v19;
  v18 = xmmword_1C6612EE0;
  if (v11 >= 0x11)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v17, v19, v9, 1);
    v12 = v18;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    if (!v9)
      goto LABEL_5;
  }
  memcpy((char *)v17 + v12, v10, v9);
  v13 = v18;
LABEL_5:
  *(_QWORD *)&v18 = v13 + v9;
  llvm::StructType::setName(a3, "", 0);
  llvm::StructType::setName(a2, (unsigned __int8 *)v17, v18);
  if (v17 != v19)
    free(v17);
LABEL_7:
  v14 = *(_QWORD *)(a1 + 624);
  v16 = a2;
  return sub_1C62B3E88((uint64_t)&v17, v14 + 24, &v16);
}

llvm::UndefValue *sub_1C5911148(uint64_t a1, uint64_t ***a2)
{
  return sub_1C5911154(*(_QWORD *)(a1 + 8), a2, 0);
}

llvm::UndefValue *sub_1C5911154(uint64_t a1, uint64_t ***a2, int a3)
{
  uint64_t v3;
  llvm::UndefValue *PointerBitCastOrAddrSpaceCast;
  uint64_t **v8;
  llvm::UndefValue *v9;
  _BOOL4 v10;
  llvm::StructType *v11;
  llvm::Type *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ***v18;
  int v19;
  int v20;
  unsigned int *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ***v26;
  int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  llvm::PointerType *v34;
  char v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ****v41;
  uint64_t ***v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t ***v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t ****v58;
  uint64_t ***v59;
  int v60;
  int v61;
  int v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t ****v68;
  uint64_t ***v69;
  int v70;
  int v71;
  uint64_t ***v72;
  BOOL v73;
  BOOL v74;
  uint64_t **v75;
  uint64_t **v76;
  int v77;
  BOOL v78;
  BOOL v79;
  BOOL v80;
  int v81;
  uint64_t v82;
  __int16 v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t ***v91;
  int v92;
  int v93;
  llvm::PointerType *v94;
  llvm::Type *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t ****v100;
  uint64_t ***v101;
  int v102;
  int v103;
  llvm::PointerType *v104;
  int v105;
  llvm::Type *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t ****v111;
  uint64_t ***v112;
  int v113;
  int v114;
  llvm::StructType *v115;
  llvm::PointerType *v116;
  llvm::Type *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t ****v122;
  uint64_t ***v123;
  int v124;
  int v125;
  uint64_t ***v126;
  char *v127;
  uint64_t **v128;
  uint64_t **v129;
  unint64_t v131;
  uint64_t v132;
  int v133;
  llvm::Constant *v135;
  int v136;
  llvm::Constant **v137;
  unint64_t v138;
  llvm::Type *v139;
  llvm::UndefValue *AggregateElement;
  uint64_t v141;
  llvm::Constant **v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  _DWORD *v146;
  uint64_t v147;
  llvm::PointerType *v148;
  uint64_t **v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t ****v154;
  uint64_t ***v155;
  int v156;
  int v157;
  _QWORD *v158;
  unint64_t **v159;
  char *v160;
  unint64_t v162;
  _QWORD *v163;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  int32x2_t *v168;
  unint64_t v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  char **v173;
  char *v174;
  int v175;
  int v176;
  unint64_t v177;
  int32x2_t ****v178;
  int32x2_t *v179;
  unint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  int32x2_t *****v184;
  int32x2_t ****v185;
  int v186;
  int v187;
  uint64_t ***v188;
  char *v189;
  uint64_t **v190;
  uint64_t **v191;
  llvm::GlobalObject *v192;
  int v193;
  uint64_t ***v194;
  char *v195;
  uint64_t **v196;
  uint64_t **v197;
  uint64_t v198;
  void *v199;
  uint64_t *v200;
  unint64_t v201;
  unsigned int *v202;
  unint64_t i;
  unint64_t v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t AttributeAtIndex;
  uint64_t v208;
  unsigned int v209;
  int v210;
  unsigned int *v211;
  unsigned int v212;
  BOOL v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  llvm::UndefValue *v217;
  llvm::Value *v218;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  llvm::UndefValue *v229;
  llvm::Value *v230;
  BOOL v231;
  uint64_t v232;
  uint64_t v233;
  llvm::PointerType *v234;
  llvm::PointerType *v235;
  _DWORD *v236;
  llvm::UndefValue *v237;
  uint64_t v238;
  char v239;
  unsigned int v240;
  llvm::GlobalObject *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  uint64_t ****v248;
  uint64_t ***v249;
  int v250;
  int v251;
  uint64_t ***v252;
  unsigned __int8 *v253;
  size_t v254;
  size_t v255;
  llvm::Constant *v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t *v259;
  unint64_t v260;
  _QWORD *v261;
  char *v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  char *v267;
  uint64_t *v268;
  llvm::UndefValue *v269;
  uint64_t ***v270;
  char *v271;
  uint64_t **v272;
  uint64_t **v273;
  uint64_t v274;
  void *v275;
  uint64_t ***v276;
  char *v277;
  uint64_t **v278;
  uint64_t **v279;
  int v280;
  unsigned int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char v285;
  uint64_t v286;
  uint64_t ****v287;
  uint64_t ***v288;
  int v289;
  int v290;
  size_t v291;
  char v292;
  size_t v293;
  uint64_t ***v294;
  unsigned __int8 *v295;
  size_t v296;
  size_t v297;
  int v298;
  uint64_t AliaseeObject;
  uint64_t v300;
  unsigned int v301;
  size_t *inserted;
  char v303;
  llvm::Constant *v304;
  llvm::Type *v305;
  char v306;
  llvm::UndefValue *v307;
  llvm::UndefValue *v308;
  llvm::UndefValue **v309;
  unint64_t v310;
  _QWORD *v311;
  char *v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  char *v317;
  llvm::UndefValue **v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  int v322;
  unsigned int v323;
  uint64_t ****v324;
  uint64_t ***v325;
  llvm::Type *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t ****v331;
  uint64_t ***v332;
  int v333;
  int v334;
  uint64_t v335;
  int v336;
  uint64_t v337;
  int v338;
  unsigned int v339;
  llvm::UndefValue **v340;
  llvm::UndefValue *v341;
  size_t v342;
  __int16 v343;
  llvm::UndefValue *v344;
  uint64_t v345;
  int v346;
  uint64_t v347;
  int v348;
  unsigned int v349;
  uint64_t ****v350;
  uint64_t ***v351;
  int v352;
  uint64_t ***v353;
  uint64_t v354;
  __int16 v355;
  __int16 v356;
  int v357;
  uint64_t ***v358;
  uint64_t ***v359;
  char *v360;
  uint64_t **v361;
  uint64_t **v362;
  uint64_t ***v363;
  char *v364;
  uint64_t **v365;
  uint64_t **v366;
  uint64_t v367;
  __int16 v368;
  int v369;
  uint64_t *v370;
  __int16 v371;
  uint64_t v372;
  llvm::UndefValue **v373;
  int v374;
  BOOL v375;
  unsigned int v376;
  uint64_t ****v377;
  int v378;
  BOOL v379;
  unsigned int v380;
  uint64_t ****v381;
  int v382;
  BOOL v383;
  unsigned int v384;
  llvm::UndefValue **v385;
  llvm::UndefValue *v386;
  uint64_t ****v387;
  uint64_t ***v388;
  uint64_t ****v389;
  uint64_t ***v390;
  uint64_t *v391;
  uint64_t v392;
  llvm::UndefValue *v393;
  int v394;
  int v395;
  int v396;
  int v397;
  char v398;
  char v399;
  uint64_t v400;
  uint64_t v401;
  unint64_t *v402;
  int32x2_t ****v403;
  uint64_t v404;
  unint64_t *v405;
  char *v406;
  uint64_t **v407;
  __int16 v408;
  void *v409[2];
  _QWORD v410[2];
  __int16 v411;
  uint64_t v412;

  PointerBitCastOrAddrSpaceCast = 0;
  v412 = *MEMORY[0x1E0C80C00];
  if (!a2 || *((unsigned __int8 *)a2 + 16) > 3u)
    return PointerBitCastOrAddrSpaceCast;
  v8 = a2[5];
  if (v8 != *(uint64_t ***)a1 && v8 != *(uint64_t ***)(a1 + 8))
    return 0;
  v9 = (llvm::UndefValue *)sub_1C59132BC(a1, a2);
  v10 = sub_1C5913014(a1, (uint64_t)v9, (uint64_t)a2);
  v13 = v10;
  if (v10)
  {
    v14 = *(_QWORD *)(a1 + 720);
    v15 = *(unsigned int *)(a1 + 736);
    if ((_DWORD)v15)
    {
      v16 = ((_DWORD)v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v17 = v14 + (v16 << 6);
      v18 = *(uint64_t ****)(v17 + 24);
      if (v18 == a2)
        goto LABEL_16;
      v19 = 1;
      while (v18 != (uint64_t ***)-4096)
      {
        v20 = v16 + v19++;
        v16 = v20 & (v15 - 1);
        v17 = v14 + (v16 << 6);
        v18 = *(uint64_t ****)(v17 + 24);
        if (v18 == a2)
          goto LABEL_16;
      }
    }
    v17 = v14 + (v15 << 6);
LABEL_16:
    if (v17 != v14 + (v15 << 6))
    {
LABEL_25:
      PointerBitCastOrAddrSpaceCast = *(llvm::UndefValue **)(v17 + 56);
      goto LABEL_26;
    }
    v23 = *(_QWORD *)(a1 + 784);
    v24 = *(unsigned int *)(a1 + 800);
    if ((_DWORD)v24)
    {
      v25 = ((_DWORD)v24 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v17 = v23 + (v25 << 6);
      v26 = *(uint64_t ****)(v17 + 24);
      if (v26 == a2)
        goto LABEL_24;
      v27 = 1;
      while (v26 != (uint64_t ***)-4096)
      {
        v28 = v25 + v27++;
        v25 = v28 & (v24 - 1);
        v17 = v23 + (v25 << 6);
        v26 = *(uint64_t ****)(v17 + 24);
        if (v26 == a2)
          goto LABEL_24;
      }
    }
    v17 = v23 + (v24 << 6);
LABEL_24:
    if (v17 != v23 + (v24 << 6))
      goto LABEL_25;
    goto LABEL_36;
  }
  if ((a3 & 1) != 0)
  {
    v9 = 0;
    v21 = (unsigned int *)(a2 + 4);
    v22 = 1;
    if (((_DWORD)a2[4] & 0xF) == 6)
    {
LABEL_78:
      if (*((_BYTE *)a2 + 16))
      {
        if (*((_BYTE *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
        {
LABEL_84:
          PointerBitCastOrAddrSpaceCast = v9;
          goto LABEL_26;
        }
      }
      else if (a2[9] == (uint64_t **)(a2 + 9) && (*((_BYTE *)a2 + 34) & 0x80) == 0)
      {
        goto LABEL_84;
      }
      v53 = *(_QWORD *)(sub_1C5910AC0(a1 + 48, (llvm::StructType *)a2[3]) + 24);
      v54 = ***a2;
      if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
        goto LABEL_119;
      v55 = *(_QWORD *)(v54 + 152);
      v56 = *(unsigned int *)(v54 + 168);
      if ((_DWORD)v56)
      {
        LODWORD(v57) = (v56 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v58 = (uint64_t ****)(v55 + 16 * v57);
        v59 = *v58;
        if (*v58 == a2)
        {
LABEL_104:
          v72 = v58[1];
          if (*v72 == (uint64_t **)17)
          {
            v73 = v72[2] == (uint64_t **)0x6F6C672E6D766C6CLL && v72[3] == (uint64_t **)0x726F74635F6C6162;
            v74 = v73 && *((_BYTE *)v72 + 32) == 115;
            if (v74
              || ((v75 = v72[2],
                   v76 = v72[3],
                   v77 = *((unsigned __int8 *)v72 + 32),
                   v75 == (uint64_t **)0x6F6C672E6D766C6CLL)
                ? (v78 = v76 == (uint64_t **)0x726F74645F6C6162)
                : (v78 = 0),
                  v78 ? (v79 = v77 == 115) : (v79 = 0),
                  v79))
            {
              v84 = *(_DWORD *)(v53 + 12);
              v85 = llvm::PointerType::get((llvm::PointerType *)(v54 + 1912), 0);
              v80 = v84 == 3;
              if (!v80)
              {
                v409[1] = 0;
                v410[0] = 0;
                v409[0] = 0;
                *(_OWORD *)v409 = *(_OWORD *)*(_QWORD *)(v53 + 16);
                v410[0] = v85;
                v53 = llvm::StructType::get(**a2, (uint64_t)v409, 3, 0);
                v80 = 0;
                v81 = 1;
                if ((v22 & 1) == 0)
                {
LABEL_121:
                  if (v9 && *((_BYTE *)v9 + 16) == 3)
                  {
                    if ((*((_DWORD *)v9 + 5) & 0x7FFFFFF) == 0)
                      goto LABEL_133;
                  }
                  else if (!*((_BYTE *)v9 + 16)
                         && *((llvm::UndefValue **)v9 + 9) == (llvm::UndefValue *)((char *)v9 + 72)
                         && (*((_BYTE *)v9 + 34) & 0x80) == 0)
                  {
                    goto LABEL_133;
                  }
                  v82 = *((_QWORD *)v9 + 3);
                  if (v53 == *(_QWORD *)(v82 + 24))
                  {
                    v399 = v22;
                    v86 = (uint64_t)v9;
                    v392 = *(_QWORD *)(v82 + 32);
LABEL_175:
                    v394 = v81;
                    v397 = a3;
                    v409[0] = v410;
                    v409[1] = (void *)0x1000000000;
                    v135 = (llvm::Constant *)*(a2 - 4);
                    v136 = *(_DWORD *)(*(_QWORD *)v135 + 32);
                    if (v136)
                    {
                      v139 = 0;
                      do
                      {
                        AggregateElement = llvm::Constant::getAggregateElement(v135, v139);
                        v141 = LODWORD(v409[1]);
                        if (LODWORD(v409[1]) >= (unint64_t)HIDWORD(v409[1]))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v409, (uint64_t)v410, LODWORD(v409[1]) + 1, 8);
                          v141 = LODWORD(v409[1]);
                        }
                        *((_QWORD *)v409[0] + v141) = AggregateElement;
                        v138 = ++LODWORD(v409[1]);
                        v139 = (llvm::Type *)((_DWORD)v139 + 1);
                      }
                      while (v136 != (_DWORD)v139);
                      if (!v80)
                      {
LABEL_317:
                        llvm::ArrayType::get((llvm::ArrayType *)v53, (llvm::Type *)(v392 + v138));
                        v235 = v234;
                        v236 = operator new(0x78uLL);
                        v237 = (llvm::UndefValue *)(v236 + 8);
                        v236[13] = v236[13] & 0x38000000 | 1;
                        *(_QWORD *)v236 = 0;
                        *((_QWORD *)v236 + 1) = 0;
                        *((_QWORD *)v236 + 2) = 0;
                        *((_QWORD *)v236 + 3) = v236 + 8;
                        v238 = *(_QWORD *)a1;
                        v239 = (_BYTE)a2[10] & 1;
                        v240 = *((_DWORD *)a2 + 8);
                        v408 = 257;
                        v241 = (llvm::GlobalObject *)llvm::GlobalVariable::GlobalVariable((uint64_t)(v236 + 8), v238, v235, v239, v240 & 0xF, 0, (uint64_t)&v404, v86, (v240 >> 10) & 7, ((unint64_t)*((unsigned int *)*a2 + 2) >> 8) | 0x100000000, 0);
                        llvm::GlobalObject::copyAttributesFrom(v241, (const llvm::GlobalObject *)a2);
                        *((_BYTE *)v236 + 112) = v236[28] & 0xFD | (_BYTE)a2[10] & 2;
                        *((_QWORD *)v236 + 13) = a2[9];
                        a3 = v397;
                        if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
                        {
                          v254 = 0;
                          v253 = (unsigned __int8 *)&byte_1C871356D;
                          v245 = v86;
                          v246 = v399;
LABEL_326:
                          sub_1C59133D4(v237, v253, v254);
                          v256 = (llvm::Constant *)sub_1C5910AC0(a1 + 48, (llvm::StructType *)*a2);
                          PointerBitCastOrAddrSpaceCast = v237;
                          if (*(llvm::Constant **)v237 != v256)
                            PointerBitCastOrAddrSpaceCast = sub_1C537D3B8((llvm *)0x31, (uint64_t)v237, v256, 0);
                          v257 = (uint64_t *)(a1 + 944);
                          if ((v246 & 1) != 0)
                          {
                            llvm::ValueMapper::scheduleMapAppendingVariable(v257, (unint64_t)v237, 0, v394, (_BYTE *)v409[0], LODWORD(v409[1]), 0);
                            goto LABEL_358;
                          }
                          if (v245 && *(_BYTE *)(v245 + 16) == 3)
                          {
                            if ((*(_DWORD *)(v245 + 20) & 0x7FFFFFF) == 0)
                            {
LABEL_333:
                              v258 = 0;
                              goto LABEL_338;
                            }
                          }
                          else if (!*(_BYTE *)(v245 + 16)
                                 && *(_QWORD *)(v245 + 72) == v245 + 72
                                 && (*(_BYTE *)(v245 + 34) & 0x80) == 0)
                          {
                            goto LABEL_333;
                          }
                          v258 = *(_QWORD *)(v245 - 32);
LABEL_338:
                          llvm::ValueMapper::scheduleMapAppendingVariable(v257, (unint64_t)v237, v258, v394, (_BYTE *)v409[0], LODWORD(v409[1]), 0);
                          if (*(_QWORD *)v237 != *(_QWORD *)v245)
                            v237 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v237, *(llvm::Constant **)v245, 0);
                          v259 = *(uint64_t **)(a1 + 904);
                          v260 = *(_QWORD *)(a1 + 912);
                          if ((unint64_t)v259 < v260)
                          {
                            *v259 = v245;
                            v259[1] = (uint64_t)v237;
                            v261 = v259 + 2;
LABEL_357:
                            *(_QWORD *)(a1 + 904) = v261;
LABEL_358:
                            if (v409[0] != v410)
                              free(v409[0]);
                            goto LABEL_26;
                          }
                          v262 = *(char **)(a1 + 896);
                          v263 = ((char *)v259 - v262) >> 4;
                          v264 = v263 + 1;
                          if (!((unint64_t)(v263 + 1) >> 60))
                          {
                            v265 = v260 - (_QWORD)v262;
                            if (v265 >> 3 > v264)
                              v264 = v265 >> 3;
                            if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFF0)
                              v266 = 0xFFFFFFFFFFFFFFFLL;
                            else
                              v266 = v264;
                            if (!v266)
                            {
                              v267 = 0;
                              goto LABEL_352;
                            }
                            if (!(v266 >> 60))
                            {
                              v267 = (char *)operator new(16 * v266);
LABEL_352:
                              v268 = (uint64_t *)&v267[16 * v263];
                              *v268 = v245;
                              v268[1] = (uint64_t)v237;
                              v261 = v268 + 2;
                              if (v259 != (uint64_t *)v262)
                              {
                                do
                                {
                                  *((_OWORD *)v268 - 1) = *((_OWORD *)v259 - 1);
                                  v268 -= 2;
                                  v259 -= 2;
                                }
                                while (v259 != (uint64_t *)v262);
                                v259 = *(uint64_t **)(a1 + 896);
                              }
                              *(_QWORD *)(a1 + 896) = v268;
                              *(_QWORD *)(a1 + 904) = v261;
                              *(_QWORD *)(a1 + 912) = &v267[16 * v266];
                              if (v259)
                                operator delete(v259);
                              goto LABEL_357;
                            }
LABEL_533:
                            sub_1C4764EE4();
                          }
LABEL_532:
                          abort();
                        }
                        v242 = ***a2;
                        v243 = *(_QWORD *)(v242 + 152);
                        v244 = *(unsigned int *)(v242 + 168);
                        v245 = v86;
                        v246 = v399;
                        if ((_DWORD)v244)
                        {
                          LODWORD(v247) = (v244 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                          v248 = (uint64_t ****)(v243 + 16 * v247);
                          v249 = *v248;
                          if (*v248 == a2)
                          {
LABEL_325:
                            v252 = v248[1];
                            v255 = (size_t)*v252;
                            v253 = (unsigned __int8 *)(v252 + 2);
                            v254 = v255;
                            goto LABEL_326;
                          }
                          v250 = 1;
                          while (v249 != (uint64_t ***)-4096)
                          {
                            v251 = v247 + v250++;
                            v247 = v251 & (v244 - 1);
                            v249 = *(uint64_t ****)(v243 + 16 * v247);
                            if (v249 == a2)
                            {
                              v248 = (uint64_t ****)(v243 + 16 * v247);
                              goto LABEL_325;
                            }
                          }
                        }
                        v248 = (uint64_t ****)(v243 + 16 * v244);
                        goto LABEL_325;
                      }
                      v142 = (llvm::Constant **)v409[0];
                      if (!(_DWORD)v138)
                        goto LABEL_184;
                      v137 = (llvm::Constant **)((char *)v409[0] + 8 * v138);
                      v216 = 8 * v138 - 8;
                      do
                      {
                        v217 = llvm::Constant::getAggregateElement(*v142, (llvm::Type *)2);
                        v218 = llvm::Value::stripPointerCasts(v217);
                        if (v218 && *((unsigned __int8 *)v218 + 16) <= 3u)
                        {
                          v220 = (uint64_t)v218;
                          v221 = sub_1C59132BC(a1, (uint64_t ***)v218);
                          if (!sub_1C5913014(a1, v221, v220))
                            break;
                        }
                        ++v142;
                        v216 -= 8;
                      }
                      while (v142 != v137);
                      if (v142 + 1 == v137)
                      {
LABEL_184:
                        v137 = v142;
                      }
                      else
                      {
                        v228 = 1;
                        v137 = v142;
                        do
                        {
                          v229 = llvm::Constant::getAggregateElement(v142[v228], (llvm::Type *)2);
                          v230 = llvm::Value::stripPointerCasts(v229);
                          if (v230)
                            v231 = *((unsigned __int8 *)v230 + 16) > 3u;
                          else
                            v231 = 1;
                          if (v231
                            || (v232 = (uint64_t)v230,
                                v233 = sub_1C59132BC(a1, (uint64_t ***)v230),
                                sub_1C5913014(a1, v233, v232)))
                          {
                            *v137++ = v142[v228];
                          }
                          ++v228;
                          v216 -= 8;
                        }
                        while (v216);
                      }
                    }
                    else
                    {
                      v137 = (llvm::Constant **)v410;
                      if (!v80)
                      {
                        LODWORD(v138) = 0;
                        goto LABEL_317;
                      }
                    }
                    v138 = (unint64_t)((char *)v137 - (char *)v409[0]) >> 3;
                    LODWORD(v409[1]) = v138;
                    goto LABEL_317;
                  }
                  v63 = "Appending variables with different element types!";
                  goto LABEL_130;
                }
LABEL_133:
                v399 = v22;
                v86 = (uint64_t)v9;
                v392 = 0;
                goto LABEL_175;
              }
LABEL_120:
              v81 = 0;
              if ((v22 & 1) == 0)
                goto LABEL_121;
              goto LABEL_133;
            }
          }
LABEL_119:
          llvm::PointerType::get((llvm::PointerType *)(v54 + 1912), 0);
          v80 = 0;
          goto LABEL_120;
        }
        v60 = 1;
        while (v59 != (uint64_t ***)-4096)
        {
          v61 = v57 + v60++;
          v57 = v61 & (v56 - 1);
          v59 = *(uint64_t ****)(v55 + 16 * v57);
          if (v59 == a2)
          {
            v58 = (uint64_t ****)(v55 + 16 * v57);
            goto LABEL_104;
          }
        }
      }
      v58 = (uint64_t ****)(v55 + 16 * v56);
      goto LABEL_104;
    }
LABEL_44:
    v398 = 1;
    goto LABEL_45;
  }
LABEL_36:
  v21 = (unsigned int *)(a2 + 4);
  v30 = *((_DWORD *)a2 + 8);
  if ((v30 & 0xF) == 6)
  {
    if (!v9)
    {
      v22 = 1;
      goto LABEL_78;
    }
LABEL_41:
    if (*((_BYTE *)v9 + 16) == 3)
    {
      if ((*((_DWORD *)v9 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_77;
    }
    else if (!*((_BYTE *)v9 + 16)
           && *((llvm::UndefValue **)v9 + 9) == (llvm::UndefValue *)((char *)v9 + 72)
           && (*((_BYTE *)v9 + 34) & 0x80) == 0)
    {
      goto LABEL_77;
    }
    if (*((_BYTE *)a2 + 16))
    {
      if (*((_BYTE *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_77;
    }
    else if ((v30 & 0x800000) == 0 && a2[9] == (uint64_t **)(a2 + 9))
    {
      goto LABEL_77;
    }
    if ((v30 & 0xF) == 6)
    {
      v62 = *((_DWORD *)v9 + 8);
      if ((v62 & 0xF) == 6)
      {
        if ((*((_BYTE *)v9 + 80) & 1) != ((_BYTE)a2[10] & 1))
        {
          v63 = "Appending variables linked with different const'ness!";
LABEL_130:
          v409[0] = (void *)v63;
          v83 = 259;
          goto LABEL_168;
        }
        v143 = ((BYTE2(v62) & 0x3F) - 1) | 0x100;
        if ((v62 & 0x3F0000) == 0)
          v143 = 0;
        v144 = v143 >> 8;
        v145 = HIWORD(v30) & 0x3F;
        if (v145 && v144)
        {
          if (((BYTE2(v30) & 0x3F) - 1) != v143)
          {
LABEL_190:
            v63 = "Appending variables with different alignment need to be linked!";
            goto LABEL_130;
          }
        }
        else if ((v145 != 0) == (v144 == 0))
        {
          goto LABEL_190;
        }
        if (((v62 ^ v30) & 0x30) != 0)
        {
          v63 = "Appending variables with different visibility need to be linked!";
          goto LABEL_130;
        }
        if (((v30 & 0xC0) == 128) != ((v62 & 0xC0) == 128))
        {
          v63 = "Appending variables with different unnamed_addr need to be linked!";
          goto LABEL_130;
        }
        if ((v62 & 0x400000) == 0)
        {
          if ((v30 & 0x400000) == 0)
          {
LABEL_77:
            v22 = 0;
            goto LABEL_78;
          }
          v319 = ***a2;
          v409[0] = a2;
          v320 = *(_DWORD *)(v319 + 2520);
          if (v320)
          {
            v321 = *(_QWORD *)(v319 + 2504);
            v322 = v320 - 1;
            v323 = v322 & ((a2 >> 4) ^ (a2 >> 9));
            v324 = (uint64_t ****)(v321 + 24 * v323);
            v325 = *v324;
            if (*v324 == a2)
              goto LABEL_439;
            v377 = 0;
            v378 = 1;
            while (v325 != (uint64_t ***)-4096)
            {
              if (v377)
                v379 = 0;
              else
                v379 = v325 == (uint64_t ***)-8192;
              if (v379)
                v377 = v324;
              v380 = v323 + v378++;
              v323 = v380 & v322;
              v324 = (uint64_t ****)(v321 + 24 * v323);
              v325 = *v324;
              if (*v324 == a2)
                goto LABEL_439;
            }
            if (v377)
              v387 = v377;
            else
              v387 = v324;
          }
          else
          {
            v387 = 0;
          }
          v324 = (uint64_t ****)sub_1C53D65B8(v319 + 2504, (uint64_t)v409, (uint64_t *)v409, v387);
          v388 = (uint64_t ***)v409[0];
          v324[1] = 0;
          v324[2] = 0;
          *v324 = v388;
LABEL_439:
          if (!v324[2])
            goto LABEL_77;
          goto LABEL_465;
        }
        v335 = ***(_QWORD ***)v9;
        v409[0] = v9;
        v336 = *(_DWORD *)(v335 + 2520);
        if (v336)
        {
          v337 = *(_QWORD *)(v335 + 2504);
          v338 = v336 - 1;
          v339 = v338 & ((v9 >> 4) ^ (v9 >> 9));
          v340 = (llvm::UndefValue **)(v337 + 24 * v339);
          v341 = *v340;
          if (*v340 == v9)
            goto LABEL_453;
          v373 = 0;
          v374 = 1;
          while (v341 != (llvm::UndefValue *)-4096)
          {
            if (v373)
              v375 = 0;
            else
              v375 = v341 == (llvm::UndefValue *)-8192;
            if (v375)
              v373 = v340;
            v376 = v339 + v374++;
            v339 = v376 & v338;
            v340 = (llvm::UndefValue **)(v337 + 24 * v339);
            v341 = *v340;
            if (*v340 == v9)
              goto LABEL_453;
          }
          if (v373)
            v385 = v373;
          else
            v385 = v340;
        }
        else
        {
          v385 = 0;
        }
        v340 = (llvm::UndefValue **)sub_1C53D65B8(v335 + 2504, (uint64_t)v409, (uint64_t *)v409, v385);
        v386 = (llvm::UndefValue *)v409[0];
        v340[1] = 0;
        v340[2] = 0;
        *v340 = v386;
        v30 = *v21;
LABEL_453:
        v342 = (size_t)v340[2];
        if ((v30 & 0x400000) == 0)
        {
          if (!v342)
            goto LABEL_77;
          goto LABEL_465;
        }
        v344 = v340[1];
        v345 = ***a2;
        v409[0] = a2;
        v346 = *(_DWORD *)(v345 + 2520);
        if (v346)
        {
          v347 = *(_QWORD *)(v345 + 2504);
          v348 = v346 - 1;
          v349 = v348 & ((a2 >> 4) ^ (a2 >> 9));
          v350 = (uint64_t ****)(v347 + 24 * v349);
          v351 = *v350;
          if (*v350 == a2)
          {
LABEL_462:
            if ((uint64_t ***)v342 == v350[2] && (!v342 || !memcmp(v344, v350[1], v342)))
              goto LABEL_77;
LABEL_465:
            v63 = "Appending variables with different section name need to be linked!";
            goto LABEL_130;
          }
          v381 = 0;
          v382 = 1;
          while (v351 != (uint64_t ***)-4096)
          {
            if (v381)
              v383 = 0;
            else
              v383 = v351 == (uint64_t ***)-8192;
            if (v383)
              v381 = v350;
            v384 = v349 + v382++;
            v349 = v384 & v348;
            v350 = (uint64_t ****)(v347 + 24 * v349);
            v351 = *v350;
            if (*v350 == a2)
              goto LABEL_462;
          }
          if (v381)
            v389 = v381;
          else
            v389 = v350;
        }
        else
        {
          v389 = 0;
        }
        v350 = (uint64_t ****)sub_1C53D65B8(v345 + 2504, (uint64_t)v409, (uint64_t *)v409, v389);
        v390 = (uint64_t ***)v409[0];
        v350[1] = 0;
        v350[2] = 0;
        *v350 = v390;
        goto LABEL_462;
      }
    }
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v128 = 0;
      v127 = &byte_1C871356D;
      goto LABEL_167;
    }
    v64 = ***a2;
    v65 = *(_QWORD *)(v64 + 152);
    v66 = *(unsigned int *)(v64 + 168);
    if ((_DWORD)v66)
    {
      LODWORD(v67) = (v66 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v68 = (uint64_t ****)(v65 + 16 * v67);
      v69 = *v68;
      if (*v68 == a2)
      {
LABEL_166:
        v126 = v68[1];
        v129 = *v126;
        v127 = (char *)(v126 + 2);
        v128 = v129;
LABEL_167:
        v408 = 1283;
        v404 = (uint64_t)"Linking globals named '";
        v406 = v127;
        v407 = v128;
        v409[0] = &v404;
        v410[0] = "': can only link appending global with another appending global!";
        v83 = 770;
LABEL_168:
        v411 = v83;
        if (!atomic_load(qword_1ED836B58))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
        v131 = qword_1ED836B58[0];
        v132 = operator new();
        *(_QWORD *)v132 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v409, (_QWORD *)(v132 + 8));
        *(_QWORD *)(v132 + 32) = 3;
        *(_QWORD *)(v132 + 40) = v131;
        *(_BYTE *)(v132 + 48) = 1;
        v133 = *(unsigned __int8 *)(a1 + 936);
        *(_QWORD *)(a1 + 928) = v132;
        if (!v133)
        {
          PointerBitCastOrAddrSpaceCast = 0;
          *(_BYTE *)(a1 + 936) = 1;
          return PointerBitCastOrAddrSpaceCast;
        }
        return 0;
      }
      v70 = 1;
      while (v69 != (uint64_t ***)-4096)
      {
        v71 = v67 + v70++;
        v67 = v71 & (v66 - 1);
        v69 = *(uint64_t ****)(v65 + 16 * v67);
        if (v69 == a2)
        {
          v68 = (uint64_t ****)(v65 + 16 * v67);
          goto LABEL_166;
        }
      }
    }
    v68 = (uint64_t ****)(v65 + 16 * v66);
    goto LABEL_166;
  }
  if (!v9)
    goto LABEL_44;
  if ((*((_DWORD *)v9 + 8) & 0xF) == 6)
    goto LABEL_41;
  v398 = 0;
  v52 = 0;
  v3 = (uint64_t)v9;
  if (v10)
  {
LABEL_45:
    if (!*(_BYTE *)(a1 + 921))
    {
      v31 = v10 | a3;
      if (*((_BYTE *)a2 + 16))
      {
        if (*((_BYTE *)a2 + 16) == 3)
        {
          v395 = v10 | a3;
          v32 = operator new(0x78uLL);
          v3 = (uint64_t)(v32 + 8);
          v32[13] = v32[13] & 0x38000000 | 1;
          *(_QWORD *)v32 = 0;
          *((_QWORD *)v32 + 1) = 0;
          *((_QWORD *)v32 + 2) = 0;
          *((_QWORD *)v32 + 3) = v32 + 8;
          v33 = *(_QWORD *)a1;
          v34 = (llvm::PointerType *)sub_1C5910AC0(a1 + 48, (llvm::StructType *)a2[3]);
          v35 = *((_BYTE *)a2 + 80);
          v36 = *a2;
          if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
          {
            v190 = 0;
            v189 = &byte_1C871356D;
            goto LABEL_251;
          }
          v37 = **v36;
          v38 = *(_QWORD *)(v37 + 152);
          v39 = *(unsigned int *)(v37 + 168);
          if ((_DWORD)v39)
          {
            LODWORD(v40) = (v39 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            v41 = (uint64_t ****)(v38 + 16 * v40);
            v42 = *v41;
            if (*v41 == a2)
            {
LABEL_250:
              v188 = v41[1];
              v191 = *v188;
              v189 = (char *)(v188 + 2);
              v190 = v191;
LABEL_251:
              v411 = 261;
              v409[0] = v189;
              v409[1] = v190;
              v192 = (llvm::GlobalObject *)llvm::GlobalVariable::GlobalVariable(v3, v33, v34, v35 & 1, 0, 0, (uint64_t)v409, 0, (*((_DWORD *)a2 + 8) >> 10) & 7, ((unint64_t)*((unsigned int *)v36 + 2) >> 8) | 0x100000000, 0);
              v193 = ((((*((_WORD *)a2 + 17) & 0x3F) << 16) + 16711680) & 0xFF0000) + 0x10000;
              if ((*((_WORD *)a2 + 17) & 0x3F) == 0)
                v193 = 0;
              v32[16] = v193 | v32[16] & 0xFFC0FFFF;
              llvm::GlobalObject::copyAttributesFrom(v192, (const llvm::GlobalObject *)a2);
              *((_BYTE *)v32 + 112) = v32[28] & 0xFD | (_BYTE)a2[10] & 2;
              *((_QWORD *)v32 + 13) = a2[9];
              goto LABEL_273;
            }
            v43 = 1;
            while (v42 != (uint64_t ***)-4096)
            {
              v44 = v40 + v43++;
              v40 = v44 & (v39 - 1);
              v42 = *(uint64_t ****)(v38 + 16 * v40);
              if (v42 == a2)
              {
                v41 = (uint64_t ****)(v38 + 16 * v40);
                goto LABEL_250;
              }
            }
          }
          v41 = (uint64_t ****)(v38 + 16 * v39);
          goto LABEL_250;
        }
        if (v31)
        {
          v104 = (llvm::PointerType *)sub_1C5910AC0(a1 + 48, (llvm::StructType *)a2[3]);
          v105 = *((unsigned __int8 *)a2 + 16);
          if (v105 != 1)
          {
            if (v105 != 2)
            {
LABEL_274:
              v209 = *v21;
              v211 = (unsigned int *)(v3 + 32);
              v210 = *(_DWORD *)(v3 + 32);
              v212 = (v209 & 0xF) - 7;
              v213 = v212 >= 2;
              if (v212 >= 2)
                v214 = *(_DWORD *)(v3 + 32);
              else
                v214 = v210 & 0xFFFFFFC0;
              v215 = v214 & 0xFFFFFFF0 | v209 & 0xF;
              *v211 = v215;
              if (!v213)
                goto LABEL_370;
              if ((v210 & 0x30) == 0)
                goto LABEL_371;
LABEL_368:
              if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v3) & 1) != 0)
                goto LABEL_371;
              v215 = *(_DWORD *)(v3 + 32);
LABEL_370:
              *v211 = v215 | 0x4000;
LABEL_371:
              v281 = *(unsigned __int8 *)(v3 + 16);
              if (v281 <= 3
                && v281 != 1
                && (*((_BYTE *)a2 + 16) == 3
                 || !*((_BYTE *)a2 + 16) && a2[9] == (uint64_t **)(a2 + 9) && (*((_BYTE *)a2 + 34) & 0x80) == 0))
              {
                llvm::GlobalObject::copyMetadata((llvm::GlobalObject *)v3, (const llvm::GlobalObject *)a2, 0);
                v281 = *(unsigned __int8 *)(v3 + 16);
              }
              if (!v281)
              {
                sub_1C53D1F60((_QWORD *)v3, 0);
                *(_WORD *)(v3 + 18) &= ~8u;
                sub_1C53D2064((_QWORD *)v3, 0);
                *(_WORD *)(v3 + 18) &= ~2u;
                sub_1C53D2170((_QWORD *)v3, 0);
                *(_WORD *)(v3 + 18) &= ~4u;
              }
              v52 = v13 | a3 ^ 1;
              goto LABEL_381;
            }
            v106 = (llvm::Type *)(*((_DWORD *)*a2 + 2) >> 8);
            if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
            {
              v365 = 0;
              v364 = &byte_1C871356D;
              goto LABEL_480;
            }
            v107 = ***a2;
            v108 = *(_QWORD *)(v107 + 152);
            v109 = *(unsigned int *)(v107 + 168);
            if ((_DWORD)v109)
            {
              LODWORD(v110) = (v109 - 1) & ((a2 >> 4) ^ (a2 >> 9));
              v111 = (uint64_t ****)(v108 + 16 * v110);
              v112 = *v111;
              if (*v111 == a2)
              {
LABEL_479:
                v363 = v111[1];
                v366 = *v363;
                v364 = (char *)(v363 + 2);
                v365 = v366;
LABEL_480:
                v411 = 261;
                v409[0] = v364;
                v409[1] = v365;
                v3 = llvm::GlobalIFunc::create(v104, v106, 0, (uint64_t)v409, 0, *(_QWORD *)a1);
                llvm::GlobalObject::copyAttributesFrom((llvm::GlobalObject *)v3, (const llvm::GlobalObject *)a2);
                goto LABEL_274;
              }
              v113 = 1;
              while (v112 != (uint64_t ***)-4096)
              {
                v114 = v110 + v113++;
                v110 = v114 & (v109 - 1);
                v112 = *(uint64_t ****)(v108 + 16 * v110);
                if (v112 == a2)
                {
                  v111 = (uint64_t ****)(v108 + 16 * v110);
                  goto LABEL_479;
                }
              }
            }
            v111 = (uint64_t ****)(v108 + 16 * v109);
            goto LABEL_479;
          }
          v326 = (llvm::Type *)(*((_DWORD *)*a2 + 2) >> 8);
          if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
          {
            v361 = 0;
            v360 = &byte_1C871356D;
            goto LABEL_477;
          }
          v327 = ***a2;
          v328 = *(_QWORD *)(v327 + 152);
          v329 = *(unsigned int *)(v327 + 168);
          if ((_DWORD)v329)
          {
            LODWORD(v330) = (v329 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            v331 = (uint64_t ****)(v328 + 16 * v330);
            v332 = *v331;
            if (*v331 == a2)
            {
LABEL_476:
              v359 = v331[1];
              v362 = *v359;
              v360 = (char *)(v359 + 2);
              v361 = v362;
LABEL_477:
              v411 = 261;
              v409[0] = v360;
              v409[1] = v361;
              v3 = llvm::GlobalAlias::create(v104, v326, 0, (uint64_t)v409, *(_QWORD *)a1);
              llvm::GlobalValue::copyAttributesFrom((llvm::GlobalValue *)v3, (const llvm::GlobalValue *)a2);
              goto LABEL_274;
            }
            v333 = 1;
            while (v332 != (uint64_t ***)-4096)
            {
              v334 = v330 + v333++;
              v330 = v334 & (v329 - 1);
              v332 = *(uint64_t ****)(v328 + 16 * v330);
              if (v332 == a2)
              {
                v331 = (uint64_t ****)(v328 + 16 * v330);
                goto LABEL_476;
              }
            }
          }
          v331 = (uint64_t ****)(v328 + 16 * v329);
          goto LABEL_476;
        }
        v115 = (llvm::StructType *)a2[3];
        if (*((_BYTE *)v115 + 8) == 14)
        {
          v116 = (llvm::PointerType *)sub_1C5910AC0(a1 + 48, v115);
          v117 = (llvm::Type *)(*((_DWORD *)*a2 + 2) >> 8);
          if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
          {
            v269 = v9;
            v272 = 0;
            v271 = &byte_1C871356D;
            goto LABEL_362;
          }
          v118 = ***a2;
          v119 = *(_QWORD *)(v118 + 152);
          v120 = *(unsigned int *)(v118 + 168);
          if ((_DWORD)v120)
          {
            LODWORD(v121) = (v120 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            v122 = (uint64_t ****)(v119 + 16 * v121);
            v123 = *v122;
            if (*v122 == a2)
            {
LABEL_361:
              v269 = v9;
              v270 = v122[1];
              v273 = *v270;
              v271 = (char *)(v270 + 2);
              v272 = v273;
LABEL_362:
              v411 = 261;
              v409[0] = v271;
              v409[1] = v272;
              v274 = *(_QWORD *)a1;
              v275 = operator new(0x80uLL);
              v3 = (uint64_t)v275 + 8;
              *((_DWORD *)v275 + 7) = *((_DWORD *)v275 + 7) & 0x38000000 | 0x40000000;
              *(_QWORD *)v275 = 0;
              llvm::Function::Function((uint64_t *)v275 + 1, v116, 0, v117, (uint64_t)v409, v274);
              v9 = v269;
              goto LABEL_366;
            }
            v124 = 1;
            while (v123 != (uint64_t ***)-4096)
            {
              v125 = v121 + v124++;
              v121 = v125 & (v120 - 1);
              v123 = *(uint64_t ****)(v119 + 16 * v121);
              if (v123 == a2)
              {
                v122 = (uint64_t ****)(v119 + 16 * v121);
                goto LABEL_361;
              }
            }
          }
          v122 = (uint64_t ****)(v119 + 16 * v120);
          goto LABEL_361;
        }
        v146 = operator new(0x78uLL);
        v3 = (uint64_t)(v146 + 8);
        v146[13] = v146[13] & 0x38000000 | 1;
        *(_QWORD *)v146 = 0;
        *((_QWORD *)v146 + 1) = 0;
        *((_QWORD *)v146 + 2) = 0;
        *((_QWORD *)v146 + 3) = v146 + 8;
        v147 = *(_QWORD *)a1;
        v148 = (llvm::PointerType *)sub_1C5910AC0(a1 + 48, (llvm::StructType *)a2[3]);
        v149 = *a2;
        if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
        {
          v278 = 0;
          v277 = &byte_1C871356D;
          goto LABEL_365;
        }
        v150 = **v149;
        v151 = *(_QWORD *)(v150 + 152);
        v152 = *(unsigned int *)(v150 + 168);
        if ((_DWORD)v152)
        {
          LODWORD(v153) = (v152 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          v154 = (uint64_t ****)(v151 + 16 * v153);
          v155 = *v154;
          if (*v154 == a2)
          {
LABEL_364:
            v276 = v154[1];
            v279 = *v276;
            v277 = (char *)(v276 + 2);
            v278 = v279;
LABEL_365:
            v411 = 261;
            v409[0] = v277;
            v409[1] = v278;
            llvm::GlobalVariable::GlobalVariable(v3, v147, v148, 0, 0, 0, (uint64_t)v409, 0, (*v21 >> 10) & 7, ((unint64_t)*((unsigned int *)v149 + 2) >> 8) | 0x100000000, 0);
            goto LABEL_366;
          }
          v156 = 1;
          while (v155 != (uint64_t ***)-4096)
          {
            v157 = v153 + v156++;
            v153 = v157 & (v152 - 1);
            v155 = *(uint64_t ****)(v151 + 16 * v153);
            if (v155 == a2)
            {
              v154 = (uint64_t ****)(v151 + 16 * v153);
              goto LABEL_364;
            }
          }
        }
        v154 = (uint64_t ****)(v151 + 16 * v152);
        goto LABEL_364;
      }
      v393 = v9;
      v396 = a3;
      v94 = (llvm::PointerType *)sub_1C5910AC0(a1 + 48, (llvm::StructType *)a2[3]);
      v95 = (llvm::Type *)(*((_DWORD *)*a2 + 2) >> 8);
      v395 = v31;
      if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
      {
        v196 = 0;
        v195 = &byte_1C871356D;
        goto LABEL_256;
      }
      v96 = ***a2;
      v97 = *(_QWORD *)(v96 + 152);
      v98 = *(unsigned int *)(v96 + 168);
      if ((_DWORD)v98)
      {
        LODWORD(v99) = (v98 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v100 = (uint64_t ****)(v97 + 16 * v99);
        v101 = *v100;
        if (*v100 == a2)
        {
LABEL_255:
          v194 = v100[1];
          v197 = *v194;
          v195 = (char *)(v194 + 2);
          v196 = v197;
LABEL_256:
          v411 = 261;
          v409[0] = v195;
          v409[1] = v196;
          v198 = *(_QWORD *)a1;
          v199 = operator new(0x80uLL);
          v3 = (uint64_t)v199 + 8;
          *((_DWORD *)v199 + 7) = *((_DWORD *)v199 + 7) & 0x38000000 | 0x40000000;
          *(_QWORD *)v199 = 0;
          v200 = llvm::Function::Function((uint64_t *)v199 + 1, v94, 0, v95, (uint64_t)v409, v198);
          llvm::Function::copyAttributesFrom((llvm::Function *)v200, (const llvm::Function *)a2);
          v201 = 0;
          v391 = (uint64_t *)**((_QWORD **)v199 + 1);
          v202 = (unsigned int *)*((_QWORD *)v199 + 15);
          v409[0] = v202;
          if (v202)
            goto LABEL_258;
LABEL_257:
          for (i = 0; v201 < i; i = v202[2])
          {
            v204 = v201 + 1;
            v205 = 68;
            while (1)
            {
              if (v202)
              {
                if (v204 < v202[2])
                {
                  v206 = *(_QWORD *)&v202[2 * v204 + 10];
                  if (v206)
                  {
                    if (((*(unsigned __int8 *)(v206 + ((unint64_t)v205 >> 3) + 12) >> (v205 & 7)) & 1) != 0)
                    {
                      AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)v409, v201, v205);
                      if (AttributeAtIndex)
                      {
                        v11 = *(llvm::StructType **)(AttributeAtIndex + 16);
                        if (v11)
                          break;
                      }
                    }
                  }
                }
              }
              if (++v205 == 74)
                goto LABEL_270;
            }
            v208 = sub_1C5910AC0(a1 + 48, v11);
            v202 = (unsigned int *)sub_1C591351C((uint64_t *)v409, v391, v201, v205, v208);
            v409[0] = v202;
LABEL_270:
            ++v201;
            if (!v202)
              goto LABEL_257;
LABEL_258:
            ;
          }
          v9 = v393;
          *((_QWORD *)v199 + 15) = v202;
          a3 = v396;
LABEL_273:
          if (v395)
            goto LABEL_274;
LABEL_366:
          if (!llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2))
            goto LABEL_371;
          v211 = (unsigned int *)(v3 + 32);
          v280 = *(_DWORD *)(v3 + 32);
          *(_DWORD *)(v3 + 32) = v280 & 0xFFFFFFF0 | 9;
          if ((v280 & 0x30) == 0)
            goto LABEL_371;
          goto LABEL_368;
        }
        v102 = 1;
        while (v101 != (uint64_t ***)-4096)
        {
          v103 = v99 + v102++;
          v99 = v103 & (v98 - 1);
          v101 = *(uint64_t ****)(v97 + 16 * v99);
          if (v101 == a2)
          {
            v100 = (uint64_t ****)(v97 + 16 * v99);
            goto LABEL_255;
          }
        }
      }
      v100 = (uint64_t ****)(v97 + 16 * v98);
      goto LABEL_255;
    }
    return 0;
  }
LABEL_381:
  if (!*(_BYTE *)(v3 + 16))
  {
    v291 = llvm::Intrinsic::remangleIntrinsicFunction((llvm::Intrinsic *)v3, v11);
    if (v292)
    {
      v293 = v291;
      llvm::GlobalValue::eraseFromParent((llvm::GlobalValue *)v3);
      v3 = v293;
      goto LABEL_392;
    }
  }
  if (!v52)
  {
LABEL_392:
    v285 = v398;
    goto LABEL_396;
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v296 = 0;
    v295 = (unsigned __int8 *)&byte_1C871356D;
    v285 = v398;
    goto LABEL_395;
  }
  v282 = ***a2;
  v283 = *(_QWORD *)(v282 + 152);
  v284 = *(unsigned int *)(v282 + 168);
  v285 = v398;
  if (!(_DWORD)v284)
    goto LABEL_393;
  LODWORD(v286) = (v284 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v287 = (uint64_t ****)(v283 + 16 * v286);
  v288 = *v287;
  if (*v287 != a2)
  {
    v289 = 1;
    while (v288 != (uint64_t ***)-4096)
    {
      v290 = v286 + v289++;
      v286 = v290 & (v284 - 1);
      v288 = *(uint64_t ****)(v283 + 16 * v286);
      if (v288 == a2)
      {
        v287 = (uint64_t ****)(v283 + 16 * v286);
        goto LABEL_394;
      }
    }
LABEL_393:
    v287 = (uint64_t ****)(v283 + 16 * v284);
  }
LABEL_394:
  v294 = v287[1];
  v297 = (size_t)*v294;
  v295 = (unsigned __int8 *)(v294 + 2);
  v296 = v297;
LABEL_395:
  sub_1C59133D4((llvm::Value *)v3, v295, v296);
LABEL_396:
  if ((v13 | a3) == 1)
  {
    v298 = *((unsigned __int8 *)a2 + 16);
    if (v298 != 2)
    {
      AliaseeObject = (uint64_t)a2;
      if (v298 != 1 || (AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)a2)) != 0)
      {
        v300 = *(_QWORD *)(AliaseeObject + 48);
        if (v300)
        {
          v301 = *(unsigned __int8 *)(v3 + 16);
          if (v301 <= 3 && v301 != 1)
          {
            inserted = llvm::Module::getOrInsertComdat(*(_QWORD *)a1, (unsigned __int8 *)(*(_QWORD *)v300 + 72), **(_QWORD **)v300);
            *((_DWORD *)inserted + 2) = *(_DWORD *)(v300 + 8);
            llvm::GlobalObject::setComdat((llvm::GlobalObject *)v3, (llvm::Comdat *)inserted);
          }
        }
      }
    }
  }
  if (((v13 | a3 ^ 1) & 1) == 0)
    *(_DWORD *)(v3 + 32) = *(_DWORD *)(v3 + 32) & 0xFFFFBFC0 | 0x4007;
  if ((uint64_t ***)v3 == a2)
    v303 = 1;
  else
    v303 = v285;
  PointerBitCastOrAddrSpaceCast = (llvm::UndefValue *)v3;
  if ((v303 & 1) == 0)
  {
    v304 = (llvm::Constant *)sub_1C5910AC0(a1 + 48, (llvm::StructType *)*a2);
    PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast((llvm::UndefValue *)v3, v304, v305);
  }
  if ((llvm::UndefValue *)v3 == v9)
    v306 = 1;
  else
    v306 = v285;
  if ((v306 & 1) == 0)
  {
    v307 = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast((llvm::UndefValue *)v3, *(llvm::Constant **)v9, v12);
    v308 = v307;
    v309 = *(llvm::UndefValue ***)(a1 + 904);
    v310 = *(_QWORD *)(a1 + 912);
    if ((unint64_t)v309 >= v310)
    {
      v312 = *(char **)(a1 + 896);
      v313 = ((char *)v309 - v312) >> 4;
      v314 = v313 + 1;
      if ((unint64_t)(v313 + 1) >> 60)
        goto LABEL_532;
      v315 = v310 - (_QWORD)v312;
      if (v315 >> 3 > v314)
        v314 = v315 >> 3;
      if ((unint64_t)v315 >= 0x7FFFFFFFFFFFFFF0)
        v316 = 0xFFFFFFFFFFFFFFFLL;
      else
        v316 = v314;
      if (v316)
      {
        if (v316 >> 60)
          goto LABEL_533;
        v317 = (char *)operator new(16 * v316);
      }
      else
      {
        v317 = 0;
      }
      v318 = (llvm::UndefValue **)&v317[16 * v313];
      *v318 = v9;
      v318[1] = v308;
      v311 = v318 + 2;
      if (v309 != (llvm::UndefValue **)v312)
      {
        do
        {
          *((_OWORD *)v318 - 1) = *((_OWORD *)v309 - 1);
          v318 -= 2;
          v309 -= 2;
        }
        while (v309 != (llvm::UndefValue **)v312);
        v309 = *(llvm::UndefValue ***)(a1 + 896);
      }
      *(_QWORD *)(a1 + 896) = v318;
      *(_QWORD *)(a1 + 904) = v311;
      *(_QWORD *)(a1 + 912) = &v317[16 * v316];
      if (v309)
        operator delete(v309);
    }
    else
    {
      *v309 = v9;
      v309[1] = v307;
      v311 = v309 + 2;
    }
    *(_QWORD *)(a1 + 904) = v311;
  }
LABEL_26:
  if (PointerBitCastOrAddrSpaceCast)
  {
    v29 = *((unsigned __int8 *)PointerBitCastOrAddrSpaceCast + 16) >= 4u ? 0 : (uint64_t)PointerBitCastOrAddrSpaceCast;
    if (v29)
    {
      if (*(_BYTE *)(v29 + 16) != 3)
      {
        if (*(_BYTE *)(v29 + 16))
        {
          if (*(_QWORD *)(v29 - 32))
            return PointerBitCastOrAddrSpaceCast;
        }
        else if (*(_QWORD *)(v29 + 72) != v29 + 72 || (*(_BYTE *)(v29 + 34) & 0x80) != 0)
        {
          return PointerBitCastOrAddrSpaceCast;
        }
LABEL_56:
        if (a3)
        {
          v45 = *(_QWORD *)(a1 + 720);
          v46 = *(unsigned int *)(a1 + 736);
          if ((_DWORD)v46)
          {
            v47 = ((_DWORD)v46 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            v48 = (_QWORD *)(v45 + (v47 << 6));
            v49 = (uint64_t ***)v48[3];
            if (v49 == a2)
              goto LABEL_199;
            v50 = 1;
            while (v49 != (uint64_t ***)-4096)
            {
              v51 = v47 + v50++;
              v47 = v51 & (v46 - 1);
              v48 = (_QWORD *)(v45 + (v47 << 6));
              v49 = (uint64_t ***)v48[3];
              if (v49 == a2)
                goto LABEL_199;
            }
          }
          v48 = (_QWORD *)(v45 + (v46 << 6));
LABEL_199:
          v158 = (_QWORD *)(v45 + (v46 << 6));
          v404 = 6;
          v159 = &v405;
          if (v48 != v158)
          {
            v160 = (char *)v48[7];
            v405 = 0;
            v406 = v160;
            if (v160 != (char *)-8192 && v160 != (char *)-4096 && v160 != 0)
            {
              v162 = v48[5] & 0xFFFFFFFFFFFFFFF8;
              v405 = *(unint64_t **)v162;
              *(_QWORD *)v162 = &v404;
              v404 = v162 | 6;
              if (v405)
                *v405 = *v405 & 7 | (unint64_t)&v405;
              v160 = v406;
            }
            goto LABEL_219;
          }
          goto LABEL_218;
        }
        v87 = *(_QWORD *)(a1 + 784);
        v88 = *(unsigned int *)(a1 + 800);
        if ((_DWORD)v88)
        {
          v89 = ((_DWORD)v88 - 1) & ((a2 >> 4) ^ (a2 >> 9));
          v90 = (_QWORD *)(v87 + (v89 << 6));
          v91 = (uint64_t ***)v90[3];
          if (v91 == a2)
            goto LABEL_209;
          v92 = 1;
          while (v91 != (uint64_t ***)-4096)
          {
            v93 = v89 + v92++;
            v89 = v93 & (v88 - 1);
            v90 = (_QWORD *)(v87 + (v89 << 6));
            v91 = (uint64_t ***)v90[3];
            if (v91 == a2)
              goto LABEL_209;
          }
        }
        v90 = (_QWORD *)(v87 + (v88 << 6));
LABEL_209:
        v163 = (_QWORD *)(v87 + (v88 << 6));
        v401 = 6;
        v159 = &v402;
        if (v90 != v163)
        {
          v160 = (char *)v90[7];
          v402 = 0;
          v403 = (int32x2_t ****)v160;
          if (v160 != (char *)-8192 && v160 != (char *)-4096 && v160 != 0)
          {
            v165 = v90[5] & 0xFFFFFFFFFFFFFFF8;
            v402 = *(unint64_t **)v165;
            *(_QWORD *)v165 = &v401;
            v401 = v165 | 6;
            if (v402)
              *v402 = *v402 & 7 | (unint64_t)&v402;
            v160 = (char *)v403;
          }
LABEL_219:
          if ((a3 & 1) != 0)
          {
            if (v406 != (char *)-8192 && v406 != (char *)-4096 && v406)
            {
              v166 = v404 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v404 & 0xFFFFFFFFFFFFFFF8) = v405;
              if (v405)
              {
                *v405 = *v405 & 7 | v166;
              }
              else
              {
                v167 = v406;
                v168 = ***(int32x2_t ****)v406;
                v169 = (unint64_t)v168[303];
                if (v169 <= v166)
                {
                  v170 = v168[305].u32[0];
                  if (v169 + 16 * v170 > v166)
                  {
                    v171 = v170 - 1;
                    LODWORD(v172) = v171 & ((v406 >> 4) ^ (v406 >> 9));
                    v173 = (char **)(v169 + 16 * v172);
                    v174 = *v173;
                    if (v406 == *v173)
                    {
LABEL_231:
                      *v173 = (char *)-8192;
                      v168[304] = vadd_s32(v168[304], (int32x2_t)0x1FFFFFFFFLL);
                      v167 = v406;
                    }
                    else
                    {
                      v175 = 1;
                      while (v174 != (char *)-4096)
                      {
                        v176 = v172 + v175++;
                        v172 = v176 & v171;
                        v174 = *(char **)(v169 + 16 * v172);
                        if (v406 == v174)
                        {
                          v173 = (char **)(v169 + 16 * v172);
                          goto LABEL_231;
                        }
                      }
                    }
                    v167[17] &= ~1u;
                  }
                }
              }
            }
            if (v160 == (char *)v29)
              return (llvm::UndefValue *)v29;
          }
          else
          {
            if (v403 != (int32x2_t ****)-8192 && v403 != (int32x2_t ****)-4096 && v403)
            {
              v177 = v401 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v401 & 0xFFFFFFFFFFFFFFF8) = v402;
              if (v402)
              {
                *v402 = *v402 & 7 | v177;
              }
              else
              {
                v178 = v403;
                v179 = ***v403;
                v180 = (unint64_t)v179[303];
                if (v180 <= v177)
                {
                  v181 = v179[305].u32[0];
                  if (v180 + 16 * v181 > v177)
                  {
                    v182 = v181 - 1;
                    LODWORD(v183) = v182 & ((v403 >> 4) ^ (v403 >> 9));
                    v184 = (int32x2_t *****)(v180 + 16 * v183);
                    v185 = *v184;
                    if (v403 == *v184)
                    {
LABEL_244:
                      *v184 = (int32x2_t ****)-8192;
                      v179[304] = vadd_s32(v179[304], (int32x2_t)0x1FFFFFFFFLL);
                      v178 = v403;
                    }
                    else
                    {
                      v186 = 1;
                      while (v185 != (int32x2_t ****)-4096)
                      {
                        v187 = v183 + v186++;
                        v183 = v187 & v182;
                        v185 = *(int32x2_t *****)(v180 + 16 * v183);
                        if (v403 == v185)
                        {
                          v184 = (int32x2_t *****)(v180 + 16 * v183);
                          goto LABEL_244;
                        }
                      }
                    }
                    *((_BYTE *)v178 + 17) &= ~1u;
                  }
                }
              }
            }
            if (v160 == (char *)v29 || !sub_1C5913014(a1, v29, (uint64_t)a2))
              return (llvm::UndefValue *)v29;
          }
          if (*((_BYTE *)a2 + 16) == 3)
          {
            v226 = (uint64_t)*(a2 - 4);
            v227 = *(_QWORD *)(a1 + 944);
            LODWORD(v409[0]) = 0;
            v409[1] = (void *)v29;
            v410[0] = v226;
            v225 = v227 + 72;
          }
          else
          {
            if (!*((_BYTE *)a2 + 16))
            {
              llvm::Module::materialize((llvm::Module *)a2[5], (llvm::GlobalValue *)a2, &v400);
              if (v400)
              {
                v222 = *(unsigned __int8 *)(a1 + 936);
                *(_QWORD *)(a1 + 928) = v400;
                if (!v222)
                  *(_BYTE *)(a1 + 936) = 1;
                return (llvm::UndefValue *)v29;
              }
              v343 = *((_WORD *)a2 + 9);
              if ((v343 & 2) != 0)
              {
                v352 = *((_DWORD *)a2 + 5);
                if ((v352 & 0x40000000) != 0)
                  v353 = (uint64_t ***)*(a2 - 1);
                else
                  v353 = &a2[-4 * (v352 & 0x7FFFFFF)];
                v354 = (uint64_t)v353[4];
                sub_1C53D2064((_QWORD *)v29, v354);
                v355 = *(_WORD *)(v29 + 18);
                if (v354)
                  v356 = v355 | 2;
                else
                  v356 = v355 & 0xFFFD;
                *(_WORD *)(v29 + 18) = v356;
                v343 = *((_WORD *)a2 + 9);
                if ((v343 & 4) == 0)
                {
LABEL_458:
                  if ((v343 & 8) == 0)
                  {
LABEL_487:
                    llvm::GlobalObject::copyMetadata((llvm::GlobalObject *)v29, (const llvm::GlobalObject *)a2, 0);
                    llvm::Function::stealArgumentListFrom((llvm::Function *)v29, (llvm::Function *)a2);
                    sub_1C566A128(v29 + 72, (uint64_t *)(v29 + 72), (uint64_t *)a2 + 9);
                    v372 = *(_QWORD *)(a1 + 944);
                    LODWORD(v409[0]) = 3;
                    v409[1] = (void *)v29;
                    v225 = v372 + 72;
                    goto LABEL_302;
                  }
LABEL_483:
                  v369 = *((_DWORD *)a2 + 5);
                  if ((v369 & 0x40000000) != 0)
                    v370 = (uint64_t *)*(a2 - 1);
                  else
                    v370 = (uint64_t *)&a2[-4 * (v369 & 0x7FFFFFF)];
                  v371 = *v370 != 0;
                  sub_1C53D1F60((_QWORD *)v29, *v370);
                  *(_WORD *)(v29 + 18) = *(_WORD *)(v29 + 18) & 0xFFF7 | (8 * v371);
                  goto LABEL_487;
                }
              }
              else if ((v343 & 4) == 0)
              {
                goto LABEL_458;
              }
              v357 = *((_DWORD *)a2 + 5);
              if ((v357 & 0x40000000) != 0)
                v358 = (uint64_t ***)*(a2 - 1);
              else
                v358 = &a2[-4 * (v357 & 0x7FFFFFF)];
              v367 = (uint64_t)v358[8];
              v368 = v367 != 0;
              sub_1C53D2170((_QWORD *)v29, v367);
              *(_WORD *)(v29 + 18) = *(_WORD *)(v29 + 18) & 0xFFFB | (4 * v368);
              if ((*((_WORD *)a2 + 9) & 8) == 0)
                goto LABEL_487;
              goto LABEL_483;
            }
            v223 = (uint64_t)*(a2 - 4);
            v224 = *(_QWORD *)(a1 + 944);
            LODWORD(v409[0]) = (4 * (*(_DWORD *)(a1 + 952) & 0x1FFFFFFF)) | 2;
            v409[1] = (void *)v29;
            v410[0] = v223;
            v225 = v224 + 72;
          }
LABEL_302:
          sub_1C4AB8FDC(v225, (__n128 *)v409);
          return (llvm::UndefValue *)v29;
        }
LABEL_218:
        v160 = 0;
        *v159 = 0;
        v159[1] = 0;
        goto LABEL_219;
      }
      if ((*(_DWORD *)(v29 + 20) & 0x7FFFFFF) == 0 && (*(_DWORD *)(v29 + 32) & 0xF) != 6)
        goto LABEL_56;
    }
  }
  return PointerBitCastOrAddrSpaceCast;
}

BOOL sub_1C5913014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BOOL8 result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  void (**v22)(void);
  _QWORD *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v29 = 0;
  v30 = a3;
  if ((sub_1C56CA514((uint64_t *)(a1 + 848), &v30, &v29) & 1) != 0)
    return 1;
  v6 = *(_DWORD *)(a3 + 32);
  if ((v6 & 0xFu) - 7 < 2)
    return 1;
  if ((v6 & 0x400000) != 0 && *(_BYTE *)(a3 + 16) == 3)
  {
    v8 = ***(_QWORD ***)a3;
    v30 = a3;
    v9 = *(_DWORD *)(v8 + 2520);
    if (v9)
    {
      v10 = *(_QWORD *)(v8 + 2504);
      v11 = v9 - 1;
      v12 = v11 & ((a3 >> 4) ^ (a3 >> 9));
      v13 = (_QWORD *)(v10 + 24 * v12);
      v14 = *v13;
      if (*v13 == a3)
      {
LABEL_9:
        if (v13[2] == 12)
        {
          v15 = (uint64_t *)v13[1];
          v16 = *v15;
          v17 = *((_DWORD *)v15 + 2);
          if (v16 == 0x7274702E6D766C6CLL && v17 == 1752462689)
            return 1;
        }
        goto LABEL_14;
      }
      v23 = 0;
      v24 = 1;
      while (v14 != -4096)
      {
        if (v23)
          v25 = 0;
        else
          v25 = v14 == -8192;
        if (v25)
          v23 = v13;
        v26 = v12 + v24++;
        v12 = v26 & v11;
        v13 = (_QWORD *)(v10 + 24 * v12);
        v14 = *v13;
        if (*v13 == a3)
          goto LABEL_9;
      }
      if (v23)
        v27 = v23;
      else
        v27 = v13;
    }
    else
    {
      v27 = 0;
    }
    v13 = sub_1C53D65B8(v8 + 2504, (uint64_t)&v30, &v30, v27);
    v28 = v30;
    v13[1] = 0;
    v13[2] = 0;
    *v13 = v28;
    goto LABEL_9;
  }
LABEL_14:
  if (!a2)
    goto LABEL_16;
  v19 = *(_DWORD *)(a2 + 32);
  if ((v19 & 0xF) == 1)
    goto LABEL_16;
  if (*(_BYTE *)(a2 + 16))
  {
    if (*(_BYTE *)(a2 + 16) != 3 || (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 0)
      return 0;
LABEL_16:
    if (*(_BYTE *)(a3 + 16))
    {
      if (*(_BYTE *)(a3 + 16) == 3 && (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) == 0)
        return 0;
    }
    else if (*(_QWORD *)(a3 + 72) == a3 + 72 && (*(_BYTE *)(a3 + 34) & 0x80) == 0)
    {
      return 0;
    }
    if (*(_BYTE *)(a1 + 921))
      return 0;
    LOBYTE(v30) = 0;
    v20 = *(_QWORD *)(a1 + 40);
    if (v20 >= 8)
    {
      v21 = (_QWORD *)(a1 + 16);
      v31[0] = &off_1E817F258;
      v31[1] = a1;
      v31[2] = &v30;
      v32 = v31;
      if ((v20 & 2) == 0)
        v21 = (_QWORD *)*v21;
      (*(void (**)(_QWORD *, uint64_t, _QWORD *))(v20 & 0xFFFFFFFFFFFFFFF8))(v21, a3, v31);
      if (v32 == v31)
      {
        v22 = (void (**)(void))(v31[0] + 32);
        goto LABEL_47;
      }
      if (v32)
      {
        v22 = (void (**)(void))(*v32 + 40);
LABEL_47:
        (*v22)();
      }
    }
    return (_BYTE)v30 != 0;
  }
  result = 0;
  if ((v19 & 0x800000) == 0 && *(_QWORD *)(a2 + 72) == a2 + 72)
    goto LABEL_16;
  return result;
}

uint64_t sub_1C59132BC(uint64_t a1, uint64_t ***a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ****v8;
  uint64_t ***v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;

  if ((*((_BYTE *)a2 + 23) & 0x10) == 0 || ((_DWORD)a2[4] & 0xFu) - 7 < 2)
    return 0;
  v4 = ***a2;
  v5 = *(_QWORD *)(v4 + 152);
  v6 = *(unsigned int *)(v4 + 168);
  if (!(_DWORD)v6)
    goto LABEL_9;
  LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = (uint64_t ****)(v5 + 16 * v7);
  v9 = *v8;
  if (*v8 != a2)
  {
    v10 = 1;
    while (v9 != (uint64_t ***)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(uint64_t ****)(v5 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t ****)(v5 + 16 * v7);
        goto LABEL_10;
      }
    }
LABEL_9:
    v8 = (uint64_t ****)(v5 + 16 * v6);
  }
LABEL_10:
  v12 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)a1 + 112), (unsigned __int8 *)v8[1] + 16, (unint64_t)*v8[1]);
  v13 = v12;
  if (v12)
  {
    v14 = *(_DWORD *)(v12 + 32);
    if ((v14 & 0xFu) - 7 < 2)
      return 0;
    if ((v14 & 0x2000) != 0 && !*(_BYTE *)(v12 + 16) && !*((_BYTE *)a2 + 16))
    {
      v16 = *(_QWORD *)(v12 + 24);
      if (v16 != sub_1C5910AC0(a1 + 48, (llvm::StructType *)a2[3]))
        return 0;
    }
  }
  return v13;
}

void sub_1C59133D4(llvm::Value *a1, unsigned __int8 *__s2, size_t __n)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value **v10;
  llvm::Value *v11;
  int v12;
  int v13;
  llvm::Value *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  uint64_t ***v19;
  uint64_t ***v20;
  unsigned __int8 *v21;
  size_t v22;
  __int16 v23;

  if ((*((_DWORD *)a1 + 8) & 0xFu) - 7 < 2)
    return;
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
  {
    v16 = 0;
    v15 = &byte_1C871356D;
    goto LABEL_11;
  }
  v6 = ***(_QWORD ***)a1;
  v7 = *(_QWORD *)(v6 + 152);
  v8 = *(unsigned int *)(v6 + 168);
  if (!(_DWORD)v8)
    goto LABEL_9;
  LODWORD(v9) = (v8 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v10 = (llvm::Value **)(v7 + 16 * v9);
  v11 = *v10;
  if (*v10 != a1)
  {
    v12 = 1;
    while (v11 != (llvm::Value *)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = *(llvm::Value **)(v7 + 16 * v9);
      if (v11 == a1)
      {
        v10 = (llvm::Value **)(v7 + 16 * v9);
        goto LABEL_10;
      }
    }
LABEL_9:
    v10 = (llvm::Value **)(v7 + 16 * v8);
  }
LABEL_10:
  v14 = v10[1];
  v17 = *(_QWORD *)v14;
  v15 = (char *)v14 + 16;
  v16 = v17;
LABEL_11:
  if (v16 != __n || __n && memcmp(v15, __s2, __n))
  {
    v18 = (llvm::Value *)sub_1C4FB7E80(*(uint64_t **)(*((_QWORD *)a1 + 5) + 112), __s2, __n);
    if (v18)
    {
      v19 = (uint64_t ***)v18;
      llvm::Value::takeName(a1, v18);
      v23 = 261;
      v21 = __s2;
      v22 = __n;
      v20 = v19;
    }
    else
    {
      v23 = 261;
      v21 = __s2;
      v22 = __n;
      v20 = (uint64_t ***)a1;
    }
    llvm::Value::setName(v20, (uint64_t)&v21);
  }
}

uint64_t sub_1C591351C(uint64_t *a1, uint64_t *a2, int a3, int a4, uint64_t a5)
{
  uint64_t AttributeAtIndex;
  int v11;
  unint64_t v12;
  uint64_t v14;

  AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex(a1, a3, a4);
  v14 = llvm::AttributeList::removeAttributeAtIndex(a1, a2, a3, a4);
  if (AttributeAtIndex)
    v11 = *(_DWORD *)(AttributeAtIndex + 12);
  else
    v11 = 0;
  v12 = llvm::Attribute::get(a2, v11, a5);
  return llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)&v14, (llvm::LLVMContext *)a2, a3, v12);
}

void sub_1C59135BC()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C59135D0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E817F258;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5913608(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817F258;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C5913628(uint64_t a1, uint64_t a2)
{
  sub_1C5910880(*(_QWORD **)(a1 + 8), a2);
  **(_BYTE **)(a1 + 16) = 1;
}

llvm::UndefValue *sub_1C5913658(uint64_t a1, uint64_t ***a2)
{
  return sub_1C5911154(*(_QWORD *)(a1 + 8), a2, 1);
}

void sub_1C5913664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v4 = sub_1C59137D4(a1, a2, a3);
  v5 = *(uint64_t **)(a1 + 32);
  v6 = *(unsigned int *)(a1 + 40);
  if ((v4 & 1) != 0)
  {
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      do
      {
        v8 = *v5;
        if (*v5)
          v9 = *(_BYTE *)(*v5 + 8) == 16;
        else
          v9 = 0;
        if (v9 && *(_QWORD *)(v8 + 24))
          llvm::StructType::setName(v8, "", 0);
        ++v5;
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    if ((_DWORD)v6)
    {
      v10 = 8 * v6;
      do
      {
        v17 = *v5;
        v18 = 0;
        if (sub_1C4850EC8((uint64_t *)(a1 + 8), &v17, &v18))
        {
          *v18 = -8192;
          *(int32x2_t *)(a1 + 16) = vadd_s32(*(int32x2_t *)(a1 + 16), (int32x2_t)0x1FFFFFFFFLL);
        }
        ++v5;
        v10 -= 8;
      }
      while (v10);
    }
    sub_1C6154790(a1 + 320, *(unsigned int *)(a1 + 328) - (unint64_t)*(unsigned int *)(a1 + 184));
    v11 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(a1 + 176);
      v13 = 8 * v11;
      do
      {
        v14 = sub_1C477672C(a1 + 464, *v12);
        v15 = *(_QWORD *)(a1 + 472);
        if (v15 == *(_QWORD *)(a1 + 464))
          v16 = 484;
        else
          v16 = 480;
        if (v14 != (_QWORD *)(v15 + 8 * *(unsigned int *)(a1 + v16)))
        {
          *v14 = -2;
          ++*(_DWORD *)(a1 + 488);
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
  }
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 184) = 0;
}

uint64_t sub_1C59137D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t v34;

  v34 = a3;
  if (*(unsigned __int8 *)(a3 + 8) != *(unsigned __int8 *)(a2 + 8))
    return 0;
  v8 = *(_QWORD *)(a1 + 8);
  v6 = a1 + 8;
  v7 = v8;
  v9 = *(_DWORD *)(v6 + 16);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = v10 & ((a3 >> 4) ^ (a3 >> 9));
    v12 = (_QWORD *)(v7 + 16 * v11);
    v13 = *v12;
    if (*v12 == a3)
      goto LABEL_13;
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = (_QWORD *)(v7 + 16 * v11);
      v13 = *v12;
      if (*v12 == a3)
        goto LABEL_13;
    }
    if (v14)
      v33 = v14;
    else
      v33 = v12;
  }
  else
  {
    v33 = 0;
  }
  v12 = sub_1C55BA394(v6, (uint64_t)&v34, &v34, v33);
  *v12 = v34;
  v12[1] = 0;
LABEL_13:
  v18 = v12[1];
  if (v18)
    return v18 == a2;
  v19 = v34;
  if (v34 == a2)
    goto LABEL_31;
  v20 = *(_DWORD *)(v34 + 8);
  if (v34 && v20 == 16)
  {
    if ((v20 & 0x100) == 0)
    {
      v12[1] = a2;
      v21 = *(unsigned int *)(a1 + 40);
      if (v21 >= *(_DWORD *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v21 + 1, 8);
        LODWORD(v21) = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v21) = v19;
      ++*(_DWORD *)(a1 + 40);
      return 1;
    }
    if ((*(_BYTE *)(a2 + 9) & 1) == 0)
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 464), a2);
      if (v22)
      {
        v23 = *(unsigned int *)(a1 + 328);
        if (v23 >= *(_DWORD *)(a1 + 332))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 320, a1 + 336, v23 + 1, 8);
          LODWORD(v23) = *(_DWORD *)(a1 + 328);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 320) + 8 * v23) = v19;
        ++*(_DWORD *)(a1 + 328);
        v24 = v34;
        v25 = *(unsigned int *)(a1 + 40);
        if (v25 >= *(_DWORD *)(a1 + 44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v25 + 1, 8);
          LODWORD(v25) = *(_DWORD *)(a1 + 40);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v25) = v24;
        ++*(_DWORD *)(a1 + 40);
        v26 = *(unsigned int *)(a1 + 184);
        if (v26 >= *(_DWORD *)(a1 + 188))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 176, a1 + 192, v26 + 1, 8);
          LODWORD(v26) = *(_DWORD *)(a1 + 184);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v26) = a2;
        ++*(_DWORD *)(a1 + 184);
LABEL_31:
        v12[1] = a2;
        return 1;
      }
      return 0;
    }
  }
  if (*(_DWORD *)(v34 + 12) != *(_DWORD *)(a2 + 12))
    return 0;
  v27 = *(_DWORD *)(a2 + 8);
  result = 0;
  switch((char)v27)
  {
    case 13:
      return result;
    case 14:
      if (v20 > 0xFF != v27 > 0xFF)
        return 0;
      goto LABEL_48;
    case 15:
      if ((v27 ^ v20) >= 0x100)
        return 0;
      goto LABEL_48;
    case 16:
      if (((v20 ^ v27) & 0x400) != 0 || ((((v27 & 0x200) == 0) ^ ((unsigned __int16)(v20 & 0x200) >> 9)) & 1) == 0)
        return 0;
      goto LABEL_48;
    case 17:
      if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(v34 + 32))
        return 0;
      goto LABEL_48;
    default:
      if ((v27 & 0xFE) == 0x12)
      {
        result = 0;
        if ((v20 == 19) != (*(_DWORD *)(a2 + 8) == 19)
          || *(_DWORD *)(a2 + 32) != *(_DWORD *)(v34 + 32))
        {
          return result;
        }
      }
LABEL_48:
      v12[1] = a2;
      v28 = *(unsigned int *)(a1 + 40);
      if (v28 >= *(_DWORD *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v28 + 1, 8);
        LODWORD(v28) = *(_DWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v28) = v19;
      ++*(_DWORD *)(a1 + 40);
      v29 = *(unsigned int *)(v34 + 12);
      if (!(_DWORD)v29)
        return 1;
      v30 = 0;
      v31 = 8 * v29 - 8;
      do
      {
        result = sub_1C59137D4(a1, *(_QWORD *)(*(_QWORD *)(a2 + 16) + v30), *(_QWORD *)(*(_QWORD *)(v34 + 16) + v30));
        if ((_DWORD)result)
          v32 = v31 == v30;
        else
          v32 = 1;
        v30 += 8;
      }
      while (!v32);
      break;
  }
  return result;
}

void sub_1C5913B70(uint64_t **a1, void *a2, size_t a3, const void *a4, size_t a5)
{
  uint64_t *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  _QWORD v15[33];

  v15[32] = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  if (sub_1C4FB7E80(*(uint64_t **)(**a1 + 112), (unsigned __int8 *)a2, a3))
  {
    v13 = v15;
    v15[0] = 0x207265766D79732ELL;
    v14 = xmmword_1C8662EE0;
    if (a3 + 8 >= 0x101)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v13, v15, a3 + 8, 1);
      v10 = v14;
      if (!a3)
      {
LABEL_5:
        v11 = v10 + a3;
        *(_QWORD *)&v14 = v11;
        if (*((_QWORD *)&v14 + 1) < v11 + 2)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v13, v15, v11 + 2, 1);
          v11 = v14;
        }
        *(_WORD *)((char *)v13 + v11) = 8236;
        v12 = v14 + 2;
        *(_QWORD *)&v14 = v12;
        if (*((_QWORD *)&v14 + 1) < v12 + a5)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v13, v15, v12 + a5, 1);
          v12 = v14;
          if (!a5)
          {
LABEL_10:
            *(_QWORD *)&v14 = v12 + a5;
            LLVMAppendModuleInlineAsm_0(*v9, (const std::string::value_type *)v13, v12 + a5);
            if (v13 != v15)
              free(v13);
            return;
          }
        }
        else if (!a5)
        {
          goto LABEL_10;
        }
        memcpy((char *)v13 + v12, a4, a5);
        v12 = v14;
        goto LABEL_10;
      }
    }
    else
    {
      v10 = 8;
      if (!a3)
        goto LABEL_5;
    }
    memcpy((char *)v13 + v10, a2, a3);
    v10 = v14;
    goto LABEL_5;
  }
}

uint64_t sub_1C5913D18(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C62B3DC4(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 136; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C62B3DC4(a1, v14, v8);
}

_QWORD *sub_1C5913E80(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62B40B8(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5913F38(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t result;
  BOOL v11;
  unsigned int v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_14:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v11 = 0;
        else
          v11 = v7 == -8192;
        if (v11)
          v8 = v6;
        v12 = v5 + v9++;
        v5 = v12 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v12 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_14;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

uint64_t sub_1C5913FC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  unsigned int v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = sub_1C5913F38(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v7 = v12;
  v8 = *(_DWORD *)(a2 + 16);
  if ((result & 1) != 0)
  {
    v10 = 0;
    goto LABEL_7;
  }
  v9 = *(_DWORD *)(a2 + 8);
  if (4 * v9 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v9 - *(_DWORD *)(a2 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1C59140C4(a2, v8);
    v12 = 0;
    result = sub_1C5913F38(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
    v7 = v12;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v7 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v7 = *a3;
  v8 = *(_DWORD *)(a2 + 16);
  v10 = 1;
LABEL_7:
  v11 = *(_QWORD *)a2 + 8 * v8;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_1C59140C4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62B4168(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C591417C(uint64_t a1, int a2, const void **a3, unint64_t **a4)
{
  int v8;
  unsigned int v9;
  unint64_t *v10;
  unint64_t v11;
  const llvm::StructType *v12;
  const llvm::StructType *v13;
  uint64_t result;
  unint64_t *v15;
  int v16;
  BOOL v17;
  int v18;
  _BOOL4 isEqual;
  _BOOL4 v20;
  unint64_t *v21;
  unint64_t v22;

  if (a2)
  {
    v22 = sub_1C4F5AB38(*a3, (uint64_t)*a3 + 8 * (_QWORD)a3[1]);
    v8 = a2 - 1;
    v9 = (a2 - 1) & sub_1C5435634(&v22, (_BYTE *)a3 + 16);
    v10 = (unint64_t *)(a1 + 8 * v9);
    v11 = *v10;
    if (llvm::IRMover::StructTypeKeyInfo::isEqual(a3, *v10, v12))
    {
      result = 1;
    }
    else
    {
      v15 = 0;
      v16 = 1;
      while (v11 != -4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v11 == -8192;
        if (v17)
          v15 = v10;
        v21 = v15;
        v18 = v16 + 1;
        v9 = (v9 + v16) & v8;
        v10 = (unint64_t *)(a1 + 8 * v9);
        v11 = *v10;
        isEqual = llvm::IRMover::StructTypeKeyInfo::isEqual(a3, *v10, v13);
        v15 = v21;
        v20 = isEqual;
        result = 1;
        v16 = v18;
        if (v20)
          goto LABEL_5;
      }
      result = 0;
      if (v15)
        v10 = v15;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a4 = v10;
  return result;
}

_QWORD *sub_1C5914288(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5914338((uint64_t)a1, v7);
  v9 = 0;
  sub_1C4926528((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_1C5914338(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned __int8 ***)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C59143F0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C59143F0(uint64_t result, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 **v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 **v11;
  _QWORD *v12;

  v4 = result;
  *(_QWORD *)(result + 8) = 0;
  v5 = *(unsigned int *)(result + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD **)result;
    v7 = 16 * v5;
    do
    {
      *v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 1;
    do
    {
      if (((unint64_t)*(v8 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        result = sub_1C4926528(v4, v8 - 1, &v12);
        v9 = v12;
        *v12 = *(v8 - 1);
        v9[1] = *v8;
        v10 = (uint64_t)(v9 + 1);
        if (*v8)
        {
          result = llvm::MetadataTracking::retrack((uint64_t)v8, *v8, v10);
          *v8 = 0;
        }
        ++*(_DWORD *)(v4 + 8);
      }
      v11 = v8 + 1;
      v8 += 2;
    }
    while (v11 != a3);
  }
  return result;
}

BOOL llvm::Linker::linkInModule(llvm::LLVMContextImpl ****a1, llvm::Module **a2, int a3, _QWORD *a4)
{
  llvm::Module *v6;
  _QWORD *v7;
  _QWORD *v8;
  void (**v9)(_QWORD *);
  uint64_t v10;
  uint64_t *i;
  llvm::LLVMContextImpl **v12;
  llvm::LLVMContextImpl ***v13;
  llvm::GlobalAlias *v14;
  llvm::LLVMContextImpl **v15;
  llvm::LLVMContextImpl ***v16;
  llvm::GlobalAlias *v17;
  llvm::LLVMContextImpl **v18;
  llvm::LLVMContextImpl ***v19;
  llvm::GlobalAlias *v20;
  llvm::Module *v21;
  char *v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  char **v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;
  size_t **v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  size_t **v44;
  int v45;
  unsigned int v46;
  llvm::LLVMContextImpl ***v47;
  int v48;
  uint64_t v49;
  size_t *v50;
  unsigned __int8 *v51;
  size_t v52;
  size_t v53;
  int v54;
  size_t v55;
  unsigned __int8 *v56;
  int v57;
  unsigned int v58;
  llvm::LLVMContextImpl **v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  llvm::LLVMContextImpl *v64;
  unsigned __int8 *v65;
  int v66;
  int v67;
  unsigned int v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  int v72;
  BOOL v73;
  unsigned int v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned __int8 *v77;
  size_t v78;
  int v79;
  size_t v80;
  unsigned __int8 *v81;
  int v82;
  llvm::LLVMContextImpl **v83;
  int v84;
  int v85;
  uint64_t v86;
  llvm::LLVMContextImpl *v87;
  uint64_t v88;
  BOOL v89;
  int v90;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  uint64_t v94;
  llvm::Module *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  BOOL v100;
  const char *v101;
  char v102;
  uint64_t v103;
  unsigned __int8 *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  BOOL v109;
  const char *v110;
  char v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  _QWORD *v118;
  _QWORD *v119;
  unint64_t v120;
  char **v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t AliaseeObject;
  llvm::GlobalAlias *v134;
  int v135;
  _QWORD *v136;
  _QWORD *v137;
  unint64_t v138;
  llvm::GlobalAlias **v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t j;
  uint64_t v160;
  _BOOL8 v161;
  _QWORD *v162;
  uint64_t v163;
  llvm::Module *v164;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  unsigned int v169;
  _QWORD *v170;
  uint64_t ****v171;
  uint64_t ****v172;
  llvm::GlobalValue *v173;
  char *v174;
  char *v175;
  const llvm::GlobalObject *v176;
  BOOL v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const llvm::GlobalObject **v182;
  const llvm::GlobalObject *v183;
  int v184;
  int v185;
  _DWORD *v186;
  uint64_t v187;
  llvm::PointerType *v188;
  char v189;
  char v190;
  uint64_t v191;
  llvm::GlobalObject *v192;
  const llvm::GlobalObject *v193;
  size_t v194;
  char *v195;
  size_t v196;
  uint64_t v197;
  uint64_t ***v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t ****v204;
  uint64_t ***v205;
  int v206;
  int v207;
  uint64_t ***v208;
  unsigned __int8 *v209;
  size_t v210;
  size_t v211;
  llvm::Module *v212;
  llvm::Module *v213;
  uint64_t (**v214)(llvm::DiagnosticInfo *__hidden);
  uint64_t (*v215)(llvm::DiagnosticInfo *__hidden);
  uint64_t (*v216)(llvm::DiagnosticInfo *__hidden);
  unsigned __int8 *v217;
  uint64_t v218;
  uint64_t v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  char v225;
  size_t **v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  llvm::LLVMContextImpl ***v230;
  llvm::Module *v231;
  uint64_t (**v232)(llvm::DiagnosticInfo *__hidden);
  char v233;
  void *v234;
  uint64_t v235;
  uint64_t v236[2];
  int v237;
  uint64_t ***v238[2];
  char *v239;
  size_t v240;
  __int16 v241;
  __int128 v242;
  const char *v243;
  char *v244;
  __int16 v245;
  uint64_t (**v246)(llvm::DiagnosticInfo *__hidden);
  int v247;
  char v248;
  __int128 *v249;
  unsigned __int8 *v250;
  uint64_t v251;
  char *v252;
  unsigned __int8 *v253;
  _QWORD v254[3];
  _QWORD *v255;
  llvm::LLVMContextImpl ****v256;
  llvm::Module *v257;
  _QWORD v258[2];
  int v259;
  void *__p;
  uint64_t *v261;
  uint64_t v262;
  int v263;
  _QWORD v264[4];
  _BYTE v265[24];
  _BYTE *v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t v273;

  v273 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  *a2 = 0;
  v7 = (_QWORD *)a4[3];
  if (v7)
  {
    if (v7 == a4)
    {
      v255 = v254;
      (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v254);
      v7 = v255;
    }
    else
    {
      v255 = (_QWORD *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    v255 = 0;
  }
  v256 = a1;
  v257 = v6;
  v258[0] = 0;
  v258[1] = 0;
  v259 = 0;
  v261 = 0;
  v262 = 0;
  __p = 0;
  v263 = a3;
  v264[0] = 0;
  v264[1] = 0;
  v264[2] = 0x800000000;
  if (!v7)
  {
    v270 = 0;
    v271 = 0;
    v272 = 0;
    v267 = 0;
    v268 = 0;
    v266 = 0;
    v269 = 0;
    goto LABEL_15;
  }
  if (v7 != v254)
  {
    v255 = 0;
    v267 = 0;
    v268 = 0;
    v266 = v7;
    v269 = 0;
    v270 = 0;
    v271 = 0;
    v272 = 0;
    goto LABEL_15;
  }
  v266 = v265;
  (*(void (**)(_QWORD *, _BYTE *))(v254[0] + 24))(v254, v265);
  v8 = v255;
  v267 = 0;
  v268 = 0;
  v269 = 0;
  v270 = 0;
  v271 = 0;
  v272 = 0;
  if (v255 == v254)
  {
    v9 = (void (**)(_QWORD *))(v254[0] + 32);
    v8 = v254;
  }
  else
  {
    if (!v255)
      goto LABEL_15;
    v9 = (void (**)(_QWORD *))(*v255 + 40);
  }
  (*v9)(v8);
LABEL_15:
  v230 = *v256;
  v236[0] = 0;
  v236[1] = 0;
  v237 = 0;
  v10 = *((unsigned int *)v257 + 32);
  if ((_DWORD)v10)
  {
    for (i = (uint64_t *)*((_QWORD *)v257 + 15); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = (uint64_t *)*((_QWORD *)v257 + 15);
  }
  v229 = *((_QWORD *)v257 + 15) + 8 * v10;
  if (i != (uint64_t *)v229)
  {
    v39 = *i;
    while (1)
    {
      v40 = (size_t **)(v39 + 8);
      v41 = v267;
      v42 = v269;
      if (!v269)
        goto LABEL_73;
      v43 = ((v40 >> 4) ^ (v40 >> 9)) & (v269 - 1);
      v44 = *(size_t ***)(v267 + 16 * v43);
      if (v40 != v44)
        break;
      do
      {
LABEL_120:
        v88 = i[1];
        ++i;
        v39 = v88;
        if (v88)
          v89 = v39 == -8;
        else
          v89 = 1;
      }
      while (v89);
      if (i == (uint64_t *)v229)
        goto LABEL_18;
    }
    v45 = 1;
    while (v44 != (size_t **)-4096)
    {
      v46 = v43 + v45++;
      v43 = v46 & (v269 - 1);
      v44 = *(size_t ***)(v267 + 16 * v43);
      if (v40 == v44)
        goto LABEL_120;
    }
LABEL_73:
    v47 = *v256;
    v48 = *(_DWORD *)(v39 + 16);
    v49 = *((unsigned int *)*v256 + 32);
    if ((_DWORD)v49)
    {
      v223 = v269;
      v224 = v267;
      v226 = (size_t **)(v39 + 8);
      v50 = *(size_t **)(v39 + 8);
      v53 = *v50;
      v51 = (unsigned __int8 *)(v50 + 9);
      v52 = v53;
      v227 = *(_DWORD *)(v39 + 16);
      v54 = 0;
      if (v53)
      {
        v55 = v52;
        v56 = v51;
        do
        {
          v57 = *v56++;
          v54 = 33 * v54 + v57;
          --v55;
        }
        while (v55);
      }
      v58 = v49 - 1;
      v59 = v47[15];
      v222 = *((unsigned int *)*v256 + 32);
      v60 = (uint64_t)&v59[v49 + 1];
      v61 = 1;
      v62 = v54;
      while (1)
      {
        v63 = v62 & v58;
        v64 = v59[v63];
        if (v64 != (llvm::LLVMContextImpl *)-8)
        {
          if (!v64)
            goto LABEL_88;
          if (*(_DWORD *)(v60 + 4 * v63) == v54 && v52 == *(_QWORD *)v64)
          {
            if (!v52)
              break;
            v65 = v51;
            v66 = memcmp(v51, (char *)v64 + *((unsigned int *)v47 + 35), v52);
            v51 = v65;
            if (!v66)
              break;
          }
        }
        v62 = v61 + v63;
        ++v61;
      }
      if ((_DWORD)v63 == -1)
      {
LABEL_88:
        v67 = 1;
        v48 = v227;
        goto LABEL_89;
      }
      if ((int)v63 == v222)
      {
        v67 = 1;
        v48 = v227;
LABEL_89:
        v40 = v226;
LABEL_90:
        v41 = v224;
        v42 = v223;
        goto LABEL_91;
      }
      v90 = *((_DWORD *)v59[(int)v63] + 4);
      if ((v90 | 2) == 2 && (v227 | 2) == 2)
      {
        v48 = 2;
        if (v227 != 2 && v90 != 2)
        {
          v67 = 0;
          v48 = 0;
          goto LABEL_89;
        }
      }
      else
      {
        if (v227 != v90)
        {
          v241 = 1283;
          v238[0] = (uint64_t ***)"Linking COMDATs named '";
          v239 = (char *)v51;
          v240 = v52;
          v220 = "': invalid selection kinds!";
          goto LABEL_332;
        }
        if ((v227 - 1) >= 2 && v227 != 4)
        {
          v40 = v226;
          if (v227 == 3)
          {
            v48 = 3;
            v67 = 2;
          }
          else
          {
            v67 = 0;
            v48 = v227;
          }
          goto LABEL_90;
        }
        v48 = v227;
      }
      v234 = 0;
      v253 = 0;
      v92 = v51;
      if ((sub_1C59164D8((uint64_t)&v256, (uint64_t *)v47[14], v51, v52, (unsigned __int8 **)&v234) & 1) != 0
        || (sub_1C59164D8((uint64_t)&v256, *((uint64_t **)v257 + 14), v92, v52, &v253) & 1) != 0)
      {
        goto LABEL_333;
      }
      v93 = v92;
      v94 = (uint64_t)(v47 + 34);
      v95 = v257;
      v96 = v234;
      v97 = *((_QWORD *)v234 + 3);
      sub_1C4768AD0(v94, v97);
      v228 = v98;
      v100 = v99 == 1;
      llvm::DataLayout::getAlignment(v94, v97);
      v225 = v102;
      if (v100)
      v103 = (uint64_t)v95 + 272;
      v104 = v253;
      v105 = *((_QWORD *)v253 + 3);
      sub_1C4768AD0(v103, v105);
      v107 = v106;
      v109 = v108 == 1;
      llvm::DataLayout::getAlignment(v103, v105);
      v112 = v111;
      if (v109)
      v113 = ((1 << v225) + ((unint64_t)(v228 + 7) >> 3) - 1) & -(1 << v225);
      v114 = ((1 << v112) + ((unint64_t)(v107 + 7) >> 3) - 1) & -(1 << v112);
      if (v48 == 2)
      {
        v67 = v114 > v113;
      }
      else
      {
        if (v48 == 1)
        {
          if (*((_QWORD *)v104 - 4) != *(v96 - 4))
          {
            v241 = 1283;
            v238[0] = (uint64_t ***)"Linking COMDATs named '";
            v239 = (char *)v93;
            v240 = v52;
            v220 = "': ExactMatch violated!";
LABEL_332:
            *(_QWORD *)&v242 = v238;
            v243 = v220;
            v245 = 770;
            v221 = *(_QWORD *)v257;
            v247 = 3;
            v248 = 0;
            v246 = &off_1E817F1D8;
            v249 = &v242;
            llvm::LLVMContext::diagnose(v221, (const llvm::DiagnosticInfo *)&v246);
LABEL_333:
            v161 = 1;
            goto LABEL_247;
          }
        }
        else if (v114 != v113)
        {
          v241 = 1283;
          v238[0] = (uint64_t ***)"Linking COMDATs named '";
          v239 = (char *)v93;
          v240 = v52;
          v220 = "': SameSize violated!";
          goto LABEL_332;
        }
        v67 = 0;
      }
      v41 = v267;
      v42 = v269;
      v40 = v226;
    }
    else
    {
      v67 = 1;
    }
LABEL_91:
    *(_QWORD *)&v242 = v40;
    if (v42)
    {
      v68 = (v42 - 1) & ((v40 >> 4) ^ (v40 >> 9));
      v69 = (_QWORD *)(v41 + 16 * v68);
      v70 = *v69;
      if (v40 == (size_t **)*v69)
      {
LABEL_104:
        *((_DWORD *)v69 + 2) = v48;
        *((_DWORD *)v69 + 3) = v67;
        if (v67 == 1)
        {
          v76 = *((unsigned int *)v230 + 32);
          if ((_DWORD)v76)
          {
            v77 = (unsigned __int8 *)(*v40 + 9);
            v78 = **v40;
            if (v78)
            {
              v79 = 0;
              v80 = v78;
              v81 = v77;
              do
              {
                v82 = *v81++;
                v79 = 33 * v79 + v82;
                --v80;
              }
              while (v80);
            }
            else
            {
              v79 = 0;
            }
            v83 = v230[15];
            v84 = 1;
            v85 = v79;
            while (1)
            {
              v86 = v85 & (v76 - 1);
              v87 = v83[v86];
              if (v87 != (llvm::LLVMContextImpl *)-8)
              {
                if (!v87)
                  goto LABEL_120;
                if (*((_DWORD *)&v83[v76 + 1] + v86) == v79
                  && v78 == *(_QWORD *)v87
                  && (!v78 || !memcmp(v77, (char *)v87 + *((unsigned int *)v230 + 35), v78)))
                {
                  break;
                }
              }
              v85 = v84 + v86;
              ++v84;
            }
            if ((_DWORD)v86 != -1 && (int)v86 != v76)
            {
              v238[0] = 0;
              v238[0] = (uint64_t ***)((char *)v83[(int)v86] + 8);
              sub_1C614F72C((uint64_t)v236, v238, (uint64_t)&v242);
            }
          }
        }
        goto LABEL_120;
      }
      v71 = 0;
      v72 = 1;
      while (v70 != -4096)
      {
        if (v71)
          v73 = 0;
        else
          v73 = v70 == -8192;
        if (v73)
          v71 = v69;
        v74 = v68 + v72++;
        v68 = v74 & (v42 - 1);
        v69 = (_QWORD *)(v41 + 16 * v68);
        v70 = *v69;
        if (v40 == (size_t **)*v69)
          goto LABEL_104;
      }
      if (v71)
        v75 = v71;
      else
        v75 = v69;
    }
    else
    {
      v75 = 0;
    }
    v69 = sub_1C59165F0((uint64_t)&v267, (uint64_t *)&v242, v75);
    *v69 = v40;
    v69[1] = 0;
    goto LABEL_104;
  }
LABEL_18:
  v12 = v230[6];
  if (v12 != (llvm::LLVMContextImpl **)(v230 + 5))
  {
    do
    {
      v13 = (llvm::LLVMContextImpl ***)v12[1];
      if (v12)
        v14 = (llvm::GlobalAlias *)(v12 - 6);
      else
        v14 = 0;
      sub_1C59159F4(v14, v236);
      v12 = (llvm::LLVMContextImpl **)v13;
    }
    while (v13 != v230 + 5);
  }
  v15 = v230[2];
  if (v15 != (llvm::LLVMContextImpl **)(v230 + 1))
  {
    do
    {
      v16 = (llvm::LLVMContextImpl ***)v15[1];
      if (v15)
        v17 = (llvm::GlobalAlias *)(v15 - 7);
      else
        v17 = 0;
      sub_1C59159F4(v17, v236);
      v15 = (llvm::LLVMContextImpl **)v16;
    }
    while (v16 != v230 + 1);
  }
  v18 = v230[4];
  if (v18 != (llvm::LLVMContextImpl **)(v230 + 3))
  {
    do
    {
      v19 = (llvm::LLVMContextImpl ***)v18[1];
      if (v18)
        v20 = (llvm::GlobalAlias *)(v18 - 7);
      else
        v20 = 0;
      sub_1C59159F4(v20, v236);
      v18 = (llvm::LLVMContextImpl **)v19;
    }
    while (v19 != v230 + 3);
  }
  v21 = v257;
  v22 = (char *)v257 + 8;
  v23 = (char *)*((_QWORD *)v257 + 2);
  if (v23 != (char *)v257 + 8)
  {
    do
    {
      if (v23)
        v24 = v23 - 56;
      else
        v24 = 0;
      if ((*((_DWORD *)v24 + 8) & 0xE) == 2)
      {
        *(_QWORD *)&v242 = *((_QWORD *)v24 + 6);
        if ((_QWORD)v242)
        {
          v25 = sub_1C61D0AA8((uint64_t)&v270, (uint64_t *)&v242);
          v26 = v25;
          v28 = (char **)v25[2];
          v27 = v25[3];
          if ((unint64_t)v28 >= v27)
          {
            v30 = (_QWORD *)v25[1];
            v31 = v28 - (char **)v30;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61)
LABEL_334:
              abort();
            v33 = v27 - (_QWORD)v30;
            if (v33 >> 2 > v32)
              v32 = v33 >> 2;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
              v34 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              if (v34 >> 61)
LABEL_335:
                sub_1C4764EE4();
              v35 = (char *)operator new(8 * v34);
            }
            else
            {
              v35 = 0;
            }
            v36 = &v35[8 * v31];
            *(_QWORD *)v36 = v24;
            v29 = v36 + 8;
            if (v28 != v30)
            {
              do
              {
                v37 = (uint64_t)*--v28;
                *((_QWORD *)v36 - 1) = v37;
                v36 -= 8;
              }
              while (v28 != v30);
              v28 = (char **)v26[1];
            }
            v26[1] = v36;
            v26[2] = v29;
            v26[3] = &v35[8 * v34];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *v28 = v24;
            v29 = v28 + 1;
          }
          v26[2] = v29;
        }
      }
      v23 = (char *)*((_QWORD *)v23 + 1);
    }
    while (v23 != v22);
    v21 = v257;
  }
  v115 = (char *)v21 + 24;
  v116 = (char *)*((_QWORD *)v21 + 4);
  if (v116 != (char *)v21 + 24)
  {
    do
    {
      if (v116)
        v117 = v116 - 56;
      else
        v117 = 0;
      if ((*((_DWORD *)v117 + 8) & 0xE) == 2)
      {
        *(_QWORD *)&v242 = *((_QWORD *)v117 + 6);
        if ((_QWORD)v242)
        {
          v118 = sub_1C61D0AA8((uint64_t)&v270, (uint64_t *)&v242);
          v119 = v118;
          v121 = (char **)v118[2];
          v120 = v118[3];
          if ((unint64_t)v121 >= v120)
          {
            v123 = (_QWORD *)v118[1];
            v124 = v121 - (char **)v123;
            v125 = v124 + 1;
            if ((unint64_t)(v124 + 1) >> 61)
              goto LABEL_334;
            v126 = v120 - (_QWORD)v123;
            if (v126 >> 2 > v125)
              v125 = v126 >> 2;
            if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
              v127 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v127 = v125;
            if (v127)
            {
              if (v127 >> 61)
                goto LABEL_335;
              v128 = (char *)operator new(8 * v127);
            }
            else
            {
              v128 = 0;
            }
            v129 = &v128[8 * v124];
            *(_QWORD *)v129 = v117;
            v122 = v129 + 8;
            if (v121 != v123)
            {
              do
              {
                v130 = (uint64_t)*--v121;
                *((_QWORD *)v129 - 1) = v130;
                v129 -= 8;
              }
              while (v121 != v123);
              v121 = (char **)v119[1];
            }
            v119[1] = v129;
            v119[2] = v122;
            v119[3] = &v128[8 * v127];
            if (v121)
              operator delete(v121);
          }
          else
          {
            *v121 = v117;
            v122 = v121 + 1;
          }
          v119[2] = v122;
        }
      }
      v116 = (char *)*((_QWORD *)v116 + 1);
    }
    while (v116 != v115);
    v21 = v257;
  }
  v131 = (char *)v21 + 40;
  v132 = (char *)*((_QWORD *)v21 + 6);
  if (v132 == (char *)v21 + 40)
    goto LABEL_216;
  do
  {
    AliaseeObject = (uint64_t)(v132 - 48);
    if (v132)
      v134 = (llvm::GlobalAlias *)(v132 - 48);
    else
      v134 = 0;
    if ((*((_DWORD *)v134 + 8) & 0xE) == 2)
    {
      *(_QWORD *)&v242 = 0;
      v135 = *((unsigned __int8 *)v134 + 16);
      if (v132 && v135 == 1)
      {
        AliaseeObject = llvm::GlobalAlias::getAliaseeObject(v134);
        if (!AliaseeObject)
          goto LABEL_194;
      }
      else if (v135 == 2)
      {
        goto LABEL_194;
      }
      *(_QWORD *)&v242 = *(_QWORD *)(AliaseeObject + 48);
      if ((_QWORD)v242)
      {
        v136 = sub_1C61D0AA8((uint64_t)&v270, (uint64_t *)&v242);
        v137 = v136;
        v139 = (llvm::GlobalAlias **)v136[2];
        v138 = v136[3];
        if ((unint64_t)v139 >= v138)
        {
          v141 = (_QWORD *)v136[1];
          v142 = v139 - (llvm::GlobalAlias **)v141;
          v143 = v142 + 1;
          if ((unint64_t)(v142 + 1) >> 61)
            goto LABEL_334;
          v144 = v138 - (_QWORD)v141;
          if (v144 >> 2 > v143)
            v143 = v144 >> 2;
          if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
            v145 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v145 = v143;
          if (v145)
          {
            if (v145 >> 61)
              goto LABEL_335;
            v146 = (char *)operator new(8 * v145);
          }
          else
          {
            v146 = 0;
          }
          v147 = &v146[8 * v142];
          *(_QWORD *)v147 = v134;
          v140 = v147 + 8;
          if (v139 != v141)
          {
            do
            {
              v148 = (uint64_t)*--v139;
              *((_QWORD *)v147 - 1) = v148;
              v147 -= 8;
            }
            while (v139 != v141);
            v139 = (llvm::GlobalAlias **)v137[1];
          }
          v137[1] = v147;
          v137[2] = v140;
          v137[3] = &v146[8 * v145];
          if (v139)
            operator delete(v139);
        }
        else
        {
          *v139 = v134;
          v140 = v139 + 1;
        }
        v137[2] = v140;
      }
    }
LABEL_194:
    v132 = (char *)*((_QWORD *)v132 + 1);
  }
  while (v132 != v131);
  v21 = v257;
LABEL_216:
  v234 = v236;
  v235 = 0;
  v149 = (char *)v21 + 8;
  v150 = (char *)*((_QWORD *)v21 + 2);
  if (v150 == (char *)v21 + 8)
    goto LABEL_223;
  do
  {
    if (v150)
      v151 = (uint64_t)(v150 - 56);
    else
      v151 = 0;
    if ((sub_1C5915B90((uint64_t)&v256, v151, (uint64_t)&v234) & 1) != 0)
    {
LABEL_244:
      v161 = 1;
      goto LABEL_245;
    }
    v150 = (char *)*((_QWORD *)v150 + 1);
  }
  while (v150 != v149);
  v21 = v257;
LABEL_223:
  v152 = (char *)v21 + 24;
  v153 = (char *)*((_QWORD *)v21 + 4);
  if (v153 != (char *)v21 + 24)
  {
    do
    {
      if (v153)
        v154 = (uint64_t)(v153 - 56);
      else
        v154 = 0;
      if ((sub_1C5915B90((uint64_t)&v256, v154, (uint64_t)&v234) & 1) != 0)
        goto LABEL_244;
      v153 = (char *)*((_QWORD *)v153 + 1);
    }
    while (v153 != v152);
    v21 = v257;
  }
  v155 = (char *)v21 + 40;
  v156 = (char *)*((_QWORD *)v21 + 6);
  if (v156 != (char *)v21 + 40)
  {
    do
    {
      if (v156)
        v157 = (uint64_t)(v156 - 48);
      else
        v157 = 0;
      if ((sub_1C5915B90((uint64_t)&v256, v157, (uint64_t)&v234) & 1) != 0)
        goto LABEL_244;
      v156 = (char *)*((_QWORD *)v156 + 1);
    }
    while (v156 != v155);
    v21 = v257;
  }
  v158 = (char *)v21 + 56;
  for (j = *((_QWORD *)v21 + 8); (char *)j != v158; j = *(_QWORD *)(j + 8))
  {
    if (j)
      v160 = j - 56;
    else
      v160 = 0;
    if ((sub_1C5915B90((uint64_t)&v256, v160, (uint64_t)&v234) & 1) != 0)
      goto LABEL_244;
  }
  if ((_DWORD)v235)
  {
    v174 = (char *)v234;
    v175 = (char *)v234 + 8 * v235;
    while (1)
    {
      v176 = *(const llvm::GlobalObject **)v174;
      if (*(_QWORD *)v174)
        v177 = *(_BYTE *)(*(_QWORD *)v174 + 16) == 3;
      else
        v177 = 0;
      if (v177)
      {
        v186 = operator new(0x78uLL);
        v186[13] = v186[13] & 0x38000000 | 1;
        *(_QWORD *)v186 = 0;
        *((_QWORD *)v186 + 1) = 0;
        *((_QWORD *)v186 + 2) = 0;
        *((_QWORD *)v186 + 3) = v186 + 8;
        v187 = *((_QWORD *)v176 + 5);
        v188 = (llvm::PointerType *)*((_QWORD *)v176 + 3);
        v189 = *((_BYTE *)v176 + 80) & 1;
        v190 = *((_DWORD *)v176 + 8) & 0xF;
        v191 = *((_QWORD *)v176 - 4);
        v245 = 257;
        v192 = (llvm::GlobalObject *)llvm::GlobalVariable::GlobalVariable((uint64_t)(v186 + 8), v187, v188, v189, v190, v191, (uint64_t)&v242, 0, 0, 0, 0);
        llvm::GlobalObject::copyAttributesFrom(v192, v176);
        *((_BYTE *)v186 + 112) = v186[28] & 0xFD | *((_BYTE *)v176 + 80) & 2;
        *((_QWORD *)v186 + 13) = *((_QWORD *)v176 + 9);
        v186[16] = v186[16] & 0xFFFFBFC0 | 0x4008;
        llvm::GlobalObject::setComdat((llvm::GlobalObject *)(v186 + 8), *((llvm::Comdat **)v176 + 6));
        if (*((llvm::LLVMContextImpl ****)v176 + 5) != *v256)
        {
          *(_QWORD *)&v242 = v186 + 8;
          sub_1C56D6B88(v258, &v242);
        }
        goto LABEL_287;
      }
      if ((*((_BYTE *)v176 + 23) & 0x10) == 0)
      {
        v194 = 0;
        v195 = &byte_1C871356D;
        goto LABEL_286;
      }
      v178 = ***(_QWORD ***)v176;
      v179 = *(_QWORD *)(v178 + 152);
      v180 = *(unsigned int *)(v178 + 168);
      if (!(_DWORD)v180)
        goto LABEL_284;
      LODWORD(v181) = (v180 - 1) & ((v176 >> 4) ^ (v176 >> 9));
      v182 = (const llvm::GlobalObject **)(v179 + 16 * v181);
      v183 = *v182;
      if (*v182 != v176)
        break;
LABEL_285:
      v193 = v182[1];
      v196 = *(_QWORD *)v193;
      v195 = (char *)v193 + 16;
      v194 = v196;
LABEL_286:
      v241 = 1283;
      v238[0] = (uint64_t ***)"linking '";
      v239 = v195;
      v240 = v194;
      *(_QWORD *)&v242 = v238;
      v243 = "': non-variables in comdat nodeduplicate are not handled";
      v245 = 770;
      v197 = *(_QWORD *)v257;
      v247 = 3;
      v248 = 0;
      v246 = &off_1E817F1D8;
      v249 = &v242;
      llvm::LLVMContext::diagnose(v197, (const llvm::DiagnosticInfo *)&v246);
LABEL_287:
      v174 += 8;
      if (v174 == v175)
        goto LABEL_258;
    }
    v184 = 1;
    while (v183 != (const llvm::GlobalObject *)-4096)
    {
      v185 = v181 + v184++;
      v181 = v185 & (v180 - 1);
      v183 = *(const llvm::GlobalObject **)(v179 + 16 * v181);
      if (v183 == v176)
      {
        v182 = (const llvm::GlobalObject **)(v179 + 16 * v181);
        goto LABEL_285;
      }
    }
LABEL_284:
    v182 = (const llvm::GlobalObject **)(v179 + 16 * v180);
    goto LABEL_285;
  }
LABEL_258:
  v166 = v261;
  v167 = v261;
  if (v261 == __p)
    goto LABEL_307;
  v168 = 0;
  v169 = 0;
  v167 = (uint64_t *)__p;
  do
  {
    *(_QWORD *)&v242 = llvm::GlobalValue::getComdat(v167[v168]);
    if ((_QWORD)v242)
    {
      v170 = sub_1C61D0AA8((uint64_t)&v270, (uint64_t *)&v242);
      v171 = (uint64_t ****)v170[1];
      v172 = (uint64_t ****)v170[2];
      while (v171 != v172)
      {
        v238[0] = 0;
        v238[0] = *v171;
        v173 = (llvm::GlobalValue *)sub_1C5916038((uint64_t)*v256, v238[0]);
        LOBYTE(v246) = 1;
        if (!v173)
          goto LABEL_268;
        if ((sub_1C5916100((uint64_t)&v256, (BOOL *)&v246, v173, v238[0]) & 1) != 0)
        {
          v161 = 1;
          goto LABEL_245;
        }
        if ((_BYTE)v246)
LABEL_268:
          sub_1C56D6B88(v258, v238);
        ++v171;
      }
    }
    v167 = (uint64_t *)__p;
    v166 = v261;
    v168 = ++v169;
  }
  while (v169 < (unint64_t)(((char *)v261 - (_BYTE *)__p) >> 3));
  if (__p != v261 && v266 != 0)
  {
    while (2)
    {
      v199 = (uint64_t ***)*v167;
      if ((*(_BYTE *)(*v167 + 23) & 0x10) != 0)
      {
        v200 = ***v199;
        v201 = *(_QWORD *)(v200 + 152);
        v202 = *(unsigned int *)(v200 + 168);
        if (!(_DWORD)v202)
          goto LABEL_301;
        LODWORD(v203) = (v202 - 1) & ((v199 >> 4) ^ (v199 >> 9));
        v204 = (uint64_t ****)(v201 + 16 * v203);
        v205 = *v204;
        if (*v204 != v199)
        {
          v206 = 1;
          while (v205 != (uint64_t ***)-4096)
          {
            v207 = v203 + v206++;
            v203 = v207 & (v202 - 1);
            v205 = *(uint64_t ****)(v201 + 16 * v203);
            if (v205 == v199)
            {
              v204 = (uint64_t ****)(v201 + 16 * v203);
              goto LABEL_302;
            }
          }
LABEL_301:
          v204 = (uint64_t ****)(v201 + 16 * v202);
        }
LABEL_302:
        v208 = v204[1];
        v211 = (size_t)*v208;
        v209 = (unsigned __int8 *)(v208 + 2);
        v210 = v211;
      }
      else
      {
        v210 = 0;
        v209 = (unsigned __int8 *)&byte_1C871356D;
      }
      sub_1C4F024D8((llvm::StringMapImpl *)v264, v209, v210);
      if (++v167 == v166)
      {
        v167 = (uint64_t *)__p;
        v166 = v261;
        break;
      }
      continue;
    }
  }
LABEL_307:
  v233 = 0;
  v212 = v257;
  v257 = 0;
  v231 = v212;
  *(_QWORD *)&v242 = &v256;
  v244 = (char *)&off_1EF8EC740 + 2;
  llvm::IRMover::move(v256, &v231, v167, v166 - v167, &v242, 0, (uint64_t *)&v232);
  sub_1C5052E10(&v242);
  v213 = v231;
  v231 = 0;
  if (v213)
  {
    llvm::Module::~Module(v213);
    MEMORY[0x1CAA32FC0]();
  }
  v214 = v232;
  if (v232)
  {
    v232 = 0;
    v238[0] = (uint64_t ***)v230;
    v238[1] = (uint64_t ***)&v233;
    if ((*((unsigned int (**)(uint64_t (**)(llvm::DiagnosticInfo *__hidden), void *))*v214 + 6))(v214, &llvm::ErrorList::ID))
    {
      v215 = v214[1];
      v216 = v214[2];
      if (v215 == v216)
      {
        v217 = 0;
      }
      else
      {
        v217 = 0;
        do
        {
          v253 = v217;
          v218 = *(_QWORD *)v215;
          *(_QWORD *)v215 = 0;
          v251 = v218;
          sub_1C5916AF0(&v252, &v251, (uint64_t)v238);
          sub_1C6174794((char **)&v253, &v252, &v246);
          v217 = (unsigned __int8 *)v246;
          v246 = 0;
          if (v252)
            (*(void (**)(char *))(*(_QWORD *)v252 + 8))(v252);
          v219 = v251;
          v251 = 0;
          if (v219)
            (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
          if (v253)
            (*(void (**)(unsigned __int8 *))(*(_QWORD *)v253 + 8))(v253);
          v215 = (uint64_t (*)(llvm::DiagnosticInfo *__hidden))((char *)v215 + 8);
        }
        while (v215 != v216);
      }
      v250 = v217;
LABEL_324:
      (*((void (**)(uint64_t (**)(llvm::DiagnosticInfo *__hidden)))*v214 + 1))(v214);
    }
    else
    {
      v246 = v214;
      sub_1C5916AF0(&v250, &v246, (uint64_t)v238);
      v214 = v246;
      if (v246)
        goto LABEL_324;
    }
    if (v232)
      (*((void (**)(uint64_t (**)(llvm::DiagnosticInfo *__hidden)))*v232 + 1))(v232);
  }
  v161 = v233 != 0;
  if (!v233 && v266)
    (*(void (**)(_BYTE *, llvm::LLVMContextImpl ***, _QWORD *))(*(_QWORD *)v266 + 48))(v266, v230, v264);
LABEL_245:
  if (v234 != v236)
    free(v234);
LABEL_247:
  MEMORY[0x1CAA32FB4](v236[0], 8);
  sub_1C62B4210(v270, v272);
  MEMORY[0x1CAA32FB4](v270, 8);
  MEMORY[0x1CAA32FB4](v267, 8);
  v162 = v265;
  if (v266 == v265)
  {
    v163 = 4;
LABEL_251:
    (*(void (**)(void))(*v162 + 8 * v163))();
  }
  else if (v266)
  {
    v163 = 5;
    v162 = v266;
    goto LABEL_251;
  }
  sub_1C4F02264((uint64_t)v264);
  if (__p)
  {
    v261 = (uint64_t *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v258[0], 8);
  v164 = v257;
  v257 = 0;
  if (v164)
  {
    llvm::Module::~Module(v164);
    MEMORY[0x1CAA32FC0]();
  }
  return v161;
}

BOOL llvm::Linker::linkModules(llvm::Module *a1, llvm::Module **a2, int a3, _QWORD *a4)
{
  llvm::Module *v7;
  _QWORD *v8;
  _BOOL8 v9;
  _QWORD *v10;
  void (**v11)(_QWORD *);
  llvm::Module *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 **v16;
  llvm::Module *v18;
  llvm::LLVMContextImpl ***v19;
  _QWORD v20[6];
  uint64_t v21;
  unsigned int v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  llvm::IRMover::IRMover((llvm::IRMover *)&v19, a1);
  v7 = *a2;
  *a2 = 0;
  v18 = v7;
  v8 = (_QWORD *)a4[3];
  if (v8)
  {
    if (v8 == a4)
    {
      v24 = v23;
      (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v23);
    }
    else
    {
      v24 = (_QWORD *)a4[3];
      a4[3] = 0;
    }
  }
  else
  {
    v24 = 0;
  }
  v9 = llvm::Linker::linkInModule(&v19, &v18, a3, v23);
  v10 = v24;
  if (v24 == v23)
  {
    v11 = (void (**)(_QWORD *))(v23[0] + 32);
    v10 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_11;
    v11 = (void (**)(_QWORD *))(*v24 + 40);
  }
  (*v11)(v10);
LABEL_11:
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    llvm::Module::~Module(v12);
    MEMORY[0x1CAA32FC0](v13);
  }
  v14 = v21;
  if (v22)
  {
    v15 = 16 * v22;
    v16 = (unsigned __int8 **)(v21 + 8);
    do
    {
      if (((unint64_t)*(v16 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v16)
        llvm::MetadataTracking::untrack((uint64_t)v16, *v16);
      v16 += 2;
      v15 -= 16;
    }
    while (v15);
    v14 = v21;
  }
  MEMORY[0x1CAA32FB4](v14, 8);
  sub_1C56D815C(v20);
  return v9;
}

BOOL LLVMLinkModules2(llvm::Module *a1, llvm::Module *a2)
{
  _BOOL8 v2;
  void (**v3)(void);
  llvm::Module *v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v7 = 0;
  v2 = llvm::Linker::linkModules(a1, &v5, 0, v6);
  if (v7 == v6)
  {
    v3 = (void (**)(void))(v6[0] + 32);
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v3 = (void (**)(void))(*v7 + 40);
  }
  (*v3)();
LABEL_6:
  if (v5)
  {
    llvm::Module::~Module(v5);
    MEMORY[0x1CAA32FC0]();
  }
  return v2;
}

void sub_1C59159F4(llvm::GlobalAlias *this, uint64_t *a2)
{
  int v2;
  llvm::GlobalAlias *v4;
  uint64_t v5;
  llvm::PointerType *v6;
  uint64_t *v7;
  llvm::Value *v8;
  _DWORD *v9;
  llvm::PointerType *v10;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;

  v2 = *((unsigned __int8 *)this + 16);
  if (v2 != 2)
  {
    v4 = this;
    if (v2 != 1 || (this = (llvm::GlobalAlias *)llvm::GlobalAlias::getAliaseeObject(this)) != 0)
    {
      if (*((_QWORD *)this + 6))
      {
        v11[0] = *((_QWORD *)this + 6);
        v13 = 0;
        if (sub_1C614F7B0(a2, v11, &v13))
        {
          if (*((_QWORD *)v4 + 1))
          {
            if (*((_BYTE *)v4 + 16) == 3)
            {
              llvm::GlobalVariable::setInitializer((uint64_t)v4, 0);
            }
            else if (*((_BYTE *)v4 + 16))
            {
              v5 = *((_QWORD *)v4 + 5);
              v6 = (llvm::PointerType *)*((_QWORD *)v4 + 3);
              if (v6 && *((_BYTE *)v6 + 8) == 14)
              {
                v12 = 257;
                v7 = (uint64_t *)operator new(0x80uLL);
                v8 = (llvm::Value *)(v7 + 1);
                *((_DWORD *)v7 + 7) = *((_DWORD *)v7 + 7) & 0x38000000 | 0x40000000;
                *v7 = 0;
                llvm::Function::Function(v7 + 1, v6, 0, (llvm::Type *)0xFFFFFFFFLL, (uint64_t)v11, v5);
              }
              else
              {
                v9 = operator new(0x78uLL);
                v8 = (llvm::Value *)(v9 + 8);
                v9[13] = v9[13] & 0x38000000 | 1;
                *(_QWORD *)v9 = 0;
                *((_QWORD *)v9 + 1) = 0;
                *((_QWORD *)v9 + 2) = 0;
                *((_QWORD *)v9 + 3) = v9 + 8;
                v10 = (llvm::PointerType *)*((_QWORD *)v4 + 3);
                v12 = 257;
                llvm::GlobalVariable::GlobalVariable((uint64_t)(v9 + 8), v5, v10, 0, 0, 0, (uint64_t)v11, 0, 0, 0, 0);
              }
              llvm::Value::takeName(v8, v4);
              llvm::Value::doRAUW(v4, v8, (llvm::Value *)1);
              llvm::GlobalAlias::eraseFromParent(v4);
            }
            else
            {
              sub_1C6291B14(v4);
            }
          }
          else
          {
            llvm::GlobalValue::eraseFromParent(v4);
          }
        }
      }
    }
  }
}

uint64_t sub_1C5915B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  llvm::GlobalValue *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v16;
  int v17;
  char v18;
  uint64_t result;
  unsigned int v20;
  BOOL v21;
  int v22;
  int v24;
  int v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  char v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v37;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v46;
  BOOL v47;
  int v48;
  int v49;
  uint64_t AliaseeObject;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  char hasExternalWeakLinkage;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;

  v6 = sub_1C5916038(**(_QWORD **)a1, (uint64_t ***)a2);
  v7 = (llvm::GlobalValue *)v6;
  v8 = *(_DWORD *)(a1 + 64);
  if ((v8 & 2) != 0)
  {
    v9 = *(_DWORD *)(a2 + 32) & 0xF;
    if (v9 != 6)
    {
      if (!v6)
        return 0;
      if (*(_BYTE *)(v6 + 16))
      {
        if (*(_BYTE *)(v6 + 16) != 3 || (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) != 0)
          return 0;
      }
      else if (*(_QWORD *)(v6 + 72) != v6 + 72 || (*(_BYTE *)(v6 + 34) & 0x80) != 0)
      {
        return 0;
      }
LABEL_5:
      if ((v9 - 6) < 3)
      {
LABEL_85:
        v18 = 1;
        goto LABEL_86;
      }
      v10 = *(unsigned __int8 *)(v6 + 16);
      v11 = *(unsigned __int8 *)(a2 + 16);
      if (v11 == 3)
        v12 = a2;
      else
        v12 = 0;
      v13 = v10 == 3;
      if (v10 == 3)
        v14 = v6;
      else
        v14 = 0;
      if (!v13 || v11 != 3)
      {
LABEL_56:
        v33 = *(_DWORD *)(v6 + 32);
        v34 = (v33 >> 4) & 3;
        v35 = (*(_DWORD *)(a2 + 32) >> 4) & 3;
        if (v35 == 2 || v34 == 2)
          v37 = 32;
        else
          v37 = 0;
        if (v35 == 1 || v34 == 1)
          v39 = 16;
        else
          v39 = v37;
        v40 = v39 | v33 & 0xFFFFFFCF;
        *(_DWORD *)(v6 + 32) = v40;
        if ((v33 & 0xF) - 7 >= 2)
        {
          if (!v39 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v6) & 1) != 0)
            goto LABEL_70;
          v40 = *((_DWORD *)v7 + 8);
        }
        *((_DWORD *)v7 + 8) = v40 | 0x4000;
LABEL_70:
        v41 = *(_DWORD *)(a2 + 32);
        v42 = v41 & 0xFFFFFFCF | v39;
        *(_DWORD *)(a2 + 32) = v42;
        if ((v41 & 0xFu) - 7 < 2
          || v39
          && (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2),
              v42 = *(_DWORD *)(a2 + 32),
              (hasExternalWeakLinkage & 1) == 0))
        {
          v42 |= 0x4000u;
          *(_DWORD *)(a2 + 32) = v42;
        }
        v43 = *((_DWORD *)v7 + 8);
        v44 = v42 >> 6;
        if (v43 >> 6 == 1 || v44 == 1)
          v46 = 64;
        else
          v46 = 128;
        if (v43 >> 6)
          v47 = v44 == 0;
        else
          v47 = 1;
        if (v47)
          v48 = 0;
        else
          v48 = v46;
        *((_DWORD *)v7 + 8) = v48 | v43 & 0xFFFFFF3F;
        *(_DWORD *)(a2 + 32) = v48 | *(_DWORD *)(a2 + 32) & 0xFFFFFF3F;
        goto LABEL_85;
      }
      if (v14)
        v16 = *(_BYTE *)(v14 + 16) == 3;
      else
        v16 = 0;
      if (v16)
      {
        if ((*(_DWORD *)(v14 + 20) & 0x7FFFFFF) != 0)
          goto LABEL_40;
      }
      else if (*(_BYTE *)(v14 + 16) || *(_QWORD *)(v14 + 72) != v14 + 72 || (*(_BYTE *)(v14 + 34) & 0x80) != 0)
      {
        goto LABEL_40;
      }
      if (*(_BYTE *)(v12 + 16))
      {
        if (*(_BYTE *)(v12 + 16) == 3 && (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_114;
      }
      else if (*(_QWORD *)(v12 + 72) == v12 + 72 && (*(_BYTE *)(v12 + 34) & 0x80) == 0)
      {
LABEL_114:
        if ((*(_BYTE *)(v14 + 80) & 1) == 0 || (*(_BYTE *)(v12 + 80) & 1) == 0)
        {
          *(_BYTE *)(v14 + 80) &= ~1u;
          *(_BYTE *)(v12 + 80) &= ~1u;
        }
      }
LABEL_40:
      v24 = *(_DWORD *)(v14 + 32);
      if ((v24 & 0xF) == 0xA)
      {
        v25 = *(_DWORD *)(v12 + 32);
        if ((v25 & 0xF) == 0xA)
        {
          v26 = (BYTE2(v25) & 0x3F) - 1;
          if ((v25 & 0x3F0000) == 0)
            v26 = 0;
          v27 = 1 << v26;
          if ((v25 & 0x3F0000) == 0)
            v27 = 0;
          v28 = (v24 & 0x3F0000) == 0;
          v29 = (BYTE2(v24) & 0x3F) - 1;
          if (v28)
            v29 = 0;
          v30 = 1 << v29;
          if (v28)
            v30 = 0;
          if (v30 <= v27)
            v30 = v27;
          v31 = (__clz(__rbit64(v30)) << 16) + 0x10000;
          if (v30)
            v32 = v31;
          else
            v32 = 0;
          *(_DWORD *)(v12 + 32) = v32 | v25 & 0xFFC0FFFF;
          *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 32) & 0xFFC0FFFF | v32;
        }
      }
      goto LABEL_56;
    }
  }
  if (v6)
  {
    v9 = *(_DWORD *)(a2 + 32) & 0xF;
    goto LABEL_5;
  }
  if ((v8 & 1) != 0)
  {
    v18 = 0;
    goto LABEL_86;
  }
  v17 = *(_DWORD *)(a2 + 32);
  if ((v17 & 0xE) == 2)
    return 0;
  v18 = 0;
  result = 0;
  v20 = v17 & 0xF;
  v21 = v20 > 8;
  v22 = (1 << v20) & 0x182;
  if (v21 || v22 == 0)
  {
LABEL_86:
    v49 = *(unsigned __int8 *)(a2 + 16);
    if (*(_BYTE *)(a2 + 16))
    {
      if (v49 != 3)
      {
        if (v49 == 2)
          goto LABEL_118;
        AliaseeObject = a2;
        if (v49 == 1)
        {
          AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)a2);
          if (!AliaseeObject)
            goto LABEL_118;
        }
        goto LABEL_95;
      }
      if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 0)
        return 0;
    }
    else if (*(_QWORD *)(a2 + 72) == a2 + 72 && (*(_BYTE *)(a2 + 34) & 0x80) == 0)
    {
      return 0;
    }
    AliaseeObject = a2;
LABEL_95:
    v51 = *(_QWORD *)(AliaseeObject + 48);
    v58 = v51;
    if (v51)
    {
      v52 = *(_QWORD *)(a1 + 136);
      v59 = 0;
      if ((sub_1C49F21C0(v52, *(_DWORD *)(a1 + 152), v51, &v59) & 1) != 0)
      {
        v53 = *((_DWORD *)v59 + 3);
        if (!v53)
          return 0;
LABEL_119:
        LOBYTE(v58) = 1;
        if ((v18 & 1) == 0)
          goto LABEL_129;
        if ((sub_1C5916100(a1, (BOOL *)&v58, v7, (uint64_t ***)a2) & 1) != 0)
          return 1;
        v56 = v58;
        if (v53 == 2)
        {
          if (!(_BYTE)v58)
            v7 = (llvm::GlobalValue *)a2;
          v57 = *(unsigned int *)(a3 + 8);
          if (v57 >= *(_DWORD *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v57 + 1, 8);
            LODWORD(v57) = *(_DWORD *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v57) = v7;
          ++*(_DWORD *)(a3 + 8);
        }
        if (v56)
        {
LABEL_129:
          v59 = (_QWORD *)a2;
          sub_1C56D6B88((_QWORD *)(a1 + 16), &v59);
        }
        return 0;
      }
      v54 = sub_1C59165F0(a1 + 136, &v58, v59);
      *v54 = v51;
      v54[1] = 0;
      return 0;
    }
LABEL_118:
    v53 = 0;
    goto LABEL_119;
  }
  return result;
}

uint64_t sub_1C5916038(uint64_t a1, uint64_t ***a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ****v7;
  uint64_t ***v8;
  int v9;
  int v10;

  if ((*((_BYTE *)a2 + 23) & 0x10) == 0 || ((_DWORD)a2[4] & 0xFu) - 7 < 2)
    return 0;
  v3 = ***a2;
  v4 = *(_QWORD *)(v3 + 152);
  v5 = *(unsigned int *)(v3 + 168);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (uint64_t ****)(v4 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_12;
    v9 = 1;
    while (v8 != (uint64_t ***)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(uint64_t ****)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = (uint64_t ****)(v4 + 16 * v6);
        goto LABEL_12;
      }
    }
  }
  v7 = (uint64_t ****)(v4 + 16 * v5);
LABEL_12:
  result = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), (unsigned __int8 *)v7[1] + 16, (unint64_t)*v7[1]);
  if (result)
  {
    if ((*(_DWORD *)(result + 32) & 0xFu) - 7 < 2)
      return 0;
  }
  return result;
}

uint64_t sub_1C5916100(uint64_t a1, BOOL *a2, llvm::GlobalValue *this, uint64_t ***a4)
{
  int v6;
  int v7;
  int v9;
  unsigned int v10;
  uint64_t result;
  BOOL v12;
  _BOOL4 v13;
  _BOOL4 v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  const char *v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ****v26;
  uint64_t ***v27;
  int v28;
  int v29;
  uint64_t ***v30;
  char *v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t v34;
  _QWORD v35[4];
  __int16 v36;
  _QWORD v37[4];
  __int16 v38;
  uint64_t (**v39)(llvm::DiagnosticInfo *__hidden);
  int v40;
  char v41;
  _QWORD *v42;

  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    goto LABEL_4;
  v6 = *((_DWORD *)a4 + 8);
  v7 = v6 & 0xF;
  if (v7 == 6)
    goto LABEL_4;
  v9 = *((_DWORD *)this + 8);
  v10 = v9 & 0xF;
  if (v10 == 6)
    goto LABEL_4;
  if (v7 == 1)
  {
    if (v10 != 1)
    {
      if (*((_BYTE *)this + 16))
      {
        LOBYTE(v13) = *((_BYTE *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0;
      }
      else
      {
        v15 = (v9 & 0x800000) == 0;
        LOBYTE(v13) = *((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72) && v15;
      }
      goto LABEL_33;
    }
LABEL_20:
    LOBYTE(v13) = 1;
    goto LABEL_33;
  }
  if (*((_BYTE *)a4 + 16))
    v14 = *((_BYTE *)a4 + 16) == 3 && (*((_DWORD *)a4 + 5) & 0x7FFFFFF) == 0;
  else
    v14 = a4[9] == (uint64_t **)(a4 + 9) && (v6 & 0x800000) == 0;
  if (v10 == 1)
  {
    if (!v14)
      goto LABEL_4;
    goto LABEL_20;
  }
  if (*((_BYTE *)this + 16))
    v13 = *((_BYTE *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0;
  else
    v13 = *((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72) && (v9 & 0x800000) == 0;
  if (v14)
  {
LABEL_33:
    if ((v6 & 0x300) == 0x100)
    {
      result = 0;
      *a2 = v13;
      return result;
    }
    if (!llvm::GlobalValue::hasExternalWeakLinkage(this))
    {
      if (*((_BYTE *)a4 + 16))
      {
        if (*((_BYTE *)a4 + 16) == 3 && (*((_DWORD *)a4 + 5) & 0x7FFFFFF) == 0)
          goto LABEL_51;
      }
      else if (a4[9] == (uint64_t **)(a4 + 9) && (*((_BYTE *)a4 + 34) & 0x80) == 0)
      {
        goto LABEL_51;
      }
      if (*((_BYTE *)this + 16))
      {
        if (*((_BYTE *)this + 16) == 3)
        {
          v16 = (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0;
          goto LABEL_63;
        }
      }
      else if (*((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72))
      {
        v16 = (*((_BYTE *)this + 34) & 0x80) == 0;
LABEL_63:
        v12 = v16;
        goto LABEL_66;
      }
LABEL_51:
      v12 = 0;
LABEL_66:
      result = 0;
      goto LABEL_5;
    }
LABEL_4:
    result = 0;
    v12 = 1;
LABEL_5:
    *a2 = v12;
    return result;
  }
  if (v13)
    goto LABEL_4;
  if ((v7 - 2) < 4 || v7 == 9)
  {
    if ((v6 & 0xE) == 4 && (v9 & 0xE) == 2)
      goto LABEL_4;
    goto LABEL_44;
  }
  if (v7 == 10)
  {
    if ((v9 & 0xE) == 4 || (v9 & 0xE) == 2)
      goto LABEL_4;
    if (v10 == 10)
    {
      v17 = *((_QWORD *)this + 5) + 272;
      v19 = sub_1C4E3D148(v17, *((_QWORD *)this + 3));
      if ((_DWORD)v18 == 1)
      v21 = sub_1C4E3D148(v17, (uint64_t)a4[3]);
      if ((_DWORD)v20 == 1)
      result = 0;
      v12 = v21 > v19;
      goto LABEL_5;
    }
LABEL_44:
    result = 0;
    *a2 = 0;
    return result;
  }
  if (v10 <= 0xA)
  {
    v12 = 1;
    if (((1 << v10) & 0x63C) != 0)
      goto LABEL_66;
  }
  if ((*((_BYTE *)a4 + 23) & 0x10) == 0)
  {
    v32 = 0;
    v31 = &byte_1C871356D;
    goto LABEL_78;
  }
  v22 = ***a4;
  v23 = *(_QWORD *)(v22 + 152);
  v24 = *(unsigned int *)(v22 + 168);
  if (!(_DWORD)v24)
    goto LABEL_76;
  LODWORD(v25) = (v24 - 1) & ((a4 >> 4) ^ (a4 >> 9));
  v26 = (uint64_t ****)(v23 + 16 * v25);
  v27 = *v26;
  if (*v26 != a4)
  {
    v28 = 1;
    while (v27 != (uint64_t ***)-4096)
    {
      v29 = v25 + v28++;
      v25 = v29 & (v24 - 1);
      v27 = *(uint64_t ****)(v23 + 16 * v25);
      if (v27 == a4)
      {
        v26 = (uint64_t ****)(v23 + 16 * v25);
        goto LABEL_77;
      }
    }
LABEL_76:
    v26 = (uint64_t ****)(v23 + 16 * v24);
  }
LABEL_77:
  v30 = v26[1];
  v33 = *v30;
  v31 = (char *)(v30 + 2);
  v32 = v33;
LABEL_78:
  v36 = 1283;
  v35[0] = "Linking globals named '";
  v35[2] = v31;
  v35[3] = v32;
  v37[0] = v35;
  v37[2] = "': symbol multiply defined!";
  v38 = 770;
  v34 = **(_QWORD **)(a1 + 8);
  v40 = 3;
  v41 = 0;
  v39 = &off_1E817F1D8;
  v42 = v37;
  llvm::LLVMContext::diagnose(v34, (const llvm::DiagnosticInfo *)&v39);
  return 1;
}

uint64_t sub_1C59164D8(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, unint64_t a4, unsigned __int8 **a5)
{
  unsigned __int8 *AliaseeObject;
  int v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v15;
  unsigned __int8 *v16;
  unint64_t v17;
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  uint64_t (**v21)(llvm::DiagnosticInfo *__hidden);
  int v22;
  char v23;
  _QWORD *v24;

  AliaseeObject = (unsigned __int8 *)sub_1C4FB7E80(a2, a3, a4);
  if (!AliaseeObject)
    goto LABEL_5;
  v10 = AliaseeObject[16];
  if (v10 == 1)
  {
    AliaseeObject = (unsigned __int8 *)llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)AliaseeObject);
    if (!AliaseeObject)
    {
      v18 = 1283;
      v15 = "Linking COMDATs named '";
      v16 = a3;
      v17 = a4;
      v12 = "': COMDAT key involves incomputable alias size.";
      goto LABEL_6;
    }
    v10 = AliaseeObject[16];
  }
  if (v10 != 3)
  {
LABEL_5:
    *a5 = 0;
    v18 = 1283;
    v15 = "Linking COMDATs named '";
    v16 = a3;
    v17 = a4;
    v12 = "': GlobalVariable required for data dependent selection!";
LABEL_6:
    v19[0] = &v15;
    v19[2] = v12;
    v20 = 770;
    v13 = **(_QWORD **)(a1 + 8);
    v22 = 3;
    v23 = 0;
    v21 = &off_1E817F1D8;
    v24 = v19;
    llvm::LLVMContext::diagnose(v13, (const llvm::DiagnosticInfo *)&v21);
    return 1;
  }
  v11 = 0;
  *a5 = AliaseeObject;
  return v11;
}

_QWORD *sub_1C59165F0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C59166A0(a1, v6);
  v8 = 0;
  sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C59166A0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)(v4 + 8);
      do
      {
        v14 = *(v13 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = v14;
          v15[1] = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1C59167DC(uint64_t *a1, llvm::GlobalAlias *AliaseeObject, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::GlobalAlias **v12;
  llvm::GlobalAlias *v13;
  int v14;
  int v15;
  llvm::GlobalAlias *v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t v19;
  int v20;
  uint64_t result;
  uint64_t (**v22)(void);
  _QWORD *v23;
  uint64_t ****v24;
  uint64_t ****v25;
  uint64_t ***v26;
  llvm::GlobalValue *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ****v32;
  uint64_t ***v33;
  int v34;
  int v35;
  uint64_t ***v36;
  unsigned __int8 *v37;
  size_t v38;
  size_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  _QWORD v45[3];
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)a3[3];
  if (v5)
  {
    if (v5 == a3)
    {
      v46 = v45;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v45);
    }
    else
    {
      v46 = (_QWORD *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    v46 = 0;
  }
  v6 = *a1;
  v7 = (*((_DWORD *)AliaseeObject + 8) & 0xE) == 2 || (*((_DWORD *)AliaseeObject + 8) & 0xF) == 1;
  if (!v7 && (*(_BYTE *)(v6 + 64) & 2) == 0)
    goto LABEL_26;
  if (*(_QWORD *)(v6 + 128))
  {
    if ((*((_BYTE *)AliaseeObject + 23) & 0x10) == 0)
    {
      v18 = 0;
      v17 = (unsigned __int8 *)&byte_1C871356D;
      goto LABEL_21;
    }
    v8 = ***(_QWORD ***)AliaseeObject;
    v9 = *(_QWORD *)(v8 + 152);
    v10 = *(unsigned int *)(v8 + 168);
    if ((_DWORD)v10)
    {
      LODWORD(v11) = (v10 - 1) & ((AliaseeObject >> 4) ^ (AliaseeObject >> 9));
      v12 = (llvm::GlobalAlias **)(v9 + 16 * v11);
      v13 = *v12;
      if (*v12 == AliaseeObject)
      {
LABEL_20:
        v16 = v12[1];
        v19 = *(_QWORD *)v16;
        v17 = (unsigned __int8 *)v16 + 16;
        v18 = v19;
LABEL_21:
        sub_1C4F024D8((llvm::StringMapImpl *)(v6 + 72), v17, v18);
        goto LABEL_22;
      }
      v14 = 1;
      while (v13 != (llvm::GlobalAlias *)-4096)
      {
        v15 = v11 + v14++;
        v11 = v15 & (v10 - 1);
        v13 = *(llvm::GlobalAlias **)(v9 + 16 * v11);
        if (v13 == AliaseeObject)
        {
          v12 = (llvm::GlobalAlias **)(v9 + 16 * v11);
          goto LABEL_20;
        }
      }
    }
    v12 = (llvm::GlobalAlias **)(v9 + 16 * v10);
    goto LABEL_20;
  }
LABEL_22:
  if (!v46)
  {
LABEL_55:
    sub_1C485C2F0();
    return sub_1C5916AF0(v40, v41, v42);
  }
  (*(void (**)(_QWORD *, llvm::GlobalAlias *))(*v46 + 48))(v46, AliaseeObject);
  v20 = *((unsigned __int8 *)AliaseeObject + 16);
  if (v20 != 2
    && (v20 != 1 || (AliaseeObject = (llvm::GlobalAlias *)llvm::GlobalAlias::getAliaseeObject(AliaseeObject)) != 0))
  {
    v44 = *((_QWORD *)AliaseeObject + 6);
    if (v44)
    {
      v23 = sub_1C61D0AA8(v6 + 160, &v44);
      v24 = (uint64_t ****)v23[1];
      v25 = (uint64_t ****)v23[2];
      if (v24 != v25)
      {
        while (1)
        {
          v26 = *v24;
          v27 = (llvm::GlobalValue *)sub_1C5916038(**(_QWORD **)v6, *v24);
          v43 = 1;
          if (!v27)
            break;
          if ((sub_1C5916100(v6, (BOOL *)&v43, v27, v26) & 1) != 0)
            goto LABEL_26;
          if (v43)
            break;
LABEL_51:
          if (++v24 == v25)
            goto LABEL_26;
        }
        if (!*(_QWORD *)(v6 + 128))
        {
LABEL_49:
          if (!v46)
            goto LABEL_55;
          (*(void (**)(_QWORD *, uint64_t ***))(*v46 + 48))(v46, v26);
          goto LABEL_51;
        }
        if ((*((_BYTE *)v26 + 23) & 0x10) == 0)
        {
          v38 = 0;
          v37 = (unsigned __int8 *)&byte_1C871356D;
          goto LABEL_48;
        }
        v28 = ***v26;
        v29 = *(_QWORD *)(v28 + 152);
        v30 = *(unsigned int *)(v28 + 168);
        if ((_DWORD)v30)
        {
          LODWORD(v31) = (v30 - 1) & ((v26 >> 4) ^ (v26 >> 9));
          v32 = (uint64_t ****)(v29 + 16 * v31);
          v33 = *v32;
          if (*v32 == v26)
          {
LABEL_47:
            v36 = v32[1];
            v39 = (size_t)*v36;
            v37 = (unsigned __int8 *)(v36 + 2);
            v38 = v39;
LABEL_48:
            sub_1C4F024D8((llvm::StringMapImpl *)(v6 + 72), v37, v38);
            goto LABEL_49;
          }
          v34 = 1;
          while (v33 != (uint64_t ***)-4096)
          {
            v35 = v31 + v34++;
            v31 = v35 & (v30 - 1);
            v33 = *(uint64_t ****)(v29 + 16 * v31);
            if (v33 == v26)
            {
              v32 = (uint64_t ****)(v29 + 16 * v31);
              goto LABEL_47;
            }
          }
        }
        v32 = (uint64_t ****)(v29 + 16 * v30);
        goto LABEL_47;
      }
    }
  }
LABEL_26:
  result = (uint64_t)v46;
  if (v46 == v45)
  {
    v22 = (uint64_t (**)(void))(v45[0] + 32);
  }
  else
  {
    if (!v46)
      return result;
    v22 = (uint64_t (**)(void))(*v46 + 40);
  }
  return (*v22)();
}

uint64_t sub_1C5916AF0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  void **v11;
  __int16 v12;
  uint64_t (**v13)(llvm::DiagnosticInfo *__hidden);
  int v14;
  char v15;
  void ***v16;

  result = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  v7 = *a2;
  *a2 = 0;
  if ((_DWORD)result)
  {
    v8 = **(_QWORD **)a3;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 24))(__p, v7);
    v12 = 260;
    v11 = __p;
    v14 = 3;
    v15 = 0;
    v13 = &off_1E817F1D8;
    v16 = &v11;
    llvm::LLVMContext::diagnose(v8, (const llvm::DiagnosticInfo *)&v13);
    if (v10 < 0)
      operator delete(__p[0]);
    **(_BYTE **)(a3 + 8) = 1;
    *a1 = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    *a1 = v7;
  }
  return result;
}

uint64_t llvm::ConstantPool::emitEntries(uint64_t result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;

  if (*(_DWORD *)(result + 8))
  {
    v3 = (unsigned int *)result;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 232))(a2, 0);
    v4 = v3[2];
    if ((_DWORD)v4)
    {
      v5 = 32 * v4;
      v6 = (unsigned int *)(*(_QWORD *)v3 + 16);
      do
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 632))(a2, *v6, 0, 1, 0);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 192))(a2, *((_QWORD *)v6 - 2), 0);
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 504))(a2, *((_QWORD *)v6 - 1), *v6, *((_QWORD *)v6 + 1));
        v6 += 8;
        v5 -= 32;
      }
      while (v5);
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 232))(a2, 4);
    v3[2] = 0;
  }
  return result;
}

unint64_t llvm::ConstantPool::addEntry(uint64_t a1, _BYTE *a2, uint64_t a3, int a4, uint64_t a5)
{
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t TempSymbol;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  _OWORD *v21;
  __int128 v22;
  unint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v34;
  BOOL v35;
  char *v36;
  _QWORD v37[2];
  int v38;
  uint64_t v39;
  __int16 v40;

  if (*a2 == 1)
    v10 = a2;
  else
    v10 = 0;
  if (!v10)
    goto LABEL_15;
  v11 = *(_QWORD **)(a1 + 152);
  if (!v11)
    goto LABEL_15;
  v12 = *((_QWORD *)v10 + 2);
  v13 = a1 + 152;
  do
  {
    v14 = v11[4];
    v15 = v14 < v12;
    if (v14 >= v12)
      v16 = v11;
    else
      v16 = v11 + 1;
    if (!v15)
      v13 = (uint64_t)v11;
    v11 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 != a1 + 152 && v12 >= *(_QWORD *)(v13 + 32))
    return *(_QWORD *)(v13 + 40);
LABEL_15:
  v37[0] = "tmp";
  v40 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(a3, (uint64_t)v37, 1);
  v37[0] = TempSymbol;
  v37[1] = a2;
  v38 = a4;
  v39 = a5;
  v18 = *(unsigned int *)(a1 + 8);
  v19 = *(_QWORD *)a1;
  v20 = (char *)v37;
  if (v18 >= *(_DWORD *)(a1 + 12))
  {
    v34 = v18 + 1;
    v35 = v19 + 32 * v18 > (unint64_t)v37;
    if (v19 <= (unint64_t)v37 && v35)
    {
      v36 = (char *)v37 - v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v34, 32);
      v19 = *(_QWORD *)a1;
      v20 = &v36[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v34, 32);
      v19 = *(_QWORD *)a1;
      v20 = (char *)v37;
    }
  }
  v21 = (_OWORD *)(v19 + 32 * *(unsigned int *)(a1 + 8));
  v22 = *((_OWORD *)v20 + 1);
  *v21 = *(_OWORD *)v20;
  v21[1] = v22;
  ++*(_DWORD *)(a1 + 8);
  v23 = sub_1C484358C(a3 + 192, 24, 3);
  v24 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 152) + 18) << 16;
  *(_BYTE *)v23 = 2;
  *(_DWORD *)(v23 + 1) = v24 | (*(unsigned __int8 *)(v23 + 4) << 24);
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = TempSymbol;
  if (v10)
  {
    v25 = (uint64_t *)*((_QWORD *)v10 + 2);
    v27 = (uint64_t **)(a1 + 152);
    v26 = *(uint64_t **)(a1 + 152);
    if (v26)
    {
      while (1)
      {
        while (1)
        {
          v28 = (uint64_t **)v26;
          v29 = (uint64_t *)v26[4];
          if ((uint64_t)v29 <= (uint64_t)v25)
            break;
          v26 = *v28;
          v27 = v28;
          if (!*v28)
            goto LABEL_25;
        }
        if ((uint64_t)v29 >= (uint64_t)v25)
          break;
        v26 = v28[1];
        if (!v26)
        {
          v27 = v28 + 1;
          goto LABEL_25;
        }
      }
    }
    else
    {
      v28 = (uint64_t **)(a1 + 152);
LABEL_25:
      v30 = (uint64_t *)v28;
      v28 = (uint64_t **)operator new(0x30uLL);
      v28[4] = v25;
      v28[5] = 0;
      *v28 = 0;
      v28[1] = 0;
      v28[2] = v30;
      *v27 = (uint64_t *)v28;
      v31 = **(_QWORD **)(a1 + 144);
      v32 = (uint64_t *)v28;
      if (v31)
      {
        *(_QWORD *)(a1 + 144) = v31;
        v32 = *v27;
      }
      sub_1C4768E74(*(uint64_t **)(a1 + 152), v32);
      ++*(_QWORD *)(a1 + 160);
    }
    v28[5] = (uint64_t *)v23;
  }
  return v23;
}

BOOL llvm::ConstantPool::empty(llvm::ConstantPool *this)
{
  return *((_DWORD *)this + 2) == 0;
}

void llvm::ConstantPool::clearCache(llvm::ConstantPool *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 152);
  sub_1C49F3440(*((_QWORD **)this + 19));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
}

uint64_t llvm::AssemblerConstantPools::getConstantPool(llvm::AssemblerConstantPools *this, llvm::MCSection *a2)
{
  uint64_t v3;

  v3 = sub_1C5916F60((uint64_t)this, (uint64_t)a2);
  if (*((_QWORD *)this + 4) == v3)
    return 0;
  else
    return v3 + 8;
}

uint64_t sub_1C5916F60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = 0;
  if (!sub_1C61252B8((uint64_t *)a1, &v4, &v5) || v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 176 * *(unsigned int *)(v5 + 8);
}

uint64_t llvm::AssemblerConstantPools::getOrCreateConstantPool(llvm::AssemblerConstantPools *this, llvm::MCSection *a2)
{
  llvm::MCSection *v3;

  v3 = a2;
  return sub_1C5916FEC((uint64_t)this, &v3);
}

uint64_t sub_1C5916FEC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v14;
  int v15;
  BOOL v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  int v48;
  void *v49;
  uint64_t v50;
  _OWORD v51[8];
  _QWORD **v52;
  _QWORD *v53[3];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  _QWORD **v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)*a2;
  v47 = (_QWORD *)*a2;
  v48 = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)a1;
    v7 = v5 - 1;
    v8 = (v5 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    v9 = (_QWORD *)(*(_QWORD *)a1 + 16 * v8);
    v10 = (_QWORD *)*v9;
    if (v4 == (_QWORD *)*v9)
    {
LABEL_3:
      v11 = *(_DWORD *)(v6 + 16 * v8 + 8);
      v12 = *(_QWORD *)(a1 + 24);
      return v12 + 176 * v11 + 8;
    }
    v14 = 0;
    v15 = 1;
    while (v10 != (_QWORD *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v10 == (_QWORD *)-8192;
      if (v16)
        v14 = v9;
      v17 = v8 + v15++;
      v8 = v17 & v7;
      v9 = (_QWORD *)(v6 + 16 * v8);
      v10 = (_QWORD *)*v9;
      if (v4 == (_QWORD *)*v9)
        goto LABEL_3;
    }
    if (v14)
      v18 = v14;
    else
      v18 = v9;
  }
  else
  {
    v18 = 0;
  }
  v19 = sub_1C59175D0(a1, (uint64_t)&v47, (uint64_t *)&v47, v18);
  *v19 = v47;
  *((_DWORD *)v19 + 2) = v48;
  memset(v51, 0, sizeof(v51));
  v49 = v51;
  v50 = 0x400000000;
  v53[0] = 0;
  v53[1] = 0;
  v52 = v53;
  v20 = (_QWORD *)*a2;
  v53[2] = *(_QWORD **)a2;
  v54 = v56;
  v55 = 0x400000000;
  v58 = 0;
  v59 = 0;
  v57 = &v58;
  v22 = *(char **)(a1 + 32);
  v21 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v22 >= v21)
  {
    v26 = *(char **)(a1 + 24);
    v27 = 0x2E8BA2E8BA2E8BA3 * ((v22 - v26) >> 4) + 1;
    if (v27 > 0x1745D1745D1745DLL)
      abort();
    v28 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v21 - (_QWORD)v26) >> 4);
    if (2 * v28 > v27)
      v27 = 2 * v28;
    if (v28 >= 0xBA2E8BA2E8BA2ELL)
      v29 = 0x1745D1745D1745DLL;
    else
      v29 = v27;
    if (v29 > 0x1745D1745D1745DLL)
      sub_1C4764EE4();
    v30 = 176 * v29;
    v31 = (char *)operator new(176 * v29);
    v32 = &v31[16 * ((v22 - v26) >> 4)];
    v33 = &v31[v30];
    *(_QWORD *)v32 = v20;
    *((_QWORD *)v32 + 1) = v32 + 24;
    *((_QWORD *)v32 + 2) = 0x400000000;
    *((_QWORD *)v32 + 21) = 0;
    *((_QWORD *)v32 + 20) = 0;
    *((_QWORD *)v32 + 19) = v32 + 160;
    v34 = v32 + 176;
    if (v22 == v26)
    {
      *(_QWORD *)(a1 + 24) = v32;
      *(_QWORD *)(a1 + 32) = v34;
      *(_QWORD *)(a1 + 40) = v33;
    }
    else
    {
      v46 = v33;
      v35 = 0;
      do
      {
        v36 = &v32[v35];
        v37 = &v22[v35];
        v38 = *(_QWORD *)&v22[v35 - 176];
        *(_QWORD *)&v32[v35 - 168] = &v32[v35 - 152];
        v39 = (uint64_t)&v32[v35 - 168];
        *(_QWORD *)(v39 - 8) = v38;
        *(_QWORD *)(v39 + 8) = 0x400000000;
        if (*(_DWORD *)&v22[v35 - 160])
          sub_1C4AC3E94(v39, (uint64_t)(v37 - 168));
        *((_QWORD *)v36 - 3) = *((_QWORD *)v37 - 3);
        v40 = v37 - 16;
        v41 = *((_QWORD *)v37 - 2);
        *((_QWORD *)v36 - 2) = v41;
        v42 = v36 - 16;
        v43 = *((_QWORD *)v37 - 1);
        *((_QWORD *)v36 - 1) = v43;
        if (v43)
        {
          *(_QWORD *)(v41 + 16) = v42;
          *((_QWORD *)v37 - 3) = v40;
          *(_QWORD *)v40 = 0;
          *((_QWORD *)v37 - 1) = 0;
        }
        else
        {
          *((_QWORD *)v36 - 3) = v42;
        }
        v35 -= 176;
      }
      while (&v22[v35] != v26);
      v22 = *(char **)(a1 + 24);
      v44 = *(char **)(a1 + 32);
      *(_QWORD *)(a1 + 24) = &v32[v35];
      *(_QWORD *)(a1 + 32) = v34;
      for (*(_QWORD *)(a1 + 40) = v46; v44 != v22; v44 -= 176)
      {
        sub_1C49F3440(*((_QWORD **)v44 - 2));
        v45 = (char *)*((_QWORD *)v44 - 21);
        if (v44 - 152 != v45)
          free(v45);
      }
    }
    if (v22)
      operator delete(v22);
  }
  else
  {
    *(_QWORD *)v22 = v20;
    *((_QWORD *)v22 + 1) = v22 + 24;
    *((_QWORD *)v22 + 2) = 0x400000000;
    if ((_DWORD)v55)
      sub_1C4AC3E94((uint64_t)(v22 + 8), (uint64_t)&v54);
    *((_QWORD *)v22 + 19) = v57;
    v23 = v58;
    *((_QWORD *)v22 + 20) = v58;
    v24 = v22 + 160;
    v25 = v59;
    *((_QWORD *)v22 + 21) = v59;
    if (v25)
    {
      v23[2] = v24;
      v57 = &v58;
      v58 = 0;
      v59 = 0;
    }
    else
    {
      *((_QWORD *)v22 + 19) = v24;
    }
    v34 = v22 + 176;
  }
  *(_QWORD *)(a1 + 32) = v34;
  sub_1C49F3440(v58);
  if (v54 != v56)
    free(v54);
  sub_1C49F3440(v53[0]);
  if (v49 != v51)
    free(v49);
  v12 = *(_QWORD *)(a1 + 24);
  v11 = -1171354717 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v12) >> 4) - 1;
  *((_DWORD *)v19 + 2) = v11;
  return v12 + 176 * v11 + 8;
}

uint64_t llvm::AssemblerConstantPools::emitAll(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(result + 24);
  for (i = *(_QWORD *)(result + 32); v2 != i; v2 += 176)
  {
    if (*(_DWORD *)(v2 + 16))
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 168))(a2, *(_QWORD *)v2, 0);
      result = llvm::ConstantPool::emitEntries(v2 + 8, a2);
    }
  }
  return result;
}

uint64_t llvm::AssemblerConstantPools::emitForCurrentSection(llvm::AssemblerConstantPools *this, llvm::MCStreamer *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *((unsigned int *)a2 + 30);
  if ((_DWORD)v4)
    v5 = *(_QWORD *)(*((_QWORD *)a2 + 14) + 32 * v4 - 32);
  else
    v5 = 0;
  result = sub_1C5916F60((uint64_t)this, v5);
  if (*((_QWORD *)this + 4) != result)
  {
    if (*(_DWORD *)(result + 16))
    {
      v7 = result + 8;
      (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, v5, 0);
      return llvm::ConstantPool::emitEntries(v7, (uint64_t)a2);
    }
  }
  return result;
}

void llvm::AssemblerConstantPools::clearCacheForCurrentSection(llvm::AssemblerConstantPools *this, llvm::MCStreamer *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = *((unsigned int *)a2 + 30);
  if ((_DWORD)v3)
    v4 = *(_QWORD *)(*((_QWORD *)a2 + 14) + 32 * v3 - 32);
  else
    v4 = 0;
  v5 = sub_1C5916F60((uint64_t)this, v4);
  if (*((_QWORD *)this + 4) != v5)
  {
    v6 = (_QWORD *)(v5 + 160);
    sub_1C49F3440(*(_QWORD **)(v5 + 160));
    *(v6 - 1) = v6;
    *v6 = 0;
    v6[1] = 0;
  }
}

unint64_t llvm::AssemblerConstantPools::addEntry(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v9 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v9)
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 112) + 32 * v9 - 32);
  else
    v10 = 0;
  v13 = v10;
  v11 = sub_1C5916FEC(a1, &v13);
  return llvm::ConstantPool::addEntry(v11, a3, *(_QWORD *)(a2 + 8), a4, a5);
}

_QWORD *sub_1C59175D0(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C5917700(a1, v7);
      v17 = 0;
      sub_1C6144EA0((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
  }
  else
  {
    sub_1C5917700(a1, 2 * v7);
    v8 = *a3;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
    v11 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
    v13 = 0;
    v14 = 1;
    while (v11 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v11 == -8192;
      if (v15)
        v13 = a4;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
      v11 = *a4;
      if (v8 == *a4)
        goto LABEL_3;
    }
    if (v13)
      a4 = v13;
  }
  v8 = *a4;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C5917700(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62B4268(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C59177B8(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E817F330;
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 40), 8);
  sub_1C62B4424((unsigned int *)(a1 + 16));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 16), 8);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1C591782C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E817F330;
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 40), 8);
  sub_1C62B4424((unsigned int *)(a1 + 16));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 16), 8);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1CAA32FC0);
}

unsigned int *sub_1C59178B0(uint64_t a1)
{
  *(_BYTE *)(a1 + 64) = 0;
  sub_1C62B4484((unsigned int *)(a1 + 16));
  return sub_1C61446F0((unsigned int *)(a1 + 40));
}

void sub_1C59178DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t Symbol;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int Binding;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  const char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t **v42;
  uint64_t **i;
  uint64_t *v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  _QWORD v58[3];
  __int16 v59;
  uint64_t v60[2];
  const char *v61;
  unint64_t v62;
  __int16 v63;

  v3 = a2[270];
  v56 = a2[271];
  if (v3 != v56)
  {
    v55 = a1 + 40;
    v54 = (void **)(a2 + 7);
    while (1)
    {
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      v7 = *(_QWORD *)(v3 + 8);
      if (v5 && (v8 = memchr(*(void **)(v3 + 16), 64, *(_QWORD *)(v3 + 24))) != 0)
        v9 = (unint64_t)v8 - v6;
      else
        v9 = -1;
      if (v5 >= v9)
        v10 = v9;
      else
        v10 = v5;
      v11 = v6 + v10;
      v12 = v5 - v10;
      if (v5 - v10 >= 3)
      {
        v15 = *(_WORD *)v11 == 16448 && *(_BYTE *)(v11 + 2) == 64;
        v13 = (const char *)(v6 + v10);
        v14 = v5 - v10;
        if (v15)
        {
          v16 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
          if (!v16 && (*(_DWORD *)(v7 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v7 + 8) |= 4u;
            llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v7 + 24));
            *(_QWORD *)v7 = *(_QWORD *)v7 & 7 | v16;
          }
          if (v16)
            v17 = 1;
          else
            v17 = 2;
          v13 = (const char *)(v11 + v17);
          v14 = v12 - v17;
        }
      }
      else
      {
        v13 = (const char *)(v6 + v10);
        v14 = v5 - v10;
      }
      v18 = *a2;
      v60[0] = v6;
      v60[1] = v10;
      v61 = v13;
      v62 = v14;
      v63 = 1285;
      Symbol = llvm::MCContext::getOrCreateSymbol(v18, (uint64_t)v60);
      v20 = Symbol;
      v21 = *(_DWORD *)(Symbol + 8);
      if ((v21 & 8) == 0)
      {
        *(_DWORD *)(Symbol + 8) = v21 | 8;
        v60[0] = Symbol;
        v22 = (unint64_t *)a2[8];
        if ((unint64_t)v22 >= a2[9])
        {
          v23 = sub_1C4DFEA3C(v54, v60);
        }
        else
        {
          *v22 = v20;
          v23 = v22 + 1;
        }
        a2[8] = (uint64_t)v23;
      }
      v24 = *a2;
      v25 = sub_1C484358C(*a2 + 192, 24, 3);
      v26 = *(unsigned __int8 *)(*(_QWORD *)(v24 + 152) + 18) << 16;
      *(_BYTE *)v25 = 2;
      *(_DWORD *)(v25 + 1) = v26 | (*(unsigned __int8 *)(v25 + 4) << 24);
      *(_QWORD *)(v25 + 8) = 0;
      *(_QWORD *)(v25 + 16) = v7;
      *(_QWORD *)(v20 + 24) = v25;
      *(_DWORD *)(v20 + 8) = *(_DWORD *)(v20 + 8) & 0xFFFFE3FF | 0x800;
      *(_QWORD *)v20 &= 7uLL;
      Binding = llvm::MCSymbolELF::getBinding((llvm::MCSymbolELF *)v7);
      if (Binding > 1)
      {
        if (Binding == 2)
          v28 = 16;
        else
          v28 = 24;
      }
      else if (Binding)
      {
        v28 = 8;
      }
      else
      {
        v28 = 0;
      }
      v29 = *(_WORD *)(v20 + 12) & 0xFFE7 | v28 | 0x1000;
      *(_WORD *)(v20 + 12) = v29;
      v30 = *(_WORD *)(v7 + 12) & 0x60 | v29 & 0xFF9F;
      *(_WORD *)(v20 + 12) = v30;
      *(_WORD *)(v20 + 12) = v30 & 0xFC7F | *(_WORD *)(v7 + 12) & 0x380;
      v31 = *(_QWORD *)v7;
      v32 = *(_QWORD *)v7 & 0xFFFFFFFFFFFFFFF8;
      if (!v32 && (*(_DWORD *)(v7 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v7 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v7 + 24));
        v31 = *(_QWORD *)v7 & 7 | v32;
        *(_QWORD *)v7 = v31;
      }
      if (v32 && *(_BYTE *)(v3 + 32))
        goto LABEL_36;
      v33 = v31 & 0xFFFFFFFFFFFFFFF8;
      if ((v31 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v7 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v7 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v7 + 24));
        *(_QWORD *)v7 = *(_QWORD *)v7 & 7 | v33;
      }
      if (v12 >= 2 && !v33 && *(_WORD *)v11 == 16448)
      {
        if (v12 < 3)
          break;
        if (*(_WORD *)v11 != 16448 || *(_BYTE *)(v11 + 2) != 64)
          break;
      }
      if (sub_1C6144BDC(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), v7, v60))
      {
        v60[0] = v7;
        if (sub_1C6180A54(v55, v60)[1] != v20)
        {
          if ((*(_BYTE *)v7 & 4) != 0)
          {
            v40 = *(_QWORD **)(v7 - 8);
            v41 = *v40;
            v35 = (const char *)(v40 + 2);
            v36 = v41;
          }
          else
          {
            v35 = 0;
            v36 = 0;
          }
          v37 = *a2;
          v38 = *(_QWORD *)v3;
          v60[0] = (uint64_t)"multiple versions for ";
          v61 = v35;
          v62 = v36;
          v39 = 1283;
          goto LABEL_60;
        }
      }
      v57 = (const char *)v7;
      v58[0] = v20;
      sub_1C6187718((uint64_t)v60, v55, (uint64_t *)&v57, v58);
LABEL_36:
      v3 += 40;
      if (v3 == v56)
        goto LABEL_64;
    }
    v37 = *a2;
    v38 = *(_QWORD *)v3;
    v59 = 1283;
    v57 = "default version symbol ";
    v58[1] = v6;
    v58[2] = v5;
    v60[0] = (uint64_t)&v57;
    v61 = " must be defined";
    v39 = 770;
LABEL_60:
    v63 = v39;
    llvm::MCContext::reportError(v37, v38, (uint64_t)v60);
    goto LABEL_36;
  }
LABEL_64:
  v42 = *(uint64_t ***)(a1 + 72);
  for (i = *(uint64_t ***)(a1 + 80); v42 != i; ++v42)
  {
    v44 = *v42;
    v60[0] = 0;
    if ((sub_1C6144BDC(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), (uint64_t)v44, v60) & 1) != 0)
    {
      v45 = *(uint64_t **)(v60[0] + 8);
      if (v45)
        *v42 = v45;
    }
    v46 = *v42;
    v47 = **v42;
    v48 = v47 & 0xFFFFFFFFFFFFFFF8;
    if ((v47 & 0xFFFFFFFFFFFFFFF8) == 0 && (v46[1] & 0x1C00) == 0x800)
    {
      *((_DWORD *)v46 + 2) |= 4u;
      llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v46[3]);
      v47 = *v46 & 7 | v48;
      *v46 = v47;
    }
    if (v48)
    {
      v49 = v47 & 0xFFFFFFFFFFFFFFF8;
      if ((v47 & 0xFFFFFFFFFFFFFFF8) == 0 && (v46[1] & 0x1C00) == 0x800)
      {
        *((_DWORD *)v46 + 2) |= 4u;
        llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v46[3]);
        *v46 = *v46 & 7 | v49;
      }
      v50 = *v42;
      if ((_UNKNOWN *)v49 != llvm::MCSymbol::AbsolutePseudoFragment)
      {
        v51 = *v50;
        if ((*v50 & 4) != 0)
        {
          v52 = *(v50 - 1);
          if (*(_QWORD *)v52 >= 2uLL && *(_WORD *)(v52 + 16) == 19502)
          {
            v53 = v51 & 0xFFFFFFFFFFFFFFF8;
            if ((v51 & 0xFFFFFFFFFFFFFFF8) == 0 && (v50[1] & 0x1C00) == 0x800)
            {
              *((_DWORD *)v50 + 2) |= 4u;
              llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v50[3]);
              *v50 = *v50 & 7 | v53;
            }
            v50 = *(uint64_t **)(*(_QWORD *)(v53 + 16) + 8);
            *v42 = v50;
          }
        }
      }
    }
    else
    {
      v50 = *v42;
    }
    *((_DWORD *)v50 + 2) |= 0x200u;
  }
}

void sub_1C5917E50(uint64_t a1, uint64_t *a2, llvm::MCAsmLayout *a3, const llvm::MCFragment *a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  BOOL v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  char v84;
  int v85;
  unsigned int v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  _QWORD v92[4];
  __int16 v93;
  uint64_t v94[4];
  __int16 v95;

  v13 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2[1] + 80))(a2[1], *(unsigned int *)(a5 + 12))+ 16);
  v91 = *((_QWORD *)a4 + 2);
  v14 = a6[2];
  llvm::MCAsmLayout::ensureValid(a3, a4);
  v15 = *((_QWORD *)a4 + 4) + *(unsigned int *)(a5 + 8);
  v16 = *a2;
  v17 = a6[1];
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)v18 & 0xFFFFFFFFFFFFFFF8;
    if (!v20 && (*(_DWORD *)(v18 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v18 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v18 + 24));
      v19 = *(_QWORD *)v18 & 7 | v20;
      *(_QWORD *)v18 = v19;
    }
    if (v20)
    {
      v21 = v19 & 0xFFFFFFFFFFFFFFF8;
      if ((v19 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v18 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v18 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v18 + 24));
        *(_QWORD *)v18 = *(_QWORD *)v18 & 7 | v21;
      }
      if (*(_QWORD *)(v21 + 16) == v91)
      {
        v94[0] = 0;
        v86 = 1;
        sub_1C59415F0(a3, (uint64_t *)v18, 1, v94);
        v89 = v15 + v14 - v94[0];
        goto LABEL_8;
      }
      v37 = *(_QWORD *)(a5 + 16);
      v94[0] = (uint64_t)"Cannot represent a difference across sections";
      v40 = 259;
    }
    else
    {
      v37 = *(_QWORD *)(a5 + 16);
      if ((v19 & 4) != 0)
      {
        v43 = *(uint64_t **)(v18 - 8);
        v44 = *v43;
        v38 = v43 + 2;
        v39 = v44;
      }
      else
      {
        v38 = 0;
        v39 = 0;
      }
      v92[0] = "symbol '";
      v92[2] = v38;
      v92[3] = v39;
      v93 = 1283;
      v94[0] = (uint64_t)v92;
      v94[2] = (uint64_t)"' can not be undefined in a subtraction expression";
      v40 = 770;
    }
    v95 = v40;
    llvm::MCContext::reportError(v16, v37, (uint64_t)v94);
    return;
  }
  v89 = v14;
  v86 = v13 & 1;
LABEL_8:
  v22 = *a6;
  v88 = v15;
  if (!*a6)
  {
    v85 = 0;
    v23 = 0;
LABEL_24:
    v29 = 0;
    v87 = 1;
    goto LABEL_26;
  }
  v23 = *(_QWORD *)(v22 + 16);
  if (!v23)
  {
    v85 = 0;
    goto LABEL_24;
  }
  if ((*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800
    && (*(_DWORD *)(v23 + 8) |= 4u, v24 = *(_QWORD *)(v23 + 24), *(_BYTE *)v24 == 2)
    && *(_WORD *)(v24 + 1) == 29)
  {
    v23 = *(_QWORD *)(v24 + 16);
    if (!v23)
    {
      v87 = 1;
      v29 = 0;
      v85 = 1;
      goto LABEL_26;
    }
    v85 = 1;
  }
  else
  {
    v85 = 0;
  }
  v25 = *(_QWORD *)v23;
  v26 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
  if (!v26 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v23 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
    v25 = *(_QWORD *)v23 & 7 | v26;
    *(_QWORD *)v23 = v25;
  }
  if (!v26)
    goto LABEL_25;
  v27 = v25 & 0xFFFFFFFFFFFFFFF8;
  if ((v25 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v23 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
    v25 = *(_QWORD *)v23 & 7 | v27;
    *(_QWORD *)v23 = v25;
  }
  if ((_UNKNOWN *)v27 == llvm::MCSymbol::AbsolutePseudoFragment)
  {
LABEL_25:
    v87 = 0;
    v29 = 0;
  }
  else
  {
    v28 = v25 & 0xFFFFFFFFFFFFFFF8;
    if ((v25 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v23 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
      *(_QWORD *)v23 = *(_QWORD *)v23 & 7 | v28;
    }
    v87 = 0;
    v29 = *(_QWORD *)(v28 + 16);
  }
LABEL_26:
  if (!(*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, v16, *(_QWORD *)(a5 + 16), v91, v29))return;
  v30 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v16, a6, a5, v86);
  v31 = *((_QWORD *)a4 + 2);
  v32 = v87;
  if (!v22)
  {
LABEL_28:
    v33 = *(_DWORD *)(v31 + 224) == 1879002121;
    if (*(_DWORD *)(v31 + 224) == 1879002121)
      v34 = 1;
    else
      v34 = v32;
    if ((v34 & 1) == 0)
    {
      v35 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
      v36 = v89;
      if (!v35 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v23 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
        v32 = v87;
        *(_QWORD *)v23 = *(_QWORD *)v23 & 7 | v35;
      }
      if (v35)
      {
        v94[0] = 0;
        sub_1C59415F0(a3, (uint64_t *)v23, 1, v94);
        v32 = v87;
        v33 = 0;
        v42 = v94[0] + v89;
        goto LABEL_64;
      }
      v33 = 0;
      goto LABEL_63;
    }
LABEL_45:
    v42 = v89;
    goto LABEL_64;
  }
  v41 = *(unsigned __int16 *)(v22 + 1);
  if (v41 <= 0x3C)
  {
    if (((1 << v41) & 0xE000000000010C4) != 0)
      goto LABEL_44;
    if (v41 == 60)
      goto LABEL_28;
  }
  v45 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
  v36 = v89;
  if (!v45 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v23 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
    v32 = v87;
    *(_QWORD *)v23 = *(_QWORD *)v23 & 7 | v45;
  }
  if (!v45)
  {
LABEL_62:
    v33 = 1;
LABEL_63:
    v42 = v36;
    goto LABEL_64;
  }
  if (llvm::MCSymbolELF::getBinding((llvm::MCSymbolELF *)v23))
    goto LABEL_141;
  v32 = v87;
  if ((~*(unsigned __int16 *)(v23 + 12) & 6) == 0)
    goto LABEL_62;
  v76 = *(_QWORD *)v23;
  v77 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
  if (!v77)
  {
    if ((*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v23 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
      v76 = *(_QWORD *)v23 & 7 | v77;
      *(_QWORD *)v23 = v76;
    }
    v36 = v89;
    if (!v77)
      goto LABEL_140;
  }
  v78 = v76 & 0xFFFFFFFFFFFFFFF8;
  if ((v76 & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    if ((*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v23 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
      v76 = *(_QWORD *)v23 & 7 | v78;
      *(_QWORD *)v23 = v76;
    }
    v36 = v89;
  }
  if ((_UNKNOWN *)v78 == llvm::MCSymbol::AbsolutePseudoFragment)
  {
LABEL_140:
    if ((llvm::MCAssembler::isThumbFunc((llvm::MCAssembler *)a2, (const llvm::MCSymbol *)v23) & 1) == 0)
    {
      v84 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v23, v30);
      v32 = v87;
      if ((v84 & 1) == 0)
        goto LABEL_28;
LABEL_44:
      v33 = 1;
      goto LABEL_45;
    }
LABEL_141:
    v33 = 1;
    v42 = v36;
    goto LABEL_142;
  }
  v79 = v76 & 0xFFFFFFFFFFFFFFF8;
  if ((v76 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v23 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v23 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v23 + 24));
    *(_QWORD *)v23 = *(_QWORD *)v23 & 7 | v79;
  }
  v80 = *(_DWORD *)(*(_QWORD *)(v79 + 16) + 228);
  if ((v80 & 0x10) == 0)
    goto LABEL_124;
  if (v89)
  {
    v33 = 1;
    v42 = v89;
    goto LABEL_142;
  }
  v81 = *(_QWORD *)(a1 + 8);
  v82 = *(unsigned __int16 *)(v81 + 10);
  if ((_DWORD)v30 == 9 && v82 == 3)
  {
    v42 = 0;
    v33 = 1;
    goto LABEL_142;
  }
  if (v82 != 8)
  {
LABEL_124:
    v36 = v89;
    v32 = v87;
    if ((v80 & 0x400) != 0)
      goto LABEL_62;
    goto LABEL_140;
  }
  v42 = 0;
  v33 = 1;
  if ((v80 & 0x400) != 0)
  {
LABEL_142:
    v32 = v87;
    goto LABEL_64;
  }
  v36 = 0;
  v32 = v87;
  if ((*(_BYTE *)(v81 + 12) & 1) != 0)
    goto LABEL_140;
LABEL_64:
  *a7 = v42;
  v46 = (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 12) & 1) == 0;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 12) & 1) != 0)
    v47 = 0;
  else
    v47 = v42;
  *a7 = v47;
  if (v46)
    v48 = 0;
  else
    v48 = v42;
  if (!v33)
  {
    if (v29)
    {
      v50 = *(_QWORD *)(v29 + 8);
      if (v50)
        *(_DWORD *)(v50 + 8) |= 0x200u;
    }
    else
    {
      v50 = 0;
    }
    v49 = v88;
    v94[0] = v91;
    v53 = sub_1C61D0AA8(a1 + 16, v94);
    v54 = v53;
    v56 = (char *)v53[2];
    v55 = v53[3];
    if ((unint64_t)v56 < v55)
      goto LABEL_96;
    v57 = (char *)v53[1];
    v58 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v57) >> 4) + 1;
    if (v58 <= 0x555555555555555)
    {
      v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - (_QWORD)v57) >> 4);
      if (2 * v59 > v58)
        v58 = 2 * v59;
      if (v59 >= 0x2AAAAAAAAAAAAAALL)
        v60 = 0x555555555555555;
      else
        v60 = v58;
      if (v60)
      {
        if (v60 > 0x555555555555555)
          goto LABEL_153;
        v61 = (char *)operator new(48 * v60);
      }
      else
      {
        v61 = 0;
      }
      v70 = &v61[16 * ((v56 - v57) >> 4)];
      *(_QWORD *)v70 = v88;
      *((_QWORD *)v70 + 1) = v50;
      *((_DWORD *)v70 + 4) = v30;
      v71 = &v61[48 * v60];
      *((_QWORD *)v70 + 3) = v48;
      *((_QWORD *)v70 + 4) = v23;
      *((_QWORD *)v70 + 5) = v89;
      v64 = v70 + 48;
      if (v56 == v57)
        goto LABEL_114;
      do
      {
        v72 = *((_OWORD *)v56 - 3);
        v73 = *((_OWORD *)v56 - 1);
        *((_OWORD *)v70 - 2) = *((_OWORD *)v56 - 2);
        *((_OWORD *)v70 - 1) = v73;
        *((_OWORD *)v70 - 3) = v72;
        v70 -= 48;
        v56 -= 48;
      }
      while (v56 != v57);
      goto LABEL_113;
    }
LABEL_152:
    abort();
  }
  v49 = v88;
  if ((v32 & 1) != 0)
  {
    v50 = 0;
  }
  else
  {
    v94[0] = 0;
    v51 = sub_1C6144BDC(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 56), v23, v94);
    v52 = 0;
    if (v51)
      v52 = *(_QWORD *)(v94[0] + 8);
    if (v52)
      v50 = v52;
    else
      v50 = v23;
    if (v85)
      *(_WORD *)(v50 + 12) |= 0x800u;
    else
      *(_DWORD *)(v50 + 8) |= 0x200u;
  }
  v94[0] = v91;
  v62 = sub_1C61D0AA8(a1 + 16, v94);
  v54 = v62;
  v56 = (char *)v62[2];
  v63 = v62[3];
  if ((unint64_t)v56 >= v63)
  {
    v65 = (char *)v62[1];
    v66 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v65) >> 4) + 1;
    if (v66 <= 0x555555555555555)
    {
      v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - (_QWORD)v65) >> 4);
      if (2 * v67 > v66)
        v66 = 2 * v67;
      if (v67 >= 0x2AAAAAAAAAAAAAALL)
        v68 = 0x555555555555555;
      else
        v68 = v66;
      if (!v68)
      {
        v69 = 0;
        goto LABEL_111;
      }
      if (v68 <= 0x555555555555555)
      {
        v69 = (char *)operator new(48 * v68);
LABEL_111:
        v70 = &v69[16 * ((v56 - v65) >> 4)];
        *(_QWORD *)v70 = v88;
        *((_QWORD *)v70 + 1) = v50;
        *((_DWORD *)v70 + 4) = v30;
        v71 = &v69[48 * v68];
        *((_QWORD *)v70 + 3) = v48;
        *((_QWORD *)v70 + 4) = v23;
        *((_QWORD *)v70 + 5) = v89;
        v64 = v70 + 48;
        if (v56 == v65)
          goto LABEL_114;
        do
        {
          v74 = *((_OWORD *)v56 - 3);
          v75 = *((_OWORD *)v56 - 1);
          *((_OWORD *)v70 - 2) = *((_OWORD *)v56 - 2);
          *((_OWORD *)v70 - 1) = v75;
          *((_OWORD *)v70 - 3) = v74;
          v70 -= 48;
          v56 -= 48;
        }
        while (v56 != v65);
LABEL_113:
        v56 = (char *)v54[1];
LABEL_114:
        v54[1] = v70;
        v54[2] = v64;
        v54[3] = v71;
        if (v56)
          operator delete(v56);
        goto LABEL_116;
      }
LABEL_153:
      sub_1C4764EE4();
    }
    goto LABEL_152;
  }
LABEL_96:
  *(_QWORD *)v56 = v49;
  *((_QWORD *)v56 + 1) = v50;
  *((_DWORD *)v56 + 4) = v30;
  *((_QWORD *)v56 + 3) = v48;
  *((_QWORD *)v56 + 4) = v23;
  v64 = v56 + 48;
  *((_QWORD *)v56 + 5) = v89;
LABEL_116:
  v54[2] = v64;
}

BOOL sub_1C59187BC(int a1, int a2, llvm::MCSymbolELF *this, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;

  if (a6 && (llvm::MCSymbolELF::getBinding(this) || (~*((unsigned __int16 *)this + 6) & 6) == 0))
    return 0;
  sub_1C593D6FC((uint64_t)this, 1);
  return *(_QWORD *)(v8 + 16) == *(_QWORD *)(a4 + 16);
}

uint64_t sub_1C5918820(uint64_t result)
{
  *(_BYTE *)(result + 64) = 1;
  return result;
}

uint64_t sub_1C591882C(uint64_t result)
{
  *(_BYTE *)(result + 65) = 1;
  return result;
}

void sub_1C5918838(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[10];
  v4 = a1[11];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)a1[9];
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = (_QWORD *)a1[9];
    }
    a1[9] = v13;
    a1[10] = v6;
    a1[11] = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[10] = v6;
}

uint64_t sub_1C5918920(uint64_t a1, uint64_t a2, llvm::MCAsmLayout *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *__p;
  void *v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(unsigned __int8 *)(a1 + 104);
  v8[0] = a1;
  v8[1] = v3;
  v9 = v4;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v15 = 0x100000000;
  v16 = 0;
  v14 = 1;
  v18 = 0;
  v19 = 0;
  __p = 0;
  sub_1C5918AC8((uint64_t)v8, a2, a3);
  v6 = v5;
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v11, 8);
  return v6;
}

uint64_t sub_1C59189A8()
{
  return 1;
}

void sub_1C59189B8(unsigned int *a1)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[2];
  sub_1C62B4424(a1);
  if (v2)
  {
    v3 = 1 << (33 - __clz(v2 - 1));
    if (v3 <= 64)
      v4 = 64;
    else
      v4 = v3;
    if (v4 == a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      v5 = 32 * v4;
      v6 = *(_QWORD **)a1;
      do
      {
        *v6 = -4096;
        v6 += 4;
        v5 -= 32;
      }
      while (v5);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
      v7 = (4 * v4 / 3 + 1) | ((unint64_t)(4 * v4 / 3 + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      a1[4] = v8;
      v9 = operator new(32 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *((_QWORD *)a1 + 1) = 0;
      v10 = a1[4];
      if ((_DWORD)v10)
      {
        v11 = 32 * v10;
        do
        {
          *v9 = -4096;
          v9 += 4;
          v11 -= 32;
        }
        while (v11);
      }
    }
  }
  else if (a1[4])
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    a1[4] = 0;
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
}

void sub_1C5918AC8(uint64_t a1, uint64_t a2, llvm::MCAsmLayout *a3)
{
  uint64_t v6;
  llvm::raw_ostream *v7;
  _DWORD *v8;
  llvm::raw_ostream *v9;
  char v10;
  char *v11;
  llvm::raw_ostream *v12;
  char v13;
  char *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  char v18;
  char *v19;
  llvm::raw_ostream *v20;
  char v21;
  char *v22;
  llvm::raw_ostream *v23;
  __int16 v24;
  llvm::raw_ostream *v25;
  unsigned int v26;
  unsigned int v27;
  llvm::raw_ostream *v28;
  int v29;
  unsigned int v30;
  llvm::raw_ostream *v31;
  unsigned int v32;
  llvm::raw_ostream *v33;
  __int16 v34;
  llvm::raw_ostream *v35;
  llvm::raw_ostream *v36;
  llvm::raw_ostream *v37;
  __int16 v38;
  llvm::raw_ostream *v39;
  unsigned int v40;
  llvm::raw_ostream *v41;
  unsigned int v42;
  uint64_t *v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t *v46;
  llvm::MCAssembler *v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  BOOL v58;
  int *v59;
  int v60;
  int v61;
  BOOL v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t **v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  llvm::MCAssembler *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  const std::string::value_type *v79;
  std::string::size_type v80;
  int v81;
  _BOOL4 v82;
  const char *v83;
  size_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  unint64_t ELFRelSection;
  char v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t ELFSectionImpl;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t *v100;
  unint64_t *v101;
  unint64_t *j;
  unint64_t v103;
  uint64_t *v104;
  uint64_t **k;
  uint64_t **v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t *v143;
  int v144;
  unsigned int v145;
  unint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  unint64_t v155;
  unsigned int v156;
  llvm::raw_ostream *v157;
  uint64_t *v158;
  uint64_t **i;
  uint64_t **v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  int v170;
  int v171;
  llvm::raw_ostream *v172;
  unsigned int v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t **v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  char v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  BOOL v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  int v203;
  char v204;
  char v205;
  int v206;
  char *v207;
  char *v208;
  unsigned __int8 *v209;
  int v210;
  int v211;
  uint64_t v212;
  unint64_t v213;
  std::string::size_type v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  const char *v219;
  uint64_t v220;
  int Binding;
  uint64_t v222;
  unint64_t v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  unsigned int v242;
  char *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  char *v252;
  char *v253;
  uint64_t *v254;
  char *v255;
  char *v256;
  char *v257;
  char *v258;
  char *v259;
  __int128 v260;
  char *v261;
  __int128 v262;
  int v263;
  int v264;
  int v265;
  int v266;
  unint64_t v267;
  int v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  int v272;
  int v273;
  uint64_t v274;
  char v275;
  BOOL v276;
  _QWORD *v277;
  uint64_t v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int Offset;
  uint64_t v282;
  unsigned int v283;
  _QWORD *v284;
  uint64_t v285;
  unsigned int v286;
  uint64_t *v287;
  uint64_t *v288;
  char v289;
  BOOL v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  unsigned int v295;
  uint64_t *v296;
  _QWORD *v297;
  uint64_t v298;
  unsigned int v299;
  unsigned int v300;
  _QWORD *v301;
  uint64_t v302;
  uint64_t **v303;
  unsigned int *v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unsigned int v312;
  unsigned int v313;
  llvm::raw_ostream *v314;
  unsigned int v315;
  uint64_t *v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t **v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  llvm::raw_ostream *v325;
  char v326;
  char *v327;
  std::string::size_type *v328;
  std::string::size_type v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  unint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  _OWORD *v341;
  unint64_t v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  unint64_t v349;
  uint64_t v350;
  int v351;
  unsigned int v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  llvm::raw_ostream *v358;
  unsigned int v359;
  uint64_t v360;
  unsigned int *v361;
  int v362;
  unsigned int v363;
  llvm::raw_ostream *v364;
  unsigned int v365;
  unsigned int v366;
  llvm::raw_ostream *v367;
  unsigned int v368;
  unsigned int v369;
  unsigned int v370;
  llvm::raw_ostream *v371;
  unsigned int v372;
  unsigned int v373;
  llvm::raw_ostream *v374;
  llvm::raw_ostream *v375;
  unsigned int v376;
  llvm::raw_ostream *v377;
  unsigned int v378;
  unsigned int v379;
  llvm::raw_ostream *v380;
  llvm::raw_ostream *v381;
  size_t v382;
  llvm::raw_ostream *v383;
  unint64_t v384;
  llvm::raw_ostream *v385;
  unsigned int v386;
  unsigned int v387;
  uint64_t v388;
  llvm::raw_ostream *v389;
  llvm::raw_ostream *v390;
  llvm::raw_ostream *v391;
  llvm::raw_ostream *v392;
  size_t v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  _QWORD *v398;
  uint64_t v399;
  uint64_t **v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t **v403;
  _QWORD *v404;
  uint64_t v405;
  _QWORD *v406;
  uint64_t v407;
  uint64_t **v408;
  _QWORD *v409;
  char v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  unint64_t *v418;
  uint64_t v419;
  unint64_t v420;
  int v421;
  unsigned int v422;
  uint64_t *v423;
  uint64_t **v424;
  uint64_t **v425;
  uint64_t *v426;
  unint64_t v427;
  uint64_t **v428;
  const llvm::MCFragment *v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t v433;
  unsigned int v434;
  unsigned int v435;
  BOOL v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  BOOL v442;
  int v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  unint64_t v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  int v454;
  _QWORD *v455;
  uint64_t v456;
  unsigned int v457;
  unsigned int v458;
  uint64_t v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  uint64_t v463;
  unsigned int v464;
  int v465;
  uint64_t v466;
  unint64_t v467;
  unint64_t v468;
  char v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  char *v473;
  uint64_t *v474;
  char *v475;
  unint64_t *__p;
  uint64_t *__pa;
  unint64_t *v478;
  char *v479;
  void *v480;
  uint64_t *v481;
  uint64_t *v482;
  unint64_t *v483;
  int v484;
  unint64_t v485;
  void *v486;
  uint64_t *v487;
  char *v488;
  unsigned int v489;
  unint64_t *v490;
  unint64_t *v491;
  uint64_t v492;
  uint64_t *v493;
  uint64_t v494;
  int v495;
  uint64_t v496;
  uint64_t v497;
  __int16 v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t *v501;
  uint64_t *v502;
  uint64_t *v503;
  unint64_t *v504;
  uint64_t *v505;
  char *v506;
  std::string::size_type *v507;
  llvm::MCAsmLayout *v508;
  uint64_t *v509;
  uint64_t **v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t **v513;
  uint64_t *v514;
  uint64_t v515;
  _QWORD v516[2];
  int v517;
  uint64_t v518[2];
  int v519;
  uint64_t *ELFSection;
  std::string __dst;
  uint64_t v522;
  __int16 v523;
  char v524[32];
  __int16 v525;
  uint64_t *v526;
  char v527[8];
  __int128 v528;
  uint64_t v529;
  uint64_t v530;
  int v531;
  uint64_t v532;

  v532 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  v482 = (uint64_t *)a2;
  v6 = *(_QWORD *)a2;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)".strtab";
  v523 = 259;
  LOWORD(v530) = 257;
  v492 = v6;
  ELFSection = (uint64_t *)llvm::MCContext::getELFSection(v6, (llvm::Twine *)&__dst, 3, 0, 0, (unsigned __int8 *)v527, 0, -1, 0);
  *(_DWORD *)(a1 + 84) = sub_1C591B318((_QWORD *)a1, (uint64_t)ELFSection);
  v518[0] = 0;
  v518[1] = 0;
  v519 = 0;
  v516[0] = 0;
  v516[1] = 0;
  v517 = 0;
  v514 = 0;
  v515 = 0;
  v513 = &v514;
  v7 = *(llvm::raw_ostream **)(a1 + 8);
  v8 = (_DWORD *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 3uLL)
  {
    *v8 = 1179403647;
    *((_QWORD *)v7 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v7, byte_1C8662EFA, 4uLL);
  }
  v9 = *(llvm::raw_ostream **)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12) & 2) != 0)
    v10 = 2;
  else
    v10 = 1;
  v11 = (char *)*((_QWORD *)v9 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v9 + 3))
  {
    llvm::raw_ostream::write(v9, v10);
  }
  else
  {
    *((_QWORD *)v9 + 4) = v11 + 1;
    *v11 = v10;
  }
  v12 = *(llvm::raw_ostream **)(a1 + 8);
  if (*(_DWORD *)(a1 + 16) == 1)
    v13 = 1;
  else
    v13 = 2;
  v14 = (char *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, v13);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v14 + 1;
    *v14 = v13;
  }
  v15 = *(llvm::raw_ostream **)(a1 + 8);
  v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
  {
    llvm::raw_ostream::write(v15, 1);
  }
  else
  {
    *((_QWORD *)v15 + 4) = v16 + 1;
    *v16 = 1;
  }
  v17 = *(llvm::raw_ostream **)(a1 + 8);
  v18 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 8);
  if (!v18 && *(_BYTE *)(*(_QWORD *)a1 + 64))
    v18 = 3;
  v19 = (char *)*((_QWORD *)v17 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, v18);
  }
  else
  {
    *((_QWORD *)v17 + 4) = v19 + 1;
    *v19 = v18;
  }
  v20 = *(llvm::raw_ostream **)(a1 + 8);
  v21 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 9);
  v22 = (char *)*((_QWORD *)v20 + 4);
  if ((unint64_t)v22 >= *((_QWORD *)v20 + 3))
  {
    llvm::raw_ostream::write(v20, v21);
  }
  else
  {
    *((_QWORD *)v20 + 4) = v22 + 1;
    *v22 = v21;
  }
  llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), "", 7uLL);
  v23 = *(llvm::raw_ostream **)(a1 + 8);
  if ((*(_DWORD *)(a1 + 16) - 1) < 2)
    v24 = 1;
  else
    v24 = 256;
  *(_WORD *)v527 = v24;
  llvm::raw_ostream::write(v23, v527, 2uLL);
  v25 = *(llvm::raw_ostream **)(a1 + 8);
  v26 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 10);
  v27 = bswap32(v26) >> 16;
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
    LOWORD(v26) = v27;
  *(_WORD *)v527 = v26;
  llvm::raw_ostream::write(v25, v527, 2uLL);
  v28 = *(llvm::raw_ostream **)(a1 + 8);
  if ((*(_DWORD *)(a1 + 16) - 1) < 2)
    v29 = 1;
  else
    v29 = 0x1000000;
  *(_DWORD *)v527 = v29;
  llvm::raw_ostream::write(v28, v527, 4uLL);
  sub_1C591B434(a1, 0);
  sub_1C591B434(a1, 0);
  sub_1C591B434(a1, 0);
  v30 = *(_DWORD *)(a2 + 504);
  v31 = *(llvm::raw_ostream **)(a1 + 8);
  v32 = bswap32(v30);
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
    v30 = v32;
  *(_DWORD *)v527 = v30;
  llvm::raw_ostream::write(v31, v527, 4uLL);
  v33 = *(llvm::raw_ostream **)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12) & 2) != 0)
    v34 = 64;
  else
    v34 = 52;
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
    v34 <<= 8;
  *(_WORD *)v527 = v34;
  llvm::raw_ostream::write(v33, v527, 2uLL);
  v35 = *(llvm::raw_ostream **)(a1 + 8);
  *(_WORD *)v527 = 0;
  llvm::raw_ostream::write(v35, v527, 2uLL);
  v36 = *(llvm::raw_ostream **)(a1 + 8);
  *(_WORD *)v527 = 0;
  llvm::raw_ostream::write(v36, v527, 2uLL);
  v37 = *(llvm::raw_ostream **)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12) & 2) != 0)
    v38 = 64;
  else
    v38 = 40;
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
    v38 <<= 8;
  *(_WORD *)v527 = v38;
  llvm::raw_ostream::write(v37, v527, 2uLL);
  v39 = *(llvm::raw_ostream **)(a1 + 8);
  *(_WORD *)v527 = 0;
  llvm::raw_ostream::write(v39, v527, 2uLL);
  v40 = *(unsigned __int16 *)(a1 + 84);
  v41 = *(llvm::raw_ostream **)(a1 + 8);
  v42 = bswap32(v40) >> 16;
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
    LOWORD(v40) = v42;
  *(_WORD *)v527 = v40;
  llvm::raw_ostream::write(v41, v527, 2uLL);
  v481 = 0;
  v43 = 0;
  v44 = 0;
  v511 = 0;
  v512 = 0;
  v508 = a3;
  v510 = &v511;
  v46 = *(unint64_t **)(a2 + 32);
  v45 = *(unint64_t **)(a2 + 40);
  if (v46 != v45)
  {
    v478 = 0;
    v481 = 0;
    v43 = 0;
    v474 = 0;
    __p = 0;
    v44 = 0;
    v47 = (llvm::MCAssembler *)a2;
    v483 = *(unint64_t **)(a2 + 40);
    while (1)
    {
      v48 = *v46;
      v49 = *(_DWORD *)(a1 + 24);
      if (v49 == 2)
      {
        v51 = *(_QWORD *)(v48 + 208);
        if (v51 < 4 || *(_DWORD *)(*(_QWORD *)(v48 + 200) + v51 - 4) != 1870095406)
          goto LABEL_177;
      }
      else if (v49 == 1)
      {
        v50 = *(_QWORD *)(v48 + 208);
        if (v50 >= 4 && *(_DWORD *)(*(_QWORD *)(v48 + 200) + v50 - 4) == 1870095406)
          goto LABEL_177;
      }
      v501 = v43;
      v490 = v44;
      v52 = 1 << *(_BYTE *)(v48 + 24);
      v53 = *(_QWORD **)(a1 + 8);
      v54 = v53[4] - v53[2] + (*(uint64_t (**)(_QWORD *))(*v53 + 80))(v53);
      v55 = v54 + v52 - 1;
      v56 = -(uint64_t)v52;
      v57 = (void *)(v55 & v56);
      llvm::raw_ostream::write_zeros(*(llvm::raw_ostream **)(a1 + 8), (v55 & v56) - v54);
      v496 = *(_QWORD *)(v48 + 240);
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v47 + 152) + 468))
        v58 = *(_QWORD *)(v48 + 208) >= 7uLL;
      else
        v58 = 0;
      if (v58)
      {
        v59 = *(int **)(v48 + 200);
        v60 = *v59;
        v61 = *(int *)((char *)v59 + 3);
        v62 = v60 == 1650811950 && v61 == 1600615778;
        if (v62)
        {
          *(_QWORD *)v527 = &v529;
          v528 = xmmword_1C85F20B0;
          sub_1C613932C((uint64_t)&__dst, (uint64_t)v527);
          llvm::MCAssembler::writeSectionData(v47, (llvm::raw_ostream *)&__dst, (const llvm::MCSection *)v48, v508);
          __break(1u);
          return;
        }
      }
      llvm::MCAssembler::writeSectionData(v47, *(llvm::raw_ostream **)(a1 + 8), (const llvm::MCSection *)v48, v508);
      v63 = *(_QWORD **)(a1 + 8);
      v64 = (*(uint64_t (**)(_QWORD *))(*v63 + 80))(v63);
      v65 = v63[4];
      v66 = v63[2];
      v67 = &v511;
      v68 = &v511;
      v69 = v511;
      if (v511)
      {
        do
        {
          while (1)
          {
            v67 = (uint64_t **)v69;
            v70 = v69[4];
            if (v70 <= v48)
              break;
            v69 = *v67;
            v68 = v67;
            if (!*v67)
              goto LABEL_74;
          }
          if (v70 >= v48)
            goto LABEL_77;
          v69 = v67[1];
        }
        while (v69);
        v68 = v67 + 1;
      }
LABEL_74:
      v486 = v57;
      v71 = v66;
      v72 = v47;
      v73 = v65;
      v74 = (uint64_t *)v67;
      v67 = (uint64_t **)operator new(0x38uLL);
      *v67 = 0;
      v67[1] = 0;
      v67[5] = 0;
      v67[6] = 0;
      v67[4] = (uint64_t *)v48;
      v67[2] = v74;
      *v68 = (uint64_t *)v67;
      v75 = (uint64_t *)v67;
      if (*v510)
      {
        v510 = (uint64_t **)*v510;
        v75 = *v68;
      }
      sub_1C4768E74(v511, v75);
      ++v512;
      v65 = v73;
      v47 = v72;
      v66 = v71;
      v57 = v486;
LABEL_77:
      v67[5] = (uint64_t *)v57;
      v67[6] = (uint64_t *)(v64 + v65 - v66);
      v76 = *(_QWORD *)a1 + 16;
      *(_QWORD *)v527 = v48;
      v77 = sub_1C61D0AA8(v76, (uint64_t *)v527);
      if (v77[1] == v77[2])
      {
        v78 = 0;
      }
      else
      {
        v79 = *(const std::string::value_type **)(v48 + 200);
        v80 = *(_QWORD *)(v48 + 208);
        v81 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12);
        v82 = *(_DWORD *)(v48 + 224) != 1879002121;
        if ((v81 & v82) != 0)
          v83 = ".rela";
        else
          v83 = ".rel";
        if ((v81 & v82) != 0)
          v84 = 5;
        else
          v84 = 4;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v84;
        memcpy(&__dst, v83, v84);
        *(_BYTE *)((unint64_t)&__dst | v84) = 0;
        std::string::append(&__dst, v79, v80);
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12) & 2) != 0)
          v85 = 16;
        else
          v85 = 8;
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12) & 2) != 0)
          v86 = 24;
        else
          v86 = 12;
        if ((v81 & v82) != 0)
          v87 = 4;
        else
          v87 = 9;
        if ((v81 & v82) != 0)
          v88 = v86;
        else
          v88 = v85;
        if ((*(_DWORD *)(v48 + 228) & 0x200) != 0)
          v89 = 512;
        else
          v89 = 64;
        LOWORD(v530) = 260;
        *(_QWORD *)v527 = &__dst;
        ELFRelSection = llvm::MCContext::createELFRelSection(v492, (llvm::Twine *)v527, v87, v89, v88, *(_QWORD *)(v48 + 240) & 0xFFFFFFFFFFFFFFF8, v48);
        v78 = ELFRelSection;
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12) & 2) != 0)
          v91 = 3;
        else
          v91 = 2;
        *(_BYTE *)(ELFRelSection + 24) = v91;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v47 = (llvm::MCAssembler *)v482;
      }
      *(_QWORD *)v527 = v78;
      v92 = v496 & 0xFFFFFFFFFFFFFFF8;
      if ((v496 & 0xFFFFFFFFFFFFFFF8) != 0)
        break;
LABEL_173:
      v133 = sub_1C591B318((_QWORD *)a1, v48);
      __dst.__r_.__value_.__r.__words[0] = v48;
      *((_DWORD *)sub_1C6144C70((uint64_t)v516, (uint64_t *)&__dst) + 2) = v133;
      if (v78)
      {
        v134 = sub_1C591B318((_QWORD *)a1, v78);
        *((_DWORD *)sub_1C6144C70((uint64_t)v516, (uint64_t *)v527) + 2) = v134;
        v135 = v501;
        if (v501 >= v474)
        {
          v136 = v501 - v481;
          v137 = v136 + 1;
          if ((unint64_t)(v136 + 1) >> 61)
LABEL_592:
            abort();
          if (((char *)v474 - (char *)v481) >> 2 > v137)
            v137 = ((char *)v474 - (char *)v481) >> 2;
          if ((unint64_t)((char *)v474 - (char *)v481) >= 0x7FFFFFFFFFFFFFF8)
            v138 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v138 = v137;
          if (v138)
          {
            if (v138 >> 61)
LABEL_593:
              sub_1C4764EE4();
            v139 = (char *)operator new(8 * v138);
            v135 = v501;
          }
          else
          {
            v139 = 0;
          }
          v140 = (uint64_t *)&v139[8 * v136];
          *v140 = v78;
          v43 = v140 + 1;
          v141 = v481;
          if (v135 == v481)
          {
            v44 = v490;
          }
          else
          {
            v44 = v490;
            do
            {
              v142 = *--v135;
              *--v140 = v142;
              v141 = v481;
            }
            while (v135 != v481);
          }
          v474 = (uint64_t *)&v139[8 * v138];
          if (v141)
            operator delete(v141);
          v481 = v140;
          goto LABEL_176;
        }
        *v501 = v78;
        v43 = v501 + 1;
      }
      else
      {
        v43 = v501;
      }
      v44 = v490;
LABEL_176:
      (*(void (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 48))(*(_QWORD *)(*(_QWORD *)a1 + 8), v492, v48);
      v45 = v483;
LABEL_177:
      if (++v46 == v45)
      {
        v143 = __p;
        if (__p == v44)
        {
          a3 = v508;
          goto LABEL_229;
        }
        v502 = v43;
        v144 = v517;
        v145 = v517 - 1;
        while (1)
        {
          v146 = v44;
          *(_QWORD *)v527 = 0;
          *(_QWORD *)v527 = *v143;
          v147 = *(_QWORD *)v527;
          v148 = 1 << *(_BYTE *)(*(_QWORD *)v527 + 24);
          v149 = *(_QWORD **)(a1 + 8);
          v150 = v149[4] - v149[2] + (*(uint64_t (**)(_QWORD *))(*v149 + 80))(v149);
          v151 = v150 + v148 - 1;
          v152 = -(uint64_t)v148;
          v153 = (uint64_t *)(v151 & v152);
          llvm::raw_ostream::write_zeros(*(llvm::raw_ostream **)(a1 + 8), (v151 & v152) - v150);
          v154 = *(_QWORD *)(v147 + 240);
          v155 = v154 & 0xFFFFFFFFFFFFFFF8;
          v156 = (v154 >> 2) & 1;
          v157 = *(llvm::raw_ostream **)(a1 + 8);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            v156 <<= 24;
          LODWORD(__dst.__r_.__value_.__l.__data_) = v156;
          llvm::raw_ostream::write(v157, (const char *)&__dst, 4uLL);
          v158 = v514;
          for (i = &v514; ; v158 = *i)
          {
            v160 = i;
            if (!v158)
              break;
            while (1)
            {
              i = (uint64_t **)v158;
              v161 = v158[4];
              if (v161 > v155)
                break;
              if (v161 >= v155)
                goto LABEL_214;
              v158 = i[1];
              if (!v158)
              {
                v160 = i + 1;
                goto LABEL_211;
              }
            }
          }
LABEL_211:
          v162 = (uint64_t *)i;
          i = (uint64_t **)operator new(0x40uLL);
          *i = 0;
          i[1] = 0;
          i[4] = (uint64_t *)v155;
          i[5] = 0;
          i[6] = 0;
          i[7] = 0;
          i[2] = v162;
          *v160 = (uint64_t *)i;
          v163 = (uint64_t *)i;
          if (*v513)
          {
            v513 = (uint64_t **)*v513;
            v163 = *v160;
          }
          sub_1C4768E74(v514, v163);
          ++v515;
LABEL_214:
          v165 = i[5];
          v164 = i[6];
          if (v165 != v164)
            break;
LABEL_227:
          v174 = *(_QWORD **)(a1 + 8);
          v175 = (*(uint64_t (**)(_QWORD *))(*v174 + 80))(v174) + v174[4] - v174[2];
          v176 = sub_1C591B4B4((uint64_t **)&v510, *(unint64_t *)v527, (uint64_t **)v527);
          v176[5] = v153;
          v176[6] = (uint64_t *)v175;
          ++v143;
          v44 = v146;
          if (v143 == v146)
          {
            v44 = __p;
            a3 = v508;
            v43 = v502;
            goto LABEL_229;
          }
        }
        v166 = v516[0];
        while (2)
        {
          if (v144)
          {
            v167 = ((*v165 >> 4) ^ (*v165 >> 9)) & v145;
            v168 = *(_QWORD *)(v166 + 16 * v167);
            if (*v165 == v168)
            {
LABEL_218:
              v169 = *(_DWORD *)(v166 + 16 * v167 + 8);
              goto LABEL_224;
            }
            v170 = 1;
            while (v168 != -4096)
            {
              v171 = v167 + v170++;
              v167 = v171 & v145;
              v168 = *(_QWORD *)(v166 + 16 * v167);
              if (*v165 == v168)
                goto LABEL_218;
            }
          }
          v169 = 0;
LABEL_224:
          v172 = *(llvm::raw_ostream **)(a1 + 8);
          v173 = bswap32(v169);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            v169 = v173;
          LODWORD(__dst.__r_.__value_.__l.__data_) = v169;
          llvm::raw_ostream::write(v172, (const char *)&__dst, 4uLL);
          if (++v165 == v164)
            goto LABEL_227;
          continue;
        }
      }
    }
    __dst.__r_.__value_.__r.__words[0] = v496 & 0xFFFFFFFFFFFFFFF8;
    v93 = sub_1C62B452C(v518, &__dst);
    if (!*((_DWORD *)v93 + 2))
    {
      v94 = v93;
      ELFSectionImpl = llvm::MCContext::createELFSectionImpl(v492, ".group", 6uLL, 17, 0, 4, 4, v92, (*(_DWORD *)(v48 + 240) & 4) != 0, -1, 0);
      *((_DWORD *)v94 + 2) = sub_1C591B318((_QWORD *)a1, ELFSectionImpl);
      *(_BYTE *)(ELFSectionImpl + 24) = 2;
      if (v490 >= v478)
      {
        v96 = v490 - __p;
        v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 61)
          goto LABEL_592;
        if (((char *)v478 - (char *)__p) >> 2 > v97)
          v97 = ((char *)v478 - (char *)__p) >> 2;
        if ((unint64_t)((char *)v478 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v98 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v98 = v97;
        if (v98)
        {
          if (v98 >> 61)
            goto LABEL_593;
          v99 = (char *)operator new(8 * v98);
        }
        else
        {
          v99 = 0;
        }
        v100 = (unint64_t *)&v99[8 * v96];
        *v100 = ELFSectionImpl;
        v101 = v100 + 1;
        for (j = v490; j != __p; --j)
        {
          v103 = *(j - 1);
          *--v100 = v103;
        }
        v478 = (unint64_t *)&v99[8 * v98];
        if (__p)
          operator delete(__p);
        v490 = v101;
        __p = v100;
      }
      else
      {
        *v490++ = ELFSectionImpl;
      }
    }
    v104 = v514;
    for (k = &v514; ; v104 = *k)
    {
      v106 = k;
      if (!v104)
        break;
      while (1)
      {
        k = (uint64_t **)v104;
        v107 = v104[4];
        if (v107 > v92)
          break;
        if (v107 >= v92)
          goto LABEL_136;
        v104 = k[1];
        if (!v104)
        {
          v106 = k + 1;
          goto LABEL_133;
        }
      }
    }
LABEL_133:
    v108 = (uint64_t *)k;
    k = (uint64_t **)operator new(0x40uLL);
    *k = 0;
    k[1] = 0;
    k[4] = (uint64_t *)v92;
    k[5] = 0;
    k[6] = 0;
    k[7] = 0;
    k[2] = v108;
    *v106 = (uint64_t *)k;
    v109 = (uint64_t *)k;
    if (*v513)
    {
      v513 = (uint64_t **)*v513;
      v109 = *v106;
    }
    sub_1C4768E74(v514, v109);
    ++v515;
LABEL_136:
    v111 = k[6];
    v110 = k[7];
    if (v111 >= v110)
    {
      v113 = k[5];
      v114 = v111 - v113;
      v115 = v114 + 1;
      if ((unint64_t)(v114 + 1) >> 61)
        goto LABEL_592;
      v116 = (char *)v110 - (char *)v113;
      if (v116 >> 2 > v115)
        v115 = v116 >> 2;
      if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
        v117 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v117 = v115;
      if (v117)
      {
        if (v117 >> 61)
          goto LABEL_593;
        v118 = (char *)operator new(8 * v117);
      }
      else
      {
        v118 = 0;
      }
      v119 = (uint64_t *)&v118[8 * v114];
      *v119 = v48;
      v112 = v119 + 1;
      if (v111 != v113)
      {
        do
        {
          v120 = *--v111;
          *--v119 = v120;
        }
        while (v111 != v113);
        v111 = k[5];
      }
      k[5] = v119;
      k[6] = v112;
      k[7] = (uint64_t *)&v118[8 * v117];
      if (v111)
        operator delete(v111);
    }
    else
    {
      *v111 = v48;
      v112 = v111 + 1;
    }
    k[6] = v112;
    v121 = *(_QWORD *)v527;
    if (!*(_QWORD *)v527)
    {
      v78 = 0;
      goto LABEL_173;
    }
    v122 = k[7];
    if (v112 >= v122)
    {
      v124 = k[5];
      v125 = v112 - v124;
      v126 = v125 + 1;
      if ((unint64_t)(v125 + 1) >> 61)
        goto LABEL_592;
      v127 = (char *)v122 - (char *)v124;
      if (v127 >> 2 > v126)
        v126 = v127 >> 2;
      if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
        v128 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v128 = v126;
      if (v128)
      {
        if (v128 >> 61)
          goto LABEL_593;
        v129 = (char *)operator new(8 * v128);
      }
      else
      {
        v129 = 0;
      }
      v130 = (uint64_t *)&v129[8 * v125];
      v131 = (uint64_t *)&v129[8 * v128];
      *v130 = v121;
      v123 = v130 + 1;
      if (v112 == v124)
      {
        k[5] = v130;
        k[6] = v123;
        k[7] = v131;
      }
      else
      {
        do
        {
          v132 = *--v112;
          *--v130 = v132;
        }
        while (v112 != v124);
        v112 = k[5];
        k[5] = v130;
        k[6] = v123;
        k[7] = v131;
        if (!v112)
          goto LABEL_172;
      }
      operator delete(v112);
    }
    else
    {
      *v112 = *(_QWORD *)v527;
      v123 = v112 + 1;
    }
LABEL_172:
    k[6] = v123;
    v78 = *(_QWORD *)v527;
    goto LABEL_173;
  }
LABEL_229:
  v491 = v44;
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    llvm::StringTableBuilder::finalizeStringTable((llvm::StringTableBuilder *)(a1 + 32), 1);
    goto LABEL_493;
  }
  v503 = v43;
  v509 = 0;
  v177 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 65))
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)".llvm_addrsig";
    v523 = 259;
    LOWORD(v530) = 257;
    v509 = (uint64_t *)llvm::MCContext::getELFSection(v492, (llvm::Twine *)&__dst, 1879002115, 0x80000000, 0, (unsigned __int8 *)v527, 0, -1, 0);
    sub_1C591B318((_QWORD *)a1, (uint64_t)v509);
    v177 = *(_QWORD *)a1;
  }
  v178 = *v482;
  LOBYTE(v528) = (*(_BYTE *)(*(_QWORD *)(v177 + 8) + 12) & 2) != 0;
  v529 = 0;
  v530 = 0;
  *((_QWORD *)&v528 + 1) = 0;
  v531 = 0;
  if ((*(_BYTE *)(*(_QWORD *)(v177 + 8) + 12) & 2) != 0)
    v179 = 24;
  else
    v179 = 16;
  *(_QWORD *)v527 = a1;
  *(_QWORD *)v524 = ".symtab";
  v525 = 259;
  v523 = 257;
  v472 = v178;
  v180 = llvm::MCContext::getELFSection(v178, (llvm::Twine *)v524, 2, 0, v179, (unsigned __int8 *)&__dst, 0, -1, 0);
  v181 = v180;
  v526 = (uint64_t *)v180;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12) & 2) != 0)
    v182 = 3;
  else
    v182 = 2;
  *(_BYTE *)(v180 + 24) = v182;
  *(_DWORD *)(a1 + 88) = sub_1C591B318((_QWORD *)a1, v180);
  v183 = 1 << *(_BYTE *)(v181 + 24);
  v184 = *(_QWORD **)(a1 + 8);
  v185 = v184[4] - v184[2] + (*(uint64_t (**)(_QWORD *))(*v184 + 80))(v184);
  v471 = (v185 + v183 - 1) & -(uint64_t)v183;
  llvm::raw_ostream::write_zeros(*(llvm::raw_ostream **)(a1 + 8), v471 - v185);
  sub_1C591B580((uint64_t)v527, 0, 0, 0, 0, 0, 0, 0);
  v186 = v482[22];
  v470 = v482[23];
  if (v470 != v186)
  {
    v187 = 32 * ((v470 - v186) >> 5);
    v188 = v482[22];
    do
    {
      v189 = *(_BYTE *)(v188 + 23);
      v190 = v189 < 0;
      if (v189 >= 0)
        v191 = (_QWORD *)v188;
      else
        v191 = *(_QWORD **)v188;
      v192 = v189 & 0x7F;
      if (v190)
        v193 = *(_QWORD *)(v188 + 8);
      else
        v193 = v192;
      v194 = sub_1C5E3DF4C(v191, (uint64_t)v191 + v193);
      llvm::StringTableBuilder::add(a1 + 32, (uint64_t)v191, v193 | ((unint64_t)v194 << 32));
      v188 += 32;
      v187 -= 32;
    }
    while (v187);
  }
  v195 = (uint64_t *)v482[7];
  v505 = (uint64_t *)v482[8];
  if (v195 == v505)
  {
    v196 = 0;
    v197 = 0;
    v198 = 0;
    __pa = 0;
    v497 = 0xFFFFFFFFLL;
    v199 = v470 - v186;
    v200 = v470;
    goto LABEL_381;
  }
  v469 = 0;
  v201 = 0;
  v473 = 0;
  v196 = 0;
  __pa = 0;
  v479 = 0;
  v198 = 0;
  v475 = 0;
  do
  {
    v202 = *v195;
    v203 = *(_DWORD *)(*v195 + 8);
    v498 = *(_WORD *)(*v195 + 12);
    v204 = sub_1C6144BDC(*(_QWORD *)(*(_QWORD *)a1 + 40), *(_DWORD *)(*(_QWORD *)a1 + 56), *v195, &__dst);
    v205 = v204;
    v206 = *(_DWORD *)(v202 + 8);
    if ((v206 & 0x1C00) == 0x800)
    {
      v493 = v195;
      v207 = v196;
      v208 = v198;
      *(_DWORD *)(v202 + 8) = v206 | 4;
      v209 = *(unsigned __int8 **)(v202 + 24);
      v210 = *v209;
      if (v210 == 4)
      {
        if (((*(uint64_t (**)(unsigned __int8 *))(*((_QWORD *)v209 - 1) + 48))(v209 - 8) & 1) != 0)
          goto LABEL_257;
        v210 = *v209;
      }
      if (v210 == 2 && *(_WORD *)(v209 + 1) == 29)
      {
LABEL_257:
        v198 = v208;
        v196 = v207;
        v195 = v493;
        goto LABEL_363;
      }
      v198 = v208;
      v196 = v207;
      v195 = v493;
      if (((v203 & 0x200 | v498 & 0x800 | v498 & 0x400) != 0) | v205 & 1)
      {
LABEL_261:
        if (!(v203 & 0x200 | v498 & 0x800 | v498 & 0x400))
          goto LABEL_363;
        v211 = *(_DWORD *)(v202 + 8);
        if ((v211 & 1) != 0)
        {
          v212 = *(_QWORD *)v202;
          v213 = *(_QWORD *)v202 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_DWORD *)(v202 + 8) & 0x1C00) == 0x800 && v213 == 0)
          {
            *(_DWORD *)(v202 + 8) = v211 | 4;
            llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v202 + 24));
            v212 = *(_QWORD *)v202 & 7 | v229;
            *(_QWORD *)v202 = v212;
            if (!v229)
            {
LABEL_268:
              if ((v212 & 4) != 0)
              {
                v217 = *(uint64_t **)(v202 - 8);
                v218 = *v217;
                v215 = (std::string::size_type)(v217 + 2);
                v216 = v218;
              }
              else
              {
                v215 = 0;
                v216 = 0;
              }
              v523 = 1283;
              v219 = "Undefined temporary symbol ";
LABEL_313:
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v219;
              __dst.__r_.__value_.__r.__words[2] = v215;
              v522 = v216;
              llvm::MCContext::reportError(v472, 0, (uint64_t)&__dst);
              goto LABEL_363;
            }
          }
          else if (!v213)
          {
            goto LABEL_268;
          }
        }
        goto LABEL_281;
      }
      v206 = *(_DWORD *)(v202 + 8);
    }
    else if (((v203 & 0x200 | v498 & 0x800 | v498 & 0x400) != 0) | v204 & 1)
    {
      goto LABEL_261;
    }
    if ((v206 & 0x1C00) == 0x800)
    {
      if ((*(_QWORD *)v202 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        *(_DWORD *)(v202 + 8) = v206 | 4;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v202 + 24));
        *(_QWORD *)v202 = *(_QWORD *)v202 & 7 | v220;
        if (!v220)
        {
          llvm::MCAsmLayout::getBaseSymbol((uint64_t **)v508, (const llvm::MCSymbol *)v202);
          goto LABEL_363;
        }
      }
      v206 = *(_DWORD *)(v202 + 8);
    }
    if ((v206 & 1) != 0 || (*(_WORD *)(v202 + 12) & 7) == 3)
      goto LABEL_363;
LABEL_281:
    Binding = llvm::MCSymbolELF::getBinding((llvm::MCSymbolELF *)v202);
    v222 = *(_QWORD *)v202;
    v223 = *(_QWORD *)v202 & 0xFFFFFFFFFFFFFFF8;
    if (!v223 && (*(_DWORD *)(v202 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v202 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v202 + 24));
      v222 = *(_QWORD *)v202 & 7 | v223;
      *(_QWORD *)v202 = v222;
    }
    if ((_UNKNOWN *)v223 == llvm::MCSymbol::AbsolutePseudoFragment)
    {
      v224 = 65521;
      goto LABEL_318;
    }
    v225 = *(_DWORD *)(v202 + 8);
    if (((v225 >> 10) & 7) - 3 <= 1)
    {
      if ((*(_DWORD *)(v202 + 8) & 0x1C00) == 0x1000)
        v224 = *(_DWORD *)(v202 + 16);
      else
        v224 = 65522;
      goto LABEL_318;
    }
    if ((v222 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v202 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v202 + 8) = v225 | 4;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v202 + 24));
      v222 = *(_QWORD *)v202 & 7 | v230;
      *(_QWORD *)v202 = v222;
      if (!v230)
      {
LABEL_290:
        if ((v498 & 0x400) == 0 || (v203 & 0x200) != 0)
        {
          v224 = 0;
          goto LABEL_318;
        }
        if (v519)
        {
          v226 = (v519 - 1) & ((v202 >> 4) ^ (v202 >> 9));
          v227 = *(_QWORD *)(v518[0] + 16 * v226);
          if (v202 != v227)
          {
            v263 = 1;
            while (v227 != -4096)
            {
              v264 = v226 + v263++;
              v226 = v264 & (v519 - 1);
              v227 = *(_QWORD *)(v518[0] + 16 * v226);
              if (v202 == v227)
                goto LABEL_294;
            }
            v224 = 0;
            goto LABEL_317;
          }
LABEL_294:
          v228 = v518[0] + 16 * v226;
          goto LABEL_316;
        }
        goto LABEL_310;
      }
    }
    else if ((v222 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
      goto LABEL_290;
    }
    v231 = v222 & 0xFFFFFFFFFFFFFFF8;
    if ((v222 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v202 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v202 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v202 + 24));
      v222 = *(_QWORD *)v202 & 7 | v231;
      *(_QWORD *)v202 = v222;
    }
    v232 = *(_QWORD *)(v231 + 16);
    if ((*(_BYTE *)(v232 + 44) & 4) == 0)
    {
      if ((v222 & 4) != 0)
      {
        v234 = *(uint64_t **)(v202 - 8);
        v235 = *v234;
        v215 = (std::string::size_type)(v234 + 2);
        v216 = v235;
      }
      else
      {
        v215 = 0;
        v216 = 0;
      }
      v523 = 1283;
      v219 = "Undefined section reference: ";
      goto LABEL_313;
    }
    if (*(_DWORD *)(a1 + 24) == 1)
    {
      v233 = *(_QWORD *)(v232 + 208);
      if (v233 >= 4 && *(_DWORD *)(*(_QWORD *)(v232 + 200) + v233 - 4) == 1870095406)
        goto LABEL_363;
    }
    if (v517)
    {
      v236 = (v517 - 1) & ((v232 >> 4) ^ (v232 >> 9));
      v237 = *(_QWORD *)(v516[0] + 16 * v236);
      if (v232 != v237)
      {
        v265 = 1;
        while (v237 != -4096)
        {
          v266 = v236 + v265++;
          v236 = v266 & (v517 - 1);
          v237 = *(_QWORD *)(v516[0] + 16 * v236);
          if (v232 == v237)
            goto LABEL_315;
        }
        v224 = 0;
        goto LABEL_317;
      }
LABEL_315:
      v228 = v516[0] + 16 * v236;
LABEL_316:
      v224 = *(_DWORD *)(v228 + 8);
      goto LABEL_317;
    }
LABEL_310:
    v224 = 0;
LABEL_317:
    v469 |= v224 >> 8 > 0xFE;
LABEL_318:
    v484 = v201;
    v487 = (uint64_t *)v198;
    if ((v222 & 4) != 0)
    {
      v240 = *(uint64_t **)(v202 - 8);
      v241 = *v240;
      v238 = v240 + 2;
      v239 = v241;
    }
    else
    {
      v238 = 0;
      v239 = 0;
    }
    if ((*(_WORD *)(v202 + 12) & 7) == 3)
    {
      v239 = 0;
      v238 = 0;
      if (Binding)
        goto LABEL_323;
    }
    else
    {
      v242 = sub_1C5E3DF4C(v238, (uint64_t)v238 + v239);
      llvm::StringTableBuilder::add(a1 + 32, (uint64_t)v238, v239 | ((unint64_t)v242 << 32));
      if (Binding)
      {
LABEL_323:
        if (__pa < (uint64_t *)v475)
        {
          *__pa = v202;
          __pa[1] = (uint64_t)v238;
          __pa[2] = v239;
          v201 = v484;
          *((_DWORD *)__pa + 6) = v224;
          *((_DWORD *)__pa + 7) = v484;
          __pa += 4;
LABEL_328:
          v198 = (char *)v487;
          goto LABEL_363;
        }
        v243 = v196;
        v244 = ((char *)__pa - (char *)v487) >> 5;
        v245 = v244 + 1;
        if ((unint64_t)(v244 + 1) >> 59)
          goto LABEL_592;
        if ((v475 - (char *)v487) >> 4 > v245)
          v245 = (v475 - (char *)v487) >> 4;
        if ((unint64_t)(v475 - (char *)v487) >= 0x7FFFFFFFFFFFFFE0)
          v246 = 0x7FFFFFFFFFFFFFFLL;
        else
          v246 = v245;
        if (v246)
        {
          if (v246 >> 59)
            goto LABEL_593;
          v247 = (char *)operator new(32 * v246);
        }
        else
        {
          v247 = 0;
        }
        v253 = &v247[32 * v244];
        *(_QWORD *)v253 = v202;
        *((_QWORD *)v253 + 1) = v238;
        *((_QWORD *)v253 + 2) = v239;
        v201 = v484;
        *((_DWORD *)v253 + 6) = v224;
        *((_DWORD *)v253 + 7) = v484;
        v254 = __pa;
        if (__pa == v487)
        {
          v255 = &v247[32 * v244];
          v196 = v243;
        }
        else
        {
          v259 = &v247[32 * v244];
          v196 = v243;
          do
          {
            v260 = *((_OWORD *)v254 - 1);
            v255 = v259 - 32;
            *((_OWORD *)v259 - 2) = *((_OWORD *)v254 - 2);
            *((_OWORD *)v259 - 1) = v260;
            v254 -= 4;
            v259 -= 32;
          }
          while (v254 != v487);
        }
        v475 = &v247[32 * v246];
        __pa = (uint64_t *)(v253 + 32);
        if (v487)
          operator delete(v487);
        v198 = v255;
        goto LABEL_363;
      }
    }
    if (v196 < v473)
    {
      *(_QWORD *)v196 = v202;
      *((_QWORD *)v196 + 1) = v238;
      *((_QWORD *)v196 + 2) = v239;
      v201 = v484;
      *((_DWORD *)v196 + 6) = v224;
      *((_DWORD *)v196 + 7) = v484;
      v196 += 32;
      goto LABEL_328;
    }
    v248 = v196;
    v249 = (v196 - v479) >> 5;
    v250 = v249 + 1;
    if ((unint64_t)(v249 + 1) >> 59)
      goto LABEL_592;
    if ((v473 - v479) >> 4 > v250)
      v250 = (v473 - v479) >> 4;
    if ((unint64_t)(v473 - v479) >= 0x7FFFFFFFFFFFFFE0)
      v251 = 0x7FFFFFFFFFFFFFFLL;
    else
      v251 = v250;
    if (v251)
    {
      if (v251 >> 59)
        goto LABEL_593;
      v252 = (char *)operator new(32 * v251);
    }
    else
    {
      v252 = 0;
    }
    v256 = &v252[32 * v249];
    *(_QWORD *)v256 = v202;
    *((_QWORD *)v256 + 1) = v238;
    *((_QWORD *)v256 + 2) = v239;
    v201 = v484;
    *((_DWORD *)v256 + 6) = v224;
    *((_DWORD *)v256 + 7) = v484;
    v257 = v248;
    if (v248 == v479)
    {
      v258 = v248;
      v479 = &v252[32 * v249];
      v198 = (char *)v487;
    }
    else
    {
      v261 = &v252[32 * v249];
      v198 = (char *)v487;
      do
      {
        v262 = *((_OWORD *)v257 - 1);
        *((_OWORD *)v261 - 2) = *((_OWORD *)v257 - 2);
        *((_OWORD *)v261 - 1) = v262;
        v261 -= 32;
        v257 -= 32;
      }
      while (v257 != v479);
      v258 = v479;
      v479 = v261;
    }
    v473 = &v252[32 * v251];
    v196 = v256 + 32;
    if (v258)
      operator delete(v258);
LABEL_363:
    ++v195;
    ++v201;
  }
  while (v195 != v505);
  v200 = v470;
  if ((v469 & 1) != 0)
  {
    *(_QWORD *)v524 = ".symtab_shndx";
    v525 = 259;
    v523 = 257;
    v267 = llvm::MCContext::getELFSection(v472, (llvm::Twine *)v524, 18, 0, 4, (unsigned __int8 *)&__dst, 0, -1, 0);
    v268 = sub_1C591B318((_QWORD *)a1, v267);
    *(_BYTE *)(v267 + 24) = 2;
    v269 = (v268 - 1);
  }
  else
  {
    v269 = 0xFFFFFFFFLL;
  }
  v497 = v269;
  v199 = v470 - v186;
  v197 = (uint64_t)v479;
LABEL_381:
  v270 = v199 & 0xFFFFFFFFFFFFFFE0;
  llvm::StringTableBuilder::finalizeStringTable((llvm::StringTableBuilder *)(a1 + 32), 1);
  if (v200 != v186)
    *(_QWORD *)(v186 + 24) = 0;
  v488 = v198;
  v271 = v186 + v270;
  v480 = (void *)v197;
  if ((char *)v197 == v196)
  {
    v272 = 1;
  }
  else
  {
    v506 = v196;
    v273 = 1;
    do
    {
      v274 = v186;
      v62 = v186 == v271;
      v186 = v271;
      if (!v62)
      {
        while (*(_QWORD *)(v274 + 24) <= (unint64_t)*(unsigned int *)(v197 + 28))
        {
          v275 = *(_BYTE *)(v274 + 23);
          v276 = v275 < 0;
          if (v275 >= 0)
            v277 = (_QWORD *)v274;
          else
            v277 = *(_QWORD **)v274;
          v278 = v275 & 0x7F;
          if (v276)
            v279 = *(_QWORD *)(v274 + 8);
          else
            v279 = v278;
          v280 = sub_1C5E3DF4C(v277, (uint64_t)v277 + v279);
          Offset = llvm::StringTableBuilder::getOffset(a1 + 32, (uint64_t)v277, v279 | ((unint64_t)v280 << 32));
          sub_1C591B580((uint64_t)v527, Offset, 4, 0, 0, 0, 0xFFF1u, 1);
          ++v273;
          v274 += 32;
          if (v274 == v271)
          {
            v186 = v271;
            goto LABEL_397;
          }
        }
        v186 = v274;
      }
LABEL_397:
      v282 = *(_QWORD *)v197;
      if ((*(_WORD *)(*(_QWORD *)v197 + 12) & 7) == 3)
      {
        v283 = 0;
      }
      else
      {
        v284 = *(_QWORD **)(v197 + 8);
        v285 = *(_QWORD *)(v197 + 16);
        v286 = sub_1C5E3DF4C(v284, (uint64_t)v284 + v285);
        v283 = llvm::StringTableBuilder::getOffset(a1 + 32, (uint64_t)v284, v285 | ((unint64_t)v286 << 32));
        v282 = *(_QWORD *)v197;
      }
      v272 = v273 + 1;
      *(_DWORD *)(v282 + 16) = v273;
      sub_1C591B918((uint64_t)v527, v283, v197, (uint64_t **)v508);
      v197 += 32;
      ++v273;
    }
    while ((char *)v197 != v506);
  }
  if (v186 == v271)
  {
    v287 = (uint64_t *)v488;
    v288 = __pa;
  }
  else
  {
    v287 = (uint64_t *)v488;
    v288 = __pa;
    do
    {
      v289 = *(_BYTE *)(v186 + 23);
      v290 = v289 < 0;
      if (v289 >= 0)
        v291 = (_QWORD *)v186;
      else
        v291 = *(_QWORD **)v186;
      v292 = v289 & 0x7F;
      if (v290)
        v293 = *(_QWORD *)(v186 + 8);
      else
        v293 = v292;
      v294 = sub_1C5E3DF4C(v291, (uint64_t)v291 + v293);
      v295 = llvm::StringTableBuilder::getOffset(a1 + 32, (uint64_t)v291, v293 | ((unint64_t)v294 << 32));
      sub_1C591B580((uint64_t)v527, v295, 4, 0, 0, 0, 0xFFF1u, 1);
      ++v272;
      v186 += 32;
    }
    while (v186 != v271);
  }
  *(_DWORD *)(a1 + 80) = v272;
  a3 = v508;
  if (v287 != v288)
  {
    v296 = v287;
    do
    {
      v297 = (_QWORD *)v296[1];
      v298 = v296[2];
      v299 = sub_1C5E3DF4C(v297, (uint64_t)v297 + v298);
      v300 = llvm::StringTableBuilder::getOffset(a1 + 32, (uint64_t)v297, v298 | ((unint64_t)v299 << 32));
      *(_DWORD *)(*v296 + 16) = v272;
      sub_1C591B918((uint64_t)v527, v300, (uint64_t)v296, (uint64_t **)v508);
      v296 += 4;
      ++v272;
    }
    while (v296 != v288);
  }
  v301 = *(_QWORD **)(a1 + 8);
  v302 = (*(uint64_t (**)(_QWORD *))(*v301 + 80))(v301) + v301[4] - v301[2];
  v303 = sub_1C591B4B4((uint64_t **)&v510, (unint64_t)v526, &v526);
  v303[5] = (uint64_t *)v471;
  v303[6] = (uint64_t *)v302;
  v304 = (unsigned int *)*((_QWORD *)&v528 + 1);
  v305 = v529 - *((_QWORD *)&v528 + 1);
  if (v529 != *((_QWORD *)&v528 + 1))
  {
    v306 = *(_QWORD **)(a1 + 8);
    v307 = (*(uint64_t (**)(_QWORD *))(*v306 + 80))(v306);
    v308 = v306[2];
    v309 = v307 + v306[4];
    v310 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * v497);
    __dst.__r_.__value_.__r.__words[0] = v310;
    v311 = v305 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v313 = *v304++;
      v312 = v313;
      v314 = *(llvm::raw_ostream **)(a1 + 8);
      v315 = bswap32(v313);
      if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
        v312 = v315;
      *(_DWORD *)v524 = v312;
      llvm::raw_ostream::write(v314, v524, 4uLL);
      v311 -= 4;
    }
    while (v311);
    v316 = (uint64_t *)(v309 - v308);
    v317 = *(_QWORD **)(a1 + 8);
    v318 = (*(uint64_t (**)(_QWORD *))(*v317 + 80))(v317) + v317[4] - v317[2];
    v319 = sub_1C591B4B4((uint64_t **)&v510, v310, (uint64_t **)&__dst);
    v319[5] = v316;
    v319[6] = (uint64_t *)v318;
  }
  if (v488)
    operator delete(v488);
  if (v480)
    operator delete(v480);
  if (*((_QWORD *)&v528 + 1))
  {
    v529 = *((_QWORD *)&v528 + 1);
    operator delete(*((void **)&v528 + 1));
  }
  if (v481 != v503)
  {
    v328 = (std::string::size_type *)v481;
    while (1)
    {
      __dst.__r_.__value_.__r.__words[0] = 0;
      v507 = v328;
      v329 = *v328;
      __dst.__r_.__value_.__r.__words[0] = v329;
      v330 = 1 << *(_BYTE *)(v329 + 24);
      v331 = *(_QWORD **)(a1 + 8);
      v332 = v331[4] - v331[2] + (*(uint64_t (**)(_QWORD *))(*v331 + 80))(v331);
      v494 = (v332 + v330 - 1) & -(uint64_t)v330;
      llvm::raw_ostream::write_zeros(*(llvm::raw_ostream **)(a1 + 8), v494 - v332);
      v499 = v329;
      v333 = *(_QWORD *)(v329 + 248);
      v334 = *(_QWORD *)v333 & 0xFFFFFFFFFFFFFFF8;
      if (!v334 && (*(_DWORD *)(v333 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v333 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v333 + 24));
        *(_QWORD *)v333 = *(_QWORD *)v333 & 7 | v334;
      }
      v335 = *(_QWORD *)(v334 + 16);
      v336 = *(_QWORD *)a1 + 16;
      *(_QWORD *)v527 = v335;
      v337 = sub_1C61D0AA8(v336, (uint64_t *)v527);
      v339 = v337 + 1;
      v338 = v337[1];
      v340 = v337[2];
      v341 = (_OWORD *)(v340 - 48);
      if (v338 != v340 && v338 < (unint64_t)v341)
      {
        v343 = v338 + 48;
        do
        {
          v344 = *(_OWORD *)(v343 - 48);
          v345 = *(_OWORD *)(v343 - 32);
          v346 = *(_OWORD *)(v343 - 16);
          v348 = v341[1];
          v347 = v341[2];
          *(_OWORD *)(v343 - 48) = *v341;
          *(_OWORD *)(v343 - 32) = v348;
          *(_OWORD *)(v343 - 16) = v347;
          v341[1] = v345;
          v341[2] = v346;
          *v341 = v344;
          v341 -= 3;
          v58 = v343 >= (unint64_t)v341;
          v343 += 48;
        }
        while (!v58);
      }
      (*(void (**)(_QWORD, uint64_t *, uint64_t *))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 40))(*(_QWORD *)(*(_QWORD *)a1 + 8), v482, v339);
      v349 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v337[2] - v337[1]) >> 4);
      v350 = -1431655765 * ((uint64_t)(v337[2] - v337[1]) >> 4);
      if (v350)
        break;
LABEL_488:
      v398 = *(_QWORD **)(a1 + 8);
      v399 = (*(uint64_t (**)(_QWORD *))(*v398 + 80))(v398) + v398[4] - v398[2];
      v400 = sub_1C591B4B4((uint64_t **)&v510, v499, (uint64_t **)&__dst);
      v400[5] = (uint64_t *)v494;
      v400[6] = (uint64_t *)v399;
      v328 = v507 + 1;
      a3 = v508;
      if (v507 + 1 == (std::string::size_type *)v503)
        goto LABEL_427;
    }
    v351 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12) & (*(_DWORD *)(v335 + 224) != 1879002121);
    v352 = v349 - 1;
    while (1)
    {
      v353 = *v339;
      v354 = *v339 + 48 * v352;
      v355 = *(_QWORD *)(v354 + 8);
      if (v355)
        v356 = *(unsigned int *)(v355 + 16);
      else
        v356 = 0;
      v357 = *(_QWORD *)v354;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12) & 2) != 0)
      {
        v383 = *(llvm::raw_ostream **)(a1 + 8);
        v384 = bswap64(v357);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          v357 = v384;
        *(_QWORD *)v527 = v357;
        llvm::raw_ostream::write(v383, v527, 8uLL);
        if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 10) == 8)
        {
          v385 = *(llvm::raw_ostream **)(a1 + 8);
          v386 = bswap32(v356);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            v387 = v386;
          else
            v387 = v356;
          *(_DWORD *)v527 = v387;
          llvm::raw_ostream::write(v385, v527, 4uLL);
          v388 = v353 + 48 * v352;
          v389 = *(llvm::raw_ostream **)(a1 + 8);
          v527[0] = *(_BYTE *)(v388 + 19);
          llvm::raw_ostream::write(v389, v527, 1uLL);
          v390 = *(llvm::raw_ostream **)(a1 + 8);
          v527[0] = *(_WORD *)(v388 + 18);
          llvm::raw_ostream::write(v390, v527, 1uLL);
          v391 = *(llvm::raw_ostream **)(a1 + 8);
          v527[0] = BYTE1(*(_DWORD *)(v388 + 16));
          llvm::raw_ostream::write(v391, v527, 1uLL);
          v392 = *(llvm::raw_ostream **)(a1 + 8);
          v527[0] = *(_DWORD *)(v388 + 16);
          v393 = 1;
        }
        else
        {
          v394 = *(unsigned int *)(v353 + 48 * v352 + 16) | (unint64_t)(v356 << 32);
          v392 = *(llvm::raw_ostream **)(a1 + 8);
          v395 = bswap64(v394);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            v394 = v395;
          *(_QWORD *)v527 = v394;
          v393 = 8;
        }
        llvm::raw_ostream::write(v392, v527, v393);
        if (!v351)
          goto LABEL_487;
        v396 = *(_QWORD *)(v353 + 48 * v352 + 24);
        v381 = *(llvm::raw_ostream **)(a1 + 8);
        v397 = bswap64(v396);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          v396 = v397;
        *(_QWORD *)v527 = v396;
        v382 = 8;
      }
      else
      {
        v358 = *(llvm::raw_ostream **)(a1 + 8);
        v359 = bswap32(v357);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          LODWORD(v357) = v359;
        *(_DWORD *)v527 = v357;
        llvm::raw_ostream::write(v358, v527, 4uLL);
        v360 = v353 + 48 * v352;
        v362 = *(unsigned __int8 *)(v360 + 16);
        v361 = (unsigned int *)(v360 + 16);
        v363 = v362 | ((_DWORD)v356 << 8);
        v364 = *(llvm::raw_ostream **)(a1 + 8);
        v365 = bswap32(v363);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          v363 = v365;
        *(_DWORD *)v527 = v363;
        llvm::raw_ostream::write(v364, v527, 4uLL);
        if (v351)
        {
          v366 = *(_DWORD *)(v353 + 48 * v352 + 24);
          v367 = *(llvm::raw_ostream **)(a1 + 8);
          v368 = bswap32(v366);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            v366 = v368;
          *(_DWORD *)v527 = v366;
          llvm::raw_ostream::write(v367, v527, 4uLL);
        }
        if (*(_WORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 10) != 8)
          goto LABEL_487;
        v369 = *v361;
        if ((*v361 & 0xFF00) != 0)
        {
          v370 = *(_DWORD *)v354;
          v371 = *(llvm::raw_ostream **)(a1 + 8);
          v372 = bswap32(*(_DWORD *)v354);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            v370 = v372;
          *(_DWORD *)v527 = v370;
          llvm::raw_ostream::write(v371, v527, 4uLL);
          v373 = BYTE1(v369);
          v374 = *(llvm::raw_ostream **)(a1 + 8);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            v373 = v369 >> 8 << 24;
          *(_DWORD *)v527 = v373;
          llvm::raw_ostream::write(v374, v527, 4uLL);
          v375 = *(llvm::raw_ostream **)(a1 + 8);
          *(_DWORD *)v527 = 0;
          llvm::raw_ostream::write(v375, v527, 4uLL);
          v369 = *v361;
        }
        if ((v369 & 0xFF0000) == 0)
          goto LABEL_487;
        v376 = *(_DWORD *)v354;
        v377 = *(llvm::raw_ostream **)(a1 + 8);
        v378 = bswap32(*(_DWORD *)v354);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          v376 = v378;
        *(_DWORD *)v527 = v376;
        llvm::raw_ostream::write(v377, v527, 4uLL);
        v379 = BYTE2(v369);
        v380 = *(llvm::raw_ostream **)(a1 + 8);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          v379 = HIWORD(v369) << 24;
        *(_DWORD *)v527 = v379;
        llvm::raw_ostream::write(v380, v527, 4uLL);
        v381 = *(llvm::raw_ostream **)(a1 + 8);
        *(_DWORD *)v527 = 0;
        v382 = 4;
      }
      llvm::raw_ostream::write(v381, v527, v382);
LABEL_487:
      --v352;
      if (!--v350)
        goto LABEL_488;
    }
  }
LABEL_427:
  if (*(_BYTE *)(*(_QWORD *)a1 + 65))
  {
    v320 = *(_QWORD **)(a1 + 8);
    v321 = (*(uint64_t (**)(_QWORD *))(*v320 + 80))(v320) + v320[4] - v320[2];
    v322 = *(_QWORD *)(*(_QWORD *)a1 + 72);
    v323 = *(_QWORD *)(*(_QWORD *)a1 + 80);
    while (v322 != v323)
    {
      v324 = *(unsigned int *)(*(_QWORD *)v322 + 16);
      v325 = *(llvm::raw_ostream **)(a1 + 8);
      do
      {
        v326 = v324 & 0x7F | ((v324 > 0x7F) << 7);
        v327 = (char *)*((_QWORD *)v325 + 4);
        if ((unint64_t)v327 >= *((_QWORD *)v325 + 3))
        {
          v325 = llvm::raw_ostream::write(v325, v326);
        }
        else
        {
          *((_QWORD *)v325 + 4) = v327 + 1;
          *v327 = v326;
        }
        v190 = v324 > 0x7F;
        v324 >>= 7;
      }
      while (v190);
      v322 += 8;
    }
    v401 = *(_QWORD **)(a1 + 8);
    v402 = (*(uint64_t (**)(_QWORD *))(*v401 + 80))(v401) + v401[4] - v401[2];
    v403 = sub_1C591B4B4((uint64_t **)&v510, (unint64_t)v509, &v509);
    v403[5] = (uint64_t *)v321;
    v403[6] = (uint64_t *)v402;
  }
LABEL_493:
  v404 = *(_QWORD **)(a1 + 8);
  v405 = (*(uint64_t (**)(_QWORD *))(*v404 + 80))(v404) + v404[4] - v404[2];
  llvm::StringTableBuilder::write((llvm::StringTableBuilder *)(a1 + 32), *(llvm::raw_ostream **)(a1 + 8));
  v406 = *(_QWORD **)(a1 + 8);
  v407 = (*(uint64_t (**)(_QWORD *))(*v406 + 80))(v406) + v406[4] - v406[2];
  v408 = sub_1C591B4B4((uint64_t **)&v510, (unint64_t)ELFSection, &ELFSection);
  v408[5] = (uint64_t *)v405;
  v408[6] = (uint64_t *)v407;
  v409 = *(_QWORD **)(a1 + 8);
  v410 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12);
  v411 = v409[4] - v409[2] + (*(uint64_t (**)(_QWORD *))(*v409 + 80))(v409);
  v412 = -8;
  if ((v410 & 2) == 0)
    v412 = -4;
  v413 = 7;
  if ((v410 & 2) == 0)
    v413 = 3;
  v414 = v411 + v413;
  v415 = v414 & v412;
  llvm::raw_ostream::write_zeros(*(llvm::raw_ostream **)(a1 + 8), (v414 & v412) - v411);
  v416 = (*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3;
  if ((v416 + 1) >> 8 > 0xFE)
    v417 = (v416 + 1);
  else
    v417 = 0;
  sub_1C591BBFC(a1, 0, 0, 0, 0, v417, 0, 0, 0, 0);
  v418 = *(unint64_t **)(a1 + 96);
  v504 = *(unint64_t **)(a1 + 104);
  if (v418 == v504)
  {
    v419 = *(_QWORD *)(a1 + 96);
    goto LABEL_572;
  }
  v485 = v415;
  v500 = v516[0];
  v495 = v517;
  v489 = v517 - 1;
  while (2)
  {
    v420 = *v418;
    v421 = *(_DWORD *)(*v418 + 224);
    if (v421 == 17)
      v422 = *(_DWORD *)((*(_QWORD *)(v420 + 240) & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v422 = 0;
    v423 = v511;
    if (!v511)
      goto LABEL_515;
    v424 = &v511;
    do
    {
      v425 = v424;
      v426 = v423;
      v427 = v423[4];
      v428 = (uint64_t **)(v423 + 1);
      if (v427 >= v420)
      {
        v428 = (uint64_t **)v426;
        v424 = (uint64_t **)v426;
      }
      v423 = *v428;
    }
    while (v423);
    if (v424 == &v511)
      goto LABEL_515;
    if (v427 >= v420)
      v425 = (uint64_t **)v426;
    if (v420 < (unint64_t)v425[4])
LABEL_515:
      v424 = &v511;
    if (v421 == 8)
    {
      v429 = *(const llvm::MCFragment **)(v420 + 104);
      llvm::MCAsmLayout::ensureValid(a3, v429);
      v430 = *((_QWORD *)v429 + 4);
      llvm::MCAssembler::computeFragmentSize(*(_QWORD *)a3, (uint64_t)a3, (uint64_t)v429);
      v432 = v431 + v430;
      v433 = (unint64_t)v424[5];
      v421 = *(_DWORD *)(v420 + 224);
    }
    else
    {
      v433 = (unint64_t)v424[5];
      v432 = (unint64_t)v424[6] - v433;
    }
    v434 = 0;
    if (v421 <= 16)
    {
      if (v421 == 2)
      {
        v434 = *(_DWORD *)(a1 + 80);
        v435 = *(_DWORD *)(a1 + 84);
      }
      else
      {
        v436 = v421 == 4 || v421 == 9;
        v435 = 0;
        if (!v436)
          goto LABEL_549;
        v435 = *(_DWORD *)(a1 + 88);
        v437 = *(_QWORD *)(v420 + 248);
        v438 = *(_QWORD *)v437 & 0xFFFFFFFFFFFFFFF8;
        if (!v438 && (*(_DWORD *)(v437 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v437 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v437 + 24));
          *(_QWORD *)v437 = *(_QWORD *)v437 & 7 | v438;
        }
        if (v495)
        {
          v439 = *(_QWORD *)(v438 + 16);
          v440 = ((v439 >> 4) ^ (v439 >> 9)) & v489;
          v441 = *(_QWORD *)(v500 + 16 * v440);
          if (v439 == v441)
          {
LABEL_533:
            v434 = *(_DWORD *)(v500 + 16 * v440 + 8);
            goto LABEL_549;
          }
          v443 = 1;
          while (v441 != -4096)
          {
            v444 = v440 + v443++;
            v440 = v444 & v489;
            v441 = *(_QWORD *)(v500 + 16 * v440);
            if (v439 == v441)
              goto LABEL_533;
          }
        }
        v434 = 0;
      }
      goto LABEL_549;
    }
    if (v421 > 1879002114)
    {
      v442 = v421 == 1879002115 || v421 == 1879002121;
      v435 = 0;
      if (!v442)
        goto LABEL_549;
      goto LABEL_539;
    }
    if (v421 == 17)
    {
      v435 = *(_DWORD *)(a1 + 88);
      v434 = v422;
      goto LABEL_549;
    }
    v435 = 0;
    if (v421 == 18)
    {
LABEL_539:
      v434 = 0;
      v435 = *(_DWORD *)(a1 + 88);
    }
LABEL_549:
    if ((*(_BYTE *)(v420 + 228) & 0x80) != 0)
    {
      v445 = *(_QWORD *)(v420 + 248);
      if (v445)
      {
        v446 = *(_QWORD *)v445;
        v447 = *(_QWORD *)v445 & 0xFFFFFFFFFFFFFFF8;
        if (!v447 && (*(_DWORD *)(v445 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v445 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v445 + 24));
          v446 = *(_QWORD *)v445 & 7 | v447;
          *(_QWORD *)v445 = v446;
        }
        if (v447)
        {
          v448 = v446 & 0xFFFFFFFFFFFFFFF8;
          if ((v446 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v445 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v445 + 8) |= 4u;
            llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v445 + 24));
            v446 = *(_QWORD *)v445 & 7 | v448;
            *(_QWORD *)v445 = v446;
          }
          if ((_UNKNOWN *)v448 != llvm::MCSymbol::AbsolutePseudoFragment)
          {
            v449 = v446 & 0xFFFFFFFFFFFFFFF8;
            if ((v446 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v445 + 8) & 0x1C00) == 0x800)
            {
              *(_DWORD *)(v445 + 8) |= 4u;
              llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v445 + 24));
              *(_QWORD *)v445 = *(_QWORD *)v445 & 7 | v449;
            }
            if (v495)
            {
              v450 = *(_QWORD *)(v449 + 16);
              v451 = ((v450 >> 4) ^ (v450 >> 9)) & v489;
              v452 = *(_QWORD *)(v500 + 16 * v451);
              if (v450 == v452)
              {
LABEL_558:
                v435 = *(_DWORD *)(v500 + 16 * v451 + 8);
                goto LABEL_570;
              }
              v453 = 1;
              while (v452 != -4096)
              {
                v454 = v451 + v453++;
                v451 = v454 & v489;
                v452 = *(_QWORD *)(v500 + 16 * v451);
                if (v450 == v452)
                  goto LABEL_558;
              }
            }
            v435 = 0;
          }
        }
      }
    }
LABEL_570:
    v455 = *(_QWORD **)(v420 + 200);
    v456 = *(_QWORD *)(v420 + 208);
    v457 = sub_1C5E3DF4C(v455, (uint64_t)v455 + v456);
    v458 = llvm::StringTableBuilder::getOffset(a1 + 32, (uint64_t)v455, v456 | ((unint64_t)v457 << 32));
    sub_1C591BBFC(a1, v458, *(_DWORD *)(v420 + 224), *(unsigned int *)(v420 + 228), v433, v432, v435, v434, (1 << *(_BYTE *)(v420 + 24)), *(unsigned int *)(v420 + 236));
    ++v418;
    a3 = v508;
    if (v418 != v504)
      continue;
    break;
  }
  v418 = *(unint64_t **)(a1 + 96);
  v419 = *(_QWORD *)(a1 + 104);
  v415 = v485;
LABEL_572:
  v459 = (v419 - (uint64_t)v418) >> 3;
  if ((unint64_t)(v459 - 65279) >= 0xFFFFFFFFFFFF0100)
    v460 = v459 + 1;
  else
    v460 = 0;
  v461 = *(_DWORD *)(a1 + 16) - 1;
  v462 = bswap32(v460) >> 16;
  if (v461 >= 2)
    LOWORD(v460) = v462;
  LOWORD(__dst.__r_.__value_.__l.__data_) = v460;
  v463 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12) & 2) != 0)
  {
    v467 = bswap64(v415);
    if (v461 >= 2)
      v468 = v467;
    else
      v468 = v415;
    *(_QWORD *)v527 = v468;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v463 + 104))(v463, v527, 8, 40);
    v466 = 60;
  }
  else
  {
    v464 = bswap32(v415);
    if (v461 >= 2)
      v465 = v464;
    else
      v465 = v415;
    *(_DWORD *)v527 = v465;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v463 + 104))(v463, v527, 4, 32);
    v466 = 48;
  }
  (*(void (**)(uint64_t, std::string *, uint64_t, uint64_t))(*(_QWORD *)v463 + 104))(v463, &__dst, 2, v466);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
  if (v481)
    operator delete(v481);
  if (v491)
    operator delete(v491);
  sub_1C6143384(v511);
  sub_1C61CEBB4(v514);
  MEMORY[0x1CAA32FB4](v516[0], 8);
  MEMORY[0x1CAA32FB4](v518[0], 8);
}

uint64_t sub_1C591B318(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;

  v5 = (_QWORD *)a1[13];
  v4 = a1[14];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)a1[12];
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = (_QWORD *)a1[12];
    }
    a1[12] = v13;
    a1[13] = v6;
    a1[14] = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[13] = v6;
  v16 = *(_QWORD **)(a2 + 200);
  v15 = *(_QWORD *)(a2 + 208);
  v17 = sub_1C5E3DF4C(v16, (uint64_t)v16 + v15);
  llvm::StringTableBuilder::add((uint64_t)(a1 + 4), (uint64_t)v16, v15 | ((unint64_t)v17 << 32));
  return (a1[13] - a1[12]) >> 3;
}

llvm::raw_ostream *sub_1C591B434(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream *v2;
  unsigned int v3;
  int v4;
  const char *v5;
  llvm::raw_ostream *v6;
  size_t v7;
  llvm::raw_ostream *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  int v13;

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 12) & 2) != 0)
  {
    v8 = *(llvm::raw_ostream **)(a1 + 8);
    v9 = bswap64(a2);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      v10 = v9;
    else
      v10 = a2;
    v12 = v10;
    v5 = (const char *)&v12;
    v6 = v8;
    v7 = 8;
  }
  else
  {
    v2 = *(llvm::raw_ostream **)(a1 + 8);
    v3 = bswap32(a2);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      v4 = v3;
    else
      v4 = a2;
    v13 = v4;
    v5 = (const char *)&v13;
    v6 = v2;
    v7 = 4;
  }
  return llvm::raw_ostream::write(v6, v5, v7);
}

uint64_t **sub_1C591B4B4(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x38uLL);
    v10 = *a3;
    *v7 = 0;
    v7[1] = 0;
    v7[5] = 0;
    v7[6] = 0;
    v7[4] = v10;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

llvm::raw_ostream *sub_1C591B580(uint64_t a1, unsigned int a2, char a3, unint64_t a4, unint64_t a5, char a6, unsigned int a7, int a8)
{
  unsigned int v8;
  char v9;
  char v12;
  char **v16;
  unsigned int *v17;
  unsigned int *v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  llvm::raw_ostream *v35;
  unsigned int v36;
  unsigned int v37;
  llvm::raw_ostream *v38;
  llvm::raw_ostream *v39;
  llvm::raw_ostream *v40;
  unsigned int v41;
  __int16 v42;
  llvm::raw_ostream *v43;
  unint64_t v44;
  unint64_t v45;
  llvm::raw_ostream *v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  llvm::raw_ostream *v50;
  unsigned int v51;
  int v52;
  llvm::raw_ostream *v53;
  unsigned int v54;
  int v55;
  llvm::raw_ostream *v56;
  llvm::raw_ostream *v57;
  unsigned int v58;
  __int16 v59;
  llvm::raw_ostream *result;
  char v61;
  char v62;
  char v63[8];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if (a7 >> 8 < 0xFF)
    a8 = 1;
  v17 = *(unsigned int **)(a1 + 16);
  v18 = *(unsigned int **)(a1 + 24);
  v16 = (char **)(a1 + 16);
  if ((a8 & 1) != 0)
  {
    if (v17 == v18)
      goto LABEL_43;
    v19 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)v18 < v19)
    {
      *v18 = 0;
      v20 = v18 + 1;
LABEL_42:
      *(_QWORD *)(a1 + 24) = v20;
      goto LABEL_43;
    }
    v61 = a3;
    v62 = a6;
    v23 = v18 - v17;
    v24 = v23 + 1;
    if (!((unint64_t)(v23 + 1) >> 62))
    {
      v25 = v19 - (_QWORD)v17;
      if (v25 >> 1 > v24)
        v24 = v25 >> 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (!v26)
      {
        v27 = 0;
LABEL_33:
        v31 = (unsigned int *)&v27[4 * v23];
        *v31 = 0;
        v32 = v31;
        do
        {
          v33 = *--v18;
          *--v32 = v33;
        }
        while (v18 != v17);
LABEL_39:
        v20 = v31 + 1;
        *(_QWORD *)(a1 + 16) = v32;
        *(_QWORD *)(a1 + 24) = v31 + 1;
        *(_QWORD *)(a1 + 32) = &v27[4 * v26];
        v12 = v61;
        if (v17)
          operator delete(v17);
        v9 = v62;
        goto LABEL_42;
      }
      if (!(v26 >> 62))
      {
        v27 = (char *)operator new(4 * v26);
        goto LABEL_33;
      }
LABEL_71:
      sub_1C4764EE4();
    }
    goto LABEL_70;
  }
  if (v17 == v18)
  {
    v21 = *(unsigned int *)(a1 + 40);
    if (!(_DWORD)v21)
      goto LABEL_43;
    sub_1C4D63CD0(v16, v21);
    v17 = *(unsigned int **)(a1 + 16);
    v18 = *(unsigned int **)(a1 + 24);
  }
  if (v17 != v18)
  {
    v22 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)v18 < v22)
    {
      *v18 = v8;
      v20 = v18 + 1;
      goto LABEL_42;
    }
    v61 = v12;
    v62 = v9;
    v28 = v18 - v17;
    v29 = v28 + 1;
    if (!((unint64_t)(v28 + 1) >> 62))
    {
      v30 = v22 - (_QWORD)v17;
      if (v30 >> 1 > v29)
        v29 = v30 >> 1;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v29;
      if (v26)
      {
        if (v26 >> 62)
          goto LABEL_71;
        v27 = (char *)operator new(4 * v26);
      }
      else
      {
        v27 = 0;
      }
      v31 = (unsigned int *)&v27[4 * v28];
      *v31 = v8;
      v32 = v31;
      do
      {
        v34 = *--v18;
        *--v32 = v34;
      }
      while (v18 != v17);
      goto LABEL_39;
    }
LABEL_70:
    abort();
  }
LABEL_43:
  if (!a8)
    v8 = -1;
  v35 = *(llvm::raw_ostream **)(*(_QWORD *)a1 + 8);
  v36 = bswap32(a2);
  if ((*(_DWORD *)(*(_QWORD *)a1 + 16) - 1) >= 2)
    v37 = v36;
  else
    v37 = a2;
  if (*(_BYTE *)(a1 + 8))
  {
    *(_DWORD *)v63 = v37;
    llvm::raw_ostream::write(v35, v63, 4uLL);
    v38 = *(llvm::raw_ostream **)(*(_QWORD *)a1 + 8);
    v63[0] = v12;
    llvm::raw_ostream::write(v38, v63, 1uLL);
    v39 = *(llvm::raw_ostream **)(*(_QWORD *)a1 + 8);
    v63[0] = v9;
    llvm::raw_ostream::write(v39, v63, 1uLL);
    v40 = *(llvm::raw_ostream **)(*(_QWORD *)a1 + 8);
    v41 = bswap32(v8) >> 16;
    if ((*(_DWORD *)(*(_QWORD *)a1 + 16) - 1) >= 2)
      v42 = v41;
    else
      v42 = v8;
    *(_WORD *)v63 = v42;
    llvm::raw_ostream::write(v40, v63, 2uLL);
    v43 = *(llvm::raw_ostream **)(*(_QWORD *)a1 + 8);
    v44 = bswap64(a4);
    if ((*(_DWORD *)(*(_QWORD *)a1 + 16) - 1) >= 2)
      v45 = v44;
    else
      v45 = a4;
    *(_QWORD *)v63 = v45;
    llvm::raw_ostream::write(v43, v63, 8uLL);
    v46 = *(llvm::raw_ostream **)(*(_QWORD *)a1 + 8);
    v47 = bswap64(a5);
    if ((*(_DWORD *)(*(_QWORD *)a1 + 16) - 1) >= 2)
      v48 = v47;
    else
      v48 = a5;
    *(_QWORD *)v63 = v48;
    v49 = 8;
  }
  else
  {
    *(_DWORD *)v63 = v37;
    llvm::raw_ostream::write(v35, v63, 4uLL);
    v50 = *(llvm::raw_ostream **)(*(_QWORD *)a1 + 8);
    v51 = bswap32(a4);
    if ((*(_DWORD *)(*(_QWORD *)a1 + 16) - 1) >= 2)
      v52 = v51;
    else
      v52 = a4;
    *(_DWORD *)v63 = v52;
    llvm::raw_ostream::write(v50, v63, 4uLL);
    v53 = *(llvm::raw_ostream **)(*(_QWORD *)a1 + 8);
    v54 = bswap32(a5);
    if ((*(_DWORD *)(*(_QWORD *)a1 + 16) - 1) >= 2)
      v55 = v54;
    else
      v55 = a5;
    *(_DWORD *)v63 = v55;
    llvm::raw_ostream::write(v53, v63, 4uLL);
    v56 = *(llvm::raw_ostream **)(*(_QWORD *)a1 + 8);
    v63[0] = v12;
    llvm::raw_ostream::write(v56, v63, 1uLL);
    v57 = *(llvm::raw_ostream **)(*(_QWORD *)a1 + 8);
    v63[0] = v9;
    llvm::raw_ostream::write(v57, v63, 1uLL);
    v46 = *(llvm::raw_ostream **)(*(_QWORD *)a1 + 8);
    v58 = bswap32(v8) >> 16;
    if ((*(_DWORD *)(*(_QWORD *)a1 + 16) - 1) >= 2)
      v59 = v58;
    else
      v59 = v8;
    *(_WORD *)v63 = v59;
    v49 = 2;
  }
  result = llvm::raw_ostream::write(v46, v63, v49);
  ++*(_DWORD *)(a1 + 40);
  return result;
}

llvm::raw_ostream *sub_1C591B918(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t **this)
{
  const llvm::MCSymbol *v8;
  const llvm::MCSymbol *BaseSymbol;
  _BOOL4 v10;
  char Binding;
  unsigned int v12;
  unint64_t v13;
  const llvm::MCSymbol *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  const llvm::MCSymbol *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int isThumbFunc;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;

  v8 = *(const llvm::MCSymbol **)a3;
  BaseSymbol = llvm::MCAsmLayout::getBaseSymbol(this, *(const llvm::MCSymbol **)a3);
  v34 = a1;
  v33 = a2;
  if (BaseSymbol)
    v10 = ((*((_DWORD *)v8 + 2) >> 10) & 7u) - 3 < 2;
  else
    v10 = 1;
  Binding = llvm::MCSymbolELF::getBinding(v8);
  v12 = *((_WORD *)v8 + 6) & 7;
  if (v12 > 5)
  {
LABEL_11:
    LOBYTE(v13) = 10;
  }
  else
  {
    v13 = 0xA060503020100uLL >> (8 * v12);
    v14 = v8;
    while ((*((_DWORD *)v14 + 2) & 0x1C00) == 0x800)
    {
      *((_DWORD *)v14 + 2) |= 4u;
      v15 = *((_QWORD *)v14 + 3);
      if (*(_BYTE *)v15 != 2 || v12 > 4 || *(_WORD *)(v15 + 1))
        break;
      v14 = *(const llvm::MCSymbol **)(v15 + 16);
      v12 = *((_WORD *)v14 + 6) & 7;
      if (v12 >= 6)
        goto LABEL_11;
    }
  }
  if (BaseSymbol)
  {
    v16 = *((_WORD *)BaseSymbol + 6) & 7;
    v17 = 0xA060503020100uLL >> (8 * v16);
    v18 = v13 - 1;
    v19 = 7u >> v16;
    switch(v18)
    {
      case 0:
        if ((v17 & 0xFE) == 0)
          LOBYTE(v17) = 1;
        break;
      case 1:
        v20 = ((3u >> v16) & 1 | (v16 == 5)) == 0;
        v21 = 2;
        goto LABEL_20;
      case 5:
        v20 = ((v16 == 6) | v19 & 1) == 0;
        v21 = 6;
        goto LABEL_20;
      case 9:
        v20 = (v19 & 1 | (v16 == 5)) == 0;
        v21 = 10;
LABEL_20:
        if (!v20)
          LOBYTE(v17) = v21;
        break;
      default:
        break;
    }
  }
  else
  {
    LOBYTE(v17) = v13;
  }
  v22 = *((unsigned __int16 *)v8 + 6);
  v23 = *(const llvm::MCSymbol **)a3;
  v24 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  if (((v24 >> 10) & 7) - 3 > 1)
  {
    v35 = 0;
    v26 = 0;
    if (sub_1C59415F0((llvm::MCAsmLayout *)this, (uint64_t *)v23, 0, &v35))
    {
      isThumbFunc = llvm::MCAssembler::isThumbFunc((llvm::MCAssembler *)*this, v23);
      v26 = v35 | isThumbFunc;
    }
    v23 = *(const llvm::MCSymbol **)a3;
  }
  else
  {
    v20 = ((v24 >> 13) & 0x1F) == 0;
    v25 = 1 << (((v24 >> 13) & 0x1F) - 1);
    if (v20)
      v26 = 0;
    else
      v26 = v25;
  }
  v28 = *((_QWORD *)v23 + 4);
  if (BaseSymbol && !v28)
  {
    v28 = *((_QWORD *)BaseSymbol + 4);
    while ((*((_DWORD *)v8 + 2) & 0x1C00) == 0x800)
    {
      v29 = *((_QWORD *)v8 + 3);
      if (*(_BYTE *)v29 != 2)
        break;
      v8 = *(const llvm::MCSymbol **)(v29 + 16);
      if (*((_QWORD *)v8 + 4))
      {
        v28 = *((_QWORD *)v8 + 4);
        goto LABEL_37;
      }
    }
  }
  if (v28)
  {
LABEL_37:
    v35 = 0;
    llvm::MCExpr::evaluateAsAbsolute(v28, &v35);
    if ((v30 & 1) == 0)
      llvm::report_fatal_error((llvm *)"Size expression must be absolute.", (const char *)1);
    v31 = v35;
  }
  else
  {
    v31 = 0;
  }
  return sub_1C591B580(v34, v33, v17 | (16 * Binding), v26, v31, (v22 >> 2) & 0xE0 | (v22 >> 5) & 3, *(_DWORD *)(a3 + 24), v10);
}

llvm::raw_ostream *sub_1C591BBFC(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, unint64_t a5, unint64_t a6, unsigned int a7, unsigned int a8, unint64_t a9, unint64_t a10)
{
  llvm::raw_ostream *v17;
  unsigned int v18;
  unsigned int v19;
  llvm::raw_ostream *v20;
  unsigned int v21;
  unsigned int v22;
  llvm::raw_ostream *v23;
  unsigned int v24;
  unsigned int v25;
  llvm::raw_ostream *v26;
  unsigned int v27;
  unsigned int v28;
  char v30[4];

  v17 = *(llvm::raw_ostream **)(a1 + 8);
  v18 = bswap32(a2);
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
    v19 = v18;
  else
    v19 = a2;
  *(_DWORD *)v30 = v19;
  llvm::raw_ostream::write(v17, v30, 4uLL);
  v20 = *(llvm::raw_ostream **)(a1 + 8);
  v21 = bswap32(a3);
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
    v22 = v21;
  else
    v22 = a3;
  *(_DWORD *)v30 = v22;
  llvm::raw_ostream::write(v20, v30, 4uLL);
  sub_1C591B434(a1, a4);
  sub_1C591B434(a1, 0);
  sub_1C591B434(a1, a5);
  sub_1C591B434(a1, a6);
  v23 = *(llvm::raw_ostream **)(a1 + 8);
  v24 = bswap32(a7);
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
    v25 = v24;
  else
    v25 = a7;
  *(_DWORD *)v30 = v25;
  llvm::raw_ostream::write(v23, v30, 4uLL);
  v26 = *(llvm::raw_ostream **)(a1 + 8);
  v27 = bswap32(a8);
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
    v28 = v27;
  else
    v28 = a8;
  *(_DWORD *)v30 = v28;
  llvm::raw_ostream::write(v26, v30, 4uLL);
  sub_1C591B434(a1, a9);
  return sub_1C591B434(a1, a10);
}

uint64_t sub_1C591BD44(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E817F330;
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 40), 8);
  sub_1C62B4424((unsigned int *)(a1 + 16));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 16), 8);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1C591BDB8(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E817F330;
  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 40), 8);
  sub_1C62B4424((unsigned int *)(a1 + 16));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 16), 8);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C591BE3C(uint64_t a1, uint64_t a2, llvm::MCAsmLayout *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *__p;
  void *v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(unsigned __int8 *)(a1 + 112);
  v15 = a1;
  v16 = v6;
  v17 = v7;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v23 = 0x100000000;
  v24 = 0;
  v22 = 1;
  v26 = 0;
  v27 = 0;
  __p = 0;
  sub_1C5918AC8((uint64_t)&v15, a2, a3);
  v9 = v8;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v19, 8);
  v10 = *(_QWORD *)(a1 + 104);
  v11 = *(unsigned __int8 *)(a1 + 112);
  v15 = a1;
  v16 = v10;
  v17 = v11;
  v18 = 2;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v23 = 0x100000000;
  v24 = 0;
  v22 = 1;
  v26 = 0;
  v27 = 0;
  __p = 0;
  sub_1C5918AC8((uint64_t)&v15, a2, a3);
  v13 = v12;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v19, 8);
  return v13 + v9;
}

uint64_t sub_1C591BF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  const char *v8;
  const char *v9;
  __int16 v10;

  v5 = *(_QWORD *)(a4 + 208);
  if (v5 >= 4 && *(_DWORD *)(*(_QWORD *)(a4 + 200) + v5 - 4) == 1870095406)
  {
    v8 = "A dwo section may not contain relocations";
LABEL_10:
    v9 = v8;
    v10 = 259;
    llvm::MCContext::reportError(a2, a3, (uint64_t)&v9);
    return 0;
  }
  if (a5)
  {
    v6 = *(_QWORD *)(a5 + 208);
    if (v6 >= 4 && *(_DWORD *)(*(_QWORD *)(a5 + 200) + v6 - 4) == 1870095406)
    {
      v8 = "A relocation may not refer to a dwo section";
      goto LABEL_10;
    }
  }
  return 1;
}

char **llvm::MCAsmBackend::getFixupKindInfo(uint64_t a1, unsigned int a2)
{
  return &(&off_1E817F4F8)[3 * a2];
}

uint64_t llvm::MCAsmBackend::fixupNeedsRelaxationAdvanced(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2, a4, a5, a6);
  else
    return 1;
}

_QWORD *sub_1C591C030(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E817F790;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E817F7F8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t llvm::MCAsmInfo::addInitialFrameState(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;
  uint64_t result;

  v4 = a1[55];
  if (v4 >= a1[56])
  {
    result = sub_1C515FD68(a1 + 54, a2);
  }
  else
  {
    v5 = *(_OWORD *)a2;
    *(_OWORD *)(v4 + 12) = *(_OWORD *)(a2 + 12);
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    sub_1C515FEEC((_QWORD *)(v4 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32));
    v6 = (_BYTE *)(v4 + 56);
    if (*(char *)(a2 + 79) < 0)
    {
      sub_1C47EBC30(v6, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
    }
    else
    {
      v7 = *(_OWORD *)(a2 + 56);
      *(_QWORD *)(v4 + 72) = *(_QWORD *)(a2 + 72);
      *(_OWORD *)v6 = v7;
    }
    result = v4 + 80;
  }
  a1[55] = result;
  return result;
}

uint64_t llvm::MCAsmInfo::getExprForFDESymbol(llvm::MCAsmInfo *this, const llvm::MCSymbol *a2, char a3, llvm::MCStreamer *a4)
{
  llvm::MCContext *v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  unint64_t TempSymbol;
  unint64_t v12;

  v7 = (llvm::MCContext *)*((_QWORD *)a4 + 1);
  result = sub_1C484358C((uint64_t)v7 + 192, 24, 3);
  v9 = *(unsigned __int8 *)(*((_QWORD *)v7 + 19) + 18) << 16;
  *(_BYTE *)result = 2;
  *(_DWORD *)(result + 1) = v9 | (*(unsigned __int8 *)(result + 4) << 24);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a2;
  if ((a3 & 0x10) != 0)
  {
    v10 = result;
    TempSymbol = llvm::MCContext::createTempSymbol(v7);
    (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a4 + 192))(a4, TempSymbol, 0);
    v12 = llvm::MCSymbolRefExpr::create(TempSymbol, 0, (uint64_t)v7, 0);
    return llvm::MCBinaryExpr::create(18, v10, v12, (uint64_t)v7, 0);
  }
  return result;
}

uint64_t llvm::MCAsmInfo::isAcceptableChar(llvm::MCAsmInfo *this, int a2)
{
  unint64_t v3;
  unsigned int v4;

  if (a2 == 64)
    return *((_BYTE *)this + 180) != 0;
  v3 = (0x800000000000401uLL >> (a2 - 36)) & 1;
  if ((a2 - 36) > 0x3B)
    LODWORD(v3) = 0;
  if (((a2 & 0xDF) - 65) >= 0x1Au)
    v4 = v3;
  else
    v4 = 1;
  if ((a2 - 48) >= 0xA)
    return v4;
  else
    return 1;
}

uint64_t llvm::MCAsmInfo::isValidUnquotedName(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  BOOL v8;

  if (!a3)
    return 0;
  v5 = a3 - 1;
  do
  {
    v6 = *a2++;
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, v6);
    if ((_DWORD)result)
      v8 = v5 == 0;
    else
      v8 = 1;
    --v5;
  }
  while (!v8);
  return result;
}

_QWORD *sub_1C591C2D0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817F7F8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C591C310(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C591C430(v17);
  }
}

uint64_t sub_1C591C430(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C591C448(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E817F790;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E817F7F8;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C591C4D8(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C591C4E4(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C591C4F4(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E817F848;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C591C560(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C591C574(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C591C57C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E817F7F8;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C591C5CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C591C5D4(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C591C5E8(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C591C5FC(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C591C610(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1C591C640()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C591C654()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E817F888;
  return result;
}

void sub_1C591C678(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817F888;
}

__n128 sub_1C591C694(_WORD *a1, __n128 *a2, int **a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&llvm::UseLEB128Directives, "use-leb128-directives", 0x15uLL);
  word_1ED83494A = (32 * (*a1 & 3)) | word_1ED83494A & 0xFF9F;
  result = *a2;
  xmmword_1ED834960 = (__int128)*a2;
  v7 = *a3;
  dword_1ED8349C0 = **a3;
  byte_1ED8349D4 = 1;
  dword_1ED8349D0 = *v7;
  return result;
}

uint64_t sub_1C591C718()
{
  uint64_t v0;
  _QWORD *v2;
  int *v3;
  int *v4;
  __int128 v5;
  int v6;
  int v7;
  char *v8;
  int **v9;
  int *v10;
  char *v11;
  __int128 v12;
  int v13;
  _BOOL4 v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  _BOOL4 v25;
  int *v26[2];
  __int128 v27;
  uint64_t (**v28)();
  int v29;
  char v30;
  unint64_t v31;
  int v32;
  __n128 v33;
  _QWORD v34[2];
  int v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  int v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  int v45;
  const char *v46;
  uint64_t v47;
  _QWORD v48[7];

  v48[5] = *MEMORY[0x1E0C80C00];
  v33.n128_u64[0] = (unint64_t)v34;
  v34[0] = "Default";
  v34[1] = 7;
  v35 = 0;
  v36 = "Default for platform";
  v37 = 20;
  v38 = "Enable";
  v39 = 6;
  v40 = 1;
  v41 = "Enabled";
  v42 = 7;
  v43 = "Disable";
  v44 = 7;
  v45 = 2;
  v46 = "Disabled";
  v47 = 8;
  v33.n128_u64[1] = 0x400000003;
  v0 = sub_1C47AD050((uint64_t)&qword_1ED819540, 0, 0);
  dword_1ED8195C0 = 0;
  qword_1ED8195C8 = (uint64_t)&off_1E817F848;
  *(_QWORD *)&dword_1ED8195D0 = 0;
  qword_1ED819540 = (uint64_t)off_1E817F790;
  qword_1ED8195D8 = (uint64_t)&off_1E817F7F8;
  qword_1ED8195E0 = (uint64_t)&qword_1ED819540;
  qword_1ED8195E8 = (uint64_t)&unk_1ED8195F8;
  qword_1ED8195F0 = 0x800000000;
  qword_1ED819778 = (uint64_t)&off_1E817F888;
  qword_1ED819790 = (uint64_t)&qword_1ED819778;
  llvm::cl::Option::setArgStr(v0, "dwarf-extended-loc", 0x12uLL);
  word_1ED81954A = word_1ED81954A & 0xFF9F | 0x20;
  qword_1ED819560 = (uint64_t)"Disable emission of the extended flags in .loc directives.";
  unk_1ED819568 = 58;
  v2 = v34;
  do
  {
    v3 = (int *)*v2;
    v4 = (int *)v2[1];
    v5 = *(_OWORD *)(v2 + 3);
    v6 = *((_DWORD *)v2 + 4);
    v26[0] = *(int **)v2;
    v26[1] = v4;
    v27 = v5;
    v28 = &off_1E817F848;
    v30 = 1;
    v29 = v6;
    v7 = qword_1ED8195F0;
    v8 = (char *)qword_1ED8195E8;
    if (qword_1ED8195F0 >= HIDWORD(qword_1ED8195F0))
    {
      v15 = qword_1ED8195E8 <= (unint64_t)v26
         && qword_1ED8195E8 + 48 * (unint64_t)qword_1ED8195F0 > (unint64_t)v26;
      v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v26 - qword_1ED8195E8) >> 4);
      v25 = v15;
      if (!v15)
        v16 = -1;
      v24 = v16;
      v31 = 0;
      v8 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED8195E8, qword_1ED8195F0 + 1, 48, &v31);
      v17 = (_OWORD *)qword_1ED8195E8;
      if ((_DWORD)qword_1ED8195F0)
      {
        v18 = qword_1ED8195E8 + 48 * qword_1ED8195F0;
        v19 = v8;
        do
        {
          v20 = v17[1];
          *(_OWORD *)v19 = *v17;
          *((_OWORD *)v19 + 1) = v20;
          *((_QWORD *)v19 + 4) = &off_1E817F868;
          v21 = *((_DWORD *)v17 + 10);
          v19[44] = *((_BYTE *)v17 + 44);
          *((_DWORD *)v19 + 10) = v21;
          *((_QWORD *)v19 + 4) = &off_1E817F848;
          v17 += 3;
          v19 += 48;
        }
        while (v17 != (_OWORD *)v18);
        v17 = (_OWORD *)qword_1ED8195E8;
      }
      v22 = v31;
      if (v17 != (_OWORD *)&unk_1ED8195F8)
      {
        v23 = v31;
        free(v17);
        v22 = v23;
      }
      qword_1ED8195E8 = (uint64_t)v8;
      HIDWORD(qword_1ED8195F0) = v22;
      v9 = v26;
      if (v25)
      {
        v9 = (int **)&v8[48 * v24];
        v10 = (int *)(v9 + 5);
      }
      else
      {
        v10 = &v29;
      }
      v7 = qword_1ED8195F0;
    }
    else
    {
      v9 = v26;
      v10 = &v29;
    }
    v11 = &v8[48 * v7];
    v12 = *((_OWORD *)v9 + 1);
    *(_OWORD *)v11 = *(_OWORD *)v9;
    *((_OWORD *)v11 + 1) = v12;
    *((_QWORD *)v11 + 4) = &off_1E817F868;
    v13 = *v10;
    v11[44] = *((_BYTE *)v10 + 4);
    *((_DWORD *)v11 + 10) = v13;
    *((_QWORD *)v11 + 4) = &off_1E817F848;
    LODWORD(qword_1ED8195F0) = qword_1ED8195F0 + 1;
    llvm::cl::AddLiteralOption(qword_1ED8195E0, (unsigned __int8 *)v3, (size_t)v4);
    v2 += 5;
  }
  while (v2 != v48);
  dword_1ED8195C0 = 0;
  byte_1ED8195D4 = 1;
  dword_1ED8195D0 = 0;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED819540);
  if ((_QWORD *)v33.n128_u64[0] != v34)
    free((void *)v33.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C591C030, &qword_1ED819540, &dword_1C475E000);
  LODWORD(v31) = 1;
  v33.n128_u64[0] = (unint64_t)"Disable the usage of LEB128 directives, and generate .byte instead.";
  v33.n128_u64[1] = 67;
  v32 = 0;
  v26[0] = &v32;
  sub_1C62B4C34(&v31, &v33, v26);
  return __cxa_atexit((void (*)(void *))sub_1C506F830, &llvm::UseLEB128Directives, &dword_1C475E000);
}

uint64_t llvm::MCAsmInfoCOFF::MCAsmInfoCOFF(llvm::MCAsmInfoCOFF *this)
{
  uint64_t result;

  result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(_QWORD *)result = &off_1E817F8D0;
  *(_BYTE *)(result + 354) = 0;
  *(_WORD *)(result + 363) = 256;
  *(_DWORD *)(result + 356) = 1;
  *(_QWORD *)(result + 384) = "\t.weak\t";
  *(_BYTE *)(result + 394) = 1;
  *(_DWORD *)(result + 396) = 0;
  *(_QWORD *)(result + 400) = 0;
  *(_BYTE *)(result + 408) = 1;
  *(_BYTE *)(result + 338) = 1;
  *(_BYTE *)(result + 472) = 0;
  *(_WORD *)(result + 21) = 257;
  return result;
}

{
  uint64_t result;

  result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(_QWORD *)result = &off_1E817F8D0;
  *(_BYTE *)(result + 354) = 0;
  *(_WORD *)(result + 363) = 256;
  *(_DWORD *)(result + 356) = 1;
  *(_QWORD *)(result + 384) = "\t.weak\t";
  *(_BYTE *)(result + 394) = 1;
  *(_DWORD *)(result + 396) = 0;
  *(_QWORD *)(result + 400) = 0;
  *(_BYTE *)(result + 408) = 1;
  *(_BYTE *)(result + 338) = 1;
  *(_BYTE *)(result + 472) = 0;
  *(_WORD *)(result + 21) = 257;
  return result;
}

uint64_t llvm::MCAsmInfoMicrosoft::MCAsmInfoMicrosoft(llvm::MCAsmInfoMicrosoft *this)
{
  uint64_t result;

  result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(_BYTE *)(result + 354) = 0;
  *(_DWORD *)(result + 356) = 1;
  *(_WORD *)(result + 363) = 256;
  *(_QWORD *)(result + 384) = "\t.weak\t";
  *(_BYTE *)(result + 394) = 1;
  *(_DWORD *)(result + 396) = 0;
  *(_QWORD *)(result + 400) = 0;
  *(_BYTE *)(result + 408) = 1;
  *(_BYTE *)(result + 338) = 1;
  *(_BYTE *)(result + 472) = 0;
  *(_WORD *)(result + 21) = 257;
  *(_QWORD *)result = &off_1E817F950;
  return result;
}

{
  uint64_t result;

  result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(_BYTE *)(result + 354) = 0;
  *(_DWORD *)(result + 356) = 1;
  *(_WORD *)(result + 363) = 256;
  *(_QWORD *)(result + 384) = "\t.weak\t";
  *(_BYTE *)(result + 394) = 1;
  *(_DWORD *)(result + 396) = 0;
  *(_QWORD *)(result + 400) = 0;
  *(_BYTE *)(result + 408) = 1;
  *(_BYTE *)(result + 338) = 1;
  *(_BYTE *)(result + 472) = 0;
  *(_WORD *)(result + 21) = 257;
  *(_QWORD *)result = &off_1E817F950;
  return result;
}

uint64_t llvm::MCAsmInfoGNUCOFF::MCAsmInfoGNUCOFF(llvm::MCAsmInfoGNUCOFF *this)
{
  uint64_t result;

  result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(_BYTE *)(result + 354) = 0;
  *(_DWORD *)(result + 356) = 1;
  *(_WORD *)(result + 363) = 256;
  *(_QWORD *)(result + 384) = "\t.weak\t";
  *(_BYTE *)(result + 394) = 1;
  *(_DWORD *)(result + 396) = 0;
  *(_QWORD *)(result + 400) = 0;
  *(_BYTE *)(result + 408) = 1;
  *(_BYTE *)(result + 338) = 1;
  *(_BYTE *)(result + 472) = 0;
  *(_QWORD *)result = &off_1E817F9D0;
  *(_WORD *)(result + 21) = 0;
  return result;
}

{
  uint64_t result;

  result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(_BYTE *)(result + 354) = 0;
  *(_DWORD *)(result + 356) = 1;
  *(_WORD *)(result + 363) = 256;
  *(_QWORD *)(result + 384) = "\t.weak\t";
  *(_BYTE *)(result + 394) = 1;
  *(_DWORD *)(result + 396) = 0;
  *(_QWORD *)(result + 400) = 0;
  *(_BYTE *)(result + 408) = 1;
  *(_BYTE *)(result + 338) = 1;
  *(_BYTE *)(result + 472) = 0;
  *(_QWORD *)result = &off_1E817F9D0;
  *(_WORD *)(result + 21) = 0;
  return result;
}

uint64_t sub_1C591CD60(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E817F718;
  v3 = (void **)(a1 + 432);
  sub_1C515FCE0(&v3);
  return a1;
}

void sub_1C591CDA8(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = off_1E817F718;
  v1 = (void **)(a1 + 432);
  sub_1C515FCE0(&v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C591CE00(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E817F718;
  v3 = (void **)(a1 + 432);
  sub_1C515FCE0(&v3);
  return a1;
}

void sub_1C591CE48(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = off_1E817F718;
  v1 = (void **)(a1 + 432);
  sub_1C515FCE0(&v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C591CEA0(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E817F718;
  v3 = (void **)(a1 + 432);
  sub_1C515FCE0(&v3);
  return a1;
}

void sub_1C591CEE8(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = off_1E817F718;
  v1 = (void **)(a1 + 432);
  sub_1C515FCE0(&v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::MCAsmInfoDarwin::isSectionAtomizableBySymbols(uint64_t a1, uint64_t a2)
{
  int v2;
  _DWORD *v4;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_DWORD *)(a2 + 240);
  if (v2 == 2)
    return 0;
  if (!*(_BYTE *)(a2 + 239))
  {
    v4 = (_DWORD *)(a2 + 224);
    if (strlen((const char *)(a2 + 224)) == 6 && *v4 == 1094999903 && *(_WORD *)(a2 + 228) == 16724)
    {
      if (*(_QWORD *)(a2 + 208) == 10)
      {
        v7 = *(uint64_t **)(a2 + 200);
        v8 = *v7;
        v9 = *((unsigned __int16 *)v7 + 4);
        if (v8 == 0x6972747366635F5FLL && v9 == 26478)
          return 0;
      }
      if (*(_QWORD *)(a2 + 208) == 16)
      {
        v11 = *(uint64_t **)(a2 + 200);
        v13 = *v11;
        v12 = v11[1];
        if (v13 == 0x635F636A626F5F5FLL && v12 == 0x736665727373616CLL)
          return 0;
      }
    }
  }
  if (v2 <= 0x14u)
    return (0xF9907u >> v2) & 1;
  return 1;
}

unint64_t llvm::MCAsmInfoELF::getNonexecutableStackSection(llvm::MCAsmInfoELF *this, llvm::MCContext *a2)
{
  const char *v3;
  __int16 v4;
  unsigned __int8 v5[32];
  __int16 v6;

  v3 = ".note.GNU-stack";
  v4 = 259;
  v6 = 257;
  return llvm::MCContext::getELFSection((uint64_t)a2, (llvm::Twine *)&v3, 1, 0, 0, v5, 0, -1, 0);
}

uint64_t llvm::MCAsmInfoELF::MCAsmInfoELF(llvm::MCAsmInfoELF *this)
{
  uint64_t result;

  result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(_QWORD *)result = &off_1E817FAC8;
  *(_BYTE *)(result + 366) = 1;
  *(_QWORD *)(result + 384) = "\t.weak\t";
  *(_QWORD *)(result + 88) = ".L";
  *(_QWORD *)(result + 96) = 2;
  *(_QWORD *)(result + 104) = ".L";
  *(_QWORD *)(result + 112) = 2;
  return result;
}

{
  uint64_t result;

  result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(_QWORD *)result = &off_1E817FAC8;
  *(_BYTE *)(result + 366) = 1;
  *(_QWORD *)(result + 384) = "\t.weak\t";
  *(_QWORD *)(result + 88) = ".L";
  *(_QWORD *)(result + 96) = 2;
  *(_QWORD *)(result + 104) = ".L";
  *(_QWORD *)(result + 112) = 2;
  return result;
}

uint64_t sub_1C591D144(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E817F718;
  v3 = (void **)(a1 + 432);
  sub_1C515FCE0(&v3);
  return a1;
}

void sub_1C591D18C(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = off_1E817F718;
  v1 = (void **)(a1 + 432);
  sub_1C515FCE0(&v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::MCAsmInfoGOFF::MCAsmInfoGOFF(llvm::MCAsmInfoGOFF *this)
{
  uint64_t result;

  result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(_QWORD *)result = &off_1E817FB48;
  *(_QWORD *)(result + 272) = "\t.quad\t";
  *(_BYTE *)(result + 363) = 0;
  *(_QWORD *)(result + 88) = "@@";
  *(_QWORD *)(result + 96) = 2;
  *(_QWORD *)(result + 104) = "@";
  *(_QWORD *)(result + 112) = 1;
  *(_QWORD *)(result + 192) = "\t.space\t";
  return result;
}

{
  uint64_t result;

  result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(_QWORD *)result = &off_1E817FB48;
  *(_QWORD *)(result + 272) = "\t.quad\t";
  *(_BYTE *)(result + 363) = 0;
  *(_QWORD *)(result + 88) = "@@";
  *(_QWORD *)(result + 96) = 2;
  *(_QWORD *)(result + 104) = "@";
  *(_QWORD *)(result + 112) = 1;
  *(_QWORD *)(result + 192) = "\t.space\t";
  return result;
}

uint64_t sub_1C591D2A0(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E817F718;
  v3 = (void **)(a1 + 432);
  sub_1C515FCE0(&v3);
  return a1;
}

void sub_1C591D2E8(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = off_1E817F718;
  v1 = (void **)(a1 + 432);
  sub_1C515FCE0(&v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::MCAsmInfoWasm::MCAsmInfoWasm(llvm::MCAsmInfoWasm *this)
{
  uint64_t result;

  result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(_QWORD *)result = &off_1E817FBC8;
  *(_WORD *)(result + 366) = 257;
  *(_QWORD *)(result + 384) = "\t.weak\t";
  *(_QWORD *)(result + 88) = ".L";
  *(_QWORD *)(result + 96) = 2;
  *(_QWORD *)(result + 104) = ".L";
  *(_QWORD *)(result + 112) = 2;
  return result;
}

{
  uint64_t result;

  result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(_QWORD *)result = &off_1E817FBC8;
  *(_WORD *)(result + 366) = 257;
  *(_QWORD *)(result + 384) = "\t.weak\t";
  *(_QWORD *)(result + 88) = ".L";
  *(_QWORD *)(result + 96) = 2;
  *(_QWORD *)(result + 104) = ".L";
  *(_QWORD *)(result + 112) = 2;
  return result;
}

uint64_t sub_1C591D3D4(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E817F718;
  v3 = (void **)(a1 + 432);
  sub_1C515FCE0(&v3);
  return a1;
}

void sub_1C591D41C(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = off_1E817F718;
  v1 = (void **)(a1 + 432);
  sub_1C515FCE0(&v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::MCAsmInfoXCOFF::MCAsmInfoXCOFF(llvm::MCAsmInfoXCOFF *this)
{
  uint64_t result;

  result = llvm::MCAsmInfo::MCAsmInfo((uint64_t)this);
  *(_QWORD *)result = &off_1E817FC48;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 23) = 1;
  *(_WORD *)(result + 360) = 256;
  *(_BYTE *)(result + 365) = 1;
  *(_QWORD *)(result + 88) = "L..";
  *(_QWORD *)(result + 96) = 3;
  *(_QWORD *)(result + 104) = "L..";
  *(_QWORD *)(result + 112) = 3;
  *(_BYTE *)(result + 185) = 0;
  *(_BYTE *)(result + 187) = 1;
  *(_WORD *)(result + 426) = 0;
  if (!dword_1ED8349C0)
    *(_BYTE *)(result + 188) = 0;
  *(_QWORD *)(result + 192) = "\t.space\t";
  *(_BYTE *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = "\t.byte\t";
  *(_QWORD *)(result + 232) = "\t.string\t";
  *(_DWORD *)(result + 240) = 1;
  *(_QWORD *)(result + 256) = "\t.vbyte\t2, ";
  *(_QWORD *)(result + 264) = "\t.vbyte\t4, ";
  *(_BYTE *)(result + 354) = 0;
  *(_DWORD *)(result + 356) = 2;
  *(_BYTE *)(result + 363) = 0;
  *(_WORD *)(result + 464) = 256;
  *(_BYTE *)(result + 476) = 1;
  *(_DWORD *)(result + 412) = 6;
  return result;
}

uint64_t llvm::MCAsmInfoXCOFF::isAcceptableChar(llvm::MCAsmInfoXCOFF *this, int a2)
{
  _BOOL4 v5;
  unsigned int v6;

  v5 = a2 - 48 < 0xA
    || (a2 & 0xDFu) - 65 < 0x1A
    || a2 == 95
    || a2 == 46;
  v6 = a2 == 93 || v5;
  if (a2 == 91)
    return 1;
  else
    return v6;
}

uint64_t sub_1C591D58C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E817F718;
  v3 = (void **)(a1 + 432);
  sub_1C515FCE0(&v3);
  return a1;
}

void sub_1C591D5D4(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = off_1E817F718;
  v1 = (void **)(a1 + 432);
  sub_1C515FCE0(&v1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *llvm::MCAsmMacroParameter::dump(llvm::MCAsmMacroParameter *this, llvm::raw_ostream *a2)
{
  _BYTE *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *result;
  const void *v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  const void *v15;
  unint64_t v16;
  _BYTE *v17;

  v4 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v4)
  {
    v5 = llvm::raw_ostream::write(a2, "\"", 1uLL);
    result = (llvm::raw_ostream *)*((_QWORD *)v5 + 4);
  }
  else
  {
    *v4 = 34;
    result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + 1);
    *((_QWORD *)a2 + 4) = result;
    v5 = a2;
  }
  v7 = *(const void **)this;
  v8 = *((_QWORD *)this + 1);
  if (v8 <= *((_QWORD *)v5 + 3) - (_QWORD)result)
  {
    if (v8)
    {
      memcpy(result, v7, *((_QWORD *)this + 1));
      result = (llvm::raw_ostream *)(*((_QWORD *)v5 + 4) + v8);
      *((_QWORD *)v5 + 4) = result;
    }
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, (const char *)v7, *((_QWORD *)this + 1));
    result = (llvm::raw_ostream *)*((_QWORD *)v5 + 4);
  }
  if (*((llvm::raw_ostream **)v5 + 3) == result)
  {
    result = llvm::raw_ostream::write(v5, "\"", 1uLL);
  }
  else
  {
    *(_BYTE *)result = 34;
    ++*((_QWORD *)v5 + 4);
  }
  if (*((_BYTE *)this + 40))
  {
    v9 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v9 > 3uLL)
    {
      *v9 = 1902473786;
      *((_QWORD *)a2 + 4) += 4;
    }
    else
    {
      result = llvm::raw_ostream::write(a2, ":req", 4uLL);
    }
  }
  if (*((_BYTE *)this + 41))
  {
    v10 = (_DWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 6uLL)
    {
      *(_DWORD *)((char *)v10 + 3) = 1735549298;
      *v10 = 1918989882;
      *((_QWORD *)a2 + 4) += 7;
    }
    else
    {
      result = llvm::raw_ostream::write(a2, ":vararg", 7uLL);
    }
  }
  if (*((_QWORD *)this + 2) != *((_QWORD *)this + 3))
  {
    v11 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v11) > 2)
    {
      *(_BYTE *)(v11 + 2) = 32;
      *(_WORD *)v11 = 15648;
      *((_QWORD *)a2 + 4) += 3;
    }
    else
    {
      result = llvm::raw_ostream::write(a2, " = ", 3uLL);
    }
    v12 = *((_QWORD *)this + 2);
    v13 = *((_QWORD *)this + 3);
    if (v12 != v13)
    {
      v14 = 1;
      do
      {
        result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
        if ((v14 & 1) == 0)
        {
          if (*((_QWORD *)a2 + 3) - (_QWORD)result > 1uLL)
          {
            *(_WORD *)result = 8236;
            result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + 2);
            *((_QWORD *)a2 + 4) = result;
          }
          else
          {
            llvm::raw_ostream::write(a2, ", ", 2uLL);
            result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
          }
        }
        v15 = *(const void **)(v12 + 8);
        v16 = *(_QWORD *)(v12 + 16);
        if (v16 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
        {
          if (v16)
          {
            result = (llvm::raw_ostream *)memcpy(result, v15, *(_QWORD *)(v12 + 16));
            *((_QWORD *)a2 + 4) += v16;
          }
        }
        else
        {
          result = llvm::raw_ostream::write(a2, (const char *)v15, *(_QWORD *)(v12 + 16));
        }
        v14 = 0;
        v12 += 40;
      }
      while (v12 != v13);
    }
  }
  v17 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v17)
    return llvm::raw_ostream::write(a2, "\n", 1uLL);
  *v17 = 10;
  ++*((_QWORD *)a2 + 4);
  return result;
}

llvm::raw_ostream *llvm::MCAsmMacro::dump(llvm::MCAsmMacro *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v2;
  uint64_t v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  const void *v7;
  unint64_t v8;
  void *v9;
  llvm::MCAsmMacroParameter *v10;
  llvm::MCAsmMacroParameter *i;
  _DWORD *v12;
  llvm *v13;
  uint64_t v14;
  const void **v15;
  const void **j;
  char v17;
  BOOL v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _DWORD *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  void *v25;
  llvm::raw_ostream *result;
  const void *v27;
  size_t v28;

  v2 = a2;
  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 5)
  {
    *(_WORD *)(v4 + 4) = 8303;
    *(_DWORD *)v4 = 1919115597;
    v6 = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + 6);
    *((_QWORD *)a2 + 4) = v6;
    v5 = a2;
  }
  else
  {
    v5 = llvm::raw_ostream::write(a2, "Macro ", 6uLL);
    v6 = (llvm::raw_ostream *)*((_QWORD *)v5 + 4);
  }
  v7 = *(const void **)this;
  v8 = *((_QWORD *)this + 1);
  if (v8 <= *((_QWORD *)v5 + 3) - (_QWORD)v6)
  {
    if (v8)
    {
      memcpy(v6, v7, *((_QWORD *)this + 1));
      v6 = (llvm::raw_ostream *)(*((_QWORD *)v5 + 4) + v8);
      *((_QWORD *)v5 + 4) = v6;
    }
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, (const char *)v7, *((_QWORD *)this + 1));
    v6 = (llvm::raw_ostream *)*((_QWORD *)v5 + 4);
  }
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 1uLL)
  {
    *(_WORD *)v6 = 2618;
    *((_QWORD *)v5 + 4) += 2;
  }
  else
  {
    v6 = llvm::raw_ostream::write(v5, ":\n", 2uLL);
  }
  v9 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v9 > 0xDuLL)
  {
    qmemcpy(v9, "  Parameters:\n", 14);
    *((_QWORD *)v2 + 4) += 14;
  }
  else
  {
    v6 = llvm::raw_ostream::write(v2, "  Parameters:\n", 0xEuLL);
  }
  v10 = (llvm::MCAsmMacroParameter *)*((_QWORD *)this + 4);
  for (i = (llvm::MCAsmMacroParameter *)*((_QWORD *)this + 5);
        v10 != i;
        v10 = (llvm::MCAsmMacroParameter *)((char *)v10 + 48))
  {
    v12 = (_DWORD *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v12 > 3uLL)
    {
      *v12 = 538976288;
      *((_QWORD *)v2 + 4) += 4;
    }
    else
    {
      v6 = llvm::raw_ostream::write(v2, "    ", 4uLL);
    }
    v13 = llvm::dbgs(v6);
    v6 = llvm::MCAsmMacroParameter::dump(v10, v13);
  }
  if (*((_QWORD *)this + 7) != *((_QWORD *)this + 8))
  {
    v14 = *((_QWORD *)v2 + 4);
    if ((unint64_t)(*((_QWORD *)v2 + 3) - v14) > 9)
    {
      *(_WORD *)(v14 + 8) = 2618;
      *(_QWORD *)v14 = *(_QWORD *)"  Locals:\n";
      *((_QWORD *)v2 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v2, "  Locals:\n", 0xAuLL);
    }
    v15 = (const void **)*((_QWORD *)this + 7);
    for (j = (const void **)*((_QWORD *)this + 8); v15 != j; v15 += 3)
    {
      v17 = *((_BYTE *)v15 + 23);
      v18 = v17 < 0;
      if (v17 >= 0)
        v19 = v15;
      else
        v19 = *v15;
      v20 = v17 & 0x7F;
      if (v18)
        v21 = (size_t)v15[1];
      else
        v21 = v20;
      v22 = (_DWORD *)*((_QWORD *)v2 + 4);
      if (*((_QWORD *)v2 + 3) - (_QWORD)v22 > 3uLL)
      {
        *v22 = 538976288;
        v24 = (_BYTE *)(*((_QWORD *)v2 + 4) + 4);
        *((_QWORD *)v2 + 4) = v24;
        v23 = v2;
      }
      else
      {
        v23 = llvm::raw_ostream::write(v2, "    ", 4uLL);
        v24 = (_BYTE *)*((_QWORD *)v23 + 4);
      }
      if (v21 <= *((_QWORD *)v23 + 3) - (_QWORD)v24)
      {
        if (v21)
        {
          memcpy(v24, v19, v21);
          v24 = (_BYTE *)(*((_QWORD *)v23 + 4) + v21);
          *((_QWORD *)v23 + 4) = v24;
        }
      }
      else
      {
        v23 = llvm::raw_ostream::write(v23, (const char *)v19, v21);
        v24 = (_BYTE *)*((_QWORD *)v23 + 4);
      }
      if ((unint64_t)v24 >= *((_QWORD *)v23 + 3))
      {
        llvm::raw_ostream::write(v23, 10);
      }
      else
      {
        *((_QWORD *)v23 + 4) = v24 + 1;
        *v24 = 10;
      }
    }
  }
  v25 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v25 > 0xDuLL)
  {
    qmemcpy(v25, "  (BEGIN BODY)", 14);
    result = (llvm::raw_ostream *)(*((_QWORD *)v2 + 4) + 14);
    *((_QWORD *)v2 + 4) = result;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, "  (BEGIN BODY)", 0xEuLL);
    result = (llvm::raw_ostream *)*((_QWORD *)v2 + 4);
  }
  v27 = (const void *)*((_QWORD *)this + 2);
  v28 = *((_QWORD *)this + 3);
  if (v28 <= *((_QWORD *)v2 + 3) - (_QWORD)result)
  {
    if (v28)
    {
      memcpy(result, v27, v28);
      result = (llvm::raw_ostream *)(*((_QWORD *)v2 + 4) + v28);
      *((_QWORD *)v2 + 4) = result;
    }
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, (const char *)v27, v28);
    result = (llvm::raw_ostream *)*((_QWORD *)v2 + 4);
  }
  if (*((_QWORD *)v2 + 3) - (_QWORD)result <= 0xAuLL)
    return llvm::raw_ostream::write(v2, "(END BODY)\n", 0xBuLL);
  *(_DWORD *)((char *)result + 7) = 170481988;
  *(_QWORD *)result = *(_QWORD *)"(END BODY)\n";
  *((_QWORD *)v2 + 4) += 11;
  return result;
}

uint64_t sub_1C591DD10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v10 = operator new();
  v11 = *a2;
  *a2 = 0;
  v12 = *a3;
  *a3 = 0;
  v18 = v12;
  v19 = v11;
  v13 = *a4;
  *a4 = 0;
  v17 = v13;
  v14.n128_f64[0] = llvm::MCAssembler::MCAssembler(v10, a1, &v19, &v18, &v17);
  *a5 = v15;
  if (v17)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v17 + 8))(v17, v14.n128_f64[0]);
  if (v18)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v18 + 8))(v18, v14);
  result = v19;
  if (v19)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v19 + 8))(v19, v14);
  return result;
}

llvm::raw_ostream *sub_1C591DDF4(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  void *v5;
  llvm::raw_ostream *v6;
  _DWORD *v7;

  v4 = *(llvm::raw_ostream **)(a1 + 280);
  v5 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0xEuLL)
  {
    qmemcpy(v5, "\t.cfi_startproc", 15);
    *((_QWORD *)v4 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.cfi_startproc", 0xFuLL);
  }
  if (*(_BYTE *)(a2 + 73))
  {
    v6 = *(llvm::raw_ostream **)(a1 + 280);
    v7 = (_DWORD *)*((_QWORD *)v6 + 4);
    if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 6uLL)
    {
      *(_DWORD *)((char *)v7 + 3) = 1701605485;
      *v7 = 1835627296;
      *((_QWORD *)v6 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v6, " simple", 7uLL);
    }
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C591DEB8(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  void *v4;

  *(_QWORD *)(a2 + 8) = 1;
  v3 = *(llvm::raw_ostream **)(a1 + 280);
  v4 = (void *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v4 > 0xCuLL)
  {
    qmemcpy(v4, "\t.cfi_endproc", 13);
    *((_QWORD *)v3 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.cfi_endproc", 0xDuLL);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C591DF2C(uint64_t a1, _BYTE *a2, unint64_t a3)
{
  size_t v4;
  size_t v5;
  uint64_t v6;
  void *v7;

  if (a3)
  {
    v4 = a3 - 1;
    if (a3 < a3 - 1)
      v4 = a3;
    if (a2[a3 - 1] == 10)
      v5 = v4;
    else
      v5 = a3;
    v6 = *(_QWORD *)(a1 + 280);
    v7 = *(void **)(v6 + 32);
    if (v5 <= *(_QWORD *)(v6 + 24) - (_QWORD)v7)
    {
      if (v5)
      {
        memcpy(v7, a2, v5);
        *(_QWORD *)(v6 + 32) += v5;
      }
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), a2, v5);
    }
  }
  return sub_1C5928670(a1);
}

void sub_1C591DFAC(llvm::MCStreamer *this)
{
  char *v2;
  char *v3;
  llvm::MCAssembler *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *((_QWORD *)this + 86) = off_1E81A6E70;
  if (*((_DWORD *)this + 186) == 1)
  {
    v8 = *((_QWORD *)this + 88);
    if (v8)
      MEMORY[0x1CAA32F9C](v8, 0x1000C8077774924);
  }
  *((_QWORD *)this + 77) = off_1E81A6E70;
  if (*((_DWORD *)this + 168) == 1)
  {
    v7 = *((_QWORD *)this + 79);
    if (v7)
      MEMORY[0x1CAA32F9C](v7, 0x1000C8077774924);
  }
  v2 = (char *)*((_QWORD *)this + 58);
  if (v2 != (char *)this + 488)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 39);
  if (v3 != (char *)this + 336)
    free(v3);
  v4 = (llvm::MCAssembler *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v4)
  {
    llvm::MCAssembler::~MCAssembler(v4);
    MEMORY[0x1CAA32FC0]();
  }
  v5 = *((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  llvm::MCStreamer::~MCStreamer(this);
}

void sub_1C591E0C4(llvm::MCStreamer *a1)
{
  sub_1C591DFAC(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C591E0E8()
{
  return 0;
}

uint64_t sub_1C591E0F0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 752) & 1;
}

uint64_t sub_1C591E0FC()
{
  return 1;
}

void sub_1C591E104(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 752) & 1) != 0)
  {
    v5 = a1 + 464;
    llvm::Twine::toVector(a2, a1 + 464);
    if (a3)
    {
      v6 = *(_QWORD *)(a1 + 472);
      if ((unint64_t)(v6 + 1) > *(_QWORD *)(a1 + 480))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(v5, (void *)(a1 + 488), v6 + 1, 1);
        v6 = *(_QWORD *)(a1 + 472);
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 464) + v6) = 10;
      ++*(_QWORD *)(a1 + 472);
    }
  }
}

uint64_t *sub_1C591E188(llvm *a1)
{
  if ((*((_BYTE *)a1 + 752) & 1) != 0)
    return (uint64_t *)((char *)a1 + 616);
  else
    return llvm::nulls(a1);
}

llvm::raw_ostream *sub_1C591E19C(uint64_t a1, uint64_t a2, int a3)
{
  llvm::raw_ostream *v5;
  _BYTE *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  const void *v9;
  size_t v10;
  void *v11;
  uint64_t v12;

  if (a3)
  {
    v5 = *(llvm::raw_ostream **)(a1 + 280);
    v6 = (_BYTE *)*((_QWORD *)v5 + 4);
    if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
    {
      llvm::raw_ostream::write(v5, 9);
    }
    else
    {
      *((_QWORD *)v5 + 4) = v6 + 1;
      *v6 = 9;
    }
  }
  v8 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = *(_QWORD *)(a1 + 288);
  v9 = *(const void **)(v7 + 48);
  v10 = *(_QWORD *)(v7 + 56);
  v11 = (void *)*((_QWORD *)v8 + 4);
  if (v10 <= *((_QWORD *)v8 + 3) - (_QWORD)v11)
  {
    if (v10)
    {
      v11 = memcpy(v11, v9, v10);
      *((_QWORD *)v8 + 4) += v10;
    }
  }
  else
  {
    v11 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), (const char *)v9, v10);
  }
  llvm::Twine::printOneChild((uint64_t)v11, v8, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 32));
  llvm::Twine::printOneChild(v12, v8, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_BYTE *)(a2 + 33));
  return sub_1C5928670(a1);
}

void sub_1C591E258(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1C591E2A4(int a1, const char **a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t __dst, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  _QWORD *v31;
  const char *v32;
  size_t v33;
  uint64_t v34;
  const void *v35;
  size_t v36;
  size_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  const void *v43;
  uint64_t v44;
  const char *v45;
  size_t v46;
  const char **v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  const void *v56;
  size_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  const char **v62;
  size_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t first_of;
  size_t v67;
  size_t v68;
  uint64_t v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  const void *v74;
  size_t v75;
  const char *v76;
  size_t v77;
  unint64_t v78;
  size_t v79;
  size_t v80;
  char *v81;
  size_t v82;
  const char **v83;
  uint64_t v84;
  uint64_t v85;
  const char **v86;
  size_t v87;
  uint64_t v88;
  size_t v89;
  char v90;
  size_t v91;
  const char **v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  size_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  const char **v101;
  size_t v102;
  void *v103;
  _QWORD *v104;
  const char *v105;
  size_t v106;
  int64_t v107;
  const char *v108;
  size_t v109;

  v32 = *a2;
  if (*a2)
    v33 = strlen(*a2);
  else
    v33 = 0;
  v108 = v32;
  v109 = v33;
  v34 = v31[36];
  v35 = *(const void **)(v34 + 40);
  if (!v35)
  {
    if (!v33)
      return;
LABEL_9:
    v36 = v33 - 2;
    if (v33 < 2)
    {
LABEL_12:
      v37 = *(_QWORD *)(v34 + 56);
      if (v33 < v37 || v37 && memcmp(v32, *(const void **)(v34 + 48), v37))
      {
        if (*v32 != 35)
          goto LABEL_144;
        v38 = v31[40];
        if (v31[41] < (unint64_t)(v38 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v31 + 39), v31 + 42, v38 + 1, 1);
          v38 = v31[40];
        }
        *(_BYTE *)(v31[39] + v38) = 9;
        v39 = v31[41];
        v40 = v31[40] + 1;
        v31[40] = v40;
        v41 = v31[36];
        v43 = *(const void **)(v41 + 48);
        v42 = *(_QWORD *)(v41 + 56);
        if (v39 < v42 + v40)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v31 + 39), v31 + 42, v42 + v40, 1);
          v40 = v31[40];
          if (!v42)
          {
LABEL_21:
            v31[40] = v40 + v42;
            v44 = v33 != 0;
            if (v33)
              v45 = v32 + 1;
            else
              v45 = v32;
            v46 = v33 - v44;
            if (v33 - v44 <= 0x7FFFFFFFFFFFFFF7)
            {
              if (v46 >= 0x17)
              {
                v59 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v46 | 7) != 0x17)
                  v59 = v46 | 7;
                v60 = v59 + 1;
                v47 = (const char **)operator new(v59 + 1);
                v106 = v46;
                v107 = v60 | 0x8000000000000000;
                v105 = (const char *)v47;
              }
              else
              {
                HIBYTE(v107) = v33 - v44;
                v47 = &v105;
                if (v33 == v44)
                {
LABEL_49:
                  *((_BYTE *)v47 + v46) = 0;
                  v32 = v105;
                  v61 = SHIBYTE(v107);
                  if (v107 >= 0)
                    v62 = &v105;
                  else
                    v62 = (const char **)v105;
                  if (v107 >= 0)
                    v63 = HIBYTE(v107) & 0x7F;
                  else
                    v63 = v106;
                  v64 = v31[40];
                  if (v31[41] < v63 + v64)
                  {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v31 + 39), v31 + 42, v63 + v64, 1);
                    v64 = v31[40];
                    if (!v63)
                    {
LABEL_58:
                      v31[40] = v64 + v63;
                      if ((v61 & 0x80000000) == 0)
                        goto LABEL_144;
LABEL_126:
                      v98 = (char *)v32;
                      goto LABEL_143;
                    }
                  }
                  else if (!v63)
                  {
                    goto LABEL_58;
                  }
                  memcpy((void *)(v31[39] + v64), v62, v63);
                  v64 = v31[40];
                  goto LABEL_58;
                }
              }
              memmove(v47, v45, v46);
              goto LABEL_49;
            }
LABEL_157:
            abort();
          }
        }
        else if (!v42)
        {
          goto LABEL_21;
        }
        memcpy((void *)(v31[39] + v40), v43, v42);
        v40 = v31[40];
        goto LABEL_21;
      }
      v48 = v31[40];
      if (v31[41] < (unint64_t)(v48 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v31 + 39), v31 + 42, v48 + 1, 1);
        v48 = v31[40];
      }
      *(_BYTE *)(v31[39] + v48) = 9;
      v49 = v31[40] + 1;
      v31[40] = v49;
      if (!v32)
      {
        v89 = 0;
        v90 = 0;
        v105 = 0;
        v106 = 0;
        v107 = 0;
        goto LABEL_116;
      }
      if (v33 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_157;
      if (v33 >= 0x17)
      {
        v94 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v33 | 7) != 0x17)
          v94 = v33 | 7;
        v95 = v94 + 1;
        v50 = (char *)operator new(v94 + 1);
        v106 = v33;
        v107 = v95 | 0x8000000000000000;
        v105 = v50;
      }
      else
      {
        HIBYTE(v107) = v33;
        v50 = (char *)&v105;
        if (!v33)
          goto LABEL_115;
      }
      memmove(v50, v32, v33);
LABEL_115:
      v50[v33] = 0;
      v90 = HIBYTE(v107);
      v32 = v105;
      v89 = v106;
      v49 = v31[40];
LABEL_116:
      if (v90 >= 0)
        v96 = (const char *)&v105;
      else
        v96 = v32;
      if (v90 >= 0)
        v97 = v90 & 0x7F;
      else
        v97 = v89;
      if (v31[41] < v97 + v49)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v31 + 39), v31 + 42, v97 + v49, 1);
        v49 = v31[40];
        if (!v97)
        {
LABEL_125:
          v31[40] = v49 + v97;
          if ((v90 & 0x80) == 0)
            goto LABEL_144;
          goto LABEL_126;
        }
      }
      else if (!v97)
      {
        goto LABEL_125;
      }
      memcpy((void *)(v31[39] + v49), v96, v97);
      v49 = v31[40];
      goto LABEL_125;
    }
    if (*(_WORD *)v32 != 12079)
    {
      if (*(_WORD *)v32 != 10799)
        goto LABEL_12;
      v103 = v31 + 42;
      v104 = v31 + 39;
      v65 = 2;
      while (1)
      {
        first_of = llvm::StringRef::find_first_of(&v108, "\r\n", 2, v65);
        v67 = first_of;
        if (first_of >= v36)
          v68 = v36;
        else
          v68 = first_of;
        v69 = v31[40];
        if (v31[41] < (unint64_t)(v69 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v104, v103, v69 + 1, 1);
          v69 = v31[40];
        }
        *(_BYTE *)(v31[39] + v69) = 9;
        v70 = v31[41];
        v71 = v31[40] + 1;
        v31[40] = v71;
        v72 = v31[36];
        v74 = *(const void **)(v72 + 48);
        v73 = *(_QWORD *)(v72 + 56);
        if (v70 >= v73 + v71)
          break;
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v104, v103, v73 + v71, 1);
        v71 = v31[40];
        if (v73)
          goto LABEL_68;
LABEL_69:
        v75 = v71 + v73;
        v31[40] = v75;
        v76 = v108;
        if (!v108)
        {
          v82 = 0;
          v83 = 0;
          v105 = 0;
          v106 = 0;
          v107 = 0;
          goto LABEL_88;
        }
        v77 = v109;
        if (v109 >= v65)
          v78 = v65;
        else
          v78 = v109;
        if (v78 <= v68)
          v79 = v68;
        else
          v79 = v78;
        if (v109 >= v79)
          v77 = v79;
        v80 = v77 - v78;
        if (v77 - v78 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_157;
        if (v80 >= 0x17)
        {
          v84 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v80 | 7) != 0x17)
            v84 = v80 | 7;
          v85 = v84 + 1;
          v81 = (char *)operator new(v84 + 1);
          v106 = v80;
          v107 = v85 | 0x8000000000000000;
          v105 = v81;
        }
        else
        {
          HIBYTE(v107) = v77 - v78;
          v81 = (char *)&v105;
          if (v77 == v78)
            goto LABEL_87;
        }
        memmove(v81, &v76[v78], v80);
LABEL_87:
        v81[v80] = 0;
        LOBYTE(v76) = HIBYTE(v107);
        v83 = (const char **)v105;
        v82 = v106;
        v75 = v31[40];
LABEL_88:
        if ((char)v76 >= 0)
          v86 = &v105;
        else
          v86 = v83;
        if ((char)v76 >= 0)
          v87 = v76 & 0x7F;
        else
          v87 = v82;
        if (v31[41] < v87 + v75)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v104, v103, v87 + v75, 1);
          v75 = v31[40];
          if (!v87)
            goto LABEL_97;
LABEL_96:
          memcpy((void *)(v31[39] + v75), v86, v87);
          v75 = v31[40];
          goto LABEL_97;
        }
        if (v87)
          goto LABEL_96;
LABEL_97:
        v31[40] = v75 + v87;
        if ((v76 & 0x80) != 0)
          operator delete(v83);
        if (v67 < v36)
        {
          v88 = v31[40];
          if (v31[41] < (unint64_t)(v88 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v104, v103, v88 + 1, 1);
            v88 = v31[40];
          }
          *(_BYTE *)(v31[39] + v88) = 10;
          ++v31[40];
        }
        v65 = v68 + 1;
        if (v68 + 1 >= v36)
          goto LABEL_144;
      }
      if (!v73)
        goto LABEL_69;
LABEL_68:
      memcpy((void *)(v31[39] + v71), v74, v73);
      v71 = v31[40];
      goto LABEL_69;
    }
    v51 = v31[40];
    if (v31[41] < (unint64_t)(v51 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v31 + 39), v31 + 42, v51 + 1, 1);
      v51 = v31[40];
    }
    *(_BYTE *)(v31[39] + v51) = 9;
    v52 = v31[41];
    v53 = v31[40] + 1;
    v31[40] = v53;
    v54 = v31[36];
    v56 = *(const void **)(v54 + 48);
    v55 = *(_QWORD *)(v54 + 56);
    if (v52 < v55 + v53)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v31 + 39), v31 + 42, v55 + v53, 1);
      v53 = v31[40];
      if (!v55)
      {
LABEL_40:
        v57 = v53 + v55;
        v31[40] = v57;
        if (!v32)
        {
          v91 = 0;
          v92 = 0;
          v93 = 0;
          v105 = 0;
          v106 = 0;
          v107 = 0;
          goto LABEL_132;
        }
        if (v36 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_157;
        if (v36 >= 0x17)
        {
          v99 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v36 | 7) != 0x17)
            v99 = v36 | 7;
          v100 = v99 + 1;
          v58 = (char *)operator new(v99 + 1);
          v106 = v36;
          v107 = v100 | 0x8000000000000000;
          v105 = v58;
        }
        else
        {
          HIBYTE(v107) = v33 - 2;
          v58 = (char *)&v105;
          if (v33 < 3)
            goto LABEL_131;
        }
        memmove(v58, v32 + 2, v36);
LABEL_131:
        v58[v36] = 0;
        v93 = HIBYTE(v107);
        v92 = (const char **)v105;
        v91 = v106;
        v57 = v31[40];
LABEL_132:
        if (v93 >= 0)
          v101 = &v105;
        else
          v101 = v92;
        if (v93 >= 0)
          v102 = v93 & 0x7F;
        else
          v102 = v91;
        if (v31[41] < v102 + v57)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v31 + 39), v31 + 42, v102 + v57, 1);
          v57 = v31[40];
          if (!v102)
            goto LABEL_141;
        }
        else if (!v102)
        {
LABEL_141:
          v31[40] = v57 + v102;
          if ((v93 & 0x80) == 0)
            goto LABEL_144;
          v98 = (char *)v92;
LABEL_143:
          operator delete(v98);
LABEL_144:
          if (v108[v109 - 1] == 10)
            sub_1C591EA9C(v31);
          return;
        }
        memcpy((void *)(v31[39] + v57), v101, v102);
        v57 = v31[40];
        goto LABEL_141;
      }
    }
    else if (!v55)
    {
      goto LABEL_40;
    }
    memcpy((void *)(v31[39] + v53), v56, v55);
    v53 = v31[40];
    goto LABEL_40;
  }
  if (v33 != strlen(*(const char **)(v34 + 40)) || v33 && memcmp(v32, v35, v33))
    goto LABEL_9;
}

_QWORD *sub_1C591EA9C(_QWORD *result)
{
  _QWORD *v1;
  size_t v2;
  const void *v3;
  uint64_t v4;
  void *v5;

  v1 = result;
  v2 = result[40];
  if (v2)
  {
    v3 = (const void *)result[39];
    v4 = result[35];
    v5 = *(void **)(v4 + 32);
    if (v2 <= *(_QWORD *)(v4 + 24) - (_QWORD)v5)
    {
      result = memcpy(v5, v3, v2);
      *(_QWORD *)(v4 + 32) += v2;
    }
    else
    {
      result = llvm::raw_ostream::write((llvm::raw_ostream *)v1[35], (const char *)v3, v2);
    }
  }
  v1[40] = 0;
  return result;
}

uint64_t sub_1C591EB0C(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (**a2)(a2, *(_QWORD *)(a1 + 288), *(_QWORD *)(a1 + 8) + 24, *(_QWORD *)(a1 + 280), a3);
  v5 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v5)
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v5 - 32);
  else
    v6 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(*(_QWORD *)(a1 + 16), v6, a2, a3, *(_QWORD *)(a1 + 280));
}

const char *sub_1C591EB74(uint64_t a1)
{
  const char *v1;
  const char *v2;

  v1 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 296) + 24))(*(_QWORD *)(a1 + 296));
  v2 = v1;
  if (v1)
    strlen(v1);
  return v2;
}

llvm::raw_ostream *sub_1C591EBBC(uint64_t a1, llvm::MCSymbol *a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  llvm::raw_ostream *v7;
  size_t v8;
  void *v9;

  llvm::MCStreamer::emitLabel(a1, (uint64_t)a2, a3);
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v5 = *(_QWORD *)(a1 + 288);
  v6 = *(const void **)(v5 + 72);
  if (v6)
  {
    v7 = *(llvm::raw_ostream **)(a1 + 280);
    v8 = strlen(*(const char **)(v5 + 72));
    v9 = (void *)*((_QWORD *)v7 + 4);
    if (v8 <= *((_QWORD *)v7 + 3) - (_QWORD)v9)
    {
      if (v8)
      {
        memcpy(v9, v6, v8);
        *((_QWORD *)v7 + 4) += v8;
      }
    }
    else
    {
      llvm::raw_ostream::write(v7, (const char *)v6, v8);
    }
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C591EC54(uint64_t a1, int a2)
{
  llvm::raw_ostream *v3;
  _OWORD *v4;
  const char *v5;
  size_t v6;
  void *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  const char *v12;
  size_t v13;
  void *v14;
  uint64_t v16;

  switch(a2)
  {
    case 0:
      v3 = *(llvm::raw_ostream **)(a1 + 280);
      v4 = (_OWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v4 <= 0xFuLL)
      {
        v5 = "\t.syntax unified";
        v6 = 16;
        goto LABEL_22;
      }
      *v4 = *(_OWORD *)"\t.syntax unified";
      v16 = *((_QWORD *)v3 + 4) + 16;
      goto LABEL_28;
    case 1:
      v3 = *(llvm::raw_ostream **)(a1 + 280);
      v7 = (void *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v7 <= 0x17uLL)
      {
        v5 = ".subsections_via_symbols";
        v6 = 24;
        goto LABEL_22;
      }
      qmemcpy(v7, ".subsections_via_symbols", 24);
      v16 = *((_QWORD *)v3 + 4) + 24;
LABEL_28:
      *((_QWORD *)v3 + 4) = v16;
      break;
    case 2:
      v8 = *(llvm::raw_ostream **)(a1 + 280);
      v9 = (_BYTE *)*((_QWORD *)v8 + 4);
      if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), 9);
      }
      else
      {
        *((_QWORD *)v8 + 4) = v9 + 1;
        *v9 = 9;
      }
      v12 = *(const char **)(*(_QWORD *)(a1 + 288) + 152);
      if (!v12)
        return sub_1C5928670(a1);
      goto LABEL_20;
    case 3:
      v8 = *(llvm::raw_ostream **)(a1 + 280);
      v10 = (_BYTE *)*((_QWORD *)v8 + 4);
      if ((unint64_t)v10 >= *((_QWORD *)v8 + 3))
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), 9);
      }
      else
      {
        *((_QWORD *)v8 + 4) = v10 + 1;
        *v10 = 9;
      }
      v12 = *(const char **)(*(_QWORD *)(a1 + 288) + 160);
      if (!v12)
        return sub_1C5928670(a1);
      goto LABEL_20;
    case 4:
      v8 = *(llvm::raw_ostream **)(a1 + 280);
      v11 = (_BYTE *)*((_QWORD *)v8 + 4);
      if ((unint64_t)v11 >= *((_QWORD *)v8 + 3))
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), 9);
      }
      else
      {
        *((_QWORD *)v8 + 4) = v11 + 1;
        *v11 = 9;
      }
      v12 = *(const char **)(*(_QWORD *)(a1 + 288) + 168);
      if (!v12)
        return sub_1C5928670(a1);
LABEL_20:
      v13 = strlen(v12);
      v14 = (void *)*((_QWORD *)v8 + 4);
      if (v13 <= *((_QWORD *)v8 + 3) - (_QWORD)v14)
      {
        if (v13)
        {
          memcpy(v14, v12, v13);
          *((_QWORD *)v8 + 4) += v13;
        }
      }
      else
      {
        v3 = v8;
        v5 = v12;
        v6 = v13;
LABEL_22:
        llvm::raw_ostream::write(v3, v5, v6);
      }
      break;
    default:
      return sub_1C5928670(a1);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C591EE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  char v8;
  BOOL v9;
  const char *v10;
  size_t v11;
  size_t v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  uint64_t v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  _WORD *v19;
  _BYTE *v20;
  char v21;
  BOOL v22;
  const char *v23;
  size_t v24;
  size_t v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;

  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 0x10)
  {
    *(_BYTE *)(v7 + 16) = 34;
    *(_OWORD *)v7 = *(_OWORD *)"\t.linker_option \"";
    *((_QWORD *)v6 + 4) += 17;
  }
  else
  {
    v6 = llvm::raw_ostream::write(v6, "\t.linker_option \"", 0x11uLL);
  }
  v8 = *(_BYTE *)(a2 + 23);
  v9 = v8 < 0;
  if (v8 >= 0)
    v10 = (const char *)a2;
  else
    v10 = *(const char **)a2;
  v11 = v8 & 0x7F;
  if (v9)
    v12 = *(_QWORD *)(a2 + 8);
  else
    v12 = v11;
  v13 = llvm::raw_ostream::write(v6, v10, v12);
  v14 = (_BYTE *)*((_QWORD *)v13 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
  {
    llvm::raw_ostream::write(v13, 34);
  }
  else
  {
    *((_QWORD *)v13 + 4) = v14 + 1;
    *v14 = 34;
  }
  if (a3 != 1)
  {
    v16 = a2 + 24;
    v17 = 24 * a3 - 24;
    do
    {
      v18 = *(llvm::raw_ostream **)(a1 + 280);
      v19 = (_WORD *)*((_QWORD *)v18 + 4);
      if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 1uLL)
      {
        *v19 = 8236;
        v20 = (_BYTE *)(*((_QWORD *)v18 + 4) + 2);
        *((_QWORD *)v18 + 4) = v20;
      }
      else
      {
        v18 = llvm::raw_ostream::write(v18, ", ", 2uLL);
        v20 = (_BYTE *)*((_QWORD *)v18 + 4);
      }
      if ((unint64_t)v20 >= *((_QWORD *)v18 + 3))
      {
        v18 = llvm::raw_ostream::write(v18, 34);
      }
      else
      {
        *((_QWORD *)v18 + 4) = v20 + 1;
        *v20 = 34;
      }
      v21 = *(_BYTE *)(v16 + 23);
      v22 = v21 < 0;
      if (v21 >= 0)
        v23 = (const char *)v16;
      else
        v23 = *(const char **)v16;
      v24 = v21 & 0x7F;
      if (v22)
        v25 = *(_QWORD *)(v16 + 8);
      else
        v25 = v24;
      v26 = llvm::raw_ostream::write(v18, v23, v25);
      v27 = (_BYTE *)*((_QWORD *)v26 + 4);
      if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
      {
        llvm::raw_ostream::write(v26, 34);
      }
      else
      {
        *((_QWORD *)v26 + 4) = v27 + 1;
        *v27 = 34;
      }
      v16 += 24;
      v17 -= 24;
    }
    while (v17);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C591EFD8(uint64_t a1, const void *a2, size_t a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  _BYTE *v8;

  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 0xB)
  {
    *(_DWORD *)(v7 + 8) = 572547689;
    *(_QWORD *)v7 = *(_QWORD *)"\t.dyld_lib \"";
    v8 = (_BYTE *)(*((_QWORD *)v6 + 4) + 12);
    *((_QWORD *)v6 + 4) = v8;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.dyld_lib \"", 0xCuLL);
    v8 = (_BYTE *)*((_QWORD *)v6 + 4);
  }
  if (a3 <= *((_QWORD *)v6 + 3) - (_QWORD)v8)
  {
    if (a3)
    {
      memcpy(v8, a2, a3);
      v8 = (_BYTE *)(*((_QWORD *)v6 + 4) + a3);
      *((_QWORD *)v6 + 4) = v8;
    }
  }
  else
  {
    llvm::raw_ostream::write(v6, (const char *)a2, a3);
    v8 = (_BYTE *)*((_QWORD *)v6 + 4);
  }
  if ((unint64_t)v8 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 34);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v8 + 1;
    *v8 = 34;
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C591F0D0(llvm::raw_ostream *result, int a2)
{
  uint64_t v2;
  llvm::raw_ostream *v3;
  void *v4;
  const char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  const char *v11;
  __int16 v12;
  const char *v13;

  if (*(_BYTE *)(*((_QWORD *)result + 36) + 186))
  {
    v2 = (uint64_t)result;
    switch(a2)
    {
      case 0:
        v3 = (llvm::raw_ostream *)*((_QWORD *)result + 35);
        v4 = (void *)*((_QWORD *)v3 + 4);
        if (*((_QWORD *)v3 + 3) - (_QWORD)v4 <= 0xCuLL)
        {
          v5 = "\t.data_region";
          v6 = 13;
          goto LABEL_16;
        }
        qmemcpy(v4, "\t.data_region", 13);
        v9 = *((_QWORD *)v3 + 4) + 13;
        goto LABEL_25;
      case 1:
        v3 = (llvm::raw_ostream *)*((_QWORD *)result + 35);
        v7 = *((_QWORD *)v3 + 4);
        if ((unint64_t)(*((_QWORD *)v3 + 3) - v7) <= 0x10)
        {
          v5 = "\t.data_region jt8";
          goto LABEL_15;
        }
        v10 = 56;
        v11 = "\t.data_region jt8";
        goto LABEL_24;
      case 2:
        v3 = (llvm::raw_ostream *)*((_QWORD *)result + 35);
        v8 = *((_QWORD *)v3 + 4);
        if ((unint64_t)(*((_QWORD *)v3 + 3) - v8) <= 0x11)
        {
          v5 = "\t.data_region jt16";
          goto LABEL_12;
        }
        v12 = 13873;
        v13 = "\t.data_region jt16";
        goto LABEL_22;
      case 3:
        v3 = (llvm::raw_ostream *)*((_QWORD *)result + 35);
        v8 = *((_QWORD *)v3 + 4);
        if ((unint64_t)(*((_QWORD *)v3 + 3) - v8) <= 0x11)
        {
          v5 = "\t.data_region jt32";
LABEL_12:
          v6 = 18;
          goto LABEL_16;
        }
        v12 = 12851;
        v13 = "\t.data_region jt32";
LABEL_22:
        *(_WORD *)(v8 + 16) = v12;
        *(_OWORD *)v8 = *(_OWORD *)v13;
        v9 = *((_QWORD *)v3 + 4) + 18;
        goto LABEL_25;
      case 4:
        v3 = (llvm::raw_ostream *)*((_QWORD *)result + 35);
        v7 = *((_QWORD *)v3 + 4);
        if ((unint64_t)(*((_QWORD *)v3 + 3) - v7) > 0x10)
        {
          v10 = 110;
          v11 = "\t.end_data_region";
LABEL_24:
          *(_BYTE *)(v7 + 16) = v10;
          *(_OWORD *)v7 = *(_OWORD *)v11;
          v9 = *((_QWORD *)v3 + 4) + 17;
LABEL_25:
          *((_QWORD *)v3 + 4) = v9;
        }
        else
        {
          v5 = "\t.end_data_region";
LABEL_15:
          v6 = 17;
LABEL_16:
          llvm::raw_ostream::write(v3, v5, v6);
        }
LABEL_17:
        result = sub_1C5928670(v2);
        break;
      default:
        goto LABEL_17;
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C591F268(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  llvm::raw_ostream *v12;
  _BYTE *v13;
  const char *v14;
  size_t v15;
  _BYTE *v16;
  _WORD *v17;
  llvm::raw_ostream *v18;
  _WORD *v19;
  _QWORD v21[2];

  v21[0] = a6;
  v21[1] = a7;
  v12 = *(llvm::raw_ostream **)(a1 + 280);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), 9);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 9;
  }
  v14 = off_1E81801D0[a2];
  v15 = strlen(v14);
  v16 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (v15 <= *((_QWORD *)v12 + 3) - (_QWORD)v16)
  {
    if (v15)
    {
      memcpy(v16, v14, v15);
      v16 = (_BYTE *)(*((_QWORD *)v12 + 4) + v15);
      *((_QWORD *)v12 + 4) = v16;
    }
  }
  else
  {
    llvm::raw_ostream::write(v12, v14, v15);
    v16 = (_BYTE *)*((_QWORD *)v12 + 4);
  }
  if ((unint64_t)v16 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v16 + 1;
    *v16 = 32;
  }
  sub_1C5E21910(v12, a3, 0, 0, 0);
  v17 = (_WORD *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v17 > 1uLL)
  {
    *v17 = 8236;
    *((_QWORD *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, ", ", 2uLL);
  }
  sub_1C5E21910(v12, a4, 0, 0, 0);
  if (a5)
  {
    v18 = *(llvm::raw_ostream **)(a1 + 280);
    v19 = (_WORD *)*((_QWORD *)v18 + 4);
    if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 1uLL)
    {
      *v19 = 8236;
      *((_QWORD *)v18 + 4) += 2;
    }
    else
    {
      v18 = llvm::raw_ostream::write(v18, ", ", 2uLL);
    }
    sub_1C5E21910(v18, a5, 0, 0, 0);
  }
  sub_1C5928840(*(llvm::raw_ostream **)(a1 + 280), v21);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C591F440(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  const char *v11;
  llvm::raw_ostream *v12;
  _OWORD *v13;
  _WORD *v14;
  size_t v15;
  size_t v16;
  _WORD *v17;
  llvm::raw_ostream *v18;
  _WORD *v19;
  _QWORD v21[2];

  v21[0] = a6;
  v21[1] = a7;
  v11 = off_1E81801F0[a2 - 1];
  v12 = *(llvm::raw_ostream **)(a1 + 280);
  v13 = (_OWORD *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 0xFuLL)
  {
    *v13 = *(_OWORD *)"\t.build_version ";
    v14 = (_WORD *)(*((_QWORD *)v12 + 4) + 16);
    *((_QWORD *)v12 + 4) = v14;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.build_version ", 0x10uLL);
    v14 = (_WORD *)*((_QWORD *)v12 + 4);
  }
  v15 = strlen(v11);
  v16 = v15;
  if (v15 <= *((_QWORD *)v12 + 3) - (_QWORD)v14)
  {
    if (v15)
    {
      memcpy(v14, v11, v15);
      v14 = (_WORD *)(*((_QWORD *)v12 + 4) + v16);
      *((_QWORD *)v12 + 4) = v14;
    }
  }
  else
  {
    llvm::raw_ostream::write(v12, v11, v15);
    v14 = (_WORD *)*((_QWORD *)v12 + 4);
  }
  if (*((_QWORD *)v12 + 3) - (_QWORD)v14 > 1uLL)
  {
    *v14 = 8236;
    *((_QWORD *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, ", ", 2uLL);
  }
  sub_1C5E21910(v12, a3, 0, 0, 0);
  v17 = (_WORD *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v17 > 1uLL)
  {
    *v17 = 8236;
    *((_QWORD *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, ", ", 2uLL);
  }
  sub_1C5E21910(v12, a4, 0, 0, 0);
  if (a5)
  {
    v18 = *(llvm::raw_ostream **)(a1 + 280);
    v19 = (_WORD *)*((_QWORD *)v18 + 4);
    if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 1uLL)
    {
      *v19 = 8236;
      *((_QWORD *)v18 + 4) += 2;
    }
    else
    {
      v18 = llvm::raw_ostream::write(v18, ", ", 2uLL);
    }
    sub_1C5E21910(v18, a5, 0, 0, 0);
  }
  sub_1C5928840(*(llvm::raw_ostream **)(a1 + 280), v21);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C591F64C(uint64_t a1, unsigned int a2, int a3)
{
  llvm::raw_ostream *v5;
  char *v6;
  unint64_t v7;
  const char *v8;
  size_t v9;
  uint64_t v11;

  v5 = *(llvm::raw_ostream **)(a1 + 280);
  v6 = (char *)*((_QWORD *)v5 + 4);
  v7 = *((_QWORD *)v5 + 3) - (_QWORD)v6;
  if (!a3)
  {
    if (v7 <= 0x15)
    {
      v8 = "\t.ptrauth_abi_version ";
      v9 = 22;
      goto LABEL_6;
    }
    qmemcpy(v6, "\t.ptrauth_abi_version ", 22);
    v11 = *((_QWORD *)v5 + 4) + 22;
LABEL_10:
    *((_QWORD *)v5 + 4) = v11;
    goto LABEL_7;
  }
  if (v7 > 0x1C)
  {
    qmemcpy(v6, "\t.ptrauth_kernel_abi_version ", 29);
    v11 = *((_QWORD *)v5 + 4) + 29;
    goto LABEL_10;
  }
  v8 = "\t.ptrauth_kernel_abi_version ";
  v9 = 29;
LABEL_6:
  llvm::raw_ostream::write(v5, v8, v9);
LABEL_7:
  sub_1C5E21910(*(llvm::raw_ostream **)(a1 + 280), a2, 0, 0, 0);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C591F714(uint64_t a1, llvm::MCSymbol *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  llvm::raw_ostream *v7;
  _BYTE *v8;

  v4 = *(llvm::raw_ostream **)(a1 + 280);
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 0xB)
  {
    *(_DWORD *)(v5 + 8) = 1668183398;
    *(_QWORD *)v5 = *(_QWORD *)"\t.thumb_func";
    *((_QWORD *)v4 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.thumb_func", 0xCuLL);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 288) + 18))
  {
    v7 = *(llvm::raw_ostream **)(a1 + 280);
    v8 = (_BYTE *)*((_QWORD *)v7 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)v7 + 3))
    {
      llvm::raw_ostream::write(v7, 9);
    }
    else
    {
      *((_QWORD *)v7 + 4) = v8 + 1;
      *v8 = 9;
    }
    llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  }
  return sub_1C5928670(a1);
}

uint64_t sub_1C591F7D0(llvm::raw_ostream **a1, llvm::MCSymbol *a2, const llvm::MCExpr **a3)
{
  llvm::raw_ostream *v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  _WORD *v10;

  if (*(_BYTE *)a3 != 4 || ((*((uint64_t (**)(const llvm::MCExpr **))*(a3 - 1) + 6))(a3 - 1) & 1) == 0)
  {
    v7 = a1[35];
    v8 = *((_QWORD *)v7 + 4);
    if ((unint64_t)(*((_QWORD *)v7 + 3) - v8) > 4)
    {
      *(_BYTE *)(v8 + 4) = 32;
      *(_DWORD *)v8 = 1952805678;
      *((_QWORD *)v7 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(v7, ".set ", 5uLL);
    }
    llvm::MCSymbol::print(a2, a1[35], a1[36]);
    v9 = a1[35];
    v10 = (_WORD *)*((_QWORD *)v9 + 4);
    if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 1uLL)
    {
      *v10 = 8236;
      *((_QWORD *)v9 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v9, ", ", 2uLL);
    }
    llvm::MCExpr::print((uint64_t)a3);
    sub_1C5928670((uint64_t)a1);
  }
  return llvm::MCStreamer::emitAssignment((llvm::MCStreamer *)a1, a2, a3);
}

llvm::raw_ostream *sub_1C591F8D4(uint64_t a1, llvm::MCSymbol *a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  void *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;

  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0x14uLL)
  {
    qmemcpy(v7, ".lto_set_conditional ", 21);
    *((_QWORD *)v6 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v6, ".lto_set_conditional ", 0x15uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v8 = *(llvm::raw_ostream **)(a1 + 280);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8236;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  llvm::MCExpr::print(a3);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C591F9A8(uint64_t a1, llvm::MCSymbol *a2, llvm::MCSymbol *a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _WORD *v9;

  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 8)
  {
    *(_BYTE *)(v7 + 8) = 32;
    *(_QWORD *)v7 = *(_QWORD *)".weakref ";
    *((_QWORD *)v6 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v6, ".weakref ", 9uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v8 = *(llvm::raw_ostream **)(a1 + 280);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8236;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  llvm::MCSymbol::print(a3, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  return sub_1C5928670(a1);
}

uint64_t sub_1C591FA78(uint64_t a1, llvm::MCSymbol *a2, int a3)
{
  int v5;
  uint64_t result;
  llvm::raw_ostream *v7;
  _OWORD *v8;
  const char *v9;
  size_t v10;
  llvm::raw_ostream *v11;
  _DWORD *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  char v15;
  char *v16;
  llvm::raw_ostream *v17;
  _QWORD *v18;
  const char *v19;
  size_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  size_t v36;
  uint64_t v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  const char *v41;
  int v42;
  const char *v43;
  uint64_t v44;
  int v45;

  v5 = a3 - 2;
  if ((a3 - 2) >= 7)
  {
    result = 0;
    switch(a3)
    {
      case 1:
        return result;
      case 9:
        v21 = *(const char **)(*(_QWORD *)(a1 + 288) + 344);
        if (v21)
          goto LABEL_57;
        break;
      case 10:
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v22 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v22) <= 8)
        {
          v9 = "\t.lglobl\t";
          goto LABEL_30;
        }
        v38 = "\t.lglobl\t";
        goto LABEL_85;
      case 11:
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v22 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v22) <= 8)
        {
          v9 = "\t.extern\t";
          goto LABEL_30;
        }
        v38 = "\t.extern\t";
        goto LABEL_85;
      case 12:
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v22 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v22) <= 8)
        {
          v9 = "\t.hidden\t";
LABEL_30:
          v10 = 9;
          goto LABEL_61;
        }
        v38 = "\t.hidden\t";
LABEL_85:
        *(_BYTE *)(v22 + 8) = 9;
        *(_QWORD *)v22 = *(_QWORD *)v38;
        v37 = *((_QWORD *)v7 + 4) + 9;
        goto LABEL_100;
      case 13:
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v23 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v23) <= 0x11)
        {
          v9 = "\t.indirect_symbol\t";
          goto LABEL_55;
        }
        v39 = 2412;
        v40 = "\t.indirect_symbol\t";
        goto LABEL_98;
      case 14:
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v24 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v24) <= 0xA)
        {
          v9 = "\t.internal\t";
          v10 = 11;
          goto LABEL_61;
        }
        *(_DWORD *)(v24 + 7) = 158097774;
        *(_QWORD *)v24 = *(_QWORD *)"\t.internal\t";
        v37 = *((_QWORD *)v7 + 4) + 11;
        goto LABEL_100;
      case 15:
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v25 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v25) <= 0x10)
        {
          v9 = "\t.lazy_reference\t";
          goto LABEL_45;
        }
        v41 = "\t.lazy_reference\t";
        goto LABEL_93;
      case 16:
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v26 = (_QWORD *)*((_QWORD *)v7 + 4);
        if (*((_QWORD *)v7 + 3) - (_QWORD)v26 <= 7uLL)
        {
          v9 = "\t.local\t";
          v10 = 8;
          goto LABEL_61;
        }
        *v26 = 0x96C61636F6C2E09;
        v37 = *((_QWORD *)v7 + 4) + 8;
        goto LABEL_100;
      case 17:
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 288) + 367))
          return 0;
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v8 = (_OWORD *)*((_QWORD *)v7 + 4);
        if (*((_QWORD *)v7 + 3) - (_QWORD)v8 <= 0xFuLL)
        {
          v9 = "\t.no_dead_strip\t";
          v10 = 16;
          goto LABEL_61;
        }
        *v8 = *(_OWORD *)"\t.no_dead_strip\t";
        v37 = *((_QWORD *)v7 + 4) + 16;
        goto LABEL_100;
      case 18:
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v23 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v23) <= 0x11)
        {
          v9 = "\t.symbol_resolver\t";
          goto LABEL_55;
        }
        v39 = 2418;
        v40 = "\t.symbol_resolver\t";
        goto LABEL_98;
      case 19:
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v27 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v27) <= 0xB)
        {
          v9 = "\t.alt_entry\t";
          goto LABEL_50;
        }
        v42 = 158954100;
        v43 = "\t.alt_entry\t";
        goto LABEL_96;
      case 20:
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v25 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v25) <= 0x10)
        {
          v9 = "\t.private_extern\t";
LABEL_45:
          v10 = 17;
          goto LABEL_61;
        }
        v41 = "\t.private_extern\t";
LABEL_93:
        *(_BYTE *)(v25 + 16) = 9;
        *(_OWORD *)v25 = *(_OWORD *)v41;
        v37 = *((_QWORD *)v7 + 4) + 17;
        goto LABEL_100;
      case 21:
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v27 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v27) <= 0xB)
        {
          v9 = "\t.protected\t";
          goto LABEL_50;
        }
        v42 = 157574516;
        v43 = "\t.protected\t";
        goto LABEL_96;
      case 22:
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v27 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v27) <= 0xB)
        {
          v9 = "\t.reference\t";
LABEL_50:
          v10 = 12;
          goto LABEL_61;
        }
        v42 = 157639534;
        v43 = "\t.reference\t";
LABEL_96:
        *(_DWORD *)(v27 + 8) = v42;
        *(_QWORD *)v27 = *(_QWORD *)v43;
        v37 = *((_QWORD *)v7 + 4) + 12;
        goto LABEL_100;
      case 23:
        v21 = *(const char **)(*(_QWORD *)(a1 + 288) + 376);
        if (!v21)
          break;
        goto LABEL_57;
      case 24:
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v23 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v23) <= 0x11)
        {
          v9 = "\t.weak_definition\t";
LABEL_55:
          v10 = 18;
          goto LABEL_61;
        }
        v39 = 2414;
        v40 = "\t.weak_definition\t";
LABEL_98:
        *(_WORD *)(v23 + 16) = v39;
        *(_OWORD *)v23 = *(_OWORD *)v40;
        v37 = *((_QWORD *)v7 + 4) + 18;
        goto LABEL_100;
      case 25:
        v21 = *(const char **)(*(_QWORD *)(a1 + 288) + 384);
        if (!v21)
          break;
LABEL_57:
        v28 = *(_QWORD *)(a1 + 280);
        v10 = strlen(v21);
        v29 = *(void **)(v28 + 32);
        if (v10 > *(_QWORD *)(v28 + 24) - (_QWORD)v29)
        {
          v7 = *(llvm::raw_ostream **)(a1 + 280);
          v9 = v21;
          goto LABEL_61;
        }
        if (v10)
        {
          v35 = v21;
          v36 = v10;
          memcpy(v29, v35, v10);
          *(_QWORD *)(v28 + 32) += v36;
        }
        break;
      case 26:
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v30 = (void *)*((_QWORD *)v7 + 4);
        if (*((_QWORD *)v7 + 3) - (_QWORD)v30 > 0x18uLL)
        {
          qmemcpy(v30, "\t.weak_def_can_be_hidden\t", 25);
          v37 = *((_QWORD *)v7 + 4) + 25;
LABEL_100:
          *((_QWORD *)v7 + 4) = v37;
        }
        else
        {
          v9 = "\t.weak_def_can_be_hidden\t";
          v10 = 25;
LABEL_61:
          llvm::raw_ostream::write(v7, v9, v10);
        }
        break;
      default:
        break;
    }
    llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  }
  else
  {
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 288) + 363))
      return 0;
    v11 = *(llvm::raw_ostream **)(a1 + 280);
    v12 = (_DWORD *)*((_QWORD *)v11 + 4);
    if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 6uLL)
    {
      *(_DWORD *)((char *)v12 + 3) = 157642873;
      *v12 = 2037657097;
      *((_QWORD *)v11 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v11, "\t.type\t", 7uLL);
    }
    llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
    v13 = *(llvm::raw_ostream **)(a1 + 280);
    v14 = (_BYTE *)*((_QWORD *)v13 + 4);
    if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
    {
      v13 = llvm::raw_ostream::write(v13, 44);
    }
    else
    {
      *((_QWORD *)v13 + 4) = v14 + 1;
      *v14 = 44;
    }
    if (**(_BYTE **)(*(_QWORD *)(a1 + 288) + 48) == 64)
      v15 = 37;
    else
      v15 = 64;
    v16 = (char *)*((_QWORD *)v13 + 4);
    if ((unint64_t)v16 >= *((_QWORD *)v13 + 3))
    {
      llvm::raw_ostream::write(v13, v15);
    }
    else
    {
      *((_QWORD *)v13 + 4) = v16 + 1;
      *v16 = v15;
    }
    switch(v5)
    {
      case 0:
        v17 = *(llvm::raw_ostream **)(a1 + 280);
        v18 = (_QWORD *)*((_QWORD *)v17 + 4);
        if (*((_QWORD *)v17 + 3) - (_QWORD)v18 <= 7uLL)
        {
          v19 = "function";
          v20 = 8;
          goto LABEL_76;
        }
        *v18 = 0x6E6F6974636E7566;
        v44 = *((_QWORD *)v17 + 4) + 8;
        goto LABEL_109;
      case 1:
        v17 = *(llvm::raw_ostream **)(a1 + 280);
        v31 = (void *)*((_QWORD *)v17 + 4);
        if (*((_QWORD *)v17 + 3) - (_QWORD)v31 <= 0x14uLL)
        {
          v19 = "gnu_indirect_function";
          v20 = 21;
          goto LABEL_76;
        }
        qmemcpy(v31, "gnu_indirect_function", 21);
        v44 = *((_QWORD *)v17 + 4) + 21;
        goto LABEL_109;
      case 2:
        v17 = *(llvm::raw_ostream **)(a1 + 280);
        v32 = *((_QWORD *)v17 + 4);
        if ((unint64_t)(*((_QWORD *)v17 + 3) - v32) <= 5)
        {
          v19 = "object";
          goto LABEL_73;
        }
        *(_WORD *)(v32 + 4) = 29795;
        v45 = 1701470831;
        goto LABEL_107;
      case 3:
        v17 = *(llvm::raw_ostream **)(a1 + 280);
        v33 = *((_QWORD *)v17 + 4);
        if ((unint64_t)(*((_QWORD *)v17 + 3) - v33) <= 9)
        {
          v19 = "tls_object";
          v20 = 10;
          goto LABEL_76;
        }
        *(_WORD *)(v33 + 8) = 29795;
        *(_QWORD *)v33 = *(_QWORD *)"tls_object";
        v44 = *((_QWORD *)v17 + 4) + 10;
        goto LABEL_109;
      case 4:
        v17 = *(llvm::raw_ostream **)(a1 + 280);
        v32 = *((_QWORD *)v17 + 4);
        if ((unint64_t)(*((_QWORD *)v17 + 3) - v32) <= 5)
        {
          v19 = "common";
          goto LABEL_73;
        }
        *(_WORD *)(v32 + 4) = 28271;
        v45 = 1835888483;
        goto LABEL_107;
      case 5:
        v17 = *(llvm::raw_ostream **)(a1 + 280);
        v32 = *((_QWORD *)v17 + 4);
        if ((unint64_t)(*((_QWORD *)v17 + 3) - v32) <= 5)
        {
          v19 = "notype";
LABEL_73:
          v20 = 6;
          goto LABEL_76;
        }
        *(_WORD *)(v32 + 4) = 25968;
        v45 = 2037673838;
LABEL_107:
        *(_DWORD *)v32 = v45;
        v44 = *((_QWORD *)v17 + 4) + 6;
        goto LABEL_109;
      case 6:
        v17 = *(llvm::raw_ostream **)(a1 + 280);
        v34 = *((_QWORD *)v17 + 4);
        if ((unint64_t)(*((_QWORD *)v17 + 3) - v34) > 0x10)
        {
          *(_BYTE *)(v34 + 16) = 116;
          *(_OWORD *)v34 = *(_OWORD *)"gnu_unique_object";
          v44 = *((_QWORD *)v17 + 4) + 17;
LABEL_109:
          *((_QWORD *)v17 + 4) = v44;
        }
        else
        {
          v19 = "gnu_unique_object";
          v20 = 17;
LABEL_76:
          llvm::raw_ostream::write(v17, v19, v20);
        }
        break;
      default:
        return 0;
    }
  }
  sub_1C5928670(a1);
  return 1;
}

llvm::raw_ostream *sub_1C59201CC(uint64_t a1, llvm::MCSymbol *a2, unsigned int a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  _BYTE *v8;
  llvm::raw_ostream *v9;
  _BYTE *v10;

  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 4)
  {
    *(_BYTE *)(v7 + 4) = 99;
    *(_DWORD *)v7 = 1936024622;
    v8 = (_BYTE *)(*((_QWORD *)v6 + 4) + 5);
    *((_QWORD *)v6 + 4) = v8;
  }
  else
  {
    v6 = llvm::raw_ostream::write(v6, ".desc", 5uLL);
    v8 = (_BYTE *)*((_QWORD *)v6 + 4);
  }
  if ((unint64_t)v8 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 32);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v8 + 1;
    *v8 = 32;
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v9 = *(llvm::raw_ostream **)(a1 + 280);
  v10 = (_BYTE *)*((_QWORD *)v9 + 4);
  if ((unint64_t)v10 >= *((_QWORD *)v9 + 3))
  {
    v9 = llvm::raw_ostream::write(v9, 44);
  }
  else
  {
    *((_QWORD *)v9 + 4) = v10 + 1;
    *v10 = 44;
  }
  sub_1C5E21910(v9, a3, 0, 0, 0);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C59202BC(uint64_t a1, llvm::MCSymbol *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;

  v4 = *(llvm::raw_ostream **)(a1 + 280);
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 5)
  {
    *(_WORD *)(v5 + 4) = 2406;
    *(_DWORD *)v5 = 1701064201;
    *((_QWORD *)v4 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.def\t", 6uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
  {
    llvm::raw_ostream::write(v6, 59);
  }
  else
  {
    *((_QWORD *)v6 + 4) = v7 + 1;
    *v7 = 59;
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5920360(uint64_t a1, int a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  unint64_t v6;
  llvm::raw_ostream *v7;
  int v8;
  _BYTE *v9;

  v4 = *(llvm::raw_ostream **)(a1 + 280);
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 5)
  {
    *(_WORD *)(v5 + 4) = 2412;
    *(_DWORD *)v5 = 1668492809;
    *((_QWORD *)v4 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.scl\t", 6uLL);
  }
  v6 = a2;
  if (a2 < 0)
  {
    v6 = -(uint64_t)a2;
    v7 = v4;
    v8 = 1;
  }
  else
  {
    v7 = v4;
    v8 = 0;
  }
  sub_1C5E21910(v7, v6, 0, 0, v8);
  v9 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 59);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v9 + 1;
    *v9 = 59;
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5920438(uint64_t a1, int a2)
{
  llvm::raw_ostream *v4;
  _DWORD *v5;
  unint64_t v6;
  llvm::raw_ostream *v7;
  int v8;
  _BYTE *v9;

  v4 = *(llvm::raw_ostream **)(a1 + 280);
  v5 = (_DWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 6uLL)
  {
    *(_DWORD *)((char *)v5 + 3) = 157642873;
    *v5 = 2037657097;
    *((_QWORD *)v4 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.type\t", 7uLL);
  }
  v6 = a2;
  if (a2 < 0)
  {
    v6 = -(uint64_t)a2;
    v7 = v4;
    v8 = 1;
  }
  else
  {
    v7 = v4;
    v8 = 0;
  }
  sub_1C5E21910(v7, v6, 0, 0, v8);
  v9 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 59);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v9 + 1;
    *v9 = 59;
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5920514(uint64_t a1)
{
  llvm::raw_ostream *v2;
  _DWORD *v3;

  v2 = *(llvm::raw_ostream **)(a1 + 280);
  v3 = (_DWORD *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 6uLL)
  {
    *(_DWORD *)((char *)v3 + 3) = 1717920878;
    *v3 = 1852124681;
    *((_QWORD *)v2 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.endef", 7uLL);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5920580(uint64_t a1, llvm::MCSymbol *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;

  v4 = *(llvm::raw_ostream **)(a1 + 280);
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 9)
  {
    *(_WORD *)(v5 + 8) = 2408;
    *(_QWORD *)v5 = *(_QWORD *)"\t.safeseh\t";
    *((_QWORD *)v4 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.safeseh\t", 0xAuLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C59205FC(uint64_t a1, llvm::MCSymbol *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;

  v4 = *(llvm::raw_ostream **)(a1 + 280);
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 8)
  {
    *(_BYTE *)(v5 + 8) = 9;
    *(_QWORD *)v5 = *(_QWORD *)"\t.symidx\t";
    *((_QWORD *)v4 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.symidx\t", 9uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5920678(uint64_t a1, llvm::MCSymbol *a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;

  v4 = *(llvm::raw_ostream **)(a1 + 280);
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 8)
  {
    *(_BYTE *)(v5 + 8) = 9;
    *(_QWORD *)v5 = *(_QWORD *)"\t.secidx\t";
    *((_QWORD *)v4 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.secidx\t", 9uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C59206F4(uint64_t a1, llvm::MCSymbol *a2, unint64_t a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;

  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 0xA)
  {
    *(_DWORD *)(v7 + 7) = 154284908;
    *(_QWORD *)v7 = *(_QWORD *)"\t.secrel32\t";
    *((_QWORD *)v6 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.secrel32\t", 0xBuLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  if (a3)
  {
    v8 = *(llvm::raw_ostream **)(a1 + 280);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
    {
      v8 = llvm::raw_ostream::write(v8, 43);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      *v9 = 43;
    }
    sub_1C5E21910(v8, a3, 0, 0, 0);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C59207C4(uint64_t a1, llvm::MCSymbol *a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;

  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 5)
  {
    *(_WORD *)(v7 + 4) = 2401;
    *(_DWORD *)v7 = 1987194377;
    *((_QWORD *)v6 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.rva\t", 6uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  if (a3 >= 1)
  {
    v8 = *(llvm::raw_ostream **)(a1 + 280);
    v9 = (_BYTE *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
    {
      v8 = llvm::raw_ostream::write(v8, 43);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v9 + 1;
      *v9 = 43;
    }
    v11 = a3;
LABEL_11:
    llvm::raw_ostream::operator<<(v8, v11);
    return sub_1C5928670(a1);
  }
  if (a3 < 0)
  {
    v8 = *(llvm::raw_ostream **)(a1 + 280);
    v10 = (_BYTE *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v10 >= *((_QWORD *)v8 + 3))
    {
      v8 = llvm::raw_ostream::write(v8, 45);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v10 + 1;
      *v10 = 45;
    }
    v11 = -a3;
    goto LABEL_11;
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C59208BC(uint64_t a1, llvm::MCSymbol *a2, unint64_t a3, uint64_t a4, unsigned int a5)
{
  llvm::raw_ostream *v10;
  _QWORD *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  _BYTE *v14;
  llvm::raw_ostream *v15;
  _BYTE *v16;
  llvm::raw_ostream *result;
  uint64_t v18;

  v10 = *(llvm::raw_ostream **)(a1 + 280);
  v11 = (_QWORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 7uLL)
  {
    *v11 = 0x96D6D6F636C2E09;
    *((_QWORD *)v10 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v10, "\t.lcomm\t", 8uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v12 = *(llvm::raw_ostream **)(a1 + 280);
  v13 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v13 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), 44);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v13 + 1;
    *v13 = 44;
  }
  sub_1C5E21910(v12, a3, 0, 0, 0);
  v14 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 44);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v14 + 1;
    *v14 = 44;
  }
  llvm::MCSymbol::print((llvm::MCSymbol *)a4, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v15 = *(llvm::raw_ostream **)(a1 + 280);
  v16 = (_BYTE *)*((_QWORD *)v15 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)v15 + 3))
  {
    v15 = llvm::raw_ostream::write(v15, 44);
  }
  else
  {
    *((_QWORD *)v15 + 4) = v16 + 1;
    *v16 = 44;
  }
  sub_1C5E21910(v15, 31 - __clz(a5), 0, 0, 0);
  result = sub_1C5928670(a1);
  v18 = *(_QWORD *)(a4 + 64);
  if (v18)
    return sub_1C5920C88(a1, (llvm::MCSymbol *)a4, *(unsigned __int8 **)(a4 + 56), v18);
  return result;
}

llvm::raw_ostream *sub_1C5920A44(uint64_t a1, uint64_t a2, int a3, int a4)
{
  llvm::raw_ostream *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  size_t v12;
  void *v13;
  size_t v14;
  llvm::raw_ostream *v15;
  _DWORD *v16;
  const char *v17;
  size_t v18;
  uint64_t v19;
  llvm::raw_ostream *result;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  char *v24;

  if (a3 <= 10)
  {
    if (a3 != 9)
    {
      if (a3 == 10)
      {
        v7 = *(llvm::raw_ostream **)(a1 + 280);
        v8 = *((_QWORD *)v7 + 4);
        if ((unint64_t)(*((_QWORD *)v7 + 3) - v8) <= 8)
        {
          v9 = "\t.lglobl\t";
LABEL_15:
          v14 = 9;
          goto LABEL_16;
        }
        v23 = "\t.lglobl\t";
LABEL_35:
        *(_BYTE *)(v8 + 8) = 9;
        *(_QWORD *)v8 = *(_QWORD *)v23;
        *((_QWORD *)v7 + 4) += 9;
        goto LABEL_17;
      }
      goto LABEL_36;
    }
    v10 = *(const char **)(*(_QWORD *)(a1 + 288) + 344);
    if (!v10)
      goto LABEL_17;
LABEL_11:
    v11 = *(llvm::raw_ostream **)(a1 + 280);
    v12 = strlen(v10);
    v13 = (void *)*((_QWORD *)v11 + 4);
    if (v12 > *((_QWORD *)v11 + 3) - (_QWORD)v13)
    {
      v7 = v11;
      v9 = v10;
      v14 = v12;
LABEL_16:
      llvm::raw_ostream::write(v7, v9, v14);
      goto LABEL_17;
    }
    if (v12)
    {
      memcpy(v13, v10, v12);
      *((_QWORD *)v11 + 4) += v12;
    }
    goto LABEL_17;
  }
  if (a3 == 11)
  {
    v7 = *(llvm::raw_ostream **)(a1 + 280);
    v8 = *((_QWORD *)v7 + 4);
    if ((unint64_t)(*((_QWORD *)v7 + 3) - v8) <= 8)
    {
      v9 = "\t.extern\t";
      goto LABEL_15;
    }
    v23 = "\t.extern\t";
    goto LABEL_35;
  }
  if (a3 != 23)
  {
LABEL_36:
    v24 = "unhandled linkage type";
    goto LABEL_37;
  }
  v10 = *(const char **)(*(_QWORD *)(a1 + 288) + 376);
  if (v10)
    goto LABEL_11;
LABEL_17:
  llvm::MCSymbol::print((llvm::MCSymbol *)a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  if (!a4)
    goto LABEL_25;
  if (a4 != 21)
  {
    if (a4 == 12)
    {
      v15 = *(llvm::raw_ostream **)(a1 + 280);
      v16 = (_DWORD *)*((_QWORD *)v15 + 4);
      if (*((_QWORD *)v15 + 3) - (_QWORD)v16 <= 6uLL)
      {
        v17 = ",hidden";
        v18 = 7;
LABEL_24:
        llvm::raw_ostream::write(v15, v17, v18);
        goto LABEL_25;
      }
      *(_DWORD *)((char *)v16 + 3) = 1852138596;
      *v16 = 1684629548;
      v22 = *((_QWORD *)v15 + 4) + 7;
      goto LABEL_32;
    }
    v24 = "unexpected value for Visibility type";
LABEL_37:
    llvm::report_fatal_error((llvm *)v24, (const char *)1);
  }
  v15 = *(llvm::raw_ostream **)(a1 + 280);
  v19 = *((_QWORD *)v15 + 4);
  if ((unint64_t)(*((_QWORD *)v15 + 3) - v19) <= 9)
  {
    v17 = ",protected";
    v18 = 10;
    goto LABEL_24;
  }
  *(_WORD *)(v19 + 8) = 25701;
  *(_QWORD *)v19 = *(_QWORD *)",protected";
  v22 = *((_QWORD *)v15 + 4) + 10;
LABEL_32:
  *((_QWORD *)v15 + 4) = v22;
LABEL_25:
  result = sub_1C5928670(a1);
  v21 = *(_QWORD *)(a2 + 64);
  if (v21)
    return sub_1C5920C88(a1, (llvm::MCSymbol *)a2, *(unsigned __int8 **)(a2 + 56), v21);
  return result;
}

llvm::raw_ostream *sub_1C5920C88(uint64_t a1, llvm::MCSymbol *a2, unsigned __int8 *a3, uint64_t a4)
{
  llvm::raw_ostream *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  _BYTE *v12;
  int v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  llvm::raw_ostream *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;

  v8 = *(llvm::raw_ostream **)(a1 + 280);
  v9 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 8)
  {
    *(_BYTE *)(v9 + 8) = 9;
    *(_QWORD *)v9 = *(_QWORD *)"\t.rename\t";
    *((_QWORD *)v8 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v8, "\t.rename\t", 9uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v10 = *(llvm::raw_ostream **)(a1 + 280);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    v10 = llvm::raw_ostream::write(v10, 44);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 44;
  }
  v12 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v12 >= *((_QWORD *)v10 + 3))
  {
    llvm::raw_ostream::write(v10, 34);
    if (!a4)
      goto LABEL_18;
  }
  else
  {
    *((_QWORD *)v10 + 4) = v12 + 1;
    *v12 = 34;
    if (!a4)
      goto LABEL_18;
  }
  do
  {
    v13 = *a3;
    if (v13 == 34)
    {
      v14 = *(llvm::raw_ostream **)(a1 + 280);
      v15 = (_BYTE *)*((_QWORD *)v14 + 4);
      if ((unint64_t)v15 >= *((_QWORD *)v14 + 3))
      {
        llvm::raw_ostream::write(v14, 34);
      }
      else
      {
        *((_QWORD *)v14 + 4) = v15 + 1;
        *v15 = 34;
      }
    }
    v16 = *(llvm::raw_ostream **)(a1 + 280);
    v17 = (_BYTE *)*((_QWORD *)v16 + 4);
    if ((unint64_t)v17 >= *((_QWORD *)v16 + 3))
    {
      llvm::raw_ostream::write(v16, v13);
    }
    else
    {
      *((_QWORD *)v16 + 4) = v17 + 1;
      *v17 = v13;
    }
    ++a3;
    --a4;
  }
  while (a4);
LABEL_18:
  v18 = *(llvm::raw_ostream **)(a1 + 280);
  v19 = (_BYTE *)*((_QWORD *)v18 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v18 + 3))
  {
    llvm::raw_ostream::write(v18, 34);
  }
  else
  {
    *((_QWORD *)v18 + 4) = v19 + 1;
    *v19 = 34;
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5920E10(uint64_t a1, const void *a2, size_t a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  void *v8;

  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 5)
  {
    *(_WORD *)(v7 + 4) = 8294;
    *(_DWORD *)v7 = 1701981705;
    v8 = (void *)(*((_QWORD *)v6 + 4) + 6);
    *((_QWORD *)v6 + 4) = v8;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.ref ", 6uLL);
    v8 = (void *)*((_QWORD *)v6 + 4);
  }
  if (a3 <= *((_QWORD *)v6 + 3) - (_QWORD)v8)
  {
    if (a3)
    {
      memcpy(v8, a2, a3);
      *((_QWORD *)v6 + 4) += a3;
    }
  }
  else
  {
    llvm::raw_ostream::write(v6, (const char *)a2, a3);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5920ED0(uint64_t a1, llvm::MCSymbol *a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  _DWORD *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;

  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = (_DWORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 6uLL)
  {
    *(_DWORD *)((char *)v7 + 3) = 157645417;
    *v7 = 1769156105;
    *((_QWORD *)v6 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.size\t", 7uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v8 = *(llvm::raw_ostream **)(a1 + 280);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8236;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  llvm::MCExpr::print(a3);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5920FA4(uint64_t a1, llvm::MCSymbol *a2, const void *a3, size_t a4, char a5)
{
  llvm::raw_ostream *v10;
  _QWORD *v11;
  llvm::raw_ostream *v12;
  _WORD *v13;
  void *v14;
  llvm::raw_ostream *v15;
  _QWORD *v16;
  uint64_t v18[2];

  v18[0] = (uint64_t)a3;
  v18[1] = a4;
  v10 = *(llvm::raw_ostream **)(a1 + 280);
  v11 = (_QWORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 7uLL)
  {
    *v11 = 0x207265766D79732ELL;
    *((_QWORD *)v10 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v10, ".symver ", 8uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v12 = *(llvm::raw_ostream **)(a1 + 280);
  v13 = (_WORD *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 1uLL)
  {
    *v13 = 8236;
    v14 = (void *)(*((_QWORD *)v12 + 4) + 2);
    *((_QWORD *)v12 + 4) = v14;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), ", ", 2uLL);
    v14 = (void *)*((_QWORD *)v12 + 4);
  }
  if (a4 <= *((_QWORD *)v12 + 3) - (_QWORD)v14)
  {
    if (a4)
    {
      memcpy(v14, a3, a4);
      *((_QWORD *)v12 + 4) += a4;
    }
  }
  else
  {
    llvm::raw_ostream::write(v12, (const char *)a3, a4);
  }
  if ((a5 & 1) == 0 && llvm::StringRef::find(v18, "@@@", 3uLL, 0) == -1)
  {
    v15 = *(llvm::raw_ostream **)(a1 + 280);
    v16 = (_QWORD *)*((_QWORD *)v15 + 4);
    if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 7uLL)
    {
      *v16 = 0x65766F6D6572202CLL;
      *((_QWORD *)v15 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v15, ", remove", 8uLL);
    }
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5921134(uint64_t a1, int a2, uint64_t a3)
{
  char v5;
  const char *v6;
  size_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  _DWORD *v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  llvm::MCSymbol **v14;
  uint64_t v15;
  char v16;
  llvm::MCSymbol *v17;
  llvm::raw_ostream *v18;
  _WORD *v19;

  switch(a2)
  {
    case 1:
      v5 = 0;
      v6 = "AdrpAdrp";
      v7 = 8;
      break;
    case 2:
      v5 = 0;
      v6 = "AdrpLdr";
      goto LABEL_11;
    case 3:
      v5 = 0;
      v6 = "AdrpAddLdr";
      goto LABEL_13;
    case 4:
      v5 = 0;
      v6 = "AdrpLdrGotLdr";
      goto LABEL_9;
    case 5:
      v5 = 0;
      v6 = "AdrpAddStr";
      goto LABEL_13;
    case 6:
      v5 = 0;
      v6 = "AdrpLdrGotStr";
LABEL_9:
      v7 = 13;
      break;
    case 7:
      v5 = 0;
      v6 = "AdrpAdd";
LABEL_11:
      v7 = 7;
      break;
    case 8:
      v5 = 0;
      v6 = "AdrpLdrGot";
LABEL_13:
      v7 = 10;
      break;
    default:
      v6 = 0;
      v7 = 0;
      v5 = 1;
      break;
  }
  v8 = *(llvm::raw_ostream **)(a1 + 280);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t", 1uLL);
    v10 = (_DWORD *)*((_QWORD *)v8 + 4);
  }
  else
  {
    *v9 = 9;
    v10 = (_DWORD *)(*((_QWORD *)v8 + 4) + 1);
    *((_QWORD *)v8 + 4) = v10;
  }
  if (*((_QWORD *)v8 + 3) - (_QWORD)v10 > 3uLL)
  {
    *v10 = 1752132654;
    v11 = (_BYTE *)(*((_QWORD *)v8 + 4) + 4);
    *((_QWORD *)v8 + 4) = v11;
  }
  else
  {
    llvm::raw_ostream::write(v8, ".loh", 4uLL);
    v11 = (_BYTE *)*((_QWORD *)v8 + 4);
  }
  if (*((_BYTE **)v8 + 3) == v11)
  {
    llvm::raw_ostream::write(v8, " ", 1uLL);
    v12 = (_BYTE *)*((_QWORD *)v8 + 4);
  }
  else
  {
    *v11 = 32;
    v12 = (_BYTE *)(*((_QWORD *)v8 + 4) + 1);
    *((_QWORD *)v8 + 4) = v12;
  }
  if (v7 <= *((_QWORD *)v8 + 3) - (_QWORD)v12)
  {
    if ((v5 & 1) == 0)
    {
      memcpy(v12, v6, v7);
      v12 = (_BYTE *)(*((_QWORD *)v8 + 4) + v7);
      *((_QWORD *)v8 + 4) = v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v8, v6, v7);
    v12 = (_BYTE *)*((_QWORD *)v8 + 4);
  }
  if (*((_BYTE **)v8 + 3) == v12)
  {
    llvm::raw_ostream::write(v8, "\t", 1uLL);
  }
  else
  {
    *v12 = 9;
    ++*((_QWORD *)v8 + 4);
  }
  v13 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v13)
  {
    v14 = *(llvm::MCSymbol ***)a3;
    v15 = 8 * v13;
    v16 = 1;
    do
    {
      v17 = *v14;
      if ((v16 & 1) == 0)
      {
        v18 = *(llvm::raw_ostream **)(a1 + 280);
        v19 = (_WORD *)*((_QWORD *)v18 + 4);
        if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 1uLL)
        {
          *v19 = 8236;
          *((_QWORD *)v18 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v18, ", ", 2uLL);
        }
      }
      llvm::MCSymbol::print(v17, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
      v16 = 0;
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C59213E0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  llvm::raw_ostream *v5;
  _OWORD *v6;
  _WORD *v7;
  llvm::raw_ostream *result;
  _BYTE *v9;

  v5 = *(llvm::raw_ostream **)(a1 + 280);
  v6 = (_OWORD *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 0xFuLL)
  {
    *v6 = *(_OWORD *)"\t.gnu_attribute ";
    *((_QWORD *)v5 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.gnu_attribute ", 0x10uLL);
  }
  sub_1C5E21910(v5, a2, 0, 0, 0);
  v7 = (_WORD *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v7 > 1uLL)
  {
    *v7 = 8236;
    *((_QWORD *)v5 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v5, ", ", 2uLL);
  }
  result = sub_1C5E21910(v5, a3, 0, 0, 0);
  v9 = (_BYTE *)*((_QWORD *)v5 + 4);
  if (*((_BYTE **)v5 + 3) == v9)
    return llvm::raw_ostream::write(v5, "\n", 1uLL);
  *v9 = 10;
  ++*((_QWORD *)v5 + 4);
  return result;
}

llvm::raw_ostream *sub_1C59214FC(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  llvm::raw_ostream *v8;
  _DWORD *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  unint64_t v14;
  llvm::raw_ostream *result;
  uint64_t v16;

  v8 = *(llvm::raw_ostream **)(a1 + 280);
  v9 = (_DWORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 6uLL)
  {
    *(_DWORD *)((char *)v9 + 3) = 158166383;
    *v9 = 1868770825;
    *((_QWORD *)v8 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v8, "\t.comm\t", 7uLL);
  }
  llvm::MCSymbol::print((llvm::MCSymbol *)a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v10 = *(llvm::raw_ostream **)(a1 + 280);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    v10 = llvm::raw_ostream::write(v10, 44);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 44;
  }
  sub_1C5E21910(v10, a3, 0, 0, 0);
  if (a4)
  {
    v12 = *(llvm::raw_ostream **)(a1 + 280);
    v14 = *((_QWORD *)v12 + 3);
    v13 = (_BYTE *)*((_QWORD *)v12 + 4);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 288) + 354))
    {
      if ((unint64_t)v13 >= v14)
      {
        v12 = llvm::raw_ostream::write(v12, 44);
      }
      else
      {
        *((_QWORD *)v12 + 4) = v13 + 1;
        *v13 = 44;
      }
    }
    else
    {
      if ((unint64_t)v13 >= v14)
      {
        v12 = llvm::raw_ostream::write(v12, 44);
      }
      else
      {
        *((_QWORD *)v12 + 4) = v13 + 1;
        *v13 = 44;
      }
      a4 = __clz(a4) ^ 0x1F;
    }
    sub_1C5E21910(v12, a4, 0, 0, 0);
  }
  result = sub_1C5928670(a1);
  if (a2 && (*(_DWORD *)(a2 + 8) & 0x1C0) == 0x180)
  {
    v16 = *(_QWORD *)(a2 + 64);
    if (v16)
      return sub_1C5920C88(a1, (llvm::MCSymbol *)a2, *(unsigned __int8 **)(a2 + 56), v16);
  }
  return result;
}

llvm::raw_ostream *sub_1C592167C(uint64_t a1, llvm::MCSymbol *a2, unint64_t a3, unsigned int a4)
{
  llvm::raw_ostream *v8;
  _QWORD *v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  int v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  _BYTE *v15;

  v8 = *(llvm::raw_ostream **)(a1 + 280);
  v9 = (_QWORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 7uLL)
  {
    *v9 = 0x96D6D6F636C2E09;
    *((_QWORD *)v8 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v8, "\t.lcomm\t", 8uLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v10 = *(llvm::raw_ostream **)(a1 + 280);
  v11 = (_BYTE *)*((_QWORD *)v10 + 4);
  if ((unint64_t)v11 >= *((_QWORD *)v10 + 3))
  {
    v10 = llvm::raw_ostream::write(v10, 44);
  }
  else
  {
    *((_QWORD *)v10 + 4) = v11 + 1;
    *v11 = 44;
  }
  sub_1C5E21910(v10, a3, 0, 0, 0);
  if (a4 >= 2)
  {
    v12 = *(_DWORD *)(*(_QWORD *)(a1 + 288) + 356);
    if (v12 == 2)
    {
      v13 = *(llvm::raw_ostream **)(a1 + 280);
      v15 = (_BYTE *)*((_QWORD *)v13 + 4);
      if ((unint64_t)v15 >= *((_QWORD *)v13 + 3))
      {
        v13 = llvm::raw_ostream::write(v13, 44);
      }
      else
      {
        *((_QWORD *)v13 + 4) = v15 + 1;
        *v15 = 44;
      }
      a4 = __clz(a4) ^ 0x1F;
      goto LABEL_16;
    }
    if (v12 == 1)
    {
      v13 = *(llvm::raw_ostream **)(a1 + 280);
      v14 = (_BYTE *)*((_QWORD *)v13 + 4);
      if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
      {
        v13 = llvm::raw_ostream::write(v13, 44);
      }
      else
      {
        *((_QWORD *)v13 + 4) = v14 + 1;
        *v14 = 44;
      }
LABEL_16:
      sub_1C5E21910(v13, a4, 0, 0, 0);
    }
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C59217DC(uint64_t a1, uint64_t a2, llvm::MCSymbol *a3, unint64_t a4, unsigned int a5)
{
  llvm::raw_ostream *v10;
  uint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  size_t v15;
  void *v16;
  const void *v17;
  size_t v18;
  int v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  llvm::MCSymbol *v27;

  if (a3)
  {
    v27 = a3;
    *(_QWORD *)a3 = *(_QWORD *)a3 & 7 | (a2 + 48);
    v20 = *(_DWORD *)(a1 + 96) + 1;
    *((_DWORD *)sub_1C62B452C((uint64_t *)(a1 + 88), &v27) + 2) = v20;
  }
  v10 = *(llvm::raw_ostream **)(a1 + 280);
  v11 = *((_QWORD *)v10 + 4);
  if ((unint64_t)(*((_QWORD *)v10 + 3) - v11) > 9)
  {
    *(_WORD *)(v11 + 8) = 8300;
    *(_QWORD *)v11 = *(_QWORD *)".zerofill ";
    *((_QWORD *)v10 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v10, ".zerofill ", 0xAuLL);
  }
  v12 = *(_QWORD **)(a1 + 280);
  if (!*(_BYTE *)(a2 + 239))
  {
    v15 = strlen((const char *)(a2 + 224));
    v14 = v12 + 4;
    v13 = (_BYTE *)v12[4];
    if (v15 <= v12[3] - (_QWORD)v13)
    {
      if (!v15)
        goto LABEL_12;
      goto LABEL_11;
    }
LABEL_9:
    llvm::raw_ostream::write((llvm::raw_ostream *)v12, (const char *)(a2 + 224), v15);
    v13 = (_BYTE *)v12[4];
    goto LABEL_12;
  }
  v14 = v12 + 4;
  v13 = (_BYTE *)v12[4];
  v15 = 16;
  if (v12[3] - (_QWORD)v13 <= 0xFuLL)
    goto LABEL_9;
LABEL_11:
  memcpy(v13, (const void *)(a2 + 224), v15);
  v13 = (_BYTE *)(*v14 + v15);
  *v14 = v13;
LABEL_12:
  if ((_BYTE *)v12[3] == v13)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v12, ",", 1uLL);
    v16 = (void *)v12[4];
  }
  else
  {
    *v13 = 44;
    v16 = (void *)(v12[4] + 1);
    v12[4] = v16;
  }
  v17 = *(const void **)(a2 + 200);
  v18 = *(_QWORD *)(a2 + 208);
  if (v18 <= v12[3] - (_QWORD)v16)
  {
    if (v18)
    {
      memcpy(v16, v17, v18);
      v12[4] += v18;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v12, (const char *)v17, v18);
  }
  if (a3)
  {
    v21 = *(llvm::raw_ostream **)(a1 + 280);
    v22 = (_BYTE *)*((_QWORD *)v21 + 4);
    if ((unint64_t)v22 >= *((_QWORD *)v21 + 3))
    {
      llvm::raw_ostream::write(v21, 44);
    }
    else
    {
      *((_QWORD *)v21 + 4) = v22 + 1;
      *v22 = 44;
    }
    llvm::MCSymbol::print(a3, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
    v23 = *(llvm::raw_ostream **)(a1 + 280);
    v24 = (_BYTE *)*((_QWORD *)v23 + 4);
    if ((unint64_t)v24 >= *((_QWORD *)v23 + 3))
    {
      v23 = llvm::raw_ostream::write(v23, 44);
    }
    else
    {
      *((_QWORD *)v23 + 4) = v24 + 1;
      *v24 = 44;
    }
    sub_1C5E21910(v23, a4, 0, 0, 0);
    if (a5)
    {
      v25 = *(llvm::raw_ostream **)(a1 + 280);
      v26 = (_BYTE *)*((_QWORD *)v25 + 4);
      if ((unint64_t)v26 >= *((_QWORD *)v25 + 3))
      {
        v25 = llvm::raw_ostream::write(v25, 44);
      }
      else
      {
        *((_QWORD *)v25 + 4) = v26 + 1;
        *v26 = 44;
      }
      sub_1C5E21910(v25, __clz(a5) ^ 0x1F, 0, 0, 0);
    }
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5921A80(uint64_t a1, uint64_t a2, llvm::MCSymbol *a3, unint64_t a4, unsigned int a5)
{
  int v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _WORD *v13;
  llvm::raw_ostream *v14;
  _WORD *v15;
  llvm::MCSymbol *v17;

  v17 = a3;
  *(_QWORD *)a3 = *(_QWORD *)a3 & 7 | (a2 + 48);
  v9 = *(_DWORD *)(a1 + 96) + 1;
  *((_DWORD *)sub_1C62B452C((uint64_t *)(a1 + 88), &v17) + 2) = v9;
  v10 = *(llvm::raw_ostream **)(a1 + 280);
  v11 = *((_QWORD *)v10 + 4);
  if ((unint64_t)(*((_QWORD *)v10 + 3) - v11) > 5)
  {
    *(_WORD *)(v11 + 4) = 8307;
    *(_DWORD *)v11 = 1935832110;
    *((_QWORD *)v10 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v10, ".tbss ", 6uLL);
  }
  llvm::MCSymbol::print(a3, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v12 = *(llvm::raw_ostream **)(a1 + 280);
  v13 = (_WORD *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 1uLL)
  {
    *v13 = 8236;
    *((_QWORD *)v12 + 4) += 2;
  }
  else
  {
    v12 = llvm::raw_ostream::write(v12, ", ", 2uLL);
  }
  sub_1C5E21910(v12, a4, 0, 0, 0);
  if (a5 >= 2)
  {
    v14 = *(llvm::raw_ostream **)(a1 + 280);
    v15 = (_WORD *)*((_QWORD *)v14 + 4);
    if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 1uLL)
    {
      *v15 = 8236;
      *((_QWORD *)v14 + 4) += 2;
    }
    else
    {
      v14 = llvm::raw_ostream::write(v14, ", ", 2uLL);
    }
    sub_1C5E21910(v14, __clz(a5) ^ 0x1F, 0, 0, 0);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5921BF4(llvm::raw_ostream *result, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  llvm::raw_ostream *v11;
  size_t v12;
  void *v13;
  llvm::raw_ostream *v14;
  const char *v15;
  const char *v16;
  unint64_t v17;
  llvm::raw_ostream *v18;
  size_t v19;
  void *v20;
  llvm::raw_ostream *v21;
  size_t v22;
  void *v23;
  llvm::raw_ostream *v24;
  const char *v25;
  unint64_t v26;
  unsigned __int8 *v27;
  const void *v28;
  llvm::raw_ostream *v29;
  size_t v30;
  void *v31;
  llvm::raw_ostream *v32;
  unsigned __int8 *v33;
  unsigned int v34;
  _WORD *v35;
  _BYTE *v36;
  int v37;
  _BYTE *v38;
  int v39;
  _BYTE *v40;
  char v41;
  char *v42;
  _BYTE *v43;
  unsigned int v44;
  _WORD *v45;
  llvm::raw_ostream *v46;
  const void *v47;
  void *v48;
  unsigned int v49;
  _BYTE *v50;
  int v51;
  _BYTE *v52;
  int v53;
  _BYTE *v54;
  char v55;
  char *v56;
  _BYTE *v57;
  _BYTE *v58;
  int v59;
  _BYTE *v60;
  int v61;
  _BYTE *v62;
  char v63;
  char *v64;
  const void *v65;
  void *v66;
  char v67[2];
  char v68[2];

  if (!a3)
    return result;
  v3 = a3;
  v4 = a2;
  v5 = (uint64_t)result;
  v6 = a3 - 1;
  if (a3 == 1)
  {
    v7 = *((_QWORD *)result + 2);
    if (v7)
      return (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, unint64_t))(*(_QWORD *)v7 + 64))(v7, a2, a3);
    v8 = *(_QWORD *)(v5 + 288);
    goto LABEL_12;
  }
  v8 = *((_QWORD *)result + 36);
  v9 = *(const void **)(v8 + 216);
  if (v9 && !a2[v6])
  {
    v21 = (llvm::raw_ostream *)*((_QWORD *)result + 35);
    v22 = strlen(*(const char **)(v8 + 216));
    v23 = (void *)*((_QWORD *)v21 + 4);
    if (v22 <= *((_QWORD *)v21 + 3) - (_QWORD)v23)
    {
      if (v22)
      {
        memcpy(v23, v9, v22);
        *((_QWORD *)v21 + 4) += v22;
      }
      goto LABEL_23;
    }
    v24 = v21;
    v25 = (const char *)v9;
    goto LABEL_22;
  }
  v10 = *(const void **)(v8 + 208);
  if (v10)
  {
    v11 = (llvm::raw_ostream *)*((_QWORD *)result + 35);
    v12 = strlen(*(const char **)(v8 + 208));
    v13 = (void *)*((_QWORD *)v11 + 4);
    if (v12 <= *((_QWORD *)v11 + 3) - (_QWORD)v13)
    {
      if (v12)
      {
        memcpy(v13, v10, v12);
        *((_QWORD *)v11 + 4) += v12;
      }
      goto LABEL_25;
    }
    v14 = v11;
    v15 = (const char *)v10;
    goto LABEL_10;
  }
  if (*(_BYTE *)(v8 + 361))
  {
    if (&a2[a3 - 1] != a2)
    {
      v26 = a3 - 1;
      v27 = a2;
      while (*v27 - 32 < 0x5F)
      {
        ++v27;
        if (!--v26)
          goto LABEL_35;
      }
      goto LABEL_37;
    }
LABEL_35:
    if (a2[v6] && a2[v6] - 32 > 0x5E)
      goto LABEL_37;
    v46 = (llvm::raw_ostream *)*((_QWORD *)result + 35);
    if (a2[v6])
    {
      v47 = *(const void **)(v8 + 224);
      if (!v47)
        goto LABEL_25;
      v12 = strlen(*(const char **)(v8 + 224));
      v48 = (void *)*((_QWORD *)v46 + 4);
      if (v12 <= *((_QWORD *)v46 + 3) - (_QWORD)v48)
      {
        if (v12)
        {
          memcpy(v48, v47, v12);
          *((_QWORD *)v46 + 4) += v12;
        }
        goto LABEL_25;
      }
      v14 = v46;
      v15 = (const char *)v47;
LABEL_10:
      llvm::raw_ostream::write(v14, v15, v12);
LABEL_25:
      sub_1C59289DC((llvm::raw_ostream *)v5, v4, v3, *(llvm::raw_ostream **)(v5 + 280));
      return sub_1C5928670(v5);
    }
    v65 = *(const void **)(v8 + 232);
    if (!v65)
    {
LABEL_23:
      if (v3 >= v6)
        v3 = v6;
      goto LABEL_25;
    }
    v22 = strlen(*(const char **)(v8 + 232));
    v66 = (void *)*((_QWORD *)v46 + 4);
    if (v22 <= *((_QWORD *)v46 + 3) - (_QWORD)v66)
    {
      if (v22)
      {
        memcpy(v66, v65, v22);
        *((_QWORD *)v46 + 4) += v22;
      }
      goto LABEL_23;
    }
    v24 = v46;
    v25 = (const char *)v65;
LABEL_22:
    llvm::raw_ostream::write(v24, v25, v22);
    goto LABEL_23;
  }
LABEL_37:
  v28 = *(const void **)(v8 + 224);
  if (v28)
  {
    v29 = (llvm::raw_ostream *)*((_QWORD *)result + 35);
    v30 = strlen(*(const char **)(v8 + 224));
    v31 = (void *)*((_QWORD *)v29 + 4);
    if (v30 <= *((_QWORD *)v29 + 3) - (_QWORD)v31)
    {
      if (v30)
      {
        memcpy(v31, v28, v30);
        *((_QWORD *)v29 + 4) += v30;
      }
    }
    else
    {
      llvm::raw_ostream::write(v29, (const char *)v28, v30);
    }
    v32 = *(llvm::raw_ostream **)(v5 + 280);
    v33 = &v4[v3 - 1];
    if (*(_DWORD *)(*(_QWORD *)(v5 + 288) + 240))
    {
      if (v33 != v4)
      {
        do
        {
          v34 = *v4;
          if (v34 - 32 > 0x5E)
          {
            v36 = (_BYTE *)*((_QWORD *)v32 + 4);
            if ((unint64_t)v36 >= *((_QWORD *)v32 + 3))
            {
              v32 = llvm::raw_ostream::write(v32, 48);
            }
            else
            {
              *((_QWORD *)v32 + 4) = v36 + 1;
              *v36 = 48;
            }
            v37 = (v34 >> 6) | 0x30;
            v38 = (_BYTE *)*((_QWORD *)v32 + 4);
            if ((unint64_t)v38 >= *((_QWORD *)v32 + 3))
            {
              v32 = llvm::raw_ostream::write(v32, v37);
            }
            else
            {
              *((_QWORD *)v32 + 4) = v38 + 1;
              *v38 = v37;
            }
            v39 = (v34 >> 3) & 7 | 0x30;
            v40 = (_BYTE *)*((_QWORD *)v32 + 4);
            if ((unint64_t)v40 >= *((_QWORD *)v32 + 3))
            {
              v32 = llvm::raw_ostream::write(v32, v39);
            }
            else
            {
              *((_QWORD *)v32 + 4) = v40 + 1;
              *v40 = v39;
            }
            v41 = v34 & 7 | 0x30;
            v42 = (char *)*((_QWORD *)v32 + 4);
            if ((unint64_t)v42 >= *((_QWORD *)v32 + 3))
            {
              v32 = llvm::raw_ostream::write(v32, v41);
            }
            else
            {
              *((_QWORD *)v32 + 4) = v42 + 1;
              *v42 = v41;
            }
          }
          else
          {
            v67[0] = 39;
            v67[1] = v34;
            v35 = (_WORD *)*((_QWORD *)v32 + 4);
            if (*((_QWORD *)v32 + 3) - (_QWORD)v35 > 1uLL)
            {
              *v35 = *(_WORD *)v67;
              *((_QWORD *)v32 + 4) += 2;
            }
            else
            {
              v32 = llvm::raw_ostream::write(v32, v67, 2uLL);
            }
          }
          v43 = (_BYTE *)*((_QWORD *)v32 + 4);
          if ((unint64_t)v43 >= *((_QWORD *)v32 + 3))
          {
            v32 = llvm::raw_ostream::write(v32, 44);
          }
          else
          {
            *((_QWORD *)v32 + 4) = v43 + 1;
            *v43 = 44;
          }
          ++v4;
          --v6;
        }
        while (v6);
      }
      v44 = *v33;
      if (v44 - 32 <= 0x5E)
      {
        v68[0] = 39;
        v68[1] = v44;
        v45 = (_WORD *)*((_QWORD *)v32 + 4);
        if (*((_QWORD *)v32 + 3) - (_QWORD)v45 > 1uLL)
        {
          *v45 = *(_WORD *)v68;
          *((_QWORD *)v32 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v32, v68, 2uLL);
        }
        return sub_1C5928670(v5);
      }
    }
    else
    {
      if (v33 != v4)
      {
        do
        {
          v49 = *v4;
          v50 = (_BYTE *)*((_QWORD *)v32 + 4);
          if ((unint64_t)v50 >= *((_QWORD *)v32 + 3))
          {
            v32 = llvm::raw_ostream::write(v32, 48);
          }
          else
          {
            *((_QWORD *)v32 + 4) = v50 + 1;
            *v50 = 48;
          }
          v51 = (v49 >> 6) | 0x30;
          v52 = (_BYTE *)*((_QWORD *)v32 + 4);
          if ((unint64_t)v52 >= *((_QWORD *)v32 + 3))
          {
            v32 = llvm::raw_ostream::write(v32, v51);
          }
          else
          {
            *((_QWORD *)v32 + 4) = v52 + 1;
            *v52 = v51;
          }
          v53 = (v49 >> 3) & 7 | 0x30;
          v54 = (_BYTE *)*((_QWORD *)v32 + 4);
          if ((unint64_t)v54 >= *((_QWORD *)v32 + 3))
          {
            v32 = llvm::raw_ostream::write(v32, v53);
          }
          else
          {
            *((_QWORD *)v32 + 4) = v54 + 1;
            *v54 = v53;
          }
          v55 = v49 & 7 | 0x30;
          v56 = (char *)*((_QWORD *)v32 + 4);
          if ((unint64_t)v56 >= *((_QWORD *)v32 + 3))
          {
            v32 = llvm::raw_ostream::write(v32, v55);
          }
          else
          {
            *((_QWORD *)v32 + 4) = v56 + 1;
            *v56 = v55;
          }
          v57 = (_BYTE *)*((_QWORD *)v32 + 4);
          if ((unint64_t)v57 >= *((_QWORD *)v32 + 3))
          {
            v32 = llvm::raw_ostream::write(v32, 44);
          }
          else
          {
            *((_QWORD *)v32 + 4) = v57 + 1;
            *v57 = 44;
          }
          ++v4;
          --v6;
        }
        while (v6);
      }
      v44 = *v33;
    }
    v58 = (_BYTE *)*((_QWORD *)v32 + 4);
    if ((unint64_t)v58 >= *((_QWORD *)v32 + 3))
    {
      v32 = llvm::raw_ostream::write(v32, 48);
    }
    else
    {
      *((_QWORD *)v32 + 4) = v58 + 1;
      *v58 = 48;
    }
    v59 = (v44 >> 6) | 0x30;
    v60 = (_BYTE *)*((_QWORD *)v32 + 4);
    if ((unint64_t)v60 >= *((_QWORD *)v32 + 3))
    {
      v32 = llvm::raw_ostream::write(v32, v59);
    }
    else
    {
      *((_QWORD *)v32 + 4) = v60 + 1;
      *v60 = v59;
    }
    v61 = (v44 >> 3) & 7 | 0x30;
    v62 = (_BYTE *)*((_QWORD *)v32 + 4);
    if ((unint64_t)v62 >= *((_QWORD *)v32 + 3))
    {
      v32 = llvm::raw_ostream::write(v32, v61);
    }
    else
    {
      *((_QWORD *)v32 + 4) = v62 + 1;
      *v62 = v61;
    }
    v63 = v44 & 7 | 0x30;
    v64 = (char *)*((_QWORD *)v32 + 4);
    if ((unint64_t)v64 >= *((_QWORD *)v32 + 3))
    {
      llvm::raw_ostream::write(v32, v63);
    }
    else
    {
      *((_QWORD *)v32 + 4) = v64 + 1;
      *v64 = v63;
    }
    return sub_1C5928670(v5);
  }
  v7 = *((_QWORD *)result + 2);
  if (v7)
    return (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, unsigned __int8 *, unint64_t))(*(_QWORD *)v7 + 64))(v7, a2, a3);
LABEL_12:
  v16 = *(const char **)(v8 + 248);
  do
  {
    v17 = *v4;
    v18 = *(llvm::raw_ostream **)(v5 + 280);
    if (v16)
    {
      v19 = strlen(v16);
      v20 = (void *)*((_QWORD *)v18 + 4);
      if (v19 <= *((_QWORD *)v18 + 3) - (_QWORD)v20)
      {
        if (v19)
        {
          memcpy(v20, v16, v19);
          *((_QWORD *)v18 + 4) += v19;
        }
      }
      else
      {
        llvm::raw_ostream::write(v18, v16, v19);
      }
    }
    sub_1C5E21910(v18, v17, 0, 0, 0);
    result = sub_1C5928670(v5);
    ++v4;
    --v3;
  }
  while (v3);
  return result;
}

llvm::raw_ostream *sub_1C5922284(llvm::raw_ostream *result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const void *v9;
  llvm::raw_ostream *v10;
  size_t v11;
  void *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  _WORD *v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;

  v19 = (a3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  if (v19)
  {
    v4 = (uint64_t)result;
    v5 = 0;
    do
    {
      v6 = v5 + 4;
      v7 = a3;
      if (a3 >= v5 + 4)
        v7 = v5 + 4;
      v21 = v7;
      v8 = *(_QWORD *)(v4 + 288);
      v9 = *(const void **)(v8 + 248);
      if (v9)
      {
        v10 = *(llvm::raw_ostream **)(v4 + 280);
        v11 = strlen(*(const char **)(v8 + 248));
        v12 = (void *)*((_QWORD *)v10 + 4);
        if (v11 <= *((_QWORD *)v10 + 3) - (_QWORD)v12)
        {
          if (v11)
          {
            memcpy(v12, v9, v11);
            *((_QWORD *)v10 + 4) += v11;
          }
        }
        else
        {
          llvm::raw_ostream::write(v10, (const char *)v9, v11);
        }
      }
      while (v5 < v21 - 1)
      {
        v13 = *(llvm::raw_ostream **)(v4 + 280);
        v14 = *(unsigned __int8 *)(a2 + v5);
        v22 = &unk_1E8145938;
        v23 = "0x%02x";
        v24 = v14;
        v15 = llvm::raw_ostream::operator<<(v13, (uint64_t)&v22);
        v16 = (_WORD *)*((_QWORD *)v15 + 4);
        if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 1uLL)
        {
          *v16 = 8236;
          *((_QWORD *)v15 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v15, ", ", 2uLL);
        }
        ++v5;
      }
      v17 = *(llvm::raw_ostream **)(v4 + 280);
      v18 = *(unsigned __int8 *)(a2 + v5);
      v22 = &unk_1E8145938;
      v23 = "0x%02x";
      v24 = v18;
      llvm::raw_ostream::operator<<(v17, (uint64_t)&v22);
      result = sub_1C5928670(v4);
      v5 = v6;
    }
    while (v6 < v19);
  }
  return result;
}

void sub_1C5922410(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  const char **v7;
  const char *v8;
  llvm::raw_ostream *v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v6 = a3 - 1;
  switch(a3)
  {
    case 1:
      v7 = (const char **)(a1[36] + 248);
      goto LABEL_6;
    case 2:
      v7 = (const char **)(a1[36] + 256);
      goto LABEL_6;
    case 4:
      v7 = (const char **)(a1[36] + 264);
      goto LABEL_6;
    case 8:
      v7 = (const char **)(a1[36] + 272);
LABEL_6:
      v8 = *v7;
      if (!*v7)
        goto LABEL_11;
      v9 = (llvm::raw_ostream *)a1[35];
      v10 = strlen(*v7);
      v11 = (void *)*((_QWORD *)v9 + 4);
      if (v10 <= *((_QWORD *)v9 + 3) - (_QWORD)v11)
      {
        if (v10)
        {
          memcpy(v11, v8, v10);
          *((_QWORD *)v9 + 4) += v10;
        }
      }
      else
      {
        llvm::raw_ostream::write(v9, v8, v10);
      }
      v12 = a1[2];
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 56))(v12, a2);
      }
      else
      {
        llvm::MCExpr::print(a2);
        sub_1C5928670((uint64_t)a1);
      }
      break;
    default:
LABEL_11:
      v24 = 0;
      llvm::MCExpr::evaluateAsAbsolute(a2, &v24);
      if ((v13 & 1) == 0)
        llvm::report_fatal_error((llvm *)"Don't know how to emit this value.", (const char *)1);
      if (a3)
      {
        v14 = 0;
        v15 = *(unsigned __int8 *)(a1[36] + 16);
        v16 = v24;
        do
        {
          v17 = a3 - v14;
          if (v6 >= a3 - v14)
            v18 = v17;
          else
            v18 = v6;
          v19 = 1 << ~__clz(v18);
          if ((_DWORD)v18)
            v20 = v19;
          else
            v20 = 0;
          v21 = v17 - v20;
          if (v15)
            v21 = v14;
          v22 = (v16 >> (8 * v21)) & (0xFFFFFFFFFFFFFFFFLL >> (-8 * v20));
          v23 = sub_1C484358C(a1[1] + 192, 24, 3);
          *(_BYTE *)v23 = 1;
          *(_DWORD *)(v23 + 1) = *(unsigned __int8 *)(v23 + 4) << 24;
          *(_QWORD *)(v23 + 8) = 0;
          *(_QWORD *)(v23 + 16) = v22;
          (*(void (**)(_QWORD *, unint64_t, uint64_t, _QWORD))(*a1 + 504))(a1, v23, v20, 0);
          v14 += v20;
        }
        while (v14 != a3);
      }
      break;
  }
}

uint64_t sub_1C5922650(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1C484358C(a1[1] + 192, 24, 3);
  *(_BYTE *)v6 = 1;
  *(_DWORD *)(v6 + 1) = *(unsigned __int8 *)(v6 + 4) << 24;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  return (*(uint64_t (**)(_QWORD *, unint64_t, uint64_t, _QWORD))(*a1 + 504))(a1, v6, a3, 0);
}

uint64_t sub_1C59226C0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1C484358C(a1[1] + 192, 24, 3);
  *(_BYTE *)v6 = 1;
  *(_DWORD *)(v6 + 1) = (*(unsigned __int8 *)(v6 + 4) << 24) | 0x100;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  return (*(uint64_t (**)(_QWORD *, unint64_t, uint64_t, _QWORD))(*a1 + 504))(a1, v6, a3, 0);
}

uint64_t sub_1C5922734(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1C484358C(a1[1] + 192, 24, 3);
  *(_BYTE *)v6 = 1;
  *(_DWORD *)(v6 + 1) = a3 & 0xFFFFFF | (*(unsigned __int8 *)(v6 + 4) << 24) | 0x100;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  return (*(uint64_t (**)(_QWORD *, unint64_t, uint64_t, _QWORD))(*a1 + 504))(a1, v6, a3, 0);
}

void sub_1C59227AC(llvm::MCStreamer *a1, uint64_t a2)
{
  int v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  unint64_t v7;

  v7 = 0;
  llvm::MCExpr::evaluateAsAbsolute(a2, &v7);
  if (v4)
  {
    llvm::MCStreamer::emitULEB128IntValue(a1, v7, 0);
  }
  else
  {
    v5 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
    v6 = *((_QWORD *)v5 + 4);
    if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) > 9)
    {
      *(_WORD *)(v6 + 8) = 8248;
      *(_QWORD *)v6 = *(_QWORD *)"\t.uleb128 ";
      *((_QWORD *)v5 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v5, "\t.uleb128 ", 0xAuLL);
    }
    llvm::MCExpr::print(a2);
    sub_1C5928670((uint64_t)a1);
  }
}

void sub_1C5922874(llvm::MCStreamer *a1, uint64_t a2)
{
  int v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  llvm::MCExpr::evaluateAsAbsolute(a2, &v7);
  if (v4)
  {
    llvm::MCStreamer::emitSLEB128IntValue(a1, v7);
  }
  else
  {
    v5 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
    v6 = *((_QWORD *)v5 + 4);
    if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) > 9)
    {
      *(_WORD *)(v6 + 8) = 8248;
      *(_QWORD *)v6 = *(_QWORD *)"\t.sleb128 ";
      *((_QWORD *)v5 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v5, "\t.sleb128 ", 0xAuLL);
    }
    llvm::MCExpr::print(a2);
    sub_1C5928670((uint64_t)a1);
  }
}

llvm::raw_ostream *sub_1C5922938(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  llvm::raw_ostream *v6;
  size_t v7;
  void *v8;

  v4 = *(_QWORD *)(a1 + 288);
  v5 = *(const void **)(v4 + 312);
  if (v5)
  {
    v6 = *(llvm::raw_ostream **)(a1 + 280);
    v7 = strlen(*(const char **)(v4 + 312));
    v8 = (void *)*((_QWORD *)v6 + 4);
    if (v7 <= *((_QWORD *)v6 + 3) - (_QWORD)v8)
    {
      if (v7)
      {
        memcpy(v8, v5, v7);
        *((_QWORD *)v6 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, (const char *)v5, v7);
    }
  }
  llvm::MCExpr::print(a2);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C59229D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  llvm::raw_ostream *v6;
  size_t v7;
  void *v8;

  v4 = *(_QWORD *)(a1 + 288);
  v5 = *(const void **)(v4 + 304);
  if (v5)
  {
    v6 = *(llvm::raw_ostream **)(a1 + 280);
    v7 = strlen(*(const char **)(v4 + 304));
    v8 = (void *)*((_QWORD *)v6 + 4);
    if (v7 <= *((_QWORD *)v6 + 3) - (_QWORD)v8)
    {
      if (v7)
      {
        memcpy(v8, v5, v7);
        *((_QWORD *)v6 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, (const char *)v5, v7);
    }
  }
  llvm::MCExpr::print(a2);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5922A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  llvm::raw_ostream *v6;
  size_t v7;
  void *v8;

  v4 = *(_QWORD *)(a1 + 288);
  v5 = *(const void **)(v4 + 328);
  if (v5)
  {
    v6 = *(llvm::raw_ostream **)(a1 + 280);
    v7 = strlen(*(const char **)(v4 + 328));
    v8 = (void *)*((_QWORD *)v6 + 4);
    if (v7 <= *((_QWORD *)v6 + 3) - (_QWORD)v8)
    {
      if (v7)
      {
        memcpy(v8, v5, v7);
        *((_QWORD *)v6 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, (const char *)v5, v7);
    }
  }
  llvm::MCExpr::print(a2);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5922B18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  llvm::raw_ostream *v6;
  size_t v7;
  void *v8;

  v4 = *(_QWORD *)(a1 + 288);
  v5 = *(const void **)(v4 + 320);
  if (v5)
  {
    v6 = *(llvm::raw_ostream **)(a1 + 280);
    v7 = strlen(*(const char **)(v4 + 320));
    v8 = (void *)*((_QWORD *)v6 + 4);
    if (v7 <= *((_QWORD *)v6 + 3) - (_QWORD)v8)
    {
      if (v7)
      {
        memcpy(v8, v5, v7);
        *((_QWORD *)v6 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, (const char *)v5, v7);
    }
  }
  llvm::MCExpr::print(a2);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5922BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  llvm::raw_ostream *v6;
  size_t v7;
  void *v8;

  v4 = *(_QWORD *)(a1 + 288);
  v5 = *(const void **)(v4 + 288);
  if (v5)
  {
    v6 = *(llvm::raw_ostream **)(a1 + 280);
    v7 = strlen(*(const char **)(v4 + 288));
    v8 = (void *)*((_QWORD *)v6 + 4);
    if (v7 <= *((_QWORD *)v6 + 3) - (_QWORD)v8)
    {
      if (v7)
      {
        memcpy(v8, v5, v7);
        *((_QWORD *)v6 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, (const char *)v5, v7);
    }
  }
  llvm::MCExpr::print(a2);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5922C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  llvm::raw_ostream *v6;
  size_t v7;
  void *v8;

  v4 = *(_QWORD *)(a1 + 288);
  v5 = *(const void **)(v4 + 296);
  if (v5)
  {
    v6 = *(llvm::raw_ostream **)(a1 + 280);
    v7 = strlen(*(const char **)(v4 + 296));
    v8 = (void *)*((_QWORD *)v6 + 4);
    if (v7 <= *((_QWORD *)v6 + 3) - (_QWORD)v8)
    {
      if (v7)
      {
        memcpy(v8, v5, v7);
        *((_QWORD *)v6 + 4) += v7;
      }
    }
    else
    {
      llvm::raw_ostream::write(v6, (const char *)v5, v7);
    }
  }
  llvm::MCExpr::print(a2);
  return sub_1C5928670(a1);
}

void sub_1C5922CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  const void *v15;
  size_t v16;
  void *v17;
  unint64_t v18;
  int v19;
  llvm::raw_ostream *v20;
  size_t v21;
  void *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;

  v27 = 0;
  llvm::MCExpr::evaluateAsAbsolute(a2, &v27);
  v7 = v27;
  if (!v6 || v27)
  {
    v8 = *(_QWORD *)(a1 + 288);
    v9 = *(const char **)(v8 + 192);
    if (v9)
    {
      if (!a3 || *(_BYTE *)(v8 + 200))
      {
        v20 = *(llvm::raw_ostream **)(a1 + 280);
        v21 = strlen(v9);
        v22 = (void *)*((_QWORD *)v20 + 4);
        if (v21 <= *((_QWORD *)v20 + 3) - (_QWORD)v22)
        {
          if (v21)
          {
            memcpy(v22, v9, v21);
            *((_QWORD *)v20 + 4) += v21;
          }
        }
        else
        {
          llvm::raw_ostream::write(v20, v9, v21);
        }
        llvm::MCExpr::print(a2);
        if (a3)
        {
          v23 = *(llvm::raw_ostream **)(a1 + 280);
          v24 = (_BYTE *)*((_QWORD *)v23 + 4);
          if ((unint64_t)v24 >= *((_QWORD *)v23 + 3))
          {
            v23 = llvm::raw_ostream::write(v23, 44);
          }
          else
          {
            *((_QWORD *)v23 + 4) = v24 + 1;
            *v24 = 44;
          }
          v25 = (int)a3;
          if (a3 << 32 < (uint64_t)0xFFFFFFFF00000001)
          {
            v25 = -(uint64_t)(int)a3;
            v26 = 1;
          }
          else
          {
            v26 = 0;
          }
          sub_1C5E21910(v23, v25, 0, 0, v26);
        }
        sub_1C5928670(a1);
      }
      else
      {
        if (!v6)
          llvm::report_fatal_error((llvm *)"Cannot emit non-absolute expression lengths of fill.", (const char *)1);
        if (v27 >= 1)
        {
          v10 = a3 << 32;
          v11 = (int)a3;
          v12 = -(uint64_t)(int)a3;
          do
          {
            v14 = *(llvm::raw_ostream **)(a1 + 280);
            v13 = *(_QWORD *)(a1 + 288);
            v15 = *(const void **)(v13 + 248);
            if (v15)
            {
              v16 = strlen(*(const char **)(v13 + 248));
              v17 = (void *)*((_QWORD *)v14 + 4);
              if (v16 <= *((_QWORD *)v14 + 3) - (_QWORD)v17)
              {
                if (v16)
                {
                  memcpy(v17, v15, v16);
                  *((_QWORD *)v14 + 4) += v16;
                }
              }
              else
              {
                llvm::raw_ostream::write(v14, (const char *)v15, v16);
              }
            }
            if (v10 < (uint64_t)0xFFFFFFFF00000001)
            {
              v18 = v12;
              v19 = 1;
            }
            else
            {
              v18 = v11;
              v19 = 0;
            }
            sub_1C5E21910(v14, v18, 0, 0, v19);
            sub_1C5928670(a1);
            --v7;
          }
          while (v7);
        }
      }
    }
  }
}

llvm::raw_ostream *sub_1C5922F40(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  llvm::raw_ostream *v8;
  _DWORD *v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  llvm::raw_ostream *v12;
  _DWORD *v13;

  v8 = *(llvm::raw_ostream **)(a1 + 280);
  v9 = (_DWORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 6uLL)
  {
    *(_DWORD *)((char *)v9 + 3) = 158100585;
    *v9 = 1768304137;
    *((_QWORD *)v8 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v8, "\t.fill\t", 7uLL);
  }
  llvm::MCExpr::print(a2);
  v10 = *(llvm::raw_ostream **)(a1 + 280);
  v11 = (_WORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 8236;
    *((_QWORD *)v10 + 4) += 2;
  }
  else
  {
    v10 = llvm::raw_ostream::write(v10, ", ", 2uLL);
  }
  v12 = llvm::raw_ostream::operator<<(v10, a3);
  v13 = (_DWORD *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 3uLL)
  {
    *v13 = 2016419884;
    *((_QWORD *)v12 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v12, ", 0x", 4uLL);
  }
  llvm::write_hex(*(llvm::raw_ostream **)(a1 + 280), a4, 1, 0, 0);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5923068(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned int a5, int8x8_t a6)
{
  uint8x8_t v8;
  llvm::raw_ostream *v9;
  _QWORD *v10;
  llvm::raw_ostream *v11;
  unsigned int v12;
  char v13;
  llvm::raw_ostream *v15;
  uint64_t v16;
  const char *v17;
  llvm::raw_ostream *v18;
  uint64_t *v19;
  const char *v20;
  llvm::raw_ostream *v21;
  _DWORD *v22;
  _DWORD *v23;
  size_t v24;
  llvm::raw_ostream *v25;
  _BYTE *v26;
  llvm::raw_ostream *v27;
  _WORD *v28;
  _WORD *v29;
  __int16 v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;

  a6.i32[0] = a2;
  v8 = (uint8x8_t)vcnt_s8(a6);
  v8.i16[0] = vaddlv_u8(v8);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 288) + 187))
  {
    if (v8.i32[0] != 1)
      llvm::report_fatal_error((llvm *)"Only power-of-two alignments are supported with .align.", (const char *)1);
    v9 = *(llvm::raw_ostream **)(a1 + 280);
    v10 = (_QWORD *)*((_QWORD *)v9 + 4);
    if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 7uLL)
    {
      *v10 = 0x96E67696C612E09;
      *((_QWORD *)v9 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v9, "\t.align\t", 8uLL);
    }
    v11 = *(llvm::raw_ostream **)(a1 + 280);
    v12 = 31 - __clz(a2);
    goto LABEL_40;
  }
  v12 = a5;
  v13 = a4;
  if (v8.i32[0] == 1)
  {
    if (a4 == 1)
    {
      v15 = *(llvm::raw_ostream **)(a1 + 280);
      v16 = *((_QWORD *)v15 + 4);
      if ((unint64_t)(*((_QWORD *)v15 + 3) - v16) <= 9)
      {
        v17 = "\t.p2align\t";
        goto LABEL_19;
      }
      v31 = 2414;
      v32 = "\t.p2align\t";
    }
    else if (a4 == 2)
    {
      v15 = *(llvm::raw_ostream **)(a1 + 280);
      v16 = *((_QWORD *)v15 + 4);
      if ((unint64_t)(*((_QWORD *)v15 + 3) - v16) <= 9)
      {
        v17 = ".p2alignw ";
LABEL_19:
        llvm::raw_ostream::write(v15, v17, 0xAuLL);
        goto LABEL_20;
      }
      v31 = 8311;
      v32 = ".p2alignw ";
    }
    else
    {
      v15 = *(llvm::raw_ostream **)(a1 + 280);
      v16 = *((_QWORD *)v15 + 4);
      if ((unint64_t)(*((_QWORD *)v15 + 3) - v16) <= 9)
      {
        v17 = ".p2alignl ";
        goto LABEL_19;
      }
      v31 = 8300;
      v32 = ".p2alignl ";
    }
    *(_WORD *)(v16 + 8) = v31;
    *(_QWORD *)v16 = *(_QWORD *)v32;
    *((_QWORD *)v15 + 4) += 10;
LABEL_20:
    sub_1C5E21910(*(llvm::raw_ostream **)(a1 + 280), 31 - __clz(a2), 0, 0, 0);
    if (!a3 && !v12)
      return sub_1C5928670(a1);
    v21 = *(llvm::raw_ostream **)(a1 + 280);
    v22 = (_DWORD *)*((_QWORD *)v21 + 4);
    if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 3uLL)
    {
      *v22 = 2016419884;
      *((_QWORD *)v21 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v21, ", 0x", 4uLL);
    }
    llvm::write_hex(*(llvm::raw_ostream **)(a1 + 280), (0xFFFFFFFFFFFFFFFFLL >> (-8 * v13)) & a3, 1, 0, 0);
    if (!v12)
      return sub_1C5928670(a1);
LABEL_38:
    v11 = *(llvm::raw_ostream **)(a1 + 280);
    v29 = (_WORD *)*((_QWORD *)v11 + 4);
    if (*((_QWORD *)v11 + 3) - (_QWORD)v29 > 1uLL)
    {
      *v29 = 8236;
      *((_QWORD *)v11 + 4) += 2;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, ", ", 2uLL);
    }
LABEL_40:
    sub_1C5E21910(v11, v12, 0, 0, 0);
    return sub_1C5928670(a1);
  }
  if (a4 == 1)
  {
    v18 = *(llvm::raw_ostream **)(a1 + 280);
    v23 = (_DWORD *)*((_QWORD *)v18 + 4);
    if (*((_QWORD *)v18 + 3) - (_QWORD)v23 <= 6uLL)
    {
      v20 = ".balign";
      v24 = 7;
LABEL_31:
      llvm::raw_ostream::write(v18, v20, v24);
      goto LABEL_32;
    }
    *(_DWORD *)((char *)v23 + 3) = 1852270956;
    *v23 = 1818321454;
    v34 = *((_QWORD *)v18 + 4) + 7;
  }
  else
  {
    if (a4 == 2)
    {
      v18 = *(llvm::raw_ostream **)(a1 + 280);
      v19 = (uint64_t *)*((_QWORD *)v18 + 4);
      if (*((_QWORD *)v18 + 3) - (_QWORD)v19 <= 7uLL)
      {
        v20 = ".balignw";
LABEL_30:
        v24 = 8;
        goto LABEL_31;
      }
      v33 = 0x776E67696C61622ELL;
    }
    else
    {
      v18 = *(llvm::raw_ostream **)(a1 + 280);
      v19 = (uint64_t *)*((_QWORD *)v18 + 4);
      if (*((_QWORD *)v18 + 3) - (_QWORD)v19 <= 7uLL)
      {
        v20 = ".balignl";
        goto LABEL_30;
      }
      v33 = 0x6C6E67696C61622ELL;
    }
    *v19 = v33;
    v34 = *((_QWORD *)v18 + 4) + 8;
  }
  *((_QWORD *)v18 + 4) = v34;
LABEL_32:
  v25 = *(llvm::raw_ostream **)(a1 + 280);
  v26 = (_BYTE *)*((_QWORD *)v25 + 4);
  if ((unint64_t)v26 >= *((_QWORD *)v25 + 3))
  {
    v25 = llvm::raw_ostream::write(v25, 32);
  }
  else
  {
    *((_QWORD *)v25 + 4) = v26 + 1;
    *v26 = 32;
  }
  sub_1C5E21910(v25, a2, 0, 0, 0);
  v27 = *(llvm::raw_ostream **)(a1 + 280);
  v28 = (_WORD *)*((_QWORD *)v27 + 4);
  if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 1uLL)
  {
    *v28 = 8236;
    *((_QWORD *)v27 + 4) += 2;
  }
  else
  {
    v27 = llvm::raw_ostream::write(v27, ", ", 2uLL);
  }
  llvm::raw_ostream::operator<<(v27, (0xFFFFFFFFFFFFFFFFLL >> (-8 * v13)) & a3);
  if (v12)
    goto LABEL_38;
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5923450(uint64_t a1, unsigned int a2, int8x8_t a3, uint64_t a4, unsigned int a5)
{
  return sub_1C5923068(a1, a2, *(unsigned int *)(*(_QWORD *)(a1 + 288) + 340), 1, a5, a3);
}

llvm::raw_ostream *sub_1C5923464(uint64_t a1, uint64_t a2, unsigned int a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _WORD *v9;

  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 4)
  {
    *(_BYTE *)(v7 + 4) = 32;
    *(_DWORD *)v7 = 1735552814;
    *((_QWORD *)v6 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v6, ".org ", 5uLL);
  }
  llvm::MCExpr::print(a2);
  v8 = *(llvm::raw_ostream **)(a1 + 280);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8236;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  sub_1C5E21910(v8, a3, 0, 0, 0);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C592353C(llvm::raw_ostream **a1, _BYTE *a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  _DWORD *v7;

  v6 = a1[35];
  v7 = (_DWORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 6uLL)
  {
    *(_DWORD *)((char *)v7 + 3) = 157641833;
    *v7 = 1768304137;
    *((_QWORD *)v6 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.file\t", 7uLL);
  }
  sub_1C59289DC((llvm::raw_ostream *)a1, a2, a3, a1[35]);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C59235CC(llvm::raw_ostream **a1, _BYTE *a2, uint64_t a3, _BYTE *a4, uint64_t a5, _BYTE *a6, uint64_t a7, uint64_t a8, _BYTE *a9, uint64_t a10)
{
  llvm::raw_ostream *v17;
  _DWORD *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;

  v17 = a1[35];
  v18 = (_DWORD *)*((_QWORD *)v17 + 4);
  if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 6uLL)
  {
    *(_DWORD *)((char *)v18 + 3) = 157641833;
    *v18 = 1768304137;
    *((_QWORD *)v17 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v17, "\t.file\t", 7uLL);
  }
  sub_1C59289DC((llvm::raw_ostream *)a1, a2, a3, a1[35]);
  v19 = a1[35];
  v20 = (_BYTE *)*((_QWORD *)v19 + 4);
  if (*((_BYTE **)v19 + 3) == v20)
  {
    llvm::raw_ostream::write(v19, ",", 1uLL);
    if (!a5)
      goto LABEL_6;
    goto LABEL_5;
  }
  *v20 = 44;
  ++*((_QWORD *)v19 + 4);
  if (a5)
LABEL_5:
    sub_1C59289DC((llvm::raw_ostream *)a1, a4, a5, a1[35]);
LABEL_6:
  if (a7)
  {
    v21 = a1[35];
    v22 = (_BYTE *)*((_QWORD *)v21 + 4);
    if (*((_BYTE **)v21 + 3) == v22)
    {
      llvm::raw_ostream::write(v21, ",", 1uLL);
    }
    else
    {
      *v22 = 44;
      ++*((_QWORD *)v21 + 4);
    }
    sub_1C59289DC((llvm::raw_ostream *)a1, a6, a7, a1[35]);
  }
  if (a10)
  {
    v23 = a1[35];
    v24 = (_BYTE *)*((_QWORD *)v23 + 4);
    if (*((_BYTE **)v23 + 3) == v24)
    {
      llvm::raw_ostream::write(v23, ",", 1uLL);
    }
    else
    {
      *v24 = 44;
      ++*((_QWORD *)v23 + 4);
    }
    sub_1C59289DC((llvm::raw_ostream *)a1, a9, a10, a1[35]);
  }
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C592377C(llvm::raw_ostream **a1, _BYTE *a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  _QWORD *v7;

  v6 = a1[35];
  v7 = (_QWORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 7uLL)
  {
    *v7 = 0x9746E6564692E09;
    *((_QWORD *)v6 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.ident\t", 8uLL);
  }
  sub_1C59289DC((llvm::raw_ostream *)a1, a2, a3, a1[35]);
  return sub_1C5928670((uint64_t)a1);
}

void sub_1C5923808(uint64_t a1@<X0>, unsigned int a2@<W1>, char *a3@<X2>, unint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, __int128 *a8@<X7>, uint64_t a9@<X8>, int a10)
{
  uint64_t v15;
  char *v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  const char *v24[4];
  __int16 v25;
  __int128 v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  __int128 v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  const char **v37;
  _BYTE v38[24];
  _BYTE v39[128];
  uint64_t v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v30 = a3;
  v31 = a4;
  v28 = a5;
  v29 = a6;
  v15 = *(_QWORD *)(a1 + 8);
  LODWORD(v34) = a10;
  *(_QWORD *)v38 = &v34;
  v16 = sub_1C592911C((uint64_t **)(v15 + 1472), (unsigned int *)&v34, (uint64_t)&std::piecewise_construct, (_DWORD **)v38);
  v17 = *((_DWORD *)v16 + 36);
  v34 = *(_OWORD *)a7;
  LOBYTE(v35) = *(_BYTE *)(a7 + 16);
  *(_OWORD *)v38 = *a8;
  *(_QWORD *)&v38[16] = *((_QWORD *)a8 + 2);
  llvm::MCDwarfLineTableHeader::tryGetFile((uint64_t)(v16 + 40), (uint64_t)&v30, (uint64_t)&v28, &v34, (__int128 *)v38, *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 1624), a2, (uint64_t)&v40);
  if ((v41 & 1) != 0)
  {
    v19 = v40;
    *(_BYTE *)(a9 + 8) |= 1u;
    *(_QWORD *)a9 = v19;
  }
  else
  {
    v18 = v40;
    if (v17 != *((_DWORD *)v16 + 36) && *(_BYTE *)(*(_QWORD *)(a1 + 288) + 426))
    {
      *(_QWORD *)v38 = v39;
      *(_OWORD *)&v38[8] = xmmword_1C85F20B0;
      sub_1C613932C((uint64_t)&v34, (uint64_t)v38);
      v32 = *(_OWORD *)a7;
      v33 = *(_BYTE *)(a7 + 16);
      v26 = *a8;
      v20 = (*(unsigned __int8 *)(a1 + 752) >> 2) & 1;
      v27 = *((_QWORD *)a8 + 2);
      sub_1C5928D6C((llvm::raw_ostream *)a1, v18, v30, v31, v28, v29, (unsigned __int8 *)&v32, (uint64_t)&v26, v20, (llvm::raw_ostream *)&v34);
      v21 = *(_QWORD *)(a1 + 16);
      if (v21)
      {
        (*(void (**)(uint64_t, const char *, const char *))(*(_QWORD *)v21 + 40))(v21, *v37, v37[1]);
      }
      else
      {
        v23 = *v37;
        v22 = v37[1];
        v25 = 261;
        v24[0] = v23;
        v24[1] = v22;
        llvm::MCStreamer::emitRawText((llvm::MCStreamer *)a1, v24);
      }
      *(_BYTE *)(a9 + 8) &= ~1u;
      *(_DWORD *)a9 = v18;
      *(_QWORD *)&v34 = off_1E81A6E70;
      if (v36 == 1 && v35)
        MEMORY[0x1CAA32F9C](v35, 0x1000C8077774924);
      if (*(_BYTE **)v38 != v39)
        free(*(void **)v38);
    }
    else
    {
      *(_BYTE *)(a9 + 8) &= ~1u;
      *(_DWORD *)a9 = v18;
    }
  }
}

void sub_1C5923A70(uint64_t a1, void *a2, size_t a3, _BYTE *a4, size_t a5, uint64_t a6, __int128 *a7, int a8)
{
  uint64_t v8;
  char *v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  const char *v20[4];
  __int16 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  const char **v31;
  _BYTE v32[24];
  _BYTE v33[136];
  __int128 v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 8);
  if (*(unsigned __int16 *)(v8 + 1624) >= 5u)
  {
    v34 = *(_OWORD *)a6;
    v35 = *(_BYTE *)(a6 + 16);
    v24 = *a7;
    v25 = *((_QWORD *)a7 + 2);
    LODWORD(v28) = a8;
    *(_QWORD *)v32 = &v28;
    v16 = sub_1C592911C((uint64_t **)(v8 + 1472), (unsigned int *)&v28, (uint64_t)&std::piecewise_construct, (_DWORD **)v32);
    v28 = v34;
    LOBYTE(v29) = v35;
    *(_OWORD *)v32 = v24;
    *(_QWORD *)&v32[16] = v25;
    sub_1C59292C4((uint64_t)(v16 + 40), a2, a3, a4, a5, &v28, (__n128 *)v32);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 288) + 426))
    {
      *(_QWORD *)v32 = v33;
      *(_OWORD *)&v32[8] = xmmword_1C85F20B0;
      sub_1C613932C((uint64_t)&v28, (uint64_t)v32);
      v26 = *(_OWORD *)a6;
      v27 = *(_BYTE *)(a6 + 16);
      v22 = *a7;
      v23 = *((_QWORD *)a7 + 2);
      sub_1C5928D6C((llvm::raw_ostream *)a1, 0, (char *)a2, a3, a4, a5, (unsigned __int8 *)&v26, (uint64_t)&v22, (*(_BYTE *)(a1 + 752) & 4) != 0, (llvm::raw_ostream *)&v28);
      v17 = *(_QWORD *)(a1 + 16);
      if (v17)
      {
        (*(void (**)(uint64_t, const char *, const char *))(*(_QWORD *)v17 + 40))(v17, *v31, v31[1]);
      }
      else
      {
        v19 = *v31;
        v18 = v31[1];
        v21 = 261;
        v20[0] = v19;
        v20[1] = v18;
        llvm::MCStreamer::emitRawText((llvm::MCStreamer *)a1, v20);
      }
      *(_QWORD *)&v28 = off_1E81A6E70;
      if (v30 == 1 && v29)
        MEMORY[0x1CAA32F9C](v29, 0x1000C8077774924);
      if (*(_BYTE **)v32 != v33)
        free(*(void **)v32);
    }
  }
}

llvm::raw_ostream *sub_1C5923CA8(llvm::MCStreamer *a1)
{
  uint64_t CurrentDwarfFrameInfo;
  llvm::raw_ostream *v3;
  uint64_t v4;

  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(a1);
  if (CurrentDwarfFrameInfo)
    *(_BYTE *)(CurrentDwarfFrameInfo + 80) = 1;
  v3 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v4 = *((_QWORD *)v3 + 4);
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v4) > 0x10)
  {
    *(_BYTE *)(v4 + 16) = 101;
    *(_OWORD *)v4 = *(_OWORD *)"\t.cfi_b_key_frame";
    *((_QWORD *)v3 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.cfi_b_key_frame", 0x11uLL);
  }
  return sub_1C5928670((uint64_t)a1);
}

void sub_1C5923D24(uint64_t a1, unsigned int a2, llvm::MCSection *a3, unsigned int a4, char a5, unsigned int a6, unsigned int a7, uint64_t a8, const void *a9, size_t a10)
{
  unsigned int v14;
  llvm::raw_ostream *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  llvm::MCStreamer *v22;
  llvm::raw_ostream *v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  void *v26;
  llvm::raw_ostream *v27;
  void *v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  char *v32;
  char *v33;
  const char *v34;
  llvm::raw_ostream *v35;
  uint64_t v36;
  llvm::raw_ostream *v37;
  void *v38;
  uint64_t v39;
  llvm::raw_ostream *v40;
  const void *v41;
  size_t v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  char v47;

  v14 = a3;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 288) + 426))
  {
    v21 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v21)
      v22 = *(llvm::MCStreamer **)(*(_QWORD *)(a1 + 112) + 32 * v21 - 32);
    else
      v22 = 0;
    llvm::MCDwarfLineEntry::make((llvm::MCDwarfLineEntry *)a1, v22, a3);
    goto LABEL_62;
  }
  v17 = *(llvm::raw_ostream **)(a1 + 280);
  v18 = *((_QWORD *)v17 + 4);
  if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) > 5)
  {
    *(_WORD *)(v18 + 4) = 2403;
    *(_DWORD *)v18 = 1869360649;
    *((_QWORD *)v17 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.loc\t", 6uLL);
  }
  sub_1C5E21910(v17, a2, 0, 0, 0);
  v19 = (_BYTE *)*((_QWORD *)v17 + 4);
  if (*((_BYTE **)v17 + 3) == v19)
  {
    llvm::raw_ostream::write(v17, " ", 1uLL);
  }
  else
  {
    *v19 = 32;
    ++*((_QWORD *)v17 + 4);
  }
  sub_1C5E21910(v17, v14, 0, 0, 0);
  v20 = (_BYTE *)*((_QWORD *)v17 + 4);
  if (*((_BYTE **)v17 + 3) == v20)
  {
    llvm::raw_ostream::write(v17, " ", 1uLL);
  }
  else
  {
    *v20 = 32;
    ++*((_QWORD *)v17 + 4);
  }
  sub_1C5E21910(v17, a4, 0, 0, 0);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 288) + 431))
  {
    if ((a5 & 2) == 0)
    {
      if ((a5 & 4) == 0)
        goto LABEL_11;
LABEL_17:
      v25 = *(llvm::raw_ostream **)(a1 + 280);
      v26 = (void *)*((_QWORD *)v25 + 4);
      if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 0xCuLL)
      {
        qmemcpy(v26, " prologue_end", 13);
        *((_QWORD *)v25 + 4) += 13;
        if ((a5 & 8) == 0)
          goto LABEL_21;
      }
      else
      {
        llvm::raw_ostream::write(v25, " prologue_end", 0xDuLL);
        if ((a5 & 8) == 0)
          goto LABEL_21;
      }
LABEL_19:
      v27 = *(llvm::raw_ostream **)(a1 + 280);
      v28 = (void *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 0xEuLL)
      {
        qmemcpy(v28, " epilogue_begin", 15);
        *((_QWORD *)v27 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v27, " epilogue_begin", 0xFuLL);
      }
LABEL_21:
      if ((a5 & 1) != (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 1506) & 1))
      {
        v29 = *(llvm::raw_ostream **)(a1 + 280);
        v30 = *((_QWORD *)v29 + 4);
        if ((unint64_t)(*((_QWORD *)v29 + 3) - v30) > 8)
        {
          *(_BYTE *)(v30 + 8) = 32;
          *(_QWORD *)v30 = *(_QWORD *)" is_stmt ";
          *((_QWORD *)v29 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v29, " is_stmt ", 9uLL);
        }
        v31 = *(llvm::raw_ostream **)(a1 + 280);
        v33 = (char *)*((_QWORD *)v31 + 3);
        v32 = (char *)*((_QWORD *)v31 + 4);
        if ((a5 & 1) != 0)
        {
          if (v33 != v32)
          {
            v47 = 49;
LABEL_74:
            *v32 = v47;
            ++*((_QWORD *)v31 + 4);
            if (!a6)
              goto LABEL_38;
            goto LABEL_35;
          }
          v34 = "1";
        }
        else
        {
          if (v33 != v32)
          {
            v47 = 48;
            goto LABEL_74;
          }
          v34 = "0";
        }
        llvm::raw_ostream::write(v31, v34, 1uLL);
      }
      if (!a6)
        goto LABEL_38;
LABEL_35:
      v35 = *(llvm::raw_ostream **)(a1 + 280);
      v36 = *((_QWORD *)v35 + 4);
      if ((unint64_t)(*((_QWORD *)v35 + 3) - v36) > 4)
      {
        *(_BYTE *)(v36 + 4) = 32;
        *(_DWORD *)v36 = 1634953504;
        *((_QWORD *)v35 + 4) += 5;
      }
      else
      {
        v35 = llvm::raw_ostream::write(v35, " isa ", 5uLL);
      }
      sub_1C5E21910(v35, a6, 0, 0, 0);
LABEL_38:
      if (a7)
      {
        v37 = *(llvm::raw_ostream **)(a1 + 280);
        v38 = (void *)*((_QWORD *)v37 + 4);
        if (*((_QWORD *)v37 + 3) - (_QWORD)v38 > 0xEuLL)
        {
          qmemcpy(v38, " discriminator ", 15);
          *((_QWORD *)v37 + 4) += 15;
        }
        else
        {
          v37 = llvm::raw_ostream::write(v37, " discriminator ", 0xFuLL);
        }
        sub_1C5E21910(v37, a7, 0, 0, 0);
      }
      goto LABEL_42;
    }
    v23 = *(llvm::raw_ostream **)(a1 + 280);
    v24 = *((_QWORD *)v23 + 4);
    if ((unint64_t)(*((_QWORD *)v23 + 3) - v24) > 0xB)
    {
      *(_DWORD *)(v24 + 8) = 1801678700;
      *(_QWORD *)v24 = *(_QWORD *)" basic_block";
      *((_QWORD *)v23 + 4) += 12;
      if ((a5 & 4) != 0)
        goto LABEL_17;
    }
    else
    {
      llvm::raw_ostream::write(v23, " basic_block", 0xCuLL);
      if ((a5 & 4) != 0)
        goto LABEL_17;
    }
LABEL_11:
    if ((a5 & 8) == 0)
      goto LABEL_21;
    goto LABEL_19;
  }
LABEL_42:
  if ((*(_BYTE *)(a1 + 752) & 1) != 0)
  {
    llvm::formatted_raw_ostream::PadToColumn(*(llvm::formatted_raw_ostream **)(a1 + 280), 40);
    v40 = *(llvm::raw_ostream **)(a1 + 280);
    v39 = *(_QWORD *)(a1 + 288);
    v41 = *(const void **)(v39 + 48);
    v42 = *(_QWORD *)(v39 + 56);
    v43 = (_BYTE *)*((_QWORD *)v40 + 4);
    if (v42 <= *((_QWORD *)v40 + 3) - (_QWORD)v43)
    {
      if (v42)
      {
        memcpy(v43, v41, v42);
        v43 = (_BYTE *)(*((_QWORD *)v40 + 4) + v42);
        *((_QWORD *)v40 + 4) = v43;
      }
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), (const char *)v41, v42);
      v43 = (_BYTE *)*((_QWORD *)v40 + 4);
    }
    if ((unint64_t)v43 >= *((_QWORD *)v40 + 3))
    {
      llvm::raw_ostream::write(v40, 32);
    }
    else
    {
      *((_QWORD *)v40 + 4) = v43 + 1;
      *v43 = 32;
    }
    v44 = (_BYTE *)*((_QWORD *)v40 + 4);
    if (a10 <= *((_QWORD *)v40 + 3) - (_QWORD)v44)
    {
      if (a10)
      {
        memcpy(v44, a9, a10);
        v44 = (_BYTE *)(*((_QWORD *)v40 + 4) + a10);
        *((_QWORD *)v40 + 4) = v44;
      }
    }
    else
    {
      llvm::raw_ostream::write(v40, (const char *)a9, a10);
      v44 = (_BYTE *)*((_QWORD *)v40 + 4);
    }
    if ((unint64_t)v44 >= *((_QWORD *)v40 + 3))
    {
      llvm::raw_ostream::write(v40, 58);
    }
    else
    {
      *((_QWORD *)v40 + 4) = v44 + 1;
      *v44 = 58;
    }
    sub_1C5E21910(v40, v14, 0, 0, 0);
    v45 = (_BYTE *)*((_QWORD *)v40 + 4);
    if ((unint64_t)v45 >= *((_QWORD *)v40 + 3))
    {
      llvm::raw_ostream::write(v40, 58);
    }
    else
    {
      *((_QWORD *)v40 + 4) = v45 + 1;
      *v45 = 58;
    }
    sub_1C5E21910(v40, a4, 0, 0, 0);
  }
  sub_1C5928670(a1);
LABEL_62:
  v46 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v46 + 1496) = a2;
  *(_DWORD *)(v46 + 1500) = v14;
  *(_WORD *)(v46 + 1504) = a4;
  *(_BYTE *)(v46 + 1506) = a5;
  *(_BYTE *)(v46 + 1507) = a6;
  *(_DWORD *)(v46 + 1508) = a7;
  *(_BYTE *)(v46 + 1512) = 1;
}

BOOL sub_1C5924300(llvm::MCContext **a1, unsigned int a2, unsigned __int8 *a3, size_t a4, unsigned __int8 *a5, uint64_t a6, unsigned int a7)
{
  uint64_t v14;
  _BOOL8 v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  _BYTE *v18;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  std::string *p_p;
  uint64_t size;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  std::string __p;

  llvm::MCContext::getCVContext(a1[1]);
  v15 = llvm::CodeViewContext::addFile(v14, (uint64_t)a1, a2, a3, a4, (uint64_t)a5, a6, a7);
  if (v15)
  {
    v16 = a1[35];
    v17 = *((_QWORD *)v16 + 4);
    if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 9)
    {
      *(_WORD *)(v17 + 8) = 2405;
      *(_QWORD *)v17 = *(_QWORD *)"\t.cv_file\t";
      *((_QWORD *)v16 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(a1[35], "\t.cv_file\t", 0xAuLL);
    }
    sub_1C5E21910(v16, a2, 0, 0, 0);
    v18 = (_BYTE *)*((_QWORD *)v16 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)v16 + 3))
    {
      llvm::raw_ostream::write(v16, 32);
    }
    else
    {
      *((_QWORD *)v16 + 4) = v18 + 1;
      *v18 = 32;
    }
    sub_1C59289DC((llvm::raw_ostream *)a1, a3, a4, a1[35]);
    if (a7)
    {
      v20 = a1[35];
      v21 = (_BYTE *)*((_QWORD *)v20 + 4);
      if ((unint64_t)v21 >= *((_QWORD *)v20 + 3))
      {
        llvm::raw_ostream::write(v20, 32);
      }
      else
      {
        *((_QWORD *)v20 + 4) = v21 + 1;
        *v21 = 32;
      }
      sub_1C62B2138(a5, a6, 0, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __p.__r_.__value_.__l.__size_;
      sub_1C59289DC((llvm::raw_ostream *)a1, p_p, size, a1[35]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v24 = a1[35];
      v25 = (_BYTE *)*((_QWORD *)v24 + 4);
      if ((unint64_t)v25 >= *((_QWORD *)v24 + 3))
      {
        v24 = llvm::raw_ostream::write(v24, 32);
      }
      else
      {
        *((_QWORD *)v24 + 4) = v25 + 1;
        *v25 = 32;
      }
      sub_1C5E21910(v24, a7, 0, 0, 0);
    }
    sub_1C5928670((uint64_t)a1);
  }
  return v15;
}

BOOL sub_1C5924504(uint64_t a1, unsigned int a2)
{
  llvm::raw_ostream *v4;
  void *v5;
  _BYTE *v6;
  llvm::CodeViewContext *v7;

  v4 = *(llvm::raw_ostream **)(a1 + 280);
  v5 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0xCuLL)
  {
    qmemcpy(v5, "\t.cv_func_id ", 13);
    *((_QWORD *)v4 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.cv_func_id ", 0xDuLL);
  }
  sub_1C5E21910(v4, a2, 0, 0, 0);
  v6 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 10);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v6 + 1;
    *v6 = 10;
  }
  llvm::MCContext::getCVContext(*(llvm::MCContext **)(a1 + 8));
  return llvm::CodeViewContext::recordFunctionId(v7, a2);
}

BOOL sub_1C59245CC(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  llvm::raw_ostream *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;

  v14 = *(llvm::raw_ostream **)(a1 + 280);
  v15 = *((_QWORD *)v14 + 4);
  if ((unint64_t)(*((_QWORD *)v14 + 3) - v15) > 0x13)
  {
    *(_DWORD *)(v15 + 16) = 543451487;
    *(_OWORD *)v15 = *(_OWORD *)"\t.cv_inline_site_id ";
    *((_QWORD *)v14 + 4) += 20;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.cv_inline_site_id ", 0x14uLL);
  }
  sub_1C5E21910(v14, a2, 0, 0, 0);
  v16 = (_QWORD *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v16 > 7uLL)
  {
    *v16 = 0x206E696874697720;
    *((_QWORD *)v14 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v14, " within ", 8uLL);
  }
  sub_1C5E21910(v14, a3, 0, 0, 0);
  v17 = *((_QWORD *)v14 + 4);
  if ((unint64_t)(*((_QWORD *)v14 + 3) - v17) > 0xB)
  {
    *(_DWORD *)(v17 + 8) = 544498015;
    *(_QWORD *)v17 = *(_QWORD *)" inlined_at ";
    *((_QWORD *)v14 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v14, " inlined_at ", 0xCuLL);
  }
  sub_1C5E21910(v14, a4, 0, 0, 0);
  v18 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v18 + 1;
    *v18 = 32;
  }
  sub_1C5E21910(v14, a5, 0, 0, 0);
  v19 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v19 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 32);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v19 + 1;
    *v19 = 32;
  }
  sub_1C5E21910(v14, a6, 0, 0, 0);
  v20 = (_BYTE *)*((_QWORD *)v14 + 4);
  if ((unint64_t)v20 >= *((_QWORD *)v14 + 3))
  {
    llvm::raw_ostream::write(v14, 10);
  }
  else
  {
    *((_QWORD *)v14 + 4) = v20 + 1;
    *v20 = 10;
  }
  return llvm::MCStreamer::EmitCVInlineSiteIdDirective(a1, a2, a3, a4, a5, a6, a7);
}

llvm::raw_ostream *sub_1C592481C(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, int a7, uint64_t a8, const void *a9, size_t a10, uint64_t a11)
{
  unsigned int v15;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  void *v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::raw_ostream *v29;
  const void *v30;
  size_t v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;

  v15 = a3;
  result = (llvm::raw_ostream *)llvm::MCStreamer::checkCVLocSection(a1, a2, a3, a11);
  if (!(_DWORD)result)
    return result;
  v19 = *(llvm::raw_ostream **)(a1 + 280);
  v20 = *((_QWORD *)v19 + 4);
  if ((unint64_t)(*((_QWORD *)v19 + 3) - v20) > 8)
  {
    *(_BYTE *)(v20 + 8) = 9;
    *(_QWORD *)v20 = *(_QWORD *)"\t.cv_loc\t";
    *((_QWORD *)v19 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.cv_loc\t", 9uLL);
  }
  sub_1C5E21910(v19, a2, 0, 0, 0);
  v21 = (_BYTE *)*((_QWORD *)v19 + 4);
  if (*((_BYTE **)v19 + 3) == v21)
  {
    llvm::raw_ostream::write(v19, " ", 1uLL);
  }
  else
  {
    *v21 = 32;
    ++*((_QWORD *)v19 + 4);
  }
  sub_1C5E21910(v19, v15, 0, 0, 0);
  v22 = (_BYTE *)*((_QWORD *)v19 + 4);
  if (*((_BYTE **)v19 + 3) == v22)
  {
    llvm::raw_ostream::write(v19, " ", 1uLL);
  }
  else
  {
    *v22 = 32;
    ++*((_QWORD *)v19 + 4);
  }
  sub_1C5E21910(v19, a4, 0, 0, 0);
  v23 = (_BYTE *)*((_QWORD *)v19 + 4);
  if (*((_BYTE **)v19 + 3) == v23)
  {
    llvm::raw_ostream::write(v19, " ", 1uLL);
  }
  else
  {
    *v23 = 32;
    ++*((_QWORD *)v19 + 4);
  }
  sub_1C5E21910(v19, a5, 0, 0, 0);
  if (!a6)
  {
LABEL_13:
    if (a7)
      goto LABEL_14;
    goto LABEL_16;
  }
  v24 = *(llvm::raw_ostream **)(a1 + 280);
  v25 = (void *)*((_QWORD *)v24 + 4);
  if (*((_QWORD *)v24 + 3) - (_QWORD)v25 <= 0xCuLL)
  {
    llvm::raw_ostream::write(v24, " prologue_end", 0xDuLL);
    goto LABEL_13;
  }
  qmemcpy(v25, " prologue_end", 13);
  *((_QWORD *)v24 + 4) += 13;
  if (a7)
  {
LABEL_14:
    v26 = *(llvm::raw_ostream **)(a1 + 280);
    v27 = *((_QWORD *)v26 + 4);
    if ((unint64_t)(*((_QWORD *)v26 + 3) - v27) > 9)
    {
      *(_WORD *)(v27 + 8) = 12576;
      *(_QWORD *)v27 = *(_QWORD *)" is_stmt 1";
      *((_QWORD *)v26 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v26, " is_stmt 1", 0xAuLL);
    }
  }
LABEL_16:
  if ((*(_BYTE *)(a1 + 752) & 1) != 0)
  {
    llvm::formatted_raw_ostream::PadToColumn(*(llvm::formatted_raw_ostream **)(a1 + 280), 40);
    v29 = *(llvm::raw_ostream **)(a1 + 280);
    v28 = *(_QWORD *)(a1 + 288);
    v30 = *(const void **)(v28 + 48);
    v31 = *(_QWORD *)(v28 + 56);
    v32 = (_BYTE *)*((_QWORD *)v29 + 4);
    if (v31 <= *((_QWORD *)v29 + 3) - (_QWORD)v32)
    {
      if (v31)
      {
        memcpy(v32, v30, v31);
        v32 = (_BYTE *)(*((_QWORD *)v29 + 4) + v31);
        *((_QWORD *)v29 + 4) = v32;
      }
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), (const char *)v30, v31);
      v32 = (_BYTE *)*((_QWORD *)v29 + 4);
    }
    if ((unint64_t)v32 >= *((_QWORD *)v29 + 3))
    {
      llvm::raw_ostream::write(v29, 32);
    }
    else
    {
      *((_QWORD *)v29 + 4) = v32 + 1;
      *v32 = 32;
    }
    v33 = (_BYTE *)*((_QWORD *)v29 + 4);
    if (a10 <= *((_QWORD *)v29 + 3) - (_QWORD)v33)
    {
      if (a10)
      {
        memcpy(v33, a9, a10);
        v33 = (_BYTE *)(*((_QWORD *)v29 + 4) + a10);
        *((_QWORD *)v29 + 4) = v33;
      }
    }
    else
    {
      llvm::raw_ostream::write(v29, (const char *)a9, a10);
      v33 = (_BYTE *)*((_QWORD *)v29 + 4);
    }
    if ((unint64_t)v33 >= *((_QWORD *)v29 + 3))
    {
      llvm::raw_ostream::write(v29, 58);
    }
    else
    {
      *((_QWORD *)v29 + 4) = v33 + 1;
      *v33 = 58;
    }
    sub_1C5E21910(v29, a4, 0, 0, 0);
    v34 = (_BYTE *)*((_QWORD *)v29 + 4);
    if ((unint64_t)v34 >= *((_QWORD *)v29 + 3))
    {
      llvm::raw_ostream::write(v29, 58);
    }
    else
    {
      *((_QWORD *)v29 + 4) = v34 + 1;
      *v34 = 58;
    }
    sub_1C5E21910(v29, a5, 0, 0, 0);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5924BF4(uint64_t a1, unsigned int a2, llvm::MCSymbol *a3, llvm::MCSymbol *a4)
{
  llvm::raw_ostream *v8;
  void *v9;
  _WORD *v10;
  llvm::raw_ostream *v11;
  _WORD *v12;

  v8 = *(llvm::raw_ostream **)(a1 + 280);
  v9 = (void *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 0xEuLL)
  {
    qmemcpy(v9, "\t.cv_linetable\t", 15);
    *((_QWORD *)v8 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.cv_linetable\t", 0xFuLL);
  }
  sub_1C5E21910(v8, a2, 0, 0, 0);
  v10 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 8236;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  llvm::MCSymbol::print(a3, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v11 = *(llvm::raw_ostream **)(a1 + 280);
  v12 = (_WORD *)*((_QWORD *)v11 + 4);
  if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 1uLL)
  {
    *v12 = 8236;
    *((_QWORD *)v11 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v11, ", ", 2uLL);
  }
  llvm::MCSymbol::print(a4, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5924D28(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, llvm::MCSymbol *a5, llvm::MCSymbol *a6)
{
  llvm::raw_ostream *v12;
  void *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;

  v12 = *(llvm::raw_ostream **)(a1 + 280);
  v13 = (void *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 0x15uLL)
  {
    qmemcpy(v13, "\t.cv_inline_linetable\t", 22);
    *((_QWORD *)v12 + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.cv_inline_linetable\t", 0x16uLL);
  }
  sub_1C5E21910(v12, a2, 0, 0, 0);
  v14 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v14 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v14 + 1;
    *v14 = 32;
  }
  sub_1C5E21910(v12, a3, 0, 0, 0);
  v15 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v15 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v15 + 1;
    *v15 = 32;
  }
  sub_1C5E21910(v12, a4, 0, 0, 0);
  v16 = (_BYTE *)*((_QWORD *)v12 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)v12 + 3))
  {
    llvm::raw_ostream::write(v12, 32);
  }
  else
  {
    *((_QWORD *)v12 + 4) = v16 + 1;
    *v16 = 32;
  }
  llvm::MCSymbol::print(a5, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v17 = *(llvm::raw_ostream **)(a1 + 280);
  v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  if ((unint64_t)v18 >= *((_QWORD *)v17 + 3))
  {
    llvm::raw_ostream::write(v17, 32);
  }
  else
  {
    *((_QWORD *)v17 + 4) = v18 + 1;
    *v18 = 32;
  }
  llvm::MCSymbol::print(a6, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5924ED4(uint64_t a1, llvm::MCSymbol **a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  _WORD *v10;
  unint64_t v11;
  llvm::raw_ostream *v12;
  int v13;

  sub_1C5929488(a1, a2, a3);
  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 0xA)
  {
    *(_DWORD *)(v7 + 7) = 539782245;
    *(_QWORD *)v7 = *(_QWORD *)", reg_rel, ";
    *((_QWORD *)v6 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(v6, ", reg_rel, ", 0xBuLL);
  }
  v8 = *(llvm::raw_ostream **)(a1 + 280);
  sub_1C5E21910(v8, (unsigned __int16)a4, 0, 0, 0);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8236;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  sub_1C5E21910(v8, WORD1(a4), 0, 0, 0);
  v10 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 8236;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  v11 = a4 >> 32;
  if (a4 < 0)
  {
    v11 = -(uint64_t)v11;
    v12 = v8;
    v13 = 1;
  }
  else
  {
    v12 = v8;
    v13 = 0;
  }
  sub_1C5E21910(v12, v11, 0, 0, v13);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5925034(uint64_t a1, llvm::MCSymbol **a2, uint64_t a3, unint64_t a4)
{
  llvm::raw_ostream *v6;
  _OWORD *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;

  sub_1C5929488(a1, a2, a3);
  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = (_OWORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0xFuLL)
  {
    *v7 = *(_OWORD *)", subfield_reg, ";
    *((_QWORD *)v6 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v6, ", subfield_reg, ", 0x10uLL);
  }
  v8 = *(llvm::raw_ostream **)(a1 + 280);
  sub_1C5E21910(v8, (unsigned __int16)a4, 0, 0, 0);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8236;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  sub_1C5E21910(v8, HIDWORD(a4), 0, 0, 0);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5925118(uint64_t a1, llvm::MCSymbol **a2, uint64_t a3, unsigned __int16 a4)
{
  llvm::raw_ostream *v6;
  _DWORD *v7;

  sub_1C5929488(a1, a2, a3);
  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = (_DWORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 6uLL)
  {
    *(_DWORD *)((char *)v7 + 3) = 539780965;
    *v7 = 1701978156;
    *((_QWORD *)v6 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(v6, ", reg, ", 7uLL);
  }
  sub_1C5E21910(*(llvm::raw_ostream **)(a1 + 280), a4, 0, 0, 0);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C59251A4(uint64_t a1, llvm::MCSymbol **a2, uint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;

  sub_1C5929488(a1, a2, a3);
  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 0x10)
  {
    *(_BYTE *)(v7 + 16) = 32;
    *(_OWORD *)v7 = *(_OWORD *)", frame_ptr_rel, ";
    *((_QWORD *)v6 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v6, ", frame_ptr_rel, ", 0x11uLL);
  }
  v8 = (int)a4;
  if (a4 << 32 < (uint64_t)0xFFFFFFFF00000001)
  {
    v8 = -(uint64_t)(int)a4;
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  sub_1C5E21910(*(llvm::raw_ostream **)(a1 + 280), v8, 0, 0, v9);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5925250(uint64_t a1)
{
  llvm::raw_ostream *v2;
  _OWORD *v3;

  v2 = *(llvm::raw_ostream **)(a1 + 280);
  v3 = (_OWORD *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 0xFuLL)
  {
    *v3 = *(_OWORD *)"\t.cv_stringtable";
    *((_QWORD *)v2 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.cv_stringtable", 0x10uLL);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C59252B4(uint64_t a1)
{
  llvm::raw_ostream *v2;
  uint64_t v3;

  v2 = *(llvm::raw_ostream **)(a1 + 280);
  v3 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v3) > 0x11)
  {
    *(_WORD *)(v3 + 16) = 29549;
    *(_OWORD *)v3 = *(_OWORD *)"\t.cv_filechecksums";
    *((_QWORD *)v2 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.cv_filechecksums", 0x12uLL);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5925320(uint64_t a1, unsigned int a2)
{
  llvm::raw_ostream *v4;
  void *v5;

  v4 = *(llvm::raw_ostream **)(a1 + 280);
  v5 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0x17uLL)
  {
    qmemcpy(v5, "\t.cv_filechecksumoffset\t", 24);
    *((_QWORD *)v4 + 4) += 24;
  }
  else
  {
    v4 = llvm::raw_ostream::write(v4, "\t.cv_filechecksumoffset\t", 0x18uLL);
  }
  sub_1C5E21910(v4, a2, 0, 0, 0);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C59253A4(uint64_t a1, llvm::MCSymbol *a2)
{
  llvm::raw_ostream *v4;
  void *v5;

  v4 = *(llvm::raw_ostream **)(a1 + 280);
  v5 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0xDuLL)
  {
    qmemcpy(v5, "\t.cv_fpo_data\t", 14);
    *((_QWORD *)v4 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.cv_fpo_data\t", 0xEuLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  return sub_1C5928670(a1);
}

unint64_t sub_1C5925420(llvm::MCStreamer *a1)
{
  return llvm::MCStreamer::getDwarfLineTableSymbol(a1, 0);
}

llvm::raw_ostream *sub_1C5925428(uint64_t a1, int a2, int a3)
{
  llvm::raw_ostream *v6;
  void *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  void *v11;
  const char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0xEuLL)
  {
    qmemcpy(v7, "\t.cfi_sections ", 15);
    *((_QWORD *)v6 + 4) += 15;
    if (a2)
      goto LABEL_3;
LABEL_8:
    if (a3)
    {
      v10 = *(llvm::raw_ostream **)(a1 + 280);
      v14 = *((_QWORD *)v10 + 4);
      if ((unint64_t)(*((_QWORD *)v10 + 3) - v14) <= 0xB)
      {
        v12 = ".debug_frame";
        v13 = 12;
        goto LABEL_11;
      }
      *(_DWORD *)(v14 + 8) = 1701667186;
      *(_QWORD *)v14 = *(_QWORD *)".debug_frame";
      v16 = *((_QWORD *)v10 + 4) + 12;
LABEL_17:
      *((_QWORD *)v10 + 4) = v16;
      return sub_1C5928670(a1);
    }
    return sub_1C5928670(a1);
  }
  llvm::raw_ostream::write(v6, "\t.cfi_sections ", 0xFuLL);
  if (!a2)
    goto LABEL_8;
LABEL_3:
  v8 = *(llvm::raw_ostream **)(a1 + 280);
  v9 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 8)
  {
    *(_BYTE *)(v9 + 8) = 101;
    *(_QWORD *)v9 = *(_QWORD *)".eh_frame";
    *((_QWORD *)v8 + 4) += 9;
    if (!a3)
      return sub_1C5928670(a1);
    goto LABEL_5;
  }
  llvm::raw_ostream::write(v8, ".eh_frame", 9uLL);
  if (a3)
  {
LABEL_5:
    v10 = *(llvm::raw_ostream **)(a1 + 280);
    v11 = (void *)*((_QWORD *)v10 + 4);
    if (*((_QWORD *)v10 + 3) - (_QWORD)v11 <= 0xDuLL)
    {
      v12 = ", .debug_frame";
      v13 = 14;
LABEL_11:
      llvm::raw_ostream::write(v10, v12, v13);
      return sub_1C5928670(a1);
    }
    qmemcpy(v11, ", .debug_frame", 14);
    v16 = *((_QWORD *)v10 + 4) + 14;
    goto LABEL_17;
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5925598(llvm::MCStreamer *a1, unint64_t a2, unint64_t a3)
{
  llvm::raw_ostream *v6;
  void *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;

  llvm::MCStreamer::emitCFIDefCfa(a1, a2, a3);
  v6 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v7 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0xDuLL)
  {
    qmemcpy(v7, "\t.cfi_def_cfa ", 14);
    *((_QWORD *)v6 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.cfi_def_cfa ", 0xEuLL);
  }
  sub_1C5929590((uint64_t)a1, a2);
  v8 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8236;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  llvm::raw_ostream::operator<<(v8, a3);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5925668(llvm::MCStreamer *a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  void *v5;

  llvm::MCStreamer::emitCFIDefCfaOffset(a1, a2);
  v4 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v5 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0x14uLL)
  {
    qmemcpy(v5, "\t.cfi_def_cfa_offset ", 21);
    *((_QWORD *)v4 + 4) += 21;
  }
  else
  {
    v4 = llvm::raw_ostream::write(v4, "\t.cfi_def_cfa_offset ", 0x15uLL);
  }
  llvm::raw_ostream::operator<<(v4, a2);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C59256E4(llvm::MCStreamer *a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  void *v5;

  llvm::MCStreamer::emitCFIDefCfaRegister(a1, a2);
  v4 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v5 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0x16uLL)
  {
    qmemcpy(v5, "\t.cfi_def_cfa_register ", 23);
    *((_QWORD *)v4 + 4) += 23;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.cfi_def_cfa_register ", 0x17uLL);
  }
  sub_1C5929590((uint64_t)a1, a2);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5925764(llvm::MCStreamer *a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  llvm::raw_ostream *v8;
  void *v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  llvm::raw_ostream *v12;
  _WORD *v13;

  llvm::MCStreamer::emitCFILLVMDefAspaceCfa(a1, a2, a3, a4);
  v8 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v9 = (void *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 0x19uLL)
  {
    qmemcpy(v9, "\t.cfi_llvm_def_aspace_cfa ", 26);
    *((_QWORD *)v8 + 4) += 26;
  }
  else
  {
    llvm::raw_ostream::write(v8, "\t.cfi_llvm_def_aspace_cfa ", 0x1AuLL);
  }
  sub_1C5929590((uint64_t)a1, a2);
  v10 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v11 = (_WORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 8236;
    *((_QWORD *)v10 + 4) += 2;
  }
  else
  {
    v10 = llvm::raw_ostream::write(v10, ", ", 2uLL);
  }
  llvm::raw_ostream::operator<<(v10, a3);
  v12 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v13 = (_WORD *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 1uLL)
  {
    *v13 = 8236;
    *((_QWORD *)v12 + 4) += 2;
  }
  else
  {
    v12 = llvm::raw_ostream::write(v12, ", ", 2uLL);
  }
  llvm::raw_ostream::operator<<(v12, a4);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C592587C(llvm::MCStreamer *a1, unint64_t a2, unint64_t a3)
{
  llvm::raw_ostream *v6;
  void *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;

  llvm::MCStreamer::emitCFIOffset(a1, a2, a3);
  v6 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v7 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0xCuLL)
  {
    qmemcpy(v7, "\t.cfi_offset ", 13);
    *((_QWORD *)v6 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.cfi_offset ", 0xDuLL);
  }
  sub_1C5929590((uint64_t)a1, a2);
  v8 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8236;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  llvm::raw_ostream::operator<<(v8, a3);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C592594C(llvm::raw_ostream **a1, llvm::MCSymbol *a2, unsigned int a3)
{
  uint64_t CurrentDwarfFrameInfo;
  llvm::raw_ostream *v7;
  uint64_t v8;
  _WORD *v9;

  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo((llvm::MCStreamer *)a1);
  if (CurrentDwarfFrameInfo)
  {
    *(_QWORD *)(CurrentDwarfFrameInfo + 16) = a2;
    *(_DWORD *)(CurrentDwarfFrameInfo + 60) = a3;
  }
  v7 = a1[35];
  v8 = *((_QWORD *)v7 + 4);
  if ((unint64_t)(*((_QWORD *)v7 + 3) - v8) > 0x11)
  {
    *(_WORD *)(v8 + 16) = 8313;
    *(_OWORD *)v8 = *(_OWORD *)"\t.cfi_personality ";
    *((_QWORD *)v7 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(a1[35], "\t.cfi_personality ", 0x12uLL);
  }
  sub_1C5E21910(v7, a3, 0, 0, 0);
  v9 = (_WORD *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8236;
    *((_QWORD *)v7 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v7, ", ", 2uLL);
  }
  llvm::MCSymbol::print(a2, a1[35], a1[36]);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5925A3C(llvm::raw_ostream **a1, llvm::MCSymbol *a2, unsigned int a3)
{
  uint64_t CurrentDwarfFrameInfo;
  llvm::raw_ostream *v7;
  uint64_t v8;
  _WORD *v9;

  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo((llvm::MCStreamer *)a1);
  if (CurrentDwarfFrameInfo)
  {
    *(_QWORD *)(CurrentDwarfFrameInfo + 24) = a2;
    *(_DWORD *)(CurrentDwarfFrameInfo + 64) = a3;
  }
  v7 = a1[35];
  v8 = *((_QWORD *)v7 + 4);
  if ((unint64_t)(*((_QWORD *)v7 + 3) - v8) > 0xA)
  {
    *(_DWORD *)(v8 + 7) = 543253619;
    *(_QWORD *)v8 = *(_QWORD *)"\t.cfi_lsda ";
    *((_QWORD *)v7 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a1[35], "\t.cfi_lsda ", 0xBuLL);
  }
  sub_1C5E21910(v7, a3, 0, 0, 0);
  v9 = (_WORD *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8236;
    *((_QWORD *)v7 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v7, ", ", 2uLL);
  }
  llvm::MCSymbol::print(a2, a1[35], a1[36]);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5925B30(llvm::MCStreamer *a1)
{
  llvm::raw_ostream *v2;
  uint64_t v3;

  llvm::MCStreamer::emitCFIRememberState(a1);
  v2 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v3 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v3) > 0x13)
  {
    *(_DWORD *)(v3 + 16) = 1702125940;
    *(_OWORD *)v3 = *(_OWORD *)"\t.cfi_remember_state";
    *((_QWORD *)v2 + 4) += 20;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.cfi_remember_state", 0x14uLL);
  }
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5925BA4(llvm::MCStreamer *a1)
{
  llvm::raw_ostream *v2;
  uint64_t v3;

  llvm::MCStreamer::emitCFIRestoreState(a1);
  v2 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v3 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v3) > 0x12)
  {
    *(_DWORD *)(v3 + 15) = 1702125940;
    *(_OWORD *)v3 = *(_OWORD *)"\t.cfi_restore_state";
    *((_QWORD *)v2 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.cfi_restore_state", 0x13uLL);
  }
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5925C18(llvm::MCStreamer *a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;

  llvm::MCStreamer::emitCFISameValue(a1, a2);
  v4 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 0x10)
  {
    *(_BYTE *)(v5 + 16) = 32;
    *(_OWORD *)v5 = *(_OWORD *)"\t.cfi_same_value ";
    *((_QWORD *)v4 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.cfi_same_value ", 0x11uLL);
  }
  sub_1C5929590((uint64_t)a1, a2);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5925C98(llvm::MCStreamer *a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  void *v5;

  llvm::MCStreamer::emitCFIRestore(a1, a2);
  v4 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v5 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0xDuLL)
  {
    qmemcpy(v5, "\t.cfi_restore ", 14);
    *((_QWORD *)v4 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.cfi_restore ", 0xEuLL);
  }
  sub_1C5929590((uint64_t)a1, a2);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5925D18(llvm::MCStreamer *a1, unint64_t a2, unint64_t a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _WORD *v9;

  llvm::MCStreamer::emitCFIRelOffset(a1, a2, a3);
  v6 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v7 = *((_QWORD *)v6 + 4);
  if ((unint64_t)(*((_QWORD *)v6 + 3) - v7) > 0x10)
  {
    *(_BYTE *)(v7 + 16) = 32;
    *(_OWORD *)v7 = *(_OWORD *)"\t.cfi_rel_offset ";
    *((_QWORD *)v6 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.cfi_rel_offset ", 0x11uLL);
  }
  sub_1C5929590((uint64_t)a1, a2);
  v8 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8236;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  llvm::raw_ostream::operator<<(v8, a3);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5925DE8(llvm::MCStreamer *a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  void *v5;

  llvm::MCStreamer::emitCFIAdjustCfaOffset(a1, a2);
  v4 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v5 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0x17uLL)
  {
    qmemcpy(v5, "\t.cfi_adjust_cfa_offset ", 24);
    *((_QWORD *)v4 + 4) += 24;
  }
  else
  {
    v4 = llvm::raw_ostream::write(v4, "\t.cfi_adjust_cfa_offset ", 0x18uLL);
  }
  llvm::raw_ostream::operator<<(v4, a2);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5925E64(llvm::raw_ostream **a1, void *a2, size_t a3)
{
  llvm::MCStreamer::emitCFIEscape((llvm::MCStreamer *)a1, a2, a3);
  sub_1C5929600(a1[35], (unsigned __int8 *)a2, a3);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5925EA8(llvm::MCStreamer *a1, unint64_t a2)
{
  uint64_t CurrentDwarfFrameInfo;
  llvm::raw_ostream *v5;
  uint64_t v6;

  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(a1);
  if (CurrentDwarfFrameInfo)
    *(_DWORD *)(CurrentDwarfFrameInfo + 76) = a2;
  v5 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v6 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) > 0x13)
  {
    *(_DWORD *)(v6 + 16) = 544107893;
    *(_OWORD *)v6 = *(_OWORD *)"\t.cfi_return_column ";
    *((_QWORD *)v5 + 4) += 20;
  }
  else
  {
    llvm::raw_ostream::write(v5, "\t.cfi_return_column ", 0x14uLL);
  }
  sub_1C5929590((uint64_t)a1, a2);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5925F34(llvm::raw_ostream **a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  BOOL v5;
  __int128 v7;
  uint64_t v8;

  v2 = a2;
  v8 = *MEMORY[0x1E0C80C00];
  llvm::MCStreamer::emitCFIGnuArgsSize((llvm::MCStreamer *)a1, a2);
  v7 = xmmword_1C8662F30;
  v4 = 1;
  do
  {
    v5 = v2 > 0x7F;
    *((_BYTE *)&v7 + v4++) = v2 & 0x7F | ((v2 > 0x7F) << 7);
    v2 >>= 7;
  }
  while (v5);
  sub_1C5929600(a1[35], (unsigned __int8 *)&v7, v4);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5925FDC(llvm::MCStreamer *a1)
{
  uint64_t CurrentDwarfFrameInfo;
  llvm::raw_ostream *v3;
  uint64_t v4;

  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(a1);
  if (CurrentDwarfFrameInfo)
    *(_BYTE *)(CurrentDwarfFrameInfo + 72) = 1;
  v3 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v4 = *((_QWORD *)v3 + 4);
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v4) > 0x11)
  {
    *(_WORD *)(v4 + 16) = 25965;
    *(_OWORD *)v4 = *(_OWORD *)"\t.cfi_signal_frame";
    *((_QWORD *)v3 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.cfi_signal_frame", 0x12uLL);
  }
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5926058(llvm::MCStreamer *a1, unint64_t a2)
{
  llvm::raw_ostream *v4;
  _OWORD *v5;

  llvm::MCStreamer::emitCFIUndefined(a1, a2);
  v4 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v5 = (_OWORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0xFuLL)
  {
    *v5 = *(_OWORD *)"\t.cfi_undefined ";
    *((_QWORD *)v4 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.cfi_undefined ", 0x10uLL);
  }
  sub_1C5929590((uint64_t)a1, a2);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C59260D0(llvm::MCStreamer *a1, unint64_t a2, unint64_t a3)
{
  llvm::raw_ostream *v6;
  void *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;

  llvm::MCStreamer::emitCFIRegister(a1, a2, a3);
  v6 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v7 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0xEuLL)
  {
    qmemcpy(v7, "\t.cfi_register ", 15);
    *((_QWORD *)v6 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v6, "\t.cfi_register ", 0xFuLL);
  }
  sub_1C5929590((uint64_t)a1, a2);
  v8 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8236;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v8, ", ", 2uLL);
  }
  sub_1C5929590((uint64_t)a1, a3);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C59261A4(llvm::MCStreamer *a1)
{
  llvm::raw_ostream *v2;
  uint64_t v3;

  llvm::MCStreamer::emitCFIWindowSave(a1);
  v2 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v3 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v3) > 0x10)
  {
    *(_BYTE *)(v3 + 16) = 101;
    *(_OWORD *)v3 = *(_OWORD *)"\t.cfi_window_save";
    *((_QWORD *)v2 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.cfi_window_save", 0x11uLL);
  }
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5926214(llvm::MCStreamer *a1)
{
  llvm::raw_ostream *v2;
  void *v3;

  llvm::MCStreamer::emitCFINegateRAState(a1);
  v2 = (llvm::raw_ostream *)*((_QWORD *)a1 + 35);
  v3 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 0x14uLL)
  {
    qmemcpy(v3, "\t.cfi_negate_ra_state", 21);
    *((_QWORD *)v2 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.cfi_negate_ra_state", 0x15uLL);
  }
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5926284(uint64_t a1, llvm::MCSymbol *a2, uint64_t a3)
{
  llvm::raw_ostream *v5;
  uint64_t v6;

  llvm::MCStreamer::EmitWinCFIStartProc(a1, (uint64_t)a2, a3);
  v5 = *(llvm::raw_ostream **)(a1 + 280);
  v6 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) > 9)
  {
    *(_WORD *)(v6 + 8) = 8291;
    *(_QWORD *)v6 = *(_QWORD *)".seh_proc ";
    *((_QWORD *)v5 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v5, ".seh_proc ", 0xAuLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5926304(_QWORD *a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  void *v4;

  llvm::MCStreamer::EmitWinCFIEndProc(a1, a2);
  v3 = (llvm::raw_ostream *)a1[35];
  v4 = (void *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v4 > 0xCuLL)
  {
    qmemcpy(v4, "\t.seh_endproc", 13);
    *((_QWORD *)v3 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.seh_endproc", 0xDuLL);
  }
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5926374(_QWORD *a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  _OWORD *v4;

  llvm::MCStreamer::EmitWinCFIFuncletOrFuncEnd(a1, a2);
  v3 = (llvm::raw_ostream *)a1[35];
  v4 = (_OWORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v4 > 0xFuLL)
  {
    *v4 = *(_OWORD *)"\t.seh_endfunclet";
    *((_QWORD *)v3 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.seh_endfunclet", 0x10uLL);
  }
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C59263DC(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  uint64_t v4;

  llvm::MCStreamer::EmitWinCFIStartChained(a1, a2);
  v3 = *(llvm::raw_ostream **)(a1 + 280);
  v4 = *((_QWORD *)v3 + 4);
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v4) > 0x11)
  {
    *(_WORD *)(v4 + 16) = 25701;
    *(_OWORD *)v4 = *(_OWORD *)"\t.seh_startchained";
    *((_QWORD *)v3 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.seh_startchained", 0x12uLL);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C592644C(_QWORD *a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  _OWORD *v4;

  llvm::MCStreamer::EmitWinCFIEndChained(a1, a2);
  v3 = (llvm::raw_ostream *)a1[35];
  v4 = (_OWORD *)*((_QWORD *)v3 + 4);
  if (*((_QWORD *)v3 + 3) - (_QWORD)v4 > 0xFuLL)
  {
    *v4 = *(_OWORD *)"\t.seh_endchained";
    *((_QWORD *)v3 + 4) += 16;
  }
  else
  {
    llvm::raw_ostream::write(v3, "\t.seh_endchained", 0x10uLL);
  }
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C59264B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::raw_ostream *v5;
  void *v6;

  llvm::MCStreamer::EmitWinCFIPushReg((_QWORD *)a1, a2, a3);
  v5 = *(llvm::raw_ostream **)(a1 + 280);
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 0xDuLL)
  {
    qmemcpy(v6, "\t.seh_pushreg ", 14);
    *((_QWORD *)v5 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v5, "\t.seh_pushreg ", 0xEuLL);
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 296) + 40))(*(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 280), a2);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5926544(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  llvm::raw_ostream *v7;
  void *v8;
  llvm::raw_ostream *v9;
  _WORD *v10;

  llvm::MCStreamer::EmitWinCFISetFrame((_QWORD *)a1, a2, a3, a4);
  v7 = *(llvm::raw_ostream **)(a1 + 280);
  v8 = (void *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 0xEuLL)
  {
    qmemcpy(v8, "\t.seh_setframe ", 15);
    *((_QWORD *)v7 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v7, "\t.seh_setframe ", 0xFuLL);
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 296) + 40))(*(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 280), a2);
  v9 = *(llvm::raw_ostream **)(a1 + 280);
  v10 = (_WORD *)*((_QWORD *)v9 + 4);
  if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 8236;
    *((_QWORD *)v9 + 4) += 2;
  }
  else
  {
    v9 = llvm::raw_ostream::write(v9, ", ", 2uLL);
  }
  sub_1C5E21910(v9, a3, 0, 0, 0);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5926630(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  llvm::raw_ostream *v5;
  uint64_t v6;

  llvm::MCStreamer::EmitWinCFIAllocStack(a1, a2, a3);
  v5 = (llvm::raw_ostream *)a1[35];
  v6 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) > 0x10)
  {
    *(_BYTE *)(v6 + 16) = 32;
    *(_OWORD *)v6 = *(_OWORD *)"\t.seh_stackalloc ";
    *((_QWORD *)v5 + 4) += 17;
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, "\t.seh_stackalloc ", 0x11uLL);
  }
  sub_1C5E21910(v5, a2, 0, 0, 0);
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C59266B8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  llvm::raw_ostream *v7;
  void *v8;
  llvm::raw_ostream *v9;
  _WORD *v10;

  llvm::MCStreamer::EmitWinCFISaveReg((_QWORD *)a1, a2, a3, a4);
  v7 = *(llvm::raw_ostream **)(a1 + 280);
  v8 = (void *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 0xDuLL)
  {
    qmemcpy(v8, "\t.seh_savereg ", 14);
    *((_QWORD *)v7 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v7, "\t.seh_savereg ", 0xEuLL);
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 296) + 40))(*(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 280), a2);
  v9 = *(llvm::raw_ostream **)(a1 + 280);
  v10 = (_WORD *)*((_QWORD *)v9 + 4);
  if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 8236;
    *((_QWORD *)v9 + 4) += 2;
  }
  else
  {
    v9 = llvm::raw_ostream::write(v9, ", ", 2uLL);
  }
  sub_1C5E21910(v9, a3, 0, 0, 0);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C59267A4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  llvm::raw_ostream *v7;
  void *v8;
  llvm::raw_ostream *v9;
  _WORD *v10;

  llvm::MCStreamer::EmitWinCFISaveXMM((_QWORD *)a1, a2, a3, a4);
  v7 = *(llvm::raw_ostream **)(a1 + 280);
  v8 = (void *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 0xDuLL)
  {
    qmemcpy(v8, "\t.seh_savexmm ", 14);
    *((_QWORD *)v7 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v7, "\t.seh_savexmm ", 0xEuLL);
  }
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 296) + 40))(*(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 280), a2);
  v9 = *(llvm::raw_ostream **)(a1 + 280);
  v10 = (_WORD *)*((_QWORD *)v9 + 4);
  if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 1uLL)
  {
    *v10 = 8236;
    *((_QWORD *)v9 + 4) += 2;
  }
  else
  {
    v9 = llvm::raw_ostream::write(v9, ", ", 2uLL);
  }
  sub_1C5E21910(v9, a3, 0, 0, 0);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5926890(_QWORD *a1, int a2, uint64_t a3)
{
  llvm::raw_ostream *v5;
  void *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;

  llvm::MCStreamer::EmitWinCFIPushFrame(a1, a2, a3);
  v5 = (llvm::raw_ostream *)a1[35];
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 0xEuLL)
  {
    qmemcpy(v6, "\t.seh_pushframe", 15);
    *((_QWORD *)v5 + 4) += 15;
    if (!a2)
      return sub_1C5928670((uint64_t)a1);
  }
  else
  {
    llvm::raw_ostream::write(v5, "\t.seh_pushframe", 0xFuLL);
    if (!a2)
      return sub_1C5928670((uint64_t)a1);
  }
  v7 = (llvm::raw_ostream *)a1[35];
  v8 = *((_QWORD *)v7 + 4);
  if ((unint64_t)(*((_QWORD *)v7 + 3) - v8) > 5)
  {
    *(_WORD *)(v8 + 4) = 25956;
    *(_DWORD *)v8 = 1868775456;
    *((_QWORD *)v7 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v7, " @code", 6uLL);
  }
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C5926954(_QWORD *a1, uint64_t a2)
{
  uint64_t valid;
  llvm::raw_ostream *v4;
  uint64_t v5;

  valid = llvm::MCStreamer::EnsureValidWinFrameInfo((uint64_t)a1, a2);
  if (valid)
    *(_QWORD *)(valid + 40) = (*(uint64_t (**)(_QWORD *))(*a1 + 80))(a1);
  v4 = (llvm::raw_ostream *)a1[35];
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 0x10)
  {
    *(_BYTE *)(v5 + 16) = 101;
    *(_OWORD *)v5 = *(_OWORD *)"\t.seh_endprologue";
    *((_QWORD *)v4 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.seh_endprologue", 0x11uLL);
  }
  return sub_1C5928670((uint64_t)a1);
}

llvm::raw_ostream *sub_1C59269E0(uint64_t a1, llvm::MCSymbol *a2, int a3, int a4, uint64_t a5)
{
  llvm::raw_ostream *v9;
  void *v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  uint64_t v14;

  llvm::MCStreamer::EmitWinEHHandler(a1, (uint64_t)a2, a3, a4, a5);
  v9 = *(llvm::raw_ostream **)(a1 + 280);
  v10 = (void *)*((_QWORD *)v9 + 4);
  if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 0xDuLL)
  {
    qmemcpy(v10, "\t.seh_handler ", 14);
    *((_QWORD *)v9 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v9, "\t.seh_handler ", 0xEuLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  if (!a3)
  {
LABEL_6:
    if (!a4)
      return sub_1C5928670(a1);
    goto LABEL_7;
  }
  v11 = *(llvm::raw_ostream **)(a1 + 280);
  v12 = *((_QWORD *)v11 + 4);
  if ((unint64_t)(*((_QWORD *)v11 + 3) - v12) <= 8)
  {
    llvm::raw_ostream::write(v11, ", @unwind", 9uLL);
    goto LABEL_6;
  }
  *(_BYTE *)(v12 + 8) = 100;
  *(_QWORD *)v12 = *(_QWORD *)", @unwind";
  *((_QWORD *)v11 + 4) += 9;
  if (!a4)
    return sub_1C5928670(a1);
LABEL_7:
  v13 = *(llvm::raw_ostream **)(a1 + 280);
  v14 = *((_QWORD *)v13 + 4);
  if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 8)
  {
    *(_BYTE *)(v14 + 8) = 116;
    *(_QWORD *)v14 = *(_QWORD *)", @except";
    *((_QWORD *)v13 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v13, ", @except", 9uLL);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5926B14(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  llvm::MCSectionCOFF *v7;
  uint64_t v8;
  llvm::MCSectionCOFF *v9;
  uint64_t v10;
  llvm::raw_ostream *v12;
  uint64_t v13;

  result = (llvm::raw_ostream *)llvm::MCStreamer::EmitWinEHHandlerData(a1, a2);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
    if (!v6 && (*(_DWORD *)(v5 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v5 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v5 + 24));
      *(_QWORD *)v5 = *(_QWORD *)v5 & 7 | v6;
    }
    v7 = sub_1C5953AB8(*(llvm::MCContext **)(a1 + 8), (_DWORD *)(a1 + 264), *(llvm::MCSectionCOFF **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 168) + 680), *(_QWORD *)(v6 + 16));
    v8 = *(_QWORD *)(a1 + 112) + 32 * *(unsigned int *)(a1 + 120);
    v9 = *(llvm::MCSectionCOFF **)(v8 - 32);
    v10 = *(_QWORD *)(v8 - 24);
    *(_QWORD *)(v8 - 16) = v9;
    *(_QWORD *)(v8 - 8) = v10;
    if (v9 != v7 || v10 != 0)
    {
      *(_QWORD *)(v8 - 32) = v7;
      *(_QWORD *)(v8 - 24) = 0;
    }
    v12 = *(llvm::raw_ostream **)(a1 + 280);
    v13 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 0x10)
    {
      *(_BYTE *)(v13 + 16) = 97;
      *(_OWORD *)v13 = *(_OWORD *)"\t.seh_handlerdata";
      *((_QWORD *)v12 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v12, "\t.seh_handlerdata", 0x11uLL);
    }
    return sub_1C5928670(a1);
  }
  return result;
}

llvm::raw_ostream *sub_1C5926C18(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  llvm::raw_ostream *v8;
  void *v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  llvm::raw_ostream *v12;
  _WORD *v13;

  v8 = *(llvm::raw_ostream **)(a1 + 280);
  v9 = (void *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 0xCuLL)
  {
    qmemcpy(v9, "\t.cg_profile ", 13);
    *((_QWORD *)v8 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v8, "\t.cg_profile ", 0xDuLL);
  }
  llvm::MCSymbol::print(*(llvm::MCSymbol **)(a2 + 16), *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v10 = *(llvm::raw_ostream **)(a1 + 280);
  v11 = (_WORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 8236;
    *((_QWORD *)v10 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v10, ", ", 2uLL);
  }
  llvm::MCSymbol::print(*(llvm::MCSymbol **)(a3 + 16), *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  v12 = *(llvm::raw_ostream **)(a1 + 280);
  v13 = (_WORD *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 1uLL)
  {
    *v13 = 8236;
    *((_QWORD *)v12 + 4) += 2;
  }
  else
  {
    v12 = llvm::raw_ostream::write(v12, ", ", 2uLL);
  }
  sub_1C5E21910(v12, a4, 0, 0, 0);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5926D3C(llvm::raw_ostream *result)
{
  uint64_t v1;
  llvm::raw_ostream *v2;
  void *v3;

  if (*(_DWORD *)(*((_QWORD *)result + 36) + 176) == 1)
  {
    v1 = (uint64_t)result;
    v2 = (llvm::raw_ostream *)*((_QWORD *)result + 35);
    v3 = (void *)*((_QWORD *)v2 + 4);
    if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 0x16uLL)
    {
      qmemcpy(v3, "\t.intel_syntax noprefix", 23);
      *((_QWORD *)v2 + 4) += 23;
    }
    else
    {
      llvm::raw_ostream::write(v2, "\t.intel_syntax noprefix", 0x17uLL);
    }
    return sub_1C5928670(v1);
  }
  return result;
}

llvm::raw_ostream *sub_1C5926DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  llvm::raw_ostream *v12;
  _QWORD *v13;
  llvm::raw_ostream *v14;
  _WORD *v15;
  void *v16;
  llvm::raw_ostream *v17;
  _WORD *v18;
  llvm::raw_ostream *result;

  v12 = *(llvm::raw_ostream **)(a1 + 280);
  v13 = (_QWORD *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 7uLL)
  {
    *v13 = 0x20636F6C65722E09;
    *((_QWORD *)v12 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v12, "\t.reloc ", 8uLL);
  }
  llvm::MCExpr::print(a2);
  v14 = *(llvm::raw_ostream **)(a1 + 280);
  v15 = (_WORD *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 1uLL)
  {
    *v15 = 8236;
    v16 = (void *)(*((_QWORD *)v14 + 4) + 2);
    *((_QWORD *)v14 + 4) = v16;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), ", ", 2uLL);
    v16 = (void *)*((_QWORD *)v14 + 4);
  }
  if (a4 <= *((_QWORD *)v14 + 3) - (_QWORD)v16)
  {
    if (a4)
    {
      memcpy(v16, a3, a4);
      *((_QWORD *)v14 + 4) += a4;
    }
  }
  else
  {
    llvm::raw_ostream::write(v14, (const char *)a3, a4);
  }
  if (a5)
  {
    v17 = *(llvm::raw_ostream **)(a1 + 280);
    v18 = (_WORD *)*((_QWORD *)v17 + 4);
    if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 1uLL)
    {
      *v18 = 8236;
      *((_QWORD *)v17 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v17, ", ", 2uLL);
    }
    llvm::MCExpr::print(a5);
  }
  result = sub_1C5928670(a1);
  *a6 = 0;
  a6[32] = 0;
  return result;
}

llvm::raw_ostream *sub_1C5926F40(uint64_t a1)
{
  llvm::raw_ostream *v2;
  uint64_t v3;

  v2 = *(llvm::raw_ostream **)(a1 + 280);
  v3 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v3) > 8)
  {
    *(_BYTE *)(v3 + 8) = 103;
    *(_QWORD *)v3 = *(_QWORD *)"\t.addrsig";
    *((_QWORD *)v2 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.addrsig", 9uLL);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5926FAC(uint64_t a1, llvm::MCSymbol *a2)
{
  llvm::raw_ostream *v4;
  void *v5;

  v4 = *(llvm::raw_ostream **)(a1 + 280);
  v5 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0xDuLL)
  {
    qmemcpy(v5, "\t.addrsig_sym ", 14);
    *((_QWORD *)v4 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.addrsig_sym ", 0xEuLL);
  }
  llvm::MCSymbol::print(a2, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5927028(uint64_t a1, unsigned int *a2, llvm::MCSection *a3)
{
  llvm::MCSection *v3;
  uint64_t v6;
  llvm::MCStreamer *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  uint64_t j;
  uint64_t v27;
  _WORD *v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  char v33;
  char *v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  llvm::raw_ostream *v40;
  char v41;
  _WORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  const char **v47;
  _QWORD *v48;
  char *v49;
  char v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _BYTE *v55;
  const char *v56;
  size_t v57;
  size_t v58;
  llvm *v59;
  uint64_t v60;
  uint64_t v61;
  llvm *v62;
  uint64_t v63;
  uint64_t *v64;
  _BYTE *v65;
  uint64_t *v67;
  llvm *v68;
  uint64_t *v69;
  _BYTE *v70;
  unsigned int *v71;
  llvm::MCSection *v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  _QWORD v76[2];
  uint64_t v77;
  int v78;
  void *v79;
  __int128 v80;
  _BYTE v81[64];
  void *v82;
  uint64_t v83;
  _BYTE v84[96];
  void *v85;
  __int128 v86;
  _QWORD v87[34];

  v3 = a3;
  v87[32] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 288) + 426))
  {
    v6 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v6)
      v7 = *(llvm::MCStreamer **)(*(_QWORD *)(a1 + 112) + 32 * v6 - 32);
    else
      v7 = 0;
    llvm::MCDwarfLineEntry::make((llvm::MCDwarfLineEntry *)a1, v7, a3);
  }
  if ((*(_BYTE *)(a1 + 752) & 1) != 0)
    v8 = (uint64_t *)(a1 + 616);
  else
    v8 = llvm::nulls((llvm *)a1);
  v85 = v87;
  v86 = xmmword_1C64638F0;
  v82 = v84;
  v83 = 0x400000000;
  sub_1C613932C((uint64_t)v76, (uint64_t)&v85);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + 16);
  if (v9)
  {
    (*(void (**)(uint64_t, unsigned int *, _QWORD *, void **, llvm::MCSection *))(*(_QWORD *)v9 + 32))(v9, a2, v76, &v82, v3);
    v79 = v81;
    v80 = xmmword_1C64638C0;
    v10 = v86;
    v11 = 8 * v86;
    if (8 * (_QWORD)v86)
    {
      if (v11 >= 0x41)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v79, v81, 8 * v86, 1);
        v12 = v80;
      }
      else
      {
        v12 = 0;
      }
      if (v11 != v12)
        bzero((char *)v79 + v12, v11 - v12);
      *(_QWORD *)&v80 = v11;
      v10 = v86;
    }
    v13 = (8 * v10);
    if ((_DWORD)v13)
    {
      for (i = 0; i != v13; ++i)
        *((_BYTE *)v79 + i) = 0;
    }
    v15 = v83;
    if ((_DWORD)v83)
    {
      v16 = 0;
      do
      {
        v17 = v82;
        v18 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 304) + 8) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 8), *((unsigned int *)v82 + 6 * v16 + 3));
        if (*(_DWORD *)(v18 + 12))
        {
          v19 = 0;
          do
          {
            *((_BYTE *)v79 + (v19 + *(_DWORD *)(v18 + 8) + 8 * v17[6 * v16 + 2])) = v16 + 1;
            ++v19;
          }
          while (v19 != *(_DWORD *)(v18 + 12));
        }
        ++v16;
      }
      while (v16 != v15);
    }
    v20 = v8[4];
    v71 = a2;
    v72 = v3;
    if ((unint64_t)(v8[3] - v20) > 0xA)
    {
      *(_DWORD *)(v20 + 7) = 1528838759;
      *(_QWORD *)v20 = *(_QWORD *)"encoding: [";
      v8[4] += 11;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v8, "encoding: [", 0xBuLL);
    }
    v21 = v86;
    if ((_DWORD)v86)
    {
      v22 = 0;
      v23 = 0;
      do
      {
        if (v23)
        {
          v24 = (_BYTE *)v8[4];
          if ((unint64_t)v24 >= v8[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v8, 44);
          }
          else
          {
            v8[4] = (uint64_t)(v24 + 1);
            *v24 = 44;
          }
        }
        v25 = *((unsigned __int8 *)v79 + (8 * v23));
        for (j = 1; j != 8; ++j)
        {
          if (*((unsigned __int8 *)v79 + v22 + j) != v25)
            goto LABEL_39;
        }
        if (v25 == 255)
        {
LABEL_39:
          v28 = (_WORD *)v8[4];
          if ((unint64_t)(v8[3] - (_QWORD)v28) > 1)
          {
            *v28 = 25136;
            v8[4] += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v8, "0b", 2uLL);
          }
          v29 = 7;
          v30 = v22;
          do
          {
            if (*(_BYTE *)(*(_QWORD *)(a1 + 288) + 16))
              v31 = v22 + v29;
            else
              v31 = v30;
            v32 = *((unsigned __int8 *)v79 + v31);
            if (v32)
            {
              v33 = v32 + 64;
              v34 = (char *)v8[4];
              if ((unint64_t)v34 >= v8[3])
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)v8, v33);
              }
              else
              {
                v8[4] = (uint64_t)(v34 + 1);
                *v34 = v33;
              }
            }
            else
            {
              sub_1C5E21910((llvm::raw_ostream *)v8, (*((char *)v85 + v23) >> v29) & 1, 0, 0, 0);
            }
            --v29;
            ++v30;
          }
          while (v29 != -1);
          goto LABEL_51;
        }
        if (!*((_BYTE *)v79 + (8 * v23)))
        {
          v27 = *((unsigned __int8 *)v85 + v23);
          v73 = &unk_1E8145938;
          v74 = "0x%02x";
          v75 = v27;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)v8, (uint64_t)&v73);
          goto LABEL_51;
        }
        v35 = *((unsigned __int8 *)v85 + v23);
        if (*((_BYTE *)v85 + v23))
        {
          v73 = &unk_1E8145938;
          v74 = "0x%02x";
          v75 = v35;
          llvm::raw_ostream::operator<<((llvm::raw_ostream *)v8, (uint64_t)&v73);
          v36 = (_BYTE *)v8[4];
          if ((unint64_t)v36 >= v8[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v8, 39);
          }
          else
          {
            v8[4] = (uint64_t)(v36 + 1);
            *v36 = 39;
          }
          v38 = (_BYTE *)v8[4];
          if ((unint64_t)v38 >= v8[3])
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v8, v25 + 64);
          }
          else
          {
            v8[4] = (uint64_t)(v38 + 1);
            *v38 = v25 + 64;
          }
          v39 = (_BYTE *)v8[4];
          if ((unint64_t)v39 < v8[3])
          {
            v8[4] = (uint64_t)(v39 + 1);
            *v39 = 39;
            goto LABEL_51;
          }
          v40 = (llvm::raw_ostream *)v8;
          v41 = 39;
        }
        else
        {
          v37 = (_BYTE *)v8[4];
          if ((unint64_t)v37 < v8[3])
          {
            v8[4] = (uint64_t)(v37 + 1);
            *v37 = v25 + 64;
            goto LABEL_51;
          }
          v41 = v25 + 64;
          v40 = (llvm::raw_ostream *)v8;
        }
        llvm::raw_ostream::write(v40, v41);
LABEL_51:
        ++v23;
        v22 += 8;
      }
      while (v23 != v21);
    }
    v42 = (_WORD *)v8[4];
    if ((unint64_t)(v8[3] - (_QWORD)v42) > 1)
    {
      *v42 = 2653;
      v8[4] += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v8, "]\n", 2uLL);
    }
    v43 = v83;
    if ((_DWORD)v83)
    {
      v44 = 0;
      v45 = 0;
      do
      {
        v46 = (char *)v82;
        v47 = (const char **)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 304) + 8)
                                                                       + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 8), *(unsigned int *)((char *)v82 + v44 + 12));
        v48 = (_QWORD *)v8[4];
        if ((unint64_t)(v8[3] - (_QWORD)v48) > 7)
        {
          *v48 = 0x2070757869662020;
          v49 = (char *)(v8[4] + 8);
          v8[4] = (uint64_t)v49;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v8, "  fixup ", 8uLL);
          v49 = (char *)v8[4];
        }
        v50 = v45 + 65;
        if ((unint64_t)v49 >= v8[3])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v8, v50);
        }
        else
        {
          v8[4] = (uint64_t)(v49 + 1);
          *v49 = v50;
        }
        v51 = v8[4];
        if ((unint64_t)(v8[3] - v51) > 2)
        {
          *(_BYTE *)(v51 + 2) = 32;
          *(_WORD *)v51 = 11552;
          v52 = (_QWORD *)(v8[4] + 3);
          v8[4] = (uint64_t)v52;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v8, " - ", 3uLL);
          v52 = (_QWORD *)v8[4];
        }
        if ((unint64_t)(v8[3] - (_QWORD)v52) > 7)
        {
          *v52 = 0x203A74657366666FLL;
          v8[4] += 8;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v8, "offset: ", 8uLL);
        }
        sub_1C5E21910((llvm::raw_ostream *)v8, *(unsigned int *)&v46[v44 + 8], 0, 0, 0);
        v53 = v8[4];
        if ((unint64_t)(v8[3] - v53) > 8)
        {
          *(_BYTE *)(v53 + 8) = 32;
          *(_QWORD *)v53 = *(_QWORD *)", value: ";
          v8[4] += 9;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v8, ", value: ", 9uLL);
        }
        llvm::MCExpr::print(*(_QWORD *)&v46[v44]);
        v54 = (_QWORD *)v8[4];
        if ((unint64_t)(v8[3] - (_QWORD)v54) > 7)
        {
          *v54 = 0x203A646E696B202CLL;
          v55 = (_BYTE *)(v8[4] + 8);
          v8[4] = (uint64_t)v55;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v8, ", kind: ", 8uLL);
          v55 = (_BYTE *)v8[4];
        }
        v56 = *v47;
        if (v56)
        {
          v57 = strlen(v56);
          v58 = v57;
          if (v57 <= v8[3] - (uint64_t)v55)
          {
            if (v57)
            {
              memcpy(v55, v56, v57);
              v55 = (_BYTE *)(v8[4] + v58);
              v8[4] = (uint64_t)v55;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v8, v56, v57);
            v55 = (_BYTE *)v8[4];
          }
        }
        if ((_BYTE *)v8[3] == v55)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v8, "\n", 1uLL);
        }
        else
        {
          *v55 = 10;
          ++v8[4];
        }
        ++v45;
        v44 += 24;
      }
      while (v43 != v45);
    }
    if (v79 != v81)
      free(v79);
    a2 = v71;
    v3 = v72;
  }
  v76[0] = off_1E81A6E70;
  if (v78 == 1 && v77)
    MEMORY[0x1CAA32F9C](v77, 0x1000C8077774924);
  if (v82 != v84)
    free(v82);
  v59 = (llvm *)v85;
  if (v85 != v87)
    free(v85);
  if ((*(_BYTE *)(a1 + 752) & 2) != 0)
  {
    if ((*(_BYTE *)(a1 + 752) & 1) != 0)
      v67 = (uint64_t *)(a1 + 616);
    else
      v67 = llvm::nulls(v59);
    v68 = llvm::MCInst::dump_pretty(a2, (llvm::raw_ostream *)v67, *(llvm::MCInstPrinter **)(a1 + 296), "\n ", 2uLL, 0);
    if ((*(_BYTE *)(a1 + 752) & 1) != 0)
      v69 = (uint64_t *)(a1 + 616);
    else
      v69 = llvm::nulls(v68);
    v70 = (_BYTE *)v69[4];
    if ((_BYTE *)v69[3] == v70)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v69, "\n", 1uLL);
    }
    else
    {
      *v70 = 10;
      ++v69[4];
    }
  }
  v60 = *(_QWORD *)(a1 + 16);
  v61 = *(_QWORD *)(a1 + 296);
  if (v60)
    v62 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned int *, llvm::MCSection *, _QWORD))(*(_QWORD *)v60 + 32))(v60, v61, 0, a2, v3, *(_QWORD *)(a1 + 280));
  else
    v62 = (llvm *)(*(uint64_t (**)(_QWORD, unsigned int *, _QWORD, const char *, _QWORD, llvm::MCSection *, _QWORD))(*(_QWORD *)v61 + 32))(*(_QWORD *)(a1 + 296), a2, 0, "", 0, v3, *(_QWORD *)(a1 + 280));
  v63 = *(_QWORD *)(a1 + 472);
  if (v63 && *(_BYTE *)(v63 + *(_QWORD *)(a1 + 464) - 1) != 10)
  {
    if ((*(_BYTE *)(a1 + 752) & 1) != 0)
      v64 = (uint64_t *)(a1 + 616);
    else
      v64 = llvm::nulls(v62);
    v65 = (_BYTE *)v64[4];
    if ((_BYTE *)v64[3] == v65)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v64, "\n", 1uLL);
    }
    else
    {
      *v65 = 10;
      ++v64[4];
    }
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C59279D0(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t *a6)
{
  llvm::raw_ostream *v12;
  void *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  _BYTE *v22;

  v12 = *(llvm::raw_ostream **)(a1 + 280);
  v13 = (void *)*((_QWORD *)v12 + 4);
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 0xDuLL)
  {
    qmemcpy(v13, "\t.pseudoprobe\t", 14);
    *((_QWORD *)v12 + 4) += 14;
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), "\t.pseudoprobe\t", 0xEuLL);
  }
  sub_1C5E21910(v12, a2, 0, 0, 0);
  v14 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v14)
  {
    llvm::raw_ostream::write(v12, " ", 1uLL);
  }
  else
  {
    *v14 = 32;
    ++*((_QWORD *)v12 + 4);
  }
  sub_1C5E21910(v12, a3, 0, 0, 0);
  v15 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v15)
  {
    llvm::raw_ostream::write(v12, " ", 1uLL);
  }
  else
  {
    *v15 = 32;
    ++*((_QWORD *)v12 + 4);
  }
  sub_1C5E21910(v12, a4, 0, 0, 0);
  v16 = (_BYTE *)*((_QWORD *)v12 + 4);
  if (*((_BYTE **)v12 + 3) == v16)
  {
    llvm::raw_ostream::write(v12, " ", 1uLL);
  }
  else
  {
    *v16 = 32;
    ++*((_QWORD *)v12 + 4);
  }
  sub_1C5E21910(v12, a5, 0, 0, 0);
  v17 = *((unsigned int *)a6 + 2);
  if ((_DWORD)v17)
  {
    v18 = *a6;
    v19 = *a6 + 16 * v17;
    do
    {
      v20 = *(llvm::raw_ostream **)(a1 + 280);
      v21 = *((_QWORD *)v20 + 4);
      if ((unint64_t)(*((_QWORD *)v20 + 3) - v21) > 2)
      {
        *(_BYTE *)(v21 + 2) = 32;
        *(_WORD *)v21 = 16416;
        *((_QWORD *)v20 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), " @ ", 3uLL);
      }
      sub_1C5E21910(v20, *(_QWORD *)v18, 0, 0, 0);
      v22 = (_BYTE *)*((_QWORD *)v20 + 4);
      if (*((_BYTE **)v20 + 3) == v22)
      {
        llvm::raw_ostream::write(v20, ":", 1uLL);
      }
      else
      {
        *v22 = 58;
        ++*((_QWORD *)v20 + 4);
      }
      sub_1C5E21910(v20, *(unsigned int *)(v18 + 8), 0, 0, 0);
      v18 += 16;
    }
    while (v18 != v19);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5927C54(uint64_t a1, unsigned int a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;

  v4 = *(llvm::raw_ostream **)(a1 + 280);
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 0x13)
  {
    *(_DWORD *)(v5 + 16) = 543515759;
    *(_OWORD *)v5 = *(_OWORD *)"\t.bundle_align_mode ";
    *((_QWORD *)v4 + 4) += 20;
  }
  else
  {
    v4 = llvm::raw_ostream::write(v4, "\t.bundle_align_mode ", 0x14uLL);
  }
  sub_1C5E21910(v4, a2, 0, 0, 0);
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5927CDC(uint64_t a1, int a2)
{
  llvm::raw_ostream *v4;
  void *v5;
  llvm::raw_ostream *v6;
  void *v7;

  v4 = *(llvm::raw_ostream **)(a1 + 280);
  v5 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0xCuLL)
  {
    qmemcpy(v5, "\t.bundle_lock", 13);
    *((_QWORD *)v4 + 4) += 13;
    if (!a2)
      return sub_1C5928670(a1);
  }
  else
  {
    llvm::raw_ostream::write(v4, "\t.bundle_lock", 0xDuLL);
    if (!a2)
      return sub_1C5928670(a1);
  }
  v6 = *(llvm::raw_ostream **)(a1 + 280);
  v7 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 > 0xCuLL)
  {
    qmemcpy(v7, " align_to_end", 13);
    *((_QWORD *)v6 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(v6, " align_to_end", 0xDuLL);
  }
  return sub_1C5928670(a1);
}

llvm::raw_ostream *sub_1C5927DA0(uint64_t a1)
{
  llvm::raw_ostream *v2;
  void *v3;

  v2 = *(llvm::raw_ostream **)(a1 + 280);
  v3 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 0xEuLL)
  {
    qmemcpy(v3, "\t.bundle_unlock", 15);
    *((_QWORD *)v2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v2, "\t.bundle_unlock", 0xFuLL);
  }
  return sub_1C5928670(a1);
}

void sub_1C5927E0C(uint64_t a1, llvm::MCStreamer *a2)
{
  _QWORD *v3;
  llvm::MCSymbol *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  const char *v13;
  const char *v14;
  unint64_t v15;
  _QWORD *v16;
  void *v17;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 1513))
    llvm::MCGenDwarfInfo::Emit((llvm::MCGenDwarfInfo *)a1, a2);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 288) + 426))
  {
    v3 = *(_QWORD **)(a1 + 8);
    if (v3[186])
    {
      v4 = *(llvm::MCSymbol **)(v3[184] + 40);
      if (v4)
      {
        v5 = *(_QWORD *)(v3[21] + 88);
        v6 = *(_QWORD *)(a1 + 112) + 32 * *(unsigned int *)(a1 + 120);
        v7 = *(_QWORD *)(v6 - 32);
        v8 = *(_QWORD *)(v6 - 24);
        *(_QWORD *)(v6 - 16) = v7;
        *(_QWORD *)(v6 - 8) = v8;
        if (v7 != v5 || v8 != 0)
        {
          (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 160))(a1, v5, 0);
          v10 = *(_QWORD *)(a1 + 112) + 32 * *(unsigned int *)(a1 + 120);
          *(_QWORD *)(v10 - 32) = v5;
          *(_QWORD *)(v10 - 24) = 0;
          v11 = *(_QWORD *)(v5 + 8);
          if (v11)
          {
            v15 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8;
            if (!v15 && (*(_DWORD *)(v11 + 8) & 0x1C00) == 0x800)
            {
              *(_DWORD *)(v11 + 8) |= 4u;
              v16 = (_QWORD *)v11;
              llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v11 + 24));
              v11 = (uint64_t)v16;
              *v16 = *v16 & 7 | v15;
            }
            if (!v15 || (sub_1C593D6FC(v11, 1), v17 == llvm::MCSymbol::AbsolutePseudoFragment))
              (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
          }
        }
        sub_1C591EBBC(a1, v4, 0);
      }
    }
    v12 = *(llvm::raw_ostream **)(a1 + 280);
    v13 = (const char *)*((_QWORD *)v12 + 4);
    v14 = (const char *)*((_QWORD *)v12 + 2);
    if (v13 != v14)
    {
      *((_QWORD *)v12 + 4) = v14;
      llvm::raw_ostream::flush_tied_then_write(v12, v14, v13 - v14);
    }
  }
  else
  {
    llvm::MCDwarfLineTable::emit((llvm::MCStreamer *)a1, *(unsigned __int16 *)(*(_QWORD *)(a1 + 304) + 200) | (*(unsigned __int8 *)(*(_QWORD *)(a1 + 304) + 202) << 16));
  }
}

_QWORD *sub_1C5927FAC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1[36] + 427))
    return (_QWORD *)llvm::MCStreamer::emitDwarfUnitLength(a1, a2, a3);
  return a1;
}

unint64_t sub_1C5927FC0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;

  if (*(_BYTE *)(a1[36] + 427))
    return llvm::MCStreamer::emitDwarfUnitLength(a1, a2, a3);
  v4 = a1[1];
  v5 = *(unsigned __int8 *)(a2 + 32);
  if (v5 == 1)
  {
    v9[0] = "_end";
    v6 = 259;
  }
  else
  {
    if (*(_BYTE *)(a2 + 32))
    {
      v7 = *(_QWORD *)(a2 + 8);
      if (*(_BYTE *)(a2 + 33) == 1)
      {
        v8 = *(_QWORD *)a2;
      }
      else
      {
        LOBYTE(v5) = 2;
        v8 = a2;
      }
      v9[0] = v8;
      v9[1] = v7;
      v9[2] = "_end";
      LOBYTE(v10) = v5;
      HIBYTE(v10) = 3;
      return llvm::MCContext::createTempSymbol(v4, (uint64_t)v9, 1);
    }
    v6 = 256;
  }
  v10 = v6;
  return llvm::MCContext::createTempSymbol(v4, (uint64_t)v9, 1);
}

uint64_t sub_1C5928064(llvm::raw_ostream **a1, llvm::MCSymbol *a2)
{
  uint64_t v5;
  llvm::MCSymbol *TempSymbol;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  const char *v12;
  __int16 v13;

  if (*((_BYTE *)a1[36] + 427))
    return (*((uint64_t (**)(llvm::raw_ostream **, llvm::MCSymbol *, _QWORD))*a1 + 24))(a1, a2, 0);
  v5 = (uint64_t)a1[1];
  v12 = "debug_line_";
  v13 = 259;
  TempSymbol = (llvm::MCSymbol *)llvm::MCContext::createTempSymbol(v5, (uint64_t)&v12, 1);
  sub_1C591EBBC((uint64_t)a1, TempSymbol, 0);
  if (*(_BYTE *)(v5 + 1626))
    v7 = 12;
  else
    v7 = 4;
  v8 = sub_1C484358C(v5 + 192, 24, 3);
  *(_BYTE *)v8 = 1;
  *(_DWORD *)(v8 + 1) = *(unsigned __int8 *)(v8 + 4) << 24;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = v7;
  v9 = sub_1C484358C(v5 + 192, 24, 3);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 152) + 18) << 16;
  *(_BYTE *)v9 = 2;
  *(_DWORD *)(v9 + 1) = v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = TempSymbol;
  v11 = sub_1C484358C(v5 + 192, 32, 3);
  *(_BYTE *)v11 = 0;
  *(_DWORD *)(v11 + 1) = (*(unsigned __int8 *)(v11 + 4) << 24) | 0x12;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = v9;
  *(_QWORD *)(v11 + 24) = v8;
  return sub_1C591F7D0(a1, a2, (const llvm::MCExpr **)v11);
}

void sub_1C59281D4(llvm::MCStreamer *a1, uint64_t a2, uint64_t a3)
{
  llvm::MCContext *v5;
  const llvm::MCSymbol *EndSymbol;

  v5 = (llvm::MCContext *)*((_QWORD *)a1 + 1);
  EndSymbol = (const llvm::MCSymbol *)llvm::MCSection::getEndSymbol(*(llvm::MCSection **)(*((_QWORD *)v5 + 21) + 24), v5);
  sub_1C5928228(a1, 0x7FFFFFFFFFFFFFFFLL, a3, EndSymbol, *(unsigned int *)(*((_QWORD *)v5 + 19) + 8));
}

void sub_1C5928228(llvm::MCStreamer *a1, uint64_t a2, uint64_t a3, const llvm::MCSymbol *a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  uint64_t *v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  v23 = a2;
  if ((*(_BYTE *)a4 & 4) != 0)
  {
    v12 = (uint64_t *)*((_QWORD *)a4 - 1);
    v13 = *v12;
    v10 = v12 + 2;
    v11 = v13;
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v22 = 1283;
  v19[0] = "Set address to ";
  v20 = v10;
  v21 = v11;
  sub_1C591E104((uint64_t)a1, (uint64_t)v19, 1);
  v14 = sub_1C484358C(*((_QWORD *)a1 + 1) + 192, 24, 3);
  *(_BYTE *)v14 = 1;
  *(_DWORD *)(v14 + 1) = *(unsigned __int8 *)(v14 + 4) << 24;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  (*(void (**)(llvm::MCStreamer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 504))(a1, v14, 1, 0);
  llvm::MCStreamer::emitULEB128IntValue(a1, (a5 + 1), 0);
  v15 = sub_1C484358C(*((_QWORD *)a1 + 1) + 192, 24, 3);
  *(_BYTE *)v15 = 1;
  *(_DWORD *)(v15 + 1) = *(unsigned __int8 *)(v15 + 4) << 24;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 2;
  (*(void (**)(llvm::MCStreamer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 504))(a1, v15, 1, 0);
  llvm::MCStreamer::emitSymbolValue(a1, a4, a5, 0);
  if (a3)
  {
    if (a2 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v19[0] = "End sequence";
      v22 = 259;
      sub_1C591E104((uint64_t)a1, (uint64_t)v19, 1);
      v16 = sub_1C484358C(*((_QWORD *)a1 + 1) + 192, 24, 3);
      *(_BYTE *)v16 = 1;
      *(_DWORD *)(v16 + 1) = *(unsigned __int8 *)(v16 + 4) << 24;
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 16) = 0;
      (*(void (**)(llvm::MCStreamer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 504))(a1, v16, 1, 0);
      llvm::MCStreamer::emitULEB128IntValue(a1, 1uLL, 0);
    }
    else
    {
      v19[0] = "Advance line ";
      v20 = &v23;
      v22 = 3331;
      sub_1C591E104((uint64_t)a1, (uint64_t)v19, 1);
      v18 = sub_1C484358C(*((_QWORD *)a1 + 1) + 192, 24, 3);
      *(_BYTE *)v18 = 1;
      *(_DWORD *)(v18 + 1) = *(unsigned __int8 *)(v18 + 4) << 24;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = 3;
      (*(void (**)(llvm::MCStreamer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 504))(a1, v18, 1, 0);
      llvm::MCStreamer::emitSLEB128IntValue(a1, v23);
    }
    v17 = sub_1C484358C(*((_QWORD *)a1 + 1) + 192, 24, 3);
    *(_BYTE *)v17 = 1;
    *(_DWORD *)(v17 + 1) = *(unsigned __int8 *)(v17 + 4) << 24;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = 1;
    (*(void (**)(llvm::MCStreamer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 504))(a1, v17, 1, 0);
  }
  else
  {
    v19[0] = "Start sequence";
    v22 = 259;
    sub_1C591E104((uint64_t)a1, (uint64_t)v19, 1);
    llvm::MCDwarfLineAddr::Emit(a1, 981773, a2, 0);
  }
}

void sub_1C5928564(uint64_t a1, llvm::MCSection *a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::MCSection *v5;
  uint64_t v6;
  llvm::MCSection *v8;
  unint64_t EndSymbol;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (!*(_BYTE *)(*(_QWORD *)(a1 + 288) + 426))
  {
    v3 = *(unsigned int *)(a1 + 120);
    v4 = *(_QWORD *)(a1 + 112) + 32 * v3;
    v5 = *(llvm::MCSection **)(v4 - 32);
    v6 = *(_QWORD *)(v4 - 24);
    *(_QWORD *)(v4 - 16) = v5;
    *(_QWORD *)(v4 - 8) = v6;
    if (v5 != a2 || v6 != 0)
    {
      *(_QWORD *)(v4 - 32) = a2;
      *(_QWORD *)(v4 - 24) = 0;
    }
    if ((_DWORD)v3)
      v8 = a2;
    else
      v8 = 0;
    EndSymbol = llvm::MCSection::getEndSymbol(v8, *(llvm::MCContext **)(a1 + 8));
    v10 = *(_QWORD *)EndSymbol;
    v11 = *(_QWORD *)EndSymbol & 0xFFFFFFFFFFFFFFF8;
    if (!v11 && (*(_DWORD *)(EndSymbol + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(EndSymbol + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(EndSymbol + 24));
      v10 = *(_QWORD *)EndSymbol & 7 | v11;
      *(_QWORD *)EndSymbol = v10;
    }
    if (!v11)
      goto LABEL_15;
    v12 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(EndSymbol + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(EndSymbol + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(EndSymbol + 24));
      *(_QWORD *)EndSymbol = *(_QWORD *)EndSymbol & 7 | v12;
    }
    if ((_UNKNOWN *)v12 == llvm::MCSymbol::AbsolutePseudoFragment)
LABEL_15:
      sub_1C591EBBC(a1, (llvm::MCSymbol *)EndSymbol, 0);
  }
}

llvm::raw_ostream *sub_1C5928670(uint64_t a1)
{
  llvm::raw_ostream *result;
  _BYTE *v3;
  size_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  const void *v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  size_t v14;

  sub_1C591EA9C((_QWORD *)a1);
  if ((*(_BYTE *)(a1 + 752) & 1) != 0
    && ((v4 = *(_QWORD *)(a1 + 472)) != 0 || *(_QWORD *)(a1 + 648) != *(_QWORD *)(a1 + 632)))
  {
    v5 = *(_BYTE **)(a1 + 464);
    do
    {
      llvm::formatted_raw_ostream::PadToColumn(*(llvm::formatted_raw_ostream **)(a1 + 280), 40);
      if (v4 && (v6 = memchr(v5, 10, v4)) != 0)
        v7 = v6 - v5;
      else
        v7 = -1;
      v9 = *(llvm::raw_ostream **)(a1 + 280);
      v8 = *(_QWORD *)(a1 + 288);
      v10 = *(const void **)(v8 + 48);
      v11 = *(_QWORD *)(v8 + 56);
      v12 = (_BYTE *)*((_QWORD *)v9 + 4);
      if (v11 <= *((_QWORD *)v9 + 3) - (_QWORD)v12)
      {
        if (v11)
        {
          memcpy(v12, v10, v11);
          v12 = (_BYTE *)(*((_QWORD *)v9 + 4) + v11);
          *((_QWORD *)v9 + 4) = v12;
        }
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 280), (const char *)v10, v11);
        v12 = (_BYTE *)*((_QWORD *)v9 + 4);
      }
      if ((unint64_t)v12 >= *((_QWORD *)v9 + 3))
      {
        llvm::raw_ostream::write(v9, 32);
      }
      else
      {
        *((_QWORD *)v9 + 4) = v12 + 1;
        *v12 = 32;
      }
      if (v4 >= v7)
        v13 = v7;
      else
        v13 = v4;
      result = (llvm::raw_ostream *)*((_QWORD *)v9 + 4);
      if (v13 <= *((_QWORD *)v9 + 3) - (_QWORD)result)
      {
        if (v13)
        {
          memcpy(result, v5, v13);
          result = (llvm::raw_ostream *)(*((_QWORD *)v9 + 4) + v13);
          *((_QWORD *)v9 + 4) = result;
        }
      }
      else
      {
        llvm::raw_ostream::write(v9, v5, v13);
        result = (llvm::raw_ostream *)*((_QWORD *)v9 + 4);
      }
      if ((unint64_t)result >= *((_QWORD *)v9 + 3))
      {
        result = llvm::raw_ostream::write(v9, 10);
      }
      else
      {
        *((_QWORD *)v9 + 4) = (char *)result + 1;
        *(_BYTE *)result = 10;
      }
      if (v4 >= v7 + 1)
        v14 = v7 + 1;
      else
        v14 = v4;
      v5 += v14;
      v4 -= v14;
    }
    while (v4);
    *(_QWORD *)(a1 + 472) = 0;
  }
  else
  {
    result = *(llvm::raw_ostream **)(a1 + 280);
    v3 = (_BYTE *)*((_QWORD *)result + 4);
    if ((unint64_t)v3 >= *((_QWORD *)result + 3))
    {
      return llvm::raw_ostream::write(result, 10);
    }
    else
    {
      *((_QWORD *)result + 4) = v3 + 1;
      *v3 = 10;
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C5928840(llvm::raw_ostream *this, _QWORD *a2)
{
  llvm::raw_ostream *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  _WORD *v7;
  unint64_t v8;
  _WORD *v9;

  if (*a2 & 0x7FFFFFFFFFFFFFFFLL | a2[1] & 0x7FFFFFFF7FFFFFFFLL)
  {
    v3 = this;
    v4 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v4 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 9);
    }
    else
    {
      *((_QWORD *)this + 4) = v4 + 1;
      *v4 = 9;
    }
    v5 = *((_QWORD *)v3 + 4);
    if ((unint64_t)(*((_QWORD *)v3 + 3) - v5) > 0xB)
    {
      *(_DWORD *)(v5 + 8) = 544108393;
      *(_QWORD *)v5 = *(_QWORD *)"sdk_version ";
      *((_QWORD *)v3 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v3, "sdk_version ", 0xCuLL);
    }
    this = sub_1C5E21910(v3, *(unsigned int *)a2, 0, 0, 0);
    if ((*a2 & 0x8000000000000000) != 0)
    {
      v6 = HIDWORD(*a2) & 0x7FFFFFFFLL;
      v7 = (_WORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v7 > 1uLL)
      {
        *v7 = 8236;
        *((_QWORD *)v3 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v3, ", ", 2uLL);
      }
      this = sub_1C5E21910(v3, v6, 0, 0, 0);
      if ((a2[1] & 0x80000000) != 0)
      {
        v8 = a2[1] & 0x7FFFFFFFLL;
        v9 = (_WORD *)*((_QWORD *)v3 + 4);
        if (*((_QWORD *)v3 + 3) - (_QWORD)v9 > 1uLL)
        {
          *v9 = 8236;
          *((_QWORD *)v3 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v3, ", ", 2uLL);
        }
        return sub_1C5E21910(v3, v8, 0, 0, 0);
      }
    }
  }
  return this;
}

llvm::raw_ostream *sub_1C59289DC(llvm::raw_ostream *result, _BYTE *a2, uint64_t a3, llvm::raw_ostream *this)
{
  uint64_t v7;
  _BYTE *v8;
  int v9;
  _WORD *v10;
  _BYTE *v11;
  unsigned int v12;
  _BYTE *v13;
  __int16 *v14;
  llvm::raw_ostream *v15;
  const char *v16;
  _BYTE *v17;
  llvm::raw_ostream *v18;
  char v19;
  _BYTE *v20;
  int v21;
  _BYTE *v22;
  int v23;
  _BYTE *v24;
  char *v25;
  __int16 v26;
  _BYTE *v27;

  v7 = (uint64_t)result;
  v8 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v8 >= *((_QWORD *)this + 3))
  {
    result = llvm::raw_ostream::write(this, 34);
  }
  else
  {
    *((_QWORD *)this + 4) = v8 + 1;
    *v8 = 34;
  }
  if (!*(_BYTE *)(*(_QWORD *)(v7 + 288) + 361))
  {
    if (!a3)
      goto LABEL_58;
    while (1)
    {
      v12 = *a2;
      if (v12 == 92 || v12 == 34)
      {
        v13 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v13 >= *((_QWORD *)this + 3))
        {
          result = llvm::raw_ostream::write(this, 92);
        }
        else
        {
          *((_QWORD *)this + 4) = v13 + 1;
          *v13 = 92;
        }
      }
      else if (v12 - 32 > 0x5E)
      {
        switch(*a2)
        {
          case 8:
            v14 = (__int16 *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v14 <= 1uLL)
            {
              v15 = this;
              v16 = "\\b";
              goto LABEL_39;
            }
            v26 = 25180;
            goto LABEL_57;
          case 9:
            v14 = (__int16 *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v14 <= 1uLL)
            {
              v15 = this;
              v16 = "\\t";
              goto LABEL_39;
            }
            v26 = 29788;
            goto LABEL_57;
          case 0xA:
            v14 = (__int16 *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v14 <= 1uLL)
            {
              v15 = this;
              v16 = "\\n";
              goto LABEL_39;
            }
            v26 = 28252;
            goto LABEL_57;
          case 0xC:
            v14 = (__int16 *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v14 <= 1uLL)
            {
              v15 = this;
              v16 = "\\f";
              goto LABEL_39;
            }
            v26 = 26204;
            goto LABEL_57;
          case 0xD:
            v14 = (__int16 *)*((_QWORD *)this + 4);
            if (*((_QWORD *)this + 3) - (_QWORD)v14 > 1uLL)
            {
              v26 = 29276;
LABEL_57:
              *v14 = v26;
              *((_QWORD *)this + 4) += 2;
            }
            else
            {
              v15 = this;
              v16 = "\\r";
LABEL_39:
              result = llvm::raw_ostream::write(v15, v16, 2uLL);
            }
            goto LABEL_40;
          default:
            v20 = (_BYTE *)*((_QWORD *)this + 4);
            if ((unint64_t)v20 >= *((_QWORD *)this + 3))
            {
              result = llvm::raw_ostream::write(this, 92);
            }
            else
            {
              *((_QWORD *)this + 4) = v20 + 1;
              *v20 = 92;
            }
            v21 = (v12 >> 6) | 0x30;
            v22 = (_BYTE *)*((_QWORD *)this + 4);
            if ((unint64_t)v22 >= *((_QWORD *)this + 3))
            {
              result = llvm::raw_ostream::write(this, v21);
            }
            else
            {
              *((_QWORD *)this + 4) = v22 + 1;
              *v22 = v21;
            }
            v23 = (v12 >> 3) & 7 | 0x30;
            v24 = (_BYTE *)*((_QWORD *)this + 4);
            if ((unint64_t)v24 >= *((_QWORD *)this + 3))
            {
              result = llvm::raw_ostream::write(this, v23);
            }
            else
            {
              *((_QWORD *)this + 4) = v24 + 1;
              *v24 = v23;
            }
            v19 = v12 & 7 | 0x30;
            v25 = (char *)*((_QWORD *)this + 4);
            if ((unint64_t)v25 < *((_QWORD *)this + 3))
            {
              *((_QWORD *)this + 4) = v25 + 1;
              *v25 = v19;
              goto LABEL_40;
            }
            v18 = this;
            break;
        }
        goto LABEL_28;
      }
      v17 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v17 >= *((_QWORD *)this + 3))
      {
        v18 = this;
        v19 = v12;
LABEL_28:
        result = llvm::raw_ostream::write(v18, v19);
        goto LABEL_40;
      }
      *((_QWORD *)this + 4) = v17 + 1;
      *v17 = v12;
LABEL_40:
      ++a2;
      if (!--a3)
        goto LABEL_58;
    }
  }
  for (; a3; --a3)
  {
    v9 = *a2;
    if (v9 == 34)
    {
      v10 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v10 > 1uLL)
      {
        *v10 = 8738;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        result = llvm::raw_ostream::write(this, "\"\"", 2uLL);
      }
    }
    else
    {
      v11 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v11 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, v9);
      }
      else
      {
        *((_QWORD *)this + 4) = v11 + 1;
        *v11 = v9;
      }
    }
    ++a2;
  }
LABEL_58:
  v27 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v27 >= *((_QWORD *)this + 3))
    return llvm::raw_ostream::write(this, 34);
  *((_QWORD *)this + 4) = v27 + 1;
  *v27 = 34;
  return result;
}

void sub_1C5928D6C(llvm::raw_ostream *a1, unsigned int a2, char *a3, unint64_t a4, _BYTE *a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8, char a9, llvm::raw_ostream *a10)
{
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v18;
  _DWORD *v19;
  _BYTE *v20;
  _BYTE *v21;
  _DWORD *v22;
  uint64_t i;
  unsigned int v24;
  _QWORD *v25;
  void **v26;
  __int16 v27;
  _QWORD *v28;
  __int16 v29;
  _QWORD *v30;
  __int16 v31;
  void *v32;
  __int128 v33;
  uint64_t v34;
  __int16 v35;
  void *v36;
  __int128 v37;
  _QWORD v38[18];

  v12 = a6;
  v13 = a5;
  v14 = a4;
  v38[16] = *MEMORY[0x1E0C80C00];
  v36 = v38;
  v37 = xmmword_1C85F20B0;
  if ((a9 & 1) == 0 && a4)
  {
    v35 = 261;
    v32 = a5;
    *(_QWORD *)&v33 = a6;
    if ((llvm::sys::path::is_absolute((const char **)&v32, 0) & 1) != 0)
    {
      v14 = 0;
    }
    else
    {
      v18 = 0;
      *(_QWORD *)&v37 = 0;
      if (*((_QWORD *)&v37 + 1) < v14)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v36, v38, v14, 1);
        v18 = v37;
      }
      memcpy((char *)v36 + v18, a3, v14);
      *(_QWORD *)&v37 = v37 + v14;
      v35 = 261;
      v32 = v13;
      *(_QWORD *)&v33 = v12;
      v31 = 257;
      v29 = 257;
      v27 = 257;
      llvm::sys::path::append(&v36, 0, (_QWORD **)&v32, &v30, &v28, &v26);
      v14 = 0;
      v13 = v36;
      v12 = v37;
    }
    a3 = "";
  }
  v19 = (_DWORD *)*((_QWORD *)a10 + 4);
  if (*((_QWORD *)a10 + 3) - (_QWORD)v19 > 6uLL)
  {
    *(_DWORD *)((char *)v19 + 3) = 157641833;
    *v19 = 1768304137;
    *((_QWORD *)a10 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(a10, "\t.file\t", 7uLL);
  }
  sub_1C5E21910(a10, a2, 0, 0, 0);
  v20 = (_BYTE *)*((_QWORD *)a10 + 4);
  if ((unint64_t)v20 < *((_QWORD *)a10 + 3))
  {
    *((_QWORD *)a10 + 4) = v20 + 1;
    *v20 = 32;
    if (!v14)
      goto LABEL_18;
LABEL_15:
    sub_1C59289DC(a1, a3, v14, a10);
    v21 = (_BYTE *)*((_QWORD *)a10 + 4);
    if ((unint64_t)v21 >= *((_QWORD *)a10 + 3))
    {
      llvm::raw_ostream::write(a10, 32);
    }
    else
    {
      *((_QWORD *)a10 + 4) = v21 + 1;
      *v21 = 32;
    }
    goto LABEL_18;
  }
  llvm::raw_ostream::write(a10, 32);
  if (v14)
    goto LABEL_15;
LABEL_18:
  sub_1C59289DC(a1, v13, v12, a10);
  if (a7[16])
  {
    v22 = (_DWORD *)*((_QWORD *)a10 + 4);
    if (*((_QWORD *)a10 + 3) - (_QWORD)v22 > 6uLL)
    {
      *(_DWORD *)((char *)v22 + 3) = 2016419893;
      *v22 = 895773984;
      *((_QWORD *)a10 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(a10, " md5 0x", 7uLL);
    }
    v32 = &v34;
    v33 = xmmword_1C677F680;
    sub_1C5050254(&v32, 0x20uLL);
    for (i = 0; i != 32; i += 2)
    {
      v24 = *a7++;
      *((_BYTE *)v32 + i) = a0123456789abcd_6[(unint64_t)v24 >> 4] | 0x20;
      *((_BYTE *)v32 + i + 1) = a0123456789abcd_6[v24 & 0xF] | 0x20;
    }
    llvm::raw_ostream::write(a10, (const char *)v32, v33);
    if (v32 != &v34)
      free(v32);
  }
  if (*(_BYTE *)(a8 + 16))
  {
    v25 = (_QWORD *)*((_QWORD *)a10 + 4);
    if (*((_QWORD *)a10 + 3) - (_QWORD)v25 > 7uLL)
    {
      *v25 = 0x20656372756F7320;
      *((_QWORD *)a10 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a10, " source ", 8uLL);
    }
    sub_1C59289DC(a1, *(_BYTE **)a8, *(_QWORD *)(a8 + 8), a10);
  }
  if (v36 != v38)
    free(v36);
}

char *sub_1C592911C(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  char *v6;
  uint64_t **v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = (char *)a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *(char **)v9;
        v7 = (uint64_t **)v9;
        if (!*(_QWORD *)v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = (char *)*((_QWORD *)v9 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v9 + 8);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = (char *)(a1 + 1);
LABEL_10:
    v11 = v9;
    v9 = (char *)operator new(0x228uLL);
    *((_DWORD *)v9 + 8) = **a4;
    *((_QWORD *)v9 + 65) = 0;
    *(_OWORD *)(v9 + 248) = 0u;
    *(_OWORD *)(v9 + 232) = 0u;
    *(_OWORD *)(v9 + 216) = 0u;
    *(_OWORD *)(v9 + 200) = 0u;
    *(_OWORD *)(v9 + 184) = 0u;
    *(_OWORD *)(v9 + 168) = 0u;
    *(_OWORD *)(v9 + 136) = 0u;
    *(_OWORD *)(v9 + 120) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 488) = 0u;
    *(_OWORD *)(v9 + 504) = 0u;
    *(_OWORD *)(v9 + 456) = 0u;
    *(_OWORD *)(v9 + 472) = 0u;
    *(_OWORD *)(v9 + 424) = 0u;
    *(_OWORD *)(v9 + 440) = 0u;
    *(_OWORD *)(v9 + 392) = 0u;
    *(_OWORD *)(v9 + 408) = 0u;
    *(_OWORD *)(v9 + 360) = 0u;
    *(_OWORD *)(v9 + 376) = 0u;
    *(_OWORD *)(v9 + 328) = 0u;
    *(_OWORD *)(v9 + 344) = 0u;
    *(_OWORD *)(v9 + 280) = 0u;
    *(_OWORD *)(v9 + 264) = 0u;
    *(_OWORD *)(v9 + 152) = 0u;
    *(_OWORD *)(v9 + 296) = 0u;
    *(_OWORD *)(v9 + 312) = 0u;
    *((_QWORD *)v9 + 6) = v9 + 64;
    *((_DWORD *)v9 + 15) = 3;
    *((_QWORD *)v9 + 17) = v9 + 152;
    *((_DWORD *)v9 + 37) = 3;
    *((_QWORD *)v9 + 47) = 0;
    *((_QWORD *)v9 + 46) = 0;
    *((_QWORD *)v9 + 48) = 0x1000000000;
    *((_OWORD *)v9 + 25) = 0u;
    *((_OWORD *)v9 + 26) = 0u;
    *((_OWORD *)v9 + 27) = 0u;
    *(_QWORD *)(v9 + 445) = 0;
    v9[497] = 1;
    *((_QWORD *)v9 + 64) = 0;
    *((_QWORD *)v9 + 63) = 0;
    *((_DWORD *)v9 + 130) = 0;
    *((_QWORD *)v9 + 66) = 0;
    *((_QWORD *)v9 + 68) = 0;
    *((_QWORD *)v9 + 67) = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v7 = (uint64_t *)v9;
    v12 = (uint64_t *)v9;
    v13 = (uint64_t *)**a1;
    if (v13)
    {
      *a1 = v13;
      v12 = *v7;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

__n128 sub_1C59292C4(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, __int128 *a6, __n128 *a7)
{
  __int128 *p_dst;
  size_t v15;
  size_t v16;
  void **v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  __int128 v22;
  unint64_t v23;
  __n128 result;
  __int128 __dst;
  unint64_t v26;

  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_22;
  if (__len >= 0x17)
  {
    v15 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v15 = __len | 7;
    v16 = v15 + 1;
    p_dst = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v26 = v16 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v26) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v17 = (void **)(a1 + 360);
  if (*(char *)(a1 + 383) < 0)
    operator delete(*v17);
  *(_OWORD *)v17 = __dst;
  *(_QWORD *)(a1 + 376) = v26;
  if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_22:
    abort();
  if (a5 >= 0x17)
  {
    v19 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v19 = a5 | 7;
    v20 = v19 + 1;
    v18 = (__int128 *)operator new(v19 + 1);
    *((_QWORD *)&__dst + 1) = a5;
    v26 = v20 | 0x8000000000000000;
    *(_QWORD *)&__dst = v18;
    goto LABEL_18;
  }
  HIBYTE(v26) = a5;
  v18 = &__dst;
  if (a5)
LABEL_18:
    memmove(v18, a4, a5);
  *((_BYTE *)v18 + a5) = 0;
  v21 = (void **)(a1 + 384);
  if (*(char *)(a1 + 407) < 0)
    operator delete(*v21);
  *(_OWORD *)v21 = __dst;
  *(_QWORD *)(a1 + 400) = v26;
  *(_DWORD *)(a1 + 408) = 0;
  v22 = *a6;
  *(_BYTE *)(a1 + 428) = *((_BYTE *)a6 + 16);
  *(_OWORD *)(a1 + 412) = v22;
  v23 = a7[1].n128_u64[0];
  result = *a7;
  *(__n128 *)(a1 + 432) = *a7;
  *(_QWORD *)(a1 + 448) = v23;
  LOBYTE(v23) = *((_BYTE *)a6 + 16);
  *(_BYTE *)(a1 + 457) &= v23;
  *(_BYTE *)(a1 + 458) |= v23;
  *(_BYTE *)(a1 + 456) = a7[1].n128_u8[0];
  return result;
}

llvm::raw_ostream *sub_1C5929488(uint64_t a1, llvm::MCSymbol **a2, uint64_t a3)
{
  llvm::raw_ostream *result;
  void *v7;
  llvm::MCSymbol **v8;
  llvm::MCSymbol *v9;
  llvm::MCSymbol *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;

  result = *(llvm::raw_ostream **)(a1 + 280);
  v7 = (void *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v7 > 0xEuLL)
  {
    qmemcpy(v7, "\t.cv_def_range\t", 15);
    *((_QWORD *)result + 4) += 15;
    if (!a3)
      return result;
  }
  else
  {
    result = llvm::raw_ostream::write(result, "\t.cv_def_range\t", 0xFuLL);
    if (!a3)
      return result;
  }
  v8 = &a2[2 * a3];
  do
  {
    v10 = *a2;
    v9 = a2[1];
    v11 = *(llvm::raw_ostream **)(a1 + 280);
    v12 = (_BYTE *)*((_QWORD *)v11 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)v11 + 3))
    {
      llvm::raw_ostream::write(v11, 32);
    }
    else
    {
      *((_QWORD *)v11 + 4) = v12 + 1;
      *v12 = 32;
    }
    llvm::MCSymbol::print(v10, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
    v13 = *(llvm::raw_ostream **)(a1 + 280);
    v14 = (_BYTE *)*((_QWORD *)v13 + 4);
    if ((unint64_t)v14 >= *((_QWORD *)v13 + 3))
    {
      llvm::raw_ostream::write(v13, 32);
    }
    else
    {
      *((_QWORD *)v13 + 4) = v14 + 1;
      *v14 = 32;
    }
    result = llvm::MCSymbol::print(v9, *(llvm::raw_ostream **)(a1 + 280), *(const llvm::MCAsmInfo **)(a1 + 288));
    a2 += 2;
  }
  while (a2 != v8);
  return result;
}

llvm::raw_ostream *sub_1C5929590(uint64_t a1, unint64_t a2)
{
  uint64_t LLVMRegNum;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 288) + 428))
    return llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 280), a2);
  LLVMRegNum = llvm::MCRegisterInfo::getLLVMRegNum(*(llvm::MCRegisterInfo **)(*(_QWORD *)(a1 + 8) + 160), a2, 1);
  if ((LLVMRegNum & 0xFF00000000) == 0)
    return llvm::raw_ostream::operator<<(*(llvm::raw_ostream **)(a1 + 280), a2);
  else
    return (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 296) + 40))(*(_QWORD *)(a1 + 296), *(_QWORD *)(a1 + 280), LLVMRegNum);
}

llvm::raw_ostream *sub_1C5929600(llvm::raw_ostream *result, unsigned __int8 *a2, uint64_t a3)
{
  void *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  _WORD *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;

  v5 = (void *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v5 > 0xCuLL)
  {
    qmemcpy(v5, "\t.cfi_escape ", 13);
    *((_QWORD *)result + 4) += 13;
    if (!a3)
      return result;
  }
  else
  {
    result = llvm::raw_ostream::write(result, "\t.cfi_escape ", 0xDuLL);
    if (!a3)
      return result;
  }
  if (a3 != 1)
  {
    v6 = a2;
    v7 = a3 - 1;
    do
    {
      v8 = *v6++;
      v11 = &unk_1E8145938;
      v12 = "0x%02x";
      v13 = v8;
      result = llvm::raw_ostream::operator<<(result, (uint64_t)&v11);
      v9 = (_WORD *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v9 > 1uLL)
      {
        *v9 = 8236;
        *((_QWORD *)result + 4) += 2;
      }
      else
      {
        result = llvm::raw_ostream::write(result, ", ", 2uLL);
      }
      --v7;
    }
    while (v7);
  }
  v10 = a2[a3 - 1];
  v11 = &unk_1E8145938;
  v12 = "0x%02x";
  v13 = v10;
  return llvm::raw_ostream::operator<<(result, (uint64_t)&v11);
}

void llvm::MCAssembler::reset(llvm::MCAssembler *this)
{
  void **v2;
  void **v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t j;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unsigned int v22;
  int v23;
  unsigned int v24;
  void *v25;
  void **v26;

  *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
  *((_QWORD *)this + 14) = *((_QWORD *)this + 13);
  v2 = (void **)*((_QWORD *)this + 16);
  v3 = (void **)*((_QWORD *)this + 17);
  while (v3 != v2)
  {
    v3 -= 3;
    v26 = v3;
    sub_1C4765410(&v26);
  }
  *((_QWORD *)this + 17) = v2;
  v4 = *((_QWORD *)this + 19);
  for (i = *((_QWORD *)this + 20); i != v4; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  *((_QWORD *)this + 20) = v4;
  v6 = *((_QWORD *)this + 22);
  for (j = *((_QWORD *)this + 23); j != v6; j -= 32)
  {
    if (*(char *)(j - 9) < 0)
      operator delete(*(void **)(j - 32));
  }
  *((_QWORD *)this + 23) = v6;
  v8 = (void *)*((_QWORD *)this + 27);
  if (v8 == *((void **)this + 26))
    goto LABEL_15;
  v20 = *((unsigned int *)this + 56);
  if (v20 < 0x21 || 4 * (*((_DWORD *)this + 57) - *((_DWORD *)this + 58)) >= v20)
  {
    memset(v8, 255, 8 * v20);
LABEL_15:
    *((_DWORD *)this + 57) = 0;
    *((_DWORD *)this + 58) = 0;
    goto LABEL_16;
  }
  free(v8);
  v22 = *((_DWORD *)this + 57) - *((_DWORD *)this + 58);
  v23 = 1 << (33 - __clz(v22 - 1));
  *((_DWORD *)this + 57) = 0;
  *((_DWORD *)this + 58) = 0;
  if (v22 <= 0x10)
    v24 = 32;
  else
    v24 = v23;
  *((_DWORD *)this + 56) = v24;
  v25 = malloc_type_malloc(8 * v24, 0x4065EBACuLL);
  if (!v25)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *((_QWORD *)this + 27) = v25;
  memset(v25, 255, 8 * *((unsigned int *)this + 56));
LABEL_16:
  *((_DWORD *)this + 124) = 0;
  *((_BYTE *)this + 500) &= 0xF8u;
  *((_DWORD *)this + 126) = 0;
  v9 = *((unsigned int *)this + 132);
  if ((_DWORD)v9)
  {
    v10 = *((_QWORD *)this + 65);
    v11 = 48 * v9;
    do
    {
      v12 = *(void **)(v10 + v11 - 40);
      if ((void *)(v10 + v11 - 24) != v12)
        free(v12);
      v11 -= 48;
    }
    while (v11);
  }
  *((_DWORD *)this + 132) = 0;
  *((_QWORD *)this + 64) = 0;
  *((_DWORD *)this + 520) = 0;
  *(_QWORD *)((char *)this + 2100) = 0;
  *(_QWORD *)((char *)this + 2092) = 0;
  *((_DWORD *)this + 529) = 0;
  *((_QWORD *)this + 266) = 0;
  *((_QWORD *)this + 268) = 0;
  *((_QWORD *)this + 267) = 0;
  *((_BYTE *)this + 2152) = 0;
  v13 = *((_QWORD *)this + 1);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13);
  v14 = *((_QWORD *)this + 2);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  v15 = *((_QWORD *)this + 3);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  v16 = *((unsigned int *)this + 132);
  if ((_DWORD)v16)
  {
    v17 = *((_QWORD *)this + 65);
    v18 = 48 * v16;
    do
    {
      v19 = *(void **)(v17 + v18 - 40);
      if ((void *)(v17 + v18 - 24) != v19)
        free(v19);
      v18 -= 48;
    }
    while (v18);
  }
  *((_DWORD *)this + 132) = 0;
  *((_QWORD *)this + 64) = 0;
}

BOOL llvm::MCAssembler::registerSection(uint64_t a1, uint64_t a2)
{
  char v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_BYTE *)(a2 + 44);
  if ((v2 & 4) == 0)
  {
    v10 = a2;
    v3 = *(_QWORD **)(a1 + 40);
    if ((unint64_t)v3 >= *(_QWORD *)(a1 + 48))
    {
      v8 = a2;
      v9 = a1;
      v7 = v2;
      v6 = sub_1C4DFEA3C((void **)(a1 + 32), &v10);
      v2 = v7;
      v4 = v6;
      a2 = v8;
      a1 = v9;
    }
    else
    {
      *v3 = a2;
      v4 = v3 + 1;
    }
    *(_QWORD *)(a1 + 40) = v4;
    *(_BYTE *)(a2 + 44) |= 4u;
  }
  return (v2 & 4) == 0;
}

uint64_t llvm::MCAssembler::isThumbFunc(llvm::MCAssembler *this, const llvm::MCSymbol *a2)
{
  llvm::SmallPtrSetImplBase *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v4 = (llvm::MCAssembler *)((char *)this + 208);
  v5 = sub_1C477672C((uint64_t)this + 208, (uint64_t)a2);
  v6 = *((_QWORD *)this + 27);
  v7 = 224;
  if (v6 == *((_QWORD *)this + 26))
    v7 = 228;
  if (v5 != (_QWORD *)(v6 + 8 * *(unsigned int *)((char *)this + v7)))
    return 1;
  if ((*((_DWORD *)a2 + 2) & 0x1C00) != 0x800)
    return 0;
  *((_DWORD *)a2 + 2) |= 4u;
  v9 = *((_QWORD *)a2 + 3);
  v11 = 0;
  v12 = 0;
  v14 = 0;
  v13 = 0;
  v10 = llvm::MCExpr::evaluateAsRelocatableImpl(v9, &v11, 0, 0, 0, 0, 0);
  result = 0;
  if (v10 && !v12 && !v14)
  {
    if (!v11 || *(_WORD *)(v11 + 1))
      return 0;
    result = llvm::MCAssembler::isThumbFunc(this, *(const llvm::MCSymbol **)(v11 + 16));
    if ((_DWORD)result)
    {
      sub_1C4774094(v4, (uint64_t)a2);
      return 1;
    }
  }
  return result;
}

BOOL llvm::MCAssembler::isSymbolLinkerVisible(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 8) & 0x201) != 1;
}

const llvm::MCSymbol *llvm::MCAssembler::getAtom(llvm::MCAssembler *this, llvm::MCExpr **a2)
{
  const llvm::MCSymbol *v2;
  int v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = (const llvm::MCSymbol *)a2;
  v3 = *((_DWORD *)a2 + 2);
  if ((v3 & 0x201) != 1)
    return v2;
  v5 = (uint64_t)*a2;
  v6 = (unint64_t)*a2 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 0x1C00) == 0x800 && v6 == 0)
  {
    *((_DWORD *)a2 + 2) = v3 | 4;
    llvm::MCExpr::findAssociatedFragment(a2[3]);
    v5 = *(_QWORD *)v2 & 7 | v12;
    *(_QWORD *)v2 = v5;
    if (v12)
      goto LABEL_7;
    return 0;
  }
  if (!v6)
    return 0;
LABEL_7:
  v8 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 0xFFFFFFFFFFFFFFF8) == 0 && (*((_DWORD *)v2 + 2) & 0x1C00) == 0x800)
  {
    *((_DWORD *)v2 + 2) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v2 + 3));
    v5 = *(_QWORD *)v2 & 7 | v8;
    *(_QWORD *)v2 = v5;
  }
  if ((_UNKNOWN *)v8 == llvm::MCSymbol::AbsolutePseudoFragment)
    return 0;
  v9 = *(_QWORD *)(*(_QWORD *)this + 152);
  v10 = v5 & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 0xFFFFFFFFFFFFFFF8) == 0 && (*((_DWORD *)v2 + 2) & 0x1C00) == 0x800)
  {
    *((_DWORD *)v2 + 2) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v2 + 3));
    *(_QWORD *)v2 = *(_QWORD *)v2 & 7 | v10;
  }
  if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 24))(v9, *(_QWORD *)(v10 + 16)))
    return 0;
  v11 = *(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8;
  if (!v11 && (*((_DWORD *)v2 + 2) & 0x1C00) == 0x800)
  {
    *((_DWORD *)v2 + 2) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v2 + 3));
    *(_QWORD *)v2 = *(_QWORD *)v2 & 7 | v11;
  }
  return *(const llvm::MCSymbol **)(v11 + 24);
}

uint64_t llvm::MCAssembler::evaluateFixup(uint64_t a1, llvm::MCAsmLayout *a2, uint64_t a3, const llvm::MCFragment *a4, uint64_t *a5, _QWORD *a6, _BYTE *a7)
{
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  _QWORD v41[4];
  __int16 v42;

  v14 = *(_QWORD *)a3;
  v15 = *(_QWORD *)a1;
  *a6 = 0;
  *a7 = 0;
  llvm::MCExpr::evaluateAsRelocatableImpl(v14);
  if ((v16 & 1) == 0)
  {
    v39 = *(_QWORD *)(a3 + 16);
    v40 = "expected relocatable expression";
LABEL_38:
    v41[0] = v40;
    v42 = 259;
    llvm::MCContext::reportError(v15, v39, (uint64_t)v41);
    return 1;
  }
  v17 = a5[1];
  if (v17 && *(_WORD *)(v17 + 1))
  {
    v39 = *(_QWORD *)(a3 + 16);
    v40 = "unsupported subtraction of qualified symbol";
    goto LABEL_38;
  }
  v18 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a3 + 12));
  v19 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(v18 + 16) & 4) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, llvm::MCAsmLayout *, uint64_t, const llvm::MCFragment *, uint64_t *, _QWORD *, _BYTE *))(*(_QWORD *)v19 + 112))(v19, a1, a2, a3, a4, a5, a6, a7);
  v20 = *(_DWORD *)((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 80))(v19, *(unsigned int *)(a3 + 12))+ 16);
  v21 = *(_DWORD *)((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a3 + 12))+ 16);
  if ((v21 & 1) != 0)
  {
    if (a5[1])
      goto LABEL_9;
    v35 = *a5;
    if (!*a5)
    {
      v23 = 0;
      v27 = a5[2];
      goto LABEL_15;
    }
    if (*(_WORD *)(v35 + 1))
      goto LABEL_9;
    v36 = *(_QWORD *)(v35 + 16);
    v37 = *(_QWORD *)v36 & 0xFFFFFFFFFFFFFFF8;
    if (!v37 && (*(_DWORD *)(v36 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v36 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v36 + 24));
      *(_QWORD *)v36 = *(_QWORD *)v36 & 7 | v37;
    }
    if (!v37 || (v38 = *(_QWORD *)(a1 + 24)) == 0)
    {
LABEL_9:
      v23 = 0;
    }
    else if ((v20 & 8) != 0)
    {
      v23 = 1;
    }
    else
    {
      v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const llvm::MCFragment *, _QWORD, uint64_t))(*(_QWORD *)v38 + 48))(v38, a1, v36, a4, 0, 1);
    }
    v22 = *a5;
  }
  else
  {
    v22 = *a5;
    v23 = *(_OWORD *)a5 == 0;
  }
  *a6 = a5[2];
  if (!v22)
    goto LABEL_16;
  v25 = *(_QWORD *)(v22 + 16);
  v26 = *(_QWORD *)v25 & 0xFFFFFFFFFFFFFFF8;
  if (!v26 && (*(_DWORD *)(v25 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v25 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v25 + 24));
    *(_QWORD *)v25 = *(_QWORD *)v25 & 7 | v26;
  }
  if (!v26)
    goto LABEL_16;
  v41[0] = 0;
  sub_1C59415F0(a2, (uint64_t *)v25, 1, v41);
  v27 = *a6 + v41[0];
LABEL_15:
  *a6 = v27;
LABEL_16:
  v28 = a5[1];
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 16);
    v30 = *(_QWORD *)v29 & 0xFFFFFFFFFFFFFFF8;
    if (!v30 && (*(_DWORD *)(v29 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v29 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v29 + 24));
      *(_QWORD *)v29 = *(_QWORD *)v29 & 7 | v30;
    }
    if (v30)
    {
      v41[0] = 0;
      sub_1C59415F0(a2, (uint64_t *)v29, 1, v41);
      *a6 -= v41[0];
    }
  }
  v31 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a3 + 12));
  if ((v21 & 1) != 0)
  {
    v32 = *(_DWORD *)(v31 + 16);
    llvm::MCAsmLayout::ensureValid(a2, a4);
    LODWORD(v33) = *(_DWORD *)(a3 + 8) + *((_DWORD *)a4 + 8);
    if ((v32 & 2) != 0)
      v33 = v33 & 0xFFFFFFFC;
    else
      v33 = v33;
    *a6 -= v33;
  }
  if (!v23)
    return 0;
  v34 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8), a1, a3, a5);
  result = 1;
  if (v34)
  {
    *a7 = 1;
    return 0;
  }
  return result;
}

void llvm::MCAssembler::computeFragmentSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1C592A070()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

void sub_1C592A08C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::MCAsmLayout *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  char v9;

  llvm::MCAsmLayout::ensureValid(a4, (const llvm::MCFragment *)v4);
  v7 = __clz(*(unsigned int *)(v4 + 52));
  v8 = ((*(_DWORD *)(v4 + 32) + (1 << (63 - v7)) - 1) & -(int)(1 << (63 - v7))) - *(_DWORD *)(v4 + 32);
  *(_DWORD *)(v6 - 88) = v8;
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v4 + 16) + 8))(*(_QWORD *)(v4 + 16))
    || (*(_BYTE *)(v4 + 56) & 1) == 0
    || (v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8) + 96))(*(_QWORD *)(v5 + 8), v4, v6 - 88), v8 = *(_DWORD *)(v6 - 88), (v9 & 1) == 0))
  {
    if (v8 && (*(_BYTE *)(v4 + 56) & 1) != 0)
    {
      while (v8 % (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 176))(*(_QWORD *)(v5 + 8)))
      {
        v8 = *(_DWORD *)(v6 - 88) + *(_DWORD *)(v4 + 52);
        *(_DWORD *)(v6 - 88) = v8;
      }
    }
  }
  JUMPOUT(0x1C592A074);
}

void sub_1C592A160()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;

  *(_QWORD *)(v2 - 176) = 0;
  llvm::MCExpr::evaluateAsAbsolute(*(_QWORD *)(v0 + 64), (_QWORD *)(v2 - 176));
  if ((v3 & 1) != 0)
  {
    if (((*(_QWORD *)(v2 - 176) * *(unsigned __int8 *)(v0 + 51)) & 0x8000000000000000) == 0)
      goto LABEL_6;
    v4 = *v1;
    v5 = *(_QWORD *)(v0 + 72);
    v6 = "invalid number of bytes";
  }
  else
  {
    v4 = *v1;
    v5 = *(_QWORD *)(v0 + 72);
    v6 = "expected assembly-time absolute expression";
  }
  *(_QWORD *)(v2 - 88) = v6;
  *(_WORD *)(v2 - 56) = 259;
  llvm::MCContext::reportError(v4, v5, v2 - 88);
LABEL_6:
  JUMPOUT(0x1C592A074);
}

unint64_t llvm::MCAsmLayout::layoutFragment(llvm::MCAsmLayout *this, llvm::MCFragment *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t result;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;

  v4 = *((_QWORD *)a2 + 2);
  if (*(llvm::MCFragment **)(v4 + 112) == a2)
  {
    *((_BYTE *)a2 + 49) = 1;
    v6 = (char *)a2 + 49;
  }
  else
  {
    v5 = *(_QWORD *)a2;
    *((_BYTE *)a2 + 49) = 1;
    v6 = (char *)a2 + 49;
    if (v5)
    {
      v7 = *(_QWORD *)(v5 + 32);
      llvm::MCAssembler::computeFragmentSize(*(_QWORD *)this, (uint64_t)this, v5);
      *((_QWORD *)a2 + 4) = v8 + v7;
      v4 = *((_QWORD *)a2 + 2);
      goto LABEL_6;
    }
  }
  *((_QWORD *)a2 + 4) = 0;
LABEL_6:
  *v6 = 0;
  v9 = *((_QWORD *)this + 19);
  v26 = v4;
  v10 = *((_DWORD *)this + 42);
  if (!v10)
  {
    v24 = 0;
LABEL_27:
    v13 = sub_1C592C29C((uint64_t)this + 152, (uint64_t)&v26, &v26, v24);
    *v13 = v26;
    v13[1] = 0;
    goto LABEL_8;
  }
  v11 = v10 - 1;
  v12 = (v10 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  v13 = (_QWORD *)(v9 + 16 * v12);
  v14 = *v13;
  if (v4 != *v13)
  {
    v16 = 0;
    v17 = 1;
    while (v14 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v14 == -8192;
      if (v18)
        v16 = v13;
      v19 = v12 + v17++;
      v12 = v19 & v11;
      v13 = (_QWORD *)(v9 + 16 * (v19 & v11));
      v14 = *v13;
      if (v4 == *v13)
        goto LABEL_8;
    }
    if (v16)
      v24 = v16;
    else
      v24 = v13;
    goto LABEL_27;
  }
LABEL_8:
  v13[1] = a2;
  result = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 496) && *((_BYTE *)a2 + 50))
  {
    llvm::MCAssembler::computeFragmentSize(result, (uint64_t)this, (uint64_t)a2);
    v21 = v20;
    v22 = *(_QWORD *)this;
    if ((*(_BYTE *)(*(_QWORD *)this + 500) & 1) != 0 || v21 <= *(unsigned int *)(v22 + 496))
    {
      v23 = *((_QWORD *)a2 + 4);
      result = llvm::computeBundlePadding(v22, (uint64_t)a2, v23, v21);
      if (result < 0x100)
      {
        *((_BYTE *)a2 + 52) = result;
        *((_QWORD *)a2 + 4) = result + v23;
        return result;
      }
      v25 = "Padding cannot exceed 255 bytes";
    }
    else
    {
      v25 = "Fragment can't be larger than a bundle size";
    }
    llvm::report_fatal_error((llvm *)v25, (const char *)1);
  }
  return result;
}

uint64_t llvm::MCAssembler::registerSymbol(uint64_t result, uint64_t a2, BOOL *a3)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(a2 + 8);
  if (a3)
    *a3 = (*(_DWORD *)(a2 + 8) & 8) == 0;
  if ((v3 & 8) == 0)
  {
    *(_DWORD *)(a2 + 8) |= 8u;
    v7 = a2;
    v4 = *(_QWORD **)(result + 64);
    if ((unint64_t)v4 >= *(_QWORD *)(result + 72))
    {
      v6 = result;
      v5 = sub_1C4DFEA3C((void **)(result + 56), &v7);
      result = v6;
    }
    else
    {
      *v4 = a2;
      v5 = v4 + 1;
    }
    *(_QWORD *)(result + 64) = v5;
  }
  return result;
}

uint64_t llvm::MCAssembler::writeFragmentPadding(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;
  uint64_t v12[4];
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16[5];
  _BYTE v17[40];

  v4 = *(unsigned __int8 *)(a3 + 52);
  if (*(_BYTE *)(a3 + 52))
  {
    v5 = result;
    v7 = *(_QWORD *)(a3 + 56);
    if (*(_BYTE *)(a3 + 51))
    {
      v8 = *(_DWORD *)(result + 496);
      v9 = v4 + a4 - v8;
      if (v4 + a4 > v8)
      {
        if (((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(result + 8) + 192))(*(_QWORD *)(result + 8), a2, v9, v7) & 1) == 0)
        {
          v14 = "unable to write NOP sequence of ";
          v15 = 259;
          v13 = 264;
          LODWORD(v12[0]) = v9;
          goto LABEL_9;
        }
        v4 -= v9;
      }
    }
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(v5 + 8) + 192))(*(_QWORD *)(v5 + 8), a2, v4, v7);
    if ((result & 1) != 0)
      return result;
    v14 = "unable to write NOP sequence of ";
    v15 = 259;
    v13 = 264;
    LODWORD(v12[0]) = v4;
LABEL_9:
    sub_1C6131AAC((uint64_t *)&v14, v12, (uint64_t)v16);
    v10 = " bytes";
    v11 = 259;
    sub_1C6131AAC(v16, (uint64_t *)&v10, (uint64_t)v17);
    llvm::report_fatal_error((uint64_t)v17, 1);
  }
  return result;
}

void llvm::MCAssembler::writeSectionData(llvm::MCAssembler *this, llvm::raw_ostream *a2, const llvm::MCSection *a3, const llvm::MCAsmLayout *a4)
{
  uint64_t i;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  std::string::size_type v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  const char *v26;
  size_t v27;
  llvm::raw_ostream *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string::size_type v32;
  size_t j;
  char v34;
  char *v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64x2_t v41;
  char v42;
  int64x2_t v43;
  int32x2_t v44;
  char v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  size_t v50;
  size_t v51;
  size_t v52;
  void *v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  std::string::size_type size;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  std::string *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  __int16 v69;
  size_t *v70;
  __int16 v71;
  std::string v72;
  __int16 v73;
  std::string v74;
  __int16 v75;
  std::string v76;
  __int16 v77;
  std::string v78;
  __int16 v79;
  std::string v80;
  __int16 v81;
  __int128 v82;
  __int128 v83;
  __int16 v84;
  size_t v85;
  size_t v86;
  char __src[16];
  const char *v88;
  __int16 v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(const llvm::MCSection *))(*(_QWORD *)a3 + 16))(a3))
  {
    for (i = *((_QWORD *)a3 + 14);
          (const llvm::MCSection *)i != (const llvm::MCSection *)((char *)a3 + 104);
          i = *(_QWORD *)(i + 8))
    {
      if (*(_BYTE *)(i + 48) == 1)
      {
        if (*(_DWORD *)(i + 128))
        {
          v12 = *(_QWORD *)this;
          v13 = (*(uint64_t (**)(const llvm::MCSection *))(*(_QWORD *)a3 + 24))(a3);
          v81 = 773;
          v80.__r_.__value_.__r.__words[0] = v13;
          v80.__r_.__value_.__l.__size_ = v14;
          v80.__r_.__value_.__r.__words[2] = (std::string::size_type)" section '";
          *(_QWORD *)&v82 = &v80;
          v83 = *(_OWORD *)((char *)a3 + 200);
          v84 = 1282;
          *(_QWORD *)__src = &v82;
          v88 = "' cannot have fixups";
          v89 = 770;
          llvm::MCContext::reportError(v12, 0, (uint64_t)__src);
        }
        v9 = *(unsigned int *)(i + 72);
        if (*(_DWORD *)(i + 72))
        {
          v10 = *(unsigned __int8 **)(i + 64);
          while (!*v10++)
          {
            if (!--v9)
              goto LABEL_10;
          }
          v15 = *(_QWORD *)this;
          v16 = (*(uint64_t (**)(const llvm::MCSection *))(*(_QWORD *)a3 + 24))(a3);
          v81 = 773;
          v80.__r_.__value_.__r.__words[0] = v16;
          v80.__r_.__value_.__l.__size_ = v17;
          v80.__r_.__value_.__r.__words[2] = (std::string::size_type)" section '";
          *(_QWORD *)&v82 = &v80;
          v83 = *(_OWORD *)((char *)a3 + 200);
          v84 = 1282;
          *(_QWORD *)__src = &v82;
          v88 = "' cannot have non-zero initializers";
          v89 = 770;
          llvm::MCContext::reportError(v15, 0, (uint64_t)__src);
        }
      }
LABEL_10:
      ;
    }
  }
  else
  {
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)a2 + 80))(a2);
    v18 = (char *)a3 + 104;
    v19 = *((_QWORD *)a3 + 14);
    if ((char *)v19 != v18)
    {
      while (1)
      {
        v86 = 0;
        llvm::MCAssembler::computeFragmentSize((uint64_t)this, (uint64_t)a4, v19);
        v86 = v20;
        v21 = *(_DWORD *)(*((_QWORD *)this + 1) + 8);
        v22 = *(unsigned __int8 *)(v19 + 48);
        v23 = v22 > 0xE;
        v24 = (1 << v22) & 0x41A6;
        if (!v23 && v24 != 0)
          llvm::MCAssembler::writeFragmentPadding((uint64_t)this, (uint64_t)a2, v19, v20);
        (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)a2 + 80))(a2);
        switch(*(_BYTE *)(v19 + 48))
        {
          case 0:
            v36 = *(unsigned int *)(v19 + 72);
            v85 = v86 / v36;
            if (v86 / v36 * v36 != v86)
            {
              v76.__r_.__value_.__r.__words[0] = (std::string::size_type)"undefined .align directive, value size '";
              v77 = 259;
              v75 = 264;
              LODWORD(v74.__r_.__value_.__l.__data_) = v36;
              sub_1C6131AAC((uint64_t *)&v76, (uint64_t *)&v74, (uint64_t)&v78);
              v72.__r_.__value_.__r.__words[0] = (std::string::size_type)"' is not a divisor of padding size '";
              v73 = 259;
              sub_1C6131AAC((uint64_t *)&v78, (uint64_t *)&v72, (uint64_t)&v80);
              v71 = 268;
              v70 = &v86;
              sub_1C6131AAC((uint64_t *)&v80, (uint64_t *)&v70, (uint64_t)&v82);
              v68 = "'";
              v69 = 259;
              v64 = (std::string *)&v68;
              goto LABEL_102;
            }
            if ((*(_BYTE *)(v19 + 56) & 1) != 0)
            {
              if (((*(uint64_t (**)(_QWORD, llvm::raw_ostream *, size_t, _QWORD))(**((_QWORD **)this + 1)
                                                                                           + 192))(*((_QWORD *)this + 1), a2, v86 / v36, *(_QWORD *)(v19 + 80)) & 1) == 0)
              {
                v80.__r_.__value_.__r.__words[0] = (std::string::size_type)"unable to write nop sequence of ";
                v81 = 259;
                v79 = 268;
                v65 = (std::string *)&v85;
LABEL_101:
                v78.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
                sub_1C6131AAC((uint64_t *)&v80, (uint64_t *)&v78, (uint64_t)&v82);
                v76.__r_.__value_.__r.__words[0] = (std::string::size_type)" bytes";
                v77 = 259;
                v64 = &v76;
LABEL_102:
                sub_1C6131AAC((uint64_t *)&v82, (uint64_t *)v64, (uint64_t)__src);
                llvm::report_fatal_error((uint64_t)__src, 1);
              }
            }
            else if (v86 >= v36)
            {
              __asm { BR              X9 }
            }
LABEL_23:
            v19 = *(_QWORD *)(v19 + 8);
            if ((char *)v19 == v18)
              return;
            break;
          case 1:
          case 2:
          case 5:
          case 7:
          case 8:
          case 9:
          case 0xD:
          case 0xE:
            v26 = *(const char **)(v19 + 64);
            v27 = *(_QWORD *)(v19 + 72);
            goto LABEL_21;
          case 3:
            v37 = *(unsigned __int8 *)(v19 + 51);
            if (!*(_BYTE *)(v19 + 51))
            {
              v40 = 0;
LABEL_68:
              v49 = 0;
              do
              {
                __src[v40 + v49] = __src[v49];
                ++v49;
              }
              while (v40 + v49 != 16);
              goto LABEL_70;
            }
            v38 = 0;
            v39 = *(_QWORD *)(v19 + 56);
            v40 = *(unsigned __int8 *)(v19 + 51);
            v41 = (uint64x2_t)vdupq_n_s64(v37 - 1);
            v42 = v37 - 1;
            v43 = (int64x2_t)xmmword_1C64632D0;
            do
            {
              v44 = vmovn_s64((int64x2_t)vcgeq_u64(v41, (uint64x2_t)v43));
              if ((v44.i8[0] & 1) != 0)
              {
                if (v21 == 1)
                  v45 = v38;
                else
                  v45 = v42;
                __src[v38] = v39 >> (8 * v45);
              }
              if ((v44.i8[4] & 1) != 0)
              {
                v46 = (v38 ^ 0xFE) + v37;
                if (v21 == 1)
                  v46 = v38 + 1;
                __src[v38 + 1] = v39 >> (8 * v46);
              }
              v38 += 2;
              v43 = vaddq_s64(v43, vdupq_n_s64(2uLL));
              v42 -= 2;
            }
            while ((((_WORD)v37 + 1) & 0x1FE) != v38);
            if (v37 <= 0xF)
              goto LABEL_68;
LABEL_70:
            v50 = 0x10 / v37 * v37;
            v51 = v86;
            if (v86 >= v50)
            {
              v52 = v86 / v50;
              do
              {
                v53 = (void *)*((_QWORD *)a2 + 4);
                if (*((_QWORD *)a2 + 3) - (_QWORD)v53 >= v50)
                {
                  if ((_DWORD)v50 != 0)
                  {
                    memcpy(v53, __src, v50);
                    *((_QWORD *)a2 + 4) += v50;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(a2, __src, v50);
                }
                --v52;
              }
              while (v52);
              v51 = v86;
            }
            v27 = v51 % v50;
            if (v51 % v50)
            {
              v26 = __src;
LABEL_21:
              v28 = a2;
LABEL_22:
              llvm::raw_ostream::write(v28, v26, v27);
            }
            goto LABEL_23;
          case 4:
            v30 = *(_QWORD *)(v19 + 56);
            v29 = *(_QWORD *)(v19 + 64);
            v31 = (*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 184))(*((_QWORD *)this + 1), *(_QWORD *)(v19 + 80));
            if (v29 > v31)
            {
              v66 = *(_QWORD *)(v19 + 72);
              v67 = *(_QWORD *)this;
              std::to_string(&v74, v29);
              v54 = std::string::insert(&v74, 0, "illegal NOP size ");
              v55 = v54->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
              v76.__r_.__value_.__r.__words[2] = v55;
              v54->__r_.__value_.__l.__size_ = 0;
              v54->__r_.__value_.__r.__words[2] = 0;
              v54->__r_.__value_.__r.__words[0] = 0;
              v56 = std::string::append(&v76, ". (expected within [0, ");
              v57 = v56->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v78.__r_.__value_.__l.__data_ = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
              v78.__r_.__value_.__r.__words[2] = v57;
              v56->__r_.__value_.__l.__size_ = 0;
              v56->__r_.__value_.__r.__words[2] = 0;
              v56->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v72, v31);
              if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v58 = &v72;
              else
                v58 = (std::string *)v72.__r_.__value_.__r.__words[0];
              if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = *((_BYTE *)&v72.__r_.__value_.__s + 23) & 0x7F;
              else
                size = v72.__r_.__value_.__l.__size_;
              v60 = std::string::append(&v78, (const std::string::value_type *)v58, size);
              v61 = v60->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
              v80.__r_.__value_.__r.__words[2] = v61;
              v60->__r_.__value_.__l.__size_ = 0;
              v60->__r_.__value_.__r.__words[2] = 0;
              v60->__r_.__value_.__r.__words[0] = 0;
              v62 = std::string::append(&v80, "])");
              v63 = v62->__r_.__value_.__r.__words[2];
              v82 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
              *(_QWORD *)&v83 = v63;
              v62->__r_.__value_.__l.__size_ = 0;
              v62->__r_.__value_.__r.__words[2] = 0;
              v62->__r_.__value_.__r.__words[0] = 0;
              v89 = 260;
              *(_QWORD *)__src = &v82;
              llvm::MCContext::reportError(v67, v66, (uint64_t)__src);
              if (SBYTE7(v83) < 0)
                operator delete((void *)v82);
              if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v80.__r_.__value_.__l.__data_);
              if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v72.__r_.__value_.__l.__data_);
              if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v78.__r_.__value_.__l.__data_);
              if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v76.__r_.__value_.__l.__data_);
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v74.__r_.__value_.__l.__data_);
              v29 = v31;
            }
            if (!v29)
              v29 = v31;
            if (!v30)
              goto LABEL_23;
            while (1)
            {
              v32 = v29 >= v30 ? v30 : v29;
              v74.__r_.__value_.__r.__words[0] = v32;
              if (((*(uint64_t (**)(_QWORD, llvm::raw_ostream *, std::string::size_type, _QWORD))(**((_QWORD **)this + 1) + 192))(*((_QWORD *)this + 1), a2, v32, *(_QWORD *)(v19 + 80)) & 1) == 0)break;
              v30 -= v32;
              if (!v30)
                goto LABEL_23;
            }
            v80.__r_.__value_.__r.__words[0] = (std::string::size_type)"unable to write nop sequence of the remaining ";
            v81 = 259;
            v79 = 268;
            v65 = &v74;
            goto LABEL_101;
          case 6:
            for (j = v86; j; --j)
            {
              v34 = *(_BYTE *)(v19 + 51);
              v35 = (char *)*((_QWORD *)a2 + 4);
              if ((unint64_t)v35 >= *((_QWORD *)a2 + 3))
              {
                llvm::raw_ostream::write(a2, v34);
              }
              else
              {
                *((_QWORD *)a2 + 4) = v35 + 1;
                *v35 = v34;
              }
            }
            goto LABEL_23;
          case 0xA:
            if (((*(uint64_t (**)(_QWORD, llvm::raw_ostream *, size_t, _QWORD))(**((_QWORD **)this + 1)
                                                                                         + 192))(*((_QWORD *)this + 1), a2, v86, *(_QWORD *)(v19 + 72)) & 1) != 0)goto LABEL_23;
            v80.__r_.__value_.__r.__words[0] = (std::string::size_type)"unable to write nop sequence of ";
            v81 = 259;
            v79 = 268;
            v65 = (std::string *)&v86;
            goto LABEL_101;
          case 0xB:
            v47 = *(_DWORD *)(*(_QWORD *)(v19 + 56) + 16);
            v48 = bswap32(v47);
            if ((v21 - 1) >= 2)
              v47 = v48;
            *(_DWORD *)__src = v47;
            v26 = __src;
            v28 = a2;
            v27 = 4;
            goto LABEL_22;
          case 0xC:
            v26 = *(const char **)(v19 + 80);
            v27 = *(_QWORD *)(v19 + 88);
            goto LABEL_21;
          default:
            goto LABEL_23;
        }
      }
    }
  }
}

double llvm::MCAssembler::handleFixup@<D0>(uint64_t a1@<X0>, llvm::MCAsmLayout *a2@<X1>, const llvm::MCFragment *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v10;
  double result;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[2];
  char v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v17 = 0uLL;
  DWORD2(v18) = 0;
  *(_QWORD *)&v18 = 0;
  v16 = 0;
  v15 = 0;
  v10 = llvm::MCAssembler::evaluateFixup(a1, a2, a4, a3, (uint64_t *)&v17, &v16, &v15);
  if ((v10 & 1) == 0)
  {
    v13 = *(_QWORD *)(a1 + 24);
    v14[0] = v17;
    v14[1] = v18;
    (*(void (**)(uint64_t, uint64_t, llvm::MCAsmLayout *, const llvm::MCFragment *, uint64_t, _OWORD *, uint64_t *))(*(_QWORD *)v13 + 32))(v13, a1, a2, a3, a4, v14, &v16);
  }
  result = *(double *)&v17;
  v12 = v18;
  *(_OWORD *)a5 = v17;
  *(_OWORD *)(a5 + 16) = v12;
  *(_QWORD *)(a5 + 32) = v16;
  *(_BYTE *)(a5 + 40) = v10;
  return result;
}

uint64_t llvm::MCAssembler::layout(llvm::MCSection ***this, llvm::MCAsmLayout *a2)
{
  llvm::MCSection *v2;
  llvm::MCAssembler *v4;
  llvm::MCSection **v5;
  llvm::MCSection **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  llvm::MCSection **v15;
  llvm::MCSection **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t j;
  uint64_t *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::MCSection *v32;
  llvm::MCAsmLayout *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  _BYTE v44[20];
  _OWORD v45[2];
  _OWORD v46[2];
  char v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;

  v4 = (llvm::MCAssembler *)this;
  v5 = this[4];
  v6 = this[5];
  if (v5 != v6)
  {
    v7 = 0;
    do
    {
      v2 = *v5;
      if (*((llvm::MCSection **)*v5 + 13) == (llvm::MCSection *)((char *)*v5 + 104))
      {
        v37 = operator new();
        v38 = llvm::MCFragment::MCFragment(v37, 1, 0, (uint64_t)v2);
        *(_WORD *)(v38 + 51) = 0;
        *(_QWORD *)(v38 + 56) = 0;
        *(_QWORD *)(v38 + 64) = v38 + 88;
        *(_OWORD *)(v38 + 72) = xmmword_1C677F680;
        *(_QWORD *)(v38 + 120) = v38 + 136;
        *(_QWORD *)(v38 + 128) = 0x400000000;
      }
      *((_DWORD *)v2 + 7) = v7++;
      ++v5;
    }
    while (v5 != v6);
  }
  v8 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *((_QWORD *)a2 + 1);
    do
    {
      v11 = *(_QWORD *)(v10 + 8 * v9);
      *(_DWORD *)(v11 + 32) = v9;
      v12 = v11 + 104;
      v13 = *(_QWORD *)(v11 + 112);
      if (v13 != v12)
      {
        v14 = 0;
        do
        {
          *(_DWORD *)(v13 + 40) = v14++;
          v13 = *(_QWORD *)(v13 + 8);
        }
        while (v13 != v12);
      }
      ++v9;
    }
    while (v9 != v8);
  }
  v15 = (llvm::MCSection **)*((_QWORD *)v4 + 4);
  v16 = (llvm::MCSection **)*((_QWORD *)v4 + 5);
  for (i = (uint64_t)v4; v15 != v16; v16 = *(llvm::MCSection ***)(i + 40))
  {
    v17 = 0;
    do
    {
      v2 = *v15;
      v18 = v17;
      do
      {
        v17 = v18;
        result = llvm::MCAssembler::layoutSectionOnce(v4, a2, v2);
        v18 = 1;
      }
      while ((result & 1) != 0);
      ++v15;
    }
    while (v15 != v16);
    if ((v17 & 1) == 0)
      break;
    if (*(_BYTE *)(*(_QWORD *)v4 + 1960))
      return result;
    v4 = (llvm::MCAssembler *)i;
    v20 = *(uint64_t **)(i + 32);
    v36 = *(uint64_t **)(i + 40);
    if (v20 == v36)
      break;
    do
    {
      v21 = *v20++;
      llvm::MCAsmLayout::invalidateFragmentsFrom((uint64_t)a2, *(uint64_t **)(v21 + 112));
    }
    while (v20 != v36);
    v15 = *(llvm::MCSection ***)(i + 32);
  }
  llvm::MCAssembler::finishLayout(v4, a2);
  result = (*(uint64_t (**)(_QWORD, llvm::MCAssembler *, llvm::MCAsmLayout *))(**((_QWORD **)v4 + 3) + 24))(*((_QWORD *)v4 + 3), v4, a2);
  v22 = (uint64_t *)*((_QWORD *)v4 + 4);
  v39 = (uint64_t *)*((_QWORD *)v4 + 5);
  if (v22 != v39)
  {
    do
    {
      v23 = *v22 + 104;
      v40 = v22;
      v41 = *v22;
      for (j = *(_QWORD *)(*v22 + 112); j != v23; j = *(_QWORD *)(j + 8))
      {
        switch(*(_BYTE *)(j + 48))
        {
          case 0:
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
            if ((_DWORD)result)
            {
              if ((*(_BYTE *)(j + 56) & 1) != 0)
                result = (*(uint64_t (**)(_QWORD, uint64_t, llvm::MCAsmLayout *, uint64_t))(**(_QWORD **)(i + 8)
                                                                                                  + 104))(*(_QWORD *)(i + 8), i, a2, j);
            }
            continue;
          case 1:
            v25 = (uint64_t *)(j + 120);
            v26 = (unsigned int *)(j + 128);
            goto LABEL_26;
          case 5:
            v25 = (uint64_t *)(j + 96);
            v26 = (unsigned int *)(j + 104);
LABEL_26:
            v43 = *(_QWORD *)(j + 56);
            goto LABEL_27;
          case 7:
          case 8:
          case 0xE:
            v43 = 0;
            v25 = (uint64_t *)(j + 96);
            v26 = (unsigned int *)(j + 104);
            goto LABEL_27;
          case 0xD:
            v43 = 0;
            v25 = (uint64_t *)(j + 120);
            v26 = (unsigned int *)(j + 128);
LABEL_27:
            v27 = *v26;
            if ((_DWORD)v27)
            {
              v28 = *v25;
              v29 = *(_QWORD *)(j + 64);
              v30 = *(_QWORD *)(j + 72);
              v31 = 24 * v27;
              do
              {
                v32 = v2;
                memset(v45, 0, 28);
                v49 = 0uLL;
                DWORD2(v50) = 0;
                *(_QWORD *)&v50 = 0;
                v48 = 0;
                v47 = 0;
                v33 = a2;
                v34 = llvm::MCAssembler::evaluateFixup(i, a2, v28, (const llvm::MCFragment *)j, (uint64_t *)&v49, &v48, &v47);
                if ((v34 & 1) == 0)
                {
                  v35 = *(_QWORD *)(i + 24);
                  v46[0] = v49;
                  v46[1] = v50;
                  (*(void (**)(uint64_t, uint64_t, llvm::MCAsmLayout *, uint64_t, uint64_t, _OWORD *, uint64_t *))(*(_QWORD *)v35 + 32))(v35, i, v33, j, v28, v46, &v48);
                }
                *(_DWORD *)v44 = HIDWORD(v49);
                *(_OWORD *)&v44[4] = v50;
                v45[0] = v49;
                *(_OWORD *)((char *)v45 + 12) = *(_OWORD *)v44;
                result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(i + 8) + 120))(*(_QWORD *)(i + 8), i, v28, v45, v29, v30, v48, v34, v43);
                v28 += 24;
                v31 -= 24;
                a2 = v33;
                v2 = v32;
              }
              while (v31);
            }
            break;
          default:
            continue;
        }
      }
      v22 = v40 + 1;
    }
    while (v40 + 1 != v39);
  }
  return result;
}

uint64_t llvm::MCAssembler::layoutOnce(llvm::MCAssembler *this, llvm::MCAsmLayout *a2)
{
  llvm::MCSection **v2;
  llvm::MCSection **v3;
  uint64_t v6;
  llvm::MCSection *v7;
  uint64_t v8;
  char v9;

  v2 = (llvm::MCSection **)*((_QWORD *)this + 4);
  v3 = (llvm::MCSection **)*((_QWORD *)this + 5);
  if (v2 == v3)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = *v2;
      v8 = v6;
      do
      {
        v6 = v8;
        v9 = llvm::MCAssembler::layoutSectionOnce(this, a2, v7);
        v8 = 1;
      }
      while ((v9 & 1) != 0);
      ++v2;
    }
    while (v2 != v3);
  }
  return v6 & 1;
}

uint64_t llvm::MCAssembler::finishLayout(llvm::MCAssembler *this, llvm::MCAsmLayout *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 8 * v4;
    do
    {
      v7 = *(_QWORD *)(*((_QWORD *)a2 + 1) + v5);
      llvm::MCAsmLayout::ensureValid(a2, *(const llvm::MCFragment **)(v7 + 104));
      llvm::MCAssembler::computeFragmentSize((uint64_t)this, (uint64_t)a2, *(_QWORD *)(v7 + 104));
      v5 += 8;
    }
    while (v6 != v5);
  }
  return (*(uint64_t (**)(_QWORD, llvm::MCAssembler *, llvm::MCAsmLayout *))(**((_QWORD **)this + 1) + 200))(*((_QWORD *)this + 1), this, a2);
}

void llvm::MCAssembler::Finish(llvm::MCAssembler *this)
{
  _BYTE v2[8];
  void *v3;
  _QWORD v4[20];

  v4[19] = *MEMORY[0x1E0C80C00];
  llvm::MCAsmLayout::MCAsmLayout((llvm::MCAsmLayout *)v2, this);
  llvm::MCAssembler::layout((llvm::MCSection ***)this, (llvm::MCAsmLayout *)v2);
  (*(void (**)(_QWORD, llvm::MCAssembler *, _BYTE *))(**((_QWORD **)this + 3) + 80))(*((_QWORD *)this + 3), this, v2);
  MEMORY[0x1CAA32FB4](v4[16], 8);
  if (v3 != v4)
    free(v3);
}

uint64_t llvm::MCAssembler::fixupNeedsRelaxation(uint64_t a1, uint64_t a2, const llvm::MCFragment *a3, llvm::MCAsmLayout *a4)
{
  uint64_t v8;
  BOOL v9;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13[3];
  int v14;

  memset(v13, 0, sizeof(v13));
  v14 = 0;
  v12 = 0;
  v11 = 0;
  v8 = llvm::MCAssembler::evaluateFixup(a1, a4, a2, a3, v13, &v12, &v11);
  if (v13[0] && (*(_WORD *)(v13[0] + 1) == 30 ? (v9 = *(_DWORD *)(a2 + 12) == 1) : (v9 = 0), v9))
    return 0;
  else
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const llvm::MCFragment *, llvm::MCAsmLayout *, _QWORD))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), a2, v8, v12, a3, a4, v11);
}

uint64_t llvm::MCAssembler::fragmentNeedsRelaxation(uint64_t a1, uint64_t a2, llvm::MCAsmLayout *a3)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), a2 + 136, *(_QWORD *)(a2 + 56));
  if ((_DWORD)result)
  {
    v7 = *(_DWORD *)(a2 + 104);
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 96);
      v9 = 24 * v7 - 24;
      do
      {
        result = llvm::MCAssembler::fixupNeedsRelaxation(a1, v8, (const llvm::MCFragment *)a2, a3);
        if ((result & 1) != 0)
          break;
        v8 += 24;
        v10 = v9;
        v9 -= 24;
      }
      while (v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::MCAssembler::relaxInstruction(uint64_t a1, llvm::MCAsmLayout *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v6;
  _QWORD v7[2];
  uint64_t v8;
  int v9;
  void *v10;
  __int128 v11;
  _BYTE v12[256];
  void *v13[2];
  _BYTE v14[96];
  __int128 v15;
  void *v16[2];
  _BYTE v17[128];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  result = llvm::MCAssembler::fragmentNeedsRelaxation(a1, a3, a2);
  if ((_DWORD)result)
  {
    v6 = result;
    v15 = *(_OWORD *)(a3 + 136);
    v16[0] = v17;
    v16[1] = (void *)0x800000000;
    if (*(_DWORD *)(a3 + 160))
      sub_1C592C150((uint64_t)v16, a3 + 152);
    v18 = *(_BYTE *)(a3 + 296);
    (*(void (**)(_QWORD, __int128 *, _QWORD))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8), &v15, *(_QWORD *)(a3 + 56));
    v13[0] = v14;
    v13[1] = (void *)0x400000000;
    v10 = v12;
    v11 = xmmword_1C64638F0;
    sub_1C613932C((uint64_t)v7, (uint64_t)&v10);
    (*(void (**)(_QWORD, __int128 *, _QWORD *, void **, _QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), &v15, v7, v13, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 136) = v15;
    sub_1C592C150(a3 + 152, (uint64_t)v16);
    *(_BYTE *)(a3 + 296) = v18;
    sub_1C50502AC(a3 + 64, (uint64_t)&v10);
    sub_1C62B5198(a3 + 96, (uint64_t)v13);
    v7[0] = off_1E81A6E70;
    if (v9 == 1 && v8)
      MEMORY[0x1CAA32F9C](v8, 0x1000C8077774924);
    if (v10 != v12)
      free(v10);
    if (v13[0] != v14)
      free(v13[0]);
    if (v16[0] != v17)
      free(v16[0]);
    return v6;
  }
  return result;
}

llvm::raw_ostream *sub_1C592B860(llvm::raw_ostream *result, llvm::raw_ostream *this, unsigned int a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  char *v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  char *v18;
  _BYTE *v19;

  v5 = (uint64_t)result;
  v6 = 1;
  do
  {
    v7 = v5;
    v8 = v6;
    v9 = v5 & 0x7F;
    v5 >>= 7;
    v10 = ((unint64_t)v7 >> 6) & 1;
    if (v5 != -1)
      LODWORD(v10) = 0;
    if ((unint64_t)v7 >= 0x40)
      v11 = v10;
    else
      v11 = 1;
    if ((v11 & (v8 >= a3)) != 0)
      v12 = 0;
    else
      v12 = 0x80;
    v13 = v12 | v9;
    v14 = (char *)*((_QWORD *)this + 4);
    if ((unint64_t)v14 >= *((_QWORD *)this + 3))
    {
      result = llvm::raw_ostream::write(this, v13);
    }
    else
    {
      *((_QWORD *)this + 4) = v14 + 1;
      *v14 = v13;
    }
    v6 = v8 + 1;
  }
  while (!v11);
  if (v8 < a3)
  {
    v15 = (v7 >> 63) & 0x7F;
    if (v8 < a3 - 1)
    {
      v16 = v15 | 0x80;
      v17 = a3 - v6;
      do
      {
        v18 = (char *)*((_QWORD *)this + 4);
        if ((unint64_t)v18 >= *((_QWORD *)this + 3))
        {
          result = llvm::raw_ostream::write(this, v16);
        }
        else
        {
          *((_QWORD *)this + 4) = v18 + 1;
          *v18 = v16;
        }
        --v17;
      }
      while (v17);
    }
    v19 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v19 >= *((_QWORD *)this + 3))
    {
      return llvm::raw_ostream::write(this, v15);
    }
    else
    {
      *((_QWORD *)this + 4) = v19 + 1;
      *v19 = v15;
    }
  }
  return result;
}

uint64_t sub_1C592B9A0(unint64_t a1, llvm::raw_ostream *this, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  char v9;
  char v10;
  char *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;

  v6 = 1;
  do
  {
    v7 = v6;
    v8 = v6 < a3 || a1 > 0x7F;
    if (v8)
      v9 = 0x80;
    else
      v9 = 0;
    v10 = v9 & 0x80 | a1 & 0x7F;
    v11 = (char *)*((_QWORD *)this + 4);
    if ((unint64_t)v11 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, v10);
    }
    else
    {
      *((_QWORD *)this + 4) = v11 + 1;
      *v11 = v10;
    }
    v6 = v7 + 1;
    v8 = a1 > 0x7F;
    a1 >>= 7;
  }
  while (v8);
  v12 = v7;
  if (v7 < a3)
  {
    v13 = a3 - 1;
    if (v7 < a3 - 1)
    {
      v14 = a3 - v6;
      do
      {
        v15 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v15 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 128);
        }
        else
        {
          *((_QWORD *)this + 4) = v15 + 1;
          *v15 = 0x80;
        }
        --v14;
      }
      while (v14);
      LODWORD(v12) = v13;
    }
    v16 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v16 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 0);
    }
    else
    {
      *((_QWORD *)this + 4) = v16 + 1;
      *v16 = 0;
    }
    return (v12 + 1);
  }
  return v12;
}

uint64_t llvm::MCAssembler::relaxBoundaryAlign(uint64_t a1, llvm::MCAsmLayout *a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  if (!*(_QWORD *)(a3 + 56))
    return 0;
  llvm::MCAsmLayout::ensureValid(a2, (const llvm::MCFragment *)a3);
  v6 = *(_QWORD *)(a3 + 32);
  v7 = *(_QWORD **)(a3 + 56);
  if (v7 == (_QWORD *)a3)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      llvm::MCAssembler::computeFragmentSize(a1, (uint64_t)a2, (uint64_t)v7);
      if (*(_QWORD **)(v7[2] + 112) == v7)
        v7 = 0;
      else
        v7 = (_QWORD *)*v7;
      v8 += v9;
    }
    while (v7 != (_QWORD *)a3);
  }
  v10 = *(_BYTE *)(a3 + 51);
  v11 = v6 >> v10;
  v12 = (v8 + v6 - 1) >> v10;
  v13 = (v8 + v6) & ~(-1 << v10);
  v14 = ((v6 + (1 << v10) - 1) & -(1 << v10)) - v6;
  if (v11 == v12 && v13 != 0)
    v14 = 0;
  if (v14 == *(_QWORD *)(a3 + 64))
    return 0;
  *(_QWORD *)(a3 + 64) = v14;
  llvm::MCAsmLayout::invalidateFragmentsFrom((uint64_t)a2, (uint64_t *)a3);
  return 1;
}

BOOL llvm::MCAssembler::relaxDwarfLineAddr(uint64_t a1, llvm::raw_ostream ***a2, uint64_t a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  _QWORD v11[2];
  uint64_t v12;
  int v13;
  unint64_t v14;
  char v15;

  v15 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t, llvm::raw_ostream ***, char *))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8), a3, a2, &v15))
  {
    return v15 != 0;
  }
  v6 = **a2;
  v7 = *(_QWORD *)(a3 + 72);
  v14 = 0;
  llvm::MCExpr::evaluateAsAbsolute(*(_QWORD *)(a3 + 144), &v14);
  v8 = *(_QWORD *)(a3 + 136);
  *(_QWORD *)(a3 + 72) = 0;
  sub_1C613932C((uint64_t)v11, a3 + 64);
  *(_DWORD *)(a3 + 104) = 0;
  llvm::MCDwarfLineAddr::Encode(v6, *(unsigned __int16 *)(a1 + 200) | ((unint64_t)*(unsigned __int8 *)(a1 + 202) << 16), v8, v14, (llvm::raw_ostream *)v11);
  v9 = v7 != *(_QWORD *)(a3 + 72);
  v11[0] = off_1E81A6E70;
  if (v13 == 1 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8077774924);
  return v9;
}

BOOL llvm::MCAssembler::relaxDwarfCallFrameFragment(uint64_t a1, llvm::raw_ostream ***a2, uint64_t a3)
{
  llvm::raw_ostream *v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  _BOOL8 v8;
  _QWORD v10[2];
  uint64_t v11;
  int v12;
  unint64_t v13;
  char v14;

  v14 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t, llvm::raw_ostream ***, char *))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), a3, a2, &v14))
  {
    return v14 != 0;
  }
  v5 = **a2;
  v6 = *(_QWORD *)(a3 + 72);
  v13 = 0;
  llvm::MCExpr::evaluateAsAbsolute(*(_QWORD *)(a3 + 136), &v13);
  *(_QWORD *)(a3 + 72) = 0;
  sub_1C613932C((uint64_t)v10, a3 + 64);
  *(_DWORD *)(a3 + 104) = 0;
  llvm::MCDwarfFrameEmitter::EncodeAdvanceLoc(v5, v13, (llvm::raw_ostream *)v10, v7);
  v8 = v6 != *(_QWORD *)(a3 + 72);
  v10[0] = off_1E81A6E70;
  if (v12 == 1 && v11)
    MEMORY[0x1CAA32F9C](v11, 0x1000C8077774924);
  return v8;
}

BOOL llvm::MCAssembler::relaxCVInlineLineTable(llvm::MCContext **a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;

  v5 = *(unsigned int *)(a3 + 88);
  llvm::MCContext::getCVContext(*a1);
  llvm::CodeViewContext::encodeInlineLineTable(v6, a2, a3);
  return v5 != *(_QWORD *)(a3 + 88);
}

BOOL llvm::MCAssembler::relaxCVDefRange(llvm::MCContext **a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(unsigned int *)(a3 + 72);
  llvm::MCContext::getCVContext(*a1);
  llvm::CodeViewContext::encodeDefRange(v6, a2, a3);
  return v5 != *(_QWORD *)(a3 + 72);
}

uint64_t llvm::MCAssembler::relaxFragment(llvm::MCAssembler *this, llvm::MCAsmLayout *a2, llvm::MCFragment *a3)
{
  uint64_t result;
  llvm::raw_ostream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD v16[2];
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v20;

  result = 0;
  switch(*((_BYTE *)a3 + 48))
  {
    case 5:
      result = llvm::MCAssembler::relaxInstruction((uint64_t)this, a2, (uint64_t)a3);
      break;
    case 7:
      v20 = 0;
      if ((*(unsigned int (**)(_QWORD, llvm::MCFragment *, llvm::MCAsmLayout *, char *))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1), a3, a2, &v20))
      {
        v15 = v20 == 0;
        goto LABEL_14;
      }
      v7 = **(llvm::raw_ostream ***)a2;
      v8 = *((_QWORD *)a3 + 9);
      v19 = 0;
      llvm::MCExpr::evaluateAsAbsolute(*((_QWORD *)a3 + 18), &v19);
      v9 = *((_QWORD *)a3 + 17);
      *((_QWORD *)a3 + 9) = 0;
      sub_1C613932C((uint64_t)v16, (uint64_t)a3 + 64);
      *((_DWORD *)a3 + 26) = 0;
      llvm::MCDwarfLineAddr::Encode(v7, *((unsigned __int16 *)this + 100) | ((unint64_t)*((unsigned __int8 *)this + 202) << 16), v9, v19, (llvm::raw_ostream *)v16);
      result = v8 != *((_QWORD *)a3 + 9);
      v16[0] = off_1E81A6E70;
      if (v18 == 1)
      {
        if (v17)
        {
          v10 = result;
          MEMORY[0x1CAA32F9C](v17, 0x1000C8077774924);
          result = v10;
        }
      }
      break;
    case 8:
      result = llvm::MCAssembler::relaxDwarfCallFrameFragment((uint64_t)this, (llvm::raw_ostream ***)a2, (uint64_t)a3);
      break;
    case 9:
      result = llvm::MCAssembler::relaxLEB(0, (uint64_t)a2, (uint64_t)a3);
      break;
    case 0xA:
      result = llvm::MCAssembler::relaxBoundaryAlign((uint64_t)this, a2, (uint64_t)a3);
      break;
    case 0xC:
      v11 = *((unsigned int *)a3 + 22);
      llvm::MCContext::getCVContext(*(llvm::MCContext **)this);
      llvm::CodeViewContext::encodeInlineLineTable(v12, (uint64_t **)a2, (uint64_t)a3);
      v13 = *((_QWORD *)a3 + 11);
      goto LABEL_13;
    case 0xD:
      v11 = *((unsigned int *)a3 + 18);
      llvm::MCContext::getCVContext(*(llvm::MCContext **)this);
      llvm::CodeViewContext::encodeDefRange(v14, (uint64_t **)a2, (uint64_t)a3);
      v13 = *((_QWORD *)a3 + 9);
LABEL_13:
      v15 = v11 == v13;
LABEL_14:
      result = !v15;
      break;
    case 0xE:
      result = llvm::MCAssembler::relaxPseudoProbeAddr(0, (uint64_t)a2, (uint64_t)a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::MCAssembler::layoutSectionOnce(llvm::MCAssembler *this, llvm::MCAsmLayout *a2, llvm::MCSection *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v7;

  v3 = (uint64_t *)((char *)a3 + 104);
  v4 = (uint64_t *)*((_QWORD *)a3 + 14);
  if (v4 == (uint64_t *)((char *)a3 + 104))
    return 0;
  v7 = 0;
  do
  {
    if ((llvm::MCAssembler::relaxFragment(this, a2, (llvm::MCFragment *)v4) & (v7 == 0)) != 0)
      v7 = v4;
    v4 = (uint64_t *)v4[1];
  }
  while (v4 != v3);
  if (!v7)
    return 0;
  llvm::MCAsmLayout::invalidateFragmentsFrom((uint64_t)a2, v7);
  return 1;
}

uint64_t sub_1C592C150(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 16 * v4);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 16);
    }
    else if ((_DWORD)v5)
    {
      v9 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, *(const void **)a2, 16 * v5);
      v6 = v9;
LABEL_6:
      v7 = *(unsigned int *)(a2 + 8);
      if (v6 != v7)
        memcpy((void *)(*(_QWORD *)a1 + 16 * v6), (const void *)(*(_QWORD *)a2 + 16 * v6), *(_QWORD *)a2 + 16 * v7 - (*(_QWORD *)a2 + 16 * v6));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v6 = 0;
    goto LABEL_6;
  }
  return a1;
}

void sub_1C592C22C(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_1C4765410(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1C592C29C(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4DA95F8(a1, v7);
      v17 = 0;
      sub_1C4850EC8((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4DA95F8(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

double llvm::CodeViewContext::CodeViewContext(llvm::CodeViewContext *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x1000000000;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *((_QWORD *)this + 7) = 0x400000000;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 24) = (char *)this + 200;
  result = 0.0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_BYTE *)this + 264) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x1000000000;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *((_QWORD *)this + 7) = 0x400000000;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 24) = (char *)this + 200;
  result = 0.0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_BYTE *)this + 264) = 0;
  return result;
}

void sub_1C592C41C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *i;

  v5 = *a1;
  v4 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    for (i = &v5[48 * a2]; v4 != i; v4 -= 48)
      MEMORY[0x1CAA32FB4](*((_QWORD *)v4 - 3), 4);
    goto LABEL_22;
  }
  v8 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 4) >= v7)
  {
    i = &v4[48 * v7];
    bzero(a1[1], 48 * ((48 * v7 - 48) / 0x30) + 48);
LABEL_22:
    a1[1] = i;
    return;
  }
  if (a2 > 0x555555555555555)
    abort();
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v5) >> 4);
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0x2AAAAAAAAAAAAAALL)
    v11 = 0x555555555555555;
  else
    v11 = v10;
  if (v11 > 0x555555555555555)
    sub_1C4764EE4();
  v12 = 3 * v11;
  v13 = (char *)operator new(48 * v11);
  v14 = &v13[48 * v6];
  v15 = &v13[16 * v12];
  bzero(v14, 48 * ((48 * v7 - 48) / 0x30) + 48);
  v16 = &v13[48 * a2];
  if (v4 == v5)
  {
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (!v4)
      return;
LABEL_25:
    operator delete(v4);
    return;
  }
  v17 = 0;
  do
  {
    v18 = &v14[v17];
    v19 = &v4[v17];
    v20 = *(_OWORD *)&v4[v17 - 48];
    *((_QWORD *)v18 - 4) = *(_QWORD *)&v4[v17 - 32];
    *((_OWORD *)v18 - 3) = v20;
    *((_QWORD *)v18 - 3) = *(_QWORD *)&v4[v17 - 24];
    *((_QWORD *)v19 - 3) = 0;
    *((_DWORD *)v18 - 4) = *(_DWORD *)&v4[v17 - 16];
    *((_DWORD *)v19 - 4) = 0;
    *((_DWORD *)v18 - 3) = *(_DWORD *)&v4[v17 - 12];
    *((_DWORD *)v19 - 3) = 0;
    *((_DWORD *)v18 - 2) = *(_DWORD *)&v4[v17 - 8];
    *((_DWORD *)v19 - 2) = 0;
    v17 -= 48;
  }
  while (&v4[v17] != v5);
  v4 = *a1;
  v21 = a1[1];
  *a1 = &v14[v17];
  a1[1] = v16;
  a1[2] = v15;
  if (v21 != v4)
  {
    do
    {
      v22 = v21 - 48;
      MEMORY[0x1CAA32FB4](*((_QWORD *)v21 - 3), 4);
      v21 = v22;
    }
    while (v22 != v4);
  }
  if (v4)
    goto LABEL_25;
}

uint64_t llvm::CodeViewContext::getStringTableOffset(uint64_t *a1, unsigned __int8 *__s1, size_t __n)
{
  uint64_t v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;

  if (!__n)
    return 0;
  v4 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v4)
  {
    v7 = 0;
    v8 = 0;
    do
      v8 = 33 * v8 + __s1[v7++];
    while (__n != v7);
    v9 = *a1;
    v10 = *a1 + 8 * v4 + 8;
    v11 = 1;
    v12 = v8;
    while (1)
    {
      v13 = v12 & (v4 - 1);
      v14 = *(_QWORD **)(v9 + 8 * v13);
      if (v14 != (_QWORD *)-8)
      {
        if (!v14)
          return *(unsigned int *)(*(_QWORD *)(v9 + 8 * v4) + 8);
        if (*(_DWORD *)(v10 + 4 * v13) == v8
          && __n == *v14
          && !memcmp(__s1, (char *)v14 + *((unsigned int *)a1 + 5), __n))
        {
          break;
        }
      }
      v12 = v11 + v13;
      ++v11;
    }
    if ((_DWORD)v13 != -1)
      v4 = (int)v13;
  }
  else
  {
    v4 = 0;
    v9 = *a1;
  }
  return *(unsigned int *)(*(_QWORD *)(v9 + 8 * v4) + 8);
}

uint64_t llvm::CodeViewContext::emitStringTable(llvm::CodeViewContext *this, llvm::MCObjectStreamer *a2)
{
  uint64_t v4;
  unint64_t TempSymbol;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD *v26;
  llvm::MCSymbol **v27;
  uint64_t v28;
  llvm::MCSymbol *v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD v39[4];
  __int16 v40;

  v4 = *((_QWORD *)a2 + 1);
  v39[0] = "strtab_begin";
  v40 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(v4, (uint64_t)v39, 0);
  v39[0] = "strtab_end";
  v40 = 259;
  v6 = llvm::MCContext::createTempSymbol(v4, (uint64_t)v39, 0);
  (*(void (**)(llvm::MCObjectStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, 243, 4);
  (*(void (**)(llvm::MCObjectStreamer *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 832))(a2, v6, TempSymbol, 4);
  (*(void (**)(llvm::MCObjectStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, TempSymbol, 0);
  if (!*((_BYTE *)this + 40))
  {
    llvm::CodeViewContext::getStringTableFragment(this);
    v9 = *((unsigned int *)a2 + 30);
    if (!(_DWORD)v9)
      goto LABEL_10;
    v10 = *(_DWORD **)(*((_QWORD *)a2 + 14) + 32 * v9 - 32);
    if (v10)
    {
      v11 = *((unsigned int *)a2 + 76);
      if ((_DWORD)v11)
      {
        v26 = v10;
        v38 = (_QWORD *)v8;
        v27 = (llvm::MCSymbol **)*((_QWORD *)a2 + 37);
        v28 = 8 * v11;
        do
        {
          v29 = *v27++;
          llvm::MCSection::addPendingLabel(v26, v29, *((_DWORD *)a2 + 104));
          v28 -= 8;
        }
        while (v28);
        *((_DWORD *)a2 + 76) = 0;
        v8 = (unint64_t)v38;
        v10 = v26;
      }
      v12 = *((unsigned int *)a2 + 104);
      v13 = v10[40];
      if (v8)
      {
        if (v13)
        {
          v18 = (_DWORD *)*((_QWORD *)v10 + 19);
          v19 = v18;
          do
          {
            if (v19[2] == (_DWORD)v12)
            {
              v20 = *(unint64_t **)v19;
              *v20 = **(_QWORD **)v19 & 7 | v8;
              v20[3] = 0;
              *((_DWORD *)v20 + 2) = v20[1] & 0xFFFFE3FF | 0x400;
              v18 = (_DWORD *)*((_QWORD *)v10 + 19);
              v21 = v10[40];
              v22 = (char *)&v18[4 * v21] - (char *)(v19 + 4);
              if (v22)
              {
                v37 = (_QWORD *)v8;
                v23 = v10;
                v24 = v19;
                v25 = v12;
                memmove(v19, v19 + 4, v22 - 4);
                v12 = v25;
                v19 = v24;
                v10 = v23;
                v8 = (unint64_t)v37;
                LODWORD(v21) = v23[40];
                v18 = (_DWORD *)*((_QWORD *)v23 + 19);
              }
              v19 -= 4;
              v13 = v21 - 1;
              v10[40] = v13;
            }
            v19 += 4;
          }
          while (v19 != &v18[4 * v13]);
        }
      }
      else if (v13)
      {
        v30 = (_DWORD *)*((_QWORD *)v10 + 19);
        v31 = v30;
        v36 = v10;
        v35 = *((_DWORD *)a2 + 104);
        do
        {
          if (v31[2] == (_DWORD)v12)
          {
            v32 = *(uint64_t **)v31;
            *v32 = **(_QWORD **)v31 & 7;
            v32[3] = 0;
            *((_DWORD *)v32 + 2) = v32[1] & 0xFFFFE3FF | 0x400;
            v30 = (_DWORD *)*((_QWORD *)v36 + 19);
            v33 = v36[40];
            v34 = (char *)&v30[4 * v33] - (char *)(v31 + 4);
            if (v34)
            {
              memmove(v31, v31 + 4, v34 - 4);
              LODWORD(v33) = v36[40];
              v30 = (_DWORD *)*((_QWORD *)v36 + 19);
            }
            v31 -= 4;
            v13 = v33 - 1;
            v36[40] = v33 - 1;
          }
          v31 += 4;
          v8 = 0;
          LODWORD(v12) = v35;
        }
        while (v31 != &v30[4 * v13]);
      }
    }
    v14 = *((unsigned int *)a2 + 30);
    if ((_DWORD)v14)
      v15 = *(_QWORD *)(*((_QWORD *)a2 + 14) + 32 * v14 - 32);
    else
LABEL_10:
      v15 = 0;
    v16 = (unint64_t *)*((_QWORD *)a2 + 35);
    v17 = *v16;
    *(_QWORD *)v8 = *v16;
    *(_QWORD *)(v8 + 8) = v16;
    *(_QWORD *)(v17 + 8) = v8;
    *v16 = v8;
    *(_QWORD *)(v8 + 16) = v15;
    *((_BYTE *)this + 40) = 1;
  }
  (*(void (**)(llvm::MCObjectStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 632))(a2, 4, 0, 1, 0);
  return (*(uint64_t (**)(llvm::MCObjectStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, v6, 0);
}

void llvm::CodeViewContext::getFunctionLineEntries(llvm::CodeViewContext *this@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  char *v3;
  llvm::CodeViewContext *v5;
  char *v7;
  unsigned int v8;
  BOOL v9;
  char **v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  __int128 *v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  __int128 v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  _DWORD *v49;
  char v50;

  v3 = (char *)*((_QWORD *)this + 25);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v3)
  {
    v5 = this;
    v7 = (char *)this + 200;
    do
    {
      v8 = *((_DWORD *)v3 + 8);
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = (char **)v3;
      else
        v10 = (char **)(v3 + 8);
      if (v9)
        v7 = v3;
      v3 = *v10;
    }
    while (*v10);
    if (v7 != (char *)this + 200 && *((_DWORD *)v7 + 8) <= a2)
    {
      v11 = *((_QWORD *)this + 30);
      if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 31) - v11) >> 4) <= a2)
      {
        v49 = 0;
      }
      else
      {
        v12 = (_DWORD *)(v11 + 48 * a2);
        if (!*v12)
          v12 = 0;
        v49 = v12;
      }
      v13 = *((_QWORD *)v7 + 5);
      v14 = *((_QWORD *)v7 + 6);
      if (v13 != v14)
      {
        v15 = 0;
        v16 = 0;
        v47 = *((_QWORD *)v7 + 6);
        do
        {
          v17 = *((_QWORD *)v5 + 27);
          v18 = *(_DWORD *)(v17 + 24 * v13 + 8);
          if (v18 == a2)
          {
            v19 = (__int128 *)(v17 + 24 * v13);
            v20 = (unint64_t)a3[2];
            if ((unint64_t)v15 >= v20)
            {
              v32 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3) + 1;
              if (v32 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_66;
              v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)v16) >> 3);
              if (2 * v33 > v32)
                v32 = 2 * v33;
              if (v33 >= 0x555555555555555)
                v34 = 0xAAAAAAAAAAAAAAALL;
              else
                v34 = v32;
              if (v34)
              {
                if (v34 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_67;
                v35 = (char *)operator new(24 * v34);
              }
              else
              {
                v35 = 0;
              }
              v40 = *v19;
              v41 = &v35[8 * ((v15 - v16) >> 3)];
              *((_QWORD *)v41 + 2) = *((_QWORD *)v19 + 2);
              *(_OWORD *)v41 = v40;
              v42 = v41;
              if (v15 != v16)
              {
                do
                {
                  v43 = *(_OWORD *)(v15 - 24);
                  *(_QWORD *)(v42 - 9) = *(_QWORD *)(v15 - 9);
                  *(_OWORD *)(v42 - 24) = v43;
                  v42 -= 24;
                  v15 -= 24;
                }
                while (v15 != v16);
                v15 = *a3;
              }
              v44 = &v35[24 * v34];
LABEL_60:
              v22 = v41 + 24;
              *a3 = v42;
              a3[2] = v44;
              if (v15)
                operator delete(v15);
              v16 = v42;
              goto LABEL_63;
            }
            v21 = *v19;
            *((_QWORD *)v15 + 2) = *((_QWORD *)v19 + 2);
            *(_OWORD *)v15 = v21;
            v22 = v15 + 24;
          }
          else
          {
            v23 = *((_QWORD *)v49 + 3);
            v24 = v49[10];
            v25 = sub_1C4D7501C(v23, v49[10], v18);
            if ((int *)(v23 + 16 * v24) == v25)
              goto LABEL_64;
            v26 = v25[1];
            if (v16 != v15
              && *((_DWORD *)v15 - 3) == v26
              && *((_DWORD *)v15 - 2) == v25[2]
              && v25[3] == *((unsigned __int16 *)v15 - 2))
            {
              goto LABEL_64;
            }
            v27 = *(_QWORD *)(v17 + 24 * v13);
            v29 = v25[2];
            v28 = v25[3];
            v30 = v50 & 0xFC;
            v31 = (unint64_t)a3[2];
            v50 &= 0xFCu;
            if ((unint64_t)v15 >= v31)
            {
              v36 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 3) + 1;
              if (v36 > 0xAAAAAAAAAAAAAAALL)
LABEL_66:
                abort();
              v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - (_QWORD)v16) >> 3);
              if (2 * v37 > v36)
                v36 = 2 * v37;
              if (v37 >= 0x555555555555555)
                v38 = 0xAAAAAAAAAAAAAAALL;
              else
                v38 = v36;
              v46 = v38;
              if (v38)
              {
                if (v38 > 0xAAAAAAAAAAAAAAALL)
LABEL_67:
                  sub_1C4764EE4();
                v39 = (char *)operator new(24 * v38);
              }
              else
              {
                v39 = 0;
              }
              v41 = &v39[8 * ((v15 - v16) >> 3)];
              *(_QWORD *)v41 = v27;
              *((_DWORD *)v41 + 2) = a2;
              *((_DWORD *)v41 + 3) = v26;
              *((_DWORD *)v41 + 4) = v29;
              *((_WORD *)v41 + 10) = v28;
              v41[22] = v50;
              v42 = v41;
              if (v16 == v15)
              {
                v14 = v47;
                v5 = this;
              }
              else
              {
                v14 = v47;
                v5 = this;
                do
                {
                  v45 = *(_OWORD *)(v15 - 24);
                  *(_QWORD *)(v42 - 9) = *(_QWORD *)(v15 - 9);
                  *(_OWORD *)(v42 - 24) = v45;
                  v42 -= 24;
                  v15 -= 24;
                }
                while (v15 != v16);
                v15 = *a3;
              }
              v44 = &v39[24 * v46];
              goto LABEL_60;
            }
            *(_QWORD *)v15 = v27;
            *((_DWORD *)v15 + 2) = a2;
            *((_DWORD *)v15 + 3) = v26;
            *((_DWORD *)v15 + 4) = v29;
            *((_WORD *)v15 + 10) = v28;
            v22 = v15 + 24;
            v15[22] = v30;
            v14 = v47;
            v5 = this;
          }
LABEL_63:
          a3[1] = v22;
          v15 = v22;
LABEL_64:
          ++v13;
        }
        while (v13 != v14);
      }
    }
  }
}

uint64_t llvm::CodeViewContext::getLineExtent(llvm::CodeViewContext *this, unsigned int a2)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;

  v4 = (char *)*((_QWORD *)this + 25);
  v2 = (char *)this + 200;
  v3 = v4;
  if (!v4)
    return -1;
  v5 = v2;
  do
  {
    v6 = *((_DWORD *)v3 + 8);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (char **)v3;
    else
      v8 = (char **)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 && *((_DWORD *)v5 + 8) <= a2)
    return *((_QWORD *)v5 + 5);
  else
    return -1;
}

uint64_t llvm::CodeViewContext::getLinesForExtent(llvm::CodeViewContext *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3;

  if (a3 <= a2)
    return 0;
  v3 = *((_QWORD *)this + 27);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 28) - v3) >> 3) <= a2)
    return 0;
  else
    return v3 + 24 * a2;
}

_QWORD *llvm::CodeViewContext::encodeInlineLineTable(_QWORD *result, uint64_t **a2, uint64_t a3)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  BOOL v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  int v46;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v74;
  uint64_t v75;
  int v76;

  v4 = *(_DWORD *)(a3 + 52);
  v5 = result + 25;
  v6 = result[25];
  if (!v6)
    goto LABEL_12;
  v7 = result[25];
  v8 = result + 25;
  do
  {
    v9 = *(_DWORD *)(v7 + 32);
    v10 = v9 >= v4;
    if (v9 >= v4)
      v11 = (uint64_t *)v7;
    else
      v11 = (uint64_t *)(v7 + 8);
    if (v10)
      v8 = (_QWORD *)v7;
    v7 = *v11;
  }
  while (*v11);
  if (v8 != v5 && *((_DWORD *)v8 + 8) <= v4)
  {
    v13 = v8[5];
    v12 = v8[6];
  }
  else
  {
LABEL_12:
    v12 = 0;
    v13 = -1;
  }
  v14 = result[30] + 48 * v4;
  if (!*(_DWORD *)v14)
    v14 = 0;
  v15 = *(_DWORD *)(v14 + 32);
  v16 = *(unsigned int **)(v14 + 24);
  v72 = v14;
  v17 = *(unsigned int *)(v14 + 40);
  v18 = &v16[4 * v17];
  if (v15)
  {
    if ((_DWORD)v17)
    {
      v19 = 16 * v17;
      v20 = v16;
      while (*v20 >= 0xFFFFFFFE)
      {
        v20 += 4;
        v19 -= 16;
        if (!v19)
          goto LABEL_20;
      }
    }
    else
    {
      v20 = v16;
    }
  }
  else
  {
LABEL_20:
    v20 = &v16[4 * v17];
  }
  v21 = &v16[4 * v17];
LABEL_23:
  while (v20 != v21)
  {
    if (!v6)
      goto LABEL_35;
    v22 = *v20;
    v23 = result[25];
    v24 = result + 25;
    do
    {
      v25 = *(_DWORD *)(v23 + 32);
      v26 = v25 >= v22;
      if (v25 >= v22)
        v27 = (uint64_t *)v23;
      else
        v27 = (uint64_t *)(v23 + 8);
      if (v26)
        v24 = (_QWORD *)v23;
      v23 = *v27;
    }
    while (*v27);
    if (v24 != v5 && *((_DWORD *)v24 + 8) <= v22)
    {
      v29 = v24[5];
      v28 = v24[6];
    }
    else
    {
LABEL_35:
      v28 = 0;
      v29 = -1;
    }
    if (v29 < v13)
      v13 = v29;
    if (v12 <= v28)
      v12 = v28;
    v30 = v20 + 4;
    while (v30 != v18)
    {
      v31 = *v30;
      v30 += 4;
      if (v31 <= 0xFFFFFFFD)
      {
        v20 = v30 - 4;
        goto LABEL_23;
      }
    }
    v20 = v18;
  }
  if (v13 < v12)
  {
    v32 = result[27];
    if (0xAAAAAAAAAAAAAAABLL * ((result[28] - v32) >> 3) > v13)
    {
      v33 = 0;
      v34 = 0;
      v35 = *(_DWORD *)(a3 + 56);
      v76 = *(_DWORD *)(a3 + 60);
      v74 = (_QWORD *)(a3 + 80);
      v75 = *(_QWORD *)(a3 + 64);
      *(_QWORD *)(a3 + 88) = 0;
      v70 = (void *)(a3 + 104);
      v71 = result;
      v36 = 3 * v13;
      v37 = 24 * v12 - 8 * v36 - 24;
      v38 = v32 + 8 * v36 + 16;
      while (1)
      {
        v39 = *(_DWORD *)(v38 - 8);
        if (v39 == *(_DWORD *)(a3 + 52))
          break;
        v42 = *(_QWORD *)(v72 + 24);
        v43 = *(unsigned int *)(v72 + 40);
        v44 = sub_1C4D7501C(v42, *(_DWORD *)(v72 + 40), v39);
        if ((int *)(v42 + 16 * v43) != v44)
        {
          v40 = v44 + 1;
          v41 = v44 + 2;
          goto LABEL_53;
        }
        if ((v34 & 1) != 0)
        {
          v53 = sub_1C592D4A4(a2, v75, *(_QWORD *)(v38 - 16));
          v34 = 0;
          v56 = *(_QWORD *)(a3 + 88);
          v58 = v56 + 1;
          v59 = 4;
          if ((unint64_t)(v56 + 1) > *(_QWORD *)(a3 + 96))
            goto LABEL_87;
          goto LABEL_78;
        }
        v34 = 0;
        if (!v37)
        {
LABEL_89:
          v60 = sub_1C592D4A4(a2, v75, *(_QWORD *)(a3 + 72));
          if (v12 == -1)
            goto LABEL_94;
          v61 = v71[27];
          if (0xAAAAAAAAAAAAAAABLL * ((v71[28] - v61) >> 3) <= v12)
            goto LABEL_94;
          v62 = (uint64_t *)(v61 + 24 * v12);
          v63 = (_QWORD *)*v62;
          v64 = *(_QWORD *)*v62 & 0xFFFFFFFFFFFFFFF8;
          if (!v64 && (v63[1] & 0x1C00) == 0x800)
          {
            *((_DWORD *)v63 + 2) |= 4u;
            llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v63[3]);
            *v63 = *v63 & 7 | v64;
          }
          v65 = *(_QWORD *)(v64 + 16);
          v66 = *(_QWORD *)v75 & 0xFFFFFFFFFFFFFFF8;
          if (!v66 && (*(_DWORD *)(v75 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v75 + 8) |= 4u;
            llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v75 + 24));
            *(_QWORD *)v75 = *(_QWORD *)v75 & 7 | v66;
          }
          if (v65 == *(_QWORD *)(v66 + 16))
            v67 = sub_1C592D4A4(a2, v75, *v62);
          else
LABEL_94:
            v67 = -1;
          v68 = *(_QWORD *)(a3 + 88);
          if ((unint64_t)(v68 + 1) > *(_QWORD *)(a3 + 96))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v74, v70, v68 + 1, 1);
            v68 = *(_QWORD *)(a3 + 88);
          }
          *(_BYTE *)(*(_QWORD *)(a3 + 80) + v68) = 4;
          ++*(_QWORD *)(a3 + 88);
          if (v67 >= v60)
            v69 = v60;
          else
            v69 = v67;
          return sub_1C592D5AC((void *)v69, v74);
        }
LABEL_79:
        v37 -= 24;
        v38 += 24;
        if (v33 >= 0xFEEC)
          goto LABEL_89;
      }
      v40 = (int *)(v38 - 4);
      v41 = (int *)v38;
LABEL_53:
      v45 = *v41;
      v46 = *v40;
      if ((v34 & (*v40 == v35)) != 1 || v45 != v76)
      {
        if (v46 != v35)
        {
          v48 = *(_QWORD *)(v71[6] + 32 * (v46 - 1) + 24);
          *(_DWORD *)(v48 + 8) |= 4u;
          v49 = (void *)*(unsigned int *)(*(_QWORD *)(v48 + 24) + 16);
          v50 = *(_QWORD *)(a3 + 88);
          if ((unint64_t)(v50 + 1) > *(_QWORD *)(a3 + 96))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v74, v70, v50 + 1, 1);
            v50 = *(_QWORD *)(a3 + 88);
          }
          *(_BYTE *)(*(_QWORD *)(a3 + 80) + v50) = 5;
          ++*(_QWORD *)(a3 + 88);
          sub_1C592D5AC(v49, v74);
        }
        if (v45 - v76 >= 0)
          v51 = (2 * (v45 - v76));
        else
          v51 = (1 - 2 * (v45 - v76));
        v52 = sub_1C592D4A4(a2, v75, *(_QWORD *)(v38 - 16));
        v53 = v52;
        if (v51 > 7 || v52 > 0xF)
        {
          if (v45 != v76)
          {
            v55 = *(_QWORD *)(a3 + 88);
            if ((unint64_t)(v55 + 1) > *(_QWORD *)(a3 + 96))
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v74, v70, v55 + 1, 1);
              v55 = *(_QWORD *)(a3 + 88);
            }
            *(_BYTE *)(*(_QWORD *)(a3 + 80) + v55) = 6;
            ++*(_QWORD *)(a3 + 88);
            sub_1C592D5AC((void *)v51, v74);
          }
          v56 = *(_QWORD *)(a3 + 88);
          v57 = *(_QWORD *)(a3 + 96);
          v58 = v56 + 1;
          v34 = 1;
          v59 = 3;
        }
        else
        {
          v53 = v52 | (16 * (_DWORD)v51);
          v56 = *(_QWORD *)(a3 + 88);
          v57 = *(_QWORD *)(a3 + 96);
          v58 = v56 + 1;
          v34 = 1;
          v59 = 11;
        }
        v35 = v46;
        if (v58 <= v57)
        {
          v76 = v45;
          goto LABEL_78;
        }
        v76 = v45;
LABEL_87:
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)v74, v70, v58, 1);
        v56 = *(_QWORD *)(a3 + 88);
LABEL_78:
        *(_BYTE *)(*(_QWORD *)(a3 + 80) + v56) = v59;
        ++*(_QWORD *)(a3 + 88);
        sub_1C592D5AC((void *)v53, v74);
        v75 = *(_QWORD *)(v38 - 16);
        v33 = *(_QWORD *)(a3 + 88);
        if (!v37)
          goto LABEL_89;
        goto LABEL_79;
      }
      v34 = 1;
      if (!v37)
        goto LABEL_89;
      goto LABEL_79;
    }
  }
  return result;
}

uint64_t sub_1C592D4A4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v12;

  v5 = **a1;
  v6 = sub_1C484358C(v5 + 192, 24, 3);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 152) + 18) << 16;
  *(_BYTE *)v6 = 2;
  *(_DWORD *)(v6 + 1) = v7 | (*(unsigned __int8 *)(v6 + 4) << 24);
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  v8 = sub_1C484358C(v5 + 192, 24, 3);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 152) + 18) << 16;
  *(_BYTE *)v8 = 2;
  *(_DWORD *)(v8 + 1) = v9 | (*(unsigned __int8 *)(v8 + 4) << 24);
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = a3;
  v10 = sub_1C484358C(v5 + 192, 32, 3);
  *(_BYTE *)v10 = 0;
  *(_DWORD *)(v10 + 1) = (*(unsigned __int8 *)(v10 + 4) << 24) | 0x12;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v10 + 24) = v6;
  v12 = 0;
  llvm::MCExpr::evaluateAsAbsolute(v10, &v12);
  return v12;
}

void *sub_1C592D5AC(void *result, _QWORD *a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v3 = result;
  if (result <= 0x7F)
  {
    v4 = a2[1];
    v5 = v4 + 1;
    if ((unint64_t)(v4 + 1) <= a2[2])
    {
LABEL_3:
      *(_BYTE *)(*a2 + v4) = v3;
      ++a2[1];
      return result;
    }
LABEL_18:
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v5, 1);
    v4 = a2[1];
    goto LABEL_3;
  }
  if (!(result >> 14))
  {
    v6 = (result >> 8) | 0xFFFFFF80;
    v7 = a2[1];
    if ((unint64_t)(v7 + 1) > a2[2])
    {
      result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v7 + 1, 1);
      v6 = (v3 >> 8) | 0xFFFFFF80;
      v7 = a2[1];
    }
    *(_BYTE *)(*a2 + v7) = v6;
    goto LABEL_17;
  }
  if (!(result >> 29))
  {
    v8 = (result >> 24) | 0xFFFFFFC0;
    v9 = a2[1];
    if ((unint64_t)(v9 + 1) > a2[2])
    {
      result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v9 + 1, 1);
      v8 = HIBYTE(v3) | 0xFFFFFFC0;
      v9 = a2[1];
    }
    *(_BYTE *)(*a2 + v9) = v8;
    v10 = a2[1];
    v11 = a2[2];
    v12 = v10 + 1;
    a2[1] = v10 + 1;
    if (v10 + 2 > v11)
    {
      result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v10 + 2, 1);
      v12 = a2[1];
    }
    *(_BYTE *)(*a2 + v12) = BYTE2(v3);
    v13 = a2[1];
    v14 = a2[2];
    v15 = v13 + 1;
    a2[1] = v13 + 1;
    if (v13 + 2 > v14)
    {
      result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v13 + 2, 1);
      v15 = a2[1];
    }
    *(_BYTE *)(*a2 + v15) = BYTE1(v3);
LABEL_17:
    v16 = a2[1];
    v17 = a2[2];
    v4 = v16 + 1;
    a2[1] = v16 + 1;
    v5 = v16 + 2;
    if (v16 + 2 <= v17)
      goto LABEL_3;
    goto LABEL_18;
  }
  return result;
}

void llvm::CodeViewContext::encodeDefRange(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  const void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  char v50[8];
  int v51;
  int v52;
  uint64_t v53;
  char v54[8];
  uint64_t v55;
  uint64_t v56;
  int v57;
  _QWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  char *v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD v65[6];

  v65[4] = *MEMORY[0x1E0C80C00];
  v47 = **a2;
  *(_QWORD *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 128) = 0;
  sub_1C613932C((uint64_t)v58, a3 + 64);
  v63 = v65;
  v64 = 0x400000000;
  v5 = *(unsigned int *)(a3 + 240);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v46 = a3 + 120;
    v7 = *(uint64_t **)(a3 + 232);
    v8 = &v7[2 * v5];
    do
    {
      v10 = *v7;
      v9 = v7[1];
      if (v6)
        v11 = sub_1C592D4A4(a2, v6, *v7);
      else
        v11 = 0;
      v12 = sub_1C592D4A4(a2, v10, v9);
      v13 = v64;
      if (v64 >= (unint64_t)HIDWORD(v64))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v64 + 1, 8);
        v13 = v64;
      }
      v63[v13] = v11 | (unint64_t)(v12 << 32);
      LODWORD(v64) = v64 + 1;
      v7 += 2;
      v6 = v9;
    }
    while (v7 != v8);
    v14 = *(unsigned int *)(a3 + 240);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = v47 + 192;
      v44 = *(unsigned int *)(a3 + 240);
      do
      {
        v17 = (char *)&v63[v15];
        v18 = *((_DWORD *)v17 + 1);
        v19 = v15 + 1;
        if (v15 + 1 == v14)
        {
LABEL_16:
          v21 = v14;
        }
        else
        {
          v20 = v17 + 12;
          v21 = v15 + 1;
          while (1)
          {
            v22 = *(v20 - 1) + v18 + *v20;
            if (v22 > 0xF000)
              break;
            v20 += 2;
            ++v21;
            v18 = v22;
            if (v14 == v21)
            {
              v18 = v22;
              goto LABEL_16;
            }
          }
        }
        v23 = 0;
        v45 = v15;
        v48 = 4 * (v21 + ~(_WORD)v15) + 8;
        v49 = *(_QWORD *)(*(_QWORD *)(a3 + 232) + 16 * v15);
        do
        {
          if (v18 >= 0xF000)
            v24 = 61440;
          else
            v24 = v18;
          v25 = sub_1C484358C(v16, 24, 3);
          v26 = *(unsigned __int8 *)(*(_QWORD *)(v47 + 152) + 18) << 16;
          *(_BYTE *)v25 = 2;
          *(_DWORD *)(v25 + 1) = v26 | (*(unsigned __int8 *)(v25 + 4) << 24);
          *(_QWORD *)(v25 + 8) = 0;
          *(_QWORD *)(v25 + 16) = v49;
          v27 = sub_1C484358C(v16, 24, 3);
          *(_BYTE *)v27 = 1;
          *(_DWORD *)(v27 + 1) = *(unsigned __int8 *)(v27 + 4) << 24;
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v27 + 16) = v23;
          v28 = sub_1C484358C(v16, 32, 3);
          *(_BYTE *)v28 = 0;
          *(_DWORD *)(v28 + 1) = *(unsigned __int8 *)(v28 + 4) << 24;
          *(_QWORD *)(v28 + 8) = 0;
          *(_QWORD *)(v28 + 16) = v25;
          *(_QWORD *)(v28 + 24) = v27;
          *(_QWORD *)v54 = 0;
          v55 = 0;
          v57 = 0;
          v56 = 0;
          llvm::MCExpr::evaluateAsRelocatableImpl(v28);
          v30 = *(const void **)(a3 + 280);
          v29 = *(_QWORD *)(a3 + 288);
          *(_WORD *)v50 = v48 + v29;
          llvm::raw_ostream::write((llvm::raw_ostream *)v58, v50, 2uLL);
          if (v29 <= v60 - (uint64_t)v61)
          {
            if (v29)
            {
              memcpy(v61, v30, v29);
              v61 += v29;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v58, (const char *)v30, v29);
          }
          v31 = *(_QWORD *)(a3 + 72);
          *(_QWORD *)v50 = v28;
          v51 = v31;
          v52 = 20;
          v53 = 0;
          v32 = sub_1C4926708(v46, (unint64_t)v50, 1);
          v33 = *(_QWORD *)(a3 + 120) + 24 * *(unsigned int *)(a3 + 128);
          v34 = *(_OWORD *)v32;
          *(_QWORD *)(v33 + 16) = *(_QWORD *)(v32 + 16);
          *(_OWORD *)v33 = v34;
          ++*(_DWORD *)(a3 + 128);
          *(_DWORD *)v50 = 0;
          llvm::raw_ostream::write((llvm::raw_ostream *)v58, v50, 4uLL);
          v35 = *(_QWORD *)(a3 + 72);
          *(_QWORD *)v50 = v28;
          v51 = v35;
          v52 = 19;
          v53 = 0;
          v36 = sub_1C4926708(v46, (unint64_t)v50, 1);
          v37 = *(_QWORD *)(a3 + 120) + 24 * *(unsigned int *)(a3 + 128);
          v38 = *(_OWORD *)v36;
          *(_QWORD *)(v37 + 16) = *(_QWORD *)(v36 + 16);
          *(_OWORD *)v37 = v38;
          ++*(_DWORD *)(a3 + 128);
          *(_WORD *)v50 = 0;
          llvm::raw_ostream::write((llvm::raw_ostream *)v58, v50, 2uLL);
          *(_WORD *)v50 = v24;
          llvm::raw_ostream::write((llvm::raw_ostream *)v58, v50, 2uLL);
          v23 += v24;
          v39 = v18 > 0xF000;
          v18 -= v24;
        }
        while (v39);
        if (v19 != v21)
        {
          v40 = v45;
          v41 = HIDWORD(v63[v45]);
          do
          {
            v42 = v63[v40 + 1];
            v43 = HIDWORD(v63[v40 + 1]);
            *(_WORD *)v54 = v41;
            llvm::raw_ostream::write((llvm::raw_ostream *)v58, v54, 2uLL);
            *(_WORD *)v54 = v42;
            llvm::raw_ostream::write((llvm::raw_ostream *)v58, v54, 2uLL);
            v41 += v42 + v43;
            ++v19;
            ++v40;
          }
          while (v21 != v19);
          v19 = v21;
        }
        v15 = v19;
        v14 = v44;
      }
      while (v19 != v44);
    }
  }
  if (v63 != v65)
    free(v63);
  v58[0] = off_1E81A6E70;
  if (v62 == 1)
  {
    if (v59)
      MEMORY[0x1CAA32F9C](v59, 0x1000C8077774924);
  }
}

_QWORD *sub_1C592DC14(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v3 = *result;
  v2 = result[1];
  if (v2 != *result)
  {
    do
    {
      v4 = v2 - 48;
      result = (_QWORD *)MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 - 24), 4);
      v2 = v4;
    }
    while (v4 != v3);
  }
  v1[1] = v3;
  return result;
}

uint64_t sub_1C592DC64(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = (37 * *a2) & (v4 - 1);
    result = *(_QWORD *)a1 + 16 * v5;
    v7 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result)
      return result;
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = result;
      v11 = v5 + v9++;
      v5 = v11 & (v4 - 1);
      result = *(_QWORD *)a1 + 16 * v5;
      v7 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        return result;
    }
    if (v8)
      result = v8;
  }
  else
  {
    result = 0;
  }
  v12 = *(_DWORD *)(a1 + 8);
  if (4 * v12 + 4 >= 3 * v4)
  {
    sub_1C592DE70((uint64_t *)a1, 2 * v4);
    v13 = *(_DWORD *)(a1 + 16);
    if (v13)
    {
      v14 = v13 - 1;
      v15 = (37 * *a2) & v14;
      result = *(_QWORD *)a1 + 16 * v15;
      v16 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        goto LABEL_15;
      v17 = 0;
      v18 = 1;
      while (v16 != -1)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v16 == -2;
        if (v19)
          v17 = result;
        v20 = v15 + v18++;
        v15 = v20 & v14;
        result = *(_QWORD *)a1 + 16 * v15;
        v16 = *(_DWORD *)result;
        if (*a2 == *(_DWORD *)result)
          goto LABEL_15;
      }
LABEL_45:
      if (v17)
        result = v17;
      goto LABEL_15;
    }
LABEL_44:
    result = 0;
    goto LABEL_15;
  }
  if (v4 + ~v12 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1C592DE70((uint64_t *)a1, v4);
    v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      v22 = v21 - 1;
      v23 = (37 * *a2) & v22;
      result = *(_QWORD *)a1 + 16 * v23;
      v24 = *(_DWORD *)result;
      if (*a2 == *(_DWORD *)result)
        goto LABEL_15;
      v17 = 0;
      v25 = 1;
      while (v24 != -1)
      {
        if (v17)
          v26 = 0;
        else
          v26 = v24 == -2;
        if (v26)
          v17 = result;
        v27 = v23 + v25++;
        v23 = v27 & v22;
        result = *(_QWORD *)a1 + 16 * v23;
        v24 = *(_DWORD *)result;
        if (*a2 == *(_DWORD *)result)
          goto LABEL_15;
      }
      goto LABEL_45;
    }
    goto LABEL_44;
  }
LABEL_15:
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)result != -1)
    --*(_DWORD *)(a1 + 12);
  *(_DWORD *)result = *a2;
  *(_QWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

_DWORD *sub_1C592DE70(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)4uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          v14 = *((_DWORD *)a1 + 4);
          if (v14)
          {
            v15 = v14 - 1;
            v16 = (v14 - 1) & (37 * v13);
            v17 = *a1 + 16 * v16;
            v18 = *(_DWORD *)v17;
            if (v13 != *(_DWORD *)v17)
            {
              v19 = 0;
              v20 = 1;
              while (v18 != -1)
              {
                if (v19)
                  v21 = 0;
                else
                  v21 = v18 == -2;
                if (v21)
                  v19 = v17;
                v22 = v16 + v20++;
                v16 = v22 & v15;
                v17 = *a1 + 16 * (v22 & v15);
                v18 = *(_DWORD *)v17;
                if (v13 == *(_DWORD *)v17)
                  goto LABEL_23;
              }
              if (v19)
                v17 = v19;
            }
          }
          else
          {
            v17 = 0;
          }
LABEL_23:
          *(_DWORD *)v17 = v13;
          v23 = *(_QWORD *)(v12 + 1);
          *(_DWORD *)(v17 + 12) = v12[3];
          *(_QWORD *)(v17 + 4) = v23;
          ++*((_DWORD *)a1 + 2);
        }
        v12 += 4;
      }
      while (v12 != &v4[4 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v24 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v24)
  {
    v25 = 16 * v24;
    do
    {
      *result = -1;
      result += 4;
      v25 -= 16;
    }
    while (v25);
  }
  return result;
}

_QWORD *sub_1C592DFFC(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n, _DWORD *a4)
{
  unsigned int v7;
  int v8;
  size_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *i;
  _QWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  _DWORD *v28;

  v7 = *((_DWORD *)a1 + 2);
  if (!v7)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v23 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v23)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v23[16] = 2;
    *(_QWORD *)a1 = v23;
    v7 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v28 = a4;
  v8 = 0;
  if (__n)
  {
    v9 = __n;
    v10 = a2;
    do
    {
      v11 = *v10++;
      v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  v12 = *(_QWORD *)a1;
  v13 = v7 - 1;
  v14 = *(_QWORD *)a1 + 8 * v7 + 8;
  v15 = -1;
  v16 = 1;
  v17 = v8;
  while (1)
  {
    v18 = v17 & v13;
    v19 = *(_QWORD **)(v12 + 8 * v18);
    if (!v19)
      break;
    if (v19 == (_QWORD *)-8)
    {
      if (v15 == -1)
        v15 = v17 & v13;
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8
           && __n == *v19
           && (!__n || !memcmp(a2, (char *)v19 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    v17 = v16 + v18;
    ++v16;
  }
  v20 = v15;
  if (v15 == -1)
  {
    v20 = v18;
    v18 = v18;
  }
  else
  {
    v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  v19 = *(_QWORD **)(v12 + 8 * v18);
LABEL_17:
  i = (_QWORD *)(v12 + 8 * v18);
  if (v19)
  {
    if (v19 != (_QWORD *)-8)
      return i;
    --*((_DWORD *)a1 + 4);
  }
  v24 = (char *)operator new(__n + 17, (std::align_val_t)8uLL);
  v25 = v24;
  v26 = v24 + 16;
  if (__n)
    memcpy(v24 + 16, a2, __n);
  v26[__n] = 0;
  *(_QWORD *)v25 = __n;
  *((_DWORD *)v25 + 2) = *v28;
  *i = v25;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v18));
        !*i || *i == -8;
  return i;
}

uint64_t **sub_1C592E208(uint64_t **a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x38uLL);
    *((_OWORD *)v7 + 2) = *(_OWORD *)a3;
    v7[6] = *(uint64_t **)(a3 + 16);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

char *sub_1C592E2E4(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  v11 = v10 + 24;
  if (v2 != v3)
  {
    do
    {
      v12 = *(_OWORD *)(v2 - 24);
      *(_QWORD *)(v10 - 9) = *(_QWORD *)(v2 - 9);
      *(_OWORD *)(v10 - 24) = v12;
      v10 -= 24;
      v2 -= 24;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = &v9[24 * v8];
  if (v2)
    operator delete(v2);
  return v11;
}

uint64_t llvm::MCContext::MCContext(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  void **v22;
  _QWORD **v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  const void *v27;
  std::string::size_type v28;
  std::string *p_p;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char *v34;
  std::string __p;

  *(_QWORD *)(a1 + 8) = a9;
  *(_QWORD *)(a1 + 16) = a10;
  v18 = a1 + 24;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)v18, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v19 = *a2;
    *(_QWORD *)(v18 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v18 = v19;
  }
  v20 = *(__int128 *)((char *)a2 + 24);
  v21 = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 48) = v20;
  *(_QWORD *)(a1 + 64) = v21;
  *(_QWORD *)(a1 + 72) = a6;
  *(_QWORD *)(a1 + 112) = &off_1E8180308;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 120) = sub_1C592E974;
  *(_QWORD *)(a1 + 136) = a1 + 112;
  *(_DWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 152) = a3;
  *(_QWORD *)(a1 + 160) = a4;
  *(_QWORD *)(a1 + 176) = a5;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 208) = a1 + 224;
  *(_QWORD *)(a1 + 216) = 0x400000000;
  *(_QWORD *)(a1 + 256) = a1 + 272;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_QWORD *)(a1 + 280) = 1;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 304) = a1 + 320;
  *(_QWORD *)(a1 + 312) = 0x400000000;
  *(_QWORD *)(a1 + 352) = a1 + 368;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = a1 + 416;
  *(_QWORD *)(a1 + 408) = 0x400000000;
  *(_QWORD *)(a1 + 448) = a1 + 464;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = a1 + 512;
  *(_QWORD *)(a1 + 504) = 0x400000000;
  *(_QWORD *)(a1 + 544) = a1 + 560;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 592) = a1 + 608;
  *(_QWORD *)(a1 + 600) = 0x400000000;
  *(_QWORD *)(a1 + 640) = a1 + 656;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_QWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 688) = a1 + 704;
  *(_QWORD *)(a1 + 696) = 0x400000000;
  *(_QWORD *)(a1 + 736) = a1 + 752;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_QWORD *)(a1 + 776) = 0;
  *(_QWORD *)(a1 + 784) = a1 + 800;
  *(_QWORD *)(a1 + 792) = 0x400000000;
  *(_QWORD *)(a1 + 832) = a1 + 848;
  *(_QWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_QWORD *)(a1 + 880) = a1 + 896;
  *(_QWORD *)(a1 + 888) = 0x400000000;
  *(_QWORD *)(a1 + 928) = a1 + 944;
  *(_QWORD *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_QWORD *)(a1 + 976) = a1 + 992;
  *(_QWORD *)(a1 + 984) = 0x400000000;
  *(_QWORD *)(a1 + 1024) = a1 + 1040;
  *(_OWORD *)(a1 + 1060) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_DWORD *)(a1 + 1076) = 16;
  *(_QWORD *)(a1 + 1080) = a1 + 192;
  *(_DWORD *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_DWORD *)(a1 + 1132) = 16;
  *(_QWORD *)(a1 + 1136) = a1 + 192;
  *(_DWORD *)(a1 + 1160) = 0;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_DWORD *)(a1 + 1164) = 16;
  *(_QWORD *)(a1 + 1168) = a1 + 192;
  *(_DWORD *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_DWORD *)(a1 + 1196) = 16;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_BYTE *)(a1 + 1264) = 0;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_QWORD *)(a1 + 1272) = a1 + 1296;
  *(_OWORD *)(a1 + 1280) = xmmword_1C85F20B0;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_QWORD *)(a1 + 1424) = a1 + 1432;
  v22 = (void **)(a1 + 1448);
  *(_QWORD *)(a1 + 1464) = 0;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_QWORD *)(a1 + 1472) = a1 + 1480;
  *(_QWORD *)(a1 + 1496) = 0;
  *(_WORD *)(a1 + 1504) = 0;
  *(_BYTE *)(a1 + 1506) = 1;
  *(_DWORD *)(a1 + 1510) = 0;
  *(_DWORD *)(a1 + 1507) = 0;
  *(_QWORD *)(a1 + 1532) = 0;
  *(_OWORD *)(a1 + 1516) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_DWORD *)(a1 + 1624) = 16777220;
  *(_BYTE *)(a1 + 1628) = 0;
  *(_DWORD *)(a1 + 1632) = 0;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_QWORD *)(a1 + 1640) = a1 + 1648;
  *(_DWORD *)(a1 + 1680) = 0;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_DWORD *)(a1 + 1684) = 16;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_QWORD *)(a1 + 1696) = a1 + 1704;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1752) = 0u;
  *(_QWORD *)(a1 + 1720) = a1 + 1728;
  *(_QWORD *)(a1 + 1744) = a1 + 1752;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_QWORD *)(a1 + 1768) = a1 + 1776;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_QWORD *)(a1 + 1792) = a1 + 1800;
  *(_DWORD *)(a1 + 1832) = 0;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_DWORD *)(a1 + 1836) = 16;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_QWORD *)(a1 + 1864) = a1 + 1880;
  *(_QWORD *)(a1 + 1872) = 0x400000000;
  *(_QWORD *)(a1 + 1912) = a1 + 1928;
  *(_QWORD *)(a1 + 1936) = 0;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_BYTE *)(a1 + 1944) = a8;
  *(_QWORD *)(a1 + 1952) = a7;
  *(_BYTE *)(a1 + 1960) = 0;
  *(_DWORD *)(a1 + 1984) = 0;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_DWORD *)(a1 + 1988) = 96;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_QWORD *)(a1 + 2000) = a1 + 2008;
  *(_DWORD *)(a1 + 2040) = 0;
  *(_OWORD *)(a1 + 2024) = 0u;
  if (a7)
  {
    if (*(char *)(a7 + 111) < 0)
      sub_1C47EBC30(&__p, *(void **)(a7 + 88), *(_QWORD *)(a7 + 96));
    else
      __p = *(std::string *)(a7 + 88);
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
  }
  std::string::operator=((std::string *)(a1 + 1232), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v23 = *(_QWORD ***)(a1 + 72);
  if (v23)
  {
    v24 = *v23;
    if (-1431655765 * ((*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) - (_QWORD)v24) >> 3))
    {
      v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v24 + 16))(*v24);
      if (v26 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v27 = (const void *)v25;
      v28 = v26;
      if (v26 >= 0x17)
      {
        v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v30 = v26 | 7;
        v31 = v30 + 1;
        p_p = (std::string *)operator new(v30 + 1);
        __p.__r_.__value_.__l.__size_ = v28;
        __p.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v26;
        p_p = &__p;
        if (!v26)
          goto LABEL_21;
      }
      memmove(p_p, v27, v28);
LABEL_21:
      p_p->__r_.__value_.__s.__data_[v28] = 0;
      if (*(char *)(a1 + 1471) < 0)
        operator delete(*v22);
      *(_OWORD *)v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 1464) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    }
  }
  v32 = 0;
  switch(*((_DWORD *)a2 + 11))
  {
    case 0:
      v34 = "Cannot initialize MC for unknown object file format.";
      goto LABEL_39;
    case 1:
      if (*((_DWORD *)a2 + 9) != 15)
      {
        v34 = "Cannot initialize MC for non-Windows COFF object files.";
LABEL_39:
        llvm::report_fatal_error((llvm *)v34, (const char *)1);
      }
      v32 = 3;
LABEL_33:
      *(_DWORD *)a1 = v32;
      return a1;
    case 2:
      v32 = 7;
      goto LABEL_33;
    case 3:
      v32 = 1;
      goto LABEL_33;
    case 4:
      v32 = 2;
      goto LABEL_33;
    case 5:
      goto LABEL_33;
    case 6:
      v32 = 4;
      goto LABEL_33;
    case 7:
      v32 = 5;
      goto LABEL_33;
    case 8:
      v34 = "Cannot initialize MC for MetalLib object files.";
      goto LABEL_39;
    case 9:
      v32 = 6;
      goto LABEL_33;
    default:
      return a1;
  }
}

{
  return llvm::MCContext::MCContext(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1C592E974(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  llvm::SMDiagnostic::print(a1, 0, v2, 1, 1);
}

void llvm::MCContext::~MCContext(llvm::MCContext *this)
{
  void *v2;
  char *v3;
  uint64_t v4;
  llvm::CodeViewContext *v5;
  llvm::MCContext *v6;
  uint64_t v7;
  void *v8;
  llvm::SourceMgr *v9;

  if (*((_BYTE *)this + 1944))
    llvm::MCContext::reset(this);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 253), 8);
  sub_1C4FCEA58(*((char **)this + 251));
  sub_1C62B7544((uint64_t)this + 1968);
  sub_1C592FBA4((uint64_t)this + 1848);
  sub_1C4926AE8((uint64_t)this + 1848);
  sub_1C4F02264((uint64_t)this + 1816);
  sub_1C4FCEA58(*((char **)this + 225));
  sub_1C4FCEA58(*((char **)this + 222));
  sub_1C4FCEA58(*((char **)this + 219));
  sub_1C4FCEA58(*((char **)this + 216));
  sub_1C4FCEA58(*((char **)this + 213));
  sub_1C61DF2A0((uint64_t)this + 1664);
  sub_1C62B723C(*((_QWORD **)this + 206));
  v2 = (void *)*((_QWORD *)this + 196);
  if (v2)
  {
    *((_QWORD *)this + 197) = v2;
    operator delete(v2);
  }
  sub_1C5408A20((_QWORD *)this + 190);
  sub_1C5934940(*((char **)this + 185));
  if (*((char *)this + 1471) < 0)
    operator delete(*((void **)this + 181));
  sub_1C62B7500(*((_QWORD **)this + 179));
  v3 = (char *)*((_QWORD *)this + 159);
  if (v3 != (char *)this + 1296)
    free(v3);
  v4 = *((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*((char *)this + 1255) < 0)
    operator delete(*((void **)this + 154));
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 151), 8);
  sub_1C51838C8((uint64_t)this + 1176);
  free(*((void **)this + 143));
  free(*((void **)this + 139));
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 136), 8);
  free(*((void **)this + 132));
  sub_1C592FA88((uint64_t)this + 960);
  sub_1C4926AE8((uint64_t)this + 960);
  sub_1C592F88C((uint64_t)this + 864);
  sub_1C4926AE8((uint64_t)this + 864);
  sub_1C592F690((uint64_t)this + 768);
  sub_1C4926AE8((uint64_t)this + 768);
  sub_1C592F494((uint64_t)this + 672);
  sub_1C4926AE8((uint64_t)this + 672);
  sub_1C592F494((uint64_t)this + 576);
  sub_1C4926AE8((uint64_t)this + 576);
  sub_1C592F09C((uint64_t)this + 480);
  sub_1C4926AE8((uint64_t)this + 480);
  sub_1C592F298((uint64_t)this + 384);
  sub_1C4926AE8((uint64_t)this + 384);
  sub_1C592F09C((uint64_t)this + 288);
  sub_1C4926AE8((uint64_t)this + 288);
  sub_1C4926AE8((uint64_t)this + 192);
  v5 = (llvm::CodeViewContext *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v5)
  {
    llvm::CodeViewContext::~CodeViewContext(v5);
    MEMORY[0x1CAA32FC0]();
  }
  v6 = (llvm::MCContext *)*((_QWORD *)this + 17);
  if (v6 == (llvm::MCContext *)((char *)this + 112))
  {
    v7 = 4;
    v6 = (llvm::MCContext *)((char *)this + 112);
  }
  else
  {
    if (!v6)
      goto LABEL_20;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_20:
  v8 = (void *)*((_QWORD *)this + 11);
  if (v8)
  {
    *((_QWORD *)this + 12) = v8;
    operator delete(v8);
  }
  v9 = (llvm::SourceMgr *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    llvm::SourceMgr::~SourceMgr(v9);
    MEMORY[0x1CAA32FC0]();
  }
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

_DWORD *llvm::MCContext::reset(llvm::MCContext *this)
{
  llvm::SourceMgr *v2;
  _QWORD *v3;
  void (**v4)(_QWORD *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  llvm::CodeViewContext *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _DWORD *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = (llvm::SourceMgr *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  if (v2)
  {
    llvm::SourceMgr::~SourceMgr(v2);
    MEMORY[0x1CAA32FC0]();
  }
  *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
  v37[0] = &off_1E8180308;
  v37[1] = sub_1C592E974;
  v38 = v37;
  sub_1C48C35D8(v37, (_QWORD *)this + 14);
  v3 = v38;
  if (v38 == v37)
  {
    v4 = (void (**)(_QWORD *))(v37[0] + 32);
    v3 = v37;
LABEL_5:
    (*v4)(v3);
    goto LABEL_6;
  }
  if (v38)
  {
    v4 = (void (**)(_QWORD *))(*v38 + 40);
    goto LABEL_5;
  }
LABEL_6:
  sub_1C592F09C((uint64_t)this + 288);
  sub_1C592F298((uint64_t)this + 384);
  sub_1C592F494((uint64_t)this + 576);
  sub_1C592F09C((uint64_t)this + 480);
  sub_1C592F690((uint64_t)this + 768);
  sub_1C592F88C((uint64_t)this + 864);
  sub_1C592FA88((uint64_t)this + 960);
  sub_1C592F494((uint64_t)this + 672);
  sub_1C592FBA4((uint64_t)this + 1848);
  if (*((_DWORD *)this + 289))
  {
    v27 = *((unsigned int *)this + 288);
    if ((_DWORD)v27)
    {
      v28 = 0;
      v29 = 8 * v27;
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 143) + v28) = 0;
        v28 += 8;
      }
      while (v29 != v28);
    }
    *(_QWORD *)((char *)this + 1156) = 0;
  }
  if (*((_DWORD *)this + 281))
  {
    v30 = *((unsigned int *)this + 280);
    if ((_DWORD)v30)
    {
      v31 = 0;
      v32 = 8 * v30;
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 139) + v31) = 0;
        v31 += 8;
      }
      while (v32 != v31);
    }
    *(_QWORD *)((char *)this + 1124) = 0;
  }
  if (*((_DWORD *)this + 267))
  {
    v5 = *((unsigned int *)this + 266);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = 8 * v5;
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 132) + v6) = 0;
        v6 += 8;
      }
      while (v7 != v6);
    }
    *(_QWORD *)((char *)this + 1068) = 0;
  }
  sub_1C4926A50((uint64_t)this + 192);
  v8 = *((_DWORD *)this + 304);
  if (v8 || *((_DWORD *)this + 305))
  {
    v23 = (unsigned int *)((char *)this + 1208);
    v24 = *((unsigned int *)this + 306);
    if (v24 <= 4 * v8 || v24 < 0x41)
    {
      if ((_DWORD)v24)
      {
        v33 = *(_DWORD **)v23;
        v34 = 16 * v24;
        do
        {
          *v33 = -1;
          v33 += 4;
          v34 -= 16;
        }
        while (v34);
      }
      *((_QWORD *)this + 152) = 0;
    }
    else
    {
      sub_1C5934B0C(v23);
    }
  }
  *((_QWORD *)this + 160) = 0;
  if (*((char *)this + 1471) < 0)
  {
    **((_BYTE **)this + 181) = 0;
    *((_QWORD *)this + 182) = 0;
  }
  else
  {
    *((_BYTE *)this + 1448) = 0;
    *((_BYTE *)this + 1471) = 0;
  }
  sub_1C5934940(*((char **)this + 185));
  *((_QWORD *)this + 184) = (char *)this + 1480;
  *((_QWORD *)this + 186) = 0;
  *((_QWORD *)this + 185) = 0;
  v9 = *((_DWORD *)this + 382);
  if (v9 || *((_DWORD *)this + 383))
  {
    v25 = (unsigned int *)((char *)this + 1520);
    v26 = *((unsigned int *)this + 384);
    if (v26 <= 4 * v9 || v26 < 0x41)
    {
      if ((_DWORD)v26)
      {
        v35 = *(_QWORD **)v25;
        v36 = 8 * v26;
        do
        {
          *v35++ = -4096;
          v36 -= 8;
        }
        while (v36);
      }
      *((_QWORD *)this + 191) = 0;
    }
    else
    {
      sub_1C4DFE514(v25);
    }
  }
  *((_QWORD *)this + 194) = *((_QWORD *)this + 193);
  *((_QWORD *)this + 197) = *((_QWORD *)this + 196);
  *((_DWORD *)this + 408) = 0;
  *((_QWORD *)this + 187) = 0;
  *((_QWORD *)this + 188) = 0x10000;
  *(_OWORD *)((char *)this + 1592) = 0u;
  v10 = (llvm::CodeViewContext *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v10)
  {
    llvm::CodeViewContext::~CodeViewContext(v10);
    MEMORY[0x1CAA32FC0]();
  }
  if (*((_DWORD *)this + 419))
  {
    v11 = *((unsigned int *)this + 418);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 8 * v11;
      do
      {
        v14 = *((_QWORD *)this + 208);
        v15 = *(_QWORD *)(v14 + v12);
        if (v15)
          v16 = v15 == -8;
        else
          v16 = 1;
        if (!v16)
          MEMORY[0x1CAA32FB4]();
        *(_QWORD *)(v14 + v12) = 0;
        v12 += 8;
      }
      while (v13 != v12);
    }
    *(_QWORD *)((char *)this + 1676) = 0;
  }
  sub_1C4FCEA58(*((char **)this + 213));
  *((_QWORD *)this + 212) = (char *)this + 1704;
  *((_QWORD *)this + 214) = 0;
  *((_QWORD *)this + 213) = 0;
  sub_1C4FCEA58(*((char **)this + 219));
  *((_QWORD *)this + 218) = (char *)this + 1752;
  *((_QWORD *)this + 220) = 0;
  *((_QWORD *)this + 219) = 0;
  sub_1C4FCEA58(*((char **)this + 216));
  *((_QWORD *)this + 215) = (char *)this + 1728;
  *((_QWORD *)this + 217) = 0;
  *((_QWORD *)this + 216) = 0;
  sub_1C4FCEA58(*((char **)this + 222));
  *((_QWORD *)this + 221) = (char *)this + 1776;
  *((_QWORD *)this + 223) = 0;
  *((_QWORD *)this + 222) = 0;
  sub_1C4FCEA58(*((char **)this + 225));
  *((_QWORD *)this + 224) = (char *)this + 1800;
  *((_QWORD *)this + 226) = 0;
  *((_QWORD *)this + 225) = 0;
  sub_1C4FCEA58(*((char **)this + 251));
  *((_QWORD *)this + 250) = (char *)this + 2008;
  *((_QWORD *)this + 252) = 0;
  *((_QWORD *)this + 251) = 0;
  result = sub_1C5934C08((_DWORD *)this + 506);
  if (*((_DWORD *)this + 297))
  {
    v18 = *((unsigned int *)this + 296);
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = 8 * v18;
      do
      {
        v21 = *((_QWORD *)this + 147);
        result = *(_DWORD **)(v21 + v19);
        if (result)
          v22 = result + 2 == 0;
        else
          v22 = 1;
        if (!v22)
          result = (_DWORD *)MEMORY[0x1CAA32FB4]();
        *(_QWORD *)(v21 + v19) = 0;
        v19 += 8;
      }
      while (v20 != v19);
    }
    *(_QWORD *)((char *)this + 1188) = 0;
  }
  *((_BYTE *)this + 1627) = 1;
  *((_WORD *)this + 756) = 0;
  *((_DWORD *)this + 379) = 0;
  *((_BYTE *)this + 1960) = 0;
  return result;
}

uint64_t sub_1C592F09C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (_QWORD *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v10 = v9 + 31;
      while ((unint64_t)v10 <= v8)
      {
        v11 = v10;
        *v9 = &unk_1E81820A0;
        v12 = (_QWORD *)v9[19];
        if (v12 != v9 + 21)
        {
          v18 = v9;
          free(v12);
          v9 = v18;
        }
        v13 = (_QWORD *)v9[15];
        if (v13 != v9 + 17)
        {
          v19 = v9;
          free(v13);
          v9 = v19;
        }
        v14 = v9 + 13;
        v15 = (uint64_t *)v9[14];
        if (v15 != v9 + 13)
        {
          do
          {
            v16 = *v15;
            v17 = (uint64_t *)v15[1];
            *v17 = *v15;
            *(_QWORD *)(v16 + 8) = v17;
            *v15 = 0;
            v15[1] = 0;
            llvm::MCFragment::destroy((uint64_t)v15);
            v15 = v17;
          }
          while (v17 != v14);
        }
        v10 = v11 + 31;
        v9 = v11;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v20 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD **)(a1 + 64);
    v22 = &v21[2 * v20];
    do
    {
      v23 = (_QWORD *)((*v21 + 7) & 0xFFFFFFFFFFFFFFF8);
      v24 = *v21 + v21[1];
      v25 = v23 + 31;
      while ((unint64_t)v25 <= v24)
      {
        v26 = v25;
        *v23 = &unk_1E81820A0;
        v27 = (_QWORD *)v23[19];
        if (v27 != v23 + 21)
          free(v27);
        v28 = (_QWORD *)v23[15];
        if (v28 != v23 + 17)
          free(v28);
        v29 = v23 + 13;
        v30 = (uint64_t *)v23[14];
        if (v30 != v23 + 13)
        {
          do
          {
            v31 = *v30;
            v32 = (uint64_t *)v30[1];
            *v32 = *v30;
            *(_QWORD *)(v31 + 8) = v32;
            *v30 = 0;
            v30[1] = 0;
            llvm::MCFragment::destroy((uint64_t)v30);
            v30 = v32;
          }
          while (v32 != v29);
        }
        v25 = v26 + 31;
        v23 = v26;
      }
      v21 += 2;
    }
    while (v21 != v22);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C592F298(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (_QWORD *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v10 = v9 + 32;
      while ((unint64_t)v10 <= v8)
      {
        v11 = v10;
        *v9 = &unk_1E81820A0;
        v12 = (_QWORD *)v9[19];
        if (v12 != v9 + 21)
        {
          v18 = v9;
          free(v12);
          v9 = v18;
        }
        v13 = (_QWORD *)v9[15];
        if (v13 != v9 + 17)
        {
          v19 = v9;
          free(v13);
          v9 = v19;
        }
        v14 = v9 + 13;
        v15 = (uint64_t *)v9[14];
        if (v15 != v9 + 13)
        {
          do
          {
            v16 = *v15;
            v17 = (uint64_t *)v15[1];
            *v17 = *v15;
            *(_QWORD *)(v16 + 8) = v17;
            *v15 = 0;
            v15[1] = 0;
            llvm::MCFragment::destroy((uint64_t)v15);
            v15 = v17;
          }
          while (v17 != v14);
        }
        v10 = v11 + 32;
        v9 = v11;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v20 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD **)(a1 + 64);
    v22 = &v21[2 * v20];
    do
    {
      v23 = (_QWORD *)((*v21 + 7) & 0xFFFFFFFFFFFFFFF8);
      v24 = *v21 + v21[1];
      v25 = v23 + 32;
      while ((unint64_t)v25 <= v24)
      {
        v26 = v25;
        *v23 = &unk_1E81820A0;
        v27 = (_QWORD *)v23[19];
        if (v27 != v23 + 21)
          free(v27);
        v28 = (_QWORD *)v23[15];
        if (v28 != v23 + 17)
          free(v28);
        v29 = v23 + 13;
        v30 = (uint64_t *)v23[14];
        if (v30 != v23 + 13)
        {
          do
          {
            v31 = *v30;
            v32 = (uint64_t *)v30[1];
            *v32 = *v30;
            *(_QWORD *)(v31 + 8) = v32;
            *v30 = 0;
            v30[1] = 0;
            llvm::MCFragment::destroy((uint64_t)v30);
            v30 = v32;
          }
          while (v32 != v29);
        }
        v25 = v26 + 32;
        v23 = v26;
      }
      v21 += 2;
    }
    while (v21 != v22);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C592F494(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (_QWORD *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v10 = v9 + 28;
      while ((unint64_t)v10 <= v8)
      {
        v11 = v10;
        *v9 = &unk_1E81820A0;
        v12 = (_QWORD *)v9[19];
        if (v12 != v9 + 21)
        {
          v18 = v9;
          free(v12);
          v9 = v18;
        }
        v13 = (_QWORD *)v9[15];
        if (v13 != v9 + 17)
        {
          v19 = v9;
          free(v13);
          v9 = v19;
        }
        v14 = v9 + 13;
        v15 = (uint64_t *)v9[14];
        if (v15 != v9 + 13)
        {
          do
          {
            v16 = *v15;
            v17 = (uint64_t *)v15[1];
            *v17 = *v15;
            *(_QWORD *)(v16 + 8) = v17;
            *v15 = 0;
            v15[1] = 0;
            llvm::MCFragment::destroy((uint64_t)v15);
            v15 = v17;
          }
          while (v17 != v14);
        }
        v10 = v11 + 28;
        v9 = v11;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v20 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD **)(a1 + 64);
    v22 = &v21[2 * v20];
    do
    {
      v23 = (_QWORD *)((*v21 + 7) & 0xFFFFFFFFFFFFFFF8);
      v24 = *v21 + v21[1];
      v25 = v23 + 28;
      while ((unint64_t)v25 <= v24)
      {
        v26 = v25;
        *v23 = &unk_1E81820A0;
        v27 = (_QWORD *)v23[19];
        if (v27 != v23 + 21)
          free(v27);
        v28 = (_QWORD *)v23[15];
        if (v28 != v23 + 17)
          free(v28);
        v29 = v23 + 13;
        v30 = (uint64_t *)v23[14];
        if (v30 != v23 + 13)
        {
          do
          {
            v31 = *v30;
            v32 = (uint64_t *)v30[1];
            *v32 = *v30;
            *(_QWORD *)(v31 + 8) = v32;
            *v30 = 0;
            v30[1] = 0;
            llvm::MCFragment::destroy((uint64_t)v30);
            v30 = v32;
          }
          while (v32 != v29);
        }
        v25 = v26 + 28;
        v23 = v26;
      }
      v21 += 2;
    }
    while (v21 != v22);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C592F690(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (_QWORD *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v10 = v9 + 33;
      while ((unint64_t)v10 <= v8)
      {
        v11 = v10;
        *v9 = &unk_1E81820A0;
        v12 = (_QWORD *)v9[19];
        if (v12 != v9 + 21)
        {
          v18 = v9;
          free(v12);
          v9 = v18;
        }
        v13 = (_QWORD *)v9[15];
        if (v13 != v9 + 17)
        {
          v19 = v9;
          free(v13);
          v9 = v19;
        }
        v14 = v9 + 13;
        v15 = (uint64_t *)v9[14];
        if (v15 != v9 + 13)
        {
          do
          {
            v16 = *v15;
            v17 = (uint64_t *)v15[1];
            *v17 = *v15;
            *(_QWORD *)(v16 + 8) = v17;
            *v15 = 0;
            v15[1] = 0;
            llvm::MCFragment::destroy((uint64_t)v15);
            v15 = v17;
          }
          while (v17 != v14);
        }
        v10 = v11 + 33;
        v9 = v11;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v20 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD **)(a1 + 64);
    v22 = &v21[2 * v20];
    do
    {
      v23 = (_QWORD *)((*v21 + 7) & 0xFFFFFFFFFFFFFFF8);
      v24 = *v21 + v21[1];
      v25 = v23 + 33;
      while ((unint64_t)v25 <= v24)
      {
        v26 = v25;
        *v23 = &unk_1E81820A0;
        v27 = (_QWORD *)v23[19];
        if (v27 != v23 + 21)
          free(v27);
        v28 = (_QWORD *)v23[15];
        if (v28 != v23 + 17)
          free(v28);
        v29 = v23 + 13;
        v30 = (uint64_t *)v23[14];
        if (v30 != v23 + 13)
        {
          do
          {
            v31 = *v30;
            v32 = (uint64_t *)v30[1];
            *v32 = *v30;
            *(_QWORD *)(v31 + 8) = v32;
            *v30 = 0;
            v30[1] = 0;
            llvm::MCFragment::destroy((uint64_t)v30);
            v30 = v32;
          }
          while (v32 != v29);
        }
        v25 = v26 + 33;
        v23 = v26;
      }
      v21 += 2;
    }
    while (v21 != v22);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C592F88C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (_QWORD *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v10 = v9 + 34;
      while ((unint64_t)v10 <= v8)
      {
        v11 = v10;
        *v9 = &unk_1E81820A0;
        v12 = (_QWORD *)v9[19];
        if (v12 != v9 + 21)
        {
          v18 = v9;
          free(v12);
          v9 = v18;
        }
        v13 = (_QWORD *)v9[15];
        if (v13 != v9 + 17)
        {
          v19 = v9;
          free(v13);
          v9 = v19;
        }
        v14 = v9 + 13;
        v15 = (uint64_t *)v9[14];
        if (v15 != v9 + 13)
        {
          do
          {
            v16 = *v15;
            v17 = (uint64_t *)v15[1];
            *v17 = *v15;
            *(_QWORD *)(v16 + 8) = v17;
            *v15 = 0;
            v15[1] = 0;
            llvm::MCFragment::destroy((uint64_t)v15);
            v15 = v17;
          }
          while (v17 != v14);
        }
        v10 = v11 + 34;
        v9 = v11;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v20 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v20)
  {
    v21 = *(_QWORD **)(a1 + 64);
    v22 = &v21[2 * v20];
    do
    {
      v23 = (_QWORD *)((*v21 + 7) & 0xFFFFFFFFFFFFFFF8);
      v24 = *v21 + v21[1];
      v25 = v23 + 34;
      while ((unint64_t)v25 <= v24)
      {
        v26 = v25;
        *v23 = &unk_1E81820A0;
        v27 = (_QWORD *)v23[19];
        if (v27 != v23 + 21)
          free(v27);
        v28 = (_QWORD *)v23[15];
        if (v28 != v23 + 17)
          free(v28);
        v29 = v23 + 13;
        v30 = (uint64_t *)v23[14];
        if (v30 != v23 + 13)
        {
          do
          {
            v31 = *v30;
            v32 = (uint64_t *)v30[1];
            *v32 = *v30;
            *(_QWORD *)(v31 + 8) = v32;
            *v30 = 0;
            v30[1] = 0;
            llvm::MCFragment::destroy((uint64_t)v30);
            v30 = v32;
          }
          while (v32 != v29);
        }
        v25 = v26 + 34;
        v23 = v26;
      }
      v21 += 2;
    }
    while (v21 != v22);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C592FA88(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t j;
  void *v16;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 168; i <= v8; i += 168)
      {
        v10 = *(void **)(i - 152);
        if ((void *)(i - 136) != v10)
          free(v10);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v11 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(a1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      v14 = *v12 + v12[1];
      for (j = ((*v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 168; j <= v14; j += 168)
      {
        v16 = *(void **)(j - 152);
        if ((void *)(j - 136) != v16)
          free(v16);
      }
      v12 += 2;
    }
    while (v12 != v13);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C592FBA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void (***v14)(_QWORD);
  unint64_t v15;
  void (***v16)(_QWORD);

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (void (***)(_QWORD))((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v10 = v9 + 32;
      while ((unint64_t)v10 <= v8)
      {
        (**v9)(v9);
        v10 = v9 + 64;
        v9 += 32;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v11 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(a1 + 64);
    v13 = &v12[2 * v11];
    do
    {
      v14 = (void (***)(_QWORD))((*v12 + 7) & 0xFFFFFFFFFFFFFFF8);
      v15 = *v12 + v12[1];
      v16 = v14 + 32;
      while ((unint64_t)v16 <= v15)
      {
        (**v14)(v14);
        v16 = v14 + 64;
        v14 += 32;
      }
      v12 += 2;
    }
    while (v12 != v13);
  }
  return sub_1C4926A50(a1);
}

double llvm::MCContext::createMCInst(llvm::MCContext *this)
{
  unint64_t v1;
  double result;

  v1 = sub_1C484358C((uint64_t)this + 960, 168, 3);
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = v1 + 32;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(v1 + 24) = 0x800000000;
  *(_BYTE *)(v1 + 160) = 0;
  return result;
}

unint64_t llvm::MCContext::getOrCreateSymbol(uint64_t a1, uint64_t a2)
{
  size_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  size_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  _QWORD **i;
  unint64_t Symbol;
  const char *v26;
  char v27;
  _QWORD *v28;
  void *__s1;
  void *v30;
  __int128 v31;
  _QWORD v32[18];

  v32[16] = *MEMORY[0x1E0C80C00];
  v30 = v32;
  v31 = xmmword_1C85F20B0;
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v3 = 0;
    v4 = 0;
    switch(*(_BYTE *)(a2 + 32))
    {
      case 1:
        break;
      case 3:
        v4 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2)
          v3 = strlen(*(const char **)a2);
        else
          v3 = 0;
        break;
      case 4:
        v26 = *(const char **)a2;
        v27 = *(_BYTE *)(*(_QWORD *)a2 + 23);
        if (v27 >= 0)
          v4 = *(unsigned __int8 **)a2;
        else
          v4 = *(unsigned __int8 **)v26;
        if (v27 >= 0)
          v3 = v27 & 0x7F;
        else
          v3 = *((_QWORD *)v26 + 1);
        break;
      case 5:
        v4 = *(unsigned __int8 **)a2;
        v3 = *(_QWORD *)(a2 + 8);
        break;
      default:
        goto LABEL_35;
    }
  }
  else
  {
LABEL_35:
    llvm::Twine::toVector(a2, (uint64_t)&v30);
    v4 = (unsigned __int8 *)v30;
    v3 = v31;
  }
  v5 = *(_DWORD *)(a1 + 1064);
  if (!v5)
  {
    *(_QWORD *)(a1 + 1068) = 0;
    v28 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v28)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v28[16] = 2;
    *(_QWORD *)(a1 + 1056) = v28;
    v5 = 16;
    *(_DWORD *)(a1 + 1064) = 16;
  }
  __s1 = v4;
  v6 = 0;
  if (v3)
  {
    v7 = v3;
    do
    {
      v8 = *v4++;
      v6 = 33 * v6 + v8;
      --v7;
    }
    while (v7);
  }
  v9 = *(_QWORD *)(a1 + 1056);
  v10 = v5 - 1;
  v11 = v9 + 8 * v5 + 8;
  v12 = -1;
  v13 = 1;
  v14 = v6;
  while (1)
  {
    v15 = v14 & v10;
    v16 = *(_QWORD **)(v9 + 8 * v15);
    if (!v16)
      break;
    if (v16 == (_QWORD *)-8)
    {
      if (v12 == -1)
        v12 = v14 & v10;
    }
    else if (*(_DWORD *)(v11 + 4 * v15) == v6
           && v3 == *v16
           && (!v3 || !memcmp(__s1, (char *)v16 + *(unsigned int *)(a1 + 1076), v3)))
    {
      goto LABEL_22;
    }
    v14 = v13 + v15;
    ++v13;
  }
  v17 = v12;
  if (v12 == -1)
  {
    v17 = v15;
    v15 = v15;
  }
  else
  {
    v15 = v12;
  }
  *(_DWORD *)(v11 + 4 * v17) = v6;
  v16 = *(_QWORD **)(v9 + 8 * v15);
LABEL_22:
  if (v16)
  {
    v21 = (unsigned __int8 *)__s1;
    if (v16 != (_QWORD *)-8)
      goto LABEL_30;
    --*(_DWORD *)(a1 + 1072);
  }
  v18 = sub_1C484358C(*(_QWORD *)(a1 + 1080), v3 + 17, 3);
  v19 = (_QWORD *)v18;
  v20 = v18 + 16;
  v21 = (unsigned __int8 *)__s1;
  if (v3)
    memcpy((void *)(v18 + 16), __s1, v3);
  *(_BYTE *)(v20 + v3) = 0;
  *v19 = v3;
  v19[1] = 0;
  *(_QWORD *)(v9 + 8 * v15) = v19;
  ++*(_DWORD *)(a1 + 1068);
  for (i = (_QWORD **)(*(_QWORD *)(a1 + 1056)
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 1056), v15));
        ;
        ++i)
  {
    v16 = *i;
    if (*i && v16 + 1 != 0)
      break;
  }
LABEL_30:
  Symbol = v16[1];
  if (!Symbol)
  {
    Symbol = llvm::MCContext::createSymbol(a1, v21, v3, 0, 0);
    v16[1] = Symbol;
  }
  if (v30 != v32)
    free(v30);
  return Symbol;
}

unint64_t llvm::MCContext::createSymbol(uint64_t a1, unsigned __int8 *a2, size_t a3, int a4, int a5)
{
  unint64_t v6;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  size_t v11;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t *i;
  _QWORD *v38;
  uint64_t v40;
  size_t v41;
  unint64_t v42;
  size_t v43;
  unsigned int v44;
  int v45;
  size_t v46;
  unsigned __int8 *v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t *j;
  _QWORD *v62;
  unint64_t SymbolImpl;
  llvm::StringMapImpl *v65;
  int v66;
  uint64_t v67;
  int __src;
  unsigned __int8 *__srca;
  _QWORD v71[2];
  uint64_t v72;
  int v73;
  void *v74;
  __int128 v75;
  _QWORD v76[18];

  v6 = a3;
  v8 = a1;
  v76[16] = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    if (!*(_BYTE *)(a1 + 1628))
      return llvm::MCContext::createSymbolImpl((_DWORD *)a1, 0, 1);
    goto LABEL_3;
  }
  if (*(_BYTE *)(a1 + 1627) && (v10 = *(_QWORD *)(a1 + 152), v11 = *(_QWORD *)(v10 + 96), v6 >= v11))
  {
    if (!v11)
    {
LABEL_3:
      v9 = 1;
      goto LABEL_10;
    }
    v13 = memcmp(a2, *(const void **)(v10 + 88), v11);
    v6 = a3;
    v9 = v13 == 0;
  }
  else
  {
    v9 = 0;
  }
LABEL_10:
  v74 = v76;
  v75 = xmmword_1C85F20B0;
  if (v6 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v74, v76, v6, 1);
    v6 = a3;
    v14 = v75;
    if (a3)
      goto LABEL_12;
LABEL_39:
    v15 = v6;
    goto LABEL_13;
  }
  v14 = 0;
  if (!v6)
    goto LABEL_39;
LABEL_12:
  v15 = v6;
  memcpy((char *)v74 + v14, a2, v6);
  v14 = v75;
LABEL_13:
  *(_QWORD *)&v75 = v14 + v15;
  v16 = *(_DWORD *)(v8 + 1184);
  if (!v16)
  {
    *(_QWORD *)(v8 + 1188) = 0;
    v38 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v38)
LABEL_85:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v38[16] = 2;
    *(_QWORD *)(v8 + 1176) = v38;
    v16 = 16;
    *(_DWORD *)(v8 + 1184) = 16;
    v15 = a3;
  }
  v66 = v9;
  __src = a4;
  v17 = 0;
  if (v15)
  {
    v18 = v15;
    v19 = a2;
    do
    {
      v20 = *v19++;
      v17 = 33 * v17 + v20;
      --v18;
    }
    while (v18);
  }
  v21 = *(_QWORD *)(v8 + 1176);
  v22 = v16 - 1;
  v23 = v21 + 8 * v16 + 8;
  v24 = -1;
  v25 = 1;
  v26 = v17;
  v27 = a3;
  while (1)
  {
    v28 = v26 & v22;
    v29 = *(_QWORD *)(v21 + 8 * v28);
    if (!v29)
      break;
    if (v29 == -8)
    {
      if (v24 == -1)
        v24 = v26 & v22;
    }
    else if (*(_DWORD *)(v23 + 4 * v28) == v17 && v27 == *(_QWORD *)v29)
    {
      if (!v27)
        goto LABEL_32;
      v30 = memcmp(a2, (const void *)(v29 + *(unsigned int *)(v8 + 1196)), v27);
      v27 = a3;
      if (!v30)
        goto LABEL_32;
    }
    v26 = v25 + v28;
    ++v25;
  }
  v31 = v24;
  if (v24 == -1)
  {
    v31 = v28;
    v28 = v28;
  }
  else
  {
    v28 = v24;
  }
  *(_DWORD *)(v23 + 4 * v31) = v17;
  v29 = *(_QWORD *)(v21 + 8 * v28);
LABEL_32:
  if (!v29)
    goto LABEL_33;
  if (v29 == -8)
  {
    --*(_DWORD *)(v8 + 1192);
    v27 = a3;
LABEL_33:
    v32 = (char *)operator new(v27 + 17, (std::align_val_t)8uLL);
    v33 = a3;
    v34 = v32;
    v35 = v32 + 16;
    v36 = __src;
    if (a3)
    {
      memcpy(v32 + 16, a2, a3);
      v33 = a3;
    }
    v35[v33] = 0;
    *(_QWORD *)v34 = v33;
    *((_DWORD *)v34 + 2) = 0;
    *(_QWORD *)(v21 + 8 * v28) = v34;
    ++*(_DWORD *)(v8 + 1188);
    for (i = (uint64_t *)(*(_QWORD *)(v8 + 1176)
                        + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(v8 + 1176), v28));
          ;
          ++i)
    {
      v29 = *i;
      if (*i && v29 != -8)
        break;
    }
    goto LABEL_47;
  }
  v36 = __src;
LABEL_47:
  v67 = v8;
  if (!v36)
    goto LABEL_56;
  while (1)
  {
    v40 = v75;
    if ((_QWORD)v75 != a3)
    {
      v41 = a3;
      if ((unint64_t)v75 <= a3)
      {
        if (*((_QWORD *)&v75 + 1) < a3)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v74, v76, a3, 1);
          v41 = a3;
          v40 = v75;
        }
        if (v41 != v40)
        {
          bzero((char *)v74 + v40, v41 - v40);
          v41 = a3;
        }
      }
      *(_QWORD *)&v75 = v41;
    }
    sub_1C613932C((uint64_t)v71, (uint64_t)&v74);
    v42 = *(unsigned int *)(v29 + 8);
    *(_DWORD *)(v29 + 8) = v42 + 1;
    sub_1C5E21910((llvm::raw_ostream *)v71, v42, 0, 0, 0);
    v71[0] = off_1E81A6E70;
    if (v73 == 1 && v72)
      MEMORY[0x1CAA32F9C](v72, 0x1000C8077774924);
LABEL_56:
    v43 = v75;
    __srca = (unsigned __int8 *)v74;
    v44 = *(_DWORD *)(v8 + 1120);
    if (!v44)
    {
      *(_QWORD *)(v8 + 1124) = 0;
      v62 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
      if (!v62)
        goto LABEL_85;
      v62[16] = 2;
      *(_QWORD *)(v8 + 1112) = v62;
      v44 = 16;
      *(_DWORD *)(v8 + 1120) = 16;
    }
    v65 = (llvm::StringMapImpl *)(v8 + 1112);
    v45 = 0;
    if (v43)
    {
      v45 = 0;
      v46 = v43;
      v47 = __srca;
      do
      {
        v48 = *v47++;
        v45 = 33 * v45 + v48;
        --v46;
      }
      while (v46);
    }
    v49 = *(_QWORD *)(v8 + 1112);
    v50 = v44 - 1;
    v51 = v49 + 8 * v44 + 8;
    v52 = -1;
    v53 = 1;
    v54 = v45;
    while (1)
    {
      v55 = v54 & v50;
      v56 = *(_QWORD *)(v49 + 8 * v55);
      if (!v56)
        break;
      if (v56 == -8)
      {
        if (v52 == -1)
          v52 = v54 & v50;
      }
      else if (*(_DWORD *)(v51 + 4 * v55) == v45
             && v43 == *(_QWORD *)v56
             && (!v43 || !memcmp(__srca, (const void *)(v56 + *(unsigned int *)(v67 + 1132)), v43)))
      {
        goto LABEL_75;
      }
      v54 = v53 + v55;
      ++v53;
    }
    v57 = v52;
    if (v52 == -1)
    {
      v57 = v55;
      v55 = v55;
    }
    else
    {
      v55 = v52;
    }
    *(_DWORD *)(v51 + 4 * v57) = v45;
    v56 = *(_QWORD *)(v49 + 8 * v55);
LABEL_75:
    if (!v56)
      break;
    if (v56 == -8)
    {
      --*(_DWORD *)(v67 + 1128);
      break;
    }
    v8 = v67;
    if (!*(_BYTE *)(v56 + 8))
      goto LABEL_91;
  }
  v8 = v67;
  v58 = sub_1C484358C(*(_QWORD *)(v67 + 1136), v43 + 17, 3);
  v59 = v58;
  v60 = v58 + 16;
  if (v43)
    memcpy((void *)(v58 + 16), __srca, v43);
  *(_BYTE *)(v60 + v43) = 0;
  *(_QWORD *)v59 = v43;
  *(_BYTE *)(v59 + 8) = 1;
  *(_QWORD *)(v49 + 8 * v55) = v59;
  ++*(_DWORD *)(v67 + 1124);
  for (j = (uint64_t *)(*(_QWORD *)(v67 + 1112) + 8 * llvm::StringMapImpl::RehashTable(v65, v55)); ; ++j)
  {
    v56 = *j;
    if (*j && v56 != -8)
      break;
  }
LABEL_91:
  *(_BYTE *)(v56 + 8) = 1;
  SymbolImpl = llvm::MCContext::createSymbolImpl((_DWORD *)v8, v56, v66);
  if (v74 != v76)
    free(v74);
  return SymbolImpl;
}

unint64_t llvm::MCContext::createSymbolImpl(_DWORD *a1, uint64_t a2, int a3)
{
  _BOOL4 v5;
  uint64_t v6;
  unint64_t result;
  unsigned int v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  unint64_t v17;

  switch(*a1)
  {
    case 0:
      v5 = a2 != 0;
      if (a2)
        v6 = 40;
      else
        v6 = 32;
      result = sub_1C484358C((uint64_t)(a1 + 48), v6, 3) + 8 * v5;
      v8 = *(_DWORD *)(result + 8) & 0xFFFC0000 | a3 | 0x100;
      goto LABEL_20;
    case 1:
      v10 = a2 != 0;
      if (a2)
        v11 = 48;
      else
        v11 = 40;
      result = sub_1C484358C((uint64_t)(a1 + 48), v11, 3) + 8 * v10;
      *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFFFC0000 | a3 | 0x80;
      *(_WORD *)(result + 12) = 0;
      *(_DWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)result = 4 * v10;
      if (a2)
        *(_QWORD *)(result - 8) = a2;
      *(_QWORD *)(result + 32) = 0;
      return result;
    case 2:
      v5 = a2 != 0;
      if (a2)
        v12 = 40;
      else
        v12 = 32;
      result = sub_1C484358C((uint64_t)(a1 + 48), v12, 3) + 8 * v5;
      v8 = *(_DWORD *)(result + 8) & 0xFFFC0000 | a3 | 0xC0;
      goto LABEL_20;
    case 3:
      v13 = a2 != 0;
      if (a2)
        v14 = 48;
      else
        v14 = 40;
      result = sub_1C484358C((uint64_t)(a1 + 48), v14, 3) + 8 * v13;
      *(_DWORD *)(result + 8) = *(_DWORD *)(result + 8) & 0xFFFC0000 | a3 | 0x40;
      *(_WORD *)(result + 12) = 0;
      *(_DWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)result = 4 * v13;
      if (a2)
        *(_QWORD *)(result - 8) = a2;
      *(_WORD *)(result + 32) = 0;
      return result;
    case 5:
      v15 = a2 != 0;
      if (a2)
        v16 = 192;
      else
        v16 = 184;
      v17 = sub_1C484358C((uint64_t)(a1 + 48), v16, 3);
      return sub_1C62B7280(v17 + 8 * v15, a2, a3);
    case 6:
      return llvm::MCContext::createXCOFFSymbolImpl((uint64_t)a1, a2, a3);
    default:
      v5 = a2 != 0;
      if (a2)
        v9 = 40;
      else
        v9 = 32;
      result = sub_1C484358C((uint64_t)(a1 + 48), v9, 3) + 8 * v5;
      v8 = *(_DWORD *)(result + 8) & 0xFFFC0000 | a3;
LABEL_20:
      *(_DWORD *)(result + 8) = v8;
      *(_WORD *)(result + 12) = 0;
      *(_DWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)result = 4 * v5;
      if (a2)
        *(_QWORD *)(result - 8) = a2;
      return result;
  }
}

unint64_t llvm::MCContext::createXCOFFSymbolImpl(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v11;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  int v21;
  const char *v22;
  size_t v23;
  unint64_t v24;
  size_t v25;
  unsigned int v26;
  int v27;
  size_t v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t *i;
  unint64_t v43;
  size_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned __int8 *__s1;
  size_t __n;
  _QWORD v55[2];
  uint64_t v56;
  int v57;
  void *v58;
  __int128 v59;
  uint64_t v60;
  __int16 v61;
  char *v62;
  __int128 v63;
  _WORD v64[64];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v8 = sub_1C484358C(a1 + 192, 72, 3);
    *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 8) & 0xFFFC0000 | a3 | 0x180;
    *(_WORD *)(v8 + 12) = 0;
    *(_DWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)v8 = 0;
    *(_WORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 40) = 0;
    *(_WORD *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 56) = 0;
    *(_QWORD *)(v8 + 64) = 0;
    return v8;
  }
  v6 = (_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 >= 0xBuLL)
  {
    if (*v6 == 0x656D616E65525F2ELL && *(_QWORD *)(a2 + 19) == 0x2E2E64656D616E65)
      goto LABEL_17;
  }
  else if (v7 != 10)
  {
    goto LABEL_14;
  }
  if (*v6 == 0x64656D616E65525FLL && *(_WORD *)(a2 + 24) == 11822)
  {
LABEL_17:
    v62 = "invalid symbol name from source";
    v64[4] = 259;
    llvm::MCContext::reportError(a1, 0, (uint64_t)&v62);
  }
LABEL_14:
  if ((*(unsigned int (**)(_QWORD, _QWORD *, unint64_t))(**(_QWORD **)(a1 + 152) + 56))(*(_QWORD *)(a1 + 152), v6, v7))
  {
    v11 = sub_1C484358C(a1 + 192, 80, 3);
    *(_DWORD *)(v11 + 16) = *(_DWORD *)(v11 + 16) & 0xFFFC0000 | a3 | 0x180;
    *(_WORD *)(v11 + 20) = 0;
    *(_DWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)v11 = a2;
    *(_WORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0;
    *(_WORD *)(v11 + 56) = 0;
    *(_QWORD *)(v11 + 64) = 0;
    *(_QWORD *)(v11 + 72) = 0;
    *(_QWORD *)(v11 + 8) = 4;
    return v11 + 8;
  }
  v13 = v64;
  v62 = (char *)v64;
  v63 = xmmword_1C85F20B0;
  if (v7 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v62, v64, v7, 1);
    v13 = v62;
    v14 = v63;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    if (!v7)
      goto LABEL_21;
  }
  memcpy((char *)v13 + v14, v6, v7);
  v15 = v63;
LABEL_21:
  v51 = a3;
  *(_QWORD *)&v63 = v15 + v7;
  if (v15 + v7)
  {
    v20 = *v62;
    v21 = *v62;
    if (v21 == 46)
      v22 = "._Renamed..";
    else
      v22 = "_Renamed..";
    if (v21 == 46)
      v23 = 11;
    else
      v23 = 10;
    v58 = &v60;
    *((_QWORD *)&v59 + 1) = 128;
    memcpy(&v60, v22, v23);
    v24 = 0;
    *(_QWORD *)&v59 = v23;
    do
    {
      if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 48))(*(_QWORD *)(a1 + 152), v62[v24])|| v62[v24] == 95)
      {
        sub_1C613932C((uint64_t)v55, (uint64_t)&v58);
        llvm::write_hex((llvm::raw_ostream *)v55, v62[v24], 1, 0, 0);
        v55[0] = off_1E81A6E70;
        if (v57 == 1 && v56)
          MEMORY[0x1CAA32F9C](v56, 0x1000C8077774924);
        v62[v24] = 95;
      }
      ++v24;
      v16 = v63;
    }
    while (v24 < (unint64_t)v63);
    v17 = v62;
    if (v20 == 46)
    {
      if ((_QWORD)v63)
        v17 = v62 + 1;
      if ((unint64_t)v63 - ((_QWORD)v63 != 0) >= (uint64_t)v63 - 1)
        v16 = v63 - 1;
      else
        v16 = v63 - ((_QWORD)v63 != 0);
    }
    v19 = *((_QWORD *)&v59 + 1);
    v18 = v59;
  }
  else
  {
    v16 = 0;
    v58 = &v60;
    v61 = 11822;
    v60 = *(_QWORD *)"_Renamed..";
    v59 = xmmword_1C8662FF0;
    v17 = v62;
    v18 = 10;
    v19 = 128;
  }
  if (v19 < v18 + v16)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v58, &v60, v18 + v16, 1);
    v18 = v59;
    if (!v16)
      goto LABEL_48;
    goto LABEL_47;
  }
  if (v16)
  {
LABEL_47:
    memcpy((char *)v58 + v18, v17, v16);
    v18 = v59;
  }
LABEL_48:
  v25 = v18 + v16;
  *(_QWORD *)&v59 = v18 + v16;
  __s1 = (unsigned __int8 *)v58;
  __n = v18 + v16;
  v26 = *(_DWORD *)(a1 + 1120);
  if (!v26)
  {
    *(_QWORD *)(a1 + 1124) = 0;
    v47 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v47)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v47[16] = 2;
    *(_QWORD *)(a1 + 1112) = v47;
    v26 = 16;
    *(_DWORD *)(a1 + 1120) = 16;
    v25 = __n;
  }
  v27 = 0;
  if (v25)
  {
    v28 = v25;
    v29 = __s1;
    do
    {
      v30 = *v29++;
      v27 = 33 * v27 + v30;
      --v28;
    }
    while (v28);
  }
  v31 = *(_QWORD *)(a1 + 1112);
  v32 = v26 - 1;
  v33 = v31 + 8 * v26 + 8;
  v52 = -1;
  v34 = 1;
  v35 = v27;
  v36 = __n;
  while (1)
  {
    v37 = v35 & v32;
    v38 = *(_QWORD *)(v31 + 8 * v37);
    if (!v38)
      break;
    if (v38 == -8)
    {
      if (v52 == -1)
        v40 = v35 & v32;
      else
        v40 = v52;
      v52 = v40;
    }
    else if (*(_DWORD *)(v33 + 4 * v37) == v27 && v36 == *(_QWORD *)v38)
    {
      if (!v36)
        goto LABEL_68;
      v39 = memcmp(__s1, (const void *)(v38 + *(unsigned int *)(a1 + 1132)), v36);
      v36 = __n;
      if (!v39)
        goto LABEL_68;
    }
    v35 = v34 + v37;
    ++v34;
  }
  v41 = v52;
  if (v52 == -1)
  {
    v41 = v37;
    v37 = v37;
  }
  else
  {
    v37 = v52;
  }
  *(_DWORD *)(v33 + 4 * v41) = v27;
  v38 = *(_QWORD *)(v31 + 8 * v37);
LABEL_68:
  i = (uint64_t *)(v31 + 8 * v37);
  if (!v38)
    goto LABEL_69;
  if (v38 == -8)
  {
    --*(_DWORD *)(a1 + 1128);
    v36 = __n;
LABEL_69:
    v43 = sub_1C484358C(*(_QWORD *)(a1 + 1136), v36 + 17, 3);
    v44 = __n;
    v45 = v43;
    v46 = v43 + 16;
    if (__n)
    {
      memcpy((void *)(v43 + 16), __s1, __n);
      v44 = __n;
    }
    *(_BYTE *)(v46 + v44) = 0;
    *(_QWORD *)v45 = v44;
    *(_BYTE *)(v45 + 8) = 1;
    *i = v45;
    ++*(_DWORD *)(a1 + 1124);
    for (i = (uint64_t *)(*(_QWORD *)(a1 + 1112)
                        + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 1112), v37));
          ;
          ++i)
    {
      v38 = *i;
      if (*i && v38 != -8)
        break;
    }
  }
  *(_BYTE *)(v38 + 8) = 1;
  if (v38)
    v49 = 80;
  else
    v49 = 72;
  v8 = sub_1C484358C(a1 + 192, v49, 3) + 8 * (v38 != 0);
  sub_1C62B7300(v8, *i, v51);
  *(_QWORD *)(v8 + 56) = sub_1C52C2F08((uint64_t)v6, v7);
  *(_QWORD *)(v8 + 64) = v50;
  if (v58 != &v60)
    free(v58);
  if (v62 != (char *)v64)
    free(v62);
  return v8;
}

unint64_t llvm::MCContext::createTempSymbol(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  const void *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  unint64_t Symbol;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  void *v19;
  __int128 v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = xmmword_1C85F20B0;
  sub_1C613932C((uint64_t)v14, (uint64_t)&v19);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(const void **)(v6 + 88);
  v8 = *(_QWORD *)(v6 + 96);
  v9 = v17;
  if (v8 <= v16 - (uint64_t)v17)
  {
    if (v8)
    {
      v13 = *(_QWORD *)(v6 + 96);
      v9 = memcpy(v17, v7, v8);
      v17 += v13;
    }
  }
  else
  {
    v9 = llvm::raw_ostream::write((llvm::raw_ostream *)v14, (const char *)v7, v8);
  }
  llvm::Twine::printOneChild((uint64_t)v9, (llvm::raw_ostream *)v14, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 32));
  llvm::Twine::printOneChild(v10, (llvm::raw_ostream *)v14, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_BYTE *)(a2 + 33));
  v14[0] = off_1E81A6E70;
  if (v18 == 1 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8077774924);
  Symbol = llvm::MCContext::createSymbol(a1, (unsigned __int8 *)v19, v20, a3, 1);
  if (v19 != v21)
    free(v19);
  return Symbol;
}

unint64_t llvm::MCContext::createLinkerPrivateTempSymbol(llvm::MCContext *this)
{
  uint64_t v2;
  size_t v3;
  const void **v4;
  const void *v5;
  char *v6;
  unint64_t Symbol;
  size_t v9;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  void *v15;
  __int128 v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = xmmword_1C85F20B0;
  sub_1C613932C((uint64_t)v10, (uint64_t)&v15);
  v2 = *((_QWORD *)this + 19);
  v3 = *(_QWORD *)(v2 + 128);
  if (v3)
  {
    v4 = (const void **)(v2 + 120);
  }
  else
  {
    v4 = (const void **)(v2 + 88);
    v3 = *(_QWORD *)(v2 + 96);
  }
  v5 = *v4;
  v6 = v13;
  if (v3 <= v12 - (uint64_t)v13)
  {
    if (v3)
    {
      v9 = v3;
      memcpy(v13, v5, v3);
      v6 = &v13[v9];
      v13 += v9;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v10, (const char *)v5, v3);
    v6 = v13;
  }
  if ((unint64_t)(v12 - (_QWORD)v6) > 2)
  {
    v6[2] = 112;
    *(_WORD *)v6 = 28020;
    v13 += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v10, "tmp", 3uLL);
  }
  v10[0] = off_1E81A6E70;
  if (v14 == 1 && v11)
    MEMORY[0x1CAA32F9C](v11, 0x1000C8077774924);
  Symbol = llvm::MCContext::createSymbol((uint64_t)this, (unsigned __int8 *)v15, v16, 1, 0);
  if (v15 != v17)
    free(v15);
  return Symbol;
}

unint64_t llvm::MCContext::createTempSymbol(llvm::MCContext *this)
{
  const char *v2;
  __int16 v3;

  v2 = "tmp";
  v3 = 259;
  return llvm::MCContext::createTempSymbol((uint64_t)this, (uint64_t)&v2, 1);
}

size_t llvm::MCContext::getMachOSection(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, _BYTE *a9)
{
  void **v15;
  size_t v16;
  unsigned int v17;
  int v18;
  size_t v19;
  void **v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  size_t **i;
  _QWORD *v32;
  size_t *v33;
  char *v34;
  _QWORD *v35;
  char v36;
  char v38;
  unint64_t TempSymbol;
  size_t v40;
  size_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  void **__s1;
  _QWORD v54[4];
  __int16 v55;
  _QWORD v56[4];
  __int16 v57;
  void *v58[2];
  char v59;

  v54[0] = a2;
  v54[1] = a3;
  v54[2] = 44;
  v55 = 1797;
  v56[0] = v54;
  v56[2] = a4;
  v56[3] = a5;
  v57 = 1282;
  llvm::Twine::str((llvm::Twine *)v56, v58);
  v15 = (void **)v58[0];
  if (v59 >= 0)
    v15 = v58;
  __s1 = v15;
  if (v59 >= 0)
    v16 = v59 & 0x7F;
  else
    v16 = (size_t)v58[1];
  v17 = *(_DWORD *)(a1 + 1672);
  if (!v17)
  {
    *(_QWORD *)(a1 + 1676) = 0;
    v35 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v35)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v35[16] = 2;
    *(_QWORD *)(a1 + 1664) = v35;
    v17 = 16;
    *(_DWORD *)(a1 + 1672) = 16;
  }
  v50 = a7;
  v51 = a2;
  v49 = a6;
  v48 = a8;
  v18 = 0;
  if (v16)
  {
    v19 = v16;
    v20 = __s1;
    do
    {
      v21 = *(unsigned __int8 *)v20;
      v20 = (void **)((char *)v20 + 1);
      v18 = 33 * v18 + v21;
      --v19;
    }
    while (v19);
  }
  v52 = a3;
  v22 = *(_QWORD *)(a1 + 1664);
  v23 = v17 - 1;
  v24 = v22 + 8 * v17 + 8;
  v25 = -1;
  v26 = 1;
  v27 = v18;
  while (1)
  {
    v28 = v27 & v23;
    v29 = *(_QWORD **)(v22 + 8 * v28);
    if (!v29)
      break;
    if (v29 == (_QWORD *)-8)
    {
      if (v25 == -1)
        v25 = v27 & v23;
    }
    else if (*(_DWORD *)(v24 + 4 * v28) == v18
           && v16 == *v29
           && (!v16 || !memcmp(__s1, (char *)v29 + *(unsigned int *)(a1 + 1684), v16)))
    {
      goto LABEL_25;
    }
    v27 = v26 + v28;
    ++v26;
  }
  v30 = v25;
  if (v25 == -1)
  {
    v30 = v28;
    v28 = v28;
  }
  else
  {
    v28 = v25;
  }
  *(_DWORD *)(v24 + 4 * v30) = v18;
  v29 = *(_QWORD **)(v22 + 8 * v28);
LABEL_25:
  i = (size_t **)(v22 + 8 * v28);
  if (v29)
  {
    if (v29 != (_QWORD *)-8)
    {
      v36 = 1;
      goto LABEL_39;
    }
    --*(_DWORD *)(a1 + 1680);
  }
  v32 = operator new(v16 + 17, (std::align_val_t)8uLL);
  v33 = v32;
  v34 = (char *)(v32 + 2);
  if (v16)
    memcpy(v32 + 2, __s1, v16);
  v34[v16] = 0;
  *v33 = v16;
  v33[1] = 0;
  *i = v33;
  ++*(_DWORD *)(a1 + 1676);
  for (i = (size_t **)(*(_QWORD *)(a1 + 1664)
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 1664), v28));
        !*i || *i + 1 == 0;
  v36 = 0;
LABEL_39:
  if (v59 < 0)
  {
    operator delete(v58[0]);
    if ((v36 & 1) != 0)
      return (*i)[1];
  }
  else if ((v36 & 1) != 0)
  {
    return (*i)[1];
  }
  if (a9)
  {
    v38 = 1;
    HIBYTE(v57) = 1;
    if (*a9)
    {
      v56[0] = a9;
      v38 = 3;
    }
    LOBYTE(v57) = v38;
    TempSymbol = llvm::MCContext::createTempSymbol(a1, (uint64_t)v56, 0);
  }
  else
  {
    TempSymbol = 0;
  }
  v40 = **i;
  if (v40 >= v40 - a5)
    v41 = v40 - a5;
  else
    v41 = **i;
  v42 = (char *)*i + v41;
  v43 = sub_1C484358C(a1 + 480, 248, 3);
  v44 = 0;
  *(_QWORD *)(v43 + 36) = 0;
  *(_BYTE *)(v43 + 44) &= 0xF8u;
  *(_QWORD *)(v43 + 80) = -1;
  *(_QWORD *)(v43 + 88) = 0;
  *(_WORD *)(v43 + 96) = 15;
  *(_QWORD *)(v43 + 104) = v43 + 104;
  *(_QWORD *)(v43 + 112) = v43 + 104;
  *(_QWORD *)(v43 + 120) = v43 + 136;
  *(_QWORD *)(v43 + 128) = 0x100000000;
  *(_QWORD *)(v43 + 152) = v43 + 168;
  *(_QWORD *)(v43 + 16) = 0;
  *(_BYTE *)(v43 + 24) = 0;
  *(_DWORD *)(v43 + 28) = 0;
  *(_QWORD *)(v43 + 48) = 0;
  *(_QWORD *)(v43 + 56) = 0;
  *(_QWORD *)(v43 + 64) = v43;
  *(_QWORD *)(v43 + 72) = 0;
  *(_BYTE *)(v43 + 98) = 0;
  *(_QWORD *)(v43 + 160) = 0x200000000;
  *(_QWORD *)(v43 + 200) = v42 + 16;
  *(_QWORD *)(v43 + 208) = v40 - v41;
  *(_DWORD *)(v43 + 216) = 3;
  *(_DWORD *)(v43 + 220) = v48;
  *(_QWORD *)v43 = &off_1E8182168;
  *(_QWORD *)(v43 + 8) = TempSymbol;
  *(_DWORD *)(v43 + 240) = v49;
  *(_DWORD *)(v43 + 244) = v50;
  do
  {
    if (v52 > v44)
      v45 = *(_BYTE *)(v51 + v44);
    else
      v45 = 0;
    *(_BYTE *)(v43 + v44++ + 224) = v45;
  }
  while (v44 != 16);
  (*i)[1] = v43;
  return (*i)[1];
}

void llvm::MCContext::renameELFSection(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  size_t v13;
  uint64_t **v14;
  const void *v15;
  __int128 *p_dst;
  uint64_t v17;
  uint64_t v19;
  uint64_t **v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void **v36;
  _OWORD *v37;
  void **v38;
  __int128 v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char v46;
  int v47;
  uint64_t v48;
  int v50;
  __int128 v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  int v55;
  __int128 __dst;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  uint64_t v62;

  v5 = a3;
  v6 = a2;
  v7 = a1;
  v8 = (_BYTE *)(*(_QWORD *)(a2 + 240) & 0xFFFFFFFFFFFFFFF8);
  if (v8 && (*v8 & 4) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)v8 - 1);
    v12 = *v11;
    v9 = v11 + 2;
    v10 = v12;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v13 = *(_QWORD *)(a2 + 208);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_46;
  v50 = *(_DWORD *)(a2 + 232);
  v14 = (uint64_t **)(a1 + 1696);
  v15 = *(const void **)(a2 + 200);
  if (v13 >= 0x17)
  {
    v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v17 = v13 | 7;
    v19 = v10;
    v20 = (uint64_t **)(a1 + 1696);
    v21 = v9;
    v23 = v17 + 1;
    p_dst = (__int128 *)operator new(v17 + 1);
    v24 = v23 | 0x8000000000000000;
    v5 = a3;
    v9 = v21;
    v14 = v20;
    v10 = v19;
    v7 = a1;
    v6 = a2;
    *((_QWORD *)&__dst + 1) = v13;
    v57 = v24;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v57) = *(_QWORD *)(a2 + 208);
  p_dst = &__dst;
  if (v13)
LABEL_12:
    memmove(p_dst, v15, v13);
  *((_BYTE *)p_dst + v13) = 0;
  *(_QWORD *)&v58 = v9;
  *((_QWORD *)&v58 + 1) = v10;
  *(_QWORD *)&v59 = &unk_1C873AB3D;
  *((_QWORD *)&v59 + 1) = 0;
  v25 = v50;
  v60 = v50;
  v26 = (uint64_t *)sub_1C62B7658((uint64_t)v14, (unsigned __int8 **)&__dst);
  if ((uint64_t *)(v7 + 1704) != v26)
  {
    v27 = v26;
    v28 = (uint64_t *)v26[1];
    if (v28)
    {
      do
      {
        v29 = v28;
        v28 = (uint64_t *)*v28;
      }
      while (v28);
    }
    else
    {
      v30 = v26;
      do
      {
        v29 = (uint64_t *)v30[2];
        v31 = *v29 == (_QWORD)v30;
        v30 = v29;
      }
      while (!v31);
    }
    if (*v14 == v26)
      *v14 = v29;
    --*(_QWORD *)(v7 + 1712);
    sub_1C485B6E0(*(uint64_t **)(v7 + 1704), v26);
    if (*((char *)v27 + 55) < 0)
      operator delete((void *)v27[4]);
    operator delete(v27);
  }
  if (SHIBYTE(v57) < 0)
    operator delete((void *)__dst);
  if (a4 > 0x7FFFFFFFFFFFFFF7)
LABEL_46:
    abort();
  if (a4 >= 0x17)
  {
    v33 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v33 = a4 | 7;
    v34 = v33 + 1;
    v32 = (__int128 *)operator new(v33 + 1);
    v35 = v34 | 0x8000000000000000;
    v25 = v50;
    *((_QWORD *)&v51 + 1) = a4;
    v52 = v35;
    *(_QWORD *)&v51 = v32;
    goto LABEL_34;
  }
  HIBYTE(v52) = a4;
  v32 = &v51;
  if (a4)
LABEL_34:
    memmove(v32, v5, a4);
  *((_BYTE *)v32 + a4) = 0;
  *(_QWORD *)&v53 = v9;
  *((_QWORD *)&v53 + 1) = v10;
  v54 = (unint64_t)&unk_1C873AB3D;
  v55 = v25;
  __dst = v51;
  v57 = v52;
  v60 = v25;
  v58 = v53;
  v59 = (unint64_t)&unk_1C873AB3D;
  v61 = v6;
  v36 = (void **)sub_1C5934FC4((uint64_t)v14, &v62, (unsigned __int8 *)&__dst);
  v37 = *v36;
  if (*v36)
  {
    if (SHIBYTE(v57) < 0)
      operator delete((void *)__dst);
  }
  else
  {
    v38 = v36;
    v37 = operator new(0x68uLL);
    v37[2] = __dst;
    v39 = v54;
    *(_OWORD *)((char *)v37 + 56) = v53;
    *((_QWORD *)v37 + 6) = v57;
    *(_OWORD *)((char *)v37 + 72) = v39;
    *((_DWORD *)v37 + 22) = v55;
    *((_QWORD *)v37 + 12) = v6;
    v40 = v62;
    *(_QWORD *)v37 = 0;
    *((_QWORD *)v37 + 1) = 0;
    *((_QWORD *)v37 + 2) = v40;
    *v38 = v37;
    v41 = (uint64_t *)**v14;
    v42 = (uint64_t *)v37;
    if (v41)
    {
      *v14 = v41;
      v42 = (uint64_t *)*v38;
    }
    sub_1C4768E74(*(uint64_t **)(v7 + 1704), v42);
    ++*(_QWORD *)(v7 + 1712);
  }
  v43 = (char *)*((_QWORD *)v37 + 4);
  v44 = *((_QWORD *)v37 + 5);
  v45 = (char *)(v37 + 2);
  v46 = v45[23];
  v47 = v46;
  if (v46 >= 0)
    v43 = v45;
  v48 = v46 & 0x7F;
  if (v47 >= 0)
    v44 = v48;
  *(_QWORD *)(v6 + 200) = v43;
  *(_QWORD *)(v6 + 208) = v44;
}

unint64_t llvm::MCContext::createELFSectionImpl(uint64_t a1, unsigned __int8 *a2, size_t a3, int a4, int a5, int a6, int a7, uint64_t a8, char a9, int a10, uint64_t a11)
{
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  size_t v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  BOOL v48;
  _BOOL4 v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  const char *v67;
  __int16 v68;

  v18 = sub_1C5934CF8(a1 + 1056, a2, a3);
  v19 = *v18;
  v20 = *(_QWORD *)(*v18 + 8);
  v65 = a4;
  v64 = a6;
  if (!v20)
    goto LABEL_13;
  v21 = *(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8;
  if (!v21 && (*(_DWORD *)(v20 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v20 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v20 + 24));
    *(_QWORD *)v20 = *(_QWORD *)v20 & 7 | v21;
    v20 = *(_QWORD *)(v19 + 8);
  }
  if (!v21)
    goto LABEL_10;
  v22 = *(_QWORD *)v20;
  v23 = *(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8;
  if (!v23 && (*(_DWORD *)(v20 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v20 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v20 + 24));
    v22 = *(_QWORD *)v20 & 7 | v23;
    *(_QWORD *)v20 = v22;
  }
  if (!v23)
    goto LABEL_37;
  v24 = v22 & 0xFFFFFFFFFFFFFFF8;
  if ((v22 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v20 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v20 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v20 + 24));
    *(_QWORD *)v20 = *(_QWORD *)v20 & 7 | v24;
  }
  if ((_UNKNOWN *)v24 == llvm::MCSymbol::AbsolutePseudoFragment)
    goto LABEL_37;
  v20 = *(_QWORD *)(v19 + 8);
  v25 = *(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8;
  if (!v25 && (*(_DWORD *)(v20 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v20 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v20 + 24));
    *(_QWORD *)v20 = *(_QWORD *)v20 & 7 | v25;
    v20 = *(_QWORD *)(v19 + 8);
  }
  if (*(_QWORD *)(*(_QWORD *)(v25 + 16) + 8) != v20)
  {
LABEL_37:
    v67 = "invalid symbol redefinition";
    v68 = 259;
    llvm::MCContext::reportError(a1, 0, (uint64_t)&v67);
    v20 = *(_QWORD *)(v19 + 8);
    if (!v20)
      goto LABEL_13;
  }
  else
  {
LABEL_10:
    if (!v20)
      goto LABEL_13;
  }
  v26 = *(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8;
  if (!v26 && (*(_DWORD *)(v20 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v20 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v20 + 24));
    *(_QWORD *)v20 = *(_QWORD *)v20 & 7 | v26;
  }
  if (!v26)
  {
    v46 = *(_QWORD *)(v19 + 8);
    goto LABEL_69;
  }
LABEL_13:
  v27 = *(_DWORD *)(a1 + 1120);
  if (!v27)
  {
    *(_QWORD *)(a1 + 1124) = 0;
    v47 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v47)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v47[16] = 2;
    *(_QWORD *)(a1 + 1112) = v47;
    v27 = 16;
    *(_DWORD *)(a1 + 1120) = 16;
  }
  v63 = a8;
  v61 = a5;
  v62 = a7;
  v60 = v19;
  v28 = 0;
  if (a3)
  {
    v29 = a3;
    v30 = a2;
    do
    {
      v31 = *v30++;
      v28 = 33 * v28 + v31;
      --v29;
    }
    while (v29);
  }
  v32 = *(_QWORD *)(a1 + 1112);
  v33 = v27 - 1;
  v34 = v32 + 8 * v27 + 8;
  v35 = -1;
  v36 = 1;
  v37 = v28;
  while (1)
  {
    v38 = v37 & v33;
    v39 = *(_QWORD **)(v32 + 8 * v38);
    if (!v39)
      break;
    if (v39 == (_QWORD *)-8)
    {
      if (v35 == -1)
        v35 = v37 & v33;
    }
    else if (*(_DWORD *)(v34 + 4 * v38) == v28
           && a3 == *v39
           && (!a3 || !memcmp(a2, (char *)v39 + *(unsigned int *)(a1 + 1132), a3)))
    {
      goto LABEL_32;
    }
    v37 = v36 + v38;
    ++v36;
  }
  v40 = v35;
  if (v35 == -1)
  {
    v40 = v38;
    v38 = v38;
  }
  else
  {
    v38 = v35;
  }
  *(_DWORD *)(v34 + 4 * v40) = v28;
  v39 = *(_QWORD **)(v32 + 8 * v38);
LABEL_32:
  v41 = (unint64_t *)(v32 + 8 * v38);
  if (!v39)
    goto LABEL_33;
  if (v39 == (_QWORD *)-8)
  {
    --*(_DWORD *)(a1 + 1128);
LABEL_33:
    v42 = sub_1C484358C(*(_QWORD *)(a1 + 1136), a3 + 17, 3);
    v43 = v42;
    v44 = v42 + 16;
    a8 = v63;
    v45 = v60;
    if (a3)
      memcpy((void *)(v42 + 16), a2, a3);
    *(_BYTE *)(v44 + a3) = 0;
    *(_QWORD *)v43 = a3;
    *(_BYTE *)(v43 + 8) = 0;
    *v41 = v43;
    ++*(_DWORD *)(a1 + 1124);
    v41 = (unint64_t *)(*(_QWORD *)(a1 + 1112)
                             + 8
                             * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 1112), v38));
    a5 = v61;
    while (1)
    {
      v39 = (_QWORD *)*v41;
      v48 = !*v41 || v39 + 1 == 0;
      if (!v48)
        break;
      ++v41;
    }
    goto LABEL_59;
  }
  a8 = v63;
  a5 = v61;
  v45 = v60;
LABEL_59:
  v48 = v39 == 0;
  v49 = v39 != 0;
  if (v48)
    v50 = 40;
  else
    v50 = 48;
  v46 = sub_1C484358C(a1 + 192, v50, 3) + 8 * v49;
  v51 = (_QWORD *)*v41;
  v48 = *v41 == 0;
  *(_DWORD *)(v46 + 8) = *(_DWORD *)(v46 + 8) & 0xFFFC0000 | 0x80;
  v52 = !v48;
  *(_WORD *)(v46 + 12) = 0;
  *(_DWORD *)(v46 + 16) = 0;
  *(_QWORD *)(v46 + 24) = 0;
  *(_QWORD *)v46 = 4 * v52;
  if (v51)
    *(_QWORD *)(v46 - 8) = v51;
  *(_QWORD *)(v46 + 32) = 0;
  a7 = v62;
  if (!*(_QWORD *)(v45 + 8))
    *(_QWORD *)(v45 + 8) = v46;
LABEL_69:
  *(_WORD *)(v46 + 12) = *(_WORD *)(v46 + 12) & 0xEFE0 | 0x1003;
  v53 = sub_1C484358C(a1 + 384, 256, 3);
  llvm::MCSection::MCSection(v53, 1, (uint64_t)a2, a3, v64, v46);
  *(_QWORD *)v54 = &unk_1E8182138;
  *(_DWORD *)(v54 + 224) = v65;
  *(_DWORD *)(v54 + 228) = a5;
  *(_DWORD *)(v54 + 232) = a10;
  *(_DWORD *)(v54 + 236) = a7;
  v55 = 4;
  if (!a9)
    v55 = 0;
  *(_QWORD *)(v54 + 240) = a8 & 0xFFFFFFFFFFFFFFFBLL | v55;
  *(_QWORD *)(v54 + 248) = a11;
  if ((a8 & 0xFFFFFFFFFFFFFFF8) != 0)
    *(_WORD *)((a8 & 0xFFFFFFFFFFFFFFF8) + 12) |= 0x400u;
  v56 = operator new();
  *(_OWORD *)v56 = 0u;
  *(_OWORD *)(v56 + 16) = 0u;
  *(_QWORD *)(v56 + 32) = -1;
  *(_QWORD *)(v56 + 40) = 0;
  *(_BYTE *)(v56 + 48) = 1;
  *(_DWORD *)(v56 + 49) = 0;
  *(_QWORD *)(v56 + 56) = 0;
  *(_QWORD *)(v56 + 64) = v56 + 88;
  *(_OWORD *)(v56 + 72) = xmmword_1C677F680;
  *(_QWORD *)(v56 + 120) = v56 + 136;
  *(_QWORD *)(v56 + 128) = 0x400000000;
  v57 = *(uint64_t **)(v53 + 112);
  v58 = *v57;
  *(_QWORD *)v56 = *v57;
  *(_QWORD *)(v56 + 8) = v57;
  *(_QWORD *)(v58 + 8) = v56;
  *v57 = v56;
  *(_QWORD *)(v56 + 16) = v53;
  *(_QWORD *)v46 = *(_QWORD *)v46 & 7 | v56;
  return v53;
}

unint64_t llvm::MCContext::createELFRelSection(uint64_t a1, llvm::Twine *a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  unsigned __int8 *v14;
  void *v15;
  uint64_t *v16;
  void *v18[2];
  uint64_t v19;
  void *__p[2];
  int64_t v21;
  char v22;
  unsigned __int8 *v23;
  void *v24;
  char v25[8];

  v13 = a1 + 1816;
  llvm::Twine::str(a2, v18);
  v21 = v19;
  *(_OWORD *)__p = *(_OWORD *)v18;
  v18[1] = 0;
  v19 = 0;
  v18[0] = 0;
  if (v21 >= 0)
    v14 = (unsigned __int8 *)__p;
  else
    v14 = (unsigned __int8 *)__p[0];
  v22 = 1;
  if (v21 >= 0)
    v15 = (void *)(HIBYTE(v21) & 0x7F);
  else
    v15 = __p[1];
  v23 = v14;
  v24 = v15;
  v25[0] = 1;
  v16 = sub_1C62B76D0(v13, v14, (size_t)v15, v25);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  return llvm::MCContext::createELFSectionImpl(a1, (unsigned __int8 *)(*v16 + 16), *(_QWORD *)*v16, a3, a4, 4, a5, a6, 1, 1, *(_QWORD *)(a7 + 8));
}

unint64_t llvm::MCContext::getELFNamedSection(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5, int a6)
{
  const char *v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (!*(_BYTE *)(a2 + 32))
  {
    LOWORD(v17) = 256;
LABEL_13:
    LOWORD(v20) = 256;
    return llvm::MCContext::getELFSection(a1, (llvm::Twine *)&v18, a4, a5, a6, (unsigned __int8 *)a3, 1, -1, 0);
  }
  if (*(_BYTE *)(a2 + 32) == 1)
  {
    v6 = ".";
    *(_QWORD *)&v15 = ".";
    v7 = 259;
    LOWORD(v17) = 259;
    v8 = 3;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    if (*(_BYTE *)(a2 + 33) == 1)
      v8 = *(_BYTE *)(a2 + 32);
    else
      v8 = 2;
    v6 = *(const char **)a2;
    v7 = *(_QWORD *)(a2 + 8);
    if (*(_BYTE *)(a2 + 33) != 1)
      v6 = (const char *)a2;
    *(_QWORD *)&v15 = v6;
    *((_QWORD *)&v15 + 1) = v7;
    *(_QWORD *)&v16 = ".";
    LOBYTE(v17) = v8;
    BYTE1(v17) = 3;
  }
  if (*((_BYTE *)a3 + 32) == 1)
  {
    v18 = v15;
    v19 = v16;
    v20 = v17;
    return llvm::MCContext::getELFSection(a1, (llvm::Twine *)&v18, a4, a5, a6, (unsigned __int8 *)a3, 1, -1, 0);
  }
  if (!*((_BYTE *)a3 + 32))
    goto LABEL_13;
  if (!v9)
  {
    v8 = 2;
    v6 = (const char *)&v15;
  }
  v10 = *((unsigned __int8 *)a3 + 33);
  v11 = a3[1];
  if (v10 == 1)
    v12 = *((_BYTE *)a3 + 32);
  else
    v12 = 2;
  if (v10 == 1)
    v13 = (uint64_t *)*a3;
  else
    v13 = a3;
  *(_QWORD *)&v18 = v6;
  *((_QWORD *)&v18 + 1) = v7;
  *(_QWORD *)&v19 = v13;
  *((_QWORD *)&v19 + 1) = v11;
  LOBYTE(v20) = v8;
  BYTE1(v20) = v12;
  return llvm::MCContext::getELFSection(a1, (llvm::Twine *)&v18, a4, a5, a6, (unsigned __int8 *)a3, 1, -1, 0);
}

unint64_t llvm::MCContext::getELFSection(uint64_t a1, llvm::Twine *a2, int a3, int a4, int a5, unsigned __int8 *a6, char a7, int a8, _BYTE *a9)
{
  unint64_t v17;
  _BYTE *Symbol;
  void *__p[2];
  unsigned __int8 v21;

  if (a6[32] < 2u)
    goto LABEL_9;
  llvm::Twine::str((llvm::Twine *)a6, __p);
  if ((v21 & 0x80u) == 0)
    v17 = v21;
  else
    v17 = (unint64_t)__p[1];
  if ((char)v21 < 0)
  {
    operator delete(__p[0]);
    if (v17)
      goto LABEL_7;
LABEL_9:
    Symbol = 0;
    return llvm::MCContext::getELFSection(a1, a2, a3, a4, a5, Symbol, a7, a8, a9);
  }
  if (!v17)
    goto LABEL_9;
LABEL_7:
  Symbol = (_BYTE *)llvm::MCContext::getOrCreateSymbol(a1, (uint64_t)a6);
  return llvm::MCContext::getELFSection(a1, a2, a3, a4, a5, Symbol, a7, a8, a9);
}

unint64_t llvm::MCContext::getELFSection(uint64_t a1, llvm::Twine *a2, int a3, int a4, int a5, _BYTE *a6, char a7, int a8, _BYTE *a9)
{
  uint64_t v10;
  _BYTE *v14;
  _QWORD *v15;
  void **v16;
  size_t v17;
  void *v18;
  _QWORD *v19;
  _BYTE *v20;
  _QWORD **v21;
  __int128 *p_dst;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t **v33;
  __int128 v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  unint64_t ELFSectionImpl;
  unsigned __int8 *v39;
  char *v40;
  unsigned __int8 *v41;
  char v42;
  int v43;
  unsigned __int8 *v44;
  size_t v45;
  size_t v46;
  int v47;
  int v48;
  int v50;
  __int128 v53;
  int v54;
  void *v55[2];
  char v56;
  __int128 __dst;
  unint64_t v58;
  __int128 v59;
  __int128 v60;
  int v61;
  void *__p[2];
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  int v66;
  uint64_t v67;
  uint64_t v68;

  v10 = (uint64_t)a6;
  v14 = a9;
  if (a6)
  {
    if ((*a6 & 4) != 0)
    {
      v15 = (_QWORD *)*((_QWORD *)a6 - 1);
      *(_QWORD *)&v53 = v15 + 2;
      *((_QWORD *)&v53 + 1) = *v15;
    }
    else
    {
      v53 = 0uLL;
    }
  }
  else
  {
    *(_QWORD *)&v53 = &unk_1C873AB3D;
    *((_QWORD *)&v53 + 1) = 0;
  }
  llvm::Twine::str(a2, v55);
  if (v56 >= 0)
    v16 = v55;
  else
    v16 = (void **)v55[0];
  if (v56 >= 0)
    v17 = v56 & 0x7F;
  else
    v17 = (size_t)v55[1];
  v54 = a8;
  if (a9)
  {
    if ((*a9 & 4) != 0)
    {
      v19 = (_QWORD *)*((_QWORD *)a9 - 1);
      v20 = (_BYTE *)*v19;
      v18 = v19 + 2;
      v14 = v20;
    }
    else
    {
      v18 = 0;
      v14 = 0;
    }
  }
  else
  {
    v18 = &unk_1C873AB3D;
  }
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v21 = (_QWORD **)(a1 + 1696);
  v50 = a4;
  if (v17 >= 0x17)
  {
    v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v23 = v17 | 7;
    v24 = a5;
    v25 = a1;
    v26 = v10;
    v27 = v23 + 1;
    p_dst = (__int128 *)operator new(v23 + 1);
    v28 = v27 | 0x8000000000000000;
    v10 = v26;
    a1 = v25;
    a5 = v24;
    *((_QWORD *)&__dst + 1) = v17;
    v58 = v28;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_24;
  }
  HIBYTE(v58) = v17;
  p_dst = &__dst;
  if (v17)
LABEL_24:
    memmove(p_dst, v16, v17);
  *((_BYTE *)p_dst + v17) = 0;
  v59 = v53;
  *(_QWORD *)&v60 = v18;
  *((_QWORD *)&v60 + 1) = v14;
  v61 = v54;
  *(_OWORD *)__p = __dst;
  v63 = v58;
  v66 = v54;
  v64 = v53;
  v65 = v60;
  v67 = 0;
  v29 = (uint64_t **)sub_1C5934FC4((uint64_t)v21, &v68, (unsigned __int8 *)__p);
  v30 = *v29;
  if (*v29)
  {
    v31 = *v29;
    v32 = (uint64_t)a9;
    if (SHIBYTE(v63) < 0)
    {
      operator delete(__p[0]);
      v31 = v30;
    }
  }
  else
  {
    v33 = v29;
    v31 = operator new(0x68uLL);
    v31[2] = *(_OWORD *)__p;
    v34 = v60;
    *(_OWORD *)((char *)v31 + 56) = v59;
    *((_QWORD *)v31 + 6) = v63;
    *(_OWORD *)((char *)v31 + 72) = v34;
    *((_DWORD *)v31 + 22) = v61;
    *((_QWORD *)v31 + 12) = 0;
    v35 = v68;
    *(_QWORD *)v31 = 0;
    *((_QWORD *)v31 + 1) = 0;
    *((_QWORD *)v31 + 2) = v35;
    *v33 = (uint64_t *)v31;
    v36 = (_QWORD *)**v21;
    v37 = (uint64_t *)v31;
    v32 = (uint64_t)a9;
    if (v36)
    {
      *v21 = v36;
      v37 = *v33;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 1704), v37);
    ++*(_QWORD *)(a1 + 1712);
  }
  if (v56 < 0)
  {
    operator delete(v55[0]);
    if (v30)
      return *((_QWORD *)v31 + 12);
  }
  else if (v30)
  {
    return *((_QWORD *)v31 + 12);
  }
  v41 = (unsigned __int8 *)*((_QWORD *)v31 + 4);
  v40 = (char *)(v31 + 2);
  v39 = v41;
  v42 = v40[23];
  v43 = v42;
  if (v42 >= 0)
    v44 = (unsigned __int8 *)v40;
  else
    v44 = v39;
  v45 = v42 & 0x7F;
  if (v43 >= 0)
    v46 = v45;
  else
    v46 = *((_QWORD *)v40 + 1);
  v47 = 2;
  if ((v50 & 4) == 0)
    v47 = 4;
  if ((v50 & 0x20000000) != 0)
    v48 = 3;
  else
    v48 = v47;
  ELFSectionImpl = llvm::MCContext::createELFSectionImpl(a1, v44, v46, a3, v50, v48, a5, v10, a7, v54, v32);
  *((_QWORD *)v40 + 8) = ELFSectionImpl;
  llvm::MCContext::recordELFMergeableSectionInfo(a1, *(_QWORD **)(ELFSectionImpl + 200), *(_QWORD *)(ELFSectionImpl + 208), *(_DWORD *)(ELFSectionImpl + 228), *(_DWORD *)(ELFSectionImpl + 232), *(_DWORD *)(ELFSectionImpl + 236));
  return ELFSectionImpl;
}

void llvm::MCContext::recordELFMergeableSectionInfo(uint64_t a1, _QWORD *a2, size_t a3, unsigned int a4, int a5, unsigned int a6)
{
  unsigned int v6;
  size_t v9;
  _QWORD *v10;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  const void *v19;
  BOOL v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *p_dst;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t v30;
  _OWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t i;
  int v37;
  __int128 __dst;
  unint64_t v40;
  unint64_t v41;
  void *__p[2];
  unint64_t v43;
  unint64_t v44;
  int v45;
  __int128 v46;

  v6 = a6;
  v9 = a3;
  v10 = a2;
  *(_QWORD *)&v46 = a2;
  *((_QWORD *)&v46 + 1) = a3;
  if (a5 == -1)
  {
    v12 = *(_DWORD *)(a1 + 2040);
    if (v12)
    {
      v13 = *(_QWORD *)(a1 + 2024);
      v14 = sub_1C5E3DF4C(a2, (uint64_t)a2 + a3);
      v15 = 0;
      v16 = v12 - 1;
      v37 = 1;
      for (i = v13; ; v13 = i)
      {
        v17 = v14 & v16;
        v18 = v13 + 16 * (v14 & v16);
        v19 = *(const void **)v18;
        if (*(_QWORD *)v18 == -1)
        {
          if (v10 == (_QWORD *)-1)
            goto LABEL_19;
        }
        else if (v19 == (const void *)-2)
        {
          if (v10 == (_QWORD *)-2)
            goto LABEL_19;
        }
        else if (v9 == *(_QWORD *)(v18 + 8) && (!v9 || !memcmp(v10, *(const void **)v18, v9)))
        {
LABEL_19:
          v6 = a6;
          goto LABEL_20;
        }
        if (v19 == (const void *)-1)
          break;
        if (v15)
          v20 = 0;
        else
          v20 = v19 == (const void *)-2;
        if (v20)
          v15 = v18;
        v14 = v37 + v17;
        ++v37;
      }
      if (v15)
        v21 = v15;
      else
        v21 = v18;
      v6 = a6;
    }
    else
    {
      v21 = 0;
    }
    v22 = (_OWORD *)sub_1C4FAA5F8(a1 + 2024, (uint64_t)&v46, (uint64_t)&v46, v21);
    *v22 = v46;
    v9 = *((_QWORD *)&v46 + 1);
    v10 = (_QWORD *)v46;
    if ((a4 & 0x10) != 0)
      goto LABEL_28;
  }
  else
  {
LABEL_20:
    if ((a4 & 0x10) != 0)
      goto LABEL_28;
  }
  if (!llvm::MCContext::isELFGenericMergeableSection(a1, v10, v9))
    return;
  v9 = *((_QWORD *)&v46 + 1);
  v10 = (_QWORD *)v46;
LABEL_28:
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v9 >= 0x17)
  {
    v24 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v24 = v9 | 7;
    v25 = v24 + 1;
    p_dst = (__int128 *)operator new(v24 + 1);
    *((_QWORD *)&__dst + 1) = v9;
    v40 = v25 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_35;
  }
  HIBYTE(v40) = v9;
  p_dst = &__dst;
  if (v9)
LABEL_35:
    memmove(p_dst, v10, v9);
  *((_BYTE *)p_dst + v9) = 0;
  v41 = __PAIR64__(v6, a4);
  *(_OWORD *)__p = __dst;
  __dst = 0uLL;
  v26 = v40;
  v40 = 0;
  v43 = v26;
  v44 = __PAIR64__(v6, a4);
  v45 = a5;
  v27 = (uint64_t **)(a1 + 2008);
  v28 = *(uint64_t **)(a1 + 2008);
  if (v28)
  {
    while (1)
    {
      while (1)
      {
        v29 = (uint64_t **)v28;
        v30 = (uint64_t)(v28 + 4);
        if (!sub_1C62B77D4((uint64_t)__p, v28 + 4))
          break;
        v28 = *v29;
        v27 = v29;
        if (!*v29)
          goto LABEL_44;
      }
      if (!sub_1C62B77D4(v30, (uint64_t *)__p))
        break;
      v27 = v29 + 1;
      v28 = v29[1];
      if (!v28)
        goto LABEL_44;
    }
    if (*v27)
      goto LABEL_48;
  }
  else
  {
    v29 = (uint64_t **)(a1 + 2008);
  }
LABEL_44:
  v31 = operator new(0x48uLL);
  v31[2] = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v32 = v43;
  v33 = v44;
  v43 = 0;
  *((_QWORD *)v31 + 6) = v32;
  *((_QWORD *)v31 + 7) = v33;
  *((_DWORD *)v31 + 16) = v45;
  *(_QWORD *)v31 = 0;
  *((_QWORD *)v31 + 1) = 0;
  *((_QWORD *)v31 + 2) = v29;
  *v27 = (uint64_t *)v31;
  v34 = **(_QWORD **)(a1 + 2000);
  if (v34)
  {
    *(_QWORD *)(a1 + 2000) = v34;
    v35 = *v27;
  }
  else
  {
    v35 = (uint64_t *)v31;
  }
  sub_1C4768E74(*(uint64_t **)(a1 + 2008), v35);
  ++*(_QWORD *)(a1 + 2016);
LABEL_48:
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)__dst);
}

uint64_t llvm::MCContext::isELFGenericMergeableSection(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  _QWORD v5[2];
  uint64_t v6;

  v5[0] = a2;
  v5[1] = a3;
  if (llvm::MCContext::isELFImplicitMergeableSectionNamePrefix(a1, a2, a3))
    return 1;
  v6 = 0;
  return sub_1C4FAA4F0((uint64_t *)(a1 + 2024), (uint64_t)v5, &v6);
}

uint64_t llvm::MCContext::getELFUniqueIDForEntsize(uint64_t a1, const void *a2, size_t a3, int a4, int a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p[2];
  unint64_t v17;
  int v18;
  int v19;

  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v10 = a1 + 2000;
  if (a3 >= 0x17)
  {
    v12 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v12 = a3 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    __p[1] = (void *)a3;
    v17 = v13 | 0x8000000000000000;
    __p[0] = v11;
    goto LABEL_8;
  }
  HIBYTE(v17) = a3;
  v11 = __p;
  if (a3)
LABEL_8:
    memmove(v11, a2, a3);
  *((_BYTE *)v11 + a3) = 0;
  v18 = a4;
  v19 = a5;
  v14 = sub_1C5935054(v10, (uint64_t *)__p);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  if ((_QWORD *)(a1 + 2008) == v14)
    return 0;
  else
    return *((unsigned int *)v14 + 16) | 0x100000000;
}

void llvm::MCContext::getGOFFSection(uint64_t a1, void *__src, size_t __len, int a4)
{
  void **p_dst;
  size_t v9;
  size_t v10;
  _OWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  void **__dst;
  size_t v15;
  unint64_t v16;
  void **v17;

  if (!__src)
  {
    __dst = 0;
    v15 = 0;
    v16 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    v15 = __len;
    v16 = v10 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v16) = __len;
    p_dst = (void **)&__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  *((_BYTE *)p_dst + __len) = 0;
LABEL_12:
  v17 = (void **)&__dst;
  v11 = sub_1C59350D0(a1 + 1744, (const void **)&__dst, (uint64_t)&std::piecewise_construct, (_OWORD **)&v17);
  if (SHIBYTE(v16) < 0)
    operator delete(__dst);
  if (!*((_QWORD *)v11 + 7))
  {
    v12 = sub_1C484358C(a1 + 576, 224, 3);
    llvm::MCSection::MCSection(v12, 2, (uint64_t)__src, __len, a4, 0);
    *v13 = &off_1E81802A8;
    *((_QWORD *)v11 + 7) = v13;
  }
}

unint64_t llvm::MCContext::getCOFFSection(uint64_t a1, const void *a2, size_t a3, int a4, int a5, _QWORD *a6, void *a7, unsigned int a8, unsigned int a9, _BYTE *a10)
{
  _QWORD *v11;
  _BYTE *Symbol;
  _BYTE *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 *p_dst;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  char *v27;
  unsigned __int8 *v28;
  uint64_t **v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  unint64_t v34;
  char v35;
  unint64_t TempSymbol;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v47;
  int v48;
  void *__p[2];
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  __int128 __dst;
  unint64_t v55;
  __int128 v56;
  unint64_t v57;

  v11 = a6;
  if (a7)
  {
    WORD4(v51) = 261;
    __p[0] = a6;
    __p[1] = a7;
    Symbol = (_BYTE *)llvm::MCContext::getOrCreateSymbol(a1, (uint64_t)__p);
    v18 = Symbol;
    if ((*Symbol & 4) != 0)
    {
      v20 = (uint64_t *)*((_QWORD *)Symbol - 1);
      v21 = *v20;
      v11 = v20 + 2;
      v19 = v21;
    }
    else
    {
      v11 = 0;
      v19 = 0;
    }
  }
  else
  {
    v19 = 0;
    v18 = 0;
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v48 = a4;
  v47 = a5;
  if (a3 >= 0x17)
  {
    v23 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v23 = a3 | 7;
    v24 = v23 + 1;
    p_dst = (__int128 *)operator new(v23 + 1);
    *((_QWORD *)&__dst + 1) = a3;
    v55 = v24 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v55) = a3;
  p_dst = &__dst;
  if (a3)
LABEL_13:
    memmove(p_dst, a2, a3);
  *((_BYTE *)p_dst + a3) = 0;
  *(_QWORD *)&v56 = v11;
  *((_QWORD *)&v56 + 1) = v19;
  v57 = __PAIR64__(a9, a8);
  v25 = SHIBYTE(v55);
  if (SHIBYTE(v55) < 0)
  {
    sub_1C47EBC30(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)__p = __dst;
    v50 = v55;
  }
  v51 = v56;
  v52 = v57;
  v53 = 0;
  v26 = *(unsigned __int8 **)(a1 + 1728);
  if (v26)
  {
    while (1)
    {
      while (1)
      {
        v27 = (char *)v26;
        v28 = v26 + 32;
        if (!sub_1C5935190((unsigned __int8 *)__p, (unsigned __int8 **)v26 + 4))
          break;
        v26 = *(unsigned __int8 **)v27;
        v29 = (uint64_t **)v27;
        if (!*(_QWORD *)v27)
          goto LABEL_25;
      }
      if (!sub_1C5935190(v28, (unsigned __int8 **)__p))
        break;
      v26 = (unsigned __int8 *)*((_QWORD *)v27 + 1);
      if (!v26)
      {
        v29 = (uint64_t **)(v27 + 8);
        goto LABEL_25;
      }
    }
    v33 = 1;
  }
  else
  {
    v29 = (uint64_t **)(a1 + 1728);
    v27 = (char *)(a1 + 1728);
LABEL_25:
    v30 = v27;
    v27 = (char *)operator new(0x58uLL);
    *((_OWORD *)v27 + 2) = *(_OWORD *)__p;
    *((_QWORD *)v27 + 6) = v50;
    __p[0] = 0;
    __p[1] = 0;
    v50 = 0;
    *(_OWORD *)(v27 + 56) = v56;
    *((_QWORD *)v27 + 9) = v57;
    *((_QWORD *)v27 + 10) = 0;
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 2) = v30;
    *v29 = (uint64_t *)v27;
    v31 = **(_QWORD **)(a1 + 1720);
    v32 = (uint64_t *)v27;
    if (v31)
    {
      *(_QWORD *)(a1 + 1720) = v31;
      v32 = *v29;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 1728), v32);
    v33 = 0;
    ++*(_QWORD *)(a1 + 1736);
  }
  if ((SHIBYTE(v50) & 0x80000000) == 0)
  {
    if (v33)
      goto LABEL_31;
LABEL_34:
    if (a10)
    {
      v35 = 1;
      BYTE9(v51) = 1;
      if (*a10)
      {
        __p[0] = a10;
        v35 = 3;
      }
      BYTE8(v51) = v35;
      TempSymbol = llvm::MCContext::createTempSymbol(a1, (uint64_t)__p, 0);
    }
    else
    {
      TempSymbol = 0;
    }
    v39 = *((_QWORD *)v27 + 4);
    v38 = v27 + 32;
    v37 = v39;
    v40 = v38[23];
    v41 = v40;
    if (v40 >= 0)
      v42 = (uint64_t)v38;
    else
      v42 = v37;
    v43 = v40 & 0x7F;
    if (v41 >= 0)
      v44 = v43;
    else
      v44 = *((_QWORD *)v38 + 1);
    v34 = sub_1C484358C(a1 + 288, 248, 3);
    llvm::MCSection::MCSection(v34, 0, v42, v44, v47, TempSymbol);
    *(_QWORD *)v45 = &unk_1E81820D0;
    *(_DWORD *)(v45 + 224) = v48;
    *(_DWORD *)(v45 + 228) = -1;
    *(_QWORD *)(v45 + 232) = v18;
    *(_DWORD *)(v45 + 240) = a8;
    *((_QWORD *)v38 + 6) = v45;
    if (v25 < 0)
      goto LABEL_46;
    return v34;
  }
  operator delete(__p[0]);
  if (!v33)
    goto LABEL_34;
LABEL_31:
  v34 = *((_QWORD *)v27 + 10);
  if (v25 < 0)
LABEL_46:
    operator delete((void *)__dst);
  return v34;
}

llvm::MCSectionCOFF *llvm::MCContext::getAssociativeCOFFSection(llvm::MCContext *this, llvm::MCSectionCOFF *a2, const llvm::MCSymbol *a3, unsigned int a4)
{
  int v6;
  int v7;
  const void *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  void *v12;

  if (!a3 && a4 == -1)
    return a2;
  v6 = *((_DWORD *)a2 + 56);
  if (!a3)
    return (llvm::MCSectionCOFF *)llvm::MCContext::getCOFFSection((uint64_t)this, *((const void **)a2 + 25), *((_QWORD *)a2 + 26), v6, *((_DWORD *)a2 + 55), &unk_1C873AB3D, 0, 0, a4, 0);
  v7 = v6 | 0x1000;
  v8 = (const void *)*((_QWORD *)a2 + 25);
  if ((*(_BYTE *)a3 & 4) != 0)
  {
    v11 = (_QWORD *)*((_QWORD *)a3 - 1);
    v12 = (void *)*v11;
    v9 = v11 + 2;
    v10 = v12;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  return (llvm::MCSectionCOFF *)llvm::MCContext::getCOFFSection((uint64_t)this, v8, *((_QWORD *)a2 + 26), v7, *((_DWORD *)a2 + 55), v9, v10, 5u, a4, 0);
}

unint64_t llvm::MCContext::getWasmSection(uint64_t a1, llvm::Twine *a2, int a3, int a4, unsigned __int8 *a5, int a6)
{
  unint64_t v12;
  _BYTE *Symbol;
  void *__p[2];
  unsigned __int8 v16;

  if (a5[32] < 2u)
    goto LABEL_9;
  llvm::Twine::str((llvm::Twine *)a5, __p);
  if ((v16 & 0x80u) == 0)
    v12 = v16;
  else
    v12 = (unint64_t)__p[1];
  if ((char)v16 < 0)
  {
    operator delete(__p[0]);
    if (v12)
      goto LABEL_7;
LABEL_9:
    Symbol = 0;
    return llvm::MCContext::getWasmSection(a1, a2, a3, a4, Symbol, a6);
  }
  if (!v12)
    goto LABEL_9;
LABEL_7:
  Symbol = (_BYTE *)llvm::MCContext::getOrCreateSymbol(a1, (uint64_t)a5);
  Symbol[42] = 1;
  return llvm::MCContext::getWasmSection(a1, a2, a3, a4, Symbol, a6);
}

unint64_t llvm::MCContext::getWasmSection(uint64_t a1, llvm::Twine *a2, int a3, int a4, _BYTE *a5, int a6)
{
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void **v15;
  size_t v16;
  __int128 *p_dst;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  char *v21;
  unsigned __int8 *v22;
  uint64_t **v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  unint64_t v28;
  char v29;
  unsigned __int8 *v30;
  size_t v31;
  unint64_t Symbol;
  unsigned __int8 *v33;
  size_t v34;
  _QWORD *v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v42;
  void *v43[2];
  char v44;
  __int128 __dst;
  unint64_t v46;
  __int128 v47;
  int v48;
  void *__p[2];
  unint64_t v50;
  __int128 v51;
  int v52;
  uint64_t v53;

  if (a5)
  {
    if ((*a5 & 4) != 0)
    {
      v13 = (uint64_t *)*((_QWORD *)a5 - 1);
      v14 = *v13;
      v11 = v13 + 2;
      v12 = v14;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    v11 = &unk_1C873AB3D;
  }
  llvm::Twine::str(a2, v43);
  if (v44 >= 0)
    v15 = v43;
  else
    v15 = (void **)v43[0];
  if (v44 >= 0)
    v16 = v44 & 0x7F;
  else
    v16 = (size_t)v43[1];
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v42 = a4;
  if (v16 >= 0x17)
  {
    v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v18 = v16 | 7;
    v19 = v18 + 1;
    p_dst = (__int128 *)operator new(v18 + 1);
    *((_QWORD *)&__dst + 1) = v16;
    v46 = v19 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_19;
  }
  HIBYTE(v46) = v16;
  p_dst = &__dst;
  if (v16)
LABEL_19:
    memmove(p_dst, v15, v16);
  *((_BYTE *)p_dst + v16) = 0;
  *(_QWORD *)&v47 = v11;
  *((_QWORD *)&v47 + 1) = v12;
  v48 = a6;
  *(_OWORD *)__p = __dst;
  v50 = v46;
  __dst = 0uLL;
  v46 = 0;
  v52 = a6;
  v51 = v47;
  v53 = 0;
  v20 = *(unsigned __int8 **)(a1 + 1776);
  if (v20)
  {
    while (1)
    {
      while (1)
      {
        v21 = (char *)v20;
        v22 = v20 + 32;
        if (!sub_1C593532C((unsigned __int8 *)__p, (unsigned __int8 **)v20 + 4))
          break;
        v20 = *(unsigned __int8 **)v21;
        v23 = (uint64_t **)v21;
        if (!*(_QWORD *)v21)
          goto LABEL_28;
      }
      if (!sub_1C593532C(v22, (unsigned __int8 **)__p))
        break;
      v20 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
      if (!v20)
      {
        v23 = (uint64_t **)(v21 + 8);
        goto LABEL_28;
      }
    }
    v27 = 1;
  }
  else
  {
    v23 = (uint64_t **)(a1 + 1776);
    v21 = (char *)(a1 + 1776);
LABEL_28:
    v24 = v21;
    v21 = (char *)operator new(0x58uLL);
    *((_OWORD *)v21 + 2) = *(_OWORD *)__p;
    *((_QWORD *)v21 + 6) = v50;
    __p[0] = 0;
    __p[1] = 0;
    v50 = 0;
    *(_OWORD *)(v21 + 56) = v47;
    *((_DWORD *)v21 + 18) = v48;
    *((_QWORD *)v21 + 10) = 0;
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = 0;
    *((_QWORD *)v21 + 2) = v24;
    *v23 = (uint64_t *)v21;
    v25 = **(_QWORD **)(a1 + 1768);
    v26 = (uint64_t *)v21;
    if (v25)
    {
      *(_QWORD *)(a1 + 1768) = v25;
      v26 = *v23;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 1776), v26);
    v27 = 0;
    ++*(_QWORD *)(a1 + 1784);
  }
  if (SHIBYTE(v50) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v46) < 0)
    operator delete((void *)__dst);
  if (v44 < 0)
  {
    operator delete(v43[0]);
    if (v27)
      return *((_QWORD *)v21 + 10);
  }
  else if (v27)
  {
    return *((_QWORD *)v21 + 10);
  }
  v29 = v21[55];
  if (v29 >= 0)
    v30 = (unsigned __int8 *)(v21 + 32);
  else
    v30 = (unsigned __int8 *)*((_QWORD *)v21 + 4);
  if (v29 >= 0)
    v31 = v29 & 0x7F;
  else
    v31 = *((_QWORD *)v21 + 5);
  Symbol = llvm::MCContext::createSymbol(a1, v30, v31, 1, 0);
  if ((*(_BYTE *)Symbol & 4) != 0)
  {
    v35 = *(_QWORD **)(Symbol - 8);
    v36 = *v35;
    v33 = (unsigned __int8 *)(v35 + 2);
    v34 = v36;
  }
  else
  {
    v33 = 0;
    v34 = 0;
  }
  *(_QWORD *)(*sub_1C5934CF8(a1 + 1056, v33, v34) + 8) = Symbol;
  if (!*(_BYTE *)(Symbol + 36))
    *(_BYTE *)(Symbol + 36) = 1;
  *(_DWORD *)(Symbol + 32) = 3;
  v28 = sub_1C484358C(a1 + 768, 264, 3);
  llvm::MCSection::MCSection(v28, 4, (uint64_t)v30, v31, a3, Symbol);
  *(_QWORD *)v37 = &unk_1E8182610;
  *(_DWORD *)(v37 + 224) = a6;
  *(_QWORD *)(v37 + 232) = a5;
  *(_QWORD *)(v37 + 240) = 0;
  *(_DWORD *)(v37 + 248) = 0;
  *(_BYTE *)(v37 + 252) = 0;
  *(_DWORD *)(v37 + 256) = v42;
  *((_QWORD *)v21 + 10) = v37;
  v38 = operator new();
  *(_OWORD *)v38 = 0u;
  *(_OWORD *)(v38 + 16) = 0u;
  *(_QWORD *)(v38 + 32) = -1;
  *(_QWORD *)(v38 + 40) = 0;
  *(_BYTE *)(v38 + 48) = 1;
  *(_DWORD *)(v38 + 49) = 0;
  *(_QWORD *)(v38 + 56) = 0;
  *(_QWORD *)(v38 + 64) = v38 + 88;
  *(_OWORD *)(v38 + 72) = xmmword_1C677F680;
  *(_QWORD *)(v38 + 120) = v38 + 136;
  *(_QWORD *)(v38 + 128) = 0x400000000;
  v39 = *(uint64_t **)(v28 + 112);
  v40 = *v39;
  *(_QWORD *)v38 = *v39;
  *(_QWORD *)(v38 + 8) = v39;
  *(_QWORD *)(v40 + 8) = v38;
  *v39 = v38;
  *(_QWORD *)(v38 + 16) = v28;
  *(_QWORD *)Symbol = *(_QWORD *)Symbol & 7 | v38;
  return v28;
}

uint64_t llvm::MCContext::hasXCOFFSection(uint64_t a1, void *__src, size_t __len, char a4)
{
  void **p_dst;
  size_t v9;
  void **v10;
  char v11;
  size_t v12;
  size_t v13;
  BOOL v14;
  void **v15;
  size_t v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  const void **v21;
  uint64_t v22;
  void **__dst;
  size_t v25;
  unint64_t v26;
  void *__p[2];
  unint64_t v28;
  char v29;
  char v30;

  if (!__src)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    __dst = 0;
    v25 = 0;
    v26 = 0;
    goto LABEL_12;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_38;
  if (__len >= 0x17)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    v25 = __len;
    v26 = v13 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v26) = __len;
    p_dst = (void **)&__dst;
    if (!__len)
      goto LABEL_11;
  }
  memmove(p_dst, __src, __len);
LABEL_11:
  *((_BYTE *)p_dst + __len) = 0;
  v11 = HIBYTE(v26);
  v10 = __dst;
  v9 = v25;
LABEL_12:
  v14 = v11 < 0;
  if (v11 >= 0)
    v15 = (void **)&__dst;
  else
    v15 = v10;
  v16 = v11 & 0x7F;
  if (v14)
    v17 = v9;
  else
    v17 = v16;
  if (v17 > 0x7FFFFFFFFFFFFFF7)
LABEL_38:
    abort();
  if (v17 >= 0x17)
  {
    v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v19 = v17 | 7;
    v20 = v19 + 1;
    v18 = operator new(v19 + 1);
    __p[1] = (void *)v17;
    v28 = v20 | 0x8000000000000000;
    __p[0] = v18;
    goto LABEL_25;
  }
  HIBYTE(v28) = v17;
  v18 = __p;
  if (v17)
LABEL_25:
    memmove(v18, v15, v17);
  *((_BYTE *)v18 + v17) = 0;
  v29 = a4;
  v30 = 1;
  v21 = *(const void ***)(a1 + 1800);
  if (!v21)
  {
LABEL_31:
    v22 = 0;
    goto LABEL_33;
  }
  while ((sub_1C59354B0((unsigned __int8 *)__p, v21 + 4) & 1) != 0)
  {
LABEL_30:
    v21 = (const void **)*v21;
    if (!v21)
      goto LABEL_31;
  }
  if (sub_1C59354B0((unsigned __int8 *)v21 + 32, (const void **)__p))
  {
    ++v21;
    goto LABEL_30;
  }
  v22 = 1;
LABEL_33:
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst);
  return v22;
}

unint64_t llvm::MCContext::getXCOFFSection(uint64_t a1, void *__src, size_t __len, int a4, __int16 a5, int a6, _BYTE *TempSymbol, uint64_t a8)
{
  int v8;
  uint64_t v14;
  _QWORD *p_dst;
  void *v16;
  size_t v17;
  _QWORD *v18;
  char v19;
  size_t v20;
  size_t v21;
  BOOL v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  size_t v30;
  void **v31;
  char v32;
  size_t v33;
  size_t v34;
  BOOL v35;
  void **v36;
  size_t v37;
  size_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  _QWORD *v43;
  unsigned __int8 *v44;
  uint64_t **v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  void *v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *Symbol;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  const char *MappingClassString;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v78[4];
  __int16 v79;
  void *__p[2];
  unint64_t v81;
  uint64_t v82;
  __int16 v83;
  void *v84;
  size_t v85;
  unint64_t v86;
  _QWORD *__dst;
  size_t v88;
  unint64_t v89;
  __int128 v90;
  const char *v91;
  int v92;
  char v93;
  uint64_t v94;

  v8 = a8;
  v14 = a8 & 0xFF00000000;
  if ((a8 & 0xFF00000000) != 0)
  {
    if (!__src)
    {
      v17 = 0;
      v18 = 0;
      v19 = 0;
      __dst = 0;
      v88 = 0;
      v89 = 0;
      goto LABEL_18;
    }
    if (__len > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_104;
    if (__len >= 0x17)
    {
      v20 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17)
        v20 = __len | 7;
      v21 = v20 + 1;
      p_dst = operator new(v20 + 1);
      v88 = __len;
      v89 = v21 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v89) = __len;
      p_dst = &__dst;
      if (!__len)
        goto LABEL_17;
    }
    memmove(p_dst, __src, __len);
LABEL_17:
    *((_BYTE *)p_dst + __len) = 0;
    v19 = HIBYTE(v89);
    v18 = __dst;
    v17 = v88;
LABEL_18:
    v22 = v19 < 0;
    if (v19 >= 0)
      v23 = &__dst;
    else
      v23 = v18;
    v24 = v19 & 0x7F;
    if (v22)
      v25 = v17;
    else
      v25 = v24;
    if (v25 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v25 >= 0x17)
      {
        v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v27 = v25 | 7;
        v28 = v27 + 1;
        v26 = operator new(v27 + 1);
        __p[1] = (void *)v25;
        v81 = v28 | 0x8000000000000000;
        __p[0] = v26;
      }
      else
      {
        HIBYTE(v81) = v25;
        v26 = __p;
        if (!v25)
          goto LABEL_32;
      }
      memmove(v26, v23, v25);
LABEL_32:
      v29 = 0;
      *((_BYTE *)v26 + v25) = 0;
      LODWORD(v82) = v8;
      goto LABEL_54;
    }
LABEL_104:
    abort();
  }
  if (!__src)
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v84 = 0;
    v85 = 0;
    v86 = 0;
    goto LABEL_39;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_104;
  if (__len >= 0x17)
  {
    v33 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v33 = __len | 7;
    v34 = v33 + 1;
    v16 = operator new(v33 + 1);
    v85 = __len;
    v86 = v34 | 0x8000000000000000;
    v84 = v16;
  }
  else
  {
    HIBYTE(v86) = __len;
    v16 = &v84;
    if (!__len)
      goto LABEL_38;
  }
  memmove(v16, __src, __len);
LABEL_38:
  *((_BYTE *)v16 + __len) = 0;
  v32 = HIBYTE(v86);
  v31 = (void **)v84;
  v30 = v85;
LABEL_39:
  v35 = v32 < 0;
  if (v32 >= 0)
    v36 = &v84;
  else
    v36 = v31;
  v37 = v32 & 0x7F;
  if (v35)
    v38 = v30;
  else
    v38 = v37;
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_104;
  if (v38 >= 0x17)
  {
    v40 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v40 = v38 | 7;
    v41 = v40 + 1;
    v39 = operator new(v40 + 1);
    __p[1] = (void *)v38;
    v81 = v41 | 0x8000000000000000;
    __p[0] = v39;
  }
  else
  {
    HIBYTE(v81) = v38;
    v39 = __p;
    if (!v38)
      goto LABEL_53;
  }
  memmove(v39, v36, v38);
LABEL_53:
  *((_BYTE *)v39 + v38) = 0;
  LOBYTE(v82) = a5;
  v29 = 1;
LABEL_54:
  BYTE4(v82) = v29;
  v90 = *(_OWORD *)__p;
  v91 = (const char *)v81;
  __p[0] = 0;
  __p[1] = 0;
  v81 = 0;
  v92 = v82;
  v93 = v29;
  v94 = 0;
  v42 = *(unsigned __int8 **)(a1 + 1800);
  if (v42)
  {
    while (1)
    {
      while (1)
      {
        v43 = v42;
        v44 = v42 + 32;
        if (!sub_1C59354B0((unsigned __int8 *)&v90, (const void **)v42 + 4))
          break;
        v42 = (unsigned __int8 *)*v43;
        v45 = (uint64_t **)v43;
        if (!*v43)
          goto LABEL_62;
      }
      if (!sub_1C59354B0(v44, (const void **)&v90))
        break;
      v42 = (unsigned __int8 *)v43[1];
      if (!v42)
      {
        v45 = (uint64_t **)(v43 + 1);
        goto LABEL_62;
      }
    }
    v49 = 1;
  }
  else
  {
    v45 = (uint64_t **)(a1 + 1800);
    v43 = (_QWORD *)(a1 + 1800);
LABEL_62:
    v46 = v43;
    v43 = operator new(0x48uLL);
    *((_OWORD *)v43 + 2) = v90;
    v43[6] = v91;
    v90 = 0uLL;
    v91 = 0;
    *((_DWORD *)v43 + 14) = v82;
    *((_BYTE *)v43 + 60) = BYTE4(v82);
    v43[8] = 0;
    *v43 = 0;
    v43[1] = 0;
    v43[2] = v46;
    *v45 = v43;
    v47 = **(_QWORD **)(a1 + 1792);
    v48 = v43;
    if (v47)
    {
      *(_QWORD *)(a1 + 1792) = v47;
      v48 = *v45;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 1800), v48);
    v49 = 0;
    ++*(_QWORD *)(a1 + 1808);
  }
  if (SHIBYTE(v91) < 0)
    operator delete((void *)v90);
  if (SHIBYTE(v81) < 0)
  {
    operator delete(__p[0]);
    if (v14)
    {
LABEL_70:
      if (SHIBYTE(v89) < 0)
      {
        v50 = __dst;
        goto LABEL_78;
      }
      goto LABEL_74;
    }
  }
  else if (v14)
  {
    goto LABEL_70;
  }
  if (SHIBYTE(v86) < 0)
  {
    v50 = v84;
LABEL_78:
    operator delete(v50);
    if (!v49)
      goto LABEL_79;
    goto LABEL_75;
  }
LABEL_74:
  if (!v49)
  {
LABEL_79:
    v52 = *((_BYTE *)v43 + 55);
    if (v52 >= 0)
      v53 = (uint64_t)(v43 + 4);
    else
      v53 = v43[4];
    if (v52 >= 0)
      v54 = v52 & 0x7F;
    else
      v54 = v43[5];
    if (v14)
    {
      LOWORD(v94) = 261;
      *(_QWORD *)&v90 = v53;
      *((_QWORD *)&v90 + 1) = v54;
    }
    else
    {
      v79 = 773;
      v78[0] = v53;
      v78[1] = v54;
      v78[2] = "[";
      MappingClassString = llvm::XCOFF::getMappingClassString(a5);
      __p[0] = v78;
      v81 = (unint64_t)MappingClassString;
      v82 = v69;
      v83 = 1282;
      *(_QWORD *)&v90 = __p;
      v91 = "]";
      LOWORD(v94) = 770;
    }
    Symbol = (uint64_t *)llvm::MCContext::getOrCreateSymbol(a1, (uint64_t)&v90);
    if (TempSymbol)
    {
      v56 = 1;
      BYTE1(v94) = 1;
      if (*TempSymbol)
      {
        *(_QWORD *)&v90 = TempSymbol;
        v56 = 3;
      }
      LOBYTE(v94) = v56;
      TempSymbol = (_BYTE *)llvm::MCContext::createTempSymbol(a1, (uint64_t)&v90, 0);
    }
    v51 = sub_1C484358C(a1 + 864, 272, 3);
    v57 = *Symbol;
    if (v14)
    {
      if ((v57 & 4) != 0)
      {
        v60 = (uint64_t *)*(Symbol - 1);
        v61 = *v60;
        v58 = (uint64_t)(v60 + 2);
        v59 = v61;
      }
      else
      {
        v58 = 0;
        v59 = 0;
      }
      v62 = sub_1C52C2F08(v58, v59);
      llvm::MCSection::MCSection(v51, 5, v62, v63, a4, (uint64_t)TempSymbol);
      *(_QWORD *)v51 = &unk_1E8182640;
      *(_BYTE *)(v51 + 224) = 0;
      *(_BYTE *)(v51 + 226) = 0;
      *(_QWORD *)(v51 + 232) = Symbol;
      *(_QWORD *)(v51 + 240) = v53;
      *(_QWORD *)(v51 + 248) = v54;
      *(_DWORD *)(v51 + 256) = v8;
      *(_BYTE *)(v51 + 260) = 1;
      *(_BYTE *)(v51 + 264) = a6;
      Symbol[5] = v51;
      *(_BYTE *)(v51 + 24) = 2;
    }
    else
    {
      if ((v57 & 4) != 0)
      {
        v72 = (uint64_t *)*(Symbol - 1);
        v73 = *v72;
        v70 = (uint64_t)(v72 + 2);
        v71 = v73;
      }
      else
      {
        v70 = 0;
        v71 = 0;
      }
      v74 = sub_1C52C2F08(v70, v71);
      sub_1C62B73D4(v51, v74, v75, a5, HIBYTE(a5), a4, (uint64_t)Symbol, (uint64_t)TempSymbol, v53, v54, a6);
    }
    v43[8] = v51;
    v64 = operator new();
    *(_OWORD *)v64 = 0u;
    *(_OWORD *)(v64 + 16) = 0u;
    *(_QWORD *)(v64 + 32) = -1;
    *(_QWORD *)(v64 + 40) = 0;
    *(_BYTE *)(v64 + 48) = 1;
    *(_DWORD *)(v64 + 49) = 0;
    *(_QWORD *)(v64 + 56) = 0;
    *(_QWORD *)(v64 + 64) = v64 + 88;
    *(_OWORD *)(v64 + 72) = xmmword_1C677F680;
    *(_QWORD *)(v64 + 120) = v64 + 136;
    *(_QWORD *)(v64 + 128) = 0x400000000;
    v65 = *(uint64_t **)(v51 + 112);
    v66 = *v65;
    *(_QWORD *)v64 = *v65;
    *(_QWORD *)(v64 + 8) = v65;
    *(_QWORD *)(v66 + 8) = v64;
    *v65 = v64;
    *(_QWORD *)(v64 + 16) = v51;
    if (TempSymbol)
      *(_QWORD *)TempSymbol = *(_QWORD *)TempSymbol & 7 | v64;
    return v51;
  }
LABEL_75:
  v51 = v43[8];
  if ((*(_BYTE *)(v51 + 264) != 0) != a6)
    llvm::report_fatal_error((llvm *)"section's multiply symbols policy does not match", (const char *)1);
  return v51;
}

uint64_t llvm::MCContext::getSubtargetCopy(llvm::MCContext *this, const llvm::MCSubtargetInfo *a2)
{
  unint64_t v3;

  v3 = sub_1C484358C((uint64_t)this + 1848, 256, 3);
  return sub_1C5934710(v3, (uint64_t)a2);
}

void llvm::MCContext::addDebugPrefixMapEntry(uint64_t a1, __int128 *a2, __int128 *a3)
{
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  size_t v8;
  const void *v9;
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  size_t v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  _QWORD *v21;
  size_t v22;
  size_t v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  void **v27;
  void *__dst[2];
  uint64_t v29;
  void *__p[2];
  uint64_t v31;

  sub_1C5934840((char *)__dst, a2, a3);
  v4 = (char *)operator new(0x50uLL);
  v5 = v4;
  *((_OWORD *)v4 + 2) = *(_OWORD *)__dst;
  *((_QWORD *)v4 + 6) = v29;
  __dst[0] = 0;
  __dst[1] = 0;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)__p;
  *((_QWORD *)v4 + 9) = v31;
  v29 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v31 = 0;
  v6 = *(_QWORD **)(a1 + 1432);
  if (v6)
  {
    v7 = v4[55];
    if (v7 >= 0)
      v8 = v4[55];
    else
      v8 = *((_QWORD *)v4 + 5);
    v27 = (void **)(v4 + 32);
    if (v7 >= 0)
      v9 = v4 + 32;
    else
      v9 = (const void *)*((_QWORD *)v4 + 4);
    while (1)
    {
      while (1)
      {
        v10 = v6;
        v13 = (const void *)v6[4];
        v11 = v6 + 4;
        v12 = v13;
        v14 = *((unsigned __int8 *)v11 + 23);
        if ((v14 & 0x80u) == 0)
          v15 = v11;
        else
          v15 = v12;
        v16 = v11[1];
        if ((v14 & 0x80u) == 0)
          v17 = v14 & 0x7F;
        else
          v17 = v11[1];
        if (v17 >= v8)
          v18 = v8;
        else
          v18 = v17;
        v19 = memcmp(v9, v15, v18);
        v20 = v8 < v17;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = (_QWORD *)*v10;
        v21 = v10;
        if (!*v10)
          goto LABEL_34;
      }
      if ((v14 & 0x80u) == 0)
        v22 = v14;
      else
        v22 = v16;
      if (v8 >= v22)
        v23 = v22;
      else
        v23 = v8;
      v24 = memcmp(v15, v9, v23);
      v25 = v22 < v8;
      if (v24)
        v25 = v24 < 0;
      if (!v25)
        break;
      v6 = (_QWORD *)v10[1];
      if (!v6)
      {
        v21 = v10 + 1;
        goto LABEL_34;
      }
    }
    if (*((char *)v5 + 79) < 0)
    {
      operator delete((void *)v5[7]);
      if ((*((_BYTE *)v5 + 55) & 0x80) == 0)
        goto LABEL_39;
    }
    else if ((v7 & 0x80) == 0)
    {
LABEL_39:
      operator delete(v5);
      goto LABEL_40;
    }
    operator delete(*v27);
    goto LABEL_39;
  }
  v21 = (_QWORD *)(a1 + 1432);
  v10 = (_QWORD *)(a1 + 1432);
LABEL_34:
  *v5 = 0;
  v5[1] = 0;
  v5[2] = v10;
  *v21 = v5;
  v26 = **(_QWORD **)(a1 + 1424);
  if (v26)
  {
    *(_QWORD *)(a1 + 1424) = v26;
    v5 = (_QWORD *)*v21;
  }
  sub_1C4768E74(*(uint64_t **)(a1 + 1432), v5);
  ++*(_QWORD *)(a1 + 1440);
LABEL_40:
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v29) < 0)
    operator delete(__dst[0]);
}

void llvm::MCContext::RemapDebugPaths(llvm::MCContext *this)
{
  size_t v2;
  const void *v3;
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  const void **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  const void **v16;
  uint64_t v17;
  char *v18;
  char *v19;
  BOOL v20;
  const void **v21;
  size_t v22;
  int64_t v23;
  _QWORD *v24;

  if (!*((_QWORD *)this + 180))
    return;
  v24 = (_QWORD *)((char *)this + 1424);
  v2 = *((_QWORD *)this + 160);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v3 = (const void *)*((_QWORD *)this + 159);
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    v4 = (const void **)operator new(v5 + 1);
    v22 = v2;
    v23 = v6 | 0x8000000000000000;
    v21 = v4;
    goto LABEL_9;
  }
  HIBYTE(v23) = *((_QWORD *)this + 160);
  v4 = (const void **)&v21;
  if (v2)
LABEL_9:
    memmove(v4, v3, v2);
  *((_BYTE *)v4 + v2) = 0;
  sub_1C5933EDC(&v24, (const void **)&v21);
  v7 = SHIBYTE(v23);
  v8 = v21;
  if (v23 >= 0)
    v9 = (const void **)&v21;
  else
    v9 = v21;
  if (v23 >= 0)
    v10 = HIBYTE(v23) & 0x7F;
  else
    v10 = v22;
  *((_QWORD *)this + 160) = 0;
  if (*((_QWORD *)this + 161) < v10)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)this + 1272, (char *)this + 1296, v10, 1);
    v11 = *((_QWORD *)this + 160);
    goto LABEL_18;
  }
  v11 = 0;
  v12 = 0;
  if (v10)
  {
LABEL_18:
    memcpy((void *)(*((_QWORD *)this + 159) + v11), v9, v10);
    v12 = *((_QWORD *)this + 160);
  }
  *((_QWORD *)this + 160) = v12 + v10;
  v13 = (char *)*((_QWORD *)this + 184);
  v14 = (char *)this + 1480;
  if (v13 != (char *)this + 1480)
  {
    do
    {
      v15 = *((unsigned int *)v13 + 14);
      if ((_DWORD)v15)
      {
        v16 = (const void **)*((_QWORD *)v13 + 6);
        v17 = 24 * v15;
        do
        {
          sub_1C5933EDC(&v24, v16);
          v16 += 3;
          v17 -= 24;
        }
        while (v17);
      }
      v18 = (char *)*((_QWORD *)v13 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (char *)*((_QWORD *)v13 + 2);
          v20 = *(_QWORD *)v19 == (_QWORD)v13;
          v13 = v19;
        }
        while (!v20);
      }
      v13 = v19;
    }
    while (v19 != v14);
  }
  if (v7 < 0)
    operator delete(v8);
}

void sub_1C5933EDC(_QWORD **a1, const void **a2)
{
  char v4;
  BOOL v5;
  const void *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  size_t v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  size_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  void *v27;
  size_t v28;
  __int128 *p_dst;
  size_t v30;
  size_t v31;
  __int128 __dst;
  unint64_t v33;
  void *__src;
  size_t __len[2];
  _QWORD v36[33];

  v36[32] = *MEMORY[0x1E0C80C00];
  v4 = *((_BYTE *)a2 + 23);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  v7 = v4 & 0x7F;
  if (v5)
    v8 = (unint64_t)a2[1];
  else
    v8 = v7;
  v9 = v36;
  __src = v36;
  *(_OWORD *)__len = xmmword_1C64638F0;
  if (v8 >= 0x101)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&__src, v36, v8, 1);
    v9 = __src;
    v10 = __len[0];
  }
  else
  {
    v10 = 0;
    v11 = 0;
    if (!v8)
      goto LABEL_10;
  }
  memcpy((char *)v9 + v10, v6, v8);
  v11 = __len[0];
LABEL_10:
  __len[0] = v11 + v8;
  v12 = *a1;
  v15 = (_QWORD *)*v12;
  v13 = v12 + 1;
  v14 = v15;
  if (v15 == v13)
    goto LABEL_45;
  while (1)
  {
    v16 = *((_BYTE *)v14 + 55);
    v17 = v16;
    v18 = v16 >= 0 ? (unsigned __int8 *)(v14 + 4) : (unsigned __int8 *)v14[4];
    v19 = v16 & 0x7F;
    v20 = v17 >= 0 ? v19 : v14[5];
    v21 = *((_BYTE *)v14 + 79);
    v22 = v21 >= 0 ? v14 + 7 : (_QWORD *)v14[7];
    v23 = v21 >= 0 ? v21 & 0x7F : v14[8];
    if (llvm::sys::path::replace_path_prefix((const void **)&__src, v18, v20, v22, v23, 0))
      break;
    v24 = (_QWORD *)v14[1];
    if (v24)
    {
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD *)v14[2];
        v26 = *v25 == (_QWORD)v14;
        v14 = v25;
      }
      while (!v26);
    }
    v14 = v25;
    if (v25 == v13)
      goto LABEL_45;
  }
  v27 = __src;
  if (__src)
  {
    v28 = __len[0];
    if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (__len[0] >= 0x17)
    {
      v30 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len[0] | 7) != 0x17)
        v30 = __len[0] | 7;
      v31 = v30 + 1;
      p_dst = (__int128 *)operator new(v30 + 1);
      *((_QWORD *)&__dst + 1) = v28;
      v33 = v31 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = __len[0];
      p_dst = &__dst;
      if (!__len[0])
        goto LABEL_41;
    }
    memmove(p_dst, v27, v28);
LABEL_41:
    *((_BYTE *)p_dst + v28) = 0;
    goto LABEL_42;
  }
  __dst = 0uLL;
  v33 = 0;
LABEL_42:
  if (*((char *)a2 + 23) < 0)
    operator delete((void *)*a2);
  *(_OWORD *)a2 = __dst;
  a2[2] = (const void *)v33;
LABEL_45:
  if (__src != v36)
    free(__src);
}

uint64_t llvm::MCContext::emitDwarfUnwindInfo(llvm::MCContext *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 244);
  if (v1)
    return *(unsigned int *)(v1 + 4);
  else
    return 2;
}

void llvm::MCContext::setGenDwarfRootFile(uint64_t a1, const void *a2, unint64_t a3, int *a4, size_t a5)
{
  unsigned __int8 v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  const void *v17;
  unint64_t v18;
  void *v19;
  size_t v20;
  size_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  int v24;
  unsigned __int8 *v25;
  char *v26;
  void **v27;
  __int16 v28;
  _QWORD *v29;
  __int16 v30;
  __int128 v31;
  char v32;
  __int16 v33;
  __n128 v34;
  char v35;
  __int16 v36;
  _BYTE __s1[24];
  _BYTE v38[1024];
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int16 *)(a1 + 1624) < 5u)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    *(_OWORD *)__s1 = xmmword_1C85F4BB0;
    *(_QWORD *)&__s1[16] = 0;
    llvm::MD5::update((int *)__s1, a4, a5);
    llvm::MD5::final((int *)__s1, (int *)&v34);
    v8 = v34.n128_u8[0];
    v39[0] = *(unint64_t *)((char *)v34.n128_u64 + 1);
    *(_QWORD *)((char *)v39 + 7) = v34.n128_u64[1];
    v9 = 1;
  }
  *(_QWORD *)__s1 = v38;
  *(_OWORD *)&__s1[8] = xmmword_1C86520E0;
  if (a3 >= 0x401)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__s1, v38, a3, 1);
    v10 = *(_QWORD *)&__s1[8];
    goto LABEL_6;
  }
  v10 = 0;
  if (a3)
  {
LABEL_6:
    memcpy((void *)(*(_QWORD *)__s1 + v10), a2, a3);
    v10 = *(_QWORD *)&__s1[8];
  }
  v11 = v10 + a3;
  *(_QWORD *)&__s1[8] = v11;
  if (!v11)
    goto LABEL_10;
  if (v11 != 1)
    goto LABEL_14;
  if (**(_BYTE **)__s1 != 45)
  {
    v11 = 1;
  }
  else
  {
LABEL_10:
    v12 = 0;
    *(_QWORD *)&__s1[8] = 0;
    if (*(_QWORD *)&__s1[16] <= 6uLL)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__s1, v38, 7uLL, 1);
      v12 = *(_QWORD *)&__s1[8];
    }
    v13 = (_DWORD *)(*(_QWORD *)__s1 + v12);
    *(_DWORD *)((char *)v13 + 3) = 1047423332;
    *v13 = 1685353276;
    v11 = *(_QWORD *)&__s1[8] + 7;
    *(_QWORD *)&__s1[8] += 7;
  }
LABEL_14:
  v14 = *(unsigned __int8 *)(a1 + 1471);
  if (*(char *)(a1 + 1471) < 0)
    v15 = *(_QWORD *)(a1 + 1456);
  else
    v15 = *(unsigned __int8 *)(a1 + 1471);
  v16 = *(unsigned __int8 **)__s1;
  if (v15)
  {
    if ((v14 & 0x80u) == 0)
      v17 = (const void *)(a1 + 1448);
    else
      v17 = *(const void **)(a1 + 1448);
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a1 + 1456);
    if (v11 != v14 || v11 && memcmp(*(const void **)__s1, v17, v11))
    {
      v18 = sub_1C5E7BE8C(v16, v11, 0);
      if (v18 != -1)
        *(_QWORD *)&__s1[8] = v18;
      v36 = 260;
      v34.n128_u64[0] = a1 + 1448;
      v33 = 257;
      v30 = 257;
      v28 = 257;
      llvm::sys::path::append(__s1, 0, &v34, (_QWORD **)&v31, &v29, &v27);
      v16 = *(unsigned __int8 **)__s1;
      v11 = *(_QWORD *)&__s1[8];
    }
  }
  v19 = *(void **)(a1 + 1272);
  v20 = *(_QWORD *)(a1 + 1280);
  if (v11 >= v20 && (!v20 || !memcmp(v16, *(const void **)(a1 + 1272), *(_QWORD *)(a1 + 1280))))
  {
    if (v11 >= v20)
      v21 = v20;
    else
      v21 = v11;
    v22 = &v16[v21];
    v23 = v11 - v21;
    v24 = *v22;
    if (v23)
      v25 = v22 + 1;
    else
      v25 = v22;
    if (v24 == 47)
      v11 = v23 - (v23 != 0);
    else
      v11 = v23;
    if (v24 == 47)
      v16 = v25;
    else
      v16 = v22;
  }
  LODWORD(v31) = 0;
  v34.n128_u64[0] = (unint64_t)&v31;
  v26 = sub_1C592911C((uint64_t **)(a1 + 1472), (unsigned int *)&v31, (uint64_t)&std::piecewise_construct, &v34);
  LOBYTE(v31) = v8;
  *(_QWORD *)((char *)&v31 + 1) = v39[0];
  *((_QWORD *)&v31 + 1) = *(_QWORD *)((char *)v39 + 7);
  v32 = v9;
  v34.n128_u8[0] = 0;
  v35 = 0;
  sub_1C59292C4((uint64_t)(v26 + 40), v19, v20, v16, v11, &v31, &v34);
  if (*(_BYTE **)__s1 != v38)
    free(*(void **)__s1);
}

void llvm::MCContext::getDwarfFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned int a10)
{
  char *v15;
  _QWORD v16[2];
  _QWORD v17[2];
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v17[0] = a2;
  v17[1] = a3;
  v16[0] = a4;
  v16[1] = a5;
  *(_QWORD *)&v18 = &a10;
  v15 = sub_1C592911C((uint64_t **)(a1 + 1472), &a10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v18);
  v20 = *(_OWORD *)a7;
  v21 = *(_BYTE *)(a7 + 16);
  v18 = *(_OWORD *)a8;
  v19 = *(_QWORD *)(a8 + 16);
  llvm::MCDwarfLineTableHeader::tryGetFile((uint64_t)(v15 + 40), (uint64_t)v17, (uint64_t)v16, &v20, &v18, *(unsigned __int16 *)(a1 + 1624), a6, a9);
}

uint64_t llvm::MCContext::finalizeDwarfSections(uint64_t this, llvm::MCStreamer *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[2];

  v2 = this;
  v3 = *(_QWORD **)(this + 1544);
  v4 = *(_QWORD **)(this + 1552);
  v6[0] = a2;
  v6[1] = this + 1520;
  if (v3 != v4)
  {
    while (1)
    {
      this = sub_1C593568C(v6, v3);
      v5 = v3 + 1;
      if ((_DWORD)this)
        break;
      ++v3;
      if (v5 == v4)
      {
        v3 = v4;
        goto LABEL_9;
      }
    }
    while (v5 != v4)
    {
      this = sub_1C593568C(v6, v5);
      if ((this & 1) == 0)
        *v3++ = *v5;
      ++v5;
    }
  }
LABEL_9:
  if (v3 != *(_QWORD **)(v2 + 1552))
    *(_QWORD *)(v2 + 1552) = v3;
  return this;
}

_DWORD *sub_1C59345F4(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        *(_OWORD *)result = xmmword_1C85F6FF0;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t sub_1C5934688(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)(a1 + 16);
  if (v3)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      v5 = v3[4];
      v3[4] = 0;
      if (v5)
      {
        v6 = sub_1C5934688();
        MEMORY[0x1CAA32FC0](v6, 0x10A0C40C01AB3A7);
      }
      operator delete(v3);
      v3 = v4;
    }
    while (v4);
  }
  v7 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
    operator delete(v7);
  return a1;
}

uint64_t sub_1C5934710(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE *v17;
  __int128 v18;

  *(_QWORD *)a1 = &off_1E8183140;
  v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1C47EBC30((_BYTE *)v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  v6 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  v7 = (_BYTE *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_1C47EBC30(v7, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)v7 = v8;
  }
  v9 = (_BYTE *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_1C47EBC30(v9, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_OWORD *)(a2 + 104);
  v12 = *(_OWORD *)(a2 + 120);
  v13 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v13;
  *(_OWORD *)(a1 + 120) = v12;
  *(_OWORD *)(a1 + 104) = v11;
  v14 = *(_OWORD *)(a2 + 168);
  v15 = *(_OWORD *)(a2 + 184);
  v16 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 184) = v15;
  *(_OWORD *)(a1 + 168) = v14;
  v17 = (_BYTE *)(a1 + 232);
  if (*(char *)(a2 + 255) < 0)
  {
    sub_1C47EBC30(v17, *(void **)(a2 + 232), *(_QWORD *)(a2 + 240));
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_OWORD *)v17 = v18;
  }
  return a1;
}

char *sub_1C5934840(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1C47EBC30(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

char **sub_1C59348B8(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 72 * v3;
    do
    {
      if (v2[v4 - 49] < 0)
        operator delete(*(void **)&v2[v4 - 72]);
      v4 -= 72;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C5934928(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8180308;
  a2[1] = v2;
  return result;
}

void sub_1C5934940(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  if (a1)
  {
    sub_1C5934940(*(_QWORD *)a1);
    sub_1C5934940(*((_QWORD *)a1 + 1));
    v2 = *((_QWORD *)a1 + 66);
    if (v2)
    {
      v3 = *((_QWORD *)a1 + 67);
      v4 = (void *)*((_QWORD *)a1 + 66);
      if (v3 != v2)
      {
        do
        {
          v5 = *(void **)(v3 - 24);
          if (v5)
          {
            *(_QWORD *)(v3 - 16) = v5;
            operator delete(v5);
          }
          v3 -= 32;
        }
        while (v3 != v2);
        v4 = (void *)*((_QWORD *)a1 + 66);
      }
      *((_QWORD *)a1 + 67) = v2;
      operator delete(v4);
    }
    MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 63), 8);
    if (a1[447] < 0)
      operator delete(*((void **)a1 + 53));
    if (a1[423] < 0)
      operator delete(*((void **)a1 + 50));
    sub_1C51838C8((uint64_t)(a1 + 368));
    sub_1C59348B8((char **)a1 + 17);
    sub_1C4E01820((char **)a1 + 6);
    operator delete(a1);
  }
}

void sub_1C5934A04(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 48;
        v7 = (void **)(v4 - 32);
        sub_1C5934A7C(&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C5934A7C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((_DWORD *)v4 - 2) >= 0x41u)
        {
          v6 = *((_QWORD *)v4 - 2);
          if (v6)
            MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned int *sub_1C5934B0C(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_DWORD **)result;
      v7 = 16 * v2;
      do
      {
        *v6 = -1;
        v6 += 4;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(16 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 16 * v10;
        do
        {
          *result = -1;
          result += 4;
          v11 -= 16;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

_DWORD *sub_1C5934C08(_DWORD *result)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_OWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2++ = xmmword_1C85F6FF0;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C5934C5C(result);
    }
  }
  return result;
}

_DWORD *sub_1C5934C5C(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_OWORD **)result;
      v7 = 16 * v2;
      do
      {
        *v6++ = xmmword_1C85F6FF0;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    return sub_1C59345F4(v1, v5);
  }
  return result;
}

uint64_t *sub_1C5934CF8(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v14;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i)
  {
    if (v8 != -8)
    {
      while (!v8 || v8 == -8)
      {
        v14 = i[1];
        ++i;
        v8 = v14;
      }
      return i;
    }
    --*(_DWORD *)(a1 + 16);
  }
  v9 = sub_1C484358C(*(_QWORD *)(a1 + 24), a3 + 17, 3);
  v10 = (_QWORD *)v9;
  v11 = v9 + 16;
  if (a3)
    memcpy((void *)(v9 + 16), a2, a3);
  *(_BYTE *)(v11 + a3) = 0;
  *v10 = a3;
  v10[1] = 0;
  *i = (uint64_t)v10;
  ++*(_DWORD *)(a1 + 12);
  for (i = (uint64_t *)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i == -8;
  return i;
}

BOOL sub_1C5934DF8(unsigned __int8 *__s1, unsigned __int8 **a2)
{
  signed __int8 v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  size_t v9;
  size_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  size_t v16;
  int v17;
  size_t v19;
  const void *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  size_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  size_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;

  v3 = __s1[23];
  v4 = *((_QWORD *)__s1 + 1);
  v5 = v3 & 0x7F;
  if (v3 >= 0)
    v6 = v3 & 0x7F;
  else
    v6 = *((_QWORD *)__s1 + 1);
  v7 = *((_BYTE *)a2 + 23);
  v8 = v7;
  v9 = v7 & 0x7F;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = (size_t)a2[1];
  if (v8 >= 0)
    v11 = (unsigned __int8 *)a2;
  else
    v11 = *a2;
  if (v6 != v10)
  {
LABEL_17:
    if ((__s1[23] & 0x80) != 0)
    {
      v15 = *(unsigned __int8 **)__s1;
    }
    else
    {
      v4 = __s1[23];
      v15 = __s1;
    }
LABEL_21:
    if (v10 >= v4)
      v16 = v4;
    else
      v16 = v10;
    v17 = memcmp(v15, v11, v16);
    if (v17)
      return v17 < 0;
    else
      return v4 < v10;
  }
  if ((__s1[23] & 0x80) != 0)
  {
    v15 = *(unsigned __int8 **)__s1;
    if (memcmp(*(const void **)__s1, v11, v4))
      goto LABEL_21;
  }
  else if ((v3 & 0x7F) != 0)
  {
    v13 = v11;
    v14 = __s1;
    while (*v14 == *v13)
    {
      ++v14;
      ++v13;
      if (!--v5)
        goto LABEL_27;
    }
    goto LABEL_17;
  }
LABEL_27:
  v20 = (const void *)*((_QWORD *)__s1 + 3);
  v19 = *((_QWORD *)__s1 + 4);
  v21 = a2[3];
  v22 = a2[4];
  if ((unsigned __int8 *)v19 != v22)
  {
    if ((unint64_t)v22 >= v19)
      v24 = *((_QWORD *)__s1 + 4);
    else
      v24 = (size_t)a2[4];
    if (!v24)
    {
LABEL_44:
      if (v19 < (unint64_t)v22)
        v31 = -1;
      else
        v31 = 1;
      return v31 == -1;
    }
LABEL_40:
    v30 = memcmp(v20, v21, v24);
    v31 = (v30 >> 31) | 1;
    if (!v30)
      v31 = 0;
    if ((unsigned __int8 *)v19 == v22 || v30)
      return v31 == -1;
    goto LABEL_44;
  }
  if (v19)
  {
    v23 = memcmp(*((const void **)__s1 + 3), a2[3], *((_QWORD *)__s1 + 4));
    v24 = v19;
    if (v23)
      goto LABEL_40;
  }
  v25 = a2[6];
  v26 = (unsigned __int8 *)*((_QWORD *)__s1 + 6);
  if (v25 >= v26)
    v27 = *((_QWORD *)__s1 + 6);
  else
    v27 = (size_t)a2[6];
  if (v27 && (v28 = memcmp(*((const void **)__s1 + 5), a2[5], v27)) != 0)
  {
    v29 = (v28 >> 31) | 1;
  }
  else
  {
    if (v26 == v25)
      return *((_DWORD *)__s1 + 14) < *((_DWORD *)a2 + 14);
    if (v26 < v25)
      v29 = -1;
    else
      v29 = 1;
  }
  return v29 >> 31;
}

_QWORD *sub_1C5934FC4(uint64_t a1, _QWORD *a2, unsigned __int8 *__s1)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  unsigned __int8 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (unsigned __int8 *)(v4 + 32);
        if (!sub_1C5934DF8(__s1, (unsigned __int8 **)(v4 + 32)))
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_1C5934DF8(v8, (unsigned __int8 **)__s1))
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_QWORD *sub_1C5935054(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_1C62B77D4((uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1C62B77D4((uint64_t)a2, v5 + 4))
    return v2;
  return v5;
}

_OWORD *sub_1C59350D0(uint64_t a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;

  v6 = (void **)sub_1C4768D58(a1, &v15, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    v11 = v15;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v11;
    *v8 = v7;
    v12 = **(_QWORD **)a1;
    v13 = (uint64_t *)v7;
    if (v12)
    {
      *(_QWORD *)a1 = v12;
      v13 = (uint64_t *)*v8;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v13);
    ++*(_QWORD *)(a1 + 16);
  }
  return v7;
}

BOOL sub_1C5935190(unsigned __int8 *__s1, unsigned __int8 **a2)
{
  signed __int8 v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  size_t v9;
  size_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  size_t v16;
  int v17;
  size_t v19;
  const void *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  size_t v24;
  int v25;
  int v26;
  int v27;
  int v28;

  v3 = __s1[23];
  v4 = *((_QWORD *)__s1 + 1);
  v5 = v3 & 0x7F;
  if (v3 >= 0)
    v6 = v3 & 0x7F;
  else
    v6 = *((_QWORD *)__s1 + 1);
  v7 = *((_BYTE *)a2 + 23);
  v8 = v7;
  v9 = v7 & 0x7F;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = (size_t)a2[1];
  if (v8 >= 0)
    v11 = (unsigned __int8 *)a2;
  else
    v11 = *a2;
  if (v6 == v10)
  {
    if ((__s1[23] & 0x80) != 0)
    {
      v15 = *(unsigned __int8 **)__s1;
      if (memcmp(*(const void **)__s1, v11, v4))
        goto LABEL_21;
    }
    else if ((v3 & 0x7F) != 0)
    {
      v13 = v11;
      v14 = __s1;
      while (*v14 == *v13)
      {
        ++v14;
        ++v13;
        if (!--v5)
          goto LABEL_27;
      }
      goto LABEL_17;
    }
LABEL_27:
    v20 = (const void *)*((_QWORD *)__s1 + 3);
    v19 = *((_QWORD *)__s1 + 4);
    v21 = a2[3];
    v22 = a2[4];
    if ((unsigned __int8 *)v19 == v22)
    {
      if (!v19 || (v23 = memcmp(*((const void **)__s1 + 3), a2[3], *((_QWORD *)__s1 + 4)), v24 = v19, !v23))
      {
        v25 = *((_DWORD *)__s1 + 10);
        v26 = *((_DWORD *)a2 + 10);
        if (v25 == v26)
          return *((_DWORD *)__s1 + 11) < *((_DWORD *)a2 + 11);
        else
          return v25 < v26;
      }
    }
    else
    {
      if ((unint64_t)v22 >= v19)
        v24 = *((_QWORD *)__s1 + 4);
      else
        v24 = (size_t)a2[4];
      if (!v24)
      {
LABEL_40:
        if (v19 < (unint64_t)v22)
          v28 = -1;
        else
          v28 = 1;
        return v28 == -1;
      }
    }
    v27 = memcmp(v20, v21, v24);
    v28 = (v27 >> 31) | 1;
    if (!v27)
      v28 = 0;
    if ((unsigned __int8 *)v19 == v22 || v27)
      return v28 == -1;
    goto LABEL_40;
  }
LABEL_17:
  if ((__s1[23] & 0x80) != 0)
  {
    v15 = *(unsigned __int8 **)__s1;
  }
  else
  {
    v4 = __s1[23];
    v15 = __s1;
  }
LABEL_21:
  if (v10 >= v4)
    v16 = v4;
  else
    v16 = v10;
  v17 = memcmp(v15, v11, v16);
  if (v17)
    return v17 < 0;
  else
    return v4 < v10;
}

BOOL sub_1C593532C(unsigned __int8 *__s1, unsigned __int8 **a2)
{
  signed __int8 v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  size_t v9;
  size_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  size_t v16;
  int v17;
  size_t v19;
  const void *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  size_t v24;
  int v25;
  int v26;

  v3 = __s1[23];
  v4 = *((_QWORD *)__s1 + 1);
  v5 = v3 & 0x7F;
  if (v3 >= 0)
    v6 = v3 & 0x7F;
  else
    v6 = *((_QWORD *)__s1 + 1);
  v7 = *((_BYTE *)a2 + 23);
  v8 = v7;
  v9 = v7 & 0x7F;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = (size_t)a2[1];
  if (v8 >= 0)
    v11 = (unsigned __int8 *)a2;
  else
    v11 = *a2;
  if (v6 == v10)
  {
    if ((__s1[23] & 0x80) != 0)
    {
      v15 = *(unsigned __int8 **)__s1;
      if (memcmp(*(const void **)__s1, v11, v4))
        goto LABEL_21;
    }
    else if ((v3 & 0x7F) != 0)
    {
      v13 = v11;
      v14 = __s1;
      while (*v14 == *v13)
      {
        ++v14;
        ++v13;
        if (!--v5)
          goto LABEL_27;
      }
      goto LABEL_17;
    }
LABEL_27:
    v20 = (const void *)*((_QWORD *)__s1 + 3);
    v19 = *((_QWORD *)__s1 + 4);
    v21 = a2[3];
    v22 = a2[4];
    if ((unsigned __int8 *)v19 == v22)
    {
      if (!v19)
        return *((_DWORD *)__s1 + 10) < *((_DWORD *)a2 + 10);
      v23 = memcmp(*((const void **)__s1 + 3), a2[3], *((_QWORD *)__s1 + 4));
      v24 = v19;
      if (!v23)
        return *((_DWORD *)__s1 + 10) < *((_DWORD *)a2 + 10);
    }
    else
    {
      if ((unint64_t)v22 >= v19)
        v24 = *((_QWORD *)__s1 + 4);
      else
        v24 = (size_t)a2[4];
      if (!v24)
      {
LABEL_39:
        if (v19 < (unint64_t)v22)
          v26 = -1;
        else
          v26 = 1;
        return v26 == -1;
      }
    }
    v25 = memcmp(v20, v21, v24);
    v26 = (v25 >> 31) | 1;
    if (!v25)
      v26 = 0;
    if ((unsigned __int8 *)v19 == v22 || v25)
      return v26 == -1;
    goto LABEL_39;
  }
LABEL_17:
  if ((__s1[23] & 0x80) != 0)
  {
    v15 = *(unsigned __int8 **)__s1;
  }
  else
  {
    v4 = __s1[23];
    v15 = __s1;
  }
LABEL_21:
  if (v10 >= v4)
    v16 = v4;
  else
    v16 = v10;
  v17 = memcmp(v15, v11, v16);
  if (v17)
    return v17 < 0;
  else
    return v4 < v10;
}

uint64_t sub_1C59354B0(unsigned __int8 *a1, const void **a2)
{
  unsigned __int8 *v3;
  int v4;
  int v5;
  BOOL v6;
  size_t v7;
  const void *v8;
  const void *v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  size_t v17;
  int v18;
  BOOL v19;
  size_t v21;
  const void *v22;
  const void *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  int v28;
  BOOL v29;
  unsigned __int8 *v30;
  size_t v31;
  int v32;
  BOOL v33;

  v3 = a1;
  v4 = a1[28];
  v5 = *((unsigned __int8 *)a2 + 28);
  if (a1[28])
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (v4 != v5)
      return v4 != 0;
    v7 = *((unsigned __int8 *)a2 + 23);
    v8 = a2[1];
    if ((v7 & 0x80u) == 0)
      v9 = a2;
    else
      v9 = *a2;
    if ((v7 & 0x80u) == 0)
      v10 = v7 & 0x7F;
    else
      v10 = (size_t)a2[1];
    v11 = a1[23];
    v12 = v11;
    if ((char)a1[23] < 0)
    {
      a1 = *(unsigned __int8 **)a1;
      v12 = *((_QWORD *)v3 + 1);
    }
    if (v10 >= v12)
      v13 = v12;
    else
      v13 = v10;
    v14 = memcmp(a1, v9, v13);
    v15 = v12 < v10;
    if (v14)
      v15 = v14 < 0;
    if (v15)
      return 1;
    if ((v11 & 0x80u) == 0)
      v16 = v3;
    else
      v16 = *(unsigned __int8 **)v3;
    if ((v11 & 0x80u) != 0)
      v11 = *((_QWORD *)v3 + 1);
    if ((v7 & 0x80u) != 0)
      v7 = (size_t)v8;
    if (v11 >= v7)
      v17 = v7;
    else
      v17 = v11;
    v18 = memcmp(v9, v16, v17);
    v19 = v7 < v11;
    if (v18)
      v19 = v18 < 0;
    if (!v19)
      return *((_DWORD *)v3 + 6) < *((_DWORD *)a2 + 6);
    return 0;
  }
  v21 = *((unsigned __int8 *)a2 + 23);
  v22 = a2[1];
  if ((v21 & 0x80u) == 0)
    v23 = a2;
  else
    v23 = *a2;
  if ((v21 & 0x80u) == 0)
    v24 = v21 & 0x7F;
  else
    v24 = (size_t)a2[1];
  v25 = a1[23];
  v26 = v25;
  if ((char)a1[23] < 0)
  {
    a1 = *(unsigned __int8 **)a1;
    v26 = *((_QWORD *)v3 + 1);
  }
  if (v24 >= v26)
    v27 = v26;
  else
    v27 = v24;
  v28 = memcmp(a1, v23, v27);
  v29 = v26 < v24;
  if (v28)
    v29 = v28 < 0;
  if (v29)
    return 1;
  if ((v25 & 0x80u) == 0)
    v30 = v3;
  else
    v30 = *(unsigned __int8 **)v3;
  if ((v25 & 0x80u) != 0)
    v25 = *((_QWORD *)v3 + 1);
  if ((v21 & 0x80u) != 0)
    v21 = (size_t)v22;
  if (v25 >= v21)
    v31 = v21;
  else
    v31 = v25;
  v32 = memcmp(v23, v30, v31);
  v33 = v21 < v25;
  if (v32)
    v33 = v32 < 0;
  if (v33)
    return 0;
  return v3[24] < *((unsigned __int8 *)a2 + 24);
}

uint64_t sub_1C593568C(_QWORD *a1, _QWORD *a2)
{
  int v4;
  uint64_t v6;
  _QWORD *v7;

  v4 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 1232))(*a1, *a2);
  if ((v4 & 1) == 0)
  {
    v6 = a1[1];
    v7 = 0;
    if (sub_1C614F7B0((uint64_t *)v6, a2, &v7))
    {
      *v7 = -8192;
      *(int32x2_t *)(v6 + 8) = vadd_s32(*(int32x2_t *)(v6 + 8), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  return v4 ^ 1u;
}

void sub_1C5935720()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5935734(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8180350;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C593576C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8180350;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C593578C(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  char *v19[23];

  v19[22] = *(char **)MEMORY[0x1E0C80C00];
  llvm::SourceMgr::GetMessage(*a3, **(char ***)(a1 + 8), 0, *(llvm::Twine **)(a1 + 16), 0, 0, 0, 0, (uint64_t)&v8);
  *(_OWORD *)a2 = v8;
  v4 = (void **)(a2 + 16);
  if (*(char *)(a2 + 39) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = v9;
  *(_QWORD *)(a2 + 32) = v10;
  HIBYTE(v10) = 0;
  LOBYTE(v9) = 0;
  *(_QWORD *)(a2 + 40) = v11;
  *(_DWORD *)(a2 + 48) = v12;
  v5 = (void **)(a2 + 56);
  if (*(char *)(a2 + 79) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v13;
  *(_QWORD *)(a2 + 72) = v14;
  HIBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  v6 = (void **)(a2 + 80);
  if (*(char *)(a2 + 103) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)v15;
  *(_QWORD *)(a2 + 96) = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15[0]) = 0;
  v7 = *(void **)(a2 + 104);
  if (v7)
  {
    *(_QWORD *)(a2 + 112) = v7;
    operator delete(v7);
  }
  *(_OWORD *)(a2 + 104) = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 120) = v18;
  __p[1] = 0;
  v18 = 0;
  __p[0] = 0;
  sub_1C4FACD18(a2 + 128, (uint64_t)v19);
  sub_1C4FAD100(v19);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)v13);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)v9);
}

void sub_1C593594C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5935960(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8180398;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5935998(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8180398;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C59359B8(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  char *v19[23];

  v19[22] = *(char **)MEMORY[0x1E0C80C00];
  llvm::SourceMgr::GetMessage(*a3, **(char ***)(a1 + 8), 1, *(llvm::Twine **)(a1 + 16), 0, 0, 0, 0, (uint64_t)&v8);
  *(_OWORD *)a2 = v8;
  v4 = (void **)(a2 + 16);
  if (*(char *)(a2 + 39) < 0)
    operator delete(*v4);
  *(_OWORD *)v4 = v9;
  *(_QWORD *)(a2 + 32) = v10;
  HIBYTE(v10) = 0;
  LOBYTE(v9) = 0;
  *(_QWORD *)(a2 + 40) = v11;
  *(_DWORD *)(a2 + 48) = v12;
  v5 = (void **)(a2 + 56);
  if (*(char *)(a2 + 79) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v13;
  *(_QWORD *)(a2 + 72) = v14;
  HIBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  v6 = (void **)(a2 + 80);
  if (*(char *)(a2 + 103) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = *(_OWORD *)v15;
  *(_QWORD *)(a2 + 96) = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15[0]) = 0;
  v7 = *(void **)(a2 + 104);
  if (v7)
  {
    *(_QWORD *)(a2 + 112) = v7;
    operator delete(v7);
  }
  *(_OWORD *)(a2 + 104) = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 120) = v18;
  __p[1] = 0;
  v18 = 0;
  __p[0] = 0;
  sub_1C4FACD18(a2 + 128, (uint64_t)v19);
  sub_1C4FAD100(v19);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)v13);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)v9);
}

uint64_t llvm::MCDwarfLineStr::MCDwarfLineStr(uint64_t this, llvm::MCContext *a2)
{
  int v2;

  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = 0x100000007;
  *(_BYTE *)(this + 48) = 0;
  v2 = *(unsigned __int8 *)(*((_QWORD *)a2 + 19) + 424);
  *(_BYTE *)(this + 56) = v2;
  if (v2)
    *(_QWORD *)this = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 21) + 96) + 8);
  return this;
}

{
  int v2;

  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = 0x100000007;
  *(_BYTE *)(this + 48) = 0;
  v2 = *(unsigned __int8 *)(*((_QWORD *)a2 + 19) + 424);
  *(_BYTE *)(this + 56) = v2;
  if (v2)
    *(_QWORD *)this = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 21) + 96) + 8);
  return this;
}

void llvm::MCDwarfLineEntry::make(llvm::MCDwarfLineEntry *this, llvm::MCStreamer *a2, llvm::MCSection *a3)
{
  uint64_t v4;
  unint64_t TempSymbol;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char **v11;
  char **v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  unsigned int v24;
  _DWORD *v25[4];
  __int16 v26;

  v4 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v4 + 1512))
  {
    v25[0] = "tmp";
    v26 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(v4, (uint64_t)v25, 1);
    (*(void (**)(llvm::MCDwarfLineEntry *, unint64_t, _QWORD))(*(_QWORD *)this + 192))(this, TempSymbol, 0);
    v7 = *((_QWORD *)this + 1);
    v8 = *(_QWORD *)(v7 + 1496);
    v9 = *(_QWORD *)(v7 + 1504);
    *(_BYTE *)(v7 + 1512) = 0;
    v24 = *(_DWORD *)(v7 + 1632);
    v25[0] = &v24;
    v10 = sub_1C592911C((uint64_t **)(v7 + 1472), &v24, (uint64_t)&std::piecewise_construct, v25);
    v25[0] = a2;
    v11 = (char **)sub_1C5939764((uint64_t)(v10 + 504), (uint64_t *)v25);
    v12 = v11;
    v14 = v11[1];
    v13 = (unint64_t)v11[2];
    if ((unint64_t)v14 >= v13)
    {
      v16 = *v11;
      v17 = (v14 - *v11) >> 5;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 59)
        abort();
      v19 = v13 - (_QWORD)v16;
      if (v19 >> 4 > v18)
        v18 = v19 >> 4;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
        v20 = 0x7FFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 59)
          sub_1C4764EE4();
        v21 = (char *)operator new(32 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[32 * v17];
      *(_QWORD *)v22 = v8;
      *((_QWORD *)v22 + 1) = v9;
      *((_QWORD *)v22 + 2) = TempSymbol;
      v22[24] = 0;
      v15 = v22 + 32;
      if (v14 != v16)
      {
        do
        {
          v23 = *((_OWORD *)v14 - 2);
          *(_OWORD *)(v22 - 23) = *(_OWORD *)(v14 - 23);
          *((_OWORD *)v22 - 2) = v23;
          v22 -= 32;
          v14 -= 32;
        }
        while (v14 != v16);
        v14 = *v12;
      }
      *v12 = v22;
      v12[1] = v15;
      v12[2] = &v21[32 * v20];
      if (v14)
        operator delete(v14);
    }
    else
    {
      *(_QWORD *)v14 = v8;
      *((_QWORD *)v14 + 1) = v9;
      *((_QWORD *)v14 + 2) = TempSymbol;
      v15 = v14 + 32;
      v14[24] = 0;
    }
    v12[1] = v15;
  }
}

void llvm::MCLineSection::addEndEntry(llvm::MCLineSection *this, llvm::MCSymbol *a2)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char **v11;
  unint64_t v12;
  _OWORD *v13;
  char **v14;
  char *v15;
  uint64_t v16;
  char **v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v4 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (!v4 && (*((_DWORD *)a2 + 2) & 0x1C00) == 0x800)
  {
    *((_DWORD *)a2 + 2) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)a2 + 3));
    *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v4;
  }
  v29 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)&v28 = 0;
  v5 = sub_1C61252B8((uint64_t *)this, &v29, &v28);
  v6 = v28;
  if ((v5 & 1) == 0)
    v6 = *(_QWORD *)this + 16 * *((unsigned int *)this + 4);
  if (v6 != *(_QWORD *)this + 16 * *((unsigned int *)this + 4))
  {
    v7 = *(unsigned int *)(v6 + 8);
    v8 = *((_QWORD *)this + 3);
    v9 = v8 + 32 * v7;
    if (*((_QWORD *)this + 4) != v9)
    {
      v12 = *(_QWORD *)(v9 + 24);
      v11 = (char **)(v9 + 24);
      v10 = v12;
      v14 = v11 - 1;
      v13 = *(v11 - 1);
      v28 = *(v13 - 2);
      LODWORD(v29) = *(_DWORD *)((char *)v13 - 7);
      *(_DWORD *)((char *)&v29 + 3) = *((_DWORD *)v13 - 1);
      if ((unint64_t)v13 >= v12)
      {
        v16 = v8 + 32 * v7;
        v19 = *(_OWORD **)(v16 + 8);
        v17 = (char **)(v16 + 8);
        v18 = v19;
        v20 = ((char *)v13 - (char *)v19) >> 5;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 59)
          abort();
        v22 = v10 - (_QWORD)v18;
        if (v22 >> 4 > v21)
          v21 = v22 >> 4;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0)
          v23 = 0x7FFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          if (v23 >> 59)
            sub_1C4764EE4();
          v24 = (char *)operator new(32 * v23);
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[32 * v20];
        v26 = &v24[32 * v23];
        *(_OWORD *)v25 = v28;
        *((_QWORD *)v25 + 2) = a2;
        v25[24] = 1;
        *(_DWORD *)(v25 + 25) = v29;
        *((_DWORD *)v25 + 7) = *(_DWORD *)((char *)&v29 + 3);
        v15 = v25 + 32;
        if (v13 == v18)
        {
          *v17 = v25;
          *v14 = v15;
          *v11 = v26;
        }
        else
        {
          do
          {
            v27 = *(v13 - 2);
            *(_OWORD *)(v25 - 23) = *(_OWORD *)((char *)v13 - 23);
            *((_OWORD *)v25 - 2) = v27;
            v25 -= 32;
            v13 -= 2;
          }
          while (v13 != v18);
          v13 = *v17;
          *v17 = v25;
          *v14 = v15;
          *v11 = v26;
          if (!v13)
            goto LABEL_8;
        }
        operator delete(v13);
      }
      else
      {
        *v13 = *(v13 - 2);
        *((_QWORD *)v13 + 2) = a2;
        *((_BYTE *)v13 + 24) = 1;
        *(_DWORD *)((char *)v13 + 25) = *(_DWORD *)((char *)v13 - 7);
        *((_DWORD *)v13 + 7) = *((_DWORD *)v13 - 1);
        v15 = (char *)(v13 + 2);
      }
LABEL_8:
      *v14 = v15;
    }
  }
}

uint64_t llvm::MCDwarfLineTable::emitOne(llvm::MCStreamer *a1, uint64_t a2, unsigned int **a3)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  int v21;
  uint64_t result;
  char v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;

  v5 = *a3;
  v4 = a3[1];
  if (*a3 != v4)
  {
    v24 = 0;
LABEL_3:
    v6 = 0;
    v7 = 0;
    v8 = 1;
    v9 = 1;
    v26 = 1;
    v27 = 0;
    while (1)
    {
      v10 = *((_QWORD *)v5 + 2);
      v11 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 152);
      if (*((_BYTE *)v5 + 24))
      {
        result = (*(uint64_t (**)(llvm::MCStreamer *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1272))(a1, 0x7FFFFFFFFFFFFFFFLL, v6, *((_QWORD *)v5 + 2), *(unsigned int *)(v11 + 8));
        v5 += 8;
        v24 = 1;
        if (v5 != v4)
          goto LABEL_3;
        return result;
      }
      v12 = *v5;
      v28 = v5[1];
      if (v26 != (_DWORD)v12)
      {
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 4, 1);
        llvm::MCStreamer::emitULEB128IntValue(a1, v12, 0);
        v26 = v12;
      }
      v13 = *((unsigned __int16 *)v5 + 4);
      if (v27 != (_DWORD)v13)
      {
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 5, 1);
        llvm::MCStreamer::emitULEB128IntValue(a1, v13, 0);
        v27 = v13;
      }
      v14 = v5[3];
      if ((_DWORD)v14 && *(unsigned __int16 *)(*((_QWORD *)a1 + 1) + 1624) >= 4u)
      {
        v25 = v7;
        v15 = v8;
        v16 = v4;
        v17 = 1;
        v18 = v5[3];
        do
        {
          ++v17;
          v19 = v18 > 0x7F;
          v18 >>= 7;
        }
        while (v19);
        (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a1 + 512))(a1, 0, 1);
        llvm::MCStreamer::emitULEB128IntValue(a1, v17, 0);
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 4, 1);
        llvm::MCStreamer::emitULEB128IntValue(a1, v14, 0);
        v4 = v16;
        v8 = v15;
        v7 = v25;
      }
      v20 = *((unsigned __int8 *)v5 + 11);
      if (v7 != (_DWORD)v20)
      {
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 12, 1);
        llvm::MCStreamer::emitULEB128IntValue(a1, v20, 0);
        v7 = v20;
      }
      v21 = *((unsigned __int8 *)v5 + 10);
      if (((v8 ^ v21) & 1) != 0)
      {
        v8 = *((unsigned __int8 *)v5 + 10);
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 6, 1);
        LOBYTE(v21) = *((_BYTE *)v5 + 10);
        if ((v21 & 2) == 0)
        {
LABEL_18:
          if ((v21 & 4) != 0)
            goto LABEL_25;
          goto LABEL_19;
        }
      }
      else if ((v21 & 2) == 0)
      {
        goto LABEL_18;
      }
      (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 7, 1);
      LOBYTE(v21) = *((_BYTE *)v5 + 10);
      if ((v21 & 4) != 0)
      {
LABEL_25:
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 10, 1);
        if ((*((_BYTE *)v5 + 10) & 8) == 0)
          goto LABEL_21;
LABEL_20:
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 11, 1);
        goto LABEL_21;
      }
LABEL_19:
      if ((v21 & 8) != 0)
        goto LABEL_20;
LABEL_21:
      result = (*(uint64_t (**)(llvm::MCStreamer *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 1272))(a1, v28 - v9, v6, v10, *(unsigned int *)(v11 + 8));
      v9 = v5[1];
      v5 += 8;
      v6 = v10;
      if (v5 == v4)
      {
        if ((v24 & 1) == 0)
          return (*(uint64_t (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 1264))(a1, a2, v10);
        return result;
      }
    }
  }
  v10 = 0;
  return (*(uint64_t (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 1264))(a1, a2, v10);
}

void llvm::MCDwarfLineTable::emit(llvm::MCStreamer *a1, int a2)
{
  uint64_t v2;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v19[8];
  uint64_t v20;
  char v21;

  v2 = *((_QWORD *)a1 + 1);
  if (*(_QWORD *)(v2 + 1488))
  {
    v19[0] = 0;
    v21 = 0;
    if (*(unsigned __int16 *)(v2 + 1624) >= 5u)
    {
      v15 = 0;
      v12 = 0;
      v13 = 0;
      v11 = 0;
      v14 = 0;
      v16 = 0x100000007;
      v17 = 0;
      if (*(_BYTE *)(*(_QWORD *)(v2 + 152) + 424))
        v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 168) + 96) + 8);
      sub_1C62B8C5C((uint64_t)v19, (uint64_t)&v11);
      MEMORY[0x1CAA32FB4](v12, 8);
    }
    (*(void (**)(llvm::MCStreamer *, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, *(_QWORD *)(*(_QWORD *)(v2 + 168) + 88), 0);
    v5 = *(_QWORD **)(v2 + 1472);
    v6 = (_QWORD *)(v2 + 1480);
    if (v5 != v6)
    {
      v7 = a2 & 0xFFFFFF;
      do
      {
        llvm::MCDwarfLineTable::emitCU((llvm::MCDwarfLineTableHeader *)(v5 + 5), a1, v7, (uint64_t)v19);
        v8 = (_QWORD *)v5[1];
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v5[2];
            v10 = *v9 == (_QWORD)v5;
            v5 = v9;
          }
          while (!v10);
        }
        v5 = v9;
      }
      while (v9 != v6);
    }
    if (v21)
    {
      llvm::MCDwarfLineStr::emitSection((llvm::MCDwarfLineStr *)v19, a1);
      if (v21)
        MEMORY[0x1CAA32FB4](v20, 8);
    }
  }
}

uint64_t llvm::MCDwarfLineTable::emitCU(llvm::MCDwarfLineTableHeader *a1, llvm::MCStreamer *a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int **v10;
  uint64_t v11;

  llvm::MCDwarfLineTableHeader::Emit(a1, a2, a3 & 0xFFFFFF, byte_1C86630D0, a3 - 1, a4);
  v7 = v6;
  v9 = (uint64_t *)*((_QWORD *)a1 + 61);
  v8 = (uint64_t *)*((_QWORD *)a1 + 62);
  while (v9 != v8)
  {
    v10 = (unsigned int **)(v9 + 1);
    v11 = *v9;
    v9 += 4;
    llvm::MCDwarfLineTable::emitOne(a2, v11, v10);
  }
  return (*(uint64_t (**)(llvm::MCStreamer *, uint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, v7, 0);
}

unint64_t llvm::MCDwarfLineTableHeader::Emit(llvm::MCDwarfLineTableHeader *a1, llvm::MCStreamer *a2, int a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  unint64_t TempSymbol;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const char *v20;
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;

  v10 = *((_QWORD *)a2 + 1);
  TempSymbol = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v22[0] = "tmp";
    v23 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(v10, (uint64_t)v22, 1);
  }
  (*(void (**)(llvm::MCStreamer *, unint64_t))(*(_QWORD *)a2 + 1256))(a2, TempSymbol);
  if (*(_BYTE *)(v10 + 1626))
    v12 = 8;
  else
    v12 = 4;
  v22[0] = "debug_line";
  v23 = 259;
  v20 = "unit length";
  v21 = 259;
  (*(void (**)(llvm::MCStreamer *, _QWORD *, const char **))(*(_QWORD *)a2 + 1248))(a2, v22, &v20);
  v13 = *(unsigned __int16 *)(v10 + 1624);
  (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *(unsigned __int16 *)(v10 + 1624), 2);
  if (v13 >= 5)
  {
    (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *(unsigned int *)(*(_QWORD *)(v10 + 152) + 8), 1);
    (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 1);
  }
  v22[0] = "prologue_start";
  v23 = 259;
  v14 = llvm::MCContext::createTempSymbol(v10, (uint64_t)v22, 1);
  v22[0] = "prologue_end";
  v23 = 259;
  v15 = llvm::MCContext::createTempSymbol(v10, (uint64_t)v22, 1);
  (*(void (**)(llvm::MCStreamer *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 832))(a2, v15, v14, v12);
  (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, v14, 0);
  (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *(unsigned int *)(*(_QWORD *)(v10 + 152) + 28), 1);
  if (v13 >= 4)
    (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, 1, 1);
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, 1, 1);
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, (uint64_t)(__int16)a3 >> 8, 1);
  (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, BYTE2(a3), 1);
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, a5 + 1, 1);
  for (; a5; --a5)
  {
    v16 = *a4++;
    (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, v16, 1);
  }
  if (v13 > 4)
    llvm::MCDwarfLineTableHeader::emitV5FileDirTables((uint64_t)a1, a2, a6);
  else
    llvm::MCDwarfLineTableHeader::emitV2FileDirTables(a1, a2);
  (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, v15, 0);
  return TempSymbol;
}

unint64_t llvm::MCDwarfLineTableHeader::Emit(llvm::MCDwarfLineTableHeader *a1, llvm::MCStreamer *a2, int a3, uint64_t a4)
{
  return llvm::MCDwarfLineTableHeader::Emit(a1, a2, a3 & 0xFFFFFF, byte_1C86630D0, a3 - 1, a4);
}

uint64_t llvm::MCDwarfLineTableHeader::emitV2FileDirTables(llvm::MCDwarfLineTableHeader *this, llvm::MCStreamer *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *((unsigned int *)this + 4);
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)this + 1);
    v6 = 24 * v4;
    do
    {
      v7 = *((_BYTE *)v5 + 23);
      v8 = v7 < 0;
      if (v7 >= 0)
        v9 = v5;
      else
        v9 = (uint64_t *)*v5;
      v10 = v7 & 0x7F;
      if (v8)
        v11 = v5[1];
      else
        v11 = v10;
      (*(void (**)(llvm::MCStreamer *, uint64_t *, uint64_t))(*(_QWORD *)a2 + 488))(a2, v9, v11);
      (*(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(_QWORD *)a2 + 488))(a2, &unk_1C86630DC, 1);
      v5 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 1);
  if (*((_DWORD *)this + 26) >= 2u)
  {
    v12 = 0;
    v13 = 1;
    do
    {
      v14 = *((_QWORD *)this + 12) + v12;
      v17 = *(_QWORD *)(v14 + 72);
      v15 = v14 + 72;
      v16 = v17;
      v18 = *(_BYTE *)(v15 + 23);
      if (v18 >= 0)
        v19 = v15;
      else
        v19 = v16;
      v20 = *(_QWORD *)(v15 + 8);
      if (v18 >= 0)
        v21 = v18 & 0x7F;
      else
        v21 = v20;
      (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 488))(a2, v19, v21);
      (*(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(_QWORD *)a2 + 488))(a2, &unk_1C86630DC, 1);
      llvm::MCStreamer::emitULEB128IntValue(a2, *(unsigned int *)(*((_QWORD *)this + 12) + v12 + 96), 0);
      (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 1);
      (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 1);
      ++v13;
      v12 += 72;
    }
    while (v13 < *((unsigned int *)this + 26));
  }
  return (*(uint64_t (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 1);
}

void llvm::MCDwarfLineTableHeader::emitV5FileDirTables(uint64_t a1, llvm::MCStreamer *a2, uint64_t a3)
{
  unint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;

  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, 1, 1);
  llvm::MCStreamer::emitULEB128IntValue(a2, 1uLL, 0);
  if (*(_BYTE *)(a3 + 64))
    v6 = 31;
  else
    v6 = 8;
  llvm::MCStreamer::emitULEB128IntValue(a2, v6, 0);
  llvm::MCStreamer::emitULEB128IntValue(a2, *(unsigned int *)(a1 + 16) + 1, 0);
  v7 = *(_BYTE *)(a1 + 383);
  if (v7 < 0)
  {
    if (*(_QWORD *)(a1 + 368))
      goto LABEL_6;
LABEL_13:
    v10 = *((_QWORD *)a2 + 1);
    v8 = *(_QWORD **)(v10 + 1272);
    v9 = *(_QWORD *)(v10 + 1280);
    goto LABEL_14;
  }
  if (!*(_BYTE *)(a1 + 383))
    goto LABEL_13;
LABEL_6:
  if (v7 >= 0)
    v8 = (_QWORD *)(a1 + 360);
  else
    v8 = *(_QWORD **)(a1 + 360);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 383);
  else
    v9 = *(_QWORD *)(a1 + 368);
LABEL_14:
  if (*(_BYTE *)(a3 + 64))
  {
    llvm::MCDwarfLineStr::emitRef(a3, a2, v8, v9);
    v27 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v27)
    {
      v28 = *(_QWORD *)(a1 + 8);
      v29 = 24 * v27;
      do
      {
        v30 = *(_BYTE *)(v28 + 23);
        v31 = v30 < 0;
        if (v30 >= 0)
          v32 = (_QWORD *)v28;
        else
          v32 = *(_QWORD **)v28;
        v33 = v30 & 0x7F;
        if (v31)
          v34 = *(_QWORD *)(v28 + 8);
        else
          v34 = v33;
        llvm::MCDwarfLineStr::emitRef(a3, a2, v32, v34);
        v28 += 24;
        v29 -= 24;
      }
      while (v29);
    }
  }
  else
  {
    (*(void (**)(llvm::MCStreamer *, _QWORD *, uint64_t))(*(_QWORD *)a2 + 488))(a2, v8, v9);
    (*(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(_QWORD *)a2 + 488))(a2, &unk_1C86630DC, 1);
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = *(uint64_t **)(a1 + 8);
      v13 = 24 * v11;
      do
      {
        v14 = *((_BYTE *)v12 + 23);
        v15 = v14 < 0;
        if (v14 >= 0)
          v16 = v12;
        else
          v16 = (uint64_t *)*v12;
        v17 = v14 & 0x7F;
        if (v15)
          v18 = v12[1];
        else
          v18 = v17;
        (*(void (**)(llvm::MCStreamer *, uint64_t *, uint64_t))(*(_QWORD *)a2 + 488))(a2, v16, v18);
        (*(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(_QWORD *)a2 + 488))(a2, &unk_1C86630DC, 1);
        v12 += 3;
        v13 -= 24;
      }
      while (v13);
    }
  }
  v19 = 2;
  if (*(_BYTE *)(a1 + 457))
    v19 = 3;
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, v19 + *(unsigned __int8 *)(a1 + 456), 1);
  llvm::MCStreamer::emitULEB128IntValue(a2, 1uLL, 0);
  if (*(_BYTE *)(a3 + 64))
    v20 = 31;
  else
    v20 = 8;
  llvm::MCStreamer::emitULEB128IntValue(a2, v20, 0);
  llvm::MCStreamer::emitULEB128IntValue(a2, 2uLL, 0);
  llvm::MCStreamer::emitULEB128IntValue(a2, 0xFuLL, 0);
  if (*(_BYTE *)(a1 + 457))
  {
    llvm::MCStreamer::emitULEB128IntValue(a2, 5uLL, 0);
    llvm::MCStreamer::emitULEB128IntValue(a2, 0x1EuLL, 0);
  }
  if (*(_BYTE *)(a1 + 456))
  {
    llvm::MCStreamer::emitULEB128IntValue(a2, 0x2001uLL, 0);
    if (*(_BYTE *)(a3 + 64))
      v21 = 31;
    else
      v21 = 8;
    llvm::MCStreamer::emitULEB128IntValue(a2, v21, 0);
  }
  v22 = *(_DWORD *)(a1 + 104);
  if (v22 <= 1)
    v23 = 1;
  else
    v23 = v22;
  llvm::MCStreamer::emitULEB128IntValue(a2, v23, 0);
  v24 = a1 + 384;
  if ((*(char *)(a1 + 407) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 407))
      goto LABEL_42;
    goto LABEL_41;
  }
  if (!*(_QWORD *)(a1 + 392))
LABEL_41:
    v24 = *(_QWORD *)(a1 + 96) + 72;
LABEL_42:
  sub_1C5936C9C(a2, v24, *(unsigned __int8 *)(a1 + 457), *(unsigned __int8 *)(a1 + 456), a3);
  if (*(_DWORD *)(a1 + 104) >= 2u)
  {
    v25 = 1;
    v26 = 72;
    do
    {
      sub_1C5936C9C(a2, *(_QWORD *)(a1 + 96) + v26, *(unsigned __int8 *)(a1 + 457), *(unsigned __int8 *)(a1 + 456), a3);
      ++v25;
      v26 += 72;
    }
    while (v25 < *(unsigned int *)(a1 + 104));
  }
}

void sub_1C5936C9C(llvm::MCStreamer *a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  char v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v10 = *(_BYTE *)(a2 + 23);
  v11 = v10 < 0;
  if (v10 >= 0)
    v12 = (_QWORD *)a2;
  else
    v12 = *(_QWORD **)a2;
  v13 = v10 & 0x7F;
  if (v11)
    v14 = *(_QWORD *)(a2 + 8);
  else
    v14 = v13;
  if (*(_BYTE *)(a5 + 64))
  {
    llvm::MCDwarfLineStr::emitRef(a5, a1, v12, v14);
  }
  else
  {
    (*(void (**)(llvm::MCStreamer *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 488))(a1, v12, v14);
    (*(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(_QWORD *)a1 + 488))(a1, &unk_1C86630DC, 1);
  }
  llvm::MCStreamer::emitULEB128IntValue(a1, *(unsigned int *)(a2 + 24), 0);
  if (a3)
    (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 496))(a1, a2 + 28, 16);
  if (a4)
  {
    if (*(_BYTE *)(a2 + 64))
      v15 = *(_QWORD *)(a2 + 56);
    else
      v15 = 0;
    if (*(_BYTE *)(a2 + 64))
      v16 = *(_QWORD **)(a2 + 48);
    else
      v16 = 0;
    if (*(_BYTE *)(a5 + 64))
    {
      llvm::MCDwarfLineStr::emitRef(a5, a1, v16, v15);
    }
    else
    {
      (*(void (**)(llvm::MCStreamer *, _QWORD *, uint64_t))(*(_QWORD *)a1 + 488))(a1, v16, v15);
      (*(void (**)(llvm::MCStreamer *, void *, uint64_t))(*(_QWORD *)a1 + 488))(a1, &unk_1C86630DC, 1);
    }
  }
}

void llvm::MCDwarfLineTable::tryGetFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, unsigned int a7@<W6>, uint64_t a8@<X8>)
{
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = *(_OWORD *)a4;
  v11 = *(_BYTE *)(a4 + 16);
  v8 = *(_OWORD *)a5;
  v9 = *(_QWORD *)(a5 + 16);
  llvm::MCDwarfLineTableHeader::tryGetFile(a1, a2, a3, &v10, &v8, a6, a7, a8);
}

void llvm::MCDwarfLineTableHeader::tryGetFile(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, unsigned int a6@<W5>, unsigned int a7@<W6>, uint64_t a8@<X8>)
{
  size_t v15;
  const char *v16;
  char v17;
  const void *v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  char v22;
  int v23;
  uint64_t v24;
  size_t v25;
  const void *v26;
  uint64_t v27;
  const void *v28;
  size_t v29;
  unsigned int v30;
  int v31;
  size_t v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v45;
  uint64_t v46;
  char v47;
  char *v48;
  char *v49;
  char *v50;
  char **v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  const char *v76;
  size_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned __int8 *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unsigned __int8 *v86;
  uint64_t v87;
  unint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  int v93;
  uint64_t v94;
  const void *v95;
  unsigned int v97;
  const char *v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  __int128 v104;
  unsigned int v105;
  size_t v106;
  uint64_t v107;
  __int128 *v108;
  unsigned __int8 *v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  __int128 v115;
  char v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  __int128 *v120;
  __int128 *v121;
  __int128 *v122;
  __int128 *v123;
  unsigned int v124;
  char *v125;
  unsigned int v126;
  uint64_t v127;
  unsigned __int8 *__s1;
  unsigned int __s1a;
  _QWORD v131[4];
  __int16 v132;
  _QWORD v133[4];
  __int16 v134;
  _BYTE __dst[24];
  uint64_t v136;
  uint64_t v137;
  int v138;
  __int128 v139;
  char v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v16 = *(const char **)a2;
  v15 = *(_QWORD *)(a2 + 8);
  v17 = *(_BYTE *)(a1 + 383);
  if (v17 >= 0)
    v18 = (const void *)(a1 + 360);
  else
    v18 = *(const void **)(a1 + 360);
  v19 = v17 & 0x7F;
  if (v17 < 0)
    v19 = *(_QWORD *)(a1 + 368);
  if (v15 == v19 && (!v15 || !memcmp(v16, v18, v15)))
  {
    v15 = 0;
    v16 = "";
    *(_QWORD *)a2 = "";
    *(_QWORD *)(a2 + 8) = 0;
  }
  if (!*(_QWORD *)(a3 + 8))
  {
    v15 = 0;
    *(_QWORD *)a3 = "<stdin>";
    *(_QWORD *)(a3 + 8) = 7;
    v16 = "";
    *(_QWORD *)a2 = "";
    *(_QWORD *)(a2 + 8) = 0;
  }
  v20 = *(_DWORD *)(a1 + 104);
  if (!v20)
  {
    v21 = *((_BYTE *)a4 + 16);
    *(_BYTE *)(a1 + 457) &= v21;
    *(_BYTE *)(a1 + 458) |= v21;
    *(_BYTE *)(a1 + 456) = *((_BYTE *)a5 + 16);
  }
  if (a6 >= 5)
  {
    v139 = *a4;
    v140 = *((_BYTE *)a4 + 16);
    v22 = *(_BYTE *)(a1 + 407);
    v23 = v22;
    v24 = v22 & 0x7F;
    v25 = v23 >= 0 ? v24 : *(_QWORD *)(a1 + 392);
    if (v25 && v25 == *(_QWORD *)(a3 + 8))
    {
      v26 = v23 >= 0 ? (const void *)(a1 + 384) : *(const void **)(a1 + 384);
      if (!memcmp(v26, *(const void **)a3, v25))
      {
        if (*(_BYTE *)(a1 + 428) && v140)
        {
          if (*(_QWORD *)(a1 + 412) != (_QWORD)v139 || *(_QWORD *)(a1 + 420) != *((_QWORD *)&v139 + 1))
            goto LABEL_24;
        }
        else if ((*(_BYTE *)(a1 + 428) == 0) == (v140 != 0))
        {
          goto LABEL_24;
        }
        *(_BYTE *)(a8 + 8) &= ~1u;
        *(_DWORD *)a8 = 0;
        return;
      }
    }
  }
LABEL_24:
  v127 = a3;
  if (a7)
  {
LABEL_69:
    v51 = (char **)(a1 + 96);
    if (v20 <= a7)
    {
      v52 = a7 + 1;
      if (v20 != (_DWORD)v52)
      {
        v53 = v20;
        if (v20 <= v52)
        {
          if (*(_DWORD *)(a1 + 108) >= v52)
          {
            v54 = a4;
            v69 = *v51;
          }
          else
          {
            *(_QWORD *)__dst = 0;
            v58 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 96, a7 + 1, 72, (unint64_t *)__dst);
            v59 = *(char **)(a1 + 96);
            v60 = *(_DWORD *)(a1 + 104);
            v125 = v58;
            if (v60)
            {
              v61 = &v59[72 * v60];
              v62 = v58;
              do
              {
                v63 = *(_OWORD *)v59;
                *((_QWORD *)v62 + 2) = *((_QWORD *)v59 + 2);
                *(_OWORD *)v62 = v63;
                *((_QWORD *)v59 + 1) = 0;
                *((_QWORD *)v59 + 2) = 0;
                *(_QWORD *)v59 = 0;
                v64 = *(_OWORD *)(v59 + 24);
                v65 = *(_OWORD *)(v59 + 40);
                *(_OWORD *)(v62 + 56) = *(_OWORD *)(v59 + 56);
                *(_OWORD *)(v62 + 40) = v65;
                *(_OWORD *)(v62 + 24) = v64;
                v59 += 72;
                v62 += 72;
              }
              while (v59 != v61);
              v59 = *(char **)(a1 + 96);
              v66 = *(unsigned int *)(a1 + 104);
              if ((_DWORD)v66)
              {
                v67 = 72 * v66;
                do
                {
                  if (v59[v67 - 49] < 0)
                    operator delete(*(void **)&v59[v67 - 72]);
                  v67 -= 72;
                }
                while (v67);
                v59 = *v51;
              }
            }
            v68 = *(_DWORD *)__dst;
            if (v59 != (char *)(a1 + 112))
              free(v59);
            v54 = a4;
            v69 = v125;
            *(_QWORD *)(a1 + 96) = v125;
            *(_DWORD *)(a1 + 108) = v68;
            v53 = *(unsigned int *)(a1 + 104);
          }
          if (v52 != v53)
            bzero(&v69[72 * v53], 72 * ((72 * (v52 - v53) - 72) / 0x48uLL) + 72);
        }
        else
        {
          v54 = a4;
          v55 = 9 * v20;
          v56 = (uint64_t)&(*v51)[72 * v20 - 72];
          v57 = 72 * v52 - 8 * v55;
          do
          {
            if (*(char *)(v56 + 23) < 0)
              operator delete(*(void **)v56);
            v56 -= 72;
            v57 += 72;
          }
          while (v57);
        }
        *(_DWORD *)(a1 + 104) = v52;
        a4 = v54;
      }
    }
    v70 = *v51;
    v71 = (uint64_t)&(*v51)[72 * a7];
    if (*(char *)(v71 + 23) < 0)
    {
      if (*(_QWORD *)(v71 + 8))
        goto LABEL_96;
    }
    else if (*(_BYTE *)(v71 + 23))
    {
LABEL_96:
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      v73 = qword_1ED836B58[0];
      v74 = (_QWORD *)operator new();
      v75 = v74;
      v76 = "file number already allocated";
LABEL_127:
      *(_QWORD *)__dst = v76;
      LOWORD(v137) = 259;
      *v74 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)__dst, v74 + 1);
      v75[4] = 3;
      v75[5] = v73;
      *((_BYTE *)v75 + 48) = 1;
      *(_BYTE *)(a8 + 8) |= 1u;
      *(_QWORD *)a8 = v75;
      return;
    }
    if (*(unsigned __int8 *)(a1 + 456) != *((unsigned __int8 *)a5 + 16))
    {
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      v73 = qword_1ED836B58[0];
      v74 = (_QWORD *)operator new();
      v75 = v74;
      v76 = "inconsistent use of embedded source";
      goto LABEL_127;
    }
    v77 = *(_QWORD *)(a2 + 8);
    v126 = a7;
    v121 = a4;
    __s1a = a7;
    if (!v77)
    {
      v78 = *(unsigned __int8 **)v127;
      v79 = *(_QWORD *)(v127 + 8);
      *(_QWORD *)&__dst[16] = 0;
      v136 = 0;
      *(_QWORD *)__dst = v78;
      *(_QWORD *)&__dst[8] = v79;
      v137 = v79;
      v138 = 0;
      llvm::sys::path::reverse_iterator::operator++((uint64_t)__dst);
      v80 = v136;
      if (v136)
      {
        v81 = *(_QWORD *)&__dst[16];
        v82 = *(unsigned __int8 **)v127;
        v83 = *(_QWORD *)(v127 + 8);
        v84 = sub_1C5E7BE8C(*(unsigned __int8 **)v127, v83, 0);
        if (v83 >= v84)
          v85 = v84;
        else
          v85 = v83;
        if (v84 == -1)
        {
          v85 = 0;
          v86 = 0;
        }
        else
        {
          v86 = v82;
        }
        *(_QWORD *)a2 = v86;
        *(_QWORD *)(a2 + 8) = v85;
        if (!v85)
        {
          v105 = 0;
LABEL_141:
          a7 = v126;
          goto LABEL_142;
        }
        *(_QWORD *)v127 = v81;
        *(_QWORD *)(v127 + 8) = v80;
        a7 = v126;
      }
      v77 = *(_QWORD *)(a2 + 8);
      if (!v77)
      {
        v105 = 0;
LABEL_142:
        v106 = *(_QWORD *)(v127 + 8);
        if (v106 <= 0x7FFFFFFFFFFFFFF7)
        {
          v107 = a8;
          v108 = a5;
          v109 = *(unsigned __int8 **)v127;
          if (v106 >= 0x17)
          {
            v111 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v106 | 7) != 0x17)
              v111 = v106 | 7;
            v112 = v111 + 1;
            v110 = operator new(v111 + 1);
            v113 = v112 | 0x8000000000000000;
            a7 = v126;
            *(_QWORD *)&__dst[8] = v106;
            *(_QWORD *)&__dst[16] = v113;
            *(_QWORD *)__dst = v110;
          }
          else
          {
            __dst[23] = *(_QWORD *)(v127 + 8);
            v110 = __dst;
            if (!v106)
              goto LABEL_150;
          }
          memmove(v110, v109, v106);
LABEL_150:
          v110[v106] = 0;
          if (*(char *)(v71 + 23) < 0)
            operator delete(*(void **)v71);
          *(_OWORD *)v71 = *(_OWORD *)__dst;
          *(_QWORD *)(v71 + 16) = *(_QWORD *)&__dst[16];
          v114 = &v70[72 * __s1a];
          *((_DWORD *)v114 + 6) = v105;
          v115 = *v121;
          v114[44] = *((_BYTE *)v121 + 16);
          *(_OWORD *)(v114 + 28) = v115;
          v116 = *((_BYTE *)v121 + 16);
          *(_BYTE *)(a1 + 457) &= v116;
          *(_BYTE *)(a1 + 458) |= v116;
          v117 = *v108;
          *((_QWORD *)v114 + 8) = *((_QWORD *)v108 + 2);
          *((_OWORD *)v114 + 3) = v117;
          if (*((_BYTE *)v108 + 16))
            *(_BYTE *)(a1 + 456) = 1;
          *(_BYTE *)(v107 + 8) &= ~1u;
          *(_DWORD *)v107 = a7;
          return;
        }
LABEL_157:
        abort();
      }
    }
    v123 = a5;
    v87 = *(_QWORD *)(a1 + 8);
    v88 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v88)
    {
      v119 = a8;
      v89 = *(const char **)a2;
      v90 = 24 * v88;
      v91 = *(_QWORD *)(a1 + 8);
      while (1)
      {
        v92 = *(_BYTE *)(v91 + 23);
        v93 = v92;
        v94 = v92 & 0x7F;
        if (v93 < 0)
          v94 = *(_QWORD *)(v91 + 8);
        if (v94 == v77)
        {
          v95 = v93 >= 0 ? (const void *)v91 : *(const void **)v91;
          if (!memcmp(v95, v89, v77))
            break;
        }
        v91 += 24;
        v90 -= 24;
        if (!v90)
        {
          v91 = v87 + 24 * v88;
          break;
        }
      }
      a8 = v119;
    }
    else
    {
      v91 = *(_QWORD *)(a1 + 8);
    }
    v97 = -1431655765 * ((v91 - v87) >> 3);
    a5 = v123;
    if (v88 <= v97)
    {
      if (v77 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_157;
      v98 = *(const char **)a2;
      if (v77 >= 0x17)
      {
        v100 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v77 | 7) != 0x17)
          v100 = v77 | 7;
        v101 = v100 + 1;
        v99 = operator new(v100 + 1);
        *(_QWORD *)&__dst[8] = v77;
        *(_QWORD *)&__dst[16] = v101 | 0x8000000000000000;
        *(_QWORD *)__dst = v99;
      }
      else
      {
        __dst[23] = v77;
        v99 = __dst;
      }
      memmove(v99, v98, v77);
      v99[v77] = 0;
      v102 = sub_1C4E01890(a1 + 8, (unint64_t)__dst, 1);
      v103 = *(_QWORD *)(a1 + 8) + 24 * *(unsigned int *)(a1 + 16);
      v104 = *(_OWORD *)v102;
      *(_QWORD *)(v103 + 16) = *(_QWORD *)(v102 + 16);
      *(_OWORD *)v103 = v104;
      *(_QWORD *)(v102 + 8) = 0;
      *(_QWORD *)(v102 + 16) = 0;
      *(_QWORD *)v102 = 0;
      ++*(_DWORD *)(a1 + 16);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      a5 = v123;
    }
    v105 = v97 + 1;
    goto LABEL_141;
  }
  *(_QWORD *)__dst = &v136;
  if (v20 <= 1)
    v20 = 1;
  *(_OWORD *)&__dst[8] = xmmword_1C64638F0;
  v131[0] = v16;
  v131[1] = v15;
  v131[2] = 0;
  v132 = 1797;
  v28 = *(const void **)a3;
  v27 = *(_QWORD *)(a3 + 8);
  v133[0] = v131;
  v133[2] = v28;
  v133[3] = v27;
  v134 = 1282;
  llvm::Twine::toVector((uint64_t)v133, (uint64_t)__dst);
  v29 = *(_QWORD *)&__dst[8];
  __s1 = *(unsigned __int8 **)__dst;
  v30 = *(_DWORD *)(a1 + 336);
  if (!v30)
  {
    *(_QWORD *)(a1 + 340) = 0;
    v45 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v45)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v45[16] = 2;
    *(_QWORD *)(a1 + 328) = v45;
    v30 = 16;
    *(_DWORD *)(a1 + 336) = 16;
  }
  v118 = a8;
  v124 = v20;
  v120 = a4;
  v122 = a5;
  v31 = 0;
  if (v29)
  {
    v32 = v29;
    v33 = __s1;
    do
    {
      v34 = *v33++;
      v31 = 33 * v31 + v34;
      --v32;
    }
    while (v32);
  }
  v35 = *(_QWORD *)(a1 + 328);
  v36 = v30 - 1;
  v37 = v35 + 8 * v30 + 8;
  v38 = -1;
  v39 = 1;
  v40 = v31;
  while (1)
  {
    v41 = v40 & v36;
    v42 = *(_QWORD **)(v35 + 8 * v41);
    if (!v42)
      break;
    if (v42 == (_QWORD *)-8)
    {
      if (v38 == -1)
        v38 = v40 & v36;
    }
    else if (*(_DWORD *)(v37 + 4 * v41) == v31
           && v29 == *v42
           && (!v29 || !memcmp(__s1, (char *)v42 + *(unsigned int *)(a1 + 348), v29)))
    {
      goto LABEL_46;
    }
    v40 = v39 + v41;
    ++v39;
  }
  v43 = v38;
  if (v38 == -1)
  {
    v43 = v41;
    v41 = v41;
  }
  else
  {
    v41 = v38;
  }
  *(_DWORD *)(v37 + 4 * v43) = v31;
  v42 = *(_QWORD **)(v35 + 8 * v41);
LABEL_46:
  if (v42)
  {
    a4 = v120;
    a5 = v122;
    if (v42 != (_QWORD *)-8)
    {
      a7 = v124;
      v46 = *(_QWORD *)(v35 + 8 * v41);
      a8 = v118;
      *(_BYTE *)(v118 + 8) &= ~1u;
      *(_DWORD *)v118 = *(_DWORD *)(v46 + 8);
      v47 = 1;
      goto LABEL_65;
    }
    --*(_DWORD *)(a1 + 344);
  }
  v48 = (char *)operator new(v29 + 17, (std::align_val_t)8uLL);
  v49 = v48;
  v50 = v48 + 16;
  a4 = v120;
  a5 = v122;
  if (v29)
    memcpy(v48 + 16, __s1, v29);
  v50[v29] = 0;
  *(_QWORD *)v49 = v29;
  a7 = v124;
  *((_DWORD *)v49 + 2) = v124;
  *(_QWORD *)(v35 + 8 * v41) = v49;
  ++*(_DWORD *)(a1 + 340);
  llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 328), v41);
  v47 = 0;
  a8 = v118;
LABEL_65:
  if (*(uint64_t **)__dst != &v136)
    free(*(void **)__dst);
  if ((v47 & 1) == 0)
  {
    v20 = *(_DWORD *)(a1 + 104);
    goto LABEL_69;
  }
}

void llvm::MCDwarfLineAddr::Emit(_QWORD *a1, int a2, uint64_t a3, unint64_t a4)
{
  llvm::raw_ostream *v8;
  _QWORD v9[2];
  uint64_t v10;
  int v11;
  _QWORD *v12;
  void *v13;
  __int128 v14;
  _QWORD v15[33];

  v15[32] = *MEMORY[0x1E0C80C00];
  v8 = (llvm::raw_ostream *)a1[1];
  v13 = v15;
  v14 = xmmword_1C64638F0;
  sub_1C613932C((uint64_t)v9, (uint64_t)&v13);
  llvm::MCDwarfLineAddr::Encode(v8, *(_QWORD *)&a2 & 0xFFFFFFLL, a3, a4, (llvm::raw_ostream *)v9);
  (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 488))(a1, *v12, v12[1]);
  v9[0] = off_1E81A6E70;
  if (v11 == 1 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8077774924);
  if (v13 != v15)
    free(v13);
}

llvm::raw_ostream *llvm::MCDwarfLineAddr::Encode(llvm::raw_ostream *result, unint64_t a2, uint64_t a3, unint64_t a4, llvm::raw_ostream *this)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  char v20;
  int v21;
  char v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  char v27;
  char *v28;
  _BYTE *v29;
  _BYTE *v30;
  unint64_t v31;
  _BYTE *v32;
  _BYTE *v33;
  char v34;
  char *v35;
  _BYTE *v36;
  _BYTE *v37;
  char v38;
  _BYTE *v39;

  v6 = a4;
  v7 = a3;
  v8 = BYTE2(a2);
  v9 = ~(_BYTE)a2 / BYTE2(a2);
  v10 = *(unsigned int *)(*((_QWORD *)result + 19) + 28);
  if ((_DWORD)v10 != 1)
    v6 = a4 / v10;
  if (a3 == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v6 == v9)
    {
      v11 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v11 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 8);
      }
      else
      {
        *((_QWORD *)this + 4) = v11 + 1;
        *v11 = 8;
      }
    }
    else if (v6)
    {
      v18 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v18 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 2);
      }
      else
      {
        *((_QWORD *)this + 4) = v18 + 1;
        *v18 = 2;
      }
      do
      {
        v27 = v6 & 0x7F | ((v6 > 0x7F) << 7);
        v28 = (char *)*((_QWORD *)this + 4);
        if ((unint64_t)v28 >= *((_QWORD *)this + 3))
        {
          result = llvm::raw_ostream::write(this, v27);
        }
        else
        {
          *((_QWORD *)this + 4) = v28 + 1;
          *v28 = v27;
        }
        v15 = v6 > 0x7F;
        v6 >>= 7;
      }
      while (v15);
    }
    v29 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v29 >= *((_QWORD *)this + 3))
    {
      result = llvm::raw_ostream::write(this, 0);
    }
    else
    {
      *((_QWORD *)this + 4) = v29 + 1;
      *v29 = 0;
    }
    v30 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v30 >= *((_QWORD *)this + 3))
    {
      result = llvm::raw_ostream::write(this, 1);
    }
    else
    {
      *((_QWORD *)this + 4) = v30 + 1;
      *v30 = 1;
    }
    goto LABEL_59;
  }
  v12 = a2 >> 8;
  v13 = a2;
  v14 = a3 - SBYTE1(a2);
  v15 = v14 >= BYTE2(a2) || v14 + a2 > 0xFF;
  v16 = v15;
  if (v16 == 1)
  {
    v17 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v17 >= *((_QWORD *)this + 3))
    {
      result = llvm::raw_ostream::write(this, 3);
    }
    else
    {
      *((_QWORD *)this + 4) = v17 + 1;
      *v17 = 3;
    }
    do
    {
      if ((unint64_t)v7 < 0x40)
        goto LABEL_25;
      v19 = ((unint64_t)v7 >> 6) & 1;
      if (v7 >> 7 != -1)
        LODWORD(v19) = 0;
      if ((_DWORD)v19 == 1)
      {
LABEL_25:
        v20 = 0;
        v21 = 1;
      }
      else
      {
        v21 = 0;
        v20 = 0x80;
      }
      v22 = v20 | v7 & 0x7F;
      v23 = (char *)*((_QWORD *)this + 4);
      if ((unint64_t)v23 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, v22);
      }
      else
      {
        *((_QWORD *)this + 4) = v23 + 1;
        *v23 = v22;
      }
      v7 >>= 7;
    }
    while (!v21);
    v7 = 0;
    v14 = -(char)v12;
  }
  if (!(v7 | v6))
    goto LABEL_59;
  v24 = v14 + v13;
  if (v6 < (v9 | 0x100uLL))
  {
    v25 = v24 + v6 * v8;
    if (v25 <= 0xFF)
    {
      v26 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v26 < *((_QWORD *)this + 3))
      {
        *((_QWORD *)this + 4) = v26 + 1;
        *v26 = v25;
        return result;
      }
      v38 = v24 + v6 * v8;
      return llvm::raw_ostream::write(this, v38);
    }
    v31 = v24 + (v6 - v9) * v8;
    if (v31 <= 0xFF)
    {
      v32 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v32 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 8);
      }
      else
      {
        *((_QWORD *)this + 4) = v32 + 1;
        *v32 = 8;
      }
      v39 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v39 < *((_QWORD *)this + 3))
      {
        *((_QWORD *)this + 4) = v39 + 1;
        *v39 = v31;
        return result;
      }
      v38 = v31;
      return llvm::raw_ostream::write(this, v38);
    }
  }
  v33 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v33 >= *((_QWORD *)this + 3))
  {
    result = llvm::raw_ostream::write(this, 2);
  }
  else
  {
    *((_QWORD *)this + 4) = v33 + 1;
    *v33 = 2;
  }
  do
  {
    v34 = v6 & 0x7F | ((v6 > 0x7F) << 7);
    v35 = (char *)*((_QWORD *)this + 4);
    if ((unint64_t)v35 >= *((_QWORD *)this + 3))
    {
      result = llvm::raw_ostream::write(this, v34);
    }
    else
    {
      *((_QWORD *)this + 4) = v35 + 1;
      *v35 = v34;
    }
    v15 = v6 > 0x7F;
    v6 >>= 7;
  }
  while (v15);
  if (!v16)
  {
    v37 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v37 < *((_QWORD *)this + 3))
    {
      *((_QWORD *)this + 4) = v37 + 1;
      *v37 = v24;
      return result;
    }
    v38 = v24;
    return llvm::raw_ostream::write(this, v38);
  }
LABEL_59:
  v36 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v36 >= *((_QWORD *)this + 3))
    return llvm::raw_ostream::write(this, 1);
  *((_QWORD *)this + 4) = v36 + 1;
  *v36 = 1;
  return result;
}

void llvm::MCGenDwarfLabelEntry::Make(_BYTE *a1, uint64_t a2, uint64_t *a3, char **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  char *v17;
  int BufferContainingLoc;
  int LineAndColumn;
  unint64_t TempSymbol;
  _QWORD *v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  _QWORD v34[4];
  __int16 v35;

  if ((a1[8] & 1) != 0)
    return;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 120);
  v10 = (_DWORD)v9 ? *(_QWORD *)(*(_QWORD *)(a2 + 112) + 32 * v9 - 32) : 0;
  v33 = 0;
  v34[0] = v10;
  if (!sub_1C614F7B0((uint64_t *)(v8 + 1520), v34, &v33))
    return;
  if ((*a1 & 4) != 0)
  {
    v12 = (_QWORD *)*((_QWORD *)a1 - 1);
    v11 = v12 + 2;
    v13 = *v12;
    if (*v12)
    {
      v15 = (char *)v12 + 17;
      if (*v11 == 95)
      {
        v11 = v15;
        v14 = v13 - 1;
      }
      else
      {
        v14 = v13;
      }
      goto LABEL_14;
    }
  }
  else
  {
    v11 = 0;
  }
  v14 = 0;
LABEL_14:
  v16 = *(_DWORD *)(v8 + 1516);
  v17 = *a4;
  BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(a3, (unint64_t)v17);
  LineAndColumn = llvm::SourceMgr::getLineAndColumn(a3, v17, BufferContainingLoc);
  v34[0] = "tmp";
  v35 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(v8, (uint64_t)v34, 1);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, TempSymbol, 0);
  v21 = *(_QWORD **)(a2 + 8);
  v22 = (char *)v21[197];
  v23 = v21[198];
  if ((unint64_t)v22 >= v23)
  {
    v25 = (char *)v21[196];
    v26 = (v22 - v25) >> 5;
    v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 59)
      abort();
    v28 = v23 - (_QWORD)v25;
    if (v28 >> 4 > v27)
      v27 = v28 >> 4;
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0)
      v29 = 0x7FFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
    {
      if (v29 >> 59)
        sub_1C4764EE4();
      v30 = (char *)operator new(32 * v29);
    }
    else
    {
      v30 = 0;
    }
    v31 = &v30[32 * v26];
    *(_QWORD *)v31 = v11;
    *((_QWORD *)v31 + 1) = v14;
    *((_DWORD *)v31 + 4) = v16;
    *((_DWORD *)v31 + 5) = LineAndColumn;
    *((_QWORD *)v31 + 3) = TempSymbol;
    v24 = v31 + 32;
    if (v22 != v25)
    {
      do
      {
        v32 = *((_OWORD *)v22 - 1);
        *((_OWORD *)v31 - 2) = *((_OWORD *)v22 - 2);
        *((_OWORD *)v31 - 1) = v32;
        v31 -= 32;
        v22 -= 32;
      }
      while (v22 != v25);
      v22 = (char *)v21[196];
    }
    v21[196] = v31;
    v21[197] = v24;
    v21[198] = &v30[32 * v29];
    if (v22)
      operator delete(v22);
  }
  else
  {
    *(_QWORD *)v22 = v11;
    *((_QWORD *)v22 + 1) = v14;
    *((_DWORD *)v22 + 4) = v16;
    *((_DWORD *)v22 + 5) = LineAndColumn;
    v24 = v22 + 32;
    *((_QWORD *)v22 + 3) = TempSymbol;
  }
  v21[197] = v24;
}

llvm::MCStreamer *llvm::MCDwarfFrameEmitter::Emit(llvm::MCStreamer *this, llvm::MCObjectStreamer *a2, llvm::MCAsmBackend *a3)
{
  llvm::MCStreamer *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  __n128 *v19;
  const std::nothrow_t *v20;
  unint64_t v21;
  _QWORD *v22;
  BOOL v23;
  void *v24;
  __n128 *v25;
  __n128 *v26;
  unsigned int v27;
  __n128 *v28;
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  llvm::MCSymbol **v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  llvm::MCStreamer *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int DwarfRegNum;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  llvm::MCStreamer *v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  unint64_t v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void **v118;
  __int128 v119;
  int v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unint64_t TempSymbol;
  int v130;
  uint64_t v131;
  int v132;
  __n128 *v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  int v146;
  llvm::MCSymbol *v147;
  _QWORD *v148;
  int v149;
  llvm::MCStreamer *v150;
  llvm::MCStreamer *v151;
  _BYTE v152[25];
  __n128 *v153;
  __n128 *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  unsigned __int8 v158;
  llvm::MCStreamer *v159;
  uint64_t v160;
  uint64_t v161;
  __n128 **v162;
  __int128 v163;
  _BYTE v164[8];
  __int16 v165;
  uint64_t v166;

  v3 = this;
  v166 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 1);
  v5 = *(_QWORD *)(v4 + 168);
  v6 = *(_QWORD *)(v4 + 152);
  v157 = 0;
  v158 = a3;
  v159 = this;
  v7 = *((_QWORD *)this + 3);
  v8 = *((_QWORD *)this + 4);
  v9 = v8 - v7;
  v10 = (v8 - v7) / 88;
  v138 = v5;
  v135 = (int)a3;
  if (!(_DWORD)a3 || !*(_QWORD *)(v5 + 64))
  {
    if (*(_BYTE *)(v5 + 10))
      return this;
    goto LABEL_4;
  }
  v124 = *(_BYTE *)(v5 + 10) ^ 1;
  this = (llvm::MCStreamer *)llvm::MCStreamer::generateCompactUnwindEncodings((uint64_t)this, a2);
  if (v8 != v7)
  {
    v145 = v6;
    v125 = 0;
    v126 = 88 * v10;
    v127 = v7;
    do
    {
      v128 = *(_DWORD *)(v127 + 68);
      if (v128)
      {
        if ((v125 & 1) == 0)
        {
          (*(void (**)(llvm::MCStreamer *, _QWORD, _QWORD))(*(_QWORD *)v3 + 168))(v3, *(_QWORD *)(v138 + 64), 0);
          this = (llvm::MCStreamer *)(*(uint64_t (**)(llvm::MCStreamer *, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v3 + 632))(v3, *(unsigned int *)(v145 + 8), 0, 1, 0);
          v128 = *(_DWORD *)(v127 + 68);
        }
        v124 = v124 & 1 | (v128 == *(_DWORD *)(v138 + 16));
        if (v128)
          __asm { BR              X9 }
        v125 = 1;
      }
      v127 += 88;
      v126 -= 88;
    }
    while (v126);
  }
  v9 = v8 - v7;
  v10 = (v8 - v7) / 88;
  if ((v124 & 1) != 0)
  {
LABEL_4:
    v11 = 104;
    if (v135)
      v11 = 456;
    (*(void (**)(llvm::MCStreamer *, _QWORD, _QWORD))(*(_QWORD *)v3 + 168))(v3, *(_QWORD *)(v138 + v11), 0);
    v162 = (__n128 **)"tmp";
    v165 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(v4, (uint64_t)&v162, 1);
    (*(void (**)(llvm::MCStreamer *))(*(_QWORD *)v3 + 192))(v3);
    v156 = 0;
    v139 = *(unsigned __int8 *)(v138 + 11);
    v153 = 0;
    v154 = 0;
    v155 = 0;
    if (v8 == v7)
    {
      v19 = 0;
      v18 = 0;
    }
    else
    {
      if (v10 >= 0x2E8BA2E8BA2E8BBLL)
        abort();
      v13 = (char *)operator new(v9);
      v14 = 0;
      v153 = (__n128 *)v13;
      v154 = (__n128 *)v13;
      v155 = &v13[88 * v10];
      do
      {
        v15 = v7 + v14;
        v16 = &v13[v14];
        v17 = *(_OWORD *)(v7 + v14 + 16);
        *(_OWORD *)v16 = *(_OWORD *)(v7 + v14);
        *((_OWORD *)v16 + 1) = v17;
        *(_QWORD *)&v13[v14 + 32] = 0;
        *((_QWORD *)v16 + 5) = 0;
        *((_QWORD *)v16 + 6) = 0;
        sub_1C593A1D4(&v13[v14 + 32], *(_QWORD *)(v7 + v14 + 32), *(_QWORD *)(v7 + v14 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v7 + v14 + 40) - *(_QWORD *)(v7 + v14 + 32)) >> 4));
        v12 = *(__n128 *)(v7 + v14 + 56);
        *(_OWORD *)(v16 + 65) = *(_OWORD *)(v7 + v14 + 65);
        *(__n128 *)(v16 + 56) = v12;
        v14 += 88;
      }
      while (v15 + 88 != v7 + 88 * v10);
      v18 = (uint64_t)v153;
      v19 = (__n128 *)&v13[v14];
      v154 = v19;
    }
    if ((uint64_t)v19 - v18 < 1)
    {
LABEL_16:
      sub_1C593A378(v18, v19, 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v19 - v18) >> 3), 0, 0, v12);
    }
    else
    {
      v20 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v21 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v19 - v18) >> 3);
      while (1)
      {
        v22 = operator new(88 * v21, v20);
        if (v22)
          break;
        v23 = v21 > 1;
        v21 >>= 1;
        if (!v23)
          goto LABEL_16;
      }
      v24 = v22;
      sub_1C593A378(v18, v19, 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v19 - v18) >> 3), v22, v21, v12);
      operator delete(v24);
    }
    v26 = v153;
    v25 = v154;
    if (v153 == v154)
    {
      v162 = &v153;
      sub_1C593A2C0((void ***)&v162);
      v123 = 0;
      return (llvm::MCStreamer *)MEMORY[0x1CAA32FB4](v123, 8);
    }
    v130 = 0;
    v132 = 0;
    v134 = 0;
    v27 = 0;
    v146 = 0;
    v133 = v154;
    while (1)
    {
      v28 = (__n128 *)((char *)v26 + 88);
      if (!v139 || v26[4].n128_u32[1] == *(_DWORD *)(v138 + 16))
        break;
LABEL_115:
      v26 = v28;
      if (v28 == v25)
      {
        v162 = &v153;
        sub_1C593A2C0((void ***)&v162);
        v123 = v134;
        return (llvm::MCStreamer *)MEMORY[0x1CAA32FB4](v123, 8);
      }
    }
    *(_QWORD *)v152 = v26[1].n128_u64[0];
    *(_QWORD *)&v152[8] = *(unint64_t *)((char *)&v26[3].n128_u64[1] + 4);
    *(_WORD *)&v152[16] = v26[4].n128_u16[4];
    *(_DWORD *)&v152[20] = v26[4].n128_u32[3];
    v152[24] = v26[5].n128_u8[0];
    if (!v135)
    {
      v33 = (llvm::MCSymbol **)&v156;
      v31 = v146;
      goto LABEL_39;
    }
    v160 = 0;
    v29 = sub_1C593BE7C(v134, v27, (uint64_t)v152, &v160);
    v30 = v160;
    v31 = v146;
    if ((v29 & 1) != 0)
    {
      LODWORD(v32) = v27;
LABEL_38:
      v33 = (llvm::MCSymbol **)(v30 + 32);
      v27 = v32;
LABEL_39:
      v146 = v31;
      v144 = v27;
      if (*v33)
      {
        v147 = *v33;
        v37 = HIDWORD(v157);
        v38 = v158;
LABEL_101:
        v69 = *((_QWORD *)v3 + 1);
        v162 = (__n128 **)"tmp";
        v165 = 259;
        v70 = llvm::MCContext::createTempSymbol(v69, (uint64_t)&v162, 1);
        v162 = (__n128 **)"tmp";
        v165 = 259;
        v71 = llvm::MCContext::createTempSymbol(v69, (uint64_t)&v162, 1);
        v72 = *(_QWORD *)(v69 + 168);
        LODWORD(v157) = v37;
        v151 = v3;
        v149 = v38;
        v141 = v72;
        if (v38 || !*(_BYTE *)(v69 + 1626))
        {
          v73 = 4;
        }
        else
        {
          if (*(_BYTE *)(v69 + 1626) == 1)
            (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)v3 + 512))(v3, 0xFFFFFFFFLL, 4);
          v73 = 8;
        }
        v74 = sub_1C484358C(v69 + 192, 24, 3);
        v75 = *(unsigned __int8 *)(*(_QWORD *)(v69 + 152) + 18) << 16;
        *(_BYTE *)v74 = 2;
        *(_DWORD *)(v74 + 1) = v75 | (*(unsigned __int8 *)(v74 + 4) << 24);
        *(_QWORD *)(v74 + 8) = 0;
        *(_QWORD *)(v74 + 16) = v71;
        v143 = v71;
        v76 = sub_1C484358C(v69 + 192, 24, 3);
        v77 = *(unsigned __int8 *)(*(_QWORD *)(v69 + 152) + 18) << 16;
        *(_BYTE *)v76 = 2;
        *(_DWORD *)(v76 + 1) = v77 | (*(unsigned __int8 *)(v76 + 4) << 24);
        *(_QWORD *)(v76 + 8) = 0;
        *(_QWORD *)(v76 + 16) = v70;
        v78 = sub_1C484358C(v69 + 192, 32, 3);
        *(_BYTE *)v78 = 0;
        *(_DWORD *)(v78 + 1) = (*(unsigned __int8 *)(v78 + 4) << 24) | 0x12;
        *(_QWORD *)(v78 + 8) = 0;
        *(_QWORD *)(v78 + 16) = v74;
        *(_QWORD *)(v78 + 24) = v76;
        v79 = sub_1C484358C(v69 + 192, 24, 3);
        *(_BYTE *)v79 = 1;
        *(_DWORD *)(v79 + 1) = *(unsigned __int8 *)(v79 + 4) << 24;
        *(_QWORD *)(v79 + 8) = 0;
        *(_QWORD *)(v79 + 16) = 0;
        v80 = sub_1C484358C(v69 + 192, 32, 3);
        *(_BYTE *)v80 = 0;
        *(_DWORD *)(v80 + 1) = (*(unsigned __int8 *)(v80 + 4) << 24) | 0x12;
        *(_QWORD *)(v80 + 8) = 0;
        *(_QWORD *)(v80 + 16) = v78;
        *(_QWORD *)(v80 + 24) = v79;
        sub_1C5939B5C(v151, v80, v73);
        (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)v151 + 192))(v151, v70, 0);
        v81 = *(_QWORD *)(v69 + 152);
        v137 = v81;
        if (v149)
        {
          v82 = sub_1C484358C(v69 + 192, 24, 3);
          v83 = *(unsigned __int8 *)(*(_QWORD *)(v69 + 152) + 18) << 16;
          *(_BYTE *)v82 = 2;
          *(_DWORD *)(v82 + 1) = v83 | (*(unsigned __int8 *)(v82 + 4) << 24);
          *(_QWORD *)(v82 + 8) = 0;
          *(_QWORD *)(v82 + 16) = v70;
          v84 = sub_1C484358C(v69 + 192, 24, 3);
          v85 = *(unsigned __int8 *)(*(_QWORD *)(v69 + 152) + 18) << 16;
          *(_BYTE *)v84 = 2;
          *(_DWORD *)(v84 + 1) = v85 | (*(unsigned __int8 *)(v84 + 4) << 24);
          *(_QWORD *)(v84 + 8) = 0;
          *(_QWORD *)(v84 + 16) = v147;
          v86 = sub_1C484358C(v69 + 192, 32, 3);
          *(_BYTE *)v86 = 0;
          *(_DWORD *)(v86 + 1) = (*(unsigned __int8 *)(v86 + 4) << 24) | 0x12;
          *(_QWORD *)(v86 + 8) = 0;
          *(_QWORD *)(v86 + 16) = v82;
          *(_QWORD *)(v86 + 24) = v84;
          v87 = sub_1C484358C(v69 + 192, 24, 3);
          *(_BYTE *)v87 = 1;
          *(_DWORD *)(v87 + 1) = *(unsigned __int8 *)(v87 + 4) << 24;
          *(_QWORD *)(v87 + 8) = 0;
          *(_QWORD *)(v87 + 16) = 0;
          v88 = sub_1C484358C(v69 + 192, 32, 3);
          *(_BYTE *)v88 = 0;
          *(_DWORD *)(v88 + 1) = (*(unsigned __int8 *)(v88 + 4) << 24) | 0x12;
          *(_QWORD *)(v88 + 8) = 0;
          *(_QWORD *)(v88 + 16) = v86;
          *(_QWORD *)(v88 + 24) = v87;
          sub_1C5939B5C(v151, v88, v73);
          __asm { BR              X9 }
        }
        if (*(_BYTE *)(v81 + 424))
        {
          v89 = v73;
          v90 = v151;
          llvm::MCStreamer::emitSymbolValue(v151, v147, v89, *(_BYTE *)(v81 + 338));
        }
        else
        {
          v91 = sub_1C484358C(v69 + 192, 24, 3);
          v92 = *(unsigned __int8 *)(*(_QWORD *)(v69 + 152) + 18) << 16;
          *(_BYTE *)v91 = 2;
          *(_DWORD *)(v91 + 1) = v92 | (*(unsigned __int8 *)(v91 + 4) << 24);
          *(_QWORD *)(v91 + 8) = 0;
          *(_QWORD *)(v91 + 16) = v147;
          v93 = sub_1C484358C(v69 + 192, 24, 3);
          v94 = *(unsigned __int8 *)(*(_QWORD *)(v69 + 152) + 18) << 16;
          *(_BYTE *)v93 = 2;
          *(_DWORD *)(v93 + 1) = v94 | (*(unsigned __int8 *)(v93 + 4) << 24);
          *(_QWORD *)(v93 + 8) = 0;
          *(_QWORD *)(v93 + 16) = TempSymbol;
          v95 = sub_1C484358C(v69 + 192, 32, 3);
          *(_BYTE *)v95 = 0;
          *(_DWORD *)(v95 + 1) = (*(unsigned __int8 *)(v95 + 4) << 24) | 0x12;
          *(_QWORD *)(v95 + 8) = 0;
          *(_QWORD *)(v95 + 16) = v91;
          *(_QWORD *)(v95 + 24) = v93;
          v96 = sub_1C484358C(v69 + 192, 24, 3);
          *(_BYTE *)v96 = 1;
          *(_DWORD *)(v96 + 1) = *(unsigned __int8 *)(v96 + 4) << 24;
          *(_QWORD *)(v96 + 8) = 0;
          *(_QWORD *)(v96 + 16) = 0;
          v97 = sub_1C484358C(v69 + 192, 32, 3);
          *(_BYTE *)v97 = 0;
          *(_DWORD *)(v97 + 1) = (*(unsigned __int8 *)(v97 + 4) << 24) | 0x12;
          *(_QWORD *)(v97 + 8) = 0;
          *(_QWORD *)(v97 + 16) = v95;
          *(_QWORD *)(v97 + 24) = v96;
          v98 = v73;
          v90 = v151;
          sub_1C5939B5C(v151, v97, v98);
        }
        v99 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)v90 + 1) + 152) + 8);
        sub_1C593A0A4((uint64_t)v90, v26->n128_u64[0], 0);
        v101 = v26->n128_u64[0];
        v100 = v26->n128_i64[1];
        v102 = sub_1C484358C(v69 + 192, 24, 3);
        v103 = *(unsigned __int8 *)(*(_QWORD *)(v69 + 152) + 18) << 16;
        *(_BYTE *)v102 = 2;
        *(_DWORD *)(v102 + 1) = v103 | (*(unsigned __int8 *)(v102 + 4) << 24);
        *(_QWORD *)(v102 + 8) = 0;
        *(_QWORD *)(v102 + 16) = v100;
        v104 = sub_1C484358C(v69 + 192, 24, 3);
        v105 = *(unsigned __int8 *)(*(_QWORD *)(v69 + 152) + 18) << 16;
        *(_BYTE *)v104 = 2;
        *(_DWORD *)(v104 + 1) = v105 | (*(unsigned __int8 *)(v104 + 4) << 24);
        *(_QWORD *)(v104 + 8) = 0;
        *(_QWORD *)(v104 + 16) = v101;
        v106 = sub_1C484358C(v69 + 192, 32, 3);
        *(_BYTE *)v106 = 0;
        *(_DWORD *)(v106 + 1) = (*(unsigned __int8 *)(v106 + 4) << 24) | 0x12;
        *(_QWORD *)(v106 + 8) = 0;
        *(_QWORD *)(v106 + 16) = v102;
        *(_QWORD *)(v106 + 24) = v104;
        v107 = sub_1C484358C(v69 + 192, 24, 3);
        *(_BYTE *)v107 = 1;
        *(_DWORD *)(v107 + 1) = *(unsigned __int8 *)(v107 + 4) << 24;
        *(_QWORD *)(v107 + 8) = 0;
        *(_QWORD *)(v107 + 16) = 0;
        v108 = sub_1C484358C(v69 + 192, 32, 3);
        *(_BYTE *)v108 = 0;
        *(_DWORD *)(v108 + 1) = (*(unsigned __int8 *)(v108 + 4) << 24) | 0x12;
        *(_QWORD *)(v108 + 8) = 0;
        *(_QWORD *)(v108 + 16) = v106;
        *(_QWORD *)(v108 + 24) = v107;
        sub_1C5939B5C(v90, v108, v99);
        v28 = (__n128 *)((char *)v26 + 88);
        v27 = v144;
        sub_1C5939C38((uint64_t)&v157, v26[2].n128_i64[0], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v26[2].n128_u64[1] - v26[2].n128_u64[0]) >> 4), (const llvm::MCSymbol *)v26->n128_u64[0]);
        v25 = v133;
        if (&v26[5].n128_i8[8] == (__int8 *)v133)
          v99 = *(unsigned int *)(v137 + 8);
        v3 = v159;
        (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v159 + 632))(v159, v99, 0, 1, 0);
        (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)v3 + 192))(v3, v143, 0);
        goto LABEL_115;
      }
      v148 = v33;
      v39 = *((_QWORD *)v3 + 1);
      v40 = *(_QWORD *)(v39 + 160);
      v136 = *(_QWORD *)(v39 + 168);
      v162 = (__n128 **)"tmp";
      v165 = 259;
      v41 = llvm::MCContext::createTempSymbol(v39, (uint64_t)&v162, 1);
      (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)v3 + 192))(v3, v41, 0);
      v162 = (__n128 **)"tmp";
      v165 = 259;
      v42 = llvm::MCContext::createTempSymbol(v39, (uint64_t)&v162, 1);
      v142 = v158;
      v131 = v40;
      if (v158)
      {
        v140 = 0;
        v43 = 4;
        v44 = 4;
      }
      else
      {
        if (*(_BYTE *)(v39 + 1626))
          v44 = 12;
        else
          v44 = 4;
        if (*(_BYTE *)(v39 + 1626))
          v43 = 8;
        else
          v43 = 4;
        if (*(_BYTE *)(v39 + 1626) == 1)
        {
          (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)v3 + 512))(v3, 0xFFFFFFFFLL, 4);
          v45 = -1;
        }
        else
        {
          v45 = 0xFFFFFFFFLL;
        }
        v140 = v45;
      }
      v46 = sub_1C484358C(v39 + 192, 24, 3);
      v47 = *(unsigned __int8 *)(*(_QWORD *)(v39 + 152) + 18) << 16;
      *(_BYTE *)v46 = 2;
      *(_DWORD *)(v46 + 1) = v47 | (*(unsigned __int8 *)(v46 + 4) << 24);
      *(_QWORD *)(v46 + 8) = 0;
      *(_QWORD *)(v46 + 16) = v42;
      v150 = (llvm::MCStreamer *)v42;
      v48 = sub_1C484358C(v39 + 192, 24, 3);
      v49 = *(unsigned __int8 *)(*(_QWORD *)(v39 + 152) + 18) << 16;
      *(_BYTE *)v48 = 2;
      *(_DWORD *)(v48 + 1) = v49 | (*(unsigned __int8 *)(v48 + 4) << 24);
      *(_QWORD *)(v48 + 8) = 0;
      *(_QWORD *)(v48 + 16) = v41;
      v147 = (llvm::MCSymbol *)v41;
      v50 = sub_1C484358C(v39 + 192, 32, 3);
      *(_BYTE *)v50 = 0;
      *(_DWORD *)(v50 + 1) = (*(unsigned __int8 *)(v50 + 4) << 24) | 0x12;
      *(_QWORD *)(v50 + 8) = 0;
      *(_QWORD *)(v50 + 16) = v46;
      *(_QWORD *)(v50 + 24) = v48;
      v51 = sub_1C484358C(v39 + 192, 24, 3);
      *(_BYTE *)v51 = 1;
      *(_DWORD *)(v51 + 1) = *(unsigned __int8 *)(v51 + 4) << 24;
      *(_QWORD *)(v51 + 8) = 0;
      *(_QWORD *)(v51 + 16) = v44;
      v52 = sub_1C484358C(v39 + 192, 32, 3);
      *(_BYTE *)v52 = 0;
      *(_DWORD *)(v52 + 1) = (*(unsigned __int8 *)(v52 + 4) << 24) | 0x12;
      *(_QWORD *)(v52 + 8) = 0;
      *(_QWORD *)(v52 + 16) = v50;
      *(_QWORD *)(v52 + 24) = v51;
      sub_1C5939B5C(v3, v52, v43);
      (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)v3 + 512))(v3, v140, v43);
      if (v142)
      {
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)v3 + 512))(v3, 1, 1);
        v162 = (__n128 **)v164;
        v164[0] = 122;
        v163 = xmmword_1C8663020;
        v53 = 1;
        if (v26[1].n128_u64[0])
        {
          v164[1] = 80;
          *(_QWORD *)&v163 = 2;
          v53 = 2;
        }
        v54 = v150;
        if (v26[1].n128_u64[1])
        {
          v164[v53++] = 76;
          *(_QWORD *)&v163 = v53;
        }
        v164[v53] = 82;
        v55 = v163;
        v56 = v163 + 1;
        *(_QWORD *)&v163 = v163 + 1;
        if (v26[4].n128_u8[8])
        {
          v57 = v55 + 2;
          if (*((_QWORD *)&v163 + 1) < v57)
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v162, v164, v57, 1);
            v56 = v163;
          }
          *((_BYTE *)v162 + v56) = 83;
          v56 = v163 + 1;
          *(_QWORD *)&v163 = v163 + 1;
        }
        if (v26[5].n128_u8[0])
        {
          if (*((_QWORD *)&v163 + 1) < (unint64_t)(v56 + 1))
          {
            llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v162, v164, v56 + 1, 1);
            v56 = v163;
          }
          *((_BYTE *)v162 + v56) = 66;
          *(_QWORD *)&v163 = v163 + 1;
        }
        (*(void (**)(llvm::MCStreamer *, __n128 **))(*(_QWORD *)v3 + 488))(v3, v162);
        if (v162 != (__n128 **)v164)
          free(v162);
        v58 = 1;
      }
      else
      {
        v59 = *(unsigned __int16 *)(v39 + 1624);
        if ((v59 - 4) >= 2)
        {
          v54 = v150;
          v60 = 0;
          if (v59 == 2)
          {
            v58 = 1;
            v61 = 1;
          }
          else
          {
            v58 = 0;
            v61 = 3;
          }
        }
        else
        {
          v58 = 0;
          v60 = 1;
          v61 = 4;
          v54 = v150;
        }
        (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)v3 + 512))(v3, v61, 1);
        (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)v3 + 512))(v3, 0, 1);
        if (!v60)
        {
LABEL_77:
          llvm::MCStreamer::emitULEB128IntValue(v3, *(unsigned int *)(*(_QWORD *)(v39 + 152) + 28), 0);
          v62 = *(_QWORD *)(*((_QWORD *)v3 + 1) + 152);
          if (*(_BYTE *)(v62 + 17))
            v63 = *(_DWORD *)(v62 + 12);
          else
            v63 = -*(_DWORD *)(v62 + 12);
          llvm::MCStreamer::emitSLEB128IntValue(v3, v63);
          DwarfRegNum = v26[4].n128_u32[3];
          if (DwarfRegNum == 0x7FFFFFFF)
            DwarfRegNum = llvm::MCRegisterInfo::getDwarfRegNum(v131, *(_DWORD *)(v131 + 12), v142 != 0);
          if (v58)
          {
            (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)v3 + 512))(v3, DwarfRegNum, 1);
            if (!v142)
              goto LABEL_95;
          }
          else
          {
            llvm::MCStreamer::emitULEB128IntValue(v3, DwarfRegNum, 0);
            if (!v142)
            {
LABEL_95:
              v67 = *(_QWORD *)(v39 + 152);
              if (!v26[4].n128_u8[9])
                sub_1C5939C38((uint64_t)&v157, *(_QWORD *)(v67 + 432), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v67 + 440) - *(_QWORD *)(v67 + 432)) >> 4), 0);
              v37 = v157;
              HIDWORD(v157) = v157;
              v3 = v159;
              v38 = v158;
              if (v158)
                v68 = 4;
              else
                v68 = *(unsigned int *)(v67 + 8);
              (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v159 + 632))(v159, v68, 0, 1, 0);
              (*(void (**)(llvm::MCStreamer *, llvm::MCStreamer *, _QWORD))(*(_QWORD *)v3 + 192))(v3, v54, 0);
              *v148 = v41;
              goto LABEL_101;
            }
          }
          v65 = v26[1].n128_i64[0];
          if (v65)
            __asm { BR              X10 }
          if (v26[1].n128_u64[1])
            LODWORD(v65) = 1;
          llvm::MCStreamer::emitULEB128IntValue(v3, (v65 + 1), 0);
          if (v26[1].n128_u64[0])
          {
            (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)v3 + 512))(v3, v26[3].n128_u32[3], 1);
            v66 = v26[3].n128_u32[3];
            (*(void (**)(_QWORD, unint64_t, _QWORD, llvm::MCStreamer *))(**(_QWORD **)(*((_QWORD *)v3 + 1) + 152)
                                                                                         + 32))(*(_QWORD *)(*((_QWORD *)v3 + 1) + 152), v26[1].n128_u64[0], v66, v3);
            __asm { BR              X9 }
          }
          if (v26[1].n128_u64[1])
            (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)v3 + 512))(v3, v26[4].n128_u32[0], 1);
          (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)v3 + 512))(v3, *(unsigned int *)(v136 + 12), 1);
          goto LABEL_95;
        }
        (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)v3 + 512))(v3, *(unsigned int *)(*(_QWORD *)(v39 + 152) + 8), 1);
      }
      (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)v3 + 512))(v3, 0, 1);
      goto LABEL_77;
    }
    v161 = v160;
    if (4 * v146 + 4 >= 3 * v27)
    {
      v34 = 2 * v27;
    }
    else
    {
      v34 = v27;
      if (v27 - v132 + ~v146 > v27 >> 3)
      {
        v35 = v134;
        LODWORD(v32) = v27;
        goto LABEL_29;
      }
    }
    v109 = (v34 - 1) | ((unint64_t)(v34 - 1) >> 1);
    v110 = v109 | (v109 >> 2) | ((v109 | (v109 >> 2)) >> 4);
    v111 = ((v110 | (v110 >> 8)) >> 16) | v110 | (v110 >> 8);
    if ((v111 + 1) > 0x40)
      v32 = (v111 + 1);
    else
      v32 = 64;
    v112 = (char *)operator new(8 * (v32 + 4 * v32), (std::align_val_t)8uLL);
    v35 = (uint64_t)v112;
    if (v134)
    {
      v113 = v112;
      do
      {
        *(_QWORD *)v113 = 0;
        *((_QWORD *)v113 + 1) = 0xFFFFFFFF00000000;
        *((_WORD *)v113 + 8) = 0;
        *((_DWORD *)v113 + 5) = 0x7FFFFFFF;
        v113[24] = 0;
        v113 += 40;
      }
      while (v113 != &v112[40 * v32]);
      if (v27)
      {
        v114 = 0;
        v130 = 0;
        v115 = 40 * v27;
        v116 = v134;
        while (1)
        {
          v117 = v116 + v114;
          if (!*(_QWORD *)(v116 + v114))
          {
            v120 = *(_DWORD *)(v117 + 8);
            if (v120 == -1)
            {
              v121 = v134 + v114;
              if (!*(_DWORD *)(v134 + v114 + 12))
                goto LABEL_135;
            }
            else if (!v120)
            {
              v121 = v134 + v114;
              if (*(_DWORD *)(v134 + v114 + 12) == -1)
              {
LABEL_135:
                if (!*(_BYTE *)(v121 + 16)
                  && !*(_BYTE *)(v134 + v114 + 17)
                  && *(_DWORD *)(v134 + v114 + 20) == 0x7FFFFFFF
                  && !*(_BYTE *)(v134 + v114 + 24))
                {
                  goto LABEL_128;
                }
              }
            }
          }
          v162 = 0;
          sub_1C593BE7C(v35, v32, v117, &v162);
          v118 = (void **)v162;
          v119 = *(_OWORD *)(v117 + 9);
          *(_OWORD *)v162 = *(_OWORD *)v117;
          *(_OWORD *)((char *)v118 + 9) = v119;
          v118[4] = *(void **)(v117 + 32);
          ++v130;
LABEL_128:
          v114 += 40;
          v116 = v134;
          if (v115 == v114)
            goto LABEL_144;
        }
      }
      v130 = 0;
      v116 = v134;
LABEL_144:
      MEMORY[0x1CAA32FB4](v116, 8);
    }
    else
    {
      v122 = v112;
      do
      {
        *(_QWORD *)v122 = 0;
        *((_QWORD *)v122 + 1) = 0xFFFFFFFF00000000;
        *((_WORD *)v122 + 8) = 0;
        *((_DWORD *)v122 + 5) = 0x7FFFFFFF;
        v122[24] = 0;
        v122 += 40;
      }
      while (v122 != &v112[40 * v32]);
      v130 = 0;
    }
    sub_1C593BE7C(v35, v32, (uint64_t)v152, &v161);
    v132 = 0;
    v30 = v161;
LABEL_29:
    if (*(_QWORD *)v30
      || *(_DWORD *)(v30 + 8)
      || *(_DWORD *)(v30 + 12) != -1
      || *(_BYTE *)(v30 + 16)
      || *(_BYTE *)(v30 + 17)
      || *(_DWORD *)(v30 + 20) != 0x7FFFFFFF
      || *(_BYTE *)(v30 + 24))
    {
      --v132;
    }
    v36 = *(_OWORD *)v152;
    *(_OWORD *)(v30 + 9) = *(_OWORD *)&v152[9];
    *(_OWORD *)v30 = v36;
    *(_QWORD *)(v30 + 32) = 0;
    v31 = ++v130;
    v134 = v35;
    goto LABEL_38;
  }
  return this;
}

llvm::raw_ostream *llvm::MCDwarfFrameEmitter::EncodeAdvanceLoc(llvm::raw_ostream *this, unint64_t a2, llvm::raw_ostream *a3, llvm::raw_ostream *a4)
{
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  char v7;
  _BYTE *v8;
  int v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  unsigned int v13;
  __int16 v14;
  char *v15;
  size_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  __int16 v20;
  char v21[4];

  v4 = *((_QWORD *)this + 19);
  v5 = *(unsigned int *)(v4 + 28);
  if ((_DWORD)v5 != 1)
    a2 /= v5;
  if (a2)
  {
    if (a2 > 0x3F)
    {
      this = a3;
      v19 = a2;
      if (a2 > 0xFF)
      {
        v9 = *(unsigned __int8 *)(v4 + 16);
        v11 = *((_QWORD *)a3 + 3);
        v10 = (_BYTE *)*((_QWORD *)a3 + 4);
        if (a2 >> 16)
        {
          if ((unint64_t)v10 >= v11)
          {
            this = llvm::raw_ostream::write(a3, 4);
          }
          else
          {
            *((_QWORD *)a3 + 4) = v10 + 1;
            *v10 = 4;
          }
          v17 = bswap32(v19);
          if ((v9 - 1) >= 2)
            v18 = v17;
          else
            v18 = v19;
          *(_DWORD *)v21 = v18;
          v15 = v21;
          v16 = 4;
        }
        else
        {
          if ((unint64_t)v10 >= v11)
          {
            this = llvm::raw_ostream::write(a3, 3);
          }
          else
          {
            *((_QWORD *)a3 + 4) = v10 + 1;
            *v10 = 3;
          }
          v13 = bswap32(v19) >> 16;
          if ((v9 - 1) >= 2)
            v14 = v13;
          else
            v14 = v19;
          v20 = v14;
          v15 = (char *)&v20;
          v16 = 2;
        }
        return llvm::raw_ostream::write(this, v15, v16);
      }
      else
      {
        v8 = (_BYTE *)*((_QWORD *)a3 + 4);
        if ((unint64_t)v8 >= *((_QWORD *)a3 + 3))
        {
          this = llvm::raw_ostream::write(a3, 2);
        }
        else
        {
          *((_QWORD *)a3 + 4) = v8 + 1;
          *v8 = 2;
        }
        v12 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v12 >= *((_QWORD *)this + 3))
        {
          v7 = v19;
          return llvm::raw_ostream::write(this, v7);
        }
        *((_QWORD *)this + 4) = v12 + 1;
        *v12 = v19;
      }
    }
    else
    {
      v6 = (_BYTE *)*((_QWORD *)a3 + 4);
      if ((unint64_t)v6 >= *((_QWORD *)a3 + 3))
      {
        v7 = a2 | 0x40;
        this = a3;
        return llvm::raw_ostream::write(this, v7);
      }
      *((_QWORD *)a3 + 4) = v6 + 1;
      *v6 = a2 | 0x40;
    }
  }
  return this;
}

uint64_t sub_1C5939764(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  int v32;
  _QWORD v33[5];

  v4 = *a2;
  v31 = *a2;
  v32 = 0;
  v5 = *(_DWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)a1;
    v7 = v5 - 1;
    v8 = (v5 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    v9 = (_QWORD *)(*(_QWORD *)a1 + 16 * v8);
    v10 = *v9;
    if (v4 == *v9)
    {
LABEL_3:
      v11 = *(_DWORD *)(v6 + 16 * v8 + 8);
      v12 = *(_QWORD *)(a1 + 24);
      return v12 + 32 * v11 + 8;
    }
    v14 = 0;
    v15 = 1;
    while (v10 != -4096)
    {
      if (v14)
        v29 = 0;
      else
        v29 = v10 == -8192;
      if (v29)
        v14 = v9;
      v30 = v8 + v15++;
      v8 = v30 & v7;
      v9 = (_QWORD *)(v6 + 16 * v8);
      v10 = *v9;
      if (v4 == *v9)
        goto LABEL_3;
    }
    if (v14)
      v16 = v14;
    else
      v16 = v9;
  }
  else
  {
    v16 = 0;
  }
  v17 = sub_1C59175D0(a1, (uint64_t)&v31, &v31, v16);
  *v17 = v31;
  *((_DWORD *)v17 + 2) = v32;
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *a2;
  v20 = *(uint64_t **)(a1 + 32);
  if ((unint64_t)v20 >= v18)
  {
    v22 = *(_QWORD *)(a1 + 24);
    v23 = ((uint64_t)v20 - v22) >> 5;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 59)
      abort();
    v25 = v18 - v22;
    if (v25 >> 4 > v24)
      v24 = v25 >> 4;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
      v26 = 0x7FFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    v33[4] = a1 + 40;
    if (v26 >> 59)
      sub_1C4764EE4();
    v27 = (char *)operator new(32 * v26);
    v28 = (uint64_t *)&v27[32 * v23];
    v33[0] = v27;
    v33[1] = v28;
    *v28 = v19;
    v28[1] = 0;
    v28[2] = 0;
    v28[3] = 0;
    v33[2] = v28 + 4;
    v33[3] = &v27[32 * v26];
    sub_1C5939930((uint64_t *)(a1 + 24), v33);
    v21 = *(_QWORD **)(a1 + 32);
    sub_1C59399A8((uint64_t)v33);
  }
  else
  {
    v21 = v20 + 4;
    *v20 = v19;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = 0;
  }
  *(_QWORD *)(a1 + 32) = v21;
  v12 = *(_QWORD *)(a1 + 24);
  v11 = (((unint64_t)v21 - v12) >> 5) - 1;
  *((_DWORD *)v17 + 2) = v11;
  return v12 + 32 * v11 + 8;
}

uint64_t *sub_1C5939930(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = (_QWORD *)a2[1];
  while (v2 != v3)
  {
    v8 = *(_QWORD *)(v2 - 32);
    v2 -= 32;
    *(v4 - 4) = v8;
    v4 -= 4;
    v4[2] = 0;
    v4[3] = 0;
    v4[1] = 0;
    *(_OWORD *)(v4 + 1) = *(_OWORD *)(v2 + 8);
    v4[3] = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
  }
  a2[1] = v4;
  v5 = *result;
  *result = (uint64_t)v4;
  a2[1] = v5;
  v6 = result[1];
  result[1] = a2[2];
  a2[2] = v6;
  v7 = result[2];
  result[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C59399A8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    do
    {
      v4 = v2;
      v6 = result;
      *(_QWORD *)(result + 16) = v1 - 32;
      v3 = *(void **)(v1 - 24);
      if (v3)
      {
        *(_QWORD *)(v1 - 16) = v3;
        operator delete(v3);
        v1 = *(_QWORD *)(v6 + 16);
      }
      else
      {
        v1 -= 32;
      }
      v2 = v4;
      result = v6;
    }
    while (v1 != v4);
  }
  if (*(_QWORD *)result)
  {
    v5 = result;
    operator delete(*(void **)result);
    return v5;
  }
  return result;
}

unint64_t sub_1C5939A24(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t result;

  v8 = a1 + 192;
  v9 = sub_1C484358C(a1 + 192, 24, 3);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 152) + 18) << 16;
  *(_BYTE *)v9 = 2;
  *(_DWORD *)(v9 + 1) = v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = a3;
  v11 = sub_1C484358C(v8, 24, 3);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 152) + 18) << 16;
  *(_BYTE *)v11 = 2;
  *(_DWORD *)(v11 + 1) = v12 | (*(unsigned __int8 *)(v11 + 4) << 24);
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = a2;
  v13 = sub_1C484358C(v8, 32, 3);
  *(_BYTE *)v13 = 0;
  *(_DWORD *)(v13 + 1) = (*(unsigned __int8 *)(v13 + 4) << 24) | 0x12;
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = v9;
  *(_QWORD *)(v13 + 24) = v11;
  v14 = a4;
  v15 = sub_1C484358C(v8, 24, 3);
  *(_BYTE *)v15 = 1;
  *(_DWORD *)(v15 + 1) = *(unsigned __int8 *)(v15 + 4) << 24;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = v14;
  result = sub_1C484358C(v8, 32, 3);
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 1) = (*(unsigned __int8 *)(result + 4) << 24) | 0x12;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 24) = v15;
  return result;
}

uint64_t sub_1C5939B5C(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t TempSymbol;
  int v8;
  const char *v10;
  __int16 v11;

  v6 = a1[1];
  if (!*(_BYTE *)(*(_QWORD *)(v6 + 152) + 353))
  {
    v10 = "tmp";
    v11 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(v6, (uint64_t)&v10, 1);
    (*(void (**)(_QWORD *, unint64_t, unint64_t))(*a1 + 280))(a1, TempSymbol, a2);
    a2 = sub_1C484358C(v6 + 192, 24, 3);
    v8 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 152) + 18) << 16;
    *(_BYTE *)a2 = 2;
    *(_DWORD *)(a2 + 1) = v8 | (*(unsigned __int8 *)(a2 + 4) << 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = TempSymbol;
  }
  return (*(uint64_t (**)(_QWORD *, unint64_t, uint64_t, _QWORD))(*a1 + 504))(a1, a2, a3, 0);
}

void sub_1C5939C38(uint64_t a1, uint64_t a2, uint64_t a3, const llvm::MCSymbol *a4)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  unint64_t v9;

  if (a3)
  {
    v6 = 80 * a3;
    for (i = a2 + 20; ; i += 80)
    {
      v8 = *(_QWORD *)(i - 12);
      if (!v8)
        goto LABEL_9;
      v9 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
      if (!v9 && (*(_DWORD *)(v8 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v8 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v8 + 24));
        *(_QWORD *)v8 = *(_QWORD *)v8 & 7 | v9;
      }
      if (v9)
        break;
      v6 -= 80;
      if (!v6)
        return;
    }
    if (a4)
    {
      if ((const llvm::MCSymbol *)v8 != a4)
        llvm::MCObjectStreamer::emitDwarfAdvanceFrameAddr(*(llvm::MCObjectStreamer **)(a1 + 16), a4, (const llvm::MCSymbol *)v8);
    }
LABEL_9:
    __asm { BR              X8 }
  }
}

void sub_1C593A0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  v3 = a3;
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 152) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 152), a2, a3, a1);
  __asm { BR              X10 }
}

uint64_t sub_1C593A100(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v5 = *(unsigned int *)(*(_QWORD *)(v2[1] + 152) + 8);
  if (*(_BYTE *)(v4 + 425))
    v6 = v3 == 0;
  else
    v6 = 1;
  if (v6)
    return (*(uint64_t (**)(_QWORD *, unint64_t, uint64_t, _QWORD))(*v2 + 504))(v2, a2, v5, 0);
  else
    return sub_1C5939B5C(v2, a2, v5);
}

void sub_1C593A164(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = a1[1];
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (a1[2] < a2)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, a2, 1);
        v2 = a1[1];
      }
      if (a2 != v2)
        bzero((void *)(*a1 + v2), a2 - v2);
    }
    a1[1] = a2;
  }
}

char *sub_1C593A1D4(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  uint64_t v12;

  if (a4)
  {
    if (a4 >= 0x333333333333334)
      abort();
    v6 = result;
    v7 = 5 * a4;
    result = (char *)operator new(80 * a4);
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[16 * v7];
    if (a2 != a3)
    {
      v8 = a2 + 56;
      do
      {
        v9 = result;
        *(_OWORD *)result = *(_OWORD *)(v8 - 56);
        *(_OWORD *)(result + 12) = *(_OWORD *)(v8 - 44);
        *((_QWORD *)result + 5) = 0;
        *((_QWORD *)result + 6) = 0;
        *((_QWORD *)result + 4) = 0;
        v10 = result + 32;
        sub_1C515FEEC((_QWORD *)result + 4, *(const void **)(v8 - 24), *(_QWORD *)(v8 - 16), *(_QWORD *)(v8 - 16) - *(_QWORD *)(v8 - 24));
        v11 = v9 + 56;
        if (*(char *)(v8 + 23) < 0)
        {
          sub_1C47EBC30(v11, *(void **)v8, *(_QWORD *)(v8 + 8));
        }
        else
        {
          *(_OWORD *)v11 = *(_OWORD *)v8;
          *((_QWORD *)v9 + 9) = *(_QWORD *)(v8 + 16);
        }
        v12 = v8 - 56;
        v8 += 80;
        result = v10 + 48;
      }
      while (v12 + 80 != a3);
      result = v9 + 80;
    }
    v6[1] = result;
  }
  return result;
}

void sub_1C593A2C0(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 88;
        v7 = (void **)(v4 - 56);
        sub_1C515FCE0(&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C593A338(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  return a1;
}

__n128 sub_1C593A378(uint64_t a1, __n128 *a2, unint64_t a3, _QWORD *a4, uint64_t a5, __n128 result)
{
  _BYTE *v8;
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int32 v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v19;
  __n128 *v20;
  unint64_t v21;
  __int128 *v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  char v37;
  char v38;
  int v39;
  void **v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  void **v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  char v54;
  char v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  int v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _BYTE *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  int v85;
  _BYTE *v86;
  uint64_t v87;
  char v88;
  char v89;
  int v90;
  void **v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _OWORD *v95;
  _BOOL4 v96;
  void **v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  __int128 v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  __int128 v109;
  unint64_t v110;
  _QWORD *v111;
  __int128 *v112;
  __int128 v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  __int8 *v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  _BYTE v127[25];
  _QWORD v128[3];
  char v129;
  char v130;
  int v131;
  void **v132;
  uint64_t v133;
  uint64_t v134;
  __int16 v135;
  int v136;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v8 = (_BYTE *)a2[-5].n128_u64[1];
      v9 = *(uint64_t *)((char *)a2[-2].n128_i64 + 4);
      v10 = a2[-1].n128_u8[0];
      v11 = a2[-1].n128_u8[1];
      v12 = a2[-1].n128_u32[1];
      v13 = *(void ***)(a1 + 16);
      if (v8 && (*v8 & 4) != 0)
      {
        v64 = (uint64_t *)*((_QWORD *)v8 - 1);
        v65 = *v64;
        v14 = v64 + 2;
        v15 = v65;
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      v66 = *(_QWORD *)(a1 + 60);
      v67 = *(_BYTE *)(a1 + 72);
      v68 = *(_BYTE *)(a1 + 73);
      v69 = *(_DWORD *)(a1 + 76);
      *(_QWORD *)&v123 = v14;
      *((_QWORD *)&v123 + 1) = v15;
      *(_QWORD *)&v124 = v9;
      BYTE8(v124) = v10;
      BYTE9(v124) = v11;
      HIDWORD(v124) = v12;
      if (v13)
      {
        if ((*(_BYTE *)v13 & 4) != 0)
        {
          v104 = *(v13 - 1);
          v105 = *v104;
          v13 = (void **)(v104 + 2);
          v70 = v105;
LABEL_61:
          v132 = v13;
          v133 = v70;
          v134 = v66;
          LOBYTE(v135) = v67;
          HIBYTE(v135) = v68;
          v136 = v69;
          if (sub_1C593BD50((uint64_t)&v123, (uint64_t)&v132))
          {
            v112 = (__int128 *)&a2[-6].n128_i8[8];
            v113 = *(_OWORD *)(a1 + 16);
            v123 = *(_OWORD *)a1;
            v124 = v113;
            v122 = *(_OWORD *)(a1 + 32);
            v114 = *(_QWORD *)(a1 + 48);
            *(_QWORD *)(a1 + 40) = 0;
            *(_QWORD *)(a1 + 48) = 0;
            *(_QWORD *)(a1 + 32) = 0;
            v115 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)&v127[9] = *(_OWORD *)(a1 + 65);
            *(_OWORD *)v127 = v115;
            v116 = *(__int128 *)((char *)&a2[-5] + 8);
            *(__n128 *)a1 = *(__n128 *)((char *)a2 - 88);
            *(_OWORD *)(a1 + 16) = v116;
            sub_1C62B8D00((void **)(a1 + 32));
            v118 = *(__int128 *)((char *)&a2[-4] + 8);
            v117 = &a2[-4].n128_i8[8];
            *(_OWORD *)(a1 + 32) = v118;
            *(_QWORD *)(a1 + 48) = *((_QWORD *)v117 + 2);
            *((_QWORD *)v117 + 1) = 0;
            *((_QWORD *)v117 + 2) = 0;
            *(_QWORD *)v117 = 0;
            v119 = *(_OWORD *)(v117 + 33);
            *(_OWORD *)(a1 + 56) = *(_OWORD *)(v117 + 24);
            *(_OWORD *)(a1 + 65) = v119;
            v120 = v124;
            *v112 = v123;
            v112[1] = v120;
            sub_1C62B8D00((void **)v117);
            *(_OWORD *)v117 = v122;
            *((_QWORD *)v117 + 2) = v114;
            v125 = 0uLL;
            v126 = 0;
            v121 = *(_OWORD *)v127;
            *(_OWORD *)(v117 + 33) = *(_OWORD *)&v127[9];
            *(_OWORD *)(v117 + 24) = v121;
            v132 = (void **)&v125;
            sub_1C515FCE0(&v132);
          }
          return result;
        }
        v13 = 0;
      }
      v70 = 0;
      goto LABEL_61;
    }
    if ((uint64_t)a3 <= 0)
    {
      if ((__n128 *)a1 != a2)
      {
        v22 = (__int128 *)(a1 + 88);
        if ((__n128 *)(a1 + 88) != a2)
        {
          v23 = 0;
          v24 = (__int128 *)a1;
          do
          {
            v25 = v22;
            v26 = (_BYTE *)*((_QWORD *)v24 + 13);
            if (v26 && (*v26 & 4) != 0)
            {
              v29 = (uint64_t *)*((_QWORD *)v26 - 1);
              v30 = *v29;
              v27 = v29 + 2;
              v28 = v30;
            }
            else
            {
              v27 = 0;
              v28 = 0;
            }
            v31 = *(_QWORD *)((char *)v24 + 148);
            v32 = *((_BYTE *)v24 + 160);
            v33 = *((_BYTE *)v24 + 161);
            v34 = *((_DWORD *)v24 + 41);
            v35 = (_BYTE *)*((_QWORD *)v24 + 2);
            v36 = *(_QWORD *)((char *)v24 + 60);
            v37 = *((_BYTE *)v24 + 72);
            v38 = *((_BYTE *)v24 + 73);
            v39 = *((_DWORD *)v24 + 19);
            *(_QWORD *)&v123 = v27;
            *((_QWORD *)&v123 + 1) = v28;
            *(_QWORD *)&v124 = v31;
            BYTE8(v124) = v32;
            BYTE9(v124) = v33;
            HIDWORD(v124) = v34;
            if (v35 && (*v35 & 4) != 0)
            {
              v42 = (_QWORD *)*((_QWORD *)v35 - 1);
              v43 = *v42;
              v40 = (void **)(v42 + 2);
              v41 = v43;
            }
            else
            {
              v40 = 0;
              v41 = 0;
            }
            v132 = v40;
            v133 = v41;
            v134 = v36;
            LOBYTE(v135) = v37;
            HIBYTE(v135) = v38;
            v136 = v39;
            if (sub_1C593BD50((uint64_t)&v123, (uint64_t)&v132))
            {
              v44 = v25[1];
              v123 = *v25;
              v124 = v44;
              v125 = *(__int128 *)((char *)v24 + 120);
              v126 = *((_QWORD *)v24 + 17);
              *((_QWORD *)v24 + 15) = 0;
              *((_QWORD *)v24 + 16) = 0;
              *((_QWORD *)v24 + 17) = 0;
              *(_OWORD *)v127 = v24[9];
              v45 = v23;
              *(_OWORD *)&v127[9] = *(__int128 *)((char *)v24 + 153);
              while (1)
              {
                v46 = a1 + v45;
                v47 = *(_OWORD *)(a1 + v45 + 16);
                *(_OWORD *)(v46 + 88) = *(_OWORD *)(a1 + v45);
                *(_OWORD *)(v46 + 104) = v47;
                sub_1C62B8D00((void **)(a1 + v45 + 120));
                *(_OWORD *)(v46 + 120) = *(_OWORD *)(v46 + 32);
                *(_QWORD *)(v46 + 136) = *(_QWORD *)(v46 + 48);
                *(_QWORD *)(v46 + 40) = 0;
                *(_QWORD *)(v46 + 48) = 0;
                *(_QWORD *)(v46 + 32) = 0;
                *(_OWORD *)(v46 + 144) = *(_OWORD *)(v46 + 56);
                *(_OWORD *)(v46 + 153) = *(_OWORD *)(v46 + 65);
                if (!v45)
                  break;
                if ((_QWORD)v124 && (*(_BYTE *)v124 & 4) != 0)
                {
                  v50 = *(_QWORD **)(v124 - 8);
                  v51 = *v50;
                  v48 = (void **)(v50 + 2);
                  v49 = v51;
                }
                else
                {
                  v48 = 0;
                  v49 = 0;
                }
                v52 = *(_BYTE **)(v46 - 72);
                v53 = *(_QWORD *)(v46 - 28);
                v54 = *(_BYTE *)(v46 - 16);
                v55 = *(_BYTE *)(v46 - 15);
                v56 = *(_DWORD *)(v46 - 12);
                v132 = v48;
                v133 = v49;
                v134 = *(_QWORD *)&v127[4];
                v135 = *(_WORD *)&v127[16];
                v136 = *(_DWORD *)&v127[20];
                if (v52 && (*v52 & 4) != 0)
                {
                  v59 = (uint64_t *)*((_QWORD *)v52 - 1);
                  v60 = *v59;
                  v57 = v59 + 2;
                  v58 = v60;
                }
                else
                {
                  v57 = 0;
                  v58 = 0;
                }
                v128[0] = v57;
                v128[1] = v58;
                v128[2] = v53;
                v129 = v54;
                v130 = v55;
                v131 = v56;
                v45 -= 88;
                if (!sub_1C593BD50((uint64_t)&v132, (uint64_t)v128))
                {
                  v61 = a1 + v45 + 88;
                  goto LABEL_36;
                }
              }
              v61 = a1;
LABEL_36:
              v62 = v124;
              *(_OWORD *)v61 = v123;
              *(_OWORD *)(v61 + 16) = v62;
              sub_1C62B8D00((void **)(v61 + 32));
              *(_OWORD *)(v61 + 32) = v125;
              *(_QWORD *)(v61 + 48) = v126;
              v125 = 0uLL;
              v126 = 0;
              v63 = *(_OWORD *)v127;
              *(_OWORD *)(v46 + 65) = *(_OWORD *)&v127[9];
              *(_OWORD *)(v46 + 56) = v63;
              v132 = (void **)&v125;
              sub_1C515FCE0(&v132);
            }
            v22 = (__int128 *)((char *)v25 + 88);
            v23 += 88;
            v24 = v25;
          }
          while ((__n128 *)((char *)v25 + 88) != a2);
        }
      }
    }
    else
    {
      v19 = a3 >> 1;
      v20 = (__n128 *)(a1 + 88 * (a3 >> 1));
      v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v71 = sub_1C593AA64(a1, v20, v21, (uint64_t)a4, result);
        v72 = (uint64_t)&a4[11 * v19];
        result.n128_u64[0] = sub_1C593AA64(a1 + 88 * (a3 >> 1), a2, a3 - (a3 >> 1), v72, v71).n128_u64[0];
        v73 = &a4[11 * a3];
        v74 = a1 + 56;
        v75 = v72;
        v76 = a4;
        while ((_QWORD *)v75 != v73)
        {
          v77 = *(_BYTE **)(v75 + 16);
          if (v77 && (*v77 & 4) != 0)
          {
            v80 = (uint64_t *)*((_QWORD *)v77 - 1);
            v81 = *v80;
            v78 = v80 + 2;
            v79 = v81;
          }
          else
          {
            v78 = 0;
            v79 = 0;
          }
          v82 = *(_QWORD *)(v75 + 60);
          v83 = *(_BYTE *)(v75 + 72);
          v84 = *(_BYTE *)(v75 + 73);
          v85 = *(_DWORD *)(v75 + 76);
          v86 = (_BYTE *)v76[2];
          v87 = *(_QWORD *)((char *)v76 + 60);
          v88 = *((_BYTE *)v76 + 72);
          v89 = *((_BYTE *)v76 + 73);
          v90 = *((_DWORD *)v76 + 19);
          *(_QWORD *)&v123 = v78;
          *((_QWORD *)&v123 + 1) = v79;
          *(_QWORD *)&v124 = v82;
          BYTE8(v124) = v83;
          BYTE9(v124) = v84;
          HIDWORD(v124) = v85;
          if (v86 && (*v86 & 4) != 0)
          {
            v93 = (_QWORD *)*((_QWORD *)v86 - 1);
            v94 = *v93;
            v91 = (void **)(v93 + 2);
            v92 = v94;
          }
          else
          {
            v91 = 0;
            v92 = 0;
          }
          v95 = (_OWORD *)(v74 - 56);
          v132 = v91;
          v133 = v92;
          v134 = v87;
          LOBYTE(v135) = v88;
          HIBYTE(v135) = v89;
          v136 = v90;
          v96 = sub_1C593BD50((uint64_t)&v123, (uint64_t)&v132);
          v97 = (void **)(v74 - 24);
          if (v96)
          {
            v98 = *(_OWORD *)(v75 + 16);
            *v95 = *(_OWORD *)v75;
            *(_OWORD *)(v74 - 40) = v98;
            sub_1C62B8D00(v97);
            *(_OWORD *)(v74 - 24) = *(_OWORD *)(v75 + 32);
            *(_QWORD *)(v74 - 8) = *(_QWORD *)(v75 + 48);
            *(_QWORD *)(v75 + 32) = 0;
            *(_QWORD *)(v75 + 40) = 0;
            *(_QWORD *)(v75 + 48) = 0;
            result = *(__n128 *)(v75 + 56);
            *(_OWORD *)(v74 + 9) = *(_OWORD *)(v75 + 65);
            *(__n128 *)v74 = result;
            v75 += 88;
          }
          else
          {
            v99 = *((_OWORD *)v76 + 1);
            *v95 = *(_OWORD *)v76;
            *(_OWORD *)(v74 - 40) = v99;
            sub_1C62B8D00(v97);
            *(_OWORD *)(v74 - 24) = *((_OWORD *)v76 + 2);
            *(_QWORD *)(v74 - 8) = v76[6];
            v76[4] = 0;
            v76[5] = 0;
            v76[6] = 0;
            result = *(__n128 *)(v76 + 7);
            *(_OWORD *)(v74 + 9) = *(_OWORD *)((char *)v76 + 65);
            *(__n128 *)v74 = result;
            v76 += 11;
          }
          v74 += 88;
          if (v76 == (_QWORD *)v72)
          {
            if ((_QWORD *)v75 != v73)
            {
              v100 = 0;
              do
              {
                v101 = (_QWORD *)(v75 + v100);
                v102 = v74 + v100;
                v103 = *(_OWORD *)(v75 + v100);
                *(_OWORD *)(v102 - 40) = *(_OWORD *)(v75 + v100 + 16);
                *(_OWORD *)(v102 - 56) = v103;
                sub_1C62B8D00((void **)(v74 + v100 - 24));
                *(_OWORD *)(v102 - 24) = *(_OWORD *)(v75 + v100 + 32);
                *(_QWORD *)(v102 - 8) = *(_QWORD *)(v75 + v100 + 48);
                v101[4] = 0;
                v101[5] = 0;
                v101[6] = 0;
                result = *(__n128 *)(v75 + v100 + 56);
                *(_OWORD *)(v102 + 9) = *(_OWORD *)(v75 + v100 + 65);
                *(__n128 *)v102 = result;
                v100 += 88;
              }
              while (v101 + 11 != v73);
            }
            goto LABEL_67;
          }
        }
        if (v76 != (_QWORD *)v72)
        {
          v106 = 0;
          do
          {
            v107 = &v76[v106];
            v108 = v74 + v106 * 8;
            v109 = *(_OWORD *)&v76[v106];
            *(_OWORD *)(v108 - 40) = *(_OWORD *)&v76[v106 + 2];
            *(_OWORD *)(v108 - 56) = v109;
            sub_1C62B8D00((void **)(v74 + v106 * 8 - 24));
            *(_OWORD *)(v108 - 24) = *(_OWORD *)&v76[v106 + 4];
            *(_QWORD *)(v108 - 8) = v76[v106 + 6];
            v107[4] = 0;
            v107[5] = 0;
            v107[6] = 0;
            result = *(__n128 *)&v76[v106 + 7];
            *(_OWORD *)(v108 + 9) = *(_OWORD *)((char *)&v76[v106 + 8] + 1);
            *(__n128 *)v108 = result;
            v106 += 11;
          }
          while (v107 + 11 != (_QWORD *)v72);
        }
LABEL_67:
        if (a4)
        {
          v110 = a3;
          v111 = a4 + 4;
          do
          {
            *(_QWORD *)&v123 = v111;
            sub_1C515FCE0((void ***)&v123);
            v111 += 11;
            --v110;
          }
          while (v110);
        }
      }
      else
      {
        sub_1C593A378(a1, v20, v21, a4, a5);
        sub_1C593A378(a1 + 88 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
        sub_1C593B19C((__int128 *)a1, (__int128 *)(a1 + 88 * (a3 >> 1)), (__int128 *)a2, a3 >> 1, a3 - (a3 >> 1), a4, a5);
      }
    }
  }
  return result;
}

__n128 sub_1C593AA64(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  _OWORD *v8;
  __int128 v9;
  _BYTE *v10;
  uint64_t v11;
  __int8 v12;
  __int8 v13;
  __int32 v14;
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  _BYTE *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  char v34;
  char v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _OWORD *v41;
  __int128 v42;
  _QWORD *v43;
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  char v55;
  char v56;
  int v57;
  _BYTE *v58;
  uint64_t v59;
  char v60;
  char v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  __n128 *v73;
  _BYTE *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  int v82;
  _BYTE *v83;
  uint64_t v84;
  char v85;
  char v86;
  int v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  __n128 *v92;
  _BOOL4 v93;
  _QWORD *v94;
  __n128 v95;
  __int128 v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t *v101;
  uint64_t v102;
  __int8 *v103;
  uint64_t v104;
  char v105;
  char v106;
  int v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _BOOL4 v111;
  _QWORD *v112;
  __n128 *v113;
  _OWORD *v114;
  _QWORD *v115;
  __int128 v116;
  __n128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __n128 v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  __int128 v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  char v131;
  int v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  char v137;
  int v138;

  if (!a3)
    return result;
  v8 = (_OWORD *)a1;
  if (a3 == 2)
  {
    v10 = (_BYTE *)a2[-5].n128_u64[1];
    v11 = *(uint64_t *)((char *)a2[-2].n128_i64 + 4);
    v12 = a2[-1].n128_i8[0];
    v13 = a2[-1].n128_i8[1];
    v14 = a2[-1].n128_i32[1];
    v15 = *(_BYTE **)(a1 + 16);
    if (v10 && (*v10 & 4) != 0)
    {
      v101 = (uint64_t *)*((_QWORD *)v10 - 1);
      v102 = *v101;
      v16 = v101 + 2;
      v17 = v102;
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v103 = &a2[-6].n128_i8[8];
    v104 = *(_QWORD *)(a1 + 60);
    v105 = *(_BYTE *)(a1 + 72);
    v106 = *(_BYTE *)(a1 + 73);
    v107 = *(_DWORD *)(a1 + 76);
    v133 = v16;
    v134 = v17;
    v135 = v11;
    v136 = v12;
    v137 = v13;
    v138 = v14;
    if (v15)
    {
      if ((*v15 & 4) != 0)
      {
        v109 = (_QWORD *)*((_QWORD *)v15 - 1);
        v110 = *v109;
        v15 = v109 + 2;
        v108 = v110;
        goto LABEL_63;
      }
      v15 = 0;
    }
    v108 = 0;
LABEL_63:
    v127 = v15;
    v128 = v108;
    v129 = v104;
    v130 = v105;
    v131 = v106;
    v132 = v107;
    v111 = sub_1C593BD50((uint64_t)&v133, (uint64_t)&v127);
    v112 = (_QWORD *)(a4 + 32);
    v113 = (__n128 *)(a4 + 56);
    v114 = (_OWORD *)(a4 + 88);
    v115 = (_QWORD *)(a4 + 120);
    if (v111)
    {
      v116 = *(__int128 *)((char *)&a2[-5] + 8);
      *(_OWORD *)a4 = *(_OWORD *)v103;
      *(_OWORD *)(a4 + 16) = v116;
      *(_QWORD *)(a4 + 40) = 0;
      *(_QWORD *)(a4 + 48) = 0;
      *v112 = 0;
      *(__n128 *)(a4 + 32) = *(__n128 *)((char *)a2 - 56);
      *(_QWORD *)(a4 + 48) = a2[-3].n128_u64[1];
      a2[-4].n128_u64[1] = 0;
      a2[-3].n128_u64[0] = 0;
      a2[-3].n128_u64[1] = 0;
      v117 = a2[-2];
      *(__n128 *)(a4 + 65) = *(__n128 *)((char *)a2 - 23);
      *v113 = v117;
      v118 = v8[1];
      *v114 = *v8;
      *(_OWORD *)(a4 + 104) = v118;
      *(_QWORD *)(a4 + 128) = 0;
      *(_QWORD *)(a4 + 136) = 0;
      *v115 = 0;
      *(_OWORD *)(a4 + 120) = v8[2];
      *(_QWORD *)(a4 + 136) = *((_QWORD *)v8 + 6);
      *((_QWORD *)v8 + 4) = 0;
      *((_QWORD *)v8 + 5) = 0;
      *((_QWORD *)v8 + 6) = 0;
      result = *(__n128 *)((char *)v8 + 56);
      v119 = *(_OWORD *)((char *)v8 + 65);
    }
    else
    {
      v120 = v8[1];
      *(_OWORD *)a4 = *v8;
      *(_OWORD *)(a4 + 16) = v120;
      *(_QWORD *)(a4 + 40) = 0;
      *(_QWORD *)(a4 + 48) = 0;
      *v112 = 0;
      *(_OWORD *)(a4 + 32) = v8[2];
      *(_QWORD *)(a4 + 48) = *((_QWORD *)v8 + 6);
      *((_QWORD *)v8 + 4) = 0;
      *((_QWORD *)v8 + 5) = 0;
      *((_QWORD *)v8 + 6) = 0;
      v121 = *(__n128 *)((char *)v8 + 56);
      *(_OWORD *)(a4 + 65) = *(_OWORD *)((char *)v8 + 65);
      *v113 = v121;
      v122 = *(__int128 *)((char *)&a2[-5] + 8);
      *v114 = *(_OWORD *)v103;
      *(_OWORD *)(a4 + 104) = v122;
      *(_QWORD *)(a4 + 128) = 0;
      *(_QWORD *)(a4 + 136) = 0;
      *v115 = 0;
      *(__n128 *)(a4 + 120) = *(__n128 *)((char *)a2 - 56);
      *(_QWORD *)(a4 + 136) = a2[-3].n128_u64[1];
      a2[-4].n128_u64[1] = 0;
      a2[-3].n128_u64[0] = 0;
      a2[-3].n128_u64[1] = 0;
      result = a2[-2];
      v119 = *(__int128 *)((char *)&a2[-2] + 9);
    }
    *(_OWORD *)(a4 + 153) = v119;
    *(__n128 *)(a4 + 144) = result;
    return result;
  }
  if (a3 == 1)
  {
    v9 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_OWORD *)(a4 + 16) = v9;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a4 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    result = *(__n128 *)(a1 + 56);
    *(_OWORD *)(a4 + 65) = *(_OWORD *)(a1 + 65);
    *(__n128 *)(a4 + 56) = result;
  }
  else if ((uint64_t)a3 > 8)
  {
    v70 = 88 * (a3 >> 1);
    v71 = (_QWORD *)(a1 + v70);
    sub_1C593A378(a1, a1 + v70, a3 >> 1, a4, a3 >> 1);
    sub_1C593A378((char *)v8 + v70, a2, a3 - (a3 >> 1), a4 + v70, a3 - (a3 >> 1));
    v72 = a4 + 56;
    v73 = (__n128 *)((char *)v8 + v70);
    while (v73 != a2)
    {
      v74 = (_BYTE *)v73[1].n128_u64[0];
      if (v74 && (*v74 & 4) != 0)
      {
        v77 = (uint64_t *)*((_QWORD *)v74 - 1);
        v78 = *v77;
        v75 = v77 + 2;
        v76 = v78;
      }
      else
      {
        v75 = 0;
        v76 = 0;
      }
      v79 = *(uint64_t *)((char *)&v73[3].n128_i64[1] + 4);
      v80 = v73[4].n128_i8[8];
      v81 = v73[4].n128_i8[9];
      v82 = v73[4].n128_i32[3];
      v83 = (_BYTE *)*((_QWORD *)v8 + 2);
      v84 = *(_QWORD *)((char *)v8 + 60);
      v85 = *((_BYTE *)v8 + 72);
      v86 = *((_BYTE *)v8 + 73);
      v87 = *((_DWORD *)v8 + 19);
      v133 = v75;
      v134 = v76;
      v135 = v79;
      v136 = v80;
      v137 = v81;
      v138 = v82;
      if (v83 && (*v83 & 4) != 0)
      {
        v90 = (uint64_t *)*((_QWORD *)v83 - 1);
        v91 = *v90;
        v88 = v90 + 2;
        v89 = v91;
      }
      else
      {
        v88 = 0;
        v89 = 0;
      }
      v92 = (__n128 *)(v72 - 56);
      v127 = v88;
      v128 = v89;
      v129 = v84;
      v130 = v85;
      v131 = v86;
      v132 = v87;
      v93 = sub_1C593BD50((uint64_t)&v133, (uint64_t)&v127);
      v94 = (_QWORD *)(v72 - 24);
      if (v93)
      {
        v95 = v73[1];
        *v92 = *v73;
        *(__n128 *)(v72 - 40) = v95;
        *(_QWORD *)(v72 - 16) = 0;
        *(_QWORD *)(v72 - 8) = 0;
        *v94 = 0;
        *(__n128 *)(v72 - 24) = v73[2];
        *(_QWORD *)(v72 - 8) = v73[3].n128_u64[0];
        v73[2].n128_u64[0] = 0;
        v73[2].n128_u64[1] = 0;
        v73[3].n128_u64[0] = 0;
        result = *(__n128 *)((char *)v73 + 56);
        *(__n128 *)(v72 + 9) = *(__n128 *)((char *)v73 + 65);
        *(__n128 *)v72 = result;
        v73 = (__n128 *)((char *)v73 + 88);
      }
      else
      {
        v96 = v8[1];
        *v92 = *(__n128 *)v8;
        *(_OWORD *)(v72 - 40) = v96;
        *(_QWORD *)(v72 - 16) = 0;
        *(_QWORD *)(v72 - 8) = 0;
        *v94 = 0;
        *(_OWORD *)(v72 - 24) = v8[2];
        *(_QWORD *)(v72 - 8) = *((_QWORD *)v8 + 6);
        *((_QWORD *)v8 + 4) = 0;
        *((_QWORD *)v8 + 5) = 0;
        *((_QWORD *)v8 + 6) = 0;
        result = *(__n128 *)((char *)v8 + 56);
        *(_OWORD *)(v72 + 9) = *(_OWORD *)((char *)v8 + 65);
        *(__n128 *)v72 = result;
        v8 = (_OWORD *)((char *)v8 + 88);
      }
      v72 += 88;
      if (v8 == (_OWORD *)v71)
      {
        if (v73 != a2)
        {
          v97 = 0;
          do
          {
            v98 = (char *)v73 + v97;
            v99 = v72 + v97;
            v100 = *(__int128 *)((char *)v73 + v97);
            *(__n128 *)(v99 - 40) = *(__n128 *)((char *)v73 + v97 + 16);
            *(_OWORD *)(v99 - 56) = v100;
            *(_QWORD *)(v99 - 16) = 0;
            *(_QWORD *)(v99 - 8) = 0;
            *(_QWORD *)(v99 - 24) = 0;
            *(__n128 *)(v99 - 24) = *(__n128 *)((char *)v73 + v97 + 32);
            *(_QWORD *)(v99 - 8) = v73[3].n128_u64[v97 / 8];
            *((_QWORD *)v98 + 4) = 0;
            *((_QWORD *)v98 + 5) = 0;
            *((_QWORD *)v98 + 6) = 0;
            result = *(__n128 *)((char *)v73 + v97 + 56);
            *(__n128 *)(v99 + 9) = *(__n128 *)((char *)v73 + v97 + 65);
            *(__n128 *)v99 = result;
            v97 += 88;
          }
          while (v98 + 88 != (char *)a2);
        }
        return result;
      }
    }
    if (v8 != (_OWORD *)v71)
    {
      v123 = 0;
      do
      {
        v124 = v72 + v123;
        v125 = (_QWORD *)((char *)v8 + v123);
        v126 = *(_OWORD *)((char *)v8 + v123);
        *(_OWORD *)(v124 - 40) = *(_OWORD *)((char *)v8 + v123 + 16);
        *(_OWORD *)(v124 - 56) = v126;
        *(_QWORD *)(v124 - 16) = 0;
        *(_QWORD *)(v124 - 8) = 0;
        *(_QWORD *)(v124 - 24) = 0;
        *(_OWORD *)(v124 - 24) = *(_OWORD *)((char *)v8 + v123 + 32);
        *(_QWORD *)(v124 - 8) = *(_QWORD *)((char *)v8 + v123 + 48);
        v125[4] = 0;
        v125[5] = 0;
        v125[6] = 0;
        result = *(__n128 *)((char *)v8 + v123 + 56);
        *(_OWORD *)(v124 + 9) = *(_OWORD *)((char *)v8 + v123 + 65);
        *(__n128 *)v124 = result;
        v123 += 88;
      }
      while (v125 + 11 != v71);
    }
  }
  else if ((__n128 *)a1 != a2)
  {
    v18 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a1;
    *(_OWORD *)(a4 + 16) = v18;
    *(_QWORD *)(a4 + 40) = 0;
    *(_QWORD *)(a4 + 48) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a4 + 48) = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    result = *(__n128 *)(a1 + 56);
    *(_OWORD *)(a4 + 65) = *(_OWORD *)(a1 + 65);
    *(__n128 *)(a4 + 56) = result;
    v19 = (_OWORD *)(a1 + 88);
    if ((__n128 *)(a1 + 88) != a2)
    {
      v20 = 0;
      v21 = (_OWORD *)a4;
      do
      {
        v22 = v19;
        v23 = (_BYTE *)*((_QWORD *)v8 + 13);
        if (v23 && (*v23 & 4) != 0)
        {
          v26 = (uint64_t *)*((_QWORD *)v23 - 1);
          v27 = *v26;
          v24 = v26 + 2;
          v25 = v27;
        }
        else
        {
          v24 = 0;
          v25 = 0;
        }
        v28 = *(_QWORD *)((char *)v8 + 148);
        v29 = *((_BYTE *)v8 + 160);
        v30 = *((_BYTE *)v8 + 161);
        v31 = *((_DWORD *)v8 + 41);
        v32 = (_BYTE *)*((_QWORD *)v21 + 2);
        v33 = *(_QWORD *)((char *)v21 + 60);
        v34 = *((_BYTE *)v21 + 72);
        v35 = *((_BYTE *)v21 + 73);
        v36 = *((_DWORD *)v21 + 19);
        v133 = v24;
        v134 = v25;
        v135 = v28;
        v136 = v29;
        v137 = v30;
        v138 = v31;
        if (v32 && (*v32 & 4) != 0)
        {
          v39 = (uint64_t *)*((_QWORD *)v32 - 1);
          v40 = *v39;
          v37 = v39 + 2;
          v38 = v40;
        }
        else
        {
          v37 = 0;
          v38 = 0;
        }
        v41 = (_OWORD *)((char *)v21 + 88);
        v127 = v37;
        v128 = v38;
        v129 = v33;
        v130 = v34;
        v131 = v35;
        v132 = v36;
        if (sub_1C593BD50((uint64_t)&v133, (uint64_t)&v127))
        {
          v45 = v21[1];
          *v41 = *v21;
          *(_OWORD *)((char *)v21 + 104) = v45;
          *(_OWORD *)((char *)v21 + 120) = v21[2];
          *((_QWORD *)v21 + 17) = *((_QWORD *)v21 + 6);
          *((_QWORD *)v21 + 4) = 0;
          *((_QWORD *)v21 + 5) = 0;
          *((_QWORD *)v21 + 6) = 0;
          v21[9] = *(_OWORD *)((char *)v21 + 56);
          v46 = a4;
          *(_OWORD *)((char *)v21 + 153) = *(_OWORD *)((char *)v21 + 65);
          if (v21 != (_OWORD *)a4)
          {
            v47 = v20;
            while (1)
            {
              v48 = (_BYTE *)*((_QWORD *)v8 + 13);
              if (v48 && (*v48 & 4) != 0)
              {
                v51 = (uint64_t *)*((_QWORD *)v48 - 1);
                v52 = *v51;
                v49 = v51 + 2;
                v50 = v52;
              }
              else
              {
                v49 = 0;
                v50 = 0;
              }
              v53 = (_OWORD *)(a4 + v47);
              v54 = *(_QWORD *)((char *)v8 + 148);
              v55 = *((_BYTE *)v8 + 160);
              v56 = *((_BYTE *)v8 + 161);
              v57 = *((_DWORD *)v8 + 41);
              v58 = *(_BYTE **)(a4 + v47 - 72);
              v59 = *(_QWORD *)(a4 + v47 - 28);
              v60 = *(_BYTE *)(a4 + v47 - 16);
              v61 = *(_BYTE *)(a4 + v47 - 15);
              v62 = *(_DWORD *)(a4 + v47 - 12);
              v133 = v49;
              v134 = v50;
              v135 = v54;
              v136 = v55;
              v137 = v56;
              v138 = v57;
              if (!v58)
                goto LABEL_32;
              if ((*v58 & 4) != 0)
              {
                v65 = (uint64_t *)*((_QWORD *)v58 - 1);
                v66 = *v65;
                v63 = v65 + 2;
                v64 = v66;
              }
              else
              {
LABEL_32:
                v63 = 0;
                v64 = 0;
              }
              v127 = v63;
              v128 = v64;
              v129 = v59;
              v130 = v60;
              v131 = v61;
              v132 = v62;
              if (!sub_1C593BD50((uint64_t)&v133, (uint64_t)&v127))
                break;
              v67 = *(_OWORD *)((char *)v53 - 72);
              *v53 = *(_OWORD *)((char *)v53 - 88);
              v53[1] = v67;
              v68 = a4 + v47;
              sub_1C62B8D00((void **)(a4 + v47 + 32));
              *(_OWORD *)(v68 + 32) = *(_OWORD *)(v68 - 56);
              *(_QWORD *)(v68 + 48) = *(_QWORD *)(v68 - 40);
              *(_QWORD *)(v68 - 48) = 0;
              *(_QWORD *)(v68 - 40) = 0;
              *(_QWORD *)(v68 - 56) = 0;
              *(_OWORD *)(v68 + 56) = *(_OWORD *)(v68 - 32);
              *(_OWORD *)(v68 + 65) = *(_OWORD *)(v68 - 23);
              v47 -= 88;
              if (!v47)
              {
                v46 = a4;
                goto LABEL_38;
              }
            }
            v46 = a4 + v47;
          }
LABEL_38:
          v69 = v22[1];
          *(_OWORD *)v46 = *v22;
          *(_OWORD *)(v46 + 16) = v69;
          sub_1C62B8D00((void **)(v46 + 32));
          v43 = (_QWORD *)v8 + 15;
          *(_OWORD *)(v46 + 32) = *(_OWORD *)((char *)v8 + 120);
          *(_QWORD *)(v46 + 48) = *((_QWORD *)v8 + 17);
          v44 = (_OWORD *)(v46 + 56);
        }
        else
        {
          v42 = v22[1];
          *v41 = *v22;
          *(_OWORD *)((char *)v21 + 104) = v42;
          *((_QWORD *)v21 + 16) = 0;
          *((_QWORD *)v21 + 17) = 0;
          *((_QWORD *)v21 + 15) = 0;
          v43 = (_QWORD *)v8 + 15;
          *(_OWORD *)((char *)v21 + 120) = *(_OWORD *)((char *)v8 + 120);
          *((_QWORD *)v21 + 17) = *((_QWORD *)v8 + 17);
          v44 = v21 + 9;
        }
        *v43 = 0;
        v43[1] = 0;
        v43[2] = 0;
        result = *((__n128 *)v8 + 9);
        v19 = (_OWORD *)((char *)v22 + 88);
        *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v8 + 153);
        *v44 = result;
        v20 += 88;
        v21 = v41;
        v8 = v22;
      }
      while ((__n128 *)((char *)v22 + 88) != a2);
    }
  }
  return result;
}

void sub_1C593B19C(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  char v24;
  char v25;
  int v26;
  void **v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  int *v41;
  _BYTE *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  char v50;
  int v51;
  _BYTE *v52;
  uint64_t v53;
  char v54;
  char v55;
  int v56;
  void **v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  __int128 *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _BYTE *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  int v75;
  _BYTE *v76;
  uint64_t v77;
  char v78;
  char v79;
  int v80;
  void **v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _BOOL4 v85;
  uint64_t v86;
  __int128 *v87;
  __int128 *v88;
  __int128 *v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 *v97;
  __int128 *v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  __int128 v112;
  __int128 v113;
  _BYTE *v114;
  _QWORD *v115;
  _BYTE *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  char v123;
  int v124;
  _BYTE *v125;
  uint64_t v126;
  char v127;
  char v128;
  int v129;
  void **v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _BOOL4 v134;
  _OWORD *v135;
  __int128 v136;
  __int128 *v137;
  __int128 v138;
  unint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  __int128 v142;
  __int128 v143;
  _QWORD *v144;
  uint64_t v145;
  _OWORD *v146;
  _QWORD *v147;
  _BYTE *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  char v155;
  int v156;
  _BYTE *v157;
  uint64_t v158;
  char v159;
  char v160;
  int v161;
  void **v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  __int128 *v166;
  _BOOL4 v167;
  void **v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  unint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  _OWORD *v179;
  _QWORD *v180;
  __int128 v181;
  __int128 v182;
  _QWORD *v183;
  _QWORD *v184;
  __int128 v185;
  void **v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 *v193;
  uint64_t v194;
  __int128 *v195;
  _QWORD *v196;
  __int128 *v197;
  uint64_t v198;
  __int128 *v200;
  __int128 *v201;
  uint64_t v203;
  _BYTE **v204;
  __int128 v205;
  __int128 v206;
  __int128 *v207;
  __int128 v208;
  void **v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  char v213;
  int v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _BYTE v220[25];

  v203 = a5;
  if (a5)
  {
    while (1)
    {
      v207 = a1;
      if (a4 <= a7 || v203 <= a7)
        break;
      if (!a4)
        return;
      v11 = 0;
      v12 = *(_QWORD *)((char *)a2 + 60);
      v13 = *((_BYTE *)a2 + 72);
      v14 = *((_BYTE *)a2 + 73);
      v15 = -a4;
      v16 = *((_DWORD *)a2 + 19);
      while (1)
      {
        v17 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v17 && (*v17 & 4) != 0)
        {
          v20 = (uint64_t *)*((_QWORD *)v17 - 1);
          v21 = *v20;
          v18 = v20 + 2;
          v19 = v21;
        }
        else
        {
          v18 = 0;
          v19 = 0;
        }
        v22 = *(_BYTE **)((char *)a1 + v11 + 16);
        v23 = *(_QWORD *)((char *)a1 + v11 + 60);
        v24 = *((_BYTE *)a1 + v11 + 72);
        v25 = *((_BYTE *)a1 + v11 + 73);
        v26 = *(_DWORD *)((char *)a1 + v11 + 76);
        *(_QWORD *)&v215 = v18;
        *((_QWORD *)&v215 + 1) = v19;
        *(_QWORD *)&v216 = v12;
        BYTE8(v216) = v13;
        BYTE9(v216) = v14;
        HIDWORD(v216) = v16;
        if (!v22)
          goto LABEL_12;
        if ((*v22 & 4) != 0)
        {
          v29 = (_QWORD *)*((_QWORD *)v22 - 1);
          v30 = *v29;
          v27 = (void **)(v29 + 2);
          v28 = v30;
        }
        else
        {
LABEL_12:
          v27 = 0;
          v28 = 0;
        }
        v209 = v27;
        v210 = v28;
        v211 = v23;
        v212 = v24;
        v213 = v25;
        v214 = v26;
        if (sub_1C593BD50((uint64_t)&v215, (uint64_t)&v209))
          break;
        v11 += 88;
        if (__CFADD__(v15++, 1))
          return;
      }
      v32 = -v15;
      v195 = (__int128 *)((char *)a1 + v11);
      v196 = a6;
      if (-v15 >= v203)
      {
        if (v15 == -1)
        {
          v184 = (_QWORD *)((char *)a1 + v11);
          v185 = *(__int128 *)((char *)a1 + v11 + 16);
          v215 = *(__int128 *)((char *)a1 + v11);
          v216 = v185;
          v186 = (void **)((char *)a1 + v11 + 32);
          v208 = *(_OWORD *)v186;
          v187 = *(_QWORD *)((char *)a1 + v11 + 48);
          *v186 = 0;
          v184[5] = 0;
          v184[6] = 0;
          v188 = *(_OWORD *)(v184 + 7);
          *(_OWORD *)&v220[9] = *(_OWORD *)((char *)v184 + 65);
          *(_OWORD *)v220 = v188;
          v189 = a2[1];
          *(_OWORD *)v184 = *a2;
          *((_OWORD *)v184 + 1) = v189;
          sub_1C62B8D00(v186);
          *(_OWORD *)v186 = a2[2];
          v184[6] = *((_QWORD *)a2 + 6);
          *((_QWORD *)a2 + 4) = 0;
          *((_QWORD *)a2 + 5) = 0;
          *((_QWORD *)a2 + 6) = 0;
          v190 = *(__int128 *)((char *)a2 + 56);
          *(_OWORD *)((char *)v184 + 65) = *(__int128 *)((char *)a2 + 65);
          *(_OWORD *)(v184 + 7) = v190;
          v191 = v216;
          *a2 = v215;
          a2[1] = v191;
          sub_1C62B8D00((void **)a2 + 4);
          a2[2] = v208;
          *((_QWORD *)a2 + 6) = v187;
          v217 = 0;
          v218 = 0;
          v219 = 0;
          v192 = *(_OWORD *)&v220[9];
          *(__int128 *)((char *)a2 + 56) = *(_OWORD *)v220;
          *(__int128 *)((char *)a2 + 65) = v192;
          v209 = (void **)&v217;
          sub_1C515FCE0(&v209);
          return;
        }
        if (v15 > 0)
          v32 = 1 - v15;
        v62 = v32 >> 1;
        v63 = a3;
        if (a3 != a2)
        {
          v64 = 0x2E8BA2E8BA2E8BA3 * (((char *)a3 - (char *)a2) >> 3);
          v65 = (_QWORD *)((char *)a1 + 88 * v62 + v11);
          v63 = a2;
          do
          {
            v66 = (_QWORD *)v63 + 11 * (v64 >> 1);
            v67 = (_BYTE *)v66[2];
            if (v67 && (*v67 & 4) != 0)
            {
              v70 = (uint64_t *)*((_QWORD *)v67 - 1);
              v71 = *v70;
              v68 = v70 + 2;
              v69 = v71;
            }
            else
            {
              v68 = 0;
              v69 = 0;
            }
            v72 = *(_QWORD *)((char *)v66 + 60);
            v73 = *((_BYTE *)v66 + 72);
            v74 = *((_BYTE *)v66 + 73);
            v75 = *((_DWORD *)v66 + 19);
            v76 = (_BYTE *)v65[2];
            v77 = *(_QWORD *)((char *)v65 + 60);
            v78 = *((_BYTE *)v65 + 72);
            v79 = *((_BYTE *)v65 + 73);
            v80 = *((_DWORD *)v65 + 19);
            *(_QWORD *)&v215 = v68;
            *((_QWORD *)&v215 + 1) = v69;
            *(_QWORD *)&v216 = v72;
            BYTE8(v216) = v73;
            BYTE9(v216) = v74;
            HIDWORD(v216) = v75;
            if (v76 && (*v76 & 4) != 0)
            {
              v83 = (_QWORD *)*((_QWORD *)v76 - 1);
              v84 = *v83;
              v81 = (void **)(v83 + 2);
              v82 = v84;
            }
            else
            {
              v81 = 0;
              v82 = 0;
            }
            v209 = v81;
            v210 = v82;
            v211 = v77;
            v212 = v78;
            v213 = v79;
            v214 = v80;
            v85 = sub_1C593BD50((uint64_t)&v215, (uint64_t)&v209);
            if (v85)
              v64 += ~(v64 >> 1);
            else
              v64 >>= 1;
            if (v85)
              v63 = (__int128 *)(v66 + 11);
          }
          while (v64);
        }
        v86 = v62;
        v35 = (__int128 *)((char *)a1 + 88 * v62 + v11);
        v198 = 0x2E8BA2E8BA2E8BA3 * (((char *)v63 - (char *)a2) >> 3);
        v61 = v35;
      }
      else
      {
        if (v203 >= 0)
          v33 = v203;
        else
          v33 = v203 + 1;
        v34 = v33 >> 1;
        v198 = v33 >> 1;
        if ((__int128 *)((char *)a1 + v11) == a2)
        {
          v61 = a2;
          v35 = a2;
        }
        else
        {
          v35 = (__int128 *)((char *)a1 + v11);
          v36 = 0x2E8BA2E8BA2E8BA3 * (((char *)a2 - (char *)a1 - v11) >> 3);
          v200 = a2;
          v37 = (_QWORD *)a2 + 11 * v34;
          v204 = (_BYTE **)(v37 + 2);
          v38 = (_QWORD *)((char *)v37 + 60);
          v39 = (char *)(v37 + 9);
          v40 = (char *)v37 + 73;
          v41 = (int *)v37 + 19;
          do
          {
            v42 = *v204;
            if (*v204 && (*v42 & 4) != 0)
            {
              v45 = (uint64_t *)*((_QWORD *)v42 - 1);
              v46 = *v45;
              v43 = v45 + 2;
              v44 = v46;
            }
            else
            {
              v43 = 0;
              v44 = 0;
            }
            v47 = *v38;
            v48 = *v39;
            v49 = (_QWORD *)v35 + 11 * (v36 >> 1);
            v50 = *v40;
            v51 = *v41;
            v52 = (_BYTE *)v49[2];
            v53 = *(_QWORD *)((char *)v49 + 60);
            v54 = *((_BYTE *)v49 + 72);
            v55 = *((_BYTE *)v49 + 73);
            v56 = *((_DWORD *)v49 + 19);
            *(_QWORD *)&v215 = v43;
            *((_QWORD *)&v215 + 1) = v44;
            *(_QWORD *)&v216 = v47;
            BYTE8(v216) = v48;
            BYTE9(v216) = v50;
            HIDWORD(v216) = v51;
            if (v52 && (*v52 & 4) != 0)
            {
              v59 = (_QWORD *)*((_QWORD *)v52 - 1);
              v60 = *v59;
              v57 = (void **)(v59 + 2);
              v58 = v60;
            }
            else
            {
              v57 = 0;
              v58 = 0;
            }
            v209 = v57;
            v210 = v58;
            v211 = v53;
            v212 = v54;
            v213 = v55;
            v214 = v56;
            if (sub_1C593BD50((uint64_t)&v215, (uint64_t)&v209))
            {
              v36 >>= 1;
            }
            else
            {
              v35 = (__int128 *)(v49 + 11);
              v36 += ~(v36 >> 1);
            }
            a1 = v207;
          }
          while (v36);
          v61 = v35;
          a2 = v200;
          v34 = v198;
        }
        v63 = (__int128 *)((char *)a2 + 88 * v34);
        v86 = 0x2E8BA2E8BA2E8BA3 * (((char *)v61 - (char *)a1 - v11) >> 3);
      }
      v87 = a2;
      v88 = v63;
      if (v35 != v87)
      {
        v88 = v61;
        if (v87 != v63)
        {
          v193 = v61;
          v194 = v86;
          v89 = (__int128 *)((char *)v61 + 88);
          v197 = (__int128 *)((char *)v61 + 88);
          v201 = v87;
          while (1)
          {
            v90 = *(__int128 *)((char *)v89 - 72);
            v215 = *(__int128 *)((char *)v89 - 88);
            v216 = v90;
            v205 = *(__int128 *)((char *)v89 - 56);
            v91 = *((_QWORD *)v89 - 5);
            *((_QWORD *)v89 - 7) = 0;
            *((_QWORD *)v89 - 6) = 0;
            *((_QWORD *)v89 - 5) = 0;
            v92 = *(v89 - 2);
            *(_OWORD *)&v220[9] = *(__int128 *)((char *)v89 - 23);
            *(_OWORD *)v220 = v92;
            v93 = *v87;
            *(__int128 *)((char *)v89 - 72) = v87[1];
            *(__int128 *)((char *)v89 - 88) = v93;
            sub_1C62B8D00((void **)v89 - 7);
            *(__int128 *)((char *)v89 - 56) = v87[2];
            *((_QWORD *)v89 - 5) = *((_QWORD *)v87 + 6);
            *((_QWORD *)v87 + 4) = 0;
            *((_QWORD *)v87 + 5) = 0;
            *((_QWORD *)v87 + 6) = 0;
            v94 = *(__int128 *)((char *)v87 + 56);
            *(__int128 *)((char *)v89 - 23) = *(__int128 *)((char *)v87 + 65);
            *(v89 - 2) = v94;
            v95 = v216;
            *v87 = v215;
            v87[1] = v95;
            sub_1C62B8D00((void **)v87 + 4);
            v87[2] = v205;
            *((_QWORD *)v87 + 6) = v91;
            v217 = 0;
            v218 = 0;
            v219 = 0;
            v96 = *(_OWORD *)v220;
            *(__int128 *)((char *)v87 + 65) = *(_OWORD *)&v220[9];
            *(__int128 *)((char *)v87 + 56) = v96;
            v209 = (void **)&v217;
            sub_1C515FCE0(&v209);
            v87 = (__int128 *)((char *)v87 + 88);
            if (v87 == v63)
              break;
            v97 = v201;
            if (v89 == v201)
              v97 = v87;
            v201 = v97;
            v89 = (__int128 *)((char *)v89 + 88);
            v197 = (__int128 *)((char *)v197 + 88);
          }
          v98 = v201;
          a1 = v207;
          if (v89 != v201)
          {
            do
            {
              while (1)
              {
                v99 = v89[1];
                v215 = *v89;
                v216 = v99;
                v206 = v89[2];
                v100 = *((_QWORD *)v89 + 6);
                *((_QWORD *)v89 + 4) = 0;
                *((_QWORD *)v89 + 5) = 0;
                *((_QWORD *)v89 + 6) = 0;
                v101 = *(__int128 *)((char *)v89 + 56);
                *(_OWORD *)&v220[9] = *(__int128 *)((char *)v89 + 65);
                *(_OWORD *)v220 = v101;
                v102 = v98[1];
                *v89 = *v98;
                v89[1] = v102;
                sub_1C62B8D00((void **)v89 + 4);
                v89[2] = v98[2];
                *((_QWORD *)v89 + 6) = *((_QWORD *)v98 + 6);
                *((_QWORD *)v98 + 4) = 0;
                *((_QWORD *)v98 + 5) = 0;
                *((_QWORD *)v98 + 6) = 0;
                v103 = *(__int128 *)((char *)v98 + 56);
                *(__int128 *)((char *)v89 + 65) = *(__int128 *)((char *)v98 + 65);
                *(__int128 *)((char *)v89 + 56) = v103;
                v104 = v216;
                *v98 = v215;
                v98[1] = v104;
                sub_1C62B8D00((void **)v98 + 4);
                v98[2] = v206;
                *((_QWORD *)v98 + 6) = v100;
                v217 = 0;
                v218 = 0;
                v219 = 0;
                v105 = *(_OWORD *)&v220[9];
                *(__int128 *)((char *)v98 + 56) = *(_OWORD *)v220;
                *(__int128 *)((char *)v98 + 65) = v105;
                v209 = (void **)&v217;
                sub_1C515FCE0(&v209);
                v89 = (__int128 *)((char *)v89 + 88);
                v98 = (__int128 *)((char *)v98 + 88);
                if (v98 == v63)
                  break;
                v106 = v201;
                if (v89 == v201)
                  v106 = v98;
                v201 = v106;
              }
              v98 = v201;
            }
            while (v89 != v201);
            a1 = v207;
          }
          v61 = v193;
          v86 = v194;
          v88 = v197;
        }
      }
      a4 = -(v86 + v15);
      v107 = v203 - v198;
      if (v86 + v198 >= v203 - (v86 + v198) - v15)
      {
        a4 = v86;
        sub_1C593B19C(v88, v63, a3, -(v86 + v15), v203 - v198, v196, a7);
        v63 = v35;
        a6 = v196;
        v107 = v198;
        a3 = v88;
        a1 = v195;
      }
      else
      {
        a6 = v196;
        sub_1C593B19C((char *)a1 + v11, v61, v88, v86, v198, v196, a7);
        a1 = v88;
      }
      v203 = v107;
      a2 = v63;
      if (!v107)
        return;
    }
    if (a4 <= v203)
    {
      if (a1 == a2)
        return;
      v139 = 0;
      v109 = 0;
      do
      {
        v140 = &a6[v139 / 8];
        v141 = (_QWORD *)((char *)a1 + v139);
        v142 = *(__int128 *)((char *)a1 + v139 + 16);
        *(_OWORD *)v140 = *(__int128 *)((char *)a1 + v139);
        *((_OWORD *)v140 + 1) = v142;
        v140[5] = 0;
        v140[6] = 0;
        v140[4] = 0;
        *((_OWORD *)v140 + 2) = *(__int128 *)((char *)a1 + v139 + 32);
        v140[6] = *(_QWORD *)((char *)a1 + v139 + 48);
        v141[4] = 0;
        v141[5] = 0;
        v141[6] = 0;
        v143 = *(__int128 *)((char *)a1 + v139 + 56);
        *(_OWORD *)((char *)v140 + 65) = *(__int128 *)((char *)a1 + v139 + 65);
        *(_OWORD *)(v140 + 7) = v143;
        ++v109;
        v139 += 88;
      }
      while (v141 + 11 != (_QWORD *)a2);
      if (v139)
      {
        v144 = &a6[v139 / 8];
        v145 = (uint64_t)&a6[v139 / 8 - 11];
        v146 = (__int128 *)((char *)a1 + 56);
        v147 = a6;
        while (a2 != a3)
        {
          v148 = (_BYTE *)*((_QWORD *)a2 + 2);
          if (v148 && (*v148 & 4) != 0)
          {
            v151 = (uint64_t *)*((_QWORD *)v148 - 1);
            v152 = *v151;
            v149 = v151 + 2;
            v150 = v152;
          }
          else
          {
            v149 = 0;
            v150 = 0;
          }
          v153 = *(_QWORD *)((char *)a2 + 60);
          v154 = *((_BYTE *)a2 + 72);
          v155 = *((_BYTE *)a2 + 73);
          v156 = *((_DWORD *)a2 + 19);
          v157 = (_BYTE *)v147[2];
          v158 = *(_QWORD *)((char *)v147 + 60);
          v159 = *((_BYTE *)v147 + 72);
          v160 = *((_BYTE *)v147 + 73);
          v161 = *((_DWORD *)v147 + 19);
          *(_QWORD *)&v215 = v149;
          *((_QWORD *)&v215 + 1) = v150;
          *(_QWORD *)&v216 = v153;
          BYTE8(v216) = v154;
          BYTE9(v216) = v155;
          HIDWORD(v216) = v156;
          if (v157 && (*v157 & 4) != 0)
          {
            v164 = (_QWORD *)*((_QWORD *)v157 - 1);
            v165 = *v164;
            v162 = (void **)(v164 + 2);
            v163 = v165;
          }
          else
          {
            v162 = 0;
            v163 = 0;
          }
          v166 = (_OWORD *)((char *)v146 - 56);
          v209 = v162;
          v210 = v163;
          v211 = v158;
          v212 = v159;
          v213 = v160;
          v214 = v161;
          v167 = sub_1C593BD50((uint64_t)&v215, (uint64_t)&v209);
          v168 = (void **)v146 - 3;
          if (v167)
          {
            v169 = a2[1];
            *v166 = *a2;
            *(_OWORD *)((char *)v146 - 40) = v169;
            sub_1C62B8D00(v168);
            *(_OWORD *)((char *)v146 - 24) = a2[2];
            *((_QWORD *)v146 - 1) = *((_QWORD *)a2 + 6);
            *((_QWORD *)a2 + 4) = 0;
            *((_QWORD *)a2 + 5) = 0;
            *((_QWORD *)a2 + 6) = 0;
            v170 = *(__int128 *)((char *)a2 + 56);
            *(_OWORD *)((char *)v146 + 9) = *(__int128 *)((char *)a2 + 65);
            *v146 = v170;
            a2 = (__int128 *)((char *)a2 + 88);
          }
          else
          {
            v171 = *((_OWORD *)v147 + 1);
            *v166 = *(_OWORD *)v147;
            *(_OWORD *)((char *)v146 - 40) = v171;
            sub_1C62B8D00(v168);
            *(_OWORD *)((char *)v146 - 24) = *((_OWORD *)v147 + 2);
            *((_QWORD *)v146 - 1) = v147[6];
            v147[4] = 0;
            v147[5] = 0;
            v147[6] = 0;
            v172 = *(_OWORD *)(v147 + 7);
            *(_OWORD *)((char *)v146 + 9) = *(_OWORD *)((char *)v147 + 65);
            *v146 = v172;
            v147 += 11;
          }
          v146 = (_OWORD *)((char *)v146 + 88);
          if (v144 == v147)
            goto LABEL_131;
        }
        if (v144 != v147)
        {
          v178 = 0;
          do
          {
            v179 = (_OWORD *)((char *)v146 + v178 * 8);
            v180 = &v147[v178];
            v181 = *(_OWORD *)&v147[v178];
            *(_OWORD *)((char *)v179 - 40) = *(_OWORD *)&v147[v178 + 2];
            *(_OWORD *)((char *)v179 - 56) = v181;
            sub_1C62B8D00((void **)((char *)v146 + v178 * 8 - 24));
            *(_OWORD *)((char *)v179 - 24) = *(_OWORD *)&v147[v178 + 4];
            *((_QWORD *)v179 - 1) = v147[v178 + 6];
            v180[4] = 0;
            v180[5] = 0;
            v180[6] = 0;
            v182 = *(_OWORD *)&v147[v178 + 7];
            *(_OWORD *)((char *)v179 + 9) = *(_OWORD *)((char *)&v147[v178 + 8] + 1);
            *v179 = v182;
            v178 += 11;
          }
          while ((_QWORD *)v145 != v180);
        }
      }
    }
    else
    {
      if (a2 == a3)
        return;
      v108 = 0;
      v109 = 0;
      do
      {
        v110 = &a6[v108 / 8];
        v111 = (_QWORD *)((char *)a2 + v108);
        v112 = *(__int128 *)((char *)a2 + v108 + 16);
        *(_OWORD *)v110 = *(__int128 *)((char *)a2 + v108);
        *((_OWORD *)v110 + 1) = v112;
        v110[5] = 0;
        v110[6] = 0;
        v110[4] = 0;
        *((_OWORD *)v110 + 2) = *(__int128 *)((char *)a2 + v108 + 32);
        v110[6] = *(_QWORD *)((char *)a2 + v108 + 48);
        v111[4] = 0;
        v111[5] = 0;
        v111[6] = 0;
        v113 = *(__int128 *)((char *)a2 + v108 + 56);
        *(_OWORD *)((char *)v110 + 65) = *(__int128 *)((char *)a2 + v108 + 65);
        *(_OWORD *)(v110 + 7) = v113;
        ++v109;
        v108 += 88;
      }
      while (v111 + 11 != (_QWORD *)a3);
      if (v108)
      {
        v114 = &a6[v108 / 8];
        v115 = (_QWORD *)a3 - 5;
        while (a2 != a1)
        {
          v116 = (_BYTE *)*((_QWORD *)v114 - 9);
          if (v116 && (*v116 & 4) != 0)
          {
            v119 = (uint64_t *)*((_QWORD *)v116 - 1);
            v120 = *v119;
            v117 = v119 + 2;
            v118 = v120;
          }
          else
          {
            v117 = 0;
            v118 = 0;
          }
          v121 = *(_QWORD *)(v114 - 28);
          v122 = *(v114 - 16);
          v123 = *(v114 - 15);
          v124 = *((_DWORD *)v114 - 3);
          v125 = (_BYTE *)*((_QWORD *)a2 - 9);
          v126 = *(_QWORD *)((char *)a2 - 28);
          v127 = *((_BYTE *)a2 - 16);
          v128 = *((_BYTE *)a2 - 15);
          v129 = *((_DWORD *)a2 - 3);
          *(_QWORD *)&v215 = v117;
          *((_QWORD *)&v215 + 1) = v118;
          *(_QWORD *)&v216 = v121;
          BYTE8(v216) = v122;
          BYTE9(v216) = v123;
          HIDWORD(v216) = v124;
          if (v125 && (*v125 & 4) != 0)
          {
            v132 = (_QWORD *)*((_QWORD *)v125 - 1);
            v133 = *v132;
            v130 = (void **)(v132 + 2);
            v131 = v133;
          }
          else
          {
            v130 = 0;
            v131 = 0;
          }
          v209 = v130;
          v210 = v131;
          v211 = v126;
          v212 = v127;
          v213 = v128;
          v214 = v129;
          v134 = sub_1C593BD50((uint64_t)&v215, (uint64_t)&v209);
          if (v134)
            v135 = (__int128 *)((char *)a2 - 88);
          else
            v135 = v114 - 88;
          v136 = v135[1];
          if (v134)
            v137 = a2;
          else
            v137 = (__int128 *)v114;
          if (v134)
            a2 = (__int128 *)((char *)a2 - 88);
          else
            v114 -= 88;
          *((_OWORD *)v115 - 3) = *v135;
          *((_OWORD *)v115 - 2) = v136;
          sub_1C62B8D00((void **)v115 - 2);
          *((_OWORD *)v115 - 1) = *(__int128 *)((char *)v137 - 56);
          *v115 = *((_QWORD *)v137 - 5);
          *((_QWORD *)v137 - 7) = 0;
          *((_QWORD *)v137 - 6) = 0;
          *((_QWORD *)v137 - 5) = 0;
          v138 = *(v137 - 2);
          *(_OWORD *)((char *)v115 + 17) = *(__int128 *)((char *)v137 - 23);
          *(_OWORD *)(v115 + 1) = v138;
          v115 -= 11;
          a1 = v207;
          if (v114 == (_BYTE *)a6)
            goto LABEL_131;
        }
        if (v114 != (_BYTE *)a6)
        {
          v173 = 0;
          do
          {
            v174 = &v114[v173];
            v175 = &v115[v173 / 8];
            v176 = *(_OWORD *)&v114[v173 - 72];
            *((_OWORD *)v175 - 3) = *(_OWORD *)&v114[v173 - 88];
            *((_OWORD *)v175 - 2) = v176;
            sub_1C62B8D00((void **)&v115[v173 / 8 - 2]);
            *((_OWORD *)v175 - 1) = *(_OWORD *)&v114[v173 - 56];
            *v175 = *(_QWORD *)&v114[v173 - 40];
            *(v174 - 7) = 0;
            *(v174 - 6) = 0;
            *(v174 - 5) = 0;
            v177 = *(_OWORD *)&v114[v173 - 32];
            *(_OWORD *)((char *)v175 + 17) = *(_OWORD *)&v114[v173 - 23];
            *(_OWORD *)(v175 + 1) = v177;
            v173 -= 88;
          }
          while (&v114[v173] != (_BYTE *)a6);
        }
      }
    }
LABEL_131:
    if (a6)
    {
      v183 = a6 + 4;
      do
      {
        *(_QWORD *)&v215 = v183;
        sub_1C515FCE0((void ***)&v215);
        v183 += 11;
        --v109;
      }
      while (v109);
    }
  }
}

BOOL sub_1C593BD50(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  const void *v7;
  const void *v8;
  int v9;
  int v11;
  BOOL v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 8);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = *(const void **)a2;
    v8 = *(const void **)a1;
    v9 = memcmp(*(const void **)a1, *(const void **)a2, v6);
    if (v9 < 0)
      return 1;
    if (!v9 && v4 < v5)
      return 1;
    v11 = memcmp(v7, v8, v6);
    if (v11 < 0)
      return 0;
    v12 = v11 || v5 == v4;
    if (!v12 && v5 < v4)
      return 0;
  }
  else
  {
    if (v4 < v5)
      return 1;
    if (v5 < v4)
      return 0;
  }
  v14 = *(_DWORD *)(a1 + 16);
  v15 = *(_DWORD *)(a2 + 16);
  if (v14 < v15)
    return 1;
  if (v15 < v14)
    return 0;
  v16 = *(_DWORD *)(a1 + 20);
  v17 = *(_DWORD *)(a2 + 20);
  if (v16 < v17)
    return 1;
  if (v17 < v16)
    return 0;
  v18 = *(unsigned __int8 *)(a1 + 24);
  v19 = *(unsigned __int8 *)(a2 + 24);
  if (v18 < v19)
    return 1;
  if (v19 < v18)
    return 0;
  v20 = *(unsigned __int8 *)(a1 + 25);
  v21 = *(unsigned __int8 *)(a2 + 25);
  if (v20 < v21)
    return 1;
  if (v21 < v20)
    return 0;
  return *(_DWORD *)(a1 + 28) < *(_DWORD *)(a2 + 28);
}

uint64_t sub_1C593BE7C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t result;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int i;
  BOOL v14;
  unsigned int v15;
  int v16;

  if (!a2)
  {
    v5 = 0;
    result = 0;
    goto LABEL_3;
  }
  v10 = sub_1C62B8D74((uint64_t *)a3, (int *)(a3 + 8), (int *)(a3 + 12), (char *)(a3 + 16), (char *)(a3 + 17), (int *)(a3 + 20), (char *)(a3 + 24));
  v11 = 0;
  v12 = (a2 - 1) & v10;
  for (i = 1; ; ++i)
  {
    v5 = a1 + 40 * v12;
    if (*(_QWORD *)a3 == *(_QWORD *)v5
      && *(_DWORD *)(a3 + 8) == *(_DWORD *)(v5 + 8)
      && *(_DWORD *)(a3 + 12) == *(_DWORD *)(v5 + 12)
      && *(unsigned __int8 *)(a3 + 16) == *(unsigned __int8 *)(v5 + 16)
      && *(unsigned __int8 *)(a3 + 17) == *(unsigned __int8 *)(v5 + 17)
      && *(_DWORD *)(a3 + 20) == *(_DWORD *)(v5 + 20)
      && *(unsigned __int8 *)(a3 + 24) == *(unsigned __int8 *)(v5 + 24))
    {
      result = 1;
      goto LABEL_3;
    }
    if (*(_QWORD *)v5)
      goto LABEL_13;
    v16 = *(_DWORD *)(v5 + 8);
    if (v16 != -1)
      break;
    if (*(_DWORD *)(v5 + 12) || *(_BYTE *)(v5 + 16) || *(_BYTE *)(v5 + 17) || *(_DWORD *)(v5 + 20) != 0x7FFFFFFF)
      goto LABEL_13;
    v14 = *(_BYTE *)(v5 + 24) == 0;
LABEL_14:
    if (v14 && v11 == 0)
      v11 = a1 + 40 * v12;
    v15 = v12 + i;
    v12 = v15 & (a2 - 1);
  }
  if (v16
    || *(_DWORD *)(v5 + 12) != -1
    || *(_BYTE *)(v5 + 16)
    || *(_BYTE *)(v5 + 17)
    || *(_DWORD *)(v5 + 20) != 0x7FFFFFFF
    || *(_BYTE *)(v5 + 24))
  {
LABEL_13:
    v14 = 0;
    goto LABEL_14;
  }
  result = 0;
  if (v11)
    v5 = v11;
LABEL_3:
  *a4 = v5;
  return result;
}

unint64_t sub_1C593C01C(char *a1, uint64_t a2, _BYTE *a3, char *a4, char a5, char *a6, int *a7, char *a8)
{
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v16;
  uint64_t v17;

  v16 = a2;
  v13 = sub_1C4ED4714(a1, &v16, a3, (unint64_t)a4, a5 != 0);
  v17 = v16;
  v14 = sub_1C4ED4714(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1C517CF20(a1, v17, v14, a4, a7, a8);
}

uint64_t llvm::MCELFObjectTargetWriter::MCELFObjectTargetWriter(uint64_t this, int a2, char a3, __int16 a4, char a5, char a6)
{
  char v6;

  *(_QWORD *)this = off_1E81803E0;
  *(_BYTE *)(this + 8) = a3;
  *(_BYTE *)(this + 9) = a6;
  *(_WORD *)(this + 10) = a4;
  if (a2)
    v6 = 2;
  else
    v6 = 0;
  *(_BYTE *)(this + 12) = v6 | a5 | *(_BYTE *)(this + 12) & 0xFC;
  return this;
}

uint64_t llvm::MCELFObjectTargetWriter::needsRelocateWithSymbol()
{
  return 0;
}

uint64_t sub_1C593C104()
{
  return 3;
}

BOOL llvm::MCELFStreamer::isBundleLocked(llvm::MCELFStreamer *this)
{
  return *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 32 * *((unsigned int *)this + 30) - 32) + 36) != 0;
}

uint64_t llvm::MCELFStreamer::emitSymbolAttribute(_QWORD *a1, llvm::MCSymbolELF *this, int a3)
{
  llvm::MCSymbolELF *v3;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  __int16 v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  int v20;
  int *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  llvm::MCSymbolELF *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  llvm::MCSymbolELF *v42;
  uint64_t v43;
  llvm::MCSymbolELF *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  llvm::MCSymbolELF *v52;
  uint64_t v53;
  const char *v54;
  __int16 v55;

  v3 = this;
  v5 = *((_DWORD *)this + 2);
  if ((v5 & 8) == 0)
  {
    v6 = a1[34];
    *((_DWORD *)this + 2) = v5 | 8;
    v52 = this;
    v7 = *(_QWORD **)(v6 + 64);
    if ((unint64_t)v7 >= *(_QWORD *)(v6 + 72))
    {
      v50 = a3;
      v51 = v6;
      v8 = sub_1C4DFEA3C((void **)(v6 + 56), &v52);
      v6 = v51;
      a3 = v50;
    }
    else
    {
      *v7 = this;
      v8 = v7 + 1;
    }
    *(_QWORD *)(v6 + 64) = v8;
  }
  result = 0;
  switch(a3)
  {
    case 0:
    case 1:
    case 11:
    case 13:
    case 15:
    case 18:
    case 20:
    case 22:
    case 24:
    case 26:
      return result;
    case 2:
      v14 = dword_1C8663184[*((_WORD *)v3 + 6) & 7];
      v15 = dword_1C8663170;
      do
      {
        v17 = *v15++;
        v16 = v17;
        if (v17 == 2)
          v18 = dword_1C8663184[*((_WORD *)v3 + 6) & 7];
        else
          v18 = (int)this;
        if (v16 == v14)
          LODWORD(this) = 2;
        else
          LODWORD(this) = v18;
      }
      while (v16 != v14 && v16 != 2);
      goto LABEL_63;
    case 3:
      v20 = dword_1C8663184[*((_WORD *)v3 + 6) & 7];
      v21 = dword_1C8663170;
      do
      {
        v23 = *v21++;
        v22 = v23;
        if (v23 == 10)
          v24 = dword_1C8663184[*((_WORD *)v3 + 6) & 7];
        else
          v24 = (int)this;
        if (v22 == v20)
          LODWORD(this) = 10;
        else
          LODWORD(this) = v24;
      }
      while (v22 != v20 && v22 != 10);
      goto LABEL_63;
    case 4:
    case 6:
      if ((*((_WORD *)v3 + 6) & 7) != 0)
        LODWORD(this) = dword_1C8663184[*((_WORD *)v3 + 6) & 7];
      else
        LODWORD(this) = 1;
      goto LABEL_63;
    case 5:
      v26 = 0;
      v27 = dword_1C8663184[*((_WORD *)v3 + 6) & 7];
      break;
    case 7:
      LODWORD(this) = dword_1C8663184[*((_WORD *)v3 + 6) & 7];
      goto LABEL_63;
    case 8:
      if ((*((_WORD *)v3 + 6) & 7) != 0)
        v31 = dword_1C8663184[*((_WORD *)v3 + 6) & 7];
      else
        v31 = 1;
      llvm::MCSymbolELF::setType((uint64_t)v3, v31);
      *((_WORD *)v3 + 6) |= 0x1018u;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1[34] + 24) + 56))(*(_QWORD *)(a1[34] + 24));
      return 1;
    case 9:
      if ((*((_WORD *)v3 + 6) & 0x1000) != 0 && llvm::MCSymbolELF::getBinding(v3) != 1)
      {
        v32 = a1[1];
        v33 = (uint64_t *)a1[32];
        if (v33)
          v34 = *v33;
        else
          v34 = 0;
        if ((*(_BYTE *)v3 & 4) != 0)
        {
          v46 = (uint64_t *)*((_QWORD *)v3 - 1);
          v47 = *v46;
          v42 = (llvm::MCSymbolELF *)(v46 + 2);
          v43 = v47;
        }
        else
        {
          v42 = 0;
          v43 = 0;
        }
        v55 = 773;
        v52 = v42;
        v53 = v43;
        v54 = " changed binding to STB_GLOBAL";
        llvm::MCContext::reportError(v32, v34, (uint64_t)&v52);
      }
      v10 = *((_WORD *)v3 + 6) & 0xEFE7 | 0x1008;
      goto LABEL_15;
    case 12:
      v10 = *((_WORD *)v3 + 6) & 0xFF9F | 0x40;
      goto LABEL_15;
    case 14:
      v10 = *((_WORD *)v3 + 6) & 0xFF9F | 0x20;
      goto LABEL_15;
    case 16:
      if ((*((_WORD *)v3 + 6) & 0x1000) != 0 && llvm::MCSymbolELF::getBinding(v3))
      {
        v35 = a1[1];
        v36 = (uint64_t *)a1[32];
        if (v36)
          v37 = *v36;
        else
          v37 = 0;
        if ((*(_BYTE *)v3 & 4) != 0)
        {
          v48 = (uint64_t *)*((_QWORD *)v3 - 1);
          v49 = *v48;
          v44 = (llvm::MCSymbolELF *)(v48 + 2);
          v45 = v49;
        }
        else
        {
          v44 = 0;
          v45 = 0;
        }
        v55 = 773;
        v52 = v44;
        v53 = v45;
        v54 = " changed binding to STB_LOCAL";
        llvm::MCContext::reportError(v35, v37, (uint64_t)&v52);
      }
      v10 = *((_WORD *)v3 + 6) & 0xEFE7 | 0x1000;
      goto LABEL_15;
    case 21:
      v10 = *((_WORD *)v3 + 6) | 0x60;
      goto LABEL_15;
    case 23:
    case 25:
      if ((*((_WORD *)v3 + 6) & 0x1000) != 0 && llvm::MCSymbolELF::getBinding(v3) != 2)
      {
        v11 = (_QWORD *)a1[1];
        v12 = (uint64_t *)a1[32];
        if (v12)
          v13 = *v12;
        else
          v13 = 0;
        if ((*(_BYTE *)v3 & 4) != 0)
        {
          v40 = (uint64_t *)*((_QWORD *)v3 - 1);
          v41 = *v40;
          v38 = (llvm::MCSymbolELF *)(v40 + 2);
          v39 = v41;
        }
        else
        {
          v38 = 0;
          v39 = 0;
        }
        v55 = 773;
        v52 = v38;
        v53 = v39;
        v54 = " changed binding to STB_WEAK";
        llvm::MCContext::reportWarning(v11, v13, (uint64_t)&v52);
      }
      v10 = *((_WORD *)v3 + 6) & 0xEFE7 | 0x1010;
LABEL_15:
      *((_WORD *)v3 + 6) = v10;
      return 1;
    default:
      return 1;
  }
  while (1)
  {
    v28 = dword_1C8663170[v26];
    v29 = v28 == 6 ? dword_1C8663184[*((_WORD *)v3 + 6) & 7] : (int)this;
    LODWORD(this) = v28 == v27 ? 6 : v29;
    if (v28 == v27 || v28 == 6)
      break;
    if (++v26 == 5)
    {
      LODWORD(this) = 6;
      break;
    }
  }
LABEL_63:
  llvm::MCSymbolELF::setType((uint64_t)v3, (int)this);
  return 1;
}

llvm::MCELFStreamer *llvm::MCELFStreamer::fixSymbolsInTLSFixups(llvm::MCELFStreamer *result, uint64_t a2)
{
  llvm::MCELFStreamer *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v3 = result;
  while (2)
  {
    switch(*(_BYTE *)a2)
    {
      case 0:
        result = (llvm::MCELFStreamer *)llvm::MCELFStreamer::fixSymbolsInTLSFixups(v3, *(const llvm::MCExpr **)(a2 + 16));
        v4 = (uint64_t *)(a2 + 24);
        goto LABEL_5;
      case 2:
        switch(*(_WORD *)(a2 + 1))
        {
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x10:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x43:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x49:
          case 0x4A:
          case 0x4B:
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x4F:
          case 0x50:
          case 0x51:
          case 0x52:
          case 0x53:
          case 0x54:
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
          case 0x59:
          case 0x5A:
          case 0x5B:
          case 0x5C:
          case 0x5D:
          case 0x5E:
          case 0x5F:
          case 0x60:
          case 0x61:
          case 0x62:
          case 0x63:
          case 0x66:
          case 0x67:
          case 0x68:
          case 0x69:
          case 0x6B:
          case 0x6D:
          case 0x6E:
          case 0x6F:
            goto LABEL_7;
          case 0xC:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x17:
          case 0x18:
          case 0x19:
          case 0x1A:
          case 0x1B:
          case 0x1C:
          case 0x1D:
          case 0x1E:
          case 0x1F:
          case 0x20:
          case 0x21:
          case 0x22:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x26:
          case 0x27:
          case 0x28:
          case 0x29:
          case 0x2A:
          case 0x2B:
          case 0x2C:
          case 0x2D:
          case 0x2E:
          case 0x2F:
          case 0x30:
          case 0x31:
          case 0x32:
          case 0x33:
          case 0x34:
          case 0x35:
          case 0x36:
          case 0x37:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x3D:
          case 0x3E:
          case 0x3F:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x64:
          case 0x65:
          case 0x6A:
          case 0x6C:
            return result;
          default:
            if (*(unsigned __int16 *)(a2 + 1) - 158 < 2)
            {
LABEL_7:
              v5 = *(_QWORD *)(a2 + 16);
              v6 = *(_DWORD *)(v5 + 8);
              if ((v6 & 8) == 0)
              {
                v7 = *((_QWORD *)v3 + 34);
                *(_DWORD *)(v5 + 8) = v6 | 8;
                v9 = v5;
                v8 = *(_QWORD **)(v7 + 64);
                if ((unint64_t)v8 >= *(_QWORD *)(v7 + 72))
                {
                  result = (llvm::MCELFStreamer *)sub_1C4DFEA3C((void **)(v7 + 56), &v9);
                }
                else
                {
                  *v8 = v5;
                  result = (llvm::MCELFStreamer *)(v8 + 1);
                }
                *(_QWORD *)(v7 + 64) = result;
                v5 = *(_QWORD *)(a2 + 16);
              }
              *(_WORD *)(v5 + 12) = *(_WORD *)(v5 + 12) & 0xFFF8 | 5;
            }
            break;
        }
        return result;
      case 3:
        v4 = (uint64_t *)(a2 + 16);
LABEL_5:
        a2 = *v4;
        continue;
      case 4:
        return (llvm::MCELFStreamer *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a2 - 8) + 72))(a2 - 8, *((_QWORD *)v3 + 34));
      default:
        return result;
    }
  }
}

BOOL sub_1C593C604(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;

  v1 = *(unsigned int *)(a1 + 120);
  if (v1 >= 2)
  {
    v3 = *(_QWORD *)(a1 + 112) + 32 * v1;
    v4 = *(_QWORD *)(v3 - 64);
    if (v4)
    {
      v5 = *(_QWORD *)(v3 - 32) == v4 && *(_QWORD *)(v3 - 24) == *(_QWORD *)(v3 - 56);
      v6 = *(_DWORD *)(a1 + 120);
      if (!v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
        v6 = *(_DWORD *)(a1 + 120);
      }
    }
    else
    {
      v6 = *(_DWORD *)(a1 + 120);
    }
    *(_DWORD *)(a1 + 120) = v6 - 1;
  }
  return v1 > 1;
}

void llvm::MCELFStreamer::emitInstToData(uint64_t a1, uint64_t a2, const llvm::MCSubtargetInfo *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t DataFragment;
  const llvm::MCSubtargetInfo *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  llvm::MCFragment *v40;
  void *v41;
  void *v42;
  uint64_t *v43;
  uint64_t v44;
  size_t v45;
  void *v46;
  uint64_t v47;
  int v48;
  _DWORD *v49;
  _DWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  _DWORD *v62;
  llvm::MCSymbol **v63;
  uint64_t v64;
  llvm::MCSymbol *v65;
  _DWORD *v66;
  llvm::MCSymbol **v67;
  uint64_t v68;
  llvm::MCSymbol *v69;
  _QWORD v70[2];
  uint64_t v71;
  int v72;
  void *v73;
  __int128 v74;
  _BYTE v75[256];
  uint64_t *v76;
  uint64_t v77;
  _QWORD v78[14];

  v78[12] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 272);
  v76 = v78;
  v77 = 0x400000000;
  v73 = v75;
  v74 = xmmword_1C64638F0;
  sub_1C613932C((uint64_t)v70, (uint64_t)&v73);
  (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t **, const llvm::MCSubtargetInfo *))(**(_QWORD **)(v6 + 16)
                                                                                               + 32))(*(_QWORD *)(v6 + 16), a2, v70, &v76, a3);
  if ((_DWORD)v77)
  {
    v7 = v76;
    v8 = 24 * v77;
    do
    {
      v9 = *v7;
      v7 += 3;
      llvm::MCELFStreamer::fixSymbolsInTLSFixups((llvm::MCELFStreamer *)a1, v9);
      v8 -= 24;
    }
    while (v8);
  }
  if (!*(_DWORD *)(v6 + 496))
  {
    DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment((llvm::MCObjectStreamer *)a1, a3);
    goto LABEL_33;
  }
  v10 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v10)
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v10 - 32);
  else
    v11 = 0;
  if ((*(_BYTE *)(v6 + 500) & 1) == 0)
  {
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v10 - 32) + 36))
    {
      if ((*(_BYTE *)(v11 + 44) & 1) == 0)
      {
        DataFragment = **(_QWORD **)(a1 + 280);
        goto LABEL_15;
      }
LABEL_21:
      DataFragment = operator new();
      *(_OWORD *)DataFragment = 0u;
      *(_OWORD *)(DataFragment + 16) = 0u;
      *(_QWORD *)(DataFragment + 32) = -1;
      *(_QWORD *)(DataFragment + 40) = 0;
      *(_BYTE *)(DataFragment + 48) = 1;
      *(_DWORD *)(DataFragment + 49) = 0;
      *(_QWORD *)(DataFragment + 56) = 0;
      *(_QWORD *)(DataFragment + 64) = DataFragment + 88;
      *(_OWORD *)(DataFragment + 72) = xmmword_1C677F680;
      *(_QWORD *)(DataFragment + 120) = DataFragment + 136;
      *(_QWORD *)(DataFragment + 128) = 0x400000000;
      v15 = *(unsigned int *)(a1 + 120);
      if (!(_DWORD)v15)
        goto LABEL_28;
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v15 - 32);
      if (v16)
      {
        v17 = *(unsigned int *)(a1 + 304);
        if ((_DWORD)v17)
        {
          v63 = *(llvm::MCSymbol ***)(a1 + 296);
          v64 = 8 * v17;
          do
          {
            v65 = *v63++;
            llvm::MCSection::addPendingLabel((_DWORD *)v16, v65, *(_DWORD *)(a1 + 416));
            v64 -= 8;
          }
          while (v64);
          *(_DWORD *)(a1 + 304) = 0;
        }
        v18 = *(_DWORD *)(v16 + 160);
        if (v18)
        {
          v48 = *(_DWORD *)(a1 + 416);
          v49 = *(_DWORD **)(v16 + 152);
          v50 = v49;
          do
          {
            if (v50[2] == v48)
            {
              v51 = *(uint64_t **)v50;
              *v51 = **(_QWORD **)v50 & 7 | DataFragment;
              v51[3] = 0;
              *((_DWORD *)v51 + 2) = v51[1] & 0xFFFFE3FF | 0x400;
              v49 = *(_DWORD **)(v16 + 152);
              v52 = *(unsigned int *)(v16 + 160);
              v53 = (char *)&v49[4 * v52] - (char *)(v50 + 4);
              if (v53)
              {
                memmove(v50, v50 + 4, v53 - 4);
                LODWORD(v52) = *(_DWORD *)(v16 + 160);
                v49 = *(_DWORD **)(v16 + 152);
              }
              v50 -= 4;
              v18 = v52 - 1;
              *(_DWORD *)(v16 + 160) = v18;
            }
            v50 += 4;
          }
          while (v50 != &v49[4 * v18]);
        }
      }
      v19 = *(unsigned int *)(a1 + 120);
      if ((_DWORD)v19)
        v20 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v19 - 32);
      else
LABEL_28:
        v20 = 0;
      v21 = *(uint64_t **)(a1 + 280);
      v22 = *v21;
      *(_QWORD *)DataFragment = *v21;
      *(_QWORD *)(DataFragment + 8) = v21;
      *(_QWORD *)(v22 + 8) = DataFragment;
      *v21 = DataFragment;
      *(_QWORD *)(DataFragment + 16) = v20;
      goto LABEL_30;
    }
    if ((_DWORD)v77)
      goto LABEL_21;
    v31 = operator new();
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)(v31 + 16) = 0u;
    *(_QWORD *)(v31 + 32) = -1;
    *(_QWORD *)(v31 + 40) = 0;
    *(_DWORD *)(v31 + 48) = 65538;
    *(_BYTE *)(v31 + 52) = 0;
    *(_QWORD *)(v31 + 56) = 0;
    v32 = (void *)(v31 + 88);
    *(_QWORD *)(v31 + 64) = v31 + 88;
    v33 = v31 + 64;
    *(_OWORD *)(v31 + 72) = xmmword_1C6612EF0;
    v34 = *(unsigned int *)(a1 + 120);
    if (!(_DWORD)v34)
      goto LABEL_61;
    v35 = *(_DWORD **)(*(_QWORD *)(a1 + 112) + 32 * v34 - 32);
    if (v35)
    {
      v36 = *(unsigned int *)(a1 + 304);
      if ((_DWORD)v36)
      {
        v66 = v35;
        v67 = *(llvm::MCSymbol ***)(a1 + 296);
        v68 = 8 * v36;
        do
        {
          v69 = *v67++;
          llvm::MCSection::addPendingLabel(v66, v69, *(_DWORD *)(a1 + 416));
          v68 -= 8;
        }
        while (v68);
        *(_DWORD *)(a1 + 304) = 0;
        v32 = (void *)(v31 + 88);
        v33 = v31 + 64;
        v35 = v66;
      }
      v37 = v35[40];
      if (v37)
      {
        v54 = *(_DWORD *)(a1 + 416);
        v55 = (_DWORD *)*((_QWORD *)v35 + 19);
        v56 = v55;
        do
        {
          if (v56[2] == v54)
          {
            v57 = *(uint64_t **)v56;
            *v57 = **(_QWORD **)v56 & 7 | v31;
            v57[3] = 0;
            *((_DWORD *)v57 + 2) = v57[1] & 0xFFFFE3FF | 0x400;
            v55 = (_DWORD *)*((_QWORD *)v35 + 19);
            v58 = v35[40];
            v59 = (char *)&v55[4 * v58] - (char *)(v56 + 4);
            if (v59)
            {
              v60 = v33;
              v61 = v32;
              v62 = v35;
              memmove(v56, v56 + 4, v59 - 4);
              v35 = v62;
              v33 = v60;
              v32 = v61;
              LODWORD(v58) = v62[40];
              v55 = (_DWORD *)*((_QWORD *)v62 + 19);
            }
            v56 -= 4;
            v37 = v58 - 1;
            v35[40] = v58 - 1;
          }
          v56 += 4;
        }
        while (v56 != &v55[4 * v37]);
      }
    }
    v38 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v38)
      v39 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v38 - 32);
    else
LABEL_61:
      v39 = 0;
    v43 = *(uint64_t **)(a1 + 280);
    v44 = *v43;
    *(_QWORD *)v31 = *v43;
    *(_QWORD *)(v31 + 8) = v43;
    *(_QWORD *)(v44 + 8) = v31;
    *v43 = v31;
    *(_QWORD *)(v31 + 16) = v39;
    v46 = v73;
    v45 = v74;
    v47 = *(_QWORD *)(v31 + 72);
    if (*(_QWORD *)(v31 + 80) < (unint64_t)(v47 + v74))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(v33, v32, v47 + v74, 1);
      v47 = *(_QWORD *)(v31 + 72);
      if (!v45)
        goto LABEL_65;
    }
    else if (!(_QWORD)v74)
    {
LABEL_65:
      *(_QWORD *)(v31 + 72) = v47 + v45;
      *(_BYTE *)(v31 + 50) = 1;
      *(_QWORD *)(v31 + 56) = a3;
      goto LABEL_42;
    }
    memcpy((void *)(*(_QWORD *)(v31 + 64) + v47), v46, v45);
    v47 = *(_QWORD *)(v31 + 72);
    goto LABEL_65;
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v10 - 32) + 36))
  {
    DataFragment = *(_QWORD *)(*(_QWORD *)(a1 + 5704) + 8 * *(unsigned int *)(a1 + 5712) - 8);
LABEL_15:
    v13 = *(const llvm::MCSubtargetInfo **)(DataFragment + 56);
    if (v13)
      v14 = v13 == a3;
    else
      v14 = 1;
    if (!v14)
      llvm::report_fatal_error((llvm *)"A Bundle can only have one Subtarget.", (const char *)1);
    goto LABEL_30;
  }
  DataFragment = operator new();
  *(_OWORD *)DataFragment = 0u;
  *(_OWORD *)(DataFragment + 16) = 0u;
  *(_QWORD *)(DataFragment + 32) = -1;
  *(_QWORD *)(DataFragment + 40) = 0;
  *(_BYTE *)(DataFragment + 48) = 1;
  *(_DWORD *)(DataFragment + 49) = 0;
  *(_QWORD *)(DataFragment + 56) = 0;
  *(_QWORD *)(DataFragment + 64) = DataFragment + 88;
  *(_OWORD *)(DataFragment + 72) = xmmword_1C677F680;
  *(_QWORD *)(DataFragment + 120) = DataFragment + 136;
  *(_QWORD *)(DataFragment + 128) = 0x400000000;
LABEL_30:
  if (*(_DWORD *)(v11 + 36) == 2)
    *(_BYTE *)(DataFragment + 51) = 1;
  *(_BYTE *)(v11 + 44) &= ~1u;
LABEL_33:
  if ((_DWORD)v77)
  {
    v23 = v76;
    v24 = 24 * v77;
    do
    {
      *((_DWORD *)v23 + 2) += *(_DWORD *)(DataFragment + 72);
      v25 = sub_1C4926708(DataFragment + 120, (unint64_t)v23, 1);
      v26 = *(_QWORD *)(DataFragment + 120) + 24 * *(unsigned int *)(DataFragment + 128);
      v27 = *(_OWORD *)v25;
      *(_QWORD *)(v26 + 16) = *(_QWORD *)(v25 + 16);
      *(_OWORD *)v26 = v27;
      ++*(_DWORD *)(DataFragment + 128);
      v23 += 3;
      v24 -= 24;
    }
    while (v24);
  }
  *(_BYTE *)(DataFragment + 50) = 1;
  *(_QWORD *)(DataFragment + 56) = a3;
  v29 = v73;
  v28 = v74;
  v30 = *(_QWORD *)(DataFragment + 72);
  if (*(_QWORD *)(DataFragment + 80) < (unint64_t)(v30 + v74))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(DataFragment + 64, (void *)(DataFragment + 88), v30 + v74, 1);
    v30 = *(_QWORD *)(DataFragment + 72);
    if (!v28)
      goto LABEL_39;
    goto LABEL_38;
  }
  if ((_QWORD)v74)
  {
LABEL_38:
    memcpy((void *)(*(_QWORD *)(DataFragment + 64) + v30), v29, v28);
    v30 = *(_QWORD *)(DataFragment + 72);
  }
LABEL_39:
  *(_QWORD *)(DataFragment + 72) = v30 + v28;
  if (*(_DWORD *)(v6 + 496)
    && (*(_BYTE *)(v6 + 500) & 1) != 0
    && !*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * *(unsigned int *)(a1 + 120) - 32) + 36))
  {
    v40 = (llvm::MCFragment *)llvm::MCObjectStreamer::getOrCreateDataFragment((llvm::MCObjectStreamer *)a1, a3);
    llvm::MCELFStreamer::mergeFragment((llvm::MCObjectStreamer *)a1, v40, DataFragment);
    v41 = *(void **)(DataFragment + 120);
    if (v41 != (void *)(DataFragment + 136))
      free(v41);
    v42 = *(void **)(DataFragment + 64);
    if (v42 != (void *)(DataFragment + 88))
      free(v42);
    MEMORY[0x1CAA32FC0](DataFragment, 0x10E0C400AE5E4C8);
  }
LABEL_42:
  v70[0] = off_1E81A6E70;
  if (v72 == 1 && v71)
    MEMORY[0x1CAA32F9C](v71, 0x1000C8077774924);
  if (v73 != v75)
    free(v73);
  if (v76 != v78)
    free(v76);
}

void llvm::MCELFStreamer::createAttributesSection(llvm::MCStreamer *a1, uint64_t a2, uint64_t a3, llvm::Twine *a4, int a5, unint64_t *a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v13;
  unint64_t ELFSection;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  void **v20;
  __int128 v21;
  __int128 *p_p;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 __p;
  uint64_t v30;

  if (*a6)
  {
    v11 = (*(uint64_t (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, *a6, 0);
  }
  else
  {
    v13 = *((_QWORD *)a1 + 1);
    LOWORD(v30) = 257;
    ELFSection = llvm::MCContext::getELFSection(v13, a4, a5, 0, 0, (unsigned __int8 *)&v27, 0, -1, 0);
    *a6 = ELFSection;
    (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a1 + 168))(a1, ELFSection, 0);
    v11 = (*(uint64_t (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 65, 1);
  }
  v15 = llvm::MCELFStreamer::calculateContentSize(v11, a7);
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, a3 + v15 + 10, 4);
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 488))(a1, a2, a3);
  (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a1 + 512))(a1, 0, 1);
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, 1, 1);
  (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, v15 + 5, 4);
  if (*(_DWORD *)(a7 + 8))
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = *(_QWORD *)a7 + v16;
      v19 = *(_DWORD *)(v18 + 8);
      v27 = *(_QWORD *)v18;
      LODWORD(v28) = v19;
      v20 = (void **)(v18 + 16);
      if (*(char *)(v18 + 39) < 0)
      {
        sub_1C47EBC30(&__p, *v20, *(_QWORD *)(v18 + 24));
      }
      else
      {
        v21 = *(_OWORD *)v20;
        v30 = *(_QWORD *)(v18 + 32);
        __p = v21;
      }
      llvm::MCStreamer::emitULEB128IntValue(a1, HIDWORD(v27), 0);
      if ((_DWORD)v27 == 1)
      {
        llvm::MCStreamer::emitULEB128IntValue(a1, v28, 0);
      }
      else
      {
        if ((_DWORD)v27 != 2)
          llvm::MCStreamer::emitULEB128IntValue(a1, v28, 0);
        if (v30 >= 0)
          p_p = &__p;
        else
          p_p = (__int128 *)__p;
        if (v30 >= 0)
          v23 = HIBYTE(v30) & 0x7F;
        else
          v23 = *((_QWORD *)&__p + 1);
        (*(void (**)(llvm::MCStreamer *, __int128 *, uint64_t))(*(_QWORD *)a1 + 488))(a1, p_p, v23);
        (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a1 + 512))(a1, 0, 1);
      }
      if (SHIBYTE(v30) < 0)
        operator delete((void *)__p);
      ++v17;
      v24 = *(unsigned int *)(a7 + 8);
      v16 += 40;
    }
    while (v17 < v24);
    if ((_DWORD)v24)
    {
      v25 = *(_QWORD *)a7;
      v26 = 40 * v24;
      do
      {
        if (*(char *)(v25 + v26 - 1) < 0)
          operator delete(*(void **)(v25 + v26 - 24));
        v26 -= 40;
      }
      while (v26);
    }
  }
  *(_DWORD *)(a7 + 8) = 0;
}

void llvm::MCELFStreamer::setAttributeItem(llvm::MCELFStreamer *this, int a2, int a3, int a4)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  void *__p;
  char v9;

  v4 = *((unsigned int *)this + 138);
  if ((_DWORD)v4)
  {
    v5 = (_DWORD *)(*((_QWORD *)this + 68) + 8);
    while (*(v5 - 1) != a2)
    {
      v5 += 10;
      if (!--v4)
        goto LABEL_5;
    }
    if (a4)
    {
      *(v5 - 2) = 1;
      *v5 = a3;
    }
  }
  else
  {
LABEL_5:
    LODWORD(v6) = 1;
    HIDWORD(v6) = a2;
    v7 = a3;
    v9 = 0;
    LOBYTE(__p) = 0;
    sub_1C593D108((uint64_t)this + 544, &v6);
    if (v9 < 0)
      operator delete(__p);
  }
}

uint64_t llvm::MCELFStreamer::getAttributeItem(llvm::MCELFStreamer *this, int a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((unsigned int *)this + 138);
  if (!(_DWORD)v2)
    return 0;
  for (result = *((_QWORD *)this + 68); *(_DWORD *)(result + 4) != a2; result += 40)
  {
    if (!--v2)
      return 0;
  }
  return result;
}

_BYTE *sub_1C593D108(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *result;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v10 = v4 + 1;
    v11 = v5 + 40 * v4;
    if (v5 <= (unint64_t)a2 && v11 > (unint64_t)a2)
    {
      v13 = (uint64_t)a2 - v5;
      sub_1C62BA3C8(a1, v10);
      v5 = *(_QWORD *)a1;
      a2 = (uint64_t *)(*(_QWORD *)a1 + v13);
    }
    else
    {
      sub_1C62BA3C8(a1, v10);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + 40 * *(unsigned int *)(a1 + 8);
  v7 = *a2;
  *(_DWORD *)(v6 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v6 = v7;
  result = (_BYTE *)(v6 + 16);
  if (*((char *)a2 + 39) < 0)
  {
    result = sub_1C47EBC30(result, (void *)a2[2], a2[3]);
  }
  else
  {
    v9 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(v6 + 32) = a2[4];
    *(_OWORD *)result = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

double llvm::MCELFStreamer::setAttributeItem(uint64_t a1, unsigned int a2, const void *a3, size_t a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  __int128 *p_dst;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  __int128 __dst;
  void *__p[2];
  unint64_t v20;

  v8 = *(unsigned int *)(a1 + 552);
  if (!(_DWORD)v8)
  {
LABEL_5:
    LODWORD(__dst) = 2;
    *(_QWORD *)((char *)&__dst + 4) = a2;
    if (a4 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_28;
    if (a4 >= 0x17)
    {
      v11 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a4 | 7) != 0x17)
        v11 = a4 | 7;
      v12 = v11 + 1;
      v10 = operator new(v11 + 1);
      __p[1] = (void *)a4;
      v20 = v12 | 0x8000000000000000;
      __p[0] = v10;
    }
    else
    {
      v10 = __p;
      HIBYTE(v20) = a4;
      if (!a4)
      {
LABEL_13:
        *((_BYTE *)v10 + a4) = 0;
        sub_1C593D108(a1 + 544, (uint64_t *)&__dst);
        if (SHIBYTE(v20) < 0)
          operator delete(__p[0]);
        return result;
      }
    }
    memmove(v10, a3, a4);
    goto LABEL_13;
  }
  v9 = *(_QWORD *)(a1 + 544);
  while (*(_DWORD *)(v9 + 4) != a2)
  {
    v9 += 40;
    if (!--v8)
      goto LABEL_5;
  }
  if (a5)
  {
    *(_DWORD *)v9 = 2;
    if (a4 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a4 >= 0x17)
      {
        v15 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a4 | 7) != 0x17)
          v15 = a4 | 7;
        v16 = v15 + 1;
        p_dst = (__int128 *)operator new(v15 + 1);
        *((_QWORD *)&__dst + 1) = a4;
        __p[0] = (void *)(v16 | 0x8000000000000000);
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(__p[0]) = a4;
        p_dst = &__dst;
        if (!a4)
          goto LABEL_24;
      }
      memmove(p_dst, a3, a4);
LABEL_24:
      *((_BYTE *)p_dst + a4) = 0;
      v17 = (void **)(v9 + 16);
      if (*(char *)(v9 + 39) < 0)
        operator delete(*v17);
      result = *(double *)&__dst;
      *(_OWORD *)v17 = __dst;
      *(void **)(v9 + 32) = __p[0];
      return result;
    }
LABEL_28:
    abort();
  }
  return result;
}

double llvm::MCELFStreamer::setAttributeItems(uint64_t a1, unsigned int a2, unsigned int a3, const void *a4, size_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  __int128 __dst;
  void *__p[2];
  unint64_t v21;

  v9 = *(unsigned int *)(a1 + 552);
  if (!(_DWORD)v9)
  {
LABEL_5:
    LODWORD(__dst) = 3;
    *(_QWORD *)((char *)&__dst + 4) = __PAIR64__(a3, a2);
    if (a5 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_28;
    if (a5 >= 0x17)
    {
      v12 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a5 | 7) != 0x17)
        v12 = a5 | 7;
      v13 = v12 + 1;
      v11 = operator new(v12 + 1);
      __p[1] = (void *)a5;
      v21 = v13 | 0x8000000000000000;
      __p[0] = v11;
    }
    else
    {
      v11 = __p;
      HIBYTE(v21) = a5;
      if (!a5)
      {
LABEL_13:
        *((_BYTE *)v11 + a5) = 0;
        sub_1C593D108(a1 + 544, (uint64_t *)&__dst);
        if (SHIBYTE(v21) < 0)
          operator delete(__p[0]);
        return result;
      }
    }
    memmove(v11, a4, a5);
    goto LABEL_13;
  }
  v10 = *(_QWORD *)(a1 + 544);
  while (*(_DWORD *)(v10 + 4) != a2)
  {
    v10 += 40;
    if (!--v9)
      goto LABEL_5;
  }
  if (a6)
  {
    *(_DWORD *)v10 = 3;
    *(_DWORD *)(v10 + 8) = a3;
    if (a5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (a5 >= 0x17)
      {
        v16 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((a5 | 7) != 0x17)
          v16 = a5 | 7;
        v17 = v16 + 1;
        p_dst = (__int128 *)operator new(v16 + 1);
        *((_QWORD *)&__dst + 1) = a5;
        __p[0] = (void *)(v17 | 0x8000000000000000);
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(__p[0]) = a5;
        p_dst = &__dst;
        if (!a5)
          goto LABEL_24;
      }
      memmove(p_dst, a4, a5);
LABEL_24:
      *((_BYTE *)p_dst + a5) = 0;
      v18 = (void **)(v10 + 16);
      if (*(char *)(v10 + 39) < 0)
        operator delete(*v18);
      result = *(double *)&__dst;
      *(_OWORD *)v18 = __dst;
      *(void **)(v10 + 32) = __p[0];
      return result;
    }
LABEL_28:
    abort();
  }
  return result;
}

uint64_t llvm::MCELFStreamer::calculateContentSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  __int128 v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int v23;
  __int128 __p;
  uint64_t v25;

  if (*(_DWORD *)(a2 + 8))
  {
    v3 = 0;
    v4 = 0;
    while (1)
    {
      v5 = *(_QWORD *)a2 + 40 * v3;
      v22 = *(_QWORD *)v5;
      v23 = *(_DWORD *)(v5 + 8);
      v6 = (void **)(v5 + 16);
      if (*(char *)(v5 + 39) < 0)
      {
        sub_1C47EBC30(&__p, *v6, *(_QWORD *)(*(_QWORD *)a2 + 40 * v3 + 24));
      }
      else
      {
        v7 = *(_OWORD *)v6;
        v25 = *(_QWORD *)(v5 + 32);
        __p = v7;
      }
      if ((_DWORD)v22 == 3)
        break;
      if ((_DWORD)v22 == 2)
      {
        v19 = HIDWORD(v22);
        v17 = v4 + 1;
        do
        {
          ++v17;
          v11 = v19 > 0x7F;
          v19 >>= 7;
        }
        while (v11);
LABEL_23:
        v20 = HIBYTE(v25) & 0x7F;
        if (v25 < 0)
          v20 = *((_QWORD *)&__p + 1);
        v4 = v20 + v17;
        goto LABEL_26;
      }
      if ((_DWORD)v22 == 1)
      {
        v8 = 0;
        v9 = HIDWORD(v22);
        v10 = v4 + 1;
        do
        {
          v4 = v10;
          ++v8;
          ++v10;
          v11 = v9 > 0x7F;
          v9 >>= 7;
        }
        while (v11);
        v12 = v23;
        do
        {
          ++v4;
          v13 = v12 >= 0x80;
          v12 >>= 7;
        }
        while (v13);
      }
LABEL_26:
      if (SHIBYTE(v25) < 0)
        operator delete((void *)__p);
      if (++v3 >= (unint64_t)*(unsigned int *)(a2 + 8))
        return v4;
    }
    v14 = HIDWORD(v22);
    v15 = v4 + 1;
    v16 = v4 + 2;
    do
    {
      v17 = v16;
      ++v15;
      ++v16;
      v11 = v14 > 0x7F;
      v14 >>= 7;
    }
    while (v11);
    v18 = v23;
    do
    {
      ++v17;
      v11 = v18 > 0x7F;
      v18 >>= 7;
    }
    while (v11);
    goto LABEL_23;
  }
  return 0;
}

uint64_t sub_1C593D6AC()
{
  return 1;
}

void sub_1C593D6B4(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  int v4;
  void *__p;
  char v6;

  LODWORD(v3) = 1;
  HIDWORD(v3) = a2;
  v4 = a3;
  v6 = 0;
  LOBYTE(__p) = 0;
  sub_1C593D108(a1 + 3120, &v3);
  if (v6 < 0)
    operator delete(__p);
}

void sub_1C593D6FC(uint64_t a1, int a2)
{
  int v3;
  int v4;
  uint64_t v5;

  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    v3 = *(_DWORD *)(a1 + 8);
    if ((v3 & 0x1C00) == 0x800)
    {
      if (a2 | ((v3 & 4) >> 2))
        v4 = 4;
      else
        v4 = 0;
      *(_DWORD *)(a1 + 8) = v4 | v3 & 0xFFFFFFFB;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 24));
      *(_QWORD *)a1 = *(_QWORD *)a1 & 7 | v5;
    }
  }
}

void sub_1C593D770(uint64_t **a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = (uint64_t)&(*a1)[5 * v2];
    do
    {
      v5 = *v3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)v3 + 2);
      *(_QWORD *)a2 = v5;
      v6 = *((_OWORD *)v3 + 1);
      *(_QWORD *)(a2 + 32) = v3[4];
      *(_OWORD *)(a2 + 16) = v6;
      v3[3] = 0;
      v3[4] = 0;
      v3[2] = 0;
      v3 += 5;
      a2 += 40;
    }
    while (v3 != (uint64_t *)v4);
    v7 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v7)
    {
      v8 = *a1;
      v9 = 5 * v7;
      do
      {
        if (SHIBYTE(v8[v9 - 1]) < 0)
          operator delete((void *)v8[v9 - 3]);
        v9 -= 5;
      }
      while (v9 * 8);
    }
  }
}

char *sub_1C593D804(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x999999999999999ALL * (((_BYTE *)a1[2] - v3) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - v3) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_1C4764EE4();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v4];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((_QWORD *)v10 + 4) = *(_QWORD *)(a2 + 32);
  v12 = v10 + 40;
  if (v2 != v3)
  {
    do
    {
      v13 = *(_OWORD *)(v2 - 40);
      v14 = *(_OWORD *)(v2 - 24);
      *(v10 - 8) = *(v2 - 8);
      *(_OWORD *)(v10 - 24) = v14;
      *(_OWORD *)(v10 - 40) = v13;
      v10 -= 40;
      v2 -= 40;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = &v9[40 * v8];
  if (v2)
    operator delete(v2);
  return v12;
}

void llvm::MCExpr::print(uint64_t a1)
{
  __asm { BR              X9 }
}

llvm::raw_ostream *sub_1C593D990(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  llvm::raw_ostream *v40;
  const llvm::MCAsmInfo *v41;
  uint64_t v42;
  char v43;
  char v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  _BYTE *v49;
  llvm::raw_ostream *result;
  _BYTE *v51;

  if (**(unsigned __int8 **)(v42 + 16) - 1 > 1)
  {
    v46 = (_BYTE *)*((_QWORD *)v40 + 4);
    if ((unint64_t)v46 >= *((_QWORD *)v40 + 3))
    {
      llvm::raw_ostream::write(v40, 40);
    }
    else
    {
      *((_QWORD *)v40 + 4) = v46 + 1;
      *v46 = v45;
    }
    llvm::MCExpr::print(*(llvm::MCExpr **)(v42 + 16), v40, v41, 0);
    v47 = (_BYTE *)*((_QWORD *)v40 + 4);
    if ((unint64_t)v47 >= *((_QWORD *)v40 + 3))
    {
      llvm::raw_ostream::write(v40, 41);
    }
    else
    {
      *((_QWORD *)v40 + 4) = v47 + 1;
      *v47 = v43;
    }
  }
  else
  {
    ((void (*)(void))llvm::MCExpr::print)();
  }
  v48 = *(_DWORD *)(v42 + 1) & 0xFFFFFF;
  if (v48 <= 0x13)
    __asm { BR              X9 }
  if (**(unsigned __int8 **)(v42 + 24) - 1 < 2)
    JUMPOUT(0x1C593D978);
  v49 = (_BYTE *)*((_QWORD *)v40 + 4);
  if ((unint64_t)v49 >= *((_QWORD *)v40 + 3))
  {
    llvm::raw_ostream::write(v40, 40);
  }
  else
  {
    *((_QWORD *)v40 + 4) = v49 + 1;
    *v49 = 40;
  }
  result = (llvm::raw_ostream *)llvm::MCExpr::print(*(llvm::MCExpr **)(v42 + 24), v40, v41, 0);
  v51 = (_BYTE *)*((_QWORD *)v40 + 4);
  if ((unint64_t)v51 >= *((_QWORD *)v40 + 3))
    return llvm::raw_ostream::write(v40, 41);
  *((_QWORD *)v40 + 4) = v51 + 1;
  *v51 = 41;
  return result;
}

unint64_t llvm::MCBinaryExpr::create(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result;

  result = sub_1C484358C(a4 + 192, 32, 3);
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 1) = a1 & 0xFFFFFF | (*(unsigned __int8 *)(result + 4) << 24);
  *(_QWORD *)(result + 8) = a5;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  return result;
}

unint64_t llvm::MCConstantExpr::create(llvm::MCConstantExpr *this, uint64_t a2, llvm::MCContext *a3, int a4)
{
  int v5;
  unint64_t result;
  int v8;

  v5 = (int)a3;
  result = sub_1C484358C(a2 + 192, 24, 3);
  if (v5)
    v8 = 256;
  else
    v8 = 0;
  *(_BYTE *)result = 1;
  *(_DWORD *)(result + 1) = a4 & 0xFFFFFF | v8 | (*(unsigned __int8 *)(result + 4) << 24);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = this;
  return result;
}

uint64_t llvm::MCSymbolRefExpr::MCSymbolRefExpr(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v5;

  v5 = a3 | (*(unsigned __int8 *)(a4 + 18) << 16);
  *(_BYTE *)result = 2;
  *(_DWORD *)(result + 1) = v5 | (*(unsigned __int8 *)(result + 4) << 24);
  *(_QWORD *)(result + 8) = a5;
  *(_QWORD *)(result + 16) = a2;
  return result;
}

{
  int v5;

  v5 = a3 | (*(unsigned __int8 *)(a4 + 18) << 16);
  *(_BYTE *)result = 2;
  *(_DWORD *)(result + 1) = v5 | (*(unsigned __int8 *)(result + 4) << 24);
  *(_QWORD *)(result + 8) = a5;
  *(_QWORD *)(result + 16) = a2;
  return result;
}

unint64_t llvm::MCSymbolRefExpr::create(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  int v9;

  result = sub_1C484358C(a3 + 192, 24, 3);
  v9 = a2 | (*(unsigned __int8 *)(*(_QWORD *)(a3 + 152) + 18) << 16);
  *(_BYTE *)result = 2;
  *(_DWORD *)(result + 1) = v9 | (*(unsigned __int8 *)(result + 4) << 24);
  *(_QWORD *)(result + 8) = a4;
  *(_QWORD *)(result + 16) = a1;
  return result;
}

unint64_t llvm::MCSymbolRefExpr::create(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t Symbol;
  unint64_t result;
  int v8;
  _QWORD v9[4];
  __int16 v10;

  v10 = 261;
  v9[0] = a1;
  v9[1] = a2;
  Symbol = llvm::MCContext::getOrCreateSymbol(a4, (uint64_t)v9);
  result = sub_1C484358C(a4 + 192, 24, 3);
  v8 = a3 | (*(unsigned __int8 *)(*(_QWORD *)(a4 + 152) + 18) << 16);
  *(_BYTE *)result = 2;
  *(_DWORD *)(result + 1) = v8 | (*(unsigned __int8 *)(result + 4) << 24);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = Symbol;
  return result;
}

uint64_t llvm::MCSymbolRefExpr::getVariantKindForName(char *a1, unint64_t a2)
{
  void **v2;
  void *v3;
  BOOL v4;
  _BOOL4 v8;
  _BOOL4 v10;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  BOOL v19;
  int v20;
  _BOOL4 v21;
  char v23;
  int v25;
  int v27;
  BOOL v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  int v35;
  BOOL v36;
  int v37;
  char v38;
  BOOL v41;
  int v43;
  char v44;
  int v45;
  int v46;
  int v47;
  BOOL v49;
  int v50;
  _BOOL4 v52;
  int v55;
  int v61;
  char v66;
  int v67;
  _BOOL4 v68;
  char v73;
  char v75;
  _BOOL4 v77;
  int v79;
  BOOL v81;
  int v83;
  char v84;
  char v86;
  char v88;
  char v90;
  char v92;
  BOOL v95;
  int v97;
  int v98;
  _BOOL4 v100;
  char v104;
  _BOOL4 v108;
  char v119;
  int v124;
  int v131;
  BOOL v134;
  int v135;
  char v139;
  uint64_t v165;
  BOOL v166;
  int v167;
  void *v170[2];
  char v171;

  sub_1C5E3DEA4(v170, a1, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a1[a2], (uint64_t)sub_1C5E3C6A8, a2);
  if (v171 >= 0)
    v2 = v170;
  else
    v2 = (void **)v170[0];
  v3 = (void *)(v171 & 0x7F);
  if (v171 < 0)
    v3 = v170[1];
  if (v3 != (void *)6)
  {
    switch((unint64_t)v3)
    {
      case 3uLL:
        v8 = 0;
        if (*(_WORD *)v2 == 28519 && *((_BYTE *)v2 + 2) == 116)
        {
          v13 = 1;
          v14 = 65538;
          goto LABEL_104;
        }
        v12 = *(_WORD *)v2 == 27760 && *((_BYTE *)v2 + 2) == 116;
        v13 = 1;
        if (!v12)
        {
          v14 = 0;
          goto LABEL_104;
        }
        v14 = 65548;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v15 = 0;
        v25 = 0;
        v10 = 0;
        goto LABEL_200;
      case 4uLL:
      case 6uLL:
      case 7uLL:
        goto LABEL_46;
      case 5uLL:
        if (*(_DWORD *)v2 ^ 0x65726370 | *((unsigned __int8 *)v2 + 4) ^ 0x6C)
          v14 = 0;
        else
          v14 = 65541;
        v10 = 1;
        goto LABEL_72;
      case 8uLL:
        if (*v2 == (void *)0x6C65726370746F67)
        {
          v8 = 0;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v13 = 0;
          v15 = 0;
          v25 = 0;
          v10 = 0;
          v14 = 65542;
          v31 = 1;
          goto LABEL_200;
        }
        v10 = 0;
        v15 = 0;
        if (*v2 == (void *)0x66666F7074746F67)
          v14 = 65544;
        else
          v14 = 0;
        v8 = 1;
        goto LABEL_73;
      case 9uLL:
        if (*v2 == (void *)0x666F70746E646E69 && *((_BYTE *)v2 + 8) == 102)
        {
          v8 = 0;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v13 = 0;
          v15 = 0;
          v10 = 0;
          v14 = 65545;
          v25 = 1;
          goto LABEL_200;
        }
        v13 = 0;
        v19 = *v2 == (void *)0x666F70746E746F67 && *((_BYTE *)v2 + 8) == 102;
        v8 = 1;
        if (v19)
          v14 = 65547;
        else
          v14 = 0;
        goto LABEL_104;
      default:
        if (v3 == (void *)16)
        {
          v10 = 0;
          if (*v2 != (void *)0x6C65726370746F67 || v2[1] != (void *)0x78616C65726F6E5FLL)
          {
            v14 = 0;
            goto LABEL_72;
          }
          v14 = 65543;
          v15 = 0;
          v8 = 0;
          goto LABEL_73;
        }
LABEL_46:
        v10 = v3 == (void *)7;
        if (v3 != (void *)7)
        {
          v15 = 0;
          v8 = 0;
          v14 = 0;
          goto LABEL_73;
        }
        v8 = 0;
        v17 = *(_DWORD *)v2 == 1668508788 && *(_DWORD *)((char *)v2 + 3) == 1819042147;
        v10 = 1;
        if (v17)
        {
          v14 = 65554;
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v13 = 0;
          v15 = 0;
          v25 = 0;
          goto LABEL_200;
        }
        break;
    }
LABEL_52:
    v15 = 0;
    v14 = 0;
    goto LABEL_73;
  }
  v4 = *(_DWORD *)v2 == 1919972452 && *((_WORD *)v2 + 2) == 27749;
  if (v4)
  {
    v10 = 0;
    v15 = 0;
    v8 = 0;
    v14 = 65695;
  }
  else
  {
    if (*(_DWORD *)v2 != 1869640804 || *((_WORD *)v2 + 2) != 26214)
    {
      if (*(_DWORD *)v2 == 1869901671 && *((_WORD *)v2 + 2) == 26214)
      {
        v10 = 0;
        v14 = 65539;
LABEL_72:
        v8 = 0;
        v15 = v10;
        v10 = 0;
        goto LABEL_73;
      }
      if (*(_DWORD *)v2 == 1920233319 && *((_WORD *)v2 + 2) == 27749)
      {
        v10 = 0;
        v15 = 0;
        v8 = 0;
        v14 = 65540;
        goto LABEL_73;
      }
      v8 = 0;
      if (*(_DWORD *)v2 == 1869640814 && *((_WORD *)v2 + 2) == 26214)
      {
        v14 = 65546;
        v13 = 0;
LABEL_104:
        v27 = 0;
        v10 = 0;
        v15 = 0;
        v21 = (v14 & 0x30000) == 0;
        v25 = v8;
        v8 = 0;
        goto LABEL_105;
      }
      v10 = 0;
      goto LABEL_52;
    }
    v10 = 0;
    v15 = 0;
    v8 = 0;
    v14 = 65553;
  }
LABEL_73:
  v20 = v14 & 0x10000;
  v21 = (v14 & 0x30000) == 0;
  if (v10 && !v20 && *(_DWORD *)v2 == 1685286004 && *(_DWORD *)((char *)v2 + 3) == 1668506980)
  {
    v14 = 65555;
    goto LABEL_94;
  }
  v4 = v20 == 0;
  v23 = v15 ^ 1;
  if (!v4)
    v23 = 1;
  if ((v23 & 1) == 0)
  {
    if (*(_DWORD *)v2 != 1735617652 || *((_BYTE *)v2 + 4) != 100)
    {
      v25 = 0;
      if (*(_DWORD *)v2 != 1819503732 || *((_BYTE *)v2 + 4) != 100)
      {
        v27 = 1;
        v13 = 0;
        v21 = 1;
        goto LABEL_105;
      }
      v14 = 65550;
      v13 = 0;
LABEL_126:
      v30 = v3 == (void *)4;
      goto LABEL_130;
    }
    v14 = 65549;
LABEL_94:
    v13 = 0;
    v25 = 0;
    goto LABEL_126;
  }
  v27 = 0;
  v25 = 0;
  v13 = 0;
LABEL_105:
  if (v3 == (void *)6 && v21 && *(_DWORD *)v2 == 1819503732 && *((_WORD *)v2 + 2) == 28004)
  {
    v14 = 65551;
    goto LABEL_126;
  }
  if (!v27)
    goto LABEL_120;
  if (*(_DWORD *)v2 == 1718579316 && *((_BYTE *)v2 + 4) == 102)
  {
    v14 = 65552;
LABEL_129:
    v30 = v3 == (void *)4;
    v15 = 1;
    goto LABEL_130;
  }
  if (*(_DWORD *)v2 == 1701998708 && *((_BYTE *)v2 + 4) == 108)
  {
    v14 = 65694;
    goto LABEL_129;
  }
LABEL_120:
  v30 = v3 == (void *)4;
  if (v3 != (void *)4)
    v21 = 0;
  if (v21)
  {
    v30 = 1;
    if (*(_DWORD *)v2 == 1886809204)
    {
      v14 = 65556;
LABEL_142:
      v29 = v3 == (void *)11;
      goto LABEL_143;
    }
  }
LABEL_130:
  v35 = v14 & 0x10000;
  if (v8 && !v35 && *v2 == (void *)0x6567617070766C74)
  {
    v14 = 65557;
    v8 = 1;
    goto LABEL_142;
  }
  v29 = v3 == (void *)11;
  if (v3 == (void *)11 && !v35)
  {
    v36 = *v2 == (void *)0x6567617070766C74 && *(void **)((char *)v2 + 3) == (void *)0x66666F6567617070;
    v29 = 1;
    if (v36)
    {
      v14 = 65558;
LABEL_166:
      v28 = v3 == (void *)10;
      goto LABEL_170;
    }
  }
LABEL_143:
  v37 = v14 & 0x10000;
  if (v30 && !v37 && *(_DWORD *)v2 == 1701273968)
  {
    v14 = 65559;
    v30 = 1;
    goto LABEL_166;
  }
  v38 = !v10;
  if (v37)
    v38 = 1;
  if ((v38 & 1) == 0)
  {
    if (*(_DWORD *)v2 == 1701273968 && *(_DWORD *)((char *)v2 + 3) == 1717989221)
    {
      v14 = 65560;
    }
    else
    {
      if (*(_DWORD *)v2 != 1886678887 || *(_DWORD *)((char *)v2 + 3) != 1701273968)
        goto LABEL_157;
      v14 = 65561;
    }
    v28 = v3 == (void *)10;
    v10 = 1;
LABEL_170:
    if (v3 == (void *)6 && (v14 & 0x30000) == 0 && *(_DWORD *)v2 == 1919380841 && *((_WORD *)v2 + 2) == 27749)
    {
      v14 = 65651;
      goto LABEL_194;
    }
    goto LABEL_176;
  }
LABEL_157:
  v28 = v3 == (void *)10;
  if (v3 != (void *)10 || v37)
    goto LABEL_170;
  v41 = *v2 == (void *)0x6F65676170746F67 && *((_WORD *)v2 + 4) == 26214;
  v28 = 1;
  if (v41)
  {
    v14 = 65562;
LABEL_194:
    v31 = v8;
    v8 = v3 == (void *)1;
    goto LABEL_200;
  }
LABEL_176:
  v31 = v8;
  v43 = v14 & 0x30000;
  if (v8 && !v43 && *v2 == (void *)0x32336C6572636573)
  {
    v14 = 65563;
    v8 = 1;
    goto LABEL_194;
  }
  v44 = !v30;
  if (v43)
    v44 = 1;
  if ((v44 & 1) == 0)
  {
    if (*(_DWORD *)v2 == 1702521203)
    {
      v14 = 65564;
    }
    else
    {
      if (*(_DWORD *)v2 != 947085921)
        goto LABEL_184;
      v14 = 65566;
    }
    v8 = v3 == (void *)1;
    v30 = 1;
    goto LABEL_200;
  }
LABEL_184:
  if (v3 == (void *)6 && !v43)
  {
    LOBYTE(v8) = 0;
    if (!(*(_DWORD *)v2 ^ 0x6F746C70 | *((unsigned __int16 *)v2 + 2) ^ 0x6666))
      v14 = 65567;
    goto LABEL_208;
  }
  v8 = v3 == (void *)1;
  if (v3 == (void *)1 && !v43)
  {
    if (*(_BYTE *)v2 == 108)
    {
      v14 = 65584;
LABEL_204:
      v43 = v3 == (void *)2;
      LOBYTE(v8) = 1;
      goto LABEL_208;
    }
    v8 = 1;
  }
LABEL_200:
  v45 = v14 & 0x10000;
  if (v8 && !v45 && *(_BYTE *)v2 == 104)
  {
    v14 = 65585;
    goto LABEL_204;
  }
  v43 = v3 == (void *)2;
  if (v3 == (void *)2 && !v45)
  {
    v43 = 1;
    if (*(_WORD *)v2 == 24936)
    {
      v14 = 65586;
      goto LABEL_364;
    }
  }
LABEL_208:
  v46 = v14 & 0x10000;
  if (v30 && !v46 && *(_DWORD *)v2 == 1751607656)
  {
    v14 = 65587;
    v30 = 1;
    goto LABEL_364;
  }
  if (v46)
    v47 = 0;
  else
    v47 = v15;
  if (v47 == 1 && *(_DWORD *)v2 == 1751607656 && *((_BYTE *)v2 + 4) == 97)
  {
    v14 = 65588;
    goto LABEL_364;
  }
  v49 = v3 == (void *)6 && v46 == 0;
  v50 = v49;
  if (v49 && *(_DWORD *)v2 == 1751607656 && *((_WORD *)v2 + 2) == 29285)
  {
    v14 = 65589;
    goto LABEL_364;
  }
  if (v46)
    v52 = 0;
  else
    v52 = v10;
  if (v52)
  {
    if (*(_DWORD *)v2 == 1751607656 && *(_DWORD *)((char *)v2 + 3) == 1634887016)
    {
      v14 = 65590;
    }
    else
    {
      if (*(_DWORD *)v2 != 1751607656 || *(_DWORD *)((char *)v2 + 3) != 1953719656)
        goto LABEL_243;
      v14 = 65591;
    }
LABEL_307:
    v68 = v3 == (void *)12;
    v10 = 1;
    goto LABEL_365;
  }
LABEL_243:
  if (v46)
    v55 = 0;
  else
    v55 = v31;
  if (v55 == 1 && *v2 == (void *)0x6174736568676968)
  {
    v14 = 65592;
    goto LABEL_364;
  }
  if (v47)
  {
    if (*(_DWORD *)v2 == 1081372519 && *((_BYTE *)v2 + 4) == 108)
    {
      v14 = 65593;
      goto LABEL_364;
    }
    if (*(_DWORD *)v2 == 1081372519 && *((_BYTE *)v2 + 4) == 104)
    {
      v14 = 65594;
      goto LABEL_364;
    }
  }
  if (v50)
  {
    if (*(_DWORD *)v2 == 1081372519 && *((_WORD *)v2 + 2) == 24936)
    {
      v14 = 65595;
      goto LABEL_364;
    }
  }
  if (v47)
  {
    if (*(_DWORD *)v2 == 1633906540 && *((_BYTE *)v2 + 4) == 108)
    {
      v14 = 65648;
      goto LABEL_364;
    }
  }
  if (v52 && *(_DWORD *)v2 == 1650683764 && *(_DWORD *)((char *)v2 + 3) == 1702060386)
  {
    v14 = 65596;
    goto LABEL_364;
  }
  if (v46)
    v61 = 0;
  else
    v61 = v13;
  if (v61 == 1 && *(_WORD *)v2 == 28532 && *((_BYTE *)v2 + 2) == 99)
  {
    v14 = 65597;
    goto LABEL_364;
  }
  if (v47)
  {
    if (*(_DWORD *)v2 == 1080258420 && *((_BYTE *)v2 + 4) == 108)
    {
      v14 = 65598;
      goto LABEL_364;
    }
    if (*(_DWORD *)v2 == 1080258420 && *((_BYTE *)v2 + 4) == 104)
    {
      v14 = 65599;
      goto LABEL_364;
    }
  }
  if (v50)
  {
    if (*(_DWORD *)v2 == 1080258420 && *((_WORD *)v2 + 2) == 24936)
    {
      v14 = 65600;
      goto LABEL_364;
    }
  }
  v66 = !v8;
  if (v46)
    v66 = 1;
  if ((v66 & 1) == 0)
  {
    v67 = *(unsigned __int8 *)v2;
    if (v67 == 108)
    {
      v14 = 65602;
      goto LABEL_364;
    }
    if (v67 == 117)
    {
      v14 = 65601;
LABEL_364:
      v68 = v3 == (void *)12;
      goto LABEL_365;
    }
  }
  if (v61)
  {
    if (*(_WORD *)v2 == 27764 && *((_BYTE *)v2 + 2) == 115)
    {
      v14 = 65630;
      goto LABEL_364;
    }
  }
  if (v50)
  {
    if (*(_DWORD *)v2 == 1836086372 && *((_WORD *)v2 + 2) == 25711)
    {
      v14 = 65603;
      goto LABEL_364;
    }
  }
  if (!v52)
    goto LABEL_330;
  if (*(_DWORD *)v2 == 1701998708 && *(_DWORD *)((char *)v2 + 3) == 1816161381)
  {
    v14 = 65604;
    goto LABEL_307;
  }
  if (*(_DWORD *)v2 == 1701998708 && *(_DWORD *)((char *)v2 + 3) == 1749052517)
  {
    v14 = 65605;
    goto LABEL_307;
  }
LABEL_330:
  if (v55 && *v2 == (void *)0x6168406C65727074)
  {
    v14 = 65606;
    goto LABEL_364;
  }
  v73 = !v28;
  if (v46)
    v73 = 1;
  if ((v73 & 1) == 0 && *v2 == (void *)0x6968406C65727074 && *((_WORD *)v2 + 4) == 26727)
  {
    v14 = 65607;
    goto LABEL_364;
  }
  v75 = !v29;
  if (v46)
    v75 = 1;
  if ((v75 & 1) == 0
    && *v2 == (void *)0x6968406C65727074
    && *(void **)((char *)v2 + 3) == (void *)0x6168676968406C65)
  {
    v68 = v3 == (void *)12;
    v14 = 65608;
LABEL_801:
    v77 = v3 == (void *)13;
    goto LABEL_372;
  }
  v68 = v3 == (void *)12;
  if (v3 == (void *)12 && !v46)
  {
    if (!((unint64_t)*v2 ^ 0x6968406C65727074 | *((unsigned int *)v2 + 2) ^ 0x72656867))
      v14 = 65609;
    v68 = 1;
    goto LABEL_801;
  }
LABEL_365:
  v77 = v3 == (void *)13;
  if (v3 == (void *)13 && (v14 & 0x30000) == 0)
  {
    if (*v2 == (void *)0x6968406C65727074 && *(void **)((char *)v2 + 5) == (void *)0x6172656867696840)
    {
      v14 = 65610;
LABEL_387:
      v81 = v3 == (void *)14;
      v77 = 1;
      goto LABEL_388;
    }
    v77 = 1;
  }
LABEL_372:
  v79 = v14 & 0x10000;
  if (v77 && !v79 && *v2 == (void *)0x6968406C65727074 && *(void **)((char *)v2 + 5) == (void *)0x7473656867696840)
  {
    v14 = 65611;
    goto LABEL_387;
  }
  v81 = v3 == (void *)14;
  if (v3 == (void *)14 && !v79)
  {
    if (*v2 == (void *)0x6968406C65727074 && *(void **)((char *)v2 + 6) == (void *)0x6174736568676968)
    {
      v14 = 65612;
      goto LABEL_446;
    }
    v81 = 1;
  }
LABEL_388:
  v83 = v14 & 0x10000;
  if (v31 && !v83)
  {
    if (*v2 == (void *)0x6C406C6572707464)
    {
      v14 = 65613;
      v31 = 1;
      goto LABEL_446;
    }
    if (*v2 == (void *)0x68406C6572707464)
    {
      v14 = 65614;
      goto LABEL_446;
    }
  }
  v84 = v25 ^ 1;
  if (v83)
    v84 = 1;
  if ((v84 & 1) == 0 && *v2 == (void *)0x68406C6572707464 && *((_BYTE *)v2 + 8) == 97)
  {
    v14 = 65615;
    goto LABEL_446;
  }
  v86 = !v29;
  if (v83)
    v86 = 1;
  if ((v86 & 1) == 0
    && *v2 == (void *)0x68406C6572707464
    && *(void **)((char *)v2 + 3) == (void *)0x68676968406C6572)
  {
    v14 = 65616;
    goto LABEL_446;
  }
  v88 = !v68;
  if (v83)
    v88 = 1;
  if ((v88 & 1) == 0 && *v2 == (void *)0x68406C6572707464 && *((_DWORD *)v2 + 2) == 1634232169)
  {
    v14 = 65617;
    goto LABEL_446;
  }
  v90 = !v77;
  if (v83)
    v90 = 1;
  if ((v90 & 1) == 0
    && *v2 == (void *)0x68406C6572707464
    && *(void **)((char *)v2 + 5) == (void *)0x726568676968406CLL)
  {
    v14 = 65618;
    goto LABEL_446;
  }
  v92 = !v81;
  if (v83)
    v92 = 1;
  if ((v92 & 1) == 0)
  {
    if (*v2 != (void *)0x68406C6572707464 || *(void **)((char *)v2 + 6) != (void *)0x6172656867696840)
    {
      if (*v2 == (void *)0x68406C6572707464 && *(void **)((char *)v2 + 6) == (void *)0x7473656867696840)
      {
        v14 = 65620;
        goto LABEL_850;
      }
      goto LABEL_431;
    }
    v14 = 65619;
LABEL_446:
    v95 = v3 == (void *)15;
    goto LABEL_447;
  }
LABEL_431:
  v95 = v3 == (void *)15;
  if (v3 == (void *)15 && !v83)
  {
    if (*v2 == (void *)0x68406C6572707464 && *(void **)((char *)v2 + 7) == (void *)0x6174736568676968)
    {
      v14 = 65621;
      goto LABEL_850;
    }
    v95 = 1;
  }
LABEL_447:
  v97 = v14 & 0x10000;
  if ((v14 & 0x30000) != 0)
    v98 = 0;
  else
    v98 = v25;
  if (v98 == 1 && *v2 == (void *)0x6572707440746F67 && *((_BYTE *)v2 + 8) == 108)
  {
    v14 = 65622;
    goto LABEL_850;
  }
  if (v97)
    v100 = 0;
  else
    v100 = v29;
  if (v100)
  {
    if (*v2 == (void *)0x6572707440746F67 && *(void **)((char *)v2 + 3) == (void *)0x6C406C6572707440)
    {
      v14 = 65623;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6572707440746F67 && *(void **)((char *)v2 + 3) == (void *)0x68406C6572707440)
    {
      v14 = 65624;
      goto LABEL_850;
    }
  }
  if (v97)
    v68 = 0;
  if (v68 && *v2 == (void *)0x6572707440746F67 && *((_DWORD *)v2 + 2) == 1634222188)
  {
    v14 = 65625;
    goto LABEL_850;
  }
  v104 = !v28;
  if (v97)
    v104 = 1;
  if ((v104 & 1) == 0 && *v2 == (void *)0x7270746440746F67 && *((_WORD *)v2 + 4) == 27749)
  {
    v14 = 65626;
    goto LABEL_850;
  }
  if (v68)
  {
    if (*v2 == (void *)0x7270746440746F67 && *((_DWORD *)v2 + 2) == 1816161381)
    {
      v14 = 65627;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x7270746440746F67 && *((_DWORD *)v2 + 2) == 1749052517)
    {
      v14 = 65628;
      goto LABEL_850;
    }
  }
  if (v97)
    v108 = 0;
  else
    v108 = v77;
  if (v108 && *v2 == (void *)0x7270746440746F67 && *(void **)((char *)v2 + 5) == (void *)0x6168406C65727074)
  {
    v14 = 65629;
    goto LABEL_850;
  }
  if (v98)
  {
    if (*v2 == (void *)0x67736C7440746F67 && *((_BYTE *)v2 + 8) == 100)
    {
      v14 = 65631;
      goto LABEL_850;
    }
  }
  if (v100)
  {
    if (*v2 == (void *)0x67736C7440746F67 && *(void **)((char *)v2 + 3) == (void *)0x6C406467736C7440)
    {
      v14 = 65632;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x67736C7440746F67 && *(void **)((char *)v2 + 3) == (void *)0x68406467736C7440)
    {
      v14 = 65633;
      goto LABEL_850;
    }
  }
  if (v68 && *v2 == (void *)0x67736C7440746F67 && *((_DWORD *)v2 + 2) == 1634222180)
  {
    v14 = 65634;
    goto LABEL_850;
  }
  if (v98)
  {
    if (*v2 == (void *)0x6C736C7440746F67 && *((_BYTE *)v2 + 8) == 100)
    {
      v14 = 65638;
      goto LABEL_850;
    }
  }
  if (v100)
  {
    if (*v2 == (void *)0x6C736C7440746F67 && *(void **)((char *)v2 + 3) == (void *)0x6C40646C736C7440)
    {
      v14 = 65639;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6C736C7440746F67 && *(void **)((char *)v2 + 3) == (void *)0x6840646C736C7440)
    {
      v14 = 65640;
      goto LABEL_850;
    }
  }
  if (v68 && *v2 == (void *)0x6C736C7440746F67 && *((_DWORD *)v2 + 2) == 1634222180)
  {
    v14 = 65641;
    goto LABEL_850;
  }
  if (v98)
  {
    if (*v2 == (void *)0x6572637040746F67 && *((_BYTE *)v2 + 8) == 108)
    {
      v14 = 65642;
      goto LABEL_850;
    }
  }
  v119 = !v95;
  if (v97)
    v119 = 1;
  if ((v119 & 1) == 0)
  {
    if (*v2 == (void *)0x67736C7440746F67 && *(void **)((char *)v2 + 7) == (void *)0x6C65726370406467)
    {
      v14 = 65643;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6C736C7440746F67 && *(void **)((char *)v2 + 7) == (void *)0x6C6572637040646CLL)
    {
      v14 = 65644;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6572707440746F67 && *(void **)((char *)v2 + 7) == (void *)0x6C65726370406C65)
    {
      v14 = 65645;
      goto LABEL_850;
    }
  }
  if (v98)
  {
    if (*v2 == (void *)0x6572637040736C74 && *((_BYTE *)v2 + 8) == 108)
    {
      v14 = 65646;
      goto LABEL_850;
    }
  }
  if (v97)
    v124 = 0;
  else
    v124 = v15;
  if (v124 == 1)
  {
    if (*(_DWORD *)v2 == 1869901678 && *((_BYTE *)v2 + 4) == 99)
    {
      v14 = 65649;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1869046887 && *((_BYTE *)v2 + 4) == 116)
    {
      v14 = 65655;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1819305063 && *((_BYTE *)v2 + 4) == 116)
    {
      v14 = 65657;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1869047145 && *((_BYTE *)v2 + 4) == 116)
    {
      v14 = 65660;
      goto LABEL_850;
    }
  }
  if (v97)
    v43 = 0;
  if (v43 == 1 && *(_WORD *)v2 == 25961)
  {
    v14 = 65659;
    goto LABEL_850;
  }
  if (v124)
  {
    if (*(_DWORD *)v2 == 1869046892 && *((_BYTE *)v2 + 4) == 116)
    {
      v14 = 65656;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1819305068 && *((_BYTE *)v2 + 4) == 116)
    {
      v14 = 65658;
      goto LABEL_850;
    }
  }
  if (v97)
    v30 = 0;
  if (v30 && *(_DWORD *)v2 == 1701736302)
  {
    v14 = 65568;
    goto LABEL_850;
  }
  if (v97)
    v131 = 0;
  else
    v131 = v31;
  if (v131 == 1 && *v2 == (void *)0x6C6572705F746F67)
  {
    v14 = 65569;
    goto LABEL_850;
  }
  if (v97)
    v10 = 0;
  if (v10)
  {
    if (*(_DWORD *)v2 == 1735549300 && *(_DWORD *)((char *)v2 + 3) == 829711719)
    {
      v14 = 65570;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1735549300 && *(_DWORD *)((char *)v2 + 3) == 846488935)
    {
      v14 = 65571;
      goto LABEL_850;
    }
  }
  v134 = v3 == (void *)6 && v97 == 0;
  v135 = v134;
  if (v134 && *(_DWORD *)v2 == 1818587760 && *((_WORD *)v2 + 2) == 12595)
  {
    v14 = 65572;
    goto LABEL_850;
  }
  if (v124)
  {
    if (*(_DWORD *)v2 == 1701995123 && *((_BYTE *)v2 + 4) == 108)
    {
      v14 = 65573;
      goto LABEL_850;
    }
  }
  if (v135)
  {
    if (*(_DWORD *)v2 == 1819503732 && *((_WORD *)v2 + 2) == 28516)
    {
      v14 = 65574;
      goto LABEL_850;
    }
  }
  v139 = v13 ^ 1;
  if (v97)
    v139 = 1;
  if ((v139 & 1) == 0)
  {
    if (*(_WORD *)v2 == 28524 && *((_BYTE *)v2 + 2) == 56)
    {
      v14 = 65577;
      goto LABEL_850;
    }
    if (*(_WORD *)v2 == 26984 && *((_BYTE *)v2 + 2) == 56)
    {
      v14 = 65578;
      goto LABEL_850;
    }
  }
  if (v30 && *(_DWORD *)v2 == 946826344)
  {
    v14 = 65579;
    goto LABEL_850;
  }
  if (v98)
  {
    if (*v2 == (void *)0x65646E6965707974 && *((_BYTE *)v2 + 8) == 120)
    {
      v14 = 65661;
      goto LABEL_850;
    }
  }
  if (v124)
  {
    if (*(_DWORD *)v2 == 1701995124 && *((_BYTE *)v2 + 4) == 108)
    {
      v14 = 65664;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1701995117 && *((_BYTE *)v2 + 4) == 108)
    {
      v14 = 65663;
      goto LABEL_850;
    }
  }
  if (v135)
  {
    if (*(_DWORD *)v2 == 1920167028 && *((_WORD *)v2 + 2) == 27749)
    {
      v14 = 65662;
      goto LABEL_850;
    }
  }
  if (v10 && *(_DWORD *)v2 == 1081372519 && *(_DWORD *)((char *)v2 + 3) == 1936487488)
  {
    v14 = 65665;
    goto LABEL_850;
  }
  if (v108)
  {
    if (*v2 == (void *)0x6C65726370746F67 && *(void **)((char *)v2 + 5) == (void *)0x6F6C4032336C6572)
    {
      v14 = 65666;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6C65726370746F67 && *(void **)((char *)v2 + 5) == (void *)0x69684032336C6572)
    {
      v14 = 65667;
      goto LABEL_850;
    }
  }
  if (v131)
  {
    if (*v2 == (void *)0x6F6C4032336C6572)
    {
      v14 = 65668;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x69684032336C6572)
    {
      v14 = 65669;
      goto LABEL_850;
    }
  }
  if (v124)
  {
    if (*(_DWORD *)v2 == 913073522 && *((_BYTE *)v2 + 4) == 52)
    {
      v14 = 65670;
      goto LABEL_850;
    }
  }
  if (v131)
  {
    if (*v2 == (void *)0x6F6C403233736261)
    {
      v14 = 65671;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6968403233736261)
    {
      v14 = 65672;
      goto LABEL_850;
    }
  }
  if (v43)
  {
    if (*(_WORD *)v2 == 26984)
    {
      v14 = 65673;
      goto LABEL_850;
    }
    if (*(_WORD *)v2 == 28524)
    {
      v14 = 65674;
      goto LABEL_850;
    }
  }
  if (v124)
  {
    if (*(_DWORD *)v2 == 1751081840 && *((_BYTE *)v2 + 4) == 105)
    {
      v14 = 65675;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1818190704 && *((_BYTE *)v2 + 4) == 111)
    {
      v14 = 65676;
      goto LABEL_850;
    }
  }
  if (v135)
  {
    if (*(_DWORD *)v2 == 1601466215 && *((_WORD *)v2 + 2) == 26984)
    {
      v14 = 65677;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1601466215 && *((_WORD *)v2 + 2) == 28524)
    {
      v14 = 65678;
      goto LABEL_850;
    }
  }
  if (v98)
  {
    if (*v2 == (void *)0x685F66666F746F67 && *((_BYTE *)v2 + 8) == 105)
    {
      v14 = 65679;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6C5F66666F746F67 && *((_BYTE *)v2 + 8) == 111)
    {
      v14 = 65680;
      goto LABEL_850;
    }
  }
  if (v135)
  {
    if (*(_DWORD *)v2 == 1601465456 && *((_WORD *)v2 + 2) == 26984)
    {
      v14 = 65681;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1601465456 && *((_WORD *)v2 + 2) == 28524)
    {
      v14 = 65682;
      goto LABEL_850;
    }
  }
  if (v98)
  {
    if (*v2 == (void *)0x685F64675F736C74 && *((_BYTE *)v2 + 8) == 105)
    {
      v14 = 65683;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6C5F64675F736C74 && *((_BYTE *)v2 + 8) == 111)
    {
      v14 = 65684;
      goto LABEL_850;
    }
  }
  if (v131)
  {
    if (*v2 == (void *)0x69685F66666F7074)
    {
      v14 = 65685;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x6F6C5F66666F7074)
    {
      v14 = 65686;
      goto LABEL_850;
    }
  }
  if (v135)
  {
    if (*(_DWORD *)v2 == 1601726305 && *((_WORD *)v2 + 2) == 28524)
    {
      v14 = 65687;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1601726305 && *((_WORD *)v2 + 2) == 26984)
    {
      v14 = 65688;
      goto LABEL_850;
    }
    if (*(_DWORD *)v2 == 1601726305 && *((_WORD *)v2 + 2) == 29555)
    {
      v14 = 65689;
      goto LABEL_850;
    }
  }
  if (v98)
  {
    if (*v2 == (void *)0x36746F675F786761 && *((_BYTE *)v2 + 8) == 52)
    {
      v14 = 65690;
      goto LABEL_850;
    }
    if (*v2 == (void *)0x33746F675F786761 && *((_BYTE *)v2 + 8) == 50)
    {
      v14 = 65691;
      goto LABEL_850;
    }
    v165 = (unint64_t)*v2 ^ 0x31746F675F786761 | *((unsigned __int8 *)v2 + 8) ^ 0x36;
    if (v165)
      v166 = v100;
    else
      v166 = 0;
    if (v165)
      v167 = v14;
    else
      v167 = 65692;
    if (!v166)
    {
      v14 = v167;
      goto LABEL_850;
    }
  }
  else if (!v100)
  {
    goto LABEL_850;
  }
  if (!((unint64_t)*v2 ^ 0x5F746F675F786761 | *(unint64_t *)((char *)v2 + 3) ^ 0x736C745F746F675FLL))
    v14 = 65693;
LABEL_850:
  if (v171 < 0)
    operator delete(v170[0]);
  if ((v14 & 0x30000) != 0)
    return (unsigned __int16)v14;
  else
    return 1;
}

void llvm::MCExpr::evaluateAsAbsolute(uint64_t a1, _QWORD *a2)
{
  if (*(_BYTE *)a1 == 1)
  {
    *a2 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    llvm::MCExpr::evaluateAsRelocatableImpl(a1);
    *a2 = 0;
  }
}

{
  llvm::MCExpr::evaluateAsAbsolute(a1, a2);
}

{
  llvm::MCExpr::evaluateAsAbsolute(a1, a2);
}

void llvm::MCExpr::evaluateAsAbsolute(uint64_t this, _QWORD *a2, const llvm::MCAssembler *a3)
{
  llvm::MCExpr::evaluateAsAbsolute(this, a2);
}

{
  llvm::MCExpr::evaluateAsAbsolute(this, a2);
}

void llvm::MCExpr::evaluateKnownAbsolute(uint64_t a1, _QWORD *a2)
{
  llvm::MCExpr::evaluateAsAbsolute(a1, a2);
}

void llvm::MCExpr::evaluateAsRelocatableImpl(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1C59402B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  int v26;

  v24 = 0uLL;
  v26 = 0;
  v25 = 0;
  v21 = 0uLL;
  v23 = 0;
  v22 = 0;
  if (!llvm::MCExpr::evaluateAsRelocatableImpl(*(_QWORD *)(v1 + 16), &v24, v2, v4, v6, v3, v5)
    || (llvm::MCExpr::evaluateAsRelocatableImpl(*(_QWORD *)(v1 + 24), &v21, v2, v4, v6, v3, v5) & 1) == 0)
  {
    v10 = *(unsigned __int8 **)(v1 + 16);
    v12 = *v10;
    v11 = v10 - 8;
    if (v12 == 4)
    {
      v13 = *(_QWORD *)(v1 + 24);
      if (v13)
      {
        v14 = *(_DWORD *)(v1 + 1) & 0xFFFFFF;
        if (v14 == 12)
        {
          v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v13 - 8);
          *(_QWORD *)v0 = 0;
          *(_QWORD *)(v0 + 8) = 0;
          v15 = v19 - 1;
          goto LABEL_10;
        }
        if (v14 == 3)
        {
          v15 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v11 + 40))(v11) << 63 >> 63;
LABEL_9:
          *(_QWORD *)v0 = 0;
          *(_QWORD *)(v0 + 8) = 0;
LABEL_10:
          *(_QWORD *)(v0 + 16) = v15;
          *(_DWORD *)(v0 + 24) = 0;
          return 1;
        }
      }
    }
    return 0;
  }
  if (v24 == 0 && v21 == 0)
  {
    v7 = *(_DWORD *)(v1 + 1) & 0xFFFFFF;
    switch(v7)
    {
      case 0u:
        v8 = v22 + v25;
        goto LABEL_47;
      case 1u:
        v8 = v22 & v25;
        goto LABEL_47;
      case 2u:
      case 0xAu:
        if (!v22)
          return 0;
        if (v7 == 2)
        {
          v8 = v25 / v22;
LABEL_47:
          *(_QWORD *)v0 = 0;
          *(_QWORD *)(v0 + 8) = 0;
          *(_QWORD *)(v0 + 16) = v8;
          result = 1;
          *(_DWORD *)(v0 + 24) = 0;
          return result;
        }
        v8 = v25 % v22;
LABEL_49:
        if (v7 > 0xC || ((1 << *(_BYTE *)(v1 + 1)) & 0x1338) == 0)
          goto LABEL_47;
LABEL_51:
        if (v8)
          v15 = -1;
        else
          v15 = 0;
        break;
      case 3u:
        v8 = v25 == v22;
        goto LABEL_51;
      case 4u:
        v8 = v25 > v22;
        goto LABEL_51;
      case 5u:
        v8 = v25 >= v22;
        goto LABEL_51;
      case 6u:
        if (v25)
          v20 = v22 == 0;
        else
          v20 = 1;
        goto LABEL_33;
      case 7u:
        v20 = (v25 | v22) == 0;
LABEL_33:
        v8 = !v20;
        goto LABEL_47;
      case 8u:
        v8 = v25 < v22;
        goto LABEL_51;
      case 9u:
        v8 = v25 <= v22;
        goto LABEL_51;
      case 0xBu:
        v8 = v22 * v25;
        goto LABEL_47;
      case 0xCu:
        v8 = v25 != v22;
        goto LABEL_51;
      case 0xDu:
        v8 = v22 | v25;
        goto LABEL_47;
      case 0xEu:
        v8 = v25 | ~v22;
        goto LABEL_47;
      case 0xFu:
        v8 = v25 << v22;
        goto LABEL_47;
      case 0x10u:
        v8 = v25 >> v22;
        goto LABEL_47;
      case 0x11u:
        v8 = (unint64_t)v25 >> v22;
        goto LABEL_47;
      case 0x12u:
        v8 = v25 - v22;
        goto LABEL_47;
      case 0x13u:
        v8 = v22 ^ v25;
        goto LABEL_47;
      default:
        v8 = 0;
        goto LABEL_49;
    }
    goto LABEL_9;
  }
  if ((*(_DWORD *)(v1 + 1) & 0xFFFFFF) == 0)
  {
    v17 = *((_QWORD *)&v21 + 1);
    v16 = v21;
    v18 = v22;
    return sub_1C5940848(v2, v4, v3, v5, (uint64_t *)&v24, v16, v17, v18, v0);
  }
  if ((*(_DWORD *)(v1 + 1) & 0xFFFFFF) != 0x12)
    return 0;
  v16 = *((_QWORD *)&v21 + 1);
  v17 = v21;
  v18 = -v22;
  return sub_1C5940848(v2, v4, v3, v5, (uint64_t *)&v24, v16, v17, v18, v0);
}

void llvm::MCExpr::evaluateAsRelocatable(uint64_t a1)
{
  llvm::MCExpr::evaluateAsRelocatableImpl(a1);
}

uint64_t sub_1C5940848(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a7;
  v21 = a6;
  v9 = *a5;
  v18 = a5[1];
  v19 = v9;
  v17 = a5[2] + a8;
  if (a1)
  {
    sub_1C5940A6C(a1, a2, a3, a4, &v19, &v18, &v17);
    sub_1C5940A6C(a1, a2, a3, a4, &v19, &v20, &v17);
    sub_1C5940A6C(a1, a2, a3, a4, &v21, &v18, &v17);
    sub_1C5940A6C(a1, a2, a3, a4, &v21, &v20, &v17);
    v9 = v19;
    a6 = v21;
  }
  if (v9 && a6)
    return 0;
  v14 = v18;
  if (v18)
  {
    if (v20)
      return 0;
  }
  if (!v9)
    v9 = a6;
  v16 = v17;
  if (!v18)
    v14 = v20;
  *(_QWORD *)a9 = v9;
  *(_QWORD *)(a9 + 8) = v14;
  *(_QWORD *)(a9 + 16) = v16;
  *(_DWORD *)(a9 + 24) = 0;
  return 1;
}

void llvm::MCExpr::findAssociatedFragment(llvm::MCExpr *this)
{
  uint64_t v2;

  while (1)
  {
    v2 = *(unsigned __int8 *)this;
    if ((_DWORD)v2 != 3)
      break;
    this = (llvm::MCExpr *)*((_QWORD *)this + 2);
  }
  __asm { BR              X10 }
}

void *sub_1C5940998()
{
  uint64_t v0;
  void *AssociatedFragment;
  void *result;
  void *v3;

  AssociatedFragment = (void *)llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v0 + 16));
  result = (void *)llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v0 + 24));
  if (AssociatedFragment != llvm::MCSymbol::AbsolutePseudoFragment)
  {
    if (result == llvm::MCSymbol::AbsolutePseudoFragment)
    {
      return AssociatedFragment;
    }
    else
    {
      if (AssociatedFragment)
        v3 = AssociatedFragment;
      else
        v3 = result;
      if ((*(_DWORD *)(v0 + 1) & 0xFFFFFF) == 0x12)
        return llvm::MCSymbol::AbsolutePseudoFragment;
      else
        return v3;
    }
  }
  return result;
}

void sub_1C5940A6C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  BOOL v67;
  unsigned int v68;
  _QWORD *v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;

  v7 = *a6;
  if (*a5)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v16 = *(_QWORD *)(*a5 + 16);
    v17 = *(_QWORD *)(v7 + 16);
    v18 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
    if (!v18 && (*(_DWORD *)(v16 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v16 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v16 + 24));
      *(_QWORD *)v16 = *(_QWORD *)v16 & 7 | v18;
    }
    if (v18)
    {
      v19 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
      if (!v19 && (*(_DWORD *)(v17 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v17 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v17 + 24));
        *(_QWORD *)v17 = *(_QWORD *)v17 & 7 | v19;
      }
      if (v19
        && llvm::MCObjectWriter::isSymbolRefDifferenceFullyResolved(*(_QWORD *)(a1 + 24), a1, *a5, *a6, a4))
      {
        v20 = *(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8;
        if (!v20 && (*(_DWORD *)(v16 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v16 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v16 + 24));
          v20 = v62;
          *(_QWORD *)v16 = *(_QWORD *)v16 & 7 | v62;
        }
        v21 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
        if (!v21 && (*(_DWORD *)(v17 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v17 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v17 + 24));
          v21 = v63;
          *(_QWORD *)v17 = *(_QWORD *)v17 & 7 | v63;
        }
        if (v20 != v21
          || (*(_DWORD *)(v16 + 8) & 0x1400 | 0x800) == 0x800
          || (*(_DWORD *)(v17 + 8) & 0x1400 | 0x800) == 0x800)
        {
          v22 = *(_QWORD *)(v20 + 16);
          v23 = *(_QWORD *)(v21 + 16);
          if (!a3 && v22 != v23)
            return;
          if (a2)
          {
            v24 = *(_QWORD *)(a2 + 152);
            v25 = *(_DWORD *)(a2 + 168);
            v82 = v22 >> 4;
            v83 = *(_QWORD *)(v20 + 16);
            if (v25)
            {
              v26 = v25 - 1;
              v27 = v26 & ((v22 >> 4) ^ (v22 >> 9));
              v28 = (_QWORD *)(v24 + 16 * v27);
              v29 = *v28;
              if (v22 == *v28)
                goto LABEL_20;
              v65 = 0;
              v66 = 1;
              while (v29 != -4096)
              {
                if (v65)
                  v67 = 0;
                else
                  v67 = v29 == -8192;
                if (v67)
                  v65 = v28;
                v68 = v27 + v66++;
                v27 = v68 & v26;
                v28 = (_QWORD *)(v24 + 16 * v27);
                v29 = *v28;
                if (v22 == *v28)
                  goto LABEL_20;
              }
              v80 = v23;
              v81 = v22;
              if (v65)
                v73 = v65;
              else
                v73 = v28;
            }
            else
            {
              v80 = v23;
              v81 = v22;
              v73 = 0;
            }
            v28 = sub_1C592C29C(a2 + 152, (uint64_t)&v83, &v83, v73);
            *v28 = v83;
            v28[1] = 0;
            v23 = v80;
            v22 = v81;
LABEL_20:
            v30 = v28[1];
            if (v30)
            {
              if (*(_DWORD *)(v20 + 40) <= *(_DWORD *)(v30 + 40))
                goto LABEL_22;
              v78 = v30 + 8;
            }
            else
            {
              v78 = v83 + 112;
            }
            if (*(_BYTE *)(*(_QWORD *)v78 + 49))
              return;
LABEL_22:
            v31 = *(_QWORD *)(v21 + 16);
            v83 = v31;
            v32 = *(_DWORD *)(a2 + 168);
            if (v32)
            {
              v33 = *(_QWORD *)(a2 + 152);
              v34 = v32 - 1;
              v35 = ((v31 >> 4) ^ (v31 >> 9)) & v34;
              v36 = (_QWORD *)(v33 + 16 * v35);
              v37 = *v36;
              if (v31 == *v36)
                goto LABEL_24;
              v69 = 0;
              v70 = 1;
              while (v37 != -4096)
              {
                if (v69)
                  v71 = 0;
                else
                  v71 = v37 == -8192;
                if (v71)
                  v69 = v36;
                v72 = v35 + v70++;
                v35 = v72 & v34;
                v36 = (_QWORD *)(v33 + 16 * v35);
                v37 = *v36;
                if (v31 == *v36)
                  goto LABEL_24;
              }
              v74 = a2 + 152;
              v75 = v22;
              v76 = v23;
              if (v69)
                v77 = v69;
              else
                v77 = v36;
            }
            else
            {
              v74 = a2 + 152;
              v75 = v22;
              v76 = v23;
              v77 = 0;
            }
            v36 = sub_1C592C29C(v74, (uint64_t)&v83, &v83, v77);
            *v36 = v83;
            v36[1] = 0;
            v23 = v76;
            v22 = v75;
LABEL_24:
            v38 = v36[1];
            if (v38)
            {
              if (*(_DWORD *)(v21 + 40) <= *(_DWORD *)(v38 + 40))
                goto LABEL_26;
              v79 = v38 + 8;
            }
            else
            {
              v79 = v83 + 112;
            }
            if (*(_BYTE *)(*(_QWORD *)v79 + 49))
              return;
LABEL_26:
            v39 = *(uint64_t **)(*a5 + 16);
            v83 = 0;
            v40 = v23;
            v41 = v22;
            sub_1C59415F0((llvm::MCAsmLayout *)a2, v39, 1, &v83);
            v42 = v83;
            v43 = *(uint64_t **)(*a6 + 16);
            v83 = 0;
            sub_1C59415F0((llvm::MCAsmLayout *)a2, v43, 1, &v83);
            v44 = *a7 + v42 - v83;
            *a7 = v44;
            if (v41 == v40 || !a3)
              goto LABEL_64;
            v45 = *((_DWORD *)a3 + 4);
            if (v45)
            {
              v46 = *a3;
              v47 = v45 - 1;
              v48 = v47 & (v82 ^ (v41 >> 9));
              v49 = *(_QWORD *)(*a3 + 16 * v48);
              if (v41 == v49)
              {
LABEL_33:
                v52 = *(_QWORD *)(v46 + 16 * v48 + 8);
              }
              else
              {
                v50 = 1;
                while (v49 != -4096)
                {
                  v51 = v48 + v50++;
                  v48 = v51 & v47;
                  v49 = *(_QWORD *)(v46 + 16 * v48);
                  if (v41 == v49)
                    goto LABEL_33;
                }
                v52 = 0;
              }
              v53 = v47 & ((v40 >> 4) ^ (v40 >> 9));
              v54 = *(_QWORD *)(v46 + 16 * v53);
              if (v40 == v54)
              {
LABEL_38:
                v57 = *(_QWORD *)(v46 + 16 * v53 + 8);
LABEL_39:
                v58 = v52 + v44 - v57;
LABEL_63:
                *a7 = v58;
LABEL_64:
                if (llvm::MCAssembler::isThumbFunc((llvm::MCAssembler *)a1, (const llvm::MCSymbol *)v16))
                  *a7 |= 1uLL;
                if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 224))(*(_QWORD *)(a1 + 8), v16) & 1) != 0)*a7 |= 1uLL;
                *a6 = 0;
                *a5 = 0;
                return;
              }
              v55 = 1;
              while (v54 != -4096)
              {
                v56 = v53 + v55++;
                v53 = v56 & v47;
                v54 = *(_QWORD *)(v46 + 16 * v53);
                if (v40 == v54)
                  goto LABEL_38;
              }
            }
            else
            {
              v52 = 0;
            }
            v57 = 0;
            goto LABEL_39;
          }
          if ((*(_DWORD *)(v16 + 8) & 0x1400 | 0x800) == 0x800
            || (*(_DWORD *)(v17 + 8) & 0x1400 | 0x800) == 0x800
            || *(_BYTE *)(v20 + 48) != 1
            || *(_BYTE *)(v21 + 48) != 1)
          {
            return;
          }
          v59 = v22 + 104;
          if (*(_DWORD *)(v20 + 44) != *(_DWORD *)(v21 + 44) || v21 == v59)
            return;
          v61 = *(_QWORD *)(v16 + 24) - *(_QWORD *)(v17 + 24);
          while (v21 != v20)
          {
            if (*(_BYTE *)(v21 + 48) == 1)
            {
              v61 += *(_QWORD *)(v21 + 72);
              v21 = *(_QWORD *)(v21 + 8);
              if (v21 != v59)
                continue;
            }
            return;
          }
          v64 = *a7;
        }
        else
        {
          v64 = *(_QWORD *)(v16 + 24) - *(_QWORD *)(v17 + 24);
          v61 = *a7;
        }
        v58 = v64 + v61;
        goto LABEL_63;
      }
    }
  }
}

llvm::MCAsmLayout *llvm::MCAsmLayout::MCAsmLayout(llvm::MCAsmLayout *this, llvm::MCAssembler *a2)
{
  char *v3;
  char *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v14;

  *(_QWORD *)this = a2;
  v3 = (char *)this + 24;
  *((_QWORD *)this + 1) = (char *)this + 24;
  v4 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0x1000000000;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  v6 = (_QWORD *)*((_QWORD *)a2 + 5);
  if (v5 != v6)
  {
    do
    {
      v8 = *v5;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 16))(*v5) & 1) == 0)
      {
        v9 = *((unsigned int *)this + 4);
        if (v9 >= *((unsigned int *)this + 5))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4, (uint64_t)v3, v9 + 1, 8);
          v9 = *((unsigned int *)this + 4);
        }
        *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v9) = v8;
        ++*((_DWORD *)this + 4);
      }
      ++v5;
    }
    while (v5 != v6);
    v10 = (_QWORD *)*((_QWORD *)a2 + 4);
    v11 = (_QWORD *)*((_QWORD *)a2 + 5);
    while (v10 != v11)
    {
      v12 = *v10;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v10 + 16))(*v10))
      {
        v14 = *((unsigned int *)this + 4);
        if (v14 >= *((unsigned int *)this + 5))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4, (uint64_t)v3, v14 + 1, 8);
          v14 = *((unsigned int *)this + 4);
        }
        *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v14) = v12;
        ++*((_DWORD *)this + 4);
      }
      ++v10;
    }
  }
  return this;
}

BOOL llvm::MCAsmLayout::isFragmentValid(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  int v11;

  v2 = *(_DWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a2 + 16);
    v4 = *(_QWORD *)(a1 + 152);
    v5 = v2 - 1;
    v6 = ((v3 >> 4) ^ (v3 >> 9)) & (v2 - 1);
    v7 = *(_QWORD *)(v4 + 16 * v6);
    if (v3 == v7)
    {
LABEL_3:
      v8 = *(_QWORD *)(v4 + 16 * v6 + 8);
      if (v8)
        return *(_DWORD *)(a2 + 40) <= *(_DWORD *)(v8 + 40);
    }
    else
    {
      v10 = 1;
      while (v7 != -4096)
      {
        v11 = v6 + v10++;
        v6 = v11 & v5;
        v7 = *(_QWORD *)(v4 + 16 * v6);
        if (v3 == v7)
          goto LABEL_3;
      }
    }
  }
  return 0;
}

uint64_t llvm::MCAsmLayout::canGetFragmentOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a2 + 16);
  v20 = v3;
  v6 = *(_QWORD *)(a1 + 152);
  v4 = a1 + 152;
  v5 = v6;
  v7 = *(_DWORD *)(v4 + 16);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = ((v3 >> 4) ^ (v3 >> 9)) & (v7 - 1);
    v10 = (_QWORD *)(v5 + 16 * v9);
    v11 = *v10;
    if (v3 == *v10)
      goto LABEL_3;
    v14 = 0;
    v15 = 1;
    while (v11 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v11 == -8192;
      if (v16)
        v14 = v10;
      v17 = v9 + v15++;
      v9 = v17 & v8;
      v10 = (_QWORD *)(v5 + 16 * (v17 & v8));
      v11 = *v10;
      if (v3 == *v10)
        goto LABEL_3;
    }
    if (v14)
      v18 = v14;
    else
      v18 = v10;
  }
  else
  {
    v18 = 0;
  }
  v10 = sub_1C592C29C(v4, (uint64_t)&v20, &v20, v18);
  *v10 = v20;
  v10[1] = 0;
LABEL_3:
  v12 = v10[1];
  if (!v12)
  {
    v19 = v20 + 112;
    return *(unsigned __int8 *)(*(_QWORD *)v19 + 49) == 0;
  }
  if (*(_DWORD *)(a2 + 40) > *(_DWORD *)(v12 + 40))
  {
    v19 = v12 + 8;
    return *(unsigned __int8 *)(*(_QWORD *)v19 + 49) == 0;
  }
  return 1;
}

_QWORD *llvm::MCAsmLayout::invalidateFragmentsFrom(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a1 + 152);
  result = (_QWORD *)(a1 + 152);
  v3 = v4;
  v5 = *((_DWORD *)result + 4);
  if (v5)
  {
    v6 = a2[2];
    v7 = v5 - 1;
    v8 = ((v6 >> 4) ^ (v6 >> 9)) & (v5 - 1);
    v9 = (_QWORD *)(v3 + 16 * v8);
    v10 = *v9;
    if (v6 == *v9)
    {
      v11 = ((v6 >> 4) ^ (v6 >> 9)) & v7;
LABEL_4:
      v12 = *(_QWORD *)(v3 + 16 * v11 + 8);
      if (v12 && *((_DWORD *)a2 + 10) <= *(_DWORD *)(v12 + 40))
      {
        if (*(uint64_t **)(v6 + 112) == a2)
          v13 = 0;
        else
          v13 = *a2;
        v22 = a2[2];
        if (v6 != v10)
        {
          v17 = 0;
          v18 = 1;
          while (v10 != -4096)
          {
            if (v17)
              v19 = 0;
            else
              v19 = v10 == -8192;
            if (v19)
              v17 = v9;
            v20 = v8 + v18++;
            v8 = v20 & v7;
            v9 = (_QWORD *)(v3 + 16 * (v20 & v7));
            v10 = *v9;
            if (v6 == *v9)
              goto LABEL_10;
          }
          if (v17)
            v21 = v17;
          else
            v21 = v9;
          result = sub_1C592C29C((uint64_t)result, (uint64_t)&v22, &v22, v21);
          v9 = result;
          *result = v22;
          result[1] = 0;
        }
LABEL_10:
        v9[1] = v13;
      }
    }
    else
    {
      v14 = 1;
      v15 = *v9;
      LODWORD(v11) = ((v6 >> 4) ^ (v6 >> 9)) & v7;
      while (v15 != -4096)
      {
        v16 = v11 + v14++;
        v11 = v16 & v7;
        v15 = *(_QWORD *)(v3 + 16 * v11);
        if (v6 == v15)
          goto LABEL_4;
      }
    }
  }
  return result;
}

uint64_t llvm::MCAsmLayout::ensureValid(llvm::MCAsmLayout *this, const llvm::MCFragment *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::MCFragment **v14;
  llvm::MCFragment **v15;
  llvm::MCFragment *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;

  v4 = *((_QWORD *)a2 + 2);
  v31 = v4;
  v7 = *((_QWORD *)this + 19);
  result = (uint64_t)this + 152;
  v6 = v7;
  v8 = *(_DWORD *)(result + 16);
  if (v8)
  {
    v9 = v8 - 1;
    v10 = ((v4 >> 4) ^ (v4 >> 9)) & (v8 - 1);
    v11 = (_QWORD *)(v6 + 16 * v10);
    v12 = *v11;
    if (v4 == *v11)
      goto LABEL_3;
    v26 = 0;
    v27 = 1;
    while (v12 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v12 == -8192;
      if (v28)
        v26 = v11;
      v29 = v10 + v27++;
      v10 = v29 & v9;
      v11 = (_QWORD *)(v6 + 16 * (v29 & v9));
      v12 = *v11;
      if (v4 == *v11)
        goto LABEL_3;
    }
    if (v26)
      v30 = v26;
    else
      v30 = v11;
  }
  else
  {
    v30 = 0;
  }
  result = (uint64_t)sub_1C592C29C(result, (uint64_t)&v31, &v31, v30);
  v11 = (_QWORD *)result;
  *(_QWORD *)result = v31;
  *(_QWORD *)(result + 8) = 0;
  v4 = v31;
LABEL_3:
  v13 = v11[1];
  v14 = (llvm::MCFragment **)(v4 + 112);
  if (v13)
    v15 = (llvm::MCFragment **)(v13 + 8);
  else
    v15 = v14;
  while (1)
  {
    v16 = *v15;
    v17 = *((_DWORD *)this + 42);
    if (!v17)
      goto LABEL_10;
    v18 = *((_QWORD *)a2 + 2);
    v19 = *((_QWORD *)this + 19);
    v20 = v17 - 1;
    v21 = ((v18 >> 4) ^ (v18 >> 9)) & (v17 - 1);
    v22 = *(_QWORD *)(v19 + 16 * v21);
    if (v18 == v22)
      break;
    v24 = 1;
    while (v22 != -4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & v20;
      v22 = *(_QWORD *)(v19 + 16 * v21);
      if (v18 == v22)
        goto LABEL_8;
    }
LABEL_10:
    result = llvm::MCAsmLayout::layoutFragment(this, v16);
    v15 = (llvm::MCFragment **)((char *)v16 + 8);
  }
LABEL_8:
  v23 = *(_QWORD *)(v19 + 16 * v21 + 8);
  if (!v23 || *((_DWORD *)a2 + 10) > *(_DWORD *)(v23 + 40))
    goto LABEL_10;
  return result;
}

uint64_t llvm::MCAsmLayout::getFragmentOffset(llvm::MCAsmLayout *this, const llvm::MCFragment *a2)
{
  llvm::MCAsmLayout::ensureValid(this, a2);
  return *((_QWORD *)a2 + 4);
}

uint64_t sub_1C59415F0(llvm::MCAsmLayout *a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const char *v20;
  __int16 v21;
  uint64_t v22[4];
  __int16 v23;
  _QWORD v24[5];

  v8 = *((_DWORD *)a2 + 2);
  if ((v8 & 0x1C00) == 0x800)
  {
    v16 = 0;
    v17 = 0;
    v19 = 0;
    v18 = 0;
    *((_DWORD *)a2 + 2) = v8 | 4;
    if ((llvm::MCExpr::evaluateAsRelocatableImpl(a2[3], &v16, *(_QWORD *)a1, a1, 0, 0, 1) & 1) != 0)
    {
      v9 = v18;
      if (v16)
      {
        v24[0] = 0;
        result = sub_1C59415F0(a1, *(_QWORD *)(v16 + 16), a3, v24);
        if (!(_DWORD)result)
          return result;
        v9 += v24[0];
      }
      if (v17)
      {
        v24[0] = 0;
        result = sub_1C59415F0(a1, *(_QWORD *)(v17 + 16), a3, v24);
        if (!(_DWORD)result)
          return result;
        v9 -= v24[0];
      }
      *a4 = v9;
      return 1;
    }
    v13 = sub_1C62B94EC(a2);
    v23 = 1283;
    v15 = "unable to evaluate offset for variable '";
LABEL_17:
    v22[0] = (uint64_t)v15;
    v22[2] = v13;
    v22[3] = v14;
    v20 = "'";
    v21 = 259;
    sub_1C6131AAC(v22, (uint64_t *)&v20, (uint64_t)v24);
    llvm::report_fatal_error((uint64_t)v24, 1);
  }
  v11 = *a2;
  if ((unint64_t)*a2 <= 7)
  {
    if (!(_DWORD)a3)
      return 0;
    v13 = sub_1C62B94EC(a2);
    v23 = 1283;
    v15 = "unable to evaluate offset to undefined symbol '";
    goto LABEL_17;
  }
  v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  llvm::MCAsmLayout::ensureValid(a1, (const llvm::MCFragment *)(v11 & 0xFFFFFFFFFFFFFFF8));
  *a4 = a2[3] + *(_QWORD *)(v12 + 32);
  return 1;
}

uint64_t llvm::MCAsmLayout::getSymbolOffset(llvm::MCAsmLayout *this, const llvm::MCSymbol *a2)
{
  uint64_t v3;

  v3 = 0;
  sub_1C59415F0(this, (uint64_t *)a2, 1, &v3);
  return v3;
}

uint64_t llvm::MCAsmLayout::getSectionAddressSize(llvm::MCAsmLayout *this, const llvm::MCSection *a2)
{
  const llvm::MCFragment *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (const llvm::MCFragment *)*((_QWORD *)a2 + 13);
  llvm::MCAsmLayout::ensureValid(this, v3);
  v4 = *((_QWORD *)v3 + 4);
  llvm::MCAssembler::computeFragmentSize(*(_QWORD *)this, (uint64_t)this, (uint64_t)v3);
  return v5 + v4;
}

uint64_t llvm::MCAsmLayout::getSectionFileSize(llvm::MCAsmLayout *this, const llvm::MCFragment **a2)
{
  const llvm::MCFragment *v4;
  uint64_t v5;
  uint64_t v6;

  if (((*((uint64_t (**)(const llvm::MCFragment **))*a2 + 2))(a2) & 1) != 0)
    return 0;
  v4 = a2[13];
  llvm::MCAsmLayout::ensureValid(this, v4);
  v5 = *((_QWORD *)v4 + 4);
  llvm::MCAssembler::computeFragmentSize(*(_QWORD *)this, (uint64_t)this, (uint64_t)v4);
  return v6 + v5;
}

uint64_t llvm::MCFragment::destroy(uint64_t this)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = this;
  switch(*(_BYTE *)(this + 48))
  {
    case 0:
    case 3:
    case 4:
    case 6:
    case 0xA:
    case 0xB:
    case 0xF:
      goto LABEL_23;
    case 1:
      v3 = *(void **)(this + 120);
      if (v3 != (void *)(v1 + 136))
        free(v3);
      goto LABEL_17;
    case 2:
    case 9:
      goto LABEL_17;
    case 5:
      v4 = *(void **)(this + 152);
      if (v4 != (void *)(v1 + 168))
        free(v4);
      v5 = *(void **)(v1 + 96);
      if (v5 != (void *)(v1 + 112))
        free(v5);
      goto LABEL_17;
    case 7:
      v6 = *(void **)(this + 96);
      if (v6 != (void *)(v1 + 112))
        free(v6);
      goto LABEL_17;
    case 8:
    case 0xE:
      v2 = *(void **)(this + 96);
      if (v2 != (void *)(v1 + 112))
        free(v2);
LABEL_17:
      v7 = *(void **)(v1 + 64);
      v8 = (void *)(v1 + 88);
      goto LABEL_18;
    case 0xC:
      v7 = *(void **)(this + 80);
      v8 = (void *)(v1 + 104);
LABEL_18:
      if (v7 != v8)
        free(v7);
      goto LABEL_23;
    case 0xD:
      sub_1C62BA808((_QWORD *)this);
      goto LABEL_23;
    default:
      if (*(unsigned __int8 *)(this + 48) == 255)
LABEL_23:
        JUMPOUT(0x1CAA32FC0);
      return this;
  }
}

uint64_t llvm::MCFragment::MCFragment(uint64_t result, int a2, char a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = -1;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = a2;
  *(_BYTE *)(result + 49) = 0;
  *(_BYTE *)(result + 50) = a3;
  if (a2 != 15)
  {
    if (a4)
    {
      v5 = *(_QWORD *)(a4 + 104);
      v4 = (_QWORD *)(a4 + 104);
      *(_QWORD *)result = v5;
      *(_QWORD *)(result + 8) = v4;
      *(_QWORD *)(v5 + 8) = result;
      *v4 = result;
    }
  }
  return result;
}

{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = -1;
  *(_QWORD *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = a2;
  *(_BYTE *)(result + 49) = 0;
  *(_BYTE *)(result + 50) = a3;
  if (a2 != 15)
  {
    if (a4)
    {
      v5 = *(_QWORD *)(a4 + 104);
      v4 = (_QWORD *)(a4 + 104);
      *(_QWORD *)result = v5;
      *(_QWORD *)(result + 8) = v4;
      *(_QWORD *)(v5 + 8) = result;
      *v4 = result;
    }
  }
  return result;
}

void llvm::MCFragment::dump(llvm::MCFragment *this)
{
  uint64_t *v2;
  llvm::raw_ostream *v3;
  _BYTE *v4;
  uint64_t *v5;
  _QWORD *v6;
  const char *v7;
  _QWORD *v8;
  void *v9;
  llvm::raw_ostream *v10;
  size_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  void *v24;
  _BYTE *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  _OWORD *v33;
  char *v34;
  const char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  char v41;
  char v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  char v49;
  char v50;
  char *v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _DWORD *v60;
  const char *v61;
  llvm::raw_ostream *v62;
  size_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _DWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  llvm::raw_ostream *v95;
  size_t v96;
  _DWORD *v97;
  llvm::raw_ostream *v98;
  size_t v99;
  _BYTE *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _WORD *v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  const char *v111;
  uint64_t v112;
  const char *v113;

  v2 = (uint64_t *)llvm::errs(this);
  v3 = (llvm::raw_ostream *)v2;
  v5 = v2 + 4;
  v4 = (_BYTE *)v2[4];
  if ((_BYTE *)v2[3] == v4)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)v2, "<", 1uLL);
  }
  else
  {
    *v4 = 60;
    ++*v5;
  }
  switch(*((_BYTE *)this + 48))
  {
    case 0:
      v6 = (_QWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v6 <= 0xEuLL)
      {
        v7 = "MCAlignFragment";
        goto LABEL_38;
      }
      v110 = "MCAlignFragment";
      goto LABEL_278;
    case 1:
      v8 = (_QWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v8 <= 0xDuLL)
      {
        v7 = "MCDataFragment";
        goto LABEL_12;
      }
      v111 = "MCDataFragment";
      goto LABEL_264;
    case 2:
      v9 = (void *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v9 <= 0x1BuLL)
      {
        v7 = "MCCompactEncodedInstFragment";
        v10 = v3;
        v11 = 28;
        goto LABEL_39;
      }
      qmemcpy(v9, "MCCompactEncodedInstFragment", 28);
      v112 = *v5 + 28;
      goto LABEL_279;
    case 3:
      v8 = (_QWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v8 <= 0xDuLL)
      {
        v7 = "MCFillFragment";
LABEL_12:
        v10 = v3;
        v11 = 14;
        goto LABEL_39;
      }
      v111 = "MCFillFragment";
LABEL_264:
      *v8 = *(_QWORD *)v111;
      *(_QWORD *)((char *)v8 + 6) = *(_QWORD *)(v111 + 6);
      v112 = *v5 + 14;
      goto LABEL_279;
    case 4:
      v6 = (_QWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v6 <= 0xEuLL)
      {
        v7 = "MCFNopsFragment";
        goto LABEL_38;
      }
      v110 = "MCFNopsFragment";
      goto LABEL_278;
    case 5:
      v12 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v12) <= 0x12)
      {
        v7 = "MCRelaxableFragment";
        v10 = v3;
        v11 = 19;
        goto LABEL_39;
      }
      *(_DWORD *)(v12 + 15) = 1953391981;
      *(_OWORD *)v12 = *(_OWORD *)"MCRelaxableFragment";
      v112 = *v5 + 19;
      goto LABEL_279;
    case 6:
      v13 = (_QWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v13 <= 0xCuLL)
      {
        v7 = "MCOrgFragment";
        goto LABEL_35;
      }
      v113 = "MCOrgFragment";
      goto LABEL_276;
    case 7:
      v6 = (_QWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v6 <= 0xEuLL)
      {
        v7 = "MCDwarfFragment";
        goto LABEL_38;
      }
      v110 = "MCDwarfFragment";
      goto LABEL_278;
    case 8:
      v14 = (void *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v14 <= 0x17uLL)
      {
        v7 = "MCDwarfCallFrameFragment";
        v10 = v3;
        v11 = 24;
        goto LABEL_39;
      }
      qmemcpy(v14, "MCDwarfCallFrameFragment", 24);
      v112 = *v5 + 24;
      goto LABEL_279;
    case 9:
      v13 = (_QWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v13 <= 0xCuLL)
      {
        v7 = "MCLEBFragment";
        goto LABEL_35;
      }
      v113 = "MCLEBFragment";
      goto LABEL_276;
    case 0xA:
      v15 = (void *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v15 <= 0x16uLL)
      {
        v7 = "MCBoundaryAlignFragment";
        v10 = v3;
        v11 = 23;
        goto LABEL_39;
      }
      qmemcpy(v15, "MCBoundaryAlignFragment", 23);
      v112 = *v5 + 23;
      goto LABEL_279;
    case 0xB:
      v16 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v16) <= 0x11)
      {
        v7 = "MCSymbolIdFragment";
        v10 = v3;
        v11 = 18;
        goto LABEL_39;
      }
      *(_WORD *)(v16 + 16) = 29806;
      *(_OWORD *)v16 = *(_OWORD *)"MCSymbolIdFragment";
      v112 = *v5 + 18;
      goto LABEL_279;
    case 0xC:
      v17 = (void *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v17 <= 0x1AuLL)
      {
        v7 = "MCCVInlineLineTableFragment";
        v10 = v3;
        v11 = 27;
        goto LABEL_39;
      }
      qmemcpy(v17, "MCCVInlineLineTableFragment", 27);
      v112 = *v5 + 27;
      goto LABEL_279;
    case 0xD:
      v18 = (void *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v18 <= 0x18uLL)
      {
        v7 = "MCCVDefRangeTableFragment";
        v10 = v3;
        v11 = 25;
        goto LABEL_39;
      }
      qmemcpy(v18, "MCCVDefRangeTableFragment", 25);
      v112 = *v5 + 25;
      goto LABEL_279;
    case 0xE:
      v13 = (_QWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v13 <= 0xCuLL)
      {
        v7 = "MCPseudoProbe";
LABEL_35:
        v10 = v3;
        v11 = 13;
        goto LABEL_39;
      }
      v113 = "MCPseudoProbe";
LABEL_276:
      *v13 = *(_QWORD *)v113;
      *(_QWORD *)((char *)v13 + 5) = *(_QWORD *)(v113 + 5);
      v112 = *v5 + 13;
      goto LABEL_279;
    case 0xF:
      v6 = (_QWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v6 > 0xEuLL)
      {
        v110 = "MCDummyFragment";
LABEL_278:
        *v6 = *(_QWORD *)v110;
        *(_QWORD *)((char *)v6 + 7) = *(_QWORD *)(v110 + 7);
        v112 = *v5 + 15;
LABEL_279:
        *v5 = v112;
      }
      else
      {
        v7 = "MCDummyFragment";
LABEL_38:
        v10 = v3;
        v11 = 15;
LABEL_39:
        llvm::raw_ostream::write(v10, v7, v11);
      }
LABEL_40:
      v19 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v19) > 0xB)
      {
        *(_DWORD *)(v19 + 8) = 544501349;
        *(_QWORD *)v19 = *(_QWORD *)"<MCFragment ";
        *v5 += 12;
      }
      else
      {
        llvm::raw_ostream::write(v3, "<MCFragment ", 0xCuLL);
      }
      llvm::write_hex(v3, (unint64_t)this, 3, 0, 0);
      v20 = (void *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v20 > 0xCuLL)
      {
        qmemcpy(v20, " LayoutOrder:", 13);
        *v5 += 13;
      }
      else
      {
        llvm::raw_ostream::write(v3, " LayoutOrder:", 0xDuLL);
      }
      sub_1C5E21910(v3, *((unsigned int *)this + 10), 0, 0, 0);
      v21 = (_QWORD *)*((_QWORD *)v3 + 4);
      if (*((_QWORD *)v3 + 3) - (_QWORD)v21 > 7uLL)
      {
        *v21 = 0x3A74657366664F20;
        *v5 += 8;
      }
      else
      {
        llvm::raw_ostream::write(v3, " Offset:", 8uLL);
      }
      sub_1C5E21910(v3, *((_QWORD *)this + 4), 0, 0, 0);
      v22 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v22) > 0x10)
      {
        *(_BYTE *)(v22 + 16) = 58;
        *(_OWORD *)v22 = *(_OWORD *)" HasInstructions:";
        *v5 += 17;
      }
      else
      {
        llvm::raw_ostream::write(v3, " HasInstructions:", 0x11uLL);
      }
      sub_1C5E21910(v3, *((unsigned __int8 *)this + 50), 0, 0, 0);
      v23 = *((unsigned __int8 *)this + 48);
      if (v23 <= 0xE && ((1 << v23) & 0x41A6) != 0)
      {
        v24 = (void *)*((_QWORD *)v3 + 4);
        if (*((_QWORD *)v3 + 3) - (_QWORD)v24 > 0xEuLL)
        {
          qmemcpy(v24, " BundlePadding:", 15);
          *v5 += 15;
        }
        else
        {
          llvm::raw_ostream::write(v3, " BundlePadding:", 0xFuLL);
        }
        sub_1C5E21910(v3, *((unsigned __int8 *)this + 52), 0, 0, 0);
      }
      v25 = (_BYTE *)*((_QWORD *)v3 + 4);
      if (*((_BYTE **)v3 + 3) == v25)
      {
        llvm::raw_ostream::write(v3, ">", 1uLL);
      }
      else
      {
        *v25 = 62;
        ++*v5;
      }
      switch(*((_BYTE *)this + 48))
      {
        case 0:
          v29 = *v5;
          if ((*((_BYTE *)this + 56) & 1) != 0)
          {
            if ((unint64_t)(*((_QWORD *)v3 + 3) - v29) > 0xB)
            {
              *(_DWORD *)(v29 + 8) = 695431279;
              *(_QWORD *)v29 = *(_QWORD *)" (emit nops)";
              v29 = *v5 + 12;
              *v5 = v29;
            }
            else
            {
              llvm::raw_ostream::write(v3, " (emit nops)", 0xCuLL);
              v29 = *((_QWORD *)v3 + 4);
            }
          }
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v29) > 7)
          {
            *(_QWORD *)v29 = 0x202020202020200ALL;
            v30 = *v5 + 8;
            *v5 = v30;
          }
          else
          {
            llvm::raw_ostream::write(v3, "\n       ", 8uLL);
            v30 = *((_QWORD *)v3 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v30) > 0xA)
          {
            *(_DWORD *)(v30 + 7) = 980708965;
            *(_QWORD *)v30 = *(_QWORD *)" Alignment:";
            *v5 += 11;
          }
          else
          {
            llvm::raw_ostream::write(v3, " Alignment:", 0xBuLL);
          }
          sub_1C5E21910(v3, *((unsigned int *)this + 13), 0, 0, 0);
          v31 = (_DWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v31 > 6uLL)
          {
            *(_DWORD *)((char *)v31 + 3) = 979727724;
            *v31 = 1818318368;
            *v5 += 7;
          }
          else
          {
            llvm::raw_ostream::write(v3, " Value:", 7uLL);
          }
          llvm::raw_ostream::operator<<(v3, *((_QWORD *)this + 8));
          v32 = *((_QWORD *)v3 + 4);
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v32) > 0xA)
          {
            *(_DWORD *)(v32 + 7) = 979729001;
            *(_QWORD *)v32 = *(_QWORD *)" ValueSize:";
            *v5 += 11;
          }
          else
          {
            llvm::raw_ostream::write(v3, " ValueSize:", 0xBuLL);
          }
          sub_1C5E21910(v3, *((unsigned int *)this + 18), 0, 0, 0);
          v33 = (_OWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v33 > 0xFuLL)
          {
            *v33 = *(_OWORD *)" MaxBytesToEmit:";
            *v5 += 16;
          }
          else
          {
            llvm::raw_ostream::write(v3, " MaxBytesToEmit:", 0x10uLL);
          }
          sub_1C5E21910(v3, *((unsigned int *)this + 19), 0, 0, 0);
          v34 = (char *)*((_QWORD *)v3 + 4);
          if (*((char **)v3 + 3) == v34)
          {
            v35 = ">";
            goto LABEL_198;
          }
          v107 = 62;
          goto LABEL_283;
        case 1:
          v36 = (_QWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v36 > 7uLL)
          {
            *v36 = 0x202020202020200ALL;
            v37 = *v5 + 8;
            *v5 = v37;
          }
          else
          {
            llvm::raw_ostream::write(v3, "\n       ", 8uLL);
            v37 = *((_QWORD *)v3 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v37) > 0xA)
          {
            *(_DWORD *)(v37 + 7) = 1530557300;
            *(_QWORD *)v37 = *(_QWORD *)" Contents:[";
            *v5 += 11;
          }
          else
          {
            llvm::raw_ostream::write(v3, " Contents:[", 0xBuLL);
          }
          v38 = *((unsigned int *)this + 18);
          if (*((_DWORD *)this + 18))
          {
            v39 = 0;
            do
            {
              v40 = (_BYTE *)*v5;
              if (v39)
              {
                if (*((_BYTE **)v3 + 3) == v40)
                {
                  llvm::raw_ostream::write(v3, ",", 1uLL);
                  v40 = (_BYTE *)*((_QWORD *)v3 + 4);
                }
                else
                {
                  *v40 = 44;
                  v40 = (_BYTE *)(*v5 + 1);
                  *v5 = (uint64_t)v40;
                }
              }
              v41 = a0123456789abcd_6[(unint64_t)*(unsigned __int8 *)(*((_QWORD *)this + 8) + v39) >> 4];
              if ((unint64_t)v40 >= *((_QWORD *)v3 + 3))
              {
                llvm::raw_ostream::write(v3, v41);
              }
              else
              {
                *v5 = (uint64_t)(v40 + 1);
                *v40 = v41;
              }
              v42 = a0123456789abcd_6[*(_BYTE *)(*((_QWORD *)this + 8) + v39) & 0xF];
              v43 = (char *)*((_QWORD *)v3 + 4);
              if ((unint64_t)v43 >= *((_QWORD *)v3 + 3))
              {
                llvm::raw_ostream::write(v3, v42);
              }
              else
              {
                *v5 = (uint64_t)(v43 + 1);
                *v43 = v42;
              }
              ++v39;
            }
            while (v38 != v39);
          }
          v85 = *((_QWORD *)v3 + 4);
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v85) > 2)
          {
            *(_BYTE *)(v85 + 2) = 40;
            *(_WORD *)v85 = 8285;
            *v5 += 3;
          }
          else
          {
            llvm::raw_ostream::write(v3, "] (", 3uLL);
          }
          sub_1C5E21910(v3, *((_QWORD *)this + 9), 0, 0, 0);
          v86 = (_DWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v86 > 6uLL)
          {
            *(_DWORD *)((char *)v86 + 3) = 695428468;
            *v86 = 1954112032;
            *v5 += 7;
          }
          else
          {
            llvm::raw_ostream::write(v3, " bytes)", 7uLL);
          }
          if (!*((_DWORD *)this + 32))
            goto LABEL_200;
          v87 = *((_QWORD *)v3 + 4);
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v87) > 8)
          {
            *(_BYTE *)(v87 + 8) = 32;
            *(_QWORD *)v87 = *(_QWORD *)",\n       ";
            v88 = *v5 + 9;
            *v5 = v88;
          }
          else
          {
            llvm::raw_ostream::write(v3, ",\n       ", 9uLL);
            v88 = *((_QWORD *)v3 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v88) > 8)
          {
            *(_BYTE *)(v88 + 8) = 91;
            *(_QWORD *)v88 = *(_QWORD *)" Fixups:[";
            *v5 += 9;
          }
          else
          {
            llvm::raw_ostream::write(v3, " Fixups:[", 9uLL);
          }
          v89 = *((unsigned int *)this + 32);
          if ((_DWORD)v89)
          {
            v90 = *((_QWORD *)this + 15);
            v91 = 24 * v89;
            do
            {
              if (v90 != *((_QWORD *)this + 15))
              {
                v92 = *((_QWORD *)v3 + 4);
                if ((unint64_t)(*((_QWORD *)v3 + 3) - v92) > 0x11)
                {
                  *(_WORD *)(v92 + 16) = 8224;
                  *(_OWORD *)v92 = *(_OWORD *)",\n                ";
                  *v5 += 18;
                }
                else
                {
                  llvm::raw_ostream::write(v3, ",\n                ", 0x12uLL);
                }
              }
              llvm::operator<<(v3, v90);
              v90 += 24;
              v91 -= 24;
            }
            while (v91);
          }
          v34 = (char *)*((_QWORD *)v3 + 4);
          if (*((char **)v3 + 3) == v34)
          {
            v35 = "]";
LABEL_198:
            v98 = v3;
            v99 = 1;
            goto LABEL_199;
          }
          v107 = 93;
LABEL_283:
          *v34 = v107;
          v106 = *v5 + 1;
          goto LABEL_284;
        case 2:
          v44 = (_QWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v44 > 7uLL)
          {
            *v44 = 0x202020202020200ALL;
            v45 = *v5 + 8;
            *v5 = v45;
          }
          else
          {
            llvm::raw_ostream::write(v3, "\n       ", 8uLL);
            v45 = *((_QWORD *)v3 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v45) > 0xA)
          {
            *(_DWORD *)(v45 + 7) = 1530557300;
            *(_QWORD *)v45 = *(_QWORD *)" Contents:[";
            *v5 += 11;
          }
          else
          {
            llvm::raw_ostream::write(v3, " Contents:[", 0xBuLL);
          }
          v46 = *((unsigned int *)this + 18);
          if (*((_DWORD *)this + 18))
          {
            v47 = 0;
            do
            {
              v48 = (_BYTE *)*v5;
              if (v47)
              {
                if (*((_BYTE **)v3 + 3) == v48)
                {
                  llvm::raw_ostream::write(v3, ",", 1uLL);
                  v48 = (_BYTE *)*((_QWORD *)v3 + 4);
                }
                else
                {
                  *v48 = 44;
                  v48 = (_BYTE *)(*v5 + 1);
                  *v5 = (uint64_t)v48;
                }
              }
              v49 = a0123456789abcd_6[(unint64_t)*(unsigned __int8 *)(*((_QWORD *)this + 8) + v47) >> 4];
              if ((unint64_t)v48 >= *((_QWORD *)v3 + 3))
              {
                llvm::raw_ostream::write(v3, v49);
              }
              else
              {
                *v5 = (uint64_t)(v48 + 1);
                *v48 = v49;
              }
              v50 = a0123456789abcd_6[*(_BYTE *)(*((_QWORD *)this + 8) + v47) & 0xF];
              v51 = (char *)*((_QWORD *)v3 + 4);
              if ((unint64_t)v51 >= *((_QWORD *)v3 + 3))
              {
                llvm::raw_ostream::write(v3, v50);
              }
              else
              {
                *v5 = (uint64_t)(v51 + 1);
                *v51 = v50;
              }
              ++v47;
            }
            while (v46 != v47);
          }
          v93 = *((_QWORD *)v3 + 4);
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v93) <= 2)
          {
            v94 = "] (";
            v95 = v3;
            v96 = 3;
            goto LABEL_193;
          }
          *(_BYTE *)(v93 + 2) = 40;
          *(_WORD *)v93 = 8285;
          v109 = *v5 + 3;
          goto LABEL_259;
        case 3:
          v52 = (_DWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v52 > 6uLL)
          {
            *(_DWORD *)((char *)v52 + 3) = 979727724;
            *v52 = 1818318368;
            *v5 += 7;
          }
          else
          {
            llvm::raw_ostream::write(v3, " Value:", 7uLL);
          }
          sub_1C5E21910(v3, *((unsigned int *)this + 14), 0, 0, 0);
          v53 = *((_QWORD *)v3 + 4);
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v53) > 0xA)
          {
            *(_DWORD *)(v53 + 7) = 979729001;
            *(_QWORD *)v53 = *(_QWORD *)" ValueSize:";
            *v5 += 11;
          }
          else
          {
            llvm::raw_ostream::write(v3, " ValueSize:", 0xBuLL);
          }
          sub_1C5E21910(v3, *((unsigned __int8 *)this + 51), 0, 0, 0);
          v54 = *((_QWORD *)v3 + 4);
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v54) > 0xA)
          {
            *(_DWORD *)(v54 + 7) = 980641141;
            *(_QWORD *)v54 = *(_QWORD *)" NumValues:";
            *v5 += 11;
          }
          else
          {
            llvm::raw_ostream::write(v3, " NumValues:", 0xBuLL);
          }
          v28 = *((_QWORD *)this + 8);
          goto LABEL_119;
        case 4:
          v55 = *((_QWORD *)v3 + 4);
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v55) > 9)
          {
            *(_WORD *)(v55 + 8) = 14963;
            *(_QWORD *)v55 = *(_QWORD *)" NumBytes:";
            *v5 += 10;
          }
          else
          {
            llvm::raw_ostream::write(v3, " NumBytes:", 0xAuLL);
          }
          llvm::raw_ostream::operator<<(v3, *((_QWORD *)this + 7));
          v56 = (void *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v56 > 0x14uLL)
          {
            qmemcpy(v56, " ControlledNopLength:", 21);
            *v5 += 21;
          }
          else
          {
            llvm::raw_ostream::write(v3, " ControlledNopLength:", 0x15uLL);
          }
          v57 = *((_QWORD *)this + 8);
          goto LABEL_138;
        case 5:
          v103 = (_QWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v103 > 7uLL)
          {
            *v103 = 0x202020202020200ALL;
            v104 = *v5 + 8;
            *v5 = v104;
          }
          else
          {
            llvm::raw_ostream::write(v3, "\n       ", 8uLL);
            v104 = *((_QWORD *)v3 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v104) > 5)
          {
            *(_WORD *)(v104 + 4) = 14964;
            *(_DWORD *)v104 = 1936607520;
            *v5 += 6;
          }
          else
          {
            llvm::raw_ostream::write(v3, " Inst:", 6uLL);
          }
          llvm::MCInst::dump_pretty((unsigned int *)this + 34, v3, &unk_1C873B97D, 0, " ", 1uLL, 0);
          v105 = (_WORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v105 > 1uLL)
          {
            *v105 = 10272;
            v109 = *v5 + 2;
LABEL_259:
            *v5 = v109;
          }
          else
          {
            v94 = " (";
            v95 = v3;
            v96 = 2;
LABEL_193:
            llvm::raw_ostream::write(v95, v94, v96);
          }
          sub_1C5E21910(v3, *((_QWORD *)this + 9), 0, 0, 0);
          v97 = (_DWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v97 > 6uLL)
          {
            *(_DWORD *)((char *)v97 + 3) = 695428468;
            *v97 = 1954112032;
            v106 = *v5 + 7;
LABEL_284:
            *v5 = v106;
          }
          else
          {
            v35 = " bytes)";
            v98 = v3;
            v99 = 7;
LABEL_199:
            llvm::raw_ostream::write(v98, v35, v99);
          }
          goto LABEL_200;
        case 6:
          v58 = (_QWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v58 > 7uLL)
          {
            *v58 = 0x202020202020200ALL;
            v59 = (_QWORD *)(*v5 + 8);
            *v5 = (uint64_t)v59;
          }
          else
          {
            llvm::raw_ostream::write(v3, "\n       ", 8uLL);
            v59 = (_QWORD *)*((_QWORD *)v3 + 4);
          }
          if (*((_QWORD *)v3 + 3) - (_QWORD)v59 > 7uLL)
          {
            *v59 = 0x3A74657366664F20;
            *v5 += 8;
          }
          else
          {
            llvm::raw_ostream::write(v3, " Offset:", 8uLL);
          }
          llvm::MCExpr::print(*((_QWORD *)this + 7));
          v60 = (_DWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v60 <= 6uLL)
          {
            v61 = " Value:";
            v62 = v3;
            v63 = 7;
            goto LABEL_145;
          }
          *(_DWORD *)((char *)v60 + 3) = 979727724;
          *v60 = 1818318368;
          v108 = *v5 + 7;
          goto LABEL_248;
        case 7:
          v64 = (_QWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v64 > 7uLL)
          {
            *v64 = 0x202020202020200ALL;
            v65 = *v5 + 8;
            *v5 = v65;
          }
          else
          {
            llvm::raw_ostream::write(v3, "\n       ", 8uLL);
            v65 = *((_QWORD *)v3 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v65) > 0xA)
          {
            *(_DWORD *)(v65 + 7) = 979465324;
            *(_QWORD *)v65 = *(_QWORD *)" AddrDelta:";
            *v5 += 11;
          }
          else
          {
            llvm::raw_ostream::write(v3, " AddrDelta:", 0xBuLL);
          }
          llvm::MCExpr::print(*((_QWORD *)this + 18));
          v66 = *((_QWORD *)v3 + 4);
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v66) > 0xA)
          {
            *(_DWORD *)(v66 + 7) = 979465324;
            *(_QWORD *)v66 = *(_QWORD *)" LineDelta:";
            *v5 += 11;
          }
          else
          {
            llvm::raw_ostream::write(v3, " LineDelta:", 0xBuLL);
          }
          v57 = *((_QWORD *)this + 17);
LABEL_138:
          llvm::raw_ostream::operator<<(v3, v57);
          goto LABEL_200;
        case 8:
        case 0xE:
          v26 = (_QWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v26 > 7uLL)
          {
            *v26 = 0x202020202020200ALL;
            v27 = *v5 + 8;
            *v5 = v27;
          }
          else
          {
            llvm::raw_ostream::write(v3, "\n       ", 8uLL);
            v27 = *((_QWORD *)v3 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v27) > 0xA)
          {
            *(_DWORD *)(v27 + 7) = 979465324;
            *(_QWORD *)v27 = *(_QWORD *)" AddrDelta:";
            *v5 += 11;
          }
          else
          {
            llvm::raw_ostream::write(v3, " AddrDelta:", 0xBuLL);
          }
          v28 = *((_QWORD *)this + 17);
LABEL_119:
          llvm::MCExpr::print(v28);
          goto LABEL_200;
        case 9:
          v67 = (_QWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v67 > 7uLL)
          {
            *v67 = 0x202020202020200ALL;
            v68 = (_DWORD *)(*v5 + 8);
            *v5 = (uint64_t)v68;
          }
          else
          {
            llvm::raw_ostream::write(v3, "\n       ", 8uLL);
            v68 = (_DWORD *)*((_QWORD *)v3 + 4);
          }
          if (*((_QWORD *)v3 + 3) - (_QWORD)v68 > 6uLL)
          {
            *(_DWORD *)((char *)v68 + 3) = 979727724;
            *v68 = 1818318368;
            *v5 += 7;
          }
          else
          {
            llvm::raw_ostream::write(v3, " Value:", 7uLL);
          }
          llvm::MCExpr::print(*((_QWORD *)this + 7));
          v69 = (_QWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v69 > 7uLL)
          {
            *v69 = 0x3A64656E67695320;
            v108 = *v5 + 8;
LABEL_248:
            *v5 = v108;
          }
          else
          {
            v61 = " Signed:";
            v62 = v3;
            v63 = 8;
LABEL_145:
            llvm::raw_ostream::write(v62, v61, v63);
          }
          v70 = *((unsigned __int8 *)this + 51);
LABEL_156:
          sub_1C5E21910(v3, v70, 0, 0, 0);
LABEL_200:
          v100 = (_BYTE *)*((_QWORD *)v3 + 4);
          if (*((_BYTE **)v3 + 3) == v100)
          {
            llvm::raw_ostream::write(v3, ">", 1uLL);
          }
          else
          {
            *v100 = 62;
            ++*v5;
          }
          return;
        case 0xA:
          v71 = (_QWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v71 > 7uLL)
          {
            *v71 = 0x202020202020200ALL;
            v72 = (void *)(*v5 + 8);
            *v5 = (uint64_t)v72;
          }
          else
          {
            llvm::raw_ostream::write(v3, "\n       ", 8uLL);
            v72 = (void *)*((_QWORD *)v3 + 4);
          }
          if (*((_QWORD *)v3 + 3) - (_QWORD)v72 > 0xDuLL)
          {
            qmemcpy(v72, " BoundarySize:", 14);
            *v5 += 14;
          }
          else
          {
            llvm::raw_ostream::write(v3, " BoundarySize:", 0xEuLL);
          }
          sub_1C5E21910(v3, 1 << *((_BYTE *)this + 51), 0, 0, 0);
          v73 = (void *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v73 > 0xDuLL)
          {
            qmemcpy(v73, " LastFragment:", 14);
            *v5 += 14;
          }
          else
          {
            llvm::raw_ostream::write(v3, " LastFragment:", 0xEuLL);
          }
          llvm::write_hex(v3, *((_QWORD *)this + 7), 3, 0, 0);
          v74 = *((_QWORD *)v3 + 4);
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v74) > 5)
          {
            *(_WORD *)(v74 + 4) = 14949;
            *(_DWORD *)v74 = 2053722912;
            *v5 += 6;
          }
          else
          {
            llvm::raw_ostream::write(v3, " Size:", 6uLL);
          }
          v70 = *((_QWORD *)this + 8);
          goto LABEL_156;
        case 0xB:
          v75 = (_QWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v75 > 7uLL)
          {
            *v75 = 0x202020202020200ALL;
            v76 = *v5 + 8;
            *v5 = v76;
          }
          else
          {
            llvm::raw_ostream::write(v3, "\n       ", 8uLL);
            v76 = *((_QWORD *)v3 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v76) > 4)
          {
            *(_BYTE *)(v76 + 4) = 58;
            *(_DWORD *)v76 = 1836667680;
            *v5 += 5;
          }
          else
          {
            llvm::raw_ostream::write(v3, " Sym:", 5uLL);
          }
          llvm::write_hex(v3, *((_QWORD *)this + 7), 3, 0, 0);
          goto LABEL_200;
        case 0xC:
          v101 = (_QWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v101 > 7uLL)
          {
            *v101 = 0x202020202020200ALL;
            v102 = *v5 + 8;
            *v5 = v102;
          }
          else
          {
            llvm::raw_ostream::write(v3, "\n       ", 8uLL);
            v102 = *((_QWORD *)v3 + 4);
          }
          if ((unint64_t)(*((_QWORD *)v3 + 3) - v102) > 4)
          {
            *(_BYTE *)(v102 + 4) = 58;
            *(_DWORD *)v102 = 1836667680;
            *v5 += 5;
          }
          else
          {
            llvm::raw_ostream::write(v3, " Sym:", 5uLL);
          }
          llvm::MCSymbol::print(*((llvm::MCSymbol **)this + 8), v3, 0);
          goto LABEL_200;
        case 0xD:
          v77 = (_QWORD *)*((_QWORD *)v3 + 4);
          if (*((_QWORD *)v3 + 3) - (_QWORD)v77 > 7uLL)
          {
            *v77 = 0x202020202020200ALL;
            *v5 += 8;
          }
          else
          {
            llvm::raw_ostream::write(v3, "\n       ", 8uLL);
          }
          v78 = *((unsigned int *)this + 60);
          if ((_DWORD)v78)
          {
            v79 = (unint64_t *)*((_QWORD *)this + 29);
            v80 = &v79[2 * v78];
            do
            {
              v82 = *v79;
              v81 = v79[1];
              v83 = *((_QWORD *)v3 + 4);
              if ((unint64_t)(*((_QWORD *)v3 + 3) - v83) > 0xB)
              {
                *(_DWORD *)(v83 + 8) = 980709985;
                *(_QWORD *)v83 = *(_QWORD *)" RangeStart:";
                *v5 += 12;
              }
              else
              {
                llvm::raw_ostream::write(v3, " RangeStart:", 0xCuLL);
              }
              llvm::write_hex(v3, v82, 3, 0, 0);
              v84 = *((_QWORD *)v3 + 4);
              if ((unint64_t)(*((_QWORD *)v3 + 3) - v84) > 9)
              {
                *(_WORD *)(v84 + 8) = 14948;
                *(_QWORD *)v84 = *(_QWORD *)" RangeEnd:";
                *v5 += 10;
              }
              else
              {
                llvm::raw_ostream::write(v3, " RangeEnd:", 0xAuLL);
              }
              llvm::write_hex(v3, v81, 3, 0, 0);
              v79 += 2;
            }
            while (v79 != v80);
          }
          goto LABEL_200;
        default:
          goto LABEL_200;
      }
    default:
      goto LABEL_40;
  }
}

BOOL llvm::MCOperand::evaluateAsConstantImm(llvm::MCOperand *this, uint64_t *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)this;
  if (v2 == 2)
    *a2 = *((_QWORD *)this + 1);
  return v2 == 2;
}

BOOL llvm::MCOperand::isBareSymbolRef(llvm::MCOperand *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  return *(_BYTE *)v1 == 2 && *(unsigned __int16 *)(v1 + 1) == 0;
}

llvm::raw_ostream *llvm::dumpBytes(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  char v6;
  unint64_t v7;
  _BYTE *v8;
  char v9;
  char *v10;
  char v11;
  char *v12;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    v6 = 1;
    do
    {
      v7 = *(unsigned __int8 *)v5;
      if ((v6 & 1) == 0)
      {
        v8 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v8 >= *((_QWORD *)this + 3))
        {
          result = llvm::raw_ostream::write(this, 32);
        }
        else
        {
          *((_QWORD *)this + 4) = v8 + 1;
          *v8 = 32;
        }
      }
      v9 = a0123456789abcd_0[v7 >> 4];
      v10 = (char *)*((_QWORD *)this + 4);
      if ((unint64_t)v10 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, v9);
      }
      else
      {
        *((_QWORD *)this + 4) = v10 + 1;
        *v10 = v9;
      }
      v11 = a0123456789abcd_0[v7 & 0xF];
      v12 = (char *)*((_QWORD *)this + 4);
      if ((unint64_t)v12 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, v11);
      }
      else
      {
        *((_QWORD *)this + 4) = v12 + 1;
        *v12 = v11;
      }
      v6 = 0;
      v5 = (llvm::raw_ostream *)((char *)v5 + 1);
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t llvm::MCInstPrinter::matchAliasPatterns(uint64_t a1, unsigned int *a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  _BOOL4 v17;
  char v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;
  unsigned int v23;
  int v24;
  uint64_t v25;

  v4 = *a2;
  v5 = a4[1];
  if (v5)
  {
    v6 = (_DWORD *)*a4;
    v7 = a4[1];
    do
    {
      v8 = v7 >> 1;
      v9 = &v6[2 * (v7 >> 1)];
      v11 = *v9;
      v10 = v9 + 2;
      v7 += ~(v7 >> 1);
      if (v11 < v4)
        v6 = v10;
      else
        v7 = v8;
    }
    while (v7);
  }
  else
  {
    v6 = (_DWORD *)*a4;
  }
  if (v6 == (_DWORD *)(*a4 + 8 * v5) || *v6 != v4)
    return 0;
  if (!*((_WORD *)v6 + 3))
  {
    v17 = 0;
    goto LABEL_34;
  }
  v12 = a4[2] + 12 * *((unsigned __int16 *)v6 + 2);
  v13 = v12 + 12 * *((unsigned __int16 *)v6 + 3);
  v14 = a3 + 192;
LABEL_13:
  v15 = a2[6];
  v16 = *(unsigned __int8 *)(v12 + 8);
  v17 = v15 != v16;
  if (v15 != v16)
    goto LABEL_34;
  if (!*(_BYTE *)(v12 + 9))
  {
LABEL_32:
    v17 = 0;
    v23 = *(_DWORD *)v12;
    goto LABEL_35;
  }
  v18 = 0;
  v19 = 8 * *(unsigned __int8 *)(v12 + 9);
  v20 = (_DWORD *)(a4[4] + 8 * *(unsigned int *)(v12 + 4) + 4);
  while (2)
  {
    switch(*((_BYTE *)v20 - 4))
    {
      case 0:
        if (((*(_QWORD *)(v14 + (((unint64_t)*v20 >> 3) & 0x1FFFFFF8)) >> *v20) & 1) == 0)
          goto LABEL_29;
        goto LABEL_27;
      case 1:
        if (((*(_QWORD *)(v14 + (((unint64_t)*v20 >> 3) & 0x1FFFFFF8)) >> *v20) & 1) != 0)
          goto LABEL_29;
        goto LABEL_27;
      case 2:
        v21 = (*(_QWORD *)(v14 + (((unint64_t)*v20 >> 3) & 0x1FFFFFF8)) >> *v20) & 1;
        goto LABEL_24;
      case 3:
        LOBYTE(v21) = ((*(_QWORD *)(v14 + (((unint64_t)*v20 >> 3) & 0x1FFFFFF8)) >> *v20) & 1) == 0;
LABEL_24:
        v18 |= v21;
        goto LABEL_27;
      case 4:
        if (v18)
        {
          v18 = 0;
LABEL_27:
          v20 += 2;
          v19 -= 8;
          if (!v19)
            goto LABEL_32;
          continue;
        }
LABEL_29:
        v12 += 12;
        if (v12 != v13)
          goto LABEL_13;
LABEL_34:
        v23 = -1;
LABEL_35:
        v24 = v23 == -1 || v17;
        v25 = a4[6] + v23;
        if (v24)
          return 0;
        else
          return v25;
      default:
        __asm { BR              X12 }
        return result;
    }
  }
}

const char *llvm::MCInstPrinter::markup(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 48))
    return (const char *)a2;
  else
    return "";
}

uint64_t llvm::MCInstrAnalysis::evaluateBranch()
{
  return 0;
}

void sub_1C5943850()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::MCInstrDesc::mayAffectControlFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;

  if ((*(_WORD *)(a1 + 8) & 0xCA0) != 0)
    return 1;
  v5 = *(_DWORD *)(a3 + 16);
  if (v5)
    return llvm::MCInstrDesc::hasDefOfPhysReg(a1, a2, v5, (_QWORD *)a3);
  else
    return 0;
}

uint64_t llvm::MCInstrDesc::hasDefOfPhysReg(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _WORD *v7;
  int v8;
  unsigned __int16 v9;
  BOOL v10;
  BOOL v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  _WORD *v21;
  int v22;
  unsigned __int16 v23;
  BOOL v24;
  unsigned __int16 *v26;
  int v27;
  int v28;
  BOOL v29;

  if (*(_BYTE *)(a1 + 4))
  {
    v4 = 0;
    v5 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      if (*(_BYTE *)(v5 + 16 * v4) == 1)
      {
        v6 = *(_DWORD *)(v5 + 16 * v4 + 8);
        if (v6 == a3)
          break;
        v7 = (_WORD *)(a4[6] + 2 * *(unsigned int *)(*a4 + 24 * v6 + 8));
        v8 = (unsigned __int16)*v7;
        v9 = v8 + v6;
        v11 = v8 == 0;
        v10 = *v7 != 0;
        v11 = v11 || v9 == a3;
        if (!v11)
        {
          v12 = v7 + 1;
          do
          {
            v14 = *v12++;
            v13 = v14;
            v9 += v14;
            v10 = v14 != 0;
            if (!v14)
              v12 = 0;
            if (v13)
              v15 = v9 == a3;
            else
              v15 = 1;
          }
          while (!v15);
        }
        if (v10)
          break;
      }
      if (++v4 == *(unsigned __int8 *)(a1 + 4))
        goto LABEL_19;
    }
  }
  else
  {
LABEL_19:
    if ((*(_BYTE *)(a1 + 12) & 0x80) == 0)
      return llvm::MCInstrDesc::hasImplicitDefOfPhysReg(a1, a3, a4);
    v16 = *(unsigned __int16 *)(a1 + 2) - 1;
    v17 = *(_DWORD *)(a2 + 24);
    if (v16 == v17)
      return llvm::MCInstrDesc::hasImplicitDefOfPhysReg(a1, a3, a4);
    v18 = *(_QWORD *)(a2 + 16);
    while (1)
    {
      v19 = v16;
      if (*(_BYTE *)(v18 + 16 * v16) == 1)
      {
        v20 = *(_DWORD *)(v18 + 16 * v16 + 8);
        if (v20 == a3)
          break;
        v21 = (_WORD *)(a4[6] + 2 * *(unsigned int *)(*a4 + 24 * v20 + 8));
        v22 = (unsigned __int16)*v21;
        v23 = v22 + v20;
        v11 = v22 == 0;
        v24 = *v21 != 0;
        if (!v11 && v23 != a3)
        {
          v26 = v21 + 1;
          do
          {
            v28 = *v26++;
            v27 = v28;
            v23 += v28;
            v24 = v28 != 0;
            if (!v28)
              v26 = 0;
            if (v27)
              v29 = v23 == a3;
            else
              v29 = 1;
          }
          while (!v29);
        }
        if (v24)
          break;
      }
      v16 = v19 + 1;
      if (v19 + 1 == v17)
        return llvm::MCInstrDesc::hasImplicitDefOfPhysReg(a1, a3, a4);
    }
  }
  return 1;
}

uint64_t llvm::MCInstrDesc::hasImplicitDefOfPhysReg(uint64_t a1, int a2, _QWORD *a3)
{
  unsigned __int16 *v3;
  unsigned __int16 v4;
  _WORD *v5;
  int v6;
  unsigned __int16 v7;
  BOOL v8;
  BOOL v9;
  unsigned __int16 *v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;

  v3 = *(unsigned __int16 **)(a1 + 32);
  if (!v3)
    return 0;
  v4 = *v3;
  if (!*v3)
    return 0;
  while (a2 != v4)
  {
    if (a3)
    {
      v5 = (_WORD *)(a3[6] + 2 * *(unsigned int *)(*a3 + 24 * v4 + 8));
      v6 = (unsigned __int16)*v5;
      v7 = v6 + v4;
      v9 = v6 == 0;
      v8 = *v5 != 0;
      v9 = v9 || v7 == a2;
      if (!v9)
      {
        v10 = v5 + 1;
        do
        {
          v12 = *v10++;
          v11 = v12;
          v7 += v12;
          v8 = v12 != 0;
          if (!v12)
            v10 = 0;
          if (v11)
            v13 = v7 == a2;
          else
            v13 = 1;
        }
        while (!v13);
      }
      if (v8)
        break;
    }
    v14 = v3[1];
    ++v3;
    v4 = v14;
    if (!v14)
      return 0;
  }
  return 1;
}

uint64_t llvm::MCInstrInfo::getDeprecatedInfo(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(unsigned int *, uint64_t, uint64_t);
  uint64_t v8;
  unint64_t v9;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = *(uint64_t (**)(unsigned int *, uint64_t, uint64_t))(v5 + 8 * v4);
    if (v6)
      return v6(a2, a3, a4);
  }
  v8 = *(_QWORD *)(a1 + 24);
  if (!v8)
    return 0;
  v9 = *(unsigned __int8 *)(v8 + v4);
  if (v9 == 255 || ((*(_QWORD *)(a3 + ((v9 >> 3) & 0x18) + 192) >> v9) & 1) == 0)
    return 0;
  MEMORY[0x1CAA32ABC](a4, "deprecated");
  return 1;
}

llvm::raw_ostream *llvm::MCLabel::print(llvm::MCLabel *this, llvm::raw_ostream *a2)
{
  _BYTE *v4;
  llvm::raw_ostream *result;
  _BYTE *v6;

  v4 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v4 >= *((_QWORD *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 34);
  }
  else
  {
    *((_QWORD *)a2 + 4) = v4 + 1;
    *v4 = 34;
  }
  result = sub_1C5E21910(a2, *(unsigned int *)this, 0, 0, 0);
  v6 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)a2 + 3))
    return llvm::raw_ostream::write(a2, 34);
  *((_QWORD *)a2 + 4) = v6 + 1;
  *v6 = 34;
  return result;
}

llvm::raw_ostream *llvm::MCLabel::dump(llvm::MCLabel *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::MCLabel::print(this, v2);
}

llvm::raw_ostream *sub_1C5943BC8(llvm::raw_ostream *this)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E8180F90;
  v2 = (const char *)*((_QWORD *)this + 4);
  v3 = (const char *)*((_QWORD *)this + 2);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    *((_QWORD *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3, v4);
  }
  *(_QWORD *)this = off_1E81A6E70;
  if (*((_DWORD *)this + 14) == 1)
  {
    v6 = *((_QWORD *)this + 2);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924, v4);
  }
  return this;
}

void sub_1C5943C4C(llvm::raw_ostream *this)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E8180F90;
  v2 = (const char *)*((_QWORD *)this + 4);
  v3 = (const char *)*((_QWORD *)this + 2);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    *((_QWORD *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3, v4);
  }
  *(_QWORD *)this = off_1E81A6E70;
  if (*((_DWORD *)this + 14) == 1)
  {
    v5 = *((_QWORD *)this + 2);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8077774924, v4);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5943CE0(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 64) += a3;
  return result;
}

uint64_t sub_1C5943CF0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void sub_1C5943CF8(llvm::MCObjectStreamer *a1)
{
  *(_QWORD *)a1 = off_1E8181008;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 69), 8);
  llvm::MCObjectStreamer::~MCObjectStreamer(a1);
}

void sub_1C5943D30(llvm::MCObjectStreamer *a1)
{
  *(_QWORD *)a1 = off_1E8181008;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 69), 8);
  llvm::MCObjectStreamer::~MCObjectStreamer(a1);
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C5943D7C(uint64_t a1)
{
  int v1;
  unsigned int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)(a1 + 546) = 0;
  v1 = *(_DWORD *)(a1 + 560);
  if (v1)
  {
    v15 = a1 + 552;
    v16 = a1;
    v3 = *(_DWORD *)(a1 + 568);
    if (v3 > 4 * v1 && v3 >= 0x41)
    {
      v4 = 1 << (33 - __clz(v1 - 1));
      if (v4 <= 64)
        v5 = 64;
      else
        v5 = v4;
LABEL_11:
      if (v5 == v3)
      {
        a1 = v16;
        *(_QWORD *)(v16 + 560) = 0;
        v6 = *(_QWORD **)(v16 + 552);
        v7 = 16 * v3;
        do
        {
          *v6 = -4096;
          v6 += 2;
          v7 -= 16;
        }
        while (v7);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v15, 8);
        if (v5)
        {
          v10 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
          v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
          LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
          *(_DWORD *)(v16 + 568) = v11;
          v12 = operator new(16 * v11, (std::align_val_t)8uLL);
          a1 = v16;
          *(_QWORD *)(v16 + 552) = v12;
          *(_QWORD *)(v16 + 560) = 0;
          v13 = *(unsigned int *)(v16 + 568);
          if ((_DWORD)v13)
          {
            v14 = 16 * v13;
            do
            {
              *v12 = -4096;
              v12 += 2;
              v14 -= 16;
            }
            while (v14);
          }
        }
        else
        {
          a1 = v16;
          *(_QWORD *)v15 = 0;
          *(_QWORD *)(v15 + 8) = 0;
          *(_DWORD *)(v15 + 16) = 0;
        }
      }
      return llvm::MCObjectStreamer::reset((llvm::MCObjectStreamer *)a1);
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 564))
      return llvm::MCObjectStreamer::reset((llvm::MCObjectStreamer *)a1);
    v15 = a1 + 552;
    v16 = a1;
    v3 = *(_DWORD *)(a1 + 568);
    if (v3 > 0x40)
    {
      v5 = 0;
      goto LABEL_11;
    }
  }
  if (v3)
  {
    v8 = *(_QWORD **)v15;
    v9 = 16 * v3;
    do
    {
      *v8 = -4096;
      v8 += 2;
      v9 -= 16;
    }
    while (v9);
  }
  a1 = v16;
  *(_QWORD *)(v16 + 560) = 0;
  return llvm::MCObjectStreamer::reset((llvm::MCObjectStreamer *)a1);
}

size_t sub_1C5943F0C(uint64_t a1, uint64_t a2, const llvm::MCExpr *a3)
{
  size_t result;
  uint64_t v7;

  v7 = a2;
  result = llvm::MCObjectStreamer::changeSectionImpl((llvm::MCObjectStreamer *)a1, (llvm::MCSection *)a2, a3);
  if (!*(_BYTE *)(a2 + 239))
  {
    result = strlen((const char *)(a2 + 224));
    if (result == 7 && *(_DWORD *)(a2 + 224) == 1464098655 && *(_DWORD *)(a2 + 227) == 1179795799)
      *(_BYTE *)(a1 + 546) = 1;
  }
  if (*(_BYTE *)(a1 + 544))
  {
    result = (size_t)sub_1C62A9984(a1 + 552, &v7);
    if (!*(_BYTE *)(result + 8) && !*(_QWORD *)(a2 + 8))
    {
      *(_QWORD *)(a2 + 8) = llvm::MCContext::createLinkerPrivateTempSymbol(*(llvm::MCContext **)(a1 + 8));
      result = (size_t)sub_1C62A9984(a1 + 552, &v7);
      *(_BYTE *)(result + 8) = 1;
    }
  }
  return result;
}

void sub_1C5943FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::MCSymbol **v21;
  uint64_t v22;
  llvm::MCSymbol *v23;

  if ((*(_DWORD *)(a2 + 8) & 0x201) != 1)
  {
    v6 = operator new();
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = -1;
    *(_QWORD *)(v6 + 40) = 0;
    *(_BYTE *)(v6 + 48) = 1;
    *(_DWORD *)(v6 + 49) = 0;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 64) = v6 + 88;
    *(_OWORD *)(v6 + 72) = xmmword_1C677F680;
    *(_QWORD *)(v6 + 120) = v6 + 136;
    *(_QWORD *)(v6 + 128) = 0x400000000;
    v7 = *(unsigned int *)(a1 + 120);
    if (!(_DWORD)v7)
      goto LABEL_8;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v7 - 32);
    if (v8)
    {
      v9 = *(unsigned int *)(a1 + 304);
      if ((_DWORD)v9)
      {
        v21 = *(llvm::MCSymbol ***)(a1 + 296);
        v22 = 8 * v9;
        do
        {
          v23 = *v21++;
          llvm::MCSection::addPendingLabel((_DWORD *)v8, v23, *(_DWORD *)(a1 + 416));
          v22 -= 8;
        }
        while (v22);
        *(_DWORD *)(a1 + 304) = 0;
      }
      v10 = *(_DWORD *)(v8 + 160);
      if (v10)
      {
        v15 = *(_DWORD *)(a1 + 416);
        v16 = *(_DWORD **)(v8 + 152);
        v17 = v16;
        do
        {
          if (v17[2] == v15)
          {
            v18 = *(uint64_t **)v17;
            *v18 = **(_QWORD **)v17 & 7 | v6;
            v18[3] = 0;
            *((_DWORD *)v18 + 2) = v18[1] & 0xFFFFE3FF | 0x400;
            v16 = *(_DWORD **)(v8 + 152);
            v19 = *(unsigned int *)(v8 + 160);
            v20 = (char *)&v16[4 * v19] - (char *)(v17 + 4);
            if (v20)
            {
              memmove(v17, v17 + 4, v20 - 4);
              LODWORD(v19) = *(_DWORD *)(v8 + 160);
              v16 = *(_DWORD **)(v8 + 152);
            }
            v17 -= 4;
            v10 = v19 - 1;
            *(_DWORD *)(v8 + 160) = v10;
          }
          v17 += 4;
        }
        while (v17 != &v16[4 * v10]);
      }
    }
    v11 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v11)
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v11 - 32);
    else
LABEL_8:
      v12 = 0;
    v13 = *(uint64_t **)(a1 + 280);
    v14 = *v13;
    *(_QWORD *)v6 = *v13;
    *(_QWORD *)(v6 + 8) = v13;
    *(_QWORD *)(v14 + 8) = v6;
    *v13 = v6;
    *(_QWORD *)(v6 + 16) = v12;
  }
  llvm::MCObjectStreamer::emitLabel(a1, a2, a3);
  *(_WORD *)(a2 + 12) &= 0xFFF8u;
}

_QWORD *sub_1C59441B4(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = result;
  v6 = *(_DWORD *)(a2 + 8);
  if ((v6 & 8) == 0)
  {
    v7 = result[34];
    *(_DWORD *)(a2 + 8) = v6 | 8;
    v10 = a2;
    v8 = *(_QWORD **)(v7 + 64);
    if ((unint64_t)v8 >= *(_QWORD *)(v7 + 72))
    {
      v9 = v7;
      result = sub_1C4DFEA3C((void **)(v7 + 56), &v10);
      v7 = v9;
    }
    else
    {
      *v8 = a2;
      result = v8 + 1;
    }
    *(_QWORD *)(v7 + 64) = result;
    v6 = *(_DWORD *)(a2 + 8);
  }
  if ((v6 & 0x10) != 0)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v5 + 304))(v5, a3, 9);
  if ((*(_WORD *)(a2 + 12) & 0x80) != 0)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v5 + 304))(v5, a3, 24);
  if ((*(_BYTE *)(a2 + 8) & 0x20) != 0)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v5 + 304))(v5, a3, 20);
  return result;
}

uint64_t sub_1C594429C(uint64_t a1, int a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 272) + 8) + 208))(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 8));
  if (a2 == 1)
    *(_BYTE *)(*(_QWORD *)(a1 + 272) + 500) |= 2u;
  return result;
}

void sub_1C59442E8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  __int128 *v10;
  char *v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  void **v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;

  v3 = *(_QWORD **)(a1 + 272);
  if (a3)
  {
    if (a3 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_28;
    v5 = 3 * a3;
    v6 = 24 * a3;
    v7 = (char *)operator new(24 * a3);
    v8 = 0;
    v9 = &v7[8 * v5];
    do
    {
      v10 = (__int128 *)(a2 + v8);
      v11 = &v7[v8];
      if (*(char *)(a2 + v8 + 23) < 0)
      {
        sub_1C47EBC30(v11, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v12 = *v10;
        *((_QWORD *)v11 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v11 = v12;
      }
      v8 += 24;
    }
    while (v6 != v8);
    v13 = &v7[v8];
  }
  else
  {
    v9 = 0;
    v13 = 0;
    v7 = 0;
  }
  v15 = (void **)v3[17];
  v14 = v3[18];
  if ((unint64_t)v15 < v14)
  {
    *v15 = v7;
    v15[1] = v13;
    v15[2] = v9;
    v16 = v15 + 3;
    v28 = 0;
    v29 = 0;
    v27 = 0;
    goto LABEL_27;
  }
  v17 = (_QWORD *)v3[16];
  v18 = 0xAAAAAAAAAAAAAAABLL * (v15 - (void **)v17) + 1;
  if (v18 > 0xAAAAAAAAAAAAAAALL)
LABEL_28:
    abort();
  v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)v17) >> 3);
  if (2 * v19 > v18)
    v18 = 2 * v19;
  if (v19 >= 0x555555555555555)
    v20 = 0xAAAAAAAAAAAAAAALL;
  else
    v20 = v18;
  if (v20 > 0xAAAAAAAAAAAAAAALL)
    sub_1C4764EE4();
  v21 = 3 * v20;
  v22 = (char *)operator new(24 * v20);
  v23 = &v22[8 * (v15 - (void **)v17)];
  *(_QWORD *)v23 = v7;
  *((_QWORD *)v23 + 1) = v13;
  v24 = &v22[8 * v21];
  *((_QWORD *)v23 + 2) = v9;
  v16 = v23 + 24;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  if (v15 == v17)
  {
    v3[16] = v23;
    v3[17] = v16;
    v3[18] = v24;
  }
  else
  {
    do
    {
      v25 = *(_OWORD *)(v15 - 3);
      v15 -= 3;
      *(_OWORD *)(v23 - 24) = v25;
      v23 -= 24;
      *((_QWORD *)v23 + 2) = v15[2];
      *v15 = 0;
      v15[1] = 0;
      v15[2] = 0;
    }
    while (v15 != v17);
    v15 = (void **)v3[16];
    v26 = (void **)v3[17];
    v3[16] = v23;
    v3[17] = v16;
    v3[18] = v24;
    while (v26 != v15)
    {
      v26 -= 3;
      v30 = v26;
      sub_1C4765410(&v30);
    }
  }
  if (v15)
    operator delete(v15);
LABEL_27:
  v3[17] = v16;
  v30 = (void **)&v27;
  sub_1C4765410(&v30);
}

uint64_t sub_1C59444C8(uint64_t result, void *__src, size_t __len)
{
  _QWORD *v3;
  __int128 *v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  int64x2_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  _QWORD *v25;

  v3 = *(_QWORD **)(result + 272);
  if (!__src)
  {
    v20 = 0uLL;
    v21 = 0;
    goto LABEL_12;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_31;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&v20 + 1) = __len;
    v21 = v8 | 0x8000000000000000;
    *(_QWORD *)&v20 = v6;
  }
  else
  {
    HIBYTE(v21) = __len;
    v6 = &v20;
    if (!__len)
      goto LABEL_11;
  }
  result = (uint64_t)memmove(v6, __src, __len);
LABEL_11:
  *((_BYTE *)v6 + __len) = 0;
LABEL_12:
  v9 = v3[21];
  v10 = v3[20];
  if (v10 < v9)
  {
    *(_OWORD *)v10 = v20;
    *(_QWORD *)(v10 + 16) = v21;
    v11 = v10 + 24;
    goto LABEL_30;
  }
  v12 = v3[19];
  v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v12) >> 3) + 1;
  if (v13 > 0xAAAAAAAAAAAAAAALL)
LABEL_31:
    abort();
  if (0x5555555555555556 * ((uint64_t)(v9 - v12) >> 3) > v13)
    v13 = 0x5555555555555556 * ((uint64_t)(v9 - v12) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v12) >> 3) >= 0x555555555555555)
    v14 = 0xAAAAAAAAAAAAAAALL;
  else
    v14 = v13;
  v25 = v3 + 21;
  if (v14)
  {
    if (v14 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v15 = (char *)operator new(24 * v14);
  }
  else
  {
    v15 = 0;
  }
  v16 = &v15[8 * ((uint64_t)(v10 - v12) >> 3)];
  *(_OWORD *)v16 = v20;
  *((_QWORD *)v16 + 2) = v21;
  if (v10 == v12)
  {
    v19 = vdupq_n_s64(v10);
    v17 = &v15[8 * ((uint64_t)(v10 - v12) >> 3)];
  }
  else
  {
    v17 = &v15[8 * ((uint64_t)(v10 - v12) >> 3)];
    do
    {
      v18 = *(_OWORD *)(v10 - 24);
      *((_QWORD *)v17 - 1) = *(_QWORD *)(v10 - 8);
      *(_OWORD *)(v17 - 24) = v18;
      v17 -= 24;
      *(_QWORD *)(v10 - 16) = 0;
      *(_QWORD *)(v10 - 8) = 0;
      *(_QWORD *)(v10 - 24) = 0;
      v10 -= 24;
    }
    while (v10 != v12);
    v19 = *(int64x2_t *)(v3 + 19);
    v9 = v3[21];
  }
  v11 = (unint64_t)(v16 + 24);
  v3[19] = v17;
  v3[20] = v16 + 24;
  v23 = v19;
  v3[21] = &v15[24 * v14];
  v24 = v9;
  v22 = v19.i64[0];
  result = sub_1C4D868F0((uint64_t)&v22);
LABEL_30:
  v3[20] = v11;
  return result;
}

void sub_1C59446B8(_QWORD *a1, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t TempSymbol;
  const char *v7;
  __int16 v8;

  switch(a2)
  {
    case 0:
      v3 = 1;
      goto LABEL_6;
    case 1:
      v3 = 2;
      goto LABEL_6;
    case 2:
      v3 = 3;
      goto LABEL_6;
    case 3:
      v3 = 4;
LABEL_6:
      sub_1C594561C(a1, v3);
      break;
    case 4:
      v4 = *(_QWORD *)(a1[34] + 112);
      v5 = a1[1];
      v7 = "tmp";
      v8 = 259;
      TempSymbol = llvm::MCContext::createTempSymbol(v5, (uint64_t)&v7, 1);
      *(_QWORD *)(v4 - 8) = TempSymbol;
      (*(void (**)(_QWORD *, unint64_t, _QWORD))(*a1 + 192))(a1, TempSymbol, 0);
      break;
    default:
      return;
  }
}

uint64_t sub_1C5944790(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  v7 = *(_QWORD *)(result + 272);
  *(_BYTE *)(v7 + 2072) = 0;
  *(_DWORD *)(v7 + 2076) = a2;
  *(_DWORD *)(v7 + 2080) = a3;
  *(_DWORD *)(v7 + 2084) = a4;
  *(_DWORD *)(v7 + 2088) = a5;
  *(_QWORD *)(v7 + 2092) = a6;
  *(_QWORD *)(v7 + 2100) = a7;
  return result;
}

uint64_t sub_1C59447B4(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  v7 = *(_QWORD *)(result + 272);
  *(_BYTE *)(v7 + 2072) = 1;
  *(_DWORD *)(v7 + 2076) = a2;
  *(_DWORD *)(v7 + 2080) = a3;
  *(_DWORD *)(v7 + 2084) = a4;
  *(_DWORD *)(v7 + 2088) = a5;
  *(_QWORD *)(v7 + 2092) = a6;
  *(_QWORD *)(v7 + 2100) = a7;
  return result;
}

uint64_t sub_1C59447DC(uint64_t result, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  v7 = *(_QWORD *)(result + 272);
  *(_BYTE *)(v7 + 2108) = 1;
  *(_DWORD *)(v7 + 2112) = a2;
  *(_DWORD *)(v7 + 2116) = a3;
  *(_DWORD *)(v7 + 2120) = a4;
  *(_DWORD *)(v7 + 2124) = a5;
  *(_QWORD *)(v7 + 2128) = a6;
  *(_QWORD *)(v7 + 2136) = a7;
  return result;
}

uint64_t sub_1C5944804(uint64_t result, int a2, char a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 272);
  if (!*(_BYTE *)(v3 + 2148))
    *(_BYTE *)(v3 + 2148) = 1;
  *(_DWORD *)(v3 + 2144) = a2;
  *(_BYTE *)(*(_QWORD *)(result + 272) + 2152) = a3;
  return result;
}

_QWORD *sub_1C5944828(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(*(_QWORD *)(a1 + 272) + 208), a2);
  *(_WORD *)(a2 + 12) |= 8u;
  return result;
}

int32x2_t sub_1C594485C(llvm::MCObjectStreamer *a1, llvm::MCSymbol *a2, const llvm::MCExpr **a3)
{
  llvm::MCExpr::evaluateAsRelocatableImpl((uint64_t)a3);
  return llvm::MCObjectStreamer::emitAssignment(a1, a2, a3);
}

uint64_t sub_1C5944910(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t result;
  __int16 v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  if (a3 == 13)
  {
    v4 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v4)
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v4 - 32);
    else
      v5 = 0;
    v13 = *(_QWORD **)(a1 + 272);
    v15 = (char *)v13[11];
    v14 = v13[12];
    if ((unint64_t)v15 >= v14)
    {
      v17 = (char *)v13[10];
      v18 = (v15 - v17) >> 4;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60)
        abort();
      v20 = v14 - (_QWORD)v17;
      if (v20 >> 3 > v19)
        v19 = v20 >> 3;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
        v21 = 0xFFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 60)
          sub_1C4764EE4();
        v22 = (char *)operator new(16 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[16 * v18];
      *(_QWORD *)v23 = a2;
      *((_QWORD *)v23 + 1) = v5;
      v16 = v23 + 16;
      if (v15 != v17)
      {
        do
        {
          *((_OWORD *)v23 - 1) = *((_OWORD *)v15 - 1);
          v23 -= 16;
          v15 -= 16;
        }
        while (v15 != v17);
        v15 = (char *)v13[10];
      }
      v13[10] = v23;
      v13[11] = v16;
      v13[12] = &v22[16 * v21];
      if (v15)
        operator delete(v15);
    }
    else
    {
      *(_QWORD *)v15 = a2;
      *((_QWORD *)v15 + 1) = v5;
      v16 = v15 + 16;
    }
    v13[11] = v16;
  }
  else
  {
    v7 = *(_DWORD *)(a2 + 8);
    if ((v7 & 8) == 0)
    {
      v8 = *(_QWORD *)(a1 + 272);
      *(_DWORD *)(a2 + 8) = v7 | 8;
      v26 = a2;
      v9 = *(_QWORD **)(v8 + 64);
      if ((unint64_t)v9 >= *(_QWORD *)(v8 + 72))
      {
        v10 = sub_1C4DFEA3C((void **)(v8 + 56), &v26);
      }
      else
      {
        *v9 = a2;
        v10 = v9 + 1;
      }
      *(_QWORD *)(v8 + 64) = v10;
    }
    result = 0;
    switch(a3)
    {
      case 0:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
      case 11:
      case 12:
      case 14:
      case 16:
      case 21:
      case 23:
        return result;
      case 1:
        v12 = *(_WORD *)(a2 + 12) | 0x400;
        goto LABEL_42;
      case 9:
        *(_DWORD *)(a2 + 8) |= 0x10u;
        v12 = *(_WORD *)(a2 + 12) & 0xFFFE;
        goto LABEL_42;
      case 15:
        *(_WORD *)(a2 + 12) |= 0x20u;
        v24 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
        if (!v24 && (*(_DWORD *)(a2 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(a2 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a2 + 24));
          *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v24;
        }
        if (v24)
          return 1;
        v12 = *(_WORD *)(a2 + 12) | 1;
        goto LABEL_42;
      case 17:
      case 22:
        v12 = *(_WORD *)(a2 + 12) | 0x20;
        goto LABEL_42;
      case 18:
        v12 = *(_WORD *)(a2 + 12) | 0x100;
        goto LABEL_42;
      case 19:
        v12 = *(_WORD *)(a2 + 12) | 0x200;
        goto LABEL_42;
      case 20:
        *(_DWORD *)(a2 + 8) |= 0x30u;
        return 1;
      case 24:
        v12 = *(_WORD *)(a2 + 12) | 0x80;
        goto LABEL_42;
      case 25:
        v25 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
        if (!v25 && (*(_DWORD *)(a2 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(a2 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a2 + 24));
          *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v25;
        }
        if (v25)
          return 1;
        v12 = *(_WORD *)(a2 + 12) | 0x40;
        goto LABEL_42;
      case 26:
        v12 = *(_WORD *)(a2 + 12) | 0xC0;
LABEL_42:
        *(_WORD *)(a2 + 12) = v12;
        break;
      default:
        return 1;
    }
  }
  return 1;
}

_QWORD *sub_1C5944BC4(_QWORD *result, uint64_t a2, __int16 a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_DWORD *)(a2 + 8);
  if ((v3 & 8) == 0)
  {
    v4 = result[34];
    *(_DWORD *)(a2 + 8) = v3 | 8;
    v9 = a2;
    v5 = *(_QWORD **)(v4 + 64);
    if ((unint64_t)v5 >= *(_QWORD *)(v4 + 72))
    {
      v7 = v4;
      v8 = a2;
      v6 = a3;
      result = sub_1C4DFEA3C((void **)(v4 + 56), &v9);
      v4 = v7;
      a2 = v8;
      a3 = v6;
    }
    else
    {
      *v5 = a2;
      result = v5 + 1;
    }
    *(_QWORD *)(v4 + 64) = result;
  }
  *(_WORD *)(a2 + 12) = a3;
  return result;
}

void sub_1C5944C2C(uint64_t a1, int a2, uint64_t a3)
{
  sub_1C62BB340(*(_QWORD *)(a1 + 272) + 512, a2, *(_BYTE **)a3, *(_DWORD *)(a3 + 8));
}

_QWORD *sub_1C5944C44(_QWORD *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 8) == 0)
  {
    v5 = result[34];
    *(_DWORD *)(a2 + 8) = v4 | 8;
    v11 = a2;
    v6 = *(_QWORD **)(v5 + 64);
    if ((unint64_t)v6 >= *(_QWORD *)(v5 + 72))
    {
      v10 = a2;
      v8 = a4;
      v9 = a3;
      v7 = v5;
      result = sub_1C4DFEA3C((void **)(v5 + 56), &v11);
      v5 = v7;
      a3 = v9;
      a4 = v8;
      a2 = v10;
    }
    else
    {
      *v6 = a2;
      result = v6 + 1;
    }
    *(_QWORD *)(v5 + 64) = result;
    v4 = *(_DWORD *)(a2 + 8);
  }
  *(_QWORD *)(a2 + 24) = a3;
  *(_DWORD *)(a2 + 8) = (-8192 * __clz(a4)) & 0x3E000 | 0xC10 | v4 & 0xFFFC0FFF;
  return result;
}

uint64_t sub_1C5944CE0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(*a1 + 472))(a1, *(_QWORD *)(*(_QWORD *)(a1[1] + 168) + 608), a2, a3, a4, 0);
}

uint64_t sub_1C5944D04(llvm::MCStreamer *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 v12;
  uint64_t v14;
  const char *v15;
  __int16 v16;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) & 1) != 0)
  {
    v12 = sub_1C62B9A74((uint64_t)a1);
    (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD, __n128))(*(_QWORD *)a1 + 168))(a1, a2, 0, v12);
    if (a3)
    {
      (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 632))(a1, a5, 0, 1, 0);
      (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD))(*(_QWORD *)a1 + 192))(a1, a3, 0);
      llvm::MCStreamer::emitZeros(a1, a4);
    }
    return sub_1C593C604((uint64_t)a1);
  }
  else
  {
    v14 = *((_QWORD *)a1 + 1);
    v15 = "The usage of .zerofill is restricted to sections of ZEROFILL type. Use .zero or .space instead.";
    v16 = 259;
    return llvm::MCContext::reportError(v14, a6, (uint64_t)&v15);
  }
}

uint64_t sub_1C5944E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 472))(a1, a2, a3, a4, a5, 0);
}

void sub_1C5944E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + 8) & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(a3 + 16) + 8) & 1) == 0)
  {
    v7 = *(_QWORD **)(a1 + 272);
    v8 = (_QWORD *)v7[274];
    v9 = v7[275];
    if ((unint64_t)v8 >= v9)
    {
      v11 = (_QWORD *)v7[273];
      v12 = 0xAAAAAAAAAAAAAAABLL * (v8 - v11) + 1;
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v11) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v15 = (char *)operator new(24 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * (v8 - v11)];
      *(_QWORD *)v16 = a2;
      *((_QWORD *)v16 + 1) = a3;
      *((_QWORD *)v16 + 2) = a4;
      v10 = v16 + 24;
      if (v8 != v11)
      {
        do
        {
          v17 = *(_OWORD *)(v8 - 3);
          *((_QWORD *)v16 - 1) = *(v8 - 1);
          *(_OWORD *)(v16 - 24) = v17;
          v16 -= 24;
          v8 -= 3;
        }
        while (v8 != v11);
        v8 = (_QWORD *)v7[273];
      }
      v7[273] = v16;
      v7[274] = v10;
      v7[275] = &v15[24 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = a2;
      v8[1] = a3;
      v10 = v8 + 3;
      v8[2] = a4;
    }
    v7[274] = v10;
  }
}

uint64_t sub_1C5944F74(llvm::MCStreamer *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  char v14;
  unint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  size_t MachOSection;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unint64_t *v56;

  llvm::MCObjectStreamer::emitFrames(a1, *(llvm::MCAsmBackend **)(*((_QWORD *)a1 + 34) + 8));
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v2 = (uint64_t *)*((_QWORD *)a1 + 34);
  v3 = v2[7];
  v4 = v2[8];
  if (v3 != v4)
  {
    v5 = 0;
    while (1)
    {
      v6 = *(_QWORD *)v3;
      v7 = *(_DWORD *)(*(_QWORD *)v3 + 8);
      if ((v7 & 0x201) != 1)
      {
        v8 = *(_QWORD *)v6;
        v9 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
        if ((v7 & 0x1C00) == 0x800 && v9 == 0)
        {
          *(_DWORD *)(v6 + 8) = v7 | 4;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v6 + 24));
          v8 = *(_QWORD *)v6 & 7 | v17;
          *(_QWORD *)v6 = v8;
          if (!v17)
            goto LABEL_22;
LABEL_9:
          v11 = v8 & 0xFFFFFFFFFFFFFFF8;
          if ((v8 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v6 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v6 + 8) |= 4u;
            llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v6 + 24));
            v8 = *(_QWORD *)v6 & 7 | v11;
            *(_QWORD *)v6 = v8;
          }
          if ((_UNKNOWN *)v11 == llvm::MCSymbol::AbsolutePseudoFragment || (*(_DWORD *)(v6 + 8) & 0x1C00) == 0x800)
            goto LABEL_22;
          v12 = v8 & 0xFFFFFFFFFFFFFFF8;
          v56 = 0;
          v13 = v55;
          v14 = sub_1C4F575EC(v5, v55, v8 & 0xFFFFFFFFFFFFFFF8, &v56);
          v15 = v56;
          if ((v14 & 1) == 0)
          {
            if (4 * (int)v54 + 4 >= 3 * v13)
            {
              v16 = 2 * v13;
LABEL_17:
              sub_1C4F57680((uint64_t)&v53, v16);
              v56 = 0;
              v5 = v53;
              sub_1C4F575EC(v53, v55, v12, &v56);
              v15 = v56;
            }
            else if (v13 + ~(_DWORD)v54 - HIDWORD(v54) <= v13 >> 3)
            {
              v16 = v13;
              goto LABEL_17;
            }
            LODWORD(v54) = v54 + 1;
            if (*v15 != -4096)
              --HIDWORD(v54);
            *v15 = v12;
            v15[1] = 0;
          }
          v15[1] = v6;
          goto LABEL_22;
        }
        if (v9)
          goto LABEL_9;
      }
LABEL_22:
      v3 += 8;
      if (v3 == v4)
      {
        v2 = (uint64_t *)*((_QWORD *)a1 + 34);
        break;
      }
    }
  }
  v18 = v2[4];
  v19 = v2[5];
  if (v18 == v19)
    goto LABEL_45;
  v20 = v53;
  v21 = v55;
  v22 = v55 - 1;
  do
  {
    v23 = *(_QWORD *)v18 + 104;
    v24 = *(_QWORD *)(*(_QWORD *)v18 + 112);
    if (v24 != v23)
    {
      v25 = 0;
      while (1)
      {
        if (!v21)
          goto LABEL_39;
        v26 = ((v24 >> 4) ^ (v24 >> 9)) & v22;
        v27 = *(_QWORD *)(v20 + 16 * v26);
        if (v24 != v27)
          break;
LABEL_34:
        v28 = *(_QWORD *)(v20 + 16 * v26 + 8);
LABEL_40:
        if (v28)
          v25 = v28;
        *(_QWORD *)(v24 + 24) = v25;
        v24 = *(_QWORD *)(v24 + 8);
        if (v24 == v23)
          goto LABEL_43;
      }
      v29 = 1;
      while (v27 != -4096)
      {
        v30 = v26 + v29++;
        v26 = v30 & v22;
        v27 = *(_QWORD *)(v20 + 16 * v26);
        if (v24 == v27)
          goto LABEL_34;
      }
LABEL_39:
      v28 = 0;
      goto LABEL_40;
    }
LABEL_43:
    v18 += 8;
  }
  while (v18 != v19);
  v2 = (uint64_t *)*((_QWORD *)a1 + 34);
LABEL_45:
  v31 = (_QWORD *)v2[273];
  v32 = (_QWORD *)v2[274];
  if (v31 != v32)
  {
    do
    {
      v33 = *(_QWORD *)(*v31 + 16);
      v34 = *((_QWORD *)a1 + 34);
      v35 = *(_DWORD *)(v33 + 8);
      if ((v35 & 8) == 0)
      {
        *(_DWORD *)(v33 + 8) = v35 | 8;
        v56 = (unint64_t *)v33;
        v36 = *(_QWORD **)(v34 + 64);
        if ((unint64_t)v36 >= *(_QWORD *)(v34 + 72))
        {
          v37 = sub_1C4DFEA3C((void **)(v34 + 56), &v56);
        }
        else
        {
          *v36 = v33;
          v37 = v36 + 1;
        }
        *(_QWORD *)(v34 + 64) = v37;
        *(_DWORD *)(v33 + 8) |= 0x10u;
        v34 = *((_QWORD *)a1 + 34);
      }
      v38 = *(_QWORD *)(v31[1] + 16);
      v39 = *(_DWORD *)(v38 + 8);
      if ((v39 & 8) == 0)
      {
        *(_DWORD *)(v38 + 8) = v39 | 8;
        v56 = (unint64_t *)v38;
        v40 = *(_QWORD **)(v34 + 64);
        if ((unint64_t)v40 >= *(_QWORD *)(v34 + 72))
        {
          v41 = sub_1C4DFEA3C((void **)(v34 + 56), &v56);
        }
        else
        {
          *v40 = v38;
          v41 = v40 + 1;
        }
        *(_QWORD *)(v34 + 64) = v41;
        *(_DWORD *)(v38 + 8) |= 0x10u;
      }
      v31 += 3;
    }
    while (v31 != v32);
    MachOSection = llvm::MCContext::getMachOSection(*v2, (uint64_t)"__LLVM", 6uLL, (uint64_t)"__cg_profile", 12, 0, 0, 0, 0);
    llvm::MCAssembler::registerSection((uint64_t)v2, MachOSection);
    v43 = operator new();
    *(_QWORD *)(v43 + 16) = MachOSection;
    *(_QWORD *)(v43 + 24) = 0;
    *(_QWORD *)(v43 + 32) = -1;
    *(_QWORD *)(v43 + 40) = 0;
    v45 = *(_QWORD *)(MachOSection + 104);
    v44 = (uint64_t *)(MachOSection + 104);
    *(_QWORD *)v43 = v45;
    *(_QWORD *)(v43 + 8) = v44;
    *(_QWORD *)(v45 + 8) = v43;
    *v44 = v43;
    *(_DWORD *)(v43 + 48) = 1;
    *(_BYTE *)(v43 + 52) = 0;
    *(_QWORD *)(v43 + 64) = v43 + 88;
    v46 = (_QWORD *)(v43 + 64);
    *(_QWORD *)(v43 + 56) = 0;
    *(_OWORD *)(v43 + 72) = xmmword_1C677F680;
    *(_QWORD *)(v43 + 120) = v43 + 136;
    *(_QWORD *)(v43 + 128) = 0x400000000;
    v47 = v2[274] - v2[273];
    if (v47)
    {
      v49 = v43;
      v50 = v47 >> 3;
      v51 = 0xAAAAAAAAAAAAAAB0 * v50;
      if (0xAAAAAAAAAAAAAAB0 * v50 < 0x21)
      {
        v52 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(v43 + 64, (void *)(v43 + 88), 0xAAAAAAAAAAAAAAB0 * v50, 1);
        v52 = *(_QWORD *)(v49 + 72);
      }
      if (v51 != v52)
        bzero((void *)(*v46 + v52), v51 - v52);
      *(_QWORD *)(v49 + 72) = v51;
    }
  }
  llvm::MCObjectStreamer::finishImpl((llvm::MCContext **)a1);
  return MEMORY[0x1CAA32FB4](v53, 8);
}

void sub_1C594540C(llvm::MCObjectStreamer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DataFragment;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  int v17;
  void *v18;
  __int128 v19;
  _BYTE v20[256];
  _QWORD *v21;
  uint64_t v22;
  _QWORD v23[13];

  v23[12] = *MEMORY[0x1E0C80C00];
  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(a1, 0);
  v21 = v23;
  v22 = 0x400000000;
  v18 = v20;
  v19 = xmmword_1C64638F0;
  sub_1C613932C((uint64_t)v15, (uint64_t)&v18);
  (*(void (**)(_QWORD, uint64_t, _QWORD *, _QWORD **, uint64_t))(**(_QWORD **)(*((_QWORD *)a1 + 34) + 16)
                                                                        + 32))(*(_QWORD *)(*((_QWORD *)a1 + 34) + 16), a2, v15, &v21, a3);
  if ((_DWORD)v22)
  {
    v7 = v21;
    v8 = 24 * v22;
    do
    {
      v7[2] += *(_DWORD *)(DataFragment + 72);
      v9 = sub_1C4926708(DataFragment + 120, (unint64_t)v7, 1);
      v10 = *(_QWORD *)(DataFragment + 120) + 24 * *(unsigned int *)(DataFragment + 128);
      v11 = *(_OWORD *)v9;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v10 = v11;
      ++*(_DWORD *)(DataFragment + 128);
      v7 += 6;
      v8 -= 24;
    }
    while (v8);
  }
  *(_BYTE *)(DataFragment + 50) = 1;
  *(_QWORD *)(DataFragment + 56) = a3;
  v13 = v18;
  v12 = v19;
  v14 = *(_QWORD *)(DataFragment + 72);
  if (*(_QWORD *)(DataFragment + 80) < (unint64_t)(v14 + v19))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(DataFragment + 64, (void *)(DataFragment + 88), v14 + v19, 1);
    v14 = *(_QWORD *)(DataFragment + 72);
    if (!v12)
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((_QWORD)v19)
  {
LABEL_6:
    memcpy((void *)(*(_QWORD *)(DataFragment + 64) + v14), v13, v12);
    v14 = *(_QWORD *)(DataFragment + 72);
  }
LABEL_7:
  *(_QWORD *)(DataFragment + 72) = v14 + v12;
  v15[0] = off_1E81A6E70;
  if (v17 == 1 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8077774924);
  if (v18 != v20)
    free(v18);
  if (v21 != v23)
    free(v21);
}

void sub_1C594561C(_QWORD *a1, int a2)
{
  uint64_t v4;
  unint64_t TempSymbol;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  const char *v17;
  __int16 v18;

  v4 = a1[1];
  v17 = "tmp";
  v18 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(v4, (uint64_t)&v17, 1);
  (*(void (**)(_QWORD *, unint64_t, _QWORD))(*a1 + 192))(a1, TempSymbol, 0);
  v6 = (_QWORD *)a1[34];
  v8 = (char *)v6[14];
  v7 = v6[15];
  if ((unint64_t)v8 >= v7)
  {
    v10 = (char *)v6[13];
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v10) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v10) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v14 = (char *)operator new(24 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * ((v8 - v10) >> 3)];
    *(_DWORD *)v15 = a2;
    *((_DWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 1) = TempSymbol;
    *((_QWORD *)v15 + 2) = 0;
    v9 = v15 + 24;
    if (v8 != v10)
    {
      do
      {
        v16 = *(_OWORD *)(v8 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v8 - 1);
        *(_OWORD *)(v15 - 24) = v16;
        v15 -= 24;
        v8 -= 24;
      }
      while (v8 != v10);
      v8 = (char *)v6[13];
    }
    v6[13] = v15;
    v6[14] = v9;
    v6[15] = &v14[24 * v13];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v8 = a2;
    *((_DWORD *)v8 + 1) = 0;
    v9 = v8 + 24;
    *((_QWORD *)v8 + 1) = TempSymbol;
    *((_QWORD *)v8 + 2) = 0;
  }
  v6[14] = v9;
}

unint64_t sub_1C5945798(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 48 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C62BB44C(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C62BB44C(a1, v5);
    }
  }
  return a2;
}

void llvm::MCNullInstPrinter::~MCNullInstPrinter(llvm::MCNullInstPrinter *this)
{
  JUMPOUT(0x1CAA32FC0);
}

const char *llvm::MCNullInstPrinter::getMnemonic()
{
  return "";
}

llvm::raw_ostream *llvm::MCNullInstPrinter::printInst(int a1, int a2, int a3, int a4, int a5, int a6, llvm::raw_ostream *this)
{
  _BYTE *v7;
  llvm::raw_ostream *result;

  v7 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v7)
    return llvm::raw_ostream::write(this, "-", 1uLL);
  *v7 = 45;
  ++*((_QWORD *)this + 4);
  return result;
}

void sub_1C5945870(llvm::MCStreamer *a1)
{
  llvm::MCStreamer::~MCStreamer(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5945894()
{
  return 1;
}

uint64_t sub_1C594589C()
{
  return 1;
}

size_t llvm::MCObjectFileInfo::initMachOMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  unsigned int v4;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  size_t MachOSection;
  size_t v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  size_t result;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;

  *((_BYTE *)this + 9) = 0;
  *((_QWORD *)this + 57) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__eh_frame", 10, 1744830475, 0, 4, 0);
  v4 = *((_DWORD *)a2 + 9);
  if (v4 <= 0x21 && ((1 << v4) & 0x3F0000888) != 0)
  {
    v6 = *((_DWORD *)a2 + 6);
    if (v6 == 5 || v6 == 3)
      *((_BYTE *)this + 10) = 1;
  }
  v7 = *(_QWORD *)(*((_QWORD *)this + 105) + 1952);
  if (!v7 || (v8 = *(_DWORD *)(v7 + 4), v8 == 2))
  {
    LOBYTE(v8) = *((_DWORD *)a2 + 7) == 22 || *((_BYTE *)this + 10) != 0;
    goto LABEL_16;
  }
  if (v8 == 1)
  {
LABEL_16:
    *((_BYTE *)this + 11) = v8;
    goto LABEL_17;
  }
  if (!v8)
    *((_BYTE *)this + 11) = 0;
LABEL_17:
  *((_DWORD *)this + 3) = 16;
  if ((v4 & 0xFFFFFFF7) == 3 && llvm::Triple::isMacOSXVersionLT(a2, 0xAu, 5, 0))
    *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 3) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__text", 6, 0x80000000, 0, 2, 0);
  *((_QWORD *)this + 4) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__data", 6, 0, 0, 19, 0);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 52) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_data", 13, 17, 0, 19, 0);
  *((_QWORD *)this + 53) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_bss", 12, 18, 0, 12, 0);
  *((_QWORD *)this + 66) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_vars", 13, 19, 0, 19, 0);
  *((_QWORD *)this + 67) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_init", 13, 21, 0, 19, 0);
  *((_QWORD *)this + 68) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__cstring", 9, 2, 0, 5, 0);
  *((_QWORD *)this + 69) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__ustring", 9, 0, 0, 6, 0);
  *((_QWORD *)this + 77) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__literal4", 10, 3, 0, 8, 0);
  *((_QWORD *)this + 78) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__literal8", 10, 4, 0, 9, 0);
  *((_QWORD *)this + 79) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__literal16", 11, 14, 0, 10, 0);
  *((_QWORD *)this + 6) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__const", 7, 0, 0, 4, 0);
  v9 = *((_DWORD *)a2 + 6);
  MachOSection = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__const", 7, 0, 0, 20, 0);
  *((_QWORD *)this + 72) = MachOSection;
  if ((v9 & 0xFFFFFFFD) == 0x15)
  {
    *((_QWORD *)this + 70) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__textcoal_nt", 13, -2147483637, 0, 2, 0);
    *((_QWORD *)this + 71) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__const_coal", 12, 11, 0, 4, 0);
    MachOSection = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__datacoal_nt", 13, 11, 0, 19, 0);
    v11 = MachOSection;
  }
  else
  {
    v11 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 70) = *((_QWORD *)this + 3);
    *((_QWORD *)this + 71) = *((_QWORD *)this + 6);
  }
  *((_QWORD *)this + 73) = v11;
  *((_QWORD *)this + 74) = MachOSection;
  *((_QWORD *)this + 75) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__common", 8, 1, 0, 15, 0);
  *((_QWORD *)this + 76) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__bss", 5, 1, 0, 15, 0);
  *((_QWORD *)this + 80) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__la_symbol_ptr", 15, 7, 0, 0, 0);
  *((_QWORD *)this + 81) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__nl_symbol_ptr", 15, 6, 0, 0, 0);
  *((_QWORD *)this + 82) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_ptr", 12, 20, 0, 0, 0);
  *((_QWORD *)this + 7) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__TEXT", 6uLL, (uint64_t)"__gcc_except_tab", 16, 0, 0, 20, 0);
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 48) = 0;
  v12 = *((_DWORD *)a2 + 9);
  if (v12 > 0x21 || ((1 << v12) & 0x3F0000888) == 0)
    goto LABEL_29;
  v13 = *((_DWORD *)a2 + 6);
  if (v13 != 3 && v13 != 5 && *((_DWORD *)a2 + 7) != 22)
  {
    if ((v12 & 0xFFFFFFF7) == 3)
    {
      if (!llvm::Triple::isMacOSXVersionLT(a2, 0xAu, 6, 0))
        goto LABEL_26;
      v12 = *((_DWORD *)a2 + 9);
    }
    if (v12 == 28 || v12 == 7)
    {
      if ((*((_DWORD *)a2 + 6) - 41) < 2)
        goto LABEL_26;
    }
    else if (v12 == 33)
    {
      goto LABEL_26;
    }
    if (*((_DWORD *)a2 + 10) != 20)
      goto LABEL_29;
  }
LABEL_26:
  *((_QWORD *)this + 8) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__LD", 4uLL, (uint64_t)"__compact_unwind", 16, 0x2000000, 0, 4, 0);
  v14 = *((_DWORD *)a2 + 6);
  if ((v14 - 41) < 2)
  {
LABEL_27:
    v15 = 0x4000000;
LABEL_28:
    *((_DWORD *)this + 4) = v15;
    goto LABEL_29;
  }
  v15 = 50331648;
  if (v14 > 4)
  {
    if (v14 == 5)
      goto LABEL_28;
    if (v14 == 39)
      goto LABEL_27;
  }
  else
  {
    if (v14 == 1)
      goto LABEL_27;
    if (v14 == 3)
      goto LABEL_28;
  }
LABEL_29:
  *((_QWORD *)this + 23) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_names", 13, 0x2000000, 0, 0, "debug_names_begin");
  *((_QWORD *)this + 24) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__apple_names", 13, 0x2000000, 0, 0, "names_begin");
  *((_QWORD *)this + 25) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__apple_objc", 12, 0x2000000, 0, 0, "objc_begin");
  *((_QWORD *)this + 26) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__apple_namespac", 16, 0x2000000, 0, 0, "namespac_begin");
  *((_QWORD *)this + 27) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__apple_types", 13, 0x2000000, 0, 0, "types_begin");
  *((_QWORD *)this + 47) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__swift_ast", 11, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 9) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_abbrev", 14, 0x2000000, 0, 0, "section_abbrev");
  *((_QWORD *)this + 10) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_info", 12, 0x2000000, 0, 0, "section_info");
  *((_QWORD *)this + 11) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_line", 12, 0x2000000, 0, 0, "section_line");
  *((_QWORD *)this + 12) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_line_str", 16, 0x2000000, 0, 0, "section_line_str");
  *((_QWORD *)this + 13) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_frame", 13, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 22) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_pubnames", 16, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 14) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_pubtypes", 16, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 45) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_gnu_pubn", 16, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 46) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_gnu_pubt", 16, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 16) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_str", 11, 0x2000000, 0, 0, "info_string");
  *((_QWORD *)this + 37) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_str_offs", 16, 0x2000000, 0, 0, "section_str_off");
  *((_QWORD *)this + 38) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_addr", 12, 0x2000000, 0, 0, "section_info");
  *((_QWORD *)this + 17) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_loc", 11, 0x2000000, 0, 0, "section_debug_loc");
  *((_QWORD *)this + 40) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_loclists", 16, 0x2000000, 0, 0, "section_debug_loc");
  *((_QWORD *)this + 18) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_aranges", 15, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 19) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_ranges", 14, 0x2000000, 0, 0, "debug_range");
  *((_QWORD *)this + 39) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_rnglists", 16, 0x2000000, 0, 0, "debug_range");
  *((_QWORD *)this + 20) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_macinfo", 15, 0x2000000, 0, 0, "debug_macinfo");
  *((_QWORD *)this + 21) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_macro", 13, 0x2000000, 0, 0, "debug_macro");
  *((_QWORD *)this + 15) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_inlined", 15, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 43) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_cu_index", 16, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 44) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__DWARF", 7uLL, (uint64_t)"__debug_tu_index", 16, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 54) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__LLVM_STACKMAPS", 0x10uLL, (uint64_t)"__llvm_stackmaps", 16, 0, 0, 0, 0);
  *((_QWORD *)this + 55) = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__LLVM_FAULTMAPS", 0x10uLL, (uint64_t)"__llvm_faultmaps", 16, 0, 0, 0, 0);
  result = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), (uint64_t)"__LLVM", 6uLL, (uint64_t)"__remarks", 9, 0x2000000, 0, 0, 0);
  *((_QWORD *)this + 56) = result;
  v17 = *((_QWORD *)this + 105);
  if (*(_QWORD *)(v17 + 16))
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
      v19 = strlen(*(const char **)(v17 + 8));
    else
      v19 = 0;
    *((_QWORD *)this + 94) = llvm::MCContext::getMachOSection(v17, v18, v19, (uint64_t)"__swift5_fieldmd", 16, 0, 0, 0, 0);
    v20 = *((_QWORD *)this + 105);
    v21 = *(_QWORD *)(v20 + 8);
    if (v21)
      v22 = strlen(*(const char **)(v20 + 8));
    else
      v22 = 0;
    *((_QWORD *)this + 95) = llvm::MCContext::getMachOSection(v20, v21, v22, (uint64_t)"__swift5_assocty", 16, 0, 0, 0, 0);
    v23 = *((_QWORD *)this + 105);
    v24 = *(_QWORD *)(v23 + 8);
    if (v24)
      v25 = strlen(*(const char **)(v23 + 8));
    else
      v25 = 0;
    *((_QWORD *)this + 96) = llvm::MCContext::getMachOSection(v23, v24, v25, (uint64_t)"__swift5_builtin", 16, 0, 0, 0, 0);
    v26 = *((_QWORD *)this + 105);
    v27 = *(_QWORD *)(v26 + 8);
    if (v27)
      v28 = strlen(*(const char **)(v26 + 8));
    else
      v28 = 0;
    *((_QWORD *)this + 97) = llvm::MCContext::getMachOSection(v26, v27, v28, (uint64_t)"__swift5_capture", 16, 0, 0, 0, 0);
    v29 = *((_QWORD *)this + 105);
    v30 = *(_QWORD *)(v29 + 8);
    if (v30)
      v31 = strlen(*(const char **)(v29 + 8));
    else
      v31 = 0;
    *((_QWORD *)this + 98) = llvm::MCContext::getMachOSection(v29, v30, v31, (uint64_t)"__swift5_typeref", 16, 0, 0, 0, 0);
    v32 = *((_QWORD *)this + 105);
    v33 = *(_QWORD *)(v32 + 8);
    if (v33)
      v34 = strlen(*(const char **)(v32 + 8));
    else
      v34 = 0;
    *((_QWORD *)this + 99) = llvm::MCContext::getMachOSection(v32, v33, v34, (uint64_t)"__swift5_reflstr", 16, 0, 0, 0, 0);
    v35 = *((_QWORD *)this + 105);
    v36 = *(_QWORD *)(v35 + 8);
    if (v36)
      v37 = strlen(*(const char **)(v35 + 8));
    else
      v37 = 0;
    *((_QWORD *)this + 100) = llvm::MCContext::getMachOSection(v35, v36, v37, (uint64_t)"__swift5_proto", 14, 0, 0, 0, 0);
    v38 = *((_QWORD *)this + 105);
    v39 = *(_QWORD *)(v38 + 8);
    if (v39)
      v40 = strlen(*(const char **)(v38 + 8));
    else
      v40 = 0;
    *((_QWORD *)this + 101) = llvm::MCContext::getMachOSection(v38, v39, v40, (uint64_t)"__swift5_protos", 15, 0, 0, 0, 0);
    v41 = *((_QWORD *)this + 105);
    v42 = *(_QWORD *)(v41 + 8);
    if (v42)
      v43 = strlen(*(const char **)(v41 + 8));
    else
      v43 = 0;
    *((_QWORD *)this + 102) = llvm::MCContext::getMachOSection(v41, v42, v43, (uint64_t)"__swift5_acfuncs", 16, 0, 0, 0, 0);
    v44 = *((_QWORD *)this + 105);
    v45 = *(_QWORD *)(v44 + 8);
    if (v45)
      v46 = strlen(*(const char **)(v44 + 8));
    else
      v46 = 0;
    result = llvm::MCContext::getMachOSection(v44, v45, v46, (uint64_t)"__swift5_mpenum", 15, 0, 0, 0, 0);
    *((_QWORD *)this + 103) = result;
  }
  *((_QWORD *)this + 51) = *((_QWORD *)this + 66);
  return result;
}

unint64_t llvm::MCObjectFileInfo::initELFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2, int a3)
{
  int v5;
  int v6;
  BOOL v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t result;
  _QWORD v70[4];
  __int16 v71;
  unsigned __int8 v72[32];
  __int16 v73;

  v5 = *((_DWORD *)a2 + 6);
  v6 = 12;
  switch(v5)
  {
    case 3:
    case 4:
    case 23:
    case 24:
      goto LABEL_2;
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 13:
    case 14:
    case 15:
    case 20:
    case 21:
    case 22:
      goto LABEL_12;
    case 8:
    case 9:
      goto LABEL_14;
    case 12:
      v6 = 16 * *((unsigned __int8 *)this + 832);
      goto LABEL_14;
    case 16:
    case 17:
    case 18:
    case 19:
      if (*((_BYTE *)this + 832))
        v8 = a3 == 0;
      else
        v8 = 0;
      if (v8)
        goto LABEL_12;
      v7 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 105) + 152) + 8) == 4;
      v6 = 11;
      goto LABEL_8;
    default:
      if (v5 == 42)
      {
LABEL_2:
        v7 = a3 == 0;
        v6 = 27;
LABEL_8:
        if (!v7)
          ++v6;
      }
      else
      {
LABEL_12:
        v6 = 27;
      }
LABEL_14:
      *((_DWORD *)this + 3) = v6;
      v9 = *((_DWORD *)a2 + 9);
      if (v5 == 42)
        v10 = 2;
      else
        v10 = 3;
      if (v5 == 42)
        v11 = 1879048193;
      else
        v11 = 1;
      v12 = *((_QWORD *)this + 105);
      v70[0] = ".bss";
      v71 = 259;
      v73 = 257;
      if (v9 == 14)
        v13 = v10;
      else
        v13 = 2;
      *((_QWORD *)this + 5) = llvm::MCContext::getELFSection(v12, (llvm::Twine *)v70, 8, 3, 0, v72, 0, -1, 0);
      v14 = *((_QWORD *)this + 105);
      v70[0] = ".text";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 3) = llvm::MCContext::getELFSection(v14, (llvm::Twine *)v70, 1, 6, 0, v72, 0, -1, 0);
      v15 = *((_QWORD *)this + 105);
      v70[0] = ".data";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 4) = llvm::MCContext::getELFSection(v15, (llvm::Twine *)v70, 1, 3, 0, v72, 0, -1, 0);
      v16 = *((_QWORD *)this + 105);
      v70[0] = ".rodata";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 6) = llvm::MCContext::getELFSection(v16, (llvm::Twine *)v70, 1, 2, 0, v72, 0, -1, 0);
      v17 = *((_QWORD *)this + 105);
      v70[0] = ".tdata";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 52) = llvm::MCContext::getELFSection(v17, (llvm::Twine *)v70, 1, 1027, 0, v72, 0, -1, 0);
      v18 = *((_QWORD *)this + 105);
      v70[0] = ".tbss";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 53) = llvm::MCContext::getELFSection(v18, (llvm::Twine *)v70, 8, 1027, 0, v72, 0, -1, 0);
      v19 = *((_QWORD *)this + 105);
      v70[0] = ".data.rel.ro";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 61) = llvm::MCContext::getELFSection(v19, (llvm::Twine *)v70, 1, 3, 0, v72, 0, -1, 0);
      v20 = *((_QWORD *)this + 105);
      v70[0] = ".rodata.cst4";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 62) = llvm::MCContext::getELFSection(v20, (llvm::Twine *)v70, 1, 18, 4, v72, 0, -1, 0);
      v21 = *((_QWORD *)this + 105);
      v70[0] = ".rodata.cst8";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 63) = llvm::MCContext::getELFSection(v21, (llvm::Twine *)v70, 1, 18, 8, v72, 0, -1, 0);
      v22 = *((_QWORD *)this + 105);
      v70[0] = ".rodata.cst16";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 64) = llvm::MCContext::getELFSection(v22, (llvm::Twine *)v70, 1, 18, 16, v72, 0, -1, 0);
      v23 = *((_QWORD *)this + 105);
      v70[0] = ".rodata.cst32";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 65) = llvm::MCContext::getELFSection(v23, (llvm::Twine *)v70, 1, 18, 32, v72, 0, -1, 0);
      v24 = *((_QWORD *)this + 105);
      v70[0] = ".gcc_except_table";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 7) = llvm::MCContext::getELFSection(v24, (llvm::Twine *)v70, 1, 2, 0, v72, 0, -1, 0);
      *((_QWORD *)this + 48) = 0;
      *((_QWORD *)this + 49) = 0;
      if ((*((_DWORD *)a2 + 6) & 0xFFFFFFFC) == 0x10)
        v25 = 1879048222;
      else
        v25 = 1;
      v26 = *((_QWORD *)this + 105);
      v70[0] = ".debug_abbrev";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 9) = llvm::MCContext::getELFSection(v26, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v27 = *((_QWORD *)this + 105);
      v70[0] = ".debug_info";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 10) = llvm::MCContext::getELFSection(v27, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v28 = *((_QWORD *)this + 105);
      v70[0] = ".debug_line";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 11) = llvm::MCContext::getELFSection(v28, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v29 = *((_QWORD *)this + 105);
      v70[0] = ".debug_line_str";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 12) = llvm::MCContext::getELFSection(v29, (llvm::Twine *)v70, v25, 48, 1, v72, 0, -1, 0);
      v30 = *((_QWORD *)this + 105);
      v70[0] = ".debug_frame";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 13) = llvm::MCContext::getELFSection(v30, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v31 = *((_QWORD *)this + 105);
      v70[0] = ".debug_pubnames";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 22) = llvm::MCContext::getELFSection(v31, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v32 = *((_QWORD *)this + 105);
      v70[0] = ".debug_pubtypes";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 14) = llvm::MCContext::getELFSection(v32, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v33 = *((_QWORD *)this + 105);
      v70[0] = ".debug_gnu_pubnames";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 45) = llvm::MCContext::getELFSection(v33, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v34 = *((_QWORD *)this + 105);
      v70[0] = ".debug_gnu_pubtypes";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 46) = llvm::MCContext::getELFSection(v34, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v35 = *((_QWORD *)this + 105);
      v70[0] = ".debug_str";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 16) = llvm::MCContext::getELFSection(v35, (llvm::Twine *)v70, v25, 48, 1, v72, 0, -1, 0);
      v36 = *((_QWORD *)this + 105);
      v70[0] = ".debug_loc";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 17) = llvm::MCContext::getELFSection(v36, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v37 = *((_QWORD *)this + 105);
      v70[0] = ".debug_aranges";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 18) = llvm::MCContext::getELFSection(v37, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v38 = *((_QWORD *)this + 105);
      v70[0] = ".debug_ranges";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 19) = llvm::MCContext::getELFSection(v38, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v39 = *((_QWORD *)this + 105);
      v70[0] = ".debug_macinfo";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 20) = llvm::MCContext::getELFSection(v39, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v40 = *((_QWORD *)this + 105);
      v70[0] = ".debug_macro";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 21) = llvm::MCContext::getELFSection(v40, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v41 = *((_QWORD *)this + 105);
      v70[0] = ".debug_names";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 23) = llvm::MCContext::getELFSection(v41, (llvm::Twine *)v70, 1, 0, 0, v72, 0, -1, 0);
      v42 = *((_QWORD *)this + 105);
      v70[0] = ".apple_names";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 24) = llvm::MCContext::getELFSection(v42, (llvm::Twine *)v70, 1, 0, 0, v72, 0, -1, 0);
      v43 = *((_QWORD *)this + 105);
      v70[0] = ".apple_objc";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 25) = llvm::MCContext::getELFSection(v43, (llvm::Twine *)v70, 1, 0, 0, v72, 0, -1, 0);
      v44 = *((_QWORD *)this + 105);
      v70[0] = ".apple_namespaces";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 26) = llvm::MCContext::getELFSection(v44, (llvm::Twine *)v70, 1, 0, 0, v72, 0, -1, 0);
      v45 = *((_QWORD *)this + 105);
      v70[0] = ".apple_types";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 27) = llvm::MCContext::getELFSection(v45, (llvm::Twine *)v70, 1, 0, 0, v72, 0, -1, 0);
      v46 = *((_QWORD *)this + 105);
      v70[0] = ".debug_str_offsets";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 37) = llvm::MCContext::getELFSection(v46, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v47 = *((_QWORD *)this + 105);
      v70[0] = ".debug_addr";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 38) = llvm::MCContext::getELFSection(v47, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v48 = *((_QWORD *)this + 105);
      v70[0] = ".debug_rnglists";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 39) = llvm::MCContext::getELFSection(v48, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v49 = *((_QWORD *)this + 105);
      v70[0] = ".debug_loclists";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 40) = llvm::MCContext::getELFSection(v49, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v50 = *((_QWORD *)this + 105);
      v70[0] = ".debug_info.dwo";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 28) = llvm::MCContext::getELFSection(v50, (llvm::Twine *)v70, v25, 0x80000000, 0, v72, 0, -1, 0);
      v51 = *((_QWORD *)this + 105);
      v70[0] = ".debug_types.dwo";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 29) = llvm::MCContext::getELFSection(v51, (llvm::Twine *)v70, v25, 0x80000000, 0, v72, 0, -1, 0);
      v52 = *((_QWORD *)this + 105);
      v70[0] = ".debug_abbrev.dwo";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 30) = llvm::MCContext::getELFSection(v52, (llvm::Twine *)v70, v25, 0x80000000, 0, v72, 0, -1, 0);
      v53 = *((_QWORD *)this + 105);
      v70[0] = ".debug_str.dwo";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 31) = llvm::MCContext::getELFSection(v53, (llvm::Twine *)v70, v25, -2147483600, 1, v72, 0, -1, 0);
      v54 = *((_QWORD *)this + 105);
      v70[0] = ".debug_line.dwo";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 32) = llvm::MCContext::getELFSection(v54, (llvm::Twine *)v70, v25, 0x80000000, 0, v72, 0, -1, 0);
      v55 = *((_QWORD *)this + 105);
      v70[0] = ".debug_loc.dwo";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 33) = llvm::MCContext::getELFSection(v55, (llvm::Twine *)v70, v25, 0x80000000, 0, v72, 0, -1, 0);
      v56 = *((_QWORD *)this + 105);
      v70[0] = ".debug_str_offsets.dwo";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 34) = llvm::MCContext::getELFSection(v56, (llvm::Twine *)v70, v25, 0x80000000, 0, v72, 0, -1, 0);
      v57 = *((_QWORD *)this + 105);
      v70[0] = ".debug_rnglists.dwo";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 41) = llvm::MCContext::getELFSection(v57, (llvm::Twine *)v70, v25, 0x80000000, 0, v72, 0, -1, 0);
      v58 = *((_QWORD *)this + 105);
      v70[0] = ".debug_macinfo.dwo";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 35) = llvm::MCContext::getELFSection(v58, (llvm::Twine *)v70, v25, 0x80000000, 0, v72, 0, -1, 0);
      v59 = *((_QWORD *)this + 105);
      v70[0] = ".debug_macro.dwo";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 36) = llvm::MCContext::getELFSection(v59, (llvm::Twine *)v70, v25, 0x80000000, 0, v72, 0, -1, 0);
      v60 = *((_QWORD *)this + 105);
      v70[0] = ".debug_loclists.dwo";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 42) = llvm::MCContext::getELFSection(v60, (llvm::Twine *)v70, v25, 0x80000000, 0, v72, 0, -1, 0);
      v61 = *((_QWORD *)this + 105);
      v70[0] = ".debug_cu_index";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 43) = llvm::MCContext::getELFSection(v61, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v62 = *((_QWORD *)this + 105);
      v70[0] = ".debug_tu_index";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 44) = llvm::MCContext::getELFSection(v62, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v63 = *((_QWORD *)this + 105);
      v70[0] = ".llvm_stackmaps";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 54) = llvm::MCContext::getELFSection(v63, (llvm::Twine *)v70, 1, 2, 0, v72, 0, -1, 0);
      v64 = *((_QWORD *)this + 105);
      v70[0] = ".llvm_faultmaps";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 55) = llvm::MCContext::getELFSection(v64, (llvm::Twine *)v70, 1, 2, 0, v72, 0, -1, 0);
      v65 = *((_QWORD *)this + 105);
      v70[0] = ".eh_frame";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 57) = llvm::MCContext::getELFSection(v65, (llvm::Twine *)v70, v11, v13, 0, v72, 0, -1, 0);
      v66 = *((_QWORD *)this + 105);
      v70[0] = ".stack_sizes";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 58) = llvm::MCContext::getELFSection(v66, (llvm::Twine *)v70, 1, 0, 0, v72, 0, -1, 0);
      v67 = *((_QWORD *)this + 105);
      v70[0] = ".pseudo_probe";
      v71 = 259;
      v73 = 257;
      *((_QWORD *)this + 59) = llvm::MCContext::getELFSection(v67, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      v68 = *((_QWORD *)this + 105);
      v70[0] = ".pseudo_probe_desc";
      v71 = 259;
      v73 = 257;
      result = llvm::MCContext::getELFSection(v68, (llvm::Twine *)v70, v25, 0, 0, v72, 0, -1, 0);
      *((_QWORD *)this + 60) = result;
      return result;
  }
}

void llvm::MCObjectFileInfo::initGOFFMCObjectFileInfo(llvm::MCObjectFileInfo *this, const llvm::Triple *a2)
{
  uint64_t v3;
  uint64_t v4;

  llvm::MCContext::getGOFFSection(*((_QWORD *)this + 105), ".text", 5uLL, 2);
  *((_QWORD *)this + 3) = v3;
  llvm::MCContext::getGOFFSection(*((_QWORD *)this + 105), ".bss", 4uLL, 15);
  *((_QWORD *)this + 5) = v4;
}

unint64_t llvm::MCObjectFileInfo::initSPIRVMCObjectFileInfo(llvm::MCContext **this, const llvm::Triple *a2)
{
  unint64_t result;

  result = llvm::MCContext::getSPIRVSection(this[105]);
  this[3] = (llvm::MCContext *)result;
  return result;
}

void llvm::MCObjectFileInfo::~MCObjectFileInfo(void **this)
{
  *this = off_1E8181AC8;
  if (*((_BYTE *)this + 912))
  {
    if (*((char *)this + 887) < 0)
      operator delete(this[108]);
    *((_BYTE *)this + 912) = 0;
  }
}

{
  *this = off_1E8181AC8;
  if (*((_BYTE *)this + 912))
  {
    if (*((char *)this + 887) < 0)
      operator delete(this[108]);
    *((_BYTE *)this + 912) = 0;
  }
}

{
  *this = off_1E8181AC8;
  if (*((_BYTE *)this + 912))
  {
    if (*((char *)this + 887) < 0)
      operator delete(this[108]);
    *((_BYTE *)this + 912) = 0;
  }
  JUMPOUT(0x1CAA32FC0);
}

void llvm::MCObjectFileInfo::initMCObjectFileInfo(llvm::MCObjectFileInfo *this, llvm::MCContext *a2, char a3, int a4)
{
  llvm::MCContext *v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  *((_BYTE *)this + 832) = a3;
  *((_QWORD *)this + 105) = a2;
  *((_WORD *)this + 4) = 257;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)((char *)this + 10) = 0;
  *((_WORD *)this + 9) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  if (*((char *)a2 + 47) < 0)
  {
    sub_1C47EBC30(__p, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
    v7 = (llvm::MCContext *)*((_QWORD *)this + 105);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)((char *)a2 + 24);
    v11 = *((_QWORD *)a2 + 5);
    v7 = a2;
  }
  v12 = *((_OWORD *)a2 + 3);
  v13 = *((_QWORD *)a2 + 8);
  switch(*(_DWORD *)v7)
  {
    case 0:
      llvm::MCObjectFileInfo::initMachOMCObjectFileInfo(this, (const llvm::Triple *)__p);
      break;
    case 1:
      llvm::MCObjectFileInfo::initELFMCObjectFileInfo(this, (const llvm::Triple *)__p, a4);
      break;
    case 2:
      llvm::MCContext::getGOFFSection((uint64_t)v7, ".text", 5uLL, 2);
      *((_QWORD *)this + 3) = v8;
      llvm::MCContext::getGOFFSection(*((_QWORD *)this + 105), ".bss", 4uLL, 15);
      *((_QWORD *)this + 5) = v9;
      break;
    case 3:
      llvm::MCObjectFileInfo::initCOFFMCObjectFileInfo(this, (const llvm::Triple *)__p);
      break;
    case 4:
      *((_QWORD *)this + 3) = llvm::MCContext::getSPIRVSection(v7);
      break;
    case 5:
      llvm::MCObjectFileInfo::initWasmMCObjectFileInfo(this, a2);
      break;
    case 6:
      llvm::MCObjectFileInfo::initXCOFFMCObjectFileInfo(this, a2);
      break;
    default:
      break;
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
}

unint64_t llvm::MCObjectFileInfo::getDwarfComdatSection(llvm::MCObjectFileInfo *this, const char *a2, unint64_t a3)
{
  uint64_t v3;
  int v4;
  char v5;
  char *v6;
  BOOL v7;
  char v8;
  char *v9;
  unint64_t ELFSection;
  unint64_t v11;
  void *__p[2];
  char v14;
  _QWORD v15[4];
  char v16;
  char v17;
  unsigned __int8 v18[20];
  char v19;
  char v20[11];
  __int16 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 105);
  v4 = *(_DWORD *)(v3 + 68);
  if (v4 == 3)
  {
    v8 = 1;
    v17 = 1;
    if (*a2)
    {
      v15[0] = a2;
      v8 = 3;
    }
    v16 = v8;
    if (a3)
    {
      v9 = v20;
      do
      {
        *--v9 = (a3 % 0xA) | 0x30;
        v7 = a3 > 9;
        a3 /= 0xAuLL;
      }
      while (v7);
    }
    else
    {
      v9 = &v19;
      v19 = 48;
    }
    sub_1C4E61270(__p, v9, v20, v20 - v9);
    v21 = 260;
    *(_QWORD *)v18 = __p;
    ELFSection = llvm::MCContext::getELFSection(v3, (llvm::Twine *)v15, 1, 512, 0, v18, 1, -1, 0);
  }
  else
  {
    if (v4 != 7)
      llvm::report_fatal_error((llvm *)"Cannot get DWARF comdat section for this object file format: not implemented.", (const char *)1);
    v5 = 1;
    v17 = 1;
    if (*a2)
    {
      v15[0] = a2;
      v5 = 3;
    }
    v16 = v5;
    if (a3)
    {
      v6 = v20;
      do
      {
        *--v6 = (a3 % 0xA) | 0x30;
        v7 = a3 > 9;
        a3 /= 0xAuLL;
      }
      while (v7);
    }
    else
    {
      v6 = &v19;
      v19 = 48;
    }
    sub_1C4E61270(__p, v6, v20, v20 - v6);
    v21 = 260;
    *(_QWORD *)v18 = __p;
    ELFSection = llvm::MCContext::getWasmSection(v3, (llvm::Twine *)v15, 0, 0, v18, -1);
  }
  v11 = ELFSection;
  if (v14 < 0)
    operator delete(__p[0]);
  return v11;
}

unint64_t llvm::MCObjectFileInfo::getPseudoProbeDescSection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v4 = *(_DWORD **)(a1 + 840);
  if (*v4 != 1)
    return *(_QWORD *)(a1 + 480);
  v5 = v4[17];
  v6 = v5 >= 9;
  v8 = v5 == 9;
  v7 = (1 << v5) & 0x320;
  v8 = !v8 && v6 || v7 == 0;
  if (!v8 || a3 == 0)
    return *(_QWORD *)(a1 + 480);
  v10 = *(_QWORD *)(a1 + 480);
  v11 = *(_DWORD *)(v10 + 224);
  v12 = *(_DWORD *)(v10 + 228) | 0x200;
  v13 = *(_QWORD *)(v10 + 200);
  v14 = *(_QWORD *)(v10 + 208);
  v22 = 261;
  v21[0] = v13;
  v21[1] = v14;
  v15 = *(_DWORD *)(v10 + 236);
  v18 = 773;
  v17[0] = v13;
  v17[1] = v14;
  v17[2] = "_";
  v19[0] = v17;
  v19[2] = a2;
  v19[3] = a3;
  v20 = 1282;
  return llvm::MCContext::getELFSection((uint64_t)v4, (llvm::Twine *)v21, v11, v12, v15, (unsigned __int8 *)v19, 1, -1, 0);
}

uint64_t llvm::MCObjectStreamer::getAssemblerPtr(llvm::MCObjectStreamer *this)
{
  if (*((_BYTE *)this + 268))
    return *((_QWORD *)this + 34);
  else
    return 0;
}

llvm::MCSection *llvm::MCObjectStreamer::addPendingLabel(llvm::MCSection *this, llvm::MCSymbol *a2)
{
  llvm::MCSection *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::MCSymbol **v6;
  uint64_t v7;
  llvm::MCSymbol *v8;
  llvm::MCSymbol *v9;
  llvm::MCSymbol *v10;
  llvm::MCSection *v11;
  llvm::MCSection *v12;

  v2 = this;
  v3 = *((unsigned int *)this + 30);
  if ((_DWORD)v3 && (this = *(llvm::MCSection **)(*((_QWORD *)this + 14) + 32 * v3 - 32), (v12 = this) != 0))
  {
    v4 = *((unsigned int *)v2 + 76);
    if ((_DWORD)v4)
    {
      v10 = a2;
      v11 = this;
      v6 = (llvm::MCSymbol **)*((_QWORD *)v2 + 37);
      v7 = 8 * v4;
      do
      {
        v8 = *v6++;
        llvm::MCSection::addPendingLabel(v11, v8, 0);
        v7 -= 8;
      }
      while (v7);
      *((_DWORD *)v2 + 76) = 0;
      a2 = v10;
      this = v11;
    }
    llvm::MCSection::addPendingLabel(this, a2, *((_DWORD *)v2 + 104));
    return (llvm::MCSection *)sub_1C5947EB0((uint64_t)v2 + 328, (uint64_t *)&v12);
  }
  else
  {
    v9 = a2;
    v5 = *((unsigned int *)v2 + 76);
    if (v5 >= *((_DWORD *)v2 + 77))
    {
      this = (llvm::MCSection *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2 + 296, (uint64_t)v2 + 312, v5 + 1, 8);
      LODWORD(v5) = *((_DWORD *)v2 + 76);
    }
    *(_QWORD *)(*((_QWORD *)v2 + 37) + 8 * v5) = v9;
    ++*((_DWORD *)v2 + 76);
  }
  return this;
}

BOOL sub_1C5947EB0(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  _BYTE v9[16];
  unsigned __int8 v10;

  sub_1C594C85C(a1, a2, (uint64_t)v9);
  v4 = v10;
  if (v10)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52))
    {
      v8 = v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, a1 + 56, v6 + 1, 8);
      v4 = v8;
      LODWORD(v6) = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

_DWORD *llvm::MCObjectStreamer::flushPendingLabels(_DWORD *this, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v8;
  int v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::MCSymbol **v16;
  uint64_t v17;
  llvm::MCSymbol *v18;

  v3 = this[30];
  if ((_DWORD)v3)
  {
    v4 = this;
    v5 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v3 - 32);
    if (v5)
    {
      v8 = this[76];
      if ((_DWORD)v8)
      {
        v16 = (llvm::MCSymbol **)*((_QWORD *)this + 37);
        v17 = 8 * v8;
        do
        {
          v18 = *v16++;
          this = llvm::MCSection::addPendingLabel((_DWORD *)v5, v18, v4[104]);
          v17 -= 8;
        }
        while (v17);
        v4[76] = 0;
      }
      v9 = v4[104];
      if (a2)
      {
        v10 = *(_DWORD *)(v5 + 160);
        if (v10)
        {
          v11 = *(_DWORD **)(v5 + 152);
          v12 = v11;
          do
          {
            if (v12[2] == v9)
            {
              v13 = *(unint64_t **)v12;
              *v13 = **(_QWORD **)v12 & 7 | a2;
              v13[3] = a3;
              *((_DWORD *)v13 + 2) = v13[1] & 0xFFFFE3FF | 0x400;
              v11 = *(_DWORD **)(v5 + 152);
              v14 = *(unsigned int *)(v5 + 160);
              v15 = (char *)&v11[4 * v14] - (char *)(v12 + 4);
              if (v15)
              {
                this = memmove(v12, v12 + 4, v15 - 4);
                LODWORD(v14) = *(_DWORD *)(v5 + 160);
                v11 = *(_DWORD **)(v5 + 152);
              }
              v12 -= 4;
              v10 = v14 - 1;
              *(_DWORD *)(v5 + 160) = v10;
            }
            v12 += 4;
          }
          while (v12 != &v11[4 * v10]);
        }
      }
      else
      {
        return llvm::MCSection::flushPendingLabels((_DWORD *)v5, 0, 0, v9);
      }
    }
  }
  return this;
}

uint64_t llvm::MCObjectStreamer::flushPendingLabels(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  llvm::MCSymbol **v8;
  uint64_t v9;
  llvm::MCSymbol *v10;
  uint64_t v11;

  v1 = *(unsigned int *)(this + 304);
  if ((_DWORD)v1)
  {
    v11 = this;
    v6 = *(unsigned int *)(this + 120);
    if ((_DWORD)v6)
      v7 = *(_DWORD **)(*(_QWORD *)(this + 112) + 32 * v6 - 32);
    else
      v7 = 0;
    v8 = *(llvm::MCSymbol ***)(this + 296);
    v9 = 8 * v1;
    do
    {
      v10 = *v8++;
      llvm::MCSection::addPendingLabel(v7, v10, *(_DWORD *)(v11 + 416));
      v9 -= 8;
    }
    while (v9);
    this = v11;
    *(_DWORD *)(v11 + 304) = 0;
  }
  v2 = *(unsigned int *)(this + 376);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(this + 368);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      this = llvm::MCSection::flushPendingLabels(v5);
      v4 -= 8;
    }
    while (v4);
  }
  return this;
}

llvm::MCObjectStreamer *llvm::MCObjectStreamer::resolvePendingFixups(llvm::MCObjectStreamer *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  llvm::MCObjectStreamer *v17;
  const char *v18;
  __int16 v19;

  v1 = *((unsigned int *)this + 108);
  if ((_DWORD)v1)
  {
    v2 = 40 * v1;
    v3 = (unint64_t *)(*((_QWORD *)this + 53) + 32);
    do
    {
      v17 = this;
      v4 = *(v3 - 4);
      if (v4 && (sub_1C593D6FC(v4, 1), v5))
      {
        llvm::MCObjectStreamer::flushPendingLabels(v17, *v3, *(_QWORD *)(*v3 + 72));
        v6 = *(v3 - 4);
        *((_DWORD *)v3 - 4) += *(_DWORD *)(v6 + 24);
        sub_1C593D6FC(v6, 1);
        v8 = v7;
        switch(*(_BYTE *)(v7 + 48))
        {
          case 5:
          case 7:
          case 0xE:
            v9 = sub_1C4926708(v7 + 96, (unint64_t)(v3 - 3), 1);
            v10 = *(_QWORD *)(v8 + 96) + 24 * *(unsigned int *)(v8 + 104);
            v11 = *(_OWORD *)v9;
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(v9 + 16);
            *(_OWORD *)v10 = v11;
            ++*(_DWORD *)(v8 + 104);
            break;
          case 6:
          case 8:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            goto LABEL_13;
          case 0xD:
            goto LABEL_11;
          default:
            if (*(_BYTE *)(v7 + 48) != 1)
LABEL_13:
              v8 = *v3;
LABEL_11:
            v14 = sub_1C4926708(v8 + 120, (unint64_t)(v3 - 3), 1);
            v15 = *(_QWORD *)(v8 + 120) + 24 * *(unsigned int *)(v8 + 128);
            v16 = *(_OWORD *)v14;
            *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 16);
            *(_OWORD *)v15 = v16;
            ++*(_DWORD *)(v8 + 128);
            break;
        }
      }
      else
      {
        v12 = *((_QWORD *)v17 + 1);
        v13 = *(v3 - 1);
        v18 = "unresolved relocation offset";
        v19 = 259;
        llvm::MCContext::reportError(v12, v13, (uint64_t)&v18);
      }
      v3 += 5;
      v2 -= 40;
      this = v17;
    }
    while (v2);
  }
  *((_DWORD *)this + 108) = 0;
  return this;
}

uint64_t llvm::MCObjectStreamer::emitAbsoluteSymbolDiff(llvm::MCObjectStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3, uint64_t a4)
{
  unint64_t v8;
  char v9;

  if ((*(_DWORD *)(**((_QWORD **)this + 34) + 48) - 31) >= 2
    && (v8 = sub_1C5948348((uint64_t)a2, (uint64_t)a3), v9))
  {
    return (*(uint64_t (**)(llvm::MCObjectStreamer *, unint64_t, uint64_t))(*(_QWORD *)this + 512))(this, v8, a4);
  }
  else
  {
    return llvm::MCStreamer::emitAbsoluteSymbolDiff(this, a2, a3, a4);
  }
}

unint64_t sub_1C5948348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
  if (!v5 && (*(_DWORD *)(a1 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a1 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 24));
    v4 = *(_QWORD *)a1 & 7 | v5;
    *(_QWORD *)a1 = v4;
  }
  if (!v5)
    goto LABEL_8;
  v6 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a1 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a1 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 24));
    v6 = v11;
    *(_QWORD *)a1 = *(_QWORD *)a1 & 7 | v11;
  }
  v7 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (!v7 && (*(_DWORD *)(a2 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a2 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a2 + 24));
    *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v7;
  }
  if (v6 == v7 && (*(_DWORD *)(a1 + 8) & 0x1C00) != 0x800 && (*(_DWORD *)(a2 + 8) & 0x1C00) != 0x800)
  {
    v9 = (*(_QWORD *)(a1 + 24) - *(_QWORD *)(a2 + 24)) & 0xFFFFFFFFFFFFFF00;
    v8 = (*(_BYTE *)(a1 + 24) - *(_BYTE *)(a2 + 24));
  }
  else
  {
LABEL_8:
    v8 = 0;
    v9 = 0;
  }
  return v9 | v8;
}

void llvm::MCObjectStreamer::emitAbsoluteSymbolDiffAsULEB128(llvm::MCObjectStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3)
{
  unint64_t v6;
  char v7;

  if ((*(_DWORD *)(**((_QWORD **)this + 34) + 48) - 31) >= 2
    && (v6 = sub_1C5948348((uint64_t)a2, (uint64_t)a3), v7))
  {
    llvm::MCStreamer::emitULEB128IntValue(this, v6, 0);
  }
  else
  {
    llvm::MCStreamer::emitAbsoluteSymbolDiffAsULEB128(this, a2, a3);
  }
}

double llvm::MCObjectStreamer::reset(llvm::MCObjectStreamer *this)
{
  llvm::MCAssembler *v2;
  double result;

  v2 = (llvm::MCAssembler *)*((_QWORD *)this + 34);
  if (v2)
    llvm::MCAssembler::reset(v2);
  *((_QWORD *)this + 35) = 0;
  *((_WORD *)this + 144) = 1;
  *((_DWORD *)this + 76) = 0;
  sub_1C594CC60((_QWORD *)this + 41);
  *((_DWORD *)this + 94) = 0;
  *(_QWORD *)&result = llvm::MCStreamer::reset(this).n128_u64[0];
  return result;
}

llvm::MCStreamer *llvm::MCObjectStreamer::emitFrames(llvm::MCStreamer *this, llvm::MCAsmBackend *a2)
{
  llvm::MCAsmBackend *v2;
  llvm::MCStreamer *v3;

  if (-1171354717 * ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3))
  {
    if (*((_BYTE *)this + 288))
    {
      v2 = a2;
      v3 = this;
      llvm::MCDwarfFrameEmitter::Emit(this, a2, (llvm::MCAsmBackend *)1);
      a2 = v2;
      this = v3;
    }
    if (*((_BYTE *)this + 289))
      return llvm::MCDwarfFrameEmitter::Emit(this, a2, 0);
  }
  return this;
}

uint64_t llvm::MCObjectStreamer::getCurrentFragment(llvm::MCObjectStreamer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 35);
  if (v1 == *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 32 * *((unsigned int *)this + 30) - 32) + 112))
    return 0;
  else
    return *(_QWORD *)v1;
}

uint64_t llvm::MCObjectStreamer::getOrCreateDataFragment(llvm::MCObjectStreamer *this, const llvm::MCSubtargetInfo *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::MCSymbol **v21;
  uint64_t v22;
  llvm::MCSymbol *v23;

  v3 = (uint64_t *)*((_QWORD *)this + 35);
  if (v3 != *(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 14) + 32 * *((unsigned int *)this + 30) - 32) + 112))
  {
    v4 = *v3;
    if (*v3)
    {
      if (*(_BYTE *)(v4 + 48) == 1)
      {
        if (!*(_BYTE *)(v4 + 50))
          return v4;
        v5 = *((_QWORD *)this + 34);
        if (*(_DWORD *)(v5 + 496))
        {
          if ((*(_BYTE *)(v5 + 500) & 1) != 0)
            return v4;
        }
        else if (!a2 || *(const llvm::MCSubtargetInfo **)(v4 + 56) == a2)
        {
          return v4;
        }
      }
    }
  }
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = -1;
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 1;
  *(_DWORD *)(v4 + 49) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = v4 + 88;
  *(_OWORD *)(v4 + 72) = xmmword_1C677F680;
  *(_QWORD *)(v4 + 120) = v4 + 136;
  *(_QWORD *)(v4 + 128) = 0x400000000;
  v6 = *((unsigned int *)this + 30);
  if (!(_DWORD)v6)
    goto LABEL_16;
  v7 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v6 - 32);
  if (!v7)
    goto LABEL_16;
  v8 = *((unsigned int *)this + 76);
  if ((_DWORD)v8)
  {
    v21 = (llvm::MCSymbol **)*((_QWORD *)this + 37);
    v22 = 8 * v8;
    do
    {
      v23 = *v21++;
      llvm::MCSection::addPendingLabel((_DWORD *)v7, v23, *((_DWORD *)this + 104));
      v22 -= 8;
    }
    while (v22);
    *((_DWORD *)this + 76) = 0;
  }
  v9 = *(_DWORD *)(v7 + 160);
  if (v9)
  {
    v15 = *((_DWORD *)this + 104);
    v16 = *(_DWORD **)(v7 + 152);
    v17 = v16;
    do
    {
      if (v17[2] == v15)
      {
        v18 = *(uint64_t **)v17;
        *v18 = **(_QWORD **)v17 & 7 | v4;
        v18[3] = 0;
        *((_DWORD *)v18 + 2) = v18[1] & 0xFFFFE3FF | 0x400;
        v16 = *(_DWORD **)(v7 + 152);
        v19 = *(unsigned int *)(v7 + 160);
        v20 = (char *)&v16[4 * v19] - (char *)(v17 + 4);
        if (v20)
        {
          memmove(v17, v17 + 4, v20 - 4);
          LODWORD(v19) = *(_DWORD *)(v7 + 160);
          v16 = *(_DWORD **)(v7 + 152);
        }
        v17 -= 4;
        v9 = v19 - 1;
        *(_DWORD *)(v7 + 160) = v9;
      }
      v17 += 4;
    }
    while (v17 != &v16[4 * v9]);
  }
  v10 = *((unsigned int *)this + 30);
  if ((_DWORD)v10)
    v11 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v10 - 32);
  else
LABEL_16:
    v11 = 0;
  v12 = (uint64_t *)*((_QWORD *)this + 35);
  v13 = *v12;
  *(_QWORD *)v4 = *v12;
  *(_QWORD *)(v4 + 8) = v12;
  *(_QWORD *)(v13 + 8) = v4;
  *v12 = v4;
  *(_QWORD *)(v4 + 16) = v11;
  return v4;
}

_QWORD *llvm::MCObjectStreamer::visitUsedSymbol(_QWORD *result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a2 + 8);
  if ((v2 & 8) == 0)
  {
    v3 = result[34];
    *(_DWORD *)(a2 + 8) = v2 | 8;
    v6 = a2;
    v4 = *(_QWORD **)(v3 + 64);
    if ((unint64_t)v4 >= *(_QWORD *)(v3 + 72))
    {
      v5 = v3;
      result = sub_1C4DFEA3C((void **)(v3 + 56), &v6);
      v3 = v5;
    }
    else
    {
      *v4 = a2;
      result = v4 + 1;
    }
    *(_QWORD *)(v3 + 64) = result;
  }
  return result;
}

uint64_t llvm::MCObjectStreamer::emitCFISections(uint64_t this, char a2, char a3)
{
  *(_BYTE *)(this + 288) = a2;
  *(_BYTE *)(this + 289) = a3;
  return this;
}

void llvm::MCObjectStreamer::emitValueImpl(uint64_t a1, const llvm::MCExpr **a2, uint64_t a3, uint64_t a4)
{
  uint64_t DataFragment;
  llvm::MCSection *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  llvm::MCStreamer *v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  llvm::MCSymbol **v32;
  uint64_t v33;
  llvm::MCSymbol *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  __int16 v38;
  int64_t *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  uint64_t v43[5];
  const llvm::MCExpr **v44;
  int v45;
  int v46;
  uint64_t v47;
  int64_t v48;

  llvm::MCStreamer::visitUsedExpr((llvm::MCStreamer *)a1, a2);
  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment((llvm::MCObjectStreamer *)a1, 0);
  v10 = DataFragment;
  v11 = *(unsigned int *)(a1 + 120);
  if (!(_DWORD)v11)
    goto LABEL_20;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v11 - 32);
  if (v12)
  {
    v13 = *(_QWORD *)(DataFragment + 72);
    v14 = *(unsigned int *)(a1 + 304);
    if ((_DWORD)v14)
    {
      v32 = *(llvm::MCSymbol ***)(a1 + 296);
      v33 = 8 * v14;
      do
      {
        v34 = *v32++;
        llvm::MCSection::addPendingLabel((_DWORD *)v12, v34, *(_DWORD *)(a1 + 416));
        v33 -= 8;
      }
      while (v33);
      *(_DWORD *)(a1 + 304) = 0;
      v15 = *(_DWORD *)(a1 + 416);
      if (!v10)
      {
        llvm::MCSection::flushPendingLabels((_DWORD *)v12, 0, 0, *(_DWORD *)(a1 + 416));
        goto LABEL_6;
      }
    }
    else
    {
      v15 = *(_DWORD *)(a1 + 416);
    }
    v16 = *(_DWORD *)(v12 + 160);
    if (v16)
    {
      v27 = *(_DWORD **)(v12 + 152);
      v28 = v27;
      do
      {
        if (v28[2] == v15)
        {
          v29 = *(uint64_t **)v28;
          *v29 = **(_QWORD **)v28 & 7 | v10;
          v29[3] = v13;
          *((_DWORD *)v29 + 2) = v29[1] & 0xFFFFE3FF | 0x400;
          v27 = *(_DWORD **)(v12 + 152);
          v30 = *(unsigned int *)(v12 + 160);
          v31 = (char *)&v27[4 * v30] - (char *)(v28 + 4);
          if (v31)
          {
            memmove(v28, v28 + 4, v31 - 4);
            LODWORD(v30) = *(_DWORD *)(v12 + 160);
            v27 = *(_DWORD **)(v12 + 152);
          }
          v28 -= 4;
          v16 = v30 - 1;
          *(_DWORD *)(v12 + 160) = v16;
        }
        v28 += 4;
      }
      while (v28 != &v27[4 * v16]);
    }
  }
LABEL_6:
  v17 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v17)
  {
    v18 = *(llvm::MCStreamer **)(*(_QWORD *)(a1 + 112) + 32 * v17 - 32);
    goto LABEL_8;
  }
LABEL_20:
  v18 = 0;
LABEL_8:
  llvm::MCDwarfLineEntry::make((llvm::MCDwarfLineEntry *)a1, v18, v9);
  v48 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  llvm::MCExpr::evaluateAsAbsolute((uint64_t)a2, &v48);
  if (v19)
  {
    if ((8 * a3) <= 0x3F
      && 0xFFFFFFFFFFFFFFFFLL >> (-8 * a3) < v48
      && ((v35 = -1 << (8 * a3 - 1), v35 > v48) || v48 > ~v35))
    {
      v36 = *(_QWORD *)(a1 + 8);
      v41 = "value evaluated as ";
      v42 = 259;
      v40 = 269;
      v39 = &v48;
      sub_1C4825FE4((uint64_t *)&v41, (uint64_t *)&v39, (uint64_t)v43);
      v37 = " is out of range.";
      v38 = 259;
      sub_1C4825FE4(v43, (uint64_t *)&v37, (uint64_t)&v44);
      llvm::MCContext::reportError(v36, a4, (uint64_t)&v44);
    }
    else
    {
      (*(void (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, v48, a3);
    }
  }
  else
  {
    v20 = *(_QWORD *)(v10 + 72);
    v21 = dword_1C86637BC[(int)a3 - 1];
    v44 = a2;
    v45 = v20;
    v46 = v21;
    v47 = a4;
    v22 = sub_1C4926708(v10 + 120, (unint64_t)&v44, 1);
    v23 = *(_QWORD *)(v10 + 120) + 24 * *(unsigned int *)(v10 + 128);
    v24 = *(_OWORD *)v22;
    *(_QWORD *)(v23 + 16) = *(_QWORD *)(v22 + 16);
    *(_OWORD *)v23 = v24;
    ++*(_DWORD *)(v10 + 128);
    v25 = *(_QWORD *)(v10 + 72);
    v26 = v25 + a3;
    if (__CFADD__(v25, a3))
    {
      *(_QWORD *)(v10 + 72) = v26;
    }
    else
    {
      if (v26 > *(_QWORD *)(v10 + 80))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(v10 + 64, (void *)(v10 + 88), v26, 1);
        v25 = *(_QWORD *)(v10 + 72);
      }
      bzero((void *)(*(_QWORD *)(v10 + 64) + v25), a3);
      *(_QWORD *)(v10 + 72) += a3;
    }
  }
}

uint64_t llvm::MCObjectStreamer::emitCFIStartProcImpl(_QWORD *a1, unint64_t *a2)
{
  uint64_t v4;
  unint64_t TempSymbol;
  const char *v7;
  __int16 v8;

  v4 = a1[1];
  v7 = "tmp";
  v8 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(v4, (uint64_t)&v7, 1);
  *a2 = TempSymbol;
  return (*(uint64_t (**)(_QWORD *, unint64_t, _QWORD))(*a1 + 192))(a1, TempSymbol, 0);
}

uint64_t llvm::MCObjectStreamer::emitCFIEndProcImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t TempSymbol;
  const char *v7;
  __int16 v8;

  v4 = a1[1];
  v7 = "tmp";
  v8 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(v4, (uint64_t)&v7, 1);
  *(_QWORD *)(a2 + 8) = TempSymbol;
  return (*(uint64_t (**)(_QWORD *, unint64_t, _QWORD))(*a1 + 192))(a1, TempSymbol, 0);
}

int32x2_t llvm::MCObjectStreamer::emitLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  llvm::MCStreamer::emitLabel(a1, a2, a3);
  v5 = *(_DWORD *)(a2 + 8);
  if ((v5 & 8) == 0)
  {
    v6 = *(_QWORD *)(a1 + 272);
    *(_DWORD *)(a2 + 8) = v5 | 8;
    v14 = a2;
    v7 = *(uint64_t **)(v6 + 64);
    if ((unint64_t)v7 >= *(_QWORD *)(v6 + 72))
    {
      v13 = v6;
      v8 = sub_1C4DFEA3C((void **)(v6 + 56), &v14);
      v6 = v13;
    }
    else
    {
      *v7 = a2;
      v8 = v7 + 1;
    }
    *(_QWORD *)(v6 + 64) = v8;
  }
  v9 = *(uint64_t **)(a1 + 280);
  if (v9 == *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * *(unsigned int *)(a1 + 120) - 32) + 112)
    || (v10 = *v9) == 0
    || *(_BYTE *)(v10 + 48) != 1
    || (v11 = *(_QWORD *)(a1 + 272), *(_DWORD *)(v11 + 496)) && (*(_BYTE *)(v11 + 500) & 1) != 0)
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + 8) & 0xFFFFE3FF | 0x400;
    llvm::MCObjectStreamer::addPendingLabel((llvm::MCSection *)a1, (llvm::MCSymbol *)a2);
  }
  else
  {
    *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v10;
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(v10 + 72);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a2 + 8) & 0xFFFFE3FF | 0x400;
  }
  return llvm::MCObjectStreamer::emitPendingAssignments((llvm::MCObjectStreamer *)a1, (llvm::MCSymbol *)a2);
}

int32x2_t llvm::MCObjectStreamer::emitPendingAssignments(llvm::MCObjectStreamer *this, llvm::MCSymbol *a2)
{
  uint64_t *v3;
  int32x2_t result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = sub_1C5948E24((uint64_t *)this + 65, (uint64_t)a2);
  if ((uint64_t *)(*((_QWORD *)this + 65) + 40 * *((unsigned int *)this + 134)) != v3)
  {
    v5 = v3;
    v6 = (uint64_t *)v3[1];
    v7 = *((unsigned int *)v3 + 4);
    if ((_DWORD)v7)
    {
      v8 = &v6[2 * v7];
      do
      {
        v9 = *v6;
        v10 = v6[1];
        v6 += 2;
        (*(void (**)(llvm::MCObjectStreamer *, uint64_t, uint64_t))(*(_QWORD *)this + 280))(this, v9, v10);
      }
      while (v6 != v8);
      v6 = (uint64_t *)v5[1];
    }
    if (v6 != v5 + 3)
      free(v6);
    *v5 = -8192;
    result = vadd_s32(*(int32x2_t *)((char *)this + 528), (int32x2_t)0x1FFFFFFFFLL);
    *((int32x2_t *)this + 66) = result;
  }
  return result;
}

uint64_t *sub_1C5948E24(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *result;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
    return (uint64_t *)(v2 + 40 * v3);
  v5 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  result = (uint64_t *)(v2 + 40 * v5);
  v6 = *result;
  if (*result != a2)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v5 + v7++;
      v5 = v8 & (v3 - 1);
      result = (uint64_t *)(v2 + 40 * v5);
      v6 = *result;
      if (*result == a2)
        return result;
    }
    return (uint64_t *)(v2 + 40 * v3);
  }
  return result;
}

void llvm::MCObjectStreamer::emitULEB128Value(llvm::MCObjectStreamer *this, const llvm::MCExpr *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::MCSymbol **v20;
  uint64_t v21;
  llvm::MCSymbol *v22;
  unint64_t v23;

  v23 = 0;
  (*(void (**)(llvm::MCObjectStreamer *))(*(_QWORD *)this + 72))(this);
  llvm::MCExpr::evaluateAsAbsolute((uint64_t)a2, &v23);
  if (v4)
  {
    llvm::MCStreamer::emitULEB128IntValue(this, v23, 0);
  }
  else
  {
    v5 = operator new();
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_QWORD *)(v5 + 32) = -1;
    *(_QWORD *)(v5 + 40) = 0;
    *(_DWORD *)(v5 + 48) = 9;
    *(_BYTE *)(v5 + 88) = 0;
    *(_QWORD *)(v5 + 56) = a2;
    *(_QWORD *)(v5 + 64) = v5 + 88;
    *(_OWORD *)(v5 + 72) = xmmword_1C8663020;
    v6 = *((unsigned int *)this + 30);
    if (!(_DWORD)v6)
      goto LABEL_9;
    v7 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v6 - 32);
    if (!v7)
      goto LABEL_9;
    v8 = *((unsigned int *)this + 76);
    if ((_DWORD)v8)
    {
      v20 = (llvm::MCSymbol **)*((_QWORD *)this + 37);
      v21 = 8 * v8;
      do
      {
        v22 = *v20++;
        llvm::MCSection::addPendingLabel((_DWORD *)v7, v22, *((_DWORD *)this + 104));
        v21 -= 8;
      }
      while (v21);
      *((_DWORD *)this + 76) = 0;
    }
    v9 = *(_DWORD *)(v7 + 160);
    if (v9)
    {
      v14 = *((_DWORD *)this + 104);
      v15 = *(_DWORD **)(v7 + 152);
      v16 = v15;
      do
      {
        if (v16[2] == v14)
        {
          v17 = *(uint64_t **)v16;
          *v17 = **(_QWORD **)v16 & 7 | v5;
          v17[3] = 0;
          *((_DWORD *)v17 + 2) = v17[1] & 0xFFFFE3FF | 0x400;
          v15 = *(_DWORD **)(v7 + 152);
          v18 = *(unsigned int *)(v7 + 160);
          v19 = (char *)&v15[4 * v18] - (char *)(v16 + 4);
          if (v19)
          {
            memmove(v16, v16 + 4, v19 - 4);
            LODWORD(v18) = *(_DWORD *)(v7 + 160);
            v15 = *(_DWORD **)(v7 + 152);
          }
          v16 -= 4;
          v9 = v18 - 1;
          *(_DWORD *)(v7 + 160) = v9;
        }
        v16 += 4;
      }
      while (v16 != &v15[4 * v9]);
    }
    v10 = *((unsigned int *)this + 30);
    if ((_DWORD)v10)
      v11 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v10 - 32);
    else
LABEL_9:
      v11 = 0;
    v12 = (uint64_t *)*((_QWORD *)this + 35);
    v13 = *v12;
    *(_QWORD *)v5 = *v12;
    *(_QWORD *)(v5 + 8) = v12;
    *(_QWORD *)(v13 + 8) = v5;
    *v12 = v5;
    *(_QWORD *)(v5 + 16) = v11;
  }
}

void llvm::MCObjectStreamer::emitSLEB128Value(llvm::MCObjectStreamer *this, const llvm::MCExpr *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::MCSymbol **v20;
  uint64_t v21;
  llvm::MCSymbol *v22;
  uint64_t v23;

  v23 = 0;
  (*(void (**)(llvm::MCObjectStreamer *))(*(_QWORD *)this + 72))(this);
  llvm::MCExpr::evaluateAsAbsolute((uint64_t)a2, &v23);
  if (v4)
  {
    llvm::MCStreamer::emitSLEB128IntValue(this, v23);
  }
  else
  {
    v5 = operator new();
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_QWORD *)(v5 + 32) = -1;
    *(_QWORD *)(v5 + 40) = 0;
    *(_DWORD *)(v5 + 48) = 16777225;
    *(_BYTE *)(v5 + 88) = 0;
    *(_QWORD *)(v5 + 56) = a2;
    *(_QWORD *)(v5 + 64) = v5 + 88;
    *(_OWORD *)(v5 + 72) = xmmword_1C8663020;
    v6 = *((unsigned int *)this + 30);
    if (!(_DWORD)v6)
      goto LABEL_9;
    v7 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v6 - 32);
    if (!v7)
      goto LABEL_9;
    v8 = *((unsigned int *)this + 76);
    if ((_DWORD)v8)
    {
      v20 = (llvm::MCSymbol **)*((_QWORD *)this + 37);
      v21 = 8 * v8;
      do
      {
        v22 = *v20++;
        llvm::MCSection::addPendingLabel((_DWORD *)v7, v22, *((_DWORD *)this + 104));
        v21 -= 8;
      }
      while (v21);
      *((_DWORD *)this + 76) = 0;
    }
    v9 = *(_DWORD *)(v7 + 160);
    if (v9)
    {
      v14 = *((_DWORD *)this + 104);
      v15 = *(_DWORD **)(v7 + 152);
      v16 = v15;
      do
      {
        if (v16[2] == v14)
        {
          v17 = *(uint64_t **)v16;
          *v17 = **(_QWORD **)v16 & 7 | v5;
          v17[3] = 0;
          *((_DWORD *)v17 + 2) = v17[1] & 0xFFFFE3FF | 0x400;
          v15 = *(_DWORD **)(v7 + 152);
          v18 = *(unsigned int *)(v7 + 160);
          v19 = (char *)&v15[4 * v18] - (char *)(v16 + 4);
          if (v19)
          {
            memmove(v16, v16 + 4, v19 - 4);
            LODWORD(v18) = *(_DWORD *)(v7 + 160);
            v15 = *(_DWORD **)(v7 + 152);
          }
          v16 -= 4;
          v9 = v18 - 1;
          *(_DWORD *)(v7 + 160) = v9;
        }
        v16 += 4;
      }
      while (v16 != &v15[4 * v9]);
    }
    v10 = *((unsigned int *)this + 30);
    if ((_DWORD)v10)
      v11 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v10 - 32);
    else
LABEL_9:
      v11 = 0;
    v12 = (uint64_t *)*((_QWORD *)this + 35);
    v13 = *v12;
    *(_QWORD *)v5 = *v12;
    *(_QWORD *)(v5 + 8) = v12;
    *(_QWORD *)(v13 + 8) = v5;
    *v12 = v5;
    *(_QWORD *)(v5 + 16) = v11;
  }
}

BOOL llvm::MCObjectStreamer::changeSectionImpl(llvm::MCObjectStreamer *this, llvm::MCSection *a2, const llvm::MCExpr *a3)
{
  _BOOL8 v6;
  unsigned int v7;
  char v9;
  char *v10;
  unint64_t v11;

  *(_BYTE *)(*((_QWORD *)this + 1) + 1512) = 0;
  v6 = llvm::MCAssembler::registerSection(*((_QWORD *)this + 34), (uint64_t)a2);
  v7 = 0;
  v11 = 0;
  if (a3)
  {
    (*(void (**)(llvm::MCObjectStreamer *, _QWORD))(*(_QWORD *)this + 72))(this, 0);
    llvm::MCExpr::evaluateAsAbsolute((uint64_t)a3, &v11);
    if ((v9 & 1) != 0)
    {
      v7 = v11;
      if (v11 <= 0x2000)
        goto LABEL_2;
      v10 = "Subsection number out of range";
    }
    else
    {
      v10 = "Cannot evaluate subsection number";
    }
    llvm::report_fatal_error((llvm *)v10, (const char *)1);
  }
LABEL_2:
  *((_DWORD *)this + 104) = v7;
  *((_QWORD *)this + 35) = llvm::MCSection::getSubsectionInsertionPoint(a2, v7);
  return v6;
}

int32x2_t llvm::MCObjectStreamer::emitAssignment(llvm::MCObjectStreamer *this, llvm::MCSymbol *a2, const llvm::MCExpr **a3)
{
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  const llvm::MCExpr *v10;
  uint64_t v11;
  llvm::MCSymbol *v12;

  v5 = *((_DWORD *)a2 + 2);
  if ((v5 & 8) == 0)
  {
    v6 = *((_QWORD *)this + 34);
    *((_DWORD *)a2 + 2) = v5 | 8;
    v12 = a2;
    v7 = *(_QWORD **)(v6 + 64);
    if ((unint64_t)v7 >= *(_QWORD *)(v6 + 72))
    {
      v10 = (const llvm::MCExpr *)a3;
      v11 = v6;
      v8 = sub_1C4DFEA3C((void **)(v6 + 56), &v12);
      a3 = (const llvm::MCExpr **)v10;
      v6 = v11;
    }
    else
    {
      *v7 = a2;
      v8 = v7 + 1;
    }
    *(_QWORD *)(v6 + 64) = v8;
  }
  llvm::MCStreamer::emitAssignment(this, a2, a3);
  return llvm::MCObjectStreamer::emitPendingAssignments(this, a2);
}

_QWORD *llvm::MCObjectStreamer::emitConditionalAssignment(llvm::MCObjectStreamer *this, llvm::MCSymbol *a2, const llvm::MCExpr *a3)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *((_QWORD *)a3 + 2);
  if ((*(_BYTE *)(v9 + 8) & 8) != 0)
    return (_QWORD *)(*(uint64_t (**)(llvm::MCObjectStreamer *, llvm::MCSymbol *, const llvm::MCExpr *))(*(_QWORD *)this + 280))(this, a2, a3);
  result = sub_1C62BD59C((uint64_t)this + 520, &v9);
  v6 = *((unsigned int *)result + 4);
  if (v6 >= *((_DWORD *)result + 5))
  {
    v8 = result;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 1), (uint64_t)(result + 3), v6 + 1, 16);
    result = v8;
    LODWORD(v6) = *((_DWORD *)v8 + 4);
  }
  v7 = (_QWORD *)(result[1] + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  ++*((_DWORD *)result + 4);
  return result;
}

uint64_t llvm::MCObjectStreamer::emitInstruction(uint64_t a1, uint64_t a2, llvm::MCSection *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  __int16 v16;
  uint64_t v17[4];
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21[4];
  __int16 v22;
  uint64_t v23[5];
  uint64_t v24[5];
  _BYTE v25[40];

  v6 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v6)
    v7 = *(_QWORD **)(*(_QWORD *)(a1 + 112) + 32 * v6 - 32);
  else
    v7 = 0;
  if ((*(unsigned int (**)(_QWORD *))(*v7 + 16))(v7))
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a2 + 8);
    v11 = (*(uint64_t (**)(_QWORD *))(*v7 + 24))(v7);
    v22 = 261;
    v21[0] = v11;
    v21[1] = v12;
    v19 = " section '";
    v20 = 259;
    sub_1C4825FE4(v21, (uint64_t *)&v19, (uint64_t)v23);
    v13 = v7[25];
    v14 = v7[26];
    v18 = 261;
    v17[0] = v13;
    v17[1] = v14;
    sub_1C4825FE4(v23, v17, (uint64_t)v24);
    v15 = "' cannot have instructions";
    v16 = 259;
    sub_1C4825FE4(v24, (uint64_t *)&v15, (uint64_t)v25);
    return llvm::MCContext::reportError(v9, v10, (uint64_t)v25);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, llvm::MCSection *))(**(_QWORD **)(*(_QWORD *)(a1 + 272) + 8)
                                                                        + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 8), a1, a2, a3);
    llvm::MCObjectStreamer::emitInstructionImpl((llvm::MCDwarfLineEntry *)a1, (__int128 *)a2, a3);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 272) + 8) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 8), a1, a2);
  }
}

void llvm::MCObjectStreamer::emitInstructionImpl(llvm::MCDwarfLineEntry *this, __int128 *a2, llvm::MCSection *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::MCStreamer *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(llvm::MCDwarfLineEntry *, __int128 *, llvm::MCSection *);
  __int128 v17;
  void *v18[2];
  _BYTE v19[136];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)a2 + 6);
  if (v6)
  {
    v7 = v6 - 1;
    do
    {
      v8 = v7;
      v9 = *((_QWORD *)a2 + 2);
      if (*(_BYTE *)(v9 + 16 * v7) == 5)
        llvm::MCStreamer::visitUsedExpr(this, *(const llvm::MCExpr ***)(v9 + 16 * v7 + 8));
      --v7;
    }
    while (v8);
  }
  v10 = *((unsigned int *)this + 30);
  if ((_DWORD)v10)
    v11 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v10 - 32);
  else
    v11 = 0;
  *(_BYTE *)(v11 + 44) |= 2u;
  v12 = *((unsigned int *)this + 30);
  if ((_DWORD)v12)
    v13 = *(llvm::MCStreamer **)(*((_QWORD *)this + 14) + 32 * v12 - 32);
  else
    v13 = 0;
  llvm::MCDwarfLineEntry::make(this, v13, a3);
  v14 = *((_QWORD *)this + 34);
  v15 = *(_QWORD *)(v14 + 8);
  if (((*(uint64_t (**)(uint64_t, __int128 *, llvm::MCSection *))(*(_QWORD *)v15 + 128))(v15, a2, a3) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15) & 1) == 0)
  {
    v16 = *(void (**)(llvm::MCDwarfLineEntry *, __int128 *, llvm::MCSection *))(*(_QWORD *)this + 1288);
LABEL_13:
    v16(this, a2, a3);
    return;
  }
  if ((*(_BYTE *)(v14 + 500) & 1) == 0 && (!*(_DWORD *)(v14 + 496) || !*(_DWORD *)(v11 + 36)))
  {
    v16 = *(void (**)(llvm::MCDwarfLineEntry *, __int128 *, llvm::MCSection *))(*(_QWORD *)this + 1304);
    goto LABEL_13;
  }
  v17 = *a2;
  v18[0] = v19;
  v18[1] = (void *)0x800000000;
  if (*((_DWORD *)a2 + 6))
    sub_1C592C150((uint64_t)v18, (uint64_t)(a2 + 1));
  v19[128] = *((_BYTE *)a2 + 160);
  if ((*(unsigned int (**)(uint64_t, __int128 *, llvm::MCSection *))(*(_QWORD *)v15 + 128))(v15, &v17, a3))
  {
    do
      (*(void (**)(uint64_t, __int128 *, llvm::MCSection *))(*(_QWORD *)v15 + 152))(v15, &v17, a3);
    while (((*(uint64_t (**)(uint64_t, __int128 *, llvm::MCSection *))(*(_QWORD *)v15 + 128))(v15, &v17, a3) & 1) != 0);
  }
  (*(void (**)(llvm::MCDwarfLineEntry *, __int128 *, llvm::MCSection *))(*(_QWORD *)this + 1288))(this, &v17, a3);
  if (v18[0] != v19)
    free(v18[0]);
}

void llvm::MCObjectStreamer::emitInstToFragment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void **v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  llvm::MCSymbol **v32;
  uint64_t v33;
  llvm::MCSymbol *v34;
  _QWORD v35[2];
  uint64_t v36;
  int v37;
  void *v38;
  __int128 v39;
  _QWORD v40[18];

  v40[16] = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  v7 = v6;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_QWORD *)(v6 + 32) = -1;
  *(_QWORD *)(v6 + 40) = 0;
  *(_DWORD *)(v6 + 48) = 65541;
  *(_BYTE *)(v6 + 52) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  v8 = (void *)(v6 + 88);
  *(_QWORD *)(v6 + 64) = v6 + 88;
  v9 = v6 + 64;
  *(_OWORD *)(v6 + 72) = xmmword_1C6464ED0;
  *(_QWORD *)(v6 + 96) = v6 + 112;
  v10 = v6 + 96;
  *(_QWORD *)(v6 + 104) = 0x100000000;
  *(_OWORD *)(v6 + 136) = *(_OWORD *)a2;
  v11 = (void *)(v6 + 168);
  *(_QWORD *)(v6 + 152) = v6 + 168;
  v12 = (void **)(v6 + 152);
  *(_QWORD *)(v6 + 160) = 0x800000000;
  v13 = *(_DWORD *)(a2 + 24);
  if (!v13 || v12 == (void **)(a2 + 16))
    goto LABEL_7;
  if (v13 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 152, (uint64_t)v11, *(unsigned int *)(a2 + 24), 16);
    v14 = *(unsigned int *)(a2 + 24);
    if (!(_DWORD)v14)
      goto LABEL_6;
    v11 = *v12;
  }
  else
  {
    v14 = *(unsigned int *)(a2 + 24);
  }
  memcpy(v11, *(const void **)(a2 + 16), 16 * v14);
LABEL_6:
  *(_DWORD *)(v7 + 160) = v13;
LABEL_7:
  *(_BYTE *)(v7 + 296) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(v7 + 304) = 0;
  *(_QWORD *)(v7 + 56) = a3;
  v15 = *(unsigned int *)(a1 + 120);
  if (!(_DWORD)v15)
    goto LABEL_12;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v15 - 32);
  if (!v16)
    goto LABEL_12;
  v17 = *(unsigned int *)(a1 + 304);
  if ((_DWORD)v17)
  {
    v32 = *(llvm::MCSymbol ***)(a1 + 296);
    v33 = 8 * v17;
    do
    {
      v34 = *v32++;
      llvm::MCSection::addPendingLabel((_DWORD *)v16, v34, *(_DWORD *)(a1 + 416));
      v33 -= 8;
    }
    while (v33);
    *(_DWORD *)(a1 + 304) = 0;
  }
  v18 = *(_DWORD *)(v16 + 160);
  if (v18)
  {
    v26 = *(_DWORD *)(a1 + 416);
    v27 = *(_DWORD **)(v16 + 152);
    v28 = v27;
    do
    {
      if (v28[2] == v26)
      {
        v29 = *(uint64_t **)v28;
        *v29 = **(_QWORD **)v28 & 7 | v7;
        v29[3] = 0;
        *((_DWORD *)v29 + 2) = v29[1] & 0xFFFFE3FF | 0x400;
        v27 = *(_DWORD **)(v16 + 152);
        v30 = *(unsigned int *)(v16 + 160);
        v31 = (char *)&v27[4 * v30] - (char *)(v28 + 4);
        if (v31)
        {
          memmove(v28, v28 + 4, v31 - 4);
          LODWORD(v30) = *(_DWORD *)(v16 + 160);
          v27 = *(_DWORD **)(v16 + 152);
        }
        v28 -= 4;
        v18 = v30 - 1;
        *(_DWORD *)(v16 + 160) = v18;
      }
      v28 += 4;
    }
    while (v28 != &v27[4 * v18]);
  }
  v19 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v19)
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v19 - 32);
  else
LABEL_12:
    v20 = 0;
  v21 = *(uint64_t **)(a1 + 280);
  v22 = *v21;
  *(_QWORD *)v7 = *v21;
  *(_QWORD *)(v7 + 8) = v21;
  *(_QWORD *)(v22 + 8) = v7;
  *v21 = v7;
  *(_QWORD *)(v7 + 16) = v20;
  v38 = v40;
  v39 = xmmword_1C85F20B0;
  sub_1C613932C((uint64_t)v35, (uint64_t)&v38);
  (*(void (**)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 272) + 16)
                                                                      + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 16), a2, v35, v10, a3);
  v24 = v38;
  v23 = v39;
  v25 = *(_QWORD *)(v7 + 72);
  if (*(_QWORD *)(v7 + 80) < (unint64_t)(v25 + v39))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(v9, v8, v25 + v39, 1);
    v25 = *(_QWORD *)(v7 + 72);
  }
  if (v23)
  {
    memcpy((void *)(*(_QWORD *)(v7 + 64) + v25), v24, v23);
    v25 = *(_QWORD *)(v7 + 72);
  }
  *(_QWORD *)(v7 + 72) = v25 + v23;
  v35[0] = off_1E81A6E70;
  if (v37 == 1 && v36)
    MEMORY[0x1CAA32F9C](v36, 0x1000C8077774924);
  if (v38 != v40)
    free(v38);
}

void llvm::MCObjectStreamer::emitDwarfLocDirective(uint64_t a1, int a2, llvm::MCSection *a3, __int16 a4, char a5, char a6, int a7)
{
  int v11;
  uint64_t v14;
  llvm::MCStreamer *v15;
  uint64_t v16;

  v11 = (int)a3;
  v14 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v14)
    v15 = *(llvm::MCStreamer **)(*(_QWORD *)(a1 + 112) + 32 * v14 - 32);
  else
    v15 = 0;
  llvm::MCDwarfLineEntry::make((llvm::MCDwarfLineEntry *)a1, v15, a3);
  v16 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v16 + 1496) = a2;
  *(_DWORD *)(v16 + 1500) = v11;
  *(_WORD *)(v16 + 1504) = a4;
  *(_BYTE *)(v16 + 1506) = a5;
  *(_BYTE *)(v16 + 1507) = a6;
  *(_DWORD *)(v16 + 1508) = a7;
  *(_BYTE *)(v16 + 1512) = 1;
}

void llvm::MCObjectStreamer::emitDwarfAdvanceLineAddr(llvm::MCObjectStreamer *this, uint64_t a2, const llvm::MCSymbol *a3, const llvm::MCSymbol *a4, uint64_t a5)
{
  unint64_t v8;
  int v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::MCSymbol **v27;
  uint64_t v28;
  llvm::MCSymbol *v29;
  unint64_t v30;

  if (a3)
  {
    v8 = sub_1C5949EB4((uint64_t)this, (uint64_t)a4, (uint64_t)a3);
    v30 = 0;
    (*(void (**)(llvm::MCObjectStreamer *))(*(_QWORD *)this + 72))(this);
    llvm::MCExpr::evaluateAsAbsolute(v8, &v30);
    if (v9)
    {
      llvm::MCDwarfLineAddr::Emit(this, *(unsigned __int16 *)(*((_QWORD *)this + 34) + 200) | (*(unsigned __int8 *)(*((_QWORD *)this + 34) + 202) << 16), a2, v30);
    }
    else
    {
      v12 = operator new();
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_QWORD *)(v12 + 32) = -1;
      *(_QWORD *)(v12 + 40) = 0;
      *(_BYTE *)(v12 + 48) = 7;
      *(_DWORD *)(v12 + 49) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_QWORD *)(v12 + 64) = v12 + 88;
      *(_OWORD *)(v12 + 72) = xmmword_1C6464ED0;
      *(_QWORD *)(v12 + 96) = v12 + 112;
      *(_QWORD *)(v12 + 104) = 0x100000000;
      *(_QWORD *)(v12 + 136) = a2;
      *(_QWORD *)(v12 + 144) = v8;
      v13 = *((unsigned int *)this + 30);
      if (!(_DWORD)v13)
        goto LABEL_12;
      v14 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v13 - 32);
      if (!v14)
        goto LABEL_12;
      v15 = *((unsigned int *)this + 76);
      if ((_DWORD)v15)
      {
        v27 = (llvm::MCSymbol **)*((_QWORD *)this + 37);
        v28 = 8 * v15;
        do
        {
          v29 = *v27++;
          llvm::MCSection::addPendingLabel((_DWORD *)v14, v29, *((_DWORD *)this + 104));
          v28 -= 8;
        }
        while (v28);
        *((_DWORD *)this + 76) = 0;
      }
      v16 = *(_DWORD *)(v14 + 160);
      if (v16)
      {
        v21 = *((_DWORD *)this + 104);
        v22 = *(_DWORD **)(v14 + 152);
        v23 = v22;
        do
        {
          if (v23[2] == v21)
          {
            v24 = *(uint64_t **)v23;
            *v24 = **(_QWORD **)v23 & 7 | v12;
            v24[3] = 0;
            *((_DWORD *)v24 + 2) = v24[1] & 0xFFFFE3FF | 0x400;
            v22 = *(_DWORD **)(v14 + 152);
            v25 = *(unsigned int *)(v14 + 160);
            v26 = (char *)&v22[4 * v25] - (char *)(v23 + 4);
            if (v26)
            {
              memmove(v23, v23 + 4, v26 - 4);
              LODWORD(v25) = *(_DWORD *)(v14 + 160);
              v22 = *(_DWORD **)(v14 + 152);
            }
            v23 -= 4;
            v16 = v25 - 1;
            *(_DWORD *)(v14 + 160) = v16;
          }
          v23 += 4;
        }
        while (v23 != &v22[4 * v16]);
      }
      v17 = *((unsigned int *)this + 30);
      if ((_DWORD)v17)
        v18 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v17 - 32);
      else
LABEL_12:
        v18 = 0;
      v19 = (uint64_t *)*((_QWORD *)this + 35);
      v20 = *v19;
      *(_QWORD *)v12 = *v19;
      *(_QWORD *)(v12 + 8) = v19;
      *(_QWORD *)(v20 + 8) = v12;
      *v19 = v12;
      *(_QWORD *)(v12 + 16) = v18;
    }
  }
  else
  {
    v11 = *(unsigned __int16 *)(*((_QWORD *)this + 34) + 200) | (*(unsigned __int8 *)(*((_QWORD *)this + 34) + 202) << 16);
    (*(void (**)(llvm::MCObjectStreamer *, _QWORD, uint64_t))(*(_QWORD *)this + 512))(this, 0, 1);
    llvm::MCStreamer::emitULEB128IntValue(this, (int)a5 + 1, 0);
    (*(void (**)(llvm::MCObjectStreamer *, uint64_t, uint64_t))(*(_QWORD *)this + 512))(this, 2, 1);
    llvm::MCStreamer::emitSymbolValue(this, a4, a5, 0);
    llvm::MCDwarfLineAddr::Emit(this, v11, a2, 0);
  }
}

unint64_t sub_1C5949EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t result;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = sub_1C484358C(v5 + 192, 24, 3);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 152) + 18) << 16;
  *(_BYTE *)v6 = 2;
  *(_DWORD *)(v6 + 1) = v7 | (*(unsigned __int8 *)(v6 + 4) << 24);
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  v8 = sub_1C484358C(v5 + 192, 24, 3);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 152) + 18) << 16;
  *(_BYTE *)v8 = 2;
  *(_DWORD *)(v8 + 1) = v9 | (*(unsigned __int8 *)(v8 + 4) << 24);
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = a3;
  result = sub_1C484358C(v5 + 192, 32, 3);
  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 1) = (*(unsigned __int8 *)(result + 4) << 24) | 0x12;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = v8;
  return result;
}

void llvm::MCObjectStreamer::emitDwarfAdvanceFrameAddr(llvm::MCObjectStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  llvm::MCSymbol **v14;
  uint64_t v15;
  llvm::MCSymbol *v16;
  llvm::MCObjectStreamer *v17;

  v4 = sub_1C5949EB4((uint64_t)this, (uint64_t)a3, (uint64_t)a2);
  v17 = 0;
  (*(void (**)(llvm::MCObjectStreamer *))(*(_QWORD *)this + 72))(this);
  llvm::MCExpr::evaluateAsAbsolute(v4, &v17);
  if (v5)
  {
    llvm::MCDwarfFrameEmitter::EmitAdvanceLoc(this, v17);
  }
  else
  {
    v6 = operator new();
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_QWORD *)(v6 + 32) = -1;
    *(_QWORD *)(v6 + 40) = 0;
    *(_BYTE *)(v6 + 48) = 8;
    *(_DWORD *)(v6 + 49) = 0;
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 64) = v6 + 88;
    *(_OWORD *)(v6 + 72) = xmmword_1C6464ED0;
    *(_QWORD *)(v6 + 96) = v6 + 112;
    *(_QWORD *)(v6 + 104) = 0x100000000;
    *(_QWORD *)(v6 + 136) = v4;
    v7 = *((unsigned int *)this + 30);
    if (!(_DWORD)v7)
      goto LABEL_7;
    v8 = *(_DWORD **)(*((_QWORD *)this + 14) + 32 * v7 - 32);
    if (!v8)
      goto LABEL_7;
    v9 = *((unsigned int *)this + 76);
    if ((_DWORD)v9)
    {
      v14 = (llvm::MCSymbol **)*((_QWORD *)this + 37);
      v15 = 8 * v9;
      do
      {
        v16 = *v14++;
        llvm::MCSection::addPendingLabel(v8, v16, *((_DWORD *)this + 104));
        v15 -= 8;
      }
      while (v15);
      *((_DWORD *)this + 76) = 0;
    }
    llvm::MCSection::flushPendingLabels(v8, v6, 0, *((_DWORD *)this + 104));
    v10 = *((unsigned int *)this + 30);
    if ((_DWORD)v10)
      v11 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v10 - 32);
    else
LABEL_7:
      v11 = 0;
    v12 = (uint64_t *)*((_QWORD *)this + 35);
    v13 = *v12;
    *(_QWORD *)v6 = *v12;
    *(_QWORD *)(v6 + 8) = v12;
    *(_QWORD *)(v13 + 8) = v6;
    *v12 = v6;
    *(_QWORD *)(v6 + 16) = v11;
  }
}

_QWORD *llvm::MCObjectStreamer::emitBytes(uint64_t a1, const void *a2, llvm::MCSection *a3)
{
  uint64_t v6;
  llvm::MCStreamer *v7;
  _QWORD *result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::MCSymbol **v22;
  uint64_t v23;
  llvm::MCSymbol *v24;

  v6 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v6)
    v7 = *(llvm::MCStreamer **)(*(_QWORD *)(a1 + 112) + 32 * v6 - 32);
  else
    v7 = 0;
  llvm::MCDwarfLineEntry::make((llvm::MCDwarfLineEntry *)a1, v7, a3);
  result = (_QWORD *)llvm::MCObjectStreamer::getOrCreateDataFragment((llvm::MCObjectStreamer *)a1, 0);
  v9 = (unint64_t)result;
  v10 = *(unsigned int *)(a1 + 120);
  if (!(_DWORD)v10)
    goto LABEL_8;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v10 - 32);
  if (!v11)
    goto LABEL_8;
  v12 = result[9];
  v13 = *(unsigned int *)(a1 + 304);
  if ((_DWORD)v13)
  {
    v22 = *(llvm::MCSymbol ***)(a1 + 296);
    v23 = 8 * v13;
    do
    {
      v24 = *v22++;
      result = llvm::MCSection::addPendingLabel((_DWORD *)v11, v24, *(_DWORD *)(a1 + 416));
      v23 -= 8;
    }
    while (v23);
    *(_DWORD *)(a1 + 304) = 0;
    v14 = *(_DWORD *)(a1 + 416);
    if (!v9)
    {
      result = llvm::MCSection::flushPendingLabels((_DWORD *)v11, 0, 0, v14);
      goto LABEL_8;
    }
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 416);
  }
  v15 = *(_DWORD *)(v11 + 160);
  if (v15)
  {
    v17 = *(_DWORD **)(v11 + 152);
    v18 = v17;
    do
    {
      if (v18[2] == v14)
      {
        v19 = *(unint64_t **)v18;
        *v19 = **(_QWORD **)v18 & 7 | v9;
        v19[3] = v12;
        *((_DWORD *)v19 + 2) = v19[1] & 0xFFFFE3FF | 0x400;
        v17 = *(_DWORD **)(v11 + 152);
        v20 = *(unsigned int *)(v11 + 160);
        v21 = (char *)&v17[4 * v20] - (char *)(v18 + 4);
        if (v21)
        {
          result = memmove(v18, v18 + 4, v21 - 4);
          LODWORD(v20) = *(_DWORD *)(v11 + 160);
          v17 = *(_DWORD **)(v11 + 152);
        }
        v18 -= 4;
        v15 = v20 - 1;
        *(_DWORD *)(v11 + 160) = v15;
      }
      v18 += 4;
    }
    while (v18 != &v17[4 * v15]);
  }
LABEL_8:
  v16 = *(_QWORD *)(v9 + 72);
  if (*(_QWORD *)(v9 + 80) >= (unint64_t)a3 + v16 && a3)
    goto LABEL_10;
  if (*(_QWORD *)(v9 + 80) < (unint64_t)a3 + v16)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod(v9 + 64, (void *)(v9 + 88), (unint64_t)a3 + v16, 1);
    v16 = *(_QWORD *)(v9 + 72);
  }
  if (a3)
  {
LABEL_10:
    result = memcpy((void *)(*(_QWORD *)(v9 + 64) + v16), a2, (size_t)a3);
    v16 = *(_QWORD *)(v9 + 72);
  }
  *(_QWORD *)(v9 + 72) = (char *)a3 + v16;
  return result;
}

uint64_t llvm::MCObjectStreamer::emitValueToAlignment(llvm::MCObjectStreamer *this, unsigned int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::MCSymbol **v27;
  uint64_t v28;
  llvm::MCSymbol *v29;

  if (a5)
    v9 = a5;
  else
    v9 = a2;
  result = operator new();
  v11 = result;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_QWORD *)(result + 32) = -1;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 47) = 0;
  *(_DWORD *)(result + 52) = a2;
  *(_BYTE *)(result + 56) &= ~1u;
  *(_QWORD *)(result + 64) = a3;
  *(_DWORD *)(result + 72) = a4;
  *(_DWORD *)(result + 76) = v9;
  v12 = *((unsigned int *)this + 30);
  if (!(_DWORD)v12)
  {
LABEL_10:
    v12 = 0;
    v17 = 0;
    v16 = 1;
    goto LABEL_11;
  }
  v13 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v12 - 32);
  if (v13)
  {
    v14 = *((unsigned int *)this + 76);
    if ((_DWORD)v14)
    {
      v27 = (llvm::MCSymbol **)*((_QWORD *)this + 37);
      v28 = 8 * v14;
      do
      {
        v29 = *v27++;
        result = (uint64_t)llvm::MCSection::addPendingLabel((_DWORD *)v13, v29, *((_DWORD *)this + 104));
        v28 -= 8;
      }
      while (v28);
      *((_DWORD *)this + 76) = 0;
    }
    v15 = *(_DWORD *)(v13 + 160);
    if (v15)
    {
      v21 = *((_DWORD *)this + 104);
      v22 = *(_DWORD **)(v13 + 152);
      v23 = v22;
      do
      {
        if (v23[2] == v21)
        {
          v24 = *(uint64_t **)v23;
          *v24 = **(_QWORD **)v23 & 7 | v11;
          v24[3] = 0;
          *((_DWORD *)v24 + 2) = v24[1] & 0xFFFFE3FF | 0x400;
          v22 = *(_DWORD **)(v13 + 152);
          v25 = *(unsigned int *)(v13 + 160);
          v26 = (char *)&v22[4 * v25] - (char *)(v23 + 4);
          if (v26)
          {
            result = (uint64_t)memmove(v23, v23 + 4, v26 - 4);
            LODWORD(v25) = *(_DWORD *)(v13 + 160);
            v22 = *(_DWORD **)(v13 + 152);
          }
          v23 -= 4;
          v15 = v25 - 1;
          *(_DWORD *)(v13 + 160) = v15;
        }
        v23 += 4;
      }
      while (v23 != &v22[4 * v15]);
    }
    v12 = *((unsigned int *)this + 30);
    if ((_DWORD)v12)
    {
      v16 = 0;
      v17 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v12 - 32);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  v16 = 0;
  v17 = 0;
LABEL_11:
  v18 = (uint64_t *)*((_QWORD *)this + 35);
  v19 = *v18;
  *(_QWORD *)v11 = *v18;
  *(_QWORD *)(v11 + 8) = v18;
  *(_QWORD *)(v19 + 8) = v11;
  *v18 = v11;
  *(_QWORD *)(v11 + 16) = v17;
  if ((v16 & 1) != 0)
    v20 = 0;
  else
    v20 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v12 - 32);
  if ((1 << *(_BYTE *)(v20 + 24)) < a2)
    *(_BYTE *)(v20 + 24) = __clz(a2) ^ 0x3F;
  return result;
}

uint64_t llvm::MCObjectStreamer::emitCodeAlignment(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))(*a1)[79])(a1, a2, 0, 1, a4);
  v7 = *a1[35];
  *(_BYTE *)(v7 + 56) |= 1u;
  *(_QWORD *)(v7 + 80) = a3;
  return result;
}

uint64_t llvm::MCObjectStreamer::emitValueToOffset(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::MCSymbol **v24;
  uint64_t v25;
  llvm::MCSymbol *v26;

  result = operator new();
  v9 = result;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_QWORD *)(result + 32) = -1;
  *(_QWORD *)(result + 40) = 0;
  *(_WORD *)(result + 48) = 6;
  *(_BYTE *)(result + 50) = 0;
  *(_BYTE *)(result + 51) = a3;
  *(_QWORD *)(result + 56) = a2;
  *(_QWORD *)(result + 64) = a4;
  v10 = *(unsigned int *)(a1 + 120);
  if (!(_DWORD)v10)
    goto LABEL_7;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v10 - 32);
  if (!v11)
    goto LABEL_7;
  v12 = *(unsigned int *)(a1 + 304);
  if ((_DWORD)v12)
  {
    v24 = *(llvm::MCSymbol ***)(a1 + 296);
    v25 = 8 * v12;
    do
    {
      v26 = *v24++;
      result = (uint64_t)llvm::MCSection::addPendingLabel((_DWORD *)v11, v26, *(_DWORD *)(a1 + 416));
      v25 -= 8;
    }
    while (v25);
    *(_DWORD *)(a1 + 304) = 0;
  }
  v13 = *(_DWORD *)(v11 + 160);
  if (v13)
  {
    v18 = *(_DWORD *)(a1 + 416);
    v19 = *(_DWORD **)(v11 + 152);
    v20 = v19;
    do
    {
      if (v20[2] == v18)
      {
        v21 = *(unint64_t **)v20;
        *v21 = **(_QWORD **)v20 & 7 | v9;
        v21[3] = 0;
        *((_DWORD *)v21 + 2) = v21[1] & 0xFFFFE3FF | 0x400;
        v19 = *(_DWORD **)(v11 + 152);
        v22 = *(unsigned int *)(v11 + 160);
        v23 = (char *)&v19[4 * v22] - (char *)(v20 + 4);
        if (v23)
        {
          result = (uint64_t)memmove(v20, v20 + 4, v23 - 4);
          LODWORD(v22) = *(_DWORD *)(v11 + 160);
          v19 = *(_DWORD **)(v11 + 152);
        }
        v20 -= 4;
        v13 = v22 - 1;
        *(_DWORD *)(v11 + 160) = v13;
      }
      v20 += 4;
    }
    while (v20 != &v19[4 * v13]);
  }
  v14 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v14)
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v14 - 32);
  else
LABEL_7:
    v15 = 0;
  v16 = *(uint64_t **)(a1 + 280);
  v17 = *v16;
  *(_QWORD *)v9 = *v16;
  *(_QWORD *)(v9 + 8) = v16;
  *(_QWORD *)(v17 + 8) = v9;
  *v16 = v9;
  *(_QWORD *)(v9 + 16) = v15;
  return result;
}

__int128 *llvm::MCObjectStreamer::emitDTPRel32Value(llvm::MCObjectStreamer *this, const llvm::MCExpr *a2)
{
  uint64_t DataFragment;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 *result;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::MCSymbol **v22;
  uint64_t v23;
  llvm::MCSymbol *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  const llvm::MCExpr *v31;
  int v32;
  int v33;
  uint64_t v34;

  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(this, 0);
  v5 = DataFragment;
  v6 = *((unsigned int *)this + 30);
  if (!(_DWORD)v6)
    goto LABEL_6;
  v7 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v6 - 32);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD *)(DataFragment + 72);
  v9 = *((unsigned int *)this + 76);
  if (!(_DWORD)v9)
  {
    v10 = *((_DWORD *)this + 104);
    goto LABEL_5;
  }
  v22 = (llvm::MCSymbol **)*((_QWORD *)this + 37);
  v23 = 8 * v9;
  do
  {
    v24 = *v22++;
    llvm::MCSection::addPendingLabel((_DWORD *)v7, v24, *((_DWORD *)this + 104));
    v23 -= 8;
  }
  while (v23);
  *((_DWORD *)this + 76) = 0;
  v10 = *((_DWORD *)this + 104);
  if (v5)
  {
LABEL_5:
    v11 = *(_DWORD *)(v7 + 160);
    if (v11)
    {
      v17 = *(_DWORD **)(v7 + 152);
      v18 = v17;
      do
      {
        if (v18[2] == v10)
        {
          v19 = *(uint64_t **)v18;
          *v19 = **(_QWORD **)v18 & 7 | v5;
          v19[3] = v8;
          *((_DWORD *)v19 + 2) = v19[1] & 0xFFFFE3FF | 0x400;
          v17 = *(_DWORD **)(v7 + 152);
          v20 = *(unsigned int *)(v7 + 160);
          v21 = (char *)&v17[4 * v20] - (char *)(v18 + 4);
          if (v21)
          {
            memmove(v18, v18 + 4, v21 - 4);
            LODWORD(v20) = *(_DWORD *)(v7 + 160);
            v17 = *(_DWORD **)(v7 + 152);
          }
          v18 -= 4;
          v11 = v20 - 1;
          *(_DWORD *)(v7 + 160) = v11;
        }
        v18 += 4;
      }
      while (v18 != &v17[4 * v11]);
    }
    goto LABEL_6;
  }
  v25 = *(_DWORD *)(v7 + 160);
  if (v25)
  {
    v26 = *(_DWORD **)(v7 + 152);
    v27 = v26;
    do
    {
      if (v27[2] == v10)
      {
        v28 = *(uint64_t **)v27;
        *v28 = **(_QWORD **)v27 & 7;
        v28[3] = 0;
        *((_DWORD *)v28 + 2) = v28[1] & 0xFFFFE3FF | 0x400;
        v26 = *(_DWORD **)(v7 + 152);
        v29 = *(unsigned int *)(v7 + 160);
        v30 = (char *)&v26[4 * v29] - (char *)(v27 + 4);
        if (v30)
        {
          memmove(v27, v27 + 4, v30 - 4);
          LODWORD(v29) = *(_DWORD *)(v7 + 160);
          v26 = *(_DWORD **)(v7 + 152);
        }
        v27 -= 4;
        v25 = v29 - 1;
        *(_DWORD *)(v7 + 160) = v25;
      }
      v27 += 4;
    }
    while (v27 != &v26[4 * v25]);
  }
LABEL_6:
  v12 = *(_QWORD *)(v5 + 72);
  v31 = a2;
  v32 = v12;
  v33 = 14;
  v34 = 0;
  result = (__int128 *)sub_1C4926708(v5 + 120, (unint64_t)&v31, 1);
  v14 = *(_QWORD *)(v5 + 120) + 24 * *(unsigned int *)(v5 + 128);
  v15 = *result;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)result + 2);
  *(_OWORD *)v14 = v15;
  ++*(_DWORD *)(v5 + 128);
  v16 = *(_QWORD *)(v5 + 72);
  if (v16 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    if (v16 + 4 > *(_QWORD *)(v5 + 80))
    {
      result = (__int128 *)llvm::SmallVectorBase<unsigned long long>::grow_pod(v5 + 64, (void *)(v5 + 88), v16 + 4, 1);
      v16 = *(_QWORD *)(v5 + 72);
    }
    *(_DWORD *)(*(_QWORD *)(v5 + 64) + v16) = 0;
    v16 = *(_QWORD *)(v5 + 72);
  }
  *(_QWORD *)(v5 + 72) = v16 + 4;
  return result;
}

__int128 *llvm::MCObjectStreamer::emitDTPRel64Value(llvm::MCObjectStreamer *this, const llvm::MCExpr *a2)
{
  uint64_t DataFragment;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 *result;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::MCSymbol **v22;
  uint64_t v23;
  llvm::MCSymbol *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  const llvm::MCExpr *v31;
  int v32;
  int v33;
  uint64_t v34;

  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(this, 0);
  v5 = DataFragment;
  v6 = *((unsigned int *)this + 30);
  if (!(_DWORD)v6)
    goto LABEL_6;
  v7 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v6 - 32);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD *)(DataFragment + 72);
  v9 = *((unsigned int *)this + 76);
  if (!(_DWORD)v9)
  {
    v10 = *((_DWORD *)this + 104);
    goto LABEL_5;
  }
  v22 = (llvm::MCSymbol **)*((_QWORD *)this + 37);
  v23 = 8 * v9;
  do
  {
    v24 = *v22++;
    llvm::MCSection::addPendingLabel((_DWORD *)v7, v24, *((_DWORD *)this + 104));
    v23 -= 8;
  }
  while (v23);
  *((_DWORD *)this + 76) = 0;
  v10 = *((_DWORD *)this + 104);
  if (v5)
  {
LABEL_5:
    v11 = *(_DWORD *)(v7 + 160);
    if (v11)
    {
      v17 = *(_DWORD **)(v7 + 152);
      v18 = v17;
      do
      {
        if (v18[2] == v10)
        {
          v19 = *(uint64_t **)v18;
          *v19 = **(_QWORD **)v18 & 7 | v5;
          v19[3] = v8;
          *((_DWORD *)v19 + 2) = v19[1] & 0xFFFFE3FF | 0x400;
          v17 = *(_DWORD **)(v7 + 152);
          v20 = *(unsigned int *)(v7 + 160);
          v21 = (char *)&v17[4 * v20] - (char *)(v18 + 4);
          if (v21)
          {
            memmove(v18, v18 + 4, v21 - 4);
            LODWORD(v20) = *(_DWORD *)(v7 + 160);
            v17 = *(_DWORD **)(v7 + 152);
          }
          v18 -= 4;
          v11 = v20 - 1;
          *(_DWORD *)(v7 + 160) = v11;
        }
        v18 += 4;
      }
      while (v18 != &v17[4 * v11]);
    }
    goto LABEL_6;
  }
  v25 = *(_DWORD *)(v7 + 160);
  if (v25)
  {
    v26 = *(_DWORD **)(v7 + 152);
    v27 = v26;
    do
    {
      if (v27[2] == v10)
      {
        v28 = *(uint64_t **)v27;
        *v28 = **(_QWORD **)v27 & 7;
        v28[3] = 0;
        *((_DWORD *)v28 + 2) = v28[1] & 0xFFFFE3FF | 0x400;
        v26 = *(_DWORD **)(v7 + 152);
        v29 = *(unsigned int *)(v7 + 160);
        v30 = (char *)&v26[4 * v29] - (char *)(v27 + 4);
        if (v30)
        {
          memmove(v27, v27 + 4, v30 - 4);
          LODWORD(v29) = *(_DWORD *)(v7 + 160);
          v26 = *(_DWORD **)(v7 + 152);
        }
        v27 -= 4;
        v25 = v29 - 1;
        *(_DWORD *)(v7 + 160) = v25;
      }
      v27 += 4;
    }
    while (v27 != &v26[4 * v25]);
  }
LABEL_6:
  v12 = *(_QWORD *)(v5 + 72);
  v31 = a2;
  v32 = v12;
  v33 = 15;
  v34 = 0;
  result = (__int128 *)sub_1C4926708(v5 + 120, (unint64_t)&v31, 1);
  v14 = *(_QWORD *)(v5 + 120) + 24 * *(unsigned int *)(v5 + 128);
  v15 = *result;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)result + 2);
  *(_OWORD *)v14 = v15;
  ++*(_DWORD *)(v5 + 128);
  v16 = *(_QWORD *)(v5 + 72);
  if (v16 <= 0xFFFFFFFFFFFFFFF7)
  {
    if (v16 + 8 > *(_QWORD *)(v5 + 80))
    {
      result = (__int128 *)llvm::SmallVectorBase<unsigned long long>::grow_pod(v5 + 64, (void *)(v5 + 88), v16 + 8, 1);
      v16 = *(_QWORD *)(v5 + 72);
    }
    *(_QWORD *)(*(_QWORD *)(v5 + 64) + v16) = 0;
    v16 = *(_QWORD *)(v5 + 72);
  }
  *(_QWORD *)(v5 + 72) = v16 + 8;
  return result;
}

__int128 *llvm::MCObjectStreamer::emitTPRel32Value(llvm::MCObjectStreamer *this, const llvm::MCExpr *a2)
{
  uint64_t DataFragment;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 *result;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::MCSymbol **v22;
  uint64_t v23;
  llvm::MCSymbol *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  const llvm::MCExpr *v31;
  int v32;
  int v33;
  uint64_t v34;

  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(this, 0);
  v5 = DataFragment;
  v6 = *((unsigned int *)this + 30);
  if (!(_DWORD)v6)
    goto LABEL_6;
  v7 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v6 - 32);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD *)(DataFragment + 72);
  v9 = *((unsigned int *)this + 76);
  if (!(_DWORD)v9)
  {
    v10 = *((_DWORD *)this + 104);
    goto LABEL_5;
  }
  v22 = (llvm::MCSymbol **)*((_QWORD *)this + 37);
  v23 = 8 * v9;
  do
  {
    v24 = *v22++;
    llvm::MCSection::addPendingLabel((_DWORD *)v7, v24, *((_DWORD *)this + 104));
    v23 -= 8;
  }
  while (v23);
  *((_DWORD *)this + 76) = 0;
  v10 = *((_DWORD *)this + 104);
  if (v5)
  {
LABEL_5:
    v11 = *(_DWORD *)(v7 + 160);
    if (v11)
    {
      v17 = *(_DWORD **)(v7 + 152);
      v18 = v17;
      do
      {
        if (v18[2] == v10)
        {
          v19 = *(uint64_t **)v18;
          *v19 = **(_QWORD **)v18 & 7 | v5;
          v19[3] = v8;
          *((_DWORD *)v19 + 2) = v19[1] & 0xFFFFE3FF | 0x400;
          v17 = *(_DWORD **)(v7 + 152);
          v20 = *(unsigned int *)(v7 + 160);
          v21 = (char *)&v17[4 * v20] - (char *)(v18 + 4);
          if (v21)
          {
            memmove(v18, v18 + 4, v21 - 4);
            LODWORD(v20) = *(_DWORD *)(v7 + 160);
            v17 = *(_DWORD **)(v7 + 152);
          }
          v18 -= 4;
          v11 = v20 - 1;
          *(_DWORD *)(v7 + 160) = v11;
        }
        v18 += 4;
      }
      while (v18 != &v17[4 * v11]);
    }
    goto LABEL_6;
  }
  v25 = *(_DWORD *)(v7 + 160);
  if (v25)
  {
    v26 = *(_DWORD **)(v7 + 152);
    v27 = v26;
    do
    {
      if (v27[2] == v10)
      {
        v28 = *(uint64_t **)v27;
        *v28 = **(_QWORD **)v27 & 7;
        v28[3] = 0;
        *((_DWORD *)v28 + 2) = v28[1] & 0xFFFFE3FF | 0x400;
        v26 = *(_DWORD **)(v7 + 152);
        v29 = *(unsigned int *)(v7 + 160);
        v30 = (char *)&v26[4 * v29] - (char *)(v27 + 4);
        if (v30)
        {
          memmove(v27, v27 + 4, v30 - 4);
          LODWORD(v29) = *(_DWORD *)(v7 + 160);
          v26 = *(_DWORD **)(v7 + 152);
        }
        v27 -= 4;
        v25 = v29 - 1;
        *(_DWORD *)(v7 + 160) = v25;
      }
      v27 += 4;
    }
    while (v27 != &v26[4 * v25]);
  }
LABEL_6:
  v12 = *(_QWORD *)(v5 + 72);
  v31 = a2;
  v32 = v12;
  v33 = 16;
  v34 = 0;
  result = (__int128 *)sub_1C4926708(v5 + 120, (unint64_t)&v31, 1);
  v14 = *(_QWORD *)(v5 + 120) + 24 * *(unsigned int *)(v5 + 128);
  v15 = *result;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)result + 2);
  *(_OWORD *)v14 = v15;
  ++*(_DWORD *)(v5 + 128);
  v16 = *(_QWORD *)(v5 + 72);
  if (v16 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    if (v16 + 4 > *(_QWORD *)(v5 + 80))
    {
      result = (__int128 *)llvm::SmallVectorBase<unsigned long long>::grow_pod(v5 + 64, (void *)(v5 + 88), v16 + 4, 1);
      v16 = *(_QWORD *)(v5 + 72);
    }
    *(_DWORD *)(*(_QWORD *)(v5 + 64) + v16) = 0;
    v16 = *(_QWORD *)(v5 + 72);
  }
  *(_QWORD *)(v5 + 72) = v16 + 4;
  return result;
}

__int128 *llvm::MCObjectStreamer::emitTPRel64Value(llvm::MCObjectStreamer *this, const llvm::MCExpr *a2)
{
  uint64_t DataFragment;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 *result;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::MCSymbol **v22;
  uint64_t v23;
  llvm::MCSymbol *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  const llvm::MCExpr *v31;
  int v32;
  int v33;
  uint64_t v34;

  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(this, 0);
  v5 = DataFragment;
  v6 = *((unsigned int *)this + 30);
  if (!(_DWORD)v6)
    goto LABEL_6;
  v7 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v6 - 32);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD *)(DataFragment + 72);
  v9 = *((unsigned int *)this + 76);
  if (!(_DWORD)v9)
  {
    v10 = *((_DWORD *)this + 104);
    goto LABEL_5;
  }
  v22 = (llvm::MCSymbol **)*((_QWORD *)this + 37);
  v23 = 8 * v9;
  do
  {
    v24 = *v22++;
    llvm::MCSection::addPendingLabel((_DWORD *)v7, v24, *((_DWORD *)this + 104));
    v23 -= 8;
  }
  while (v23);
  *((_DWORD *)this + 76) = 0;
  v10 = *((_DWORD *)this + 104);
  if (v5)
  {
LABEL_5:
    v11 = *(_DWORD *)(v7 + 160);
    if (v11)
    {
      v17 = *(_DWORD **)(v7 + 152);
      v18 = v17;
      do
      {
        if (v18[2] == v10)
        {
          v19 = *(uint64_t **)v18;
          *v19 = **(_QWORD **)v18 & 7 | v5;
          v19[3] = v8;
          *((_DWORD *)v19 + 2) = v19[1] & 0xFFFFE3FF | 0x400;
          v17 = *(_DWORD **)(v7 + 152);
          v20 = *(unsigned int *)(v7 + 160);
          v21 = (char *)&v17[4 * v20] - (char *)(v18 + 4);
          if (v21)
          {
            memmove(v18, v18 + 4, v21 - 4);
            LODWORD(v20) = *(_DWORD *)(v7 + 160);
            v17 = *(_DWORD **)(v7 + 152);
          }
          v18 -= 4;
          v11 = v20 - 1;
          *(_DWORD *)(v7 + 160) = v11;
        }
        v18 += 4;
      }
      while (v18 != &v17[4 * v11]);
    }
    goto LABEL_6;
  }
  v25 = *(_DWORD *)(v7 + 160);
  if (v25)
  {
    v26 = *(_DWORD **)(v7 + 152);
    v27 = v26;
    do
    {
      if (v27[2] == v10)
      {
        v28 = *(uint64_t **)v27;
        *v28 = **(_QWORD **)v27 & 7;
        v28[3] = 0;
        *((_DWORD *)v28 + 2) = v28[1] & 0xFFFFE3FF | 0x400;
        v26 = *(_DWORD **)(v7 + 152);
        v29 = *(unsigned int *)(v7 + 160);
        v30 = (char *)&v26[4 * v29] - (char *)(v27 + 4);
        if (v30)
        {
          memmove(v27, v27 + 4, v30 - 4);
          LODWORD(v29) = *(_DWORD *)(v7 + 160);
          v26 = *(_DWORD **)(v7 + 152);
        }
        v27 -= 4;
        v25 = v29 - 1;
        *(_DWORD *)(v7 + 160) = v25;
      }
      v27 += 4;
    }
    while (v27 != &v26[4 * v25]);
  }
LABEL_6:
  v12 = *(_QWORD *)(v5 + 72);
  v31 = a2;
  v32 = v12;
  v33 = 17;
  v34 = 0;
  result = (__int128 *)sub_1C4926708(v5 + 120, (unint64_t)&v31, 1);
  v14 = *(_QWORD *)(v5 + 120) + 24 * *(unsigned int *)(v5 + 128);
  v15 = *result;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)result + 2);
  *(_OWORD *)v14 = v15;
  ++*(_DWORD *)(v5 + 128);
  v16 = *(_QWORD *)(v5 + 72);
  if (v16 <= 0xFFFFFFFFFFFFFFF7)
  {
    if (v16 + 8 > *(_QWORD *)(v5 + 80))
    {
      result = (__int128 *)llvm::SmallVectorBase<unsigned long long>::grow_pod(v5 + 64, (void *)(v5 + 88), v16 + 8, 1);
      v16 = *(_QWORD *)(v5 + 72);
    }
    *(_QWORD *)(*(_QWORD *)(v5 + 64) + v16) = 0;
    v16 = *(_QWORD *)(v5 + 72);
  }
  *(_QWORD *)(v5 + 72) = v16 + 8;
  return result;
}

__int128 *llvm::MCObjectStreamer::emitGPRel32Value(llvm::MCObjectStreamer *this, const llvm::MCExpr *a2)
{
  uint64_t DataFragment;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 *result;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::MCSymbol **v22;
  uint64_t v23;
  llvm::MCSymbol *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  const llvm::MCExpr *v31;
  int v32;
  int v33;
  uint64_t v34;

  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(this, 0);
  v5 = DataFragment;
  v6 = *((unsigned int *)this + 30);
  if (!(_DWORD)v6)
    goto LABEL_6;
  v7 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v6 - 32);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD *)(DataFragment + 72);
  v9 = *((unsigned int *)this + 76);
  if (!(_DWORD)v9)
  {
    v10 = *((_DWORD *)this + 104);
    goto LABEL_5;
  }
  v22 = (llvm::MCSymbol **)*((_QWORD *)this + 37);
  v23 = 8 * v9;
  do
  {
    v24 = *v22++;
    llvm::MCSection::addPendingLabel((_DWORD *)v7, v24, *((_DWORD *)this + 104));
    v23 -= 8;
  }
  while (v23);
  *((_DWORD *)this + 76) = 0;
  v10 = *((_DWORD *)this + 104);
  if (v5)
  {
LABEL_5:
    v11 = *(_DWORD *)(v7 + 160);
    if (v11)
    {
      v17 = *(_DWORD **)(v7 + 152);
      v18 = v17;
      do
      {
        if (v18[2] == v10)
        {
          v19 = *(uint64_t **)v18;
          *v19 = **(_QWORD **)v18 & 7 | v5;
          v19[3] = v8;
          *((_DWORD *)v19 + 2) = v19[1] & 0xFFFFE3FF | 0x400;
          v17 = *(_DWORD **)(v7 + 152);
          v20 = *(unsigned int *)(v7 + 160);
          v21 = (char *)&v17[4 * v20] - (char *)(v18 + 4);
          if (v21)
          {
            memmove(v18, v18 + 4, v21 - 4);
            LODWORD(v20) = *(_DWORD *)(v7 + 160);
            v17 = *(_DWORD **)(v7 + 152);
          }
          v18 -= 4;
          v11 = v20 - 1;
          *(_DWORD *)(v7 + 160) = v11;
        }
        v18 += 4;
      }
      while (v18 != &v17[4 * v11]);
    }
    goto LABEL_6;
  }
  v25 = *(_DWORD *)(v7 + 160);
  if (v25)
  {
    v26 = *(_DWORD **)(v7 + 152);
    v27 = v26;
    do
    {
      if (v27[2] == v10)
      {
        v28 = *(uint64_t **)v27;
        *v28 = **(_QWORD **)v27 & 7;
        v28[3] = 0;
        *((_DWORD *)v28 + 2) = v28[1] & 0xFFFFE3FF | 0x400;
        v26 = *(_DWORD **)(v7 + 152);
        v29 = *(unsigned int *)(v7 + 160);
        v30 = (char *)&v26[4 * v29] - (char *)(v27 + 4);
        if (v30)
        {
          memmove(v27, v27 + 4, v30 - 4);
          LODWORD(v29) = *(_DWORD *)(v7 + 160);
          v26 = *(_DWORD **)(v7 + 152);
        }
        v27 -= 4;
        v25 = v29 - 1;
        *(_DWORD *)(v7 + 160) = v25;
      }
      v27 += 4;
    }
    while (v27 != &v26[4 * v25]);
  }
LABEL_6:
  v12 = *(_QWORD *)(v5 + 72);
  v31 = a2;
  v32 = v12;
  v33 = 12;
  v34 = 0;
  result = (__int128 *)sub_1C4926708(v5 + 120, (unint64_t)&v31, 1);
  v14 = *(_QWORD *)(v5 + 120) + 24 * *(unsigned int *)(v5 + 128);
  v15 = *result;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)result + 2);
  *(_OWORD *)v14 = v15;
  ++*(_DWORD *)(v5 + 128);
  v16 = *(_QWORD *)(v5 + 72);
  if (v16 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    if (v16 + 4 > *(_QWORD *)(v5 + 80))
    {
      result = (__int128 *)llvm::SmallVectorBase<unsigned long long>::grow_pod(v5 + 64, (void *)(v5 + 88), v16 + 4, 1);
      v16 = *(_QWORD *)(v5 + 72);
    }
    *(_DWORD *)(*(_QWORD *)(v5 + 64) + v16) = 0;
    v16 = *(_QWORD *)(v5 + 72);
  }
  *(_QWORD *)(v5 + 72) = v16 + 4;
  return result;
}

__int128 *llvm::MCObjectStreamer::emitGPRel64Value(llvm::MCObjectStreamer *this, const llvm::MCExpr *a2)
{
  uint64_t DataFragment;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 *result;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  llvm::MCSymbol **v22;
  uint64_t v23;
  llvm::MCSymbol *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  const llvm::MCExpr *v31;
  int v32;
  int v33;
  uint64_t v34;

  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(this, 0);
  v5 = DataFragment;
  v6 = *((unsigned int *)this + 30);
  if (!(_DWORD)v6)
    goto LABEL_6;
  v7 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v6 - 32);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD *)(DataFragment + 72);
  v9 = *((unsigned int *)this + 76);
  if (!(_DWORD)v9)
  {
    v10 = *((_DWORD *)this + 104);
    goto LABEL_5;
  }
  v22 = (llvm::MCSymbol **)*((_QWORD *)this + 37);
  v23 = 8 * v9;
  do
  {
    v24 = *v22++;
    llvm::MCSection::addPendingLabel((_DWORD *)v7, v24, *((_DWORD *)this + 104));
    v23 -= 8;
  }
  while (v23);
  *((_DWORD *)this + 76) = 0;
  v10 = *((_DWORD *)this + 104);
  if (v5)
  {
LABEL_5:
    v11 = *(_DWORD *)(v7 + 160);
    if (v11)
    {
      v17 = *(_DWORD **)(v7 + 152);
      v18 = v17;
      do
      {
        if (v18[2] == v10)
        {
          v19 = *(uint64_t **)v18;
          *v19 = **(_QWORD **)v18 & 7 | v5;
          v19[3] = v8;
          *((_DWORD *)v19 + 2) = v19[1] & 0xFFFFE3FF | 0x400;
          v17 = *(_DWORD **)(v7 + 152);
          v20 = *(unsigned int *)(v7 + 160);
          v21 = (char *)&v17[4 * v20] - (char *)(v18 + 4);
          if (v21)
          {
            memmove(v18, v18 + 4, v21 - 4);
            LODWORD(v20) = *(_DWORD *)(v7 + 160);
            v17 = *(_DWORD **)(v7 + 152);
          }
          v18 -= 4;
          v11 = v20 - 1;
          *(_DWORD *)(v7 + 160) = v11;
        }
        v18 += 4;
      }
      while (v18 != &v17[4 * v11]);
    }
    goto LABEL_6;
  }
  v25 = *(_DWORD *)(v7 + 160);
  if (v25)
  {
    v26 = *(_DWORD **)(v7 + 152);
    v27 = v26;
    do
    {
      if (v27[2] == v10)
      {
        v28 = *(uint64_t **)v27;
        *v28 = **(_QWORD **)v27 & 7;
        v28[3] = 0;
        *((_DWORD *)v28 + 2) = v28[1] & 0xFFFFE3FF | 0x400;
        v26 = *(_DWORD **)(v7 + 152);
        v29 = *(unsigned int *)(v7 + 160);
        v30 = (char *)&v26[4 * v29] - (char *)(v27 + 4);
        if (v30)
        {
          memmove(v27, v27 + 4, v30 - 4);
          LODWORD(v29) = *(_DWORD *)(v7 + 160);
          v26 = *(_DWORD **)(v7 + 152);
        }
        v27 -= 4;
        v25 = v29 - 1;
        *(_DWORD *)(v7 + 160) = v25;
      }
      v27 += 4;
    }
    while (v27 != &v26[4 * v25]);
  }
LABEL_6:
  v12 = *(_QWORD *)(v5 + 72);
  v31 = a2;
  v32 = v12;
  v33 = 12;
  v34 = 0;
  result = (__int128 *)sub_1C4926708(v5 + 120, (unint64_t)&v31, 1);
  v14 = *(_QWORD *)(v5 + 120) + 24 * *(unsigned int *)(v5 + 128);
  v15 = *result;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)result + 2);
  *(_OWORD *)v14 = v15;
  ++*(_DWORD *)(v5 + 128);
  v16 = *(_QWORD *)(v5 + 72);
  if (v16 <= 0xFFFFFFFFFFFFFFF7)
  {
    if (v16 + 8 > *(_QWORD *)(v5 + 80))
    {
      result = (__int128 *)llvm::SmallVectorBase<unsigned long long>::grow_pod(v5 + 64, (void *)(v5 + 88), v16 + 8, 1);
      v16 = *(_QWORD *)(v5 + 72);
    }
    *(_QWORD *)(*(_QWORD *)(v5 + 64) + v16) = 0;
    v16 = *(_QWORD *)(v5 + 72);
  }
  *(_QWORD *)(v5 + 72) = v16 + 8;
  return result;
}

unint64_t llvm::MCObjectStreamer::emitRelocDirective@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, const llvm::MCSubtargetInfo *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t TempSymbol;
  uint64_t v18;
  int v19;
  uint64_t DataFragment;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  unint64_t result;
  uint64_t v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::MCSymbol *v40;
  int v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  llvm::MCSymbol **v48;
  const char *v49;
  int v50;
  int v51;
  uint64_t v52;
  __int16 v53;

  v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 272) + 8) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 8), a3, a4);
  if ((v14 & 0xFF00000000) == 0)
  {
    v32 = 25;
    result = (unint64_t)operator new(0x19uLL);
    strcpy((char *)result, "unknown relocation name");
    *(_BYTE *)a8 = 1;
    v33 = 23;
    goto LABEL_13;
  }
  v15 = v14;
  if (!a5)
  {
    v16 = *(_QWORD *)(a1 + 8);
    v49 = "tmp";
    v53 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(v16, (uint64_t)&v49, 1);
    v18 = *(_QWORD *)(a1 + 8);
    a5 = sub_1C484358C(v18 + 192, 24, 3);
    v19 = *(unsigned __int8 *)(*(_QWORD *)(v18 + 152) + 18) << 16;
    *(_BYTE *)a5 = 2;
    *(_DWORD *)(a5 + 1) = v19 | (*(unsigned __int8 *)(a5 + 4) << 24);
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = TempSymbol;
  }
  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment((llvm::MCObjectStreamer *)a1, a7);
  v21 = DataFragment;
  v22 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v22)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v22 - 32);
    if (v23)
    {
      v24 = *(_QWORD *)(DataFragment + 72);
      v25 = *(unsigned int *)(a1 + 304);
      if ((_DWORD)v25)
      {
        v48 = *(llvm::MCSymbol ***)(a1 + 296);
        v39 = 8 * v25;
        do
        {
          v40 = *v48++;
          llvm::MCSection::addPendingLabel((_DWORD *)v23, v40, *(_DWORD *)(a1 + 416));
          v39 -= 8;
        }
        while (v39);
        *(_DWORD *)(a1 + 304) = 0;
        v26 = *(_DWORD *)(a1 + 416);
        if (!v21)
        {
          v41 = *(_DWORD *)(v23 + 160);
          if (v41)
          {
            v42 = *(_DWORD **)(v23 + 152);
            v43 = v42;
            do
            {
              if (v43[2] == v26)
              {
                v44 = *(uint64_t **)v43;
                *v44 = **(_QWORD **)v43 & 7;
                v44[3] = 0;
                *((_DWORD *)v44 + 2) = v44[1] & 0xFFFFE3FF | 0x400;
                v42 = *(_DWORD **)(v23 + 152);
                v45 = *(unsigned int *)(v23 + 160);
                v46 = (char *)&v42[4 * v45] - (char *)(v43 + 4);
                if (v46)
                {
                  memmove(v43, v43 + 4, v46 - 4);
                  LODWORD(v45) = *(_DWORD *)(v23 + 160);
                  v42 = *(_DWORD **)(v23 + 152);
                }
                v43 -= 4;
                v41 = v45 - 1;
                *(_DWORD *)(v23 + 160) = v41;
              }
              v43 += 4;
            }
            while (v43 != &v42[4 * v41]);
          }
          goto LABEL_9;
        }
      }
      else
      {
        v26 = *(_DWORD *)(a1 + 416);
      }
      v27 = *(_DWORD *)(v23 + 160);
      if (v27)
      {
        v34 = *(_DWORD **)(v23 + 152);
        v35 = v34;
        do
        {
          if (v35[2] == v26)
          {
            v36 = *(uint64_t **)v35;
            *v36 = **(_QWORD **)v35 & 7 | v21;
            v36[3] = v24;
            *((_DWORD *)v36 + 2) = v36[1] & 0xFFFFE3FF | 0x400;
            v34 = *(_DWORD **)(v23 + 152);
            v37 = *(unsigned int *)(v23 + 160);
            v38 = (char *)&v34[4 * v37] - (char *)(v35 + 4);
            if (v38)
            {
              v47 = v35;
              memmove(v35, v35 + 4, v38 - 4);
              v35 = v47;
              LODWORD(v37) = *(_DWORD *)(v23 + 160);
              v34 = *(_DWORD **)(v23 + 152);
            }
            v35 -= 4;
            v27 = v37 - 1;
            *(_DWORD *)(v23 + 160) = v27;
          }
          v35 += 4;
        }
        while (v35 != &v34[4 * v27]);
      }
    }
  }
LABEL_9:
  llvm::MCExpr::evaluateAsRelocatableImpl(a2);
  if ((v28 & 1) != 0)
  {
    v49 = (const char *)a5;
    v50 = 0;
    v51 = v15;
    v52 = a6;
    result = sub_1C4926708(v21 + 120, (unint64_t)&v49, 1);
    v30 = *(_QWORD *)(v21 + 120) + 24 * *(unsigned int *)(v21 + 128);
    v31 = *(_OWORD *)result;
    *(_QWORD *)(v30 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)v30 = v31;
    ++*(_DWORD *)(v21 + 128);
    *(_BYTE *)a8 = 0;
    *(_BYTE *)(a8 + 32) = 0;
    return result;
  }
  v32 = 40;
  result = (unint64_t)operator new(0x28uLL);
  strcpy((char *)result, ".reloc offset is not relocatable");
  *(_BYTE *)a8 = 0;
  v33 = 32;
LABEL_13:
  *(_QWORD *)(a8 + 8) = result;
  *(_QWORD *)(a8 + 16) = v33;
  *(_BYTE *)(a8 + 30) = 0;
  *(_WORD *)(a8 + 28) = 0;
  *(_DWORD *)(a8 + 24) = v32;
  *(_WORD *)(a8 + 31) = 384;
  return result;
}

uint64_t llvm::MCObjectStreamer::emitFill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DataFragment;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  _DWORD *v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  llvm::MCSymbol **v37;
  uint64_t v38;
  llvm::MCSymbol *v39;
  int v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  llvm::MCSymbol **v46;
  uint64_t v47;
  llvm::MCSymbol *v48;

  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment((llvm::MCObjectStreamer *)a1, 0);
  v9 = *(unsigned int *)(a1 + 120);
  if (!(_DWORD)v9)
    goto LABEL_6;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v9 - 32);
  if (!v10)
    goto LABEL_6;
  v11 = DataFragment;
  v12 = *(_QWORD *)(DataFragment + 72);
  v13 = *(unsigned int *)(a1 + 304);
  if (!(_DWORD)v13)
  {
    v14 = *(_DWORD *)(a1 + 416);
    goto LABEL_5;
  }
  v37 = *(llvm::MCSymbol ***)(a1 + 296);
  v38 = 8 * v13;
  do
  {
    v39 = *v37++;
    llvm::MCSection::addPendingLabel((_DWORD *)v10, v39, *(_DWORD *)(a1 + 416));
    v38 -= 8;
  }
  while (v38);
  *(_DWORD *)(a1 + 304) = 0;
  v14 = *(_DWORD *)(a1 + 416);
  if (v11)
  {
LABEL_5:
    v15 = *(_DWORD *)(v10 + 160);
    if (v15)
    {
      v32 = *(_DWORD **)(v10 + 152);
      v33 = v32;
      do
      {
        if (v33[2] == v14)
        {
          v34 = *(uint64_t **)v33;
          *v34 = **(_QWORD **)v33 & 7 | v11;
          v34[3] = v12;
          *((_DWORD *)v34 + 2) = v34[1] & 0xFFFFE3FF | 0x400;
          v32 = *(_DWORD **)(v10 + 152);
          v35 = *(unsigned int *)(v10 + 160);
          v36 = (char *)&v32[4 * v35] - (char *)(v33 + 4);
          if (v36)
          {
            memmove(v33, v33 + 4, v36 - 4);
            LODWORD(v35) = *(_DWORD *)(v10 + 160);
            v32 = *(_DWORD **)(v10 + 152);
          }
          v33 -= 4;
          v15 = v35 - 1;
          *(_DWORD *)(v10 + 160) = v15;
        }
        v33 += 4;
      }
      while (v33 != &v32[4 * v15]);
    }
    goto LABEL_6;
  }
  v40 = *(_DWORD *)(v10 + 160);
  if (v40)
  {
    v41 = *(_DWORD **)(v10 + 152);
    v42 = v41;
    do
    {
      if (v42[2] == v14)
      {
        v43 = *(uint64_t **)v42;
        *v43 = **(_QWORD **)v42 & 7;
        v43[3] = 0;
        *((_DWORD *)v43 + 2) = v43[1] & 0xFFFFE3FF | 0x400;
        v41 = *(_DWORD **)(v10 + 152);
        v44 = *(unsigned int *)(v10 + 160);
        v45 = (char *)&v41[4 * v44] - (char *)(v42 + 4);
        if (v45)
        {
          memmove(v42, v42 + 4, v45 - 4);
          LODWORD(v44) = *(_DWORD *)(v10 + 160);
          v41 = *(_DWORD **)(v10 + 152);
        }
        v42 -= 4;
        v40 = v44 - 1;
        *(_DWORD *)(v10 + 160) = v40;
      }
      v42 += 4;
    }
    while (v42 != &v41[4 * v40]);
  }
LABEL_6:
  result = operator new();
  v17 = result;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_QWORD *)(result + 32) = -1;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 16777219;
  *(_QWORD *)(result + 56) = a3;
  *(_QWORD *)(result + 64) = a2;
  *(_QWORD *)(result + 72) = a4;
  v18 = *(unsigned int *)(a1 + 120);
  if (!(_DWORD)v18)
    goto LABEL_12;
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v18 - 32);
  if (!v19)
    goto LABEL_12;
  v20 = *(unsigned int *)(a1 + 304);
  if ((_DWORD)v20)
  {
    v46 = *(llvm::MCSymbol ***)(a1 + 296);
    v47 = 8 * v20;
    do
    {
      v48 = *v46++;
      result = (uint64_t)llvm::MCSection::addPendingLabel((_DWORD *)v19, v48, *(_DWORD *)(a1 + 416));
      v47 -= 8;
    }
    while (v47);
    *(_DWORD *)(a1 + 304) = 0;
  }
  v21 = *(_DWORD *)(v19 + 160);
  if (v21)
  {
    v26 = *(_DWORD *)(a1 + 416);
    v27 = *(_DWORD **)(v19 + 152);
    v28 = v27;
    do
    {
      if (v28[2] == v26)
      {
        v29 = *(unint64_t **)v28;
        *v29 = **(_QWORD **)v28 & 7 | v17;
        v29[3] = 0;
        *((_DWORD *)v29 + 2) = v29[1] & 0xFFFFE3FF | 0x400;
        v27 = *(_DWORD **)(v19 + 152);
        v30 = *(unsigned int *)(v19 + 160);
        v31 = (char *)&v27[4 * v30] - (char *)(v28 + 4);
        if (v31)
        {
          result = (uint64_t)memmove(v28, v28 + 4, v31 - 4);
          LODWORD(v30) = *(_DWORD *)(v19 + 160);
          v27 = *(_DWORD **)(v19 + 152);
        }
        v28 -= 4;
        v21 = v30 - 1;
        *(_DWORD *)(v19 + 160) = v21;
      }
      v28 += 4;
    }
    while (v28 != &v27[4 * v21]);
  }
  v22 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v22)
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v22 - 32);
  else
LABEL_12:
    v23 = 0;
  v24 = *(uint64_t **)(a1 + 280);
  v25 = *v24;
  *(_QWORD *)v17 = *v24;
  *(_QWORD *)(v17 + 8) = v24;
  *(_QWORD *)(v25 + 8) = v17;
  *v24 = v17;
  *(_QWORD *)(v17 + 16) = v23;
  return result;
}

void llvm::MCObjectStreamer::emitFill(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t DataFragment;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  llvm *v31;
  unsigned int v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::MCSymbol **v43;
  uint64_t v44;
  llvm::MCSymbol *v45;
  int v46;
  _DWORD *v47;
  _DWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  llvm::MCSymbol **v52;
  uint64_t v53;
  llvm::MCSymbol *v54;
  const char *v55;
  __int16 v56;
  uint64_t v57;

  v57 = 0;
  (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 72))(a1);
  llvm::MCExpr::evaluateAsAbsolute(a2, &v57);
  if (v10)
  {
    v11 = v57;
    if (v57 < 0)
    {
      v31 = *(llvm **)(*((_QWORD *)a1 + 1) + 72);
      v55 = "'.fill' directive with negative repeat count has no effect";
      v56 = 259;
      llvm::SourceMgr::PrintMessage(v31, a5, 1, (llvm::Twine *)&v55, 0, 0, 0, 0, 1u);
    }
    else
    {
      if (a3 >= 4)
        v12 = 4;
      else
        v12 = a3;
      if (v57)
      {
        v13 = (0xFFFFFFFFFFFFFFFFLL >> (-8 * v12)) & a4;
        do
        {
          (*(void (**)(unsigned int *, unint64_t, uint64_t))(*(_QWORD *)a1 + 512))(a1, v13, v12);
          if (a3 >= 5)
            (*(void (**)(unsigned int *, _QWORD, _QWORD))(*(_QWORD *)a1 + 512))(a1, 0, (a3 - v12));
          --v11;
        }
        while (v11);
      }
    }
    return;
  }
  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment((llvm::MCObjectStreamer *)a1, 0);
  v15 = a1[30];
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(*((_QWORD *)a1 + 14) + 32 * v15 - 32);
    if (v16)
    {
      v17 = DataFragment;
      v18 = *(_QWORD *)(DataFragment + 72);
      v19 = a1[76];
      if ((_DWORD)v19)
      {
        v43 = (llvm::MCSymbol **)*((_QWORD *)a1 + 37);
        v44 = 8 * v19;
        do
        {
          v45 = *v43++;
          llvm::MCSection::addPendingLabel((_DWORD *)v16, v45, a1[104]);
          v44 -= 8;
        }
        while (v44);
        a1[76] = 0;
        v20 = a1[104];
        if (!v17)
        {
          v46 = *(_DWORD *)(v16 + 160);
          if (v46)
          {
            v47 = *(_DWORD **)(v16 + 152);
            v48 = v47;
            do
            {
              if (v48[2] == v20)
              {
                v49 = *(uint64_t **)v48;
                *v49 = **(_QWORD **)v48 & 7;
                v49[3] = 0;
                *((_DWORD *)v49 + 2) = v49[1] & 0xFFFFE3FF | 0x400;
                v47 = *(_DWORD **)(v16 + 152);
                v50 = *(unsigned int *)(v16 + 160);
                v51 = (char *)&v47[4 * v50] - (char *)(v48 + 4);
                if (v51)
                {
                  memmove(v48, v48 + 4, v51 - 4);
                  LODWORD(v50) = *(_DWORD *)(v16 + 160);
                  v47 = *(_DWORD **)(v16 + 152);
                }
                v48 -= 4;
                v46 = v50 - 1;
                *(_DWORD *)(v16 + 160) = v46;
              }
              v48 += 4;
            }
            while (v48 != &v47[4 * v46]);
          }
          goto LABEL_17;
        }
      }
      else
      {
        v20 = a1[104];
      }
      v21 = *(_DWORD *)(v16 + 160);
      if (v21)
      {
        v38 = *(_DWORD **)(v16 + 152);
        v39 = v38;
        do
        {
          if (v39[2] == v20)
          {
            v40 = *(uint64_t **)v39;
            *v40 = **(_QWORD **)v39 & 7 | v17;
            v40[3] = v18;
            *((_DWORD *)v40 + 2) = v40[1] & 0xFFFFE3FF | 0x400;
            v38 = *(_DWORD **)(v16 + 152);
            v41 = *(unsigned int *)(v16 + 160);
            v42 = (char *)&v38[4 * v41] - (char *)(v39 + 4);
            if (v42)
            {
              memmove(v39, v39 + 4, v42 - 4);
              LODWORD(v41) = *(_DWORD *)(v16 + 160);
              v38 = *(_DWORD **)(v16 + 152);
            }
            v39 -= 4;
            v21 = v41 - 1;
            *(_DWORD *)(v16 + 160) = v21;
          }
          v39 += 4;
        }
        while (v39 != &v38[4 * v21]);
      }
    }
  }
LABEL_17:
  v22 = operator new();
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_QWORD *)(v22 + 32) = -1;
  *(_QWORD *)(v22 + 40) = 0;
  *(_WORD *)(v22 + 48) = 3;
  *(_BYTE *)(v22 + 50) = 0;
  *(_BYTE *)(v22 + 51) = a3;
  *(_QWORD *)(v22 + 56) = a4;
  *(_QWORD *)(v22 + 64) = a2;
  *(_QWORD *)(v22 + 72) = a5;
  v23 = a1[30];
  if (!(_DWORD)v23)
    goto LABEL_23;
  v24 = *(_QWORD *)(*((_QWORD *)a1 + 14) + 32 * v23 - 32);
  if (!v24)
    goto LABEL_23;
  v25 = a1[76];
  if ((_DWORD)v25)
  {
    v52 = (llvm::MCSymbol **)*((_QWORD *)a1 + 37);
    v53 = 8 * v25;
    do
    {
      v54 = *v52++;
      llvm::MCSection::addPendingLabel((_DWORD *)v24, v54, a1[104]);
      v53 -= 8;
    }
    while (v53);
    a1[76] = 0;
  }
  v26 = *(_DWORD *)(v24 + 160);
  if (v26)
  {
    v32 = a1[104];
    v33 = *(_DWORD **)(v24 + 152);
    v34 = v33;
    do
    {
      if (v34[2] == v32)
      {
        v35 = *(uint64_t **)v34;
        *v35 = **(_QWORD **)v34 & 7 | v22;
        v35[3] = 0;
        *((_DWORD *)v35 + 2) = v35[1] & 0xFFFFE3FF | 0x400;
        v33 = *(_DWORD **)(v24 + 152);
        v36 = *(unsigned int *)(v24 + 160);
        v37 = (char *)&v33[4 * v36] - (char *)(v34 + 4);
        if (v37)
        {
          memmove(v34, v34 + 4, v37 - 4);
          LODWORD(v36) = *(_DWORD *)(v24 + 160);
          v33 = *(_DWORD **)(v24 + 152);
        }
        v34 -= 4;
        v26 = v36 - 1;
        *(_DWORD *)(v24 + 160) = v26;
      }
      v34 += 4;
    }
    while (v34 != &v33[4 * v26]);
  }
  v27 = a1[30];
  if ((_DWORD)v27)
    v28 = *(_QWORD *)(*((_QWORD *)a1 + 14) + 32 * v27 - 32);
  else
LABEL_23:
    v28 = 0;
  v29 = (uint64_t *)*((_QWORD *)a1 + 35);
  v30 = *v29;
  *(_QWORD *)v22 = *v29;
  *(_QWORD *)(v22 + 8) = v29;
  *(_QWORD *)(v30 + 8) = v22;
  *v29 = v22;
  *(_QWORD *)(v22 + 16) = v28;
}

uint64_t llvm::MCObjectStreamer::emitNops(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DataFragment;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  _DWORD *v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::MCSymbol **v39;
  uint64_t v40;
  llvm::MCSymbol *v41;
  int v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  llvm::MCSymbol **v48;
  uint64_t v49;
  llvm::MCSymbol *v50;

  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment((llvm::MCObjectStreamer *)a1, 0);
  v11 = *(unsigned int *)(a1 + 120);
  if (!(_DWORD)v11)
    goto LABEL_6;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v11 - 32);
  if (!v12)
    goto LABEL_6;
  v13 = DataFragment;
  v14 = *(_QWORD *)(DataFragment + 72);
  v15 = *(unsigned int *)(a1 + 304);
  if (!(_DWORD)v15)
  {
    v16 = *(_DWORD *)(a1 + 416);
    goto LABEL_5;
  }
  v39 = *(llvm::MCSymbol ***)(a1 + 296);
  v40 = 8 * v15;
  do
  {
    v41 = *v39++;
    llvm::MCSection::addPendingLabel((_DWORD *)v12, v41, *(_DWORD *)(a1 + 416));
    v40 -= 8;
  }
  while (v40);
  *(_DWORD *)(a1 + 304) = 0;
  v16 = *(_DWORD *)(a1 + 416);
  if (v13)
  {
LABEL_5:
    v17 = *(_DWORD *)(v12 + 160);
    if (v17)
    {
      v34 = *(_DWORD **)(v12 + 152);
      v35 = v34;
      do
      {
        if (v35[2] == v16)
        {
          v36 = *(uint64_t **)v35;
          *v36 = **(_QWORD **)v35 & 7 | v13;
          v36[3] = v14;
          *((_DWORD *)v36 + 2) = v36[1] & 0xFFFFE3FF | 0x400;
          v34 = *(_DWORD **)(v12 + 152);
          v37 = *(unsigned int *)(v12 + 160);
          v38 = (char *)&v34[4 * v37] - (char *)(v35 + 4);
          if (v38)
          {
            memmove(v35, v35 + 4, v38 - 4);
            LODWORD(v37) = *(_DWORD *)(v12 + 160);
            v34 = *(_DWORD **)(v12 + 152);
          }
          v35 -= 4;
          v17 = v37 - 1;
          *(_DWORD *)(v12 + 160) = v17;
        }
        v35 += 4;
      }
      while (v35 != &v34[4 * v17]);
    }
    goto LABEL_6;
  }
  v42 = *(_DWORD *)(v12 + 160);
  if (v42)
  {
    v43 = *(_DWORD **)(v12 + 152);
    v44 = v43;
    do
    {
      if (v44[2] == v16)
      {
        v45 = *(uint64_t **)v44;
        *v45 = **(_QWORD **)v44 & 7;
        v45[3] = 0;
        *((_DWORD *)v45 + 2) = v45[1] & 0xFFFFE3FF | 0x400;
        v43 = *(_DWORD **)(v12 + 152);
        v46 = *(unsigned int *)(v12 + 160);
        v47 = (char *)&v43[4 * v46] - (char *)(v44 + 4);
        if (v47)
        {
          memmove(v44, v44 + 4, v47 - 4);
          LODWORD(v46) = *(_DWORD *)(v12 + 160);
          v43 = *(_DWORD **)(v12 + 152);
        }
        v44 -= 4;
        v42 = v46 - 1;
        *(_DWORD *)(v12 + 160) = v42;
      }
      v44 += 4;
    }
    while (v44 != &v43[4 * v42]);
  }
LABEL_6:
  result = operator new();
  v19 = result;
  *(_OWORD *)result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_QWORD *)(result + 32) = -1;
  *(_QWORD *)(result + 40) = 0;
  *(_WORD *)(result + 48) = 4;
  *(_BYTE *)(result + 50) = 0;
  *(_QWORD *)(result + 56) = a2;
  *(_QWORD *)(result + 64) = a3;
  *(_QWORD *)(result + 72) = a4;
  *(_QWORD *)(result + 80) = a5;
  v20 = *(unsigned int *)(a1 + 120);
  if (!(_DWORD)v20)
    goto LABEL_12;
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v20 - 32);
  if (!v21)
    goto LABEL_12;
  v22 = *(unsigned int *)(a1 + 304);
  if ((_DWORD)v22)
  {
    v48 = *(llvm::MCSymbol ***)(a1 + 296);
    v49 = 8 * v22;
    do
    {
      v50 = *v48++;
      result = (uint64_t)llvm::MCSection::addPendingLabel((_DWORD *)v21, v50, *(_DWORD *)(a1 + 416));
      v49 -= 8;
    }
    while (v49);
    *(_DWORD *)(a1 + 304) = 0;
  }
  v23 = *(_DWORD *)(v21 + 160);
  if (v23)
  {
    v28 = *(_DWORD *)(a1 + 416);
    v29 = *(_DWORD **)(v21 + 152);
    v30 = v29;
    do
    {
      if (v30[2] == v28)
      {
        v31 = *(unint64_t **)v30;
        *v31 = **(_QWORD **)v30 & 7 | v19;
        v31[3] = 0;
        *((_DWORD *)v31 + 2) = v31[1] & 0xFFFFE3FF | 0x400;
        v29 = *(_DWORD **)(v21 + 152);
        v32 = *(unsigned int *)(v21 + 160);
        v33 = (char *)&v29[4 * v32] - (char *)(v30 + 4);
        if (v33)
        {
          result = (uint64_t)memmove(v30, v30 + 4, v33 - 4);
          LODWORD(v32) = *(_DWORD *)(v21 + 160);
          v29 = *(_DWORD **)(v21 + 152);
        }
        v30 -= 4;
        v23 = v32 - 1;
        *(_DWORD *)(v21 + 160) = v23;
      }
      v30 += 4;
    }
    while (v30 != &v29[4 * v23]);
  }
  v24 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v24)
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v24 - 32);
  else
LABEL_12:
    v25 = 0;
  v26 = *(uint64_t **)(a1 + 280);
  v27 = *v26;
  *(_QWORD *)v19 = *v26;
  *(_QWORD *)(v19 + 8) = v26;
  *(_QWORD *)(v27 + 8) = v19;
  *v26 = v19;
  *(_QWORD *)(v19 + 16) = v25;
  return result;
}

void sub_1C594C60C(_QWORD *a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  void **v11;
  char *v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  void **v22;
  __int128 __dst;
  unint64_t v24;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_30;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v24 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v24) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (uint64_t)(a1[8] - a1[7]) >> 3;
  v11 = (void **)a1[23];
  v10 = a1[24];
  if ((unint64_t)v11 < v10)
  {
    *(_OWORD *)v11 = __dst;
    v11[2] = (void *)v24;
    v11[3] = (void *)v9;
    v12 = (char *)(v11 + 4);
    goto LABEL_29;
  }
  v13 = (void **)a1[22];
  v14 = ((char *)v11 - (char *)v13) >> 5;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 59)
LABEL_30:
    abort();
  v16 = v10 - (_QWORD)v13;
  if (v16 >> 4 > v15)
    v15 = v16 >> 4;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
    v17 = 0x7FFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17 >> 59)
    sub_1C4764EE4();
  v18 = (char *)operator new(32 * v17);
  v19 = &v18[32 * v14];
  *(_OWORD *)v19 = __dst;
  *((_QWORD *)v19 + 2) = v24;
  *((_QWORD *)v19 + 3) = v9;
  if (v11 == v13)
  {
    v12 = v19 + 32;
    a1[22] = v19;
    a1[23] = v19 + 32;
    a1[24] = &v18[32 * v17];
  }
  else
  {
    v20 = &v18[32 * v14];
    do
    {
      v21 = *((_OWORD *)v11 - 2);
      *((_QWORD *)v20 - 2) = *(v11 - 2);
      *((_OWORD *)v20 - 2) = v21;
      *(v11 - 3) = 0;
      *(v11 - 2) = 0;
      *(v11 - 4) = 0;
      *((_QWORD *)v20 - 1) = *(v11 - 1);
      v20 -= 32;
      v11 -= 4;
    }
    while (v11 != v13);
    v11 = (void **)a1[22];
    v22 = (void **)a1[23];
    v12 = v19 + 32;
    a1[22] = v20;
    a1[23] = v19 + 32;
    a1[24] = &v18[32 * v17];
    while (v22 != v11)
    {
      if (*((char *)v22 - 9) < 0)
        operator delete(*(v22 - 4));
      v22 -= 4;
    }
  }
  if (v11)
    operator delete(v11);
LABEL_29:
  a1[23] = v12;
}

void llvm::MCObjectStreamer::finishImpl(llvm::MCContext **this)
{
  llvm::MCStreamer *v2;
  llvm::MCContext *v3;

  llvm::MCContext::RemapDebugPaths(this[1]);
  if (*((_BYTE *)this[1] + 1513))
    llvm::MCGenDwarfInfo::Emit((llvm::MCGenDwarfInfo *)this, v2);
  llvm::MCDwarfLineTable::emit((llvm::MCStreamer *)this, *((unsigned __int16 *)this[34] + 100) | (*((unsigned __int8 *)this[34] + 202) << 16));
  v3 = this[1];
  if (*((_QWORD *)v3 + 207))
    llvm::MCPseudoProbeSection::emit((llvm::MCPseudoProbeSection **)v3 + 205, (llvm::MCObjectStreamer *)this);
  llvm::MCObjectStreamer::flushPendingLabels((uint64_t)this);
  llvm::MCObjectStreamer::resolvePendingFixups((llvm::MCObjectStreamer *)this);
  llvm::MCAssembler::Finish(this[34]);
}

uint64_t sub_1C594C85C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v17 = 0;
  result = sub_1C594C994(a1, *a2, &v17);
  v7 = v17;
  v8 = *(_DWORD *)a1;
  if ((_DWORD)result)
  {
    if ((v8 & 1) != 0)
    {
      v15 = a1 + 8;
      v16 = 4;
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 8);
      v16 = *(unsigned int *)(a1 + 16);
    }
    v14 = 0;
    v13 = v15 + 8 * v16;
    goto LABEL_11;
  }
  v9 = v8 >> 1;
  if ((v8 & 1) != 0)
    v10 = 4;
  else
    v10 = *(_DWORD *)(a1 + 16);
  if (4 * v9 + 4 >= 3 * v10)
  {
    v10 *= 2;
    goto LABEL_18;
  }
  if (v10 + ~v9 - *(_DWORD *)(a1 + 4) <= v10 >> 3)
  {
LABEL_18:
    sub_1C594CA40(a1, v10);
    v17 = 0;
    result = sub_1C594C994(a1, *a2, &v17);
    v7 = v17;
  }
  *(_DWORD *)a1 += 2;
  if (*v7 != -4096)
    --*(_DWORD *)(a1 + 4);
  *v7 = *a2;
  v11 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v12 = 4;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *(unsigned int *)(a1 + 16);
  }
  v13 = v11 + 8 * v12;
  v14 = 1;
LABEL_11:
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v13;
  *(_BYTE *)(a3 + 16) = v14;
  return result;
}

uint64_t sub_1C594C994(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_16;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1C594CA40(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C594CBA8(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C594CBA8(a1, v14, v8);
}

uint64_t sub_1C594CBA8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C594C994((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

_QWORD *sub_1C594CC60(_QWORD *result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 1;
      v4 = result + 5;
      goto LABEL_8;
    }
    v2 = *((unsigned int *)result + 4);
    if (((2 * v1) & 0xFFFFFFFC) >= v2 || v2 < 0x41)
    {
      if (!(_DWORD)v2)
      {
        v5 = 0;
LABEL_10:
        *(_DWORD *)result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v3 = (_QWORD *)result[1];
      v4 = &v3[v2];
      do
LABEL_8:
        *v3++ = -4096;
      while (v3 != v4);
      v5 = *(_DWORD *)result & 1;
      goto LABEL_10;
    }
    return sub_1C62BD4D8(result);
  }
  return result;
}

uint64_t sub_1C594CCDC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v7 = a2 - 1;
    v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = (_QWORD *)(a1 + 40 * v8);
    v9 = *v4;
    if (*v4 == a3)
    {
      v5 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(a1 + 40 * (v13 & v7));
        v9 = *v4;
        v5 = 1;
        if (*v4 == a3)
          goto LABEL_3;
      }
      v5 = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

_QWORD *sub_1C594CD78(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62BD6C4(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C594CE3C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unint64_t v13;
  BOOL v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v17 = *a4;
  v5 = *((_QWORD *)a4 + 2);
  v16 = a2;
  v18 = v5;
  v19 = a3;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(_QWORD *)a1;
  v8 = (char *)&v16;
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    v13 = v6 + 1;
    v14 = v7 + 40 * v6 > (unint64_t)&v16;
    if (v7 <= (unint64_t)&v16 && v14)
    {
      v15 = (char *)&v16 - v7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v13, 40);
      v7 = *(_QWORD *)a1;
      v8 = &v15[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v13, 40);
      v7 = *(_QWORD *)a1;
      v8 = (char *)&v16;
    }
  }
  v9 = v7 + 40 * *(unsigned int *)(a1 + 8);
  v10 = *(_OWORD *)v8;
  v11 = *((_OWORD *)v8 + 1);
  *(_QWORD *)(v9 + 32) = *((_QWORD *)v8 + 4);
  *(_OWORD *)v9 = v10;
  *(_OWORD *)(v9 + 16) = v11;
  LODWORD(v9) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v9;
  return *(_QWORD *)a1 + 40 * v9 - 40;
}

uint64_t llvm::MCObjectWriter::isSymbolRefDifferenceFullyResolved(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  if (*(_WORD *)(a3 + 1) || *(_WORD *)(a4 + 1))
    return 0;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a4 + 16);
  v10 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
  if (!v10 && (*(_DWORD *)(v8 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v8 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v8 + 24));
    *(_QWORD *)v8 = *(_QWORD *)v8 & 7 | v10;
  }
  if (!v10)
    return 0;
  v11 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
  if (!v11 && (*(_DWORD *)(v9 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v9 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v9 + 24));
    *(_QWORD *)v9 = *(_QWORD *)v9 & 7 | v11;
  }
  if (!v11)
    return 0;
  v12 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
  if (!v12 && (*(_DWORD *)(v8 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v8 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v8 + 24));
    *(_QWORD *)v8 = *(_QWORD *)v8 & 7 | v12;
  }
  if (!v12)
    return 0;
  v13 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
  if (!v13 && (*(_DWORD *)(v9 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v9 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v9 + 24));
    *(_QWORD *)v9 = *(_QWORD *)v9 & 7 | v13;
  }
  if (v13)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, v8, v9, a5);
  else
    return 0;
}

uint64_t llvm::MCObjectWriter::isSymbolRefDifferenceFullyResolvedImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;

  if ((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a4 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a4 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a4 + 24));
    *(_QWORD *)a4 = *(_QWORD *)a4 & 7 | v9;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2, a3);
}

void llvm::MCPseudoProbe::emit(uint64_t a1, llvm::MCStreamer *this, uint64_t a3)
{
  uint64_t v6;
  const llvm::MCSymbol *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::MCSymbol **v31;
  uint64_t v32;
  llvm::MCSymbol *v33;
  uint64_t v34;

  v6 = a3 != 0;
  llvm::MCStreamer::emitULEB128IntValue(this, *(_QWORD *)(a1 + 8), 0);
  (*(void (**)(llvm::MCStreamer *, unint64_t, uint64_t))(*(_QWORD *)this + 512))(this, (*(_BYTE *)(a1 + 17) | (16 * *(_BYTE *)(a1 + 16))) | (unint64_t)(v6 << 7), 1);
  v7 = *(const llvm::MCSymbol **)(a1 + 24);
  if (a3)
  {
    v8 = *(_QWORD *)(a3 + 24);
    v9 = *((_QWORD *)this + 1);
    v10 = sub_1C484358C(v9 + 192, 24, 3);
    v11 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 152) + 18) << 16;
    *(_BYTE *)v10 = 2;
    *(_DWORD *)(v10 + 1) = v11 | (*(unsigned __int8 *)(v10 + 4) << 24);
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = v7;
    v12 = sub_1C484358C(v9 + 192, 24, 3);
    v13 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 152) + 18) << 16;
    *(_BYTE *)v12 = 2;
    *(_DWORD *)(v12 + 1) = v13 | (*(unsigned __int8 *)(v12 + 4) << 24);
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = v8;
    v14 = sub_1C484358C(v9 + 192, 32, 3);
    *(_BYTE *)v14 = 0;
    *(_DWORD *)(v14 + 1) = (*(unsigned __int8 *)(v14 + 4) << 24) | 0x12;
    *(_QWORD *)(v14 + 8) = 0;
    *(_QWORD *)(v14 + 16) = v10;
    *(_QWORD *)(v14 + 24) = v12;
    v34 = 0;
    (*(void (**)(llvm::MCStreamer *))(*(_QWORD *)this + 72))(this);
    llvm::MCExpr::evaluateAsAbsolute(v14, &v34);
    if (v15)
    {
      llvm::MCStreamer::emitSLEB128IntValue(this, v34);
    }
    else
    {
      v16 = operator new();
      *(_OWORD *)v16 = 0u;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_QWORD *)(v16 + 32) = -1;
      *(_QWORD *)(v16 + 40) = 0;
      *(_BYTE *)(v16 + 48) = 14;
      *(_DWORD *)(v16 + 49) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_QWORD *)(v16 + 64) = v16 + 88;
      *(_OWORD *)(v16 + 72) = xmmword_1C6464ED0;
      *(_QWORD *)(v16 + 96) = v16 + 112;
      *(_QWORD *)(v16 + 104) = 0x100000000;
      *(_QWORD *)(v16 + 136) = v14;
      v17 = *((unsigned int *)this + 30);
      if (!(_DWORD)v17)
        goto LABEL_11;
      v18 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v17 - 32);
      if (v18)
      {
        v19 = *((unsigned int *)this + 76);
        if ((_DWORD)v19)
        {
          v31 = (llvm::MCSymbol **)*((_QWORD *)this + 37);
          v32 = 8 * v19;
          do
          {
            v33 = *v31++;
            llvm::MCSection::addPendingLabel((_DWORD *)v18, v33, *((_DWORD *)this + 104));
            v32 -= 8;
          }
          while (v32);
          *((_DWORD *)this + 76) = 0;
        }
        v20 = *(_DWORD *)(v18 + 160);
        if (v20)
        {
          v25 = *((_DWORD *)this + 104);
          v26 = *(_DWORD **)(v18 + 152);
          v27 = v26;
          do
          {
            if (v27[2] == v25)
            {
              v28 = *(uint64_t **)v27;
              *v28 = **(_QWORD **)v27 & 7 | v16;
              v28[3] = 0;
              *((_DWORD *)v28 + 2) = v28[1] & 0xFFFFE3FF | 0x400;
              v26 = *(_DWORD **)(v18 + 152);
              v29 = *(unsigned int *)(v18 + 160);
              v30 = (char *)&v26[4 * v29] - (char *)(v27 + 4);
              if (v30)
              {
                memmove(v27, v27 + 4, v30 - 4);
                LODWORD(v29) = *(_DWORD *)(v18 + 160);
                v26 = *(_DWORD **)(v18 + 152);
              }
              v27 -= 4;
              v20 = v29 - 1;
              *(_DWORD *)(v18 + 160) = v20;
            }
            v27 += 4;
          }
          while (v27 != &v26[4 * v20]);
        }
      }
      v21 = *((unsigned int *)this + 30);
      if ((_DWORD)v21)
        v22 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v21 - 32);
      else
LABEL_11:
        v22 = 0;
      v23 = (uint64_t *)*((_QWORD *)this + 35);
      v24 = *v23;
      *(_QWORD *)v16 = *v23;
      *(_QWORD *)(v16 + 8) = v23;
      *(_QWORD *)(v24 + 8) = v16;
      *v23 = v16;
      *(_QWORD *)(v16 + 16) = v22;
    }
  }
  else
  {
    llvm::MCStreamer::emitSymbolValue(this, v7, *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 152) + 8), 0);
  }
}

void llvm::MCPseudoProbeInlineTree::emit(_QWORD *a1, llvm::MCStreamer *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD **v13;
  _QWORD *v14;
  _QWORD **v15;
  BOOL v16;
  _QWORD **v17;
  _QWORD *v18[2];
  _OWORD *v19;

  v6 = a1[8];
  if (v6)
  {
    (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, v6, 8);
    llvm::MCStreamer::emitULEB128IntValue(a2, (uint64_t)(a1[6] - a1[5]) >> 5, 0);
    llvm::MCStreamer::emitULEB128IntValue(a2, a1[3], 0);
    v7 = a1[5];
    v8 = a1[6];
    if (v7 != v8)
    {
      v9 = *a3;
      do
      {
        llvm::MCPseudoProbe::emit(v7, a2, v9);
        *a3 = v7;
        v9 = v7;
        v7 += 32;
      }
      while (v7 != v8);
    }
  }
  v18[0] = 0;
  v18[1] = 0;
  v17 = v18;
  v10 = (uint64_t *)a1[2];
  if (v10)
  {
    do
    {
      v11 = v10[4];
      v12 = v10[2];
      v19 = v10 + 2;
      *((_QWORD *)sub_1C62BD9A4((uint64_t)&v17, v12, *((_DWORD *)v10 + 6), &v19) + 6) = v11;
      v10 = (uint64_t *)*v10;
    }
    while (v10);
    v13 = v17;
    if (v17 != v18)
    {
      do
      {
        if (a1[8])
          llvm::MCStreamer::emitULEB128IntValue(a2, *((unsigned int *)v13 + 10), 0);
        llvm::MCPseudoProbeInlineTree::emit(v13[6], a2, a3);
        v14 = v13[1];
        if (v14)
        {
          do
          {
            v15 = (_QWORD **)v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD **)v13[2];
            v16 = *v15 == v13;
            v13 = v15;
          }
          while (!v16);
        }
        v13 = v15;
      }
      while (v15 != v18);
    }
  }
  sub_1C6143384(v18[0]);
}

void llvm::MCPseudoProbeSection::emit(llvm::MCPseudoProbeSection **this, llvm::MCObjectStreamer *a2)
{
  llvm::MCPseudoProbeSection **v2;
  llvm::MCPseudoProbeSection *v3;
  uint64_t v5;
  unint64_t PseudoProbeSection;
  llvm::MCPseudoProbeSection *v7;
  llvm::MCPseudoProbeSection **v8;
  BOOL v9;
  uint64_t v10;

  v2 = this + 1;
  v3 = *this;
  if (*this != (llvm::MCPseudoProbeSection *)(this + 1))
  {
    v5 = *((_QWORD *)a2 + 1);
    do
    {
      v10 = 0;
      PseudoProbeSection = llvm::MCObjectFileInfo::getPseudoProbeSection(*(llvm::MCObjectFileInfo **)(v5 + 168), *((const llvm::MCSection **)v3 + 4));
      if (PseudoProbeSection)
      {
        (*(void (**)(llvm::MCObjectStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, PseudoProbeSection, 0);
        llvm::MCPseudoProbeInlineTree::emit((_QWORD *)v3 + 5, a2, &v10);
      }
      v7 = (llvm::MCPseudoProbeSection *)*((_QWORD *)v3 + 1);
      if (v7)
      {
        do
        {
          v8 = (llvm::MCPseudoProbeSection **)v7;
          v7 = *(llvm::MCPseudoProbeSection **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (llvm::MCPseudoProbeSection **)*((_QWORD *)v3 + 2);
          v9 = *v8 == v3;
          v3 = (llvm::MCPseudoProbeSection *)v8;
        }
        while (!v9);
      }
      v3 = (llvm::MCPseudoProbeSection *)v8;
    }
    while (v8 != v2);
  }
}

void llvm::MCPseudoProbeTable::emit(llvm::MCPseudoProbeTable *this, llvm::MCObjectStreamer *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)(v2 + 1656))
    llvm::MCPseudoProbeSection::emit((llvm::MCPseudoProbeSection **)(v2 + 1640), this);
}

llvm::raw_ostream *llvm::MCPseudoProbeFuncDesc::print(llvm::MCPseudoProbeFuncDesc *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  _DWORD *v5;
  char v6;
  const char *v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  llvm::raw_ostream *result;
  _BYTE *v12;

  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 5)
  {
    *(_WORD *)(v4 + 4) = 8250;
    *(_DWORD *)v4 = 1145656647;
    *((_QWORD *)a2 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(a2, "GUID: ", 6uLL);
  }
  sub_1C5E21910(a2, *(_QWORD *)this, 0, 0, 0);
  v5 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v5 > 6uLL)
  {
    *(_DWORD *)((char *)v5 + 3) = 540697965;
    *v5 = 1835093536;
    *((_QWORD *)a2 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(a2, " Name: ", 7uLL);
  }
  v6 = *((_BYTE *)this + 39);
  if (v6 >= 0)
    v7 = (char *)this + 16;
  else
    v7 = (const char *)*((_QWORD *)this + 2);
  if (v6 >= 0)
    v8 = v6 & 0x7F;
  else
    v8 = *((_QWORD *)this + 3);
  llvm::raw_ostream::write(a2, v7, v8);
  v9 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v9)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    v10 = *((_QWORD *)a2 + 4);
  }
  else
  {
    *v9 = 10;
    v10 = *((_QWORD *)a2 + 4) + 1;
    *((_QWORD *)a2 + 4) = v10;
  }
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) > 5)
  {
    *(_WORD *)(v10 + 4) = 8250;
    *(_DWORD *)v10 = 1752392008;
    *((_QWORD *)a2 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Hash: ", 6uLL);
  }
  result = sub_1C5E21910(a2, *((_QWORD *)this + 1), 0, 0, 0);
  v12 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v12)
    return llvm::raw_ostream::write(a2, "\n", 1uLL);
  *v12 = 10;
  ++*((_QWORD *)a2 + 4);
  return result;
}

unint64_t llvm::MCDecodedPseudoProbe::getInlineContext(unint64_t result, unint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  int v19;
  __int128 v20;
  int v21;

  v4 = *(_QWORD *)(result + 32);
  v5 = *(_QWORD *)(v4 + 80);
  if (v5)
  {
    v7 = *(_DWORD *)(a2 + 8);
    do
    {
      v8 = sub_1C59500E0(a3, v5);
      v11 = (_QWORD *)v8[5];
      v9 = v8 + 5;
      v10 = v11;
      v12 = *((_BYTE *)v9 + 23);
      v13 = v12;
      if (v12 >= 0)
        v10 = v9;
      v14 = v12 & 0x7F;
      if (v13 < 0)
        v14 = v9[1];
      *(_QWORD *)&v20 = v10;
      *((_QWORD *)&v20 + 1) = v14;
      v21 = *(_DWORD *)(v4 + 88);
      result = sub_1C594D96C(a2, &v20);
      v4 = *(_QWORD *)(v4 + 72);
      v5 = *(_QWORD *)(v4 + 80);
    }
    while (v5);
    v15 = *(_DWORD *)(a2 + 8);
    if (v7 != v15)
    {
      v16 = *(_QWORD *)a2 + 24 * v7;
      v17 = *(_QWORD *)a2 + 24 * v15;
      while (1)
      {
        v17 -= 24;
        if (v16 >= v17)
          break;
        v18 = *(_OWORD *)v16;
        *(_OWORD *)v16 = *(_OWORD *)v17;
        *(_OWORD *)v17 = v18;
        v19 = *(_DWORD *)(v16 + 16);
        *(_DWORD *)(v16 + 16) = *(_DWORD *)(v17 + 16);
        *(_DWORD *)(v17 + 16) = v19;
        v16 += 24;
      }
    }
  }
  return result;
}

unint64_t sub_1C594D96C(unint64_t result, __int128 *a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  int v8;

  v2 = result;
  v3 = *(_DWORD *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
  {
    v7 = *a2;
    v8 = *((_DWORD *)a2 + 4);
    result = sub_1C4926708(result, (unint64_t)&v7, 1);
    v4 = *(_QWORD *)v2 + 24 * *(unsigned int *)(v2 + 8);
    v5 = *(_OWORD *)result;
    v6 = *(_QWORD *)(result + 16);
  }
  else
  {
    v4 = *(_QWORD *)result + 24 * v3;
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 2);
  }
  *(_QWORD *)(v4 + 16) = v6;
  *(_OWORD *)v4 = v5;
  ++*(_DWORD *)(v2 + 8);
  return result;
}

uint64_t llvm::MCDecodedPseudoProbe::getInlineContextStr(unint64_t a1, _QWORD *a2)
{
  char *v4;
  size_t *v5;
  size_t v6;
  size_t *v7;
  const void *v8;
  size_t v9;
  void *p_p;
  uint64_t v11;
  void **v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *__p;
  size_t v23;
  int64_t v24;
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[50];

  v30[48] = *MEMORY[0x1E0C80C00];
  sub_1C4D82D08((uint64_t)v25);
  v28 = v30;
  v29 = 0x1000000000;
  llvm::MCDecodedPseudoProbe::getInlineContext(a1, (unint64_t)&v28, a2);
  if ((_DWORD)v29)
  {
    v4 = (char *)v28 + 24 * v29;
    v5 = (size_t *)((char *)v28 + 8);
    while (1)
    {
      std::stringbuf::str();
      v6 = v24 >= 0 ? HIBYTE(v24) : v23;
      if ((SHIBYTE(v24) & 0x80000000) == 0)
        break;
      operator delete(__p);
      if (v6)
        goto LABEL_8;
LABEL_9:
      v7 = v5 - 1;
      v8 = (const void *)*(v5 - 1);
      if (v8)
      {
        v9 = *v5;
        if (*v5 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v9 >= 0x17)
        {
          v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17)
            v14 = v9 | 7;
          v15 = v14 + 1;
          p_p = operator new(v14 + 1);
          v23 = v9;
          v24 = v15 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v24) = *v5;
          p_p = &__p;
          if (!v9)
            goto LABEL_21;
        }
        memmove(p_p, v8, v9);
LABEL_21:
        *((_BYTE *)p_p + v9) = 0;
        v13 = HIBYTE(v24);
        v12 = (void **)__p;
        v11 = v23;
        goto LABEL_22;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      __p = 0;
      v23 = 0;
      v24 = 0;
LABEL_22:
      v16 = v13;
      if (v13 >= 0)
        v17 = &__p;
      else
        v17 = v12;
      v18 = v13 & 0x7F;
      if (v16 >= 0)
        v19 = v18;
      else
        v19 = v11;
      v20 = sub_1C4D7C62C(v25, (uint64_t)v17, v19);
      sub_1C4D7C62C(v20, (uint64_t)":", 1);
      std::ostream::operator<<();
      if (SHIBYTE(v24) < 0)
        operator delete(__p);
      v5 += 3;
      if (v7 + 3 == (size_t *)v4)
        goto LABEL_31;
    }
    if (!v6)
      goto LABEL_9;
LABEL_8:
    sub_1C4D7C62C(v25, (uint64_t)" @ ", 3);
    goto LABEL_9;
  }
LABEL_31:
  std::stringbuf::str();
  if (v28 != v30)
    free(v28);
  v25[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v25[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v26 < 0)
    operator delete((void *)v25[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1CAA32F18](&v27);
}

void llvm::MCDecodedPseudoProbe::print(unint64_t a1, llvm::raw_ostream *this, _QWORD *a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  char v14;
  const void *v15;
  int v16;
  size_t v17;
  size_t v18;
  void **p_dst;
  _BYTE *v20;
  size_t v21;
  const char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  const char *v27;
  size_t v28;
  size_t v29;
  _BYTE *v30;
  _DWORD *v31;
  _WORD *v32;
  uint64_t v33;
  _WORD *v34;
  const char *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  _BYTE *v42;
  void **__dst;
  size_t v44;
  int64_t v45;

  v8 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v8) > 5)
  {
    *(_WORD *)(v8 + 4) = 8250;
    *(_DWORD *)v8 = 1129207110;
    *((_QWORD *)this + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(this, "FUNC: ", 6uLL);
  }
  v9 = *(_QWORD *)a1;
  if (!a4)
  {
    sub_1C5E21910(this, v9, 0, 0, 0);
    v20 = (_BYTE *)*((_QWORD *)this + 4);
    if (*((_BYTE **)this + 3) == v20)
    {
      llvm::raw_ostream::write(this, " ", 1uLL);
    }
    else
    {
      *v20 = 32;
      ++*((_QWORD *)this + 4);
    }
    goto LABEL_33;
  }
  v10 = sub_1C59500E0(a3, v9);
  v13 = (const void *)v10[5];
  v11 = v10 + 5;
  v12 = v13;
  v14 = *((_BYTE *)v11 + 23);
  if (v14 >= 0)
    v15 = v11;
  else
    v15 = v12;
  if (!v15)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    __dst = 0;
    v44 = 0;
    v45 = 0;
    goto LABEL_23;
  }
  v16 = v14;
  v17 = v14 & 0x7F;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = v11[1];
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    p_dst = (void **)operator new(v24 + 1);
    v44 = v18;
    v45 = v25 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v45) = v18;
    p_dst = (void **)&__dst;
    if (!v18)
      goto LABEL_22;
  }
  memmove(p_dst, v15, v18);
LABEL_22:
  *((_BYTE *)p_dst + v18) = 0;
  v23 = HIBYTE(v45);
  v22 = (const char *)__dst;
  v21 = v44;
LABEL_23:
  v26 = v23 < 0;
  if (v23 >= 0)
    v27 = (const char *)&__dst;
  else
    v27 = v22;
  v28 = v23 & 0x7F;
  if (v26)
    v29 = v21;
  else
    v29 = v28;
  llvm::raw_ostream::write(this, v27, v29);
  v30 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v30)
  {
    llvm::raw_ostream::write(this, " ", 1uLL);
  }
  else
  {
    *v30 = 32;
    ++*((_QWORD *)this + 4);
  }
  if (SHIBYTE(v45) < 0)
    operator delete(__dst);
LABEL_33:
  v31 = (_DWORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v31 > 6uLL)
  {
    *(_DWORD *)((char *)v31 + 3) = 540702821;
    *v31 = 1701080649;
    *((_QWORD *)this + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(this, "Index: ", 7uLL);
  }
  sub_1C5E21910(this, *(_QWORD *)(a1 + 8), 0, 0, 0);
  v32 = (_WORD *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v32 > 1uLL)
  {
    *v32 = 8224;
    v33 = *((_QWORD *)this + 4) + 2;
    *((_QWORD *)this + 4) = v33;
  }
  else
  {
    llvm::raw_ostream::write(this, "  ", 2uLL);
    v33 = *((_QWORD *)this + 4);
  }
  if ((unint64_t)(*((_QWORD *)this + 3) - v33) > 5)
  {
    *(_WORD *)(v33 + 4) = 8250;
    *(_DWORD *)v33 = 1701869908;
    v34 = (_WORD *)(*((_QWORD *)this + 4) + 6);
    *((_QWORD *)this + 4) = v34;
  }
  else
  {
    llvm::raw_ostream::write(this, "Type: ", 6uLL);
    v34 = (_WORD *)*((_QWORD *)this + 4);
  }
  v35 = off_1E8182078[*(unsigned __int8 *)(a1 + 17)];
  v36 = strlen(v35);
  v37 = v36;
  if (v36 <= *((_QWORD *)this + 3) - (_QWORD)v34)
  {
    if (v36)
    {
      memcpy(v34, v35, v36);
      v34 = (_WORD *)(*((_QWORD *)this + 4) + v37);
      *((_QWORD *)this + 4) = v34;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, v35, v36);
    v34 = (_WORD *)*((_QWORD *)this + 4);
  }
  if (*((_QWORD *)this + 3) - (_QWORD)v34 > 1uLL)
  {
    *v34 = 8224;
    *((_QWORD *)this + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(this, "  ", 2uLL);
  }
  llvm::MCDecodedPseudoProbe::getInlineContextStr(a1, a3);
  v38 = HIBYTE(v45) & 0x7F;
  if (v45 < 0)
    v38 = v44;
  if (v38)
  {
    v39 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v39) > 0xA)
    {
      *(_DWORD *)(v39 + 7) = 541073466;
      *(_QWORD *)v39 = *(_QWORD *)"Inlined: @ ";
      *((_QWORD *)this + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(this, "Inlined: @ ", 0xBuLL);
    }
    if (v45 >= 0)
      v40 = (const char *)&__dst;
    else
      v40 = (const char *)__dst;
    if (v45 >= 0)
      v41 = HIBYTE(v45) & 0x7F;
    else
      v41 = v44;
    llvm::raw_ostream::write(this, v40, v41);
  }
  v42 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v42)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *v42 = 10;
    ++*((_QWORD *)this + 4);
  }
  if (SHIBYTE(v45) < 0)
    operator delete(__dst);
}

const std::error_category *llvm::MCPseudoProbeDecoder::readString@<X0>(llvm::MCPseudoProbeDecoder *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  const std::error_category *result;
  char v7;

  v4 = *((_QWORD *)this + 23);
  v5 = v4 + a2;
  if (v5 <= *((_QWORD *)this + 24))
  {
    result = (const std::error_category *)a2;
    *((_QWORD *)this + 23) = v5;
    v7 = *(_BYTE *)(a3 + 16) & 0xFE;
  }
  else
  {
    result = std::system_category();
    v4 = 0;
    v7 = *(_BYTE *)(a3 + 16) | 1;
  }
  *(_BYTE *)(a3 + 16) = v7;
  *(_QWORD *)a3 = v4;
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

uint64_t llvm::MCPseudoProbeDecoder::buildGUID2FuncDescMap(llvm::MCPseudoProbeDecoder *this, const unsigned __int8 *a2, uint64_t a3)
{
  const unsigned __int8 *v3;
  _QWORD *v5;
  const unsigned __int8 *v6;
  const unsigned __int8 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  __int128 *p_p;
  uint64_t v15;
  unint64_t v16;
  uint8x8_t v17;
  _QWORD *v18;
  _QWORD *i;
  unint64_t v20;
  char *v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  int8x8_t prime;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  int8x8_t v39;
  _QWORD *v40;
  unint64_t v41;
  void *v42;
  __int128 v44;
  __int128 __p;
  uint64_t v46;
  size_t __len;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v3 = &a2[a3];
  *((_QWORD *)this + 23) = a2;
  *((_QWORD *)this + 24) = &a2[a3];
  if (a3 < 1)
    return 1;
  v5 = (_QWORD *)((char *)this + 16);
  while (1)
  {
    v6 = a2 + 8;
    if (a2 + 8 > v3)
      break;
    v9 = *(_QWORD *)a2;
    v7 = a2 + 16;
    v8 = v9;
    *((_QWORD *)this + 23) = v6;
    if (v7 > v3)
      break;
    v10 = *(_QWORD *)v6;
    *((_QWORD *)this + 23) = v7;
    sub_1C594E690((std::error_category *)&__len, (uint64_t)this);
    if ((v48 & 1) != 0)
      return 0;
    v11 = __len;
    v12 = *((_QWORD *)this + 23);
    v13 = (char *)(v12 + __len);
    if ((unint64_t)v13 > *((_QWORD *)this + 24))
      break;
    *((_QWORD *)this + 23) = v13;
    *(_QWORD *)&v44 = v8;
    *((_QWORD *)&v44 + 1) = v10;
    if (v11 >= 0x17)
    {
      if ((v11 | 7) == 0x17)
        v15 = (v11 & 0xFFFFFFF8) + 8;
      else
        v15 = v11 | 7;
      p_p = (__int128 *)operator new(v15 + 1);
      *((_QWORD *)&__p + 1) = v11;
      v46 = v15 - 0x7FFFFFFFFFFFFFFFLL;
      *(_QWORD *)&__p = p_p;
    }
    else
    {
      HIBYTE(v46) = v11;
      p_p = &__p;
      if (!(_DWORD)v11)
        goto LABEL_15;
    }
    memmove(p_p, (const void *)v12, v11);
LABEL_15:
    *((_BYTE *)p_p + v11) = 0;
    v16 = *((_QWORD *)this + 1);
    if (v16)
    {
      v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        v12 = v8;
        if (v16 <= v8)
          v12 = v8 % v16;
      }
      else
      {
        v12 = (v16 - 1) & v8;
      }
      v18 = *(_QWORD **)(*(_QWORD *)this + 8 * v12);
      if (v18)
      {
        for (i = (_QWORD *)*v18; i; i = (_QWORD *)*i)
        {
          v20 = i[1];
          if (v20 == v8)
          {
            if (i[2] == v8)
              goto LABEL_87;
          }
          else
          {
            if (v17.u32[0] > 1uLL)
            {
              if (v20 >= v16)
                v20 %= v16;
            }
            else
            {
              v20 &= v16 - 1;
            }
            if (v20 != v12)
              break;
          }
        }
      }
    }
    v21 = (char *)operator new(0x40uLL);
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = v8;
    *((_QWORD *)v21 + 2) = v8;
    *(_OWORD *)(v21 + 24) = v44;
    *(_OWORD *)(v21 + 40) = __p;
    *((_QWORD *)v21 + 7) = v46;
    __p = 0uLL;
    v46 = 0;
    v22 = (float)(unint64_t)(*((_QWORD *)this + 3) + 1);
    v23 = *((float *)this + 8);
    if (!v16 || (float)(v23 * (float)v16) < v22)
    {
      v24 = (v16 & (v16 - 1)) != 0;
      if (v16 < 3)
        v24 = 1;
      v25 = v24 | (2 * v16);
      v26 = vcvtps_u32_f32(v22 / v23);
      if (v25 <= v26)
        prime = (int8x8_t)v26;
      else
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v16 = *((_QWORD *)this + 1);
      }
      if (*(_QWORD *)&prime <= v16)
      {
        if (*(_QWORD *)&prime < v16)
        {
          v34 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
          if (v16 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
          {
            v34 = std::__next_prime(v34);
          }
          else
          {
            v36 = 1 << -(char)__clz(v34 - 1);
            if (v34 >= 2)
              v34 = v36;
          }
          if (*(_QWORD *)&prime <= v34)
            prime = (int8x8_t)v34;
          if (*(_QWORD *)&prime >= v16)
          {
            v16 = *((_QWORD *)this + 1);
          }
          else
          {
            if (prime)
              goto LABEL_43;
            v42 = *(void **)this;
            *(_QWORD *)this = 0;
            if (v42)
              operator delete(v42);
            v16 = 0;
            *((_QWORD *)this + 1) = 0;
          }
        }
      }
      else
      {
LABEL_43:
        if (*(_QWORD *)&prime >> 61)
          sub_1C4764EE4();
        v28 = operator new(8 * *(_QWORD *)&prime);
        v29 = *(void **)this;
        *(_QWORD *)this = v28;
        if (v29)
          operator delete(v29);
        v30 = 0;
        *((int8x8_t *)this + 1) = prime;
        do
          *(_QWORD *)(*(_QWORD *)this + 8 * v30++) = 0;
        while (*(_QWORD *)&prime != v30);
        v31 = (_QWORD *)*v5;
        if (*v5)
        {
          v32 = v31[1];
          v33 = (uint8x8_t)vcnt_s8(prime);
          v33.i16[0] = vaddlv_u8(v33);
          if (v33.u32[0] > 1uLL)
          {
            if (v32 >= *(_QWORD *)&prime)
              v32 %= *(_QWORD *)&prime;
          }
          else
          {
            v32 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(*(_QWORD *)this + 8 * v32) = v5;
          v37 = (_QWORD *)*v31;
          if (*v31)
          {
            do
            {
              v38 = v37[1];
              if (v33.u32[0] > 1uLL)
              {
                if (v38 >= *(_QWORD *)&prime)
                  v38 %= *(_QWORD *)&prime;
              }
              else
              {
                v38 &= *(_QWORD *)&prime - 1;
              }
              if (v38 != v32)
              {
                if (!*(_QWORD *)(*(_QWORD *)this + 8 * v38))
                {
                  *(_QWORD *)(*(_QWORD *)this + 8 * v38) = v31;
                  goto LABEL_68;
                }
                *v31 = *v37;
                *v37 = **(_QWORD **)(*(_QWORD *)this + 8 * v38);
                **(_QWORD **)(*(_QWORD *)this + 8 * v38) = v37;
                v37 = v31;
              }
              v38 = v32;
LABEL_68:
              v31 = v37;
              v37 = (_QWORD *)*v37;
              v32 = v38;
            }
            while (v37);
          }
        }
        v16 = (unint64_t)prime;
      }
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v16 <= v8)
          v12 = v8 % v16;
        else
          v12 = v8;
      }
      else
      {
        v12 = (v16 - 1) & v8;
      }
    }
    v39 = *(int8x8_t *)this;
    v40 = *(_QWORD **)(*(_QWORD *)this + 8 * v12);
    if (v40)
    {
      *(_QWORD *)v21 = *v40;
    }
    else
    {
      *(_QWORD *)v21 = *v5;
      *v5 = v21;
      *(_QWORD *)(*(_QWORD *)&v39 + 8 * v12) = v5;
      if (!*(_QWORD *)v21)
        goto LABEL_86;
      v41 = *(_QWORD *)(*(_QWORD *)v21 + 8);
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v41 >= v16)
          v41 %= v16;
      }
      else
      {
        v41 &= v16 - 1;
      }
      v40 = (_QWORD *)(*(_QWORD *)this + 8 * v41);
    }
    *v40 = v21;
LABEL_86:
    ++*((_QWORD *)this + 3);
LABEL_87:
    if (SHIBYTE(v46) < 0)
      operator delete((void *)__p);
    a2 = (const unsigned __int8 *)*((_QWORD *)this + 23);
    v3 = (const unsigned __int8 *)*((_QWORD *)this + 24);
    if (a2 >= v3)
      return 1;
  }
  std::system_category();
  return 0;
}

std::error_category *sub_1C594E690(std::error_category *result, uint64_t a2)
{
  std::error_category *v2;
  unint64_t v3;
  unsigned int v4;
  char *v5;
  char v6;
  uint64_t v7;
  unint64_t v8;

  v2 = result;
  v3 = 0;
  v4 = 0;
  v5 = *(char **)(a2 + 184);
  do
  {
    if (!v5 || (v6 = *v5, v7 = *v5 & 0x7F, v4 >= 0x40) && (*v5 & 0x7F) != 0 || (unint64_t)(v7 << v4) >> v4 != v7)
    {
      LODWORD(v3) = 0;
      goto LABEL_10;
    }
    v3 += v7 << v4;
    v4 += 7;
    ++v5;
  }
  while (v6 < 0);
  if (HIDWORD(v3))
    goto LABEL_11;
LABEL_10:
  v8 = *(_QWORD *)(a2 + 184) + v5 - *(_QWORD *)(a2 + 184);
  if (v8 > *(_QWORD *)(a2 + 192))
  {
LABEL_11:
    result = (std::error_category *)std::system_category();
    LOBYTE(v2[2].__vftable) |= 1u;
    v2->__vftable = 0;
    v2[1].__vftable = (std::error_category_vtbl *)result;
    return result;
  }
  *(_QWORD *)(a2 + 184) = v8;
  LOBYTE(result[2].__vftable) &= ~1u;
  LODWORD(result->__vftable) = v3;
  return result;
}

uint64_t llvm::MCPseudoProbeDecoder::buildAddress2ProbeMap(uint64_t a1, uint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v9;
  unsigned int v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8x8_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  int8x8_t prime;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  char *v60;
  char v61;
  uint64_t v62;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  uint8x8_t v69;
  _QWORD **v70;
  _QWORD *i;
  unint64_t v72;
  float v73;
  float v74;
  _BOOL8 v75;
  unint64_t v76;
  unint64_t v77;
  int8x8_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  uint8x8_t v84;
  unint64_t v85;
  uint8x8_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  unint64_t v93;
  _QWORD *v94;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  _QWORD *v109;
  void *v110;
  int j;
  void *v113;
  _QWORD *v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t *v119;
  unint64_t v120;
  std::error_category v121;
  char v122;
  std::error_category v123;
  char v124;
  std::error_category v125[2];
  char v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  v9 = a1 + 80;
  if ((uint64_t *)(a1 + 80) == a2)
  {
    v10 = *((_DWORD *)a2 + 6);
  }
  else
  {
    sub_1C594E690(v125, a1);
    if ((v126 & 1) != 0)
      return 0;
    v10 = v125[0].__vftable;
  }
  v11 = *(unint64_t **)(a1 + 184);
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) > *(_QWORD *)(a1 + 192))
  {
LABEL_6:
    std::system_category();
    return 0;
  }
  v13 = *v11;
  *(_QWORD *)(a1 + 184) = v12;
  v120 = v13;
  if ((uint64_t *)v9 == a2 && a4[3])
  {
    v14 = sub_1C55BDFB8(a4, &v120);
    v15 = 0;
    if (!a2 || !v14)
      goto LABEL_92;
  }
  else if (!a2)
  {
    v15 = 0;
    goto LABEL_92;
  }
  v116 = a4;
  v118 = a3;
  v16 = a2[8];
  v17 = v10;
  v18 = operator new();
  v19 = v18;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_DWORD *)(v18 + 32) = 1065353216;
  *(_OWORD *)(v18 + 40) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_QWORD *)(v18 + 80) = v16;
  *(_QWORD *)(v18 + 88) = v10;
  *(_DWORD *)(v18 + 96) = 0;
  v20 = v16 ^ v10;
  v21 = a2[1];
  if (v21)
  {
    v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      v4 = v16 ^ v10;
      if (v20 >= v21)
        v4 = v20 % v21;
    }
    else
    {
      v4 = (v21 - 1) & v20;
    }
    v23 = *(_QWORD **)(*a2 + 8 * v4);
    if (v23)
    {
      v24 = (_QWORD *)*v23;
      if (*v23)
      {
        do
        {
          v25 = v24[1];
          if (v25 == v20)
          {
            if (v24[2] == v16 && *((_DWORD *)v24 + 6) == v10)
            {
              MEMORY[0x1CAA32FC0](v18, 0x10A0C40147AED9ELL);
              a4 = v116;
              goto LABEL_91;
            }
          }
          else
          {
            if (v22.u32[0] > 1uLL)
            {
              if (v25 >= v21)
                v25 %= v21;
            }
            else
            {
              v25 &= v21 - 1;
            }
            if (v25 != v4)
              break;
          }
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
    }
  }
  v27 = a2 + 2;
  v24 = operator new(0x28uLL);
  *v24 = 0;
  v24[1] = v20;
  v24[2] = v16;
  v24[3] = v17;
  v24[4] = v19;
  v28 = (float)(unint64_t)(a2[3] + 1);
  v29 = *((float *)a2 + 8);
  if (!v21 || (float)(v29 * (float)v21) < v28)
  {
    v30 = 1;
    if (v21 >= 3)
      v30 = (v21 & (v21 - 1)) != 0;
    v31 = v30 | (2 * v21);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      prime = (int8x8_t)v32;
    else
      prime = (int8x8_t)v31;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v21 = a2[1];
    }
    if (*(_QWORD *)&prime > v21)
      goto LABEL_47;
    if (*(_QWORD *)&prime < v21)
    {
      v40 = vcvtps_u32_f32((float)(unint64_t)a2[3] / *((float *)a2 + 8));
      if (v21 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (*(_QWORD *)&prime <= v40)
        prime = (int8x8_t)v40;
      if (*(_QWORD *)&prime >= v21)
      {
        v21 = a2[1];
      }
      else
      {
        if (prime)
        {
LABEL_47:
          if (*(_QWORD *)&prime >> 61)
LABEL_239:
            sub_1C4764EE4();
          v34 = operator new(8 * *(_QWORD *)&prime);
          v35 = (void *)*a2;
          *a2 = (uint64_t)v34;
          if (v35)
            operator delete(v35);
          v36 = 0;
          a2[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a2 + 8 * v36++) = 0;
          while (*(_QWORD *)&prime != v36);
          v37 = (_QWORD *)*v27;
          if (*v27)
          {
            v38 = v37[1];
            v39 = (uint8x8_t)vcnt_s8(prime);
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(_QWORD *)&prime)
                v38 %= *(_QWORD *)&prime;
            }
            else
            {
              v38 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a2 + 8 * v38) = v27;
            v43 = (_QWORD *)*v37;
            if (*v37)
            {
              do
              {
                v44 = v43[1];
                if (v39.u32[0] > 1uLL)
                {
                  if (v44 >= *(_QWORD *)&prime)
                    v44 %= *(_QWORD *)&prime;
                }
                else
                {
                  v44 &= *(_QWORD *)&prime - 1;
                }
                if (v44 != v38)
                {
                  if (!*(_QWORD *)(*a2 + 8 * v44))
                  {
                    *(_QWORD *)(*a2 + 8 * v44) = v37;
                    goto LABEL_72;
                  }
                  *v37 = *v43;
                  *v43 = **(_QWORD **)(*a2 + 8 * v44);
                  **(_QWORD **)(*a2 + 8 * v44) = v43;
                  v43 = v37;
                }
                v44 = v38;
LABEL_72:
                v37 = v43;
                v43 = (_QWORD *)*v43;
                v38 = v44;
              }
              while (v43);
            }
          }
          v21 = (unint64_t)prime;
          goto LABEL_76;
        }
        v113 = (void *)*a2;
        *a2 = 0;
        if (v113)
          operator delete(v113);
        v21 = 0;
        a2[1] = 0;
      }
    }
LABEL_76:
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v20 >= v21)
        v4 = v20 % v21;
      else
        v4 = v16 ^ v17;
    }
    else
    {
      v4 = (v21 - 1) & v20;
    }
  }
  v45 = *a2;
  v46 = *(_QWORD **)(*a2 + 8 * v4);
  a4 = v116;
  if (v46)
  {
    *v24 = *v46;
  }
  else
  {
    v47 = (_QWORD *)*v27;
    *v24 = *v27;
    *v27 = v24;
    *(_QWORD *)(v45 + 8 * v4) = v27;
    if (!v47)
      goto LABEL_90;
    v48 = v47[1];
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v48 >= v21)
        v48 %= v21;
    }
    else
    {
      v48 &= v21 - 1;
    }
    v46 = (_QWORD *)(*a2 + 8 * v48);
  }
  *v46 = v24;
LABEL_90:
  ++a2[3];
LABEL_91:
  *(_QWORD *)(v24[4] + 72) = a2;
  v15 = (_QWORD *)v24[4];
  a3 = v118;
  v15[8] = v120;
LABEL_92:
  sub_1C594E690(v125, a1);
  if ((v126 & 1) != 0)
    return 0;
  v49 = LODWORD(v125[0].__vftable);
  sub_1C594E690(&v123, a1);
  if ((v124 & 1) != 0)
    return 0;
  if ((_DWORD)v49)
  {
    v50 = 0;
    v114 = (_QWORD *)(a1 + 56);
    v115 = v49;
    v119 = a3;
    do
    {
      sub_1C594E690(&v121, a1);
      if ((v122 & 1) != 0)
        return 0;
      v52 = *(char **)(a1 + 184);
      v51 = *(_QWORD *)(a1 + 192);
      v53 = (unint64_t *)(v52 + 1);
      if ((unint64_t)(v52 + 1) > v51)
        goto LABEL_6;
      v54 = LODWORD(v121.__vftable);
      v55 = *v52;
      *(_QWORD *)(a1 + 184) = v53;
      if ((v55 & 0x80000000) != 0)
      {
        v58 = 0;
        v59 = 0;
        v60 = v52 + 1;
        do
        {
          v61 = *v60;
          v62 = *v60 & 0x7F;
          if (v59 >= 0x40)
          {
            if (((v58 >> 63) & 0x7F) != v62)
              goto LABEL_113;
          }
          else if (v59 == 63 && (_DWORD)v62 != 127 && (_DWORD)v62 != 0)
          {
LABEL_113:
            v64 = 0;
            goto LABEL_120;
          }
          v58 |= v62 << v59;
          v59 += 7;
          ++v60;
        }
        while (v61 < 0);
        v65 = (v61 & 0x40) == 0 || v59 > 0x3F;
        v66 = -1 << v59;
        if (v65)
          v66 = 0;
        v64 = v58 | v66;
LABEL_120:
        v67 = (char *)v53 + ((_DWORD)v60 - (_DWORD)v53);
        if ((unint64_t)v67 > v51)
          goto LABEL_6;
        *(_QWORD *)(a1 + 184) = v67;
        v57 = *a3 + v64;
        if (v15)
        {
LABEL_122:
          v68 = *(_QWORD *)(a1 + 48);
          v117 = v54;
          if (v68)
          {
            v69 = (uint8x8_t)vcnt_s8((int8x8_t)v68);
            v69.i16[0] = vaddlv_u8(v69);
            if (v69.u32[0] > 1uLL)
            {
              v49 = v57;
              if (v68 <= v57)
                v49 = v57 % v68;
            }
            else
            {
              v49 = (v68 - 1) & v57;
            }
            v70 = *(_QWORD ***)(*(_QWORD *)(a1 + 40) + 8 * v49);
            if (v70)
            {
              for (i = *v70; i; i = (_QWORD *)*i)
              {
                v72 = i[1];
                if (v72 == v57)
                {
                  if (i[2] == v57)
                  {
                    v109 = a4;
                    goto LABEL_194;
                  }
                }
                else
                {
                  if (v69.u32[0] > 1uLL)
                  {
                    if (v72 >= v68)
                      v72 %= v68;
                  }
                  else
                  {
                    v72 &= v68 - 1;
                  }
                  if (v72 != v49)
                    break;
                }
              }
            }
          }
          i = operator new(0x30uLL);
          *i = 0;
          i[1] = v57;
          i[2] = v57;
          i[3] = i + 3;
          i[4] = i + 3;
          i[5] = 0;
          v73 = (float)(unint64_t)(*(_QWORD *)(a1 + 64) + 1);
          v74 = *(float *)(a1 + 72);
          if (!v68 || (float)(v74 * (float)v68) < v73)
          {
            v75 = (v68 & (v68 - 1)) != 0;
            if (v68 < 3)
              v75 = 1;
            v76 = v75 | (2 * v68);
            v77 = vcvtps_u32_f32(v73 / v74);
            if (v76 <= v77)
              v78 = (int8x8_t)v77;
            else
              v78 = (int8x8_t)v76;
            if (*(_QWORD *)&v78 == 1)
            {
              v78 = (int8x8_t)2;
            }
            else if ((*(_QWORD *)&v78 & (*(_QWORD *)&v78 - 1)) != 0)
            {
              v78 = (int8x8_t)std::__next_prime(*(_QWORD *)&v78);
              v68 = *(_QWORD *)(a1 + 48);
            }
            if (*(_QWORD *)&v78 <= v68)
            {
              if (*(_QWORD *)&v78 < v68)
              {
                v85 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 64) / *(float *)(a1 + 72));
                if (v68 < 3
                  || (v86 = (uint8x8_t)vcnt_s8((int8x8_t)v68), v86.i16[0] = vaddlv_u8(v86), v86.u32[0] > 1uLL))
                {
                  v85 = std::__next_prime(v85);
                }
                else
                {
                  v87 = 1 << -(char)__clz(v85 - 1);
                  if (v85 >= 2)
                    v85 = v87;
                }
                if (*(_QWORD *)&v78 <= v85)
                  v78 = (int8x8_t)v85;
                if (*(_QWORD *)&v78 >= v68)
                {
                  v68 = *(_QWORD *)(a1 + 48);
                }
                else
                {
                  if (v78)
                    goto LABEL_150;
                  v110 = *(void **)(a1 + 40);
                  *(_QWORD *)(a1 + 40) = 0;
                  if (v110)
                    operator delete(v110);
                  v68 = 0;
                  *(_QWORD *)(a1 + 48) = 0;
                }
              }
            }
            else
            {
LABEL_150:
              if (*(_QWORD *)&v78 >> 61)
                goto LABEL_239;
              v79 = operator new(8 * *(_QWORD *)&v78);
              v80 = *(void **)(a1 + 40);
              *(_QWORD *)(a1 + 40) = v79;
              if (v80)
                operator delete(v80);
              v81 = 0;
              *(int8x8_t *)(a1 + 48) = v78;
              do
                *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v81++) = 0;
              while (*(_QWORD *)&v78 != v81);
              v82 = (_QWORD *)*v114;
              if (*v114)
              {
                v83 = v82[1];
                v84 = (uint8x8_t)vcnt_s8(v78);
                v84.i16[0] = vaddlv_u8(v84);
                if (v84.u32[0] > 1uLL)
                {
                  if (v83 >= *(_QWORD *)&v78)
                    v83 %= *(_QWORD *)&v78;
                }
                else
                {
                  v83 &= *(_QWORD *)&v78 - 1;
                }
                *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v83) = v114;
                v88 = (_QWORD *)*v82;
                if (*v82)
                {
                  while (2)
                  {
                    v89 = v88[1];
                    if (v84.u32[0] > 1uLL)
                    {
                      if (v89 >= *(_QWORD *)&v78)
                        v89 %= *(_QWORD *)&v78;
                    }
                    else
                    {
                      v89 &= *(_QWORD *)&v78 - 1;
                    }
                    if (v89 == v83)
                    {
LABEL_174:
                      v89 = v83;
                    }
                    else
                    {
                      v90 = *(_QWORD *)(a1 + 40);
                      if (*(_QWORD *)(v90 + 8 * v89))
                      {
                        *v82 = *v88;
                        *v88 = **(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v89);
                        **(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v89) = v88;
                        v88 = v82;
                        goto LABEL_174;
                      }
                      *(_QWORD *)(v90 + 8 * v89) = v82;
                    }
                    v82 = v88;
                    v88 = (_QWORD *)*v88;
                    v83 = v89;
                    if (!v88)
                      break;
                    continue;
                  }
                }
              }
              v68 = (unint64_t)v78;
            }
            if ((v68 & (v68 - 1)) != 0)
            {
              if (v68 <= v57)
                v49 = v57 % v68;
              else
                v49 = v57;
            }
            else
            {
              v49 = (v68 - 1) & v57;
            }
          }
          v91 = *(_QWORD *)(a1 + 40);
          v92 = *(_QWORD **)(v91 + 8 * v49);
          if (v92)
          {
            *i = *v92;
            goto LABEL_192;
          }
          *i = *v114;
          *v114 = i;
          *(_QWORD *)(v91 + 8 * v49) = v114;
          if (*i)
          {
            v93 = *(_QWORD *)(*i + 8);
            if ((v68 & (v68 - 1)) != 0)
            {
              if (v93 >= v68)
                v93 %= v68;
            }
            else
            {
              v93 &= v68 - 1;
            }
            v92 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v93);
LABEL_192:
            *v92 = i;
          }
          v109 = a4;
          ++*(_QWORD *)(a1 + 64);
LABEL_194:
          v94 = operator new(0x38uLL);
          *v94 = 0;
          v94[2] = v15[8];
          v95 = (char *)(v94 + 2);
          v94[3] = v117;
          *((_BYTE *)v94 + 32) = (v55 >> 4) & 7;
          *((_BYTE *)v94 + 33) = v55 & 0xF;
          v94[5] = v57;
          v94[6] = v15;
          v97 = i[3];
          v96 = i + 3;
          *v94 = v97;
          v94[1] = v96;
          *(_QWORD *)(v97 + 8) = v94;
          *v96 = v94;
          ++v96[2];
          v99 = (_QWORD *)v15[6];
          v98 = v15[7];
          if ((unint64_t)v99 >= v98)
          {
            v101 = (_QWORD *)v15[5];
            v102 = v99 - v101;
            v103 = v102 + 1;
            if ((unint64_t)(v102 + 1) >> 61)
              abort();
            v104 = v98 - (_QWORD)v101;
            if (v104 >> 2 > v103)
              v103 = v104 >> 2;
            if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
              v105 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v105 = v103;
            if (v105)
            {
              if (v105 >> 61)
                goto LABEL_239;
              v106 = (char *)operator new(8 * v105);
            }
            else
            {
              v106 = 0;
            }
            v107 = &v106[8 * v102];
            *(_QWORD *)v107 = v95;
            v100 = v107 + 8;
            if (v99 == v101)
            {
              v49 = v115;
            }
            else
            {
              v49 = v115;
              do
              {
                v108 = *--v99;
                *((_QWORD *)v107 - 1) = v108;
                v107 -= 8;
              }
              while (v99 != v101);
              v99 = (_QWORD *)v15[5];
            }
            v15[5] = v107;
            v15[6] = v100;
            v15[7] = &v106[8 * v105];
            a4 = v109;
            if (v99)
              operator delete(v99);
            a3 = v119;
          }
          else
          {
            *v99 = v95;
            v100 = v99 + 1;
            a4 = v109;
            a3 = v119;
            v49 = v115;
          }
          v15[6] = v100;
        }
      }
      else
      {
        v56 = v52 + 9;
        if ((unint64_t)v56 > v51)
          goto LABEL_6;
        v57 = *v53;
        *(_QWORD *)(a1 + 184) = v56;
        if (v15)
          goto LABEL_122;
      }
      *a3 = v57;
      ++v50;
    }
    while (v50 != v49);
  }
  for (j = (int)v123.__vftable; j; --j)
    llvm::MCPseudoProbeDecoder::buildAddress2ProbeMap(a1, v15, a3, a4);
  return 1;
}

uint64_t llvm::MCPseudoProbeDecoder::buildAddress2ProbeMap(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *v6;
  unint64_t v8;

  *(_QWORD *)(a1 + 184) = a2;
  *(_QWORD *)(a1 + 192) = a2 + a3;
  v8 = 0;
  if (a3 >= 1)
  {
    v6 = (uint64_t *)(a1 + 80);
    do
      llvm::MCPseudoProbeDecoder::buildAddress2ProbeMap(a1, v6, &v8, a4);
    while (*(_QWORD *)(a1 + 184) < *(_QWORD *)(a1 + 192));
  }
  return 1;
}

uint64_t llvm::MCPseudoProbeDecoder::buildAddress2ProbeMap(llvm::MCPseudoProbeDecoder *this, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v9[2];
  void *__p[2];
  int v11;
  unint64_t v12;

  *(_OWORD *)v9 = 0u;
  *(_OWORD *)__p = 0u;
  v11 = 1065353216;
  *((_QWORD *)this + 23) = a2;
  *((_QWORD *)this + 24) = &a2[a3];
  v12 = 0;
  if (a3 > 0)
  {
    v4 = (uint64_t *)((char *)this + 80);
    do
      llvm::MCPseudoProbeDecoder::buildAddress2ProbeMap((uint64_t)this, v4, &v12, v9);
    while (*((_QWORD *)this + 23) < *((_QWORD *)this + 24));
    v5 = __p[0];
    if (__p[0])
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
  }
  v7 = v9[0];
  v9[0] = 0;
  if (v7)
    operator delete(v7);
  return 1;
}

void llvm::MCPseudoProbeDecoder::printGUID2FuncDescMap(llvm::MCPseudoProbeDecoder *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  unint64_t v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t ***v14;
  uint64_t **v15;
  unint64_t v16;
  char *v17;
  _BYTE *v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;

  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 0x12)
  {
    *(_DWORD *)(v4 + 15) = 171598707;
    *(_OWORD *)v4 = *(_OWORD *)"Pseudo Probe Desc:\n";
    *((_QWORD *)a2 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Pseudo Probe Desc:\n", 0x13uLL);
  }
  v5 = (uint64_t *)*((_QWORD *)this + 2);
  v24 = 0;
  v25 = 0;
  v23 = &v24;
  if (!v5)
    goto LABEL_44;
  v6 = 0;
  v7 = &v24;
  while (1)
  {
    v8 = &v24;
    if (v7 == &v24)
      goto LABEL_11;
    v9 = v6;
    v10 = &v24;
    if (v6)
    {
      do
      {
        v8 = (uint64_t **)v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      do
      {
        v8 = (uint64_t **)v10[2];
        v12 = *v8 == (uint64_t *)v10;
        v10 = v8;
      }
      while (v12);
    }
    v11 = v5[2];
    if ((unint64_t)v8[4] < v11)
    {
LABEL_11:
      v12 = v6 == 0;
      if (v6)
        v13 = v8;
      else
        v13 = &v24;
      if (v6)
        v14 = (uint64_t ***)v8;
      else
        v14 = &v23;
      if (v12)
        v15 = &v24;
      else
        v15 = v8 + 1;
      if (v14[1])
        goto LABEL_35;
LABEL_29:
      v17 = (char *)operator new(0x50uLL);
      *((_QWORD *)v17 + 4) = v5[2];
      *(_OWORD *)(v17 + 40) = *(_OWORD *)(v5 + 3);
      v18 = v17 + 56;
      if (*((char *)v5 + 63) < 0)
      {
        sub_1C47EBC30(v18, (void *)v5[5], v5[6]);
      }
      else
      {
        v19 = *(_OWORD *)(v5 + 5);
        *((_QWORD *)v17 + 9) = v5[7];
        *(_OWORD *)v18 = v19;
      }
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = v13;
      *v15 = (uint64_t *)v17;
      if (*v23)
      {
        v23 = (uint64_t **)*v23;
        v17 = (char *)*v15;
      }
      sub_1C4768E74(v24, (uint64_t *)v17);
      ++v25;
      goto LABEL_35;
    }
    v15 = &v24;
    v13 = &v24;
    if (!v6)
      goto LABEL_29;
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v6;
        v16 = v6[4];
        if (v16 <= v11)
          break;
        v6 = *v13;
        v15 = v13;
        if (!*v13)
          goto LABEL_29;
      }
      if (v16 >= v11)
        break;
      v6 = v13[1];
      if (!v6)
      {
        v15 = v13 + 1;
        goto LABEL_29;
      }
    }
LABEL_35:
    v5 = (uint64_t *)*v5;
    if (!v5)
      break;
    v7 = v23;
    v6 = v24;
  }
  v20 = (uint64_t *)v23;
  if (v23 != &v24)
  {
    do
    {
      llvm::MCPseudoProbeFuncDesc::print((llvm::MCPseudoProbeFuncDesc *)(v20 + 5), a2);
      v21 = (uint64_t *)v20[1];
      if (v21)
      {
        do
        {
          v22 = (uint64_t **)v21;
          v21 = (uint64_t *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (uint64_t **)v20[2];
          v12 = *v22 == v20;
          v20 = (uint64_t *)v22;
        }
        while (!v12);
      }
      v20 = (uint64_t *)v22;
    }
    while (v22 != &v24);
  }
LABEL_44:
  sub_1C5950190((char *)v24);
}

void llvm::MCPseudoProbeDecoder::printProbeForAddress(int8x8_t *this, llvm::raw_ostream *a2, unint64_t a3)
{
  int8x8_t v3;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *i;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = this[6];
  if (v3)
  {
    v6 = (uint8x8_t)vcnt_s8(v3);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      v7 = a3;
      if (*(_QWORD *)&v3 <= a3)
        v7 = a3 % *(_QWORD *)&v3;
    }
    else
    {
      v7 = (*(_QWORD *)&v3 - 1) & a3;
    }
    v8 = *(_QWORD **)(*(_QWORD *)&this[5] + 8 * v7);
    if (v8)
    {
      for (i = (_QWORD *)*v8; i; i = (_QWORD *)*i)
      {
        v10 = i[1];
        if (v10 == a3)
        {
          if (i[2] == a3)
          {
            v11 = i + 3;
            v12 = (_QWORD *)i[4];
            if (v12 != i + 3)
            {
              do
              {
                v13 = *((_QWORD *)a2 + 4);
                if ((unint64_t)(*((_QWORD *)a2 + 3) - v13) > 9)
                {
                  *(_WORD *)(v13 + 8) = 2362;
                  *(_QWORD *)v13 = *(_QWORD *)" [Probe]:\t";
                  *((_QWORD *)a2 + 4) += 10;
                }
                else
                {
                  llvm::raw_ostream::write(a2, " [Probe]:\t", 0xAuLL);
                }
                llvm::MCDecodedPseudoProbe::print((unint64_t)(v12 + 2), a2, this, 1);
                v12 = (_QWORD *)v12[1];
              }
              while (v12 != v11);
            }
            return;
          }
        }
        else
        {
          if (v6.u32[0] > 1uLL)
          {
            if (v10 >= *(_QWORD *)&v3)
              v10 %= *(_QWORD *)&v3;
          }
          else
          {
            v10 &= *(_QWORD *)&v3 - 1;
          }
          if (v10 != v7)
            return;
        }
      }
    }
  }
}

void llvm::MCPseudoProbeDecoder::printProbesForAllAddresses(int8x8_t *this, llvm::raw_ostream *a2)
{
  _QWORD *v2;
  llvm::raw_ostream *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;

  v2 = (_QWORD *)this[7];
  if (!v2)
  {
    std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
    return;
  }
  v3 = a2;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v7 = v2[2];
    v32 = &v32;
    v33 = &v32;
    v8 = v2[4];
    if ((_QWORD *)v8 == v2 + 3)
    {
      v10 = 0;
    }
    else
    {
      v9 = v6;
      v10 = 0;
      v11 = &v32;
      do
      {
        v12 = v11;
        v11 = operator new(0x38uLL);
        *v11 = 0;
        v11[1] = 0;
        v13 = *(_QWORD *)(v8 + 48);
        v14 = *(_OWORD *)(v8 + 32);
        *((_OWORD *)v11 + 1) = *(_OWORD *)(v8 + 16);
        *((_OWORD *)v11 + 2) = v14;
        v11[6] = v13;
        *v11 = v12;
        v11[1] = &v32;
        v12[1] = v11;
        ++v10;
        v8 = *(_QWORD *)(v8 + 8);
      }
      while ((_QWORD *)v8 != v2 + 3);
      v32 = v11;
      v6 = v9;
      v3 = a2;
    }
    v34 = v10;
    if (v5 < v6)
    {
      *v5++ = v7;
      if (!v10)
        goto LABEL_29;
LABEL_27:
      v23 = v32;
      v22 = v33;
      v24 = *v33;
      *(_QWORD *)(v24 + 8) = v32[1];
      *(_QWORD *)v23[1] = v24;
      v34 = 0;
      if (v22 != &v32)
      {
        do
        {
          v25 = (_QWORD *)v22[1];
          operator delete(v22);
          v22 = v25;
        }
        while (v25 != &v32);
      }
      goto LABEL_29;
    }
    v15 = v5 - v4;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      abort();
    if (((char *)v6 - (char *)v4) >> 2 > v16)
      v16 = ((char *)v6 - (char *)v4) >> 2;
    if ((unint64_t)((char *)v6 - (char *)v4) >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
    {
      if (v17 >> 61)
        sub_1C4764EE4();
      v18 = (char *)operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = (unint64_t *)&v18[8 * v15];
    *v19 = v7;
    v20 = v19 + 1;
    while (v5 != v4)
    {
      v21 = *--v5;
      *--v19 = v21;
    }
    v6 = (unint64_t *)&v18[8 * v17];
    if (v4)
    {
      operator delete(v4);
      v10 = v34;
    }
    v4 = v19;
    v5 = v20;
    if (v10)
      goto LABEL_27;
LABEL_29:
    v2 = (_QWORD *)*v2;
  }
  while (v2);
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  if (v4 != v5)
  {
    v26 = v4;
    do
    {
      v27 = *v26;
      v28 = *((_QWORD *)v3 + 4);
      if ((unint64_t)(*((_QWORD *)v3 + 3) - v28) > 8)
      {
        *(_BYTE *)(v28 + 8) = 9;
        *(_QWORD *)v28 = *(_QWORD *)"Address:\t";
        *((_QWORD *)v3 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v3, "Address:\t", 9uLL);
      }
      sub_1C5E21910(v3, v27, 0, 0, 0);
      v29 = (_BYTE *)*((_QWORD *)v3 + 4);
      if (*((_BYTE **)v3 + 3) == v29)
      {
        llvm::raw_ostream::write(v3, "\n", 1uLL);
      }
      else
      {
        *v29 = 10;
        ++*((_QWORD *)v3 + 4);
      }
      llvm::MCPseudoProbeDecoder::printProbeForAddress(this, v3, v27);
      ++v26;
    }
    while (v26 != v5);
  }
  if (v4)
    operator delete(v4);
}

uint64_t llvm::MCPseudoProbeDecoder::getCallProbeForAddr(int8x8_t *this, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = this[6];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*(_QWORD *)&this[5] + 8 * v4);
  if (!v5)
    return 0;
  v6 = (_QWORD *)*v5;
  if (!v6)
    return 0;
  while (1)
  {
    v7 = v6[1];
    if (v7 == a2)
      break;
    if (v3.u32[0] > 1uLL)
    {
      if (v7 >= *(_QWORD *)&v2)
        v7 %= *(_QWORD *)&v2;
    }
    else
    {
      v7 &= *(_QWORD *)&v2 - 1;
    }
    if (v7 != v4)
      return 0;
LABEL_16:
    v6 = (_QWORD *)*v6;
    if (!v6)
      return 0;
  }
  if (v6[2] != a2)
    goto LABEL_16;
  v9 = v6[4];
  if ((_QWORD *)v9 == v6 + 3)
    return 0;
  result = 0;
  do
  {
    if (*(unsigned __int8 *)(v9 + 33) - 1 < 2)
      result = v9 + 16;
    v9 = *(_QWORD *)(v9 + 8);
  }
  while ((_QWORD *)v9 != v6 + 3);
  return result;
}

_QWORD *llvm::MCPseudoProbeDecoder::getFuncDescForGUID(llvm::MCPseudoProbeDecoder *this, unint64_t a2)
{
  return sub_1C59500E0(this, a2) + 3;
}

unint64_t llvm::MCPseudoProbeDecoder::getInlineContextForProbe(_QWORD *a1, unint64_t *a2, unint64_t a3, int a4)
{
  unint64_t result;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  int v18;

  result = llvm::MCDecodedPseudoProbe::getInlineContext((unint64_t)a2, a3, a1);
  if (a4)
  {
    v9 = sub_1C59500E0(a1, *a2);
    v10 = a2[1];
    v13 = (_QWORD *)v9[5];
    v11 = v9 + 5;
    v12 = v13;
    v14 = *((_BYTE *)v11 + 23);
    v15 = v14;
    if (v14 >= 0)
      v12 = v11;
    v16 = v14 & 0x7F;
    if (v15 < 0)
      v16 = v11[1];
    *(_QWORD *)&v17 = v12;
    *((_QWORD *)&v17 + 1) = v16;
    v18 = v10;
    return sub_1C594D96C(a3, &v17);
  }
  return result;
}

_QWORD *llvm::MCPseudoProbeDecoder::getInlinerDescForProbe(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 80);
  if (v2)
    return sub_1C59500E0(a1, v2) + 3;
  else
    return 0;
}

_QWORD *sub_1C594FBB8(uint64_t *a1, unint64_t a2, unsigned int a3, _OWORD *a4, uint64_t *a5)
{
  unint64_t v5;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v16;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t prime;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void *v39;

  v9 = a3 ^ a2;
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v5 = a3 ^ a2;
      if (v9 >= v10)
        v5 = v9 % v10;
    }
    else
    {
      v5 = (v10 - 1) & v9;
    }
    v12 = *(void ***)(*a1 + 8 * v5);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2 && *((_DWORD *)v13 + 6) == a3)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v5)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v16 = a1 + 2;
  v13 = operator new(0x28uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *a4;
  v17 = *a5;
  *a5 = 0;
  v13[4] = v17;
  v18 = (float)(unint64_t)(a1[3] + 1);
  v19 = *((float *)a1 + 8);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = (int8x8_t)v22;
    else
      prime = (int8x8_t)v21;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v10 = a1[1];
    }
    if (*(_QWORD *)&prime > v10)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v10)
    {
      v30 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (*(_QWORD *)&prime <= v30)
        prime = (int8x8_t)v30;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            sub_1C4764EE4();
          v24 = operator new(8 * *(_QWORD *)&prime);
          v25 = (void *)*a1;
          *a1 = (uint64_t)v24;
          if (v25)
            operator delete(v25);
          v26 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v26++) = 0;
          while (*(_QWORD *)&prime != v26);
          v27 = (_QWORD *)*v16;
          if (*v16)
          {
            v28 = v27[1];
            v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(_QWORD *)&prime)
                v28 %= *(_QWORD *)&prime;
            }
            else
            {
              v28 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v28) = v16;
            v33 = (_QWORD *)*v27;
            if (*v27)
            {
              do
              {
                v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&prime)
                    v34 %= *(_QWORD *)&prime;
                }
                else
                {
                  v34 &= *(_QWORD *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v34))
                  {
                    *(_QWORD *)(*a1 + 8 * v34) = v27;
                    goto LABEL_59;
                  }
                  *v27 = *v33;
                  *v33 = **(_QWORD **)(*a1 + 8 * v34);
                  **(_QWORD **)(*a1 + 8 * v34) = v33;
                  v33 = v27;
                }
                v34 = v28;
LABEL_59:
                v27 = v33;
                v33 = (_QWORD *)*v33;
                v28 = v34;
              }
              while (v33);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_63;
        }
        v39 = (void *)*a1;
        *a1 = 0;
        if (v39)
          operator delete(v39);
        v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_63:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v5 = v9 % v10;
      else
        v5 = v9;
    }
    else
    {
      v5 = (v10 - 1) & v9;
    }
  }
  v35 = *a1;
  v36 = *(_QWORD **)(*a1 + 8 * v5);
  if (v36)
  {
    *v13 = *v36;
LABEL_76:
    *v36 = v13;
    goto LABEL_77;
  }
  *v13 = *v16;
  *v16 = v13;
  *(_QWORD *)(v35 + 8 * v5) = v16;
  if (*v13)
  {
    v37 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v37 >= v10)
        v37 %= v10;
    }
    else
    {
      v37 &= v10 - 1;
    }
    v36 = (_QWORD *)(*a1 + 8 * v37);
    goto LABEL_76;
  }
LABEL_77:
  ++a1[3];
  return v13;
}

_OWORD *sub_1C594FFA8(void **a1, _OWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 59)
      sub_1C4764EE4();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v4];
  v12 = a2[1];
  *(_OWORD *)v11 = *a2;
  *((_OWORD *)v11 + 1) = v12;
  v13 = v11 + 32;
  if (v2 != v3)
  {
    do
    {
      v14 = *((_OWORD *)v2 - 1);
      *((_OWORD *)v11 - 2) = *((_OWORD *)v2 - 2);
      *((_OWORD *)v11 - 1) = v14;
      v11 -= 32;
      v2 -= 32;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v13;
  a1[2] = &v10[32 * v9];
  if (v2)
    operator delete(v2);
  return v13;
}

uint64_t *sub_1C5950088(uint64_t a1, _QWORD *a2, unint64_t a3, unsigned int a4)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unsigned int v9;

  v6 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = v5[4];
        if (v8 <= a3)
          break;
LABEL_3:
        v5 = (uint64_t *)*v7;
        result = v7;
        if (!*v7)
          goto LABEL_11;
      }
      if (v8 >= a3)
      {
        v9 = *((_DWORD *)v7 + 10);
        if (v9 > a4)
          goto LABEL_3;
        if (v9 >= a4)
          goto LABEL_11;
      }
      result = v7 + 1;
      v5 = (uint64_t *)v7[1];
      if (!v5)
        goto LABEL_11;
    }
  }
  v7 = result;
LABEL_11:
  *a2 = v7;
  return result;
}

_QWORD *sub_1C59500E0(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_1C5950190(char *a1)
{
  if (a1)
  {
    sub_1C5950190(*(_QWORD *)a1);
    sub_1C5950190(*((_QWORD *)a1 + 1));
    if (a1[79] < 0)
      operator delete(*((void **)a1 + 7));
    operator delete(a1);
  }
}

uint64_t llvm::MCRegisterInfo::getMatchingSuperReg(uint64_t *a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  int v15;

  v4 = a1[6];
  v5 = *a1;
  v6 = (unsigned __int16 *)(v4 + 2 * *(unsigned int *)(*a1 + 24 * a2 + 8));
  v7 = *v6;
  if (*v6)
  {
    v8 = v7 + a2;
    while (1)
    {
      v7 = v8;
      v9 = v8 >> 3;
      if (v9 < *(unsigned __int16 *)(a4 + 22)
        && ((*(unsigned __int8 *)(*(_QWORD *)(a4 + 8) + v9) >> (v7 & 7)) & 1) != 0)
      {
        v11 = *(unsigned int *)(v5 + 24 * v7 + 4);
        v12 = *(unsigned __int16 *)(v4 + 2 * v11);
        if (*(_WORD *)(v4 + 2 * v11))
        {
          LOWORD(v12) = v12 + v7;
          v13 = (unsigned __int16 *)(a1[10] + 2 * *(unsigned int *)(v5 + 24 * v7 + 12));
          v14 = (unsigned __int16 *)(v4 + 2 + 2 * v11);
          while (*v13 != a3)
          {
            v15 = *v14++;
            LOWORD(v12) = v15 + v12;
            ++v13;
            if (!v15)
            {
              v12 = 0;
              goto LABEL_13;
            }
          }
          v12 = (unsigned __int16)v12;
        }
LABEL_13:
        if (v12 == a2)
          break;
      }
      v10 = v6[1];
      ++v6;
      v8 = v10 + v7;
      if (!v10)
        return 0;
    }
  }
  return v7;
}

uint64_t llvm::MCRegisterInfo::getSubReg(_QWORD *a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  int v9;

  v3 = a1[6];
  v4 = *(unsigned int *)(*a1 + 24 * a2 + 4);
  if (!*(_WORD *)(v3 + 2 * v4))
    return 0;
  v5 = *(_WORD *)(v3 + 2 * v4) + a2;
  v6 = (unsigned __int16 *)(a1[10] + 2 * *(unsigned int *)(*a1 + 24 * a2 + 12));
  v7 = (unsigned __int16 *)(v3 + 2 * v4 + 2);
  while (*v6 != a3)
  {
    v9 = *v7++;
    v5 += v9;
    ++v6;
    if (!v9)
      return 0;
  }
  return v5;
}

uint64_t llvm::MCRegisterInfo::getSubRegIndex(_QWORD *a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  int v8;

  v3 = a1[6];
  v4 = *(unsigned int *)(*a1 + 24 * a2 + 4);
  if (!*(_WORD *)(v3 + 2 * v4))
    return 0;
  v5 = *(_WORD *)(v3 + 2 * v4) + a2;
  v6 = (unsigned __int16 *)(a1[10] + 2 * *(unsigned int *)(*a1 + 24 * a2 + 12));
  v7 = (unsigned __int16 *)(v3 + 2 * v4 + 2);
  while (a3 != v5)
  {
    v8 = *v7++;
    v5 += v8;
    ++v6;
    if (!v8)
      return 0;
  }
  return *v6;
}

uint64_t llvm::MCRegisterInfo::getSubRegIdxSize(llvm::MCRegisterInfo *this, unsigned int a2)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 11) + 4 * a2 + 2);
}

uint64_t llvm::MCRegisterInfo::getSubRegIdxOffset(llvm::MCRegisterInfo *this, unsigned int a2)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 11) + 4 * a2);
}

uint64_t llvm::MCRegisterInfo::getDwarfRegNum(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  unsigned int *v9;
  _DWORD *v10;
  unsigned int v11;

  v3 = 128;
  if (a3)
    v3 = 136;
  v4 = *(_DWORD **)(a1 + v3);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = 112;
  if (a3)
    v5 = 116;
  v6 = *(unsigned int *)(a1 + v5);
  v7 = &v4[2 * v6];
  if ((_DWORD)v6)
  {
    do
    {
      v8 = v6 >> 1;
      v9 = &v4[2 * (v6 >> 1)];
      v11 = *v9;
      v10 = v9 + 2;
      v6 += ~(v6 >> 1);
      if (v11 < a2)
        v4 = v10;
      else
        v6 = v8;
    }
    while (v6);
  }
  if (v4 != v7 && *v4 == a2)
    return v4[1];
  else
    return 0xFFFFFFFFLL;
}

uint64_t llvm::MCRegisterInfo::getDwarfRegNumFromDwarfEHRegNum(llvm::MCRegisterInfo *this, uint64_t a2)
{
  _DWORD *v2;
  unint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  unsigned int *v6;
  _DWORD *v7;
  unsigned int v8;
  _DWORD *v9;
  unsigned int v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  unsigned int *v14;
  _DWORD *v15;
  unsigned int v16;

  v2 = (_DWORD *)*((_QWORD *)this + 19);
  if (v2)
  {
    v3 = *((unsigned int *)this + 31);
    v4 = &v2[2 * v3];
    if ((_DWORD)v3)
    {
      do
      {
        v5 = v3 >> 1;
        v6 = &v2[2 * (v3 >> 1)];
        v8 = *v6;
        v7 = v6 + 2;
        v3 += ~(v3 >> 1);
        if (v8 < a2)
          v2 = v7;
        else
          v3 = v5;
      }
      while (v3);
    }
    if (v2 != v4 && *v2 == (_DWORD)a2)
    {
      v9 = (_DWORD *)*((_QWORD *)this + 16);
      if (!v9)
        return 0xFFFFFFFFLL;
      v10 = v2[1];
      v11 = *((unsigned int *)this + 28);
      v12 = &v9[2 * v11];
      if ((_DWORD)v11)
      {
        do
        {
          v13 = v11 >> 1;
          v14 = &v9[2 * (v11 >> 1)];
          v16 = *v14;
          v15 = v14 + 2;
          v11 += ~(v11 >> 1);
          if (v16 < v10)
            v9 = v15;
          else
            v11 = v13;
        }
        while (v11);
      }
      if (v9 != v12 && *v9 == v10)
        return v9[1];
      else
        return 0xFFFFFFFFLL;
    }
  }
  return a2;
}

BOOL llvm::MCRegisterInfo::regsOverlap(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  __int16 v4;
  uint64_t v5;
  _WORD *v6;
  unsigned __int16 *v7;
  __int16 v8;
  unsigned __int16 v9;
  unint64_t v10;
  __int16 v11;
  _WORD *v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  int v15;
  int v16;

  v3 = *(unsigned int *)(*a1 + 24 * a2 + 16);
  v4 = v3 & 0xF;
  v5 = a1[6];
  v6 = (_WORD *)(v5 + ((v3 >> 3) & 0x1FFFFFFE));
  v8 = *v6;
  v7 = v6 + 1;
  v9 = v8 + v4 * a2;
  v10 = *(unsigned int *)(*a1 + 24 * a3 + 16);
  v11 = v10 & 0xF;
  v12 = (_WORD *)(v5 + ((v10 >> 3) & 0x1FFFFFFE));
  v13 = *v12 + v11 * a3;
LABEL_2:
  v14 = v13;
  ++v12;
  do
  {
    v15 = v9;
    if (v9 == v13)
      break;
    if (v9 >= v13)
    {
      v13 += *v12;
      if (*v12)
        goto LABEL_2;
      return v15 == v14;
    }
    v16 = *v7++;
    v9 += v16;
  }
  while (v16);
  return v15 == v14;
}

uint64_t llvm::MCSchedModel::computeInstrLatency(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 *v4;
  uint64_t v5;
  unsigned int v6;

  v2 = *(unsigned __int16 *)(a2 + 16);
  if (!*(_WORD *)(a2 + 16))
    return 0;
  v3 = result;
  LODWORD(result) = 0;
  v4 = (__int16 *)(*(_QWORD *)(v3 + 144) + 4 * *(unsigned __int16 *)(a2 + 14));
  while (1)
  {
    v6 = *v4;
    v4 += 2;
    v5 = v6;
    if ((v6 & 0x80000000) != 0)
      break;
    if ((int)result <= (int)v5)
      result = v5;
    else
      result = result;
    if (!--v2)
      return result;
  }
  return v5;
}

uint64_t llvm::MCSchedModel::computeInstrLatency(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  __int16 *v6;
  uint64_t v7;
  unsigned int v8;

  v3 = *(_QWORD *)(a1 + 40);
  if ((~*(unsigned __int16 *)(v3 + 24 * a3 + 8) & 0x1FFF) == 0)
    return 0;
  v4 = *(unsigned __int16 *)(v3 + 24 * a3 + 16);
  if (!*(_WORD *)(v3 + 24 * a3 + 16))
    return 0;
  LODWORD(result) = 0;
  v6 = (__int16 *)(*(_QWORD *)(a2 + 144) + 4 * *(unsigned __int16 *)(v3 + 24 * a3 + 14));
  while (1)
  {
    v8 = *v6;
    v6 += 2;
    v7 = v8;
    if ((v8 & 0x80000000) != 0)
      break;
    if ((int)result <= (int)v7)
      result = v7;
    else
      result = result;
    if (!--v4)
      return result;
  }
  return v7;
}

uint64_t llvm::MCSchedModel::computeInstrLatency(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned int *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int16 *v13;
  uint64_t v14;
  unsigned int v15;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_WORD *)(v5 + 24 * *(unsigned __int16 *)(*a3 + 48 * *a4 + 6) + 8) & 0x1FFF;
  if (v6 == 0x1FFF)
    return 0;
  if (v6 == 8190)
  {
    do
    {
      v8 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
      v9 = *(_QWORD *)(a1 + 40);
    }
    while ((*(_WORD *)(v9 + 24 * v8 + 8) & 0x1FFF) == 0x1FFE);
    v10 = v9 + 24 * v8;
  }
  else
  {
    v10 = v5 + 24 * *(unsigned __int16 *)(*a3 + 48 * *a4 + 6);
  }
  v11 = *(unsigned __int16 *)(v10 + 16);
  if (!*(_WORD *)(v10 + 16))
    return 0;
  LODWORD(result) = 0;
  v13 = (__int16 *)(a2[18] + 4 * *(unsigned __int16 *)(v10 + 14));
  while (1)
  {
    v15 = *v13;
    v13 += 2;
    v14 = v15;
    if ((v15 & 0x80000000) != 0)
      break;
    if ((int)result <= (int)v14)
      result = v14;
    else
      result = result;
    if (!--v11)
      return result;
  }
  return v14;
}

double llvm::MCSchedModel::getReciprocalThroughput(uint64_t a1, _WORD *a2, double a3, double a4)
{
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  double v7;
  char v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *(_QWORD *)(a1 + 160);
  if (a2[6])
  {
    v5 = (unsigned __int16 *)(*(_QWORD *)(a1 + 136) + 4 * (unsigned __int16)a2[5]);
    v6 = &v5[2 * (unsigned __int16)a2[6]];
    v7 = 0.0;
    v8 = 1;
    do
    {
      while (1)
      {
        v9 = v5[1];
        if (!v5[1])
          break;
        v10 = *v5;
        v5 += 2;
        LODWORD(a4) = *(_DWORD *)(*(_QWORD *)(v4 + 32) + 32 * v10 + 8);
        a4 = (double)*(unint64_t *)&a4 / (double)v9;
        if (v8 & 1 | (a4 < v7))
          v7 = a4;
        v8 = 0;
        if (v5 == v6)
          return 1.0 / v7;
      }
      v5 += 2;
    }
    while (v5 != v6);
    if ((v8 & 1) != 0)
      goto LABEL_11;
    return 1.0 / v7;
  }
  else
  {
LABEL_11:
    LODWORD(a4) = *(_DWORD *)v4;
    return (double)(a2[4] & 0x1FFF) / (double)*(unint64_t *)&a4;
  }
}

double llvm::MCSchedModel::getReciprocalThroughput(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4, double a5, double a6)
{
  uint64_t v8;
  int v9;
  unsigned int v11;
  uint64_t v12;
  _WORD *v13;

  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_WORD *)(v8 + 24 * *(unsigned __int16 *)(*a3 + 48 * *a4 + 6) + 8) & 0x1FFF;
  if (v9 == 0x1FFF)
  {
    LODWORD(a5) = *(_DWORD *)a1;
    return 1.0 / (double)*(unint64_t *)&a5;
  }
  else
  {
    if (v9 == 8190)
    {
      do
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
        v12 = *(_QWORD *)(a1 + 40);
      }
      while ((*(_WORD *)(v12 + 24 * v11 + 8) & 0x1FFF) == 0x1FFE);
      v13 = (_WORD *)(v12 + 24 * v11);
    }
    else
    {
      v13 = (_WORD *)(v8 + 24 * *(unsigned __int16 *)(*a3 + 48 * *a4 + 6));
    }
    return llvm::MCSchedModel::getReciprocalThroughput(a2, v13, a5, a6);
  }
}

double llvm::MCSchedModel::getReciprocalThroughput(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int8x8_t *v6;
  int8x8_t *v7;
  double v8;
  char v9;
  uint8x8_t v10;
  double v11;

  v2 = *(_QWORD *)(a2 + 96) + 10 * a1;
  v3 = *(unsigned __int16 *)(v2 + 2);
  v4 = *(unsigned __int16 *)(v2 + 4);
  if (v3 == v4)
    return 1.0;
  v5 = *(_QWORD *)(a2 + 72);
  v6 = (int8x8_t *)(v5 + 24 * v4);
  v7 = (int8x8_t *)(v5 + 24 * v3);
  v8 = 0.0;
  v9 = 1;
  do
  {
    while (v7->i32[0])
    {
      v10 = (uint8x8_t)vcnt_s8(v7[1]);
      v10.i16[0] = vaddlv_u8(v10);
      v11 = (double)v10.u32[0] / (double)v7->u32[0];
      if (v9 & 1 | (v11 < v8))
        v8 = v11;
      v7 += 3;
      v9 = 0;
      if (v7 == v6)
        return 1.0 / v8;
    }
    v7 += 3;
  }
  while (v7 != v6);
  if ((v9 & 1) != 0)
    return 1.0;
  return 1.0 / v8;
}

uint64_t llvm::MCSchedModel::getForwardingDelayCycles(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  int *v5;

  if (!a2)
    return 0;
  v3 = 0;
  v4 = 12 * a2;
  v5 = (int *)(a1 + 8);
  do
  {
    if (*(v5 - 1) == a3 && *v5 < v3)
      v3 = *v5;
    v5 += 3;
    v4 -= 12;
  }
  while (v4);
  if (v3 >= 0)
    return v3;
  else
    return -v3;
}

double llvm::MCSection::MCSection(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  double result;

  *(_QWORD *)a1 = &unk_1E81820A0;
  *(_QWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 44) &= 0xF8u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = -1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 96) = 15;
  *(_BYTE *)(a1 + 98) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 104;
  *(_QWORD *)(a1 + 112) = a1 + 104;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x100000000;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_QWORD *)&result = 0x200000000;
  *(_QWORD *)(a1 + 160) = 0x200000000;
  *(_QWORD *)(a1 + 200) = a3;
  *(_QWORD *)(a1 + 208) = a4;
  *(_DWORD *)(a1 + 216) = a2;
  *(_DWORD *)(a1 + 220) = a5;
  return result;
}

void llvm::MCSection::hasEnded(llvm::MCSection *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v2 = *(_QWORD *)v1;
    v3 = *(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF8;
    if (!v3 && (*(_DWORD *)(v1 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v1 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v1 + 24));
      v2 = *(_QWORD *)v1 & 7 | v3;
      *(_QWORD *)v1 = v2;
    }
    if (v3 && (v2 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v1 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v1 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v1 + 24));
      *(_QWORD *)v1 = *(_QWORD *)v1 & 7 | v4;
    }
  }
}

void llvm::MCSection::~MCSection(llvm::MCSection *this)
{
  char *v2;
  char *v3;
  llvm::MCSection *v4;
  uint64_t v5;
  llvm::MCSection *v6;

  *(_QWORD *)this = &unk_1E81820A0;
  v2 = (char *)*((_QWORD *)this + 19);
  if (v2 != (char *)this + 168)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 15);
  if (v3 != (char *)this + 136)
    free(v3);
  v4 = (llvm::MCSection *)*((_QWORD *)this + 14);
  if (v4 != (llvm::MCSection *)((char *)this + 104))
  {
    do
    {
      v5 = *(_QWORD *)v4;
      v6 = (llvm::MCSection *)*((_QWORD *)v4 + 1);
      *(_QWORD *)v6 = *(_QWORD *)v4;
      *(_QWORD *)(v5 + 8) = v6;
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      llvm::MCFragment::destroy((uint64_t)v4);
      v4 = v6;
    }
    while (v6 != (llvm::MCSection *)((char *)this + 104));
  }
}

uint64_t *llvm::MCSection::getSubsectionInsertionPoint(llvm::MCSection *this, unsigned int a2)
{
  uint64_t v4;
  _DWORD *v5;
  char *v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  unsigned int v13;
  _DWORD *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;

  v4 = *((unsigned int *)this + 32);
  if (!a2)
  {
    if (!(_DWORD)v4)
      return (uint64_t *)((char *)this + 104);
    v7 = 0;
    v6 = (char *)this + 120;
    v5 = (_DWORD *)*((_QWORD *)this + 15);
    goto LABEL_6;
  }
  v6 = (char *)this + 120;
  v5 = (_DWORD *)*((_QWORD *)this + 15);
  v7 = a2;
  if ((_DWORD)v4)
  {
LABEL_6:
    v8 = v5;
    v9 = *((unsigned int *)this + 32);
    do
    {
      v10 = v9 >> 1;
      v11 = &v8[4 * (v9 >> 1)];
      v13 = *v11;
      v12 = v11 + 4;
      v9 += ~(v9 >> 1);
      if (v13 < a2)
        v8 = v12;
      else
        v9 = v10;
    }
    while (v9);
    goto LABEL_11;
  }
  v4 = 0;
  v8 = (_DWORD *)*((_QWORD *)this + 15);
LABEL_11:
  v14 = &v5[4 * v4];
  if (v8 == v14)
  {
    v15 = 0;
  }
  else
  {
    v15 = *v8 == a2;
    v8 += 4 * v15;
  }
  if (v8 == v14)
    v16 = (uint64_t *)((char *)this + 104);
  else
    v16 = (uint64_t *)*((_QWORD *)v8 + 1);
  if (!a2)
    v15 = 1;
  if (!v15)
  {
    v17 = operator new();
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)(v17 + 16) = 0u;
    *(_QWORD *)(v17 + 32) = -1;
    *(_QWORD *)(v17 + 40) = 0;
    *(_BYTE *)(v17 + 48) = 1;
    *(_DWORD *)(v17 + 49) = 0;
    *(_QWORD *)(v17 + 56) = 0;
    *(_QWORD *)(v17 + 64) = v17 + 88;
    *(_OWORD *)(v17 + 72) = xmmword_1C677F680;
    *(_QWORD *)(v17 + 120) = v17 + 136;
    *(_QWORD *)(v17 + 128) = 0x400000000;
    v18 = *(_QWORD *)v6;
    v19 = *((unsigned int *)v6 + 2);
    if ((_DWORD *)(*(_QWORD *)v6 + 16 * v19) == v8)
    {
      if (v19 >= *((_DWORD *)v6 + 3))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, (uint64_t)(v6 + 16), v19 + 1, 16);
        v18 = *(_QWORD *)v6;
        v19 = *((unsigned int *)v6 + 2);
      }
      v26 = (_QWORD *)(v18 + 16 * v19);
      *v26 = v7;
      v26[1] = v17;
      ++*((_DWORD *)v6 + 2);
    }
    else
    {
      v20 = ((uint64_t)v8 - v18) >> 4;
      if (v19 >= *((_DWORD *)v6 + 3))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v6, (uint64_t)(v6 + 16), v19 + 1, 16);
        v18 = *(_QWORD *)v6;
        v19 = *((unsigned int *)v6 + 2);
      }
      v21 = v18 + 16 * v20;
      *(_OWORD *)(v18 + 16 * v19) = *(_OWORD *)(v18 + 16 * v19 - 16);
      v22 = *((unsigned int *)v6 + 2);
      v23 = *(_QWORD *)v6 + 16 * v22 - 16;
      if (v23 != v21)
      {
        v24 = *(_QWORD *)v6 + 16 * v22 - 16;
        do
        {
          v25 = *(_DWORD *)(v24 - 16);
          v24 -= 16;
          *(_DWORD *)v23 = v25;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)(v23 - 8);
          v23 = v24;
        }
        while (v24 != v21);
      }
      *((_DWORD *)v6 + 2) = v22 + 1;
      *(_DWORD *)v21 = v7;
      *(_QWORD *)(v21 + 8) = v17;
    }
    v27 = *v16;
    *(_QWORD *)v17 = *v16;
    *(_QWORD *)(v17 + 8) = v16;
    *(_QWORD *)(v27 + 8) = v17;
    *v16 = v17;
    *(_QWORD *)(v17 + 16) = this;
    *(_DWORD *)(v17 + 44) = a2;
  }
  return v16;
}

_DWORD *llvm::MCSection::addPendingLabel(_DWORD *this, llvm::MCSymbol *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = (uint64_t)this;
  v6 = this[40];
  if (v6 >= this[41])
  {
    this = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(this + 38), (uint64_t)(this + 42), v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(v5 + 160);
  }
  v7 = (_QWORD *)(*(_QWORD *)(v5 + 152) + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  ++*(_DWORD *)(v5 + 160);
  return this;
}

_DWORD *llvm::MCSection::flushPendingLabels(_DWORD *result, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = result[40];
  if (v4)
  {
    v8 = result;
    v9 = (_DWORD *)*((_QWORD *)result + 19);
    v10 = v9;
    do
    {
      if (v10[2] == a4)
      {
        v11 = *(uint64_t **)v10;
        *v11 = **(_QWORD **)v10 & 7 | a2;
        v11[3] = a3;
        *((_DWORD *)v11 + 2) = v11[1] & 0xFFFFE3FF | 0x400;
        v9 = (_DWORD *)*((_QWORD *)v8 + 19);
        v12 = v8[40];
        v13 = (char *)&v9[4 * v12] - (char *)(v10 + 4);
        if (v13)
        {
          result = memmove(v10, v10 + 4, v13 - 4);
          LODWORD(v12) = v8[40];
          v9 = (_DWORD *)*((_QWORD *)v8 + 19);
        }
        v10 -= 4;
        v4 = v12 - 1;
        v8[40] = v4;
      }
      v10 += 4;
    }
    while (v10 != &v9[4 * v4]);
  }
  return result;
}

uint64_t llvm::MCSection::flushPendingLabels(uint64_t this)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t *SubsectionInsertionPoint;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(this + 160))
  {
    v1 = this;
    v2 = *(_DWORD **)(this + 152);
    do
    {
      SubsectionInsertionPoint = llvm::MCSection::getSubsectionInsertionPoint((llvm::MCSection *)v1, v2[2]);
      this = operator new();
      *(_OWORD *)this = 0u;
      *(_OWORD *)(this + 16) = 0u;
      *(_QWORD *)(this + 32) = -1;
      *(_QWORD *)(this + 40) = 0;
      *(_BYTE *)(this + 48) = 1;
      *(_DWORD *)(this + 49) = 0;
      *(_QWORD *)(this + 56) = 0;
      *(_QWORD *)(this + 64) = this + 88;
      *(_OWORD *)(this + 72) = xmmword_1C677F680;
      *(_QWORD *)(this + 120) = this + 136;
      *(_QWORD *)(this + 128) = 0x400000000;
      v4 = *SubsectionInsertionPoint;
      *(_QWORD *)this = *SubsectionInsertionPoint;
      *(_QWORD *)(this + 8) = SubsectionInsertionPoint;
      *(_QWORD *)(v4 + 8) = this;
      *SubsectionInsertionPoint = this;
      *(_QWORD *)(this + 16) = v1;
      v5 = *(_DWORD *)(v1 + 160);
      if (!v5)
        break;
      v6 = this;
      v7 = v2[2];
      v2 = *(_DWORD **)(v1 + 152);
      v8 = v2;
      do
      {
        if (v8[2] == v7)
        {
          v9 = *(uint64_t **)v8;
          *v9 = **(_QWORD **)v8 & 7 | v6;
          v9[3] = 0;
          *((_DWORD *)v9 + 2) = v9[1] & 0xFFFFE3FF | 0x400;
          v2 = *(_DWORD **)(v1 + 152);
          v10 = *(unsigned int *)(v1 + 160);
          v11 = (char *)&v2[4 * v10] - (char *)(v8 + 4);
          if (v11)
          {
            this = (uint64_t)memmove(v8, v8 + 4, v11 - 4);
            LODWORD(v10) = *(_DWORD *)(v1 + 160);
            v2 = *(_DWORD **)(v1 + 152);
          }
          v8 -= 4;
          v5 = v10 - 1;
          *(_DWORD *)(v1 + 160) = v5;
        }
        v8 += 4;
      }
      while (v8 != &v2[4 * v5]);
    }
    while (v5);
  }
  return this;
}

uint64_t llvm::MCSectionELF::shouldOmitSectionDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 232) == -1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 64))(a4);
  else
    return 0;
}

llvm::raw_ostream *sub_1C59510DC(llvm::raw_ostream *a1, unsigned __int8 *a2, int64_t a3)
{
  unsigned __int8 *v4;
  llvm::raw_ostream *result;
  _BYTE *v7;
  unsigned __int8 *v8;
  int v9;
  _WORD *v10;
  llvm::raw_ostream *v11;
  const char *v12;
  _BYTE *v13;
  _BYTE *v14;
  _WORD *v15;
  char v16;
  char *v17;
  _BYTE *v18;
  _QWORD v19[2];

  v4 = a2;
  v19[0] = a2;
  v19[1] = a3;
  result = (llvm::raw_ostream *)llvm::StringRef::find_first_not_of(v19, "0123456789_.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 64, 0);
  if (result == (llvm::raw_ostream *)-1)
  {
    result = (llvm::raw_ostream *)*((_QWORD *)a1 + 4);
    if ((unint64_t)a3 <= *((_QWORD *)a1 + 3) - (_QWORD)result)
    {
      if (a3)
      {
        result = (llvm::raw_ostream *)memcpy(result, v4, a3);
        *((_QWORD *)a1 + 4) += a3;
      }
    }
    else
    {
      return llvm::raw_ostream::write(a1, (const char *)v4, a3);
    }
  }
  else
  {
    v7 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v7 >= *((_QWORD *)a1 + 3))
    {
      result = llvm::raw_ostream::write(a1, 34);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v7 + 1;
      *v7 = 34;
    }
    if (a3 >= 1)
    {
      v8 = &v4[a3];
      do
      {
        v9 = *v4;
        if (v9 == 92)
        {
          if (v4 + 1 != v8)
          {
            v13 = (_BYTE *)*((_QWORD *)a1 + 4);
            if ((unint64_t)v13 >= *((_QWORD *)a1 + 3))
            {
              result = llvm::raw_ostream::write(a1, 92);
            }
            else
            {
              *((_QWORD *)a1 + 4) = v13 + 1;
              *v13 = 92;
            }
            v16 = v4[1];
            v17 = (char *)*((_QWORD *)a1 + 4);
            if ((unint64_t)v17 >= *((_QWORD *)a1 + 3))
            {
              result = llvm::raw_ostream::write(a1, v16);
            }
            else
            {
              *((_QWORD *)a1 + 4) = v17 + 1;
              *v17 = v16;
            }
            ++v4;
            goto LABEL_27;
          }
          v15 = (_WORD *)*((_QWORD *)a1 + 4);
          if (*((_QWORD *)a1 + 3) - (_QWORD)v15 > 1uLL)
          {
            *v15 = 23644;
            goto LABEL_31;
          }
          v11 = a1;
          v12 = "\\\\";
        }
        else
        {
          if (v9 != 34)
          {
            v14 = (_BYTE *)*((_QWORD *)a1 + 4);
            if ((unint64_t)v14 >= *((_QWORD *)a1 + 3))
            {
              result = llvm::raw_ostream::write(a1, v9);
            }
            else
            {
              *((_QWORD *)a1 + 4) = v14 + 1;
              *v14 = v9;
            }
            goto LABEL_27;
          }
          v10 = (_WORD *)*((_QWORD *)a1 + 4);
          if (*((_QWORD *)a1 + 3) - (_QWORD)v10 > 1uLL)
          {
            *v10 = 8796;
LABEL_31:
            *((_QWORD *)a1 + 4) += 2;
            goto LABEL_27;
          }
          v11 = a1;
          v12 = "\\\"";
        }
        result = llvm::raw_ostream::write(v11, v12, 2uLL);
LABEL_27:
        ++v4;
      }
      while (v4 < v8);
    }
    v18 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v18 >= *((_QWORD *)a1 + 3))
    {
      return llvm::raw_ostream::write(a1, 34);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v18 + 1;
      *v18 = 34;
    }
  }
  return result;
}

uint64_t llvm::MCSectionMachO::MCSectionMachO(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9)
{
  unint64_t v9;
  char v10;

  v9 = 0;
  *(_QWORD *)(result + 36) = 0;
  *(_BYTE *)(result + 44) &= 0xF8u;
  *(_QWORD *)(result + 80) = -1;
  *(_QWORD *)(result + 88) = 0;
  *(_WORD *)(result + 96) = 15;
  *(_QWORD *)(result + 104) = result + 104;
  *(_QWORD *)(result + 112) = result + 104;
  *(_QWORD *)(result + 120) = result + 136;
  *(_QWORD *)(result + 128) = 0x100000000;
  *(_QWORD *)(result + 152) = result + 168;
  *(_QWORD *)(result + 8) = a9;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = result;
  *(_QWORD *)(result + 72) = 0;
  *(_BYTE *)(result + 98) = 0;
  *(_QWORD *)(result + 160) = 0x200000000;
  *(_QWORD *)(result + 200) = a4;
  *(_QWORD *)(result + 208) = a5;
  *(_DWORD *)(result + 216) = 3;
  *(_DWORD *)(result + 220) = a8;
  *(_QWORD *)result = &off_1E8182168;
  *(_DWORD *)(result + 240) = a6;
  *(_DWORD *)(result + 244) = a7;
  do
  {
    if (a3 <= v9)
      v10 = 0;
    else
      v10 = *(_BYTE *)(a2 + v9);
    *(_BYTE *)(result + v9++ + 224) = v10;
  }
  while (v9 != 16);
  return result;
}

{
  unint64_t v9;
  char v10;

  v9 = 0;
  *(_QWORD *)(result + 36) = 0;
  *(_BYTE *)(result + 44) &= 0xF8u;
  *(_QWORD *)(result + 80) = -1;
  *(_QWORD *)(result + 88) = 0;
  *(_WORD *)(result + 96) = 15;
  *(_QWORD *)(result + 104) = result + 104;
  *(_QWORD *)(result + 112) = result + 104;
  *(_QWORD *)(result + 120) = result + 136;
  *(_QWORD *)(result + 128) = 0x100000000;
  *(_QWORD *)(result + 152) = result + 168;
  *(_QWORD *)(result + 8) = a9;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 64) = result;
  *(_QWORD *)(result + 72) = 0;
  *(_BYTE *)(result + 98) = 0;
  *(_QWORD *)(result + 160) = 0x200000000;
  *(_QWORD *)(result + 200) = a4;
  *(_QWORD *)(result + 208) = a5;
  *(_DWORD *)(result + 216) = 3;
  *(_DWORD *)(result + 220) = a8;
  *(_QWORD *)result = &off_1E8182168;
  *(_DWORD *)(result + 240) = a6;
  *(_DWORD *)(result + 244) = a7;
  do
  {
    if (a3 > v9)
      v10 = *(_BYTE *)(a2 + v9);
    else
      v10 = 0;
    *(_BYTE *)(result + v9++ + 224) = v10;
  }
  while (v9 != 16);
  return result;
}

uint64_t llvm::MCSectionMachO::useCodeAlign(llvm::MCSectionMachO *this)
{
  return *((_DWORD *)this + 60) >> 31;
}

uint64_t llvm::MCSectionMachO::isVirtualSection(llvm::MCSectionMachO *this)
{
  return (*((unsigned __int8 *)this + 240) < 0x13u) & (0x41002u >> *((_BYTE *)this + 240));
}

void llvm::MCSectionMachO::ParseSectionSpecifier(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, int *a5@<X4>, _BYTE *a6@<X5>, _DWORD *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  const void *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const char *v30;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  const void *v40;
  size_t v41;
  uint64_t v42;
  int v43;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  unsigned int v52;
  unint64_t v53;
  const char *v55;
  _QWORD *v58;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  const char *v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  unint64_t v67;
  _BYTE v68[16];
  void *v69;
  uint64_t v70;
  _QWORD v71[12];

  v71[10] = *MEMORY[0x1E0C80C00];
  v62[0] = a1;
  v62[1] = a2;
  *a6 = 0;
  v69 = v71;
  v70 = 0x500000000;
  llvm::StringRef::split((char *)v62, (uint64_t)&v69, 44, -1, 1);
  if (!(_DWORD)v70)
  {
    *a3 = 0;
    a3[1] = 0;
    *a4 = 0;
    a4[1] = 0;
LABEL_8:
    v19 = 0;
    v21 = 0;
    goto LABEL_10;
  }
  v13 = sub_1C534E9D8((uint64_t *)v69, " \t\n\v\f\r", 6);
  v14 = v70;
  *a3 = v13;
  a3[1] = v15;
  if (v14 <= 1)
  {
    v19 = 0;
    v21 = 0;
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_10;
  }
  v16 = sub_1C534E9D8((uint64_t *)v69 + 2, " \t\n\v\f\r", 6);
  v17 = v70;
  *a4 = v16;
  a4[1] = v18;
  if (v17 <= 2)
    goto LABEL_8;
  v19 = (const void *)sub_1C534E9D8((uint64_t *)v69 + 4, " \t\n\v\f\r", 6);
  v21 = v20;
  if (v70 <= 3)
  {
LABEL_10:
    v24 = 0;
    v27 = 0;
    v25 = 0;
    v60 = 0;
    v61 = 0;
    goto LABEL_11;
  }
  v22 = sub_1C534E9D8((uint64_t *)v69 + 6, " \t\n\v\f\r", 6);
  v24 = v23;
  v60 = v22;
  v61 = v23;
  if (v70 < 5)
  {
    v27 = 0;
    v25 = 0;
  }
  else
  {
    v25 = (_BYTE *)sub_1C534E9D8((uint64_t *)v69 + 8, " \t\n\v\f\r", 6);
    v27 = v26;
  }
LABEL_11:
  v28 = a4[1];
  if (v28)
  {
    if (v28 >= 0x11)
    {
      if (!atomic_load(qword_1ED836B58))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
      v66 = (void *)3;
      v67 = qword_1ED836B58[0];
      v30 = "mach-o section specifier requires a section whose length is between 1 and 16 characters";
      goto LABEL_19;
    }
    *a5 = 0;
    *a7 = 0;
    if (!v21)
    {
LABEL_51:
      *a8 = 0;
      goto LABEL_21;
    }
    v58 = a8;
    v33 = 0;
    v34 = 0;
    while (v21 != (&off_1E8182188)[v33 + 1] || memcmp(v19, (&off_1E8182188)[v33], (size_t)v21))
    {
      --v34;
      v33 += 4;
      if (v33 == 88)
      {
        if (!atomic_load(qword_1ED836B58))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
        v66 = (void *)3;
        v67 = qword_1ED836B58[0];
        v64 = (uint64_t)"mach-o section specifier uses an unknown section type";
        v32 = v58;
        goto LABEL_20;
      }
    }
    *a5 = -v34;
    *a6 = 1;
    if (v24)
    {
      v66 = v68;
      v67 = 0x100000000;
      llvm::StringRef::split((char *)&v60, (uint64_t)&v66, 43, -1, 0);
      v36 = v58;
      if ((_DWORD)v67)
      {
        v37 = (uint64_t *)v66;
        v38 = (uint64_t *)((char *)v66 + 16 * v67);
        while (2)
        {
          v39 = 0;
          while (1)
          {
            v40 = (const void *)sub_1C534E9D8(v37, " \t\n\v\f\r", 6);
            v41 = *(_QWORD *)&dword_1E8182448[v39 + 4];
            if (v42 == v41 && (!v41 || !memcmp(v40, *(const void **)&dword_1E8182448[v39 + 2], v41)))
              break;
            v39 += 10;
            if (v39 == 110)
            {
              if (!atomic_load(qword_1ED836B58))
                llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
              v64 = 3;
              v65 = qword_1ED836B58[0];
              v63 = "mach-o section specifier has invalid attribute";
              sub_1C5DF1730((_BYTE **)&v63, &v64, v58);
              goto LABEL_81;
            }
          }
          v43 = *a5 | dword_1E8182448[v39];
          *a5 = v43;
          v37 += 2;
          if (v37 != v38)
            continue;
          break;
        }
      }
      else
      {
        v43 = *a5;
      }
      if (v27)
      {
        if (v43 == 8)
        {
          v64 = (uint64_t)v25;
          v65 = v27;
          v46 = sub_1C5E3D4C0((uint64_t)&v64);
          v47 = v65;
          if (v65)
          {
            v48 = 0;
            v49 = (unsigned __int8 *)v64;
            while (1)
            {
              v50 = *v49;
              if ((v50 - 48) >= 0xA)
              {
                if ((v50 - 97) >= 0x1A)
                {
                  v36 = v58;
                  if ((v50 - 65) > 0x19)
                    break;
                  v51 = -55;
                }
                else
                {
                  v51 = -87;
                  v36 = v58;
                }
              }
              else
              {
                v51 = -48;
              }
              v52 = v51 + v50;
              if (v52 >= v46)
                break;
              v53 = v48 * v46 + v52;
              if (v53 / v46 < v48)
                break;
              ++v49;
              v48 = v53;
              if (!--v47)
              {
                if (HIDWORD(v53))
                  break;
                *a7 = v53;
                goto LABEL_76;
              }
            }
          }
          if (!atomic_load(qword_1ED836B58))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
          v64 = 3;
          v65 = qword_1ED836B58[0];
          v55 = "mach-o section specifier has a malformed stub size";
        }
        else
        {
          if (!atomic_load(qword_1ED836B58))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
          v64 = 3;
          v65 = qword_1ED836B58[0];
          v55 = "mach-o section specifier cannot have a stub size specified because it does not have type 'symbol_stubs'";
        }
      }
      else
      {
        if (v43 != 8)
        {
LABEL_76:
          *v36 = 0;
          goto LABEL_81;
        }
        if (!atomic_load(qword_1ED836B58))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
        v64 = 3;
        v65 = qword_1ED836B58[0];
        v55 = "mach-o section specifier of type 'symbol_stubs' requires a size specifier";
      }
      v63 = v55;
      sub_1C5DF1730((_BYTE **)&v63, &v64, v36);
LABEL_81:
      if (v66 != v68)
        free(v66);
      goto LABEL_21;
    }
    a8 = v58;
    if (v34 != -8)
      goto LABEL_51;
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v66 = (void *)3;
    v67 = qword_1ED836B58[0];
    v30 = "mach-o section specifier of type 'symbol_stubs' requires a size specifier";
  }
  else
  {
    if (!atomic_load(qword_1ED836B58))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
    v66 = (void *)3;
    v67 = qword_1ED836B58[0];
    v30 = "mach-o section specifier requires a segment and section separated by a comma";
  }
LABEL_19:
  v64 = (uint64_t)v30;
  v32 = a8;
LABEL_20:
  sub_1C5DF1730((_BYTE **)&v64, (uint64_t *)&v66, v32);
LABEL_21:
  if (v69 != v71)
    free(v69);
}

uint64_t llvm::MCSectionWasm::shouldOmitSectionDirective(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 64))(a4);
}

void llvm::MCSectionXCOFF::~MCSectionXCOFF(llvm::MCSectionXCOFF *this)
{
  char *v2;
  char *v3;
  llvm::MCSectionXCOFF *v4;
  uint64_t v5;
  llvm::MCSectionXCOFF *v6;

  *(_QWORD *)this = &unk_1E81820A0;
  v2 = (char *)*((_QWORD *)this + 19);
  if (v2 != (char *)this + 168)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 15);
  if (v3 != (char *)this + 136)
    free(v3);
  v4 = (llvm::MCSectionXCOFF *)*((_QWORD *)this + 14);
  if (v4 != (llvm::MCSectionXCOFF *)((char *)this + 104))
  {
    do
    {
      v5 = *(_QWORD *)v4;
      v6 = (llvm::MCSectionXCOFF *)*((_QWORD *)v4 + 1);
      *(_QWORD *)v6 = *(_QWORD *)v4;
      *(_QWORD *)(v5 + 8) = v6;
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v4 + 1) = 0;
      llvm::MCFragment::destroy((uint64_t)v4);
      v4 = v6;
    }
    while (v6 != (llvm::MCSectionXCOFF *)((char *)this + 104));
  }
}

_QWORD *llvm::MCTargetStreamer::MCTargetStreamer(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = &off_1E8182690;
  a1[1] = a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

__n128 llvm::MCStreamer::reset(llvm::MCStreamer *this)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  unint64_t v6;
  _OWORD *v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[2];

  v3 = *((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 4);
  if (v2 != v3)
  {
    do
    {
      v10 = v2 - 88;
      *(_QWORD *)&v11[0] = v2 - 56;
      sub_1C515FCE0((void ***)v11);
      v2 = v10;
    }
    while (v10 != v3);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 6);
  v4 = (char *)this + 48;
  *((_QWORD *)v4 - 2) = v3;
  *((_QWORD *)v4 + 3) = 0;
  sub_1C59548BC((uint64_t)v4, v5);
  sub_1C5015F50((_DWORD *)v4 + 10);
  *((_DWORD *)v4 + 18) = 0;
  memset(v11, 0, sizeof(v11));
  v6 = sub_1C47C0F60((uint64_t)(v4 + 64), (unint64_t)v11, 1);
  v7 = (_OWORD *)(*((_QWORD *)v4 + 8) + 32 * *((unsigned int *)v4 + 18));
  result = *(__n128 *)v6;
  v9 = *(_OWORD *)(v6 + 16);
  *v7 = *(_OWORD *)v6;
  v7[1] = v9;
  ++*((_DWORD *)v4 + 18);
  return result;
}

uint64_t llvm::MCStreamer::getNumFrameInfos(llvm::MCStreamer *this)
{
  return -1171354717 * ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
}

uint64_t llvm::MCStreamer::getDwarfFrameInfos(llvm::MCStreamer *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t llvm::MCStreamer::emitIntValue(llvm::MCStreamer *this)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)this + 488))();
}

void llvm::MCStreamer::emitIntValue(_QWORD *a1, unsigned int *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  void *v13;
  __int128 v14;
  _QWORD v15[3];

  v2 = (uint64_t *)a2;
  v15[2] = *MEMORY[0x1E0C80C00];
  v4 = a2[2];
  if (((v4 + 63) & 0x1FFFFFFC0) == 0x40)
  {
    if (v4 >= 0x41)
    {
      if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2) > 0x40)
      {
        v5 = -1;
LABEL_23:
        (*(void (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 512))(a1, v5, v4 >> 3);
        return;
      }
      v2 = (uint64_t *)*v2;
    }
    v5 = *v2;
    goto LABEL_23;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1[1] + 152) + 16))
  {
    v12 = a2[2];
    if (v4 > 0x40)
    {
      v11 = (void *)operator new[]();
      memcpy(v11, (const void *)*v2, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v11 = *(void **)a2;
    }
  }
  else
  {
    llvm::APInt::byteSwap((llvm::APInt *)a2, (llvm::APInt *)&v11);
  }
  v6 = *((unsigned int *)v2 + 2);
  v7 = v6 >> 3;
  v13 = v15;
  v14 = xmmword_1C85FA040;
  if (v6 >= 8)
  {
    if (v6 < 0x58)
    {
      v10 = 0;
      v8 = v15;
    }
    else
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v13, v15, v6 >> 3, 1);
      v8 = v13;
      v10 = v14;
    }
    if (v7 != v10)
    {
      bzero((char *)v8 + v10, v7 - v10);
      v8 = v13;
    }
    *(_QWORD *)&v14 = v7;
  }
  else
  {
    v8 = v15;
  }
  if (v12 >= 0x41)
    v9 = (void **)v11;
  else
    v9 = &v11;
  memcpy(v8, v9, v7);
  (*(void (**)(_QWORD *, void *, _QWORD))(*a1 + 488))(a1, v13, v14);
  if (v13 != v15)
    free(v13);
  if (v12 >= 0x41)
  {
    if (v11)
      MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
  }
}

void llvm::MCStreamer::emitULEB128IntValue(llvm::MCStreamer *this, unint64_t a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  char v9;
  char v10;
  char *v11;
  unsigned int v12;
  char *v13;
  char *v14;
  _QWORD v15[2];
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int v19;
  _QWORD *v20;
  void *v21;
  __int128 v22;
  _QWORD v23[17];

  v23[16] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v22 = xmmword_1C85F20B0;
  sub_1C613932C((uint64_t)v15, (uint64_t)&v21);
  v6 = 1;
  do
  {
    v7 = v6;
    v8 = v6 < a3 || a2 > 0x7F;
    if (v8)
      v9 = 0x80;
    else
      v9 = 0;
    v10 = v9 & 0x80 | a2 & 0x7F;
    v11 = v18;
    if ((unint64_t)v18 >= v17)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v15, v10);
    }
    else
    {
      ++v18;
      *v11 = v10;
    }
    v6 = v7 + 1;
    v8 = a2 > 0x7F;
    a2 >>= 7;
  }
  while (v8);
  if (v7 < a3)
  {
    if (v7 < a3 - 1)
    {
      v12 = a3 - v6;
      do
      {
        v13 = v18;
        if ((unint64_t)v18 >= v17)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)v15, 128);
        }
        else
        {
          ++v18;
          *v13 = 0x80;
        }
        --v12;
      }
      while (v12);
    }
    v14 = v18;
    if ((unint64_t)v18 >= v17)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v15, 0);
    }
    else
    {
      ++v18;
      *v14 = 0;
    }
  }
  (*(void (**)(llvm::MCStreamer *, _QWORD, _QWORD))(*(_QWORD *)this + 488))(this, *v20, v20[1]);
  v15[0] = off_1E81A6E70;
  if (v19 == 1 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8077774924);
  if (v21 != v23)
    free(v21);
}

void llvm::MCStreamer::emitSLEB128IntValue(llvm::MCStreamer *this, uint64_t a2)
{
  uint64_t v4;
  char v5;
  int v6;
  char v7;
  char *v8;
  _QWORD v9[2];
  uint64_t v10;
  unint64_t v11;
  char *v12;
  int v13;
  _QWORD *v14;
  void *v15;
  __int128 v16;
  _QWORD v17[17];

  v17[16] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = xmmword_1C85F20B0;
  sub_1C613932C((uint64_t)v9, (uint64_t)&v15);
  do
  {
    if ((unint64_t)a2 < 0x40)
      goto LABEL_6;
    v4 = ((unint64_t)a2 >> 6) & 1;
    if (a2 >> 7 != -1)
      LODWORD(v4) = 0;
    if ((_DWORD)v4 == 1)
    {
LABEL_6:
      v5 = 0;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      v5 = 0x80;
    }
    v7 = v5 | a2 & 0x7F;
    v8 = v12;
    if ((unint64_t)v12 >= v11)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v9, v7);
    }
    else
    {
      ++v12;
      *v8 = v7;
    }
    a2 >>= 7;
  }
  while (!v6);
  (*(void (**)(llvm::MCStreamer *, _QWORD, _QWORD))(*(_QWORD *)this + 488))(this, *v14, v14[1]);
  v9[0] = off_1E81A6E70;
  if (v13 == 1 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8077774924);
  if (v15 != v17)
    free(v15);
}

uint64_t llvm::MCStreamer::emitValue(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
}

uint64_t llvm::MCStreamer::emitSymbolValue(llvm::MCStreamer *this, const llvm::MCSymbol *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  int v9;

  if ((a4 & 1) != 0)
    return (*(uint64_t (**)(llvm::MCStreamer *, const llvm::MCSymbol *, _QWORD))(*(_QWORD *)this + 376))(this, a2, 0);
  v7 = *((_QWORD *)this + 1);
  v8 = sub_1C484358C(v7 + 192, 24, 3);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 152) + 18) << 16;
  *(_BYTE *)v8 = 2;
  *(_DWORD *)(v8 + 1) = v9 | (*(unsigned __int8 *)(v8 + 4) << 24);
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = a2;
  return (*(uint64_t (**)(llvm::MCStreamer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 504))(this, v8, a3, 0);
}

uint64_t llvm::MCStreamer::emitZeros(llvm::MCStreamer *this, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_1C484358C(*((_QWORD *)this + 1) + 192, 24, 3);
  *(_BYTE *)v4 = 1;
  *(_DWORD *)(v4 + 1) = *(unsigned __int8 *)(v4 + 4) << 24;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = a2;
  return (*(uint64_t (**)(llvm::MCStreamer *, unint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 608))(this, v4, 0, 0);
}

void llvm::MCStreamer::tryEmitDwarfFileDirective(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, __int128 *a8@<X7>, uint64_t a9@<X8>, unsigned int a10)
{
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 8);
  v13 = *a7;
  v14 = *((_BYTE *)a7 + 16);
  v11 = *a8;
  v12 = *((_QWORD *)a8 + 2);
  llvm::MCContext::getDwarfFile(v10, a3, a4, a5, a6, a2, (uint64_t)&v13, (uint64_t)&v11, a9, a10);
}

double llvm::MCStreamer::emitDwarfFile0Directive(uint64_t a1, void *a2, size_t a3, void *a4, size_t a5, uint64_t a6, __n128 *a7, int a8)
{
  uint64_t v12;
  char *v13;
  double result;
  __n128 v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  __int128 v19;
  char v20;
  __int128 v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(a1 + 8);
  v19 = *(_OWORD *)a6;
  v20 = *(_BYTE *)(a6 + 16);
  v15 = *a7;
  v16 = a7[1].n128_u64[0];
  LODWORD(v21) = a8;
  v17.n128_u64[0] = (unint64_t)&v21;
  v13 = sub_1C592911C((uint64_t **)(v12 + 1472), (unsigned int *)&v21, (uint64_t)&std::piecewise_construct, &v17);
  v21 = v19;
  v22 = v20;
  v17 = v15;
  v18 = v16;
  *(_QWORD *)&result = sub_1C59292C4((uint64_t)(v13 + 40), a2, a3, a4, a5, &v21, &v17).n128_u64[0];
  return result;
}

uint64_t llvm::MCStreamer::getCurrentDwarfFrameInfo(llvm::MCStreamer *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v2 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) != v2 && !*(_QWORD *)(v2 - 80))
    return v2 - 88;
  v4 = *((_QWORD *)this + 1);
  v5 = (uint64_t *)*((_QWORD *)this + 32);
  if (v5)
    v6 = *v5;
  else
    v6 = 0;
  v7 = "this directive must appear between .cfi_startproc and .cfi_endproc directives";
  v8 = 259;
  llvm::MCContext::reportError(v4, v6, (uint64_t)&v7);
  return 0;
}

uint64_t llvm::MCStreamer::emitDwarfLocDirective(uint64_t result, int a2, int a3, __int16 a4, char a5, char a6, int a7)
{
  uint64_t v7;

  v7 = *(_QWORD *)(result + 8);
  *(_DWORD *)(v7 + 1496) = a2;
  *(_DWORD *)(v7 + 1500) = a3;
  *(_WORD *)(v7 + 1504) = a4;
  *(_BYTE *)(v7 + 1506) = a5;
  *(_BYTE *)(v7 + 1507) = a6;
  *(_DWORD *)(v7 + 1508) = a7;
  *(_BYTE *)(v7 + 1512) = 1;
  return result;
}

unint64_t llvm::MCStreamer::getDwarfLineTableSymbol(llvm::MCStreamer *this, unsigned int a2)
{
  uint64_t v4;
  char *v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  _DWORD *v13[4];
  __int16 v14;

  v4 = *((_QWORD *)this + 1);
  LODWORD(v11[0]) = a2;
  v13[0] = v11;
  v5 = sub_1C592911C((uint64_t **)(v4 + 1472), (unsigned int *)v11, (uint64_t)&std::piecewise_construct, v13);
  result = *((_QWORD *)v5 + 5);
  if (!result)
  {
    v7 = *((_QWORD *)this + 1);
    v8 = *(_QWORD *)(v7 + 152);
    v10 = *(_QWORD *)(v8 + 88);
    v9 = *(_QWORD *)(v8 + 96);
    v12 = 773;
    v11[0] = v10;
    v11[1] = v9;
    v11[2] = "line_table_start";
    v13[0] = v11;
    v13[2] = (_DWORD *)a2;
    v14 = 2050;
    result = llvm::MCContext::getOrCreateSymbol(v7, (uint64_t)v13);
    *((_QWORD *)v5 + 5) = result;
  }
  return result;
}

BOOL llvm::MCStreamer::hasUnfinishedDwarfFrameInfo(llvm::MCStreamer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  return *((_QWORD *)this + 3) != v1 && *(_QWORD *)(v1 - 80) == 0;
}

uint64_t llvm::MCStreamer::initSections(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 168))(a1, *(_QWORD *)(*(_QWORD *)(a1[1] + 168) + 24), 0);
}

uint64_t llvm::MCStreamer::emitLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  uint64_t v20[4];
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24[5];
  _BYTE v25[40];

  v6 = *(_DWORD *)(a2 + 8);
  if ((v6 & 2) != 0)
  {
    if ((*(_DWORD *)(a2 + 8) & 0x1C00) == 0x800)
    {
      *(_QWORD *)(a2 + 24) = 0;
      v6 &= 0xFFFFE3FF;
    }
    v7 = *(_QWORD *)a2 & 7;
    *(_QWORD *)a2 = v7;
    v6 &= ~2u;
    *(_DWORD *)(a2 + 8) = v6;
  }
  else
  {
    v7 = *(_QWORD *)a2;
  }
  v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 0x1C00) == 0x800 && v8 == 0)
  {
    *(_DWORD *)(a2 + 8) = v6 | 4;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a2 + 24));
    v7 = *(_QWORD *)a2 & 7 | v8;
    *(_QWORD *)a2 = v7;
  }
  if (v8 || (*(_DWORD *)(a2 + 8) & 0x1C00) == 0x800)
  {
    v13 = *(_QWORD *)(a1 + 8);
    v22 = "symbol '";
    v23 = 259;
    if ((v7 & 4) != 0)
    {
      v16 = *(uint64_t **)(a2 - 8);
      v17 = *v16;
      v14 = (uint64_t)(v16 + 2);
      v15 = v17;
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    v21 = 261;
    v20[0] = v14;
    v20[1] = v15;
    sub_1C4825FE4((uint64_t *)&v22, v20, (uint64_t)v24);
    v18 = "' is already defined";
    v19 = 259;
    sub_1C4825FE4(v24, (uint64_t *)&v18, (uint64_t)v25);
    return llvm::MCContext::reportError(v13, a3, (uint64_t)v25);
  }
  else
  {
    v10 = *(unsigned int *)(a1 + 120);
    if ((_DWORD)v10)
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 32 * v10 - 32);
    else
      v11 = 0;
    *(_QWORD *)a2 = v7 & 7 | (v11 + 48);
    result = *(_QWORD *)(a1 + 16);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2);
  }
  return result;
}

void llvm::MCStreamer::emitCFIStartProc(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *i;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[49];
  void **v18;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (uint64_t *)(a1 + 24);
  if (*(_QWORD *)(a1 + 24) == v4 || *(_QWORD *)(v4 - 80))
  {
    memset(v17, 0, 42);
    v15 = 0u;
    v16 = 0u;
    *(_DWORD *)&v17[44] = 0x7FFFFFFF;
    v17[48] = 0;
    v17[41] = a2;
    (**(void (***)(uint64_t, __int128 *))a1)(a1, &v15);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 152);
    if (v6)
    {
      v7 = *(_DWORD **)(v6 + 432);
      for (i = *(_DWORD **)(v6 + 440); v7 != i; v7 += 20)
      {
        if (*v7 <= 7u && ((1 << *v7) & 0xB0) != 0)
          *(_DWORD *)&v17[24] = v7[4];
      }
    }
    v10 = *(_QWORD *)(a1 + 32);
    if (v10 >= *(_QWORD *)(a1 + 40))
    {
      v13 = sub_1C5954928(v5, (uint64_t)&v15);
    }
    else
    {
      v11 = v16;
      *(_OWORD *)v10 = v15;
      *(_OWORD *)(v10 + 16) = v11;
      *(_QWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      sub_1C593A1D4((char *)(v10 + 32), *(uint64_t *)v17, *(uint64_t *)&v17[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v17[8] - *(_QWORD *)v17) >> 4));
      v12 = *(_OWORD *)&v17[24];
      *(_OWORD *)(v10 + 65) = *(_OWORD *)&v17[33];
      *(_OWORD *)(v10 + 56) = v12;
      v13 = v10 + 88;
    }
    *(_QWORD *)(a1 + 32) = v13;
    v18 = (void **)v17;
    sub_1C515FCE0(&v18);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v15 = "starting new .cfi frame before finishing the previous one";
    *(_WORD *)v17 = 259;
    llvm::MCContext::reportError(v14, a3, (uint64_t)&v15);
  }
}

uint64_t llvm::MCStreamer::emitCFIEndProc(llvm::MCStreamer *this)
{
  uint64_t result;

  result = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (result)
    return (*(uint64_t (**)(llvm::MCStreamer *, uint64_t))(*(_QWORD *)this + 8))(this, result);
  return result;
}

void llvm::MCStreamer::emitCFIDefCfa(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t CurrentDwarfFrameInfo;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  _BYTE v14[28];
  void *v15;
  void *v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;

  v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v14 = 7;
  *(_QWORD *)&v14[8] = v6;
  *(_DWORD *)&v14[16] = a2;
  *(_DWORD *)&v14[20] = a3;
  HIBYTE(v19) = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  LOBYTE(__p[0]) = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v8 = CurrentDwarfFrameInfo;
    v9 = *(_QWORD *)(CurrentDwarfFrameInfo + 40);
    if (v9 >= *(_QWORD *)(CurrentDwarfFrameInfo + 48))
    {
      v12 = sub_1C515FD68((uint64_t *)(CurrentDwarfFrameInfo + 32), (uint64_t)v14);
      v13 = SHIBYTE(v19);
      *(_QWORD *)(v8 + 40) = v12;
      *(_DWORD *)(v8 + 56) = a2;
      if (v13 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v10 = *(_OWORD *)v14;
      *(_OWORD *)(v9 + 12) = *(_OWORD *)&v14[12];
      *(_OWORD *)v9 = v10;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      v11 = *(_OWORD *)__p;
      *(_QWORD *)(v9 + 72) = v19;
      *(_OWORD *)(v9 + 56) = v11;
      *(_QWORD *)(CurrentDwarfFrameInfo + 40) = v9 + 80;
      *(_DWORD *)(CurrentDwarfFrameInfo + 56) = a2;
    }
    if (v15)
    {
      v16 = v15;
      operator delete(v15);
    }
  }
}

void llvm::MCStreamer::emitCFIDefCfaOffset(llvm::MCStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t *CurrentDwarfFrameInfo;
  uint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  _BYTE v12[28];
  void *v13;
  void *v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;

  v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v12 = 6;
  *(_QWORD *)&v12[8] = v4;
  *(_DWORD *)&v12[16] = 0;
  *(_DWORD *)&v12[20] = a2;
  HIBYTE(v17) = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  LOBYTE(__p[0]) = 0;
  CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v6 = CurrentDwarfFrameInfo;
    v7 = CurrentDwarfFrameInfo[5];
    if (v7 >= CurrentDwarfFrameInfo[6])
    {
      v10 = sub_1C515FD68(CurrentDwarfFrameInfo + 4, (uint64_t)v12);
      v11 = SHIBYTE(v17);
      v6[5] = v10;
      if (v11 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)v12;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v12[12];
      *(_OWORD *)v7 = v8;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      v9 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 72) = v17;
      *(_OWORD *)(v7 + 56) = v9;
      CurrentDwarfFrameInfo[5] = v7 + 80;
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
  }
}

void llvm::MCStreamer::emitCFIAdjustCfaOffset(llvm::MCStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t *CurrentDwarfFrameInfo;
  uint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  _BYTE v12[28];
  void *v13;
  void *v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;

  v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v12 = 9;
  *(_QWORD *)&v12[8] = v4;
  *(_DWORD *)&v12[16] = 0;
  *(_DWORD *)&v12[20] = a2;
  HIBYTE(v17) = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  LOBYTE(__p[0]) = 0;
  CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v6 = CurrentDwarfFrameInfo;
    v7 = CurrentDwarfFrameInfo[5];
    if (v7 >= CurrentDwarfFrameInfo[6])
    {
      v10 = sub_1C515FD68(CurrentDwarfFrameInfo + 4, (uint64_t)v12);
      v11 = SHIBYTE(v17);
      v6[5] = v10;
      if (v11 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)v12;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v12[12];
      *(_OWORD *)v7 = v8;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      v9 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 72) = v17;
      *(_OWORD *)(v7 + 56) = v9;
      CurrentDwarfFrameInfo[5] = v7 + 80;
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
  }
}

void llvm::MCStreamer::emitCFIDefCfaRegister(llvm::MCStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t CurrentDwarfFrameInfo;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  _BYTE v12[28];
  void *v13;
  void *v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;

  v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v12 = 5;
  *(_QWORD *)&v12[8] = v4;
  *(_DWORD *)&v12[16] = a2;
  *(_DWORD *)&v12[20] = 0;
  HIBYTE(v17) = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  LOBYTE(__p[0]) = 0;
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v6 = CurrentDwarfFrameInfo;
    v7 = *(_QWORD *)(CurrentDwarfFrameInfo + 40);
    if (v7 >= *(_QWORD *)(CurrentDwarfFrameInfo + 48))
    {
      v10 = sub_1C515FD68((uint64_t *)(CurrentDwarfFrameInfo + 32), (uint64_t)v12);
      v11 = SHIBYTE(v17);
      *(_QWORD *)(v6 + 40) = v10;
      *(_DWORD *)(v6 + 56) = a2;
      if (v11 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)v12;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v12[12];
      *(_OWORD *)v7 = v8;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      v9 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 72) = v17;
      *(_OWORD *)(v7 + 56) = v9;
      *(_QWORD *)(CurrentDwarfFrameInfo + 40) = v7 + 80;
      *(_DWORD *)(CurrentDwarfFrameInfo + 56) = a2;
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
  }
}

void llvm::MCStreamer::emitCFILLVMDefAspaceCfa(llvm::MCStreamer *this, int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t CurrentDwarfFrameInfo;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  _BYTE v16[28];
  void *v17[2];
  void *__p[4];

  v8 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v16 = 4;
  *(_QWORD *)&v16[8] = v8;
  *(_DWORD *)&v16[16] = a2;
  *(_DWORD *)&v16[20] = a3;
  *(_DWORD *)&v16[24] = a4;
  *(_OWORD *)v17 = 0u;
  memset(__p, 0, sizeof(__p));
  CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v10 = CurrentDwarfFrameInfo;
    v11 = *(_QWORD *)(CurrentDwarfFrameInfo + 40);
    if (v11 >= *(_QWORD *)(CurrentDwarfFrameInfo + 48))
    {
      v14 = sub_1C515FD68((uint64_t *)(CurrentDwarfFrameInfo + 32), (uint64_t)v16);
      v15 = SHIBYTE(__p[3]);
      *(_QWORD *)(v10 + 40) = v14;
      *(_DWORD *)(v10 + 56) = a2;
      if (v15 < 0)
        operator delete(__p[1]);
    }
    else
    {
      v12 = *(_OWORD *)v16;
      *(_OWORD *)(v11 + 12) = *(_OWORD *)&v16[12];
      *(_OWORD *)v11 = v12;
      *(_QWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      v13 = *(_OWORD *)&__p[1];
      *(void **)(v11 + 72) = __p[3];
      *(_OWORD *)(v11 + 56) = v13;
      *(_QWORD *)(CurrentDwarfFrameInfo + 40) = v11 + 80;
      *(_DWORD *)(CurrentDwarfFrameInfo + 56) = a2;
    }
    if (v17[0])
    {
      v17[1] = v17[0];
      operator delete(v17[0]);
    }
  }
}

void llvm::MCStreamer::emitCFIOffset(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t *CurrentDwarfFrameInfo;
  uint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  _BYTE v14[28];
  void *v15;
  void *v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;

  v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v14 = 3;
  *(_QWORD *)&v14[8] = v6;
  *(_DWORD *)&v14[16] = a2;
  *(_DWORD *)&v14[20] = a3;
  HIBYTE(v19) = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  LOBYTE(__p[0]) = 0;
  CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v8 = CurrentDwarfFrameInfo;
    v9 = CurrentDwarfFrameInfo[5];
    if (v9 >= CurrentDwarfFrameInfo[6])
    {
      v12 = sub_1C515FD68(CurrentDwarfFrameInfo + 4, (uint64_t)v14);
      v13 = SHIBYTE(v19);
      v8[5] = v12;
      if (v13 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v10 = *(_OWORD *)v14;
      *(_OWORD *)(v9 + 12) = *(_OWORD *)&v14[12];
      *(_OWORD *)v9 = v10;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      v11 = *(_OWORD *)__p;
      *(_QWORD *)(v9 + 72) = v19;
      *(_OWORD *)(v9 + 56) = v11;
      CurrentDwarfFrameInfo[5] = v9 + 80;
    }
    if (v15)
    {
      v16 = v15;
      operator delete(v15);
    }
  }
}

void llvm::MCStreamer::emitCFIRelOffset(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t *CurrentDwarfFrameInfo;
  uint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  _BYTE v14[28];
  void *v15;
  void *v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;

  v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v14 = 8;
  *(_QWORD *)&v14[8] = v6;
  *(_DWORD *)&v14[16] = a2;
  *(_DWORD *)&v14[20] = a3;
  HIBYTE(v19) = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  LOBYTE(__p[0]) = 0;
  CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v8 = CurrentDwarfFrameInfo;
    v9 = CurrentDwarfFrameInfo[5];
    if (v9 >= CurrentDwarfFrameInfo[6])
    {
      v12 = sub_1C515FD68(CurrentDwarfFrameInfo + 4, (uint64_t)v14);
      v13 = SHIBYTE(v19);
      v8[5] = v12;
      if (v13 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v10 = *(_OWORD *)v14;
      *(_OWORD *)(v9 + 12) = *(_OWORD *)&v14[12];
      *(_OWORD *)v9 = v10;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      v11 = *(_OWORD *)__p;
      *(_QWORD *)(v9 + 72) = v19;
      *(_OWORD *)(v9 + 56) = v11;
      CurrentDwarfFrameInfo[5] = v9 + 80;
    }
    if (v15)
    {
      v16 = v15;
      operator delete(v15);
    }
  }
}

void llvm::MCStreamer::emitCFIRememberState(llvm::MCStreamer *this)
{
  uint64_t v2;
  uint64_t *CurrentDwarfFrameInfo;
  uint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  _BYTE v10[28];
  void *v11;
  void *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;

  v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v10 = 1;
  *(_QWORD *)&v10[8] = v2;
  *(_QWORD *)&v10[16] = 0;
  HIBYTE(v15) = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  LOBYTE(__p[0]) = 0;
  CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v4 = CurrentDwarfFrameInfo;
    v5 = CurrentDwarfFrameInfo[5];
    if (v5 >= CurrentDwarfFrameInfo[6])
    {
      v8 = sub_1C515FD68(CurrentDwarfFrameInfo + 4, (uint64_t)v10);
      v9 = SHIBYTE(v15);
      v4[5] = v8;
      if (v9 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v6 = *(_OWORD *)v10;
      *(_OWORD *)(v5 + 12) = *(_OWORD *)&v10[12];
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(v5 + 40) = 0;
      *(_QWORD *)(v5 + 48) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      v7 = *(_OWORD *)__p;
      *(_QWORD *)(v5 + 72) = v15;
      *(_OWORD *)(v5 + 56) = v7;
      CurrentDwarfFrameInfo[5] = v5 + 80;
    }
    if (v11)
    {
      v12 = v11;
      operator delete(v11);
    }
  }
}

void llvm::MCStreamer::emitCFIRestoreState(llvm::MCStreamer *this)
{
  uint64_t v2;
  uint64_t *CurrentDwarfFrameInfo;
  uint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  _BYTE v10[28];
  void *v11;
  void *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;

  v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v10 = 2;
  *(_QWORD *)&v10[8] = v2;
  *(_QWORD *)&v10[16] = 0;
  HIBYTE(v15) = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  LOBYTE(__p[0]) = 0;
  CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v4 = CurrentDwarfFrameInfo;
    v5 = CurrentDwarfFrameInfo[5];
    if (v5 >= CurrentDwarfFrameInfo[6])
    {
      v8 = sub_1C515FD68(CurrentDwarfFrameInfo + 4, (uint64_t)v10);
      v9 = SHIBYTE(v15);
      v4[5] = v8;
      if (v9 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v6 = *(_OWORD *)v10;
      *(_OWORD *)(v5 + 12) = *(_OWORD *)&v10[12];
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(v5 + 40) = 0;
      *(_QWORD *)(v5 + 48) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      v7 = *(_OWORD *)__p;
      *(_QWORD *)(v5 + 72) = v15;
      *(_OWORD *)(v5 + 56) = v7;
      CurrentDwarfFrameInfo[5] = v5 + 80;
    }
    if (v11)
    {
      v12 = v11;
      operator delete(v11);
    }
  }
}

void llvm::MCStreamer::emitCFISameValue(llvm::MCStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t *CurrentDwarfFrameInfo;
  uint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  _BYTE v12[28];
  void *v13;
  void *v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;

  v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v12 = 0;
  *(_QWORD *)&v12[8] = v4;
  *(_DWORD *)&v12[16] = a2;
  *(_DWORD *)&v12[20] = 0;
  HIBYTE(v17) = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  LOBYTE(__p[0]) = 0;
  CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v6 = CurrentDwarfFrameInfo;
    v7 = CurrentDwarfFrameInfo[5];
    if (v7 >= CurrentDwarfFrameInfo[6])
    {
      v10 = sub_1C515FD68(CurrentDwarfFrameInfo + 4, (uint64_t)v12);
      v11 = SHIBYTE(v17);
      v6[5] = v10;
      if (v11 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)v12;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v12[12];
      *(_OWORD *)v7 = v8;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      v9 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 72) = v17;
      *(_OWORD *)(v7 + 56) = v9;
      CurrentDwarfFrameInfo[5] = v7 + 80;
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
  }
}

void llvm::MCStreamer::emitCFIRestore(llvm::MCStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t *CurrentDwarfFrameInfo;
  uint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  _BYTE v12[28];
  void *v13;
  void *v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;

  v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v12 = 11;
  *(_QWORD *)&v12[8] = v4;
  *(_DWORD *)&v12[16] = a2;
  *(_DWORD *)&v12[20] = 0;
  HIBYTE(v17) = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  LOBYTE(__p[0]) = 0;
  CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v6 = CurrentDwarfFrameInfo;
    v7 = CurrentDwarfFrameInfo[5];
    if (v7 >= CurrentDwarfFrameInfo[6])
    {
      v10 = sub_1C515FD68(CurrentDwarfFrameInfo + 4, (uint64_t)v12);
      v11 = SHIBYTE(v17);
      v6[5] = v10;
      if (v11 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)v12;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v12[12];
      *(_OWORD *)v7 = v8;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      v9 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 72) = v17;
      *(_OWORD *)(v7 + 56) = v9;
      CurrentDwarfFrameInfo[5] = v7 + 80;
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
  }
}

void llvm::MCStreamer::emitCFIEscape(llvm::MCStreamer *a1, const void *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  char *v9;
  uint64_t *CurrentDwarfFrameInfo;
  uint64_t *v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[28];
  void *v18;
  uint64_t v19;
  char *v20;
  __int128 __p;
  uint64_t v22;

  v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)a1 + 80))(a1);
  v7 = 0;
  v8 = 0;
  *(_DWORD *)v17 = 10;
  *(_QWORD *)&v17[8] = v6;
  *(_QWORD *)&v17[16] = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  if (a3)
  {
    if ((a3 & 0x8000000000000000) != 0)
      abort();
    v9 = (char *)operator new(a3);
    v8 = v9;
    v7 = (uint64_t)&v9[a3];
    v18 = v9;
    v20 = &v9[a3];
    memmove(v9, a2, a3);
    v19 = v7;
  }
  HIBYTE(v22) = 0;
  LOBYTE(__p) = 0;
  CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(a1);
  if (CurrentDwarfFrameInfo)
  {
    v11 = CurrentDwarfFrameInfo;
    v12 = CurrentDwarfFrameInfo[5];
    if (v12 >= CurrentDwarfFrameInfo[6])
    {
      v15 = sub_1C515FD68(CurrentDwarfFrameInfo + 4, (uint64_t)v17);
      v16 = SHIBYTE(v22);
      v11[5] = v15;
      if (v16 < 0)
        operator delete((void *)__p);
    }
    else
    {
      v13 = *(_OWORD *)v17;
      *(_OWORD *)(v12 + 12) = *(_OWORD *)&v17[12];
      *(_OWORD *)v12 = v13;
      *(_QWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 32) = 0;
      sub_1C515FEEC((_QWORD *)(v12 + 32), v8, v7, v7 - (_QWORD)v8);
      v14 = __p;
      *(_QWORD *)(v12 + 72) = v22;
      *(_OWORD *)(v12 + 56) = v14;
      v11[5] = v12 + 80;
    }
  }
  if (v18)
  {
    v19 = (uint64_t)v18;
    operator delete(v18);
  }
}

void llvm::MCStreamer::emitCFIGnuArgsSize(llvm::MCStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t *CurrentDwarfFrameInfo;
  uint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  _BYTE v12[28];
  void *v13;
  void *v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;

  v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v12 = 16;
  *(_QWORD *)&v12[8] = v4;
  *(_DWORD *)&v12[16] = 0;
  *(_DWORD *)&v12[20] = a2;
  HIBYTE(v17) = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  LOBYTE(__p[0]) = 0;
  CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v6 = CurrentDwarfFrameInfo;
    v7 = CurrentDwarfFrameInfo[5];
    if (v7 >= CurrentDwarfFrameInfo[6])
    {
      v10 = sub_1C515FD68(CurrentDwarfFrameInfo + 4, (uint64_t)v12);
      v11 = SHIBYTE(v17);
      v6[5] = v10;
      if (v11 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)v12;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v12[12];
      *(_OWORD *)v7 = v8;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      v9 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 72) = v17;
      *(_OWORD *)(v7 + 56) = v9;
      CurrentDwarfFrameInfo[5] = v7 + 80;
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
  }
}

void llvm::MCStreamer::emitCFIUndefined(llvm::MCStreamer *this, int a2)
{
  uint64_t v4;
  uint64_t *CurrentDwarfFrameInfo;
  uint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  _BYTE v12[28];
  void *v13;
  void *v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;

  v4 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v12 = 12;
  *(_QWORD *)&v12[8] = v4;
  *(_DWORD *)&v12[16] = a2;
  *(_DWORD *)&v12[20] = 0;
  HIBYTE(v17) = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  LOBYTE(__p[0]) = 0;
  CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v6 = CurrentDwarfFrameInfo;
    v7 = CurrentDwarfFrameInfo[5];
    if (v7 >= CurrentDwarfFrameInfo[6])
    {
      v10 = sub_1C515FD68(CurrentDwarfFrameInfo + 4, (uint64_t)v12);
      v11 = SHIBYTE(v17);
      v6[5] = v10;
      if (v11 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v8 = *(_OWORD *)v12;
      *(_OWORD *)(v7 + 12) = *(_OWORD *)&v12[12];
      *(_OWORD *)v7 = v8;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      v9 = *(_OWORD *)__p;
      *(_QWORD *)(v7 + 72) = v17;
      *(_OWORD *)(v7 + 56) = v9;
      CurrentDwarfFrameInfo[5] = v7 + 80;
    }
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
  }
}

void llvm::MCStreamer::emitCFIRegister(llvm::MCStreamer *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t *CurrentDwarfFrameInfo;
  uint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  _BYTE v14[28];
  void *v15[2];
  void *__p[4];

  v6 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v14 = 13;
  *(_QWORD *)&v14[8] = v6;
  *(_DWORD *)&v14[16] = a2;
  *(_DWORD *)&v14[20] = a3;
  *(_OWORD *)v15 = 0u;
  memset(__p, 0, sizeof(__p));
  CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v8 = CurrentDwarfFrameInfo;
    v9 = CurrentDwarfFrameInfo[5];
    if (v9 >= CurrentDwarfFrameInfo[6])
    {
      v12 = sub_1C515FD68(CurrentDwarfFrameInfo + 4, (uint64_t)v14);
      v13 = SHIBYTE(__p[3]);
      v8[5] = v12;
      if (v13 < 0)
        operator delete(__p[1]);
    }
    else
    {
      v10 = *(_OWORD *)v14;
      *(_OWORD *)(v9 + 12) = *(_OWORD *)&v14[12];
      *(_OWORD *)v9 = v10;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      v11 = *(_OWORD *)&__p[1];
      *(void **)(v9 + 72) = __p[3];
      *(_OWORD *)(v9 + 56) = v11;
      CurrentDwarfFrameInfo[5] = v9 + 80;
    }
    if (v15[0])
    {
      v15[1] = v15[0];
      operator delete(v15[0]);
    }
  }
}

void llvm::MCStreamer::emitCFIWindowSave(llvm::MCStreamer *this)
{
  uint64_t v2;
  uint64_t *CurrentDwarfFrameInfo;
  uint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  _BYTE v10[28];
  void *v11;
  void *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;

  v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v10 = 14;
  *(_QWORD *)&v10[8] = v2;
  *(_QWORD *)&v10[16] = 0;
  HIBYTE(v15) = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  LOBYTE(__p[0]) = 0;
  CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v4 = CurrentDwarfFrameInfo;
    v5 = CurrentDwarfFrameInfo[5];
    if (v5 >= CurrentDwarfFrameInfo[6])
    {
      v8 = sub_1C515FD68(CurrentDwarfFrameInfo + 4, (uint64_t)v10);
      v9 = SHIBYTE(v15);
      v4[5] = v8;
      if (v9 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v6 = *(_OWORD *)v10;
      *(_OWORD *)(v5 + 12) = *(_OWORD *)&v10[12];
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(v5 + 40) = 0;
      *(_QWORD *)(v5 + 48) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      v7 = *(_OWORD *)__p;
      *(_QWORD *)(v5 + 72) = v15;
      *(_OWORD *)(v5 + 56) = v7;
      CurrentDwarfFrameInfo[5] = v5 + 80;
    }
    if (v11)
    {
      v12 = v11;
      operator delete(v11);
    }
  }
}

void llvm::MCStreamer::emitCFINegateRAState(llvm::MCStreamer *this)
{
  uint64_t v2;
  uint64_t *CurrentDwarfFrameInfo;
  uint64_t *v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  _BYTE v10[28];
  void *v11;
  void *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;

  v2 = (*(uint64_t (**)(llvm::MCStreamer *))(*(_QWORD *)this + 80))(this);
  *(_DWORD *)v10 = 15;
  *(_QWORD *)&v10[8] = v2;
  *(_QWORD *)&v10[16] = 0;
  HIBYTE(v15) = 0;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  LOBYTE(__p[0]) = 0;
  CurrentDwarfFrameInfo = (uint64_t *)llvm::MCStreamer::getCurrentDwarfFrameInfo(this);
  if (CurrentDwarfFrameInfo)
  {
    v4 = CurrentDwarfFrameInfo;
    v5 = CurrentDwarfFrameInfo[5];
    if (v5 >= CurrentDwarfFrameInfo[6])
    {
      v8 = sub_1C515FD68(CurrentDwarfFrameInfo + 4, (uint64_t)v10);
      v9 = SHIBYTE(v15);
      v4[5] = v8;
      if (v9 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v6 = *(_OWORD *)v10;
      *(_OWORD *)(v5 + 12) = *(_OWORD *)&v10[12];
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(v5 + 40) = 0;
      *(_QWORD *)(v5 + 48) = 0;
      *(_QWORD *)(v5 + 32) = 0;
      v7 = *(_OWORD *)__p;
      *(_QWORD *)(v5 + 72) = v15;
      *(_OWORD *)(v5 + 56) = v7;
      CurrentDwarfFrameInfo[5] = v5 + 80;
    }
    if (v11)
    {
      v12 = v11;
      operator delete(v11);
    }
  }
}

uint64_t llvm::MCStreamer::EmitWinEHHandler(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;

  result = llvm::MCStreamer::EnsureValidWinFrameInfo(a1, a5);
  if (result)
  {
    v11 = result;
    if (*(_QWORD *)(result + 80))
    {
      v12 = *(_QWORD *)(a1 + 8);
      v14[0] = "Chained unwind areas can't have handlers!";
      v15 = 259;
      return llvm::MCContext::reportError(v12, a5, (uint64_t)v14);
    }
    *(_QWORD *)(result + 24) = a2;
    if ((a3 & 1) != 0 || (a4 & 1) != 0)
    {
      if (!a3)
        goto LABEL_7;
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 8);
      v14[0] = "Don't know what kind of handler this is!";
      v15 = 259;
      result = llvm::MCContext::reportError(v13, a5, (uint64_t)v14);
      if (!a3)
      {
LABEL_7:
        if (a4)
          *(_BYTE *)(v11 + 69) = 1;
        return result;
      }
    }
    *(_BYTE *)(v11 + 68) = 1;
    goto LABEL_7;
  }
  return result;
}

llvm::MCSectionCOFF *llvm::MCStreamer::getAssociatedPDataSection(llvm::MCContext **this, const llvm::MCSection *a2)
{
  return sub_1C5953AB8(this[1], (_DWORD *)this + 66, *(llvm::MCSectionCOFF **)(*((_QWORD *)this[1] + 21) + 672), (uint64_t)a2);
}

llvm::MCSectionCOFF *sub_1C5953AB8(llvm::MCContext *this, _DWORD *a2, llvm::MCSectionCOFF *a3, uint64_t a4)
{
  int *COFFSection;
  unsigned int v6;
  const llvm::MCSymbol *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void **v17;
  size_t v18;
  uint64_t v19[2];
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;
  void *v24[2];
  char v25;

  COFFSection = (int *)a3;
  if (*(_QWORD *)(*((_QWORD *)this + 21) + 24) != a4)
  {
    v6 = *(_DWORD *)(a4 + 228);
    if (v6 == -1)
    {
      v6 = (*a2)++;
      *(_DWORD *)(a4 + 228) = v6;
    }
    if ((*(_BYTE *)(a4 + 225) & 0x10) == 0)
    {
      v7 = 0;
      return llvm::MCContext::getAssociativeCOFFSection(this, (llvm::MCSectionCOFF *)COFFSection, v7, v6);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 19) + 21))
    {
      v7 = *(const llvm::MCSymbol **)(a4 + 232);
      return llvm::MCContext::getAssociativeCOFFSection(this, (llvm::MCSectionCOFF *)COFFSection, v7, v6);
    }
    v9 = *((_QWORD *)a3 + 25);
    v10 = *((_QWORD *)a3 + 26);
    v21 = 773;
    v20[0] = v9;
    v20[1] = v10;
    v20[2] = "$";
    v11 = *(_QWORD *)(a4 + 200);
    v12 = *(_QWORD *)(a4 + 208);
    v19[0] = v11;
    v19[1] = v12;
    LOBYTE(v22[0]) = 36;
    v13 = llvm::StringRef::find(v19, (char *)v22, 1uLL, 0);
    v14 = v13 + 1;
    if (v12 < v13 + 1)
      v14 = v12;
    v15 = v12 - v14;
    v16 = v11 + v14;
    if (v13 == -1)
    {
      v16 = 0;
      v15 = 0;
    }
    v22[0] = v20;
    v22[2] = v16;
    v22[3] = v15;
    v23 = 1282;
    llvm::Twine::str((llvm::Twine *)v22, v24);
    if (v25 >= 0)
      v17 = v24;
    else
      v17 = (void **)v24[0];
    if (v25 >= 0)
      v18 = v25 & 0x7F;
    else
      v18 = (size_t)v24[1];
    COFFSection = (int *)llvm::MCContext::getCOFFSection((uint64_t)this, v17, v18, COFFSection[56] | 0x1000u, COFFSection[55], "", 0, 2u, 0xFFFFFFFF, 0);
    if (v25 < 0)
      operator delete(v24[0]);
  }
  return (llvm::MCSectionCOFF *)COFFSection;
}

uint64_t llvm::MCStreamer::Finish(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  __int16 v9;

  v3 = a1[4];
  if ((a1[3] == v3 || *(_QWORD *)(v3 - 80)) && ((v4 = a1[7], a1[6] == v4) || *(_QWORD *)(*(_QWORD *)(v4 - 8) + 8)))
  {
    v5 = a1[2];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
    return (*(uint64_t (**)(_QWORD *))(*a1 + 1224))(a1);
  }
  else
  {
    v7 = a1[1];
    v8 = "Unfinished frame!";
    v9 = 259;
    return llvm::MCContext::reportError(v7, a2, (uint64_t)&v8);
  }
}

_QWORD *llvm::MCStreamer::maybeEmitDwarf64Mark(_QWORD *this)
{
  _QWORD *v1;
  const char *v2;
  __int16 v3;

  if (*(_BYTE *)(this[1] + 1626) == 1)
  {
    v1 = this;
    v2 = "DWARF64 Mark";
    v3 = 259;
    (*(void (**)(_QWORD *, const char **, uint64_t))(*this + 112))(this, &v2, 1);
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v1 + 512))(v1, 0xFFFFFFFFLL, 4);
  }
  return this;
}

unint64_t llvm::MCStreamer::emitDwarfUnitLength(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  __int16 v8;
  unint64_t TempSymbol;
  uint64_t v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  __int16 v23;

  if (*(_BYTE *)(a1[1] + 1626) == 1)
  {
    v20 = "DWARF64 Mark";
    v23 = 259;
    (*(void (**)(_QWORD *, const char **, uint64_t))(*a1 + 112))(a1, &v20, 1);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 512))(a1, 0xFFFFFFFFLL, 4);
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 112))(a1, a3, 1);
  v6 = a1[1];
  v7 = *(unsigned __int8 *)(a2 + 32);
  if (v7 == 1)
  {
    v20 = "_start";
    v8 = 259;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(a2 + 32))
  {
    v8 = 256;
LABEL_7:
    v23 = v8;
    goto LABEL_8;
  }
  v16 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v17 = *(const char **)a2;
  }
  else
  {
    LOBYTE(v7) = 2;
    v17 = (const char *)a2;
  }
  v20 = v17;
  v21 = v16;
  v22 = "_start";
  LOBYTE(v23) = v7;
  HIBYTE(v23) = 3;
LABEL_8:
  TempSymbol = llvm::MCContext::createTempSymbol(v6, (uint64_t)&v20, 1);
  v10 = a1[1];
  v11 = *(unsigned __int8 *)(a2 + 32);
  if (v11 == 1)
  {
    v20 = "_end";
    v12 = 259;
    goto LABEL_12;
  }
  if (!*(_BYTE *)(a2 + 32))
  {
    v12 = 256;
LABEL_12:
    v23 = v12;
    goto LABEL_13;
  }
  v18 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 33) == 1)
  {
    v19 = *(const char **)a2;
  }
  else
  {
    LOBYTE(v11) = 2;
    v19 = (const char *)a2;
  }
  v20 = v19;
  v21 = v18;
  v22 = "_end";
  LOBYTE(v23) = v11;
  HIBYTE(v23) = 3;
LABEL_13:
  v13 = llvm::MCContext::createTempSymbol(v10, (uint64_t)&v20, 1);
  if (*(_BYTE *)(a1[1] + 1626))
    v14 = 8;
  else
    v14 = 4;
  (*(void (**)(_QWORD *, unint64_t, unint64_t, uint64_t))(*a1 + 832))(a1, v13, TempSymbol, v14);
  (*(void (**)(_QWORD *, unint64_t, _QWORD))(*a1 + 192))(a1, TempSymbol, 0);
  return v13;
}

uint64_t llvm::MCStreamer::emitDwarfLineStartLabel(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 192))(a1, a2, 0);
}

uint64_t llvm::MCStreamer::emitAssignment(llvm::MCStreamer *this, llvm::MCSymbol *a2, const llvm::MCExpr **a3)
{
  uint64_t result;

  llvm::MCStreamer::visitUsedExpr(this, a3);
  *((_QWORD *)a2 + 3) = a3;
  *((_DWORD *)a2 + 2) = *((_DWORD *)a2 + 2) & 0xFFFFE3FF | 0x800;
  *(_QWORD *)a2 &= 7uLL;
  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t, llvm::MCSymbol *, const llvm::MCExpr **))(*(_QWORD *)result + 24))(result, a2, a3);
  return result;
}

llvm::MCStreamer *llvm::MCStreamer::visitUsedExpr(llvm::MCStreamer *this, const llvm::MCExpr **a2)
{
  llvm::MCStreamer *v3;
  uint64_t (*v4)(llvm::MCStreamer *, llvm::MCStreamer *);
  llvm::MCStreamer *v5;
  llvm::MCStreamer *v6;
  const llvm::MCExpr ***v7;

  v3 = this;
  while (2)
  {
    switch(*(_BYTE *)a2)
    {
      case 0:
        this = (llvm::MCStreamer *)llvm::MCStreamer::visitUsedExpr(v3, a2[2]);
        v7 = (const llvm::MCExpr ***)(a2 + 3);
        goto LABEL_7;
      case 2:
        v6 = a2[2];
        v4 = *(uint64_t (**)(llvm::MCStreamer *, llvm::MCStreamer *))(*(_QWORD *)v3 + 56);
        v5 = v3;
        goto LABEL_4;
      case 3:
        v7 = (const llvm::MCExpr ***)(a2 + 2);
LABEL_7:
        a2 = *v7;
        continue;
      case 4:
        v4 = (uint64_t (*)(llvm::MCStreamer *, llvm::MCStreamer *))*((_QWORD *)*(a2 - 1) + 7);
        v5 = (llvm::MCStreamer *)(a2 - 1);
        v6 = v3;
LABEL_4:
        this = (llvm::MCStreamer *)v4(v5, v6);
        break;
      default:
        return this;
    }
    return this;
  }
}

llvm::MCStreamer *llvm::MCStreamer::emitInstruction(llvm::MCStreamer *this, uint64_t a2)
{
  int v2;
  llvm::MCStreamer *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a2 + 24);
  if (v2)
  {
    v4 = this;
    v5 = v2 - 1;
    do
    {
      v6 = v5;
      v7 = *(_QWORD *)(a2 + 16);
      if (*(_BYTE *)(v7 + 16 * v5) == 5)
        this = llvm::MCStreamer::visitUsedExpr(v4, *(const llvm::MCExpr ***)(v7 + 16 * v5 + 8));
      --v5;
    }
    while (v6);
  }
  return this;
}

uint64_t llvm::MCStreamer::emitAbsoluteSymbolDiff(llvm::MCStreamer *this, const llvm::MCSymbol *a2, const llvm::MCSymbol *a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t TempSymbol;
  uint64_t v17;
  unint64_t v18;
  int v19;
  const char *v21;
  __int16 v22;

  v8 = *((_QWORD *)this + 1);
  v9 = sub_1C484358C(v8 + 192, 24, 3);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 152) + 18) << 16;
  *(_BYTE *)v9 = 2;
  *(_DWORD *)(v9 + 1) = v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = a2;
  v11 = *((_QWORD *)this + 1);
  v12 = sub_1C484358C(v11 + 192, 24, 3);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 152) + 18) << 16;
  *(_BYTE *)v12 = 2;
  *(_DWORD *)(v12 + 1) = v13 | (*(unsigned __int8 *)(v12 + 4) << 24);
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = a3;
  v14 = sub_1C484358C(*((_QWORD *)this + 1) + 192, 32, 3);
  *(_BYTE *)v14 = 0;
  *(_DWORD *)(v14 + 1) = (*(unsigned __int8 *)(v14 + 4) << 24) | 0x12;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = v9;
  *(_QWORD *)(v14 + 24) = v12;
  v15 = *((_QWORD *)this + 1);
  if (!*(_BYTE *)(*(_QWORD *)(v15 + 152) + 352))
    return (*(uint64_t (**)(llvm::MCStreamer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 504))(this, v14, a4, 0);
  v21 = "set";
  v22 = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(v15, (uint64_t)&v21, 1);
  (*(void (**)(llvm::MCStreamer *, unint64_t, unint64_t))(*(_QWORD *)this + 280))(this, TempSymbol, v14);
  v17 = *((_QWORD *)this + 1);
  v18 = sub_1C484358C(v17 + 192, 24, 3);
  v19 = *(unsigned __int8 *)(*(_QWORD *)(v17 + 152) + 18) << 16;
  *(_BYTE *)v18 = 2;
  *(_DWORD *)(v18 + 1) = v19 | (*(unsigned __int8 *)(v18 + 4) << 24);
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 16) = TempSymbol;
  return (*(uint64_t (**)(llvm::MCStreamer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 504))(this, v18, a4, 0);
}

void llvm::MCStreamer::SwitchSection(llvm::MCStreamer *this, llvm::MCSection *a2, const llvm::MCExpr *a3)
{
  uint64_t v3;
  llvm::MCSection *v4;
  const llvm::MCExpr *v5;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;

  v3 = *((_QWORD *)this + 14) + 32 * *((unsigned int *)this + 30);
  v4 = *(llvm::MCSection **)(v3 - 32);
  v5 = *(const llvm::MCExpr **)(v3 - 24);
  *(_QWORD *)(v3 - 16) = v4;
  *(_QWORD *)(v3 - 8) = v5;
  if (v4 != a2 || v5 != a3)
  {
    (*(void (**)(llvm::MCStreamer *))(*(_QWORD *)this + 160))(this);
    v10 = *((_QWORD *)this + 14) + 32 * *((unsigned int *)this + 30);
    *(_QWORD *)(v10 - 32) = a2;
    *(_QWORD *)(v10 - 24) = a3;
    v11 = *((_QWORD *)a2 + 1);
    if (v11)
    {
      v12 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFF8;
      if (!v12 && (*(_DWORD *)(v11 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v11 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v11 + 24));
        *(_QWORD *)v11 = *(_QWORD *)v11 & 7 | v12;
      }
      if (!v12 || (sub_1C593D6FC(v11, 1), v13 == llvm::MCSymbol::AbsolutePseudoFragment))
        (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD))(*(_QWORD *)this + 192))(this, v11, 0);
    }
  }
}

uint64_t llvm::MCStreamer::emitVersionForTarget(uint64_t this, const llvm::Triple *a2, const llvm::VersionTuple *a3, const llvm::Triple *a4, const llvm::VersionTuple *a5)
{
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  llvm::MCStreamer *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;

  if (*((_DWORD *)a2 + 11) == 5)
  {
    v6 = *((_DWORD *)a2 + 9);
    v7 = v6 > 0x21;
    v8 = (1 << v6) & 0x3F0000888;
    if (!v7 && v8 != 0)
    {
      v12 = (llvm::MCStreamer *)this;
      this = llvm::Triple::getOSVersion(a2);
      if ((_DWORD)this)
      {
        v37 = 0;
        v38 = 0;
        v13 = *((_DWORD *)a2 + 9);
        if (v13 > 27)
          __asm { BR              X10 }
        if (v13 == 7)
        {
          v14 = llvm::Triple::getiOSVersion(a2);
          v16 = v15;
        }
        else
        {
          llvm::Triple::getMacOSXVersion(a2, (llvm::VersionTuple *)&v37);
          v14 = v37;
          v16 = v38;
        }
        v36[0] = sub_1C59546D4(a2, v14, v16);
        v36[1] = v17;
        v18 = *((_DWORD *)a2 + 9);
        if (v18 > 27)
          __asm { BR              X10 }
        v19 = 0x8000000E0000000ALL;
        if (v18 == 7)
        {
          if (*((_DWORD *)a2 + 10) == 21)
            v19 = 0;
          else
            v19 = 12;
        }
        v35[0] = v19;
        v35[1] = 0;
        if ((v19 & 0x7FFFFFFFFFFFFFFFLL) != 0 && (this = sub_1C4F7A4D8(v36, v35), (this & 1) != 0))
        {
          v20 = 0;
          if (!a4)
            goto LABEL_26;
        }
        else
        {
          v21 = *((_DWORD *)a2 + 10);
          if (a4 && v21 == 21 && (*((_DWORD *)a4 + 9) & 0xFFFFFFF7) == 3)
          {
            v34[0] = 0;
            v34[1] = 0;
            llvm::MCStreamer::emitVersionForTarget(v12, a4, a5, 0, (const llvm::VersionTuple *)v34);
            v22 = sub_1C595472C(*((_DWORD *)a2 + 9), *((_DWORD *)a2 + 10));
            v23 = 32;
            return (*(uint64_t (**)(llvm::MCStreamer *, uint64_t))(*(_QWORD *)v12 + 8 * v23))(v12, v22);
          }
          v24 = sub_1C595472C(*((_DWORD *)a2 + 9), v21);
          this = (*(uint64_t (**)(llvm::MCStreamer *, uint64_t))(*(_QWORD *)v12 + 248))(v12, v24);
          v20 = 1;
          if (!a4)
            goto LABEL_26;
        }
        if ((*((_DWORD *)a2 + 9) & 0xFFFFFFF7) != 3 || *((_DWORD *)a4 + 10) != 21)
        {
LABEL_26:
          if ((v20 & 1) != 0)
            return this;
LABEL_27:
          v25 = *((_DWORD *)a2 + 9);
          v22 = 1;
          v23 = 30;
          if (v25 <= 10)
          {
            if (v25 != 3)
            {
              v22 = 0;
LABEL_34:
              v23 = 30;
            }
          }
          else if (v25 != 11)
          {
            if (v25 == 28)
              v22 = 2;
            else
              v22 = 3;
            goto LABEL_34;
          }
          return (*(uint64_t (**)(llvm::MCStreamer *, uint64_t))(*(_QWORD *)v12 + 8 * v23))(v12, v22);
        }
        v26 = llvm::Triple::getiOSVersion(a4);
        v28 = sub_1C59546D4(a4, v26, v27);
        v30 = v29;
        v31 = sub_1C595472C(*((_DWORD *)a4 + 9), *((_DWORD *)a4 + 10));
        if (v28 < 0)
          v32 = HIDWORD(v28) & 0x7FFFFFFF;
        else
          v32 = 0;
        if (v30 < 0)
          v33 = v30 & 0x7FFFFFFF;
        else
          v33 = 0;
        this = (*(uint64_t (**)(llvm::MCStreamer *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 256))(v12, v31, v28, v32, v33, *(_QWORD *)a5, *((_QWORD *)a5 + 1));
        if ((v20 & 1) == 0)
          goto LABEL_27;
      }
    }
  }
  return this;
}

uint64_t sub_1C59546D4(llvm::Triple *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v6[0] = llvm::Triple::getMinimumSupportedOSVersion(a1);
  v6[1] = v3;
  if (!(v6[0] & 0x7FFFFFFFFFFFFFFFLL | v3 & 0x7FFFFFFF7FFFFFFFLL) || (v4 = v6, (sub_1C4F7A4D8(v7, v6) & 1) == 0))
    v4 = v7;
  return *v4;
}

uint64_t sub_1C595472C(int a1, int a2)
{
  int v3;
  unsigned int v4;

  if (a1 > 27)
    return ((uint64_t (*)(void))((char *)&loc_1C5954750 + 4 * byte_1C8663861[a1 - 28]))();
  if (a2 == 20)
    v3 = 7;
  else
    v3 = 2;
  if (a2 == 21)
    v4 = 6;
  else
    v4 = v3;
  if (a1 != 7)
    v4 = 1;
  if (a1 == 3)
    return 1;
  else
    return v4;
}

void sub_1C5954794()
{
  JUMPOUT(0x1C59547A0);
}

uint64_t sub_1C59547A8()
{
  return 5;
}

uint64_t sub_1C59547B0()
{
  return 10;
}

uint64_t sub_1C59547B8()
{
  return 14;
}

uint64_t sub_1C59547C0(uint64_t a1, int a2)
{
  if (a2 == 20)
    return 12;
  else
    return 11;
}

char *sub_1C59547D0(uint64_t **a1, unint64_t a2, _QWORD *a3)
{
  char *v5;
  uint64_t **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_QWORD *)v5 + 4);
        if (v8 <= a2)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x78uLL);
    *((_QWORD *)v7 + 4) = *a3;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((_DWORD *)v7 + 18) = 1065353216;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 6) = 0u;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t sub_1C59548BC(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *--v4;
    result = v5;
    *v4 = 0;
    if (v5)
    {
      v6 = sub_1C62C14AC(result);
      result = MEMORY[0x1CAA32FC0](v6, 0x1060C401F314DFCLL);
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_1C5954928(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  void **v20;

  v2 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL)
    abort();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL)
    v6 = 0x2E8BA2E8BA2E8BALL;
  else
    v6 = v3;
  v19 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x2E8BA2E8BA2E8BALL)
      sub_1C4764EE4();
    v7 = (char *)operator new(88 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[88 * v2];
  __p = v7;
  v16 = v8;
  v18 = &v7[88 * v6];
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + 1) = v9;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 6) = 0;
  *((_QWORD *)v8 + 4) = 0;
  sub_1C593A1D4(v8 + 32, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4));
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v8 + 65) = *(_OWORD *)(a2 + 65);
  v17 = v8 + 88;
  sub_1C62C1400(a1, &__p);
  v10 = a1[1];
  v12 = v16;
  v11 = v17;
  if (v17 != v16)
  {
    do
    {
      v13 = v11 - 88;
      v20 = (void **)(v11 - 56);
      sub_1C515FCE0(&v20);
      v11 = v13;
    }
    while (v13 != v12);
  }
  if (__p)
    operator delete(__p);
  return v10;
}

char *sub_1C5954AA0(char **a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = (a1[1] - *a1) >> 3;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v3)
    v3 = v6 >> 2;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (v7)
  {
    if (v7 >> 61)
      sub_1C4764EE4();
    v8 = (char *)operator new(8 * v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = &v8[8 * v2];
  v10 = &v8[8 * v7];
  v11 = *a2;
  *a2 = 0;
  *(_QWORD *)v9 = v11;
  v12 = v9 + 8;
  v13 = *a1;
  v14 = a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v15 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v9 - 1) = v15;
      v9 -= 8;
    }
    while (v14 != v13);
    v14 = *a1;
    v16 = a1[1];
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    while (v16 != v14)
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      v17 = v18;
      *(_QWORD *)v16 = 0;
      if (v18)
      {
        v19 = sub_1C62C14AC(v17);
        MEMORY[0x1CAA32FC0](v19, 0x1060C401F314DFCLL);
      }
    }
  }
  if (v14)
    operator delete(v14);
  return v12;
}

void llvm::MCSPIRVStreamer::emitInstToData(llvm::MCObjectStreamer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t DataFragment;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t v13;
  int v14;
  void *v15[2];
  void *v16;
  __int128 v17;
  _QWORD v18[33];

  v18[32] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a1 + 34);
  v15[0] = &v16;
  v15[1] = 0;
  v16 = v18;
  v17 = xmmword_1C64638F0;
  sub_1C613932C((uint64_t)v12, (uint64_t)&v16);
  (*(void (**)(_QWORD, uint64_t, _QWORD *, void **, uint64_t))(**(_QWORD **)(v6 + 16) + 32))(*(_QWORD *)(v6 + 16), a2, v12, v15, a3);
  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(a1, 0);
  v8 = DataFragment;
  *(_BYTE *)(DataFragment + 50) = 1;
  *(_QWORD *)(DataFragment + 56) = a3;
  v10 = v16;
  v9 = v17;
  v11 = *(_QWORD *)(DataFragment + 72);
  if (*(_QWORD *)(DataFragment + 80) < (unint64_t)(v11 + v17))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(DataFragment + 64, (void *)(DataFragment + 88), v11 + v17, 1);
    v11 = *(_QWORD *)(v8 + 72);
    if (!v9)
      goto LABEL_4;
    goto LABEL_3;
  }
  if ((_QWORD)v17)
  {
LABEL_3:
    memcpy((void *)(*(_QWORD *)(v8 + 64) + v11), v10, v9);
    v11 = *(_QWORD *)(v8 + 72);
  }
LABEL_4:
  *(_QWORD *)(v8 + 72) = v11 + v9;
  v12[0] = off_1E81A6E70;
  if (v14 == 1 && v13)
    MEMORY[0x1CAA32F9C](v13, 0x1000C8077774924);
  if (v16 != v18)
    free(v16);
  if (v15[0] != &v16)
    free(v15[0]);
}

__int128 *llvm::MCSubtargetInfo::InitMCProcessorInfo(uint64_t a1, _DWORD *a2, size_t a3, _DWORD *a4, size_t a5, const void *a6, size_t a7, uint64_t a8)
{
  __int128 v13;
  __int128 *p_dst;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  __int128 *result;
  __int128 __dst;
  __int128 v20;
  uint64_t v21;

  sub_1C5954E70((uint64_t)&__dst, a2, a3, a4, a5, (uint64_t)a6, a7, a8, *(uint64_t **)(a1 + 120), *(_QWORD *)(a1 + 128), *(const char ***)(a1 + 104), *(_QWORD *)(a1 + 112));
  v13 = v20;
  *(_OWORD *)(a1 + 192) = __dst;
  *(_OWORD *)(a1 + 208) = v13;
  *(_QWORD *)(a1 + 224) = v21;
  if (a7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a7 >= 0x17)
  {
    v15 = (a7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a7 | 7) != 0x17)
      v15 = a7 | 7;
    v16 = v15 + 1;
    p_dst = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&__dst + 1) = a7;
    *(_QWORD *)&v20 = v16 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  BYTE7(v20) = a7;
  p_dst = &__dst;
  if (a7)
LABEL_8:
    memmove(p_dst, a6, a7);
  *((_BYTE *)p_dst + a7) = 0;
  v17 = (void **)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    operator delete(*v17);
  *(_OWORD *)v17 = __dst;
  *(_QWORD *)(a1 + 248) = v20;
  if (a5)
    result = llvm::MCSubtargetInfo::getSchedModelForCPU(a1, a4, a5);
  else
    result = &llvm::MCSchedModel::Default;
  *(_QWORD *)(a1 + 160) = result;
  return result;
}

void sub_1C5954E70(uint64_t a1, _DWORD *a2, size_t a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, unint64_t a10, const char **a11, unint64_t a12)
{
  BOOL v17;
  const char **v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  void *v22;
  void *v23;
  void *v24;
  const char **v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  size_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  size_t v38;
  unint64_t v40;
  unsigned __int8 *v41;
  size_t v42;
  llvm *v43;
  BOOL v44;
  unsigned __int8 *v45;
  llvm::raw_ostream *v46;
  void *v47;
  uint64_t v48;
  const char **v49;
  llvm::raw_ostream *v50;
  _BYTE *v51;
  _BYTE *v52;
  const char *v53;
  llvm::raw_ostream *v54;
  llvm::raw_ostream *v55;
  _BYTE *v56;
  llvm::raw_ostream *v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;

  v60 = 0;
  v61 = 0;
  v62 = 0;
  llvm::SubtargetFeatures::Split(&v60, a6, a7);
  if (a10)
    v17 = a12 == 0;
  else
    v17 = 1;
  if (v17)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    goto LABEL_95;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a3)
  {
    if (a3 == 4 && *a2 == 1886152040)
    {
      sub_1C59563D8(a9, a10, a11, a12);
      if (!a5)
        goto LABEL_38;
      goto LABEL_25;
    }
    v18 = sub_1C5956214(a2, a3, (const char **)a9, a10);
    if (v18)
    {
      sub_1C5955938(a1, (uint64_t)(v18 + 1), (uint64_t)a11, a12);
      if (!a5)
        goto LABEL_38;
      goto LABEL_25;
    }
    v19 = (llvm::raw_ostream *)llvm::errs(0);
    v20 = v19;
    v21 = (_BYTE *)*((_QWORD *)v19 + 4);
    if (*((_BYTE **)v19 + 3) == v21)
    {
      llvm::raw_ostream::write(v19, "'", 1uLL);
      v22 = (void *)*((_QWORD *)v20 + 4);
    }
    else
    {
      *v21 = 39;
      v22 = (void *)(*((_QWORD *)v19 + 4) + 1);
      *((_QWORD *)v20 + 4) = v22;
    }
    if (a3 <= *((_QWORD *)v20 + 3) - (_QWORD)v22)
    {
      memcpy(v22, a2, a3);
      v23 = (void *)(*((_QWORD *)v20 + 4) + a3);
      *((_QWORD *)v20 + 4) = v23;
    }
    else
    {
      llvm::raw_ostream::write(v20, (const char *)a2, a3);
      v23 = (void *)*((_QWORD *)v20 + 4);
    }
    if (*((_QWORD *)v20 + 3) - (_QWORD)v23 > 0x2EuLL)
    {
      qmemcpy(v23, "' is not a recognized processor for this target", 47);
      v24 = (void *)(*((_QWORD *)v20 + 4) + 47);
      *((_QWORD *)v20 + 4) = v24;
    }
    else
    {
      llvm::raw_ostream::write(v20, "' is not a recognized processor for this target", 0x2FuLL);
      v24 = (void *)*((_QWORD *)v20 + 4);
    }
    if (*((_QWORD *)v20 + 3) - (_QWORD)v24 > 0x15uLL)
    {
      qmemcpy(v24, " (ignoring processor)\n", 22);
      *((_QWORD *)v20 + 4) += 22;
      if (!a5)
        goto LABEL_38;
      goto LABEL_25;
    }
    llvm::raw_ostream::write(v20, " (ignoring processor)\n", 0x16uLL);
  }
  if (!a5)
    goto LABEL_38;
LABEL_25:
  v25 = sub_1C5956214(a4, a5, (const char **)a9, a10);
  if (v25)
  {
    sub_1C5955938(a1, (uint64_t)(v25 + 6), (uint64_t)a11, a12);
  }
  else if (a5 != a3 || (v25 = (const char **)memcmp(a4, a2, a3), (_DWORD)v25))
  {
    v26 = (llvm::raw_ostream *)llvm::errs((llvm *)v25);
    v27 = v26;
    v28 = (_BYTE *)*((_QWORD *)v26 + 4);
    if (*((_BYTE **)v26 + 3) == v28)
    {
      llvm::raw_ostream::write(v26, "'", 1uLL);
      v29 = (void *)*((_QWORD *)v27 + 4);
    }
    else
    {
      *v28 = 39;
      v29 = (void *)(*((_QWORD *)v26 + 4) + 1);
      *((_QWORD *)v27 + 4) = v29;
    }
    if (a5 <= *((_QWORD *)v27 + 3) - (_QWORD)v29)
    {
      memcpy(v29, a4, a5);
      v30 = (void *)(*((_QWORD *)v27 + 4) + a5);
      *((_QWORD *)v27 + 4) = v30;
    }
    else
    {
      llvm::raw_ostream::write(v27, (const char *)a4, a5);
      v30 = (void *)*((_QWORD *)v27 + 4);
    }
    if (*((_QWORD *)v27 + 3) - (_QWORD)v30 > 0x28uLL)
    {
      qmemcpy(v30, "' is not a recognized processor for this ", 41);
      v31 = (void *)(*((_QWORD *)v27 + 4) + 41);
      *((_QWORD *)v27 + 4) = v31;
    }
    else
    {
      llvm::raw_ostream::write(v27, "' is not a recognized processor for this ", 0x29uLL);
      v31 = (void *)*((_QWORD *)v27 + 4);
    }
    if (*((_QWORD *)v27 + 3) - (_QWORD)v31 > 0x1BuLL)
    {
      qmemcpy(v31, "target (ignoring processor)\n", 28);
      *((_QWORD *)v27 + 4) += 28;
    }
    else
    {
      llvm::raw_ostream::write(v27, "target (ignoring processor)\n", 0x1CuLL);
    }
  }
LABEL_38:
  v59 = a1;
  v32 = v60;
  v33 = v61;
  if (v60 != v61)
  {
    while (1)
    {
      v34 = *(_BYTE *)(v32 + 23);
      v35 = v34 >= 0 ? v34 & 0x7F : *(_QWORD *)(v32 + 8);
      if (v35 == 8)
        break;
      if (v35 != 5)
        goto LABEL_64;
      v36 = *(unsigned __int8 *)(v32 + 23);
      v37 = (unsigned __int8 *)v32;
      if ((*(_BYTE *)(v32 + 23) & 0x80) != 0)
      {
        v37 = *(unsigned __int8 **)v32;
        v36 = *(_QWORD *)(v32 + 8);
      }
      v38 = v36 >= 5 ? 5 : v36;
      if (memcmp(v37, "+help", v38) || v36 != 5)
        goto LABEL_64;
      sub_1C59563D8(a9, a10, a11, a12);
LABEL_68:
      v32 += 24;
      if (v32 == v33)
        goto LABEL_95;
    }
    v40 = *(unsigned __int8 *)(v32 + 23);
    v41 = (unsigned __int8 *)v32;
    if ((*(_BYTE *)(v32 + 23) & 0x80) != 0)
    {
      v41 = *(unsigned __int8 **)v32;
      v40 = *(_QWORD *)(v32 + 8);
    }
    if (v40 >= 8)
      v42 = 8;
    else
      v42 = v40;
    v43 = (llvm *)memcmp(v41, "+cpuhelp", v42);
    if ((_DWORD)v43)
      v44 = 0;
    else
      v44 = v40 == 8;
    if (v44)
    {
      if ((byte_1EF8F5711 & 1) == 0)
      {
        v46 = (llvm::raw_ostream *)llvm::errs(v43);
        v47 = (void *)*((_QWORD *)v46 + 4);
        if (*((_QWORD *)v46 + 3) - (_QWORD)v47 > 0x20uLL)
        {
          qmemcpy(v47, "Available CPUs for this target:\n\n", 33);
          *((_QWORD *)v46 + 4) += 33;
        }
        else
        {
          v46 = llvm::raw_ostream::write(v46, "Available CPUs for this target:\n\n", 0x21uLL);
        }
        v48 = 96 * a10;
        v49 = (const char **)a9;
        do
        {
          v46 = (llvm::raw_ostream *)llvm::errs(v46);
          v50 = v46;
          v51 = (_BYTE *)*((_QWORD *)v46 + 4);
          if (*((_BYTE **)v46 + 3) == v51)
          {
            v46 = llvm::raw_ostream::write(v46, "\t", 1uLL);
            v52 = (_BYTE *)*((_QWORD *)v50 + 4);
          }
          else
          {
            *v51 = 9;
            v52 = (_BYTE *)(*((_QWORD *)v46 + 4) + 1);
            *((_QWORD *)v46 + 4) = v52;
          }
          v53 = *v49;
          if (*v49)
          {
            v46 = (llvm::raw_ostream *)strlen(*v49);
            v54 = v46;
            if ((unint64_t)v46 <= *((_QWORD *)v50 + 3) - (_QWORD)v52)
            {
              if (v46)
              {
                v46 = (llvm::raw_ostream *)memcpy(v52, v53, (size_t)v46);
                v52 = (char *)v54 + *((_QWORD *)v50 + 4);
                *((_QWORD *)v50 + 4) = v52;
              }
            }
            else
            {
              v46 = llvm::raw_ostream::write(v50, v53, (size_t)v46);
              v52 = (_BYTE *)*((_QWORD *)v50 + 4);
            }
          }
          if (*((_BYTE **)v50 + 3) == v52)
          {
            v46 = llvm::raw_ostream::write(v50, "\n", 1uLL);
          }
          else
          {
            *v52 = 10;
            ++*((_QWORD *)v50 + 4);
          }
          v49 += 12;
          v48 -= 96;
        }
        while (v48);
        v55 = (llvm::raw_ostream *)llvm::errs(v46);
        v56 = (_BYTE *)*((_QWORD *)v55 + 4);
        if ((unint64_t)v56 >= *((_QWORD *)v55 + 3))
        {
          v55 = llvm::raw_ostream::write(v55, 10);
        }
        else
        {
          *((_QWORD *)v55 + 4) = v56 + 1;
          *v56 = 10;
        }
        v57 = (llvm::raw_ostream *)llvm::errs(v55);
        v58 = (void *)*((_QWORD *)v57 + 4);
        if (*((_QWORD *)v57 + 3) - (_QWORD)v58 > 0x7DuLL)
        {
          qmemcpy(v58, "Use -mcpu or -mtune to specify the target's processor.\nFor example, clang --target=aarch64-unknown-linux-gui -mcpu=cortex-a35\n", 126);
          *((_QWORD *)v57 + 4) += 126;
        }
        else
        {
          llvm::raw_ostream::write(v57, "Use -mcpu or -mtune to specify the target's processor.\nFor example, clang --target=aarch64-unknown-linux-gui -mcpu=cortex-a35\n", 0x7EuLL);
        }
        byte_1EF8F5711 = 1;
      }
      goto LABEL_68;
    }
LABEL_64:
    if (v34 >= 0)
      v45 = (unsigned __int8 *)v32;
    else
      v45 = *(unsigned __int8 **)v32;
    sub_1C5955E70(v59, v45, v35, a11, a12);
    goto LABEL_68;
  }
LABEL_95:
  v63 = (void **)&v60;
  sub_1C4765410(&v63);
}

double llvm::MCSubtargetInfo::setDefaultFeatures(uint64_t a1, _DWORD *a2, size_t a3, const void *a4, size_t a5, const void *a6, size_t a7, uint64_t a8)
{
  __int128 v11;
  __int128 *p_dst;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  double result;
  __int128 __dst;
  __int128 v18;
  uint64_t v19;

  sub_1C5954E70((uint64_t)&__dst, a2, a3, a4, a5, (uint64_t)a6, a7, a8, *(uint64_t **)(a1 + 120), *(_QWORD *)(a1 + 128), *(const char ***)(a1 + 104), *(_QWORD *)(a1 + 112));
  v11 = v18;
  *(_OWORD *)(a1 + 192) = __dst;
  *(_OWORD *)(a1 + 208) = v11;
  *(_QWORD *)(a1 + 224) = v19;
  if (a7 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a7 >= 0x17)
  {
    v13 = (a7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a7 | 7) != 0x17)
      v13 = a7 | 7;
    v14 = v13 + 1;
    p_dst = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&__dst + 1) = a7;
    *(_QWORD *)&v18 = v14 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  BYTE7(v18) = a7;
  p_dst = &__dst;
  if (a7)
LABEL_8:
    memmove(p_dst, a6, a7);
  *((_BYTE *)p_dst + a7) = 0;
  v15 = (void **)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    operator delete(*v15);
  result = *(double *)&__dst;
  *(_OWORD *)v15 = __dst;
  *(_QWORD *)(a1 + 248) = v18;
  return result;
}

uint64_t llvm::MCSubtargetInfo::MCSubtargetInfo(uint64_t a1, __int128 *a2, void *__src, size_t __len, void *a5, size_t a6, const void *a7, size_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  size_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  BOOL v43;
  _DWORD *v44;
  size_t v45;
  size_t v46;
  char v47;
  BOOL v48;
  _DWORD *v49;
  size_t v50;
  size_t v51;
  void *__srca;
  const void *v54;

  *(_QWORD *)a1 = &off_1E8183140;
  v26 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)v26, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v27 = *a2;
    *(_QWORD *)(v26 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v26 = v27;
  }
  v28 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 32) = v28;
  if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_33:
    abort();
  v29 = (void *)(a1 + 56);
  v54 = a7;
  __srca = a5;
  if (__len >= 0x17)
  {
    v30 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v30 = __len | 7;
    v31 = v30 + 1;
    v29 = operator new(v30 + 1);
    *(_QWORD *)(a1 + 64) = __len;
    *(_QWORD *)(a1 + 72) = v31 | 0x8000000000000000;
    *(_QWORD *)(a1 + 56) = v29;
    goto LABEL_11;
  }
  *(_BYTE *)(a1 + 79) = __len;
  if (__len)
LABEL_11:
    memmove(v29, __src, __len);
  *((_BYTE *)v29 + __len) = 0;
  if (a6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_33;
  v32 = a12;
  v33 = a10;
  v34 = a17;
  v35 = a18;
  v36 = a16;
  v37 = (_DWORD *)(a1 + 80);
  if (a6 >= 0x17)
  {
    v39 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v39 = a6 | 7;
    v40 = v39 + 1;
    v38 = operator new(v39 + 1);
    v41 = v40 | 0x8000000000000000;
    v32 = a12;
    v35 = a18;
    v37 = (_DWORD *)(a1 + 80);
    v34 = a17;
    v33 = a10;
    v36 = a16;
    *(_QWORD *)(a1 + 88) = a6;
    *(_QWORD *)(a1 + 96) = v41;
    *(_QWORD *)(a1 + 80) = v38;
    goto LABEL_19;
  }
  *(_BYTE *)(a1 + 103) = a6;
  v38 = (void *)(a1 + 80);
  if (a6)
LABEL_19:
    memmove(v38, __srca, a6);
  *((_BYTE *)v38 + a6) = 0;
  *(_QWORD *)(a1 + 104) = a9;
  *(_QWORD *)(a1 + 112) = v33;
  *(_QWORD *)(a1 + 120) = a11;
  *(_QWORD *)(a1 + 128) = v32;
  *(_QWORD *)(a1 + 136) = a13;
  *(_QWORD *)(a1 + 144) = a14;
  *(_QWORD *)(a1 + 152) = a15;
  *(_QWORD *)(a1 + 168) = v36;
  *(_QWORD *)(a1 + 176) = v34;
  *(_QWORD *)(a1 + 184) = v35;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  v42 = *(_BYTE *)(a1 + 79);
  v43 = v42 < 0;
  if (v42 >= 0)
    v44 = (_DWORD *)(a1 + 56);
  else
    v44 = *(_DWORD **)(a1 + 56);
  v45 = v42 & 0x7F;
  if (v43)
    v46 = *(_QWORD *)(a1 + 64);
  else
    v46 = v45;
  v47 = *(_BYTE *)(a1 + 103);
  v48 = v47 < 0;
  if (v47 >= 0)
    v49 = v37;
  else
    v49 = *(_DWORD **)(a1 + 80);
  v50 = v47 & 0x7F;
  if (v48)
    v51 = *(_QWORD *)(a1 + 88);
  else
    v51 = v50;
  *(_OWORD *)(a1 + 224) = 0uLL;
  *(_OWORD *)(a1 + 240) = 0uLL;
  llvm::MCSubtargetInfo::InitMCProcessorInfo(a1, v44, v46, v49, v51, v54, a8, a8);
  return a1;
}

{
  return llvm::MCSubtargetInfo::MCSubtargetInfo(a1, a2, __src, __len, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

__n128 llvm::MCSubtargetInfo::ToggleFeature@<Q0>(__n128 *this@<X0>, unsigned int a2@<W1>, __n128 *a3@<X8>)
{
  __n128 result;
  __n128 v4;

  this[12].n128_u64[a2 >> 6] ^= 1 << a2;
  result = this[12];
  v4 = this[13];
  *a3 = result;
  a3[1] = v4;
  a3[2].n128_u64[0] = this[14].n128_u64[0];
  return result;
}

__n128 llvm::MCSubtargetInfo::ToggleFeature@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __n128 *v4;
  __n128 result;
  __int128 v6;

  v3 = 0;
  v4 = (__n128 *)(a1 + 192);
  do
  {
    v4->n128_u64[v3] ^= *(_QWORD *)(a2 + v3 * 8);
    ++v3;
  }
  while (v3 != 5);
  result = *v4;
  v6 = *(_OWORD *)(a1 + 208);
  *(__n128 *)a3 = *v4;
  *(_OWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(a1 + 224);
  return result;
}

__n128 llvm::MCSubtargetInfo::SetFeatureBitsTransitively@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  __int128 v6;

  sub_1C5955938(a1 + 192, a2, *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
  result = *(__n128 *)(a1 + 192);
  v6 = *(_OWORD *)(a1 + 208);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(a1 + 224);
  return result;
}

uint64_t sub_1C5955938(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;

  v7 = result;
  for (i = 0; i != 40; i += 8)
    *(_QWORD *)(result + i) |= *(_QWORD *)(a2 + i);
  if (a4)
  {
    v9 = a4 << 6;
    v10 = a3 + 24;
    do
    {
      if (((*(_QWORD *)(a2 + (((unint64_t)*(unsigned int *)(v10 - 8) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(v10 - 8)) & 1) != 0)
        result = sub_1C5955938(v7, v10, a3, a4);
      v10 += 64;
      v9 -= 64;
    }
    while (v9);
  }
  return result;
}

__n128 llvm::MCSubtargetInfo::ClearFeatureBitsTransitively@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;

  v6 = 0;
  v7 = a1 + 192;
  do
  {
    v8 = v6 >> 6;
    if (((1 << v6) & *(_QWORD *)(a2 + 8 * v8)) != 0)
    {
      *(_QWORD *)(v7 + 8 * v8) &= ~(1 << v6);
      sub_1C5955A60(v7, v6, *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
    }
    ++v6;
  }
  while (v6 != 320);
  result = *(__n128 *)v7;
  v10 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v7;
  *(_OWORD *)(a3 + 16) = v10;
  *(_QWORD *)(a3 + 32) = *(_QWORD *)(v7 + 32);
  return result;
}

uint64_t sub_1C5955A60(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v4 = result;
    v5 = 1 << a2;
    v6 = a2 >> 6;
    v7 = a4 << 6;
    v8 = a3 + 24;
    do
    {
      if ((*(_QWORD *)(v8 + 8 * v6) & v5) != 0)
      {
        *(_QWORD *)(v4 + (((unint64_t)*(unsigned int *)(v8 - 8) >> 3) & 0x1FFFFFF8)) &= ~(1 << *(_DWORD *)(v8 - 8));
        result = sub_1C5955A60(v4);
      }
      v8 += 64;
      v7 -= 64;
    }
    while (v7);
  }
  return result;
}

__n128 llvm::MCSubtargetInfo::ToggleFeature@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  const void *v9;
  size_t v10;
  unint64_t v11;
  const char **v12;
  const char **v13;
  const char **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  _BYTE *v22;
  void *v23;
  uint64_t v24;
  __n128 result;
  __int128 v26;

  v8 = *a2;
  if (v8 == 45 || (v9 = a2, v10 = a3, v8 == 43))
  {
    if (a3)
      v9 = a2 + 1;
    else
      v9 = a2;
    v10 = a3 - (a3 != 0);
  }
  v12 = *(const char ***)(a1 + 104);
  v11 = *(_QWORD *)(a1 + 112);
  v13 = sub_1C5955D00(v9, v10, v12, v11);
  if (v13)
  {
    v14 = v13;
    v15 = a1 + 192;
    v16 = *((unsigned int *)v14 + 4);
    v17 = 1 << v16;
    v18 = v16 >> 6;
    v19 = *(_QWORD *)(a1 + 192 + 8 * (v16 >> 6));
    if (((1 << v16) & v19) != 0)
    {
      *(_QWORD *)(v15 + 8 * v18) = v19 & ~v17;
      sub_1C5955A60(v15, v16, (uint64_t)v12, v11);
    }
    else
    {
      *(_QWORD *)(v15 + 8 * v18) = v17 | v19;
      sub_1C5955938(v15, (uint64_t)(v14 + 3), (uint64_t)v12, v11);
    }
  }
  else
  {
    v20 = (llvm::raw_ostream *)llvm::errs(0);
    v21 = v20;
    v22 = (_BYTE *)*((_QWORD *)v20 + 4);
    if (*((_BYTE **)v20 + 3) == v22)
    {
      llvm::raw_ostream::write(v20, "'", 1uLL);
      v23 = (void *)*((_QWORD *)v21 + 4);
    }
    else
    {
      *v22 = 39;
      v23 = (void *)(*((_QWORD *)v20 + 4) + 1);
      *((_QWORD *)v21 + 4) = v23;
    }
    if (a3 <= *((_QWORD *)v21 + 3) - (_QWORD)v23)
    {
      if (a3)
      {
        memcpy(v23, a2, a3);
        v23 = (void *)(*((_QWORD *)v21 + 4) + a3);
        *((_QWORD *)v21 + 4) = v23;
      }
    }
    else
    {
      llvm::raw_ostream::write(v21, (const char *)a2, a3);
      v23 = (void *)*((_QWORD *)v21 + 4);
    }
    if (*((_QWORD *)v21 + 3) - (_QWORD)v23 > 0x2CuLL)
    {
      qmemcpy(v23, "' is not a recognized feature for this target", 45);
      v24 = *((_QWORD *)v21 + 4) + 45;
      *((_QWORD *)v21 + 4) = v24;
    }
    else
    {
      llvm::raw_ostream::write(v21, "' is not a recognized feature for this target", 0x2DuLL);
      v24 = *((_QWORD *)v21 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v21 + 3) - v24) > 0x13)
    {
      *(_DWORD *)(v24 + 16) = 170485106;
      *(_OWORD *)v24 = *(_OWORD *)" (ignoring feature)\n";
      *((_QWORD *)v21 + 4) += 20;
    }
    else
    {
      llvm::raw_ostream::write(v21, " (ignoring feature)\n", 0x14uLL);
    }
  }
  result = *(__n128 *)(a1 + 192);
  v26 = *(_OWORD *)(a1 + 208);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v26;
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 224);
  return result;
}

const char **sub_1C5955D00(const void *a1, size_t a2, const char **a3, unint64_t a4)
{
  const char **v7;
  unint64_t v8;
  const char **v9;
  size_t v10;
  size_t v11;
  int v12;
  int v13;
  size_t v14;

  if (a4)
  {
    v7 = a3;
    v8 = a4;
    do
    {
      v9 = &v7[8 * (v8 >> 1)];
      if (*v9)
        v10 = strlen(*v9);
      else
        v10 = 0;
      if (a2 >= v10)
        v11 = v10;
      else
        v11 = a2;
      if (v11 && (v12 = memcmp(*v9, a1, v11)) != 0)
      {
        v13 = (v12 >> 31) | 1;
      }
      else
      {
        if (v10 < a2)
          v13 = -1;
        else
          v13 = 1;
        if (v10 == a2)
          v13 = 0;
      }
      if (v13 == -1)
        v8 += ~(v8 >> 1);
      else
        v8 >>= 1;
      if (v13 == -1)
        v7 = v9 + 8;
    }
    while (v8);
  }
  else
  {
    v7 = a3;
  }
  if (v7 == &a3[8 * a4])
    return 0;
  v14 = *v7 ? strlen(*v7) : 0;
  if (v14 != a2)
    return 0;
  if (a2 && memcmp(*v7, a1, a2))
    return 0;
  return v7;
}

__n128 llvm::MCSubtargetInfo::ApplyFeatureFlag@<Q0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result;
  __int128 v7;

  sub_1C5955E70(a1 + 192, a2, a3, *(const char ***)(a1 + 104), *(_QWORD *)(a1 + 112));
  result = *(__n128 *)(a1 + 192);
  v7 = *(_OWORD *)(a1 + 208);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v7;
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 224);
  return result;
}

double sub_1C5955E70(uint64_t a1, unsigned __int8 *a2, size_t a3, const char **a4, unint64_t a5)
{
  int v10;
  const void *v11;
  size_t v12;
  const char **v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  void *v22;
  uint64_t v23;

  v10 = *a2;
  if (v10 == 45 || (v11 = a2, v12 = a3, v10 == 43))
  {
    if (a3)
      v11 = a2 + 1;
    else
      v11 = a2;
    v12 = a3 - (a3 != 0);
  }
  v13 = sub_1C5955D00(v11, v12, a4, a5);
  if (v13)
  {
    v14 = *((unsigned int *)v13 + 4);
    v15 = v14 >> 6;
    v16 = *(_QWORD *)(a1 + 8 * (v14 >> 6));
    v17 = 1 << v14;
    if (v10 == 43)
    {
      *(_QWORD *)(a1 + 8 * v15) = v17 | v16;
      sub_1C5955938(a1, (uint64_t)(v13 + 3), (uint64_t)a4, a5);
    }
    else
    {
      *(_QWORD *)(a1 + 8 * v15) = v16 & ~v17;
      sub_1C5955A60(a1, v14, (uint64_t)a4, a5);
    }
  }
  else
  {
    v19 = (llvm::raw_ostream *)llvm::errs(0);
    v20 = v19;
    v21 = (_BYTE *)*((_QWORD *)v19 + 4);
    if (*((_BYTE **)v19 + 3) == v21)
    {
      llvm::raw_ostream::write(v19, "'", 1uLL);
      v22 = (void *)*((_QWORD *)v20 + 4);
    }
    else
    {
      *v21 = 39;
      v22 = (void *)(*((_QWORD *)v19 + 4) + 1);
      *((_QWORD *)v20 + 4) = v22;
    }
    if (a3 <= *((_QWORD *)v20 + 3) - (_QWORD)v22)
    {
      if (a3)
      {
        memcpy(v22, a2, a3);
        v22 = (void *)(*((_QWORD *)v20 + 4) + a3);
        *((_QWORD *)v20 + 4) = v22;
      }
    }
    else
    {
      llvm::raw_ostream::write(v20, (const char *)a2, a3);
      v22 = (void *)*((_QWORD *)v20 + 4);
    }
    if (*((_QWORD *)v20 + 3) - (_QWORD)v22 > 0x2CuLL)
    {
      qmemcpy(v22, "' is not a recognized feature for this target", 45);
      v23 = *((_QWORD *)v20 + 4) + 45;
      *((_QWORD *)v20 + 4) = v23;
    }
    else
    {
      llvm::raw_ostream::write(v20, "' is not a recognized feature for this target", 0x2DuLL);
      v23 = *((_QWORD *)v20 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v20 + 3) - v23) > 0x13)
    {
      *(_DWORD *)(v23 + 16) = 170485106;
      result = *(double *)" (ignoring feature)\n";
      *(_OWORD *)v23 = *(_OWORD *)" (ignoring feature)\n";
      *((_QWORD *)v20 + 4) += 20;
    }
    else
    {
      llvm::raw_ostream::write(v20, " (ignoring feature)\n", 0x14uLL);
    }
  }
  return result;
}

BOOL llvm::MCSubtargetInfo::checkFeatures(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t i;
  __int128 v6;
  unsigned __int8 *v7;
  size_t v8;
  char v9;
  unsigned __int8 *v10;
  void **v11;
  int v12;
  unsigned __int8 *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _BOOL8 v18;
  void *__p[2];
  __int128 v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;
  _OWORD __s2[2];
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  llvm::SubtargetFeatures::Split(&v27, a2, a3);
  v26 = 0;
  memset(__s2, 0, sizeof(__s2));
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v4 = v27;
  for (i = v28; v4 != i; v4 += 24)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      sub_1C47EBC30(__p, *(void **)v4, *(_QWORD *)(v4 + 8));
    }
    else
    {
      v6 = *(_OWORD *)v4;
      *(_QWORD *)&v21 = *(_QWORD *)(v4 + 16);
      *(_OWORD *)__p = v6;
    }
    if ((SBYTE7(v21) & 0x80u) == 0)
      v7 = (unsigned __int8 *)__p;
    else
      v7 = (unsigned __int8 *)__p[0];
    if ((SBYTE7(v21) & 0x80u) == 0)
      v8 = BYTE7(v21) & 0x7F;
    else
      v8 = (size_t)__p[1];
    sub_1C5955E70((uint64_t)__s2, v7, v8, *(const char ***)(a1 + 104), *(_QWORD *)(a1 + 112));
    v9 = BYTE7(v21);
    v10 = (unsigned __int8 *)__p[0];
    if ((SBYTE7(v21) & 0x80u) == 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if (*(_BYTE *)v11 == 45)
    {
      *(_BYTE *)v11 = 43;
      v9 = BYTE7(v21);
      v10 = (unsigned __int8 *)__p[0];
    }
    v12 = v9;
    if (v9 >= 0)
      v13 = (unsigned __int8 *)__p;
    else
      v13 = v10;
    v14 = (void *)(v9 & 0x7F);
    if (v12 >= 0)
      v15 = v14;
    else
      v15 = __p[1];
    sub_1C5955E70((uint64_t)v23, v13, (size_t)v15, *(const char ***)(a1 + 104), *(_QWORD *)(a1 + 112));
    if (SBYTE7(v21) < 0)
      operator delete(__p[0]);
  }
  v16 = 0;
  v17 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)__p = *(_OWORD *)(a1 + 192);
  v21 = v17;
  v22 = *(_QWORD *)(a1 + 224);
  do
  {
    __p[v16] = (void *)((unint64_t)__p[v16] & *(_QWORD *)((_BYTE *)v23 + v16 * 8));
    ++v16;
  }
  while (v16 != 5);
  v18 = memcmp(__p, __s2, 0x28uLL) == 0;
  *(_QWORD *)&__s2[0] = &v27;
  sub_1C4765410((void ***)__s2);
  return v18;
}

const char **sub_1C5956214(const void *a1, size_t a2, const char **a3, unint64_t a4)
{
  const char **v6;
  unint64_t v7;
  const char **v8;
  size_t v9;
  size_t v10;
  int v11;
  int v12;
  size_t v13;

  if (a4)
  {
    v6 = a3;
    v7 = a4;
    do
    {
      v8 = &v6[12 * (v7 >> 1)];
      if (*v8)
        v9 = strlen(*v8);
      else
        v9 = 0;
      if (a2 >= v9)
        v10 = v9;
      else
        v10 = a2;
      if (v10 && (v11 = memcmp(*v8, a1, v10)) != 0)
      {
        v12 = (v11 >> 31) | 1;
      }
      else
      {
        if (v9 < a2)
          v12 = -1;
        else
          v12 = 1;
        if (v9 == a2)
          v12 = 0;
      }
      if (v12 == -1)
        v7 += ~(v7 >> 1);
      else
        v7 >>= 1;
      if (v12 == -1)
        v6 = v8 + 12;
    }
    while (v7);
  }
  else
  {
    v6 = a3;
  }
  if (v6 == &a3[12 * a4])
    return 0;
  v13 = *v6 ? strlen(*v6) : 0;
  if (v13 != a2)
    return 0;
  if (a2 && memcmp(*v6, a1, a2))
    return 0;
  return v6;
}

__n128 llvm::MCSubtargetInfo::getInstrItineraryForCPU@<Q0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *SchedModelForCPU;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  SchedModelForCPU = llvm::MCSubtargetInfo::getSchedModelForCPU(a1, a2, a3);
  v7 = *(_QWORD *)(a1 + 184);
  result = *(__n128 *)(a1 + 168);
  v9 = SchedModelForCPU[3];
  *(_OWORD *)(a4 + 32) = SchedModelForCPU[2];
  *(_OWORD *)(a4 + 48) = v9;
  *(_QWORD *)(a4 + 64) = *((_QWORD *)SchedModelForCPU + 8);
  v10 = SchedModelForCPU[1];
  *(_OWORD *)a4 = *SchedModelForCPU;
  *(_OWORD *)(a4 + 16) = v10;
  *(__n128 *)(a4 + 72) = result;
  v11 = *(_QWORD *)(a4 + 56);
  *(_QWORD *)(a4 + 88) = v7;
  *(_QWORD *)(a4 + 96) = v11;
  return result;
}

__n128 llvm::MCSubtargetInfo::initInstrItins(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v3;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = *(__int128 **)(a1 + 160);
  v3 = *(_QWORD *)(a1 + 184);
  result = *(__n128 *)((char *)v2 + 56);
  v5 = *(_OWORD *)(a1 + 168);
  v6 = *v2;
  v7 = v2[1];
  v8 = v2[2];
  *(_QWORD *)(a2 + 48) = *((_QWORD *)v2 + 6);
  *(_OWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 32) = v8;
  *(_OWORD *)a2 = v6;
  *(__n128 *)(a2 + 56) = result;
  *(_OWORD *)(a2 + 72) = v5;
  *(_QWORD *)(a2 + 88) = v3;
  *(_QWORD *)(a2 + 96) = result.n128_u64[0];
  return result;
}

uint64_t *sub_1C59563D8(uint64_t *result, uint64_t a2, const char **a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  const char **v10;
  const char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  const char **v15;
  const char *v16;
  llvm::raw_ostream *v17;
  void *v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  llvm::raw_ostream *v24;
  void *v25;
  llvm::raw_ostream *v26;
  __int128 v27;
  llvm::raw_ostream *v28;
  _BYTE *v29;
  void *v30;
  uint64_t (**v31)(llvm::format_object_base *__hidden);
  const char *v32;
  int v33;
  __int128 v34;

  if ((byte_1EF8F5710 & 1) != 0)
    return result;
  v7 = result;
  if (a2)
  {
    v8 = 0;
    v9 = 96 * a2;
    v10 = (const char **)result;
    do
    {
      v11 = *v10;
      v10 += 12;
      result = (uint64_t *)strlen(v11);
      if (v8 <= result)
        v8 = result;
      v9 -= 96;
    }
    while (v9);
  }
  else
  {
    LODWORD(v8) = 0;
  }
  v12 = a4 << 6;
  if (a4)
  {
    v13 = 0;
    v14 = a4 << 6;
    v15 = a3;
    do
    {
      v16 = *v15;
      v15 += 8;
      result = (uint64_t *)strlen(v16);
      if (v13 <= result)
        v13 = result;
      v14 -= 64;
    }
    while (v14);
  }
  else
  {
    LODWORD(v13) = 0;
  }
  v17 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
  v18 = (void *)*((_QWORD *)v17 + 4);
  if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 0x20uLL)
  {
    qmemcpy(v18, "Available CPUs for this target:\n\n", 33);
    *((_QWORD *)v17 + 4) += 33;
  }
  else
  {
    v17 = llvm::raw_ostream::write(v17, "Available CPUs for this target:\n\n", 0x21uLL);
  }
  if (a2)
  {
    v19 = 96 * a2;
    do
    {
      v20 = (llvm::raw_ostream *)llvm::errs(v17);
      v31 = &off_1E81831B0;
      v21 = *v7;
      v7 += 12;
      v32 = "  %-*s - Select the %s processor.\n";
      v33 = (int)v8;
      *(_QWORD *)&v34 = v21;
      *((_QWORD *)&v34 + 1) = v21;
      v17 = llvm::raw_ostream::operator<<(v20, (uint64_t)&v31);
      v19 -= 96;
    }
    while (v19);
  }
  v22 = (llvm::raw_ostream *)llvm::errs(v17);
  v23 = (_BYTE *)*((_QWORD *)v22 + 4);
  if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
  {
    v22 = llvm::raw_ostream::write(v22, 10);
  }
  else
  {
    *((_QWORD *)v22 + 4) = v23 + 1;
    *v23 = 10;
  }
  v24 = (llvm::raw_ostream *)llvm::errs(v22);
  v25 = (void *)*((_QWORD *)v24 + 4);
  if (*((_QWORD *)v24 + 3) - (_QWORD)v25 > 0x24uLL)
  {
    qmemcpy(v25, "Available features for this target:\n\n", 37);
    *((_QWORD *)v24 + 4) += 37;
    if (!a4)
      goto LABEL_27;
  }
  else
  {
    v24 = llvm::raw_ostream::write(v24, "Available features for this target:\n\n", 0x25uLL);
    if (!a4)
      goto LABEL_27;
  }
  do
  {
    v26 = (llvm::raw_ostream *)llvm::errs(v24);
    v31 = &off_1E81831B0;
    v32 = "  %-*s - %s.\n";
    v33 = (int)v13;
    v27 = *(_OWORD *)a3;
    a3 += 8;
    v34 = v27;
    v24 = llvm::raw_ostream::operator<<(v26, (uint64_t)&v31);
    v12 -= 64;
  }
  while (v12);
LABEL_27:
  v28 = (llvm::raw_ostream *)llvm::errs(v24);
  v29 = (_BYTE *)*((_QWORD *)v28 + 4);
  if ((unint64_t)v29 >= *((_QWORD *)v28 + 3))
  {
    v28 = llvm::raw_ostream::write(v28, 10);
  }
  else
  {
    *((_QWORD *)v28 + 4) = v29 + 1;
    *v29 = 10;
  }
  result = (uint64_t *)llvm::errs(v28);
  v30 = (void *)result[4];
  if ((unint64_t)(result[3] - (_QWORD)v30) > 0x74)
  {
    qmemcpy(v30, "Use +feature to enable a feature, or -feature to disable it.\nFor example, llc -mcpu=mycpu -mattr=+feature1,-feature2\n", 117);
    result[4] += 117;
  }
  else
  {
    result = (uint64_t *)llvm::raw_ostream::write((llvm::raw_ostream *)result, "Use +feature to enable a feature, or -feature to disable it.\nFor example, llc -mcpu=mycpu -mattr=+feature1,-feature2\n", 0x75uLL);
  }
  byte_1EF8F5710 = 1;
  return result;
}

unint64_t llvm::MCSymbol::operator new(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1C484358C(a3 + 192, a1 + 8 * (a2 != 0), 3) + 8 * (a2 != 0);
}

uint64_t llvm::MCSymbol::setVariableValue(uint64_t this, const llvm::MCExpr *a2)
{
  *(_QWORD *)(this + 24) = a2;
  *(_DWORD *)(this + 8) = *(_DWORD *)(this + 8) & 0xFFFFE3FF | 0x800;
  *(_QWORD *)this &= 7uLL;
  return this;
}

uint64_t llvm::MCSymbolELF::setIsBindingSet(uint64_t this)
{
  *(_WORD *)(this + 12) |= 0x1000u;
  return this;
}

double llvm::MCTargetOptions::MCTargetOptions(llvm::MCTargetOptions *this)
{
  double result;

  *(_WORD *)this = *(_WORD *)this & 0xC000 | 0x1000;
  *(_QWORD *)((char *)this + 4) = 2;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  return result;
}

{
  double result;

  *(_WORD *)this = *(_WORD *)this & 0xC000 | 0x1000;
  *(_QWORD *)((char *)this + 4) = 2;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  return result;
}

char *llvm::MCTargetOptions::getAssemblyLanguage(llvm::MCTargetOptions *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *((_QWORD *)this + 5);
  v1 = (char *)this + 40;
  v2 = v3;
  if (v1[23] >= 0)
    return v1;
  return (char *)v2;
}

uint64_t llvm::mc::getRelaxAll(llvm::mc *this)
{
  return byte_1ED819918;
}

uint64_t llvm::mc::getExplicitRelaxAll(llvm::mc *this)
{
  if (word_1ED8198A0)
    return byte_1ED819918 | 0x100u;
  else
    return 0;
}

uint64_t llvm::mc::getIncrementalLinkerCompatible(llvm::mc *this)
{
  return byte_1ED8199D8;
}

uint64_t llvm::mc::getDwarfVersion(llvm::mc *this)
{
  return dword_1ED819A98;
}

uint64_t llvm::mc::getDwarf64(llvm::mc *this)
{
  return byte_1ED819B58;
}

uint64_t llvm::mc::getEmitDwarfUnwind(llvm::mc *this)
{
  return dword_1ED81A1A8;
}

uint64_t llvm::mc::getShowMCInst(llvm::mc *this)
{
  return byte_1ED819C18;
}

uint64_t llvm::mc::getFatalWarnings(llvm::mc *this)
{
  return byte_1ED819CD8;
}

uint64_t llvm::mc::getNoWarn(llvm::mc *this)
{
  return byte_1ED819D98;
}

uint64_t llvm::mc::getNoDeprecatedWarn(llvm::mc *this)
{
  return byte_1ED819E58;
}

uint64_t llvm::mc::getNoTypeCheck(llvm::mc *this)
{
  return byte_1ED819F18;
}

void *llvm::mc::getABIName@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *result;

  if (byte_1ED819FEF < 0)
    return sub_1C47EBC30((_BYTE *)a1, (void *)qword_1ED819FD8, qword_1ED819FE0);
  v2 = *(_QWORD *)(qword_1ED819798 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(qword_1ED819798 + 128);
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

void *llvm::mc::getAsSecureLogFile@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *result;

  if (byte_1ED81A0D7 < 0)
    return sub_1C47EBC30((_BYTE *)a1, (void *)qword_1ED81A0C0, qword_1ED81A0C8);
  v2 = *(_QWORD *)(qword_1ED8197A0 + 144);
  *(_OWORD *)a1 = *(_OWORD *)(qword_1ED8197A0 + 128);
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t llvm::mc::RegisterMCTargetOptionsFlags::RegisterMCTargetOptionsFlags(uint64_t this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  size_t v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD v60[2];
  __int128 v61;
  uint64_t (**v62)();
  int v63;
  char v64;
  __int128 v65;
  _QWORD v66[2];
  int v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  int v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  int v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load((unsigned __int8 *)&qword_1ED8197A8);
  if ((v1 & 1) == 0)
  {
    v14 = this;
    v15 = __cxa_guard_acquire(&qword_1ED8197A8);
    this = v14;
    if (v15)
    {
      *(_QWORD *)&v65 = "When used with filetype=obj, relax all fixups in the emitted object file";
      *((_QWORD *)&v65 + 1) = 72;
      sub_1C6136DA0((llvm::cl::Option *)algn_1ED819898, "mc-relax-all", &v65);
      __cxa_atexit((void (*)(void *))sub_1C484246C, algn_1ED819898, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED8197A8);
      this = v14;
    }
  }
  v2 = atomic_load((unsigned __int8 *)&qword_1ED8197B0);
  if ((v2 & 1) == 0)
  {
    v16 = this;
    v17 = __cxa_guard_acquire(&qword_1ED8197B0);
    this = v16;
    if (v17)
    {
      v18 = sub_1C47AD050((uint64_t)qword_1ED819958, 0, 0);
      byte_1ED8199D8 = 0;
      qword_1ED8199E8 = 0;
      qword_1ED8199E0 = (uint64_t)&off_1E7F9E8D8;
      qword_1ED819958[0] = (uint64_t)&unk_1E819E898;
      qword_1ED8199F0 = (uint64_t)&off_1E819E9A0;
      qword_1ED8199F8 = (uint64_t)&off_1E7F9E8F8;
      qword_1ED819A10 = (uint64_t)&qword_1ED8199F8;
      llvm::cl::Option::setArgStr(v18, "incremental-linker-compatible", 0x1DuLL);
      qword_1ED819978 = (uint64_t)"When used with filetype=obj, emit an object file which can be used with an incremental linker";
      unk_1ED819980 = 93;
      llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED819958);
      __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED819958, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED8197B0);
      this = v16;
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1ED8197B8);
  if ((v3 & 1) == 0)
  {
    v19 = this;
    v20 = __cxa_guard_acquire(&qword_1ED8197B8);
    this = v19;
    if (v20)
    {
      v21 = sub_1C47AD050((uint64_t)qword_1ED819A18, 0, 0);
      dword_1ED819A98 = 0;
      qword_1ED819AA8 = 0;
      qword_1ED819AA0 = (uint64_t)&off_1E7FA9DC8;
      qword_1ED819A18[0] = (uint64_t)&unk_1E819E418;
      qword_1ED819AB0 = (uint64_t)&unk_1E819E230;
      qword_1ED819AB8 = (uint64_t)&off_1E7FA9D80;
      qword_1ED819AD0 = (uint64_t)&qword_1ED819AB8;
      llvm::cl::Option::setArgStr(v21, "dwarf-version", 0xDuLL);
      qword_1ED819A38 = (uint64_t)"Dwarf version";
      qword_1ED819A40 = 13;
      dword_1ED819A98 = 0;
      BYTE4(qword_1ED819AA8) = 1;
      LODWORD(qword_1ED819AA8) = 0;
      llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED819A18);
      __cxa_atexit((void (*)(void *))sub_1C4A0083C, qword_1ED819A18, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED8197B8);
      this = v19;
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1ED8197C0);
  if ((v4 & 1) == 0)
  {
    v22 = this;
    v23 = __cxa_guard_acquire(&qword_1ED8197C0);
    this = v22;
    if (v23)
    {
      *(_QWORD *)&v65 = "Generate debugging info in the 64-bit DWARF format";
      *((_QWORD *)&v65 + 1) = 50;
      sub_1C6136DA0((llvm::cl::Option *)&unk_1ED819AD8, "dwarf64", &v65);
      __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED819AD8, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED8197C0);
      this = v22;
    }
  }
  v5 = atomic_load((unsigned __int8 *)&qword_1ED8197C8);
  if ((v5 & 1) == 0)
  {
    v59 = this;
    v24 = __cxa_guard_acquire(&qword_1ED8197C8);
    this = v59;
    if (v24)
    {
      *(_QWORD *)&v65 = v66;
      v66[0] = "always";
      v66[1] = 6;
      v67 = 0;
      v68 = "Always emit EH frame entries";
      v69 = 28;
      v70 = "no-compact-unwind";
      v71 = 17;
      v72 = 1;
      v73 = "Only emit EH frame entries when compact unwind is not available";
      v74 = 63;
      v75 = "default";
      v76 = 7;
      v77 = 2;
      v78 = "Use target platform default";
      v79 = 27;
      *((_QWORD *)&v65 + 1) = 0x400000003;
      v25 = sub_1C47AD050((uint64_t)qword_1ED81A128, 0, 0);
      dword_1ED81A1A8 = 0;
      qword_1ED81A1B0 = (uint64_t)&off_1E8183288;
      *(_QWORD *)&dword_1ED81A1B8 = 0;
      qword_1ED81A128[0] = (uint64_t)off_1E81831D0;
      qword_1ED81A1C0 = (uint64_t)&off_1E8183238;
      qword_1ED81A1C8 = (uint64_t)qword_1ED81A128;
      qword_1ED81A1D0 = (uint64_t)&unk_1ED81A1E0;
      qword_1ED81A1D8 = 0x800000000;
      qword_1ED81A360 = (uint64_t)&off_1E81832C8;
      qword_1ED81A378 = (uint64_t)&qword_1ED81A360;
      llvm::cl::Option::setArgStr(v25, "emit-dwarf-unwind", 0x11uLL);
      qword_1ED81A148 = (uint64_t)"Whether to emit DWARF EH frame entries.";
      unk_1ED81A150 = 39;
      dword_1ED81A1A8 = 2;
      byte_1ED81A1BC = 1;
      dword_1ED81A1B8 = 2;
      if (DWORD2(v65))
      {
        v26 = v65;
        v27 = v65 + 40 * DWORD2(v65);
        do
        {
          v28 = *(unsigned __int8 **)v26;
          v29 = *(_QWORD *)(v26 + 8);
          v30 = *(_DWORD *)(v26 + 16);
          v31 = *(_OWORD *)(v26 + 24);
          v60[0] = *(_QWORD *)v26;
          v60[1] = v29;
          v61 = v31;
          v62 = &off_1E8183288;
          v64 = 1;
          v63 = v30;
          v32 = qword_1ED81A1D0;
          if (qword_1ED81A1D8 >= HIDWORD(qword_1ED81A1D8))
          {
            v37 = qword_1ED81A1D8 + 1;
            if (qword_1ED81A1D0 <= (unint64_t)v60
              && qword_1ED81A1D0 + 48 * (unint64_t)qword_1ED81A1D8 > (unint64_t)v60)
            {
              v58 = (char *)v60 - qword_1ED81A1D0;
              sub_1C59579DC(v37);
              v32 = qword_1ED81A1D0;
              v33 = &v58[qword_1ED81A1D0];
              goto LABEL_28;
            }
            sub_1C59579DC(v37);
            v32 = qword_1ED81A1D0;
          }
          v33 = (char *)v60;
LABEL_28:
          v34 = v32 + 48 * qword_1ED81A1D8;
          v35 = *((_OWORD *)v33 + 1);
          *(_OWORD *)v34 = *(_OWORD *)v33;
          *(_OWORD *)(v34 + 16) = v35;
          *(_QWORD *)(v34 + 32) = &off_1E81832A8;
          v36 = *((_DWORD *)v33 + 10);
          *(_BYTE *)(v34 + 44) = v33[44];
          *(_DWORD *)(v34 + 40) = v36;
          *(_QWORD *)(v34 + 32) = &off_1E8183288;
          LODWORD(qword_1ED81A1D8) = qword_1ED81A1D8 + 1;
          llvm::cl::AddLiteralOption(qword_1ED81A1C8, v28, v29);
          v26 += 40;
        }
        while (v26 != v27);
      }
      llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED81A128);
      if ((_QWORD *)v65 != v66)
        free((void *)v65);
      __cxa_atexit((void (*)(void *))sub_1C5957414, qword_1ED81A128, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED8197C8);
      this = v59;
    }
  }
  v6 = atomic_load((unsigned __int8 *)&qword_1ED8197D0);
  if ((v6 & 1) == 0)
  {
    v38 = this;
    v39 = __cxa_guard_acquire(&qword_1ED8197D0);
    this = v38;
    if (v39)
    {
      *(_QWORD *)&v65 = "Emit internal instruction representation to assembly file";
      *((_QWORD *)&v65 + 1) = 57;
      sub_1C6136DA0((llvm::cl::Option *)&unk_1ED819B98, "asm-show-inst", &v65);
      __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED819B98, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED8197D0);
      this = v38;
    }
  }
  v7 = atomic_load((unsigned __int8 *)&qword_1ED8197D8);
  if ((v7 & 1) == 0)
  {
    v40 = this;
    v41 = __cxa_guard_acquire(&qword_1ED8197D8);
    this = v40;
    if (v41)
    {
      *(_QWORD *)&v65 = "Treat warnings as errors";
      *((_QWORD *)&v65 + 1) = 24;
      sub_1C6136DA0((llvm::cl::Option *)&unk_1ED819C58, "fatal-warnings", &v65);
      __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED819C58, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED8197D8);
      this = v40;
    }
  }
  v8 = atomic_load((unsigned __int8 *)&qword_1ED8197E0);
  if ((v8 & 1) == 0)
  {
    v42 = this;
    v43 = __cxa_guard_acquire(&qword_1ED8197E0);
    this = v42;
    if (v43)
    {
      *(_QWORD *)&v65 = "Suppress all warnings";
      *((_QWORD *)&v65 + 1) = 21;
      sub_1C6136DA0((llvm::cl::Option *)&unk_1ED819D18, "no-warn", &v65);
      __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED819D18, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED8197E0);
      this = v42;
    }
  }
  v9 = atomic_load((unsigned __int8 *)&qword_1ED8197E8);
  if ((v9 & 1) == 0)
  {
    v44 = this;
    v45 = __cxa_guard_acquire(&qword_1ED8197E8);
    this = v44;
    if (v45)
    {
      v46 = sub_1C47AD050((uint64_t)qword_1ED819810, 0, 1);
      qword_1ED819810[0] = (uint64_t)off_1E819E550;
      qword_1ED819890 = 0;
      llvm::cl::Option::setArgStr(v46, "W", 1uLL);
      qword_1ED819830 = (uint64_t)"Alias for --no-warn";
      unk_1ED819838 = 19;
      sub_1C62C1CFC(qword_1ED819810, (uint64_t)&unk_1ED819D18);
      sub_1C62C1BEC((llvm *)qword_1ED819810);
      __cxa_atexit((void (*)(void *))sub_1C62C1BE8, qword_1ED819810, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED8197E8);
      this = v44;
    }
  }
  v10 = atomic_load((unsigned __int8 *)&qword_1ED8197F0);
  if ((v10 & 1) == 0)
  {
    v47 = this;
    v48 = __cxa_guard_acquire(&qword_1ED8197F0);
    this = v47;
    if (v48)
    {
      v49 = sub_1C47AD050((uint64_t)qword_1ED819DD8, 0, 0);
      byte_1ED819E58 = 0;
      qword_1ED819E68 = 0;
      qword_1ED819E60 = (uint64_t)&off_1E7F9E8D8;
      qword_1ED819DD8[0] = (uint64_t)&unk_1E819E898;
      qword_1ED819E70 = (uint64_t)&off_1E819E9A0;
      qword_1ED819E78 = (uint64_t)&off_1E7F9E8F8;
      qword_1ED819E90 = (uint64_t)&qword_1ED819E78;
      llvm::cl::Option::setArgStr(v49, "no-deprecated-warn", 0x12uLL);
      qword_1ED819DF8 = (uint64_t)"Suppress all deprecated warnings";
      qword_1ED819E00 = 32;
      llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED819DD8);
      __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED819DD8, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED8197F0);
      this = v47;
    }
  }
  v11 = atomic_load((unsigned __int8 *)&qword_1ED8197F8);
  if ((v11 & 1) == 0)
  {
    v50 = this;
    v51 = __cxa_guard_acquire(&qword_1ED8197F8);
    this = v50;
    if (v51)
    {
      *(_QWORD *)&v65 = "Suppress type errors (Wasm)";
      *((_QWORD *)&v65 + 1) = 27;
      sub_1C6136DA0((llvm::cl::Option *)&unk_1ED819E98, "no-type-check", &v65);
      __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED819E98, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED8197F8);
      this = v50;
    }
  }
  v12 = atomic_load((unsigned __int8 *)&qword_1ED819800);
  if ((v12 & 1) == 0)
  {
    v52 = this;
    v53 = __cxa_guard_acquire(&qword_1ED819800);
    this = v52;
    if (v53)
    {
      *(_QWORD *)&v65 = "";
      v54 = sub_1C47AD050((uint64_t)&qword_1ED819F58, 0, 0);
      qword_1ED819FE0 = 0;
      qword_1ED819FD8 = 0;
      unk_1ED819FE8 = 0;
      qword_1ED819FF8 = 0;
      qword_1ED81A008 = 0;
      qword_1ED81A000 = 0;
      qword_1ED819FF0 = (uint64_t)&unk_1E819E950;
      byte_1ED81A010 = 0;
      qword_1ED819F58 = (uint64_t)&unk_1E819E480;
      qword_1ED81A018 = (uint64_t)&unk_1E819E970;
      qword_1ED81A020 = (uint64_t)&off_1E7FA8CB8;
      qword_1ED81A038 = (uint64_t)&qword_1ED81A020;
      llvm::cl::Option::setArgStr(v54, "target-abi", 0xAuLL);
      word_1ED819F62 = word_1ED819F62 & 0xFF9F | 0x20;
      qword_1ED819F78 = (uint64_t)"The name of the ABI to be targeted from the backend.";
      qword_1ED819F80 = 52;
      sub_1C49C7D74((const char **)&v65, (uint64_t)&qword_1ED819F58);
      llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED819F58);
      __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED819F58, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED819800);
      this = v52;
    }
  }
  qword_1ED819798 = (uint64_t)&qword_1ED819F58;
  v13 = atomic_load((unsigned __int8 *)&qword_1ED819808);
  if ((v13 & 1) == 0)
  {
    v55 = this;
    v56 = __cxa_guard_acquire(&qword_1ED819808);
    this = v55;
    if (v56)
    {
      v57 = sub_1C47AD050((uint64_t)&qword_1ED81A040, 0, 0);
      qword_1ED81A0C8 = 0;
      qword_1ED81A0C0 = 0;
      unk_1ED81A0D0 = 0;
      qword_1ED81A0E0 = 0;
      qword_1ED81A0F0 = 0;
      qword_1ED81A0E8 = 0;
      qword_1ED81A0D8 = (uint64_t)&unk_1E819E950;
      byte_1ED81A0F8 = 0;
      qword_1ED81A040 = (uint64_t)&unk_1E819E480;
      qword_1ED81A100 = (uint64_t)&unk_1E819E970;
      qword_1ED81A108 = (uint64_t)&off_1E7FA8CB8;
      qword_1ED81A120 = (uint64_t)&qword_1ED81A108;
      llvm::cl::Option::setArgStr(v57, "as-secure-log-file", 0x12uLL);
      qword_1ED81A060 = (uint64_t)"As secure log file name";
      qword_1ED81A068 = 23;
      word_1ED81A04A = word_1ED81A04A & 0xFF9F | 0x20;
      llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED81A040);
      __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED81A040, &dword_1C475E000);
      __cxa_guard_release(&qword_1ED819808);
      this = v55;
    }
  }
  qword_1ED8197A0 = (uint64_t)&qword_1ED81A040;
  return this;
}

_QWORD *sub_1C5957414(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81831D0;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8183238;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

double llvm::mc::InitMCTargetOptionsFromFlags@<D0>(uint64_t a1@<X8>)
{
  __int16 v3;
  __int16 v4;
  __int16 v5;
  __int16 v6;
  int v7;
  int v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  double result;
  __int128 v14;
  uint64_t v15;

  v3 = *(_WORD *)a1 & 0xC000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  v4 = v3 | byte_1ED819918 | (byte_1ED8199D8 << 8) | 0x1000;
  v5 = byte_1ED819B58 << 13;
  *(_DWORD *)(a1 + 8) = dword_1ED819A98;
  v6 = byte_1ED819C18 << 10;
  if (byte_1ED819FEF < 0)
  {
    sub_1C47EBC30(&v14, (void *)qword_1ED819FD8, qword_1ED819FE0);
  }
  else
  {
    v14 = *(_OWORD *)(qword_1ED819798 + 128);
    v15 = *(_QWORD *)(qword_1ED819798 + 144);
  }
  v7 = byte_1ED81A0D7;
  v8 = dword_1ED81A1A8;
  v9 = byte_1ED819F18 != 0;
  v10 = byte_1ED819E58 != 0;
  v11 = byte_1ED819D98 != 0;
  v12 = byte_1ED819CD8 != 0;
  *(_OWORD *)(a1 + 16) = v14;
  *(_QWORD *)(a1 + 32) = v15;
  *(_WORD *)a1 = v6 | v5 | v4 | (4 * v12) | (8 * v11) | (16 * v10) | (32 * v9);
  *(_DWORD *)(a1 + 4) = v8;
  if (v7 < 0)
  {
    sub_1C47EBC30(&v14, (void *)qword_1ED81A0C0, qword_1ED81A0C8);
  }
  else
  {
    v14 = *(_OWORD *)(qword_1ED8197A0 + 128);
    v15 = *(_QWORD *)(qword_1ED8197A0 + 144);
  }
  result = *(double *)&v14;
  *(_OWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 104) = v15;
  return result;
}

_QWORD *sub_1C5957618(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8183238;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C5957658(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v7 = a1;
  v18 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 176);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD *)(a1 + 168);
    while (1)
    {
      if (*(_QWORD *)(v12 + 8) == a4)
      {
        if (!a4)
          break;
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!(_DWORD)a1)
          break;
      }
      v12 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    v15 = *(_DWORD *)(v12 + 40);
    v18 = v15;
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    v22 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if ((llvm::cl::Option::error((_QWORD *)v7, (llvm::Twine *)v21, 0, 0, v13) & 1) != 0)
      return 1;
    v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  v16 = *(_QWORD *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C5957778(v17);
  }
}

uint64_t sub_1C5957778(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C5957790(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E81831D0;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  a1[19] = &off_1E8183238;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  sub_1C47A80D0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C5957820(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C595782C(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C595783C(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_5:
    v4 = &off_1E8183288;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_5;
  }
  return result;
}

uint64_t sub_1C59578A8(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C59578BC(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C59578C4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8183238;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5957914(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C595791C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C5957930(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C5957944(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C5957958(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1C5957988()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C595799C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81832C8;
  return result;
}

void sub_1C59579C0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81832C8;
}

void sub_1C59579DC(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED81A1D0, a1, 48, &v8);
  v2 = (_OWORD *)qword_1ED81A1D0;
  if ((_DWORD)qword_1ED81A1D8)
  {
    v3 = qword_1ED81A1D0 + 48 * qword_1ED81A1D8;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E81832A8;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E8183288;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1ED81A1D0;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1ED81A1E0)
    free(v2);
  qword_1ED81A1D0 = (uint64_t)v1;
  HIDWORD(qword_1ED81A1D8) = v7;
}

uint64_t llvm::MCValue::getAccessVariant(llvm::MCValue *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    LODWORD(v1) = *(_DWORD *)(v1 + 1);
  return (unsigned __int16)v1;
}

uint64_t llvm::MCWasmObjectTargetWriter::MCWasmObjectTargetWriter(uint64_t this, char a2, int a3)
{
  char v3;

  *(_QWORD *)this = off_1E8183310;
  if (a3)
    v3 = 2;
  else
    v3 = 0;
  *(_BYTE *)(this + 8) = v3 | a2 | *(_BYTE *)(this + 8) & 0xFC;
  return this;
}

uint64_t sub_1C5957AF8()
{
  return 7;
}

unint64_t llvm::MCWasmStreamer::mergeFragment(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  size_t v19;
  const void *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::MCSymbol **v27;
  uint64_t v28;
  llvm::MCSymbol *v29;
  int v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  v5 = *(unsigned int *)(result + 120);
  if (!(_DWORD)v5)
    goto LABEL_6;
  v6 = result;
  v7 = *(_QWORD *)(*(_QWORD *)(result + 112) + 32 * v5 - 32);
  if (!v7)
    goto LABEL_6;
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(unsigned int *)(result + 304);
  if (!(_DWORD)v9)
  {
    v10 = *(_DWORD *)(result + 416);
    goto LABEL_5;
  }
  v27 = *(llvm::MCSymbol ***)(result + 296);
  v28 = 8 * v9;
  do
  {
    v29 = *v27++;
    result = (unint64_t)llvm::MCSection::addPendingLabel((_DWORD *)v7, v29, *(_DWORD *)(v6 + 416));
    v28 -= 8;
  }
  while (v28);
  *(_DWORD *)(v6 + 304) = 0;
  v10 = *(_DWORD *)(v6 + 416);
  if (a2)
  {
LABEL_5:
    v11 = *(_DWORD *)(v7 + 160);
    if (v11)
    {
      v22 = *(_DWORD **)(v7 + 152);
      v23 = v22;
      do
      {
        if (v23[2] == v10)
        {
          v24 = *(uint64_t **)v23;
          *v24 = **(_QWORD **)v23 & 7 | a2;
          v24[3] = v8;
          *((_DWORD *)v24 + 2) = v24[1] & 0xFFFFE3FF | 0x400;
          v22 = *(_DWORD **)(v7 + 152);
          v25 = *(unsigned int *)(v7 + 160);
          v26 = (char *)&v22[4 * v25] - (char *)(v23 + 4);
          if (v26)
          {
            result = (unint64_t)memmove(v23, v23 + 4, v26 - 4);
            LODWORD(v25) = *(_DWORD *)(v7 + 160);
            v22 = *(_DWORD **)(v7 + 152);
          }
          v23 -= 4;
          v11 = v25 - 1;
          *(_DWORD *)(v7 + 160) = v11;
        }
        v23 += 4;
      }
      while (v23 != &v22[4 * v11]);
    }
    goto LABEL_6;
  }
  v30 = *(_DWORD *)(v7 + 160);
  if (v30)
  {
    v31 = *(_DWORD **)(v7 + 152);
    v32 = v31;
    do
    {
      if (v32[2] == v10)
      {
        v33 = *(uint64_t **)v32;
        *v33 = **(_QWORD **)v32 & 7;
        v33[3] = 0;
        *((_DWORD *)v33 + 2) = v33[1] & 0xFFFFE3FF | 0x400;
        v31 = *(_DWORD **)(v7 + 152);
        v34 = *(unsigned int *)(v7 + 160);
        v35 = (char *)&v31[4 * v34] - (char *)(v32 + 4);
        if (v35)
        {
          result = (unint64_t)memmove(v32, v32 + 4, v35 - 4);
          LODWORD(v34) = *(_DWORD *)(v7 + 160);
          v31 = *(_DWORD **)(v7 + 152);
        }
        v32 -= 4;
        v30 = v34 - 1;
        *(_DWORD *)(v7 + 160) = v30;
      }
      v32 += 4;
    }
    while (v32 != &v31[4 * v30]);
  }
LABEL_6:
  v12 = *(unsigned int *)(a3 + 128);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 24 * v12;
    do
    {
      v15 = *(_QWORD *)(a3 + 120) + v13;
      *(_DWORD *)(v15 + 8) += *(_DWORD *)(a2 + 72);
      result = sub_1C4926708(a2 + 120, v15, 1);
      v16 = *(_QWORD *)(a2 + 120) + 24 * *(unsigned int *)(a2 + 128);
      v17 = *(_OWORD *)result;
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(result + 16);
      *(_OWORD *)v16 = v17;
      ++*(_DWORD *)(a2 + 128);
      v13 += 24;
    }
    while (v14 != v13);
  }
  if (!*(_QWORD *)(a2 + 56))
  {
    v18 = *(_QWORD *)(a3 + 56);
    if (v18)
    {
      *(_BYTE *)(a2 + 50) = 1;
      *(_QWORD *)(a2 + 56) = v18;
    }
  }
  v20 = *(const void **)(a3 + 64);
  v19 = *(_QWORD *)(a3 + 72);
  v21 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a2 + 80) < v21 + v19)
  {
    result = (unint64_t)llvm::SmallVectorBase<unsigned long long>::grow_pod(a2 + 64, (void *)(a2 + 88), v21 + v19, 1);
    v21 = *(_QWORD *)(a2 + 72);
    if (!v19)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (v19)
  {
LABEL_14:
    result = (unint64_t)memcpy((void *)(*(_QWORD *)(a2 + 64) + v21), v20, v19);
    v21 = *(_QWORD *)(a2 + 72);
  }
LABEL_15:
  *(_QWORD *)(a2 + 72) = v21 + v19;
  return result;
}

void llvm::MCWasmStreamer::emitInstToData(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const llvm::MCExpr **v7;
  uint64_t v8;
  const llvm::MCExpr *v9;
  uint64_t DataFragment;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  size_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  int v22;
  void *v23;
  __int128 v24;
  _BYTE v25[256];
  const llvm::MCExpr **v26;
  uint64_t v27;
  _QWORD v28[13];

  v28[12] = *MEMORY[0x1E0C80C00];
  v6 = a1[34];
  v26 = (const llvm::MCExpr **)v28;
  v27 = 0x400000000;
  v23 = v25;
  v24 = xmmword_1C64638F0;
  sub_1C613932C((uint64_t)v20, (uint64_t)&v23);
  (*(void (**)(_QWORD, uint64_t, _QWORD *, const llvm::MCExpr ***, uint64_t))(**(_QWORD **)(v6 + 16) + 32))(*(_QWORD *)(v6 + 16), a2, v20, &v26, a3);
  if ((_DWORD)v27)
  {
    v7 = v26;
    v8 = 24 * v27;
    do
    {
      v9 = *v7;
      v7 += 3;
      llvm::MCWasmStreamer::fixSymbolsInTLSFixups(a1, v9);
      v8 -= 24;
    }
    while (v8);
  }
  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment((llvm::MCObjectStreamer *)a1, 0);
  if ((_DWORD)v27)
  {
    v11 = 0;
    v12 = 24 * v27;
    do
    {
      v13 = (char *)&v26[v11 / 8];
      *((_DWORD *)v13 + 2) = LODWORD(v26[v11 / 8 + 1]) + *(_DWORD *)(DataFragment + 72);
      v14 = sub_1C4926708(DataFragment + 120, (unint64_t)v13, 1);
      v15 = *(_QWORD *)(DataFragment + 120) + 24 * *(unsigned int *)(DataFragment + 128);
      v16 = *(_OWORD *)v14;
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 16);
      *(_OWORD *)v15 = v16;
      ++*(_DWORD *)(DataFragment + 128);
      v11 += 24;
    }
    while (v12 != v11);
  }
  *(_BYTE *)(DataFragment + 50) = 1;
  *(_QWORD *)(DataFragment + 56) = a3;
  v18 = v23;
  v17 = v24;
  v19 = *(_QWORD *)(DataFragment + 72);
  if (*(_QWORD *)(DataFragment + 80) < (unint64_t)(v19 + v24))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(DataFragment + 64, (void *)(DataFragment + 88), v19 + v24, 1);
    v19 = *(_QWORD *)(DataFragment + 72);
    if (!v17)
      goto LABEL_10;
    goto LABEL_9;
  }
  if ((_QWORD)v24)
  {
LABEL_9:
    memcpy((void *)(*(_QWORD *)(DataFragment + 64) + v19), v18, v17);
    v19 = *(_QWORD *)(DataFragment + 72);
  }
LABEL_10:
  *(_QWORD *)(DataFragment + 72) = v19 + v17;
  v20[0] = off_1E81A6E70;
  if (v22 == 1 && v21)
    MEMORY[0x1CAA32F9C](v21, 0x1000C8077774924);
  if (v23 != v25)
    free(v23);
  if (v26 != v28)
    free(v26);
}

void llvm::Win64EH::UnwindEmitter::Emit(llvm::Win64EH::UnwindEmitter *this, llvm::MCStreamer *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  llvm::MCSectionCOFF *v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  llvm::MCSectionCOFF *v12;
  uint64_t *v13;

  v2 = (uint64_t *)*((_QWORD *)a2 + 6);
  v3 = *((_QWORD *)a2 + 7) - (_QWORD)v2;
  if (v3)
  {
    v5 = (_DWORD *)((char *)a2 + 264);
    v6 = 8 * (v3 >> 3);
    do
    {
      v7 = sub_1C5953AB8(*((llvm::MCContext **)a2 + 1), v5, *(llvm::MCSectionCOFF **)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 168) + 680), *(_QWORD *)(*v2 + 56));
      (*(void (**)(llvm::MCStreamer *, llvm::MCSectionCOFF *, _QWORD))(*(_QWORD *)a2 + 168))(a2, v7, 0);
      v8 = *v2++;
      sub_1C59580B4((uint64_t)a2, v8);
      v6 -= 8;
    }
    while (v6);
    v9 = (uint64_t **)*((_QWORD *)a2 + 6);
    v10 = *((_QWORD *)a2 + 7) - (_QWORD)v9;
    if (v10)
    {
      v11 = 8 * (v10 >> 3);
      do
      {
        v12 = sub_1C5953AB8(*((llvm::MCContext **)a2 + 1), v5, *(llvm::MCSectionCOFF **)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 168) + 672), (*v9)[7]);
        (*(void (**)(llvm::MCStreamer *, llvm::MCSectionCOFF *, _QWORD))(*(_QWORD *)a2 + 168))(a2, v12, 0);
        v13 = *v9++;
        sub_1C5958594(a2, v13);
        v11 -= 8;
      }
      while (v11);
    }
  }
}

uint64_t sub_1C59580B4(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t TempSymbol;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  const char *v17;
  __int16 v18;

  if (!*(_QWORD *)(a2 + 48))
  {
    v3 = (_QWORD *)result;
    v4 = *(_QWORD *)(result + 8);
    v17 = "tmp";
    v18 = 259;
    TempSymbol = llvm::MCContext::createTempSymbol(v4, (uint64_t)&v17, 1);
    (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))(*v3 + 632))(v3, 4, 0, 1, 0);
    (*(void (**)(_QWORD *, unint64_t, _QWORD))(*v3 + 192))(v3, TempSymbol, 0);
    *(_QWORD *)(a2 + 48) = TempSymbol;
    if (*(_QWORD *)(a2 + 80))
    {
      v6 = 33;
    }
    else
    {
      if (*(_BYTE *)(a2 + 68))
        v7 = 17;
      else
        v7 = 1;
      if (*(_BYTE *)(a2 + 69))
        v6 = v7 | 8;
      else
        v6 = v7;
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*v3 + 512))(v3, v6, 1);
    v8 = *(_QWORD *)(a2 + 40);
    if (v8)
      sub_1C5959920(v3, v8, *(_QWORD *)a2);
    else
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*v3 + 512))(v3, 0, 1);
    v9 = *(_QWORD *)(a2 + 88);
    if (v9 != *(_QWORD *)(a2 + 96))
      __asm { BR              X14 }
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*v3 + 512))(v3, 0, 1);
    v10 = *(_DWORD *)(a2 + 72);
    v16 = v4;
    if ((v10 & 0x80000000) != 0)
      v11 = 0;
    else
      v11 = *(_DWORD *)(*(_QWORD *)(a2 + 88) + 24 * v10 + 8) & 0xF0 | *(_DWORD *)(*(_QWORD *)(a2 + 88)
                                                                                  + 24 * v10
                                                                                  + 12) & 0xFu;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v3 + 512))(v3, v11, 1);
    if (-85 * ((*(_DWORD *)(a2 + 96) - *(_DWORD *)(a2 + 88)) >> 3))
    {
      v12 = *(unsigned int *)(*(_QWORD *)(a2 + 96) - 8);
      *(_QWORD *)(a2 + 96) -= 24;
      __asm { BR              X8 }
    }
    if ((v6 & 0x20) != 0)
    {
      return sub_1C5958594(v3, *(uint64_t **)(a2 + 80));
    }
    else if ((v6 & 0x18) != 0)
    {
      v13 = *(_QWORD *)(a2 + 24);
      v14 = sub_1C484358C(v16 + 192, 24, 3);
      if (*(_BYTE *)(*(_QWORD *)(v16 + 152) + 18))
        v15 = 65651;
      else
        v15 = 115;
      *(_BYTE *)v14 = 2;
      *(_DWORD *)(v14 + 1) = v15 | (*(unsigned __int8 *)(v14 + 4) << 24);
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = v13;
      return (*(uint64_t (**)(_QWORD *, unint64_t, uint64_t, _QWORD))(*v3 + 504))(v3, v14, 4, 0);
    }
    else
    {
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*v3 + 512))(v3, 0, 4);
    }
  }
  return result;
}

uint64_t sub_1C5958594(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;

  v4 = a1[1];
  (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))(*a1 + 632))(a1, 4, 0, 1, 0);
  sub_1C5959A14(a1, *a2, *a2);
  sub_1C5959A14(a1, *a2, a2[1]);
  v5 = a2[6];
  v6 = sub_1C484358C(v4 + 192, 24, 3);
  if (*(_BYTE *)(*(_QWORD *)(v4 + 152) + 18))
    v7 = 65651;
  else
    v7 = 115;
  *(_BYTE *)v6 = 2;
  *(_DWORD *)(v6 + 1) = v7 | (*(unsigned __int8 *)(v6 + 4) << 24);
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v5;
  return (*(uint64_t (**)(_QWORD *, unint64_t, uint64_t, _QWORD))(*a1 + 504))(a1, v6, 4, 0);
}

uint64_t llvm::Win64EH::UnwindEmitter::EmitUnwindInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::MCSectionCOFF *v5;

  v5 = sub_1C5953AB8(*(llvm::MCContext **)(a2 + 8), (_DWORD *)(a2 + 264), *(llvm::MCSectionCOFF **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 168) + 680), *(_QWORD *)(a3 + 56));
  (*(void (**)(uint64_t, llvm::MCSectionCOFF *, _QWORD))(*(_QWORD *)a2 + 168))(a2, v5, 0);
  return sub_1C59580B4(a2, a3);
}

void llvm::Win64EH::ARM64UnwindEmitter::Emit(llvm::Win64EH::ARM64UnwindEmitter *this, llvm::MCStreamer *a2)
{
  uint64_t **v2;
  uint64_t **v3;
  _DWORD *v5;
  uint64_t *v6;
  llvm::MCSectionCOFF *v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::MCSectionCOFF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;

  v2 = (uint64_t **)*((_QWORD *)a2 + 6);
  v3 = (uint64_t **)*((_QWORD *)a2 + 7);
  if (v3 != v2)
  {
    v5 = (_DWORD *)((char *)a2 + 264);
    do
    {
      v6 = *v2;
      if ((*v2)[11] == (*v2)[12])
      {
        for (i = v6[17]; i != v6[18]; i += 32)
        {
          if (*(_QWORD *)(i + 8) != *(_QWORD *)(i + 16))
            goto LABEL_4;
        }
      }
      else
      {
LABEL_4:
        v7 = sub_1C5953AB8(*((llvm::MCContext **)a2 + 1), v5, *(llvm::MCSectionCOFF **)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 168) + 680), v6[7]);
        (*(void (**)(llvm::MCStreamer *, llvm::MCSectionCOFF *, _QWORD))(*(_QWORD *)a2 + 168))(a2, v7, 0);
        sub_1C5958888((uint64_t)a2, (uint64_t)v6, 1);
      }
      ++v2;
    }
    while (v2 != v3);
    v9 = (uint64_t *)*((_QWORD *)a2 + 6);
    v10 = *((_QWORD *)a2 + 7) - (_QWORD)v9;
    if (v10)
    {
      v11 = 8 * (v10 >> 3);
      do
      {
        v12 = *v9;
        if (*(_QWORD *)(*v9 + 48))
        {
          v13 = sub_1C5953AB8(*((llvm::MCContext **)a2 + 1), v5, *(llvm::MCSectionCOFF **)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 168) + 672), *(_QWORD *)(v12 + 56));
          (*(void (**)(llvm::MCStreamer *, llvm::MCSectionCOFF *, _QWORD))(*(_QWORD *)a2 + 168))(a2, v13, 0);
          v14 = *((_QWORD *)a2 + 1);
          (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 632))(a2, 4, 0, 1, 0);
          sub_1C5959A14(a2, *(_QWORD *)v12, *(_QWORD *)v12);
          v15 = *(unsigned int *)(v12 + 64);
          if ((_DWORD)v15)
          {
            (*(void (**)(llvm::MCStreamer *, uint64_t, uint64_t))(*(_QWORD *)a2 + 512))(a2, v15, 4);
          }
          else
          {
            v16 = *(_QWORD *)(v12 + 48);
            v17 = sub_1C484358C(v14 + 192, 24, 3);
            if (*(_BYTE *)(*(_QWORD *)(v14 + 152) + 18))
              v18 = 65651;
            else
              v18 = 115;
            *(_BYTE *)v17 = 2;
            *(_DWORD *)(v17 + 1) = v18 | (*(unsigned __int8 *)(v17 + 4) << 24);
            *(_QWORD *)(v17 + 8) = 0;
            *(_QWORD *)(v17 + 16) = v16;
            (*(void (**)(llvm::MCStreamer *, unint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 504))(a2, v17, 4, 0);
          }
        }
        ++v9;
        v11 -= 8;
      }
      while (v11);
    }
  }
}

uint64_t sub_1C5958888(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v26;
  int v27;
  int v28;
  uint64_t v30;
  unint64_t TempSymbol;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  uint64_t *j;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  BOOL v80;
  int v81;
  int v82;
  _DWORD *v83;
  _DWORD *v84;
  int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v95;
  unint64_t v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t *v109;
  uint64_t v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t i;
  void *v121;
  _DWORD *v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  _DWORD *v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  int v139;
  BOOL v140;
  int v141;
  unsigned int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  char *v147;
  uint64_t v148;
  int v149;
  int v150;
  unsigned int v151;
  uint64_t *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156[2];
  const char *v157;
  void *__p;
  _DWORD *v159;
  uint64_t v160;
  __int128 v161;
  _QWORD *v162;
  uint64_t v163;
  __int16 v164;
  _QWORD v165[2];

  if (*(_QWORD *)(a2 + 48))
    return result;
  v5 = result;
  v6 = *(_DWORD **)(a2 + 88);
  v7 = *(_DWORD **)(a2 + 96);
  if (v6 != v7)
  {
    if (!*(_BYTE *)(a2 + 70))
    {
      v8 = -1;
      v9 = -1;
      while (1)
      {
        v10 = v6[4];
        if (v10 == 18)
        {
          v11 = v6[3];
          if (v11 != 29)
          {
            v13 = 0;
            if (v11 != 19 || v6[2] > 0xF8u)
              goto LABEL_29;
            v13 = 0;
            *(_QWORD *)(v6 + 3) = 0xCFFFFFFFFLL;
            goto LABEL_32;
          }
          *(_QWORD *)(v6 + 3) = 0xDFFFFFFFFLL;
          goto LABEL_28;
        }
        if (v10 == 17)
          break;
        if (v10 == 25 && v6[2] == 0)
        {
          v6[4] = 24;
LABEL_28:
          v11 = -1;
          v13 = -1;
          goto LABEL_29;
        }
        if (v10 == 12)
        {
          v13 = 0;
LABEL_32:
          v11 = 19;
          goto LABEL_29;
        }
        if (v10 != 28)
          goto LABEL_28;
        v11 = v9 + 2;
        v13 = v8 + 16;
LABEL_29:
        v6 += 6;
        v8 = v13;
        v9 = v11;
        if (v6 == v7)
        {
          v17 = *(_QWORD *)(a2 + 136);
          v18 = *(_QWORD *)(a2 + 144);
          goto LABEL_33;
        }
      }
      v11 = v6[3];
      if (v11 != 29)
      {
        v14 = v9 + 2;
        v13 = v6[2];
        v15 = v8 + 16;
        if (v11 == v14 && v13 == v15)
        {
          v6[4] = 28;
          *((_QWORD *)v6 + 1) = 0xFFFFFFFF00000000;
        }
        goto LABEL_29;
      }
      *(_QWORD *)(v6 + 3) = 0xEFFFFFFFFLL;
      goto LABEL_28;
    }
LABEL_177:
    v101 = *(_QWORD *)(result + 8);
    v102 = *(_BYTE **)(a2 + 32);
    if ((*v102 & 4) != 0)
    {
      v109 = (uint64_t *)*((_QWORD *)v102 - 1);
      v110 = *v109;
      v103 = v109 + 2;
      v104 = v110;
    }
    else
    {
      v103 = 0;
      v104 = 0;
    }
    v164 = 1283;
    *(_QWORD *)&v161 = "Earlier .seh_handlerdata for ";
    v162 = v103;
    v163 = v104;
    v156[0] = (uint64_t)&v161;
    v157 = " skipped due to no unwind info at the time (.seh_handlerdata too early?), but the function later did get unwi"
           "nd info that can't be emitted";
    LOWORD(v159) = 770;
    return llvm::MCContext::reportError(v101, 0, (uint64_t)v156);
  }
  v17 = *(_QWORD *)(a2 + 136);
  v18 = *(_QWORD *)(a2 + 144);
  if (v17 == v18)
  {
LABEL_121:
    *(_BYTE *)(a2 + 70) = 1;
    return result;
  }
  v77 = *(_QWORD *)(a2 + 136);
  while (*(_QWORD *)(v77 + 8) == *(_QWORD *)(v77 + 16))
  {
    v77 += 32;
    if (v77 == v18)
      goto LABEL_121;
  }
  if (*(_BYTE *)(a2 + 70))
    goto LABEL_177;
LABEL_33:
  if (v17 != v18)
  {
    while (1)
    {
      v20 = *(_QWORD *)(v17 + 8);
      v19 = *(_QWORD *)(v17 + 16);
      if (v19 != v20)
        break;
LABEL_64:
      v17 += 32;
      if (v17 == v18)
        goto LABEL_65;
    }
    v21 = -1;
    v22 = -1;
    while (1)
    {
      v23 = *(_DWORD *)(v19 - 8);
      if (v23 == 18)
      {
        v24 = *(_DWORD *)(v19 - 12);
        if (v24 != 29)
        {
          v26 = 0;
          if (v24 != 19 || *(_DWORD *)(v19 - 16) > 0xF8u)
            goto LABEL_60;
          v26 = 0;
          *(_QWORD *)(v19 - 12) = 0xCFFFFFFFFLL;
          goto LABEL_63;
        }
        *(_QWORD *)(v19 - 12) = 0xDFFFFFFFFLL;
        goto LABEL_59;
      }
      if (v23 == 17)
        break;
      if (v23 == 25 && *(_DWORD *)(v19 - 16) == 0)
      {
        *(_DWORD *)(v19 - 8) = 24;
LABEL_59:
        v24 = -1;
        v26 = -1;
        goto LABEL_60;
      }
      if (v23 == 12)
      {
        v26 = 0;
LABEL_63:
        v24 = 19;
        goto LABEL_60;
      }
      if (v23 != 28)
        goto LABEL_59;
      v24 = v22 + 2;
      v26 = v21 + 16;
LABEL_60:
      v19 -= 24;
      v21 = v26;
      v22 = v24;
      if (v19 == v20)
        goto LABEL_64;
    }
    v24 = *(_DWORD *)(v19 - 12);
    if (v24 != 29)
    {
      v27 = v22 + 2;
      v26 = *(_DWORD *)(v19 - 16);
      v28 = v21 + 16;
      if (v24 == v27 && v26 == v28)
      {
        *(_DWORD *)(v19 - 8) = 28;
        *(_QWORD *)(v19 - 16) = 0xFFFFFFFF00000000;
      }
      goto LABEL_60;
    }
    *(_QWORD *)(v19 - 12) = 0xEFFFFFFFFLL;
    goto LABEL_59;
  }
LABEL_65:
  v30 = *(_QWORD *)(result + 8);
  v156[0] = (uint64_t)"tmp";
  LOWORD(v159) = 259;
  TempSymbol = llvm::MCContext::createTempSymbol(v30, (uint64_t)v156, 1);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v5 + 632))(v5, 4, 0, 1, 0);
  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v5 + 192))(v5, TempSymbol, 0);
  *(_QWORD *)(a2 + 48) = TempSymbol;
  v32 = *(_QWORD *)(a2 + 16);
  if (!v32)
  {
    v147 = "FuncletOrFuncEnd not set";
    goto LABEL_315;
  }
  v148 = v30;
  v33 = sub_1C5959B78(v5, v32, *(_QWORD *)a2);
  if (v33 >= 0x100000)
    goto LABEL_313;
  v34 = v33;
  v153 = (uint64_t *)(a2 + 112);
  v35 = *(_QWORD *)(a2 + 88);
  v36 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 96) - v35) >> 3);
  v37 = sub_1C5959C90(v35, v36);
  v38 = *(uint64_t **)(a2 + 136);
  v154 = a2;
  if (*(_QWORD *)(a2 + 144) - (_QWORD)v38 == 32)
  {
    v39 = v38[1];
    v40 = 0xAAAAAAAAAAAAAAABLL * ((v38[2] - v39) >> 3);
    if (v40 <= v36)
    {
      v98 = v40 - 1;
      while ((v98 & 0x80000000) == 0)
      {
        v99 = v98;
        v100 = v40 + ~(unint64_t)v98;
        if (*(_DWORD *)(v35 + 24 * v98 + 8) == *(_DWORD *)(v39 + 24 * v100 + 8)
          && *(_DWORD *)(v35 + 24 * v98 + 12) == *(_DWORD *)(v39 + 24 * v100 + 12))
        {
          --v98;
          if (*(_DWORD *)(v35 + 24 * v99 + 16) == *(_DWORD *)(v39 + 24 * v100 + 16))
            continue;
        }
        goto LABEL_69;
      }
      v105 = sub_1C5959B78(v5, *(_QWORD *)(a2 + 16), *v38) >> 2;
      if (v105 == 0xAAAAAAAAAAAAAAABLL * ((v38[2] - v38[1]) >> 3))
      {
        v106 = *(_QWORD *)(a2 + 88);
        v107 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 96) - v106) >> 3);
        if (v107 == v105)
          v108 = 0;
        else
          v108 = sub_1C5959C90(v106 + 24 * v105, v107 - v105);
        v41 = 0;
        v42 = -1;
        if (v37 > 124 || v108 > 31)
          goto LABEL_70;
        v111 = *(_DWORD *)(a2 + 120);
        if (v111)
        {
          v112 = *(_DWORD *)(a2 + 128);
          if (v112 > 4 * v111 && v112 >= 0x41)
          {
            v113 = 1 << (33 - __clz(v111 - 1));
            if (v113 <= 64)
              v114 = 64;
            else
              v114 = v113;
LABEL_196:
            if (v114 == v112)
            {
              *(_QWORD *)(a2 + 120) = 0;
              v115 = 16 * v112;
              v116 = *(_QWORD **)(a2 + 112);
              do
              {
                *v116 = -4096;
                v116 += 2;
                v115 -= 16;
              }
              while (v115);
            }
            else
            {
              MEMORY[0x1CAA32FB4](*v153, 8);
              if (v114)
              {
                v123 = (4 * v114 / 3u + 1) | ((unint64_t)(4 * v114 / 3u + 1) >> 1);
                v124 = v123 | (v123 >> 2) | ((v123 | (v123 >> 2)) >> 4);
                LODWORD(v124) = (((v124 | (v124 >> 8)) >> 16) | v124 | (v124 >> 8)) + 1;
                *(_DWORD *)(a2 + 128) = v124;
                v125 = operator new(16 * v124, (std::align_val_t)8uLL);
                *(_QWORD *)(a2 + 112) = v125;
                *(_QWORD *)(a2 + 120) = 0;
                v126 = *(unsigned int *)(a2 + 128);
                if ((_DWORD)v126)
                {
                  v127 = 16 * v126;
                  do
                  {
                    *v125 = -4096;
                    v125 += 2;
                    v127 -= 16;
                  }
                  while (v127);
                }
              }
              else
              {
                *v153 = 0;
                *(_QWORD *)(a2 + 120) = 0;
                *(_DWORD *)(a2 + 128) = 0;
              }
            }
            goto LABEL_204;
          }
        }
        else
        {
          if (!*(_DWORD *)(a2 + 124))
            goto LABEL_204;
          v112 = *(_DWORD *)(a2 + 128);
          if (v112 > 0x40)
          {
            v114 = 0;
            goto LABEL_196;
          }
        }
        if (v112)
        {
          v117 = (_QWORD *)*v153;
          v118 = 16 * v112;
          do
          {
            *v117 = -4096;
            v117 += 2;
            v118 -= 16;
          }
          while (v118);
        }
        *(_QWORD *)(a2 + 120) = 0;
LABEL_204:
        v119 = *(_QWORD *)(a2 + 136);
        for (i = *(_QWORD *)(a2 + 144); i != v119; i -= 32)
        {
          v121 = *(void **)(i - 24);
          if (v121)
          {
            *(_QWORD *)(i - 16) = v121;
            operator delete(v121);
          }
        }
        *(_QWORD *)(a2 + 144) = v119;
        if (v108 < 0)
        {
          v41 = 0;
        }
        else
        {
          v41 = 1;
          if (!(v34 >> 13) && !*(_BYTE *)(a2 + 69) && a3)
          {
            if (v108 == 1)
            {
              v122 = *(_DWORD **)(a2 + 96);
              if (*(v122 - 2) != 24)
              {
                v42 = 1;
                goto LABEL_70;
              }
              goto LABEL_224;
            }
            if (!v108)
            {
              v122 = *(_DWORD **)(a2 + 96);
LABEL_224:
              v128 = *(_DWORD **)(a2 + 88);
              if (v128 != v122)
              {
                v129 = 0;
                v130 = 0;
                v131 = 0;
                v132 = 0;
                v133 = 0;
                v134 = 0;
                v135 = 0;
                v136 = 0;
                while (2)
                {
                  v41 = 1;
                  result = v135;
                  v42 = v108;
                  switch(v128[4])
                  {
                    case 2:
                    case 0xB:
                      if ((v135 - 6) < 0xFFFFFFFB)
                        goto LABEL_217;
                      if (v132 == 4080)
                      {
                        v132 = v128[2] + 4080;
                      }
                      else
                      {
                        if (v132)
                          goto LABEL_217;
                        v132 = v128[2];
                      }
                      result = 5;
                      goto LABEL_283;
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 0xA:
                    case 0x19:
                      goto LABEL_283;
                    case 0xC:
                      if ((_DWORD)v135 != 1)
                        goto LABEL_217;
                      v136 = v128[2];
                      result = 2;
                      v129 = 2;
                      goto LABEL_283;
                    case 0xD:
                      if ((v135 - 5) < 0xFFFFFFFC)
                        goto LABEL_217;
                      v132 = v128[2];
                      v133 = 1;
LABEL_237:
                      result = 6;
                      goto LABEL_283;
                    case 0xE:
                      v133 = 1;
                      if ((_DWORD)v135 == 5 && !v128[2])
                        goto LABEL_237;
                      goto LABEL_217;
                    case 0xF:
                      if ((_DWORD)v135 != 2 || v128[2] != 8 * v129)
                        goto LABEL_217;
                      v137 = v128[3];
                      if (v137 == v129 + 19)
                        goto LABEL_246;
                      v134 = 1;
                      if (v137 != 30)
                        goto LABEL_217;
                      goto LABEL_278;
                    case 0x10:
                      if ((_DWORD)v135 != 1)
                        goto LABEL_217;
                      v136 = v128[2];
                      v138 = v128[3];
                      if (v138 == 30)
                      {
                        result = 3;
                        v134 = 1;
                        goto LABEL_283;
                      }
                      if (v138 != 19)
                        goto LABEL_217;
LABEL_246:
                      ++v129;
                      goto LABEL_278;
                    case 0x11:
                      if ((_DWORD)v135 != 2 || v128[2] != 8 * v129 || v128[3] != v129 + 19)
                        goto LABEL_217;
                      goto LABEL_276;
                    case 0x12:
                    case 0x15:
                      goto LABEL_70;
                    case 0x13:
                      if ((_DWORD)v135 != 2 || v128[2] != 8 * v129 || v128[3] != v129 + 19)
                        goto LABEL_217;
                      ++v129;
                      v134 = 1;
                      goto LABEL_278;
                    case 0x14:
                      if ((_DWORD)v135 != 3
                        || !v130
                        || v128[3] != v130 + 8
                        || v128[2] != 8 * (v130 + v129 + (v134 & 1)))
                      {
                        goto LABEL_217;
                      }
                      ++v130;
                      goto LABEL_271;
                    case 0x16:
                      if ((v135 - 4) < 0xFFFFFFFE
                        || v128[3] != v130 + 8
                        || v128[2] != 8 * (v130 + v129 + (v134 & 1)))
                      {
                        goto LABEL_217;
                      }
                      goto LABEL_277;
                    case 0x17:
                      if ((_DWORD)v135 != 1 || v128[3] != 8)
                        goto LABEL_217;
                      v136 = v128[2];
                      v130 = 2;
                      goto LABEL_278;
                    case 0x18:
                      if ((_DWORD)v135 != 6)
                        goto LABEL_217;
                      result = 7;
                      goto LABEL_283;
                    case 0x1A:
                      if ((v135 - 5) < 0xFFFFFFFD)
                        goto LABEL_217;
                      ++v131;
LABEL_271:
                      result = 4;
                      goto LABEL_283;
                    case 0x1B:
                      result = 1;
                      if ((_DWORD)v135)
                        goto LABEL_217;
                      goto LABEL_283;
                    case 0x1C:
                      if ((_DWORD)v135 == 3)
                      {
LABEL_277:
                        v130 += 2;
LABEL_278:
                        result = 3;
                      }
                      else
                      {
                        if ((_DWORD)v135 != 2)
                          goto LABEL_217;
LABEL_276:
                        v129 += 2;
                        result = 2;
                      }
LABEL_283:
                      v128 += 6;
                      v135 = result;
                      if (v128 == v122)
                        goto LABEL_287;
                      continue;
                    default:
                      result = v135;
                      goto LABEL_283;
                  }
                }
              }
              v136 = 0;
              result = 0;
              v134 = 0;
              v133 = 0;
              v132 = 0;
              v131 = 0;
              v130 = 0;
              v129 = 0;
LABEL_287:
              v41 = 1;
              if (v129 <= 0xA
                && v130 <= 8
                && (v133 & (v134 | ((_DWORD)result != 7)) & 1) == 0
                && (v131 & 0xFFFFFFFB) == 0)
              {
                v139 = 8 * v129;
                if ((v134 & 1) != 0)
                  v139 = 8 * v129 + 8;
                if (v136 == ((((v131 == 4) << 6) + 8 * v130 + v139 + 15) & 0x7FFFFFF0)
                  && (v133 & (v132 < 16)) == 0
                  && (v132 & 0xF) == 0)
                {
                  v140 = __OFADD__(v132, v136);
                  v141 = v132 + v136;
                  if (v141 < 0 != v140)
                    v141 += 15;
                  v142 = v141 >> 4;
                  if (v142 <= 0x1FF)
                  {
                    v143 = v131 == 4;
                    if (v130)
                      v144 = (((_WORD)v130 << 13) - 0x2000) & 0xE000;
                    else
                      v144 = 0;
                    if ((v134 & 1) != 0)
                      v145 = 0x200000;
                    else
                      v145 = 0;
                    if ((v133 & 1) != 0)
                      v146 = 6291456;
                    else
                      v146 = v145;
                    *(_DWORD *)(a2 + 64) |= (v144 | v34 & 0x1FFC | v146 & 0xFFF0FFFF | (v143 << 20) | (v142 << 23) | ((v129 & 0xF) << 16))
                                          + 1;
                    return result;
                  }
                }
                v42 = v108;
                goto LABEL_70;
              }
            }
          }
        }
LABEL_217:
        v42 = v108;
        goto LABEL_70;
      }
    }
  }
LABEL_69:
  v41 = 0;
  v42 = -1;
LABEL_70:
  v149 = v42;
  v150 = v41;
  v151 = v34;
  v43 = v37;
  v156[0] = 0;
  v156[1] = 0;
  LODWORD(v157) = 0;
  v159 = 0;
  v160 = 0;
  __p = 0;
  v44 = *(uint64_t **)(a2 + 136);
  v152 = *(uint64_t **)(a2 + 144);
  if (v44 == v152)
  {
    v45 = 0;
    goto LABEL_123;
  }
  v45 = 0;
  v46 = 0;
  v47 = 0;
  do
  {
    v49 = *v44;
    v48 = v44[1];
    v155 = *v44;
    v50 = sub_1C5959C90(v48, 0xAAAAAAAAAAAAAAABLL * ((v44[2] - v48) >> 3));
    if (v45 == v46)
    {
LABEL_91:
      *(_DWORD *)sub_1C5959CD4(v156, &v155) = v43;
      v43 += v50;
      if (v46 >= v47)
      {
        v66 = v46 - v45;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 61)
          abort();
        if (((char *)v47 - (char *)v45) >> 2 > v67)
          v67 = ((char *)v47 - (char *)v45) >> 2;
        if ((unint64_t)((char *)v47 - (char *)v45) >= 0x7FFFFFFFFFFFFFF8)
          v68 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
        {
          if (v68 >> 61)
            sub_1C4764EE4();
          v69 = (char *)operator new(8 * v68);
        }
        else
        {
          v69 = 0;
        }
        v70 = (uint64_t *)&v69[8 * v66];
        *v70 = v49;
        for (j = v70 + 1; v46 != v45; --v70)
        {
          v72 = *--v46;
          *(v70 - 1) = v72;
        }
        v47 = (uint64_t *)&v69[8 * v68];
        if (v45)
          operator delete(v45);
        v46 = j;
        v45 = v70;
      }
      else
      {
        *v46++ = v49;
      }
      goto LABEL_108;
    }
    v51 = v45;
    while (1)
    {
      v52 = *v51;
      *(_QWORD *)&v161 = *v51;
      v165[0] = 0;
      if (sub_1C61252B8(v153, &v161, v165))
      {
        v53 = v165[0];
        v54 = *(_QWORD *)(v154 + 112);
        v55 = *(unsigned int *)(v154 + 128);
      }
      else
      {
        v54 = *(_QWORD *)(v154 + 112);
        v55 = *(unsigned int *)(v154 + 128);
        v53 = v54 + 16 * v55;
      }
      v56 = v53 == v54 + 16 * v55
          ? *(_QWORD *)(v154 + 144)
          : *(_QWORD *)(v154 + 136) + 32 * *(unsigned int *)(v53 + 8);
      v59 = v56 + 8;
      v57 = *(_QWORD *)(v56 + 8);
      v58 = *(_QWORD *)(v59 + 8);
      v60 = v44[1];
      if (v58 - v57 == v44[2] - v60)
        break;
LABEL_88:
      if (++v51 == v46)
        goto LABEL_91;
    }
    if (v58 != v57)
    {
      v61 = 0;
      v62 = 0xAAAAAAAAAAAAAAABLL * ((v58 - v57) >> 3);
      v63 = 1;
      do
      {
        v64 = v57 + 24 * v61;
        v65 = v60 + 24 * v61;
        if (*(_DWORD *)(v64 + 16) != *(_DWORD *)(v65 + 16)
          || *(_DWORD *)(v64 + 8) != *(_DWORD *)(v65 + 8)
          || *(_DWORD *)(v57 + 24 * v61 + 12) != *(_DWORD *)(v60 + 24 * v61 + 12))
        {
          goto LABEL_88;
        }
        v61 = v63;
        v80 = v62 > v63++;
      }
      while (v80);
    }
    if (!v52)
      goto LABEL_91;
    *(_QWORD *)&v161 = v52;
    v165[0] = 0;
    if (sub_1C61252B8(v156, &v161, v165))
    {
      v73 = v165[0];
      v74 = v156[0];
      v75 = v157;
    }
    else
    {
      v74 = v156[0];
      v75 = v157;
      v73 = v156[0] + 16 * v157;
    }
    if (v73 == v74 + 16 * v75)
      v76 = 0;
    else
      v76 = *((_DWORD *)__p + 4 * *(unsigned int *)(v73 + 8) + 2);
    *(_DWORD *)sub_1C5959CD4(v156, &v155) = v76;
    v44[2] = v44[1];
LABEL_108:
    v44 += 4;
  }
  while (v44 != v152);
LABEL_123:
  if ((v43 & 3) != 0)
    v78 = (v43 >> 2) + 1;
  else
    v78 = v43 >> 2;
  LODWORD(v79) = v149;
  if ((v150 & 1) == 0)
    v79 = (*(_QWORD *)(v154 + 144) - *(_QWORD *)(v154 + 136)) >> 5;
  v80 = v79 > 0x1F || v43 > 0x7C;
  v81 = v80;
  v82 = (v78 << 27) | ((v79 & 0x1F) << 22);
  if (v81)
    v82 = 0;
  if (*(_BYTE *)(v154 + 69))
    v82 |= 0x100000u;
  if (v150)
    v82 |= 0x200000u;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, v82 | (v151 >> 2) & 0x3FFFF, 4);
  if (v81 == 1)
  {
    if (v78 <= 0xFF && v79 < 0x10000)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, v79 | (v78 << 16), 4);
      goto LABEL_144;
    }
LABEL_313:
    v147 = "SEH unwind data splitting not yet implemented";
LABEL_315:
    llvm::report_fatal_error((llvm *)v147, (const char *)1);
  }
LABEL_144:
  v83 = __p;
  v84 = v159;
  while (v83 != v84)
  {
    v85 = v83[2];
    v86 = sub_1C5959B78(v5, *(_QWORD *)v83, *(_QWORD *)v154);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 512))(v5, (v86 >> 2) | (v85 << 22), 4);
    v83 += 4;
  }
  v87 = (-85 * ((*(_DWORD *)(v154 + 96) - *(_DWORD *)(v154 + 88)) >> 3));
  if (-85 * ((*(_DWORD *)(v154 + 96) - *(_DWORD *)(v154 + 88)) >> 3))
  {
    do
    {
      v88 = *(_QWORD *)(v154 + 96);
      v161 = *(_OWORD *)(v88 - 24);
      v162 = *(_QWORD **)(v88 - 8);
      *(_QWORD *)(v154 + 96) = v88 - 24;
      sub_1C5959E4C(v5, (uint64_t)&v161);
      --v87;
    }
    while (v87);
  }
  v89 = *(_QWORD *)(v154 + 136);
  v90 = *(_QWORD *)(v154 + 144);
  while (v89 != v90)
  {
    v91 = *(_QWORD *)(v89 + 8);
    v92 = *(_QWORD *)(v89 + 16);
    while (v91 != v92)
    {
      sub_1C5959E4C(v5, v91);
      v91 += 24;
    }
    v89 += 32;
  }
  if ((int)(4 * v78 - v43) >= 1)
  {
    v93 = v43 - 4 * v78;
    do
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 512))(v5, 227, 1);
    while (!__CFADD__(v93++, 1));
  }
  if (*(_BYTE *)(v154 + 69))
  {
    v95 = *(_QWORD *)(v154 + 24);
    v96 = sub_1C484358C(v148 + 192, 24, 3);
    if (*(_BYTE *)(*(_QWORD *)(v148 + 152) + 18))
      v97 = 65651;
    else
      v97 = 115;
    *(_BYTE *)v96 = 2;
    *(_DWORD *)(v96 + 1) = v97 | (*(unsigned __int8 *)(v96 + 4) << 24);
    *(_QWORD *)(v96 + 8) = 0;
    *(_QWORD *)(v96 + 16) = v95;
    (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 504))(v5, v96, 4, 0);
  }
  if (v45)
    operator delete(v45);
  if (__p)
  {
    v159 = __p;
    operator delete(__p);
  }
  return MEMORY[0x1CAA32FB4](v156[0], 8);
}

uint64_t llvm::Win64EH::ARM64UnwindEmitter::EmitUnwindInfo(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  llvm::MCSectionCOFF *v7;

  if (!*(_QWORD *)(a3 + 16))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 168))(a2, *(_QWORD *)(a3 + 56), 0);
    *(_QWORD *)(a3 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  }
  v7 = sub_1C5953AB8(*(llvm::MCContext **)(a2 + 8), (_DWORD *)(a2 + 264), *(llvm::MCSectionCOFF **)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 168) + 680), *(_QWORD *)(a3 + 56));
  (*(void (**)(uint64_t, llvm::MCSectionCOFF *, _QWORD))(*(_QWORD *)a2 + 168))(a2, v7, 0);
  return sub_1C5958888(a2, a3, a4 ^ 1u);
}

void sub_1C59598F4()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C595990C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5959920(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;

  v6 = a1[1];
  v7 = sub_1C484358C(v6 + 192, 24, 3);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 152) + 18) << 16;
  *(_BYTE *)v7 = 2;
  *(_DWORD *)(v7 + 1) = v8 | (*(unsigned __int8 *)(v7 + 4) << 24);
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = a2;
  v9 = sub_1C484358C(v6 + 192, 24, 3);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 152) + 18) << 16;
  *(_BYTE *)v9 = 2;
  *(_DWORD *)(v9 + 1) = v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = a3;
  v11 = sub_1C484358C(v6 + 192, 32, 3);
  *(_BYTE *)v11 = 0;
  *(_DWORD *)(v11 + 1) = (*(unsigned __int8 *)(v11 + 4) << 24) | 0x12;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = v7;
  *(_QWORD *)(v11 + 24) = v9;
  return (*(uint64_t (**)(_QWORD *, unint64_t, uint64_t, _QWORD))(*a1 + 504))(a1, v11, 1, 0);
}

uint64_t sub_1C5959A14(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;

  v6 = a1[1];
  v7 = sub_1C484358C(v6 + 192, 24, 3);
  v8 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 152) + 18) << 16;
  *(_BYTE *)v7 = 2;
  *(_DWORD *)(v7 + 1) = v8 | (*(unsigned __int8 *)(v7 + 4) << 24);
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = a2;
  v9 = sub_1C484358C(v6 + 192, 24, 3);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 152) + 18) << 16;
  *(_BYTE *)v9 = 2;
  *(_DWORD *)(v9 + 1) = v10 | (*(unsigned __int8 *)(v9 + 4) << 24);
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = a3;
  v11 = sub_1C484358C(v6 + 192, 32, 3);
  *(_BYTE *)v11 = 0;
  *(_DWORD *)(v11 + 1) = (*(unsigned __int8 *)(v11 + 4) << 24) | 0x12;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = v9;
  *(_QWORD *)(v11 + 24) = v7;
  v12 = sub_1C484358C(v6 + 192, 24, 3);
  v13 = v12;
  if (*(_BYTE *)(*(_QWORD *)(v6 + 152) + 18))
    v14 = 65651;
  else
    v14 = 115;
  *(_BYTE *)v12 = 2;
  *(_DWORD *)(v12 + 1) = v14 | (*(unsigned __int8 *)(v12 + 4) << 24);
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = a2;
  v15 = sub_1C484358C(v6 + 192, 32, 3);
  *(_BYTE *)v15 = 0;
  *(_DWORD *)(v15 + 1) = *(unsigned __int8 *)(v15 + 4) << 24;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v15 + 24) = v11;
  return (*(uint64_t (**)(_QWORD *, unint64_t, uint64_t, _QWORD))(*a1 + 504))(a1, v15, 4, 0);
}

uint64_t sub_1C5959B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  char v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = sub_1C484358C(v5 + 192, 24, 3);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 152) + 18) << 16;
  *(_BYTE *)v6 = 2;
  *(_DWORD *)(v6 + 1) = v7 | (*(unsigned __int8 *)(v6 + 4) << 24);
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  v8 = sub_1C484358C(v5 + 192, 24, 3);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 152) + 18) << 16;
  *(_BYTE *)v8 = 2;
  *(_DWORD *)(v8 + 1) = v9 | (*(unsigned __int8 *)(v8 + 4) << 24);
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = a3;
  v10 = sub_1C484358C(v5 + 192, 32, 3);
  *(_BYTE *)v10 = 0;
  *(_DWORD *)(v10 + 1) = (*(unsigned __int8 *)(v10 + 4) << 24) | 0x12;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 24) = v8;
  v13 = 0;
  llvm::MCExpr::evaluateAsAbsolute(v10, &v13);
  if ((v11 & 1) == 0)
    llvm::report_fatal_error((llvm *)"Failed to evaluate function length in SEH unwind info", (const char *)1);
  return v13;
}

uint64_t sub_1C5959C90(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;

  if (!a2)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = 24 * a2;
  v4 = (int *)(v2 + 16);
  do
  {
    v5 = *v4;
    v4 += 6;
    result = (dword_1C866393C[v5 - 1] + result);
    v3 -= 24;
  }
  while (v3);
  return result;
}

uint64_t sub_1C5959CD4(uint64_t *a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;

  v19 = *a2;
  v20 = 0;
  v21 = 0;
  if (sub_1C61252B8(a1, &v19, &v21))
  {
    v4 = *((_DWORD *)v21 + 2);
    v5 = a1[3];
  }
  else
  {
    v7 = sub_1C6128C6C((uint64_t)a1, (uint64_t)&v19, &v19, v21);
    *v7 = v19;
    *((_DWORD *)v7 + 2) = v20;
    v8 = *a2;
    v10 = (char *)a1[4];
    v9 = a1[5];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (char *)a1[3];
      v13 = (v10 - v12) >> 4;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60)
        abort();
      v15 = v9 - (_QWORD)v12;
      if (v15 >> 3 > v14)
        v14 = v15 >> 3;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 60)
          sub_1C4764EE4();
        v17 = (char *)operator new(16 * v16);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[16 * v13];
      *(_QWORD *)v18 = v8;
      *((_QWORD *)v18 + 1) = 0;
      v11 = v18 + 16;
      if (v10 != v12)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *((_OWORD *)v10 - 1);
          v18 -= 16;
          v10 -= 16;
        }
        while (v10 != v12);
        v10 = (char *)a1[3];
      }
      a1[3] = (uint64_t)v18;
      a1[4] = (uint64_t)v11;
      a1[5] = (uint64_t)&v17[16 * v16];
      if (v10)
        operator delete(v10);
    }
    else
    {
      *(_QWORD *)v10 = v8;
      *((_QWORD *)v10 + 1) = 0;
      v11 = v10 + 16;
    }
    a1[4] = (uint64_t)v11;
    v5 = a1[3];
    v4 = (((unint64_t)v11 - v5) >> 4) - 1;
    *((_DWORD *)v7 + 2) = v4;
  }
  return v5 + 16 * v4 + 8;
}

void sub_1C5959E4C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1C5959E88()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v0 + 512))(v0, 224, 1);
  v2 = *(unsigned int *)(v1 + 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v0 + 512))(v0, (v2 >> 20), 1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v0 + 512))(v0, (v2 >> 12), 1);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v0 + 512))(v0, (v2 >> 4), 1);
}

void sub_1C595A108()
{
  JUMPOUT(0x1C595A0E8);
}

void sub_1C595A110()
{
  JUMPOUT(0x1C595A0E8);
}

_QWORD *llvm::MCWinCOFFStreamer::MCWinCOFFStreamer(_QWORD *a1, llvm::MCContext *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a3;
  *a3 = 0;
  v7 = *a5;
  *a5 = 0;
  v14 = v7;
  v15 = v6;
  v8 = *a4;
  *a4 = 0;
  v13 = v8;
  llvm::MCObjectStreamer::MCObjectStreamer((uint64_t)a1, a2, &v15, &v14, &v13);
  v9 = v13;
  v13 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v15;
  v15 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *a1 = off_1E81838D0;
  a1[68] = 0;
  return a1;
}

void llvm::MCWinCOFFStreamer::emitInstToData(llvm::MCObjectStreamer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t DataFragment;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  int v18;
  void *v19;
  __int128 v20;
  _BYTE v21[256];
  char *v22;
  uint64_t v23;
  _QWORD v24[13];

  v24[12] = *MEMORY[0x1E0C80C00];
  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(a1, 0);
  v22 = (char *)v24;
  v23 = 0x400000000;
  v19 = v21;
  v20 = xmmword_1C64638F0;
  sub_1C613932C((uint64_t)v16, (uint64_t)&v19);
  (*(void (**)(_QWORD, uint64_t, _QWORD *, char **, uint64_t))(**(_QWORD **)(*((_QWORD *)a1 + 34) + 16) + 32))(*(_QWORD *)(*((_QWORD *)a1 + 34) + 16), a2, v16, &v22, a3);
  if ((_DWORD)v23)
  {
    v7 = 0;
    v8 = 24 * v23;
    do
    {
      v9 = &v22[v7];
      *((_DWORD *)v9 + 2) = *(_DWORD *)&v22[v7 + 8] + *(_DWORD *)(DataFragment + 72);
      v10 = sub_1C4926708(DataFragment + 120, (unint64_t)v9, 1);
      v11 = *(_QWORD *)(DataFragment + 120) + 24 * *(unsigned int *)(DataFragment + 128);
      v12 = *(_OWORD *)v10;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16);
      *(_OWORD *)v11 = v12;
      ++*(_DWORD *)(DataFragment + 128);
      v7 += 24;
    }
    while (v8 != v7);
  }
  *(_BYTE *)(DataFragment + 50) = 1;
  *(_QWORD *)(DataFragment + 56) = a3;
  v14 = v19;
  v13 = v20;
  v15 = *(_QWORD *)(DataFragment + 72);
  if (*(_QWORD *)(DataFragment + 80) < (unint64_t)(v15 + v20))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(DataFragment + 64, (void *)(DataFragment + 88), v15 + v20, 1);
    v15 = *(_QWORD *)(DataFragment + 72);
    if (!v13)
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((_QWORD)v20)
  {
LABEL_6:
    memcpy((void *)(*(_QWORD *)(DataFragment + 64) + v15), v14, v13);
    v15 = *(_QWORD *)(DataFragment + 72);
  }
LABEL_7:
  *(_QWORD *)(DataFragment + 72) = v15 + v13;
  v16[0] = off_1E81A6E70;
  if (v18 == 1 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8077774924);
  if (v19 != v21)
    free(v19);
  if (v22 != (char *)v24)
    free(v22);
}

uint64_t llvm::MCWinCOFFStreamer::initSections(llvm::MCWinCOFFStreamer *this, BOOL a2, const llvm::MCSubtargetInfo *a3)
{
  (*(void (**)(llvm::MCWinCOFFStreamer *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 168) + 24), 0);
  (*(void (**)(llvm::MCWinCOFFStreamer *, uint64_t, const llvm::MCSubtargetInfo *, _QWORD))(*(_QWORD *)this + 640))(this, 4, a3, 0);
  (*(void (**)(llvm::MCWinCOFFStreamer *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 168) + 32), 0);
  (*(void (**)(llvm::MCWinCOFFStreamer *, uint64_t, const llvm::MCSubtargetInfo *, _QWORD))(*(_QWORD *)this + 640))(this, 4, a3, 0);
  (*(void (**)(llvm::MCWinCOFFStreamer *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 168) + 40), 0);
  (*(void (**)(llvm::MCWinCOFFStreamer *, uint64_t, const llvm::MCSubtargetInfo *, _QWORD))(*(_QWORD *)this + 640))(this, 4, a3, 0);
  return (*(uint64_t (**)(llvm::MCWinCOFFStreamer *, _QWORD, _QWORD))(*(_QWORD *)this + 168))(this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 168) + 24), 0);
}

uint64_t llvm::MCWinCOFFStreamer::emitAssemblerFlag(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 272) + 8) + 208))(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 8));
}

uint64_t llvm::MCWinCOFFStreamer::emitSymbolAttribute(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  unint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_DWORD *)(a2 + 8);
  if ((v3 & 8) == 0)
  {
    v4 = *(_QWORD *)(a1 + 272);
    *(_DWORD *)(a2 + 8) = v3 | 8;
    v13 = a2;
    v5 = *(_QWORD **)(v4 + 64);
    if ((unint64_t)v5 >= *(_QWORD *)(v4 + 72))
    {
      v11 = v4;
      v12 = a2;
      v10 = a3;
      v6 = sub_1C4DFEA3C((void **)(v4 + 56), &v13);
      v4 = v11;
      a2 = v12;
      a3 = v10;
    }
    else
    {
      *v5 = a2;
      v6 = v5 + 1;
    }
    *(_QWORD *)(v4 + 64) = v6;
  }
  HIDWORD(v8) = a3 - 9;
  LODWORD(v8) = a3 - 9;
  v7 = v8 >> 1;
  if ((v7 - 7) < 2)
  {
    *(_WORD *)(a2 + 12) |= 0x100u;
LABEL_8:
    *(_DWORD *)(a2 + 8) |= 0x10u;
    return 1;
  }
  if (!v7)
    goto LABEL_8;
  return 0;
}

uint64_t llvm::MCWinCOFFStreamer::BeginCOFFSymbolDef(uint64_t this, const llvm::MCSymbol *a2)
{
  uint64_t v3;
  const char *v4;
  __int16 v5;

  v3 = this;
  if (*(_QWORD *)(this + 544))
  {
    v4 = "starting a new symbol definition without completing the previous one";
    v5 = 259;
    this = llvm::MCContext::reportError(*(_QWORD *)(this + 8), 0, (uint64_t)&v4);
  }
  *(_QWORD *)(v3 + 544) = a2;
  return this;
}

uint64_t llvm::MCWinCOFFStreamer::Error(uint64_t a1, uint64_t a2)
{
  return llvm::MCContext::reportError(*(_QWORD *)(a1 + 8), 0, a2);
}

uint64_t *llvm::MCWinCOFFStreamer::EmitCOFFSymbolStorageClass(uint64_t *this, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  __int16 v7;
  _QWORD *v8;
  uint64_t v9;
  __int16 v10;
  uint64_t *v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;

  v2 = this[68];
  if (!v2)
  {
    v14[0] = "storage class specified outside of symbol definition";
    v7 = 259;
LABEL_11:
    v15 = v7;
    return (uint64_t *)llvm::MCContext::reportError(this[1], 0, (uint64_t)v14);
  }
  if (a2 >= 0x100)
  {
    v12[0] = "storage class value '";
    v12[2] = a2;
    v13 = 2307;
    v14[0] = v12;
    v14[2] = "' out of range";
    v7 = 770;
    goto LABEL_11;
  }
  v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 8) == 0)
  {
    v4 = this[34];
    *(_DWORD *)(v2 + 8) = v3 | 8;
    v14[0] = v2;
    v5 = *(uint64_t **)(v4 + 64);
    if ((unint64_t)v5 >= *(_QWORD *)(v4 + 72))
    {
      v10 = a2;
      v11 = this;
      v9 = v4;
      v8 = sub_1C4DFEA3C((void **)(v4 + 56), v14);
      v4 = v9;
      LOWORD(a2) = v10;
      v6 = v8;
      this = v11;
    }
    else
    {
      *v5 = v2;
      v6 = v5 + 1;
    }
    *(_QWORD *)(v4 + 64) = v6;
    v2 = this[68];
  }
  *(_WORD *)(v2 + 12) = a2 | (*(unsigned __int8 *)(v2 + 13) << 8);
  return this;
}

uint64_t *llvm::MCWinCOFFStreamer::EmitCOFFSymbolType(uint64_t *this, unsigned int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  __int16 v7;
  _QWORD *v8;
  uint64_t v9;
  __int16 v10;
  uint64_t *v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;

  v2 = this[68];
  if (!v2)
  {
    v14[0] = "symbol type specified outside of a symbol definition";
    v7 = 259;
LABEL_11:
    v15 = v7;
    return (uint64_t *)llvm::MCContext::reportError(this[1], 0, (uint64_t)v14);
  }
  if (a2 >= 0x10000)
  {
    v12[0] = "type value '";
    v12[2] = a2;
    v13 = 2307;
    v14[0] = v12;
    v14[2] = "' out of range";
    v7 = 770;
    goto LABEL_11;
  }
  v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 8) == 0)
  {
    v4 = this[34];
    *(_DWORD *)(v2 + 8) = v3 | 8;
    v14[0] = v2;
    v5 = *(uint64_t **)(v4 + 64);
    if ((unint64_t)v5 >= *(_QWORD *)(v4 + 72))
    {
      v10 = a2;
      v11 = this;
      v9 = v4;
      v8 = sub_1C4DFEA3C((void **)(v4 + 56), v14);
      v4 = v9;
      LOWORD(a2) = v10;
      v6 = v8;
      this = v11;
    }
    else
    {
      *v5 = v2;
      v6 = v5 + 1;
    }
    *(_QWORD *)(v4 + 64) = v6;
    v2 = this[68];
  }
  *(_WORD *)(v2 + 32) = a2;
  return this;
}

uint64_t llvm::MCWinCOFFStreamer::EndCOFFSymbolDef(uint64_t this)
{
  uint64_t v1;
  const char *v2;
  __int16 v3;

  v1 = this;
  if (!*(_QWORD *)(this + 544))
  {
    v2 = "ending symbol definition without starting one";
    v3 = 259;
    this = llvm::MCContext::reportError(*(_QWORD *)(this + 8), 0, (uint64_t)&v2);
  }
  *(_QWORD *)(v1 + 544) = 0;
  return this;
}

_QWORD *llvm::MCWinCOFFStreamer::EmitCOFFSafeSEH(_QWORD *this, const llvm::MCSymbol *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  const llvm::MCSymbol *v11;

  v2 = this[1];
  if (*(_DWORD *)(v2 + 48) == 41 && (*((_WORD *)a2 + 6) & 0x200) == 0)
  {
    v4 = (uint64_t)this;
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 168) + 688);
    llvm::MCAssembler::registerSection(this[34], v5);
    if (((1 << *(_BYTE *)(v5 + 24)) & 0xFFFFFFFCLL) == 0)
      *(_BYTE *)(v5 + 24) = 2;
    this = (_QWORD *)operator new();
    this[2] = v5;
    this[3] = 0;
    this[4] = -1;
    this[5] = 0;
    *((_WORD *)this + 24) = 11;
    *((_BYTE *)this + 50) = 0;
    v7 = *(_QWORD *)(v5 + 104);
    v6 = (_QWORD *)(v5 + 104);
    *this = v7;
    this[1] = v6;
    *(_QWORD *)(v7 + 8) = this;
    *v6 = this;
    this[7] = a2;
    v8 = *((_DWORD *)a2 + 2);
    if ((v8 & 8) == 0)
    {
      v9 = *(_QWORD *)(v4 + 272);
      *((_DWORD *)a2 + 2) = v8 | 8;
      v11 = a2;
      v10 = *(_QWORD **)(v9 + 64);
      if ((unint64_t)v10 >= *(_QWORD *)(v9 + 72))
      {
        this = sub_1C4DFEA3C((void **)(v9 + 56), &v11);
      }
      else
      {
        *v10 = a2;
        this = v10 + 1;
      }
      *(_QWORD *)(v9 + 64) = this;
    }
    *((_WORD *)a2 + 6) |= 0x200u;
    *((_WORD *)a2 + 16) = 32;
  }
  return this;
}

_QWORD *llvm::MCWinCOFFStreamer::EmitCOFFSymbolIndex(llvm::MCWinCOFFStreamer *this, const llvm::MCSymbol *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  const llvm::MCSymbol *v14;

  v4 = *((unsigned int *)this + 30);
  if ((_DWORD)v4)
    v5 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v4 - 32);
  else
    v5 = 0;
  llvm::MCAssembler::registerSection(*((_QWORD *)this + 34), v5);
  if (((1 << *(_BYTE *)(v5 + 24)) & 0xFFFFFFFCLL) == 0)
    *(_BYTE *)(v5 + 24) = 2;
  result = (_QWORD *)operator new();
  v7 = *((unsigned int *)this + 30);
  if ((_DWORD)v7)
    v8 = *(_QWORD *)(*((_QWORD *)this + 14) + 32 * v7 - 32);
  else
    v8 = 0;
  *result = 0;
  result[1] = 0;
  result[2] = v8;
  result[3] = 0;
  result[4] = -1;
  result[5] = 0;
  *((_WORD *)result + 24) = 11;
  *((_BYTE *)result + 50) = 0;
  if (v8)
  {
    v13 = *(_QWORD *)(v8 + 104);
    v12 = (_QWORD *)(v8 + 104);
    *result = v13;
    result[1] = v12;
    *(_QWORD *)(v13 + 8) = result;
    *v12 = result;
  }
  result[7] = a2;
  v9 = *((_DWORD *)a2 + 2);
  if ((v9 & 8) == 0)
  {
    v10 = *((_QWORD *)this + 34);
    *((_DWORD *)a2 + 2) = v9 | 8;
    v14 = a2;
    v11 = *(_QWORD **)(v10 + 64);
    if ((unint64_t)v11 >= *(_QWORD *)(v10 + 72))
    {
      result = sub_1C4DFEA3C((void **)(v10 + 56), &v14);
    }
    else
    {
      *v11 = a2;
      result = v11 + 1;
    }
    *(_QWORD *)(v10 + 64) = result;
  }
  return result;
}

__int128 *llvm::MCWinCOFFStreamer::EmitCOFFSectionIndex(llvm::MCWinCOFFStreamer *this, const llvm::MCSymbol *a2)
{
  uint64_t DataFragment;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  __int128 *result;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;

  (*(void (**)(llvm::MCWinCOFFStreamer *))(*(_QWORD *)this + 56))(this);
  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(this, 0);
  v5 = *((_QWORD *)this + 1);
  v6 = sub_1C484358C(v5 + 192, 24, 3);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 152) + 18) << 16;
  *(_BYTE *)v6 = 2;
  *(_DWORD *)(v6 + 1) = v7 | (*(unsigned __int8 *)(v6 + 4) << 24);
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  v8 = *(_QWORD *)(DataFragment + 72);
  v13 = v6;
  v14 = v8;
  v15 = 19;
  v16 = 0;
  result = (__int128 *)sub_1C4926708(DataFragment + 120, (unint64_t)&v13, 1);
  v10 = *(_QWORD *)(DataFragment + 120) + 24 * *(unsigned int *)(DataFragment + 128);
  v11 = *result;
  *(_QWORD *)(v10 + 16) = *((_QWORD *)result + 2);
  *(_OWORD *)v10 = v11;
  ++*(_DWORD *)(DataFragment + 128);
  v12 = *(_QWORD *)(DataFragment + 72);
  if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    if (v12 + 2 > *(_QWORD *)(DataFragment + 80))
    {
      result = (__int128 *)llvm::SmallVectorBase<unsigned long long>::grow_pod(DataFragment + 64, (void *)(DataFragment + 88), v12 + 2, 1);
      v12 = *(_QWORD *)(DataFragment + 72);
    }
    *(_WORD *)(*(_QWORD *)(DataFragment + 64) + v12) = 0;
    v12 = *(_QWORD *)(DataFragment + 72);
  }
  *(_QWORD *)(DataFragment + 72) = v12 + 2;
  return result;
}

__int128 *llvm::MCWinCOFFStreamer::EmitCOFFSecRel32(llvm::MCWinCOFFStreamer *this, const llvm::MCSymbol *a2, uint64_t a3)
{
  uint64_t DataFragment;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *result;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;

  (*(void (**)(llvm::MCWinCOFFStreamer *))(*(_QWORD *)this + 56))(this);
  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(this, 0);
  v7 = *((_QWORD *)this + 1);
  v8 = sub_1C484358C(v7 + 192, 24, 3);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 152) + 18) << 16;
  *(_BYTE *)v8 = 2;
  *(_DWORD *)(v8 + 1) = v9 | (*(unsigned __int8 *)(v8 + 4) << 24);
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = a2;
  if (a3)
  {
    v10 = sub_1C484358C(*((_QWORD *)this + 1) + 192, 24, 3);
    *(_BYTE *)v10 = 1;
    *(_DWORD *)(v10 + 1) = *(unsigned __int8 *)(v10 + 4) << 24;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = a3;
    v11 = sub_1C484358C(*((_QWORD *)this + 1) + 192, 32, 3);
    *(_BYTE *)v11 = 0;
    *(_DWORD *)(v11 + 1) = *(unsigned __int8 *)(v11 + 4) << 24;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = v8;
    *(_QWORD *)(v11 + 24) = v10;
    v8 = v11;
  }
  v12 = *(_QWORD *)(DataFragment + 72);
  v17 = v8;
  v18 = v12;
  v19 = 20;
  v20 = 0;
  result = (__int128 *)sub_1C4926708(DataFragment + 120, (unint64_t)&v17, 1);
  v14 = *(_QWORD *)(DataFragment + 120) + 24 * *(unsigned int *)(DataFragment + 128);
  v15 = *result;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)result + 2);
  *(_OWORD *)v14 = v15;
  ++*(_DWORD *)(DataFragment + 128);
  v16 = *(_QWORD *)(DataFragment + 72);
  if (v16 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    if (v16 + 4 > *(_QWORD *)(DataFragment + 80))
    {
      result = (__int128 *)llvm::SmallVectorBase<unsigned long long>::grow_pod(DataFragment + 64, (void *)(DataFragment + 88), v16 + 4, 1);
      v16 = *(_QWORD *)(DataFragment + 72);
    }
    *(_DWORD *)(*(_QWORD *)(DataFragment + 64) + v16) = 0;
    v16 = *(_QWORD *)(DataFragment + 72);
  }
  *(_QWORD *)(DataFragment + 72) = v16 + 4;
  return result;
}

__int128 *llvm::MCWinCOFFStreamer::EmitCOFFImgRel32(llvm::MCWinCOFFStreamer *this, const llvm::MCSymbol *a2, uint64_t a3)
{
  uint64_t DataFragment;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *result;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;

  (*(void (**)(llvm::MCWinCOFFStreamer *))(*(_QWORD *)this + 56))(this);
  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(this, 0);
  v7 = *((_QWORD *)this + 1);
  v8 = sub_1C484358C(v7 + 192, 24, 3);
  v9 = v8;
  if (*(_BYTE *)(*(_QWORD *)(v7 + 152) + 18))
    v10 = 65651;
  else
    v10 = 115;
  *(_BYTE *)v8 = 2;
  *(_DWORD *)(v8 + 1) = v10 | (*(unsigned __int8 *)(v8 + 4) << 24);
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = a2;
  if (a3)
  {
    v11 = sub_1C484358C(*((_QWORD *)this + 1) + 192, 24, 3);
    *(_BYTE *)v11 = 1;
    *(_DWORD *)(v11 + 1) = *(unsigned __int8 *)(v11 + 4) << 24;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = a3;
    v12 = sub_1C484358C(*((_QWORD *)this + 1) + 192, 32, 3);
    *(_BYTE *)v12 = 0;
    *(_DWORD *)(v12 + 1) = *(unsigned __int8 *)(v12 + 4) << 24;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = v9;
    *(_QWORD *)(v12 + 24) = v11;
    v9 = v12;
  }
  v13 = *(_QWORD *)(DataFragment + 72);
  v18 = v9;
  v19 = v13;
  v20 = 3;
  v21 = 0;
  result = (__int128 *)sub_1C4926708(DataFragment + 120, (unint64_t)&v18, 1);
  v15 = *(_QWORD *)(DataFragment + 120) + 24 * *(unsigned int *)(DataFragment + 128);
  v16 = *result;
  *(_QWORD *)(v15 + 16) = *((_QWORD *)result + 2);
  *(_OWORD *)v15 = v16;
  ++*(_DWORD *)(DataFragment + 128);
  v17 = *(_QWORD *)(DataFragment + 72);
  if (v17 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    if (v17 + 4 > *(_QWORD *)(DataFragment + 80))
    {
      result = (__int128 *)llvm::SmallVectorBase<unsigned long long>::grow_pod(DataFragment + 64, (void *)(DataFragment + 88), v17 + 4, 1);
      v17 = *(_QWORD *)(DataFragment + 72);
    }
    *(_DWORD *)(*(_QWORD *)(DataFragment + 64) + v17) = 0;
    v17 = *(_QWORD *)(DataFragment + 72);
  }
  *(_QWORD *)(DataFragment + 72) = v17 + 4;
  return result;
}

void llvm::MCWinCOFFStreamer::emitCommonSymbol(llvm::MCWinCOFFStreamer *this, llvm::MCSymbol *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  size_t *v17;
  const void *v18;
  size_t v19;
  size_t v20;
  __n128 v21;
  unint64_t v22;
  _QWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  void *__dst;
  int v27;
  void *v28;
  __int128 v29;
  _QWORD v30[17];

  v30[16] = *MEMORY[0x1E0C80C00];
  v7 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v7 + 60) == 15 && (*(_DWORD *)(v7 + 64) | 0x10) == 0x10)
  {
    if (a4 >= 0x21)
      llvm::report_fatal_error((llvm *)"alignment is limited to 32-bytes", (const char *)1);
    if (a4 > a3)
      a3 = a4;
  }
  v8 = *((_DWORD *)a2 + 2);
  if ((v8 & 8) == 0)
  {
    v9 = *((_QWORD *)this + 34);
    *((_DWORD *)a2 + 2) = v8 | 8;
    v28 = a2;
    v10 = *(_QWORD **)(v9 + 64);
    if ((unint64_t)v10 >= *(_QWORD *)(v9 + 72))
    {
      v22 = a3;
      v11 = sub_1C4DFEA3C((void **)(v9 + 56), &v28);
      a3 = v22;
    }
    else
    {
      *v10 = a2;
      v11 = v10 + 1;
    }
    *(_QWORD *)(v9 + 64) = v11;
    v8 = *((_DWORD *)a2 + 2);
  }
  v12 = 0;
  *((_QWORD *)a2 + 3) = a3;
  *((_DWORD *)a2 + 2) = (-8192 * __clz(a4)) & 0x3E000 | 0xC10 | v8 & 0xFFFC0FFF;
  if (*(_DWORD *)(v7 + 60) == 15)
  {
    v13 = *(_DWORD *)(v7 + 64);
    if (v13 == 16)
      return;
    v12 = v13 == 0;
  }
  if (a4 >= 2 && !v12)
  {
    v28 = v30;
    v29 = xmmword_1C85F20B0;
    sub_1C613932C((uint64_t)v23, (uint64_t)&v28);
    v14 = *(_QWORD *)(*((_QWORD *)this + 1) + 168);
    v15 = (char *)__dst;
    if ((unint64_t)(v25 - (_QWORD)__dst) > 0xC)
    {
      *(_QWORD *)__dst = *(_QWORD *)" -aligncomm:\"";
      *(_QWORD *)(v15 + 5) = *(_QWORD *)"gncomm:\"";
      v16 = (char *)__dst + 13;
      __dst = (char *)__dst + 13;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v23, " -aligncomm:\"", 0xDuLL);
      v16 = (char *)__dst;
    }
    if ((*(_BYTE *)a2 & 4) != 0)
    {
      v17 = (size_t *)*((_QWORD *)a2 - 1);
      v20 = *v17;
      v18 = v17 + 2;
      v19 = v20;
      if (v20 <= v25 - (uint64_t)v16)
      {
        if (v19)
        {
          memcpy(v16, v18, v19);
          v16 = (char *)__dst + v19;
          __dst = (char *)__dst + v19;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)v23, (const char *)v18, v19);
        v16 = (char *)__dst;
      }
    }
    if ((unint64_t)(v25 - (_QWORD)v16) > 1)
    {
      *(_WORD *)v16 = 11298;
      __dst = (char *)__dst + 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v23, "\",", 2uLL);
    }
    sub_1C5E21910((llvm::raw_ostream *)v23, 32 - __clz(a4 - 1), 0, 0, 0);
    v21 = sub_1C62B9A74((uint64_t)this);
    (*(void (**)(llvm::MCWinCOFFStreamer *, _QWORD, _QWORD, __n128))(*(_QWORD *)this + 168))(this, *(_QWORD *)(v14 + 664), 0, v21);
    (*(void (**)(llvm::MCWinCOFFStreamer *, void *, _QWORD))(*(_QWORD *)this + 488))(this, v28, v29);
    sub_1C593C604((uint64_t)this);
    v23[0] = off_1E81A6E70;
    if (v27 == 1 && v24)
      MEMORY[0x1CAA32F9C](v24, 0x1000C8077774924);
    if (v28 != v30)
      free(v28);
  }
}

BOOL llvm::MCWinCOFFStreamer::emitLocalCommonSymbol(llvm::MCWinCOFFStreamer *this, llvm::MCSymbol *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __n128 v9;

  v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 168) + 40);
  v9 = sub_1C62B9A74((uint64_t)this);
  (*(void (**)(llvm::MCWinCOFFStreamer *, uint64_t, _QWORD, __n128))(*(_QWORD *)this + 168))(this, v8, 0, v9);
  (*(void (**)(llvm::MCWinCOFFStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)this + 632))(this, a4, 0, 1, 0);
  (*(void (**)(llvm::MCWinCOFFStreamer *, llvm::MCSymbol *, _QWORD))(*(_QWORD *)this + 192))(this, a2, 0);
  *((_DWORD *)a2 + 2) &= ~0x10u;
  llvm::MCStreamer::emitZeros(this, a3);
  return sub_1C593C604((uint64_t)this);
}

unint64_t llvm::MCWinCOFFStreamer::emitWeakReference(llvm::MCWinCOFFStreamer *this, llvm::MCSymbol *a2, const llvm::MCSymbol *a3)
{
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t result;
  int v12;
  uint64_t v13;
  const llvm::MCSymbol *v14;

  (*(void (**)(llvm::MCWinCOFFStreamer *, llvm::MCSymbol *, uint64_t))(*(_QWORD *)this + 304))(this, a2, 23);
  v6 = *((_DWORD *)a3 + 2);
  if ((v6 & 8) == 0)
  {
    v7 = *((_QWORD *)this + 34);
    *((_DWORD *)a3 + 2) = v6 | 8;
    v14 = a3;
    v8 = *(_QWORD **)(v7 + 64);
    if ((unint64_t)v8 >= *(_QWORD *)(v7 + 72))
    {
      v13 = v7;
      v9 = sub_1C4DFEA3C((void **)(v7 + 56), &v14);
      v7 = v13;
    }
    else
    {
      *v8 = a3;
      v9 = v8 + 1;
    }
    *(_QWORD *)(v7 + 64) = v9;
  }
  v10 = *((_QWORD *)this + 1);
  result = sub_1C484358C(v10 + 192, 24, 3);
  if (*(_BYTE *)(*(_QWORD *)(v10 + 152) + 18))
    v12 = 65565;
  else
    v12 = 29;
  *(_BYTE *)result = 2;
  *(_DWORD *)(result + 1) = v12 | (*(unsigned __int8 *)(result + 4) << 24);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a3;
  *((_QWORD *)a2 + 3) = result;
  *((_DWORD *)a2 + 2) = *((_DWORD *)a2 + 2) & 0xFFFFE3FF | 0x800;
  *(_QWORD *)a2 &= 7uLL;
  return result;
}

void llvm::MCWinCOFFStreamer::emitCGProfileEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  if ((*(_BYTE *)(*(_QWORD *)(a2 + 16) + 8) & 1) == 0 && (*(_BYTE *)(*(_QWORD *)(a3 + 16) + 8) & 1) == 0)
  {
    v7 = *(_QWORD **)(a1 + 272);
    v8 = (_QWORD *)v7[274];
    v9 = v7[275];
    if ((unint64_t)v8 >= v9)
    {
      v11 = (_QWORD *)v7[273];
      v12 = 0xAAAAAAAAAAAAAAABLL * (v8 - v11) + 1;
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v11) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v15 = (char *)operator new(24 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * (v8 - v11)];
      *(_QWORD *)v16 = a2;
      *((_QWORD *)v16 + 1) = a3;
      *((_QWORD *)v16 + 2) = a4;
      v10 = v16 + 24;
      if (v8 != v11)
      {
        do
        {
          v17 = *(_OWORD *)(v8 - 3);
          *((_QWORD *)v16 - 1) = *(v8 - 1);
          *(_OWORD *)(v16 - 24) = v17;
          v16 -= 24;
          v8 -= 3;
        }
        while (v8 != v11);
        v8 = (_QWORD *)v7[273];
      }
      v7[273] = v16;
      v7[274] = v10;
      v7[275] = &v15[24 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = a2;
      v8[1] = a3;
      v10 = v8 + 3;
      v8[2] = a4;
    }
    v7[274] = v10;
  }
}

_QWORD *llvm::MCWinCOFFStreamer::finalizeCGProfileEntry(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 8) == 0)
  {
    v4 = result[34];
    *(_DWORD *)(v2 + 8) = v3 | 8;
    v8 = v2;
    v5 = *(_QWORD **)(v4 + 64);
    if ((unint64_t)v5 >= *(_QWORD *)(v4 + 72))
    {
      v6 = v2;
      v7 = v4;
      result = sub_1C4DFEA3C((void **)(v4 + 56), &v8);
      v2 = v6;
      v4 = v7;
    }
    else
    {
      *v5 = v2;
      result = v5 + 1;
    }
    *(_QWORD *)(v4 + 64) = result;
    *(_DWORD *)(v2 + 8) |= 0x10u;
  }
  return result;
}

_QWORD *llvm::MCWinCOFFStreamer::finalizeCGProfile(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = this[34];
  v2 = *(_QWORD **)(v1 + 2184);
  v3 = *(_QWORD **)(v1 + 2192);
  if (v2 != v3)
  {
    v4 = this;
    do
    {
      v5 = *(_QWORD *)(*v2 + 16);
      v6 = v4[34];
      v7 = *(_DWORD *)(v5 + 8);
      if ((v7 & 8) == 0)
      {
        *(_DWORD *)(v5 + 8) = v7 | 8;
        v14 = v5;
        v8 = *(_QWORD **)(v6 + 64);
        if ((unint64_t)v8 >= *(_QWORD *)(v6 + 72))
        {
          v12 = v5;
          this = sub_1C4DFEA3C((void **)(v6 + 56), &v14);
          v5 = v12;
        }
        else
        {
          *v8 = v5;
          this = v8 + 1;
        }
        *(_QWORD *)(v6 + 64) = this;
        *(_DWORD *)(v5 + 8) |= 0x10u;
        v6 = v4[34];
      }
      v9 = *(_QWORD *)(v2[1] + 16);
      v10 = *(_DWORD *)(v9 + 8);
      if ((v10 & 8) == 0)
      {
        *(_DWORD *)(v9 + 8) = v10 | 8;
        v14 = v9;
        v11 = *(_QWORD **)(v6 + 64);
        if ((unint64_t)v11 >= *(_QWORD *)(v6 + 72))
        {
          v13 = v9;
          this = sub_1C4DFEA3C((void **)(v6 + 56), &v14);
          v9 = v13;
        }
        else
        {
          *v11 = v9;
          this = v11 + 1;
        }
        *(_QWORD *)(v6 + 64) = this;
        *(_DWORD *)(v9 + 8) |= 0x10u;
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
  return this;
}

void llvm::MCWinCOFFStreamer::finishImpl(llvm::MCContext **this)
{
  llvm::MCWinCOFFStreamer::finalizeCGProfile(this);
  llvm::MCObjectStreamer::finishImpl(this);
}

void sub_1C595B644(llvm::MCObjectStreamer *a1)
{
  llvm::MCObjectStreamer::~MCObjectStreamer(a1);
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C595B668(llvm::MCObjectStreamer *this)
{
  *((_QWORD *)this + 68) = 0;
  return llvm::MCObjectStreamer::reset(this);
}

uint64_t llvm::MCXCOFFObjectTargetWriter::MCXCOFFObjectTargetWriter(uint64_t this, char a2)
{
  *(_QWORD *)this = off_1E8183E30;
  *(_BYTE *)(this + 8) = a2;
  return this;
}

uint64_t sub_1C595B69C()
{
  return 9;
}

void llvm::MCXCOFFStreamer::emitInstToData(llvm::MCObjectStreamer *a1, uint64_t a2, const llvm::MCSubtargetInfo *a3)
{
  uint64_t v6;
  uint64_t DataFragment;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  int v20;
  void *v21;
  __int128 v22;
  _BYTE v23[256];
  _QWORD *v24;
  uint64_t v25;
  _QWORD v26[13];

  v26[12] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a1 + 34);
  v24 = v26;
  v25 = 0x400000000;
  v21 = v23;
  v22 = xmmword_1C64638F0;
  sub_1C613932C((uint64_t)v18, (uint64_t)&v21);
  (*(void (**)(_QWORD, uint64_t, _QWORD *, _QWORD **, const llvm::MCSubtargetInfo *))(**(_QWORD **)(v6 + 16)
                                                                                              + 32))(*(_QWORD *)(v6 + 16), a2, v18, &v24, a3);
  DataFragment = llvm::MCObjectStreamer::getOrCreateDataFragment(a1, a3);
  v8 = DataFragment;
  if ((_DWORD)v25)
  {
    v9 = v24;
    v10 = *(_DWORD *)(DataFragment + 72);
    v11 = 24 * v25;
    do
    {
      v9[2] += v10;
      v12 = sub_1C4926708(v8 + 120, (unint64_t)v9, 1);
      v13 = *(_QWORD *)(v8 + 120) + 24 * *(unsigned int *)(v8 + 128);
      v14 = *(_OWORD *)v12;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
      *(_OWORD *)v13 = v14;
      ++*(_DWORD *)(v8 + 128);
      v9 += 6;
      v11 -= 24;
    }
    while (v11);
  }
  *(_BYTE *)(v8 + 50) = 1;
  *(_QWORD *)(v8 + 56) = a3;
  v16 = v21;
  v15 = v22;
  v17 = *(_QWORD *)(v8 + 72);
  if (*(_QWORD *)(v8 + 80) < (unint64_t)(v17 + v22))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(v8 + 64, (void *)(v8 + 88), v17 + v22, 1);
    v17 = *(_QWORD *)(v8 + 72);
    if (!v15)
      goto LABEL_7;
    goto LABEL_6;
  }
  if ((_QWORD)v22)
  {
LABEL_6:
    memcpy((void *)(*(_QWORD *)(v8 + 64) + v17), v16, v15);
    v17 = *(_QWORD *)(v8 + 72);
  }
LABEL_7:
  *(_QWORD *)(v8 + 72) = v17 + v15;
  v18[0] = off_1E81A6E70;
  if (v20 == 1 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8077774924);
  if (v21 != v23)
    free(v21);
  if (v24 != v26)
    free(v24);
}

_DWORD *llvm::MachObjectWriter::reset(llvm::MachObjectWriter *this)
{
  int v2;
  unsigned int *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  int v8;
  _DWORD *result;
  unsigned int *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = *((_DWORD *)this + 6);
  if (*((_QWORD *)this + 3))
  {
    v3 = (unsigned int *)((char *)this + 16);
    v4 = *((unsigned int *)this + 8);
    if (v4 > 4 * v2 && v4 >= 0x41)
    {
      sub_1C5960214(v3);
    }
    else
    {
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD **)v3;
        v6 = 32 * v4;
        do
        {
          if (*v5 != -4096)
          {
            if (*v5 != -8192)
            {
              v7 = (void *)v5[1];
              if (v7)
              {
                v5[2] = v7;
                operator delete(v7);
              }
            }
            *v5 = -4096;
          }
          v5 += 4;
          v6 -= 32;
        }
        while (v6);
      }
      *((_QWORD *)this + 3) = 0;
    }
  }
  v8 = *((_DWORD *)this + 12);
  if (v8 || *((_DWORD *)this + 13))
  {
    v10 = (unsigned int *)((char *)this + 40);
    v11 = *((unsigned int *)this + 14);
    if (v11 <= 4 * v8 || v11 < 0x41)
    {
      if ((_DWORD)v11)
      {
        v12 = *(_QWORD **)v10;
        v13 = 16 * v11;
        do
        {
          *v12 = -4096;
          v12 += 2;
          v13 -= 16;
        }
        while (v13);
      }
      *((_QWORD *)this + 6) = 0;
    }
    else
    {
      sub_1C4926838(v10);
    }
  }
  *((_BYTE *)this + 128) = 0;
  result = sub_1C5961C00((_DWORD *)this + 22);
  *((_QWORD *)this + 18) = *((_QWORD *)this + 17);
  *((_QWORD *)this + 21) = *((_QWORD *)this + 20);
  *((_QWORD *)this + 24) = *((_QWORD *)this + 23);
  return result;
}

uint64_t llvm::MachObjectWriter::doesSymbolRequireExternRelocation(llvm::MachObjectWriter *this, const llvm::MCSymbol *a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (!v3 && (*((_DWORD *)a2 + 2) & 0x1C00) == 0x800)
  {
    *((_DWORD *)a2 + 2) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)a2 + 3));
    *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v3;
  }
  if (v3)
    return (*((unsigned __int16 *)a2 + 6) >> 7) & 1;
  else
    return 1;
}

BOOL llvm::MachObjectWriter::MachSymbolData::operator<(_QWORD *a1, _QWORD *a2)
{
  const void *v2;
  size_t v3;
  size_t *v4;
  size_t v5;
  const void *v6;
  size_t v7;
  size_t *v8;
  size_t v9;
  size_t v10;
  int v11;
  int v12;

  if ((*(_BYTE *)*a1 & 4) != 0)
  {
    v4 = *(size_t **)(*a1 - 8);
    v5 = *v4;
    v2 = v4 + 2;
    v3 = v5;
  }
  else
  {
    v2 = 0;
    v3 = 0;
  }
  if ((*(_BYTE *)*a2 & 4) != 0)
  {
    v8 = *(size_t **)(*a2 - 8);
    v9 = *v8;
    v6 = v8 + 2;
    v7 = v9;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  if (v7 >= v3)
    v10 = v3;
  else
    v10 = v7;
  if (v10 && (v11 = memcmp(v2, v6, v10)) != 0)
  {
    v12 = (v11 >> 31) | 1;
  }
  else
  {
    if (v3 < v7)
      v12 = -1;
    else
      v12 = 1;
    if (v3 == v7)
      v12 = 0;
  }
  return v12 == -1;
}

uint64_t llvm::MachObjectWriter::isFixupKindPCRel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(_DWORD *)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 80))(*(_QWORD *)(a2 + 8), a3)+ 16) & 1;
}

uint64_t llvm::MachObjectWriter::getFragmentAddress(llvm::MachObjectWriter *this, const llvm::MCFragment *a2, const llvm::MCAsmLayout *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *((_DWORD *)this + 20);
  if (!v4)
  {
LABEL_8:
    v12 = 0;
    goto LABEL_7;
  }
  v5 = *((_QWORD *)a2 + 2);
  v6 = *((_QWORD *)this + 8);
  v7 = v4 - 1;
  v8 = ((v5 >> 4) ^ (v5 >> 9)) & (v4 - 1);
  v9 = *(_QWORD *)(v6 + 16 * v8);
  if (v5 != v9)
  {
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v8 + v10++;
      v8 = v11 & v7;
      v9 = *(_QWORD *)(v6 + 16 * v8);
      if (v5 == v9)
        goto LABEL_6;
    }
    goto LABEL_8;
  }
LABEL_6:
  v12 = *(_QWORD *)(v6 + 16 * v8 + 8);
LABEL_7:
  llvm::MCAsmLayout::ensureValid(a3, a2);
  return *((_QWORD *)a2 + 4) + v12;
}

uint64_t llvm::MachObjectWriter::getSymbolAddress(llvm::MachObjectWriter *this, const llvm::MCSymbol *a2, const llvm::MCAsmLayout *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  __int16 v29;
  uint64_t v30[4];
  __int16 v31;
  _QWORD v32[5];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;

  if ((*((_DWORD *)a2 + 2) & 0x1C00) != 0x800)
  {
    v9 = *((_DWORD *)this + 20);
    if (v9)
    {
      v10 = *(_QWORD *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
      v11 = *((_QWORD *)this + 8);
      v12 = v9 - 1;
      v13 = ((v10 >> 4) ^ (v10 >> 9)) & (v9 - 1);
      v14 = *(_QWORD *)(v11 + 16 * v13);
      if (v10 == v14)
      {
LABEL_9:
        v17 = *(_QWORD *)(v11 + 16 * v13 + 8);
LABEL_10:
        v32[0] = 0;
        sub_1C59415F0(a3, (uint64_t *)a2, 1, v32);
        return v32[0] + v17;
      }
      v15 = 1;
      while (v14 != -4096)
      {
        v16 = v13 + v15++;
        v13 = v16 & v12;
        v14 = *(_QWORD *)(v11 + 16 * v13);
        if (v10 == v14)
          goto LABEL_9;
      }
    }
    v17 = 0;
    goto LABEL_10;
  }
  v6 = *((_DWORD *)a2 + 2) | 4;
  *((_DWORD *)a2 + 2) = v6;
  v7 = *((_QWORD *)a2 + 3);
  if (*(_BYTE *)v7 == 1)
    return *(_QWORD *)(v7 + 16);
  v33 = 0;
  v34 = 0;
  v36 = 0;
  v35 = 0;
  *((_DWORD *)a2 + 2) = v6;
  llvm::MCExpr::evaluateAsRelocatableImpl(v7);
  if ((v18 & 1) == 0)
  {
    v24 = sub_1C62B94EC(a2);
    v31 = 1283;
    v26 = "unable to evaluate offset for variable '";
    goto LABEL_32;
  }
  if (v33)
  {
    v19 = *(_QWORD *)(v33 + 16);
    v20 = *(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8;
    if (!v20 && (*(_DWORD *)(v19 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v19 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v19 + 24));
      *(_QWORD *)v19 = *(_QWORD *)v19 & 7 | v20;
    }
    if (!v20)
    {
      v27 = v33;
LABEL_31:
      v24 = sub_1C62B94EC(*(_BYTE **)(v27 + 16));
      v31 = 1283;
      v26 = "unable to evaluate offset to undefined symbol '";
LABEL_32:
      v30[0] = (uint64_t)v26;
      v30[2] = v24;
      v30[3] = v25;
      v28 = "'";
      v29 = 259;
      sub_1C6131AAC(v30, (uint64_t *)&v28, (uint64_t)v32);
      llvm::report_fatal_error((uint64_t)v32, 1);
    }
  }
  if (v34)
  {
    v21 = *(_QWORD *)(v34 + 16);
    v22 = *(_QWORD *)v21 & 0xFFFFFFFFFFFFFFF8;
    if (!v22 && (*(_DWORD *)(v21 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v21 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v21 + 24));
      *(_QWORD *)v21 = *(_QWORD *)v21 & 7 | v22;
    }
    if (!v22)
    {
      v27 = v34;
      goto LABEL_31;
    }
  }
  v8 = v35;
  if (v33)
    v8 = llvm::MachObjectWriter::getSymbolAddress(this, *(const llvm::MCSymbol **)(v33 + 16), a3) + v35;
  if (v34)
    v8 += llvm::MachObjectWriter::getSymbolAddress(this, *(const llvm::MCSymbol **)(v34 + 16), a3);
  return v8;
}

uint64_t llvm::MachObjectWriter::getPaddingSize(llvm::MachObjectWriter *this, const llvm::MCSection *a2, const llvm::MCAsmLayout *a3)
{
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  const llvm::MCSection *v9;
  int v10;
  int v11;
  uint64_t v12;
  const llvm::MCFragment *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;

  v5 = *((_DWORD *)this + 20);
  if (!v5)
  {
LABEL_11:
    v12 = 0;
    goto LABEL_7;
  }
  v6 = *((_QWORD *)this + 8);
  v7 = v5 - 1;
  v8 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v9 = *(const llvm::MCSection **)(v6 + 16 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9 != (const llvm::MCSection *)-4096)
    {
      v11 = v8 + v10++;
      v8 = v11 & v7;
      v9 = *(const llvm::MCSection **)(v6 + 16 * v8);
      if (v9 == a2)
        goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_6:
  v12 = *(_QWORD *)(v6 + 16 * v8 + 8);
LABEL_7:
  v13 = (const llvm::MCFragment *)*((_QWORD *)a2 + 13);
  llvm::MCAsmLayout::ensureValid(a3, v13);
  v14 = *((_QWORD *)v13 + 4);
  llvm::MCAssembler::computeFragmentSize(*(_QWORD *)a3, (uint64_t)a3, (uint64_t)v13);
  v16 = *((_DWORD *)a2 + 8) + 1;
  if (*((_DWORD *)a3 + 4) <= v16)
    return 0;
  v17 = v15;
  v18 = *(_BYTE **)(*((_QWORD *)a3 + 1) + 8 * v16);
  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v18 + 16))(v18) & 1) != 0)
    return 0;
  v19 = 1 << (63 - __clz((1 << v18[24])));
  return ((v14 + v12 + v17 + v19 - 1) & -v19) - (v14 + v12 + v17);
}

llvm::raw_ostream *llvm::MachObjectWriter::writeHeader(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6, int a7)
{
  int v13;
  unsigned int v14;
  llvm::raw_ostream *v15;
  unsigned int v16;
  unsigned int v17;
  llvm::raw_ostream *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  llvm::raw_ostream *v23;
  unsigned int v24;
  llvm::raw_ostream *v25;
  unsigned int v26;
  unsigned int v27;
  llvm::raw_ostream *v28;
  unsigned int v29;
  unsigned int v30;
  llvm::raw_ostream *v31;
  unsigned int v32;
  unsigned int v33;
  llvm::raw_ostream *v34;
  int v35;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v37;
  char v38[4];

  if (a5)
    v13 = 0x2000;
  else
    v13 = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 80))(*(_QWORD *)(a1 + 208));
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 8) & 1) != 0)
    v14 = -17958193;
  else
    v14 = -17958194;
  v15 = *(llvm::raw_ostream **)(a1 + 208);
  v16 = bswap32(v14);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v14 = v16;
  *(_DWORD *)v38 = v14;
  llvm::raw_ostream::write(v15, v38, 4uLL);
  v17 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 12);
  v18 = *(llvm::raw_ostream **)(a1 + 208);
  v19 = bswap32(v17);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v17 = v19;
  *(_DWORD *)v38 = v17;
  llvm::raw_ostream::write(v18, v38, 4uLL);
  v20 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 16);
  if (a7)
    v21 = -1073741822;
  else
    v21 = -2147483646;
  v22 = v21 | ((_DWORD)a6 << 24);
  if ((a6 & 0xFF00000000) != 0)
    v20 = v22;
  v23 = *(llvm::raw_ostream **)(a1 + 208);
  v24 = bswap32(v20);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v20 = v24;
  *(_DWORD *)v38 = v20;
  llvm::raw_ostream::write(v23, v38, 4uLL);
  v25 = *(llvm::raw_ostream **)(a1 + 208);
  v26 = bswap32(a2);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v27 = v26;
  else
    v27 = a2;
  *(_DWORD *)v38 = v27;
  llvm::raw_ostream::write(v25, v38, 4uLL);
  v28 = *(llvm::raw_ostream **)(a1 + 208);
  v29 = bswap32(a3);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v30 = v29;
  else
    v30 = a3;
  *(_DWORD *)v38 = v30;
  llvm::raw_ostream::write(v28, v38, 4uLL);
  v31 = *(llvm::raw_ostream **)(a1 + 208);
  v32 = bswap32(a4);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v33 = v32;
  else
    v33 = a4;
  *(_DWORD *)v38 = v33;
  llvm::raw_ostream::write(v31, v38, 4uLL);
  v34 = *(llvm::raw_ostream **)(a1 + 208);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v35 = v13 << 8;
  else
    v35 = v13;
  *(_DWORD *)v38 = v35;
  result = llvm::raw_ostream::write(v34, v38, 4uLL);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 8) & 1) != 0)
  {
    v37 = *(llvm::raw_ostream **)(a1 + 208);
    *(_DWORD *)v38 = 0;
    return llvm::raw_ostream::write(v37, v38, 4uLL);
  }
  return result;
}

llvm::raw_ostream *llvm::MachObjectWriter::writeWithPadding(uint64_t a1, const char *a2, size_t a3, int a4)
{
  llvm::raw_ostream *v7;
  void *v8;

  v7 = *(llvm::raw_ostream **)(a1 + 208);
  v8 = (void *)*((_QWORD *)v7 + 4);
  if (a3 > *((_QWORD *)v7 + 3) - (_QWORD)v8)
  {
    llvm::raw_ostream::write(v7, a2, a3);
  }
  else if (a3)
  {
    memcpy(v8, a2, a3);
    *((_QWORD *)v7 + 4) += a3;
  }
  return llvm::raw_ostream::write_zeros(*(llvm::raw_ostream **)(a1 + 208), a4 - (int)a3);
}

llvm::raw_ostream *llvm::MachObjectWriter::writeSegmentLoadCommand(uint64_t a1, const char *a2, size_t a3, unsigned int a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, unsigned int a9, unsigned int a10)
{
  int v18;
  llvm::raw_ostream *v19;
  int v20;
  int v21;
  unsigned int v22;
  llvm::raw_ostream *v23;
  unsigned int v24;
  uint64_t v25;
  void *v26;
  llvm::raw_ostream *v27;
  unint64_t v28;
  unint64_t v29;
  llvm::raw_ostream *v30;
  unint64_t v31;
  unint64_t v32;
  llvm::raw_ostream *v33;
  unint64_t v34;
  unint64_t v35;
  llvm::raw_ostream *v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  llvm::raw_ostream *v40;
  unsigned int v41;
  unsigned int v42;
  llvm::raw_ostream *v43;
  unsigned int v44;
  unsigned int v45;
  llvm::raw_ostream *v46;
  unsigned int v47;
  unsigned int v48;
  llvm::raw_ostream *v49;
  llvm::raw_ostream *v51;
  unsigned int v52;
  int v53;
  llvm::raw_ostream *v54;
  unsigned int v55;
  int v56;
  llvm::raw_ostream *v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  int v61;
  char v62[8];

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 80))(*(_QWORD *)(a1 + 208));
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 8) & 1) != 0)
    v18 = 25;
  else
    v18 = 1;
  v19 = *(llvm::raw_ostream **)(a1 + 208);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 8) & 1) != 0)
    v20 = 72;
  else
    v20 = 56;
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v18 <<= 24;
  *(_DWORD *)v62 = v18;
  llvm::raw_ostream::write(v19, v62, 4uLL);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 8) & 1) != 0)
    v21 = 80;
  else
    v21 = 68;
  v22 = v20 + v21 * a4;
  v23 = *(llvm::raw_ostream **)(a1 + 208);
  v24 = bswap32(v22);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v22 = v24;
  *(_DWORD *)v62 = v22;
  llvm::raw_ostream::write(v23, v62, 4uLL);
  v25 = *(_QWORD *)(a1 + 208);
  v26 = *(void **)(v25 + 32);
  if (a3 > *(_QWORD *)(v25 + 24) - (_QWORD)v26)
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 208), a2, a3);
  }
  else if (a3)
  {
    memcpy(v26, a2, a3);
    *(_QWORD *)(v25 + 32) += a3;
  }
  llvm::raw_ostream::write_zeros(*(llvm::raw_ostream **)(a1 + 208), 16 - a3);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 8) & 1) != 0)
  {
    v27 = *(llvm::raw_ostream **)(a1 + 208);
    v28 = bswap64(a5);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v29 = v28;
    else
      v29 = a5;
    *(_QWORD *)v62 = v29;
    llvm::raw_ostream::write(v27, v62, 8uLL);
    v30 = *(llvm::raw_ostream **)(a1 + 208);
    v31 = bswap64(a6);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v32 = v31;
    else
      v32 = a6;
    *(_QWORD *)v62 = v32;
    llvm::raw_ostream::write(v30, v62, 8uLL);
    v33 = *(llvm::raw_ostream **)(a1 + 208);
    v34 = bswap64(a7);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v35 = v34;
    else
      v35 = a7;
    *(_QWORD *)v62 = v35;
    llvm::raw_ostream::write(v33, v62, 8uLL);
    v36 = *(llvm::raw_ostream **)(a1 + 208);
    v37 = bswap64(a8);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v38 = v37;
    else
      v38 = a8;
    *(_QWORD *)v62 = v38;
    v39 = 8;
  }
  else
  {
    v51 = *(llvm::raw_ostream **)(a1 + 208);
    v52 = bswap32(a5);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v53 = v52;
    else
      v53 = a5;
    *(_DWORD *)v62 = v53;
    llvm::raw_ostream::write(v51, v62, 4uLL);
    v54 = *(llvm::raw_ostream **)(a1 + 208);
    v55 = bswap32(a6);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v56 = v55;
    else
      v56 = a6;
    *(_DWORD *)v62 = v56;
    llvm::raw_ostream::write(v54, v62, 4uLL);
    v57 = *(llvm::raw_ostream **)(a1 + 208);
    v58 = bswap32(a7);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v59 = v58;
    else
      v59 = a7;
    *(_DWORD *)v62 = v59;
    llvm::raw_ostream::write(v57, v62, 4uLL);
    v36 = *(llvm::raw_ostream **)(a1 + 208);
    v60 = bswap32(a8);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v61 = v60;
    else
      v61 = a8;
    *(_DWORD *)v62 = v61;
    v39 = 4;
  }
  llvm::raw_ostream::write(v36, v62, v39);
  v40 = *(llvm::raw_ostream **)(a1 + 208);
  v41 = bswap32(a9);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v42 = v41;
  else
    v42 = a9;
  *(_DWORD *)v62 = v42;
  llvm::raw_ostream::write(v40, v62, 4uLL);
  v43 = *(llvm::raw_ostream **)(a1 + 208);
  v44 = bswap32(a10);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v45 = v44;
  else
    v45 = a10;
  *(_DWORD *)v62 = v45;
  llvm::raw_ostream::write(v43, v62, 4uLL);
  v46 = *(llvm::raw_ostream **)(a1 + 208);
  v47 = bswap32(a4);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v48 = v47;
  else
    v48 = a4;
  *(_DWORD *)v62 = v48;
  llvm::raw_ostream::write(v46, v62, 4uLL);
  v49 = *(llvm::raw_ostream **)(a1 + 208);
  *(_DWORD *)v62 = 0;
  return llvm::raw_ostream::write(v49, v62, 4uLL);
}

llvm::raw_ostream *llvm::MachObjectWriter::writeSection(llvm::MachObjectWriter *this, const llvm::MCAsmLayout *a2, const llvm::MCSection *a3, unint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8)
{
  const llvm::MCFragment *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _BOOL4 v17;
  const char *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  size_t v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  unint64_t v27;
  int v28;
  llvm::raw_ostream *v29;
  unint64_t v30;
  unint64_t v31;
  llvm::raw_ostream *v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  unsigned int v36;
  llvm::raw_ostream *v37;
  unsigned int v38;
  unsigned int v39;
  llvm::raw_ostream *v40;
  unsigned int v41;
  unsigned int v42;
  llvm::raw_ostream *v43;
  unsigned int v44;
  llvm::raw_ostream *v45;
  unsigned int v46;
  unsigned int v47;
  llvm::raw_ostream *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  llvm::raw_ostream *v53;
  unsigned int v54;
  unsigned int v55;
  llvm::raw_ostream *v56;
  unsigned int v57;
  llvm::raw_ostream *result;
  llvm::raw_ostream *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  const llvm::MCSection *v63;
  int v64;
  llvm::raw_ostream *v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  char v75[8];

  v13 = (const llvm::MCFragment *)*((_QWORD *)a3 + 13);
  llvm::MCAsmLayout::ensureValid(a2, v13);
  v71 = *((_QWORD *)v13 + 4);
  llvm::MCAssembler::computeFragmentSize(*(_QWORD *)a2, (uint64_t)a2, (uint64_t)v13);
  v15 = v14;
  v16 = *((unsigned __int8 *)a3 + 240);
  v17 = v16 < 0x13;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 26) + 80))(*((_QWORD *)this + 26));
  v18 = (const char *)*((_QWORD *)a3 + 25);
  v19 = *((_QWORD *)a3 + 26);
  v20 = *((_QWORD *)this + 26);
  v21 = *(void **)(v20 + 32);
  if (v19 > *(_QWORD *)(v20 + 24) - (_QWORD)v21)
  {
    llvm::raw_ostream::write(*((llvm::raw_ostream **)this + 26), v18, *((_QWORD *)a3 + 26));
  }
  else if (v19)
  {
    memcpy(v21, v18, *((_QWORD *)a3 + 26));
    *(_QWORD *)(v20 + 32) += v19;
  }
  v22 = 0x41002u >> v16;
  llvm::raw_ostream::write_zeros(*((llvm::raw_ostream **)this + 26), 16 - v19);
  if (*((_BYTE *)a3 + 239))
  {
    v24 = (_QWORD *)*((_QWORD *)this + 26);
    v26 = v24 + 4;
    v25 = (void *)v24[4];
    v23 = 16;
    if (v24[3] - (_QWORD)v25 > 0xFuLL)
      goto LABEL_9;
LABEL_50:
    llvm::raw_ostream::write((llvm::raw_ostream *)v24, (const char *)a3 + 224, v23);
    goto LABEL_10;
  }
  v23 = strlen((const char *)a3 + 224);
  v24 = (_QWORD *)*((_QWORD *)this + 26);
  v26 = v24 + 4;
  v25 = (void *)v24[4];
  if (v23 > v24[3] - (_QWORD)v25)
    goto LABEL_50;
  if (v23)
  {
LABEL_9:
    memcpy(v25, (char *)a3 + 224, v23);
    *v26 += v23;
  }
LABEL_10:
  v27 = v15 + v71;
  v28 = v17 & v22;
  llvm::raw_ostream::write_zeros(*((llvm::raw_ostream **)this + 26), 16 - v23);
  if ((*(_BYTE *)(*((_QWORD *)this + 1) + 8) & 1) != 0)
  {
    v29 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
    v30 = bswap64(a4);
    if ((*((_DWORD *)this + 54) - 1) >= 2)
      v31 = v30;
    else
      v31 = a4;
    *(_QWORD *)v75 = v31;
    llvm::raw_ostream::write(v29, v75, 8uLL);
    v32 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
    v33 = bswap64(v27);
    if ((*((_DWORD *)this + 54) - 1) >= 2)
      v34 = v33;
    else
      v34 = v15 + v71;
    *(_QWORD *)v75 = v34;
    v35 = 8;
  }
  else
  {
    v65 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
    v66 = bswap32(a4);
    if ((*((_DWORD *)this + 54) - 1) >= 2)
      v67 = v66;
    else
      v67 = a4;
    *(_DWORD *)v75 = v67;
    llvm::raw_ostream::write(v65, v75, 4uLL);
    v32 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
    v68 = bswap32(v27);
    if ((*((_DWORD *)this + 54) - 1) >= 2)
      v69 = v68;
    else
      v69 = v15 + v71;
    *(_DWORD *)v75 = v69;
    v35 = 4;
  }
  llvm::raw_ostream::write(v32, v75, v35);
  if (v28)
    v36 = 0;
  else
    v36 = a5;
  v37 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v38 = bswap32(v36);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v36 = v38;
  *(_DWORD *)v75 = v36;
  llvm::raw_ostream::write(v37, v75, 4uLL);
  v39 = 31 - __clz(1 << *((_BYTE *)a3 + 24));
  v40 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v41 = bswap32(v39);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v39 = v41;
  *(_DWORD *)v75 = v39;
  llvm::raw_ostream::write(v40, v75, 4uLL);
  if (a8)
    v42 = a7;
  else
    v42 = 0;
  v43 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v44 = bswap32(v42);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v42 = v44;
  *(_DWORD *)v75 = v42;
  llvm::raw_ostream::write(v43, v75, 4uLL);
  v45 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v46 = bswap32(a8);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v47 = v46;
  else
    v47 = a8;
  *(_DWORD *)v75 = v47;
  llvm::raw_ostream::write(v45, v75, 4uLL);
  v48 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v49 = bswap32(a6);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v50 = v49;
  else
    v50 = a6;
  *(_DWORD *)v75 = v50;
  llvm::raw_ostream::write(v48, v75, 4uLL);
  v51 = 0;
  v52 = *((_DWORD *)this + 14);
  if (v52)
  {
    v60 = *((_QWORD *)this + 5);
    v61 = v52 - 1;
    v62 = (v52 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v63 = *(const llvm::MCSection **)(v60 + 16 * v62);
    if (v63 == a3)
    {
LABEL_45:
      v51 = *(_DWORD *)(v60 + 16 * v62 + 8);
    }
    else
    {
      v64 = 1;
      while (v63 != (const llvm::MCSection *)-4096)
      {
        v70 = v62 + v64++;
        v62 = v70 & v61;
        v63 = *(const llvm::MCSection **)(v60 + 16 * v62);
        if (v63 == a3)
          goto LABEL_45;
      }
      v51 = 0;
    }
  }
  v53 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v54 = bswap32(v51);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v51 = v54;
  *(_DWORD *)v75 = v51;
  llvm::raw_ostream::write(v53, v75, 4uLL);
  v55 = *((_DWORD *)a3 + 61);
  v56 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v57 = bswap32(v55);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v55 = v57;
  *(_DWORD *)v75 = v55;
  result = llvm::raw_ostream::write(v56, v75, 4uLL);
  if ((*(_BYTE *)(*((_QWORD *)this + 1) + 8) & 1) != 0)
  {
    v59 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
    *(_DWORD *)v75 = 0;
    return llvm::raw_ostream::write(v59, v75, 4uLL);
  }
  return result;
}

llvm::raw_ostream *llvm::MachObjectWriter::writeSymtabLoadCommand(llvm::MachObjectWriter *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  llvm::raw_ostream *v10;
  int v11;
  llvm::raw_ostream *v12;
  int v13;
  llvm::raw_ostream *v14;
  unsigned int v15;
  unsigned int v16;
  llvm::raw_ostream *v17;
  unsigned int v18;
  unsigned int v19;
  llvm::raw_ostream *v20;
  unsigned int v21;
  unsigned int v22;
  llvm::raw_ostream *v23;
  unsigned int v24;
  unsigned int v25;
  char v27[4];

  (*(void (**)(_QWORD))(**((_QWORD **)this + 26) + 80))(*((_QWORD *)this + 26));
  v10 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v11 = 0x2000000;
  else
    v11 = 2;
  *(_DWORD *)v27 = v11;
  llvm::raw_ostream::write(v10, v27, 4uLL);
  v12 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v13 = 402653184;
  else
    v13 = 24;
  *(_DWORD *)v27 = v13;
  llvm::raw_ostream::write(v12, v27, 4uLL);
  v14 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v15 = bswap32(a2);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v16 = v15;
  else
    v16 = a2;
  *(_DWORD *)v27 = v16;
  llvm::raw_ostream::write(v14, v27, 4uLL);
  v17 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v18 = bswap32(a3);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v19 = v18;
  else
    v19 = a3;
  *(_DWORD *)v27 = v19;
  llvm::raw_ostream::write(v17, v27, 4uLL);
  v20 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v21 = bswap32(a4);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v22 = v21;
  else
    v22 = a4;
  *(_DWORD *)v27 = v22;
  llvm::raw_ostream::write(v20, v27, 4uLL);
  v23 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v24 = bswap32(a5);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v25 = v24;
  else
    v25 = a5;
  *(_DWORD *)v27 = v25;
  return llvm::raw_ostream::write(v23, v27, 4uLL);
}

