uint64_t sub_1C5F41544()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5F401FC(v0);
}

void sub_1C5F41570(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5F41594()
{
}

void sub_1C5F415A4(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C5F415AC(uint64_t a1, uint64_t **a2)
{
  return sub_1C5F40338(a2);
}

char *sub_1C5F415B4(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  llvm::PointerType *v4;
  int v5;
  unsigned int v6;
  const char *v8;
  __int16 v9;

  v2 = operator new(0x78uLL);
  v2[13] = v2[13] & 0x38000000 | 1;
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = v2 + 8;
  v3 = *(_QWORD *)a1;
  v4 = **(llvm::PointerType ***)(a1 + 8);
  v8 = "__dso_handle";
  v9 = 259;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v2 + 8), v3, v4, 1, 9, 0, (uint64_t)&v8, 0, 0, 0, 0);
  v5 = v2[16];
  v6 = v5 & 0xFFFFFFCF | 0x10;
  v2[16] = v6;
  if ((v5 & 0xFu) - 7 < 2)
    goto LABEL_4;
  if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)(v2 + 8)) & 1) == 0)
  {
    v6 = v2[16];
LABEL_4:
    v2[16] = v6 | 0x4000;
  }
  return (char *)(v2 + 8);
}

void llvm::initializeLowerInvokeLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED837720);
  if (v2 != -1)
  {
    v5[0] = sub_1C5F416E8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED837720, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5F416E8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Lower invoke and unwind, for unwindless code generators";
  *(_QWORD *)(v2 + 8) = 55;
  *(_QWORD *)(v2 + 16) = "lowerinvoke";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5884;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5F41F20;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5F41778(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5884;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81A9BB0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED837720);
  if (v3 != -1)
  {
    v7[0] = sub_1C5F416E8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED837720, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5F41840(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _BYTE *v4;
  llvm::BasicBlock *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  void *v66;
  uint64_t v67;
  llvm::ValueSymbolTable *v68;
  uint64_t v69;
  llvm::ValueSymbolTable *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  llvm::BasicBlock *v94;
  uint64_t v95;
  unsigned __int8 *v96;
  _QWORD v97[4];
  __int16 v98;
  char v99;
  void *v100;
  uint64_t v101;
  _BYTE v102[48];
  void *v103;
  uint64_t v104;
  _QWORD v105[18];

  v105[16] = *MEMORY[0x1E0C80C00];
  v1 = a1 + 72;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 == a1 + 72)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = v102;
    v90 = a1 + 72;
    do
    {
      if (v2)
        v5 = (llvm::BasicBlock *)(v2 - 24);
      else
        v5 = 0;
      v7 = (uint64_t)v5 + 40;
      v6 = (_QWORD *)*((_QWORD *)v5 + 5);
      if (v6 != (_QWORD *)((char *)v5 + 40))
      {
        v8 = v6 ? (uint64_t)(v6 - 3) : 0;
        v9 = *(unsigned __int8 *)(v8 + 16) - 40;
        v10 = v9 >= 0xFFFFFFF5 ? v8 : 0;
        if (v6)
        {
          if (*(_BYTE *)(v10 + 16) == 33 && v9 >= 0xFFFFFFF5)
          {
            v12 = *(_DWORD *)(v10 + 20);
            v13 = v12 & 0x7FFFFFF;
            v14 = (_QWORD *)(v10 - 32 * v13);
            v94 = v5;
            if (v12 < 0)
            {
              v74 = *(v14 - 1);
              if ((v74 & 0xFFFFFFFF0) != 0)
                v15 = (*((_DWORD *)v14 - 3) - *(_DWORD *)((char *)v14 - v74));
              else
                v15 = 0;
              v4 = v102;
            }
            else
            {
              v15 = 0;
            }
            v16 = v10 - 32 * v15 - 96;
            v103 = v105;
            v104 = 0x1000000000;
            v17 = v16 - (_QWORD)v14;
            if ((unint64_t)(v16 - (_QWORD)v14) >= 0x201)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, (uint64_t)v105, v17 >> 5, 8);
              v18 = v104;
              v19 = v104;
            }
            else
            {
              v18 = 0;
              v19 = 0;
            }
            if (v14 != (_QWORD *)v16)
            {
              v20 = (char *)v103 + 8 * v18;
              v21 = 32 * v13 - 32 * v15 - 96;
              do
              {
                v22 = *v14;
                v14 += 4;
                *v20++ = v22;
                v21 -= 32;
              }
              while (v21);
            }
            v23 = v19 + ((unint64_t)v17 >> 5);
            LODWORD(v104) = v23;
            v100 = v102;
            v101 = 0x100000000;
            v24 = *(_DWORD *)(v10 + 20);
            if (v24 < 0)
            {
              v75 = *(_QWORD *)(v10 - 32 * (v24 & 0x7FFFFFF) - 8);
              if ((v75 & 0xFFFFFFFF0) != 0)
              {
                v81 = (v75 >> 4);
                v82 = v10;
                do
                {
                  v83 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
                  v84 = v10 - 32 * v83;
                  v85 = (unsigned int *)(v82 - (*(_QWORD *)(v84 - 8) + 32 * v83));
                  v86 = *v85;
                  v87 = v85[1];
                  v88 = *((_QWORD *)v85 - 1);
                  v97[0] = v84 + 32 * v86;
                  v97[1] = v87 - v86;
                  v97[2] = v88;
                  sub_1C623D924((uint64_t)&v100, (uint64_t)v97);
                  v82 += 16;
                  --v81;
                }
                while (v81);
                v23 = v104;
                v4 = v100;
                v25 = v101;
              }
              else
              {
                v25 = 0;
                v4 = v102;
              }
            }
            else
            {
              v25 = 0;
            }
            v26 = *(_QWORD *)(v10 + 72);
            v27 = *(_QWORD *)(v10 - 32);
            v28 = v25;
            v98 = 257;
            v92 = (uint64_t *)v103;
            v93 = (uint64_t)v4;
            v91 = v26;
            if (v25)
            {
              v25 = 0;
              v76 = 48 * v28;
              v77 = v4 + 32;
              do
              {
                v25 += (*v77 - *(v77 - 1)) >> 3;
                v77 += 6;
                v76 -= 48;
              }
              while (v76);
            }
            v29 = v23;
            v30 = v23 + 1;
            v31 = v25 + v23 + 1;
            v32 = (16 * v28);
            v95 = v28;
            if ((_DWORD)v32)
              v33 = (16 * (_DWORD)v28) | 8u;
            else
              v33 = 0;
            v34 = (char *)operator new(v33 + 32 * v31 + 80);
            v35 = &v34[v33];
            v36 = (uint64_t)&v34[32 * v31 + v33];
            *(_DWORD *)(v36 + 20) = v31 & 0x7FFFFFF | (((_DWORD)v32 != 0) << 31) | *(_DWORD *)(v36 + 20) & 0x38000000;
            if ((_DWORD)v31)
            {
              do
              {
                *(_QWORD *)v35 = 0;
                *((_QWORD *)v35 + 1) = 0;
                *((_QWORD *)v35 + 2) = 0;
                *((_QWORD *)v35 + 3) = v36;
                v35 += 32;
              }
              while (v35 != (char *)v36);
            }
            v37 = v91;
            if ((_DWORD)v32)
              *(_QWORD *)&v34[v32] = v32;
            v38 = v29;
            if ((_DWORD)v95)
            {
              v39 = 0;
              v78 = 48 * v95;
              v79 = (_QWORD *)(v93 + 32);
              v40 = v92;
              do
              {
                v39 += (*v79 - *(v79 - 1)) >> 3;
                v79 += 6;
                v78 -= 48;
              }
              while (v78);
            }
            else
            {
              v39 = 0;
              v40 = v92;
            }
            *(_QWORD *)v36 = **(_QWORD **)(v91 + 16);
            *(_QWORD *)(v36 + 8) = 0;
            v41 = *(_DWORD *)(v36 + 20) & 0xC0000000 | (v39 + v30) & 0x7FFFFFF;
            *(_DWORD *)(v36 + 16) = 84;
            *(_DWORD *)(v36 + 20) = v41;
            *(_OWORD *)(v36 + 24) = 0u;
            v42 = v36 + 24;
            *(_OWORD *)(v36 + 40) = 0u;
            *(_DWORD *)(v36 + 56) = 0;
            v43 = *(_QWORD *)(v10 + 40);
            *(_QWORD *)(v36 + 40) = v43;
            *(_WORD *)(v43 + 18) &= ~0x8000u;
            if ((*(_BYTE *)(v36 + 23) & 0x10) != 0)
            {
              v67 = *(_QWORD *)(v43 + 56);
              if (v67)
              {
                v68 = *(llvm::ValueSymbolTable **)(v67 + 104);
                if (v68)
                {
                  llvm::ValueSymbolTable::reinsertValue(v68, (llvm::Value *)v36);
                  v37 = v91;
                }
              }
            }
            v44 = (uint64_t *)(v10 + 24);
            v45 = *(_QWORD *)(v10 + 24);
            *(_QWORD *)(v36 + 24) = v45;
            *(_QWORD *)(v36 + 32) = v10 + 24;
            *(_QWORD *)(v45 + 8) = v42;
            *(_QWORD *)(v10 + 24) = v42;
            *(_QWORD *)(v36 + 64) = 0;
            *(_QWORD *)(v36 + 72) = v37;
            sub_1C5382FD4((uint64_t)&v99, v40, &v40[v38], v36 - 32 * (*(_DWORD *)(v36 + 20) & 0x7FFFFFF));
            v46 = (_QWORD *)(v36 - 32);
            if (*(_QWORD *)(v36 - 32))
            {
              **(_QWORD **)(v36 - 16) = *(_QWORD *)(v36 - 24);
              v80 = *(_QWORD *)(v36 - 24);
              if (v80)
                *(_QWORD *)(v80 + 16) = *(_QWORD *)(v36 - 16);
            }
            *v46 = v27;
            if (v27)
            {
              v49 = *(_QWORD *)(v27 + 8);
              v48 = (_QWORD *)(v27 + 8);
              v47 = v49;
              *(_QWORD *)(v36 - 24) = v49;
              if (v49)
                *(_QWORD *)(v47 + 16) = v36 - 24;
              *(_QWORD *)(v36 - 16) = v48;
              *v48 = v46;
            }
            llvm::CallBase::populateBundleOperandInfos(v36, v93, v95, v38);
            llvm::Value::setName((uint64_t ***)v36, (uint64_t)v97);
            llvm::Value::takeName((llvm::Value *)v36, (llvm::Value *)v10);
            *(_WORD *)(v36 + 18) = *(_WORD *)(v36 + 18) & 0xF003 | *(_WORD *)(v10 + 18) & 0xFFC;
            *(_QWORD *)(v36 + 64) = *(_QWORD *)(v10 + 64);
            v50 = *(unsigned __int8 **)(v10 + 48);
            v96 = v50;
            if (v50)
              llvm::MetadataTracking::track((uint64_t)&v96, v50, 2);
            v51 = *(unsigned __int8 **)(v36 + 48);
            if (v51)
              llvm::MetadataTracking::untrack(v36 + 48, v51);
            v52 = v96;
            *(_QWORD *)(v36 + 48) = v96;
            if (v52)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v96, v52, v36 + 48);
              v96 = 0;
            }
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v10, (llvm::Value *)v36, (llvm::Value *)1);
            v53 = *(_QWORD *)(v10 - 96);
            v54 = (char *)operator new(0x60uLL);
            *((_DWORD *)v54 + 13) = *((_DWORD *)v54 + 13) & 0x38000000 | 1;
            *((_QWORD *)v54 + 1) = 0;
            *((_QWORD *)v54 + 2) = 0;
            *(_QWORD *)v54 = 0;
            *((_QWORD *)v54 + 4) = ***(_QWORD ***)v53 + 1576;
            *((_QWORD *)v54 + 3) = v54 + 32;
            *((_QWORD *)v54 + 5) = 0;
            v54[48] = 30;
            v54[49] = 0;
            *((_WORD *)v54 + 25) = 0;
            *((_DWORD *)v54 + 13) = 1;
            *(_OWORD *)(v54 + 56) = 0u;
            v55 = v54 + 56;
            *(_OWORD *)(v54 + 72) = 0u;
            *((_DWORD *)v54 + 22) = 0;
            v56 = *(_QWORD *)(v10 + 40);
            *((_QWORD *)v54 + 9) = v56;
            *(_WORD *)(v56 + 18) &= ~0x8000u;
            if ((v54[55] & 0x10) != 0
              && (v69 = *(_QWORD *)(v56 + 56)) != 0
              && (v70 = *(llvm::ValueSymbolTable **)(v69 + 104)) != 0)
            {
              llvm::ValueSymbolTable::reinsertValue(v70, (llvm::Value *)(v54 + 32));
              v71 = *(_QWORD *)v54;
              v72 = *v44;
              *((_QWORD *)v54 + 7) = *v44;
              *((_QWORD *)v54 + 8) = v44;
              *(_QWORD *)(v72 + 8) = v55;
              *v44 = (uint64_t)v55;
              if (v71)
              {
                **((_QWORD **)v54 + 2) = *((_QWORD *)v54 + 1);
                v73 = *((_QWORD *)v54 + 1);
                if (v73)
                  *(_QWORD *)(v73 + 16) = *((_QWORD *)v54 + 2);
              }
            }
            else
            {
              v57 = *v44;
              *((_QWORD *)v54 + 7) = *v44;
              *((_QWORD *)v54 + 8) = v44;
              *(_QWORD *)(v57 + 8) = v55;
              *v44 = (uint64_t)v55;
            }
            *(_QWORD *)v54 = v53;
            v60 = *(_QWORD *)(v53 + 8);
            v59 = (_QWORD *)(v53 + 8);
            v58 = v60;
            *((_QWORD *)v54 + 1) = v60;
            if (v60)
              *(_QWORD *)(v58 + 16) = v54 + 8;
            *((_QWORD *)v54 + 2) = v59;
            *v59 = v54;
            llvm::BasicBlock::removePredecessor(*(llvm::BasicBlock **)(v10 - 64), v94, 0);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v7, (uint64_t ***)v10);
            v61 = *(_QWORD *)(v10 + 24);
            v62 = *(_QWORD **)(v10 + 32);
            *v62 = v61;
            *(_QWORD *)(v61 + 8) = v62;
            *v44 = 0;
            *(_QWORD *)(v10 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v10);
            v63 = (char *)v100;
            if ((_DWORD)v101)
            {
              v64 = 48 * v101;
              v1 = v90;
              v4 = v102;
              do
              {
                v65 = &v63[v64];
                v66 = *(void **)&v63[v64 - 24];
                if (v66)
                {
                  *((_QWORD *)v65 - 2) = v66;
                  operator delete(v66);
                }
                if (*(v65 - 25) < 0)
                  operator delete(*((void **)v65 - 6));
                v64 -= 48;
              }
              while (v64);
              v63 = (char *)v100;
            }
            else
            {
              v1 = v90;
              v4 = v102;
            }
            if (v63 != v102)
              free(v63);
            if (v103 != v105)
              free(v103);
            v3 = 1;
          }
        }
      }
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != v1);
  }
  return v3 & 1;
}

uint64_t sub_1C5F41F20()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5F41778(v0);
}

void sub_1C5F41F4C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5F41F70(uint64_t a1, uint64_t a2)
{
  return sub_1C5F41840(a2);
}

void llvm::createMemCpyLoopKnownSize(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, char a5, char a6, __int16 a7, __int16 a8, char a9, _QWORD *a10, uint64_t a11)
{
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  llvm::MDNode *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  llvm::BasicBlock *v36;
  uint64_t v37;
  uint64_t **v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  llvm::Instruction *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  llvm::PHINode *v57;
  llvm::Value **v58;
  llvm::PHINode *v59;
  uint64_t ***v60;
  char *v61;
  char *v62;
  llvm::Value *v63;
  char v64;
  uint64_t *v65;
  uint64_t **v66;
  _QWORD *v67;
  uint64_t **v68;
  llvm::MDNode *Impl;
  char v70;
  uint64_t ***v71;
  char *v72;
  char *v73;
  llvm::Value *v74;
  uint64_t v75;
  uint64_t **v76;
  _QWORD *v77;
  uint64_t **v78;
  llvm::PHINode *v79;
  llvm::MDNode *v80;
  llvm::Value **v81;
  llvm::Value *v82;
  char *v83;
  char *v84;
  llvm::Value ***v85;
  uint64_t v86;
  _QWORD *v87;
  llvm::Value *v88;
  llvm::Value ****v89;
  llvm::Value *v90;
  char *v91;
  char *v92;
  unsigned __int8 **v93;
  int v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  llvm::Value **v98;
  llvm::Value *v99;
  _DWORD *v100;
  _DWORD *v101;
  uint64_t v102;
  llvm::Value *v103;
  _QWORD *v104;
  char *v105;
  char *v106;
  unsigned __int8 **v107;
  int v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unint64_t v112;
  unint64_t v113;
  _QWORD *i;
  _QWORD *v115;
  char *v116;
  char *v117;
  unsigned __int8 **v118;
  int v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  unsigned __int8 **v122;
  unsigned __int8 *v123;
  char *v124;
  char *v125;
  unsigned __int8 **v126;
  int v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  uint64_t *v131;
  llvm::PointerType *v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  llvm::Value **v138;
  uint64_t ***v139;
  char *v140;
  char *v141;
  llvm::Value *v142;
  uint64_t *v143;
  uint64_t **v144;
  _QWORD *v145;
  uint64_t **v146;
  llvm::MDNode *v147;
  uint64_t v148;
  uint64_t *v149;
  llvm::Value **v150;
  uint64_t ***v151;
  char *v152;
  char *v153;
  llvm::Value *v154;
  uint64_t v155;
  uint64_t **v156;
  _QWORD *v157;
  uint64_t **v158;
  llvm::MDNode *v159;
  char *v160;
  char *v161;
  unsigned __int8 **v162;
  int v163;
  unsigned __int8 *v164;
  unsigned __int8 *v165;
  unsigned __int8 **v166;
  unsigned __int8 *v167;
  char *v168;
  char *v169;
  unsigned __int8 **v170;
  int v171;
  unsigned __int8 *v172;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  uint64_t v175;
  char *v176;
  unsigned __int8 **v177;
  unsigned __int8 **v178;
  unsigned __int8 **v179;
  unint64_t v180;
  llvm::BasicBlock *v181;
  llvm::PointerType *v182;
  uint64_t v183;
  _QWORD **v184;
  char *v185;
  unsigned __int8 **v186;
  unsigned __int8 **v187;
  unsigned __int8 **v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  unsigned __int8 *v192;
  unsigned __int8 *v193;
  llvm::MDNode *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t *v202;
  unint64_t v204;
  llvm::ConstantInt *v205;
  _QWORD v206[4];
  __int16 v207;
  uint64_t *v208;
  _QWORD v209[4];
  __int16 v210;
  unsigned __int8 *v211;
  void *v212;
  uint64_t v213;
  _BYTE v214[16];
  __int16 v215;
  uint64_t **v216;
  _QWORD **v217;
  uint64_t v218;
  void **v219;
  void **v220;
  uint64_t v221;
  int v222;
  __int16 v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  void *v228;
  char *v229;
  int v230;
  _BYTE v231[16];
  __int16 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;

  v236 = *MEMORY[0x1E0C80C00];
  v16 = (_QWORD *)(a4 + 24);
  v17 = *(_DWORD *)(a4 + 32);
  if (v17 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a4 + 24)) == v17)
      return;
  }
  else if (!*v16)
  {
    return;
  }
  v184 = (_QWORD **)v16;
  v18 = a11;
  v189 = a1;
  v19 = *(uint64_t **)(a1 + 40);
  v20 = v19[7];
  v22 = *(_QWORD *)(v20 + 40) + 272;
  v208 = *(uint64_t **)*v19;
  v21 = v208;
  v23 = llvm::MDBuilder::createAnonymousAARoot(&v208, "MemCopyDomain", 0xDuLL, 0);
  v194 = llvm::MDBuilder::createAnonymousAARoot(&v208, "MemCopyAliasScope", 0x11uLL, (uint64_t)v23);
  v205 = *(llvm::ConstantInt **)a4;
  v202 = v21;
  v198 = *(_DWORD *)(*(_QWORD *)a3 + 8) >> 8;
  v199 = *(_DWORD *)(*(_QWORD *)a2 + 8) >> 8;
  v196 = 1 << a6;
  v197 = 1 << a5;
  v24 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(*(_QWORD *)*a10 + 1016))(*a10, v21, a4);
  v191 = v22;
  sub_1C4768AD0(v22, v24);
  v27 = v26;
  if ((_DWORD)v25 == 1)
  v28 = v27 + 7;
  v29 = *(_DWORD *)(a4 + 32);
  v30 = v184;
  v31 = (unint64_t *)v184;
  if (v29 >= 0x41)
    v31 = *v184;
  v32 = *v31;
  v33 = (v28 >> 3);
  v34 = v32 / v33;
  v35 = v189;
  if (v33 > v32)
  {
    v195 = (uint64_t *)a3;
    v36 = 0;
    goto LABEL_106;
  }
  v182 = (llvm::PointerType *)v24;
  v183 = v32 / v33;
  v229 = "memcpy-split";
  v232 = 259;
  v37 = llvm::BasicBlock::splitBasicBlock(v19, (uint64_t *)(v189 + 24), (uint64_t)&v229, 0);
  v229 = "load-store-loop";
  v232 = 259;
  v38 = (uint64_t **)operator new();
  *v38 = (uint64_t *)(*v202 + 1600);
  v38[1] = 0;
  v39 = *((_DWORD *)v38 + 5) & 0xC0000000;
  *((_DWORD *)v38 + 4) = 22;
  *((_DWORD *)v38 + 5) = v39;
  v38[3] = 0;
  v40 = v38 + 3;
  v38[4] = 0;
  v38[5] = (uint64_t *)(v38 + 5);
  v38[6] = (uint64_t *)(v38 + 5);
  v38[7] = 0;
  v41 = v20 + 72;
  v181 = (llvm::BasicBlock *)v37;
  if (v37)
    v42 = (uint64_t *)(v37 + 24);
  else
    v42 = (uint64_t *)(v20 + 72);
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v41, v38);
  v43 = *v42;
  v38[4] = v42;
  *v40 = v43;
  *(_QWORD *)(v43 + 8) = v40;
  *v42 = (uint64_t)v40;
  llvm::Value::setName((uint64_t ***)v38, (uint64_t)&v229);
  v45 = v19 + 5;
  v44 = (uint64_t *)v19[5];
  if (v44 == v19 + 5)
  {
    v47 = 0;
  }
  else
  {
    if (v44)
      v46 = (unsigned __int8 *)(v44 - 3);
    else
      v46 = 0;
    if (v46[16] - 29 >= 0xB)
      v47 = 0;
    else
      v47 = (llvm::Instruction *)v46;
  }
  llvm::Instruction::setSuccessor(v47, 0, (llvm::BasicBlock *)v38);
  v48 = (_QWORD *)*v45;
  v49 = v33;
  if ((_QWORD *)*v45 == v45)
  {
    v51 = 0;
  }
  else
  {
    if (v48)
      v50 = (uint64_t)(v48 - 3);
    else
      v50 = 0;
    if (*(unsigned __int8 *)(v50 + 16) - 29 >= 0xB)
      v51 = 0;
    else
      v51 = v50;
  }
  sub_1C4773D54((uint64_t)&v229, v51, 0, 0, 0);
  v52 = llvm::PointerType::get(v182, (llvm::Type *)v199);
  v53 = llvm::PointerType::get(v182, (llvm::Type *)v198);
  if (*(_QWORD *)a2 != v52)
  {
    v215 = 257;
    a2 = sub_1C4773E38((uint64_t *)&v229, 49, a2, v52, (uint64_t)&v212);
  }
  v54 = v49;
  if (*(_QWORD *)a3 == v53)
  {
    v195 = (uint64_t *)a3;
  }
  else
  {
    v215 = 257;
    v195 = (uint64_t *)sub_1C4773E38((uint64_t *)&v229, 49, a3, v53, (uint64_t)&v212);
  }
  v55 = v49 | v196;
  v56 = **v38;
  v212 = v214;
  v213 = 0x200000000;
  v218 = v56;
  v219 = &v227;
  v220 = &v228;
  v221 = 0;
  v222 = 0;
  v223 = 512;
  v224 = 7;
  v225 = 0;
  v226 = 0;
  v227 = &unk_1E8167888;
  v228 = &unk_1E8167A08;
  v216 = v38;
  v217 = v38 + 5;
  v209[0] = "loop-index";
  v210 = 259;
  v57 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v212, (uint64_t)v205, 2, (uint64_t)v209);
  v58 = llvm::ConstantInt::get(v205, 0, 0);
  sub_1C477667C(v57, (uint64_t)v58, (uint64_t)v19);
  v210 = 257;
  v192 = a2;
  v59 = v57;
  v60 = sub_1C5098FF4((uint64_t *)&v212, v182, (uint64_t *)a2, (uint64_t)v57, (uint64_t)v209);
  v207 = 257;
  v61 = (char *)operator new(0x60uLL);
  v62 = v61;
  v63 = (llvm::Value *)(v61 + 32);
  *((_QWORD *)v61 + 2) = 0;
  *((_QWORD *)v61 + 3) = v61 + 32;
  v64 = __clz((v54 | v197) & -(uint64_t)(v54 | v197));
  v210 = 257;
  *((_QWORD *)v61 + 4) = v182;
  *((_QWORD *)v61 + 5) = 0;
  v65 = (uint64_t *)(v61 + 40);
  *((_WORD *)v61 + 24) = 60;
  *((_DWORD *)v61 + 13) = 1;
  *(_OWORD *)(v61 + 56) = 0u;
  *(_OWORD *)(v61 + 72) = 0u;
  *((_DWORD *)v61 + 22) = 0;
  *(_QWORD *)v61 = v60;
  *((_QWORD *)v61 + 1) = 0;
  if (v60)
  {
    v68 = v60[1];
    v67 = v60 + 1;
    v66 = v68;
    *((_QWORD *)v61 + 1) = v68;
    if (v68)
      v66[2] = (uint64_t *)(v61 + 8);
    *((_QWORD *)v61 + 2) = v67;
    *v67 = v61;
  }
  v180 = v54;
  *((_WORD *)v61 + 25) = (126 - 2 * v64) & 0x7E | a7;
  v61[92] = 1;
  llvm::Value::setName((uint64_t ***)v61 + 4, (uint64_t)v209);
  (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v220 + 2))(v220, v63, v206, v216, v217);
  if ((_DWORD)v213)
  {
    v116 = (char *)v212;
    v117 = (char *)v212 + 16 * v213;
    v118 = (unsigned __int8 **)(v62 + 80);
    do
    {
      v119 = *(_DWORD *)v116;
      v120 = (unsigned __int8 *)*((_QWORD *)v116 + 1);
      if (v120)
      {
        if (!v119)
        {
          v211 = (unsigned __int8 *)*((_QWORD *)v116 + 1);
          v177 = v118;
          llvm::MetadataTracking::track((uint64_t)&v211, v120, 2);
          v118 = v177;
          v121 = *v177;
          goto LABEL_128;
        }
      }
      else
      {
        v121 = *v118;
        if (!*v118 && (v62[55] & 0x20) == 0)
          goto LABEL_125;
        if (!v119)
        {
          v211 = 0;
LABEL_128:
          if (v121)
          {
            v179 = v118;
            llvm::MetadataTracking::untrack((uint64_t)v118, v121);
            v118 = v179;
          }
          v123 = v211;
          *v118 = v211;
          if (v123)
          {
            v178 = v118;
            llvm::MetadataTracking::retrack((uint64_t)&v211, v123, (uint64_t)v118);
            v118 = v178;
          }
          goto LABEL_125;
        }
      }
      v176 = v117;
      v122 = v118;
      llvm::Value::setMetadata(v63, *(_DWORD *)v116, (llvm::MDNode *)v120);
      v118 = v122;
      v117 = v176;
LABEL_125:
      v116 += 16;
    }
    while (v116 != v117);
  }
  if ((a9 & 1) == 0)
  {
    v209[0] = v194;
    Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v202, v209, 1, 0, 1);
    if (Impl || *((_QWORD *)v62 + 10) || (v62[55] & 0x20) != 0)
      llvm::Value::setMetadata(v63, 7, Impl);
  }
  v70 = __clz(v55 & -v55);
  v210 = 257;
  v71 = sub_1C5098FF4((uint64_t *)&v212, v182, v195, (uint64_t)v57, (uint64_t)v209);
  v72 = (char *)operator new(0x80uLL);
  v73 = v72;
  *((_DWORD *)v72 + 21) = *((_DWORD *)v72 + 21) & 0x38000000 | 2;
  *(_QWORD *)v72 = 0;
  *((_QWORD *)v72 + 2) = 0;
  *((_QWORD *)v72 + 1) = 0;
  *((_QWORD *)v72 + 5) = 0;
  *((_QWORD *)v72 + 6) = 0;
  *((_QWORD *)v72 + 4) = 0;
  *((_QWORD *)v72 + 8) = ***(_QWORD ***)v63 + 1576;
  v74 = (llvm::Value *)(v72 + 64);
  *((_QWORD *)v72 + 3) = v72 + 64;
  *((_QWORD *)v72 + 7) = v72 + 64;
  *((_QWORD *)v72 + 9) = 0;
  v72[80] = 61;
  v72[81] = 0;
  *((_DWORD *)v72 + 21) = 2;
  *(_OWORD *)(v72 + 88) = 0u;
  *(_OWORD *)(v72 + 104) = 0u;
  *((_DWORD *)v72 + 30) = 0;
  v75 = *v65;
  *(_QWORD *)v72 = v63;
  *((_QWORD *)v72 + 1) = v75;
  if (v75)
    *(_QWORD *)(v75 + 16) = v72 + 8;
  *((_QWORD *)v72 + 2) = v65;
  *v65 = (uint64_t)v72;
  *((_QWORD *)v72 + 4) = v71;
  if (v71)
  {
    v78 = v71[1];
    v77 = v71 + 1;
    v76 = v78;
    *((_QWORD *)v72 + 5) = v78;
    if (v78)
      v76[2] = (uint64_t *)(v72 + 40);
    *((_QWORD *)v72 + 6) = v77;
    *v77 = v72 + 32;
  }
  *((_WORD *)v72 + 41) = (126 - 2 * v70) & 0x7E | a8;
  v72[124] = 1;
  v210 = 257;
  (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v220 + 2))(v220, v74, v209, v216, v217);
  if ((_DWORD)v213)
  {
    v124 = (char *)v212;
    v125 = (char *)v212 + 16 * v213;
    v126 = (unsigned __int8 **)(v73 + 112);
    do
    {
      v127 = *(_DWORD *)v124;
      v128 = (unsigned __int8 *)*((_QWORD *)v124 + 1);
      if (v128)
      {
        if (!v127)
        {
          v206[0] = *((_QWORD *)v124 + 1);
          llvm::MetadataTracking::track((uint64_t)v206, v128, 2);
          v129 = *v126;
          goto LABEL_143;
        }
      }
      else
      {
        v129 = *v126;
        if (!*v126 && (v73[87] & 0x20) == 0)
          goto LABEL_140;
        if (!v127)
        {
          v206[0] = 0;
LABEL_143:
          if (v129)
            llvm::MetadataTracking::untrack((uint64_t)(v73 + 112), v129);
          v130 = (unsigned __int8 *)v206[0];
          *v126 = (unsigned __int8 *)v206[0];
          if (v130)
            llvm::MetadataTracking::retrack((uint64_t)v206, v130, (uint64_t)(v73 + 112));
          goto LABEL_140;
        }
      }
      llvm::Value::setMetadata(v74, *(_DWORD *)v124, (llvm::MDNode *)v128);
LABEL_140:
      v124 += 16;
    }
    while (v124 != v125);
  }
  v79 = v59;
  if ((a9 & 1) == 0)
  {
    v209[0] = v194;
    v80 = (llvm::MDNode *)llvm::MDTuple::getImpl(v202, v209, 1, 0, 1);
    if (v80 || *((_QWORD *)v73 + 14) || (v73[87] & 0x20) != 0)
      llvm::Value::setMetadata(v74, 8, v80);
  }
  if (BYTE4(a11))
  {
    *((_WORD *)v62 + 25) = *((_WORD *)v62 + 25) & 0xFC7F | 0x80;
    v62[92] = 1;
    *((_WORD *)v73 + 41) = *((_WORD *)v73 + 41) & 0xFC7F | 0x80;
    v73[124] = 1;
  }
  v81 = llvm::ConstantInt::get(v205, 1, 0);
  v207 = 257;
  v82 = (llvm::Value *)(*((uint64_t (**)(void **, llvm::PHINode *, llvm::Value **, _QWORD, _QWORD))*v219 + 2))(v219, v59, v81, 0, 0);
  v36 = v181;
  if (!v82)
  {
    v210 = 257;
    v83 = (char *)operator new(0x80uLL);
    v84 = v83;
    *(_QWORD *)v83 = 0;
    *((_QWORD *)v83 + 2) = 0;
    *((_QWORD *)v83 + 1) = 0;
    *((_QWORD *)v83 + 5) = 0;
    *((_QWORD *)v83 + 6) = 0;
    *((_QWORD *)v83 + 4) = 0;
    v85 = (llvm::Value ***)(v83 + 32);
    *((_QWORD *)v83 + 8) = *(_QWORD *)v59;
    v82 = (llvm::Value *)(v83 + 64);
    *((_QWORD *)v83 + 3) = v83 + 64;
    *((_QWORD *)v83 + 7) = v83 + 64;
    *((_QWORD *)v83 + 9) = 0;
    v83[80] = 41;
    v83[81] = 0;
    *((_WORD *)v83 + 41) = 0;
    *((_DWORD *)v83 + 21) = 2;
    *((_DWORD *)v83 + 30) = 0;
    *(_OWORD *)(v83 + 104) = 0u;
    *(_OWORD *)(v83 + 88) = 0u;
    *(_QWORD *)v83 = v59;
    v87 = (_QWORD *)((char *)v59 + 8);
    v86 = *((_QWORD *)v59 + 1);
    *((_QWORD *)v83 + 1) = v86;
    if (v86)
      *(_QWORD *)(v86 + 16) = v83 + 8;
    *((_QWORD *)v83 + 2) = v87;
    *v87 = v83;
    if (*((_QWORD *)v83 + 4))
    {
      **((_QWORD **)v83 + 6) = *((_QWORD *)v83 + 5);
      v175 = *((_QWORD *)v83 + 5);
      if (v175)
        *(_QWORD *)(v175 + 16) = *((_QWORD *)v83 + 6);
    }
    *v85 = v81;
    if (v81)
    {
      v90 = v81[1];
      v89 = (llvm::Value ****)(v81 + 1);
      v88 = v90;
      *((_QWORD *)v83 + 5) = v90;
      if (v90)
        *((_QWORD *)v88 + 2) = v83 + 40;
      *((_QWORD *)v83 + 6) = v89;
      *v89 = v85;
    }
    llvm::Value::setName((uint64_t ***)v83 + 8, (uint64_t)v209);
    (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v220 + 2))(v220, v82, v206, v216, v217);
    if ((_DWORD)v213)
    {
      v91 = (char *)v212;
      v92 = (char *)v212 + 16 * v213;
      v93 = (unsigned __int8 **)(v84 + 112);
      do
      {
        v94 = *(_DWORD *)v91;
        v95 = (unsigned __int8 *)*((_QWORD *)v91 + 1);
        if (v95)
        {
          if (!v94)
          {
            v211 = (unsigned __int8 *)*((_QWORD *)v91 + 1);
            llvm::MetadataTracking::track((uint64_t)&v211, v95, 2);
            v96 = *v93;
            goto LABEL_79;
          }
        }
        else
        {
          v96 = *v93;
          if (!*v93 && (v84[87] & 0x20) == 0)
            goto LABEL_76;
          if (!v94)
          {
            v211 = 0;
LABEL_79:
            if (v96)
              llvm::MetadataTracking::untrack((uint64_t)(v84 + 112), v96);
            v97 = v211;
            *v93 = v211;
            if (v97)
              llvm::MetadataTracking::retrack((uint64_t)&v211, v97, (uint64_t)(v84 + 112));
            goto LABEL_76;
          }
        }
        llvm::Value::setMetadata(v82, *(_DWORD *)v91, (llvm::MDNode *)v95);
LABEL_76:
        v91 += 16;
      }
      while (v91 != v92);
    }
    v79 = v59;
  }
  sub_1C477667C(v79, (uint64_t)v82, (uint64_t)v38);
  v98 = llvm::ConstantInt::get(v205, v183, 0);
  v207 = 257;
  v99 = (llvm::Value *)sub_1C4774B48((uint64_t)&v212, 36, (uint64_t)v82, (uint64_t)v98, (uint64_t)v206);
  v100 = operator new(0xA0uLL);
  v101 = v100;
  v102 = 0;
  v103 = (llvm::Value *)(v100 + 24);
  v100[29] = v100[29] & 0x38000000 | 3;
  do
  {
    v104 = &v100[v102];
    *v104 = 0;
    v104[1] = 0;
    v104[2] = 0;
    v104[3] = v103;
    v102 += 8;
  }
  while (v102 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v100 + 24), (llvm::BasicBlock *)v38, v181, v99, 0);
  v210 = 257;
  (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v220 + 2))(v220, v103, v209, v216, v217);
  v105 = (char *)v212;
  if ((_DWORD)v213)
  {
    v106 = (char *)v212 + 16 * v213;
    v107 = (unsigned __int8 **)(v101 + 36);
    while (1)
    {
      v108 = *(_DWORD *)v105;
      v109 = (unsigned __int8 *)*((_QWORD *)v105 + 1);
      if (v109)
      {
        if (!v108)
        {
          v211 = (unsigned __int8 *)*((_QWORD *)v105 + 1);
          llvm::MetadataTracking::track((uint64_t)&v211, v109, 2);
          v110 = *v107;
          if (!*v107)
          {
LABEL_99:
            v111 = v211;
            *v107 = v211;
            if (v111)
              llvm::MetadataTracking::retrack((uint64_t)&v211, v111, (uint64_t)(v101 + 36));
            goto LABEL_96;
          }
LABEL_93:
          llvm::MetadataTracking::untrack((uint64_t)(v101 + 36), v110);
          goto LABEL_99;
        }
      }
      else
      {
        v110 = *v107;
        if (!*v107 && (*((_BYTE *)v101 + 119) & 0x20) == 0)
          goto LABEL_96;
        if (!v108)
        {
          v211 = 0;
          if (!v110)
            goto LABEL_99;
          goto LABEL_93;
        }
      }
      llvm::Value::setMetadata(v103, *(_DWORD *)v105, (llvm::MDNode *)v109);
LABEL_96:
      v105 += 16;
      if (v105 == v106)
      {
        v105 = (char *)v212;
        break;
      }
    }
  }
  v33 = v180;
  a2 = v192;
  v30 = v184;
  v35 = v189;
  if (v105 != v214)
    free(v105);
  v18 = a11;
  if (v229 != v231)
    free(v229);
  v29 = *(_DWORD *)(a4 + 32);
  v34 = v183;
LABEL_106:
  v112 = v34 * v33;
  if (v29 >= 0x41)
    v30 = (_QWORD *)*v30;
  v113 = *v30 - v112;
  if (v113)
  {
    if (v36)
    {
      for (i = (_QWORD *)*((_QWORD *)v36 + 6); i != (_QWORD *)((char *)v36 + 40); i = (_QWORD *)i[1])
      {
        v35 = (uint64_t)(i - 3);
        if (i)
          v115 = i - 3;
        else
          v115 = 0;
        if (*((_BYTE *)v115 + 16) != 83)
          goto LABEL_148;
      }
      v35 = 0;
    }
LABEL_148:
    sub_1C4773D54((uint64_t)&v229, v35, 0, 0, 0);
    v212 = v214;
    v213 = 0x500000000;
    (*(void (**)(_QWORD, void **, uint64_t *, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a10 + 1024))(*a10, &v212, v202, v113, v199, v198, v197, v196, v18);
    v131 = (uint64_t *)v212;
    if (!(_DWORD)v213)
      goto LABEL_212;
    v190 = (uint64_t *)((char *)v212 + 8 * v213);
    v193 = a2;
    while (1)
    {
      v132 = (llvm::PointerType *)*v131;
      sub_1C4768AD0(v191, *v131);
      v135 = v134;
      if ((_DWORD)v133 == 1)
      v136 = llvm::PointerType::get(v132, (llvm::Type *)v199);
      v137 = (uint64_t *)a2;
      if (*(_QWORD *)a2 != v136)
      {
        v210 = 257;
        v137 = (uint64_t *)sub_1C4773E38((uint64_t *)&v229, 49, a2, v136, (uint64_t)v209);
      }
      v204 = ((unint64_t)(v135 + 7) >> 3);
      v138 = llvm::ConstantInt::get(v205, v112 / v204, 0);
      v210 = 257;
      v139 = sub_1C5098FF4((uint64_t *)&v229, v132, v137, (uint64_t)v138, (uint64_t)v209);
      v207 = 257;
      v140 = (char *)operator new(0x60uLL);
      v141 = v140;
      v142 = (llvm::Value *)(v140 + 32);
      *((_QWORD *)v140 + 2) = 0;
      *((_QWORD *)v140 + 3) = v140 + 32;
      v210 = 257;
      *((_QWORD *)v140 + 4) = v132;
      *((_QWORD *)v140 + 5) = 0;
      v143 = (uint64_t *)(v140 + 40);
      *((_WORD *)v140 + 24) = 60;
      *((_DWORD *)v140 + 13) = 1;
      *(_OWORD *)(v140 + 56) = 0u;
      *(_OWORD *)(v140 + 72) = 0u;
      *((_DWORD *)v140 + 22) = 0;
      *(_QWORD *)v140 = v139;
      *((_QWORD *)v140 + 1) = 0;
      if (v139)
      {
        v146 = v139[1];
        v145 = v139 + 1;
        v144 = v146;
        *((_QWORD *)v140 + 1) = v146;
        if (v146)
          v144[2] = (uint64_t *)(v140 + 8);
        *((_QWORD *)v140 + 2) = v145;
        *v145 = v140;
      }
      *((_WORD *)v140 + 25) = (126 - 2 * __clz((v112 | v197) & -(uint64_t)(v112 | v197))) & 0x7E | a7;
      v140[92] = 1;
      llvm::Value::setName((uint64_t ***)v140 + 4, (uint64_t)v209);
      (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v235 + 16))(v235, v142, v206, v233, v234);
      if (v230)
        break;
LABEL_159:
      if ((a9 & 1) == 0)
      {
        v209[0] = v194;
        v147 = (llvm::MDNode *)llvm::MDTuple::getImpl(v202, v209, 1, 0, 1);
        if (v147 || *((_QWORD *)v141 + 10) || (v141[55] & 0x20) != 0)
          llvm::Value::setMetadata(v142, 7, v147);
      }
      v148 = llvm::PointerType::get(v132, (llvm::Type *)v198);
      v149 = v195;
      if (*v195 != v148)
      {
        v210 = 257;
        v149 = (uint64_t *)sub_1C4773E38((uint64_t *)&v229, 49, (unsigned __int8 *)v195, v148, (uint64_t)v209);
      }
      v150 = llvm::ConstantInt::get(v205, v112 / v204, 0);
      v210 = 257;
      v151 = sub_1C5098FF4((uint64_t *)&v229, v132, v149, (uint64_t)v150, (uint64_t)v209);
      v152 = (char *)operator new(0x80uLL);
      v153 = v152;
      *((_DWORD *)v152 + 21) = *((_DWORD *)v152 + 21) & 0x38000000 | 2;
      *(_QWORD *)v152 = 0;
      *((_QWORD *)v152 + 2) = 0;
      *((_QWORD *)v152 + 1) = 0;
      *((_QWORD *)v152 + 5) = 0;
      *((_QWORD *)v152 + 6) = 0;
      *((_QWORD *)v152 + 4) = 0;
      *((_QWORD *)v152 + 8) = ***(_QWORD ***)v142 + 1576;
      v154 = (llvm::Value *)(v152 + 64);
      *((_QWORD *)v152 + 3) = v152 + 64;
      *((_QWORD *)v152 + 7) = v152 + 64;
      *((_QWORD *)v152 + 9) = 0;
      v152[80] = 61;
      v152[81] = 0;
      *((_DWORD *)v152 + 21) = 2;
      *(_OWORD *)(v152 + 88) = 0u;
      *(_OWORD *)(v152 + 104) = 0u;
      *((_DWORD *)v152 + 30) = 0;
      v155 = *v143;
      *(_QWORD *)v152 = v142;
      *((_QWORD *)v152 + 1) = v155;
      if (v155)
        *(_QWORD *)(v155 + 16) = v152 + 8;
      *((_QWORD *)v152 + 2) = v143;
      *v143 = (uint64_t)v152;
      *((_QWORD *)v152 + 4) = v151;
      if (v151)
      {
        v158 = v151[1];
        v157 = v151 + 1;
        v156 = v158;
        *((_QWORD *)v152 + 5) = v158;
        if (v158)
          v156[2] = (uint64_t *)(v152 + 40);
        *((_QWORD *)v152 + 6) = v157;
        *v157 = v152 + 32;
      }
      *((_WORD *)v152 + 41) = (126 - 2 * __clz((v112 | v196) & -(uint64_t)(v112 | v196))) & 0x7E | a8;
      v152[124] = 1;
      v210 = 257;
      (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v235 + 16))(v235, v154, v209, v233, v234);
      if (v230)
      {
        v168 = v229;
        v169 = &v229[16 * v230];
        v170 = (unsigned __int8 **)(v153 + 112);
        do
        {
          v171 = *(_DWORD *)v168;
          v172 = (unsigned __int8 *)*((_QWORD *)v168 + 1);
          if (v172)
          {
            if (!v171)
            {
              v206[0] = *((_QWORD *)v168 + 1);
              llvm::MetadataTracking::track((uint64_t)v206, v172, 2);
              v173 = *v170;
              goto LABEL_208;
            }
          }
          else
          {
            v173 = *v170;
            if (!*v170 && (v153[87] & 0x20) == 0)
              goto LABEL_205;
            if (!v171)
            {
              v206[0] = 0;
LABEL_208:
              if (v173)
                llvm::MetadataTracking::untrack((uint64_t)(v153 + 112), v173);
              v174 = (unsigned __int8 *)v206[0];
              *v170 = (unsigned __int8 *)v206[0];
              if (v174)
                llvm::MetadataTracking::retrack((uint64_t)v206, v174, (uint64_t)(v153 + 112));
              goto LABEL_205;
            }
          }
          llvm::Value::setMetadata(v154, *(_DWORD *)v168, (llvm::MDNode *)v172);
LABEL_205:
          v168 += 16;
        }
        while (v168 != v169);
      }
      if ((a9 & 1) == 0)
      {
        v209[0] = v194;
        v159 = (llvm::MDNode *)llvm::MDTuple::getImpl(v202, v209, 1, 0, 1);
        if (v159 || *((_QWORD *)v153 + 14) || (v153[87] & 0x20) != 0)
          llvm::Value::setMetadata(v154, 8, v159);
      }
      if (BYTE4(a11))
      {
        *((_WORD *)v141 + 25) = *((_WORD *)v141 + 25) & 0xFC7F | 0x80;
        v141[92] = 1;
        *((_WORD *)v153 + 41) = *((_WORD *)v153 + 41) & 0xFC7F | 0x80;
        v153[124] = 1;
      }
      v112 += v204;
      ++v131;
      a2 = v193;
      if (v131 == v190)
      {
        v131 = (uint64_t *)v212;
LABEL_212:
        if (v131 != (uint64_t *)v214)
          free(v131);
        if (v229 != v231)
          free(v229);
        return;
      }
    }
    v160 = v229;
    v161 = &v229[16 * v230];
    v162 = (unsigned __int8 **)(v141 + 80);
    while (1)
    {
      v163 = *(_DWORD *)v160;
      v164 = (unsigned __int8 *)*((_QWORD *)v160 + 1);
      if (v164)
      {
        if (!v163)
        {
          v211 = (unsigned __int8 *)*((_QWORD *)v160 + 1);
          v186 = v162;
          llvm::MetadataTracking::track((uint64_t)&v211, v164, 2);
          v162 = v186;
          v165 = *v186;
          goto LABEL_193;
        }
      }
      else
      {
        v165 = *v162;
        if (!*v162 && (v141[55] & 0x20) == 0)
          goto LABEL_190;
        if (!v163)
        {
          v211 = 0;
LABEL_193:
          if (v165)
          {
            v188 = v162;
            llvm::MetadataTracking::untrack((uint64_t)v162, v165);
            v162 = v188;
          }
          v167 = v211;
          *v162 = v211;
          if (v167)
          {
            v187 = v162;
            llvm::MetadataTracking::retrack((uint64_t)&v211, v167, (uint64_t)v162);
            v162 = v187;
          }
          goto LABEL_190;
        }
      }
      v185 = v161;
      v166 = v162;
      llvm::Value::setMetadata(v142, *(_DWORD *)v160, (llvm::MDNode *)v164);
      v162 = v166;
      v161 = v185;
LABEL_190:
      v160 += 16;
      if (v160 == v161)
        goto LABEL_159;
    }
  }
}

void llvm::createMemCpyLoopUnknownSize(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, char a5, char a6, __int16 a7, __int16 a8, char a9, _QWORD *a10, uint64_t a11)
{
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  llvm::MDNode *v20;
  llvm::Type *v21;
  llvm::PointerType *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::ConstantInt *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  const llvm::APInt *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Type *v35;
  llvm::ConstantInt *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::ConstantInt *v39;
  unint64_t v40;
  unint64_t v41;
  llvm::ValueHandleBase *v42;
  uint64_t v43;
  uint64_t **v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  llvm::Value **v54;
  uint64_t ***v55;
  char *v56;
  llvm::GetElementPtrInst *v57;
  char *v58;
  llvm::Value *v59;
  char v60;
  uint64_t *v61;
  uint64_t **v62;
  _QWORD *v63;
  uint64_t **v64;
  char v65;
  llvm::MDNode *Impl;
  char v67;
  uint64_t ***v68;
  char *v69;
  char *v70;
  llvm::Value *v71;
  uint64_t v72;
  llvm::PointerType *v73;
  uint64_t **v74;
  _QWORD *v75;
  uint64_t **v76;
  uint64_t *v77;
  llvm::MDNode *v78;
  llvm::Value **v79;
  llvm::Value *v80;
  char *v81;
  char *v82;
  llvm::Value ***v83;
  _QWORD *v84;
  uint64_t v85;
  llvm::Value *v86;
  llvm::Value ****v87;
  llvm::Value *v88;
  char *v89;
  char *v90;
  unsigned __int8 **v91;
  int v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  const llvm::APInt *v96;
  BOOL v97;
  int v98;
  int v99;
  _QWORD *v100;
  uint64_t v101;
  llvm::ConstantInt *v102;
  llvm::ValueHandleBase *v103;
  llvm::Value *v104;
  _DWORD *v105;
  _DWORD *v106;
  uint64_t v107;
  llvm::Value *v108;
  _QWORD *v109;
  char *v110;
  char *v111;
  unsigned __int8 **v112;
  int v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  _QWORD *v117;
  uint64_t ***v118;
  uint64_t ***v119;
  uint64_t **v120;
  uint64_t **v121;
  llvm::Value *v122;
  _DWORD *v123;
  _DWORD *v124;
  uint64_t v125;
  llvm::Value *v126;
  _QWORD *v127;
  char *v128;
  char *v129;
  unsigned __int8 **v130;
  int v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  char *v135;
  char *v136;
  unsigned __int8 **v137;
  int v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  unsigned __int8 **v141;
  unsigned __int8 **v142;
  unsigned __int8 *v143;
  unsigned __int8 **v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 *v148;
  uint64_t v149;
  uint64_t **v150;
  unsigned int v151;
  _QWORD **v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t **v157;
  unsigned int v158;
  _QWORD **v159;
  uint64_t *v160;
  const llvm::APInt *v161;
  llvm::ConstantInt *v162;
  llvm::ValueHandleBase *v163;
  llvm::Value *v164;
  _DWORD *v165;
  _DWORD *v166;
  uint64_t v167;
  llvm::Value *v168;
  _QWORD *v169;
  char *v170;
  char *v171;
  unsigned __int8 **v172;
  int v173;
  unsigned __int8 *v174;
  unsigned __int8 *v175;
  unsigned __int8 *v176;
  _QWORD *v177;
  uint64_t ***v178;
  uint64_t ***v179;
  uint64_t **v180;
  uint64_t **v181;
  llvm::Value *v182;
  _DWORD *v183;
  _DWORD *v184;
  uint64_t v185;
  llvm::Value *v186;
  _QWORD *v187;
  char *v188;
  char *v189;
  unsigned __int8 **v190;
  int v191;
  unsigned __int8 *v192;
  unsigned __int8 *v193;
  unsigned __int8 *v194;
  uint64_t v195;
  llvm::Value *v196;
  _DWORD *v197;
  _DWORD *v198;
  uint64_t v199;
  llvm::Value *v200;
  _QWORD *v201;
  char *v202;
  char *v203;
  unsigned __int8 **v204;
  int v205;
  unsigned __int8 *v206;
  unsigned __int8 *v207;
  unsigned __int8 *v208;
  uint64_t v209;
  _QWORD *v210;
  llvm::GetElementPtrInst *v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t *v215;
  llvm::Value *v216;
  char *v217;
  char *v218;
  _QWORD *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  char *v224;
  char *v225;
  unsigned __int8 **v226;
  int v227;
  unsigned __int8 *v228;
  unsigned __int8 *v229;
  unsigned __int8 *v230;
  uint64_t ***v231;
  char *v232;
  char *v233;
  llvm::Value *v234;
  uint64_t *v235;
  uint64_t **v236;
  _QWORD *v237;
  uint64_t **v238;
  llvm::MDNode *v239;
  uint64_t ***v240;
  char *v241;
  char *v242;
  llvm::Value *v243;
  uint64_t v244;
  uint64_t **v245;
  _QWORD *v246;
  uint64_t **v247;
  llvm::MDNode *v248;
  llvm::Value **v249;
  llvm::Value *v250;
  llvm::Value *v251;
  _DWORD *v252;
  _DWORD *v253;
  uint64_t v254;
  llvm::Value *v255;
  _QWORD *v256;
  char *v257;
  char *v258;
  unsigned __int8 **v259;
  int v260;
  unsigned __int8 *v261;
  unsigned __int8 *v262;
  unsigned __int8 *v263;
  char *v264;
  char *v265;
  llvm::Value ***v266;
  _QWORD *v267;
  uint64_t v268;
  llvm::Value *v269;
  llvm::Value ****v270;
  llvm::Value *v271;
  char *v272;
  char *v273;
  unsigned __int8 **v274;
  int v275;
  unsigned __int8 *v276;
  unsigned __int8 *v277;
  unsigned __int8 *v278;
  char *v279;
  char *v280;
  unsigned __int8 **v281;
  int v282;
  unsigned __int8 *v283;
  unsigned __int8 *v284;
  unsigned __int8 *v285;
  char *v286;
  char *v287;
  unsigned __int8 **v288;
  int v289;
  unsigned __int8 *v290;
  unsigned __int8 *v291;
  unsigned __int8 *v292;
  char *v293;
  char *v294;
  unsigned __int8 **v295;
  int v296;
  unsigned __int8 *v297;
  unsigned __int8 *v298;
  unsigned __int8 *v299;
  _DWORD *v300;
  _DWORD *v301;
  int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  __int16 v308;
  char *v309;
  char *v310;
  char *v311;
  __int16 v312;
  unsigned int v313;
  llvm::Type *v314;
  _QWORD *v315;
  llvm::ConstantInt *v316;
  _QWORD *v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  unsigned int v323;
  uint64_t *v324;
  llvm::MDNode *v325;
  uint64_t v327;
  llvm::GetElementPtrInst *v328;
  uint64_t v329;
  uint64_t v331;
  uint64_t *v332;
  llvm::PointerType *v333;
  llvm::PointerType *v334;
  llvm::ConstantInt *v335;
  llvm::ConstantInt *v336;
  llvm::BasicBlock *v337;
  unsigned __int8 *v338;
  uint64_t *v339;
  _QWORD v340[4];
  __int16 v341;
  uint64_t *v342;
  _QWORD v343[4];
  __int16 v344;
  unsigned __int8 *v345;
  void *v346;
  uint64_t v347;
  _BYTE v348[16];
  __int16 v349;
  uint64_t **v350;
  _QWORD **v351;
  uint64_t v352;
  void **v353;
  void **v354;
  uint64_t v355;
  int v356;
  __int16 v357;
  char v358;
  uint64_t v359;
  uint64_t v360;
  void *v361;
  void *v362;
  void *v363;
  uint64_t v364;
  _BYTE v365[16];
  __int16 v366;
  uint64_t **v367;
  _QWORD **v368;
  uint64_t v369;
  void **v370;
  void **v371;
  uint64_t v372;
  int v373;
  __int16 v374;
  char v375;
  uint64_t v376;
  uint64_t v377;
  void *v378;
  void *v379;
  void *v380;
  uint64_t v381;
  _BYTE v382[16];
  __int16 v383;
  uint64_t **v384;
  _QWORD **v385;
  uint64_t v386;
  void **v387;
  void **v388;
  uint64_t v389;
  int v390;
  __int16 v391;
  char v392;
  uint64_t v393;
  uint64_t v394;
  void *v395;
  void *v396;
  char *v397;
  int v398;
  _WORD v399[16];
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;

  v403 = *MEMORY[0x1E0C80C00];
  v16 = *(uint64_t **)(a1 + 40);
  v397 = "post-loop-memcpy-expansion";
  v399[8] = 259;
  v17 = llvm::BasicBlock::splitBasicBlock(v16, (uint64_t *)(a1 + 24), (uint64_t)&v397, 0);
  v335 = (llvm::ConstantInt *)v16[7];
  v337 = (llvm::BasicBlock *)v17;
  v18 = *((_QWORD *)v335 + 5) + 272;
  v342 = *(uint64_t **)*v16;
  v19 = v342;
  v20 = llvm::MDBuilder::createAnonymousAARoot(&v342, "MemCopyDomain", 0xDuLL, 0);
  v325 = llvm::MDBuilder::createAnonymousAARoot(&v342, "MemCopyAliasScope", 0x11uLL, (uint64_t)v20);
  v338 = a2;
  v21 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8);
  v318 = a4;
  v323 = *(_DWORD *)(*(_QWORD *)a3 + 8) >> 8;
  v327 = 1 << a5;
  v22 = (llvm::PointerType *)(*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, llvm::Type *))(*(_QWORD *)*a10
                                                                                                 + 1016))(*a10, v19, a4, v21);
  v307 = v18;
  sub_1C4768AD0(v18, (uint64_t)v22);
  v25 = v24;
  if ((_DWORD)v23 == 1)
  v320 = (uint64_t)v16;
  v26 = (uint64_t *)v16[5];
  v317 = v16 + 5;
  if (v26 == v16 + 5)
  {
    v28 = 0;
  }
  else
  {
    if (v26)
      v27 = (uint64_t)(v26 - 3);
    else
      v27 = 0;
    if (*(unsigned __int8 *)(v27 + 16) - 29 >= 0xB)
      v28 = 0;
    else
      v28 = v27;
  }
  v29 = v335;
  v30 = v338;
  sub_1C4773D54((uint64_t)&v397, v28, 0, 0, 0);
  v313 = v21;
  v31 = llvm::PointerType::get(v22, v21);
  v33 = llvm::PointerType::get(v22, (llvm::Type *)v323);
  if (*(_QWORD *)v338 != v31)
  {
    v383 = 257;
    v30 = sub_1C4773E38((uint64_t *)&v397, 49, v338, v31, (uint64_t)&v380);
  }
  v34 = 1 << a6;
  v35 = (llvm::Type *)(v25 + 7);
  if (*(_QWORD *)a3 != v33)
  {
    v383 = 257;
    a3 = sub_1C4773E38((uint64_t *)&v397, 49, a3, v33, (uint64_t)&v380);
  }
  v336 = *(llvm::ConstantInt **)v318;
  if (*(_BYTE *)(*(_QWORD *)v318 + 8) == 13)
    v36 = *(llvm::ConstantInt **)v318;
  else
    v36 = 0;
  v37 = *v19;
  v314 = v35;
  v38 = ((unint64_t)v35 >> 3);
  v39 = *(llvm::ConstantInt **)v36;
  v316 = v36;
  v40 = *((unsigned int *)v36 + 2);
  LODWORD(v381) = v40 >> 8;
  v324 = (uint64_t *)a3;
  if (v40 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v380, v38, 0);
  }
  else
  {
    if (v40 <= 0xFF)
      v41 = 0;
    else
      v41 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v40);
    v380 = (void *)(v41 & v38);
  }
  v42 = llvm::ConstantInt::get(v39, (llvm::LLVMContext *)&v380, v32);
  if (v381 >= 0x41 && v380)
    MEMORY[0x1CAA32F9C](v380, 0x1000C8000313F17);
  v339 = (uint64_t *)v30;
  v43 = v318;
  v333 = (llvm::PointerType *)(v37 + 1912);
  if (v22 != (llvm::PointerType *)(v37 + 1912))
  {
    v383 = 257;
    v43 = sub_1C538E6F8((uint64_t)&v397, v318, (uint64_t)v42, (uint64_t)&v380, 0);
  }
  v306 = (uint64_t)v42;
  v322 = v43;
  v380 = "loop-memcpy-expansion";
  v383 = 259;
  v44 = (uint64_t **)operator new();
  v332 = v19;
  *v44 = (uint64_t *)(*v19 + 1600);
  v44[1] = 0;
  v45 = *((_DWORD *)v44 + 5) & 0xC0000000;
  *((_DWORD *)v44 + 4) = 22;
  *((_DWORD *)v44 + 5) = v45;
  v44[3] = 0;
  v46 = v44 + 3;
  v44[4] = 0;
  v44[5] = (uint64_t *)(v44 + 5);
  v44[6] = (uint64_t *)(v44 + 5);
  v44[7] = 0;
  v47 = (uint64_t)v29 + 72;
  if (v337)
    v48 = (uint64_t *)((char *)v337 + 24);
  else
    v48 = (uint64_t *)((char *)v29 + 72);
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v47, v44);
  v49 = *v48;
  v44[4] = v48;
  *v46 = v49;
  *(_QWORD *)(v49 + 8) = v46;
  *v48 = (uint64_t)v46;
  llvm::Value::setName((uint64_t ***)v44, (uint64_t)&v380);
  v50 = **v44;
  v380 = v382;
  v381 = 0x200000000;
  v386 = v50;
  v387 = &v395;
  v388 = &v396;
  v389 = 0;
  v390 = 0;
  v391 = 512;
  v392 = 7;
  v394 = 0;
  v393 = 0;
  v395 = &unk_1E8167888;
  v396 = &unk_1E8167A08;
  v384 = v44;
  v385 = v44 + 5;
  v51 = (v38 | v327) & -(v38 | v327);
  v52 = v38 | v34;
  v363 = "loop-index";
  v366 = 259;
  v53 = (_QWORD *)sub_1C4867E94((uint64_t)&v380, (uint64_t)v336, 2, (uint64_t)&v363);
  v54 = llvm::ConstantInt::get(v336, 0, 0);
  sub_1C477667C((llvm::PHINode *)v53, (uint64_t)v54, v320);
  v366 = 257;
  v55 = sub_1C5098FF4((uint64_t *)&v380, v22, v339, (uint64_t)v53, (uint64_t)&v363);
  v349 = 257;
  v56 = (char *)operator new(0x60uLL);
  v57 = v22;
  v58 = v56;
  v59 = (llvm::Value *)(v56 + 32);
  *((_QWORD *)v56 + 2) = 0;
  *((_QWORD *)v56 + 3) = v56 + 32;
  v60 = __clz(v51);
  v366 = 257;
  v328 = v57;
  *((_QWORD *)v56 + 4) = v57;
  *((_QWORD *)v56 + 5) = 0;
  v61 = (uint64_t *)(v56 + 40);
  *((_WORD *)v56 + 24) = 60;
  *((_DWORD *)v56 + 13) = 1;
  *(_OWORD *)(v56 + 56) = 0u;
  *(_OWORD *)(v56 + 72) = 0u;
  *((_DWORD *)v56 + 22) = 0;
  *(_QWORD *)v56 = v55;
  *((_QWORD *)v56 + 1) = 0;
  if (v55)
  {
    v64 = v55[1];
    v63 = v55 + 1;
    v62 = v64;
    *((_QWORD *)v56 + 1) = v64;
    if (v64)
      v62[2] = (uint64_t *)(v56 + 8);
    *((_QWORD *)v56 + 2) = v63;
    *v63 = v56;
  }
  v65 = a9;
  v312 = (126 - 2 * v60) & 0x7E | a7;
  *((_WORD *)v56 + 25) = v312;
  v56[92] = 1;
  llvm::Value::setName((uint64_t ***)v56 + 4, (uint64_t)&v363);
  (*((void (**)(void **, llvm::Value *, void **, uint64_t **, _QWORD **))*v388 + 2))(v388, v59, &v346, v384, v385);
  if ((_DWORD)v381)
  {
    v135 = (char *)v380;
    v136 = (char *)v380 + 16 * v381;
    v137 = (unsigned __int8 **)(v58 + 80);
    do
    {
      v138 = *(_DWORD *)v135;
      v139 = (unsigned __int8 *)*((_QWORD *)v135 + 1);
      if (v139)
      {
        if (!v138)
        {
          v343[0] = *((_QWORD *)v135 + 1);
          v310 = v136;
          v142 = v137;
          llvm::MetadataTracking::track((uint64_t)v343, v139, 2);
          v137 = v142;
          v136 = v310;
          v140 = *v142;
          goto LABEL_149;
        }
      }
      else
      {
        v140 = *v137;
        if (!*v137 && (v58[55] & 0x20) == 0)
          goto LABEL_146;
        if (!v138)
        {
          v343[0] = 0;
LABEL_149:
          if (v140)
          {
            v311 = v136;
            v144 = v137;
            llvm::MetadataTracking::untrack((uint64_t)v137, v140);
            v137 = v144;
            v136 = v311;
          }
          v143 = (unsigned __int8 *)v343[0];
          *v137 = (unsigned __int8 *)v343[0];
          if (!v143)
            goto LABEL_146;
          v309 = v136;
          v141 = v137;
          llvm::MetadataTracking::retrack((uint64_t)v343, v143, (uint64_t)v137);
          goto LABEL_145;
        }
      }
      v309 = v136;
      v141 = v137;
      llvm::Value::setMetadata(v59, *(_DWORD *)v135, (llvm::MDNode *)v139);
LABEL_145:
      v137 = v141;
      v136 = v309;
LABEL_146:
      v135 += 16;
      v65 = a9;
    }
    while (v135 != v136);
  }
  if ((v65 & 1) == 0)
  {
    v363 = v325;
    Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v332, &v363, 1, 0, 1);
    if (Impl || *((_QWORD *)v58 + 10) || (v58[55] & 0x20) != 0)
      llvm::Value::setMetadata(v59, 7, Impl);
  }
  v67 = __clz(v52 & -v52);
  v366 = 257;
  v68 = sub_1C5098FF4((uint64_t *)&v380, v328, v324, (uint64_t)v53, (uint64_t)&v363);
  v69 = (char *)operator new(0x80uLL);
  v70 = v69;
  *((_DWORD *)v69 + 21) = *((_DWORD *)v69 + 21) & 0x38000000 | 2;
  *(_QWORD *)v69 = 0;
  *((_QWORD *)v69 + 2) = 0;
  *((_QWORD *)v69 + 1) = 0;
  *((_QWORD *)v69 + 5) = 0;
  *((_QWORD *)v69 + 6) = 0;
  *((_QWORD *)v69 + 4) = 0;
  *((_QWORD *)v69 + 8) = ***(_QWORD ***)v59 + 1576;
  v71 = (llvm::Value *)(v69 + 64);
  *((_QWORD *)v69 + 3) = v69 + 64;
  *((_QWORD *)v69 + 7) = v69 + 64;
  *((_QWORD *)v69 + 9) = 0;
  v69[80] = 61;
  v69[81] = 0;
  *((_DWORD *)v69 + 21) = 2;
  *(_OWORD *)(v69 + 88) = 0u;
  *(_OWORD *)(v69 + 104) = 0u;
  *((_DWORD *)v69 + 30) = 0;
  v72 = *v61;
  *(_QWORD *)v69 = v59;
  *((_QWORD *)v69 + 1) = v72;
  if (v72)
    *(_QWORD *)(v72 + 16) = v69 + 8;
  *((_QWORD *)v69 + 2) = v61;
  *v61 = (uint64_t)v69;
  *((_QWORD *)v69 + 4) = v68;
  v73 = v333;
  if (v68)
  {
    v76 = v68[1];
    v75 = v68 + 1;
    v74 = v76;
    *((_QWORD *)v69 + 5) = v76;
    if (v76)
      v74[2] = (uint64_t *)(v69 + 40);
    *((_QWORD *)v69 + 6) = v75;
    *v75 = v69 + 32;
  }
  v308 = (126 - 2 * v67) & 0x7E | a8;
  *((_WORD *)v69 + 41) = v308;
  v69[124] = 1;
  v366 = 257;
  (*((void (**)(void **, llvm::Value *, void **, uint64_t **, _QWORD **))*v388 + 2))(v388, v71, &v363, v384, v385);
  if ((_DWORD)v381)
  {
    v286 = (char *)v380;
    v287 = (char *)v380 + 16 * v381;
    v288 = (unsigned __int8 **)(v70 + 112);
    do
    {
      v289 = *(_DWORD *)v286;
      v290 = (unsigned __int8 *)*((_QWORD *)v286 + 1);
      if (v290)
      {
        if (!v289)
        {
          v346 = (void *)*((_QWORD *)v286 + 1);
          llvm::MetadataTracking::track((uint64_t)&v346, v290, 2);
          v291 = *v288;
          goto LABEL_349;
        }
      }
      else
      {
        v291 = *v288;
        if (!*v288 && (v70[87] & 0x20) == 0)
          goto LABEL_346;
        if (!v289)
        {
          v346 = 0;
LABEL_349:
          if (v291)
            llvm::MetadataTracking::untrack((uint64_t)(v70 + 112), v291);
          v292 = (unsigned __int8 *)v346;
          *v288 = (unsigned __int8 *)v346;
          if (v292)
            llvm::MetadataTracking::retrack((uint64_t)&v346, v292, (uint64_t)(v70 + 112));
          goto LABEL_346;
        }
      }
      llvm::Value::setMetadata(v71, *(_DWORD *)v286, (llvm::MDNode *)v290);
LABEL_346:
      v286 += 16;
    }
    while (v286 != v287);
  }
  v77 = v332;
  if ((a9 & 1) == 0)
  {
    v363 = v325;
    v78 = (llvm::MDNode *)llvm::MDTuple::getImpl(v332, &v363, 1, 0, 1);
    if (v78 || *((_QWORD *)v70 + 14) || (v70[87] & 0x20) != 0)
      llvm::Value::setMetadata(v71, 8, v78);
  }
  v331 = a11 & 0xFF00000000;
  if ((a11 & 0xFF00000000) != 0)
  {
    *((_WORD *)v58 + 25) = *((_WORD *)v58 + 25) & 0xFC7F | 0x80;
    v58[92] = 1;
    *((_WORD *)v70 + 41) = *((_WORD *)v70 + 41) & 0xFC7F | 0x80;
    v70[124] = 1;
  }
  v79 = llvm::ConstantInt::get(v336, 1, 0);
  v349 = 257;
  v80 = (llvm::Value *)(*((uint64_t (**)(void **, _QWORD *, llvm::Value **, _QWORD, _QWORD))*v387 + 2))(v387, v53, v79, 0, 0);
  if (!v80)
  {
    v366 = 257;
    v81 = (char *)operator new(0x80uLL);
    v82 = v81;
    *(_QWORD *)v81 = 0;
    *((_QWORD *)v81 + 2) = 0;
    *((_QWORD *)v81 + 1) = 0;
    *((_QWORD *)v81 + 5) = 0;
    *((_QWORD *)v81 + 6) = 0;
    *((_QWORD *)v81 + 4) = 0;
    v83 = (llvm::Value ***)(v81 + 32);
    *((_QWORD *)v81 + 8) = *v53;
    v80 = (llvm::Value *)(v81 + 64);
    *((_QWORD *)v81 + 3) = v81 + 64;
    *((_QWORD *)v81 + 7) = v81 + 64;
    *((_QWORD *)v81 + 9) = 0;
    v81[80] = 41;
    v81[81] = 0;
    *((_WORD *)v81 + 41) = 0;
    *((_DWORD *)v81 + 21) = 2;
    *((_DWORD *)v81 + 30) = 0;
    *(_OWORD *)(v81 + 104) = 0u;
    *(_OWORD *)(v81 + 88) = 0u;
    *(_QWORD *)v81 = v53;
    v84 = v53 + 1;
    v85 = v53[1];
    *((_QWORD *)v81 + 1) = v85;
    if (v85)
      *(_QWORD *)(v85 + 16) = v81 + 8;
    *((_QWORD *)v81 + 2) = v84;
    *v84 = v81;
    if (*((_QWORD *)v81 + 4))
    {
      **((_QWORD **)v81 + 6) = *((_QWORD *)v81 + 5);
      v303 = *((_QWORD *)v81 + 5);
      if (v303)
        *(_QWORD *)(v303 + 16) = *((_QWORD *)v81 + 6);
    }
    *v83 = v79;
    if (v79)
    {
      v88 = v79[1];
      v87 = (llvm::Value ****)(v79 + 1);
      v86 = v88;
      *((_QWORD *)v81 + 5) = v88;
      if (v88)
        *((_QWORD *)v86 + 2) = v81 + 40;
      *((_QWORD *)v81 + 6) = v87;
      *v87 = v83;
    }
    llvm::Value::setName((uint64_t ***)v81 + 8, (uint64_t)&v363);
    (*((void (**)(void **, llvm::Value *, void **, uint64_t **, _QWORD **))*v388 + 2))(v388, v80, &v346, v384, v385);
    if ((_DWORD)v381)
    {
      v89 = (char *)v380;
      v90 = (char *)v380 + 16 * v381;
      v91 = (unsigned __int8 **)(v82 + 112);
      do
      {
        v92 = *(_DWORD *)v89;
        v93 = (unsigned __int8 *)*((_QWORD *)v89 + 1);
        if (v93)
        {
          if (!v92)
          {
            v343[0] = *((_QWORD *)v89 + 1);
            llvm::MetadataTracking::track((uint64_t)v343, v93, 2);
            v94 = *v91;
            if (!*v91)
            {
LABEL_74:
              v95 = (unsigned __int8 *)v343[0];
              *v91 = (unsigned __int8 *)v343[0];
              if (v95)
                llvm::MetadataTracking::retrack((uint64_t)v343, v95, (uint64_t)(v82 + 112));
              goto LABEL_71;
            }
LABEL_68:
            llvm::MetadataTracking::untrack((uint64_t)(v82 + 112), v94);
            goto LABEL_74;
          }
        }
        else
        {
          v94 = *v91;
          if (!*v91 && (v82[87] & 0x20) == 0)
            goto LABEL_71;
          if (!v92)
          {
            v343[0] = 0;
            if (!v94)
              goto LABEL_74;
            goto LABEL_68;
          }
        }
        llvm::Value::setMetadata(v80, *(_DWORD *)v89, (llvm::MDNode *)v93);
LABEL_71:
        v89 += 16;
      }
      while (v89 != v90);
    }
    v77 = v332;
  }
  sub_1C477667C((llvm::PHINode *)v53, (uint64_t)v80, (uint64_t)v44);
  if (v331)
    v97 = ((unint64_t)v314 >> 3) == (_DWORD)a11;
  else
    v97 = 0;
  v98 = !v97;
  if (v328 == v333 || !v98)
  {
    v102 = *(llvm::ConstantInt **)v316;
    LODWORD(v364) = *((_DWORD *)v316 + 2) >> 8;
    if (v364 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v363, 0, 0);
    else
      v363 = 0;
    v103 = llvm::ConstantInt::get(v102, (llvm::LLVMContext *)&v363, v96);
    if (v364 >= 0x41 && v363)
      MEMORY[0x1CAA32F9C](v363, 0x1000C8000313F17);
    v349 = 257;
    v104 = (llvm::Value *)sub_1C4774B48((uint64_t)&v397, 33, v322, (uint64_t)v103, (uint64_t)&v346);
    v105 = operator new(0xA0uLL);
    v106 = v105;
    v107 = 0;
    v108 = (llvm::Value *)(v105 + 24);
    v105[29] = v105[29] & 0x38000000 | 3;
    do
    {
      v109 = &v105[v107];
      *v109 = 0;
      v109[1] = 0;
      v109[2] = 0;
      v109[3] = v108;
      v107 += 8;
    }
    while (v107 != 24);
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v105 + 24), (llvm::BasicBlock *)v44, v337, v104, 0);
    v366 = 257;
    (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v402 + 16))(v402, v108, &v363, v400, v401);
    if (v398)
    {
      v110 = v397;
      v111 = &v397[16 * v398];
      v112 = (unsigned __int8 **)(v106 + 36);
      do
      {
        v113 = *(_DWORD *)v110;
        v114 = (unsigned __int8 *)*((_QWORD *)v110 + 1);
        if (v114)
        {
          if (!v113)
          {
            v343[0] = *((_QWORD *)v110 + 1);
            llvm::MetadataTracking::track((uint64_t)v343, v114, 2);
            v115 = *v112;
            if (!*v112)
            {
LABEL_107:
              v116 = (unsigned __int8 *)v343[0];
              *v112 = (unsigned __int8 *)v343[0];
              if (v116)
                llvm::MetadataTracking::retrack((uint64_t)v343, v116, (uint64_t)(v106 + 36));
              goto LABEL_104;
            }
LABEL_101:
            llvm::MetadataTracking::untrack((uint64_t)(v106 + 36), v115);
            goto LABEL_107;
          }
        }
        else
        {
          v115 = *v112;
          if (!*v112 && (*((_BYTE *)v106 + 119) & 0x20) == 0)
            goto LABEL_104;
          if (!v113)
          {
            v343[0] = 0;
            if (!v115)
              goto LABEL_107;
            goto LABEL_101;
          }
        }
        llvm::Value::setMetadata(v108, *(_DWORD *)v110, (llvm::MDNode *)v114);
LABEL_104:
        v110 += 16;
      }
      while (v110 != v111);
    }
    v117 = (_QWORD *)*v317;
    if ((_QWORD *)*v317 == v317)
    {
      v119 = 0;
    }
    else
    {
      if (v117)
        v118 = (uint64_t ***)(v117 - 3);
      else
        v118 = 0;
      if (*((unsigned __int8 *)v118 + 16) - 29 >= 0xB)
        v119 = 0;
      else
        v119 = v118;
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v119[5] + 5), v119);
    v120 = v119[3];
    v121 = v119[4];
    *v121 = (uint64_t *)v120;
    v120[1] = (uint64_t *)v121;
    v119[3] = 0;
    v119[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v119);
    v349 = 257;
    v122 = (llvm::Value *)sub_1C4774B48((uint64_t)&v380, 36, (uint64_t)v80, v322, (uint64_t)&v346);
    v123 = operator new(0xA0uLL);
    v124 = v123;
    v125 = 0;
    v126 = (llvm::Value *)(v123 + 24);
    v123[29] = v123[29] & 0x38000000 | 3;
    do
    {
      v127 = &v123[v125];
      *v127 = 0;
      v127[1] = 0;
      v127[2] = 0;
      v127[3] = v126;
      v125 += 8;
    }
    while (v125 != 24);
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v123 + 24), (llvm::BasicBlock *)v44, v337, v122, 0);
    v366 = 257;
    (*((void (**)(void **, llvm::Value *, void **, uint64_t **, _QWORD **))*v388 + 2))(v388, v126, &v363, v384, v385);
    if (!(_DWORD)v381)
      goto LABEL_296;
    v128 = (char *)v380;
    v129 = (char *)v380 + 16 * v381;
    v130 = (unsigned __int8 **)(v124 + 36);
    while (1)
    {
      v131 = *(_DWORD *)v128;
      v132 = (unsigned __int8 *)*((_QWORD *)v128 + 1);
      if (v132)
      {
        if (!v131)
        {
          v343[0] = *((_QWORD *)v128 + 1);
          llvm::MetadataTracking::track((uint64_t)v343, v132, 2);
          v133 = *v130;
          if (!*v130)
          {
LABEL_132:
            v134 = (unsigned __int8 *)v343[0];
            *v130 = (unsigned __int8 *)v343[0];
            if (v134)
              llvm::MetadataTracking::retrack((uint64_t)v343, v134, (uint64_t)(v124 + 36));
            goto LABEL_129;
          }
LABEL_126:
          llvm::MetadataTracking::untrack((uint64_t)(v124 + 36), v133);
          goto LABEL_132;
        }
      }
      else
      {
        v133 = *v130;
        if (!*v130 && (*((_BYTE *)v124 + 119) & 0x20) == 0)
          goto LABEL_129;
        if (!v131)
        {
          v343[0] = 0;
          if (!v133)
            goto LABEL_132;
          goto LABEL_126;
        }
      }
      llvm::Value::setMetadata(v126, *(_DWORD *)v128, (llvm::MDNode *)v132);
LABEL_129:
      v128 += 16;
      if (v128 == v129)
        goto LABEL_296;
    }
  }
  if (!v331)
  {
    v100 = (_QWORD *)v318;
    v101 = v320;
    goto LABEL_155;
  }
  v99 = 8 * a11;
  LODWORD(v363) = 8 * a11;
  v100 = (_QWORD *)v318;
  v101 = v320;
  if (8 * (int)a11 <= 63)
  {
    switch(v99)
    {
      case 32:
        v73 = (llvm::PointerType *)(*v77 + 1960);
        goto LABEL_155;
      case 16:
        v73 = (llvm::PointerType *)(*v77 + 1936);
        goto LABEL_155;
      case 8:
        v73 = (llvm::PointerType *)(*v77 + 1912);
        goto LABEL_155;
    }
  }
  else
  {
    if (v99 == 64)
    {
      v73 = (llvm::PointerType *)(*v77 + 1984);
      goto LABEL_155;
    }
    if (v99 == 128)
    {
      v73 = (llvm::PointerType *)(*v77 + 2008);
      goto LABEL_155;
    }
  }
  v300 = sub_1C5270984(*v77 + 2168, &v363);
  v73 = (llvm::PointerType *)*((_QWORD *)v300 + 1);
  if (!v73)
  {
    v301 = v300;
    v73 = (llvm::PointerType *)sub_1C484358C(*v77 + 2040, 24, 3);
    v302 = (int)v363;
    *(_QWORD *)v73 = v77;
    *((_QWORD *)v73 + 2) = 0;
    *((_QWORD *)v73 + 1) = (v302 << 8) | 0xDu;
    *((_QWORD *)v301 + 1) = v73;
  }
LABEL_155:
  v334 = v73;
  sub_1C4768AD0(v307, (uint64_t)v73);
  v147 = v146;
  if ((_DWORD)v145 == 1)
  v366 = 257;
  v148 = sub_1C538EDCC((uint64_t *)&v397, v100, v306, (uint64_t)&v363);
  v366 = 257;
  v329 = (uint64_t)v148;
  v315 = (_QWORD *)sub_1C47733F8((uint64_t)&v397, (uint64_t)v100, (uint64_t)v148, (uint64_t)&v363, 0, 0);
  v363 = "loop-memcpy-residual";
  v366 = 259;
  v149 = *(_QWORD *)(v101 + 56);
  v150 = (uint64_t **)operator new();
  *v150 = (uint64_t *)(*v77 + 1600);
  v150[1] = 0;
  v151 = *((_DWORD *)v150 + 5) & 0xC0000000;
  v150[3] = 0;
  v152 = v150 + 3;
  *((_DWORD *)v150 + 4) = 22;
  *((_DWORD *)v150 + 5) = v151;
  v150[4] = 0;
  v150[5] = (uint64_t *)(v150 + 5);
  v150[6] = (uint64_t *)(v150 + 5);
  v150[7] = 0;
  if (v149)
  {
    v153 = v149 + 72;
    if (v337)
      v154 = (uint64_t *)((char *)v337 + 24);
    else
      v154 = (uint64_t *)(v149 + 72);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v153, v150);
    v155 = (uint64_t *)*v154;
    v150[3] = (uint64_t *)*v154;
    v150[4] = v154;
    v155[1] = (uint64_t)v152;
    *v154 = (uint64_t)v152;
  }
  llvm::Value::setName((uint64_t ***)v150, (uint64_t)&v363);
  v363 = "loop-memcpy-residual-header";
  v366 = 259;
  v156 = *(_QWORD *)(v101 + 56);
  v157 = (uint64_t **)operator new();
  *v157 = (uint64_t *)(*v77 + 1600);
  v157[1] = 0;
  v158 = *((_DWORD *)v157 + 5) & 0xC0000000;
  v157[3] = 0;
  v159 = v157 + 3;
  *((_DWORD *)v157 + 4) = 22;
  *((_DWORD *)v157 + 5) = v158;
  v157[4] = 0;
  v157[5] = (uint64_t *)(v157 + 5);
  v157[6] = (uint64_t *)(v157 + 5);
  v157[7] = 0;
  if (v156)
  {
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v156 + 72, v157);
    v160 = *(uint64_t **)(v156 + 72);
    v157[3] = v160;
    v157[4] = (uint64_t *)(v156 + 72);
    v160[1] = (uint64_t)v159;
    *(_QWORD *)(v156 + 72) = v159;
  }
  llvm::Value::setName((uint64_t ***)v157, (uint64_t)&v363);
  v162 = *(llvm::ConstantInt **)v316;
  LODWORD(v364) = *((_DWORD *)v316 + 2) >> 8;
  if (v364 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v363, 0, 0);
  else
    v363 = 0;
  v163 = llvm::ConstantInt::get(v162, (llvm::LLVMContext *)&v363, v161);
  if (v364 >= 0x41 && v363)
    MEMORY[0x1CAA32F9C](v363, 0x1000C8000313F17);
  v319 = v147 + 7;
  v321 = (uint64_t)v163;
  v349 = 257;
  v164 = (llvm::Value *)sub_1C4774B48((uint64_t)&v397, 33, v322, (uint64_t)v163, (uint64_t)&v346);
  v165 = operator new(0xA0uLL);
  v166 = v165;
  v167 = 0;
  v168 = (llvm::Value *)(v165 + 24);
  v165[29] = v165[29] & 0x38000000 | 3;
  do
  {
    v169 = &v165[v167];
    *v169 = 0;
    v169[1] = 0;
    v169[2] = 0;
    v169[3] = v168;
    v167 += 8;
  }
  while (v167 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v165 + 24), (llvm::BasicBlock *)v44, (llvm::BasicBlock *)v157, v164, 0);
  v366 = 257;
  (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v402 + 16))(v402, v168, &v363, v400, v401);
  if (v398)
  {
    v170 = v397;
    v171 = &v397[16 * v398];
    v172 = (unsigned __int8 **)(v166 + 36);
    do
    {
      v173 = *(_DWORD *)v170;
      v174 = (unsigned __int8 *)*((_QWORD *)v170 + 1);
      if (v174)
      {
        if (!v173)
        {
          v343[0] = *((_QWORD *)v170 + 1);
          llvm::MetadataTracking::track((uint64_t)v343, v174, 2);
          v175 = *v172;
          if (!*v172)
          {
LABEL_182:
            v176 = (unsigned __int8 *)v343[0];
            *v172 = (unsigned __int8 *)v343[0];
            if (v176)
              llvm::MetadataTracking::retrack((uint64_t)v343, v176, (uint64_t)(v166 + 36));
            goto LABEL_179;
          }
LABEL_176:
          llvm::MetadataTracking::untrack((uint64_t)(v166 + 36), v175);
          goto LABEL_182;
        }
      }
      else
      {
        v175 = *v172;
        if (!*v172 && (*((_BYTE *)v166 + 119) & 0x20) == 0)
          goto LABEL_179;
        if (!v173)
        {
          v343[0] = 0;
          if (!v175)
            goto LABEL_182;
          goto LABEL_176;
        }
      }
      llvm::Value::setMetadata(v168, *(_DWORD *)v170, (llvm::MDNode *)v174);
LABEL_179:
      v170 += 16;
    }
    while (v170 != v171);
  }
  v177 = (_QWORD *)*v317;
  if ((_QWORD *)*v317 == v317)
  {
    v179 = 0;
  }
  else
  {
    if (v177)
      v178 = (uint64_t ***)(v177 - 3);
    else
      v178 = 0;
    if (*((unsigned __int8 *)v178 + 16) - 29 >= 0xB)
      v179 = 0;
    else
      v179 = v178;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v179[5] + 5), v179);
  v180 = v179[3];
  v181 = v179[4];
  *v181 = (uint64_t *)v180;
  v180[1] = (uint64_t *)v181;
  v179[3] = 0;
  v179[4] = 0;
  llvm::Value::deleteValue((llvm::Value *)v179);
  v349 = 257;
  v182 = (llvm::Value *)sub_1C4774B48((uint64_t)&v380, 36, (uint64_t)v80, v322, (uint64_t)&v346);
  v183 = operator new(0xA0uLL);
  v184 = v183;
  v185 = 0;
  v186 = (llvm::Value *)(v183 + 24);
  v183[29] = v183[29] & 0x38000000 | 3;
  do
  {
    v187 = &v183[v185];
    *v187 = 0;
    v187[1] = 0;
    v187[2] = 0;
    v187[3] = v186;
    v185 += 8;
  }
  while (v185 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v183 + 24), (llvm::BasicBlock *)v44, (llvm::BasicBlock *)v157, v182, 0);
  v366 = 257;
  (*((void (**)(void **, llvm::Value *, void **, uint64_t **, _QWORD **))*v388 + 2))(v388, v186, &v363, v384, v385);
  if ((_DWORD)v381)
  {
    v188 = (char *)v380;
    v189 = (char *)v380 + 16 * v381;
    v190 = (unsigned __int8 **)(v184 + 36);
    do
    {
      v191 = *(_DWORD *)v188;
      v192 = (unsigned __int8 *)*((_QWORD *)v188 + 1);
      if (v192)
      {
        if (!v191)
        {
          v343[0] = *((_QWORD *)v188 + 1);
          llvm::MetadataTracking::track((uint64_t)v343, v192, 2);
          v193 = *v190;
          if (!*v190)
          {
LABEL_207:
            v194 = (unsigned __int8 *)v343[0];
            *v190 = (unsigned __int8 *)v343[0];
            if (v194)
              llvm::MetadataTracking::retrack((uint64_t)v343, v194, (uint64_t)(v184 + 36));
            goto LABEL_204;
          }
LABEL_201:
          llvm::MetadataTracking::untrack((uint64_t)(v184 + 36), v193);
          goto LABEL_207;
        }
      }
      else
      {
        v193 = *v190;
        if (!*v190 && (*((_BYTE *)v184 + 119) & 0x20) == 0)
          goto LABEL_204;
        if (!v191)
        {
          v343[0] = 0;
          if (!v193)
            goto LABEL_207;
          goto LABEL_201;
        }
      }
      llvm::Value::setMetadata(v186, *(_DWORD *)v188, (llvm::MDNode *)v192);
LABEL_204:
      v188 += 16;
    }
    while (v188 != v189);
  }
  v195 = **v157;
  v363 = v365;
  v364 = 0x200000000;
  v369 = v195;
  v370 = &v378;
  v371 = &v379;
  v372 = 0;
  v373 = 0;
  v374 = 512;
  v375 = 7;
  v377 = 0;
  v376 = 0;
  v378 = &unk_1E8167888;
  v379 = &unk_1E8167A08;
  v367 = v157;
  v368 = v157 + 5;
  v344 = 257;
  v196 = (llvm::Value *)sub_1C4774B48((uint64_t)&v363, 33, v329, v321, (uint64_t)v343);
  v197 = operator new(0xA0uLL);
  v198 = v197;
  v199 = 0;
  v200 = (llvm::Value *)(v197 + 24);
  v197[29] = v197[29] & 0x38000000 | 3;
  do
  {
    v201 = &v197[v199];
    *v201 = 0;
    v201[1] = 0;
    v201[2] = 0;
    v201[3] = v200;
    v199 += 8;
  }
  while (v199 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v197 + 24), (llvm::BasicBlock *)v150, v337, v196, 0);
  v349 = 257;
  (*((void (**)(void **, llvm::Value *, void **, uint64_t **, _QWORD **))*v371 + 2))(v371, v200, &v346, v367, v368);
  if ((_DWORD)v364)
  {
    v202 = (char *)v363;
    v203 = (char *)v363 + 16 * v364;
    v204 = (unsigned __int8 **)(v198 + 36);
    do
    {
      v205 = *(_DWORD *)v202;
      v206 = (unsigned __int8 *)*((_QWORD *)v202 + 1);
      if (v206)
      {
        if (!v205)
        {
          v340[0] = *((_QWORD *)v202 + 1);
          llvm::MetadataTracking::track((uint64_t)v340, v206, 2);
          v207 = *v204;
          if (!*v204)
          {
LABEL_224:
            v208 = (unsigned __int8 *)v340[0];
            *v204 = (unsigned __int8 *)v340[0];
            if (v208)
              llvm::MetadataTracking::retrack((uint64_t)v340, v208, (uint64_t)(v198 + 36));
            goto LABEL_221;
          }
LABEL_218:
          llvm::MetadataTracking::untrack((uint64_t)(v198 + 36), v207);
          goto LABEL_224;
        }
      }
      else
      {
        v207 = *v204;
        if (!*v204 && (*((_BYTE *)v198 + 119) & 0x20) == 0)
          goto LABEL_221;
        if (!v205)
        {
          v340[0] = 0;
          if (!v207)
            goto LABEL_224;
          goto LABEL_218;
        }
      }
      llvm::Value::setMetadata(v200, *(_DWORD *)v202, (llvm::MDNode *)v206);
LABEL_221:
      v202 += 16;
    }
    while (v202 != v203);
  }
  v209 = **v150;
  v346 = v348;
  v347 = 0x200000000;
  v352 = v209;
  v353 = &v361;
  v354 = &v362;
  v355 = 0;
  v356 = 0;
  v357 = 512;
  v358 = 7;
  v359 = 0;
  v360 = 0;
  v361 = &unk_1E8167888;
  v362 = &unk_1E8167A08;
  v350 = v150;
  v351 = v150 + 5;
  v343[0] = "residual-loop-index";
  v344 = 259;
  v210 = (_QWORD *)sub_1C4867E94((uint64_t)&v346, (uint64_t)v336, 2, (uint64_t)v343);
  sub_1C477667C((llvm::PHINode *)v210, v321, (uint64_t)v157);
  v211 = v334;
  v212 = llvm::PointerType::get(v334, (llvm::Type *)v313);
  v344 = 257;
  v213 = (uint64_t *)sub_1C4773E38((uint64_t *)&v346, 49, (unsigned __int8 *)v339, v212, (uint64_t)v343);
  v214 = llvm::PointerType::get(v334, (llvm::Type *)v323);
  v344 = 257;
  v215 = (uint64_t *)sub_1C4773E38((uint64_t *)&v346, 49, (unsigned __int8 *)v324, v214, (uint64_t)v343);
  v341 = 257;
  v216 = (llvm::Value *)(*((uint64_t (**)(void **, _QWORD *, _QWORD *, _QWORD, _QWORD))*v353 + 2))(v353, v315, v210, 0, 0);
  if (!v216)
  {
    v344 = 257;
    v217 = (char *)operator new(0x80uLL);
    v218 = v217;
    *(_QWORD *)v217 = 0;
    *((_QWORD *)v217 + 2) = 0;
    *((_QWORD *)v217 + 1) = 0;
    *((_QWORD *)v217 + 5) = 0;
    *((_QWORD *)v217 + 6) = 0;
    *((_QWORD *)v217 + 4) = 0;
    v219 = v217 + 32;
    *((_QWORD *)v217 + 8) = *v315;
    v216 = (llvm::Value *)(v217 + 64);
    *((_QWORD *)v217 + 3) = v217 + 64;
    *((_QWORD *)v217 + 7) = v217 + 64;
    *((_QWORD *)v217 + 9) = 0;
    v217[80] = 41;
    v217[81] = 0;
    *((_WORD *)v217 + 41) = 0;
    *((_DWORD *)v217 + 21) = 2;
    *((_DWORD *)v217 + 30) = 0;
    *(_OWORD *)(v217 + 104) = 0u;
    *(_OWORD *)(v217 + 88) = 0u;
    *(_QWORD *)v217 = v315;
    v221 = v315 + 1;
    v220 = v315[1];
    *((_QWORD *)v217 + 1) = v220;
    if (v220)
      *(_QWORD *)(v220 + 16) = v217 + 8;
    *((_QWORD *)v217 + 2) = v221;
    *v221 = v217;
    if (*((_QWORD *)v217 + 4))
    {
      **((_QWORD **)v217 + 6) = *((_QWORD *)v217 + 5);
      v304 = *((_QWORD *)v217 + 5);
      if (v304)
        *(_QWORD *)(v304 + 16) = *((_QWORD *)v217 + 6);
    }
    *v219 = v210;
    if (v210)
    {
      v222 = v210 + 1;
      v223 = v210[1];
      *((_QWORD *)v217 + 5) = v223;
      if (v223)
        *(_QWORD *)(v223 + 16) = v217 + 40;
      *((_QWORD *)v217 + 6) = v222;
      *v222 = v219;
    }
    llvm::Value::setName((uint64_t ***)v217 + 8, (uint64_t)v343);
    (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v354 + 2))(v354, v216, v340, v350, v351);
    if ((_DWORD)v347)
    {
      v224 = (char *)v346;
      v225 = (char *)v346 + 16 * v347;
      v226 = (unsigned __int8 **)(v218 + 112);
      do
      {
        v227 = *(_DWORD *)v224;
        v228 = (unsigned __int8 *)*((_QWORD *)v224 + 1);
        if (v228)
        {
          if (!v227)
          {
            v345 = (unsigned __int8 *)*((_QWORD *)v224 + 1);
            llvm::MetadataTracking::track((uint64_t)&v345, v228, 2);
            v229 = *v226;
            if (!*v226)
            {
LABEL_247:
              v230 = v345;
              *v226 = v345;
              if (v230)
                llvm::MetadataTracking::retrack((uint64_t)&v345, v230, (uint64_t)(v218 + 112));
              goto LABEL_244;
            }
LABEL_241:
            llvm::MetadataTracking::untrack((uint64_t)(v218 + 112), v229);
            goto LABEL_247;
          }
        }
        else
        {
          v229 = *v226;
          if (!*v226 && (v218[87] & 0x20) == 0)
            goto LABEL_244;
          if (!v227)
          {
            v345 = 0;
            if (!v229)
              goto LABEL_247;
            goto LABEL_241;
          }
        }
        llvm::Value::setMetadata(v216, *(_DWORD *)v224, (llvm::MDNode *)v228);
LABEL_244:
        v224 += 16;
      }
      while (v224 != v225);
    }
    v211 = v334;
  }
  v344 = 257;
  v231 = sub_1C5098FF4((uint64_t *)&v346, v211, v213, (uint64_t)v216, (uint64_t)v343);
  v341 = 257;
  v232 = (char *)operator new(0x60uLL);
  v233 = v232;
  v234 = (llvm::Value *)(v232 + 32);
  *((_QWORD *)v232 + 2) = 0;
  *((_QWORD *)v232 + 3) = v232 + 32;
  v344 = 257;
  *((_QWORD *)v232 + 4) = v211;
  *((_QWORD *)v232 + 5) = 0;
  v235 = (uint64_t *)(v232 + 40);
  *((_WORD *)v232 + 24) = 60;
  *((_DWORD *)v232 + 13) = 1;
  *(_OWORD *)(v232 + 56) = 0u;
  *(_OWORD *)(v232 + 72) = 0u;
  *((_DWORD *)v232 + 22) = 0;
  *(_QWORD *)v232 = v231;
  *((_QWORD *)v232 + 1) = 0;
  if (v231)
  {
    v238 = v231[1];
    v237 = v231 + 1;
    v236 = v238;
    *((_QWORD *)v232 + 1) = v238;
    if (v238)
      v236[2] = (uint64_t *)(v232 + 8);
    *((_QWORD *)v232 + 2) = v237;
    *v237 = v232;
  }
  *((_WORD *)v232 + 25) = v312;
  v232[92] = 1;
  llvm::Value::setName((uint64_t ***)v232 + 4, (uint64_t)v343);
  (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v354 + 2))(v354, v234, v340, v350, v351);
  if ((_DWORD)v347)
  {
    v279 = (char *)v346;
    v280 = (char *)v346 + 16 * v347;
    v281 = (unsigned __int8 **)(v233 + 80);
    do
    {
      v282 = *(_DWORD *)v279;
      v283 = (unsigned __int8 *)*((_QWORD *)v279 + 1);
      if (v283)
      {
        if (!v282)
        {
          v345 = (unsigned __int8 *)*((_QWORD *)v279 + 1);
          llvm::MetadataTracking::track((uint64_t)&v345, v283, 2);
          v284 = *v281;
          goto LABEL_334;
        }
      }
      else
      {
        v284 = *v281;
        if (!*v281 && (v233[55] & 0x20) == 0)
          goto LABEL_331;
        if (!v282)
        {
          v345 = 0;
LABEL_334:
          if (v284)
            llvm::MetadataTracking::untrack((uint64_t)(v233 + 80), v284);
          v285 = v345;
          *v281 = v345;
          if (v285)
            llvm::MetadataTracking::retrack((uint64_t)&v345, v285, (uint64_t)(v233 + 80));
          goto LABEL_331;
        }
      }
      llvm::Value::setMetadata(v234, *(_DWORD *)v279, (llvm::MDNode *)v283);
LABEL_331:
      v279 += 16;
    }
    while (v279 != v280);
  }
  if ((a9 & 1) == 0)
  {
    v343[0] = v325;
    v239 = (llvm::MDNode *)llvm::MDTuple::getImpl(v332, v343, 1, 0, 1);
    if (v239 || *((_QWORD *)v233 + 10) || (v233[55] & 0x20) != 0)
      llvm::Value::setMetadata(v234, 7, v239);
  }
  v344 = 257;
  v240 = sub_1C5098FF4((uint64_t *)&v346, v334, v215, (uint64_t)v216, (uint64_t)v343);
  v241 = (char *)operator new(0x80uLL);
  v242 = v241;
  *((_DWORD *)v241 + 21) = *((_DWORD *)v241 + 21) & 0x38000000 | 2;
  *(_QWORD *)v241 = 0;
  *((_QWORD *)v241 + 2) = 0;
  *((_QWORD *)v241 + 1) = 0;
  *((_QWORD *)v241 + 5) = 0;
  *((_QWORD *)v241 + 6) = 0;
  *((_QWORD *)v241 + 4) = 0;
  *((_QWORD *)v241 + 8) = ***(_QWORD ***)v234 + 1576;
  v243 = (llvm::Value *)(v241 + 64);
  *((_QWORD *)v241 + 3) = v241 + 64;
  *((_QWORD *)v241 + 7) = v241 + 64;
  *((_QWORD *)v241 + 9) = 0;
  v241[80] = 61;
  v241[81] = 0;
  *((_DWORD *)v241 + 21) = 2;
  *(_OWORD *)(v241 + 88) = 0u;
  *(_OWORD *)(v241 + 104) = 0u;
  *((_DWORD *)v241 + 30) = 0;
  v244 = *v235;
  *(_QWORD *)v241 = v234;
  *((_QWORD *)v241 + 1) = v244;
  if (v244)
    *(_QWORD *)(v244 + 16) = v241 + 8;
  *((_QWORD *)v241 + 2) = v235;
  *v235 = (uint64_t)v241;
  *((_QWORD *)v241 + 4) = v240;
  if (v240)
  {
    v247 = v240[1];
    v246 = v240 + 1;
    v245 = v247;
    *((_QWORD *)v241 + 5) = v247;
    if (v247)
      v245[2] = (uint64_t *)(v241 + 40);
    *((_QWORD *)v241 + 6) = v246;
    *v246 = v241 + 32;
  }
  *((_WORD *)v241 + 41) = v308;
  v241[124] = 1;
  v344 = 257;
  (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v354 + 2))(v354, v243, v343, v350, v351);
  if ((_DWORD)v347)
  {
    v293 = (char *)v346;
    v294 = (char *)v346 + 16 * v347;
    v295 = (unsigned __int8 **)(v242 + 112);
    do
    {
      v296 = *(_DWORD *)v293;
      v297 = (unsigned __int8 *)*((_QWORD *)v293 + 1);
      if (v297)
      {
        if (!v296)
        {
          v340[0] = *((_QWORD *)v293 + 1);
          llvm::MetadataTracking::track((uint64_t)v340, v297, 2);
          v298 = *v295;
          goto LABEL_364;
        }
      }
      else
      {
        v298 = *v295;
        if (!*v295 && (v242[87] & 0x20) == 0)
          goto LABEL_361;
        if (!v296)
        {
          v340[0] = 0;
LABEL_364:
          if (v298)
            llvm::MetadataTracking::untrack((uint64_t)(v242 + 112), v298);
          v299 = (unsigned __int8 *)v340[0];
          *v295 = (unsigned __int8 *)v340[0];
          if (v299)
            llvm::MetadataTracking::retrack((uint64_t)v340, v299, (uint64_t)(v242 + 112));
          goto LABEL_361;
        }
      }
      llvm::Value::setMetadata(v243, *(_DWORD *)v293, (llvm::MDNode *)v297);
LABEL_361:
      v293 += 16;
    }
    while (v293 != v294);
  }
  if ((a9 & 1) == 0)
  {
    v343[0] = v325;
    v248 = (llvm::MDNode *)llvm::MDTuple::getImpl(v332, v343, 1, 0, 1);
    if (v248 || *((_QWORD *)v242 + 14) || (v242[87] & 0x20) != 0)
      llvm::Value::setMetadata(v243, 8, v248);
  }
  if (v331)
  {
    *((_WORD *)v233 + 25) = *((_WORD *)v233 + 25) & 0xFC7F | 0x80;
    v233[92] = 1;
    *((_WORD *)v242 + 41) = *((_WORD *)v242 + 41) & 0xFC7F | 0x80;
    v242[124] = 1;
  }
  v249 = llvm::ConstantInt::get(v336, (v319 >> 3), 0);
  v341 = 257;
  v250 = (llvm::Value *)(*((uint64_t (**)(void **, _QWORD *, llvm::Value **, _QWORD, _QWORD))*v353 + 2))(v353, v210, v249, 0, 0);
  if (!v250)
  {
    v344 = 257;
    v264 = (char *)operator new(0x80uLL);
    v265 = v264;
    *((_QWORD *)v264 + 5) = 0;
    *((_QWORD *)v264 + 6) = 0;
    *((_QWORD *)v264 + 4) = 0;
    v266 = (llvm::Value ***)(v264 + 32);
    *((_QWORD *)v264 + 8) = *v210;
    v250 = (llvm::Value *)(v264 + 64);
    *((_QWORD *)v264 + 3) = v264 + 64;
    *((_QWORD *)v264 + 7) = v264 + 64;
    *((_QWORD *)v264 + 9) = 0;
    v264[80] = 41;
    v264[81] = 0;
    *((_WORD *)v264 + 41) = 0;
    *((_DWORD *)v264 + 21) = 2;
    *(_OWORD *)(v264 + 88) = 0u;
    *(_OWORD *)(v264 + 104) = 0u;
    *((_DWORD *)v264 + 30) = 0;
    *(_QWORD *)v264 = v210;
    v267 = v210 + 1;
    v268 = v210[1];
    *((_QWORD *)v264 + 1) = v268;
    if (v268)
      *(_QWORD *)(v268 + 16) = v264 + 8;
    *((_QWORD *)v264 + 2) = v267;
    *v267 = v264;
    if (*((_QWORD *)v264 + 4))
    {
      **((_QWORD **)v264 + 6) = *((_QWORD *)v264 + 5);
      v305 = *((_QWORD *)v264 + 5);
      if (v305)
        *(_QWORD *)(v305 + 16) = *((_QWORD *)v264 + 6);
    }
    *v266 = v249;
    if (v249)
    {
      v271 = v249[1];
      v270 = (llvm::Value ****)(v249 + 1);
      v269 = v271;
      *((_QWORD *)v264 + 5) = v271;
      if (v271)
        *((_QWORD *)v269 + 2) = v264 + 40;
      *((_QWORD *)v264 + 6) = v270;
      *v270 = v266;
    }
    llvm::Value::setName((uint64_t ***)v264 + 8, (uint64_t)v343);
    (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v354 + 2))(v354, v250, v340, v350, v351);
    if ((_DWORD)v347)
    {
      v272 = (char *)v346;
      v273 = (char *)v346 + 16 * v347;
      v274 = (unsigned __int8 **)(v265 + 112);
      do
      {
        v275 = *(_DWORD *)v272;
        v276 = (unsigned __int8 *)*((_QWORD *)v272 + 1);
        if (v276)
        {
          if (!v275)
          {
            v345 = (unsigned __int8 *)*((_QWORD *)v272 + 1);
            llvm::MetadataTracking::track((uint64_t)&v345, v276, 2);
            v277 = *v274;
            if (!*v274)
            {
LABEL_321:
              v278 = v345;
              *v274 = v345;
              if (v278)
                llvm::MetadataTracking::retrack((uint64_t)&v345, v278, (uint64_t)(v265 + 112));
              goto LABEL_318;
            }
LABEL_315:
            llvm::MetadataTracking::untrack((uint64_t)(v265 + 112), v277);
            goto LABEL_321;
          }
        }
        else
        {
          v277 = *v274;
          if (!*v274 && (v265[87] & 0x20) == 0)
            goto LABEL_318;
          if (!v275)
          {
            v345 = 0;
            if (!v277)
              goto LABEL_321;
            goto LABEL_315;
          }
        }
        llvm::Value::setMetadata(v250, *(_DWORD *)v272, (llvm::MDNode *)v276);
LABEL_318:
        v272 += 16;
      }
      while (v272 != v273);
    }
  }
  sub_1C477667C((llvm::PHINode *)v210, (uint64_t)v250, (uint64_t)v150);
  v341 = 257;
  v251 = (llvm::Value *)sub_1C4774B48((uint64_t)&v346, 36, (uint64_t)v250, v329, (uint64_t)v340);
  v252 = operator new(0xA0uLL);
  v253 = v252;
  v254 = 0;
  v255 = (llvm::Value *)(v252 + 24);
  v252[29] = v252[29] & 0x38000000 | 3;
  do
  {
    v256 = &v252[v254];
    *v256 = 0;
    v256[1] = 0;
    v256[2] = 0;
    v256[3] = v255;
    v254 += 8;
  }
  while (v254 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v252 + 24), (llvm::BasicBlock *)v150, v337, v251, 0);
  v344 = 257;
  (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v354 + 2))(v354, v255, v343, v350, v351);
  v257 = (char *)v346;
  if ((_DWORD)v347)
  {
    v258 = (char *)v346 + 16 * v347;
    v259 = (unsigned __int8 **)(v253 + 36);
    while (1)
    {
      v260 = *(_DWORD *)v257;
      v261 = (unsigned __int8 *)*((_QWORD *)v257 + 1);
      if (v261)
      {
        if (!v260)
        {
          v345 = (unsigned __int8 *)*((_QWORD *)v257 + 1);
          llvm::MetadataTracking::track((uint64_t)&v345, v261, 2);
          v262 = *v259;
          if (!*v259)
          {
LABEL_290:
            v263 = v345;
            *v259 = v345;
            if (v263)
              llvm::MetadataTracking::retrack((uint64_t)&v345, v263, (uint64_t)(v253 + 36));
            goto LABEL_287;
          }
LABEL_284:
          llvm::MetadataTracking::untrack((uint64_t)(v253 + 36), v262);
          goto LABEL_290;
        }
      }
      else
      {
        v262 = *v259;
        if (!*v259 && (*((_BYTE *)v253 + 119) & 0x20) == 0)
          goto LABEL_287;
        if (!v260)
        {
          v345 = 0;
          if (!v262)
            goto LABEL_290;
          goto LABEL_284;
        }
      }
      llvm::Value::setMetadata(v255, *(_DWORD *)v257, (llvm::MDNode *)v261);
LABEL_287:
      v257 += 16;
      if (v257 == v258)
      {
        v257 = (char *)v346;
        break;
      }
    }
  }
  if (v257 != v348)
    free(v257);
  if (v363 != v365)
    free(v363);
LABEL_296:
  if (v380 != v382)
    free(v380);
  if (v397 != (char *)v399)
    free(v397);
}

void llvm::expandMemCpyAsLoop(uint64_t a1, _QWORD *a2, llvm::ScalarEvolution *this)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  llvm::AttributeList *v11;
  unsigned int ParamAlignment;
  char v13;
  unsigned int v14;
  char v15;
  uint64_t v16;
  llvm::APInt *v17;
  unsigned int v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  const llvm::SCEV *SCEVIter;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  const llvm::SCEV *v43;
  uint64_t v44;

  if (!this)
  {
LABEL_2:
    v5 = 1;
    goto LABEL_3;
  }
  v27 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
  v28 = *(_QWORD *)(a1 - 32 * v27 + 32);
  v29 = *((_QWORD *)this + 13);
  v30 = *((_DWORD *)this + 30);
  if (!v30)
    goto LABEL_39;
  v31 = ((v28 >> 4) ^ (v28 >> 9)) & (v30 - 1);
  v32 = v29 + 48 * v31;
  v33 = *(_QWORD *)(v32 + 24);
  if (v33 != v28)
  {
    v34 = 1;
    while (v33 != -4096)
    {
      v35 = v31 + v34++;
      v31 = v35 & (v30 - 1);
      v32 = v29 + 48 * v31;
      v33 = *(_QWORD *)(v32 + 24);
      if (v33 == v28)
        goto LABEL_40;
    }
LABEL_39:
    v32 = v29 + 48 * v30;
  }
LABEL_40:
  if (v32 == v29 + 48 * v30 || (SCEVIter = *(const llvm::SCEV **)(v32 + 40)) == 0)
  {
    SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v28);
    v29 = *((_QWORD *)this + 13);
    v30 = *((_DWORD *)this + 30);
    v27 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
  }
  v37 = *(_QWORD *)(a1 - 32 * v27);
  if (!v30)
  {
LABEL_49:
    v39 = v29 + 48 * v30;
    goto LABEL_50;
  }
  v38 = ((v37 >> 4) ^ (v37 >> 9)) & (v30 - 1);
  v39 = v29 + 48 * v38;
  v40 = *(_QWORD *)(v39 + 24);
  if (v40 != v37)
  {
    v41 = 1;
    while (v40 != -4096)
    {
      v42 = v38 + v41++;
      v38 = v42 & (v30 - 1);
      v39 = v29 + 48 * v38;
      v40 = *(_QWORD *)(v39 + 24);
      if (v40 == v37)
        goto LABEL_50;
    }
    goto LABEL_49;
  }
LABEL_50:
  if (v39 == v29 + 48 * v30 || (v43 = *(const llvm::SCEV **)(v39 + 40)) == 0)
    v43 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(this, v37);
  if ((llvm::ScalarEvolution::isKnownPredicateAt((uint64_t ****)this, 33, SCEVIter, v43, a1) & 1) == 0)
    goto LABEL_2;
  v5 = 0;
LABEL_3:
  v6 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(v7 + 16);
  v9 = *(unsigned __int8 **)(v6 + 32);
  v10 = *(unsigned __int8 **)v6;
  v44 = a1;
  v11 = (llvm::AttributeList *)(a1 + 64);
  ParamAlignment = (unsigned __int16)llvm::AttributeList::getParamAlignment(v11, 1);
  if (ParamAlignment <= 0x100)
    v13 = 0;
  else
    v13 = ParamAlignment;
  v14 = (unsigned __int16)llvm::AttributeList::getParamAlignment(v11, 0);
  if (v14 <= 0x100)
    v15 = 0;
  else
    v15 = v14;
  v16 = *(_QWORD *)(v6 + 96);
  v17 = (llvm::APInt *)(v16 + 24);
  v18 = *(_DWORD *)(v16 + 32);
  if (v7)
    v19 = v8 == 16;
  else
    v19 = 0;
  if (v19)
  {
    if (v18 > 0x40)
      v21 = llvm::APInt::countLeadingZerosSlowCase(v17) == v18;
    else
      v21 = *(_QWORD *)v17 == 0;
    v24 = !v21;
    v25 = v21;
    llvm::createMemCpyLoopKnownSize(v44, v9, v10, v7, v13, v15, v24, v25 ^ 1, v5, a2, 0);
  }
  else
  {
    if (v18 > 0x40)
      v20 = llvm::APInt::countLeadingZerosSlowCase(v17) == v18;
    else
      v20 = *(_QWORD *)v17 == 0;
    v22 = !v20;
    v23 = v20;
    llvm::createMemCpyLoopUnknownSize(v44, v9, v10, v7, v13, v15, v22, v23 ^ 1, v5, a2, 0);
  }
}

void llvm::expandMemMoveAsLoop(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  llvm::ConstantInt **v5;
  llvm::AttributeList *v6;
  unsigned int ParamAlignment;
  unsigned int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  llvm *v19;
  llvm::MDNode *v20;
  uint64_t ***v21;
  uint64_t ***v22;
  uint64_t ***v23;
  const char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Value **v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t **v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Value **v45;
  uint64_t v46;
  uint64_t ***v47;
  char *v48;
  char *v49;
  llvm::Value *v50;
  uint64_t *v51;
  uint64_t **v52;
  _QWORD *v53;
  uint64_t **v54;
  unint64_t v55;
  char v56;
  uint64_t ***v57;
  char *v58;
  char *v59;
  llvm::Value *v60;
  uint64_t v61;
  uint64_t **v62;
  _QWORD *v63;
  uint64_t **v64;
  llvm::Value **v65;
  llvm::Value *v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t v69;
  llvm::Value *v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  unsigned __int8 **v74;
  int v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  llvm::Instruction *v79;
  _DWORD *v80;
  uint64_t v81;
  llvm::BranchInst *v82;
  _QWORD *v83;
  uint64_t ***v84;
  uint64_t **v85;
  uint64_t **v86;
  _QWORD *v87;
  uint64_t **v88;
  unsigned int v89;
  _QWORD *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t ***v95;
  char *v96;
  char *v97;
  llvm::Value *v98;
  uint64_t *v99;
  uint64_t **v100;
  _QWORD *v101;
  uint64_t **v102;
  uint64_t ***v103;
  char *v104;
  char *v105;
  llvm::Value *v106;
  uint64_t v107;
  uint64_t **v108;
  _QWORD *v109;
  uint64_t **v110;
  llvm::Value **v111;
  llvm::Value *v112;
  llvm::Value *v113;
  _DWORD *v114;
  _DWORD *v115;
  uint64_t v116;
  llvm::Value *v117;
  _QWORD *v118;
  char *v119;
  char *v120;
  unsigned __int8 **v121;
  int v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  unsigned __int8 *v125;
  llvm::Value **v126;
  llvm::Instruction *v127;
  _DWORD *v128;
  uint64_t v129;
  llvm::BranchInst *v130;
  _QWORD *v131;
  llvm::Instruction *v132;
  uint64_t v133;
  _QWORD *v134;
  char *v135;
  char *v136;
  llvm::Value ***v137;
  _QWORD *v138;
  uint64_t v139;
  llvm::Value *v140;
  llvm::Value ****v141;
  llvm::Value *v142;
  char *v143;
  char *v144;
  unsigned __int8 **v145;
  int v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  char *v150;
  char *v151;
  unsigned __int8 **v152;
  int v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  unsigned __int8 *v156;
  char *v157;
  char *v158;
  unsigned __int8 **v159;
  int v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  unsigned __int8 *v163;
  char *v164;
  char *v165;
  unsigned __int8 **v166;
  int v167;
  unsigned __int8 *v168;
  unsigned __int8 *v169;
  unsigned __int8 *v170;
  char *v171;
  char *v172;
  unsigned __int8 **v173;
  int v174;
  unsigned __int8 *v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  uint64_t v178;
  llvm::PHINode *v179;
  __int16 v180;
  __int16 v181;
  uint64_t v182;
  _QWORD **v183;
  uint64_t *v184;
  uint64_t *v185;
  uint64_t v186;
  llvm::ConstantInt *v187;
  char v188;
  llvm::Value *v189;
  llvm::ConstantInt **v190;
  llvm::BasicBlock *v191;
  llvm::PointerType *v192;
  llvm::Instruction *v193;
  uint64_t ***v194;
  _QWORD v195[4];
  __int16 v196;
  _QWORD v197[4];
  __int16 v198;
  unsigned __int8 *v199;
  void *v200;
  uint64_t v201;
  _BYTE v202[16];
  __int16 v203;
  uint64_t **v204;
  _QWORD **v205;
  uint64_t v206;
  void **v207;
  void **v208;
  uint64_t v209;
  int v210;
  __int16 v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  void *v215;
  void *v216;
  void *v217;
  uint64_t v218;
  _BYTE v219[16];
  __int16 v220;
  uint64_t **v221;
  _QWORD **v222;
  uint64_t v223;
  void **v224;
  void **v225;
  uint64_t v226;
  int v227;
  __int16 v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  void *v233;
  void *v234[2];
  _QWORD v235[17];

  v235[15] = *MEMORY[0x1E0C80C00];
  v2 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
  v3 = *(unsigned __int8 **)(v2 + 32);
  v4 = *(unsigned __int8 **)v2;
  v5 = *(llvm::ConstantInt ***)(v2 + 64);
  v6 = (llvm::AttributeList *)(a1 + 64);
  ParamAlignment = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a1 + 64), 1);
  if (ParamAlignment <= 0x100)
    LOBYTE(ParamAlignment) = 0;
  v188 = ParamAlignment;
  v8 = (unsigned __int16)llvm::AttributeList::getParamAlignment(v6, 0);
  if (v8 <= 0x100)
    v9 = 0;
  else
    v9 = v8;
  v190 = v5;
  v187 = *v5;
  v10 = *(_QWORD *)(a1 + 40);
  v183 = *(_QWORD ***)(v10 + 56);
  v11 = (uint64_t)(v183[5] + 34);
  sub_1C4773D54((uint64_t)v234, a1, 0, 0, 0);
  v192 = (llvm::PointerType *)(*(_QWORD *)v235[6] + 1912);
  v12 = *(_DWORD *)(*(_QWORD *)v3 + 8);
  if ((v12 & 0xFE) == 0x12)
    v12 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v3 + 16) + 8);
  v13 = llvm::PointerType::get(v192, (llvm::Type *)(v12 >> 8));
  v220 = 257;
  v14 = sub_1C4773E38((uint64_t *)v234, 49, v3, v13, (uint64_t)&v217);
  v220 = 257;
  v15 = sub_1C4773E38((uint64_t *)v234, 49, v4, v13, (uint64_t)&v217);
  v16 = operator new(0x80uLL);
  v17 = (uint64_t)(v16 + 16);
  v16[21] = v16[21] & 0x38000000 | 2;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *((_QWORD *)v16 + 3) = v16 + 16;
  *((_QWORD *)v16 + 4) = 0;
  *((_QWORD *)v16 + 5) = 0;
  *((_QWORD *)v16 + 6) = 0;
  *((_QWORD *)v16 + 7) = v16 + 16;
  v217 = "compare_src_dst";
  v220 = 259;
  sub_1C4774CC4(*(_DWORD **)v14);
  v184 = (uint64_t *)v14;
  v185 = (uint64_t *)v15;
  v19 = (llvm *)llvm::CmpInst::CmpInst(v17, v18, 53, 36, (uint64_t)v14, (uint64_t)v15, (uint64_t)&v217, a1, 0);
  v193 = 0;
  v194 = 0;
  llvm::SplitBlockAndInsertIfThenElse(v19, (llvm::Value *)a1, (llvm::Instruction *)&v194, &v193, 0, v20);
  v21 = (uint64_t ***)v194[5];
  v217 = "copy_backwards";
  v220 = 259;
  llvm::Value::setName(v21, (uint64_t)&v217);
  v22 = (uint64_t ***)*((_QWORD *)v193 + 5);
  v217 = "copy_forward";
  v220 = 259;
  v186 = (uint64_t)v22;
  llvm::Value::setName(v22, (uint64_t)&v217);
  v23 = *(uint64_t ****)(a1 + 40);
  v217 = "memmove_done";
  v220 = 259;
  v191 = (llvm::BasicBlock *)v23;
  llvm::Value::setName(v23, (uint64_t)&v217);
  sub_1C4768AD0(v11, (uint64_t)v192);
  v26 = v25 + 7;
  if ((_DWORD)v24 == 1)
  v27 = (v26 >> 3);
  v28 = (v27 | (1 << v188)) & -(v27 | (1 << v188));
  v29 = v27 | (1 << v9);
  v30 = operator new(0x80uLL);
  v30[21] = v30[21] & 0x38000000 | 2;
  *(_QWORD *)v30 = 0;
  *((_QWORD *)v30 + 1) = 0;
  *((_QWORD *)v30 + 2) = 0;
  *((_QWORD *)v30 + 3) = v30 + 16;
  *((_QWORD *)v30 + 4) = 0;
  *((_QWORD *)v30 + 5) = 0;
  *((_QWORD *)v30 + 6) = 0;
  *((_QWORD *)v30 + 7) = v30 + 16;
  v189 = (llvm::Value *)(v30 + 16);
  v31 = __clz(v28);
  v32 = *(_QWORD *)(v10 + 40);
  v182 = (uint64_t)v21;
  if (v32 == v10 + 40)
  {
    v34 = 0;
  }
  else
  {
    if (v32)
      v33 = v32 - 24;
    else
      v33 = 0;
    if (*(unsigned __int8 *)(v33 + 16) - 29 >= 0xB)
      v34 = 0;
    else
      v34 = v33;
  }
  v35 = llvm::ConstantInt::get(v187, 0, 0);
  v217 = "compare_n_to_0";
  v220 = 259;
  sub_1C4774CC4(*v190);
  llvm::CmpInst::CmpInst((uint64_t)v189, v36, 53, 32, (uint64_t)v190, (uint64_t)v35, (uint64_t)&v217, v34, 0);
  v37 = (_QWORD *)**v183;
  v217 = "copy_backwards_loop";
  v220 = 259;
  v38 = (uint64_t **)operator new();
  *v38 = (uint64_t *)(*v37 + 1600);
  v38[1] = 0;
  v39 = *((_DWORD *)v38 + 5) & 0xC0000000;
  *((_DWORD *)v38 + 4) = 22;
  *((_DWORD *)v38 + 5) = v39;
  v38[3] = 0;
  v40 = v38 + 3;
  v38[4] = 0;
  v38[5] = (uint64_t *)(v38 + 5);
  v38[6] = (uint64_t *)(v38 + 5);
  v38[7] = 0;
  if (v186)
    v41 = (uint64_t *)(v186 + 24);
  else
    v41 = (uint64_t *)(v183 + 9);
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v183 + 9), v38);
  v42 = *v41;
  v38[4] = v41;
  *v40 = v42;
  *(_QWORD *)(v42 + 8) = v40;
  *v41 = (uint64_t)v40;
  llvm::Value::setName((uint64_t ***)v38, (uint64_t)&v217);
  v43 = **v38;
  v217 = v219;
  v218 = 0x200000000;
  v223 = v43;
  v224 = &v232;
  v225 = &v233;
  v226 = 0;
  v227 = 0;
  v228 = 512;
  v229 = 7;
  v230 = 0;
  v231 = 0;
  v232 = &unk_1E8167888;
  v233 = &unk_1E8167A08;
  v221 = v38;
  v222 = v38 + 5;
  v203 = 257;
  v44 = sub_1C4867E94((uint64_t)&v217, (uint64_t)v187, 0, (uint64_t)&v200);
  v45 = llvm::ConstantInt::get(v187, 1, 0);
  v200 = "index_ptr";
  v203 = 259;
  v179 = (llvm::PHINode *)v44;
  v46 = sub_1C47733F8((uint64_t)&v217, v44, (uint64_t)v45, (uint64_t)&v200, 0, 0);
  v196 = 257;
  v47 = sub_1C5098FF4((uint64_t *)&v217, v192, v184, v46, (uint64_t)v195);
  v197[0] = "element";
  v198 = 259;
  v48 = (char *)operator new(0x60uLL);
  v49 = v48;
  v50 = (llvm::Value *)(v48 + 32);
  *((_QWORD *)v48 + 2) = 0;
  *((_QWORD *)v48 + 3) = v48 + 32;
  v203 = 257;
  *((_QWORD *)v48 + 4) = v192;
  *((_QWORD *)v48 + 5) = 0;
  v51 = (uint64_t *)(v48 + 40);
  *((_WORD *)v48 + 24) = 60;
  *((_DWORD *)v48 + 13) = 1;
  *(_OWORD *)(v48 + 56) = 0u;
  *(_OWORD *)(v48 + 72) = 0u;
  *((_DWORD *)v48 + 22) = 0;
  *(_QWORD *)v48 = v47;
  *((_QWORD *)v48 + 1) = 0;
  if (v47)
  {
    v54 = v47[1];
    v53 = v47 + 1;
    v52 = v54;
    *((_QWORD *)v48 + 1) = v54;
    if (v54)
      v52[2] = (uint64_t *)(v48 + 8);
    *((_QWORD *)v48 + 2) = v53;
    *v53 = v48;
  }
  v55 = v29 & -v29;
  v181 = (126 - 2 * v31) & 0x7E;
  *((_WORD *)v48 + 25) = v181;
  v48[92] = 1;
  llvm::Value::setName((uint64_t ***)v48 + 4, (uint64_t)&v200);
  (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v225 + 2))(v225, v50, v197, v221, v222);
  if ((_DWORD)v218)
  {
    v150 = (char *)v217;
    v151 = (char *)v217 + 16 * v218;
    v152 = (unsigned __int8 **)(v49 + 80);
    do
    {
      v153 = *(_DWORD *)v150;
      v154 = (unsigned __int8 *)*((_QWORD *)v150 + 1);
      if (v154)
      {
        if (!v153)
        {
          v199 = (unsigned __int8 *)*((_QWORD *)v150 + 1);
          llvm::MetadataTracking::track((uint64_t)&v199, v154, 2);
          v155 = *v152;
          goto LABEL_127;
        }
      }
      else
      {
        v155 = *v152;
        if (!*v152 && (v49[55] & 0x20) == 0)
          goto LABEL_124;
        if (!v153)
        {
          v199 = 0;
LABEL_127:
          if (v155)
            llvm::MetadataTracking::untrack((uint64_t)(v49 + 80), v155);
          v156 = v199;
          *v152 = v199;
          if (v156)
            llvm::MetadataTracking::retrack((uint64_t)&v199, v156, (uint64_t)(v49 + 80));
          goto LABEL_124;
        }
      }
      llvm::Value::setMetadata(v50, *(_DWORD *)v150, (llvm::MDNode *)v154);
LABEL_124:
      v150 += 16;
    }
    while (v150 != v151);
  }
  v56 = __clz(v55);
  v198 = 257;
  v57 = sub_1C5098FF4((uint64_t *)&v217, v192, v185, v46, (uint64_t)v197);
  v58 = (char *)operator new(0x80uLL);
  v59 = v58;
  *((_DWORD *)v58 + 21) = *((_DWORD *)v58 + 21) & 0x38000000 | 2;
  *(_QWORD *)v58 = 0;
  *((_QWORD *)v58 + 2) = 0;
  *((_QWORD *)v58 + 1) = 0;
  *((_QWORD *)v58 + 5) = 0;
  *((_QWORD *)v58 + 6) = 0;
  *((_QWORD *)v58 + 4) = 0;
  *((_QWORD *)v58 + 8) = ***(_QWORD ***)v50 + 1576;
  v60 = (llvm::Value *)(v58 + 64);
  *((_QWORD *)v58 + 3) = v58 + 64;
  *((_QWORD *)v58 + 7) = v58 + 64;
  *((_QWORD *)v58 + 9) = 0;
  v58[80] = 61;
  v58[81] = 0;
  *((_DWORD *)v58 + 21) = 2;
  *(_OWORD *)(v58 + 88) = 0u;
  *(_OWORD *)(v58 + 104) = 0u;
  *((_DWORD *)v58 + 30) = 0;
  v61 = *v51;
  *(_QWORD *)v58 = v50;
  *((_QWORD *)v58 + 1) = v61;
  if (v61)
    *(_QWORD *)(v61 + 16) = v58 + 8;
  *((_QWORD *)v58 + 2) = v51;
  *v51 = (uint64_t)v58;
  *((_QWORD *)v58 + 4) = v57;
  if (v57)
  {
    v64 = v57[1];
    v63 = v57 + 1;
    v62 = v64;
    *((_QWORD *)v58 + 5) = v64;
    if (v64)
      v62[2] = (uint64_t *)(v58 + 40);
    *((_QWORD *)v58 + 6) = v63;
    *v63 = v58 + 32;
  }
  v180 = (126 - 2 * v56) & 0x7E;
  *((_WORD *)v58 + 41) = v180;
  v58[124] = 1;
  v203 = 257;
  (*((void (**)(void **, llvm::Value *, void **, uint64_t **, _QWORD **))*v225 + 2))(v225, v60, &v200, v221, v222);
  if ((_DWORD)v218)
  {
    v164 = (char *)v217;
    v165 = (char *)v217 + 16 * v218;
    v166 = (unsigned __int8 **)(v59 + 112);
    do
    {
      v167 = *(_DWORD *)v164;
      v168 = (unsigned __int8 *)*((_QWORD *)v164 + 1);
      if (v168)
      {
        if (!v167)
        {
          v195[0] = *((_QWORD *)v164 + 1);
          llvm::MetadataTracking::track((uint64_t)v195, v168, 2);
          v169 = *v166;
          goto LABEL_157;
        }
      }
      else
      {
        v169 = *v166;
        if (!*v166 && (v59[87] & 0x20) == 0)
          goto LABEL_154;
        if (!v167)
        {
          v195[0] = 0;
LABEL_157:
          if (v169)
            llvm::MetadataTracking::untrack((uint64_t)(v59 + 112), v169);
          v170 = (unsigned __int8 *)v195[0];
          *v166 = (unsigned __int8 *)v195[0];
          if (v170)
            llvm::MetadataTracking::retrack((uint64_t)v195, v170, (uint64_t)(v59 + 112));
          goto LABEL_154;
        }
      }
      llvm::Value::setMetadata(v60, *(_DWORD *)v164, (llvm::MDNode *)v168);
LABEL_154:
      v164 += 16;
    }
    while (v164 != v165);
  }
  v65 = llvm::ConstantInt::get(v187, 0, 0);
  v198 = 257;
  v66 = (llvm::Value *)sub_1C4774B48((uint64_t)&v217, 32, v46, (uint64_t)v65, (uint64_t)v197);
  v67 = operator new(0xA0uLL);
  v68 = v67;
  v69 = 0;
  v70 = (llvm::Value *)(v67 + 24);
  v67[29] = v67[29] & 0x38000000 | 3;
  do
  {
    v71 = &v67[v69];
    *v71 = 0;
    v71[1] = 0;
    v71[2] = 0;
    v71[3] = v70;
    v69 += 8;
  }
  while (v69 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v67 + 24), v191, (llvm::BasicBlock *)v38, v66, 0);
  v203 = 257;
  (*((void (**)(void **, llvm::Value *, void **, uint64_t **, _QWORD **))*v225 + 2))(v225, v70, &v200, v221, v222);
  if ((_DWORD)v218)
  {
    v72 = (char *)v217;
    v73 = (char *)v217 + 16 * v218;
    v74 = (unsigned __int8 **)(v68 + 36);
    do
    {
      v75 = *(_DWORD *)v72;
      v76 = (unsigned __int8 *)*((_QWORD *)v72 + 1);
      if (v76)
      {
        if (!v75)
        {
          v195[0] = *((_QWORD *)v72 + 1);
          llvm::MetadataTracking::track((uint64_t)v195, v76, 2);
          v77 = *v74;
          if (!*v74)
          {
LABEL_48:
            v78 = (unsigned __int8 *)v195[0];
            *v74 = (unsigned __int8 *)v195[0];
            if (v78)
              llvm::MetadataTracking::retrack((uint64_t)v195, v78, (uint64_t)(v68 + 36));
            goto LABEL_45;
          }
LABEL_42:
          llvm::MetadataTracking::untrack((uint64_t)(v68 + 36), v77);
          goto LABEL_48;
        }
      }
      else
      {
        v77 = *v74;
        if (!*v74 && (*((_BYTE *)v68 + 119) & 0x20) == 0)
          goto LABEL_45;
        if (!v75)
        {
          v195[0] = 0;
          if (!v77)
            goto LABEL_48;
          goto LABEL_42;
        }
      }
      llvm::Value::setMetadata(v70, *(_DWORD *)v72, (llvm::MDNode *)v76);
LABEL_45:
      v72 += 16;
    }
    while (v72 != v73);
  }
  sub_1C477667C(v179, v46, (uint64_t)v38);
  sub_1C477667C(v179, (uint64_t)v190, v182);
  v79 = (llvm::Instruction *)v194;
  v80 = operator new(0xA0uLL);
  v81 = 0;
  v82 = (llvm::BranchInst *)(v80 + 24);
  v80[29] = v80[29] & 0x38000000 | 3;
  do
  {
    v83 = &v80[v81];
    *v83 = 0;
    v83[1] = 0;
    v83[2] = 0;
    v83[3] = v82;
    v81 += 8;
  }
  while (v81 != 24);
  llvm::BranchInst::BranchInst(v82, v191, (llvm::BasicBlock *)v38, v189, v79);
  v84 = v194;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v194[5] + 5), v194);
  v85 = v84[3];
  v86 = v84[4];
  *v86 = (uint64_t *)v85;
  v85[1] = (uint64_t *)v86;
  v84[3] = 0;
  v84[4] = 0;
  llvm::Value::deleteValue((llvm::Value *)v84);
  v87 = (_QWORD *)**v183;
  v200 = "copy_forward_loop";
  v203 = 259;
  v88 = (uint64_t **)operator new();
  *v88 = (uint64_t *)(*v87 + 1600);
  v88[1] = 0;
  v89 = *((_DWORD *)v88 + 5) & 0xC0000000;
  *((_DWORD *)v88 + 4) = 22;
  *((_DWORD *)v88 + 5) = v89;
  v88[3] = 0;
  v90 = v88 + 3;
  v88[4] = 0;
  v88[5] = (uint64_t *)(v88 + 5);
  v88[6] = (uint64_t *)(v88 + 5);
  v88[7] = 0;
  if (v191)
    v91 = (uint64_t *)((char *)v191 + 24);
  else
    v91 = (uint64_t *)(v183 + 9);
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v183 + 9), v88);
  v92 = *v91;
  v88[4] = v91;
  *v90 = v92;
  *(_QWORD *)(v92 + 8) = v90;
  *v91 = (uint64_t)v90;
  llvm::Value::setName((uint64_t ***)v88, (uint64_t)&v200);
  v93 = **v88;
  v200 = v202;
  v201 = 0x200000000;
  v206 = v93;
  v207 = &v215;
  v208 = &v216;
  v209 = 0;
  v210 = 0;
  v211 = 512;
  v212 = 7;
  v213 = 0;
  v214 = 0;
  v215 = &unk_1E8167888;
  v216 = &unk_1E8167A08;
  v204 = v88;
  v205 = v88 + 5;
  v197[0] = "index_ptr";
  v198 = 259;
  v94 = (_QWORD *)sub_1C4867E94((uint64_t)&v200, (uint64_t)v187, 0, (uint64_t)v197);
  v198 = 257;
  v95 = sub_1C5098FF4((uint64_t *)&v200, v192, v184, (uint64_t)v94, (uint64_t)v197);
  v195[0] = "element";
  v196 = 259;
  v96 = (char *)operator new(0x60uLL);
  v97 = v96;
  v98 = (llvm::Value *)(v96 + 32);
  *((_QWORD *)v96 + 2) = 0;
  *((_QWORD *)v96 + 3) = v96 + 32;
  v198 = 257;
  *((_QWORD *)v96 + 4) = v192;
  *((_QWORD *)v96 + 5) = 0;
  v99 = (uint64_t *)(v96 + 40);
  *((_WORD *)v96 + 24) = 60;
  *((_DWORD *)v96 + 13) = 1;
  *(_OWORD *)(v96 + 56) = 0u;
  *(_OWORD *)(v96 + 72) = 0u;
  *((_DWORD *)v96 + 22) = 0;
  *(_QWORD *)v96 = v95;
  *((_QWORD *)v96 + 1) = 0;
  if (v95)
  {
    v102 = v95[1];
    v101 = v95 + 1;
    v100 = v102;
    *((_QWORD *)v96 + 1) = v102;
    if (v102)
      v100[2] = (uint64_t *)(v96 + 8);
    *((_QWORD *)v96 + 2) = v101;
    *v101 = v96;
  }
  *((_WORD *)v96 + 25) = v181;
  v96[92] = 1;
  llvm::Value::setName((uint64_t ***)v96 + 4, (uint64_t)v197);
  (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v208 + 2))(v208, v98, v195, v204, v205);
  if ((_DWORD)v201)
  {
    v157 = (char *)v200;
    v158 = (char *)v200 + 16 * v201;
    v159 = (unsigned __int8 **)(v97 + 80);
    do
    {
      v160 = *(_DWORD *)v157;
      v161 = (unsigned __int8 *)*((_QWORD *)v157 + 1);
      if (v161)
      {
        if (!v160)
        {
          v199 = (unsigned __int8 *)*((_QWORD *)v157 + 1);
          llvm::MetadataTracking::track((uint64_t)&v199, v161, 2);
          v162 = *v159;
          goto LABEL_142;
        }
      }
      else
      {
        v162 = *v159;
        if (!*v159 && (v97[55] & 0x20) == 0)
          goto LABEL_139;
        if (!v160)
        {
          v199 = 0;
LABEL_142:
          if (v162)
            llvm::MetadataTracking::untrack((uint64_t)(v97 + 80), v162);
          v163 = v199;
          *v159 = v199;
          if (v163)
            llvm::MetadataTracking::retrack((uint64_t)&v199, v163, (uint64_t)(v97 + 80));
          goto LABEL_139;
        }
      }
      llvm::Value::setMetadata(v98, *(_DWORD *)v157, (llvm::MDNode *)v161);
LABEL_139:
      v157 += 16;
    }
    while (v157 != v158);
  }
  v198 = 257;
  v103 = sub_1C5098FF4((uint64_t *)&v200, v192, v185, (uint64_t)v94, (uint64_t)v197);
  v104 = (char *)operator new(0x80uLL);
  v105 = v104;
  *((_DWORD *)v104 + 21) = *((_DWORD *)v104 + 21) & 0x38000000 | 2;
  *(_QWORD *)v104 = 0;
  *((_QWORD *)v104 + 2) = 0;
  *((_QWORD *)v104 + 1) = 0;
  *((_QWORD *)v104 + 5) = 0;
  *((_QWORD *)v104 + 6) = 0;
  *((_QWORD *)v104 + 4) = 0;
  *((_QWORD *)v104 + 8) = ***(_QWORD ***)v98 + 1576;
  v106 = (llvm::Value *)(v104 + 64);
  *((_QWORD *)v104 + 3) = v104 + 64;
  *((_QWORD *)v104 + 7) = v104 + 64;
  *((_QWORD *)v104 + 9) = 0;
  v104[80] = 61;
  v104[81] = 0;
  *((_DWORD *)v104 + 21) = 2;
  *(_OWORD *)(v104 + 88) = 0u;
  *(_OWORD *)(v104 + 104) = 0u;
  *((_DWORD *)v104 + 30) = 0;
  v107 = *v99;
  *(_QWORD *)v104 = v98;
  *((_QWORD *)v104 + 1) = v107;
  if (v107)
    *(_QWORD *)(v107 + 16) = v104 + 8;
  *((_QWORD *)v104 + 2) = v99;
  *v99 = (uint64_t)v104;
  *((_QWORD *)v104 + 4) = v103;
  if (v103)
  {
    v110 = v103[1];
    v109 = v103 + 1;
    v108 = v110;
    *((_QWORD *)v104 + 5) = v110;
    if (v110)
      v108[2] = (uint64_t *)(v104 + 40);
    *((_QWORD *)v104 + 6) = v109;
    *v109 = v104 + 32;
  }
  *((_WORD *)v104 + 41) = v180;
  v104[124] = 1;
  v198 = 257;
  (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v208 + 2))(v208, v106, v197, v204, v205);
  if ((_DWORD)v201)
  {
    v171 = (char *)v200;
    v172 = (char *)v200 + 16 * v201;
    v173 = (unsigned __int8 **)(v105 + 112);
    do
    {
      v174 = *(_DWORD *)v171;
      v175 = (unsigned __int8 *)*((_QWORD *)v171 + 1);
      if (v175)
      {
        if (!v174)
        {
          v195[0] = *((_QWORD *)v171 + 1);
          llvm::MetadataTracking::track((uint64_t)v195, v175, 2);
          v176 = *v173;
          goto LABEL_172;
        }
      }
      else
      {
        v176 = *v173;
        if (!*v173 && (v105[87] & 0x20) == 0)
          goto LABEL_169;
        if (!v174)
        {
          v195[0] = 0;
LABEL_172:
          if (v176)
            llvm::MetadataTracking::untrack((uint64_t)(v105 + 112), v176);
          v177 = (unsigned __int8 *)v195[0];
          *v173 = (unsigned __int8 *)v195[0];
          if (v177)
            llvm::MetadataTracking::retrack((uint64_t)v195, v177, (uint64_t)(v105 + 112));
          goto LABEL_169;
        }
      }
      llvm::Value::setMetadata(v106, *(_DWORD *)v171, (llvm::MDNode *)v175);
LABEL_169:
      v171 += 16;
    }
    while (v171 != v172);
  }
  v111 = llvm::ConstantInt::get(v187, 1, 0);
  v195[0] = "index_increment";
  v196 = 259;
  v112 = (llvm::Value *)(*((uint64_t (**)(void **, _QWORD *, llvm::Value **, _QWORD, _QWORD))*v207 + 2))(v207, v94, v111, 0, 0);
  if (!v112)
  {
    v198 = 257;
    v135 = (char *)operator new(0x80uLL);
    v136 = v135;
    *((_QWORD *)v135 + 5) = 0;
    *((_QWORD *)v135 + 6) = 0;
    *((_QWORD *)v135 + 4) = 0;
    v137 = (llvm::Value ***)(v135 + 32);
    *((_QWORD *)v135 + 8) = *v94;
    v112 = (llvm::Value *)(v135 + 64);
    *((_QWORD *)v135 + 3) = v135 + 64;
    *((_QWORD *)v135 + 7) = v135 + 64;
    *((_QWORD *)v135 + 9) = 0;
    v135[80] = 41;
    v135[81] = 0;
    *((_WORD *)v135 + 41) = 0;
    *((_DWORD *)v135 + 21) = 2;
    *(_OWORD *)(v135 + 88) = 0u;
    *(_OWORD *)(v135 + 104) = 0u;
    *((_DWORD *)v135 + 30) = 0;
    *(_QWORD *)v135 = v94;
    v138 = v94 + 1;
    v139 = v94[1];
    *((_QWORD *)v135 + 1) = v139;
    if (v139)
      *(_QWORD *)(v139 + 16) = v135 + 8;
    *((_QWORD *)v135 + 2) = v138;
    *v138 = v135;
    if (*((_QWORD *)v135 + 4))
    {
      **((_QWORD **)v135 + 6) = *((_QWORD *)v135 + 5);
      v178 = *((_QWORD *)v135 + 5);
      if (v178)
        *(_QWORD *)(v178 + 16) = *((_QWORD *)v135 + 6);
    }
    *v137 = v111;
    if (v111)
    {
      v142 = v111[1];
      v141 = (llvm::Value ****)(v111 + 1);
      v140 = v142;
      *((_QWORD *)v135 + 5) = v142;
      if (v142)
        *((_QWORD *)v140 + 2) = v135 + 40;
      *((_QWORD *)v135 + 6) = v141;
      *v141 = v137;
    }
    llvm::Value::setName((uint64_t ***)v135 + 8, (uint64_t)v197);
    (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v208 + 2))(v208, v112, v195, v204, v205);
    if ((_DWORD)v201)
    {
      v143 = (char *)v200;
      v144 = (char *)v200 + 16 * v201;
      v145 = (unsigned __int8 **)(v136 + 112);
      do
      {
        v146 = *(_DWORD *)v143;
        v147 = (unsigned __int8 *)*((_QWORD *)v143 + 1);
        if (v147)
        {
          if (!v146)
          {
            v199 = (unsigned __int8 *)*((_QWORD *)v143 + 1);
            llvm::MetadataTracking::track((uint64_t)&v199, v147, 2);
            v148 = *v145;
            if (!*v145)
            {
LABEL_114:
              v149 = v199;
              *v145 = v199;
              if (v149)
                llvm::MetadataTracking::retrack((uint64_t)&v199, v149, (uint64_t)(v136 + 112));
              goto LABEL_111;
            }
LABEL_108:
            llvm::MetadataTracking::untrack((uint64_t)(v136 + 112), v148);
            goto LABEL_114;
          }
        }
        else
        {
          v148 = *v145;
          if (!*v145 && (v136[87] & 0x20) == 0)
            goto LABEL_111;
          if (!v146)
          {
            v199 = 0;
            if (!v148)
              goto LABEL_114;
            goto LABEL_108;
          }
        }
        llvm::Value::setMetadata(v112, *(_DWORD *)v143, (llvm::MDNode *)v147);
LABEL_111:
        v143 += 16;
      }
      while (v143 != v144);
    }
  }
  v196 = 257;
  v113 = (llvm::Value *)sub_1C4774B48((uint64_t)&v200, 32, (uint64_t)v112, (uint64_t)v190, (uint64_t)v195);
  v114 = operator new(0xA0uLL);
  v115 = v114;
  v116 = 0;
  v117 = (llvm::Value *)(v114 + 24);
  v114[29] = v114[29] & 0x38000000 | 3;
  do
  {
    v118 = &v114[v116];
    *v118 = 0;
    v118[1] = 0;
    v118[2] = 0;
    v118[3] = v117;
    v116 += 8;
  }
  while (v116 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v114 + 24), v191, (llvm::BasicBlock *)v88, v113, 0);
  v198 = 257;
  (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v208 + 2))(v208, v117, v197, v204, v205);
  if ((_DWORD)v201)
  {
    v119 = (char *)v200;
    v120 = (char *)v200 + 16 * v201;
    v121 = (unsigned __int8 **)(v115 + 36);
    do
    {
      v122 = *(_DWORD *)v119;
      v123 = (unsigned __int8 *)*((_QWORD *)v119 + 1);
      if (v123)
      {
        if (!v122)
        {
          v199 = (unsigned __int8 *)*((_QWORD *)v119 + 1);
          llvm::MetadataTracking::track((uint64_t)&v199, v123, 2);
          v124 = *v121;
          if (!*v121)
          {
LABEL_83:
            v125 = v199;
            *v121 = v199;
            if (v125)
              llvm::MetadataTracking::retrack((uint64_t)&v199, v125, (uint64_t)(v115 + 36));
            goto LABEL_80;
          }
LABEL_77:
          llvm::MetadataTracking::untrack((uint64_t)(v115 + 36), v124);
          goto LABEL_83;
        }
      }
      else
      {
        v124 = *v121;
        if (!*v121 && (*((_BYTE *)v115 + 119) & 0x20) == 0)
          goto LABEL_80;
        if (!v122)
        {
          v199 = 0;
          if (!v124)
            goto LABEL_83;
          goto LABEL_77;
        }
      }
      llvm::Value::setMetadata(v117, *(_DWORD *)v119, (llvm::MDNode *)v123);
LABEL_80:
      v119 += 16;
    }
    while (v119 != v120);
  }
  sub_1C477667C((llvm::PHINode *)v94, (uint64_t)v112, (uint64_t)v88);
  v126 = llvm::ConstantInt::get(v187, 0, 0);
  sub_1C477667C((llvm::PHINode *)v94, (uint64_t)v126, v186);
  v127 = v193;
  v128 = operator new(0xA0uLL);
  v129 = 0;
  v130 = (llvm::BranchInst *)(v128 + 24);
  v128[29] = v128[29] & 0x38000000 | 3;
  do
  {
    v131 = &v128[v129];
    *v131 = 0;
    v131[1] = 0;
    v131[2] = 0;
    v131[3] = v130;
    v129 += 8;
  }
  while (v129 != 24);
  llvm::BranchInst::BranchInst(v130, v191, (llvm::BasicBlock *)v88, v189, v127);
  v132 = v193;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v193 + 5) + 40, (uint64_t ***)v193);
  v133 = *((_QWORD *)v132 + 3);
  v134 = (_QWORD *)*((_QWORD *)v132 + 4);
  *v134 = v133;
  *(_QWORD *)(v133 + 8) = v134;
  *((_QWORD *)v132 + 3) = 0;
  *((_QWORD *)v132 + 4) = 0;
  llvm::Value::deleteValue(v132);
  if (v200 != v202)
    free(v200);
  if (v217 != v219)
    free(v217);
  if (v234[0] != v235)
    free(v234[0]);
}

void llvm::expandMemSetAsLoop(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  llvm::ConstantInt **v4;
  uint64_t v5;
  unsigned int ParamAlignment;
  char v7;
  uint64_t v8;
  llvm::APInt *v9;
  unsigned int v10;
  BOOL v11;
  __int16 v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t **v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Value **v28;
  llvm::Value *v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  llvm::Value *v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  unsigned __int8 **v37;
  int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  uint64_t ***v43;
  uint64_t ***v44;
  uint64_t **v45;
  uint64_t **v46;
  const char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  llvm::Value **v54;
  llvm::GetElementPtrInst *v55;
  uint64_t ***v56;
  char *v57;
  char *v58;
  llvm::Value *v59;
  char v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t **v63;
  _QWORD *v64;
  uint64_t **v65;
  llvm::Value **v66;
  llvm::Value *v67;
  llvm::Value *v68;
  _DWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  llvm::Value *v72;
  _QWORD *v73;
  char *v74;
  char *v75;
  unsigned __int8 **v76;
  int v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  char *v81;
  char *v82;
  llvm::Value ***v83;
  _QWORD *v84;
  uint64_t v85;
  llvm::Value *v86;
  llvm::Value ****v87;
  llvm::Value *v88;
  char *v89;
  char *v90;
  unsigned __int8 **v91;
  int v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  char *v96;
  char *v97;
  unsigned __int8 **v98;
  int v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  char v106;
  __int16 v107;
  uint64_t v108;
  llvm::BasicBlock *v109;
  llvm::ConstantInt *v110;
  _QWORD v111[4];
  __int16 v112;
  _BYTE v113[32];
  __int16 v114;
  unsigned __int8 *v115;
  void *v116;
  uint64_t v117;
  _BYTE v118[16];
  __int16 v119;
  uint64_t **v120;
  _QWORD **v121;
  uint64_t v122;
  void **v123;
  void **v124;
  uint64_t v125;
  int v126;
  __int16 v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  char *v133;
  int v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v2 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
  v3 = *(unsigned __int8 **)v2;
  v4 = *(llvm::ConstantInt ***)(v2 + 64);
  v5 = *(_QWORD *)(v2 + 32);
  ParamAlignment = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a1 + 64), 0);
  if (ParamAlignment <= 0x100)
    v7 = 0;
  else
    v7 = ParamAlignment;
  v8 = *(_QWORD *)(v2 + 96);
  v9 = (llvm::APInt *)(v8 + 24);
  v10 = *(_DWORD *)(v8 + 32);
  v106 = v7;
  if (v10 > 0x40)
    v11 = llvm::APInt::countLeadingZerosSlowCase(v9) == v10;
  else
    v11 = *(_QWORD *)v9 == 0;
  v12 = v11;
  v110 = *v4;
  v13 = *(uint64_t **)(a1 + 40);
  v14 = v13[7];
  v105 = *(_QWORD *)(v14 + 40) + 272;
  v133 = "split";
  v136 = 259;
  v15 = llvm::BasicBlock::splitBasicBlock(v13, (uint64_t *)(a1 + 24), (uint64_t)&v133, 0);
  v16 = **(_QWORD ***)v14;
  v133 = "loadstoreloop";
  v136 = 259;
  v17 = (uint64_t **)operator new();
  *v17 = (uint64_t *)(*v16 + 1600);
  v17[1] = 0;
  v18 = *((_DWORD *)v17 + 5) & 0xC0000000;
  *((_DWORD *)v17 + 4) = 22;
  *((_DWORD *)v17 + 5) = v18;
  v17[3] = 0;
  v19 = v17 + 3;
  v17[4] = 0;
  v17[5] = (uint64_t *)(v17 + 5);
  v17[6] = (uint64_t *)(v17 + 5);
  v17[7] = 0;
  v20 = v14 + 72;
  v109 = (llvm::BasicBlock *)v15;
  if (v15)
    v21 = (uint64_t *)(v15 + 24);
  else
    v21 = (uint64_t *)(v14 + 72);
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v20, v17);
  v22 = *v21;
  v17[4] = v21;
  *v19 = v22;
  *(_QWORD *)(v22 + 8) = v19;
  *v21 = (uint64_t)v19;
  llvm::Value::setName((uint64_t ***)v17, (uint64_t)&v133);
  v24 = v13 + 5;
  v23 = (uint64_t *)v13[5];
  if (v23 == v13 + 5)
  {
    v26 = 0;
  }
  else
  {
    if (v23)
      v25 = (uint64_t)(v23 - 3);
    else
      v25 = 0;
    if (*(unsigned __int8 *)(v25 + 16) - 29 >= 0xB)
      v26 = 0;
    else
      v26 = v25;
  }
  v107 = v12 ^ 1;
  sub_1C4773D54((uint64_t)&v133, v26, 0, 0, 0);
  v27 = llvm::PointerType::get(*(llvm::PointerType **)v5, (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v3 + 8) >> 8));
  v119 = 257;
  v104 = (uint64_t *)sub_1C4773E38((uint64_t *)&v133, 49, v3, v27, (uint64_t)&v116);
  v28 = llvm::ConstantInt::get(v110, 0, 0);
  v114 = 257;
  v108 = (uint64_t)v4;
  v29 = (llvm::Value *)sub_1C4774B48((uint64_t)&v133, 32, (uint64_t)v28, (uint64_t)v4, (uint64_t)v113);
  v30 = operator new(0xA0uLL);
  v31 = v30;
  v32 = 0;
  v33 = (llvm::Value *)(v30 + 24);
  v30[29] = v30[29] & 0x38000000 | 3;
  do
  {
    v34 = &v30[v32];
    *v34 = 0;
    v34[1] = 0;
    v34[2] = 0;
    v34[3] = v33;
    v32 += 8;
  }
  while (v32 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v30 + 24), v109, (llvm::BasicBlock *)v17, v29, 0);
  v119 = 257;
  (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v139 + 16))(v139, v33, &v116, v137, v138);
  if (v134)
  {
    v35 = v133;
    v36 = &v133[16 * v134];
    v37 = (unsigned __int8 **)(v31 + 36);
    do
    {
      v38 = *(_DWORD *)v35;
      v39 = (unsigned __int8 *)*((_QWORD *)v35 + 1);
      if (v39)
      {
        if (!v38)
        {
          v111[0] = *((_QWORD *)v35 + 1);
          llvm::MetadataTracking::track((uint64_t)v111, v39, 2);
          v40 = *v37;
          if (!*v37)
          {
LABEL_36:
            v41 = (unsigned __int8 *)v111[0];
            *v37 = (unsigned __int8 *)v111[0];
            if (v41)
              llvm::MetadataTracking::retrack((uint64_t)v111, v41, (uint64_t)(v31 + 36));
            goto LABEL_33;
          }
LABEL_30:
          llvm::MetadataTracking::untrack((uint64_t)(v31 + 36), v40);
          goto LABEL_36;
        }
      }
      else
      {
        v40 = *v37;
        if (!*v37 && (*((_BYTE *)v31 + 119) & 0x20) == 0)
          goto LABEL_33;
        if (!v38)
        {
          v111[0] = 0;
          if (!v40)
            goto LABEL_36;
          goto LABEL_30;
        }
      }
      llvm::Value::setMetadata(v33, *(_DWORD *)v35, (llvm::MDNode *)v39);
LABEL_33:
      v35 += 16;
    }
    while (v35 != v36);
  }
  v42 = (_QWORD *)*v24;
  if ((_QWORD *)*v24 == v24)
  {
    v44 = 0;
  }
  else
  {
    if (v42)
      v43 = (uint64_t ***)(v42 - 3);
    else
      v43 = 0;
    if (*((unsigned __int8 *)v43 + 16) - 29 >= 0xB)
      v44 = 0;
    else
      v44 = v43;
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v44[5] + 5), v44);
  v45 = v44[3];
  v46 = v44[4];
  *v46 = (uint64_t *)v45;
  v45[1] = (uint64_t *)v46;
  v44[3] = 0;
  v44[4] = 0;
  llvm::Value::deleteValue((llvm::Value *)v44);
  sub_1C4768AD0(v105, *(_QWORD *)v5);
  v49 = v48 + 7;
  if ((_DWORD)v47 == 1)
  v50 = **v17;
  v116 = v118;
  v51 = (v49 >> 3) | (unint64_t)(1 << v106);
  v52 = v51 & -(uint64_t)v51;
  v117 = 0x200000000;
  v122 = v50;
  v123 = &v131;
  v124 = &v132;
  v125 = 0;
  v126 = 0;
  v127 = 512;
  v128 = 7;
  v129 = 0;
  v130 = 0;
  v131 = &unk_1E8167888;
  v132 = &unk_1E8167A08;
  v120 = v17;
  v121 = v17 + 5;
  v114 = 257;
  v53 = (_QWORD *)sub_1C4867E94((uint64_t)&v116, (uint64_t)v110, 0, (uint64_t)v113);
  v54 = llvm::ConstantInt::get(v110, 0, 0);
  sub_1C477667C((llvm::PHINode *)v53, (uint64_t)v54, (uint64_t)v13);
  v55 = *(llvm::GetElementPtrInst **)v5;
  v112 = 257;
  v56 = sub_1C5098FF4((uint64_t *)&v116, v55, v104, (uint64_t)v53, (uint64_t)v111);
  v57 = (char *)operator new(0x80uLL);
  v58 = v57;
  *((_DWORD *)v57 + 21) = *((_DWORD *)v57 + 21) & 0x38000000 | 2;
  *(_QWORD *)v57 = 0;
  *((_QWORD *)v57 + 2) = 0;
  *((_QWORD *)v57 + 1) = 0;
  *((_QWORD *)v57 + 5) = 0;
  *((_QWORD *)v57 + 6) = 0;
  *((_QWORD *)v57 + 4) = 0;
  *((_QWORD *)v57 + 8) = ***(_QWORD ***)v5 + 1576;
  v59 = (llvm::Value *)(v57 + 64);
  *((_QWORD *)v57 + 3) = v57 + 64;
  *((_QWORD *)v57 + 7) = v57 + 64;
  v60 = __clz(v52);
  *((_QWORD *)v57 + 9) = 0;
  v57[80] = 61;
  v57[81] = 0;
  *((_DWORD *)v57 + 21) = 2;
  *(_OWORD *)(v57 + 88) = 0u;
  *(_OWORD *)(v57 + 104) = 0u;
  *((_DWORD *)v57 + 30) = 0;
  v61 = (_QWORD *)(v5 + 8);
  v62 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)v57 = v5;
  *((_QWORD *)v57 + 1) = v62;
  if (v62)
    *(_QWORD *)(v62 + 16) = v57 + 8;
  *((_QWORD *)v57 + 2) = v61;
  *v61 = v57;
  *((_QWORD *)v57 + 4) = v56;
  if (v56)
  {
    v65 = v56[1];
    v64 = v56 + 1;
    v63 = v65;
    *((_QWORD *)v57 + 5) = v65;
    if (v65)
      v63[2] = (uint64_t *)(v57 + 40);
    *((_QWORD *)v57 + 6) = v64;
    *v64 = v57 + 32;
  }
  *((_WORD *)v57 + 41) = (126 - 2 * v60) & 0x7E | v107;
  v57[124] = 1;
  v114 = 257;
  (*((void (**)(void **, llvm::Value *, _BYTE *, uint64_t **, _QWORD **))*v124 + 2))(v124, v59, v113, v120, v121);
  if ((_DWORD)v117)
  {
    v96 = (char *)v116;
    v97 = (char *)v116 + 16 * v117;
    v98 = (unsigned __int8 **)(v58 + 112);
    do
    {
      v99 = *(_DWORD *)v96;
      v100 = (unsigned __int8 *)*((_QWORD *)v96 + 1);
      if (v100)
      {
        if (!v99)
        {
          v115 = (unsigned __int8 *)*((_QWORD *)v96 + 1);
          llvm::MetadataTracking::track((uint64_t)&v115, v100, 2);
          v101 = *v98;
          goto LABEL_111;
        }
      }
      else
      {
        v101 = *v98;
        if (!*v98 && (v58[87] & 0x20) == 0)
          goto LABEL_108;
        if (!v99)
        {
          v115 = 0;
LABEL_111:
          if (v101)
            llvm::MetadataTracking::untrack((uint64_t)(v58 + 112), v101);
          v102 = v115;
          *v98 = v115;
          if (v102)
            llvm::MetadataTracking::retrack((uint64_t)&v115, v102, (uint64_t)(v58 + 112));
          goto LABEL_108;
        }
      }
      llvm::Value::setMetadata(v59, *(_DWORD *)v96, (llvm::MDNode *)v100);
LABEL_108:
      v96 += 16;
    }
    while (v96 != v97);
  }
  v66 = llvm::ConstantInt::get(v110, 1, 0);
  v112 = 257;
  v67 = (llvm::Value *)(*((uint64_t (**)(void **, _QWORD *, llvm::Value **, _QWORD, _QWORD))*v123 + 2))(v123, v53, v66, 0, 0);
  if (!v67)
  {
    v114 = 257;
    v81 = (char *)operator new(0x80uLL);
    v82 = v81;
    *((_QWORD *)v81 + 5) = 0;
    *((_QWORD *)v81 + 6) = 0;
    *((_QWORD *)v81 + 4) = 0;
    v83 = (llvm::Value ***)(v81 + 32);
    *((_QWORD *)v81 + 8) = *v53;
    v67 = (llvm::Value *)(v81 + 64);
    *((_QWORD *)v81 + 3) = v81 + 64;
    *((_QWORD *)v81 + 7) = v81 + 64;
    *((_QWORD *)v81 + 9) = 0;
    v81[80] = 41;
    v81[81] = 0;
    *((_WORD *)v81 + 41) = 0;
    *((_DWORD *)v81 + 21) = 2;
    *(_OWORD *)(v81 + 88) = 0u;
    *(_OWORD *)(v81 + 104) = 0u;
    *((_DWORD *)v81 + 30) = 0;
    *(_QWORD *)v81 = v53;
    v84 = v53 + 1;
    v85 = v53[1];
    *((_QWORD *)v81 + 1) = v85;
    if (v85)
      *(_QWORD *)(v85 + 16) = v81 + 8;
    *((_QWORD *)v81 + 2) = v84;
    *v84 = v81;
    if (*((_QWORD *)v81 + 4))
    {
      **((_QWORD **)v81 + 6) = *((_QWORD *)v81 + 5);
      v103 = *((_QWORD *)v81 + 5);
      if (v103)
        *(_QWORD *)(v103 + 16) = *((_QWORD *)v81 + 6);
    }
    *v83 = v66;
    if (v66)
    {
      v88 = v66[1];
      v87 = (llvm::Value ****)(v66 + 1);
      v86 = v88;
      *((_QWORD *)v81 + 5) = v88;
      if (v88)
        *((_QWORD *)v86 + 2) = v81 + 40;
      *((_QWORD *)v81 + 6) = v87;
      *v87 = v83;
    }
    llvm::Value::setName((uint64_t ***)v81 + 8, (uint64_t)v113);
    (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v124 + 2))(v124, v67, v111, v120, v121);
    if ((_DWORD)v117)
    {
      v89 = (char *)v116;
      v90 = (char *)v116 + 16 * v117;
      v91 = (unsigned __int8 **)(v82 + 112);
      do
      {
        v92 = *(_DWORD *)v89;
        v93 = (unsigned __int8 *)*((_QWORD *)v89 + 1);
        if (v93)
        {
          if (!v92)
          {
            v115 = (unsigned __int8 *)*((_QWORD *)v89 + 1);
            llvm::MetadataTracking::track((uint64_t)&v115, v93, 2);
            v94 = *v91;
            if (!*v91)
            {
LABEL_98:
              v95 = v115;
              *v91 = v115;
              if (v95)
                llvm::MetadataTracking::retrack((uint64_t)&v115, v95, (uint64_t)(v82 + 112));
              goto LABEL_95;
            }
LABEL_92:
            llvm::MetadataTracking::untrack((uint64_t)(v82 + 112), v94);
            goto LABEL_98;
          }
        }
        else
        {
          v94 = *v91;
          if (!*v91 && (v82[87] & 0x20) == 0)
            goto LABEL_95;
          if (!v92)
          {
            v115 = 0;
            if (!v94)
              goto LABEL_98;
            goto LABEL_92;
          }
        }
        llvm::Value::setMetadata(v67, *(_DWORD *)v89, (llvm::MDNode *)v93);
LABEL_95:
        v89 += 16;
      }
      while (v89 != v90);
    }
  }
  sub_1C477667C((llvm::PHINode *)v53, (uint64_t)v67, (uint64_t)v17);
  v112 = 257;
  v68 = (llvm::Value *)sub_1C4774B48((uint64_t)&v116, 36, (uint64_t)v67, v108, (uint64_t)v111);
  v69 = operator new(0xA0uLL);
  v70 = v69;
  v71 = 0;
  v72 = (llvm::Value *)(v69 + 24);
  v69[29] = v69[29] & 0x38000000 | 3;
  do
  {
    v73 = &v69[v71];
    *v73 = 0;
    v73[1] = 0;
    v73[2] = 0;
    v73[3] = v72;
    v71 += 8;
  }
  while (v71 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v69 + 24), (llvm::BasicBlock *)v17, v109, v68, 0);
  v114 = 257;
  (*((void (**)(void **, llvm::Value *, _BYTE *, uint64_t **, _QWORD **))*v124 + 2))(v124, v72, v113, v120, v121);
  v74 = (char *)v116;
  if ((_DWORD)v117)
  {
    v75 = (char *)v116 + 16 * v117;
    v76 = (unsigned __int8 **)(v70 + 36);
    while (1)
    {
      v77 = *(_DWORD *)v74;
      v78 = (unsigned __int8 *)*((_QWORD *)v74 + 1);
      if (v78)
      {
        if (!v77)
        {
          v115 = (unsigned __int8 *)*((_QWORD *)v74 + 1);
          llvm::MetadataTracking::track((uint64_t)&v115, v78, 2);
          v79 = *v76;
          if (!*v76)
          {
LABEL_71:
            v80 = v115;
            *v76 = v115;
            if (v80)
              llvm::MetadataTracking::retrack((uint64_t)&v115, v80, (uint64_t)(v70 + 36));
            goto LABEL_68;
          }
LABEL_65:
          llvm::MetadataTracking::untrack((uint64_t)(v70 + 36), v79);
          goto LABEL_71;
        }
      }
      else
      {
        v79 = *v76;
        if (!*v76 && (*((_BYTE *)v70 + 119) & 0x20) == 0)
          goto LABEL_68;
        if (!v77)
        {
          v115 = 0;
          if (!v79)
            goto LABEL_71;
          goto LABEL_65;
        }
      }
      llvm::Value::setMetadata(v72, *(_DWORD *)v74, (llvm::MDNode *)v78);
LABEL_68:
      v74 += 16;
      if (v74 == v75)
      {
        v74 = (char *)v116;
        break;
      }
    }
  }
  if (v74 != v118)
    free(v74);
  if (v133 != (char *)&v135)
    free(v133);
}

void llvm::expandAtomicMemCpyAsLoop(_DWORD *a1, _QWORD *a2)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  llvm::AttributeList *v9;
  unsigned int ParamAlignment;
  char v11;
  unsigned int v12;
  char v13;
  __int16 isVolatile;
  __int16 v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  BOOL v19;

  v4 = &a1[-8 * (a1[5] & 0x7FFFFFF)];
  v5 = *((_QWORD *)v4 + 8);
  v6 = *(unsigned __int8 *)(v5 + 16);
  v7 = (unsigned __int8 *)*((_QWORD *)v4 + 4);
  v8 = *(unsigned __int8 **)v4;
  v9 = (llvm::AttributeList *)(a1 + 16);
  ParamAlignment = (unsigned __int16)llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a1 + 16), 1);
  if (ParamAlignment <= 0x100)
    v11 = 0;
  else
    v11 = ParamAlignment;
  v12 = (unsigned __int16)llvm::AttributeList::getParamAlignment(v9, 0);
  if (v12 <= 0x100)
    v13 = 0;
  else
    v13 = v12;
  isVolatile = llvm::Instruction::isVolatile((llvm::Instruction *)a1);
  v15 = llvm::Instruction::isVolatile((llvm::Instruction *)a1);
  v16 = *(_QWORD *)&a1[-8 * (a1[5] & 0x7FFFFFF) + 24];
  v17 = (unsigned int *)(v16 + 24);
  v18 = *(_DWORD *)(v16 + 32);
  if (v5)
    v19 = v6 == 16;
  else
    v19 = 0;
  if (v19)
  {
    if (v18 >= 0x41)
      v17 = *(unsigned int **)v17;
    llvm::createMemCpyLoopKnownSize((uint64_t)a1, v7, v8, v5, v11, v13, isVolatile, v15, 0, a2, *v17 | 0x100000000);
  }
  else
  {
    if (v18 >= 0x41)
      v17 = *(unsigned int **)v17;
    llvm::createMemCpyLoopUnknownSize((uint64_t)a1, v7, v8, v5, v11, v13, isVolatile, v15, 0, a2, *v17 | 0x100000000);
  }
}

llvm::raw_ostream *sub_1C5F473B4(llvm::raw_ostream *this, uint64_t a2)
{
  _BYTE *v4;
  _QWORD *v5;
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  _BYTE *v11;
  _WORD *v12;
  _BYTE *v13;
  void *v15;
  __int128 v16;
  _QWORD v17[6];

  v17[5] = *MEMORY[0x1E0C80C00];
  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v4)
  {
    llvm::raw_ostream::write(this, "[", 1uLL);
  }
  else
  {
    *v4 = 91;
    ++*((_QWORD *)this + 4);
  }
  v5 = *(_QWORD **)a2;
  v6 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v6)
  {
    while (1)
    {
      v7 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v7)
      {
        llvm::raw_ostream::write(this, "[", 1uLL);
      }
      else
      {
        *v7 = 91;
        ++*((_QWORD *)this + 4);
      }
      v8 = *v5 + 24;
      v15 = v17;
      v16 = xmmword_1C64638D0;
      llvm::APInt::toString(v8, &v15, 0xAu, 1, 0);
      llvm::raw_ostream::write(this, (const char *)v15, v16);
      if (v15 != v17)
        free(v15);
      v9 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v9 > 1uLL)
      {
        *v9 = 8236;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
      }
      v10 = v5[1] + 24;
      v15 = v17;
      v16 = xmmword_1C64638D0;
      llvm::APInt::toString(v10, &v15, 0xAu, 1, 0);
      llvm::raw_ostream::write(this, (const char *)v15, v16);
      if (v15 != v17)
        free(v15);
      v11 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v11)
      {
        llvm::raw_ostream::write(this, "]", 1uLL);
      }
      else
      {
        *v11 = 93;
        ++*((_QWORD *)this + 4);
      }
      v5 += 3;
      if (v5 == v6)
        break;
      v12 = (_WORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v12 > 1uLL)
      {
        *v12 = 8236;
        *((_QWORD *)this + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
      }
    }
  }
  v13 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v13)
  {
    llvm::raw_ostream::write(this, "]", 1uLL);
  }
  else
  {
    *v13 = 93;
    ++*((_QWORD *)this + 4);
  }
  return this;
}

uint64_t sub_1C5F47648(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeLazyValueInfoWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Lower SwitchInst's to branches";
  *(_QWORD *)(v3 + 8) = 30;
  *(_QWORD *)(v3 + 16) = "lowerswitch";
  *(_QWORD *)(v3 + 24) = 11;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F7658;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5F48A98;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5F476E4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F7658;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81A9C58;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED837728);
  if (v3 != -1)
  {
    v7[0] = sub_1C5F47648;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED837728, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5F477AC(uint64_t a1, llvm::LazyValueInfo *a2, char *a3)
{
  llvm::BasicBlock **v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  llvm::BasicBlock **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  uint64_t *v17;
  llvm::BasicBlock *v18;
  uint64_t v19;
  llvm::BasicBlock *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  BOOL v25;
  uint64_t SinglePredecessor;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *i;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t *j;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  __int128 v65;
  _DWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL4 v80;
  int v81;
  unsigned int v82;
  void *v83;
  void *v84;
  void *v85;
  const llvm::APInt *v86;
  unsigned int v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL4 v91;
  int v92;
  unsigned int v93;
  void *v94;
  void *v95;
  void *v96;
  llvm::ConstantInt ***v97;
  llvm::ConstantInt ***v98;
  const llvm::APInt *v99;
  uint64_t v100;
  void *v101;
  _BOOL4 v102;
  char *v103;
  unsigned int v104;
  llvm::BasicBlock *v105;
  uint64_t *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  _QWORD *v123;
  unsigned int v124;
  _QWORD *v125;
  uint64_t v126;
  _QWORD *v127;
  int v128;
  BOOL v129;
  unsigned int v130;
  _QWORD *v131;
  int v132;
  llvm::BasicBlock *v133;
  unsigned int v134;
  int v135;
  uint64_t *v136;
  uint64_t k;
  unint64_t v138;
  __int128 v139;
  int v140;
  uint64_t ****v141;
  _DWORD *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t ***v145;
  llvm::BasicBlock *v146;
  _DWORD *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  BOOL v156;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  llvm::BasicBlock **v170;
  uint64_t v171;
  unsigned int v172;
  llvm::BasicBlock **v173;
  uint64_t v174;
  llvm::BasicBlock **v175;
  llvm::BasicBlock *v176;
  unint64_t *v177;
  unint64_t v178;
  llvm::ValueHandleBase *v180;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v187;
  llvm::ValueHandleBase *v188;
  uint64_t *__p;
  llvm::BasicBlock *v190;
  llvm::BasicBlock *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  llvm::BasicBlock **v195;
  llvm::BasicBlock **v196;
  uint64_t v197;
  int v198;
  _BYTE v199[64];
  void *__s1;
  unsigned int v201;
  void *__s2;
  unsigned int v203;
  void *__src;
  unsigned int v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int v217;
  char *v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  char v223;

  v3 = (llvm::BasicBlock **)v199;
  v195 = (llvm::BasicBlock **)v199;
  v196 = (llvm::BasicBlock **)v199;
  v197 = 8;
  v198 = 0;
  v4 = a1 + 72;
  v5 = *(_QWORD *)(a1 + 80);
  if (v5 != a1 + 72)
  {
    v6 = 0;
    v182 = a1 + 72;
    while (1)
    {
      v7 = v5 - 24;
      v129 = v5 == 0;
      v5 = *(_QWORD *)(v5 + 8);
      if (v129)
        v8 = 0;
      else
        v8 = v7;
      v9 = (llvm::BasicBlock **)sub_1C477672C((uint64_t)&v195, v8);
      if (v196 == v195)
        v10 = (uint64_t *)((char *)&v197 + 4);
      else
        v10 = &v197;
      if (v9 != &v196[*(unsigned int *)v10])
        goto LABEL_10;
      v11 = *(_QWORD *)(v8 + 40);
      if (v11 == v8 + 40)
        goto LABEL_10;
      v12 = v11 ? v11 - 24 : 0;
      v13 = *(unsigned __int8 *)(v12 + 16) - 40;
      v14 = v13 >= 0xFFFFFFF5 ? v12 : 0;
      if (!v11)
        goto LABEL_10;
      if (*(_BYTE *)(v14 + 16) != 31 || v13 < 0xFFFFFFF5)
        goto LABEL_10;
      v16 = *(_DWORD *)(v14 + 20);
      if ((v16 & 0x40000000) != 0)
        v17 = *(uint64_t **)(v14 - 8);
      else
        v17 = (uint64_t *)(v14 - 32 * (v16 & 0x7FFFFFF));
      v18 = *(llvm::BasicBlock **)(v14 + 40);
      v193 = *v17;
      v190 = (llvm::BasicBlock *)v17[4];
      v191 = v18;
      v187 = *((_QWORD *)v18 + 7);
      v19 = *(_QWORD *)(v187 + 80);
      if (v19)
        v20 = (llvm::BasicBlock *)(v19 - 24);
      else
        v20 = 0;
      if (v18 != v20)
      {
        v21 = *(_QWORD *)(v14 + 40);
        while (1)
        {
          v21 = *(_QWORD *)(v21 + 8);
          if (!v21)
            break;
          v22 = *(_QWORD *)(v21 + 24);
          v23 = *(unsigned __int8 *)(v22 + 16);
          if (v22)
            v24 = v23 >= 0x1C;
          else
            v24 = 0;
          v25 = !v24 || v23 - 29 > 0xA;
          if (!v25)
            goto LABEL_41;
        }
LABEL_73:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v195, (uint64_t)v191);
        goto LABEL_272;
      }
LABEL_41:
      v192 = v14;
      SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v191);
      v27 = v192;
      if ((llvm::BasicBlock *)SinglePredecessor == v191)
        goto LABEL_73;
      v183 = v12;
      v185 = v5;
      v28 = (v16 >> 1) & 0x3FFFFFF;
      v29 = (v28 - 1);
      if (v28 != 1)
      {
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        while (1)
        {
          v35 = *(_DWORD *)(v27 + 20);
          if ((v35 & 0x40000000) != 0)
            v36 = *(_QWORD *)(v27 - 8);
          else
            v36 = v27 - 32 * (v35 & 0x7FFFFFF);
          v37 = (2 * v31 + 3);
          if (v31 == 4294967294)
            v37 = 1;
          v38 = 32 * v37;
          v39 = *(_QWORD *)(v36 + v38);
          if ((v35 & 0x40000000) != 0)
          {
            v41 = *(_QWORD *)(v27 - 8);
            if (v39 != *(_QWORD *)(v41 + 32))
              goto LABEL_53;
          }
          else
          {
            v40 = v35 & 0x7FFFFFF;
            if (v39 != *(_QWORD *)(v192 + 32 - 32 * v40))
            {
              v41 = v27 - 32 * v40;
LABEL_53:
              v42 = *(_QWORD *)(v41 + 32 * ((2 * (_DWORD)v31 + 2) & 0xFFFFFFFE));
              v43 = *(_QWORD *)(v41 + v38);
              if (v33 >= (unint64_t)v32)
              {
                v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)v34) >> 3);
                v45 = v44 + 1;
                if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_339:
                  abort();
                if (0x5555555555555556 * ((v32 - v34) >> 3) > v45)
                  v45 = 0x5555555555555556 * ((v32 - v34) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((v32 - v34) >> 3) >= 0x555555555555555)
                  v46 = 0xAAAAAAAAAAAAAAALL;
                else
                  v46 = v45;
                if (v46)
                {
                  if (v46 > 0xAAAAAAAAAAAAAAALL)
LABEL_340:
                    sub_1C4764EE4();
                  v47 = v34;
                  v48 = (char *)operator new(24 * v46);
                  v34 = v47;
                }
                else
                {
                  v48 = 0;
                }
                v49 = &v48[24 * v44];
                *(_QWORD *)v49 = v42;
                *((_QWORD *)v49 + 1) = v42;
                *((_QWORD *)v49 + 2) = v43;
                for (i = v49; (char *)v33 != v34; v33 -= 24)
                {
                  v51 = *(_OWORD *)(v33 - 24);
                  *((_QWORD *)i - 1) = *(_QWORD *)(v33 - 8);
                  *(_OWORD *)(i - 24) = v51;
                  i -= 24;
                }
                v32 = &v48[24 * v46];
                v33 = (unint64_t)(v49 + 24);
                if (v34)
                  operator delete(v34);
                v34 = i;
                v27 = v192;
              }
              else
              {
                *(_QWORD *)v33 = v42;
                *(_QWORD *)(v33 + 8) = v42;
                *(_QWORD *)(v33 + 16) = v43;
                v33 += 24;
              }
              ++v30;
            }
          }
          if (++v31 == v29)
            goto LABEL_75;
        }
      }
      v34 = 0;
      v33 = 0;
      v30 = 0;
LABEL_75:
      v184 = v30;
      v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - (_QWORD)v34) >> 3);
      v53 = 126 - 2 * __clz(v52);
      if ((char *)v33 == v34)
        v54 = 0;
      else
        v54 = v53;
      v55 = (uint64_t *)v34;
      sub_1C5F49B08((uint64_t)v34, v33, v54, 1);
      __p = v55;
      if (v52 < 2)
      {
        j = v55;
      }
      else
      {
        v56 = v55 + 3;
        v57 = v55;
        for (j = v55; v56 != (_QWORD *)v33; v56 += 3)
        {
          v59 = *v56;
          v60 = *(_DWORD *)(*v56 + 32);
          if (v60 > 0x40)
            v61 = **(_QWORD **)(v59 + 24);
          else
            v61 = (uint64_t)(*(_QWORD *)(v59 + 24) << -(char)v60) >> -(char)v60;
          v62 = v57[1];
          v63 = *(_DWORD *)(v62 + 32);
          if (v63 > 0x40)
            v64 = **(_QWORD **)(v62 + 24);
          else
            v64 = (uint64_t)(*(_QWORD *)(v62 + 24) << -(char)v63) >> -(char)v63;
          if (v61 == v64 + 1 && v57[2] == v56[2])
          {
            v57[1] = v56[1];
          }
          else
          {
            if (v56 - 3 != v57)
            {
              v65 = *(_OWORD *)v56;
              v57[5] = v56[2];
              *(_OWORD *)(v57 + 3) = v65;
            }
            v57 += 3;
          }
        }
        if (v57 + 3 != (uint64_t *)v33)
          v33 = (unint64_t)(v57 + 3);
      }
      if (j == (uint64_t *)v33)
      {
        v66 = operator new(0x60uLL);
        v66[13] = v66[13] & 0x38000000 | 1;
        *(_QWORD *)v66 = 0;
        *((_QWORD *)v66 + 1) = 0;
        *((_QWORD *)v66 + 2) = 0;
        *((_QWORD *)v66 + 3) = v66 + 8;
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v66 + 8), v190, v191);
        sub_1C5F48BA8((uint64_t)v190, (uint64_t)v191, (uint64_t)v191, -1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v192 + 40) + 40, (uint64_t ***)v192);
        v67 = *(_QWORD *)(v192 + 24);
        v68 = *(_QWORD **)(v192 + 32);
        *v68 = v67;
        *(_QWORD *)(v67 + 8) = v68;
        *(_QWORD *)(v192 + 24) = 0;
        *(_QWORD *)(v192 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v192);
        v4 = v182;
        v5 = v185;
        goto LABEL_270;
      }
      if (llvm::BasicBlock::getFirstNonPHIOrDbg(v190, 1)[16] == 35)
      {
        v188 = (llvm::ValueHandleBase *)*v55;
        v180 = *(llvm::ValueHandleBase **)(v33 - 16);
      }
      else
      {
        v69 = v183;
        if (!*(_QWORD *)(v192 + 40))
        {
          if (!v193 || *(unsigned __int8 *)(v193 + 16) < 0x1Cu || (v69 = v193, !*(_QWORD *)(v193 + 40)))
            v69 = 0;
        }
        v218 = (char *)(*(_QWORD *)(v187 + 40) + 272);
        v219 = a3;
        v220 = (char *)v69;
        v221 = 0;
        v222 = 0;
        v223 = 1;
        sub_1C4F83784(v193, 0, (uint64_t *)&v218, &v214);
        llvm::ConstantRange::fromKnownBits((llvm::ConstantRange *)&v214, 0, (uint64_t)&v218);
        llvm::LazyValueInfo::getConstantRange(a2, (llvm::Value *)v193, (llvm::Instruction *)v192, 1, &v210);
        llvm::ConstantRange::intersectWith((uint64_t)&v218, (llvm::ConstantRange *)&v210, 0, (uint64_t)&v206);
        v70 = *v55;
        v71 = *(unsigned int *)(*v55 + 32);
        if (v71 > 0x40)
        {
          v72 = operator new[]();
          memcpy((void *)v72, *(const void **)(v70 + 24), ((unint64_t)(v71 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v72 = *(_QWORD *)(v70 + 24);
        }
        v73 = *(_QWORD *)(v33 - 16);
        v74 = *(unsigned int *)(v73 + 32);
        if (v74 > 0x40)
        {
          v75 = operator new[]();
          memcpy((void *)v75, *(const void **)(v73 + 24), ((unint64_t)(v74 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v75 = *(_QWORD *)(v73 + 24);
        }
        llvm::ConstantRange::getSignedMin((uint64_t)&v206, (llvm::APInt *)&__s2);
        v76 = v203;
        if (v203 > 0x40)
        {
          v158 = v71 - 1;
          v159 = v72;
          if (v71 >= 0x41)
            v159 = *(_QWORD *)(v72 + 8 * (v158 >> 6));
          v77 = __s2;
          v160 = *((_QWORD *)__s2 + ((v203 - 1) >> 6)) & (1 << (v203 - 1));
          if ((v160 != 0) == ((v159 & (1 << v158)) != 0))
          {
            v164 = (((unint64_t)v203 + 63) >> 3) & 0x3FFFFFF8;
            while (v164)
            {
              v165 = *(_QWORD *)((char *)__s2 + v164 - 8);
              v166 = *(_QWORD *)(v72 - 8 + v164);
              v164 -= 8;
              if (v165 != v166)
              {
                if (v165 > v166)
                  v81 = 1;
                else
                  v81 = -1;
                goto LABEL_112;
              }
            }
            v81 = 0;
          }
          else if (v160)
          {
            v81 = -1;
          }
          else
          {
            v81 = 1;
          }
        }
        else
        {
          v77 = __s2;
          v78 = (uint64_t)((_QWORD)__s2 << -(char)v203) >> -(char)v203;
          v79 = v72 << -(char)v203 >> -(char)v203;
          v25 = v78 < v79;
          v80 = v78 > v79;
          if (v25)
            v81 = -1;
          else
            v81 = v80;
        }
LABEL_112:
        if (v81 >= 0)
          v82 = v71;
        else
          v82 = v203;
        v205 = v82;
        if (v82 > 0x40)
        {
          v84 = (void *)operator new[]();
          __src = v84;
          v77 = __s2;
          if (v81 >= 0)
            v85 = (void *)v72;
          else
            v85 = __s2;
          memcpy(v84, v85, (((unint64_t)v205 + 63) >> 3) & 0x3FFFFFF8);
          v76 = v203;
        }
        else
        {
          if (v81 >= 0)
            v83 = (void *)v72;
          else
            v83 = v77;
          __src = v83;
        }
        if (v76 >= 0x41 && v77)
          MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
        llvm::ConstantRange::getSignedMax((llvm::ConstantRange *)&v206, (llvm::APInt *)&__s1);
        v87 = v201;
        if (v201 > 0x40)
        {
          v161 = v74 - 1;
          v162 = v75;
          if (v74 >= 0x41)
            v162 = *(_QWORD *)(v75 + 8 * (v161 >> 6));
          v88 = __s1;
          v163 = *((_QWORD *)__s1 + ((v201 - 1) >> 6)) & (1 << (v201 - 1));
          if ((v163 != 0) == ((v162 & (1 << v161)) != 0))
          {
            v167 = (((unint64_t)v201 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              if (!v167)
              {
                v92 = 0;
                goto LABEL_131;
              }
              v168 = *(_QWORD *)((char *)__s1 + v167 - 8);
              v169 = *(_QWORD *)(v75 - 8 + v167);
              v167 -= 8;
            }
            while (v168 == v169);
            if (v168 > v169)
              v92 = 1;
            else
              v92 = -1;
          }
          else if (v163)
          {
            v92 = -1;
          }
          else
          {
            v92 = 1;
          }
        }
        else
        {
          v88 = __s1;
          v89 = (uint64_t)((_QWORD)__s1 << -(char)v201) >> -(char)v201;
          v90 = v75 << -(char)v201 >> -(char)v201;
          v25 = v89 < v90;
          v91 = v89 > v90;
          if (v25)
            v92 = -1;
          else
            v92 = v91;
        }
LABEL_131:
        if (v92 <= 0)
          v93 = v74;
        else
          v93 = v201;
        v203 = v93;
        if (v93 > 0x40)
        {
          v95 = (void *)operator new[]();
          __s2 = v95;
          v88 = __s1;
          if (v92 <= 0)
            v96 = (void *)v75;
          else
            v96 = __s1;
          memcpy(v95, v96, (((unint64_t)v203 + 63) >> 3) & 0x3FFFFFF8);
          v87 = v201;
        }
        else
        {
          if (v92 <= 0)
            v94 = (void *)v75;
          else
            v94 = v88;
          __s2 = v94;
        }
        v97 = (llvm::ConstantInt ***)v192;
        if (v87 >= 0x41 && v88)
        {
          MEMORY[0x1CAA32F9C](v88, 0x1000C8000313F17);
          v97 = (llvm::ConstantInt ***)v192;
        }
        v98 = v97;
        v188 = llvm::ConstantInt::get(**v97, (llvm::LLVMContext *)&__src, v86);
        v180 = llvm::ConstantInt::get(**v98, (llvm::LLVMContext *)&__s2, v99);
        v201 = v205;
        if (v205 > 0x40)
        {
          __s1 = (void *)operator new[]();
          memcpy(__s1, __src, (((unint64_t)v201 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          __s1 = __src;
        }
        llvm::APInt::operator+=((uint64_t)&__s1, (v184 - 1));
        v100 = v201;
        v101 = __s1;
        v201 = 0;
        if (v100 > 0x40)
        {
          v102 = memcmp(__s1, __s2, ((unint64_t)(v100 + 63) >> 3) & 0x3FFFFFF8) == 0;
          if (v101)
          {
            MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
            if (v201 >= 0x41)
            {
              if (__s1)
                MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
            }
          }
        }
        else
        {
          v102 = __s1 == __s2;
        }
        if (v203 >= 0x41 && __s2)
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        if (v205 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        if (v74 >= 0x41 && v75)
          MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
        if (v71 >= 0x41 && v72)
          MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
        if (v209 >= 0x41 && v208)
          MEMORY[0x1CAA32F9C](v208, 0x1000C8000313F17);
        if (v207 >= 0x41 && v206)
          MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
        if (v213 >= 0x41 && v212)
          MEMORY[0x1CAA32F9C](v212, 0x1000C8000313F17);
        if (v211 >= 0x41 && v210)
          MEMORY[0x1CAA32F9C](v210, 0x1000C8000313F17);
        if (v221 >= 0x41 && v220)
          MEMORY[0x1CAA32F9C](v220, 0x1000C8000313F17);
        if (v219 >= 0x41 && v218)
          MEMORY[0x1CAA32F9C](v218, 0x1000C8000313F17);
        if (v217 >= 0x41 && v216)
          MEMORY[0x1CAA32F9C](v216, 0x1000C8000313F17);
        if (v215 >= 0x41 && v214)
          MEMORY[0x1CAA32F9C](v214, 0x1000C8000313F17);
        v218 = 0;
        v219 = 0;
        v220 = 0;
        if (!v102)
        {
          v105 = v190;
          v133 = v191;
          v145 = (uint64_t ***)v193;
LABEL_252:
          v146 = (llvm::BasicBlock *)sub_1C5F48DE0(__p, (llvm::ConstantInt ****)v33, (uint64_t)v188, (uint64_t)v180, v145, (uint64_t)v133, (uint64_t)v133, v105, &v218);
          if (v146 != v105)
            sub_1C5F48BA8((uint64_t)v105, (uint64_t)v133, 0, -1);
          v147 = operator new(0x60uLL);
          v147[13] = v147[13] & 0x38000000 | 1;
          *(_QWORD *)v147 = 0;
          *((_QWORD *)v147 + 1) = 0;
          *((_QWORD *)v147 + 2) = 0;
          *((_QWORD *)v147 + 3) = v147 + 8;
          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v147 + 8), v146, v133);
          v148 = *(_DWORD *)(v192 + 20);
          v4 = v182;
          v5 = v185;
          if ((v148 & 0x40000000) != 0)
            v149 = *(_QWORD *)(v183 - 8);
          else
            v149 = v183 - 32 * (v148 & 0x7FFFFFF);
          v150 = *(_QWORD *)(v149 + 32);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v191 + 40, (uint64_t ***)v183);
          v151 = *(_QWORD *)(v183 + 24);
          v152 = *(_QWORD **)(v183 + 32);
          *v152 = v151;
          *(_QWORD *)(v151 + 8) = v152;
          *(_QWORD *)(v183 + 24) = 0;
          *(_QWORD *)(v183 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v183);
          v153 = *(_QWORD *)(v150 + 8);
          if (v153)
          {
            while (1)
            {
              v154 = *(_QWORD *)(v153 + 24);
              v155 = *(unsigned __int8 *)(v154 + 16);
              v156 = v154 && v155 >= 0x1C;
              if (v156 && v155 - 29 < 0xB)
                break;
              v153 = *(_QWORD *)(v153 + 8);
              if (!v153)
                goto LABEL_267;
            }
          }
          else
          {
LABEL_267:
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v195, v150);
          }
          goto LABEL_268;
        }
      }
      v214 = 0;
      v215 = 0;
      LODWORD(v216) = 0;
      v103 = (char *)operator new(0x10uLL);
      v104 = 0;
      v105 = 0;
      *(_OWORD *)v103 = xmmword_1C85F76B0;
      v219 = v103 + 16;
      v220 = v103 + 16;
      v218 = v103;
      v106 = __p;
      do
      {
        v107 = *v106;
        v108 = *(_DWORD *)(*v106 + 32);
        if (v108 > 0x40)
          v109 = **(_QWORD **)(v107 + 24);
        else
          v109 = (uint64_t)(*(_QWORD *)(v107 + 24) << -(char)v108) >> -(char)v108;
        v110 = v106[1];
        v111 = *(_DWORD *)(v110 + 32);
        if (v111 > 0x40)
          v112 = **(_QWORD **)(v110 + 24);
        else
          v112 = (uint64_t)(*(_QWORD *)(v110 + 24) << -(char)v111) >> -(char)v111;
        v113 = v219;
        v114 = v219 - 16;
        if (*((_QWORD *)v219 - 2) == v109)
        {
          v219 -= 16;
        }
        else
        {
          *((_QWORD *)v219 - 1) = v109 - 1;
          v114 = v113;
        }
        if (v112 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v194 = v109;
          v115 = v112 + 1;
          if (v114 >= v220)
          {
            v116 = v218;
            v117 = (v114 - v218) >> 4;
            v118 = v117 + 1;
            if ((unint64_t)(v117 + 1) >> 60)
              goto LABEL_339;
            v119 = v220 - v218;
            if ((v220 - v218) >> 3 > v118)
              v118 = v119 >> 3;
            if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF0)
              v120 = 0xFFFFFFFFFFFFFFFLL;
            else
              v120 = v118;
            if (v120)
            {
              if (v120 >> 60)
                goto LABEL_340;
              v121 = (char *)operator new(16 * v120);
            }
            else
            {
              v121 = 0;
            }
            v122 = &v121[16 * v117];
            *(_QWORD *)v122 = v115;
            *((_QWORD *)v122 + 1) = 0x7FFFFFFFFFFFFFFFLL;
            v109 = (uint64_t)(v122 + 16);
            if (v114 == v116)
            {
              v218 = &v121[16 * v117];
              v219 = v122 + 16;
              v220 = &v121[16 * v120];
            }
            else
            {
              do
              {
                *((_OWORD *)v122 - 1) = *((_OWORD *)v114 - 1);
                v122 -= 16;
                v114 -= 16;
              }
              while (v114 != v116);
              v114 = v218;
              v218 = v122;
              v219 = (char *)v109;
              v220 = &v121[16 * v120];
              if (!v114)
                goto LABEL_205;
            }
            operator delete(v114);
          }
          else
          {
            *(_QWORD *)v114 = v115;
            *((_QWORD *)v114 + 1) = 0x7FFFFFFFFFFFFFFFLL;
            v109 = (uint64_t)(v114 + 16);
          }
LABEL_205:
          v219 = (char *)v109;
          LODWORD(v109) = v194;
        }
        v123 = v106 + 2;
        if ((_DWORD)v216)
        {
          v124 = ((*v123 >> 4) ^ (*v123 >> 9)) & (v216 - 1);
          v125 = (_QWORD *)(v214 + 16 * v124);
          v126 = *v125;
          if (*v123 == *v125)
            goto LABEL_221;
          v127 = 0;
          v128 = 1;
          while (v126 != -4096)
          {
            if (v127)
              v129 = 0;
            else
              v129 = v126 == -8192;
            if (v129)
              v127 = v125;
            v130 = v124 + v128++;
            v124 = v130 & (v216 - 1);
            v125 = (_QWORD *)(v214 + 16 * v124);
            v126 = *v125;
            if (*v123 == *v125)
              goto LABEL_221;
          }
          if (v127)
            v131 = v127;
          else
            v131 = v125;
        }
        else
        {
          v131 = 0;
        }
        v125 = sub_1C4DE3FA0((uint64_t)&v214, (uint64_t)(v106 + 2), v106 + 2, v131);
        *v125 = *v123;
        *((_DWORD *)v125 + 2) = 0;
LABEL_221:
        v132 = v112 - v109 + *((_DWORD *)v125 + 2);
        *((_DWORD *)v125 + 2) = v132 + 1;
        if (v132 + 1 > v104)
        {
          v105 = (llvm::BasicBlock *)v106[2];
          v104 = v132 + 1;
        }
        v106 += 3;
      }
      while (v106 != (uint64_t *)v33);
      v133 = v191;
      v134 = ((*(_DWORD *)(v192 + 20) >> 1) & 0x3FFFFFF) - v184;
      if (v134)
      {
        if (v134 <= 1)
          v135 = 1;
        else
          v135 = ((*(_DWORD *)(v192 + 20) >> 1) & 0x3FFFFFF) - v184;
        do
        {
          llvm::BasicBlock::removePredecessor(v190, v191, 0);
          --v135;
        }
        while (v135);
      }
      v136 = __p + 3;
      while ((llvm::BasicBlock *)*(v136 - 1) != v105)
      {
        v129 = v136 == (uint64_t *)v33;
        v136 += 3;
        if (v129)
        {
          k = v192;
          goto LABEL_242;
        }
      }
      v138 = (unint64_t)(v136 - 3);
      for (k = v192; v136 != (uint64_t *)v33; v136 += 3)
      {
        if ((llvm::BasicBlock *)v136[2] != v105)
        {
          v139 = *(_OWORD *)v136;
          *(_QWORD *)(v138 + 16) = v136[2];
          *(_OWORD *)v138 = v139;
          v138 += 24;
        }
      }
      if (v138 != v33)
        v33 = v138;
LABEL_242:
      if (__p != (uint64_t *)v33)
      {
        v140 = *(_DWORD *)(k + 20);
        if ((v140 & 0x40000000) != 0)
          v141 = *(uint64_t *****)(k - 8);
        else
          v141 = (uint64_t ****)(k - 32 * (v140 & 0x7FFFFFF));
        v145 = *v141;
        MEMORY[0x1CAA32FB4](v214, 8);
        goto LABEL_252;
      }
      v142 = operator new(0x60uLL);
      v142[13] = v142[13] & 0x38000000 | 1;
      *(_QWORD *)v142 = 0;
      *((_QWORD *)v142 + 1) = 0;
      *((_QWORD *)v142 + 2) = 0;
      *((_QWORD *)v142 + 3) = v142 + 8;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v142 + 8), v105, v191);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(k + 40) + 40, (uint64_t ***)k);
      v143 = *(_QWORD *)(k + 24);
      v144 = *(_QWORD **)(k + 32);
      *v144 = v143;
      *(_QWORD *)(v143 + 8) = v144;
      *(_QWORD *)(k + 24) = 0;
      *(_QWORD *)(k + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)k);
      while (--v104)
        llvm::BasicBlock::removePredecessor(v105, v191, 0);
      MEMORY[0x1CAA32FB4](v214, 8);
      v4 = v182;
      v5 = v185;
LABEL_268:
      if (v218)
      {
        v219 = v218;
        operator delete(v218);
      }
LABEL_270:
      if (__p)
        operator delete(__p);
LABEL_272:
      v6 = 1;
LABEL_10:
      if (v5 == v4)
      {
        v3 = v195;
        v170 = v196;
        v172 = v197;
        LODWORD(v171) = HIDWORD(v197);
        goto LABEL_320;
      }
    }
  }
  LODWORD(v171) = 0;
  v6 = 0;
  v172 = 8;
  v170 = (llvm::BasicBlock **)v199;
LABEL_320:
  if (v170 == v3)
    v171 = v171;
  else
    v171 = v172;
  v173 = v170;
  if ((_DWORD)v171)
  {
    v174 = 0;
    while ((unint64_t)v170[v174] >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (v171 == ++v174)
        goto LABEL_336;
    }
    v173 = &v170[v174];
  }
  v175 = &v170[v171];
  if (v173 != v175)
  {
    v176 = *v173;
LABEL_331:
    llvm::LazyValueInfo::eraseBlock(a2, v176);
    llvm::DeleteDeadBlock(v176, 0, 0);
    v177 = (unint64_t *)(v173 + 1);
    while (v177 != (unint64_t *)v175)
    {
      v178 = *v177++;
      v176 = (llvm::BasicBlock *)v178;
      if (v178 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v173 = (llvm::BasicBlock **)(v177 - 1);
        goto LABEL_331;
      }
    }
    v3 = v195;
    v170 = v196;
  }
LABEL_336:
  if (v170 != v3)
    free(v170);
  return v6 & 1;
}

uint64_t sub_1C5F48A98()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5F476E4(v0);
}

void sub_1C5F48AC4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5F48AE8(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::LazyValueInfoWrapperPass::ID);
}

uint64_t sub_1C5F48AF8(uint64_t a1, llvm::Function *a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t AnalysisPass;
  llvm::AssumptionCacheTracker *v8;
  char *AssumptionCache;

  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::LazyValueInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::LazyValueInfoWrapperPass::ID);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), llvm::AssumptionCacheTracker::ID, 1);
  if (AnalysisPass
    && (v8 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::AssumptionCacheTracker::ID)) != 0)
  {
    AssumptionCache = (char *)llvm::AssumptionCacheTracker::getAssumptionCache(v8, a2);
  }
  else
  {
    AssumptionCache = 0;
  }
  return sub_1C5F477AC((uint64_t)a2, (llvm::LazyValueInfo *)(v6 + 32), AssumptionCache);
}

void sub_1C5F48BA8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 40) == a1 + 40)
    return;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = v4 - 24;
  v6 = v4 ? v4 - 24 : 0;
  if (!v4 || *(_BYTE *)(v6 + 16) != 83)
    return;
  v10 = a3 != 0;
  do
  {
    LODWORD(v11) = 0;
    v12 = *(_DWORD *)(v5 + 20);
    v13 = v12 & 0x7FFFFFF;
    if (!a3 || !(_DWORD)v13)
      goto LABEL_19;
    v11 = 0;
    v14 = v5 - 32 * v13;
    while ((v12 & 0x40000000) == 0)
    {
      v15 = *(unsigned int *)(v5 + 60);
      if (*(_QWORD *)(v14 + 32 * v15 + 8 * v11) == a2)
        goto LABEL_18;
LABEL_15:
      if (v13 == ++v11)
      {
        LODWORD(v11) = v12 & 0x7FFFFFF;
        goto LABEL_19;
      }
    }
    v15 = *(unsigned int *)(v5 + 60);
    if (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 32 * v15 + 8 * v11) != a2)
      goto LABEL_15;
    v14 = *(_QWORD *)(v5 - 8);
LABEL_18:
    *(_QWORD *)(v14 + 32 * v15 + 8 * v11) = a3;
LABEL_19:
    v27 = v29;
    v28 = 0x800000000;
    if (a4)
    {
      v16 = (v11 + v10);
      if (v16 < v13)
      {
        v17 = 0;
        v18 = v13;
        v19 = a4;
        do
        {
          v20 = *(_DWORD *)(v5 + 20);
          if ((v20 & 0x40000000) != 0)
            v21 = *(_QWORD *)(v5 - 8);
          else
            v21 = v5 - 32 * (v20 & 0x7FFFFFF);
          if (*(_QWORD *)(v21 + 32 * *(unsigned int *)(v5 + 60) + 8 * v16) == a2)
          {
            if (v17 >= HIDWORD(v28))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v17 + 1, 4);
              v17 = v28;
            }
            *((_DWORD *)v27 + v17) = v16;
            v17 = v28 + 1;
            LODWORD(v28) = v28 + 1;
            --v19;
          }
          if (!v19)
            break;
          ++v16;
        }
        while (v16 < v18);
        v22 = v27;
        if (v17)
        {
          v23 = 4 * v17;
          v24 = (char *)v27 - 4;
          do
          {
            llvm::PHINode::removeIncomingValue((llvm::PHINode *)v5, *(_DWORD *)&v24[v23], 1);
            v23 -= 4;
          }
          while (v23);
          v22 = v27;
        }
        if (v22 != v29)
          free(v22);
      }
    }
    v25 = *(_QWORD *)(v5 + 32);
    v5 = v25 - 24;
    if (v25)
      v26 = v25 - 24;
    else
      v26 = 0;
  }
  while (v25 && *(_BYTE *)(v26 + 16) == 83);
}

uint64_t sub_1C5F48DE0(uint64_t *a1, llvm::ConstantInt ****a2, uint64_t a3, uint64_t a4, uint64_t ***a5, uint64_t a6, uint64_t a7, llvm::BasicBlock *a8, char **a9)
{
  unint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  llvm::Type *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Constant *v24;
  llvm::APInt *v25;
  unsigned int v26;
  llvm::BasicBlock *v27;
  llvm::ConstantFP *v28;
  unsigned int v29;
  llvm::Constant *Zero;
  llvm::Constant *v31;
  llvm::Constant *v32;
  llvm::ConstantExpr *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ****v38;
  uint64_t ***v39;
  int v40;
  int v41;
  uint64_t v43;
  void *v44;
  char *v45;
  llvm::ConstantInt ****v46;
  uint64_t v47;
  char *v48;
  llvm::ConstantInt ***v49;
  llvm::ConstantInt *v50;
  uint64_t v51;
  llvm::ConstantInt **v52;
  size_t v53;
  const llvm::APInt *v54;
  llvm::ValueHandleBase *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  _DWORD *v61;
  llvm::Value *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  unsigned int v69;
  llvm::ConstantInt *v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t *v80;
  char *v81;
  llvm::ConstantInt ****v82;
  llvm::ConstantInt ***v83;
  uint64_t v84;
  unsigned int v85;
  char *v86;
  uint64_t ***v87;
  uint64_t **v88;
  _QWORD *v89;
  uint64_t **v90;
  llvm::ConstantInt **v91;
  llvm::ConstantInt *****v92;
  llvm::ConstantInt **v93;
  llvm::BasicBlock *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  _DWORD *v98;
  uint64_t v99;
  llvm::BranchInst *v100;
  _QWORD *v101;
  _DWORD *v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  _DWORD *v107;
  uint64_t v108;
  _DWORD *v109;
  llvm::ValueHandleBase *Add;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  llvm::ValueSymbolTable *v118;
  uint64_t ***v119;
  char *v120;
  uint64_t **v121;
  uint64_t **v122;
  llvm::Value *v123;
  _DWORD *v124;
  uint64_t v125;
  llvm::BasicBlock *v126;
  _DWORD *v127;
  uint64_t v128;
  llvm::BranchInst *v129;
  _QWORD *v130;
  uint64_t i;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t j;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD **v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  llvm::ValueHandleBase *v164;
  llvm::ConstantInt ***v165;
  char *v166;
  void *v167;
  uint64_t v168;
  llvm::BasicBlock *v170;
  llvm::BasicBlock *v171;
  void *__p;
  uint64_t ***v173;
  const char *v175;
  unsigned int v176;
  const char *v177;
  uint64_t **v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  uint64_t v182;
  _QWORD v183[4];

  v183[2] = *MEMORY[0x1E0C80C00];
  v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  if ((_DWORD)v13 != 1)
  {
    v43 = v13 >> 1;
    if (24 * v43)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((3 * v43) & 0x1FFFFFFFFFFFFFFFLL) > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_147;
      v45 = (char *)operator new(24 * v43);
      v170 = (llvm::BasicBlock *)&v45[24 * v43];
      v44 = v45;
      if (v43)
        memmove(v45, a1, 24 * v43);
    }
    else
    {
      v44 = 0;
      v170 = 0;
    }
    v46 = (llvm::ConstantInt ****)&a1[3 * v43];
    v47 = (char *)a2 - (char *)v46;
    if (a2 == v46)
    {
      v166 = 0;
      v167 = 0;
LABEL_31:
      v49 = *v46;
      v50 = ***v46;
      v51 = *((unsigned int *)*v46 + 8);
      v176 = v51;
      __p = v44;
      if (v51 > 0x40)
      {
        v53 = ((unint64_t)(v51 + 63) >> 3) & 0x3FFFFFF8;
        v52 = (llvm::ConstantInt **)operator new[]();
        memcpy(v52, v49[3], v53);
      }
      else
      {
        v52 = v49[3];
      }
      v175 = (const char *)v52;
      llvm::APInt::operator-=((uint64_t)&v175, 1uLL);
      LODWORD(v178) = v176;
      v177 = v175;
      v176 = 0;
      v55 = llvm::ConstantInt::get(v50, (llvm::LLVMContext *)&v177, v54);
      if (v178 >= 0x41 && v177)
        MEMORY[0x1CAA32F9C](v177, 0x1000C8000313F17);
      if (v176 >= 0x41 && v175)
        MEMORY[0x1CAA32F9C](v175, 0x1000C8000313F17);
      v56 = *a9;
      v57 = a9[1];
      v168 = a3;
      v165 = v49;
      if (*a9 != v57)
      {
        v58 = *((_QWORD *)v170 - 2);
        v59 = *(_DWORD *)(v58 + 32);
        v60 = v59 > 0x40 ? **(_QWORD **)(v58 + 24) : (uint64_t)(*(_QWORD *)(v58 + 24) << -(char)v59) >> -(char)v59;
        v68 = v60 + 1;
        v69 = *((_DWORD *)v49 + 8);
        v70 = v69 > 0x40 ? *v49[3] : (llvm::ConstantInt *)((uint64_t)((_QWORD)v49[3] << -(char)v69) >> -(char)v69);
        if ((uint64_t)v70 > v68)
        {
          v71 = (char *)v70 - 1;
          v72 = (v57 - v56) >> 4;
          do
          {
            v73 = v72 >> 1;
            v74 = &v56[16 * (v72 >> 1)];
            v75 = *((_QWORD *)v74 + 1);
            v76 = v74 + 16;
            v72 += ~(v72 >> 1);
            if (v75 < (uint64_t)v71)
              v56 = v76;
            else
              v72 = v73;
          }
          while (v72);
          if (v56 != v57 && *(_QWORD *)v56 <= v68)
            v55 = (llvm::ValueHandleBase *)*((_QWORD *)v170 - 2);
        }
      }
      v164 = v55;
      v163 = *(_QWORD *)(a7 + 56);
      v77 = **a5;
      v177 = "NodeBlock";
      WORD4(v180) = 259;
      v17 = operator new();
      *(_QWORD *)v17 = *v77 + 1600;
      *(_QWORD *)(v17 + 8) = 0;
      v78 = *(_DWORD *)(v17 + 20) & 0xC0000000;
      *(_QWORD *)(v17 + 24) = 0;
      v79 = v17 + 24;
      *(_DWORD *)(v17 + 16) = 22;
      *(_DWORD *)(v17 + 20) = v78;
      v80 = (uint64_t *)(v17 + 40);
      *(_QWORD *)(v17 + 32) = 0;
      *(_QWORD *)(v17 + 40) = v17 + 40;
      *(_QWORD *)(v17 + 48) = v17 + 40;
      *(_QWORD *)(v17 + 56) = 0;
      llvm::Value::setName((uint64_t ***)v17, (uint64_t)&v177);
      v81 = (char *)operator new(0x80uLL);
      *((_DWORD *)v81 + 21) = *((_DWORD *)v81 + 21) & 0x38000000 | 2;
      *(_QWORD *)v81 = 0;
      *((_QWORD *)v81 + 1) = 0;
      *((_QWORD *)v81 + 2) = 0;
      *((_QWORD *)v81 + 3) = v81 + 64;
      *((_QWORD *)v81 + 4) = 0;
      v82 = (llvm::ConstantInt ****)(v81 + 32);
      *((_QWORD *)v81 + 5) = 0;
      *((_QWORD *)v81 + 6) = 0;
      v173 = (uint64_t ***)(v81 + 64);
      *((_QWORD *)v81 + 7) = v81 + 64;
      v83 = *v46;
      v177 = "Pivot";
      WORD4(v180) = 259;
      sub_1C4774CC4(*a5);
      *((_QWORD *)v81 + 8) = v84;
      *((_QWORD *)v81 + 9) = 0;
      v85 = *((_DWORD *)v81 + 21) & 0xC0000000 | 2;
      *((_DWORD *)v81 + 20) = 81;
      *((_DWORD *)v81 + 21) = v85;
      *(_OWORD *)(v81 + 88) = 0u;
      v86 = v81 + 88;
      *(_OWORD *)(v81 + 104) = 0u;
      *((_DWORD *)v81 + 30) = 0;
      if (*(_QWORD *)v81)
      {
        **((_QWORD **)v81 + 2) = *((_QWORD *)v81 + 1);
        v161 = *((_QWORD *)v81 + 1);
        if (v161)
          *(_QWORD *)(v161 + 16) = *((_QWORD *)v81 + 2);
      }
      *(_QWORD *)v81 = a5;
      v87 = a5;
      v90 = a5[1];
      v89 = a5 + 1;
      v88 = v90;
      *((_QWORD *)v81 + 1) = v90;
      if (v90)
        v88[2] = (uint64_t *)(v81 + 8);
      *((_QWORD *)v81 + 2) = v89;
      *v89 = v81;
      if (*((_QWORD *)v81 + 4))
      {
        **((_QWORD **)v81 + 6) = *((_QWORD *)v81 + 5);
        v162 = *((_QWORD *)v81 + 5);
        if (v162)
          *(_QWORD *)(v162 + 16) = *((_QWORD *)v81 + 6);
      }
      *v82 = v83;
      if (v83)
      {
        v93 = v83[1];
        v92 = (llvm::ConstantInt *****)(v83 + 1);
        v91 = v93;
        *((_QWORD *)v81 + 5) = v93;
        if (v93)
          v91[2] = (llvm::ConstantInt *)(v81 + 40);
        *((_QWORD *)v81 + 6) = v92;
        *v92 = v82;
      }
      *((_WORD *)v81 + 41) = 40;
      llvm::Value::setName(v173, (uint64_t)&v177);
      v171 = (llvm::BasicBlock *)sub_1C5F48DE0(__p, v170, v168, v164, v87, v17, a7, a8, a9);
      v94 = (llvm::BasicBlock *)sub_1C5F48DE0(v167, v166, v165, a4, v87, v17, a7, a8, a9);
      v95 = *(uint64_t **)(a7 + 32);
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v163 + 72, (_QWORD *)v17);
      v96 = *v95;
      *(_QWORD *)(v17 + 24) = *v95;
      *(_QWORD *)(v17 + 32) = v95;
      *(_QWORD *)(v96 + 8) = v79;
      *v95 = v79;
      *((_QWORD *)v81 + 13) = v17;
      *(_WORD *)(v17 + 18) &= ~0x8000u;
      if ((v81[87] & 0x10) != 0)
      {
        v117 = *(_QWORD *)(v17 + 56);
        if (v117)
        {
          v118 = *(llvm::ValueSymbolTable **)(v117 + 104);
          if (v118)
            llvm::ValueSymbolTable::reinsertValue(v118, (llvm::Value *)v173);
        }
      }
      v97 = *v80;
      *((_QWORD *)v81 + 11) = *v80;
      *((_QWORD *)v81 + 12) = v80;
      *(_QWORD *)(v97 + 8) = v86;
      *v80 = (uint64_t)v86;
      v98 = operator new(0xA0uLL);
      v99 = 0;
      v100 = (llvm::BranchInst *)(v98 + 24);
      v98[29] = v98[29] & 0x38000000 | 3;
      do
      {
        v101 = &v98[v99];
        *v101 = 0;
        v101[1] = 0;
        v101[2] = 0;
        v101[3] = v100;
        v99 += 8;
      }
      while (v99 != 24);
      llvm::BranchInst::BranchInst(v100, v171, v94, (llvm::Value *)v173, (llvm::BasicBlock *)v17);
      if (v167)
        operator delete(v167);
      if (__p)
        operator delete(__p);
      return v17;
    }
    if (0xAAAAAAAAAAAAAAABLL * (v47 >> 3) <= 0xAAAAAAAAAAAAAAALL)
    {
      v48 = (char *)operator new((char *)a2 - (char *)v46);
      v166 = &v48[8 * (v47 >> 3)];
      v167 = v48;
      if (v46 != a2)
        memmove(v48, v46, (char *)a2 - (char *)v46);
      goto LABEL_31;
    }
LABEL_147:
    abort();
  }
  if (*a1 == a3 && a1[1] == a4)
  {
    v105 = *(_DWORD *)(a4 + 32);
    if (v105 > 0x40)
      v106 = **(_QWORD **)(a4 + 24);
    else
      v106 = (uint64_t)(*(_QWORD *)(a4 + 24) << -(char)v105) >> -(char)v105;
    v115 = *(_DWORD *)(a3 + 32);
    if (v115 > 0x40)
      v116 = **(_QWORD **)(a3 + 24);
    else
      v116 = (uint64_t)(*(_QWORD *)(a3 + 24) << -(char)v115) >> -(char)v115;
    sub_1C5F48BA8(a1[2], a7, a6, v106 - v116);
    return a1[2];
  }
  v15 = *(_QWORD *)(a7 + 56);
  v16 = **a5;
  v177 = "LeafBlock";
  WORD4(v180) = 259;
  v17 = operator new();
  *(_QWORD *)v17 = *v16 + 1600;
  *(_QWORD *)(v17 + 8) = 0;
  v18 = *(_DWORD *)(v17 + 20) & 0xC0000000;
  *(_DWORD *)(v17 + 16) = 22;
  *(_DWORD *)(v17 + 20) = v18;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = v17 + 40;
  *(_QWORD *)(v17 + 48) = v17 + 40;
  *(_QWORD *)(v17 + 56) = 0;
  llvm::Value::setName((uint64_t ***)v17, (uint64_t)&v177);
  v19 = v15 + 72;
  v20 = *(uint64_t **)(a7 + 32);
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v19, (_QWORD *)v17);
  v22 = *v20;
  *(_QWORD *)(v17 + 32) = v20;
  *(_QWORD *)(v17 + 24) = v22;
  *(_QWORD *)(v22 + 8) = v17 + 24;
  *v20 = v17 + 24;
  v24 = (llvm::Constant *)*a1;
  v23 = a1[1];
  if (*a1 == v23)
  {
    v61 = operator new(0x80uLL);
    v61[21] = v61[21] & 0x38000000 | 2;
    v62 = (llvm::Value *)(v61 + 16);
    *(_QWORD *)v61 = 0;
    *((_QWORD *)v61 + 1) = 0;
    *((_QWORD *)v61 + 2) = 0;
    *((_QWORD *)v61 + 3) = v61 + 16;
    *((_QWORD *)v61 + 4) = 0;
    *((_QWORD *)v61 + 5) = 0;
    *((_QWORD *)v61 + 6) = 0;
    *((_QWORD *)v61 + 7) = v61 + 16;
    v63 = *a1;
    v177 = "SwitchLeaf";
    WORD4(v180) = 259;
    sub_1C4774CC4(*a5);
    v65 = v64;
    v66 = (uint64_t)v62;
    v67 = 32;
  }
  else if (v24 == (llvm::Constant *)a3)
  {
    v103 = operator new(0x80uLL);
    v103[21] = v103[21] & 0x38000000 | 2;
    v62 = (llvm::Value *)(v103 + 16);
    *(_QWORD *)v103 = 0;
    *((_QWORD *)v103 + 1) = 0;
    *((_QWORD *)v103 + 2) = 0;
    *((_QWORD *)v103 + 3) = v103 + 16;
    *((_QWORD *)v103 + 4) = 0;
    *((_QWORD *)v103 + 5) = 0;
    *((_QWORD *)v103 + 6) = 0;
    *((_QWORD *)v103 + 7) = v103 + 16;
    v63 = a1[1];
    v177 = "SwitchLeaf";
    WORD4(v180) = 259;
    sub_1C4774CC4(*a5);
    v65 = v104;
    v66 = (uint64_t)v62;
    v67 = 41;
  }
  else
  {
    if (v23 != a4)
    {
      v25 = (llvm::Constant *)((char *)v24 + 24);
      v26 = *((_DWORD *)v24 + 8);
      if (v26 > 0x40)
      {
        v27 = a8;
        if (llvm::APInt::countLeadingZerosSlowCase(v25) != v26)
        {
LABEL_9:
          v28 = *(llvm::ConstantFP **)v24;
          if ((*(_DWORD *)(*(_QWORD *)v24 + 8) & 0xFE) == 0x12)
            v29 = *(unsigned __int8 *)(**((_QWORD **)v28 + 2) + 8);
          else
            v29 = *(_DWORD *)(*(_QWORD *)v24 + 8);
          if (v29 <= 6)
            Zero = llvm::ConstantFP::getZero(v28, (llvm::Type *)1);
          else
            Zero = (llvm::Constant *)llvm::Constant::getNullValue(v28, v21);
          v32 = Zero;
          v33 = llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, v24, v31);
          if (!v33)
          {
            v159 = *(_QWORD ***)v32;
            if (*(_QWORD *)v32)
            {
              v183[0] = v32;
              v183[1] = v24;
              v160 = **v159 + 1512;
              LODWORD(v177) = 15;
              v178 = v183;
              v179 = 2;
              v180 = 0u;
              v181 = 0u;
              v182 = 0;
              v33 = (llvm::ConstantExpr *)sub_1C537D4FC(v160, (uint64_t)v159, (unsigned __int8 *)&v177);
            }
            else
            {
              v33 = 0;
            }
          }
          if ((*((_BYTE *)a5 + 23) & 0x10) == 0)
          {
            v121 = 0;
            v120 = &byte_1C871356D;
            goto LABEL_90;
          }
          v34 = ***a5;
          v35 = *(_QWORD *)(v34 + 152);
          v36 = *(unsigned int *)(v34 + 168);
          if ((_DWORD)v36)
          {
            LODWORD(v37) = (v36 - 1) & ((a5 >> 4) ^ (a5 >> 9));
            v38 = (uint64_t ****)(v35 + 16 * v37);
            v39 = *v38;
            if (*v38 == a5)
            {
LABEL_89:
              v119 = v38[1];
              v122 = *v119;
              v120 = (char *)(v119 + 2);
              v121 = v122;
LABEL_90:
              WORD4(v180) = 773;
              v177 = v120;
              v178 = v121;
              v179 = (uint64_t)".off";
              v123 = llvm::BinaryOperator::Create(13, a5, (uint64_t)v33, (uint64_t)&v177, v17);
              Add = llvm::ConstantExpr::getAdd(v33, (llvm::Constant *)a1[1], 0, 0);
              v124 = operator new(0x80uLL);
              v62 = (llvm::Value *)(v124 + 16);
              v124[21] = v124[21] & 0x38000000 | 2;
              *(_QWORD *)v124 = 0;
              *((_QWORD *)v124 + 1) = 0;
              *((_QWORD *)v124 + 2) = 0;
              *((_QWORD *)v124 + 3) = v124 + 16;
              *((_QWORD *)v124 + 4) = 0;
              *((_QWORD *)v124 + 5) = 0;
              *((_QWORD *)v124 + 6) = 0;
              *((_QWORD *)v124 + 7) = v124 + 16;
              v177 = "SwitchLeaf";
              WORD4(v180) = 259;
              sub_1C4774CC4(*(_DWORD **)v123);
              v112 = v125;
              v113 = (uint64_t)v62;
              v114 = (uint64_t)v123;
              goto LABEL_91;
            }
            v40 = 1;
            while (v39 != (uint64_t ***)-4096)
            {
              v41 = v37 + v40++;
              v37 = v41 & (v36 - 1);
              v39 = *(uint64_t ****)(v35 + 16 * v37);
              if (v39 == a5)
              {
                v38 = (uint64_t ****)(v35 + 16 * v37);
                goto LABEL_89;
              }
            }
          }
          v38 = (uint64_t ****)(v35 + 16 * v36);
          goto LABEL_89;
        }
      }
      else
      {
        v27 = a8;
        if (*(_QWORD *)v25)
          goto LABEL_9;
      }
      v109 = operator new(0x80uLL);
      v109[21] = v109[21] & 0x38000000 | 2;
      v62 = (llvm::Value *)(v109 + 16);
      *(_QWORD *)v109 = 0;
      *((_QWORD *)v109 + 1) = 0;
      *((_QWORD *)v109 + 2) = 0;
      *((_QWORD *)v109 + 3) = v109 + 16;
      *((_QWORD *)v109 + 4) = 0;
      *((_QWORD *)v109 + 5) = 0;
      *((_QWORD *)v109 + 6) = 0;
      *((_QWORD *)v109 + 7) = v109 + 16;
      Add = (llvm::ValueHandleBase *)a1[1];
      v177 = "SwitchLeaf";
      WORD4(v180) = 259;
      sub_1C4774CC4(*a5);
      v112 = v111;
      v113 = (uint64_t)v62;
      v114 = (uint64_t)a5;
LABEL_91:
      llvm::CmpInst::CmpInst(v113, v112, 53, 37, v114, (uint64_t)Add, (uint64_t)&v177, v17);
      goto LABEL_92;
    }
    v107 = operator new(0x80uLL);
    v107[21] = v107[21] & 0x38000000 | 2;
    v62 = (llvm::Value *)(v107 + 16);
    *(_QWORD *)v107 = 0;
    *((_QWORD *)v107 + 1) = 0;
    *((_QWORD *)v107 + 2) = 0;
    *((_QWORD *)v107 + 3) = v107 + 16;
    *((_QWORD *)v107 + 4) = 0;
    *((_QWORD *)v107 + 5) = 0;
    *((_QWORD *)v107 + 6) = 0;
    *((_QWORD *)v107 + 7) = v107 + 16;
    v63 = *a1;
    v177 = "SwitchLeaf";
    WORD4(v180) = 259;
    sub_1C4774CC4(*a5);
    v65 = v108;
    v66 = (uint64_t)v62;
    v67 = 39;
  }
  llvm::CmpInst::CmpInst(v66, v65, 53, v67, (uint64_t)a5, v63, (uint64_t)&v177, v17);
  v27 = a8;
LABEL_92:
  v126 = (llvm::BasicBlock *)a1[2];
  v127 = operator new(0xA0uLL);
  v128 = 0;
  v129 = (llvm::BranchInst *)(v127 + 24);
  v127[29] = v127[29] & 0x38000000 | 3;
  do
  {
    v130 = &v127[v128];
    *v130 = 0;
    v130[1] = 0;
    v130[2] = 0;
    v130[3] = v129;
    v128 += 8;
  }
  while (v128 != 24);
  llvm::BranchInst::BranchInst(v129, v126, v27, v62, (llvm::BasicBlock *)v17);
  if (*((llvm::BasicBlock **)v27 + 5) != (llvm::BasicBlock *)((char *)v27 + 40))
  {
    for (i = *((_QWORD *)v27 + 6); ; i = *(_QWORD *)(v132 + 32))
    {
      v132 = i - 24;
      v133 = i ? i - 24 : 0;
      if (!i || *(_BYTE *)(v133 + 16) != 83)
        break;
      v134 = *(_DWORD *)(i - 4);
      v135 = v134 & 0x7FFFFFF;
      if ((v134 & 0x7FFFFFF) != 0)
      {
        v136 = 0;
        while (1)
        {
          v137 = v132 - 32 * v135;
          if ((v134 & 0x40000000) != 0)
            v137 = *(_QWORD *)(v132 - 8);
          if (*(_QWORD *)(v137 + 32 * *(unsigned int *)(v132 + 60) + 8 * v136) == a7)
            break;
          if (v135 == ++v136)
            goto LABEL_107;
        }
      }
      else
      {
LABEL_107:
        LODWORD(v136) = -1;
      }
      if ((v134 & 0x40000000) != 0)
        v138 = *(_QWORD *)(v132 - 8);
      else
        v138 = v132 - 32 * v135;
      sub_1C477667C((llvm::PHINode *)v132, *(_QWORD *)(v138 + 32 * v136), v17);
    }
  }
  for (j = *((_QWORD *)v126 + 6); ; j = *(_QWORD *)(j + 8))
  {
    v140 = j - 24;
    v141 = j ? j - 24 : 0;
    if (*(_BYTE *)(v141 + 16) != 83)
      break;
    v142 = a1[1];
    v143 = *(_DWORD *)(v142 + 32);
    if (v143 > 0x40)
      v144 = **(_QWORD **)(v142 + 24);
    else
      v144 = (uint64_t)(*(_QWORD *)(v142 + 24) << -(char)v143) >> -(char)v143;
    v145 = *a1;
    v146 = *(_DWORD *)(*a1 + 32);
    if (v146 > 0x40)
      v147 = **(_QWORD **)(v145 + 24);
    else
      v147 = (uint64_t)(*(_QWORD *)(v145 + 24) << -(char)v146) >> -(char)v146;
    v148 = v144 - v147;
    if (v144 != v147)
    {
      v149 = 0;
      do
      {
        v150 = *(_DWORD *)(j - 4);
        v151 = v150 & 0x7FFFFFF;
        if ((v150 & 0x7FFFFFF) != 0)
        {
          v152 = 0;
          while (1)
          {
            v153 = v140 - 32 * v151;
            if ((v150 & 0x40000000) != 0)
              v153 = *(_QWORD *)(j - 32);
            if (*(_QWORD *)(v153 + 32 * *(unsigned int *)(j + 36) + 8 * v152) == a7)
              break;
            if (v151 == ++v152)
              goto LABEL_131;
          }
        }
        else
        {
LABEL_131:
          LODWORD(v152) = -1;
        }
        llvm::PHINode::removeIncomingValue((llvm::PHINode *)(j - 24), v152, 1);
        ++v149;
      }
      while (v149 != v148);
    }
    v154 = *(_DWORD *)(j - 4);
    v155 = v154 & 0x7FFFFFF;
    if ((v154 & 0x7FFFFFF) != 0)
    {
      v156 = 0;
      while (1)
      {
        v157 = v140 - 32 * v155;
        if ((v154 & 0x40000000) != 0)
          v157 = *(_QWORD *)(j - 32);
        if (*(_QWORD *)(v157 + 32 * *(unsigned int *)(j + 36) + 8 * v156) == a7)
          break;
        if (v155 == ++v156)
          goto LABEL_139;
      }
    }
    else
    {
LABEL_139:
      LODWORD(v156) = -1;
    }
    if ((v154 & 0x40000000) != 0)
      v158 = *(_QWORD *)(j - 32);
    else
      v158 = v140 - 32 * v155;
    *(_QWORD *)(v158 + 32 * *(unsigned int *)(j + 36) + 8 * v156) = v17;
  }
  return v17;
}

uint64_t sub_1C5F49B08(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  __int128 v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  __int128 v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  __int128 v185;
  __int128 *v186;
  __int128 *v187;
  __int128 *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  BOOL v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  int64_t v247;
  int64_t v248;
  int64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  unsigned int v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  unsigned int v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unsigned int v298;
  unsigned int v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  uint64_t v303;
  unsigned int v304;
  unsigned int v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  __int128 v328;
  uint64_t v329;
  uint64_t v330;
  unsigned int v331;
  unsigned int v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t v338;
  __int128 v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  _QWORD *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  __int128 v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int v358;
  unsigned int v359;
  uint64_t v360;
  _QWORD *v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v369;
  unsigned int v370;
  unsigned int v371;
  uint64_t v372;
  _QWORD *v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  _QWORD *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unsigned int v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unsigned int v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unint64_t v407;
  unint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unsigned int v411;
  unsigned int v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unsigned int v416;
  unsigned int v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unsigned int v421;
  unsigned int v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  unsigned int v426;
  unsigned int v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unsigned int v431;
  unsigned int v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  unint64_t v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  __int128 v464;
  __int128 v465;
  __int128 v466;
  __int128 v467;
  __int128 v468;
  __int128 v469;
  __int128 v470;
  __int128 v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v181 = *(_QWORD *)(a2 - 24);
        v180 = a2 - 24;
        v179 = v181;
        v182 = *(_QWORD *)(v8 + 8);
        v183 = (_QWORD *)(v182 + 24);
        v184 = *(unsigned int *)(v181 + 32);
        if (v184 > 0x40)
        {
          v409 = *(_QWORD *)(v179 + 24);
          v410 = *(_QWORD *)(v409 + 8 * ((v184 - 1) >> 6)) & (1 << (v184 - 1));
          v411 = *(_DWORD *)(v182 + 32);
          v412 = v411 - 1;
          v413 = *(_QWORD *)(v182 + 24);
          if (v411 >= 0x41)
            v183 = (_QWORD *)(v413 + 8 * (v412 >> 6));
          if ((v410 != 0) == ((*v183 >> v412) & 1))
          {
            v434 = v184 + 63;
            v435 = v413 - 8;
            v436 = (v434 >> 3) & 0x3FFFFFF8;
            v437 = v409 - 8;
            do
            {
              if (!v436)
                return result;
              v438 = *(_QWORD *)(v437 + v436);
              v439 = *(_QWORD *)(v435 + v436);
              v436 -= 8;
            }
            while (v438 == v439);
            if (v438 > v439)
              return result;
          }
          else if (!v410)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v179 + 24) << -(char)v184) >> -(char)v184 >= (uint64_t)(*v183 << -(char)v184) >> -(char)v184)
        {
          return result;
        }
        v474 = *(_QWORD *)(v8 + 16);
        v467 = *(_OWORD *)v8;
        v185 = *(_OWORD *)v180;
        *(_QWORD *)(v8 + 16) = *(_QWORD *)(v180 + 16);
        *(_OWORD *)v8 = v185;
        *(_QWORD *)(v180 + 16) = v474;
        *(_OWORD *)v180 = v467;
        return result;
      case 3:
        return (uint64_t)sub_1C5F4B768((__int128 *)v8, (_QWORD *)(v8 + 24), (_QWORD *)(a2 - 24));
      case 4:
        return (uint64_t)sub_1C5F4C2A4(v8, (_QWORD *)(v8 + 24), (_QWORD *)(v8 + 48), (_QWORD *)(a2 - 24));
      case 5:
        v186 = (__int128 *)(v8 + 24);
        v187 = (__int128 *)(v8 + 48);
        v188 = (__int128 *)(v8 + 72);
        result = (uint64_t)sub_1C5F4C2A4(v8, (_QWORD *)(v8 + 24), (_QWORD *)(v8 + 48), (_QWORD *)(v8 + 72));
        v191 = *(_QWORD *)(a2 - 24);
        v190 = a2 - 24;
        v189 = v191;
        v192 = *(_QWORD *)(v8 + 80);
        v193 = (_QWORD *)(v192 + 24);
        v194 = *(unsigned int *)(v191 + 32);
        if (v194 > 0x40)
        {
          v414 = *(_QWORD *)(v189 + 24);
          v415 = *(_QWORD *)(v414 + 8 * ((v194 - 1) >> 6)) & (1 << (v194 - 1));
          v416 = *(_DWORD *)(v192 + 32);
          v417 = v416 - 1;
          v418 = *(_QWORD *)(v192 + 24);
          if (v416 >= 0x41)
            v193 = (_QWORD *)(v418 + 8 * (v417 >> 6));
          if ((v415 != 0) == ((*v193 >> v417) & 1))
          {
            v440 = v194 + 63;
            v441 = v418 - 8;
            v442 = (v440 >> 3) & 0x3FFFFFF8;
            v443 = v414 - 8;
            do
            {
              if (!v442)
                return result;
              v444 = *(_QWORD *)(v443 + v442);
              v445 = *(_QWORD *)(v441 + v442);
              v442 -= 8;
            }
            while (v444 == v445);
            if (v444 > v445)
              return result;
          }
          else if (!v415)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v189 + 24) << -(char)v194) >> -(char)v194 >= (uint64_t)(*v193 << -(char)v194) >> -(char)v194)
        {
          return result;
        }
        v195 = *v188;
        v196 = *(_QWORD *)(v8 + 88);
        v197 = *(_QWORD *)(v190 + 16);
        *v188 = *(_OWORD *)v190;
        *(_QWORD *)(v8 + 88) = v197;
        *(_QWORD *)(v190 + 16) = v196;
        *(_OWORD *)v190 = v195;
        v198 = *(_QWORD *)(v8 + 72);
        v199 = *(_QWORD *)(v8 + 56);
        v200 = (_QWORD *)(v199 + 24);
        v201 = *(unsigned int *)(v198 + 32);
        if (v201 > 0x40)
        {
          v419 = *(_QWORD *)(v198 + 24);
          v420 = *(_QWORD *)(v419 + 8 * ((v201 - 1) >> 6)) & (1 << (v201 - 1));
          v421 = *(_DWORD *)(v199 + 32);
          v422 = v421 - 1;
          v423 = *(_QWORD *)(v199 + 24);
          if (v421 >= 0x41)
            v200 = (_QWORD *)(v423 + 8 * (v422 >> 6));
          if ((v420 != 0) == ((*v200 >> v422) & 1))
          {
            v446 = v201 + 63;
            v447 = v423 - 8;
            v448 = (v446 >> 3) & 0x3FFFFFF8;
            v449 = v419 - 8;
            do
            {
              if (!v448)
                return result;
              v450 = *(_QWORD *)(v449 + v448);
              v451 = *(_QWORD *)(v447 + v448);
              v448 -= 8;
            }
            while (v450 == v451);
            if (v450 > v451)
              return result;
          }
          else if (!v420)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v198 + 24) << -(char)v201) >> -(char)v201 >= (uint64_t)(*v200 << -(char)v201) >> -(char)v201)
        {
          return result;
        }
        v202 = *(_QWORD *)(v8 + 64);
        v203 = *v187;
        *v187 = *v188;
        *(_QWORD *)(v8 + 64) = *(_QWORD *)(v8 + 88);
        *v188 = v203;
        *(_QWORD *)(v8 + 88) = v202;
        v204 = *(_QWORD *)(v8 + 48);
        v205 = *(_QWORD *)(v8 + 32);
        v206 = (_QWORD *)(v205 + 24);
        v207 = *(unsigned int *)(v204 + 32);
        if (v207 > 0x40)
        {
          v424 = *(_QWORD *)(v204 + 24);
          v425 = *(_QWORD *)(v424 + 8 * ((v207 - 1) >> 6)) & (1 << (v207 - 1));
          v426 = *(_DWORD *)(v205 + 32);
          v427 = v426 - 1;
          v428 = *(_QWORD *)(v205 + 24);
          if (v426 >= 0x41)
            v206 = (_QWORD *)(v428 + 8 * (v427 >> 6));
          if ((v425 != 0) == ((*v206 >> v427) & 1))
          {
            v452 = v207 + 63;
            v453 = v428 - 8;
            v454 = (v452 >> 3) & 0x3FFFFFF8;
            v455 = v424 - 8;
            do
            {
              if (!v454)
                return result;
              v456 = *(_QWORD *)(v455 + v454);
              v457 = *(_QWORD *)(v453 + v454);
              v454 -= 8;
            }
            while (v456 == v457);
            if (v456 > v457)
              return result;
          }
          else if (!v425)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v204 + 24) << -(char)v207) >> -(char)v207 >= (uint64_t)(*v206 << -(char)v207) >> -(char)v207)
        {
          return result;
        }
        v208 = *(_QWORD *)(v8 + 40);
        v209 = *v186;
        *v186 = *v187;
        *(_QWORD *)(v8 + 40) = *(_QWORD *)(v8 + 64);
        *v187 = v209;
        *(_QWORD *)(v8 + 64) = v208;
        v210 = *(_QWORD *)(v8 + 24);
        v211 = *(_QWORD *)(v8 + 8);
        v212 = (_QWORD *)(v211 + 24);
        v213 = *(unsigned int *)(v210 + 32);
        if (v213 > 0x40)
        {
          v429 = *(_QWORD *)(v210 + 24);
          v430 = *(_QWORD *)(v429 + 8 * ((v213 - 1) >> 6)) & (1 << (v213 - 1));
          v431 = *(_DWORD *)(v211 + 32);
          v432 = v431 - 1;
          v433 = *(_QWORD *)(v211 + 24);
          if (v431 >= 0x41)
            v212 = (_QWORD *)(v433 + 8 * (v432 >> 6));
          if ((v430 != 0) == ((*v212 >> v432) & 1))
          {
            v458 = v213 + 63;
            v459 = v433 - 8;
            v460 = (v458 >> 3) & 0x3FFFFFF8;
            v461 = v429 - 8;
            do
            {
              if (!v460)
                return result;
              v462 = *(_QWORD *)(v461 + v460);
              v463 = *(_QWORD *)(v459 + v460);
              v460 -= 8;
            }
            while (v462 == v463);
            if (v462 > v463)
              return result;
          }
          else if (!v430)
          {
            return result;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v210 + 24) << -(char)v213) >> -(char)v213 >= (uint64_t)(*v212 << -(char)v213) >> -(char)v213)
        {
          return result;
        }
        v475 = *(_QWORD *)(v8 + 16);
        v468 = *(_OWORD *)v8;
        *(_OWORD *)v8 = *v186;
        *(_QWORD *)(v8 + 16) = *(_QWORD *)(v8 + 40);
        *v186 = v468;
        *(_QWORD *)(v8 + 40) = v475;
        return result;
      default:
        if (v9 <= 575)
        {
          v214 = v8 + 24;
          v216 = v8 == a2 || v214 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v216)
            {
              v217 = v8;
              while (1)
              {
                v218 = v217;
                v217 = v214;
                v219 = *(_QWORD *)(v218 + 24);
                v220 = *(_QWORD *)(v218 + 8);
                v221 = (_QWORD *)(v220 + 24);
                v222 = *(unsigned int *)(v219 + 32);
                if (v222 <= 0x40)
                  break;
                v237 = *(_QWORD *)(v219 + 24);
                v238 = *(_QWORD *)(v237 + 8 * ((v222 - 1) >> 6)) & (1 << (v222 - 1));
                result = *(unsigned int *)(v220 + 32);
                v239 = result - 1;
                v240 = *(_QWORD *)(v220 + 24);
                if (result >= 0x41)
                  v221 = (_QWORD *)(v240 + 8 * (v239 >> 6));
                if ((v238 != 0) != ((*v221 >> v239) & 1))
                {
                  if (!v238)
                    goto LABEL_241;
                  goto LABEL_225;
                }
                v241 = v222 + 63;
                v242 = v240 - 8;
                v243 = (v241 >> 3) & 0x3FFFFFF8;
                v244 = v237 - 8;
                do
                {
                  if (!v243)
                    goto LABEL_241;
                  v245 = *(_QWORD *)(v244 + v243);
                  v246 = *(_QWORD *)(v242 + v243);
                  v243 -= 8;
                }
                while (v245 == v246);
                if (v245 <= v246)
                  goto LABEL_225;
LABEL_241:
                v214 = v217 + 24;
                if (v217 + 24 == a2)
                  return result;
              }
              if ((uint64_t)(*(_QWORD *)(v219 + 24) << -(char)v222) >> -(char)v222 >= (uint64_t)(*v221 << -(char)v222) >> -(char)v222)
                goto LABEL_241;
LABEL_225:
              v469 = *(_OWORD *)(v218 + 32);
              *(_QWORD *)(v217 + 16) = *(_QWORD *)(v218 + 16);
              *(_OWORD *)v217 = *(_OWORD *)v218;
              v223 = v8;
              if (v218 == v8)
                goto LABEL_240;
              while (1)
              {
                v224 = *(_QWORD *)(v218 - 16);
                v225 = (_QWORD *)(v224 + 24);
                v226 = *(unsigned int *)(v219 + 32);
                if (v226 > 0x40)
                {
                  v227 = *(_QWORD *)(v219 + 24);
                  v228 = *(_QWORD *)(v227 + 8 * ((v226 - 1) >> 6)) & (1 << (v226 - 1));
                  result = *(unsigned int *)(v224 + 32);
                  v229 = result - 1;
                  v230 = *(_QWORD *)(v224 + 24);
                  if (result >= 0x41)
                    v225 = (_QWORD *)(v230 + 8 * (v229 >> 6));
                  if ((v228 != 0) == ((*v225 >> v229) & 1))
                  {
                    v231 = v226 + 63;
                    v232 = v230 - 8;
                    v233 = (v231 >> 3) & 0x3FFFFFF8;
                    v234 = v227 - 8;
                    while (v233)
                    {
                      v235 = *(_QWORD *)(v234 + v233);
                      v236 = *(_QWORD *)(v232 + v233);
                      v233 -= 8;
                      if (v235 != v236)
                      {
                        if (v235 <= v236)
                          goto LABEL_228;
                        break;
                      }
                    }
LABEL_239:
                    v223 = v218;
LABEL_240:
                    *(_QWORD *)v223 = v219;
                    *(_OWORD *)(v223 + 8) = v469;
                    goto LABEL_241;
                  }
                  if (!v228)
                    goto LABEL_239;
                }
                else if ((uint64_t)(*(_QWORD *)(v219 + 24) << -(char)v226) >> -(char)v226 >= (uint64_t)(*v225 << -(char)v226) >> -(char)v226)
                {
                  goto LABEL_239;
                }
LABEL_228:
                *(_OWORD *)v218 = *(_OWORD *)(v218 - 24);
                *(_QWORD *)(v218 + 16) = *(_QWORD *)(v218 - 8);
                v218 -= 24;
                if (v218 == v8)
                {
                  v223 = v8;
                  goto LABEL_240;
                }
              }
            }
            return result;
          }
          if (v216)
            return result;
          while (1)
          {
            v379 = v7;
            v7 = v214;
            v380 = *(_QWORD *)(v379 + 24);
            v381 = *(_QWORD *)(v379 + 8);
            v382 = (_QWORD *)(v381 + 24);
            v383 = *(unsigned int *)(v380 + 32);
            if (v383 > 0x40)
            {
              v399 = *(_QWORD *)(v380 + 24);
              v400 = *(_QWORD *)(v399 + 8 * ((v383 - 1) >> 6)) & (1 << (v383 - 1));
              v401 = *(_DWORD *)(v381 + 32);
              result = v401 - 1;
              v402 = *(_QWORD *)(v381 + 24);
              if (v401 >= 0x41)
                v382 = (_QWORD *)(v402 + 8 * (result >> 6));
              if ((v400 != 0) == ((*v382 >> (v401 - 1)) & 1))
              {
                v403 = v383 + 63;
                v404 = v402 - 8;
                v405 = (v403 >> 3) & 0x3FFFFFF8;
                v406 = v399 - 8;
                while (v405)
                {
                  v407 = *(_QWORD *)(v406 + v405);
                  v408 = *(_QWORD *)(v404 + v405);
                  v405 -= 8;
                  if (v407 != v408)
                  {
                    if (v407 <= v408)
                      goto LABEL_375;
                    goto LABEL_389;
                  }
                }
                goto LABEL_389;
              }
              if (v400)
              {
LABEL_375:
                v471 = *(_OWORD *)(v379 + 32);
                v384 = v7;
                while (1)
                {
LABEL_376:
                  while (1)
                  {
                    v385 = v384;
                    v384 = v379;
                    *(_OWORD *)v385 = *(_OWORD *)v379;
                    *(_QWORD *)(v385 + 16) = *(_QWORD *)(v379 + 16);
                    v379 -= 24;
                    v386 = *(_QWORD *)(v384 - 16);
                    v387 = (_QWORD *)(v386 + 24);
                    v388 = *(unsigned int *)(v380 + 32);
                    if (v388 > 0x40)
                      break;
                    if ((uint64_t)(*(_QWORD *)(v380 + 24) << -(char)v388) >> -(char)v388 >= (uint64_t)(*v387 << -(char)v388) >> -(char)v388)
                      goto LABEL_388;
                  }
                  v389 = *(_QWORD *)(v380 + 24);
                  v390 = *(_QWORD *)(v389 + 8 * ((v388 - 1) >> 6)) & (1 << (v388 - 1));
                  result = *(unsigned int *)(v386 + 32);
                  v391 = result - 1;
                  v392 = *(_QWORD *)(v386 + 24);
                  if (result >= 0x41)
                    v387 = (_QWORD *)(v392 + 8 * (v391 >> 6));
                  if ((v390 != 0) == ((*v387 >> v391) & 1))
                    break;
                  if (!v390)
                    goto LABEL_388;
                }
                v393 = v388 + 63;
                v394 = v392 - 8;
                v395 = (v393 >> 3) & 0x3FFFFFF8;
                v396 = v389 - 8;
                while (v395)
                {
                  v397 = *(_QWORD *)(v396 + v395);
                  v398 = *(_QWORD *)(v394 + v395);
                  v395 -= 8;
                  if (v397 != v398)
                  {
                    if (v397 <= v398)
                      goto LABEL_376;
                    break;
                  }
                }
LABEL_388:
                *(_QWORD *)v384 = v380;
                *(_OWORD *)(v384 + 8) = v471;
              }
            }
            else if ((uint64_t)(*(_QWORD *)(v380 + 24) << -(char)v383) >> -(char)v383 < (uint64_t)(*v382 << -(char)v383) >> -(char)v383)
            {
              goto LABEL_375;
            }
LABEL_389:
            v214 = v7 + 24;
            if (v7 + 24 == a2)
              return result;
          }
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v247 = (unint64_t)(v10 - 2) >> 1;
          v248 = v247;
          while (1)
          {
            v249 = v248;
            if (v247 < v248)
              goto LABEL_294;
            v250 = (2 * v248) | 1;
            v251 = (uint64_t *)(v8 + 24 * v250);
            if (2 * v249 + 2 >= v10)
              goto LABEL_260;
            v252 = *v251;
            v253 = v251[4];
            v254 = (_QWORD *)(v253 + 24);
            v255 = *(unsigned int *)(*v251 + 32);
            if (v255 > 0x40)
              break;
            if ((uint64_t)(*(_QWORD *)(v252 + 24) << -(char)v255) >> -(char)v255 < (uint64_t)(*v254 << -(char)v255) >> -(char)v255)
              goto LABEL_259;
LABEL_260:
            v256 = *v251;
            v257 = *(_QWORD *)(v8 + 24 * v249 + 8);
            v258 = (_QWORD *)(v257 + 24);
            v259 = *(unsigned int *)(*v251 + 32);
            if (v259 > 0x40)
            {
              result = *(_QWORD *)(v256 + 24);
              v297 = *(_QWORD *)(result + 8 * ((v259 - 1) >> 6)) & (1 << (v259 - 1));
              v298 = *(_DWORD *)(v257 + 32);
              v299 = v298 - 1;
              v300 = *(_QWORD *)(v257 + 24);
              if (v298 >= 0x41)
                v301 = (_QWORD *)(v300 + 8 * (v299 >> 6));
              else
                v301 = (_QWORD *)(v257 + 24);
              if ((v297 != 0) == ((*v301 >> v299) & 1))
              {
                v307 = v259 + 63;
                v308 = v300 - 8;
                v309 = (v307 >> 3) & 0x3FFFFFF8;
                result -= 8;
                do
                {
                  if (!v309)
                    goto LABEL_262;
                  v310 = *(_QWORD *)(result + v309);
                  v311 = *(_QWORD *)(v308 + v309);
                  v309 -= 8;
                }
                while (v310 == v311);
                if (v310 <= v311)
                  goto LABEL_294;
              }
              else if (v297)
              {
                goto LABEL_294;
              }
            }
            else
            {
              v260 = -v259;
              result = (uint64_t)(*(_QWORD *)(v256 + 24) << v260) >> v260;
              if (result < (uint64_t)(*v258 << v260) >> v260)
                goto LABEL_294;
            }
LABEL_262:
            v261 = v8 + 24 * v249;
            result = *(_QWORD *)v261;
            v262 = *(_QWORD *)(v261 + 16);
            v263 = v251[2];
            *(_OWORD *)v261 = *(_OWORD *)v251;
            *(_QWORD *)(v261 + 16) = v263;
            while (1)
            {
              if (v247 < v250)
                goto LABEL_293;
              v264 = v251;
              v265 = 2 * v250;
              v250 = (2 * v250) | 1;
              v251 = (uint64_t *)(v8 + 24 * v250);
              v266 = v265 + 2;
              if (v266 < v10)
              {
                v267 = *v251;
                v268 = v251[4];
                v269 = (_QWORD *)(v268 + 24);
                v270 = *(unsigned int *)(*v251 + 32);
                if (v270 <= 0x40)
                {
                  if ((uint64_t)(*(_QWORD *)(v267 + 24) << -(char)v270) >> -(char)v270 >= (uint64_t)(*v269 << -(char)v270) >> -(char)v270)
                    goto LABEL_268;
LABEL_267:
                  v251 += 3;
                  v250 = v266;
                  goto LABEL_268;
                }
                v280 = *(_QWORD *)(v267 + 24);
                v281 = *(_QWORD *)(v280 + 8 * ((v270 - 1) >> 6)) & (1 << (v270 - 1));
                v282 = *(_DWORD *)(v268 + 32);
                v283 = v282 - 1;
                v284 = *(_QWORD *)(v268 + 24);
                if (v282 >= 0x41)
                  v269 = (_QWORD *)(v284 + 8 * (v283 >> 6));
                if ((v281 != 0) == ((*v269 >> v283) & 1))
                {
                  v291 = v270 + 63;
                  v292 = v284 - 8;
                  v293 = (v291 >> 3) & 0x3FFFFFF8;
                  v294 = v280 - 8;
                  do
                  {
                    if (!v293)
                      goto LABEL_268;
                    v295 = *(_QWORD *)(v294 + v293);
                    v296 = *(_QWORD *)(v292 + v293);
                    v293 -= 8;
                  }
                  while (v295 == v296);
                  if (v295 <= v296)
                    goto LABEL_267;
                }
                else if (v281)
                {
                  goto LABEL_267;
                }
              }
LABEL_268:
              v271 = *v251;
              v272 = *(unsigned int *)(*v251 + 32);
              if (v272 <= 0x40)
              {
                if ((uint64_t)(*(_QWORD *)(v271 + 24) << -(char)v272) >> -(char)v272 < (uint64_t)(*v258 << -(char)v272) >> -(char)v272)
                  goto LABEL_292;
                goto LABEL_270;
              }
              v274 = *(_QWORD *)(v271 + 24);
              v275 = *(_QWORD *)(v274 + 8 * ((v272 - 1) >> 6)) & (1 << (v272 - 1));
              v276 = *(_DWORD *)(v257 + 32);
              v277 = v276 - 1;
              v278 = *(_QWORD *)(v257 + 24);
              v279 = (_QWORD *)(v276 >= 0x41 ? v278 + 8 * (v277 >> 6) : v257 + 24);
              if ((v275 != 0) == ((*v279 >> v277) & 1))
                break;
              if (v275)
                goto LABEL_292;
LABEL_270:
              v273 = *(_OWORD *)v251;
              v264[2] = v251[2];
              *(_OWORD *)v264 = v273;
            }
            v285 = v272 + 63;
            v286 = v278 - 8;
            v287 = (v285 >> 3) & 0x3FFFFFF8;
            v288 = v274 - 8;
            do
            {
              if (!v287)
                goto LABEL_270;
              v289 = *(_QWORD *)(v288 + v287);
              v290 = *(_QWORD *)(v286 + v287);
              v287 -= 8;
            }
            while (v289 == v290);
            if (v289 > v290)
              goto LABEL_270;
LABEL_292:
            v251 = v264;
LABEL_293:
            *v251 = result;
            v251[1] = v257;
            v251[2] = v262;
LABEL_294:
            v248 = v249 - 1;
            if (!v249)
            {
LABEL_317:
              v318 = 0;
              v476 = *(_QWORD *)(v8 + 16);
              v470 = *(_OWORD *)v8;
              v319 = (_QWORD *)v8;
              while (1)
              {
                v320 = v319;
                v319 += 3 * v318 + 3;
                v321 = 2 * v318;
                v318 = (2 * v318) | 1;
                v322 = v321 + 2;
                if (v322 < v10)
                {
                  v323 = *v319;
                  v324 = v319[4];
                  v325 = (_QWORD *)(v324 + 24);
                  v326 = *(unsigned int *)(*v319 + 32);
                  if (v326 > 0x40)
                  {
                    v329 = *(_QWORD *)(v323 + 24);
                    v330 = *(_QWORD *)(v329 + 8 * ((v326 - 1) >> 6)) & (1 << (v326 - 1));
                    v331 = *(_DWORD *)(v324 + 32);
                    v332 = v331 - 1;
                    v333 = *(_QWORD *)(v324 + 24);
                    if (v331 >= 0x41)
                      v325 = (_QWORD *)(v333 + 8 * (v332 >> 6));
                    result = (*v325 >> v332) & 1;
                    if ((v330 != 0) == (_DWORD)result)
                    {
                      v334 = v326 + 63;
                      v335 = v333 - 8;
                      result = (v334 >> 3) & 0x3FFFFFF8;
                      v336 = v329 - 8;
                      while (result)
                      {
                        v337 = *(_QWORD *)(v336 + result);
                        v338 = *(_QWORD *)(v335 + result);
                        result -= 8;
                        if (v337 != v338)
                        {
                          if (v337 <= v338)
                            goto LABEL_321;
                          goto LABEL_322;
                        }
                      }
                      goto LABEL_322;
                    }
                    if (v330)
                    {
LABEL_321:
                      v319 += 3;
                      v318 = v322;
                    }
                  }
                  else
                  {
                    v327 = -v326;
                    result = *v325 << v327;
                    if ((uint64_t)(*(_QWORD *)(v323 + 24) << v327) >> v327 < result >> v327)
                      goto LABEL_321;
                  }
                }
LABEL_322:
                v328 = *(_OWORD *)v319;
                v320[2] = v319[2];
                *(_OWORD *)v320 = v328;
                if (v318 > (uint64_t)((unint64_t)(v10 - 2) >> 1))
                {
                  a2 -= 24;
                  if (v319 == (_QWORD *)a2)
                  {
                    v319[2] = v476;
                    *(_OWORD *)v319 = v470;
                  }
                  else
                  {
                    v339 = *(_OWORD *)a2;
                    v319[2] = *(_QWORD *)(a2 + 16);
                    *(_OWORD *)v319 = v339;
                    *(_QWORD *)(a2 + 16) = v476;
                    *(_OWORD *)a2 = v470;
                    v340 = (uint64_t)v319 - v8 + 24;
                    if (v340 >= 25)
                    {
                      v341 = v340 / 0x18uLL - 2;
                      v342 = v341 >> 1;
                      v343 = (uint64_t *)(v8 + 24 * (v341 >> 1));
                      v344 = *v343;
                      v345 = v319[1];
                      v346 = (_QWORD *)(v345 + 24);
                      v347 = *(unsigned int *)(*v343 + 32);
                      if (v347 > 0x40)
                      {
                        result = *(_QWORD *)(v344 + 24);
                        v369 = *(_QWORD *)(result + 8 * ((v347 - 1) >> 6)) & (1 << (v347 - 1));
                        v370 = *(_DWORD *)(v345 + 32);
                        v371 = v370 - 1;
                        v372 = *(_QWORD *)(v345 + 24);
                        if (v370 >= 0x41)
                          v373 = (_QWORD *)(v372 + 8 * (v371 >> 6));
                        else
                          v373 = (_QWORD *)(v345 + 24);
                        if ((v369 != 0) == ((*v373 >> v371) & 1))
                        {
                          v374 = v347 + 63;
                          v375 = v372 - 8;
                          v376 = (v374 >> 3) & 0x3FFFFFF8;
                          result -= 8;
                          while (v376)
                          {
                            v377 = *(_QWORD *)(result + v376);
                            v378 = *(_QWORD *)(v375 + v376);
                            v376 -= 8;
                            if (v377 != v378)
                            {
                              if (v377 <= v378)
                                goto LABEL_338;
                              break;
                            }
                          }
                        }
                        else if (v369)
                        {
LABEL_338:
                          result = *v319;
                          v349 = v319[2];
                          v350 = v343[2];
                          *(_OWORD *)v319 = *(_OWORD *)v343;
                          v319[2] = v350;
                          if (v341 >= 2)
                          {
                            while (1)
                            {
                              v352 = v342 - 1;
                              v342 = (v342 - 1) >> 1;
                              v351 = (uint64_t *)(v8 + 24 * v342);
                              v353 = *v351;
                              v354 = *(unsigned int *)(*v351 + 32);
                              if (v354 > 0x40)
                              {
                                v356 = *(_QWORD *)(v353 + 24);
                                v357 = *(_QWORD *)(v356 + 8 * ((v354 - 1) >> 6)) & (1 << (v354 - 1));
                                v358 = *(_DWORD *)(v345 + 32);
                                v359 = v358 - 1;
                                v360 = *(_QWORD *)(v345 + 24);
                                if (v358 >= 0x41)
                                  v361 = (_QWORD *)(v360 + 8 * (v359 >> 6));
                                else
                                  v361 = (_QWORD *)(v345 + 24);
                                if ((v357 != 0) == ((*v361 >> v359) & 1))
                                {
                                  v362 = v354 + 63;
                                  v363 = v360 - 8;
                                  v364 = (v362 >> 3) & 0x3FFFFFF8;
                                  v365 = v356 - 8;
                                  while (v364)
                                  {
                                    v366 = *(_QWORD *)(v365 + v364);
                                    v367 = *(_QWORD *)(v363 + v364);
                                    v364 -= 8;
                                    if (v366 != v367)
                                    {
                                      if (v366 <= v367)
                                        goto LABEL_343;
                                      goto LABEL_339;
                                    }
                                  }
                                  break;
                                }
                                if (!v357)
                                  break;
                              }
                              else if ((uint64_t)(*(_QWORD *)(v353 + 24) << -(char)v354) >> -(char)v354 >= (uint64_t)(*v346 << -(char)v354) >> -(char)v354)
                              {
                                break;
                              }
LABEL_343:
                              v355 = *(_OWORD *)v351;
                              v343[2] = v351[2];
                              *(_OWORD *)v343 = v355;
                              v343 = (uint64_t *)(v8 + 24 * v342);
                              if (v352 <= 1)
                                goto LABEL_340;
                            }
                          }
LABEL_339:
                          v351 = v343;
LABEL_340:
                          *v351 = result;
                          v351[1] = v345;
                          v351[2] = v349;
                        }
                      }
                      else
                      {
                        v348 = -v347;
                        result = (uint64_t)(*(_QWORD *)(v344 + 24) << v348) >> v348;
                        if (result < (uint64_t)(*v346 << v348) >> v348)
                          goto LABEL_338;
                      }
                    }
                  }
                  if (v10-- <= 2)
                    return result;
                  goto LABEL_317;
                }
              }
            }
          }
          v302 = *(_QWORD *)(v252 + 24);
          v303 = *(_QWORD *)(v302 + 8 * ((v255 - 1) >> 6)) & (1 << (v255 - 1));
          v304 = *(_DWORD *)(v253 + 32);
          v305 = v304 - 1;
          v306 = *(_QWORD *)(v253 + 24);
          if (v304 >= 0x41)
            v254 = (_QWORD *)(v306 + 8 * (v305 >> 6));
          if ((v303 != 0) == ((*v254 >> v305) & 1))
          {
            v312 = v255 + 63;
            v313 = v306 - 8;
            v314 = (v312 >> 3) & 0x3FFFFFF8;
            v315 = v302 - 8;
            do
            {
              if (!v314)
                goto LABEL_260;
              v316 = *(_QWORD *)(v315 + v314);
              v317 = *(_QWORD *)(v313 + v314);
              v314 -= 8;
            }
            while (v316 == v317);
            if (v316 > v317)
              goto LABEL_260;
          }
          else if (!v303)
          {
            goto LABEL_260;
          }
LABEL_259:
          v251 += 3;
          v250 = 2 * v249 + 2;
          goto LABEL_260;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (_QWORD *)(v8 + 24 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0xC01)
        {
          result = (uint64_t)sub_1C5F4B768((__int128 *)(v7 + 24 * v11), (_QWORD *)v7, (_QWORD *)(a2 - 24));
        }
        else
        {
          sub_1C5F4B768((__int128 *)v7, (_QWORD *)(v7 + 24 * v11), (_QWORD *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (__int128 *)(v7 + 24 * v11 - 24);
          sub_1C5F4B768((__int128 *)(v7 + 24), v14, (_QWORD *)(a2 - 48));
          v15 = (_QWORD *)(v7 + 24 + 8 * v13);
          sub_1C5F4B768((__int128 *)(v7 + 48), v15, (_QWORD *)(a2 - 72));
          result = (uint64_t)sub_1C5F4B768(v14, v12, v15);
          v472 = *(_QWORD *)(v7 + 16);
          v465 = *(_OWORD *)v7;
          v16 = v12[2];
          *(_OWORD *)v7 = *(_OWORD *)v12;
          *(_QWORD *)(v7 + 16) = v16;
          v12[2] = v472;
          *(_OWORD *)v12 = v465;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(_QWORD *)(v7 - 24);
          v17 = *(_QWORD *)(v7 + 8);
          v19 = (_QWORD *)(v17 + 24);
          v20 = *(unsigned int *)(v18 + 32);
          if (v20 > 0x40)
          {
            v101 = *(_QWORD *)(v18 + 24);
            v102 = *(_QWORD *)(v101 + 8 * ((v20 - 1) >> 6)) & (1 << (v20 - 1));
            v103 = *(_DWORD *)(v17 + 32);
            v104 = v103 - 1;
            v105 = *(_QWORD *)(v17 + 24);
            if (v103 >= 0x41)
              v19 = (_QWORD *)(v105 + 8 * (v104 >> 6));
            if ((v102 != 0) == ((*v19 >> v104) & 1))
            {
              v154 = v20 + 63;
              v155 = v105 - 8;
              v156 = (v154 >> 3) & 0x3FFFFFF8;
              v157 = v101 - 8;
              do
              {
                if (!v156)
                  goto LABEL_108;
                v158 = *(_QWORD *)(v157 + v156);
                v159 = *(_QWORD *)(v155 + v156);
                v156 -= 8;
              }
              while (v158 == v159);
              if (v158 <= v159)
                goto LABEL_13;
            }
            else if (v102)
            {
              goto LABEL_13;
            }
          }
          else if ((uint64_t)(*(_QWORD *)(v18 + 24) << -(char)v20) >> -(char)v20 < (uint64_t)(*v19 << -(char)v20) >> -(char)v20)
          {
            goto LABEL_13;
          }
LABEL_108:
          v106 = *(_QWORD *)v7;
          v464 = *(_OWORD *)(v7 + 8);
          v107 = *(_QWORD *)(a2 - 16);
          v108 = (_QWORD *)(v107 + 24);
          v109 = *(unsigned int *)(*(_QWORD *)v7 + 32);
          if (v109 > 0x40)
          {
            v110 = *(_QWORD *)(v106 + 24);
            v160 = *(_QWORD *)(v110 + 8 * ((v109 - 1) >> 6)) & (1 << (v109 - 1));
            v161 = *(_DWORD *)(v107 + 32);
            v162 = v161 - 1;
            v163 = *(_QWORD *)(v107 + 24);
            result = v163 + 8 * ((v161 - 1) >> 6);
            if (v161 >= 0x41)
              v108 = (_QWORD *)(v163 + 8 * (v162 >> 6));
            if ((v160 != 0) == ((*v108 >> v162) & 1))
            {
              v175 = v163 - 8;
              v176 = ((unint64_t)(v109 + 63) >> 3) & 0x3FFFFFF8;
              while (v176)
              {
                v177 = *(_QWORD *)(v110 + v176 - 8);
                v178 = *(_QWORD *)(v175 + v176);
                v176 -= 8;
                if (v177 != v178)
                {
                  if (v177 <= v178)
                    goto LABEL_110;
                  break;
                }
              }
LABEL_176:
              v8 = v7 + 24;
              if (v7 + 24 < a2)
              {
                v164 = (v109 - 1) >> 6;
                v165 = 1 << (v109 - 1);
                v166 = v7;
                while (1)
                {
                  v167 = *(_QWORD *)(v166 + 32);
                  v166 = v8;
                  v168 = (_QWORD *)(v167 + 24);
                  if (v109 > 0x40)
                  {
                    result = *(_QWORD *)(v110 + 8 * v164) & v165;
                    v169 = *(_DWORD *)(v167 + 32);
                    v170 = v169 - 1;
                    v171 = *(_QWORD *)(v167 + 24);
                    if (v169 >= 0x41)
                      v168 = (_QWORD *)(v171 + 8 * (v170 >> 6));
                    if (((((*(_QWORD *)(v110 + 8 * v164) & v165) != 0) ^ (*v168 >> v170)) & 1) != 0)
                    {
                      if (result)
                        goto LABEL_123;
                    }
                    else
                    {
                      result = v171 - 8;
                      v172 = ((unint64_t)(v109 + 63) >> 3) & 0x3FFFFFF8;
                      while (v172)
                      {
                        v173 = *(_QWORD *)(v110 + v172 - 8);
                        v174 = *(_QWORD *)(result + v172);
                        v172 -= 8;
                        if (v173 != v174)
                        {
                          if (v173 > v174)
                            break;
                          goto LABEL_123;
                        }
                      }
                    }
                  }
                  else
                  {
                    result = (uint64_t)(*v168 << (64 - v109)) >> (64 - v109);
                    if (v110 << -(char)v109 >> -(char)v109 < result)
                      goto LABEL_123;
                  }
                  v8 += 24;
                  if (v166 + 24 >= a2)
                    goto LABEL_123;
                }
              }
              goto LABEL_123;
            }
            if (!v160)
              goto LABEL_176;
          }
          else
          {
            v110 = *(_QWORD *)(v106 + 24);
            if (v110 << -(char)v109 >> -(char)v109 >= (uint64_t)(*v108 << -(char)v109) >> -(char)v109)
              goto LABEL_176;
          }
LABEL_110:
          v111 = (v109 - 1) >> 6;
          v112 = 1 << (v109 - 1);
          v8 = v7;
          do
          {
LABEL_111:
            while (1)
            {
              v113 = *(_QWORD *)(v8 + 32);
              v8 += 24;
              result = v113 + 24;
              if (v109 <= 0x40)
                break;
              v114 = *(_DWORD *)(v113 + 32);
              v115 = v114 - 1;
              v116 = *(_QWORD *)(v113 + 24);
              if (v114 >= 0x41)
                result = v116 + 8 * (v115 >> 6);
              result = ((*(_QWORD *)(v110 + 8 * v111) & v112) != 0) ^ (*(_QWORD *)result >> v115);
              if ((result & 1) != 0)
              {
                if ((*(_QWORD *)(v110 + 8 * v111) & v112) != 0)
                  goto LABEL_123;
              }
              else
              {
                result = v116 - 8;
                v117 = ((unint64_t)(v109 + 63) >> 3) & 0x3FFFFFF8;
                while (v117)
                {
                  v118 = *(_QWORD *)(v110 - 8 + v117);
                  v119 = *(_QWORD *)(result + v117);
                  v117 -= 8;
                  if (v118 != v119)
                  {
                    if (v118 <= v119)
                      goto LABEL_123;
                    goto LABEL_111;
                  }
                }
              }
            }
          }
          while (v110 << -(char)v109 >> -(char)v109 >= (uint64_t)(*(_QWORD *)result << (64 - v109)) >> (64 - v109));
LABEL_123:
          v120 = (char *)a2;
          if (v8 >= a2)
            goto LABEL_163;
          v121 = (v109 - 1) >> 6;
          v122 = 1 << (v109 - 1);
          for (result = a2; ; result -= 24)
          {
            v120 = (char *)(result - 24);
            v123 = (_QWORD *)(v107 + 24);
            if (v109 <= 0x40)
            {
              if (v110 << -(char)v109 >> -(char)v109 >= (uint64_t)(*v123 << (64 - v109)) >> (64 - v109))
                goto LABEL_163;
              goto LABEL_127;
            }
            v124 = *(_DWORD *)(v107 + 32);
            v125 = v124 - 1;
            v126 = *(_QWORD *)(v107 + 24);
            if (v124 >= 0x41)
              v123 = (_QWORD *)(v126 + 8 * (v125 >> 6));
            if (((((*(_QWORD *)(v110 + 8 * v121) & v122) != 0) ^ (*v123 >> v125)) & 1) == 0)
              break;
            if ((*(_QWORD *)(v110 + 8 * v121) & v122) == 0)
              goto LABEL_163;
LABEL_127:
            v107 = *(_QWORD *)(result - 40);
          }
          v127 = v126 - 8;
          v128 = ((unint64_t)(v109 + 63) >> 3) & 0x3FFFFFF8;
          while (v128)
          {
            v129 = *(_QWORD *)(v110 + v128 - 8);
            v130 = *(_QWORD *)(v127 + v128);
            v128 -= 8;
            if (v129 != v130)
            {
              if (v129 <= v130)
                goto LABEL_127;
              break;
            }
          }
LABEL_163:
          while (v8 < (unint64_t)v120)
          {
            v473 = *(_QWORD *)(v8 + 16);
            v466 = *(_OWORD *)v8;
            v131 = *(_OWORD *)v120;
            *(_QWORD *)(v8 + 16) = *((_QWORD *)v120 + 2);
            *(_OWORD *)v8 = v131;
            *((_QWORD *)v120 + 2) = v473;
            *(_OWORD *)v120 = v466;
            v132 = *(unsigned int *)(v106 + 32);
            v133 = (v132 - 1) >> 6;
            v134 = 1 << (v132 - 1);
            v135 = 64 - v132;
            do
            {
              while (1)
              {
LABEL_139:
                while (1)
                {
                  v136 = *(_QWORD *)(v8 + 32);
                  v8 += 24;
                  v137 = (_QWORD *)(v136 + 24);
                  if (v132 > 0x40)
                    break;
                  v138 = *(_QWORD *)(v106 + 24);
                  if (v138 << v135 >> v135 < (uint64_t)(*v137 << v135) >> v135)
                    goto LABEL_151;
                }
                v138 = *(_QWORD *)(v106 + 24);
                v139 = *(_DWORD *)(v136 + 32);
                v140 = v139 - 1;
                v141 = *(_QWORD *)(v136 + 24);
                if (v139 >= 0x41)
                  v137 = (_QWORD *)(v141 + 8 * (v140 >> 6));
                if (((((*(_QWORD *)(v138 + 8 * v133) & v134) != 0) ^ (*v137 >> v140)) & 1) != 0)
                  break;
                v142 = v141 - 8;
                v143 = ((unint64_t)(v132 + 63) >> 3) & 0x3FFFFFF8;
                while (v143)
                {
                  v144 = *(_QWORD *)(v138 + v143 - 8);
                  v145 = *(_QWORD *)(v142 + v143);
                  v143 -= 8;
                  if (v144 != v145)
                  {
                    if (v144 <= v145)
                      goto LABEL_151;
                    goto LABEL_139;
                  }
                }
              }
            }
            while ((*(_QWORD *)(v138 + 8 * v133) & v134) == 0);
            while (1)
            {
LABEL_151:
              while (1)
              {
                v146 = *((_QWORD *)v120 - 2);
                v120 -= 24;
                result = v146 + 24;
                if (v132 > 0x40)
                  break;
                if (v138 << v135 >> v135 >= (uint64_t)(*(_QWORD *)result << v135) >> v135)
                  goto LABEL_163;
              }
              v147 = *(_DWORD *)(v146 + 32);
              v148 = v147 - 1;
              v149 = *(_QWORD *)(v146 + 24);
              if (v147 >= 0x41)
                result = v149 + 8 * (v148 >> 6);
              result = ((*(_QWORD *)(v138 + 8 * v133) & v134) != 0) ^ (*(_QWORD *)result >> v148);
              if ((result & 1) == 0)
                break;
              if ((*(_QWORD *)(v138 + 8 * v133) & v134) == 0)
                goto LABEL_163;
            }
            result = v149 - 8;
            v150 = ((unint64_t)(v132 + 63) >> 3) & 0x3FFFFFF8;
            while (v150)
            {
              v151 = *(_QWORD *)(v138 - 8 + v150);
              v152 = *(_QWORD *)(result + v150);
              v150 -= 8;
              if (v151 != v152)
              {
                if (v151 <= v152)
                  goto LABEL_151;
                goto LABEL_163;
              }
            }
          }
          if (v8 - 24 != v7)
          {
            v153 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)v7 = v153;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 24) = v106;
          *(_OWORD *)(v8 - 16) = v464;
          continue;
        }
        v17 = *(_QWORD *)(v7 + 8);
LABEL_13:
        v21 = *(_QWORD *)v7;
        v22 = *(_QWORD *)(v7 + 16);
        v23 = (uint64_t *)(v17 + 24);
        v24 = v7;
        while (1)
        {
LABEL_14:
          while (1)
          {
            v25 = v24;
            v27 = *(_QWORD *)(v24 + 24);
            v24 += 24;
            v26 = v27;
            v28 = *(unsigned int *)(v27 + 32);
            if (v28 > 0x40)
              break;
            v29 = -v28;
            v30 = (uint64_t)(*(_QWORD *)(v26 + 24) << v29) >> v29;
            v31 = *v23;
            if (v30 >= *v23 << v29 >> v29)
              goto LABEL_27;
          }
          v32 = *(_QWORD *)(v26 + 24);
          v33 = *(_QWORD *)(v32 + 8 * ((v28 - 1) >> 6)) & (1 << (v28 - 1));
          v34 = *(_DWORD *)(v17 + 32);
          v35 = v34 - 1;
          v31 = *(_QWORD *)(v17 + 24);
          v36 = (_QWORD *)(v34 >= 0x41 ? v31 + 8 * (v35 >> 6) : v17 + 24);
          if ((v33 != 0) == ((*v36 >> v35) & 1))
            break;
          if (!v33)
            goto LABEL_27;
        }
        v37 = ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8;
        v38 = v32 - 8;
        while (v37)
        {
          v39 = *(_QWORD *)(v38 + v37);
          v40 = *(_QWORD *)(v31 + v37 - 8);
          v37 -= 8;
          if (v39 != v40)
          {
            if (v39 <= v40)
              goto LABEL_14;
            break;
          }
        }
LABEL_27:
        if (v25 == v7)
        {
          v41 = a2;
          if (v24 < a2)
          {
            v41 = a2;
            do
            {
LABEL_45:
              while (1)
              {
                v55 = *(_QWORD *)(v41 - 24);
                v41 -= 24;
                v54 = v55;
                v56 = *(unsigned int *)(v55 + 32);
                if (v56 <= 0x40)
                  break;
                v57 = *(_QWORD *)(v54 + 24);
                v58 = *(_QWORD *)(v57 + 8 * ((v56 - 1) >> 6)) & (1 << (v56 - 1));
                v59 = *(_DWORD *)(v17 + 32);
                v60 = v59 - 1;
                if (v59 >= 0x41)
                  v61 = (_QWORD *)(v31 + 8 * (v60 >> 6));
                else
                  v61 = (_QWORD *)(v17 + 24);
                if ((v58 != 0) == ((*v61 >> v60) & 1))
                {
                  v62 = ((unint64_t)(v56 + 63) >> 3) & 0x3FFFFFF8;
                  v63 = v57 - 8;
                  do
                  {
                    if (!v62)
                    {
                      if (v24 < v41)
                        goto LABEL_45;
                      goto LABEL_68;
                    }
                    v64 = *(_QWORD *)(v63 + v62);
                    v65 = *(_QWORD *)(v31 - 8 + v62);
                    v62 -= 8;
                  }
                  while (v64 == v65);
                  if (v64 <= v65 || v24 >= v41)
                    goto LABEL_68;
                }
                else if (v24 >= v41 || v58)
                {
                  goto LABEL_68;
                }
              }
            }
            while ((uint64_t)(*(_QWORD *)(v54 + 24) << -(char)v56) >> -(char)v56 >= v31 << -(char)v56 >> -(char)v56
                 && v24 < v41);
          }
        }
        else
        {
          v41 = a2;
          do
          {
LABEL_29:
            while (1)
            {
              v43 = *(_QWORD *)(v41 - 24);
              v41 -= 24;
              v42 = v43;
              v44 = *(unsigned int *)(v43 + 32);
              if (v44 <= 0x40)
                break;
              v45 = *(_QWORD *)(v42 + 24);
              v46 = *(_QWORD *)(v45 + 8 * ((v44 - 1) >> 6)) & (1 << (v44 - 1));
              v47 = *(_DWORD *)(v17 + 32);
              v48 = v47 - 1;
              if (v47 >= 0x41)
                v49 = (_QWORD *)(v31 + 8 * (v48 >> 6));
              else
                v49 = (_QWORD *)(v17 + 24);
              if ((v46 != 0) == ((*v49 >> v48) & 1))
              {
                v50 = ((unint64_t)(v44 + 63) >> 3) & 0x3FFFFFF8;
                v51 = v45 - 8;
                while (v50)
                {
                  v52 = *(_QWORD *)(v51 + v50);
                  v53 = *(_QWORD *)(v31 - 8 + v50);
                  v50 -= 8;
                  if (v52 != v53)
                  {
                    if (v52 <= v53)
                      goto LABEL_68;
                    goto LABEL_29;
                  }
                }
              }
              else if (v46)
              {
                goto LABEL_68;
              }
            }
          }
          while ((uint64_t)(*(_QWORD *)(v42 + 24) << -(char)v44) >> -(char)v44 >= v31 << -(char)v44 >> -(char)v44);
        }
LABEL_68:
        v8 = v24;
        if (v24 < v41)
        {
          v68 = v41;
          do
          {
            v69 = *(_OWORD *)v8;
            v70 = *(_QWORD *)(v8 + 16);
            v71 = *(_QWORD *)(v68 + 16);
            *(_OWORD *)v8 = *(_OWORD *)v68;
            *(_QWORD *)(v8 + 16) = v71;
            *(_QWORD *)(v68 + 16) = v70;
            *(_OWORD *)v68 = v69;
            do
            {
              while (1)
              {
                while (1)
                {
                  v73 = *(_QWORD *)(v8 + 24);
                  v8 += 24;
                  v72 = v73;
                  v74 = *(unsigned int *)(v73 + 32);
                  if (v74 > 0x40)
                    break;
                  v75 = -v74;
                  v76 = (uint64_t)(*(_QWORD *)(v72 + 24) << v75) >> v75;
                  v77 = *v23;
                  if (v76 >= *v23 << v75 >> v75)
                    goto LABEL_84;
                }
                v78 = *(_QWORD *)(v72 + 24);
                v79 = *(_QWORD *)(v78 + 8 * ((v74 - 1) >> 6)) & (1 << (v74 - 1));
                v80 = *(_DWORD *)(v17 + 32);
                v81 = v80 - 1;
                v77 = *(_QWORD *)(v17 + 24);
                v82 = (_QWORD *)(v80 >= 0x41 ? v77 + 8 * (v81 >> 6) : v17 + 24);
                if ((v79 != 0) == ((*v82 >> v81) & 1))
                  break;
                if (!v79)
                  goto LABEL_84;
              }
              v83 = ((unint64_t)(v74 + 63) >> 3) & 0x3FFFFFF8;
              v84 = v78 - 8;
              do
              {
                if (!v83)
                  goto LABEL_84;
                v85 = *(_QWORD *)(v84 + v83);
                v86 = *(_QWORD *)(v77 + v83 - 8);
                v83 -= 8;
              }
              while (v85 == v86);
            }
            while (v85 <= v86);
            do
            {
LABEL_84:
              while (1)
              {
                v88 = *(_QWORD *)(v68 - 24);
                v68 -= 24;
                v87 = v88;
                v89 = *(unsigned int *)(v88 + 32);
                if (v89 <= 0x40)
                  break;
                v90 = *(_QWORD *)(v87 + 24);
                v91 = *(_QWORD *)(v90 + 8 * ((v89 - 1) >> 6)) & (1 << (v89 - 1));
                v92 = *(_DWORD *)(v17 + 32);
                v93 = v92 - 1;
                if (v92 >= 0x41)
                  v94 = (_QWORD *)(v77 + 8 * (v93 >> 6));
                else
                  v94 = (_QWORD *)(v17 + 24);
                if ((v91 != 0) == ((*v94 >> v93) & 1))
                {
                  v95 = ((unint64_t)(v89 + 63) >> 3) & 0x3FFFFFF8;
                  v96 = v90 - 8;
                  while (v95)
                  {
                    v97 = *(_QWORD *)(v96 + v95);
                    v98 = *(_QWORD *)(v77 - 8 + v95);
                    v95 -= 8;
                    if (v97 != v98)
                    {
                      if (v97 <= v98)
                        goto LABEL_97;
                      goto LABEL_84;
                    }
                  }
                }
                else if (v91)
                {
                  goto LABEL_97;
                }
              }
            }
            while ((uint64_t)(*(_QWORD *)(v87 + 24) << -(char)v89) >> -(char)v89 >= v77 << -(char)v89 >> -(char)v89);
LABEL_97:
            ;
          }
          while (v8 < v68);
        }
        if (v8 - 24 != v7)
        {
          v99 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)v7 = v99;
        }
        *(_QWORD *)(v8 - 24) = v21;
        *(_QWORD *)(v8 - 16) = v17;
        *(_QWORD *)(v8 - 8) = v22;
        if (v24 < v41)
        {
LABEL_103:
          result = sub_1C5F49B08(v7, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v100 = sub_1C5F4BB1C(v7, v8 - 24);
        result = sub_1C5F4BB1C(v8, a2);
        if (!(_DWORD)result)
        {
          if (v100)
            continue;
          goto LABEL_103;
        }
        a2 = v8 - 24;
        if (!v100)
          goto LABEL_2;
        return result;
    }
  }
}

__int128 *sub_1C5F4B768(__int128 *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;

  v3 = *a2;
  v4 = *((_QWORD *)result + 1);
  v5 = (_QWORD *)(v4 + 24);
  v6 = *(unsigned int *)(*a2 + 32);
  if (v6 > 0x40)
  {
    v24 = *(_QWORD *)(v3 + 24);
    v3 = *(_QWORD *)(v24 + 8 * ((v6 - 1) >> 6)) >> (v6 - 1);
    v25 = *(_DWORD *)(v4 + 32);
    v26 = v25 - 1;
    v27 = *(_QWORD *)(v4 + 24);
    if (v25 >= 0x41)
      v5 = (_QWORD *)(v27 + 8 * (v26 >> 6));
    if (((v3 ^ (*v5 >> v26)) & 1) == 0)
    {
      v28 = v27 - 8;
      v29 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
      v30 = v24 - 8;
      while (v29)
      {
        v31 = *(_QWORD *)(v30 + v29);
        v32 = *(_QWORD *)(v28 + v29);
        v29 -= 8;
        if (v31 != v32)
        {
          LOBYTE(v3) = v31 <= v32;
          goto LABEL_3;
        }
      }
      LOBYTE(v3) = 0;
    }
  }
  else
  {
    LOBYTE(v3) = (uint64_t)(*(_QWORD *)(v3 + 24) << -(char)v6) >> -(char)v6 < (uint64_t)(*v5 << -(char)v6) >> -(char)v6;
  }
LABEL_3:
  v7 = *a3;
  v8 = a2[1];
  v9 = (_QWORD *)(v8 + 24);
  v10 = *(unsigned int *)(*a3 + 32);
  if (v10 > 0x40)
  {
    v33 = *(_QWORD *)(v7 + 24);
    v7 = *(_QWORD *)(v33 + 8 * ((v10 - 1) >> 6)) >> (v10 - 1);
    v34 = *(_DWORD *)(v8 + 32);
    v35 = v34 - 1;
    v36 = *(_QWORD *)(v8 + 24);
    if (v34 >= 0x41)
      v9 = (_QWORD *)(v36 + 8 * (v35 >> 6));
    if (((v7 ^ (*v9 >> v35)) & 1) == 0)
    {
      v37 = v10 + 63;
      v38 = v36 - 8;
      v39 = (v37 >> 3) & 0x3FFFFFF8;
      v40 = v33 - 8;
      while (v39)
      {
        v41 = *(_QWORD *)(v40 + v39);
        v42 = *(_QWORD *)(v38 + v39);
        v39 -= 8;
        if (v41 != v42)
        {
          LOBYTE(v7) = v41 <= v42;
          goto LABEL_5;
        }
      }
      if ((v3 & 1) == 0)
        return result;
      goto LABEL_28;
    }
  }
  else
  {
    LOBYTE(v7) = (uint64_t)(*(_QWORD *)(v7 + 24) << -(char)v10) >> -(char)v10 < (uint64_t)(*v9 << -(char)v10) >> -(char)v10;
  }
LABEL_5:
  if ((v3 & 1) == 0)
  {
    if ((v7 & 1) == 0)
      return result;
    v14 = a2[2];
    v15 = *(_OWORD *)a2;
    v16 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v16;
    *(_OWORD *)a3 = v15;
    a3[2] = v14;
    v17 = *a2;
    v18 = *((_QWORD *)result + 1);
    v19 = (_QWORD *)(v18 + 24);
    v20 = *(unsigned int *)(*a2 + 32);
    if (v20 > 0x40)
    {
      v56 = *(_QWORD *)(v17 + 24);
      v57 = *(_QWORD *)(v56 + 8 * ((v20 - 1) >> 6)) & (1 << (v20 - 1));
      v58 = *(_DWORD *)(v18 + 32);
      v59 = v58 - 1;
      v60 = *(_QWORD *)(v18 + 24);
      if (v58 >= 0x41)
        v19 = (_QWORD *)(v60 + 8 * (v59 >> 6));
      if ((v57 != 0) == ((*v19 >> v59) & 1))
      {
        v67 = v20 + 63;
        v68 = v60 - 8;
        v69 = (v67 >> 3) & 0x3FFFFFF8;
        v70 = v56 - 8;
        while (v69)
        {
          v71 = *(_QWORD *)(v70 + v69);
          v72 = *(_QWORD *)(v68 + v69);
          v69 -= 8;
          if (v71 != v72)
          {
            if (v71 <= v72)
              goto LABEL_11;
            return result;
          }
        }
        return result;
      }
      if (!v57)
        return result;
    }
    else if ((uint64_t)(*(_QWORD *)(v17 + 24) << -(char)v20) >> -(char)v20 >= (uint64_t)(*v19 << -(char)v20) >> -(char)v20)
    {
      return result;
    }
LABEL_11:
    v21 = *((_QWORD *)result + 2);
    v22 = *result;
    v23 = a2[2];
    *result = *(_OWORD *)a2;
    *((_QWORD *)result + 2) = v23;
    *(_OWORD *)a2 = v22;
    a2[2] = v21;
    return result;
  }
  if ((v7 & 1) != 0)
  {
    v11 = *((_QWORD *)result + 2);
    v12 = *result;
    v13 = a3[2];
    *result = *(_OWORD *)a3;
    *((_QWORD *)result + 2) = v13;
LABEL_31:
    *(_OWORD *)a3 = v12;
    a3[2] = v11;
    return result;
  }
LABEL_28:
  v43 = *((_QWORD *)result + 2);
  v44 = *result;
  v45 = a2[2];
  *result = *(_OWORD *)a2;
  *((_QWORD *)result + 2) = v45;
  *(_OWORD *)a2 = v44;
  a2[2] = v43;
  v46 = *a3;
  v47 = a2[1];
  v48 = (_QWORD *)(v47 + 24);
  v49 = *(unsigned int *)(*a3 + 32);
  if (v49 <= 0x40)
  {
    if ((uint64_t)(*(_QWORD *)(v46 + 24) << -(char)v49) >> -(char)v49 >= (uint64_t)(*v48 << -(char)v49) >> -(char)v49)
      return result;
    goto LABEL_30;
  }
  v51 = *(_QWORD *)(v46 + 24);
  v52 = *(_QWORD *)(v51 + 8 * ((v49 - 1) >> 6)) & (1 << (v49 - 1));
  v53 = *(_DWORD *)(v47 + 32);
  v54 = v53 - 1;
  v55 = *(_QWORD *)(v47 + 24);
  if (v53 >= 0x41)
    v48 = (_QWORD *)(v55 + 8 * (v54 >> 6));
  if ((v52 != 0) == ((*v48 >> v54) & 1))
  {
    v61 = v49 + 63;
    v62 = v55 - 8;
    v63 = (v61 >> 3) & 0x3FFFFFF8;
    v64 = v51 - 8;
    while (v63)
    {
      v65 = *(_QWORD *)(v64 + v63);
      v66 = *(_QWORD *)(v62 + v63);
      v63 -= 8;
      if (v65 != v66)
      {
        if (v65 <= v66)
          goto LABEL_30;
        return result;
      }
    }
  }
  else if (v52)
  {
LABEL_30:
    v11 = a2[2];
    v12 = *(_OWORD *)a2;
    v50 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v50;
    goto LABEL_31;
  }
  return result;
}

BOOL sub_1C5F4BB1C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  __int128 *v47;
  __int128 *v48;
  __int128 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  __int128 v132;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v7 = (__int128 *)(a2 - 24);
      v6 = *(_QWORD *)(a2 - 24);
      v8 = *(_QWORD *)(a1 + 8);
      v9 = (_QWORD *)(v8 + 24);
      v10 = *(unsigned int *)(v6 + 32);
      if (v10 <= 0x40)
      {
        if ((uint64_t)(*(_QWORD *)(v6 + 24) << -(char)v10) >> -(char)v10 >= (uint64_t)(*v9 << -(char)v10) >> -(char)v10)
          return result;
        goto LABEL_4;
      }
      v77 = *(_QWORD *)(v6 + 24);
      v78 = *(_QWORD *)(v77 + 8 * ((v10 - 1) >> 6)) & (1 << (v10 - 1));
      v79 = *(_DWORD *)(v8 + 32);
      v80 = v79 - 1;
      v81 = *(_QWORD *)(v8 + 24);
      if (v79 >= 0x41)
        v9 = (_QWORD *)(v81 + 8 * (v80 >> 6));
      if ((v78 != 0) != ((*v9 >> v80) & 1))
      {
        if (!v78)
          return result;
LABEL_4:
        v11 = *(_QWORD *)(a1 + 16);
        v12 = *(_OWORD *)a1;
        v13 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v7;
        *(_QWORD *)(a1 + 16) = v13;
        *v7 = v12;
        *(_QWORD *)(a2 - 8) = v11;
        return 1;
      }
      v102 = v10 + 63;
      v103 = v81 - 8;
      v104 = (v102 >> 3) & 0x3FFFFFF8;
      v105 = v77 - 8;
      do
      {
        if (!v104)
          return 1;
        v106 = *(_QWORD *)(v105 + v104);
        v107 = *(_QWORD *)(v103 + v104);
        v104 -= 8;
      }
      while (v106 == v107);
      if (v106 <= v107)
        goto LABEL_4;
      return 1;
    case 3uLL:
      sub_1C5F4B768((__int128 *)a1, (_QWORD *)(a1 + 24), (_QWORD *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1C5F4C2A4(a1, (_QWORD *)(a1 + 24), (_QWORD *)(a1 + 48), (_QWORD *)(a2 - 24));
      return 1;
    case 5uLL:
      v47 = (__int128 *)(a1 + 24);
      v48 = (__int128 *)(a1 + 48);
      v49 = (__int128 *)(a1 + 72);
      sub_1C5F4C2A4(a1, (_QWORD *)(a1 + 24), (_QWORD *)(a1 + 48), (_QWORD *)(a1 + 72));
      v52 = *(_QWORD *)(a2 - 24);
      v51 = a2 - 24;
      v50 = v52;
      v53 = *(_QWORD *)(a1 + 80);
      v54 = (_QWORD *)(v53 + 24);
      v55 = *(unsigned int *)(v52 + 32);
      if (v55 > 0x40)
      {
        v82 = *(_QWORD *)(v50 + 24);
        v83 = *(_QWORD *)(v82 + 8 * ((v55 - 1) >> 6)) & (1 << (v55 - 1));
        v84 = *(_DWORD *)(v53 + 32);
        v85 = v84 - 1;
        v86 = *(_QWORD *)(v53 + 24);
        if (v84 >= 0x41)
          v54 = (_QWORD *)(v86 + 8 * (v85 >> 6));
        if ((v83 != 0) == ((*v54 >> v85) & 1))
        {
          v108 = v55 + 63;
          v109 = v86 - 8;
          v110 = (v108 >> 3) & 0x3FFFFFF8;
          v111 = v82 - 8;
          do
          {
            if (!v110)
              return 1;
            v112 = *(_QWORD *)(v111 + v110);
            v113 = *(_QWORD *)(v109 + v110);
            v110 -= 8;
          }
          while (v112 == v113);
          if (v112 > v113)
            return 1;
        }
        else if (!v83)
        {
          return 1;
        }
      }
      else if ((uint64_t)(*(_QWORD *)(v50 + 24) << -(char)v55) >> -(char)v55 >= (uint64_t)(*v54 << -(char)v55) >> -(char)v55)
      {
        return 1;
      }
      v56 = *(_QWORD *)(a1 + 88);
      v57 = *v49;
      v58 = *(_QWORD *)(v51 + 16);
      *v49 = *(_OWORD *)v51;
      *(_QWORD *)(a1 + 88) = v58;
      *(_OWORD *)v51 = v57;
      *(_QWORD *)(v51 + 16) = v56;
      v59 = *(_QWORD *)(a1 + 72);
      v60 = *(_QWORD *)(a1 + 56);
      v61 = (_QWORD *)(v60 + 24);
      v62 = *(unsigned int *)(v59 + 32);
      if (v62 > 0x40)
      {
        v87 = *(_QWORD *)(v59 + 24);
        v88 = *(_QWORD *)(v87 + 8 * ((v62 - 1) >> 6)) & (1 << (v62 - 1));
        v89 = *(_DWORD *)(v60 + 32);
        v90 = v89 - 1;
        v91 = *(_QWORD *)(v60 + 24);
        if (v89 >= 0x41)
          v61 = (_QWORD *)(v91 + 8 * (v90 >> 6));
        if ((v88 != 0) == ((*v61 >> v90) & 1))
        {
          v114 = v62 + 63;
          v115 = v91 - 8;
          v116 = (v114 >> 3) & 0x3FFFFFF8;
          v117 = v87 - 8;
          do
          {
            if (!v116)
              return 1;
            v118 = *(_QWORD *)(v117 + v116);
            v119 = *(_QWORD *)(v115 + v116);
            v116 -= 8;
          }
          while (v118 == v119);
          if (v118 > v119)
            return 1;
        }
        else if (!v88)
        {
          return 1;
        }
      }
      else if ((uint64_t)(*(_QWORD *)(v59 + 24) << -(char)v62) >> -(char)v62 >= (uint64_t)(*v61 << -(char)v62) >> -(char)v62)
      {
        return 1;
      }
      v63 = *(_QWORD *)(a1 + 64);
      v64 = *v48;
      *v48 = *v49;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
      *v49 = v64;
      *(_QWORD *)(a1 + 88) = v63;
      v65 = *(_QWORD *)(a1 + 48);
      v66 = *(_QWORD *)(a1 + 32);
      v67 = (_QWORD *)(v66 + 24);
      v68 = *(unsigned int *)(v65 + 32);
      if (v68 > 0x40)
      {
        v92 = *(_QWORD *)(v65 + 24);
        v93 = *(_QWORD *)(v92 + 8 * ((v68 - 1) >> 6)) & (1 << (v68 - 1));
        v94 = *(_DWORD *)(v66 + 32);
        v95 = v94 - 1;
        v96 = *(_QWORD *)(v66 + 24);
        if (v94 >= 0x41)
          v67 = (_QWORD *)(v96 + 8 * (v95 >> 6));
        if ((v93 != 0) == ((*v67 >> v95) & 1))
        {
          v120 = v68 + 63;
          v121 = v96 - 8;
          v122 = (v120 >> 3) & 0x3FFFFFF8;
          v123 = v92 - 8;
          do
          {
            if (!v122)
              return 1;
            v124 = *(_QWORD *)(v123 + v122);
            v125 = *(_QWORD *)(v121 + v122);
            v122 -= 8;
          }
          while (v124 == v125);
          if (v124 > v125)
            return 1;
        }
        else if (!v93)
        {
          return 1;
        }
      }
      else if ((uint64_t)(*(_QWORD *)(v65 + 24) << -(char)v68) >> -(char)v68 >= (uint64_t)(*v67 << -(char)v68) >> -(char)v68)
      {
        return 1;
      }
      v69 = *(_QWORD *)(a1 + 40);
      v70 = *v47;
      *v47 = *v48;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
      *v48 = v70;
      *(_QWORD *)(a1 + 64) = v69;
      v71 = *(_QWORD *)(a1 + 24);
      v72 = *(_QWORD *)(a1 + 8);
      v73 = (_QWORD *)(v72 + 24);
      v74 = *(unsigned int *)(v71 + 32);
      if (v74 <= 0x40)
      {
        if ((uint64_t)(*(_QWORD *)(v71 + 24) << -(char)v74) >> -(char)v74 >= (uint64_t)(*v73 << -(char)v74) >> -(char)v74)
          return 1;
        goto LABEL_47;
      }
      v97 = *(_QWORD *)(v71 + 24);
      v98 = *(_QWORD *)(v97 + 8 * ((v74 - 1) >> 6)) & (1 << (v74 - 1));
      v99 = *(_DWORD *)(v72 + 32);
      v100 = v99 - 1;
      v101 = *(_QWORD *)(v72 + 24);
      if (v99 >= 0x41)
        v73 = (_QWORD *)(v101 + 8 * (v100 >> 6));
      if ((v98 != 0) == ((*v73 >> v100) & 1))
      {
        v126 = v74 + 63;
        v127 = v101 - 8;
        v128 = (v126 >> 3) & 0x3FFFFFF8;
        v129 = v97 - 8;
        do
        {
          if (!v128)
            return 1;
          v130 = *(_QWORD *)(v129 + v128);
          v131 = *(_QWORD *)(v127 + v128);
          v128 -= 8;
        }
        while (v130 == v131);
        if (v130 <= v131)
        {
LABEL_47:
          v75 = *(_QWORD *)(a1 + 16);
          v76 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v47;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
          *v47 = v76;
          *(_QWORD *)(a1 + 40) = v75;
        }
      }
      else if (v98)
      {
        goto LABEL_47;
      }
      return 1;
    default:
      v14 = a1 + 48;
      sub_1C5F4B768((__int128 *)a1, (_QWORD *)(a1 + 24), (_QWORD *)(a1 + 48));
      v15 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v16 = 0;
      while (2)
      {
        v17 = *(_QWORD *)v15;
        v18 = *(_QWORD *)(v14 + 8);
        v19 = (_QWORD *)(v18 + 24);
        v20 = *(unsigned int *)(*(_QWORD *)v15 + 32);
        if (v20 > 0x40)
        {
          v36 = *(_QWORD *)(v17 + 24);
          v37 = *(_QWORD *)(v36 + 8 * ((v20 - 1) >> 6)) & (1 << (v20 - 1));
          v38 = *(_DWORD *)(v18 + 32);
          v39 = v38 - 1;
          v40 = *(_QWORD *)(v18 + 24);
          if (v38 >= 0x41)
            v19 = (_QWORD *)(v40 + 8 * (v39 >> 6));
          if ((v37 != 0) == ((*v19 >> v39) & 1))
          {
            v41 = v20 + 63;
            v42 = v40 - 8;
            v43 = (v41 >> 3) & 0x3FFFFFF8;
            v44 = v36 - 8;
            do
            {
              if (!v43)
                goto LABEL_25;
              v45 = *(_QWORD *)(v44 + v43);
              v46 = *(_QWORD *)(v42 + v43);
              v43 -= 8;
            }
            while (v45 == v46);
            if (v45 > v46)
            {
LABEL_25:
              v14 = v15;
              v15 += 24;
              if (v15 == a2)
                return 1;
              continue;
            }
          }
          else if (!v37)
          {
            goto LABEL_25;
          }
        }
        else if ((uint64_t)(*(_QWORD *)(v17 + 24) << -(char)v20) >> -(char)v20 >= (uint64_t)(*v19 << -(char)v20) >> -(char)v20)
        {
          goto LABEL_25;
        }
        break;
      }
      v132 = *(_OWORD *)(v15 + 8);
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 16);
      *(_OWORD *)v15 = *(_OWORD *)v14;
      v21 = a1;
      if (v14 == a1)
        goto LABEL_24;
      while (2)
      {
        v22 = *(_QWORD *)(v14 - 16);
        v23 = (_QWORD *)(v22 + 24);
        v24 = *(unsigned int *)(v17 + 32);
        if (v24 <= 0x40)
        {
          if ((uint64_t)(*(_QWORD *)(v17 + 24) << -(char)v24) >> -(char)v24 >= (uint64_t)(*v23 << -(char)v24) >> -(char)v24)
            goto LABEL_23;
LABEL_12:
          *(_OWORD *)v14 = *(_OWORD *)(v14 - 24);
          *(_QWORD *)(v14 + 16) = *(_QWORD *)(v14 - 8);
          v14 -= 24;
          if (v14 == a1)
          {
            v21 = a1;
            goto LABEL_24;
          }
          continue;
        }
        break;
      }
      v25 = *(_QWORD *)(v17 + 24);
      v26 = *(_QWORD *)(v25 + 8 * ((v24 - 1) >> 6)) & (1 << (v24 - 1));
      v27 = *(_DWORD *)(v22 + 32);
      v28 = v27 - 1;
      v29 = *(_QWORD *)(v22 + 24);
      if (v27 >= 0x41)
        v23 = (_QWORD *)(v29 + 8 * (v28 >> 6));
      if ((v26 != 0) != ((*v23 >> v28) & 1))
      {
        if (!v26)
          goto LABEL_23;
        goto LABEL_12;
      }
      v30 = v24 + 63;
      v31 = v29 - 8;
      v32 = (v30 >> 3) & 0x3FFFFFF8;
      v33 = v25 - 8;
      while (v32)
      {
        v34 = *(_QWORD *)(v33 + v32);
        v35 = *(_QWORD *)(v31 + v32);
        v32 -= 8;
        if (v34 != v35)
        {
          if (v34 <= v35)
            goto LABEL_12;
          break;
        }
      }
LABEL_23:
      v21 = v14;
LABEL_24:
      *(_QWORD *)v21 = v17;
      *(_OWORD *)(v21 + 8) = v132;
      if (++v16 != 8)
        goto LABEL_25;
      return v15 + 24 == a2;
  }
}

__int128 *sub_1C5F4C2A4(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  __int128 *result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;

  result = sub_1C5F4B768((__int128 *)a1, a2, a3);
  v9 = *a4;
  v10 = a3[1];
  v11 = (_QWORD *)(v10 + 24);
  v12 = *(unsigned int *)(*a4 + 32);
  if (v12 > 0x40)
  {
    v30 = *(_QWORD *)(v9 + 24);
    v31 = *(_QWORD *)(v30 + 8 * ((v12 - 1) >> 6)) & (1 << (v12 - 1));
    v32 = *(_DWORD *)(v10 + 32);
    v33 = v32 - 1;
    v34 = *(_QWORD *)(v10 + 24);
    if (v32 >= 0x41)
      v11 = (_QWORD *)(v34 + 8 * (v33 >> 6));
    if ((v31 != 0) == ((*v11 >> v33) & 1))
    {
      v45 = v12 + 63;
      v46 = v34 - 8;
      v47 = (v45 >> 3) & 0x3FFFFFF8;
      v48 = v30 - 8;
      while (v47)
      {
        v49 = *(_QWORD *)(v48 + v47);
        v50 = *(_QWORD *)(v46 + v47);
        v47 -= 8;
        if (v49 != v50)
        {
          if (v49 <= v50)
            goto LABEL_3;
          return result;
        }
      }
      return result;
    }
    if (!v31)
      return result;
  }
  else if ((uint64_t)(*(_QWORD *)(v9 + 24) << -(char)v12) >> -(char)v12 >= (uint64_t)(*v11 << -(char)v12) >> -(char)v12)
  {
    return result;
  }
LABEL_3:
  v13 = a3[2];
  v14 = *(_OWORD *)a3;
  v15 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  a3[2] = v15;
  *(_OWORD *)a4 = v14;
  a4[2] = v13;
  v16 = *a3;
  v17 = a2[1];
  v18 = (_QWORD *)(v17 + 24);
  v19 = *(unsigned int *)(*a3 + 32);
  if (v19 > 0x40)
  {
    v35 = *(_QWORD *)(v16 + 24);
    v36 = *(_QWORD *)(v35 + 8 * ((v19 - 1) >> 6)) & (1 << (v19 - 1));
    v37 = *(_DWORD *)(v17 + 32);
    v38 = v37 - 1;
    v39 = *(_QWORD *)(v17 + 24);
    if (v37 >= 0x41)
      v18 = (_QWORD *)(v39 + 8 * (v38 >> 6));
    if ((v36 != 0) == ((*v18 >> v38) & 1))
    {
      v51 = v19 + 63;
      v52 = v39 - 8;
      v53 = (v51 >> 3) & 0x3FFFFFF8;
      v54 = v35 - 8;
      while (v53)
      {
        v55 = *(_QWORD *)(v54 + v53);
        v56 = *(_QWORD *)(v52 + v53);
        v53 -= 8;
        if (v55 != v56)
        {
          if (v55 <= v56)
            goto LABEL_5;
          return result;
        }
      }
      return result;
    }
    if (!v36)
      return result;
  }
  else if ((uint64_t)(*(_QWORD *)(v16 + 24) << -(char)v19) >> -(char)v19 >= (uint64_t)(*v18 << -(char)v19) >> -(char)v19)
  {
    return result;
  }
LABEL_5:
  v20 = a2[2];
  v21 = *(_OWORD *)a2;
  v22 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v22;
  *(_OWORD *)a3 = v21;
  a3[2] = v20;
  v23 = *a2;
  v24 = *(_QWORD *)(a1 + 8);
  v25 = (_QWORD *)(v24 + 24);
  v26 = *(unsigned int *)(*a2 + 32);
  if (v26 <= 0x40)
  {
    if ((uint64_t)(*(_QWORD *)(v23 + 24) << -(char)v26) >> -(char)v26 >= (uint64_t)(*v25 << -(char)v26) >> -(char)v26)
      return result;
    goto LABEL_7;
  }
  v40 = *(_QWORD *)(v23 + 24);
  v41 = *(_QWORD *)(v40 + 8 * ((v26 - 1) >> 6)) & (1 << (v26 - 1));
  v42 = *(_DWORD *)(v24 + 32);
  v43 = v42 - 1;
  v44 = *(_QWORD *)(v24 + 24);
  if (v42 >= 0x41)
    v25 = (_QWORD *)(v44 + 8 * (v43 >> 6));
  if ((v41 != 0) == ((*v25 >> v43) & 1))
  {
    v57 = v26 + 63;
    v58 = v44 - 8;
    v59 = (v57 >> 3) & 0x3FFFFFF8;
    v60 = v40 - 8;
    while (v59)
    {
      v61 = *(_QWORD *)(v60 + v59);
      v62 = *(_QWORD *)(v58 + v59);
      v59 -= 8;
      if (v61 != v62)
      {
        if (v61 <= v62)
          goto LABEL_7;
        return result;
      }
    }
  }
  else if (v41)
  {
LABEL_7:
    v27 = *(_QWORD *)(a1 + 16);
    v28 = *(_OWORD *)a1;
    v29 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v29;
    *(_OWORD *)a2 = v28;
    a2[2] = v27;
  }
  return result;
}

llvm::Value *sub_1C5F4C598(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  llvm::Value *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::ValueSymbolTable *v20;

  v8 = operator new(0x48uLL);
  v9 = v8;
  v8[1] = a1;
  v10 = (llvm::Value *)(v8 + 1);
  *v8 = 0;
  v8[2] = 0;
  v8[3] = 0x4000000000000053;
  *((_OWORD *)v8 + 2) = 0u;
  v11 = (char *)(v8 + 4);
  *((_OWORD *)v8 + 3) = 0u;
  *((_DWORD *)v8 + 16) = 0;
  if (a4)
  {
    v16 = *(_QWORD *)(a4 + 40);
    v17 = (uint64_t *)(a4 + 24);
    v8[6] = v16;
    *(_WORD *)(v16 + 18) &= ~0x8000u;
    if ((*((_BYTE *)v8 + 31) & 0x10) != 0)
    {
      v19 = *(_QWORD *)(v16 + 56);
      if (v19)
      {
        v20 = *(llvm::ValueSymbolTable **)(v19 + 104);
        if (v20)
          llvm::ValueSymbolTable::reinsertValue(v20, v10);
      }
    }
    v18 = *v17;
    v9[4] = *v17;
    v9[5] = v17;
    *(_QWORD *)(v18 + 8) = v11;
    *v17 = (uint64_t)v11;
  }
  *((_DWORD *)v9 + 17) = a2;
  llvm::Value::setName((uint64_t ***)v10, a3);
  v12 = *((unsigned int *)v9 + 17);
  v13 = operator new(40 * v12);
  *v9 = v13;
  if ((_DWORD)v12)
  {
    v14 = &v13[4 * v12];
    do
    {
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
      v13[3] = v10;
      v13 += 4;
    }
    while (v13 != v14);
  }
  return v10;
}

uint64_t llvm::MemoryOpRemark::canHandle(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t ***v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 == 61)
    return 1;
  if (v2 != 84)
    return 0;
  v3 = *(uint64_t ****)(a1 - 32);
  if (!v3)
    return 0;
  if (*((_BYTE *)v3 + 16))
    return 0;
  v4 = (uint64_t)v3[3];
  if (v4 != *(_QWORD *)(a1 + 72))
    return 0;
  if ((*((_BYTE *)v3 + 33) & 0x20) != 0)
    return (*((_DWORD *)v3 + 9) - 194) < 7;
  if ((*((_BYTE *)v3 + 23) & 0x10) == 0)
    return 0;
  result = 0;
  v18 = 0;
  if ((*((_BYTE *)v3 + 33) & 0x20) == 0)
  {
    v7 = ***v3;
    v8 = *(_QWORD *)(v7 + 152);
    v9 = *(unsigned int *)(v7 + 168);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      v11 = (uint64_t ****)(v8 + 16 * v10);
      v12 = *v11;
      if (*v11 == v3)
        goto LABEL_20;
      v13 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(uint64_t ****)(v8 + 16 * v10);
        if (v12 == v3)
        {
          v11 = (uint64_t ****)(v8 + 16 * v10);
          goto LABEL_20;
        }
      }
    }
    v11 = (uint64_t ****)(v8 + 16 * v9);
LABEL_20:
    v15 = *a2;
    result = llvm::TargetLibraryInfoImpl::getLibFunc(0, (_BYTE *)v11[1] + 16, (size_t)*v11[1], &v18);
    if ((_DWORD)result)
    {
      v16 = v15;
      v17 = v18;
      result = llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v16, v4, v18);
      if ((_DWORD)result)
      {
        if (((*(_QWORD *)(a2[1] + 8 * (v17 >> 6)) >> v17) & 1) != 0
          || ((*(unsigned __int8 *)(*a2 + (v17 >> 2)) >> (2 * (v17 & 3))) & 3) == 0)
        {
          return 0;
        }
        result = 1;
        if ((v17 - 103) >= 4
          && ((v17 - 322) > 4 || (_DWORD)v17 == 325)
          && (v17 - 169) >= 2)
        {
          return 0;
        }
      }
    }
  }
  return result;
}

void llvm::MemoryOpRemark::visit(llvm::MemoryOpRemark *this, const llvm::Instruction *a2)
{
  int v2;
  uint64_t v3;

  v2 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v2 == 61)
  {
    llvm::MemoryOpRemark::visitStore(this, a2);
  }
  else if (v2 == 84)
  {
    v3 = *((_QWORD *)a2 - 4);
    if (v3 && !*(_BYTE *)(v3 + 16) && *(_QWORD *)(v3 + 24) == *((_QWORD *)a2 + 9) && (*(_BYTE *)(v3 + 33) & 0x20) != 0)
      llvm::MemoryOpRemark::visitIntrinsicCall((const llvm::DataLayout **)this, a2);
    else
      llvm::MemoryOpRemark::visitCall(this, a2);
  }
  else
  {
    llvm::MemoryOpRemark::visitUnknown(this, a2);
  }
}

uint64_t llvm::MemoryOpRemark::visitStore(llvm::MemoryOpRemark *this, const llvm::StoreInst *a2)
{
  __int16 v4;
  int v5;
  _BOOL4 v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::DiagnosticInfoIROptimization *v13;
  void **v14;
  void *v15;
  std::string v17;
  void *__p;
  char v19;
  void *v20[2];
  char v21;
  llvm::DiagnosticInfoIROptimization *v22;
  const char *v23;
  uint64_t v24;

  v4 = *((_WORD *)a2 + 9);
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 == 60 || v5 == 61)
    v6 = (v4 & 0x380) != 0;
  else
    v6 = (v5 - 63) <= 2;
  sub_1C4768AD0(*((_QWORD *)this + 4), **((_QWORD **)a2 - 8));
  v9 = (unint64_t)(v8 + 7) >> 3;
  if ((_DWORD)v7 == 1)
  v10 = *((_QWORD *)this + 2);
  v11 = (*(uint64_t (**)(llvm::MemoryOpRemark *, _QWORD))(*(_QWORD *)this + 24))(this, 0);
  sub_1C63B3010(&v22, (uint64_t)this, v10, v11, v12, (uint64_t)a2);
  v13 = v22;
  (*(void (**)(void **__return_ptr, llvm::MemoryOpRemark *, const char *, uint64_t))(*(_QWORD *)this + 16))(v20, this, "Store", 5);
  v14 = (void **)v20[0];
  if (v21 >= 0)
    v14 = v20;
  v15 = (void *)(v21 & 0x7F);
  if (v21 < 0)
    v15 = v20[1];
  v23 = (const char *)v14;
  v24 = (uint64_t)v15;
  sub_1C53B17B4((uint64_t)v13 + 80, (const void **)&v23);
  v23 = "\nStore size: ";
  v24 = 13;
  sub_1C53B17B4((uint64_t)v13 + 80, (const void **)&v23);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v17, "StoreSize", 9uLL, v9);
  sub_1C47E3888((uint64_t)v13, (uint64_t)&v17);
  v23 = " bytes.";
  v24 = 7;
  sub_1C53B17B4((uint64_t)v13 + 80, (const void **)&v23);
  if (v19 < 0)
    operator delete(__p);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(v20[0]);
  llvm::MemoryOpRemark::visitPtr((const llvm::DataLayout **)this, *((uint64_t ****)a2 - 4), 0, v13);
  sub_1C5F4D2A4(0, v4 & 1, v6, (uint64_t)v13);
  llvm::OptimizationRemarkEmitter::emit(*((llvm::OptimizationRemarkEmitter **)this + 1), v13);
  return (*(uint64_t (**)(llvm::DiagnosticInfoIROptimization *))(*(_QWORD *)v13 + 16))(v13);
}

void llvm::MemoryOpRemark::visitIntrinsicCall(const llvm::DataLayout **a1, _DWORD *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  llvm::DiagnosticInfoIROptimization *v14;
  uint64_t v15;
  void **v16;
  const void *v17;
  llvm::MemoryOpRemark *v18;
  _DWORD *v19;
  uint64_t v20;
  char v21;
  _BOOL4 v22;
  _QWORD *v23;
  int v24;
  llvm::DiagnosticInfoIROptimization *v25;
  char v26;
  void *__p[2];
  char v28;
  void *__dst[2];
  char v30;
  void *v31;
  char v32;
  const void *v33[2];
  void *v34;
  __int128 v35;
  _DWORD v36[8];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v34 = v36;
  v35 = xmmword_1C677F680;
  v26 = 0;
  switch(*(_DWORD *)(*((_QWORD *)a2 - 4) + 36))
  {
    case 0xC2:
      v4 = 0;
      LOWORD(v36[1]) = 31088;
      v5 = 1668113773;
      goto LABEL_10;
    case 0xC3:
      LOWORD(v36[1]) = 31088;
      v6 = 1668113773;
      goto LABEL_13;
    case 0xC4:
      v4 = 0;
      qmemcpy(v36, "memcpy", 6);
      *(_QWORD *)&v35 = 6;
      v26 = 1;
      goto LABEL_15;
    case 0xC5:
      v4 = 0;
      qmemcpy(v36, "memmove", 7);
      v7 = 7;
      goto LABEL_11;
    case 0xC6:
      qmemcpy(v36, "memmove", 7);
      v8 = 7;
      goto LABEL_14;
    case 0xC7:
      v4 = 0;
      LOWORD(v36[1]) = 29797;
      v5 = 1936549229;
LABEL_10:
      v36[0] = v5;
      v7 = 6;
LABEL_11:
      *(_QWORD *)&v35 = v7;
      goto LABEL_15;
    case 0xC8:
      LOWORD(v36[1]) = 29797;
      v6 = 1936549229;
LABEL_13:
      v36[0] = v6;
      v8 = 6;
LABEL_14:
      *(_QWORD *)&v35 = v8;
      v4 = 1;
LABEL_15:
      v9 = (uint64_t)a1[2];
      v10 = (*((uint64_t (**)(const llvm::DataLayout **, uint64_t))*a1 + 3))(a1, 2);
      sub_1C63B3010(&v25, (uint64_t)a1, v9, v10, v11, (uint64_t)a2);
      v12 = v34;
      v13 = v35;
      v14 = v25;
      __dst[0] = "Call to ";
      __dst[1] = (void *)8;
      v15 = (uint64_t)v25 + 80;
      sub_1C53B17B4((uint64_t)v25 + 80, (const void **)__dst);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Callee", 6uLL, v12, v13);
      sub_1C47E3888((uint64_t)v14, (uint64_t)__dst);
      (*((void (**)(void **__return_ptr, const llvm::DataLayout **, const char *, _QWORD))*a1 + 2))(__p, a1, "", 0);
      v16 = (void **)__p[0];
      if (v28 >= 0)
        v16 = __p;
      v17 = (const void *)(v28 & 0x7F);
      if (v28 < 0)
        v17 = __p[1];
      v33[0] = v16;
      v33[1] = v17;
      v18 = (llvm::MemoryOpRemark *)sub_1C53B17B4(v15, v33);
      if (v28 < 0)
        operator delete(__p[0]);
      if (v32 < 0)
        operator delete(v31);
      if (v30 < 0)
        operator delete(__dst[0]);
      llvm::MemoryOpRemark::visitSizeOperand(v18, *(llvm::Value **)&a2[-8 * (a2[5] & 0x7FFFFFF) + 16], v14);
      v19 = &a2[-8 * (a2[5] & 0x7FFFFFF)];
      if (*(_BYTE *)(*((_QWORD *)v19 + 12) + 16) == 16)
        v20 = *((_QWORD *)v19 + 12);
      else
        v20 = 0;
      if (v20)
        v21 = v4;
      else
        v21 = 1;
      if ((v21 & 1) != 0)
      {
        v22 = 0;
      }
      else
      {
        v23 = (_QWORD *)(v20 + 24);
        if (*(_DWORD *)(v20 + 32) >= 0x41u)
          v23 = (_QWORD *)*v23;
        v22 = *v23 != 0;
      }
      v24 = *(_DWORD *)(*((_QWORD *)a2 - 4) + 36);
      if ((v24 - 194) >= 4)
      {
        if ((v24 - 199) >= 2)
          goto LABEL_40;
      }
      else
      {
        llvm::MemoryOpRemark::visitPtr(a1, *((uint64_t ****)v19 + 4), 1, v14);
        v19 = &a2[-8 * (a2[5] & 0x7FFFFFF)];
      }
      llvm::MemoryOpRemark::visitPtr(a1, *(uint64_t ****)v19, 0, v14);
LABEL_40:
      sub_1C5F4D2A4(&v26, v22, v4, (uint64_t)v14);
      llvm::OptimizationRemarkEmitter::emit(a1[1], v14);
      (*(void (**)(llvm::DiagnosticInfoIROptimization *))(*(_QWORD *)v14 + 16))(v14);
LABEL_41:
      if (v34 != v36)
        free(v34);
      return;
    default:
      llvm::MemoryOpRemark::visitUnknown((llvm::MemoryOpRemark *)a1, (const llvm::Instruction *)a2);
      goto LABEL_41;
  }
}

llvm::DiagnosticInfoOptimizationBase *llvm::MemoryOpRemark::visitUnknown(llvm::MemoryOpRemark *this, const llvm::Instruction *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::DiagnosticInfoOptimizationBase *v7;
  void **v8;
  const void *v9;
  llvm::DiagnosticInfoOptimizationBase *result;
  void *__p[2];
  char v12;
  llvm::DiagnosticInfoOptimizationBase *v13;
  const void *v14[2];

  v4 = *((_QWORD *)this + 2);
  v5 = (*(uint64_t (**)(llvm::MemoryOpRemark *, uint64_t))(*(_QWORD *)this + 24))(this, 1);
  sub_1C63B30A0((uint64_t)this, v4, v5, v6, (uint64_t)a2, &v13);
  v7 = v13;
  (*(void (**)(void **__return_ptr, llvm::MemoryOpRemark *, const char *, uint64_t))(*(_QWORD *)this + 16))(__p, this, "Initialization", 14);
  v8 = (void **)__p[0];
  if (v12 >= 0)
    v8 = __p;
  v9 = (const void *)(v12 & 0x7F);
  if (v12 < 0)
    v9 = __p[1];
  v14[0] = v8;
  v14[1] = v9;
  sub_1C53B17B4((uint64_t)v7 + 80, v14);
  if (v12 < 0)
    operator delete(__p[0]);
  llvm::OptimizationRemarkEmitter::emit(*((llvm::OptimizationRemarkEmitter **)this + 1), v13);
  result = v13;
  v13 = 0;
  if (result)
    return (llvm::DiagnosticInfoOptimizationBase *)(*(uint64_t (**)(llvm::DiagnosticInfoOptimizationBase *))(*(_QWORD *)result + 16))(result);
  return result;
}

void llvm::MemoryOpRemark::visitPtr(const llvm::DataLayout **this, uint64_t ***a2, int a3, llvm::DiagnosticInfoIROptimization *a4)
{
  llvm **v8;
  uint64_t v9;
  llvm *v10;
  uint64_t PointerDereferenceableBytes;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  char *v21;
  const char *v22;
  _BYTE *v23;
  void **v24;
  char *v25;
  const std::string::value_type *v26;
  std::string v27;
  void *v28;
  char v29;
  _QWORD v30[2];
  char v31;
  void *v32;
  char v33;
  _QWORD __dst[2];
  char v35;
  void *__p;
  char v37;
  const char *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  BOOL v43[2];
  char *v44;
  uint64_t v45;
  _BYTE v46[80];
  llvm **v47;
  uint64_t v48;
  _QWORD v49[4];

  v49[2] = *MEMORY[0x1E0C80C00];
  v47 = (llvm **)v49;
  v48 = 0x200000000;
  llvm::getUnderlyingObjectsForCodeGen((uint64_t)a2, (uint64_t)&v47);
  v44 = v46;
  v45 = 0x200000000;
  if (!(_DWORD)v48)
    goto LABEL_5;
  v8 = v47;
  v9 = 8 * v48;
  do
  {
    v10 = *v8++;
    llvm::MemoryOpRemark::visitVariable((uint64_t)this, v10, (uint64_t)&v44);
    v9 -= 8;
  }
  while (v9);
  if (!(_DWORD)v45)
  {
LABEL_5:
    *(_WORD *)v43 = 0;
    PointerDereferenceableBytes = llvm::Value::getPointerDereferenceableBytes(a2, this[4], &v43[1], v43);
    if (!PointerDereferenceableBytes)
      goto LABEL_39;
    LOBYTE(v38) = 0;
    v40 = 0;
    v41 = PointerDereferenceableBytes;
    v42 = 1;
    v12 = sub_1C4A0EA78((uint64_t)&v44, (unint64_t)&v38);
    v13 = &v44[40 * v45];
    v14 = *(_QWORD *)(v12 + 32);
    v15 = *(_OWORD *)(v12 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v12;
    *((_OWORD *)v13 + 1) = v15;
    *((_QWORD *)v13 + 4) = v14;
    LODWORD(v45) = v45 + 1;
  }
  v16 = 21;
  if (a3)
    v16 = 18;
  v17 = "\n Written Variables: ";
  if (a3)
    v17 = "\n Read Variables: ";
  v38 = v17;
  v39 = v16;
  sub_1C53B17B4((uint64_t)a4 + 80, (const void **)&v38);
  if ((_DWORD)v45)
  {
    v18 = 0;
    v19 = 0;
    v20 = a3 == 0;
    if (a3)
      v21 = "RVarName";
    else
      v21 = "WVarName";
    if (v20)
      v22 = "WVarSize";
    else
      v22 = "RVarSize";
    v26 = v22;
    do
    {
      v23 = v44;
      if (v18)
      {
        v38 = ", ";
        v39 = 2;
        sub_1C53B17B4((uint64_t)a4 + 80, (const void **)&v38);
      }
      if (v23[v18 + 16])
      {
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, v21, 8uLL, *(void **)&v23[v18], *(_QWORD *)&v23[v18 + 8]);
        sub_1C47E3888((uint64_t)a4, (uint64_t)__dst);
        if (v37 < 0)
          operator delete(__p);
        if ((v35 & 0x80000000) == 0)
          goto LABEL_31;
        v24 = (void **)__dst;
      }
      else
      {
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v30, v21, 8uLL, "<unknown>", 9uLL);
        sub_1C47E3888((uint64_t)a4, (uint64_t)v30);
        if (v33 < 0)
          operator delete(v32);
        if ((v31 & 0x80000000) == 0)
          goto LABEL_31;
        v24 = (void **)v30;
      }
      operator delete(*v24);
LABEL_31:
      v25 = &v23[v18];
      if (v25[32])
      {
        v38 = " (";
        v39 = 2;
        sub_1C53B17B4((uint64_t)a4 + 80, (const void **)&v38);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v27, v26, 8uLL, *((_QWORD *)v25 + 3));
        sub_1C47E3888((uint64_t)a4, (uint64_t)&v27);
        v38 = " bytes)";
        v39 = 7;
        sub_1C53B17B4((uint64_t)a4 + 80, (const void **)&v38);
        if (v29 < 0)
          operator delete(v28);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
      }
      ++v19;
      v18 += 40;
    }
    while (v19 < v45);
  }
  v38 = ".";
  v39 = 1;
  sub_1C53B17B4((uint64_t)a4 + 80, (const void **)&v38);
LABEL_39:
  if (v44 != v46)
    free(v44);
  if (v47 != v49)
    free(v47);
}

_BYTE *sub_1C5F4D2A4(_BYTE *result, int a2, int a3, uint64_t a4)
{
  _BYTE *v7;
  int v8;
  char v9[24];
  char v10[24];
  uint64_t v11;
  uint64_t v12;
  char v13[24];
  char v14[24];
  uint64_t v15;
  uint64_t v16;
  char v17[24];
  char v18[24];
  uint64_t v19;
  uint64_t v20;
  char v21[24];
  char v22[24];
  uint64_t v23;
  uint64_t v24;
  char v25[24];
  char v26[24];
  uint64_t v27;
  uint64_t v28;
  char v29[24];
  char v30[24];
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;

  v7 = result;
  if (result && *result)
  {
    v33 = " Inlined: ";
    v34 = 10;
    sub_1C53B17B4(a4 + 80, (const void **)&v33);
    v29[23] = 12;
    strcpy(v29, "StoreInlined");
    v30[23] = 4;
    strcpy(v30, "true");
    v31 = 0;
    v32 = 0;
    sub_1C47E3888(a4, (uint64_t)v29);
    v33 = ".";
    v34 = 1;
    result = (_BYTE *)sub_1C53B17B4(a4 + 80, (const void **)&v33);
  }
  if (a2)
  {
    v33 = " Volatile: ";
    v34 = 11;
    sub_1C53B17B4(a4 + 80, (const void **)&v33);
    v25[23] = 13;
    strcpy(v25, "StoreVolatile");
    v26[23] = 4;
    strcpy(v26, "true");
    v27 = 0;
    v28 = 0;
    sub_1C47E3888(a4, (uint64_t)v25);
    v33 = ".";
    v34 = 1;
    result = (_BYTE *)sub_1C53B17B4(a4 + 80, (const void **)&v33);
  }
  if (a3)
  {
    v33 = " Atomic: ";
    v34 = 9;
    sub_1C53B17B4(a4 + 80, (const void **)&v33);
    v21[23] = 11;
    strcpy(v21, "StoreAtomic");
    v22[23] = 4;
    strcpy(v22, "true");
    v23 = 0;
    v24 = 0;
    sub_1C47E3888(a4, (uint64_t)v21);
    v33 = ".";
    v34 = 1;
    result = (_BYTE *)sub_1C53B17B4(a4 + 80, (const void **)&v33);
  }
  if (v7)
  {
    v8 = *v7;
    if (!*v7 || !a3 || (a2 & 1) == 0)
    {
      *(_DWORD *)(a4 + 356) = *(_DWORD *)(a4 + 88);
      if (!v8)
      {
        v33 = " Inlined: ";
        v34 = 10;
        sub_1C53B17B4(a4 + 80, (const void **)&v33);
        v17[23] = 12;
        strcpy(v17, "StoreInlined");
        v18[23] = 5;
        strcpy(v18, "false");
        v19 = 0;
        v20 = 0;
        sub_1C47E3888(a4, (uint64_t)v17);
        v33 = ".";
        v34 = 1;
        result = (_BYTE *)sub_1C53B17B4(a4 + 80, (const void **)&v33);
      }
    }
  }
  else if (!a2 || (a3 & 1) == 0)
  {
    *(_DWORD *)(a4 + 356) = *(_DWORD *)(a4 + 88);
  }
  if ((a2 & 1) == 0)
  {
    v33 = " Volatile: ";
    v34 = 11;
    sub_1C53B17B4(a4 + 80, (const void **)&v33);
    v13[23] = 13;
    strcpy(v13, "StoreVolatile");
    v14[23] = 5;
    strcpy(v14, "false");
    v15 = 0;
    v16 = 0;
    sub_1C47E3888(a4, (uint64_t)v13);
    v33 = ".";
    v34 = 1;
    result = (_BYTE *)sub_1C53B17B4(a4 + 80, (const void **)&v33);
  }
  if ((a3 & 1) == 0)
  {
    v33 = " Atomic: ";
    v34 = 9;
    sub_1C53B17B4(a4 + 80, (const void **)&v33);
    v9[23] = 11;
    strcpy(v9, "StoreAtomic");
    v10[23] = 5;
    strcpy(v10, "false");
    v11 = 0;
    v12 = 0;
    sub_1C47E3888(a4, (uint64_t)v9);
    v33 = ".";
    v34 = 1;
    return (_BYTE *)sub_1C53B17B4(a4 + 80, (const void **)&v33);
  }
  return result;
}

void llvm::MemoryOpRemark::visitSizeOperand(llvm::MemoryOpRemark *this, llvm::Value *a2, llvm::DiagnosticInfoIROptimization *a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::string v6;
  void *__p;
  char v8;
  const char *v9;
  uint64_t v10;

  if (a2 && *((_BYTE *)a2 + 16) == 16)
  {
    v4 = (unint64_t *)((char *)a2 + 24);
    if (*((_DWORD *)a2 + 8) >= 0x41u)
      v4 = (unint64_t *)*v4;
    v5 = *v4;
    v9 = " Memory operation size: ";
    v10 = 24;
    sub_1C53B17B4((uint64_t)a3 + 80, (const void **)&v9);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v6, "StoreSize", 9uLL, v5);
    sub_1C47E3888((uint64_t)a3, (uint64_t)&v6);
    v9 = " bytes.";
    v10 = 7;
    sub_1C53B17B4((uint64_t)a3 + 80, (const void **)&v9);
    if (v8 < 0)
      operator delete(__p);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C5F4D744(uint64_t a1, _BYTE *a2, char a3, uint64_t a4)
{
  uint64_t v8;
  const void *v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  char v13;
  void *v14[2];
  char v15;
  void *v16;
  char v17;
  void *__dst[2];
  char v19;
  void *__p;
  char v21;
  const void *v22[2];

  v11 = "Call to ";
  v12 = 8;
  v8 = a4 + 80;
  sub_1C53B17B4(a4 + 80, (const void **)&v11);
  if ((a3 & 1) == 0)
  {
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "UnknownLibCall", 0xEuLL, "unknown", 7uLL);
    sub_1C47E3888(a4, (uint64_t)__dst);
    v11 = " function ";
    v12 = 10;
    sub_1C53B17B4(v8, (const void **)&v11);
    if (v21 < 0)
      operator delete(__p);
    if (v19 < 0)
      operator delete(__dst[0]);
  }
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v14, "Callee", 6uLL, a2);
  sub_1C47E3888(a4, (uint64_t)v14);
  (*(void (**)(void **__return_ptr, uint64_t, const char *, _QWORD))(*(_QWORD *)a1 + 16))(&v11, a1, "", 0);
  v9 = v11;
  if (v13 >= 0)
    v9 = &v11;
  v10 = (const void *)(v13 & 0x7F);
  if (v13 < 0)
    v10 = (const void *)v12;
  v22[0] = v9;
  v22[1] = v10;
  sub_1C53B17B4(v8, v22);
  if (v13 < 0)
    operator delete(v11);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14[0]);
}

__n128 llvm::MemoryOpRemark::visitVariable(uint64_t a1, llvm *this, uint64_t a3)
{
  uint64_t v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm *v15;
  int v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t SizeInBits;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __n128 result;
  _BOOL8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm *v41;
  int v42;
  int v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD v51[2];
  char v52;
  _QWORD *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  _BOOL8 v57;

  if (this && *((_BYTE *)this + 16) == 3)
  {
    sub_1C4768AD0(*(_QWORD *)(a1 + 32), *((_QWORD *)this + 3));
    if ((*((_BYTE *)this + 23) & 0x10) == 0)
    {
      v7 = 0;
      LOBYTE(v53) = 0;
LABEL_49:
      v55 = v7;
      v56 = v6;
      LOBYTE(v57) = 1;
LABEL_50:
      v46 = sub_1C4A0EA78(a3, (unint64_t)&v53);
      v47 = *(_QWORD *)a3 + 40 * *(unsigned int *)(a3 + 8);
      v48 = *(_QWORD *)(v46 + 32);
      result = *(__n128 *)(v46 + 16);
      *(_OWORD *)v47 = *(_OWORD *)v46;
      *(__n128 *)(v47 + 16) = result;
      *(_QWORD *)(v47 + 32) = v48;
      ++*(_DWORD *)(a3 + 8);
      return result;
    }
    v10 = ***(_QWORD ***)this;
    v11 = *(_QWORD *)(v10 + 152);
    v12 = *(unsigned int *)(v10 + 168);
    if ((_DWORD)v12)
    {
      LODWORD(v13) = (v12 - 1) & ((this >> 4) ^ (this >> 9));
      v14 = v11 + 16 * v13;
      v15 = *(llvm **)v14;
      if (*(llvm **)v14 == this)
      {
LABEL_48:
        v44 = *(uint64_t **)(v14 + 8);
        v45 = *v44;
        v53 = v44 + 2;
        v54 = v45;
        v7 = 1;
        goto LABEL_49;
      }
      v16 = 1;
      while (v15 != (llvm *)-4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(llvm **)(v11 + 16 * v13);
        if (v15 == this)
        {
          v14 = v11 + 16 * v13;
          goto LABEL_48;
        }
      }
    }
    v14 = v11 + 16 * v12;
    goto LABEL_48;
  }
  v8 = v51;
  llvm::FindDbgAddrUses((uint64_t)this, v51);
  if ((v51[0] & 4) != 0)
  {
    v8 = *(_QWORD **)(v51[0] & 0xFFFFFFFFFFFFFFF8);
    v9 = &v8[*(unsigned int *)((v51[0] & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    v9 = &v51[v51[0] > 7uLL];
  }
  if (v8 == v9)
  {
    sub_1C4DDA878(v51);
    if (!this)
      return result;
LABEL_31:
    if (*((_BYTE *)this + 16) != 59)
      return result;
    llvm::AllocaInst::getAllocationSizeInBits(this, *(const llvm::DataLayout **)(a1 + 32), (uint64_t)v51);
    if (v52)
    {
      v33 = (v51[0] & 7) == 0;
      if ((v51[0] & 7) != 0)
        v34 = 0;
      else
        v34 = v51[0] >> 3;
      v35 = v34 & 0x1FFFFFFFFFFFFF00;
      v34 = v34;
    }
    else
    {
      v33 = 0;
      v34 = 0;
      v35 = 0;
    }
    if ((*((_BYTE *)this + 23) & 0x10) == 0)
    {
      LOBYTE(v53) = 0;
      v55 = 0;
      v56 = v35 | v34;
      v57 = v33;
      if (!v33)
        return result;
      goto LABEL_50;
    }
    v36 = ***(_QWORD ***)this;
    v37 = *(_QWORD *)(v36 + 152);
    v38 = *(unsigned int *)(v36 + 168);
    if ((_DWORD)v38)
    {
      LODWORD(v39) = (v38 - 1) & ((this >> 4) ^ (this >> 9));
      v40 = v37 + 16 * v39;
      v41 = *(llvm **)v40;
      if (*(llvm **)v40 == this)
      {
LABEL_53:
        v49 = *(uint64_t **)(v40 + 8);
        v50 = *v49;
        v53 = v49 + 2;
        v54 = v50;
        v55 = 1;
        v56 = v35 | v34;
        v57 = v33;
        goto LABEL_50;
      }
      v42 = 1;
      while (v41 != (llvm *)-4096)
      {
        v43 = v39 + v42++;
        v39 = v43 & (v38 - 1);
        v41 = *(llvm **)(v37 + 16 * v39);
        if (v41 == this)
        {
          v40 = v37 + 16 * v39;
          goto LABEL_53;
        }
      }
    }
    v40 = v37 + 16 * v38;
    goto LABEL_53;
  }
  v18 = 0;
  do
  {
    while (1)
    {
      v19 = *(_QWORD *)(*v8 - 32 * (*(_DWORD *)(*v8 + 20) & 0x7FFFFFF) + 32);
      v20 = *(_QWORD *)(v19 + 24);
      if (!v20)
        break;
      SizeInBits = llvm::DIVariable::getSizeInBits(*(llvm::DIVariable **)(v19 + 24));
      if (v22 != 0 && (SizeInBits & 7) == 0)
        v23 = SizeInBits >> 3;
      else
        v23 = 0;
      v24 = *(_QWORD *)(v20 - 8 * *(unsigned int *)(v20 + 8) + 8);
      if (v24)
      {
        v25 = *(uint64_t **)(v24 + 8);
        v27 = *v25;
        v26 = v25 + 3;
        v24 = v27;
      }
      else
      {
        v26 = 0;
      }
      v53 = v26;
      v54 = v24;
      v18 = 1;
      v55 = 1;
      v56 = v23;
      v57 = (v22 != 0) & ((SizeInBits & 7) == 0);
      v28 = sub_1C4A0EA78(a3, (unint64_t)&v53);
      v29 = *(_QWORD *)a3 + 40 * *(unsigned int *)(a3 + 8);
      v30 = *(_QWORD *)(v28 + 32);
      v31 = *(_OWORD *)(v28 + 16);
      *(_OWORD *)v29 = *(_OWORD *)v28;
      *(_OWORD *)(v29 + 16) = v31;
      *(_QWORD *)(v29 + 32) = v30;
      ++*(_DWORD *)(a3 + 8);
      if (++v8 == v9)
      {
        sub_1C4DDA878(v51);
        return result;
      }
    }
    ++v8;
  }
  while (v8 != v9);
  sub_1C4DDA878(v51);
  if ((v18 & 1) == 0 && this)
    goto LABEL_31;
  return result;
}

uint64_t llvm::AutoInitRemark::canHandle(uint64_t ***this, const llvm::Instruction *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  llvm::AutoInitRemark **v9;
  llvm::AutoInitRemark *v10;
  llvm::AutoInitRemark **v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  llvm::AutoInitRemark **v24;
  llvm::AutoInitRemark *v25;
  llvm::AutoInitRemark **v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  llvm::AutoInitRemark **v40;
  llvm::AutoInitRemark *v41;
  llvm::AutoInitRemark **v42;
  llvm::AutoInitRemark *v43;
  llvm::AutoInitRemark *v44;

  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    return 0;
  v3 = ***this;
  v44 = (llvm::AutoInitRemark *)this;
  v4 = *(_DWORD *)(v3 + 2496);
  v5 = this >> 4;
  if (!v4)
  {
    v40 = 0;
LABEL_48:
    v9 = (llvm::AutoInitRemark **)sub_1C541AB24(v3 + 2480, (uint64_t)&v44, (uint64_t *)&v44, v40);
    v41 = v44;
    v9[3] = 0;
    v9[4] = 0;
    *v9 = v41;
    v9[1] = (llvm::AutoInitRemark *)(v9 + 3);
    v9[2] = (llvm::AutoInitRemark *)0x100000000;
    goto LABEL_12;
  }
  v6 = *(_QWORD *)(v3 + 2480);
  v7 = v4 - 1;
  v8 = v7 & (v5 ^ (this >> 9));
  v9 = (llvm::AutoInitRemark **)(v6 + 40 * v8);
  v10 = *v9;
  if (*v9 != (llvm::AutoInitRemark *)this)
  {
    v11 = 0;
    v12 = 1;
    while (v10 != (llvm::AutoInitRemark *)-4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == (llvm::AutoInitRemark *)-8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (llvm::AutoInitRemark **)(v6 + 40 * v8);
      v10 = *v9;
      if (*v9 == (llvm::AutoInitRemark *)this)
        goto LABEL_12;
    }
    if (v11)
      v40 = v11;
    else
      v40 = v9;
    goto LABEL_48;
  }
LABEL_12:
  v15 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v15)
    return 0;
  v16 = (_QWORD *)((char *)v9[1] + 8);
  v17 = 16 * v15;
  while (*((_DWORD *)v16 - 2) != 30)
  {
    result = 0;
    v16 += 2;
    v17 -= 16;
    if (!v17)
      return result;
  }
  if (!*v16)
    return 0;
  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    goto LABEL_34;
  v19 = ***this;
  v44 = (llvm::AutoInitRemark *)this;
  v20 = *(_DWORD *)(v19 + 2496);
  if (v20)
  {
    v21 = *(_QWORD *)(v19 + 2480);
    v22 = v20 - 1;
    v23 = v22 & (v5 ^ (this >> 9));
    v24 = (llvm::AutoInitRemark **)(v21 + 40 * v23);
    v25 = *v24;
    if (*v24 == (llvm::AutoInitRemark *)this)
      goto LABEL_29;
    v26 = 0;
    v27 = 1;
    while (v25 != (llvm::AutoInitRemark *)-4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == (llvm::AutoInitRemark *)-8192;
      if (v28)
        v26 = v24;
      v29 = v23 + v27++;
      v23 = v29 & v22;
      v24 = (llvm::AutoInitRemark **)(v21 + 40 * v23);
      v25 = *v24;
      if (*v24 == (llvm::AutoInitRemark *)this)
        goto LABEL_29;
    }
    if (v26)
      v42 = v26;
    else
      v42 = v24;
  }
  else
  {
    v42 = 0;
  }
  v24 = (llvm::AutoInitRemark **)sub_1C541AB24(v19 + 2480, (uint64_t)&v44, (uint64_t *)&v44, v42);
  v43 = v44;
  v24[3] = 0;
  v24[4] = 0;
  *v24 = v43;
  v24[1] = (llvm::AutoInitRemark *)(v24 + 3);
  v24[2] = (llvm::AutoInitRemark *)0x100000000;
LABEL_29:
  v30 = *((unsigned int *)v24 + 4);
  if (!(_DWORD)v30)
  {
LABEL_34:
    v33 = 0;
    goto LABEL_35;
  }
  v31 = (_QWORD *)((char *)v24[1] + 8);
  v32 = 16 * v30;
  while (*((_DWORD *)v31 - 2) != 30)
  {
    v33 = 0;
    v31 += 2;
    v32 -= 16;
    if (!v32)
      goto LABEL_35;
  }
  v33 = *v31;
LABEL_35:
  v34 = *(unsigned int *)(v33 + 8);
  if (!(_DWORD)v34)
    return 0;
  v35 = -8 * v34;
  while (1)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v33 + v35) + 8);
    if (*(_QWORD *)v36 == 9)
    {
      v37 = *(_QWORD *)(v36 + 24);
      v38 = *(unsigned __int8 *)(v36 + 32);
      if (v37 == 0x696E692D6F747561 && v38 == 116)
        break;
    }
    result = 0;
    v35 += 8;
    if (!v35)
      return result;
  }
  return 1;
}

uint64_t llvm::memtag::forAllReachableExits(llvm::DominatorTree *a1, llvm::PostDominatorTree *this, llvm::Instruction *a3, const llvm::Instruction ***a4, uint64_t a5, void (*a6)(uint64_t, const llvm::Instruction *), uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  const llvm::Instruction *v18;
  uint64_t v19;
  uint64_t v20;
  const llvm::Value **v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  const llvm::Instruction **v25;
  uint64_t v26;
  const llvm::Instruction *v27;
  uint64_t *v28;
  uint64_t v29;
  const llvm::Instruction *v30;
  void (*v32)(uint64_t, const llvm::Instruction *);
  void *v33;
  uint64_t v34;
  _QWORD v35[9];

  v35[8] = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a4 + 2) == 1 && llvm::PostDominatorTree::dominates(this, **a4, a3))
  {
    a6(a7, **a4);
    return 1;
  }
  else
  {
    v33 = v35;
    v34 = 0x800000000;
    v14 = *(unsigned int *)(a5 + 8);
    if (!(_DWORD)v14)
      goto LABEL_19;
    v32 = a6;
    v15 = 0;
    v16 = *(uint64_t **)a5;
    v17 = *(_QWORD *)a5 + 8 * v14;
    do
    {
      v18 = (const llvm::Instruction *)*v16;
      if (llvm::isPotentiallyReachable((uint64_t)a3, *v16, 0, (uint64_t)a1, 0))
      {
        v19 = v34;
        if (v34 >= (unint64_t)HIDWORD(v34))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v35, v34 + 1, 8);
          v19 = v34;
        }
        *((_QWORD *)v33 + v19) = v18;
        LODWORD(v34) = v34 + 1;
        v20 = *((unsigned int *)a4 + 2);
        if ((_DWORD)v20)
        {
          v21 = *a4;
          v22 = 8 * v20;
          while (!llvm::DominatorTree::dominates(a1, *v21, v18))
          {
            ++v21;
            v22 -= 8;
            if (!v22)
            {
              LODWORD(v20) = 0;
              goto LABEL_15;
            }
          }
          LODWORD(v20) = 1;
        }
LABEL_15:
        v15 += v20;
      }
      ++v16;
    }
    while (v16 != (uint64_t *)v17);
    v23 = (_DWORD)v34 == v15;
    a6 = v32;
    if (v23)
    {
LABEL_19:
      v24 = *((unsigned int *)a4 + 2);
      if ((_DWORD)v24)
      {
        v25 = *a4;
        v26 = 8 * v24;
        do
        {
          v27 = *v25++;
          a6(a7, v27);
          v26 -= 8;
        }
        while (v26);
      }
      v13 = 1;
    }
    else
    {
      if ((_DWORD)v34)
      {
        v28 = (uint64_t *)v33;
        v29 = 8 * v34;
        do
        {
          v30 = (const llvm::Instruction *)*v28++;
          v32(a7, v30);
          v29 -= 8;
        }
        while (v29);
      }
      v13 = 0;
    }
    if (v33 != v35)
      free(v33);
  }
  return v13;
}

uint64_t llvm::memtag::isStandardLifetime(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v5;
  uint64_t result;
  unint64_t i;
  unint64_t j;

  if (*(_DWORD *)(a1 + 8) != 1)
    return 0;
  v5 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v5)
    return 0;
  if (v5 == 1)
    return 1;
  if (v5 > a4)
    return 0;
  for (i = 0; i < v5; ++i)
  {
    if (v5)
    {
      for (j = 0; j < v5; ++j)
      {
        if (i != j)
        {
          if ((llvm::isPotentiallyReachable(*(_QWORD *)(*(_QWORD *)a2 + 8 * i), *(_QWORD *)(*(_QWORD *)a2 + 8 * j), 0, a3, 0) & 1) != 0)return 0;
          v5 = *(unsigned int *)(a2 + 8);
        }
      }
    }
    result = 1;
  }
  return result;
}

uint64_t llvm::memtag::getUntagLocationIfFunctionExit(uint64_t this, llvm::Instruction *a2)
{
  uint64_t v2;
  int v3;

  v2 = this;
  v3 = *(unsigned __int8 *)(this + 16);
  if (v3 == 29)
  {
    this = llvm::BasicBlock::getTerminatingMustTailCall(*(llvm::BasicBlock **)(this + 40));
    if (!this)
      return v2;
  }
  else if (v3 != 36 && v3 != 34)
  {
    return 0;
  }
  return this;
}

uint64_t llvm::memtag::StackInfoBuilder::visit(llvm::memtag::StackInfoBuilder *this, llvm::Instruction *a2)
{
  llvm::Instruction *v2;
  llvm::Instruction *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31[2];

  v3 = a2;
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 == 84)
  {
    v6 = *((_QWORD *)a2 + 8);
    if (v6 && *(char *)(v6 + 17) < 0 || llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 47))
      *((_BYTE *)this + 176) = 1;
    v5 = *((unsigned __int8 *)v3 + 16);
  }
  if (v5 == 59)
    v7 = (uint64_t)v3;
  else
    v7 = 0;
  v31[0] = v7;
  if (v5 == 59)
  {
    v8 = *((_QWORD *)this + 26);
    if (v8)
    {
      result = (*(uint64_t (**)(uint64_t, llvm::Instruction *))(*(_QWORD *)v8 + 48))(v8, v3);
      if ((_DWORD)result)
      {
        result = sub_1C63B32B0((uint64_t)this, v31);
        *(_QWORD *)result = v3;
      }
      return result;
    }
    goto LABEL_59;
  }
  if (v5 == 84)
  {
    v10 = *((_QWORD *)v3 - 4);
    if (v10)
    {
      if (!*(_BYTE *)(v10 + 16)
        && *(_QWORD *)(v10 + 24) == *((_QWORD *)v3 + 9)
        && (*(_BYTE *)(v10 + 33) & 0x20) != 0
        && (*(_DWORD *)(v10 + 36) - 167) <= 1)
      {
        result = llvm::findAllocaForValue(((llvm **)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF))[4], 0);
        v31[0] = result;
        if (result)
        {
          v11 = result;
          v12 = *((_QWORD *)this + 26);
          if (!v12)
          {
LABEL_59:
            sub_1C485C2F0();
            goto LABEL_60;
          }
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, v11);
          if (!(_DWORD)result)
            return result;
          v13 = *(_DWORD *)(*((_QWORD *)v3 - 4) + 36);
          result = sub_1C63B32B0((uint64_t)this, v31);
          v14 = result;
          if (v13 == 168)
          {
            v2 = (llvm::Instruction *)(result + 16);
            v15 = *(unsigned int *)(result + 16);
            v16 = (_QWORD *)(result + 8);
            if (v15 >= *(_DWORD *)(result + 20))
            {
              v26 = (_QWORD *)(result + 8);
              result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result + 8, result + 24, v15 + 1, 8);
              v16 = v26;
              LODWORD(v15) = *(_DWORD *)(v14 + 16);
            }
          }
          else
          {
            v2 = (llvm::Instruction *)(result + 48);
            v15 = *(unsigned int *)(result + 48);
            v16 = (_QWORD *)(result + 40);
            if (v15 >= *(_DWORD *)(result + 52))
            {
              v28 = (_QWORD *)(result + 40);
              result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result + 40, result + 56, v15 + 1, 8);
              v16 = v28;
              LODWORD(v15) = *(_DWORD *)(v14 + 48);
            }
          }
        }
        else
        {
          v2 = (llvm::memtag::StackInfoBuilder *)((char *)this + 56);
          v15 = *((unsigned int *)this + 14);
          v16 = (_QWORD *)((char *)this + 48);
          if (v15 >= *((_DWORD *)this + 15))
          {
LABEL_60:
            v29 = v16;
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v16, (uint64_t)this + 64, v15 + 1, 8);
            v16 = v29;
            LODWORD(v15) = *((_DWORD *)this + 14);
          }
        }
        *(_QWORD *)(*v16 + 8 * v15) = v3;
        ++*(_DWORD *)v2;
        return result;
      }
    }
  }
  result = sub_1C53923FC((uint64_t)v3);
  if ((_DWORD)result)
    v2 = v3;
  else
    v2 = 0;
  if ((_DWORD)result)
  {
    result = llvm::DbgVariableIntrinsic::location_ops((uint64_t)v3, v31);
    v18 = v31[0];
    v17 = v31[1];
    while (v18 != v17)
    {
      v19 = (unint64_t *)(v18 & 0xFFFFFFFFFFFFFFF8);
      v20 = v18 & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 4) != 0)
        v20 = *v19;
      v21 = *(_QWORD *)(v20 + 128);
      if (v21 && *(_BYTE *)(v21 + 16) == 59)
      {
        v30 = *(_QWORD *)(v20 + 128);
        v22 = *((_QWORD *)this + 26);
        if (!v22)
          goto LABEL_59;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
        if ((_DWORD)result)
        {
          result = sub_1C63B32B0((uint64_t)this, &v30);
          v23 = *(unsigned int *)(result + 80);
          if (!(_DWORD)v23 || *(llvm::Instruction **)(*(_QWORD *)(result + 72) + 8 * v23 - 8) != v2)
          {
            if (v23 >= *(unsigned int *)(result + 84))
            {
              v27 = result;
              llvm::SmallVectorBase<unsigned int>::grow_pod(result + 72, result + 88, v23 + 1, 8);
              result = v27;
              v23 = *(unsigned int *)(v27 + 80);
            }
            *(_QWORD *)(*(_QWORD *)(result + 72) + 8 * v23) = v3;
            ++*(_DWORD *)(result + 80);
          }
        }
      }
      if ((v18 & 4) != 0)
        v18 = (unint64_t)(v19 + 1) | 4;
      else
        v18 = (uint64_t)(v19 + 17);
    }
  }
  v24 = *((unsigned __int8 *)v3 + 16);
  if (v24 != 36 && v24 != 34)
  {
    if (v24 != 29)
      return result;
    result = llvm::BasicBlock::getTerminatingMustTailCall(*((llvm::BasicBlock **)v3 + 5));
    if (result)
      v3 = (llvm::Instruction *)result;
  }
  v25 = *((unsigned int *)this + 26);
  if (v25 >= *((_DWORD *)this + 27))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 96, (uint64_t)this + 112, v25 + 1, 8);
    LODWORD(v25) = *((_DWORD *)this + 26);
  }
  *(_QWORD *)(*((_QWORD *)this + 12) + 8 * v25) = v3;
  ++*((_DWORD *)this + 26);
  return result;
}

void llvm::memtag::alignAndPadAlloca(llvm::AllocaInst **a1, const llvm::AllocaInst *a2)
{
  char v2;
  llvm::AllocaInst *v4;
  __int16 v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t AllocaSizeInBytes;
  uint64_t v9;
  llvm::Type *v10;
  llvm::AllocaInst *v11;
  int isArrayAllocation;
  uint64_t **v13;
  uint64_t v14;
  llvm::Type **v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  llvm::PointerType *v19;
  _DWORD *v20;
  llvm::AllocaInst *v21;
  llvm::Type *v22;
  llvm::Value *v23;
  llvm::AllocaInst *v24;
  int v25;
  unsigned int v26;
  _DWORD *v27;
  llvm::Value *v28;
  llvm::AllocaInst *v29;
  uint64_t v30;
  llvm::AllocaInst *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD v34[4];
  __int16 v35;
  uint64_t v36;

  v2 = (char)a2;
  v36 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = *((_WORD *)v4 + 9);
  v6 = v5 & 0x3F;
  if ((v5 & 0x3Fu) <= a2)
    v6 = a2;
  *((_WORD *)v4 + 9) = v5 & 0xFFC0 | v6;
  v7 = ***(_QWORD ***)(*((_QWORD *)v4 + 5) + 56);
  AllocaSizeInBytes = llvm::memtag::getAllocaSizeInBytes(v4, a2);
  v9 = ((1 << v2) + AllocaSizeInBytes - 1) & -(1 << v2);
  v10 = (llvm::Type *)(v9 - AllocaSizeInBytes);
  if (v9 != AllocaSizeInBytes)
  {
    v11 = *a1;
    isArrayAllocation = llvm::AllocaInst::isArrayAllocation(*a1);
    v13 = (uint64_t **)*((_QWORD *)v11 + 8);
    if (isArrayAllocation)
    {
      v14 = *((_QWORD *)v11 - 4);
      v15 = (llvm::Type **)(v14 + 24);
      if (*(_DWORD *)(v14 + 32) >= 0x41u)
        v15 = (llvm::Type **)*v15;
      llvm::ArrayType::get(*((llvm::ArrayType **)v11 + 8), *v15);
      v13 = v16;
    }
    llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)v7 + 1912), v10);
    v17 = *v13;
    v34[0] = v13;
    v34[1] = v18;
    v19 = (llvm::PointerType *)llvm::StructType::get(v17, (uint64_t)v34, 2, 0);
    v20 = operator new(0x68uLL);
    v20[13] = v20[13] & 0x38000000 | 1;
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = 0;
    *((_QWORD *)v20 + 3) = v20 + 8;
    v21 = *a1;
    v22 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)*a1 + 8) >> 8);
    v35 = 257;
    v23 = (llvm::Value *)llvm::AllocaInst::AllocaInst((uint64_t)(v20 + 8), v19, v22, 0, (uint64_t)v34, (uint64_t)v21);
    llvm::Value::takeName(v23, *a1);
    v24 = *a1;
    v25 = *((_WORD *)v20 + 25) & 0xFFC0 | __clz(1 << *((_WORD *)*a1 + 9)) ^ 0x3F;
    *((_WORD *)v20 + 25) = v25;
    v26 = v25 & 0xFFFFFFBF | (((*((unsigned __int16 *)v24 + 9) >> 6) & 1) << 6);
    *((_WORD *)v20 + 25) = v26;
    *((_WORD *)v20 + 25) = v26 & 0xFF7F | *((_WORD *)v24 + 9) & 0x80;
    llvm::Instruction::copyMetadata((uint64_t)(v20 + 8), (uint64_t)v24, 0, 0);
    v27 = operator new(0x60uLL);
    v28 = (llvm::Value *)(v27 + 8);
    v27[13] = v27[13] & 0x38000000 | 1;
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 2) = 0;
    *((_QWORD *)v27 + 3) = v27 + 8;
    v29 = *a1;
    v30 = *(_QWORD *)*a1;
    v35 = 257;
    llvm::BitCastInst::BitCastInst((uint64_t)(v27 + 8), (uint64_t)(v20 + 8), v30, (uint64_t)v34, (uint64_t)v29);
    llvm::Value::doRAUW(*a1, v28, (llvm::Value *)1);
    v31 = *a1;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)*a1 + 5) + 40, (uint64_t ***)*a1);
    v32 = *((_QWORD *)v31 + 3);
    v33 = (_QWORD *)*((_QWORD *)v31 + 4);
    *v33 = v32;
    *(_QWORD *)(v32 + 8) = v33;
    *((_QWORD *)v31 + 3) = 0;
    *((_QWORD *)v31 + 4) = 0;
    llvm::Value::deleteValue(v31);
    *a1 = (llvm::AllocaInst *)(v20 + 8);
  }
}

void sub_1C5F4E798(void **a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *v5 = *a2;
    v6 = v5 + 14;
    sub_1C63B356C(v5 + 1, (uint64_t)(a2 + 1));
    goto LABEL_19;
  }
  v7 = 0x6DB6DB6DB6DB6DB7 * (((char *)v5 - (_BYTE *)*a1) >> 4);
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) > 0x249249249249249)
    abort();
  v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (_QWORD)*a1) >> 4);
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0x124924924924924)
    v10 = 0x249249249249249;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 > 0x249249249249249)
      sub_1C4764EE4();
    v11 = (char *)operator new(112 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[112 * v7];
  v13 = &v11[112 * v10];
  *(_QWORD *)v12 = *a2;
  v6 = v12 + 112;
  sub_1C63B356C((_QWORD *)v12 + 1, (uint64_t)(a2 + 1));
  v15 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v14)
      goto LABEL_19;
    goto LABEL_18;
  }
  do
  {
    v16 = *((_QWORD *)v14 - 14);
    v14 -= 112;
    *((_QWORD *)v12 - 14) = v16;
    v12 -= 112;
    sub_1C63B356C((_QWORD *)v12 + 1, (uint64_t)(v14 + 8));
  }
  while (v14 != v15);
  v14 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v12;
  a1[1] = v6;
  a1[2] = v13;
  if (v17 != v14)
  {
    do
    {
      v18 = v17 - 112;
      sub_1C62B1704((_QWORD *)v17 - 13);
      v17 = v18;
    }
    while (v18 != v14);
  }
  if (v14)
LABEL_18:
    operator delete(v14);
LABEL_19:
  a1[1] = v6;
}

_QWORD *llvm::PromotePass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  const llvm::AllocaInst *v6;
  uint64_t ResultImpl;
  char v8;

  v6 = (const llvm::AllocaInst *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1)+ 8);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, a1);
  v8 = sub_1C5F4E9D8(a1, v6, ResultImpl + 8);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v8 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C5F4E9D8(uint64_t a1, const llvm::AllocaInst *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  llvm **v8;
  llvm **v9;
  llvm **v10;
  unsigned __int8 *v11;
  int v12;
  llvm *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  llvm **v18;
  llvm **v19;
  llvm *v20;

  v3 = *(_QWORD *)(a1 + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v4 + 48);
  if (v6 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = v8;
      do
      {
        v11 = (unsigned __int8 *)(v6 - 24);
        if (!v6)
          v11 = 0;
        v12 = v11[16];
        if (v12 == 59)
          v13 = (llvm *)v11;
        else
          v13 = 0;
        if (v6 && v12 == 59 && llvm::isAllocaPromotable(v13, a2))
        {
          if (v10 >= v9)
          {
            v14 = v10 - v8;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 61)
              abort();
            if (((char *)v9 - (char *)v8) >> 2 > v15)
              v15 = ((char *)v9 - (char *)v8) >> 2;
            if ((unint64_t)((char *)v9 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
              v16 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v16 = v15;
            if (v16)
            {
              if (v16 >> 61)
                sub_1C4764EE4();
              v17 = (char *)operator new(8 * v16);
            }
            else
            {
              v17 = 0;
            }
            v18 = (llvm **)&v17[8 * v14];
            *v18 = v13;
            v19 = v18 + 1;
            while (v10 != v8)
            {
              v20 = *--v10;
              *--v18 = v20;
            }
            v9 = (llvm **)&v17[8 * v16];
            if (v8)
              operator delete(v8);
            v10 = v19;
            v8 = v18;
          }
          else
          {
            *v10++ = v13;
          }
        }
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6 != v5);
      if (v8 == v10)
        break;
      llvm::PromoteMemToReg(v8, v10 - v8, a2, a3);
      v5 = *(_QWORD *)(v4 + 40);
      v6 = *(_QWORD *)(v4 + 48);
      v7 = 1;
      if (v6 == v5)
      {
        if (!v8)
          return v7 & 1;
        goto LABEL_40;
      }
    }
    v8 = v10;
    if (!v10)
      return v7 & 1;
LABEL_40:
    operator delete(v8);
  }
  return v7 & 1;
}

void llvm::initializePromoteLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED837730);
  if (v2 != -1)
  {
    v5[0] = sub_1C5F4EBD0;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED837730, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5F4EBD0(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeAssumptionCacheTrackerPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Promote Memory to Register";
  *(_QWORD *)(v2 + 8) = 26;
  *(_QWORD *)(v2 + 16) = "mem2reg";
  *(_QWORD *)(v2 + 24) = 7;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5885;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5F4ED34;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5F4EC6C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5885;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81A9DA8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED837730);
  if (v3 != -1)
  {
    v7[0] = sub_1C5F4EBD0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED837730, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5F4ED34()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5F4EC6C(v0);
}

void sub_1C5F4ED60(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5F4ED84(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C5F4EDC8(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  char **v5;
  char *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  const llvm::AllocaInst *v10;
  llvm::AssumptionCacheTracker *v11;
  uint64_t AssumptionCache;

  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::DominatorTreeWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::DominatorTreeWrapperPass::ID);
  v8 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::AssumptionCacheTracker::ID);
  v10 = (const llvm::AllocaInst *)(v7 + 32);
  v11 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v11, a2);
  return sub_1C5F4E9D8((uint64_t)a2, v10, AssumptionCache);
}

void llvm::initializeMetaRenamerPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED837738);
  if (v2 != -1)
  {
    v5[0] = sub_1C5F4EEE0;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED837738, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5F4EEE0(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Assign new names to everything";
  *(_QWORD *)(v2 + 8) = 30;
  *(_QWORD *)(v2 + 16) = "metarenamer";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5888;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5F4FA50;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5F4EF74(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5888;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81A9E48;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED837738);
  if (v3 != -1)
  {
    v7[0] = sub_1C5F4EEE0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED837738, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C5F4F03C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t ***), uint64_t a3)
{
  char *v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t i;
  uint64_t ***v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ****v24;
  uint64_t ***v25;
  int v26;
  int v27;
  uint64_t ***v28;
  size_t v29;
  char *v30;
  unint64_t v31;
  char *v33;
  char *v34;
  size_t v35;
  uint64_t j;
  uint64_t ***v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t ****v42;
  uint64_t ***v43;
  int v44;
  int v45;
  uint64_t ***v46;
  size_t v47;
  char *v48;
  unint64_t v49;
  const void **v51;
  const void **v52;
  size_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  size_t *v57;
  const void *v58;
  size_t v59;
  size_t v60;
  const void **v61;
  const void **v62;
  size_t v63;
  char *v64;
  unsigned __int8 *v65;
  size_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t ***v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t ****v75;
  uint64_t ***v76;
  int v77;
  int v78;
  uint64_t ***v79;
  char *v80;
  size_t v81;
  unint64_t v82;
  llvm::Module **v84;
  const void **v85;
  const void **v86;
  size_t v87;
  char *v88;
  char v89;
  uint64_t ***v90;
  uint64_t ***v91;
  uint64_t ***v92;
  uint64_t ***v93;
  uint64_t ***v94;
  uint64_t ***v95;
  uint64_t **v96;
  uint64_t **k;
  uint64_t ***v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t ****v103;
  uint64_t ***v104;
  int v105;
  int v106;
  uint64_t ***v107;
  char *v108;
  size_t v109;
  size_t v110;
  llvm::Module *v112;
  uint64_t v113;
  _QWORD v116[4];
  __int16 v117;
  _QWORD v118[2];
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  void *__p;
  uint64_t *v130;
  uint64_t v131;
  char v132;
  void *v133;
  __int128 v134;
  uint64_t v135;
  __int16 v136;
  void *v137;
  uint64_t v138;
  _BYTE v139[128];
  void *v140;
  uint64_t v141;
  _BYTE v142[128];
  void *v143;
  uint64_t v144;
  _BYTE v145[128];
  char *v146;
  uint64_t v147;
  _QWORD v148[18];

  v148[16] = *MEMORY[0x1E0C80C00];
  v3 = *(char **)(a1 + 168);
  v4 = *(_BYTE *)(a1 + 191);
  v5 = v4;
  if (v4 >= 0)
    v3 = (char *)(a1 + 168);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = v4 & 0x7F;
  if (v5 >= 0)
    v6 = v7;
  if (v6)
  {
    LODWORD(v8) = 0;
    do
    {
      v9 = *v3++;
      v8 = (v8 + v9);
      --v6;
    }
    while (v6);
  }
  else
  {
    v8 = 0;
  }
  v146 = (char *)v148;
  v147 = 0x800000000;
  v143 = v145;
  v144 = 0x800000000;
  v140 = v142;
  v141 = 0x800000000;
  v137 = v139;
  v138 = 0x800000000;
  if (byte_1ED827A8F >= 0)
    v10 = byte_1ED827A8F & 0x7F;
  else
    v10 = qword_1ED827A80;
  if (byte_1ED827A8F >= 0)
    v11 = &qword_1ED827A78;
  else
    v11 = (uint64_t *)qword_1ED827A78;
  sub_1C5F4FD5C((uint64_t)v11, v10, (uint64_t)&v146);
  if (byte_1ED827B77 >= 0)
    v12 = byte_1ED827B77 & 0x7F;
  else
    v12 = unk_1ED827B68;
  if (byte_1ED827B77 >= 0)
    v13 = &qword_1ED827B60;
  else
    v13 = (uint64_t *)qword_1ED827B60;
  sub_1C5F4FD5C((uint64_t)v13, v12, (uint64_t)&v143);
  if (byte_1ED827C5F >= 0)
    v14 = byte_1ED827C5F & 0x7F;
  else
    v14 = qword_1ED827C50;
  if (byte_1ED827C5F >= 0)
    v15 = &qword_1ED827C48;
  else
    v15 = (uint64_t *)qword_1ED827C48;
  sub_1C5F4FD5C((uint64_t)v15, v14, (uint64_t)&v140);
  if (byte_1ED8279A7 >= 0)
    v16 = byte_1ED8279A7 & 0x7F;
  else
    v16 = unk_1ED827998;
  if (byte_1ED8279A7 >= 0)
    v17 = &qword_1ED827990;
  else
    v17 = (uint64_t *)qword_1ED827990;
  sub_1C5F4FD5C((uint64_t)v17, v16, (uint64_t)&v137);
  for (i = *(_QWORD *)(a1 + 48); i != a1 + 40; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v19 = (uint64_t ***)(i - 48);
    else
      v19 = 0;
    if ((*((_BYTE *)v19 + 23) & 0x10) == 0)
    {
      v29 = 0;
      v30 = &byte_1C871356D;
LABEL_54:
      if ((_DWORD)v147)
      {
        v33 = v146;
        v34 = &v146[16 * v147];
        while (1)
        {
          v35 = *((_QWORD *)v33 + 1);
          if (v29 >= v35 && (!v35 || !memcmp(v30, *(const void **)v33, v35)))
            break;
          v33 += 16;
          if (v33 == v34)
            goto LABEL_60;
        }
      }
      else
      {
LABEL_60:
        v133 = "alias";
        v136 = 259;
        llvm::Value::setName(v19, (uint64_t)&v133);
      }
      continue;
    }
    v20 = ***v19;
    v21 = *(_QWORD *)(v20 + 152);
    v22 = *(unsigned int *)(v20 + 168);
    if ((_DWORD)v22)
    {
      LODWORD(v23) = (v22 - 1) & ((v19 >> 4) ^ (v19 >> 9));
      v24 = (uint64_t ****)(v21 + 16 * v23);
      v25 = *v24;
      if (*v24 == v19)
        goto LABEL_46;
      v26 = 1;
      while (v25 != (uint64_t ***)-4096)
      {
        v27 = v23 + v26++;
        v23 = v27 & (v22 - 1);
        v25 = *(uint64_t ****)(v21 + 16 * v23);
        if (v25 == v19)
        {
          v24 = (uint64_t ****)(v21 + 16 * v23);
          goto LABEL_46;
        }
      }
    }
    v24 = (uint64_t ****)(v21 + 16 * v22);
LABEL_46:
    v28 = v24[1];
    v31 = (unint64_t)*v28;
    v30 = (char *)(v28 + 2);
    v29 = v31;
    if (v31 >= 5)
    {
      if (*(_DWORD *)v30 == 1836477548 && v30[4] == 46)
        continue;
    }
    else if (!v29)
    {
      goto LABEL_54;
    }
    if (*v30 != 1)
      goto LABEL_54;
  }
  for (j = *(_QWORD *)(a1 + 16); j != a1 + 8; j = *(_QWORD *)(j + 8))
  {
    if (j)
      v37 = (uint64_t ***)(j - 56);
    else
      v37 = 0;
    if ((*((_BYTE *)v37 + 23) & 0x10) == 0)
    {
      v47 = 0;
      v48 = &byte_1C871356D;
LABEL_84:
      if ((_DWORD)v144)
      {
        v51 = (const void **)v143;
        v52 = (const void **)((char *)v143 + 16 * v144);
        while (1)
        {
          v53 = (size_t)v51[1];
          if (v47 >= v53 && (!v53 || !memcmp(v48, *v51, v53)))
            break;
          v51 += 2;
          if (v51 == v52)
            goto LABEL_90;
        }
      }
      else
      {
LABEL_90:
        v133 = "global";
        v136 = 259;
        llvm::Value::setName(v37, (uint64_t)&v133);
      }
      continue;
    }
    v38 = ***v37;
    v39 = *(_QWORD *)(v38 + 152);
    v40 = *(unsigned int *)(v38 + 168);
    if ((_DWORD)v40)
    {
      LODWORD(v41) = (v40 - 1) & ((v37 >> 4) ^ (v37 >> 9));
      v42 = (uint64_t ****)(v39 + 16 * v41);
      v43 = *v42;
      if (*v42 == v37)
        goto LABEL_76;
      v44 = 1;
      while (v43 != (uint64_t ***)-4096)
      {
        v45 = v41 + v44++;
        v41 = v45 & (v40 - 1);
        v43 = *(uint64_t ****)(v39 + 16 * v41);
        if (v43 == v37)
        {
          v42 = (uint64_t ****)(v39 + 16 * v41);
          goto LABEL_76;
        }
      }
    }
    v42 = (uint64_t ****)(v39 + 16 * v40);
LABEL_76:
    v46 = v42[1];
    v49 = (unint64_t)*v46;
    v48 = (char *)(v46 + 2);
    v47 = v49;
    if (v49 >= 5)
    {
      if (*(_DWORD *)v48 == 1836477548 && v48[4] == 46)
        continue;
    }
    else if (!v47)
    {
      goto LABEL_84;
    }
    if (*v48 != 1)
      goto LABEL_84;
  }
  v118[0] = 0;
  v118[1] = 0;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v130 = 0;
  v131 = 0;
  __p = 0;
  v132 = 0;
  llvm::TypeFinder::run((llvm::TypeFinder *)v118, (const llvm::Module *)a1, 1);
  v54 = (uint64_t *)__p;
  v55 = v130;
  if (__p != v130)
  {
    do
    {
      v56 = *v54;
      v57 = *(size_t **)(*v54 + 24);
      if (v57)
      {
        if ((*(_BYTE *)(v56 + 9) & 4) == 0)
        {
          v60 = *v57;
          v58 = v57 + 2;
          v59 = v60;
          if (v60)
          {
            if ((_DWORD)v141)
            {
              v61 = (const void **)v140;
              v62 = (const void **)((char *)v140 + 16 * v141);
              while (1)
              {
                v63 = (size_t)v61[1];
                if (v59 >= v63 && (!v63 || !memcmp(v58, *v61, v63)))
                  break;
                v61 += 2;
                if (v61 == v62)
                  goto LABEL_104;
              }
            }
            else
            {
LABEL_104:
              v133 = &v135;
              v134 = xmmword_1C85F20B0;
              v8 = 1103515245 * v8 + 12345;
              v64 = off_1E81A9ED8[(unsigned __int16)((WORD1(v8) & 0x7FFF)
                                                   - 17
                                                   * ((unsigned __int16)((30841 * (WORD1(v8) & 0x7FFF)) >> 16) >> 3))];
              if (*v64)
              {
                v116[0] = "struct.";
                v116[2] = v64;
                v117 = 771;
                llvm::Twine::toVector((uint64_t)v116, (uint64_t)&v133);
                v65 = (unsigned __int8 *)v133;
                v66 = v134;
              }
              else
              {
                v66 = 7;
                v65 = "struct.";
              }
              llvm::StructType::setName(v56, v65, v66);
              if (v133 != &v135)
                free(v133);
            }
          }
        }
      }
      ++v54;
    }
    while (v54 != v55);
  }
  v67 = a1 + 24;
  v68 = *(_QWORD *)(a1 + 32);
  if (v68 != a1 + 24)
  {
    v113 = a1 + 24;
    do
    {
      if (v68)
        v69 = (uint64_t ***)(v68 - 56);
      else
        v69 = 0;
      v70 = v69 >> 4;
      if ((*((_BYTE *)v69 + 23) & 0x10) == 0)
      {
        v81 = 0;
        LODWORD(v116[0]) = 0;
        v80 = &byte_1C871356D;
        goto LABEL_131;
      }
      v71 = ***v69;
      v72 = *(_QWORD *)(v71 + 152);
      v73 = *(unsigned int *)(v71 + 168);
      if ((_DWORD)v73)
      {
        LODWORD(v74) = (v73 - 1) & (v70 ^ (v69 >> 9));
        v75 = (uint64_t ****)(v72 + 16 * v74);
        v76 = *v75;
        if (*v75 == v69)
          goto LABEL_123;
        v77 = 1;
        while (v76 != (uint64_t ***)-4096)
        {
          v78 = v74 + v77++;
          v74 = v78 & (v73 - 1);
          v76 = *(uint64_t ****)(v72 + 16 * v74);
          if (v76 == v69)
          {
            v75 = (uint64_t ****)(v72 + 16 * v74);
            goto LABEL_123;
          }
        }
      }
      v75 = (uint64_t ****)(v72 + 16 * v73);
LABEL_123:
      v79 = v75[1];
      v82 = (unint64_t)*v79;
      v80 = (char *)(v79 + 2);
      v81 = v82;
      LODWORD(v116[0]) = 0;
      if (v82 >= 5)
      {
        if (*(_DWORD *)v80 == 1836477548 && v80[4] == 46)
          goto LABEL_166;
      }
      else if (!v81)
      {
        goto LABEL_131;
      }
      if (*v80 == 1)
        goto LABEL_166;
LABEL_131:
      v84 = (llvm::Module **)a2(a3, v69);
      if ((*((_BYTE *)v69 + 33) & 0x20) != 0)
        goto LABEL_132;
      if ((*((_BYTE *)v69 + 23) & 0x10) == 0)
      {
        v109 = 0;
        v108 = &byte_1C871356D;
        goto LABEL_181;
      }
      v99 = ***v69;
      v100 = *(_QWORD *)(v99 + 152);
      v101 = *(unsigned int *)(v99 + 168);
      if (!(_DWORD)v101)
        goto LABEL_179;
      LODWORD(v102) = (v101 - 1) & (v70 ^ (v69 >> 9));
      v103 = (uint64_t ****)(v100 + 16 * v102);
      v104 = *v103;
      if (*v103 != v69)
      {
        v105 = 1;
        while (v104 != (uint64_t ***)-4096)
        {
          v106 = v102 + v105++;
          v102 = v106 & (v101 - 1);
          v104 = *(uint64_t ****)(v100 + 16 * v102);
          if (v104 == v69)
          {
            v103 = (uint64_t ****)(v100 + 16 * v102);
            goto LABEL_180;
          }
        }
LABEL_179:
        v103 = (uint64_t ****)(v100 + 16 * v101);
      }
LABEL_180:
      v107 = v103[1];
      v110 = (size_t)*v107;
      v108 = (char *)(v107 + 2);
      v109 = v110;
LABEL_181:
      v112 = *v84;
      if (!llvm::TargetLibraryInfoImpl::getLibFunc((int)v84, v108, v109, v116)
        || (llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc((uint64_t)v112, (uint64_t)v69[3], v116[0]) & 1) == 0)
      {
LABEL_132:
        if ((_DWORD)v138)
        {
          v85 = (const void **)v137;
          v86 = (const void **)((char *)v137 + 16 * v138);
          while (1)
          {
            v87 = (size_t)v85[1];
            if (v81 >= v87 && (!v87 || !memcmp(v80, *v85, v87)))
              break;
            v85 += 2;
            if (v85 == v86)
              goto LABEL_138;
          }
          v67 = v113;
          goto LABEL_166;
        }
LABEL_138:
        if (v81 != 4 || *(_DWORD *)v80 != 1852399981)
        {
          v8 = 1103515245 * v8 + 12345;
          v88 = off_1E81A9ED8[(unsigned __int16)((WORD1(v8) & 0x7FFF)
                                               - 17
                                               * ((unsigned __int16)((30841 * (WORD1(v8) & 0x7FFF)) >> 16) >> 3))];
          v136 = 257;
          if (*v88)
          {
            v133 = v88;
            v89 = 3;
          }
          else
          {
            v89 = 1;
          }
          LOBYTE(v136) = v89;
          llvm::Value::setName(v69, (uint64_t)&v133);
        }
        if ((*((_WORD *)v69 + 9) & 1) == 0)
        {
          v90 = (uint64_t ***)v69[11];
          goto LABEL_147;
        }
        llvm::Function::BuildLazyArguments((llvm::Function *)v69);
        v90 = (uint64_t ***)v69[11];
        if ((*((_WORD *)v69 + 9) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v69);
          v91 = (uint64_t ***)v69[11];
        }
        else
        {
LABEL_147:
          v91 = v90;
        }
        v92 = &v91[5 * (_QWORD)v69[12]];
        while (v90 != v92)
        {
          if (*((_BYTE *)*v90 + 8) != 7)
          {
            v133 = "arg";
            v136 = 259;
            llvm::Value::setName(v90, (uint64_t)&v133);
          }
          v90 += 5;
        }
        v93 = v69 + 9;
        v94 = (uint64_t ***)v69[10];
        v67 = v113;
        if (v94 != v69 + 9)
        {
          do
          {
            if (v94)
              v95 = v94 - 3;
            else
              v95 = 0;
            v133 = "bb";
            v136 = 259;
            llvm::Value::setName(v95, (uint64_t)&v133);
            v96 = (uint64_t **)(v95 + 5);
            for (k = v95[6]; k != v96; k = (uint64_t **)k[1])
            {
              if (k)
                v98 = (uint64_t ***)(k - 3);
              else
                v98 = 0;
              if (*((_BYTE *)*v98 + 8) != 7)
              {
                v133 = "tmp";
                v136 = 259;
                llvm::Value::setName(v98, (uint64_t)&v133);
              }
            }
            v94 = (uint64_t ***)v94[1];
          }
          while (v94 != v93);
        }
      }
LABEL_166:
      v68 = *(_QWORD *)(v68 + 8);
    }
    while (v68 != v67);
  }
  if (__p)
  {
    v130 = (uint64_t *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v126, 8);
  MEMORY[0x1CAA32FB4](v123, 8);
  MEMORY[0x1CAA32FB4](v120, 8);
  MEMORY[0x1CAA32FB4](v118[0], 8);
  if (v137 != v139)
    free(v137);
  if (v140 != v142)
    free(v140);
  if (v143 != v145)
    free(v143);
  if (v146 != (char *)v148)
    free(v146);
}

uint64_t sub_1C5F4FA50()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5F4EF74(v0);
}

void sub_1C5F4FA7C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C5F4FAA0(uint64_t a1, uint64_t a2)
{
  void *result;

  result = sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C5F4FAD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a1;
  sub_1C5F4F03C(a2, (uint64_t (*)(uint64_t, uint64_t ***))sub_1C5F4FB0C, (uint64_t)&v3);
  return 1;
}

uint64_t sub_1C5F4FB0C(uint64_t a1, uint64_t a2)
{
  char **v3;
  char *v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;
  void **v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14[2];
  int v15;
  uint64_t v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *__src;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = **(char ****)(*(_QWORD *)a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != llvm::TargetLibraryInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  llvm::TargetLibraryAnalysis::run(v5 + 32, a2, (uint64_t)&v21);
  *(_QWORD *)(v5 + 240) = v21;
  if (*(_BYTE *)(v5 + 320))
  {
    if ((uint64_t *)(v5 + 240) == &v21)
    {
LABEL_16:
      *(_DWORD *)(v5 + 312) = v25;
      goto LABEL_17;
    }
    v6 = (void **)(v5 + 248);
    v7 = v23;
    v8 = *(unsigned int *)(v5 + 256);
    if (v8 >= v23)
    {
      if (v23)
        memmove(*v6, __src, 8 * v23);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v5 + 260) < v23)
    {
      *(_DWORD *)(v5 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v7, 8);
    }
    else if ((_DWORD)v8)
    {
      memmove(*v6, __src, 8 * v8);
      goto LABEL_13;
    }
    v8 = 0;
LABEL_13:
    if (v8 != v23)
      memcpy((char *)*v6 + 8 * v8, (char *)__src + 8 * v8, 8 * v23 - 8 * v8);
LABEL_15:
    *(_DWORD *)(v5 + 256) = v7;
    goto LABEL_16;
  }
  v10 = (void *)(v5 + 264);
  *(_QWORD *)(v5 + 248) = v5 + 264;
  v11 = (void **)(v5 + 248);
  *(_QWORD *)(v5 + 256) = 0x600000000;
  v12 = v23;
  if (v23 && v11 != &__src)
  {
    if (v23 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v23, 8);
      v13 = v23;
      if (!v23)
      {
LABEL_27:
        *(_DWORD *)(v5 + 256) = v12;
        goto LABEL_28;
      }
      v10 = *v11;
    }
    else
    {
      v13 = v23;
    }
    memcpy(v10, __src, 8 * v13);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 312) = v25;
  *(_BYTE *)(v5 + 320) = 1;
LABEL_17:
  if (__src != &v24)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v16);
  sub_1C4D8B52C(v14);
  return v5 + 240;
}

unint64_t sub_1C5F4FD5C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unint64_t v8;
  uint64_t v9;
  unint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v4 = a2;
  v5 = a1;
  v17 = a1;
  v18 = a2;
  v6 = a3 + 16;
  for (i = a1; ; v5 = i)
  {
    v8 = v4;
    v9 = i;
    v19 = 44;
    result = llvm::StringRef::find(&v17, &v19, 1uLL, 0);
    if (v4 >= result)
      v11 = result;
    else
      v11 = v4;
    if (v4 >= result + 1)
      v12 = result + 1;
    else
      v12 = v4;
    v13 = i + v12;
    v14 = v4 - v12;
    if (result == -1)
      v4 = 0;
    else
      v4 = v14;
    if (result == -1)
      i = 0;
    else
      i = v13;
    if (result != -1)
    {
      v8 = v11;
      v5 = v9;
    }
    if (!v8)
      break;
    v15 = *(unsigned int *)(a3 + 8);
    if (v15 >= *(unsigned int *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v6, v15 + 1, 16);
      v15 = *(unsigned int *)(a3 + 8);
    }
    v16 = (uint64_t *)(*(_QWORD *)a3 + 16 * v15);
    *v16 = v5;
    v16[1] = v8;
    ++*(_DWORD *)(a3 + 8);
    v17 = i;
    v18 = v4;
  }
  return result;
}

uint64_t sub_1C5F4FE50(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::TargetLibraryAnalysis::Key, a2) + 8;
}

uint64_t sub_1C5F4FE78()
{
  uint64_t v0;
  int v2;
  __int128 v3;

  *(_QWORD *)&v3 = "Prefixes for functions that don't need to be renamed, separated by a comma";
  *((_QWORD *)&v3 + 1) = 74;
  v2 = 1;
  sub_1C577A634((uint64_t)&unk_1ED827910, "rename-exclude-function-prefixes", &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &unk_1ED827910, &dword_1C475E000);
  v0 = sub_1C47AD050((uint64_t)&qword_1ED8279F8, 0, 0);
  qword_1ED827A78 = 0;
  qword_1ED827A80 = 0;
  qword_1ED827AA0 = 0;
  unk_1ED827AA8 = 0;
  qword_1ED827A98 = 0;
  byte_1ED827AB0 = 0;
  unk_1ED827A88 = 0;
  unk_1ED827A90 = &unk_1E819E950;
  qword_1ED8279F8 = (uint64_t)&unk_1E819E480;
  qword_1ED827AB8 = (uint64_t)&unk_1E819E970;
  qword_1ED827AC0[0] = &off_1E7FA8CB8;
  qword_1ED827AD8 = (uint64_t)qword_1ED827AC0;
  llvm::cl::Option::setArgStr(v0, "rename-exclude-alias-prefixes", 0x1DuLL);
  qword_1ED827A18 = (uint64_t)"Prefixes for aliases that don't need to be renamed, separated by a comma";
  unk_1ED827A20 = 72;
  word_1ED827A02 = word_1ED827A02 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8279F8);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED8279F8, &dword_1C475E000);
  *(_QWORD *)&v3 = "Prefixes for global values that don't need to be renamed, separated by a comma";
  *((_QWORD *)&v3 + 1) = 78;
  v2 = 1;
  sub_1C577A634((uint64_t)&unk_1ED827AE0, "rename-exclude-global-prefixes", &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &unk_1ED827AE0, &dword_1C475E000);
  *(_QWORD *)&v3 = "Prefixes for structs that don't need to be renamed, separated by a comma";
  *((_QWORD *)&v3 + 1) = 72;
  v2 = 1;
  sub_1C577A634((uint64_t)&unk_1ED827BC8, "rename-exclude-struct-prefixes", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C49BEA38, &unk_1ED827BC8, &dword_1C475E000);
}

void llvm::misexpect::extractWeights(llvm::misexpect *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  llvm::misexpect **v10;
  llvm::misexpect *v11;
  llvm::misexpect **v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  int v32;
  unsigned int v33;
  llvm::misexpect **v34;
  llvm::misexpect *v35;
  int v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[3];

  v39[2] = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)this + 23) & 0x20) == 0)
  {
LABEL_16:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return;
  }
  v5 = ***(_QWORD ***)this;
  v37 = this;
  v6 = *(_DWORD *)(v5 + 2496);
  if (!v6)
  {
    v34 = 0;
LABEL_47:
    v10 = (llvm::misexpect **)sub_1C541AB24(v5 + 2480, (uint64_t)&v37, (uint64_t *)&v37, v34);
    v35 = (llvm::misexpect *)v37;
    v10[3] = 0;
    v10[4] = 0;
    *v10 = v35;
    v10[1] = (llvm::misexpect *)(v10 + 3);
    v10[2] = (llvm::misexpect *)0x100000000;
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(v5 + 2480);
  v8 = v6 - 1;
  v9 = (v6 - 1) & ((this >> 4) ^ (this >> 9));
  v10 = (llvm::misexpect **)(v7 + 40 * v9);
  v11 = *v10;
  if (*v10 != this)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != (llvm::misexpect *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (llvm::misexpect *)-8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (llvm::misexpect **)(v7 + 40 * (v15 & v8));
      v11 = *v10;
      if (*v10 == this)
        goto LABEL_12;
    }
    if (v12)
      v34 = v12;
    else
      v34 = v10;
    goto LABEL_47;
  }
LABEL_12:
  v16 = *((unsigned int *)v10 + 4);
  if (!(_DWORD)v16)
    goto LABEL_16;
  v17 = (_QWORD *)((char *)v10[1] + 8);
  v18 = 16 * v16;
  while (*((_DWORD *)v17 - 2) != 2)
  {
    v17 += 2;
    v18 -= 16;
    if (!v18)
      goto LABEL_16;
  }
  v19 = *v17;
  if (!v19)
    goto LABEL_16;
  v20 = (unsigned int *)(v19 + 8);
  v21 = *(unsigned int *)(v19 + 8);
  if (v21 <= 2)
    goto LABEL_16;
  v22 = *(_QWORD *)(v19 - 8 * v21);
  if (*(_BYTE *)v22)
    goto LABEL_16;
  v23 = *(_QWORD **)(v22 + 8);
  if (*v23 != 14)
    goto LABEL_16;
  v24 = v23[3];
  v25 = *(_QWORD *)((char *)v23 + 30);
  if (v24 != 0x775F68636E617262 || v25 != 0x737468676965775FLL)
    goto LABEL_16;
  v37 = v39;
  v38 = 0x400000000;
  sub_1C4893E04((char *)&v37, (v21 - 1), 0);
  v27 = 0;
  v28 = v37;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v20[2 * v27 + -2 * *v20] + 128) + 16) == 16)
      v29 = *(_QWORD *)(*(_QWORD *)&v20[2 * v27 + -2 * *v20] + 128);
    else
      v29 = 0;
    v30 = (_QWORD *)(v29 + 24);
    if (*(_DWORD *)(v29 + 32) >= 0x41u)
      v30 = (_QWORD *)*v30;
    *((_DWORD *)v28 + v27++) = *v30;
  }
  while (v21 - 1 != v27);
  v31 = (void *)(a2 + 16);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v32 = v38;
  if ((_DWORD)v38 && &v37 != (void **)a2)
  {
    if (v28 != v39)
    {
      *(_QWORD *)a2 = v28;
      v36 = HIDWORD(v38);
      *(_DWORD *)(a2 + 8) = v32;
      *(_DWORD *)(a2 + 12) = v36;
      v37 = v39;
      HIDWORD(v38) = 0;
      v28 = v39;
      goto LABEL_41;
    }
    if (v38 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v38, 4);
      v33 = v38;
      v28 = v37;
      if (!(_DWORD)v38)
        goto LABEL_40;
      v31 = *(void **)a2;
    }
    else
    {
      v33 = v38;
      v28 = v39;
    }
    memcpy(v31, v28, 4 * v33);
    v28 = v37;
LABEL_40:
    *(_DWORD *)(a2 + 8) = v32;
LABEL_41:
    LODWORD(v38) = 0;
  }
  *(_BYTE *)(a2 + 32) = 1;
  if (v28 != v39)
    free(v28);
}

uint64_t llvm::misexpect::clamp(llvm::misexpect *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;

  if (a2 <= (unint64_t)this)
    v3 = this;
  else
    v3 = a2;
  if (a3 >= (unint64_t)this)
    return v3;
  else
    return a3;
}

void llvm::misexpect::verifyMisExpect(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  const void *v33;
  char *v34;
  unint64_t v35;
  void **v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  void *__p[2];
  char v43;
  _BYTE v44[16];
  uint64_t *v45;
  _QWORD *v46;
  __int16 v47;
  _QWORD v48[4];
  _QWORD v49[2];
  _QWORD *v50;
  _QWORD v51[4];
  _QWORD v52[2];
  _QWORD v53[2];
  _QWORD v54[2];
  _QWORD v55[3];
  double v56;
  uint64_t v57;
  unint64_t v58;
  const void *v59[2];
  uint64_t (**v60)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v61;
  char v62;
  uint64_t v63;
  _BYTE v64[16];
  const char *v65;
  const char *v66;
  uint64_t v67;
  char v68;
  char v69;
  char *v70;
  uint64_t v71;
  _BYTE v72[260];
  int v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0xFFFFFFFFLL;
    do
    {
      v10 = *(unsigned int *)(a4 + 4 * v7);
      if (v6 < v10)
        v8 = v7;
      if (v6 <= v10)
        v6 = *(unsigned int *)(a4 + 4 * v7);
      if (v9 >= v10)
        v9 = *(unsigned int *)(a4 + 4 * v7);
      ++v7;
    }
    while (a5 != v7);
  }
  else
  {
    v8 = 0;
    v6 = 0;
    v9 = 0xFFFFFFFFLL;
  }
  v11 = 0;
  if (a3)
  {
    v12 = 4 * a3;
    v13 = a2;
    do
    {
      v14 = *v13++;
      v11 += v14;
      v12 -= 4;
    }
    while (v12);
  }
  v15 = v6 + v9 * (a3 - 1);
  v16 = HIDWORD(v15);
  if (HIDWORD(v15))
  {
    LOBYTE(v16) = 0;
    v39 = v15;
    do
    {
      v15 = v39 >> 1;
      LOBYTE(v16) = v16 + 1;
      v40 = v39 >> 33;
      v39 >>= 1;
    }
    while (v40);
  }
  v17 = v6 >> v16;
  if (v15 != 0x80000000)
    v17 = ((v17 << 31) | (v15 >> 1)) / v15;
  v18 = a2[v8];
  v41 = v17;
  v19 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v41, v11);
  v20 = **(_QWORD **)a1;
  v21 = dword_1ED827DF0;
  v22 = *(_QWORD *)v20;
  if (*(_BYTE *)(*(_QWORD *)v20 + 112))
    v23 = *(_QWORD *)(v22 + 104);
  else
    v23 = 0;
  if (v23 > dword_1ED827DF0)
    v21 = v23;
  if (v21 >= 0x63)
    LODWORD(v21) = 99;
  if ((_DWORD)v21)
    v19 = (unint64_t)(((double)v21 / -100.0 + 1.0) * (double)v19);
  if (v19 > v18)
  {
    v57 = v11;
    v58 = v18;
    v56 = (double)v18 / (double)(unint64_t)v11;
    v51[0] = "{0:P} ({1} / {2})";
    v51[1] = 17;
    v51[2] = v55;
    v51[3] = 3;
    v52[0] = &unk_1E8134F28;
    v52[1] = &v56;
    v53[0] = &unk_1E816A600;
    v53[1] = &v58;
    v54[0] = &unk_1E816A600;
    v54[1] = &v57;
    v55[0] = v52;
    v55[1] = v53;
    v55[2] = v54;
    v48[0] = "Potential performance regression from use of the llvm.expect intrinsic: Annotation was correct on {0} of pr"
             "ofiled executions.";
    v48[1] = 125;
    v48[2] = &v50;
    v48[3] = 1;
    v49[0] = &off_1E81A9F70;
    v49[1] = v51;
    v50 = v49;
    v47 = 262;
    v46 = v51;
    v24 = *(unsigned __int8 *)(a1 + 16);
    if (v24 == 31)
    {
      v26 = *(_DWORD *)(a1 + 20);
      if ((v26 & 0x40000000) != 0)
        v25 = *(uint64_t **)(a1 - 8);
      else
        v25 = (uint64_t *)(a1 - 32 * (v26 & 0x7FFFFFF));
    }
    else
    {
      if (v24 != 30)
      {
        v27 = 0;
LABEL_38:
        if (v27)
          v28 = v27;
        else
          v28 = a1;
        if (byte_1ED827D30 || *(_BYTE *)(v22 + 120))
        {
          v29 = *(_QWORD *)(*(_QWORD *)(v28 + 40) + 56);
          llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v64, (const llvm::DebugLoc *)(v28 + 48));
          v61 = 25;
          v62 = 1;
          v63 = v29;
          v60 = &off_1E814E5E0;
          v65 = (const char *)&v46;
          llvm::LLVMContext::diagnose(v20, (const llvm::DiagnosticInfo *)&v60);
        }
        llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v44, *(const llvm::Function **)(*(_QWORD *)(a1 + 40) + 56));
        v30 = *(_QWORD *)(*(_QWORD *)(v28 + 40) + 56);
        llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v64, (const llvm::DebugLoc *)(v28 + 48));
        v31 = *(_QWORD *)(v28 + 40);
        v61 = 9;
        v62 = 2;
        v63 = v30;
        v65 = "misexpect";
        v66 = "misexpect";
        v67 = 9;
        v68 = 0;
        v69 = 0;
        v70 = v72;
        v71 = 0x400000000;
        v72[256] = 0;
        v73 = -1;
        v74 = v31;
        v60 = &off_1E814E500;
        sub_1C4DCAF2C((uint64_t)v48, __p);
        v32 = (void **)__p[0];
        if (v43 >= 0)
          v32 = __p;
        v33 = (const void *)(v43 & 0x7F);
        if (v43 < 0)
          v33 = __p[1];
        v59[0] = v32;
        v59[1] = v33;
        sub_1C53B17B4((uint64_t)&v70, v59);
        llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v44, (llvm::DiagnosticInfoOptimizationBase *)&v60);
        if (v43 < 0)
          operator delete(__p[0]);
        v60 = &off_1E814E790;
        v34 = v70;
        if ((_DWORD)v71)
        {
          v35 = (unint64_t)v71 << 6;
          do
          {
            v36 = (void **)&v34[v35];
            if (v34[v35 - 17] < 0)
              operator delete(*(v36 - 5));
            if (*((char *)v36 - 41) < 0)
              operator delete(*(v36 - 8));
            v35 -= 64;
          }
          while (v35);
          v34 = v70;
        }
        if (v34 != v72)
          free(v34);
        v37 = v45;
        v45 = 0;
        if (v37)
        {
          v38 = *v37;
          *v37 = 0;
          if (v38)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          MEMORY[0x1CAA32FC0](v37, 0x20C4093837F09);
        }
        return;
      }
      v25 = (uint64_t *)(a1 - 96);
    }
    v27 = *v25;
    if (*(unsigned __int8 *)(v27 + 16) <= 0x1Bu)
      v27 = 0;
    goto LABEL_38;
  }
}

uint64_t sub_1C5F507CC()
{
  char v1;
  __n128 v2;
  int v3;
  int *v4;

  v1 = 0;
  v4 = (int *)&v1;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Use this option to turn on/off warnings about incorrect usage of llvm.expect intrinsics.";
  v2.n128_u64[1] = 88;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED827CB0, "pgo-warn-misexpect", (_BYTE **)&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED827CB0, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2.n128_u64[0] = (unint64_t)"Prevents emiting diagnostics when profile counts are within N% of the threshold..";
  v2.n128_u64[1] = 81;
  sub_1C63B38CC(&v4, (__int128 *)&v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, qword_1ED827D70, &dword_1C475E000);
}

void sub_1C5F50894(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, llvm::ConstantExpr *a5)
{
  uint64_t *v10;
  llvm::PointerType *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int *v17;
  size_t v18;
  uint64_t v19;
  const llvm::APInt *v20;
  uint64_t v21;
  llvm::ConstantInt *v22;
  unsigned int v23;
  unint64_t v24;
  llvm::ValueHandleBase *v25;
  llvm::Constant *v26;
  llvm::Type *v27;
  void *PointerCast;
  llvm::UndefValue *v29;
  unsigned int v30;
  llvm::PoisonValue *v31;
  llvm::Value **v32;
  _DWORD *v33;
  uint64_t v34;
  llvm::PointerType *v35;
  char v36;
  llvm::GlobalVariable *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  _QWORD v53[3];
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  _QWORD *v57;
  uint64_t v58;
  _QWORD v59[6];
  uint64_t *v60;
  void **v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  __int16 v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  _QWORD v70[3];

  v70[1] = *MEMORY[0x1E0C80C00];
  v10 = *(uint64_t **)a2;
  v57 = v59;
  v58 = 0x200000000;
  v60 = v10;
  v61 = &v69;
  v62 = v70;
  v63 = 0;
  v64 = 0;
  v65 = 512;
  v66 = 7;
  v59[4] = 0;
  v59[5] = 0;
  v67 = 0;
  v68 = 0;
  v69 = &unk_1E8167888;
  v70[0] = &unk_1E8167A08;
  v11 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*v10 + 1576), 0, 0, 0);
  v54 = v56;
  v55 = 0x1000000000;
  v12 = *v60;
  v13 = *v60 + 1960;
  v14 = llvm::PointerType::get(v11, 0);
  v15 = llvm::PointerType::get((llvm::PointerType *)(*v60 + 1912), 0);
  v16 = *(uint64_t **)(v12 + 1960);
  v48 = v13;
  v49 = v14;
  v50 = v15;
  v17 = (unsigned int *)llvm::StructType::get(v16, (uint64_t)&v48, 3, 0);
  if (a1)
    v18 = strlen(a1);
  else
    v18 = 0;
  v19 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), (unsigned __int8 *)a1, v18);
  if (v19)
  {
    v37 = (llvm::GlobalVariable *)v19;
    if (*(_BYTE *)(v19 + 16) == 3)
    {
      v47 = a3;
      v38 = *(_QWORD *)(v19 - 32);
      if (v38)
      {
        v39 = *(_DWORD *)(v38 + 20) & 0x7FFFFFF;
        if (HIDWORD(v55) <= v39)
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v39 + 1, 8);
        if ((_DWORD)v39)
        {
          v40 = 0;
          v41 = 32 * v39;
          do
          {
            v42 = *(_DWORD *)(v38 + 20);
            if ((v42 & 0x40000000) != 0)
              v43 = *(_QWORD *)(v38 - 8);
            else
              v43 = v38 - 32 * (v42 & 0x7FFFFFF);
            v44 = *(_QWORD *)(v43 + v40);
            v45 = v55;
            if (v55 >= (unint64_t)HIDWORD(v55))
            {
              v46 = v41;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 8);
              v41 = v46;
              v45 = v55;
            }
            *((_QWORD *)v54 + v45) = v44;
            LODWORD(v55) = v55 + 1;
            v40 += 32;
          }
          while (v41 != v40);
        }
      }
      llvm::GlobalVariable::eraseFromParent(v37);
      a3 = v47;
    }
  }
  v21 = a4;
  v22 = *(llvm::ConstantInt **)(*v60 + 1960);
  v23 = *(_DWORD *)(*v60 + 1968);
  LODWORD(v49) = v23 >> 8;
  if (v23 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v48, v21, 0);
  }
  else
  {
    if (v23 <= 0xFF)
      v24 = 0;
    else
      v24 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v23);
    v48 = v24 & v21;
  }
  v25 = llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v48, v20);
  if (v49 >= 0x41 && v48)
    MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
  v53[0] = v25;
  v53[1] = a3;
  v26 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(*v60 + 1912), 0);
  if (a5)
    PointerCast = llvm::ConstantExpr::getPointerCast(a5, v26, v27);
  else
    PointerCast = llvm::Constant::getNullValue(v26, v26);
  v53[2] = PointerCast;
  v29 = llvm::ConstantStruct::get((llvm::ConstantAggregateZero *)v17, (llvm::Type *)v53, v17[3]);
  v30 = v55;
  if (v55 >= HIDWORD(v55))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 8);
    v30 = v55;
  }
  *((_QWORD *)v54 + v30) = v29;
  LODWORD(v55) = v55 + 1;
  llvm::ArrayType::get((llvm::ArrayType *)v17, (llvm::Type *)v55);
  v32 = llvm::ConstantArray::get(v31, (llvm::Type *)v54, v55);
  v33 = operator new(0x78uLL);
  v34 = (uint64_t)(v33 + 8);
  v33[13] = v33[13] & 0x38000000 | 1;
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  *((_QWORD *)v33 + 2) = 0;
  *((_QWORD *)v33 + 3) = v33 + 8;
  v35 = *v32;
  v36 = 1;
  v52 = 1;
  if (*a1)
  {
    v48 = (unint64_t)a1;
    v36 = 3;
  }
  v51 = v36;
  llvm::GlobalVariable::GlobalVariable(v34, a2, v35, 0, 6, (uint64_t)v32, (uint64_t)&v48, 0, 0, 0, 0);
  if (v54 != v56)
    free(v54);
  if (v57 != v59)
    free(v57);
}

void sub_1C5F50CB4(uint64_t **a1, unsigned __int8 *a2, unint64_t a3, llvm::UndefValue **a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  llvm::Type *v20;
  llvm::Constant *v21;
  uint64_t v22;
  llvm::UndefValue *PointerBitCastOrAddrSpaceCast;
  char v24;
  uint64_t v25;
  llvm::PoisonValue *v26;
  llvm::PoisonValue *v27;
  _DWORD *v28;
  char *v29;
  llvm::Value **v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  char **v39;
  char *v40;
  char **v41;
  int v42;
  BOOL v43;
  unsigned int v44;
  char **v45;
  uint64_t v46;
  uint64_t v47[4];
  __int16 v48;
  _BYTE *v49;
  _BYTE *v50;
  uint64_t v51;
  int v52;
  _BYTE v53[128];
  void *v54;
  llvm::Type *v55;
  _QWORD v56[18];

  v56[16] = *MEMORY[0x1E0C80C00];
  v10 = sub_1C4FB7E80(a1[14], a2, a3);
  if (!v10 || (v11 = v10, *(_BYTE *)(v10 + 16) != 3) || (*(_DWORD *)(v10 + 32) & 0xFu) - 7 <= 1)
    v11 = 0;
  v49 = v53;
  v50 = v53;
  v51 = 16;
  v52 = 0;
  v54 = v56;
  v55 = (llvm::Type *)0x1000000000;
  if (v11)
  {
    if (*(_BYTE *)(v11 + 16))
    {
      if (*(_BYTE *)(v11 + 16) == 3 && (*(_DWORD *)(v11 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_20;
    }
    else if (*(_QWORD *)(v11 + 72) == v11 + 72 && (*(_BYTE *)(v11 + 34) & 0x80) == 0)
    {
      goto LABEL_20;
    }
    v12 = *(_QWORD *)(v11 - 32);
    v13 = *(_DWORD *)(v12 + 20);
    if ((v13 & 0x40000000) != 0)
    {
      v15 = *(uint64_t **)(v12 - 8);
      v14 = v13 & 0x7FFFFFF;
      if (!v14)
      {
LABEL_20:
        llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v11);
        goto LABEL_21;
      }
    }
    else
    {
      v14 = v13 & 0x7FFFFFF;
      v15 = (uint64_t *)(v12 - 32 * v14);
      if (!v14)
        goto LABEL_20;
    }
    v16 = 32 * v14;
    do
    {
      v17 = *v15;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v49, *v15);
      if (v18)
      {
        v19 = v55;
        if (v55 >= (unint64_t)HIDWORD(v55))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 8);
          v19 = v55;
        }
        *((_QWORD *)v54 + v19) = v17;
        LODWORD(v55) = (_DWORD)v55 + 1;
      }
      v15 += 4;
      v16 -= 32;
    }
    while (v16);
    goto LABEL_20;
  }
LABEL_21:
  v21 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(**a1 + 1912), 0);
  if (a5)
  {
    v22 = 8 * a5;
    do
    {
      PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(*a4, v21, v20);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v49, (uint64_t)PointerBitCastOrAddrSpaceCast);
      if (v24)
      {
        v25 = v55;
        if (v55 >= (unint64_t)HIDWORD(v55))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 8);
          v25 = v55;
        }
        *((_QWORD *)v54 + v25) = PointerBitCastOrAddrSpaceCast;
        LODWORD(v55) = (_DWORD)v55 + 1;
      }
      ++a4;
      v22 -= 8;
    }
    while (v22);
  }
  if ((_DWORD)v55)
  {
    llvm::ArrayType::get(v21, (llvm::Type *)v55);
    v27 = v26;
    v28 = operator new(0x78uLL);
    v29 = (char *)(v28 + 8);
    v28[13] = v28[13] & 0x38000000 | 1;
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = 0;
    *((_QWORD *)v28 + 2) = 0;
    *((_QWORD *)v28 + 3) = v28 + 8;
    v30 = llvm::ConstantArray::get(v27, (llvm::Type *)v54, v55);
    v48 = 261;
    v47[0] = (uint64_t)a2;
    v47[1] = a3;
    llvm::GlobalVariable::GlobalVariable((uint64_t)(v28 + 8), (uint64_t)a1, v27, 0, 6, (uint64_t)v30, (uint64_t)v47, 0, 0, 0, 0);
    v31 = llvm::UniqueStringSaver::save(***((_QWORD ***)v28 + 4) + 2136, "llvm.metadata", 0xDuLL);
    v33 = v32;
    v34 = ***((_QWORD ***)v28 + 4);
    v47[0] = (uint64_t)(v28 + 8);
    v35 = *(_DWORD *)(v34 + 2520);
    if (v35)
    {
      v36 = *(_QWORD *)(v34 + 2504);
      v37 = v35 - 1;
      v38 = v37 & ((v29 >> 4) ^ (v29 >> 9));
      v39 = (char **)(v36 + 24 * v38);
      v40 = *v39;
      if (*v39 == v29)
      {
LABEL_31:
        v39[1] = v31;
        v39[2] = v33;
        v28[16] = v28[16] & 0xFFBFFFFF | ((v33 != 0) << 22);
        goto LABEL_32;
      }
      v41 = 0;
      v42 = 1;
      while (v40 != (char *)-4096)
      {
        if (v41)
          v43 = 0;
        else
          v43 = v40 == (char *)-8192;
        if (v43)
          v41 = v39;
        v44 = v38 + v42++;
        v38 = v44 & v37;
        v39 = (char **)(v36 + 24 * v38);
        v40 = *v39;
        if (*v39 == v29)
          goto LABEL_31;
      }
      if (v41)
        v45 = v41;
      else
        v45 = v39;
    }
    else
    {
      v45 = 0;
    }
    v39 = (char **)sub_1C53D65B8(v34 + 2504, (uint64_t)v47, v47, v45);
    v46 = v47[0];
    v39[1] = 0;
    v39[2] = 0;
    *v39 = (char *)v46;
    goto LABEL_31;
  }
LABEL_32:
  if (v54 != v56)
    free(v54);
  if (v50 != v49)
    free(v50);
}

char *llvm::setUsedInitializer(llvm::GlobalVariable *this, uint64_t a2)
{
  char *v3;
  llvm::Type *v5;
  llvm::Constant *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  llvm::UndefValue *v13;
  llvm::UndefValue *PointerBitCastOrAddrSpaceCast;
  uint64_t v15;
  size_t v16;
  unint64_t *v17;
  unint64_t v18;
  llvm::PoisonValue *v19;
  llvm::PoisonValue *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _DWORD *v24;
  llvm::Value **v25;
  llvm::Value *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  int v39;
  unsigned int v40;
  char *v41;
  uint64_t v42;
  _QWORD *v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54[4];
  __int16 v55;
  void *__base;
  uint64_t v57;
  _QWORD v58[9];

  v58[8] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 20) == *(_DWORD *)(a2 + 24))
  {
    llvm::GlobalVariable::eraseFromParent(this);
    return 0;
  }
  v6 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)this + 1912), 0);
  __base = v58;
  v57 = 0x800000000;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 == *(_QWORD *)a2)
    v8 = (unsigned int *)(a2 + 20);
  else
    v8 = (unsigned int *)(a2 + 16);
  v9 = *v8;
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = *(unint64_t **)(a2 + 8);
    while (*v11 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
  }
  else
  {
    v11 = *(unint64_t **)(a2 + 8);
  }
  v12 = (unint64_t *)(v7 + 8 * v9);
  if (v11 == v12)
  {
LABEL_20:
    LODWORD(v16) = 0;
  }
  else
  {
    v13 = (llvm::UndefValue *)*v11;
LABEL_14:
    PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(v13, v6, v5);
    v15 = v57;
    if (v57 >= (unint64_t)HIDWORD(v57))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v58, v57 + 1, 8);
      v15 = v57;
    }
    *((_QWORD *)__base + v15) = PointerBitCastOrAddrSpaceCast;
    v16 = (v57 + 1);
    LODWORD(v57) = v57 + 1;
    v17 = v11 + 1;
    while (v17 != v12)
    {
      v18 = *v17++;
      v13 = (llvm::UndefValue *)v18;
      if (v18 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v11 = v17 - 1;
        goto LABEL_14;
      }
    }
    if (v16 >= 2)
    {
      qsort(__base, v16, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C5F5148C);
      LODWORD(v16) = v57;
    }
  }
  llvm::ArrayType::get(v6, (llvm::Type *)v16);
  v20 = v19;
  v21 = *((_QWORD *)this + 5);
  llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList(v21 + 8, (uint64_t ***)this);
  v22 = *((_QWORD *)this + 7);
  v23 = (_QWORD *)*((_QWORD *)this + 8);
  *v23 = v22;
  *(_QWORD *)(v22 + 8) = v23;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v24 = operator new(0x78uLL);
  v3 = (char *)(v24 + 8);
  v24[13] = v24[13] & 0x38000000 | 1;
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = 0;
  *((_QWORD *)v24 + 3) = v24 + 8;
  v25 = llvm::ConstantArray::get(v20, (llvm::Type *)__base, v57);
  v55 = 257;
  v26 = (llvm::Value *)llvm::GlobalVariable::GlobalVariable((uint64_t)(v24 + 8), v21, v20, 0, 6, (uint64_t)v25, (uint64_t)v54, 0, 0, 0, 0);
  llvm::Value::takeName(v26, this);
  v27 = llvm::UniqueStringSaver::save(***((_QWORD ***)v24 + 4) + 2136, "llvm.metadata", 0xDuLL);
  v29 = v28;
  v30 = ***((_QWORD ***)v24 + 4);
  v54[0] = (uint64_t)(v24 + 8);
  v31 = *(_DWORD *)(v30 + 2520);
  if (!v31)
  {
    v48 = 0;
LABEL_48:
    v35 = sub_1C53D65B8(v30 + 2504, (uint64_t)v54, v54, v48);
    v49 = v54[0];
    v35[1] = 0;
    v35[2] = 0;
    *v35 = v49;
    goto LABEL_25;
  }
  v32 = *(_QWORD *)(v30 + 2504);
  v33 = v31 - 1;
  v34 = v33 & ((v3 >> 4) ^ (v3 >> 9));
  v35 = (_QWORD *)(v32 + 24 * v34);
  v36 = *v35;
  if ((char *)*v35 != v3)
  {
    v44 = 0;
    v45 = 1;
    while (v36 != -4096)
    {
      if (v44)
        v46 = 0;
      else
        v46 = v36 == -8192;
      if (v46)
        v44 = v35;
      v47 = v34 + v45++;
      v34 = v47 & v33;
      v35 = (_QWORD *)(v32 + 24 * v34);
      v36 = *v35;
      if ((char *)*v35 == v3)
        goto LABEL_25;
    }
    if (v44)
      v48 = v44;
    else
      v48 = v35;
    goto LABEL_48;
  }
LABEL_25:
  v35[1] = v27;
  v35[2] = v29;
  v24[16] = v24[16] & 0xFFBFFFFF | ((v29 != 0) << 22);
  llvm::GlobalVariable::dropAllReferences(this);
  v37 = *((_QWORD *)this + 6);
  if (v37)
    llvm::Comdat::removeUser(v37, (uint64_t)this);
  *((_QWORD *)this + 6) = 0;
  llvm::Constant::removeDeadConstantUsers((uint64_t)this);
  llvm::Value::~Value(this, v38);
  v39 = *((_DWORD *)this + 5);
  v40 = v39 & 0xF8000000 | 1;
  *((_DWORD *)this + 5) = v40;
  if ((v39 & 0x40000000) != 0)
  {
    v52 = (_QWORD *)*((_QWORD *)this - 1);
    v51 = (char *)this - 8;
    v50 = v52;
    if (*v52)
    {
      *(_QWORD *)v50[2] = v50[1];
      v53 = v50[1];
      if (v53)
        *(_QWORD *)(v53 + 16) = v50[2];
    }
    operator delete(v50);
    v41 = v51;
  }
  else
  {
    v41 = (char *)this - 32;
    if (*((_QWORD *)this - 4))
    {
      **((_QWORD **)this - 2) = *((_QWORD *)this - 3);
      v42 = *((_QWORD *)this - 3);
      if (v42)
        *(_QWORD *)(v42 + 16) = *((_QWORD *)this - 2);
    }
    if ((v40 & 0x80000000) != 0)
      v41 = (char *)this - *((_QWORD *)this - 5) - 40;
  }
  operator delete(v41);
  if (__base != v58)
    free(__base);
  return v3;
}

uint64_t sub_1C5F5148C(llvm::Value **a1, llvm::Value **a2)
{
  llvm::Value *v3;
  llvm::Value *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value **v9;
  llvm::Value *v10;
  int v11;
  int v12;
  llvm::Value *v13;
  char *v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value **v21;
  llvm::Value *v22;
  int v23;
  int v24;
  llvm::Value *v25;
  char *v26;
  size_t v27;
  size_t v28;
  size_t v29;
  int v30;
  unsigned int v32;

  v3 = llvm::Value::stripPointerCasts(*a1);
  v4 = llvm::Value::stripPointerCasts(*a2);
  if ((*((_BYTE *)v3 + 23) & 0x10) != 0)
  {
    v5 = ***(_QWORD ***)v3;
    v6 = *(_QWORD *)(v5 + 152);
    v7 = *(unsigned int *)(v5 + 168);
    if ((_DWORD)v7)
    {
      LODWORD(v8) = (v7 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      v9 = (llvm::Value **)(v6 + 16 * v8);
      v10 = *v9;
      if (*v9 == v3)
      {
LABEL_9:
        v13 = v9[1];
        v16 = *(_QWORD *)v13;
        v14 = (char *)v13 + 16;
        v15 = v16;
        goto LABEL_10;
      }
      v11 = 1;
      while (v10 != (llvm::Value *)-4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v7 - 1);
        v10 = *(llvm::Value **)(v6 + 16 * v8);
        if (v10 == v3)
        {
          v9 = (llvm::Value **)(v6 + 16 * v8);
          goto LABEL_9;
        }
      }
    }
    v9 = (llvm::Value **)(v6 + 16 * v7);
    goto LABEL_9;
  }
  v15 = 0;
  v14 = &byte_1C871356D;
LABEL_10:
  if ((*((_BYTE *)v4 + 23) & 0x10) != 0)
  {
    v17 = ***(_QWORD ***)v4;
    v18 = *(_QWORD *)(v17 + 152);
    v19 = *(unsigned int *)(v17 + 168);
    if ((_DWORD)v19)
    {
      LODWORD(v20) = (v19 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v21 = (llvm::Value **)(v18 + 16 * v20);
      v22 = *v21;
      if (*v21 == v4)
      {
LABEL_18:
        v25 = v21[1];
        v28 = *(_QWORD *)v25;
        v26 = (char *)v25 + 16;
        v27 = v28;
        goto LABEL_19;
      }
      v23 = 1;
      while (v22 != (llvm::Value *)-4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v19 - 1);
        v22 = *(llvm::Value **)(v18 + 16 * v20);
        if (v22 == v4)
        {
          v21 = (llvm::Value **)(v18 + 16 * v20);
          goto LABEL_18;
        }
      }
    }
    v21 = (llvm::Value **)(v18 + 16 * v19);
    goto LABEL_18;
  }
  v27 = 0;
  v26 = &byte_1C871356D;
LABEL_19:
  if (v27 >= v15)
    v29 = v15;
  else
    v29 = v27;
  if (v29)
  {
    v30 = memcmp(v14, v26, v29);
    if (v30)
      return (v30 >> 31) | 1u;
  }
  if (v15 < v27)
    v32 = -1;
  else
    v32 = 1;
  if (v15 == v27)
    return 0;
  else
    return v32;
}

llvm::PointerType *llvm::getOrCreateSanitizerCtorAndInitFunctions@<X0>(uint64_t **a1@<X0>, unsigned __int8 *a2@<X1>, llvm::UndefValue *a3@<X2>, unsigned __int8 *a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, char **a8@<X8>, uint64_t *a9, uint64_t a10, uint64_t (*a11)(uint64_t, char *, char *, char *), uint64_t a12, unsigned __int8 *a13, unint64_t a14)
{
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  llvm::PointerType *result;
  uint64_t v27;
  uint64_t v28;
  llvm::PointerType *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;

  v22 = sub_1C4FB7E80(a1[14], a2, (unint64_t)a3);
  if (!v22
    || (v27 = v22, *(_BYTE *)(v22 + 16))
    || (v28 = **a1, *(_QWORD *)(v22 + 96)) && **(_QWORD **)(*(_QWORD *)(v22 + 24) + 16) != v28 + 1576)
  {
    llvm::createSanitizerCtorAndInitFunctions((llvm::Module *)a1, (llvm::UndefValue *)a2, a3, a4, a5, a6, a7, &v31, a9, a10, a13, a14);
    v23 = v31;
    v24 = v32;
    v25 = v33;
    result = (llvm::PointerType *)a11(a12, v31, v32, v33);
    *a8 = v23;
    a8[1] = v24;
    a8[2] = v25;
  }
  else
  {
    v29 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(v28 + 1576), a6, a7, 0);
    result = llvm::Module::getOrInsertFunction((uint64_t)a1, a4, a5, v29, 0);
    *a8 = (char *)v27;
    a8[1] = (char *)result;
    a8[2] = v30;
  }
  return result;
}

void llvm::filterDeadComdatFunctions(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  _QWORD *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  BOOL v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  _BYTE v47[256];
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  _BYTE v52[256];
  _BYTE *v53;
  void *v54;
  uint64_t v55;
  int v56;
  _BYTE v57[256];

  v53 = v57;
  v54 = v57;
  v55 = 32;
  v56 = 0;
  v2 = (uint64_t *)v52;
  v48 = (uint64_t *)v52;
  v49 = (uint64_t *)v52;
  v50 = 32;
  v51 = 0;
  v3 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v53, *v4);
      v7 = *(_QWORD *)(v6 + 48);
      if (v7)
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v48, v7);
      ++v4;
      v5 -= 8;
    }
    while (v5);
    v2 = v48;
    v8 = v49;
    v9 = HIDWORD(v50);
    v10 = v50;
  }
  else
  {
    v9 = 0;
    v10 = 32;
    v8 = (uint64_t *)v52;
  }
  v43 = v47;
  v44 = v47;
  v45 = 32;
  v46 = 0;
  if (v8 == v2)
    v11 = v9;
  else
    v11 = v10;
  v12 = v8;
  if ((_DWORD)v11)
  {
    v13 = 8 * v11;
    v12 = v8;
    while ((unint64_t)*v12 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v12;
      v13 -= 8;
      if (!v13)
        goto LABEL_50;
    }
  }
  v14 = &v8[v11];
  if (v12 != v14)
  {
    v15 = *v12;
LABEL_18:
    v16 = *(_QWORD *)(v15 + 24);
    if (v16 == *(_QWORD *)(v15 + 16))
      v17 = (unsigned int *)(v15 + 36);
    else
      v17 = (unsigned int *)(v15 + 32);
    v18 = *v17;
    if ((_DWORD)v18)
    {
      v19 = 8 * v18;
      v20 = *(uint64_t **)(v15 + 24);
      while ((unint64_t)*v20 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v20;
        v19 -= 8;
        if (!v19)
          goto LABEL_45;
      }
    }
    else
    {
      v20 = *(uint64_t **)(v15 + 24);
    }
    v21 = (_QWORD *)(v16 + 8 * v18);
    if (v20 != v21)
    {
      v22 = *v20;
      if (*v20)
        v23 = *(_BYTE *)(*v20 + 16) == 0;
      else
        v23 = 0;
      if (!v23)
      {
LABEL_46:
        v29 = (unint64_t *)(v12 + 1);
        while (v29 != (unint64_t *)v14)
        {
          v30 = *v29++;
          v15 = v30;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v12 = (uint64_t *)(v29 - 1);
            goto LABEL_18;
          }
        }
        goto LABEL_50;
      }
LABEL_33:
      v24 = sub_1C477672C((uint64_t)&v53, v22);
      if (v54 == v53)
        v25 = (uint64_t *)((char *)&v55 + 4);
      else
        v25 = &v55;
      if (v24 == (_QWORD *)((char *)v54 + 8 * *(unsigned int *)v25))
        goto LABEL_46;
      v26 = (unint64_t *)(v20 + 1);
      while (v26 != v21)
      {
        v27 = *v26++;
        v22 = v27;
        if (v27 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v20 = (uint64_t *)(v26 - 1);
          if (v22)
            v28 = *(_BYTE *)(v22 + 16) == 0;
          else
            v28 = 0;
          if (v28)
            goto LABEL_33;
          goto LABEL_46;
        }
      }
    }
LABEL_45:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v43, v15);
    goto LABEL_46;
  }
LABEL_50:
  v31 = *(uint64_t **)a1;
  v32 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v32)
  {
    v33 = &v31[v32];
    v34 = 8 * v32 - 8;
    while (1)
    {
      v35 = *(_QWORD *)(*v31 + 48);
      if (v35)
      {
        v36 = (char *)sub_1C477672C((uint64_t)&v43, v35);
        v37 = v44 == v43 ? (uint64_t *)((char *)&v45 + 4) : &v45;
        if (v36 == &v44[8 * *(unsigned int *)v37])
          break;
      }
      ++v31;
      v34 -= 8;
      if (v31 == v33)
        goto LABEL_71;
    }
    if (v31 + 1 != v33)
    {
      v38 = 1;
      v33 = v31;
      while (1)
      {
        v39 = v31[v38];
        v40 = *(_QWORD *)(v39 + 48);
        if (v40)
        {
          v41 = (char *)sub_1C477672C((uint64_t)&v43, v40);
          if (v44 == v43)
            v42 = (uint64_t *)((char *)&v45 + 4);
          else
            v42 = &v45;
          if (v41 == &v44[8 * *(unsigned int *)v42])
            goto LABEL_68;
          v39 = v31[v38];
        }
        *v33++ = v39;
LABEL_68:
        ++v38;
        v34 -= 8;
        if (!v34)
          goto LABEL_71;
      }
    }
  }
  v33 = v31;
LABEL_71:
  *(_DWORD *)(a1 + 8) = ((unint64_t)v33 - *(_QWORD *)a1) >> 3;
  if (v44 != v43)
    free(v44);
  if (v49 != v48)
    free(v49);
  if (v54 != v53)
    free(v54);
}

llvm::GlobalAlias *sub_1C5F51A70(llvm::GlobalAlias *result, llvm::GlobalAlias *this)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::GlobalAlias *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::GlobalAlias *v24;
  int v25;
  int v26;
  _QWORD *v27;
  int *v28;
  size_t v29;
  size_t v30;
  int *v31;
  int __src;

  v3 = (uint64_t)result;
  v4 = *((unsigned __int8 *)this + 16);
  if (*((_BYTE *)this + 16))
  {
    if (v4 == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      return result;
  }
  else if (*((llvm::GlobalAlias **)this + 9) == (llvm::GlobalAlias *)((char *)this + 72)
         && (*((_BYTE *)this + 34) & 0x80) == 0)
  {
    return result;
  }
  v5 = this >> 4;
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v6 = ***(_QWORD ***)this;
    v7 = *(_QWORD *)(v6 + 152);
    v8 = *(unsigned int *)(v6 + 168);
    if ((_DWORD)v8)
    {
      LODWORD(v9) = (v8 - 1) & (v5 ^ (this >> 9));
      v10 = v7 + 16 * v9;
      v11 = *(llvm::GlobalAlias **)v10;
      if (*(llvm::GlobalAlias **)v10 == this)
      {
LABEL_15:
        v14 = *(_QWORD *)(v10 + 8);
        if (*(_QWORD *)v14 >= 5uLL)
        {
          v15 = *(_DWORD *)(v14 + 16);
          v16 = *(unsigned __int8 *)(v14 + 20);
          if (v15 == 1836477548 && v16 == 46)
            return result;
        }
        goto LABEL_20;
      }
      v12 = 1;
      while (v11 != (llvm::GlobalAlias *)-4096)
      {
        v13 = v9 + v12++;
        v9 = v13 & (v8 - 1);
        v11 = *(llvm::GlobalAlias **)(v7 + 16 * v9);
        if (v11 == this)
        {
          v10 = v7 + 16 * v9;
          goto LABEL_15;
        }
      }
    }
    v10 = v7 + 16 * v8;
    goto LABEL_15;
  }
LABEL_20:
  if ((*((_BYTE *)this + 32) & 0xF) == 0)
  {
    if (v4 == 2
      || (result = this, v4 == 1) && (result = (llvm::GlobalAlias *)llvm::GlobalAlias::getAliaseeObject(this)) == 0
      || !*((_QWORD *)result + 6))
    {
      v18 = *(int **)(v3 + 8);
      **(_BYTE **)v3 = 1;
      if ((*((_BYTE *)this + 23) & 0x10) == 0)
      {
        v29 = 0;
        v28 = (int *)&byte_1C871356D;
        goto LABEL_33;
      }
      v19 = ***(_QWORD ***)this;
      v20 = *(_QWORD *)(v19 + 152);
      v21 = *(unsigned int *)(v19 + 168);
      if ((_DWORD)v21)
      {
        LODWORD(v22) = (v21 - 1) & (v5 ^ (this >> 9));
        v23 = v20 + 16 * v22;
        v24 = *(llvm::GlobalAlias **)v23;
        if (*(llvm::GlobalAlias **)v23 == this)
        {
LABEL_32:
          v27 = *(_QWORD **)(v23 + 8);
          v30 = *v27;
          v28 = (int *)(v27 + 2);
          v29 = v30;
LABEL_33:
          llvm::MD5::update(v18, v28, v29);
          v31 = *(int **)(v3 + 8);
          LOBYTE(__src) = 0;
          return (llvm::GlobalAlias *)llvm::MD5::update(v31, &__src, 1uLL);
        }
        v25 = 1;
        while (v24 != (llvm::GlobalAlias *)-4096)
        {
          v26 = v22 + v25++;
          v22 = v26 & (v21 - 1);
          v24 = *(llvm::GlobalAlias **)(v20 + 16 * v22);
          if (v24 == this)
          {
            v23 = v20 + 16 * v22;
            goto LABEL_32;
          }
        }
      }
      v23 = v20 + 16 * v21;
      goto LABEL_32;
    }
  }
  return result;
}

void llvm::VFABI::setVectorVariantNames(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  BOOL v8;
  const char *v9;
  size_t v10;
  size_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  unsigned int *v14;
  _QWORD v15[2];
  uint64_t v16;
  int v17;
  void *v18;
  __int128 v19;
  _QWORD v20[33];

  v20[32] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v18 = v20;
    v19 = xmmword_1C64638F0;
    sub_1C613932C((uint64_t)v15, (uint64_t)&v18);
    v6 = 24 * a3;
    do
    {
      v7 = *(_BYTE *)(a2 + 23);
      v8 = v7 < 0;
      if (v7 >= 0)
        v9 = (const char *)a2;
      else
        v9 = *(const char **)a2;
      v10 = v7 & 0x7F;
      if (v8)
        v11 = *(_QWORD *)(a2 + 8);
      else
        v11 = v10;
      v12 = llvm::raw_ostream::write((llvm::raw_ostream *)v15, v9, v11);
      v13 = (_BYTE *)*((_QWORD *)v12 + 4);
      if (*((_BYTE **)v12 + 3) == v13)
      {
        llvm::raw_ostream::write(v12, ",", 1uLL);
      }
      else
      {
        *v13 = 44;
        ++*((_QWORD *)v12 + 4);
      }
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
    *(_QWORD *)&v19 = v19 - 1;
    v14 = llvm::Attribute::get(**(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40), "vector-function-abi-variant", 0x1BuLL, (unsigned __int8 *)v18, v19);
    *(_QWORD *)(a1 + 64) = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a1 + 64), **(llvm::LLVMContext ***)a1, -1, (uint64_t)v14);
    v15[0] = off_1E81A6E70;
    if (v17 == 1 && v16)
      MEMORY[0x1CAA32F9C](v16, 0x1000C8077774924);
    if (v18 != v20)
      free(v18);
  }
}

BOOL llvm::nameUnamedGlobals(llvm *this, llvm::Module *a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t i;
  uint64_t v13;
  int v14;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20[3];
  int v21;
  llvm *v22;
  void *__p;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;

  v26 = 0;
  v22 = this;
  __p = 0;
  v24 = 0;
  v25 = 0;
  v21 = 0;
  v20[0] = (uint64_t)&v22;
  v20[1] = (uint64_t)&v21;
  v20[2] = (uint64_t)&v26;
  v3 = (char *)this + 24;
  v4 = (char *)*((_QWORD *)this + 4);
  v5 = (char *)this + 8;
  v6 = (char *)*((_QWORD *)this + 2);
  v16 = v4;
  v17 = v6;
  v18 = (char *)this + 24;
  v19 = (char *)this + 8;
  while (1)
  {
    if (v4 == v3 && v6 == v5)
    {
      v7 = v18 == v3 && v19 == v5;
      if (v7)
        break;
    }
    v8 = 0;
    do
    {
      v9 = (*(uint64_t (**)(char **, llvm::Module *))((char *)&off_1E81AA050 + v8))(&v16, a2);
      v8 += 16;
    }
    while (!v9);
    sub_1C5F51F3C(v20, v9);
    v10 = 0;
    do
    {
      if (((*(uint64_t (**)(char **))((char *)&off_1E81AA030 + v10))(&v16) & 1) != 0)
        break;
      v7 = v10 == 16;
      v10 += 16;
    }
    while (!v7);
    v4 = v16;
    v6 = v17;
  }
  v11 = (char *)this + 40;
  for (i = *((_QWORD *)this + 6); (char *)i != v11; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v13 = i - 48;
    else
      v13 = 0;
    sub_1C5F51F3C(v20, v13);
  }
  v14 = v26;
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  return v14 != 0;
}

void sub_1C5F51F3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  __int128 *p_dst;
  uint64_t v7;
  const char *v8;
  _BOOL4 v9;
  char v10;
  char v11;
  _DWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ***v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ****v23;
  uint64_t ***v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ***v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ****v34;
  uint64_t ***v35;
  int v36;
  int v37;
  size_t v38;
  void *v39;
  __int128 *v40;
  size_t v41;
  size_t v42;
  int v43;
  __int16 v44;
  _QWORD v45[4];
  __int16 v46;
  __int128 __dst;
  __int128 v48;
  __int16 v49;
  int v50;
  __int16 v51;
  void *__src;
  size_t __len[2];
  uint64_t v54;
  __int16 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
    return;
  v45[0] = "anon.";
  v46 = 259;
  v5 = (uint64_t *)*a1;
  p_dst = (__int128 *)(*a1 + 8);
  if (*(char *)(*a1 + 31) < 0)
    v7 = v5[2];
  else
    v7 = *(unsigned __int8 *)(*a1 + 31);
  if (v7)
  {
    v8 = "anon.";
    v9 = 1;
    v10 = 3;
LABEL_7:
    if (!v9)
      v8 = (const char *)v45;
    *(_QWORD *)&__dst = v8;
    *((_QWORD *)&__dst + 1) = v2;
    *(_QWORD *)&v48 = p_dst;
    LOBYTE(v49) = v10;
    HIBYTE(v49) = 4;
    v11 = 2;
    p_dst = &__dst;
    goto LABEL_10;
  }
  v57 = xmmword_1C85F4BB0;
  v58 = 0;
  v15 = *v5;
  v16 = *v5 + 24;
  v17 = *(_QWORD *)(*v5 + 32);
  if (v17 == v16)
    goto LABEL_34;
  do
  {
    v18 = (uint64_t ***)(v17 - 56);
    if (!v17)
    {
      v18 = 0;
LABEL_19:
      if (!*((_BYTE *)v18 + 16) && v18[9] == (uint64_t **)(v18 + 9) && (*((_BYTE *)v18 + 34) & 0x80) == 0)
        goto LABEL_32;
      goto LABEL_22;
    }
    if (*(_BYTE *)(v17 - 40) != 3)
      goto LABEL_19;
    if ((*(_DWORD *)(v17 - 36) & 0x7FFFFFF) == 0)
      goto LABEL_32;
LABEL_22:
    if (((_DWORD)v18[4] & 0xFu) - 7 >= 2 && (*((_BYTE *)v18 + 23) & 0x10) != 0)
    {
      v19 = ***v18;
      v20 = *(_QWORD *)(v19 + 152);
      v21 = *(unsigned int *)(v19 + 168);
      if (!(_DWORD)v21)
        goto LABEL_30;
      LODWORD(v22) = (v21 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v23 = (uint64_t ****)(v20 + 16 * v22);
      v24 = *v23;
      if (*v23 != v18)
      {
        v25 = 1;
        while (v24 != (uint64_t ***)-4096)
        {
          v26 = v22 + v25++;
          v22 = v26 & (v21 - 1);
          v24 = *(uint64_t ****)(v20 + 16 * v22);
          if (v24 == v18)
          {
            v23 = (uint64_t ****)(v20 + 16 * v22);
            goto LABEL_31;
          }
        }
LABEL_30:
        v23 = (uint64_t ****)(v20 + 16 * v21);
      }
LABEL_31:
      llvm::MD5::update((int *)&v57, (int *)v23[1] + 4, (size_t)*v23[1]);
    }
LABEL_32:
    v17 = *(_QWORD *)(v17 + 8);
  }
  while (v17 != v16);
  v15 = *v5;
LABEL_34:
  v27 = v15 + 8;
  v28 = *(_QWORD *)(v15 + 16);
  while (2)
  {
    if (v28 != v27)
    {
      v29 = (uint64_t ***)(v28 - 56);
      if (!v28)
      {
        v29 = 0;
LABEL_41:
        if (*((_BYTE *)v29 + 16) || v29[9] != (uint64_t **)(v29 + 9) || (*((_BYTE *)v29 + 34) & 0x80) != 0)
          goto LABEL_44;
LABEL_54:
        v28 = *(_QWORD *)(v28 + 8);
        continue;
      }
      if (*(_BYTE *)(v28 - 40) != 3)
        goto LABEL_41;
      if ((*(_DWORD *)(v28 - 36) & 0x7FFFFFF) == 0)
        goto LABEL_54;
LABEL_44:
      if (((_DWORD)v29[4] & 0xFu) - 7 < 2 || (*((_BYTE *)v29 + 23) & 0x10) == 0)
        goto LABEL_54;
      v30 = ***v29;
      v31 = *(_QWORD *)(v30 + 152);
      v32 = *(unsigned int *)(v30 + 168);
      if ((_DWORD)v32)
      {
        LODWORD(v33) = (v32 - 1) & ((v29 >> 4) ^ (v29 >> 9));
        v34 = (uint64_t ****)(v31 + 16 * v33);
        v35 = *v34;
        if (*v34 != v29)
        {
          v36 = 1;
          while (v35 != (uint64_t ***)-4096)
          {
            v37 = v33 + v36++;
            v33 = v37 & (v32 - 1);
            v35 = *(uint64_t ****)(v31 + 16 * v33);
            if (v35 == v29)
            {
              v34 = (uint64_t ****)(v31 + 16 * v33);
              goto LABEL_53;
            }
          }
          goto LABEL_52;
        }
      }
      else
      {
LABEL_52:
        v34 = (uint64_t ****)(v31 + 16 * v32);
      }
LABEL_53:
      llvm::MD5::update((int *)&v57, (int *)v34[1] + 4, (size_t)*v34[1]);
      goto LABEL_54;
    }
    break;
  }
  llvm::MD5::final((int *)&v57, (int *)&v56);
  __src = &v54;
  *(_OWORD *)__len = xmmword_1C677F680;
  llvm::MD5::stringifyResult((unsigned __int8 *)&v56, &__src);
  v38 = __len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v39 = __src;
  if (__len[0] >= 0x17)
  {
    v41 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17)
      v41 = __len[0] | 7;
    v42 = v41 + 1;
    v40 = (__int128 *)operator new(v41 + 1);
    *((_QWORD *)&__dst + 1) = v38;
    *(_QWORD *)&v48 = v42 | 0x8000000000000000;
    *(_QWORD *)&__dst = v40;
    goto LABEL_62;
  }
  BYTE7(v48) = __len[0];
  v40 = &__dst;
  if (__len[0])
LABEL_62:
    memmove(v40, v39, v38);
  *((_BYTE *)v40 + v38) = 0;
  if (*((char *)v5 + 31) < 0)
    operator delete(*(void **)p_dst);
  *p_dst = __dst;
  *((_QWORD *)p_dst + 2) = v48;
  if (__src != &v54)
    free(__src);
  v10 = v46;
  if (v46 == 1)
  {
    *(_QWORD *)&__dst = p_dst;
    v48 = v56;
    v49 = 260;
    v50 = v43;
    v51 = v44;
    v11 = 4;
    v8 = (const char *)*((_QWORD *)&__dst + 1);
LABEL_10:
    __src = p_dst;
    __len[0] = (size_t)v8;
    __len[1] = (size_t)".";
    LOBYTE(v55) = v11;
    HIBYTE(v55) = 3;
    v12 = (_DWORD *)a1[1];
    v13 = *v12;
    *v12 = v13 + 1;
    *(_QWORD *)&v57 = &__src;
    v58 = v13;
    v14 = 9;
    v10 = 2;
    goto LABEL_11;
  }
  if ((_BYTE)v46)
  {
    v8 = (const char *)v45[0];
    v2 = v45[1];
    v9 = HIBYTE(v46) == 1;
    if (HIBYTE(v46) != 1)
      v10 = 2;
    goto LABEL_7;
  }
  v49 = 256;
  v55 = 256;
  ++*(_DWORD *)a1[1];
  v14 = 1;
LABEL_11:
  v59 = v10;
  v60 = v14;
  llvm::Value::setName((uint64_t ***)a2, (uint64_t)&v57);
  *(_BYTE *)a1[2] = 1;
}

void llvm::initializeNameAnonGlobalLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED837740);
  if (v2 != -1)
  {
    v5[0] = sub_1C5F5244C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED837740, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5F5244C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Provide a name to nameless globals";
  *(_QWORD *)(v2 + 8) = 34;
  *(_QWORD *)(v2 + 16) = "name-anon-globals";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5890;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5F524DC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5F524DC()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F5890;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E81A9FA0;
  return result;
}

void sub_1C5F52528(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5F5254C()
{
  return "Name Anon Globals";
}

BOOL sub_1C5F5255C(int a1, llvm *this)
{
  return llvm::nameUnamedGlobals(this, this);
}

void llvm::initializePredicateInfoPrinterLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED837748);
  if (v2 != -1)
  {
    v5[0] = sub_1C5F525C4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED837748, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5F525C4(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializeAssumptionCacheTrackerPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "PredicateInfo Printer";
  *(_QWORD *)(v2 + 8) = 21;
  *(_QWORD *)(v2 + 16) = "print-predicateinfo";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &llvm::PredicateInfoPrinterLegacyPass::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::PredicateInfoPrinterLegacyPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

BOOL llvm::PredicateInfoBuilder::stackIsInScope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const llvm::Use *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::DominatorTree *v12;
  uint64_t v13;
  _QWORD v14[2];

  v3 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v3)
    return v3;
  v4 = *(_QWORD *)a2 + 48 * v3;
  if (!*(_BYTE *)(v4 - 8))
  {
    if (*(_DWORD *)a3 >= *(_DWORD *)(v4 - 48))
      return *(_DWORD *)(a3 + 4) <= *(_DWORD *)(v4 - 44);
    return 0;
  }
  v5 = *(const llvm::Use **)(a3 + 24);
  if (!v5)
    return 0;
  v3 = 0;
  v6 = *((_QWORD *)v5 + 3);
  if (v6 && *(_BYTE *)(v6 + 16) == 83)
  {
    v7 = *(_DWORD *)(v6 + 20);
    if ((v7 & 0x40000000) != 0)
      v8 = *(_QWORD *)(v6 - 8);
    else
      v8 = v6 - 32 * (v7 & 0x7FFFFFF);
    v9 = *(_QWORD *)(v8 + 32 * *(unsigned int *)(v6 + 60) + 8 * (((unint64_t)v5 - v8) >> 5));
    v10 = *(_QWORD *)(v4 - 16);
    if (v9 == *(_QWORD *)(v10 + 56))
    {
      v12 = *(llvm::DominatorTree **)(a1 + 16);
      v13 = *(_QWORD *)(v10 + 64);
      v14[0] = v9;
      v14[1] = v13;
      return llvm::DominatorTree::dominates(v12, (const llvm::BasicBlockEdge *)v14, v5);
    }
    return 0;
  }
  return v3;
}

BOOL llvm::PredicateInfoBuilder::popStackUntilDFSScope(_BOOL8 result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;

  if (*(_DWORD *)(a2 + 8))
  {
    v5 = result;
    do
    {
      result = llvm::PredicateInfoBuilder::stackIsInScope(v5, a2, a3);
      if (result)
        break;
      v6 = *(_DWORD *)(a2 + 8) - 1;
      *(_DWORD *)(a2 + 8) = v6;
    }
    while (v6);
  }
  return result;
}

_OWORD *llvm::PredicateInfoBuilder::convertUsesToDFSOrdered(_OWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v5 = result;
    do
    {
      v6 = *(_QWORD *)(v3 + 24);
      v7 = *(unsigned __int8 *)(v6 + 16);
      if (v6)
        v8 = v7 >= 0x1C;
      else
        v8 = 0;
      if (!v8)
        goto LABEL_24;
      v28 = 0;
      v29 = 0;
      v31 = 0;
      v30 = 0;
      if (v7 == 83)
      {
        v9 = *(_DWORD *)(v6 + 20);
        if ((v9 & 0x40000000) != 0)
          v10 = *(_QWORD *)(v6 - 8);
        else
          v10 = v6 - 32 * (v9 & 0x7FFFFFF);
        v11 = (uint64_t *)(v10
                        + 32 * *(unsigned int *)(v6 + 60)
                        + 8 * ((unint64_t)(v3 - v10) >> 5));
        v12 = 2;
      }
      else
      {
        v11 = (uint64_t *)(v6 + 40);
        v12 = 1;
      }
      v13 = *v11;
      v27 = v12;
      v14 = *((_QWORD *)v5 + 2);
      v15 = *(_QWORD *)(v14 + 24);
      v16 = *(unsigned int *)(v14 + 40);
      if ((_DWORD)v16)
      {
        LODWORD(v17) = (v16 - 1) & ((v13 >> 4) ^ (v13 >> 9));
        v18 = (uint64_t *)(v15 + 16 * v17);
        v19 = *v18;
        if (v13 == *v18)
          goto LABEL_21;
        v20 = 1;
        while (v19 != -4096)
        {
          v21 = v17 + v20++;
          v17 = v21 & (v16 - 1);
          v19 = *(_QWORD *)(v15 + 16 * v17);
          if (v13 == v19)
          {
            v18 = (uint64_t *)(v15 + 16 * v17);
            goto LABEL_21;
          }
        }
      }
      v18 = (uint64_t *)(v15 + 16 * v16);
LABEL_21:
      if (v18 != (uint64_t *)(v15 + 16 * v16))
      {
        v22 = v18[1];
        if (v22)
        {
          v26 = *(_QWORD *)(v22 + 72);
          v29 = v3;
          result = (_OWORD *)sub_1C4FE36B8(a3, (unint64_t)&v26);
          v23 = (_OWORD *)(*(_QWORD *)a3 + 48 * *(unsigned int *)(a3 + 8));
          v25 = result[1];
          v24 = result[2];
          *v23 = *result;
          v23[1] = v25;
          v23[2] = v24;
          ++*(_DWORD *)(a3 + 8);
        }
      }
LABEL_24:
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
  return result;
}

BOOL llvm::shouldRename(llvm *this, llvm::Value *a2)
{
  unsigned int v2;
  uint64_t v4;

  v2 = *((unsigned __int8 *)this + 16);
  if (v2 <= 0x1B && v2 != 21)
    return 0;
  v4 = *((_QWORD *)this + 1);
  return !v4 || *(_QWORD *)(v4 + 8) != 0;
}

_QWORD *llvm::collectCmpOps(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(result - 8);
  v3 = *(result - 4);
  if (v2 != v3)
  {
    v4 = *(unsigned int *)(a2 + 8);
    if (v4 >= *(_DWORD *)(a2 + 12))
    {
      v10 = *(result - 4);
      v7 = *(result - 8);
      v8 = a2;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v4 + 1, 8);
      v2 = v7;
      a2 = v8;
      v3 = v10;
      LODWORD(v4) = *(_DWORD *)(v8 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v4) = v2;
    v5 = *(_DWORD *)(a2 + 12);
    v6 = (*(_DWORD *)(a2 + 8) + 1);
    *(_DWORD *)(a2 + 8) = v6;
    if (v6 >= v5)
    {
      v11 = v3;
      v9 = a2;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v6 + 1, 8);
      v3 = v11;
      a2 = v9;
      LODWORD(v6) = *(_DWORD *)(v9 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v6) = v3;
    ++*(_DWORD *)(a2 + 8);
  }
  return result;
}

_DWORD *llvm::PredicateInfoBuilder::addInfoFor(llvm::PredicateInfoBuilder *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  _DWORD *result;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  result = (_DWORD *)llvm::PredicateInfoBuilder::getOrCreateValueInfo(a1, a3);
  v9 = (uint64_t)result;
  v10 = result[2];
  if (!v10)
  {
    v13 = *(unsigned int *)(a2 + 8);
    if (v13 >= *(_DWORD *)(a2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13 + 1, 8);
      LODWORD(v13) = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = a3;
    ++*(_DWORD *)(a2 + 8);
    v10 = *(_DWORD *)(v9 + 8);
  }
  v11 = (uint64_t *)(*(_QWORD *)a1 + 8);
  v12 = *v11;
  *(_QWORD *)(a4 + 8) = *v11;
  *(_QWORD *)(a4 + 16) = v11;
  *(_QWORD *)(v12 + 8) = a4 + 8;
  *v11 = a4 + 8;
  if (v10 >= *(_DWORD *)(v9 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v9, v9 + 16, v10 + 1, 8);
    v10 = *(_DWORD *)(v9 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v9 + 8 * v10) = a4;
  ++*(_DWORD *)(v9 + 8);
  return result;
}

uint64_t llvm::PredicateInfoBuilder::getOrCreateValueInfo(llvm::PredicateInfoBuilder *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  int v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  int v15;
  llvm::Value *v16;
  int v17;
  _QWORD v18[3];

  v4 = *((_QWORD *)this + 198);
  v5 = *((unsigned int *)this + 400);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = v4 + 16 * v6;
    v8 = *(llvm::Value **)v7;
    if (*(llvm::Value **)v7 == a2)
      goto LABEL_8;
    v9 = 1;
    while (v8 != (llvm::Value *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(llvm::Value **)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = v4 + 16 * v6;
        goto LABEL_8;
      }
    }
  }
  v7 = v4 + 16 * v5;
LABEL_8:
  v11 = (uint64_t *)((char *)this + 32);
  if (v7 == v4 + 16 * v5)
  {
    sub_1C5F55408((uint64_t)v11, *((unsigned int *)this + 10) + 1);
    v15 = *((_DWORD *)this + 10) - 1;
    v16 = a2;
    v17 = v15;
    sub_1C5ADC8F0((uint64_t)this + 1584, (uint64_t *)&v16, &v17, (uint64_t)v18);
    v12 = *(_DWORD *)(v18[0] + 8);
    v13 = *((_QWORD *)this + 4);
  }
  else
  {
    v12 = *(_DWORD *)(v7 + 8);
    v13 = *v11;
  }
  return v13 + 48 * v12;
}

void llvm::PredicateInfoBuilder::processAssume(llvm::PredicateInfoBuilder *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  BOOL v16;
  char *v17;
  uint64_t *v18;
  llvm::Value *v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  _BYTE v30[32];
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  unsigned int v37;
  _QWORD v38[6];

  v38[4] = *MEMORY[0x1E0C80C00];
  v35 = v38;
  v37 = 4;
  v26 = v30;
  v27 = v30;
  v28 = 4;
  v29 = 0;
  v38[0] = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v7 = 1;
  do
  {
    v8 = *((_QWORD *)v35 + v7 - 1);
    v36 = v7 - 1;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v26, v8);
    if (!v9)
      goto LABEL_32;
    if ((HIDWORD(v28) - v29) > 8)
      break;
    v24 = 0;
    v25 = 0;
    v31 = &v25;
    v32 = (uint64_t)&v24;
    if (sub_1C4848F80((_QWORD **)&v31, v8))
    {
      v10 = v24;
      v11 = v36;
      if (v36 >= (unint64_t)v37)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, (uint64_t)v38, v36 + 1, 8);
        v11 = v36;
      }
      *((_QWORD *)v35 + v11) = v10;
      v12 = v36 + 1;
      v36 = v12;
      v13 = v25;
      if (v12 >= v37)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, (uint64_t)v38, v12 + 1, 8);
        LODWORD(v12) = v36;
      }
      *((_QWORD *)v35 + v12) = v13;
      ++v36;
    }
    v31 = &v33;
    v33 = v8;
    v32 = 0x400000001;
    v14 = *(unsigned __int8 *)(v8 + 16);
    if (v8)
      v15 = v14 >= 0x1C;
    else
      v15 = 0;
    v16 = v15 && v14 - 83 >= 0xFFFFFFFE;
    v17 = (char *)&v34;
    v18 = &v33;
    if (!v16)
      goto LABEL_20;
    llvm::collectCmpOps((_QWORD *)v8, (uint64_t)&v31);
    v18 = (uint64_t *)v31;
    if ((_DWORD)v32)
    {
      v17 = (char *)v31 + 8 * v32;
      do
      {
LABEL_20:
        v19 = (llvm::Value *)*v18;
        v20 = *(unsigned __int8 *)(*v18 + 16);
        if (v20 > 0x1B || v20 == 21)
        {
          v22 = *((_QWORD *)v19 + 1);
          if (!v22 || *(_QWORD *)(v22 + 8))
          {
            v23 = operator new();
            *(_QWORD *)(v23 + 8) = 0;
            *(_QWORD *)(v23 + 16) = 0;
            *(_DWORD *)(v23 + 24) = 1;
            *(_QWORD *)(v23 + 32) = v19;
            *(_QWORD *)v23 = &off_1E81AA120;
            *(_QWORD *)(v23 + 48) = v8;
            *(_QWORD *)(v23 + 56) = a2;
            llvm::PredicateInfoBuilder::addInfoFor(a1, a4, v19, v23);
          }
        }
        ++v18;
      }
      while (v18 != (uint64_t *)v17);
      v18 = (uint64_t *)v31;
    }
    if (v18 != &v33)
      free(v18);
LABEL_32:
    v7 = v36;
  }
  while (v36);
  if (v27 != v26)
    free(v27);
  if (v35 != v38)
    free(v35);
}

void llvm::PredicateInfoBuilder::processBranch(llvm::PredicateInfoBuilder *a1, uint64_t a2, llvm::BasicBlock *a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  llvm::BasicBlock *v11;
  unsigned int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  BOOL v21;
  char *v22;
  uint64_t *v23;
  llvm::Value *v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  char v30;
  llvm::BasicBlock *v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  _BYTE v40[32];
  _QWORD *v41[3];
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD v49[4];
  _QWORD v50[4];

  v7 = 0;
  v8 = 0;
  v50[2] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a2 - 64);
  v31 = *(llvm::BasicBlock **)(a2 - 32);
  v50[0] = v31;
  v50[1] = v9;
  v32 = (uint64_t)a1 + 1608;
  do
  {
    v10 = v7;
    v11 = (llvm::BasicBlock *)v50[v8];
    if (v11 == a3)
      goto LABEL_44;
    v30 = v7;
    v46 = v49;
    v48 = 4;
    v36 = v40;
    v37 = v40;
    v38 = 4;
    v39 = 0;
    v49[0] = *(_QWORD *)(a2 - 96);
    v12 = 1;
    do
    {
      v13 = v46[v12 - 1];
      v47 = v12 - 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v36, v13);
      if (!v14)
        goto LABEL_38;
      if ((HIDWORD(v38) - v39) > 8)
        break;
      v34 = 0;
      v35 = 0;
      if (v11 == v31)
      {
        v42 = &v35;
        v43 = (uint64_t)&v34;
        if ((sub_1C4848F80((_QWORD **)&v42, v13) & 1) == 0)
          goto LABEL_15;
      }
      else
      {
        v41[0] = &v35;
        v41[1] = &v34;
        if (!sub_1C4849098(v41, v13))
          goto LABEL_15;
      }
      v15 = v34;
      v16 = v47;
      if (v47 >= (unint64_t)v48)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v49, v47 + 1, 8);
        v16 = v47;
      }
      v46[v16] = v15;
      v17 = v47 + 1;
      v47 = v17;
      v18 = v35;
      if (v17 >= v48)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v49, v17 + 1, 8);
        LODWORD(v17) = v47;
      }
      v46[v17] = v18;
      ++v47;
LABEL_15:
      v42 = &v44;
      v44 = v13;
      v43 = 0x400000001;
      v19 = *(unsigned __int8 *)(v13 + 16);
      if (v13)
        v20 = v19 >= 0x1C;
      else
        v20 = 0;
      v21 = v20 && v19 - 83 >= 0xFFFFFFFE;
      v22 = (char *)&v45;
      v23 = &v44;
      if (!v21)
        goto LABEL_25;
      llvm::collectCmpOps((_QWORD *)v13, (uint64_t)&v42);
      v23 = (uint64_t *)v42;
      if ((_DWORD)v43)
      {
        v22 = (char *)v42 + 8 * v43;
        do
        {
LABEL_25:
          v24 = (llvm::Value *)*v23;
          v25 = *(unsigned __int8 *)(*v23 + 16);
          if (v25 > 0x1B || v25 == 21)
          {
            v27 = *((_QWORD *)v24 + 1);
            if (!v27 || *(_QWORD *)(v27 + 8))
            {
              v28 = operator new();
              *(_QWORD *)(v28 + 8) = 0;
              *(_QWORD *)(v28 + 16) = 0;
              *(_DWORD *)(v28 + 24) = 0;
              *(_QWORD *)(v28 + 32) = v24;
              *(_QWORD *)(v28 + 48) = v13;
              *(_QWORD *)(v28 + 56) = a3;
              *(_QWORD *)(v28 + 64) = v11;
              *(_QWORD *)v28 = &off_1E81AA140;
              *(_BYTE *)(v28 + 72) = v11 == v31;
              llvm::PredicateInfoBuilder::addInfoFor(a1, a4, v24, v28);
              if (!llvm::BasicBlock::getSinglePredecessor(v11))
              {
                v33[0] = a3;
                v33[1] = v11;
                sub_1C5F55624((uint64_t)v41, v32, v33);
              }
            }
          }
          ++v23;
        }
        while (v23 != (uint64_t *)v22);
        v23 = (uint64_t *)v42;
      }
      if (v23 != &v44)
        free(v23);
LABEL_38:
      v12 = v47;
    }
    while (v47);
    if (v37 != v36)
      free(v37);
    if (v46 != v49)
      free(v46);
    v10 = v30;
LABEL_44:
    v7 = 1;
    v8 = 1;
  }
  while ((v10 & 1) == 0);
}

uint64_t llvm::PredicateInfoBuilder::processSwitch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::PredicateInfoBuilder *v6;
  unsigned int v7;
  llvm::Value **v8;
  llvm::Value *v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t i;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  llvm::BasicBlock *v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[2];
  _QWORD v35[3];
  _QWORD v36[35];

  v6 = (llvm::PredicateInfoBuilder *)result;
  v36[33] = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(a2 + 20);
  if ((v7 & 0x40000000) != 0)
    v8 = *(llvm::Value ***)(a2 - 8);
  else
    v8 = (llvm::Value **)(a2 - 32 * (v7 & 0x7FFFFFF));
  v9 = *v8;
  v10 = *((unsigned __int8 *)*v8 + 16);
  if (v10 > 0x1B || v10 == 21)
  {
    v12 = *((_QWORD *)v9 + 1);
    if (!v12 || *(_QWORD *)(v12 + 8))
    {
      v36[0] = 1;
      for (i = 1; i != 33; i += 2)
        v36[i] = -4096;
      v14 = (v7 >> 1) & 0x3FFFFFF;
      if (v14)
      {
        v15 = 0;
        v16 = (unint64_t)v14 << 6;
        do
        {
          v35[0] = 0;
          v17 = *(_DWORD *)(a2 + 20);
          if ((v17 & 0x40000000) != 0)
            v18 = *(_QWORD *)(a2 - 8);
          else
            v18 = a2 - 32 * (v17 & 0x7FFFFFF);
          v35[0] = *(_QWORD *)(v18 + v15 + 32);
          result = (uint64_t)sub_1C63B430C(v36, v35);
          ++*(_DWORD *)(result + 8);
          v15 += 64;
        }
        while (v16 != v15);
        v19 = (*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF;
        v20 = (v19 - 1);
        if (v19 == 1)
        {
LABEL_36:
          if ((v36[0] & 1) == 0)
            return MEMORY[0x1CAA32FB4](v36[1], 8);
          return result;
        }
      }
      else
      {
        v20 = 0xFFFFFFFFLL;
      }
      v21 = 4294967294;
      v22 = 2;
      do
      {
        v23 = *(_DWORD *)(a2 + 20);
        if ((v23 & 0x40000000) != 0)
          v24 = *(_QWORD *)(a2 - 8);
        else
          v24 = a2 - 32 * (v23 & 0x7FFFFFF);
        v25 = (v22 + 1);
        if (!v21)
          v25 = 1;
        v26 = *(llvm::BasicBlock **)(v24 + 32 * v25);
        v35[0] = v26;
        v34[0] = 0;
        result = sub_1C5B12EEC((uint64_t)v36, v35, v34);
        if ((result & 1) != 0 && *(_DWORD *)(v34[0] + 8) == 1)
        {
          v27 = operator new();
          v28 = *(_DWORD *)(a2 + 20);
          if ((v28 & 0x40000000) != 0)
            v29 = *(uint64_t **)(a2 - 8);
          else
            v29 = (uint64_t *)(a2 - 32 * (v28 & 0x7FFFFFF));
          v30 = v29[4 * (v22 & 0xFFFFFFFE)];
          v31 = *(_QWORD *)(a2 + 40);
          v32 = *v29;
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v27 + 16) = 0;
          *(_DWORD *)(v27 + 24) = 2;
          *(_QWORD *)(v27 + 32) = v9;
          *(_QWORD *)(v27 + 48) = v32;
          *(_QWORD *)(v27 + 56) = v31;
          *(_QWORD *)v27 = &off_1E81AA160;
          *(_QWORD *)(v27 + 64) = v26;
          *(_QWORD *)(v27 + 72) = v30;
          *(_QWORD *)(v27 + 80) = a2;
          llvm::PredicateInfoBuilder::addInfoFor(v6, a4, v9, v27);
          result = llvm::BasicBlock::getSinglePredecessor(v26);
          if (!result)
          {
            v34[0] = a3;
            v34[1] = v26;
            result = (uint64_t)sub_1C5F55624((uint64_t)v35, (uint64_t)v6 + 1608, v34);
          }
        }
        v22 += 2;
        --v21;
        --v20;
      }
      while (v20);
      goto LABEL_36;
    }
  }
  return result;
}

void llvm::PredicateInfoBuilder::buildPredicateInfo(llvm::PredicateInfoBuilder *this)
{
  _BYTE *v2;
  const void *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  const void *v8;
  void *v9;
  unsigned int v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  BOOL v15;
  llvm::BasicBlock *v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  _BYTE *v33;
  _BYTE v34[64];
  char *v35;
  char *v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  _BYTE v43[64];
  void *__p;
  char *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  void *v52;
  _BYTE *v53;
  void *v54;
  void *v55;
  unsigned int v56;
  unsigned int v57;
  void *v58;
  _BYTE *v59;
  void *v60[2];
  _QWORD v61[9];

  v61[8] = *MEMORY[0x1E0C80C00];
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::updateDFSNumbers(*((_QWORD *)this + 2));
  v60[0] = v61;
  v60[1] = (void *)0x800000000;
  v38 = *(_BYTE **)(*((_QWORD *)this + 2) + 48);
  sub_1C4EA1748((uint64_t *)&v38, (uint64_t)&v47);
  v2 = v43;
  v38 = v43;
  v3 = v48;
  if (v48 == v47)
  {
    v39 = v43;
    v4 = v48;
  }
  else
  {
    v31 = v49;
    v2 = malloc_type_malloc(8 * v49, 0x4065EBACuLL);
    if (!v2)
    {
      if (v31)
        goto LABEL_95;
      v2 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v2)
        goto LABEL_95;
    }
    v39 = v2;
    v4 = v47;
    v3 = v48;
  }
  v5 = v50;
  v40 = v49;
  if (v3 == v4)
    v6 = v50;
  else
    v6 = v49;
  if (v6)
  {
    memmove(v2, v3, 8 * v6);
    v5 = v50;
  }
  v41 = v5;
  v42 = v51;
  v45 = 0;
  v46 = 0;
  __p = 0;
  sub_1C4D6CDA0(&__p, v52, v53, 0xAAAAAAAAAAAAAAABLL * ((v53 - (_BYTE *)v52) >> 3));
  v7 = v34;
  v8 = v55;
  if (v55 != v54)
  {
    v32 = v56;
    v7 = malloc_type_malloc(8 * v56, 0x4065EBACuLL);
    if (v7 || !v32 && (v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v33 = v7;
      v9 = v54;
      v8 = v55;
      goto LABEL_10;
    }
LABEL_95:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v33 = v34;
  v9 = v55;
LABEL_10:
  if (v8 == v9)
    v10 = v57;
  else
    v10 = v56;
  if (v10)
    memmove(v7, v8, 8 * v10);
  v36 = 0;
  v37 = 0;
  v35 = 0;
  sub_1C4D6CDA0(&v35, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - (_BYTE *)v58) >> 3));
  while (1)
  {
    if (v45 - (_BYTE *)__p != v36 - v35)
      goto LABEL_30;
    if (__p == v45)
      break;
    v11 = v35 + 8;
    v12 = (char *)__p + 8;
    while (1)
    {
      v13 = v12 - 8;
      if (*((_QWORD *)v12 - 1) != *((_QWORD *)v11 - 1))
        break;
      v14 = v11[8];
      if (v12[8])
        v15 = v14 == 0;
      else
        v15 = 1;
      if (v15)
      {
        if ((v12[8] == 0) == (v14 != 0))
          break;
      }
      else if (*(_QWORD *)v12 != *(_QWORD *)v11)
      {
        break;
      }
      v11 += 24;
      v12 += 24;
      if (v13 + 24 == v45)
        goto LABEL_54;
    }
LABEL_30:
    v16 = (llvm::BasicBlock *)**((_QWORD **)v45 - 3);
    v17 = (_QWORD *)*((_QWORD *)v16 + 5);
    if (v17 != (_QWORD *)((char *)v16 + 40))
    {
      if (v17)
        v18 = (uint64_t)(v17 - 3);
      else
        v18 = 0;
      v19 = *(unsigned __int8 *)(v18 + 16) - 40;
      if (v19 >= 0xFFFFFFF5)
        v20 = v18;
      else
        v20 = 0;
      v21 = *(unsigned __int8 *)(v20 + 16);
      if (v17 && (v21 == 30 ? (v22 = v19 >= 0xFFFFFFF5) : (v22 = 0), v22))
      {
        if ((*(_DWORD *)(v20 + 20) & 0x7FFFFFF) == 3 && *(_QWORD *)(v20 - 32) != *(_QWORD *)(v20 - 64))
          llvm::PredicateInfoBuilder::processBranch(this, v20, v16, (uint64_t)v60);
      }
      else if (v17)
      {
        if (v21 == 31 && v19 >= 0xFFFFFFF5)
          llvm::PredicateInfoBuilder::processSwitch((uint64_t)this, v20, (uint64_t)v16, (uint64_t)v60);
      }
    }
    sub_1C4E1FD70((llvm::SmallPtrSetImplBase *)&v38);
  }
LABEL_54:
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
  if (v33 != v34)
    free(v33);
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
  if (v39 != v38)
    free(v39);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v55 != v54)
    free(v55);
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  if (v48 != v47)
    free(v48);
  v24 = *((_QWORD *)this + 3);
  if (!*(_BYTE *)(v24 + 184))
    llvm::AssumptionCache::scanFunction(*((llvm::AssumptionCache **)this + 3));
  v25 = *(unsigned int *)(v24 + 24);
  if ((_DWORD)v25)
  {
    v26 = 32 * v25;
    v27 = (uint64_t *)(*(_QWORD *)(v24 + 16) + 16);
    do
    {
      v28 = *v27;
      if (*v27)
      {
        if (*(_BYTE *)(v28 + 16) == 84)
        {
          v29 = *(_QWORD *)(v28 - 32);
          if (v29)
          {
            if (!*(_BYTE *)(v29 + 16)
              && *(_QWORD *)(v29 + 24) == *(_QWORD *)(v28 + 72)
              && (*(_DWORD *)(v29 + 32) & 0x2000) != 0
              && llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*((_QWORD *)this + 2), *(_QWORD *)(v28 + 40)))
            {
              llvm::PredicateInfoBuilder::processAssume(this, v28, v30, (uint64_t)v60);
            }
          }
        }
      }
      v27 += 4;
      v26 -= 32;
    }
    while (v26);
  }
  llvm::PredicateInfoBuilder::renameUses((uint64_t)this, (uint64_t)v60);
  if (v60[0] != v61)
    free(v60[0]);
}

void llvm::PredicateInfoBuilder::renameUses(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  int v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  _OWORD *v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __n128 v69;
  int *v70;
  unint64_t v71;
  __n128 *v72;
  unint64_t v73;
  void *v74;
  BOOL v75;
  void *v76;
  int *v77;
  char *v78;
  uint64_t v79;
  _BOOL4 v80;
  _BOOL4 v81;
  unsigned int v82;
  _OWORD *v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t *v96;
  int v97;
  void *v98;
  uint64_t v99;
  _QWORD v100[2];
  uint64_t v101;
  char v102;
  int *v103;
  uint64_t v104;
  _QWORD v105[98];

  v105[96] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v2)
    return;
  v4 = *(uint64_t **)a2;
  v94 = *(_QWORD *)a2 + 8 * v2;
  v95 = *(void **)(a1 + 16);
  do
  {
    v5 = *v4;
    v97 = 0;
    v103 = (int *)v105;
    v104 = 0x1000000000;
    v6 = *(_DWORD *)(a1 + 1600);
    v96 = v4;
    if (!v6)
      goto LABEL_9;
    v7 = *(_QWORD *)(a1 + 1584);
    v8 = v6 - 1;
    v9 = (v6 - 1) & ((v5 >> 4) ^ (v5 >> 9));
    v10 = *(_QWORD *)(v7 + 16 * v9);
    if (v5 != v10)
    {
      v11 = 1;
      while (v10 != -4096)
      {
        v12 = v9 + v11++;
        v9 = v12 & v8;
        v10 = *(_QWORD *)(v7 + 16 * v9);
        if (v5 == v10)
          goto LABEL_8;
      }
LABEL_9:
      v13 = 0;
      goto LABEL_10;
    }
LABEL_8:
    v13 = *(_DWORD *)(v7 + 16 * v9 + 8);
LABEL_10:
    v14 = *(_QWORD *)(a1 + 32) + 48 * v13;
    v15 = *(unsigned int *)(v14 + 8);
    if ((_DWORD)v15)
    {
      v16 = *(uint64_t **)v14;
      v17 = *(_QWORD *)v14 + 8 * v15;
      while (1)
      {
        v98 = 0;
        LODWORD(v99) = 1;
        v102 = 0;
        v100[1] = 0;
        v101 = 0;
        v100[0] = 0;
        v18 = *v16;
        v19 = *(_DWORD *)(*v16 + 24);
        if (*v16)
        {
          if (v19 == 1)
            break;
        }
        if ((v19 & 0xFFFFFFFD) == 0)
        {
          v29 = *(_QWORD *)(v18 + 64);
          v30 = *(_DWORD *)(a1 + 1624);
          v31 = v29 >> 4;
          if (!v30)
            goto LABEL_40;
          v32 = *(_QWORD *)(v18 + 56);
          v33 = *(_QWORD *)(a1 + 1608);
          v34 = (v32 >> 4) ^ (v32 >> 9);
          v35 = (v31 ^ (v29 >> 9) | (unint64_t)(v34 << 32))
              + ~((unint64_t)(v31 ^ (v29 >> 9)) << 32);
          v36 = (v35 ^ (v35 >> 22)) + ~((v35 ^ (v35 >> 22)) << 13);
          v37 = (9 * (v36 ^ (v36 >> 8))) ^ ((9 * (v36 ^ (v36 >> 8))) >> 15);
          v38 = v30 - 1;
          v39 = v38 & (((v37 + ~(v37 << 27)) >> 31) ^ (v37 + ~((_DWORD)v37 << 27)));
          v40 = (uint64_t *)(v33 + 16 * v39);
          v42 = *v40;
          v41 = v40[1];
          if (v32 != v42 || v29 != v41)
          {
            v44 = 1;
            while (v42 != -4096 || v41 != -4096)
            {
              v45 = v39 + v44++;
              v39 = v45 & v38;
              v46 = (uint64_t *)(v33 + 16 * v39);
              v42 = *v46;
              v41 = v46[1];
              if (v32 == v42 && v29 == v41)
                goto LABEL_34;
            }
LABEL_40:
            LODWORD(v99) = 0;
            v55 = *(_QWORD *)(a1 + 16);
            v56 = *(_QWORD *)(v55 + 24);
            v57 = *(unsigned int *)(v55 + 40);
            if ((_DWORD)v57)
            {
              LODWORD(v58) = (v57 - 1) & (v31 ^ (v29 >> 9));
              v25 = (uint64_t *)(v56 + 16 * v58);
              v59 = *v25;
              if (v29 != *v25)
              {
                v60 = 1;
                while (v59 != -4096)
                {
                  v61 = v58 + v60++;
                  v58 = v61 & (v57 - 1);
                  v59 = *(_QWORD *)(v56 + 16 * v58);
                  if (v29 == v59)
                  {
                    v25 = (uint64_t *)(v56 + 16 * v58);
                    goto LABEL_59;
                  }
                }
                goto LABEL_58;
              }
            }
            else
            {
LABEL_58:
              v25 = (uint64_t *)(v56 + 16 * v57);
            }
LABEL_59:
            v62 = (uint64_t *)(v56 + 16 * v57);
LABEL_48:
            if (v25 == v62)
              goto LABEL_52;
            v63 = v25[1];
            if (!v63)
              goto LABEL_52;
            v98 = *(void **)(v63 + 72);
            v101 = v18;
LABEL_51:
            v64 = (_OWORD *)sub_1C4FE36B8((uint64_t)&v103, (unint64_t)&v98);
            v65 = (char *)&v103[12 * v104];
            v67 = v64[1];
            v66 = v64[2];
            *(_OWORD *)v65 = *v64;
            *((_OWORD *)v65 + 1) = v67;
            *((_OWORD *)v65 + 2) = v66;
            LODWORD(v104) = v104 + 1;
            goto LABEL_52;
          }
LABEL_34:
          LODWORD(v99) = 2;
          v48 = *(_QWORD *)(a1 + 16);
          v49 = *(_QWORD *)(v48 + 24);
          v50 = *(unsigned int *)(v48 + 40);
          if ((_DWORD)v50)
          {
            LODWORD(v34) = (v50 - 1) & v34;
            v51 = (uint64_t *)(v49 + 16 * v34);
            v52 = *v51;
            if (v32 != *v51)
            {
              v53 = 1;
              while (v52 != -4096)
              {
                v54 = v34 + v53++;
                v34 = v54 & (v50 - 1);
                v52 = *(_QWORD *)(v49 + 16 * v34);
                if (v32 == v52)
                {
                  v51 = (uint64_t *)(v49 + 16 * v34);
                  goto LABEL_55;
                }
              }
              goto LABEL_54;
            }
          }
          else
          {
LABEL_54:
            v51 = (uint64_t *)(v49 + 16 * v50);
          }
LABEL_55:
          if (v51 == (uint64_t *)(v49 + 16 * v50))
            goto LABEL_52;
          v68 = v51[1];
          if (!v68)
            goto LABEL_52;
          v98 = *(void **)(v68 + 72);
          v101 = v18;
          v102 = 1;
          goto LABEL_51;
        }
LABEL_52:
        if (++v16 == (uint64_t *)v17)
          goto LABEL_60;
      }
      v20 = *(_QWORD *)(a1 + 16);
      v21 = *(_QWORD *)(v20 + 24);
      v22 = *(unsigned int *)(v20 + 40);
      if ((_DWORD)v22)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 40);
        LODWORD(v24) = ((v23 >> 4) ^ (v23 >> 9)) & (v22 - 1);
        v25 = (uint64_t *)(v21 + 16 * v24);
        v26 = *v25;
        if (v23 == *v25)
        {
LABEL_47:
          v62 = (uint64_t *)(v21 + 16 * v22);
          goto LABEL_48;
        }
        v27 = 1;
        while (v26 != -4096)
        {
          v28 = v24 + v27++;
          v24 = v28 & (v22 - 1);
          v26 = *(_QWORD *)(v21 + 16 * v24);
          if (v23 == v26)
          {
            v25 = (uint64_t *)(v21 + 16 * v24);
            goto LABEL_47;
          }
        }
      }
      v25 = (uint64_t *)(v21 + 16 * v22);
      goto LABEL_47;
    }
LABEL_60:
    llvm::PredicateInfoBuilder::convertUsesToDFSOrdered((_OWORD *)a1, v5, (uint64_t)&v103);
    v70 = v103;
    v71 = v104;
    v72 = (__n128 *)&v103[12 * v104];
    v98 = v95;
    if (v104 < 0x81)
    {
LABEL_64:
      sub_1C5F55D08(v70, v72, (uint64_t *)&v98, v71, 0, 0, v69);
    }
    else
    {
      v73 = v104;
      while (1)
      {
        v74 = operator new(48 * v73, MEMORY[0x1E0DE4E10]);
        if (v74)
          break;
        v75 = v73 > 1;
        v73 >>= 1;
        if (!v75)
          goto LABEL_64;
      }
      v76 = v74;
      sub_1C5F55D08(v70, v72, (uint64_t *)&v98, v71, (uint64_t)v74, v73, v69);
      operator delete(v76);
    }
    v98 = v100;
    v99 = 0x800000000;
    if (!(_DWORD)v104)
      goto LABEL_90;
    v77 = v103;
    v78 = (char *)&v103[12 * v104];
    do
    {
      v79 = *((_QWORD *)v77 + 4);
      v80 = (*((_QWORD *)v77 + 2) | v79) != 0;
      v81 = llvm::PredicateInfoBuilder::stackIsInScope(a1, (uint64_t)&v98, (uint64_t)v77);
      v82 = v99;
      if (!v81 || v80)
      {
        for (; (_DWORD)v99; LODWORD(v99) = v99 - 1)
        {
          if (llvm::PredicateInfoBuilder::stackIsInScope(a1, (uint64_t)&v98, (uint64_t)v77))
            break;
        }
        if (!v80)
        {
          v82 = v99;
          if (!(_DWORD)v99)
            goto LABEL_87;
          goto LABEL_76;
        }
        v83 = (_OWORD *)sub_1C4FE36B8((uint64_t)&v98, (unint64_t)v77);
        v84 = (char *)v98 + 48 * v99;
        v86 = v83[1];
        v85 = v83[2];
        *v84 = *v83;
        v84[1] = v86;
        v84[2] = v85;
        v82 = v99 + 1;
        LODWORD(v99) = v99 + 1;
      }
      if (!v82)
        goto LABEL_87;
LABEL_76:
      if (!(*((_QWORD *)v77 + 2) | v79))
      {
        v87 = (char *)v98 + 48 * v82;
        v88 = *((_QWORD *)v87 - 4);
        if (!v88)
        {
          v88 = llvm::PredicateInfoBuilder::materializeStack((_QWORD *)a1, &v97, (uint64_t)&v98, v5);
          *((_QWORD *)v87 - 4) = v88;
        }
        v89 = *((_QWORD *)v77 + 3);
        if (*(_QWORD *)v89)
        {
          **(_QWORD **)(v89 + 16) = *(_QWORD *)(v89 + 8);
          v90 = *(_QWORD *)(v89 + 8);
          if (v90)
            *(_QWORD *)(v90 + 16) = *(_QWORD *)(v89 + 16);
        }
        *(_QWORD *)v89 = v88;
        if (v88)
        {
          v93 = *(_QWORD *)(v88 + 8);
          v91 = (_QWORD *)(v88 + 8);
          v92 = v93;
          *(_QWORD *)(v89 + 8) = v93;
          if (v93)
            *(_QWORD *)(v92 + 16) = v89 + 8;
          *(_QWORD *)(v89 + 16) = v91;
          *v91 = v89;
        }
      }
LABEL_87:
      v77 += 12;
    }
    while (v77 != (int *)v78);
    if (v98 != v100)
      free(v98);
LABEL_90:
    if (v103 != (int *)v105)
      free(v103);
    v4 = v96 + 1;
  }
  while (v96 + 1 != (uint64_t *)v94);
}

uint64_t llvm::PredicateInfoBuilder::materializeStack(_QWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ****v32;
  uint64_t ***v33;
  int v34;
  int v35;
  uint64_t ***v36;
  uint64_t **v37;
  char *v38;
  uint64_t **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  uint64_t Declaration;
  uint64_t **v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  _QWORD v61[3];
  __int16 v62;
  uint64_t v63[4];
  __int16 v64;
  uint64_t ***v65;
  void *v66[2];
  _QWORD v67[17];

  v67[15] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)a3;
  v9 = *(_QWORD *)a3 + 48 * *(unsigned int *)(a3 + 8);
  v10 = 48 * *(unsigned int *)(a3 + 8);
  while (v10)
  {
    v11 = *(_QWORD *)(v8 + v10 - 32);
    v10 -= 48;
    if (v11)
    {
      v12 = v8 + v10 + 48;
      goto LABEL_6;
    }
  }
  v12 = *(_QWORD *)a3;
LABEL_6:
  v13 = v9 - v12;
  if (v13)
  {
    v58 = 0x5555555555555555 * (v13 >> 4);
    v14 = v9 - 16 * (v13 >> 4);
    while (1)
    {
      v15 = a4;
      if (v14 != v8)
        v15 = *(_QWORD *)(v14 - 32);
      v65 = (uint64_t ***)v15;
      v16 = v9 + 48 * v58;
      v17 = a4;
      if (v16 != v8)
        v17 = *(_QWORD *)(v16 - 32);
      v18 = *(_QWORD *)(v14 + 32);
      *(_QWORD *)(v18 + 40) = v17;
      v19 = *(_DWORD *)(v18 + 24);
      if ((v19 & 0xFFFFFFFD) != 0)
      {
        if (v19 == 1)
          v45 = v18;
        else
          v45 = 0;
        v47 = (uint64_t *)(*(_QWORD *)(v45 + 56) + 32);
        v46 = *v47;
        v48 = v47[1] + 40;
        if (*v47)
          v49 = v46 == v48;
        else
          v49 = 1;
        if (v49)
          v50 = 0;
        else
          v50 = v46 - 24;
        sub_1C4773D54((uint64_t)v66, v50, 0, 0, 0);
        v51 = *(uint64_t **)(a1[1] + 40);
        v52 = *(_DWORD *)(v51[14] + 12);
        v63[0] = (uint64_t)*v65;
        Declaration = llvm::Intrinsic::getDeclaration(v51, 281, v63, 1);
        if (v52 != *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 40) + 112) + 12))
        {
          v54 = (uint64_t **)(*a1 + 48);
          v63[0] = Declaration;
          sub_1C5F5436C(v54, (unint64_t *)v63);
        }
        if (Declaration)
          v55 = *(uint64_t ***)(Declaration + 24);
        else
          v55 = 0;
        v64 = 257;
        v56 = sub_1C4774778((uint64_t *)v66, v55, Declaration, (uint64_t *)&v65, 1, (uint64_t)v63, 0);
        v57 = *a1 + 24;
        v60 = v56;
        v61[0] = v18;
        sub_1C5F55C00((uint64_t)v63, v57, &v60, v61);
        *(_QWORD *)(v14 + 16) = v56;
        if (v66[0] != v67)
          free(v66[0]);
        goto LABEL_34;
      }
      v20 = *(_QWORD *)(v18 + 56);
      v21 = *(_QWORD *)(v20 + 40);
      if (v21 == v20 + 40)
      {
        v23 = 0;
      }
      else
      {
        v22 = v21 ? v21 - 24 : 0;
        v23 = *(unsigned __int8 *)(v22 + 16) - 29 >= 0xB ? 0 : v22;
      }
      sub_1C4773D54((uint64_t)v66, v23, 0, 0, 0);
      v24 = *(uint64_t **)(a1[1] + 40);
      v25 = *(_DWORD *)(v24[14] + 12);
      v63[0] = (uint64_t)*v65;
      v26 = llvm::Intrinsic::getDeclaration(v24, 281, v63, 1);
      if (v25 != *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 40) + 112) + 12))
      {
        v44 = (uint64_t **)(*a1 + 48);
        v63[0] = v26;
        sub_1C5F5436C(v44, (unint64_t *)v63);
      }
      v27 = v26 ? *(uint64_t ***)(v26 + 24) : 0;
      if ((*((_BYTE *)v65 + 23) & 0x10) != 0)
        break;
      v37 = 0;
      v38 = &byte_1C871356D;
LABEL_32:
      v62 = 773;
      v60 = (uint64_t)v38;
      v61[0] = v37;
      v61[1] = ".";
      v40 = *a2;
      *a2 = v40 + 1;
      v4 = v4 & 0xFFFFFFFF00000000 | v40;
      v63[0] = (uint64_t)&v60;
      v63[2] = v4;
      v64 = 2050;
      v41 = sub_1C4774778((uint64_t *)v66, v27, v26, (uint64_t *)&v65, 1, (uint64_t)v63, 0);
      v42 = *a1 + 24;
      v60 = v41;
      v61[0] = v18;
      sub_1C5F55C00((uint64_t)v63, v42, &v60, v61);
      *(_QWORD *)(v14 + 16) = v41;
      if (v66[0] != v67)
        free(v66[0]);
LABEL_34:
      v14 += 48;
      v8 = *(_QWORD *)a3;
      v9 = *(_QWORD *)a3 + 48 * *(unsigned int *)(a3 + 8);
      if (v14 == v9)
        return *(_QWORD *)(v14 - 32);
    }
    v28 = ***v65;
    v29 = *(_QWORD *)(v28 + 152);
    v30 = *(unsigned int *)(v28 + 168);
    if ((_DWORD)v30)
    {
      LODWORD(v31) = (v30 - 1) & ((v65 >> 4) ^ (v65 >> 9));
      v32 = (uint64_t ****)(v29 + 16 * v31);
      v33 = *v32;
      if (*v32 == v65)
      {
LABEL_31:
        v36 = v32[1];
        v39 = *v36;
        v38 = (char *)(v36 + 2);
        v37 = v39;
        goto LABEL_32;
      }
      v34 = 1;
      while (v33 != (uint64_t ***)-4096)
      {
        v35 = v31 + v34++;
        v31 = v35 & (v30 - 1);
        v33 = *(uint64_t ****)(v29 + 16 * v31);
        if (v33 == v65)
        {
          v32 = (uint64_t ****)(v29 + 16 * v31);
          goto LABEL_31;
        }
      }
    }
    v32 = (uint64_t ****)(v29 + 16 * v30);
    goto LABEL_31;
  }
  v14 = *(_QWORD *)a3 + 48 * *(unsigned int *)(a3 + 8);
  return *(_QWORD *)(v14 - 32);
}

uint64_t **sub_1C5F5436C(uint64_t **result, unint64_t *a2)
{
  uint64_t **v3;
  uint64_t **v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;

  v3 = result;
  if (result[24])
  {
    v4 = result + 22;
    v5 = *a2;
    return (uint64_t **)sub_1C4EE51A0(v4, v5, v5);
  }
  v6 = *result;
  v7 = *((unsigned int *)result + 2);
  v8 = *a2;
  if ((_DWORD)v7)
  {
    v9 = 8 * v7;
    v10 = *result;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return result;
LABEL_10:
    if (v7 > 0x13)
    {
      do
      {
        v11 = (*v3)[v7 - 1];
        sub_1C4EE51A0(v3 + 22, v11, v11);
        LODWORD(v7) = *((_DWORD *)v3 + 2) - 1;
        *((_DWORD *)v3 + 2) = v7;
      }
      while ((_DWORD)v7);
      v5 = *a2;
      v4 = v3 + 22;
      return (uint64_t **)sub_1C4EE51A0(v4, v5, v5);
    }
  }
  if (v7 >= *((_DWORD *)result + 3))
  {
    result = (uint64_t **)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 2), v7 + 1, 8);
    v6 = *v3;
    v7 = *((unsigned int *)v3 + 2);
  }
  v6[v7] = v8;
  ++*((_DWORD *)v3 + 2);
  return result;
}

uint64_t llvm::PredicateInfoBuilder::getValueInfo(llvm::PredicateInfoBuilder *this, llvm::Value *a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  llvm::Value *v6;
  int v7;
  int v8;
  unsigned int v9;

  v2 = *((_DWORD *)this + 400);
  if (!v2)
  {
LABEL_7:
    v9 = 0;
    return *((_QWORD *)this + 4) + 48 * v9;
  }
  v3 = *((_QWORD *)this + 198);
  v4 = v2 - 1;
  v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = *(llvm::Value **)(v3 + 16 * v5);
  if (v6 != a2)
  {
    v7 = 1;
    while (v6 != (llvm::Value *)-4096)
    {
      v8 = v5 + v7++;
      v5 = v8 & v4;
      v6 = *(llvm::Value **)(v3 + 16 * v5);
      if (v6 == a2)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v9 = *(_DWORD *)(v3 + 16 * v5 + 8);
  return *((_QWORD *)this + 4) + 48 * v9;
}

llvm::PredicateInfo *llvm::PredicateInfo::PredicateInfo(llvm::PredicateInfo *this, llvm::Function *a2, llvm::DominatorTree *a3, llvm::AssumptionCache *a4)
{
  _QWORD v6[4];
  char *v7[2];
  uint64_t v8;
  __int128 v9;
  int v10;
  __int128 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = (char *)this + 8;
  *((_QWORD *)this + 2) = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 7) = 0x1400000000;
  *((_QWORD *)this + 28) = (char *)this + 232;
  v6[0] = this;
  v6[1] = a2;
  v6[2] = a3;
  v6[3] = a4;
  v7[0] = (char *)&v8;
  v7[1] = (char *)0x2000000000;
  v9 = 0u;
  v10 = 0;
  v11 = 0u;
  v12 = 0;
  sub_1C5F55408((uint64_t)v7, 1uLL);
  llvm::PredicateInfoBuilder::buildPredicateInfo((llvm::PredicateInfoBuilder *)v6);
  MEMORY[0x1CAA32FB4](v11, 8);
  MEMORY[0x1CAA32FB4](v9, 8);
  sub_1C5F54F28(v7);
  return this;
}

void llvm::PredicateInfo::~PredicateInfo(llvm::PredicateInfo *this)
{
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  _QWORD *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t *v12;
  uint64_t v13;
  llvm::Function **v14;
  uint64_t v15;
  _QWORD *v16;
  llvm::Function *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  llvm::PredicateInfo *v21;
  uint64_t v22;
  llvm::PredicateInfo *v23;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[256];

  v24 = v28;
  v25 = v28;
  v26 = 32;
  v27 = 0;
  v2 = *((_QWORD *)this + 30);
  if (v2)
  {
    v3 = (char *)this + 232;
    v4 = (uint64_t *)*((_QWORD *)this + 28);
  }
  else
  {
    v4 = (uint64_t *)*((_QWORD *)this + 6);
    v3 = (char *)&v4[*((unsigned int *)this + 14)];
  }
  if (v4 != (uint64_t *)v3)
  {
    do
    {
      v5 = v4 + 4;
      if (!v2)
        v5 = v4;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v24, *v5);
      if (v2)
      {
        v6 = (uint64_t *)v4[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (uint64_t *)v4[2];
            v8 = *v7 == (_QWORD)v4;
            v4 = v7;
          }
          while (!v8);
        }
      }
      else
      {
        v7 = v4 + 1;
      }
      v4 = v7;
    }
    while (v7 != (uint64_t *)v3);
  }
  v9 = (_QWORD *)*((_QWORD *)this + 29);
  *((_DWORD *)this + 14) = 0;
  sub_1C4ABB360(v9);
  *((_QWORD *)this + 28) = (char *)this + 232;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  v11 = v24;
  v10 = v25;
  v12 = &v26;
  if (v25 == v24)
    v12 = (uint64_t *)((char *)&v26 + 4);
  v13 = *(unsigned int *)v12;
  v14 = (llvm::Function **)v25;
  if ((_DWORD)v13)
  {
    v15 = 0;
    while (*(_QWORD *)&v25[v15] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v15 += 8;
      if (8 * v13 == v15)
        goto LABEL_31;
    }
    v14 = (llvm::Function **)&v25[v15];
  }
  v16 = &v25[8 * v13];
  if (v14 != v16)
  {
    v17 = *v14;
LABEL_26:
    llvm::Function::eraseFromParent(v17);
    v18 = (unint64_t *)(v14 + 1);
    while (v18 != v16)
    {
      v19 = *v18++;
      v17 = (llvm::Function *)v19;
      if (v19 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v14 = (llvm::Function **)(v18 - 1);
        goto LABEL_26;
      }
    }
    v11 = v24;
    v10 = v25;
  }
LABEL_31:
  if (v10 != v11)
    free(v10);
  sub_1C4ABB360(*((_QWORD **)this + 29));
  v20 = (char *)*((_QWORD *)this + 6);
  if (v20 != (char *)this + 64)
    free(v20);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 3), 8);
  v21 = (llvm::PredicateInfo *)*((_QWORD *)this + 2);
  if (v21 != (llvm::PredicateInfo *)((char *)this + 8))
  {
    do
    {
      v22 = *(_QWORD *)v21;
      v23 = (llvm::PredicateInfo *)*((_QWORD *)v21 + 1);
      *(_QWORD *)v23 = *(_QWORD *)v21;
      *(_QWORD *)(v22 + 8) = v23;
      *(_QWORD *)v21 = 0;
      *((_QWORD *)v21 + 1) = 0;
      (*(void (**)(_QWORD *))(*((_QWORD *)v21 - 1) + 8))((_QWORD *)v21 - 1);
      v21 = v23;
    }
    while (v23 != (llvm::PredicateInfo *)((char *)this + 8));
  }
}

llvm::Value **llvm::PredicateBase::getConstraint@<X0>(llvm::Value **this@<X0>, llvm::Type *a2@<X1>, const llvm::APInt *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v5;
  llvm::Value *v6;
  llvm::Value *v7;
  BOOL v8;
  char v9;
  unsigned int v10;
  llvm::Value *v12;
  int v13;
  uint64_t v14;

  v5 = *((_DWORD *)this + 6);
  if (v5 <= 1)
  {
    if (v5)
    {
      v6 = this[5];
      v7 = this[6];
      if (v7 != v6)
      {
        v8 = 1;
        goto LABEL_8;
      }
    }
    else
    {
      v8 = *((_BYTE *)this + 72) != 0;
      v6 = this[5];
      v7 = this[6];
      if (v7 != v6)
      {
LABEL_8:
        if (!v7)
          goto LABEL_6;
        v10 = *((unsigned __int8 *)v7 + 16);
        if (v10 < 0x1C || v10 - 83 <= 0xFFFFFFFD)
          goto LABEL_6;
        if (*((llvm::Value **)v7 - 8) != v6)
        {
          if (*((llvm::Value **)v7 - 4) == v6)
            __asm { BR              X12 }
          goto LABEL_6;
        }
        v13 = *((_WORD *)v7 + 9) & 0x3F;
        v14 = *((_QWORD *)v7 - 4);
        if (!v8)
          v13 = dword_1C8675214[*((_WORD *)v7 + 9) & 0x3F];
        *(_DWORD *)a4 = v13;
        *(_QWORD *)(a4 + 8) = v14;
LABEL_24:
        v9 = 1;
        goto LABEL_25;
      }
      if (!*((_BYTE *)this + 72))
      {
        this = llvm::ConstantInt::getFalse(*(uint64_t ***)v7, a2, a3);
        goto LABEL_20;
      }
    }
    this = llvm::ConstantInt::getTrue(*(uint64_t ***)v7, a2, a3);
LABEL_20:
    *(_DWORD *)a4 = 32;
    *(_QWORD *)(a4 + 8) = this;
    goto LABEL_24;
  }
  if (this[6] == this[5])
  {
    v12 = this[9];
    *(_DWORD *)a4 = 32;
    *(_QWORD *)(a4 + 8) = v12;
    goto LABEL_24;
  }
LABEL_6:
  v9 = 0;
  *(_BYTE *)a4 = 0;
LABEL_25:
  *(_BYTE *)(a4 + 16) = v9;
  return this;
}

void sub_1C5F548FC()
{
  JUMPOUT(0x1C5F548C4);
}

void sub_1C5F54904()
{
  JUMPOUT(0x1C5F548C4);
}

void sub_1C5F5490C()
{
  JUMPOUT(0x1C5F548C4);
}

void sub_1C5F54914()
{
  JUMPOUT(0x1C5F548C4);
}

void sub_1C5F5491C()
{
  JUMPOUT(0x1C5F548C4);
}

void sub_1C5F54924()
{
  JUMPOUT(0x1C5F548C4);
}

void sub_1C5F5492C()
{
  JUMPOUT(0x1C5F548C4);
}

void sub_1C5F54934()
{
  JUMPOUT(0x1C5F548C4);
}

void sub_1C5F5493C()
{
  JUMPOUT(0x1C5F548C4);
}

void sub_1C5F54944()
{
  JUMPOUT(0x1C5F548C4);
}

void sub_1C5F5494C()
{
  JUMPOUT(0x1C5F548C4);
}

void sub_1C5F54954()
{
  JUMPOUT(0x1C5F548C4);
}

void sub_1C5F5495C()
{
  JUMPOUT(0x1C5F548C4);
}

void sub_1C5F54964()
{
  JUMPOUT(0x1C5F548C4);
}

void sub_1C5F5496C()
{
  JUMPOUT(0x1C5F548C4);
}

llvm::PredicateInfoPrinterLegacyPass *llvm::PredicateInfoPrinterLegacyPass::PredicateInfoPrinterLegacyPass(llvm::PredicateInfoPrinterLegacyPass *this)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::PredicateInfoPrinterLegacyPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E81AA080;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED837748);
  if (v3 != -1)
  {
    v7[0] = sub_1C5F525C4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED837748, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

void *llvm::PredicateInfoPrinterLegacyPass::getAnalysisUsage(llvm::PredicateInfoPrinterLegacyPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 80, (uint64_t)llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
}

uint64_t llvm::PredicateInfoPrinterLegacyPass::runOnFunction(llvm::PredicateInfoPrinterLegacyPass *this, llvm::Function *a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  char **v7;
  char *v8;
  llvm::DominatorTree *v9;
  llvm::AssumptionCacheTracker *v10;
  llvm::AssumptionCache *AssumptionCache;
  llvm::PredicateInfo *v12;
  llvm *v13;
  llvm *v14;
  _QWORD v16[2];

  v4 = (char **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::DominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::DominatorTreeWrapperPass::ID);
  v7 = (char **)**((_QWORD **)this + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::AssumptionCacheTracker::ID);
  v9 = (llvm::DominatorTree *)(v6 + 32);
  v10 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = (llvm::AssumptionCache *)llvm::AssumptionCacheTracker::getAssumptionCache(v10, a2);
  v12 = (llvm::PredicateInfo *)operator new();
  v13 = llvm::PredicateInfo::PredicateInfo(v12, a2, v9, AssumptionCache);
  v14 = llvm::dbgs(v13);
  v16[0] = &off_1E81AA180;
  v16[1] = v12;
  llvm::Function::print(*(llvm::Function **)v12, v14, (llvm::AssemblyAnnotationWriter *)v16, 0, 0);
  sub_1C5F54C04((uint64_t)v12, (uint64_t)a2);
  llvm::PredicateInfo::~PredicateInfo(v12);
  MEMORY[0x1CAA32FC0]();
  return 0;
}

_QWORD *llvm::PredicateInfo::print(llvm::Function **this, llvm::raw_ostream *a2)
{
  _QWORD v3[2];

  v3[0] = &off_1E81AA180;
  v3[1] = this;
  return llvm::Function::print(*this, a2, (llvm::AssemblyAnnotationWriter *)v3, 0, 0);
}

void sub_1C5F54C04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = a2 + 72;
  for (i = *(_QWORD *)(a2 + 80); i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = i - 24;
    if (!i)
      v4 = 0;
    v5 = *(_QWORD *)(v4 + 48);
    if (v5 != v4 + 40)
    {
      v6 = a1 + 24;
      do
      {
        v7 = v5;
        v5 = *(_QWORD *)(v5 + 8);
        v8 = i - 24;
        if (!i)
          v8 = 0;
        if (v5 == v8 + 40)
        {
          v13 = *(_QWORD *)(i + 8);
          i = v2;
          if (v13 != v2)
          {
            while (1)
            {
              v14 = v13 - 24;
              if (!v13)
                v14 = 0;
              v5 = *(_QWORD *)(v14 + 48);
              if (v5 != v14 + 40)
                break;
              v13 = *(_QWORD *)(v13 + 8);
              if (v13 == v2)
              {
                i = v2;
                goto LABEL_11;
              }
            }
            i = v13;
          }
        }
LABEL_11:
        if (v7)
          v9 = v7 - 24;
        else
          v9 = 0;
        v18 = 0;
        v19 = v9;
        v10 = sub_1C4926528(v6, &v19, &v18);
        v11 = 0;
        if (v10)
          v11 = *(_QWORD *)(v18 + 8);
        if (*(_BYTE *)(v9 + 16) == 84)
        {
          v12 = *(_QWORD *)(v9 - 32);
          if (v12)
          {
            if (!*(_BYTE *)(v12 + 16) && *(_QWORD *)(v12 + 24) == *(_QWORD *)(v9 + 72))
            {
              if ((*(_BYTE *)(v12 + 33) & 0x20) != 0)
                v15 = v9;
              else
                v15 = 0;
              if (v11 && v15 && *(_DWORD *)(*(_QWORD *)(v15 - 32) + 36) == 281)
              {
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9, *(llvm::Value **)(v15 - 32 * (*(_DWORD *)(v15 + 20) & 0x7FFFFFF)), (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v9 + 40) + 40, (uint64_t ***)v9);
                v16 = *(_QWORD *)(v9 + 24);
                v17 = *(_QWORD **)(v9 + 32);
                *v17 = v16;
                *(_QWORD *)(v16 + 8) = v17;
                *(_QWORD *)(v9 + 24) = 0;
                *(_QWORD *)(v9 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v9);
              }
            }
          }
        }
      }
      while (i != v2);
      return;
    }
  }
}

_QWORD *llvm::PredicateInfo::dump(llvm::Function **this)
{
  llvm::Function *v1;
  llvm *v2;
  _QWORD v4[2];

  v4[0] = &off_1E81AA180;
  v4[1] = this;
  v1 = *this;
  v2 = llvm::dbgs((llvm *)this);
  return llvm::Function::print(v1, v2, (llvm::AssemblyAnnotationWriter *)v4, 0, 0);
}

_QWORD *llvm::PredicateInfoVerifierPass::run@<X0>(llvm::Function *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  llvm::DominatorTree *v6;
  llvm::AssumptionCache *v7;
  llvm::PredicateInfo *v8;
  llvm::PredicateInfo *v9;

  v6 = (llvm::DominatorTree *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a1)+ 8);
  v7 = (llvm::AssumptionCache *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, (uint64_t)a1)+ 8);
  v8 = (llvm::PredicateInfo *)operator new();
  v9 = llvm::PredicateInfo::PredicateInfo(v8, a1, v6, v7);
  llvm::PredicateInfo::~PredicateInfo(v9);
  MEMORY[0x1CAA32FC0]();
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

void sub_1C5F54EC8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::PredicateInfoPrinterLegacyPass *llvm::callDefaultCtor<llvm::PredicateInfoPrinterLegacyPass>()
{
  llvm::PredicateInfoPrinterLegacyPass *v0;

  v0 = (llvm::PredicateInfoPrinterLegacyPass *)operator new();
  return llvm::PredicateInfoPrinterLegacyPass::PredicateInfoPrinterLegacyPass(v0);
}

void sub_1C5F54F14()
{
  JUMPOUT(0x1CAA32FC0);
}

char **sub_1C5F54F28(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5)
        free(v5);
      v4 -= 48;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C5F54FA8(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t v10;
  llvm::Value *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  _BYTE *v15;
  _BYTE *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a1 + 8) + 24;
  v21 = 0;
  v22 = a2;
  result = sub_1C4926528(v4, &v22, &v21);
  if ((result & 1) == 0)
    return result;
  v6 = *(_QWORD *)(v21 + 8);
  if (!v6)
    return result;
  v7 = (void *)*((_QWORD *)a3 + 4);
  if (*((_QWORD *)a3 + 3) - (_QWORD)v7 > 0x14uLL)
  {
    qmemcpy(v7, "; Has predicate info\n", 21);
    *((_QWORD *)a3 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(a3, "; Has predicate info\n", 0x15uLL);
  }
  v8 = *(_DWORD *)(v6 + 24);
  switch(v8)
  {
    case 2:
      v12 = (void *)*((_QWORD *)a3 + 4);
      if (*((_QWORD *)a3 + 3) - (_QWORD)v12 > 0x24uLL)
      {
        qmemcpy(v12, "; switch predicate info { CaseValue: ", 37);
        *((_QWORD *)a3 + 4) += 37;
      }
      else
      {
        llvm::raw_ostream::write(a3, "; switch predicate info { CaseValue: ", 0x25uLL);
      }
      llvm::Value::print(*(llvm::Value **)(v6 + 72), a3, 0);
      v13 = (_QWORD *)*((_QWORD *)a3 + 4);
      if (*((_QWORD *)a3 + 3) - (_QWORD)v13 > 7uLL)
      {
        *v13 = 0x3A68637469775320;
        *((_QWORD *)a3 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(a3, " Switch:", 8uLL);
      }
      v11 = *(llvm::Value **)(v6 + 80);
      goto LABEL_19;
    case 1:
      v17 = (void *)*((_QWORD *)a3 + 4);
      if (*((_QWORD *)a3 + 3) - (_QWORD)v17 > 0x18uLL)
      {
        qmemcpy(v17, "; assume predicate info {", 25);
        v18 = *((_QWORD *)a3 + 4) + 25;
        *((_QWORD *)a3 + 4) = v18;
      }
      else
      {
        llvm::raw_ostream::write(a3, "; assume predicate info {", 0x19uLL);
        v18 = *((_QWORD *)a3 + 4);
      }
      if ((unint64_t)(*((_QWORD *)a3 + 3) - v18) > 0xB)
      {
        *(_DWORD *)(v18 + 8) = 980316019;
        *(_QWORD *)v18 = *(_QWORD *)" Comparison:";
        *((_QWORD *)a3 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(a3, " Comparison:", 0xCuLL);
      }
      llvm::Value::print(*(llvm::Value **)(v6 + 48), a3, 0);
      break;
    case 0:
      v9 = (void *)*((_QWORD *)a3 + 4);
      if (*((_QWORD *)a3 + 3) - (_QWORD)v9 > 0x23uLL)
      {
        qmemcpy(v9, "; branch predicate info { TrueEdge: ", 36);
        *((_QWORD *)a3 + 4) += 36;
      }
      else
      {
        llvm::raw_ostream::write(a3, "; branch predicate info { TrueEdge: ", 0x24uLL);
      }
      sub_1C5E21910(a3, *(unsigned __int8 *)(v6 + 72), 0, 0, 0);
      v10 = *((_QWORD *)a3 + 4);
      if ((unint64_t)(*((_QWORD *)a3 + 3) - v10) > 0xB)
      {
        *(_DWORD *)(v10 + 8) = 980316019;
        *(_QWORD *)v10 = *(_QWORD *)" Comparison:";
        *((_QWORD *)a3 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(a3, " Comparison:", 0xCuLL);
      }
      v11 = *(llvm::Value **)(v6 + 48);
LABEL_19:
      llvm::Value::print(v11, a3, 0);
      v14 = (_QWORD *)*((_QWORD *)a3 + 4);
      if (*((_QWORD *)a3 + 3) - (_QWORD)v14 > 7uLL)
      {
        *v14 = 0x5B203A6567644520;
        *((_QWORD *)a3 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(a3, " Edge: [", 8uLL);
      }
      llvm::Value::printAsOperand(*(llvm::Value **)(v6 + 56), a3, 1, 0);
      v15 = (_BYTE *)*((_QWORD *)a3 + 4);
      if (*((_BYTE **)a3 + 3) == v15)
      {
        llvm::raw_ostream::write(a3, ",", 1uLL);
      }
      else
      {
        *v15 = 44;
        ++*((_QWORD *)a3 + 4);
      }
      llvm::Value::printAsOperand(*(llvm::Value **)(v6 + 64), a3, 1, 0);
      v16 = (_BYTE *)*((_QWORD *)a3 + 4);
      if (*((_BYTE **)a3 + 3) == v16)
      {
        llvm::raw_ostream::write(a3, "]", 1uLL);
      }
      else
      {
        *v16 = 93;
        ++*((_QWORD *)a3 + 4);
      }
      break;
  }
  v19 = (void *)*((_QWORD *)a3 + 4);
  if (*((_QWORD *)a3 + 3) - (_QWORD)v19 > 0xCuLL)
  {
    qmemcpy(v19, ", RenamedOp: ", 13);
    *((_QWORD *)a3 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(a3, ", RenamedOp: ", 0xDuLL);
  }
  result = llvm::Value::printAsOperand(*(llvm::Value **)(v6 + 40), a3, 0, 0);
  v20 = *((_QWORD *)a3 + 4);
  if ((unint64_t)(*((_QWORD *)a3 + 3) - v20) <= 2)
    return (uint64_t)llvm::raw_ostream::write(a3, " }\n", 3uLL);
  *(_BYTE *)(v20 + 2) = 10;
  *(_WORD *)v20 = 32032;
  *((_QWORD *)a3 + 4) += 3;
  return result;
}

void sub_1C5F55408(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      v8 = 3 * v2;
      v9 = (void **)(*(_QWORD *)a1 + 16 * v8 - 48);
      v10 = 48 * a2 - 16 * v8;
      do
      {
        if (v9 + 2 != *v9)
          free(*v9);
        v9 -= 6;
        v10 += 48;
      }
      while (v10);
    }
    else
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C63B42A0(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v5 = 3 * v2;
        v6 = 48 * a2 - 48 * v2;
        v7 = (_OWORD *)(*(_QWORD *)a1 + 16 * v5 + 16);
        do
        {
          *v7 = 0uLL;
          v7[1] = 0uLL;
          *((_QWORD *)v7 - 2) = v7;
          *((_QWORD *)v7 - 1) = 0x400000000;
          v7 += 3;
          v6 -= 48;
        }
        while (v6);
      }
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_1C5F554EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = 48 * v2;
    do
    {
      v8 = a2 + v5;
      v9 = a2 + v5 + 16;
      *(_QWORD *)v8 = v9;
      *(_QWORD *)(v8 + 8) = 0x400000000;
      if (v6 != a2)
      {
        v10 = v6 + v5;
        v11 = *(unsigned int *)(v6 + v5 + 8);
        if (*(_DWORD *)(v6 + v5 + 8))
        {
          v12 = v6 + v5;
          v13 = v6 + v5 + 16;
          v14 = *(_QWORD *)(v6 + v5);
          if (v13 == v14)
          {
            v15 = *(unsigned int *)(v6 + v5 + 8);
            if (v11 < 5
              || (llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + v5, v9, *(unsigned int *)(v6 + v5 + 8), 8),
                  v15 = *(unsigned int *)(v10 + 8),
                  (_DWORD)v15))
            {
              memcpy(*(void **)v8, *(const void **)v10, 8 * v15);
            }
            *(_DWORD *)(v8 + 8) = v11;
          }
          else
          {
            *(_QWORD *)v8 = v14;
            v16 = *(_DWORD *)(v12 + 12);
            *(_DWORD *)(v8 + 8) = v11;
            *(_DWORD *)(v8 + 12) = v16;
            *(_QWORD *)v12 = v13;
            *(_DWORD *)(v12 + 12) = 0;
          }
          *(_DWORD *)(v10 + 8) = 0;
        }
      }
      v5 += 48;
    }
    while (v7 != v5);
    v17 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v17)
    {
      v18 = *a1;
      v19 = 48 * v17;
      do
      {
        v20 = *(void **)(v18 + v19 - 48);
        if ((void *)(v18 + v19 - 32) != v20)
          free(v20);
        v19 -= 48;
      }
      while (v19);
    }
  }
}

_QWORD *sub_1C5F55624(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v21;
  char v23;
  _QWORD *v24;

  v6 = *(_DWORD *)(a2 + 16);
  if (!v6)
  {
    v24 = 0;
LABEL_27:
    result = sub_1C5F55848(a2, (uint64_t)a3, a3, v24);
    *result = *a3;
    result[1] = a3[1];
    v7 = *(_QWORD *)a2;
    v6 = *(_DWORD *)(a2 + 16);
    v23 = 1;
    goto LABEL_23;
  }
  v7 = *(_QWORD *)a2;
  v8 = a3[1];
  v9 = ((v8 >> 4) ^ (v8 >> 9) | ((unint64_t)((*a3 >> 4) ^ (*a3 >> 9)) << 32))
     + ~((unint64_t)((v8 >> 4) ^ (v8 >> 9)) << 32);
  v10 = (v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13);
  v11 = (9 * (v10 ^ (v10 >> 8))) ^ ((9 * (v10 ^ (v10 >> 8))) >> 15);
  v12 = (v6 - 1) & (((v11 + ~(v11 << 27)) >> 31) ^ (v11 + ~((_DWORD)v11 << 27)));
  result = (_QWORD *)(*(_QWORD *)a2 + 16 * v12);
  v14 = *result;
  v15 = result[1];
  if (*a3 != *result || v8 != v15)
  {
    v17 = 0;
    v18 = 1;
    while (v14 != -4096 || v15 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v15 == -8192;
      if (v19 && v14 == -8192)
        v17 = result;
      v21 = v12 + v18++;
      v12 = v21 & (v6 - 1);
      result = (_QWORD *)(v7 + 16 * v12);
      v14 = *result;
      v15 = result[1];
      if (*a3 == *result && v8 == v15)
        goto LABEL_22;
    }
    if (v17)
      v24 = v17;
    else
      v24 = result;
    goto LABEL_27;
  }
LABEL_22:
  v23 = 0;
LABEL_23:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v7 + 16 * v6;
  *(_BYTE *)(a1 + 16) = v23;
  return result;
}

uint64_t sub_1C5F55760(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;
  uint64_t result;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = a2[1];
    v6 = ((v5 >> 4) ^ (v5 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
       + ~((unint64_t)((v5 >> 4) ^ (v5 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = (_QWORD *)(*a1 + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    if (*a2 == *v12 && v5 == v14)
    {
LABEL_22:
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v13 != -4096 || v14 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -8192;
        if (v18 && v13 == -8192)
          v16 = v12;
        v20 = v11 + v17++;
        v11 = v20 & v10;
        v12 = (_QWORD *)(v4 + 16 * (v20 & v10));
        v13 = *v12;
        v14 = v12[1];
        if (*a2 == *v12 && v5 == v14)
          goto LABEL_22;
      }
      result = 0;
      if (v16)
        v12 = v16;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
  *a3 = v12;
  return result;
}

_QWORD *sub_1C5F55848(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v23;
  _QWORD *v25;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C5F559E4(a1, 2 * v7);
    v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      v10 = a3[1];
      v11 = ((v10 >> 4) ^ (v10 >> 9) | ((unint64_t)((*a3 >> 4) ^ (*a3 >> 9)) << 32))
          + ~((unint64_t)((v10 >> 4) ^ (v10 >> 9)) << 32);
      v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
      v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
      v14 = v9 - 1;
      v15 = v14 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v15);
      v16 = *a4;
      v17 = a4[1];
      if (*a3 != *a4 || v10 != v17)
      {
        v19 = 0;
        v20 = 1;
        while (v16 != -4096 || v17 != -4096)
        {
          if (v19)
            v21 = 0;
          else
            v21 = v17 == -8192;
          if (v21 && v16 == -8192)
            v19 = a4;
          v23 = v15 + v20++;
          v15 = v23 & v14;
          a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v15);
          v16 = *a4;
          v17 = a4[1];
          if (*a3 == *a4 && v10 == v17)
            goto LABEL_4;
        }
        if (v19)
          a4 = v19;
      }
    }
    else
    {
      a4 = 0;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1C5F559E4(a1, v7);
    v25 = 0;
    sub_1C5F55760((uint64_t *)a1, a3, &v25);
    a4 = v25;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_1C5F559E4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    sub_1C5F55AA4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    memset_pattern16(v9, &unk_1C85F2160, 16 * v10);
}

void sub_1C5F55AA4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v23;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
    memset_pattern16(*(void **)a1, &unk_1C85F2160, 16 * v6);
  if (a2 != a3)
  {
    v7 = 0;
    v8 = v6 - 1;
    do
    {
      v9 = *a2;
      v10 = a2[1];
      if ((*a2 != -4096 || v10 != -4096) && (v9 != -8192 || v10 != -8192))
      {
        v11 = ((v10 >> 4) ^ (v10 >> 9) | ((unint64_t)((v9 >> 4) ^ (v9 >> 9)) << 32))
            + ~((unint64_t)((v10 >> 4) ^ (v10 >> 9)) << 32);
        v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
        v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
        v14 = v8 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
        v15 = (_QWORD *)(*(_QWORD *)a1 + 16 * v14);
        v16 = *v15;
        v17 = v15[1];
        if (v9 != *v15 || v10 != v17)
        {
          v19 = 0;
          v20 = 1;
          while (v16 != -4096 || v17 != -4096)
          {
            if (v19)
              v21 = 0;
            else
              v21 = v17 == -8192;
            if (v21 && v16 == -8192)
              v19 = v15;
            v23 = v14 + v20++;
            v14 = v23 & v8;
            v15 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v23 & v8));
            v16 = *v15;
            v17 = v15[1];
            if (v9 == *v15 && v10 == v17)
              goto LABEL_32;
          }
          if (v19)
            v15 = v19;
        }
LABEL_32:
        *v15 = v9;
        v15[1] = a2[1];
        *(_DWORD *)(a1 + 8) = ++v7;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
}

uint64_t sub_1C5F55C00(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  int v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = sub_1C4926528(a2, a3, &v14);
  v9 = v14;
  if ((result & 1) != 0)
  {
    v12 = 0;
    goto LABEL_7;
  }
  v10 = *(_DWORD *)(a2 + 8);
  v11 = *(_DWORD *)(a2 + 16);
  if (4 * v10 + 4 >= 3 * v11)
  {
    v11 *= 2;
    goto LABEL_9;
  }
  if (v11 + ~v10 - *(_DWORD *)(a2 + 12) <= v11 >> 3)
  {
LABEL_9:
    sub_1C4AA30A4(a2, v11);
    v14 = 0;
    result = sub_1C4926528(a2, a3, &v14);
    v9 = v14;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*v9 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v9 = *a3;
  v9[1] = *a4;
  v12 = 1;
LABEL_7:
  v13 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

__n128 sub_1C5F55D08(int *a1, __n128 *a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, __n128 result)
{
  uint64_t v9;
  __n128 *v10;
  __int128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  int *v16;
  uint64_t v17;
  int *v18;
  int *v19;
  __int128 v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v27;
  unint64_t v28;
  __n128 *v29;
  unint64_t v30;
  __n128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];

  if (a4 >= 2)
  {
    v9 = (uint64_t)a1;
    if (a4 == 2)
    {
      v10 = a2 - 3;
      if (sub_1C5F55FDC(*a3, (int *)&a2[-3], a1))
      {
        v11 = *(_OWORD *)(v9 + 32);
        v13 = *(__n128 *)v9;
        *(_OWORD *)v44 = *(_OWORD *)(v9 + 16);
        v12 = *(__n128 *)v44;
        *(_OWORD *)&v44[16] = v11;
        result = *(__n128 *)((char *)a2 - 23);
        v14 = a2[-2];
        *(__n128 *)v9 = *v10;
        *(__n128 *)(v9 + 16) = v14;
        *(__n128 *)(v9 + 25) = result;
        *v10 = v13;
        a2[-2] = v12;
        result.n128_u64[0] = *(_QWORD *)&v44[9];
        *(__n128 *)((char *)a2 - 23) = *(__n128 *)&v44[9];
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v27 = a5;
      v28 = a4 >> 1;
      v29 = (__n128 *)&a1[12 * (a4 >> 1)];
      v30 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v31 = sub_1C5F56280((uint64_t)a1, v29, a3, v30, a5, result);
        v32 = v27 + 48 * v28;
        result.n128_u64[0] = sub_1C5F56280(v9 + 48 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v32, v31).n128_u64[0];
        v33 = v27 + 48 * a4;
        v34 = v32;
        while (v34 != v33)
        {
          if (sub_1C5F55FDC(*a3, (int *)v34, (int *)v27))
          {
            result = *(__n128 *)v34;
            v35 = *(_OWORD *)(v34 + 16);
            *(_OWORD *)(v9 + 25) = *(_OWORD *)(v34 + 25);
            *(__n128 *)v9 = result;
            *(_OWORD *)(v9 + 16) = v35;
            v34 += 48;
          }
          else
          {
            result = *(__n128 *)v27;
            v36 = *(_OWORD *)(v27 + 16);
            *(_OWORD *)(v9 + 25) = *(_OWORD *)(v27 + 25);
            *(__n128 *)v9 = result;
            *(_OWORD *)(v9 + 16) = v36;
            v27 += 48;
          }
          v9 += 48;
          if (v27 == v32)
          {
            if (v34 != v33)
            {
              v37 = 0;
              do
              {
                v38 = v9 + v37;
                result = *(__n128 *)(v34 + v37);
                v39 = *(_OWORD *)(v34 + v37 + 16);
                *(_OWORD *)(v38 + 25) = *(_OWORD *)(v34 + v37 + 25);
                *(__n128 *)v38 = result;
                *(_OWORD *)(v38 + 16) = v39;
                v37 += 48;
              }
              while (v34 + v37 != v33);
            }
            return result;
          }
        }
        if (v27 != v32)
        {
          v40 = 0;
          do
          {
            v41 = v9 + v40;
            result = *(__n128 *)(v27 + v40);
            v42 = *(_OWORD *)(v27 + v40 + 16);
            *(_OWORD *)(v41 + 25) = *(_OWORD *)(v27 + v40 + 25);
            *(__n128 *)v41 = result;
            *(_OWORD *)(v41 + 16) = v42;
            v40 += 48;
          }
          while (v27 + v40 != v32);
        }
      }
      else
      {
        sub_1C5F55D08(a1, v29, a3, v30, a5, a6);
        sub_1C5F55D08(v9 + 48 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), v27, a6);
        sub_1C5F56538(v9, (int *)(v9 + 48 * (a4 >> 1)), (int *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (__int128 *)v27, a6);
      }
    }
    else if (a1 != (int *)a2)
    {
      v16 = a1 + 12;
      if (a1 + 12 != (int *)a2)
      {
        v17 = 0;
        v18 = a1;
        do
        {
          v19 = v18;
          v18 = v16;
          if (sub_1C5F55FDC(*a3, v16, v19))
          {
            v20 = *((_OWORD *)v18 + 1);
            v43 = *(_OWORD *)v18;
            *(_OWORD *)v44 = v20;
            *(_OWORD *)&v44[16] = *((_OWORD *)v18 + 2);
            v21 = v17;
            while (1)
            {
              v22 = (_OWORD *)(v9 + v21);
              v23 = *(_OWORD *)(v9 + v21 + 16);
              v22[3] = *(_OWORD *)(v9 + v21);
              v22[4] = v23;
              *(_OWORD *)((char *)v22 + 73) = *(_OWORD *)(v9 + v21 + 25);
              if (!v21)
                break;
              v21 -= 48;
              if ((sub_1C5F55FDC(*a3, (int *)&v43, (int *)(v21 + v9)) & 1) == 0)
              {
                v24 = (_OWORD *)(v9 + v21 + 48);
                goto LABEL_15;
              }
            }
            v24 = (_OWORD *)v9;
LABEL_15:
            v25 = *(_OWORD *)v44;
            *v24 = v43;
            v24[1] = v25;
            result.n128_u64[0] = *(_QWORD *)&v44[9];
            *(_OWORD *)((char *)v24 + 25) = *(_OWORD *)&v44[9];
          }
          v16 = v18 + 12;
          v17 += 48;
        }
        while (v18 + 12 != (int *)a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C5F55FDC(uint64_t a1, int *a2, int *a3)
{
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  BOOL v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  BOOL v41;

  if (a2 == a3)
    return 0;
  v5 = *a2;
  v6 = *a3;
  v7 = a2[2];
  v8 = a3[2];
  if (*a2 == *a3 && v7 == 2 && v8 == 2)
  {
    v16 = *(_QWORD *)(a1 + 24);
    v17 = *(unsigned int *)(a1 + 40);
    v18 = sub_1C5F56BE8(a2);
    v19 = sub_1C5F56BE8(a3);
    if ((_DWORD)v17)
    {
      LODWORD(v20) = ((v18 >> 4) ^ (v18 >> 9)) & (v17 - 1);
      v21 = (uint64_t *)(v16 + 16 * v20);
      v22 = *v21;
      if (*v21 == v18)
        goto LABEL_39;
      v23 = 1;
      while (v22 != -4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v17 - 1);
        v22 = *(_QWORD *)(v16 + 16 * v20);
        if (v22 == v18)
        {
          v21 = (uint64_t *)(v16 + 16 * v20);
          goto LABEL_39;
        }
      }
    }
    v21 = (uint64_t *)(v16 + 16 * v17);
LABEL_39:
    if (v21 == (uint64_t *)(v16 + 16 * v17))
    {
      v27 = 0;
      if (!(_DWORD)v17)
        goto LABEL_48;
    }
    else
    {
      v27 = v21[1];
      if (!(_DWORD)v17)
        goto LABEL_48;
    }
    LODWORD(v28) = ((v19 >> 4) ^ (v19 >> 9)) & (v17 - 1);
    v29 = (uint64_t *)(v16 + 16 * v28);
    v30 = *v29;
    if (*v29 == v19)
      goto LABEL_49;
    v31 = 1;
    while (v30 != -4096)
    {
      v32 = v28 + v31++;
      v28 = v32 & (v17 - 1);
      v30 = *(_QWORD *)(v16 + 16 * v28);
      if (v30 == v19)
      {
        v29 = (uint64_t *)(v16 + 16 * v28);
        goto LABEL_49;
      }
    }
LABEL_48:
    v29 = (uint64_t *)(v16 + 16 * v17);
LABEL_49:
    v33 = *(_DWORD *)(v27 + 72);
    v34 = *(_DWORD *)(v29[1] + 72);
    if (v33 >= v34)
    {
      if (*((_QWORD *)a3 + 2))
        v35 = *((_QWORD *)a2 + 2) == 0;
      else
        v35 = 0;
      return v35 && v34 >= v33;
    }
    return 1;
  }
  v11 = *((_QWORD *)a2 + 2);
  v12 = *((_QWORD *)a3 + 2);
  if (v5 != v6 || v7 != 1 || v8 != 1)
  {
    if (v5 >= v6)
    {
      if (v6 < v5)
        return 0;
      if (v7 >= v8)
      {
        if (v11)
          v37 = 1;
        else
          v37 = v12 == 0;
        return !v37 && v8 >= v7;
      }
    }
    return 1;
  }
  if (v11)
  {
    if (v12)
      goto LABEL_27;
LABEL_74:
    if (*((_QWORD *)a3 + 3))
    {
      v12 = 0;
      if (!v11)
        goto LABEL_76;
    }
    else
    {
      v40 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 4) + 56) + 32);
      if (v40)
        v41 = v40 == *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 4) + 56) + 40) + 40;
      else
        v41 = 1;
      if (v41)
        v12 = 0;
      else
        v12 = v40 - 24;
      if (!v11)
        goto LABEL_76;
    }
LABEL_28:
    if (*(_BYTE *)(v11 + 16) == 21)
      v25 = v11;
    else
      v25 = 0;
    if (v12)
      goto LABEL_32;
    goto LABEL_77;
  }
  if (*((_QWORD *)a2 + 3))
  {
    v11 = 0;
    if (!v12)
      goto LABEL_74;
  }
  else
  {
    v38 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 56) + 32);
    if (v38)
      v39 = v38 == *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 56) + 40) + 40;
    else
      v39 = 1;
    if (v39)
      v11 = 0;
    else
      v11 = v38 - 24;
    if (!v12)
      goto LABEL_74;
  }
LABEL_27:
  if (v11)
    goto LABEL_28;
LABEL_76:
  v25 = 0;
  if (v12)
  {
LABEL_32:
    if (*(_BYTE *)(v12 + 16) == 21)
      v26 = v12;
    else
      v26 = 0;
    goto LABEL_78;
  }
LABEL_77:
  v26 = 0;
LABEL_78:
  if (v25 | v26)
  {
    v11 = v25;
    v12 = v26;
  }
  else
  {
    if (!v11)
      v11 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 24);
    if (!v12)
      v12 = *(_QWORD *)(*((_QWORD *)a3 + 3) + 24);
  }
  return sub_1C5F56C14(v11, v12);
}

__n128 sub_1C5F56280(uint64_t a1, __n128 *a2, uint64_t *a3, unint64_t a4, uint64_t a5, __n128 result)
{
  uint64_t v6;
  __n128 *v10;
  __int128 v11;
  __n128 *v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  _OWORD *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __n128 v29;
  __n128 *v30;
  __n128 *v31;
  __n128 v32;
  __n128 v33;
  uint64_t v34;
  __n128 *v35;
  __n128 v36;
  uint64_t v37;
  __n128 *v38;
  __n128 v39;

  if (a4)
  {
    v6 = a5;
    v10 = (__n128 *)a1;
    if (a4 == 2)
    {
      v12 = a2 - 3;
      if (sub_1C5F55FDC(*a3, (int *)&a2[-3], (int *)a1))
      {
        v13 = *v12;
        v14 = v12[2];
        *(__n128 *)(v6 + 16) = v12[1];
        *(__n128 *)(v6 + 32) = v14;
        *(__n128 *)v6 = v13;
        result = *v10;
        v15 = v10[1];
        v16 = v10[2];
      }
      else
      {
        v28 = *v10;
        v29 = v10[2];
        *(__n128 *)(v6 + 16) = v10[1];
        *(__n128 *)(v6 + 32) = v29;
        *(__n128 *)v6 = v28;
        result = *v12;
        v15 = v12[1];
        v16 = v12[2];
      }
      *(__n128 *)(v6 + 64) = v15;
      *(__n128 *)(v6 + 80) = v16;
      *(__n128 *)(v6 + 48) = result;
    }
    else if (a4 == 1)
    {
      result = *(__n128 *)a1;
      v11 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a5 + 16) = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(a5 + 32) = v11;
      *(__n128 *)a5 = result;
    }
    else if ((uint64_t)a4 > 8)
    {
      v30 = (__n128 *)(a1 + 48 * (a4 >> 1));
      sub_1C5F55D08(a1, v30, a3, a4 >> 1, a5, a4 >> 1);
      sub_1C5F55D08(&v10[3 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v6 + 48 * (a4 >> 1), a4 - (a4 >> 1));
      v31 = &v10[3 * (a4 >> 1)];
      while (v31 != a2)
      {
        if (sub_1C5F55FDC(*a3, (int *)v31, (int *)v10))
        {
          result = *v31;
          v32 = v31[2];
          *(__n128 *)(v6 + 16) = v31[1];
          *(__n128 *)(v6 + 32) = v32;
          *(__n128 *)v6 = result;
          v31 += 3;
        }
        else
        {
          result = *v10;
          v33 = v10[2];
          *(__n128 *)(v6 + 16) = v10[1];
          *(__n128 *)(v6 + 32) = v33;
          *(__n128 *)v6 = result;
          v10 += 3;
        }
        v6 += 48;
        if (v10 == v30)
        {
          if (v31 != a2)
          {
            v34 = 0;
            do
            {
              v35 = (__n128 *)(v6 + v34 * 16);
              result = v31[v34];
              v36 = v31[v34 + 2];
              v35[1] = v31[v34 + 1];
              v35[2] = v36;
              *v35 = result;
              v34 += 3;
            }
            while (&v31[v34] != a2);
          }
          return result;
        }
      }
      if (v10 != v30)
      {
        v37 = 0;
        do
        {
          v38 = (__n128 *)(v6 + v37 * 16);
          result = v10[v37];
          v39 = v10[v37 + 2];
          v38[1] = v10[v37 + 1];
          v38[2] = v39;
          *v38 = result;
          v37 += 3;
        }
        while (&v10[v37] != v30);
      }
    }
    else if ((__n128 *)a1 != a2)
    {
      result = *(__n128 *)a1;
      v17 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a5 + 16) = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(a5 + 32) = v17;
      *(__n128 *)a5 = result;
      v18 = a1 + 48;
      if ((__n128 *)(a1 + 48) != a2)
      {
        v19 = 0;
        v20 = a5;
        do
        {
          v21 = (_OWORD *)(v20 + 48);
          if (sub_1C5F55FDC(*a3, (int *)v18, (int *)v20))
          {
            v22 = *(_OWORD *)(v20 + 16);
            *v21 = *(_OWORD *)v20;
            *(_OWORD *)(v20 + 64) = v22;
            *(_OWORD *)(v20 + 80) = *(_OWORD *)(v20 + 32);
            v23 = (_OWORD *)v6;
            if (v20 != v6)
            {
              v24 = v19;
              while (1)
              {
                v23 = (_OWORD *)(v6 + v24);
                if (!sub_1C5F55FDC(*a3, (int *)v18, (int *)(v6 + v24 - 48)))
                  break;
                v25 = *(_OWORD *)(v6 + v24 - 32);
                *v23 = *(_OWORD *)(v6 + v24 - 48);
                v23[1] = v25;
                *(_OWORD *)((char *)v23 + 25) = *(_OWORD *)(v6 + v24 - 23);
                v24 -= 48;
                if (!v24)
                {
                  v23 = (_OWORD *)v6;
                  break;
                }
              }
            }
            result = *(__n128 *)v18;
            v26 = *(_OWORD *)(v18 + 16);
            *(_OWORD *)((char *)v23 + 25) = *(_OWORD *)(v18 + 25);
            *v23 = result;
            v23[1] = v26;
          }
          else
          {
            result = *(__n128 *)v18;
            v27 = *(_OWORD *)(v18 + 32);
            *(_OWORD *)(v20 + 64) = *(_OWORD *)(v18 + 16);
            *(_OWORD *)(v20 + 80) = v27;
            *v21 = result;
          }
          v18 += 48;
          v19 += 48;
          v20 += 48;
        }
        while ((__n128 *)v18 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C5F56538(uint64_t result, int *a2, int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8)
{
  uint64_t v9;
  int *v14;
  int *v15;
  int *v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  unint64_t v20;
  __int128 *v21;
  int *v22;
  int *v23;
  uint64_t v24;
  BOOL v25;
  int *v26;
  uint64_t v27;
  int *v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  int *v34;
  __int128 v35;
  __int128 v36;
  __int128 *v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  int *v49;
  int *v50;
  int *v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  BOOL v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int *v60;
  unint64_t v61;
  int *v62;
  unint64_t v63;
  __int128 *v64;
  __int128 v65;
  __int128 v66;
  __int128 *v67;
  int *v68;
  int *v69;
  int *v70;
  int *v71;
  __int128 v72;
  __int128 v73;
  unint64_t v74;
  __int128 *v75;
  __int128 v76;
  __int128 v77;
  __int128 *v78;
  int *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  int *v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  uint64_t *v94;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _BYTE v101[32];
  _BYTE v102[32];
  _BYTE v103[32];
  _BYTE v104[32];
  _BYTE v105[32];

  if (!a6)
    return result;
  v9 = a6;
  v14 = (int *)result;
  while (a5 > a8 && v9 > a8)
  {
    if (!a5)
      return result;
    v15 = v14;
    while (1)
    {
      v16 = a2;
      result = sub_1C5F55FDC(*a4, a2, v14);
      if ((result & 1) != 0)
        break;
      v14 += 12;
      v15 += 12;
      --a5;
      a2 = v16;
      if (!a5)
        return result;
    }
    v93 = v9;
    v94 = a4;
    v91 = a8;
    v92 = a3;
    if (a5 >= v9)
    {
      v23 = v16;
      v21 = a7;
      if (a5 == 1)
      {
        *(_OWORD *)v105 = *((_OWORD *)v14 + 1);
        *(_OWORD *)&v105[16] = *((_OWORD *)v14 + 2);
        v100 = *(_OWORD *)v14;
        v84 = *(_OWORD *)v16;
        v85 = *((_OWORD *)v16 + 1);
        *(_OWORD *)((char *)v14 + 25) = *(_OWORD *)((char *)v16 + 25);
        *(_OWORD *)v14 = v84;
        *((_OWORD *)v14 + 1) = v85;
        *(_OWORD *)((char *)v16 + 25) = *(_OWORD *)&v105[9];
        *(_OWORD *)v16 = v100;
        *((_OWORD *)v16 + 1) = *(_OWORD *)v105;
        return result;
      }
      if (a5 >= 0)
        v24 = a5;
      else
        v24 = a5 + 1;
      v20 = v24 >> 1;
      v22 = &v14[12 * (v24 >> 1)];
      v25 = a3 == v16;
      v26 = a3;
      v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)v16) >> 4);
      if (v25)
      {
        v19 = v26;
      }
      else
      {
        v27 = *a4;
        v19 = v16;
        do
        {
          v28 = &v19[12 * (v18 >> 1)];
          v29 = sub_1C5F55FDC(v27, v28, v22);
          if (v29)
            v18 += ~(v18 >> 1);
          else
            v18 >>= 1;
          if (v29)
            v19 = v28 + 12;
        }
        while (v18);
        v23 = v16;
        v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v16) >> 4);
        v21 = a7;
      }
    }
    else
    {
      if (v9 >= 0)
        v17 = v9;
      else
        v17 = v9 + 1;
      v18 = v17 >> 1;
      v19 = &v16[12 * (v17 >> 1)];
      v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v15) >> 4);
      v21 = a7;
      if (v14 == v16)
      {
        v22 = v16;
        v14 = v16;
        goto LABEL_46;
      }
      v90 = v17 >> 1;
      v22 = v14;
      do
      {
        if (sub_1C5F55FDC(*v94, v19, &v22[12 * (v20 >> 1)]))
        {
          v20 >>= 1;
        }
        else
        {
          v22 += 12 * (v20 >> 1) + 12;
          v20 += ~(v20 >> 1);
        }
      }
      while (v20);
      v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v15) >> 4);
      v21 = a7;
      v23 = v16;
      v18 = v90;
    }
    if (v22 != v23)
    {
      if (v23 == v19)
      {
        v19 = v23;
        v23 = v22;
      }
      else if (v22 + 12 == v23)
      {
        *(_OWORD *)v102 = *((_OWORD *)v22 + 1);
        *(_OWORD *)&v102[16] = *((_OWORD *)v22 + 2);
        v97 = *(_OWORD *)v22;
        v37 = v21;
        v38 = v18;
        v39 = (char *)v19 - (char *)v23;
        memmove(v22, v23, (char *)v19 - (char *)v23 - 7);
        v23 = (int *)((char *)v22 + v39);
        v18 = v38;
        v21 = v37;
        *(_OWORD *)v23 = v97;
        *((_OWORD *)v23 + 1) = *(_OWORD *)v102;
        *(_OWORD *)((char *)v23 + 25) = *(_OWORD *)&v102[9];
      }
      else if (v23 + 12 == v19)
      {
        v23 = v22 + 12;
        *(_OWORD *)v103 = *((_OWORD *)v19 - 2);
        *(_OWORD *)&v103[16] = *((_OWORD *)v19 - 1);
        v98 = *((_OWORD *)v19 - 3);
        if (v19 - 12 != v22)
        {
          v40 = v18;
          v41 = v21;
          memmove(v22 + 12, v22, (char *)(v19 - 12) - (char *)v22 - 7);
          v21 = v41;
          v18 = v40;
          v23 = v22 + 12;
        }
        *(_OWORD *)((char *)v22 + 25) = *(_OWORD *)&v103[9];
        *(_OWORD *)v22 = v98;
        *((_OWORD *)v22 + 1) = *(_OWORD *)v103;
      }
      else
      {
        v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 4);
        v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v23) >> 4);
        if (v30 == v31)
        {
          v32 = 0;
          do
          {
            v33 = &v23[v32];
            v34 = &v22[v32];
            *(_OWORD *)v101 = *(_OWORD *)&v22[v32 + 4];
            *(_OWORD *)&v101[16] = *(_OWORD *)&v22[v32 + 8];
            v96 = *(_OWORD *)&v22[v32];
            v35 = *(_OWORD *)&v23[v32];
            v36 = *(_OWORD *)&v23[v32 + 4];
            *(_OWORD *)((char *)v34 + 25) = *(_OWORD *)((char *)&v23[v32 + 6] + 1);
            *(_OWORD *)v34 = v35;
            *((_OWORD *)v34 + 1) = v36;
            *(_OWORD *)((char *)v33 + 25) = *(_OWORD *)&v101[9];
            *(_OWORD *)v33 = v96;
            *((_OWORD *)v33 + 1) = *(_OWORD *)v101;
            if (&v22[v32 + 12] == v23)
              break;
            v32 += 12;
          }
          while (v33 + 12 != v19);
        }
        else
        {
          v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v23) >> 4);
          v43 = v30;
          do
          {
            v44 = v43;
            v43 = v42;
            v42 = v44 % v42;
          }
          while (v42);
          if (v43)
          {
            v45 = &v22[12 * v43];
            do
            {
              v46 = *((_OWORD *)v45 - 3);
              v47 = *((_OWORD *)v45 - 2);
              v48 = *((_OWORD *)v45 - 1);
              v45 -= 12;
              *(_OWORD *)v104 = v47;
              *(_OWORD *)&v104[16] = v48;
              v99 = v46;
              v49 = &v45[12 * v30];
              v50 = v45;
              do
              {
                v51 = v50;
                v50 = v49;
                v52 = *(_OWORD *)v49;
                v53 = *((_OWORD *)v49 + 1);
                *(_OWORD *)((char *)v51 + 25) = *(_OWORD *)((char *)v49 + 25);
                *(_OWORD *)v51 = v52;
                *((_OWORD *)v51 + 1) = v53;
                v54 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v49) >> 4);
                v55 = __OFSUB__(v30, v54);
                v57 = v30 - v54;
                v56 = (v57 < 0) ^ v55;
                v49 = &v22[12 * v57];
                if (v56)
                  v49 = &v50[12 * v30];
              }
              while (v49 != v45);
              *(_OWORD *)((char *)v50 + 25) = *(_OWORD *)&v104[9];
              *(_OWORD *)v50 = v99;
              *((_OWORD *)v50 + 1) = *(_OWORD *)v104;
            }
            while (v45 != v22);
          }
          v23 = &v22[12 * v31];
        }
      }
      goto LABEL_62;
    }
    v22 = v23;
LABEL_46:
    v23 = v19;
LABEL_62:
    v58 = a5 - v20;
    v59 = v93 - v18;
    if ((uint64_t)(v18 + v20) >= (uint64_t)(v93 - (v18 + v20) + a5))
    {
      v62 = v23;
      result = sub_1C5F56538(v23, v19, v92, v94, a5 - v20, v93 - v18, v21);
      v19 = v22;
      v59 = v18;
      v58 = v20;
      a3 = v62;
      a8 = v91;
    }
    else
    {
      v60 = v14;
      v61 = v20;
      a8 = v91;
      v14 = v23;
      result = sub_1C5F56538(v60, v22, v23, v94, v61, v18, v21);
      a3 = v92;
    }
    a5 = v58;
    v9 = v59;
    a2 = v19;
    a4 = v94;
    if (!v59)
      return result;
  }
  if (a5 <= v9)
  {
    if (v14 != a2)
    {
      v74 = 0;
      do
      {
        v75 = &a7[v74 / 0x10];
        v76 = *(_OWORD *)&v14[v74 / 4];
        v77 = *(_OWORD *)&v14[v74 / 4 + 8];
        v75[1] = *(_OWORD *)&v14[v74 / 4 + 4];
        v75[2] = v77;
        *v75 = v76;
        v74 += 48;
      }
      while (&v14[v74 / 4] != a2);
      if (v74)
      {
        v78 = a7;
        while (a2 != a3)
        {
          v79 = a2;
          result = sub_1C5F55FDC(*a4, a2, (int *)v78);
          if ((_DWORD)result)
          {
            v80 = *(_OWORD *)v79;
            v81 = *((_OWORD *)v79 + 1);
            *(_OWORD *)((char *)v14 + 25) = *(_OWORD *)((char *)v79 + 25);
            *(_OWORD *)v14 = v80;
            *((_OWORD *)v14 + 1) = v81;
            a2 = v79 + 12;
          }
          else
          {
            v82 = *v78;
            v83 = v78[1];
            *(_OWORD *)((char *)v14 + 25) = *(__int128 *)((char *)v78 + 25);
            *(_OWORD *)v14 = v82;
            *((_OWORD *)v14 + 1) = v83;
            v78 += 3;
            a2 = v79;
          }
          v14 += 12;
          if (&a7[v74 / 0x10] == v78)
            return result;
        }
        return (uint64_t)memmove(v14, v78, (char *)a7 - (char *)v78 + v74 - 7);
      }
    }
  }
  else if (a2 != a3)
  {
    v63 = 0;
    do
    {
      v64 = &a7[v63 / 0x10];
      v65 = *(_OWORD *)&a2[v63 / 4];
      v66 = *(_OWORD *)&a2[v63 / 4 + 8];
      v64[1] = *(_OWORD *)&a2[v63 / 4 + 4];
      v64[2] = v66;
      *v64 = v65;
      v63 += 48;
    }
    while (&a2[v63 / 4] != a3);
    if (v63)
    {
      v67 = &a7[v63 / 0x10];
      v68 = a3 - 12;
      while (a2 != v14)
      {
        v69 = a2 - 12;
        v70 = a2;
        result = sub_1C5F55FDC(*a4, (int *)v67 - 12, a2 - 12);
        if ((_DWORD)result)
          v71 = v69;
        else
          v71 = (int *)(v67 - 3);
        if ((_DWORD)result)
          a2 = v69;
        else
          a2 = v70;
        if (!(_DWORD)result)
          v67 -= 3;
        v72 = *(_OWORD *)((char *)v71 + 25);
        v73 = *((_OWORD *)v71 + 1);
        *(_OWORD *)v68 = *(_OWORD *)v71;
        *((_OWORD *)v68 + 1) = v73;
        *(_OWORD *)((char *)v68 + 25) = v72;
        v68 -= 12;
        if (v67 == a7)
          return result;
      }
      if (v67 != a7)
      {
        v86 = 0;
        do
        {
          v87 = &v68[v86 / 4];
          v88 = v67[v86 / 0x10 - 3];
          v89 = v67[v86 / 0x10 - 2];
          *(_OWORD *)((char *)v87 + 25) = *(__int128 *)((char *)&v67[v86 / 0x10 - 1] - 7);
          *(_OWORD *)v87 = v88;
          *((_OWORD *)v87 + 1) = v89;
          v86 -= 48;
        }
        while (&v67[v86 / 0x10] != a7);
      }
    }
  }
  return result;
}

uint64_t sub_1C5F56BE8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (!a1[2] && (v1 = a1[3]) != 0)
    v2 = *(_QWORD *)(v1 + 24) + 40;
  else
    v2 = a1[4] + 64;
  return *(_QWORD *)v2;
}

BOOL sub_1C5F56C14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 16) == 21)
      v2 = a1;
    else
      v2 = 0;
    if (a2)
    {
LABEL_6:
      if (*(_BYTE *)(a2 + 16) == 21)
        v3 = a2;
      else
        v3 = 0;
      if (!v2)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v2 = 0;
    if (a2)
      goto LABEL_6;
  }
  v3 = 0;
  if (!v2)
    goto LABEL_15;
LABEL_13:
  if (!v3)
    return 1;
LABEL_15:
  if (v3 && !v2)
    return 0;
  if (v2 && v3)
  {
    v5 = (_DWORD *)(v2 + 32);
    v6 = (_DWORD *)(v3 + 32);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = *(__int16 *)(v7 + 18);
    if ((v8 & 0x80000000) == 0)
    {
      v9 = *(_QWORD *)(v7 + 48);
      if (v9 != v7 + 40)
      {
        v10 = 0;
        do
        {
          v11 = v9 - 24;
          if (!v9)
            v11 = 0;
          *(_DWORD *)(v11 + 56) = v10++;
          v9 = *(_QWORD *)(v9 + 8);
        }
        while (v9 != v7 + 40);
      }
      *(_WORD *)(v7 + 18) = v8 | 0x8000;
    }
    v5 = (_DWORD *)(a1 + 56);
    v6 = (_DWORD *)(a2 + 56);
  }
  return *v5 < *v6;
}

uint64_t sub_1C5F56CE4()
{
  uint64_t result;
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Verify PredicateInfo in legacy printer pass.";
  v1.n128_u64[1] = 44;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED827E38, "verify-predicateinfo", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED827E38, &dword_1C475E000);
  result = sub_1C4D9A2C4("predicateinfo-rename", 0x14uLL, "Controls which variables are renamed with predicateinfo", 0x37uLL);
  dword_1ED827E30 = result;
  return result;
}

uint64_t llvm::isAllocaPromotable(llvm *this, const llvm::AllocaInst *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  llvm *v6;
  uint64_t v7;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 1;
  while (1)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = *(unsigned __int8 *)(v4 + 16);
    if (v4 && v5 == 60)
    {
      if ((*(_WORD *)(v4 + 18) & 1) != 0 || *(_QWORD *)v4 != *((_QWORD *)this + 8))
        return 0;
      goto LABEL_32;
    }
    if (v4 && v5 == 61)
    {
      v6 = *(llvm **)(v4 - 64);
      if (v6 == this || *(_QWORD *)v6 != *((_QWORD *)this + 8) || (*(_WORD *)(v4 + 18) & 1) != 0)
        return 0;
      goto LABEL_32;
    }
    if (v5 == 84)
      break;
    if (!v4 || v5 != 77)
    {
      if (!v4 || v5 != 62)
      {
        result = 0;
        if (!v4)
          return result;
        if (v5 != 78)
          return result;
        result = sub_1C4F8A194(*(_QWORD *)(v2 + 24), 0);
        if (!(_DWORD)result)
          return result;
        goto LABEL_32;
      }
      result = llvm::GetElementPtrInst::hasAllZeroIndices(*(llvm::GetElementPtrInst **)(v2 + 24));
      if (!(_DWORD)result)
        return result;
    }
    if (!sub_1C4F8A194(v4, 1))
      return 0;
LABEL_32:
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 1;
  }
  v7 = *(_QWORD *)(v4 - 32);
  if (v7
    && !*(_BYTE *)(v7 + 16)
    && *(_QWORD *)(v7 + 24) == *(_QWORD *)(v4 + 72)
    && (*(_BYTE *)(v7 + 33) & 0x20) != 0
    && (llvm::Instruction::isLifetimeStartOrEnd(*(llvm::Instruction **)(v2 + 24))
     || sub_1C4D9F8B4(v4)
     || sub_1C509DDB0(v4)))
  {
    goto LABEL_32;
  }
  return 0;
}

void llvm::PromoteMemToReg(const void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  size_t v6;
  uint64_t v8;
  unint64_t m;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ***v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  llvm::Use *v32;
  llvm::Value *v33;
  llvm::Value *v34;
  uint64_t v35;
  llvm::Use *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t i;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Type *v46;
  llvm::DbgVariableIntrinsic *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  char **v51;
  uint64_t v52;
  llvm::DbgVariableIntrinsic *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  _QWORD *v64;
  _QWORD ***v65;
  _QWORD *v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD **v73;
  _QWORD *v74;
  uint64_t v75;
  llvm::DbgVariableIntrinsic **v76;
  llvm::DbgVariableIntrinsic *v77;
  _QWORD **v78;
  uint64_t v79;
  llvm::DbgVariableIntrinsic *v80;
  _QWORD *v81;
  void *v82;
  int v83;
  int v84;
  void *v85;
  unsigned int *v86;
  uint64_t *v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t ****v94;
  uint64_t v95;
  uint64_t ***v96;
  _QWORD *v97;
  uint64_t **v98;
  uint64_t **v99;
  llvm::DIBuilder *v100;
  uint64_t **v101;
  uint64_t **v102;
  llvm::DbgVariableIntrinsic *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  llvm::DbgVariableIntrinsic **v107;
  llvm::DbgVariableIntrinsic *v108;
  uint64_t v109;
  _QWORD *v110;
  llvm::Type *v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  char **v115;
  uint64_t ***v116;
  unsigned int v117;
  unint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  unsigned int *v121;
  _DWORD *v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  uint64_t ****v130;
  uint64_t ***v131;
  uint64_t ****v132;
  int v133;
  BOOL v134;
  unsigned int v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  void *v139;
  uint64_t **v140;
  uint64_t **v141;
  uint64_t v142;
  uint64_t ****v143;
  uint64_t ***v144;
  void *v145;
  uint64_t ****v146;
  uint64_t ***v147;
  int v148;
  int v149;
  llvm::DbgVariableIntrinsic *v150;
  llvm **v151;
  uint64_t v152;
  llvm *v153;
  llvm::DIBuilder *v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  llvm::DbgVariableIntrinsic **v158;
  llvm::DbgVariableIntrinsic *v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t ****v165;
  uint64_t v166;
  uint64_t ***v167;
  _QWORD *v168;
  uint64_t **v169;
  uint64_t **v170;
  int v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  int v179;
  uint64_t v180;
  int v181;
  void *v182;
  unsigned int v183;
  _QWORD *v184;
  void *v185;
  _QWORD *v186;
  int v187;
  BOOL v188;
  unsigned int v189;
  _QWORD *v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  _QWORD *v194;
  void **v195;
  uint64_t *j;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  BOOL v206;
  BOOL v207;
  uint64_t v208;
  _QWORD *v209;
  void **v210;
  uint64_t v211;
  unsigned int v212;
  BOOL v213;
  unint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  unsigned int v218;
  uint64_t *v219;
  void **v220;
  unsigned int v221;
  _QWORD *v222;
  void **v223;
  _QWORD *v224;
  int v225;
  BOOL v226;
  unsigned int v227;
  _QWORD *v228;
  int v229;
  char v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  int v234;
  uint64_t ***v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t ****v240;
  uint64_t ***v241;
  int v242;
  int v243;
  uint64_t ***v244;
  char *v245;
  char *v246;
  char *v247;
  uint64_t *v248;
  _QWORD *v249;
  _QWORD *v250;
  llvm::Value *v251;
  char *v252;
  uint64_t v253;
  _QWORD *v254;
  _QWORD *v255;
  uint64_t *v256;
  unsigned int v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  int v261;
  BOOL v262;
  unsigned int v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  llvm::ValueSymbolTable *v268;
  int v269;
  int v270;
  unsigned int v271;
  int v272;
  _QWORD *v273;
  uint64_t v274;
  void *v275;
  void *v276;
  size_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  _QWORD *v289;
  char *v290;
  char *v291;
  char *v292;
  void *v293;
  char *v294;
  llvm::DIBuilder *v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  unsigned int v300;
  uint64_t v301;
  _QWORD *v302;
  int v303;
  int v304;
  unint64_t v305;
  unsigned int k;
  const llvm::DILocation **v307;
  unsigned int v308;
  llvm::PHINode **v309;
  llvm::PHINode *v310;
  llvm::PHINode **v311;
  int v312;
  BOOL v313;
  unsigned int v314;
  llvm::PHINode **v315;
  uint64_t v316;
  llvm::DILocation *v317;
  llvm::PHINode *v318;
  unsigned __int8 **v319;
  unsigned __int8 *v320;
  char *v321;
  uint64_t v322;
  llvm **v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  int v327;
  unsigned int v328;
  llvm::DIBuilder *v329;
  char v330;
  llvm::Value *v331;
  _BOOL4 v332;
  uint64_t v333;
  int n;
  uint64_t v335;
  int v336;
  int v337;
  uint64_t Successor;
  uint64_t v339;
  unsigned int ii;
  uint64_t v341;
  char v342;
  uint64_t v343;
  char *v344;
  char *v345;
  int64_t v346;
  unint64_t v347;
  llvm::PHINode *v348;
  llvm::PHINode *v349;
  void *v350;
  void **v351;
  llvm::Value *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  int v360;
  unsigned int v361;
  _QWORD *v362;
  _QWORD ***v363;
  _QWORD *v364;
  int v365;
  BOOL v366;
  unsigned int v367;
  uint64_t v368;
  _QWORD *v369;
  uint64_t v370;
  _QWORD **v371;
  _QWORD *v372;
  _QWORD *v373;
  _BOOL4 v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int *v380;
  unsigned int v381;
  unsigned __int8 **v382;
  unsigned __int8 *v383;
  char *v384;
  uint64_t v385;
  llvm **v386;
  uint64_t v387;
  uint64_t v388;
  _QWORD *v389;
  void *v390;
  int v391;
  int v392;
  int v393;
  int v394;
  llvm::Type *v395;
  llvm::Type *v396;
  llvm::DSOLocalEquivalent **v397;
  char *v398;
  char *v399;
  uint64_t v400;
  llvm::Value *v401;
  uint64_t v402;
  _QWORD *v403;
  uint64_t *****v404;
  uint64_t *****v405;
  uint64_t v406;
  uint64_t ****v407;
  uint64_t v408;
  uint64_t ***v409;
  _QWORD *v410;
  uint64_t **v411;
  uint64_t **v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  _DWORD *v416;
  uint64_t v417;
  _DWORD *v418;
  uint64_t v419;
  int v420;
  _DWORD *v423;
  char v424;
  uint64_t v425;
  int v426;
  unint64_t v427;
  uint64_t *v428;
  int v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t *v433;
  uint64_t v434;
  uint64_t *v435;
  llvm::UndefValue *v436;
  uint64_t v437;
  _QWORD *v438;
  _DWORD *v439;
  int v440;
  int v443;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  uint64_t jj;
  uint64_t v459;
  unsigned int v460;
  BOOL v461;
  unint64_t v463;
  uint64_t v464;
  void *v465;
  int v466;
  uint64_t v467;
  uint64_t v468;
  int v469;
  uint64_t v470;
  int v471;
  uint64_t v472;
  unsigned int v473;
  unsigned int v474;
  uint64_t *v475;
  char *v476;
  unint64_t v477;
  unint64_t v478;
  char *v479;
  uint64_t v480;
  _QWORD *v481;
  uint64_t v482;
  unsigned int *v483;
  int v484;
  int v485;
  unsigned int v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  int v491;
  char *v492;
  char *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  llvm::UndefValue *v497;
  uint64_t v498;
  uint64_t *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  uint64_t v504;
  int v505;
  unsigned int v508;
  _QWORD *v509;
  uint64_t v510;
  char *v511;
  void *v512;
  char *v513;
  void *v514;
  char *v515;
  char *v516;
  uint64_t v517;
  char *v518;
  int v519;
  uint64_t v520;
  _QWORD *v521;
  unint64_t v522;
  unint64_t v523;
  _QWORD *v524;
  uint64_t v525;
  int v526;
  int v527;
  _QWORD *v528;
  uint64_t v529;
  int v530;
  unsigned int v531;
  void *v532;
  unint64_t v533;
  unint64_t v534;
  _QWORD *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  _QWORD *v539;
  uint64_t v540;
  char *v541;
  _QWORD *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  int8x16_t v546;
  uint64_t v547;
  int8x16_t v548;
  int8x16_t v549;
  uint64_t v550;
  uint64_t v551;
  int v552;
  llvm::SmallPtrSetImplBase *v553;
  unint64_t v554;
  llvm::PHINode *v555;
  llvm::PHINode *v556;
  uint64_t v557;
  char *v558;
  _QWORD v559[32];
  uint64_t v560[2];
  char v561;
  llvm::PHINode **v562;
  void **v563;
  _QWORD *v564;
  int32x2_t v565;
  unsigned int v566;
  void *v567;
  char *v568;
  _QWORD v569[2];
  __int16 v570;
  _QWORD v571[2];
  unint64_t v572;
  __int16 v573;
  llvm::DILocation *v574;
  void **v575;
  void *v576;
  _BYTE *v577;
  char *v578;
  void *v579;
  _BYTE v580[448];
  int8x16_t v581;
  uint64_t v582;
  void *v583;
  uint64_t v584;
  uint64_t v585;
  __int16 v586;
  __int128 v587;
  int v588;
  __int128 v589;
  unsigned int v590;
  __int128 v591;
  int v592;
  void *v593;
  uint64_t v594;
  _BYTE v595[192];
  _BYTE *v596;
  void *__b;
  uint64_t v598;
  int v599;
  _BYTE v600[128];
  __int128 v601;
  unsigned int v602;
  __int128 v603;
  int v604;
  void *v605;
  uint64_t v606;
  _BYTE v607[256];
  void *__src;
  uint64_t v609;
  _BYTE v610[89];
  llvm::DbgVariableIntrinsic *v611;
  uint64_t v612;
  char v613;
  void *v614;
  uint64_t ***v615;
  uint64_t v616;
  void *v617[2];
  void *v618[2];
  uint64_t v619;
  __int128 v620;
  uint64_t v621;
  void *__p[2];
  uint64_t v623;
  _QWORD *v624;
  _QWORD *v625;
  char v626;
  uint64_t v627;

  v627 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return;
  v6 = 8 * a2;
  v577 = 0;
  v576 = 0;
  v578 = 0;
  if (8 * a2)
  {
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_877;
    v8 = (8 * a2) >> 3;
    v576 = operator new(8 * a2);
    v578 = (char *)v576 + 8 * v8;
    memmove(v576, a1, v6);
    v577 = v578;
  }
  v579 = a3;
  m = (unint64_t)&v576;
  llvm::DIBuilder::DIBuilder((uint64_t)v580, *(_QWORD **)(*(_QWORD *)(**(_QWORD **)a3 + 56) + 40), 0, 0);
  v581.i64[0] = a4;
  v581.i64[1] = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)a3 + 56) + 40) + 272;
  v582 = 0;
  v583 = a3;
  v584 = a4;
  v585 = 0;
  v586 = 257;
  v10 = v595;
  v587 = 0u;
  v588 = 0;
  v589 = 0u;
  v590 = 0;
  v591 = 0u;
  v592 = 0;
  v593 = v595;
  v594 = 0x800000000;
  v596 = v600;
  __b = v600;
  v598 = 16;
  v599 = 0;
  v602 = 0;
  v601 = 0u;
  v603 = 0u;
  v604 = 0;
  v11 = (uint64_t)v579;
  v545 = *(_QWORD *)(**(_QWORD **)v579 + 56);
  v12 = v577;
  v13 = v576;
  v14 = &unk_1C640F000;
  v15 = v577 - (_BYTE *)v576;
  if (v577 != v576)
  {
    v16 = v15 >> 3;
    if ((unint64_t)v15 >= 0x41)
    {
      __p[0] = 0;
      v10 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v593, v15 >> 3, 24, (unint64_t *)__p);
      v18 = (char *)v593;
      v19 = v594;
      if ((_DWORD)v594)
      {
LABEL_882:
        v537 = 24 * v19;
        v538 = v14[231];
        v539 = v10;
        do
        {
          *v539 = v539 + 2;
          v539[1] = v538;
          if (*((_DWORD *)v18 + 2))
            sub_1C614D378((uint64_t)v539, (uint64_t)v18);
          v18 += 24;
          v539 += 3;
          v537 -= 24;
        }
        while (v537);
        v18 = (char *)v593;
        if ((_DWORD)v594)
        {
          v540 = 24 * v594;
          do
          {
            v541 = *(char **)&v18[v540 - 24];
            if (&v18[v540 - 8] != v541)
              free(v541);
            v540 -= 24;
          }
          while (v540);
          v18 = (char *)v593;
        }
      }
      v20 = (int)__p[0];
      if (v18 != v595)
        free(v18);
      v593 = v10;
      HIDWORD(v594) = v20;
      v17 = v594;
    }
    else
    {
      v17 = 0;
    }
    if (v17 != v16)
    {
      v21 = 3 * v17;
      v22 = 24 * v16 - 24 * v17;
      v23 = (uint64_t)&v10[v21 + 2];
      v24 = v14[231];
      do
      {
        *(_QWORD *)(v23 - 16) = v23;
        *(_QWORD *)(v23 - 8) = v24;
        v23 += 24;
        v22 -= 24;
      }
      while (v22);
    }
    LODWORD(v594) = (unint64_t)v15 >> 3;
    v11 = (uint64_t)v579;
    v12 = v577;
    v13 = v576;
  }
  v605 = v607;
  v606 = 0x2000000000;
  __src = v610;
  v609 = 0x2000000000;
  v614 = &v616;
  v25 = (uint64_t ***)v14[231];
  v615 = v25;
  v565 = 0;
  v564 = 0;
  v566 = 0;
  v560[0] = v11;
  v560[1] = 0;
  v561 = 0;
  if (v12 == v13)
    goto LABEL_823;
  v26 = 0;
  v27 = 0;
  v553 = (llvm::SmallPtrSetImplBase *)(m + 816);
  v550 = m + 976;
  v544 = m + 560;
  v542 = (_QWORD *)(m + 836);
  v543 = m + 488;
  v551 = v545 + 72;
  do
  {
    v28 = v13[v26];
    v29 = *(uint64_t **)(v28 + 8);
    if (!v29)
      goto LABEL_133;
    do
    {
      while (1)
      {
        v30 = v29;
        v29 = (uint64_t *)v29[1];
        v31 = v30[3];
        if ((*(_BYTE *)(v31 + 16) & 0xFE) != 0x3C)
          break;
LABEL_23:
        if (!v29)
          goto LABEL_33;
      }
      if (sub_1C4D9F8B4(v30[3]) || sub_1C509DDB0(v31))
      {
        llvm::Value::dropDroppableUse((llvm::Value *)v30, v32);
        goto LABEL_23;
      }
      if (*(_BYTE *)(*(_QWORD *)v31 + 8) != 7)
      {
        v33 = *(llvm::Value **)(v31 + 8);
        if (v33)
        {
          do
          {
            v34 = (llvm::Value *)*((_QWORD *)v33 + 1);
            v35 = *((_QWORD *)v33 + 3);
            if (sub_1C4D9F8B4(v35) || sub_1C509DDB0(v35))
            {
              llvm::Value::dropDroppableUse(v33, v36);
            }
            else
            {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v35 + 40) + 40, (uint64_t ***)v35);
              v37 = *(_QWORD *)(v35 + 24);
              v38 = *(_QWORD **)(v35 + 32);
              *v38 = v37;
              *(_QWORD *)(v37 + 8) = v38;
              *(_QWORD *)(v35 + 24) = 0;
              *(_QWORD *)(v35 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v35);
            }
            v33 = v34;
          }
          while (v34);
        }
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v31 + 40) + 40, (uint64_t ***)v31);
      v39 = *(_QWORD *)(v31 + 24);
      v40 = *(_QWORD **)(v31 + 32);
      *v40 = v39;
      *(_QWORD *)(v39 + 8) = v40;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v31);
    }
    while (v29);
LABEL_33:
    if (!*(_QWORD *)(v28 + 8))
      goto LABEL_133;
    LODWORD(v606) = 0;
    LODWORD(v609) = 0;
    v611 = 0;
    v612 = 0;
    v613 = 1;
    LODWORD(v615) = 0;
    for (i = *(_QWORD *)(v28 + 8); i; i = *(_QWORD *)(i + 8))
    {
      v42 = *(_QWORD *)(i + 24);
      v43 = *(_QWORD *)(v42 + 40);
      if (v42 && *(_BYTE *)(v42 + 16) == 61)
      {
        v44 = v606;
        if (v606 >= (unint64_t)HIDWORD(v606))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v605, (uint64_t)v607, v606 + 1, 8);
          v44 = v606;
        }
        *((_QWORD *)v605 + v44) = v43;
        LODWORD(v606) = v606 + 1;
        v611 = (llvm::DbgVariableIntrinsic *)v42;
      }
      else
      {
        v45 = v609;
        if (v609 >= (unint64_t)HIDWORD(v609))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v610, v609 + 1, 8);
          v45 = v609;
        }
        *((_QWORD *)__src + v45) = v43;
        LODWORD(v609) = v609 + 1;
      }
      if (v613)
      {
        if (v612)
        {
          if (v612 != *(_QWORD *)(v42 + 40))
            v613 = 0;
        }
        else
        {
          v612 = *(_QWORD *)(v42 + 40);
        }
      }
    }
    v552 = v27;
    llvm::findDbgUsers((uint64_t)&v614, v28);
    if ((_DWORD)v606 != 1)
    {
LABEL_111:
      v27 = v552;
      if (v613)
      {
        v85 = v579;
        v548 = v581;
        v86 = (unsigned int *)&v623;
        __p[0] = &v623;
        __p[1] = (void *)0x4000000000;
        v87 = &v623;
        v88 = *(_QWORD *)(v28 + 8);
        if (!v88)
          goto LABEL_139;
        v89 = 0;
        do
        {
          v90 = *(_QWORD *)(v88 + 24);
          if (v90 && *(_BYTE *)(v90 + 16) == 61)
          {
            v91 = sub_1C5F5A138((uint64_t)&v564, *(_QWORD *)(v88 + 24));
            v92 = LODWORD(__p[1]);
            if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&v623, LODWORD(__p[1]) + 1, 16);
              v92 = LODWORD(__p[1]);
            }
            v93 = (char *)__p[0] + 16 * v92;
            *v93 = v91;
            v93[1] = v90;
            v89 = ++LODWORD(__p[1]);
          }
          v88 = *(_QWORD *)(v88 + 8);
        }
        while (v88);
        v86 = (unsigned int *)__p[0];
        v87 = (uint64_t *)((char *)__p[0] + 16 * v89);
        if (v89)
          v113 = 126 - 2 * __clz(v89);
        else
LABEL_139:
          v113 = 0;
        sub_1C5F5A668(v86, (unint64_t)v87, v113, 1);
        v114 = *(_QWORD *)(v28 + 8);
        if (v114)
        {
          v115 = (char **)v548.i64[0];
          v549 = vextq_s8(v548, v548, 8uLL);
          while (1)
          {
            v116 = *(uint64_t ****)(v114 + 24);
            v114 = *(_QWORD *)(v114 + 8);
            if (v116)
            {
              if (*((_BYTE *)v116 + 16) == 60)
                break;
            }
LABEL_174:
            if (!v114)
            {
              while (1)
              {
                v162 = *(_QWORD *)(v28 + 8);
                if (!v162)
                  goto LABEL_206;
                v150 = *(llvm::DbgVariableIntrinsic **)(v162 + 24);
                if ((_DWORD)v615)
                {
                  v151 = (llvm **)v614;
                  v152 = 8 * v615;
                  do
                  {
                    v153 = *v151;
                    if (*(_DWORD *)(*((_QWORD *)*v151 - 4) + 36) != 58)
                    {
                      llvm::DIBuilder::DIBuilder((uint64_t)v617, *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v28 + 40) + 56) + 40), 0, 0);
                      llvm::ConvertDebugDeclareToDebugValue(v153, v150, (llvm::StoreInst *)v617, v154);
                      sub_1C50F023C((uint64_t)v617);
                    }
                    ++v151;
                    v152 -= 8;
                  }
                  while (v152);
                }
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v150 + 5) + 40, (uint64_t ***)v150);
                v155 = *((_QWORD *)v150 + 3);
                v156 = (_QWORD *)*((_QWORD *)v150 + 4);
                *v156 = v155;
                *(_QWORD *)(v155 + 8) = v156;
                *((_QWORD *)v150 + 3) = 0;
                *((_QWORD *)v150 + 4) = 0;
                llvm::Value::deleteValue(v150);
                if (v566)
                {
                  LODWORD(v157) = (v566 - 1) & ((v150 >> 4) ^ (v150 >> 9));
                  v158 = (llvm::DbgVariableIntrinsic **)&v564[2 * v157];
                  v159 = *v158;
                  if (v150 == *v158)
                  {
LABEL_200:
                    *v158 = (llvm::DbgVariableIntrinsic *)-8192;
                    v565 = vadd_s32(v565, (int32x2_t)0x1FFFFFFFFLL);
                  }
                  else
                  {
                    v160 = 1;
                    while (v159 != (llvm::DbgVariableIntrinsic *)-4096)
                    {
                      v161 = v157 + v160++;
                      v157 = v161 & (v566 - 1);
                      v159 = (llvm::DbgVariableIntrinsic *)v564[2 * v157];
                      if (v150 == v159)
                      {
                        v158 = (llvm::DbgVariableIntrinsic **)&v564[2 * v157];
                        goto LABEL_200;
                      }
                    }
                  }
                }
              }
            }
          }
          v117 = sub_1C5F5A138((uint64_t)&v564, (uint64_t)v116);
          v118 = LODWORD(__p[1]);
          if (!LODWORD(__p[1]))
          {
            v139 = llvm::UndefValue::get((llvm::UndefValue *)*v116, v111);
            goto LABEL_170;
          }
          v119 = __p[0];
          do
          {
            v120 = v118 >> 1;
            v121 = (unsigned int *)&v119[2 * (v118 >> 1)];
            v123 = *v121;
            v122 = v121 + 4;
            v118 += ~(v118 >> 1);
            if (v123 < v117)
              v119 = v122;
            else
              v118 = v120;
          }
          while (v118);
          if (v119 == __p[0])
          {
            v171 = 0;
            goto LABEL_216;
          }
          v124 = *(_QWORD *)(*(v119 - 1) - 64);
          if (!v115 || (*((_BYTE *)v116 + 23) & 0x20) == 0)
          {
LABEL_167:
            if ((uint64_t ***)v124 != v116)
              goto LABEL_171;
            v139 = llvm::PoisonValue::get((llvm::PoisonValue *)*v116, v111);
LABEL_170:
            v124 = (uint64_t)v139;
LABEL_171:
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v116, (llvm::Value *)v124, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v116[5] + 5), v116);
            v140 = v116[3];
            v141 = v116[4];
            *v141 = (uint64_t *)v140;
            v140[1] = (uint64_t *)v141;
            v116[3] = 0;
            v116[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v116);
            if (v566)
            {
              LODWORD(v142) = (v566 - 1) & ((v116 >> 4) ^ (v116 >> 9));
              v143 = (uint64_t ****)&v564[2 * v142];
              v144 = *v143;
              if (v116 == *v143)
              {
LABEL_173:
                *v143 = (uint64_t ***)-8192;
                v565 = vadd_s32(v565, (int32x2_t)0x1FFFFFFFFLL);
              }
              else
              {
                v148 = 1;
                while (v144 != (uint64_t ***)-4096)
                {
                  v149 = v142 + v148++;
                  v142 = v149 & (v566 - 1);
                  v144 = (uint64_t ***)v564[2 * v142];
                  if (v116 == v144)
                  {
                    v143 = (uint64_t ****)&v564[2 * v142];
                    goto LABEL_173;
                  }
                }
              }
            }
            goto LABEL_174;
          }
          v125 = ***v116;
          v617[0] = v116;
          v126 = *(_DWORD *)(v125 + 2496);
          if (v126)
          {
            v127 = *(_QWORD *)(v125 + 2480);
            v128 = v126 - 1;
            v129 = v128 & ((v116 >> 4) ^ (v116 >> 9));
            v130 = (uint64_t ****)(v127 + 40 * v129);
            v131 = *v130;
            if (*v130 == v116)
              goto LABEL_163;
            v132 = 0;
            v133 = 1;
            while (v131 != (uint64_t ***)-4096)
            {
              if (v132)
                v134 = 0;
              else
                v134 = v131 == (uint64_t ***)-8192;
              if (v134)
                v132 = v130;
              v135 = v129 + v133++;
              v129 = v135 & v128;
              v130 = (uint64_t ****)(v127 + 40 * v129);
              v131 = *v130;
              if (*v130 == v116)
                goto LABEL_163;
            }
            if (v132)
              v146 = v132;
            else
              v146 = v130;
          }
          else
          {
            v146 = 0;
          }
          v130 = (uint64_t ****)sub_1C541AB24(v125 + 2480, (uint64_t)v617, (uint64_t *)v617, v146);
          v147 = (uint64_t ***)v617[0];
          v130[4] = 0;
          v130[3] = 0;
          *v130 = v147;
          v130[1] = (uint64_t ***)(v130 + 3);
          v130[2] = v25;
LABEL_163:
          v136 = *((unsigned int *)v130 + 4);
          if ((_DWORD)v136)
          {
            v137 = v130[1] + 1;
            v138 = 16 * v136;
            while (*((_DWORD *)v137 - 2) != 11)
            {
              v137 += 2;
              v138 -= 16;
              if (!v138)
                goto LABEL_167;
            }
            if (*v137)
            {
              v145 = v116;
              if (!v116[5])
              {
                if (!v124 || *(unsigned __int8 *)(v124 + 16) < 0x1Cu || (v145 = (void *)v124, !*(_QWORD *)(v124 + 40)))
                  v145 = 0;
              }
              *(int8x16_t *)v617 = v549;
              v618[0] = v145;
              v618[1] = v85;
              v619 = 0;
              LOBYTE(v620) = 1;
              if ((sub_1C4F84D74(v124, 0, (uint64_t)v617) & 1) == 0)
                sub_1C5F5A378(v115, (_DWORD **)v116);
            }
          }
          goto LABEL_167;
        }
LABEL_206:
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v28 + 40) + 40, (uint64_t ***)v28);
        v163 = *(_QWORD *)(v28 + 24);
        v164 = *(_QWORD **)(v28 + 32);
        *v164 = v163;
        *(_QWORD *)(v163 + 8) = v164;
        *(_QWORD *)(v28 + 24) = 0;
        *(_QWORD *)(v28 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v28);
        if ((_DWORD)v615)
        {
          v165 = (uint64_t ****)v614;
          v166 = 8 * v615;
          do
          {
            v167 = *v165;
            if (*((_DWORD *)*(*v165 - 4) + 9) != 58
              || (v168 = (_QWORD *)v167[-4 * (*((_DWORD *)v167 + 5) & 0x7FFFFFF) + 8][3][3],
                  ((v167[-4 * (*((_DWORD *)v167 + 5) & 0x7FFFFFF) + 8][3][4] - (_QWORD)v168) & 0x7FFFFFFF8) != 0)
              && *v168 == 6)
            {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v167[5] + 5), *v165);
              v169 = v167[3];
              v170 = v167[4];
              *v170 = (uint64_t *)v169;
              v169[1] = (uint64_t *)v170;
              v167[3] = 0;
              v167[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v167);
            }
            ++v165;
            v166 -= 8;
          }
          while (v166);
          v171 = 1;
        }
        else
        {
          v171 = 1;
        }
LABEL_216:
        if (__p[0] != &v623)
          free(__p[0]);
        if (v171)
          goto LABEL_134;
      }
      if (!DWORD2(v601))
      {
        v180 = *(_QWORD *)(v545 + 80);
        if (v180 != v551)
        {
          v181 = 0;
          while (1)
          {
            v182 = (void *)(v180 - 24);
            if (!v180)
              v182 = 0;
            __p[0] = v182;
            if (!v602)
              break;
            v183 = (v602 - 1) & ((v182 >> 4) ^ (v182 >> 9));
            v184 = (_QWORD *)(v601 + 16 * v183);
            v185 = (void *)*v184;
            if (v182 != (void *)*v184)
            {
              v186 = 0;
              v187 = 1;
              while (v185 != (void *)-4096)
              {
                if (v186)
                  v188 = 0;
                else
                  v188 = v185 == (void *)-8192;
                if (v188)
                  v186 = v184;
                v189 = v183 + v187++;
                v183 = v189 & (v602 - 1);
                v184 = (_QWORD *)(v601 + 16 * v183);
                v185 = (void *)*v184;
                if (v182 == (void *)*v184)
                  goto LABEL_248;
              }
              if (v186)
                v190 = v186;
              else
                v190 = v184;
              goto LABEL_247;
            }
LABEL_248:
            *((_DWORD *)v184 + 2) = v181++;
            v180 = *(_QWORD *)(v180 + 8);
            if (v180 == v551)
              goto LABEL_220;
          }
          v190 = 0;
LABEL_247:
          v184 = sub_1C4DE3FA0(v550, (uint64_t)__p, (uint64_t *)__p, v190);
          *v184 = __p[0];
          *((_DWORD *)v184 + 2) = 0;
          goto LABEL_248;
        }
      }
LABEL_220:
      if ((_DWORD)v615)
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v593 + 24 * v26, (uint64_t)&v614);
      *((_DWORD *)sub_1C496F93C(&v587, (_QWORD *)v576 + v26) + 2) = v552;
      v172 = (uint64_t *)v605;
      v617[0] = &v619;
      v617[1] = &v619;
      v618[0] = (void *)32;
      LODWORD(v618[1]) = 0;
      if ((_DWORD)v606)
      {
        v173 = 8 * v606;
        do
        {
          v174 = *v172++;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)v617, v174);
          v173 -= 8;
        }
        while (v173);
      }
      v555 = (llvm::PHINode *)v559;
      v556 = (llvm::PHINode *)v559;
      v557 = 32;
      LODWORD(v558) = 0;
      v175 = __src;
      v176 = v609;
      __p[0] = &v623;
      __p[1] = (void *)0x4000000000;
      if (v609 >= 0x41)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&v623, v609, 8);
        v177 = LODWORD(__p[1]);
        v178 = (uint64_t *)__p[0];
      }
      else
      {
        if (!(_DWORD)v609)
        {
          v179 = 0;
          goto LABEL_252;
        }
        v177 = 0;
        v178 = &v623;
      }
      memcpy(&v178[v177], v175, 8 * v176);
      v179 = (int)__p[1];
LABEL_252:
      v191 = v179 + v176;
      LODWORD(__p[1]) = v179 + v176;
      if (v179 + (_DWORD)v176)
      {
        v192 = 0;
        do
        {
          v193 = *((_QWORD *)__p[0] + v192);
          v194 = sub_1C477672C((uint64_t)v617, v193);
          if (v617[1] == v617[0])
            v195 = (void **)((char *)v618 + 4);
          else
            v195 = v618;
          if (v194 != (_QWORD *)((char *)v617[1] + 8 * *(unsigned int *)v195))
          {
            for (j = (uint64_t *)(v193 + 48); ; j = (uint64_t *)(v197 + 8))
            {
              v197 = *j;
              v198 = v197 - 24;
              if (!v197)
                v198 = 0;
              v199 = *(unsigned __int8 *)(v198 + 16);
              if (v197 && v199 == 61)
              {
                if (*(_QWORD *)(v198 - 32) == v28)
                {
                  v200 = (int)__p[1];
                  *((_QWORD *)__p[0] + v192) = *((_QWORD *)__p[0] + LODWORD(__p[1]) - 1);
                  LODWORD(__p[1]) = v200 - 1;
                  --v192;
                  --v191;
                  break;
                }
              }
              else if (v197 && v199 == 60 && *(_QWORD *)(v198 - 32) == v28)
              {
                break;
              }
            }
          }
          ++v192;
        }
        while (v192 != v191);
LABEL_299:
        while (LODWORD(__p[1]))
        {
          v201 = *((_QWORD *)__p[0] + LODWORD(__p[1]) - 1);
          --LODWORD(__p[1]);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v555, v201);
          if (v202)
          {
            v203 = *(_QWORD *)(v201 + 8);
            if (v203)
            {
              while (1)
              {
                v204 = *(_QWORD *)(v203 + 24);
                v205 = *(unsigned __int8 *)(v204 + 16);
                v206 = v204 && v205 >= 0x1C;
                v207 = !v206 || v205 - 29 > 0xA;
                if (!v207)
                  break;
                v203 = *(_QWORD *)(v203 + 8);
                if (!v203)
                  goto LABEL_299;
              }
LABEL_283:
              v208 = *(_QWORD *)(v204 + 40);
              v209 = sub_1C477672C((uint64_t)v617, v208);
              if (v617[1] == v617[0])
                v210 = (void **)((char *)v618 + 4);
              else
                v210 = v618;
              if (v209 == (_QWORD *)((char *)v617[1] + 8 * *(unsigned int *)v210))
              {
                v211 = LODWORD(__p[1]);
                if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&v623, LODWORD(__p[1]) + 1, 8);
                  v211 = LODWORD(__p[1]);
                }
                *((_QWORD *)__p[0] + v211) = v208;
                ++LODWORD(__p[1]);
              }
              while (1)
              {
                v203 = *(_QWORD *)(v203 + 8);
                if (!v203)
                  break;
                v204 = *(_QWORD *)(v203 + 24);
                v212 = *(unsigned __int8 *)(v204 + 16);
                if (v204)
                  v213 = v212 >= 0x1C;
                else
                  v213 = 0;
                if (v213 && v212 - 29 < 0xB)
                  goto LABEL_283;
              }
            }
          }
        }
      }
      if (__p[0] != &v623)
        free(__p[0]);
      v561 = 1;
      v562 = &v555;
      v563 = v617;
      __p[0] = &v623;
      __p[1] = (void *)0x2000000000;
      sub_1C4ED0454(v560, (uint64_t *)__p);
      v571[0] = &v576;
      v215 = 126 - 2 * __clz(LODWORD(__p[1]));
      if (LODWORD(__p[1]))
        v216 = v215;
      else
        v216 = 0;
      sub_1C5F5AFC0((unint64_t)__p[0], (uint64_t *)__p[0] + LODWORD(__p[1]), (uint64_t)v571, v216, 1);
      v217 = (uint64_t *)__p[0];
      if (!LODWORD(__p[1]))
      {
LABEL_372:
        if (v217 != &v623)
          free(v217);
        if (v556 != v555)
          free(v556);
        if (v617[1] != v617[0])
          free(v617[1]);
        v112 = v577;
        goto LABEL_135;
      }
      v218 = 0;
      v219 = (uint64_t *)((char *)__p[0] + 8 * LODWORD(__p[1]));
      while (1)
      {
        v220 = (void **)*v217;
        v575 = (void **)*v217;
        if (v602)
        {
          v221 = (v602 - 1) & ((v220 >> 4) ^ (v220 >> 9));
          v222 = (_QWORD *)(v601 + 16 * v221);
          v223 = (void **)*v222;
          if (v220 == (void **)*v222)
            goto LABEL_322;
          v224 = 0;
          v225 = 1;
          while (v223 != (void **)-4096)
          {
            if (v224)
              v226 = 0;
            else
              v226 = v223 == (void **)-8192;
            if (v226)
              v224 = v222;
            v227 = v221 + v225++;
            v221 = v227 & (v602 - 1);
            v222 = (_QWORD *)(v601 + 16 * v221);
            v223 = (void **)*v222;
            if (v220 == (void **)*v222)
              goto LABEL_322;
          }
          if (v224)
            v228 = v224;
          else
            v228 = v222;
        }
        else
        {
          v228 = 0;
        }
        v222 = sub_1C4DE3FA0(v550, (uint64_t)&v575, (uint64_t *)&v575, v228);
        *v222 = v575;
        *((_DWORD *)v222 + 2) = 0;
LABEL_322:
        v229 = *((_DWORD *)v222 + 2);
        v571[0] = 0;
        v230 = sub_1C5F5DA9C(v589, v590, v229, v26, v571);
        v231 = v571[0];
        if ((v230 & 1) == 0)
        {
          v232 = v590;
          if (4 * DWORD2(v589) + 4 >= 3 * v590)
          {
            v232 = 2 * v590;
          }
          else if (v590 + ~DWORD2(v589) - HIDWORD(v589) > v590 >> 3)
          {
            goto LABEL_325;
          }
          sub_1C5F5DB74(v544, v232);
          v571[0] = 0;
          sub_1C5F5DA9C(v589, v590, v229, v26, v571);
          v231 = v571[0];
LABEL_325:
          ++DWORD2(v589);
          if (*(_DWORD *)v231 != -1 || *(_DWORD *)(v231 + 4) != -1)
            --HIDWORD(v589);
          *(_DWORD *)v231 = v229;
          *(_DWORD *)(v231 + 4) = v26;
          *(_QWORD *)(v231 + 8) = 0;
          goto LABEL_328;
        }
        if (*(_QWORD *)(v571[0] + 8))
        {
          v27 = v552;
          goto LABEL_357;
        }
LABEL_328:
        v233 = *(_QWORD *)(*((_QWORD *)v576 + v26) + 64);
        v234 = sub_1C5F5A008((uint64_t)&v576, (uint64_t)v575);
        v235 = (uint64_t ***)*((_QWORD *)v576 + v26);
        if ((*((_BYTE *)v235 + 23) & 0x10) != 0)
        {
          v236 = ***v235;
          v237 = *(_QWORD *)(v236 + 152);
          v238 = *(unsigned int *)(v236 + 168);
          if (!(_DWORD)v238)
            goto LABEL_335;
          LODWORD(v239) = (v238 - 1) & ((v235 >> 4) ^ (v235 >> 9));
          v240 = (uint64_t ****)(v237 + 16 * v239);
          v241 = *v240;
          if (*v240 != v235)
          {
            v242 = 1;
            while (v241 != (uint64_t ***)-4096)
            {
              v243 = v239 + v242++;
              v239 = v243 & (v238 - 1);
              v241 = *(uint64_t ****)(v237 + 16 * v239);
              if (v241 == v235)
              {
                v240 = (uint64_t ****)(v237 + 16 * v239);
                goto LABEL_336;
              }
            }
LABEL_335:
            v240 = (uint64_t ****)(v237 + 16 * v238);
          }
LABEL_336:
          v244 = v240[1];
          v247 = (char *)*v244;
          v246 = (char *)(v244 + 2);
          v245 = v247;
          goto LABEL_337;
        }
        v245 = 0;
        v246 = &byte_1C871356D;
LABEL_337:
        v570 = 773;
        v567 = v246;
        v568 = v245;
        v569[0] = ".";
        v571[0] = &v567;
        v554 = v554 & 0xFFFFFFFF00000000 | v218;
        v572 = v554;
        v573 = 2050;
        v248 = (uint64_t *)v575[6];
        v249 = operator new(0x48uLL);
        v250 = v249;
        v249[1] = v233;
        v251 = (llvm::Value *)(v249 + 1);
        *v249 = 0;
        v249[2] = 0;
        v249[3] = 0x4000000000000053;
        *((_OWORD *)v249 + 2) = 0u;
        v252 = (char *)(v249 + 4);
        *((_OWORD *)v249 + 3) = 0u;
        *((_DWORD *)v249 + 16) = 0;
        if (v248)
        {
          v265 = v248[2];
          v249[6] = v265;
          *(_WORD *)(v265 + 18) &= ~0x8000u;
          if ((*((_BYTE *)v249 + 31) & 0x10) != 0)
          {
            v267 = *(_QWORD *)(v265 + 56);
            if (v267)
            {
              v268 = *(llvm::ValueSymbolTable **)(v267 + 104);
              if (v268)
                llvm::ValueSymbolTable::reinsertValue(v268, v251);
            }
          }
          v266 = *v248;
          v250[4] = *v248;
          v250[5] = v248;
          *(_QWORD *)(v266 + 8) = v252;
          *v248 = (uint64_t)v252;
        }
        *((_DWORD *)v250 + 17) = v234;
        llvm::Value::setName((uint64_t ***)v251, (uint64_t)v571);
        v253 = *((unsigned int *)v250 + 17);
        v254 = operator new(40 * v253);
        *v250 = v254;
        if ((_DWORD)v253)
        {
          v255 = &v254[4 * v253];
          do
          {
            *v254 = 0;
            v254[1] = 0;
            v254[2] = 0;
            v254[3] = v251;
            v254 += 4;
          }
          while (v254 != v255);
        }
        v256 = (uint64_t *)(v231 + 8);
        *(_QWORD *)(v231 + 8) = v251;
        if (!v592)
        {
          v264 = 0;
          v27 = v552;
LABEL_355:
          v258 = sub_1C5C553B8((uint64_t)&v591, (uint64_t)v256, v256, v264);
          *v258 = *v256;
          *((_DWORD *)v258 + 2) = 0;
          goto LABEL_356;
        }
        v257 = ((*v256 >> 4) ^ (*v256 >> 9)) & (v592 - 1);
        v258 = (_QWORD *)(v591 + 16 * v257);
        v259 = *v258;
        v27 = v552;
        if (*v256 != *v258)
        {
          v260 = 0;
          v261 = 1;
          while (v259 != -4096)
          {
            if (v260)
              v262 = 0;
            else
              v262 = v259 == -8192;
            if (v262)
              v260 = v258;
            v263 = v257 + v261++;
            v257 = v263 & (v592 - 1);
            v258 = (_QWORD *)(v591 + 16 * v257);
            v259 = *v258;
            if (*v256 == *v258)
              goto LABEL_356;
          }
          if (v260)
            v264 = v260;
          else
            v264 = v258;
          goto LABEL_355;
        }
LABEL_356:
        ++v218;
        *((_DWORD *)v258 + 2) = v27;
LABEL_357:
        if (++v217 == v219)
        {
          v217 = (uint64_t *)__p[0];
          goto LABEL_372;
        }
      }
    }
    v547 = (uint64_t)v579;
    v47 = v611;
    v48 = *(unsigned __int8 *)(*((_QWORD *)v611 - 8) + 16);
    v49 = *((_QWORD *)v611 + 5);
    LODWORD(v609) = 0;
    v50 = *(_QWORD *)(v28 + 8);
    if (!v50)
      goto LABEL_121;
    v51 = (char **)v581.i64[0];
    v546 = vextq_s8(v581, v581, 8uLL);
    v52 = 0xFFFFFFFFLL;
    while (2)
    {
      v53 = *(llvm::DbgVariableIntrinsic **)(v50 + 24);
      v50 = *(_QWORD *)(v50 + 8);
      if (v53 == v47)
        goto LABEL_91;
      if (v48 < 0x1C)
        goto LABEL_64;
      v54 = *((_QWORD *)v53 + 5);
      if (v54 != v49)
      {
        v55 = v52;
        if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v547, v49, v54))
        {
          v52 = v55;
          goto LABEL_64;
        }
        v78 = (_QWORD **)*((_QWORD *)v53 + 5);
        v79 = v609;
        if (v609 >= (unint64_t)HIDWORD(v609))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v610, v609 + 1, 8);
          v79 = v609;
        }
        *((_QWORD *)__src + v79) = v78;
        LODWORD(v609) = v609 + 1;
LABEL_90:
        v52 = v55;
        goto LABEL_91;
      }
      if ((_DWORD)v52 == -1)
        v52 = sub_1C5F5A138((uint64_t)&v564, (uint64_t)v47);
      v56 = v52;
      v207 = v52 > sub_1C5F5A138((uint64_t)&v564, (uint64_t)v53);
      v52 = v56;
      if (v207)
      {
        v57 = v609;
        if (v609 >= (unint64_t)HIDWORD(v609))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v610, v609 + 1, 8);
          v52 = v56;
          v57 = v609;
        }
        *((_QWORD *)__src + v57) = v49;
        LODWORD(v609) = v609 + 1;
        goto LABEL_91;
      }
LABEL_64:
      v58 = (llvm::Value *)*((_QWORD *)v47 - 8);
      v55 = v52;
      if (v58 == v53)
      {
        v58 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v53, v46);
        if (v51)
          goto LABEL_68;
      }
      else
      {
        if (!v51)
          goto LABEL_83;
LABEL_68:
        if ((*((_BYTE *)v53 + 23) & 0x20) != 0)
        {
          v59 = ***(_QWORD ***)v53;
          __p[0] = v53;
          v60 = *(_DWORD *)(v59 + 2496);
          if (v60)
          {
            v61 = *(_QWORD *)(v59 + 2480);
            v62 = v60 - 1;
            v63 = v62 & ((v53 >> 4) ^ (v53 >> 9));
            v64 = (_QWORD *)(v61 + 40 * v63);
            v65 = (_QWORD ***)*v64;
            if ((llvm::DbgVariableIntrinsic *)*v64 != v53)
            {
              v66 = 0;
              v67 = 1;
              while (v65 != (_QWORD ***)-4096)
              {
                if (v66)
                  v68 = 0;
                else
                  v68 = v65 == (_QWORD ***)-8192;
                if (v68)
                  v66 = v64;
                v69 = v63 + v67++;
                v63 = v69 & v62;
                v64 = (_QWORD *)(v61 + 40 * v63);
                v65 = (_QWORD ***)*v64;
                if ((llvm::DbgVariableIntrinsic *)*v64 == v53)
                  goto LABEL_79;
              }
              if (v66)
                v81 = v66;
              else
                v81 = v64;
LABEL_100:
              v64 = sub_1C541AB24(v59 + 2480, (uint64_t)__p, (uint64_t *)__p, v81);
              v82 = __p[0];
              v64[4] = 0;
              v64[3] = 0;
              *v64 = v82;
              v64[1] = v64 + 3;
              v64[2] = v25;
            }
LABEL_79:
            v70 = *((unsigned int *)v64 + 4);
            if ((_DWORD)v70)
            {
              v71 = (_QWORD *)(v64[1] + 8);
              v72 = 16 * v70;
              while (*((_DWORD *)v71 - 2) != 11)
              {
                v71 += 2;
                v72 -= 16;
                if (!v72)
                  goto LABEL_83;
              }
              if (*v71)
              {
                v80 = v53;
                if (!*((_QWORD *)v53 + 5))
                {
                  if (!v58 || *((unsigned __int8 *)v58 + 16) < 0x1Cu || (v80 = v58, !*((_QWORD *)v58 + 5)))
                    v80 = 0;
                }
                *(int8x16_t *)__p = v546;
                v623 = (uint64_t)v80;
                v624 = (_QWORD *)v547;
                v625 = 0;
                v626 = 1;
                if ((sub_1C4F84D74((uint64_t)v58, 0, (uint64_t)__p) & 1) == 0)
                  sub_1C5F5A378(v51, (_DWORD **)v53);
              }
            }
            goto LABEL_83;
          }
          v81 = 0;
          goto LABEL_100;
        }
      }
LABEL_83:
      llvm::Value::doRAUW(v53, v58, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v53 + 5) + 40, (uint64_t ***)v53);
      v73 = (_QWORD **)*((_QWORD *)v53 + 3);
      v74 = (_QWORD *)*((_QWORD *)v53 + 4);
      *v74 = v73;
      v73[1] = v74;
      *((_QWORD *)v53 + 3) = 0;
      *((_QWORD *)v53 + 4) = 0;
      llvm::Value::deleteValue(v53);
      if (!v566)
        goto LABEL_90;
      LODWORD(v75) = (v566 - 1) & ((v53 >> 4) ^ (v53 >> 9));
      v76 = (llvm::DbgVariableIntrinsic **)&v564[2 * v75];
      v77 = *v76;
      v52 = v55;
      if (v53 == *v76)
      {
LABEL_85:
        *v76 = (llvm::DbgVariableIntrinsic *)-8192;
        v565 = vadd_s32(v565, (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        v83 = 1;
        while (v77 != (llvm::DbgVariableIntrinsic *)-4096)
        {
          v84 = v75 + v83++;
          v75 = v84 & (v566 - 1);
          v77 = (llvm::DbgVariableIntrinsic *)v564[2 * v75];
          if (v53 == v77)
          {
            v76 = (llvm::DbgVariableIntrinsic **)&v564[2 * v75];
            goto LABEL_85;
          }
        }
      }
LABEL_91:
      if (v50)
        continue;
      break;
    }
    if ((_DWORD)v609)
      goto LABEL_111;
LABEL_121:
    v27 = v552;
    if ((_DWORD)v615)
    {
      v94 = (uint64_t ****)v614;
      v95 = 8 * v615;
      do
      {
        v96 = *v94;
        if (*((_DWORD *)*(*v94 - 4) + 9) == 58)
        {
          v97 = (_QWORD *)v96[-4 * (*((_DWORD *)v96 + 5) & 0x7FFFFFF) + 8][3][3];
          if (((v96[-4 * (*((_DWORD *)v96 + 5) & 0x7FFFFFF) + 8][3][4] - (_QWORD)v97) & 0x7FFFFFFF8) != 0
            && *v97 == 6)
          {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v96[5] + 5), *v94);
            v98 = v96[3];
            v99 = v96[4];
            *v99 = (uint64_t *)v98;
            v98[1] = (uint64_t *)v99;
            v96[3] = 0;
            v96[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v96);
          }
        }
        else
        {
          llvm::DIBuilder::DIBuilder((uint64_t)__p, *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v28 + 40) + 56) + 40), 0, 0);
          llvm::ConvertDebugDeclareToDebugValue((llvm *)v96, v611, (llvm::StoreInst *)__p, v100);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v96[5] + 5), v96);
          v101 = v96[3];
          v102 = v96[4];
          *v102 = (uint64_t *)v101;
          v101[1] = (uint64_t *)v102;
          v96[3] = 0;
          v96[4] = 0;
          llvm::Value::deleteValue((llvm::Value *)v96);
          sub_1C50F023C((uint64_t)__p);
        }
        ++v94;
        v95 -= 8;
      }
      while (v95);
    }
    v103 = v611;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v611 + 5) + 40, (uint64_t ***)v611);
    v104 = *((_QWORD *)v103 + 3);
    v105 = (_QWORD *)*((_QWORD *)v103 + 4);
    *v105 = v104;
    *(_QWORD *)(v104 + 8) = v105;
    *((_QWORD *)v103 + 3) = 0;
    *((_QWORD *)v103 + 4) = 0;
    llvm::Value::deleteValue(v103);
    if (v566)
    {
      LODWORD(v106) = ((v611 >> 4) ^ (v611 >> 9)) & (v566 - 1);
      v107 = (llvm::DbgVariableIntrinsic **)&v564[2 * v106];
      v108 = *v107;
      if (v611 == *v107)
      {
LABEL_132:
        *v107 = (llvm::DbgVariableIntrinsic *)-8192;
        v565 = vadd_s32(v565, (int32x2_t)0x1FFFFFFFFLL);
      }
      else
      {
        v269 = 1;
        while (v108 != (llvm::DbgVariableIntrinsic *)-4096)
        {
          v270 = v106 + v269++;
          v106 = v270 & (v566 - 1);
          v108 = (llvm::DbgVariableIntrinsic *)v564[2 * v106];
          if (v611 == v108)
          {
            v107 = (llvm::DbgVariableIntrinsic **)&v564[2 * v106];
            goto LABEL_132;
          }
        }
      }
    }
LABEL_133:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v28 + 40) + 40, (uint64_t ***)v28);
    v109 = *(_QWORD *)(v28 + 24);
    v110 = *(_QWORD **)(v28 + 32);
    *v110 = v109;
    *(_QWORD *)(v109 + 8) = v110;
    *(_QWORD *)(v28 + 24) = 0;
    *(_QWORD *)(v28 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v28);
LABEL_134:
    *((_QWORD *)v576 + v26) = *((_QWORD *)v577 - 1);
    v112 = v577 - 8;
    v577 -= 8;
    --v27;
LABEL_135:
    v13 = v576;
    v26 = ++v27;
  }
  while (v27 != (v112 - (_BYTE *)v576) >> 3);
  if (v576 == v112)
    goto LABEL_823;
  if (v565.i32[0])
  {
    v271 = v566;
    if (v566 > 4 * v565.i32[0] && v566 >= 0x41)
    {
      v519 = 1 << (33 - __clz(v565.i32[0] - 1));
      if (v519 <= 64)
        v272 = 64;
      else
        v272 = v519;
      goto LABEL_849;
    }
LABEL_391:
    if (v271)
    {
      v273 = v564;
      v274 = 16 * v271;
      do
      {
        *v273 = -4096;
        v273 += 2;
        v274 -= 16;
      }
      while (v274);
    }
    v565 = 0;
    goto LABEL_395;
  }
  if (!v565.i32[1])
    goto LABEL_395;
  v271 = v566;
  if (v566 <= 0x40)
    goto LABEL_391;
  v272 = 0;
LABEL_849:
  if (v272 == v271)
  {
    v565 = 0;
    v520 = 16 * v271;
    v521 = v564;
    do
    {
      *v521 = -4096;
      v521 += 2;
      v520 -= 16;
    }
    while (v520);
  }
  else
  {
    MEMORY[0x1CAA32FB4](v564, 8);
    if (v272)
    {
      v522 = (4 * v272 / 3u + 1) | ((unint64_t)(4 * v272 / 3u + 1) >> 1);
      v523 = v522 | (v522 >> 2) | ((v522 | (v522 >> 2)) >> 4);
      v566 = (((v523 | (v523 >> 8)) >> 16) | v523 | (v523 >> 8)) + 1;
      v524 = operator new(16 * v566, (std::align_val_t)8uLL);
      v564 = v524;
      v565 = 0;
      if (v566)
      {
        v525 = 16 * v566;
        do
        {
          *v524 = -4096;
          v524 += 2;
          v525 -= 16;
        }
        while (v525);
      }
    }
    else
    {
      v565 = 0;
      v564 = 0;
      v566 = 0;
    }
  }
LABEL_395:
  v275 = v577;
  v276 = v576;
  v277 = v577 - (_BYTE *)v576;
  v278 = (v577 - (_BYTE *)v576) >> 3;
  if (v577 != v576)
  {
    if ((v277 & 0x8000000000000000) == 0)
    {
      v279 = (char *)operator new(v577 - (_BYTE *)v576);
      v280 = &v279[8 * v278];
      bzero(v279, v277 & 0xFFFFFFFFFFFFFFF8);
      v281 = &v279[v277 & 0xFFFFFFFFFFFFFFF8];
      goto LABEL_399;
    }
LABEL_877:
    abort();
  }
  v280 = 0;
  v281 = 0;
  v279 = 0;
LABEL_399:
  if ((v277 & 0x7FFFFFFF8) != 0)
  {
    v282 = 0;
    v283 = (v277 >> 3);
    do
    {
      *(_QWORD *)&v279[8 * v282] = llvm::UndefValue::get(*(llvm::UndefValue **)(*((_QWORD *)v576 + v282) + 64), v111);
      ++v282;
    }
    while (v283 != v282);
    v275 = v577;
    v276 = v576;
    v277 = v577 - (_BYTE *)v576;
    v278 = (v577 - (_BYTE *)v576) >> 3;
  }
  if (v275 == v276)
  {
    v285 = 0;
    v284 = 0;
  }
  else
  {
    if ((v277 & 0x8000000000000000) != 0)
      goto LABEL_877;
    v284 = (char *)operator new(v277);
    bzero(v284, 8 * v278);
    v285 = &v284[8 * v278];
  }
  v14 = v569;
  v568 = 0;
  v567 = 0;
  v569[0] = 0;
  v286 = *(_QWORD *)(v545 + 80);
  if (v286)
    v287 = v286 - 24;
  else
    v287 = 0;
  v625 = v569;
  v288 = operator new(0x40uLL);
  __p[0] = v288;
  __p[1] = v288;
  v289 = v288 + 8;
  v624 = v288 + 8;
  v572 = 0;
  v571[0] = 0;
  v571[1] = 0;
  *v288 = v287;
  v288[1] = 0;
  v288[2] = v279;
  v288[3] = v281;
  v288[4] = v280;
  v288[5] = v284;
  v288[6] = v285;
  v288[7] = v285;
  v618[0] = 0;
  v617[0] = 0;
  v617[1] = 0;
  v555 = (llvm::PHINode *)v617;
  sub_1C5F60160((void ***)&v555);
  v623 = (uint64_t)v289;
  sub_1C5EE41E0((uint64_t *)&v567, __p);
  v290 = v568;
  v291 = (char *)__p[1];
  if ((void *)v623 != __p[1])
  {
    v292 = (char *)(v623 - 24);
    do
    {
      v617[0] = v292;
      sub_1C5F60160((void ***)v617);
      v293 = (void *)*((_QWORD *)v292 - 3);
      if (v293)
      {
        *((_QWORD *)v292 - 2) = v293;
        operator delete(v293);
      }
      v294 = v292 - 40;
      v292 -= 64;
    }
    while (v294 != v291);
  }
  if (__p[0])
    operator delete(__p[0]);
  v568 = v290;
  v554 = (unint64_t)&v625;
  while (2)
  {
    *(_OWORD *)v617 = *((_OWORD *)v290 - 4);
    v618[1] = 0;
    v619 = 0;
    v618[0] = 0;
    *(_OWORD *)v618 = *((_OWORD *)v290 - 3);
    v619 = *((_QWORD *)v290 - 4);
    *((_QWORD *)v290 - 6) = 0;
    *((_QWORD *)v290 - 5) = 0;
    *((_QWORD *)v290 - 4) = 0;
    v620 = 0uLL;
    v621 = 0;
    v620 = *(_OWORD *)(v290 - 24);
    v621 = *((_QWORD *)v290 - 1);
    *((_QWORD *)v290 - 3) = 0;
    *((_QWORD *)v290 - 2) = 0;
    *((_QWORD *)v290 - 1) = 0;
    m = (unint64_t)v568;
    __p[0] = v568 - 24;
    sub_1C5F60160((void ***)__p);
    v296 = *(void **)(m - 48);
    if (v296)
    {
      *(_QWORD *)(m - 40) = v296;
      operator delete(v296);
    }
    v568 = (char *)(m - 64);
    v16 = (uint64_t)v617[0];
    v10 = v617[1];
    while (2)
    {
      v297 = *(_QWORD *)(v16 + 48);
      v298 = v297 - 24;
      if (!v297)
        v298 = 0;
      v299 = *(unsigned __int8 *)(v298 + 16);
      if (v299 != 83)
        v298 = 0;
      v555 = (llvm::PHINode *)v298;
      if (v297 && v299 == 83 && v592)
      {
        v300 = (v592 - 1) & ((v298 >> 4) ^ (v298 >> 9));
        v301 = *(_QWORD *)(v591 + 16 * v300);
        if (v298 == v301)
        {
LABEL_429:
          v15 = *(unsigned int *)(v298 + 20);
          v302 = (_QWORD *)v10[5];
          if (v302 == v10 + 5)
          {
LABEL_492:
            v305 = 0;
          }
          else
          {
            if (v302)
              v18 = (char *)(v302 - 3);
            else
              v18 = 0;
            v303 = v18[16];
            v19 = (v303 - 29);
            if (v303 != 30)
            {
              v304 = 2;
              v305 = 0;
              switch(v18[16])
              {
                case 29:
                case 34:
                case 35:
                  goto LABEL_443;
                case 30:
LABEL_881:
                  __break(1u);
                  goto LABEL_882;
                case 31:
                  v304 = (*((_DWORD *)v18 + 5) >> 1) & 0x3FFFFFF;
                  goto LABEL_491;
                case 32:
                case 38:
                  v304 = (*((_DWORD *)v18 + 5) & 0x7FFFFFF) - 1;
                  goto LABEL_491;
                case 33:
                  goto LABEL_437;
                case 36:
                  v304 = *((_WORD *)v18 + 9) & 1;
                  goto LABEL_491;
                case 37:
                  v304 = 1;
                  goto LABEL_437;
                case 39:
                  v304 = *((_DWORD *)v18 + 20) + 1;
LABEL_491:
                  if (!v304)
                    goto LABEL_492;
                  goto LABEL_437;
                default:
                  goto LABEL_492;
              }
            }
            if ((*((_DWORD *)v18 + 5) & 0x7FFFFFF) == 3)
              v304 = 2;
            else
              v304 = 1;
LABEL_437:
            LODWORD(v305) = 0;
            for (k = 0; k != v304; ++k)
            {
              if (llvm::Instruction::getSuccessor((llvm::Instruction *)v18, k) == v16)
                v305 = (v305 + 1);
              else
                v305 = v305;
            }
            v297 = *(_QWORD *)(v16 + 48);
          }
LABEL_443:
          while (v592)
          {
            v307 = (const llvm::DILocation **)v555;
            v308 = ((v555 >> 4) ^ (v555 >> 9)) & (v592 - 1);
            v309 = (llvm::PHINode **)(v591 + 16 * v308);
            v310 = *v309;
            if (v555 != *v309)
            {
              v311 = 0;
              v312 = 1;
              while (v310 != (llvm::PHINode *)-4096)
              {
                if (v311)
                  v313 = 0;
                else
                  v313 = v310 == (llvm::PHINode *)-8192;
                if (v313)
                  v311 = v309;
                v314 = v308 + v312++;
                v308 = v314 & (v592 - 1);
                v309 = (llvm::PHINode **)(v591 + 16 * v308);
                v310 = *v309;
                if (v555 == *v309)
                  goto LABEL_458;
              }
              if (v311)
                v315 = v311;
              else
                v315 = v309;
              goto LABEL_457;
            }
LABEL_458:
            v316 = *((unsigned int *)v309 + 2);
            v317 = *(llvm::DILocation **)(v620 + 8 * v316);
            v574 = v317;
            v318 = (llvm::PHINode *)v307;
            if (v317)
            {
              llvm::MetadataTracking::track((uint64_t)&v574, (unsigned __int8 *)v317, 2);
              v318 = v555;
            }
            if ((*((_DWORD *)v318 + 5) & 0x7FFFFFF) != 0)
            {
              llvm::Instruction::applyMergedLocation((llvm::Instruction *)v307, v307[6], v574);
            }
            else
            {
              __p[0] = v574;
              if (v574)
                llvm::MetadataTracking::track((uint64_t)__p, (unsigned __int8 *)v574, 2);
              v319 = (unsigned __int8 **)(v307 + 6);
              if (__p == (void **)v319)
              {
                if (__p[0])
                  llvm::MetadataTracking::untrack((uint64_t)__p, (unsigned __int8 *)__p[0]);
              }
              else
              {
                if (*v319)
                  llvm::MetadataTracking::untrack((uint64_t)v319, *v319);
                v320 = (unsigned __int8 *)__p[0];
                *v319 = (unsigned __int8 *)__p[0];
                if (v320)
                  llvm::MetadataTracking::retrack((uint64_t)__p, v320, (uint64_t)v319);
              }
            }
            if (v574)
              llvm::MetadataTracking::untrack((uint64_t)&v574, (unsigned __int8 *)v574);
            for (m = v305; (_DWORD)m; m = (m - 1))
              sub_1C477667C(v555, *((_QWORD *)v618[0] + v316), (uint64_t)v10);
            *((_QWORD *)v618[0] + v316) = v555;
            v321 = (char *)v593 + 24 * v316;
            v322 = *((unsigned int *)v321 + 2);
            if ((_DWORD)v322)
            {
              v323 = *(llvm ***)v321;
              v324 = 8 * v322;
              do
              {
                if (*(_DWORD *)(*((_QWORD *)*v323 - 4) + 36) != 58)
                  llvm::ConvertDebugDeclareToDebugValue(*v323, v555, (llvm::PHINode *)v580, v295);
                ++v323;
                v324 -= 8;
              }
              while (v324);
            }
            v297 = *(_QWORD *)(v297 + 8);
            v325 = v297 - 24;
            if (!v297)
              v325 = 0;
            v326 = *(unsigned __int8 *)(v325 + 16);
            if (v326 != 83)
              v325 = 0;
            v555 = (llvm::PHINode *)v325;
            if (!v297 || v326 != 83 || ((*(_DWORD *)(v325 + 20) ^ v15) & 0x7FFFFFF) != 0)
              goto LABEL_497;
          }
          v315 = 0;
LABEL_457:
          v309 = (llvm::PHINode **)sub_1C5C553B8((uint64_t)&v591, (uint64_t)&v555, (uint64_t *)&v555, v315);
          *v309 = v555;
          *((_DWORD *)v309 + 2) = 0;
          v307 = (const llvm::DILocation **)v555;
          goto LABEL_458;
        }
        v327 = 1;
        while (v301 != -4096)
        {
          v328 = v300 + v327++;
          v300 = v328 & (v592 - 1);
          v301 = *(_QWORD *)(v591 + 16 * v300);
          if (v298 == v301)
            goto LABEL_429;
        }
      }
LABEL_497:
      sub_1C4774094(v553, v16);
      if (!v330)
        break;
      v15 = *(_QWORD *)(v16 + 48);
      v331 = (llvm::Value *)(v15 - 24);
      v332 = v15 == 0;
      if (v15)
        v333 = v15 - 24;
      else
        v333 = 0;
      for (n = *(unsigned __int8 *)(v333 + 16); (n - 29) >= 0xB; n = *(unsigned __int8 *)(v375 + 16))
      {
        v15 = *(_QWORD *)(v15 + 8);
        if (n == 60)
          v352 = v331;
        else
          v352 = 0;
        if (n != 60 || v332)
        {
          v68 = n == 61;
          v374 = n != 61;
          if (v68)
            v352 = v331;
          else
            v352 = 0;
          if (!v374 && !v332)
          {
            v376 = *((_QWORD *)v352 - 4);
            if (v376)
            {
              if (*(_BYTE *)(v376 + 16) == 59 && v588)
              {
                v377 = (v588 - 1) & ((v376 >> 4) ^ (v376 >> 9));
                v378 = *(_QWORD *)(v587 + 16 * v377);
                if (v376 != v378)
                {
                  v393 = 1;
                  while (v378 != -4096)
                  {
                    v394 = v377 + v393++;
                    v377 = v394 & (v588 - 1);
                    v378 = *(_QWORD *)(v587 + 16 * v377);
                    if (v376 == v378)
                      goto LABEL_581;
                  }
                  goto LABEL_572;
                }
LABEL_581:
                if ((_DWORD)v377 != v588)
                {
                  v379 = v587 + 16 * v377;
                  v381 = *(_DWORD *)(v379 + 8);
                  v380 = (unsigned int *)(v379 + 8);
                  *((_QWORD *)v618[0] + v381) = *((_QWORD *)v352 - 8);
                  m = (unint64_t)v352 + 48;
                  v382 = (unsigned __int8 **)(v620 + 8 * v381);
                  if ((unsigned __int8 **)((char *)v352 + 48) != v382)
                  {
                    if (*v382)
                      llvm::MetadataTracking::untrack((uint64_t)v382, *v382);
                    v383 = *(unsigned __int8 **)m;
                    *v382 = *(unsigned __int8 **)m;
                    if (v383)
                      llvm::MetadataTracking::track((uint64_t)v382, v383, 2);
                  }
                  v384 = (char *)v593 + 24 * *v380;
                  v385 = *((unsigned int *)v384 + 2);
                  if ((_DWORD)v385)
                  {
                    v386 = *(llvm ***)v384;
                    v387 = 8 * v385;
                    do
                    {
                      if (*(_DWORD *)(*((_QWORD *)*v386 - 4) + 36) != 58)
                        llvm::ConvertDebugDeclareToDebugValue(*v386, v352, (llvm::StoreInst *)v580, v329);
                      ++v386;
                      v387 -= 8;
                    }
                    while (v387);
                  }
                  goto LABEL_567;
                }
              }
            }
          }
        }
        else
        {
          v353 = *((_QWORD *)v352 - 4);
          if (v353 && *(_BYTE *)(v353 + 16) == 59 && v588)
          {
            v354 = (v588 - 1) & ((v353 >> 4) ^ (v353 >> 9));
            v355 = *(_QWORD *)(v587 + 16 * v354);
            if (v353 != v355)
            {
              v391 = 1;
              while (v355 != -4096)
              {
                v392 = v354 + v391++;
                v354 = v392 & (v588 - 1);
                v355 = *(_QWORD *)(v587 + 16 * v354);
                if (v353 == v355)
                  goto LABEL_549;
              }
              goto LABEL_572;
            }
LABEL_549:
            if ((_DWORD)v354 != v588)
            {
              v356 = *((_QWORD *)v618[0] + *(unsigned int *)(v587 + 16 * v354 + 8));
              if (v581.i64[0] && (*((_BYTE *)v352 + 23) & 0x20) != 0)
              {
                v357 = ***(_QWORD ***)v352;
                __p[0] = v352;
                v358 = *(_DWORD *)(v357 + 2496);
                if (!v358)
                {
                  v389 = 0;
                  goto LABEL_600;
                }
                v359 = *(_QWORD *)(v357 + 2480);
                v360 = v358 - 1;
                v361 = v360 & ((v352 >> 4) ^ (v352 >> 9));
                v362 = (_QWORD *)(v359 + 40 * v361);
                v363 = (_QWORD ***)*v362;
                if ((llvm::Value *)*v362 != v352)
                {
                  v364 = 0;
                  v365 = 1;
                  while (v363 != (_QWORD ***)-4096)
                  {
                    if (v364)
                      v366 = 0;
                    else
                      v366 = v363 == (_QWORD ***)-8192;
                    if (v366)
                      v364 = v362;
                    v367 = v361 + v365++;
                    v361 = v367 & v360;
                    v362 = (_QWORD *)(v359 + 40 * v361);
                    v363 = (_QWORD ***)*v362;
                    if ((llvm::Value *)*v362 == v352)
                      goto LABEL_562;
                  }
                  if (v364)
                    v389 = v364;
                  else
                    v389 = v362;
LABEL_600:
                  v362 = sub_1C541AB24(v357 + 2480, (uint64_t)__p, (uint64_t *)__p, v389);
                  v390 = __p[0];
                  v362[4] = 0;
                  v362[3] = 0;
                  *v362 = v390;
                  v362[1] = v362 + 3;
                  v362[2] = v25;
                }
LABEL_562:
                v368 = *((unsigned int *)v362 + 4);
                if ((_DWORD)v368)
                {
                  v369 = (_QWORD *)(v362[1] + 8);
                  v370 = 16 * v368;
                  while (*((_DWORD *)v369 - 2) != 11)
                  {
                    v369 += 2;
                    v370 -= 16;
                    if (!v370)
                      goto LABEL_566;
                  }
                  if (*v369)
                  {
                    v388 = (uint64_t)v331;
                    if (!*((_QWORD *)v352 + 5))
                    {
                      if (!v356 || *(unsigned __int8 *)(v356 + 16) < 0x1Cu || (v388 = v356, !*(_QWORD *)(v356 + 40)))
                        v388 = 0;
                    }
                    *(int8x16_t *)__p = vextq_s8(v581, v581, 8uLL);
                    v623 = v388;
                    v624 = v579;
                    v625 = 0;
                    v626 = 1;
                    if ((sub_1C4F84D74(v356, 0, (uint64_t)__p) & 1) == 0)
                      sub_1C5F5A378((char **)v581.i64[0], (_DWORD **)v352);
                  }
                }
              }
LABEL_566:
              llvm::Value::doRAUW(v352, (llvm::Value *)v356, (llvm::Value *)1);
LABEL_567:
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v16 + 40, (uint64_t ***)v352);
              v371 = (_QWORD **)*((_QWORD *)v352 + 3);
              v372 = (_QWORD *)*((_QWORD *)v352 + 4);
              v373 = (_QWORD *)((char *)v352 + 24);
              *v372 = v371;
              v371[1] = v372;
              *v373 = 0;
              v373[1] = 0;
              llvm::Value::deleteValue(v331);
            }
          }
        }
LABEL_572:
        v331 = (llvm::Value *)(v15 - 24);
        v332 = v15 == 0;
        if (v15)
          v375 = v15 - 24;
        else
          v375 = 0;
      }
      v335 = *(_QWORD *)(v16 + 40);
      if (v335 != v16 + 40)
      {
        if (v335)
          v18 = (char *)(v335 - 24);
        else
          v18 = 0;
        v336 = v18[16];
        v19 = (v336 - 29);
        if (v19 >= 0xB)
          v10 = 0;
        else
          v10 = v18;
        if (v336 != 30)
        {
          v337 = 2;
          switch(v18[16])
          {
            case 30:
              goto LABEL_881;
            case 31:
              v337 = (*((_DWORD *)v18 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_616;
            case 32:
            case 38:
              v337 = (*((_DWORD *)v18 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_616;
            case 33:
              goto LABEL_513;
            case 36:
              v337 = *((_WORD *)v18 + 9) & 1;
              goto LABEL_616;
            case 37:
              v337 = 1;
              goto LABEL_513;
            case 39:
              v337 = *((_DWORD *)v18 + 20) + 1;
LABEL_616:
              if (!v337)
                goto LABEL_626;
              goto LABEL_513;
            default:
              goto LABEL_626;
          }
        }
        if ((*((_DWORD *)v18 + 5) & 0x7FFFFFF) == 3)
          v337 = 2;
        else
          v337 = 1;
LABEL_513:
        __p[0] = &v625;
        __p[1] = &v625;
        v623 = 8;
        LODWORD(v624) = 0;
        Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v18, 0);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)__p, Successor);
        v339 = llvm::Instruction::getSuccessor((llvm::Instruction *)v18, 0);
        if (v337 != 1)
        {
          for (ii = 1; ii != v337; ++ii)
          {
            v341 = llvm::Instruction::getSuccessor((llvm::Instruction *)v10, ii);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)__p, v341);
            if (v342)
            {
              v343 = llvm::Instruction::getSuccessor((llvm::Instruction *)v10, ii);
              v344 = v568;
              if ((unint64_t)v568 >= v569[0])
              {
                v346 = (v568 - (_BYTE *)v567) >> 6;
                if ((unint64_t)(v346 + 1) >> 58)
                  goto LABEL_877;
                v347 = (uint64_t)(v569[0] - (_QWORD)v567) >> 5;
                if (v347 <= v346 + 1)
                  v347 = v346 + 1;
                if (v569[0] - (_QWORD)v567 >= 0x7FFFFFFFFFFFFFC0uLL)
                  m = 0x3FFFFFFFFFFFFFFLL;
                else
                  m = v347;
                v559[0] = v569;
                if (m)
                {
                  if (m >> 58)
                    sub_1C4764EE4();
                  v348 = (llvm::PHINode *)operator new(m << 6);
                }
                else
                {
                  v348 = 0;
                }
                v555 = v348;
                v556 = (llvm::PHINode *)((char *)v348 + 64 * v346);
                v557 = (uint64_t)v556;
                v558 = (char *)v348 + 64 * m;
                sub_1C5F5DCB8(v556, v343, v16, (_BYTE *)v618[0], (_BYTE *)v618[1], v620, *((uint64_t *)&v620 + 1));
                v557 += 64;
                sub_1C5EE41E0((uint64_t *)&v567, &v555);
                v345 = v568;
                v349 = v556;
                if ((llvm::PHINode *)v557 != v556)
                {
                  m = v557 - 24;
                  do
                  {
                    v575 = (void **)m;
                    sub_1C5F60160(&v575);
                    v350 = *(void **)(m - 24);
                    if (v350)
                    {
                      *(_QWORD *)(m - 16) = v350;
                      operator delete(v350);
                    }
                    v351 = (void **)(m - 40);
                    m -= 64;
                  }
                  while (v351 != (void **)v349);
                }
                if (v555)
                  operator delete(v555);
              }
              else
              {
                sub_1C5F5DCB8(v568, v343, v16, (_BYTE *)v618[0], (_BYTE *)v618[1], v620, *((uint64_t *)&v620 + 1));
                v345 = v344 + 64;
              }
              v568 = v345;
            }
          }
        }
        if (__p[1] != __p[0])
          free(__p[1]);
        v10 = (_QWORD *)v16;
        v16 = v339;
        continue;
      }
      break;
    }
LABEL_626:
    __p[0] = &v620;
    sub_1C5F60160((void ***)__p);
    if (v618[0])
    {
      v618[1] = v618[0];
      operator delete(v618[0]);
    }
    v290 = v568;
    if (v567 != v568)
      continue;
    break;
  }
  if (__b == v596)
  {
LABEL_630:
    *v542 = 0;
  }
  else
  {
    if (v598 < 0x21 || 4 * (HIDWORD(v598) - v599) >= v598)
    {
      memset(__b, 255, 8 * v598);
      goto LABEL_630;
    }
    free(__b);
    v530 = 1 << (33 - __clz(HIDWORD(v598) - v599 - 1));
    if ((HIDWORD(v598) - v599) <= 0x10)
      v531 = 32;
    else
      v531 = v530;
    LODWORD(v598) = v531;
    *v542 = 0;
    v532 = malloc_type_malloc(8 * v531, 0x4065EBACuLL);
    if (!v532)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    __b = v532;
    memset(v532, 255, 8 * v598);
  }
  v398 = (char *)v576;
  v399 = v577;
  while (v398 != v399)
  {
    v400 = *(_QWORD *)v398;
    if (*(_QWORD *)(*(_QWORD *)v398 + 8))
    {
      v401 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v400, v395);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v400, v401, (llvm::Value *)1);
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v400 + 40) + 40, (uint64_t ***)v400);
    v402 = *(_QWORD *)(v400 + 24);
    v403 = *(_QWORD **)(v400 + 32);
    *v403 = v402;
    *(_QWORD *)(v402 + 8) = v403;
    *(_QWORD *)(v400 + 24) = 0;
    *(_QWORD *)(v400 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v400);
    v398 += 8;
  }
  if ((_DWORD)v594)
  {
    v404 = (uint64_t *****)v593;
    v405 = (uint64_t *****)((char *)v593 + 24 * v594);
    do
    {
      v406 = *((unsigned int *)v404 + 2);
      if ((_DWORD)v406)
      {
        v407 = *v404;
        v408 = 8 * v406;
        do
        {
          v409 = *v407;
          if (*((_DWORD *)*(*v407 - 4) + 9) != 58
            || (v410 = (_QWORD *)v409[-4 * (*((_DWORD *)v409 + 5) & 0x7FFFFFF) + 8][3][3],
                ((v409[-4 * (*((_DWORD *)v409 + 5) & 0x7FFFFFF) + 8][3][4] - (_QWORD)v410) & 0x7FFFFFFF8) != 0)
            && *v410 == 6)
          {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v409[5] + 5), *v407);
            v411 = v409[3];
            v412 = v409[4];
            *v412 = (uint64_t *)v411;
            v411[1] = (uint64_t *)v412;
            v409[3] = 0;
            v409[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v409);
          }
          ++v407;
          v408 -= 8;
        }
        while (v408);
      }
      v404 += 3;
    }
    while (v404 != v405);
  }
  while (2)
  {
    v413 = DWORD2(v589);
    v414 = v589;
    v415 = v590;
    v416 = (_DWORD *)(v589 + 16 * v590);
    v417 = v590;
    v418 = v416;
    if (DWORD2(v589))
    {
      if (v590)
      {
        v419 = 16 * v590;
        v418 = (_DWORD *)v589;
        do
        {
          v420 = v418[1];
          if ((*v418 != -1 || v420 != -1) && (*v418 != -2 || v420 != -2))
          {
            v417 = v590;
            goto LABEL_661;
          }
          v418 += 4;
          v419 -= 16;
        }
        while (v419);
        v417 = v590;
        v418 = (_DWORD *)(v589 + 16 * v590);
      }
      else
      {
        v417 = 0;
        v418 = (_DWORD *)v589;
      }
    }
LABEL_661:
    v423 = (_DWORD *)(v589 + 16 * v417);
    if (v418 == v423)
      goto LABEL_706;
    v424 = 0;
    while (2)
    {
      v425 = *((_QWORD *)v418 + 1);
      v426 = *(_DWORD *)(v425 + 20);
      if ((v426 & 0x40000000) != 0)
      {
        v428 = *(uint64_t **)(v425 - 8);
        v427 = v426 & 0x7FFFFFF;
      }
      else
      {
        v427 = v426 & 0x7FFFFFF;
        v428 = (uint64_t *)(v425 - 32 * v427);
      }
      __p[0] = &v623;
      __p[1] = (void *)0x800000000;
      if (v427 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&v623, v427, 8);
        v429 = (int)__p[1];
        v431 = (uint64_t *)__p[0];
        v430 = LODWORD(__p[1]);
        goto LABEL_668;
      }
      v429 = 0;
      if (v427)
      {
        v430 = 0;
        v431 = &v623;
LABEL_668:
        v432 = 32 * v427;
        v433 = &v431[v430];
        do
        {
          v434 = *v428;
          v428 += 4;
          *v433++ = v434;
          v432 -= 32;
        }
        while (v432);
        v435 = (uint64_t *)__p[0];
      }
      else
      {
        v435 = &v623;
      }
      LODWORD(__p[1]) = v429 + v427;
      v436 = llvm::SimplifyInstructionWithOperands((llvm *)v425, (uint64_t)v435, (v429 + v427), v543, v396, v397);
      if (__p[0] == &v623)
      {
        if (!v436)
          goto LABEL_690;
LABEL_674:
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v425, v436, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v425 + 40) + 40, (uint64_t ***)v425);
        v437 = *(_QWORD *)(v425 + 24);
        v438 = *(_QWORD **)(v425 + 32);
        *v438 = v437;
        *(_QWORD *)(v437 + 8) = v438;
        *(_QWORD *)(v425 + 24) = 0;
        *(_QWORD *)(v425 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v425);
        v439 = v416;
        if (v418 + 4 != v416)
        {
          v439 = v418 + 4;
          while (1)
          {
            v440 = v439[1];
            if ((*v439 != -1 || v440 != -1) && (*v439 != -2 || v440 != -2))
              break;
            v439 += 4;
            if (v439 == v416)
            {
              v439 = v416;
              break;
            }
          }
        }
        *(_QWORD *)v418 = 0x100000001;
        *((int32x2_t *)&v589 + 1) = vadd_s32(*(int32x2_t *)((char *)&v589 + 8), (int32x2_t)0x1FFFFFFFFLL);
        v424 = 1;
        v418 = v439;
      }
      else
      {
        free(__p[0]);
        if (v436)
          goto LABEL_674;
LABEL_690:
        while (1)
        {
          v418 += 4;
          if (v418 == v416)
            break;
          v443 = v418[1];
          if ((*v418 != -1 || v443 != -1) && (*v418 != -2 || v443 != -2))
            goto LABEL_701;
        }
        v418 = v416;
      }
LABEL_701:
      if (v418 != v423)
        continue;
      break;
    }
    if ((v424 & 1) != 0)
      continue;
    break;
  }
  v413 = DWORD2(v589);
  v414 = v589;
  v415 = v590;
LABEL_706:
  v446 = v414 + 16 * v415;
  if (v413)
  {
    if (v415)
    {
      v447 = 16 * v415;
      v448 = v414;
      while (1)
      {
        v449 = *(_DWORD *)(v448 + 4);
        if ((*(_DWORD *)v448 != -1 || v449 != -1) && (*(_DWORD *)v448 != -2 || v449 != -2))
          break;
        v448 += 16;
        v447 -= 16;
        if (!v447)
          goto LABEL_719;
      }
    }
    else
    {
      v448 = v414;
    }
  }
  else
  {
LABEL_719:
    v448 = v414 + 16 * v415;
  }
  v452 = v414 + 16 * v415;
  if (v448 == v452)
    goto LABEL_806;
  while (2)
  {
    v453 = *(_QWORD *)(v448 + 8);
    v454 = *(_QWORD *)(v453 + 40);
    v455 = *(_QWORD *)(v454 + 48);
    if (v455)
      v456 = v455 - 24;
    else
      v456 = 0;
    if (v456 == v453)
    {
      v457 = *(_DWORD *)(v453 + 20) & 0x7FFFFFF;
      if (v457 != sub_1C5F5A008((uint64_t)&v576, *(_QWORD *)(v453 + 40)))
      {
        for (jj = *(_QWORD *)(v454 + 8); jj; jj = *(_QWORD *)(jj + 8))
        {
          v459 = *(_QWORD *)(jj + 24);
          v460 = *(unsigned __int8 *)(v459 + 16);
          if (v459)
            v461 = v460 >= 0x1C;
          else
            v461 = 0;
          if (v461 && v460 - 29 < 0xB)
            break;
        }
        __p[0] = &v623;
        __p[1] = (void *)0x1000000000;
        sub_1C4DBBCC0((unsigned int *)__p, jj, 0);
        v617[0] = &v576;
        v463 = 126 - 2 * __clz(LODWORD(__p[1]));
        if (LODWORD(__p[1]))
          v464 = v463;
        else
          v464 = 0;
        sub_1C5F5DDD0((unint64_t)__p[0], (uint64_t *)__p[0] + LODWORD(__p[1]), (uint64_t)v617, v464, 1);
        v466 = *(_DWORD *)(v453 + 20);
        v467 = v466 & 0x7FFFFFF;
        if ((v466 & 0x7FFFFFF) != 0)
        {
          v468 = 0;
          while (1)
          {
            v469 = *(_DWORD *)(v453 + 20);
            v470 = (v469 & 0x40000000) != 0 ? *(_QWORD *)(v453 - 8) : v453 - 32 * (v469 & 0x7FFFFFF);
            v471 = (int)__p[1];
            if (LODWORD(__p[1]))
              break;
            v476 = (char *)__p[0];
LABEL_769:
            v465 = v476 + 8;
            v493 = (char *)__p[0] + 8 * LODWORD(__p[1]);
            if (v493 != v476 + 8)
            {
              memmove(v476, v465, v493 - (v476 + 8));
              v471 = (int)__p[1];
            }
            LODWORD(__p[1]) = v471 - 1;
            if (++v468 == v467)
            {
              v466 = *(_DWORD *)(v453 + 20);
              goto LABEL_773;
            }
          }
          v472 = *(_QWORD *)(v470 + 32 * *(unsigned int *)(v453 + 60) + 8 * v468);
          v473 = v602 - 1;
          v474 = (v602 - 1) & ((v472 >> 4) ^ (v472 >> 9));
          v475 = (uint64_t *)(v601 + 16 * v474);
          v476 = (char *)__p[0];
          v477 = LODWORD(__p[1]);
          while (2)
          {
            v478 = v477 >> 1;
            v479 = &v476[8 * (v477 >> 1)];
            if (v602)
            {
              LODWORD(v480) = ((*(_QWORD *)v479 >> 4) ^ (*(_QWORD *)v479 >> 9)) & v473;
              v481 = (_QWORD *)(v601 + 16 * v480);
              v482 = *v481;
              if (*v481 == *(_QWORD *)v479)
              {
                v483 = (unsigned int *)(v481 + 1);
              }
              else
              {
                v484 = 1;
                while (v482 != -4096)
                {
                  v485 = v480 + v484++;
                  v480 = v485 & v473;
                  v482 = *(_QWORD *)(v601 + 16 * v480);
                  if (v482 == *(_QWORD *)v479)
                    goto LABEL_753;
                }
                v480 = v602;
LABEL_753:
                v483 = (unsigned int *)(v601 + 16 * v480 + 8);
              }
              v486 = *v483;
              v487 = *v475;
              if (*v475 == v472)
              {
                v488 = v601 + 16 * v474;
                goto LABEL_762;
              }
              v489 = 1;
              LODWORD(v490) = v473 & ((v472 >> 4) ^ (v472 >> 9));
              while (v487 != -4096)
              {
                v491 = v490 + v489++;
                v490 = v491 & v473;
                v487 = *(_QWORD *)(v601 + 16 * v490);
                if (v487 == v472)
                {
                  v488 = v601 + 16 * v490;
                  goto LABEL_762;
                }
              }
            }
            else
            {
              v486 = *(_DWORD *)(v601 + 8);
            }
            v488 = v601 + 16 * v602;
LABEL_762:
            v492 = v479 + 8;
            v477 += ~v478;
            if (v486 < *(_DWORD *)(v488 + 8))
              v476 = v492;
            else
              v477 = v478;
            if (!v477)
              goto LABEL_769;
            continue;
          }
        }
LABEL_773:
        v494 = *(_QWORD *)(v454 + 48);
        v495 = v494 - 24;
        if (v494)
          v496 = v494 - 24;
        else
          v496 = 0;
        if (v494 && *(_BYTE *)(v496 + 16) == 83)
        {
          do
          {
            if (((*(_DWORD *)(v495 + 20) ^ v466) & 0x7FFFFFF) != 0)
              break;
            v494 = *(_QWORD *)(v494 + 8);
            v497 = llvm::UndefValue::get(*(llvm::UndefValue **)v495, (llvm::Type *)v465);
            if (LODWORD(__p[1]))
            {
              v498 = (uint64_t)v497;
              v499 = (uint64_t *)__p[0];
              v500 = 8 * LODWORD(__p[1]);
              do
              {
                v501 = *v499++;
                sub_1C477667C((llvm::PHINode *)v495, v498, v501);
                v500 -= 8;
              }
              while (v500);
            }
            v502 = v494 - 24;
            if (!v494)
              v502 = 0;
            v503 = *(unsigned __int8 *)(v502 + 16);
            v495 = v503 == 83 ? v502 : 0;
          }
          while (v494 && v503 == 83);
        }
        if (__p[0] != &v623)
          free(__p[0]);
      }
    }
    v504 = v448 + 16;
    v448 = v446;
    if (v504 != v446)
    {
      v448 = v504;
      while (1)
      {
        v505 = *(_DWORD *)(v448 + 4);
        if ((*(_DWORD *)v448 != -1 || v505 != -1) && (*(_DWORD *)v448 != -2 || v505 != -2))
          break;
        v448 += 16;
        if (v448 == v446)
        {
          v448 = v446;
          break;
        }
      }
    }
    if (v448 != v452)
      continue;
    break;
  }
  v413 = DWORD2(v589);
LABEL_806:
  if (v413)
  {
    v508 = v590;
    if (v590 <= 4 * v413 || v590 < 0x41)
    {
LABEL_809:
      if (v508)
      {
        v509 = (_QWORD *)v589;
        v510 = 16 * v508;
        do
        {
          *v509 = -1;
          v509 += 2;
          v510 -= 16;
        }
        while (v510);
      }
      *((_QWORD *)&v589 + 1) = 0;
      goto LABEL_814;
    }
    v526 = 1 << (33 - __clz(v413 - 1));
    if (v526 <= 64)
      v527 = 64;
    else
      v527 = v526;
  }
  else
  {
    if (!HIDWORD(v589))
      goto LABEL_814;
    v508 = v590;
    if (v590 <= 0x40)
      goto LABEL_809;
    v527 = 0;
  }
  if (v527 == v508)
  {
    *((_QWORD *)&v589 + 1) = 0;
    v528 = (_QWORD *)v589;
    v529 = 16 * v508;
    do
    {
      *v528 = -1;
      v528 += 2;
      v529 -= 16;
    }
    while (v529);
  }
  else
  {
    MEMORY[0x1CAA32FB4](v589, 8);
    if (v527)
    {
      v533 = (4 * v527 / 3u + 1) | ((unint64_t)(4 * v527 / 3u + 1) >> 1);
      v534 = v533 | (v533 >> 2) | ((v533 | (v533 >> 2)) >> 4);
      v590 = (((v534 | (v534 >> 8)) >> 16) | v534 | (v534 >> 8)) + 1;
      v535 = operator new(16 * v590, (std::align_val_t)8uLL);
      v589 = (unint64_t)v535;
      if (v590)
      {
        v536 = 16 * v590;
        do
        {
          *v535 = -1;
          v535 += 2;
          v536 -= 16;
        }
        while (v536);
      }
    }
    else
    {
      *(_QWORD *)v544 = 0;
      *(_QWORD *)(v544 + 8) = 0;
      *(_DWORD *)(v544 + 16) = 0;
    }
  }
LABEL_814:
  v511 = (char *)v567;
  if (v567)
  {
    v512 = v567;
    if (v568 != v567)
    {
      v513 = v568 - 24;
      do
      {
        __p[0] = v513;
        sub_1C5F60160((void ***)__p);
        v514 = (void *)*((_QWORD *)v513 - 3);
        if (v514)
        {
          *((_QWORD *)v513 - 2) = v514;
          operator delete(v514);
        }
        v515 = v513 - 40;
        v513 -= 64;
      }
      while (v515 != v511);
      v512 = v567;
    }
    v568 = v511;
    operator delete(v512);
  }
  __p[0] = v571;
  sub_1C5F60160((void ***)__p);
LABEL_823:
  MEMORY[0x1CAA32FB4](v564, 8);
  if (v614 != &v616)
    free(v614);
  if (__src != v610)
    free(__src);
  if (v605 != v607)
    free(v605);
  MEMORY[0x1CAA32FB4](v603, 8);
  MEMORY[0x1CAA32FB4](v601, 8);
  if (__b != v596)
    free(__b);
  v516 = (char *)v593;
  if ((_DWORD)v594)
  {
    v517 = 24 * v594;
    do
    {
      v518 = *(char **)&v516[v517 - 24];
      if (&v516[v517 - 8] != v518)
        free(v518);
      v517 -= 24;
    }
    while (v517);
    v516 = (char *)v593;
  }
  if (v516 != v595)
    free(v516);
  MEMORY[0x1CAA32FB4](v591, 8);
  MEMORY[0x1CAA32FB4](v589, 8);
  MEMORY[0x1CAA32FB4](v587, 8);
  sub_1C50F023C((uint64_t)v580);
  if (v576)
  {
    v577 = v576;
    operator delete(v576);
  }
}

uint64_t sub_1C5F5A008(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v26;

  v26 = a2;
  v3 = *(_DWORD *)(a1 + 1016);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 1000);
    v5 = v3 - 1;
    v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (_QWORD *)(v4 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_16;
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v4 + 16 * v6);
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_16;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v7;
  }
  else
  {
    v13 = 0;
  }
  v7 = sub_1C4DC1798(a1 + 1000, (uint64_t)&v26, &v26, v13);
  *v7 = v26;
  *((_DWORD *)v7 + 2) = 0;
LABEL_16:
  v14 = *((_DWORD *)v7 + 2);
  if (!v14)
  {
    v15 = v26;
    do
    {
      v15 = *(_QWORD *)(v15 + 8);
      if (!v15)
      {
        v14 = 1;
        goto LABEL_38;
      }
      v16 = *(_QWORD *)(v15 + 24);
      v17 = *(unsigned __int8 *)(v16 + 16);
      if (v16)
        v18 = v17 >= 0x1C;
      else
        v18 = 0;
    }
    while (!v18 || v17 - 29 > 0xA);
    v20 = 0;
    while (1)
    {
      v15 = *(_QWORD *)(v15 + 8);
      if (!v15)
        break;
      v21 = *(_QWORD *)(v15 + 24);
      v22 = *(unsigned __int8 *)(v21 + 16);
      if (v21)
        v23 = v22 >= 0x1C;
      else
        v23 = 0;
      if (v23 && v22 - 29 < 0xB)
        ++v20;
    }
    v14 = v20 + 2;
LABEL_38:
    *((_DWORD *)v7 + 2) = v14;
  }
  return (v14 - 1);
}

uint64_t sub_1C5F5A138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v38;

  v4 = *(_QWORD *)a1;
  v5 = *(unsigned int *)(a1 + 16);
  v6 = a2 >> 4;
  if (!(_DWORD)v5)
  {
LABEL_7:
    v8 = (uint64_t *)(v4 + 16 * v5);
    goto LABEL_8;
  }
  LODWORD(v7) = (v5 - 1) & (v6 ^ (a2 >> 9));
  v8 = (uint64_t *)(v4 + 16 * v7);
  v9 = *v8;
  if (*v8 != a2)
  {
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v5 - 1);
      v9 = *(_QWORD *)(v4 + 16 * v7);
      if (v9 == a2)
      {
        v8 = (uint64_t *)(v4 + 16 * v7);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v8 != (uint64_t *)(v4 + 16 * v5))
    return *((unsigned int *)v8 + 2);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = v12 + 40;
  v14 = *(_QWORD *)(v12 + 48);
  if (v14 == v12 + 40)
    goto LABEL_43;
  v15 = 0;
  do
  {
    v16 = v14 - 24;
    if (!v14)
      v16 = 0;
    v17 = *(unsigned __int8 *)(v16 + 16);
    if (v17 == 61)
    {
      v20 = *(_DWORD *)(v16 + 20);
      if ((v20 & 0x40000000) != 0)
        v21 = *(_QWORD *)(v16 - 8);
      else
        v21 = v16 - 32 * (v20 & 0x7FFFFFF);
      v22 = *(_QWORD *)(v21 + 32);
    }
    else
    {
      if (v17 != 60)
        goto LABEL_40;
      v18 = *(_DWORD *)(v16 + 20);
      if ((v18 & 0x40000000) != 0)
        v19 = *(uint64_t **)(v16 - 8);
      else
        v19 = (uint64_t *)(v16 - 32 * (v18 & 0x7FFFFFF));
      v22 = *v19;
    }
    if (*(_BYTE *)(v22 + 16) == 59)
    {
      v38 = v16;
      v23 = *(_DWORD *)(a1 + 16);
      if (v23)
      {
        v24 = v23 - 1;
        v25 = v24 & ((v16 >> 4) ^ (v16 >> 9));
        v26 = (_QWORD *)(*(_QWORD *)a1 + 16 * v25);
        v27 = *v26;
        if (v16 == *v26)
        {
LABEL_39:
          *((_DWORD *)v26 + 2) = v15++;
          goto LABEL_40;
        }
        v28 = 0;
        v29 = 1;
        while (v27 != -4096)
        {
          if (v28)
            v30 = 0;
          else
            v30 = v27 == -8192;
          if (v30)
            v28 = v26;
          v31 = v25 + v29++;
          v25 = v31 & v24;
          v26 = (_QWORD *)(*(_QWORD *)a1 + 16 * v25);
          v27 = *v26;
          if (v16 == *v26)
            goto LABEL_39;
        }
        if (v28)
          v32 = v28;
        else
          v32 = v26;
      }
      else
      {
        v32 = 0;
      }
      v26 = sub_1C5048A08(a1, (uint64_t)&v38, &v38, v32);
      *v26 = v38;
      *((_DWORD *)v26 + 2) = 0;
      goto LABEL_39;
    }
LABEL_40:
    v14 = *(_QWORD *)(v14 + 8);
  }
  while (v14 != v13);
  v4 = *(_QWORD *)a1;
  LODWORD(v5) = *(_DWORD *)(a1 + 16);
LABEL_43:
  if ((_DWORD)v5)
  {
    LODWORD(v33) = (v5 - 1) & (v6 ^ (a2 >> 9));
    v8 = (uint64_t *)(v4 + 16 * v33);
    v34 = *v8;
    if (*v8 != a2)
    {
      v35 = 1;
      while (v34 != -4096)
      {
        v36 = v33 + v35++;
        v33 = v36 & (v5 - 1);
        v34 = *(_QWORD *)(v4 + 16 * v33);
        if (v34 == a2)
        {
          v8 = (uint64_t *)(v4 + 16 * v33);
          return *((unsigned int *)v8 + 2);
        }
      }
      goto LABEL_49;
    }
  }
  else
  {
LABEL_49:
    v8 = (uint64_t *)(v4 + 16 * v5);
  }
  return *((unsigned int *)v8 + 2);
}

char **sub_1C5F5A378(char **a1, _DWORD **a2)
{
  uint64_t Declaration;
  char *v5;
  uint64_t ***v6;
  llvm::Value ***v7;
  llvm::Type *v8;
  llvm::Value **NullValue;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  _DWORD *v13;
  llvm::Value *v14;
  llvm::Value ****v15;
  llvm::Value *v16;
  uint64_t v17;
  char *v18;
  uint64_t ***v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[32];
  __int16 v29;
  char v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*((_QWORD *)a2[5] + 7) + 40), 7, 0, 0);
  v5 = (char *)operator new(0x80uLL);
  v6 = (uint64_t ***)(v5 + 64);
  *((_DWORD *)v5 + 21) = *((_DWORD *)v5 + 21) & 0x38000000 | 2;
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = v5 + 64;
  *((_QWORD *)v5 + 4) = 0;
  v7 = (llvm::Value ***)(v5 + 32);
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 7) = v5 + 64;
  NullValue = llvm::Constant::getNullValue((llvm::Constant *)*a2, v8);
  v29 = 257;
  sub_1C4774CC4(*a2);
  *((_QWORD *)v5 + 8) = v10;
  *((_QWORD *)v5 + 9) = 0;
  v11 = *((_DWORD *)v5 + 21) & 0xC0000000 | 2;
  *((_DWORD *)v5 + 20) = 81;
  *((_DWORD *)v5 + 21) = v11;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *((_DWORD *)v5 + 30) = 0;
  if (*(_QWORD *)v5)
  {
    **((_QWORD **)v5 + 2) = *((_QWORD *)v5 + 1);
    v25 = *((_QWORD *)v5 + 1);
    if (v25)
      *(_QWORD *)(v25 + 16) = *((_QWORD *)v5 + 2);
  }
  *(_QWORD *)v5 = a2;
  v12 = a2 + 1;
  v13 = a2[1];
  *((_QWORD *)v5 + 1) = v13;
  if (v13)
    *((_QWORD *)v13 + 2) = v5 + 8;
  *((_QWORD *)v5 + 2) = v12;
  *v12 = v5;
  if (*((_QWORD *)v5 + 4))
  {
    **((_QWORD **)v5 + 6) = *((_QWORD *)v5 + 5);
    v26 = *((_QWORD *)v5 + 5);
    if (v26)
      *(_QWORD *)(v26 + 16) = *((_QWORD *)v5 + 6);
  }
  *v7 = NullValue;
  if (NullValue)
  {
    v16 = NullValue[1];
    v15 = (llvm::Value ****)(NullValue + 1);
    v14 = v16;
    *((_QWORD *)v5 + 5) = v16;
    if (v16)
      *((_QWORD *)v14 + 2) = v5 + 40;
    *((_QWORD *)v5 + 6) = v15;
    *v15 = v7;
  }
  *((_WORD *)v5 + 41) = 33;
  llvm::Value::setName(v6, (uint64_t)v28);
  sub_1C53DF664((_QWORD *)a2[5] + 5, (uint64_t)(a2 + 3), (uint64_t)v6);
  if (Declaration)
    v17 = *(_QWORD *)(Declaration + 24);
  else
    v17 = 0;
  v31 = v5 + 64;
  v29 = 257;
  v18 = (char *)operator new(0x90uLL);
  v19 = (uint64_t ***)(v18 + 64);
  *((_DWORD *)v18 + 21) = *((_DWORD *)v18 + 21) & 0x38000000 | 2;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = v18 + 64;
  *((_QWORD *)v18 + 4) = 0;
  v20 = (uint64_t *)(v18 + 32);
  *((_QWORD *)v18 + 5) = 0;
  *((_QWORD *)v18 + 6) = 0;
  *((_QWORD *)v18 + 7) = v18 + 64;
  *((_QWORD *)v18 + 8) = **(_QWORD **)(v17 + 16);
  *((_QWORD *)v18 + 9) = 0;
  v18[80] = 84;
  v18[81] = 0;
  *((_WORD *)v18 + 41) = 0;
  *((_DWORD *)v18 + 21) = 2;
  *((_DWORD *)v18 + 30) = 0;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *((_QWORD *)v18 + 16) = 0;
  *((_QWORD *)v18 + 17) = v17;
  sub_1C5382FD4((uint64_t)&v30, (uint64_t *)&v31, &v32, (uint64_t)v18);
  if (*((_QWORD *)v18 + 4))
  {
    **((_QWORD **)v18 + 6) = *((_QWORD *)v18 + 5);
    v27 = *((_QWORD *)v18 + 5);
    if (v27)
      *(_QWORD *)(v27 + 16) = *((_QWORD *)v18 + 6);
  }
  *v20 = Declaration;
  if (Declaration)
  {
    v23 = *(_QWORD *)(Declaration + 8);
    v22 = (uint64_t **)(Declaration + 8);
    v21 = v23;
    *((_QWORD *)v18 + 5) = v23;
    if (v23)
      *(_QWORD *)(v21 + 16) = v18 + 40;
    *((_QWORD *)v18 + 6) = v22;
    *v22 = v20;
  }
  llvm::CallBase::populateBundleOperandInfos((uint64_t)v19, 0, 0, 1u);
  llvm::Value::setName(v19, (uint64_t)v28);
  sub_1C53DF664((_QWORD *)(*((_QWORD *)v5 + 13) + 40), (uint64_t)(v5 + 88), (uint64_t)v19);
  return llvm::AssumptionCache::registerAssumption(a1, (uint64_t)v19);
}

unsigned int *sub_1C5F5A668(unsigned int *result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  BOOL v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v39 = *(_DWORD *)(a2 - 16);
        v40 = *(_DWORD *)v8;
        if (v39 < *(_DWORD *)v8)
        {
          *(_DWORD *)v8 = v39;
          *(_DWORD *)(a2 - 16) = v40;
          v41 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v41;
        }
        return result;
      case 3:
        return sub_1C53050C8((unsigned int *)v8, (unsigned int *)(v8 + 16), (unsigned int *)(a2 - 16));
      case 4:
        return sub_1C5305394(v8, v8 + 16, v8 + 32, a2 - 16);
      case 5:
        return sub_1C5F5AEE0(v8, v8 + 16, v8 + 32, v8 + 48, a2 - 16);
      default:
        if (v9 <= 383)
        {
          v42 = v8 + 16;
          v44 = v8 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v8;
              do
              {
                v47 = v42;
                v48 = *(_DWORD *)(v46 + 16);
                v49 = *(_DWORD *)v46;
                if (v48 < *(_DWORD *)v46)
                {
                  v50 = *(_QWORD *)(v46 + 24);
                  v51 = v45;
                  while (1)
                  {
                    v52 = v8 + v51;
                    *(_DWORD *)(v52 + 16) = v49;
                    *(_QWORD *)(v52 + 24) = *(_QWORD *)(v8 + v51 + 8);
                    if (!v51)
                      break;
                    v49 = *(_DWORD *)(v52 - 16);
                    v51 -= 16;
                    if (v48 >= v49)
                    {
                      v53 = v8 + v51 + 16;
                      goto LABEL_75;
                    }
                  }
                  v53 = v8;
LABEL_75:
                  *(_DWORD *)v53 = v48;
                  *(_QWORD *)(v53 + 8) = v50;
                }
                v42 = v47 + 16;
                v45 += 16;
                v46 = v47;
              }
              while (v47 + 16 != a2);
            }
          }
          else if (!v44)
          {
            v82 = (_QWORD *)(v8 + 24);
            do
            {
              v83 = v42;
              v84 = *(_DWORD *)(v7 + 16);
              v85 = *(_DWORD *)v7;
              if (v84 < *(_DWORD *)v7)
              {
                v86 = *(_QWORD *)(v7 + 24);
                v87 = v82;
                do
                {
                  v88 = v87;
                  *((_DWORD *)v87 - 2) = v85;
                  v89 = *(v87 - 2);
                  v87 -= 2;
                  *v88 = v89;
                  v85 = *((_DWORD *)v88 - 10);
                }
                while (v84 < v85);
                *((_DWORD *)v87 - 2) = v84;
                *v87 = v86;
              }
              v42 = v83 + 16;
              v82 += 2;
              v7 = v83;
            }
            while (v83 + 16 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v54 = (unint64_t)(v10 - 2) >> 1;
            v55 = v54;
            do
            {
              v56 = v55;
              if (v54 >= v55)
              {
                v57 = (2 * v55) | 1;
                v58 = v8 + 16 * v57;
                if (2 * v56 + 2 >= v10)
                {
                  v59 = *(_DWORD *)v58;
                }
                else
                {
                  v59 = *(_DWORD *)(v58 + 16);
                  v60 = *(_DWORD *)v58 >= v59;
                  if (*(_DWORD *)v58 > v59)
                    v59 = *(_DWORD *)v58;
                  if (!v60)
                  {
                    v58 += 16;
                    v57 = 2 * v56 + 2;
                  }
                }
                v61 = v8 + 16 * v56;
                v62 = *(_DWORD *)v61;
                if (v59 >= *(_DWORD *)v61)
                {
                  v63 = *(_QWORD *)(v61 + 8);
                  do
                  {
                    v64 = v61;
                    v61 = v58;
                    *(_DWORD *)v64 = v59;
                    *(_QWORD *)(v64 + 8) = *(_QWORD *)(v58 + 8);
                    if (v54 < v57)
                      break;
                    v65 = (2 * v57) | 1;
                    v58 = v8 + 16 * v65;
                    v57 = 2 * v57 + 2;
                    if (v57 >= v10)
                    {
                      v59 = *(_DWORD *)v58;
                      v57 = v65;
                    }
                    else
                    {
                      v59 = *(_DWORD *)v58;
                      result = (unsigned int *)(v58 + 16);
                      v66 = *(_DWORD *)(v58 + 16);
                      if (*(_DWORD *)v58 <= v66)
                        v59 = *(_DWORD *)(v58 + 16);
                      if (*(_DWORD *)v58 >= v66)
                        v57 = v65;
                      else
                        v58 += 16;
                    }
                  }
                  while (v59 >= v62);
                  *(_DWORD *)v61 = v62;
                  *(_QWORD *)(v61 + 8) = v63;
                }
              }
              v55 = v56 - 1;
            }
            while (v56);
            do
            {
              v67 = 0;
              v68 = *(_DWORD *)v8;
              v69 = *(_QWORD *)(v8 + 8);
              v70 = v8;
              do
              {
                v71 = v70 + 16 * v67 + 16;
                v72 = (2 * v67) | 1;
                v67 = 2 * v67 + 2;
                if (v67 >= v10)
                {
                  v73 = *(_DWORD *)v71;
                  v67 = v72;
                }
                else
                {
                  v73 = *(_DWORD *)v71;
                  result = (unsigned int *)*(unsigned int *)(v71 + 16);
                  if (*(_DWORD *)v71 <= result)
                    v73 = *(_DWORD *)(v71 + 16);
                  if (*(_DWORD *)v71 >= result)
                    v67 = v72;
                  else
                    v71 += 16;
                }
                *(_DWORD *)v70 = v73;
                *(_QWORD *)(v70 + 8) = *(_QWORD *)(v71 + 8);
                v70 = v71;
              }
              while (v67 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v71 == a2 - 16)
              {
                *(_DWORD *)v71 = v68;
                *(_QWORD *)(v71 + 8) = v69;
              }
              else
              {
                *(_DWORD *)v71 = *(_DWORD *)(a2 - 16);
                *(_QWORD *)(v71 + 8) = *(_QWORD *)(a2 - 8);
                *(_DWORD *)(a2 - 16) = v68;
                *(_QWORD *)(a2 - 8) = v69;
                v74 = v71 - v8 + 16;
                if (v74 >= 17)
                {
                  v75 = (((unint64_t)v74 >> 4) - 2) >> 1;
                  v76 = v8 + 16 * v75;
                  v77 = *(_DWORD *)v76;
                  v78 = *(_DWORD *)v71;
                  if (*(_DWORD *)v76 < *(_DWORD *)v71)
                  {
                    v79 = *(_QWORD *)(v71 + 8);
                    do
                    {
                      v80 = v71;
                      v71 = v76;
                      *(_DWORD *)v80 = v77;
                      *(_QWORD *)(v80 + 8) = *(_QWORD *)(v76 + 8);
                      if (!v75)
                        break;
                      v75 = (v75 - 1) >> 1;
                      v76 = v8 + 16 * v75;
                      v77 = *(_DWORD *)v76;
                    }
                    while (*(_DWORD *)v76 < v78);
                    *(_DWORD *)v71 = v78;
                    *(_QWORD *)(v71 + 8) = v79;
                  }
                }
              }
              a2 -= 16;
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 16 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x801)
        {
          result = sub_1C53050C8((unsigned int *)(v7 + 16 * ((unint64_t)v10 >> 1)), (unsigned int *)v7, (unsigned int *)(a2 - 16));
        }
        else
        {
          sub_1C53050C8((unsigned int *)v7, (unsigned int *)(v7 + 16 * ((unint64_t)v10 >> 1)), (unsigned int *)(a2 - 16));
          sub_1C53050C8((unsigned int *)(v7 + 16), (unsigned int *)(v12 - 16), (unsigned int *)(a2 - 32));
          sub_1C53050C8((unsigned int *)(v7 + 32), (unsigned int *)(v7 + 16 + 16 * v11), (unsigned int *)(a2 - 48));
          result = sub_1C53050C8((unsigned int *)(v12 - 16), (unsigned int *)v12, (unsigned int *)(v7 + 16 + 16 * v11));
          v13 = *(_DWORD *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v13;
          v14 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v12 + 8);
          *(_QWORD *)(v12 + 8) = v14;
        }
        --a3;
        v15 = *(_DWORD *)v7;
        if ((a4 & 1) == 0 && *(_DWORD *)(v7 - 16) >= v15)
        {
          if (v15 >= *(_DWORD *)(a2 - 16))
          {
            v30 = v7 + 16;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              v30 += 16;
            }
            while (v15 >= *(_DWORD *)v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = *(_DWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v15 >= v29);
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
            {
              v32 = *(_DWORD *)(v31 - 16);
              v31 -= 16;
            }
            while (v15 < v32);
          }
          v33 = *(_QWORD *)(v7 + 8);
          if (v8 < v31)
          {
            v34 = *(_DWORD *)v8;
            v35 = *(_DWORD *)v31;
            do
            {
              *(_DWORD *)v8 = v35;
              *(_DWORD *)v31 = v34;
              v36 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = *(_QWORD *)(v31 + 8);
              *(_QWORD *)(v31 + 8) = v36;
              do
              {
                v37 = *(_DWORD *)(v8 + 16);
                v8 += 16;
                v34 = v37;
              }
              while (v15 >= v37);
              do
              {
                v38 = *(_DWORD *)(v31 - 16);
                v31 -= 16;
                v35 = v38;
              }
              while (v15 < v38);
            }
            while (v8 < v31);
          }
          if (v8 - 16 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v8 - 16) = v15;
          *(_QWORD *)(v8 - 8) = v33;
          continue;
        }
        v16 = 0;
        v17 = *(_QWORD *)(v7 + 8);
        do
        {
          v18 = *(_DWORD *)(v7 + v16 + 16);
          v16 += 16;
        }
        while (v18 < v15);
        v19 = v7 + v16;
        v20 = (unsigned int *)a2;
        if (v16 == 16)
        {
          v20 = (unsigned int *)a2;
          do
          {
            if (v19 >= (unint64_t)v20)
              break;
            v22 = *(v20 - 4);
            v20 -= 4;
          }
          while (v22 >= v15);
        }
        else
        {
          do
          {
            v21 = *(v20 - 4);
            v20 -= 4;
          }
          while (v21 >= v15);
        }
        if (v19 >= (unint64_t)v20)
        {
          v8 = v7 + v16;
        }
        else
        {
          v23 = *v20;
          v8 = v7 + v16;
          v24 = v20;
          do
          {
            *(_DWORD *)v8 = v23;
            *v24 = v18;
            v25 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *((_QWORD *)v24 + 1);
            *((_QWORD *)v24 + 1) = v25;
            do
            {
              v26 = *(_DWORD *)(v8 + 16);
              v8 += 16;
              v18 = v26;
            }
            while (v26 < v15);
            do
            {
              v27 = *(v24 - 4);
              v24 -= 4;
              v23 = v27;
            }
            while (v27 >= v15);
          }
          while (v8 < (unint64_t)v24);
        }
        if (v8 - 16 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
        }
        *(_DWORD *)(v8 - 16) = v15;
        *(_QWORD *)(v8 - 8) = v17;
        if (v19 < (unint64_t)v20)
        {
LABEL_32:
          result = (unsigned int *)sub_1C5F5A668(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = sub_1C5F5AD60(v7, v8 - 16);
        result = (unsigned int *)sub_1C5F5AD60(v8, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 16;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C5F5AD60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 16);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        v8 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3:
      sub_1C53050C8((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a2 - 16));
      return 1;
    case 4:
      sub_1C5305394(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1C5F5AEE0(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v9 = (unsigned int *)(a1 + 32);
      sub_1C53050C8((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32));
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)v10;
    v14 = *v9;
    if (*(_DWORD *)v10 < *v9)
    {
      v15 = *(_QWORD *)(v10 + 8);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(_DWORD *)(v17 + 48) = v14;
        *(_QWORD *)(v17 + 56) = *(_QWORD *)(a1 + v16 + 40);
        if (v16 == -32)
          break;
        v14 = *(_DWORD *)(v17 + 16);
        v16 -= 16;
        if (v13 >= v14)
        {
          v18 = a1 + v16 + 48;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_DWORD *)v18 = v13;
      *(_QWORD *)(v18 + 8) = v15;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = (unsigned int *)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

unsigned int *sub_1C5F5AEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int *result;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  result = sub_1C5305394(a1, a2, a3, a4);
  v11 = *(_DWORD *)a4;
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v11;
    v12 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v12;
    v13 = *(_DWORD *)a3;
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v13;
      v14 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v14;
      v15 = *(_DWORD *)a2;
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v15;
        v16 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v16;
        v17 = *(_DWORD *)a1;
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v17;
          v18 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v18;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1C5F5AFC0(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t *v41;
  unsigned int *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int *v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unsigned int *v65;
  int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned int *v79;
  int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t *v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unsigned int *v100;
  int v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unsigned int *v113;
  int v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t *v122;
  BOOL v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  unsigned int v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int *v142;
  int v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  unsigned int *v153;
  int v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int *v167;
  int v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  _QWORD *v182;
  unsigned int *v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int *v186;
  int v187;
  uint64_t v188;
  int v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int *v199;
  int v200;
  int v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  int v206;
  int v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t *v229;
  BOOL v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  int v244;
  int v245;
  uint64_t *v246;
  uint64_t v247;
  int v248;
  int v249;
  unsigned int v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  int v259;
  int v260;
  uint64_t *v261;
  uint64_t v262;
  int v263;
  int v264;
  int64_t v265;
  int64_t v266;
  int64_t v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  unsigned int v277;
  int v278;
  int v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  int v283;
  int v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  unsigned int v292;
  int v293;
  int v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  int v298;
  int v299;
  unsigned int v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  unsigned int v310;
  int v311;
  int v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  int v316;
  int v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  unsigned int v322;
  int v323;
  int v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  int v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  unsigned int v342;
  int v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  int v348;
  int v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unsigned int v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  int v362;
  int v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  int v367;
  int v368;
  unsigned int v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  int v377;
  int v378;
  uint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  int v382;
  int v383;
  uint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unsigned int v391;
  unsigned int v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  unsigned int v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  int v401;
  unsigned int v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unsigned int v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  unsigned int v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  uint64_t v421;
  uint64_t *v422;
  uint64_t v423;
  int v424;
  int v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t v428;
  int v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unsigned int v435;
  unsigned int v436;
  uint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  unsigned int v440;
  int v441;
  int v442;
  uint64_t v443;
  uint64_t *v444;
  uint64_t v445;
  int v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t *v453;
  uint64_t v454;
  unsigned int v455;
  int v456;
  int v457;
  uint64_t v458;
  uint64_t *v459;
  uint64_t v460;
  int v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unsigned int v466;
  unsigned int v467;
  uint64_t v468;
  uint64_t *v469;
  uint64_t v470;
  unsigned int v471;
  int v472;
  int v473;
  uint64_t v474;
  uint64_t *v475;
  uint64_t v476;
  int v477;
  int v478;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v209 = *(a2 - 1);
        v210 = *v11;
        v211 = *(_QWORD *)(*(_QWORD *)a3 + 976);
        v212 = *(unsigned int *)(*(_QWORD *)a3 + 992);
        if (!(_DWORD)v212)
          goto LABEL_497;
        v213 = v212 - 1;
        LODWORD(v214) = (v212 - 1) & ((v209 >> 4) ^ (v209 >> 9));
        v215 = (uint64_t *)(v211 + 16 * v214);
        v216 = *v215;
        if (*v215 == v209)
        {
          v217 = *((_DWORD *)v215 + 2);
          goto LABEL_500;
        }
        v417 = 1;
        while (v216 != -4096)
        {
          v418 = v214 + v417++;
          v214 = v418 & v213;
          v216 = *(_QWORD *)(v211 + 16 * v214);
          if (v216 == v209)
            goto LABEL_498;
        }
LABEL_497:
        v214 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_498:
        v217 = *(_DWORD *)(v211 + 16 * v214 + 8);
        if (!(_DWORD)v212)
          goto LABEL_513;
        v213 = v212 - 1;
LABEL_500:
        LODWORD(v421) = v213 & ((v210 >> 4) ^ (v210 >> 9));
        v422 = (uint64_t *)(v211 + 16 * v421);
        v423 = *v422;
        if (*v422 == v210)
          goto LABEL_514;
        v424 = 1;
        while (v423 != -4096)
        {
          v425 = v421 + v424++;
          v421 = v425 & v213;
          v423 = *(_QWORD *)(v211 + 16 * v421);
          if (v423 == v210)
          {
            v422 = (uint64_t *)(v211 + 16 * v421);
            goto LABEL_514;
          }
        }
LABEL_513:
        v422 = (uint64_t *)(v211 + 16 * v212);
LABEL_514:
        if (v217 < *((_DWORD *)v422 + 2))
        {
          *v11 = v209;
          *(a2 - 1) = v210;
        }
        return result;
      case 3:
        return (unint64_t)sub_1C5F5CC04(v11, v11 + 1, a2 - 1, a3);
      case 4:
        return (unint64_t)sub_1C5F5D7AC(v11, v11 + 1, v11 + 2, a2 - 1, a3);
      case 5:
        v218 = v11 + 2;
        v219 = v11 + 3;
        result = (unint64_t)sub_1C5F5D7AC(v11, v11 + 1, v11 + 2, v11 + 3, a3);
        v220 = *(a2 - 1);
        v221 = v11[3];
        v222 = *(_QWORD *)(*(_QWORD *)a3 + 976);
        v223 = *(unsigned int *)(*(_QWORD *)a3 + 992);
        if (!(_DWORD)v223)
          goto LABEL_505;
        v224 = v223 - 1;
        LODWORD(v225) = (v223 - 1) & ((v220 >> 4) ^ (v220 >> 9));
        v226 = (uint64_t *)(v222 + 16 * v225);
        v227 = *v226;
        if (*v226 == v220)
        {
          v228 = *((_DWORD *)v226 + 2);
          goto LABEL_508;
        }
        v419 = 1;
        while (v227 != -4096)
        {
          v420 = v225 + v419++;
          v225 = v420 & v224;
          v227 = *(_QWORD *)(v222 + 16 * v225);
          if (v227 == v220)
            goto LABEL_506;
        }
LABEL_505:
        v225 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_506:
        v228 = *(_DWORD *)(v222 + 16 * v225 + 8);
        if (!(_DWORD)v223)
          goto LABEL_516;
        v224 = v223 - 1;
LABEL_508:
        LODWORD(v426) = v224 & ((v221 >> 4) ^ (v221 >> 9));
        v427 = (uint64_t *)(v222 + 16 * v426);
        v428 = *v427;
        if (*v427 == v221)
          goto LABEL_517;
        v429 = 1;
        while (v428 != -4096)
        {
          v430 = v426 + v429++;
          v426 = v430 & v224;
          v428 = *(_QWORD *)(v222 + 16 * v426);
          if (v428 == v221)
          {
            v427 = (uint64_t *)(v222 + 16 * v426);
            goto LABEL_517;
          }
        }
LABEL_516:
        v427 = (uint64_t *)(v222 + 16 * v223);
LABEL_517:
        if (v228 >= *((_DWORD *)v427 + 2))
          return result;
        *v219 = v220;
        *(a2 - 1) = v221;
        v431 = *v219;
        v432 = *v218;
        v433 = *(_QWORD *)(*(_QWORD *)a3 + 976);
        v434 = *(unsigned int *)(*(_QWORD *)a3 + 992);
        v435 = *v219 >> 4;
        if (!(_DWORD)v434)
          goto LABEL_525;
        v436 = v434 - 1;
        LODWORD(v437) = (v434 - 1) & (v435 ^ (v431 >> 9));
        v438 = (uint64_t *)(v433 + 16 * v437);
        v439 = *v438;
        if (*v438 == v431)
        {
          v440 = *((_DWORD *)v438 + 2);
        }
        else
        {
          v441 = 1;
          while (v439 != -4096)
          {
            v442 = v437 + v441++;
            v437 = v442 & v436;
            v439 = *(_QWORD *)(v433 + 16 * v437);
            if (v439 == v431)
              goto LABEL_526;
          }
LABEL_525:
          v437 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_526:
          v440 = *(_DWORD *)(v433 + 16 * v437 + 8);
          if (!(_DWORD)v434)
            goto LABEL_533;
          v436 = v434 - 1;
        }
        LODWORD(v443) = v436 & ((v432 >> 4) ^ (v432 >> 9));
        v444 = (uint64_t *)(v433 + 16 * v443);
        v445 = *v444;
        if (*v444 == v432)
          goto LABEL_534;
        v446 = 1;
        while (v445 != -4096)
        {
          v447 = v443 + v446++;
          v443 = v447 & v436;
          v445 = *(_QWORD *)(v433 + 16 * v443);
          if (v445 == v432)
          {
            v444 = (uint64_t *)(v433 + 16 * v443);
            goto LABEL_534;
          }
        }
LABEL_533:
        v444 = (uint64_t *)(v433 + 16 * v434);
LABEL_534:
        if (v440 >= *((_DWORD *)v444 + 2))
          return result;
        *v218 = v431;
        *v219 = v432;
        v448 = v11[1];
        v449 = *(_QWORD *)(*(_QWORD *)a3 + 976);
        v450 = *(unsigned int *)(*(_QWORD *)a3 + 992);
        if (!(_DWORD)v450)
          goto LABEL_542;
        v451 = v450 - 1;
        LODWORD(v452) = (v450 - 1) & (v435 ^ (v431 >> 9));
        v453 = (uint64_t *)(v449 + 16 * v452);
        v454 = *v453;
        if (*v453 == v431)
        {
          v455 = *((_DWORD *)v453 + 2);
        }
        else
        {
          v456 = 1;
          while (v454 != -4096)
          {
            v457 = v452 + v456++;
            v452 = v457 & v451;
            v454 = *(_QWORD *)(v449 + 16 * v452);
            if (v454 == v431)
              goto LABEL_543;
          }
LABEL_542:
          v452 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_543:
          v455 = *(_DWORD *)(v449 + 16 * v452 + 8);
          if (!(_DWORD)v450)
            goto LABEL_558;
          v451 = v450 - 1;
        }
        LODWORD(v458) = v451 & ((v448 >> 4) ^ (v448 >> 9));
        v459 = (uint64_t *)(v449 + 16 * v458);
        v460 = *v459;
        if (*v459 == v448)
          goto LABEL_550;
        v461 = 1;
        while (v460 != -4096)
        {
          v462 = v458 + v461++;
          v458 = v462 & v451;
          v460 = *(_QWORD *)(v449 + 16 * v458);
          if (v460 == v448)
          {
            v459 = (uint64_t *)(v449 + 16 * v458);
            goto LABEL_550;
          }
        }
LABEL_558:
        v459 = (uint64_t *)(v449 + 16 * v450);
LABEL_550:
        if (v455 >= *((_DWORD *)v459 + 2))
          return result;
        v11[1] = v431;
        v11[2] = v448;
        v463 = *v11;
        v464 = *(_QWORD *)(*(_QWORD *)a3 + 976);
        v465 = *(unsigned int *)(*(_QWORD *)a3 + 992);
        if (!(_DWORD)v465)
          goto LABEL_559;
        v466 = v435 ^ (v431 >> 9);
        v467 = v465 - 1;
        LODWORD(v468) = (v465 - 1) & v466;
        v469 = (uint64_t *)(v464 + 16 * v468);
        v470 = *v469;
        if (*v469 == v431)
        {
          v471 = *((_DWORD *)v469 + 2);
        }
        else
        {
          v472 = 1;
          while (v470 != -4096)
          {
            v473 = v468 + v472++;
            v468 = v473 & v467;
            v470 = *(_QWORD *)(v464 + 16 * v468);
            if (v470 == v431)
              goto LABEL_560;
          }
LABEL_559:
          v468 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_560:
          v471 = *(_DWORD *)(v464 + 16 * v468 + 8);
          if (!(_DWORD)v465)
            goto LABEL_567;
          v467 = v465 - 1;
        }
        LODWORD(v474) = v467 & ((v463 >> 4) ^ (v463 >> 9));
        v475 = (uint64_t *)(v464 + 16 * v474);
        v476 = *v475;
        if (*v475 == v463)
          goto LABEL_568;
        v477 = 1;
        while (v476 != -4096)
        {
          v478 = v474 + v477++;
          v474 = v478 & v467;
          v476 = *(_QWORD *)(v464 + 16 * v474);
          if (v476 == v463)
          {
            v475 = (uint64_t *)(v464 + 16 * v474);
            goto LABEL_568;
          }
        }
LABEL_567:
        v475 = (uint64_t *)(v464 + 16 * v465);
LABEL_568:
        if (v471 < *((_DWORD *)v475 + 2))
        {
          *v11 = v431;
          v11[1] = v463;
        }
        return result;
      default:
        if (v12 <= 191)
        {
          v229 = v11 + 1;
          v231 = v11 == a2 || v229 == a2;
          if ((a5 & 1) != 0)
          {
            if (v231)
              return result;
            v232 = *(_QWORD *)a3;
            v233 = v11;
            while (1)
            {
              v234 = v229;
              v236 = *v233;
              v235 = (uint64_t *)v233[1];
              v237 = *(_QWORD *)(v232 + 976);
              v238 = *(unsigned int *)(v232 + 992);
              v239 = v235 >> 4;
              if ((_DWORD)v238)
              {
                v240 = v238 - 1;
                LODWORD(v241) = (v238 - 1) & (v239 ^ (v235 >> 9));
                v242 = v237 + 16 * v241;
                result = *(_QWORD *)v242;
                if (*(uint64_t **)v242 == v235)
                {
                  v243 = *(_DWORD *)(v242 + 8);
                  goto LABEL_272;
                }
                v244 = 1;
                while (result != -4096)
                {
                  v245 = v241 + v244++;
                  v241 = v245 & v240;
                  result = *(_QWORD *)(v237 + 16 * v241);
                  if ((uint64_t *)result == v235)
                    goto LABEL_270;
                }
              }
              v241 = *(unsigned int *)(v232 + 992);
LABEL_270:
              v243 = *(_DWORD *)(v237 + 16 * v241 + 8);
              if ((_DWORD)v238)
              {
                v240 = v238 - 1;
LABEL_272:
                result = v240 & ((v236 >> 4) ^ (v236 >> 9));
                v246 = (uint64_t *)(v237 + 16 * result);
                v247 = *v246;
                if (*v246 != v236)
                {
                  v248 = 1;
                  do
                  {
                    if (v247 == -4096)
                      goto LABEL_277;
                    v249 = result + v248++;
                    result = v249 & v240;
                    v247 = *(_QWORD *)(v237 + 16 * result);
                  }
                  while (v247 != v236);
                  v246 = (uint64_t *)(v237 + 16 * result);
                }
                goto LABEL_278;
              }
LABEL_277:
              v246 = (uint64_t *)(v237 + 16 * v238);
LABEL_278:
              if (v243 >= *((_DWORD *)v246 + 2))
                goto LABEL_301;
              v250 = v239 ^ (v235 >> 9);
              v251 = v234;
              while (1)
              {
                *v251 = v236;
                if (v233 == v11)
                  break;
                v251 = v233;
                v252 = *--v233;
                v236 = v252;
                v253 = *(_QWORD *)(*(_QWORD *)a3 + 976);
                v254 = *(unsigned int *)(*(_QWORD *)a3 + 992);
                if ((_DWORD)v254)
                {
                  v255 = v254 - 1;
                  LODWORD(v256) = (v254 - 1) & v250;
                  v257 = v253 + 16 * v256;
                  result = *(_QWORD *)v257;
                  if (*(uint64_t **)v257 == v235)
                  {
                    v258 = *(_DWORD *)(v257 + 8);
                    goto LABEL_291;
                  }
                  v259 = 1;
                  while (result != -4096)
                  {
                    v260 = v256 + v259++;
                    v256 = v260 & v255;
                    result = *(_QWORD *)(v253 + 16 * v256);
                    if ((uint64_t *)result == v235)
                      goto LABEL_289;
                  }
                }
                v256 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_289:
                v258 = *(_DWORD *)(v253 + 16 * v256 + 8);
                if ((_DWORD)v254)
                {
                  v255 = v254 - 1;
LABEL_291:
                  result = v255 & ((v236 >> 4) ^ (v236 >> 9));
                  v261 = (uint64_t *)(v253 + 16 * result);
                  v262 = *v261;
                  if (*v261 != v236)
                  {
                    v263 = 1;
                    do
                    {
                      if (v262 == -4096)
                        goto LABEL_296;
                      v264 = result + v263++;
                      result = v264 & v255;
                      v262 = *(_QWORD *)(v253 + 16 * result);
                    }
                    while (v262 != v236);
                    v261 = (uint64_t *)(v253 + 16 * result);
                  }
                  goto LABEL_297;
                }
LABEL_296:
                v261 = (uint64_t *)(v253 + 16 * v254);
LABEL_297:
                if (v258 >= *((_DWORD *)v261 + 2))
                  goto LABEL_300;
              }
              v251 = v11;
LABEL_300:
              *v251 = (uint64_t)v235;
              v232 = *(_QWORD *)a3;
LABEL_301:
              v229 = v234 + 1;
              v233 = v234;
              if (v234 + 1 == a2)
                return result;
            }
          }
          if (v231)
            return result;
          v385 = *(_QWORD *)a3;
          while (1)
          {
            v386 = v229;
            v388 = *v9;
            v387 = v9[1];
            v389 = *(_QWORD *)(v385 + 976);
            v390 = *(unsigned int *)(v385 + 992);
            v391 = v387 >> 4;
            if ((_DWORD)v390)
            {
              v392 = v390 - 1;
              LODWORD(v393) = (v390 - 1) & (v391 ^ (v387 >> 9));
              v394 = (uint64_t *)(v389 + 16 * v393);
              v395 = *v394;
              if (*v394 == v387)
              {
                v396 = *((_DWORD *)v394 + 2);
                goto LABEL_461;
              }
              result = 1;
              while (v395 != -4096)
              {
                v397 = v393 + result;
                result = (result + 1);
                v393 = v397 & v392;
                v395 = *(_QWORD *)(v389 + 16 * v393);
                if (v395 == v387)
                  goto LABEL_459;
              }
            }
            v393 = *(unsigned int *)(v385 + 992);
LABEL_459:
            v396 = *(_DWORD *)(v389 + 16 * v393 + 8);
            if (!(_DWORD)v390)
            {
LABEL_466:
              v399 = v389 + 16 * v390;
              goto LABEL_467;
            }
            v392 = v390 - 1;
LABEL_461:
            LODWORD(v398) = v392 & ((v388 >> 4) ^ (v388 >> 9));
            v399 = v389 + 16 * v398;
            result = *(_QWORD *)v399;
            if (*(_QWORD *)v399 != v388)
            {
              v400 = 1;
              do
              {
                if (result == -4096)
                  goto LABEL_466;
                v401 = v398 + v400++;
                v398 = v401 & v392;
                result = *(_QWORD *)(v389 + 16 * v398);
              }
              while (result != v388);
              v399 = v389 + 16 * v398;
            }
LABEL_467:
            if (v396 < *(_DWORD *)(v399 + 8))
            {
              v402 = v391 ^ (v387 >> 9);
              v403 = v386;
              while (1)
              {
                *v403 = v388;
                v403 = v9;
                v404 = *--v9;
                v388 = v404;
                v405 = *(_QWORD *)(*(_QWORD *)a3 + 976);
                v406 = *(unsigned int *)(*(_QWORD *)a3 + 992);
                if ((_DWORD)v406)
                {
                  v407 = v406 - 1;
                  LODWORD(v408) = (v406 - 1) & v402;
                  v409 = (uint64_t *)(v405 + 16 * v408);
                  v410 = *v409;
                  if (*v409 == v387)
                  {
                    v411 = *((_DWORD *)v409 + 2);
                    goto LABEL_479;
                  }
                  result = 1;
                  while (v410 != -4096)
                  {
                    v412 = v408 + result;
                    result = (result + 1);
                    v408 = v412 & v407;
                    v410 = *(_QWORD *)(v405 + 16 * v408);
                    if (v410 == v387)
                      goto LABEL_477;
                  }
                }
                v408 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_477:
                v411 = *(_DWORD *)(v405 + 16 * v408 + 8);
                if ((_DWORD)v406)
                {
                  v407 = v406 - 1;
LABEL_479:
                  LODWORD(v413) = v407 & ((v388 >> 4) ^ (v388 >> 9));
                  v414 = v405 + 16 * v413;
                  result = *(_QWORD *)v414;
                  if (*(_QWORD *)v414 != v388)
                  {
                    v415 = 1;
                    do
                    {
                      if (result == -4096)
                        goto LABEL_484;
                      v416 = v413 + v415++;
                      v413 = v416 & v407;
                      result = *(_QWORD *)(v405 + 16 * v413);
                    }
                    while (result != v388);
                    v414 = v405 + 16 * v413;
                  }
                  goto LABEL_485;
                }
LABEL_484:
                v414 = v405 + 16 * v406;
LABEL_485:
                if (v411 >= *(_DWORD *)(v414 + 8))
                {
                  *v403 = v387;
                  v385 = *(_QWORD *)a3;
                  break;
                }
              }
            }
            v229 = v386 + 1;
            v9 = v386;
            if (v386 + 1 == a2)
              return result;
          }
        }
        if (!a4)
        {
          if (v11 == a2)
            return result;
          v265 = (unint64_t)(v13 - 2) >> 1;
          v266 = v265;
          while (1)
          {
            v267 = v266;
            if (v265 < v266)
              goto LABEL_384;
            v268 = (2 * v266) | 1;
            v269 = &v11[v268];
            v270 = *(_QWORD *)a3;
            if (2 * v267 + 2 >= v13)
            {
              v272 = *(_QWORD *)(v270 + 976);
              LODWORD(v270) = *(_DWORD *)(v270 + 992);
              goto LABEL_326;
            }
            v271 = v269[1];
            v272 = *(_QWORD *)(v270 + 976);
            v270 = *(unsigned int *)(v270 + 992);
            if ((_DWORD)v270)
            {
              v273 = v270 - 1;
              LODWORD(v274) = (v270 - 1) & ((*v269 >> 4) ^ (*v269 >> 9));
              v275 = (uint64_t *)(v272 + 16 * v274);
              v276 = *v275;
              if (*v275 == *v269)
              {
                v277 = *((_DWORD *)v275 + 2);
                goto LABEL_318;
              }
              v278 = 1;
              while (v276 != -4096)
              {
                v279 = v274 + v278++;
                v274 = v279 & v273;
                v276 = *(_QWORD *)(v272 + 16 * v274);
                if (v276 == *v269)
                  goto LABEL_316;
              }
            }
            v274 = v270;
LABEL_316:
            v277 = *(_DWORD *)(v272 + 16 * v274 + 8);
            if ((_DWORD)v270)
            {
              v273 = v270 - 1;
LABEL_318:
              LODWORD(v280) = v273 & ((v271 >> 4) ^ (v271 >> 9));
              v281 = (uint64_t *)(v272 + 16 * v280);
              v282 = *v281;
              if (*v281 != v271)
              {
                v283 = 1;
                do
                {
                  if (v282 == -4096)
                    goto LABEL_323;
                  v284 = v280 + v283++;
                  v280 = v284 & v273;
                  v282 = *(_QWORD *)(v272 + 16 * v280);
                }
                while (v282 != v271);
                v281 = (uint64_t *)(v272 + 16 * v280);
              }
              goto LABEL_324;
            }
LABEL_323:
            v281 = (uint64_t *)(v272 + 16 * v270);
LABEL_324:
            if (v277 < *((_DWORD *)v281 + 2))
            {
              ++v269;
              v268 = 2 * v267 + 2;
            }
LABEL_326:
            v285 = &v11[v267];
            v286 = *v269;
            v287 = *v285;
            result = *v285 >> 4;
            if ((_DWORD)v270)
            {
              v288 = v270 - 1;
              LODWORD(v289) = ((v286 >> 4) ^ (v286 >> 9)) & (v270 - 1);
              v290 = (uint64_t *)(v272 + 16 * v289);
              v291 = *v290;
              if (*v290 == v286)
              {
                v292 = *((_DWORD *)v290 + 2);
                goto LABEL_336;
              }
              v293 = 1;
              while (v291 != -4096)
              {
                v294 = v289 + v293++;
                v289 = v294 & v288;
                v291 = *(_QWORD *)(v272 + 16 * v289);
                if (v291 == v286)
                  goto LABEL_334;
              }
            }
            v289 = v270;
LABEL_334:
            v292 = *(_DWORD *)(v272 + 16 * v289 + 8);
            if (!(_DWORD)v270)
            {
LABEL_341:
              v296 = (uint64_t *)(v272 + 16 * v270);
              goto LABEL_342;
            }
            v288 = v270 - 1;
LABEL_336:
            LODWORD(v295) = v288 & (result ^ (v287 >> 9));
            v296 = (uint64_t *)(v272 + 16 * v295);
            v297 = *v296;
            if (*v296 != v287)
            {
              v298 = 1;
              do
              {
                if (v297 == -4096)
                  goto LABEL_341;
                v299 = v295 + v298++;
                v295 = v299 & v288;
                v297 = *(_QWORD *)(v272 + 16 * v295);
              }
              while (v297 != v287);
              v296 = (uint64_t *)(v272 + 16 * v295);
            }
LABEL_342:
            if (v292 < *((_DWORD *)v296 + 2))
              goto LABEL_384;
            v300 = result ^ (v287 >> 9);
            do
            {
              v301 = v269;
              *v285 = v286;
              if (v265 < v268)
                break;
              v302 = (2 * v268) | 1;
              v269 = &v11[v302];
              v268 = 2 * v268 + 2;
              v303 = *(_QWORD *)a3;
              if (v268 >= v13)
              {
                v305 = *(_QWORD *)(v303 + 976);
                LODWORD(v303) = *(_DWORD *)(v303 + 992);
                v268 = v302;
                goto LABEL_366;
              }
              v304 = v269[1];
              v305 = *(_QWORD *)(v303 + 976);
              v303 = *(unsigned int *)(v303 + 992);
              if ((_DWORD)v303)
              {
                v306 = v303 - 1;
                LODWORD(v307) = (v303 - 1) & ((*v269 >> 4) ^ (*v269 >> 9));
                v308 = (uint64_t *)(v305 + 16 * v307);
                v309 = *v308;
                if (*v308 == *v269)
                {
                  v310 = *((_DWORD *)v308 + 2);
                  goto LABEL_357;
                }
                v311 = 1;
                while (v309 != -4096)
                {
                  v312 = v307 + v311++;
                  v307 = v312 & v306;
                  v309 = *(_QWORD *)(v305 + 16 * v307);
                  if (v309 == *v269)
                    goto LABEL_355;
                }
              }
              v307 = v303;
LABEL_355:
              v310 = *(_DWORD *)(v305 + 16 * v307 + 8);
              if ((_DWORD)v303)
              {
                v306 = v303 - 1;
LABEL_357:
                LODWORD(v313) = v306 & ((v304 >> 4) ^ (v304 >> 9));
                v314 = (uint64_t *)(v305 + 16 * v313);
                v315 = *v314;
                if (*v314 != v304)
                {
                  v316 = 1;
                  do
                  {
                    if (v315 == -4096)
                      goto LABEL_362;
                    v317 = v313 + v316++;
                    v313 = v317 & v306;
                    v315 = *(_QWORD *)(v305 + 16 * v313);
                  }
                  while (v315 != v304);
                  v314 = (uint64_t *)(v305 + 16 * v313);
                }
                goto LABEL_363;
              }
LABEL_362:
              v314 = (uint64_t *)(v305 + 16 * v303);
LABEL_363:
              if (v310 >= *((_DWORD *)v314 + 2))
                v268 = v302;
              else
                ++v269;
LABEL_366:
              v286 = *v269;
              if ((_DWORD)v303)
              {
                v318 = v303 - 1;
                LODWORD(v319) = ((v286 >> 4) ^ (v286 >> 9)) & (v303 - 1);
                v320 = (uint64_t *)(v305 + 16 * v319);
                v321 = *v320;
                if (*v320 == v286)
                {
                  v322 = *((_DWORD *)v320 + 2);
                  goto LABEL_376;
                }
                v323 = 1;
                while (v321 != -4096)
                {
                  v324 = v319 + v323++;
                  v319 = v324 & v318;
                  v321 = *(_QWORD *)(v305 + 16 * v319);
                  if (v321 == v286)
                    goto LABEL_374;
                }
              }
              v319 = v303;
LABEL_374:
              v322 = *(_DWORD *)(v305 + 16 * v319 + 8);
              if ((_DWORD)v303)
              {
                v318 = v303 - 1;
LABEL_376:
                LODWORD(v325) = v318 & v300;
                v326 = (uint64_t *)(v305 + 16 * (v318 & v300));
                v327 = *v326;
                if (*v326 != v287)
                {
                  v328 = 1;
                  do
                  {
                    if (v327 == -4096)
                      goto LABEL_381;
                    v329 = v325 + v328++;
                    v325 = v329 & v318;
                    v327 = *(_QWORD *)(v305 + 16 * v325);
                  }
                  while (v327 != v287);
                  v326 = (uint64_t *)(v305 + 16 * v325);
                }
                goto LABEL_382;
              }
LABEL_381:
              v326 = (uint64_t *)(v305 + 16 * v303);
LABEL_382:
              result = *((unsigned int *)v326 + 2);
              v285 = v301;
            }
            while (v322 >= result);
            *v301 = v287;
LABEL_384:
            v266 = v267 - 1;
            if (!v267)
            {
LABEL_385:
              v330 = 0;
              v331 = *v11;
              v332 = v11;
              while (1)
              {
                v333 = &v332[v330 + 1];
                v334 = (2 * v330) | 1;
                v335 = 2 * v330 + 2;
                if (v335 < v13)
                  break;
LABEL_405:
                *v332 = *v333;
                v332 = v333;
                v330 = v334;
                if (v334 > (uint64_t)((unint64_t)(v13 - 2) >> 1))
                {
                  if (v333 == --a2)
                  {
                    *v333 = v331;
                  }
                  else
                  {
                    *v333 = *a2;
                    *a2 = v331;
                    v350 = (char *)v333 - (char *)v11 + 8;
                    if (v350 >= 9)
                    {
                      v351 = (((unint64_t)v350 >> 3) - 2) >> 1;
                      v352 = &v11[v351];
                      v353 = *v352;
                      v354 = *v333;
                      v355 = *(_QWORD *)(*(_QWORD *)a3 + 976);
                      v356 = *(unsigned int *)(*(_QWORD *)a3 + 992);
                      v357 = *v333 >> 4;
                      if ((_DWORD)v356)
                      {
                        v358 = v356 - 1;
                        LODWORD(v359) = (v356 - 1) & ((v353 >> 4) ^ (v353 >> 9));
                        v360 = (uint64_t *)(v355 + 16 * v359);
                        v361 = *v360;
                        if (*v360 == v353)
                        {
                          result = *((unsigned int *)v360 + 2);
LABEL_419:
                          LODWORD(v364) = v358 & (v357 ^ (v354 >> 9));
                          v365 = (uint64_t *)(v355 + 16 * v364);
                          v366 = *v365;
                          if (*v365 != v354)
                          {
                            v367 = 1;
                            do
                            {
                              if (v366 == -4096)
                                goto LABEL_424;
                              v368 = v364 + v367++;
                              v364 = v368 & v358;
                              v366 = *(_QWORD *)(v355 + 16 * v364);
                            }
                            while (v366 != v354);
                            v365 = (uint64_t *)(v355 + 16 * v364);
                          }
                          goto LABEL_425;
                        }
                        v362 = 1;
                        while (v361 != -4096)
                        {
                          v363 = v359 + v362++;
                          v359 = v363 & v358;
                          v361 = *(_QWORD *)(v355 + 16 * v359);
                          if (v361 == v353)
                            goto LABEL_417;
                        }
                      }
                      v359 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_417:
                      result = *(unsigned int *)(v355 + 16 * v359 + 8);
                      if ((_DWORD)v356)
                      {
                        v358 = v356 - 1;
                        goto LABEL_419;
                      }
LABEL_424:
                      v365 = (uint64_t *)(v355 + 16 * v356);
LABEL_425:
                      if (result < *((_DWORD *)v365 + 2))
                      {
                        v369 = v357 ^ (v354 >> 9);
                        while (1)
                        {
                          v370 = v352;
                          *v333 = v353;
                          if (!v351)
                          {
LABEL_445:
                            *v370 = v354;
                            break;
                          }
                          v351 = (v351 - 1) >> 1;
                          v352 = &v11[v351];
                          v353 = *v352;
                          v371 = *(_QWORD *)(*(_QWORD *)a3 + 976);
                          v372 = *(unsigned int *)(*(_QWORD *)a3 + 992);
                          if ((_DWORD)v372)
                          {
                            v373 = v372 - 1;
                            LODWORD(v374) = (v372 - 1) & ((v353 >> 4) ^ (v353 >> 9));
                            v375 = (uint64_t *)(v371 + 16 * v374);
                            v376 = *v375;
                            if (*v375 == v353)
                            {
                              result = *((unsigned int *)v375 + 2);
                              goto LABEL_438;
                            }
                            v377 = 1;
                            while (v376 != -4096)
                            {
                              v378 = v374 + v377++;
                              v374 = v378 & v373;
                              v376 = *(_QWORD *)(v371 + 16 * v374);
                              if (v376 == v353)
                                goto LABEL_436;
                            }
                          }
                          v374 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_436:
                          result = *(unsigned int *)(v371 + 16 * v374 + 8);
                          if ((_DWORD)v372)
                          {
                            v373 = v372 - 1;
LABEL_438:
                            LODWORD(v379) = v373 & v369;
                            v380 = (uint64_t *)(v371 + 16 * (v373 & v369));
                            v381 = *v380;
                            if (*v380 != v354)
                            {
                              v382 = 1;
                              do
                              {
                                if (v381 == -4096)
                                  goto LABEL_443;
                                v383 = v379 + v382++;
                                v379 = v383 & v373;
                                v381 = *(_QWORD *)(v371 + 16 * v379);
                              }
                              while (v381 != v354);
                              v380 = (uint64_t *)(v371 + 16 * v379);
                            }
                            goto LABEL_444;
                          }
LABEL_443:
                          v380 = (uint64_t *)(v371 + 16 * v372);
LABEL_444:
                          v333 = v370;
                          if (result >= *((_DWORD *)v380 + 2))
                            goto LABEL_445;
                        }
                      }
                    }
                  }
                  if (v13-- <= 2)
                    return result;
                  goto LABEL_385;
                }
              }
              result = v333[1];
              v336 = *(_QWORD *)(*(_QWORD *)a3 + 976);
              v337 = *(unsigned int *)(*(_QWORD *)a3 + 992);
              if ((_DWORD)v337)
              {
                v338 = v337 - 1;
                LODWORD(v339) = (v337 - 1) & ((*v333 >> 4) ^ (*v333 >> 9));
                v340 = (uint64_t *)(v336 + 16 * v339);
                v341 = *v340;
                if (*v340 == *v333)
                {
                  v342 = *((_DWORD *)v340 + 2);
LABEL_397:
                  LODWORD(v345) = v338 & ((result >> 4) ^ (result >> 9));
                  v346 = v336 + 16 * v345;
                  v347 = *(uint64_t **)v346;
                  if (*(_QWORD *)v346 != result)
                  {
                    v348 = 1;
                    do
                    {
                      if (v347 == (uint64_t *)-4096)
                        goto LABEL_402;
                      v349 = v345 + v348++;
                      v345 = v349 & v338;
                      v347 = *(uint64_t **)(v336 + 16 * v345);
                    }
                    while (v347 != (uint64_t *)result);
                    v346 = v336 + 16 * v345;
                  }
                  goto LABEL_403;
                }
                v343 = 1;
                while (v341 != -4096)
                {
                  v344 = v339 + v343++;
                  v339 = v344 & v338;
                  v341 = *(_QWORD *)(v336 + 16 * v339);
                  if (v341 == *v333)
                    goto LABEL_395;
                }
              }
              v339 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_395:
              v342 = *(_DWORD *)(v336 + 16 * v339 + 8);
              if ((_DWORD)v337)
              {
                v338 = v337 - 1;
                goto LABEL_397;
              }
LABEL_402:
              v346 = v336 + 16 * v337;
LABEL_403:
              if (v342 < *(_DWORD *)(v346 + 8))
              {
                ++v333;
                v334 = v335;
              }
              goto LABEL_405;
            }
          }
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v11[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          sub_1C5F5CC04(&v9[(unint64_t)v13 >> 1], v9, a2 - 1, a3);
        }
        else
        {
          sub_1C5F5CC04(v9, &v9[(unint64_t)v13 >> 1], a2 - 1, a3);
          sub_1C5F5CC04(v9 + 1, v15 - 1, a2 - 2, a3);
          sub_1C5F5CC04(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
          sub_1C5F5CC04(v15 - 1, v15, &v9[v14 + 1], a3);
          v16 = *v9;
          *v9 = *v15;
          *v15 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = *(_QWORD *)a3;
        v19 = *v9 >> 4;
        if ((a5 & 1) == 0)
        {
          v20 = *(_QWORD *)(v18 + 976);
          v18 = *(unsigned int *)(v18 + 992);
          if ((_DWORD)v18)
          {
            v21 = *(v9 - 1);
            v22 = v18 - 1;
            LODWORD(v23) = ((v21 >> 4) ^ (v21 >> 9)) & (v18 - 1);
            v24 = (uint64_t *)(v20 + 16 * v23);
            v25 = *v24;
            if (*v24 == v21)
            {
              v26 = *((_DWORD *)v24 + 2);
              goto LABEL_21;
            }
            v27 = 1;
            while (v25 != -4096)
            {
              v28 = v23 + v27++;
              v23 = v28 & v22;
              v25 = *(_QWORD *)(v20 + 16 * v23);
              if (v25 == v21)
                goto LABEL_19;
            }
          }
          v23 = v18;
LABEL_19:
          v26 = *(_DWORD *)(v20 + 16 * v23 + 8);
          if (!(_DWORD)v18)
            goto LABEL_28;
          v22 = v18 - 1;
LABEL_21:
          v29 = v19 ^ (v17 >> 9);
          LODWORD(v30) = v22 & v29;
          v31 = (uint64_t *)(v20 + 16 * (v22 & v29));
          v32 = *v31;
          if (*v31 == v17)
          {
            if (v26 < *((_DWORD *)v31 + 2))
              goto LABEL_30;
            v33 = *v10;
            goto LABEL_137;
          }
          v34 = 1;
          while (v32 != -4096)
          {
            v35 = v30 + v34++;
            v30 = v35 & v22;
            v32 = *(_QWORD *)(v20 + 16 * v30);
            if (v32 == v17)
              goto LABEL_29;
          }
LABEL_28:
          v30 = v18;
LABEL_29:
          if (v26 < *(_DWORD *)(v20 + 16 * v30 + 8))
            goto LABEL_30;
          v33 = *v10;
          if (!(_DWORD)v18)
            goto LABEL_241;
          v29 = v19 ^ (v17 >> 9);
LABEL_137:
          v124 = v18 - 1;
          LODWORD(v125) = v29 & (v18 - 1);
          v126 = (uint64_t *)(v20 + 16 * v125);
          v127 = *v126;
          if (*v126 == v17)
          {
            v128 = *((_DWORD *)v126 + 2);
            goto LABEL_144;
          }
          v129 = 1;
          while (v127 != -4096)
          {
            v130 = v125 + v129++;
            v125 = v130 & v124;
            v127 = *(_QWORD *)(v20 + 16 * v125);
            if (v127 == v17)
              goto LABEL_142;
          }
LABEL_241:
          v125 = v18;
LABEL_142:
          v128 = *(_DWORD *)(v20 + 16 * v125 + 8);
          if (!(_DWORD)v18)
            goto LABEL_149;
          v124 = v18 - 1;
LABEL_144:
          LODWORD(v131) = ((v33 >> 4) ^ (v33 >> 9)) & v124;
          v132 = (uint64_t *)(v20 + 16 * v131);
          v133 = *v132;
          if (*v132 != v33)
          {
            v134 = 1;
            while (v133 != -4096)
            {
              v135 = v131 + v134++;
              v131 = v135 & v124;
              v133 = *(_QWORD *)(v20 + 16 * v131);
              if (v133 == v33)
              {
                v132 = (uint64_t *)(v20 + 16 * v131);
                goto LABEL_150;
              }
            }
LABEL_149:
            v132 = (uint64_t *)(v20 + 16 * v18);
          }
LABEL_150:
          v136 = v19 ^ (v17 >> 9);
          v137 = v18 - 1;
          v138 = (_QWORD *)(v20 + 16 * (((_DWORD)v18 - 1) & v136));
          result = v20 + 16 * v18 + 8;
          v11 = v9;
          if (v128 < *((_DWORD *)v132 + 2))
          {
            v11 = v9;
            while (1)
            {
              v140 = v11[1];
              ++v11;
              v139 = v140;
              if ((_DWORD)v18)
              {
                v141 = *v138;
                v142 = (unsigned int *)(v138 + 1);
                if (*v138 != v17)
                {
                  v143 = 1;
                  LODWORD(v144) = v137 & v136;
                  while (v141 != -4096)
                  {
                    v145 = v144 + v143++;
                    v144 = v145 & v137;
                    v141 = *(_QWORD *)(v20 + 16 * v144);
                    if (v141 == v17)
                      goto LABEL_157;
                  }
                  v144 = v18;
LABEL_157:
                  v142 = (unsigned int *)(v20 + 16 * v144 + 8);
                }
                v146 = *v142;
                LODWORD(v147) = ((v139 >> 4) ^ (v139 >> 9)) & v137;
                v148 = (uint64_t *)(v20 + 16 * v147);
                v149 = *v148;
                if (*v148 == v139)
                  goto LABEL_165;
                v150 = 1;
                while (v149 != -4096)
                {
                  v151 = v147 + v150++;
                  v147 = v151 & v137;
                  v149 = *(_QWORD *)(v20 + 16 * v147);
                  if (v149 == v139)
                  {
                    v148 = (uint64_t *)(v20 + 16 * v147);
                    goto LABEL_165;
                  }
                }
              }
              else
              {
                v146 = *(_DWORD *)result;
              }
              v148 = (uint64_t *)(v20 + 16 * v18);
LABEL_165:
              if (v146 < *((_DWORD *)v148 + 2))
                goto LABEL_185;
            }
          }
          do
          {
            if (++v11 >= a2)
              break;
            if ((_DWORD)v18)
            {
              v152 = *v138;
              v153 = (unsigned int *)(v138 + 1);
              if (*v138 != v17)
              {
                v154 = 1;
                LODWORD(v155) = v137 & v136;
                while (v152 != -4096)
                {
                  v156 = v155 + v154++;
                  v155 = v156 & v137;
                  v152 = *(_QWORD *)(v20 + 16 * v155);
                  if (v152 == v17)
                    goto LABEL_174;
                }
                v155 = v18;
LABEL_174:
                v153 = (unsigned int *)(v20 + 16 * v155 + 8);
              }
              v157 = *v153;
              LODWORD(v158) = ((*v11 >> 4) ^ (*v11 >> 9)) & v137;
              v159 = (uint64_t *)(v20 + 16 * v158);
              v160 = *v159;
              if (*v159 == *v11)
                continue;
              v161 = 1;
              while (v160 != -4096)
              {
                v162 = v158 + v161++;
                v158 = v162 & v137;
                v160 = *(_QWORD *)(v20 + 16 * v158);
                if (v160 == *v11)
                {
                  v159 = (uint64_t *)(v20 + 16 * v158);
                  goto LABEL_182;
                }
              }
            }
            else
            {
              v157 = *(_DWORD *)result;
            }
            v159 = (uint64_t *)(v20 + 16 * v18);
LABEL_182:
            ;
          }
          while (v157 >= *((_DWORD *)v159 + 2));
LABEL_185:
          v163 = a2;
          if (v11 < a2)
          {
            v163 = a2;
            do
            {
              v165 = *--v163;
              v164 = v165;
              if ((_DWORD)v18)
              {
                v166 = *v138;
                v167 = (unsigned int *)(v138 + 1);
                if (*v138 != v17)
                {
                  v168 = 1;
                  LODWORD(v169) = v137 & v136;
                  while (v166 != -4096)
                  {
                    v170 = v169 + v168++;
                    v169 = v170 & v137;
                    v166 = *(_QWORD *)(v20 + 16 * v169);
                    if (v166 == v17)
                      goto LABEL_192;
                  }
                  v169 = v18;
LABEL_192:
                  v167 = (unsigned int *)(v20 + 16 * v169 + 8);
                }
                v171 = *v167;
                LODWORD(v172) = ((v164 >> 4) ^ (v164 >> 9)) & v137;
                v173 = (uint64_t *)(v20 + 16 * v172);
                v174 = *v173;
                if (*v173 == v164)
                  continue;
                v175 = 1;
                while (v174 != -4096)
                {
                  v176 = v172 + v175++;
                  v172 = v176 & v137;
                  v174 = *(_QWORD *)(v20 + 16 * v172);
                  if (v174 == v164)
                  {
                    v173 = (uint64_t *)(v20 + 16 * v172);
                    goto LABEL_200;
                  }
                }
              }
              else
              {
                v171 = *(_DWORD *)result;
              }
              v173 = (uint64_t *)(v20 + 16 * v18);
LABEL_200:
              ;
            }
            while (v171 < *((_DWORD *)v173 + 2));
          }
          if (v11 >= v163)
            goto LABEL_238;
          v177 = *v11;
          v178 = *v163;
          do
          {
            *v11 = v178;
            *v163 = v177;
            v179 = *(_QWORD *)(*(_QWORD *)a3 + 976);
            v180 = *(unsigned int *)(*(_QWORD *)a3 + 992);
            v181 = v180 - 1;
            v182 = (_QWORD *)(v179 + 16 * (((_DWORD)v180 - 1) & v136));
            result = v179 + 16 * v180;
            v183 = (unsigned int *)(result + 8);
            do
            {
              v184 = v11[1];
              ++v11;
              v177 = v184;
              if (!(_DWORD)v180)
              {
                v190 = *v183;
LABEL_218:
                v192 = (uint64_t *)(v179 + 16 * v180);
                continue;
              }
              v185 = *v182;
              v186 = (unsigned int *)(v182 + 1);
              if (*v182 != v17)
              {
                v187 = 1;
                LODWORD(v188) = v181 & v136;
                while (v185 != -4096)
                {
                  v189 = v188 + v187++;
                  v188 = v189 & v181;
                  v185 = *(_QWORD *)(v179 + 16 * v188);
                  if (v185 == v17)
                    goto LABEL_211;
                }
                v188 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_211:
                v186 = (unsigned int *)(v179 + 16 * v188 + 8);
              }
              v190 = *v186;
              LODWORD(v191) = ((v177 >> 4) ^ (v177 >> 9)) & v181;
              v192 = (uint64_t *)(v179 + 16 * v191);
              v193 = *v192;
              if (*v192 != v177)
              {
                v194 = 1;
                while (v193 != -4096)
                {
                  v195 = v191 + v194++;
                  v191 = v195 & v181;
                  v193 = *(_QWORD *)(v179 + 16 * v191);
                  if (v193 == v177)
                  {
                    v192 = (uint64_t *)(v179 + 16 * v191);
                    goto LABEL_219;
                  }
                }
                goto LABEL_218;
              }
LABEL_219:
              ;
            }
            while (v190 >= *((_DWORD *)v192 + 2));
            do
            {
              v197 = *--v163;
              v178 = v197;
              if (!(_DWORD)v180)
              {
                v202 = *v183;
LABEL_235:
                v204 = (uint64_t *)(v179 + 16 * v180);
                continue;
              }
              v198 = *v182;
              v199 = (unsigned int *)(v182 + 1);
              if (*v182 != v17)
              {
                v200 = 1;
                LODWORD(v196) = v181 & v136;
                while (v198 != -4096)
                {
                  v201 = v196 + v200++;
                  v196 = v201 & v181;
                  v198 = *(_QWORD *)(v179 + 16 * v196);
                  if (v198 == v17)
                    goto LABEL_228;
                }
                v196 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_228:
                v199 = (unsigned int *)(v179 + 16 * v196 + 8);
              }
              v202 = *v199;
              LODWORD(v203) = ((v178 >> 4) ^ (v178 >> 9)) & v181;
              v204 = (uint64_t *)(v179 + 16 * v203);
              v205 = *v204;
              if (*v204 != v178)
              {
                v206 = 1;
                while (v205 != -4096)
                {
                  v207 = v203 + v206++;
                  v203 = v207 & v181;
                  v205 = *(_QWORD *)(v179 + 16 * v203);
                  if (v205 == v178)
                  {
                    v204 = (uint64_t *)(v179 + 16 * v203);
                    goto LABEL_236;
                  }
                }
                goto LABEL_235;
              }
LABEL_236:
              ;
            }
            while (v202 < *((_DWORD *)v204 + 2));
          }
          while (v11 < v163);
LABEL_238:
          v208 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v208;
          a5 = 0;
          *v208 = v17;
          continue;
        }
        v20 = *(_QWORD *)(v18 + 976);
        LODWORD(v18) = *(_DWORD *)(v18 + 992);
LABEL_30:
        v36 = v18 - 1;
        v37 = v18;
        v38 = v19 ^ (v17 >> 9);
        v39 = v20 + 16 * v18;
        v40 = (v18 - 1) & v38;
        v41 = (uint64_t *)(v20 + 16 * v40);
        v42 = (unsigned int *)(v39 + 8);
        v43 = v9;
        while (2)
        {
          v44 = v43;
          v46 = v43[1];
          ++v43;
          v45 = v46;
          if ((_DWORD)v37)
          {
            LODWORD(v47) = ((v45 >> 4) ^ (v45 >> 9)) & v36;
            v48 = (_QWORD *)(v20 + 16 * v47);
            v49 = *v48;
            if (*v48 == v45)
            {
              v50 = (unsigned int *)(v48 + 1);
            }
            else
            {
              v51 = 1;
              while (v49 != -4096)
              {
                v52 = v47 + v51++;
                v47 = v52 & v36;
                v49 = *(_QWORD *)(v20 + 16 * v47);
                if (v49 == v45)
                  goto LABEL_37;
              }
              v47 = v37;
LABEL_37:
              v50 = (unsigned int *)(v20 + 16 * v47 + 8);
            }
            v53 = *v50;
            v54 = *v41;
            if (*v41 == v17)
            {
              v55 = v20 + 16 * v40;
              goto LABEL_46;
            }
            v56 = 1;
            LODWORD(v57) = v36 & v38;
            while (v54 != -4096)
            {
              v58 = v57 + v56++;
              v57 = v58 & v36;
              v54 = *(_QWORD *)(v20 + 16 * v57);
              if (v54 == v17)
              {
                v55 = v20 + 16 * v57;
                goto LABEL_46;
              }
            }
          }
          else
          {
            v53 = *v42;
          }
          v55 = v39;
LABEL_46:
          if (v53 < *(_DWORD *)(v55 + 8))
            continue;
          break;
        }
        v59 = a2;
        if (v44 != v9)
        {
          while (2)
          {
            v61 = *--v59;
            v60 = v61;
            if ((_DWORD)v37)
            {
              LODWORD(v62) = ((v60 >> 4) ^ (v60 >> 9)) & v36;
              v63 = (_QWORD *)(v20 + 16 * v62);
              v64 = *v63;
              if (*v63 == v60)
              {
                v65 = (unsigned int *)(v63 + 1);
              }
              else
              {
                v66 = 1;
                while (v64 != -4096)
                {
                  v67 = v62 + v66++;
                  v62 = v67 & v36;
                  v64 = *(_QWORD *)(v20 + 16 * v62);
                  if (v64 == v60)
                    goto LABEL_56;
                }
                v62 = v37;
LABEL_56:
                v65 = (unsigned int *)(v20 + 16 * v62 + 8);
              }
              v68 = *v65;
              v69 = *v41;
              if (*v41 == v17)
              {
                v70 = v20 + 16 * v40;
                goto LABEL_65;
              }
              v71 = 1;
              LODWORD(v72) = v36 & v38;
              while (v69 != -4096)
              {
                v73 = v72 + v71++;
                v72 = v73 & v36;
                v69 = *(_QWORD *)(v20 + 16 * v72);
                if (v69 == v17)
                {
                  v70 = v20 + 16 * v72;
                  goto LABEL_65;
                }
              }
            }
            else
            {
              v68 = *v42;
            }
            v70 = v39;
LABEL_65:
            if (v68 < *(_DWORD *)(v70 + 8))
              goto LABEL_88;
            continue;
          }
        }
        v59 = a2;
        while (2)
        {
          if (v43 < v59)
          {
            v75 = *--v59;
            v74 = v75;
            if ((_DWORD)v37)
            {
              LODWORD(v76) = ((v74 >> 4) ^ (v74 >> 9)) & v36;
              v77 = (_QWORD *)(v20 + 16 * v76);
              v78 = *v77;
              if (*v77 == v74)
              {
                v79 = (unsigned int *)(v77 + 1);
              }
              else
              {
                v80 = 1;
                while (v78 != -4096)
                {
                  v81 = v76 + v80++;
                  v76 = v81 & v36;
                  v78 = *(_QWORD *)(v20 + 16 * v76);
                  if (v78 == v74)
                    goto LABEL_76;
                }
                v76 = v37;
LABEL_76:
                v79 = (unsigned int *)(v20 + 16 * v76 + 8);
              }
              v82 = *v79;
              v83 = *v41;
              if (*v41 == v17)
              {
                v84 = v20 + 16 * v40;
                goto LABEL_85;
              }
              v85 = 1;
              LODWORD(v86) = v36 & v38;
              while (v83 != -4096)
              {
                v87 = v86 + v85++;
                v86 = v87 & v36;
                v83 = *(_QWORD *)(v20 + 16 * v86);
                if (v83 == v17)
                {
                  v84 = v20 + 16 * v86;
                  goto LABEL_85;
                }
              }
            }
            else
            {
              v82 = *v42;
            }
            v84 = v39;
LABEL_85:
            if (v82 < *(_DWORD *)(v84 + 8))
              break;
            continue;
          }
          break;
        }
LABEL_88:
        if (v43 >= v59)
        {
          v11 = v43;
          goto LABEL_129;
        }
        v88 = *v59;
        v11 = v43;
        v89 = v59;
        while (2)
        {
          *v11 = v88;
          *v89 = v45;
          v90 = *(_QWORD *)(*(_QWORD *)a3 + 976);
          v91 = *(unsigned int *)(*(_QWORD *)a3 + 992);
          v92 = v91 - 1;
          v93 = (v91 - 1) & v38;
          v94 = (uint64_t *)(v90 + 16 * v93);
          v95 = (unsigned int *)(v90 + 16 * v91 + 8);
          while (2)
          {
            v96 = v11[1];
            ++v11;
            v45 = v96;
            if (!(_DWORD)v91)
            {
              v103 = *v95;
LABEL_105:
              v105 = v90 + 16 * v91;
              goto LABEL_106;
            }
            LODWORD(v97) = ((v45 >> 4) ^ (v45 >> 9)) & v92;
            v98 = (_QWORD *)(v90 + 16 * v97);
            v99 = *v98;
            if (*v98 == v45)
            {
              v100 = (unsigned int *)(v98 + 1);
            }
            else
            {
              v101 = 1;
              while (v99 != -4096)
              {
                v102 = v97 + v101++;
                v97 = v102 & v92;
                v99 = *(_QWORD *)(v90 + 16 * v97);
                if (v99 == v45)
                  goto LABEL_97;
              }
              v97 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_97:
              v100 = (unsigned int *)(v90 + 16 * v97 + 8);
            }
            v103 = *v100;
            v104 = *v94;
            if (*v94 != v17)
            {
              v106 = 1;
              LODWORD(v107) = v92 & v38;
              while (v104 != -4096)
              {
                v108 = v107 + v106++;
                v107 = v108 & v92;
                v104 = *(_QWORD *)(v90 + 16 * v107);
                if (v104 == v17)
                {
                  v105 = v90 + 16 * v107;
                  goto LABEL_106;
                }
              }
              goto LABEL_105;
            }
            v105 = v90 + 16 * v93;
LABEL_106:
            if (v103 < *(_DWORD *)(v105 + 8))
              continue;
            break;
          }
          while (2)
          {
            v110 = *--v89;
            v88 = v110;
            if ((_DWORD)v91)
            {
              LODWORD(v109) = ((v88 >> 4) ^ (v88 >> 9)) & v92;
              v111 = (_QWORD *)(v90 + 16 * v109);
              v112 = *v111;
              if (*v111 == v88)
              {
                v113 = (unsigned int *)(v111 + 1);
              }
              else
              {
                v114 = 1;
                while (v112 != -4096)
                {
                  v115 = v109 + v114++;
                  v109 = v115 & v92;
                  v112 = *(_QWORD *)(v90 + 16 * v109);
                  if (v112 == v88)
                    goto LABEL_116;
                }
                v109 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_116:
                v113 = (unsigned int *)(v90 + 16 * v109 + 8);
              }
              v116 = *v113;
              v117 = *v94;
              if (*v94 == v17)
              {
                v118 = v90 + 16 * v93;
                goto LABEL_125;
              }
              v119 = 1;
              LODWORD(v120) = v92 & v38;
              while (v117 != -4096)
              {
                v121 = v120 + v119++;
                v120 = v121 & v92;
                v117 = *(_QWORD *)(v90 + 16 * v120);
                if (v117 == v17)
                {
                  v118 = v90 + 16 * v120;
                  goto LABEL_125;
                }
              }
            }
            else
            {
              v116 = *v95;
            }
            v118 = v90 + 16 * v91;
LABEL_125:
            if (v116 >= *(_DWORD *)(v118 + 8))
              continue;
            break;
          }
          if (v11 < v89)
            continue;
          break;
        }
LABEL_129:
        v122 = v11 - 1;
        if (v11 - 1 != v9)
          *v9 = *v122;
        *v122 = v17;
        if (v43 < v59)
        {
LABEL_134:
          result = sub_1C5F5AFC0(v9, v11 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v123 = sub_1C5F5D060(v9, v11 - 1, a3);
        result = sub_1C5F5D060(v11, a2, a3);
        if (!(_DWORD)result)
        {
          if (v123)
            continue;
          goto LABEL_134;
        }
        a2 = v11 - 1;
        if (!v123)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C5F5CC04(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  int v77;

  v4 = *a2;
  v5 = *result;
  v6 = *(_QWORD *)(*(_QWORD *)a4 + 976);
  v7 = *(unsigned int *)(*(_QWORD *)a4 + 992);
  v8 = *a2 >> 4;
  v9 = *result >> 4;
  if ((_DWORD)v7)
  {
    v10 = v7 - 1;
    LODWORD(v11) = (v7 - 1) & (v8 ^ (v4 >> 9));
    v12 = (uint64_t *)(v6 + 16 * v11);
    v13 = *v12;
    if (*v12 == v4)
    {
      v14 = *((_DWORD *)v12 + 2);
      goto LABEL_11;
    }
    v15 = 1;
    while (v13 != -4096)
    {
      v16 = v11 + v15++;
      v11 = v16 & v10;
      v13 = *(_QWORD *)(v6 + 16 * v11);
      if (v13 == v4)
        goto LABEL_9;
    }
  }
  v11 = *(unsigned int *)(*(_QWORD *)a4 + 992);
LABEL_9:
  v14 = *(_DWORD *)(v6 + 16 * v11 + 8);
  if (!(_DWORD)v7)
  {
LABEL_18:
    v17 = *(unsigned int *)(*(_QWORD *)a4 + 992);
LABEL_19:
    v20 = *a3;
    if (v14 >= *(_DWORD *)(v6 + 16 * v17 + 8))
    {
      if (!(_DWORD)v7)
        goto LABEL_65;
      goto LABEL_24;
    }
    if (!(_DWORD)v7)
      goto LABEL_63;
    goto LABEL_21;
  }
  v10 = v7 - 1;
LABEL_11:
  LODWORD(v17) = v10 & (v9 ^ (v5 >> 9));
  v18 = (uint64_t *)(v6 + 16 * v17);
  v19 = *v18;
  if (*v18 != v5)
  {
    v21 = 1;
    while (v19 != -4096)
    {
      v22 = v17 + v21++;
      v17 = v22 & v10;
      v19 = *(_QWORD *)(v6 + 16 * v17);
      if (v19 == v5)
        goto LABEL_19;
    }
    goto LABEL_18;
  }
  v20 = *a3;
  if (v14 < *((_DWORD *)v18 + 2))
  {
LABEL_21:
    v23 = v7 - 1;
    LODWORD(v24) = ((v20 >> 4) ^ (v20 >> 9)) & (v7 - 1);
    v25 = (uint64_t *)(v6 + 16 * v24);
    v26 = *v25;
    if (*v25 == v20)
    {
      v27 = *((_DWORD *)v25 + 2);
      goto LABEL_31;
    }
    v33 = 1;
    while (v26 != -4096)
    {
      v34 = v24 + v33++;
      v24 = v34 & v23;
      v26 = *(_QWORD *)(v6 + 16 * v24);
      if (v26 == v20)
        goto LABEL_29;
    }
LABEL_63:
    v24 = *(unsigned int *)(*(_QWORD *)a4 + 992);
LABEL_29:
    v27 = *(_DWORD *)(v6 + 16 * v24 + 8);
    if (!(_DWORD)v7)
      goto LABEL_64;
    v23 = v7 - 1;
LABEL_31:
    LODWORD(v35) = v23 & (v8 ^ (v4 >> 9));
    v36 = (uint64_t *)(v6 + 16 * v35);
    v37 = *v36;
    if (*v36 == v4)
      goto LABEL_36;
    v38 = 1;
    while (v37 != -4096)
    {
      v39 = v35 + v38++;
      v35 = v39 & v23;
      v37 = *(_QWORD *)(v6 + 16 * v35);
      if (v37 == v4)
      {
        v36 = (uint64_t *)(v6 + 16 * v35);
        goto LABEL_36;
      }
    }
LABEL_64:
    v36 = (uint64_t *)(v6 + 16 * v7);
LABEL_36:
    if (v27 < *((_DWORD *)v36 + 2))
    {
      *result = v20;
LABEL_77:
      *a3 = v5;
      return result;
    }
    *result = v4;
    *a2 = v5;
    v40 = *a3;
    v41 = *(_QWORD *)(*(_QWORD *)a4 + 976);
    v42 = *(unsigned int *)(*(_QWORD *)a4 + 992);
    if ((_DWORD)v42)
    {
      v43 = v42 - 1;
      LODWORD(v44) = (v42 - 1) & ((v40 >> 4) ^ (v40 >> 9));
      v45 = (uint64_t *)(v41 + 16 * v44);
      v46 = *v45;
      if (*v45 == v40)
      {
        v47 = *((_DWORD *)v45 + 2);
        goto LABEL_70;
      }
      v64 = 1;
      while (v46 != -4096)
      {
        v65 = v44 + v64++;
        v44 = v65 & v43;
        v46 = *(_QWORD *)(v41 + 16 * v44);
        if (v46 == v40)
          goto LABEL_68;
      }
    }
    v44 = *(unsigned int *)(*(_QWORD *)a4 + 992);
LABEL_68:
    v47 = *(_DWORD *)(v41 + 16 * v44 + 8);
    if (!(_DWORD)v42)
      goto LABEL_89;
    v43 = v42 - 1;
LABEL_70:
    LODWORD(v68) = v43 & (v9 ^ (v5 >> 9));
    v69 = (uint64_t *)(v41 + 16 * v68);
    v70 = *v69;
    if (*v69 == v5)
    {
LABEL_75:
      if (v47 >= *((_DWORD *)v69 + 2))
        return result;
      *a2 = v40;
      goto LABEL_77;
    }
    v71 = 1;
    while (v70 != -4096)
    {
      v72 = v68 + v71++;
      v68 = v72 & v43;
      v70 = *(_QWORD *)(v41 + 16 * v68);
      if (v70 == v5)
      {
        v69 = (uint64_t *)(v41 + 16 * v68);
        goto LABEL_75;
      }
    }
LABEL_89:
    v69 = (uint64_t *)(v41 + 16 * v42);
    goto LABEL_75;
  }
LABEL_24:
  v28 = v7 - 1;
  LODWORD(v29) = ((v20 >> 4) ^ (v20 >> 9)) & (v7 - 1);
  v30 = (uint64_t *)(v6 + 16 * v29);
  v31 = *v30;
  if (*v30 == v20)
  {
    v32 = *((_DWORD *)v30 + 2);
    goto LABEL_46;
  }
  v48 = 1;
  while (v31 != -4096)
  {
    v49 = v29 + v48++;
    v29 = v49 & v28;
    v31 = *(_QWORD *)(v6 + 16 * v29);
    if (v31 == v20)
      goto LABEL_44;
  }
LABEL_65:
  v29 = *(unsigned int *)(*(_QWORD *)a4 + 992);
LABEL_44:
  v32 = *(_DWORD *)(v6 + 16 * v29 + 8);
  if (!(_DWORD)v7)
    goto LABEL_66;
  v28 = v7 - 1;
LABEL_46:
  LODWORD(v50) = v28 & (v8 ^ (v4 >> 9));
  v51 = (uint64_t *)(v6 + 16 * v50);
  v52 = *v51;
  if (*v51 == v4)
    goto LABEL_51;
  v53 = 1;
  while (v52 != -4096)
  {
    v54 = v50 + v53++;
    v50 = v54 & v28;
    v52 = *(_QWORD *)(v6 + 16 * v50);
    if (v52 == v4)
    {
      v51 = (uint64_t *)(v6 + 16 * v50);
      goto LABEL_51;
    }
  }
LABEL_66:
  v51 = (uint64_t *)(v6 + 16 * v7);
LABEL_51:
  if (v32 >= *((_DWORD *)v51 + 2))
    return result;
  *a2 = v20;
  *a3 = v4;
  v55 = *a2;
  v56 = *result;
  v57 = *(_QWORD *)(*(_QWORD *)a4 + 976);
  v58 = *(unsigned int *)(*(_QWORD *)a4 + 992);
  if ((_DWORD)v58)
  {
    v59 = v58 - 1;
    LODWORD(v60) = (v58 - 1) & ((v55 >> 4) ^ (v55 >> 9));
    v61 = (uint64_t *)(v57 + 16 * v60);
    v62 = *v61;
    if (*v61 == v55)
    {
      v63 = *((_DWORD *)v61 + 2);
      goto LABEL_82;
    }
    v66 = 1;
    while (v62 != -4096)
    {
      v67 = v60 + v66++;
      v60 = v67 & v59;
      v62 = *(_QWORD *)(v57 + 16 * v60);
      if (v62 == v55)
        goto LABEL_80;
    }
  }
  v60 = *(unsigned int *)(*(_QWORD *)a4 + 992);
LABEL_80:
  v63 = *(_DWORD *)(v57 + 16 * v60 + 8);
  if (!(_DWORD)v58)
    goto LABEL_90;
  v59 = v58 - 1;
LABEL_82:
  LODWORD(v73) = v59 & ((v56 >> 4) ^ (v56 >> 9));
  v74 = (uint64_t *)(v57 + 16 * v73);
  v75 = *v74;
  if (*v74 == v56)
    goto LABEL_87;
  v76 = 1;
  while (v75 != -4096)
  {
    v77 = v73 + v76++;
    v73 = v77 & v59;
    v75 = *(_QWORD *)(v57 + 16 * v73);
    if (v75 == v56)
    {
      v74 = (uint64_t *)(v57 + 16 * v73);
      goto LABEL_87;
    }
  }
LABEL_90:
  v74 = (uint64_t *)(v57 + 16 * v58);
LABEL_87:
  if (v63 < *((_DWORD *)v74 + 2))
  {
    *result = v55;
    *a2 = v56;
  }
  return result;
}

BOOL sub_1C5F5D060(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int v126;
  int v127;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 976);
      v11 = *(unsigned int *)(*(_QWORD *)a3 + 992);
      if (!(_DWORD)v11)
        goto LABEL_63;
      v12 = v11 - 1;
      LODWORD(v13) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      v14 = (uint64_t *)(v10 + 16 * v13);
      v15 = *v14;
      if (*v14 == v8)
      {
        v16 = *((_DWORD *)v14 + 2);
      }
      else
      {
        v66 = 1;
        while (v15 != -4096)
        {
          v67 = v13 + v66++;
          v13 = v67 & v12;
          v15 = *(_QWORD *)(v10 + 16 * v13);
          if (v15 == v8)
            goto LABEL_64;
        }
LABEL_63:
        v13 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_64:
        v16 = *(_DWORD *)(v10 + 16 * v13 + 8);
        if (!(_DWORD)v11)
        {
LABEL_79:
          v71 = (uint64_t *)(v10 + 16 * v11);
          goto LABEL_80;
        }
        v12 = v11 - 1;
      }
      LODWORD(v70) = v12 & ((v9 >> 4) ^ (v9 >> 9));
      v71 = (uint64_t *)(v10 + 16 * v70);
      v72 = *v71;
      if (*v71 != v9)
      {
        v73 = 1;
        do
        {
          if (v72 == -4096)
            goto LABEL_79;
          v74 = v70 + v73++;
          v70 = v74 & v12;
          v72 = *(_QWORD *)(v10 + 16 * v70);
        }
        while (v72 != v9);
        v71 = (uint64_t *)(v10 + 16 * v70);
      }
LABEL_80:
      if (v16 < *((_DWORD *)v71 + 2))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_1C5F5CC04(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C5F5D7AC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v55 = a1 + 2;
      v56 = a1 + 3;
      sub_1C5F5D7AC(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v57 = *(a2 - 1);
      v58 = a1[3];
      v59 = *(_QWORD *)(*(_QWORD *)a3 + 976);
      v60 = *(unsigned int *)(*(_QWORD *)a3 + 992);
      if (!(_DWORD)v60)
        goto LABEL_71;
      v61 = v60 - 1;
      LODWORD(v62) = (v60 - 1) & ((v57 >> 4) ^ (v57 >> 9));
      v63 = (uint64_t *)(v59 + 16 * v62);
      v64 = *v63;
      if (*v63 == v57)
      {
        v65 = *((_DWORD *)v63 + 2);
        goto LABEL_74;
      }
      v68 = 1;
      while (v64 != -4096)
      {
        v69 = v62 + v68++;
        v62 = v69 & v61;
        v64 = *(_QWORD *)(v59 + 16 * v62);
        if (v64 == v57)
          goto LABEL_72;
      }
LABEL_71:
      v62 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_72:
      v65 = *(_DWORD *)(v59 + 16 * v62 + 8);
      if (!(_DWORD)v60)
        goto LABEL_82;
      v61 = v60 - 1;
LABEL_74:
      LODWORD(v75) = v61 & ((v58 >> 4) ^ (v58 >> 9));
      v76 = (uint64_t *)(v59 + 16 * v75);
      v77 = *v76;
      if (*v76 == v58)
        goto LABEL_83;
      v78 = 1;
      while (v77 != -4096)
      {
        v79 = v75 + v78++;
        v75 = v79 & v61;
        v77 = *(_QWORD *)(v59 + 16 * v75);
        if (v77 == v58)
        {
          v76 = (uint64_t *)(v59 + 16 * v75);
          goto LABEL_83;
        }
      }
LABEL_82:
      v76 = (uint64_t *)(v59 + 16 * v60);
LABEL_83:
      if (v65 >= *((_DWORD *)v76 + 2))
        return 1;
      *v56 = v57;
      *(a2 - 1) = v58;
      v80 = *v56;
      v81 = *v55;
      v82 = *(_QWORD *)(*(_QWORD *)a3 + 976);
      v83 = *(unsigned int *)(*(_QWORD *)a3 + 992);
      v84 = *v56 >> 4;
      if (!(_DWORD)v83)
        goto LABEL_91;
      v85 = v83 - 1;
      LODWORD(v86) = (v83 - 1) & (v84 ^ (v80 >> 9));
      v87 = (uint64_t *)(v82 + 16 * v86);
      v88 = *v87;
      if (*v87 == v80)
      {
        v89 = *((_DWORD *)v87 + 2);
      }
      else
      {
        v90 = 1;
        while (v88 != -4096)
        {
          v91 = v86 + v90++;
          v86 = v91 & v85;
          v88 = *(_QWORD *)(v82 + 16 * v86);
          if (v88 == v80)
            goto LABEL_92;
        }
LABEL_91:
        v86 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_92:
        v89 = *(_DWORD *)(v82 + 16 * v86 + 8);
        if (!(_DWORD)v83)
          goto LABEL_99;
        v85 = v83 - 1;
      }
      LODWORD(v92) = v85 & ((v81 >> 4) ^ (v81 >> 9));
      v93 = (uint64_t *)(v82 + 16 * v92);
      v94 = *v93;
      if (*v93 == v81)
        goto LABEL_100;
      v95 = 1;
      while (v94 != -4096)
      {
        v96 = v92 + v95++;
        v92 = v96 & v85;
        v94 = *(_QWORD *)(v82 + 16 * v92);
        if (v94 == v81)
        {
          v93 = (uint64_t *)(v82 + 16 * v92);
          goto LABEL_100;
        }
      }
LABEL_99:
      v93 = (uint64_t *)(v82 + 16 * v83);
LABEL_100:
      if (v89 >= *((_DWORD *)v93 + 2))
        return 1;
      *v55 = v80;
      *v56 = v81;
      v97 = a1[1];
      v98 = *(_QWORD *)(*(_QWORD *)a3 + 976);
      v99 = *(unsigned int *)(*(_QWORD *)a3 + 992);
      if (!(_DWORD)v99)
        goto LABEL_108;
      v100 = v99 - 1;
      LODWORD(v101) = (v99 - 1) & (v84 ^ (v80 >> 9));
      v102 = (uint64_t *)(v98 + 16 * v101);
      v103 = *v102;
      if (*v102 == v80)
      {
        v104 = *((_DWORD *)v102 + 2);
      }
      else
      {
        v105 = 1;
        while (v103 != -4096)
        {
          v106 = v101 + v105++;
          v101 = v106 & v100;
          v103 = *(_QWORD *)(v98 + 16 * v101);
          if (v103 == v80)
            goto LABEL_109;
        }
LABEL_108:
        v101 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_109:
        v104 = *(_DWORD *)(v98 + 16 * v101 + 8);
        if (!(_DWORD)v99)
          goto LABEL_124;
        v100 = v99 - 1;
      }
      LODWORD(v107) = v100 & ((v97 >> 4) ^ (v97 >> 9));
      v108 = (uint64_t *)(v98 + 16 * v107);
      v109 = *v108;
      if (*v108 == v97)
        goto LABEL_116;
      v110 = 1;
      while (v109 != -4096)
      {
        v111 = v107 + v110++;
        v107 = v111 & v100;
        v109 = *(_QWORD *)(v98 + 16 * v107);
        if (v109 == v97)
        {
          v108 = (uint64_t *)(v98 + 16 * v107);
          goto LABEL_116;
        }
      }
LABEL_124:
      v108 = (uint64_t *)(v98 + 16 * v99);
LABEL_116:
      if (v104 >= *((_DWORD *)v108 + 2))
        return 1;
      a1[1] = v80;
      a1[2] = v97;
      v112 = *a1;
      v113 = *(_QWORD *)(*(_QWORD *)a3 + 976);
      v114 = *(unsigned int *)(*(_QWORD *)a3 + 992);
      if (!(_DWORD)v114)
        goto LABEL_125;
      v115 = v84 ^ (v80 >> 9);
      v116 = v114 - 1;
      LODWORD(v117) = (v114 - 1) & v115;
      v118 = (uint64_t *)(v113 + 16 * v117);
      v119 = *v118;
      if (*v118 == v80)
      {
        v120 = *((_DWORD *)v118 + 2);
      }
      else
      {
        v121 = 1;
        while (v119 != -4096)
        {
          v122 = v117 + v121++;
          v117 = v122 & v116;
          v119 = *(_QWORD *)(v113 + 16 * v117);
          if (v119 == v80)
            goto LABEL_126;
        }
LABEL_125:
        v117 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_126:
        v120 = *(_DWORD *)(v113 + 16 * v117 + 8);
        if (!(_DWORD)v114)
          goto LABEL_133;
        v116 = v114 - 1;
      }
      LODWORD(v123) = v116 & ((v112 >> 4) ^ (v112 >> 9));
      v124 = (uint64_t *)(v113 + 16 * v123);
      v125 = *v124;
      if (*v124 == v112)
        goto LABEL_134;
      v126 = 1;
      while (v125 != -4096)
      {
        v127 = v123 + v126++;
        v123 = v127 & v116;
        v125 = *(_QWORD *)(v113 + 16 * v123);
        if (v125 == v112)
        {
          v124 = (uint64_t *)(v113 + 16 * v123);
          goto LABEL_134;
        }
      }
LABEL_133:
      v124 = (uint64_t *)(v113 + 16 * v114);
LABEL_134:
      if (v120 < *((_DWORD *)v124 + 2))
      {
        *a1 = v80;
        a1[1] = v112;
      }
      return 1;
    default:
      v17 = a1 + 2;
      sub_1C5F5CC04(a1, a1 + 1, a1 + 2, a3);
      v18 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v19 = 0;
      v20 = *(_QWORD *)a3;
      break;
  }
  do
  {
    v21 = *v18;
    v22 = *v17;
    v23 = *(_QWORD *)(v20 + 976);
    v24 = *(unsigned int *)(v20 + 992);
    v25 = *v18 >> 4;
    if ((_DWORD)v24)
    {
      v26 = v24 - 1;
      LODWORD(v27) = (v24 - 1) & (v25 ^ (v21 >> 9));
      v28 = (uint64_t *)(v23 + 16 * v27);
      v29 = *v28;
      if (*v28 == v21)
      {
        v30 = *((_DWORD *)v28 + 2);
        goto LABEL_17;
      }
      v31 = 1;
      while (v29 != -4096)
      {
        v32 = v27 + v31++;
        v27 = v32 & v26;
        v29 = *(_QWORD *)(v23 + 16 * v27);
        if (v29 == v21)
          goto LABEL_15;
      }
    }
    v27 = *(unsigned int *)(v20 + 992);
LABEL_15:
    v30 = *(_DWORD *)(v23 + 16 * v27 + 8);
    if (!(_DWORD)v24)
      goto LABEL_22;
    v26 = v24 - 1;
LABEL_17:
    LODWORD(v33) = v26 & ((v22 >> 4) ^ (v22 >> 9));
    v34 = (uint64_t *)(v23 + 16 * v33);
    v35 = *v34;
    if (*v34 != v22)
    {
      v36 = 1;
      while (v35 != -4096)
      {
        v37 = v33 + v36++;
        v33 = v37 & v26;
        v35 = *(_QWORD *)(v23 + 16 * v33);
        if (v35 == v22)
        {
          v34 = (uint64_t *)(v23 + 16 * v33);
          goto LABEL_23;
        }
      }
LABEL_22:
      v34 = (uint64_t *)(v23 + 16 * v24);
    }
LABEL_23:
    if (v30 >= *((_DWORD *)v34 + 2))
      goto LABEL_47;
    v38 = v25 ^ (v21 >> 9);
    v39 = v18;
    while (1)
    {
      *v39 = v22;
      if (v17 == a1)
        break;
      v39 = v17;
      v40 = *--v17;
      v22 = v40;
      v41 = *(_QWORD *)(*(_QWORD *)a3 + 976);
      v42 = *(unsigned int *)(*(_QWORD *)a3 + 992);
      if ((_DWORD)v42)
      {
        v43 = v42 - 1;
        LODWORD(v44) = (v42 - 1) & v38;
        v45 = (uint64_t *)(v41 + 16 * v44);
        v46 = *v45;
        if (*v45 == v21)
        {
          v47 = *((_DWORD *)v45 + 2);
          goto LABEL_36;
        }
        v48 = 1;
        while (v46 != -4096)
        {
          v49 = v44 + v48++;
          v44 = v49 & v43;
          v46 = *(_QWORD *)(v41 + 16 * v44);
          if (v46 == v21)
            goto LABEL_34;
        }
      }
      v44 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_34:
      v47 = *(_DWORD *)(v41 + 16 * v44 + 8);
      if (!(_DWORD)v42)
        goto LABEL_41;
      v43 = v42 - 1;
LABEL_36:
      LODWORD(v50) = v43 & ((v22 >> 4) ^ (v22 >> 9));
      v51 = (uint64_t *)(v41 + 16 * v50);
      v52 = *v51;
      if (*v51 != v22)
      {
        v53 = 1;
        while (v52 != -4096)
        {
          v54 = v50 + v53++;
          v50 = v54 & v43;
          v52 = *(_QWORD *)(v41 + 16 * v50);
          if (v52 == v22)
          {
            v51 = (uint64_t *)(v41 + 16 * v50);
            goto LABEL_42;
          }
        }
LABEL_41:
        v51 = (uint64_t *)(v41 + 16 * v42);
      }
LABEL_42:
      if (v47 >= *((_DWORD *)v51 + 2))
        goto LABEL_45;
    }
    v39 = a1;
LABEL_45:
    *v39 = v21;
    if (++v19 == 8)
      return v18 + 1 == a2;
    v20 = *(_QWORD *)a3;
LABEL_47:
    v17 = v18++;
  }
  while (v18 != a2);
  return 1;
}

uint64_t *sub_1C5F5D7AC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  int v58;

  result = sub_1C5F5CC04(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = *(_QWORD *)(*(_QWORD *)a5 + 976);
  v14 = *(unsigned int *)(*(_QWORD *)a5 + 992);
  if ((_DWORD)v14)
  {
    v15 = v14 - 1;
    LODWORD(v16) = (v14 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    v17 = (uint64_t *)(v13 + 16 * v16);
    v18 = *v17;
    if (*v17 == v11)
    {
      v19 = *((_DWORD *)v17 + 2);
      goto LABEL_11;
    }
    v20 = 1;
    while (v18 != -4096)
    {
      v21 = v16 + v20++;
      v16 = v21 & v15;
      v18 = *(_QWORD *)(v13 + 16 * v16);
      if (v18 == v11)
        goto LABEL_9;
    }
  }
  v16 = *(unsigned int *)(*(_QWORD *)a5 + 992);
LABEL_9:
  v19 = *(_DWORD *)(v13 + 16 * v16 + 8);
  if (!(_DWORD)v14)
    goto LABEL_16;
  v15 = v14 - 1;
LABEL_11:
  LODWORD(v22) = v15 & ((v12 >> 4) ^ (v12 >> 9));
  v23 = (uint64_t *)(v13 + 16 * v22);
  v24 = *v23;
  if (*v23 == v12)
    goto LABEL_17;
  v25 = 1;
  while (v24 != -4096)
  {
    v26 = v22 + v25++;
    v22 = v26 & v15;
    v24 = *(_QWORD *)(v13 + 16 * v22);
    if (v24 == v12)
    {
      v23 = (uint64_t *)(v13 + 16 * v22);
      goto LABEL_17;
    }
  }
LABEL_16:
  v23 = (uint64_t *)(v13 + 16 * v14);
LABEL_17:
  if (v19 >= *((_DWORD *)v23 + 2))
    return result;
  *a3 = v11;
  *a4 = v12;
  v27 = *a3;
  v28 = *a2;
  v29 = *(_QWORD *)(*(_QWORD *)a5 + 976);
  v30 = *(unsigned int *)(*(_QWORD *)a5 + 992);
  if ((_DWORD)v30)
  {
    v31 = v30 - 1;
    LODWORD(v32) = (v30 - 1) & ((v27 >> 4) ^ (v27 >> 9));
    v33 = (uint64_t *)(v29 + 16 * v32);
    v34 = *v33;
    if (*v33 == v27)
    {
      v35 = *((_DWORD *)v33 + 2);
      goto LABEL_28;
    }
    v36 = 1;
    while (v34 != -4096)
    {
      v37 = v32 + v36++;
      v32 = v37 & v31;
      v34 = *(_QWORD *)(v29 + 16 * v32);
      if (v34 == v27)
        goto LABEL_26;
    }
  }
  v32 = *(unsigned int *)(*(_QWORD *)a5 + 992);
LABEL_26:
  v35 = *(_DWORD *)(v29 + 16 * v32 + 8);
  if (!(_DWORD)v30)
    goto LABEL_41;
  v31 = v30 - 1;
LABEL_28:
  LODWORD(v38) = v31 & ((v28 >> 4) ^ (v28 >> 9));
  v39 = (uint64_t *)(v29 + 16 * v38);
  v40 = *v39;
  if (*v39 == v28)
    goto LABEL_33;
  v41 = 1;
  while (v40 != -4096)
  {
    v42 = v38 + v41++;
    v38 = v42 & v31;
    v40 = *(_QWORD *)(v29 + 16 * v38);
    if (v40 == v28)
    {
      v39 = (uint64_t *)(v29 + 16 * v38);
      goto LABEL_33;
    }
  }
LABEL_41:
  v39 = (uint64_t *)(v29 + 16 * v30);
LABEL_33:
  if (v35 >= *((_DWORD *)v39 + 2))
    return result;
  *a2 = v27;
  *a3 = v28;
  v43 = *a2;
  v44 = *a1;
  v45 = *(_QWORD *)(*(_QWORD *)a5 + 976);
  v46 = *(unsigned int *)(*(_QWORD *)a5 + 992);
  if ((_DWORD)v46)
  {
    v47 = v46 - 1;
    LODWORD(v48) = (v46 - 1) & ((v43 >> 4) ^ (v43 >> 9));
    v49 = (uint64_t *)(v45 + 16 * v48);
    v50 = *v49;
    if (*v49 == v43)
    {
      v51 = *((_DWORD *)v49 + 2);
      goto LABEL_45;
    }
    v52 = 1;
    while (v50 != -4096)
    {
      v53 = v48 + v52++;
      v48 = v53 & v47;
      v50 = *(_QWORD *)(v45 + 16 * v48);
      if (v50 == v43)
        goto LABEL_43;
    }
  }
  v48 = *(unsigned int *)(*(_QWORD *)a5 + 992);
LABEL_43:
  v51 = *(_DWORD *)(v45 + 16 * v48 + 8);
  if (!(_DWORD)v46)
    goto LABEL_53;
  v47 = v46 - 1;
LABEL_45:
  LODWORD(v54) = v47 & ((v44 >> 4) ^ (v44 >> 9));
  v55 = (uint64_t *)(v45 + 16 * v54);
  v56 = *v55;
  if (*v55 == v44)
    goto LABEL_50;
  v57 = 1;
  while (v56 != -4096)
  {
    v58 = v54 + v57++;
    v54 = v58 & v47;
    v56 = *(_QWORD *)(v45 + 16 * v54);
    if (v56 == v44)
    {
      v55 = (uint64_t *)(v45 + 16 * v54);
      goto LABEL_50;
    }
  }
LABEL_53:
  v55 = (uint64_t *)(v45 + 16 * v46);
LABEL_50:
  if (v51 < *((_DWORD *)v55 + 2))
  {
    *a1 = v43;
    *a2 = v44;
  }
  return result;
}

uint64_t sub_1C5F5DA9C(uint64_t a1, int a2, int a3, int a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  int v12;
  _DWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v18;
  uint64_t result;

  if (a2)
  {
    v5 = ((37 * a4) | ((unint64_t)(37 * a3) << 32))
       + ~((unint64_t)(37 * a4) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_DWORD *)(a1 + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
LABEL_22:
      result = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (v11 != -1 || v12 != -1)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v12 == -2;
        if (v16 && v11 == -2)
          v14 = v10;
        v18 = v9 + v15++;
        v9 = v18 & v8;
        v10 = (_DWORD *)(a1 + 16 * (v18 & v8));
        v11 = *v10;
        v12 = v10[1];
        if (*v10 == a3 && v12 == a4)
          goto LABEL_22;
      }
      result = 0;
      if (v14)
        v10 = v14;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
  *a5 = v10;
  return result;
}

_QWORD *sub_1C5F5DB74(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4 + 4;
      do
      {
        v14 = *(_DWORD *)(v13 - 4);
        v15 = *(_DWORD *)v13;
        if ((v14 != -1 || v15 != -1) && (v14 != -2 || v15 != -2))
        {
          v21 = 0;
          sub_1C5F5DA9C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, v15, &v21);
          v18 = v21;
          *v21 = *(_DWORD *)(v13 - 4);
          v18[1] = *(_DWORD *)v13;
          *((_QWORD *)v18 + 1) = *(_QWORD *)(v13 + 4);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = 16 * v19;
    do
    {
      *result = -1;
      result += 2;
      v20 -= 16;
    }
    while (v20);
  }
  return result;
}

void sub_1C5F5DCB8(_QWORD *a1, uint64_t a2, uint64_t a3, _BYTE *a4, _BYTE *a5, uint64_t a6, uint64_t a7)
{
  int64_t v12;
  char *v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unsigned __int8 *v21;
  char *v22;
  _QWORD v23[3];
  void **v24;

  v12 = a5 - a4;
  if (a5 == a4)
  {
    v15 = 0;
    v14 = 0;
  }
  else
  {
    if (v12 < 0)
      goto LABEL_14;
    v14 = (char *)operator new(a5 - a4);
    v15 = &v14[8 * (v12 >> 3)];
    memcpy(v14, a4, v12);
  }
  v16 = a7 - a6;
  if (a7 == a6)
  {
    v20 = 0;
    v22 = 0;
    v18 = 0;
    goto LABEL_13;
  }
  if (v16 < 0)
LABEL_14:
    abort();
  v17 = v16 >> 3;
  v18 = (char *)operator new(v16);
  v19 = 0;
  v20 = &v18[8 * v17];
  do
  {
    v21 = *(unsigned __int8 **)(a6 + v19);
    *(_QWORD *)&v18[v19] = v21;
    if (v21)
      llvm::MetadataTracking::track((uint64_t)&v18[v19], v21, 2);
    v19 += 8;
  }
  while (a6 + v19 != a7);
  v22 = &v18[v19];
LABEL_13:
  *a1 = a2;
  a1[1] = a3;
  a1[2] = v14;
  a1[3] = v15;
  a1[4] = v15;
  a1[5] = v18;
  a1[6] = v22;
  a1[7] = v20;
  memset(v23, 0, sizeof(v23));
  v24 = (void **)v23;
  sub_1C5F60160(&v24);
}

unint64_t sub_1C5F5DDD0(unint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t *v41;
  unsigned int *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int *v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unsigned int *v65;
  int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned int *v79;
  int v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t *v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unsigned int *v100;
  int v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unsigned int *v113;
  int v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t *v122;
  BOOL v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  unsigned int v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int *v142;
  int v143;
  uint64_t v144;
  int v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  unsigned int *v153;
  int v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int *v167;
  int v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  _QWORD *v182;
  unsigned int *v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int *v186;
  int v187;
  uint64_t v188;
  int v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int *v199;
  int v200;
  int v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  int v206;
  int v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t *v229;
  BOOL v231;
  uint64_t v232;
  uint64_t *v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  int v244;
  int v245;
  uint64_t *v246;
  uint64_t v247;
  int v248;
  int v249;
  unsigned int v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  int v259;
  int v260;
  uint64_t *v261;
  uint64_t v262;
  int v263;
  int v264;
  int64_t v265;
  int64_t v266;
  int64_t v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  unsigned int v277;
  int v278;
  int v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  int v283;
  int v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  unsigned int v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  unsigned int v292;
  int v293;
  int v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  int v298;
  int v299;
  unsigned int v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  unsigned int v310;
  int v311;
  int v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  int v316;
  int v317;
  unsigned int v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  unsigned int v322;
  int v323;
  int v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  int v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  unsigned int v342;
  int v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  int v348;
  int v349;
  uint64_t v350;
  unint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unsigned int v357;
  unsigned int v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  int v362;
  int v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  int v367;
  int v368;
  unsigned int v369;
  uint64_t *v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  int v377;
  int v378;
  uint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  int v382;
  int v383;
  uint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unsigned int v391;
  unsigned int v392;
  uint64_t v393;
  uint64_t *v394;
  uint64_t v395;
  unsigned int v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  int v401;
  unsigned int v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unsigned int v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  unsigned int v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  uint64_t v421;
  uint64_t *v422;
  uint64_t v423;
  int v424;
  int v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t v428;
  int v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unsigned int v435;
  unsigned int v436;
  uint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  unsigned int v440;
  int v441;
  int v442;
  uint64_t v443;
  uint64_t *v444;
  uint64_t v445;
  int v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t *v453;
  uint64_t v454;
  unsigned int v455;
  int v456;
  int v457;
  uint64_t v458;
  uint64_t *v459;
  uint64_t v460;
  int v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unsigned int v466;
  unsigned int v467;
  uint64_t v468;
  uint64_t *v469;
  uint64_t v470;
  unsigned int v471;
  int v472;
  int v473;
  uint64_t v474;
  uint64_t *v475;
  uint64_t v476;
  int v477;
  int v478;

  v9 = (uint64_t *)result;
LABEL_2:
  v10 = a2 - 1;
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = a2 - v11;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v209 = *(a2 - 1);
        v210 = *v11;
        v211 = *(_QWORD *)(*(_QWORD *)a3 + 976);
        v212 = *(unsigned int *)(*(_QWORD *)a3 + 992);
        if (!(_DWORD)v212)
          goto LABEL_497;
        v213 = v212 - 1;
        LODWORD(v214) = (v212 - 1) & ((v209 >> 4) ^ (v209 >> 9));
        v215 = (uint64_t *)(v211 + 16 * v214);
        v216 = *v215;
        if (*v215 == v209)
        {
          v217 = *((_DWORD *)v215 + 2);
          goto LABEL_500;
        }
        v417 = 1;
        while (v216 != -4096)
        {
          v418 = v214 + v417++;
          v214 = v418 & v213;
          v216 = *(_QWORD *)(v211 + 16 * v214);
          if (v216 == v209)
            goto LABEL_498;
        }
LABEL_497:
        v214 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_498:
        v217 = *(_DWORD *)(v211 + 16 * v214 + 8);
        if (!(_DWORD)v212)
          goto LABEL_513;
        v213 = v212 - 1;
LABEL_500:
        LODWORD(v421) = v213 & ((v210 >> 4) ^ (v210 >> 9));
        v422 = (uint64_t *)(v211 + 16 * v421);
        v423 = *v422;
        if (*v422 == v210)
          goto LABEL_514;
        v424 = 1;
        while (v423 != -4096)
        {
          v425 = v421 + v424++;
          v421 = v425 & v213;
          v423 = *(_QWORD *)(v211 + 16 * v421);
          if (v423 == v210)
          {
            v422 = (uint64_t *)(v211 + 16 * v421);
            goto LABEL_514;
          }
        }
LABEL_513:
        v422 = (uint64_t *)(v211 + 16 * v212);
LABEL_514:
        if (v217 < *((_DWORD *)v422 + 2))
        {
          *v11 = v209;
          *(a2 - 1) = v210;
        }
        return result;
      case 3:
        return (unint64_t)sub_1C5F5CC04(v11, v11 + 1, a2 - 1, a3);
      case 4:
        return (unint64_t)sub_1C5F5D7AC(v11, v11 + 1, v11 + 2, a2 - 1, a3);
      case 5:
        v218 = v11 + 2;
        v219 = v11 + 3;
        result = (unint64_t)sub_1C5F5D7AC(v11, v11 + 1, v11 + 2, v11 + 3, a3);
        v220 = *(a2 - 1);
        v221 = v11[3];
        v222 = *(_QWORD *)(*(_QWORD *)a3 + 976);
        v223 = *(unsigned int *)(*(_QWORD *)a3 + 992);
        if (!(_DWORD)v223)
          goto LABEL_505;
        v224 = v223 - 1;
        LODWORD(v225) = (v223 - 1) & ((v220 >> 4) ^ (v220 >> 9));
        v226 = (uint64_t *)(v222 + 16 * v225);
        v227 = *v226;
        if (*v226 == v220)
        {
          v228 = *((_DWORD *)v226 + 2);
          goto LABEL_508;
        }
        v419 = 1;
        while (v227 != -4096)
        {
          v420 = v225 + v419++;
          v225 = v420 & v224;
          v227 = *(_QWORD *)(v222 + 16 * v225);
          if (v227 == v220)
            goto LABEL_506;
        }
LABEL_505:
        v225 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_506:
        v228 = *(_DWORD *)(v222 + 16 * v225 + 8);
        if (!(_DWORD)v223)
          goto LABEL_516;
        v224 = v223 - 1;
LABEL_508:
        LODWORD(v426) = v224 & ((v221 >> 4) ^ (v221 >> 9));
        v427 = (uint64_t *)(v222 + 16 * v426);
        v428 = *v427;
        if (*v427 == v221)
          goto LABEL_517;
        v429 = 1;
        while (v428 != -4096)
        {
          v430 = v426 + v429++;
          v426 = v430 & v224;
          v428 = *(_QWORD *)(v222 + 16 * v426);
          if (v428 == v221)
          {
            v427 = (uint64_t *)(v222 + 16 * v426);
            goto LABEL_517;
          }
        }
LABEL_516:
        v427 = (uint64_t *)(v222 + 16 * v223);
LABEL_517:
        if (v228 >= *((_DWORD *)v427 + 2))
          return result;
        *v219 = v220;
        *(a2 - 1) = v221;
        v431 = *v219;
        v432 = *v218;
        v433 = *(_QWORD *)(*(_QWORD *)a3 + 976);
        v434 = *(unsigned int *)(*(_QWORD *)a3 + 992);
        v435 = *v219 >> 4;
        if (!(_DWORD)v434)
          goto LABEL_525;
        v436 = v434 - 1;
        LODWORD(v437) = (v434 - 1) & (v435 ^ (v431 >> 9));
        v438 = (uint64_t *)(v433 + 16 * v437);
        v439 = *v438;
        if (*v438 == v431)
        {
          v440 = *((_DWORD *)v438 + 2);
        }
        else
        {
          v441 = 1;
          while (v439 != -4096)
          {
            v442 = v437 + v441++;
            v437 = v442 & v436;
            v439 = *(_QWORD *)(v433 + 16 * v437);
            if (v439 == v431)
              goto LABEL_526;
          }
LABEL_525:
          v437 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_526:
          v440 = *(_DWORD *)(v433 + 16 * v437 + 8);
          if (!(_DWORD)v434)
            goto LABEL_533;
          v436 = v434 - 1;
        }
        LODWORD(v443) = v436 & ((v432 >> 4) ^ (v432 >> 9));
        v444 = (uint64_t *)(v433 + 16 * v443);
        v445 = *v444;
        if (*v444 == v432)
          goto LABEL_534;
        v446 = 1;
        while (v445 != -4096)
        {
          v447 = v443 + v446++;
          v443 = v447 & v436;
          v445 = *(_QWORD *)(v433 + 16 * v443);
          if (v445 == v432)
          {
            v444 = (uint64_t *)(v433 + 16 * v443);
            goto LABEL_534;
          }
        }
LABEL_533:
        v444 = (uint64_t *)(v433 + 16 * v434);
LABEL_534:
        if (v440 >= *((_DWORD *)v444 + 2))
          return result;
        *v218 = v431;
        *v219 = v432;
        v448 = v11[1];
        v449 = *(_QWORD *)(*(_QWORD *)a3 + 976);
        v450 = *(unsigned int *)(*(_QWORD *)a3 + 992);
        if (!(_DWORD)v450)
          goto LABEL_542;
        v451 = v450 - 1;
        LODWORD(v452) = (v450 - 1) & (v435 ^ (v431 >> 9));
        v453 = (uint64_t *)(v449 + 16 * v452);
        v454 = *v453;
        if (*v453 == v431)
        {
          v455 = *((_DWORD *)v453 + 2);
        }
        else
        {
          v456 = 1;
          while (v454 != -4096)
          {
            v457 = v452 + v456++;
            v452 = v457 & v451;
            v454 = *(_QWORD *)(v449 + 16 * v452);
            if (v454 == v431)
              goto LABEL_543;
          }
LABEL_542:
          v452 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_543:
          v455 = *(_DWORD *)(v449 + 16 * v452 + 8);
          if (!(_DWORD)v450)
            goto LABEL_558;
          v451 = v450 - 1;
        }
        LODWORD(v458) = v451 & ((v448 >> 4) ^ (v448 >> 9));
        v459 = (uint64_t *)(v449 + 16 * v458);
        v460 = *v459;
        if (*v459 == v448)
          goto LABEL_550;
        v461 = 1;
        while (v460 != -4096)
        {
          v462 = v458 + v461++;
          v458 = v462 & v451;
          v460 = *(_QWORD *)(v449 + 16 * v458);
          if (v460 == v448)
          {
            v459 = (uint64_t *)(v449 + 16 * v458);
            goto LABEL_550;
          }
        }
LABEL_558:
        v459 = (uint64_t *)(v449 + 16 * v450);
LABEL_550:
        if (v455 >= *((_DWORD *)v459 + 2))
          return result;
        v11[1] = v431;
        v11[2] = v448;
        v463 = *v11;
        v464 = *(_QWORD *)(*(_QWORD *)a3 + 976);
        v465 = *(unsigned int *)(*(_QWORD *)a3 + 992);
        if (!(_DWORD)v465)
          goto LABEL_559;
        v466 = v435 ^ (v431 >> 9);
        v467 = v465 - 1;
        LODWORD(v468) = (v465 - 1) & v466;
        v469 = (uint64_t *)(v464 + 16 * v468);
        v470 = *v469;
        if (*v469 == v431)
        {
          v471 = *((_DWORD *)v469 + 2);
        }
        else
        {
          v472 = 1;
          while (v470 != -4096)
          {
            v473 = v468 + v472++;
            v468 = v473 & v467;
            v470 = *(_QWORD *)(v464 + 16 * v468);
            if (v470 == v431)
              goto LABEL_560;
          }
LABEL_559:
          v468 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_560:
          v471 = *(_DWORD *)(v464 + 16 * v468 + 8);
          if (!(_DWORD)v465)
            goto LABEL_567;
          v467 = v465 - 1;
        }
        LODWORD(v474) = v467 & ((v463 >> 4) ^ (v463 >> 9));
        v475 = (uint64_t *)(v464 + 16 * v474);
        v476 = *v475;
        if (*v475 == v463)
          goto LABEL_568;
        v477 = 1;
        while (v476 != -4096)
        {
          v478 = v474 + v477++;
          v474 = v478 & v467;
          v476 = *(_QWORD *)(v464 + 16 * v474);
          if (v476 == v463)
          {
            v475 = (uint64_t *)(v464 + 16 * v474);
            goto LABEL_568;
          }
        }
LABEL_567:
        v475 = (uint64_t *)(v464 + 16 * v465);
LABEL_568:
        if (v471 < *((_DWORD *)v475 + 2))
        {
          *v11 = v431;
          v11[1] = v463;
        }
        return result;
      default:
        if (v12 <= 191)
        {
          v229 = v11 + 1;
          v231 = v11 == a2 || v229 == a2;
          if ((a5 & 1) != 0)
          {
            if (v231)
              return result;
            v232 = *(_QWORD *)a3;
            v233 = v11;
            while (1)
            {
              v234 = v229;
              v236 = *v233;
              v235 = (uint64_t *)v233[1];
              v237 = *(_QWORD *)(v232 + 976);
              v238 = *(unsigned int *)(v232 + 992);
              v239 = v235 >> 4;
              if ((_DWORD)v238)
              {
                v240 = v238 - 1;
                LODWORD(v241) = (v238 - 1) & (v239 ^ (v235 >> 9));
                v242 = v237 + 16 * v241;
                result = *(_QWORD *)v242;
                if (*(uint64_t **)v242 == v235)
                {
                  v243 = *(_DWORD *)(v242 + 8);
                  goto LABEL_272;
                }
                v244 = 1;
                while (result != -4096)
                {
                  v245 = v241 + v244++;
                  v241 = v245 & v240;
                  result = *(_QWORD *)(v237 + 16 * v241);
                  if ((uint64_t *)result == v235)
                    goto LABEL_270;
                }
              }
              v241 = *(unsigned int *)(v232 + 992);
LABEL_270:
              v243 = *(_DWORD *)(v237 + 16 * v241 + 8);
              if ((_DWORD)v238)
              {
                v240 = v238 - 1;
LABEL_272:
                result = v240 & ((v236 >> 4) ^ (v236 >> 9));
                v246 = (uint64_t *)(v237 + 16 * result);
                v247 = *v246;
                if (*v246 != v236)
                {
                  v248 = 1;
                  do
                  {
                    if (v247 == -4096)
                      goto LABEL_277;
                    v249 = result + v248++;
                    result = v249 & v240;
                    v247 = *(_QWORD *)(v237 + 16 * result);
                  }
                  while (v247 != v236);
                  v246 = (uint64_t *)(v237 + 16 * result);
                }
                goto LABEL_278;
              }
LABEL_277:
              v246 = (uint64_t *)(v237 + 16 * v238);
LABEL_278:
              if (v243 >= *((_DWORD *)v246 + 2))
                goto LABEL_301;
              v250 = v239 ^ (v235 >> 9);
              v251 = v234;
              while (1)
              {
                *v251 = v236;
                if (v233 == v11)
                  break;
                v251 = v233;
                v252 = *--v233;
                v236 = v252;
                v253 = *(_QWORD *)(*(_QWORD *)a3 + 976);
                v254 = *(unsigned int *)(*(_QWORD *)a3 + 992);
                if ((_DWORD)v254)
                {
                  v255 = v254 - 1;
                  LODWORD(v256) = (v254 - 1) & v250;
                  v257 = v253 + 16 * v256;
                  result = *(_QWORD *)v257;
                  if (*(uint64_t **)v257 == v235)
                  {
                    v258 = *(_DWORD *)(v257 + 8);
                    goto LABEL_291;
                  }
                  v259 = 1;
                  while (result != -4096)
                  {
                    v260 = v256 + v259++;
                    v256 = v260 & v255;
                    result = *(_QWORD *)(v253 + 16 * v256);
                    if ((uint64_t *)result == v235)
                      goto LABEL_289;
                  }
                }
                v256 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_289:
                v258 = *(_DWORD *)(v253 + 16 * v256 + 8);
                if ((_DWORD)v254)
                {
                  v255 = v254 - 1;
LABEL_291:
                  result = v255 & ((v236 >> 4) ^ (v236 >> 9));
                  v261 = (uint64_t *)(v253 + 16 * result);
                  v262 = *v261;
                  if (*v261 != v236)
                  {
                    v263 = 1;
                    do
                    {
                      if (v262 == -4096)
                        goto LABEL_296;
                      v264 = result + v263++;
                      result = v264 & v255;
                      v262 = *(_QWORD *)(v253 + 16 * result);
                    }
                    while (v262 != v236);
                    v261 = (uint64_t *)(v253 + 16 * result);
                  }
                  goto LABEL_297;
                }
LABEL_296:
                v261 = (uint64_t *)(v253 + 16 * v254);
LABEL_297:
                if (v258 >= *((_DWORD *)v261 + 2))
                  goto LABEL_300;
              }
              v251 = v11;
LABEL_300:
              *v251 = (uint64_t)v235;
              v232 = *(_QWORD *)a3;
LABEL_301:
              v229 = v234 + 1;
              v233 = v234;
              if (v234 + 1 == a2)
                return result;
            }
          }
          if (v231)
            return result;
          v385 = *(_QWORD *)a3;
          while (1)
          {
            v386 = v229;
            v388 = *v9;
            v387 = v9[1];
            v389 = *(_QWORD *)(v385 + 976);
            v390 = *(unsigned int *)(v385 + 992);
            v391 = v387 >> 4;
            if ((_DWORD)v390)
            {
              v392 = v390 - 1;
              LODWORD(v393) = (v390 - 1) & (v391 ^ (v387 >> 9));
              v394 = (uint64_t *)(v389 + 16 * v393);
              v395 = *v394;
              if (*v394 == v387)
              {
                v396 = *((_DWORD *)v394 + 2);
                goto LABEL_461;
              }
              result = 1;
              while (v395 != -4096)
              {
                v397 = v393 + result;
                result = (result + 1);
                v393 = v397 & v392;
                v395 = *(_QWORD *)(v389 + 16 * v393);
                if (v395 == v387)
                  goto LABEL_459;
              }
            }
            v393 = *(unsigned int *)(v385 + 992);
LABEL_459:
            v396 = *(_DWORD *)(v389 + 16 * v393 + 8);
            if (!(_DWORD)v390)
            {
LABEL_466:
              v399 = v389 + 16 * v390;
              goto LABEL_467;
            }
            v392 = v390 - 1;
LABEL_461:
            LODWORD(v398) = v392 & ((v388 >> 4) ^ (v388 >> 9));
            v399 = v389 + 16 * v398;
            result = *(_QWORD *)v399;
            if (*(_QWORD *)v399 != v388)
            {
              v400 = 1;
              do
              {
                if (result == -4096)
                  goto LABEL_466;
                v401 = v398 + v400++;
                v398 = v401 & v392;
                result = *(_QWORD *)(v389 + 16 * v398);
              }
              while (result != v388);
              v399 = v389 + 16 * v398;
            }
LABEL_467:
            if (v396 < *(_DWORD *)(v399 + 8))
            {
              v402 = v391 ^ (v387 >> 9);
              v403 = v386;
              while (1)
              {
                *v403 = v388;
                v403 = v9;
                v404 = *--v9;
                v388 = v404;
                v405 = *(_QWORD *)(*(_QWORD *)a3 + 976);
                v406 = *(unsigned int *)(*(_QWORD *)a3 + 992);
                if ((_DWORD)v406)
                {
                  v407 = v406 - 1;
                  LODWORD(v408) = (v406 - 1) & v402;
                  v409 = (uint64_t *)(v405 + 16 * v408);
                  v410 = *v409;
                  if (*v409 == v387)
                  {
                    v411 = *((_DWORD *)v409 + 2);
                    goto LABEL_479;
                  }
                  result = 1;
                  while (v410 != -4096)
                  {
                    v412 = v408 + result;
                    result = (result + 1);
                    v408 = v412 & v407;
                    v410 = *(_QWORD *)(v405 + 16 * v408);
                    if (v410 == v387)
                      goto LABEL_477;
                  }
                }
                v408 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_477:
                v411 = *(_DWORD *)(v405 + 16 * v408 + 8);
                if ((_DWORD)v406)
                {
                  v407 = v406 - 1;
LABEL_479:
                  LODWORD(v413) = v407 & ((v388 >> 4) ^ (v388 >> 9));
                  v414 = v405 + 16 * v413;
                  result = *(_QWORD *)v414;
                  if (*(_QWORD *)v414 != v388)
                  {
                    v415 = 1;
                    do
                    {
                      if (result == -4096)
                        goto LABEL_484;
                      v416 = v413 + v415++;
                      v413 = v416 & v407;
                      result = *(_QWORD *)(v405 + 16 * v413);
                    }
                    while (result != v388);
                    v414 = v405 + 16 * v413;
                  }
                  goto LABEL_485;
                }
LABEL_484:
                v414 = v405 + 16 * v406;
LABEL_485:
                if (v411 >= *(_DWORD *)(v414 + 8))
                {
                  *v403 = v387;
                  v385 = *(_QWORD *)a3;
                  break;
                }
              }
            }
            v229 = v386 + 1;
            v9 = v386;
            if (v386 + 1 == a2)
              return result;
          }
        }
        if (!a4)
        {
          if (v11 == a2)
            return result;
          v265 = (unint64_t)(v13 - 2) >> 1;
          v266 = v265;
          while (1)
          {
            v267 = v266;
            if (v265 < v266)
              goto LABEL_384;
            v268 = (2 * v266) | 1;
            v269 = &v11[v268];
            v270 = *(_QWORD *)a3;
            if (2 * v267 + 2 >= v13)
            {
              v272 = *(_QWORD *)(v270 + 976);
              LODWORD(v270) = *(_DWORD *)(v270 + 992);
              goto LABEL_326;
            }
            v271 = v269[1];
            v272 = *(_QWORD *)(v270 + 976);
            v270 = *(unsigned int *)(v270 + 992);
            if ((_DWORD)v270)
            {
              v273 = v270 - 1;
              LODWORD(v274) = (v270 - 1) & ((*v269 >> 4) ^ (*v269 >> 9));
              v275 = (uint64_t *)(v272 + 16 * v274);
              v276 = *v275;
              if (*v275 == *v269)
              {
                v277 = *((_DWORD *)v275 + 2);
                goto LABEL_318;
              }
              v278 = 1;
              while (v276 != -4096)
              {
                v279 = v274 + v278++;
                v274 = v279 & v273;
                v276 = *(_QWORD *)(v272 + 16 * v274);
                if (v276 == *v269)
                  goto LABEL_316;
              }
            }
            v274 = v270;
LABEL_316:
            v277 = *(_DWORD *)(v272 + 16 * v274 + 8);
            if ((_DWORD)v270)
            {
              v273 = v270 - 1;
LABEL_318:
              LODWORD(v280) = v273 & ((v271 >> 4) ^ (v271 >> 9));
              v281 = (uint64_t *)(v272 + 16 * v280);
              v282 = *v281;
              if (*v281 != v271)
              {
                v283 = 1;
                do
                {
                  if (v282 == -4096)
                    goto LABEL_323;
                  v284 = v280 + v283++;
                  v280 = v284 & v273;
                  v282 = *(_QWORD *)(v272 + 16 * v280);
                }
                while (v282 != v271);
                v281 = (uint64_t *)(v272 + 16 * v280);
              }
              goto LABEL_324;
            }
LABEL_323:
            v281 = (uint64_t *)(v272 + 16 * v270);
LABEL_324:
            if (v277 < *((_DWORD *)v281 + 2))
            {
              ++v269;
              v268 = 2 * v267 + 2;
            }
LABEL_326:
            v285 = &v11[v267];
            v286 = *v269;
            v287 = *v285;
            result = *v285 >> 4;
            if ((_DWORD)v270)
            {
              v288 = v270 - 1;
              LODWORD(v289) = ((v286 >> 4) ^ (v286 >> 9)) & (v270 - 1);
              v290 = (uint64_t *)(v272 + 16 * v289);
              v291 = *v290;
              if (*v290 == v286)
              {
                v292 = *((_DWORD *)v290 + 2);
                goto LABEL_336;
              }
              v293 = 1;
              while (v291 != -4096)
              {
                v294 = v289 + v293++;
                v289 = v294 & v288;
                v291 = *(_QWORD *)(v272 + 16 * v289);
                if (v291 == v286)
                  goto LABEL_334;
              }
            }
            v289 = v270;
LABEL_334:
            v292 = *(_DWORD *)(v272 + 16 * v289 + 8);
            if (!(_DWORD)v270)
            {
LABEL_341:
              v296 = (uint64_t *)(v272 + 16 * v270);
              goto LABEL_342;
            }
            v288 = v270 - 1;
LABEL_336:
            LODWORD(v295) = v288 & (result ^ (v287 >> 9));
            v296 = (uint64_t *)(v272 + 16 * v295);
            v297 = *v296;
            if (*v296 != v287)
            {
              v298 = 1;
              do
              {
                if (v297 == -4096)
                  goto LABEL_341;
                v299 = v295 + v298++;
                v295 = v299 & v288;
                v297 = *(_QWORD *)(v272 + 16 * v295);
              }
              while (v297 != v287);
              v296 = (uint64_t *)(v272 + 16 * v295);
            }
LABEL_342:
            if (v292 < *((_DWORD *)v296 + 2))
              goto LABEL_384;
            v300 = result ^ (v287 >> 9);
            do
            {
              v301 = v269;
              *v285 = v286;
              if (v265 < v268)
                break;
              v302 = (2 * v268) | 1;
              v269 = &v11[v302];
              v268 = 2 * v268 + 2;
              v303 = *(_QWORD *)a3;
              if (v268 >= v13)
              {
                v305 = *(_QWORD *)(v303 + 976);
                LODWORD(v303) = *(_DWORD *)(v303 + 992);
                v268 = v302;
                goto LABEL_366;
              }
              v304 = v269[1];
              v305 = *(_QWORD *)(v303 + 976);
              v303 = *(unsigned int *)(v303 + 992);
              if ((_DWORD)v303)
              {
                v306 = v303 - 1;
                LODWORD(v307) = (v303 - 1) & ((*v269 >> 4) ^ (*v269 >> 9));
                v308 = (uint64_t *)(v305 + 16 * v307);
                v309 = *v308;
                if (*v308 == *v269)
                {
                  v310 = *((_DWORD *)v308 + 2);
                  goto LABEL_357;
                }
                v311 = 1;
                while (v309 != -4096)
                {
                  v312 = v307 + v311++;
                  v307 = v312 & v306;
                  v309 = *(_QWORD *)(v305 + 16 * v307);
                  if (v309 == *v269)
                    goto LABEL_355;
                }
              }
              v307 = v303;
LABEL_355:
              v310 = *(_DWORD *)(v305 + 16 * v307 + 8);
              if ((_DWORD)v303)
              {
                v306 = v303 - 1;
LABEL_357:
                LODWORD(v313) = v306 & ((v304 >> 4) ^ (v304 >> 9));
                v314 = (uint64_t *)(v305 + 16 * v313);
                v315 = *v314;
                if (*v314 != v304)
                {
                  v316 = 1;
                  do
                  {
                    if (v315 == -4096)
                      goto LABEL_362;
                    v317 = v313 + v316++;
                    v313 = v317 & v306;
                    v315 = *(_QWORD *)(v305 + 16 * v313);
                  }
                  while (v315 != v304);
                  v314 = (uint64_t *)(v305 + 16 * v313);
                }
                goto LABEL_363;
              }
LABEL_362:
              v314 = (uint64_t *)(v305 + 16 * v303);
LABEL_363:
              if (v310 >= *((_DWORD *)v314 + 2))
                v268 = v302;
              else
                ++v269;
LABEL_366:
              v286 = *v269;
              if ((_DWORD)v303)
              {
                v318 = v303 - 1;
                LODWORD(v319) = ((v286 >> 4) ^ (v286 >> 9)) & (v303 - 1);
                v320 = (uint64_t *)(v305 + 16 * v319);
                v321 = *v320;
                if (*v320 == v286)
                {
                  v322 = *((_DWORD *)v320 + 2);
                  goto LABEL_376;
                }
                v323 = 1;
                while (v321 != -4096)
                {
                  v324 = v319 + v323++;
                  v319 = v324 & v318;
                  v321 = *(_QWORD *)(v305 + 16 * v319);
                  if (v321 == v286)
                    goto LABEL_374;
                }
              }
              v319 = v303;
LABEL_374:
              v322 = *(_DWORD *)(v305 + 16 * v319 + 8);
              if ((_DWORD)v303)
              {
                v318 = v303 - 1;
LABEL_376:
                LODWORD(v325) = v318 & v300;
                v326 = (uint64_t *)(v305 + 16 * (v318 & v300));
                v327 = *v326;
                if (*v326 != v287)
                {
                  v328 = 1;
                  do
                  {
                    if (v327 == -4096)
                      goto LABEL_381;
                    v329 = v325 + v328++;
                    v325 = v329 & v318;
                    v327 = *(_QWORD *)(v305 + 16 * v325);
                  }
                  while (v327 != v287);
                  v326 = (uint64_t *)(v305 + 16 * v325);
                }
                goto LABEL_382;
              }
LABEL_381:
              v326 = (uint64_t *)(v305 + 16 * v303);
LABEL_382:
              result = *((unsigned int *)v326 + 2);
              v285 = v301;
            }
            while (v322 >= result);
            *v301 = v287;
LABEL_384:
            v266 = v267 - 1;
            if (!v267)
            {
LABEL_385:
              v330 = 0;
              v331 = *v11;
              v332 = v11;
              while (1)
              {
                v333 = &v332[v330 + 1];
                v334 = (2 * v330) | 1;
                v335 = 2 * v330 + 2;
                if (v335 < v13)
                  break;
LABEL_405:
                *v332 = *v333;
                v332 = v333;
                v330 = v334;
                if (v334 > (uint64_t)((unint64_t)(v13 - 2) >> 1))
                {
                  if (v333 == --a2)
                  {
                    *v333 = v331;
                  }
                  else
                  {
                    *v333 = *a2;
                    *a2 = v331;
                    v350 = (char *)v333 - (char *)v11 + 8;
                    if (v350 >= 9)
                    {
                      v351 = (((unint64_t)v350 >> 3) - 2) >> 1;
                      v352 = &v11[v351];
                      v353 = *v352;
                      v354 = *v333;
                      v355 = *(_QWORD *)(*(_QWORD *)a3 + 976);
                      v356 = *(unsigned int *)(*(_QWORD *)a3 + 992);
                      v357 = *v333 >> 4;
                      if ((_DWORD)v356)
                      {
                        v358 = v356 - 1;
                        LODWORD(v359) = (v356 - 1) & ((v353 >> 4) ^ (v353 >> 9));
                        v360 = (uint64_t *)(v355 + 16 * v359);
                        v361 = *v360;
                        if (*v360 == v353)
                        {
                          result = *((unsigned int *)v360 + 2);
LABEL_419:
                          LODWORD(v364) = v358 & (v357 ^ (v354 >> 9));
                          v365 = (uint64_t *)(v355 + 16 * v364);
                          v366 = *v365;
                          if (*v365 != v354)
                          {
                            v367 = 1;
                            do
                            {
                              if (v366 == -4096)
                                goto LABEL_424;
                              v368 = v364 + v367++;
                              v364 = v368 & v358;
                              v366 = *(_QWORD *)(v355 + 16 * v364);
                            }
                            while (v366 != v354);
                            v365 = (uint64_t *)(v355 + 16 * v364);
                          }
                          goto LABEL_425;
                        }
                        v362 = 1;
                        while (v361 != -4096)
                        {
                          v363 = v359 + v362++;
                          v359 = v363 & v358;
                          v361 = *(_QWORD *)(v355 + 16 * v359);
                          if (v361 == v353)
                            goto LABEL_417;
                        }
                      }
                      v359 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_417:
                      result = *(unsigned int *)(v355 + 16 * v359 + 8);
                      if ((_DWORD)v356)
                      {
                        v358 = v356 - 1;
                        goto LABEL_419;
                      }
LABEL_424:
                      v365 = (uint64_t *)(v355 + 16 * v356);
LABEL_425:
                      if (result < *((_DWORD *)v365 + 2))
                      {
                        v369 = v357 ^ (v354 >> 9);
                        while (1)
                        {
                          v370 = v352;
                          *v333 = v353;
                          if (!v351)
                          {
LABEL_445:
                            *v370 = v354;
                            break;
                          }
                          v351 = (v351 - 1) >> 1;
                          v352 = &v11[v351];
                          v353 = *v352;
                          v371 = *(_QWORD *)(*(_QWORD *)a3 + 976);
                          v372 = *(unsigned int *)(*(_QWORD *)a3 + 992);
                          if ((_DWORD)v372)
                          {
                            v373 = v372 - 1;
                            LODWORD(v374) = (v372 - 1) & ((v353 >> 4) ^ (v353 >> 9));
                            v375 = (uint64_t *)(v371 + 16 * v374);
                            v376 = *v375;
                            if (*v375 == v353)
                            {
                              result = *((unsigned int *)v375 + 2);
                              goto LABEL_438;
                            }
                            v377 = 1;
                            while (v376 != -4096)
                            {
                              v378 = v374 + v377++;
                              v374 = v378 & v373;
                              v376 = *(_QWORD *)(v371 + 16 * v374);
                              if (v376 == v353)
                                goto LABEL_436;
                            }
                          }
                          v374 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_436:
                          result = *(unsigned int *)(v371 + 16 * v374 + 8);
                          if ((_DWORD)v372)
                          {
                            v373 = v372 - 1;
LABEL_438:
                            LODWORD(v379) = v373 & v369;
                            v380 = (uint64_t *)(v371 + 16 * (v373 & v369));
                            v381 = *v380;
                            if (*v380 != v354)
                            {
                              v382 = 1;
                              do
                              {
                                if (v381 == -4096)
                                  goto LABEL_443;
                                v383 = v379 + v382++;
                                v379 = v383 & v373;
                                v381 = *(_QWORD *)(v371 + 16 * v379);
                              }
                              while (v381 != v354);
                              v380 = (uint64_t *)(v371 + 16 * v379);
                            }
                            goto LABEL_444;
                          }
LABEL_443:
                          v380 = (uint64_t *)(v371 + 16 * v372);
LABEL_444:
                          v333 = v370;
                          if (result >= *((_DWORD *)v380 + 2))
                            goto LABEL_445;
                        }
                      }
                    }
                  }
                  if (v13-- <= 2)
                    return result;
                  goto LABEL_385;
                }
              }
              result = v333[1];
              v336 = *(_QWORD *)(*(_QWORD *)a3 + 976);
              v337 = *(unsigned int *)(*(_QWORD *)a3 + 992);
              if ((_DWORD)v337)
              {
                v338 = v337 - 1;
                LODWORD(v339) = (v337 - 1) & ((*v333 >> 4) ^ (*v333 >> 9));
                v340 = (uint64_t *)(v336 + 16 * v339);
                v341 = *v340;
                if (*v340 == *v333)
                {
                  v342 = *((_DWORD *)v340 + 2);
LABEL_397:
                  LODWORD(v345) = v338 & ((result >> 4) ^ (result >> 9));
                  v346 = v336 + 16 * v345;
                  v347 = *(uint64_t **)v346;
                  if (*(_QWORD *)v346 != result)
                  {
                    v348 = 1;
                    do
                    {
                      if (v347 == (uint64_t *)-4096)
                        goto LABEL_402;
                      v349 = v345 + v348++;
                      v345 = v349 & v338;
                      v347 = *(uint64_t **)(v336 + 16 * v345);
                    }
                    while (v347 != (uint64_t *)result);
                    v346 = v336 + 16 * v345;
                  }
                  goto LABEL_403;
                }
                v343 = 1;
                while (v341 != -4096)
                {
                  v344 = v339 + v343++;
                  v339 = v344 & v338;
                  v341 = *(_QWORD *)(v336 + 16 * v339);
                  if (v341 == *v333)
                    goto LABEL_395;
                }
              }
              v339 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_395:
              v342 = *(_DWORD *)(v336 + 16 * v339 + 8);
              if ((_DWORD)v337)
              {
                v338 = v337 - 1;
                goto LABEL_397;
              }
LABEL_402:
              v346 = v336 + 16 * v337;
LABEL_403:
              if (v342 < *(_DWORD *)(v346 + 8))
              {
                ++v333;
                v334 = v335;
              }
              goto LABEL_405;
            }
          }
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v11[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          sub_1C5F5CC04(&v9[(unint64_t)v13 >> 1], v9, a2 - 1, a3);
        }
        else
        {
          sub_1C5F5CC04(v9, &v9[(unint64_t)v13 >> 1], a2 - 1, a3);
          sub_1C5F5CC04(v9 + 1, v15 - 1, a2 - 2, a3);
          sub_1C5F5CC04(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
          sub_1C5F5CC04(v15 - 1, v15, &v9[v14 + 1], a3);
          v16 = *v9;
          *v9 = *v15;
          *v15 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = *(_QWORD *)a3;
        v19 = *v9 >> 4;
        if ((a5 & 1) == 0)
        {
          v20 = *(_QWORD *)(v18 + 976);
          v18 = *(unsigned int *)(v18 + 992);
          if ((_DWORD)v18)
          {
            v21 = *(v9 - 1);
            v22 = v18 - 1;
            LODWORD(v23) = ((v21 >> 4) ^ (v21 >> 9)) & (v18 - 1);
            v24 = (uint64_t *)(v20 + 16 * v23);
            v25 = *v24;
            if (*v24 == v21)
            {
              v26 = *((_DWORD *)v24 + 2);
              goto LABEL_21;
            }
            v27 = 1;
            while (v25 != -4096)
            {
              v28 = v23 + v27++;
              v23 = v28 & v22;
              v25 = *(_QWORD *)(v20 + 16 * v23);
              if (v25 == v21)
                goto LABEL_19;
            }
          }
          v23 = v18;
LABEL_19:
          v26 = *(_DWORD *)(v20 + 16 * v23 + 8);
          if (!(_DWORD)v18)
            goto LABEL_28;
          v22 = v18 - 1;
LABEL_21:
          v29 = v19 ^ (v17 >> 9);
          LODWORD(v30) = v22 & v29;
          v31 = (uint64_t *)(v20 + 16 * (v22 & v29));
          v32 = *v31;
          if (*v31 == v17)
          {
            if (v26 < *((_DWORD *)v31 + 2))
              goto LABEL_30;
            v33 = *v10;
            goto LABEL_137;
          }
          v34 = 1;
          while (v32 != -4096)
          {
            v35 = v30 + v34++;
            v30 = v35 & v22;
            v32 = *(_QWORD *)(v20 + 16 * v30);
            if (v32 == v17)
              goto LABEL_29;
          }
LABEL_28:
          v30 = v18;
LABEL_29:
          if (v26 < *(_DWORD *)(v20 + 16 * v30 + 8))
            goto LABEL_30;
          v33 = *v10;
          if (!(_DWORD)v18)
            goto LABEL_241;
          v29 = v19 ^ (v17 >> 9);
LABEL_137:
          v124 = v18 - 1;
          LODWORD(v125) = v29 & (v18 - 1);
          v126 = (uint64_t *)(v20 + 16 * v125);
          v127 = *v126;
          if (*v126 == v17)
          {
            v128 = *((_DWORD *)v126 + 2);
            goto LABEL_144;
          }
          v129 = 1;
          while (v127 != -4096)
          {
            v130 = v125 + v129++;
            v125 = v130 & v124;
            v127 = *(_QWORD *)(v20 + 16 * v125);
            if (v127 == v17)
              goto LABEL_142;
          }
LABEL_241:
          v125 = v18;
LABEL_142:
          v128 = *(_DWORD *)(v20 + 16 * v125 + 8);
          if (!(_DWORD)v18)
            goto LABEL_149;
          v124 = v18 - 1;
LABEL_144:
          LODWORD(v131) = ((v33 >> 4) ^ (v33 >> 9)) & v124;
          v132 = (uint64_t *)(v20 + 16 * v131);
          v133 = *v132;
          if (*v132 != v33)
          {
            v134 = 1;
            while (v133 != -4096)
            {
              v135 = v131 + v134++;
              v131 = v135 & v124;
              v133 = *(_QWORD *)(v20 + 16 * v131);
              if (v133 == v33)
              {
                v132 = (uint64_t *)(v20 + 16 * v131);
                goto LABEL_150;
              }
            }
LABEL_149:
            v132 = (uint64_t *)(v20 + 16 * v18);
          }
LABEL_150:
          v136 = v19 ^ (v17 >> 9);
          v137 = v18 - 1;
          v138 = (_QWORD *)(v20 + 16 * (((_DWORD)v18 - 1) & v136));
          result = v20 + 16 * v18 + 8;
          v11 = v9;
          if (v128 < *((_DWORD *)v132 + 2))
          {
            v11 = v9;
            while (1)
            {
              v140 = v11[1];
              ++v11;
              v139 = v140;
              if ((_DWORD)v18)
              {
                v141 = *v138;
                v142 = (unsigned int *)(v138 + 1);
                if (*v138 != v17)
                {
                  v143 = 1;
                  LODWORD(v144) = v137 & v136;
                  while (v141 != -4096)
                  {
                    v145 = v144 + v143++;
                    v144 = v145 & v137;
                    v141 = *(_QWORD *)(v20 + 16 * v144);
                    if (v141 == v17)
                      goto LABEL_157;
                  }
                  v144 = v18;
LABEL_157:
                  v142 = (unsigned int *)(v20 + 16 * v144 + 8);
                }
                v146 = *v142;
                LODWORD(v147) = ((v139 >> 4) ^ (v139 >> 9)) & v137;
                v148 = (uint64_t *)(v20 + 16 * v147);
                v149 = *v148;
                if (*v148 == v139)
                  goto LABEL_165;
                v150 = 1;
                while (v149 != -4096)
                {
                  v151 = v147 + v150++;
                  v147 = v151 & v137;
                  v149 = *(_QWORD *)(v20 + 16 * v147);
                  if (v149 == v139)
                  {
                    v148 = (uint64_t *)(v20 + 16 * v147);
                    goto LABEL_165;
                  }
                }
              }
              else
              {
                v146 = *(_DWORD *)result;
              }
              v148 = (uint64_t *)(v20 + 16 * v18);
LABEL_165:
              if (v146 < *((_DWORD *)v148 + 2))
                goto LABEL_185;
            }
          }
          do
          {
            if (++v11 >= a2)
              break;
            if ((_DWORD)v18)
            {
              v152 = *v138;
              v153 = (unsigned int *)(v138 + 1);
              if (*v138 != v17)
              {
                v154 = 1;
                LODWORD(v155) = v137 & v136;
                while (v152 != -4096)
                {
                  v156 = v155 + v154++;
                  v155 = v156 & v137;
                  v152 = *(_QWORD *)(v20 + 16 * v155);
                  if (v152 == v17)
                    goto LABEL_174;
                }
                v155 = v18;
LABEL_174:
                v153 = (unsigned int *)(v20 + 16 * v155 + 8);
              }
              v157 = *v153;
              LODWORD(v158) = ((*v11 >> 4) ^ (*v11 >> 9)) & v137;
              v159 = (uint64_t *)(v20 + 16 * v158);
              v160 = *v159;
              if (*v159 == *v11)
                continue;
              v161 = 1;
              while (v160 != -4096)
              {
                v162 = v158 + v161++;
                v158 = v162 & v137;
                v160 = *(_QWORD *)(v20 + 16 * v158);
                if (v160 == *v11)
                {
                  v159 = (uint64_t *)(v20 + 16 * v158);
                  goto LABEL_182;
                }
              }
            }
            else
            {
              v157 = *(_DWORD *)result;
            }
            v159 = (uint64_t *)(v20 + 16 * v18);
LABEL_182:
            ;
          }
          while (v157 >= *((_DWORD *)v159 + 2));
LABEL_185:
          v163 = a2;
          if (v11 < a2)
          {
            v163 = a2;
            do
            {
              v165 = *--v163;
              v164 = v165;
              if ((_DWORD)v18)
              {
                v166 = *v138;
                v167 = (unsigned int *)(v138 + 1);
                if (*v138 != v17)
                {
                  v168 = 1;
                  LODWORD(v169) = v137 & v136;
                  while (v166 != -4096)
                  {
                    v170 = v169 + v168++;
                    v169 = v170 & v137;
                    v166 = *(_QWORD *)(v20 + 16 * v169);
                    if (v166 == v17)
                      goto LABEL_192;
                  }
                  v169 = v18;
LABEL_192:
                  v167 = (unsigned int *)(v20 + 16 * v169 + 8);
                }
                v171 = *v167;
                LODWORD(v172) = ((v164 >> 4) ^ (v164 >> 9)) & v137;
                v173 = (uint64_t *)(v20 + 16 * v172);
                v174 = *v173;
                if (*v173 == v164)
                  continue;
                v175 = 1;
                while (v174 != -4096)
                {
                  v176 = v172 + v175++;
                  v172 = v176 & v137;
                  v174 = *(_QWORD *)(v20 + 16 * v172);
                  if (v174 == v164)
                  {
                    v173 = (uint64_t *)(v20 + 16 * v172);
                    goto LABEL_200;
                  }
                }
              }
              else
              {
                v171 = *(_DWORD *)result;
              }
              v173 = (uint64_t *)(v20 + 16 * v18);
LABEL_200:
              ;
            }
            while (v171 < *((_DWORD *)v173 + 2));
          }
          if (v11 >= v163)
            goto LABEL_238;
          v177 = *v11;
          v178 = *v163;
          do
          {
            *v11 = v178;
            *v163 = v177;
            v179 = *(_QWORD *)(*(_QWORD *)a3 + 976);
            v180 = *(unsigned int *)(*(_QWORD *)a3 + 992);
            v181 = v180 - 1;
            v182 = (_QWORD *)(v179 + 16 * (((_DWORD)v180 - 1) & v136));
            result = v179 + 16 * v180;
            v183 = (unsigned int *)(result + 8);
            do
            {
              v184 = v11[1];
              ++v11;
              v177 = v184;
              if (!(_DWORD)v180)
              {
                v190 = *v183;
LABEL_218:
                v192 = (uint64_t *)(v179 + 16 * v180);
                continue;
              }
              v185 = *v182;
              v186 = (unsigned int *)(v182 + 1);
              if (*v182 != v17)
              {
                v187 = 1;
                LODWORD(v188) = v181 & v136;
                while (v185 != -4096)
                {
                  v189 = v188 + v187++;
                  v188 = v189 & v181;
                  v185 = *(_QWORD *)(v179 + 16 * v188);
                  if (v185 == v17)
                    goto LABEL_211;
                }
                v188 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_211:
                v186 = (unsigned int *)(v179 + 16 * v188 + 8);
              }
              v190 = *v186;
              LODWORD(v191) = ((v177 >> 4) ^ (v177 >> 9)) & v181;
              v192 = (uint64_t *)(v179 + 16 * v191);
              v193 = *v192;
              if (*v192 != v177)
              {
                v194 = 1;
                while (v193 != -4096)
                {
                  v195 = v191 + v194++;
                  v191 = v195 & v181;
                  v193 = *(_QWORD *)(v179 + 16 * v191);
                  if (v193 == v177)
                  {
                    v192 = (uint64_t *)(v179 + 16 * v191);
                    goto LABEL_219;
                  }
                }
                goto LABEL_218;
              }
LABEL_219:
              ;
            }
            while (v190 >= *((_DWORD *)v192 + 2));
            do
            {
              v197 = *--v163;
              v178 = v197;
              if (!(_DWORD)v180)
              {
                v202 = *v183;
LABEL_235:
                v204 = (uint64_t *)(v179 + 16 * v180);
                continue;
              }
              v198 = *v182;
              v199 = (unsigned int *)(v182 + 1);
              if (*v182 != v17)
              {
                v200 = 1;
                LODWORD(v196) = v181 & v136;
                while (v198 != -4096)
                {
                  v201 = v196 + v200++;
                  v196 = v201 & v181;
                  v198 = *(_QWORD *)(v179 + 16 * v196);
                  if (v198 == v17)
                    goto LABEL_228;
                }
                v196 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_228:
                v199 = (unsigned int *)(v179 + 16 * v196 + 8);
              }
              v202 = *v199;
              LODWORD(v203) = ((v178 >> 4) ^ (v178 >> 9)) & v181;
              v204 = (uint64_t *)(v179 + 16 * v203);
              v205 = *v204;
              if (*v204 != v178)
              {
                v206 = 1;
                while (v205 != -4096)
                {
                  v207 = v203 + v206++;
                  v203 = v207 & v181;
                  v205 = *(_QWORD *)(v179 + 16 * v203);
                  if (v205 == v178)
                  {
                    v204 = (uint64_t *)(v179 + 16 * v203);
                    goto LABEL_236;
                  }
                }
                goto LABEL_235;
              }
LABEL_236:
              ;
            }
            while (v202 < *((_DWORD *)v204 + 2));
          }
          while (v11 < v163);
LABEL_238:
          v208 = v11 - 1;
          if (v11 - 1 != v9)
            *v9 = *v208;
          a5 = 0;
          *v208 = v17;
          continue;
        }
        v20 = *(_QWORD *)(v18 + 976);
        LODWORD(v18) = *(_DWORD *)(v18 + 992);
LABEL_30:
        v36 = v18 - 1;
        v37 = v18;
        v38 = v19 ^ (v17 >> 9);
        v39 = v20 + 16 * v18;
        v40 = (v18 - 1) & v38;
        v41 = (uint64_t *)(v20 + 16 * v40);
        v42 = (unsigned int *)(v39 + 8);
        v43 = v9;
        while (2)
        {
          v44 = v43;
          v46 = v43[1];
          ++v43;
          v45 = v46;
          if ((_DWORD)v37)
          {
            LODWORD(v47) = ((v45 >> 4) ^ (v45 >> 9)) & v36;
            v48 = (_QWORD *)(v20 + 16 * v47);
            v49 = *v48;
            if (*v48 == v45)
            {
              v50 = (unsigned int *)(v48 + 1);
            }
            else
            {
              v51 = 1;
              while (v49 != -4096)
              {
                v52 = v47 + v51++;
                v47 = v52 & v36;
                v49 = *(_QWORD *)(v20 + 16 * v47);
                if (v49 == v45)
                  goto LABEL_37;
              }
              v47 = v37;
LABEL_37:
              v50 = (unsigned int *)(v20 + 16 * v47 + 8);
            }
            v53 = *v50;
            v54 = *v41;
            if (*v41 == v17)
            {
              v55 = v20 + 16 * v40;
              goto LABEL_46;
            }
            v56 = 1;
            LODWORD(v57) = v36 & v38;
            while (v54 != -4096)
            {
              v58 = v57 + v56++;
              v57 = v58 & v36;
              v54 = *(_QWORD *)(v20 + 16 * v57);
              if (v54 == v17)
              {
                v55 = v20 + 16 * v57;
                goto LABEL_46;
              }
            }
          }
          else
          {
            v53 = *v42;
          }
          v55 = v39;
LABEL_46:
          if (v53 < *(_DWORD *)(v55 + 8))
            continue;
          break;
        }
        v59 = a2;
        if (v44 != v9)
        {
          while (2)
          {
            v61 = *--v59;
            v60 = v61;
            if ((_DWORD)v37)
            {
              LODWORD(v62) = ((v60 >> 4) ^ (v60 >> 9)) & v36;
              v63 = (_QWORD *)(v20 + 16 * v62);
              v64 = *v63;
              if (*v63 == v60)
              {
                v65 = (unsigned int *)(v63 + 1);
              }
              else
              {
                v66 = 1;
                while (v64 != -4096)
                {
                  v67 = v62 + v66++;
                  v62 = v67 & v36;
                  v64 = *(_QWORD *)(v20 + 16 * v62);
                  if (v64 == v60)
                    goto LABEL_56;
                }
                v62 = v37;
LABEL_56:
                v65 = (unsigned int *)(v20 + 16 * v62 + 8);
              }
              v68 = *v65;
              v69 = *v41;
              if (*v41 == v17)
              {
                v70 = v20 + 16 * v40;
                goto LABEL_65;
              }
              v71 = 1;
              LODWORD(v72) = v36 & v38;
              while (v69 != -4096)
              {
                v73 = v72 + v71++;
                v72 = v73 & v36;
                v69 = *(_QWORD *)(v20 + 16 * v72);
                if (v69 == v17)
                {
                  v70 = v20 + 16 * v72;
                  goto LABEL_65;
                }
              }
            }
            else
            {
              v68 = *v42;
            }
            v70 = v39;
LABEL_65:
            if (v68 < *(_DWORD *)(v70 + 8))
              goto LABEL_88;
            continue;
          }
        }
        v59 = a2;
        while (2)
        {
          if (v43 < v59)
          {
            v75 = *--v59;
            v74 = v75;
            if ((_DWORD)v37)
            {
              LODWORD(v76) = ((v74 >> 4) ^ (v74 >> 9)) & v36;
              v77 = (_QWORD *)(v20 + 16 * v76);
              v78 = *v77;
              if (*v77 == v74)
              {
                v79 = (unsigned int *)(v77 + 1);
              }
              else
              {
                v80 = 1;
                while (v78 != -4096)
                {
                  v81 = v76 + v80++;
                  v76 = v81 & v36;
                  v78 = *(_QWORD *)(v20 + 16 * v76);
                  if (v78 == v74)
                    goto LABEL_76;
                }
                v76 = v37;
LABEL_76:
                v79 = (unsigned int *)(v20 + 16 * v76 + 8);
              }
              v82 = *v79;
              v83 = *v41;
              if (*v41 == v17)
              {
                v84 = v20 + 16 * v40;
                goto LABEL_85;
              }
              v85 = 1;
              LODWORD(v86) = v36 & v38;
              while (v83 != -4096)
              {
                v87 = v86 + v85++;
                v86 = v87 & v36;
                v83 = *(_QWORD *)(v20 + 16 * v86);
                if (v83 == v17)
                {
                  v84 = v20 + 16 * v86;
                  goto LABEL_85;
                }
              }
            }
            else
            {
              v82 = *v42;
            }
            v84 = v39;
LABEL_85:
            if (v82 < *(_DWORD *)(v84 + 8))
              break;
            continue;
          }
          break;
        }
LABEL_88:
        if (v43 >= v59)
        {
          v11 = v43;
          goto LABEL_129;
        }
        v88 = *v59;
        v11 = v43;
        v89 = v59;
        while (2)
        {
          *v11 = v88;
          *v89 = v45;
          v90 = *(_QWORD *)(*(_QWORD *)a3 + 976);
          v91 = *(unsigned int *)(*(_QWORD *)a3 + 992);
          v92 = v91 - 1;
          v93 = (v91 - 1) & v38;
          v94 = (uint64_t *)(v90 + 16 * v93);
          v95 = (unsigned int *)(v90 + 16 * v91 + 8);
          while (2)
          {
            v96 = v11[1];
            ++v11;
            v45 = v96;
            if (!(_DWORD)v91)
            {
              v103 = *v95;
LABEL_105:
              v105 = v90 + 16 * v91;
              goto LABEL_106;
            }
            LODWORD(v97) = ((v45 >> 4) ^ (v45 >> 9)) & v92;
            v98 = (_QWORD *)(v90 + 16 * v97);
            v99 = *v98;
            if (*v98 == v45)
            {
              v100 = (unsigned int *)(v98 + 1);
            }
            else
            {
              v101 = 1;
              while (v99 != -4096)
              {
                v102 = v97 + v101++;
                v97 = v102 & v92;
                v99 = *(_QWORD *)(v90 + 16 * v97);
                if (v99 == v45)
                  goto LABEL_97;
              }
              v97 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_97:
              v100 = (unsigned int *)(v90 + 16 * v97 + 8);
            }
            v103 = *v100;
            v104 = *v94;
            if (*v94 != v17)
            {
              v106 = 1;
              LODWORD(v107) = v92 & v38;
              while (v104 != -4096)
              {
                v108 = v107 + v106++;
                v107 = v108 & v92;
                v104 = *(_QWORD *)(v90 + 16 * v107);
                if (v104 == v17)
                {
                  v105 = v90 + 16 * v107;
                  goto LABEL_106;
                }
              }
              goto LABEL_105;
            }
            v105 = v90 + 16 * v93;
LABEL_106:
            if (v103 < *(_DWORD *)(v105 + 8))
              continue;
            break;
          }
          while (2)
          {
            v110 = *--v89;
            v88 = v110;
            if ((_DWORD)v91)
            {
              LODWORD(v109) = ((v88 >> 4) ^ (v88 >> 9)) & v92;
              v111 = (_QWORD *)(v90 + 16 * v109);
              v112 = *v111;
              if (*v111 == v88)
              {
                v113 = (unsigned int *)(v111 + 1);
              }
              else
              {
                v114 = 1;
                while (v112 != -4096)
                {
                  v115 = v109 + v114++;
                  v109 = v115 & v92;
                  v112 = *(_QWORD *)(v90 + 16 * v109);
                  if (v112 == v88)
                    goto LABEL_116;
                }
                v109 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_116:
                v113 = (unsigned int *)(v90 + 16 * v109 + 8);
              }
              v116 = *v113;
              v117 = *v94;
              if (*v94 == v17)
              {
                v118 = v90 + 16 * v93;
                goto LABEL_125;
              }
              v119 = 1;
              LODWORD(v120) = v92 & v38;
              while (v117 != -4096)
              {
                v121 = v120 + v119++;
                v120 = v121 & v92;
                v117 = *(_QWORD *)(v90 + 16 * v120);
                if (v117 == v17)
                {
                  v118 = v90 + 16 * v120;
                  goto LABEL_125;
                }
              }
            }
            else
            {
              v116 = *v95;
            }
            v118 = v90 + 16 * v91;
LABEL_125:
            if (v116 >= *(_DWORD *)(v118 + 8))
              continue;
            break;
          }
          if (v11 < v89)
            continue;
          break;
        }
LABEL_129:
        v122 = v11 - 1;
        if (v11 - 1 != v9)
          *v9 = *v122;
        *v122 = v17;
        if (v43 < v59)
        {
LABEL_134:
          result = sub_1C5F5DDD0(v9, v11 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v123 = sub_1C5F5FA14(v9, v11 - 1, a3);
        result = sub_1C5F5FA14(v11, a2, a3);
        if (!(_DWORD)result)
        {
          if (v123)
            continue;
          goto LABEL_134;
        }
        a2 = v11 - 1;
        if (!v123)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C5F5FA14(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int v126;
  int v127;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 976);
      v11 = *(unsigned int *)(*(_QWORD *)a3 + 992);
      if (!(_DWORD)v11)
        goto LABEL_63;
      v12 = v11 - 1;
      LODWORD(v13) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      v14 = (uint64_t *)(v10 + 16 * v13);
      v15 = *v14;
      if (*v14 == v8)
      {
        v16 = *((_DWORD *)v14 + 2);
      }
      else
      {
        v66 = 1;
        while (v15 != -4096)
        {
          v67 = v13 + v66++;
          v13 = v67 & v12;
          v15 = *(_QWORD *)(v10 + 16 * v13);
          if (v15 == v8)
            goto LABEL_64;
        }
LABEL_63:
        v13 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_64:
        v16 = *(_DWORD *)(v10 + 16 * v13 + 8);
        if (!(_DWORD)v11)
        {
LABEL_79:
          v71 = (uint64_t *)(v10 + 16 * v11);
          goto LABEL_80;
        }
        v12 = v11 - 1;
      }
      LODWORD(v70) = v12 & ((v9 >> 4) ^ (v9 >> 9));
      v71 = (uint64_t *)(v10 + 16 * v70);
      v72 = *v71;
      if (*v71 != v9)
      {
        v73 = 1;
        do
        {
          if (v72 == -4096)
            goto LABEL_79;
          v74 = v70 + v73++;
          v70 = v74 & v12;
          v72 = *(_QWORD *)(v10 + 16 * v70);
        }
        while (v72 != v9);
        v71 = (uint64_t *)(v10 + 16 * v70);
      }
LABEL_80:
      if (v16 < *((_DWORD *)v71 + 2))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      sub_1C5F5CC04(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C5F5D7AC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v55 = a1 + 2;
      v56 = a1 + 3;
      sub_1C5F5D7AC(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v57 = *(a2 - 1);
      v58 = a1[3];
      v59 = *(_QWORD *)(*(_QWORD *)a3 + 976);
      v60 = *(unsigned int *)(*(_QWORD *)a3 + 992);
      if (!(_DWORD)v60)
        goto LABEL_71;
      v61 = v60 - 1;
      LODWORD(v62) = (v60 - 1) & ((v57 >> 4) ^ (v57 >> 9));
      v63 = (uint64_t *)(v59 + 16 * v62);
      v64 = *v63;
      if (*v63 == v57)
      {
        v65 = *((_DWORD *)v63 + 2);
        goto LABEL_74;
      }
      v68 = 1;
      while (v64 != -4096)
      {
        v69 = v62 + v68++;
        v62 = v69 & v61;
        v64 = *(_QWORD *)(v59 + 16 * v62);
        if (v64 == v57)
          goto LABEL_72;
      }
LABEL_71:
      v62 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_72:
      v65 = *(_DWORD *)(v59 + 16 * v62 + 8);
      if (!(_DWORD)v60)
        goto LABEL_82;
      v61 = v60 - 1;
LABEL_74:
      LODWORD(v75) = v61 & ((v58 >> 4) ^ (v58 >> 9));
      v76 = (uint64_t *)(v59 + 16 * v75);
      v77 = *v76;
      if (*v76 == v58)
        goto LABEL_83;
      v78 = 1;
      while (v77 != -4096)
      {
        v79 = v75 + v78++;
        v75 = v79 & v61;
        v77 = *(_QWORD *)(v59 + 16 * v75);
        if (v77 == v58)
        {
          v76 = (uint64_t *)(v59 + 16 * v75);
          goto LABEL_83;
        }
      }
LABEL_82:
      v76 = (uint64_t *)(v59 + 16 * v60);
LABEL_83:
      if (v65 >= *((_DWORD *)v76 + 2))
        return 1;
      *v56 = v57;
      *(a2 - 1) = v58;
      v80 = *v56;
      v81 = *v55;
      v82 = *(_QWORD *)(*(_QWORD *)a3 + 976);
      v83 = *(unsigned int *)(*(_QWORD *)a3 + 992);
      v84 = *v56 >> 4;
      if (!(_DWORD)v83)
        goto LABEL_91;
      v85 = v83 - 1;
      LODWORD(v86) = (v83 - 1) & (v84 ^ (v80 >> 9));
      v87 = (uint64_t *)(v82 + 16 * v86);
      v88 = *v87;
      if (*v87 == v80)
      {
        v89 = *((_DWORD *)v87 + 2);
      }
      else
      {
        v90 = 1;
        while (v88 != -4096)
        {
          v91 = v86 + v90++;
          v86 = v91 & v85;
          v88 = *(_QWORD *)(v82 + 16 * v86);
          if (v88 == v80)
            goto LABEL_92;
        }
LABEL_91:
        v86 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_92:
        v89 = *(_DWORD *)(v82 + 16 * v86 + 8);
        if (!(_DWORD)v83)
          goto LABEL_99;
        v85 = v83 - 1;
      }
      LODWORD(v92) = v85 & ((v81 >> 4) ^ (v81 >> 9));
      v93 = (uint64_t *)(v82 + 16 * v92);
      v94 = *v93;
      if (*v93 == v81)
        goto LABEL_100;
      v95 = 1;
      while (v94 != -4096)
      {
        v96 = v92 + v95++;
        v92 = v96 & v85;
        v94 = *(_QWORD *)(v82 + 16 * v92);
        if (v94 == v81)
        {
          v93 = (uint64_t *)(v82 + 16 * v92);
          goto LABEL_100;
        }
      }
LABEL_99:
      v93 = (uint64_t *)(v82 + 16 * v83);
LABEL_100:
      if (v89 >= *((_DWORD *)v93 + 2))
        return 1;
      *v55 = v80;
      *v56 = v81;
      v97 = a1[1];
      v98 = *(_QWORD *)(*(_QWORD *)a3 + 976);
      v99 = *(unsigned int *)(*(_QWORD *)a3 + 992);
      if (!(_DWORD)v99)
        goto LABEL_108;
      v100 = v99 - 1;
      LODWORD(v101) = (v99 - 1) & (v84 ^ (v80 >> 9));
      v102 = (uint64_t *)(v98 + 16 * v101);
      v103 = *v102;
      if (*v102 == v80)
      {
        v104 = *((_DWORD *)v102 + 2);
      }
      else
      {
        v105 = 1;
        while (v103 != -4096)
        {
          v106 = v101 + v105++;
          v101 = v106 & v100;
          v103 = *(_QWORD *)(v98 + 16 * v101);
          if (v103 == v80)
            goto LABEL_109;
        }
LABEL_108:
        v101 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_109:
        v104 = *(_DWORD *)(v98 + 16 * v101 + 8);
        if (!(_DWORD)v99)
          goto LABEL_124;
        v100 = v99 - 1;
      }
      LODWORD(v107) = v100 & ((v97 >> 4) ^ (v97 >> 9));
      v108 = (uint64_t *)(v98 + 16 * v107);
      v109 = *v108;
      if (*v108 == v97)
        goto LABEL_116;
      v110 = 1;
      while (v109 != -4096)
      {
        v111 = v107 + v110++;
        v107 = v111 & v100;
        v109 = *(_QWORD *)(v98 + 16 * v107);
        if (v109 == v97)
        {
          v108 = (uint64_t *)(v98 + 16 * v107);
          goto LABEL_116;
        }
      }
LABEL_124:
      v108 = (uint64_t *)(v98 + 16 * v99);
LABEL_116:
      if (v104 >= *((_DWORD *)v108 + 2))
        return 1;
      a1[1] = v80;
      a1[2] = v97;
      v112 = *a1;
      v113 = *(_QWORD *)(*(_QWORD *)a3 + 976);
      v114 = *(unsigned int *)(*(_QWORD *)a3 + 992);
      if (!(_DWORD)v114)
        goto LABEL_125;
      v115 = v84 ^ (v80 >> 9);
      v116 = v114 - 1;
      LODWORD(v117) = (v114 - 1) & v115;
      v118 = (uint64_t *)(v113 + 16 * v117);
      v119 = *v118;
      if (*v118 == v80)
      {
        v120 = *((_DWORD *)v118 + 2);
      }
      else
      {
        v121 = 1;
        while (v119 != -4096)
        {
          v122 = v117 + v121++;
          v117 = v122 & v116;
          v119 = *(_QWORD *)(v113 + 16 * v117);
          if (v119 == v80)
            goto LABEL_126;
        }
LABEL_125:
        v117 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_126:
        v120 = *(_DWORD *)(v113 + 16 * v117 + 8);
        if (!(_DWORD)v114)
          goto LABEL_133;
        v116 = v114 - 1;
      }
      LODWORD(v123) = v116 & ((v112 >> 4) ^ (v112 >> 9));
      v124 = (uint64_t *)(v113 + 16 * v123);
      v125 = *v124;
      if (*v124 == v112)
        goto LABEL_134;
      v126 = 1;
      while (v125 != -4096)
      {
        v127 = v123 + v126++;
        v123 = v127 & v116;
        v125 = *(_QWORD *)(v113 + 16 * v123);
        if (v125 == v112)
        {
          v124 = (uint64_t *)(v113 + 16 * v123);
          goto LABEL_134;
        }
      }
LABEL_133:
      v124 = (uint64_t *)(v113 + 16 * v114);
LABEL_134:
      if (v120 < *((_DWORD *)v124 + 2))
      {
        *a1 = v80;
        a1[1] = v112;
      }
      return 1;
    default:
      v17 = a1 + 2;
      sub_1C5F5CC04(a1, a1 + 1, a1 + 2, a3);
      v18 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v19 = 0;
      v20 = *(_QWORD *)a3;
      break;
  }
  do
  {
    v21 = *v18;
    v22 = *v17;
    v23 = *(_QWORD *)(v20 + 976);
    v24 = *(unsigned int *)(v20 + 992);
    v25 = *v18 >> 4;
    if ((_DWORD)v24)
    {
      v26 = v24 - 1;
      LODWORD(v27) = (v24 - 1) & (v25 ^ (v21 >> 9));
      v28 = (uint64_t *)(v23 + 16 * v27);
      v29 = *v28;
      if (*v28 == v21)
      {
        v30 = *((_DWORD *)v28 + 2);
        goto LABEL_17;
      }
      v31 = 1;
      while (v29 != -4096)
      {
        v32 = v27 + v31++;
        v27 = v32 & v26;
        v29 = *(_QWORD *)(v23 + 16 * v27);
        if (v29 == v21)
          goto LABEL_15;
      }
    }
    v27 = *(unsigned int *)(v20 + 992);
LABEL_15:
    v30 = *(_DWORD *)(v23 + 16 * v27 + 8);
    if (!(_DWORD)v24)
      goto LABEL_22;
    v26 = v24 - 1;
LABEL_17:
    LODWORD(v33) = v26 & ((v22 >> 4) ^ (v22 >> 9));
    v34 = (uint64_t *)(v23 + 16 * v33);
    v35 = *v34;
    if (*v34 != v22)
    {
      v36 = 1;
      while (v35 != -4096)
      {
        v37 = v33 + v36++;
        v33 = v37 & v26;
        v35 = *(_QWORD *)(v23 + 16 * v33);
        if (v35 == v22)
        {
          v34 = (uint64_t *)(v23 + 16 * v33);
          goto LABEL_23;
        }
      }
LABEL_22:
      v34 = (uint64_t *)(v23 + 16 * v24);
    }
LABEL_23:
    if (v30 >= *((_DWORD *)v34 + 2))
      goto LABEL_47;
    v38 = v25 ^ (v21 >> 9);
    v39 = v18;
    while (1)
    {
      *v39 = v22;
      if (v17 == a1)
        break;
      v39 = v17;
      v40 = *--v17;
      v22 = v40;
      v41 = *(_QWORD *)(*(_QWORD *)a3 + 976);
      v42 = *(unsigned int *)(*(_QWORD *)a3 + 992);
      if ((_DWORD)v42)
      {
        v43 = v42 - 1;
        LODWORD(v44) = (v42 - 1) & v38;
        v45 = (uint64_t *)(v41 + 16 * v44);
        v46 = *v45;
        if (*v45 == v21)
        {
          v47 = *((_DWORD *)v45 + 2);
          goto LABEL_36;
        }
        v48 = 1;
        while (v46 != -4096)
        {
          v49 = v44 + v48++;
          v44 = v49 & v43;
          v46 = *(_QWORD *)(v41 + 16 * v44);
          if (v46 == v21)
            goto LABEL_34;
        }
      }
      v44 = *(unsigned int *)(*(_QWORD *)a3 + 992);
LABEL_34:
      v47 = *(_DWORD *)(v41 + 16 * v44 + 8);
      if (!(_DWORD)v42)
        goto LABEL_41;
      v43 = v42 - 1;
LABEL_36:
      LODWORD(v50) = v43 & ((v22 >> 4) ^ (v22 >> 9));
      v51 = (uint64_t *)(v41 + 16 * v50);
      v52 = *v51;
      if (*v51 != v22)
      {
        v53 = 1;
        while (v52 != -4096)
        {
          v54 = v50 + v53++;
          v50 = v54 & v43;
          v52 = *(_QWORD *)(v41 + 16 * v50);
          if (v52 == v22)
          {
            v51 = (uint64_t *)(v41 + 16 * v50);
            goto LABEL_42;
          }
        }
LABEL_41:
        v51 = (uint64_t *)(v41 + 16 * v42);
      }
LABEL_42:
      if (v47 >= *((_DWORD *)v51 + 2))
        goto LABEL_45;
    }
    v39 = a1;
LABEL_45:
    *v39 = v21;
    if (++v19 == 8)
      return v18 + 1 == a2;
    v20 = *(_QWORD *)a3;
LABEL_47:
    v17 = v18++;
  }
  while (v18 != a2);
  return 1;
}

void sub_1C5F60160(void ***a1)
{
  void **v1;
  unsigned __int8 **v2;
  unsigned __int8 **v4;
  void *v5;
  unsigned __int8 **v6;

  v1 = *a1;
  v2 = (unsigned __int8 **)**a1;
  if (v2)
  {
    v4 = (unsigned __int8 **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 1;
      do
      {
        if (*v6)
          llvm::MetadataTracking::untrack((uint64_t)v6, *v6);
      }
      while (v6-- != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *llvm::RelLookupTableConverterPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  llvm::DSOLocalEquivalent **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void **v14;
  void **v15;
  uint64_t *v16;
  uint64_t *v17;
  llvm::APInt *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  llvm **v29;
  uint64_t v30;
  llvm *v31;
  BOOL v32;
  _BOOL4 v33;
  uint64_t **v35;
  uint64_t v36;
  uint64_t ***v37;
  llvm::PointerType *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t ****v44;
  uint64_t ***v45;
  int v46;
  int v47;
  uint64_t ***v48;
  uint64_t **v49;
  char *v50;
  uint64_t **v51;
  char v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  llvm::UndefValue *v58;
  llvm::ValueHandleBase *Sub;
  llvm::UndefValue *v60;
  llvm::Value **v61;
  llvm::GlobalValue *v62;
  llvm::GlobalValue *v63;
  const llvm::APInt *v64;
  llvm::GlobalValue **v65;
  llvm::ConstantInt *v66;
  unsigned int v67;
  char v68;
  llvm::ValueHandleBase *v69;
  uint64_t v70;
  llvm::GlobalValue *v71;
  llvm::GlobalValue *v72;
  uint64_t Declaration;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t **v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  char *v85;
  uint64_t *v86;
  llvm::PointerType *v87;
  uint64_t *v88;
  unsigned __int8 *v89;
  uint64_t *v90;
  void **v91;
  void **v92;
  uint64_t *v93;
  llvm::Constant *IntPtrType;
  llvm::UndefValue *v95;
  uint64_t v96;
  uint64_t v97;
  llvm::Type *v98;
  llvm::Value *v99;
  llvm::Value *v100;
  unsigned __int8 *v101;
  llvm **v102;
  _DWORD *v103;
  uint64_t v104;
  llvm::ConstantInt *v105;
  llvm::ValueHandleBase *v106;
  int v107;
  llvm::LLVMContext **v108;
  uint64_t v109[2];
  void *v110[2];
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  void **v115;
  void **v116;
  uint64_t v117;
  int v118;
  __int16 v119;
  char v120;
  uint64_t v121;
  void *v122;
  void *v123;
  llvm::GlobalValue *v124;
  uint64_t v125;
  _QWORD v126[2];
  __int16 v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a1);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 != a1 + 24)
  {
    v8 = *(_QWORD *)(ResultImpl + 8);
    do
    {
      if (v7)
        v9 = v7 - 56;
      else
        v9 = 0;
      if (v7 && *(_BYTE *)(v9 + 16) == 3)
      {
        if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) != 0)
          goto LABEL_15;
      }
      else if (*(_BYTE *)(v9 + 16) || *(_QWORD *)(v9 + 72) != v9 + 72 || (*(_BYTE *)(v9 + 34) & 0x80) != 0)
      {
LABEL_15:
        v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v8, &llvm::TargetIRAnalysis::Key, v9);
        if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v10 + 8) + 512))(*(_QWORD *)(v10 + 8)))
          break;
LABEL_124:
        *(_QWORD *)a3 = a3 + 32;
        *(_QWORD *)(a3 + 8) = a3 + 32;
        *(_QWORD *)(a3 + 16) = 2;
        *(_DWORD *)(a3 + 24) = 0;
        *(_QWORD *)(a3 + 48) = a3 + 80;
        *(_QWORD *)(a3 + 56) = a3 + 80;
        *(_QWORD *)(a3 + 64) = 2;
        *(_DWORD *)(a3 + 72) = 0;
        return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
      }
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != a1 + 24);
  }
  v11 = a1 + 8;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12 == a1 + 8)
    goto LABEL_124;
  v13 = 0;
  v14 = &v122;
  v15 = &v123;
  v16 = &v111;
  v17 = &v121;
  v18 = (llvm::APInt *)(a1 + 272);
  do
  {
    while (1)
    {
      v19 = v12;
      v12 = *(_QWORD *)(v12 + 8);
      v20 = v19 ? (_QWORD *)(v19 - 56) : 0;
      if (v19 && *((_BYTE *)v20 + 16) == 3)
      {
        if ((*((_DWORD *)v20 + 5) & 0x7FFFFFF) == 0)
          goto LABEL_31;
      }
      else if (!*((_BYTE *)v20 + 16) && (_QWORD *)v20[9] == v20 + 9 && (*((_BYTE *)v20 + 34) & 0x80) == 0)
      {
        goto LABEL_31;
      }
      if ((v20[10] & 1) == 0)
        goto LABEL_31;
      v21 = v20[1];
      if (!v21)
        goto LABEL_31;
      if (*(_QWORD *)(v21 + 8))
        goto LABEL_31;
      v22 = *(_QWORD *)(v21 + 24);
      if (!v22)
        goto LABEL_31;
      if (*(_BYTE *)(v22 + 16) != 62)
        goto LABEL_31;
      v23 = *(_QWORD *)(v22 + 8);
      if (!v23)
        goto LABEL_31;
      if (*(_QWORD *)(v23 + 8))
        goto LABEL_31;
      if (v20[3] != *(_QWORD *)(v22 + 64))
        goto LABEL_31;
      v24 = *(_QWORD *)(v23 + 24);
      if (!v24)
        goto LABEL_31;
      if (*(_BYTE *)(v24 + 16) != 60)
        goto LABEL_31;
      v25 = *(_QWORD *)(v24 + 8);
      if (!v25)
        goto LABEL_31;
      if (*(_QWORD *)(v25 + 8))
        goto LABEL_31;
      if (*(_QWORD *)v24 != *(_QWORD *)(v22 + 72))
        goto LABEL_31;
      if ((v20[4] & 0x4000) == 0)
        goto LABEL_31;
      if (((_DWORD)v20[4] & 0xFu) - 7 > 1)
        goto LABEL_31;
      v26 = *(v20 - 4);
      if (!v26 || *(_BYTE *)(v26 + 16) != 8 || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v26 + 24) + 8) != 15)
        goto LABEL_31;
      v27 = *(_DWORD *)(v26 + 20);
      if ((v27 & 0x40000000) != 0)
      {
        v29 = *(llvm ***)(v26 - 8);
        v28 = v27 & 0x7FFFFFF;
      }
      else
      {
        v28 = v27 & 0x7FFFFFF;
        v29 = (llvm **)(v26 - 32 * v28);
      }
      v91 = v15;
      v92 = v14;
      v93 = v16;
      v90 = v17;
      if (v28)
        break;
      v88 = (uint64_t *)v24;
LABEL_74:
      v86 = (uint64_t *)v20[5];
      v35 = *(uint64_t ***)(v22 + 40);
      v36 = **v35;
      v110[0] = v16;
      v110[1] = (void *)0x200000000;
      v114 = v36;
      v115 = v14;
      v116 = v15;
      v117 = 0;
      v118 = 0;
      v119 = 512;
      v120 = 7;
      *v17 = 0;
      v17[1] = 0;
      v122 = &unk_1E8167888;
      v123 = &unk_1E8167A08;
      v112 = (uint64_t)v35;
      v113 = v35 + 5;
      v37 = (uint64_t ***)v35[7];
      v103 = (_DWORD *)*(v20 - 4);
      v108 = (llvm::LLVMContext **)v37[5];
      v98 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v103 + 32);
      llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)*v108 + 1960), v98);
      v87 = v38;
      v39 = (char *)operator new(0x78uLL);
      *((_DWORD *)v39 + 13) = *((_DWORD *)v39 + 13) & 0x38000000 | 1;
      *(_QWORD *)v39 = 0;
      *((_QWORD *)v39 + 1) = 0;
      *((_QWORD *)v39 + 2) = 0;
      *((_QWORD *)v39 + 3) = v39 + 32;
      v85 = v39;
      if ((*((_BYTE *)v37 + 23) & 0x10) == 0)
      {
        v49 = 0;
        v50 = &byte_1C871356D;
        goto LABEL_83;
      }
      v40 = ***v37;
      v41 = *(_QWORD *)(v40 + 152);
      v42 = *(unsigned int *)(v40 + 168);
      if (!(_DWORD)v42)
        goto LABEL_81;
      LODWORD(v43) = (v42 - 1) & ((v37 >> 4) ^ (v37 >> 9));
      v44 = (uint64_t ****)(v41 + 16 * v43);
      v45 = *v44;
      if (*v44 != v37)
      {
        v46 = 1;
        while (v45 != (uint64_t ***)-4096)
        {
          v47 = v43 + v46++;
          v43 = v47 & (v42 - 1);
          v45 = *(uint64_t ****)(v41 + 16 * v43);
          if (v45 == v37)
          {
            v44 = (uint64_t ****)(v41 + 16 * v43);
            goto LABEL_82;
          }
        }
LABEL_81:
        v44 = (uint64_t ****)(v41 + 16 * v42);
      }
LABEL_82:
      v48 = v44[1];
      v51 = *v48;
      v50 = (char *)(v48 + 2);
      v49 = v51;
LABEL_83:
      v52 = *((_BYTE *)v20 + 80);
      v53 = v20[4] & 0xF;
      v127 = 1283;
      v124 = (llvm::GlobalValue *)"reltable.";
      v126[0] = v50;
      v126[1] = v49;
      v89 = (unsigned __int8 *)(v39 + 32);
      llvm::GlobalVariable::GlobalVariable((uint64_t)(v39 + 32), (uint64_t)v108, v87, v52 & 1, v53, 0, (uint64_t)&v124, (uint64_t)v20, (*((_DWORD *)v20 + 8) >> 10) & 7, ((unint64_t)*(unsigned int *)(*v20 + 8) >> 8) | 0x100000000, (v52 & 2) != 0);
      v124 = (llvm::GlobalValue *)v126;
      v125 = 0x4000000000;
      sub_1C4848C0C((unsigned int *)&v124, (unint64_t)v98, 0);
      v54 = v103[5];
      if ((v54 & 0x40000000) != 0)
      {
        v56 = (uint64_t *)*((_QWORD *)v103 - 1);
        v55 = v54 & 0x7FFFFFF;
      }
      else
      {
        v55 = v54 & 0x7FFFFFF;
        v56 = (uint64_t *)&v103[-8 * v55];
      }
      if (v55)
      {
        v57 = 0;
        v104 = 32 * v55;
        do
        {
          v96 = *v56;
          v99 = (llvm::Value *)(v56 + 4);
          IntPtrType = (llvm::Constant *)llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(v108 + 34), *v108, 0);
          v95 = sub_1C537D3B8((llvm *)0x2F, (uint64_t)v89, IntPtrType, 0);
          v58 = sub_1C537D3B8((llvm *)0x2F, v96, IntPtrType, 0);
          Sub = llvm::ConstantExpr::getSub(v58, v95, 0, 0);
          v60 = sub_1C537D3B8((llvm *)0x26, (uint64_t)Sub, (llvm::Constant *)(*(_QWORD *)*v108 + 1960), 0);
          *(_QWORD *)((char *)v124 + v57) = v60;
          v57 += 8;
          v56 = (uint64_t *)v99;
          v104 -= 32;
        }
        while (v104);
      }
      v61 = llvm::ConstantArray::get(v87, v124, v125);
      llvm::GlobalVariable::setInitializer((uint64_t)v89, (llvm::Constant *)v61);
      *((_DWORD *)v85 + 16) = *((_DWORD *)v85 + 16) & 0xFFC0FF3F | 0x30080;
      if (v124 != (llvm::GlobalValue *)v126)
        free(v124);
      v112 = *(_QWORD *)(v22 + 40);
      v113 = (_QWORD *)(v22 + 24);
      v62 = *(llvm::GlobalValue **)(v22 + 48);
      v124 = v62;
      if (v62)
      {
        llvm::MetadataTracking::track((uint64_t)&v124, (unsigned __int8 *)v62, 2);
        v63 = v124;
      }
      else
      {
        v63 = 0;
      }
      sub_1C4774EF4((uint64_t)v110, 0, (uint64_t)v63);
      if (v124)
        llvm::MetadataTracking::untrack((uint64_t)&v124, (unsigned __int8 *)v124);
      v65 = *(llvm::GlobalValue ***)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF) + 64);
      v66 = *(llvm::ConstantInt **)*v65;
      v67 = *((_DWORD *)*v65 + 2);
      LODWORD(v125) = v67 >> 8;
      if (v67 >> 8 > 0x40)
      {
        v105 = v66;
        llvm::APInt::initSlowCase((llvm::APInt *)&v124, 2, 0);
        v66 = v105;
      }
      else
      {
        if (v67 <= 0xFF)
          v68 = 0;
        else
          v68 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v67);
        v124 = (llvm::GlobalValue *)(v68 & 2);
      }
      v69 = llvm::ConstantInt::get(v66, (llvm::LLVMContext *)&v124, v64);
      if (v125 >= 0x41 && v124)
      {
        v106 = v69;
        MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
        v69 = v106;
      }
      v124 = (llvm::GlobalValue *)"reltable.shift";
      v127 = 259;
      v70 = sub_1C506E874((uint64_t)v110, (uint64_t)v65, (uint64_t)v69, (uint64_t)&v124, 0, 0);
      v112 = v88[5];
      v113 = v88 + 3;
      v100 = (llvm::Value *)v70;
      v71 = (llvm::GlobalValue *)v88[6];
      v124 = v71;
      if (v71)
      {
        llvm::MetadataTracking::track((uint64_t)&v124, (unsigned __int8 *)v71, 2);
        v72 = v124;
      }
      else
      {
        v72 = 0;
      }
      sub_1C4774EF4((uint64_t)v110, 0, (uint64_t)v72);
      if (v124)
        llvm::MetadataTracking::untrack((uint64_t)&v124, (unsigned __int8 *)v124);
      v124 = *v65;
      Declaration = llvm::Intrinsic::getDeclaration(v86, 171, (uint64_t *)&v124, 1);
      v74 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v114 + 1912), 0);
      v127 = 257;
      v75 = sub_1C4773E38((uint64_t *)v110, 49, v89, v74, (uint64_t)&v124);
      if (Declaration)
        v76 = *(uint64_t ***)(Declaration + 24);
      else
        v76 = 0;
      v109[0] = (uint64_t)v75;
      v109[1] = (uint64_t)v100;
      v124 = (llvm::GlobalValue *)"reltable.intrinsic";
      v127 = 259;
      v77 = sub_1C4774778((uint64_t *)v110, v76, Declaration, v109, 2, (uint64_t)&v124, 0);
      v97 = *v88;
      v101 = (unsigned __int8 *)v77;
      if (v97 == llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v114 + 1912), 0))
      {
        v79 = v101;
      }
      else
      {
        v78 = *v88;
        v124 = (llvm::GlobalValue *)"reltable.bitcast";
        v127 = 259;
        v79 = sub_1C4773E38((uint64_t *)v110, 49, v101, v78, (uint64_t)&v124);
      }
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v88, (llvm::Value *)v79, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v88[5] + 40, (uint64_t ***)v88);
      v80 = v88[3];
      v81 = (uint64_t *)v88[4];
      *v81 = v80;
      *(_QWORD *)(v80 + 8) = v81;
      v88[3] = 0;
      v88[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v88);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v22 + 40) + 40, (uint64_t ***)v22);
      v82 = *(_QWORD *)(v22 + 24);
      v83 = *(_QWORD **)(v22 + 32);
      *v83 = v82;
      *(_QWORD *)(v82 + 8) = v83;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v22);
      if (v110[0] != v93)
        free(v110[0]);
      llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v20);
      v13 = 1;
      v15 = v91;
      v14 = v92;
      v16 = v93;
      v17 = v90;
      if (v12 == v11)
        goto LABEL_123;
    }
    v30 = 32 * v28;
    while (1)
    {
      v102 = v29;
      v31 = *v29;
      v110[0] = 0;
      v107 = 1;
      LODWORD(v125) = 1;
      v124 = 0;
      if (llvm::IsConstantOffsetFromGlobal(v31, (uint64_t **)v110, &v124, v18, 0, v6))
      {
        if (v110[0])
          v32 = *((_BYTE *)v110[0] + 16) == 3;
        else
          v32 = 0;
        v33 = !v32
           || (*((_BYTE *)v110[0] + 80) & 1) == 0
           || (*((_DWORD *)v110[0] + 8) & 0x4000) == 0
           || (*((_DWORD *)v110[0] + 8) & 0xFu) - 9 < 0xFFFFFFFE;
        v107 = v33;
      }
      if (v125 >= 0x41 && v124)
        MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
      v15 = v91;
      v14 = v92;
      v16 = v93;
      v17 = v90;
      if (v107)
        break;
      v29 = v102 + 4;
      v30 -= 32;
      if (!v30)
      {
        v22 = *(_QWORD *)(v20[1] + 24);
        v88 = *(uint64_t **)(*(_QWORD *)(v22 + 8) + 24);
        goto LABEL_74;
      }
    }
LABEL_31:
    ;
  }
  while (v12 != v11);
  if ((v13 & 1) == 0)
    goto LABEL_124;
LABEL_123:
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
}

unsigned __int8 *llvm::SCEVExpander::ReuseOrCreateCast(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v21;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 **v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v43[4];
  __int16 v44;
  uint64_t v45[5];

  v10 = *((_QWORD *)a2 + 1);
  if (v10)
  {
    v11 = a1[63];
    if (a5)
      v12 = a5 - 24;
    else
      v12 = 0;
    if (v11)
      v13 = (unsigned __int8 *)(v11 - 24);
    else
      v13 = 0;
    do
    {
      v14 = *(unsigned __int8 **)(v10 + 24);
      if (*(_QWORD *)v14 == a3)
      {
        v15 = v14[16];
        v16 = v15 - 66;
        v17 = v15 >= 0x1C;
        v18 = v15 - 28;
        v19 = !v17 || v16 > 0xC;
        if (!v19 && v18 == (_DWORD)a4)
        {
          v21 = *(_QWORD *)(v12 + 40);
          if (v21 == *((_QWORD *)v14 + 5) && v13 != v14)
          {
            if ((unsigned __int8 *)v12 == v14)
              return (unsigned __int8 *)(a5 - 24);
            v23 = *(__int16 *)(v21 + 18);
            if ((v23 & 0x80000000) == 0)
            {
              v24 = *(_QWORD *)(v21 + 48);
              if (v24 != v21 + 40)
              {
                v25 = 0;
                do
                {
                  v26 = v24 - 24;
                  if (!v24)
                    v26 = 0;
                  *(_DWORD *)(v26 + 56) = v25++;
                  v24 = *(_QWORD *)(v24 + 8);
                }
                while (v24 != v21 + 40);
              }
              *(_WORD *)(v21 + 18) = v23 | 0x8000;
            }
            if (*((_DWORD *)v14 + 14) < *(_DWORD *)(v12 + 56))
              return v14;
          }
        }
      }
      v10 = *(_QWORD *)(v10 + 8);
    }
    while (v10);
  }
  sub_1C5F6E01C((uint64_t)v45, (llvm::IRBuilderBase *)(a1 + 56), (uint64_t)a1);
  v27 = 0;
  v28 = a5 - 24;
  if (!a5)
    v28 = 0;
  a1[62] = *(_QWORD *)(v28 + 40);
  a1[63] = v28 + 24;
  v29 = *(unsigned __int8 **)(v28 + 48);
  v43[0] = v29;
  if (v29)
  {
    llvm::MetadataTracking::track((uint64_t)v43, v29, 2);
    v27 = v43[0];
  }
  sub_1C4774EF4((uint64_t)(a1 + 56), 0, (uint64_t)v27);
  if (v43[0])
    llvm::MetadataTracking::untrack((uint64_t)v43, v43[0]);
  if ((a2[23] & 0x10) == 0)
  {
    v40 = 0;
    v39 = (unsigned __int8 *)&byte_1C871356D;
    goto LABEL_47;
  }
  v30 = ***(_QWORD ***)a2;
  v31 = *(_QWORD *)(v30 + 152);
  v32 = *(unsigned int *)(v30 + 168);
  if (!(_DWORD)v32)
    goto LABEL_45;
  LODWORD(v33) = (v32 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v34 = (unsigned __int8 **)(v31 + 16 * v33);
  v35 = *v34;
  if (*v34 != a2)
  {
    v36 = 1;
    while (v35 != (unsigned __int8 *)-4096)
    {
      v37 = v33 + v36++;
      v33 = v37 & (v32 - 1);
      v35 = *(unsigned __int8 **)(v31 + 16 * v33);
      if (v35 == a2)
      {
        v34 = (unsigned __int8 **)(v31 + 16 * v33);
        goto LABEL_46;
      }
    }
LABEL_45:
    v34 = (unsigned __int8 **)(v31 + 16 * v32);
  }
LABEL_46:
  v38 = v34[1];
  v41 = *(unsigned __int8 **)v38;
  v39 = v38 + 16;
  v40 = v41;
LABEL_47:
  v44 = 261;
  v43[0] = v39;
  v43[1] = v40;
  v14 = sub_1C4773E38(a1 + 56, a4, a2, a3, (uint64_t)v43);
  sub_1C5F6E0A4(v45);
  return v14;
}

uint64_t llvm::SCEVExpander::findInsertPointAfter(llvm::SCEVExpander *this, llvm::Instruction *a2, llvm::Instruction *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  llvm::Instruction *v17;
  llvm::Instruction *v18;
  BOOL v19;

  v5 = (uint64_t *)((char *)a2 + 32);
  if (a2 && *((_BYTE *)a2 + 16) == 33)
    v5 = (uint64_t *)(*((_QWORD *)a2 - 12) + 48);
  do
  {
    v6 = *v5;
    v7 = *v5 - 24;
    if (!v6)
      v7 = 0;
    v8 = *(unsigned __int8 *)(v7 + 16);
    v5 = (uint64_t *)(v6 + 8);
  }
  while (v8 == 83);
  if (v8 != 94 && (v8 - 79) >= 2)
  {
    if (v8 == 38)
    {
      v10 = *((_QWORD *)a3 + 5);
      v6 = v10 + 40;
      for (i = *(_QWORD *)(v10 + 48); i != v6; i = *(_QWORD *)(i + 8))
      {
        v12 = i - 24;
        if (!i)
          v12 = 0;
        if (*(_BYTE *)(v12 + 16) != 83)
        {
          v13 = *(unsigned __int8 *)(i - 8) - 38;
          v14 = v13 > 0x38;
          v15 = (1 << v13) & 0x100060000000001;
          if (!v14 && v15 != 0)
          {
            v5 = (uint64_t *)(i + 8);
            goto LABEL_11;
          }
          v6 = i;
          break;
        }
      }
    }
  }
  else
  {
LABEL_11:
    v6 = *v5;
  }
  if (v6)
    v17 = (llvm::Instruction *)(v6 - 24);
  else
    v17 = 0;
  if (sub_1C5BA2178((uint64_t)this, (uint64_t)v17) && v17 != a3)
  {
    do
    {
      v6 = *(_QWORD *)(v6 + 8);
      if (v6)
        v18 = (llvm::Instruction *)(v6 - 24);
      else
        v18 = 0;
      if (sub_1C5BA2178((uint64_t)this, (uint64_t)v18))
        v19 = v18 == a3;
      else
        v19 = 1;
    }
    while (!v19);
  }
  return v6;
}

uint64_t llvm::SCEVExpander::GetOptimalInsertionPointForCastOf(llvm::SCEVExpander *this, llvm::Value *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v12;
  llvm::Instruction *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;

  v3 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v3 == 21)
  {
    v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 80);
    if (v4)
      v5 = v4 - 24;
    else
      v5 = 0;
    for (i = (uint64_t *)(v5 + 48); ; i = (uint64_t *)(v7 + 8))
    {
      v7 = *i;
      v8 = *i - 24;
      v9 = v7 ? v8 : 0;
      if (*(_BYTE *)(v9 + 16) == 77)
      {
        v10 = *(llvm::Value **)(v9 - 32);
        if (v10 != a2 && *((_BYTE *)v10 + 16) == 21)
          continue;
      }
      if (!sub_1C4D99D08(v9))
        break;
    }
    return v7;
  }
  if (!a2 || v3 < 0x1C)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 62) + 56) + 80);
    if (v15)
      v16 = v15 - 24;
    else
      v16 = 0;
    v7 = v16 + 40;
    for (j = *(_QWORD *)(v16 + 48); j != v7; j = *(_QWORD *)(j + 8))
    {
      v18 = j - 24;
      if (!j)
        v18 = 0;
      if (*(_BYTE *)(v18 + 16) != 83)
      {
        v19 = *(unsigned __int8 *)(j - 8) - 38;
        v20 = v19 > 0x38;
        v21 = (1 << v19) & 0x100060000000001;
        if (v20 || v21 == 0)
          return j;
        else
          return *(_QWORD *)(j + 8);
      }
    }
    return v7;
  }
  v12 = *((_QWORD *)this + 63);
  if (v12)
    v13 = (llvm::Instruction *)(v12 - 24);
  else
    v13 = 0;
  return llvm::SCEVExpander::findInsertPointAfter(this, a2, v13);
}

unsigned __int8 *llvm::SCEVExpander::InsertNoopCastOfTo(llvm::SCEVExpander *this, llvm::Value *a2, llvm::Type *a3)
{
  llvm::Value *v4;
  uint64_t CastOpcode;
  uint64_t v7;
  uint64_t v8;
  __int32 *v9;
  size_t v10;
  __int32 *v11;
  __int32 *v12;
  uint64_t *v13;
  llvm::Constant *v14;
  llvm::GetElementPtrInst *v15;
  llvm::Type *v16;
  uint64_t *NullValue;
  unsigned __int8 *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t IndexTypeSizeInBits;
  llvm::Type *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t OptimalInsertionPointForCastOf;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[4];
  __int16 v54;

  v4 = a2;
  CastOpcode = llvm::CastInst::getCastOpcode(a2, 0, (uint64_t)a3, 0);
  v7 = CastOpcode;
  if ((_DWORD)CastOpcode == 49)
  {
    if (*(llvm::Type **)v4 == a3)
      return (unsigned __int8 *)v4;
    v19 = *((unsigned __int8 *)v4 + 16);
    v20 = v19 >= 0x1C && v19 - 79 >= 0xFFFFFFF3;
    if (v20 && **((llvm::Type ***)v4 - 4) == a3)
      return (unsigned __int8 *)*((_QWORD *)v4 - 4);
  }
  else
  {
    if ((_DWORD)CastOpcode == 48)
    {
      v8 = *((_QWORD *)this + 1);
      v9 = *(__int32 **)(v8 + 384);
      v10 = *(unsigned int *)(v8 + 392);
      v11 = wmemchr(v9, *((_DWORD *)a3 + 2) >> 8, v10);
      if (v11)
        v12 = v11;
      else
        v12 = &v9[v10];
      if (v10 != v12 - v9)
      {
        v13 = (uint64_t *)((char *)this + 448);
        v14 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(**((_QWORD **)this + 64) + 1912), (llvm::Type *)(*((_DWORD *)a3 + 2) >> 8));
        v15 = (llvm::GetElementPtrInst *)(**((_QWORD **)this + 64) + 1912);
        NullValue = (uint64_t *)llvm::Constant::getNullValue(v14, v16);
        v53[0] = "uglygep";
        v54 = 259;
        v18 = (unsigned __int8 *)sub_1C4867B70(v13, v15, NullValue, (uint64_t)v4, (uint64_t)v53);
        v54 = 257;
        return sub_1C4773E38(v13, 49, v18, (uint64_t)a3, (uint64_t)v53);
      }
    }
    else if ((CastOpcode - 47) > 1)
    {
      goto LABEL_47;
    }
    v21 = *(_QWORD *)(**(_QWORD **)this + 40) + 272;
    if (*((_BYTE *)a3 + 8) == 15)
    {
      IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v21, (uint64_t)a3);
    }
    else
    {
      sub_1C4768AD0(v21, (uint64_t)a3);
      IndexTypeSizeInBits = v23;
      if ((_DWORD)v22 == 1)
    }
    v25 = *(llvm::Type **)v4;
    v26 = *(_QWORD *)(**(_QWORD **)this + 40) + 272;
    if (*(_BYTE *)(*(_QWORD *)v4 + 8) == 15)
    {
      v27 = llvm::DataLayout::getIndexTypeSizeInBits(v26, (uint64_t)v25);
    }
    else
    {
      sub_1C4768AD0(v26, (uint64_t)v25);
      if ((_DWORD)v28 == 1)
      {
        v50 = v27;
        v27 = v50;
      }
    }
    if (IndexTypeSizeInBits == v27)
    {
      v29 = *((unsigned __int8 *)v4 + 16);
      if (v29 >= 0x1C && v29 - 66 <= 0xC && v29 - 75 <= 1)
      {
        v30 = *(_QWORD *)v4;
        v31 = *(_QWORD *)(**(_QWORD **)this + 40) + 272;
        if (*(_BYTE *)(*(_QWORD *)v4 + 8) == 15)
        {
          v34 = llvm::DataLayout::getIndexTypeSizeInBits(v31, v30);
        }
        else
        {
          sub_1C4768AD0(v31, v30);
          v34 = v33;
          if ((_DWORD)v32 == 1)
        }
        v35 = **((_QWORD **)v4 - 4);
        v36 = *(_QWORD *)(**(_QWORD **)this + 40) + 272;
        if (*(_BYTE *)(v35 + 8) == 15)
        {
          v37 = llvm::DataLayout::getIndexTypeSizeInBits(v36, v35);
        }
        else
        {
          sub_1C4768AD0(v36, v35);
          if ((_DWORD)v38 == 1)
          {
            v51 = v37;
            v37 = v51;
          }
        }
        if (v34 == v37)
          return (unsigned __int8 *)*((_QWORD *)v4 - 4);
        v29 = *((unsigned __int8 *)v4 + 16);
      }
      if (v29 == 5 && *((unsigned __int16 *)v4 + 9) - 47 <= 1)
      {
        v39 = *(_QWORD *)v4;
        v40 = *(_QWORD *)(**(_QWORD **)this + 40) + 272;
        if (*(_BYTE *)(*(_QWORD *)v4 + 8) == 15)
        {
          v43 = llvm::DataLayout::getIndexTypeSizeInBits(v40, v39);
        }
        else
        {
          sub_1C4768AD0(v40, v39);
          v43 = v42;
          if ((_DWORD)v41 == 1)
        }
        v44 = **((_QWORD **)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
        v45 = *(_QWORD *)(**(_QWORD **)this + 40) + 272;
        if (*(_BYTE *)(v44 + 8) == 15)
        {
          v46 = llvm::DataLayout::getIndexTypeSizeInBits(v45, v44);
        }
        else
        {
          sub_1C4768AD0(v45, v44);
          if ((_DWORD)v47 == 1)
          {
            v52 = v46;
            v46 = v52;
          }
        }
        if (v43 == v46)
          return (unsigned __int8 *)*((_QWORD *)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
      }
    }
  }
LABEL_47:
  if (v4 && *((unsigned __int8 *)v4 + 16) <= 0x14u)
    return (unsigned __int8 *)llvm::ConstantExpr::getCast(v7);
  OptimalInsertionPointForCastOf = llvm::SCEVExpander::GetOptimalInsertionPointForCastOf(this, v4);
  return llvm::SCEVExpander::ReuseOrCreateCast(this, (unsigned __int8 *)v4, (uint64_t)a3, v7, OptimalInsertionPointForCastOf);
}

char *llvm::SCEVExpander::InsertBinop(_QWORD *a1, llvm *this, unsigned __int8 *a3, llvm::Constant *a4, char a5, int a6)
{
  char v7;
  char *v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  BOOL v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  _QWORD *v34;
  unsigned __int8 *v35;
  uint64_t *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t LoopPredecessor;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  int v52;
  unsigned __int8 **v53;
  unsigned __int8 *v54;
  int v56;
  int v57;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  uint64_t v61[3];
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  unsigned __int8 *v65[4];
  __int16 v66;
  uint64_t v67;

  v7 = a5;
  v67 = *MEMORY[0x1E0C80C00];
  if (a3 && a3[16] <= 0x14u && a4 && *((unsigned __int8 *)a4 + 16) <= 0x14u)
  {
    v12 = (char *)llvm::ConstantFoldBinaryInstruction(this, (llvm::Constant *)a3, a4, a4);
    if (!v12)
    {
      v13 = *(_QWORD ***)a3;
      if (*(_QWORD *)a3)
      {
        v65[0] = a3;
        v65[1] = (unsigned __int8 *)a4;
        v14 = **v13 + 1512;
        LODWORD(v61[0]) = this;
        v61[1] = (uint64_t)v65;
        v61[2] = 2;
        v62 = 0u;
        v63 = 0u;
        v64 = 0;
        return (char *)sub_1C537D4FC(v14, (uint64_t)v13, (unsigned __int8 *)v61);
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    v15 = (_QWORD *)a1[63];
    v16 = *(_QWORD **)(a1[62] + 48);
    if (v15 == v16)
    {
LABEL_36:
      v34 = v16 - 3;
      if (!v16)
        v34 = 0;
      v35 = (unsigned __int8 *)v34[6];
      v60 = v35;
      if (v35)
        llvm::MetadataTracking::track((uint64_t)&v60, v35, 2);
      sub_1C5F6E01C((uint64_t)v61, (llvm::IRBuilderBase *)(a1 + 56), (uint64_t)a1);
      if (a6)
      {
        v36 = *(uint64_t **)(*a1 + 40);
        v37 = *((_DWORD *)v36 + 4);
        if (v37)
        {
          while (1)
          {
            v38 = a1[62];
            v39 = *v36;
            v40 = v37 - 1;
            v41 = ((v38 >> 4) ^ (v38 >> 9)) & (v37 - 1);
            v42 = *(_QWORD *)(v39 + 16 * v41);
            if (v38 != v42)
              break;
LABEL_46:
            v45 = v39 + 16 * v41;
            v46 = *(_QWORD *)(v45 + 8);
            if (!v46)
              goto LABEL_69;
            if (!llvm::Loop::isLoopInvariant(*(_QWORD *)(v45 + 8), (uint64_t)a3))
              goto LABEL_69;
            if (!llvm::Loop::isLoopInvariant(v46, (uint64_t)a4))
              goto LABEL_69;
            LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v46);
            if (!LoopPredecessor)
              goto LABEL_69;
            v48 = *(_QWORD *)(LoopPredecessor + 40);
            if (v48 == LoopPredecessor + 40)
              goto LABEL_69;
            if (v48)
              v49 = v48 - 24;
            else
              v49 = 0;
            if (*(_BYTE *)(v49 + 16) == 30)
            {
              if ((*(_DWORD *)(v49 + 20) & 0x7FFFFFF) == 3)
                goto LABEL_69;
            }
            else
            {
              switch(*(_BYTE *)(v49 + 16))
              {
                case 0x1E:
                  __break(1u);
                  return 0;
                case 0x1F:
                  v52 = (*(_DWORD *)(v49 + 20) >> 1) & 0x3FFFFFF;
                  break;
                case 0x20:
                  v52 = (*(_DWORD *)(v49 + 20) & 0x7FFFFFF) - 1;
                  break;
                case 0x27:
                  v52 = *(_DWORD *)(v49 + 80) + 1;
                  break;
                default:
                  goto LABEL_69;
              }
              if (v52 != 1)
                goto LABEL_69;
            }
            a1[62] = *(_QWORD *)(v49 + 40);
            a1[63] = v49 + 24;
            v50 = *(unsigned __int8 **)(v49 + 48);
            v65[0] = v50;
            if (v50)
            {
              llvm::MetadataTracking::track((uint64_t)v65, v50, 2);
              v51 = v65[0];
            }
            else
            {
              v51 = 0;
            }
            sub_1C4774EF4((uint64_t)(a1 + 56), 0, (uint64_t)v51);
            if (v65[0])
              llvm::MetadataTracking::untrack((uint64_t)v65, v65[0]);
            v36 = *(uint64_t **)(*a1 + 40);
            v37 = *((_DWORD *)v36 + 4);
            if (!v37)
              goto LABEL_69;
          }
          v43 = 1;
          while (v42 != -4096)
          {
            v44 = v41 + v43++;
            v41 = v44 & v40;
            v42 = *(_QWORD *)(v39 + 16 * v41);
            if (v38 == v42)
              goto LABEL_46;
          }
        }
      }
LABEL_69:
      v66 = 257;
      v12 = (char *)sub_1C4773860((uint64_t)(a1 + 56), (uint64_t)this, a3, (uint64_t)a4, (uint64_t)v65, 0);
      v59 = v60;
      if (v60)
        llvm::MetadataTracking::track((uint64_t)&v59, v60, 2);
      v53 = (unsigned __int8 **)(v12 + 48);
      if (&v59 == (unsigned __int8 **)(v12 + 48))
      {
        if (v59)
          llvm::MetadataTracking::untrack((uint64_t)&v59, v59);
      }
      else
      {
        if (*v53)
          llvm::MetadataTracking::untrack((uint64_t)(v12 + 48), *v53);
        v54 = v59;
        *v53 = v59;
        if (v54)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v59, v54, (uint64_t)(v12 + 48));
          v59 = 0;
        }
      }
      if ((v7 & 2) != 0)
        v12[17] |= 2u;
      if ((v7 & 4) != 0)
        v12[17] |= 4u;
      sub_1C5F6E0A4(v61);
      if (v60)
        llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    }
    else
    {
      v57 = a5 & 4;
      v56 = a5 & 2;
      v17 = 6;
      while (1)
      {
        v15 = (_QWORD *)*v15;
        v12 = (char *)(v15 - 3);
        v18 = v15 ? (uint64_t)(v15 - 3) : 0;
        v19 = sub_1C4D99D08(v18);
        v20 = *(unsigned __int8 *)(v18 + 16);
        if (v20 - 28 == (_DWORD)this)
        {
          v21 = *(_DWORD *)(v18 + 20);
          v22 = (v21 & 0x40000000) != 0 ? *(_QWORD *)(v18 - 8) : v18 - 32 * (v21 & 0x7FFFFFF);
          if (*(unsigned __int8 **)v22 == a3 && *(llvm::Constant **)(v22 + 32) == a4)
          {
            HIDWORD(v24) = v20 - 41;
            LODWORD(v24) = v20 - 41;
            v23 = v24 >> 1;
            v25 = v23 > 6;
            v26 = (1 << v23) & 0x47;
            v27 = v25 || v26 == 0;
            if (v27
              || ((v28 = *(unsigned __int8 *)(v18 + 17), v27 = v57 == ((v28 >> 2) & 1), v29 = (v28 >> 1) & 1, v27)
                ? (v30 = v56 == v29)
                : (v30 = 0),
                  v30))
            {
              v25 = v20 > 0x37;
              v31 = (1 << v20) & 0xC1800000000000;
              v32 = v25 || v31 == 0;
              if (v32 || (*(_BYTE *)(v18 + 17) & 2) == 0)
                break;
            }
          }
        }
        if (v15 != v16)
        {
          v33 = v17 + v19;
          v17 = v17 + v19 - 1;
          if (v33 != 1)
            continue;
        }
        v16 = (_QWORD *)a1[63];
        v7 = a5;
        goto LABEL_36;
      }
    }
  }
  return v12;
}

uint64_t llvm::SCEVExpander::expandAddToGEP(llvm::DataLayout **this, const llvm::SCEV *const *__src, const llvm::SCEV *const *a3, uint64_t **a4, llvm::Type *a5, llvm::Value *inserted)
{
  int64_t v12;
  unsigned int v13;
  llvm::ScalarEvolution *v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t Constant;
  uint64_t v24;
  unint64_t v25;
  unint64_t AddRecExpr;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  llvm::Type *v35;
  llvm::Type *v36;
  llvm::Type *v37;
  char v38;
  uint64_t v39;
  unsigned int v40;
  llvm::SCEV *SizeOfExpr;
  llvm::Type *v42;
  llvm::SCEV **v43;
  uint64_t v44;
  int v45;
  llvm::SCEV *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  const llvm::SCEV *AddExpr;
  llvm::Value **NullValue;
  llvm::Value **v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t IndexTypeSizeInBits;
  llvm::StructLayout *StructLayout;
  const llvm::APInt *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  llvm::ConstantInt *v75;
  unsigned int v76;
  unint64_t v77;
  llvm::ValueHandleBase *v78;
  uint64_t v79;
  unint64_t v80;
  llvm::Value **v81;
  uint64_t v82;
  BOOL v83;
  uint64_t *v86;
  int v87;
  llvm::DataLayout *v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  llvm::DataLayout *v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t LoopPredecessor;
  uint64_t result;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  int v106;
  llvm::Type *v107;
  const llvm::SCEV *v108;
  uint64_t v109;
  _QWORD *v110;
  BOOL v111;
  llvm::DataLayout *v112;
  llvm::DataLayout *v113;
  int v114;
  uint64_t v115;
  _BOOL4 v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t *v121;
  int v122;
  llvm::DataLayout *v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  llvm::DataLayout *v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void *v137;
  int v138;
  llvm::GetElementPtrInst *v139;
  llvm::GetElementPtrInst *v140;
  llvm::Value *v141;
  unint64_t Unknown;
  unsigned int v143;
  const llvm::SCEV *v144;
  llvm::GetElementPtrInst *v145;
  uint64_t ElementPtr;
  uint64_t v147;
  llvm::Type *v148;
  llvm::Value *v149;
  llvm::SCEV *v150;
  llvm::SCEV *v151;
  void *v152;
  uint64_t v153;
  _BYTE v154[16];
  __int16 v155;
  void *v156;
  uint64_t v157;
  _BYTE v158[64];
  void *v159;
  uint64_t v160;
  _BYTE v161[32];
  _QWORD *v162;
  uint64_t v163;
  _QWORD v164[10];

  v164[8] = *MEMORY[0x1E0C80C00];
  v159 = v161;
  v160 = 0x400000000;
  v156 = v158;
  v157 = 0x800000000;
  v12 = (char *)a3 - (char *)__src;
  if ((unint64_t)((char *)a3 - (char *)__src) >= 0x41)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, (uint64_t)v158, v12 >> 3, 8);
    v13 = v157;
  }
  else
  {
    v13 = 0;
  }
  if (__src != a3)
  {
    memcpy((char *)v156 + 8 * v13, __src, v12);
    v13 = v157;
  }
  v14 = *this;
  v162 = v164;
  v163 = 0x800000000;
  v15 = v13 + ((unint64_t)v12 >> 3);
  LODWORD(v157) = v15;
  v148 = (llvm::Type *)a4;
  v149 = inserted;
  if (v15)
  {
    v16 = 0;
    v17 = v156;
    do
    {
      v18 = v16;
      v19 = v17[v16];
      if (v19)
        v20 = *(unsigned __int16 *)(v19 + 24) == 7;
      else
        v20 = 0;
      if (v20)
      {
        do
        {
          v21 = (uint64_t *)(v19 + 32);
          v22 = **(_QWORD **)(v19 + 32);
          if (llvm::SCEV::isZero((llvm::SCEV *)v22))
            break;
          Constant = llvm::ScalarEvolution::getConstant(v14, a5, 0, 0);
          v24 = *(_QWORD *)(v19 + 40);
          if (v24 == 2)
          {
            v25 = *(_QWORD *)(*v21 + 8);
          }
          else
          {
            v147 = *v21;
            v152 = v154;
            v153 = 0x300000000;
            v32 = 8 * v24 - 8;
            if ((unint64_t)v32 >= 0x19)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v32 >> 3, 8);
              v33 = v153;
            }
            else
            {
              v33 = 0;
            }
            if (v24 != 1)
            {
              memcpy((char *)v152 + 8 * v33, (const void *)(v147 + 8), 8 * v24 - 8);
              v33 = v153;
            }
            LODWORD(v153) = v33 + ((unint64_t)v32 >> 3);
            v25 = sub_1C618AB20((uint64_t *)v14, (uint64_t)&v152, *(uint64_t ***)(v19 + 48));
            if (v152 != v154)
              free(v152);
          }
          AddRecExpr = llvm::ScalarEvolution::getAddRecExpr((uint64_t *)v14, Constant, v25, *(uint64_t ***)(v19 + 48));
          v27 = v163;
          if (v163 >= (unint64_t)HIDWORD(v163))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v162, (uint64_t)v164, v163 + 1, 8);
            v27 = v163;
          }
          v162[v27] = AddRecExpr;
          LODWORD(v163) = v163 + 1;
          if (v22 && *(_WORD *)(v22 + 24) == 4)
          {
            *((_QWORD *)v156 + v18) = Constant;
            v28 = *(const void **)(v22 + 32);
            v29 = *(_QWORD *)(v22 + 40);
            v30 = v157;
            v31 = v29 + v157;
            if (v31 > HIDWORD(v157))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, (uint64_t)v158, v31, 8);
              v30 = v157;
            }
            if (v29)
            {
              memcpy((char *)v156 + 8 * v30, v28, 8 * v29);
              v30 = v157;
            }
            LODWORD(v157) = v30 + v29;
            v15 += *(_DWORD *)(v22 + 40);
          }
          else
          {
            *((_QWORD *)v156 + v18) = v22;
          }
          v17 = v156;
          v19 = *((_QWORD *)v156 + v18);
          if (!v19)
            break;
        }
        while (*(_WORD *)(v19 + 24) == 7);
      }
      v16 = v18 + 1;
    }
    while ((_DWORD)v18 + 1 != v15);
    v34 = v162;
    if ((_DWORD)v163)
    {
      sub_1C4FA6FB8((unsigned int *)&v156, v162, &v162[v163]);
      sub_1C5F62E40((unsigned int *)&v156, a5, v14);
      v34 = v162;
    }
    a4 = (uint64_t **)v148;
    inserted = v149;
    if (v34 != v164)
      free(v34);
  }
  llvm::DataLayout::getIndexType(this[1], (llvm::Type *)a4);
  if (!a4[3])
    goto LABEL_166;
  v37 = v35;
  v38 = 0;
  v39 = *a4[2];
  do
  {
    v162 = v164;
    v163 = 0x800000000;
    v40 = *(unsigned __int8 *)(v39 + 8);
    if (v40 > 0x11)
      goto LABEL_126;
    if (((1 << v40) & 0xAC7F) == 0)
    {
      if (((1 << v40) & 0x30000) == 0)
      {
LABEL_126:
        if ((v40 & 0xFE) != 0x12 && v40 != 21)
          goto LABEL_63;
      }
      if (!llvm::Type::isSizedDerivedType(v39, 0))
        goto LABEL_63;
    }
    SizeOfExpr = (llvm::SCEV *)llvm::ScalarEvolution::getSizeOfExpr(*this, v37, (llvm::Type *)v39);
    if (!llvm::SCEV::isZero(SizeOfExpr))
    {
      v42 = v37;
      v152 = v154;
      v153 = 0x800000000;
      if ((_DWORD)v157)
      {
        v43 = (llvm::SCEV **)v156;
        v44 = 8 * v157;
        while (1)
        {
          v151 = *v43;
          v150 = (llvm::SCEV *)llvm::ScalarEvolution::getConstant(*this, a5, 0, 0);
          v45 = sub_1C5F62878(&v151, (uint64_t *)&v150, (uint64_t)SizeOfExpr, *this);
          v46 = v151;
          if (!v45)
            break;
          v47 = v163;
          if (v163 >= (unint64_t)HIDWORD(v163))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v162, (uint64_t)v164, v163 + 1, 8);
            v47 = v163;
          }
          v162[v47] = v46;
          LODWORD(v163) = v163 + 1;
          v46 = v150;
          if (!llvm::SCEV::isZero(v150))
          {
            v48 = v153;
            v49 = HIDWORD(v153);
            v38 = 1;
            goto LABEL_55;
          }
          v38 = 1;
LABEL_58:
          ++v43;
          v44 -= 8;
          if (!v44)
            goto LABEL_59;
        }
        v48 = v153;
        v49 = HIDWORD(v153);
LABEL_55:
        if (v48 >= v49)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v152, (uint64_t)v154, v48 + 1, 8);
          v48 = v153;
        }
        *((_QWORD *)v152 + v48) = v46;
        LODWORD(v153) = v153 + 1;
        goto LABEL_58;
      }
LABEL_59:
      if ((_DWORD)v163)
      {
        sub_1C62C1D5C((uint64_t)&v156, (uint64_t)&v152);
        sub_1C5F62E40((unsigned int *)&v156, a5, *this);
      }
      v37 = v42;
      if (v152 != v154)
        free(v152);
    }
LABEL_63:
    if ((_DWORD)v163)
    {
      AddExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getAddExpr((uint64_t)*this, (uint64_t)&v162, 0, 0);
      NullValue = (llvm::Value **)llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)this, AddExpr, a5, 0);
    }
    else
    {
      NullValue = llvm::Constant::getNullValue(a5, v36);
    }
    v52 = NullValue;
    v53 = v160;
    if (v160 >= (unint64_t)HIDWORD(v160))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, (uint64_t)v161, v160 + 1, 8);
      v53 = v160;
    }
    *((_QWORD *)v159 + v53) = v52;
    LODWORD(v160) = v160 + 1;
    v54 = *(unsigned __int8 *)(v39 + 8);
    if (v39 && v54 == 16 && *(_DWORD *)(v39 + 12) && (_DWORD)v157)
    {
      do
      {
        v55 = *(_QWORD *)v156;
        if (*(_QWORD *)v156)
          v56 = *(unsigned __int16 *)(*(_QWORD *)v156 + 24) == 0;
        else
          v56 = 0;
        if (!v56)
          goto LABEL_99;
        v57 = **(_QWORD **)(v55 + 32);
        v58 = *(_QWORD *)(*(_QWORD *)*this + 40) + 272;
        if (*(_BYTE *)(v57 + 8) == 15)
        {
          IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v58, v57);
        }
        else
        {
          sub_1C4768AD0(v58, v57);
          IndexTypeSizeInBits = v59;
          if ((_DWORD)v36 == 1)
        }
        if (IndexTypeSizeInBits > 0x40)
          goto LABEL_99;
        StructLayout = llvm::DataLayout::getStructLayout(this[1], (llvm::StructType *)v39);
        v63 = *(_QWORD *)(v55 + 32);
        v64 = (_QWORD *)(v63 + 24);
        if (*(_DWORD *)(v63 + 32) >= 0x41u)
          v64 = (_QWORD *)*v64;
        v65 = (_QWORD *)*v64;
        if (*v64 < *(_QWORD *)StructLayout)
        {
          v66 = (char *)StructLayout + 16;
          v67 = (char *)StructLayout + 16;
          v68 = *((_DWORD *)StructLayout + 3) & 0x7FFFFFFF;
          if ((_DWORD)v68)
          {
            v67 = (char *)StructLayout + 16;
            do
            {
              v69 = v68 >> 1;
              v70 = &v67[8 * (v68 >> 1)];
              v72 = *(_QWORD *)v70;
              v71 = v70 + 8;
              v68 += ~(v68 >> 1);
              if (v72 > (unint64_t)v65)
                v68 = v69;
              else
                v67 = v71;
            }
            while (v68);
          }
          v73 = **(_QWORD **)a5;
          v74 = ((unint64_t)(v67 - v66 - 8) >> 3);
          v75 = *(llvm::ConstantInt **)(v73 + 1960);
          v76 = *(_DWORD *)(v73 + 1968);
          LODWORD(v153) = v76 >> 8;
          if (v76 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v152, v74, 0);
          }
          else
          {
            if (v76 <= 0xFF)
              v77 = 0;
            else
              v77 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v76);
            v152 = (void *)(v77 & v74);
          }
          v78 = llvm::ConstantInt::get(v75, (llvm::LLVMContext *)&v152, v62);
          if (v153 >= 0x41 && v152)
            MEMORY[0x1CAA32F9C](v152, 0x1000C8000313F17);
          v79 = v160;
          if (v160 >= (unint64_t)HIDWORD(v160))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, (uint64_t)v161, v160 + 1, 8);
            v79 = v160;
          }
          *((_QWORD *)v159 + v79) = v78;
          LODWORD(v160) = v160 + 1;
          v39 = *(_QWORD *)(*(_QWORD *)(v39 + 16) + 8 * v74);
          v80 = llvm::ScalarEvolution::getConstant(*this, a5, (uint64_t)v65 - *(_QWORD *)&v66[8 * v74], 0);
          *(_QWORD *)v156 = v80;
          v38 = 1;
        }
        else
        {
LABEL_99:
          v39 = **(_QWORD **)(v39 + 16);
          v81 = llvm::Constant::getNullValue((llvm::Constant *)(**(_QWORD **)a5 + 1960), v36);
          v82 = v160;
          if (v160 >= (unint64_t)HIDWORD(v160))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v159, (uint64_t)v161, v160 + 1, 8);
            v82 = v160;
          }
          *((_QWORD *)v159 + v82) = v81;
          LODWORD(v160) = v160 + 1;
        }
        v54 = *(unsigned __int8 *)(v39 + 8);
        if (v39)
          v83 = v54 == 16;
        else
          v83 = 0;
        if (!v83)
          break;
      }
      while (*(_DWORD *)(v39 + 12) && (_DWORD)v157 != 0);
    }
    if (v54 == 17)
      v39 = *(_QWORD *)(v39 + 24);
    if (v162 != v164)
      free(v162);
  }
  while (v54 == 17);
  inserted = v149;
  if ((v38 & 1) != 0)
  {
    sub_1C5F6E01C((uint64_t)&v162, (llvm::IRBuilderBase *)(this + 56), (uint64_t)this);
    v86 = (uint64_t *)*((_QWORD *)*this + 5);
    v87 = *((_DWORD *)v86 + 4);
    if (v87)
    {
      while (1)
      {
        v88 = this[62];
        v89 = *v86;
        v90 = v87 - 1;
        v91 = ((v88 >> 4) ^ (v88 >> 9)) & (v87 - 1);
        v92 = *(llvm::DataLayout **)(v89 + 16 * v91);
        if (v88 != v92)
          break;
LABEL_138:
        v95 = v89 + 16 * v91;
        v96 = *(_QWORD *)(v95 + 8);
        if (!v96 || !llvm::Loop::isLoopInvariant(*(_QWORD *)(v95 + 8), (uint64_t)v149))
          goto LABEL_218;
        if ((_DWORD)v160)
        {
          v97 = (uint64_t *)v159;
          v98 = 8 * v160;
          while (llvm::Loop::isLoopInvariant(v96, *v97))
          {
            ++v97;
            v98 -= 8;
            if (!v98)
              goto LABEL_144;
          }
          goto LABEL_218;
        }
LABEL_144:
        LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v96);
        if (!LoopPredecessor)
          goto LABEL_218;
        v102 = *(_QWORD *)(LoopPredecessor + 40);
        result = LoopPredecessor + 40;
        v101 = v102;
        if (v102 == result)
          goto LABEL_218;
        if (v101)
          v103 = v101 - 24;
        else
          v103 = 0;
        if (*(_BYTE *)(v103 + 16) == 30)
        {
          if ((*(_DWORD *)(v103 + 20) & 0x7FFFFFF) == 3)
            goto LABEL_218;
        }
        else
        {
          switch(*(_BYTE *)(v103 + 16))
          {
            case 0x1E:
              goto LABEL_228;
            case 0x1F:
              v106 = (*(_DWORD *)(v103 + 20) >> 1) & 0x3FFFFFF;
              break;
            case 0x20:
              v106 = (*(_DWORD *)(v103 + 20) & 0x7FFFFFF) - 1;
              break;
            case 0x27:
              v106 = *(_DWORD *)(v103 + 80) + 1;
              break;
            default:
              goto LABEL_218;
          }
          if (v106 != 1)
            goto LABEL_218;
        }
        this[62] = *(llvm::DataLayout **)(v103 + 40);
        this[63] = (llvm::DataLayout *)(v103 + 24);
        v104 = *(void **)(v103 + 48);
        v152 = v104;
        if (v104)
        {
          llvm::MetadataTracking::track((uint64_t)&v152, (unsigned __int8 *)v104, 2);
          v105 = v152;
        }
        else
        {
          v105 = 0;
        }
        sub_1C4774EF4((uint64_t)(this + 56), 0, (uint64_t)v105);
        if (v152)
          llvm::MetadataTracking::untrack((uint64_t)&v152, (unsigned __int8 *)v152);
        v86 = (uint64_t *)*((_QWORD *)*this + 5);
        v87 = *((_DWORD *)v86 + 4);
        if (!v87)
          goto LABEL_218;
      }
      v93 = 1;
      while (v92 != (llvm::DataLayout *)-4096)
      {
        v94 = v91 + v93++;
        v91 = v94 & v90;
        v92 = *(llvm::DataLayout **)(v89 + 16 * v91);
        if (v88 == v92)
          goto LABEL_138;
      }
    }
LABEL_218:
    if (*(llvm::Type **)v149 != v148)
      inserted = (llvm::Value *)llvm::SCEVExpander::InsertNoopCastOfTo((llvm::SCEVExpander *)this, v149, v148);
    v140 = (llvm::GetElementPtrInst *)**((_QWORD **)v148 + 2);
    v152 = "scevgep";
    v155 = 259;
    v141 = (llvm::Value *)sub_1C509D7B0((uint64_t *)this + 56, v140, (uint64_t *)inserted, (llvm::Value *)v159, v160, (uint64_t)&v152);
    Unknown = llvm::ScalarEvolution::getUnknown(*this, v141);
    v143 = v157;
    if (v157 >= HIDWORD(v157))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, (uint64_t)v158, v157 + 1, 8);
      v143 = v157;
    }
    *((_QWORD *)v156 + v143) = Unknown;
    LODWORD(v157) = v157 + 1;
    sub_1C5F6E0A4((uint64_t *)&v162);
    v144 = (const llvm::SCEV *)llvm::ScalarEvolution::getAddExpr((uint64_t)*this, (uint64_t)&v156, 0, 0);
    ElementPtr = llvm::SCEVExpander::expand((llvm::SCEVExpander *)this, v144);
    goto LABEL_223;
  }
  if (*((_QWORD *)v148 + 3))
  {
    v107 = (llvm::Type *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)a5 + 1912), (llvm::Type *)(*((_DWORD *)v148 + 2) >> 8));
    inserted = (llvm::Value *)llvm::SCEVExpander::InsertNoopCastOfTo((llvm::SCEVExpander *)this, v149, v107);
  }
LABEL_166:
  v108 = (const llvm::SCEV *)llvm::ScalarEvolution::getAddExpr((uint64_t)*this, (uint64_t)&v156, 0, 0);
  v109 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)this, v108, a5, 0);
  v110 = (_QWORD *)v109;
  if (*((unsigned __int8 *)inserted + 16) > 0x14u
    || !inserted
    || (*(unsigned __int8 *)(v109 + 16) <= 0x14u ? (v111 = v109 == 0) : (v111 = 1), v111))
  {
    v112 = this[63];
    v113 = (llvm::DataLayout *)*((_QWORD *)this[62] + 6);
    if (v112 == v113)
    {
LABEL_189:
      sub_1C5F6E01C((uint64_t)&v162, (llvm::IRBuilderBase *)(this + 56), (uint64_t)this);
      v121 = (uint64_t *)*((_QWORD *)*this + 5);
      v122 = *((_DWORD *)v121 + 4);
      if (v122)
      {
        while (1)
        {
          v123 = this[62];
          v124 = *v121;
          v125 = v122 - 1;
          v126 = ((v123 >> 4) ^ (v123 >> 9)) & (v122 - 1);
          v127 = *(llvm::DataLayout **)(v124 + 16 * v126);
          if (v123 != v127)
            break;
LABEL_194:
          v130 = v124 + 16 * v126;
          v131 = *(_QWORD *)(v130 + 8);
          if (!v131)
            goto LABEL_217;
          if (!llvm::Loop::isLoopInvariant(*(_QWORD *)(v130 + 8), (uint64_t)inserted))
            goto LABEL_217;
          if (!llvm::Loop::isLoopInvariant(v131, (uint64_t)v110))
            goto LABEL_217;
          v132 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v131);
          if (!v132)
            goto LABEL_217;
          v134 = *(_QWORD *)(v132 + 40);
          result = v132 + 40;
          v133 = v134;
          if (v134 == result)
            goto LABEL_217;
          if (v133)
            v135 = v133 - 24;
          else
            v135 = 0;
          if (*(_BYTE *)(v135 + 16) != 30)
          {
            switch(*(_BYTE *)(v135 + 16))
            {
              case 0x1E:
LABEL_228:
                __break(1u);
                return result;
              case 0x1F:
                v138 = (*(_DWORD *)(v135 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_212;
              case 0x20:
                v138 = (*(_DWORD *)(v135 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_212;
              case 0x27:
                v138 = *(_DWORD *)(v135 + 80) + 1;
LABEL_212:
                if (v138 != 1)
                  goto LABEL_217;
                goto LABEL_204;
              default:
                goto LABEL_217;
            }
          }
          if ((*(_DWORD *)(v135 + 20) & 0x7FFFFFF) == 3)
            goto LABEL_217;
LABEL_204:
          this[62] = *(llvm::DataLayout **)(v135 + 40);
          this[63] = (llvm::DataLayout *)(v135 + 24);
          v136 = *(void **)(v135 + 48);
          v152 = v136;
          if (v136)
          {
            llvm::MetadataTracking::track((uint64_t)&v152, (unsigned __int8 *)v136, 2);
            v137 = v152;
          }
          else
          {
            v137 = 0;
          }
          sub_1C4774EF4((uint64_t)(this + 56), 0, (uint64_t)v137);
          if (v152)
            llvm::MetadataTracking::untrack((uint64_t)&v152, (unsigned __int8 *)v152);
          v121 = (uint64_t *)*((_QWORD *)*this + 5);
          v122 = *((_DWORD *)v121 + 4);
          if (!v122)
            goto LABEL_217;
        }
        v128 = 1;
        while (v127 != (llvm::DataLayout *)-4096)
        {
          v129 = v126 + v128++;
          v126 = v129 & v125;
          v127 = *(llvm::DataLayout **)(v124 + 16 * v126);
          if (v123 == v127)
            goto LABEL_194;
        }
      }
LABEL_217:
      v139 = (llvm::GetElementPtrInst *)(*(_QWORD *)this[64] + 1912);
      v152 = "uglygep";
      v155 = 259;
      ElementPtr = (uint64_t)sub_1C4867B70((uint64_t *)this + 56, v139, (uint64_t *)inserted, (uint64_t)v110, (uint64_t)&v152);
      sub_1C5F6E0A4((uint64_t *)&v162);
    }
    else
    {
      v114 = 6;
      while (1)
      {
        v112 = *(llvm::DataLayout **)v112;
        ElementPtr = (uint64_t)v112 - 24;
        v115 = v112 ? (uint64_t)v112 - 24 : 0;
        v116 = sub_1C4D99D08(v115);
        if (*(_BYTE *)(v115 + 16) == 62)
        {
          v117 = *(_DWORD *)(v115 + 20);
          v118 = (v117 & 0x40000000) != 0 ? *(_QWORD *)(v115 - 8) : v115 - 32 * (v117 & 0x7FFFFFF);
          if (*(llvm::Value **)v118 == inserted && *(_QWORD **)(v118 + 32) == v110)
          {
            v119 = v115 + 64;
            if (!v112)
              v119 = 24;
            if (*(_QWORD *)v119 == **(_QWORD **)a5 + 1912)
              break;
          }
        }
        if (v112 != v113)
        {
          v120 = v114 + v116;
          v114 = v114 + v116 - 1;
          if (v120 != 1)
            continue;
        }
        goto LABEL_189;
      }
    }
  }
  else
  {
    v145 = (llvm::GetElementPtrInst *)(**(_QWORD **)a5 + 1912);
    v162 = v110;
    ElementPtr = llvm::ConstantExpr::getGetElementPtr(v145, (uint64_t *)inserted, (llvm::Value *)&v162, 1, 0, 0, 0);
  }
LABEL_223:
  if (v156 != v158)
    free(v156);
  if (v159 != v161)
    free(v159);
  return ElementPtr;
}

uint64_t sub_1C5F62878(llvm::SCEV **a1, uint64_t *a2, uint64_t a3, llvm::ScalarEvolution *a4)
{
  llvm::SCEV *v9;
  llvm::ConstantInt *v10;
  const llvm::APInt *v11;
  llvm::ValueHandleBase *v12;
  llvm::APInt *v13;
  unsigned int v14;
  uint64_t v15;
  const llvm::APInt *v16;
  unint64_t Constant;
  uint64_t AddExpr;
  llvm::SCEV *v19;
  uint64_t v20;
  int v22;
  llvm::SCEV *v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  void *v27;
  int v29;
  int64_t v30;
  unint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  const void *v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  const llvm::APInt *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  unsigned int v45;
  llvm::SCEV *v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  _QWORD v50[5];

  v50[4] = *MEMORY[0x1E0C80C00];
  if (llvm::SCEV::isOne((llvm::SCEV *)a3))
    return 1;
  v9 = *a1;
  if (*a1 == (llvm::SCEV *)a3)
    __asm { BR              X10 }
  if (v9 && !*((_WORD *)v9 + 12))
  {
    if (llvm::SCEV::isZero(*a1))
      return 1;
    if (a3 && !*(_WORD *)(a3 + 24))
    {
      v10 = ***(llvm::ConstantInt ****)a4;
      llvm::APInt::sdiv((llvm::APInt *)(*((_QWORD *)v9 + 4) + 24), (const void **)(*(_QWORD *)(a3 + 32) + 24), (llvm::APInt *)&v48);
      v12 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v48, v11);
      if (v49 >= 0x41 && v48)
        MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
      v13 = (llvm::ValueHandleBase *)((char *)v12 + 24);
      v14 = *((_DWORD *)v12 + 8);
      if (v14 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v13) != v14)
          goto LABEL_14;
      }
      else if (*(_QWORD *)v13)
      {
LABEL_14:
        *a1 = (llvm::SCEV *)llvm::ScalarEvolution::getConstant(a4, v12);
        v15 = *a2;
        llvm::APInt::srem((llvm::APInt *)(*((_QWORD *)v9 + 4) + 24), (const void **)(*(_QWORD *)(a3 + 32) + 24), (llvm::APInt *)&v46);
        Constant = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)a4, (const llvm::APInt *)&v46, v16);
        v48 = v50;
        v50[0] = v15;
        v50[1] = Constant;
        v49 = 0x200000002;
        AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)a4, (uint64_t)&v48, 0, 0);
        if (v48 != v50)
          free(v48);
        *a2 = AddExpr;
        if (v47 >= 0x41 && v46)
          MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
        return 1;
      }
    }
  }
  v19 = *a1;
  if (*a1 && *((_WORD *)v19 + 12) == 5 && a3 && !*(_WORD *)(a3 + 24))
  {
    v20 = **((_QWORD **)v19 + 4);
    if (v20 && *(_WORD *)(v20 + 24) == 0)
    {
      llvm::APInt::srem((llvm::APInt *)(*(_QWORD *)(v20 + 32) + 24), (const void **)(*(_QWORD *)(a3 + 32) + 24), (llvm::APInt *)&v48);
      v22 = v49;
      if (v49 > 0x40)
      {
        v29 = 0;
        v30 = ((unint64_t)v49 + 63) >> 6;
        do
        {
          if (v30-- < 1)
            break;
          v32 = *((_QWORD *)v48 + v30);
          v29 += __clz(v32);
        }
        while (!v32);
        v33 = v49 | 0xFFFFFFC0;
        if ((v49 & 0x3F) == 0)
          v33 = 0;
        v34 = v29 + v33;
        if (v48)
          MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
        if (v34 != v22)
          goto LABEL_32;
      }
      else if (v48)
      {
        goto LABEL_32;
      }
      v36 = (const void *)*((_QWORD *)v19 + 4);
      v35 = *((_QWORD *)v19 + 5);
      v48 = v50;
      v49 = 0x400000000;
      if (v35 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, (uint64_t)v50, v35, 8);
        v37 = v49;
        v38 = v48;
      }
      else
      {
        if (!v35)
        {
          v39 = 0;
LABEL_57:
          LODWORD(v49) = v39 + v35;
          llvm::APInt::sdiv((llvm::APInt *)(*(_QWORD *)(v20 + 32) + 24), (const void **)(*(_QWORD *)(a3 + 32) + 24), (llvm::APInt *)&v46);
          v41 = llvm::ScalarEvolution::getConstant((llvm::ConstantInt ****)a4, (const llvm::APInt *)&v46, v40);
          *(_QWORD *)v48 = v41;
          if (v47 >= 0x41 && v46)
            MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
          *a1 = (llvm::SCEV *)llvm::ScalarEvolution::getMulExpr((uint64_t)a4, (uint64_t)&v48, 0, 0);
          if (v48 != v50)
            free(v48);
          return 1;
        }
        v37 = 0;
        v38 = v50;
      }
      memcpy(&v38[v37], v36, 8 * v35);
      v39 = v49;
      goto LABEL_57;
    }
  }
LABEL_32:
  v23 = *a1;
  if (*a1)
    v24 = *((unsigned __int16 *)*a1 + 12) == 7;
  else
    v24 = 0;
  v25 = v24;
  if (v24)
  {
    v26 = *((_QWORD *)v23 + 5);
    if (v26 == 2)
    {
      v27 = *(void **)(*((_QWORD *)v23 + 4) + 8);
    }
    else
    {
      v42 = *((_QWORD *)v23 + 4);
      v48 = v50;
      v49 = 0x300000000;
      v43 = v26;
      v44 = 8 * v26 - 8;
      if (v44 >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v48, (uint64_t)v50, (uint64_t)v44 >> 3, 8);
        v45 = v49;
      }
      else
      {
        v45 = 0;
      }
      if (v43 != 1)
      {
        memcpy((char *)v48 + 8 * v45, (const void *)(v42 + 8), v44);
        v45 = v49;
      }
      LODWORD(v49) = v45 + (v44 >> 3);
      v27 = (void *)sub_1C618AB20((uint64_t *)a4, (uint64_t)&v48, *((uint64_t ***)v23 + 6));
      if (v48 != v50)
        free(v48);
    }
    v48 = v27;
    __asm { BR              X10 }
  }
  return v25 & 1;
}

void sub_1C5F62E40(unsigned int *a1, llvm::Type *a2, llvm::ScalarEvolution *a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t AddExpr;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  _BYTE v21[64];
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x1E0C80C00];
  v6 = a1[2];
  v7 = *(_BYTE **)a1;
  if ((_DWORD)v6)
  {
    v8 = 0;
    v9 = (uint64_t)&v7[8 * v6 - 8];
    while (*(_WORD *)(*(_QWORD *)v9 + 24) == 7)
    {
      ++v8;
      v9 -= 8;
      if (v6 == v8)
      {
        LODWORD(v8) = a1[2];
        break;
      }
    }
  }
  else
  {
    v6 = 0;
    LODWORD(v8) = 0;
  }
  v22 = v24;
  v23 = 0x800000000;
  sub_1C4FA6FB8((unsigned int *)&v22, v7, &v7[8 * v6 + -8 * v8]);
  v10 = (_BYTE *)(*(_QWORD *)a1 + 8 * a1[2]);
  v19 = v21;
  v20 = 0x800000000;
  sub_1C4FA6FB8((unsigned int *)&v19, &v10[-8 * v8], v10);
  if ((_DWORD)v23)
    AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)a3, (uint64_t)&v22, 0, 0);
  else
    AddExpr = llvm::ScalarEvolution::getConstant(a3, a2, 0, 0);
  v12 = AddExpr;
  a1[2] = 0;
  if (AddExpr && *(_WORD *)(AddExpr + 24) == 4)
  {
    v14 = *(const void **)(AddExpr + 32);
    v13 = *(_QWORD *)(AddExpr + 40);
    if (v13 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v13, 8);
      v15 = a1[2];
    }
    else
    {
      if (!v13)
      {
        v18 = 0;
        goto LABEL_21;
      }
      v15 = 0;
    }
    memcpy((void *)(*(_QWORD *)a1 + 8 * v15), v14, 8 * v13);
    v18 = a1[2];
LABEL_21:
    v17 = v18 + v13;
    goto LABEL_22;
  }
  if (llvm::SCEV::isZero((llvm::SCEV *)AddExpr))
    goto LABEL_23;
  if (a1[3])
  {
    v16 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), 1uLL, 8);
    v16 = a1[2];
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = v12;
  v17 = a1[2] + 1;
LABEL_22:
  a1[2] = v17;
LABEL_23:
  sub_1C4FA6FB8(a1, v19, (_BYTE *)v19 + 8 * v20);
  if (v19 != v21)
    free(v19);
  if (v22 != v24)
    free(v22);
}

unsigned __int8 *llvm::SCEVExpander::expandCodeForImpl(llvm::SCEVExpander *this, llvm::Instruction **a2, llvm::Type *a3)
{
  llvm::Instruction *v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  llvm::ValueHandleBase *v14;
  llvm::PointerType *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  uint64_t v24[4];
  __int16 v25;

  v6 = llvm::SCEVExpander::expand(this, a2);
  v7 = (unsigned __int8 *)v6;
  if (*((_BYTE *)this + 24))
  {
    if (*((unsigned __int8 *)v6 + 16) >= 0x1Cu && v6 != 0)
    {
      v16 = *(llvm::PointerType **)v6;
      if (*(_BYTE *)(*(_QWORD *)v7 + 8) == 13)
      {
        v17 = llvm::PointerType::get(v16, 0);
        v24[0] = (uint64_t)"tmp.lcssa.user";
        v25 = 259;
        v18 = (uint64_t *)((char *)this + 448);
        v19 = 48;
      }
      else
      {
        v17 = **(_QWORD **)v16 + 1960;
        v24[0] = (uint64_t)"tmp.lcssa.user";
        v25 = 259;
        v18 = (uint64_t *)((char *)this + 448);
        v19 = 47;
      }
      v20 = sub_1C4773E38(v18, v19, v7, v17, (uint64_t)v24);
      v7 = (unsigned __int8 *)llvm::SCEVExpander::fixupLCSSAFormFor(this, (llvm::Instruction *)v20, 0);
      v23 = v20;
      v24[0] = 0;
      if (sub_1C5BA21D8((uint64_t *)this + 7, &v23, v24))
      {
        *(_QWORD *)v24[0] = -8192;
        *((int32x2_t *)this + 8) = vadd_s32(*(int32x2_t *)((char *)this + 64), (int32x2_t)0x1FFFFFFFFLL);
      }
      v23 = v20;
      v24[0] = 0;
      if (sub_1C5BA21D8((uint64_t *)this + 10, &v23, v24))
      {
        *(_QWORD *)v24[0] = -8192;
        *((int32x2_t *)this + 11) = vadd_s32(*(int32x2_t *)((char *)this + 88), (int32x2_t)0x1FFFFFFFFLL);
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v20 + 5) + 40, (uint64_t ***)v20);
      v21 = *((_QWORD *)v20 + 3);
      v22 = (_QWORD *)*((_QWORD *)v20 + 4);
      *v22 = v21;
      *(_QWORD *)(v21 + 8) = v22;
      *((_QWORD *)v20 + 3) = 0;
      *((_QWORD *)v20 + 4) = 0;
      llvm::Value::deleteValue((llvm::Value *)v20);
    }
  }
  v9 = *((_QWORD *)this + 63);
  if (v9)
    v10 = v9 - 24;
  else
    v10 = 0;
  v24[0] = (uint64_t)a2;
  v24[1] = v10;
  v11 = sub_1C5F6F058((uint64_t)this + 32, v24);
  v12 = (unsigned __int8 *)v11[4];
  if (v12 != v7)
  {
    v13 = v11;
    v14 = (llvm::ValueHandleBase *)(v11 + 2);
    if (v12 && v12 != (unsigned __int8 *)-8192 && v12 != (unsigned __int8 *)-4096)
      llvm::ValueHandleBase::RemoveFromUseList(v11 + 2);
    v13[4] = (uint64_t)v7;
    if (v7 != (unsigned __int8 *)-8192 && v7 != (unsigned __int8 *)-4096 && v7)
      llvm::ValueHandleBase::AddToUseList(v14);
  }
  if (a3)
    return llvm::SCEVExpander::InsertNoopCastOfTo(this, (llvm::Value *)v7, a3);
  return v7;
}

llvm::Instruction *llvm::SCEVExpander::expand(llvm::SCEVExpander *this, llvm::Instruction **a2)
{
  uint64_t v4;
  const llvm::Instruction *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  const llvm::Loop *v16;
  uint64_t LoopPredecessor;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t j;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v39;
  BOOL v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *ValueInExprValueMap;
  llvm::Instruction *v44;
  uint64_t *v45;
  llvm::Instruction *v46;
  unint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  int32x2_t *v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned __int8 *v60[2];
  unsigned __int8 **v61;
  void *v62;
  uint64_t v63;
  _BYTE v64[64];
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  int v68;
  _QWORD v69[9];

  v69[8] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 63);
  if (v4)
    v5 = (const llvm::Instruction *)(v4 - 24);
  else
    v5 = 0;
  LOBYTE(v60[0]) = 0;
  v61 = v60;
  v62 = v64;
  v63 = 0x800000000;
  v65 = v69;
  v66 = v69;
  v67 = 8;
  v68 = 0;
  sub_1C5F6E160((uint64_t)&v61, (uint64_t)a2);
  if ((_DWORD)v63 && !*(_BYTE *)v61)
  {
    v6 = *((_QWORD *)v62 + v63 - 1);
    LODWORD(v63) = v63 - 1;
    __asm { BR              X10 }
  }
  if (v66 != v65)
    free(v66);
  if (v62 != v64)
    free(v62);
  if (LOBYTE(v60[0]))
    goto LABEL_70;
  v7 = *(uint64_t **)(*(_QWORD *)this + 40);
  v8 = *((_DWORD *)v7 + 4);
  if (!v8)
    goto LABEL_18;
  v9 = *((_QWORD *)this + 62);
  v10 = *v7;
  v11 = v8 - 1;
  v12 = ((v9 >> 4) ^ (v9 >> 9)) & (v8 - 1);
  v13 = *(_QWORD *)(v10 + 16 * v12);
  if (v9 != v13)
  {
    v14 = 1;
    while (v13 != -4096)
    {
      v15 = v12 + v14++;
      v12 = v15 & v11;
      v13 = *(_QWORD *)(v10 + 16 * v12);
      if (v9 == v13)
        goto LABEL_17;
    }
LABEL_18:
    v16 = 0;
    goto LABEL_19;
  }
LABEL_17:
  v16 = *(const llvm::Loop **)(v10 + 16 * v12 + 8);
LABEL_19:
  if (llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)this, (const llvm::SCEV *)a2, v16) == 1)
  {
    if (!v16)
      goto LABEL_70;
    while (1)
    {
      LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v16);
      if (!LoopPredecessor)
        goto LABEL_28;
      v18 = *(_QWORD *)(LoopPredecessor + 40);
      if (v18 == LoopPredecessor + 40)
        goto LABEL_28;
      v5 = (const llvm::Instruction *)(v18 - 24);
      if (v18)
        v19 = v18 - 24;
      else
        v19 = 0;
      if (*(_BYTE *)(v19 + 16) != 30)
      {
        switch(*(_BYTE *)(v19 + 16))
        {
          case 0x1E:
            __break(1u);
            goto LABEL_70;
          case 0x1F:
            v28 = (*(_DWORD *)(v19 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_47;
          case 0x20:
            v28 = (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_47;
          case 0x27:
            v28 = *(_DWORD *)(v19 + 80) + 1;
LABEL_47:
            if (v28 == 1)
              goto LABEL_42;
            goto LABEL_28;
          default:
            goto LABEL_28;
        }
      }
      if ((*(_DWORD *)(v19 + 20) & 0x7FFFFFF) == 3)
      {
LABEL_28:
        v20 = **((_QWORD **)v16 + 4);
        v21 = v20 + 40;
        for (i = *(_QWORD *)(v20 + 48); i != v21; i = *(_QWORD *)(i + 8))
        {
          v23 = i - 24;
          if (!i)
            v23 = 0;
          if (*(_BYTE *)(v23 + 16) != 83)
          {
            v24 = *(unsigned __int8 *)(i - 8) - 38;
            v25 = v24 > 0x38;
            v26 = (1 << v24) & 0x100060000000001;
            if (v25 || v26 == 0)
              v21 = i;
            else
              v21 = *(_QWORD *)(i + 8);
            break;
          }
        }
        if (v21)
          v5 = (const llvm::Instruction *)(v21 - 24);
        else
          v5 = 0;
      }
LABEL_42:
      v16 = *(const llvm::Loop **)v16;
      if (llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)this, (const llvm::SCEV *)a2, v16) != 1)break;
      if (!v16)
        goto LABEL_70;
    }
  }
  if (!v16
    || llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)this, (const llvm::SCEV *)a2, v16) != 2)
  {
    goto LABEL_112;
  }
  v29 = sub_1C477672C((uint64_t)this + 352, (uint64_t)v16);
  v30 = *((_QWORD *)this + 45);
  v31 = 368;
  if (v30 == *((_QWORD *)this + 44))
    v31 = 372;
  if (v29 != (_QWORD *)(v30 + 8 * *(unsigned int *)((char *)this + v31)))
    goto LABEL_112;
  v32 = **((_QWORD **)v16 + 4);
  v33 = v32 + 40;
  for (j = *(_QWORD *)(v32 + 48); j != v33; j = *(_QWORD *)(j + 8))
  {
    v35 = j - 24;
    if (!j)
      v35 = 0;
    if (*(_BYTE *)(v35 + 16) != 83)
    {
      v36 = *(unsigned __int8 *)(j - 8) - 38;
      v25 = v36 > 0x38;
      v37 = (1 << v36) & 0x100060000000001;
      if (v25 || v37 == 0)
        v33 = j;
      else
        v33 = *(_QWORD *)(j + 8);
      break;
    }
  }
  while (1)
  {
    v5 = v33 ? (const llvm::Instruction *)(v33 - 24) : 0;
LABEL_112:
    if ((const llvm::Instruction *)((char *)v5 + 24) == *((const llvm::Instruction **)this + 63)
      || (sub_1C5BA2178((uint64_t)this, (uint64_t)v5) & 1) == 0 && !sub_1C4D99D08((uint64_t)v5))
    {
      break;
    }
    v33 = *((_QWORD *)v5 + 4);
  }
LABEL_70:
  v39 = *((_QWORD *)this + 4);
  v61 = 0;
  if (sub_1C5F6F150(v39, *((_DWORD *)this + 12), (uint64_t)a2, (uint64_t)v5, &v61))
    v40 = v61 == (unsigned __int8 **)(*((_QWORD *)this + 4) + 40 * *((unsigned int *)this + 12));
  else
    v40 = 1;
  if (!v40)
    return (llvm::Instruction *)v61[4];
  sub_1C5F6E01C((uint64_t)&v61, (llvm::SCEVExpander *)((char *)this + 448), (uint64_t)this);
  *((_QWORD *)this + 62) = *((_QWORD *)v5 + 5);
  *((_QWORD *)this + 63) = (char *)v5 + 24;
  v41 = (unsigned __int8 *)*((_QWORD *)v5 + 6);
  v60[0] = v41;
  if (v41)
  {
    llvm::MetadataTracking::track((uint64_t)v60, v41, 2);
    v42 = v60[0];
  }
  else
  {
    v42 = 0;
  }
  sub_1C4774EF4((uint64_t)this + 448, 0, (uint64_t)v42);
  if (v60[0])
    llvm::MetadataTracking::untrack((uint64_t)v60, v60[0]);
  ValueInExprValueMap = (unsigned __int8 *)llvm::SCEVExpander::FindValueInExprValueMap((llvm::ScalarEvolution **)this, (const llvm::SCEV *)a2, v5);
  if (ValueInExprValueMap)
  {
    v44 = (llvm::Instruction *)ValueInExprValueMap;
    if (ValueInExprValueMap[16] >= 0x1Cu
      && llvm::Operator::hasPoisonGeneratingFlags((llvm::Operator *)ValueInExprValueMap)
      && (sub_1C4F8CF08((uint64_t)v44, 1, 0) & 1) == 0)
    {
      llvm::Instruction::dropPoisonGeneratingFlags(v44);
    }
  }
  else
  {
    if (*((_WORD *)a2 + 12))
      __asm { BR              X10 }
    v44 = a2[4];
  }
  v60[0] = (unsigned __int8 *)a2;
  v60[1] = (unsigned __int8 *)v5;
  v45 = sub_1C5F6F058((uint64_t)this + 32, (uint64_t *)v60);
  v46 = (llvm::Instruction *)v45[4];
  if (v46 != v44)
  {
    if (v46 && v46 != (llvm::Instruction *)-8192 && v46 != (llvm::Instruction *)-4096)
    {
      v48 = v45[2] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v48 = v45[3];
      v49 = (unint64_t *)v45[3];
      if (v49)
      {
        *v49 = *v49 & 7 | v48;
      }
      else
      {
        v50 = v45[4];
        v51 = ***(int32x2_t ****)v50;
        v52 = (unint64_t)v51[303];
        if (v52 <= v48)
        {
          v53 = v51[305].u32[0];
          if (v52 + 16 * v53 > v48)
          {
            v54 = v53 - 1;
            LODWORD(v55) = v54 & ((v50 >> 4) ^ (v50 >> 9));
            v56 = (uint64_t *)(v52 + 16 * v55);
            v57 = *v56;
            if (v50 == *v56)
            {
LABEL_106:
              *v56 = -8192;
              v51[304] = vadd_s32(v51[304], (int32x2_t)0x1FFFFFFFFLL);
              v50 = v45[4];
            }
            else
            {
              v58 = 1;
              while (v57 != -4096)
              {
                v59 = v55 + v58++;
                v55 = v59 & v54;
                v57 = *(_QWORD *)(v52 + 16 * v55);
                if (v50 == v57)
                {
                  v56 = (uint64_t *)(v52 + 16 * v55);
                  goto LABEL_106;
                }
              }
            }
            *(_BYTE *)(v50 + 17) &= ~1u;
          }
        }
      }
    }
    v45[4] = (uint64_t)v44;
    if (v44 != (llvm::Instruction *)-8192 && v44 != (llvm::Instruction *)-4096 && v44)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v45 + 2));
  }
  sub_1C5F6E0A4((uint64_t *)&v61);
  return v44;
}

uint64_t llvm::SCEVExpander::expandAddToGEP(llvm::DataLayout **this, const llvm::SCEV *a2, uint64_t **a3, llvm::Type *a4, llvm::Value *a5)
{
  const llvm::SCEV *v6;
  const llvm::SCEV *v7;

  v7 = (const llvm::SCEV *)*MEMORY[0x1E0C80C00];
  v6 = a2;
  return llvm::SCEVExpander::expandAddToGEP(this, &v6, &v7, a3, a4, a5);
}

uint64_t llvm::SCEVExpander::getRelevantLoop(llvm::SCEVExpander *this, const llvm::SCEV **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t RelevantLoop;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  const llvm::SCEV **v17;
  uint64_t v18;
  uint64_t v19;
  const llvm::SCEV *v20;
  const llvm::SCEV **v21;
  uint64_t v22;
  const llvm::SCEV *v23;
  uint64_t v24;
  const llvm::SCEV **v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v4 = (char *)this + 328;
  v26 = a2;
  v27 = 0;
  sub_1C63B5580((uint64_t)&v28, (uint64_t)this + 328, (uint64_t *)&v26, &v27);
  if (!v29)
    return *(_QWORD *)(v28 + 8);
  v5 = 0;
  RelevantLoop = 0;
  switch(*((_WORD *)a2 + 12))
  {
    case 0:
      return RelevantLoop;
    case 1:
    case 2:
    case 3:
    case 0xD:
      RelevantLoop = llvm::SCEVExpander::getRelevantLoop(this, a2[4]);
      v26 = a2;
      goto LABEL_20;
    case 4:
    case 5:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
      goto LABEL_22;
    case 7:
      v5 = (uint64_t)a2[6];
LABEL_22:
      v20 = a2[5];
      if (v20)
      {
        v21 = (const llvm::SCEV **)a2[4];
        v22 = 8 * (_QWORD)v20;
        do
        {
          v23 = *v21++;
          v24 = llvm::SCEVExpander::getRelevantLoop(this, v23);
          v5 = sub_1C5F63C6C(v5, v24, *(_QWORD *)(*(_QWORD *)this + 32));
          v22 -= 8;
        }
        while (v22);
      }
      v26 = a2;
      sub_1C63B5780((uint64_t)v4, (uint64_t *)&v26)[1] = v5;
      return v5;
    case 0xE:
      RelevantLoop = 0;
      v7 = (uint64_t)*(a2 - 1);
      if (!v7 || *(unsigned __int8 *)(v7 + 16) < 0x1Cu)
        return RelevantLoop;
      v8 = *(uint64_t **)(*(_QWORD *)this + 40);
      v9 = *((_DWORD *)v8 + 4);
      if (v9)
      {
        v10 = *(_QWORD *)(v7 + 40);
        v11 = *v8;
        v12 = v9 - 1;
        v13 = ((v10 >> 4) ^ (v10 >> 9)) & (v9 - 1);
        v14 = *(_QWORD *)(v11 + 16 * v13);
        if (v10 == v14)
        {
LABEL_10:
          RelevantLoop = *(_QWORD *)(v11 + 16 * v13 + 8);
        }
        else
        {
          v15 = 1;
          while (v14 != -4096)
          {
            v16 = v13 + v15++;
            v13 = v16 & v12;
            v14 = *(_QWORD *)(v11 + 16 * v13);
            if (v10 == v14)
              goto LABEL_10;
          }
          RelevantLoop = 0;
        }
        *(_QWORD *)(v28 + 8) = RelevantLoop;
        return RelevantLoop;
      }
      RelevantLoop = 0;
      *(_QWORD *)(v28 + 8) = 0;
      break;
    default:
      if (*((_WORD *)a2 + 12) == 6)
        v17 = a2;
      else
        v17 = 0;
      if (v17)
      {
        v18 = llvm::SCEVExpander::getRelevantLoop(this, v17[4]);
        v19 = llvm::SCEVExpander::getRelevantLoop(this, v17[5]);
        RelevantLoop = sub_1C5F63C6C(v18, v19, *(_QWORD *)(*(_QWORD *)this + 32));
        v26 = v17;
LABEL_20:
        sub_1C63B5780((uint64_t)v4, (uint64_t *)&v26)[1] = RelevantLoop;
      }
      return RelevantLoop;
  }
  return RelevantLoop;
}

uint64_t sub_1C5F63C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v8;

  if (!a1)
    return a2;
  v4 = a1;
  if (a2 && a2 != a1)
  {
    v6 = (_QWORD *)a2;
    while (v6)
    {
      v6 = (_QWORD *)*v6;
      if (v6 == (_QWORD *)a1)
        return a2;
    }
    v8 = (_QWORD *)a1;
    while (v8)
    {
      v8 = (_QWORD *)*v8;
      if (v8 == (_QWORD *)a2)
        return v4;
    }
    if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a3, **(_QWORD **)(a1 + 32), **(_QWORD **)(a2 + 32)))
    {
      llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a3, **(_QWORD **)(a2 + 32), **(_QWORD **)(v4 + 32));
      return v4;
    }
    return a2;
  }
  return v4;
}

llvm::Value *llvm::SCEVExpander::visitAddExpr(llvm::SCEVExpander *this, uint64_t a2, __n128 a3)
{
  llvm::Type *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const llvm::SCEV **v9;
  uint64_t RelevantLoop;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  __n128 *v14;
  char *v15;
  llvm::Value *v16;
  char *v17;
  const llvm::SCEV *v18;
  uint64_t **v19;
  BOOL v20;
  const llvm::SCEV *NegativeSCEV;
  uint64_t v22;
  unsigned __int8 *inserted;
  llvm::SCEVExpander *v24;
  uint64_t v25;
  llvm::Constant *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned __int16 *SCEVIter;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  llvm::SCEV **v44;
  llvm::Type *v46;
  uint64_t v47;
  llvm::SCEV **__src;
  uint64_t v49;
  _BYTE v50[32];
  void *v51;
  uint64_t v52;
  _QWORD v53[18];

  v53[16] = *MEMORY[0x1E0C80C00];
  v5 = *(llvm::Type **)(a2 + 48);
  if (*((_BYTE *)v5 + 8) != 13)
  {
    llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(**(_QWORD **)this + 40) + 272), *(llvm::Type **)(a2 + 48));
    v5 = v46;
  }
  v51 = v53;
  a3.n128_u64[0] = 0x800000000;
  v52 = 0x800000000;
  v6 = *(_QWORD *)(a2 + 40);
  if (v6)
  {
    v7 = 8 * v6;
    v8 = *(_QWORD *)(a2 + 32) - 8;
    do
    {
      v9 = *(const llvm::SCEV ***)(v8 + v7);
      RelevantLoop = llvm::SCEVExpander::getRelevantLoop(this, v9);
      v11 = v52;
      if (v52 >= (unint64_t)HIDWORD(v52))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, (uint64_t)v53, v52 + 1, 16);
        v11 = v52;
      }
      v12 = (uint64_t *)((char *)v51 + 16 * v11);
      *v12 = RelevantLoop;
      v12[1] = (uint64_t)v9;
      v13 = v52 + 1;
      LODWORD(v52) = v52 + 1;
      v7 -= 8;
    }
    while (v7);
    v14 = (__n128 *)v51;
  }
  else
  {
    v13 = 0;
    v14 = (__n128 *)v53;
  }
  sub_1C5F64104(v14, v13, *(_QWORD *)(*(_QWORD *)this + 32), a3);
  v15 = (char *)v51;
  if ((_DWORD)v52)
  {
    v47 = a2;
    v16 = 0;
    v17 = (char *)v51 + 16 * v52;
    while (1)
    {
      v18 = (const llvm::SCEV *)*((_QWORD *)v15 + 1);
      if (v16)
      {
        v19 = *(uint64_t ***)v16;
        if (*(_QWORD *)v16)
          v20 = *(_BYTE *)(*(_QWORD *)v16 + 8) == 15;
        else
          v20 = 0;
        if (v20)
        {
          v29 = *(_QWORD *)v15;
          __src = (llvm::SCEV **)v50;
          v49 = 0x400000000;
          if (v15 == v17)
          {
            v30 = 0;
            v44 = (llvm::SCEV **)v50;
            v15 = v17;
LABEL_54:
            v16 = (llvm::Value *)llvm::SCEVExpander::expandAddToGEP((llvm::DataLayout **)this, v44, &v44[v30], v19, v5, v16);
            if (__src != (llvm::SCEV **)v50)
              free(__src);
            goto LABEL_56;
          }
          v30 = 0;
          while (2)
          {
            if (*(_QWORD *)v15 != v29)
            {
LABEL_53:
              v44 = __src;
              goto LABEL_54;
            }
            SCEVIter = (unsigned __int16 *)*((_QWORD *)v15 + 1);
            if (SCEVIter)
              v32 = SCEVIter[12] == 14;
            else
              v32 = 0;
            if (v32)
            {
              v33 = *((_QWORD *)SCEVIter - 1);
              if (*(unsigned __int8 *)(v33 + 16) <= 0x1Bu)
              {
                v34 = *(_QWORD *)(*(_QWORD *)this + 104);
                v35 = *(_DWORD *)(*(_QWORD *)this + 120);
                if (!v35)
                  goto LABEL_35;
                v36 = (v35 - 1) & ((v33 >> 4) ^ (v33 >> 9));
                v37 = v34 + 48 * v36;
                v38 = *(_QWORD *)(v37 + 24);
                if (v38 != v33)
                {
                  v39 = 1;
                  while (v38 != -4096)
                  {
                    v40 = v36 + v39++;
                    v36 = v40 & (v35 - 1);
                    v37 = v34 + 48 * v36;
                    v38 = *(_QWORD *)(v37 + 24);
                    if (v38 == v33)
                      goto LABEL_36;
                  }
LABEL_35:
                  v37 = v34 + 48 * v35;
                }
LABEL_36:
                if (v37 == v34 + 48 * v35 || (SCEVIter = *(unsigned __int16 **)(v37 + 40)) == 0)
                {
                  SCEVIter = (unsigned __int16 *)llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)this, v33);
                  v30 = v49;
                }
              }
            }
            if (v30 >= HIDWORD(v49))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v50, v30 + 1, 8);
              v30 = v49;
            }
            __src[v30] = (llvm::SCEV *)SCEVIter;
            v30 = v49 + 1;
            LODWORD(v49) = v49 + 1;
            v15 += 16;
            if (v15 == v17)
            {
              v15 = v17;
              goto LABEL_53;
            }
            continue;
          }
        }
        if (llvm::SCEV::isNonConstantNegative(*((llvm::SCEV **)v15 + 1)))
        {
          NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(*(_QWORD *)this, (uint64_t)v18);
          v22 = llvm::SCEVExpander::expandCodeForImpl(this, NegativeSCEV, v5, 0);
          inserted = llvm::SCEVExpander::InsertNoopCastOfTo(this, v16, v5);
          v24 = this;
          v25 = 15;
          v26 = (llvm::Constant *)v22;
          LOBYTE(v27) = 0;
        }
        else
        {
          v41 = llvm::SCEVExpander::expandCodeForImpl(this, v18, v5, 0);
          v42 = llvm::SCEVExpander::InsertNoopCastOfTo(this, v16, v5);
          v43 = v42[16];
          if (v43 >= 0x15)
            inserted = v42;
          else
            inserted = (unsigned __int8 *)v41;
          if (v43 >= 0x15)
            v26 = (llvm::Constant *)v41;
          else
            v26 = (llvm::Constant *)v42;
          v27 = *(_WORD *)(v47 + 28) & 7;
          v24 = this;
          v25 = 13;
        }
        v28 = llvm::SCEVExpander::InsertBinop(v24, (llvm *)v25, inserted, v26, v27, 1);
      }
      else
      {
        v28 = (char *)llvm::SCEVExpander::expand(this, *((const llvm::SCEV **)v15 + 1));
      }
      v16 = (llvm::Value *)v28;
      v15 += 16;
LABEL_56:
      if (v15 == v17)
      {
        v15 = (char *)v51;
        goto LABEL_59;
      }
    }
  }
  v16 = 0;
LABEL_59:
  if (v15 != (char *)v53)
    free(v15);
  return v16;
}

void sub_1C5F64104(__n128 *a1, unsigned int a2, uint64_t a3, __n128 a4)
{
  unint64_t v5;
  __n128 *v6;
  const std::nothrow_t *v7;
  unint64_t v8;
  __n128 *v9;
  BOOL v10;
  __n128 *v11;
  uint64_t v12;

  v5 = a2;
  v6 = &a1[a2];
  v12 = a3;
  if (a2)
  {
    v7 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v8 = a2;
    while (1)
    {
      v9 = (__n128 *)operator new(16 * v8, v7);
      if (v9)
        break;
      v10 = v8 > 1;
      v8 >>= 1;
      if (!v10)
        goto LABEL_5;
    }
    v11 = v9;
    sub_1C5F6E2E4(a1, v6, &v12, v5, v9, v8, a4);
    operator delete(v11);
  }
  else
  {
LABEL_5:
    sub_1C5F6E2E4(a1, v6, &v12, v5, 0, 0, a4);
  }
}

void llvm::SCEVExpander::visitMulExpr(uint64_t a1, uint64_t a2)
{
  __asm { BR              X13 }
}

void sub_1C5F64220()
{
  JUMPOUT(0x1C5F64208);
}

void sub_1C5F64228()
{
  JUMPOUT(0x1C5F64208);
}

llvm::Value *sub_1C5F64230@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>, uint64_t a3, uint64_t a4, uint64_t a5, llvm::APInt *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  uint64_t v39;
  llvm::SCEVExpander *v40;
  llvm::Type **v41;
  llvm::Type *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const llvm::SCEV **v46;
  uint64_t RelevantLoop;
  uint64_t v48;
  uint64_t *v49;
  unsigned int v50;
  __n128 *v51;
  __n128 *v52;
  uint64_t v53;
  llvm::Value *v54;
  __n128 *v55;
  __n128 *v56;
  llvm::Instruction **v57;
  unsigned __int8 *inserted;
  llvm::Type *v59;
  unsigned __int8 *NullValue;
  unint64_t v61;
  llvm::Instruction **v62;
  unint64_t v63;
  BOOL v64;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  BOOL v69;
  unsigned __int8 *v71;
  unsigned __int8 *v72;
  unint64_t j;
  unsigned __int8 *v74;
  char *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  char *v79;
  unsigned __int8 *v80;
  unint64_t i;
  char *v82;
  unsigned __int8 *v83;
  unsigned int v84;
  unsigned __int8 *v85;
  llvm::Constant *v86;
  unsigned int v87;
  __int16 v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  int v92;
  llvm::SCEVExpander *v93;
  uint64_t v94;
  unsigned __int8 *v95;
  llvm::Value **v96;
  llvm::Type *v98;
  uint64_t v99;
  int8x8_t **v100;
  llvm::APInt *v101;
  __n128 *v102;
  uint64_t v103;
  _BYTE v104[240];

  v41 = *(llvm::Type ***)(v39 + 32);
  v42 = *v41;
  if (*((_BYTE *)*v41 + 8) != 13)
  {
    llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)v38 + 40) + 272), v42);
    v42 = v98;
    a1 = *(_QWORD *)(v99 + 32);
  }
  v102 = (__n128 *)v104;
  a2.n128_u64[0] = 0x800000000;
  v103 = 0x800000000;
  v43 = *(_QWORD *)(v99 + 40);
  if (v43)
  {
    v44 = 8 * v43;
    v45 = a1 - 8;
    do
    {
      v46 = *(const llvm::SCEV ***)(v45 + v44);
      RelevantLoop = llvm::SCEVExpander::getRelevantLoop(v40, v46);
      v48 = v103;
      if (v103 >= (unint64_t)HIDWORD(v103))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v102, (uint64_t)v104, v103 + 1, 16);
        v48 = v103;
      }
      v49 = (uint64_t *)&v102[v48];
      *v49 = RelevantLoop;
      v49[1] = (uint64_t)v46;
      v50 = v103 + 1;
      LODWORD(v103) = v103 + 1;
      v44 -= 8;
    }
    while (v44);
    v51 = v102;
  }
  else
  {
    v50 = 0;
    v51 = (__n128 *)v104;
  }
  sub_1C5F64104(v51, v50, *(_QWORD *)(*(_QWORD *)v40 + 32), a2);
  v52 = v102;
  v53 = v103;
  if ((_DWORD)v103)
  {
    v54 = 0;
    v55 = v102;
    v56 = &v102[v103];
    do
    {
      if (v54)
      {
        v57 = (llvm::Instruction **)v55->n128_u64[1];
        if (llvm::SCEV::isAllOnesValue((llvm::SCEV *)v57))
        {
          inserted = llvm::SCEVExpander::InsertNoopCastOfTo(v40, v54, v42);
          NullValue = (unsigned __int8 *)llvm::Constant::getNullValue(v42, v59);
          v54 = (llvm::Value *)llvm::SCEVExpander::InsertBinop(v40, (llvm *)0xF, NullValue, (llvm::Constant *)inserted, 0, 1);
          ++v55;
        }
        else
        {
          v66 = (char *)&v52[v53];
          if (v55 == (__n128 *)v66)
          {
            v67 = 0;
          }
          else
          {
            v67 = 0;
            v68 = v55->n128_u64[0];
            while (1)
            {
              v69 = v68 == v55->n128_u64[0] && v57 == (llvm::Instruction **)v55->n128_u64[1];
              if (!v69 || v67 == 0x7FFFFFFFFFFFFFFFLL)
                break;
              ++v67;
              if (++v55 == (__n128 *)v66)
              {
                v55 = (__n128 *)v66;
                break;
              }
            }
          }
          v76 = llvm::SCEVExpander::expandCodeForImpl(v40, v57, v42);
          v77 = (uint64_t)(v67 << 63) >> 63;
          v78 = (unsigned __int8 *)(v77 & (unint64_t)v76);
          if (v67 >= 2)
          {
            v80 = v76;
            for (i = 2; i <= v67; i *= 2)
            {
              v82 = llvm::SCEVExpander::InsertBinop(v40, (llvm *)0x11, v80, (llvm::Constant *)v80, 0, 1);
              v80 = (unsigned __int8 *)v82;
              if ((i & v67) != 0)
              {
                v79 = v82;
                if (v78)
                  v79 = llvm::SCEVExpander::InsertBinop(v40, (llvm *)0x11, v78, (llvm::Constant *)v82, 0, 1);
              }
              else
              {
                v79 = (char *)v78;
              }
              v78 = (unsigned __int8 *)v79;
            }
          }
          else
          {
            v79 = (char *)(v77 & (unint64_t)v76);
          }
          v83 = llvm::SCEVExpander::InsertNoopCastOfTo(v40, v54, v42);
          v84 = v83[16];
          if (v84 >= 0x15)
            v85 = v83;
          else
            v85 = (unsigned __int8 *)v79;
          if (v84 >= 0x15)
            v86 = (llvm::Constant *)v79;
          else
            v86 = (llvm::Constant *)v83;
          v100 = (int8x8_t **)&v101;
          v101 = 0;
          v87 = sub_1C57BBC6C(&v100, v86);
          v88 = *(_WORD *)(v99 + 28) & 7;
          if (v87)
          {
            v89 = *((_DWORD *)v101 + 2);
            v90 = v89 - 64;
            if (v89 > 0x40)
            {
              v92 = llvm::APInt::countLeadingZerosSlowCase(v101);
              if (!v92)
                LOBYTE(v88) = v88 & 3;
            }
            else
            {
              v91 = __clz(*(_QWORD *)v101);
              if (!(v90 + v91))
                LOBYTE(v88) = *(_BYTE *)(v99 + 28) & 3;
              v92 = v90 + v91;
            }
            v96 = llvm::ConstantInt::get(v42, v89 + ~v92, 0);
            v93 = v40;
            v94 = 25;
            v95 = v85;
          }
          else
          {
            v93 = v40;
            v94 = 17;
            v95 = v85;
            v96 = (llvm::Value **)v86;
          }
          v54 = (llvm::Value *)llvm::SCEVExpander::InsertBinop(v93, (llvm *)v94, v95, (llvm::Constant *)v96, v88, 1);
        }
      }
      else
      {
        if (v55 == v56)
        {
          v61 = 0;
          v62 = (llvm::Instruction **)v56->n128_u64[1];
        }
        else
        {
          v61 = 0;
          v63 = v55->n128_u64[0];
          v62 = (llvm::Instruction **)v55->n128_u64[1];
          while (1)
          {
            v64 = v63 == v55->n128_u64[0] && v62 == (llvm::Instruction **)v55->n128_u64[1];
            if (!v64 || v61 == 0x7FFFFFFFFFFFFFFFLL)
              break;
            ++v61;
            if (++v55 == v56)
              goto LABEL_39;
          }
          v56 = v55;
        }
LABEL_39:
        v71 = llvm::SCEVExpander::expandCodeForImpl(v40, v62, v42);
        v54 = (llvm::Value *)(((uint64_t)(v61 << 63) >> 63) & (unint64_t)v71);
        if (v61 >= 2)
        {
          v72 = v71;
          for (j = 2; j <= v61; j *= 2)
          {
            v74 = (unsigned __int8 *)v54;
            v75 = llvm::SCEVExpander::InsertBinop(v40, (llvm *)0x11, v72, (llvm::Constant *)v72, 0, 1);
            v72 = (unsigned __int8 *)v75;
            if ((j & v61) != 0)
            {
              v54 = (llvm::Value *)v75;
              if (v74)
                v54 = (llvm::Value *)llvm::SCEVExpander::InsertBinop(v40, (llvm *)0x11, v74, (llvm::Constant *)v75, 0, 1);
            }
          }
        }
        v55 = v56;
      }
      v52 = v102;
      v53 = v103;
      v56 = &v102[v103];
    }
    while (v55 != v56);
  }
  else
  {
    v54 = 0;
  }
  if (v52 != (__n128 *)v104)
    free(v52);
  return v54;
}

void llvm::SCEVExpander::visitUDivExpr(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

void sub_1C5F646E0()
{
  JUMPOUT(0x1C5F646C8);
}

void sub_1C5F646E8()
{
  JUMPOUT(0x1C5F646C8);
}

char *sub_1C5F646F0@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  llvm::SCEVExpander *v10;
  uint64_t v11;
  const llvm::SCEV **v12;
  llvm::Type **v13;
  llvm::Type *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::APInt *v18;
  uint64_t v19;
  uint8x8_t v20;
  int v21;
  int v22;
  unint64_t v23;
  int8x8_t *v24;
  int8x8_t v25;
  uint8x8_t v26;
  llvm::Value **v27;
  llvm::SCEVExpander *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int isKnownNonZero;
  unsigned __int8 *v32;
  llvm::Type *v34;

  v13 = *(llvm::Type ***)(v9 + 32);
  v14 = *v13;
  if (*((_BYTE *)*v13 + 8) != 13)
  {
    llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 272), v14);
    v14 = v34;
  }
  v15 = llvm::SCEVExpander::expandCodeForImpl(v10, *(llvm::Instruction ***)(v11 + 32), v14);
  v16 = *(_QWORD *)(v11 + 40);
  if (!v16 || *(_WORD *)(v16 + 24))
    goto LABEL_13;
  v17 = *(_QWORD *)(v16 + 32);
  v18 = (llvm::APInt *)(v17 + 24);
  v19 = *(unsigned int *)(v17 + 32);
  if (v19 > 0x40)
  {
    v22 = 0;
    v23 = (unint64_t)(v19 + 63) >> 6;
    v24 = *(int8x8_t **)v18;
    do
    {
      v25 = *v24++;
      v26 = (uint8x8_t)vcnt_s8(v25);
      v26.i16[0] = vaddlv_u8(v26);
      v22 += v26.i32[0];
      --v23;
    }
    while (v23);
    if (v22 == 1)
    {
      v21 = llvm::APInt::countLeadingZerosSlowCase(v18);
      goto LABEL_12;
    }
LABEL_13:
    v32 = llvm::SCEVExpander::expandCodeForImpl(v10, (llvm::Instruction **)v16, v14);
    isKnownNonZero = llvm::ScalarEvolution::isKnownNonZero(*(llvm::ScalarEvolution **)v10, *v12);
    v28 = v10;
    v29 = 19;
    v30 = v15;
    v27 = (llvm::Value **)v32;
    return llvm::SCEVExpander::InsertBinop(v28, (llvm *)v29, v30, (llvm::Constant *)v27, 0, isKnownNonZero);
  }
  v20 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v18);
  v20.i16[0] = vaddlv_u8(v20);
  if (v20.u32[0] != 1)
    goto LABEL_13;
  v21 = v19 + __clz(*(_QWORD *)v18) - 64;
LABEL_12:
  v27 = llvm::ConstantInt::get(v14, (v19 + ~v21), 0);
  v28 = v10;
  v29 = 26;
  v30 = v15;
  isKnownNonZero = 1;
  return llvm::SCEVExpander::InsertBinop(v28, (llvm *)v29, v30, (llvm::Constant *)v27, 0, isKnownNonZero);
}

uint64_t llvm::SCEVExpander::isNormalAddRecExprPHI(const llvm::Loop **this, llvm::PHINode *a2, llvm::Instruction *a3, const llvm::Loop *a4)
{
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  char *v12;
  const llvm::Value **v13;
  uint64_t v14;
  uint64_t result;
  char *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;

  while (1)
  {
    v8 = *((_DWORD *)a3 + 5);
    v9 = v8 & 0x7FFFFFF;
    if ((v8 & 0x7FFFFFF) == 0)
      return 0;
    v10 = *((unsigned __int8 *)a3 + 16);
    if (v10 == 83)
      return 0;
    v11 = v10 != 77 && (v10 - 79) > 0xFFFFFFF2;
    if (v11)
      return 0;
    if (this[50] == a4)
    {
      if ((v8 & 0x40000000) != 0)
      {
        v12 = (char *)*((_QWORD *)a3 - 1);
      }
      else
      {
        v9 = v9;
        v12 = (char *)a3 - 32 * v9;
      }
      if (v9 != 1)
        break;
    }
LABEL_21:
    if ((v8 & 0x40000000) != 0)
      v17 = (char *)*((_QWORD *)a3 - 1);
    else
      v17 = (char *)a3 - 32 * (v8 & 0x7FFFFFF);
    a3 = *(llvm::Instruction **)v17;
    v18 = *(unsigned __int8 *)(*(_QWORD *)v17 + 16);
    if (a3)
      v19 = v18 >= 0x1C;
    else
      v19 = 0;
    if (!v19)
      return 0;
    v20 = v18 - 33;
    if (v20 <= 0x37)
    {
      if (((1 << v20) & 0x808001D0000010) != 0)
        return 0;
      if (((1 << v20) & 0x8000000000041) != 0)
      {
        v21 = *((_QWORD *)a3 + 8);
        if (!v21 || (*(_BYTE *)(v21 + 17) & 0x30) == 0)
        {
          v22 = *((_DWORD *)a3 + 5);
          if (v22 < 0)
          {
            v23 = (char *)a3 - 32 * (v22 & 0x7FFFFFF);
            v26 = *((_QWORD *)v23 - 1);
            v24 = v23 - 8;
            v25 = v26;
            if (v26)
            {
              v27 = -v25;
              do
              {
                v28 = *(_DWORD *)(*(_QWORD *)&v24[v27] + 8);
                v11 = v28 > 7;
                v29 = (1 << v28) & 0x83;
                if (v11 || v29 == 0)
                  return 0;
                v27 += 16;
              }
              while (v27);
            }
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a3, 45) & 1) == 0)
          {
            result = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a3, 44);
            if (!(_DWORD)result)
              return result;
          }
        }
      }
      else if (v20 == 27 && (*((_WORD *)a3 + 9) & 0x301) != 0)
      {
        return 0;
      }
    }
    if ((llvm::Instruction::mayThrow(a3) & 1) != 0)
      return 0;
    result = llvm::Instruction::willReturn(a3);
    if (!(_DWORD)result)
      return result;
    if (a3 == a2)
      return 1;
  }
  v13 = (const llvm::Value **)(v12 + 32);
  v14 = 32 * v9 - 32;
  while (1)
  {
    if (*v13 && *((unsigned __int8 *)*v13 + 16) >= 0x1Cu)
    {
      result = llvm::DominatorTree::dominates(*((llvm::DominatorTree **)*this + 4), *v13, this[51]);
      if (!(_DWORD)result)
        return result;
    }
    v13 += 4;
    v14 -= 32;
    if (!v14)
    {
      v8 = *((_DWORD *)a3 + 5);
      goto LABEL_21;
    }
  }
}

uint64_t llvm::SCEVExpander::getIVIncOperand(llvm::SCEVExpander *this, llvm::Instruction *a2, llvm::Instruction *a3, char a4)
{
  uint64_t result;
  unsigned int v8;
  int v9;
  char *v10;
  unsigned __int8 *v11;
  BOOL v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  char *v17;
  const llvm::Value **v18;
  uint64_t v19;
  unsigned int v20;
  _BOOL4 v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Type *v26;
  uint64_t v27;

  if (a2 == a3)
    return 0;
  result = 0;
  v8 = *((unsigned __int8 *)a2 + 16);
  if (v8 <= 0x3D)
  {
    if (v8 != 41 && v8 != 43)
      return result;
    v9 = *((_DWORD *)a2 + 5);
    if ((v9 & 0x40000000) != 0)
      v10 = (char *)*((_QWORD *)a2 - 1);
    else
      v10 = (char *)a2 - 32 * (v9 & 0x7FFFFFF);
    v11 = (unsigned __int8 *)*((_QWORD *)v10 + 4);
    if (v11)
      v12 = v11[16] >= 0x1Cu;
    else
      v12 = 0;
    if (v12)
    {
      if (!llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)this + 32), (const llvm::Value *)v11, a3))return 0;
      v9 = *((_DWORD *)a2 + 5);
    }
    if ((v9 & 0x40000000) == 0)
    {
      v13 = v9 & 0x7FFFFFF;
      goto LABEL_36;
    }
LABEL_37:
    v23 = (uint64_t *)*((_QWORD *)a2 - 1);
    goto LABEL_38;
  }
  if (v8 != 62)
  {
    if (v8 == 77)
      goto LABEL_34;
    return result;
  }
  v15 = *((_DWORD *)a2 + 5);
  if ((v15 & 0x40000000) != 0)
  {
    v17 = (char *)*((_QWORD *)a2 - 1);
    v16 = v15 & 0x7FFFFFF;
  }
  else
  {
    v16 = v15 & 0x7FFFFFF;
    v17 = (char *)a2 - 32 * v16;
  }
  if (v16 == 1)
    goto LABEL_34;
  v18 = (const llvm::Value **)(v17 + 32);
  v19 = 32 * v16 - 32;
  while (1)
  {
    v20 = *((unsigned __int8 *)*v18 + 16);
    if (v20 < 0x15)
      goto LABEL_33;
    if (v20 >= 0x1C)
      break;
    if ((a4 & 1) == 0)
      goto LABEL_42;
LABEL_33:
    v18 += 4;
    v19 -= 32;
    if (!v19)
      goto LABEL_34;
  }
  v21 = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)this + 32), *v18, a3);
  if (!v21 || (a4 & 1) != 0)
  {
    if (!v21)
      return 0;
    goto LABEL_33;
  }
LABEL_42:
  if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 2)
    return 0;
  v25 = *(_QWORD *)a2;
  v26 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8);
  if (v25 != llvm::PointerType::get((llvm::PointerType *)(*****(_QWORD *****)this + 1888), v26))
  {
    v27 = *(_QWORD *)a2;
    if (v27 != llvm::PointerType::get((llvm::PointerType *)(*****(_QWORD *****)this + 1912), v26))
      return 0;
  }
LABEL_34:
  v22 = *((_DWORD *)a2 + 5);
  if ((v22 & 0x40000000) != 0)
    goto LABEL_37;
  v13 = v22 & 0x7FFFFFF;
LABEL_36:
  v23 = (uint64_t *)((char *)a2 - 32 * v13);
LABEL_38:
  v24 = *v23;
  if (*(unsigned __int8 *)(v24 + 16) <= 0x1Bu)
    return 0;
  else
    return v24;
}

uint64_t llvm::SCEVExpander::fixupInsertPoints(uint64_t this, llvm::Instruction *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v2 = (char *)a2 + 24;
  v3 = *((_QWORD *)a2 + 4);
  if (*(llvm::Instruction **)(this + 504) == (llvm::Instruction *)((char *)a2 + 24))
  {
    v10 = (char *)a2 + 24;
    if (v3)
      v5 = v3 - 24;
    else
      v5 = 0;
    v8 = v3;
    v9 = this;
    sub_1C4EC1900(this + 448, v5);
    v3 = v8;
    this = v9;
    v2 = v10;
  }
  v4 = *(unsigned int *)(this + 688);
  if ((_DWORD)v4)
  {
    v6 = *(_QWORD *)(this + 680);
    v7 = 8 * v4;
    do
    {
      if (*(char **)(*(_QWORD *)v6 + 16) == v2)
        *(_QWORD *)(*(_QWORD *)v6 + 16) = v3;
      v6 += 8;
      v7 -= 8;
    }
    while (v7);
  }
  return this;
}

BOOL llvm::SCEVExpander::hoistIVInc(llvm::SCEVExpander *this, llvm::Instruction *a2, llvm::Instruction *a3)
{
  uint64_t *v4;
  uint64_t IVIncOperand;
  _BOOL8 v7;
  const llvm::Value *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  llvm::Instruction *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];

  v4 = (uint64_t *)a2;
  v16[4] = *MEMORY[0x1E0C80C00];
  if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)this + 32), a2, a3))
    return 1;
  if (*((_BYTE *)a3 + 16) == 83
    || !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(*(_QWORD *)this + 32), *((_QWORD *)a3 + 5), v4[5])|| !sub_1C5F64E94(*(uint64_t **)(*(_QWORD *)this + 40), (uint64_t)v4, (uint64_t)a3))
  {
    return 0;
  }
  v14 = v16;
  v15 = 0x400000000;
  while (1)
  {
    IVIncOperand = llvm::SCEVExpander::getIVIncOperand(this, (llvm::Instruction *)v4, a3, 1);
    v7 = IVIncOperand != 0;
    if (!IVIncOperand)
      break;
    v8 = (const llvm::Value *)IVIncOperand;
    v9 = v15;
    if (v15 >= (unint64_t)HIDWORD(v15))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v15 + 1, 8);
      v9 = v15;
    }
    *((_QWORD *)v14 + v9) = v4;
    LODWORD(v15) = v15 + 1;
    v4 = (uint64_t *)v8;
    if (llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*(_QWORD *)this + 32), v8, a3))
    {
      if ((_DWORD)v15)
      {
        v10 = 8 * v15;
        v11 = (char *)v14 - 8;
        do
        {
          v12 = *(llvm::Instruction **)&v11[v10];
          llvm::SCEVExpander::fixupInsertPoints((uint64_t)this, v12);
          llvm::Instruction::moveBefore(v12, a3);
          v10 -= 8;
        }
        while (v10);
      }
      break;
    }
  }
  if (v14 != v16)
    free(v14);
  return v7;
}

uint64_t sub_1C5F64E94(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t i;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t result;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  _QWORD *v42;

  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(a3 + 40);
  if (v3 == v4)
    return 1;
  v5 = *((_DWORD *)a1 + 4);
  if (!v5)
    return 1;
  v6 = *a1;
  v7 = v5 - 1;
  v8 = v7 & ((v3 >> 4) ^ (v3 >> 9));
  v9 = *(_QWORD *)(*a1 + 16 * v8);
  if (v3 == v9)
  {
LABEL_7:
    v12 = *(_QWORD **)(v6 + 16 * v8 + 8);
  }
  else
  {
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v8 + v10++;
      v8 = v11 & v7;
      v9 = *(_QWORD *)(v6 + 16 * v8);
      if (v3 == v9)
        goto LABEL_7;
    }
    v12 = 0;
  }
  v13 = v7 & ((v4 >> 4) ^ (v4 >> 9));
  v14 = *(_QWORD *)(v6 + 16 * v13);
  if (v4 == v14)
  {
LABEL_13:
    v17 = *(_QWORD **)(v6 + 16 * v13 + 8);
    if (v12 == v17)
      return 1;
    if (v17)
    {
      v18 = v12;
      while (v18)
      {
        v18 = (_QWORD *)*v18;
        if (v18 == v17)
          goto LABEL_37;
      }
      for (i = *(_QWORD *)(a2 + 8); i; i = *(_QWORD *)(i + 8))
      {
        v20 = *(_QWORD *)(i + 24);
        if (*(_BYTE *)(v20 + 16) == 83)
        {
          v21 = *(_DWORD *)(v20 + 20);
          v22 = (v21 & 0x40000000) != 0 ? *(_QWORD *)(v20 - 8) : v20 - 32 * (v21 & 0x7FFFFFF);
          v23 = (uint64_t *)(v22
                          + 32 * *(unsigned int *)(v20 + 60)
                          + 8 * ((unint64_t)(i - v22) >> 5));
        }
        else
        {
          v23 = (uint64_t *)(v20 + 40);
        }
        v24 = *v23;
        if (v24 != v4)
        {
          v25 = ((v24 >> 4) ^ (v24 >> 9)) & v7;
          v26 = *(_QWORD *)(v6 + 16 * v25);
          if (v24 == v26)
          {
LABEL_33:
            v29 = *(_QWORD **)(v6 + 16 * v25 + 8);
          }
          else
          {
            v27 = 1;
            while (v26 != -4096)
            {
              v28 = v25 + v27++;
              v25 = v28 & v7;
              v26 = *(_QWORD *)(v6 + 16 * v25);
              if (v24 == v26)
                goto LABEL_33;
            }
            v29 = 0;
          }
          if (v29 != v17)
            return 0;
        }
      }
    }
LABEL_37:
    if (!v12)
      return 1;
  }
  else
  {
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v13 + v15++;
      v13 = v16 & v7;
      v14 = *(_QWORD *)(v6 + 16 * v13);
      if (v4 == v14)
        goto LABEL_13;
    }
    if (!v12)
      return 1;
    v17 = 0;
  }
  v30 = v17;
  result = 1;
  while (v30)
  {
    v30 = (_QWORD *)*v30;
    if (v30 == v12)
      return result;
  }
  if (*(_BYTE *)(a2 + 16) == 83)
    return 0;
  v32 = *(_DWORD *)(a2 + 20);
  if ((v32 & 0x40000000) != 0)
  {
    v34 = *(_QWORD *)(a2 - 8);
    v33 = v32 & 0x7FFFFFF;
    if (v33)
    {
LABEL_46:
      v35 = v34 + 32 * v33;
      result = 1;
      while (*(_QWORD *)v34 && *(unsigned __int8 *)(*(_QWORD *)v34 + 16) >= 0x1Cu)
      {
        v37 = *(_QWORD *)(*(_QWORD *)v34 + 40);
        if (v37 != v4)
        {
          v38 = ((v37 >> 4) ^ (v37 >> 9)) & v7;
          v39 = *(_QWORD *)(v6 + 16 * v38);
          if (v37 == v39)
          {
LABEL_57:
            v42 = *(_QWORD **)(v6 + 16 * v38 + 8);
          }
          else
          {
            v40 = 1;
            while (v39 != -4096)
            {
              v41 = v38 + v40++;
              v38 = v41 & v7;
              v39 = *(_QWORD *)(v6 + 16 * v38);
              if (v37 == v39)
                goto LABEL_57;
            }
            v42 = 0;
          }
          if (v42 != v17)
            break;
        }
        v34 += 32;
        if (v34 == v35)
          return result;
      }
      return 0;
    }
  }
  else
  {
    v33 = v32 & 0x7FFFFFF;
    v34 = a2 - 32 * v33;
    if (v33)
      goto LABEL_46;
  }
  return 1;
}

uint64_t llvm::SCEVExpander::isExpandedAddRecExprPHI(llvm::SCEVExpander *this, llvm::PHINode *a2, llvm::Instruction *a3, const llvm::Loop *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  llvm::Instruction *v17;
  llvm::Instruction *IVIncOperand;

  do
  {
    result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a4);
    if (!result)
      goto LABEL_8;
    v9 = *(_QWORD *)(result + 40);
    if (v9 == result + 40)
      goto LABEL_8;
    if (v9)
      v10 = v9 - 24;
    else
      v10 = 0;
    v11 = *(unsigned __int8 *)(v10 + 16);
    v12 = v11 - 29;
    if (v11 != 30)
    {
      v13 = 0;
      switch(v12)
      {
        case 0:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
          goto LABEL_13;
        case 1:
          __break(1u);
          return result;
        case 2:
          v14 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_11;
        case 3:
          v14 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_11;
        case 10:
          v14 = *(_DWORD *)(v10 + 80) + 1;
LABEL_11:
          if (v14 == 1)
            goto LABEL_12;
          goto LABEL_8;
        default:
          goto LABEL_8;
      }
    }
    if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
LABEL_8:
      v13 = 0;
    else
LABEL_12:
      v13 = result;
LABEL_13:
    v15 = *(_QWORD *)(v13 + 40);
    if (v15 == v13 + 40)
    {
      v17 = 0;
    }
    else
    {
      if (v15)
        v16 = (unsigned __int8 *)(v15 - 24);
      else
        v16 = 0;
      if (v16[16] - 29 >= 0xB)
        v17 = 0;
      else
        v17 = (llvm::Instruction *)v16;
    }
    IVIncOperand = (llvm::Instruction *)llvm::SCEVExpander::getIVIncOperand(this, a3, v17, 0);
    a3 = IVIncOperand;
  }
  while (IVIncOperand != a2 && IVIncOperand);
  return IVIncOperand != 0;
}

unsigned __int8 *llvm::SCEVExpander::expandIVInc(llvm::SCEVExpander *this, llvm::PHINode *a2, llvm::Value *a3, const llvm::Loop *a4, llvm::Type *a5, llvm::Type *a6, int a7)
{
  uint64_t *v9;
  _BYTE *v10;
  __int16 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t **v25;
  uint64_t v26;
  char v27;
  const char *v29;
  __int16 v30;
  uint64_t v31[4];
  __int16 v32;
  llvm::SCEV *__src;
  const llvm::SCEV *v34;
  __int16 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a5 + 2) != 15)
  {
    v9 = (uint64_t *)((char *)this + 448);
    v10 = (_BYTE *)*((_QWORD *)this + 2);
    if (a7)
    {
      v27 = 1;
      HIBYTE(v32) = 1;
      if (*v10)
      {
        v31[0] = (uint64_t)v10;
        v27 = 3;
      }
      LOBYTE(v32) = v27;
      v29 = ".iv.next";
      v30 = 259;
      sub_1C4825FE4(v31, (uint64_t *)&v29, (uint64_t)&__src);
      return (unsigned __int8 *)sub_1C47733F8((uint64_t)v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)&__src, 0, 0);
    }
    else
    {
      if (*v10)
      {
        v31[0] = *((_QWORD *)this + 2);
        v31[2] = (uint64_t)".iv.next";
        v11 = 771;
      }
      else
      {
        v31[0] = (uint64_t)".iv.next";
        v11 = 259;
      }
      v32 = v11;
      v12 = (*(uint64_t (**)(_QWORD, llvm::PHINode *, llvm::Value *, _QWORD, _QWORD, llvm::Type *))(**((_QWORD **)this + 65) + 16))(*((_QWORD *)this + 65), a2, a3, 0, 0, a6);
      if (!v12)
      {
        v35 = 257;
        v13 = (char *)operator new(0x80uLL);
        *((_QWORD *)v13 + 8) = *(_QWORD *)a2;
        v14 = (uint64_t)(v13 + 64);
        *((_QWORD *)v13 + 3) = v13 + 64;
        *((_QWORD *)v13 + 5) = 0;
        v15 = v13 + 40;
        *((_QWORD *)v13 + 6) = 0;
        *((_QWORD *)v13 + 7) = v13 + 64;
        *((_QWORD *)v13 + 9) = 0;
        *((_QWORD *)v13 + 10) = 0x200000029;
        *(_OWORD *)(v13 + 88) = 0u;
        *(_OWORD *)(v13 + 104) = 0u;
        *((_DWORD *)v13 + 30) = 0;
        *(_QWORD *)v13 = a2;
        v18 = *((_QWORD *)a2 + 1);
        v17 = (_QWORD *)((char *)a2 + 8);
        v16 = v18;
        *((_QWORD *)v13 + 1) = v18;
        if (v18)
          *(_QWORD *)(v16 + 16) = v13 + 8;
        *((_QWORD *)v13 + 2) = v17;
        *v17 = v13;
        *((_QWORD *)v13 + 4) = a3;
        if (a3)
        {
          v21 = *((_QWORD *)a3 + 1);
          v20 = (_QWORD *)((char *)a3 + 8);
          v19 = v21;
          *v15 = v21;
          if (v21)
            *(_QWORD *)(v19 + 16) = v15;
          *((_QWORD *)v13 + 6) = v20;
          *v20 = v13 + 32;
        }
        llvm::Value::setName((uint64_t ***)v13 + 8, (uint64_t)&__src);
        return (unsigned __int8 *)sub_1C4773754(v9, v14, (uint64_t)v31);
      }
    }
    return (unsigned __int8 *)v12;
  }
  v25 = (uint64_t **)a5;
  if (*((_BYTE *)a3 + 16) != 16)
    v25 = (uint64_t **)llvm::PointerType::get((llvm::PointerType *)(*****(_QWORD *****)this + 1888), (llvm::Type *)(*((_DWORD *)a5 + 2) >> 8));
  __src = (llvm::SCEV *)llvm::ScalarEvolution::getSCEV(*(llvm::ScalarEvolution **)this, a3);
  v22 = (unsigned __int8 *)llvm::SCEVExpander::expandAddToGEP((llvm::DataLayout **)this, &__src, &v34, v25, a6, a2);
  v26 = *(_QWORD *)a2;
  if (*(_QWORD *)v22 != *(_QWORD *)a2)
  {
    v35 = 257;
    return sub_1C4773E38((uint64_t *)this + 56, 49, v22, v26, (uint64_t)&__src);
  }
  return v22;
}

llvm::PHINode *llvm::SCEVExpander::getAddRecExprPHILiterally(llvm::SCEVExpander *this, const llvm::SCEVAddRecExpr *a2, const llvm::Loop *a3, llvm::Type *a4, llvm::Type *a5, llvm::Type **a6, BOOL *a7)
{
  uint64_t LoopLatch;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  llvm::PHINode *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  unsigned int v39;
  unsigned __int16 *SCEVIter;
  BOOL v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  uint64_t v50;
  uint64_t v51;
  llvm::SmallPtrSetImplBase *v52;
  char *v53;
  _BYTE *v54;
  void *v55;
  void *v56;
  unsigned int v57;
  int v58;
  _QWORD *v59;
  int v60;
  llvm::Instruction **v61;
  uint64_t LoopPredecessor;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t v74;
  llvm::SCEV *NegativeSCEV;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  BOOL v91;
  BOOL v92;
  char v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  BOOL v98;
  __int16 v100;
  uint64_t v101;
  llvm::Type *v102;
  _QWORD *v103;
  unsigned int v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  unint64_t v110;
  const char *v111;
  int32x2_t *v112;
  unint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  const char **v117;
  const char *v118;
  int v119;
  int v120;
  const llvm::Loop *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  llvm::PHINode *v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  int64_t v134;
  const llvm::Loop *v135;
  unsigned int v136;
  BOOL v137;
  uint64_t v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  void *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  unsigned __int8 *v149;
  BOOL *v150;
  uint64_t v151;
  llvm::Value *v152;
  llvm::Value *v153;
  llvm::Type **v154;
  llvm::Type *v155;
  const llvm::Loop *v156;
  _BOOL4 v158;
  int v159;
  llvm::PHINode *v160;
  _BYTE *v161;
  _BYTE *v162;
  unsigned int v163;
  int v164;
  int v165;
  _BYTE v166[16];
  uint64_t v167[5];
  unint64_t v168;
  uint64_t v169;
  const char *v170;
  __int16 v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a3);
  if (!LoopLatch)
    goto LABEL_88;
  v14 = LoopLatch;
  *a6 = 0;
  *a7 = 0;
  v15 = *((_QWORD *)this + 50);
  v158 = v15
      && llvm::DominatorTreeBase<llvm::BasicBlock,false>::properlyDominates(*(_QWORD *)(*(_QWORD *)this + 32), LoopLatch, **(_QWORD **)(v15 + 32));
  if (*(_QWORD *)(**((_QWORD **)a3 + 4) + 40) == **((_QWORD **)a3 + 4) + 40)
    goto LABEL_88;
  v16 = *(_QWORD *)(**((_QWORD **)a3 + 4) + 48);
  v17 = (_QWORD *)(v16 - 24);
  v18 = v16 ? v16 - 24 : 0;
  if (!v16 || *(_BYTE *)(v18 + 16) != 83)
    goto LABEL_88;
  v154 = a6;
  v155 = a4;
  v150 = a7;
  v152 = 0;
  v19 = 0;
  while (1)
  {
    if ((*(_DWORD *)(*v17 + 8) & 0xFD) != 0xD)
      goto LABEL_78;
    v20 = v17[5];
    while (1)
    {
      v20 = *(_QWORD *)(v20 + 8);
      if (!v20)
        break;
      v21 = *(_QWORD *)(v20 + 24);
      v22 = *(unsigned __int8 *)(v21 + 16);
      if (v21)
        v23 = v22 >= 0x1C;
      else
        v23 = 0;
      if (v23 && v22 - 29 < 0xB)
      {
        v25 = *((_DWORD *)v17 + 5);
        if ((v25 & 0x7FFFFFF) == 0)
          goto LABEL_78;
LABEL_23:
        v26 = *(_QWORD *)(v21 + 40);
        v27 = 4 * *((unsigned int *)v17 + 15);
        v28 = v25 & 0x7FFFFFF;
        while (1)
        {
          v29 = &v17[-4 * (v25 & 0x7FFFFFF)];
          if ((v25 & 0x40000000) != 0)
            v29 = (_QWORD *)*(v17 - 1);
          if (v29[v27] == v26)
            break;
          ++v27;
          if (!--v28)
            goto LABEL_78;
        }
        while (1)
        {
          v20 = *(_QWORD *)(v20 + 8);
          if (!v20)
            goto LABEL_38;
          v21 = *(_QWORD *)(v20 + 24);
          v30 = *(unsigned __int8 *)(v21 + 16);
          if (v21)
            v31 = v30 >= 0x1C;
          else
            v31 = 0;
          if (v31 && v30 - 29 < 0xB)
            goto LABEL_23;
        }
      }
    }
LABEL_38:
    v33 = *(_QWORD *)(*(_QWORD *)this + 104);
    v34 = *(_DWORD *)(*(_QWORD *)this + 120);
    if (v34)
    {
      v35 = (v34 - 1) & ((v17 >> 4) ^ (v17 >> 9));
      v36 = v33 + 48 * v35;
      v37 = *(_QWORD **)(v36 + 24);
      if (v37 == v17)
        goto LABEL_45;
      v38 = 1;
      while (v37 != (_QWORD *)-4096)
      {
        v39 = v35 + v38++;
        v35 = v39 & (v34 - 1);
        v36 = v33 + 48 * v35;
        v37 = *(_QWORD **)(v36 + 24);
        if (v37 == v17)
          goto LABEL_45;
      }
    }
    v36 = v33 + 48 * v34;
LABEL_45:
    if (v36 == v33 + 48 * v34 || (SCEVIter = *(unsigned __int16 **)(v36 + 40)) == 0)
      SCEVIter = (unsigned __int16 *)llvm::ScalarEvolution::createSCEVIter(*(llvm::ScalarEvolution **)this, (unint64_t)v17);
    if (SCEVIter)
      v41 = SCEVIter[12] == 7;
    else
      v41 = 0;
    if (!v41)
      goto LABEL_78;
    v42 = v158;
    if (SCEVIter == (unsigned __int16 *)a2)
      v42 = 1;
    if (v42 != 1)
      goto LABEL_78;
    v43 = *((_DWORD *)v17 + 5);
    v44 = v43 & 0x7FFFFFF;
    if ((v43 & 0x7FFFFFF) != 0)
    {
      v45 = 0;
      while (1)
      {
        v46 = &v17[-4 * v44];
        if ((v43 & 0x40000000) != 0)
          v46 = (_QWORD *)*(v17 - 1);
        if (v46[4 * *((unsigned int *)v17 + 15) + v45] == v14)
          break;
        if (v44 == ++v45)
          goto LABEL_62;
      }
    }
    else
    {
LABEL_62:
      LODWORD(v45) = -1;
    }
    v47 = (v43 & 0x40000000) != 0 ? (_QWORD *)*(v17 - 1) : &v17[-4 * v44];
    v48 = (unsigned __int8 *)v47[4 * v45];
    if (!v48 || v48[16] < 0x1Cu)
      goto LABEL_78;
    if (!*((_BYTE *)this + 441))
      break;
    if ((llvm::SCEVExpander::isExpandedAddRecExprPHI(this, (llvm::PHINode *)v17, (llvm::Instruction *)v48, a3) & 1) != 0)
      goto LABEL_74;
LABEL_78:
    v50 = v17[4];
    v17 = (_QWORD *)(v50 - 24);
    if (v50)
      v51 = v50 - 24;
    else
      v51 = 0;
    if (!v50 || *(_BYTE *)(v51 + 16) != 83)
      goto LABEL_86;
  }
  if (!llvm::SCEVExpander::isNormalAddRecExprPHI((const llvm::Loop **)this, (llvm::PHINode *)v17, (llvm::Instruction *)v48, a3))goto LABEL_78;
LABEL_74:
  if (SCEVIter != (unsigned __int16 *)a2)
  {
    if (!*v154 || *v150)
      __asm { BR              X11 }
    goto LABEL_78;
  }
  *v154 = 0;
  *v150 = 0;
  v152 = (llvm::Value *)v48;
  v19 = (llvm::PHINode *)v17;
LABEL_86:
  a4 = v155;
  if (v19)
  {
    v168 = (unint64_t)v19;
    sub_1C5F6EE6C((uint64_t)this + 56, &v168, (uint64_t)&v161);
    llvm::SCEVExpander::rememberInstruction(this, v152);
    v52 = (llvm::SCEVExpander *)((char *)this + 104);
    sub_1C4774094(v52, (uint64_t)v19);
    sub_1C4774094(v52, (uint64_t)v152);
    return v19;
  }
LABEL_88:
  v53 = (char *)this + 448;
  sub_1C5F6E01C((uint64_t)v167, (llvm::SCEVExpander *)((char *)this + 448), (uint64_t)this);
  v54 = v166;
  v161 = v166;
  v55 = (void *)*((_QWORD *)this + 45);
  v156 = a3;
  if (v55 == *((void **)this + 44))
  {
    v162 = v166;
    v56 = v55;
    goto LABEL_90;
  }
  v140 = *((unsigned int *)this + 92);
  v54 = malloc_type_malloc(8 * v140, 0x4065EBACuLL);
  if (!v54 && ((_DWORD)v140 || (v54 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_252:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v162 = v54;
  v55 = (void *)*((_QWORD *)this + 44);
  v56 = (void *)*((_QWORD *)this + 45);
LABEL_90:
  v57 = *((_DWORD *)this + 92);
  v163 = v57;
  v58 = *((_DWORD *)this + 93);
  if (v56 == v55)
    v57 = *((_DWORD *)this + 93);
  if (v57)
  {
    memmove(v54, v56, 8 * v57);
    v58 = *((_DWORD *)this + 93);
    v55 = (void *)*((_QWORD *)this + 44);
    v56 = (void *)*((_QWORD *)this + 45);
  }
  v59 = (_QWORD *)((char *)this + 372);
  v60 = *((_DWORD *)this + 94);
  v164 = v58;
  v165 = v60;
  if (v56 == v55)
  {
LABEL_95:
    *v59 = 0;
  }
  else
  {
    v68 = *((unsigned int *)this + 92);
    if (v68 < 0x21 || 4 * (v58 - v60) >= v68)
    {
      memset(v56, 255, 8 * v68);
      goto LABEL_95;
    }
    free(v56);
    v141 = *((_DWORD *)this + 93) - *((_DWORD *)this + 94);
    v142 = 1 << (33 - __clz(v141 - 1));
    if (v141 <= 0x10)
      v143 = 32;
    else
      v143 = v142;
    *((_DWORD *)this + 92) = v143;
    *v59 = 0;
    v144 = malloc_type_malloc(8 * v143, 0x4065EBACuLL);
    if (!v144)
      goto LABEL_252;
    *((_QWORD *)this + 45) = v144;
    memset(v144, 255, 8 * *((unsigned int *)this + 92));
  }
  v61 = (llvm::Instruction **)**((_QWORD **)a2 + 4);
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a3);
  if (!LoopPredecessor || (v63 = *(_QWORD *)(LoopPredecessor + 40), v63 == LoopPredecessor + 40))
  {
LABEL_103:
    v67 = 0;
    goto LABEL_111;
  }
  if (v63)
    v64 = v63 - 24;
  else
    v64 = 0;
  v65 = *(unsigned __int8 *)(v64 + 16);
  v66 = v65 - 29;
  if (v65 != 30)
  {
    v67 = 0;
    switch(v66)
    {
      case 0:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_111;
      case 1:
        __break(1u);
        goto LABEL_248;
      case 2:
        v69 = (*(_DWORD *)(v64 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 3:
LABEL_248:
        v69 = (*(_DWORD *)(v64 + 20) & 0x7FFFFFF) - 1;
        break;
      case 10:
        v69 = *(_DWORD *)(v64 + 80) + 1;
        break;
      default:
        goto LABEL_103;
    }
    if (v69 == 1)
      goto LABEL_110;
    goto LABEL_103;
  }
  if ((*(_DWORD *)(v64 + 20) & 0x7FFFFFF) == 3)
    goto LABEL_103;
LABEL_110:
  v67 = LoopPredecessor;
LABEL_111:
  v70 = 0;
  v71 = *(_QWORD *)(v67 + 40);
  if (v71)
    v72 = v71 - 24;
  else
    v72 = 0;
  if (*(unsigned __int8 *)(v72 + 16) - 29 >= 0xB)
    v72 = 0;
  *((_QWORD *)this + 62) = *(_QWORD *)(v72 + 40);
  *((_QWORD *)this + 63) = v72 + 24;
  v73 = *(unsigned __int8 **)(v72 + 48);
  v168 = (unint64_t)v73;
  if (v73)
  {
    llvm::MetadataTracking::track((uint64_t)&v168, v73, 2);
    v70 = v168;
  }
  sub_1C4774EF4((uint64_t)this + 448, 0, v70);
  if (v168)
    llvm::MetadataTracking::untrack((uint64_t)&v168, (unsigned __int8 *)v168);
  v149 = llvm::SCEVExpander::expandCodeForImpl(this, v61, a4);
  v74 = *((_QWORD *)a2 + 5);
  if (v74 == 2)
  {
    NegativeSCEV = *(llvm::SCEV **)(*((_QWORD *)a2 + 4) + 8);
  }
  else
  {
    v145 = *(uint64_t **)this;
    v146 = *((_QWORD *)a2 + 4);
    v168 = (unint64_t)&v170;
    v169 = 0x300000000;
    v147 = 8 * v74 - 8;
    if ((unint64_t)v147 >= 0x19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, (uint64_t)&v170, v147 >> 3, 8);
      v148 = v169;
    }
    else
    {
      v148 = 0;
    }
    if (v74 != 1)
    {
      memcpy((void *)(v168 + 8 * v148), (const void *)(v146 + 8), 8 * v74 - 8);
      v148 = v169;
    }
    LODWORD(v169) = v148 + ((unint64_t)v147 >> 3);
    NegativeSCEV = (llvm::SCEV *)sub_1C618AB20(v145, (uint64_t)&v168, *((uint64_t ***)a2 + 6));
    if ((const char **)v168 != &v170)
      free((void *)v168);
    v53 = (char *)this + 448;
  }
  if (*((_BYTE *)a4 + 8) == 15 || !llvm::SCEV::isNonConstantNegative(NegativeSCEV))
  {
    v159 = 0;
  }
  else
  {
    NegativeSCEV = (llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(*(_QWORD *)this, (uint64_t)NegativeSCEV);
    v159 = 1;
  }
  v76 = **((_QWORD **)a3 + 4);
  v77 = v76 + 40;
  for (i = *(_QWORD *)(v76 + 48); i != v77; i = *(_QWORD *)(i + 8))
  {
    v79 = i - 24;
    if (!i)
      v79 = 0;
    if (*(_BYTE *)(v79 + 16) != 83)
    {
      v80 = *(unsigned __int8 *)(i - 8) - 38;
      v92 = v80 > 0x38;
      v81 = (1 << v80) & 0x100060000000001;
      if (v92 || v81 == 0)
        v77 = i;
      else
        v77 = *(_QWORD *)(i + 8);
      break;
    }
  }
  v83 = 0;
  if (v77)
    v84 = v77 - 24;
  else
    v84 = 0;
  *((_QWORD *)this + 62) = *(_QWORD *)(v84 + 40);
  *((_QWORD *)this + 63) = v84 + 24;
  v85 = *(unsigned __int8 **)(v84 + 48);
  v168 = (unint64_t)v85;
  if (v85)
  {
    llvm::MetadataTracking::track((uint64_t)&v168, v85, 2);
    v83 = v168;
  }
  sub_1C4774EF4((uint64_t)v53, 0, v83);
  if (v168)
    llvm::MetadataTracking::untrack((uint64_t)&v168, (unsigned __int8 *)v168);
  v153 = (llvm::Value *)llvm::SCEVExpander::expandCodeForImpl(this, (llvm::Instruction **)NegativeSCEV, a5);
  if ((v159 & 1) == 0)
    __asm { BR              X12 }
  v86 = (uint64_t *)*((_QWORD *)a3 + 4);
  v87 = *v86;
  sub_1C4D8AE2C((uint64_t)v53, *v86, *(_QWORD *)(*v86 + 48));
  v88 = *(_QWORD *)(v87 + 8);
  if (v88)
  {
    while (1)
    {
      v89 = *(_QWORD *)(v88 + 24);
      v90 = *(unsigned __int8 *)(v89 + 16);
      v91 = v89 && v90 >= 0x1C;
      v92 = !v91 || v90 - 29 > 0xA;
      if (!v92)
        break;
      v88 = *(_QWORD *)(v88 + 8);
      if (!v88)
        goto LABEL_157;
    }
    v94 = 0;
    v95 = v88;
LABEL_158:
    ++v94;
    while (1)
    {
      v95 = *(_QWORD *)(v95 + 8);
      if (!v95)
        break;
      v96 = *(_QWORD *)(v95 + 24);
      v97 = *(unsigned __int8 *)(v96 + 16);
      if (v96)
        v98 = v97 >= 0x1C;
      else
        v98 = 0;
      if (v98 && v97 - 29 < 0xB)
        goto LABEL_158;
    }
    v93 = 0;
  }
  else
  {
LABEL_157:
    v94 = 0;
    v93 = 1;
  }
  if (**((_BYTE **)this + 2))
  {
    v168 = *((_QWORD *)this + 2);
    v170 = ".iv";
    v100 = 771;
  }
  else
  {
    v168 = (unint64_t)".iv";
    v100 = 259;
  }
  v171 = v100;
  v151 = (uint64_t)v53;
  v101 = (uint64_t)v53;
  v102 = a4;
  v19 = (llvm::PHINode *)sub_1C4867E94(v101, (uint64_t)a4, v94, (uint64_t)&v168);
  if ((v93 & 1) == 0)
  {
    v121 = a3;
    v122 = (char *)a3 + 56;
    v123 = *(_QWORD *)(v88 + 24);
LABEL_198:
    v124 = *(_QWORD *)(v123 + 40);
    v125 = v122;
    v126 = sub_1C477672C((uint64_t)v122, v124);
    v127 = *((_QWORD *)v121 + 8);
    if (v127 == *((_QWORD *)v121 + 7))
      v128 = 76;
    else
      v128 = 72;
    if (v126 == (_QWORD *)(v127 + 8 * *(unsigned int *)((char *)v121 + v128)))
    {
      v131 = v19;
      v132 = v149;
    }
    else
    {
      if (*((const llvm::Loop **)this + 50) == v121)
      {
        v130 = *((_QWORD *)this + 51);
      }
      else
      {
        v129 = *(_QWORD *)(v124 + 40);
        if (v129)
          v130 = v129 - 24;
        else
          v130 = 0;
        if (*(unsigned __int8 *)(v130 + 16) - 29 >= 0xB)
          v130 = 0;
      }
      *((_QWORD *)this + 62) = *(_QWORD *)(v130 + 40);
      *((_QWORD *)this + 63) = v130 + 24;
      v133 = *(unsigned __int8 **)(v130 + 48);
      v168 = (unint64_t)v133;
      if (v133)
      {
        llvm::MetadataTracking::track((uint64_t)&v168, v133, 2);
        v134 = v168;
      }
      else
      {
        v134 = 0;
      }
      sub_1C4774EF4(v151, 0, v134);
      if (v168)
        llvm::MetadataTracking::untrack((uint64_t)&v168, (unsigned __int8 *)v168);
      v132 = llvm::SCEVExpander::expandIVInc(this, v19, v153, v135, v102, a5, v159);
      v131 = v19;
    }
    sub_1C477667C(v131, (uint64_t)v132, v124);
    while (1)
    {
      v88 = *(_QWORD *)(v88 + 8);
      if (!v88)
        break;
      v123 = *(_QWORD *)(v88 + 24);
      v136 = *(unsigned __int8 *)(v123 + 16);
      if (v123)
        v137 = v136 >= 0x1C;
      else
        v137 = 0;
      if (v137 && v136 - 29 < 0xB)
      {
        v121 = v156;
        v122 = v125;
        goto LABEL_198;
      }
    }
  }
  if (&v161 != (_BYTE **)((char *)this + 352))
    llvm::SmallPtrSetImplBase::CopyFrom((llvm::SCEVExpander *)((char *)this + 352), (const llvm::SmallPtrSetImplBase *)&v161);
  v160 = v19;
  sub_1C5F6EE6C((uint64_t)this + 56, &v160, (uint64_t)&v168);
  v168 = 4;
  v169 = 0;
  v170 = (const char *)v19;
  if (v19 != (llvm::PHINode *)-8192 && v19 != (llvm::PHINode *)-4096 && v19)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v168);
  v103 = (_QWORD *)sub_1C4EE497C((unsigned int *)this + 66, (unint64_t)&v168, 1);
  v104 = *((_DWORD *)this + 68);
  v105 = (unint64_t *)(*((_QWORD *)this + 33) + 24 * v104);
  *v105 = 4;
  v105[1] = 0;
  v106 = (unint64_t)(v105 + 1);
  v107 = v103[2];
  v105[2] = v107;
  if (v107 != -8192 && v107 != -4096)
  {
    if (v107)
    {
      v108 = *v103 & 0xFFFFFFFFFFFFFFF8;
      v105[1] = *(_QWORD *)v108;
      *(_QWORD *)v108 = v105;
      *v105 = v108 | 4;
      v109 = (uint64_t *)v105[1];
      if (v109)
        *v109 = *v109 & 7 | v106;
    }
  }
  *((_DWORD *)this + 68) = v104 + 1;
  if (v170 != (const char *)-8192 && v170 != (const char *)-4096 && v170)
  {
    v110 = v168 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v168 & 0xFFFFFFFFFFFFFFF8) = v169;
    if (v169)
    {
      *(_QWORD *)v169 = *(_QWORD *)v169 & 7 | v110;
    }
    else
    {
      v111 = v170;
      v112 = ***(int32x2_t ****)v170;
      v113 = (unint64_t)v112[303];
      if (v113 <= v110)
      {
        v114 = v112[305].u32[0];
        if (v113 + 16 * v114 > v110)
        {
          v115 = v114 - 1;
          LODWORD(v116) = v115 & ((v170 >> 4) ^ (v170 >> 9));
          v117 = (const char **)(v113 + 16 * v116);
          v118 = *v117;
          if (v170 == *v117)
          {
LABEL_195:
            *v117 = (const char *)-8192;
            v112[304] = vadd_s32(v112[304], (int32x2_t)0x1FFFFFFFFLL);
            v111 = v170;
          }
          else
          {
            v119 = 1;
            while (v118 != (const char *)-4096)
            {
              v120 = v116 + v119++;
              v116 = v120 & v115;
              v118 = *(const char **)(v113 + 16 * v116);
              if (v170 == v118)
              {
                v117 = (const char **)(v113 + 16 * v116);
                goto LABEL_195;
              }
            }
          }
          *((_BYTE *)v111 + 17) &= ~1u;
        }
      }
    }
  }
  if (v162 != v161)
    free(v162);
  sub_1C5F6E0A4(v167);
  return v19;
}

uint64_t llvm::SCEVExpander::rememberInstruction(llvm::SCEVExpander *this, llvm::Value *a2)
{
  char *v4;
  uint64_t result;
  int v6;
  unsigned int i;
  llvm::Value *v8;
  _BYTE v9[31];

  if (*((_DWORD *)this + 93) == *((_DWORD *)this + 94))
    v4 = (char *)this + 56;
  else
    v4 = (char *)this + 80;
  v8 = a2;
  result = sub_1C5F6EE6C((uint64_t)v4, &v8, (uint64_t)v9);
  if (*((_BYTE *)this + 24))
  {
    if (a2)
    {
      if (*((unsigned __int8 *)a2 + 16) >= 0x1Cu)
      {
        v6 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
        if (v6)
        {
          for (i = 0; i != v6; ++i)
            result = llvm::SCEVExpander::fixupLCSSAFormFor(this, a2, i);
        }
      }
    }
  }
  return result;
}

unsigned __int8 *llvm::SCEVExpander::expandCodeForImpl(llvm::SCEVExpander *this, llvm::Instruction **a2, llvm::Type *a3, llvm::Instruction *a4)
{
  char *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v11;

  v7 = (char *)this + 448;
  *((_QWORD *)this + 62) = *((_QWORD *)a4 + 5);
  *((_QWORD *)this + 63) = (char *)a4 + 24;
  v8 = (unsigned __int8 *)*((_QWORD *)a4 + 6);
  v11 = v8;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)&v11, v8, 2);
    v9 = v11;
  }
  else
  {
    v9 = 0;
  }
  sub_1C4774EF4((uint64_t)v7, 0, (uint64_t)v9);
  if (v11)
    llvm::MetadataTracking::untrack((uint64_t)&v11, v11);
  return llvm::SCEVExpander::expandCodeForImpl(this, a2, a3);
}

void llvm::SCEVExpander::expandAddRecExprLiterally(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_1C5F66C98()
{
  JUMPOUT(0x1C5F66C80);
}

void sub_1C5F66CA0()
{
  JUMPOUT(0x1C5F66C80);
}

unsigned __int8 *sub_1C5F66CA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, size_t __n, llvm::Type *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 a17, int a18, int a19, __int16 a20,char a21,BOOL a22,llvm::Type *a23,llvm::SCEV *__src,uint64_t a25,uint64_t a26,int a27,int a28,__int16 a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  llvm::Type **v46;
  llvm::Type *v47;
  const llvm::BasicBlock ***v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  const llvm::SCEV *v55;
  llvm::Instruction **NegativeSCEV;
  llvm::Type *v57;
  llvm::PHINode *AddRecExprPHILiterally;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t LoopLatch;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  unsigned __int8 *inserted;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  BOOL v73;
  int v74;
  unsigned int v76;
  unint64_t v77;
  int v78;
  __int16 v80;
  uint64_t v81;
  const llvm::Instruction *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t i;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned __int8 *v91;
  uint64_t v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  const llvm::Loop *v95;
  llvm::Type *v96;
  llvm::Type *v97;
  unsigned __int8 *v98;
  llvm::Type *v100;
  llvm::Type *v101;
  llvm::Type *v102;
  int v103;
  uint64_t v104;
  size_t v105;
  llvm::Type *v106;
  unsigned __int8 *v107[5];
  BOOL v108;
  llvm::Type *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  _WORD v114[60];

  v46 = *(llvm::Type ***)(v43 + 32);
  v47 = *v46;
  v106 = *v46;
  if (*((_BYTE *)*v46 + 8) != 13)
  {
    llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)*v44 + 40) + 272), v47);
    v106 = v100;
  }
  v48 = *(const llvm::BasicBlock ****)(v45 + 48);
  v49 = sub_1C477672C((uint64_t)(v44 + 44), (uint64_t)v48);
  v50 = v44[45];
  v51 = 368;
  if (v50 == v44[44])
    v51 = 372;
  v52 = v45;
  if (v49 != (_QWORD *)(v50 + 8 * *(unsigned int *)((char *)v44 + v51)))
  {
    v110 = (uint64_t *)v114;
    v111 = (uint64_t)v114;
    v112 = 2;
    v113 = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v110, (uint64_t)v48);
    v52 = llvm::normalizeForPostIncUse(v45, (uint64_t)&v110, *v44);
    if ((uint64_t *)v111 != v110)
      free((void *)v111);
  }
  if (llvm::ScalarEvolution::getBlockDisposition((llvm::ScalarEvolution *)*v44, **(const llvm::SCEV ***)(v52 + 32), *v48[4]) != 2)
    __asm { BR              X11 }
  v53 = (uint64_t *)*v44;
  v54 = *(_QWORD *)(v52 + 40);
  if (v54 == 2)
  {
    v55 = *(const llvm::SCEV **)(*(_QWORD *)(v52 + 32) + 8);
  }
  else
  {
    v104 = *(_QWORD *)(v52 + 32);
    v110 = &v112;
    v111 = 0x300000000;
    v105 = 8 * v54 - 8;
    if (v105 >= 0x19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v110, (uint64_t)&v112, (uint64_t)v105 >> 3, 8);
      v103 = v111;
    }
    else
    {
      v103 = 0;
    }
    if (v54 != 1)
    {
      memcpy(&v110[v103], (const void *)(v104 + 8), v105);
      v103 = v111;
    }
    LODWORD(v111) = v103 + (v105 >> 3);
    v55 = (const llvm::SCEV *)sub_1C618AB20(v53, (uint64_t)&v110, *(uint64_t ***)(v52 + 48));
    if (v110 != &v112)
      free(v110);
    v53 = (uint64_t *)*v44;
  }
  if ((int)llvm::ScalarEvolution::getBlockDisposition((llvm::ScalarEvolution *)v53, v55, *v48[4]) <= 0)
    __asm { BR              X11 }
  NegativeSCEV = (llvm::Instruction **)v55;
  v57 = v47;
  if (sub_1C4DEB33C(v44[1], (uint64_t)v47))
    __asm { BR              X11 }
  v109 = 0;
  v108 = 0;
  AddRecExprPHILiterally = llvm::SCEVExpander::getAddRecExprPHILiterally((llvm::SCEVExpander *)v44, (const llvm::SCEVAddRecExpr *)v52, (const llvm::Loop *)v48, v47, v106, &v109, &v108);
  v60 = sub_1C477672C((uint64_t)(v44 + 44), (uint64_t)v48);
  v61 = v44[45];
  v62 = 368;
  if (v61 == v44[44])
    v62 = 372;
  if (v60 == (_QWORD *)(v61 + 8 * *(unsigned int *)((char *)v44 + v62)))
  {
    inserted = (unsigned __int8 *)AddRecExprPHILiterally;
    goto LABEL_74;
  }
  LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v48);
  v64 = *((_DWORD *)AddRecExprPHILiterally + 5);
  v65 = v64 & 0x7FFFFFF;
  if ((v64 & 0x7FFFFFF) != 0)
  {
    v66 = 0;
    while (1)
    {
      v67 = (char *)AddRecExprPHILiterally - 32 * v65;
      if ((v64 & 0x40000000) != 0)
        v67 = (char *)*((_QWORD *)AddRecExprPHILiterally - 1);
      if (*(_QWORD *)&v67[32 * *((unsigned int *)AddRecExprPHILiterally + 15) + 8 * v66] == LoopLatch)
        break;
      if (v65 == ++v66)
        goto LABEL_26;
    }
  }
  else
  {
LABEL_26:
    LODWORD(v66) = -1;
  }
  if ((v64 & 0x40000000) != 0)
    v68 = (char *)*((_QWORD *)AddRecExprPHILiterally - 1);
  else
    v68 = (char *)AddRecExprPHILiterally - 32 * v65;
  inserted = *(unsigned __int8 **)&v68[32 * v66];
  v70 = inserted[16];
  if (v70 < 0x1C)
  {
    if (v70 != 5)
      goto LABEL_74;
    HIDWORD(v77) = *((unsigned __int16 *)inserted + 9) - 13;
    LODWORD(v77) = HIDWORD(v77);
    v76 = v77 >> 1;
    v73 = v76 > 6;
    v78 = (1 << v76) & 0x47;
    if (v73 || v78 == 0)
      goto LABEL_74;
LABEL_42:
    v80 = *(_WORD *)(v45 + 28);
    if ((v80 & 2) == 0)
    {
      inserted[17] &= ~2u;
      v80 = *(_WORD *)(v45 + 28);
    }
    if ((v80 & 4) == 0)
      inserted[17] &= ~4u;
    if (v70 < 0x1C)
      goto LABEL_74;
    goto LABEL_47;
  }
  HIDWORD(v72) = v70 - 41;
  LODWORD(v72) = v70 - 41;
  v71 = v72 >> 1;
  v73 = v71 > 6;
  v74 = (1 << v71) & 0x47;
  if (!v73 && v74 != 0)
    goto LABEL_42;
LABEL_47:
  v81 = v44[63];
  if (v81)
    v82 = (const llvm::Instruction *)(v81 - 24);
  else
    v82 = 0;
  if (!llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(*v44 + 32), (const llvm::Value *)inserted, v82))
  {
    if (*((_BYTE *)v57 + 8) == 15 || !llvm::SCEV::isNonConstantNegative(v55))
    {
      v83 = 0;
    }
    else
    {
      NegativeSCEV = (llvm::Instruction **)llvm::ScalarEvolution::getNegativeSCEV(*v44, (uint64_t)v55);
      v83 = 1;
    }
    sub_1C5F6E01C((uint64_t)&v110, (llvm::IRBuilderBase *)(v44 + 56), (uint64_t)v44);
    v84 = (uint64_t)*v48[4];
    v85 = v84 + 40;
    for (i = *(_QWORD *)(v84 + 48); i != v85; i = *(_QWORD *)(i + 8))
    {
      v87 = i - 24;
      if (!i)
        v87 = 0;
      if (*(_BYTE *)(v87 + 16) != 83)
      {
        v88 = *(unsigned __int8 *)(i - 8) - 38;
        v73 = v88 > 0x38;
        v89 = (1 << v88) & 0x100060000000001;
        if (v73 || v89 == 0)
          v85 = i;
        else
          v85 = *(_QWORD *)(i + 8);
        break;
      }
    }
    v91 = 0;
    if (v85)
      v92 = v85 - 24;
    else
      v92 = 0;
    v44[62] = *(_QWORD *)(v92 + 40);
    v44[63] = v92 + 24;
    v93 = *(unsigned __int8 **)(v92 + 48);
    v107[0] = v93;
    if (v93)
    {
      llvm::MetadataTracking::track((uint64_t)v107, v93, 2);
      v91 = v107[0];
    }
    sub_1C4774EF4((uint64_t)(v44 + 56), 0, (uint64_t)v91);
    if (v107[0])
      llvm::MetadataTracking::untrack((uint64_t)v107, v107[0]);
    v94 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)v44, NegativeSCEV, v106);
    sub_1C5F6E0A4((uint64_t *)&v110);
    inserted = llvm::SCEVExpander::expandIVInc((llvm::SCEVExpander *)v44, AddRecExprPHILiterally, (llvm::Value *)v94, v95, v57, v106, v83);
  }
LABEL_74:
  v96 = v109;
  if (v109)
  {
    v97 = *(llvm::Type **)inserted;
    if (*(_BYTE *)(*(_QWORD *)inserted + 8) != 13)
    {
      llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)*v44 + 40) + 272), *(llvm::Type **)inserted);
      if (v97 != v101)
      {
        if (*((_BYTE *)v97 + 8) != 13)
        {
          llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)*v44 + 40) + 272), v97);
          v97 = v102;
        }
        inserted = llvm::SCEVExpander::InsertNoopCastOfTo((llvm::SCEVExpander *)v44, (llvm::Value *)inserted, v97);
      }
    }
    if (v96 != *(llvm::Type **)inserted)
    {
      v114[0] = 257;
      inserted = sub_1C4773E38(v44 + 56, 38, inserted, (uint64_t)v96, (uint64_t)&v110);
    }
    if (v108)
    {
      v98 = llvm::SCEVExpander::expandCodeForImpl((llvm::SCEVExpander *)v44, **(llvm::Instruction ****)(v52 + 32), v109);
      v114[0] = 257;
      return (unsigned __int8 *)sub_1C47733F8((uint64_t)(v44 + 56), (uint64_t)v98, (uint64_t)inserted, (uint64_t)&v110, 0, 0);
    }
  }
  return inserted;
}

void llvm::SCEVExpander::visitAddRecExpr(llvm::SCEVExpander *this, const llvm::SCEVAddRecExpr *a2)
{
  if (*((_BYTE *)this + 440) && *((_QWORD *)a2 + 5) < 3uLL)
    __asm { BR              X12 }
  llvm::SCEVExpander::expandAddRecExprLiterally((uint64_t)this, (uint64_t)a2);
}

uint64_t llvm::SCEVExpander::fixupLCSSAFormFor(llvm::SCEVExpander *this, llvm::Instruction *a2, unsigned int a3)
{
  int v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  char *v33;
  uint64_t v35;
  _QWORD *v36;
  void *v37;
  uint64_t v38;
  _BYTE v39[128];
  _QWORD *v40;
  int v41;
  int v42;
  _QWORD v43[3];

  v43[1] = *MEMORY[0x1E0C80C00];
  v40 = v43;
  v42 = 1;
  v5 = *((_DWORD *)a2 + 5);
  if ((v5 & 0x40000000) != 0)
    v6 = (char *)*((_QWORD *)a2 - 1);
  else
    v6 = (char *)a2 - 32 * (v5 & 0x7FFFFFF);
  v7 = *(_QWORD *)&v6[32 * a3];
  if (v7)
    v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
  else
    v8 = 0;
  if (!v8)
    return v7;
  v9 = *(_QWORD *)this;
  v10 = *(_QWORD *)(*(_QWORD *)this + 40);
  v11 = *(_DWORD *)(v10 + 16);
  if (!v11)
    return v7;
  v12 = *(_QWORD *)(v7 + 40);
  v13 = *(_QWORD *)v10;
  v14 = v11 - 1;
  v15 = ((v12 >> 4) ^ (v12 >> 9)) & v14;
  v16 = *(_QWORD *)(*(_QWORD *)v10 + 16 * v15);
  if (v12 == v16)
  {
LABEL_14:
    v19 = *(_QWORD **)(v13 + 16 * v15 + 8);
  }
  else
  {
    v17 = 1;
    while (v16 != -4096)
    {
      v18 = v15 + v17++;
      v15 = v18 & v14;
      v16 = *(_QWORD *)(v13 + 16 * v15);
      if (v12 == v16)
        goto LABEL_14;
    }
    v19 = 0;
  }
  v20 = *((_QWORD *)a2 + 5);
  v21 = ((v20 >> 4) ^ (v20 >> 9)) & v14;
  v22 = *(_QWORD *)(v13 + 16 * v21);
  if (v20 == v22)
  {
LABEL_20:
    v25 = *(_QWORD **)(v13 + 16 * v21 + 8);
    if (!v19)
      return v7;
    goto LABEL_23;
  }
  v23 = 1;
  while (v22 != -4096)
  {
    v24 = v21 + v23++;
    v21 = v24 & v14;
    v22 = *(_QWORD *)(v13 + 16 * v21);
    if (v20 == v22)
      goto LABEL_20;
  }
  v25 = 0;
  if (v19)
  {
LABEL_23:
    if (v25 != v19)
    {
      v26 = a3;
      while (v25)
      {
        v25 = (_QWORD *)*v25;
        if (v25 == v19)
          return v7;
      }
      v43[0] = v7;
      v41 = 1;
      v37 = v39;
      v38 = 0x1000000000;
      llvm::formLCSSAForInstructions((uint64_t)&v40, *(_QWORD *)(v9 + 32), (uint64_t *)v10, (int32x2_t *)v9, (llvm::SCEVExpander *)((char *)this + 448), (unsigned int *)&v37);
      if ((_DWORD)v38)
      {
        v27 = (char *)v37;
        v28 = 8 * v38;
        do
        {
          v29 = *(_QWORD *)v27;
          if (!*(_QWORD *)(*(_QWORD *)v27 + 8))
          {
            v35 = *(_QWORD *)v27;
            v36 = 0;
            if (sub_1C5BA21D8((uint64_t *)this + 7, &v35, &v36))
            {
              *v36 = -8192;
              *((int32x2_t *)this + 8) = vadd_s32(*(int32x2_t *)((char *)this + 64), (int32x2_t)0x1FFFFFFFFLL);
            }
            v35 = v29;
            v36 = 0;
            if (sub_1C5BA21D8((uint64_t *)this + 10, &v35, &v36))
            {
              *v36 = -8192;
              *((int32x2_t *)this + 11) = vadd_s32(*(int32x2_t *)((char *)this + 88), (int32x2_t)0x1FFFFFFFFLL);
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v29 + 40) + 40, (uint64_t ***)v29);
            v30 = *(_QWORD *)(v29 + 24);
            v31 = *(_QWORD **)(v29 + 32);
            *v31 = v30;
            *(_QWORD *)(v30 + 8) = v31;
            *(_QWORD *)(v29 + 24) = 0;
            *(_QWORD *)(v29 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v29);
          }
          v27 += 8;
          v28 -= 8;
        }
        while (v28);
      }
      v32 = *((_DWORD *)a2 + 5);
      if ((v32 & 0x40000000) != 0)
        v33 = (char *)*((_QWORD *)a2 - 1);
      else
        v33 = (char *)a2 - 32 * (v32 & 0x7FFFFFF);
      v7 = *(_QWORD *)&v33[32 * v26];
      if (v37 != v39)
        free(v37);
      if (v40 != v43)
        free(v40);
    }
  }
  return v7;
}

uint64_t llvm::SCEVExpander::FindValueInExprValueMap(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::Instruction *a3)
{
  const llvm::SCEV *SCEVValues;
  uint64_t v6;
  const llvm::SCEV *v7;
  BOOL v8;

  if (*((_BYTE *)this + 440) || !llvm::ScalarEvolution::containsAddRecurrence(*this, a2))
  {
    if (*((_WORD *)a2 + 12))
    {
      SCEVValues = llvm::ScalarEvolution::getSCEVValues(*this, a2);
      if (v6)
      {
        v7 = SCEVValues;
        do
        {
          if (*(_QWORD *)v7)
            v8 = *(unsigned __int8 *)(*(_QWORD *)v7 + 16) >= 0x1Cu;
          else
            v8 = 0;
          if (v8)
            __asm { BR              X10 }
          v7 = (const llvm::SCEV *)((char *)v7 + 8);
        }
        while (v7 != (const llvm::SCEV *)((char *)SCEVValues + 8 * v6));
      }
    }
  }
  return 0;
}

uint64_t llvm::SCEVExpander::replaceCongruentIVs(uint64_t *a1, const llvm::Loop *a2, uint64_t a3, unsigned int *a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned __int8 ***v16;
  const std::nothrow_t *v17;
  unint64_t v18;
  unsigned __int8 ***v19;
  BOOL v20;
  unsigned __int8 ***v21;
  uint64_t v22;
  unsigned __int8 *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _BYTE *v36;
  llvm::UndefValue *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  llvm::Value *v42;
  int v43;
  unsigned int v44;
  uint64_t SCEVIter;
  BOOL v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  llvm::Value *v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  _QWORD *v55;
  llvm::PHINode **v56;
  llvm::Value *v57;
  uint64_t v58;
  uint64_t LoopLatch;
  _DWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  llvm::Value *v66;
  llvm::Value *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned __int8 *v73;
  llvm::Value *v74;
  llvm::Value *v75;
  llvm::ScalarEvolution *v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  llvm::Value *v82;
  int v83;
  unsigned int v84;
  llvm::ScalarEvolution *v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  llvm::Value *v91;
  int v92;
  unsigned int v93;
  const llvm::SCEV *v94;
  llvm::Value *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  llvm::Value *v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  llvm::Value *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t i;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  uint64_t v120;
  _BYTE *v121;
  char v122;
  unsigned int v123;
  llvm::Value *v124;
  llvm::ValueHandleBase *v125;
  unsigned int *v126;
  llvm::Value *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t j;
  uint64_t v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  llvm::PHINode *v138;
  uint64_t v139;
  _BYTE *v140;
  char v141;
  uint64_t v142;
  uint64_t *v144;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  llvm::Value *v149;
  llvm::Value *v150;
  llvm::Value *v151;
  uint64_t v152[2];
  int v153;
  uint64_t v154[2];
  int8x16_t v155;
  uint64_t v156;
  __int16 v157;
  void *TruncateExpr;
  uint64_t v159;
  _BYTE v160[120];
  unsigned __int8 *v161;
  uint64_t v162;
  _QWORD v163[10];

  v163[8] = *MEMORY[0x1E0C80C00];
  v161 = (unsigned __int8 *)v163;
  v162 = 0x800000000;
  if (*(_QWORD *)(**((_QWORD **)a2 + 4) + 40) == **((_QWORD **)a2 + 4) + 40)
  {
    v8 = 0;
LABEL_17:
    v14 = (unsigned __int8 *)v163;
    goto LABEL_18;
  }
  v8 = 0;
  v9 = *(_QWORD *)(**((_QWORD **)a2 + 4) + 48);
  v10 = v9 - 24;
  if (v9)
    v11 = v9 - 24;
  else
    v11 = 0;
  if (!v9 || *(_BYTE *)(v11 + 16) != 83)
    goto LABEL_17;
  v8 = 0;
  do
  {
    if (v8 >= HIDWORD(v162))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v161, (uint64_t)v163, v8 + 1, 8);
      v8 = v162;
    }
    *(_QWORD *)&v161[8 * v8] = v10;
    v8 = v162 + 1;
    LODWORD(v162) = v162 + 1;
    v12 = *(_QWORD *)(v10 + 32);
    v10 = v12 - 24;
    if (v12)
      v13 = v12 - 24;
    else
      v13 = 0;
  }
  while (v12 && *(_BYTE *)(v13 + 16) == 83);
  v14 = v161;
LABEL_18:
  if (a5)
  {
    v15 = v8;
    v16 = (unsigned __int8 ***)&v14[8 * v8];
    if (v8 < 0x81)
    {
LABEL_23:
      sub_1C5F6F304(v14, v16, v15, 0, 0);
    }
    else
    {
      v17 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v18 = v8;
      while (1)
      {
        v19 = (unsigned __int8 ***)operator new(8 * v18, v17);
        if (v19)
          break;
        v20 = v18 > 1;
        v18 >>= 1;
        if (!v20)
          goto LABEL_23;
      }
      v21 = v19;
      sub_1C5F6F304(v14, v16, v15, v19, v18);
      operator delete(v21);
    }
    v8 = v162;
    v14 = v161;
  }
  v152[0] = 0;
  v152[1] = 0;
  v153 = 0;
  if (v8)
  {
    v22 = 0;
    v144 = a1 + 52;
    v23 = &v14[8 * v8];
    while (1)
    {
      v24 = *(llvm::Value **)v14;
      v151 = v24;
      v25 = *a1;
      v26 = *(_QWORD *)(*a1 + 16);
      v154[0] = a1[1];
      v154[1] = v26;
      v155 = vextq_s8(*(int8x16_t *)(v25 + 24), *(int8x16_t *)(v25 + 24), 8uLL);
      v156 = 0;
      v157 = 257;
      v27 = *((_DWORD *)v24 + 5);
      if ((v27 & 0x40000000) != 0)
      {
        v29 = (uint64_t *)*((_QWORD *)v24 - 1);
        v28 = v27 & 0x7FFFFFF;
      }
      else
      {
        v28 = v27 & 0x7FFFFFF;
        v29 = (uint64_t *)((char *)v24 - 32 * v28);
      }
      TruncateExpr = v160;
      v159 = 0x800000000;
      if (v28 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&TruncateExpr, (uint64_t)v160, v28, 8);
        v30 = v159;
        v32 = TruncateExpr;
        v31 = v159;
      }
      else
      {
        v30 = 0;
        if (!v28)
        {
          v36 = v160;
          goto LABEL_37;
        }
        v31 = 0;
        v32 = v160;
      }
      v33 = 32 * v28;
      v34 = &v32[8 * v31];
      do
      {
        v35 = *v29;
        v29 += 4;
        *v34++ = v35;
        v33 -= 32;
      }
      while (v33);
      v36 = TruncateExpr;
LABEL_37:
      LODWORD(v159) = v30 + v28;
      v37 = llvm::SimplifyInstructionWithOperands(v24, (uint64_t)v36, (v30 + v28), (uint64_t)v154, a5, a6);
      if (TruncateExpr == v160)
      {
        if (v37)
          goto LABEL_39;
      }
      else
      {
        free(TruncateExpr);
        if (v37)
          goto LABEL_39;
      }
      if ((*(_DWORD *)(*(_QWORD *)v24 + 8) & 0xFD) == 0xD)
      {
        v38 = *(_QWORD *)(*a1 + 104);
        v39 = *(_DWORD *)(*a1 + 120);
        if (!v39)
          goto LABEL_50;
        v40 = (v39 - 1) & ((v24 >> 4) ^ (v24 >> 9));
        v41 = v38 + 48 * v40;
        v42 = *(llvm::Value **)(v41 + 24);
        if (v42 != v24)
        {
          v43 = 1;
          while (v42 != (llvm::Value *)-4096)
          {
            v44 = v40 + v43++;
            v40 = v44 & (v39 - 1);
            v41 = v38 + 48 * v40;
            v42 = *(llvm::Value **)(v41 + 24);
            if (v42 == v24)
              goto LABEL_51;
          }
LABEL_50:
          v41 = v38 + 48 * v39;
        }
LABEL_51:
        if (v41 == v38 + 48 * v39 || (SCEVIter = *(_QWORD *)(v41 + 40)) == 0)
          SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)*a1, (unint64_t)v24);
        if (SCEVIter)
          v46 = *(unsigned __int16 *)(SCEVIter + 24) == 0;
        else
          v46 = 0;
        if (v46)
        {
          v37 = *(llvm::UndefValue **)(SCEVIter + 32);
          if (v37)
          {
LABEL_39:
            if (*(_QWORD *)v37 == *(_QWORD *)v151)
            {
              llvm::Value::doRAUW(v151, v37, (llvm::Value *)1);
              sub_1C5B2DB10(a4, (uint64_t *)&v151);
              v22 = (v22 + 1);
            }
            goto LABEL_76;
          }
        }
      }
      if ((*(_DWORD *)(*(_QWORD *)v151 + 8) & 0xFD) != 0xD)
        goto LABEL_76;
      v47 = *(_QWORD *)(*a1 + 104);
      v48 = *(_DWORD *)(*a1 + 120);
      if (!v48)
        goto LABEL_67;
      v49 = (v48 - 1) & ((v151 >> 4) ^ (v151 >> 9));
      v50 = v47 + 48 * v49;
      v51 = *(llvm::Value **)(v50 + 24);
      if (v51 != v151)
      {
        v52 = 1;
        while (v51 != (llvm::Value *)-4096)
        {
          v53 = v49 + v52++;
          v49 = v53 & (v48 - 1);
          v50 = v47 + 48 * v49;
          v51 = *(llvm::Value **)(v50 + 24);
          if (v51 == v151)
            goto LABEL_68;
        }
LABEL_67:
        v50 = v47 + 48 * v48;
      }
LABEL_68:
      if (v50 == v47 + 48 * v48 || (v54 = *(_QWORD *)(v50 + 40)) == 0)
        v54 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)*a1, (unint64_t)v151);
      v154[0] = v54;
      TruncateExpr = 0;
      if ((sub_1C509801C(v152[0], v153, v54, &TruncateExpr) & 1) != 0)
      {
        v56 = (llvm::PHINode **)((char *)TruncateExpr + 8);
        v58 = *((_QWORD *)TruncateExpr + 1);
        if (v58)
        {
          if ((*(_BYTE *)(*(_QWORD *)v58 + 8) == 15) == (*(_BYTE *)(*(_QWORD *)v151 + 8) == 15))
          {
            LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)a2);
            v60 = *v56;
            if (LoopLatch)
            {
              v61 = v60[5];
              v62 = v61 & 0x7FFFFFF;
              if ((v61 & 0x7FFFFFF) != 0)
              {
                v63 = 0;
                while (1)
                {
                  v64 = &v60[-8 * v62];
                  if ((v61 & 0x40000000) != 0)
                    v64 = (_DWORD *)*((_QWORD *)v60 - 1);
                  if (*(_QWORD *)&v64[8 * v60[15] + 2 * v63] == LoopLatch)
                    break;
                  if (v62 == ++v63)
                    goto LABEL_88;
                }
              }
              else
              {
LABEL_88:
                LODWORD(v63) = -1;
              }
              if ((v61 & 0x40000000) != 0)
                v65 = (_DWORD *)*((_QWORD *)v60 - 1);
              else
                v65 = &v60[-8 * v62];
              v66 = *(llvm::Value **)&v65[8 * v63];
              if (*((unsigned __int8 *)v66 + 16) <= 0x1Bu)
                v67 = 0;
              else
                v67 = *(llvm::Value **)&v65[8 * v63];
              v150 = 0;
              v68 = *((_DWORD *)v151 + 5);
              v69 = v68 & 0x7FFFFFF;
              if ((v68 & 0x7FFFFFF) != 0)
              {
                v70 = 0;
                while (1)
                {
                  v71 = (char *)v151 - 32 * v69;
                  if ((v68 & 0x40000000) != 0)
                    v71 = (char *)*((_QWORD *)v151 - 1);
                  if (*(_QWORD *)&v71[32 * *((unsigned int *)v151 + 15) + 8 * v70] == LoopLatch)
                    break;
                  if (v69 == ++v70)
                    goto LABEL_100;
                }
              }
              else
              {
LABEL_100:
                LODWORD(v70) = -1;
              }
              if ((v68 & 0x40000000) != 0)
                v72 = (char *)*((_QWORD *)v151 - 1);
              else
                v72 = (char *)v151 - 32 * v69;
              v73 = *(unsigned __int8 **)&v72[32 * v70];
              if (v73[16] <= 0x1Bu)
                v73 = 0;
              v150 = (llvm::Value *)v73;
              if (v67 && v73)
              {
                if (*(_QWORD *)v60 == *(_QWORD *)v151)
                {
                  v154[0] = (uint64_t)v151;
                  TruncateExpr = 0;
                  v74 = v67;
                  if ((sub_1C5BA0FA4(v144, v154, &TruncateExpr) & 1) == 0
                    && (llvm::SCEVExpander::isExpandedAddRecExprPHI((llvm::SCEVExpander *)a1, *v56, v74, a2) & 1) == 0)
                  {
                    v149 = v151;
                    TruncateExpr = 0;
                    if ((sub_1C5BA0FA4(v144, &v149, &TruncateExpr) & 1) != 0
                      || (llvm::SCEVExpander::isExpandedAddRecExprPHI((llvm::SCEVExpander *)a1, v151, v150, a2) & 1) != 0)
                    {
                      v75 = *v56;
                      v66 = v150;
                      *v56 = v151;
                      v150 = v74;
                      v151 = v75;
                    }
                  }
                }
                v76 = (llvm::ScalarEvolution *)*a1;
                v77 = *(_QWORD *)(*a1 + 104);
                v78 = *(_DWORD *)(*a1 + 120);
                if (!v78)
                  goto LABEL_130;
                v79 = v78 - 1;
                v80 = (v78 - 1) & ((v66 >> 4) ^ (v66 >> 9));
                v81 = v77 + 48 * v80;
                v82 = *(llvm::Value **)(v81 + 24);
                if (v82 != v66)
                {
                  v83 = 1;
                  while (v82 != (llvm::Value *)-4096)
                  {
                    v84 = v80 + v83++;
                    v80 = v84 & v79;
                    v81 = v77 + 48 * (v84 & v79);
                    v82 = *(llvm::Value **)(v81 + 24);
                    if (v82 == v66)
                      goto LABEL_131;
                  }
LABEL_130:
                  v81 = v77 + 48 * v78;
                }
LABEL_131:
                if (v81 == v77 + 48 * v78 || (v96 = *(_QWORD *)(v81 + 40)) == 0)
                  v96 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)*a1, (unint64_t)v66);
                llvm::ScalarEvolution::getTruncateOrNoop((uint64_t)v76, v96);
                if (v66 != v150)
                {
                  v98 = v97;
                  v99 = *(_QWORD *)(*a1 + 104);
                  v100 = *(_DWORD *)(*a1 + 120);
                  if (!v100)
                    goto LABEL_141;
                  v101 = (v100 - 1) & ((v150 >> 4) ^ (v150 >> 9));
                  v102 = v99 + 48 * v101;
                  v103 = *(llvm::Value **)(v102 + 24);
                  if (v103 != v150)
                  {
                    v104 = 1;
                    while (v103 != (llvm::Value *)-4096)
                    {
                      v105 = v101 + v104++;
                      v101 = v105 & (v100 - 1);
                      v102 = v99 + 48 * v101;
                      v103 = *(llvm::Value **)(v102 + 24);
                      if (v103 == v150)
                        goto LABEL_142;
                    }
LABEL_141:
                    v102 = v99 + 48 * v100;
                  }
LABEL_142:
                  if (v102 == v99 + 48 * v100 || (v106 = *(_QWORD *)(v102 + 40)) == 0)
                    v106 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)*a1, (unint64_t)v150);
                  if (v98 == v106
                    && sub_1C4F20780(*(uint64_t **)(*a1 + 40), (uint64_t)v150, (uint64_t)v66)
                    && llvm::SCEVExpander::hoistIVInc((llvm::SCEVExpander *)a1, v66, v150))
                  {
                    v107 = v150;
                    if (*(_QWORD *)v66 != *(_QWORD *)v150)
                    {
                      if (*((_BYTE *)v66 + 16) == 83)
                      {
                        v108 = *((_QWORD *)v66 + 5);
                        v109 = v108 + 40;
                        for (i = *(_QWORD *)(v108 + 48); i != v109; i = *(_QWORD *)(i + 8))
                        {
                          v111 = i - 24;
                          if (!i)
                            v111 = 0;
                          if (*(_BYTE *)(v111 + 16) != 83)
                          {
                            v115 = *(unsigned __int8 *)(i - 8) - 38;
                            v20 = v115 > 0x38;
                            v116 = (1 << v115) & 0x100060000000001;
                            if (v20 || v116 == 0)
                              v109 = i;
                            else
                              v109 = *(_QWORD *)(i + 8);
                            break;
                          }
                        }
                        if (v109)
                          v114 = v109 - 24;
                        else
                          v114 = 0;
                      }
                      else
                      {
                        v112 = *((_QWORD *)v66 + 4);
                        if (v112)
                          v113 = v112 == *((_QWORD *)v66 + 5) + 40;
                        else
                          v113 = 1;
                        if (v113)
                          v114 = 0;
                        else
                          v114 = v112 - 24;
                      }
                      sub_1C4773D54((uint64_t)&TruncateExpr, v114, 0, 0, 0);
                      v118 = (unsigned __int8 *)*((_QWORD *)v150 + 6);
                      v148 = v118;
                      if (v118)
                      {
                        llvm::MetadataTracking::track((uint64_t)&v148, v118, 2);
                        v119 = v148;
                      }
                      else
                      {
                        v119 = 0;
                      }
                      sub_1C4774EF4((uint64_t)&TruncateExpr, 0, (uint64_t)v119);
                      if (v148)
                        llvm::MetadataTracking::untrack((uint64_t)&v148, v148);
                      v120 = *(_QWORD *)v150;
                      v121 = (_BYTE *)a1[2];
                      LOWORD(v156) = 257;
                      if (*v121)
                      {
                        v154[0] = (uint64_t)v121;
                        v122 = 3;
                      }
                      else
                      {
                        v122 = 1;
                      }
                      LOBYTE(v156) = v122;
                      v66 = (llvm::Value *)sub_1C5390E08((uint64_t *)&TruncateExpr, (unsigned __int8 *)v66, v120, (uint64_t)v154);
                      if (TruncateExpr != v160)
                        free(TruncateExpr);
                      v107 = v150;
                    }
                    llvm::Value::doRAUW(v107, v66, (llvm::Value *)1);
                    v123 = a4[2];
                    if (v123 >= a4[3])
                    {
                      sub_1C578EDF4(a4, (uint64_t *)&v150);
                    }
                    else
                    {
                      v124 = v150;
                      v125 = (llvm::ValueHandleBase *)(*(_QWORD *)a4 + 24 * v123);
                      *(_QWORD *)v125 = 6;
                      *((_QWORD *)v125 + 1) = 0;
                      *((_QWORD *)v125 + 2) = v124;
                      if (v124 == (llvm::Value *)-8192 || v124 == (llvm::Value *)-4096)
                      {
                        v126 = a4;
                      }
                      else
                      {
                        v126 = a4;
                        if (v124)
                        {
                          llvm::ValueHandleBase::AddToUseList(v125);
                          v123 = a4[2];
                        }
                      }
                      v126[2] = v123 + 1;
                    }
                  }
                }
              }
              v60 = *v56;
            }
            v127 = v151;
            if (*(_QWORD *)v60 != *(_QWORD *)v151)
            {
              v128 = **((_QWORD **)a2 + 4);
              v129 = v128 + 40;
              for (j = *(_QWORD *)(v128 + 48); j != v129; j = *(_QWORD *)(j + 8))
              {
                v131 = j - 24;
                if (!j)
                  v131 = 0;
                if (*(_BYTE *)(v131 + 16) != 83)
                {
                  v132 = *(unsigned __int8 *)(j - 8) - 38;
                  v20 = v132 > 0x38;
                  v133 = (1 << v132) & 0x100060000000001;
                  if (v20 || v133 == 0)
                    v129 = j;
                  else
                    v129 = *(_QWORD *)(j + 8);
                  break;
                }
              }
              if (v129)
                v135 = v129 - 24;
              else
                v135 = 0;
              sub_1C4773D54((uint64_t)&TruncateExpr, v135, 0, 0, 0);
              v136 = (unsigned __int8 *)*((_QWORD *)v151 + 6);
              v147 = v136;
              if (v136)
              {
                llvm::MetadataTracking::track((uint64_t)&v147, v136, 2);
                v137 = v147;
              }
              else
              {
                v137 = 0;
              }
              sub_1C4774EF4((uint64_t)&TruncateExpr, 0, (uint64_t)v137);
              if (v147)
                llvm::MetadataTracking::untrack((uint64_t)&v147, v147);
              v138 = *v56;
              v139 = *(_QWORD *)v151;
              v140 = (_BYTE *)a1[2];
              LOWORD(v156) = 257;
              if (*v140)
              {
                v154[0] = (uint64_t)v140;
                v141 = 3;
              }
              else
              {
                v141 = 1;
              }
              LOBYTE(v156) = v141;
              v60 = sub_1C5390E08((uint64_t *)&TruncateExpr, (unsigned __int8 *)v138, v139, (uint64_t)v154);
              if (TruncateExpr != v160)
                free(TruncateExpr);
              v127 = v151;
            }
            v22 = (v22 + 1);
            llvm::Value::doRAUW(v127, (llvm::Value *)v60, (llvm::Value *)1);
            sub_1C5B2DB10(a4, (uint64_t *)&v151);
            goto LABEL_76;
          }
          goto LABEL_76;
        }
      }
      else
      {
        v55 = sub_1C5F6FF38((uint64_t)v152, v154, TruncateExpr);
        *v55 = v54;
        v55[1] = 0;
        v56 = (llvm::PHINode **)(v55 + 1);
      }
      v57 = v151;
      *v56 = v151;
      if (a5
        && *(_BYTE *)(*(_QWORD *)v57 + 8) == 13
        && (*(unsigned int (**)(_QWORD))(**(_QWORD **)a5 + 456))(*(_QWORD *)a5))
      {
        v85 = (llvm::ScalarEvolution *)*a1;
        v86 = *(_QWORD *)(*a1 + 104);
        v87 = *(_DWORD *)(*a1 + 120);
        if (!v87)
          goto LABEL_125;
        v88 = v87 - 1;
        v89 = ((v151 >> 4) ^ (v151 >> 9)) & (v87 - 1);
        v90 = v86 + 48 * v89;
        v91 = *(llvm::Value **)(v90 + 24);
        if (v91 != v151)
        {
          v92 = 1;
          while (v91 != (llvm::Value *)-4096)
          {
            v93 = v89 + v92++;
            v89 = v93 & v88;
            v90 = v86 + 48 * (v93 & v88);
            v91 = *(llvm::Value **)(v90 + 24);
            if (v91 == v151)
              goto LABEL_126;
          }
LABEL_125:
          v90 = v86 + 48 * v87;
        }
LABEL_126:
        if (v90 == v86 + 48 * v87 || (v94 = *(const llvm::SCEV **)(v90 + 40)) == 0)
          v94 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)*a1, (unint64_t)v151);
        TruncateExpr = (void *)llvm::ScalarEvolution::getTruncateExpr(v85, v94, **(llvm::Type ***)&v161[8 * v162 - 8], 0);
        v95 = v151;
        sub_1C63B59E0((uint64_t)v152, (uint64_t *)&TruncateExpr)[1] = v95;
      }
LABEL_76:
      v14 += 8;
      if (v14 == v23)
      {
        v142 = v152[0];
        goto LABEL_222;
      }
    }
  }
  v142 = 0;
  v22 = 0;
LABEL_222:
  MEMORY[0x1CAA32FB4](v142, 8);
  if (v161 != (unsigned __int8 *)v163)
    free(v161);
  return v22;
}

unsigned __int8 *llvm::SCEVExpander::getRelatedExistingExpansion(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::Instruction *a3, llvm::Loop *a4)
{
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  unsigned __int8 *ValueInExprValueMap;
  unsigned __int8 *v16;
  llvm::ScalarEvolution *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  unsigned int v26;
  const llvm::SCEV *SCEVIter;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  unsigned int v34;
  const llvm::SCEV *v35;
  void *v37;
  uint64_t v38;
  _QWORD v39[5];

  v39[4] = *MEMORY[0x1E0C80C00];
  v37 = v39;
  v38 = 0x400000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(a4, (uint64_t)&v37);
  if ((_DWORD)v38)
  {
    v7 = (char *)v37;
    v8 = (char *)v37 + 8 * v38;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)v7 + 40);
      if (v9 == *(_QWORD *)v7 + 40)
        goto LABEL_52;
      v10 = v9 - 24;
      if (!v9)
        v10 = 0;
      v11 = *(unsigned __int8 *)(v10 + 16) - 40;
      if (v11 < 0xFFFFFFF5)
        v10 = 0;
      if (!v9)
        goto LABEL_52;
      if (*(_BYTE *)(v10 + 16) != 30 || v11 < 0xFFFFFFF5)
        goto LABEL_52;
      if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) != 3)
        goto LABEL_52;
      v13 = *(_QWORD *)(v10 - 96);
      if (!v13 || *(_BYTE *)(v13 + 16) != 81)
        goto LABEL_52;
      ValueInExprValueMap = *(unsigned __int8 **)(v13 - 64);
      if (!ValueInExprValueMap || ValueInExprValueMap[16] < 0x1Cu)
        goto LABEL_52;
      v16 = *(unsigned __int8 **)(v13 - 32);
      if (!v16 || v16[16] < 0x1Cu)
        goto LABEL_52;
      v18 = *this;
      v19 = *((_QWORD *)*this + 13);
      v20 = *((_DWORD *)*this + 30);
      if (!v20)
        goto LABEL_33;
      v21 = v20 - 1;
      v22 = ((ValueInExprValueMap >> 4) ^ (ValueInExprValueMap >> 9)) & (v20 - 1);
      v23 = v19 + 48 * v22;
      v24 = *(unsigned __int8 **)(v23 + 24);
      if (v24 != ValueInExprValueMap)
        break;
LABEL_34:
      if (v23 == v19 + 48 * v20 || (SCEVIter = *(const llvm::SCEV **)(v23 + 40)) == 0)
      {
        SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(v18, (unint64_t)ValueInExprValueMap);
        v18 = *this;
      }
      if (SCEVIter == a2)
      {
        if (llvm::DominatorTree::dominates(*((llvm::DominatorTree **)v18 + 4), (const llvm::Value *)ValueInExprValueMap, a3))
        {
          goto LABEL_54;
        }
        v18 = *this;
      }
      v28 = *((_QWORD *)v18 + 13);
      v29 = *((_DWORD *)v18 + 30);
      if (!v29)
        goto LABEL_46;
      v30 = ((v16 >> 4) ^ (v16 >> 9)) & (v29 - 1);
      v31 = v28 + 48 * v30;
      v32 = *(unsigned __int8 **)(v31 + 24);
      if (v32 != v16)
      {
        v33 = 1;
        while (v32 != (unsigned __int8 *)-4096)
        {
          v34 = v30 + v33++;
          v30 = v34 & (v29 - 1);
          v31 = v28 + 48 * v30;
          v32 = *(unsigned __int8 **)(v31 + 24);
          if (v32 == v16)
            goto LABEL_47;
        }
LABEL_46:
        v31 = v28 + 48 * v29;
      }
LABEL_47:
      if (v31 == v28 + 48 * v29 || (v35 = *(const llvm::SCEV **)(v31 + 40)) == 0)
        v35 = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(v18, (unint64_t)v16);
      if (v35 == a2)
      {
        ValueInExprValueMap = v16;
        if (llvm::DominatorTree::dominates(*((llvm::DominatorTree **)*this + 4), (const llvm::Value *)v16, a3))
          goto LABEL_54;
      }
LABEL_52:
      v7 += 8;
      if (v7 == v8)
        goto LABEL_53;
    }
    v25 = 1;
    while (v24 != (unsigned __int8 *)-4096)
    {
      v26 = v22 + v25++;
      v22 = v26 & v21;
      v23 = v19 + 48 * (v26 & v21);
      v24 = *(unsigned __int8 **)(v23 + 24);
      if (v24 == ValueInExprValueMap)
        goto LABEL_34;
    }
LABEL_33:
    v23 = v19 + 48 * v20;
    goto LABEL_34;
  }
LABEL_53:
  ValueInExprValueMap = (unsigned __int8 *)llvm::SCEVExpander::FindValueInExprValueMap(this, a2, a3);
LABEL_54:
  if (v37 != v39)
    free(v37);
  return ValueInExprValueMap;
}

uint64_t llvm::SCEVExpander::isHighCostExpansionHelper(llvm::ScalarEvolution **this, uint64_t a2, llvm::Loop *a3, llvm::Instruction *a4, uint64_t a5, unsigned int a6, int a7, llvm::SmallPtrSetImplBase *a8, uint64_t a9)
{
  int v9;
  BOOL v10;
  BOOL v11;
  const llvm::SCEV *v16;
  char v17;

  v9 = *(_DWORD *)(a5 + 8);
  v10 = v9 == 0;
  v11 = v9 > 0;
  if (v10)
    v11 = *(_QWORD *)a5 > (uint64_t)a6;
  if (v11)
    return 1;
  v16 = *(const llvm::SCEV **)(a2 + 8);
  if (!*((_WORD *)v16 + 12) || (sub_1C4774094(a8, *(_QWORD *)(a2 + 8)), v17))
  {
    if (!llvm::SCEVExpander::getRelatedExistingExpansion(this, v16, a4, a3))
      __asm { BR              X11 }
  }
  return 0;
}

void llvm::SCEVExpander::generateOverflowCheck(llvm::ScalarEvolution **this, const llvm::Loop **a2, llvm::Instruction *a3)
{
  const llvm::Loop *v5;
  const llvm::Loop *v6;
  llvm::ScalarEvolution *v7;
  const llvm::Loop *v8;
  uint64_t v9;
  int v10;
  void *v11[2];
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[3] = *MEMORY[0x1E0C80C00];
  v11[0] = &v12;
  v11[1] = (void *)0x400000000;
  llvm::ScalarEvolution::getPredicatedBackedgeTakenCount(*this, a2[6], (uint64_t)v11);
  v5 = a2[5];
  if (v5 == (const llvm::Loop *)2)
  {
    v6 = a2[4];
  }
  else
  {
    v7 = *this;
    v8 = a2[4];
    v13 = (char *)v15;
    v14 = 0x300000000;
    v9 = 8 * (_QWORD)v5 - 8;
    if ((unint64_t)v9 >= 0x19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v9 >> 3, 8);
      v10 = v14;
    }
    else
    {
      v10 = 0;
    }
    if (v5 != (const llvm::Loop *)1)
    {
      memcpy(&v13[8 * v10], (char *)v8 + 8, 8 * (_QWORD)v5 - 8);
      v10 = v14;
    }
    LODWORD(v14) = v10 + ((unint64_t)v9 >> 3);
    sub_1C618AB20((uint64_t *)v7, (uint64_t)&v13, (uint64_t **)a2[6]);
    if (v13 != (char *)v15)
      free(v13);
    v6 = a2[4];
  }
  __asm { BR              X11 }
}

BOOL llvm::isSafeToExpand(llvm *this, const llvm::SCEV *a2, llvm::ScalarEvolution *a3)
{
  unsigned int v3;
  uint64_t v4;
  const llvm::SCEV *v6;
  char v7;
  char v8;
  const llvm::SCEV **v9;
  void *v10;
  uint64_t v11;
  _BYTE v12[64];
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v6 = a2;
  v7 = (char)a3;
  v8 = 0;
  v9 = &v6;
  v10 = v12;
  v11 = 0x800000000;
  v13 = v17;
  v14 = v17;
  v15 = 8;
  v16 = 0;
  sub_1C5F70244((uint64_t)&v9, (uint64_t)this);
  v3 = v11;
  while (v3)
  {
    if (*((_BYTE *)v9 + 9))
      break;
    v4 = *((_QWORD *)v10 + --v3);
    LODWORD(v11) = v3;
    if (*(_WORD *)(v4 + 24))
      __asm { BR              X10 }
  }
  if (v14 != v13)
    free(v14);
  if (v10 != v12)
    free(v10);
  return v8 == 0;
}

BOOL llvm::isSafeToExpandAt(llvm *this, const llvm::BasicBlock **a2, const llvm::Instruction *a3, llvm::ScalarEvolution *a4)
{
  _BOOL8 result;
  const llvm::BasicBlock *v8;
  const llvm::BasicBlock *v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  const llvm::BasicBlock **v13;
  const llvm::BasicBlock *v14;
  uint64_t v15;
  const llvm::BasicBlock *v16;
  BOOL v17;

  result = llvm::isSafeToExpand(this, a3, (llvm::ScalarEvolution *)1);
  if (!result)
    return result;
  if (llvm::ScalarEvolution::getBlockDisposition(a3, this, a2[5]) == 2)
    return 1;
  if ((int)llvm::ScalarEvolution::getBlockDisposition(a3, this, a2[5]) < 1)
    return 0;
  v8 = a2[5];
  v9 = (const llvm::BasicBlock *)*((_QWORD *)v8 + 5);
  if (v9 == (const llvm::BasicBlock *)((char *)v8 + 40))
  {
    v10 = 0;
  }
  else
  {
    if (v9)
      v10 = (unsigned __int8 *)v9 - 24;
    else
      v10 = 0;
    if (v10[16] - 29 >= 0xB)
      v10 = 0;
  }
  if (v10 == (unsigned __int8 *)a2)
    return 1;
  result = 0;
  if (this && *((_WORD *)this + 12) == 14)
  {
    v11 = *((_DWORD *)a2 + 5);
    if ((v11 & 0x40000000) != 0)
    {
      v13 = (const llvm::BasicBlock **)*(a2 - 1);
      v12 = v11 & 0x7FFFFFF;
    }
    else
    {
      v12 = v11 & 0x7FFFFFF;
      v13 = &a2[-4 * v12];
    }
    if (v12)
    {
      v14 = (const llvm::BasicBlock *)*((_QWORD *)this - 1);
      v15 = 32 * v12 - 32;
      do
      {
        v16 = *v13;
        v13 += 4;
        result = v16 == v14;
        v17 = v16 == v14 || v15 == 0;
        v15 -= 32;
      }
      while (!v17);
      return result;
    }
    return 0;
  }
  return result;
}

unsigned int *sub_1C5F6DD98@<X0>(unsigned int *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t *v28;

  v2 = result;
  v4 = a2 + 16;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x2000000000;
  v5 = *((_QWORD *)result + 7);
  v6 = result[18];
  v7 = (uint64_t *)(v5 + 8 * v6);
  if (result[16])
  {
    if ((_DWORD)v6)
    {
      v8 = 8 * v6;
      v9 = (uint64_t *)*((_QWORD *)result + 7);
      while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v9;
        v8 -= 8;
        if (!v8)
          goto LABEL_6;
      }
    }
    else
    {
      v9 = (uint64_t *)*((_QWORD *)result + 7);
    }
  }
  else
  {
LABEL_6:
    v9 = (uint64_t *)(v5 + 8 * v6);
  }
  v10 = (uint64_t *)(v5 + 8 * v6);
  while (v9 != v10)
  {
    v11 = *v9;
    result = (unsigned int *)sub_1C477672C((uint64_t)(v2 + 26), *v9);
    v12 = *((_QWORD *)v2 + 14);
    if (v12 == *((_QWORD *)v2 + 13))
      v13 = 31;
    else
      v13 = 30;
    if (result == (unsigned int *)(v12 + 8 * v2[v13]) && v11 && *(unsigned __int8 *)(v11 + 16) >= 0x1Cu)
    {
      v15 = *(unsigned int *)(a2 + 8);
      if (v15 >= *(unsigned int *)(a2 + 12))
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v15 + 1, 8);
        v15 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v15) = v11;
      ++*(_DWORD *)(a2 + 8);
    }
    v16 = v9 + 1;
    v9 = v7;
    if (v16 != v7)
    {
      v9 = v16;
      while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v9 == v7)
        {
          v9 = v7;
          break;
        }
      }
    }
  }
  v17 = *((_QWORD *)v2 + 10);
  v18 = v2[24];
  v19 = (uint64_t *)(v17 + 8 * v18);
  if (v2[22])
  {
    if ((_DWORD)v18)
    {
      v20 = 8 * v18;
      v21 = (uint64_t *)*((_QWORD *)v2 + 10);
      while ((*v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v21;
        v20 -= 8;
        if (!v20)
          goto LABEL_32;
      }
    }
    else
    {
      v21 = (uint64_t *)*((_QWORD *)v2 + 10);
    }
  }
  else
  {
LABEL_32:
    v21 = (uint64_t *)(v17 + 8 * v18);
  }
  v22 = (uint64_t *)(v17 + 8 * v18);
  while (v21 != v22)
  {
    v23 = *v21;
    result = (unsigned int *)sub_1C477672C((uint64_t)(v2 + 26), *v21);
    v24 = *((_QWORD *)v2 + 14);
    if (v24 == *((_QWORD *)v2 + 13))
      v25 = 31;
    else
      v25 = 30;
    if (result == (unsigned int *)(v24 + 8 * v2[v25]) && v23 && *(unsigned __int8 *)(v23 + 16) >= 0x1Cu)
    {
      v27 = *(unsigned int *)(a2 + 8);
      if (v27 >= *(unsigned int *)(a2 + 12))
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v4, v27 + 1, 8);
        v27 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v27) = v23;
      ++*(_DWORD *)(a2 + 8);
    }
    v28 = v21 + 1;
    v21 = v19;
    if (v28 != v19)
    {
      v21 = v28;
      while ((*v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v21 == v19)
        {
          v21 = v19;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C5F6E01C(uint64_t a1, llvm::IRBuilderBase *this, uint64_t a3)
{
  uint64_t v5;

  *(_QWORD *)a1 = this;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)this + 6);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)this + 7);
  llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)this, (unsigned __int8 **)(a1 + 24));
  *(_QWORD *)(a1 + 32) = a3;
  v5 = *(unsigned int *)(a3 + 688);
  if (v5 >= *(_DWORD *)(a3 + 692))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 680, a3 + 696, v5 + 1, 8);
    LODWORD(v5) = *(_DWORD *)(a3 + 688);
  }
  *(_QWORD *)(*(_QWORD *)(a3 + 680) + 8 * v5) = a1;
  ++*(_DWORD *)(a3 + 688);
  return a1;
}

uint64_t *sub_1C5F6E0A4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;

  --*(_DWORD *)(a1[4] + 688);
  v2 = *a1;
  v3 = a1[1];
  if (v3)
  {
    sub_1C4D8AE2C(v2, v3, a1[2]);
  }
  else
  {
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 56) = 0;
  }
  v4 = *a1;
  v6 = (unsigned __int8 **)(a1 + 3);
  v5 = (unsigned __int8 *)a1[3];
  v9 = v5;
  if (v5)
  {
    llvm::MetadataTracking::track((uint64_t)&v9, v5, 2);
    v7 = v9;
  }
  else
  {
    v7 = 0;
  }
  sub_1C4774EF4(v4, 0, (uint64_t)v7);
  if (v9)
    llvm::MetadataTracking::untrack((uint64_t)&v9, v9);
  if (*v6)
    llvm::MetadataTracking::untrack((uint64_t)(a1 + 3), *v6);
  return a1;
}

llvm::APInt *sub_1C5F6E160(uint64_t a1, uint64_t a2)
{
  llvm::APInt *result;
  char v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  result = (llvm::APInt *)sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (!v5)
    return result;
  if (a2 && *(_WORD *)(a2 + 24) == 6)
  {
    v6 = *(_BYTE **)a1;
    v7 = *(_QWORD *)(a2 + 40);
    if (v7 && !*(_WORD *)(v7 + 24))
    {
      v8 = *(_QWORD *)(v7 + 32);
      result = (llvm::APInt *)(v8 + 24);
      v9 = *(_DWORD *)(v8 + 32);
      if (v9 >= 0x41)
      {
        result = (llvm::APInt *)llvm::APInt::countLeadingZerosSlowCase(result);
        if ((_DWORD)result != v9)
          goto LABEL_8;
      }
      else if (*(_QWORD *)result)
      {
        goto LABEL_8;
      }
    }
    *v6 = 1;
    return result;
  }
LABEL_8:
  v10 = *(unsigned int *)(a1 + 16);
  if (v10 >= *(_DWORD *)(a1 + 20))
  {
    result = (llvm::APInt *)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) = a2;
  ++*(_DWORD *)(a1 + 16);
  return result;
}

_QWORD *sub_1C5F6E22C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63B56CC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C5F6E2E4(__n128 *a1, __n128 *a2, uint64_t *a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v15;
  unint64_t v16;
  __n128 *v17;
  unint64_t v18;
  __n128 *v19;
  uint64_t v20;
  __n128 *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  __n128 v31;
  __n128 *v32;
  uint64_t *v33;
  uint64_t *v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  __n128 *v42;

  if (a4 >= 2)
  {
    v9 = (uint64_t *)a1;
    if (a4 == 2)
    {
      sub_1C5F6E580(*a3, a2[-1].n128_i64[0], a2[-1].n128_i64[1]);
      if (v10)
      {
        v11 = *v9;
        *v9 = a2[-1].n128_i64[0];
        a2[-1].n128_u64[0] = v11;
        v12 = v9[1];
        v9[1] = a2[-1].n128_i64[1];
        a2[-1].n128_u64[1] = v12;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != a2)
      {
        v19 = a1 + 1;
        if (&a1[1] != a2)
        {
          v20 = 0;
          v21 = a1;
          do
          {
            v22 = (uint64_t *)v19;
            sub_1C5F6E580(*a3, v21[1].n128_i64[0], v21[1].n128_i64[1]);
            if (v23)
            {
              v24 = *v22;
              v25 = v21[1].n128_i64[1];
              v26 = v20;
              while (1)
              {
                v27 = (char *)v9 + v26;
                v28 = *(uint64_t *)((char *)v9 + v26 + 8);
                *((_QWORD *)v27 + 2) = *(uint64_t *)((char *)v9 + v26);
                *((_QWORD *)v27 + 3) = v28;
                if (!v26)
                  break;
                sub_1C5F6E580(*a3, v24, v25);
                v26 -= 16;
                if ((v29 & 1) == 0)
                {
                  v30 = (uint64_t *)((char *)v9 + v26 + 16);
                  goto LABEL_18;
                }
              }
              v30 = v9;
LABEL_18:
              *v30 = v24;
              v30[1] = v25;
            }
            v19 = (__n128 *)(v22 + 2);
            v20 += 16;
            v21 = (__n128 *)v22;
          }
          while (v22 + 2 != (uint64_t *)a2);
        }
      }
    }
    else
    {
      v15 = (uint64_t *)a5;
      v16 = a4 >> 1;
      v17 = &a1[a4 >> 1];
      v18 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v31 = sub_1C5F6E718(a1, v17, a3, v18, a5, a7);
        v32 = (__n128 *)&v15[2 * v16];
        sub_1C5F6E718((__n128 *)&v9[2 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v32, v31);
        v33 = &v15[2 * a4];
        v34 = (uint64_t *)v32;
        while (v34 != v33)
        {
          sub_1C5F6E580(*a3, *v34, v34[1]);
          if (v35)
            v36 = v34;
          else
            v36 = v15;
          if (v35)
            v34 += 2;
          else
            v15 += 2;
          *v9 = *v36;
          v9[1] = v36[1];
          v9 += 2;
          if (v15 == (uint64_t *)v32)
          {
            if (v34 != v33)
            {
              v37 = 0;
              do
              {
                v38 = &v34[v37];
                v39 = &v9[v37];
                *v39 = v34[v37];
                v39[1] = v34[v37 + 1];
                v37 += 2;
              }
              while (v38 + 2 != v33);
            }
            return;
          }
        }
        if (v15 != (uint64_t *)v32)
        {
          v40 = 0;
          do
          {
            v41 = &v9[v40];
            v42 = (__n128 *)&v15[v40];
            *v41 = v15[v40];
            v41[1] = v15[v40 + 1];
            v40 += 2;
          }
          while (&v42[1] != v32);
        }
      }
      else
      {
        sub_1C5F6E2E4(a1, v17, a3, v18, a5, a6);
        sub_1C5F6E2E4(&v9[2 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), v15, a6);
        sub_1C5F6E94C(v9, &v9[2 * (a4 >> 1)], (uint64_t *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v15, a6);
      }
    }
  }
}

void sub_1C5F6E580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X12 }
}

void sub_1C5F6E5B8()
{
  JUMPOUT(0x1C5F6E5A4);
}

void sub_1C5F6E5C4()
{
  JUMPOUT(0x1C5F6E5BCLL);
}

uint64_t sub_1C5F6E5CC()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_1C5F6E608 + 4 * byte_1C8675DE5[*(unsigned __int16 *)(v0 + 24)]))();
}

void sub_1C5F6E608()
{
  JUMPOUT(0x1C5F6E5F4);
}

void sub_1C5F6E614()
{
  JUMPOUT(0x1C5F6E60CLL);
}

BOOL sub_1C5F6E61C@<W0>(llvm::SCEV *this@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  llvm::SCEV *v9;
  uint64_t v10;
  int isNonConstantNegative;
  char v13;

  if ((v7 == 15) != (*(_BYTE *)(**(_QWORD **)(v8 + 32) + 8) == 15))
    __asm { BR              X10 }
  if (v10 != a2)
    return sub_1C5F63C6C(v10, a2, a3) != v10;
  isNonConstantNegative = llvm::SCEV::isNonConstantNegative(this);
  v13 = llvm::SCEV::isNonConstantNegative(v9);
  return !isNonConstantNegative && (v13 & 1) != 0;
}

void sub_1C5F6E700()
{
  JUMPOUT(0x1C5F6E5E0);
}

void sub_1C5F6E708()
{
  JUMPOUT(0x1C5F6E630);
}

void sub_1C5F6E710()
{
  JUMPOUT(0x1C5F6E6E4);
}

__n128 sub_1C5F6E718(__n128 *a1, __n128 *a2, uint64_t *a3, unint64_t a4, __n128 *a5, __n128 result)
{
  __n128 *v6;
  __n128 *v10;
  __n128 *v11;
  int v12;
  __n128 *v13;
  uint64_t v14;
  __n128 *v15;
  uint64_t *v16;
  __n128 *v17;
  int v18;
  __n128 *v19;
  uint64_t v20;
  int v21;
  __n128 *v22;
  uint64_t *v23;
  int v24;
  __n128 v25;
  __n128 v26;
  unint64_t v27;
  uint64_t v28;

  if (a4)
  {
    v6 = a5;
    v10 = a1;
    if (a4 == 2)
    {
      v11 = a2 - 1;
      sub_1C5F6E580(*a3, a2[-1].n128_i64[0], a2[-1].n128_i64[1]);
      if (v12)
      {
        *v6 = *v11;
        result = *v10;
      }
      else
      {
        *v6 = *v10;
        result = *v11;
      }
      v6[1] = result;
    }
    else if (a4 == 1)
    {
      result = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      v22 = &a1[a4 >> 1];
      sub_1C5F6E2E4(a1, v22, a3, a4 >> 1, a5, a4 >> 1);
      sub_1C5F6E2E4(&v10[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v6[a4 >> 1], a4 - (a4 >> 1));
      v23 = (uint64_t *)&v10[a4 >> 1];
      while (v23 != (uint64_t *)a2)
      {
        sub_1C5F6E580(*a3, *v23, v23[1]);
        if (v24)
        {
          v25 = *(__n128 *)v23;
          v23 += 2;
          result = v25;
        }
        else
        {
          v26 = *v10++;
          result = v26;
        }
        *v6++ = result;
        if (v10 == v22)
        {
          if (v23 != (uint64_t *)a2)
          {
            v27 = 0;
            do
            {
              result = *(__n128 *)&v23[v27 / 8];
              v6[v27 / 0x10] = result;
              v27 += 16;
            }
            while (&v23[v27 / 8] != (uint64_t *)a2);
          }
          return result;
        }
      }
      if (v10 != v22)
      {
        v28 = 0;
        do
        {
          result = v10[v28];
          v6[v28++] = result;
        }
        while (&v10[v28] != v22);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *a5 = *a1;
      v13 = a1 + 1;
      if (&a1[1] != a2)
      {
        v14 = 0;
        v15 = a5;
        do
        {
          v16 = (uint64_t *)v13;
          v17 = v15 + 1;
          sub_1C5F6E580(*a3, v10[1].n128_i64[0], v10[1].n128_i64[1]);
          if (v18)
          {
            result = *v15;
            *v17 = *v15;
            v19 = v6;
            if (v15 != v6)
            {
              v20 = v14;
              while (1)
              {
                v19 = (__n128 *)((char *)v6 + v20);
                sub_1C5F6E580(*a3, *v16, v10[1].n128_i64[1]);
                if (!v21)
                  break;
                result = v19[-1];
                *v19 = result;
                v20 -= 16;
                if (!v20)
                {
                  v19 = v6;
                  break;
                }
              }
            }
            v19->n128_u64[0] = *v16;
            v19->n128_u64[1] = v10[1].n128_u64[1];
          }
          else
          {
            result = *(__n128 *)v16;
            *v17 = *(__n128 *)v16;
          }
          v13 = (__n128 *)(v16 + 2);
          v14 += 16;
          v15 = v17;
          v10 = (__n128 *)v16;
        }
        while (v16 + 2 != (uint64_t *)a2);
      }
    }
  }
  return result;
}

void sub_1C5F6E94C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *i;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  int v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;

  if (a6)
  {
    v9 = a6;
    while (a5 > a8 && v9 > a8)
    {
      if (!a5)
        return;
      v15 = 0;
      v16 = -a5;
      while (1)
      {
        v17 = a1;
        a1 = (uint64_t *)((char *)a1 + v15 * 8);
        sub_1C5F6E580(*a4, *a2, a2[1]);
        if ((v18 & 1) != 0)
          break;
        v15 += 2;
        v19 = __CFADD__(v16++, 1);
        a1 = v17;
        if (v19)
          return;
      }
      v20 = -v16;
      v68 = v9;
      v69 = a4;
      v67 = a3;
      if (-v16 >= v9)
      {
        if (v16 == -1)
        {
          v56 = &v17[v15];
          v57 = v17[v15];
          *v56 = *a2;
          *a2 = v57;
          v58 = v17[v15 + 1];
          v56[1] = a2[1];
          a2[1] = v58;
          return;
        }
        if (v16 > 0)
          v20 = 1 - v16;
        v65 = v20 >> 1;
        v28 = &v17[2 * (v20 >> 1) + v15];
        v29 = a3;
        if (a3 != a2)
        {
          v30 = *a4;
          v31 = ((char *)a3 - (char *)a2) >> 4;
          v29 = a2;
          do
          {
            v32 = &v29[2 * (v31 >> 1)];
            sub_1C5F6E580(v30, *v32, v32[1]);
            if (v33)
              v31 += ~(v31 >> 1);
            else
              v31 >>= 1;
            if (v33)
              v29 = v32 + 2;
          }
          while (v31);
        }
        v66 = ((char *)v29 - (char *)a2) >> 4;
        v27 = v65;
      }
      else
      {
        if (v9 >= 0)
          v21 = v9;
        else
          v21 = v9 + 1;
        v64 = a1;
        v66 = v21 >> 1;
        v22 = &a2[2 * (v21 >> 1)];
        v23 = a2;
        if (a1 != a2)
        {
          v24 = ((char *)a2 - (char *)v17 - v15 * 8) >> 4;
          v23 = a1;
          do
          {
            v25 = v22;
            sub_1C5F6E580(*a4, *v22, v22[1]);
            v22 = v25;
            if (v26)
            {
              v24 >>= 1;
            }
            else
            {
              v23 += 2 * (v24 >> 1) + 2;
              v24 += ~(v24 >> 1);
            }
          }
          while (v24);
        }
        v27 = ((char *)v23 - (char *)v17 - v15 * 8) >> 4;
        v28 = v23;
        v29 = v22;
        a1 = v64;
      }
      a3 = v29;
      a4 = v69;
      if (v28 != a2)
      {
        a3 = v28;
        if (a2 != v29)
        {
          v34 = *v28;
          *v28 = *a2;
          *a2 = v34;
          v35 = v28[1];
          v28[1] = a2[1];
          a2[1] = v35;
          a3 = v28 + 2;
          for (i = a2 + 2; i != v29; i += 2)
          {
            if (a3 == a2)
              a2 = i;
            v37 = *a3;
            *a3 = *i;
            *i = v37;
            v38 = a3[1];
            a3[1] = i[1];
            i[1] = v38;
            a3 += 2;
          }
          if (a3 == a2)
          {
            a3 = a2;
          }
          else
          {
            v39 = a3;
            v40 = a2;
            do
            {
              while (1)
              {
                v41 = *v39;
                *v39 = *a2;
                *a2 = v41;
                v42 = v39[1];
                v39[1] = a2[1];
                a2[1] = v42;
                v39 += 2;
                a2 += 2;
                if (a2 == v29)
                  break;
                if (v39 == v40)
                  v40 = a2;
              }
              a2 = v40;
            }
            while (v39 != v40);
          }
        }
      }
      a5 = -(v27 + v16);
      v43 = v68 - v66;
      if (v27 + v66 >= v68 - (v27 + v66) - v16)
      {
        v44 = v27;
        sub_1C5F6E94C(a3, v29, v67, v69, a5, v68 - v66, a7, a8);
        v29 = v28;
        v43 = v66;
        a5 = v44;
      }
      else
      {
        sub_1C5F6E94C(a1, v28, a3, v69, v27, v66, a7, a8);
        a1 = a3;
        a3 = v67;
      }
      a2 = v29;
      v9 = v43;
      if (!v43)
        return;
    }
    if (a5 <= v9)
    {
      if (a1 != a2)
      {
        v50 = 0;
        do
        {
          *(_OWORD *)&a7[v50] = *(_OWORD *)&a1[v50];
          v50 += 2;
        }
        while (&a1[v50] != a2);
        if (v50 * 8)
        {
          v51 = &a7[v50];
          v52 = (uint64_t)&a7[v50 - 2];
          while (a2 != a3)
          {
            v53 = a7;
            sub_1C5F6E580(*a4, *a2, a2[1]);
            if (v54)
              v55 = a2;
            else
              v55 = a7;
            if (v54)
              a2 += 2;
            else
              v53 = a7 + 2;
            *a1 = *v55;
            a1[1] = v55[1];
            a1 += 2;
            a7 = v53;
            if (v51 == v53)
              return;
          }
          if (v51 != a7)
          {
            v61 = 0;
            do
            {
              v62 = &a1[v61];
              v63 = &a7[v61];
              *v62 = a7[v61];
              v62[1] = a7[v61 + 1];
              v61 += 2;
            }
            while ((uint64_t *)v52 != v63);
          }
        }
      }
    }
    else if (a2 != a3)
    {
      v45 = 0;
      do
      {
        *(_OWORD *)&a7[v45] = *(_OWORD *)&a2[v45];
        v45 += 2;
      }
      while (&a2[v45] != a3);
      if (v45 * 8)
      {
        v46 = &a7[v45];
        v47 = a3 - 1;
        while (a2 != a1)
        {
          sub_1C5F6E580(*a4, *(v46 - 2), *(v46 - 1));
          if (v48)
            v49 = a2;
          else
            v49 = v46;
          if (v48)
            a2 -= 2;
          else
            v46 -= 2;
          *(v47 - 1) = *(v49 - 2);
          *v47 = *(v49 - 1);
          v47 -= 2;
          if (v46 == a7)
            return;
        }
        if (v46 != a7)
        {
          v59 = 0;
          do
          {
            v60 = &v47[v59];
            *(v60 - 1) = v46[v59 - 2];
            *v60 = v46[v59 - 1];
            v59 -= 2;
          }
          while (&v46[v59] != a7);
        }
      }
    }
  }
}

uint64_t sub_1C5F6EE6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C5BA21D8((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C5F6EEF0(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

_QWORD *sub_1C5F6EEF0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C5F6EFA0(a1, v7);
  v9 = 0;
  sub_1C5BA21D8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C5F6EFA0(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63B57E8(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1C5F6F058(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C5F6F150(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_4;
  }
  sub_1C5F6F23C(a1, v7);
  v8 = 0;
  sub_1C5F6F150(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
  result = v8;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096 || result[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = a2[1];
  result[2] = 6;
  result[3] = 0;
  result[4] = 0;
  return result;
}

uint64_t sub_1C5F6F150(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(a1 + 40 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      v16 = 1;
    }
    else
    {
      v14 = 0;
      v15 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v14)
          v18 = 0;
        else
          v18 = v12 == -8192;
        if (v18 && v11 == -8192)
          v14 = v10;
        v20 = v9 + v15++;
        v9 = v20 & v8;
        v10 = (_QWORD *)(a1 + 40 * (v20 & v8));
        v11 = *v10;
        v12 = v10[1];
        v16 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_11;
      }
      v16 = 0;
      if (v14)
        v10 = v14;
    }
  }
  else
  {
    v10 = 0;
    v16 = 0;
  }
LABEL_11:
  *a5 = v10;
  return v16;
}

_OWORD *sub_1C5F6F23C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63B588C((_QWORD *)a1, v4, &v4[5 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result = (_OWORD *)((char *)result + 40);
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

unsigned __int8 *sub_1C5F6F304(unsigned __int8 *result, unsigned __int8 ***a2, unint64_t a3, unsigned __int8 ***a4, uint64_t a5)
{
  unsigned __int8 ***v5;
  unsigned __int8 *v6;
  llvm::Type **v7;
  unsigned __int8 **v8;
  llvm::Type *v9;
  int v10;
  int v11;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 **v19;
  llvm::Type **v20;
  llvm::Type *v21;
  int v22;
  int v23;
  unint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 **v29;
  llvm::Type *v30;
  int v31;
  int v32;
  unint64_t v35;
  unint64_t PrimitiveSizeInBits;
  unsigned __int8 ***v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unint64_t v41;
  unsigned __int8 ***v42;
  unsigned __int8 ***v43;
  unsigned __int8 ***v44;
  unsigned __int8 **v45;
  unsigned __int8 **v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  if (a3 < 2)
    return result;
  v5 = a2;
  v6 = result;
  if (a3 == 2)
  {
    v7 = (llvm::Type **)*(a2 - 1);
    v8 = *(unsigned __int8 ***)result;
    v9 = *v7;
    v10 = *((unsigned __int8 *)*v7 + 8);
    result = **(unsigned __int8 ***)result;
    v11 = result[8];
    if (v10 == 13 && v11 == 13)
    {
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
      result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits(v9);
      if (PrimitiveSizeInBits >= (unint64_t)result)
        return result;
    }
    else if (v10 == 13 || v11 != 13)
    {
      return result;
    }
    *(_QWORD *)v6 = v7;
    *(v5 - 1) = v8;
    return result;
  }
  if ((uint64_t)a3 > 128)
  {
    v38 = a4;
    v39 = a3 >> 1;
    v40 = &result[8 * (a3 >> 1)];
    v41 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_1C5F6F304(result, v40, v41, a4, a5);
      sub_1C5F6F304(&v6[8 * (a3 >> 1)], v5, a3 - (a3 >> 1), v38, a5);
      return sub_1C5F6F920(v6, (unsigned __int8 ***)&v6[8 * (a3 >> 1)], v5, a3 >> 1, a3 - (a3 >> 1), v38, a5);
    }
    sub_1C5F6F630(result, v40, v41, a4);
    v42 = &v38[v39];
    result = sub_1C5F6F630(&v6[8 * (a3 >> 1)], (unsigned __int8 *)v5, a3 - (a3 >> 1), v42);
    v43 = &v38[a3];
    v44 = v42;
    while (1)
    {
      if (v44 == v43)
      {
        if (v38 != v42)
        {
          v54 = 0;
          do
          {
            *(_QWORD *)&v6[v54 * 8] = v38[v54];
            ++v54;
          }
          while (&v38[v54] != v42);
        }
        return result;
      }
      v45 = *v44;
      v46 = *v38;
      v47 = **v44;
      v48 = v47[8];
      result = **v38;
      v49 = result[8];
      if (v48 == 13 && v49 == 13)
      {
        v52 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
        result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v47);
        if (v52 < (unint64_t)result)
          goto LABEL_62;
      }
      else if (v48 != 13 && v49 == 13)
      {
LABEL_62:
        *(_QWORD *)v6 = v45;
        ++v44;
        goto LABEL_63;
      }
      *(_QWORD *)v6 = v46;
      ++v38;
LABEL_63:
      v6 += 8;
      if (v38 == v42)
      {
        if (v44 != v43)
        {
          v53 = 0;
          do
          {
            *(_QWORD *)&v6[v53 * 8] = v44[v53];
            ++v53;
          }
          while (&v44[v53] != v43);
        }
        return result;
      }
    }
  }
  if (result == (unsigned __int8 *)a2)
    return result;
  v15 = result + 8;
  if (result + 8 == (unsigned __int8 *)a2)
    return result;
  v16 = 0;
  v17 = result;
  do
  {
    v18 = v17;
    v17 = v15;
    v19 = *(unsigned __int8 ***)v18;
    v20 = (llvm::Type **)*((_QWORD *)v18 + 1);
    v21 = *v20;
    v22 = *((unsigned __int8 *)*v20 + 8);
    result = **(unsigned __int8 ***)v18;
    v23 = result[8];
    if (v22 == 13 && v23 == 13)
    {
      v26 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
      result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits(v21);
      if (v26 >= (unint64_t)result)
        goto LABEL_43;
    }
    else if (v22 == 13 || v23 != 13)
    {
      goto LABEL_43;
    }
    *((_QWORD *)v18 + 1) = v19;
    v27 = v6;
    if (v18 == v6)
      goto LABEL_42;
    v28 = v16;
    while (1)
    {
      v29 = *(unsigned __int8 ***)&v6[v28 - 8];
      v30 = *v20;
      v31 = *((unsigned __int8 *)*v20 + 8);
      result = *v29;
      v32 = (*v29)[8];
      if (v31 != 13 || v32 != 13)
      {
        if (v31 == 13 || v32 != 13)
        {
          v27 = v18;
          goto LABEL_41;
        }
        goto LABEL_38;
      }
      v35 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
      result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits(v30);
      if (v35 >= (unint64_t)result)
        break;
LABEL_38:
      v18 -= 8;
      *(_QWORD *)&v6[v28] = v29;
      v28 -= 8;
      if (!v28)
      {
        v27 = v6;
        goto LABEL_41;
      }
    }
    v27 = &v6[v28];
LABEL_41:
    v5 = a2;
LABEL_42:
    *(_QWORD *)v27 = v20;
LABEL_43:
    v15 = v17 + 8;
    v16 += 8;
  }
  while (v17 + 8 != (unsigned __int8 *)v5);
  return result;
}

unsigned __int8 *sub_1C5F6F630(unsigned __int8 *result, unsigned __int8 *a2, unint64_t a3, unsigned __int8 ***a4)
{
  unsigned __int8 ***v4;
  unsigned __int8 ***v6;
  unsigned __int8 ***v7;
  unsigned __int8 **v8;
  unsigned __int8 ***v9;
  unsigned __int8 **v10;
  llvm::Type *v11;
  int v12;
  int v13;
  unsigned __int8 ***v15;
  uint64_t v16;
  unsigned __int8 ***v17;
  unsigned __int8 ***v18;
  unsigned __int8 **v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  unint64_t v27;
  unsigned __int8 ***v28;
  uint64_t v29;
  unsigned __int8 **v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  unint64_t v36;
  unint64_t PrimitiveSizeInBits;
  unsigned __int8 ***v38;
  unsigned __int8 ***v39;
  unsigned __int8 **v40;
  unsigned __int8 **v41;
  unsigned __int8 *v42;
  int v43;
  int v44;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (!a3)
    return result;
  v4 = a4;
  v6 = (unsigned __int8 ***)result;
  if (a3 == 1)
  {
LABEL_47:
    *v4 = *v6;
    return result;
  }
  v7 = (unsigned __int8 ***)a2;
  if (a3 == 2)
  {
    v9 = (unsigned __int8 ***)(a2 - 8);
    v8 = (unsigned __int8 **)*((_QWORD *)a2 - 1);
    v10 = *(unsigned __int8 ***)result;
    v11 = (llvm::Type *)*v8;
    v12 = (*v8)[8];
    result = **(unsigned __int8 ***)result;
    v13 = result[8];
    if (v12 == 13 && v13 == 13)
    {
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
      result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits(v11);
      if (PrimitiveSizeInBits < (unint64_t)result)
      {
LABEL_46:
        *v4++ = v8;
        goto LABEL_47;
      }
    }
    else if (v12 != 13 && v13 == 13)
    {
      goto LABEL_46;
    }
    v8 = v10;
    v6 = v9;
    goto LABEL_46;
  }
  if ((uint64_t)a3 > 8)
  {
    v38 = (unsigned __int8 ***)&result[8 * (a3 >> 1)];
    sub_1C5F6F304(result, v38, a3 >> 1, a4, a3 >> 1);
    result = (unsigned __int8 *)sub_1C5F6F304(&v6[a3 >> 1], v7, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
    v39 = &v6[a3 >> 1];
    while (1)
    {
      if (v39 == v7)
      {
        if (v6 != v38)
        {
          v49 = 0;
          do
          {
            v4[v49] = v6[v49];
            ++v49;
          }
          while (&v6[v49] != v38);
        }
        return result;
      }
      v40 = *v39;
      v41 = *v6;
      v42 = **v39;
      v43 = v42[8];
      result = **v6;
      v44 = result[8];
      if (v43 == 13 && v44 == 13)
      {
        v47 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
        result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v42);
        if (v47 < (unint64_t)result)
          goto LABEL_61;
      }
      else if (v43 != 13 && v44 == 13)
      {
LABEL_61:
        *v4 = v40;
        ++v39;
        goto LABEL_62;
      }
      *v4 = v41;
      ++v6;
LABEL_62:
      ++v4;
      if (v6 == v38)
      {
        if (v39 != v7)
        {
          v48 = 0;
          do
          {
            v4[v48] = v39[v48];
            ++v48;
          }
          while (&v39[v48] != v7);
        }
        return result;
      }
    }
  }
  if (result == a2)
    return result;
  v15 = (unsigned __int8 ***)(result + 8);
  *a4 = *(unsigned __int8 ***)result;
  if (result + 8 == a2)
    return result;
  v16 = 0;
  v17 = a4;
  v18 = a4;
  do
  {
    v20 = *v18++;
    v19 = v20;
    v21 = *v15;
    v22 = **v15;
    v23 = v22[8];
    result = *v20;
    v24 = (*v20)[8];
    if (v23 == 13 && v24 == 13)
    {
      v27 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
      result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v22);
      if (v27 >= (unint64_t)result)
        goto LABEL_23;
    }
    else if (v23 == 13 || v24 != 13)
    {
LABEL_23:
      *v18 = v21;
      goto LABEL_42;
    }
    v17[1] = v19;
    v28 = v4;
    if (v17 == v4)
      goto LABEL_41;
    v29 = v16;
    while (1)
    {
      v30 = *(unsigned __int8 ***)((char *)v4 + v29 - 8);
      v31 = **v15;
      v32 = v31[8];
      result = *v30;
      v33 = (*v30)[8];
      if (v32 != 13 || v33 != 13)
      {
        if (v32 == 13 || v33 != 13)
        {
          v28 = v17;
          goto LABEL_40;
        }
        goto LABEL_37;
      }
      v36 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
      result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v31);
      if (v36 >= (unint64_t)result)
        break;
LABEL_37:
      --v17;
      *(unsigned __int8 ***)((char *)v4 + v29) = v30;
      v29 -= 8;
      if (!v29)
      {
        v28 = v4;
        goto LABEL_40;
      }
    }
    v28 = (unsigned __int8 ***)((char *)v4 + v29);
LABEL_40:
    v7 = (unsigned __int8 ***)a2;
LABEL_41:
    *v28 = *v15;
LABEL_42:
    ++v15;
    v16 += 8;
    v17 = v18;
  }
  while (v15 != v7);
  return result;
}

unsigned __int8 *sub_1C5F6F920(unsigned __int8 *result, unsigned __int8 ***a2, unsigned __int8 ***a3, uint64_t a4, uint64_t a5, unsigned __int8 ***a6, uint64_t a7)
{
  unsigned __int8 ***v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  int v14;
  unsigned __int8 **v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 ***v19;
  unsigned __int8 ***v20;
  unint64_t v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 ***v24;
  unsigned __int8 *v25;
  int v26;
  unint64_t v27;
  _BOOL4 v28;
  uint64_t v30;
  unsigned __int8 ***v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unsigned __int8 ***v36;
  unsigned __int8 *v37;
  int v38;
  _BOOL4 v41;
  unint64_t v42;
  unsigned __int8 ***v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 **v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 **v50;
  int64_t v51;
  unsigned __int8 **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 ***v56;
  unsigned __int8 **v57;
  unsigned __int8 **v58;
  unsigned __int8 ***v59;
  unsigned __int8 ***v60;
  unsigned __int8 ***v61;
  BOOL v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 ***v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 ***v69;
  unsigned __int8 ***i;
  unsigned __int8 ***v71;
  unsigned __int8 **v72;
  llvm::Type **v73;
  llvm::Type *v74;
  int v75;
  int v76;
  unint64_t PrimitiveSizeInBits;
  uint64_t v80;
  unsigned __int8 ***v81;
  unsigned __int8 ***v82;
  unsigned __int8 ***v83;
  unsigned __int8 **v84;
  unsigned __int8 **v85;
  unsigned __int8 *v86;
  int v87;
  int v88;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 ***v96;
  unsigned __int8 ***v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;

  v100 = a5;
  if (!a5)
    return result;
  v11 = (unsigned __int8 ***)result;
  do
  {
    if (a4 <= a7 || v100 <= a7)
    {
      if (a4 > v100)
      {
        if (a2 == a3)
          return result;
        v68 = 0;
        do
        {
          a6[v68] = a2[v68];
          ++v68;
        }
        while (&a2[v68] != a3);
        if (!(v68 * 8))
          return result;
        v69 = &a6[v68];
        for (i = a3 - 1; ; --i)
        {
          if (a2 == v11)
          {
            if (v69 != a6)
            {
              v92 = 0;
              do
              {
                i[v92] = v69[v92 - 1];
                --v92;
              }
              while (&v69[v92] != a6);
            }
            return result;
          }
          v71 = a2 - 1;
          v72 = *(a2 - 1);
          v73 = (llvm::Type **)*(v69 - 1);
          v74 = *v73;
          v75 = *((unsigned __int8 *)*v73 + 8);
          result = *v72;
          v76 = (*v72)[8];
          if (v75 == 13 && v76 == 13)
          {
            PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
            result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits(v74);
            if (PrimitiveSizeInBits < (unint64_t)result)
              goto LABEL_106;
          }
          else if (v75 != 13 && v76 == 13)
          {
            goto LABEL_106;
          }
          v72 = (unsigned __int8 **)v73;
          v71 = a2;
          --v69;
LABEL_106:
          *i = v72;
          a2 = v71;
          if (v69 == a6)
            return result;
        }
      }
      if (v11 == a2)
        return result;
      v80 = 0;
      do
      {
        a6[v80] = v11[v80];
        ++v80;
      }
      while (&v11[v80] != a2);
      if (!(v80 * 8))
        return result;
      v81 = &a6[v80];
      v82 = a6;
      while (1)
      {
        if (a2 == a3)
          return (unsigned __int8 *)memmove(v11, v82, (char *)a6 - (char *)v82 + v80 * 8);
        v83 = a6;
        v84 = *a2;
        v85 = *v82;
        v86 = **a2;
        v87 = v86[8];
        result = **v82;
        v88 = result[8];
        if (v87 == 13 && v88 == 13)
        {
          v91 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
          result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v86);
          if (v91 < (unint64_t)result)
            goto LABEL_126;
        }
        else if (v87 != 13 && v88 == 13)
        {
LABEL_126:
          *v11 = v84;
          ++a2;
          goto LABEL_127;
        }
        *v11 = v85;
        ++v82;
LABEL_127:
        a6 = v83;
        ++v11;
        if (v81 == v82)
          return result;
      }
    }
    if (!a4)
      return result;
    v12 = *a2;
    v13 = **a2;
    v14 = v13[8];
    while (1)
    {
      v15 = *v11;
      result = **v11;
      v16 = result[8];
      if (v14 != 13 || v16 != 13)
        break;
      v17 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)result);
      result = (unsigned __int8 *)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v13);
      if (v17 < (unint64_t)result)
        goto LABEL_15;
LABEL_13:
      ++v11;
      if (!--a4)
        return result;
    }
    if (v14 == 13 || v16 != 13)
      goto LABEL_13;
LABEL_15:
    v18 = v100;
    v96 = a3;
    v97 = a6;
    v95 = a7;
    if (a4 < v100)
    {
      if (v100 < 0)
        v18 = v100 + 1;
      v98 = v18 >> 1;
      v19 = &a2[v18 >> 1];
      v20 = a2;
      if (v11 != a2)
      {
        v21 = a2 - v11;
        v22 = **v19;
        v23 = v22[8];
        v20 = v11;
        do
        {
          v24 = &v20[v21 >> 1];
          v25 = **v24;
          v26 = v25[8];
          if (v23 == 13 && v26 == 13)
          {
            v27 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v25);
            v28 = v27 < llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v22);
          }
          else
          {
            v28 = v23 != 13 && v26 == 13;
          }
          if (v28)
          {
            v21 >>= 1;
          }
          else
          {
            v20 = v24 + 1;
            v21 += ~(v21 >> 1);
          }
        }
        while (v21);
      }
      v30 = v20 - v11;
      v31 = a2;
      v32 = v98;
      goto LABEL_58;
    }
    if (a4 == 1)
    {
      *v11 = v12;
      *a2 = v15;
      return result;
    }
    if (a4 >= 0)
      v33 = a4;
    else
      v33 = a4 + 1;
    v93 = v33 >> 1;
    v20 = &v11[v33 >> 1];
    v19 = a3;
    if (a3 != a2)
    {
      v34 = a3 - a2;
      v99 = **v20;
      v35 = v99[8];
      v19 = a2;
      do
      {
        v36 = &v19[v34 >> 1];
        v37 = **v36;
        v38 = v37[8];
        if (v38 == 13 && v35 == 13)
        {
          v42 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v99);
          v41 = v42 < llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v37);
        }
        else
        {
          v41 = v35 == 13 && v38 != 13;
        }
        if (v41)
          v34 += ~(v34 >> 1);
        else
          v34 >>= 1;
        if (v41)
          v19 = v36 + 1;
      }
      while (v34);
    }
    v31 = a2;
    v32 = v19 - a2;
    v30 = v93;
LABEL_58:
    v43 = v19;
    a3 = v96;
    a6 = v97;
    if (v20 != v31)
    {
      v43 = v20;
      if (v31 != v19)
      {
        if (v20 + 1 == v31)
        {
          v94 = v30;
          v50 = *v20;
          v51 = (char *)v19 - (char *)v31;
          memmove(v20, v31, (char *)v19 - (char *)v31);
          v43 = (unsigned __int8 ***)((char *)v20 + v51);
          *v43 = v50;
        }
        else
        {
          if (v31 + 1 != v19)
          {
            v44 = v31 - v20;
            if (v44 == v19 - v31)
            {
              v45 = 0;
              do
              {
                v46 = v20[v45];
                v20[v45] = v31[v45];
                v47 = (uint64_t)&v20[v45 + 1];
                v31[v45] = v46;
                v48 = (uint64_t)&v31[++v45];
              }
              while ((unsigned __int8 ***)v47 != v31 && v48 != (_QWORD)v19);
              v43 = v31;
            }
            else
            {
              v53 = v19 - v31;
              v54 = v31 - v20;
              do
              {
                v55 = v54;
                v54 = v53;
                v53 = v55 % v53;
              }
              while (v53);
              if (v54)
              {
                v56 = &v20[v54];
                do
                {
                  v58 = *--v56;
                  v57 = v58;
                  v59 = &v56[v44];
                  v60 = v56;
                  do
                  {
                    v61 = v60;
                    v60 = v59;
                    *v61 = *v59;
                    v62 = __OFSUB__(v44, v19 - v59);
                    v64 = v44 - (v19 - v59);
                    v63 = (v64 < 0) ^ v62;
                    v59 = &v20[v64];
                    if (v63)
                      v59 = &v60[v44];
                  }
                  while (v59 != v56);
                  *v60 = v57;
                }
                while (v56 != v20);
              }
              v43 = &v20[v19 - v31];
            }
            goto LABEL_85;
          }
          v94 = v30;
          v52 = *(v19 - 1);
          v43 = v20 + 1;
          if (v19 - 1 != v20)
            memmove(v20 + 1, v20, (char *)(v19 - 1) - (char *)v20);
          *v20 = v52;
        }
        v30 = v94;
      }
    }
LABEL_85:
    a4 -= v30;
    v65 = v100 - v32;
    if (v30 + v32 >= a4 + v100 - v32)
    {
      v67 = a4;
      a4 = v30;
      result = (unsigned __int8 *)sub_1C5F6F920(v43, v19, v96, v67, v65, v97, v95);
      v19 = v20;
      a7 = v95;
      v65 = v32;
      a3 = v43;
    }
    else
    {
      v66 = v20;
      a7 = v95;
      result = (unsigned __int8 *)sub_1C5F6F920(v11, v66, v43, v30, v32, v97, v95);
      v11 = v43;
    }
    v100 = v65;
    a2 = v19;
  }
  while (v65);
  return result;
}

_QWORD *sub_1C5F6FF38(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
LABEL_3:
    sub_1C5F6FFEC(a1, v6);
    v8 = 0;
    sub_1C509801C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    a3 = v8;
    goto LABEL_4;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5F6FFEC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5098168(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5F700A4(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return sub_1C5F701C0(a1, a2, a3, a4);
  v5 = *(_QWORD *)a1 + 16 * v4;
  *(_DWORD *)v5 = a2;
  *(_DWORD *)(v5 + 4) = a3;
  *(_QWORD *)(v5 + 8) = a4;
  *(_DWORD *)(a1 + 8) = v4 + 1;
  return a1;
}

unsigned int *sub_1C5F700D0(unsigned int *result, int a2, unsigned int a3, unsigned int a4)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v4 = result;
  v5 = result[2];
  if (v5 >= result[3])
  {
    v15 = a2;
    v16 = a3;
    v17 = a4;
    v8 = v5 + 1;
    v9 = *(_QWORD *)result + 24 * (unint64_t)v5 > (unint64_t)&v15;
    if (*(_QWORD *)result <= (unint64_t)&v15 && v9)
    {
      v14 = (char *)&v15 - *(_QWORD *)result;
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 24);
      v10 = *(_QWORD *)v4;
      v11 = &v14[*(_QWORD *)v4];
    }
    else
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 24);
      v10 = *(_QWORD *)v4;
      v11 = (char *)&v15;
    }
    v12 = v10 + 24 * v4[2];
    v13 = *(_OWORD *)v11;
    *(_QWORD *)(v12 + 16) = *((_QWORD *)v11 + 2);
    *(_OWORD *)v12 = v13;
    v7 = v4[2] + 1;
  }
  else
  {
    v6 = *(_QWORD *)result + 24 * v5;
    *(_DWORD *)v6 = a2;
    *(_QWORD *)(v6 + 8) = a3;
    *(_QWORD *)(v6 + 16) = a4;
    v7 = v5 + 1;
  }
  v4[2] = v7;
  return result;
}

uint64_t sub_1C5F701C0(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t *v9;

  v8 = *(unsigned int *)(a1 + 8);
  if (v8 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  v9 = (unint64_t *)(*(_QWORD *)a1 + 16 * v8);
  *v9 = a2 | (unint64_t)(a3 << 32);
  v9[1] = a4;
  LODWORD(v9) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v9;
  return *(_QWORD *)a1 + 16 * v9 - 16;
}

llvm::APInt *sub_1C5F70244(uint64_t a1, uint64_t a2)
{
  llvm::APInt *result;
  char v5;
  llvm::ScalarEvolution **v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  llvm::APInt *v12;
  llvm::APInt *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  unsigned int v21;
  const llvm::SCEV *v22;
  llvm::ScalarEvolution **v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[4];

  v26[3] = *MEMORY[0x1E0C80C00];
  result = (llvm::APInt *)sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 88), a2);
  if (!v5)
    return result;
  v6 = *(llvm::ScalarEvolution ***)a1;
  v7 = *(unsigned __int16 *)(a2 + 24);
  if (a2 && v7 == 6)
  {
    v8 = *(_QWORD *)(a2 + 40);
    if (!v8 || *(_WORD *)(v8 + 24))
      goto LABEL_23;
    v9 = *(_QWORD *)(v8 + 32);
    result = (llvm::APInt *)(v9 + 24);
    v10 = *(_DWORD *)(v9 + 32);
    if (v10 > 0x40)
    {
      result = (llvm::APInt *)llvm::APInt::countLeadingZerosSlowCase(result);
      if ((_DWORD)result == v10)
      {
LABEL_23:
        *((_BYTE *)v6 + 9) = 1;
        return result;
      }
    }
    else if (!*(_QWORD *)result)
    {
      goto LABEL_23;
    }
    goto LABEL_27;
  }
  if (!a2 || v7 != 7)
    goto LABEL_27;
  v11 = *(_QWORD *)(a2 + 40);
  if (v11 != 2)
  {
    v23 = *(llvm::ScalarEvolution ***)a1;
    v17 = (uint64_t *)*v6;
    v18 = *(_QWORD *)(a2 + 32);
    v24 = v26;
    v25 = 0x300000000;
    v19 = v11;
    v20 = 8 * v11 - 8;
    if (v20 >= 0x19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, (uint64_t)v26, (uint64_t)v20 >> 3, 8);
      v21 = v25;
    }
    else
    {
      v21 = 0;
    }
    if (v19 != 1)
    {
      memcpy((char *)v24 + 8 * v21, (const void *)(v18 + 8), v20);
      v21 = v25;
    }
    LODWORD(v25) = v21 + (v20 >> 3);
    v22 = (const llvm::SCEV *)sub_1C618AB20(v17, (uint64_t)&v24, *(uint64_t ***)(a2 + 48));
    if (v24 != v26)
      free(v24);
    v6 = v23;
    if (*(_QWORD *)(a2 + 40) != 2)
    {
      result = (llvm::APInt *)llvm::ScalarEvolution::getBlockDisposition(*v23, v22, **(const llvm::BasicBlock ***)(*(_QWORD *)(a2 + 48) + 32));
      if ((int)result <= 0)
        goto LABEL_23;
    }
  }
  result = (llvm::APInt *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*(_QWORD *)(a2 + 48));
  if (!result
    || (v13 = (llvm::APInt *)*((_QWORD *)result + 5),
        result = (llvm::APInt *)((char *)result + 40),
        v12 = v13,
        v13 == result))
  {
LABEL_19:
    if (!*((_BYTE *)v6 + 8) || *(_QWORD *)(a2 + 40) != 2)
      goto LABEL_23;
    goto LABEL_27;
  }
  if (v12)
    v14 = (_QWORD *)((char *)v12 - 24);
  else
    v14 = 0;
  if (*((_BYTE *)v14 + 16) != 30)
  {
    switch(*((_BYTE *)v14 + 16))
    {
      case 0x1E:
        __break(1u);
        goto LABEL_42;
      case 0x1F:
        v15 = (*((_DWORD *)v14 + 5) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_42:
        v15 = (*((_DWORD *)v14 + 5) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v15 = *((_DWORD *)v14 + 20) + 1;
        break;
      default:
        goto LABEL_19;
    }
    if (v15 == 1)
      goto LABEL_27;
    goto LABEL_19;
  }
  if ((*((_DWORD *)v14 + 5) & 0x7FFFFFF) == 3)
    goto LABEL_19;
LABEL_27:
  v16 = *(unsigned int *)(a1 + 16);
  if (v16 >= *(_DWORD *)(a1 + 20))
  {
    result = (llvm::APInt *)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(a1 + 16);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v16) = a2;
  ++*(_DWORD *)(a1 + 16);
  return result;
}

uint64_t sub_1C5F704FC()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 4;
  v3 = &v2;
  *(_QWORD *)&v1 = "When performing SCEV expansion only if it is cheap to do, this controls the budget that is considered"
                   " cheap (default = 4)";
  *((_QWORD *)&v1 + 1) = 121;
  sub_1C61798D0((uint64_t)&llvm::SCEVCheapExpansionBudget, "scev-cheap-expansion-budget", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &llvm::SCEVCheapExpansionBudget, &dword_1C475E000);
}

BOOL llvm::SCCPInstVisitor::markBlockExecutable(llvm::SCCPInstVisitor *this, llvm::BasicBlock *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;

  sub_1C4774094((llvm::SCCPInstVisitor *)((char *)this + 40), (uint64_t)a2);
  v5 = v4;
  if (v4)
  {
    v6 = *((unsigned int *)this + 462);
    if (v6 >= *((_DWORD *)this + 463))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 1840, (uint64_t)this + 1856, v6 + 1, 8);
      LODWORD(v6) = *((_DWORD *)this + 462);
    }
    *(_QWORD *)(*((_QWORD *)this + 230) + 8 * v6) = a2;
    ++*((_DWORD *)this + 462);
  }
  return v5 != 0;
}

unsigned int *llvm::SCCPInstVisitor::pushToWorkList(unsigned int *result, _BYTE *a2, uint64_t a3)
{
  _QWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (*a2 != 6)
  {
    v4 = result + 328;
    v5 = result + 330;
    v6 = result[330];
    if (v6 < result[331])
      goto LABEL_3;
    v7 = v6 + 1;
    v8 = (uint64_t)(result + 332);
LABEL_7:
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4, v8, v7, 8);
    LODWORD(v6) = *v5;
    goto LABEL_3;
  }
  v4 = result + 196;
  v5 = result + 198;
  v6 = result[198];
  if (v6 >= result[199])
  {
    v7 = v6 + 1;
    v8 = (uint64_t)(result + 200);
    goto LABEL_7;
  }
LABEL_3:
  *(_QWORD *)(*v4 + 8 * v6) = a3;
  ++*v5;
  return result;
}

unsigned int *llvm::SCCPInstVisitor::pushToWorkListMsg(unsigned int *result, _BYTE *a2, uint64_t a3)
{
  _QWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (*a2 != 6)
  {
    v4 = result + 328;
    v5 = result + 330;
    v6 = result[330];
    if (v6 < result[331])
      goto LABEL_3;
    v7 = v6 + 1;
    v8 = (uint64_t)(result + 332);
LABEL_7:
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4, v8, v7, 8);
    LODWORD(v6) = *v5;
    goto LABEL_3;
  }
  v4 = result + 196;
  v5 = result + 198;
  v6 = result[198];
  if (v6 >= result[199])
  {
    v7 = v6 + 1;
    v8 = (uint64_t)(result + 200);
    goto LABEL_7;
  }
LABEL_3:
  *(_QWORD *)(*v4 + 8 * v6) = a3;
  ++*v5;
  return result;
}

uint64_t llvm::SCCPInstVisitor::markConstant(unsigned int *a1, _BYTE *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;

  v8 = sub_1C4E8C21C((uint64_t)a2, a4, a5);
  if ((_DWORD)v8)
  {
    if (*a2 == 6)
    {
      v9 = a1 + 196;
      v10 = a1 + 198;
      v11 = a1[198];
      if (v11 < a1[199])
      {
LABEL_4:
        *(_QWORD *)(*v9 + 8 * v11) = a3;
        ++*v10;
        return v8;
      }
      v13 = v11 + 1;
      v14 = (uint64_t)(a1 + 200);
    }
    else
    {
      v9 = a1 + 328;
      v10 = a1 + 330;
      v11 = a1[330];
      if (v11 < a1[331])
        goto LABEL_4;
      v13 = v11 + 1;
      v14 = (uint64_t)(a1 + 332);
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v9, v14, v13, 8);
    LODWORD(v11) = *v10;
    goto LABEL_4;
  }
  return v8;
}

BOOL llvm::SCCPInstVisitor::markOverdefined(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_WORD *)a2;
  if (v3 != 6)
  {
    if ((*(_WORD *)a2 & 0xFE) == 4)
    {
      if (*(_DWORD *)(a2 + 32) >= 0x41u)
      {
        v9 = *(_QWORD *)(a2 + 24);
        if (v9)
          MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
      }
      if (*(_DWORD *)(a2 + 16) >= 0x41u)
      {
        v10 = *(_QWORD *)(a2 + 8);
        if (v10)
          MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
      }
    }
    *(_BYTE *)a2 = 6;
    v7 = *(unsigned int *)(a1 + 792);
    if (v7 >= *(_DWORD *)(a1 + 796))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 784, a1 + 800, v7 + 1, 8);
      LODWORD(v7) = *(_DWORD *)(a1 + 792);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 784) + 8 * v7) = a3;
    ++*(_DWORD *)(a1 + 792);
  }
  return v3 != 6;
}

llvm::ValueHandleBase *llvm::SCCPInstVisitor::getConstant(uint64_t a1, uint64_t a2)
{
  const void **v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  llvm::ConstantInt *v13;
  uint64_t v14;
  const llvm::APInt *v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  llvm::LLVMContext *v21;
  size_t v22;
  void *v23;
  unsigned int v24;
  int v25;
  size_t v26;
  const void *v27;
  void *v28;
  int v29;
  void *v30;
  void *__s2;
  unsigned int v32;

  if (*(_WORD *)a2 == 2)
    return *(llvm::ValueHandleBase **)(a2 + 8);
  if ((*(_WORD *)a2 & 0xFE) != 4)
    return 0;
  v5 = (const void **)(a2 + 8);
  v6 = *(unsigned int *)(a2 + 16);
  v32 = v6;
  if (v6 > 0x40)
  {
    v22 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
    v23 = (void *)operator new[]();
    memcpy(v23, *(const void **)(a2 + 8), v22);
    v7 = v23;
    v5 = (const void **)(a2 + 8);
  }
  else
  {
    v7 = (void *)*v5;
  }
  __s2 = v7;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v8 = v32;
  v9 = __s2;
  v32 = 0;
  v10 = *(unsigned int *)(a2 + 32);
  if (v10 > 0x40)
  {
    v30 = __s2;
    v24 = v8;
    v25 = memcmp(*(const void **)(a2 + 24), __s2, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8);
    v8 = v24;
    v9 = v30;
    v11 = v25 == 0;
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 24) == (_QWORD)__s2;
  }
  v12 = v11;
  if (v8 >= 0x41)
  {
    if (v9)
    {
      MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
      if (v32 >= 0x41)
      {
        if (__s2)
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      }
    }
  }
  if (!v12)
    return 0;
  v13 = *(llvm::ConstantInt **)(a1 + 2440);
  v14 = *(unsigned int *)(a2 + 16);
  v32 = v14;
  if (v14 > 0x40)
  {
    v26 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
    __s2 = (void *)operator new[]();
    memcpy(__s2, *v5, v26);
  }
  else
  {
    __s2 = (void *)*v5;
  }
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v16 = v32;
  v17 = __s2;
  v32 = 0;
  v18 = *(unsigned int *)(a2 + 32);
  if (v18 > 0x40)
  {
    v27 = *(const void **)(a2 + 24);
    v28 = __s2;
    v29 = memcmp(v27, __s2, ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8);
    v17 = v28;
    v19 = v29 == 0;
  }
  else
  {
    v19 = *(_QWORD *)(a2 + 24) == (_QWORD)__s2;
  }
  v20 = v19;
  if (v16 >= 0x41)
  {
    if (v17)
    {
      MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
      if (v32 >= 0x41)
      {
        if (__s2)
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      }
    }
  }
  if (v20)
    v21 = (llvm::LLVMContext *)v5;
  else
    v21 = 0;
  return llvm::ConstantInt::get(v13, v21, v15);
}

uint64_t sub_1C5F70B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  _BYTE *v18;
  uint64_t result;
  _QWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v7 = *(_QWORD *)(a1 + 136);
  v5 = a1 + 136;
  v6 = v7;
  v8 = *(_DWORD *)(v5 + 16);
  if (v8)
  {
    v9 = a2;
    v10 = v8 - 1;
    v11 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v12 = (_QWORD *)(v6 + 48 * v11);
    v13 = *v12;
    if (*v12 == a2)
      goto LABEL_11;
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = (_QWORD *)(v6 + 48 * (v17 & v10));
      v13 = *v12;
      if (*v12 == a2)
        goto LABEL_11;
    }
    if (v14)
      v23 = v14;
    else
      v23 = v12;
  }
  else
  {
    v23 = 0;
  }
  v12 = sub_1C5F7C8F0(v5, &v26, v23);
  *v12 = v26;
  *((_WORD *)v12 + 4) = 0;
  v9 = v26;
LABEL_11:
  v18 = v12 + 1;
  result = sub_1C4E8C21C((uint64_t)(v12 + 1), a3, 0);
  if (!(_DWORD)result)
    return result;
  if (*v18 != 6)
  {
    v20 = (_QWORD *)(a1 + 1312);
    v21 = (_DWORD *)(a1 + 1320);
    v22 = *(unsigned int *)(a1 + 1320);
    if (v22 < *(_DWORD *)(a1 + 1324))
      goto LABEL_14;
    v24 = v22 + 1;
    v25 = a1 + 1328;
LABEL_23:
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v20, v25, v24, 8);
    LODWORD(v22) = *v21;
    goto LABEL_14;
  }
  v20 = (_QWORD *)(a1 + 784);
  v21 = (_DWORD *)(a1 + 792);
  v22 = *(unsigned int *)(a1 + 792);
  if (v22 >= *(_DWORD *)(a1 + 796))
  {
    v24 = v22 + 1;
    v25 = a1 + 800;
    goto LABEL_23;
  }
LABEL_14:
  *(_QWORD *)(*v20 + 8 * v22) = v9;
  ++*v21;
  return result;
}

BOOL sub_1C5F70CDC(_BOOL8 result, uint64_t a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  llvm::Type *v17;
  _WORD *v18;
  _QWORD *v19;
  llvm::Constant *v20;

  v2 = (llvm::Constant *)a2;
  v3 = result;
  v20 = (llvm::Constant *)a2;
  if (*(_QWORD *)a2)
    v4 = *(_BYTE *)(*(_QWORD *)a2 + 8) == 16;
  else
    v4 = 0;
  if (!v4)
  {
    v5 = result + 136;
    v6 = *(_QWORD *)(v3 + 136);
    v7 = *(_DWORD *)(v3 + 152);
    if (v7)
    {
      v8 = v7 - 1;
      v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v10 = (_QWORD *)(v6 + 48 * v9);
      v11 = *v10;
      if (*v10 == a2)
        return llvm::SCCPInstVisitor::markOverdefined(v3, (uint64_t)(v10 + 1), (uint64_t)v2);
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (_QWORD *)(v6 + 48 * (v15 & v8));
        v11 = *v10;
        if (*v10 == a2)
          return llvm::SCCPInstVisitor::markOverdefined(v3, (uint64_t)(v10 + 1), (uint64_t)v2);
      }
      if (v12)
        v19 = v12;
      else
        v19 = v10;
    }
    else
    {
      v19 = 0;
    }
    v10 = sub_1C5F7C8F0(v5, (uint64_t *)&v20, v19);
    *v10 = v20;
    *((_WORD *)v10 + 4) = 0;
    v2 = v20;
    return llvm::SCCPInstVisitor::markOverdefined(v3, (uint64_t)(v10 + 1), (uint64_t)v2);
  }
  v16 = *(_DWORD *)(*(_QWORD *)a2 + 12);
  if (v16)
  {
    v17 = 0;
    do
    {
      v18 = sub_1C5F72BD4(v3, v2, v17);
      result = llvm::SCCPInstVisitor::markOverdefined(v3, (uint64_t)v18, (uint64_t)v2);
      v17 = (llvm::Type *)((_DWORD)v17 + 1);
    }
    while (v16 != (_DWORD)v17);
  }
  return result;
}

uint64_t llvm::SCCPInstVisitor::mergeInValue(unsigned int *a1, _BYTE *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;

  v8 = sub_1C4E8EE28((uint64_t)a2, a4, a5);
  if ((_DWORD)v8)
  {
    if (*a2 == 6)
    {
      v9 = a1 + 196;
      v10 = a1 + 198;
      v11 = a1[198];
      if (v11 < a1[199])
      {
LABEL_4:
        *(_QWORD *)(*v9 + 8 * v11) = a3;
        ++*v10;
        return v8;
      }
      v13 = v11 + 1;
      v14 = (uint64_t)(a1 + 200);
    }
    else
    {
      v9 = a1 + 328;
      v10 = a1 + 330;
      v11 = a1[330];
      if (v11 < a1[331])
        goto LABEL_4;
      v13 = v11 + 1;
      v14 = (uint64_t)(a1 + 332);
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v9, v14, v13, 8);
    LODWORD(v11) = *v10;
    goto LABEL_4;
  }
  return v8;
}

uint64_t llvm::SCCPInstVisitor::markEdgeExecutable(llvm::SCCPInstVisitor *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  llvm::BasicBlock **v12;
  llvm::BasicBlock *v13;
  llvm::BasicBlock *v14;
  llvm::BasicBlock **v16;
  int v17;
  BOOL v18;
  unsigned int v20;
  uint64_t result;
  llvm::BasicBlock **v23;
  _QWORD *v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  llvm::BasicBlock *v28;
  llvm::BasicBlock *v29;

  v28 = a2;
  v29 = a3;
  v5 = *((_DWORD *)this + 596);
  if (v5)
  {
    v6 = *((_QWORD *)this + 296);
    v7 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32))
       + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = v5 - 1;
    v11 = v10 & (((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27)));
    v12 = (llvm::BasicBlock **)(v6 + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    if (*v12 == a2 && v14 == a3)
      return 0;
    v16 = 0;
    v17 = 1;
    while (v13 != (llvm::BasicBlock *)-4096 || v14 != (llvm::BasicBlock *)-4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v14 == (llvm::BasicBlock *)-8192;
      if (v18 && v13 == (llvm::BasicBlock *)-8192)
        v16 = v12;
      v20 = v11 + v17++;
      v11 = v20 & v10;
      v12 = (llvm::BasicBlock **)(v6 + 16 * v11);
      v13 = *v12;
      v14 = v12[1];
      if (*v12 == a2 && v14 == a3)
        return 0;
    }
    if (v16)
      v23 = v16;
    else
      v23 = v12;
  }
  else
  {
    v23 = 0;
  }
  v24 = sub_1C5F55848((uint64_t)this + 2368, (uint64_t)&v28, &v28, v23);
  *v24 = v28;
  v24[1] = v29;
  if (llvm::SCCPInstVisitor::markBlockExecutable(this, a3)
    || *((llvm::BasicBlock **)a3 + 5) == (llvm::BasicBlock *)((char *)a3 + 40))
  {
    return 1;
  }
  for (i = *((_QWORD *)a3 + 6); ; i = *(_QWORD *)(v26 + 32))
  {
    v26 = i - 24;
    v27 = i ? i - 24 : 0;
    result = 1;
    if (!i || *(_BYTE *)(v27 + 16) != 83)
      break;
    llvm::SCCPInstVisitor::visitPHINode(this, (llvm::PHINode *)(i - 24));
  }
  return result;
}

_BYTE *llvm::SCCPInstVisitor::visitPHINode(llvm::SCCPInstVisitor *this, llvm::PHINode *a2)
{
  unsigned int v2;
  _BYTE *result;
  unsigned __int8 *v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  unsigned int v32;
  uint64_t *v33;
  char *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  int v38;
  unsigned int v39;
  void *v40;
  size_t v41;
  size_t v42;
  unsigned int v43;
  unint64_t v44;
  size_t v45;
  unint64_t v46;
  size_t v47;
  unsigned int v48;
  const void *v49;
  void *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned __int8 v54[8];
  void *v55;
  unsigned int v56;
  void *v57;
  unsigned int v58;
  __int16 v59;
  void *__src;
  unsigned int v61;
  void *v62;
  unsigned int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 16)
    return (_BYTE *)sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
  result = (_BYTE *)sub_1C5F71F80((uint64_t)this, (uint64_t)a2);
  if (*result != 6)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFFu) >= 0x41)
      return (_BYTE *)sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
    v6 = (unsigned __int8 *)sub_1C5F71F80((uint64_t)this, (uint64_t)a2);
    v7 = (uint64_t)v6;
    v8 = *v6;
    v59 = v8;
    v9 = *v6;
    if ((v9 - 4) < 2)
    {
      v10 = *((unsigned int *)v6 + 4);
      v61 = v10;
      if (v10 > 0x40)
      {
        v41 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
        __src = (void *)operator new[]();
        memcpy(__src, *(const void **)(v7 + 8), v41);
      }
      else
      {
        __src = (void *)*((_QWORD *)v6 + 1);
      }
      v11 = *(unsigned int *)(v7 + 32);
      v63 = v11;
      if (v11 > 0x40)
      {
        v42 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
        v62 = (void *)operator new[]();
        memcpy(v62, *(const void **)(v7 + 24), v42);
      }
      else
      {
        v62 = *(void **)(v7 + 24);
      }
      v8 |= *(unsigned __int8 *)(v7 + 1) << 8;
      v59 = v8;
    }
    else if ((v9 - 2) < 2)
    {
      __src = (void *)*((_QWORD *)v6 + 1);
    }
    v12 = *((_DWORD *)a2 + 5);
    v13 = v12 & 0x7FFFFFF;
    if ((v12 & 0x7FFFFFF) != 0)
    {
      v14 = 0;
      v15 = 0;
      v2 = -1;
      while (1)
      {
        v16 = *((_DWORD *)a2 + 5);
        if ((v16 & 0x40000000) != 0)
          v17 = (char *)*((_QWORD *)a2 - 1);
        else
          v17 = (char *)a2 - 32 * (v16 & 0x7FFFFFF);
        v18 = *((_DWORD *)this + 596);
        if (v18)
        {
          v19 = *(_QWORD *)&v17[32 * *((unsigned int *)a2 + 15) + 8 * v14];
          v20 = *((_QWORD *)a2 + 5);
          v21 = *((_QWORD *)this + 296);
          v22 = ((v20 >> 4) ^ (v20 >> 9) | ((unint64_t)((v19 >> 4) ^ (v19 >> 9)) << 32))
              + ~((unint64_t)((v20 >> 4) ^ (v20 >> 9)) << 32);
          v23 = (v22 ^ (v22 >> 22)) + ~((v22 ^ (v22 >> 22)) << 13);
          v24 = (9 * (v23 ^ (v23 >> 8))) ^ ((9 * (v23 ^ (v23 >> 8))) >> 15);
          v25 = v18 - 1;
          v26 = v25 & (((v24 + ~(v24 << 27)) >> 31) ^ (v24 + ~((_DWORD)v24 << 27)));
          v27 = (uint64_t *)(v21 + 16 * v26);
          v29 = *v27;
          v28 = v27[1];
          if (v19 == v29 && v20 == v28)
          {
LABEL_32:
            if ((v16 & 0x40000000) != 0)
              v35 = (char *)*((_QWORD *)a2 - 1);
            else
              v35 = (char *)a2 - 32 * (v16 & 0x7FFFFFF);
            v36 = (unsigned __int8 *)sub_1C5F71F80((uint64_t)this, *(_QWORD *)&v35[32 * v14]);
            v37 = v36;
            *(_WORD *)v54 = *v36;
            v38 = *v36;
            if ((v38 - 4) < 2)
            {
              v56 = *((_DWORD *)v36 + 4);
              if (v56 > 0x40)
              {
                v55 = (void *)operator new[]();
                memcpy(v55, *((const void **)v37 + 1), (((unint64_t)v56 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v55 = (void *)*((_QWORD *)v36 + 1);
              }
              v58 = *((_DWORD *)v37 + 8);
              if (v58 > 0x40)
              {
                v57 = (void *)operator new[]();
                memcpy(v57, *((const void **)v37 + 3), (((unint64_t)v58 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v57 = (void *)*((_QWORD *)v37 + 3);
              }
              v54[1] = v37[1];
            }
            else if ((v38 - 2) < 2)
            {
              v55 = (void *)*((_QWORD *)v36 + 1);
            }
            sub_1C4E8EE28((uint64_t)&v59, v54, 0x100000000);
            v7 = v59;
            if ((v54[0] & 0xFE) == 4)
            {
              if (v58 >= 0x41 && v57)
                MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
              if (v56 >= 0x41 && v55)
                MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
            }
            ++v15;
            if ((_DWORD)v7 == 6)
            {
LABEL_55:
              LOBYTE(v8) = v59;
              goto LABEL_57;
            }
          }
          else
          {
            v31 = 1;
            while (v29 != -4096 || v28 != -4096)
            {
              v32 = v26 + v31++;
              v26 = v32 & v25;
              v33 = (uint64_t *)(v21 + 16 * v26);
              v29 = *v33;
              v28 = v33[1];
              if (v19 == v29 && v20 == v28)
                goto LABEL_32;
            }
          }
        }
        if (++v14 == v13)
          goto LABEL_55;
      }
    }
    v15 = 0;
LABEL_57:
    LOWORD(v49) = v8;
    if (v8 - 4 < 2)
    {
      LODWORD(v13) = v61;
      v51 = v61;
      if (v61 > 0x40)
      {
        v43 = v15;
        v44 = (((unint64_t)v61 + 63) >> 3) & 0x3FFFFFF8;
        v40 = (void *)operator new[]();
        v45 = v44;
        v15 = v43;
        memcpy(v40, __src, v45);
      }
      else
      {
        v40 = __src;
      }
      v50 = v40;
      v2 = v63;
      v53 = v63;
      if (v63 > 0x40)
      {
        v48 = v15;
        v46 = (((unint64_t)v63 + 63) >> 3) & 0x3FFFFFF8;
        v7 = operator new[]();
        v47 = v46;
        v15 = v48;
        memcpy((void *)v7, v62, v47);
      }
      else
      {
        v7 = (uint64_t)v62;
      }
      v52 = v7;
      v8 = v8 | (HIBYTE(v59) << 8);
      LOWORD(v49) = v8;
    }
    else if (v8 - 2 < 2)
    {
      v50 = __src;
    }
    sub_1C5F721C0((uint64_t)this, (uint64_t)a2, &v49, ((unint64_t)(v15 + 1) << 32) | 0x100);
    if ((v8 & 0xFE) == 4)
    {
      if (v2 >= 0x41 && v7)
      {
        MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
        LODWORD(v13) = v51;
      }
      if (v13 >= 0x41 && v50)
        MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
    }
    result = (_BYTE *)sub_1C5F71F80((uint64_t)this, (uint64_t)a2);
    v39 = result[1];
    if (v15 > v39)
      LOBYTE(v39) = v15;
    result[1] = v39;
    if ((v59 & 0xFE) == 4)
    {
      if (v63 >= 0x41)
      {
        result = v62;
        if (v62)
          result = (_BYTE *)MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
      }
      if (v61 >= 0x41)
      {
        result = __src;
        if (__src)
          return (_BYTE *)MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

void llvm::SCCPInstVisitor::getFeasibleSuccessors(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  const void **v11;
  const void **v12;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t *v19;
  const void **v20;
  const void **v21;
  int v22;
  uint64_t v23;
  llvm::ValueHandleBase *v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  uint64_t v29;
  void *v30;
  unsigned int v31;
  void *v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  int v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::ValueHandleBase *Constant;
  unsigned int v46;
  BOOL v47;
  char v48;
  _BYTE *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  llvm::ValueHandleBase *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  size_t v63;
  size_t v64;
  size_t v65;
  size_t v66;
  uint64_t v67;
  unint64_t v68;
  size_t v69;
  void *__s2;
  void *v71;
  unsigned int v72;
  void *v73;
  unsigned int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 != 30)
    __asm { BR              X12 }
  if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
    v7 = 2;
  else
    v7 = 1;
  v8 = a3[1];
  if (v8 != v7)
  {
    v9 = v7;
    if (v8 <= v7)
    {
      if (a3[2] < (unint64_t)v7)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a3, a3 + 3, v7, 1);
        v8 = a3[1];
      }
      if (v9 != v8)
        bzero((void *)(*a3 + v8), v9 - v8);
    }
    a3[1] = v9;
    v6 = *(unsigned __int8 *)(a2 + 16);
  }
  v10 = 0;
  switch(v6)
  {
    case 30:
      if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 1)
        goto LABEL_24;
      v11 = (const void **)sub_1C5F71F80(a1, *(_QWORD *)(a2 - 96));
      v12 = v11;
      v13 = *(unsigned __int8 *)v11;
      LOWORD(__s2) = *(unsigned __int8 *)v11;
      if ((v13 - 4) < 2)
      {
        v43 = *((unsigned int *)v11 + 4);
        v72 = v43;
        if (v43 > 0x40)
        {
          v63 = ((unint64_t)(v43 + 63) >> 3) & 0x3FFFFFF8;
          v71 = (void *)operator new[]();
          memcpy(v71, v12[1], v63);
        }
        else
        {
          v71 = (void *)v11[1];
        }
        v44 = *((unsigned int *)v12 + 8);
        v74 = v44;
        if (v44 > 0x40)
        {
          v64 = ((unint64_t)(v44 + 63) >> 3) & 0x3FFFFFF8;
          v73 = (void *)operator new[]();
          memcpy(v73, v12[3], v64);
        }
        else
        {
          v73 = (void *)v12[3];
        }
        LOWORD(__s2) = v13 | (*((unsigned __int8 *)v12 + 1) << 8);
      }
      else if ((v13 - 2) < 2)
      {
        v71 = (void *)v11[1];
      }
      Constant = llvm::SCCPInstVisitor::getConstant(a1, (uint64_t)&__s2);
      if (Constant && *((_BYTE *)Constant + 16) == 16)
      {
        v46 = *((_DWORD *)Constant + 8);
        if (v46 > 0x40)
          v47 = llvm::APInt::countLeadingZerosSlowCase((llvm::ValueHandleBase *)((char *)Constant + 24)) == v46;
        else
          v47 = *((_QWORD *)Constant + 3) == 0;
        v50 = v47;
        v49 = (_BYTE *)(*a3 + v50);
      }
      else
      {
        v48 = (char)__s2;
        if ((__s2 & 0xFE) == 0)
          goto LABEL_108;
        v49 = (_BYTE *)*a3;
        *(_BYTE *)(*a3 + 1) = 1;
      }
      *v49 = 1;
      goto LABEL_107;
    case 33:
      v10 = 2;
      goto LABEL_27;
    case 34:
      goto LABEL_27;
    case 36:
      v10 = *(_WORD *)(a2 + 18) & 1;
      goto LABEL_27;
    case 37:
      v10 = 1;
      goto LABEL_27;
    case 38:
      v10 = (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) - 1;
LABEL_27:
      v16 = v10;
      goto LABEL_28;
    default:
      if (v6 == 31)
        v14 = a2;
      else
        v14 = 0;
      if (v6 == 31)
      {
        v15 = *(_DWORD *)(a2 + 20);
        if ((v15 & 0x7FFFFFE) == 2)
        {
LABEL_24:
          *(_BYTE *)*a3 = 1;
          return;
        }
        if ((v15 & 0x40000000) != 0)
          v19 = *(uint64_t **)(a2 - 8);
        else
          v19 = (uint64_t *)(a2 - 32 * (v15 & 0x7FFFFFF));
        v23 = sub_1C5F71F80(a1, *v19);
        v24 = llvm::SCCPInstVisitor::getConstant(a1, v23);
        if (v24 && *((_BYTE *)v24 + 16) == 16)
        {
          sub_1C4E5D490(a2, (uint64_t)v24);
          v26 = (v25 + 1);
          if (v25 == -2)
            v26 = 0;
          *(_BYTE *)(*a3 + v26) = 1;
          return;
        }
        v27 = *(_WORD *)v23;
        v28 = *(_WORD *)v23;
        if (v28 == 4)
          goto LABEL_57;
        if (v28 == 5)
        {
          v29 = *(unsigned int *)(v23 + 16);
          LODWORD(v71) = v29;
          if (v29 > 0x40)
          {
            v67 = v14;
            v68 = ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8;
            v30 = (void *)operator new[]();
            v69 = v68;
            v14 = v67;
            memcpy(v30, *(const void **)(v23 + 8), v69);
          }
          else
          {
            v30 = *(void **)(v23 + 8);
          }
          __s2 = v30;
          llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          v31 = v71;
          v32 = __s2;
          LODWORD(v71) = 0;
          v33 = *(unsigned int *)(v23 + 32);
          if (v33 > 0x40)
            v34 = memcmp(*(const void **)(v23 + 24), __s2, ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8) == 0;
          else
            v34 = *(_QWORD *)(v23 + 24) == (_QWORD)__s2;
          v35 = v34;
          if (v31 >= 0x41)
          {
            if (v32)
            {
              MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
              if (v71 >= 0x41)
              {
                if (__s2)
                  MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
              }
            }
          }
          if ((v35 & 1) != 0)
          {
LABEL_57:
            v36 = (*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF;
            v37 = (_BYTE *)*a3;
            v38 = (v36 - 1);
            if (v36 != 1)
            {
              v39 = 0;
              do
              {
                v40 = *(_DWORD *)(a2 + 20);
                if ((v40 & 0x40000000) != 0)
                  v41 = *(_QWORD *)(a2 - 8);
                else
                  v41 = v14 - 32 * (v40 & 0x7FFFFFF);
                if (llvm::ConstantRange::contains((llvm::ConstantRange *)(v23 + 8), (const llvm::APInt *)(*(_QWORD *)(v41 + 32 * (2 * v39 + 2)) + 24)))
                {
                  if (v39 == 4294967294)
                    v42 = 0;
                  else
                    v42 = v39 + 1;
                  ++v39;
                  v37[v42] = 1;
                }
                else
                {
                  ++v39;
                }
              }
              while (v39 != v38);
              v37 = (_BYTE *)*a3;
            }
            *v37 = 1;
            return;
          }
          v27 = *(_WORD *)v23;
        }
        if ((v27 & 0xFE) != 0)
        {
          v61 = *(unsigned __int8 *)(a2 + 16);
          if (v61 != 30)
            __asm { BR              X11 }
          if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
            v62 = 2;
          else
            v62 = 1;
          sub_1C49B9F28(a3, v62, 1);
        }
      }
      else if (v6 == 32)
      {
        v17 = *(_DWORD *)(a2 + 20);
        if ((v17 & 0x40000000) != 0)
          v18 = *(uint64_t **)(a2 - 8);
        else
          v18 = (uint64_t *)(a2 - 32 * (v17 & 0x7FFFFFF));
        v20 = (const void **)sub_1C5F71F80(a1, *v18);
        v21 = v20;
        v22 = *(unsigned __int8 *)v20;
        LOWORD(__s2) = *(unsigned __int8 *)v20;
        if ((v22 - 4) < 2)
        {
          v51 = *((unsigned int *)v20 + 4);
          v72 = v51;
          if (v51 > 0x40)
          {
            v65 = ((unint64_t)(v51 + 63) >> 3) & 0x3FFFFFF8;
            v71 = (void *)operator new[]();
            memcpy(v71, v21[1], v65);
          }
          else
          {
            v71 = (void *)v20[1];
          }
          v52 = *((unsigned int *)v21 + 8);
          v74 = v52;
          if (v52 > 0x40)
          {
            v66 = ((unint64_t)(v52 + 63) >> 3) & 0x3FFFFFF8;
            v73 = (void *)operator new[]();
            memcpy(v73, v21[3], v66);
          }
          else
          {
            v73 = (void *)v21[3];
          }
          LOWORD(__s2) = v22 | (*((unsigned __int8 *)v21 + 1) << 8);
        }
        else if ((v22 - 2) < 2)
        {
          v71 = (void *)v20[1];
        }
        v53 = llvm::SCCPInstVisitor::getConstant(a1, (uint64_t)&__s2);
        if (v53 && *((_BYTE *)v53 + 16) == 4)
        {
          v54 = 0;
          v55 = *(_DWORD *)(a2 + 20);
          v56 = 32;
          while ((v55 & 0x7FFFFFF) - 1 != v54)
          {
            v57 = a2 - 32 * (v55 & 0x7FFFFFF);
            if ((v55 & 0x40000000) != 0)
              v57 = *(_QWORD *)(a2 - 8);
            ++v54;
            v58 = *(_QWORD *)(v57 + v56);
            v56 += 32;
            if (v58 == *((_QWORD *)v53 - 4))
            {
              *(_BYTE *)(*a3 + v54 - 1) = 1;
              break;
            }
          }
        }
        else if ((__s2 & 0xFE) != 0)
        {
          v59 = *(unsigned __int8 *)(a2 + 16);
          if (v59 != 30)
            __asm { BR              X11 }
          if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
            v60 = 2;
          else
            v60 = 1;
          sub_1C49B9F28(a3, v60, 1);
        }
LABEL_107:
        v48 = (char)__s2;
LABEL_108:
        if ((v48 & 0xFE) == 4)
        {
          if (v74 >= 0x41 && v73)
            MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
          if (v72 >= 0x41)
          {
            if (v71)
              MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
          }
        }
      }
      else
      {
        v16 = (*(_DWORD *)(a2 + 80) + 1);
LABEL_28:
        sub_1C49B9F28(a3, v16, 1);
      }
      return;
  }
}

void sub_1C5F71ED8()
{
  JUMPOUT(0x1C5F716FCLL);
}

void sub_1C5F71EE8()
{
  JUMPOUT(0x1C5F716FCLL);
}

void sub_1C5F71EF0()
{
  JUMPOUT(0x1C5F716FCLL);
}

void sub_1C5F71EFC()
{
  JUMPOUT(0x1C5F716FCLL);
}

void sub_1C5F71F04()
{
  JUMPOUT(0x1C5F716FCLL);
}

void sub_1C5F71F10()
{
  JUMPOUT(0x1C5F71BE4);
}

void sub_1C5F71F20()
{
  JUMPOUT(0x1C5F71BE4);
}

void sub_1C5F71F28()
{
  JUMPOUT(0x1C5F71BE4);
}

void sub_1C5F71F34()
{
  JUMPOUT(0x1C5F71BE4);
}

void sub_1C5F71F3C()
{
  JUMPOUT(0x1C5F71BE4);
}

void sub_1C5F71F48()
{
  JUMPOUT(0x1C5F71C80);
}

void sub_1C5F71F58()
{
  JUMPOUT(0x1C5F71C80);
}

void sub_1C5F71F60()
{
  JUMPOUT(0x1C5F71C80);
}

void sub_1C5F71F6C()
{
  JUMPOUT(0x1C5F71C80);
}

void sub_1C5F71F74()
{
  JUMPOUT(0x1C5F71C80);
}

uint64_t sub_1C5F71F80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 136);
  v3 = a1 + 136;
  v4 = v5;
  v20 = a2;
  v21 = 0;
  v6 = *(_DWORD *)(v3 + 16);
  if (v6)
  {
    v7 = v6 - 1;
    v8 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (_QWORD *)(v4 + 48 * v8);
    v10 = *v9;
    if (*v9 == a2)
      return v4 + 48 * v8 + 8;
    v11 = 0;
    v12 = 1;
    while (v10 != -4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (_QWORD *)(v4 + 48 * v8);
      v10 = *v9;
      if (*v9 == a2)
        return v4 + 48 * v8 + 8;
    }
    if (v11)
      v17 = v11;
    else
      v17 = v9;
  }
  else
  {
    v17 = 0;
  }
  v18 = sub_1C5F7C8F0(v3, &v20, v17);
  *v18 = v20;
  *((_WORD *)v18 + 4) = v21;
  v15 = v18 + 1;
  v19 = HIBYTE(v21);
  if (v21 - 4 < 2)
  {
    *((_DWORD *)v18 + 6) = v23;
    v18[2] = v22;
    *((_DWORD *)v18 + 10) = v25;
    v18[4] = v24;
    v23 = 0;
    v25 = 0;
    *((_BYTE *)v18 + 9) = v19;
  }
  else if (v21 - 2 < 2)
  {
    v18[2] = v22;
  }
  if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
    sub_1C4E8C21C((uint64_t)(v18 + 1), a2, 0);
  return (uint64_t)v15;
}

BOOL llvm::SCCPInstVisitor::isEdgeFeasible(llvm::SCCPInstVisitor *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  llvm::BasicBlock **v10;
  llvm::BasicBlock *v11;
  llvm::BasicBlock *v12;
  int v14;
  BOOL v15;
  _BOOL8 result;
  unsigned int v17;
  llvm::BasicBlock **v18;

  v3 = *((_DWORD *)this + 596);
  if (!v3)
    return 0;
  v4 = *((_QWORD *)this + 296);
  v5 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32))
     + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v3 - 1;
  v9 = v8 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
  v10 = (llvm::BasicBlock **)(v4 + 16 * v9);
  v11 = *v10;
  v12 = v10[1];
  if (*v10 == a2 && v12 == a3)
    return 1;
  v14 = 1;
  do
  {
    v15 = v11 == (llvm::BasicBlock *)-4096 && v12 == (llvm::BasicBlock *)-4096;
    result = !v15;
    if (v15)
      break;
    v17 = v9 + v14++;
    v9 = v17 & v8;
    v18 = (llvm::BasicBlock **)(v4 + 16 * v9);
    v11 = *v18;
    v12 = v18[1];
  }
  while (v11 != a2 || v12 != a3);
  return result;
}

void *sub_1C5F721C0(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _BYTE *v20;
  int v21;
  void *result;
  _QWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  size_t v32;
  uint64_t v33;
  unsigned __int8 v34[8];
  void *v35;
  unsigned int v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v33 = a2;
  v9 = *(_QWORD *)(a1 + 136);
  v7 = a1 + 136;
  v8 = v9;
  v10 = *(_DWORD *)(v7 + 16);
  if (v10)
  {
    v11 = a2;
    v12 = v10 - 1;
    v13 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v14 = (_QWORD *)(v8 + 48 * v13);
    v15 = *v14;
    if (*v14 == a2)
      goto LABEL_11;
    v16 = 0;
    v17 = 1;
    while (v15 != -4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == -8192;
      if (v18)
        v16 = v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = (_QWORD *)(v8 + 48 * (v19 & v12));
      v15 = *v14;
      if (*v14 == a2)
        goto LABEL_11;
    }
    if (v16)
      v26 = v16;
    else
      v26 = v14;
  }
  else
  {
    v26 = 0;
  }
  v14 = sub_1C5F7C8F0(v7, &v33, v26);
  *v14 = v33;
  *((_WORD *)v14 + 4) = 0;
  v11 = v33;
LABEL_11:
  v20 = v14 + 1;
  v21 = *(unsigned __int8 *)a3;
  *(_WORD *)v34 = *(unsigned __int8 *)a3;
  if ((v21 - 4) < 2)
  {
    v27 = *((unsigned int *)a3 + 4);
    v36 = v27;
    if (v27 > 0x40)
    {
      v31 = ((unint64_t)(v27 + 63) >> 3) & 0x3FFFFFF8;
      v35 = (void *)operator new[]();
      memcpy(v35, a3[1], v31);
    }
    else
    {
      v35 = (void *)a3[1];
    }
    v28 = *((unsigned int *)a3 + 8);
    v38 = v28;
    if (v28 > 0x40)
    {
      v32 = ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8;
      v37 = (void *)operator new[]();
      memcpy(v37, a3[3], v32);
    }
    else
    {
      v37 = (void *)a3[3];
    }
    *(_WORD *)v34 = v21 | (*((unsigned __int8 *)a3 + 1) << 8);
  }
  else if ((v21 - 2) < 2)
  {
    v35 = (void *)a3[1];
  }
  result = (void *)sub_1C4E8EE28((uint64_t)v20, v34, a4);
  if ((_DWORD)result)
  {
    if (*v20 == 6)
    {
      v23 = (_QWORD *)(a1 + 784);
      v24 = (_DWORD *)(a1 + 792);
      v25 = *(unsigned int *)(a1 + 792);
      if (v25 < *(_DWORD *)(a1 + 796))
      {
LABEL_17:
        *(_QWORD *)(*v23 + 8 * v25) = v11;
        ++*v24;
        goto LABEL_18;
      }
      v29 = v25 + 1;
      v30 = a1 + 800;
    }
    else
    {
      v23 = (_QWORD *)(a1 + 1312);
      v24 = (_DWORD *)(a1 + 1320);
      v25 = *(unsigned int *)(a1 + 1320);
      if (v25 < *(_DWORD *)(a1 + 1324))
        goto LABEL_17;
      v29 = v25 + 1;
      v30 = a1 + 1328;
    }
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v23, v30, v29, 8);
    LODWORD(v25) = *v24;
    goto LABEL_17;
  }
LABEL_18:
  if ((v34[0] & 0xFE) == 4)
  {
    if (v38 >= 0x41)
    {
      result = v37;
      if (v37)
        result = (void *)MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
    }
    if (v36 >= 0x41)
    {
      result = v35;
      if (v35)
        return (void *)MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
    }
  }
  return result;
}

char *llvm::SCCPInstVisitor::visitReturnInst(char *this, llvm::ReturnInst *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::Constant *v5;
  _BYTE *v6;
  const void **v7;
  const void **v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  llvm::Type *v14;
  llvm::Type *i;
  _BYTE *v16;
  _WORD *v17;
  _WORD *v18;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  size_t v30;
  size_t v31;
  __int128 v32;
  __int16 v33;
  char *v34;
  unsigned int v35;
  char *v36;
  unsigned int v37;
  __int16 v38;
  char *v39;
  unsigned int v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  if (!(_DWORD)v2)
    return this;
  v3 = (uint64_t)this;
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 56);
  v5 = (llvm::Constant *)*((_QWORD *)a2 - 4 * v2);
  if (*((_QWORD *)this + 29) != *((_QWORD *)this + 30) && *(_BYTE *)(*(_QWORD *)v5 + 8) != 16)
  {
    this = (char *)sub_1C5F729F8((uint64_t)(this + 208), *(_QWORD *)(*((_QWORD *)a2 + 5) + 56));
    if (*(char **)(v3 + 240) != this)
    {
      v6 = this + 8;
      v7 = (const void **)sub_1C5F71F80(v3, (uint64_t)v5);
      v8 = v7;
      v9 = *(unsigned __int8 *)v7;
      v38 = *(unsigned __int8 *)v7;
      if ((v9 - 4) < 2)
      {
        v23 = *((unsigned int *)v7 + 4);
        v40 = v23;
        if (v23 > 0x40)
        {
          v30 = ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8;
          v39 = (char *)operator new[]();
          memcpy(v39, v8[1], v30);
        }
        else
        {
          v39 = (char *)v7[1];
        }
        v24 = *((unsigned int *)v8 + 8);
        v42 = v24;
        if (v24 > 0x40)
        {
          v31 = ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8;
          v41 = (char *)operator new[]();
          memcpy(v41, v8[3], v31);
        }
        else
        {
          v41 = (char *)v8[3];
        }
        v38 = v9 | (*((unsigned __int8 *)v8 + 1) << 8);
      }
      else if ((v9 - 2) < 2)
      {
        v39 = (char *)v7[1];
      }
      this = (char *)sub_1C4E8EE28((uint64_t)v6, (unsigned __int8 *)&v38, 0x100000000);
      if (!(_DWORD)this)
        goto LABEL_57;
      if (*v6 == 6)
      {
        v25 = (_QWORD *)(v3 + 784);
        v26 = (_DWORD *)(v3 + 792);
        v27 = *(unsigned int *)(v3 + 792);
        if (v27 < *(_DWORD *)(v3 + 796))
        {
LABEL_56:
          *(_QWORD *)(*v25 + 8 * v27) = v4;
          ++*v26;
LABEL_57:
          if ((v38 & 0xFE) == 4)
          {
            if (v42 >= 0x41)
            {
              this = v41;
              if (v41)
                this = (char *)MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
            }
            if (v40 >= 0x41)
            {
              this = v39;
              if (v39)
                return (char *)MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
            }
          }
          return this;
        }
        v28 = v27 + 1;
        v29 = v3 + 800;
      }
      else
      {
        v25 = (_QWORD *)(v3 + 1312);
        v26 = (_DWORD *)(v3 + 1320);
        v27 = *(unsigned int *)(v3 + 1320);
        if (v27 < *(_DWORD *)(v3 + 1324))
          goto LABEL_56;
        v28 = v27 + 1;
        v29 = v3 + 1328;
      }
      this = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v25, v29, v28, 8);
      LODWORD(v27) = *v26;
      goto LABEL_56;
    }
  }
  if (*(_QWORD *)(v3 + 280) != *(_QWORD *)(v3 + 288))
  {
    v10 = *(_QWORD *)v5;
    if (*(_QWORD *)v5 && *(_BYTE *)(*(_QWORD *)v5 + 8) == 16)
    {
      this = (char *)sub_1C477672C(v3 + 304, v4);
      v12 = *(_QWORD *)(v3 + 312);
      v13 = 320;
      if (v12 == *(_QWORD *)(v3 + 304))
        v13 = 324;
      if (this != (char *)(v12 + 8 * *(unsigned int *)(v3 + v13)))
      {
        v14 = (llvm::Type *)*(unsigned int *)(v10 + 12);
        if ((_DWORD)v14)
        {
          for (i = 0; v14 != i; i = (llvm::Type *)((char *)i + 1))
          {
            *(_QWORD *)&v32 = v4;
            *((_QWORD *)&v32 + 1) = i;
            v16 = (_BYTE *)sub_1C5F72A68(v3 + 256, &v32);
            v17 = sub_1C5F72BD4(v3, v5, i);
            v18 = v17;
            v33 = *(unsigned __int8 *)v17;
            v19 = *(unsigned __int8 *)v17;
            if ((v19 - 4) < 2)
            {
              v35 = *((_DWORD *)v17 + 4);
              if (v35 > 0x40)
              {
                v34 = (char *)operator new[]();
                memcpy(v34, *((const void **)v18 + 1), (((unint64_t)v35 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v34 = (char *)*((_QWORD *)v17 + 1);
              }
              v37 = *((_DWORD *)v18 + 8);
              if (v37 > 0x40)
              {
                v36 = (char *)operator new[]();
                memcpy(v36, *((const void **)v18 + 3), (((unint64_t)v37 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v36 = (char *)*((_QWORD *)v18 + 3);
              }
              HIBYTE(v33) = *((_BYTE *)v18 + 1);
            }
            else if ((v19 - 2) < 2)
            {
              v34 = (char *)*((_QWORD *)v17 + 1);
            }
            this = (char *)sub_1C4E8EE28((uint64_t)v16, (unsigned __int8 *)&v33, 0x100000000);
            if (!(_DWORD)this)
              goto LABEL_32;
            if (*v16 == 6)
            {
              v20 = *(unsigned int *)(v3 + 792);
              if (v20 >= *(unsigned int *)(v3 + 796))
              {
                this = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 784, v3 + 800, v20 + 1, 8);
                v22 = (_DWORD *)(v3 + 792);
                v21 = (_QWORD *)(v3 + 784);
LABEL_40:
                v20 = *v22;
                goto LABEL_31;
              }
              v21 = (_QWORD *)(v3 + 784);
              v22 = (_DWORD *)(v3 + 792);
            }
            else
            {
              v20 = *(unsigned int *)(v3 + 1320);
              if (v20 >= *(unsigned int *)(v3 + 1324))
              {
                v21 = (_QWORD *)(v3 + 1312);
                this = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 1312, v3 + 1328, v20 + 1, 8);
                v22 = (_DWORD *)(v3 + 1320);
                goto LABEL_40;
              }
              v22 = (_DWORD *)(v3 + 1320);
              v21 = (_QWORD *)(v3 + 1312);
            }
LABEL_31:
            *(_QWORD *)(*v21 + 8 * v20) = v4;
            ++*v22;
LABEL_32:
            if ((v33 & 0xFE) == 4)
            {
              if (v37 >= 0x41)
              {
                this = v36;
                if (v36)
                  this = (char *)MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
              }
              if (v35 >= 0x41)
              {
                this = v34;
                if (v34)
                  this = (char *)MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t sub_1C5F729F8(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v5;

  v5 = 0;
  if (sub_1C5F7F1C4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
    v3 = v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  else
    v3 = 1;
  if (v3)
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 48 * *(unsigned int *)(v5 + 8);
}

uint64_t sub_1C5F72A68(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v11;
  char v12;
  __int128 v13;
  _DWORD v14[4];
  __int128 v15;
  __int16 v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v13 = *a2;
  v14[0] = 0;
  sub_1C5F7E730((uint64_t)&v11, a1, (uint64_t)&v13, v14);
  v4 = v11;
  if (v12)
  {
    v15 = *a2;
    v16 = 0;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5 >= *(_QWORD *)(a1 + 40))
    {
      v8 = sub_1C5F7E998((int64x2_t *)(a1 + 24), (uint64_t)&v15);
      v9 = v16 & 0xFE;
      *(_QWORD *)(a1 + 32) = v8;
      if (v9 == 4)
      {
        if (v20 >= 0x41 && v19)
          MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
        if (v18 >= 0x41 && v17)
          MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
      }
    }
    else
    {
      *(_OWORD *)v5 = *a2;
      *(_WORD *)(v5 + 16) = 0;
      *(_QWORD *)(a1 + 32) = v5 + 56;
    }
    v7 = *(_QWORD *)(a1 + 24);
    v6 = -1227133513 * ((unint64_t)(*(_QWORD *)(a1 + 32) - v7) >> 3) - 1;
    *(_DWORD *)(v4 + 16) = v6;
  }
  else
  {
    v6 = *(_DWORD *)(v11 + 16);
    v7 = *(_QWORD *)(a1 + 24);
  }
  return v7 + 56 * v6 + 16;
}

_WORD *sub_1C5F72BD4(uint64_t a1, llvm::Constant *this, llvm::Type *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  llvm::Constant *v16;
  int v17;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v23;
  _WORD *v25;
  uint64_t v27;
  int v28;
  llvm::UndefValue *AggregateElement;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  llvm::Constant *v38;
  int v39;
  uint64_t v41;
  int v42;
  BOOL v43;
  unsigned int v45;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  unsigned int v55;
  llvm::Constant *v56;
  int v57;
  int v59;
  BOOL v60;
  unsigned int v62;

  v8 = *(_QWORD *)(a1 + 160);
  v6 = a1 + 160;
  v7 = v8;
  v9 = *(_DWORD *)(v6 + 16);
  v10 = this >> 4;
  if (v9)
  {
    v11 = ~((unint64_t)(37 * (_DWORD)a3) << 32)
        + (37 * (_DWORD)a3)
        + ((unint64_t)(v10 ^ (this >> 9)) << 32);
    v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
    v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
    v14 = (v9 - 1) & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
    v15 = v7 + 56 * v14;
    v16 = *(llvm::Constant **)v15;
    v17 = *(_DWORD *)(v15 + 8);
    if (*(llvm::Constant **)v15 == this && v17 == (_DWORD)a3)
      return (_WORD *)(v7 + 56 * v14 + 16);
    v19 = 0;
    v20 = 1;
    while (v16 != (llvm::Constant *)-4096 || v17 != -1)
    {
      if (v19)
        v21 = 0;
      else
        v21 = v17 == -2;
      if (v21 && v16 == (llvm::Constant *)-8192)
        v19 = v15;
      v23 = v14 + v20++;
      v14 = v23 & (v9 - 1);
      v15 = v7 + 56 * v14;
      v16 = *(llvm::Constant **)v15;
      v17 = *(_DWORD *)(v15 + 8);
      if (*(llvm::Constant **)v15 == this && v17 == (_DWORD)a3)
        return (_WORD *)(v7 + 56 * v14 + 16);
    }
    if (v19)
      v27 = v19;
    else
      v27 = v15;
  }
  else
  {
    v27 = 0;
  }
  v28 = *(_DWORD *)(a1 + 168);
  if (4 * v28 + 4 >= 3 * v9)
  {
    sub_1C5F7CCB8((uint64_t *)v6, 2 * v9);
    v31 = *(_DWORD *)(a1 + 176);
    if (v31)
    {
      v32 = *(_QWORD *)(a1 + 160);
      v33 = ~((unint64_t)(37 * (_DWORD)a3) << 32)
          + (37 * (_DWORD)a3)
          + ((unint64_t)(v10 ^ (this >> 9)) << 32);
      v34 = (v33 ^ (v33 >> 22)) + ~((v33 ^ (v33 >> 22)) << 13);
      v35 = (9 * (v34 ^ (v34 >> 8))) ^ ((9 * (v34 ^ (v34 >> 8))) >> 15);
      v36 = v31 - 1;
      v37 = v36 & (((v35 + ~(v35 << 27)) >> 31) ^ (v35 + ~((_DWORD)v35 << 27)));
      v27 = v32 + 56 * v37;
      v38 = *(llvm::Constant **)v27;
      v39 = *(_DWORD *)(v27 + 8);
      if (*(llvm::Constant **)v27 == this && v39 == (_DWORD)a3)
        goto LABEL_29;
      v41 = 0;
      v42 = 1;
      while (v38 != (llvm::Constant *)-4096 || v39 != -1)
      {
        if (v41)
          v43 = 0;
        else
          v43 = v39 == -2;
        if (v43 && v38 == (llvm::Constant *)-8192)
          v41 = v27;
        v45 = v37 + v42++;
        v37 = v45 & v36;
        v27 = v32 + 56 * v37;
        v38 = *(llvm::Constant **)v27;
        v39 = *(_DWORD *)(v27 + 8);
        if (*(llvm::Constant **)v27 == this && v39 == (_DWORD)a3)
          goto LABEL_29;
      }
      goto LABEL_91;
    }
LABEL_94:
    v27 = 0;
    goto LABEL_29;
  }
  if (v9 + ~v28 - *(_DWORD *)(a1 + 172) <= v9 >> 3)
  {
    sub_1C5F7CCB8((uint64_t *)v6, v9);
    v49 = *(_DWORD *)(a1 + 176);
    if (v49)
    {
      v50 = *(_QWORD *)(a1 + 160);
      v51 = ~((unint64_t)(37 * (_DWORD)a3) << 32)
          + (37 * (_DWORD)a3)
          + ((unint64_t)(v10 ^ (this >> 9)) << 32);
      v52 = (v51 ^ (v51 >> 22)) + ~((v51 ^ (v51 >> 22)) << 13);
      v53 = (9 * (v52 ^ (v52 >> 8))) ^ ((9 * (v52 ^ (v52 >> 8))) >> 15);
      v54 = v49 - 1;
      v55 = v54 & (((v53 + ~(v53 << 27)) >> 31) ^ (v53 + ~((_DWORD)v53 << 27)));
      v27 = v50 + 56 * v55;
      v56 = *(llvm::Constant **)v27;
      v57 = *(_DWORD *)(v27 + 8);
      if (*(llvm::Constant **)v27 == this && v57 == (_DWORD)a3)
        goto LABEL_29;
      v41 = 0;
      v59 = 1;
      while (v56 != (llvm::Constant *)-4096 || v57 != -1)
      {
        if (v41)
          v60 = 0;
        else
          v60 = v57 == -2;
        if (v60 && v56 == (llvm::Constant *)-8192)
          v41 = v27;
        v62 = v55 + v59++;
        v55 = v62 & v54;
        v27 = v50 + 56 * v55;
        v56 = *(llvm::Constant **)v27;
        v57 = *(_DWORD *)(v27 + 8);
        if (*(llvm::Constant **)v27 == this && v57 == (_DWORD)a3)
          goto LABEL_29;
      }
LABEL_91:
      if (v41)
        v27 = v41;
      goto LABEL_29;
    }
    goto LABEL_94;
  }
LABEL_29:
  ++*(_DWORD *)(a1 + 168);
  if (*(_QWORD *)v27 != -4096 || *(_DWORD *)(v27 + 8) != -1)
    --*(_DWORD *)(a1 + 172);
  *(_QWORD *)v27 = this;
  *(_DWORD *)(v27 + 8) = (_DWORD)a3;
  *(_WORD *)(v27 + 16) = 0;
  v25 = (_WORD *)(v27 + 16);
  if (this && *((unsigned __int8 *)this + 16) <= 0x14u)
  {
    AggregateElement = llvm::Constant::getAggregateElement(this, a3);
    if (AggregateElement)
    {
      if (*((unsigned __int8 *)AggregateElement + 16) - 11 >= 2)
        sub_1C4E8C21C(v27 + 16, (uint64_t)AggregateElement, 0);
    }
    else if (*v25 != 6)
    {
      if ((*v25 & 0xFE) == 4)
      {
        if (*(_DWORD *)(v27 + 48) >= 0x41u)
        {
          v47 = *(_QWORD *)(v27 + 40);
          if (v47)
            MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
        }
        if (*(_DWORD *)(v27 + 32) >= 0x41u)
        {
          v48 = *(_QWORD *)(v27 + 24);
          if (v48)
            MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
        }
      }
      *(_BYTE *)v25 = 6;
    }
  }
  return v25;
}

void llvm::SCCPInstVisitor::visitTerminator(llvm::SCCPInstVisitor *this, llvm::Instruction *a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::BasicBlock *v6;
  llvm::BasicBlock *Successor;
  void *v8;
  __int128 v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v8 = v10;
  v9 = xmmword_1C6612EE0;
  llvm::SCCPInstVisitor::getFeasibleSuccessors((uint64_t)this, (uint64_t)a2, &v8);
  v4 = v9;
  if ((_DWORD)v9)
  {
    v5 = 0;
    v6 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
    do
    {
      if (*((_BYTE *)v8 + v5))
      {
        Successor = (llvm::BasicBlock *)llvm::Instruction::getSuccessor(a2, v5);
        llvm::SCCPInstVisitor::markEdgeExecutable(this, v6, Successor);
      }
      ++v5;
    }
    while (v4 != v5);
  }
  if (v8 != v10)
    free(v8);
}

uint64_t llvm::SCCPInstVisitor::visitCastInst(llvm::SCCPInstVisitor *this, llvm::CastInst *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  llvm::CastInst *v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  int v19;
  llvm::ValueHandleBase *Constant;
  const llvm::DataLayout *v21;
  _BYTE *v22;
  void *v23;
  uint64_t v24;
  unsigned int PrimitiveSizeInBits;
  void *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  const char *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  const char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  void *v40;
  void *v41;
  void *v42;
  unsigned int v43;
  void *v44;
  unsigned int v45;
  void *__src;
  unsigned int v47;
  void *v48;
  unsigned int v49;
  void *v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  __int16 v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  llvm::CastInst *v59;
  void *v60;
  unsigned int v61;
  void *v62;
  unsigned int v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 17);
  result = (uint64_t)this + 136;
  v5 = v6;
  v59 = a2;
  v7 = *(_DWORD *)(result + 16);
  if (v7)
  {
    v8 = v7 - 1;
    v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v10 = v5 + 48 * v9;
    v11 = *(llvm::CastInst **)v10;
    if (*(llvm::CastInst **)v10 == a2)
      goto LABEL_16;
    v12 = 0;
    v13 = 1;
    while (v11 != (llvm::CastInst *)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (llvm::CastInst *)-8192;
      if (v14)
        v12 = (_QWORD *)v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = v5 + 48 * (v15 & v8);
      v11 = *(llvm::CastInst **)v10;
      if (*(llvm::CastInst **)v10 == a2)
        goto LABEL_16;
    }
    if (v12)
      v16 = v12;
    else
      v16 = (_QWORD *)v10;
  }
  else
  {
    v16 = 0;
  }
  result = (uint64_t)sub_1C5F7C8F0(result, (uint64_t *)&v59, v16);
  v10 = result;
  *(_QWORD *)result = v59;
  *(_WORD *)(result + 8) = 0;
LABEL_16:
  if (*(_BYTE *)(v10 + 8) == 6)
    return result;
  result = sub_1C5F71F80((uint64_t)this, *((_QWORD *)a2 - 4));
  v17 = result;
  v18 = *(_BYTE *)result;
  LOWORD(v59) = *(unsigned __int8 *)result;
  v19 = *(unsigned __int8 *)result;
  if ((v19 - 4) < 2)
  {
    v61 = *(_DWORD *)(result + 16);
    if (v61 > 0x40)
    {
      v60 = (void *)operator new[]();
      result = (uint64_t)memcpy(v60, *(const void **)(v17 + 8), (((unint64_t)v61 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v60 = *(void **)(result + 8);
    }
    v63 = *(_DWORD *)(v17 + 32);
    if (v63 > 0x40)
    {
      v62 = (void *)operator new[]();
      result = (uint64_t)memcpy(v62, *(const void **)(v17 + 24), (((unint64_t)v63 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v62 = *(void **)(v17 + 24);
    }
    v18 = (char)v59;
    LOWORD(v59) = v59 | (*(unsigned __int8 *)(v17 + 1) << 8);
  }
  else if ((v19 - 2) < 2)
  {
    v60 = *(void **)(result + 8);
  }
  if ((v18 & 0xFE) != 0)
  {
    Constant = llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v59);
    if (Constant)
    {
      result = llvm::ConstantFoldCastOperand(*((unsigned __int8 *)a2 + 16) - 28, Constant, *(llvm::Constant **)a2, *(llvm::Type **)this, v21);
      if (*(unsigned __int8 *)(result + 16) - 11 >= 2)
        result = sub_1C5F70B74((uint64_t)this, (uint64_t)a2, result);
      goto LABEL_71;
    }
    if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 13)
    {
      v22 = (_BYTE *)sub_1C5F71F80((uint64_t)this, (uint64_t)a2);
      if ((v59 & 0xFE) == 4)
      {
        v51 = v61;
        if (v61 > 0x40)
        {
          v50 = (void *)operator new[]();
          memcpy(v50, v60, (((unint64_t)v51 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v50 = v60;
        }
        v53 = v63;
        if (v63 <= 0x40)
        {
          v23 = v62;
LABEL_43:
          v52 = (uint64_t)v23;
          goto LABEL_44;
        }
        v40 = (void *)operator new[]();
        v52 = (uint64_t)v40;
        v41 = v62;
LABEL_108:
        memcpy(v40, v41, (((unint64_t)v53 + 63) >> 3) & 0x3FFFFFF8);
LABEL_44:
        v27 = *(_QWORD *)a2;
        v28 = *((unsigned __int8 *)a2 + 16);
        if (v28 == 77)
        {
          if ((*(_DWORD *)(**((_QWORD **)a2 - 4) + 8) & 0xFE) == 0x12)
          {
            v29 = v51;
            sub_1C4768AD0(*(_QWORD *)this, *(_QWORD *)a2);
            v32 = v31;
            if ((_DWORD)v30 == 1)
            if (v32 > v29)
            {
              result = sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
LABEL_69:
              if (v53 >= 0x41)
              {
                result = v52;
                if (v52)
                  result = MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
              }
              if (v51 >= 0x41)
              {
                result = (uint64_t)v50;
                if (v50)
                  result = MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
              }
              goto LABEL_71;
            }
            v28 = *((unsigned __int8 *)a2 + 16);
          }
          else
          {
            v28 = 77;
          }
        }
        v33 = v28 - 28;
        sub_1C4768AD0(*(_QWORD *)this, v27);
        if ((_DWORD)v34 == 1)
        llvm::ConstantRange::castOp((uint64_t)&v50, v33);
        v43 = v47;
        if (v47 > 0x40)
        {
          v42 = (void *)operator new[]();
          memcpy(v42, __src, (((unint64_t)v43 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v42 = __src;
        }
        v45 = v49;
        if (v49 > 0x40)
        {
          v44 = (void *)operator new[]();
          memcpy(v44, v48, (((unint64_t)v45 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v44 = v48;
        }
        sub_1C4E8E6E0((uint64_t)&v42, 0, &v54);
        result = sub_1C4E8EE28((uint64_t)v22, (unsigned __int8 *)&v54, 0x100000000);
        if (!(_DWORD)result)
        {
LABEL_62:
          if ((v54 & 0xFE) == 4)
          {
            if (v58 >= 0x41)
            {
              result = v57;
              if (v57)
                result = MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
            }
            if (v56 >= 0x41)
            {
              result = v55;
              if (v55)
                result = MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
            }
          }
          if (v45 >= 0x41)
          {
            result = (uint64_t)v44;
            if (v44)
              result = MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
          }
          if (v43 >= 0x41)
          {
            result = (uint64_t)v42;
            if (v42)
              result = MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
          }
          if (v49 >= 0x41)
          {
            result = (uint64_t)v48;
            if (v48)
              result = MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
          }
          if (v47 >= 0x41)
          {
            result = (uint64_t)__src;
            if (__src)
              result = MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          }
          goto LABEL_69;
        }
        if (*v22 == 6)
        {
          v35 = (char *)this + 784;
          v36 = (char *)this + 792;
          v37 = *((unsigned int *)this + 198);
          if (v37 < *((_DWORD *)this + 199))
          {
LABEL_61:
            *(_QWORD *)(*(_QWORD *)v35 + 8 * v37) = a2;
            ++*(_DWORD *)v36;
            goto LABEL_62;
          }
          v38 = v37 + 1;
          v39 = (char *)this + 800;
        }
        else
        {
          v35 = (char *)this + 1312;
          v36 = (char *)this + 1320;
          v37 = *((unsigned int *)this + 330);
          if (v37 < *((_DWORD *)this + 331))
            goto LABEL_61;
          v38 = v37 + 1;
          v39 = (char *)this + 1328;
        }
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v35, (uint64_t)v39, v38, 8);
        LODWORD(v37) = *(_DWORD *)v36;
        goto LABEL_61;
      }
      v24 = **((_QWORD **)a2 - 4);
      if ((*(_DWORD *)(v24 + 8) & 0xFE) == 0x12)
        v24 = **(_QWORD **)(v24 + 16);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v24);
      v51 = PrimitiveSizeInBits;
      if (PrimitiveSizeInBits > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v50, -1, 1);
        v53 = v51;
        if (v51 > 0x40)
        {
          v40 = (void *)operator new[]();
          v52 = (uint64_t)v40;
          v41 = v50;
          goto LABEL_108;
        }
      }
      else
      {
        if (PrimitiveSizeInBits)
          v26 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
        else
          v26 = 0;
        v50 = v26;
        v53 = PrimitiveSizeInBits;
      }
      v23 = v50;
      goto LABEL_43;
    }
    result = sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
  }
LABEL_71:
  if ((v59 & 0xFE) == 4)
  {
    if (v63 >= 0x41)
    {
      result = (uint64_t)v62;
      if (v62)
        result = MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
    }
    if (v61 >= 0x41)
    {
      result = (uint64_t)v60;
      if (v60)
        return MEMORY[0x1CAA32F9C](v60, 0x1000C8000313F17);
    }
  }
  return result;
}

void *llvm::SCCPInstVisitor::visitExtractValueInst(llvm::SCCPInstVisitor *this, llvm::ExtractValueInst *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  void *result;
  llvm::Constant *v20;
  const void **v21;
  const void **v22;
  int v23;
  __int16 v24;
  _BYTE *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char *v31;
  llvm::ExtractValueInst *v32;
  __int16 v33;
  void *v34;
  unsigned int v35;
  void *v36;
  unsigned int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 16)
    return (void *)sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
  v8 = (char *)this + 136;
  v9 = *((_QWORD *)this + 17);
  v32 = a2;
  v10 = *((_DWORD *)this + 38);
  if (!v10)
  {
    v29 = 0;
LABEL_37:
    v13 = sub_1C5F7C8F0((uint64_t)v8, (uint64_t *)&v32, v29);
    *v13 = v32;
    *((_WORD *)v13 + 4) = 0;
    goto LABEL_12;
  }
  v11 = v10 - 1;
  v12 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v13 = (_QWORD *)(v9 + 48 * v12);
  v14 = *v13;
  if ((llvm::ExtractValueInst *)*v13 != a2)
  {
    v15 = 0;
    v16 = 1;
    while (v14 != -4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == -8192;
      if (v17)
        v15 = v13;
      v18 = v12 + v16++;
      v12 = v18 & v11;
      v13 = (_QWORD *)(v9 + 48 * (v18 & v11));
      v14 = *v13;
      if ((llvm::ExtractValueInst *)*v13 == a2)
        goto LABEL_12;
    }
    if (v15)
      v29 = v15;
    else
      v29 = v13;
    goto LABEL_37;
  }
LABEL_12:
  if (*((_BYTE *)v13 + 8) == 6)
    return (void *)sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
  if (*((_DWORD *)a2 + 18) != 1)
    return (void *)sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
  v20 = (llvm::Constant *)*((_QWORD *)a2 - 4);
  if (*(_BYTE *)(*(_QWORD *)v20 + 8) != 16)
    return (void *)sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
  v21 = (const void **)sub_1C5F72BD4((uint64_t)this, v20, (llvm::Type *)**((unsigned int **)a2 + 8));
  v22 = v21;
  v23 = *(unsigned __int8 *)v21;
  if ((v23 - 4) < 2)
  {
    v4 = *((unsigned int *)v21 + 4);
    if (v4 > 0x40)
    {
      v2 = (void *)operator new[]();
      memcpy(v2, v22[1], ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v2 = (void *)v21[1];
    }
    v5 = *((unsigned int *)v22 + 8);
    if (v5 > 0x40)
    {
      v3 = (void *)operator new[]();
      memcpy(v3, v22[3], ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v3 = (void *)v22[3];
    }
    v24 = v23 | (*((unsigned __int8 *)v22 + 1) << 8);
  }
  else
  {
    if ((v23 - 2) < 2)
      v2 = (void *)v21[1];
    v24 = *(unsigned __int8 *)v21;
  }
  v25 = (_BYTE *)sub_1C5F71F80((uint64_t)this, (uint64_t)a2);
  v33 = v23;
  if (v24 - 4 < 2)
  {
    v35 = v4;
    if (v4 > 0x40)
    {
      v34 = (void *)operator new[]();
      memcpy(v34, v2, (((unint64_t)v4 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v34 = v2;
    }
    v37 = v5;
    if (v5 > 0x40)
    {
      v36 = (void *)operator new[]();
      memcpy(v36, v3, (((unint64_t)v5 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v36 = v3;
    }
    v33 = v23 | v24 & 0xFF00;
  }
  else if (v24 - 2 < 2)
  {
    v34 = v2;
  }
  result = (void *)sub_1C4E8EE28((uint64_t)v25, (unsigned __int8 *)&v33, 0x100000000);
  if ((_DWORD)result)
  {
    if (*v25 == 6)
    {
      v26 = (char *)this + 784;
      v27 = (char *)this + 792;
      v28 = *((unsigned int *)this + 198);
      if (v28 < *((_DWORD *)this + 199))
      {
LABEL_27:
        *(_QWORD *)(*(_QWORD *)v26 + 8 * v28) = a2;
        ++*(_DWORD *)v27;
        goto LABEL_28;
      }
      v30 = v28 + 1;
      v31 = (char *)this + 800;
    }
    else
    {
      v26 = (char *)this + 1312;
      v27 = (char *)this + 1320;
      v28 = *((unsigned int *)this + 330);
      if (v28 < *((_DWORD *)this + 331))
        goto LABEL_27;
      v30 = v28 + 1;
      v31 = (char *)this + 1328;
    }
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v26, (uint64_t)v31, v30, 8);
    LODWORD(v28) = *(_DWORD *)v27;
    goto LABEL_27;
  }
LABEL_28:
  if ((v33 & 0xFE) == 4)
  {
    if (v37 >= 0x41)
    {
      result = v36;
      if (v36)
        result = (void *)MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
    }
    if (v35 >= 0x41)
    {
      result = v34;
      if (v34)
        result = (void *)MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
    }
  }
  if ((v24 & 0xFE) == 4)
  {
    if (v5 >= 0x41 && v3)
      result = (void *)MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
    if (v4 >= 0x41)
    {
      if (v2)
        return (void *)MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::SCCPInstVisitor::visitInsertValueInst(llvm::SCCPInstVisitor *this, llvm::InsertValueInst *a2)
{
  uint64_t v2;
  unsigned int *v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  llvm::InsertValueInst *v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  _QWORD *v18;
  unsigned int v20;
  unint64_t v21;
  llvm::Type *v22;
  llvm::Type *v23;
  uint64_t v24;
  _WORD *v25;
  void *v26;
  const void **v27;
  const void **v28;
  int v29;
  __int16 v30;
  _WORD *v31;
  const void **v32;
  const void **v33;
  int v34;
  uint64_t v35;
  __int16 v36;
  _WORD *v37;
  unint64_t v38;
  _DWORD *v39;
  char *v40;
  unint64_t v41;
  _DWORD *v42;
  char *v43;
  char *v44;
  unsigned int v45;
  void *v46;
  uint64_t v47;
  BOOL v48;
  char v49;
  char *v50;
  char *v51;
  char *v52;
  void *v53;
  void *v54;
  void *__src;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  llvm::Constant *v60;
  llvm::InsertValueInst *v61;
  void *__s2;
  unsigned int v63;
  __int16 v64;
  void *v65;
  unsigned int v66;
  void *v67;
  unsigned int v68;
  __int16 v69;
  void *v70;
  unsigned int v71;
  void *v72;
  unsigned int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
    v6 = *(_BYTE *)(*(_QWORD *)a2 + 8) == 16;
  else
    v6 = 0;
  if (!v6)
    return sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
  result = (uint64_t)this + 136;
  v8 = *((_QWORD *)this + 17);
  v61 = a2;
  v9 = *((_DWORD *)this + 38);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
    v12 = v8 + 48 * v11;
    v13 = *(llvm::InsertValueInst **)v12;
    if (*(llvm::InsertValueInst **)v12 == a2)
      goto LABEL_21;
    v14 = 0;
    v15 = 1;
    while (v13 != (llvm::InsertValueInst *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == (llvm::InsertValueInst *)-8192;
      if (v16)
        v14 = (_QWORD *)v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = v8 + 48 * v11;
      v13 = *(llvm::InsertValueInst **)v12;
      if (*(llvm::InsertValueInst **)v12 == a2)
        goto LABEL_21;
    }
    if (v14)
      v18 = v14;
    else
      v18 = (_QWORD *)v12;
  }
  else
  {
    v18 = 0;
  }
  result = (uint64_t)sub_1C5F7C8F0(result, (uint64_t *)&v61, v18);
  v12 = result;
  *(_QWORD *)result = v61;
  *(_WORD *)(result + 8) = 0;
LABEL_21:
  if ((*(_WORD *)(v12 + 8) & 0xFE) != 0 && *(_WORD *)(v12 + 8) != 2)
  {
    if ((*(_WORD *)(v12 + 8) & 0xFE) != 4)
      return sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
    v63 = *(_DWORD *)(v12 + 24);
    if (v63 > 0x40)
    {
      __s2 = (void *)operator new[]();
      memcpy(__s2, *(const void **)(v12 + 16), (((unint64_t)v63 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      __s2 = *(void **)(v12 + 16);
    }
    result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    v45 = v63;
    v46 = __s2;
    v63 = 0;
    v47 = *(unsigned int *)(v12 + 40);
    if (v47 > 0x40)
    {
      result = memcmp(*(const void **)(v12 + 32), __s2, ((unint64_t)(v47 + 63) >> 3) & 0x3FFFFFF8);
      v48 = (_DWORD)result == 0;
    }
    else
    {
      v48 = *(_QWORD *)(v12 + 32) == (_QWORD)__s2;
    }
    v49 = v48;
    if (v45 >= 0x41)
    {
      if (v46)
      {
        result = MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
        if (v63 >= 0x41)
        {
          result = (uint64_t)__s2;
          if (__s2)
            result = MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        }
      }
    }
    if ((v49 & 1) == 0)
      return sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
  }
  if (*((_DWORD *)a2 + 18) != 1)
    return sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
  v20 = v5[3];
  if (v20)
  {
    v56 = 0;
    v57 = 0;
    v21 = 0;
    v22 = 0;
    v59 = 0;
    v60 = (llvm::Constant *)*((_QWORD *)a2 - 8);
    v23 = (llvm::Type *)**((unsigned int **)a2 + 8);
    v52 = (char *)this + 1312;
    v58 = (char *)this + 784;
    v50 = (char *)this + 1328;
    v51 = (char *)this + 800;
    while ((_DWORD)v23 == (_DWORD)v22)
    {
      v24 = *((_QWORD *)a2 - 4);
      if (*(_BYTE *)(*(_QWORD *)v24 + 8) != 16)
      {
        v32 = (const void **)sub_1C5F71F80((uint64_t)this, v24);
        v33 = v32;
        v34 = *(unsigned __int8 *)v32;
        if ((v34 - 4) < 2)
        {
          v57 = *((unsigned int *)v32 + 4);
          if (v57 > 0x40)
          {
            v54 = (void *)operator new[]();
            memcpy(v54, v33[1], ((v57 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v54 = (void *)v32[1];
          }
          v56 = *((unsigned int *)v33 + 8);
          v35 = v2;
          if (v56 > 0x40)
          {
            v53 = (void *)operator new[]();
            memcpy(v53, v33[3], ((v56 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v53 = (void *)v33[3];
          }
          v36 = v34 | (*((unsigned __int8 *)v33 + 1) << 8);
        }
        else
        {
          v35 = v2;
          if ((v34 - 2) < 2)
            v54 = (void *)v32[1];
          v36 = *(unsigned __int8 *)v32;
        }
        v37 = sub_1C5F72BD4((uint64_t)this, a2, v23);
        v64 = v34;
        if (v36 - 4 < 2)
        {
          v66 = v57;
          if (v57 > 0x40)
          {
            v65 = (void *)operator new[]();
            memcpy(v65, v54, (((unint64_t)v66 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v65 = v54;
          }
          v68 = v56;
          if (v56 > 0x40)
          {
            v67 = (void *)operator new[]();
            memcpy(v67, v53, (((unint64_t)v68 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v67 = v53;
          }
          v64 = v64 | v36 & 0xFF00;
        }
        else if (v36 - 2 < 2)
        {
          v65 = v54;
        }
        result = sub_1C4E8EE28((uint64_t)v37, (unsigned __int8 *)&v64, 0x100000000);
        if ((_DWORD)result)
        {
          if (*(_BYTE *)v37 == 6)
          {
            v41 = *((unsigned int *)this + 198);
            if (v41 < *((unsigned int *)this + 199))
            {
              v42 = (_DWORD *)((char *)this + 792);
              v43 = (char *)this + 784;
              goto LABEL_83;
            }
            v43 = (char *)this + 784;
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v58, (uint64_t)v51, v41 + 1, 8);
            v42 = (_DWORD *)((char *)this + 792);
LABEL_108:
            v41 = *v42;
          }
          else
          {
            v41 = *((unsigned int *)this + 330);
            if (v41 >= *((unsigned int *)this + 331))
            {
              v43 = (char *)this + 1312;
              result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v52, (uint64_t)v50, v41 + 1, 8);
              v42 = (_DWORD *)((char *)this + 1320);
              goto LABEL_108;
            }
            v42 = (_DWORD *)((char *)this + 1320);
            v43 = (char *)this + 1312;
          }
LABEL_83:
          *(_QWORD *)(*(_QWORD *)v43 + 8 * v41) = a2;
          ++*v42;
        }
        if ((v64 & 0xFE) == 4)
        {
          if (v68 >= 0x41)
          {
            result = (uint64_t)v67;
            if (v67)
              result = MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
          }
          if (v66 >= 0x41)
          {
            result = (uint64_t)v65;
            if (v65)
              result = MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
          }
        }
        if ((v36 & 0xFE) != 4)
        {
          v2 = v35;
          goto LABEL_93;
        }
        if (v56 >= 0x41)
        {
          if (v53)
            result = MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
        }
        v2 = v35;
        if (v57 < 0x41)
          goto LABEL_93;
        result = (uint64_t)v54;
        if (!v54)
        {
          v54 = 0;
          goto LABEL_93;
        }
LABEL_91:
        result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        goto LABEL_93;
      }
      v25 = sub_1C5F72BD4((uint64_t)this, a2, v23);
      result = llvm::SCCPInstVisitor::markOverdefined((uint64_t)this, (uint64_t)v25, (uint64_t)a2);
LABEL_93:
      v22 = (llvm::Type *)((_DWORD)v22 + 1);
      if (v20 == (_DWORD)v22)
        return result;
    }
    v26 = (void *)v2;
    v27 = (const void **)sub_1C5F72BD4((uint64_t)this, v60, v22);
    v28 = v27;
    v29 = *(unsigned __int8 *)v27;
    if ((v29 - 4) < 2)
    {
      v59 = *((unsigned int *)v27 + 4);
      if (v59 > 0x40)
      {
        v26 = (void *)operator new[]();
        memcpy(v26, v28[1], ((v59 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v26 = (void *)v27[1];
      }
      v21 = *((unsigned int *)v28 + 8);
      if (v21 > 0x40)
      {
        __src = (void *)operator new[]();
        memcpy(__src, v28[3], ((v21 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        __src = (void *)v28[3];
      }
      v30 = v29 | (*((unsigned __int8 *)v28 + 1) << 8);
    }
    else
    {
      if ((v29 - 2) < 2)
        v26 = (void *)v27[1];
      v30 = *(unsigned __int8 *)v27;
    }
    v31 = sub_1C5F72BD4((uint64_t)this, a2, v22);
    v69 = v29;
    if (v30 - 4 < 2)
    {
      v71 = v59;
      v2 = (uint64_t)v26;
      if (v59 > 0x40)
      {
        v70 = (void *)operator new[]();
        memcpy(v70, v26, (((unint64_t)v71 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v70 = v26;
      }
      v73 = v21;
      if (v21 > 0x40)
      {
        v72 = (void *)operator new[]();
        memcpy(v72, __src, (((unint64_t)v73 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v72 = __src;
      }
      v69 = v69 | v30 & 0xFF00;
    }
    else
    {
      v2 = (uint64_t)v26;
      if (v30 - 2 < 2)
        v70 = v26;
    }
    result = sub_1C4E8EE28((uint64_t)v31, (unsigned __int8 *)&v69, 0x100000000);
    if (!(_DWORD)result)
    {
LABEL_61:
      if ((v69 & 0xFE) == 4)
      {
        if (v73 >= 0x41)
        {
          result = (uint64_t)v72;
          if (v72)
            result = MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
        }
        if (v71 >= 0x41)
        {
          result = (uint64_t)v70;
          if (v70)
            result = MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
        }
      }
      if ((v30 & 0xFE) != 4)
        goto LABEL_93;
      if (v21 >= 0x41 && __src)
        result = MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      if (v59 < 0x41 || !v2)
        goto LABEL_93;
      result = v2;
      goto LABEL_91;
    }
    if (*(_BYTE *)v31 == 6)
    {
      v38 = *((unsigned int *)this + 198);
      if (v38 < *((unsigned int *)this + 199))
      {
        v39 = (_DWORD *)((char *)this + 792);
        v40 = (char *)this + 784;
LABEL_60:
        *(_QWORD *)(*(_QWORD *)v40 + 8 * v38) = a2;
        ++*v39;
        goto LABEL_61;
      }
      v44 = (char *)this + 784;
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v58, (uint64_t)v51, v38 + 1, 8);
      v39 = (_DWORD *)((char *)this + 792);
    }
    else
    {
      v38 = *((unsigned int *)this + 330);
      if (v38 < *((unsigned int *)this + 331))
      {
        v39 = (_DWORD *)((char *)this + 1320);
        v40 = (char *)this + 1312;
        goto LABEL_60;
      }
      v44 = (char *)this + 1312;
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v52, (uint64_t)v50, v38 + 1, 8);
      v39 = (_DWORD *)((char *)this + 1320);
    }
    v40 = v44;
    v38 = *v39;
    v2 = (uint64_t)v26;
    goto LABEL_60;
  }
  return result;
}

unsigned __int8 *llvm::SCCPInstVisitor::visitSelectInst(llvm::SCCPInstVisitor *this, llvm::SelectInst *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  llvm::SelectInst **v11;
  llvm::SelectInst *v12;
  llvm::SelectInst **v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned __int8 *result;
  uint64_t v18;
  char v19;
  int v20;
  llvm::ValueHandleBase *Constant;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  llvm::SelectInst **v32;
  llvm::SelectInst *v33;
  llvm::SelectInst **v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  llvm::SelectInst **v43;
  llvm::SelectInst *v44;
  llvm::SelectInst **v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  char *v58;
  char *v59;
  uint64_t v60;
  llvm::SelectInst **v61;
  llvm::SelectInst **v62;
  llvm::SelectInst **v63;
  _QWORD *v64;
  unsigned int v65;
  uint64_t v66;
  const void **v67;
  const void **v68;
  int v69;
  unint64_t v70;
  char *v71;
  unsigned __int8 *v72;
  llvm::SelectInst *v73;
  __int16 v74;
  unsigned __int8 *v75;
  unsigned int v76;
  unsigned __int8 *v77;
  unsigned int v78;
  __int16 v79;
  unsigned __int8 *v80;
  unsigned int v81;
  unsigned __int8 *v82;
  unsigned int v83;
  const void *v84;
  unsigned __int8 *v85;
  int v86;
  uint64_t v87;
  int v88;
  llvm::SelectInst *v89;
  unsigned __int8 *v90;
  unsigned int v91;
  unsigned __int8 *v92;
  unsigned int v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 16)
    return (unsigned __int8 *)sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
  v6 = *((_QWORD *)this + 17);
  v89 = a2;
  v7 = *((_DWORD *)this + 38);
  v8 = a2 >> 4;
  if (v7)
  {
    v9 = v7 - 1;
    v10 = v9 & (v8 ^ (a2 >> 9));
    v11 = (llvm::SelectInst **)(v6 + 48 * v10);
    v12 = *v11;
    if (*v11 == a2)
      goto LABEL_12;
    v13 = 0;
    v14 = 1;
    while (v12 != (llvm::SelectInst *)-4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == (llvm::SelectInst *)-8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (llvm::SelectInst **)(v6 + 48 * v10);
      v12 = *v11;
      if (*v11 == a2)
        goto LABEL_12;
    }
    if (v13)
      v61 = v13;
    else
      v61 = v11;
  }
  else
  {
    v61 = 0;
  }
  v11 = (llvm::SelectInst **)sub_1C5F7C8F0((uint64_t)this + 136, (uint64_t *)&v89, v61);
  *v11 = v89;
  *((_WORD *)v11 + 4) = 0;
LABEL_12:
  if (*((_BYTE *)v11 + 8) == 6)
    return (unsigned __int8 *)sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
  result = (unsigned __int8 *)sub_1C5F71F80((uint64_t)this, *((_QWORD *)a2 - 12));
  v18 = (uint64_t)result;
  v19 = *result;
  LOWORD(v89) = *result;
  v20 = *result;
  if ((v20 - 4) < 2)
  {
    v91 = *((_DWORD *)result + 4);
    if (v91 > 0x40)
    {
      v90 = (unsigned __int8 *)operator new[]();
      result = (unsigned __int8 *)memcpy(v90, *(const void **)(v18 + 8), (((unint64_t)v91 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v90 = (unsigned __int8 *)*((_QWORD *)result + 1);
    }
    v93 = *(_DWORD *)(v18 + 32);
    if (v93 > 0x40)
    {
      v92 = (unsigned __int8 *)operator new[]();
      result = (unsigned __int8 *)memcpy(v92, *(const void **)(v18 + 24), (((unint64_t)v93 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v92 = *(unsigned __int8 **)(v18 + 24);
    }
    v19 = (char)v89;
    LOWORD(v89) = v89 | (*(unsigned __int8 *)(v18 + 1) << 8);
  }
  else if ((v20 - 2) < 2)
  {
    v90 = (unsigned __int8 *)*((_QWORD *)result + 1);
  }
  if ((v19 & 0xFE) != 0)
  {
    Constant = llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v89);
    if (Constant && *((_BYTE *)Constant + 16) == 16)
    {
      v65 = *((_DWORD *)Constant + 8);
      if (v65 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::ValueHandleBase *)((char *)Constant + 24)) == v65)
          goto LABEL_109;
      }
      else if (!*((_QWORD *)Constant + 3))
      {
LABEL_109:
        v66 = -1;
        goto LABEL_110;
      }
      v66 = -2;
LABEL_110:
      v67 = (const void **)sub_1C5F71F80((uint64_t)this, *((_QWORD *)a2 + 4 * v66));
      v68 = v67;
      v69 = *(unsigned __int8 *)v67;
      LOWORD(v84) = *(unsigned __int8 *)v67;
      if ((v69 - 4) < 2)
      {
        v2 = *((unsigned int *)v67 + 4);
        v86 = v2;
        if (v2 > 0x40)
        {
          v72 = (unsigned __int8 *)operator new[]();
          memcpy(v72, v68[1], ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v72 = (unsigned __int8 *)v67[1];
        }
        v85 = v72;
        v3 = *((unsigned int *)v68 + 8);
        v88 = v3;
        if (v3 > 0x40)
        {
          v18 = operator new[]();
          memcpy((void *)v18, v68[3], ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v18 = (uint64_t)v68[3];
        }
        v87 = v18;
        LOWORD(v69) = v69 | (*((unsigned __int8 *)v68 + 1) << 8);
        LOWORD(v84) = v69;
      }
      else if ((v69 - 2) < 2)
      {
        v85 = (unsigned __int8 *)v67[1];
      }
      result = (unsigned __int8 *)sub_1C5F721C0((uint64_t)this, (uint64_t)a2, &v84, 0x100000000);
      if ((v69 & 0xFE) != 4)
        goto LABEL_62;
      if (v3 >= 0x41 && v18)
      {
        result = (unsigned __int8 *)MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
        LODWORD(v2) = v86;
      }
      if (v2 < 0x41)
        goto LABEL_62;
      result = v85;
      if (!v85)
        goto LABEL_62;
      goto LABEL_78;
    }
    v22 = (unsigned __int8 *)sub_1C5F71F80((uint64_t)this, *((_QWORD *)a2 - 8));
    v23 = v22;
    v79 = *v22;
    v24 = *v22;
    if ((v24 - 4) < 2)
    {
      v81 = *((_DWORD *)v22 + 4);
      if (v81 > 0x40)
      {
        v80 = (unsigned __int8 *)operator new[]();
        memcpy(v80, *((const void **)v23 + 1), (((unint64_t)v81 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v80 = (unsigned __int8 *)*((_QWORD *)v22 + 1);
      }
      v83 = *((_DWORD *)v23 + 8);
      if (v83 > 0x40)
      {
        v82 = (unsigned __int8 *)operator new[]();
        memcpy(v82, *((const void **)v23 + 3), (((unint64_t)v83 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v82 = (unsigned __int8 *)*((_QWORD *)v23 + 3);
      }
      HIBYTE(v79) = v23[1];
    }
    else if ((v24 - 2) < 2)
    {
      v80 = (unsigned __int8 *)*((_QWORD *)v22 + 1);
    }
    v25 = (unsigned __int8 *)sub_1C5F71F80((uint64_t)this, *((_QWORD *)a2 - 4));
    v26 = v25;
    v74 = *v25;
    v27 = *v25;
    if ((v27 - 4) < 2)
    {
      v76 = *((_DWORD *)v25 + 4);
      if (v76 > 0x40)
      {
        v75 = (unsigned __int8 *)operator new[]();
        memcpy(v75, *((const void **)v26 + 1), (((unint64_t)v76 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v75 = (unsigned __int8 *)*((_QWORD *)v25 + 1);
      }
      v78 = *((_DWORD *)v26 + 8);
      if (v78 > 0x40)
      {
        v77 = (unsigned __int8 *)operator new[]();
        memcpy(v77, *((const void **)v26 + 3), (((unint64_t)v78 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v77 = (unsigned __int8 *)*((_QWORD *)v26 + 3);
      }
      HIBYTE(v74) = v26[1];
    }
    else if ((v27 - 2) < 2)
    {
      v75 = (unsigned __int8 *)*((_QWORD *)v25 + 1);
    }
    v73 = a2;
    v28 = *((_DWORD *)this + 38);
    if (v28)
    {
      v29 = *((_QWORD *)this + 17);
      v30 = v28 - 1;
      v31 = v30 & (v8 ^ (a2 >> 9));
      v32 = (llvm::SelectInst **)(v29 + 48 * v31);
      v33 = *v32;
      if (*v32 == a2)
        goto LABEL_36;
      v34 = 0;
      v35 = 1;
      while (v33 != (llvm::SelectInst *)-4096)
      {
        if (v34)
          v36 = 0;
        else
          v36 = v33 == (llvm::SelectInst *)-8192;
        if (v36)
          v34 = v32;
        v37 = v31 + v35++;
        v31 = v37 & v30;
        v32 = (llvm::SelectInst **)(v29 + 48 * v31);
        v33 = *v32;
        if (*v32 == a2)
          goto LABEL_36;
      }
      if (v34)
        v62 = v34;
      else
        v62 = v32;
    }
    else
    {
      v62 = 0;
    }
    v32 = (llvm::SelectInst **)sub_1C5F7C8F0((uint64_t)this + 136, (uint64_t *)&v73, v62);
    *v32 = v73;
    *((_WORD *)v32 + 4) = 0;
LABEL_36:
    v38 = sub_1C4E8EE28((uint64_t)(v32 + 1), (unsigned __int8 *)&v79, 0x100000000);
    v73 = a2;
    v39 = *((_DWORD *)this + 38);
    if (v39)
    {
      v40 = *((_QWORD *)this + 17);
      v41 = v39 - 1;
      v42 = v41 & (v8 ^ (a2 >> 9));
      v43 = (llvm::SelectInst **)(v40 + 48 * v42);
      v44 = *v43;
      if (*v43 == a2)
        goto LABEL_46;
      v45 = 0;
      v46 = 1;
      while (v44 != (llvm::SelectInst *)-4096)
      {
        if (v45)
          v47 = 0;
        else
          v47 = v44 == (llvm::SelectInst *)-8192;
        if (v47)
          v45 = v43;
        v48 = v42 + v46++;
        v42 = v48 & v41;
        v43 = (llvm::SelectInst **)(v40 + 48 * v42);
        v44 = *v43;
        if (*v43 == a2)
          goto LABEL_46;
      }
      if (v45)
        v63 = v45;
      else
        v63 = v43;
    }
    else
    {
      v63 = 0;
    }
    v43 = (llvm::SelectInst **)sub_1C5F7C8F0((uint64_t)this + 136, (uint64_t *)&v73, v63);
    *v43 = v73;
    *((_WORD *)v43 + 4) = 0;
LABEL_46:
    result = (unsigned __int8 *)sub_1C4E8EE28((uint64_t)(v43 + 1), (unsigned __int8 *)&v74, 0x100000000);
    if ((v38 | result) != 1)
      goto LABEL_60;
    v73 = a2;
    v49 = *((_DWORD *)this + 38);
    if (v49)
    {
      v50 = *((_QWORD *)this + 17);
      v51 = v49 - 1;
      v52 = v51 & (v8 ^ (a2 >> 9));
      result = (unsigned __int8 *)(v50 + 48 * v52);
      v53 = *(_QWORD *)result;
      if (*(llvm::SelectInst **)result == a2)
        goto LABEL_57;
      v54 = 0;
      v55 = 1;
      while (v53 != -4096)
      {
        if (v54)
          v56 = 0;
        else
          v56 = v53 == -8192;
        if (v56)
          v54 = result;
        v57 = v52 + v55++;
        v52 = v57 & v51;
        result = (unsigned __int8 *)(v50 + 48 * v52);
        v53 = *(_QWORD *)result;
        if (*(llvm::SelectInst **)result == a2)
          goto LABEL_57;
      }
      if (v54)
        v64 = v54;
      else
        v64 = result;
    }
    else
    {
      v64 = 0;
    }
    result = (unsigned __int8 *)sub_1C5F7C8F0((uint64_t)this + 136, (uint64_t *)&v73, v64);
    *(_QWORD *)result = v73;
    *((_WORD *)result + 4) = 0;
LABEL_57:
    if (result[8] == 6)
    {
      v58 = (char *)this + 784;
      v59 = (char *)this + 792;
      v60 = *((unsigned int *)this + 198);
      if (v60 < *((_DWORD *)this + 199))
      {
LABEL_59:
        *(_QWORD *)(*(_QWORD *)v58 + 8 * v60) = a2;
        ++*(_DWORD *)v59;
LABEL_60:
        if ((v74 & 0xFE) == 4)
        {
          if (v78 >= 0x41)
          {
            result = v77;
            if (v77)
              result = (unsigned __int8 *)MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
          }
          if (v76 >= 0x41)
          {
            result = v75;
            if (v75)
              result = (unsigned __int8 *)MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
          }
        }
        if ((v79 & 0xFE) != 4)
          goto LABEL_62;
        if (v83 >= 0x41)
        {
          result = v82;
          if (v82)
            result = (unsigned __int8 *)MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
        }
        if (v81 < 0x41)
          goto LABEL_62;
        result = v80;
        if (!v80)
          goto LABEL_62;
LABEL_78:
        result = (unsigned __int8 *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        goto LABEL_62;
      }
      v70 = v60 + 1;
      v71 = (char *)this + 800;
    }
    else
    {
      v58 = (char *)this + 1312;
      v59 = (char *)this + 1320;
      v60 = *((unsigned int *)this + 330);
      if (v60 < *((_DWORD *)this + 331))
        goto LABEL_59;
      v70 = v60 + 1;
      v71 = (char *)this + 1328;
    }
    result = (unsigned __int8 *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v58, (uint64_t)v71, v70, 8);
    LODWORD(v60) = *(_DWORD *)v59;
    goto LABEL_59;
  }
LABEL_62:
  if ((v89 & 0xFE) == 4)
  {
    if (v93 >= 0x41)
    {
      result = v92;
      if (v92)
        result = (unsigned __int8 *)MEMORY[0x1CAA32F9C](v92, 0x1000C8000313F17);
    }
    if (v91 >= 0x41)
    {
      result = v90;
      if (v90)
        return (unsigned __int8 *)MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::SCCPInstVisitor::visitUnaryOperator(llvm::SCCPInstVisitor *this, llvm::Instruction *a2)
{
  int v4;
  uint64_t *v5;
  const void **v6;
  const void **v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  llvm::Instruction *v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _BYTE *v20;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  llvm::ConstantExpr *v28;
  unsigned __int8 *Constant;
  llvm::Type *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  llvm::Instruction *v36;
  __int16 v37;
  void *v38;
  int v39;
  void *v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)a2 + 5);
  if ((v4 & 0x40000000) != 0)
    v5 = (uint64_t *)*((_QWORD *)a2 - 1);
  else
    v5 = (uint64_t *)((char *)a2 - 32 * (v4 & 0x7FFFFFF));
  v6 = (const void **)sub_1C5F71F80((uint64_t)this, *v5);
  v7 = v6;
  v8 = *(unsigned __int8 *)v6;
  v37 = *(unsigned __int8 *)v6;
  if ((v8 - 4) < 2)
  {
    v24 = *((unsigned int *)v6 + 4);
    v39 = v24;
    if (v24 > 0x40)
    {
      v26 = ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8;
      v38 = (void *)operator new[]();
      memcpy(v38, v7[1], v26);
    }
    else
    {
      v38 = (void *)v6[1];
    }
    v25 = *((unsigned int *)v7 + 8);
    v41 = v25;
    if (v25 > 0x40)
    {
      v27 = ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8;
      v40 = (void *)operator new[]();
      memcpy(v40, v7[3], v27);
    }
    else
    {
      v40 = (void *)v7[3];
    }
    LOWORD(v8) = v8 | (*((unsigned __int8 *)v7 + 1) << 8);
    v37 = v8;
  }
  else if ((v8 - 2) < 2)
  {
    v38 = (void *)v6[1];
  }
  result = (uint64_t)this + 136;
  v10 = *((_QWORD *)this + 17);
  v36 = a2;
  v11 = *((_DWORD *)this + 38);
  if (v11)
  {
    v12 = v11 - 1;
    v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v14 = v10 + 48 * v13;
    v15 = *(llvm::Instruction **)v14;
    if (*(llvm::Instruction **)v14 == a2)
      goto LABEL_16;
    v16 = 0;
    v17 = 1;
    while (v15 != (llvm::Instruction *)-4096)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v15 == (llvm::Instruction *)-8192;
      if (v18)
        v16 = (_QWORD *)v14;
      v19 = v13 + v17++;
      v13 = v19 & v12;
      v14 = v10 + 48 * (v19 & v12);
      v15 = *(llvm::Instruction **)v14;
      if (*(llvm::Instruction **)v14 == a2)
        goto LABEL_16;
    }
    if (v16)
      v23 = v16;
    else
      v23 = (_QWORD *)v14;
  }
  else
  {
    v23 = 0;
  }
  result = (uint64_t)sub_1C5F7C8F0(result, (uint64_t *)&v36, v23);
  v14 = result;
  *(_QWORD *)result = v36;
  *(_WORD *)(result + 8) = 0;
LABEL_16:
  v20 = (_BYTE *)(v14 + 8);
  if ((*(_WORD *)(v14 + 8) & 0xFE) != 0 && *(_WORD *)(v14 + 8) != 2)
  {
    if ((*(_WORD *)(v14 + 8) & 0xFE) != 4 || (result = sub_1C4E87458(v14 + 16)) == 0)
    {
LABEL_30:
      result = sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
      goto LABEL_31;
    }
    LOBYTE(v8) = v37;
  }
  if (v8 != 2)
  {
    if ((v8 & 0xFE) != 4)
    {
      v22 = 0;
LABEL_24:
      if (v22)
        goto LABEL_31;
      if ((v8 & 0xFE) == 0)
        goto LABEL_31;
      if ((v8 & 0xFE) == 4)
      {
        result = sub_1C4E87458((uint64_t)&v38);
        if (result)
          goto LABEL_31;
      }
      goto LABEL_30;
    }
    result = sub_1C4E87458((uint64_t)&v38);
    if (!result)
    {
      LOBYTE(v8) = v37;
      v22 = v37 == 2;
      goto LABEL_24;
    }
  }
  v28 = (llvm::ConstantExpr *)(*((unsigned __int8 *)a2 + 16) - 28);
  Constant = (unsigned __int8 *)llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v37);
  result = llvm::ConstantExpr::get(v28, Constant, 0, 0, v30);
  if (*(unsigned __int8 *)(result + 16) - 11 < 2)
    goto LABEL_31;
  result = sub_1C4E8C21C((uint64_t)v20, result, 0);
  if (!(_DWORD)result)
    goto LABEL_31;
  if (*v20 != 6)
  {
    v31 = (char *)this + 1312;
    v32 = (char *)this + 1320;
    v33 = *((unsigned int *)this + 330);
    if (v33 < *((_DWORD *)this + 331))
      goto LABEL_52;
    v34 = v33 + 1;
    v35 = (char *)this + 1328;
LABEL_56:
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v31, (uint64_t)v35, v34, 8);
    LODWORD(v33) = *(_DWORD *)v32;
    goto LABEL_52;
  }
  v31 = (char *)this + 784;
  v32 = (char *)this + 792;
  v33 = *((unsigned int *)this + 198);
  if (v33 >= *((_DWORD *)this + 199))
  {
    v34 = v33 + 1;
    v35 = (char *)this + 800;
    goto LABEL_56;
  }
LABEL_52:
  *(_QWORD *)(*(_QWORD *)v31 + 8 * v33) = a2;
  ++*(_DWORD *)v32;
LABEL_31:
  if ((v37 & 0xFE) == 4)
    return sub_1C4E8C6FC((uint64_t)&v38);
  return result;
}

uint64_t llvm::SCCPInstVisitor::visitBinaryOperator(llvm::SCCPInstVisitor *this, llvm::Instruction *a2)
{
  unsigned int v2;
  int v5;
  uint64_t *v6;
  const void **v7;
  const void **v8;
  __int16 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char *v14;
  const void **v15;
  const void **v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  llvm::Instruction *v27;
  _QWORD *v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  _QWORD *v32;
  void *Constant;
  void *v34;
  BOOL v35;
  int v36;
  int v37;
  void **v38;
  void *v39;
  BOOL v40;
  int v41;
  unsigned int v42;
  __int16 v43;
  unsigned int PrimitiveSizeInBits;
  void *v45;
  llvm::Type *v46;
  unsigned int v47;
  void *v48;
  void *v49;
  size_t v50;
  size_t v51;
  size_t v52;
  size_t v53;
  int v54;
  __int16 v55;
  unint64_t v56;
  size_t v57;
  unint64_t v58;
  size_t v59;
  void *v60;
  __int16 v61;
  void *v62;
  unsigned int v63;
  void *v64;
  unsigned int v65;
  void *__src;
  unsigned int v67;
  void *v68;
  unsigned int v69;
  void *v70;
  unsigned int v71;
  void *v72;
  unsigned int v73;
  const void *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  const void *v79;
  uint64_t v80;
  unsigned int v81;
  void *v82;
  int v83;
  void *__dst;
  __int128 v85;
  __int128 v86;
  __int16 v87;
  __int16 v88;
  void *v89;
  unsigned int v90;
  void *v91;
  unsigned int v92;
  __int16 v93;
  void *v94;
  unsigned int v95;
  void *v96;
  unsigned int v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v5 = *((_DWORD *)a2 + 5);
  if ((v5 & 0x40000000) != 0)
    v6 = (uint64_t *)*((_QWORD *)a2 - 1);
  else
    v6 = (uint64_t *)((char *)a2 - 32 * (v5 & 0x7FFFFFF));
  v7 = (const void **)sub_1C5F71F80((uint64_t)this, *v6);
  v8 = v7;
  v9 = *(unsigned __int8 *)v7;
  v93 = v9;
  v10 = *(unsigned __int8 *)v7;
  if ((v10 - 4) < 2)
  {
    v11 = *((unsigned int *)v7 + 4);
    v95 = v11;
    if (v11 > 0x40)
    {
      v50 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
      v94 = (void *)operator new[]();
      memcpy(v94, v8[1], v50);
    }
    else
    {
      v94 = (void *)v7[1];
    }
    v12 = *((unsigned int *)v8 + 8);
    v97 = v12;
    if (v12 > 0x40)
    {
      v51 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
      v96 = (void *)operator new[]();
      memcpy(v96, v8[3], v51);
    }
    else
    {
      v96 = (void *)v8[3];
    }
    v93 = v9 | (*((unsigned __int8 *)v8 + 1) << 8);
  }
  else if ((v10 - 2) < 2)
  {
    v94 = (void *)v7[1];
  }
  v13 = *((_DWORD *)a2 + 5);
  if ((v13 & 0x40000000) != 0)
    v14 = (char *)*((_QWORD *)a2 - 1);
  else
    v14 = (char *)a2 - 32 * (v13 & 0x7FFFFFF);
  v15 = (const void **)sub_1C5F71F80((uint64_t)this, *((_QWORD *)v14 + 4));
  v16 = v15;
  v17 = *(unsigned __int8 *)v15;
  v88 = *(unsigned __int8 *)v15;
  v18 = *(unsigned __int8 *)v15;
  if ((v18 - 4) < 2)
  {
    v19 = *((unsigned int *)v15 + 4);
    v90 = v19;
    if (v19 > 0x40)
    {
      v52 = ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8;
      v89 = (void *)operator new[]();
      memcpy(v89, v16[1], v52);
    }
    else
    {
      v89 = (void *)v15[1];
    }
    v20 = *((unsigned int *)v16 + 8);
    v92 = v20;
    if (v20 > 0x40)
    {
      v53 = ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8;
      v91 = (void *)operator new[]();
      memcpy(v91, v16[3], v53);
    }
    else
    {
      v91 = (void *)v16[3];
    }
    v88 = v17 | (*((unsigned __int8 *)v16 + 1) << 8);
  }
  else if ((v18 - 2) < 2)
  {
    v89 = (void *)v15[1];
  }
  result = (uint64_t)this + 136;
  v22 = *((_QWORD *)this + 17);
  __dst = a2;
  v23 = *((_DWORD *)this + 38);
  if (v23)
  {
    v24 = v23 - 1;
    v25 = (v23 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v26 = v22 + 48 * v25;
    v27 = *(llvm::Instruction **)v26;
    if (*(llvm::Instruction **)v26 == a2)
      goto LABEL_38;
    v28 = 0;
    v29 = 1;
    while (v27 != (llvm::Instruction *)-4096)
    {
      if (v28)
        v30 = 0;
      else
        v30 = v27 == (llvm::Instruction *)-8192;
      if (v30)
        v28 = (_QWORD *)v26;
      v31 = v25 + v29++;
      v25 = v31 & v24;
      v26 = v22 + 48 * (v31 & v24);
      v27 = *(llvm::Instruction **)v26;
      if (*(llvm::Instruction **)v26 == a2)
        goto LABEL_38;
    }
    if (v28)
      v32 = v28;
    else
      v32 = (_QWORD *)v26;
  }
  else
  {
    v32 = 0;
  }
  result = (uint64_t)sub_1C5F7C8F0(result, (uint64_t *)&__dst, v32);
  v26 = result;
  *(_QWORD *)result = __dst;
  *(_WORD *)(result + 8) = 0;
LABEL_38:
  if (*(_BYTE *)(v26 + 8) == 6 || (v93 & 0xFE) == 0 || (v88 & 0xFE) == 0)
    goto LABEL_131;
  if (v93 == 6 && v88 == 6)
  {
LABEL_130:
    result = sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
    goto LABEL_131;
  }
  if (v93 == 2)
    goto LABEL_44;
  if (v88 != 2)
    goto LABEL_86;
  if ((v93 & 0xFE) != 4)
    goto LABEL_56;
  LODWORD(v85) = v95;
  if (v95 > 0x40)
  {
    __dst = (void *)operator new[]();
    memcpy(__dst, v94, (((unint64_t)v85 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __dst = v94;
  }
  llvm::APInt::operator+=((uint64_t)&__dst, 1uLL);
  v17 = v85;
  v34 = __dst;
  LODWORD(v85) = 0;
  if (v97 > 0x40)
    v35 = memcmp(v96, __dst, (((unint64_t)v97 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v35 = v96 == __dst;
  v36 = v35;
  if (v17 >= 0x41)
  {
    if (v34)
    {
      MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
      if (v85 >= 0x41)
      {
        if (__dst)
          MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
      }
    }
  }
  if (v36)
  {
LABEL_44:
    Constant = llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v93);
  }
  else
  {
LABEL_56:
    v37 = *((_DWORD *)a2 + 5);
    if ((v37 & 0x40000000) != 0)
      v38 = (void **)*((_QWORD *)a2 - 1);
    else
      v38 = (void **)((char *)a2 - 32 * (v37 & 0x7FFFFFF));
    Constant = *v38;
  }
  if (v88 == 2)
    goto LABEL_61;
  if ((v88 & 0xFE) == 4)
  {
    LODWORD(v85) = v90;
    if (v90 > 0x40)
    {
      __dst = (void *)operator new[]();
      memcpy(__dst, v89, (((unint64_t)v85 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      __dst = v89;
    }
    llvm::APInt::operator+=((uint64_t)&__dst, 1uLL);
    v2 = v85;
    v39 = __dst;
    LODWORD(v85) = 0;
    if (v92 > 0x40)
    {
      v60 = __dst;
      v54 = memcmp(v91, __dst, (((unint64_t)v92 + 63) >> 3) & 0x3FFFFFF8);
      v39 = v60;
      v40 = v54 == 0;
    }
    else
    {
      v40 = v91 == __dst;
    }
    v17 = v40;
    if (v2 >= 0x41)
    {
      if (v39)
      {
        MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
        if (v85 >= 0x41)
        {
          if (__dst)
            MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
        }
      }
    }
    if (v17)
LABEL_61:
      llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v88);
  }
  v41 = *((unsigned __int8 *)a2 + 16) - 28;
  __dst = *(void **)this;
  v85 = 0u;
  v86 = 0u;
  v87 = 257;
  result = sub_1C4E6D628(v41);
  if (result)
  {
    v42 = *(unsigned __int8 *)(result + 16);
    if (v42 <= 0x14)
    {
      if (v42 - 11 < 2)
        goto LABEL_131;
      LOWORD(__dst) = 0;
      sub_1C4E8C21C((uint64_t)&__dst, result, 1u);
      v43 = __dst;
      LOWORD(v79) = __dst;
      if (__dst - 4 < 2)
      {
        v17 = DWORD2(v85);
        v81 = DWORD2(v85);
        if (DWORD2(v85) > 0x40)
        {
          v55 = __dst;
          v56 = (((unint64_t)DWORD2(v85) + 63) >> 3) & 0x3FFFFFF8;
          v49 = (void *)operator new[]();
          v57 = v56;
          v43 = v55;
          memcpy(v49, (const void *)v85, v57);
        }
        else
        {
          v49 = (void *)v85;
        }
        v80 = (uint64_t)v49;
        v2 = DWORD2(v86);
        v83 = DWORD2(v86);
        if (DWORD2(v86) > 0x40)
        {
          v61 = v43;
          v58 = (((unint64_t)DWORD2(v86) + 63) >> 3) & 0x3FFFFFF8;
          Constant = (void *)operator new[]();
          v59 = v58;
          v43 = v61;
          memcpy(Constant, (const void *)v86, v59);
        }
        else
        {
          Constant = (void *)v86;
        }
        v82 = Constant;
        v43 |= BYTE1(__dst) << 8;
        LOWORD(v79) = v43;
      }
      else if (__dst - 2 < 2)
      {
        v80 = v85;
      }
      result = (uint64_t)sub_1C5F721C0((uint64_t)this, (uint64_t)a2, &v79, 0x100000000);
      if ((v43 & 0xFE) == 4)
      {
        if (v2 >= 0x41 && Constant)
        {
          result = MEMORY[0x1CAA32F9C](Constant, 0x1000C8000313F17);
          v17 = v81;
        }
        if (v17 >= 0x41)
        {
          result = v80;
          if (v80)
            result = MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
        }
      }
      if ((__dst & 0xFE) != 4)
        goto LABEL_131;
      if (DWORD2(v86) >= 0x41)
      {
        result = v86;
        if ((_QWORD)v86)
          result = MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
      }
      if (DWORD2(v85) < 0x41)
        goto LABEL_131;
      result = v85;
      if (!(_QWORD)v85)
        goto LABEL_131;
LABEL_129:
      result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      goto LABEL_131;
    }
  }
LABEL_86:
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 13)
    goto LABEL_130;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a2);
  LODWORD(v85) = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits <= 0x40)
  {
    if (PrimitiveSizeInBits)
      v45 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
    else
      v45 = 0;
    __dst = v45;
    LODWORD(v86) = PrimitiveSizeInBits;
    goto LABEL_91;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__dst, -1, 1);
  LODWORD(v86) = v85;
  if (v85 <= 0x40)
  {
LABEL_91:
    *((_QWORD *)&v85 + 1) = __dst;
    goto LABEL_92;
  }
  *((_QWORD *)&v85 + 1) = operator new[]();
  memcpy(*((void **)&v85 + 1), __dst, (((unint64_t)v86 + 63) >> 3) & 0x3FFFFFF8);
LABEL_92:
  v46 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v46 = (llvm::Type *)**((_QWORD **)v46 + 2);
  v47 = llvm::Type::getPrimitiveSizeInBits(v46);
  v71 = v47;
  if (v47 <= 0x40)
  {
    if (v47)
      v48 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v47);
    else
      v48 = 0;
    v70 = v48;
    v73 = v47;
    goto LABEL_98;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v70, -1, 1);
  v73 = v71;
  if (v71 <= 0x40)
  {
LABEL_98:
    v72 = v70;
    goto LABEL_99;
  }
  v72 = (void *)operator new[]();
  memcpy(v72, v70, (((unint64_t)v73 + 63) >> 3) & 0x3FFFFFF8);
LABEL_99:
  if ((v93 & 0xFE) == 4)
  {
    if (v85 > 0x40 || v95 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&__dst, v95);
      if (v85 <= 0x40)
        __dst = v94;
      else
        memcpy(__dst, v94, (((unint64_t)v85 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      __dst = v94;
      LODWORD(v85) = v95;
    }
    if (v86 > 0x40 || v97 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&v85 + 8, v97);
      if (v86 <= 0x40)
        *((_QWORD *)&v85 + 1) = v96;
      else
        memcpy(*((void **)&v85 + 1), v96, (((unint64_t)v86 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *((_QWORD *)&v85 + 1) = v96;
      LODWORD(v86) = v97;
    }
  }
  if ((v88 & 0xFE) == 4)
  {
    if (v71 > 0x40 || v90 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&v70, v90);
      if (v71 <= 0x40)
        v70 = v89;
      else
        memcpy(v70, v89, (((unint64_t)v71 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v70 = v89;
      v71 = v90;
    }
    if (v73 > 0x40 || v92 > 0x40)
    {
      llvm::APInt::reallocate((uint64_t)&v72, v92);
      if (v73 <= 0x40)
        v72 = v91;
      else
        memcpy(v72, v91, (((unint64_t)v73 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v72 = v91;
      v73 = v92;
    }
  }
  llvm::ConstantRange::binaryOp((llvm::ConstantRange *)&v70, (unsigned int *)&__dst, *((unsigned __int8 *)a2 + 16) - 28, (llvm::ConstantRange *)&__src);
  v63 = v67;
  if (v67 > 0x40)
  {
    v62 = (void *)operator new[]();
    memcpy(v62, __src, (((unint64_t)v63 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v62 = __src;
  }
  v65 = v69;
  if (v69 > 0x40)
  {
    v64 = (void *)operator new[]();
    memcpy(v64, v68, (((unint64_t)v65 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v64 = v68;
  }
  sub_1C4E8E6E0((uint64_t)&v62, 0, (__int16 *)&v74);
  result = (uint64_t)sub_1C5F721C0((uint64_t)this, (uint64_t)a2, &v74, 0x100000000);
  if ((v74 & 0xFE) == 4)
  {
    if (v78 >= 0x41)
    {
      result = v77;
      if (v77)
        result = MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
    }
    if (v76 >= 0x41)
    {
      result = v75;
      if (v75)
        result = MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
    }
  }
  if (v65 >= 0x41)
  {
    result = (uint64_t)v64;
    if (v64)
      result = MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
  }
  if (v63 >= 0x41)
  {
    result = (uint64_t)v62;
    if (v62)
      result = MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
  }
  if (v69 >= 0x41)
  {
    result = (uint64_t)v68;
    if (v68)
      result = MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
  }
  if (v67 >= 0x41)
  {
    result = (uint64_t)__src;
    if (__src)
      result = MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  if (v73 >= 0x41)
  {
    result = (uint64_t)v72;
    if (v72)
      result = MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
  }
  if (v71 >= 0x41)
  {
    result = (uint64_t)v70;
    if (v70)
      result = MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
  }
  if (v86 >= 0x41)
  {
    result = *((_QWORD *)&v85 + 1);
    if (*((_QWORD *)&v85 + 1))
      result = MEMORY[0x1CAA32F9C](*((_QWORD *)&v85 + 1), 0x1000C8000313F17);
  }
  if (v85 >= 0x41)
  {
    result = (uint64_t)__dst;
    if (__dst)
      goto LABEL_129;
  }
LABEL_131:
  if ((v88 & 0xFE) == 4)
  {
    if (v92 >= 0x41)
    {
      result = (uint64_t)v91;
      if (v91)
        result = MEMORY[0x1CAA32F9C](v91, 0x1000C8000313F17);
    }
    if (v90 >= 0x41)
    {
      result = (uint64_t)v89;
      if (v89)
        result = MEMORY[0x1CAA32F9C](v89, 0x1000C8000313F17);
    }
  }
  if ((v93 & 0xFE) == 4)
  {
    if (v97 >= 0x41)
    {
      result = (uint64_t)v96;
      if (v96)
        result = MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
    }
    if (v95 >= 0x41)
    {
      result = (uint64_t)v94;
      if (v94)
        return MEMORY[0x1CAA32F9C](v94, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t llvm::SCCPInstVisitor::visitCmpInst(llvm::SCCPInstVisitor *this, llvm::CmpInst *a2)
{
  llvm::Constant **v2;
  uint64_t v5;
  char *v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  uint64_t result;
  llvm::Type *v29;
  const llvm::APInt *v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t **v34;
  llvm::ConstantExpr *v35;
  __int16 v36;
  void *v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  llvm::CmpInst *v43;
  _QWORD *v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  _QWORD *v48;
  __int16 v49;
  uint64_t v50;
  unsigned int v51;
  void *v52;
  uint64_t v53;
  BOOL v54;
  char v55;
  size_t v56;
  size_t v57;
  size_t v58;
  llvm::CmpInst *v59;
  const void *v60;
  void *v61;
  unsigned int v62;
  char *v63;
  unsigned int v64;
  void *v65;
  void *__src;
  unsigned int v67;
  void *v68;
  unsigned int v69;
  llvm::CmpInst *v70;
  llvm::Constant *v71;
  unsigned int v72;
  void *v73;
  unsigned int v74;
  void *__s2;
  unsigned __int16 v76[4];
  unsigned int v77;
  void *v78;
  unsigned int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v6 = (char *)this + 136;
  v5 = *((_QWORD *)this + 17);
  v70 = a2;
  v7 = *((_DWORD *)this + 38);
  v8 = a2 >> 4;
  if (!v7)
  {
    v17 = 0;
LABEL_15:
    v11 = sub_1C5F7C8F0((uint64_t)this + 136, (uint64_t *)&v70, v17);
    *v11 = v70;
    *((_WORD *)v11 + 4) = 0;
    goto LABEL_16;
  }
  v9 = v7 - 1;
  v10 = v9 & (v8 ^ (a2 >> 9));
  v11 = (_QWORD *)(v5 + 48 * v10);
  v12 = *v11;
  if ((llvm::CmpInst *)*v11 != a2)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (_QWORD *)(v5 + 48 * v10);
      v12 = *v11;
      if ((llvm::CmpInst *)*v11 == a2)
        goto LABEL_16;
    }
    if (v13)
      v17 = v13;
    else
      v17 = v11;
    goto LABEL_15;
  }
LABEL_16:
  if ((v11[1] & 0xFE) != 0 && *((_WORD *)v11 + 4) != 2)
  {
    if ((v11[1] & 0xFE) != 4)
      return sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
    *(_DWORD *)v76 = *((_DWORD *)v11 + 6);
    if (*(_DWORD *)v76 > 0x40u)
    {
      __s2 = (void *)operator new[]();
      memcpy(__s2, (const void *)v11[2], (((unint64_t)*(unsigned int *)v76 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      __s2 = (void *)v11[2];
    }
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    v23 = *(_DWORD *)v76;
    v24 = __s2;
    *(_DWORD *)v76 = 0;
    v25 = *((unsigned int *)v11 + 10);
    if (v25 > 0x40)
      v26 = memcmp((const void *)v11[4], __s2, ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v26 = v11[4] == (_QWORD)__s2;
    v27 = v26;
    if (v23 >= 0x41)
    {
      if (v24)
      {
        MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
        if (*(_DWORD *)v76 >= 0x41u)
        {
          if (__s2)
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        }
      }
    }
    if ((v27 & 1) == 0)
      return sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
  }
  v19 = *((_QWORD *)a2 - 4);
  v20 = (unsigned __int8 *)sub_1C5F71F80((uint64_t)this, *((_QWORD *)a2 - 8));
  v21 = (uint64_t)v20;
  LOWORD(__s2) = *v20;
  v22 = *v20;
  if ((v22 - 4) < 2)
  {
    v77 = *((_DWORD *)v20 + 4);
    if (v77 > 0x40)
    {
      *(_QWORD *)v76 = operator new[]();
      memcpy(*(void **)v76, *(const void **)(v21 + 8), (((unint64_t)v77 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *(_QWORD *)v76 = *((_QWORD *)v20 + 1);
    }
    v79 = *(_DWORD *)(v21 + 32);
    if (v79 > 0x40)
    {
      v78 = (void *)operator new[]();
      memcpy(v78, *(const void **)(v21 + 24), (((unint64_t)v79 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v78 = *(void **)(v21 + 24);
    }
    BYTE1(__s2) = *(_BYTE *)(v21 + 1);
  }
  else if ((v22 - 2) < 2)
  {
    *(_QWORD *)v76 = *((_QWORD *)v20 + 1);
  }
  result = sub_1C5F71F80((uint64_t)this, v19);
  v31 = result;
  v32 = *(_BYTE *)result;
  LOWORD(v70) = *(unsigned __int8 *)result;
  v33 = *(unsigned __int8 *)result;
  if ((v33 - 4) < 2)
  {
    v72 = *(_DWORD *)(result + 16);
    if (v72 > 0x40)
    {
      v71 = (llvm::Constant *)operator new[]();
      result = (uint64_t)memcpy(v71, *(const void **)(v31 + 8), (((unint64_t)v72 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v71 = *(llvm::Constant **)(result + 8);
    }
    v74 = *(_DWORD *)(v31 + 32);
    if (v74 > 0x40)
    {
      v73 = (void *)operator new[]();
      result = (uint64_t)memcpy(v73, *(const void **)(v31 + 24), (((unint64_t)v74 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v73 = *(void **)(v31 + 24);
    }
    v32 = (char)v70;
    LOWORD(v70) = v70 | (*(unsigned __int8 *)(v31 + 1) << 8);
  }
  else if ((v33 - 2) < 2)
  {
    v71 = *(llvm::Constant **)(result + 8);
  }
  v34 = *(uint64_t ***)a2;
  if ((__s2 & 0xFE) == 0 || (v32 & 0xFE) == 0)
  {
    result = (uint64_t)llvm::UndefValue::get(*(llvm::UndefValue **)a2, v29);
    goto LABEL_55;
  }
  v21 = *((_WORD *)a2 + 9) & 0x3FLL;
  if (__s2 != 2 || v32 != 2)
  {
    if ((*((_WORD *)a2 + 9) & 0x3E) != 0x20)
      goto LABEL_80;
    if (__s2 == 3)
    {
      if (v32 != 2)
        goto LABEL_80;
    }
    else if (__s2 != 2 || v32 != 3)
    {
      goto LABEL_80;
    }
    if (*(llvm::Constant **)v76 == v71)
    {
      if ((_DWORD)v21 == 33)
      {
LABEL_83:
        result = (uint64_t)llvm::ConstantInt::getTrue(v34, v29, v30);
        goto LABEL_55;
      }
LABEL_123:
      result = (uint64_t)llvm::ConstantInt::getFalse(v34, v29, v30);
      goto LABEL_55;
    }
LABEL_80:
    if ((__s2 & 0xFE) != 4 || (v32 & 0xFE) != 4)
      goto LABEL_85;
    v2 = &v71;
    if (llvm::ConstantRange::icmp((int)v76, *((_WORD *)a2 + 9) & 0x3F, (int)&v71))
      goto LABEL_83;
    result = llvm::ConstantRange::icmp((int)v76, dword_1C8675F0C[v21], (int)&v71);
    if (!(_DWORD)result)
      goto LABEL_85;
    goto LABEL_123;
  }
  v35 = (llvm::ConstantExpr *)(*((_WORD *)a2 + 9) & 0x3FLL);
  if (v21 <= 0xF)
    result = llvm::ConstantExpr::getFCmp(v35, *(uint64_t ****)v76, v71, 0);
  else
    result = (uint64_t)llvm::ConstantExpr::getICmp(v35, *(unsigned __int8 **)v76, v71, 0);
LABEL_55:
  if (result)
  {
    if (*(unsigned __int8 *)(result + 16) - 11 >= 2)
    {
      LOWORD(v65) = 0;
      sub_1C4E8C21C((uint64_t)&v65, result, 0);
      v36 = v65;
      LOWORD(v60) = v65;
      if (v65 - 4 < 2)
      {
        LODWORD(v21) = v67;
        v62 = v67;
        if (v67 > 0x40)
        {
          v56 = (((unint64_t)v67 + 63) >> 3) & 0x3FFFFFF8;
          v37 = (void *)operator new[]();
          memcpy(v37, __src, v56);
        }
        else
        {
          v37 = __src;
        }
        v61 = v37;
        LODWORD(v2) = v69;
        v64 = v69;
        if (v69 > 0x40)
        {
          v57 = (((unint64_t)v69 + 63) >> 3) & 0x3FFFFFF8;
          v6 = (char *)operator new[]();
          memcpy(v6, v68, v57);
        }
        else
        {
          v6 = (char *)v68;
        }
        v63 = v6;
        v36 |= BYTE1(v65) << 8;
        LOWORD(v60) = v36;
      }
      else if (v65 - 2 < 2)
      {
        v61 = __src;
      }
      result = (uint64_t)sub_1C5F721C0((uint64_t)this, (uint64_t)a2, &v60, 0x100000000);
      if ((v36 & 0xFE) == 4)
      {
        if (v2 >= 0x41 && v6)
        {
          result = MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
          LODWORD(v21) = v62;
        }
        if (v21 >= 0x41)
        {
          result = (uint64_t)v61;
          if (v61)
            result = MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
        }
      }
      if ((v65 & 0xFE) == 4)
      {
        if (v69 >= 0x41)
        {
          result = (uint64_t)v68;
          if (v68)
            result = MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
        }
        if (v67 >= 0x41)
        {
          result = (uint64_t)__src;
          if (__src)
            result = MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        }
      }
    }
    goto LABEL_104;
  }
LABEL_85:
  if ((__s2 & 0xFE) == 0 || (v70 & 0xFE) == 0)
  {
    v59 = a2;
    v38 = *((_DWORD *)this + 38);
    if (v38)
    {
      v39 = *((_QWORD *)this + 17);
      v40 = v38 - 1;
      v41 = v40 & (v8 ^ (a2 >> 9));
      v42 = v39 + 48 * v41;
      v43 = *(llvm::CmpInst **)v42;
      if (*(llvm::CmpInst **)v42 == a2)
      {
LABEL_102:
        v49 = *(_WORD *)(v42 + 8);
        if (v49 != 2)
        {
          if ((v49 & 0xFE) != 4)
            goto LABEL_104;
          v50 = *(unsigned int *)(v42 + 24);
          LODWORD(__src) = v50;
          if (v50 > 0x40)
          {
            v58 = ((unint64_t)(v50 + 63) >> 3) & 0x3FFFFFF8;
            v65 = (void *)operator new[]();
            memcpy(v65, *(const void **)(v42 + 16), v58);
          }
          else
          {
            v65 = *(void **)(v42 + 16);
          }
          result = llvm::APInt::operator+=((uint64_t)&v65, 1uLL);
          v51 = __src;
          v52 = v65;
          LODWORD(__src) = 0;
          v53 = *(unsigned int *)(v42 + 40);
          if (v53 > 0x40)
          {
            result = memcmp(*(const void **)(v42 + 32), v65, ((unint64_t)(v53 + 63) >> 3) & 0x3FFFFFF8);
            v54 = (_DWORD)result == 0;
          }
          else
          {
            v54 = *(_QWORD *)(v42 + 32) == (_QWORD)v65;
          }
          v55 = v54;
          if (v51 >= 0x41)
          {
            if (v52)
            {
              result = MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
              if (__src >= 0x41)
              {
                result = (uint64_t)v65;
                if (v65)
                  result = MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
              }
            }
          }
          if ((v55 & 1) == 0)
            goto LABEL_104;
        }
        goto LABEL_103;
      }
      v44 = 0;
      v45 = 1;
      while (v43 != (llvm::CmpInst *)-4096)
      {
        if (v44)
          v46 = 0;
        else
          v46 = v43 == (llvm::CmpInst *)-8192;
        if (v46)
          v44 = (_QWORD *)v42;
        v47 = v41 + v45++;
        v41 = v47 & v40;
        v42 = v39 + 48 * v41;
        v43 = *(llvm::CmpInst **)v42;
        if (*(llvm::CmpInst **)v42 == a2)
          goto LABEL_102;
      }
      if (v44)
        v48 = v44;
      else
        v48 = (_QWORD *)v42;
    }
    else
    {
      v48 = 0;
    }
    result = (uint64_t)sub_1C5F7C8F0((uint64_t)v6, (uint64_t *)&v59, v48);
    v42 = result;
    *(_QWORD *)result = v59;
    *(_WORD *)(result + 8) = 0;
    goto LABEL_102;
  }
LABEL_103:
  result = sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
LABEL_104:
  if ((v70 & 0xFE) == 4)
  {
    if (v74 >= 0x41)
    {
      result = (uint64_t)v73;
      if (v73)
        result = MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
    }
    if (v72 >= 0x41)
    {
      result = (uint64_t)v71;
      if (v71)
        result = MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
    }
  }
  if ((__s2 & 0xFE) == 4)
  {
    if (v79 >= 0x41)
    {
      result = (uint64_t)v78;
      if (v78)
        result = MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
    }
    if (v77 >= 0x41)
    {
      result = *(_QWORD *)v76;
      if (*(_QWORD *)v76)
        return MEMORY[0x1CAA32F9C](*(_QWORD *)v76, 0x1000C8000313F17);
    }
  }
  return result;
}

void llvm::SCCPInstVisitor::visitGetElementPtrInst(llvm::SCCPInstVisitor *this, llvm::GetElementPtrInst **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD *v16;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 v24;
  int v25;
  llvm::ValueHandleBase *Constant;
  uint64_t v27;
  unsigned int v28;
  void *v29;
  BOOL v30;
  char v31;
  int v32;
  void *v33;
  char v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  uint64_t ElementPtr;
  unsigned int v41;
  void *__s2;
  unsigned int v43;
  llvm::GetElementPtrInst **v44;
  void *__src;
  unsigned int v46;
  void *__s1;
  unsigned int v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[9];

  v51[8] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 17);
  v4 = (char *)this + 136;
  v5 = v6;
  v44 = a2;
  v7 = *((_DWORD *)v4 + 4);
  if (!v7)
  {
    v16 = 0;
LABEL_15:
    v10 = sub_1C5F7C8F0((uint64_t)v4, (uint64_t *)&v44, v16);
    *v10 = v44;
    *((_WORD *)v10 + 4) = 0;
    goto LABEL_16;
  }
  v8 = v7 - 1;
  v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
  v10 = (_QWORD *)(v5 + 48 * v9);
  v11 = *v10;
  if ((llvm::GetElementPtrInst **)*v10 != a2)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (_QWORD *)(v5 + 48 * v9);
      v11 = *v10;
      if ((llvm::GetElementPtrInst **)*v10 == a2)
        goto LABEL_16;
    }
    if (v12)
      v16 = v12;
    else
      v16 = v10;
    goto LABEL_15;
  }
LABEL_16:
  if ((v10[1] & 0xFE) != 0 && *((_WORD *)v10 + 4) != 2)
  {
    if ((v10[1] & 0xFE) != 4)
      goto LABEL_80;
    LODWORD(v50) = *((_DWORD *)v10 + 6);
    if (v50 > 0x40)
    {
      v49 = (void *)operator new[]();
      memcpy(v49, (const void *)v10[2], (((unint64_t)v50 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v49 = (void *)v10[2];
    }
    llvm::APInt::operator+=((uint64_t)&v49, 1uLL);
    v35 = v50;
    v36 = v49;
    LODWORD(v50) = 0;
    v37 = *((unsigned int *)v10 + 10);
    if (v37 > 0x40)
      v38 = memcmp((const void *)v10[4], v49, ((unint64_t)(v37 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v38 = v10[4] == (_QWORD)v49;
    v39 = v38;
    if (v35 >= 0x41)
    {
      if (v36)
      {
        MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
        if (v50 >= 0x41)
        {
          if (v49)
            MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
        }
      }
    }
    if ((v39 & 1) == 0)
    {
LABEL_80:
      sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
      return;
    }
  }
  v49 = v51;
  v50 = 0x800000000;
  v18 = *((_DWORD *)a2 + 5);
  v19 = v18 & 0x7FFFFFF;
  if ((v18 & 0x7FFFFFFu) >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, (uint64_t)v51, v19, 8);
    LODWORD(v19) = *((_DWORD *)a2 + 5) & 0x7FFFFFF;
  }
  if ((_DWORD)v19)
  {
    v20 = 0;
    v21 = 32 * v19;
    while (1)
    {
      v22 = (unsigned __int8 *)sub_1C5F71F80((uint64_t)this, (uint64_t)*(&a2[v20 / 8] - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
      v23 = v22;
      v24 = *v22;
      LOWORD(v44) = *v22;
      v25 = *v22;
      if ((v25 - 4) < 2)
      {
        v46 = *((_DWORD *)v22 + 4);
        if (v46 > 0x40)
        {
          __src = (void *)operator new[]();
          memcpy(__src, *((const void **)v23 + 1), (((unint64_t)v46 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          __src = (void *)*((_QWORD *)v22 + 1);
        }
        v48 = *((_DWORD *)v23 + 8);
        if (v48 > 0x40)
        {
          __s1 = (void *)operator new[]();
          memcpy(__s1, *((const void **)v23 + 3), (((unint64_t)v48 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          __s1 = (void *)*((_QWORD *)v23 + 3);
        }
        v24 = v44;
        LOWORD(v44) = v44 | (v23[1] << 8);
      }
      else if ((v25 - 2) < 2)
      {
        __src = (void *)*((_QWORD *)v22 + 1);
      }
      if ((v24 & 0xFE) == 0)
        goto LABEL_50;
      if (v24 != 2)
      {
        if ((v24 & 0xFE) != 4)
          break;
        v43 = v46;
        if (v46 > 0x40)
        {
          __s2 = (void *)operator new[]();
          memcpy(__s2, __src, (((unint64_t)v43 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          __s2 = __src;
        }
        llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
        v28 = v43;
        v29 = __s2;
        v43 = 0;
        if (v48 > 0x40)
        {
          v41 = v28;
          v32 = memcmp(__s1, __s2, (((unint64_t)v48 + 63) >> 3) & 0x3FFFFFF8);
          v28 = v41;
          v30 = v32 == 0;
        }
        else
        {
          v30 = __s1 == __s2;
        }
        v31 = v30;
        if (v28 >= 0x41)
        {
          if (v29)
          {
            v33 = v29;
            v34 = v31;
            MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
            v31 = v34;
            if (v43 >= 0x41)
            {
              if (__s2)
              {
                MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
                v31 = v34;
              }
            }
          }
        }
        if ((v31 & 1) == 0)
          break;
      }
      Constant = llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v44);
      if (Constant)
      {
        v27 = v50;
        if (v50 >= (unint64_t)HIDWORD(v50))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v49, (uint64_t)v51, v50 + 1, 8);
          v27 = v50;
        }
        *((_QWORD *)v49 + v27) = Constant;
        LODWORD(v50) = v50 + 1;
        LOBYTE(Constant) = 1;
      }
      else
      {
        sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
      }
LABEL_51:
      if ((v44 & 0xFE) == 4)
      {
        if (v48 >= 0x41 && __s1)
          MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
        if (v46 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      }
      if ((Constant & 1) == 0)
        goto LABEL_83;
      v20 += 32;
      if (v21 == v20)
        goto LABEL_81;
    }
    sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
LABEL_50:
    LOBYTE(Constant) = 0;
    goto LABEL_51;
  }
LABEL_81:
  ElementPtr = llvm::ConstantExpr::getGetElementPtr(a2[8], *(uint64_t **)v49, (llvm::Value *)((char *)v49 + 8), (8 * v50 - 8) >> 3, 0, 0, 0);
  if (*(unsigned __int8 *)(ElementPtr + 16) - 11 >= 2)
    sub_1C5F70B74((uint64_t)this, (uint64_t)a2, ElementPtr);
LABEL_83:
  if (v49 != v51)
    free(v49);
}

int32x2_t llvm::SCCPInstVisitor::visitStoreInst(llvm::SCCPInstVisitor *this, llvm::StoreInst *a2)
{
  uint64_t v4;
  int32x2_t result;
  uint64_t v6;
  _BYTE *v7;
  const void **v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  const void **v20;
  size_t v21;
  const void **v22;
  __int16 v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  void *v27;
  unsigned int v28;
  void *v29;
  unsigned int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(**((_QWORD **)a2 - 8) + 8) == 16)
    return result;
  if (!*((_DWORD *)this + 48))
    return result;
  v4 = *((_QWORD *)a2 - 4);
  if (*(_BYTE *)(v4 + 16) != 3)
    return result;
  v25 = 0;
  if (!sub_1C5F7F258(*((_QWORD *)this + 23), *((_DWORD *)this + 50), v4, &v25))
    return result;
  v6 = v25;
  if (v25 == *((_QWORD *)this + 23) + 48 * *((unsigned int *)this + 50))
    return result;
  v7 = (_BYTE *)(v25 + 8);
  v8 = (const void **)sub_1C5F71F80((uint64_t)this, *((_QWORD *)a2 - 8));
  v9 = *(unsigned __int8 *)v8;
  v26 = *(unsigned __int8 *)v8;
  if ((v9 - 4) < 2)
  {
    v10 = *((unsigned int *)v8 + 4);
    v28 = v10;
    if (v10 > 0x40)
    {
      v19 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
      v20 = v8;
      v23 = v9;
      v27 = (void *)operator new[]();
      memcpy(v27, v20[1], v19);
      LOWORD(v9) = v23;
      v8 = v20;
    }
    else
    {
      v27 = (void *)v8[1];
    }
    v11 = *((unsigned int *)v8 + 8);
    v30 = v11;
    if (v11 > 0x40)
    {
      v21 = ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8;
      v22 = v8;
      v24 = v9;
      v29 = (void *)operator new[]();
      memcpy(v29, v22[3], v21);
      LOWORD(v9) = v24;
      v8 = v22;
    }
    else
    {
      v29 = (void *)v8[3];
    }
    v26 = v9 | (*((unsigned __int8 *)v8 + 1) << 8);
  }
  else if ((v9 - 2) < 2)
  {
    v27 = (void *)v8[1];
  }
  if (sub_1C4E8EE28(v6 + 8, (unsigned __int8 *)&v26, 0x100000000))
  {
    if (*v7 == 6)
    {
      v12 = (char *)this + 784;
      v13 = (char *)this + 792;
      v14 = *((unsigned int *)this + 198);
      if (v14 < *((_DWORD *)this + 199))
      {
LABEL_17:
        *(_QWORD *)(*(_QWORD *)v12 + 8 * v14) = v4;
        ++*(_DWORD *)v13;
        goto LABEL_18;
      }
      v15 = v14 + 1;
      v16 = (char *)this + 800;
    }
    else
    {
      v12 = (char *)this + 1312;
      v13 = (char *)this + 1320;
      v14 = *((unsigned int *)this + 330);
      if (v14 < *((_DWORD *)this + 331))
        goto LABEL_17;
      v15 = v14 + 1;
      v16 = (char *)this + 1328;
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v12, (uint64_t)v16, v15, 8);
    LODWORD(v14) = *(_DWORD *)v13;
    goto LABEL_17;
  }
LABEL_18:
  if ((v26 & 0xFE) == 4)
  {
    if (v30 >= 0x41 && v29)
      MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    if (v28 >= 0x41 && v27)
      MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
  }
  if (*(_WORD *)v7 == 6)
  {
    if ((*(_WORD *)v7 & 0xFE) == 4)
    {
      if (*(_DWORD *)(v6 + 40) >= 0x41u)
      {
        v17 = *(_QWORD *)(v6 + 32);
        if (v17)
          MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
      }
      if (*(_DWORD *)(v6 + 24) >= 0x41u)
      {
        v18 = *(_QWORD *)(v6 + 16);
        if (v18)
          MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
      }
    }
    *(_QWORD *)v6 = -8192;
    result = vadd_s32(*(int32x2_t *)((char *)this + 192), (int32x2_t)0x1FFFFFFFFLL);
    *((int32x2_t *)this + 24) = result;
  }
  return result;
}

uint64_t llvm::SCCPInstVisitor::visitLoadInst(llvm::SCCPInstVisitor *this, llvm::LoadInst *a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  llvm::LoadInst **v9;
  llvm::LoadInst *v10;
  llvm::LoadInst **v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t result;
  llvm::LoadInst **v16;
  uint64_t v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  _QWORD *v30;
  _BYTE *v31;
  const llvm::DataLayout *v32;
  llvm *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  void *v40;
  BOOL v41;
  int v42;
  const void **v43;
  int v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  char *v56;
  unsigned int v57;
  int v58;
  size_t v59;
  size_t v60;
  __int16 v61;
  __int16 v62;
  void *__s2;
  unsigned int v64;
  const void *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  __int16 v70;
  void *v71;
  unsigned int v72;
  void *v73;
  unsigned int v74;
  llvm::LoadInst *v75;
  void *v76;
  unsigned int v77;
  void *v78;
  unsigned int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 16 || (*((_WORD *)a2 + 9) & 1) != 0)
    return sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
  v4 = *((_QWORD *)this + 17);
  v75 = a2;
  v5 = *((_DWORD *)this + 38);
  v6 = a2 >> 4;
  if (v5)
  {
    v7 = v5 - 1;
    v8 = v7 & (v6 ^ (a2 >> 9));
    v9 = (llvm::LoadInst **)(v4 + 48 * v8);
    v10 = *v9;
    if (*v9 == a2)
      goto LABEL_19;
    v11 = 0;
    v12 = 1;
    while (v10 != (llvm::LoadInst *)-4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == (llvm::LoadInst *)-8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (llvm::LoadInst **)(v4 + 48 * v8);
      v10 = *v9;
      if (*v9 == a2)
        goto LABEL_19;
    }
    if (v11)
      v16 = v11;
    else
      v16 = v9;
  }
  else
  {
    v16 = 0;
  }
  v9 = (llvm::LoadInst **)sub_1C5F7C8F0((uint64_t)this + 136, (uint64_t *)&v75, v16);
  *v9 = v75;
  *((_WORD *)v9 + 4) = 0;
LABEL_19:
  if (*((_BYTE *)v9 + 8) == 6)
    return sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
  result = sub_1C5F71F80((uint64_t)this, *((_QWORD *)a2 - 4));
  v17 = result;
  v18 = *(_BYTE *)result;
  LOWORD(v75) = *(unsigned __int8 *)result;
  v19 = *(unsigned __int8 *)result;
  if ((v19 - 4) < 2)
  {
    v77 = *(_DWORD *)(result + 16);
    if (v77 > 0x40)
    {
      v76 = (void *)operator new[]();
      result = (uint64_t)memcpy(v76, *(const void **)(v17 + 8), (((unint64_t)v77 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v76 = *(void **)(result + 8);
    }
    v79 = *(_DWORD *)(v17 + 32);
    if (v79 > 0x40)
    {
      v78 = (void *)operator new[]();
      result = (uint64_t)memcpy(v78, *(const void **)(v17 + 24), (((unint64_t)v79 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v78 = *(void **)(v17 + 24);
    }
    v18 = (char)v75;
    LOWORD(v75) = v75 | (*(unsigned __int8 *)(v17 + 1) << 8);
  }
  else if ((v19 - 2) < 2)
  {
    v76 = *(void **)(result + 8);
  }
  if ((v18 & 0xFE) == 0)
    goto LABEL_97;
  __s2 = a2;
  v20 = *((_DWORD *)this + 38);
  if (!v20)
  {
    v30 = 0;
LABEL_44:
    v24 = sub_1C5F7C8F0((uint64_t)this + 136, (uint64_t *)&__s2, v30);
    *v24 = __s2;
    *((_WORD *)v24 + 4) = 0;
    v18 = (char)v75;
    goto LABEL_45;
  }
  v21 = *((_QWORD *)this + 17);
  v22 = v20 - 1;
  v23 = v22 & (v6 ^ (a2 >> 9));
  v24 = (_QWORD *)(v21 + 48 * v23);
  v25 = *v24;
  if ((llvm::LoadInst *)*v24 != a2)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = v24;
      v29 = v23 + v27++;
      v23 = v29 & v22;
      v24 = (_QWORD *)(v21 + 48 * v23);
      v25 = *v24;
      if ((llvm::LoadInst *)*v24 == a2)
        goto LABEL_45;
    }
    if (v26)
      v30 = v26;
    else
      v30 = v24;
    goto LABEL_44;
  }
LABEL_45:
  if (v18 != 2)
  {
    if ((v18 & 0xFE) != 4)
      goto LABEL_78;
    v64 = v77;
    if (v77 > 0x40)
    {
      __s2 = (void *)operator new[]();
      memcpy(__s2, v76, (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      __s2 = v76;
    }
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    v39 = v64;
    v40 = __s2;
    v64 = 0;
    if (v79 > 0x40)
    {
      v57 = v39;
      v58 = memcmp(v78, __s2, (((unint64_t)v79 + 63) >> 3) & 0x3FFFFFF8);
      v39 = v57;
      v41 = v58 == 0;
    }
    else
    {
      v41 = v78 == __s2;
    }
    v42 = v41;
    if (v39 >= 0x41)
    {
      if (v40)
      {
        MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
        if (v64 >= 0x41)
        {
          if (__s2)
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        }
      }
    }
    if (!v42)
    {
LABEL_78:
      sub_1C5F77F48((__int16 *)&v65, (llvm::ConstantPointerNull **)a2);
      result = (uint64_t)sub_1C5F721C0((uint64_t)this, (uint64_t)a2, &v65, 0x100000000);
      if ((v65 & 0xFE) != 4)
        goto LABEL_97;
      if (v69 >= 0x41)
      {
        result = v68;
        if (v68)
          result = MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
      }
      if (v67 < 0x41)
        goto LABEL_97;
      result = v66;
      if (!v66)
        goto LABEL_97;
      goto LABEL_82;
    }
  }
  v31 = v24 + 1;
  result = (uint64_t)llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v75);
  v33 = (llvm *)result;
  v34 = *(unsigned __int8 *)(result + 16);
  if (v34 == 3)
  {
    if (!*((_DWORD *)this + 48)
      || (__s2 = 0, !sub_1C5F7F258(*((_QWORD *)this + 23), *((_DWORD *)this + 50), result, &__s2))
      || (v43 = (const void **)__s2, __s2 == (void *)(*((_QWORD *)this + 23) + 48 * *((unsigned int *)this + 50))))
    {
LABEL_72:
      result = (uint64_t)llvm::ConstantFoldLoadFromConstPtr(v33, *(llvm::Constant **)a2, *(llvm::Type **)this, v32);
      if (!result)
        goto LABEL_78;
      if (*(unsigned __int8 *)(result + 16) - 11 < 2)
        goto LABEL_97;
      result = sub_1C4E8C21C((uint64_t)v31, result, 0);
      if (!(_DWORD)result)
        goto LABEL_97;
      if (*v31 == 6)
      {
        v45 = (char *)this + 784;
        v46 = (char *)this + 792;
        v47 = *((unsigned int *)this + 198);
        if (v47 < *((_DWORD *)this + 199))
        {
LABEL_77:
          *(_QWORD *)(*(_QWORD *)v45 + 8 * v47) = a2;
          ++*(_DWORD *)v46;
          goto LABEL_97;
        }
        v53 = v47 + 1;
        v54 = (char *)this + 800;
      }
      else
      {
        v45 = (char *)this + 1312;
        v46 = (char *)this + 1320;
        v47 = *((unsigned int *)this + 330);
        if (v47 < *((_DWORD *)this + 331))
          goto LABEL_77;
        v53 = v47 + 1;
        v54 = (char *)this + 1328;
      }
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v45, (uint64_t)v54, v53, 8);
      LODWORD(v47) = *(_DWORD *)v46;
      goto LABEL_77;
    }
    v44 = *((unsigned __int8 *)__s2 + 8);
    v70 = *((unsigned __int8 *)__s2 + 8);
    if ((v44 - 4) < 2)
    {
      v48 = *((unsigned int *)__s2 + 6);
      v72 = v48;
      if (v48 > 0x40)
      {
        v59 = ((unint64_t)(v48 + 63) >> 3) & 0x3FFFFFF8;
        v61 = v44;
        v71 = (void *)operator new[]();
        memcpy(v71, v43[2], v59);
        LOWORD(v44) = v61;
      }
      else
      {
        v71 = (void *)*((_QWORD *)__s2 + 2);
      }
      v49 = *((unsigned int *)v43 + 10);
      v74 = v49;
      if (v49 > 0x40)
      {
        v60 = ((unint64_t)(v49 + 63) >> 3) & 0x3FFFFFF8;
        v62 = v44;
        v73 = (void *)operator new[]();
        memcpy(v73, v43[4], v60);
        LOWORD(v44) = v62;
      }
      else
      {
        v73 = (void *)v43[4];
      }
      v70 = v44 | (*((unsigned __int8 *)v43 + 9) << 8);
    }
    else if ((v44 - 2) < 2)
    {
      v71 = (void *)*((_QWORD *)__s2 + 2);
    }
    result = sub_1C4E8EE28((uint64_t)v31, (unsigned __int8 *)&v70, 0xA00000100);
    if (!(_DWORD)result)
    {
LABEL_94:
      if ((v70 & 0xFE) != 4)
        goto LABEL_97;
      if (v74 >= 0x41)
      {
        result = (uint64_t)v73;
        if (v73)
          result = MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
      }
      if (v72 < 0x41)
        goto LABEL_97;
      result = (uint64_t)v71;
      if (!v71)
        goto LABEL_97;
LABEL_82:
      result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      goto LABEL_97;
    }
    if (*v31 == 6)
    {
      v50 = (char *)this + 784;
      v51 = (char *)this + 792;
      v52 = *((unsigned int *)this + 198);
      if (v52 < *((_DWORD *)this + 199))
      {
LABEL_93:
        *(_QWORD *)(*(_QWORD *)v50 + 8 * v52) = a2;
        ++*(_DWORD *)v51;
        goto LABEL_94;
      }
      v55 = v52 + 1;
      v56 = (char *)this + 800;
    }
    else
    {
      v50 = (char *)this + 1312;
      v51 = (char *)this + 1320;
      v52 = *((unsigned int *)this + 330);
      if (v52 < *((_DWORD *)this + 331))
        goto LABEL_93;
      v55 = v52 + 1;
      v56 = (char *)this + 1328;
    }
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v50, (uint64_t)v56, v55, 8);
    LODWORD(v52) = *(_DWORD *)v51;
    goto LABEL_93;
  }
  if (v34 != 19)
    goto LABEL_72;
  v35 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 56);
  v36 = **((_QWORD **)a2 - 4);
  v37 = *(_DWORD *)(v36 + 8);
  if ((v37 & 0xFE) == 0x12)
    v37 = *(_DWORD *)(**(_QWORD **)(v36 + 16) + 8);
  if (!v35 || (v38 = *(_QWORD *)(v35 + 112)) == 0)
  {
    if (v37 < 0x100)
      goto LABEL_97;
    goto LABEL_84;
  }
  if ((*(_BYTE *)(v38 + 17) & 1) != 0 || v37 > 0xFF)
LABEL_84:
    result = llvm::SCCPInstVisitor::markOverdefined((uint64_t)this, (uint64_t)v31, (uint64_t)a2);
LABEL_97:
  if ((v75 & 0xFE) == 4)
  {
    if (v79 >= 0x41)
    {
      result = (uint64_t)v78;
      if (v78)
        result = MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
    }
    if (v77 >= 0x41)
    {
      result = (uint64_t)v76;
      if (v76)
        return MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
    }
  }
  return result;
}

__int16 *sub_1C5F77F48(__int16 *result, llvm::ConstantPointerNull **a2)
{
  __int16 *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  __int16 *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD **v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  __int16 *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  __int16 *v31;
  uint64_t v32;
  __int16 *v33;
  uint64_t v34;
  __int16 *v35;
  unsigned int v36;
  __int16 *v37;
  unsigned int v38;
  llvm::ConstantPointerNull **v39;

  v3 = result;
  if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
    goto LABEL_16;
  v4 = **(_QWORD **)*a2;
  v39 = a2;
  v5 = *(_DWORD *)(v4 + 2496);
  if (!v5)
  {
    v31 = 0;
LABEL_44:
    result = (__int16 *)sub_1C541AB24(v4 + 2480, (uint64_t)&v39, (uint64_t *)&v39, v31);
    v32 = (uint64_t)v39;
    *((_QWORD *)result + 3) = 0;
    *((_QWORD *)result + 4) = 0;
    *(_QWORD *)result = v32;
    *((_QWORD *)result + 1) = result + 12;
    *((_QWORD *)result + 2) = 0x100000000;
    goto LABEL_12;
  }
  v6 = *(_QWORD *)(v4 + 2480);
  v7 = v5 - 1;
  v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
  result = (__int16 *)(v6 + 40 * v8);
  v9 = *(_QWORD *)result;
  if (*(llvm::ConstantPointerNull ***)result != a2)
  {
    v10 = 0;
    v11 = 1;
    while (v9 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == -8192;
      if (v12)
        v10 = result;
      v13 = v8 + v11++;
      v8 = v13 & v7;
      result = (__int16 *)(v6 + 40 * v8);
      v9 = *(_QWORD *)result;
      if (*(llvm::ConstantPointerNull ***)result == a2)
        goto LABEL_12;
    }
    if (v10)
      v31 = v10;
    else
      v31 = result;
    goto LABEL_44;
  }
LABEL_12:
  v14 = *((unsigned int *)result + 4);
  if (!(_DWORD)v14)
    goto LABEL_16;
  v15 = (_QWORD **)(*((_QWORD *)result + 1) + 8);
  v16 = 16 * v14;
  while (*((_DWORD *)v15 - 2) != 4)
  {
    v15 += 2;
    v16 -= 16;
    if (!v16)
      goto LABEL_16;
  }
  result = (__int16 *)*v15;
  if (!*v15 || *((_BYTE *)*a2 + 8) != 13)
  {
LABEL_16:
    if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
    {
LABEL_31:
      *v3 = 6;
      return result;
    }
    v17 = **(_QWORD **)*a2;
    v39 = a2;
    v18 = *(_DWORD *)(v17 + 2496);
    if (v18)
    {
      v19 = *(_QWORD *)(v17 + 2480);
      v20 = v18 - 1;
      v21 = v20 & ((a2 >> 4) ^ (a2 >> 9));
      result = (__int16 *)(v19 + 40 * v21);
      v22 = *(_QWORD *)result;
      if (*(llvm::ConstantPointerNull ***)result == a2)
      {
LABEL_27:
        v27 = *((unsigned int *)result + 4);
        if ((_DWORD)v27)
        {
          v28 = (_QWORD *)(*((_QWORD *)result + 1) + 8);
          v29 = 16 * v27;
          while (*((_DWORD *)v28 - 2) != 11)
          {
            v28 += 2;
            v29 -= 16;
            if (!v29)
              goto LABEL_31;
          }
          if (*v28)
          {
            v30 = llvm::ConstantPointerNull::get(*a2, (llvm::PointerType *)a2);
            *v3 = 0;
            return (__int16 *)sub_1C4E90C9C((uint64_t)v3, (uint64_t)v30);
          }
        }
        goto LABEL_31;
      }
      v23 = 0;
      v24 = 1;
      while (v22 != -4096)
      {
        if (v23)
          v25 = 0;
        else
          v25 = v22 == -8192;
        if (v25)
          v23 = result;
        v26 = v21 + v24++;
        v21 = v26 & v20;
        result = (__int16 *)(v19 + 40 * v21);
        v22 = *(_QWORD *)result;
        if (*(llvm::ConstantPointerNull ***)result == a2)
          goto LABEL_27;
      }
      if (v23)
        v33 = v23;
      else
        v33 = result;
    }
    else
    {
      v33 = 0;
    }
    result = (__int16 *)sub_1C541AB24(v17 + 2480, (uint64_t)&v39, (uint64_t *)&v39, v33);
    v34 = (uint64_t)v39;
    *((_QWORD *)result + 3) = 0;
    *((_QWORD *)result + 4) = 0;
    *(_QWORD *)result = v34;
    *((_QWORD *)result + 1) = result + 12;
    *((_QWORD *)result + 2) = 0x100000000;
    goto LABEL_27;
  }
  llvm::getConstantRangeFromMetadata((uint64_t)result, (uint64_t)&v35);
  result = (__int16 *)sub_1C4E8E6E0((uint64_t)&v35, 0, v3);
  if (v38 >= 0x41)
  {
    result = v37;
    if (v37)
      result = (__int16 *)MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  }
  if (v36 >= 0x41)
  {
    result = v35;
    if (v35)
      return (__int16 *)MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
  }
  return result;
}

void llvm::SCCPInstVisitor::visitCallBase(llvm::SCCPInstVisitor *this, llvm::CallBase *a2, const llvm::Function *a3)
{
  llvm::SCCPInstVisitor::handleCallResult(this, a2, a3);
  llvm::SCCPInstVisitor::handleCallArguments(this, a2);
}

void llvm::SCCPInstVisitor::handleCallResult(llvm::SCCPInstVisitor *this, llvm::CallBase *a2, const llvm::Function *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  llvm::CallBase **v17;
  llvm::CallBase *v18;
  llvm::CallBase **v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Type *v31;
  llvm::Type *i;
  _WORD *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  int v36;
  unint64_t v37;
  char *v38;
  _DWORD *v39;
  llvm::CallBase **v40;
  uint64_t *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  int v44;
  unint64_t v45;
  __int16 v46;
  uint64_t v47;
  llvm::Type *v48;
  const llvm::APInt *v49;
  int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  char v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  _QWORD *v60;
  llvm::CallBase *v61;
  _QWORD *v62;
  int v63;
  BOOL v64;
  unsigned int v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  _BYTE *v69;
  int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  _QWORD *v74;
  llvm::CallBase *v75;
  _QWORD *v76;
  int v77;
  BOOL v78;
  unsigned int v79;
  _QWORD *v80;
  _BYTE *v81;
  int v82;
  __int16 v83;
  const char *v84;
  unsigned int v85;
  unsigned int v86;
  void *v87;
  void *v88;
  const char *v89;
  unsigned int v90;
  unsigned int v91;
  void *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  void *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  int v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _WORD *v115;
  llvm::Type *v116;
  unsigned int PrimitiveSizeInBits;
  void *v118;
  unint64_t v119;
  char *v120;
  const void **v121;
  unint64_t v122;
  char *v123;
  unsigned int *v124;
  uint64_t v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  unint64_t v134;
  char *v135;
  size_t v136;
  void *v137;
  size_t v138;
  void *v139;
  size_t v140;
  size_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  void *v145;
  unsigned int v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  void *__dst;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  void *v160;
  void *v161;
  void *v162;
  unsigned int v163;
  void *__src;
  unsigned int v165;
  void *v166;
  unsigned int v167;
  int v168;
  uint64_t v169;
  char v170;
  const void *v171;
  uint64_t v172;
  int v173;
  char *v174;
  int v175;
  __int16 v176;
  void *v177;
  unsigned int v178;
  void *v179;
  unsigned int v180;
  const void *v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  unsigned int v185;
  __int128 v186;
  unsigned int v187;
  void *v188;
  unsigned int v189;
  __int16 v190;
  void *v191;
  unsigned int v192;
  void *v193;
  unsigned int v194;
  __int16 v195;
  void *v196;
  unsigned int v197;
  uint64_t v198;
  unsigned int v199;
  __int16 v200;
  void *v201;
  unsigned int v202;
  void *v203;
  unsigned int v204;
  __int16 v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  unsigned int v209;
  __int16 v210;
  void *v211;
  unsigned int v212;
  void *v213;
  unsigned int v214;
  uint64_t v215;

  v215 = *MEMORY[0x1E0C80C00];
  v8 = (char *)a2 - 32;
  v7 = *((_QWORD *)a2 - 4);
  if (!v7)
    goto LABEL_4;
  if (*(_BYTE *)(v7 + 16))
    goto LABEL_4;
  v9 = *(_QWORD *)(v7 + 24);
  if (v9 != *((_QWORD *)a2 + 9))
    goto LABEL_4;
  if (*((_BYTE *)a2 + 16) == 84 && (*(_BYTE *)(v7 + 33) & 0x20) != 0)
  {
    v10 = *(_DWORD *)(v7 + 36);
    v11 = (v10 - 262);
    if (v11 <= 0x31)
    {
      if (v11 == 19)
      {
        v12 = *((_QWORD *)this + 17);
        *(_QWORD *)&v186 = a2;
        v13 = *((_DWORD *)this + 38);
        v14 = a2 >> 4;
        if (v13)
        {
          v15 = v13 - 1;
          v16 = v15 & (v14 ^ (a2 >> 9));
          v17 = (llvm::CallBase **)(v12 + 48 * v16);
          v18 = *v17;
          if (*v17 == a2)
            goto LABEL_80;
          v19 = 0;
          v20 = 1;
          while (v18 != (llvm::CallBase *)-4096)
          {
            if (v19)
              v21 = 0;
            else
              v21 = v18 == (llvm::CallBase *)-8192;
            if (v21)
              v19 = v17;
            v22 = v16 + v20++;
            v16 = v22 & v15;
            v17 = (llvm::CallBase **)(v12 + 48 * v16);
            v18 = *v17;
            if (*v17 == a2)
              goto LABEL_80;
          }
          if (v19)
            v40 = v19;
          else
            v40 = v17;
        }
        else
        {
          v40 = 0;
        }
        v17 = (llvm::CallBase **)sub_1C5F7C8F0((uint64_t)this + 136, (uint64_t *)&v186, v40);
        *v17 = (llvm::CallBase *)v186;
        *((_WORD *)v17 + 4) = 0;
LABEL_80:
        if (*((_BYTE *)v17 + 8) == 6)
          return;
        v41 = (uint64_t *)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
        v42 = (unsigned __int8 *)sub_1C5F71F80((uint64_t)this, (uint64_t)v41);
        v43 = v42;
        v44 = *v42;
        if ((v44 - 4) < 2)
        {
          v147 = (void *)*((unsigned int *)v42 + 4);
          if (v147 > 0x40)
          {
            v66 = (void *)operator new[]();
            memcpy(v66, *((const void **)v43 + 1), (((unint64_t)v147 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v66 = (void *)*((_QWORD *)v42 + 1);
          }
          v67 = *((unsigned int *)v43 + 8);
          v145 = v66;
          v146 = *((_DWORD *)v43 + 8);
          if (v67 > 0x40)
          {
            v136 = ((unint64_t)(v67 + 63) >> 3) & 0x3FFFFFF8;
            v143 = (void *)operator new[]();
            memcpy(v143, *((const void **)v43 + 3), v136);
          }
          else
          {
            v143 = (void *)*((_QWORD *)v43 + 3);
          }
          v46 = v44 | (v43[1] << 8);
        }
        else
        {
          v45 = (v44 - 2);
          if (v45 < 2)
          {
            v45 = *((_QWORD *)v42 + 1);
            v145 = (void *)v45;
          }
          v46 = *v42;
          v147 = (void *)v45;
          v146 = v45;
        }
        v47 = sub_1C5F7AD64((uint64_t)this, (uint64_t)a2);
        llvm::PredicateBase::getConstraint((llvm::Value **)v47, v48, v49, (uint64_t)&v168);
        if (v170)
        {
          v50 = v168;
          v51 = v169;
          if (!*(_BYTE *)sub_1C5F71F80((uint64_t)this, v169))
          {
            sub_1C5F7AE00((uint64_t)this, v51, (uint64_t)a2);
            goto LABEL_305;
          }
          LODWORD(v144) = *(_DWORD *)(v47 + 24);
          v52 = (unsigned __int8 *)sub_1C5F71F80((uint64_t)this, v51);
          v53 = v52;
          v54 = *v52;
          LOWORD(v186) = *v52;
          v55 = *v52;
          if ((v55 - 4) < 2)
          {
            v187 = *((_DWORD *)v52 + 4);
            if (v187 > 0x40)
            {
              *((_QWORD *)&v186 + 1) = operator new[]();
              memcpy(*((void **)&v186 + 1), *((const void **)v53 + 1), (((unint64_t)v187 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              *((_QWORD *)&v186 + 1) = *((_QWORD *)v52 + 1);
            }
            v189 = *((_DWORD *)v53 + 8);
            if (v189 > 0x40)
            {
              v188 = (void *)operator new[]();
              memcpy(v188, *((const void **)v53 + 3), (((unint64_t)v189 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v188 = (void *)*((_QWORD *)v53 + 3);
            }
            v54 = v186;
            LOWORD(v186) = v186 | (v53[1] << 8);
          }
          else if ((v55 - 2) < 2)
          {
            *((_QWORD *)&v186 + 1) = *((_QWORD *)v52 + 1);
          }
          __src = a2;
          v70 = *((_DWORD *)this + 38);
          if (v70)
          {
            v71 = *((_QWORD *)this + 17);
            v72 = v70 - 1;
            v73 = v72 & (v14 ^ (a2 >> 9));
            v74 = (_QWORD *)(v71 + 48 * v73);
            v75 = (llvm::CallBase *)*v74;
            if ((llvm::CallBase *)*v74 == a2)
            {
LABEL_134:
              v81 = v74 + 1;
              v82 = v46 & 0xFE;
              if ((v54 & 0xFE) != 4 && v82 != 4)
              {
                if (v50 != 33)
                {
                  if (v50 == 32 && v54 == 2)
                  {
                    sub_1C5F7AE00((uint64_t)this, v51, (uint64_t)a2);
                    v83 = v186;
                    v200 = v186;
                    if (v186 - 4 < 2)
                    {
                      v202 = v187;
                      if (v187 > 0x40)
                      {
                        v140 = (((unint64_t)v187 + 63) >> 3) & 0x3FFFFFF8;
                        v201 = (void *)operator new[]();
                        memcpy(v201, *((const void **)&v186 + 1), v140);
                      }
                      else
                      {
                        v201 = (void *)*((_QWORD *)&v186 + 1);
                      }
                      v204 = v189;
                      if (v189 > 0x40)
                      {
                        v141 = (((unint64_t)v189 + 63) >> 3) & 0x3FFFFFF8;
                        v203 = (void *)operator new[]();
                        memcpy(v203, v188, v141);
                      }
                      else
                      {
                        v203 = v188;
                      }
                      v200 = v83 | (BYTE1(v186) << 8);
                    }
                    else if (v186 - 2 < 2)
                    {
                      v201 = (void *)*((_QWORD *)&v186 + 1);
                    }
                    if (!sub_1C4E8EE28((uint64_t)v81, (unsigned __int8 *)&v200, 0x100000000))
                    {
LABEL_299:
                      if ((v200 & 0xFE) != 4)
                        goto LABEL_302;
                      if (v204 >= 0x41 && v203)
                        MEMORY[0x1CAA32F9C](v203, 0x1000C8000313F17);
                      if (v202 < 0x41)
                        goto LABEL_302;
                      v96 = v201;
                      if (!v201)
                        goto LABEL_302;
LABEL_236:
                      MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
                      goto LABEL_302;
                    }
                    if (*v81 == 6)
                    {
                      v129 = (char *)this + 784;
                      v130 = (char *)this + 792;
                      v131 = *((unsigned int *)this + 198);
                      if (v131 < *((_DWORD *)this + 199))
                      {
LABEL_298:
                        *(_QWORD *)(*(_QWORD *)v129 + 8 * v131) = a2;
                        ++*(_DWORD *)v130;
                        goto LABEL_299;
                      }
                      v132 = v131 + 1;
                      v133 = (char *)this + 800;
                    }
                    else
                    {
                      v129 = (char *)this + 1312;
                      v130 = (char *)this + 1320;
                      v131 = *((unsigned int *)this + 330);
                      if (v131 < *((_DWORD *)this + 331))
                        goto LABEL_298;
                      v132 = v131 + 1;
                      v133 = (char *)this + 1328;
                    }
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v129, (uint64_t)v133, v132, 8);
                    LODWORD(v131) = *(_DWORD *)v130;
                    goto LABEL_298;
                  }
LABEL_220:
                  v190 = v44;
                  if (v46 - 4 < 2)
                  {
                    v192 = v147;
                    if (v147 > 0x40)
                    {
                      v191 = (void *)operator new[]();
                      memcpy(v191, v145, (((unint64_t)v147 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v191 = v145;
                    }
                    v194 = v146;
                    if (v146 > 0x40)
                    {
                      v193 = (void *)operator new[]();
                      memcpy(v193, v143, (((unint64_t)v146 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v193 = v143;
                    }
                    v190 = v44 | v46 & 0xFF00;
                  }
                  else if (v46 - 2 < 2)
                  {
                    v191 = v145;
                  }
                  if (!sub_1C4E8EE28((uint64_t)v81, (unsigned __int8 *)&v190, 0x100000000))
                  {
LABEL_232:
                    if ((v190 & 0xFE) == 4)
                    {
                      if (v194 >= 0x41 && v193)
                        MEMORY[0x1CAA32F9C](v193, 0x1000C8000313F17);
                      if (v192 >= 0x41)
                      {
                        v96 = v191;
                        if (v191)
                          goto LABEL_236;
                      }
                    }
LABEL_302:
                    if ((v186 & 0xFE) != 4)
                      goto LABEL_305;
                    if (v189 >= 0x41 && v188)
                      MEMORY[0x1CAA32F9C](v188, 0x1000C8000313F17);
                    if (v187 < 0x41)
                      goto LABEL_305;
                    v100 = (void *)*((_QWORD *)&v186 + 1);
                    if (!*((_QWORD *)&v186 + 1))
                      goto LABEL_305;
                    goto LABEL_339;
                  }
                  if (*v81 == 6)
                  {
                    v104 = (char *)this + 784;
                    v105 = (char *)this + 792;
                    v106 = *((unsigned int *)this + 198);
                    if (v106 < *((_DWORD *)this + 199))
                    {
LABEL_231:
                      *(_QWORD *)(*(_QWORD *)v104 + 8 * v106) = a2;
                      ++*(_DWORD *)v105;
                      goto LABEL_232;
                    }
                    v122 = v106 + 1;
                    v123 = (char *)this + 800;
                  }
                  else
                  {
                    v104 = (char *)this + 1312;
                    v105 = (char *)this + 1320;
                    v106 = *((unsigned int *)this + 330);
                    if (v106 < *((_DWORD *)this + 331))
                      goto LABEL_231;
                    v122 = v106 + 1;
                    v123 = (char *)this + 1328;
                  }
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v104, (uint64_t)v123, v122, 8);
                  LODWORD(v106) = *(_DWORD *)v105;
                  goto LABEL_231;
                }
                if (v54 != 2 || (_DWORD)v144 != 1)
                  goto LABEL_220;
                sub_1C5F7AE00((uint64_t)this, v51, (uint64_t)a2);
                v195 = 0;
                sub_1C4E90C9C((uint64_t)&v195, *((uint64_t *)&v186 + 1));
                if (!sub_1C4E8EE28((uint64_t)v81, (unsigned __int8 *)&v195, 0x100000000))
                {
LABEL_215:
                  if ((v195 & 0xFE) == 4)
                  {
                    if (v199 >= 0x41 && v198)
                      MEMORY[0x1CAA32F9C](v198, 0x1000C8000313F17);
                    if (v197 >= 0x41)
                    {
                      v96 = v196;
                      if (v196)
                        goto LABEL_236;
                    }
                  }
                  goto LABEL_302;
                }
                if (*v81 == 6)
                {
                  v101 = (char *)this + 784;
                  v102 = (char *)this + 792;
                  v103 = *((unsigned int *)this + 198);
                  if (v103 < *((_DWORD *)this + 199))
                  {
LABEL_214:
                    *(_QWORD *)(*(_QWORD *)v101 + 8 * v103) = a2;
                    ++*(_DWORD *)v102;
                    goto LABEL_215;
                  }
                  v134 = v103 + 1;
                  v135 = (char *)this + 800;
                }
                else
                {
                  v101 = (char *)this + 1312;
                  v102 = (char *)this + 1320;
                  v103 = *((unsigned int *)this + 330);
                  if (v103 < *((_DWORD *)this + 331))
                    goto LABEL_214;
                  v134 = v103 + 1;
                  v135 = (char *)this + 1328;
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v101, (uint64_t)v135, v134, 8);
                LODWORD(v103) = *(_DWORD *)v102;
                goto LABEL_214;
              }
              sub_1C4768AD0(*(_QWORD *)this, *v41);
              v86 = v85;
              if ((_DWORD)v84 == 1)
              v165 = v86;
              if (v86 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
                v167 = v165;
                v88 = v143;
                if (v165 > 0x40)
                {
                  v166 = (void *)operator new[]();
                  memcpy(v166, __src, (((unint64_t)v167 + 63) >> 3) & 0x3FFFFFF8);
                  v88 = v143;
LABEL_149:
                  if ((v186 & 0xFE) != 4)
                    goto LABEL_154;
                  llvm::ConstantRange::makeAllowedICmpRegion(v50, (uint64_t)&v186 + 8, (uint64_t)&v160, (uint64_t)v143, v144, v145, v146, v147, (int)v148, v149, (int)v150, v151, (int)v152, v153, (int)v154, v155, (int)__dst, v157, (int)v158,
                    v159,
                    (int)v160,
                    v161,
                    (int)v162);
                  if (v165 >= 0x41 && __src)
                    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                  __src = v160;
                  v165 = v161;
                  LODWORD(v161) = 0;
                  if (v167 >= 0x41 && v166)
                  {
                    MEMORY[0x1CAA32F9C](v166, 0x1000C8000313F17);
                    v166 = v162;
                    v167 = v163;
                    v163 = 0;
                    v88 = v143;
                    if (v161 < 0x41 || !v160)
                    {
LABEL_154:
                      if (v82 == 4)
                      {
                        LODWORD(v161) = (_DWORD)v147;
                        if (v147 > 0x40)
                        {
                          v160 = (void *)operator new[]();
                          memcpy(v160, v145, (((unint64_t)v161 + 63) >> 3) & 0x3FFFFFF8);
                          v88 = v143;
                        }
                        else
                        {
                          v160 = v145;
                        }
                        v163 = v146;
                        if (v146 <= 0x40)
                        {
                          v162 = v88;
LABEL_166:
                          llvm::ConstantRange::intersectWith((uint64_t)&__src, (llvm::ConstantRange *)&v160, 0, (uint64_t)&__dst);
                          if (!llvm::ConstantRange::contains((llvm::ConstantRange *)&v160, (const llvm::ConstantRange *)&__dst)&& sub_1C535CE68((uint64_t)&v160))
                          {
                            if (v157 > 0x40 || v161 > 0x40)
                            {
                              llvm::APInt::reallocate((uint64_t)&__dst, v161);
                              if (v157 <= 0x40)
                                __dst = v160;
                              else
                                memcpy(__dst, v160, (((unint64_t)v157 + 63) >> 3) & 0x3FFFFFF8);
                            }
                            else
                            {
                              __dst = v160;
                              LODWORD(v157) = (_DWORD)v161;
                            }
                            if (v159 > 0x40 || v163 > 0x40)
                            {
                              llvm::APInt::reallocate((uint64_t)&v158, v163);
                              if (v159 <= 0x40)
                                v158 = v162;
                              else
                                memcpy(v158, v162, (((unint64_t)v159 + 63) >> 3) & 0x3FFFFFF8);
                            }
                            else
                            {
                              v158 = v162;
                              LODWORD(v159) = v163;
                            }
                          }
                          sub_1C5F7AE00((uint64_t)this, v51, (uint64_t)a2);
                          LODWORD(v153) = v157;
                          if (v157 > 0x40)
                          {
                            v152 = (void *)operator new[]();
                            memcpy(v152, __dst, (((unint64_t)v153 + 63) >> 3) & 0x3FFFFFF8);
                          }
                          else
                          {
                            v152 = __dst;
                          }
                          LODWORD(v155) = v159;
                          if (v159 > 0x40)
                          {
                            v154 = (void *)operator new[]();
                            memcpy(v154, v158, (((unint64_t)v155 + 63) >> 3) & 0x3FFFFFF8);
                          }
                          else
                          {
                            v154 = v158;
                          }
                          sub_1C4E8E6E0((uint64_t)&v152, v144 != 1, &v205);
                          if (!sub_1C4E8EE28((uint64_t)v81, (unsigned __int8 *)&v205, 0x100000000))
                          {
LABEL_182:
                            if ((v205 & 0xFE) == 4)
                            {
                              if (v209 >= 0x41 && v208)
                                MEMORY[0x1CAA32F9C](v208, 0x1000C8000313F17);
                              if (v207 >= 0x41 && v206)
                                MEMORY[0x1CAA32F9C](v206, 0x1000C8000313F17);
                            }
                            if (v155 >= 0x41 && v154)
                              MEMORY[0x1CAA32F9C](v154, 0x1000C8000313F17);
                            if (v153 >= 0x41 && v152)
                              MEMORY[0x1CAA32F9C](v152, 0x1000C8000313F17);
                            if (v159 >= 0x41 && v158)
                              MEMORY[0x1CAA32F9C](v158, 0x1000C8000313F17);
                            if (v157 >= 0x41 && __dst)
                              MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
                            if (v163 >= 0x41 && v162)
                              MEMORY[0x1CAA32F9C](v162, 0x1000C8000313F17);
                            if (v161 >= 0x41 && v160)
                              MEMORY[0x1CAA32F9C](v160, 0x1000C8000313F17);
                            if (v167 >= 0x41 && v166)
                              MEMORY[0x1CAA32F9C](v166, 0x1000C8000313F17);
                            if (v165 >= 0x41)
                            {
                              v96 = __src;
                              if (__src)
                                goto LABEL_236;
                            }
                            goto LABEL_302;
                          }
                          if (*v81 == 6)
                          {
                            v93 = (char *)this + 784;
                            v94 = (char *)this + 792;
                            v95 = *((unsigned int *)this + 198);
                            if (v95 < *((_DWORD *)this + 199))
                            {
LABEL_181:
                              *(_QWORD *)(*(_QWORD *)v93 + 8 * v95) = a2;
                              ++*(_DWORD *)v94;
                              goto LABEL_182;
                            }
                            v119 = v95 + 1;
                            v120 = (char *)this + 800;
                          }
                          else
                          {
                            v93 = (char *)this + 1312;
                            v94 = (char *)this + 1320;
                            v95 = *((unsigned int *)this + 330);
                            if (v95 < *((_DWORD *)this + 331))
                              goto LABEL_181;
                            v119 = v95 + 1;
                            v120 = (char *)this + 1328;
                          }
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v93, (uint64_t)v120, v119, 8);
                          LODWORD(v95) = *(_DWORD *)v94;
                          goto LABEL_181;
                        }
                        v137 = (void *)operator new[]();
                        v162 = v137;
                        v138 = (((unint64_t)v163 + 63) >> 3) & 0x3FFFFFF8;
                        v139 = v88;
LABEL_392:
                        memcpy(v137, v139, v138);
                        goto LABEL_166;
                      }
                      sub_1C4768AD0(*(_QWORD *)this, *v41);
                      v91 = v90;
                      if ((_DWORD)v89 == 1)
                      LODWORD(v161) = v91;
                      if (v91 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v160, -1, 1);
                        v163 = v161;
                        if (v161 > 0x40)
                        {
                          v137 = (void *)operator new[]();
                          v162 = v137;
                          v139 = v160;
                          v138 = (((unint64_t)v163 + 63) >> 3) & 0x3FFFFFF8;
                          goto LABEL_392;
                        }
                      }
                      else
                      {
                        if (v91)
                          v92 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v91);
                        else
                          v92 = 0;
                        v160 = v92;
                        v163 = v91;
                      }
                      v162 = v160;
                      goto LABEL_166;
                    }
                    MEMORY[0x1CAA32F9C](v160, 0x1000C8000313F17);
                  }
                  else
                  {
                    v166 = v162;
                    v167 = v163;
                  }
                  v88 = v143;
                  goto LABEL_154;
                }
              }
              else
              {
                if (v86)
                  v87 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v86);
                else
                  v87 = 0;
                __src = v87;
                v167 = v86;
                v88 = v143;
              }
              v166 = __src;
              goto LABEL_149;
            }
            v76 = 0;
            v77 = 1;
            while (v75 != (llvm::CallBase *)-4096)
            {
              if (v76)
                v78 = 0;
              else
                v78 = v75 == (llvm::CallBase *)-8192;
              if (v78)
                v76 = v74;
              v79 = v73 + v77++;
              v73 = v79 & v72;
              v74 = (_QWORD *)(v71 + 48 * v73);
              v75 = (llvm::CallBase *)*v74;
              if ((llvm::CallBase *)*v74 == a2)
                goto LABEL_134;
            }
            if (v76)
              v80 = v76;
            else
              v80 = v74;
          }
          else
          {
            v80 = 0;
          }
          v74 = sub_1C5F7C8F0((uint64_t)this + 136, (uint64_t *)&__src, v80);
          *v74 = __src;
          *((_WORD *)v74 + 4) = 0;
          v54 = v186;
          goto LABEL_134;
        }
        *(_QWORD *)&v186 = a2;
        v56 = *((_DWORD *)this + 38);
        if (v56)
        {
          v57 = *((_QWORD *)this + 17);
          v58 = v56 - 1;
          v59 = v58 & (v14 ^ (a2 >> 9));
          v60 = (_QWORD *)(v57 + 48 * v59);
          v61 = (llvm::CallBase *)*v60;
          if ((llvm::CallBase *)*v60 == a2)
            goto LABEL_111;
          v62 = 0;
          v63 = 1;
          while (v61 != (llvm::CallBase *)-4096)
          {
            if (v62)
              v64 = 0;
            else
              v64 = v61 == (llvm::CallBase *)-8192;
            if (v64)
              v62 = v60;
            v65 = v59 + v63++;
            v59 = v65 & v58;
            v60 = (_QWORD *)(v57 + 48 * v59);
            v61 = (llvm::CallBase *)*v60;
            if ((llvm::CallBase *)*v60 == a2)
              goto LABEL_111;
          }
          if (v62)
            v68 = v62;
          else
            v68 = v60;
        }
        else
        {
          v68 = 0;
        }
        v60 = sub_1C5F7C8F0((uint64_t)this + 136, (uint64_t *)&v186, v68);
        *v60 = v186;
        *((_WORD *)v60 + 4) = 0;
LABEL_111:
        v69 = v60 + 1;
        v210 = v44;
        if (v46 - 4 < 2)
        {
          v212 = v147;
          if (v147 > 0x40)
          {
            v211 = (void *)operator new[]();
            memcpy(v211, v145, (((unint64_t)v147 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v211 = v145;
          }
          v214 = v146;
          if (v146 > 0x40)
          {
            v213 = (void *)operator new[]();
            memcpy(v213, v143, (((unint64_t)v146 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v213 = v143;
          }
          v210 = v44 | v46 & 0xFF00;
        }
        else if (v46 - 2 < 2)
        {
          v211 = v145;
        }
        if (!sub_1C4E8EE28((uint64_t)v69, (unsigned __int8 *)&v210, 0x100000000))
        {
LABEL_204:
          if ((v210 & 0xFE) != 4)
            goto LABEL_305;
          if (v214 >= 0x41 && v213)
            MEMORY[0x1CAA32F9C](v213, 0x1000C8000313F17);
          if (v212 < 0x41)
            goto LABEL_305;
          v100 = v211;
          if (!v211)
            goto LABEL_305;
LABEL_339:
          MEMORY[0x1CAA32F9C](v100, 0x1000C8000313F17);
LABEL_305:
          if ((v46 & 0xFE) == 4)
          {
            if (v146 >= 0x41 && v143)
              MEMORY[0x1CAA32F9C](v143, 0x1000C8000313F17);
            if (v147 >= 0x41)
            {
              if (v145)
                MEMORY[0x1CAA32F9C](v145, 0x1000C8000313F17);
            }
          }
          return;
        }
        if (*v69 == 6)
        {
          v97 = (char *)this + 784;
          v98 = (char *)this + 792;
          v99 = *((unsigned int *)this + 198);
          if (v99 < *((_DWORD *)this + 199))
          {
LABEL_203:
            *(_QWORD *)(*(_QWORD *)v97 + 8 * v99) = a2;
            ++*(_DWORD *)v98;
            goto LABEL_204;
          }
          v107 = v99 + 1;
          v108 = (char *)this + 800;
        }
        else
        {
          v97 = (char *)this + 1312;
          v98 = (char *)this + 1320;
          v99 = *((unsigned int *)this + 330);
          if (v99 < *((_DWORD *)this + 331))
            goto LABEL_203;
          v107 = v99 + 1;
          v108 = (char *)this + 1328;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v97, (uint64_t)v108, v107, 8);
        LODWORD(v99) = *(_DWORD *)v98;
        goto LABEL_203;
      }
      if (((1 << (v10 - 6)) & 0x2184000203001) != 0)
        goto LABEL_239;
    }
    if (v10 == 1)
    {
LABEL_239:
      *(_QWORD *)&v186 = &v187;
      *((_QWORD *)&v186 + 1) = 0x200000000;
      v109 = *((_DWORD *)a2 + 5);
      v110 = v109 & 0x7FFFFFF;
      v111 = (uint64_t *)((char *)a2 - 32 * v110);
      if (v109 < 0 && (v142 = *(v111 - 1), (v142 & 0xFFFFFFFF0) != 0))
        v112 = (*((_DWORD *)v111 - 3) - *(_DWORD *)((char *)v111 - v142));
      else
        v112 = 0;
      if (v111 == (uint64_t *)&v8[-32 * v112])
      {
        v121 = (const void **)&v187;
LABEL_267:
        llvm::ConstantRange::intrinsic(v121, v10, (uint64_t)&__src);
        LODWORD(v149) = v165;
        if (v165 > 0x40)
        {
          v148 = (void *)operator new[]();
          memcpy(v148, __src, (((unint64_t)v149 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v148 = __src;
        }
        LODWORD(v151) = v167;
        if (v167 > 0x40)
        {
          v150 = (void *)operator new[]();
          memcpy(v150, v166, (((unint64_t)v151 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v150 = v166;
        }
        sub_1C4E8E6E0((uint64_t)&v148, 0, (__int16 *)&v181);
        sub_1C5F721C0((uint64_t)this, (uint64_t)a2, &v181, 0x100000000);
        if ((v181 & 0xFE) == 4)
        {
          if (v185 >= 0x41 && v184)
            MEMORY[0x1CAA32F9C](v184, 0x1000C8000313F17);
          if (v183 >= 0x41 && v182)
            MEMORY[0x1CAA32F9C](v182, 0x1000C8000313F17);
        }
        if (v151 >= 0x41 && v150)
          MEMORY[0x1CAA32F9C](v150, 0x1000C8000313F17);
        if (v149 >= 0x41 && v148)
          MEMORY[0x1CAA32F9C](v148, 0x1000C8000313F17);
        if (v167 >= 0x41 && v166)
          MEMORY[0x1CAA32F9C](v166, 0x1000C8000313F17);
        if (v165 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        v124 = (unsigned int *)v186;
        if (DWORD2(v186))
        {
          v125 = 8 * DWORD2(v186);
          do
          {
            v126 = &v124[v125];
            if (v124[v125 - 2] >= 0x41)
            {
              v127 = *((_QWORD *)v126 - 2);
              if (v127)
                MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
            }
            if (*(v126 - 6) >= 0x41)
            {
              v128 = *((_QWORD *)v126 - 4);
              if (v128)
                MEMORY[0x1CAA32F9C](v128, 0x1000C8000313F17);
            }
            v125 -= 8;
          }
          while (v125 * 4);
          v124 = (unsigned int *)v186;
        }
        if (v124 != &v187)
          free(v124);
        return;
      }
      v113 = 32 * v110 - 32 * v112 - 32;
      while (1)
      {
        v114 = *v111;
        v115 = (_WORD *)sub_1C5F71F80((uint64_t)this, *v111);
        if ((*v115 & 0xFE) != 4)
          break;
        sub_1C4E94140((uint64_t)&v186, (unint64_t)(v115 + 4));
LABEL_254:
        v111 += 4;
        v113 -= 32;
        if (!v113)
        {
          v10 = *(_DWORD *)(*(_QWORD *)v8 + 36);
          v121 = (const void **)v186;
          goto LABEL_267;
        }
      }
      v116 = *(llvm::Type **)v114;
      if ((*(_DWORD *)(*(_QWORD *)v114 + 8) & 0xFE) == 0x12)
        v116 = (llvm::Type *)**((_QWORD **)v116 + 2);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v116);
      v165 = PrimitiveSizeInBits;
      if (PrimitiveSizeInBits > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
        v167 = v165;
        if (v165 > 0x40)
        {
          v166 = (void *)operator new[]();
          memcpy(v166, __src, (((unint64_t)v167 + 63) >> 3) & 0x3FFFFFF8);
LABEL_252:
          sub_1C5AFF618((uint64_t)&v186, (unint64_t)&__src);
          if (v167 >= 0x41 && v166)
            MEMORY[0x1CAA32F9C](v166, 0x1000C8000313F17);
          if (v165 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          goto LABEL_254;
        }
      }
      else
      {
        v118 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
        if (!PrimitiveSizeInBits)
          v118 = 0;
        __src = v118;
        v167 = PrimitiveSizeInBits;
      }
      v166 = __src;
      goto LABEL_252;
    }
  }
  if (*(_QWORD *)(v7 + 72) == v7 + 72 && (*(_BYTE *)(v7 + 34) & 0x80) == 0)
    goto LABEL_4;
  v23 = **(_QWORD **)(v9 + 16);
  if (v23)
    v24 = *(_BYTE *)(v23 + 8) == 16;
  else
    v24 = 0;
  if (!v24)
  {
    v25 = sub_1C5F729F8((uint64_t)this + 208, *((_QWORD *)a2 - 4));
    if (*((_QWORD *)this + 30) != v25)
    {
      v26 = v25;
      v27 = *(unsigned __int8 *)(v25 + 8);
      LOWORD(v171) = *(unsigned __int8 *)(v25 + 8);
      if ((v27 - 4) < 2)
      {
        v3 = *(unsigned int *)(v25 + 24);
        v173 = v3;
        if (v3 > 0x40)
        {
          v7 = operator new[]();
          memcpy((void *)v7, *(const void **)(v26 + 16), ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v7 = *(_QWORD *)(v25 + 16);
        }
        v172 = v7;
        v4 = *(unsigned int *)(v26 + 40);
        v175 = v4;
        if (v4 > 0x40)
        {
          v8 = (char *)operator new[]();
          memcpy(v8, *(const void **)(v26 + 32), ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v8 = *(char **)(v26 + 32);
        }
        v174 = v8;
        LOWORD(v27) = v27 | (*(unsigned __int8 *)(v26 + 9) << 8);
        LOWORD(v171) = v27;
      }
      else if ((v27 - 2) < 2)
      {
        v7 = *(_QWORD *)(v25 + 16);
        v172 = v7;
      }
      sub_1C5F721C0((uint64_t)this, (uint64_t)a2, &v171, 0xA00000100);
      if ((v27 & 0xFE) == 4)
      {
        if (v4 >= 0x41 && v8)
          MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
        if (v3 >= 0x41 && v7)
          JUMPOUT(0x1CAA32F9CLL);
      }
      return;
    }
LABEL_4:
    llvm::SCCPInstVisitor::handleCallOverdefined(this, a2, a3);
    return;
  }
  v28 = sub_1C477672C((uint64_t)this + 304, *((_QWORD *)a2 - 4));
  v29 = *((_QWORD *)this + 39);
  v30 = 320;
  if (v29 == *((_QWORD *)this + 38))
    v30 = 324;
  if (v28 == (_QWORD *)(v29 + 8 * *(unsigned int *)((char *)this + v30)))
    goto LABEL_4;
  v31 = (llvm::Type *)*(unsigned int *)(v23 + 12);
  if ((_DWORD)v31)
  {
    for (i = 0; v31 != i; i = (llvm::Type *)((char *)i + 1))
    {
      v33 = sub_1C5F72BD4((uint64_t)this, a2, i);
      *(_QWORD *)&v186 = v7;
      *((_QWORD *)&v186 + 1) = i;
      v34 = (unsigned __int8 *)sub_1C5F72A68((uint64_t)this + 256, &v186);
      v35 = v34;
      v176 = *v34;
      v36 = *v34;
      if ((v36 - 4) < 2)
      {
        v178 = *((_DWORD *)v34 + 4);
        if (v178 > 0x40)
        {
          v177 = (void *)operator new[]();
          memcpy(v177, *((const void **)v35 + 1), (((unint64_t)v178 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v177 = (void *)*((_QWORD *)v34 + 1);
        }
        v180 = *((_DWORD *)v35 + 8);
        if (v180 > 0x40)
        {
          v179 = (void *)operator new[]();
          memcpy(v179, *((const void **)v35 + 3), (((unint64_t)v180 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v179 = (void *)*((_QWORD *)v35 + 3);
        }
        HIBYTE(v176) = v35[1];
      }
      else if ((v36 - 2) < 2)
      {
        v177 = (void *)*((_QWORD *)v34 + 1);
      }
      if (!sub_1C4E8EE28((uint64_t)v33, (unsigned __int8 *)&v176, 0xA00000100))
        goto LABEL_55;
      if (*(_BYTE *)v33 == 6)
      {
        v37 = *((unsigned int *)this + 198);
        if (v37 >= *((unsigned int *)this + 199))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 784, (uint64_t)this + 800, v37 + 1, 8);
          v39 = (_DWORD *)((char *)this + 792);
          v38 = (char *)this + 784;
LABEL_63:
          v37 = *v39;
          goto LABEL_54;
        }
        v38 = (char *)this + 784;
        v39 = (_DWORD *)((char *)this + 792);
      }
      else
      {
        v37 = *((unsigned int *)this + 330);
        if (v37 >= *((unsigned int *)this + 331))
        {
          v38 = (char *)this + 1312;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 1312, (uint64_t)this + 1328, v37 + 1, 8);
          v39 = (_DWORD *)((char *)this + 1320);
          goto LABEL_63;
        }
        v39 = (_DWORD *)((char *)this + 1320);
        v38 = (char *)this + 1312;
      }
LABEL_54:
      *(_QWORD *)(*(_QWORD *)v38 + 8 * v37) = a2;
      ++*v39;
LABEL_55:
      if ((v176 & 0xFE) == 4)
      {
        if (v180 >= 0x41 && v179)
          MEMORY[0x1CAA32F9C](v179, 0x1000C8000313F17);
        if (v178 >= 0x41 && v177)
          MEMORY[0x1CAA32F9C](v177, 0x1000C8000313F17);
      }
    }
  }
}

void llvm::SCCPInstVisitor::handleCallArguments(llvm::SCCPInstVisitor *this, llvm::CallBase *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::BasicBlock *v9;
  int v10;
  llvm::Constant *v11;
  llvm::Constant *v12;
  llvm::Constant *v13;
  unint64_t v14;
  size_t v15;
  uint64_t *i;
  int v17;
  uint64_t v18;
  unsigned int v19;
  const void **v20;
  const void **v21;
  int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Type *v29;
  const void **v30;
  const void **v31;
  int v32;
  unint64_t v33;
  __int16 v34;
  _WORD *v35;
  unint64_t v36;
  _DWORD *v37;
  char *v38;
  int v39;
  void *v40;
  void *__src;
  int v42;
  size_t __n;
  unint64_t __na;
  unint64_t __nb;
  const void *v46;
  void *v47;
  unsigned int v48;
  void *v49;
  unsigned int v50;
  __int16 v51;
  void *v52;
  unsigned int v53;
  void *v54;
  unsigned int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 - 4);
  if (!v4 || *(_BYTE *)(v4 + 16) || *(_QWORD *)(v4 + 24) != *((_QWORD *)a2 + 9))
    v4 = 0;
  if (*((_DWORD *)this + 161) == *((_DWORD *)this + 162))
    return;
  v5 = sub_1C477672C((uint64_t)this + 624, v4);
  v6 = *((_QWORD *)this + 79);
  v7 = 640;
  if (v6 == *((_QWORD *)this + 78))
    v7 = 644;
  if (v5 == (_QWORD *)(v6 + 8 * *(unsigned int *)((char *)this + v7)))
    return;
  v8 = *(_QWORD *)(v4 + 80);
  if (v8)
    v9 = (llvm::BasicBlock *)(v8 - 24);
  else
    v9 = 0;
  llvm::SCCPInstVisitor::markBlockExecutable(this, v9);
  v10 = *((_DWORD *)a2 + 5);
  if ((*(_WORD *)(v4 + 18) & 1) == 0)
  {
    v11 = *(llvm::Constant **)(v4 + 88);
LABEL_15:
    v12 = v11;
    goto LABEL_17;
  }
  llvm::Function::BuildLazyArguments((llvm::Function *)v4);
  v11 = *(llvm::Constant **)(v4 + 88);
  if ((*(_WORD *)(v4 + 18) & 1) == 0)
    goto LABEL_15;
  llvm::Function::BuildLazyArguments((llvm::Function *)v4);
  v12 = *(llvm::Constant **)(v4 + 88);
LABEL_17:
  v13 = (llvm::Constant *)((char *)v12 + 40 * *(_QWORD *)(v4 + 96));
  if (v11 != v13)
  {
    v14 = 0;
    v15 = 0;
    for (i = (uint64_t *)((char *)a2 - 32 * (v10 & 0x7FFFFFF)); ; i += 4)
    {
      v17 = *(unsigned __int8 *)(*(_QWORD *)v11 + 8);
      if (v17 != 15)
        break;
      v18 = *(_QWORD *)(*((_QWORD *)v11 + 3) + 112);
      if (!v18
        || (v19 = *((_DWORD *)v11 + 8) + 2, v19 >= *(_DWORD *)(v18 + 8))
        || (v27 = *(_QWORD *)(v18 + 8 * v19 + 40)) == 0
        || (*(_BYTE *)(v27 + 20) & 0x20) == 0
        || (v28 = *(_QWORD *)(v4 + 112)) != 0 && (*(_BYTE *)(v28 + 17) & 0x30) != 0)
      {
LABEL_22:
        v20 = (const void **)sub_1C5F71F80((uint64_t)this, *i);
        v21 = v20;
        v22 = *(unsigned __int8 *)v20;
        LOWORD(v46) = *(unsigned __int8 *)v20;
        if ((v22 - 4) < 2)
        {
          v23 = *((unsigned int *)v20 + 4);
          v48 = v23;
          if (v23 > 0x40)
          {
            __na = ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8;
            v24 = (void *)operator new[]();
            memcpy(v24, v21[1], __na);
          }
          else
          {
            v24 = (void *)v20[1];
          }
          v47 = v24;
          v25 = *((unsigned int *)v21 + 8);
          v50 = v25;
          if (v25 > 0x40)
          {
            __nb = ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8;
            v26 = (void *)operator new[]();
            memcpy(v26, v21[3], __nb);
          }
          else
          {
            v26 = (void *)v21[3];
          }
          v49 = v26;
          LOWORD(v22) = v22 | (*((unsigned __int8 *)v21 + 1) << 8);
          LOWORD(v46) = v22;
        }
        else if ((v22 - 2) < 2)
        {
          v47 = (void *)v20[1];
        }
        sub_1C5F721C0((uint64_t)this, (uint64_t)v11, &v46, 0xA00000100);
        if ((v22 & 0xFE) == 4)
        {
          if (v50 >= 0x41 && v49)
            MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
          if (v48 >= 0x41)
          {
            if (v47)
              MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
          }
        }
        goto LABEL_33;
      }
      sub_1C5F70CDC((_BOOL8)this, (uint64_t)v11);
LABEL_33:
      v11 = (llvm::Constant *)((char *)v11 + 40);
      if (v11 == v13)
        return;
    }
    if (v17 != 16)
      goto LABEL_22;
    v42 = *(_DWORD *)(*(_QWORD *)v11 + 12);
    if (!v42)
      goto LABEL_33;
    v29 = 0;
    while (1)
    {
      v30 = (const void **)sub_1C5F72BD4((uint64_t)this, (llvm::Constant *)*i, v29);
      v31 = v30;
      v32 = *(unsigned __int8 *)v30;
      if ((v32 - 4) < 2)
      {
        v33 = *((unsigned int *)v30 + 4);
        if (v33 > 0x40)
        {
          __src = (void *)operator new[]();
          memcpy(__src, v31[1], ((v33 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          __src = (void *)v30[1];
        }
        __n = *((unsigned int *)v31 + 8);
        if (__n > 0x40)
        {
          v40 = (void *)operator new[]();
          memcpy(v40, v31[3], ((__n + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v40 = (void *)v31[3];
        }
        v34 = v32 | (*((unsigned __int8 *)v31 + 1) << 8);
      }
      else
      {
        __n = v15;
        v33 = v14;
        if ((v32 - 2) < 2)
          __src = (void *)v30[1];
        v34 = *(unsigned __int8 *)v30;
      }
      v35 = sub_1C5F72BD4((uint64_t)this, v11, v29);
      v51 = v32;
      if (v34 - 4 < 2)
      {
        v53 = v33;
        if (v33 > 0x40)
        {
          v52 = (void *)operator new[]();
          memcpy(v52, __src, (((unint64_t)v53 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v52 = __src;
        }
        v55 = __n;
        if (__n > 0x40)
        {
          v54 = (void *)operator new[]();
          memcpy(v54, v40, (((unint64_t)v55 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v54 = v40;
        }
        v51 = v51 | v34 & 0xFF00;
      }
      else if (v34 - 2 < 2)
      {
        v52 = __src;
      }
      if (!sub_1C4E8EE28((uint64_t)v35, (unsigned __int8 *)&v51, 0xA00000100))
        goto LABEL_65;
      if (*(_BYTE *)v35 == 6)
      {
        v36 = *((unsigned int *)this + 198);
        if (v36 >= *((unsigned int *)this + 199))
        {
          v38 = (char *)this + 784;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 784, (uint64_t)this + 800, v36 + 1, 8);
          v37 = (_DWORD *)((char *)this + 792);
LABEL_76:
          v36 = *v37;
          goto LABEL_64;
        }
        v37 = (_DWORD *)((char *)this + 792);
        v38 = (char *)this + 784;
      }
      else
      {
        v36 = *((unsigned int *)this + 330);
        if (v36 >= *((unsigned int *)this + 331))
        {
          v38 = (char *)this + 1312;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 1312, (uint64_t)this + 1328, v36 + 1, 8);
          v37 = (_DWORD *)((char *)this + 1320);
          goto LABEL_76;
        }
        v37 = (_DWORD *)((char *)this + 1320);
        v38 = (char *)this + 1312;
      }
LABEL_64:
      *(_QWORD *)(*(_QWORD *)v38 + 8 * v36) = v11;
      ++*v37;
LABEL_65:
      if ((v51 & 0xFE) == 4)
      {
        if (v55 >= 0x41 && v54)
          MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
        if (v53 >= 0x41 && v52)
          MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
      }
      v39 = v34 & 0xFE;
      v14 = v33;
      v15 = __n;
      if (v39 == 4)
      {
        if (__n >= 0x41 && v40)
          MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
        if (v14 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      }
      v29 = (llvm::Type *)((_DWORD)v29 + 1);
      if (v42 == (_DWORD)v29)
        goto LABEL_33;
    }
  }
}

void llvm::SCCPInstVisitor::handleCallOverdefined(llvm::SCCPInstVisitor *this, llvm::CallBase *a2, const llvm::Function *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  llvm::CallBase *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  char v17;
  int v18;
  llvm::ValueHandleBase *Constant;
  uint64_t v20;
  char v21;
  unsigned int v22;
  void *v23;
  BOOL v24;
  char v25;
  const void **v26;
  const void **v27;
  int v28;
  void *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  BOOL v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t *v42;
  llvm::Value **v43;
  int v44;
  size_t v45;
  const void *v46;
  void *v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  void *__s2;
  unsigned int v52;
  const void *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  void *v58;
  void *__src;
  unsigned int v60;
  void *__s1;
  unsigned int v62;
  void *v63;
  uint64_t v64;
  _QWORD v65[9];

  v65[8] = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a2 - 4);
  if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *((_QWORD *)a2 + 9))
    v5 = 0;
  v6 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if (v6 == 7)
    return;
  if (v6 == 16)
  {
    sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
    return;
  }
  if (!v5)
    goto LABEL_87;
  if (*(_BYTE *)(v5 + 16))
  {
    if (*(_BYTE *)(v5 + 16) != 3 || (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) != 0)
      goto LABEL_87;
  }
  else if (*(_QWORD *)(v5 + 72) != v5 + 72 || (*(_BYTE *)(v5 + 34) & 0x80) != 0)
  {
    goto LABEL_87;
  }
  if (!llvm::canConstantFoldCallTo(a2, (const llvm::CallBase *)v5, a3))
  {
LABEL_87:
    sub_1C5F77F48((__int16 *)&v53, (llvm::ConstantPointerNull **)a2);
    sub_1C5F721C0((uint64_t)this, (uint64_t)a2, &v53, 0x100000000);
    if ((v53 & 0xFE) == 4)
    {
      if (v57 >= 0x41 && v56)
        MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
      if (v55 >= 0x41)
      {
        if (v54)
          MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
      }
    }
    return;
  }
  v63 = v65;
  v64 = 0x800000000;
  v7 = *((_DWORD *)a2 + 5);
  v8 = v7 & 0x7FFFFFF;
  v9 = *((unsigned __int8 *)a2 + 16);
  if (v9 != 84)
    goto LABEL_103;
  v10 = 0;
  while (1)
  {
    v11 = (llvm::CallBase *)((char *)a2 - 32 * v8);
    if (v7 < 0 && (v49 = *((_QWORD *)v11 - 1), (v49 & 0xFFFFFFFF0) != 0))
      v12 = (*((_DWORD *)v11 - 3) - *(_DWORD *)((char *)v11 - v49));
    else
      v12 = 0;
    if (v11 != (llvm::CallBase *)((char *)a2 + -32 * v12 + -32 * v10 - 32))
    {
      v13 = -32 * v8;
      v14 = (32 * v10 + 32 * v12) ^ 0xFFFFFFFFFFFFFFE0;
      while (1)
      {
        v15 = *(_QWORD *)((char *)a2 + v13);
        if (*(_BYTE *)(*(_QWORD *)v15 + 8) == 16)
          goto LABEL_82;
        v16 = (unsigned __int8 *)sub_1C5F71F80((uint64_t)this, v15);
        v17 = *v16;
        LOWORD(v58) = *v16;
        v18 = *v16;
        if ((v18 - 4) < 2)
        {
          v60 = *((_DWORD *)v16 + 4);
          if (v60 > 0x40)
          {
            v26 = (const void **)v16;
            __src = (void *)operator new[]();
            memcpy(__src, v26[1], (((unint64_t)v60 + 63) >> 3) & 0x3FFFFFF8);
            v16 = (unsigned __int8 *)v26;
          }
          else
          {
            __src = (void *)*((_QWORD *)v16 + 1);
          }
          v62 = *((_DWORD *)v16 + 8);
          if (v62 > 0x40)
          {
            v27 = (const void **)v16;
            __s1 = (void *)operator new[]();
            memcpy(__s1, v27[3], (((unint64_t)v62 + 63) >> 3) & 0x3FFFFFF8);
            v16 = (unsigned __int8 *)v27;
          }
          else
          {
            __s1 = (void *)*((_QWORD *)v16 + 3);
          }
          v17 = (char)v58;
          LOWORD(v58) = v58 | (v16[1] << 8);
        }
        else if ((v18 - 2) < 2)
        {
          __src = (void *)*((_QWORD *)v16 + 1);
        }
        if ((v17 & 0xFE) == 0)
          goto LABEL_47;
        if (v17 != 2)
        {
          if ((v17 & 0xFE) != 4)
            break;
          v52 = v60;
          if (v60 > 0x40)
          {
            __s2 = (void *)operator new[]();
            memcpy(__s2, __src, (((unint64_t)v52 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            __s2 = __src;
          }
          llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          v22 = v52;
          v23 = __s2;
          v52 = 0;
          if (v62 > 0x40)
          {
            v50 = v22;
            v28 = memcmp(__s1, __s2, (((unint64_t)v62 + 63) >> 3) & 0x3FFFFFF8);
            v22 = v50;
            v24 = v28 == 0;
          }
          else
          {
            v24 = __s1 == __s2;
          }
          v25 = v24;
          if (v22 >= 0x41)
          {
            if (v23)
            {
              v29 = v23;
              v30 = v25;
              MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
              v25 = v30;
              if (v52 >= 0x41)
              {
                if (__s2)
                {
                  MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
                  v25 = v30;
                }
              }
            }
          }
          if ((v25 & 1) == 0)
            break;
        }
        Constant = llvm::SCCPInstVisitor::getConstant((uint64_t)this, (uint64_t)&v58);
        v20 = v64;
        if (v64 >= (unint64_t)HIDWORD(v64))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v64 + 1, 8);
          v20 = v64;
        }
        *((_QWORD *)v63 + v20) = Constant;
        LODWORD(v64) = v64 + 1;
        v21 = 1;
LABEL_48:
        if ((v58 & 0xFE) == 4)
        {
          if (v62 >= 0x41 && __s1)
            MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
          if (v60 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        }
        if ((v21 & 1) == 0)
          goto LABEL_83;
        v13 += 32;
        if (v14 == v13)
          goto LABEL_66;
      }
      sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
LABEL_47:
      v21 = 0;
      goto LABEL_48;
    }
LABEL_66:
    v31 = sub_1C5F71F80((uint64_t)this, (uint64_t)a2);
    if ((*(_WORD *)v31 & 0xFE) != 0 && *(_WORD *)v31 != 2)
    {
      if ((*(_WORD *)v31 & 0xFE) != 4)
        goto LABEL_82;
      v32 = v31;
      v33 = *(unsigned int *)(v31 + 16);
      LODWORD(__src) = v33;
      if (v33 > 0x40)
      {
        v45 = ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8;
        v58 = (void *)operator new[]();
        memcpy(v58, *(const void **)(v32 + 8), v45);
      }
      else
      {
        v58 = *(void **)(v31 + 8);
      }
      llvm::APInt::operator+=((uint64_t)&v58, 1uLL);
      v34 = __src;
      v35 = v58;
      LODWORD(__src) = 0;
      v36 = *(unsigned int *)(v32 + 32);
      if (v36 > 0x40)
      {
        v46 = *(const void **)(v32 + 24);
        v47 = v58;
        v48 = memcmp(v46, v58, ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8);
        v35 = v47;
        v37 = v48 == 0;
      }
      else
      {
        v37 = *(_QWORD *)(v32 + 24) == (_QWORD)v58;
      }
      v38 = v37;
      if (v34 >= 0x41)
      {
        if (v35)
        {
          MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
          if (__src >= 0x41)
          {
            if (v58)
              MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
          }
        }
      }
      if ((v38 & 1) == 0)
      {
LABEL_82:
        sub_1C5F70CDC((_BOOL8)this, (uint64_t)a2);
        goto LABEL_83;
      }
    }
    v39 = *((_QWORD *)this + 4);
    if (v39)
      break;
    sub_1C485C2F0();
LABEL_103:
    if (v9 == 39)
      v10 = (*((_DWORD *)a2 + 20) + 1);
    else
      v10 = 2;
  }
  v40 = v64;
  v41 = v63;
  v42 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 48))(v39, v5);
  v43 = llvm::ConstantFoldCall((uint64_t)a2, (uint64_t ***)v5, (uint64_t)v41, v40, v42);
  if (v43)
  {
    if (*((unsigned __int8 *)v43 + 16) - 11 >= 2)
      sub_1C5F70B74((uint64_t)this, (uint64_t)a2, (uint64_t)v43);
LABEL_83:
    v44 = 0;
  }
  else
  {
    v44 = 1;
  }
  if (v63 != v65)
    free(v63);
  if (v44)
    goto LABEL_87;
}

uint64_t sub_1C5F7AD64(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
  v10 = 0;
  v4 = sub_1C5F7CFE4((uint64_t *)(a1 + 2392), &v9, &v10);
  v5 = v10;
  if ((v4 & 1) == 0)
    v5 = *(_QWORD *)(a1 + 2392) + 32 * *(unsigned int *)(a1 + 2408);
  if (v5 == *(_QWORD *)(a1 + 2392) + 32 * *(unsigned int *)(a1 + 2408))
    return 0;
  v6 = *(_QWORD *)(v5 + 8) + 24;
  v9 = 0;
  v10 = a2;
  v7 = sub_1C4926528(v6, &v10, &v9);
  result = 0;
  if (v7)
    return *(_QWORD *)(v9 + 8);
  return result;
}

_QWORD *sub_1C5F7AE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unsigned int v8;
  int v9;
  uint64_t v11;

  v11 = 0;
  v5 = sub_1C5F7D080(*(_QWORD *)(a1 + 2416), *(_DWORD *)(a1 + 2432), a2, &v11);
  v6 = v11;
  if (v5)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)(v6 + 8), a3);
  v8 = *(_DWORD *)(a1 + 2432);
  v9 = *(_DWORD *)(a1 + 2424);
  if (4 * v9 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v9 - *(_DWORD *)(a1 + 2428) <= v8 >> 3)
  {
LABEL_9:
    sub_1C5F7D118(a1 + 2416, v8);
    v11 = 0;
    sub_1C5F7D080(*(_QWORD *)(a1 + 2416), *(_DWORD *)(a1 + 2432), a2, &v11);
    v6 = v11;
  }
  ++*(_DWORD *)(a1 + 2424);
  if (*(_QWORD *)v6 != -4096)
    --*(_DWORD *)(a1 + 2428);
  *(_QWORD *)v6 = a2;
  *(_QWORD *)(v6 + 8) = v6 + 40;
  *(_QWORD *)(v6 + 16) = v6 + 40;
  *(_DWORD *)(v6 + 24) = 2;
  *(_DWORD *)(v6 + 28) = 0;
  *(_DWORD *)(v6 + 32) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)(v6 + 8), a3);
}

void llvm::SCCPInstVisitor::solve(llvm::SCCPInstVisitor *this, uint64_t a2, const llvm::Function *a3)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*((_DWORD *)this + 462))
    goto LABEL_17;
  v4 = *((_DWORD *)this + 198);
  do
  {
    for (; v4; v4 = *((_DWORD *)this + 198))
    {
LABEL_19:
      v13 = *(_QWORD *)(*((_QWORD *)this + 98) + 8 * v4 - 8);
      *((_DWORD *)this + 198) = v4 - 1;
      sub_1C5F7B0C0(this, v13, a3);
    }
    while (1)
    {
      v6 = *((_DWORD *)this + 330);
      if (!v6)
        break;
      v5 = *(_QWORD *)(*((_QWORD *)this + 164) + 8 * v6 - 8);
      *((_DWORD *)this + 330) = v6 - 1;
      if (*(_BYTE *)(*(_QWORD *)v5 + 8) == 16 || *(_BYTE *)sub_1C5F71F80((uint64_t)this, v5) != 6)
        sub_1C5F7B0C0(this, v5, a3);
    }
    v7 = *((_DWORD *)this + 462);
    while (v7)
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 230) + 8 * v7-- - 8);
      *((_DWORD *)this + 462) = v7;
      v9 = v8 + 40;
      v10 = *(_QWORD *)(v8 + 48);
      if (v10 != v9)
      {
        do
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v10)
            v12 = v10 - 24;
          else
            v12 = 0;
          sub_1C5F7D304((uint64_t)this, v12);
          v10 = v11;
        }
        while (v11 != v9);
        v7 = *((_DWORD *)this + 462);
      }
    }
LABEL_17:
    v4 = *((_DWORD *)this + 198);
  }
  while (*((_DWORD *)this + 330));
  if (v4)
    goto LABEL_19;
}

void sub_1C5F7B0C0(llvm::SCCPInstVisitor *this, uint64_t a2, const llvm::Function *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *i;
  unint64_t *v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  void *v41;
  uint64_t v42;
  _QWORD v43[3];

  v43[2] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 16))
  {
    for (; v5; v5 = *(_QWORD *)(v5 + 8))
    {
      v6 = *(_QWORD *)(v5 + 24);
      if (v6)
        v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
      else
        v7 = 0;
      if (v7)
      {
        v8 = sub_1C477672C((uint64_t)this + 40, *(_QWORD *)(v6 + 40));
        v9 = *((_QWORD *)this + 6);
        v10 = v9 == *((_QWORD *)this + 5) ? 60 : 56;
        if (v8 != (_QWORD *)(v9 + 8 * *(unsigned int *)((char *)this + v10)))
          sub_1C5F7D304((uint64_t)this, v6);
      }
    }
  }
  else
  {
    for (; v5; v5 = *(_QWORD *)(v5 + 8))
    {
      v11 = *(unsigned __int8 **)(v5 + 24);
      v12 = v11[16];
      if (v12 >= 0x1C)
      {
        v13 = v12 - 33;
        v14 = v13 > 0x33;
        v15 = (1 << v13) & 0x8000000000041;
        if (!v14 && v15 != 0)
          llvm::SCCPInstVisitor::handleCallResult(this, (llvm::CallBase *)v11, a3);
      }
    }
  }
  v17 = *((_QWORD *)this + 302);
  v18 = *((_DWORD *)this + 608);
  if (!v18)
  {
LABEL_24:
    v19 = (uint64_t *)(v17 + 56 * v18);
    goto LABEL_25;
  }
  v36 = v18 - 1;
  v37 = (v18 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v19 = (uint64_t *)(v17 + 56 * v37);
  v38 = *v19;
  if (*v19 != a2)
  {
    v39 = 1;
    while (v38 != -4096)
    {
      v40 = v37 + v39++;
      v37 = v40 & v36;
      v19 = (uint64_t *)(v17 + 56 * (v40 & v36));
      v38 = *v19;
      if (*v19 == a2)
        goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_25:
  if ((uint64_t *)(v17 + 56 * v18) != v19)
  {
    v41 = v43;
    v42 = 0x200000000;
    v20 = (unint64_t *)v19[2];
    v21 = 24;
    if (v20 == (unint64_t *)v19[1])
      v21 = 28;
    v22 = *(unsigned int *)((char *)v19 + v21);
    if ((_DWORD)v22)
    {
      v23 = 8 * v22;
      for (i = v20; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
      {
        v23 -= 8;
        if (!v23)
          return;
      }
    }
    else
    {
      i = (unint64_t *)v19[2];
    }
    v25 = &v20[v22];
    if (i != v25)
    {
      v26 = 0;
      v27 = *i;
      if (*i)
      {
LABEL_36:
        if (*(unsigned __int8 *)(v27 + 16) >= 0x1Cu)
        {
          if (v26 >= HIDWORD(v42))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, (uint64_t)v43, v26 + 1, 8);
            v26 = v42;
          }
          *((_QWORD *)v41 + v26) = v27;
          v26 = v42 + 1;
          LODWORD(v42) = v42 + 1;
        }
      }
LABEL_40:
      v28 = i + 1;
      while (v28 != v25)
      {
        v29 = *v28++;
        v27 = v29;
        if (v29 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          i = v28 - 1;
          if (v27)
            goto LABEL_36;
          goto LABEL_40;
        }
      }
      v30 = (uint64_t *)v41;
      if (v26)
      {
        v31 = 8 * v26;
        do
        {
          v32 = *v30;
          v33 = sub_1C477672C((uint64_t)this + 40, *(_QWORD *)(*v30 + 40));
          v34 = *((_QWORD *)this + 6);
          if (v34 == *((_QWORD *)this + 5))
            v35 = 60;
          else
            v35 = 56;
          if (v33 != (_QWORD *)(v34 + 8 * *(unsigned int *)((char *)this + v35)))
            sub_1C5F7D304((uint64_t)this, v32);
          ++v30;
          v31 -= 8;
        }
        while (v31);
        v30 = (uint64_t *)v41;
      }
      if (v30 != v43)
        free(v30);
    }
  }
}

uint64_t llvm::SCCPInstVisitor::resolvedUndefsIn(llvm::SCCPInstVisitor *this, llvm::Function *a2)
{
  char *v2;
  int v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  llvm::Type *v18;
  _WORD *v19;
  int v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  BOOL v30;
  uint64_t **v31;
  unsigned int v32;
  BOOL v33;
  uint64_t ***v34;
  int v35;
  char v36;
  uint64_t **v37;
  const llvm::APInt *v38;
  uint64_t *v39;
  uint64_t v40;
  llvm::ValueHandleBase *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  llvm::BasicBlock *v47;
  char v48;
  char v49;
  int v50;
  uint64_t *v51;
  int v52;
  uint64_t *v53;
  llvm::BasicBlock *v54;
  int v55;
  llvm::Function **v56;
  llvm::BasicBlock *v57;
  int v58;
  llvm::BlockAddress *v59;
  int v60;
  uint64_t **v61;
  int v62;
  uint64_t **v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  int v76;
  uint64_t **v77;
  llvm::ConstantInt *v78;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unsigned int v84;

  v2 = (char *)*((_QWORD *)a2 + 10);
  v82 = (char *)a2 + 72;
  if (v2 == (char *)a2 + 72)
  {
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  v4 = 0;
  v80 = (char *)this + 304;
  v81 = (char *)this + 40;
  do
  {
    if (v2)
      v5 = v2 - 24;
    else
      v5 = 0;
    v6 = sub_1C477672C((uint64_t)v81, (uint64_t)v5);
    v7 = *((_QWORD *)this + 6);
    v8 = 56;
    if (v7 == *((_QWORD *)this + 5))
      v8 = 60;
    if (v6 == (_QWORD *)(v7 + 8 * *(unsigned int *)((char *)this + v8)))
      goto LABEL_99;
    v9 = v5 + 40;
    for (i = (_QWORD *)*((_QWORD *)v5 + 6); i != v9; i = (_QWORD *)i[1])
    {
      if (i)
        v11 = (unsigned __int8 *)(i - 3);
      else
        v11 = 0;
      v12 = *(_QWORD *)v11;
      v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + 8);
      if (v13 == 7)
        continue;
      if (v13 == 16)
      {
        v14 = v11[16];
        if ((v14 - 33) > 0x33 || ((1 << (v14 - 33)) & 0x8000000000041) == 0)
          goto LABEL_23;
        v16 = *(i - 7);
        if (!v16 || *(_BYTE *)(v16 + 16) || *(_QWORD *)(v16 + 24) != i[6])
          goto LABEL_23;
        v23 = sub_1C477672C((uint64_t)v80, v16);
        v24 = *((_QWORD *)this + 39);
        v25 = 320;
        if (v24 == *((_QWORD *)this + 38))
          v25 = 324;
        if (v23 == (_QWORD *)(v24 + 8 * *(unsigned int *)((char *)this + v25)))
        {
          LOBYTE(v14) = v11[16];
LABEL_23:
          if ((v14 & 0xFE) != 0x5C)
          {
            v17 = *(_DWORD *)(v12 + 12);
            if (v17)
            {
              v18 = 0;
              do
              {
                v19 = sub_1C5F72BD4((uint64_t)this, (llvm::Constant *)v11, v18);
                if ((*v19 & 0xFE) == 0)
                {
                  llvm::SCCPInstVisitor::markOverdefined((uint64_t)this, (uint64_t)v19, (uint64_t)v11);
                  v4 = 1;
                }
                v18 = (llvm::Type *)((_DWORD)v18 + 1);
              }
              while (v17 != (_DWORD)v18);
            }
          }
          continue;
        }
      }
      else
      {
        if ((*(_WORD *)sub_1C5F71F80((uint64_t)this, (uint64_t)v11) & 0xFE) != 0)
          continue;
        v20 = v11[16];
        if ((v20 - 33) <= 0x33 && ((1 << (v20 - 33)) & 0x8000000000041) != 0)
        {
          v22 = *(i - 7);
          if (v22)
          {
            if (!*(_BYTE *)(v22 + 16) && *(_QWORD *)(v22 + 24) == i[6])
            {
              v83 = 0;
              if (sub_1C5F7F1C4(*((_QWORD *)this + 26), *((_DWORD *)this + 56), v22, &v83))
              {
                v26 = v83;
                v27 = *((_QWORD *)this + 26);
                v28 = *((unsigned int *)this + 56);
              }
              else
              {
                v27 = *((_QWORD *)this + 26);
                v28 = *((unsigned int *)this + 56);
                v26 = v27 + 16 * v28;
              }
              if (v26 != v27 + 16 * v28)
                continue;
              v20 = v11[16];
            }
          }
        }
        if (v20 != 60)
        {
          sub_1C5F70CDC((_BOOL8)this, (uint64_t)v11);
          v4 = 1;
        }
      }
    }
    v29 = (_QWORD *)*v9;
    if ((_QWORD *)*v9 == v9)
      goto LABEL_99;
    v30 = v29 == 0;
    if (v29)
      v31 = (uint64_t **)(v29 - 3);
    else
      v31 = 0;
    v32 = *((unsigned __int8 *)v31 + 16) - 40;
    v33 = __CFADD__(v32, 11);
    if (v32 >= 0xFFFFFFF5)
      v34 = (uint64_t ***)v31;
    else
      v34 = 0;
    v35 = *((unsigned __int8 *)v34 + 16);
    v36 = !v33 || v30;
    if (v35 != 30 || (v36 & 1) != 0)
    {
      if (v35 == 32)
        v48 = v36;
      else
        v48 = 1;
      if ((v48 & 1) != 0)
      {
        if (v35 == 31)
          v49 = v36;
        else
          v49 = 1;
        if ((v49 & 1) != 0)
          goto LABEL_99;
        v50 = *((_DWORD *)v31 + 5);
        if ((v50 & 0x7FFFFFE) == 2)
          goto LABEL_99;
        v51 = (v50 & 0x40000000) != 0 ? *(v31 - 1) : (uint64_t *)&v31[-4 * (v50 & 0x7FFFFFF)];
        if ((*(_WORD *)sub_1C5F71F80((uint64_t)this, *v51) & 0xFE) != 0)
          goto LABEL_99;
        v62 = *((_DWORD *)v31 + 5);
        if ((v62 & 0x40000000) != 0)
        {
          v63 = (uint64_t **)*(v31 - 1);
          if (*((unsigned __int8 *)*v63 + 16) - 11 > 1)
            goto LABEL_106;
        }
        else
        {
          v63 = &v31[-4 * (v62 & 0x7FFFFFF)];
          if (*((unsigned __int8 *)*v63 + 16) - 11 >= 2)
          {
LABEL_106:
            v57 = (llvm::BasicBlock *)v63[12];
            goto LABEL_96;
          }
        }
        v64 = v63 + 1;
        v65 = v63[8];
        *v63[2] = (uint64_t)v63[1];
        v66 = v63[1];
        if (v66)
          v66[2] = (uint64_t)v63[2];
        *v63 = v65;
        if (v65)
        {
          v69 = v65[1];
          v67 = v65 + 1;
          v68 = v69;
          *v64 = v69;
          if (v69)
            *(_QWORD *)(v68 + 16) = v64;
          v63[2] = v67;
          *v67 = (uint64_t)v63;
        }
        v70 = *((_DWORD *)v31 + 5);
        if ((v70 & 0x40000000) != 0)
          v71 = (uint64_t **)*(v31 - 1);
        else
          v71 = &v31[-4 * (v70 & 0x7FFFFFF)];
        v47 = (llvm::BasicBlock *)v71[12];
LABEL_74:
        llvm::SCCPInstVisitor::markEdgeExecutable(this, (llvm::BasicBlock *)v5, v47);
        v4 = 1;
        goto LABEL_99;
      }
      v52 = *((_DWORD *)v34 + 5);
      if ((v52 & 0x7FFFFFF) == 1)
        goto LABEL_99;
      v53 = (v52 & 0x40000000) != 0 ? (uint64_t *)*(v34 - 1) : (uint64_t *)&v34[-4 * (v52 & 0x7FFFFFF)];
      if ((*(_WORD *)sub_1C5F71F80((uint64_t)this, *v53) & 0xFE) != 0)
        goto LABEL_99;
      v55 = *((_DWORD *)v34 + 5);
      if ((v55 & 0x40000000) != 0)
      {
        v56 = (llvm::Function **)*(v34 - 1);
        if (*((unsigned __int8 *)*v56 + 16) - 11 > 1)
          goto LABEL_93;
      }
      else
      {
        v56 = (llvm::Function **)&v34[-4 * (v55 & 0x7FFFFFF)];
        if (*((unsigned __int8 *)*v56 + 16) - 11 >= 2)
        {
LABEL_93:
          v57 = v56[4];
          goto LABEL_96;
        }
      }
      v59 = llvm::BlockAddress::get(*((llvm::BlockAddress **)v56[4] + 7), v56[4], v54);
      v60 = *((_DWORD *)v34 + 5);
      if ((v60 & 0x40000000) != 0)
        v61 = *(v34 - 1);
      else
        v61 = (uint64_t **)&v34[-4 * (v60 & 0x7FFFFFF)];
      if (*v61)
      {
        *v61[2] = (uint64_t)v61[1];
        v72 = v61[1];
        if (v72)
          v72[2] = (uint64_t)v61[2];
      }
      *v61 = (uint64_t *)v59;
      if (v59)
      {
        v75 = (uint64_t *)*((_QWORD *)v59 + 1);
        v73 = (uint64_t *)((char *)v59 + 8);
        v74 = v75;
        v61[1] = v75;
        if (v75)
          v74[2] = (uint64_t)(v61 + 1);
        v61[2] = v73;
        *v73 = (uint64_t)v61;
      }
      v76 = *((_DWORD *)v34 + 5);
      if ((v76 & 0x40000000) != 0)
        v77 = *(v34 - 1);
      else
        v77 = (uint64_t **)&v34[-4 * (v76 & 0x7FFFFFF)];
      v47 = (llvm::BasicBlock *)v77[4];
      goto LABEL_74;
    }
    if ((*((_DWORD *)v34 + 5) & 0x7FFFFFF) == 3)
    {
      v37 = (uint64_t **)(v34 - 12);
      if ((*(_WORD *)sub_1C5F71F80((uint64_t)this, (uint64_t)*(v34 - 12)) & 0xFE) == 0)
      {
        if (*((unsigned __int8 *)*v37 + 16) - 11 <= 1)
        {
          v39 = **v34;
          v40 = *v39;
          v41 = *(llvm::ValueHandleBase **)(*v39 + 1568);
          if (v41)
            goto LABEL_66;
          v78 = *(llvm::ConstantInt **)(v40 + 1888);
          v84 = *(_DWORD *)(v40 + 1896) >> 8;
          if (v84 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v83, 0, 0);
          else
            v83 = 0;
          v41 = llvm::ConstantInt::get(v78, (llvm::LLVMContext *)&v83, v38);
          if (v84 >= 0x41 && v83)
            MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
          *(_QWORD *)(v40 + 1568) = v41;
          if (*v37)
          {
LABEL_66:
            **(v34 - 10) = (uint64_t *)*(v34 - 11);
            v42 = (uint64_t)*(v34 - 11);
            if (v42)
              *(_QWORD *)(v42 + 16) = *(v34 - 10);
          }
          *v37 = (uint64_t *)v41;
          if (v41)
          {
            v45 = (uint64_t *)*((_QWORD *)v41 + 1);
            v44 = (uint64_t *)((char *)v41 + 8);
            v43 = v45;
            *(v34 - 11) = (uint64_t **)v45;
            if (v45)
              v43[2] = (uint64_t)(v34 - 11);
            *(v34 - 10) = (uint64_t **)v44;
            *v44 = (uint64_t)v37;
          }
          v46 = *((unsigned __int8 *)v34 + 16);
          if (v46 != 30)
            __asm { BR              X9 }
          v47 = (llvm::BasicBlock *)*(v34 - 8);
          goto LABEL_74;
        }
        v58 = *((unsigned __int8 *)v34 + 16);
        if (v58 != 30)
          __asm { BR              X9 }
        v57 = (llvm::BasicBlock *)*(v34 - 8);
LABEL_96:
        v4 |= llvm::SCCPInstVisitor::markEdgeExecutable(this, (llvm::BasicBlock *)v5, v57);
      }
    }
LABEL_99:
    v2 = (char *)*((_QWORD *)v2 + 1);
  }
  while (v2 != v82);
  return v4 & 1;
}

uint64_t *llvm::SCCPSolver::SCCPSolver(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void (**v11)(_QWORD *);
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  v9 = (_QWORD *)a3[3];
  if (v9)
  {
    if (v9 == a3)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v13);
    }
    else
    {
      v14 = (_QWORD *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    v14 = 0;
  }
  sub_1C5F7DEC4(v8, a2, (uint64_t)v13, a4);
  *a1 = v8;
  v10 = v14;
  if (v14 == v13)
  {
    v11 = (void (**)(_QWORD *))(v13[0] + 32);
    v10 = v13;
  }
  else
  {
    if (!v14)
      return a1;
    v11 = (void (**)(_QWORD *))(*v14 + 40);
  }
  (*v11)(v10);
  return a1;
}

void llvm::SCCPSolver::~SCCPSolver(llvm::SCCPSolver *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
  {
    v3 = sub_1C5F7F2F0(v2);
    MEMORY[0x1CAA32FC0](v3, 0x10E0C4009A2F9D2);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
  {
    v3 = sub_1C5F7F2F0(v2);
    MEMORY[0x1CAA32FC0](v3, 0x10E0C4009A2F9D2);
  }
}

llvm::PredicateInfo *llvm::SCCPSolver::addAnalysis(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  llvm::PredicateInfo *v4;
  llvm::PredicateInfo *result;
  llvm::PredicateInfo *v6;
  __int128 v7;

  v3 = *a1;
  v4 = *(llvm::PredicateInfo **)a3;
  *(_QWORD *)a3 = 0;
  v6 = v4;
  v7 = *(_OWORD *)(a3 + 8);
  sub_1C5F7BD10(v3, a2, (uint64_t)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    llvm::PredicateInfo::~PredicateInfo(result);
    return (llvm::PredicateInfo *)MEMORY[0x1CAA32FC0]();
  }
  return result;
}

llvm::PredicateInfo *sub_1C5F7BD10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::PredicateInfo *v3;
  llvm::PredicateInfo *result;
  _BYTE v5[24];
  uint64_t v6;
  llvm::PredicateInfo *v7;
  __int128 v8;

  v3 = *(llvm::PredicateInfo **)a3;
  *(_QWORD *)a3 = 0;
  v6 = a2;
  v7 = v3;
  v8 = *(_OWORD *)(a3 + 8);
  sub_1C5F7E014((_DWORD *)(a1 + 2392), &v6, (uint64_t *)&v7, (uint64_t)v5);
  result = v7;
  v7 = 0;
  if (result)
  {
    llvm::PredicateInfo::~PredicateInfo(result);
    return (llvm::PredicateInfo *)MEMORY[0x1CAA32FC0]();
  }
  return result;
}

BOOL llvm::SCCPSolver::markBlockExecutable(llvm::SCCPInstVisitor **this, llvm::BasicBlock *a2)
{
  return llvm::SCCPInstVisitor::markBlockExecutable(*this, a2);
}

uint64_t llvm::SCCPSolver::getPredicateInfoFor(llvm::SCCPSolver *this, llvm::Instruction *a2)
{
  return sub_1C5F7AD64(*(_QWORD *)this, (uint64_t)a2);
}

double llvm::SCCPSolver::getDTU@<D0>(llvm::SCCPSolver *this@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1C5F7BD98(*(_QWORD *)this, (uint64_t)a2, a3);
}

double sub_1C5F7BD98@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __int128 v6;
  double result;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = 0;
  if ((sub_1C5F7CFE4((uint64_t *)(a1 + 2392), &v8, &v9) & 1) != 0)
    v5 = v9;
  else
    v5 = *(_QWORD *)(a1 + 2392) + 32 * *(unsigned int *)(a1 + 2408);
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 0x1000000000;
  v6 = *(_OWORD *)(v5 + 16);
  *(_QWORD *)(a3 + 272) = 0;
  *(_QWORD *)(a3 + 280) = 0;
  *(_OWORD *)(a3 + 288) = v6;
  *(_BYTE *)(a3 + 304) = 1;
  *(_QWORD *)(a3 + 312) = a3 + 344;
  *(_QWORD *)(a3 + 320) = a3 + 344;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(a3 + 328) = 8;
  *(_DWORD *)(a3 + 336) = 0;
  *(_WORD *)(a3 + 432) = 0;
  *(_QWORD *)(a3 + 416) = 0;
  *(_QWORD *)(a3 + 424) = 0;
  *(_QWORD *)(a3 + 408) = 0;
  return result;
}

_QWORD *llvm::SCCPSolver::trackValueOfGlobalVariable(llvm::SCCPSolver *this, llvm::GlobalVariable *a2)
{
  return sub_1C5F7BE40(*(_QWORD **)this, (uint64_t)a2);
}

_QWORD *sub_1C5F7BE40(_QWORD *result, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  BOOL v7;
  uint64_t v8;

  v8 = a2;
  v2 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 8);
  v3 = (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 8) & 0xFE) == 0x12 || v2 == 13;
  if (v3 || ((v5 = v2 >= 0x15, v3 = v2 == 21, v6 = (1 << v2) & 0x208C7F, v3 || !v5) ? (v7 = v6 == 0) : (v7 = 1), !v7))
  {
    result = sub_1C5F7E38C((_DWORD *)result + 46, &v8);
    v4 = *(_QWORD *)(v8 - 32);
    if (*(unsigned __int8 *)(v4 + 16) - 11 >= 2)
      return (_QWORD *)sub_1C4E8C21C((uint64_t)(result + 1), v4, 0);
  }
  return result;
}

uint64_t llvm::SCCPSolver::addTrackedFunction(llvm::SCCPSolver *this, llvm::Function *a2)
{
  return sub_1C5F7BED4(*(_QWORD *)this, (uint64_t)a2);
}

uint64_t sub_1C5F7BED4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  _DWORD v15[4];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;

  v3 = result;
  v22 = *MEMORY[0x1E0C80C00];
  v4 = **(_QWORD **)(*(_QWORD *)(a2 + 24) + 16);
  v5 = *(unsigned __int8 *)(v4 + 8);
  if (v4)
    v6 = v5 == 16;
  else
    v6 = 0;
  if (v6)
  {
    result = (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)(result + 304), a2);
    v7 = *(unsigned int *)(v4 + 12);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        *(_QWORD *)&v16 = a2;
        *((_QWORD *)&v16 + 1) = i;
        LOWORD(v17) = 0;
        v14 = v16;
        v15[0] = 0;
        result = sub_1C5F7E730((uint64_t)&v12, v3 + 256, (uint64_t)&v14, v15);
        if (v13)
        {
          v9 = v12;
          v10 = *(_QWORD *)(v3 + 288);
          if (v10 >= *(_QWORD *)(v3 + 296))
          {
            result = (uint64_t)sub_1C5F7E998((int64x2_t *)(v3 + 280), (uint64_t)&v16);
            v11 = v17;
          }
          else
          {
            v11 = 0;
            *(_OWORD *)v10 = v16;
            *(_WORD *)(v10 + 16) = 0;
            result = v10 + 56;
          }
          *(_QWORD *)(v3 + 288) = result;
          *(_DWORD *)(v9 + 16) = -1 - 1227133513 * ((unint64_t)(result - *(_QWORD *)(v3 + 280)) >> 3);
          if ((v11 & 0xFE) == 4)
          {
            if (v21 >= 0x41)
            {
              result = v20;
              if (v20)
                result = MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
            }
            if (v19 >= 0x41)
            {
              result = v18;
              if (v18)
                result = MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
            }
          }
        }
      }
    }
  }
  else if (v5 != 7)
  {
    *(_QWORD *)&v16 = a2;
    WORD4(v16) = 0;
    result = sub_1C63B5EF8(result + 208, (uint64_t *)&v16);
    if ((BYTE8(v16) & 0xFE) == 4)
    {
      if (v20 >= 0x41)
      {
        result = v19;
        if (v19)
          result = MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
      }
      if (v18 >= 0x41)
      {
        result = v17;
        if (v17)
          return MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

_QWORD *llvm::SCCPSolver::addArgumentTrackedFunction(llvm::SCCPSolver *this, llvm::Function *a2)
{
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)(*(_QWORD *)this + 624), (uint64_t)a2);
}

void llvm::SCCPSolver::solve(llvm::SCCPInstVisitor **this, uint64_t a2, const llvm::Function *a3)
{
  llvm::SCCPInstVisitor::solve(*this, a2, a3);
}

uint64_t llvm::SCCPSolver::resolvedUndefsIn(llvm::SCCPInstVisitor **this, llvm::Function *a2)
{
  return llvm::SCCPInstVisitor::resolvedUndefsIn(*this, a2);
}

BOOL llvm::SCCPSolver::isBlockExecutable(llvm::SCCPSolver *this, llvm::BasicBlock *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)this;
  v3 = sub_1C477672C(*(_QWORD *)this + 40, (uint64_t)a2);
  v4 = *(_QWORD *)(v2 + 48);
  v5 = 56;
  if (v4 == *(_QWORD *)(v2 + 40))
    v5 = 60;
  return v3 != (_QWORD *)(v4 + 8 * *(unsigned int *)(v2 + v5));
}

BOOL llvm::SCCPSolver::isEdgeFeasible(llvm::SCCPSolver *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  llvm::BasicBlock **v10;
  llvm::BasicBlock *v11;
  llvm::BasicBlock *v12;
  int v14;
  BOOL v15;
  _BOOL8 result;
  unsigned int v17;
  llvm::BasicBlock **v18;

  v3 = *(_DWORD *)(*(_QWORD *)this + 2384);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)this + 2368);
  v5 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32))
     + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v3 - 1;
  v9 = v8 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
  v10 = (llvm::BasicBlock **)(v4 + 16 * v9);
  v11 = *v10;
  v12 = v10[1];
  if (*v10 == a2 && v12 == a3)
    return 1;
  v14 = 1;
  do
  {
    v15 = v11 == (llvm::BasicBlock *)-4096 && v12 == (llvm::BasicBlock *)-4096;
    result = !v15;
    if (v15)
      break;
    v17 = v9 + v14++;
    v9 = v17 & v8;
    v18 = (llvm::BasicBlock **)(v4 + 16 * v9);
    v11 = *v18;
    v12 = v18[1];
  }
  while (v11 != a2 || v12 != a3);
  return result;
}

void llvm::SCCPSolver::getStructLatticeValueFor(llvm::SCCPSolver *this@<X0>, llvm::Value *a2@<X1>, void **a3@<X8>)
{
  sub_1C5F7C23C(*(_QWORD *)this, (uint64_t *)a2, a3);
}

void sub_1C5F7C23C(uint64_t a1@<X0>, uint64_t *a2@<X1>, void **a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int16 v32;
  char *v33;
  char *v34;
  __int16 v35;
  int v36;
  unsigned int v37;
  char *v39;
  unsigned int v40;
  char *v41;
  char *v42;
  unsigned int v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v51;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a2;
  if (*(_BYTE *)(*a2 + 8) != 16)
    v4 = 0;
  v51 = *(unsigned int *)(v4 + 12);
  if ((_DWORD)v51)
  {
    v5 = a2;
    v6 = 0;
    v7 = 0;
    v49 = (unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32;
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 160);
      v9 = *(_DWORD *)(a1 + 176);
      if (!v9)
        goto LABEL_51;
      v10 = ((37 * v7) | v49) + ~((unint64_t)(37 * v7) << 32);
      v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
      v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
      v13 = (v9 - 1) & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~((_DWORD)v12 << 27)));
      v14 = (uint64_t *)(v8 + 56 * v13);
      v15 = (uint64_t *)*v14;
      v16 = *((unsigned int *)v14 + 2);
      if ((uint64_t *)*v14 != v5 || v7 != v16)
        break;
LABEL_11:
      v18 = (unint64_t)a3[2];
      if ((unint64_t)v6 >= v18)
      {
        v19 = (char *)*a3;
        v20 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - (_BYTE *)*a3) >> 3);
        v21 = v20 + 1;
        if (v20 + 1 > 0x666666666666666)
          abort();
        v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (_QWORD)v19) >> 3);
        if (2 * v22 > v21)
          v21 = 2 * v22;
        if (v22 >= 0x333333333333333)
          v23 = 0x666666666666666;
        else
          v23 = v21;
        if (v23)
        {
          if (v23 > 0x666666666666666)
            sub_1C4764EE4();
          v24 = operator new(40 * v23);
        }
        else
        {
          v24 = 0;
        }
        v25 = (char *)&v24[5 * v20];
        v26 = *((unsigned __int8 *)v14 + 16);
        *(_WORD *)v25 = v26;
        if ((v26 - 4) < 2)
        {
          v39 = (char *)&v24[5 * v20];
          v40 = *((_DWORD *)v14 + 8);
          *((_DWORD *)v39 + 4) = v40;
          if (v40 > 0x40)
          {
            v48 = v39 + 8;
            v44 = (void *)operator new[]();
            *(_QWORD *)v48 = v44;
            memcpy(v44, (const void *)v14[3], (((unint64_t)*((unsigned int *)v48 + 2) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            *((_QWORD *)v39 + 1) = v14[3];
          }
          v41 = (char *)&v24[5 * v20];
          v42 = v41 + 24;
          v43 = *((_DWORD *)v14 + 12);
          *((_DWORD *)v41 + 8) = v43;
          if (v43 > 0x40)
          {
            v45 = (void *)operator new[]();
            *(_QWORD *)v42 = v45;
            memcpy(v45, (const void *)v14[5], (((unint64_t)*((unsigned int *)v42 + 2) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            *(_QWORD *)v42 = v14[5];
          }
          v25[1] = *((_BYTE *)v14 + 17);
        }
        else if ((v26 - 2) < 2)
        {
          v24[5 * v20 + 1] = v14[3];
        }
        v27 = (char *)&v24[5 * v23];
        v28 = v25 + 40;
        if (v6 == v19)
        {
          *a3 = v25;
          a3[1] = v28;
          a3[2] = v27;
        }
        else
        {
          v29 = 0;
          do
          {
            v30 = &v25[v29];
            v31 = &v6[v29];
            v32 = *(_WORD *)&v6[v29 - 40];
            *(_WORD *)&v25[v29 - 40] = v32;
            if (v32 - 4 < 2)
            {
              *((_DWORD *)v30 - 6) = *((_DWORD *)v31 - 6);
              *((_QWORD *)v30 - 4) = *((_QWORD *)v31 - 4);
              *((_DWORD *)v31 - 6) = 0;
              *((_DWORD *)v30 - 2) = *((_DWORD *)v31 - 2);
              *((_QWORD *)v30 - 2) = *((_QWORD *)v31 - 2);
              *((_DWORD *)v31 - 2) = 0;
              v32 = *((_WORD *)v31 - 20);
              *(v30 - 39) = HIBYTE(v32);
            }
            else if (v32 - 2 < 2)
            {
              *(_QWORD *)&v25[v29 - 32] = *(_QWORD *)&v6[v29 - 32];
              v32 = *((_WORD *)v31 - 20);
            }
            *((_WORD *)v31 - 20) = v32 & 0xFF00;
            v29 -= 40;
          }
          while (&v6[v29] != v19);
          v6 = (char *)*a3;
          v33 = (char *)a3[1];
          *a3 = &v25[v29];
          a3[1] = v28;
          a3[2] = v27;
          if (v33 != v6)
          {
            v34 = v33;
            v5 = a2;
            do
            {
              v35 = *((_WORD *)v34 - 20);
              v34 -= 40;
              if ((v35 & 0xFE) == 4)
              {
                if (*((_DWORD *)v33 - 2) >= 0x41u)
                {
                  v47 = *((_QWORD *)v33 - 2);
                  if (v47)
                    MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
                }
                v5 = a2;
                if (*((_DWORD *)v33 - 6) >= 0x41u)
                {
                  v46 = *((_QWORD *)v33 - 4);
                  if (v46)
                    MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
                }
              }
              v33 = v34;
            }
            while (v34 != v6);
            goto LABEL_47;
          }
        }
        v5 = a2;
LABEL_47:
        if (v6)
          operator delete(v6);
        goto LABEL_49;
      }
      sub_1C5F7C748((uint64_t)v6, (unsigned __int8 *)v14 + 16);
      v28 = v6 + 40;
LABEL_49:
      a3[1] = v28;
      ++v7;
      v6 = v28;
      if (v7 == v51)
        return;
    }
    v36 = 1;
    while (v15 != (uint64_t *)-4096 || (_DWORD)v16 != -1)
    {
      v37 = v13 + v36++;
      v13 = v37 & (v9 - 1);
      v14 = (uint64_t *)(v8 + 56 * v13);
      v15 = (uint64_t *)*v14;
      v16 = *((unsigned int *)v14 + 2);
      if ((uint64_t *)*v14 == v5 && v7 == v16)
        goto LABEL_11;
    }
LABEL_51:
    v14 = (uint64_t *)(v8 + 56 * v9);
    goto LABEL_11;
  }
}

uint64_t llvm::SCCPSolver::removeLatticeValueFor(int32x2_t **this, llvm::Value *a2)
{
  int32x2_t *v2;
  llvm::Value *v4;

  v2 = *this;
  v4 = a2;
  return sub_1C5F7EF30(v2 + 17, &v4);
}

uint64_t *llvm::SCCPSolver::getLatticeValueFor(llvm::SCCPSolver *this, llvm::Value *a2)
{
  return sub_1C5F7EFFC((uint64_t *)(*(_QWORD *)this + 136), (uint64_t)a2) + 1;
}

BOOL llvm::SCCPSolver::markOverdefined(llvm::SCCPSolver *this, llvm::Value *a2)
{
  return sub_1C5F70CDC(*(_QWORD *)this, (uint64_t)a2);
}

llvm::ValueHandleBase *llvm::SCCPSolver::getConstant(uint64_t *a1, uint64_t a2)
{
  return llvm::SCCPInstVisitor::getConstant(*a1, a2);
}

uint64_t sub_1C5F7C748(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  void *v9;

  *(_WORD *)a1 = *a2;
  v4 = *a2;
  if ((v4 - 4) < 2)
  {
    v6 = *((_DWORD *)a2 + 4);
    *(_DWORD *)(a1 + 16) = v6;
    if (v6 > 0x40)
    {
      v8 = (void *)operator new[]();
      *(_QWORD *)(a1 + 8) = v8;
      memcpy(v8, *((const void **)a2 + 1), (((unint64_t)*(unsigned int *)(a1 + 16) + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    }
    v7 = *((_DWORD *)a2 + 8);
    *(_DWORD *)(a1 + 32) = v7;
    if (v7 > 0x40)
    {
      v9 = (void *)operator new[]();
      *(_QWORD *)(a1 + 24) = v9;
      memcpy(v9, *((const void **)a2 + 3), (((unint64_t)*(unsigned int *)(a1 + 32) + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    }
    *(_BYTE *)(a1 + 1) = a2[1];
  }
  else if ((v4 - 2) < 2)
  {
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  }
  return a1;
}

uint64_t sub_1C5F7C858(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + 48 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(*(_QWORD *)a1 + 48 * (v11 & v4));
        v7 = *v6;
        if (*a2 == *v6)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a3 = v6;
  return result;
}

_QWORD *sub_1C5F7C8F0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C5F7CA24((uint64_t *)a1, v6);
      v16 = 0;
      sub_1C5F7C858(a1, a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_1C5F7CA24((uint64_t *)a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (_QWORD *)(*(_QWORD *)a1 + 48 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (_QWORD *)(*(_QWORD *)a1 + 48 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5F7CA24(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(48 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 48 * v10;
      do
      {
        *result = -4096;
        result += 6;
        v11 -= 48;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = &v4[6 * v3];
      v13 = v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
          v17 = *a1 + 48 * v16;
          v18 = *(_QWORD *)v17;
          if (v14 != *(_QWORD *)v17)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -4096)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -8192;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v15;
              v17 = *a1 + 48 * (v22 & v15);
              v18 = *(_QWORD *)v17;
              if (v14 == *(_QWORD *)v17)
                goto LABEL_23;
            }
            if (v19)
              v17 = v19;
          }
LABEL_23:
          *(_QWORD *)v17 = v14;
          *(_WORD *)(v17 + 8) = *((unsigned __int8 *)v13 + 8);
          v23 = *((unsigned __int8 *)v13 + 8);
          if ((v23 - 4) < 2)
          {
            *(_DWORD *)(v17 + 24) = *((_DWORD *)v13 + 6);
            *(_QWORD *)(v17 + 16) = v13[2];
            *((_DWORD *)v13 + 6) = 0;
            *(_DWORD *)(v17 + 40) = *((_DWORD *)v13 + 10);
            *(_QWORD *)(v17 + 32) = v13[4];
            *((_DWORD *)v13 + 10) = 0;
            *(_BYTE *)(v17 + 9) = *((_BYTE *)v13 + 9);
          }
          else if ((v23 - 2) < 2)
          {
            *(_QWORD *)(v17 + 16) = v13[2];
          }
          *((_WORD *)v13 + 4) = *((unsigned __int8 *)v13 + 9) << 8;
          ++*((_DWORD *)a1 + 2);
          if ((v13[1] & 0xFE) == 4)
          {
            v29 = v12;
            v24 = v13;
            if (*((_DWORD *)v13 + 10) >= 0x41u)
            {
              v26 = v13[4];
              if (v26)
                MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
            }
            v13 = v24;
            v12 = v29;
            if (*((_DWORD *)v24 + 6) >= 0x41u)
            {
              v25 = v24[2];
              if (v25)
              {
                MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
                v13 = v24;
                v12 = v29;
              }
            }
          }
        }
        v13 += 6;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v27 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v27)
  {
    v28 = 48 * v27;
    do
    {
      *result = -4096;
      result += 6;
      v28 -= 48;
    }
    while (v28);
  }
  return result;
}

_OWORD *sub_1C5F7CCB8(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  int v29;
  BOOL v30;
  unsigned int v32;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = xmmword_1C85F22C0;
        result = (_OWORD *)((char *)result + 56);
        v11 -= 56;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = &v4[7 * v3];
      v13 = v4;
      do
      {
        v14 = *v13;
        v15 = *((_DWORD *)v13 + 2);
        if ((*v13 != -4096 || v15 != -1) && (v14 != -8192 || v15 != -2))
        {
          v18 = ~((unint64_t)(37 * v15) << 32)
              + (37 * v15)
              + ((unint64_t)((v14 >> 4) ^ (v14 >> 9)) << 32);
          v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
          v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
          v21 = ((v20 + ~(v20 << 27)) >> 31) ^ (v20 + ~((_DWORD)v20 << 27));
          v22 = *((_DWORD *)a1 + 4) - 1;
          v23 = v22 & v21;
          v24 = *a1 + 56 * v23;
          v25 = *(_QWORD *)v24;
          v26 = *(_DWORD *)(v24 + 8);
          if (v14 != *(_QWORD *)v24 || v15 != v26)
          {
            v28 = 0;
            v29 = 1;
            while (v25 != -4096 || v26 != -1)
            {
              if (v28)
                v30 = 0;
              else
                v30 = v26 == -2;
              if (v30 && v25 == -8192)
                v28 = v24;
              v32 = v23 + v29++;
              v23 = v32 & v22;
              v24 = *a1 + 56 * (v32 & v22);
              v25 = *(_QWORD *)v24;
              v26 = *(_DWORD *)(v24 + 8);
              if (v14 == *(_QWORD *)v24 && v15 == v26)
                goto LABEL_40;
            }
            if (v28)
              v24 = v28;
          }
LABEL_40:
          *(_QWORD *)v24 = v14;
          *(_DWORD *)(v24 + 8) = v15;
          *(_WORD *)(v24 + 16) = *((unsigned __int8 *)v13 + 16);
          v34 = *((unsigned __int8 *)v13 + 16);
          if ((v34 - 4) < 2)
          {
            *(_DWORD *)(v24 + 32) = *((_DWORD *)v13 + 8);
            *(_QWORD *)(v24 + 24) = v13[3];
            *((_DWORD *)v13 + 8) = 0;
            *(_DWORD *)(v24 + 48) = *((_DWORD *)v13 + 12);
            *(_QWORD *)(v24 + 40) = v13[5];
            *((_DWORD *)v13 + 12) = 0;
            *(_BYTE *)(v24 + 17) = *((_BYTE *)v13 + 17);
          }
          else if ((v34 - 2) < 2)
          {
            *(_QWORD *)(v24 + 24) = v13[3];
          }
          *((_WORD *)v13 + 8) = *((unsigned __int8 *)v13 + 17) << 8;
          ++*((_DWORD *)a1 + 2);
          if ((v13[2] & 0xFE) == 4)
          {
            v35 = v12;
            v40 = v13;
            if (*((_DWORD *)v13 + 12) >= 0x41u)
            {
              v37 = v13[5];
              if (v37)
                MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
            }
            v13 = v40;
            v12 = v35;
            if (*((_DWORD *)v40 + 8) >= 0x41u)
            {
              v36 = v40[3];
              if (v36)
              {
                MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
                v13 = v40;
                v12 = v35;
              }
            }
          }
        }
        v13 += 7;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v38 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v38)
  {
    v39 = 56 * v38;
    do
    {
      *result = xmmword_1C85F22C0;
      result = (_OWORD *)((char *)result + 56);
      v39 -= 56;
    }
    while (v39);
  }
  return result;
}

uint64_t sub_1C5F7CFE4(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 32 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 32 * v6);
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5F7D080(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 56 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 56 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C5F7D118(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5F7D1DC(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

void sub_1C5F7D1DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 56 * v6;
    do
    {
      *v7 = -4096;
      v7 += 7;
      v8 -= 56;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = 0;
        sub_1C5F7D080(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v15);
        v10 = v15;
        v11 = v15 + 5;
        *v15 = *(_QWORD *)v4;
        v10[1] = v11;
        v12 = *(void **)(v4 + 8);
        v13 = *(void **)(v4 + 16);
        if (v13 == v12)
        {
          v10[2] = v11;
          v14 = *(unsigned int *)(v4 + 28);
          v12 = *(void **)(v4 + 16);
          if ((_DWORD)v14)
          {
            memmove(v11, v12, 8 * v14);
            v13 = *(void **)(v4 + 8);
            v12 = *(void **)(v4 + 16);
          }
        }
        else
        {
          v10[2] = v13;
          *(_QWORD *)(v4 + 16) = v12;
          v13 = v12;
        }
        v10[3] = *(_QWORD *)(v4 + 24);
        *((_DWORD *)v10 + 8) = *(_DWORD *)(v4 + 32);
        *(_QWORD *)(v4 + 24) = 2;
        *(_DWORD *)(v4 + 32) = 0;
        ++*(_DWORD *)(a1 + 8);
        if (v12 != v13)
          free(v12);
      }
      v4 += 56;
    }
    while (v4 != a3);
  }
}

void sub_1C5F7D304(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1C5F7D35C()
{
  llvm::Instruction *v0;
  llvm::SCCPInstVisitor *v1;

  return llvm::SCCPInstVisitor::visitBinaryOperator(v1, v0);
}

void sub_1C5F7D9A4()
{
  JUMPOUT(0x1C5F7D770);
}

void sub_1C5F7D9B8()
{
  JUMPOUT(0x1C5F7D650);
}

void sub_1C5F7D9D0()
{
  uint64_t v0;

  if ((*(_WORD *)(v0 + 18) & 1) == 0)
    JUMPOUT(0x1C5F7D654);
  JUMPOUT(0x1C5F7D770);
}

void sub_1C5F7D9E0()
{
  JUMPOUT(0x1C5F7D650);
}

void sub_1C5F7DA30()
{
  JUMPOUT(0x1C5F7D8C0);
}

void sub_1C5F7DA44()
{
  JUMPOUT(0x1C5F7D860);
}

void sub_1C5F7DA5C()
{
  uint64_t v0;

  if ((*(_WORD *)(v0 + 18) & 1) == 0)
    JUMPOUT(0x1C5F7D864);
  JUMPOUT(0x1C5F7D8C0);
}

void sub_1C5F7DA6C()
{
  JUMPOUT(0x1C5F7D860);
}

void sub_1C5F7DABC(llvm::SCCPInstVisitor *a1, uint64_t a2, const llvm::Function *a3)
{
  uint64_t v5;
  uint64_t v6;
  llvm::BasicBlock *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::BasicBlock **v10;
  int v11;
  void *v12;
  __int128 v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  llvm::SCCPInstVisitor::handleCallResult(a1, (llvm::CallBase *)a2, a3);
  llvm::SCCPInstVisitor::handleCallArguments(a1, (llvm::CallBase *)a2);
  v12 = v14;
  v13 = xmmword_1C6612EE0;
  llvm::SCCPInstVisitor::getFeasibleSuccessors((uint64_t)a1, a2, &v12);
  if ((_DWORD)v13)
  {
    v5 = 0;
    v6 = 0;
    v7 = *(llvm::BasicBlock **)(a2 + 40);
    v8 = 2 * v13;
    v9 = 0xFFFFFFFFLL;
    v10 = (llvm::BasicBlock **)(a2 - 32);
    do
    {
      if (*((_BYTE *)v12 + v6))
      {
        v11 = *(unsigned __int8 *)(a2 + 16);
        if (v11 != 30)
          __asm { BR              X9 }
        llvm::SCCPInstVisitor::markEdgeExecutable(a1, v7, *v10);
      }
      ++v6;
      v10 -= 4;
      v5 += 2;
      ++v9;
    }
    while (v8 != v5);
  }
  if (v12 != v14)
    free(v12);
}

void sub_1C5F7DCC0(llvm::SCCPInstVisitor *a1, uint64_t a2, const llvm::Function *a3)
{
  uint64_t v5;
  uint64_t v6;
  llvm::BasicBlock *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::BasicBlock **v10;
  int v11;
  void *v12;
  __int128 v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  llvm::SCCPInstVisitor::handleCallResult(a1, (llvm::CallBase *)a2, a3);
  llvm::SCCPInstVisitor::handleCallArguments(a1, (llvm::CallBase *)a2);
  v12 = v14;
  v13 = xmmword_1C6612EE0;
  llvm::SCCPInstVisitor::getFeasibleSuccessors((uint64_t)a1, a2, &v12);
  if ((_DWORD)v13)
  {
    v5 = 0;
    v6 = 0;
    v7 = *(llvm::BasicBlock **)(a2 + 40);
    v8 = 2 * v13;
    v9 = 0xFFFFFFFFLL;
    v10 = (llvm::BasicBlock **)(a2 - 32);
    do
    {
      if (*((_BYTE *)v12 + v6))
      {
        v11 = *(unsigned __int8 *)(a2 + 16);
        if (v11 != 30)
          __asm { BR              X9 }
        llvm::SCCPInstVisitor::markEdgeExecutable(a1, v7, *v10);
      }
      ++v6;
      v10 -= 4;
      v5 += 2;
      ++v9;
    }
    while (v8 != v5);
  }
  if (v12 != v14)
    free(v12);
}

uint64_t sub_1C5F7DEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = a2;
  v6 = a1 + 8;
  v7 = *(_QWORD *)(a3 + 24);
  if (v7)
  {
    if (v7 == a3)
    {
      *(_QWORD *)(a1 + 32) = v6;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v6);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 40) = a1 + 72;
  *(_QWORD *)(a1 + 48) = a1 + 72;
  *(_QWORD *)(a1 + 56) = 8;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 336;
  *(_QWORD *)(a1 + 312) = a1 + 336;
  *(_QWORD *)(a1 + 320) = 16;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 464) = a1 + 496;
  *(_QWORD *)(a1 + 472) = a1 + 496;
  *(_QWORD *)(a1 + 480) = 16;
  *(_DWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 624) = a1 + 656;
  *(_QWORD *)(a1 + 632) = a1 + 656;
  *(_QWORD *)(a1 + 640) = 16;
  *(_DWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 784) = a1 + 800;
  *(_QWORD *)(a1 + 792) = 0x4000000000;
  *(_QWORD *)(a1 + 1312) = a1 + 1328;
  *(_QWORD *)(a1 + 1320) = 0x4000000000;
  *(_QWORD *)(a1 + 1840) = a1 + 1856;
  *(_QWORD *)(a1 + 1848) = 0x4000000000;
  *(_DWORD *)(a1 + 2384) = 0;
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_DWORD *)(a1 + 2408) = 0;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_DWORD *)(a1 + 2432) = 0;
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_QWORD *)(a1 + 2440) = a4;
  return a1;
}

uint64_t sub_1C5F7E014@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = 0;
  result = sub_1C5F7E0B0((uint64_t)a1, a2, &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C5F7E144(a1, (uint64_t)a2, a2, v13);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)(result + 8) = v10;
    *(_OWORD *)(result + 16) = *(_OWORD *)(a3 + 1);
    v11 = 1;
  }
  v12 = *(_QWORD *)a1 + 32 * a1[4];
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v12;
  *(_BYTE *)(a4 + 16) = v11;
  return result;
}

uint64_t sub_1C5F7E0B0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  int v11;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + 32 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(*(_QWORD *)a1 + 32 * v5);
        v7 = *v6;
        if (*a2 == *v6)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a3 = v6;
  return result;
}

_QWORD *sub_1C5F7E144(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5F7E1F4((uint64_t)a1, v7);
  v9 = 0;
  sub_1C5F7E0B0((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_1C5F7E1F4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5F7E2AC(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5F7E2AC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      sub_1C5F7E0B0(v5, (_QWORD *)a2, &v11);
      v9 = v11;
      *v11 = *(_QWORD *)a2;
      v10 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      v9[1] = v10;
      *((_OWORD *)v9 + 1) = *(_OWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
      result = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      if (result)
      {
        llvm::PredicateInfo::~PredicateInfo((llvm::PredicateInfo *)result);
        result = MEMORY[0x1CAA32FC0]();
      }
    }
    a2 += 32;
  }
  return result;
}

_QWORD *sub_1C5F7E38C(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C5F7E3EC((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5F7E484(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_WORD *)v5 + 4) = 0;
  }
  return v5;
}

uint64_t sub_1C5F7E3EC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + 48 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(*(_QWORD *)a1 + 48 * (v11 & v4));
        v7 = *v6;
        if (*a2 == *v6)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a3 = v6;
  return result;
}

_QWORD *sub_1C5F7E484(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C5F7E534((uint64_t)a1, v7);
  v9 = 0;
  sub_1C5F7E3EC((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_1C5F7E534(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5F7E5F8(a1, v4, v4 + 48 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 48 * v10;
    do
    {
      *result = -4096;
      result += 6;
      v11 -= 48;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5F7E5F8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 48 * v6;
    do
    {
      *v7 = -4096;
      v7 += 6;
      v8 -= 48;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C5F7E3EC(v5, (_QWORD *)a2, &v11);
      v9 = v11;
      *v11 = *(_QWORD *)a2;
      *((_WORD *)v9 + 4) = *(unsigned __int8 *)(a2 + 8);
      v10 = *(unsigned __int8 *)(a2 + 8);
      if ((v10 - 4) < 2)
      {
        *((_DWORD *)v9 + 6) = *(_DWORD *)(a2 + 24);
        v9[2] = *(_QWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 24) = 0;
        *((_DWORD *)v9 + 10) = *(_DWORD *)(a2 + 40);
        v9[4] = *(_QWORD *)(a2 + 32);
        *(_DWORD *)(a2 + 40) = 0;
        *((_BYTE *)v9 + 9) = *(_BYTE *)(a2 + 9);
      }
      else if ((v10 - 2) < 2)
      {
        v9[2] = *(_QWORD *)(a2 + 16);
      }
      *(_WORD *)(a2 + 8) = *(unsigned __int8 *)(a2 + 9) << 8;
      ++*(_DWORD *)(v5 + 8);
      if ((*(_WORD *)(a2 + 8) & 0xFE) == 4)
        result = sub_1C4E8C6FC(a2 + 16);
    }
    a2 += 48;
  }
  return result;
}

uint64_t sub_1C5F7E730(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  result = sub_1C5F7E7D8(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_QWORD *)a3, *(_DWORD *)(a3 + 8), &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = sub_1C63B5F84(a2, a3, v12);
    v9 = result;
    *(_QWORD *)result = *(_QWORD *)a3;
    *(_DWORD *)(result + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(result + 16) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C5F7E7D8(uint64_t a1, int a2, uint64_t a3, int a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ~((unint64_t)(37 * a4) << 32)
       + (37 * a4)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (uint64_t *)(a1 + 24 * v9);
    v11 = *v10;
    v12 = *((_DWORD *)v10 + 2);
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -2;
        if (v18 && v11 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (uint64_t *)(a1 + 24 * (v20 & v8));
        v11 = *v10;
        v12 = *((_DWORD *)v10 + 2);
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

_OWORD *sub_1C5F7E8D0(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63B6044(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C85F22C0;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

char *sub_1C5F7E998(int64x2_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  __int16 v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v21;
  _QWORD *v22;
  int64x2_t v23;
  char *v24;
  int64x2_t *v25;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1->i64[1] - a1->i64[0]) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1].i64[0] - a1->i64[0]) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v3;
  v25 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x492492492492492)
      sub_1C4764EE4();
    v7 = operator new(56 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (char *)&v7[7 * v2];
  v22 = v7;
  v23.i64[0] = (uint64_t)v8;
  v9 = (char *)&v7[7 * v6];
  v24 = v9;
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v10 = *(_WORD *)(a2 + 16);
  *((_WORD *)v8 + 8) = v10;
  if (v10 - 4 < 2)
  {
    v21 = (char *)&v7[7 * v2];
    *((_DWORD *)v21 + 8) = *(_DWORD *)(a2 + 32);
    *((_QWORD *)v21 + 3) = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 32) = 0;
    *((_DWORD *)v21 + 12) = *(_DWORD *)(a2 + 48);
    *((_QWORD *)v21 + 5) = *(_QWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 48) = 0;
    *((_WORD *)v8 + 8) = v10;
  }
  else if (v10 - 2 < 2)
  {
    v7[7 * v2 + 3] = *(_QWORD *)(a2 + 24);
  }
  *(_WORD *)(a2 + 16) = v10 & 0xFF00;
  v11 = v8 + 56;
  v23.i64[1] = (uint64_t)(v8 + 56);
  v13 = a1->i64[0];
  v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    v14 = vdupq_n_s64(v12);
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = &v8[v15];
      v17 = v12 + v15;
      *(_OWORD *)(v16 - 56) = *(_OWORD *)(v12 + v15 - 56);
      *((_WORD *)v16 - 20) = *(unsigned __int8 *)(v12 + v15 - 40);
      v18 = *(unsigned __int8 *)(v12 + v15 - 40);
      if ((v18 - 4) < 2)
      {
        *((_DWORD *)v16 - 6) = *(_DWORD *)(v17 - 24);
        *((_QWORD *)v16 - 4) = *(_QWORD *)(v17 - 32);
        *(_DWORD *)(v17 - 24) = 0;
        *((_DWORD *)v16 - 2) = *(_DWORD *)(v17 - 8);
        *((_QWORD *)v16 - 2) = *(_QWORD *)(v17 - 16);
        *(_DWORD *)(v17 - 8) = 0;
        *(v16 - 39) = *(_BYTE *)(v17 - 39);
      }
      else if ((v18 - 2) < 2)
      {
        *(_QWORD *)&v8[v15 - 32] = *(_QWORD *)(v12 + v15 - 32);
      }
      *(_WORD *)(v17 - 40) = *(unsigned __int8 *)(v17 - 39) << 8;
      v15 -= 56;
    }
    while (v12 + v15 != v13);
    v14 = *a1;
    v8 += v15;
    v11 = (char *)v23.i64[1];
    v9 = v24;
  }
  a1->i64[0] = (uint64_t)v8;
  a1->i64[1] = (uint64_t)v11;
  v23 = v14;
  v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v9;
  v24 = v19;
  v22 = (_QWORD *)v14.i64[0];
  sub_1C63B6110((uint64_t)&v22);
  return v11;
}

int64x2_t *sub_1C5F7EBEC(int64x2_t *result, uint64_t a2)
{
  int64x2_t *v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  __int16 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  int64x2_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  int64x2_t v26;
  char *v27;
  int64x2_t *v28;

  v3 = result;
  v4 = result[1].u64[0];
  v5 = result->u64[1];
  if (v5 >= v4)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - result->i64[0]) >> 4);
    v9 = v8 + 1;
    if (v8 + 1 > 0x555555555555555)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - result->i64[0]) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v28 = result + 1;
    if (v11)
    {
      if (v11 > 0x555555555555555)
        sub_1C4764EE4();
      v12 = operator new(48 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = (char *)&v12[6 * v8];
    v25 = v12;
    v26.i64[0] = (uint64_t)v13;
    v14 = (char *)&v12[6 * v11];
    v27 = v14;
    *(_QWORD *)v13 = *(_QWORD *)a2;
    v15 = *(_WORD *)(a2 + 8);
    *((_WORD *)v13 + 4) = v15;
    if (v15 - 4 < 2)
    {
      v24 = (char *)&v12[6 * v8];
      *((_DWORD *)v24 + 6) = *(_DWORD *)(a2 + 24);
      *((_QWORD *)v24 + 2) = *(_QWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 24) = 0;
      *((_DWORD *)v24 + 10) = *(_DWORD *)(a2 + 40);
      *((_QWORD *)v24 + 4) = *(_QWORD *)(a2 + 32);
      *(_DWORD *)(a2 + 40) = 0;
      *((_WORD *)v13 + 4) = v15;
    }
    else if (v15 - 2 < 2)
    {
      v12[6 * v8 + 2] = *(_QWORD *)(a2 + 16);
    }
    *(_WORD *)(a2 + 8) = v15 & 0xFF00;
    v7 = v13 + 48;
    v26.i64[1] = (uint64_t)(v13 + 48);
    v17 = v3->i64[0];
    v16 = v3->u64[1];
    if (v16 == v3->i64[0])
    {
      v22 = vdupq_n_s64(v16);
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = &v13[v18];
        v20 = v16 + v18;
        *((_QWORD *)v19 - 6) = *(_QWORD *)(v16 + v18 - 48);
        *((_WORD *)v19 - 20) = *(unsigned __int8 *)(v16 + v18 - 40);
        v21 = *(unsigned __int8 *)(v16 + v18 - 40);
        if ((v21 - 4) < 2)
        {
          *((_DWORD *)v19 - 6) = *(_DWORD *)(v20 - 24);
          *((_QWORD *)v19 - 4) = *(_QWORD *)(v20 - 32);
          *(_DWORD *)(v20 - 24) = 0;
          *((_DWORD *)v19 - 2) = *(_DWORD *)(v20 - 8);
          *((_QWORD *)v19 - 2) = *(_QWORD *)(v20 - 16);
          *(_DWORD *)(v20 - 8) = 0;
          *(v19 - 39) = *(_BYTE *)(v20 - 39);
        }
        else if ((v21 - 2) < 2)
        {
          *(_QWORD *)&v13[v18 - 32] = *(_QWORD *)(v16 + v18 - 32);
        }
        *(_WORD *)(v20 - 40) = *(unsigned __int8 *)(v20 - 39) << 8;
        v18 -= 48;
      }
      while (v16 + v18 != v17);
      v22 = *v3;
      v13 += v18;
      v7 = (char *)v26.i64[1];
      v14 = v27;
    }
    v3->i64[0] = (uint64_t)v13;
    v3->i64[1] = (uint64_t)v7;
    v26 = v22;
    v23 = (char *)v3[1].i64[0];
    v3[1].i64[0] = (uint64_t)v14;
    v27 = v23;
    v25 = (_QWORD *)v22.i64[0];
    result = (int64x2_t *)sub_1C5F7EEB4((uint64_t)&v25);
  }
  else
  {
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *(_WORD *)(v5 + 8) = *(unsigned __int8 *)(a2 + 8);
    v6 = *(unsigned __int8 *)(a2 + 8);
    if ((v6 - 4) < 2)
    {
      *(_DWORD *)(v5 + 24) = *(_DWORD *)(a2 + 24);
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 24) = 0;
      *(_DWORD *)(v5 + 40) = *(_DWORD *)(a2 + 40);
      *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
      *(_DWORD *)(a2 + 40) = 0;
      *(_BYTE *)(v5 + 9) = *(_BYTE *)(a2 + 9);
    }
    else if ((v6 - 2) < 2)
    {
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
    }
    *(_WORD *)(a2 + 8) = *(unsigned __int8 *)(a2 + 9) << 8;
    v7 = (char *)(v5 + 48);
  }
  v3->i64[1] = (uint64_t)v7;
  return result;
}

uint64_t sub_1C5F7EEB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      v4 = v3 - 48;
      *(_QWORD *)(a1 + 16) = v3 - 48;
      if ((*(_WORD *)(v3 - 40) & 0xFE) == 4)
      {
        v6 = v2;
        sub_1C4E8C6FC(v3 - 32);
        v2 = v6;
        v4 = *(_QWORD *)(a1 + 16);
      }
      v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C5F7EF30(int32x2_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = 0;
  v3 = sub_1C5F7C858((uint64_t)a1, a2, &v8);
  if ((_DWORD)v3)
  {
    v4 = v8;
    if ((*(_WORD *)(v8 + 8) & 0xFE) == 4)
    {
      if (*(_DWORD *)(v8 + 40) >= 0x41u)
      {
        v6 = *(_QWORD *)(v8 + 32);
        if (v6)
          MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
      }
      if (*(_DWORD *)(v4 + 24) >= 0x41u)
      {
        v7 = *(_QWORD *)(v4 + 16);
        if (v7)
          MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
      }
    }
    *(_QWORD *)v4 = -8192;
    a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

uint64_t *sub_1C5F7EFFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t *result;
  uint64_t v6;
  int v7;
  unsigned int v8;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 4);
  if (!v3)
    return (uint64_t *)(v2 + 48 * v3);
  v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  result = (uint64_t *)(v2 + 48 * v4);
  v6 = *result;
  if (*result != a2)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      result = (uint64_t *)(v2 + 48 * v4);
      v6 = *result;
      if (*result == a2)
        return result;
    }
    return (uint64_t *)(v2 + 48 * v3);
  }
  return result;
}

uint64_t sub_1C5F7F070(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 48 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 48 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C5F7F108(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v13 = 0;
LABEL_15:
    v6 = sub_1C5F7C8F0(a1, a2, v13);
    *v6 = *a2;
    *((_WORD *)v6 + 4) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 48 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 48 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v13 = v8;
    else
      v13 = v6;
    goto LABEL_15;
  }
  return v6;
}

uint64_t sub_1C5F7F1C4(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v7 = a2 - 1;
    v8 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v4 = (_QWORD *)(a1 + 16 * v8);
    v9 = *v4;
    if (*v4 == a3)
    {
      v5 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(a1 + 16 * (v13 & v7));
        v9 = *v4;
        v5 = 1;
        if (*v4 == a3)
          goto LABEL_3;
      }
      v5 = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

uint64_t sub_1C5F7F258(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 48 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 48 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

uint64_t sub_1C5F7F2F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::PredicateInfo **v44;
  uint64_t v45;
  llvm::PredicateInfo *v46;
  void **v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = *(unsigned int *)(a1 + 2432);
  v3 = *(_QWORD *)(a1 + 2416);
  if ((_DWORD)v2)
  {
    v47 = (void **)(v3 + 16);
    v48 = 56 * v2;
    do
    {
      if (((unint64_t)*(v47 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v47 != *(v47 - 1))
        free(*v47);
      v47 += 7;
      v48 -= 56;
    }
    while (v48);
    v3 = *(_QWORD *)(a1 + 2416);
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  v4 = *(unsigned int *)(a1 + 2408);
  v5 = *(_QWORD *)(a1 + 2392);
  if ((_DWORD)v4)
  {
    v44 = (llvm::PredicateInfo **)(v5 + 8);
    v45 = 32 * v4;
    do
    {
      if (((unint64_t)*(v44 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v46 = *v44;
        *v44 = 0;
        if (v46)
        {
          llvm::PredicateInfo::~PredicateInfo(v46);
          MEMORY[0x1CAA32FC0]();
        }
      }
      v44 += 4;
      v45 -= 32;
    }
    while (v45);
    v5 = *(_QWORD *)(a1 + 2392);
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 2368), 8);
  v6 = *(void **)(a1 + 1840);
  if (v6 != (void *)(a1 + 1856))
    free(v6);
  v7 = *(void **)(a1 + 1312);
  if (v7 != (void *)(a1 + 1328))
    free(v7);
  v8 = *(void **)(a1 + 784);
  if (v8 != (void *)(a1 + 800))
    free(v8);
  v9 = *(void **)(a1 + 632);
  if (v9 != *(void **)(a1 + 624))
    free(v9);
  v10 = *(void **)(a1 + 472);
  if (v10 != *(void **)(a1 + 464))
    free(v10);
  v11 = *(void **)(a1 + 312);
  if (v11 != *(void **)(a1 + 304))
    free(v11);
  v12 = *(_QWORD *)(a1 + 280);
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 288);
    v14 = *(void **)(a1 + 280);
    if (v13 != v12)
    {
      do
      {
        if ((*(_WORD *)(v13 - 40) & 0xFE) == 4)
        {
          if (*(_DWORD *)(v13 - 8) >= 0x41u)
          {
            v39 = *(_QWORD *)(v13 - 16);
            if (v39)
              MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
          }
          if (*(_DWORD *)(v13 - 24) >= 0x41u)
          {
            v40 = *(_QWORD *)(v13 - 32);
            if (v40)
              MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
          }
        }
        v13 -= 56;
      }
      while (v13 != v12);
      v14 = *(void **)(a1 + 280);
    }
    *(_QWORD *)(a1 + 288) = v12;
    operator delete(v14);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 256), 8);
  v15 = *(_QWORD *)(a1 + 232);
  if (v15)
  {
    v16 = *(_QWORD *)(a1 + 240);
    v17 = *(void **)(a1 + 232);
    if (v16 != v15)
    {
      do
      {
        if ((*(_WORD *)(v16 - 40) & 0xFE) == 4)
        {
          if (*(_DWORD *)(v16 - 8) >= 0x41u)
          {
            v41 = *(_QWORD *)(v16 - 16);
            if (v41)
              MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
          }
          if (*(_DWORD *)(v16 - 24) >= 0x41u)
          {
            v42 = *(_QWORD *)(v16 - 32);
            if (v42)
              MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
          }
        }
        v16 -= 48;
      }
      while (v16 != v15);
      v17 = *(void **)(a1 + 232);
    }
    *(_QWORD *)(a1 + 240) = v15;
    operator delete(v17);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 208), 8);
  v18 = *(unsigned int *)(a1 + 200);
  v19 = *(_QWORD *)(a1 + 184);
  if ((_DWORD)v18)
  {
    v49 = v19 + 24;
    v50 = 48 * v18;
    do
    {
      if ((*(_QWORD *)(v49 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000 && (*(_WORD *)(v49 - 16) & 0xFE) == 4)
      {
        if (*(_DWORD *)(v49 + 16) >= 0x41u)
        {
          v51 = *(_QWORD *)(v49 + 8);
          if (v51)
            MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
        }
        if (*(_DWORD *)v49 >= 0x41u)
        {
          v52 = *(_QWORD *)(v49 - 8);
          if (v52)
            MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
        }
      }
      v49 += 48;
      v50 -= 48;
    }
    while (v50);
    v19 = *(_QWORD *)(a1 + 184);
  }
  MEMORY[0x1CAA32FB4](v19, 8);
  v20 = *(_DWORD *)(a1 + 176);
  v21 = *(_QWORD *)(a1 + 160);
  if (v20)
  {
    v31 = v21 + 56 * v20;
    v32 = v21 + 24;
    do
    {
      v34 = v32 - 24;
      v33 = *(_QWORD *)(v32 - 24);
      v35 = *(_DWORD *)(v32 - 16);
      if (v33 != -4096 || v35 != -1)
      {
        v37 = v33 == -8192 && v35 == -2;
        if (!v37 && (*(_WORD *)(v32 - 8) & 0xFE) == 4)
        {
          if (*(_DWORD *)(v32 + 24) >= 0x41u)
          {
            v43 = *(_QWORD *)(v32 + 16);
            if (v43)
              MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
          }
          if (*(_DWORD *)(v32 + 8) >= 0x41u && *(_QWORD *)v32)
            MEMORY[0x1CAA32F9C](*(_QWORD *)v32, 0x1000C8000313F17);
        }
      }
      v32 += 56;
    }
    while (v34 + 56 != v31);
    v21 = *(_QWORD *)(a1 + 160);
  }
  MEMORY[0x1CAA32FB4](v21, 8);
  v22 = *(unsigned int *)(a1 + 152);
  v23 = *(_QWORD *)(a1 + 136);
  if ((_DWORD)v22)
  {
    v24 = v23 + 24;
    v25 = 48 * v22;
    do
    {
      if ((*(_QWORD *)(v24 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000 && (*(_WORD *)(v24 - 16) & 0xFE) == 4)
      {
        if (*(_DWORD *)(v24 + 16) >= 0x41u)
        {
          v38 = *(_QWORD *)(v24 + 8);
          if (v38)
            MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
        }
        if (*(_DWORD *)v24 >= 0x41u)
        {
          v26 = *(_QWORD *)(v24 - 8);
          if (v26)
            MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
        }
      }
      v24 += 48;
      v25 -= 48;
    }
    while (v25);
    v23 = *(_QWORD *)(a1 + 136);
  }
  MEMORY[0x1CAA32FB4](v23, 8);
  v27 = *(void **)(a1 + 48);
  if (v27 != *(void **)(a1 + 40))
    free(v27);
  v28 = *(_QWORD **)(a1 + 32);
  if (v28 == (_QWORD *)(a1 + 8))
  {
    v29 = 4;
    v28 = (_QWORD *)(a1 + 8);
  }
  else
  {
    if (!v28)
      return a1;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
  return a1;
}

_QWORD *llvm::StripGCRelocates::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;

  v3 = sub_1C5F7F888(a1);
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_QWORD *)(a2 + 64) = 2;
  *(_DWORD *)(a2 + 72) = 0;
  if (v3)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

BOOL sub_1C5F7F888(uint64_t a1)
{
  _BOOL8 v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::GCRelocateInst **v11;
  uint64_t v12;
  llvm::GCRelocateInst *v13;
  llvm::Value *DerivedPtr;
  _DWORD *v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v21;
  __int16 v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[21];

  v25[20] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 16) == 3 && (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0)
      return 0;
  }
  else if (*(_QWORD *)(a1 + 72) == a1 + 72 && (*(_BYTE *)(a1 + 34) & 0x80) == 0)
  {
    return 0;
  }
  v23 = v25;
  v24 = 0x1400000000;
  v2 = a1 + 72;
  for (i = *(_QWORD *)(a1 + 80); i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = i - 24;
    if (!i)
      v4 = 0;
    v5 = *(_QWORD *)(v4 + 48);
    if (v5 != v4 + 40)
    {
      while (1)
      {
        if (v5)
          v6 = v5 - 24;
        else
          v6 = 0;
        v7 = sub_1C4E9AE24(v6);
        if (!v7)
          v6 = 0;
        if (v5 && v7 && sub_1C50A011C(*(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF))))
        {
          v8 = v24;
          if (v24 >= (unint64_t)HIDWORD(v24))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v24 + 1, 8);
            v8 = v24;
          }
          *((_QWORD *)v23 + v8) = v6;
          LODWORD(v24) = v24 + 1;
        }
        v5 = *(_QWORD *)(v5 + 8);
        v9 = i - 24;
        if (!i)
          v9 = 0;
        if (v5 == v9 + 40)
          break;
LABEL_32:
        if (i == v2)
          goto LABEL_33;
      }
      while (1)
      {
        i = *(_QWORD *)(i + 8);
        if (i == v2)
          break;
        v10 = i - 24;
        if (!i)
          v10 = 0;
        v5 = *(_QWORD *)(v10 + 48);
        if (v5 != v10 + 40)
          goto LABEL_32;
      }
LABEL_33:
      v11 = (llvm::GCRelocateInst **)v23;
      if ((_DWORD)v24)
      {
        v12 = 8 * v24;
        do
        {
          v13 = *v11;
          DerivedPtr = (llvm::Value *)llvm::GCRelocateInst::getDerivedPtr(*v11);
          if (*(_QWORD *)v13 != *(_QWORD *)DerivedPtr)
          {
            v15 = operator new(0x60uLL);
            v16 = (llvm::Value *)(v15 + 8);
            v15[13] = v15[13] & 0x38000000 | 1;
            *(_QWORD *)v15 = 0;
            *((_QWORD *)v15 + 1) = 0;
            *((_QWORD *)v15 + 2) = 0;
            *((_QWORD *)v15 + 3) = v15 + 8;
            v17 = *(_QWORD *)v13;
            v21 = "cast";
            v22 = 259;
            llvm::BitCastInst::BitCastInst((uint64_t)(v15 + 8), (uint64_t)DerivedPtr, v17, (uint64_t)&v21, (uint64_t)v13);
            DerivedPtr = v16;
          }
          llvm::Value::doRAUW(v13, DerivedPtr, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v13 + 5) + 40, (uint64_t ***)v13);
          v18 = *((_QWORD *)v13 + 3);
          v19 = (_QWORD *)*((_QWORD *)v13 + 4);
          *v19 = v18;
          *(_QWORD *)(v18 + 8) = v19;
          *((_QWORD *)v13 + 3) = 0;
          *((_QWORD *)v13 + 4) = 0;
          llvm::Value::deleteValue(v13);
          ++v11;
          v12 -= 8;
        }
        while (v12);
        v11 = (llvm::GCRelocateInst **)v23;
        v1 = (_DWORD)v24 != 0;
      }
      else
      {
        v1 = 0;
      }
      if (v11 != v25)
        free(v11);
      return v1;
    }
  }
  return 0;
}

void llvm::initializeStripGCRelocatesLegacyPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED837810);
  if (v2 != -1)
  {
    v5[0] = sub_1C5F7FB98;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED837810, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5F7FB98(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Strip gc.relocates inserted through RewriteStatepointsForGC";
  *(_QWORD *)(v2 + 8) = 59;
  *(_QWORD *)(v2 + 16) = "strip-gc-relocates";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5891;
  *(_WORD *)(v2 + 40) = 1;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5F7FC2C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5F7FC2C()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8F5891;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E81AA1C8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED837810);
  if (v2 != -1)
  {
    v6[0] = sub_1C5F7FB98;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED837810, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C5F7FD10(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5F7FD38(uint64_t a1, uint64_t a2)
{
  return sub_1C5F7F888(a2);
}

double llvm::SSAUpdater::SSAUpdater(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  return result;
}

void llvm::SSAUpdater::~SSAUpdater(void **this)
{
  _QWORD *v2;

  v2 = *this;
  if (*this)
  {
    MEMORY[0x1CAA32FB4](*v2, 8);
    MEMORY[0x1CAA32FC0](v2, 0x1020C405AF6BDC9);
  }
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

double llvm::SSAUpdater::Initialize(uint64_t a1, uint64_t a2, const void *a3, size_t a4)
{
  _DWORD *v8;
  uint64_t v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  double result;
  __int128 __dst;
  unint64_t v16;

  v8 = *(_DWORD **)a1;
  if (v8)
  {
    sub_1C583143C(v8);
  }
  else
  {
    v9 = operator new();
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 16) = 0;
    *(_QWORD *)a1 = v9;
  }
  *(_QWORD *)(a1 + 8) = a2;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a4 >= 0x17)
  {
    v11 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v11 = a4 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v16 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v16) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_11:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  v13 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*v13);
  result = *(double *)&__dst;
  *(_OWORD *)v13 = __dst;
  *(_QWORD *)(a1 + 32) = v16;
  return result;
}

BOOL llvm::SSAUpdater::HasValueForBlock(uint64_t **this, llvm::BasicBlock *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  llvm::BasicBlock *v6;
  int v7;
  _BOOL8 result;
  unsigned int v9;

  v2 = *((_DWORD *)*this + 4);
  if (!v2)
    return 0;
  v3 = **this;
  v4 = v2 - 1;
  v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
  v6 = *(llvm::BasicBlock **)(v3 + 16 * v5);
  if (v6 == a2)
    return 1;
  v7 = 1;
  do
  {
    result = v6 != (llvm::BasicBlock *)-4096;
    if (v6 == (llvm::BasicBlock *)-4096)
      break;
    v9 = v5 + v7++;
    v5 = v9 & v4;
    v6 = *(llvm::BasicBlock **)(v3 + 16 * v5);
  }
  while (v6 != a2);
  return result;
}

_QWORD *llvm::SSAUpdater::AddAvailableValue(llvm::SSAUpdater *this, llvm::BasicBlock *a2, llvm::Value *a3)
{
  _QWORD *result;
  int v5;
  int v6;
  unsigned int v7;
  llvm::BasicBlock **v8;
  llvm::BasicBlock *v9;
  llvm::BasicBlock **v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  llvm::BasicBlock **v14;
  llvm::BasicBlock *v15;

  v15 = a2;
  result = *(_QWORD **)this;
  v5 = *((_DWORD *)result + 4);
  if (!v5)
  {
    v14 = 0;
LABEL_15:
    result = sub_1C4ECCA58((uint64_t)result, (uint64_t)&v15, (uint64_t *)&v15, v14);
    v8 = (llvm::BasicBlock **)result;
    *result = v15;
    result[1] = 0;
    goto LABEL_16;
  }
  v6 = v5 - 1;
  v7 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = (llvm::BasicBlock **)(*result + 16 * v7);
  v9 = *v8;
  if (*v8 != a2)
  {
    v10 = 0;
    v11 = 1;
    while (v9 != (llvm::BasicBlock *)-4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == (llvm::BasicBlock *)-8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (llvm::BasicBlock **)(*result + 16 * (v13 & v6));
      v9 = *v8;
      if (*v8 == a2)
        goto LABEL_16;
    }
    if (v10)
      v14 = v10;
    else
      v14 = v8;
    goto LABEL_15;
  }
LABEL_16:
  v8[1] = a3;
  return result;
}

llvm::UndefValue *llvm::SSAUpdater::GetValueAtEndOfBlockInternal(llvm::SSAUpdater *this, llvm::BasicBlock *a2)
{
  _QWORD *v3;
  int v4;
  int v5;
  unsigned int v6;
  llvm::BasicBlock **v7;
  llvm::BasicBlock *v8;
  llvm::BasicBlock **v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  llvm::BasicBlock **v13;
  llvm::UndefValue *v14;
  uint64_t v16;
  llvm::BasicBlock *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  unsigned int j;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  llvm::Type *v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int k;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  int v94;
  BOOL v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  llvm::UndefValue *v111;
  int v112;
  int v113;
  unsigned int v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  int v118;
  BOOL v119;
  unsigned int v120;
  _QWORD *v121;
  llvm::BasicBlock *v122;
  unsigned int v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  int v127;
  BOOL v128;
  unsigned int v129;
  uint64_t *v130;
  int v131;
  uint64_t **v132;
  uint64_t **v133;
  uint64_t **v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t m;
  _BOOL4 v143;
  char v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t *v151;
  void *v152;
  uint64_t *v153;
  int v154;
  BOOL v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  unsigned int v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t *v168;
  int v169;
  BOOL v170;
  unsigned int v171;
  uint64_t *v172;
  _QWORD *v173;
  uint64_t v174;
  int v175;
  int v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t *v184;
  char *v185;
  uint64_t v186;
  void *v187;
  int v188;
  int v189;
  unsigned int v190;
  _QWORD *v191;
  void *v192;
  _QWORD *v193;
  int v194;
  BOOL v195;
  unsigned int v196;
  _QWORD *v197;
  unsigned int v198;
  uint64_t *v199;
  void *v200;
  uint64_t *v201;
  int v202;
  BOOL v203;
  unsigned int v204;
  uint64_t *v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  uint64_t *v209;
  _QWORD *v210;
  _QWORD *v211;
  llvm::Value *v212;
  char *v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  int v217;
  int v218;
  unsigned int v219;
  _QWORD *v220;
  uint64_t v221;
  _QWORD *v222;
  int v223;
  BOOL v224;
  unsigned int v225;
  _QWORD *v226;
  char *v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  int v234;
  unsigned int v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  int v239;
  BOOL v240;
  unsigned int v241;
  _QWORD *v242;
  uint64_t v243;
  unsigned int v244;
  uint64_t *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  llvm::ValueSymbolTable *v251;
  _QWORD *v252;
  void *v253;
  llvm::BasicBlock *v254;
  llvm::BasicBlock *v255;
  uint64_t v256;
  llvm::BasicBlock *v257;
  llvm::SSAUpdater *v258;
  _QWORD *v259;
  uint64_t v260;
  _QWORD v261[2];
  int v262;
  _QWORD v263[4];
  _QWORD v264[6];
  _QWORD v265[2];
  void *v266;
  uint64_t v267;
  _BYTE v268[800];
  void *v269;
  uint64_t v270;
  _BYTE v271[80];
  void *v272;
  uint64_t v273;
  _QWORD v274[2];
  __int16 v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD v278[12];

  v278[10] = *MEMORY[0x1E0C80C00];
  v254 = a2;
  v3 = *(_QWORD **)this;
  v4 = *(_DWORD *)(*(_QWORD *)this + 16);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
    v7 = (llvm::BasicBlock **)(*v3 + 16 * v6);
    v8 = *v7;
    if (*v7 == a2)
      goto LABEL_16;
    v9 = 0;
    v10 = 1;
    while (v8 != (llvm::BasicBlock *)-4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == (llvm::BasicBlock *)-8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (llvm::BasicBlock **)(*v3 + 16 * v6);
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_16;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v7;
  }
  else
  {
    v13 = 0;
  }
  v7 = (llvm::BasicBlock **)sub_1C4ECCA58((uint64_t)v3, (uint64_t)&v254, (uint64_t *)&v254, v13);
  *v7 = v254;
  v7[1] = 0;
LABEL_16:
  v14 = v7[1];
  if (v14)
    return v14;
  v16 = *((_QWORD *)this + 5);
  v258 = this;
  v259 = v3;
  v261[0] = 0;
  v261[1] = 0;
  v260 = v16;
  v262 = 0;
  v263[0] = 0;
  v263[1] = 0;
  v263[2] = v264;
  v263[3] = 0x400000000;
  v264[4] = v265;
  v264[5] = 0;
  v265[0] = 0;
  v265[1] = 1;
  v17 = v254;
  v255 = v254;
  v266 = v268;
  v267 = 0x6400000000;
  v257 = v254;
  v18 = v278;
  v276 = v278;
  v277 = 0xA00000000;
  v19 = (uint64_t)v274;
  v272 = v274;
  v273 = 0x4000000000;
  v20 = sub_1C484358C((uint64_t)v263, 64, 3);
  *(_QWORD *)(v20 + 32) = 0;
  *(_DWORD *)(v20 + 40) = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)v20 = v17;
  *(_DWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 48) = 0;
  *(_QWORD *)(v20 + 56) = 0;
  if (!v262)
  {
    v28 = 0;
LABEL_32:
    v22 = sub_1C514C9E4((uint64_t)v261, (uint64_t *)&v257, v28);
    *v22 = (uint64_t)v17;
    v22[1] = 0;
    goto LABEL_33;
  }
  v21 = (v262 - 1) & ((v17 >> 4) ^ (v17 >> 9));
  v22 = (uint64_t *)(v261[0] + 16 * v21);
  v23 = *v22;
  if ((llvm::BasicBlock *)*v22 != v17)
  {
    v24 = 0;
    v25 = 1;
    while (v23 != -4096)
    {
      if (v24)
        v26 = 0;
      else
        v26 = v23 == -8192;
      if (v26)
        v24 = v22;
      v27 = v21 + v25++;
      v21 = v27 & (v262 - 1);
      v22 = (uint64_t *)(v261[0] + 16 * v21);
      v23 = *v22;
      if ((llvm::BasicBlock *)*v22 == v17)
        goto LABEL_33;
    }
    if (v24)
      v28 = v24;
    else
      v28 = v22;
    goto LABEL_32;
  }
LABEL_33:
  v22[1] = v20;
  v29 = v273;
  if (v273 >= HIDWORD(v273))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v272, (uint64_t)v274, v273 + 1, 8);
    v29 = v273;
  }
  *((_QWORD *)v272 + v29) = v20;
  v269 = v271;
  v270 = 0xA00000000;
  v42 = __CFADD__((_DWORD)v273, 1);
  v30 = v273 + 1;
  LODWORD(v273) = v273 + 1;
  if (!v42)
  {
    v31 = -8192;
    while (1)
    {
      v32 = *((_QWORD *)v272 + v30 - 1);
      LODWORD(v273) = v30 - 1;
      LODWORD(v270) = 0;
      v33 = *(_QWORD *)(*(_QWORD *)v32 + 48);
      v34 = v33 - 24;
      if (!v33)
        v34 = 0;
      v35 = *(unsigned __int8 *)(v34 + 16);
      if (v35 != 83)
        v34 = 0;
      if (v33 && v35 == 83)
        break;
      for (i = *(_QWORD *)(*(_QWORD *)v32 + 8); i; i = *(_QWORD *)(i + 8))
      {
        v40 = *(_QWORD *)(i + 24);
        v41 = *(unsigned __int8 *)(v40 + 16);
        if (v40)
          v42 = v41 >= 0x1C;
        else
          v42 = 0;
        if (v42 && v41 - 29 < 0xB)
          break;
      }
      sub_1C5F29620((unsigned int *)&v269, (uint64_t)v269, i, 0);
      v44 = v270;
LABEL_62:
      *(_DWORD *)(v32 + 40) = v44;
      if (v44)
      {
        v48 = sub_1C484358C((uint64_t)v263, 8 * v44, 3);
        v49 = *(_DWORD *)(v32 + 40);
        *(_QWORD *)(v32 + 48) = v48;
        if (v49)
        {
          for (j = 0; j != *(_DWORD *)(v32 + 40); ++j)
          {
            v51 = *((_QWORD *)v269 + j);
            v256 = v51;
            v52 = v51 >> 4;
            if (v262)
            {
              v53 = (v52 ^ (v51 >> 9)) & (v262 - 1);
              v54 = (uint64_t *)(v261[0] + 16 * v53);
              v55 = *v54;
              if (v51 == *v54)
                goto LABEL_80;
              v56 = 0;
              v57 = 1;
              while (v55 != -4096)
              {
                if (v56)
                  v58 = 0;
                else
                  v58 = v55 == v31;
                if (v58)
                  v56 = v54;
                v59 = v53 + v57++;
                v53 = v59 & (v262 - 1);
                v54 = (uint64_t *)(v261[0] + 16 * v53);
                v55 = *v54;
                if (v51 == *v54)
                  goto LABEL_80;
              }
              if (v56)
                v60 = v56;
              else
                v60 = v54;
            }
            else
            {
              v60 = 0;
            }
            v54 = sub_1C514C9E4((uint64_t)v261, &v256, v60);
            *v54 = v51;
            v54[1] = 0;
LABEL_80:
            v61 = v54[1];
            if (!v61)
            {
              v62 = *((_DWORD *)v259 + 4);
              if (!v62)
                goto LABEL_85;
              v63 = *v259;
              v64 = v62 - 1;
              v65 = (v62 - 1) & (v52 ^ (v51 >> 9));
              v66 = *(_QWORD *)(*v259 + 16 * v65);
              if (v51 == v66)
              {
LABEL_99:
                v68 = *(_QWORD *)(v63 + 16 * v65 + 8);
              }
              else
              {
                v67 = 1;
                while (v66 != -4096)
                {
                  v74 = v65 + v67++;
                  v65 = v74 & v64;
                  v66 = *(_QWORD *)(v63 + 16 * v65);
                  if (v51 == v66)
                    goto LABEL_99;
                }
LABEL_85:
                v68 = 0;
              }
              v69 = sub_1C484358C((uint64_t)v263, 64, 3);
              v70 = v69;
              *(_QWORD *)v69 = v51;
              *(_QWORD *)(v69 + 8) = v68;
              if (v68)
                v71 = v69;
              else
                v71 = 0;
              *(_QWORD *)(v69 + 16) = v71;
              *(_DWORD *)(v69 + 24) = 0;
              *(_QWORD *)(v69 + 32) = 0;
              *(_DWORD *)(v69 + 40) = 0;
              *(_QWORD *)(v69 + 48) = 0;
              *(_QWORD *)(v69 + 56) = 0;
              v54[1] = v69;
              *(_QWORD *)(*(_QWORD *)(v32 + 48) + 8 * j) = v69;
              if (*(_QWORD *)(v69 + 8))
              {
                v73 = v277;
                if (v277 >= (unint64_t)HIDWORD(v277))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v276, (uint64_t)v18, v277 + 1, 8);
                  v73 = v277;
                }
                v276[v73] = v70;
                LODWORD(v277) = v277 + 1;
              }
              else
              {
                v72 = v273;
                if (v273 >= (unint64_t)HIDWORD(v273))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v272, v19, v273 + 1, 8);
                  v72 = v273;
                }
                *((_QWORD *)v272 + v72) = v70;
                LODWORD(v273) = v273 + 1;
              }
              continue;
            }
            *(_QWORD *)(*(_QWORD *)(v32 + 48) + 8 * j) = v61;
          }
        }
      }
      else
      {
LABEL_422:
        *(_QWORD *)(v32 + 48) = 0;
      }
      v30 = v273;
      if (!(_DWORD)v273)
        goto LABEL_106;
    }
    v36 = *(_DWORD *)(v34 + 20);
    if ((v36 & 0x40000000) != 0)
    {
      v38 = *(_QWORD *)(v34 - 8);
      v37 = v36 & 0x7FFFFFF;
    }
    else
    {
      v37 = v36 & 0x7FFFFFF;
      v38 = v34 - 32 * v37;
    }
    v45 = *(unsigned int *)(v34 + 60);
    if (v37 > HIDWORD(v270))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v269, (uint64_t)v271, v37, 8);
      v46 = v270;
    }
    else
    {
      if (!v37)
      {
        v47 = 0;
        goto LABEL_61;
      }
      v46 = 0;
    }
    memcpy((char *)v269 + 8 * v46, (const void *)(v38 + 32 * v45), 8 * v37);
    v47 = v270;
LABEL_61:
    v44 = v47 + v37;
    LODWORD(v270) = v44;
    goto LABEL_62;
  }
LABEL_106:
  v76 = sub_1C484358C((uint64_t)v263, 64, 3);
  *(_QWORD *)(v76 + 32) = 0;
  *(_DWORD *)(v76 + 40) = 0;
  *(_QWORD *)(v76 + 8) = 0;
  *(_QWORD *)(v76 + 16) = 0;
  *(_QWORD *)v76 = 0;
  *(_DWORD *)(v76 + 24) = 0;
  *(_QWORD *)(v76 + 48) = 0;
  *(_QWORD *)(v76 + 56) = 0;
  v77 = v277;
  for (k = v273; (_DWORD)v277; v77 = v277)
  {
    v79 = v276[v77 - 1];
    LODWORD(v277) = v77 - 1;
    *(_QWORD *)(v79 + 32) = v76;
    *(_DWORD *)(v79 + 24) = -1;
    if (k >= HIDWORD(v273))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v272, v19, k + 1, 8);
      k = v273;
    }
    *((_QWORD *)v272 + k) = v79;
    k = v273 + 1;
    LODWORD(v273) = v273 + 1;
  }
  v252 = v18;
  v253 = (void *)v19;
  if (k)
  {
    v19 = 4294967294;
    v32 = 0xFFFFFFFFLL;
    v31 = 1;
    while (1)
    {
      while (1)
      {
        v80 = *((_QWORD *)v272 + k - 1);
        if (*(_DWORD *)(v80 + 24) != -2)
          break;
        *(_DWORD *)(v80 + 24) = v31;
        if (!*(_QWORD *)(v80 + 8))
        {
          v81 = v267;
          if (v267 >= (unint64_t)HIDWORD(v267))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v266, (uint64_t)v268, v267 + 1, 8);
            v81 = v267;
          }
          *((_QWORD *)v266 + v81) = v80;
          LODWORD(v267) = v267 + 1;
          k = v273;
        }
        v31 = (v31 + 1);
        LODWORD(v273) = --k;
        if (!k)
          goto LABEL_161;
      }
      *(_DWORD *)(v80 + 24) = -2;
      v82 = *(_QWORD *)(*(_QWORD *)v80 + 40);
      if (v82 == *(_QWORD *)v80 + 40)
        goto LABEL_151;
      v18 = v82 ? (_QWORD *)(v82 - 24) : 0;
      v83 = *((unsigned __int8 *)v18 + 16);
      v84 = v83 - 29;
      if (v83 == 30)
        break;
      v85 = 2;
      switch(v84)
      {
        case 1:
          __break(1u);
          goto LABEL_422;
        case 2:
          v85 = (*((_DWORD *)v18 + 5) >> 1) & 0x3FFFFFF;
          break;
        case 3:
        case 9:
          v85 = (*((_DWORD *)v18 + 5) & 0x7FFFFFF) - 1;
          break;
        case 4:
          goto LABEL_127;
        case 7:
          v85 = *((_WORD *)v18 + 9) & 1;
          break;
        case 8:
          v85 = 1;
          goto LABEL_127;
        case 10:
          v85 = *((_DWORD *)v18 + 20) + 1;
          break;
        default:
          goto LABEL_151;
      }
      if (v85)
        goto LABEL_127;
LABEL_151:
      if (!k)
        goto LABEL_161;
    }
    if ((*((_DWORD *)v18 + 5) & 0x7FFFFFF) == 3)
      v85 = 2;
    else
      v85 = 1;
LABEL_127:
    v86 = 0;
    v87 = v85;
    while (1)
    {
      v88 = *((unsigned __int8 *)v18 + 16);
      if (v88 != 30)
        __asm { BR              X9 }
      v89 = v18[-4 * v86 - 4];
      v256 = v89;
      if (v262)
      {
        v90 = ((v89 >> 4) ^ (v89 >> 9)) & (v262 - 1);
        v91 = (uint64_t *)(v261[0] + 16 * v90);
        v92 = *v91;
        if (v89 == *v91)
          goto LABEL_144;
        v93 = 0;
        v94 = 1;
        while (v92 != -4096)
        {
          if (v93)
            v95 = 0;
          else
            v95 = v92 == -8192;
          if (v95)
            v93 = v91;
          v96 = v90 + v94++;
          v90 = v96 & (v262 - 1);
          v91 = (uint64_t *)(v261[0] + 16 * v90);
          v92 = *v91;
          if (v89 == *v91)
            goto LABEL_144;
        }
        if (v93)
          v97 = v93;
        else
          v97 = v91;
      }
      else
      {
        v97 = 0;
      }
      v91 = sub_1C514C9E4((uint64_t)v261, &v256, v97);
      *v91 = v89;
      v91[1] = 0;
LABEL_144:
      v98 = v91[1];
      if (v98 && !*(_DWORD *)(v98 + 24))
      {
        *(_DWORD *)(v98 + 24) = -1;
        v99 = v273;
        if (v273 >= (unint64_t)HIDWORD(v273))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v272, (uint64_t)v253, v273 + 1, 8);
          v99 = v273;
        }
        *((_QWORD *)v272 + v99) = v98;
        LODWORD(v273) = v273 + 1;
      }
      if (++v86 == v87)
      {
        k = v273;
        goto LABEL_151;
      }
    }
  }
  LODWORD(v31) = 1;
LABEL_161:
  *(_DWORD *)(v76 + 24) = v31;
  if (v269 != v271)
    free(v269);
  if (v272 != v253)
    free(v272);
  if (v276 != v252)
    free(v276);
  v100 = v267;
  if (!(_DWORD)v267)
  {
    v14 = llvm::UndefValue::get(*((llvm::UndefValue **)v258 + 1), v75);
    sub_1C5F82A8C((uint64_t)v259, (uint64_t *)&v255)[1] = v14;
    goto LABEL_227;
  }
  while (2)
  {
    v101 = 0;
    v102 = (char *)v266;
    v103 = (char *)v266 + 8 * v100;
    do
    {
LABEL_169:
      v105 = *((_QWORD *)v103 - 1);
      v103 -= 8;
      v104 = v105;
      if (!*(_DWORD *)(v105 + 40))
        continue;
      v106 = 0;
      v107 = 0;
      do
      {
        v108 = *(_QWORD *)(*(_QWORD *)(v104 + 48) + 8 * v106);
        if (*(_DWORD *)(v108 + 24))
        {
          if (!v107)
            goto LABEL_199;
          goto LABEL_173;
        }
        v111 = llvm::UndefValue::get(*((llvm::UndefValue **)v258 + 1), v75);
        *(_QWORD *)(v108 + 8) = v111;
        v112 = *((_DWORD *)v259 + 4);
        if (v112)
        {
          v113 = v112 - 1;
          v114 = ((*(_QWORD *)v108 >> 4) ^ (*(_QWORD *)v108 >> 9)) & (v112 - 1);
          v115 = (_QWORD *)(*v259 + 16 * v114);
          v116 = *v115;
          if (*(_QWORD *)v108 == *v115)
            goto LABEL_198;
          v117 = 0;
          v118 = 1;
          while (v116 != -4096)
          {
            if (v117)
              v119 = 0;
            else
              v119 = v116 == -8192;
            if (v119)
              v117 = v115;
            v120 = v114 + v118++;
            v114 = v120 & v113;
            v115 = (_QWORD *)(*v259 + 16 * (v120 & v113));
            v116 = *v115;
            if (*(_QWORD *)v108 == *v115)
              goto LABEL_198;
          }
          if (v117)
            v121 = v117;
          else
            v121 = v115;
        }
        else
        {
          v121 = 0;
        }
        v115 = sub_1C4ECCA58((uint64_t)v259, v108, (uint64_t *)v108, v121);
        *v115 = *(_QWORD *)v108;
        v115[1] = 0;
LABEL_198:
        v115[1] = v111;
        *(_QWORD *)(v108 + 16) = v108;
        *(_DWORD *)(v108 + 24) = (*(_DWORD *)(v76 + 24))++;
        if (!v107)
        {
LABEL_199:
          v107 = v108;
          goto LABEL_200;
        }
LABEL_173:
        if (v107 != v108)
        {
          v109 = *(_DWORD *)(v108 + 24);
          do
          {
            while (1)
            {
              v110 = *(_DWORD *)(v107 + 24);
              if (v110 >= v109)
                break;
              v107 = *(_QWORD *)(v107 + 32);
              if (!v107)
                goto LABEL_199;
            }
            while (1)
            {
              v109 = *(_DWORD *)(v108 + 24);
              if (v109 >= v110)
                break;
              v108 = *(_QWORD *)(v108 + 32);
              if (!v108)
                goto LABEL_200;
            }
          }
          while (v107 != v108);
        }
LABEL_200:
        ++v106;
      }
      while (v106 != *(_DWORD *)(v104 + 40));
      if (v107 && v107 != *(_QWORD *)(v104 + 32))
      {
        *(_QWORD *)(v104 + 32) = v107;
        v101 = 1;
        if (v103 == v102)
        {
          v100 = v267;
          goto LABEL_210;
        }
        goto LABEL_169;
      }
    }
    while (v103 != v102);
    v100 = v267;
    if ((v101 & 1) != 0)
    {
LABEL_210:
      if (!v100)
        goto LABEL_211;
      continue;
    }
    break;
  }
  if (!(_DWORD)v267)
    goto LABEL_211;
  v131 = 0;
  v132 = (uint64_t **)v266;
  v133 = (uint64_t **)((char *)v266 + 8 * v267);
  v134 = v133;
  do
  {
    while (1)
    {
      v136 = (uint64_t)*--v134;
      v135 = v136;
      v137 = *(_QWORD *)(v136 + 16);
      if (v137 == v136)
        break;
      v138 = *(_QWORD *)(v135 + 32);
      v139 = *(_QWORD *)(v138 + 16);
      v140 = *(unsigned int *)(v135 + 40);
      if ((_DWORD)v140)
      {
        v141 = 0;
        while (2)
        {
          for (m = *(_QWORD *)(*(_QWORD *)(v135 + 48) + 8 * v141); m != v138; m = *(_QWORD *)(m + 32))
          {
            if (*(_QWORD *)(m + 16) == m)
            {
              v139 = v135;
              goto LABEL_242;
            }
          }
          if (++v141 != v140)
            continue;
          break;
        }
      }
LABEL_242:
      if (v139 == v137)
        break;
      *(_QWORD *)(v135 + 16) = v139;
      v131 = v134 != v132;
      if (v134 == v132)
        v134 = v133;
    }
    v143 = v134 != v132;
    v144 = v143 | v131;
    v131 &= v143;
    if (v134 == v132)
      v134 = v133;
  }
  while ((v144 & 1) != 0);
  while (2)
  {
    v145 = *v132;
    if ((uint64_t *)(*v132)[2] == *v132)
    {
      if (*(_QWORD *)(*v145 + 40) != *v145 + 40)
      {
        v146 = *(_QWORD *)(*v145 + 48);
        v147 = v146 - 24;
        v148 = v146 ? v146 - 24 : 0;
        if (v146 && *(_BYTE *)(v148 + 16) == 83)
        {
          while (1)
          {
            v272 = v274;
            v274[0] = v147;
            v273 = 0x1400000001;
            v149 = *(_QWORD **)(v147 + 40);
            v276 = v149;
            if (v262)
            {
              v150 = ((v149 >> 4) ^ (v149 >> 9)) & (v262 - 1);
              v151 = (uint64_t *)(v261[0] + 16 * v150);
              v152 = (void *)*v151;
              if (v149 == (_QWORD *)*v151)
              {
LABEL_267:
                *(_QWORD *)(*(_QWORD *)(v261[0] + 16 * v150 + 8) + 56) = v147;
                v157 = 1;
                goto LABEL_268;
              }
              v153 = 0;
              v154 = 1;
              while (v152 != (void *)-4096)
              {
                if (v153)
                  v155 = 0;
                else
                  v155 = v152 == (void *)-8192;
                if (v155)
                  v153 = v151;
                v156 = v150 + v154++;
                v150 = v156 & (v262 - 1);
                v151 = (uint64_t *)(v261[0] + 16 * v150);
                v152 = (void *)*v151;
                if (v149 == (_QWORD *)*v151)
                  goto LABEL_267;
              }
              if (v153)
                v183 = v153;
              else
                v183 = v151;
            }
            else
            {
              v183 = 0;
            }
            v184 = sub_1C514C9E4((uint64_t)v261, (uint64_t *)&v276, v183);
            *v184 = (uint64_t)v149;
            v184[1] = 0;
            v157 = v273;
            MEMORY[0x38] = v147;
            if ((_DWORD)v273)
            {
LABEL_268:
              while (1)
              {
                v158 = *((_QWORD *)v272 + --v157);
                LODWORD(v273) = v157;
                v159 = *(_DWORD *)(v158 + 20) & 0x7FFFFFF;
                if (v159)
                  break;
LABEL_300:
                if (!v157)
                  goto LABEL_319;
              }
              v160 = 0;
              while (2)
              {
                v161 = *(_DWORD *)(v158 + 20);
                if ((v161 & 0x40000000) != 0)
                  v162 = *(_QWORD *)(v158 - 8);
                else
                  v162 = v158 - 32 * (v161 & 0x7FFFFFF);
                v163 = *(_QWORD *)(v162 + 32 * v160);
                v164 = *(_QWORD **)(v162 + 32 * *(unsigned int *)(v158 + 60) + 8 * v160);
                v276 = v164;
                if (v262)
                {
                  v165 = ((v164 >> 4) ^ (v164 >> 9)) & (v262 - 1);
                  v166 = (uint64_t *)(v261[0] + 16 * v165);
                  v167 = *v166;
                  if (v164 != (_QWORD *)*v166)
                  {
                    v168 = 0;
                    v169 = 1;
                    while (v167 != -4096)
                    {
                      if (v168)
                        v170 = 0;
                      else
                        v170 = v167 == -8192;
                      if (v170)
                        v168 = v166;
                      v171 = v165 + v169++;
                      v165 = v171 & (v262 - 1);
                      v166 = (uint64_t *)(v261[0] + 16 * v165);
                      v167 = *v166;
                      if (v164 == (_QWORD *)*v166)
                        goto LABEL_288;
                    }
                    if (v168)
                      v172 = v168;
                    else
                      v172 = v166;
LABEL_287:
                    v166 = sub_1C514C9E4((uint64_t)v261, (uint64_t *)&v276, v172);
                    *v166 = (uint64_t)v164;
                    v166[1] = 0;
                  }
LABEL_288:
                  v173 = *(_QWORD **)(v166[1] + 16);
                  v174 = v173[1];
                  if (v174)
                    goto LABEL_289;
                  v176 = 0;
                  if (*(_BYTE *)(v163 + 16) != 83 || !v163)
                    goto LABEL_303;
                  if (*(_QWORD *)(v163 + 40) != *v173)
                  {
LABEL_302:
                    v176 = 0;
                    goto LABEL_303;
                  }
                  v174 = v173[7];
                  if (v174)
                  {
LABEL_289:
                    if (v163 != v174)
                      goto LABEL_302;
                  }
                  else
                  {
                    v173[7] = v163;
                    v177 = v273;
                    if (v273 >= (unint64_t)HIDWORD(v273))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v272, (uint64_t)v274, v273 + 1, 8);
                      v177 = v273;
                    }
                    *((_QWORD *)v272 + v177) = v163;
                    LODWORD(v273) = v273 + 1;
                  }
                  v175 = v160 + 1;
                  v160 = (v160 + 1);
                  if (v159 == v175)
                  {
                    v157 = v273;
                    goto LABEL_300;
                  }
                  continue;
                }
                break;
              }
              v172 = 0;
              goto LABEL_287;
            }
LABEL_319:
            v176 = 1;
LABEL_303:
            if (v272 != v274)
              free(v272);
            v178 = (char *)v266;
            if (v176)
              break;
            if ((_DWORD)v267)
            {
              v179 = 8 * v267;
              do
              {
                v180 = *(_QWORD *)v178;
                v178 += 8;
                *(_QWORD *)(v180 + 56) = 0;
                v179 -= 8;
              }
              while (v179);
            }
            v181 = *(_QWORD *)(v147 + 32);
            v147 = v181 - 24;
            if (v181)
              v182 = v181 - 24;
            else
              v182 = 0;
            if (!v181 || *(_BYTE *)(v182 + 16) != 83)
              goto LABEL_358;
          }
          if ((_DWORD)v267)
          {
            v185 = (char *)v266 + 8 * v267;
            while (1)
            {
              v186 = *(_QWORD *)(*(_QWORD *)v178 + 56);
              if (v186)
                break;
LABEL_324:
              v178 += 8;
              if (v178 == v185)
                goto LABEL_358;
            }
            v187 = *(void **)(v186 + 40);
            v272 = v187;
            v188 = *((_DWORD *)v259 + 4);
            if (v188)
            {
              v189 = v188 - 1;
              v190 = (v188 - 1) & ((v187 >> 4) ^ (v187 >> 9));
              v191 = (_QWORD *)(*v259 + 16 * v190);
              v192 = (void *)*v191;
              if (v187 == (void *)*v191)
                goto LABEL_341;
              v193 = 0;
              v194 = 1;
              while (v192 != (void *)-4096)
              {
                if (v193)
                  v195 = 0;
                else
                  v195 = v192 == (void *)-8192;
                if (v195)
                  v193 = v191;
                v196 = v190 + v194++;
                v190 = v196 & v189;
                v191 = (_QWORD *)(*v259 + 16 * (v196 & v189));
                v192 = (void *)*v191;
                if (v187 == (void *)*v191)
                  goto LABEL_341;
              }
              if (v193)
                v197 = v193;
              else
                v197 = v191;
            }
            else
            {
              v197 = 0;
            }
            v191 = sub_1C4ECCA58((uint64_t)v259, (uint64_t)&v272, (uint64_t *)&v272, v197);
            *v191 = v272;
            v191[1] = 0;
LABEL_341:
            v191[1] = v186;
            if (v262)
            {
              v198 = ((v272 >> 4) ^ (v272 >> 9)) & (v262 - 1);
              v199 = (uint64_t *)(v261[0] + 16 * v198);
              v200 = (void *)*v199;
              if (v272 == (void *)*v199)
              {
LABEL_356:
                *(_QWORD *)(v199[1] + 8) = v186;
                goto LABEL_324;
              }
              v201 = 0;
              v202 = 1;
              while (v200 != (void *)-4096)
              {
                if (v201)
                  v203 = 0;
                else
                  v203 = v200 == (void *)-8192;
                if (v203)
                  v201 = v199;
                v204 = v198 + v202++;
                v198 = v204 & (v262 - 1);
                v199 = (uint64_t *)(v261[0] + 16 * v198);
                v200 = (void *)*v199;
                if (v272 == (void *)*v199)
                  goto LABEL_356;
              }
              if (v201)
                v205 = v201;
              else
                v205 = v199;
            }
            else
            {
              v205 = 0;
            }
            v199 = sub_1C514C9E4((uint64_t)v261, (uint64_t *)&v272, v205);
            *v199 = (uint64_t)v272;
            v199[1] = 0;
            goto LABEL_356;
          }
        }
      }
LABEL_358:
      if (v145[1])
        goto LABEL_249;
      v206 = *v145;
      v207 = *((_DWORD *)v145 + 10);
      v208 = *((_QWORD *)v258 + 1);
      v275 = 260;
      v272 = (char *)v258 + 16;
      v209 = *(uint64_t **)(v206 + 48);
      v210 = operator new(0x48uLL);
      v211 = v210;
      v210[1] = v208;
      v212 = (llvm::Value *)(v210 + 1);
      *v210 = 0;
      v210[2] = 0;
      v210[3] = 0x4000000000000053;
      *((_OWORD *)v210 + 2) = 0u;
      v213 = (char *)(v210 + 4);
      *((_OWORD *)v210 + 3) = 0u;
      *((_DWORD *)v210 + 16) = 0;
      if (v209)
      {
        v248 = v209[2];
        v210[6] = v248;
        *(_WORD *)(v248 + 18) &= ~0x8000u;
        if ((*((_BYTE *)v210 + 31) & 0x10) != 0)
        {
          v250 = *(_QWORD *)(v248 + 56);
          if (v250)
          {
            v251 = *(llvm::ValueSymbolTable **)(v250 + 104);
            if (v251)
              llvm::ValueSymbolTable::reinsertValue(v251, v212);
          }
        }
        v249 = *v209;
        v211[4] = *v209;
        v211[5] = v209;
        *(_QWORD *)(v249 + 8) = v213;
        *v209 = (uint64_t)v213;
      }
      *((_DWORD *)v211 + 17) = v207;
      llvm::Value::setName((uint64_t ***)v212, (uint64_t)&v272);
      v214 = *((unsigned int *)v211 + 17);
      v215 = operator new(40 * v214);
      *v211 = v215;
      if ((_DWORD)v214)
      {
        v216 = &v215[4 * v214];
        do
        {
          *v215 = 0;
          v215[1] = 0;
          v215[2] = 0;
          v215[3] = v212;
          v215 += 4;
        }
        while (v215 != v216);
      }
      v145[1] = (uint64_t)v212;
      v217 = *((_DWORD *)v259 + 4);
      if (v217)
      {
        v218 = v217 - 1;
        v219 = ((*v145 >> 4) ^ (*v145 >> 9)) & (v217 - 1);
        v220 = (_QWORD *)(*v259 + 16 * v219);
        v221 = *v220;
        if (*v145 == *v220)
        {
LABEL_378:
          v220[1] = v212;
          goto LABEL_249;
        }
        v222 = 0;
        v223 = 1;
        while (v221 != -4096)
        {
          if (v222)
            v224 = 0;
          else
            v224 = v221 == -8192;
          if (v224)
            v222 = v220;
          v225 = v219 + v223++;
          v219 = v225 & v218;
          v220 = (_QWORD *)(*v259 + 16 * (v225 & v218));
          v221 = *v220;
          if (*v145 == *v220)
            goto LABEL_378;
        }
        if (v222)
          v226 = v222;
        else
          v226 = v220;
      }
      else
      {
        v226 = 0;
      }
      v220 = sub_1C4ECCA58((uint64_t)v259, (uint64_t)v145, v145, v226);
      *v220 = *v145;
      v220[1] = 0;
      goto LABEL_378;
    }
LABEL_249:
    if (++v132 != v133)
      continue;
    break;
  }
  if ((_DWORD)v267)
  {
    v227 = (char *)v266;
    v228 = (char *)v266 + 8 * v267;
    while (1)
    {
      v230 = *((_QWORD *)v228 - 1);
      v228 -= 8;
      v229 = v230;
      v231 = *(_QWORD *)(v230 + 16);
      if (v231 == v230)
      {
        v243 = *(_QWORD *)(v229 + 8);
        if (v243 && *(_BYTE *)(v243 + 16) == 83 && (*(_DWORD *)(v243 + 20) & 0x7FFFFFF) == 0)
        {
          if (*(_DWORD *)(v229 + 40))
          {
            v244 = 0;
            do
            {
              v245 = *(uint64_t **)(*(_QWORD *)(v229 + 48) + 8 * v244);
              sub_1C477667C((llvm::PHINode *)v243, *(_QWORD *)(v245[2] + 8), *v245);
              ++v244;
            }
            while (v244 != *(_DWORD *)(v229 + 40));
          }
          v246 = v260;
          if (v260)
          {
            v247 = *(unsigned int *)(v260 + 8);
            if (v247 >= *(unsigned int *)(v260 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v260, v260 + 16, v247 + 1, 8);
              v247 = *(unsigned int *)(v246 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v246 + 8 * v247) = v243;
            ++*(_DWORD *)(v246 + 8);
          }
        }
        goto LABEL_398;
      }
      v232 = *(_QWORD *)(v231 + 8);
      v233 = *((_DWORD *)v259 + 4);
      if (!v233)
        break;
      v234 = v233 - 1;
      v235 = ((*(_QWORD *)v229 >> 4) ^ (*(_QWORD *)v229 >> 9)) & (v233 - 1);
      v236 = (_QWORD *)(*v259 + 16 * v235);
      v237 = *v236;
      if (*(_QWORD *)v229 != *v236)
      {
        v238 = 0;
        v239 = 1;
        while (v237 != -4096)
        {
          if (v238)
            v240 = 0;
          else
            v240 = v237 == -8192;
          if (v240)
            v238 = v236;
          v241 = v235 + v239++;
          v235 = v241 & v234;
          v236 = (_QWORD *)(*v259 + 16 * (v241 & v234));
          v237 = *v236;
          if (*(_QWORD *)v229 == *v236)
            goto LABEL_397;
        }
        if (v238)
          v242 = v238;
        else
          v242 = v236;
        goto LABEL_396;
      }
LABEL_397:
      v236[1] = v232;
LABEL_398:
      if (v228 == v227)
        goto LABEL_211;
    }
    v242 = 0;
LABEL_396:
    v236 = sub_1C4ECCA58((uint64_t)v259, v229, (uint64_t *)v229, v242);
    *v236 = *(_QWORD *)v229;
    v236[1] = 0;
    goto LABEL_397;
  }
LABEL_211:
  v122 = v255;
  if (!v262)
  {
    v130 = 0;
    goto LABEL_225;
  }
  v123 = ((v255 >> 4) ^ (v255 >> 9)) & (v262 - 1);
  v124 = (uint64_t *)(v261[0] + 16 * v123);
  v125 = *v124;
  if (v255 != (llvm::BasicBlock *)*v124)
  {
    v126 = 0;
    v127 = 1;
    while (v125 != -4096)
    {
      if (v126)
        v128 = 0;
      else
        v128 = v125 == -8192;
      if (v128)
        v126 = v124;
      v129 = v123 + v127++;
      v123 = v129 & (v262 - 1);
      v124 = (uint64_t *)(v261[0] + 16 * v123);
      v125 = *v124;
      if (v255 == (llvm::BasicBlock *)*v124)
        goto LABEL_226;
    }
    if (v126)
      v130 = v126;
    else
      v130 = v124;
LABEL_225:
    v124 = sub_1C514C9E4((uint64_t)v261, (uint64_t *)&v255, v130);
    *v124 = (uint64_t)v122;
    v124[1] = 0;
  }
LABEL_226:
  v14 = *(llvm::UndefValue **)(*(_QWORD *)(v124[1] + 16) + 8);
LABEL_227:
  if (v266 != v268)
    free(v266);
  sub_1C4926AE8((uint64_t)v263);
  MEMORY[0x1CAA32FB4](v261[0], 8);
  return v14;
}

llvm::UndefValue *llvm::SSAUpdater::GetValueInMiddleOfBlock(llvm::UndefValue **this, uint64_t **a2)
{
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  llvm::BasicBlock *v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  llvm::UndefValue *v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  llvm::BasicBlock *v21;
  llvm::UndefValue *ValueAtEndOfBlockInternal;
  uint64_t v23;
  llvm::BasicBlock **v24;
  unsigned int v25;
  llvm::UndefValue *v26;
  uint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  char v33;
  llvm::BasicBlock *v34;
  llvm::UndefValue *v35;
  uint64_t v36;
  llvm::BasicBlock **v37;
  llvm::UndefValue *v38;
  unsigned int v39;
  BOOL v40;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  void **v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *i;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  llvm::UndefValue *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  llvm::Type *v70;
  llvm::DSOLocalEquivalent **v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  int v75;
  unint64_t v76;
  uint64_t *v77;
  int v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  llvm::UndefValue *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t **j;
  uint64_t **v91;
  void **v92;
  void *v93;
  unsigned __int8 *v94;
  unsigned __int8 **v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  llvm::ValueSymbolTable *v101;
  unsigned __int8 *v102;
  _QWORD *v103;
  __int128 v104;
  __int128 v105;
  __int16 v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  _QWORD v110[2];
  __int16 v111;
  void *v112;
  uint64_t v113;
  _QWORD v114[17];

  v114[16] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)*this + 4);
  if (!v4)
    return llvm::SSAUpdater::GetValueAtEndOfBlockInternal((llvm::SSAUpdater *)this, (llvm::BasicBlock *)a2);
  v5 = *(_QWORD *)*this;
  v6 = v4 - 1;
  v7 = v6 & ((a2 >> 4) ^ (a2 >> 9));
  v8 = *(llvm::BasicBlock **)(v5 + 16 * v7);
  if (v8 != (llvm::BasicBlock *)a2)
  {
    v9 = 1;
    while (v8 != (llvm::BasicBlock *)-4096)
    {
      v10 = v7 + v9++;
      v7 = v10 & v6;
      v8 = *(llvm::BasicBlock **)(v5 + 16 * v7);
      if (v8 == (llvm::BasicBlock *)a2)
        goto LABEL_6;
    }
    return llvm::SSAUpdater::GetValueAtEndOfBlockInternal((llvm::SSAUpdater *)this, (llvm::BasicBlock *)a2);
  }
LABEL_6:
  v112 = v114;
  v113 = 0x800000000;
  v11 = a2[6];
  v12 = v11 - 3;
  if (!v11)
    v12 = 0;
  v13 = *((unsigned __int8 *)v12 + 16);
  if (v13 == 83)
    v14 = v12;
  else
    v14 = 0;
  if (v11 && v13 == 83)
  {
    v15 = *((_DWORD *)v14 + 5) & 0x7FFFFFF;
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = 0;
      v18 = 8 * v15;
      do
      {
        v19 = *((_DWORD *)v14 + 5);
        if ((v19 & 0x40000000) != 0)
          v20 = (uint64_t *)*(v14 - 1);
        else
          v20 = &v14[-4 * (v19 & 0x7FFFFFF)];
        v21 = (llvm::BasicBlock *)v20[4 * *((unsigned int *)v14 + 15) + (unint64_t)v16 / 8];
        ValueAtEndOfBlockInternal = llvm::SSAUpdater::GetValueAtEndOfBlockInternal((llvm::SSAUpdater *)this, v21);
        v23 = v113;
        if (v113 >= (unint64_t)HIDWORD(v113))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v113 + 1, 16);
          v23 = v113;
        }
        v24 = (llvm::BasicBlock **)((char *)v112 + 16 * v23);
        *v24 = v21;
        v24[1] = ValueAtEndOfBlockInternal;
        v25 = v113 + 1;
        LODWORD(v113) = v113 + 1;
        if (ValueAtEndOfBlockInternal == v17)
          v26 = v17;
        else
          v26 = 0;
        if (v16)
          v17 = v26;
        else
          v17 = ValueAtEndOfBlockInternal;
        v16 += 8;
      }
      while (v18 != v16);
      goto LABEL_57;
    }
LABEL_92:
    v17 = llvm::UndefValue::get(this[1], (llvm::Type *)a2);
    goto LABEL_93;
  }
  v28 = a2[1];
  if (!v28)
    goto LABEL_92;
  while (1)
  {
    v29 = v28[3];
    v30 = *(unsigned __int8 *)(v29 + 16);
    v31 = v29 && v30 >= 0x1C;
    if (v31 && v30 - 29 <= 0xA)
      break;
    v28 = (uint64_t *)v28[1];
    if (!v28)
      goto LABEL_92;
  }
  v17 = 0;
  v33 = 1;
LABEL_40:
  v34 = *(llvm::BasicBlock **)(v29 + 40);
  v35 = llvm::SSAUpdater::GetValueAtEndOfBlockInternal((llvm::SSAUpdater *)this, v34);
  v36 = v113;
  if (v113 >= (unint64_t)HIDWORD(v113))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v113 + 1, 16);
    v36 = v113;
  }
  v37 = (llvm::BasicBlock **)((char *)v112 + 16 * v36);
  *v37 = v34;
  v37[1] = v35;
  v25 = v113 + 1;
  LODWORD(v113) = v113 + 1;
  if (v35 == v17)
    v38 = v17;
  else
    v38 = 0;
  if ((v33 & 1) != 0)
    v17 = v35;
  else
    v17 = v38;
  while (1)
  {
    v28 = (uint64_t *)v28[1];
    if (!v28)
      break;
    v29 = v28[3];
    v39 = *(unsigned __int8 *)(v29 + 16);
    if (v29)
      v40 = v39 >= 0x1C;
    else
      v40 = 0;
    if (v40 && v39 - 29 < 0xB)
    {
      v33 = 0;
      goto LABEL_40;
    }
  }
LABEL_57:
  if (!v25)
    goto LABEL_92;
  if (!v17)
  {
    v42 = a2[6];
    v43 = v42 - 3;
    if (!v42)
      v43 = 0;
    if (*((_BYTE *)v43 + 16) == 83)
    {
      v44 = (uint64_t *)v112;
      v45 = v25;
      v46 = v25 | ((unint64_t)v25 >> 1) | ((v25 | ((unint64_t)v25 >> 1)) >> 2);
      v47 = v46 | (v46 >> 4) | ((v46 | (v46 >> 4)) >> 8);
      v48 = ((v47 >> 16) | v47) + 1;
      if (v48 > 8)
      {
        v49 = (uint64_t *)operator new(16 * (((v47 >> 16) | v47) + 1), (std::align_val_t)8uLL);
        v109 = (uint64_t)v49;
        v110[0] = v48;
        v108 = 0;
        v50 = (void **)&v49[2 * v48];
      }
      else
      {
        v108 = (void *)1;
        v49 = &v109;
        v50 = &v112;
      }
      do
      {
        *v49 = -4096;
        v49 += 2;
      }
      while (v49 != (uint64_t *)v50);
      v51 = 16 * v45;
      do
      {
        v103 = 0;
        if ((sub_1C5F827A8((uint64_t)&v108, *v44, &v103) & 1) == 0)
        {
          v52 = sub_1C5F82854(&v108, v44, v103);
          *v52 = *v44;
          v52[1] = v44[1];
        }
        v44 += 2;
        v51 -= 16;
      }
      while (v51);
      if (a2[5] == (uint64_t *)(a2 + 5))
      {
        v17 = 0;
        LODWORD(v56) = 1;
      }
      else
      {
        v17 = 0;
        for (i = a2[6]; ; i = (uint64_t *)v54[4])
        {
          v54 = i - 3;
          v55 = i ? (uint64_t)(i - 3) : 0;
          LODWORD(v56) = 1;
          if (!i || *(_BYTE *)(v55 + 16) != 83)
            break;
          v57 = *((_DWORD *)i - 1);
          v56 = v57 & 0x7FFFFFF;
          if ((v57 & 0x7FFFFFF) == v108 >> 1)
          {
            if (!(_DWORD)v56)
            {
LABEL_96:
              v17 = (llvm::UndefValue *)v54;
              break;
            }
            v58 = 0;
            while (1)
            {
              v59 = (v57 & 0x40000000) != 0 ? (uint64_t *)*(v54 - 1) : &v54[-4 * (v57 & 0x7FFFFFF)];
              v60 = v59[4 * *((unsigned int *)v54 + 15) + v58];
              v107 = v60;
              v103 = 0;
              if (sub_1C5F827A8((uint64_t)&v108, v60, &v103))
              {
                v61 = v103[1];
              }
              else
              {
                v63 = sub_1C5F82854(&v108, &v107, v103);
                v61 = 0;
                *v63 = v60;
                v63[1] = 0;
              }
              v57 = *((_DWORD *)v54 + 5);
              v62 = (v57 & 0x40000000) != 0 ? (uint64_t *)*(v54 - 1) : &v54[-4 * (v57 & 0x7FFFFFF)];
              if (v61 != v62[4 * v58])
                break;
              if (++v58 == v56)
              {
                LODWORD(v56) = 0;
                goto LABEL_96;
              }
            }
          }
          v17 = 0;
        }
      }
      if ((v108 & 1) == 0)
        MEMORY[0x1CAA32FB4](v109, 8);
      if (!(_DWORD)v56)
        goto LABEL_93;
      v25 = v113;
      v42 = a2[6];
    }
    v64 = this[1];
    v111 = 260;
    v108 = this + 2;
    v65 = operator new(0x48uLL);
    v66 = v65;
    v65[1] = v64;
    v17 = (llvm::UndefValue *)(v65 + 1);
    *v65 = 0;
    v65[2] = 0;
    v65[3] = 0x4000000000000053;
    *((_OWORD *)v65 + 2) = 0u;
    v67 = v65 + 4;
    *((_OWORD *)v65 + 3) = 0u;
    *((_DWORD *)v65 + 16) = 0;
    if (v42)
    {
      v88 = v42[2];
      v65[6] = v88;
      *(_WORD *)(v88 + 18) &= ~0x8000u;
      if ((*((_BYTE *)v65 + 31) & 0x10) != 0)
      {
        v100 = *(_QWORD *)(v88 + 56);
        if (v100)
        {
          v101 = *(llvm::ValueSymbolTable **)(v100 + 104);
          if (v101)
            llvm::ValueSymbolTable::reinsertValue(v101, v17);
        }
      }
      v89 = *v42;
      v66[4] = *v42;
      v66[5] = v42;
      *(_QWORD *)(v89 + 8) = v67;
      *v42 = (uint64_t)v67;
    }
    *((_DWORD *)v66 + 17) = v25;
    llvm::Value::setName((uint64_t ***)v17, (uint64_t)&v108);
    v68 = *((unsigned int *)v66 + 17);
    v69 = operator new(40 * v68);
    *v66 = v69;
    if ((_DWORD)v68)
    {
      v72 = &v69[4 * v68];
      do
      {
        *v69 = 0;
        v69[1] = 0;
        v69[2] = 0;
        v69[3] = v17;
        v69 += 4;
      }
      while (v69 != v72);
    }
    if ((_DWORD)v113)
    {
      v73 = 16 * v113;
      v74 = (uint64_t *)((char *)v112 + 8);
      do
      {
        sub_1C477667C(v17, *v74, *(v74 - 1));
        v74 += 2;
        v73 -= 16;
      }
      while (v73);
    }
    v103 = (_QWORD *)(a2[7][5] + 272);
    v104 = 0u;
    v105 = 0u;
    v106 = 257;
    v75 = *((_DWORD *)v66 + 7);
    if ((v75 & 0x40000000) != 0)
    {
      v77 = (uint64_t *)*v66;
      v76 = v75 & 0x7FFFFFF;
    }
    else
    {
      v76 = v75 & 0x7FFFFFF;
      v77 = (uint64_t *)((char *)v17 - 32 * v76);
    }
    v108 = v110;
    v109 = 0x800000000;
    if (v76 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v108, (uint64_t)v110, v76, 8);
      v78 = v109;
      v80 = v108;
      v79 = v109;
    }
    else
    {
      v78 = 0;
      if (!v76)
      {
        v84 = v110;
        goto LABEL_117;
      }
      v79 = 0;
      v80 = v110;
    }
    v81 = 32 * v76;
    v82 = &v80[v79];
    do
    {
      v83 = *v77;
      v77 += 4;
      *v82++ = v83;
      v81 -= 32;
    }
    while (v81);
    v84 = v108;
LABEL_117:
    LODWORD(v109) = v78 + v76;
    v85 = llvm::SimplifyInstructionWithOperands(v17, (uint64_t)v84, (v78 + v76), (uint64_t)&v103, v70, v71);
    if (v108 == v110)
    {
      if (v85)
      {
LABEL_119:
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v66[6] + 40, (uint64_t ***)v17);
        v86 = v66[4];
        v87 = (_QWORD *)v66[5];
        *v87 = v86;
        *(_QWORD *)(v86 + 8) = v87;
        *v67 = 0;
        v67[1] = 0;
        llvm::Value::deleteValue(v17);
        v17 = v85;
        goto LABEL_93;
      }
    }
    else
    {
      free(v108);
      if (v85)
        goto LABEL_119;
    }
    v108 = 0;
    for (j = (uint64_t **)a2[6]; ; j = (uint64_t **)j[1])
    {
      if (j == a2 + 5)
        goto LABEL_132;
      v91 = j - 3;
      if (!j)
        v91 = 0;
      if (*((_BYTE *)v91 + 16) != 83)
        break;
    }
    v92 = (void **)(j + 3);
    if (v92 == &v108 || (v93 = *v92, (v108 = v93) == 0))
    {
LABEL_132:
      v102 = 0;
      goto LABEL_133;
    }
    llvm::MetadataTracking::track((uint64_t)&v108, (unsigned __int8 *)v93, 2);
    v102 = (unsigned __int8 *)v108;
    if (v108)
      llvm::MetadataTracking::track((uint64_t)&v102, (unsigned __int8 *)v108, 2);
LABEL_133:
    v96 = (unsigned __int8 *)v66[7];
    v95 = (unsigned __int8 **)(v66 + 7);
    v94 = v96;
    if (v96)
      llvm::MetadataTracking::untrack((uint64_t)v95, v94);
    v97 = v102;
    *v95 = v102;
    if (v97)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v102, v97, (uint64_t)v95);
      v102 = 0;
    }
    v98 = (uint64_t)this[5];
    if (v98)
    {
      v99 = *(unsigned int *)(v98 + 8);
      if (v99 >= *(_DWORD *)(v98 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v98, v98 + 16, v99 + 1, 8);
        LODWORD(v99) = *(_DWORD *)(v98 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v98 + 8 * v99) = v17;
      ++*(_DWORD *)(v98 + 8);
    }
    if (v108)
      llvm::MetadataTracking::untrack((uint64_t)&v108, (unsigned __int8 *)v108);
  }
LABEL_93:
  if (v112 != v114)
    free(v112);
  return v17;
}

llvm::UndefValue *llvm::SSAUpdater::RewriteUse(llvm::SSAUpdater *this, llvm::Use *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  llvm::UndefValue *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *((_QWORD *)a2 + 3);
  if (v3 && *(_BYTE *)(v3 + 16) == 83)
  {
    v4 = *(_DWORD *)(v3 + 20);
    if ((v4 & 0x40000000) != 0)
      v5 = *(_QWORD *)(v3 - 8);
    else
      v5 = v3 - 32 * (v4 & 0x7FFFFFF);
    result = llvm::SSAUpdater::GetValueAtEndOfBlockInternal(this, *(llvm::BasicBlock **)(v5+ 32 * *(unsigned int *)(v3 + 60)+ 8 * (((unint64_t)a2 - v5) >> 5)));
  }
  else
  {
    result = llvm::SSAUpdater::GetValueInMiddleOfBlock((llvm::UndefValue **)this, *(uint64_t ***)(v3 + 40));
  }
  if (*(_QWORD *)a2)
  {
    **((_QWORD **)a2 + 2) = *((_QWORD *)a2 + 1);
    v7 = *((_QWORD *)a2 + 1);
    if (v7)
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
  }
  *(_QWORD *)a2 = result;
  if (result)
  {
    v9 = *((_QWORD *)result + 1);
    result = (llvm::UndefValue *)((char *)result + 8);
    v8 = v9;
    *((_QWORD *)a2 + 1) = v9;
    if (v9)
      *(_QWORD *)(v8 + 16) = (char *)a2 + 8;
    *((_QWORD *)a2 + 2) = result;
    *(_QWORD *)result = a2;
  }
  return result;
}

llvm::UndefValue *llvm::SSAUpdater::RewriteUseAfterInsertions(llvm::SSAUpdater *this, llvm::Use *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  llvm::BasicBlock **v6;
  llvm::UndefValue *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 3);
  if (v3 && *(_BYTE *)(v3 + 16) == 83)
  {
    v4 = *(_DWORD *)(v3 + 20);
    if ((v4 & 0x40000000) != 0)
      v5 = *(_QWORD *)(v3 - 8);
    else
      v5 = v3 - 32 * (v4 & 0x7FFFFFF);
    v6 = (llvm::BasicBlock **)(v5
                             + 32 * *(unsigned int *)(v3 + 60)
                             + 8 * (((unint64_t)a2 - v5) >> 5));
  }
  else
  {
    v6 = (llvm::BasicBlock **)(v3 + 40);
  }
  result = llvm::SSAUpdater::GetValueAtEndOfBlockInternal(this, *v6);
  if (*(_QWORD *)a2)
  {
    **((_QWORD **)a2 + 2) = *((_QWORD *)a2 + 1);
    v8 = *((_QWORD *)a2 + 1);
    if (v8)
      *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
  }
  *(_QWORD *)a2 = result;
  if (result)
  {
    v10 = *((_QWORD *)result + 1);
    result = (llvm::UndefValue *)((char *)result + 8);
    v9 = v10;
    *((_QWORD *)a2 + 1) = v10;
    if (v10)
      *(_QWORD *)(v9 + 16) = (char *)a2 + 8;
    *((_QWORD *)a2 + 2) = result;
    *(_QWORD *)result = a2;
  }
  return result;
}

_QWORD *llvm::LoadAndStorePromoter::LoadAndStorePromoter(_QWORD *a1, uint64_t **a2, uint64_t a3, uint64_t a4, char *a5, size_t a6)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  int v14;
  int v15;
  uint64_t *v16;
  size_t v17;

  *a1 = &off_1E81AA268;
  a1[1] = a4;
  if (a3)
  {
    v7 = *a2;
    if (*a2 && *((_BYTE *)v7 + 16) == 60)
    {
      if (!a6)
      {
LABEL_7:
        if ((*((_BYTE *)v7 + 23) & 0x10) == 0)
        {
          a6 = 0;
          a5 = &byte_1C871356D;
          goto LABEL_16;
        }
        v8 = **(_QWORD **)*v7;
        v9 = *(_QWORD *)(v8 + 152);
        v10 = *(unsigned int *)(v8 + 168);
        if ((_DWORD)v10)
        {
          LODWORD(v11) = (v10 - 1) & ((v7 >> 4) ^ (v7 >> 9));
          v12 = (uint64_t **)(v9 + 16 * v11);
          v13 = *v12;
          if (*v12 == v7)
          {
LABEL_15:
            v16 = v12[1];
            v17 = *v16;
            a5 = (char *)(v16 + 2);
            a6 = v17;
            goto LABEL_16;
          }
          v14 = 1;
          while (v13 != (uint64_t *)-4096)
          {
            v15 = v11 + v14++;
            v11 = v15 & (v10 - 1);
            v13 = *(uint64_t **)(v9 + 16 * v11);
            if (v13 == v7)
            {
              v12 = (uint64_t **)(v9 + 16 * v11);
              goto LABEL_15;
            }
          }
        }
        v12 = (uint64_t **)(v9 + 16 * v10);
        goto LABEL_15;
      }
    }
    else
    {
      v7 = (uint64_t *)*(v7 - 8);
      if (!a6)
        goto LABEL_7;
    }
LABEL_16:
    llvm::SSAUpdater::Initialize(a4, *v7, a5, a6);
  }
  return a1;
}

uint64_t llvm::LoadAndStorePromoter::run(llvm::UndefValue ***a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  llvm::UndefValue **v27;
  llvm::Value *v28;
  llvm::UndefValue *v29;
  int v30;
  int v31;
  unsigned int v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  int v49;
  llvm::ValueAsMetadata *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  llvm::UndefValue **v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  BOOL v59;
  unsigned int v60;
  _QWORD *v61;
  unint64_t v62;
  _QWORD *v63;
  llvm::UndefValue ***v64;
  uint64_t v65;
  llvm::UndefValue **v66;
  llvm::UndefValue *ValueInMiddleOfBlock;
  llvm::Type *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  llvm::Value *v73;
  unsigned int v74;
  uint64_t v75;
  llvm::Value **v76;
  llvm::Value *v77;
  uint64_t v78;
  llvm::Value *v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94[2];
  unsigned int v95;
  _QWORD *v96;
  void *v97;
  uint64_t v98;
  _QWORD v99[34];

  v99[32] = *MEMORY[0x1E0C80C00];
  v94[0] = 0;
  v94[1] = 0;
  v95 = 0;
  v4 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v4)
  {
    v97 = v99;
    v98 = 0x2000000000;
    v91 = 0;
    v92 = 0;
    v93 = 0;
    goto LABEL_108;
  }
  v5 = *(_QWORD **)a2;
  v6 = 8 * v4;
  do
  {
    v7 = *v5;
    v8 = *(_QWORD *)(*v5 + 40);
    v91 = v8;
    v97 = 0;
    if ((sub_1C4EA246C(v94[0], v95, v8, &v97) & 1) == 0)
    {
      v16 = sub_1C5F82BB4((uint64_t)v94, &v91, v97);
      *v16 = v8;
      v16[1] = 0;
      v9 = v16 + 1;
LABEL_13:
      *v9 = v7 & 0xFFFFFFFFFFFFFFFBLL;
      goto LABEL_14;
    }
    v9 = (unint64_t *)((char *)v97 + 8);
    v10 = *((_QWORD *)v97 + 1);
    if (v10 <= 7)
      goto LABEL_13;
    if ((v10 & 4) == 0)
    {
      v11 = operator new();
      *(_QWORD *)v11 = v11 + 16;
      *(_QWORD *)(v11 + 8) = 0x400000000;
      *v9 = v11 | 4;
      v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      v13 = *(unsigned int *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v13 >= *(unsigned int *)((v11 & 0xFFFFFFFFFFFFFFF8) + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v11 & 0xFFFFFFFFFFFFFFF8, v12 + 16, v13 + 1, 8);
        v13 = *(unsigned int *)(v12 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v12 + 8 * v13) = v10 & 0xFFFFFFFFFFFFFFF8;
      ++*(_DWORD *)(v12 + 8);
      v10 = *v9;
    }
    v14 = v10 & 0xFFFFFFFFFFFFFFF8;
    v15 = *(unsigned int *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v15 >= *(unsigned int *)((v10 & 0xFFFFFFFFFFFFFFF8) + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v10 & 0xFFFFFFFFFFFFFFF8, v14 + 16, v15 + 1, 8);
      v15 = *(unsigned int *)(v14 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = v7;
    ++*(_DWORD *)(v14 + 8);
LABEL_14:
    ++v5;
    v6 -= 8;
  }
  while (v6);
  v17 = *(_QWORD **)a2;
  v18 = *(unsigned int *)(a2 + 8);
  v97 = v99;
  v98 = 0x2000000000;
  v91 = 0;
  v92 = 0;
  v93 = 0;
  if (!(_DWORD)v18)
    goto LABEL_108;
  v19 = &v17[v18];
  while (2)
  {
    v20 = *v17;
    v21 = *(_QWORD **)(*v17 + 40);
    v90 = v21;
    v96 = 0;
    v22 = sub_1C4EA246C(v94[0], v95, (uint64_t)v21, &v96);
    v23 = v96;
    if ((v22 & 1) == 0)
    {
      v63 = sub_1C5F82BB4((uint64_t)v94, (uint64_t *)&v90, v96);
      *v63 = v21;
      v63[1] = 0;
      goto LABEL_97;
    }
    v24 = v96[1];
    if (v24 < 8)
      goto LABEL_97;
    v25 = v24 & 0xFFFFFFFFFFFFFFF8;
    if ((v24 & 4) == 0 || !v25)
    {
      if ((v24 & 4) != 0)
      {
        v26 = *(unsigned int *)(v25 + 8);
        goto LABEL_25;
      }
LABEL_26:
      if (*(_BYTE *)(v20 + 16) != 61)
      {
        v45 = v98;
        if (v98 >= (unint64_t)HIDWORD(v98))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, (uint64_t)v99, v98 + 1, 8);
          v45 = v98;
        }
        *((_QWORD *)v97 + v45) = v20;
        LODWORD(v98) = v98 + 1;
        goto LABEL_92;
      }
      ((void (*)(llvm::UndefValue ***, uint64_t))(*a1)[6])(a1, v20);
      v27 = a1[1];
      v28 = *(llvm::Value **)(v20 - 64);
      v96 = v21;
      v29 = *v27;
      v30 = *((_DWORD *)*v27 + 4);
      if (v30)
      {
        v31 = v30 - 1;
        v32 = (v30 - 1) & ((v21 >> 4) ^ (v21 >> 9));
        v33 = (_QWORD *)(*(_QWORD *)v29 + 16 * v32);
        v34 = (_QWORD *)*v33;
        if (v21 != (_QWORD *)*v33)
        {
          v35 = 0;
          v36 = 1;
          while (v34 != (_QWORD *)-4096)
          {
            if (v35)
              v37 = 0;
            else
              v37 = v34 == (_QWORD *)-8192;
            if (v37)
              v35 = v33;
            v38 = v32 + v36++;
            v32 = v38 & v31;
            v33 = (_QWORD *)(*(_QWORD *)v29 + 16 * (v38 & v31));
            v34 = (_QWORD *)*v33;
            if (v21 == (_QWORD *)*v33)
              goto LABEL_91;
          }
          goto LABEL_87;
        }
        goto LABEL_91;
      }
      goto LABEL_99;
    }
    v26 = *(unsigned int *)(v25 + 8);
    if (!(_DWORD)v26)
      goto LABEL_97;
LABEL_25:
    if (v26 == 1)
      goto LABEL_26;
    if (!v26)
      goto LABEL_93;
    v39 = *(uint64_t **)v25;
    v40 = 8 * v26;
    v41 = 8 * v26;
    v42 = *(uint64_t **)v25;
    while (*(_BYTE *)(*v42 + 16) != 61)
    {
      ++v42;
      v41 -= 8;
      if (!v41)
      {
        v43 = v98;
        do
        {
          v44 = *v39;
          if (v43 >= HIDWORD(v98))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, (uint64_t)v99, v43 + 1, 8);
            v43 = v98;
          }
          *((_QWORD *)v97 + v43) = v44;
          v43 = v98 + 1;
          LODWORD(v98) = v98 + 1;
          ++v39;
          v40 -= 8;
        }
        while (v40);
        goto LABEL_92;
      }
    }
    v46 = v21 + 5;
    v47 = (_QWORD *)v21[6];
    if (v47 == v21 + 5)
    {
      v28 = 0;
    }
    else
    {
      v28 = 0;
      do
      {
        if (v47)
          v48 = (unsigned __int8 *)(v47 - 3);
        else
          v48 = 0;
        v49 = v48[16];
        if (v49 == 60)
          v50 = (llvm::ValueAsMetadata *)v48;
        else
          v50 = 0;
        if (v47 && v49 == 60)
        {
          if (((unsigned int (*)(llvm::UndefValue ***, llvm::ValueAsMetadata *, uint64_t))(*a1)[2])(a1, v50, a2))
          {
            if (v28)
            {
              ((void (*)(llvm::UndefValue ***, llvm::ValueAsMetadata *, llvm::Value *))(*a1)[4])(a1, v50, v28);
              llvm::Value::doRAUW(v50, v28, (llvm::Value *)1);
              v96 = v50;
              sub_1C4EAD954(&v91, &v96)[1] = v28;
            }
            else
            {
              v52 = v98;
              if (v98 >= (unint64_t)HIDWORD(v98))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v97, (uint64_t)v99, v98 + 1, 8);
                v52 = v98;
              }
              v28 = 0;
              *((_QWORD *)v97 + v52) = v50;
              LODWORD(v98) = v98 + 1;
            }
          }
        }
        else
        {
          if (v49 == 61)
            v51 = v48;
          else
            v51 = 0;
          if (v47
            && v49 == 61
            && ((unsigned int (*)(llvm::UndefValue ***, unsigned __int8 *, uint64_t))(*a1)[2])(a1, v51, a2))
          {
            ((void (*)(llvm::UndefValue ***, unsigned __int8 *))(*a1)[6])(a1, v51);
            v28 = (llvm::Value *)*((_QWORD *)v51 - 8);
          }
        }
        v47 = (_QWORD *)v47[1];
      }
      while (v47 != v46);
      v21 = v90;
    }
    v53 = a1[1];
    v96 = v21;
    v29 = *v53;
    v54 = *((_DWORD *)*v53 + 4);
    if (!v54)
    {
LABEL_99:
      v61 = 0;
      goto LABEL_90;
    }
    v55 = v54 - 1;
    v56 = (v54 - 1) & ((v21 >> 4) ^ (v21 >> 9));
    v33 = (_QWORD *)(*(_QWORD *)v29 + 16 * v56);
    v57 = *v33;
    if (v21 == (_QWORD *)*v33)
      goto LABEL_91;
    v35 = 0;
    v58 = 1;
    while (v57 != -4096)
    {
      if (v35)
        v59 = 0;
      else
        v59 = v57 == -8192;
      if (v59)
        v35 = v33;
      v60 = v56 + v58++;
      v56 = v60 & v55;
      v33 = (_QWORD *)(*(_QWORD *)v29 + 16 * (v60 & v55));
      v57 = *v33;
      if (v21 == (_QWORD *)*v33)
        goto LABEL_91;
    }
LABEL_87:
    if (v35)
      v61 = v35;
    else
      v61 = v33;
LABEL_90:
    v33 = sub_1C4ECCA58((uint64_t)v29, (uint64_t)&v96, (uint64_t *)&v96, v61);
    *v33 = v96;
    v33[1] = 0;
LABEL_91:
    v33[1] = v28;
LABEL_92:
    v24 = v23[1];
LABEL_93:
    if ((v24 & 4) != 0)
    {
      v62 = v24 & 0xFFFFFFFFFFFFFFF8;
      if (v62)
        *(_DWORD *)(v62 + 8) = 0;
    }
    else
    {
      v23[1] = 0;
    }
LABEL_97:
    if (++v17 != v19)
      continue;
    break;
  }
  if ((_DWORD)v98)
  {
    v64 = (llvm::UndefValue ***)v97;
    v65 = 8 * v98;
    do
    {
      v66 = *v64;
      ValueInMiddleOfBlock = llvm::SSAUpdater::GetValueInMiddleOfBlock(a1[1], (uint64_t **)(*v64)[5]);
      ((void (*)(llvm::UndefValue ***, llvm::UndefValue **, llvm::UndefValue *))(*a1)[4])(a1, v66, ValueInMiddleOfBlock);
      if (ValueInMiddleOfBlock == (llvm::UndefValue *)v66)
        ValueInMiddleOfBlock = llvm::UndefValue::get(*v66, v68);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v66, ValueInMiddleOfBlock, (llvm::Value *)1);
      v96 = v66;
      sub_1C4EAD954(&v91, &v96)[1] = ValueInMiddleOfBlock;
      ++v64;
      v65 -= 8;
    }
    while (v65);
  }
LABEL_108:
  ((void (*)(llvm::UndefValue ***))(*a1)[3])(a1);
  v69 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v69)
  {
    v70 = *(_QWORD **)a2;
    v71 = *(_QWORD *)a2 + 8 * v69;
    do
    {
      v72 = (_QWORD *)*v70;
      if (((unsigned int (*)(llvm::UndefValue ***, _QWORD))(*a1)[7])(a1, *v70))
      {
        if (v72[1])
        {
          v96 = v72;
          v73 = (llvm::Value *)sub_1C4EAD954(&v91, &v96)[1];
          if (v93)
          {
            v74 = v93 - 1;
            LODWORD(v75) = ((v73 >> 4) ^ (v73 >> 9)) & (v93 - 1);
            v76 = (llvm::Value **)(v91 + 16 * v75);
            v77 = *v76;
            if (v73 == *v76)
              goto LABEL_114;
            v82 = 1;
            while (v77 != (llvm::Value *)-4096)
            {
              v83 = v75 + v82++;
              v75 = v83 & v74;
              v77 = *(llvm::Value **)(v91 + 16 * v75);
              if (v73 == v77)
              {
                v76 = (llvm::Value **)(v91 + 16 * v75);
LABEL_114:
                while (v76 != (llvm::Value **)(v91 + 16 * v93))
                {
                  v73 = v76[1];
                  LODWORD(v78) = ((v73 >> 4) ^ (v73 >> 9)) & v74;
                  v76 = (llvm::Value **)(v91 + 16 * v78);
                  v79 = *v76;
                  if (v73 != *v76)
                  {
                    v80 = 1;
                    while (v79 != (llvm::Value *)-4096)
                    {
                      v81 = v78 + v80++;
                      v78 = v81 & v74;
                      v79 = *(llvm::Value **)(v91 + 16 * v78);
                      if (v73 == v79)
                      {
                        v76 = (llvm::Value **)(v91 + 16 * v78);
                        goto LABEL_114;
                      }
                    }
                    goto LABEL_124;
                  }
                }
                break;
              }
            }
          }
LABEL_124:
          ((void (*)(llvm::UndefValue ***, _QWORD *, llvm::Value *))(*a1)[4])(a1, v72, v73);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v72, v73, (llvm::Value *)1);
        }
        ((void (*)(llvm::UndefValue ***, _QWORD *))(*a1)[5])(a1, v72);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v72[5] + 40, (uint64_t ***)v72);
        v84 = v72[3];
        v85 = (_QWORD *)v72[4];
        *v85 = v84;
        *(_QWORD *)(v84 + 8) = v85;
        v72[3] = 0;
        v72[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v72);
      }
      ++v70;
    }
    while (v70 != (_QWORD *)v71);
  }
  MEMORY[0x1CAA32FB4](v91, 8);
  if (v97 != v99)
    free(v97);
  v86 = v94[0];
  if (v95)
  {
    v87 = (uint64_t *)(v94[0] + 8);
    v88 = 16 * v95;
    do
    {
      if ((*(v87 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v87 = sub_1C5F82B44(v87);
      v87 += 2;
      v88 -= 16;
    }
    while (v88);
  }
  return MEMORY[0x1CAA32FB4](v86, 8);
}

uint64_t sub_1C5F827A8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5F82854(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v7;
  _QWORD *v8;

  v3 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v4 = 8;
  else
    v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[1] > v4 >> 3)
  {
    goto LABEL_5;
  }
  v7 = (uint64_t)a1;
  sub_1C5F82914((uint64_t)a1, v4);
  v8 = 0;
  sub_1C5F827A8(v7, *a2, &v8);
  a1 = (_DWORD *)v7;
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C5F82914(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C63B62D0(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C63B62D0(a1, v14, v9);
}

_QWORD *sub_1C5F82A8C(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_15:
    v6 = sub_1C4ECCA58(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_15;
  }
  return v6;
}

uint64_t *sub_1C5F82B44(uint64_t *a1)
{
  uint64_t v2;
  void **v3;

  v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*v3 != v3 + 2)
        free(*v3);
      MEMORY[0x1CAA32FC0]();
    }
  }
  return a1;
}

_QWORD *sub_1C5F82BB4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C5F82C68(a1, v6);
  v8 = 0;
  sub_1C4EA246C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5F82C68(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63B6390((uint64_t *)a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::SSAUpdaterBulk::computeValueAt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  llvm::Type *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  llvm::UndefValue *v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  _QWORD *v36;
  int v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  BOOL v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v47;

  v47 = a2;
  v8 = *(_DWORD *)(a3 + 16);
  v9 = a2 >> 4;
  if (v8)
  {
    v10 = *(_QWORD *)a3;
    v11 = (v8 - 1) & (v9 ^ (a2 >> 9));
    v12 = *(_QWORD *)(*(_QWORD *)a3 + 16 * v11);
    if (v12 == a2)
      goto LABEL_44;
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v11 + v13++;
      v11 = v14 & (v8 - 1);
      v12 = *(_QWORD *)(v10 + 16 * v11);
      if (v12 == a2)
        goto LABEL_43;
    }
  }
  if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a4, a2))
  {
    sub_1C4ECA3D4(a1 + 400, a2);
    if (sub_1C4ECA658(a1 + 400, a2))
    {
      v16 = *(_QWORD *)(a4 + 24);
      v17 = *(unsigned int *)(a4 + 40);
      if ((_DWORD)v17)
      {
        LODWORD(v18) = (v17 - 1) & (v9 ^ (a2 >> 9));
        v19 = (uint64_t *)(v16 + 16 * v18);
        v20 = *v19;
        if (*v19 == a2)
          goto LABEL_27;
        v21 = 1;
        while (v20 != -4096)
        {
          v22 = v18 + v21++;
          v18 = v22 & (v17 - 1);
          v20 = *(_QWORD *)(v16 + 16 * v18);
          if (v20 == a2)
          {
            v19 = (uint64_t *)(v16 + 16 * v18);
            goto LABEL_27;
          }
        }
      }
      v19 = (uint64_t *)(v16 + 16 * v17);
LABEL_27:
      v23 = (llvm::UndefValue *)llvm::SSAUpdaterBulk::computeValueAt(a1, **(_QWORD **)(v19[1] + 8), a3, a4);
      v8 = *(_DWORD *)(a3 + 16);
      if (v8)
      {
        v31 = (v8 - 1) & (v9 ^ (a2 >> 9));
        v25 = (_QWORD *)(*(_QWORD *)a3 + 16 * v31);
        v32 = *v25;
        if (*v25 != a2)
        {
          v27 = 0;
          v33 = 1;
          while (v32 != -4096)
          {
            if (v27)
              v34 = 0;
            else
              v34 = v32 == -8192;
            if (v34)
              v27 = v25;
            v35 = v31 + v33++;
            v31 = v35 & (v8 - 1);
            v25 = (_QWORD *)(*(_QWORD *)a3 + 16 * v31);
            v32 = *v25;
            if (*v25 == a2)
              goto LABEL_42;
          }
LABEL_38:
          if (v27)
            v36 = v27;
          else
            v36 = v25;
          goto LABEL_41;
        }
        goto LABEL_42;
      }
LABEL_60:
      v36 = 0;
LABEL_41:
      v25 = sub_1C4ECCA58(a3, (uint64_t)&v47, &v47, v36);
      *v25 = v47;
      v25[1] = 0;
      v8 = *(_DWORD *)(a3 + 16);
      goto LABEL_42;
    }
  }
  v23 = llvm::UndefValue::get(*(llvm::UndefValue **)(a3 + 88), v15);
  v8 = *(_DWORD *)(a3 + 16);
  if (!v8)
    goto LABEL_60;
  v24 = (v8 - 1) & (v9 ^ (a2 >> 9));
  v25 = (_QWORD *)(*(_QWORD *)a3 + 16 * v24);
  v26 = *v25;
  if (*v25 != a2)
  {
    v27 = 0;
    v28 = 1;
    while (v26 != -4096)
    {
      if (v27)
        v29 = 0;
      else
        v29 = v26 == -8192;
      if (v29)
        v27 = v25;
      v30 = v24 + v28++;
      v24 = v30 & (v8 - 1);
      v25 = (_QWORD *)(*(_QWORD *)a3 + 16 * v24);
      v26 = *v25;
      if (*v25 == a2)
        goto LABEL_42;
    }
    goto LABEL_38;
  }
LABEL_42:
  v25[1] = v23;
  v10 = *(_QWORD *)a3;
LABEL_43:
  if (!v8)
  {
    v45 = 0;
LABEL_57:
    v39 = sub_1C4ECCA58(a3, (uint64_t)&v47, &v47, v45);
    *v39 = v47;
    v39[1] = 0;
    return v39[1];
  }
LABEL_44:
  v37 = v8 - 1;
  v38 = ((v47 >> 4) ^ (v47 >> 9)) & v37;
  v39 = (_QWORD *)(v10 + 16 * v38);
  v40 = *v39;
  if (v47 != *v39)
  {
    v41 = 0;
    v42 = 1;
    while (v40 != -4096)
    {
      if (v41)
        v43 = 0;
      else
        v43 = v40 == -8192;
      if (v43)
        v41 = v39;
      v44 = v38 + v42++;
      v38 = v44 & v37;
      v39 = (_QWORD *)(v10 + 16 * v38);
      v40 = *v39;
      if (v47 == *v39)
        return v39[1];
    }
    if (v41)
      v45 = v41;
    else
      v45 = v39;
    goto LABEL_57;
  }
  return v39[1];
}

void llvm::SSAUpdaterBulk::RewriteAllUses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t ***v32;
  uint64_t ***v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t ***v40;
  uint64_t **v41;
  uint64_t ***v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  uint64_t ***v46;
  uint64_t v47;
  unint64_t v48;
  llvm::PHINode **v49;
  llvm::PHINode **v50;
  llvm::PHINode *v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  llvm::Value *v64;
  uint64_t *v65;
  llvm::ValueHandleBase *v66;
  llvm::ValueHandleBase *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[4];
  __int16 v77;
  uint64_t **v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  int v82;
  _BYTE v83[256];
  unint64_t *v84;
  unint64_t *v85;
  uint64_t v86;
  int v87;
  _BYTE v88[16];
  char *v89;
  char *v90;
  uint64_t v91;
  int v92;
  _BYTE v93[16];
  uint64_t v94[2];
  char v95;
  _QWORD *v96;
  char **v97;
  void *v98;
  uint64_t v99;
  _BYTE v100[32];
  void *v101;
  uint64_t v102;
  _BYTE v103[256];
  void *v104;
  void *v105;
  uint64_t v106;
  int v107;
  _QWORD v108[64];

  v108[62] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 8);
  if (!v3)
    return;
  v6 = *(_QWORD *)a1;
  v74 = *(_QWORD *)a1 + 96 * v3;
  v75 = a1 + 400;
  v72 = a3 + 16;
  do
  {
    v94[0] = a2;
    v94[1] = 0;
    v95 = 0;
    v89 = v93;
    v90 = v93;
    v91 = 2;
    v92 = 0;
    v7 = *(unsigned int *)(v6 + 16);
    v8 = *(_QWORD *)v6 + 16 * v7;
    if (*(_DWORD *)(v6 + 8))
    {
      if (*(_DWORD *)(v6 + 16))
      {
        v10 = 16 * v7;
        v9 = *(uint64_t **)v6;
        while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v9 += 2;
          v10 -= 16;
          if (!v10)
            goto LABEL_9;
        }
      }
      else
      {
        v9 = *(uint64_t **)v6;
      }
    }
    else
    {
LABEL_9:
      v9 = (uint64_t *)(*(_QWORD *)v6 + 16 * v7);
    }
    v11 = *(_QWORD *)v6 + 16 * v7;
LABEL_11:
    while (v9 != (uint64_t *)v11)
    {
      v12 = v9 + 2;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v89, *v9);
      v9 = (uint64_t *)v8;
      if (v12 != (uint64_t *)v8)
      {
        v9 = v12;
        while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v9 += 2;
          if (v9 == (uint64_t *)v8)
          {
            v9 = (uint64_t *)v8;
            goto LABEL_11;
          }
        }
      }
    }
    v97 = &v89;
    v84 = (unint64_t *)v88;
    v85 = (unint64_t *)v88;
    v86 = 2;
    v87 = 0;
    v13 = *(unsigned int *)(v6 + 32);
    if ((_DWORD)v13)
    {
      v17 = *(uint64_t **)(v6 + 24);
      v18 = 8 * v13;
      do
      {
        v19 = *v17++;
        v20 = sub_1C5F83728(v19);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v84, v20);
        v18 -= 8;
      }
      while (v18);
      v15 = v84;
      v16 = v85;
      LODWORD(v13) = HIDWORD(v86);
      v14 = v86;
    }
    else
    {
      v14 = 2;
      v15 = (unint64_t *)v88;
      v16 = (unint64_t *)v88;
    }
    v101 = v103;
    v102 = 0x2000000000;
    v79 = v83;
    v80 = v83;
    v81 = 32;
    v82 = 0;
    if (v16 == v15)
      v13 = v13;
    else
      v13 = v14;
    v21 = &v16[v13];
    if ((_DWORD)v13)
    {
      v22 = 8 * v13;
      while (*v16 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v16;
        v22 -= 8;
        if (!v22)
        {
          v16 = v21;
          break;
        }
      }
    }
    v104 = &v106;
    v105 = (void *)0x4000000000;
    sub_1C618F808((unsigned int *)&v104, v16, v21, v21);
    while ((_DWORD)v105)
    {
      v23 = *((_QWORD *)v104 + v105 - 1);
      LODWORD(v105) = (_DWORD)v105 - 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v79, v23);
      if (v24)
      {
        v25 = (uint64_t *)sub_1C4ECA3D4(v75, v23);
        v26 = sub_1C4ECA658(v75, v23);
        if (v26)
        {
          v27 = 8 * v26;
          do
          {
            v28 = *v25;
            v29 = (char *)sub_1C477672C((uint64_t)&v89, *v25);
            if (v90 == v89)
              v30 = (uint64_t *)((char *)&v91 + 4);
            else
              v30 = &v91;
            if (v29 == &v90[8 * *(unsigned int *)v30])
            {
              v31 = v105;
              if (v105 >= (unint64_t)HIDWORD(v105))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, (uint64_t)&v106, v105 + 1, 8);
                v31 = v105;
              }
              *((_QWORD *)v104 + v31) = v28;
              LODWORD(v105) = (_DWORD)v105 + 1;
            }
            ++v25;
            v27 -= 8;
          }
          while (v27);
        }
      }
    }
    if (v104 != &v106)
      free(v104);
    v96 = &v79;
    v95 = 1;
    sub_1C4ED0454(v94, (uint64_t *)&v101);
    v98 = v100;
    v99 = 0x400000000;
    if ((_DWORD)v102)
    {
      v32 = (uint64_t ***)v101;
      v33 = (uint64_t ***)((char *)v101 + 8 * v102);
      while (1)
      {
        v78 = 0;
        v78 = *v32;
        sub_1C4D8ADA0((uint64_t)&v104, v78, (uint64_t)v78[6], 0, 0, 0);
        v35 = *(_QWORD *)(v6 + 80);
        v34 = *(_QWORD *)(v6 + 88);
        v77 = 261;
        v76[0] = *(_QWORD *)(v6 + 72);
        v76[1] = v35;
        v36 = sub_1C4867E94((uint64_t)&v104, v34, 0, (uint64_t)v76);
        v37 = *(_DWORD *)(v6 + 16);
        if (!v37)
          break;
        v38 = v37 - 1;
        v39 = ((v78 >> 4) ^ (v78 >> 9)) & v38;
        v40 = (uint64_t ***)(*(_QWORD *)v6 + 16 * v39);
        v41 = *v40;
        if (v78 != *v40)
        {
          v42 = 0;
          v43 = 1;
          while (v41 != (uint64_t **)-4096)
          {
            if (v42)
              v44 = 0;
            else
              v44 = v41 == (uint64_t **)-8192;
            if (v44)
              v42 = v40;
            v45 = v39 + v43++;
            v39 = v45 & v38;
            v40 = (uint64_t ***)(*(_QWORD *)v6 + 16 * v39);
            v41 = *v40;
            if (v78 == *v40)
              goto LABEL_63;
          }
          if (v42)
            v46 = v42;
          else
            v46 = v40;
          goto LABEL_62;
        }
LABEL_63:
        v40[1] = (uint64_t **)v36;
        v47 = v99;
        if (v99 >= (unint64_t)HIDWORD(v99))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v100, v99 + 1, 8);
          v47 = v99;
        }
        *((_QWORD *)v98 + v47) = v36;
        LODWORD(v99) = v99 + 1;
        if (a3)
        {
          v48 = *(unsigned int *)(a3 + 8);
          if (v48 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v72, v48 + 1, 8);
            v48 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v48) = v36;
          ++*(_DWORD *)(a3 + 8);
        }
        if (v104 != &v106)
          free(v104);
        if (++v32 == v33)
        {
          if ((_DWORD)v99)
          {
            v49 = (llvm::PHINode **)v98;
            v50 = (llvm::PHINode **)((char *)v98 + 8 * v99);
            do
            {
              v51 = *v49;
              v52 = *((_QWORD *)*v49 + 5);
              v53 = (uint64_t *)sub_1C4ECA3D4(v75, v52);
              v54 = sub_1C4ECA658(v75, v52);
              if (v54)
              {
                v55 = 8 * v54;
                do
                {
                  v56 = *v53++;
                  v57 = llvm::SSAUpdaterBulk::computeValueAt(a1, v56, v6, a2);
                  sub_1C477667C(v51, v57, v56);
                  v55 -= 8;
                }
                while (v55);
              }
              ++v49;
            }
            while (v49 != v50);
          }
          goto LABEL_80;
        }
      }
      v46 = 0;
LABEL_62:
      v40 = (uint64_t ***)sub_1C4ECCA58(v6, (uint64_t)&v78, (uint64_t *)&v78, v46);
      *v40 = v78;
      v40[1] = 0;
      goto LABEL_63;
    }
LABEL_80:
    v104 = v108;
    v105 = v108;
    v106 = 4;
    v107 = 0;
    v58 = *(unsigned int *)(v6 + 32);
    if (!(_DWORD)v58)
      goto LABEL_96;
    v59 = *(uint64_t **)(v6 + 24);
    v60 = 8 * v58;
    do
    {
      v61 = *v59;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v104, *v59);
      if (!v62)
        goto LABEL_93;
      v63 = sub_1C5F83728(v61);
      v65 = (uint64_t *)llvm::SSAUpdaterBulk::computeValueAt(a1, v63, v6, a2);
      v66 = *(llvm::ValueHandleBase **)v61;
      v67 = (llvm::ValueHandleBase *)v65;
      if (*(uint64_t **)v61 != v65)
      {
        if ((*((_BYTE *)v66 + 17) & 1) == 0)
          goto LABEL_87;
        llvm::ValueHandleBase::ValueIsRAUWd(v66, (llvm::Value *)v65, v64);
        v67 = *(llvm::ValueHandleBase **)v61;
      }
      if (v67)
      {
LABEL_87:
        **(_QWORD **)(v61 + 16) = *(_QWORD *)(v61 + 8);
        v68 = *(_QWORD *)(v61 + 8);
        if (v68)
          *(_QWORD *)(v68 + 16) = *(_QWORD *)(v61 + 16);
      }
      *(_QWORD *)v61 = v65;
      if (v65)
      {
        v71 = v65[1];
        v70 = v65 + 1;
        v69 = v71;
        *(_QWORD *)(v61 + 8) = v71;
        if (v71)
          *(_QWORD *)(v69 + 16) = v61 + 8;
        *(_QWORD *)(v61 + 16) = v70;
        *v70 = v61;
      }
LABEL_93:
      ++v59;
      v60 -= 8;
    }
    while (v60);
    if (v105 != v104)
      free(v105);
LABEL_96:
    if (v98 != v100)
      free(v98);
    if (v80 != v79)
      free(v80);
    if (v101 != v103)
      free(v101);
    if (v85 != v84)
      free(v85);
    if (v90 != v89)
      free(v90);
    v6 += 96;
  }
  while (v6 != v74);
}

uint64_t sub_1C5F83728(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 && *(_BYTE *)(v1 + 16) == 83)
  {
    v2 = *(_DWORD *)(v1 + 20);
    if ((v2 & 0x40000000) != 0)
      v3 = *(_QWORD *)(v1 - 8);
    else
      v3 = v1 - 32 * (v2 & 0x7FFFFFF);
    v4 = v3 + 32 * *(unsigned int *)(v1 + 60) + 8 * ((unint64_t)(a1 - v3) >> 5);
  }
  else
  {
    v4 = v1 + 40;
  }
  return *(_QWORD *)v4;
}

_QWORD *sub_1C5F83778(_QWORD *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 5)
    free(v2);
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

unint64_t sub_1C5F837B8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 96 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C63B65B0(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C63B65B0(a1, v5);
    }
  }
  return a2;
}

void llvm::applyFlowInference(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *i;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  char *v96;
  int v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  BOOL v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void **v118;
  void **v119;
  _QWORD *v120;
  unint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t **v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t *v144;
  uint64_t *v145;
  double *v146;
  double v147;
  double v148;
  uint64_t v149;
  double *v150;
  uint64_t v151;
  double v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  char *v158;
  unint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t **v174;
  uint64_t *v175;
  uint64_t *v176;
  _QWORD *v177;
  uint64_t v178;
  char *v179;
  _QWORD *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  char v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t **v189;
  uint64_t *v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  unint64_t v210;
  unint64_t v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  char *v224;
  char *v225;
  char *v226;
  char *v227;
  uint64_t v228;
  unint64_t *v229;
  BOOL v230;
  _QWORD *v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  void *v247;
  char *v248;
  uint64_t v249;
  void *v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t *j;
  uint64_t **v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t *v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t *v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  int v277;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  char *v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  char *v292;
  uint64_t *v293;
  uint64_t *v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t *v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  size_t v308;
  void *v309;
  uint64_t *v310;
  uint64_t *v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  char *v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  BOOL v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  char *v329;
  char *v330;
  char *v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  unint64_t v340;
  int64_t v341;
  unint64_t v342;
  char *v343;
  uint64_t *v344;
  uint64_t *v345;
  unint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t *k;
  uint64_t v350;
  uint64_t *v351;
  uint64_t *v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t **v357;
  uint64_t **v358;
  uint64_t v359;
  unint64_t v360;
  void *v361;
  uint64_t *v362;
  uint64_t *__srca;
  char *__srcb;
  void *v366;
  void *v367;
  uint64_t *v368;
  uint64_t __p;
  void *__pa;
  char *__pb;
  _BYTE *__pc;
  uint64_t __pd;
  uint64_t *v374;
  void *v375[2];
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  unint64_t v380;
  void *v381;
  int v382[2];
  uint64_t v383;
  char *v384;
  char *v385;
  unint64_t v386[4];
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  int v391;
  uint64_t v392;

  v392 = *MEMORY[0x1E0C80C00];
  v380 = 0;
  v378 = 0u;
  v379 = 0u;
  v376 = 0u;
  v377 = 0u;
  *(_OWORD *)v375 = 0u;
  v2 = *a1;
  v1 = a1[1];
  v3 = (v1 - *a1) / 88;
  v4 = *a1 + 88 * a1[6];
  v6 = *(_QWORD *)(v4 + 8);
  v5 = (_QWORD *)(v4 + 8);
  if (!v6)
    *v5 = 1;
  v366 = (void *)(3 * v3 + 2);
  *(_QWORD *)&v378 = v366;
  *((_QWORD *)&v378 + 1) = 3 * v3 + 3;
  v359 = 3 * v3;
  v361 = (void *)*((_QWORD *)&v378 + 1);
  v7 = 3 * v3 + 4;
  if (3 * v3 == -4)
  {
    v9 = 0;
    v8 = 0;
    v11 = 0;
    v12 = 0;
    v10 = 0;
    v375[0] = 0;
    v375[1] = 0;
    *(_QWORD *)&v376 = 0;
    *((_QWORD *)&v388 + 1) = 0;
    *(_QWORD *)&v389 = 0;
  }
  else
  {
    if (v7 >= 0x38E38E38E38E38FLL)
      goto LABEL_494;
    v8 = (char *)operator new(72 * v7);
    bzero(v8, 72 * ((216 * v3 + 216) / 0x48) + 72);
    v9 = &v8[72 * ((216 * v3 + 216) / 0x48) + 72];
    v375[0] = v8;
    v375[1] = v9;
    *(_QWORD *)&v376 = &v8[72 * v7];
    *((_QWORD *)&v388 + 1) = 0;
    *(_QWORD *)&v389 = 0;
    v10 = (char *)operator new(24 * v7);
    v11 = &v10[24 * v7];
    bzero(v10, 24 * ((72 * v3 + 72) / 0x18) + 24);
    v12 = &v10[24 * ((72 * v3 + 72) / 0x18) + 24];
  }
  *((_QWORD *)&v376 + 1) = v10;
  *(_QWORD *)&v377 = v12;
  *((_QWORD *)&v377 + 1) = v11;
  *(_QWORD *)&v389 = 0;
  v388 = 0uLL;
  sub_1C5F858DC((void **)&v388);
  if (byte_1ED827F78)
  {
    if (3 * v3 == -4)
    {
      v15 = 0;
      v14 = 0;
    }
    else
    {
      v13 = 3 * v7;
      v14 = (char *)operator new(8 * v13);
      v7 = (unint64_t)&v14[8 * v13];
      bzero(v14, 24 * ((72 * v3 + 72) / 0x18) + 24);
      v15 = &v14[24 * ((72 * v3 + 72) / 0x18) + 24];
    }
    *(_QWORD *)&v379 = v14;
    *((_QWORD *)&v379 + 1) = v15;
    v380 = v7;
    *(_QWORD *)&v389 = 0;
    v388 = 0uLL;
    sub_1C5F858DC((void **)&v388);
  }
  if (v1 != v2)
  {
    v16 = 0;
    if (v3 <= 1)
      v17 = 1;
    else
      v17 = v3;
    v18 = 40;
    while (1)
    {
      v19 = *a1;
      v20 = *a1 + v18;
      v21 = *(_QWORD *)(v20 - 32);
      if (v21)
      {
        sub_1C5F855AC((uint64_t)v375, (uint64_t)v366, v16 + 1, v21, 0);
        sub_1C5F855AC((uint64_t)v375, v16, (uint64_t)v361, *(_QWORD *)(v20 - 32), 0);
      }
      if (*(_QWORD *)(v20 + 24) == *(_QWORD *)(v20 + 32))
        break;
      if (*(_QWORD *)(v19 + v18) == *(_QWORD *)(v19 + v18 + 8))
      {
        v22 = v16 + 1;
        v23 = v359 + 1;
LABEL_23:
        sub_1C5F855AC((uint64_t)v375, v22, v23, 0x4000000000000, 0);
      }
      if (*(_BYTE *)(v19 + v18 - 24))
      {
        v24 = 0;
        __p = 0;
      }
      else
      {
        if (*(_QWORD *)(v20 - 32))
          v25 = (int *)&unk_1ED8280F8;
        else
          v25 = &dword_1ED828278;
        if (*(_QWORD *)(v20 + 24) == *(_QWORD *)(v20 + 32))
        {
          v24 = dword_1ED828338;
          __p = dword_1ED8283F8;
        }
        else
        {
          __p = dword_1ED8281B8;
          v24 = *v25;
        }
      }
      v26 = v24;
      v27 = *(unsigned __int8 *)(v19 + v18 - 8);
      sub_1C5F855AC((uint64_t)v375, v16, v16 + 2, 0x4000000000000, v24);
      sub_1C5F855AC((uint64_t)v375, v16 + 2, v16 + 1, 0x4000000000000, v26);
      if (*(_QWORD *)(v20 - 32))
      {
        if (v27)
          v28 = 0;
        else
          v28 = __p;
        sub_1C5F855AC((uint64_t)v375, v16 + 1, v16 + 2, 0x4000000000000, v28);
        sub_1C5F855AC((uint64_t)v375, v16 + 2, v16, 0x4000000000000, v28);
      }
      v18 += 88;
      v16 += 3;
      if (!--v17)
        goto LABEL_38;
    }
    v22 = v359;
    v23 = v16;
    goto LABEL_23;
  }
LABEL_38:
  v29 = a1[3];
  v30 = a1[4];
  while (v29 != v30)
  {
    v31 = *(_QWORD *)(v29 + 8);
    if (*(_QWORD *)v29 != v31)
      sub_1C5F855AC((uint64_t)v375, 3 * *(_QWORD *)v29 + 1, 3 * v31, 0x4000000000000, (unint64_t)*(unsigned __int8 *)(v29 + 24) << 30);
    v29 += 32;
  }
  sub_1C5F855AC((uint64_t)v375, v359 + 1, v359, 0x4000000000000, 0);
LABEL_44:
  for (i = v8; i != v9; i += 72)
  {
    *(_QWORD *)i = 0x4000000000000;
    *((_QWORD *)i + 1) = -1;
    *((_QWORD *)i + 2) = -1;
    i[24] = 0;
  }
  v389 = 0u;
  v390 = 0u;
  v388 = 0u;
  sub_1C51DF784((uint64_t)&v388, &v378);
  __pa = (void *)v378;
  v33 = &v8[72 * v378];
  *(_QWORD *)v33 = 0;
  v33[24] = 1;
  v34 = *((_QWORD *)&v390 + 1);
  if (*((_QWORD *)&v390 + 1))
  {
    do
    {
      v35 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v388 + 1) + (((unint64_t)v390 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v390 & 0x1FF));
      *(_QWORD *)&v390 = v390 + 1;
      *((_QWORD *)&v390 + 1) = v34 - 1;
      if ((unint64_t)v390 >= 0x400)
      {
        operator delete(**((void ***)&v388 + 1));
        *((_QWORD *)&v388 + 1) += 8;
        *(_QWORD *)&v390 = v390 - 512;
      }
      v8[72 * v35 + 24] = 0;
      v36 = (void *)*((_QWORD *)&v378 + 1);
      v37 = *(_QWORD *)&v8[72 * *((_QWORD *)&v378 + 1)];
      if (byte_1ED827F78)
        v38 = 0;
      else
        v38 = v37 == 0;
      if (v38)
        break;
      if (*(_QWORD *)&v8[72 * v35] <= v37)
      {
        v39 = (uint64_t *)(*((_QWORD *)&v376 + 1) + 24 * v35);
        v40 = *v39;
        if (v39[1] != *v39)
        {
          v41 = 0;
          v42 = 0;
          do
          {
            v43 = (_QWORD *)(v40 + v41);
            if (v43[2] < v43[1])
            {
              v386[0] = v43[3];
              v44 = *v43 + *(_QWORD *)&v8[72 * v35];
              v45 = &v8[72 * v386[0]];
              if (*(_QWORD *)v45 > v44)
              {
                *(_QWORD *)v45 = v44;
                *(_QWORD *)&v8[72 * v386[0] + 8] = v35;
                *(_QWORD *)&v8[72 * v386[0] + 16] = v42;
                v46 = v386[0];
                if (!v8[72 * v386[0] + 24])
                {
                  sub_1C51DF784((uint64_t)&v388, v386);
                  v8[72 * v46 + 24] = 1;
                }
              }
            }
            ++v42;
            v40 = *v39;
            v41 += 56;
          }
          while (v42 < 0x6DB6DB6DB6DB6DB7 * ((v39[1] - *v39) >> 3));
        }
      }
      v34 = *((_QWORD *)&v390 + 1);
    }
    while (*((_QWORD *)&v390 + 1));
  }
  else
  {
    v36 = (void *)*((_QWORD *)&v378 + 1);
  }
  v47 = *(_QWORD *)&v8[72 * (_QWORD)v36];
  sub_1C484143C((uint64_t)&v388);
  if (v47 != 0x4000000000000)
  {
    v48 = 0x4000000000000;
    if (v36 != __pa)
    {
      do
      {
        v49 = &v8[72 * (_QWORD)v36];
        v36 = (void *)*((_QWORD *)v49 + 1);
        v50 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 24 * (_QWORD)v36) + 56 * *((_QWORD *)v49 + 2);
        v51 = *(_QWORD *)(v50 + 8) - *(_QWORD *)(v50 + 16);
        if (v51 < v48)
          v48 = v51;
      }
      while (v36 != __pa);
      goto LABEL_71;
    }
    while (1)
    {
      if (!byte_1ED827F78)
      {
LABEL_224:
        v200 = *((_QWORD *)&v378 + 1);
        v199 = v378;
        if (*((_QWORD *)&v378 + 1) != (_QWORD)v378)
        {
          v201 = (char *)v375[0];
          v202 = *((_QWORD *)&v376 + 1);
          v203 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 24 * *((_QWORD *)&v378 + 1));
          do
          {
            v204 = &v201[72 * v200];
            v200 = *((_QWORD *)v204 + 1);
            v205 = *(_QWORD *)(v202 + 24 * v200);
            v206 = v205 + 56 * *((_QWORD *)v204 + 2);
            v207 = *(_QWORD *)(v206 + 32);
            *(_QWORD *)(v206 + 16) += v48;
            *(_QWORD *)(v203 + 56 * v207 + 16) -= v48;
            v203 = v205;
          }
          while (v200 != v199);
        }
LABEL_70:
        v8 = (char *)v375[0];
        v9 = (char *)v375[1];
        goto LABEL_44;
      }
      v52 = v48 <= 1 ? 1 : v48 >> 1;
      v54 = (char *)v375[0];
      v53 = (char *)v375[1];
      if (v375[1] == v375[0])
      {
        v389 = 0u;
        v390 = 0u;
        v388 = 0u;
        v57 = *((_QWORD *)&v378 + 1);
      }
      else
      {
        v55 = 0;
        v56 = ((char *)v375[1] - (char *)v375[0]) / 72;
        v57 = *((_QWORD *)&v378 + 1);
        v58 = *((_QWORD *)&v376 + 1);
        v59 = *((_QWORD *)v375[0] + 9 * *((_QWORD *)&v378 + 1));
        if (v56 <= 1)
          v56 = 1;
        do
        {
          v60 = *(_QWORD *)&v54[72 * v55];
          if (v60 <= v59)
          {
            v61 = (uint64_t *)(v58 + 24 * v55);
            v62 = *v61;
            v63 = v61[1];
            if (v62 != v63)
            {
              v64 = v378;
              do
              {
                v65 = 0;
                if (v55 != v57)
                {
                  v66 = *(_QWORD *)(v62 + 24);
                  if (v66 != v64)
                  {
                    v67 = *(_QWORD *)&v54[72 * v66];
                    if (v67 <= v59 && v67 == *(_QWORD *)v62 + v60)
                    {
                      v68 = *(_QWORD *)(v62 + 8);
                      v69 = *(_QWORD *)(v62 + 16);
                      v65 = v68 > v69 && v68 - v69 >= v52;
                    }
                    else
                    {
                      v65 = 0;
                    }
                  }
                }
                *(_BYTE *)(v62 + 40) = v65;
                v62 += 56;
              }
              while (v62 != v63);
            }
          }
          ++v55;
        }
        while (v55 != v56);
        v389 = 0u;
        v390 = 0u;
        v70 = v54;
        v388 = 0u;
        do
        {
          v70[24] = 0;
          *((_QWORD *)v70 + 7) = 0;
          *((_QWORD *)v70 + 8) = 0;
          *((_QWORD *)v70 + 6) = 0;
          v70 += 72;
        }
        while (v70 != v53);
      }
      v54[72 * v57 + 24] = 1;
      LODWORD(v386[0]) = 0;
      sub_1C5F85948((uint64_t)&v388, &v378, (int *)v386);
      *(_QWORD *)&v54[72 * v378 + 48] = 1;
      v71 = *((_QWORD *)&v390 + 1);
      if (!*((_QWORD *)&v390 + 1))
        break;
      __pb = 0;
      v72 = 0;
      v73 = 0;
      v74 = 1;
      do
      {
        v75 = v390 + v71 - 1;
        v76 = *(_QWORD *)(*((_QWORD *)&v388 + 1) + ((v75 >> 5) & 0x7FFFFFFFFFFFFF8));
        v77 = v76 + 16 * v75;
        v78 = *(_QWORD *)(v76 + 16 * (v390 + v71 - 1));
        v81 = *(_QWORD *)(v77 + 8);
        v79 = (_QWORD *)(v77 + 8);
        v80 = v81;
        v82 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 24 * v78);
        if (v81 >= 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*((_QWORD *)&v376 + 1) + 24 * v78 + 8) - v82) >> 3))
        {
          *((_QWORD *)&v390 + 1) = v71 - 1;
          if ((_QWORD)v389 == *((_QWORD *)&v388 + 1))
            v94 = 0;
          else
            v94 = 32 * (v389 - *((_QWORD *)&v388 + 1)) - 1;
          if ((unint64_t)(v94 - (v71 + v390) + 1) >= 0x200)
          {
            operator delete(*(void **)(v389 - 8));
            *(_QWORD *)&v389 = v389 - 8;
          }
          v95 = v375[0];
          if (*((_BYTE *)v375[0] + 72 * v78 + 24))
          {
            *((_QWORD *)v375[0] + 9 * v78 + 7) = ++v74;
            if (v78 != (_QWORD)v378)
              v95[72
                * *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v388 + 1)
                                        + (((unint64_t)(*((_QWORD *)&v390 + 1) + v390 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * (BYTE8(v390) + v390 - 1))
                + 24] = 1;
            if (v72 >= v73)
            {
              v100 = (v72 - __pb) >> 3;
              v101 = v100 + 1;
              if ((unint64_t)(v100 + 1) >> 61)
                goto LABEL_494;
              if ((v73 - __pb) >> 2 > v101)
                v101 = (v73 - __pb) >> 2;
              if ((unint64_t)(v73 - __pb) >= 0x7FFFFFFFFFFFFFF8)
                v102 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v102 = v101;
              if (v102)
              {
                if (v102 >> 61)
                  goto LABEL_495;
                v103 = (char *)operator new(8 * v102);
              }
              else
              {
                v103 = 0;
              }
              v104 = &v103[8 * v100];
              *(_QWORD *)v104 = v78;
              v105 = v104 + 8;
              while (v72 != __pb)
              {
                v106 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v104 - 1) = v106;
                v104 -= 8;
              }
              v73 = &v103[8 * v102];
              if (__pb)
                operator delete(__pb);
              v72 = v105;
              __pb = v104;
            }
            else
            {
              *(_QWORD *)v72 = v78;
              v72 += 8;
            }
          }
          else
          {
            *((_QWORD *)v375[0] + 9 * v78 + 6) = 0;
          }
        }
        else
        {
          v83 = v82 + 56 * v80;
          v86 = *(_QWORD *)(v83 + 24);
          v84 = v83 + 24;
          v85 = v86;
          v87 = v375[0];
          *v79 = v80 + 1;
          if (*(_BYTE *)(v84 + 16))
          {
            v88 = &v87[72 * v85];
            v90 = *((_QWORD *)v88 + 6);
            v89 = v88 + 48;
            if (v90
              || (v91 = &v87[72 * v85], v93 = *((_QWORD *)v91 + 8), v92 = v91 + 64, v93 >= dword_1ED828038))
            {
              v96 = &v87[72 * v85];
              v97 = v96[24];
              v98 = *((_QWORD *)v96 + 7);
              if (v97)
                v99 = v98 == 0;
              else
                v99 = 1;
              if (!v99)
                v87[72 * v78 + 24] = 1;
            }
            else
            {
              *v89 = ++v74;
              LODWORD(v386[0]) = 0;
              sub_1C5F85948((uint64_t)&v388, (_QWORD *)v84, (int *)v386);
              ++*v92;
            }
          }
        }
        v71 = *((_QWORD *)&v390 + 1);
      }
      while (*((_QWORD *)&v390 + 1));
      v107 = v72 - 8;
      v108 = __pb;
      v109 = __pb == v72 || __pb >= v107;
      if (!v109)
      {
        v110 = __pb + 8;
        do
        {
          v111 = *((_QWORD *)v110 - 1);
          *((_QWORD *)v110 - 1) = *(_QWORD *)v107;
          *(_QWORD *)v107 = v111;
          v107 -= 8;
          v109 = v110 >= v107;
          v110 += 8;
        }
        while (!v109);
      }
      if (__pb == v72)
        goto LABEL_196;
      do
      {
        v112 = *(_QWORD *)v108;
        v113 = 3 * *(_QWORD *)v108;
        *(_QWORD *)(v379 + 24 * *(_QWORD *)v108 + 8) = *(_QWORD *)(v379 + 24 * *(_QWORD *)v108);
        v114 = (uint64_t *)(*((_QWORD *)&v376 + 1) + 8 * v113);
        v116 = *v114;
        v115 = v114[1];
        while (v116 != v115)
        {
          if (*(_BYTE *)(v116 + 40))
          {
            if (*((_BYTE *)v375[0] + 72 * v112 + 24))
            {
              v117 = *(_QWORD *)(v116 + 24);
              if (*((_BYTE *)v375[0] + 72 * v117 + 24))
              {
                if (*((_QWORD *)v375[0] + 9 * v117 + 7) < *((_QWORD *)v375[0] + 9 * v112 + 7))
                {
                  v118 = (void **)(v379 + 24 * v112);
                  v119 = v118 + 1;
                  v120 = v118[1];
                  v121 = (unint64_t)v118[2];
                  if ((unint64_t)v120 >= v121)
                  {
                    v123 = ((char *)v120 - (_BYTE *)*v118) >> 3;
                    if ((unint64_t)(v123 + 1) >> 61)
                      goto LABEL_494;
                    v124 = v121 - (_QWORD)*v118;
                    v125 = v124 >> 2;
                    if (v124 >> 2 <= (unint64_t)(v123 + 1))
                      v125 = v123 + 1;
                    if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
                      v126 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v126 = v125;
                    if (v126)
                    {
                      if (v126 >> 61)
                        goto LABEL_495;
                      v127 = (char *)operator new(8 * v126);
                    }
                    else
                    {
                      v127 = 0;
                    }
                    v128 = &v127[8 * v123];
                    *(_QWORD *)v128 = v116;
                    v122 = v128 + 8;
                    v129 = (char *)*v119;
                    v130 = (char *)*v118;
                    if (*v119 != *v118)
                    {
                      do
                      {
                        v131 = *((_QWORD *)v129 - 1);
                        v129 -= 8;
                        *((_QWORD *)v128 - 1) = v131;
                        v128 -= 8;
                      }
                      while (v129 != v130);
                      v129 = (char *)*v118;
                    }
                    *v118 = v128;
                    *v119 = v122;
                    v118[2] = &v127[8 * v126];
                    if (v129)
                      operator delete(v129);
                  }
                  else
                  {
                    *v120 = v116;
                    v122 = v120 + 1;
                  }
                  *v119 = v122;
                }
              }
            }
          }
          v116 += 56;
        }
        v108 += 8;
      }
      while (v108 != v72);
      sub_1C5F85CA0((uint64_t)&v388);
      v132 = v375[0];
      v133 = v379;
      v134 = __pb;
      v135 = __pb;
      do
      {
        v136 = (char *)&v132[9 * *(_QWORD *)v135];
        v137 = (uint64_t **)(v133 + 24 * *(_QWORD *)v135);
        *((_QWORD *)v136 + 4) = 0;
        *((_QWORD *)v136 + 5) = 0;
        v138 = *v137;
        v139 = v137[1];
        while (v138 != v139)
        {
          v140 = *v138++;
          *(_QWORD *)(v140 + 48) = 0;
        }
        v135 += 8;
      }
      while (v135 != v72);
      v141 = v378;
      v132[9 * (_QWORD)v378 + 4] = 0x3FF0000000000000;
      v142 = 0x4000000000000;
      v143 = __pb;
      do
      {
        v145 = *(uint64_t **)(v133 + 24 * *(_QWORD *)v143);
        v144 = *(uint64_t **)(v133 + 24 * *(_QWORD *)v143 + 8);
        if (v145 != v144)
        {
          v146 = (double *)&v132[9 * *(_QWORD *)v143 + 4];
          v147 = (double)(unint64_t)(v144 - v145);
          do
          {
            v148 = *v146 / v147;
            v149 = *v145;
            v150 = (double *)&v132[9 * *(_QWORD *)(*v145 + 24)];
            v150[4] = v148 + v150[4];
            v151 = *(_QWORD *)(v149 + 8);
            if (v151 != 0x4000000000000)
            {
              v152 = (double)(v151 - *(_QWORD *)(v149 + 16)) / v148;
              if (v142 >= (unint64_t)v152)
                v142 = (unint64_t)v152;
            }
            ++v145;
          }
          while (v145 != v144);
        }
        v143 += 8;
      }
      while (v143 != v72);
      v153 = *((_QWORD *)&v378 + 1);
      if (!v142)
      {
LABEL_209:
        v185 = 0;
        goto LABEL_217;
      }
      v132[9 * v141 + 5] = v142;
      v154 = __pb;
      do
      {
        v155 = *(_QWORD *)v154;
        if (*(_QWORD *)v154 == v153)
          break;
        v157 = *(uint64_t **)(v133 + 24 * v155);
        v156 = *(uint64_t **)(v133 + 24 * v155 + 8);
        if (v156 != v157)
        {
          v158 = (char *)&v132[9 * v155];
          v160 = *((_QWORD *)v158 + 5);
          v159 = (unint64_t *)(v158 + 40);
          v161 = (v160 + v156 - v157 - 1) / (unint64_t)(v156 - v157);
          do
          {
            v163 = *v157++;
            v162 = v163;
            v165 = *(_QWORD *)(v163 + 16);
            v164 = *(_QWORD *)(v163 + 24);
            v166 = *v159;
            if (v161 < *v159)
              v166 = v161;
            if (*(_QWORD *)(v162 + 8) - v165 < v166)
              v166 = *(_QWORD *)(v162 + 8) - v165;
            v132[9 * v164 + 5] += v166;
            *v159 -= v166;
            *(_QWORD *)(v162 + 48) += v166;
          }
          while (v157 != v156);
        }
        v154 += 8;
      }
      while (v154 != v72);
      v167 = 0;
LABEL_197:
      v132[9 * v153 + 5] = 0;
      v169 = (v72 - v134) >> 3;
      v170 = v169 - 1;
      if (v169 != 1)
      {
        v171 = v379;
        do
        {
          v172 = &v134[8 * v169];
          v169 = v170;
          v173 = *((_QWORD *)v172 - 2);
          v174 = (uint64_t **)(v171 + 24 * v173);
          v175 = *v174;
          v176 = v174[1];
          if (v175 != v176)
          {
            v177 = &v132[9 * v173 + 5];
            do
            {
              v178 = *v175;
              v179 = (char *)&v132[9 * *(_QWORD *)(*v175 + 24)];
              v182 = *((_QWORD *)v179 + 5);
              v180 = v179 + 40;
              v181 = v182;
              if (v182)
              {
                v183 = *(_QWORD *)(v178 + 48);
                if (v183 >= v181)
                  v184 = v181;
                else
                  v184 = *(_QWORD *)(v178 + 48);
                *v180 = v181 - v184;
                *v177 += v184;
                *(_QWORD *)(v178 + 48) = v183 - v184;
              }
              ++v175;
            }
            while (v175 != v176);
          }
          v170 = v169 - 1;
        }
        while (v169 != 1);
      }
      if ((v167 & 1) != 0)
        goto LABEL_209;
      v185 = 0;
      v186 = v379;
      v187 = *((_QWORD *)&v376 + 1);
      v188 = v134;
      do
      {
        v189 = (uint64_t **)(v186 + 24 * *(_QWORD *)v188);
        v190 = *v189;
        v191 = v189[1];
        while (v190 != v191)
        {
          v192 = *v190;
          v193 = *(_QWORD *)(*v190 + 32);
          v194 = *(_QWORD *)(v187 + 24 * *(_QWORD *)(*v190 + 24));
          v195 = *(_QWORD *)(*v190 + 48);
          *(_QWORD *)(v192 + 16) = *(_QWORD *)(*v190 + 16) + v195;
          *(_QWORD *)(v194 + 56 * v193 + 16) -= v195;
          if (*(_QWORD *)(v192 + 8) == *(_QWORD *)(v192 + 16))
            v185 |= v195 != 0;
          ++v190;
        }
        v188 += 8;
      }
      while (v188 != v72);
LABEL_217:
      v48 = 0x4000000000000;
      while (v153 != v141)
      {
        v196 = (char *)&v132[9 * v153];
        v153 = *((_QWORD *)v196 + 1);
        v197 = *(_QWORD *)(*((_QWORD *)&v376 + 1) + 24 * v153) + 56 * *((_QWORD *)v196 + 2);
        v198 = *(_QWORD *)(v197 + 8) - *(_QWORD *)(v197 + 16);
        if (v198 < v48)
          v48 = v198;
      }
      if (v134)
        operator delete(v134);
      if ((v185 & 1) == 0)
        goto LABEL_224;
LABEL_71:
      if (!v48)
        goto LABEL_70;
    }
    v72 = 0;
LABEL_196:
    sub_1C5F85CA0((uint64_t)&v388);
    v141 = v378;
    v132 = v375[0];
    v168 = (char *)v375[0] + 72 * v378;
    *((_QWORD *)v168 + 4) = 0x3FF0000000000000;
    v153 = *((_QWORD *)&v378 + 1);
    *((_QWORD *)v168 + 5) = 0x4000000000000;
    v167 = 1;
    v134 = v72;
    goto LABEL_197;
  }
  v208 = a1[1] - *a1;
  if (v208)
  {
    v209 = 0;
    v210 = v208 / 88;
    v211 = 3 * v210;
    if (v210 <= 1)
      v210 = 1;
    v367 = (void *)v210;
    do
    {
      v212 = (_BYTE *)*a1;
      v213 = *((_QWORD *)&v376 + 1) + 72 * (_QWORD)v209;
      v214 = *(_QWORD *)(v213 + 24);
      v215 = *(_QWORD *)(v213 + 32);
      if (v214 == v215)
      {
        v228 = 0;
      }
      else
      {
        __pc = (_BYTE *)*a1;
        v216 = 0;
        v217 = 0;
        v218 = 0;
        do
        {
          v219 = *(_QWORD *)(v214 + 16);
          if (v219 >= 1)
          {
            v220 = *(_QWORD *)(v214 + 24);
            if (v217 >= v218)
            {
              v221 = (v217 - v216) >> 4;
              v222 = v221 + 1;
              if ((unint64_t)(v221 + 1) >> 60)
                goto LABEL_494;
              if ((v218 - v216) >> 3 > v222)
                v222 = (v218 - v216) >> 3;
              if ((unint64_t)(v218 - v216) >= 0x7FFFFFFFFFFFFFF0)
                v223 = 0xFFFFFFFFFFFFFFFLL;
              else
                v223 = v222;
              if (v223)
              {
                if (v223 >> 60)
LABEL_495:
                  sub_1C4764EE4();
                v224 = (char *)operator new(16 * v223);
              }
              else
              {
                v224 = 0;
              }
              v225 = &v224[16 * v221];
              *(_QWORD *)v225 = v220;
              *((_QWORD *)v225 + 1) = v219;
              if (v217 == v216)
              {
                v227 = &v224[16 * v221];
              }
              else
              {
                v226 = &v224[16 * v221];
                do
                {
                  v227 = v226 - 16;
                  *((_OWORD *)v226 - 1) = *((_OWORD *)v217 - 1);
                  v217 -= 16;
                  v226 -= 16;
                }
                while (v217 != v216);
              }
              v218 = &v224[16 * v223];
              v217 = v225 + 16;
              if (v216)
                operator delete(v216);
              v216 = v227;
            }
            else
            {
              *(_QWORD *)v217 = v220;
              *((_QWORD *)v217 + 1) = v219;
              v217 += 16;
            }
          }
          v214 += 56;
        }
        while (v214 != v215);
        if (v216 != v217)
        {
          v228 = 0;
          v212 = __pc;
          v229 = (unint64_t *)v216;
          do
          {
            if (*v229 >= v211
              || (0xAAAAAAAAAAAAAAAALL - 0x5555555555555555 * *v229 <= 0x5555555555555554
                ? (v230 = __pc[88 * (_QWORD)v209 + 32] == 0)
                : (v230 = 0),
                  !v230))
            {
              v228 += v229[1];
            }
            v229 += 2;
          }
          while (v229 != (unint64_t *)v217);
          if (!v216)
            goto LABEL_270;
LABEL_269:
          operator delete(v216);
          goto LABEL_270;
        }
        v228 = 0;
        v212 = __pc;
        if (v216)
          goto LABEL_269;
      }
LABEL_270:
      *(_QWORD *)&v212[88 * (_QWORD)v209 + 24] = v228;
      v209 = (char *)v209 + 1;
    }
    while (v209 != v367);
  }
  v231 = (_QWORD *)a1[3];
  v232 = (_QWORD *)a1[4];
  if (v231 != v232)
  {
    v233 = *((_QWORD *)&v376 + 1);
    do
    {
      v234 = v231[1];
      v235 = v233 + 72 * *v231;
      v236 = *(_QWORD *)(v235 + 24);
      v237 = *(_QWORD *)(v235 + 32);
      if (*v231 == v234)
      {
        if (v236 == v237)
        {
          v238 = 0;
        }
        else
        {
          v238 = 0;
          do
          {
            if (*(_QWORD *)(v236 + 24) == 3 * *v231 + 2)
              v239 = *(_QWORD *)(v236 + 16);
            else
              v239 = 0;
            v238 += v239;
            v236 += 56;
          }
          while (v236 != v237);
        }
        v240 = v238 & ~(v238 >> 63);
      }
      else if (v236 == v237)
      {
        v240 = 0;
      }
      else
      {
        v240 = 0;
        v241 = 3 * v234;
        do
        {
          if (*(_QWORD *)(v236 + 24) == v241)
            v242 = *(_QWORD *)(v236 + 16);
          else
            v242 = 0;
          v240 += v242;
          v236 += 56;
        }
        while (v236 != v237);
      }
      v231[2] = v240;
      v231 += 4;
    }
    while (v231 != v232);
  }
  v374 = a1;
  v243 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  *(_QWORD *)&v388 = &v389;
  *((_QWORD *)&v388 + 1) = 0x600000000;
  sub_1C4765AA4((char *)&v388, (v243 + 63) >> 6, 0);
  v391 = v243;
  sub_1C5F85D64((uint64_t)&v374, a1[6], &v388);
  v244 = *a1;
  v245 = a1[1];
  if (v245 == *a1)
  {
    v244 = a1[1];
  }
  else
  {
    v246 = 0;
    do
    {
      if (*(_QWORD *)(v244 + 88 * v246 + 24)
        && ((*(_QWORD *)(v388 + 8 * (v246 >> 6)) >> v246) & 1) == 0)
      {
        sub_1C5F85EC0(v386, &v374, a1[6], v246);
        sub_1C5F85EC0((unint64_t *)&v384, &v374, v246, -1);
        v381 = 0;
        *(_QWORD *)v382 = 0;
        v383 = 0;
        v247 = (void *)v386[0];
        sub_1C4E36820((uint64_t)&v381, 0, (char *)v386[0], (char *)v386[1], (uint64_t)(v386[1] - v386[0]) >> 3);
        v248 = v384;
        sub_1C4E36820((uint64_t)&v381, *(uint64_t *)v382, v384, v385, (v385 - v384) >> 3);
        if (v248)
          operator delete(v248);
        if (v247)
          operator delete(v247);
        v249 = *a1 + 88 * a1[6];
        ++*(_QWORD *)(v249 + 24);
        v250 = v381;
        v251 = *(_QWORD *)v382;
        v252 = (uint64_t *)v381;
        if (v381 != *(void **)v382)
        {
          do
          {
            v253 = *v252++;
            v254 = *(_QWORD *)(v253 + 8);
            ++*(_QWORD *)(v253 + 16);
            ++*(_QWORD *)(*a1 + 88 * v254 + 24);
            sub_1C5F85D64((uint64_t)&v374, v254, &v388);
          }
          while (v252 != (uint64_t *)v251);
        }
        if (v250)
          operator delete(v250);
        v244 = *a1;
        v245 = a1[1];
      }
      ++v246;
    }
    while (v246 < 0x2E8BA2E8BA2E8BA3 * ((v245 - v244) >> 3));
  }
  v255 = a1;
  if ((__int128 *)v388 != &v389)
  {
    free((void *)v388);
    v244 = *a1;
    v245 = a1[1];
  }
  if (v245 == v244)
    goto LABEL_491;
  v256 = 0;
  do
  {
    v257 = v244 + 88 * v256;
    if (*(_BYTE *)(v257 + 16) || !*(_QWORD *)(v244 + 88 * v256 + 24))
      goto LABEL_313;
    v258 = v244 + 88 * v256;
    v261 = *(uint64_t **)(v258 + 40);
    v260 = (uint64_t **)(v258 + 40);
    for (j = v261; ; ++j)
    {
      if (j == v260[1])
        goto LABEL_313;
      if (*(_BYTE *)(v244 + 88 * *(_QWORD *)(*j + 8) + 16))
        break;
    }
    v357 = v260 + 1;
    v358 = v260;
    v360 = v256;
    v262 = 0x2E8BA2E8BA2E8BA3 * ((v245 - v244) >> 3);
    *(_QWORD *)&v388 = &v389;
    *((_QWORD *)&v388 + 1) = 0x600000000;
    sub_1C4765AA4((char *)&v388, (v262 + 63) >> 6, 0);
    v391 = v262;
    v387 = 0u;
    memset(v386, 0, sizeof(v386));
    sub_1C51DF784((uint64_t)v386, (_QWORD *)v257);
    *(_QWORD *)(v388 + 8 * (*(_QWORD *)v257 >> 6)) |= 1 << *(_QWORD *)v257;
    v263 = *((_QWORD *)&v387 + 1);
    if (!*((_QWORD *)&v387 + 1))
    {
      v368 = 0;
      __pd = 0;
      v264 = 0;
      v265 = 0;
      v362 = 0;
      goto LABEL_380;
    }
    v368 = 0;
    __pd = 0;
    v264 = 0;
    v362 = 0;
    __srca = 0;
    v265 = 0;
    do
    {
      v266 = v387;
      v267 = *(_QWORD *)(*(_QWORD *)(v386[1] + ((v266 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v266 & 0x1FF));
      v268 = *v374;
      *(_QWORD *)&v387 = v387 + 1;
      *((_QWORD *)&v387 + 1) = v263 - 1;
      if (v266 + 1 >= 0x400)
      {
        operator delete(*(void **)v386[1]);
        v386[1] += 8;
        *(_QWORD *)&v387 = v387 - 512;
      }
      v269 = v268 + 88 * v267;
      v270 = *(_QWORD *)(v269 + 40);
      v271 = *(_QWORD *)(v269 + 48);
      while (v270 != v271)
      {
        v272 = *(_QWORD **)v270;
        if (!*(_BYTE *)(*(_QWORD *)v270 + 24) || v272[2])
        {
          v273 = v374;
          v274 = *v374;
          v275 = (char *)v272[1];
          v276 = *v374 + 88 * *v272;
          v277 = *(unsigned __int8 *)(*v374 + 88 * (_QWORD)v275 + 16);
          if ((*(_BYTE *)(*v374 + 88 * (_QWORD)v275 + 16) || v276 != v257)
            && (*(_BYTE *)(*v374 + 88 * (_QWORD)v275 + 16) || *(_QWORD *)(v274 + 88 * (_QWORD)v275 + 24) != 0))
          {
            v384 = v275;
            v280 = v275 >> 6;
            v281 = *(_QWORD *)(v388 + 8 * v280);
            if ((v281 & (1 << (char)v275)) != 0)
              goto LABEL_337;
            *(_QWORD *)(v388 + 8 * v280) = v281 | (1 << (char)v275);
            if (v277)
            {
              sub_1C51DF784((uint64_t)v386, &v384);
              v283 = *v273 + 88 * (_QWORD)v275;
              if ((unint64_t)v264 < __pd)
              {
                *v264++ = v283;
                goto LABEL_337;
              }
              v285 = v264 - v368;
              v286 = v285 + 1;
              if ((unint64_t)(v285 + 1) >> 61)
                goto LABEL_494;
              if ((__pd - (uint64_t)v368) >> 2 > v286)
                v286 = (__pd - (uint64_t)v368) >> 2;
              if ((unint64_t)(__pd - (_QWORD)v368) >= 0x7FFFFFFFFFFFFFF8)
                v287 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v287 = v286;
              if (v287)
              {
                if (v287 >> 61)
                  goto LABEL_495;
                v288 = (char *)operator new(8 * v287);
              }
              else
              {
                v288 = 0;
              }
              v293 = (uint64_t *)&v288[8 * v285];
              *v293 = v283;
              v294 = v293 + 1;
              while (v264 != v368)
              {
                v295 = *--v264;
                *--v293 = v295;
              }
              __pd = (uint64_t)&v288[8 * v287];
              if (v368)
                operator delete(v368);
              v368 = v293;
              v264 = v294;
              v282 = v265;
            }
            else
            {
              v284 = v274 + 88 * (_QWORD)v275;
              if (v265 >= __srca)
              {
                v289 = v265 - v362;
                v290 = v289 + 1;
                if ((unint64_t)(v289 + 1) >> 61)
                  goto LABEL_494;
                if (((char *)__srca - (char *)v362) >> 2 > v290)
                  v290 = ((char *)__srca - (char *)v362) >> 2;
                if ((unint64_t)((char *)__srca - (char *)v362) >= 0x7FFFFFFFFFFFFFF8)
                  v291 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v291 = v290;
                if (v291)
                {
                  if (v291 >> 61)
                    goto LABEL_495;
                  v292 = (char *)operator new(8 * v291);
                }
                else
                {
                  v292 = 0;
                }
                v296 = (uint64_t *)&v292[8 * v289];
                *v296 = v284;
                v282 = v296 + 1;
                while (v265 != v362)
                {
                  v297 = *--v265;
                  *--v296 = v297;
                }
                __srca = (uint64_t *)&v292[8 * v291];
                if (v362)
                  operator delete(v362);
                v362 = v296;
              }
              else
              {
                *v265++ = v284;
LABEL_337:
                v282 = v265;
              }
            }
            v265 = v282;
          }
        }
        v270 += 8;
      }
      v263 = *((_QWORD *)&v387 + 1);
    }
    while (*((_QWORD *)&v387 + 1));
LABEL_380:
    sub_1C484143C((uint64_t)v386);
    if ((__int128 *)v388 != &v389)
      free((void *)v388);
    v298 = v368;
    if (v368 != v264 && (unint64_t)((char *)v265 - (char *)v362) <= 8)
    {
      if (v362 == v265)
        v299 = 0;
      else
        v299 = *v362;
      v300 = v368;
      do
      {
        v301 = *(uint64_t **)(*v300 + 40);
        v302 = *(uint64_t **)(*v300 + 48);
        if (v301 == v302)
        {
          if (v299)
            goto LABEL_413;
        }
        else
        {
          v303 = 0;
          v304 = *(uint64_t **)(*v300 + 40);
          do
          {
            v305 = *v304++;
            v303 += sub_1C5F8636C(&v374, v257, v299, v305);
          }
          while (v304 != v302);
          v298 = v368;
          if (v303 == v302 - v301)
            goto LABEL_413;
        }
        ++v300;
      }
      while (v300 != v264);
      v306 = v374[1];
      if (v306 != *v374)
      {
        v307 = (v306 - *v374) / 88;
        if (!(v307 >> 61))
        {
          v308 = 8 * v307;
          v309 = operator new(8 * v307);
          bzero(v309, v308);
          goto LABEL_399;
        }
LABEL_494:
        abort();
      }
      v309 = 0;
LABEL_399:
      v310 = *v358;
      v311 = *v357;
      v312 = v368;
      if (*v358 != *v357)
      {
        do
        {
          v313 = *v310;
          if (!sub_1C5F8636C(&v374, v257, v299, *v310))
            ++*((_QWORD *)v309 + *(_QWORD *)(v313 + 8));
          ++v310;
        }
        while (v310 != v311);
        v312 = v368;
      }
      do
      {
        v314 = *(uint64_t **)(*v312 + 40);
        v315 = *(uint64_t **)(*v312 + 48);
        while (v314 != v315)
        {
          v316 = *v314;
          if (!sub_1C5F8636C(&v374, v257, v299, *v314))
            ++*((_QWORD *)v309 + *(_QWORD *)(v316 + 8));
          ++v314;
        }
        ++v312;
      }
      while (v312 != v264);
      if (*((_QWORD *)v309 + *(_QWORD *)v257))
      {
        operator delete(v309);
        goto LABEL_412;
      }
      v389 = 0u;
      v390 = 0u;
      v388 = 0u;
      sub_1C51DF784((uint64_t)&v388, (_QWORD *)v257);
      v318 = *((_QWORD *)&v390 + 1);
      if (*((_QWORD *)&v390 + 1))
      {
        __srcb = 0;
        v319 = 0;
        v320 = 0;
        do
        {
          v321 = v390;
          v322 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v388 + 1) + ((v321 >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * (v321 & 0x1FF));
          v323 = *v374;
          *(_QWORD *)&v390 = v390 + 1;
          *((_QWORD *)&v390 + 1) = v318 - 1;
          if (v321 + 1 >= 0x400)
          {
            operator delete(**((void ***)&v388 + 1));
            *((_QWORD *)&v388 + 1) += 8;
            *(_QWORD *)&v390 = v390 - 512;
          }
          v324 = v323 + 88 * v322;
          if (v299 && v324 == v299)
            break;
          if (*(_BYTE *)(v323 + 88 * v322 + 16))
            v325 = v324 == v257;
          else
            v325 = 1;
          if (!v325)
          {
            if ((unint64_t)v319 >= v320)
            {
              v355 = v323;
              v356 = v322;
              v326 = (v319 - __srcb) >> 3;
              v327 = v326 + 1;
              if ((unint64_t)(v326 + 1) >> 61)
                goto LABEL_494;
              if ((uint64_t)(v320 - (_QWORD)__srcb) >> 2 > v327)
                v327 = (uint64_t)(v320 - (_QWORD)__srcb) >> 2;
              if (v320 - (unint64_t)__srcb >= 0x7FFFFFFFFFFFFFF8)
                v328 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v328 = v327;
              if (v328)
              {
                if (v328 >> 61)
                  goto LABEL_495;
                v329 = (char *)operator new(8 * v328);
              }
              else
              {
                v329 = 0;
              }
              v330 = &v329[8 * v326];
              *(_QWORD *)v330 = v324;
              v331 = v330 + 8;
              while (v319 != __srcb)
              {
                v332 = *((_QWORD *)v319 - 1);
                v319 -= 8;
                *((_QWORD *)v330 - 1) = v332;
                v330 -= 8;
              }
              v333 = &v329[8 * v328];
              if (__srcb)
                operator delete(__srcb);
              __srcb = v330;
              v319 = v331;
              v320 = (unint64_t)v333;
              v323 = v355;
              v322 = v356;
            }
            else
            {
              *(_QWORD *)v319 = v324;
              v319 += 8;
            }
          }
          v334 = v323 + 88 * v322;
          v335 = *(uint64_t **)(v334 + 40);
          v336 = *(uint64_t **)(v334 + 48);
          while (v335 != v336)
          {
            v337 = *v335;
            if (!sub_1C5F8636C(&v374, v257, v299, *v335))
            {
              v386[0] = *(_QWORD *)(v337 + 8);
              v338 = *((_QWORD *)v309 + v386[0]) - 1;
              *((_QWORD *)v309 + v386[0]) = v338;
              if (!v338)
                sub_1C51DF784((uint64_t)&v388, v386);
            }
            ++v335;
          }
          v318 = *((_QWORD *)&v390 + 1);
        }
        while (*((_QWORD *)&v390 + 1));
      }
      else
      {
        __srcb = 0;
        v319 = 0;
      }
      v339 = (char *)v368;
      v340 = v264 - v368;
      v341 = v319 - __srcb;
      if (v340 == (v319 - __srcb) >> 3)
      {
        if (v340 <= (__pd - (uint64_t)v368) >> 3)
        {
          if (v319 != __srcb)
          {
            memmove(v368, __srcb, v319 - __srcb);
            v339 = (char *)v368;
          }
        }
        else
        {
          if (v368)
          {
            operator delete(v368);
            __pd = 0;
          }
          if ((char *)v264 - (char *)v368 < 0)
            goto LABEL_494;
          v342 = __pd >> 2;
          if (__pd >> 2 <= v340)
            v342 = v264 - v368;
          if ((unint64_t)__pd >= 0x7FFFFFFFFFFFFFF8)
            v342 = 0x1FFFFFFFFFFFFFFFLL;
          if (v342 >> 61)
            goto LABEL_494;
          v339 = (char *)operator new(8 * v342);
          if (v319 != __srcb)
          {
            v343 = v339;
            memcpy(v339, __srcb, v341);
            v339 = v343;
          }
        }
        v368 = (uint64_t *)v339;
        v264 = (uint64_t *)&v339[8 * v340];
      }
      sub_1C484143C((uint64_t)&v388);
      if (__srcb)
        operator delete(__srcb);
      if (v309)
        operator delete(v309);
      v298 = v368;
      if (v340 == v341 >> 3)
      {
        v344 = *v358;
        v345 = *v357;
        if (*v358 == *v357)
        {
          v346 = 0;
        }
        else
        {
          v346 = 0;
          v347 = *v358;
          do
          {
            v348 = *v347;
            if (!sub_1C5F8636C(&v374, v257, v299, *v347))
              v346 += *(_QWORD *)(v348 + 16);
            ++v347;
          }
          while (v347 != v345);
        }
        sub_1C5F863E8((_BOOL8)&v374, v257, v299, v344, v345, v346);
        for (k = v368; k != v264; ++k)
        {
          v350 = *k;
          v351 = *(uint64_t **)(*k + 64);
          v352 = *(uint64_t **)(*k + 72);
          if (v351 == v352)
          {
            v353 = 0;
          }
          else
          {
            v353 = 0;
            do
            {
              v354 = *v351++;
              v353 += *(_QWORD *)(v354 + 16);
            }
            while (v351 != v352);
          }
          *(_QWORD *)(v350 + 24) = v353;
          sub_1C5F863E8((_BOOL8)&v374, v257, v299, *(uint64_t **)(v350 + 40), *(uint64_t **)(v350 + 48), v353);
        }
LABEL_412:
        v298 = v368;
      }
    }
LABEL_413:
    v256 = v360;
    if (v362)
    {
      v317 = v298;
      operator delete(v362);
      v298 = v317;
    }
    if (v298)
      operator delete(v298);
    v255 = v374;
    v244 = *v374;
LABEL_313:
    ++v256;
    v245 = v255[1];
  }
  while (v256 < 0x2E8BA2E8BA2E8BA3 * ((v245 - v244) >> 3));
LABEL_491:
  sub_1C5F858DC((void **)&v379);
  sub_1C5F858DC((void **)&v376 + 1);
  if (v375[0])
  {
    v375[1] = v375[0];
    operator delete(v375[0]);
  }
}

void sub_1C5F855AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char **v31;
  char *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v8 = *(_QWORD *)(a1 + 24);
  v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v8 + 24 * a3 + 8) - *(_QWORD *)(v8 + 24 * a3)) >> 3);
  v10 = (char **)(v8 + 24 * a2);
  v12 = v10 + 1;
  v11 = v10[1];
  v13 = *v10;
  v14 = (v11 - *v10) / 56;
  v15 = (unint64_t)v10[2];
  if ((unint64_t)v11 >= v15)
  {
    v17 = v14 + 1;
    if ((unint64_t)(v14 + 1) > 0x492492492492492)
      goto LABEL_36;
    v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - (_QWORD)v13) >> 3);
    if (2 * v18 > v17)
      v17 = 2 * v18;
    if (v18 >= 0x249249249249249)
      v19 = 0x492492492492492;
    else
      v19 = v17;
    if (v19)
    {
      v48 = a5;
      v49 = (v11 - *v10) / 56;
      v50 = a2;
      if (v19 > 0x492492492492492)
        goto LABEL_37;
      v20 = (char *)operator new(56 * v19);
      v14 = v49;
      a2 = v50;
      a5 = v48;
    }
    else
    {
      v20 = 0;
    }
    v21 = &v20[56 * v14];
    *(_QWORD *)v21 = a5;
    *((_QWORD *)v21 + 1) = a4;
    v22 = &v20[56 * v19];
    *((_QWORD *)v21 + 2) = 0;
    *((_QWORD *)v21 + 3) = a3;
    *((_QWORD *)v21 + 4) = v9;
    v16 = v21 + 56;
    if (v11 != v13)
    {
      do
      {
        v23 = *(_OWORD *)(v11 - 56);
        v24 = *(_OWORD *)(v11 - 40);
        v25 = *(_OWORD *)(v11 - 24);
        *((_QWORD *)v21 - 1) = *((_QWORD *)v11 - 1);
        *(_OWORD *)(v21 - 24) = v25;
        *(_OWORD *)(v21 - 40) = v24;
        *(_OWORD *)(v21 - 56) = v23;
        v21 -= 56;
        v11 -= 56;
      }
      while (v11 != v13);
      v11 = *v10;
    }
    *v10 = v21;
    *v12 = v16;
    v10[2] = v22;
    if (v11)
    {
      v26 = v11;
      v27 = a2;
      v28 = v14;
      v29 = a5;
      operator delete(v26);
      a5 = v29;
      v14 = v28;
      a2 = v27;
    }
  }
  else
  {
    *(_QWORD *)v11 = a5;
    *((_QWORD *)v11 + 1) = a4;
    *((_QWORD *)v11 + 2) = 0;
    *((_QWORD *)v11 + 3) = a3;
    v16 = v11 + 56;
    *((_QWORD *)v11 + 4) = v9;
  }
  v30 = -a5;
  *v12 = v16;
  v31 = (char **)(*(_QWORD *)(a1 + 24) + 24 * a3);
  v33 = v31 + 1;
  v32 = v31[1];
  v34 = (unint64_t)v31[2];
  if ((unint64_t)v32 < v34)
  {
    *(_QWORD *)v32 = v30;
    *((_QWORD *)v32 + 1) = 0;
    *((_QWORD *)v32 + 2) = 0;
    *((_QWORD *)v32 + 3) = a2;
    v35 = v32 + 56;
    *((_QWORD *)v32 + 4) = v14;
    goto LABEL_35;
  }
  v36 = *v31;
  v37 = 0x6DB6DB6DB6DB6DB7 * ((v32 - *v31) >> 3);
  v38 = v37 + 1;
  if ((unint64_t)(v37 + 1) > 0x492492492492492)
LABEL_36:
    abort();
  v39 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v34 - (_QWORD)v36) >> 3);
  if (2 * v39 > v38)
    v38 = 2 * v39;
  if (v39 >= 0x249249249249249)
    v40 = 0x492492492492492;
  else
    v40 = v38;
  if (!v40)
  {
    v43 = 0;
    goto LABEL_30;
  }
  if (v40 > 0x492492492492492)
LABEL_37:
    sub_1C4764EE4();
  v41 = v14;
  v42 = a2;
  v43 = (char *)operator new(56 * v40);
  a2 = v42;
  v14 = v41;
LABEL_30:
  v44 = &v43[56 * v37];
  *(_QWORD *)v44 = v30;
  *((_QWORD *)v44 + 1) = 0;
  *((_QWORD *)v44 + 2) = 0;
  *((_QWORD *)v44 + 3) = a2;
  *((_QWORD *)v44 + 4) = v14;
  v35 = v44 + 56;
  if (v32 != v36)
  {
    do
    {
      v45 = *(_OWORD *)(v32 - 56);
      v46 = *(_OWORD *)(v32 - 40);
      v47 = *(_OWORD *)(v32 - 24);
      *((_QWORD *)v44 - 1) = *((_QWORD *)v32 - 1);
      *(_OWORD *)(v44 - 24) = v47;
      *(_OWORD *)(v44 - 40) = v46;
      *(_OWORD *)(v44 - 56) = v45;
      v44 -= 56;
      v32 -= 56;
    }
    while (v32 != v36);
    v32 = *v31;
  }
  *v31 = v44;
  *v33 = v35;
  v31[2] = &v43[56 * v40];
  if (v32)
    operator delete(v32);
LABEL_35:
  *v33 = v35;
}

void **sub_1C5F858DC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1C5F85948(uint64_t a1, _QWORD *a2, int *a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *i;
  char *v50;
  __int128 v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v6 = *(char **)(a1 + 8);
  v7 = *(char **)(a1 + 16);
  v8 = v7 - v6;
  if (v7 == v6)
    v9 = 0;
  else
    v9 = 32 * (v7 - v6) - 1;
  v11 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v12 = v10 + v11;
  if (v9 == v10 + v11)
  {
    if (v11 < 0x100)
    {
      v33 = *(char **)(a1 + 24);
      v34 = (uint64_t)&v33[-*(_QWORD *)a1];
      if (v8 < v34)
      {
        if (v33 != v7)
        {
          *(_QWORD *)&v60 = operator new(0x1000uLL);
          sub_1C61351F0(a1, &v60);
          goto LABEL_25;
        }
        *(_QWORD *)&v60 = operator new(0x1000uLL);
        sub_1C6135314((void **)a1, &v60);
        v35 = *(_QWORD **)(a1 + 8);
        v36 = *(char **)(a1 + 16);
        v39 = *v35;
        v37 = (char *)(v35 + 1);
        v38 = v39;
        *(_QWORD *)(a1 + 8) = v37;
        if (v36 == *(char **)(a1 + 24))
        {
          v40 = *(char **)a1;
          if ((unint64_t)v37 <= *(_QWORD *)a1)
          {
            if (v36 == v40)
              v52 = 1;
            else
              v52 = (v36 - v40) >> 2;
            if (v52 >> 61)
              goto LABEL_57;
            v53 = (char *)operator new(8 * v52);
            v54 = &v53[8 * (v52 >> 2)];
            v55 = v36 - v37;
            v27 = v36 == v37;
            v36 = v54;
            if (!v27)
            {
              v36 = &v54[v55 & 0xFFFFFFFFFFFFFFF8];
              v56 = 8 * (v55 >> 3);
              v57 = &v53[8 * (v52 >> 2)];
              do
              {
                v58 = *(_QWORD *)v37;
                v37 += 8;
                *(_QWORD *)v57 = v58;
                v57 += 8;
                v56 -= 8;
              }
              while (v56);
            }
            *(_QWORD *)a1 = v53;
            *(_QWORD *)(a1 + 8) = v54;
            *(_QWORD *)(a1 + 16) = v36;
            *(_QWORD *)(a1 + 24) = &v53[8 * v52];
            if (v40)
            {
              operator delete(v40);
              v36 = *(char **)(a1 + 16);
            }
          }
          else
          {
            v41 = (uint64_t)&v37[-*(_QWORD *)a1] >> 3;
            if (v41 >= -1)
              v42 = v41 + 1;
            else
              v42 = v41 + 2;
            v43 = -(v42 >> 1);
            v44 = v42 >> 1;
            v45 = &v37[-8 * v44];
            v46 = v36 - v37;
            if (v46)
            {
              memmove(&v37[-8 * v44], v37, v46);
              v37 = *(char **)(a1 + 8);
            }
            v36 = &v45[v46];
            *(_QWORD *)(a1 + 8) = &v37[8 * v43];
            *(_QWORD *)(a1 + 16) = v36;
          }
        }
        *(_QWORD *)v36 = v38;
        goto LABEL_24;
      }
      v47 = v34 >> 2;
      if (v33 == *(char **)a1)
        v48 = 1;
      else
        v48 = v47;
      v62 = a1 + 24;
      if (!(v48 >> 61))
      {
        *(_QWORD *)&v60 = operator new(8 * v48);
        *((_QWORD *)&v60 + 1) = v60 + v8;
        *(_QWORD *)&v61 = v60 + v8;
        *((_QWORD *)&v61 + 1) = v60 + 8 * v48;
        v59 = operator new(0x1000uLL);
        sub_1C61351F0((uint64_t)&v60, &v59);
        for (i = *(_QWORD **)(a1 + 16); i != *(_QWORD **)(a1 + 8); sub_1C6135314((void **)&v60, i))
          --i;
        v50 = *(char **)a1;
        v51 = v61;
        *(_OWORD *)a1 = v60;
        *(_OWORD *)(a1 + 16) = v51;
        if (v50)
          operator delete(v50);
        goto LABEL_25;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v11 - 256;
      v15 = *(_QWORD *)v6;
      v13 = v6 + 8;
      v14 = v15;
      *(_QWORD *)(a1 + 8) = v13;
      if (v7 != *(char **)(a1 + 24))
      {
LABEL_23:
        *(_QWORD *)v7 = v14;
LABEL_24:
        *(_QWORD *)(a1 + 16) += 8;
LABEL_25:
        v6 = *(char **)(a1 + 8);
        v10 = *(_QWORD *)(a1 + 40);
        v12 = *(_QWORD *)(a1 + 32) + v10;
        goto LABEL_26;
      }
      v16 = *(char **)a1;
      if ((unint64_t)v13 > *(_QWORD *)a1)
      {
        v17 = (uint64_t)&v13[-*(_QWORD *)a1] >> 3;
        if (v17 >= -1)
          v18 = v17 + 1;
        else
          v18 = v17 + 2;
        v19 = -(v18 >> 1);
        v20 = v18 >> 1;
        v21 = &v13[-8 * v20];
        v22 = v7 - v13;
        if (v7 != v13)
        {
          memmove(&v13[-8 * v20], v13, v7 - v13);
          v7 = *(char **)(a1 + 8);
        }
        v23 = &v7[8 * v19];
        v7 = &v21[v22];
        *(_QWORD *)(a1 + 8) = v23;
        *(_QWORD *)(a1 + 16) = &v21[v22];
        goto LABEL_23;
      }
      if (v7 == v16)
        v24 = 1;
      else
        v24 = (v7 - v16) >> 2;
      if (!(v24 >> 61))
      {
        v25 = (char *)operator new(8 * v24);
        v26 = &v25[8 * (v24 >> 2)];
        v28 = v7 - v13;
        v27 = v7 == v13;
        v7 = v26;
        if (!v27)
        {
          v7 = &v26[v28 & 0xFFFFFFFFFFFFFFF8];
          v29 = 8 * (v28 >> 3);
          v30 = &v25[8 * (v24 >> 2)];
          do
          {
            v31 = *(_QWORD *)v13;
            v13 += 8;
            *(_QWORD *)v30 = v31;
            v30 += 8;
            v29 -= 8;
          }
          while (v29);
        }
        *(_QWORD *)a1 = v25;
        *(_QWORD *)(a1 + 8) = v26;
        *(_QWORD *)(a1 + 16) = v7;
        *(_QWORD *)(a1 + 24) = &v25[8 * v24];
        if (v16)
        {
          operator delete(v16);
          v7 = *(char **)(a1 + 16);
        }
        goto LABEL_23;
      }
    }
LABEL_57:
    sub_1C4764EE4();
  }
LABEL_26:
  v32 = (_QWORD *)(*(_QWORD *)&v6[(v12 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v12);
  *v32 = *a2;
  v32[1] = *a3;
  *(_QWORD *)(a1 + 40) = v10 + 1;
}

uint64_t sub_1C5F85CA0(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 256;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C5F85D64(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD **v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[2];
  __int128 v18;
  uint64_t v19;

  v19 = a2;
  v3 = a2 >> 6;
  v4 = 1 << a2;
  if ((*(_QWORD *)(*a3 + 8 * v3) & (1 << a2)) == 0)
  {
    v6 = (_QWORD **)result;
    v18 = 0u;
    memset(v17, 0, sizeof(v17));
    sub_1C51DF784((uint64_t)v17, &v19);
    *(_QWORD *)(*a3 + 8 * v3) |= v4;
    for (i = *((_QWORD *)&v18 + 1); *((_QWORD *)&v18 + 1); i = *((_QWORD *)&v18 + 1))
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v17[0] + 1) + (((unint64_t)v18 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v18 & 0x1FF));
      *(_QWORD *)&v18 = v18 + 1;
      *((_QWORD *)&v18 + 1) = i - 1;
      if ((unint64_t)v18 >= 0x400)
      {
        operator delete(**((void ***)&v17[0] + 1));
        *((_QWORD *)&v17[0] + 1) += 8;
        *(_QWORD *)&v18 = v18 - 512;
      }
      v9 = **v6 + 88 * v8;
      v10 = *(_QWORD *)(v9 + 40);
      v11 = *(_QWORD *)(v9 + 48);
      while (v10 != v11)
      {
        v12 = *(_QWORD *)(*(_QWORD *)v10 + 8);
        v13 = *(_QWORD *)(*(_QWORD *)v10 + 16);
        v16 = v12;
        if (v13)
        {
          v14 = v12 >> 6;
          v15 = 1 << v12;
          if ((*(_QWORD *)(*a3 + 8 * v14) & (1 << v12)) == 0)
          {
            sub_1C51DF784((uint64_t)v17, &v16);
            *(_QWORD *)(*a3 + 8 * v14) |= v15;
          }
        }
        v10 += 8;
      }
    }
    return sub_1C484143C((uint64_t)v17);
  }
  return result;
}

void sub_1C5F85EC0(unint64_t *a1, uint64_t **a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v59;
  _QWORD *v60;
  __int128 v62;
  uint64_t **v63;
  uint64_t *v64;
  uint64_t v65;

  if (a3 == a4 || (v4 = a3, v6 = **a2, a4 == -1) && *(_QWORD *)(v6 + 88 * a3 + 40) == *(_QWORD *)(v6 + 88 * a3 + 48))
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    return;
  }
  v7 = (*a2)[1] - v6;
  if (v7)
  {
    v10 = v7 / 88;
    if (v10 >> 61)
LABEL_80:
      abort();
    v11 = 8 * v10;
    v8 = operator new(8 * v10);
    memset_pattern16(v8, &unk_1C8675FE0, v11);
    v9 = operator new(v11);
    bzero(v9, v11);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  *((_QWORD *)v8 + v4) = 0;
  v64 = 0;
  v65 = 0;
  *((_QWORD *)&v62 + 1) = v4;
  v63 = &v64;
  *(_QWORD *)&v62 = 0;
  sub_1C6294AE8((uint64_t)&v63, 0, v4, &v62);
  v12 = v65;
  v13 = a4;
  if (v65)
  {
    v59 = v4;
    v60 = v9;
    do
    {
      v14 = (uint64_t *)v63;
      v15 = v63[1];
      v16 = (uint64_t *)v63;
      if (v15)
      {
        do
        {
          v17 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v17 = (uint64_t *)v16[2];
          v18 = *v17 == (_QWORD)v16;
          v16 = v17;
        }
        while (!v18);
      }
      v19 = (uint64_t)v63[5];
      v63 = (uint64_t **)v17;
      v65 = v12 - 1;
      sub_1C485B6E0(v64, v14);
      operator delete(v14);
      v13 = a4;
      if (v19 == a4)
        break;
      v20 = *a2;
      v21 = **a2;
      v22 = v21 + 88 * v19;
      v23 = *(uint64_t **)(v22 + 40);
      v24 = *(uint64_t **)(v22 + 48);
      if (a4 == -1 && v23 == v24)
      {
        v34 = a1;
        goto LABEL_36;
      }
      while (v23 != v24)
      {
        v25 = *v23;
        v26 = **a2;
        v27 = 0x2E8BA2E8BA2E8BA3 * (((*a2)[1] - v26) >> 3);
        v28 = *(_QWORD *)(v26 + 88 * (*a2)[6] + 24);
        if (0x40000000 / v27 < v28)
          v28 = 0x40000000 / v27;
        if (v28 <= 0x2710)
          v28 = 10000;
        v29 = 0x40000000;
        if (!*(_BYTE *)(v25 + 24))
        {
          v30 = *(_QWORD *)(v25 + 16);
          if (v30)
            v29 = v28 / v30 + v28;
          else
            v29 = v28 * v27;
        }
        v31 = *(_QWORD *)(v25 + 8);
        v32 = *((_QWORD *)v8 + v31);
        if (v32 > *((_QWORD *)v8 + v19) + v29)
        {
          sub_1C63B67A4((uint64_t **)&v63, v32, *(_QWORD *)(v25 + 8));
          v33 = *((_QWORD *)v8 + v19) + v29;
          *((_QWORD *)v8 + v31) = v33;
          v60[v31] = v25;
          *(_QWORD *)&v62 = v33;
          *((_QWORD *)&v62 + 1) = v31;
          sub_1C6294AE8((uint64_t)&v63, v33, v31, &v62);
          v13 = a4;
        }
        ++v23;
      }
      v12 = v65;
      v4 = v59;
      v9 = v60;
    }
    while (v65);
  }
  v34 = a1;
  if (v13 == -1)
  {
    v20 = *a2;
    v21 = **a2;
LABEL_36:
    v35 = v20[1];
    v36 = v35 - v21;
    if (v35 == v21)
    {
      v13 = -1;
    }
    else
    {
      v37 = 0;
      v38 = v36 / 88;
      if (v38 <= 1)
        v38 = 1;
      v39 = (_QWORD *)(v21 + 48);
      v13 = -1;
      do
      {
        if (*(v39 - 1) == *v39 && *((_QWORD *)v9 + v37) && (v13 == -1 || *((_QWORD *)v8 + v13) > *((_QWORD *)v8 + v37)))
          v13 = v37;
        ++v37;
        v39 += 11;
      }
      while (v38 != v37);
    }
  }
  *v34 = 0;
  v34[1] = 0;
  v34[2] = 0;
  if (v13 == v4)
  {
LABEL_76:
    sub_1C6143384(v64);
    if (!v9)
      goto LABEL_78;
    goto LABEL_77;
  }
  v40 = 0;
  do
  {
    v41 = v34[2];
    if ((unint64_t)v40 >= v41)
    {
      v42 = (_QWORD *)*v34;
      v43 = (uint64_t)((uint64_t)v40 - *v34) >> 3;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 61)
        goto LABEL_80;
      v45 = v41 - (_QWORD)v42;
      if (v45 >> 2 > v44)
        v44 = v45 >> 2;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
        v46 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      if (v46)
      {
        if (v46 >> 61)
          sub_1C4764EE4();
        v47 = v13;
        v48 = (char *)operator new(8 * v46);
        v13 = v47;
      }
      else
      {
        v48 = 0;
      }
      v49 = &v48[8 * v43];
      *(_QWORD *)v49 = *((_QWORD *)v9 + v13);
      v50 = v49 + 8;
      if (v40 != v42)
      {
        do
        {
          v51 = *--v40;
          *((_QWORD *)v49 - 1) = v51;
          v49 -= 8;
        }
        while (v40 != v42);
        v40 = (_QWORD *)*v34;
      }
      *v34 = (unint64_t)v49;
      v34[1] = (unint64_t)v50;
      v34[2] = (unint64_t)&v48[8 * v46];
      if (v40)
      {
        v52 = v13;
        operator delete(v40);
        v13 = v52;
      }
      v40 = v50;
    }
    else
    {
      *v40++ = *((_QWORD *)v9 + v13);
    }
    v34[1] = (unint64_t)v40;
    v13 = **((_QWORD **)v9 + v13);
  }
  while (v13 != v4);
  v53 = *v34;
  v54 = v40 - 1;
  v55 = (_QWORD *)*v34 == v40 || v53 >= (unint64_t)v54;
  if (!v55)
  {
    v56 = v53 + 8;
    do
    {
      v57 = *(_QWORD *)(v56 - 8);
      *(_QWORD *)(v56 - 8) = *v54;
      *v54-- = v57;
      v55 = v56 >= (unint64_t)v54;
      v56 += 8;
    }
    while (!v55);
    goto LABEL_76;
  }
  sub_1C6143384(v64);
LABEL_77:
  operator delete(v9);
LABEL_78:
  if (v8)
    operator delete(v8);
}

BOOL sub_1C5F8636C(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v9;

  if (*(_BYTE *)(a4 + 24) && !*(_QWORD *)(a4 + 16))
    return 1;
  v4 = **a1;
  v5 = *(_QWORD *)(a4 + 8);
  if (a3 && v4 + 88 * v5 == a3)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 88 * v5 + 16);
  if (!*(_BYTE *)(v4 + 88 * v5 + 16) && v4 + 88 * *(_QWORD *)a4 == a2)
    return 1;
  v9 = *(_QWORD *)(v4 + 88 * v5 + 24);
  return !v7 && v9 == 0;
}

BOOL sub_1C5F863E8(_BOOL8 result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, unint64_t a6)
{
  uint64_t *v8;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  if (a4 != a5)
  {
    v8 = a4;
    v11 = (uint64_t **)result;
    v12 = 0;
    v13 = a4;
    do
    {
      v14 = *v13++;
      result = sub_1C5F8636C(v11, a2, a3, v14);
      v12 += result ^ 1;
    }
    while (v13 != a5);
    if (a3 || v12)
    {
      v15 = (a6 + v12 - 1) / v12;
      do
      {
        v16 = *v8;
        result = sub_1C5F8636C(v11, a2, a3, *v8);
        if (!result)
        {
          if (a6 >= v15)
            v17 = v15;
          else
            v17 = a6;
          *(_QWORD *)(v16 + 16) = v17;
          a6 -= v17;
        }
        ++v8;
      }
      while (v8 != a5);
    }
  }
  return result;
}

uint64_t sub_1C5F864B0()
{
  __n128 v1;
  int v2;
  int v3;
  int v4;
  int *v5;

  LOBYTE(v2) = 1;
  v5 = &v2;
  v3 = 1;
  v4 = 1;
  v1.n128_u64[0] = (unint64_t)"Try to evenly distribute counts when there are multiple equally likely options.";
  v1.n128_u64[1] = 79;
  sub_1C63B6878((char **)&v5, &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED827EF8, &dword_1C475E000);
  v3 = 1;
  v4 = 10;
  v5 = &v4;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Maximum number of dfs iterations for even count distribution.";
  v1.n128_u64[1] = 61;
  sub_1C63B69C0(&v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED827FB8, &dword_1C475E000);
  v3 = 1;
  v4 = 10;
  v5 = &v4;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"A cost of increasing a block's count by one.";
  v1.n128_u64[1] = 44;
  sub_1C61991E4((llvm::cl::Option *)&unk_1ED828078, "sample-profile-profi-cost-inc", &v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED828078, &dword_1C475E000);
  v3 = 1;
  v4 = 20;
  v5 = &v4;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"A cost of decreasing a block's count by one.";
  v1.n128_u64[1] = 44;
  sub_1C61991E4((llvm::cl::Option *)&unk_1ED828138, "sample-profile-profi-cost-dec", &v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED828138, &dword_1C475E000);
  v3 = 1;
  v4 = 11;
  v5 = &v4;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"A cost of increasing a count of zero-weight block by one.";
  v1.n128_u64[1] = 57;
  sub_1C63B6B04(&v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED8281F8, &dword_1C475E000);
  v3 = 1;
  v4 = 40;
  v5 = &v4;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"A cost of increasing the entry block's count by one.";
  v1.n128_u64[1] = 52;
  sub_1C61991E4((llvm::cl::Option *)&unk_1ED8282B8, "sample-profile-profi-cost-inc-entry", &v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8282B8, &dword_1C475E000);
  v3 = 1;
  v4 = 10;
  v5 = &v4;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"A cost of decreasing the entry block's count by one.";
  v1.n128_u64[1] = 52;
  sub_1C61991E4((llvm::cl::Option *)&unk_1ED828378, "sample-profile-profi-cost-dec-entry", &v5, &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED828378, &dword_1C475E000);
}

uint64_t llvm::sampleprofutil::SampleCoverageTracker::countUsedRecords(llvm::sampleprofutil::SampleCoverageTracker *this, const llvm::sampleprof::FunctionSamples *a2, llvm::ProfileSummaryInfo *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  BOOL v16;
  char *v17;
  char *v18;
  uint64_t v20;

  v20 = 0;
  if (sub_1C614ECAC(*(_QWORD *)this, *((_DWORD *)this + 4), (uint64_t)a2, &v20))
  {
    v6 = v20;
    v7 = *(_QWORD *)this;
    v8 = *((unsigned int *)this + 4);
  }
  else
  {
    v7 = *(_QWORD *)this;
    v8 = *((unsigned int *)this + 4);
    v6 = *(_QWORD *)this + 32 * v8;
  }
  if (v6 == v7 + 32 * v8)
    v9 = 0;
  else
    v9 = *(unsigned int *)(v6 + 24);
  v10 = (char *)*((_QWORD *)a2 + 12);
  v11 = (char *)a2 + 104;
  if (v10 != v11)
  {
    while (1)
    {
      v12 = (char *)*((_QWORD *)v10 + 5);
      if (v12 != v10 + 48)
        break;
LABEL_22:
      v17 = (char *)*((_QWORD *)v10 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(char **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (char *)*((_QWORD *)v10 + 2);
          v16 = *(_QWORD *)v18 == (_QWORD)v10;
          v10 = v18;
        }
        while (!v16);
      }
      v10 = v18;
      if (v18 == v11)
        return v9;
    }
    while (1)
    {
      v13 = *((_QWORD *)v12 + 14);
      if (*((_BYTE *)this + 32))
      {
        if (!*((_BYTE *)a3 + 40) || *((_QWORD *)a3 + 4) < v13)
          goto LABEL_15;
      }
      else if (*((_BYTE *)a3 + 24) && *((_QWORD *)a3 + 2) <= v13)
      {
LABEL_15:
        v9 = llvm::sampleprofutil::SampleCoverageTracker::countUsedRecords(this, (const llvm::sampleprof::FunctionSamples *)(v12 + 56), a3)+ v9;
      }
      v14 = (char *)*((_QWORD *)v12 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (char *)*((_QWORD *)v12 + 2);
          v16 = *(_QWORD *)v15 == (_QWORD)v12;
          v12 = v15;
        }
        while (!v16);
      }
      v12 = v15;
      if (v15 == v10 + 48)
        goto LABEL_22;
    }
  }
  return v9;
}

uint64_t llvm::sampleprofutil::SampleCoverageTracker::countBodyRecords(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;

  v3 = *(unsigned int *)(a2 + 88);
  v4 = *(_QWORD **)(a2 + 96);
  v5 = (_QWORD *)(a2 + 104);
  if (v4 != (_QWORD *)(a2 + 104))
  {
    while (1)
    {
      v8 = (_QWORD *)v4[5];
      if (v8 != v4 + 6)
        break;
LABEL_17:
      v14 = (_QWORD *)v4[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v4[2];
          v13 = *v15 == (_QWORD)v4;
          v4 = v15;
        }
        while (!v13);
      }
      v4 = v15;
      if (v15 == v5)
        return v3;
    }
    v9 = *(unsigned __int8 *)(a1 + 32);
    while (1)
    {
      v10 = v8[14];
      if (v9)
      {
        if (!*(_BYTE *)(a3 + 40) || *(_QWORD *)(a3 + 32) < v10)
          goto LABEL_10;
      }
      else if (*(_BYTE *)(a3 + 24) && *(_QWORD *)(a3 + 16) <= v10)
      {
LABEL_10:
        v3 = llvm::sampleprofutil::SampleCoverageTracker::countBodyRecords(a1, v8 + 7, a3)
           + v3;
      }
      v11 = (_QWORD *)v8[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v8[2];
          v13 = *v12 == (_QWORD)v8;
          v8 = v12;
        }
        while (!v13);
      }
      v8 = v12;
      if (v12 == v4 + 6)
        goto LABEL_17;
    }
  }
  return v3;
}

uint64_t llvm::sampleprofutil::SampleCoverageTracker::countBodySamples(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;

  v5 = (_QWORD *)a2[9];
  if (v5 == a2 + 10)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      v7 = (_QWORD *)v5[1];
      v8 = v5;
      if (v7)
      {
        do
        {
          v9 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v8[2];
          v10 = *v9 == (_QWORD)v8;
          v8 = v9;
        }
        while (!v10);
      }
      v6 += v5[5];
      v5 = v9;
    }
    while (v9 != a2 + 10);
  }
  v11 = (_QWORD *)a2[12];
  v12 = a2 + 13;
  if (v11 != a2 + 13)
  {
    while (1)
    {
      v13 = (_QWORD *)v11[5];
      if (v13 != v11 + 6)
        break;
LABEL_27:
      v18 = (_QWORD *)v11[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v11[2];
          v10 = *v19 == (_QWORD)v11;
          v11 = v19;
        }
        while (!v10);
      }
      v11 = v19;
      if (v19 == v12)
        return v6;
    }
    v14 = *(unsigned __int8 *)(a1 + 32);
    while (1)
    {
      v15 = v13[14];
      if (v14)
      {
        if (!*(_BYTE *)(a3 + 40) || *(_QWORD *)(a3 + 32) < v15)
          goto LABEL_20;
      }
      else if (*(_BYTE *)(a3 + 24) && *(_QWORD *)(a3 + 16) <= v15)
      {
LABEL_20:
        v6 += llvm::sampleprofutil::SampleCoverageTracker::countBodySamples(a1, v13 + 7, a3);
      }
      v16 = (_QWORD *)v13[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v13[2];
          v10 = *v17 == (_QWORD)v13;
          v13 = v17;
        }
        while (!v10);
      }
      v13 = v17;
      if (v17 == v11 + 6)
        goto LABEL_27;
    }
  }
  return v6;
}

_QWORD *sub_1C5F86B20(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63B70E0(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1C5F86BD8(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;

  v6 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    while (1)
    {
      v7 = v5;
      v8 = *((_DWORD *)v5 + 7);
      if (v8 > a3)
        goto LABEL_6;
      if (v8 != a3)
      {
        v10 = v8 >= a3;
        goto LABEL_8;
      }
      v9 = *((_DWORD *)v7 + 8);
      v10 = v9 >= a4;
      if (v9 <= a4)
      {
LABEL_8:
        if (v10)
          goto LABEL_12;
        result = v7 + 1;
        v5 = (uint64_t *)v7[1];
        if (!v5)
          goto LABEL_12;
      }
      else
      {
LABEL_6:
        v5 = (uint64_t *)*v7;
        result = v7;
        if (!*v7)
          goto LABEL_12;
      }
    }
  }
  v7 = result;
LABEL_12:
  *a2 = v7;
  return result;
}

uint64_t sub_1C5F86C34()
{
  __int128 v1;
  int *v2;
  __n128 v3;
  int v4;
  char v5;

  LODWORD(v2) = 100;
  *(_QWORD *)&v1 = &v2;
  v3.n128_u64[0] = (unint64_t)"Maximum number of iterations to go through when propagating sample block/edge weigh"
                                     "ts through the CFG.";
  v3.n128_u64[1] = 102;
  sub_1C63B6E1C((int **)&v1, (__int128 *)&v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, llvm::SampleProfileMaxPropagateIterations, &dword_1C475E000);
  v4 = 0;
  v2 = &v4;
  v3.n128_u64[0] = (unint64_t)"N";
  v3.n128_u64[1] = 1;
  *(_QWORD *)&v1 = "Emit a warning if less than N% of records in the input profile are matched to the IR.";
  *((_QWORD *)&v1 + 1) = 85;
  sub_1C63B6EDC((uint64_t)&llvm::SampleProfileRecordCoverage, "sample-profile-check-record-coverage", &v2, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &llvm::SampleProfileRecordCoverage, &dword_1C475E000);
  v4 = 0;
  v2 = &v4;
  v3.n128_u64[0] = (unint64_t)"N";
  v3.n128_u64[1] = 1;
  *(_QWORD *)&v1 = "Emit a warning if less than N% of samples in the input profile are matched to the IR.";
  *((_QWORD *)&v1 + 1) = 85;
  sub_1C63B6EDC((uint64_t)&llvm::SampleProfileSampleCoverage, "sample-profile-check-sample-coverage", &v2, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &llvm::SampleProfileSampleCoverage, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v2) = 1;
  v3.n128_u64[0] = (unint64_t)"Use this option to turn off/on warnings about function with samples but without deb"
                                     "ug information to use those samples. ";
  v3.n128_u64[1] = 120;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::NoWarnSampleUnused, "no-warn-sample-unused", (_BYTE **)&v1, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::NoWarnSampleUnused, &dword_1C475E000);
  v5 = 0;
  *(_QWORD *)&v1 = &v5;
  LODWORD(v2) = 1;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Use profi to infer block and edge counts.";
  v3.n128_u64[1] = 41;
  sub_1C617D830((llvm::cl::Option *)&llvm::SampleProfileUseProfi, "sample-profile-use-profi", (_BYTE **)&v1, &v2, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::SampleProfileUseProfi, &dword_1C475E000);
  v5 = 1;
  *(_QWORD *)&v1 = &v5;
  LODWORD(v2) = 1;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Use profi to infer function entry count.";
  v3.n128_u64[1] = 40;
  sub_1C617D830((llvm::cl::Option *)&llvm::SampleProfileInferEntryCount, "sample-profile-infer-entry-count", (_BYTE **)&v1, &v2, &v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::SampleProfileInferEntryCount, &dword_1C475E000);
}

double llvm::SanitizerStatReport::makeModuleStatsArrayTy(llvm::ArrayType **this)
{
  return llvm::ArrayType::get(this[2], (llvm::Type *)((this[5] - this[4]) >> 3));
}

uint64_t llvm::FoldBranchToCommonDest(llvm *this, llvm::BranchInst *a2, llvm::DomTreeUpdater *a3, llvm::MemorySSAUpdater *a4, const llvm::TargetTransformInfo *a5)
{
  char v5;
  int v6;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v17;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  _BYTE *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  llvm::ValueHandleBase *v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v47;
  llvm::ValueHandleBase *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  BOOL v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  BOOL v58;
  int v59;
  int v60;
  unsigned int v61;
  BOOL v62;
  llvm::ValueHandleBase *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  int v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  int v76;
  unint64_t v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  int v86;
  uint64_t v87;
  BOOL v88;
  _BOOL4 v89;
  uint64_t i;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  int v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  unsigned int v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  int v125;
  int v126;
  _QWORD *v127;
  char *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t **v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  unsigned int v145;
  llvm **v146;
  llvm *v147;
  llvm **v148;
  int v149;
  BOOL v150;
  unsigned int v151;
  uint64_t v152;
  llvm::MDNode **v153;
  uint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t **v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t ***v164;
  unsigned __int8 *v165;
  unsigned __int8 **v166;
  _QWORD *v167;
  llvm::LLVMContext *v168;
  llvm::LLVMContext *v169;
  _QWORD *v170;
  unint64_t v171;
  int32x2_t ****v172;
  int32x2_t *v173;
  unint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  int32x2_t *****v178;
  int32x2_t ****v179;
  int v180;
  int v181;
  uint64_t ***v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t ****v188;
  uint64_t ***v189;
  int v190;
  int v191;
  uint64_t ***v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t **v204;
  uint64_t v205;
  llvm::ValueSymbolTable *v206;
  unint64_t v207;
  unint64_t *v208;
  uint64_t v209;
  int32x2_t *v210;
  unint64_t v211;
  uint64_t v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  int v217;
  int v218;
  unsigned __int8 *v219;
  int32x2_t ****v220;
  _QWORD *v221;
  unint64_t v222;
  int32x2_t ****v223;
  int32x2_t *v224;
  unint64_t v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  int32x2_t *****v229;
  int32x2_t ****v230;
  int v231;
  int v232;
  _QWORD *v233;
  unsigned __int8 **v234;
  llvm::Constant **v235;
  unsigned __int8 *v236;
  uint64_t v237;
  unsigned __int8 ***v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  llvm::Instruction *v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  llvm::LLVMContext *v247;
  llvm::LLVMContext *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  llvm::ValueSymbolTable *v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t *v259;
  uint64_t v260;
  int32x2_t *v261;
  unint64_t v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  int v268;
  int v269;
  unint64_t v271;
  unint64_t *v272;
  uint64_t v273;
  int32x2_t *v274;
  unint64_t v275;
  uint64_t v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  int v281;
  int v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  int v286;
  unsigned int v287;
  _QWORD *v288;
  void *v289;
  _QWORD *v290;
  int v291;
  BOOL v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  llvm **v297;
  llvm *v298;
  _QWORD *v299;
  void *v300;
  uint64_t v301;
  _QWORD *v302;
  int v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  int v308;
  uint64_t v309;
  unsigned int v310;
  int v311;
  unsigned int v312;
  llvm::ValueHandleBase *v313;
  char v314;
  _QWORD *v315;
  _QWORD *v316;
  uint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unsigned __int8 *v322;
  _QWORD *v323;
  void *v324;
  uint64_t v325;
  _BYTE v326[64];
  void *v327;
  uint64_t v328;
  char *v329;
  int32x2_t ****v330;
  void **v331;
  void *v332;
  unint64_t v333;
  uint64x2_t v334;
  __int16 v335;
  char v336;
  void *v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  _QWORD v341[15];

  v341[13] = *MEMORY[0x1E0C80C00];
  if ((*((_DWORD *)this + 5) & 0x7FFFFFF) != 3)
    return 0;
  v6 = (int)a5;
  v11 = (_QWORD *)*((_QWORD *)this + 5);
  v12 = *(_QWORD *)(v11[7] + 112);
  if (v12)
    v13 = *(char *)(v12 + 13) < 0 ? 2 : 3;
  else
    v13 = 3;
  v14 = *((_QWORD *)this - 12);
  v15 = *(unsigned __int8 *)(v14 + 16);
  if (!v14 || v15 < 0x1C)
    return 0;
  v17 = v15 != 85 && v15 - 81 >= 2;
  if (v17 && v15 - 41 > 0x11)
    return 0;
  if (*(_QWORD **)(v14 + 40) != v11)
    return 0;
  v21 = *(_QWORD *)(v14 + 8);
  if (!v21 || *(_QWORD *)(v21 + 8))
    return 0;
  v22 = *(_DWORD *)(v14 + 20);
  if ((v22 & 0x40000000) != 0)
    v23 = *(uint64_t **)(v14 - 8);
  else
    v23 = (uint64_t *)(v14 - 32 * (v22 & 0x7FFFFFF));
  v24 = *v23;
  v25 = *(unsigned __int8 *)(*v23 + 16);
  if (v24)
    v26 = v25 == 5;
  else
    v26 = 0;
  if (v26)
  {
    v337 = v341;
    v338 = (uint64_t)v341;
    v339 = 4;
    v340 = 0;
    v5 = sub_1C53774DC(v24, (llvm::SmallPtrSetImplBase *)&v337);
    v27 = (_BYTE *)v338;
    if ((void *)v338 == v337)
    {
      if ((v5 & 1) != 0)
        return 0;
    }
    else
    {
LABEL_484:
      free(v27);
      if ((v5 & 1) != 0)
        return 0;
    }
    v22 = *(_DWORD *)(v14 + 20);
  }
  if ((v22 & 0x40000000) != 0)
    v28 = *(_QWORD *)(v14 - 8);
  else
    v28 = v14 - 32 * (v22 & 0x7FFFFFF);
  v27 = *(_BYTE **)(v28 + 32);
  if (!v27 || v27[16] != 5)
    goto LABEL_42;
  v337 = v341;
  v338 = (uint64_t)v341;
  v339 = 4;
  v340 = 0;
  v5 = sub_1C53774DC((uint64_t)v27, (llvm::SmallPtrSetImplBase *)&v337);
  v27 = (_BYTE *)v338;
  if ((void *)v338 != v337)
  {
    free((void *)v338);
    if ((v5 & 1) == 0)
      goto LABEL_42;
    return 0;
  }
  if ((v5 & 1) != 0)
    return 0;
LABEL_42:
  v29 = v11 + 5;
  v30 = (_QWORD *)v11[5];
  if (v30 != v11 + 5)
  {
    if (v30)
      v31 = v30 - 3;
    else
      v31 = 0;
    v32 = *((unsigned __int8 *)v31 + 16);
    if (v32 == 30)
    {
      if ((*((_DWORD *)v31 + 5) & 0x7FFFFFF) == 3)
        v33 = 2;
      else
        v33 = 1;
      goto LABEL_50;
    }
    v33 = 2;
    switch(*((_BYTE *)v31 + 16))
    {
      case 0x1E:
        __break(1u);
        goto LABEL_484;
      case 0x1F:
        v33 = (*((_DWORD *)v31 + 5) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
      case 0x26:
        v33 = (*((_DWORD *)v31 + 5) & 0x7FFFFFF) - 1;
        break;
      case 0x21:
        goto LABEL_50;
      case 0x24:
        v33 = *((_WORD *)v31 + 9) & 1;
        break;
      case 0x25:
        v33 = 1;
        goto LABEL_50;
      case 0x27:
        v33 = *((_DWORD *)v31 + 20) + 1;
        break;
      default:
        goto LABEL_57;
    }
    if (v33)
    {
LABEL_50:
      v34 = 0;
      v35 = v31 - 4;
      do
      {
        if (v32 != 30)
          __asm { BR              X2 }
        if ((_QWORD *)*v35 == v11)
          return 0;
        ++v34;
        v35 -= 4;
      }
      while (v33 != v34);
    }
  }
LABEL_57:
  v324 = v326;
  v325 = 0x800000000;
  v36 = v11[1];
  if (!v36)
    goto LABEL_196;
  while (1)
  {
    v37 = *(_QWORD *)(v36 + 24);
    v38 = *(unsigned __int8 *)(v37 + 16);
    v39 = v37 && v38 >= 0x1C;
    if (v39 && v38 - 29 < 0xB)
      break;
    v36 = *(_QWORD *)(v36 + 8);
    if (!v36)
      goto LABEL_196;
  }
LABEL_68:
  v41 = *(llvm::ValueHandleBase **)(v37 + 40);
  v42 = (_QWORD *)*((_QWORD *)v41 + 5);
  if (v42 != (_QWORD *)((char *)v41 + 40))
  {
    v43 = v42 ? (uint64_t)(v42 - 3) : 0;
    v44 = *(unsigned __int8 *)(v43 + 16) - 40;
    v45 = v44 >= 0xFFFFFFF5 ? v43 : 0;
    if (v42)
    {
      if (*(_BYTE *)(v45 + 16) == 30 && v44 >= 0xFFFFFFF5 && (*(_DWORD *)(v45 + 20) & 0x7FFFFFF) != 1)
      {
        v313 = v41;
        v315 = v29;
        v47 = sub_1C5F8891C((uint64_t)this, v45, 0);
        v29 = v315;
        if (v47)
        {
          sub_1C5F88ED4((uint64_t)&v337, (uint64_t)this, (llvm::Instruction *)v45, a4);
          if ((_BYTE)v338)
          {
            v48 = v313;
            v29 = v315;
            if (!a4)
              goto LABEL_102;
            v307 = BYTE4(v337);
            v305 = **((_QWORD **)this - 12);
            v309 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a4 + 824))(*(_QWORD *)a4, v337);
            v311 = v49;
            if (v307)
            {
              if ((v50 = *(_QWORD *)(v45 - 96), (v51 = *(_QWORD *)(v50 + 8)) == 0)
                || *(_QWORD *)(v51 + 8)
                || ((v52 = *(unsigned __int8 *)(v50 + 16), v52 >= 0x1C) ? (v53 = v52 - 81 >= 2) : (v53 = 1), v53))
              {
                v54 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)a4 + 824))(*(_QWORD *)a4, 30, v305, v13, 0, 0, 0, 0, 0, 0, 0);
                if (v55 == 1)
                  v56 = 1;
                else
                  v56 = v311;
                v57 = v309 + v54;
                if (__OFADD__(v309, v54))
                  v57 = ((v309 + v54) >> 63) ^ 0x8000000000000000;
                v309 = v57;
                v311 = v56;
              }
            }
            v58 = v309 > dword_1ED828C38;
            v48 = v313;
            if (v311)
              v58 = v311 > 0;
            v29 = v315;
            if (!v58)
            {
LABEL_102:
              v59 = v325;
              if (v325 >= HIDWORD(v325))
              {
                v64 = v48;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v324, (uint64_t)v326, v325 + 1, 8);
                v29 = v315;
                *((_QWORD *)v324 + v325) = v64;
                v60 = v325 + 1;
              }
              else
              {
                *((_QWORD *)v324 + v325) = v48;
                v60 = v59 + 1;
              }
              LODWORD(v325) = v60;
            }
          }
          else
          {
            v29 = v315;
          }
        }
      }
    }
  }
  while (1)
  {
    v36 = *(_QWORD *)(v36 + 8);
    if (!v36)
      break;
    v37 = *(_QWORD *)(v36 + 24);
    v61 = *(unsigned __int8 *)(v37 + 16);
    if (v37)
      v62 = v61 >= 0x1C;
    else
      v62 = 0;
    if (v62 && v61 - 29 < 0xB)
      goto LABEL_68;
  }
  if (!(_DWORD)v325)
    goto LABEL_196;
  v65 = (_QWORD *)v11[6];
  if (v65 == v29)
  {
    v99 = 0;
    v100 = 1;
    v101 = 1;
    goto LABEL_191;
  }
  v308 = v325;
  v312 = 0;
  v314 = 0;
  v316 = v29;
  do
  {
    if (v65)
      v66 = (uint64_t)(v65 - 3);
    else
      v66 = 0;
    if (v66 == v14)
      goto LABEL_126;
    v67 = v66;
    if (sub_1C4D99D08(v66) || *(_BYTE *)(v67 + 16) == 30)
    {
      v29 = v316;
      goto LABEL_126;
    }
    if (!llvm::isSafeToSpeculativelyExecute(v67, 0, 0, 0))
      goto LABEL_232;
    v68 = v67;
    if ((*(_DWORD *)(*(_QWORD *)v67 + 8) & 0xFE) == 0x12)
    {
      v69 = 1;
      v29 = v316;
    }
    else
    {
      v70 = *(_DWORD *)(v67 + 20);
      v29 = v316;
      if ((v70 & 0x40000000) != 0)
      {
        v72 = *(uint64_t **)(v67 - 8);
        v71 = v70 & 0x7FFFFFF;
      }
      else
      {
        v71 = v70 & 0x7FFFFFF;
        v72 = (uint64_t *)(v67 - 32 * v71);
      }
      if (v71)
      {
        v73 = 32 * v71 - 32;
        do
        {
          v74 = *v72;
          v72 += 4;
          v69 = (*(_DWORD *)(*(_QWORD *)v74 + 8) & 0xFE) == 18;
          v75 = (*(_DWORD *)(*(_QWORD *)v74 + 8) & 0xFE) == 0x12 || v73 == 0;
          v73 -= 32;
        }
        while (!v75);
      }
      else
      {
        v69 = 0;
      }
    }
    if (!a4)
    {
LABEL_161:
      v312 += v308;
      if (v312 > dword_1ED828CF8 * v6)
      {
LABEL_232:
        v19 = 0;
        goto LABEL_197;
      }
      goto LABEL_162;
    }
    v76 = *(_DWORD *)(v68 + 20);
    if ((v76 & 0x40000000) != 0)
    {
      v78 = *(_QWORD **)(v68 - 8);
      v77 = v76 & 0x7FFFFFF;
    }
    else
    {
      v77 = v76 & 0x7FFFFFF;
      v78 = (_QWORD *)(v68 - 32 * v77);
    }
    v337 = &v339;
    v338 = 0x400000000;
    v306 = v68;
    if (v77 >= 5)
    {
      v302 = v78;
      v304 = v77;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v337, (uint64_t)&v339, v77, 8);
      v78 = v302;
      v77 = v304;
      v68 = v306;
      v79 = v338;
      v81 = (uint64_t *)v337;
      v80 = v338;
    }
    else
    {
      v79 = 0;
      if (!v77)
      {
        v85 = &v339;
        goto LABEL_153;
      }
      v80 = 0;
      v81 = &v339;
    }
    v82 = 32 * v77;
    v83 = &v81[v80];
    do
    {
      v84 = *v78;
      v78 += 4;
      *v83++ = v84;
      v82 -= 32;
    }
    while (v82);
    v85 = (uint64_t *)v337;
LABEL_153:
    LODWORD(v338) = v79 + v77;
    v87 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)a4 + 72))(*(_QWORD *)a4, v68, v85);
    if (v337 != &v339)
    {
      v301 = v87;
      v303 = v86;
      free(v337);
      v87 = v301;
      v86 = v303;
    }
    v88 = v87 < 0;
    if (v86)
      v88 = v86 < 0;
    v29 = v316;
    v68 = v306;
    if (v88)
      goto LABEL_161;
    v89 = v87 > 0;
    if (v86)
      v89 = v86 > 0;
    if (v89)
      goto LABEL_161;
LABEL_162:
    v314 |= v69;
    for (i = *(_QWORD *)(v68 + 8); i; i = *(_QWORD *)(i + 8))
    {
      v91 = *(_QWORD *)(i + 24);
      if (v91 && *(_BYTE *)(v91 + 16) == 83)
      {
        v92 = *(_DWORD *)(v91 + 20);
        if ((v92 & 0x40000000) != 0)
          v93 = *(_QWORD *)(v91 - 8);
        else
          v93 = v91 - 32 * (v92 & 0x7FFFFFF);
        if (*(_QWORD **)(v93
                        + 32 * *(unsigned int *)(v91 + 60)
                        + 8 * ((unint64_t)(i - v93) >> 5)) != v11)
          goto LABEL_196;
      }
      else
      {
        if (*(_QWORD **)(v91 + 40) != v11)
          goto LABEL_196;
        v94 = *(_QWORD *)(v68 + 40);
        v95 = *(__int16 *)(v94 + 18);
        if ((v95 & 0x80000000) == 0)
        {
          v96 = *(_QWORD *)(v94 + 48);
          if (v96 != v94 + 40)
          {
            v97 = 0;
            do
            {
              v98 = v96 - 24;
              if (!v96)
                v98 = 0;
              *(_DWORD *)(v98 + 56) = v97++;
              v96 = *(_QWORD *)(v96 + 8);
            }
            while (v96 != v94 + 40);
          }
          *(_WORD *)(v94 + 18) = v95 | 0x8000;
        }
        if (*(_DWORD *)(v68 + 56) >= *(_DWORD *)(v91 + 56))
          goto LABEL_196;
      }
    }
LABEL_126:
    v65 = (_QWORD *)v65[1];
  }
  while (v65 != v29);
  if ((v314 & 1) != 0)
    v101 = dword_1ED828CF8;
  else
    v101 = 1;
  v100 = v325;
  v99 = v312;
LABEL_191:
  if (v99 > v101 * v6 || v100 == 0)
  {
LABEL_196:
    v19 = 0;
    goto LABEL_197;
  }
  v103 = *(_QWORD *)(*(_QWORD *)v324 + 40);
  if (v103 == *(_QWORD *)v324 + 40)
  {
    v105 = 0;
  }
  else
  {
    if (v103)
      v104 = v103 - 24;
    else
      v104 = 0;
    if (*(unsigned __int8 *)(v104 + 16) - 29 >= 0xB)
      v105 = 0;
    else
      v105 = v104;
  }
  v106 = *((_QWORD *)this + 5);
  v107 = *(_QWORD *)(v105 + 40);
  sub_1C5F88ED4((uint64_t)&v337, (uint64_t)this, (llvm::Instruction *)v105, a4);
  v310 = v337;
  v108 = BYTE4(v337);
  sub_1C4773D54((uint64_t)&v337, v105, 0, 0, 0);
  v110 = v106 + 40;
  v109 = *(_QWORD *)(v106 + 40);
  if (v109 == v106 + 40)
  {
    v112 = 0;
  }
  else
  {
    if (v109)
      v111 = (unsigned __int8 *)(v109 - 24);
    else
      v111 = 0;
    if (v111[16] - 29 >= 0xB)
      v112 = 0;
    else
      v112 = v111;
  }
  if ((v112[23] & 0x20) == 0)
  {
LABEL_216:
    v113 = 0;
    goto LABEL_217;
  }
  v283 = ***(_QWORD ***)v112;
  v332 = v112;
  v284 = *(_DWORD *)(v283 + 2496);
  if (!v284)
  {
    v299 = 0;
    goto LABEL_480;
  }
  v285 = *(_QWORD *)(v283 + 2480);
  v286 = v284 - 1;
  v287 = v286 & ((v112 >> 4) ^ (v112 >> 9));
  v288 = (_QWORD *)(v285 + 40 * v287);
  v289 = (void *)*v288;
  if ((unsigned __int8 *)*v288 != v112)
  {
    v290 = 0;
    v291 = 1;
    while (v289 != (void *)-4096)
    {
      if (v290)
        v292 = 0;
      else
        v292 = v289 == (void *)-8192;
      if (v292)
        v290 = v288;
      v293 = v287 + v291++;
      v287 = v293 & v286;
      v288 = (_QWORD *)(v285 + 40 * v287);
      v289 = (void *)*v288;
      if ((unsigned __int8 *)*v288 == v112)
        goto LABEL_466;
    }
    if (v290)
      v299 = v290;
    else
      v299 = v288;
LABEL_480:
    v288 = sub_1C541AB24(v283 + 2480, (uint64_t)&v332, (uint64_t *)&v332, v299);
    v300 = v332;
    v288[3] = 0;
    v288[4] = 0;
    *v288 = v300;
    v288[1] = v288 + 3;
    v288[2] = 0x100000000;
  }
LABEL_466:
  v294 = *((unsigned int *)v288 + 4);
  if (!(_DWORD)v294)
    goto LABEL_216;
  v295 = (uint64_t *)(v288[1] + 8);
  v296 = 16 * v294;
  while (*((_DWORD *)v295 - 2) != 30)
  {
    v113 = 0;
    v295 += 2;
    v296 -= 16;
    if (!v296)
      goto LABEL_217;
  }
  v113 = *v295;
LABEL_217:
  sub_1C4774EF4((uint64_t)&v337, 0x1Eu, v113);
  if (!v108)
    goto LABEL_243;
  v115 = (uint64_t *)(v105 - 96);
  v114 = *(_QWORD *)(v105 - 96);
  v116 = *(_QWORD *)(v114 + 8);
  if (!v116
    || *(_QWORD *)(v116 + 8)
    || ((v117 = *(unsigned __int8 *)(v114 + 16), v117 >= 0x1C) ? (v118 = v117 - 81 > 1) : (v118 = 1), v118))
  {
    if ((*(_BYTE *)(v114 + 23) & 0x10) == 0)
    {
      v129 = 0;
      v128 = &byte_1C871356D;
LABEL_235:
      v335 = 773;
      v332 = v128;
      v333 = v129;
      v334.i64[0] = (uint64_t)".not";
      v114 = sub_1C506EAA0((uint64_t)&v337, v114, (uint64_t)&v332);
      if (*v115)
        goto LABEL_236;
      goto LABEL_238;
    }
    v119 = ***(_QWORD ***)v114;
    v120 = *(_QWORD *)(v119 + 152);
    v121 = *(unsigned int *)(v119 + 168);
    if ((_DWORD)v121)
    {
      LODWORD(v122) = (v121 - 1) & ((v114 >> 4) ^ (v114 >> 9));
      v123 = (uint64_t *)(v120 + 16 * v122);
      v124 = *v123;
      if (*v123 == v114)
      {
LABEL_234:
        v127 = (_QWORD *)v123[1];
        v130 = *v127;
        v128 = (char *)(v127 + 2);
        v129 = v130;
        goto LABEL_235;
      }
      v125 = 1;
      while (v124 != -4096)
      {
        v126 = v122 + v125++;
        v122 = v126 & (v121 - 1);
        v124 = *(_QWORD *)(v120 + 16 * v122);
        if (v124 == v114)
        {
          v123 = (uint64_t *)(v120 + 16 * v122);
          goto LABEL_234;
        }
      }
    }
    v123 = (uint64_t *)(v120 + 16 * v121);
    goto LABEL_234;
  }
  *(_WORD *)(v114 + 18) = word_1C8676388[*(_WORD *)(v114 + 18) & 0x3FLL] | *(_WORD *)(v114 + 18) & 0xFFC0;
LABEL_236:
  **(_QWORD **)(v105 - 80) = *(_QWORD *)(v105 - 88);
  v131 = *(_QWORD *)(v105 - 88);
  if (v131)
    *(_QWORD *)(v131 + 16) = *(_QWORD *)(v105 - 80);
LABEL_238:
  *v115 = v114;
  if (v114)
  {
    v134 = *(_QWORD *)(v114 + 8);
    v132 = (uint64_t **)(v114 + 8);
    v133 = v134;
    *(_QWORD *)(v105 - 88) = v134;
    if (v134)
      *(_QWORD *)(v133 + 16) = v105 - 88;
    *(_QWORD *)(v105 - 80) = v132;
    *v132 = v115;
  }
  llvm::BranchInst::swapSuccessors((llvm::Instruction *)v105);
LABEL_243:
  v135 = -64;
  if (*(_QWORD *)(v105 - 32) == v106)
    v135 = -32;
  v136 = *(_QWORD *)((char *)this + v135);
  sub_1C5F90FA0(v136, v107, v106, (uint64_t)a3);
  v320 = 0;
  v321 = 0;
  v318 = 0;
  v319 = 0;
  v137 = llvm::Instruction::extractProfMetadata((llvm::Instruction *)v105, &v321, &v320);
  v138 = llvm::Instruction::extractProfMetadata(this, &v319, &v318);
  if ((v137 & 1) != 0 || v138)
  {
    if ((v137 & 1) == 0)
    {
      v320 = 1;
      v321 = 1;
    }
    if ((v138 & 1) == 0)
    {
      v318 = 1;
      v319 = 1;
    }
    v332 = &v334;
    HIDWORD(v333) = 8;
    if (*(_QWORD *)(v105 - 32) == v106)
    {
      v139 = v319 * v321;
      v140 = v318 * v321 + (v318 + v319) * v320;
    }
    else
    {
      v139 = v319 * v320 + (v319 + v318) * v321;
      v140 = v318 * v320;
    }
    v334.i64[0] = v139;
    v334.i64[1] = v140;
    LODWORD(v333) = 2;
    if (v139 <= v140)
      v139 = v140;
    if (HIDWORD(v139))
      v334 = vshlq_u64(v334, (uint64x2_t)vnegq_s64(vdupq_n_s64(32 - __clz(v139))));
    v327 = &v329;
    v329 = (char *)vmovn_s64((int64x2_t)v334);
    v328 = 0x800000002;
    sub_1C5F91118((llvm::Value *)v105, (int)v329, SHIDWORD(v329));
    if (v327 != &v329)
      free(v327);
    if (v332 != &v334)
      free(v332);
  }
  else if (*(_QWORD *)(v105 + 48) || (*(_BYTE *)(v105 + 23) & 0x20) != 0)
  {
    llvm::Value::setMetadata((llvm::Value *)v105, 2, 0);
  }
  sub_1C53E1B14(v105, *(_QWORD *)(v105 - 32) != v106, v136);
  if (a2)
  {
    v332 = (void *)v107;
    v333 = v136 & 0xFFFFFFFFFFFFFFFBLL;
    v334.i64[0] = v107;
    v334.i64[1] = v106 | 4;
    llvm::DomTreeUpdater::applyUpdates((uint64_t)a2, (unint64_t *)&v332, 2);
  }
  if ((*((_BYTE *)this + 23) & 0x20) != 0)
  {
    v141 = ***(_QWORD ***)this;
    v332 = this;
    v142 = *(_DWORD *)(v141 + 2496);
    if (!v142)
    {
      v297 = 0;
      goto LABEL_474;
    }
    v143 = *(_QWORD *)(v141 + 2480);
    v144 = v142 - 1;
    v145 = v144 & ((this >> 4) ^ (this >> 9));
    v146 = (llvm **)(v143 + 40 * v145);
    v147 = *v146;
    if (*v146 != this)
    {
      v148 = 0;
      v149 = 1;
      while (v147 != (llvm *)-4096)
      {
        if (v148)
          v150 = 0;
        else
          v150 = v147 == (llvm *)-8192;
        if (v150)
          v148 = v146;
        v151 = v145 + v149++;
        v145 = v151 & v144;
        v146 = (llvm **)(v143 + 40 * v145);
        v147 = *v146;
        if (*v146 == this)
          goto LABEL_278;
      }
      if (v148)
        v297 = v148;
      else
        v297 = v146;
LABEL_474:
      v146 = (llvm **)sub_1C541AB24(v141 + 2480, (uint64_t)&v332, (uint64_t *)&v332, v297);
      v298 = (llvm *)v332;
      v146[3] = 0;
      v146[4] = 0;
      *v146 = v298;
      v146[1] = (llvm *)(v146 + 3);
      v146[2] = (llvm *)0x100000000;
    }
LABEL_278:
    v152 = *((unsigned int *)v146 + 4);
    if ((_DWORD)v152)
    {
      v153 = (llvm::MDNode **)((char *)v146[1] + 8);
      v154 = 16 * v152;
      while (*((_DWORD *)v153 - 2) != 18)
      {
        v153 += 2;
        v154 -= 16;
        if (!v154)
          goto LABEL_285;
      }
      if (*v153)
        llvm::Value::setMetadata((llvm::Value *)v105, 18, *v153);
    }
  }
LABEL_285:
  v334.i32[0] = 128;
  v155 = operator new(0x2000uLL, (std::align_val_t)8uLL);
  v332 = v155;
  v333 = 0;
  if (v334.i32[0])
  {
    v156 = (unint64_t)v334.u32[0] << 6;
    v157 = v155 + 2;
    do
    {
      *v157 = 0;
      v157[1] = -4096;
      *(v157 - 2) = &unk_1E814DA10;
      *(v157 - 1) = 2;
      v157[2] = 0;
      v157 += 8;
      v156 -= 64;
    }
    while (v156);
  }
  v334.i8[8] = 0;
  v336 = 0;
  v158 = *(_QWORD *)(v107 + 40);
  if (v158 == v107 + 40)
  {
    v317 = 0;
  }
  else
  {
    if (v158)
      v159 = v158 - 24;
    else
      v159 = 0;
    if (*(unsigned __int8 *)(v159 + 16) - 29 >= 0xB)
      v159 = 0;
    v317 = v159;
  }
  v160 = *(_QWORD *)(v106 + 48);
  if (v160 != v110)
  {
    v161 = (uint64_t **)(v317 + 24);
    while (1)
    {
      v162 = v160 ? v160 - 24 : 0;
      if (!sub_1C4D99D08(v162) && *(unsigned __int8 *)(v162 + 16) - 29 >= 0xB)
        break;
LABEL_356:
      v160 = *(_QWORD *)(v160 + 8);
      if (v160 == v110)
        goto LABEL_377;
    }
    llvm::Instruction::clone((llvm::Instruction *)v162);
    v164 = (uint64_t ***)v163;
    v166 = (unsigned __int8 **)(v163 + 48);
    v165 = *(unsigned __int8 **)(v163 + 48);
    if (*(unsigned __int8 **)(v317 + 48) != v165)
    {
      v322 = 0;
      if (&v322 != v166)
      {
        if (v165)
        {
          llvm::MetadataTracking::untrack(v163 + 48, v165);
          v219 = v322;
          *v166 = v322;
          if (v219)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v322, v219, (uint64_t)v166);
            v322 = 0;
          }
        }
        else
        {
          *v166 = 0;
        }
      }
    }
    v167 = (_QWORD *)operator new();
    *(_DWORD *)v167 = 3;
    v167[1] = 0;
    *((_DWORD *)v167 + 4) = 0;
    v167[5] = &v332;
    v167[3] = v167 + 5;
    v167[6] = 0;
    v167[4] = 0x200000001;
    v167[9] = v167 + 11;
    v167[10] = 0x400000000;
    v167[23] = v167 + 25;
    v167[24] = 0x100000000;
    v167[27] = v167 + 29;
    v167[28] = 0x1000000000;
    v323 = v167;
    v327 = v167;
    sub_1C5FD706C((uint64_t)v167, v164);
    sub_1C5FD3718((uint64_t *)&v327, v168);
    llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v323, v169);
    v328 = 2;
    v329 = 0;
    v330 = (int32x2_t ****)v162;
    if (v162 != -8192 && v162 != -4096 && v162)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v328);
    v327 = &unk_1E814DA10;
    v331 = &v332;
    v170 = sub_1C52E2ED8((uint64_t)&v332, &v327);
    if (v330 != (int32x2_t ****)-8192 && v330 != (int32x2_t ****)-4096 && v330)
    {
      v171 = v328 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v328 & 0xFFFFFFFFFFFFFFF8) = v329;
      if (v329)
      {
        *(_QWORD *)v329 = *(_QWORD *)v329 & 7 | v171;
      }
      else
      {
        v172 = v330;
        v173 = ***v330;
        v174 = (unint64_t)v173[303];
        if (v174 <= v171)
        {
          v175 = v173[305].u32[0];
          if (v174 + 16 * v175 > v171)
          {
            v176 = v175 - 1;
            LODWORD(v177) = v176 & ((v330 >> 4) ^ (v330 >> 9));
            v178 = (int32x2_t *****)(v174 + 16 * v177);
            v179 = *v178;
            if (v330 == *v178)
            {
LABEL_322:
              *v178 = (int32x2_t ****)-8192;
              v173[304] = vadd_s32(v173[304], (int32x2_t)0x1FFFFFFFFLL);
              v172 = v330;
            }
            else
            {
              v180 = 1;
              while (v179 != (int32x2_t ****)-4096)
              {
                v181 = v177 + v180++;
                v177 = v181 & v176;
                v179 = *(int32x2_t *****)(v174 + 16 * v177);
                if (v330 == v179)
                {
                  v178 = (int32x2_t *****)(v174 + 16 * v177);
                  goto LABEL_322;
                }
              }
            }
            *((_BYTE *)v172 + 17) &= ~1u;
          }
        }
      }
    }
    v182 = (uint64_t ***)v170[7];
    if (v182 != v164)
    {
      if (v182 && v182 != (uint64_t ***)-8192 && v182 != (uint64_t ***)-4096)
      {
        v207 = v170[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v207 = v170[6];
        v208 = (unint64_t *)v170[6];
        if (v208)
        {
          *v208 = *v208 & 7 | v207;
        }
        else
        {
          v209 = v170[7];
          v210 = ***(int32x2_t ****)v209;
          v211 = (unint64_t)v210[303];
          if (v211 <= v207)
          {
            v212 = v210[305].u32[0];
            if (v211 + 16 * v212 > v207)
            {
              v213 = v212 - 1;
              LODWORD(v214) = v213 & ((v209 >> 4) ^ (v209 >> 9));
              v215 = (uint64_t *)(v211 + 16 * v214);
              v216 = *v215;
              if (v209 == *v215)
              {
LABEL_371:
                *v215 = -8192;
                v210[304] = vadd_s32(v210[304], (int32x2_t)0x1FFFFFFFFLL);
                v209 = v170[7];
              }
              else
              {
                v217 = 1;
                while (v216 != -4096)
                {
                  v218 = v214 + v217++;
                  v214 = v218 & v213;
                  v216 = *(_QWORD *)(v211 + 16 * v214);
                  if (v209 == v216)
                  {
                    v215 = (uint64_t *)(v211 + 16 * v214);
                    goto LABEL_371;
                  }
                }
              }
              *(_BYTE *)(v209 + 17) &= ~1u;
            }
          }
        }
      }
      v170[7] = v164;
      if (v164 != (uint64_t ***)-8192 && v164 != (uint64_t ***)-4096 && v164)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v170 + 5));
    }
    LODWORD(v327) = 30;
    llvm::Instruction::dropUndefImplyingAttrsAndUnknownMetadata(v164, (unsigned int *)&v327, 1);
    v164[5] = (uint64_t **)v107;
    *(_WORD *)(v107 + 18) &= ~0x8000u;
    if ((*((_BYTE *)v164 + 23) & 0x10) != 0)
    {
      v205 = *(_QWORD *)(v107 + 56);
      if (v205)
      {
        v206 = *(llvm::ValueSymbolTable **)(v205 + 104);
        if (v206)
          llvm::ValueSymbolTable::reinsertValue(v206, (llvm::Value *)v164);
      }
    }
    v183 = *v161;
    v164[4] = v161;
    v164[3] = (uint64_t **)v183;
    v183[1] = (uint64_t)(v164 + 3);
    *v161 = (uint64_t *)(v164 + 3);
    llvm::Value::takeName((llvm::Value *)v164, (llvm::Value *)v162);
    if ((*((_BYTE *)v164 + 23) & 0x10) != 0)
    {
      v184 = ***v164;
      v185 = *(_QWORD *)(v184 + 152);
      v186 = *(unsigned int *)(v184 + 168);
      if (!(_DWORD)v186)
        goto LABEL_339;
      LODWORD(v187) = (v186 - 1) & ((v164 >> 4) ^ (v164 >> 9));
      v188 = (uint64_t ****)(v185 + 16 * v187);
      v189 = *v188;
      if (*v188 != v164)
      {
        v190 = 1;
        while (v189 != (uint64_t ***)-4096)
        {
          v191 = v187 + v190++;
          v187 = v191 & (v186 - 1);
          v189 = *(uint64_t ****)(v185 + 16 * v187);
          if (v189 == v164)
          {
            v188 = (uint64_t ****)(v185 + 16 * v187);
            goto LABEL_340;
          }
        }
LABEL_339:
        v188 = (uint64_t ****)(v185 + 16 * v186);
      }
LABEL_340:
      v192 = v188[1];
      v195 = (uint64_t)*v192;
      v194 = (char *)(v192 + 2);
      v193 = v195;
    }
    else
    {
      v193 = 0;
      v194 = &byte_1C871356D;
    }
    LOWORD(v331) = 773;
    v327 = v194;
    v328 = v193;
    v329 = ".old";
    llvm::Value::setName((uint64_t ***)v162, (uint64_t)&v327);
    v196 = *(_QWORD *)(v162 + 8);
    if (v196)
    {
      v197 = v164 + 1;
      do
      {
        v198 = v196;
        v199 = (uint64_t *)(v196 + 8);
        v196 = *(_QWORD *)(v196 + 8);
        v200 = v199[2];
        if (v200 && *(_BYTE *)(v200 + 16) == 83)
        {
          v201 = *(_DWORD *)(v200 + 20);
          v202 = (v201 & 0x40000000) != 0 ? *(_QWORD *)(v200 - 8) : v200 - 32 * (v201 & 0x7FFFFFF);
          if (*(_QWORD *)(v202
                         + 32 * *(unsigned int *)(v200 + 60)
                         + 8 * ((unint64_t)(v198 - v202) >> 5)) != v106)
          {
            if (*(_QWORD *)v198)
            {
              **(_QWORD **)(v198 + 16) = v196;
              v203 = *(_QWORD *)(v198 + 8);
              if (v203)
                *(_QWORD *)(v203 + 16) = *(_QWORD *)(v198 + 16);
            }
            *(_QWORD *)v198 = v164;
            v204 = v164[1];
            *(_QWORD *)(v198 + 8) = v204;
            if (v204)
              v204[2] = v199;
            *(_QWORD *)(v198 + 16) = v197;
            *v197 = v198;
          }
        }
      }
      while (v196);
    }
    goto LABEL_356;
  }
LABEL_377:
  v220 = (int32x2_t ****)*((_QWORD *)this - 12);
  v328 = 2;
  v329 = 0;
  v330 = v220;
  if (v220 != (int32x2_t ****)-8192 && v220 != (int32x2_t ****)-4096 && v220)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v328);
  v327 = &unk_1E814DA10;
  v331 = &v332;
  v221 = sub_1C52E2ED8((uint64_t)&v332, &v327);
  if (v330 != (int32x2_t ****)-8192 && v330 != (int32x2_t ****)-4096 && v330)
  {
    v222 = v328 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v328 & 0xFFFFFFFFFFFFFFF8) = v329;
    if (v329)
    {
      *(_QWORD *)v329 = *(_QWORD *)v329 & 7 | v222;
    }
    else
    {
      v223 = v330;
      v224 = ***v330;
      v225 = (unint64_t)v224[303];
      if (v225 <= v222)
      {
        v226 = v224[305].u32[0];
        if (v225 + 16 * v226 > v222)
        {
          v227 = v226 - 1;
          LODWORD(v228) = v227 & ((v330 >> 4) ^ (v330 >> 9));
          v229 = (int32x2_t *****)(v225 + 16 * v228);
          v230 = *v229;
          if (v330 == *v229)
          {
LABEL_392:
            *v229 = (int32x2_t ****)-8192;
            v224[304] = vadd_s32(v224[304], (int32x2_t)0x1FFFFFFFFLL);
            v223 = v330;
          }
          else
          {
            v231 = 1;
            while (v230 != (int32x2_t ****)-4096)
            {
              v232 = v228 + v231++;
              v228 = v232 & v227;
              v230 = *(int32x2_t *****)(v225 + 16 * v228);
              if (v330 == v230)
              {
                v229 = (int32x2_t *****)(v225 + 16 * v228);
                goto LABEL_392;
              }
            }
          }
          *((_BYTE *)v223 + 17) &= ~1u;
        }
      }
    }
  }
  v234 = (unsigned __int8 **)(v105 - 96);
  v233 = *(_QWORD **)(v105 - 96);
  v235 = (llvm::Constant **)v221[7];
  v327 = "or.cond";
  LOWORD(v331) = 259;
  v236 = sub_1C5F911C0((uint64_t)&v337, v310, v233, v235, (uint64_t)&v327);
  if (*(_QWORD *)(v105 - 96))
  {
    **(_QWORD **)(v105 - 80) = *(_QWORD *)(v105 - 88);
    v237 = *(_QWORD *)(v105 - 88);
    if (v237)
      *(_QWORD *)(v237 + 16) = *(_QWORD *)(v105 - 80);
  }
  *v234 = v236;
  if (v236)
  {
    v240 = *((_QWORD *)v236 + 1);
    v238 = (unsigned __int8 ***)(v236 + 8);
    v239 = v240;
    *(_QWORD *)(v105 - 88) = v240;
    if (v240)
      *(_QWORD *)(v239 + 16) = v105 - 88;
    *(_QWORD *)(v105 - 80) = v238;
    *v238 = v234;
  }
  v241 = *(_QWORD *)(v106 + 48);
  if (v241 != v110)
  {
    v242 = (uint64_t *)(v105 + 24);
    do
    {
      if (v241)
        v243 = (llvm::Instruction *)(v241 - 24);
      else
        v243 = 0;
      if (sub_1C4D99D08((uint64_t)v243))
      {
        llvm::Instruction::clone(v243);
        v245 = v244;
        v246 = (_QWORD *)operator new();
        *(_DWORD *)v246 = 3;
        v246[1] = 0;
        *((_DWORD *)v246 + 4) = 0;
        v246[5] = &v332;
        v246[3] = v246 + 5;
        v246[6] = 0;
        v246[4] = 0x200000001;
        v246[9] = v246 + 11;
        v246[10] = 0x400000000;
        v246[23] = v246 + 25;
        v246[24] = 0x100000000;
        v246[27] = v246 + 29;
        v246[28] = 0x1000000000;
        v323 = v246;
        v327 = v246;
        sub_1C5FD706C((uint64_t)v246, (uint64_t ***)v245);
        sub_1C5FD3718((uint64_t *)&v327, v247);
        llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v323, v248);
        v249 = *(_QWORD *)(v105 + 40);
        *(_QWORD *)(v245 + 40) = v249;
        *(_WORD *)(v249 + 18) &= ~0x8000u;
        if ((*(_BYTE *)(v245 + 23) & 0x10) != 0)
        {
          v252 = *(_QWORD *)(v249 + 56);
          if (v252)
          {
            v253 = *(llvm::ValueSymbolTable **)(v252 + 104);
            if (v253)
              llvm::ValueSymbolTable::reinsertValue(v253, (llvm::Value *)v245);
          }
        }
        v250 = *v242;
        *(_QWORD *)(v245 + 24) = *v242;
        *(_QWORD *)(v245 + 32) = v242;
        v251 = v245 + 24;
        *(_QWORD *)(v250 + 8) = v251;
        *v242 = v251;
      }
      v241 = *(_QWORD *)(v241 + 8);
    }
    while (v241 != v110);
  }
  if (v336)
  {
    sub_1C4E43068((uint64_t)&v334.i64[1]);
    MEMORY[0x1CAA32FB4](v334.i64[1], 8);
    v336 = 0;
  }
  v254 = (char *)v332;
  if (v334.i32[0])
  {
    v255 = (char *)v332 + 64 * (unint64_t)v334.u32[0];
    do
    {
      v256 = *((_QWORD *)v254 + 3);
      if ((v256 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v257 = *((_QWORD *)v254 + 7);
        if (v257)
        {
          if (v257 != -8192 && v257 != -4096)
          {
            v258 = *((_QWORD *)v254 + 5) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v258 = *((_QWORD *)v254 + 6);
            v259 = (unint64_t *)*((_QWORD *)v254 + 6);
            if (v259)
            {
              *v259 = *v259 & 7 | v258;
            }
            else
            {
              v260 = *((_QWORD *)v254 + 7);
              v261 = ***(int32x2_t ****)v260;
              v262 = (unint64_t)v261[303];
              if (v262 <= v258)
              {
                v263 = v261[305].u32[0];
                if (v262 + 16 * v263 > v258)
                {
                  v264 = v263 - 1;
                  LODWORD(v265) = v264 & ((v260 >> 4) ^ (v260 >> 9));
                  v266 = (uint64_t *)(v262 + 16 * v265);
                  v267 = *v266;
                  if (v260 == *v266)
                  {
LABEL_431:
                    *v266 = -8192;
                    v261[304] = vadd_s32(v261[304], (int32x2_t)0x1FFFFFFFFLL);
                    v260 = *((_QWORD *)v254 + 7);
                  }
                  else
                  {
                    v268 = 1;
                    while (v267 != -4096)
                    {
                      v269 = v265 + v268++;
                      v265 = v269 & v264;
                      v267 = *(_QWORD *)(v262 + 16 * v265);
                      if (v260 == v267)
                      {
                        v266 = (uint64_t *)(v262 + 16 * v265);
                        goto LABEL_431;
                      }
                    }
                  }
                  *(_BYTE *)(v260 + 17) &= ~1u;
                }
              }
            }
            v256 = *((_QWORD *)v254 + 3);
          }
        }
      }
      if (v256 != -4096 && v256 != -8192 && v256 != 0)
      {
        v271 = *((_QWORD *)v254 + 1) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v271 = *((_QWORD *)v254 + 2);
        v272 = (unint64_t *)*((_QWORD *)v254 + 2);
        if (v272)
        {
          *v272 = *v272 & 7 | v271;
        }
        else
        {
          v273 = *((_QWORD *)v254 + 3);
          v274 = ***(int32x2_t ****)v273;
          v275 = (unint64_t)v274[303];
          if (v275 <= v271)
          {
            v276 = v274[305].u32[0];
            if (v275 + 16 * v276 > v271)
            {
              v277 = v276 - 1;
              LODWORD(v278) = v277 & ((v273 >> 4) ^ (v273 >> 9));
              v279 = (uint64_t *)(v275 + 16 * v278);
              v280 = *v279;
              if (v273 == *v279)
              {
LABEL_450:
                *v279 = -8192;
                v274[304] = vadd_s32(v274[304], (int32x2_t)0x1FFFFFFFFLL);
                v273 = *((_QWORD *)v254 + 3);
              }
              else
              {
                v281 = 1;
                while (v280 != -4096)
                {
                  v282 = v278 + v281++;
                  v278 = v282 & v277;
                  v280 = *(_QWORD *)(v275 + 16 * v278);
                  if (v273 == v280)
                  {
                    v279 = (uint64_t *)(v275 + 16 * v278);
                    goto LABEL_450;
                  }
                }
              }
              *(_BYTE *)(v273 + 17) &= ~1u;
            }
          }
        }
      }
      v254 += 64;
    }
    while (v254 != v255);
    v254 = (char *)v332;
  }
  MEMORY[0x1CAA32FB4](v254, 8);
  if (v337 != &v339)
    free(v337);
  v19 = 1;
LABEL_197:
  if (v324 != v326)
    free(v324);
  return v19;
}

uint64_t sub_1C5F8891C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  char *v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int v46;
  _BYTE v47[128];
  _QWORD v48[4];

  v48[2] = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
  {
    v16 = 0;
    return v16 & 1;
  }
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(v5 + 40);
  if (v7 == v5 + 40)
  {
LABEL_18:
    v43 = v47;
    v44 = v47;
    v45 = 16;
    v46 = 0;
  }
  else
  {
    if (v7)
      v8 = v7 - 24;
    else
      v8 = 0;
    v9 = *(unsigned __int8 *)(v8 + 16);
    v10 = v9 - 29;
    if (v9 == 30)
    {
      if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) == 3)
        v11 = 2;
      else
        v11 = 1;
LABEL_10:
      v43 = v47;
      v44 = v47;
      v45 = 16;
      v46 = 0;
    }
    else
    {
      v11 = 2;
      switch(v10)
      {
        case 1:
LABEL_71:
          __break(1u);
LABEL_72:
          v20 = (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) - 1;
LABEL_66:
          if (!v20)
            goto LABEL_67;
          goto LABEL_27;
        case 2:
          v11 = (*(_DWORD *)(v8 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 3:
        case 9:
          v11 = (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) - 1;
          break;
        case 4:
          goto LABEL_10;
        case 7:
          v11 = *(_WORD *)(v8 + 18) & 1;
          break;
        case 8:
          v11 = 1;
          goto LABEL_10;
        case 10:
          v11 = *(_DWORD *)(v8 + 80) + 1;
          break;
        default:
          goto LABEL_18;
      }
      v43 = v47;
      v44 = v47;
      v45 = 16;
      v46 = 0;
      if (!v11)
        goto LABEL_19;
    }
    v12 = 0;
    v13 = v11;
    v14 = (uint64_t *)(v8 - 32);
    do
    {
      v15 = *(unsigned __int8 *)(v8 + 16);
      if (v15 != 30)
        __asm { BR              X9 }
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v43, *v14);
      ++v12;
      v14 -= 4;
    }
    while (v13 != v12);
  }
LABEL_19:
  v17 = *(_QWORD *)(v6 + 40);
  if (v17 == v6 + 40)
  {
LABEL_67:
    v22 = 0;
    goto LABEL_61;
  }
  if (v17)
    v3 = v17 - 24;
  else
    v3 = 0;
  v18 = *(unsigned __int8 *)(v3 + 16);
  v19 = v18 - 29;
  if (v18 == 30)
  {
    if ((*(_DWORD *)(v3 + 20) & 0x7FFFFFF) == 3)
      v20 = 2;
    else
      v20 = 1;
LABEL_27:
    v21 = 0;
    v22 = 0;
    v23 = v20;
    while (1)
    {
      v42 = 0;
      v24 = *(unsigned __int8 *)(v3 + 16);
      if (v24 != 30)
        __asm { BR              X9 }
      v42 = *(_QWORD *)(v3 - 32 - 32 * v21);
      v25 = (char *)sub_1C477672C((uint64_t)&v43, v42);
      if (v44 == v43)
        v26 = (uint64_t *)((char *)&v45 + 4);
      else
        v26 = &v45;
      if (v25 == &v44[8 * *(unsigned int *)v26])
        goto LABEL_54;
      v48[0] = v5;
      v48[1] = v6;
      if ((sub_1C5F90DD8(v42, v48, 2, 0) & 1) != 0)
        goto LABEL_54;
      if (!a3)
      {
        v22 = 1;
        goto LABEL_61;
      }
      if ((*(_BYTE *)a3 & 1) != 0)
      {
        v27 = 4;
        v28 = a3 + 8;
      }
      else
      {
        v27 = *(_DWORD *)(a3 + 16);
        if (!v27)
        {
          v37 = 0;
LABEL_50:
          v38 = sub_1C5648ADC(a3, (uint64_t)&v42, &v42, v37);
          *v38 = v42;
          v39 = v42;
          v40 = *(unsigned int *)(a3 + 48);
          if (v40 >= *(unsigned int *)(a3 + 52))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 40, a3 + 56, v40 + 1, 8);
            v40 = *(unsigned int *)(a3 + 48);
          }
          *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v40) = v39;
          ++*(_DWORD *)(a3 + 48);
          goto LABEL_53;
        }
        v28 = *(_QWORD *)(a3 + 8);
      }
      v29 = v27 - 1;
      v30 = ((v42 >> 4) ^ (v42 >> 9)) & v29;
      v31 = (_QWORD *)(v28 + 8 * v30);
      v32 = *v31;
      if (v42 != *v31)
      {
        v33 = 0;
        v34 = 1;
        while (v32 != -4096)
        {
          if (v33)
            v35 = 0;
          else
            v35 = v32 == -8192;
          if (v35)
            v33 = v31;
          v36 = v30 + v34++;
          v30 = v36 & v29;
          v31 = (_QWORD *)(v28 + 8 * v30);
          v32 = *v31;
          v22 = 1;
          if (v42 == *v31)
            goto LABEL_54;
        }
        if (v33)
          v37 = v33;
        else
          v37 = v31;
        goto LABEL_50;
      }
LABEL_53:
      v22 = 1;
LABEL_54:
      if (++v21 == v23)
        goto LABEL_61;
    }
  }
  v20 = 2;
  v22 = 0;
  switch(v19)
  {
    case 0:
    case 5:
    case 6:
      break;
    case 1:
      goto LABEL_71;
    case 2:
      v20 = (*(_DWORD *)(v3 + 20) >> 1) & 0x3FFFFFF;
      goto LABEL_66;
    case 3:
    case 9:
      goto LABEL_72;
    case 4:
      goto LABEL_27;
    case 7:
      v20 = *(_WORD *)(v3 + 18) & 1;
      goto LABEL_66;
    case 8:
      v20 = 1;
      goto LABEL_27;
    case 10:
      v20 = *(_DWORD *)(v3 + 80) + 1;
      goto LABEL_66;
    default:
      goto LABEL_67;
  }
LABEL_61:
  v16 = v22 ^ 1;
  if (v44 != v43)
    free(v44);
  return v16 & 1;
}

uint64_t sub_1C5F88ED4(uint64_t a1, uint64_t a2, llvm::Instruction *this, _QWORD *a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  llvm::Instruction **v13;
  llvm::Instruction *v14;
  llvm::Instruction **v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  llvm::Instruction **v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;

  if (!a4)
    goto LABEL_24;
  if ((*((_BYTE *)this + 23) & 0x20) == 0)
    goto LABEL_17;
  v8 = ***(_QWORD ***)this;
  v37 = (unint64_t)this;
  v9 = *(_DWORD *)(v8 + 2496);
  if (!v9)
  {
    v32 = 0;
LABEL_47:
    v13 = (llvm::Instruction **)sub_1C541AB24(v8 + 2480, (uint64_t)&v37, (uint64_t *)&v37, v32);
    v33 = v37;
    v13[3] = 0;
    v13[4] = 0;
    *v13 = (llvm::Instruction *)v33;
    v13[1] = (llvm::Instruction *)(v13 + 3);
    v13[2] = (llvm::Instruction *)0x100000000;
    goto LABEL_13;
  }
  v10 = *(_QWORD *)(v8 + 2480);
  v11 = v9 - 1;
  v12 = v11 & ((this >> 4) ^ (this >> 9));
  v13 = (llvm::Instruction **)(v10 + 40 * v12);
  v14 = *v13;
  if (*v13 != this)
  {
    v15 = 0;
    v16 = 1;
    while (v14 != (llvm::Instruction *)-4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == (llvm::Instruction *)-8192;
      if (v17)
        v15 = v13;
      v18 = v12 + v16++;
      v12 = v18 & v11;
      v13 = (llvm::Instruction **)(v10 + 40 * v12);
      v14 = *v13;
      if (*v13 == this)
        goto LABEL_13;
    }
    if (v15)
      v32 = v15;
    else
      v32 = v13;
    goto LABEL_47;
  }
LABEL_13:
  v19 = *((unsigned int *)v13 + 4);
  if ((_DWORD)v19)
  {
    v20 = (_QWORD *)((char *)v13[1] + 8);
    v21 = 16 * v19;
    while (*((_DWORD *)v20 - 2) != 15)
    {
      v20 += 2;
      v21 -= 16;
      if (!v21)
        goto LABEL_17;
    }
    if (*v20)
      goto LABEL_24;
  }
LABEL_17:
  v36 = 0;
  v37 = 0;
  if (!llvm::Instruction::extractProfMetadata(this, &v37, &v36) || (v22 = v36 + v37) == 0)
  {
LABEL_24:
    result = 0xFFFFFFFFLL;
    LODWORD(v24) = -1;
    goto LABEL_25;
  }
  v23 = HIDWORD(v22);
  if (HIDWORD(v22))
  {
    LOBYTE(v23) = 0;
    v34 = v36 + v37;
    do
    {
      v22 = v34 >> 1;
      LOBYTE(v23) = v23 + 1;
      v35 = v34 >> 33;
      v34 >>= 1;
    }
    while (v35);
  }
  v24 = v37 >> v23;
  if (v22 != 0x80000000)
    v24 = (((unint64_t)(v37 >> v23) << 31) | (v22 >> 1)) / v22;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 80))(*a4);
LABEL_25:
  v26 = *((_QWORD *)this - 4);
  v27 = *(_QWORD *)(a2 - 32);
  if (v26 == v27)
  {
    if ((_DWORD)v24 == -1 || v24 < result)
    {
      v30 = 29;
      goto LABEL_42;
    }
  }
  else
  {
    v28 = *((_QWORD *)this - 8);
    v29 = *(_QWORD *)(a2 - 64);
    if (v28 == v29)
    {
      if ((_DWORD)v24 == -1 || 0x80000000 - v24 < result)
      {
        v30 = 28;
        goto LABEL_42;
      }
    }
    else if (v26 == v29)
    {
      if ((_DWORD)v24 == -1 || v24 < result)
      {
        v30 = 0x10000001CLL;
        goto LABEL_42;
      }
    }
    else if (v28 == v27 && ((_DWORD)v24 == -1 || 0x80000000 - v24 < result))
    {
      v30 = 0x10000001DLL;
LABEL_42:
      *(_QWORD *)a1 = v30;
      v31 = 1;
      goto LABEL_43;
    }
  }
  v31 = 0;
  *(_BYTE *)a1 = 0;
LABEL_43:
  *(_BYTE *)(a1 + 8) = v31;
  return result;
}

void llvm::simplifyCFG(llvm *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD v7[7];

  v6 = *(_QWORD *)(*((_QWORD *)a1 + 7) + 40) + 272;
  v7[0] = a2;
  v7[1] = a3;
  v7[2] = v6;
  v7[3] = a5;
  v7[4] = a6;
  v7[5] = a4;
  sub_1C5F89198((uint64_t)v7, a1);
}

void sub_1C5F89198(uint64_t a1, llvm *this)
{
  llvm *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v10;
  llvm *v11;
  llvm::BasicBlock *v12;
  uint64_t SinglePredecessor;
  llvm::BasicBlock *v14;
  llvm::BasicBlock *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  llvm::BasicBlock *v26;
  llvm::BasicBlock *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  void *v35;
  llvm::BasicBlock **v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  llvm *v44;
  uint64_t ***IfCondition;
  llvm::BasicBlock *v46;
  llvm::Type *v47;
  llvm::DSOLocalEquivalent **v48;
  uint64_t ***v49;
  llvm::ValueAsMetadata *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  llvm *v73;
  char *v74;
  char *v75;
  llvm::Value *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  unsigned __int8 **v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  llvm::DomTreeUpdater *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  BOOL v99;
  BOOL v100;
  unsigned int v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  BOOL v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  BOOL v119;
  unsigned int v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  int v135;
  BOOL v136;
  unsigned int v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int v144;
  unsigned int v145;
  const llvm::BasicBlock *v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  BOOL v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v160;
  uint64_t v161;
  llvm::Instruction **v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  llvm *v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  llvm *v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  llvm *v183;
  uint64_t v184;
  int v185;
  llvm::Value **v186;
  uint64_t v187;
  uint64_t v188;
  llvm *v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v196;
  uint64_t v197;
  llvm *v198;
  uint64_t v199;
  unsigned int v200;
  BOOL v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  llvm *v205;
  unsigned int v206;
  uint64_t v208;
  llvm *v209;
  int v210;
  const llvm::Instruction *v211;
  const llvm::Instruction *v212;
  int v213;
  uint64_t v214;
  unsigned __int8 *v215;
  uint64_t v216;
  llvm *v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void **v224;
  _DWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  int v228;
  char *v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  _QWORD *v242;
  char v243;
  uint64_t v244;
  uint64_t v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  BOOL v251;
  char v252;
  char v253;
  uint64_t v254;
  char v255;
  unsigned int v256;
  uint64_t v258;
  char v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  char v266;
  uint64_t v267;
  char v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  int v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  _QWORD *v284;
  uint64_t v285;
  unsigned int v286;
  BOOL v287;
  char *v289;
  char v290;
  char *v291;
  llvm::ValueAsMetadata *v292;
  int v293;
  llvm::Instruction *v294;
  uint64_t ***v295;
  uint64_t **v296;
  uint64_t **v297;
  BOOL v298;
  int v299;
  uint64_t **v300;
  _QWORD *v301;
  unsigned int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t ****v307;
  uint64_t ***v308;
  int v309;
  int v310;
  uint64_t ***v311;
  uint64_t **v312;
  char *v313;
  uint64_t **v314;
  uint64_t v315;
  unsigned int v316;
  uint64_t v317;
  uint64_t *v318;
  llvm::Value *v319;
  uint64_t **v320;
  uint64_t **v321;
  int v322;
  llvm::Value *v323;
  uint64_t v324;
  uint64_t v325;
  llvm::Value *v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t ****v335;
  uint64_t ***v336;
  int v337;
  int v338;
  uint64_t ***v339;
  uint64_t **v340;
  char *v341;
  uint64_t **v342;
  uint64_t v343;
  _QWORD *v344;
  unsigned int v345;
  uint64_t v346;
  llvm::Value *v347;
  uint64_t v348;
  char *v349;
  __int16 v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  llvm::ValueAsMetadata *v354;
  llvm::ValueAsMetadata *v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;
  llvm::ValueAsMetadata *v361;
  int v362;
  unsigned int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  int v368;
  uint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  llvm::ValueAsMetadata *v372;
  uint64_t v373;
  llvm::ValueSymbolTable *v374;
  llvm::ValueAsMetadata *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  int v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  _QWORD *v392;
  unsigned int v393;
  BOOL v395;
  int v396;
  uint64_t v397;
  unint64_t v398;
  char *v399;
  unint64_t v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  int v404;
  uint64_t *v405;
  uint64_t v406;
  llvm::ValueAsMetadata *v407;
  uint64_t v408;
  uint64_t v409;
  _QWORD *v410;
  llvm::Value *v411;
  unint64_t *v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  _QWORD *v417;
  _QWORD *v418;
  uint64_t v419;
  llvm::ValueAsMetadata *v420;
  uint64_t v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  llvm::ValueSymbolTable *v427;
  int v428;
  unsigned int v429;
  llvm::ValueAsMetadata *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  char *v434;
  int v435;
  const llvm::DILocation *v436;
  llvm::DILocation *MergedLocation;
  uint64_t v438;
  llvm::BasicBlock *v439;
  _QWORD *v440;
  _QWORD *v441;
  int v442;
  int v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  _QWORD *v448;
  int v449;
  llvm::BasicBlock *v450;
  _DWORD *v451;
  uint64_t v452;
  _QWORD *v453;
  unsigned __int8 **v454;
  unsigned __int8 *v455;
  llvm::Value *v457;
  uint64_t v458;
  uint64_t v459;
  int v460;
  uint64_t v461;
  uint64_t v462;
  char v463;
  int64_t v464;
  int v465;
  unint64_t v466;
  uint64_t *v467;
  int v468;
  uint64_t v469;
  char *v470;
  uint64_t v471;
  char *v472;
  uint64_t v473;
  char *v474;
  llvm::UndefValue *v475;
  uint64_t v476;
  _QWORD *v477;
  int v478;
  uint64_t *v479;
  int v480;
  uint64_t v481;
  uint64_t v482;
  char v483;
  uint64_t v484;
  int v485;
  _DWORD *v486;
  uint64_t v487;
  int v488;
  uint64_t *v489;
  uint64_t **v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t *v493;
  uint64_t v494;
  unsigned int v495;
  BOOL v496;
  _DWORD *v497;
  int v498;
  unsigned int v499;
  void **v500;
  uint64_t v501;
  _QWORD *v502;
  uint64_t v503;
  uint64_t *v504;
  uint64_t v505;
  uint64_t v506;
  _QWORD *v507;
  uint64_t *v508;
  unsigned int v509;
  uint64_t *v510;
  uint64_t v511;
  uint64_t v512;
  _QWORD *v513;
  void *v514;
  uint64_t *v515;
  uint64_t v516;
  _QWORD *v517;
  unsigned int *v518;
  unsigned int v519;
  void **v520;
  uint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  uint64_t *v524;
  uint64_t v525;
  uint64_t v526;
  _QWORD *v527;
  uint64_t *v528;
  unsigned int v529;
  _BOOL4 v530;
  int v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  void *v535;
  uint64_t v536;
  unsigned int v537;
  unsigned int v539;
  _QWORD *v540;
  uint64_t v541;
  uint64_t v542;
  int v543;
  uint64_t v544;
  int v545;
  int v546;
  char *v547;
  char *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  _QWORD *v552;
  uint64_t *v553;
  uint64_t v554;
  llvm::Instruction **v555;
  uint64_t v556;
  uint64_t v557;
  char *v558;
  llvm::Instruction *v559;
  int v560;
  uint64_t v561;
  char v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  BOOL v566;
  int v567;
  int v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  llvm::Value *Select;
  uint64_t v579;
  _QWORD *v580;
  uint64_t v581;
  uint64_t v582;
  int v583;
  char *v584;
  char *v585;
  llvm::Value *v586;
  uint64_t v587;
  _QWORD *v588;
  char *v589;
  char *v590;
  unsigned __int8 **v591;
  int v592;
  unsigned __int8 *v593;
  unsigned __int8 *v594;
  unsigned __int8 *v595;
  llvm *v596;
  char *v597;
  int v598;
  int v599;
  unsigned int v600;
  uint64_t v601;
  uint64_t v602;
  char *v603;
  unsigned int v604;
  char *v605;
  uint64_t v606;
  int v607;
  uint64_t v608;
  llvm **v609;
  uint64_t **v610;
  uint64_t **v611;
  int v612;
  char *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  int v617;
  _BYTE *v618;
  char *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  int v632;
  uint64_t v633;
  unsigned int v634;
  uint64_t v635;
  int v636;
  int v637;
  char *v638;
  int v639;
  uint64_t v640;
  uint64_t v641;
  int v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  llvm::Value *v647;
  uint64_t **v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t *v653;
  uint64_t v654;
  int v655;
  int v656;
  _QWORD *v657;
  void *v658;
  char *v659;
  void *v660;
  uint64_t *v661;
  _QWORD *v662;
  _QWORD *v663;
  char *v664;
  uint64_t v665;
  _QWORD *v666;
  _QWORD *v667;
  char *v668;
  uint64_t v669;
  uint64_t v670;
  int v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  llvm::ValueSymbolTable *v676;
  int v677;
  uint64_t v678;
  uint64_t v679;
  unint64_t v680;
  uint64_t v681;
  int v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  _QWORD *v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  char *v691;
  char *v692;
  char *v693;
  unsigned int v694;
  uint64_t v695;
  llvm::Instruction *v697;
  uint64_t *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  llvm::ValueAsMetadata *v702;
  uint64_t v703;
  _QWORD *v704;
  uint64_t ****v705;
  uint64_t v706;
  uint64_t ***v707;
  uint64_t **v708;
  uint64_t **v709;
  char v710;
  uint64_t **v711;
  uint64_t **v712;
  void *v713;
  llvm *v714;
  uint64_t v715;
  unsigned int v716;
  uint64_t v717;
  uint64_t *v718;
  void *v719;
  int64x2_t v720;
  llvm::BasicBlock *v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  llvm::BasicBlock *v729;
  int v730;
  int v731;
  int v732;
  int v733;
  int v734;
  uint64_t v735;
  _WORD *v736;
  __int16 v737;
  char v738;
  char *v739;
  char *v740;
  char *v741;
  uint64_t v742;
  void *v743;
  char *v744;
  uint64_t v745;
  unint64_t v746;
  uint64_t v747;
  unint64_t v748;
  char *v749;
  llvm::BasicBlock **v750;
  llvm::BasicBlock **v751;
  llvm::BasicBlock **v752;
  llvm::BasicBlock *v753;
  _BOOL4 v754;
  int v755;
  unint64_t v756;
  _QWORD *v757;
  _QWORD *v758;
  _QWORD *v759;
  _QWORD *v760;
  _QWORD *v761;
  uint64_t v762;
  _QWORD *v763;
  _QWORD *v764;
  llvm::BasicBlock *v765;
  int v766;
  uint64_t v767;
  int v768;
  llvm::Type *v769;
  llvm::Value *v770;
  uint64_t v771;
  _QWORD *v772;
  llvm::Value *PersonalityFn;
  const llvm::Value *v774;
  __int16 v775;
  llvm::BasicBlock *v776;
  uint64_t v777;
  uint64_t v778;
  llvm::BasicBlock *v779;
  uint64_t v780;
  BOOL v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  BOOL v785;
  uint64_t v786;
  llvm::DomTreeUpdater *v787;
  llvm::Value *v788;
  llvm::BasicBlock *v789;
  _QWORD *v790;
  _QWORD *v791;
  _QWORD *v792;
  uint64_t *v793;
  uint64_t ii;
  uint64_t v795;
  unsigned int v796;
  BOOL v797;
  uint64_t v799;
  uint64_t v800;
  llvm::ValueAsMetadata *v801;
  unint64_t *v802;
  unint64_t *v803;
  llvm::ValueAsMetadata *v804;
  _QWORD *v805;
  uint64_t v806;
  uint64_t v807;
  const llvm::SwitchInst *v808;
  llvm::DomTreeUpdater *v809;
  int v810;
  int v811;
  uint64_t v812;
  uint64_t v813;
  llvm::BasicBlock **v814;
  uint64_t v815;
  uint64_t v816;
  _DWORD *v817;
  int v818;
  unsigned int v819;
  char *v820;
  uint64_t v821;
  uint64_t v822;
  int v823;
  llvm::ValueAsMetadata *v824;
  uint64_t v825;
  uint64_t v826;
  llvm::BasicBlock **v827;
  uint64_t v828;
  llvm::ValueAsMetadata *v829;
  llvm::UnreachableInst *v830;
  uint64_t v831;
  _QWORD *v832;
  uint64_t v833;
  unint64_t v834;
  unint64_t v835;
  char *v836;
  __int16 v837;
  llvm::BasicBlock *v838;
  llvm::ValueAsMetadata *v839;
  unint64_t *v840;
  unint64_t *v841;
  char *v842;
  unint64_t *v843;
  unint64_t *v844;
  uint64_t v845;
  unint64_t v846;
  unint64_t v847;
  llvm::ValueAsMetadata *v848;
  char *v849;
  int v850;
  uint64_t v851;
  char *v852;
  unint64_t *v853;
  int v854;
  unint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  llvm::BasicBlock **v859;
  uint64_t v860;
  llvm::BasicBlock *v861;
  uint64_t v862;
  llvm::BasicBlock **v863;
  llvm::ValueAsMetadata *v864;
  unint64_t *v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  char *v869;
  char *v870;
  uint64_t v871;
  _QWORD *v872;
  uint64_t v873;
  char *v874;
  char *v875;
  unsigned __int8 **v876;
  int v877;
  unsigned __int8 *v878;
  unsigned __int8 *v879;
  unsigned __int8 *v880;
  uint64_t v881;
  unint64_t v882;
  unint64_t v883;
  char *v884;
  uint64_t v885;
  unint64_t v886;
  unint64_t v887;
  char *v888;
  uint64_t v889;
  char *v890;
  char *v891;
  uint64_t v892;
  _QWORD *v893;
  uint64_t v894;
  char *v895;
  char *v896;
  unsigned __int8 **v897;
  int v898;
  unsigned __int8 *v899;
  unsigned __int8 *v900;
  unsigned __int8 *v901;
  llvm::ValueAsMetadata **v902;
  unint64_t *v903;
  __int16 v904;
  int v905;
  int v906;
  uint64_t v907;
  uint64_t jj;
  uint64_t v909;
  unsigned int v910;
  BOOL v911;
  llvm::DomTreeUpdater *v913;
  llvm **v914;
  llvm::ValueAsMetadata *v915;
  uint64_t v916;
  llvm *v917;
  uint64_t v918;
  uint64_t v919;
  unsigned int v920;
  BOOL v921;
  char *v923;
  unint64_t *v924;
  llvm::UnreachableInst *v925;
  uint64_t v926;
  _QWORD *v927;
  int v928;
  uint64_t v929;
  uint64_t v930;
  unint64_t v931;
  unint64_t v932;
  unint64_t *v933;
  llvm::ValueAsMetadata *v934;
  uint64_t v935;
  unint64_t v936;
  unint64_t v937;
  unint64_t v938;
  unint64_t v939;
  unint64_t v940;
  char *v941;
  char *v942;
  unint64_t *v943;
  unint64_t v944;
  llvm::ValueAsMetadata *v945;
  uint64_t v946;
  unint64_t v947;
  unint64_t v948;
  unint64_t v949;
  unint64_t v950;
  unint64_t v951;
  char *v952;
  char *v953;
  llvm::ValueAsMetadata *v954;
  unsigned int v955;
  BOOL v956;
  llvm::Value *v958;
  uint64_t v959;
  llvm::UnreachableInst *v960;
  uint64_t v961;
  _QWORD *v962;
  llvm::DomTreeUpdater *v963;
  char *FirstNonPHIOrDbg;
  int v965;
  uint64_t v966;
  uint64_t v967;
  char v968;
  int v969;
  uint64_t v970;
  llvm::UnreachableInst *v971;
  uint64_t v972;
  uint64_t *v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  int v977;
  uint64_t v978;
  uint64_t v979;
  int v980;
  uint64_t v981;
  void *v982;
  uint64_t v983;
  llvm::DomTreeUpdater *v984;
  void *v985;
  uint64_t m;
  uint64_t v987;
  uint64_t v988;
  _QWORD *v989;
  uint64_t v990;
  BOOL v991;
  _BOOL4 v992;
  uint64_t v993;
  _QWORD *v994;
  _QWORD *v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  int v999;
  int64x2_t *v1000;
  int v1001;
  unsigned int v1002;
  uint64_t *v1003;
  void *v1004;
  uint64_t *v1005;
  int v1006;
  BOOL v1007;
  unsigned int v1008;
  uint64_t *v1009;
  _QWORD *v1010;
  void *v1011;
  uint64_t v1012;
  uint64_t v1013;
  char *v1014;
  char *v1015;
  llvm::Value *v1016;
  char *v1017;
  uint64_t v1018;
  _QWORD *v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  BOOL v1024;
  int64x2_t *v1025;
  uint64_t v1026;
  uint64_t n;
  int v1028;
  unsigned int v1029;
  unsigned int v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  unsigned int v1034;
  BOOL v1035;
  uint64_t v1037;
  uint64_t v1038;
  unsigned int v1039;
  BOOL v1040;
  uint64_t v1042;
  uint64_t *v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  _QWORD *v1047;
  char *v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  llvm::ValueSymbolTable *v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  unsigned int v1056;
  BOOL v1057;
  uint64_t v1059;
  llvm::BasicBlock *v1060;
  _QWORD *v1061;
  uint64_t v1062;
  _QWORD *v1063;
  BOOL v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  BOOL v1068;
  uint64_t v1069;
  llvm::DomTreeUpdater *v1070;
  uint64_t v1071;
  uint64_t v1072;
  unsigned int v1073;
  BOOL v1074;
  uint64_t v1076;
  uint64_t v1077;
  unsigned int v1078;
  BOOL v1079;
  _QWORD *v1081;
  _QWORD *v1082;
  uint64_t *v1083;
  char **v1084;
  char *v1085;
  uint64_t v1086;
  uint64_t v1087;
  BOOL v1088;
  int v1089;
  uint64_t *v1090;
  _QWORD **v1091;
  _QWORD **v1092;
  uint64_t v1093;
  unsigned __int8 *v1094;
  int v1095;
  unsigned __int8 *v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t UniqueSuccessor;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  unsigned int v1104;
  BOOL v1105;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  _QWORD *v1110;
  llvm::BasicBlock *v1111;
  _DWORD *v1112;
  uint64_t v1113;
  _QWORD *v1114;
  int v1115;
  unint64_t v1116;
  uint64_t v1117;
  llvm::Instruction *v1118;
  llvm::Instruction *v1119;
  unsigned int v1121;
  BOOL v1122;
  uint64_t i;
  uint64_t v1125;
  unsigned int v1126;
  BOOL v1127;
  uint64_t j;
  llvm *v1130;
  llvm *v1131;
  uint64_t v1132;
  uint64_t v1133;
  unsigned int v1134;
  BOOL v1135;
  llvm::BasicBlock *v1137;
  _QWORD *v1138;
  _QWORD *v1139;
  _QWORD *v1140;
  llvm::Instruction *v1141;
  uint64_t v1142;
  _QWORD *v1143;
  uint64_t v1144;
  int kk;
  int v1146;
  uint64_t v1147;
  uint64_t v1148;
  _QWORD *v1149;
  _QWORD *v1150;
  uint64_t v1151;
  uint64_t v1152;
  _BOOL4 v1153;
  uint64_t v1154;
  uint64_t v1155;
  unsigned int v1156;
  BOOL v1157;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  int v1163;
  uint64_t v1164;
  uint64_t v1165;
  uint64_t v1166;
  uint64_t v1167;
  unsigned int v1168;
  BOOL v1169;
  uint64_t v1171;
  uint64_t v1172;
  int v1173;
  uint64_t v1174;
  llvm::PHINode *v1175;
  uint64_t v1176;
  _QWORD *v1177;
  uint64_t v1178;
  unsigned __int8 *v1179;
  int v1180;
  uint64_t v1181;
  uint64_t v1182;
  unsigned int v1183;
  BOOL v1184;
  llvm::Type *v1186;
  llvm::UndefValue *v1187;
  uint64_t v1188;
  unsigned int v1189;
  BOOL v1190;
  uint64_t v1192;
  uint64_t v1193;
  unsigned int v1194;
  BOOL v1195;
  char *v1197;
  unint64_t *v1198;
  unint64_t *v1199;
  uint64_t v1200;
  uint64_t v1201;
  unsigned int v1202;
  BOOL v1203;
  uint64_t v1205;
  llvm *v1206;
  _QWORD *v1207;
  unsigned __int8 *v1208;
  llvm::User *v1209;
  llvm::Value *v1210;
  unint64_t *v1211;
  uint64_t v1212;
  unint64_t v1213;
  unint64_t v1214;
  char *v1215;
  llvm **v1216;
  unint64_t *v1217;
  uint64_t v1218;
  unint64_t v1219;
  unint64_t v1220;
  char *v1221;
  llvm **v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  int v1229;
  _QWORD *v1230;
  uint64_t v1231;
  llvm::ValueSymbolTable *v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  llvm::Type *v1237;
  llvm::DSOLocalEquivalent **v1238;
  uint64_t v1239;
  uint64_t **v1240;
  uint64_t v1241;
  uint64_t v1242;
  void *v1243;
  int v1244;
  unint64_t v1245;
  char *v1246;
  int v1247;
  uint64_t v1248;
  char *v1249;
  uint64_t v1250;
  char *v1251;
  uint64_t v1252;
  char *v1253;
  uint64_t v1254;
  _QWORD *v1255;
  const llvm::APInt *v1256;
  int v1257;
  uint64_t *v1258;
  uint64_t *v1259;
  llvm::UndefValue *v1260;
  uint64_t v1261;
  _QWORD *v1262;
  uint64_t v1263;
  llvm::Value *v1264;
  llvm::ConstantInt *v1265;
  uint64_t v1266;
  _QWORD *v1267;
  int v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  llvm::PHINode *v1274;
  uint64_t *v1275;
  uint64_t v1276;
  llvm::ValueHandleBase *v1277;
  llvm::ValueHandleBase *v1278;
  int v1279;
  BOOL v1280;
  llvm::ValueHandleBase *v1281;
  llvm::Value *v1282;
  uint64_t v1283;
  _QWORD *v1284;
  _QWORD *v1285;
  _QWORD **v1286;
  uint64_t v1287;
  unsigned int v1288;
  uint64_t v1289;
  uint64_t *v1290;
  _QWORD **v1291;
  const llvm::SwitchInst *v1292;
  unint64_t v1293;
  uint64_t v1294;
  uint64_t *v1295;
  _QWORD *v1296;
  uint64_t v1297;
  llvm::ValueAsMetadata *v1298;
  uint64_t v1299;
  uint64_t v1300;
  unint64_t *v1301;
  uint64_t v1302;
  uint64_t v1303;
  llvm *v1304;
  uint64_t v1305;
  unint64_t v1306;
  unint64_t v1307;
  char *v1308;
  char *v1309;
  char *v1310;
  uint64_t v1311;
  unint64_t v1312;
  unint64_t v1313;
  char *v1314;
  char *v1315;
  _QWORD *v1316;
  _QWORD *v1317;
  _QWORD *v1318;
  uint64_t v1319;
  uint64_t v1320;
  _QWORD *v1321;
  _QWORD *v1322;
  uint64_t v1323;
  llvm::Instruction *v1324;
  llvm::Instruction *v1325;
  int v1326;
  int v1327;
  int v1328;
  int v1329;
  llvm::ConstantInt *v1330;
  unsigned int v1331;
  char v1332;
  char *v1333;
  char *v1334;
  llvm::Value *v1335;
  _QWORD *v1336;
  uint64_t v1337;
  char *v1338;
  char *v1339;
  unsigned __int8 **v1340;
  int v1341;
  unsigned __int8 *v1342;
  unsigned __int8 *v1343;
  unsigned __int8 *v1344;
  uint64_t v1345;
  uint64_t *v1346;
  uint64_t k;
  llvm *v1348;
  llvm::BasicBlock **v1349;
  llvm::BasicBlock *v1350;
  uint64_t v1351;
  uint64_t v1352;
  unint64_t v1353;
  char *v1354;
  char *v1355;
  char *v1356;
  uint64_t v1357;
  _QWORD *v1358;
  llvm::ConstantInt *v1359;
  llvm::ConstantInt *v1360;
  unsigned int v1361;
  char v1362;
  unint64_t v1363;
  unint64_t v1364;
  uint64_t v1365;
  uint64_t v1366;
  char *v1367;
  _QWORD *v1368;
  llvm::ValueAsMetadata *v1369;
  char v1370;
  char *v1371;
  uint64_t v1372;
  char v1373;
  uint64_t v1374;
  _BYTE *v1375;
  uint64_t *v1376;
  uint64_t v1377;
  unint64_t v1378;
  uint64_t *v1379;
  uint64_t v1380;
  uint64_t v1381;
  llvm *v1382;
  char *v1383;
  int v1384;
  unint64_t v1385;
  char *v1386;
  void *v1387;
  int64x2_t v1388;
  int v1389;
  llvm::Value *v1390;
  llvm::Value *v1391;
  int v1392;
  char v1393;
  llvm::Value *v1394;
  llvm::Value *v1395;
  llvm::Value *v1396;
  llvm::Value *v1397;
  llvm::ValueAsMetadata *v1398;
  int v1399;
  llvm::ValueAsMetadata *v1400;
  llvm::ValueAsMetadata *v1401;
  char v1402;
  unsigned int v1403;
  llvm::ValueAsMetadata *v1404;
  llvm::ValueAsMetadata *v1405;
  llvm::ValueAsMetadata *v1406;
  llvm::ValueAsMetadata *v1407;
  llvm::ValueAsMetadata *v1408;
  llvm::ValueAsMetadata *v1409;
  uint64_t *v1410;
  int v1411;
  int v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  uint64_t v1416;
  llvm::BasicBlock **v1417;
  int v1418;
  int v1419;
  int v1420;
  int v1421;
  int v1422;
  llvm **v1423;
  int v1425;
  llvm *v1426;
  llvm *v1427;
  llvm *v1428;
  llvm *v1429;
  llvm *v1430;
  llvm *v1431;
  llvm *v1432;
  llvm *v1433;
  llvm *v1434;
  llvm *v1435;
  unint64_t v1436;
  void *v1438;
  char v1439;
  unsigned int v1440;
  llvm::BasicBlock *v1441;
  uint64_t v1442;
  _QWORD v1443[2];
  unsigned int v1444;
  void *v1445;
  uint64_t v1446;
  _BYTE v1447[32];
  llvm *v1448;
  llvm **v1449;
  uint64_t v1450;
  void **v1451;
  void **v1452;
  uint64_t v1453;
  int v1454;
  __int16 v1455;
  char v1456;
  uint64_t v1457;
  uint64_t v1458;
  void *v1459;
  void *v1460;
  void *__p[2];
  __int128 v1462;
  __int128 v1463;
  char v1464;
  char v1465;
  void *v1466;
  void *v1467;
  uint64_t v1468;
  void *v1469;
  char *v1470;
  __int16 v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  void *v1475;
  uint64_t v1476;
  _BYTE v1477[128];
  void *v1478;
  int64x2_t v1479;
  int64x2_t v1480;
  int64x2_t v1481;
  int64x2_t v1482;
  void *v1483;
  uint64_t v1484;
  uint64_t v1485;
  int v1486;
  char v1487;
  char v1488;
  char v1489;
  void *v1490;
  uint64_t v1491;
  _BYTE v1492[128];
  void *v1493;
  int v1494[2];
  _BYTE v1495[32];
  _QWORD *v1496;
  uint64_t v1497;
  _QWORD v1498[7];

  v2 = this;
  v3 = a1;
  v4 = 0;
  v1498[4] = *MEMORY[0x1E0C80C00];
  v1387 = (void *)((unint64_t)this | 4);
  v1388 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v1423 = (llvm **)((char *)this + 40);
  v1410 = (uint64_t *)((char *)this + 48);
  v1379 = (uint64_t *)((char *)this + 24);
  while (2)
  {
    *(_BYTE *)(v3 + 48) = 0;
    v5 = *((_QWORD *)v2 + 1);
    if (v5)
    {
      while (1)
      {
        v6 = *(_QWORD *)(v5 + 24);
        v7 = *(unsigned __int8 *)(v6 + 16);
        v8 = v6 && v7 >= 0x1C;
        if (v8 && v7 - 29 < 0xB)
          break;
        v5 = *(_QWORD *)(v5 + 8);
        if (!v5)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      v10 = *(_QWORD *)(*((_QWORD *)v2 + 7) + 80);
      if (v10)
        v11 = (llvm *)(v10 - 24);
      else
        v11 = 0;
      if (v11 != v2)
      {
        v12 = *(llvm::BasicBlock **)(v3 + 8);
LABEL_56:
        llvm::DeleteDeadBlock(v2, v12, 0);
        v33 = 1;
        goto LABEL_57;
      }
    }
    SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v2);
    v12 = *(llvm::BasicBlock **)(v3 + 8);
    if ((llvm *)SinglePredecessor == v2)
      goto LABEL_56;
    v1425 = v4;
    v1418 = llvm::ConstantFoldTerminator((uint64_t)v2, 1, 0, (uint64_t)v12);
    v1411 = llvm::EliminateDuplicatePHINodes((llvm **)v2, v14);
    v15 = *(llvm::BasicBlock **)(v3 + 8);
    if (*((llvm ***)v2 + 5) != v1423)
    {
      v16 = *v1410 - 24;
      v17 = *v1410 ? *v1410 - 24 : 0;
      if (*v1410 && *(_BYTE *)(v17 + 16) == 83)
      {
        while (1)
        {
          v18 = *(_DWORD *)(v16 + 20) & 0x7FFFFFF;
          if ((_DWORD)v18)
            break;
LABEL_48:
          v31 = *(_QWORD *)(v16 + 32);
          v16 = v31 - 24;
          if (v31)
            v32 = v31 - 24;
          else
            v32 = 0;
          if (!v31 || *(_BYTE *)(v32 + 16) != 83)
          {
            v15 = *(llvm::BasicBlock **)(a1 + 8);
            v2 = this;
            goto LABEL_54;
          }
        }
        v19 = 0;
        v20 = 0;
        v21 = 32 * v18;
        while (1)
        {
          v22 = *(_DWORD *)(v16 + 20);
          v23 = (v22 & 0x40000000) != 0 ? *(_QWORD *)(v16 - 8) : v16 - 32 * (v22 & 0x7FFFFFF);
          if (sub_1C5F9705C(*(llvm::Constant **)(v23 + v20), v16))
            break;
LABEL_47:
          v20 += 32;
          v19 += 8;
          if (v21 == v20)
            goto LABEL_48;
        }
        v24 = *(_DWORD *)(v16 + 20);
        if ((v24 & 0x40000000) != 0)
          v25 = *(_QWORD *)(v16 - 8);
        else
          v25 = v16 - 32 * (v24 & 0x7FFFFFF);
        v26 = *(llvm::BasicBlock **)(v25 + 32 * *(unsigned int *)(v16 + 60) + v19);
        v27 = (llvm::BasicBlock *)*((_QWORD *)v26 + 5);
        if (v27 == (llvm::BasicBlock *)((char *)v26 + 40))
        {
          v29 = 0;
        }
        else
        {
          if (v27)
            v28 = (uint64_t)v27 - 24;
          else
            v28 = 0;
          if (*(unsigned __int8 *)(v28 + 16) - 29 >= 0xB)
            v29 = 0;
          else
            v29 = v28;
        }
        sub_1C4773D54((uint64_t)&v1478, v29, 0, 0, 0);
        v30 = *(unsigned __int8 *)(v29 + 16);
        if (!v29 || v30 != 30)
        {
          if (!v29 || v30 != 31)
          {
            if (v1478 != &v1479.u64[1])
              free(v1478);
            goto LABEL_47;
          }
          v54 = **(_QWORD ***)v26;
          v1466 = "unreachable";
          LOWORD(v1470) = 259;
          v55 = *((_QWORD *)this + 7);
          v56 = operator new();
          *(_QWORD *)v56 = *v54 + 1600;
          *(_QWORD *)(v56 + 8) = 0;
          v57 = (uint64_t *)(v56 + 8);
          v58 = *(_DWORD *)(v56 + 20) & 0xC0000000;
          *(_QWORD *)(v56 + 24) = 0;
          v59 = v56 + 24;
          *(_DWORD *)(v56 + 16) = 22;
          *(_DWORD *)(v56 + 20) = v58;
          *(_QWORD *)(v56 + 32) = 0;
          *(_QWORD *)(v56 + 40) = v56 + 40;
          *(_QWORD *)(v56 + 48) = v56 + 40;
          *(_QWORD *)(v56 + 56) = 0;
          if (v55)
          {
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v55 + 72, (_QWORD *)v56);
            v60 = *v1379;
            *(_QWORD *)(v56 + 24) = *v1379;
            *(_QWORD *)(v56 + 32) = v1379;
            *(_QWORD *)(v60 + 8) = v59;
            *v1379 = v59;
          }
          llvm::Value::setName((uint64_t ***)v56, (uint64_t)&v1466);
          v1481.i64[1] = v56;
          v1482.i64[0] = v56 + 40;
          LLVMBuildUnreachable_0((uint64_t)&v1478);
          v61 = *(_DWORD *)(v29 + 20);
          if (((v61 >> 1) & 0x3FFFFFF) != 1)
          {
            v62 = 0;
            v63 = 2 * (((v61 >> 1) & 0x3FFFFFF) - 1);
            do
            {
              v64 = *(_DWORD *)(v29 + 20);
              if ((v64 & 0x40000000) != 0)
                v65 = *(_QWORD *)(v29 - 8);
              else
                v65 = v29 - 32 * (v64 & 0x7FFFFFF);
              if (v62 == 0x1FFFFFFFCLL)
                v66 = 1;
              else
                v66 = (v62 + 3);
              if (*(llvm **)(v65 + 32 * v66) == this)
              {
                llvm::BasicBlock::removePredecessor(this, v26, 0);
                v67 = *(_DWORD *)(v29 + 20);
                if ((v67 & 0x40000000) != 0)
                  v68 = *(_QWORD *)(v29 - 8);
                else
                  v68 = v29 - 32 * (v67 & 0x7FFFFFF);
                v69 = v68 + 32 * v66;
                if (*(_QWORD *)v69)
                {
                  **(_QWORD **)(v69 + 16) = *(_QWORD *)(v69 + 8);
                  v71 = *(_QWORD *)(v69 + 8);
                  if (v71)
                    *(_QWORD *)(v71 + 16) = *(_QWORD *)(v69 + 16);
                }
                *(_QWORD *)v69 = v56;
                v70 = *(_QWORD *)(v56 + 8);
                *(_QWORD *)(v69 + 8) = v70;
                if (v70)
                  *(_QWORD *)(v70 + 16) = v69 + 8;
                *(_QWORD *)(v68 + 32 * v66 + 16) = v57;
                *v57 = v69;
              }
              v62 += 2;
            }
            while (v63 != v62);
            v61 = *(_DWORD *)(v29 + 20);
          }
          v4 = v1425;
          v2 = this;
          if ((v61 & 0x40000000) != 0)
            v91 = *(_QWORD *)(v29 - 8);
          else
            v91 = v29 - 32 * (v61 & 0x7FFFFFF);
          if (*(llvm **)(v91 + 32) == this)
          {
            llvm::BasicBlock::removePredecessor(this, v26, 0);
            v92 = *(_DWORD *)(v29 + 20);
            if ((v92 & 0x40000000) != 0)
              v93 = *(_QWORD *)(v29 - 8);
            else
              v93 = v29 - 32 * (v92 & 0x7FFFFFF);
            if (*(_QWORD *)(v93 + 32))
            {
              **(_QWORD **)(v93 + 48) = *(_QWORD *)(v93 + 40);
              v235 = *(_QWORD *)(v93 + 40);
              if (v235)
                *(_QWORD *)(v235 + 16) = *(_QWORD *)(v93 + 48);
            }
            *(_QWORD *)(v93 + 32) = v56;
            v94 = *(_QWORD *)(v56 + 8);
            *(_QWORD *)(v93 + 40) = v94;
            if (v94)
              *(_QWORD *)(v94 + 16) = v93 + 40;
            *(_QWORD *)(v93 + 48) = v57;
            *v57 = v93 + 32;
            if (!v15)
              goto LABEL_139;
          }
          else if (!v15)
          {
            goto LABEL_139;
          }
          v1466 = v26;
          v1467 = (void *)(v56 & 0xFFFFFFFFFFFFFFFBLL);
          v1468 = (uint64_t)v26;
          v1469 = v1387;
          v89 = (uint64_t)v15;
          v90 = 2;
          goto LABEL_138;
        }
        v2 = this;
        llvm::BasicBlock::removePredecessor(this, v26, 0);
        if ((*(_DWORD *)(v29 + 20) & 0x7FFFFFF) == 1)
        {
          LLVMBuildUnreachable_0((uint64_t)&v1478);
          v4 = v1425;
          goto LABEL_123;
        }
        v72 = *(_QWORD *)(v29 - 96);
        if (*(llvm **)(v29 - 32) == this)
        {
          LOWORD(v1470) = 257;
          v72 = sub_1C506EAA0((uint64_t)&v1478, v72, (uint64_t)&v1466);
        }
        llvm::IRBuilderBase::CreateAssumption((uint64_t *)&v1478, v72, 0, 0);
        v73 = *(llvm **)(v29 - 32);
        if (v73 == this)
          v73 = *(llvm **)(v29 - 64);
        v74 = (char *)operator new(0x60uLL);
        v75 = v74;
        *((_DWORD *)v74 + 13) = *((_DWORD *)v74 + 13) & 0x38000000 | 1;
        *(_QWORD *)v74 = 0;
        *((_QWORD *)v74 + 2) = 0;
        *((_QWORD *)v74 + 1) = 0;
        *((_QWORD *)v74 + 4) = ***(_QWORD ***)v73 + 1576;
        v76 = (llvm::Value *)(v74 + 32);
        *((_QWORD *)v74 + 3) = v74 + 32;
        *((_QWORD *)v74 + 5) = 0;
        v74[48] = 30;
        v74[49] = 0;
        *((_WORD *)v74 + 25) = 0;
        *((_DWORD *)v74 + 13) = 1;
        *(_OWORD *)(v74 + 56) = 0u;
        *(_OWORD *)(v74 + 72) = 0u;
        *((_DWORD *)v74 + 22) = 0;
        *(_QWORD *)v74 = v73;
        v79 = *((_QWORD *)v73 + 1);
        v78 = (_QWORD *)((char *)v73 + 8);
        v77 = v79;
        *((_QWORD *)v74 + 1) = v79;
        if (v79)
          *(_QWORD *)(v77 + 16) = v74 + 8;
        *((_QWORD *)v74 + 2) = v78;
        *v78 = v74;
        LOWORD(v1470) = 257;
        (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v1484 + 16))(v1484, v76, &v1466, v1481.i64[1], v1482.i64[0]);
        if (!v1479.i32[0])
        {
LABEL_122:
          v4 = v1425;
          v2 = this;
LABEL_123:
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v29 + 40) + 40, (uint64_t ***)v29);
          v87 = *(_QWORD *)(v29 + 24);
          v88 = *(_QWORD **)(v29 + 32);
          *v88 = v87;
          *(_QWORD *)(v87 + 8) = v88;
          *(_QWORD *)(v29 + 24) = 0;
          *(_QWORD *)(v29 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v29);
          if (!v15)
          {
LABEL_139:
            if (v1478 != &v1479.u64[1])
              free(v1478);
            v34 = 1;
            v3 = a1;
            *(_BYTE *)(a1 + 48) = 1;
            v33 = 1;
            goto LABEL_58;
          }
          v1466 = v26;
          v1467 = v1387;
          v89 = (uint64_t)v15;
          v90 = 1;
LABEL_138:
          llvm::DomTreeUpdater::applyUpdates(v89, (unint64_t *)&v1466, v90);
          goto LABEL_139;
        }
        v80 = (char *)v1478;
        v81 = (char *)v1478 + 16 * v1479.u32[0];
        v82 = (unsigned __int8 **)(v75 + 80);
        while (1)
        {
          v83 = *(_DWORD *)v80;
          v84 = (unsigned __int8 *)*((_QWORD *)v80 + 1);
          if (v84)
          {
            if (!v83)
            {
              __p[0] = *((void **)v80 + 1);
              llvm::MetadataTracking::track((uint64_t)__p, v84, 2);
              v85 = *v82;
              if (!*v82)
              {
LABEL_120:
                v86 = (unsigned __int8 *)__p[0];
                *v82 = (unsigned __int8 *)__p[0];
                if (v86)
                  llvm::MetadataTracking::retrack((uint64_t)__p, v86, (uint64_t)(v75 + 80));
                goto LABEL_117;
              }
LABEL_114:
              llvm::MetadataTracking::untrack((uint64_t)(v75 + 80), v85);
              goto LABEL_120;
            }
          }
          else
          {
            v85 = *v82;
            if (!*v82 && (v75[55] & 0x20) == 0)
              goto LABEL_117;
            if (!v83)
            {
              __p[0] = 0;
              if (!v85)
                goto LABEL_120;
              goto LABEL_114;
            }
          }
          llvm::Value::setMetadata(v76, *(_DWORD *)v80, (llvm::MDNode *)v84);
LABEL_117:
          v80 += 16;
          if (v80 == v81)
            goto LABEL_122;
        }
      }
    }
LABEL_54:
    v4 = v1425;
    if ((llvm::MergeBlockIntoPredecessor((uint64_t)v2, v15, 0, 0, 0, 0) & 1) != 0)
    {
      v33 = 1;
      v3 = a1;
      goto LABEL_57;
    }
    v35 = (void *)(*(_QWORD *)(*((_QWORD *)v2 + 7) + 40) + 216);
    v1480.i16[4] = 260;
    v1478 = v35;
    llvm::Triple::Triple((uint64_t)&v1438, (llvm::Twine *)&v1478);
    v3 = a1;
    if (!byte_1ED8286F8
      || v1440 <= 0x31 && ((1 << v1440) & 0x3000030000000) != 0
      || !*(_BYTE *)(*(_QWORD *)(a1 + 40) + 9))
    {
      goto LABEL_63;
    }
    v95 = *(llvm::DomTreeUpdater **)(a1 + 8);
    v1493 = v1495;
    *(_QWORD *)v1494 = 0x400000000;
    v96 = *((_QWORD *)this + 1);
    if (!v96)
      goto LABEL_182;
    while (1)
    {
      v97 = *(_QWORD *)(v96 + 24);
      v98 = *(unsigned __int8 *)(v97 + 16);
      v99 = v97 && v98 >= 0x1C;
      v100 = !v99 || v98 - 29 > 0xA;
      if (!v100)
        break;
      v96 = *(_QWORD *)(v96 + 8);
      if (!v96)
        goto LABEL_182;
    }
    v101 = 0;
    v102 = 0;
LABEL_154:
    v103 = *(_QWORD *)(v97 + 40);
    v104 = *(_QWORD *)(v103 + 40);
    if (v104 == v103 + 40)
      goto LABEL_169;
    v105 = v104 - 24;
    if (!v104)
      v105 = 0;
    v106 = *(unsigned __int8 *)(v105 + 16) - 40;
    if (v106 < 0xFFFFFFF5)
      v105 = 0;
    if (v104
      && (*(_BYTE *)(v105 + 16) == 30 ? (v107 = v106 >= 0xFFFFFFF5) : (v107 = 0),
          v107 && (*(_DWORD *)(v105 + 20) & 0x7FFFFFF) == 1))
    {
      if (v101 >= v1494[1])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1493, (uint64_t)v1495, v101 + 1, 8);
        v101 = v1494[0];
      }
      *((_QWORD *)v1493 + v101) = v103;
      v101 = ++v1494[0];
    }
    else
    {
LABEL_169:
      v102 = 1;
    }
    while (1)
    {
      v96 = *(_QWORD *)(v96 + 8);
      if (!v96)
        break;
      v97 = *(_QWORD *)(v96 + 24);
      v108 = *(unsigned __int8 *)(v97 + 16);
      if (v97)
        v109 = v108 >= 0x1C;
      else
        v109 = 0;
      if (v109 && v108 - 29 < 0xB)
        goto LABEL_154;
    }
    if (v101 < 2)
    {
      if (v1493 != v1495)
        free(v1493);
LABEL_182:
      v3 = a1;
      goto LABEL_183;
    }
    v1466 = &v1470;
    v1467 = &v1470;
    v1468 = 4;
    LODWORD(v1469) = 0;
    v1443[0] = 0;
    v1443[1] = 0;
    v1444 = 0;
    v1478 = v1493;
    v1479.i64[0] = v101;
    v1479.i64[1] = (uint64_t)&v1480.i64[1];
    v1480.i64[0] = 0x400000000;
    sub_1C5F975A8(&v1478);
    v147 = 0;
    if (v1482.i8[8])
      goto LABEL_841;
    v1399 = 0;
    do
    {
      v148 = v1480.u32[0];
      v1427 = (llvm *)v1479.i64[1];
      v149 = *(_QWORD *)v1479.i64[1];
      v150 = *(_QWORD *)(*(_QWORD *)v1479.i64[1] + 8);
      if (v1480.i32[0])
      {
        v151 = 0;
        v152 = 8 * v1480.u32[0];
        do
        {
          v153 = *(_QWORD *)((char *)v1427 + v151);
          v154 = *(unsigned __int8 *)(v153 + 16) - 38;
          v100 = v154 > 0x38;
          v155 = (1 << v154) & 0x100260000200001;
          v156 = v100 || v155 == 0;
          if (!v156
            || *(_BYTE *)(*(_QWORD *)v153 + 8) == 12
            || llvm::BasicBlock::getSingleSuccessor(*(llvm::BasicBlock **)(v153 + 40)) == *(_QWORD *)(v153 + 40))
          {
            goto LABEL_748;
          }
          v157 = *(unsigned __int8 *)(v153 + 16) - 33;
          v100 = v157 > 0x33;
          v158 = (1 << v157) & 0x8000000000041;
          if (!v100 && v158 != 0)
          {
            if (*(_BYTE *)(*(_QWORD *)(v153 - 32) + 16) == 24)
              goto LABEL_748;
            v160 = *(_QWORD *)(v153 + 64);
            if (v160)
            {
              if ((*(_BYTE *)(v160 + 15) & 0x10) != 0)
                goto LABEL_748;
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v153, 28) & 1) != 0)
              goto LABEL_748;
          }
          v161 = *(_QWORD *)(v153 + 8);
          if (v150)
          {
            if (!v161)
              goto LABEL_748;
            v161 = *(_QWORD *)(v161 + 8);
          }
          if (v161)
            goto LABEL_748;
          v151 += 8;
        }
        while (v152 != v151);
        v162 = (llvm::Instruction **)v1427;
        v149 = *(_QWORD *)v1427;
        do
        {
          if ((llvm::Instruction::isSameOperationAs(*v162, (const llvm::Instruction *)v149, 0) & 1) == 0)
            goto LABEL_748;
          ++v162;
          v152 -= 8;
        }
        while (v152);
      }
      v1389 = v148;
      if (v150)
      {
        v163 = *(_QWORD *)(*(_QWORD *)(v149 + 8) + 24);
        if (*(_BYTE *)(v163 + 16) != 83)
          v163 = 0;
        v164 = *(_QWORD *)(v149 + 40);
        v165 = *(_QWORD *)(v164 + 40);
        if (v165 == v164 + 40)
        {
          v166 = 0;
        }
        else
        {
          if (v165)
            v166 = v165 - 24;
          else
            v166 = 0;
          if (*(unsigned __int8 *)(v166 + 16) - 29 >= 0xB)
            v166 = 0;
        }
        v167 = *(unsigned __int8 *)(v166 + 16);
        if (v167 != 30)
          __asm { BR              X11 }
        v168 = *(_QWORD *)(v166 - 32);
        if (!(_DWORD)v148)
        {
          v176 = *(unsigned __int8 *)(v149 + 16);
          v1375 = (_BYTE *)(v149 + 16);
          if (v176 == 61)
            goto LABEL_358;
          goto LABEL_314;
        }
        v169 = v1427;
        do
        {
          v170 = *(_QWORD *)v169;
          if (!v163 || *(_QWORD *)(v163 + 40) != v168)
            goto LABEL_290;
          v171 = *(_DWORD *)(v163 + 20);
          v172 = v171 & 0x7FFFFFF;
          if ((v171 & 0x7FFFFFF) != 0)
          {
            v173 = 0;
            v146 = (const llvm::BasicBlock *)(32 * *(unsigned int *)(v163 + 60));
            while (1)
            {
              v174 = v163 - 32 * v172;
              if ((v171 & 0x40000000) != 0)
                v174 = *(_QWORD *)(v163 - 8);
              if (*(_QWORD *)((char *)v146 + 8 * v173 + v174) == *(_QWORD *)(v170 + 40))
                break;
              if (v172 == ++v173)
                goto LABEL_286;
            }
          }
          else
          {
LABEL_286:
            LODWORD(v173) = -1;
          }
          v175 = (v171 & 0x40000000) != 0 ? *(_QWORD *)(v163 - 8) : v163 - 32 * v172;
          if (*(_QWORD *)(v175 + 32 * v173) != v170)
          {
LABEL_290:
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v169 + 8) + 24) + 40) != *(_QWORD *)(v170 + 40))
              goto LABEL_748;
          }
          v169 = (llvm *)((char *)v169 + 8);
        }
        while (v169 != (llvm *)((char *)v1427 + 8 * v148));
      }
      v176 = *(unsigned __int8 *)(v149 + 16);
      v1375 = (_BYTE *)(v149 + 16);
      if (v176 == 61)
      {
        if (!(_DWORD)v148)
          goto LABEL_358;
        v177 = 8 * v148;
        v178 = v1427;
        do
        {
          v179 = *(_QWORD *)v178;
          v180 = *(_DWORD *)(*(_QWORD *)v178 + 20);
          if ((v180 & 0x40000000) != 0)
            v181 = *(_QWORD *)(v179 - 8);
          else
            v181 = v179 - 32 * (v180 & 0x7FFFFFF);
          if (*((_BYTE *)llvm::Value::stripPointerCasts(*(llvm::Value **)(v181 + 32)) + 16) == 59)
            goto LABEL_748;
          v178 = (llvm *)((char *)v178 + 8);
          v177 -= 8;
        }
        while (v177);
        v176 = *v1375;
      }
      if ((_DWORD)v148 && v176 == 60)
      {
        v182 = 8 * v148;
        v183 = v1427;
        do
        {
          v184 = *(_QWORD *)v183;
          v185 = *(_DWORD *)(*(_QWORD *)v183 + 20);
          if ((v185 & 0x40000000) != 0)
            v186 = *(llvm::Value ***)(v184 - 8);
          else
            v186 = (llvm::Value **)(v184 - 32 * (v185 & 0x7FFFFFF));
          if (*((_BYTE *)llvm::Value::stripPointerCasts(*v186) + 16) == 59)
            goto LABEL_748;
          v183 = (llvm *)((char *)v183 + 8);
          v182 -= 8;
        }
        while (v182);
        v176 = *v1375;
      }
LABEL_314:
      if (v176 != 84)
        goto LABEL_328;
      v187 = *(_QWORD *)(v149 - 32);
      if (v187
        && !*(_BYTE *)(v187 + 16)
        && *(_QWORD *)(v187 + 24) == *(_QWORD *)(v149 + 72)
        && (*(_BYTE *)(v187 + 33) & 0x20) != 0
        && (_DWORD)v148
        && (*(_DWORD *)(v187 + 36) - 169) >= 0xFFFFFFFE)
      {
        v188 = 8 * v148;
        v189 = v1427;
        do
        {
          v190 = *(_QWORD *)v189;
          v191 = *(_DWORD *)(*(_QWORD *)v189 + 20);
          if ((v191 & 0x40000000) != 0)
            v192 = *(_QWORD *)(v190 - 8);
          else
            v192 = v190 - 32 * (v191 & 0x7FFFFFF);
          if (*((_BYTE *)llvm::Value::stripPointerCasts(*(llvm::Value **)(v192 + 32)) + 16) == 59)
            goto LABEL_748;
          v189 = (llvm *)((char *)v189 + 8);
          v188 -= 8;
        }
        while (v188);
        v176 = *v1375;
LABEL_328:
        v193 = v176 - 33;
        v100 = v193 > 0x33;
        v194 = (1 << v193) & 0x8000000000041;
        if (v100 || v194 == 0)
          goto LABEL_358;
      }
      if (!(_DWORD)v148)
        goto LABEL_358;
      v196 = 8 * v148;
      v197 = 8 * v148 - 8;
      v198 = v1427;
      do
      {
        v199 = *(_QWORD *)v198;
        v198 = (llvm *)((char *)v198 + 8);
        v200 = *(unsigned __int8 *)(*(_QWORD *)(v199 - 32) + 16);
        v201 = v200 <= 0x14 || v200 == 24;
        v202 = !v201;
        if (!v201)
          break;
        v203 = v197;
        v197 -= 8;
      }
      while (v203);
      v204 = 8 * v148;
      v205 = v1427;
      do
      {
        v206 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v205 - 32) + 16);
        if (v206 < 0x15 || v206 == 24)
        {
          if ((v202 & 1) == 0)
            goto LABEL_352;
LABEL_748:
          if (v1399)
            goto LABEL_749;
LABEL_840:
          v147 = 0;
          goto LABEL_841;
        }
        v205 = (llvm *)((char *)v205 + 8);
        v204 -= 8;
      }
      while (v204);
      if ((v202 & 1) != 0)
        goto LABEL_358;
LABEL_352:
      v208 = 0;
      v209 = v1427;
      do
      {
        if (v208)
        {
          if (v208 != *(_QWORD *)(*(_QWORD *)v209 - 32))
            goto LABEL_748;
        }
        else
        {
          v208 = *(_QWORD *)(*(_QWORD *)v209 - 32);
        }
        v209 = (llvm *)((char *)v209 + 8);
        v196 -= 8;
      }
      while (v196);
LABEL_358:
      v210 = *(_DWORD *)(v149 + 20);
      v211 = (const llvm::Instruction *)(v210 & 0x7FFFFFF);
      if ((v210 & 0x7FFFFFF) != 0)
      {
        v212 = 0;
        v1380 = 8 * v148;
        do
        {
          v213 = *(_DWORD *)(v149 + 20);
          v214 = (v213 & 0x40000000) != 0 ? *(_QWORD *)(v149 - 8) : v149 - 32 * (v213 & 0x7FFFFFF);
          v215 = *(unsigned __int8 **)(v214 + 32 * (_QWORD)v212);
          if (*(_BYTE *)(*(_QWORD *)v215 + 8) == 12)
            goto LABEL_748;
          if ((_DWORD)v148)
          {
            v216 = v1380;
            v217 = v1427;
            while (1)
            {
              v218 = *(_QWORD *)v217;
              v219 = *(_DWORD *)(*(_QWORD *)v217 + 20);
              if ((v219 & 0x40000000) != 0)
                v220 = *(_QWORD *)(v218 - 8);
              else
                v220 = v218 - 32 * (v219 & 0x7FFFFFF);
              v221 = v149 - 32 * (v213 & 0x7FFFFFF);
              if ((v213 & 0x40000000) != 0)
                v221 = *(_QWORD *)(v149 - 8);
              if (*(_QWORD *)(v220 + 32 * (_QWORD)v212) != *(_QWORD *)(v221 + 32 * (_QWORD)v212))
                break;
              v217 = (llvm *)((char *)v217 + 8);
              v216 -= 8;
              if (!v216)
                goto LABEL_373;
            }
            if (v215[16] <= 0x14u && *v1375 == 84)
            {
              v222 = *(_QWORD *)(v149 - 32);
              if (v222)
              {
                if (!*(_BYTE *)(v222 + 16)
                  && *(_QWORD *)(v222 + 24) == *(_QWORD *)(v149 + 72)
                  && (*(_BYTE *)(v222 + 33) & 0x20) != 0)
                {
                  goto LABEL_748;
                }
              }
            }
            if (!llvm::canReplaceOperandWithVariable((llvm *)v149, v212))
              goto LABEL_748;
            v223 = v1380;
            v224 = (void **)v1427;
            do
            {
              __p[0] = *v224;
              v225 = __p[0];
              v226 = sub_1C61B7348((uint64_t)v1443, (uint64_t *)__p);
              v227 = v226;
              v228 = v225[5];
              if ((v228 & 0x40000000) != 0)
                v229 = (char *)*((_QWORD *)v225 - 1);
              else
                v229 = (char *)&v225[-8 * (v228 & 0x7FFFFFF)];
              v230 = *(_QWORD *)&v229[32 * (_QWORD)v212];
              v231 = *((unsigned int *)v226 + 4);
              if (v231 >= *((unsigned int *)v226 + 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v226 + 1), (uint64_t)(v226 + 3), v231 + 1, 8);
                v231 = *((unsigned int *)v227 + 4);
              }
              *(_QWORD *)(v227[1] + 8 * v231) = v230;
              ++*((_DWORD *)v227 + 4);
              ++v224;
              v223 -= 8;
              v4 = v1425;
            }
            while (v223);
          }
LABEL_373:
          v212 = (const llvm::Instruction *)((char *)v212 + 1);
          LODWORD(v148) = v1389;
        }
        while (v212 != v211);
      }
      if (v1480.i32[0])
      {
        v232 = (uint64_t *)v1479.i64[1];
        v233 = 8 * v1480.u32[0];
        do
        {
          v234 = *v232++;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1466, v234);
          v233 -= 8;
        }
        while (v233);
      }
      ++v1399;
      sub_1C5F97518((uint64_t)&v1478);
    }
    while (!v1482.i8[8]);
LABEL_749:
    v490 = (uint64_t **)this;
    if ((llvm::IsBlockFollowedByDeoptOrUnreachable(this, v146) & 1) == 0)
    {
      sub_1C5F975A8(&v1478);
      v498 = 0;
      __p[0] = &v1463;
      __p[1] = &v1463;
      *(_QWORD *)&v1462 = 4;
      DWORD2(v1462) = 0;
      while (1)
      {
        if (v1480.i32[0])
        {
          v499 = 0;
          v500 = (void **)v1479.i64[1];
          v501 = v1479.i64[1] + 8 * v1480.u32[0];
          do
          {
            v1445 = *v500;
            v502 = sub_1C61B7348((uint64_t)v1443, (uint64_t *)&v1445);
            v503 = *((unsigned int *)v502 + 4);
            if ((_DWORD)v503)
            {
              v504 = (uint64_t *)v502[1];
              v505 = 8 * v503;
              do
              {
                v506 = *v504++;
                v507 = sub_1C477672C((uint64_t)&v1466, v506);
                if (v1467 == v1466)
                  v508 = (uint64_t *)((char *)&v1468 + 4);
                else
                  v508 = &v1468;
                if (v507 == (_QWORD *)((char *)v1467 + 8 * *(unsigned int *)v508))
                  ++v499;
                v505 -= 8;
              }
              while (v505);
            }
            ++v500;
            v4 = v1425;
          }
          while (v500 != (void **)v501);
        }
        else
        {
          v499 = 0;
        }
        v509 = v499 % v1494[0] ? v499 / v1494[0] + 1 : v499 / v1494[0];
        if (v509 > 1)
          break;
        if (v1480.i32[0])
        {
          v510 = (uint64_t *)v1479.i64[1];
          v511 = 8 * v1480.u32[0];
          do
          {
            v512 = *v510++;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)__p, v512);
            v511 -= 8;
          }
          while (v511);
        }
        sub_1C5F97518((uint64_t)&v1478);
        if (++v498 == v1399)
          goto LABEL_831;
      }
      if (v498)
      {
        llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)&v1466, (const llvm::SmallPtrSetImplBase *)__p);
        sub_1C5F976BC((uint64_t)&v1478);
        v1399 = v498;
        do
        {
          if (!v1480.i32[0])
            goto LABEL_823;
          v515 = (uint64_t *)v1479.i64[1];
          v516 = 8 * v1480.u32[0];
          do
          {
            v517 = sub_1C477672C((uint64_t)__p, *v515);
            if (__p[1] == __p[0])
              v518 = (unsigned int *)&v1462 + 1;
            else
              v518 = (unsigned int *)&v1462;
            if (v517 != (_QWORD *)((char *)__p[1] + 8 * *v518))
            {
              *v517 = -2;
              ++DWORD2(v1462);
            }
            ++v515;
            v516 -= 8;
          }
          while (v516);
          if (v1480.i32[0])
          {
            v519 = 0;
            v520 = (void **)v1479.i64[1];
            v521 = v1479.i64[1] + 8 * v1480.u32[0];
            do
            {
              v1445 = *v520;
              v522 = sub_1C61B7348((uint64_t)v1443, (uint64_t *)&v1445);
              v523 = *((unsigned int *)v522 + 4);
              if ((_DWORD)v523)
              {
                v524 = (uint64_t *)v522[1];
                v525 = 8 * v523;
                do
                {
                  v526 = *v524++;
                  v527 = sub_1C477672C((uint64_t)&v1466, v526);
                  if (v1467 == v1466)
                    v528 = (uint64_t *)((char *)&v1468 + 4);
                  else
                    v528 = &v1468;
                  if (v527 == (_QWORD *)((char *)v1467 + 8 * *(unsigned int *)v528))
                    ++v519;
                  v525 -= 8;
                }
                while (v525);
              }
              ++v520;
              v4 = v1425;
            }
            while (v520 != (void **)v521);
          }
          else
          {
LABEL_823:
            v519 = 0;
          }
          if (v519 % v1494[0])
            v529 = v519 / v1494[0] + 1;
          else
            v529 = v519 / v1494[0];
          if (v529 >= 2)
          {
            llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)&v1466, (const llvm::SmallPtrSetImplBase *)__p);
            v1399 = v498 - 1;
          }
          sub_1C5F976BC((uint64_t)&v1478);
          v100 = v498-- <= 1;
        }
        while (!v100);
LABEL_831:
        v530 = v1399 != 0;
        goto LABEL_832;
      }
      v530 = 0;
LABEL_832:
      if (__p[1] != __p[0])
        free(__p[1]);
      if (!v530)
        goto LABEL_840;
      if ((v102 & 1) != 0)
      {
        sub_1C5F975A8(&v1478);
        v531 = v1399;
        if (v1399 < 1)
          goto LABEL_840;
        while (llvm::isSafeToSpeculativelyExecute(*(_QWORD *)v1479.i64[1], 0, 0, 0))
        {
          sub_1C5F97518((uint64_t)&v1478);
          v147 = 0;
          if (!--v531)
            goto LABEL_841;
        }
        v490 = (uint64_t **)this;
LABEL_751:
        if (!sub_1C5EBE3AC(v490, (uint64_t *)v1493, v1494[0], ".sink.split", v95, 0, 0, 0, 0))
          goto LABEL_840;
      }
      else
      {
        v102 = 0;
      }
      v147 = v102;
      if (!v1399)
        goto LABEL_841;
      goto LABEL_994;
    }
    if ((v102 & 1) != 0)
      goto LABEL_751;
    v102 = 0;
LABEL_994:
    v147 = v102;
    v612 = 0;
    while (2)
    {
      sub_1C5F975A8(&v1478);
      v613 = (char *)v1493;
      v614 = *(_QWORD *)(*(_QWORD *)v1493 + 40);
      if (v614 == *(_QWORD *)v1493 + 40)
      {
        v616 = 0;
      }
      else
      {
        if (v614)
          v615 = v614 - 24;
        else
          v615 = 0;
        if (*(unsigned __int8 *)(v615 + 16) - 29 >= 0xB)
          v616 = 0;
        else
          v616 = v615;
      }
      v617 = *(unsigned __int8 *)(v616 + 16);
      if (v617 != 30)
        __asm { BR              X11 }
      v1429 = *(llvm **)(v616 - 32);
      v618 = v1447;
      v1445 = v1447;
      v1446 = 0x400000000;
      if (v1494[0])
      {
        v619 = (char *)v1493 + 8 * v1494[0];
        do
        {
          v620 = *(_QWORD *)v613;
          v621 = *(_QWORD *)(*(_QWORD *)v613 + 40);
          if (v621 == *(_QWORD *)v613 + 40)
          {
            v623 = 0;
          }
          else
          {
            if (v621)
              v622 = v621 - 24;
            else
              v622 = 0;
            if (*(unsigned __int8 *)(v622 + 16) - 29 >= 0xB)
              v623 = 0;
            else
              v623 = v622;
          }
          do
          {
            if (*(_QWORD *)(*(_QWORD *)(v623 + 40) + 48) == v623 + 24)
            {
              v623 = 0;
            }
            else
            {
              v624 = *(_QWORD *)(v623 + 24);
              if (v624)
                v623 = v624 - 24;
              else
                v623 = 0;
            }
            if (!sub_1C4D99D08(v623))
              break;
            v625 = *(_QWORD *)(v620 + 48);
            v626 = v625 ? v625 - 24 : 0;
          }
          while (v623 != v626);
          if (!sub_1C4D99D08(v623))
          {
            v627 = v1446;
            if (v1446 >= (unint64_t)HIDWORD(v1446))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1445, (uint64_t)v1447, v1446 + 1, 8);
              v627 = v1446;
            }
            *((_QWORD *)v1445 + v627) = v623;
            LODWORD(v1446) = v1446 + 1;
          }
          v613 += 8;
        }
        while (v613 != v619);
        v618 = v1445;
      }
      v628 = *(_QWORD *)v618;
      v629 = *(_QWORD *)(*(_QWORD *)v618 + 8);
      if (v629)
      {
        v630 = *(_QWORD *)(v629 + 24);
        if (*(_BYTE *)(v630 + 16) != 83)
          v630 = 0;
        if ((_DWORD)v1446)
        {
          v631 = 0;
          do
          {
            if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v618[v631] + 8) + 24) != v630)
            {
              v710 = 0;
              goto LABEL_1128;
            }
            v631 += 8;
          }
          while (8 * v1446 != v631);
        }
      }
      v1393 = v147;
      v1496 = v1498;
      v1497 = 0x400000000;
      v632 = *(_DWORD *)(v628 + 20);
      v633 = v632 & 0x7FFFFFF;
      if ((v632 & 0x7FFFFFF) == 0)
        goto LABEL_1097;
      v1384 = v612;
      v634 = 0;
      v635 = 0;
      while (2)
      {
        v636 = v1446;
        v637 = *(_DWORD *)(v628 + 20);
        if ((_DWORD)v1446)
        {
          v638 = (char *)v1445;
          v639 = v637 & 0x40000000;
          v640 = 8 * v1446;
          while (1)
          {
            v641 = *(_QWORD *)v638;
            v642 = *(_DWORD *)(*(_QWORD *)v638 + 20);
            v643 = (v642 & 0x40000000) != 0 ? *(_QWORD *)(v641 - 8) : v641 - 32 * (v642 & 0x7FFFFFF);
            v644 = *(_QWORD *)(v643 + 32 * v635);
            v645 = v639
                 ? *(_QWORD *)(*(_QWORD *)(v628 - 8) + 32 * v635)
                 : *(_QWORD *)(v628 + 32 * v635 - 32 * (v637 & 0x7FFFFFF));
            if (v644 != v645)
              break;
            v638 += 8;
            v640 -= 8;
            if (!v640)
            {
              if (!v639)
                goto LABEL_1052;
LABEL_1050:
              v646 = *(_QWORD *)(v628 - 8);
              goto LABEL_1053;
            }
          }
          v648 = *(uint64_t ***)v645;
          if ((*(_BYTE *)(v645 + 23) & 0x10) != 0)
          {
            v649 = **v648;
            v650 = *(_QWORD *)(v649 + 152);
            v651 = *(unsigned int *)(v649 + 168);
            if (!(_DWORD)v651)
              goto LABEL_1061;
            LODWORD(v652) = (v651 - 1) & ((v645 >> 4) ^ (v645 >> 9));
            v653 = (uint64_t *)(v650 + 16 * v652);
            v654 = *v653;
            if (*v653 != v645)
            {
              v655 = 1;
              while (v654 != -4096)
              {
                v656 = v652 + v655++;
                v652 = v656 & (v651 - 1);
                v654 = *(_QWORD *)(v650 + 16 * v652);
                if (v654 == v645)
                {
                  v653 = (uint64_t *)(v650 + 16 * v652);
                  goto LABEL_1062;
                }
              }
LABEL_1061:
              v653 = (uint64_t *)(v650 + 16 * v651);
            }
LABEL_1062:
            v657 = (_QWORD *)v653[1];
            v660 = (void *)*v657;
            v659 = (char *)(v657 + 2);
            v658 = v660;
          }
          else
          {
            v658 = 0;
            v659 = &byte_1C871356D;
          }
          LOWORD(v1463) = 773;
          __p[0] = v659;
          __p[1] = v658;
          *(_QWORD *)&v1462 = ".sink";
          v661 = (uint64_t *)*((_QWORD *)v1429 + 6);
          v662 = operator new(0x48uLL);
          v663 = v662;
          v662[1] = v648;
          v647 = (llvm::Value *)(v662 + 1);
          *v662 = 0;
          v662[2] = 0;
          v662[3] = 0x4000000000000053;
          *((_OWORD *)v662 + 2) = 0u;
          v664 = (char *)(v662 + 4);
          *((_OWORD *)v662 + 3) = 0u;
          *((_DWORD *)v662 + 16) = 0;
          if (v661)
          {
            v673 = v661[2];
            v662[6] = v673;
            *(_WORD *)(v673 + 18) &= ~0x8000u;
            if ((*((_BYTE *)v662 + 31) & 0x10) != 0)
            {
              v675 = *(_QWORD *)(v673 + 56);
              if (v675)
              {
                v676 = *(llvm::ValueSymbolTable **)(v675 + 104);
                if (v676)
                  llvm::ValueSymbolTable::reinsertValue(v676, v647);
              }
            }
            v674 = *v661;
            v663[4] = *v661;
            v663[5] = v661;
            *(_QWORD *)(v674 + 8) = v664;
            *v661 = (uint64_t)v664;
          }
          *((_DWORD *)v663 + 17) = v636;
          llvm::Value::setName((uint64_t ***)v647, (uint64_t)__p);
          v665 = *((unsigned int *)v663 + 17);
          v666 = operator new(40 * v665);
          *v663 = v666;
          if ((_DWORD)v665)
          {
            v667 = &v666[4 * v665];
            do
            {
              *v666 = 0;
              v666[1] = 0;
              v666[2] = 0;
              v666[3] = v647;
              v666 += 4;
            }
            while (v666 != v667);
          }
          if ((_DWORD)v1446)
          {
            v668 = (char *)v1445;
            v669 = 8 * v1446;
            do
            {
              v670 = *(_QWORD *)v668;
              v671 = *(_DWORD *)(*(_QWORD *)v668 + 20);
              if ((v671 & 0x40000000) != 0)
                v672 = *(_QWORD *)(v670 - 8);
              else
                v672 = v670 - 32 * (v671 & 0x7FFFFFF);
              sub_1C477667C(v647, *(_QWORD *)(v672 + 32 * v635), *(_QWORD *)(v670 + 40));
              v668 += 8;
              v669 -= 8;
            }
            while (v669);
          }
          v634 = v1497;
          goto LABEL_1074;
        }
        if ((v637 & 0x40000000) != 0)
          goto LABEL_1050;
LABEL_1052:
        v646 = v628 - 32 * (v637 & 0x7FFFFFF);
LABEL_1053:
        v647 = *(llvm::Value **)(v646 + 32 * v635);
LABEL_1074:
        if (v634 >= HIDWORD(v1497))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1496, (uint64_t)v1498, v634 + 1, 8);
          v634 = v1497;
        }
        v1496[v634] = v647;
        v634 = v1497 + 1;
        LODWORD(v1497) = v1497 + 1;
        if (++v635 != v633)
          continue;
        break;
      }
      v677 = *(_DWORD *)(v628 + 20);
      v678 = v677 & 0x7FFFFFF;
      v4 = v1425;
      v612 = v1384;
      if ((v677 & 0x7FFFFFF) != 0)
      {
        v679 = 0;
        v680 = 0;
        v681 = 8 * v678;
        do
        {
          v682 = *(_DWORD *)(v628 + 20);
          if ((v682 & 0x40000000) != 0)
            v683 = *(_QWORD *)(v628 - 8);
          else
            v683 = v628 - 32 * (v682 & 0x7FFFFFF);
          v684 = v683 + v679;
          v685 = v1496[v680 / 8];
          if (*(_QWORD *)(v683 + v679))
          {
            **(_QWORD **)(v684 + 16) = *(_QWORD *)(v684 + 8);
            v686 = *(_QWORD *)(v684 + 8);
            if (v686)
              *(_QWORD *)(v686 + 16) = *(_QWORD *)(v684 + 16);
          }
          *(_QWORD *)v684 = v685;
          if (v685)
          {
            v689 = *(_QWORD *)(v685 + 8);
            v687 = (_QWORD *)(v685 + 8);
            v688 = v689;
            v690 = v683 + v679;
            *(_QWORD *)(v690 + 8) = v689;
            if (v689)
              *(_QWORD *)(v688 + 16) = v690 + 8;
            *(_QWORD *)(v690 + 16) = v687;
            *v687 = v684;
          }
          v680 += 8;
          v679 += 32;
        }
        while (v681 != v680);
      }
LABEL_1097:
      v691 = (char *)v1429 + 40;
      v692 = (char *)*((_QWORD *)v1429 + 6);
      if (v692 == (char *)v1429 + 40)
      {
        v147 = v1393;
      }
      else
      {
        v147 = v1393;
        while (1)
        {
          v693 = v692 - 24;
          if (!v692)
            v693 = 0;
          if (v693[16] != 83)
            break;
          v692 = (char *)*((_QWORD *)v692 + 1);
          if (v692 == v691)
            goto LABEL_1110;
        }
        v694 = *(v692 - 8) - 38;
        v100 = v694 > 0x38;
        v695 = (1 << v694) & 0x100060000000001;
        if (v100 || v695 == 0)
          v691 = v692;
        else
          v691 = (char *)*((_QWORD *)v692 + 1);
      }
LABEL_1110:
      if (v691)
        v697 = (llvm::Instruction *)(v691 - 24);
      else
        v697 = 0;
      llvm::Instruction::moveBefore((llvm::Instruction *)v628, v697);
      if ((_DWORD)v1446)
      {
        v698 = (uint64_t *)v1445;
        v699 = 8 * v1446;
        do
        {
          v700 = *v698;
          if (*v698 != v628)
          {
            llvm::Instruction::applyMergedLocation((llvm::Instruction *)v628, *(const llvm::DILocation **)(v628 + 48), *(const llvm::DILocation **)(v700 + 48));
            *(_OWORD *)__p = xmmword_1C8674C34;
            v1462 = unk_1C8674C44;
            v1463 = xmmword_1C8674C54;
            llvm::combineMetadata(v628, (_BYTE *)v700, (unsigned int *)__p, 12, 1);
            llvm::Instruction::andIRFlags(v628, v700);
          }
          ++v698;
          v699 -= 8;
        }
        while (v699);
      }
      v701 = *(_QWORD *)(v628 + 8);
      if (v701)
      {
        v702 = *(llvm::ValueAsMetadata **)(v701 + 24);
        llvm::Value::doRAUW(v702, (llvm::Value *)v628, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v702 + 5) + 40, (uint64_t ***)v702);
        v703 = *((_QWORD *)v702 + 3);
        v704 = (_QWORD *)*((_QWORD *)v702 + 4);
        *v704 = v703;
        *(_QWORD *)(v703 + 8) = v704;
        *((_QWORD *)v702 + 3) = 0;
        *((_QWORD *)v702 + 4) = 0;
        llvm::Value::deleteValue(v702);
      }
      if ((_DWORD)v1446)
      {
        v705 = (uint64_t ****)v1445;
        v706 = 8 * v1446;
        do
        {
          v707 = *v705;
          if (*v705 != (uint64_t ***)v628)
          {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v707[5] + 5), *v705);
            v708 = v707[3];
            v709 = v707[4];
            *v709 = (uint64_t *)v708;
            v708[1] = (uint64_t *)v709;
            v707[3] = 0;
            v707[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v707);
          }
          ++v705;
          v706 -= 8;
        }
        while (v706);
      }
      if (v1496 != v1498)
        free(v1496);
      v710 = 1;
      v618 = v1445;
LABEL_1128:
      if (v618 != v1447)
        free(v618);
      if ((v710 & 1) != 0)
      {
        ++v612;
        v147 = 1;
        if (v612 != v1399)
          continue;
      }
      break;
    }
LABEL_841:
    if ((unint64_t *)v1479.i64[1] != &v1480.u64[1])
      free((void *)v1479.i64[1]);
    v532 = v1443[0];
    if (v1444)
    {
      v533 = 56 * v1444;
      v534 = v1443[0] + 24;
      do
      {
        if ((*(_QWORD *)(v534 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v535 = *(void **)(v534 - 16);
          if ((void *)v534 != v535)
            free(v535);
        }
        v534 += 56;
        v533 -= 56;
      }
      while (v533);
    }
    MEMORY[0x1CAA32FB4](v532, 8);
    if (v1467 != v1466)
      free(v1467);
    v3 = a1;
    if (v1493 != v1495)
      free(v1493);
    if ((v147 & 1) != 0)
      goto LABEL_854;
LABEL_183:
    if (byte_1ED828DB8)
    {
      v111 = *(_QWORD *)(v3 + 8);
      v112 = v1410;
      do
      {
        v113 = *v112;
        v114 = v113 - 24;
        if (!v113)
          v114 = 0;
        v115 = *(unsigned __int8 *)(v114 + 16);
        v112 = (uint64_t *)(v113 + 8);
      }
      while (v115 == 83);
      if (v115 == 94)
      {
        v1466 = &v1468;
        v1467 = (void *)0x100000000;
        v116 = *((_QWORD *)this + 1);
        if (v116)
        {
          while (1)
          {
            v117 = *(_QWORD *)(v116 + 24);
            v118 = *(unsigned __int8 *)(v117 + 16);
            v119 = v117 && v118 >= 0x1C;
            if (v119 && v118 - 29 <= 0xA)
              break;
            v116 = *(_QWORD *)(v116 + 8);
            if (!v116)
              goto LABEL_63;
          }
          v1372 = v111;
LABEL_397:
          v236 = *(_QWORD *)(v117 + 40);
          v237 = *(_QWORD *)(v236 + 40);
          if (v237 == v236 + 40)
          {
            v239 = 0;
          }
          else
          {
            if (v237)
              v238 = v237 - 24;
            else
              v238 = 0;
            if (*(unsigned __int8 *)(v238 + 16) - 29 >= 0xB)
              v239 = 0;
            else
              v239 = v238;
          }
          if ((_DWORD)v1467)
          {
            v240 = (char *)v1466;
            v241 = (char *)v1466 + 32 * v1467;
            v242 = (_QWORD *)(v239 - 32);
            do
            {
              v243 = 0;
              v244 = 0;
              v245 = **(_QWORD **)v240;
              v1445 = (void *)v245;
              v1446 = v239;
              while (1)
              {
                v246 = v243;
                v247 = (uint64_t)*(&v1445 + v244);
                v248 = *(_QWORD *)(v247 + 64);
                if (v248)
                {
                  if ((*(_BYTE *)(v248 + 15) & 0x10) != 0)
                    break;
                }
                if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)*(&v1445 + v244), 28) & 1) != 0
                  || *(_BYTE *)(*(_QWORD *)(v247 - 32) + 16) == 24)
                {
                  break;
                }
                v243 = 1;
                v244 = 1;
                if ((v246 & 1) != 0)
                {
                  v249 = 0;
                  do
                  {
                    v250 = *(unsigned __int8 *)(*(*(_QWORD **)((char *)&v1445 + v249) - 4) + 16);
                    v251 = v250 <= 0x14 || v250 == 24;
                    v252 = !v251;
                    if (!v251)
                      break;
                    v136 = v249 == 8;
                    v249 += 8;
                  }
                  while (!v136);
                  v253 = 0;
                  v254 = 0;
                  do
                  {
                    v255 = v253;
                    v256 = *(unsigned __int8 *)(*((_QWORD *)*(&v1445 + v254) - 4) + 16);
                    if (v256 < 0x15 || v256 == 24)
                    {
                      if ((v252 & 1) != 0)
                        goto LABEL_454;
                      goto LABEL_433;
                    }
                    v253 = 1;
                    v254 = 1;
                  }
                  while ((v255 & 1) == 0);
                  if ((v252 & 1) != 0)
                    goto LABEL_435;
LABEL_433:
                  v258 = *(_QWORD *)(v245 - 32);
                  if (v258 && v258 != *v242)
                    break;
LABEL_435:
                  v259 = 0;
                  v260 = 0;
                  do
                  {
                    v261 = v259;
                    if (llvm::BasicBlock::getFirstNonPHIOrDbg(*((llvm::BasicBlock **)*(&v1445 + v260) - 12), 1)[16] != 35)
                    {
                      v266 = 0;
                      v267 = 0;
                      while (1)
                      {
                        v268 = v266;
                        if (llvm::BasicBlock::getFirstNonPHIOrDbg(*((llvm::BasicBlock **)*(&v1445 + v267) - 12), 1)[16] == 35)
                          goto LABEL_454;
                        v266 = 1;
                        v267 = 1;
                        if ((v268 & 1) != 0)
                        {
                          v269 = *(_QWORD *)(v245 - 96);
                          v270 = *(_QWORD *)(v239 - 96);
                          if (v269)
                          {
                            if (v269 != v270)
                              goto LABEL_454;
                            v270 = *(_QWORD *)(v245 - 96);
                          }
                          v271 = 0;
                          v1478 = &v1480.u64[1];
                          v1479.i64[0] = (uint64_t)&v1480.i64[1];
                          v1479.i64[1] = 16;
                          v1480.i32[0] = 0;
                          do
                          {
                            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1478, *(uint64_t *)((char *)&v1445 + v271));
                            v271 += 8;
                          }
                          while (v271 != 16);
                          v272 = *(void **)(v239 + 40);
                          __p[0] = *(void **)(v245 + 40);
                          __p[1] = v272;
                          v273 = sub_1C5F90DD8(v270, __p, 2, &v1478);
                          if ((void *)v1479.i64[0] != v1478)
                            free((void *)v1479.i64[0]);
                          if (v273)
                            goto LABEL_438;
                          goto LABEL_454;
                        }
                      }
                    }
                    v259 = 1;
                    v260 = 1;
                  }
                  while ((v261 & 1) == 0);
LABEL_438:
                  v262 = *(_QWORD *)(v245 - 64);
                  v263 = *(_QWORD *)(v239 + 40);
                  v1478 = *(void **)(v245 + 40);
                  v1479.i64[0] = v263;
                  if (sub_1C5F90DD8(v262, &v1478, 2, 0)
                    && llvm::Instruction::isSameOperationAs((llvm::Instruction *)v239, (const llvm::Instruction *)v245, 0))
                  {
                    v264 = *(unsigned __int8 *)(v245 + 16);
                    if (v264 == 84)
                    {
                      v265 = 0;
                    }
                    else if (v264 == 39)
                    {
                      v265 = (*(_DWORD *)(v245 + 80) + 1);
                    }
                    else
                    {
                      v265 = 2;
                    }
                    v274 = *(unsigned __int8 *)(v239 + 16);
                    if (v274 == 84)
                    {
                      v275 = 0;
                    }
                    else if (v274 == 39)
                    {
                      v275 = (*(_DWORD *)(v239 + 80) + 1);
                    }
                    else
                    {
                      v275 = 2;
                    }
                    v276 = *(_DWORD *)(v245 + 20) & 0x7FFFFFF;
                    v277 = v245 - 32 * v276;
                    if (v277 == v245 - 32 * v265 - 32
                      || (v278 = *(_DWORD *)(v239 + 20) & 0x7FFFFFF,
                          v279 = (_QWORD *)(v239 - 32 * v278),
                          v279 == &v242[-4 * v275]))
                    {
LABEL_470:
                      v4 = v1425;
                      v111 = v1372;
                      goto LABEL_474;
                    }
                    v280 = 32 * v278 - 32 * v275 - 64;
                    v281 = 32 * v276 - 32 * v265 - 64;
                    while (*(_BYTE *)(**(_QWORD **)v277 + 8) != 12 || *(_QWORD *)v277 == *v279)
                    {
                      if (v281)
                      {
                        v277 += 32;
                        v279 += 4;
                        v282 = v280;
                        v280 -= 32;
                        v281 -= 32;
                        if (v282)
                          continue;
                      }
                      goto LABEL_470;
                    }
                  }
                  break;
                }
              }
LABEL_454:
              v240 += 32;
            }
            while (v240 != v241);
            v283 = v1467;
            v4 = v1425;
            v111 = v1372;
          }
          else
          {
            v283 = 0;
          }
          if (v283 >= HIDWORD(v1467))
          {
            v240 = (char *)sub_1C63B796C((uint64_t)&v1466);
          }
          else
          {
            v284 = (char *)v1466 + 32 * v283;
            *v284 = v284 + 2;
            v284[1] = 0x200000000;
            LODWORD(v1467) = (_DWORD)v1467 + 1;
            v240 = (char *)v1466 + 32 * v1467 - 32;
          }
LABEL_474:
          v285 = *((unsigned int *)v240 + 2);
          if (v285 >= *((_DWORD *)v240 + 3))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v240, (uint64_t)(v240 + 16), v285 + 1, 8);
            *(_QWORD *)(*(_QWORD *)v240 + 8 * *((unsigned int *)v240 + 2)) = v239;
            LODWORD(v285) = *((_DWORD *)v240 + 2);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v240 + 8 * v285) = v239;
          }
          *((_DWORD *)v240 + 2) = v285 + 1;
          v3 = a1;
          while (1)
          {
            v116 = *(_QWORD *)(v116 + 8);
            if (!v116)
              break;
            v117 = *(_QWORD *)(v116 + 24);
            v286 = *(unsigned __int8 *)(v117 + 16);
            if (v117)
              v287 = v286 >= 0x1C;
            else
              v287 = 0;
            if (v287 && v286 - 29 < 0xB)
              goto LABEL_397;
          }
          v289 = (char *)v1466;
          if (!(_DWORD)v1467)
          {
            if (v1466 != &v1468)
              free(v1466);
            goto LABEL_63;
          }
          v290 = 0;
          v291 = (char *)v1466 + 32 * v1467;
          v1367 = v291;
          while (1)
          {
            v1381 = *((unsigned int *)v289 + 2);
            if (v1381 >= 2)
              break;
LABEL_680:
            v289 += 32;
            if (v289 == v291)
            {
              v491 = (uint64_t *)v1466;
              if ((_DWORD)v1467)
              {
                v492 = 4 * v1467;
                do
                {
                  v493 = (uint64_t *)v491[v492 - 4];
                  if (&v491[v492 - 2] != v493)
                    free(v493);
                  v492 -= 4;
                }
                while (v492 * 8);
                v491 = (uint64_t *)v1466;
              }
              if (v491 != &v1468)
                free(v491);
              v3 = a1;
              if ((v290 & 1) != 0)
              {
LABEL_854:
                v33 = 1;
                goto LABEL_1879;
              }
              goto LABEL_63;
            }
          }
          v1371 = v289;
          v292 = *(llvm::ValueAsMetadata **)v289;
          v1478 = &v1479.u64[1];
          v1479.i64[0] = 0x800000000;
          if (v111 && (_DWORD)v1381 != 2)
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1478, (uint64_t)&v1479.i64[1], 3 * v1381 + 2, 16);
          v293 = llvm::BasicBlock::getFirstNonPHIOrDbg(*(llvm::BasicBlock **)(*(_QWORD *)v292 - 96), 1)[16];
          v1400 = v292;
          v294 = *(llvm::Instruction **)v292;
          v295 = *(uint64_t ****)(*(_QWORD *)v292 + 40);
          v296 = v295[7];
          v297 = v295[4];
          v1390 = (llvm::Value *)(v296 + 9);
          v298 = v297 == v296 + 9 || v297 == 0;
          v299 = v298;
          if (v298)
            v300 = 0;
          else
            v300 = v297 - 3;
          v301 = **(_QWORD ***)v294;
          v302 = v295 >> 4;
          if ((*((_BYTE *)v295 + 23) & 0x10) != 0)
          {
            v303 = ***v295;
            v304 = *(_QWORD *)(v303 + 152);
            v305 = *(unsigned int *)(v303 + 168);
            if (!(_DWORD)v305)
              goto LABEL_510;
            LODWORD(v306) = (v305 - 1) & (v302 ^ (v295 >> 9));
            v307 = (uint64_t ****)(v304 + 16 * v306);
            v308 = *v307;
            if (*v307 != v295)
            {
              v309 = 1;
              while (v308 != (uint64_t ***)-4096)
              {
                v310 = v306 + v309++;
                v306 = v310 & (v305 - 1);
                v308 = *(uint64_t ****)(v304 + 16 * v306);
                if (v308 == v295)
                {
                  v307 = (uint64_t ****)(v304 + 16 * v306);
                  goto LABEL_511;
                }
              }
LABEL_510:
              v307 = (uint64_t ****)(v304 + 16 * v305);
            }
LABEL_511:
            v311 = v307[1];
            v314 = *v311;
            v313 = (char *)(v311 + 2);
            v312 = v314;
          }
          else
          {
            v312 = 0;
            v313 = &byte_1C871356D;
          }
          LOWORD(v1463) = 773;
          __p[0] = v313;
          __p[1] = v312;
          *(_QWORD *)&v1462 = ".invoke";
          v315 = operator new();
          v1368 = v301;
          *(_QWORD *)v315 = *v301 + 1600;
          *(_QWORD *)(v315 + 8) = 0;
          v316 = *(_DWORD *)(v315 + 20) & 0xC0000000;
          *(_QWORD *)(v315 + 24) = 0;
          v317 = v315 + 24;
          *(_DWORD *)(v315 + 16) = 22;
          *(_DWORD *)(v315 + 20) = v316;
          v318 = (uint64_t *)(v315 + 40);
          *(_QWORD *)(v315 + 32) = 0;
          *(_QWORD *)(v315 + 40) = v315 + 40;
          *(_QWORD *)(v315 + 48) = v315 + 40;
          *(_QWORD *)(v315 + 56) = 0;
          if (v296)
          {
            v319 = (llvm::Value *)(v300 + 3);
            v320 = v300;
            v321 = v296;
            v322 = v299;
            if (v299)
              v323 = v1390;
            else
              v323 = v319;
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v1390, (_QWORD *)v315);
            v324 = *(_QWORD *)v323;
            *(_QWORD *)(v315 + 24) = *(_QWORD *)v323;
            *(_QWORD *)(v315 + 32) = v323;
            *(_QWORD *)(v324 + 8) = v317;
            *(_QWORD *)v323 = v317;
            v299 = v322;
            v296 = v321;
            v300 = v320;
            v302 = v295 >> 4;
          }
          llvm::Value::setName((uint64_t ***)v315, (uint64_t)__p);
          llvm::Instruction::clone(v294);
          v326 = (llvm::Value *)v325;
          *(_QWORD *)(v325 + 40) = v315;
          *(_WORD *)(v315 + 18) &= ~0x8000u;
          if ((*(_BYTE *)(v325 + 23) & 0x10) != 0)
          {
            v373 = *(_QWORD *)(v315 + 56);
            if (v373)
            {
              v374 = *(llvm::ValueSymbolTable **)(v373 + 104);
              if (v374)
                llvm::ValueSymbolTable::reinsertValue(v374, v326);
            }
          }
          v327 = *v318;
          v1428 = v326;
          *((_QWORD *)v326 + 3) = *v318;
          v328 = (uint64_t *)((char *)v326 + 24);
          v328[1] = (uint64_t)v318;
          *(_QWORD *)(v327 + 8) = v328;
          v1376 = v328;
          *v318 = (uint64_t)v328;
          v329 = v1372;
          if (v293 == 35)
          {
            if ((*((_BYTE *)v295 + 23) & 0x10) != 0)
            {
              v330 = ***v295;
              v331 = *(_QWORD *)(v330 + 152);
              v332 = *(unsigned int *)(v330 + 168);
              v333 = v1368;
              if (!(_DWORD)v332)
                goto LABEL_526;
              LODWORD(v334) = (v332 - 1) & (v302 ^ (v295 >> 9));
              v335 = (uint64_t ****)(v331 + 16 * v334);
              v336 = *v335;
              if (*v335 != v295)
              {
                v337 = 1;
                while (v336 != (uint64_t ***)-4096)
                {
                  v338 = v334 + v337++;
                  v334 = v338 & (v332 - 1);
                  v336 = *(uint64_t ****)(v331 + 16 * v334);
                  if (v336 == v295)
                  {
                    v335 = (uint64_t ****)(v331 + 16 * v334);
                    goto LABEL_527;
                  }
                }
LABEL_526:
                v335 = (uint64_t ****)(v331 + 16 * v332);
              }
LABEL_527:
              v339 = v335[1];
              v342 = *v339;
              v341 = (char *)(v339 + 2);
              v340 = v342;
            }
            else
            {
              v340 = 0;
              v341 = &byte_1C871356D;
              v333 = v1368;
            }
            LOWORD(v1463) = 773;
            __p[0] = v341;
            __p[1] = v340;
            *(_QWORD *)&v1462 = ".cont";
            v343 = operator new();
            *(_QWORD *)v343 = *v333 + 1600;
            *(_QWORD *)(v343 + 8) = 0;
            v344 = (_QWORD *)(v343 + 8);
            v345 = *(_DWORD *)(v343 + 20) & 0xC0000000;
            *(_QWORD *)(v343 + 24) = 0;
            v346 = v343 + 24;
            *(_DWORD *)(v343 + 16) = 22;
            *(_DWORD *)(v343 + 20) = v345;
            *(_QWORD *)(v343 + 32) = 0;
            *(_QWORD *)(v343 + 40) = v343 + 40;
            *(_QWORD *)(v343 + 48) = v343 + 40;
            *(_QWORD *)(v343 + 56) = 0;
            if (v296)
            {
              if (v299)
                v347 = v1390;
              else
                v347 = (llvm::Value *)(v300 + 3);
              llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v1390, (_QWORD *)v343);
              v348 = *(_QWORD *)v347;
              *(_QWORD *)(v343 + 24) = *(_QWORD *)v347;
              *(_QWORD *)(v343 + 32) = v347;
              *(_QWORD *)(v348 + 8) = v346;
              *(_QWORD *)v347 = v346;
            }
            llvm::Value::setName((uint64_t ***)v343, (uint64_t)__p);
            v349 = (char *)operator new(0x40uLL);
            *((_DWORD *)v349 + 5) &= 0x38000000u;
            *(_QWORD *)v349 = *v333 + 1576;
            *((_QWORD *)v349 + 1) = 0;
            v349[16] = 35;
            *(_OWORD *)(v349 + 44) = 0u;
            *(_OWORD *)(v349 + 33) = 0u;
            *(_OWORD *)(v349 + 17) = 0u;
            v350 = *(_WORD *)(v343 + 18) & 0x7FFF;
            v351 = *(_QWORD *)(v343 + 40);
            *((_QWORD *)v349 + 4) = v343 + 40;
            *((_QWORD *)v349 + 5) = v343;
            *((_QWORD *)v349 + 3) = v351;
            v349 += 24;
            *(_WORD *)(v343 + 18) = v350;
            *(_QWORD *)(v351 + 8) = v349;
            *(_QWORD *)(v343 + 40) = v349;
            if (*((_QWORD *)v1428 - 12))
            {
              **((_QWORD **)v1428 - 10) = *((_QWORD *)v1428 - 11);
              v352 = *((_QWORD *)v1428 - 11);
              if (v352)
                *(_QWORD *)(v352 + 16) = *((_QWORD *)v1428 - 10);
            }
            *((_QWORD *)v1428 - 12) = v343;
            v353 = *(_QWORD *)(v343 + 8);
            *((_QWORD *)v1428 - 11) = v353;
            if (v353)
              *(_QWORD *)(v353 + 16) = (char *)v1428 - 88;
            *((_QWORD *)v1428 - 10) = v344;
            *v344 = (char *)v1428 - 96;
            v329 = v1372;
          }
          if (v329)
          {
            v354 = v1400;
            v355 = (llvm::ValueAsMetadata *)((char *)v1400 + 8 * v1381);
            v356 = v1479.i32[0];
            v357 = 8 * v1381;
            do
            {
              v358 = *(_QWORD *)(*(_QWORD *)v354 + 40);
              v359 = *((_QWORD *)v1428 + 5);
              if (v356 >= v1479.i32[1])
              {
                v361 = v355;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1478, (uint64_t)&v1479.i64[1], v356 + 1, 16);
                v355 = v361;
                v356 = v1479.i32[0];
              }
              v360 = (char *)v1478 + 16 * v356;
              *v360 = v358;
              v360[1] = v359 & 0xFFFFFFFFFFFFFFFBLL;
              v356 = ++v1479.i32[0];
              v354 = (llvm::ValueAsMetadata *)((char *)v354 + 8);
              v357 -= 8;
            }
            while (v357);
            v362 = *((unsigned __int8 *)v1428 + 16);
            if (v362 != 30)
              __asm { BR              X11 }
            if ((*((_DWORD *)v1428 + 5) & 0x7FFFFFF) == 3)
              v363 = 2;
            else
              v363 = 1;
            v364 = 0;
            v365 = 0;
            v366 = v363;
            v367 = (char *)v1428 - 64;
            do
            {
              v368 = *((unsigned __int8 *)v1428 + 16);
              if (v368 != 30)
                __asm { BR              X10 }
              v369 = *((_QWORD *)v1428 - 4 * v365 - 4);
              v370 = *((_QWORD *)v1428 + 5);
              if (v356 >= v1479.i32[1])
              {
                v372 = v355;
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1478, (uint64_t)&v1479.i64[1], v356 + 1, 16);
                v355 = v372;
                v356 = v1479.i32[0];
              }
              v371 = (char *)v1478 + 16 * v356;
              *v371 = v370;
              v371[1] = v369 & 0xFFFFFFFFFFFFFFFBLL;
              v356 = ++v1479.i32[0];
              ++v365;
              v364 += 2;
              v367 += 32;
            }
            while (v366 != v365);
            v375 = v1400;
            do
            {
              v376 = *(_QWORD *)v375;
              v377 = *(_QWORD *)(*(_QWORD *)v375 + 40);
              v378 = *(_QWORD *)(v377 + 40);
              if (v378 != v377 + 40)
              {
                if (v378)
                  v379 = v378 - 24;
                else
                  v379 = 0;
                v380 = *(unsigned __int8 *)(v379 + 16);
                v381 = v380 - 29;
                if (v380 != 30)
                {
                  v382 = 2;
                  switch(v381)
                  {
                    case 1:
LABEL_2433:
                      __break(1u);
                      return;
                    case 2:
                      v382 = (*(_DWORD *)(v379 + 20) >> 1) & 0x3FFFFFF;
                      goto LABEL_578;
                    case 3:
                    case 9:
                      v382 = (*(_DWORD *)(v379 + 20) & 0x7FFFFFF) - 1;
                      goto LABEL_578;
                    case 4:
                      goto LABEL_567;
                    case 7:
                      v382 = *(_WORD *)(v379 + 18) & 1;
                      goto LABEL_578;
                    case 8:
                      v382 = 1;
                      goto LABEL_567;
                    case 10:
                      v382 = *(_DWORD *)(v379 + 80) + 1;
LABEL_578:
                      if (!v382)
                        goto LABEL_575;
                      goto LABEL_567;
                    default:
                      goto LABEL_575;
                  }
                }
                if ((*(_DWORD *)(v379 + 20) & 0x7FFFFFF) == 3)
                  v382 = 2;
                else
                  v382 = 1;
LABEL_567:
                v383 = 0;
                v384 = 0;
                v385 = v379 + 32;
                v386 = v379 - 64;
                v387 = v382;
                v388 = v379 - 64;
                do
                {
                  v389 = *(unsigned __int8 *)(v379 + 16);
                  if (v389 != 30)
                    __asm { BR              X10 }
                  v390 = *(_QWORD *)(v379 - 32 - 32 * v384);
                  v391 = *(_QWORD *)(v376 + 40);
                  if (v356 >= v1479.i32[1])
                  {
                    v1369 = v355;
                    v1365 = v386;
                    v1366 = v385;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1478, (uint64_t)&v1479.i64[1], v356 + 1, 16);
                    v386 = v1365;
                    v385 = v1366;
                    v355 = v1369;
                    v356 = v1479.i32[0];
                  }
                  v392 = (char *)v1478 + 16 * v356;
                  *v392 = v391;
                  v392[1] = v390 | 4;
                  v356 = ++v1479.i32[0];
                  ++v384;
                  v383 += 2;
                  v388 += 32;
                }
                while (v387 != v384);
              }
LABEL_575:
              v375 = (llvm::ValueAsMetadata *)((char *)v375 + 8);
            }
            while (v375 != v355);
          }
          v393 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v1400 - 32) + 16);
          v395 = v393 > 0x14 && v393 != 24;
          v396 = *((_DWORD *)v1428 + 5);
          if ((v396 & 0x40000000) != 0)
          {
            v398 = *((_QWORD *)v1428 - 1);
            v397 = v396 & 0x7FFFFFF;
          }
          else
          {
            v397 = v396 & 0x7FFFFFF;
            v398 = (unint64_t)v1428 - 32 * v397;
          }
          v399 = (char *)v1428 - 32;
          if (v397)
          {
            v400 = v398 + 32 * v397;
            do
            {
              if (v399 == (char *)v398)
              {
                if (v395)
                  goto LABEL_605;
              }
              else if ((unint64_t)v1428 - 32 * (*((_DWORD *)v1428 + 5) & 0x7FFFFFF) <= v398)
              {
                v401 = *((unsigned __int8 *)v1428 + 16);
                if (v401 == 84)
                  v402 = 0;
                else
                  v402 = v401 == 39 ? (*((_DWORD *)v1428 + 20) + 1) : 2;
                if ((unint64_t)&v399[-32 * v402] > v398)
                {
LABEL_605:
                  v403 = *(_QWORD *)(v398 + 24);
                  v404 = *(_DWORD *)(v403 + 20);
                  v405 = *(uint64_t **)v398;
                  v406 = 8 * v1381;
                  v407 = v1400;
                  while (1)
                  {
                    v408 = v403 - 32 * (v404 & 0x7FFFFFF);
                    if ((v404 & 0x40000000) != 0)
                      v408 = *(_QWORD *)(v403 - 8);
                    if (*(uint64_t **)(*(_QWORD *)v407
                                     - 32 * (*(_DWORD *)(*(_QWORD *)v407 + 20) & 0x7FFFFFF)
                                     + ((v398 - v408) & 0x1FFFFFFFE0)) != v405)
                      break;
                    v407 = (llvm::ValueAsMetadata *)((char *)v407 + 8);
                    v406 -= 8;
                    if (!v406)
                      goto LABEL_627;
                  }
                  v409 = *v405;
                  LOWORD(v1463) = 257;
                  v410 = operator new(0x48uLL);
                  v410[1] = v409;
                  v411 = (llvm::Value *)(v410 + 1);
                  *v410 = 0;
                  v410[2] = 0;
                  v412 = v410 + 2;
                  v410[3] = 0x4000000000000053;
                  *((_OWORD *)v410 + 2) = 0u;
                  v413 = (char *)(v410 + 4);
                  *((_OWORD *)v410 + 3) = 0u;
                  *((_DWORD *)v410 + 16) = 0;
                  v414 = *((_QWORD *)v1428 + 5);
                  v410[6] = v414;
                  *(_WORD *)(v414 + 18) &= ~0x8000u;
                  if ((*((_BYTE *)v410 + 31) & 0x10) != 0)
                  {
                    v426 = *(_QWORD *)(v414 + 56);
                    if (v426)
                    {
                      v427 = *(llvm::ValueSymbolTable **)(v426 + 104);
                      if (v427)
                        llvm::ValueSymbolTable::reinsertValue(v427, v411);
                    }
                  }
                  v415 = *v1376;
                  v410[4] = *v1376;
                  v410[5] = v1376;
                  *(_QWORD *)(v415 + 8) = v413;
                  *v1376 = (uint64_t)v413;
                  *((_DWORD *)v410 + 17) = v1381;
                  llvm::Value::setName((uint64_t ***)v411, (uint64_t)__p);
                  v416 = *((unsigned int *)v410 + 17);
                  v417 = operator new(40 * v416);
                  *v410 = v417;
                  if ((_DWORD)v416)
                  {
                    v418 = &v417[4 * v416];
                    do
                    {
                      *v417 = 0;
                      v417[1] = 0;
                      v417[2] = 0;
                      v417[3] = v411;
                      v417 += 4;
                    }
                    while (v417 != v418);
                  }
                  v419 = 8 * v1381;
                  v420 = v1400;
                  do
                  {
                    v421 = *(_QWORD *)(v398 + 24);
                    v422 = *(_DWORD *)(v421 + 20);
                    if ((v422 & 0x40000000) != 0)
                      v423 = *(_QWORD *)(v421 - 8);
                    else
                      v423 = v421 - 32 * (v422 & 0x7FFFFFF);
                    sub_1C477667C(v411, *(_QWORD *)(*(_QWORD *)v420- 32 * (*(_DWORD *)(*(_QWORD *)v420 + 20) & 0x7FFFFFF)+ ((v398 - v423) & 0x1FFFFFFFE0)), *(_QWORD *)(*(_QWORD *)v420 + 40));
                    v420 = (llvm::ValueAsMetadata *)((char *)v420 + 8);
                    v419 -= 8;
                  }
                  while (v419);
                  if (*(_QWORD *)v398)
                  {
                    **(_QWORD **)(v398 + 16) = *(_QWORD *)(v398 + 8);
                    v424 = *(_QWORD *)(v398 + 8);
                    if (v424)
                      *(_QWORD *)(v424 + 16) = *(_QWORD *)(v398 + 16);
                  }
                  *(_QWORD *)v398 = v411;
                  v425 = *v412;
                  *(_QWORD *)(v398 + 8) = *v412;
                  if (v425)
                    *(_QWORD *)(v425 + 16) = v398 + 8;
                  *(_QWORD *)(v398 + 16) = v412;
                  *v412 = v398;
                }
              }
LABEL_627:
              v398 += 32;
            }
            while (v398 != v400);
          }
          v428 = *((unsigned __int8 *)v1428 + 16);
          if (v428 != 30)
            __asm { BR              X10 }
          if ((*((_DWORD *)v1428 + 5) & 0x7FFFFFF) == 3)
            v429 = 2;
          else
            v429 = 1;
          v430 = v1400;
          v431 = 0;
          v432 = 0;
          v433 = v429;
          v434 = (char *)v1428 - 64;
          do
          {
            v435 = *((unsigned __int8 *)v1428 + 16);
            if (v435 != 30)
              __asm { BR              X9 }
            sub_1C5F90FA0(*(_QWORD *)&v399[-32 * v432++], *((_QWORD *)v1428 + 5), *(_QWORD *)(*(_QWORD *)v1400 + 40), 0);
            v431 += 2;
            v434 += 32;
          }
          while (v433 != v432);
          MergedLocation = 0;
          v1401 = (llvm::ValueAsMetadata *)((char *)v1400 + 8 * v1381);
          do
          {
            v438 = *(_QWORD *)v430;
            if (MergedLocation)
              MergedLocation = llvm::DILocation::getMergedLocation(MergedLocation, *(const llvm::DILocation **)(*(_QWORD *)v430 + 48), v436);
            else
              MergedLocation = *(llvm::DILocation **)(*(_QWORD *)v430 + 48);
            v439 = *(llvm::BasicBlock **)(v438 + 40);
            v440 = (_QWORD *)*((_QWORD *)v439 + 5);
            if (v440 != (_QWORD *)((char *)v439 + 40))
            {
              if (v440)
                v441 = v440 - 3;
              else
                v441 = 0;
              v442 = *((unsigned __int8 *)v441 + 16);
              v443 = v442 - 29;
              if (v442 != 30)
              {
                v444 = 2;
                switch(v443)
                {
                  case 1:
                    goto LABEL_2433;
                  case 2:
                    v444 = (*((_DWORD *)v441 + 5) >> 1) & 0x3FFFFFF;
                    goto LABEL_662;
                  case 3:
                  case 9:
                    v444 = (*((_DWORD *)v441 + 5) & 0x7FFFFFF) - 1;
                    goto LABEL_662;
                  case 4:
                    goto LABEL_653;
                  case 7:
                    v444 = *((_WORD *)v441 + 9) & 1;
                    goto LABEL_662;
                  case 8:
                    v444 = 1;
                    goto LABEL_653;
                  case 10:
                    v444 = *((_DWORD *)v441 + 20) + 1;
LABEL_662:
                    if (!v444)
                      goto LABEL_658;
                    goto LABEL_653;
                  default:
                    goto LABEL_658;
                }
              }
              if ((*((_DWORD *)v441 + 5) & 0x7FFFFFF) == 3)
                v444 = 2;
              else
                v444 = 1;
LABEL_653:
              v445 = 0;
              v446 = 0;
              v447 = v444;
              v448 = v441 - 8;
              do
              {
                v449 = *((unsigned __int8 *)v441 + 16);
                if (v449 != 30)
                  __asm { BR              X9 }
                llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v441[-4 * v446++ - 4], *(llvm::BasicBlock **)(v438 + 40), 0);
                v445 += 2;
                v448 += 4;
              }
              while (v447 != v446);
              v439 = *(llvm::BasicBlock **)(v438 + 40);
            }
LABEL_658:
            v450 = (llvm::BasicBlock *)*((_QWORD *)v1428 + 5);
            v451 = operator new(0x60uLL);
            v451[13] = v451[13] & 0x38000000 | 1;
            *(_QWORD *)v451 = 0;
            *((_QWORD *)v451 + 1) = 0;
            *((_QWORD *)v451 + 2) = 0;
            *((_QWORD *)v451 + 3) = v451 + 8;
            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v451 + 8), v450, v439);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v438, v1428, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v438 + 40) + 40, (uint64_t ***)v438);
            v452 = *(_QWORD *)(v438 + 24);
            v453 = *(_QWORD **)(v438 + 32);
            *v453 = v452;
            *(_QWORD *)(v452 + 8) = v453;
            *(_QWORD *)(v438 + 24) = 0;
            *(_QWORD *)(v438 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v438);
            v430 = (llvm::ValueAsMetadata *)((char *)v430 + 8);
          }
          while (v430 != v1401);
          __p[0] = MergedLocation;
          v4 = v1425;
          if (MergedLocation)
            llvm::MetadataTracking::track((uint64_t)__p, (unsigned __int8 *)MergedLocation, 2);
          v454 = (unsigned __int8 **)((char *)v1428 + 48);
          v111 = v1372;
          if (__p == (void **)((char *)v1428 + 48))
          {
            v289 = v1371;
            if (__p[0])
              llvm::MetadataTracking::untrack((uint64_t)__p, (unsigned __int8 *)__p[0]);
          }
          else
          {
            v289 = v1371;
            if (*v454)
              llvm::MetadataTracking::untrack((uint64_t)v1428 + 48, *v454);
            v455 = (unsigned __int8 *)__p[0];
            *v454 = (unsigned __int8 *)__p[0];
            if (v455)
            {
              llvm::MetadataTracking::retrack((uint64_t)__p, v455, (uint64_t)v1428 + 48);
              __p[0] = 0;
            }
          }
          if (v1372)
            llvm::DomTreeUpdater::applyUpdates(v1372, (unint64_t *)v1478, v1479.u32[0]);
          if (v1478 != &v1479.u64[1])
            free(v1478);
          v290 = 1;
          v291 = v1367;
          goto LABEL_680;
        }
      }
    }
LABEL_63:
    v37 = **(_QWORD **)this;
    v1445 = v1447;
    v1446 = 0x200000000;
    v1450 = v37;
    v1451 = &v1459;
    v1452 = &v1460;
    v1453 = 0;
    v1454 = 0;
    v1455 = 512;
    v1456 = 7;
    v1457 = 0;
    v1458 = 0;
    v1459 = &unk_1E8167888;
    v1460 = &unk_1E8167A08;
    v1448 = this;
    v1449 = v1423;
    if (!*(_BYTE *)(*(_QWORD *)(v3 + 40) + 11))
      goto LABEL_1151;
    v38 = *v1410 - 24;
    if (!*v1410)
      v38 = 0;
    v39 = *(unsigned __int8 *)(v38 + 16);
    v40 = v39 == 83 ? v38 : 0;
    if (!*v1410)
      goto LABEL_1151;
    if (v39 != 83)
      goto LABEL_1151;
    if ((*(_DWORD *)(v40 + 20) & 0x7FFFFFF) != 2)
      goto LABEL_1151;
    v42 = *(_QWORD **)v3;
    v41 = *(_QWORD *)(v3 + 8);
    v43 = *(void **)(v3 + 16);
    v44 = *(llvm **)(v40 + 40);
    v1441 = 0;
    v1442 = 0;
    IfCondition = (uint64_t ***)llvm::GetIfCondition(v44, (llvm::BasicBlock *)&v1442, &v1441, v36);
    if (!IfCondition)
      goto LABEL_1151;
    v49 = IfCondition;
    v50 = (llvm::ValueAsMetadata *)*(IfCondition - 12);
    if (*((_BYTE *)v50 + 16) == 16)
      goto LABEL_1151;
    v1426 = (llvm *)IfCondition[5];
    v1496 = v1498;
    v1497 = 0x200000000;
    v51 = *(_DWORD *)(v40 + 20);
    v1398 = v50;
    if ((v51 & 0x40000000) != 0)
    {
      v53 = *(_QWORD *)(v40 - 8);
      v52 = v51 & 0x7FFFFFF;
      if ((*(_DWORD *)(v40 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_212;
    }
    else
    {
      v52 = v51 & 0x7FFFFFF;
      v53 = v40 - 32 * v52;
      if ((v51 & 0x7FFFFFF) == 0)
        goto LABEL_212;
    }
    v121 = 0;
    v122 = (uint64_t *)(v53 + 32 * *(unsigned int *)(v40 + 60));
    v123 = 8 * v52;
    do
    {
      v124 = *v122;
      v125 = *(_QWORD *)(*v122 + 40);
      if (v125)
        v126 = v125 - 24;
      else
        v126 = 0;
      if (*(unsigned __int8 *)(v126 + 16) - 29 >= 0xB)
        v126 = 0;
      if ((*(_DWORD *)(v126 + 20) & 0x7FFFFFF) == 1)
      {
        if (v121 >= HIDWORD(v1497))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1496, (uint64_t)v1498, v121 + 1, 8);
          v121 = v1497;
        }
        v1496[v121] = v124;
        v121 = v1497 + 1;
        LODWORD(v1497) = v1497 + 1;
      }
      ++v122;
      v123 -= 8;
    }
    while (v123);
LABEL_212:
    v3 = a1;
    if ((*((_BYTE *)v49 + 23) & 0x20) == 0)
      goto LABEL_227;
    v127 = ***v49;
    v1478 = v49;
    v128 = *(_DWORD *)(v127 + 2496);
    if (!v128)
    {
      v513 = 0;
      goto LABEL_800;
    }
    v129 = *(_QWORD *)(v127 + 2480);
    v130 = v128 - 1;
    v131 = v130 & ((v49 >> 4) ^ (v49 >> 9));
    v132 = (_QWORD *)(v129 + 40 * v131);
    v133 = (_QWORD *)*v132;
    if ((uint64_t ***)*v132 != v49)
    {
      v134 = 0;
      v135 = 1;
      while (v133 != (_QWORD *)-4096)
      {
        if (v134)
          v136 = 0;
        else
          v136 = v133 == (_QWORD *)-8192;
        if (v136)
          v134 = v132;
        v137 = v131 + v135++;
        v131 = v137 & v130;
        v132 = (_QWORD *)(v129 + 40 * v131);
        v133 = (_QWORD *)*v132;
        if ((uint64_t ***)*v132 == v49)
          goto LABEL_223;
      }
      if (v134)
        v513 = v134;
      else
        v513 = v132;
LABEL_800:
      v132 = sub_1C541AB24(v127 + 2480, (uint64_t)&v1478, (uint64_t *)&v1478, v513);
      v514 = v1478;
      v132[4] = 0;
      v132[3] = 0;
      *v132 = v514;
      v132[1] = v132 + 3;
      v132[2] = 0x100000000;
    }
LABEL_223:
    v138 = *((unsigned int *)v132 + 4);
    if (!(_DWORD)v138)
      goto LABEL_227;
    v139 = (_QWORD *)(v132[1] + 8);
    v140 = 16 * v138;
    while (*((_DWORD *)v139 - 2) != 15)
    {
      v139 += 2;
      v140 -= 16;
      if (!v140)
        goto LABEL_227;
    }
    if (!*v139)
    {
LABEL_227:
      v1478 = 0;
      v1466 = 0;
      if (!llvm::Instruction::extractProfMetadata((llvm::Instruction *)v49, (unint64_t *)&v1478, (unint64_t *)&v1466)|| !((char *)v1466 + (_QWORD)v1478))
      {
        goto LABEL_693;
      }
      v141 = (unint64_t)v1478 + (_QWORD)v1466;
      v142 = ((unint64_t)v1478 + (unint64_t)v1466) >> 32;
      if (v142)
      {
        LOBYTE(v142) = 0;
        v1363 = (unint64_t)v1478 + (_QWORD)v1466;
        do
        {
          v141 = v1363 >> 1;
          LOBYTE(v142) = v142 + 1;
          v1364 = v1363 >> 33;
          v1363 >>= 1;
        }
        while (v1364);
      }
      v143 = (unint64_t)v1478 >> v142;
      if (v141 != 0x80000000)
        v143 = (((unint64_t)((unint64_t)v1478 >> v142) << 31) | (v141 >> 1)) / v141;
      v144 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v42 + 80))(*v42);
      v145 = 0x80000000 - v143;
      if ((_DWORD)v1497 == 1)
      {
        if (*(v49 - 4) == (uint64_t **)v44)
          v145 = v143;
        if (v145 < v144)
          goto LABEL_693;
      }
      else if (v144 > v143 && v145 < v144)
      {
        goto LABEL_693;
      }
LABEL_735:
      v463 = 0;
      goto LABEL_1147;
    }
LABEL_693:
    if (v1398 && *((_BYTE *)v1398 + 16) == 83 && *((llvm **)v1398 + 5) == v44)
      goto LABEL_735;
    v1382 = v44;
    v457 = v44;
    v458 = *((_QWORD *)v44 + 6);
    if (v458)
      v459 = v458 - 24;
    else
      v459 = 0;
    if (*(_BYTE *)(v459 + 16) != 83)
    {
      v1391 = v457;
      v1377 = v41;
      v483 = 0;
      v1466 = &v1470;
      v1467 = &v1470;
      v1468 = 4;
      LODWORD(v1469) = 0;
      v1493 = 0;
      v1494[0] = 0;
LABEL_737:
      if (v458)
        v484 = v458 - 24;
      else
        v484 = 0;
      v485 = *(unsigned __int8 *)(v484 + 16);
      if (v485 == 83)
        v486 = (_DWORD *)v484;
      else
        v486 = 0;
      v463 = 1;
      if (v458 && v485 == 83)
      {
        v487 = (uint64_t)v1398;
        if (*(_DWORD *)(*(_QWORD *)v486 + 8) != 269)
          goto LABEL_896;
        v488 = v486[5];
        v489 = (v488 & 0x40000000) != 0 ? (uint64_t *)*((_QWORD *)v486 - 1) : (uint64_t *)&v486[-8 * (v488 & 0x7FFFFFF)];
        v494 = *v489;
        v495 = *(unsigned __int8 *)(*v489 + 16);
        v496 = v495 < 0x1C || v495 - 41 >= 0x12;
        if (v496 && !sub_1C5F97AC0(v494))
        {
          v497 = (v488 & 0x40000000) != 0 ? (_DWORD *)*((_QWORD *)v486 - 1) : &v486[-8 * (v488 & 0x7FFFFFF)];
          v536 = *((_QWORD *)v497 + 4);
          v537 = *(unsigned __int8 *)(v536 + 16);
          if ((v537 < 0x1C || v537 - 41 >= 0x12) && !sub_1C5F97AC0(v536))
          {
            v539 = *((unsigned __int8 *)v1398 + 16);
            if ((v539 < 0x1C || v539 - 41 >= 0x12) && !sub_1C5F97AC0((uint64_t)v1398))
              goto LABEL_896;
          }
        }
        if ((v488 & 0x40000000) != 0)
          v540 = (_QWORD *)*((_QWORD *)v486 - 1);
        else
          v540 = &v486[-8 * (v488 & 0x7FFFFFF)];
        v541 = *v540;
        v542 = v540[4];
        v543 = *(unsigned __int8 *)(*v540 + 16);
        if (v543 == 5)
        {
          if (*(_WORD *)(v541 + 18) == 30
            && (sub_1C4D9EED4((uint64_t)&v1478 + 1, *(llvm::Constant **)(v541 - 32 * (*(_DWORD *)(v541 + 20) & 0x7FFFFFF) + 32))|| sub_1C4D9EED4((uint64_t)&v1478 + 1, *(llvm::Constant **)(v541 - 32 * (*(_DWORD *)(v541 + 20) & 0x7FFFFFF)))))
          {
            goto LABEL_877;
          }
LABEL_878:
          v544 = v541;
          v541 = v542;
        }
        else
        {
          if (v543 != 58
            || (sub_1C4D9ED34((uint64_t)&v1478 + 1, *(llvm::Constant **)(v541 - 32)) & 1) == 0
            && (sub_1C4D9ED34((uint64_t)&v1478 + 1, *(llvm::Constant **)(v541 - 64)) & 1) == 0)
          {
            goto LABEL_878;
          }
LABEL_877:
          v544 = v542;
        }
        BYTE2(v1478) = 0;
        LOWORD(v1478) = 0;
        v545 = *(unsigned __int8 *)(v541 + 16);
        v487 = (uint64_t)v1398;
        if (v545 == 5)
        {
          if (*(_WORD *)(v541 + 18) == 30
            && ((sub_1C4D9EED4((uint64_t)__p + 1, *(llvm::Constant **)(v541 - 32 * (*(_DWORD *)(v541 + 20) & 0x7FFFFFF) + 32)) & 1) != 0|| sub_1C4D9EED4((uint64_t)__p + 1, *(llvm::Constant **)(v541 - 32 * (*(_DWORD *)(v541 + 20) & 0x7FFFFFF)))))
          {
            goto LABEL_887;
          }
LABEL_956:
          v463 = v483;
        }
        else
        {
          if (v545 != 58
            || (sub_1C4D9ED34((uint64_t)__p + 1, *(llvm::Constant **)(v541 - 32)) & 1) == 0
            && (sub_1C4D9ED34((uint64_t)__p + 1, *(llvm::Constant **)(v541 - 64)) & 1) == 0)
          {
            goto LABEL_956;
          }
LABEL_887:
          v546 = *(unsigned __int8 *)(v544 + 16);
          if (v546 == 5)
          {
            if (*(_WORD *)(v544 + 18) != 30
              || (sub_1C4D9EED4((uint64_t)&v1478 + 1, *(llvm::Constant **)(v544 - 32 * (*(_DWORD *)(v544 + 20) & 0x7FFFFFF) + 32)) & 1) == 0&& (sub_1C4D9EED4((uint64_t)&v1478 + 1, *(llvm::Constant **)(v544 - 32 * (*(_DWORD *)(v544 + 20) & 0x7FFFFFF))) & 1) == 0)
            {
              goto LABEL_895;
            }
          }
          else
          {
            if (v546 == 58
              && ((sub_1C4D9ED34((uint64_t)&v1478 + 1, *(llvm::Constant **)(v544 - 32)) & 1) != 0
               || (sub_1C4D9ED34((uint64_t)&v1478 + 1, *(llvm::Constant **)(v544 - 64)) & 1) != 0))
            {
              goto LABEL_896;
            }
LABEL_895:
            if ((sub_1C57A0CAC((int)&v1478 + 2, (llvm::Constant *)v544) & 1) == 0)
              goto LABEL_956;
          }
LABEL_896:
          if (!(_DWORD)v1497)
            goto LABEL_918;
          v547 = (char *)v1496;
          v548 = (char *)&v1496[v1497];
          while (2)
          {
            v549 = *(_QWORD *)(*(_QWORD *)v547 + 48);
            v550 = v549 - 24;
            if (v549)
              v551 = v549 - 24;
            else
              v551 = 0;
            if (*(unsigned __int8 *)(v551 + 16) - 29 >= 0xB)
            {
              do
              {
                v552 = sub_1C477672C((uint64_t)&v1466, v550);
                v553 = v1467 == v1466 ? (uint64_t *)((char *)&v1468 + 4) : &v1468;
                if (v552 == (_QWORD *)((char *)v1467 + 8 * *(unsigned int *)v553)
                  && !sub_1C4D99D08(v550)
                  && !sub_1C509DDB0(v550))
                {
                  goto LABEL_956;
                }
                v549 = *(_QWORD *)(v549 + 8);
                v550 = v549 - 24;
                if (v549)
                  v554 = v549 - 24;
                else
                  v554 = 0;
              }
              while (*(unsigned __int8 *)(v554 + 16) - 29 > 0xA);
            }
            v547 += 8;
            if (v547 != v548)
              continue;
            break;
          }
          v487 = (uint64_t)v1398;
          if ((_DWORD)v1497)
          {
            v555 = (llvm::Instruction **)v1496;
            v556 = 8 * v1497;
            v557 = v556;
            v558 = (char *)v1496;
            do
            {
              if ((*(_WORD *)(*(_QWORD *)v558 + 18) & 0x7FFF) != 0)
                goto LABEL_956;
              v558 += 8;
              v557 -= 8;
            }
            while (v557);
            do
            {
              v559 = *v555++;
              llvm::hoistAllInstructionsInto(v1426, (llvm::BasicBlock *)v49, v559, v46);
              v556 -= 8;
            }
            while (v556);
          }
LABEL_918:
          sub_1C5673D1C((uint64_t)&v1478, (uint64_t)v49, 0, 0, 0);
          v560 = v1486;
          v561 = v1485;
          v562 = v1487;
          v1402 = v1488;
          v1373 = v1489;
          v563 = *((_QWORD *)v1391 + 6);
          v564 = v563 - 24;
          if (v563)
            v565 = v563 - 24;
          else
            v565 = 0;
          if (v563)
          {
            v566 = *(_BYTE *)(v565 + 16) == 83;
            do
            {
              if (!v566)
                break;
              if (sub_1C4774A9C(v564))
              {
                v567 = *(unsigned __int8 *)(v564 + 17) >> 1;
                if (v567 == 127)
                  v567 = -1;
                v1486 = v567;
              }
              v568 = *(_DWORD *)(v564 + 20);
              v569 = v568 & 0x7FFFFFF;
              if ((v568 & 0x7FFFFFF) != 0)
              {
                v570 = 0;
                while (1)
                {
                  v571 = v564 - 32 * v569;
                  if ((v568 & 0x40000000) != 0)
                    v571 = *(_QWORD *)(v564 - 8);
                  if (*(_QWORD *)(v571 + 32 * *(unsigned int *)(v564 + 60) + 8 * v570) == v1442)
                    break;
                  if (v569 == ++v570)
                    goto LABEL_935;
                }
              }
              else
              {
LABEL_935:
                LODWORD(v570) = -1;
              }
              v572 = (v568 & 0x40000000) != 0 ? *(_QWORD *)(v564 - 8) : v564 - 32 * v569;
              v573 = *(uint64_t **)(v572 + 32 * v570);
              if ((_DWORD)v569)
              {
                v574 = 0;
                while (1)
                {
                  v575 = v564 - 32 * v569;
                  if ((v568 & 0x40000000) != 0)
                    v575 = *(_QWORD *)(v564 - 8);
                  if (*(llvm::BasicBlock **)(v575 + 32 * *(unsigned int *)(v564 + 60) + 8 * v574) == v1441)
                    break;
                  if (v569 == ++v574)
                    goto LABEL_944;
                }
              }
              else
              {
LABEL_944:
                LODWORD(v574) = -1;
              }
              if ((v568 & 0x40000000) != 0)
                v576 = *(_QWORD *)(v564 - 8);
              else
                v576 = v564 - 32 * v569;
              v577 = *(_QWORD *)(v576 + 32 * v574);
              LOWORD(v1463) = 257;
              Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v1478, v487, v573, v577, (uint64_t)__p, (unsigned __int8 *)v49);
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v564, Select, (llvm::Value *)1);
              llvm::Value::takeName(Select, (llvm::Value *)v564);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v564 + 40) + 40, (uint64_t ***)v564);
              v579 = *(_QWORD *)(v564 + 24);
              v580 = *(_QWORD **)(v564 + 32);
              *v580 = v579;
              *(_QWORD *)(v579 + 8) = v580;
              *(_QWORD *)(v564 + 24) = 0;
              *(_QWORD *)(v564 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v564);
              v581 = *((_QWORD *)v1391 + 6);
              v582 = v581 - 24;
              if (!v581)
                v582 = 0;
              v583 = *(unsigned __int8 *)(v582 + 16);
              v566 = v583 == 83;
              v564 = v583 == 83 ? v582 : 0;
            }
            while (v581);
          }
          v584 = (char *)operator new(0x60uLL);
          v585 = v584;
          *((_DWORD *)v584 + 13) = *((_DWORD *)v584 + 13) & 0x38000000 | 1;
          *(_QWORD *)v584 = 0;
          *((_QWORD *)v584 + 2) = 0;
          *((_QWORD *)v584 + 1) = 0;
          *((_QWORD *)v584 + 4) = ***(_QWORD ***)v1391 + 1576;
          v586 = (llvm::Value *)(v584 + 32);
          *((_QWORD *)v584 + 3) = v584 + 32;
          *((_QWORD *)v584 + 5) = 0;
          v584[48] = 30;
          v584[49] = 0;
          *((_WORD *)v584 + 25) = 0;
          *((_DWORD *)v584 + 13) = 1;
          *(_OWORD *)(v584 + 56) = 0u;
          *(_OWORD *)(v584 + 72) = 0u;
          *((_DWORD *)v584 + 22) = 0;
          *(_QWORD *)v584 = v1391;
          v588 = (_QWORD *)((char *)v1391 + 8);
          v587 = *((_QWORD *)v1391 + 1);
          *((_QWORD *)v584 + 1) = v587;
          if (v587)
            *(_QWORD *)(v587 + 16) = v584 + 8;
          *((_QWORD *)v584 + 2) = v588;
          *v588 = v584;
          LOWORD(v1463) = 257;
          (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v1484 + 16))(v1484, v586, __p, v1481.i64[1], v1482.i64[0]);
          if (v1479.i32[0])
          {
            v589 = (char *)v1478;
            v590 = (char *)v1478 + 16 * v1479.u32[0];
            v591 = (unsigned __int8 **)(v585 + 80);
            do
            {
              v592 = *(_DWORD *)v589;
              v593 = (unsigned __int8 *)*((_QWORD *)v589 + 1);
              if (v593)
              {
                if (!v592)
                {
                  v1443[0] = *((_QWORD *)v589 + 1);
                  llvm::MetadataTracking::track((uint64_t)v1443, v593, 2);
                  v594 = *v591;
                  goto LABEL_971;
                }
              }
              else
              {
                v594 = *v591;
                if (!*v591 && (v585[55] & 0x20) == 0)
                  goto LABEL_968;
                if (!v592)
                {
                  v1443[0] = 0;
LABEL_971:
                  if (v594)
                    llvm::MetadataTracking::untrack((uint64_t)(v585 + 80), v594);
                  v595 = (unsigned __int8 *)v1443[0];
                  *v591 = (unsigned __int8 *)v1443[0];
                  if (v595)
                    llvm::MetadataTracking::retrack((uint64_t)v1443, v595, (uint64_t)(v585 + 80));
                  goto LABEL_968;
                }
              }
              llvm::Value::setMetadata(v586, *(_DWORD *)v589, (llvm::MDNode *)v593);
LABEL_968:
              v589 += 16;
            }
            while (v589 != v590);
          }
          __p[0] = &v1462;
          __p[1] = (void *)0x300000000;
          if (v1377)
          {
            v1370 = v562;
            v1392 = v560;
            *(_QWORD *)&v1462 = v1426;
            *((_QWORD *)&v1462 + 1) = (unint64_t)v1382 & 0xFFFFFFFFFFFFFFFBLL;
            LODWORD(__p[1]) = 1;
            v596 = (llvm *)*((_QWORD *)v1426 + 5);
            if (v596 != (llvm *)((char *)v1426 + 40))
            {
              if (v596)
                v597 = (char *)v596 - 24;
              else
                v597 = 0;
              v598 = v597[16];
              v599 = v598 - 29;
              if (v598 != 30)
              {
                v600 = 2;
                switch(v599)
                {
                  case 1:
                    goto LABEL_2433;
                  case 2:
                    v600 = (*((_DWORD *)v597 + 5) >> 1) & 0x3FFFFFF;
                    goto LABEL_2177;
                  case 3:
                  case 9:
                    v600 = (*((_DWORD *)v597 + 5) & 0x7FFFFFF) - 1;
                    goto LABEL_2177;
                  case 4:
                    goto LABEL_984;
                  case 7:
                    v600 = *((_WORD *)v597 + 9) & 1;
                    goto LABEL_2177;
                  case 8:
                    v600 = 1;
                    goto LABEL_984;
                  case 10:
                    v600 = *((_DWORD *)v597 + 20) + 1;
LABEL_2177:
                    if (!v600)
                      goto LABEL_1138;
                    goto LABEL_984;
                  default:
                    goto LABEL_1138;
                }
              }
              if ((*((_DWORD *)v597 + 5) & 0x7FFFFFF) == 3)
                v600 = 2;
              else
                v600 = 1;
LABEL_984:
              v601 = 0;
              v602 = 0;
              v603 = v597 + 32;
              v604 = 1;
              v605 = v597 - 64;
              v606 = v600;
              do
              {
                v607 = v597[16];
                if (v607 != 30)
                  __asm { BR              X10 }
                v608 = *(_QWORD *)&v597[-32 * v602 - 32];
                if (v604 >= HIDWORD(__p[1]))
                {
                  v1383 = v603;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&v1462, v604 + 1, 16);
                  v603 = v1383;
                  v604 = __p[1];
                }
                v609 = (llvm **)((char *)__p[0] + 16 * v604);
                *v609 = v1426;
                v609[1] = (llvm *)(v608 | 4);
                v604 = ++LODWORD(__p[1]);
                ++v602;
                v601 += 2;
                v605 += 32;
              }
              while (v606 != v602);
            }
LABEL_1138:
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v49[5] + 5), v49);
            v711 = v49[3];
            v712 = v49[4];
            *v712 = (uint64_t *)v711;
            v711[1] = (uint64_t *)v712;
            v49[3] = 0;
            v49[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v49);
            llvm::DomTreeUpdater::applyUpdates(v1377, (unint64_t *)__p[0], LODWORD(__p[1]));
            v560 = v1392;
            v562 = v1370;
          }
          else
          {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v49[5] + 5), v49);
            v610 = v49[3];
            v611 = v49[4];
            *v611 = (uint64_t *)v610;
            v610[1] = (uint64_t *)v611;
            v49[3] = 0;
            v49[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v49);
          }
          if (__p[0] != &v1462)
            free(__p[0]);
          v1486 = v560;
          v1485 = v561;
          v1487 = v562;
          v1488 = v1402;
          v1489 = v1373;
          if (v1478 != &v1479.u64[1])
            free(v1478);
          v463 = 1;
        }
      }
LABEL_1144:
      if (v1467 != v1466)
        free(v1467);
      v4 = v1425;
      v3 = a1;
      goto LABEL_1147;
    }
    v460 = 4;
    v461 = v458;
    while (--v460)
    {
      v461 = *(_QWORD *)(v461 + 8);
      v462 = v461 - 24;
      if (!v461)
        v462 = 0;
      if (*(_BYTE *)(v462 + 16) != 83)
      {
        v1391 = v457;
        v1377 = v41;
        v463 = 0;
        v1466 = &v1470;
        v1467 = &v1470;
        v1468 = 4;
        LODWORD(v1469) = 0;
        v1493 = 0;
        v1494[0] = 0;
        v464 = dword_1ED828578;
        while (1)
        {
          v458 = *(_QWORD *)(v458 + 8);
          v1462 = 0uLL;
          __p[1] = 0;
          __p[0] = v43;
          *(_QWORD *)&v1463 = v459;
          WORD4(v1463) = 257;
          v465 = *(_DWORD *)(v459 + 20);
          if ((v465 & 0x40000000) != 0)
          {
            v467 = *(uint64_t **)(v459 - 8);
            v466 = v465 & 0x7FFFFFF;
          }
          else
          {
            v466 = v465 & 0x7FFFFFF;
            v467 = (uint64_t *)(v459 - 32 * v466);
          }
          v1478 = &v1479.u64[1];
          v1479.i64[0] = 0x800000000;
          if (v466 >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1478, (uint64_t)&v1479.i64[1], v466, 8);
            v468 = v1479.i32[0];
            v470 = (char *)v1478;
            v469 = v1479.u32[0];
          }
          else
          {
            v468 = 0;
            if (!v466)
            {
              v474 = &v1479.i8[8];
              goto LABEL_715;
            }
            v469 = 0;
            v470 = &v1479.i8[8];
          }
          v471 = 32 * v466;
          v472 = &v470[8 * v469];
          do
          {
            v473 = *v467;
            v467 += 4;
            *(_QWORD *)v472 = v473;
            v472 += 8;
            v471 -= 32;
          }
          while (v471);
          v474 = (char *)v1478;
LABEL_715:
          v1479.i32[0] = v468 + v466;
          v475 = llvm::SimplifyInstructionWithOperands((llvm *)v459, (uint64_t)v474, (v468 + v466), (uint64_t)__p, v47, v48);
          if (v1478 == &v1479.u64[1])
          {
            if (!v475)
              goto LABEL_720;
          }
          else
          {
            free(v1478);
            if (!v475)
            {
LABEL_720:
              v478 = *(_DWORD *)(v459 + 20);
              if ((v478 & 0x40000000) != 0)
                v479 = *(uint64_t **)(v459 - 8);
              else
                v479 = (uint64_t *)(v459 - 32 * (v478 & 0x7FFFFFF));
              if (!sub_1C5F97744(*v479, (uint64_t)v1391, (uint64_t)&v1466, (uint64_t)&v1493, v464, 0, v42, 0))goto LABEL_1144;
              v480 = *(_DWORD *)(v459 + 20);
              v481 = (v480 & 0x40000000) != 0 ? *(_QWORD *)(v459 - 8) : v459 - 32 * (v480 & 0x7FFFFFF);
              if (!sub_1C5F97744(*(_QWORD *)(v481 + 32), (uint64_t)v1391, (uint64_t)&v1466, (uint64_t)&v1493, v464, 0, v42, 0))goto LABEL_1144;
              goto LABEL_728;
            }
          }
          v463 = 1;
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v459, v475, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v459 + 40) + 40, (uint64_t ***)v459);
          v476 = *(_QWORD *)(v459 + 24);
          v477 = *(_QWORD **)(v459 + 32);
          *v477 = v476;
          *(_QWORD *)(v476 + 8) = v477;
          *(_QWORD *)(v459 + 24) = 0;
          *(_QWORD *)(v459 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v459);
LABEL_728:
          v459 = v458 - 24;
          if (v458)
            v482 = v458 - 24;
          else
            v482 = 0;
          if (*(_BYTE *)(v482 + 16) != 83)
          {
            v458 = *((_QWORD *)v1391 + 6);
            v483 = v463;
            goto LABEL_737;
          }
        }
      }
    }
    v463 = 0;
    v4 = v1425;
LABEL_1147:
    if (v1496 != v1498)
      free(v1496);
    if ((v463 & 1) != 0)
    {
      v33 = 1;
      goto LABEL_1877;
    }
LABEL_1151:
    v713 = 0;
    v714 = *v1423;
    v715 = (uint64_t)*v1423 - 24;
    if (!*v1423)
      v715 = 0;
    v716 = *(unsigned __int8 *)(v715 + 16) - 40;
    if (v716 >= 0xFFFFFFF5)
      v717 = v715;
    else
      v717 = 0;
    v718 = (uint64_t *)(v717 + 24);
    v1448 = *(llvm **)(v717 + 40);
    v1449 = (llvm **)(v717 + 24);
    v719 = *(void **)(v717 + 48);
    v1478 = v719;
    if (v719)
    {
      llvm::MetadataTracking::track((uint64_t)&v1478, (unsigned __int8 *)v719, 2);
      v713 = v1478;
    }
    sub_1C4774EF4((uint64_t)&v1445, 0, (uint64_t)v713);
    if (v1478)
      llvm::MetadataTracking::untrack((uint64_t)&v1478, (unsigned __int8 *)v1478);
    v33 = v1418 | v1411;
    v720 = v1388;
    switch(*(_BYTE *)(v717 + 16))
    {
      case 0x1E:
        if ((*(_DWORD *)(v717 + 20) & 0x7FFFFFF) != 1)
        {
          v755 = sub_1C5F97B20(v3, v717, (uint64_t *)&v1445);
LABEL_1876:
          v33 |= v755;
          goto LABEL_1877;
        }
        v721 = *(llvm::BasicBlock **)(v717 + 40);
        if (!*(_BYTE *)(*(_QWORD *)(v3 + 40) + 7))
          goto LABEL_1590;
        v722 = *(_QWORD *)(v3 + 32);
        if (!v722)
          goto LABEL_1591;
        v723 = *(_QWORD *)(v717 - 32);
        if (!llvm::BasicBlock::hasNPredecessorsOrMore(*(llvm::BasicBlock **)(v717 + 40), 2))
        {
LABEL_1590:
          LOBYTE(v722) = 0;
          goto LABEL_1591;
        }
        v724 = *(_QWORD *)(a1 + 24);
        v725 = 24 * v722;
        v726 = 24 * v722;
        v727 = v724;
        while (*(llvm::BasicBlock **)(v727 + 16) != v721)
        {
          v727 += 24;
          v726 -= 24;
          if (!v726)
          {
            v727 = v724 + 24 * v722;
            break;
          }
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v727 - v724) >> 3) == v722)
        {
          v728 = *(_QWORD *)(a1 + 24);
          while (*(_QWORD *)(v728 + 16) != v723)
          {
            v728 += 24;
            v725 -= 24;
            if (!v725)
            {
              v728 = v724 + 24 * v722;
              break;
            }
          }
          LOBYTE(v722) = 0xAAAAAAAAAAAAAAABLL * ((v728 - v724) >> 3) != v722;
        }
        else
        {
          LOBYTE(v722) = 1;
        }
LABEL_1591:
        FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v721, 1);
        v965 = FirstNonPHIOrDbg[16];
        if ((v965 - 29) <= 0xA)
        {
          v966 = *(_QWORD *)(*((_QWORD *)v721 + 7) + 80);
          v967 = v966 ? v966 - 24 : 0;
          v968 = v721 == (llvm::BasicBlock *)v967 ? 1 : v722;
          if ((v968 & 1) == 0)
          {
            if ((llvm::TryToSimplifyUncondBranchFromEmptyBlock(v721, *(llvm::BasicBlock **)(a1 + 8), v963) & 1) != 0)
            {
              v755 = 1;
              v3 = a1;
              goto LABEL_1876;
            }
            v965 = FirstNonPHIOrDbg[16];
          }
        }
        v1081 = FirstNonPHIOrDbg + 24;
        if (v965 == 81 && (*((_WORD *)FirstNonPHIOrDbg + 9) & 0x3E) == 0x20)
        {
          v1082 = (_QWORD *)(v717 + 24);
          if (*(_BYTE *)(*((_QWORD *)FirstNonPHIOrDbg - 4) + 16) == 16)
          {
            v1083 = (uint64_t *)(FirstNonPHIOrDbg - 64);
            v1084 = (char **)(FirstNonPHIOrDbg + 32);
            do
            {
              v1085 = *v1084;
              v1086 = (uint64_t)(*v1084 - 24);
              if (v1085)
                v1087 = v1086;
              else
                v1087 = 0;
              v1088 = sub_1C4D99D08(v1087);
              v1084 = (char **)(v1085 + 8);
            }
            while (v1088);
            if (*(unsigned __int8 *)(v1087 + 16) - 29 <= 0xA)
            {
              v1089 = v1418 | v1411;
              v1090 = (uint64_t *)*((_QWORD *)FirstNonPHIOrDbg + 5);
              v1091 = (_QWORD **)v1090[6];
              if (v1091)
                v1092 = v1091 - 3;
              else
                v1092 = 0;
              if (*((_BYTE *)v1092 + 16) != 83)
              {
                v1093 = *((_QWORD *)FirstNonPHIOrDbg + 1);
                if (v1093)
                {
                  if (!*(_QWORD *)(v1093 + 8))
                  {
                    v1223 = *((_QWORD *)FirstNonPHIOrDbg - 8);
                    v1435 = (llvm *)*((_QWORD *)FirstNonPHIOrDbg - 4);
                    v1224 = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v1090);
                    if (v1224)
                    {
                      v1225 = v1224;
                      v1226 = *(_QWORD *)(v1224 + 40);
                      v1227 = v1226 ? v1226 - 24 : 0;
                      v1228 = *(unsigned __int8 *)(v1227 + 16) - 29 >= 0xB ? 0 : v1227;
                      if (*(_BYTE *)(v1228 + 16) == 31)
                      {
                        v1229 = *(_DWORD *)(v1228 + 20);
                        v1230 = (v1229 & 0x40000000) != 0
                              ? *(_QWORD **)(v1228 - 8)
                              : (_QWORD *)(v1228 - 32 * (v1229 & 0x7FFFFFF));
                        if (*v1230 == v1223)
                        {
                          if ((uint64_t *)v1230[4] != v1090)
                          {
                            v1236 = sub_1C4F3EF30(v1228, (uint64_t)v1090);
                            if (*v1083)
                            {
                              **((_QWORD **)FirstNonPHIOrDbg - 6) = *((_QWORD *)FirstNonPHIOrDbg - 7);
                              v1239 = *((_QWORD *)FirstNonPHIOrDbg - 7);
                              if (v1239)
                                *(_QWORD *)(v1239 + 16) = *((_QWORD *)FirstNonPHIOrDbg - 6);
                            }
                            *v1083 = v1236;
                            if (v1236)
                            {
                              v1242 = *(_QWORD *)(v1236 + 8);
                              v1240 = (uint64_t **)(v1236 + 8);
                              v1241 = v1242;
                              *((_QWORD *)FirstNonPHIOrDbg - 7) = v1242;
                              if (v1242)
                                *(_QWORD *)(v1241 + 16) = FirstNonPHIOrDbg - 56;
                              *((_QWORD *)FirstNonPHIOrDbg - 6) = v1240;
                              *v1240 = v1083;
                            }
                            v1243 = *(void **)(a1 + 16);
                            v1468 = 0;
                            v1469 = 0;
                            v1467 = 0;
                            v1466 = v1243;
                            v1470 = FirstNonPHIOrDbg;
                            v1471 = 257;
                            v1244 = *((_DWORD *)FirstNonPHIOrDbg + 5);
                            if ((v1244 & 0x40000000) != 0)
                            {
                              v1246 = (char *)*((_QWORD *)FirstNonPHIOrDbg - 1);
                              v1245 = v1244 & 0x7FFFFFF;
                            }
                            else
                            {
                              v1245 = v1244 & 0x7FFFFFF;
                              v1246 = &FirstNonPHIOrDbg[-32 * v1245];
                            }
                            v1478 = &v1479.u64[1];
                            v1479.i64[0] = 0x800000000;
                            if (v1245 >= 9)
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1478, (uint64_t)&v1479.i64[1], v1245, 8);
                              v1247 = v1479.i32[0];
                              v1249 = (char *)v1478;
                              v1248 = v1479.u32[0];
                              goto LABEL_2173;
                            }
                            v1247 = 0;
                            if (v1245)
                            {
                              v1248 = 0;
                              v1249 = &v1479.i8[8];
LABEL_2173:
                              v1250 = 32 * v1245;
                              v1251 = &v1249[8 * v1248];
                              do
                              {
                                v1252 = *(_QWORD *)v1246;
                                v1246 += 32;
                                *(_QWORD *)v1251 = v1252;
                                v1251 += 8;
                                v1250 -= 32;
                              }
                              while (v1250);
                              v1253 = (char *)v1478;
                            }
                            else
                            {
                              v1253 = &v1479.i8[8];
                            }
                            v4 = v1425;
                            v33 = v1418 | v1411;
                            v1479.i32[0] = v1247 + v1245;
                            v1260 = llvm::SimplifyInstructionWithOperands((llvm *)FirstNonPHIOrDbg, (uint64_t)v1253, (v1247 + v1245), (uint64_t)&v1466, v1237, v1238);
                            if (v1478 == &v1479.u64[1])
                            {
                              if (v1260)
                                goto LABEL_2191;
                            }
                            else
                            {
                              free(v1478);
                              if (v1260)
                              {
LABEL_2191:
                                llvm::Value::doRAUW((llvm::ValueAsMetadata *)FirstNonPHIOrDbg, v1260, (llvm::Value *)1);
                                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)FirstNonPHIOrDbg + 5) + 40, (uint64_t ***)FirstNonPHIOrDbg);
                                v1261 = *((_QWORD *)FirstNonPHIOrDbg + 3);
                                v1262 = (_QWORD *)*((_QWORD *)FirstNonPHIOrDbg + 4);
                                *v1262 = v1261;
                                *(_QWORD *)(v1261 + 8) = v1262;
                                *v1081 = 0;
                                *((_QWORD *)FirstNonPHIOrDbg + 4) = 0;
                                llvm::Value::deleteValue((llvm::Value *)FirstNonPHIOrDbg);
                              }
                            }
                            v3 = a1;
                            *(_BYTE *)(a1 + 48) = 1;
LABEL_2202:
                            v755 = 1;
                            goto LABEL_1876;
                          }
                          v1254 = v1225;
                          v1255 = (_QWORD *)v1228;
                          sub_1C4E5D490(v1228, (uint64_t)v1435);
                          if (v1257 != -2)
                          {
                            v1263 = **(_QWORD **)*v1090;
                            if ((*((_WORD *)FirstNonPHIOrDbg + 9) & 0x3F) == 0x20)
                            {
                              v1264 = *(llvm::Value **)(v1263 + 1568);
                              if (!v1264)
                              {
                                v1265 = *(llvm::ConstantInt **)(v1263 + 1888);
                                v1479.i32[0] = *(_DWORD *)(v1263 + 1896) >> 8;
                                if (v1479.i32[0] > 0x40u)
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v1478, 0, 0);
                                else
                                  v1478 = 0;
                                v1264 = llvm::ConstantInt::get(v1265, (llvm::LLVMContext *)&v1478, v1256);
                                if (v1479.i32[0] >= 0x41u && v1478)
                                  MEMORY[0x1CAA32F9C](v1478, 0x1000C8000313F17);
                                *(_QWORD *)(v1263 + 1568) = v1264;
                              }
                            }
                            else
                            {
                              v1264 = *(llvm::Value **)(v1263 + 1560);
                              if (!v1264)
                              {
                                v1330 = *(llvm::ConstantInt **)(v1263 + 1888);
                                v1331 = *(_DWORD *)(v1263 + 1896);
                                v1479.i32[0] = v1331 >> 8;
                                if (v1331 >> 8 > 0x40)
                                {
                                  llvm::APInt::initSlowCase((llvm::APInt *)&v1478, 1, 0);
                                }
                                else
                                {
                                  if (v1331 <= 0xFF)
                                    v1332 = 0;
                                  else
                                    v1332 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v1331);
                                  v1478 = (void *)(v1332 & 1);
                                }
                                v1264 = llvm::ConstantInt::get(v1330, (llvm::LLVMContext *)&v1478, v1256);
                                if (v1479.i32[0] >= 0x41u && v1478)
                                  MEMORY[0x1CAA32F9C](v1478, 0x1000C8000313F17);
                                *(_QWORD *)(v1263 + 1560) = v1264;
                              }
                            }
                            llvm::Value::doRAUW((llvm::ValueAsMetadata *)FirstNonPHIOrDbg, v1264, (llvm::Value *)1);
                            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)FirstNonPHIOrDbg + 5) + 40, (uint64_t ***)FirstNonPHIOrDbg);
                            v1266 = *((_QWORD *)FirstNonPHIOrDbg + 3);
                            v1267 = (_QWORD *)*((_QWORD *)FirstNonPHIOrDbg + 4);
                            *v1267 = v1266;
                            *(_QWORD *)(v1266 + 8) = v1267;
                            *v1081 = 0;
                            *((_QWORD *)FirstNonPHIOrDbg + 4) = 0;
                            llvm::Value::deleteValue((llvm::Value *)FirstNonPHIOrDbg);
                            v3 = a1;
                            *(_BYTE *)(a1 + 48) = 1;
                            v4 = v1425;
                            goto LABEL_2201;
                          }
                          v1258 = (uint64_t *)v1090[5];
                          if (v1258 == v1090 + 5)
                          {
                            v1259 = 0;
                          }
                          else
                          {
                            if (v1258)
                              v1259 = v1258 - 3;
                            else
                              v1259 = 0;
                            if (*((unsigned __int8 *)v1259 + 16) - 29 >= 0xB)
                              v1259 = 0;
                          }
                          v1268 = *((unsigned __int8 *)v1259 + 16);
                          if (v1268 != 30)
                            __asm { BR              X10 }
                          v1415 = *(v1259 - 4);
                          v1269 = *(_QWORD *)(*((_QWORD *)FirstNonPHIOrDbg + 1) + 24);
                          if (v1269 && *(_BYTE *)(v1269 + 16) == 83)
                          {
                            v1270 = *(_QWORD *)(v1415 + 48);
                            v1271 = v1270 ? v1270 - 24 : 0;
                            if (v1269 == v1271)
                            {
                              v1272 = *(_QWORD *)(v1269 + 32);
                              v1273 = v1272 ? v1272 - 24 : 0;
                              if (*(_BYTE *)(v1273 + 16) != 83)
                              {
                                v1274 = *(llvm::PHINode **)(*((_QWORD *)FirstNonPHIOrDbg + 1) + 24);
                                v1275 = *(uint64_t **)*v1090;
                                v1276 = *v1275;
                                v1277 = *(llvm::ValueHandleBase **)(*v1275 + 1560);
                                if (!v1277)
                                {
                                  v1360 = *(llvm::ConstantInt **)(v1276 + 1888);
                                  v1361 = *(_DWORD *)(v1276 + 1896);
                                  v1479.i32[0] = v1361 >> 8;
                                  if (v1361 >> 8 > 0x40)
                                  {
                                    llvm::APInt::initSlowCase((llvm::APInt *)&v1478, 1, 0);
                                  }
                                  else
                                  {
                                    if (v1361 <= 0xFF)
                                      v1362 = 0;
                                    else
                                      v1362 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v1361);
                                    v1478 = (void *)(v1362 & 1);
                                  }
                                  v1277 = llvm::ConstantInt::get(v1360, (llvm::LLVMContext *)&v1478, v1256);
                                  if (v1479.i32[0] >= 0x41u && v1478)
                                    MEMORY[0x1CAA32F9C](v1478, 0x1000C8000313F17);
                                  *(_QWORD *)(v1276 + 1560) = v1277;
                                  v1276 = **(_QWORD **)*v1090;
                                }
                                v1278 = *(llvm::ValueHandleBase **)(v1276 + 1568);
                                if (!v1278)
                                {
                                  v1359 = *(llvm::ConstantInt **)(v1276 + 1888);
                                  v1479.i32[0] = *(_DWORD *)(v1276 + 1896) >> 8;
                                  if (v1479.i32[0] > 0x40u)
                                    llvm::APInt::initSlowCase((llvm::APInt *)&v1478, 0, 0);
                                  else
                                    v1478 = 0;
                                  v1278 = llvm::ConstantInt::get(v1359, (llvm::LLVMContext *)&v1478, v1256);
                                  if (v1479.i32[0] >= 0x41u && v1478)
                                    MEMORY[0x1CAA32F9C](v1478, 0x1000C8000313F17);
                                  *(_QWORD *)(v1276 + 1568) = v1278;
                                }
                                v1279 = *((_WORD *)FirstNonPHIOrDbg + 9) & 0x3F;
                                v1280 = v1279 == 32;
                                if (v1279 == 32)
                                  v1281 = v1277;
                                else
                                  v1281 = v1278;
                                v1408 = v1281;
                                if (v1280)
                                  v1282 = v1278;
                                else
                                  v1282 = v1277;
                                llvm::Value::doRAUW((llvm::ValueAsMetadata *)FirstNonPHIOrDbg, v1282, (llvm::Value *)1);
                                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)FirstNonPHIOrDbg + 5) + 40, (uint64_t ***)FirstNonPHIOrDbg);
                                v1283 = *((_QWORD *)FirstNonPHIOrDbg + 3);
                                v1284 = (_QWORD *)*((_QWORD *)FirstNonPHIOrDbg + 4);
                                *v1284 = v1283;
                                *(_QWORD *)(v1283 + 8) = v1284;
                                *v1081 = 0;
                                *((_QWORD *)FirstNonPHIOrDbg + 4) = 0;
                                llvm::Value::deleteValue((llvm::Value *)FirstNonPHIOrDbg);
                                v1466 = &v1468;
                                v1467 = (void *)0x200000000;
                                v1285 = *(_QWORD **)*v1090;
                                v1478 = "switch.edge";
                                v1480.i16[4] = 259;
                                v1286 = (_QWORD **)v1090[7];
                                v1287 = operator new();
                                *(_QWORD *)v1287 = *v1285 + 1600;
                                *(_QWORD *)(v1287 + 8) = 0;
                                v1288 = *(_DWORD *)(v1287 + 20) & 0xC0000000;
                                *(_QWORD *)(v1287 + 24) = 0;
                                v1289 = v1287 + 24;
                                *(_DWORD *)(v1287 + 16) = 22;
                                *(_DWORD *)(v1287 + 20) = v1288;
                                *(_QWORD *)(v1287 + 32) = 0;
                                *(_QWORD *)(v1287 + 40) = v1287 + 40;
                                *(_QWORD *)(v1287 + 48) = v1287 + 40;
                                *(_QWORD *)(v1287 + 56) = 0;
                                if (v1286)
                                {
                                  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v1286 + 9), (_QWORD *)v1287);
                                  v1291 = (_QWORD **)v1090[3];
                                  v1290 = v1090 + 3;
                                  *(_QWORD *)(v1287 + 24) = v1291;
                                  *(_QWORD *)(v1287 + 32) = v1290;
                                  v1291[1] = (_QWORD *)v1289;
                                  *v1290 = v1289;
                                }
                                llvm::Value::setName((uint64_t ***)v1287, (uint64_t)&v1478);
                                v1478 = v1255;
                                v1479.i8[0] = 0;
                                v1482.i8[0] = 0;
                                v1482.i8[8] = 0;
                                llvm::SwitchInstProfUpdateWrapper::init((llvm::SwitchInstProfUpdateWrapper **)&v1478, v1292);
                                if (v1482.i8[0])
                                {
                                  v1293 = (((unint64_t)*(unsigned int *)v1479.i64[0] + 1) >> 1) | 0x100000000;
                                  llvm::SwitchInstProfUpdateWrapper::setSuccessorWeight((uint64_t *)&v1478, 0, v1293);
                                }
                                else
                                {
                                  v1293 = 0;
                                }
                                llvm::SwitchInstProfUpdateWrapper::addCase(&v1478, v1435, (llvm::BasicBlock *)v1287, v1293);
                                if (*(_QWORD *)(a1 + 8))
                                {
                                  v1294 = v1467;
                                  if (v1467 >= (unint64_t)HIDWORD(v1467))
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1466, (uint64_t)&v1468, v1467 + 1, 16);
                                    v1294 = v1467;
                                  }
                                  v1295 = (uint64_t *)((char *)v1466 + 16 * v1294);
                                  *v1295 = v1254;
                                  v1295[1] = v1287 & 0xFFFFFFFFFFFFFFFBLL;
                                  LODWORD(v1467) = (_DWORD)v1467 + 1;
                                }
                                sub_1C5AE380C((uint64_t)&v1478);
                                v1448 = (llvm *)v1287;
                                v1449 = (llvm **)(v1287 + 40);
                                v1296 = (_QWORD *)v1255[6];
                                v1496 = v1296;
                                if (v1296)
                                {
                                  llvm::MetadataTracking::track((uint64_t)&v1496, (unsigned __int8 *)v1296, 2);
                                  v1297 = (uint64_t)v1496;
                                }
                                else
                                {
                                  v1297 = 0;
                                }
                                sub_1C4774EF4((uint64_t)&v1445, 0, v1297);
                                if (v1496)
                                  llvm::MetadataTracking::untrack((uint64_t)&v1496, (unsigned __int8 *)v1496);
                                v1333 = (char *)operator new(0x60uLL);
                                v1334 = v1333;
                                *((_DWORD *)v1333 + 13) = *((_DWORD *)v1333 + 13) & 0x38000000 | 1;
                                *(_QWORD *)v1333 = 0;
                                *((_QWORD *)v1333 + 2) = 0;
                                *((_QWORD *)v1333 + 1) = 0;
                                *((_QWORD *)v1333 + 4) = ***(_QWORD ***)v1415 + 1576;
                                v1335 = (llvm::Value *)(v1333 + 32);
                                *((_QWORD *)v1333 + 3) = v1333 + 32;
                                *((_QWORD *)v1333 + 5) = 0;
                                v1333[48] = 30;
                                v1333[49] = 0;
                                *((_WORD *)v1333 + 25) = 0;
                                *((_DWORD *)v1333 + 13) = 1;
                                *(_OWORD *)(v1333 + 56) = 0u;
                                *(_OWORD *)(v1333 + 72) = 0u;
                                *((_DWORD *)v1333 + 22) = 0;
                                *(_QWORD *)v1333 = v1415;
                                v1336 = (_QWORD *)(v1415 + 8);
                                v1337 = *(_QWORD *)(v1415 + 8);
                                *((_QWORD *)v1333 + 1) = v1337;
                                if (v1337)
                                  *(_QWORD *)(v1337 + 16) = v1333 + 8;
                                *((_QWORD *)v1333 + 2) = v1336;
                                *v1336 = v1333;
                                v1480.i16[4] = 257;
                                (*((void (**)(void **, llvm::Value *, void **, llvm *, llvm **))*v1452 + 2))(v1452, v1335, &v1478, v1448, v1449);
                                if ((_DWORD)v1446)
                                {
                                  v1338 = (char *)v1445;
                                  v1339 = (char *)v1445 + 16 * v1446;
                                  v1340 = (unsigned __int8 **)(v1334 + 80);
                                  do
                                  {
                                    v1341 = *(_DWORD *)v1338;
                                    v1342 = (unsigned __int8 *)*((_QWORD *)v1338 + 1);
                                    if (v1342)
                                    {
                                      if (!v1341)
                                      {
                                        __p[0] = *((void **)v1338 + 1);
                                        llvm::MetadataTracking::track((uint64_t)__p, v1342, 2);
                                        v1343 = *v1340;
                                        goto LABEL_2336;
                                      }
                                    }
                                    else
                                    {
                                      v1343 = *v1340;
                                      if (!*v1340 && (v1334[55] & 0x20) == 0)
                                        goto LABEL_2333;
                                      if (!v1341)
                                      {
                                        __p[0] = 0;
LABEL_2336:
                                        if (v1343)
                                          llvm::MetadataTracking::untrack((uint64_t)(v1334 + 80), v1343);
                                        v1344 = (unsigned __int8 *)__p[0];
                                        *v1340 = (unsigned __int8 *)__p[0];
                                        if (v1344)
                                          llvm::MetadataTracking::retrack((uint64_t)__p, v1344, (uint64_t)(v1334 + 80));
                                        goto LABEL_2333;
                                      }
                                    }
                                    llvm::Value::setMetadata(v1335, *(_DWORD *)v1338, (llvm::MDNode *)v1342);
LABEL_2333:
                                    v1338 += 16;
                                  }
                                  while (v1338 != v1339);
                                }
                                sub_1C477667C(v1274, (uint64_t)v1408, v1287);
                                if (*(_QWORD *)(a1 + 8))
                                {
                                  v1345 = v1467;
                                  if (v1467 >= (unint64_t)HIDWORD(v1467))
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1466, (uint64_t)&v1468, v1467 + 1, 16);
                                    v1345 = v1467;
                                  }
                                  v1346 = (uint64_t *)((char *)v1466 + 16 * v1345);
                                  *v1346 = v1287;
                                  v1346[1] = v1415 & 0xFFFFFFFFFFFFFFFBLL;
                                  LODWORD(v1467) = (_DWORD)v1467 + 1;
                                  llvm::DomTreeUpdater::applyUpdates(*(_QWORD *)(a1 + 8), (unint64_t *)v1466, v1467);
                                }
                                if (v1466 != &v1468)
                                  free(v1466);
                                v4 = v1425;
                                v3 = a1;
LABEL_2201:
                                v33 = v1089;
                                goto LABEL_2202;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              v4 = v1425;
              v33 = v1089;
            }
LABEL_1848:
            v1094 = (unsigned __int8 *)(v1085 - 24);
            if (!v1085)
              v1094 = 0;
            v1095 = v1094[16];
            if (v1095 == 94)
              v1096 = v1094;
            else
              v1096 = 0;
            if (v1085 && v1095 == 94)
            {
              do
              {
                v1085 = (char *)*((_QWORD *)v1085 + 1);
                if (v1085)
                  v1097 = (uint64_t)(v1085 - 24);
                else
                  v1097 = 0;
              }
              while (sub_1C4D99D08(v1097));
              if (*(unsigned __int8 *)(v1097 + 16) - 29 <= 0xA)
              {
                v1098 = *(_QWORD *)(a1 + 8);
                UniqueSuccessor = llvm::BasicBlock::getUniqueSuccessor(v721);
                v1100 = *(_QWORD *)(UniqueSuccessor + 48);
                v1101 = v1100 ? v1100 - 24 : 0;
                if (*(_BYTE *)(v1101 + 16) != 83)
                {
                  v1102 = *(_QWORD *)(UniqueSuccessor + 8);
                  if (v1102)
                  {
                    while (1)
                    {
                      v1103 = *(_QWORD *)(v1102 + 24);
                      v1104 = *(unsigned __int8 *)(v1103 + 16);
                      v1105 = v1103 && v1104 >= 0x1C;
                      if (v1105 && v1104 - 29 <= 0xA)
                        break;
                      v1102 = *(_QWORD *)(v1102 + 8);
                      if (!v1102)
                        goto LABEL_1874;
                    }
                    v1115 = v33;
LABEL_1896:
                    v1116 = *(_QWORD *)(v1103 + 40);
                    if ((llvm::BasicBlock *)v1116 == v721)
                      goto LABEL_1913;
                    v1117 = *(_QWORD *)(v1116 + 48);
                    if (v1117)
                      v1118 = (llvm::Instruction *)(v1117 - 24);
                    else
                      v1118 = 0;
                    if (!v1117
                      || *((_BYTE *)v1118 + 16) != 94
                      || !llvm::Instruction::isIdenticalToWhenDefined(v1118, (const llvm::Instruction *)v1096)|| (v1096[17] ^ *((unsigned __int8 *)v1118 + 17)) > 1)
                    {
                      goto LABEL_1912;
                    }
                    do
                    {
                      v1117 = *(_QWORD *)(v1117 + 8);
                      if (v1117)
                        v1119 = (llvm::Instruction *)(v1117 - 24);
                      else
                        v1119 = 0;
                    }
                    while (sub_1C4D99D08((uint64_t)v1119));
                    if (!v1117 || *((_BYTE *)v1119 + 16) != 30)
                    {
LABEL_1912:
                      v4 = v1425;
                      goto LABEL_1913;
                    }
                    v4 = v1425;
                    if (llvm::Instruction::isIdenticalToWhenDefined(v1119, (const llvm::Instruction *)v717)&& (*(unsigned __int8 *)(v717 + 17) ^ *((unsigned __int8 *)v1119 + 17)) <= 1)
                    {
                      for (i = *((_QWORD *)v721 + 1); i; i = *(_QWORD *)(i + 8))
                      {
                        v1125 = *(_QWORD *)(i + 24);
                        v1126 = *(unsigned __int8 *)(v1125 + 16);
                        if (v1125)
                          v1127 = v1126 >= 0x1C;
                        else
                          v1127 = 0;
                        if (v1127 && v1126 - 29 < 0xB)
                          break;
                      }
                      v1478 = (void *)1;
                      for (j = 8; j != 136; j += 16)
                        *(int64x2_t *)((char *)&v1478 + j) = v1388;
                      v1490 = v1492;
                      v1491 = 0x1000000000;
                      sub_1C5F9E250(&v1478, i);
                      if ((_DWORD)v1491)
                      {
                        v1433 = 0;
                        v1131 = 0;
                        v1130 = 0;
                        v1298 = (llvm::ValueAsMetadata *)v1490;
                        v1386 = (char *)v1490 + 8 * v1491;
                        v1397 = (llvm::Value *)(v1116 + 8);
                        v1378 = v1116 & 0xFFFFFFFFFFFFFFFBLL;
                        v1374 = (unint64_t)v721 | 4;
                        do
                        {
                          v1409 = v1298;
                          v1416 = *(_QWORD *)v1298;
                          v1299 = *(_QWORD *)(*(_QWORD *)v1298 + 40);
                          if (v1299 == *(_QWORD *)v1298 + 40)
                          {
                            v1300 = 0;
                          }
                          else
                          {
                            if (v1299)
                              v1300 = v1299 - 24;
                            else
                              v1300 = 0;
                            if (*(unsigned __int8 *)(v1300 + 16) - 29 >= 0xB)
                              v1300 = 0;
                          }
                          v1301 = (unint64_t *)(v1300 - 64);
                          if (*(_QWORD *)(v1300 - 64))
                          {
                            **(_QWORD **)(v1300 - 48) = *(_QWORD *)(v1300 - 56);
                            v1302 = *(_QWORD *)(v1300 - 56);
                            if (v1302)
                              *(_QWORD *)(v1302 + 16) = *(_QWORD *)(v1300 - 48);
                          }
                          *v1301 = v1116;
                          if (v1116)
                          {
                            v1303 = *(_QWORD *)v1397;
                            *(_QWORD *)(v1300 - 56) = *(_QWORD *)v1397;
                            if (v1303)
                              *(_QWORD *)(v1303 + 16) = v1300 - 56;
                            *(_QWORD *)(v1300 - 48) = v1397;
                            *(_QWORD *)v1397 = v1301;
                          }
                          if (v1098)
                          {
                            if (v1131 >= v1433)
                            {
                              v1305 = (v1131 - v1130) >> 4;
                              v1306 = v1305 + 1;
                              if ((unint64_t)(v1305 + 1) >> 60)
                                goto LABEL_2431;
                              if ((v1433 - v1130) >> 3 > v1306)
                                v1306 = (v1433 - v1130) >> 3;
                              if ((unint64_t)(v1433 - v1130) >= 0x7FFFFFFFFFFFFFF0)
                                v1307 = 0xFFFFFFFFFFFFFFFLL;
                              else
                                v1307 = v1306;
                              if (v1307)
                              {
                                if (v1307 >> 60)
                                  goto LABEL_2432;
                                v1308 = (char *)operator new(16 * v1307);
                              }
                              else
                              {
                                v1308 = 0;
                              }
                              v1309 = &v1308[16 * v1305];
                              *(_QWORD *)v1309 = v1416;
                              *((_QWORD *)v1309 + 1) = v1378;
                              if (v1131 == v1130)
                              {
                                v1130 = (llvm *)&v1308[16 * v1305];
                              }
                              else
                              {
                                v1310 = &v1308[16 * v1305];
                                do
                                {
                                  *((_OWORD *)v1310 - 1) = *((_OWORD *)v1131 - 1);
                                  v1310 -= 16;
                                  v1131 = (llvm *)((char *)v1131 - 16);
                                }
                                while (v1131 != v1130);
                                v1131 = v1130;
                                v1130 = (llvm *)v1310;
                              }
                              v1433 = (llvm *)&v1308[16 * v1307];
                              v1304 = (llvm *)(v1309 + 16);
                              if (v1131)
                                operator delete(v1131);
                            }
                            else
                            {
                              *(_QWORD *)v1131 = v1416;
                              *((_QWORD *)v1131 + 1) = v1378;
                              v1304 = (llvm *)((char *)v1131 + 16);
                            }
                            if (v1304 >= v1433)
                            {
                              v1311 = (v1304 - v1130) >> 4;
                              v1312 = v1311 + 1;
                              if ((unint64_t)(v1311 + 1) >> 60)
                                goto LABEL_2431;
                              if ((v1433 - v1130) >> 3 > v1312)
                                v1312 = (v1433 - v1130) >> 3;
                              if ((unint64_t)(v1433 - v1130) >= 0x7FFFFFFFFFFFFFF0)
                                v1313 = 0xFFFFFFFFFFFFFFFLL;
                              else
                                v1313 = v1312;
                              if (v1313)
                              {
                                if (v1313 >> 60)
                                  goto LABEL_2432;
                                v1314 = (char *)operator new(16 * v1313);
                              }
                              else
                              {
                                v1314 = 0;
                              }
                              v1315 = &v1314[16 * v1311];
                              v1433 = (llvm *)&v1314[16 * v1313];
                              *(_QWORD *)v1315 = v1416;
                              *((_QWORD *)v1315 + 1) = v1374;
                              v1131 = (llvm *)(v1315 + 16);
                              if (v1304 == v1130)
                                goto LABEL_2289;
                              do
                              {
                                *((_OWORD *)v1315 - 1) = *((_OWORD *)v1304 - 1);
                                v1315 -= 16;
                                v1304 = (llvm *)((char *)v1304 - 16);
                              }
                              while (v1304 != v1130);
                              if (v1130)
LABEL_2289:
                                operator delete(v1130);
                              v1130 = (llvm *)v1315;
                            }
                            else
                            {
                              *(_QWORD *)v1304 = v1416;
                              *((_QWORD *)v1304 + 1) = v1374;
                              v1131 = (llvm *)((char *)v1304 + 16);
                            }
                          }
                          v1298 = (llvm::ValueAsMetadata *)((char *)v1409 + 8);
                        }
                        while ((char *)v1409 + 8 != v1386);
                      }
                      else
                      {
                        v1130 = 0;
                        v1131 = 0;
                        v1433 = 0;
                      }
                      v1316 = *(_QWORD **)(v1116 + 48);
                      v1317 = (_QWORD *)(v1116 + 40);
                      if (v1316 != (_QWORD *)(v1116 + 40))
                      {
                        do
                        {
                          v1318 = (_QWORD *)v1316[1];
                          if (v1316)
                            v1319 = (uint64_t)(v1316 - 3);
                          else
                            v1319 = 0;
                          if (sub_1C4D99D08(v1319))
                          {
                            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1319 + 40) + 40, (uint64_t ***)v1319);
                            v1320 = *(_QWORD *)(v1319 + 24);
                            v1321 = *(_QWORD **)(v1319 + 32);
                            *v1321 = v1320;
                            *(_QWORD *)(v1320 + 8) = v1321;
                            *(_QWORD *)(v1319 + 24) = 0;
                            *(_QWORD *)(v1319 + 32) = 0;
                            llvm::Value::deleteValue((llvm::Value *)v1319);
                          }
                          v1316 = v1318;
                        }
                        while (v1318 != v1317);
                      }
                      v1322 = (_QWORD *)*((_QWORD *)v721 + 5);
                      if (v1322 == (_QWORD *)((char *)v721 + 40))
                      {
                        v1323 = 0;
                        v1324 = 0;
LABEL_2348:
                        v1329 = 0;
                      }
                      else
                      {
                        v1323 = (uint64_t)(v1322 - 3);
                        if (v1322)
                          v1325 = (llvm::Instruction *)(v1322 - 3);
                        else
                          v1325 = 0;
                        v1326 = *((unsigned __int8 *)v1325 + 16);
                        v1327 = v1326 - 29;
                        if ((v1326 - 29) >= 0xB)
                          v1324 = 0;
                        else
                          v1324 = v1325;
                        if (v1326 != 30)
                        {
                          v1328 = 0;
                          switch(v1327)
                          {
                            case 0:
                            case 5:
                            case 6:
                              goto LABEL_2311;
                            case 1:
                              goto LABEL_2433;
                            case 2:
                              v1328 = (*((_DWORD *)v1325 + 5) >> 1) & 0x3FFFFFF;
                              goto LABEL_2311;
                            case 3:
                            case 9:
                              v1328 = (*((_DWORD *)v1325 + 5) & 0x7FFFFFF) - 1;
                              goto LABEL_2311;
                            case 4:
                              v1328 = 2;
                              goto LABEL_2311;
                            case 7:
                              v1328 = *((_WORD *)v1325 + 9) & 1;
                              goto LABEL_2311;
                            case 8:
                              v1328 = 1;
                              goto LABEL_2311;
                            case 10:
                              v1328 = *((_DWORD *)v1325 + 20) + 1;
                              goto LABEL_2311;
                            default:
                              v1323 = 0;
                              goto LABEL_2348;
                          }
                        }
                        if ((*((_DWORD *)v1325 + 5) & 0x7FFFFFF) == 3)
                          v1328 = 2;
                        else
                          v1328 = 1;
LABEL_2311:
                        v1329 = v1328;
                      }
                      v1466 = (void *)1;
                      for (k = 8; k != 136; k += 16)
                        *(int64x2_t *)((char *)&v1466 + k) = v1388;
                      v1475 = v1477;
                      v1476 = 0x1000000000;
                      sub_1C63B7AB8(&v1466, v1324, 0, v1323, v1329);
                      if ((_DWORD)v1476)
                      {
                        v1349 = (llvm::BasicBlock **)v1475;
                        v1417 = (llvm::BasicBlock **)((char *)v1475 + 8 * v1476);
                        do
                        {
                          v1350 = *v1349;
                          llvm::BasicBlock::removePredecessor(*v1349, v721, 0);
                          if (v1098)
                          {
                            v1351 = (unint64_t)v1350 | 4;
                            if (v1131 >= v1433)
                            {
                              v1352 = (v1131 - v1130) >> 4;
                              v1353 = v1352 + 1;
                              if ((unint64_t)(v1352 + 1) >> 60)
                                goto LABEL_2431;
                              if ((v1433 - v1130) >> 3 > v1353)
                                v1353 = (v1433 - v1130) >> 3;
                              if ((unint64_t)(v1433 - v1130) >= 0x7FFFFFFFFFFFFFF0)
                                v1353 = 0xFFFFFFFFFFFFFFFLL;
                              v1436 = v1353;
                              if (v1353)
                              {
                                if (v1353 >> 60)
                                  goto LABEL_2432;
                                v1354 = (char *)operator new(16 * v1353);
                              }
                              else
                              {
                                v1354 = 0;
                              }
                              v1355 = &v1354[16 * v1352];
                              *(_QWORD *)v1355 = v721;
                              *((_QWORD *)v1355 + 1) = v1351;
                              if (v1131 == v1130)
                              {
                                v1130 = (llvm *)&v1354[16 * v1352];
                              }
                              else
                              {
                                v1356 = &v1354[16 * v1352];
                                do
                                {
                                  *((_OWORD *)v1356 - 1) = *((_OWORD *)v1131 - 1);
                                  v1356 -= 16;
                                  v1131 = (llvm *)((char *)v1131 - 16);
                                }
                                while (v1131 != v1130);
                                v1131 = v1130;
                                v1130 = (llvm *)v1356;
                              }
                              v1433 = (llvm *)&v1354[16 * v1436];
                              v1348 = (llvm *)(v1355 + 16);
                              if (v1131)
                                operator delete(v1131);
                            }
                            else
                            {
                              *(_QWORD *)v1131 = v721;
                              *((_QWORD *)v1131 + 1) = v1351;
                              v1348 = (llvm *)((char *)v1131 + 16);
                            }
                          }
                          else
                          {
                            v1348 = v1131;
                          }
                          ++v1349;
                          v1131 = v1348;
                        }
                        while (v1349 != v1417);
                      }
                      else
                      {
                        v1348 = v1131;
                      }
                      sub_1C4773D54((uint64_t)__p, v717, 0, 0, 0);
                      LLVMBuildUnreachable_0((uint64_t)__p);
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v717 + 40) + 40, (uint64_t ***)v717);
                      v1357 = *(_QWORD *)(v717 + 24);
                      v1358 = *(_QWORD **)(v717 + 32);
                      *v1358 = v1357;
                      *(_QWORD *)(v1357 + 8) = v1358;
                      *v1082 = 0;
                      v1082[1] = 0;
                      llvm::Value::deleteValue((llvm::Value *)v717);
                      if (v1098)
                        llvm::DomTreeUpdater::applyUpdates(v1098, (unint64_t *)v1130, (v1348 - v1130) >> 4);
                      if (__p[0] != &v1462)
                        free(__p[0]);
                      if (v1475 != v1477)
                        free(v1475);
                      if ((v1466 & 1) == 0)
                        MEMORY[0x1CAA32FB4](v1467, 8);
                      if (v1490 != v1492)
                        free(v1490);
                      if ((v1478 & 1) != 0)
                      {
                        if (v1130)
                          goto LABEL_2387;
                      }
                      else
                      {
                        MEMORY[0x1CAA32FB4](v1479.i64[0], 8);
                        if (v1130)
LABEL_2387:
                          operator delete(v1130);
                      }
                      v755 = 1;
                      v4 = v1425;
                      v3 = a1;
                      v33 = v1115;
                      goto LABEL_1876;
                    }
LABEL_1913:
                    while (1)
                    {
                      v1102 = *(_QWORD *)(v1102 + 8);
                      v33 = v1115;
                      if (!v1102)
                        break;
                      v1103 = *(_QWORD *)(v1102 + 24);
                      v1121 = *(unsigned __int8 *)(v1103 + 16);
                      if (v1103)
                        v1122 = v1121 >= 0x1C;
                      else
                        v1122 = 0;
                      if (v1122 && v1121 - 29 < 0xB)
                        goto LABEL_1896;
                    }
                  }
                }
              }
            }
LABEL_1874:
            v3 = a1;
            v755 = llvm::FoldBranchToCommonDest((llvm *)v717, *(llvm::BranchInst **)(a1 + 8), 0, *(llvm::MemorySSAUpdater **)a1, (const llvm::TargetTransformInfo *)**(unsigned int **)(a1 + 40));
            if (v755)
            {
              v755 = 1;
              *(_BYTE *)(a1 + 48) = 1;
            }
            goto LABEL_1876;
          }
        }
        else
        {
          v1082 = (_QWORD *)(v717 + 24);
        }
        v1085 = FirstNonPHIOrDbg + 24;
        goto LABEL_1848;
      case 0x1F:
        v755 = sub_1C5F91280(v3, (char *)v717, (uint64_t)&v1445);
        goto LABEL_1876;
      case 0x20:
        v1403 = v716;
        v1430 = v714;
        v729 = *(llvm::BasicBlock **)(v717 + 40);
        v1466 = &v1470;
        v1467 = &v1470;
        v1468 = 8;
        LODWORD(v1469) = 0;
        v1478 = (void *)1;
        v1479 = v1388;
        v1480 = v1388;
        v1481 = v1388;
        v1482 = v1388;
        v1483 = &v1485;
        v1484 = 0x800000000;
        v730 = *(_DWORD *)(v717 + 20) & 0x7FFFFFF;
        v731 = 0;
        v732 = v730 - 1;
        if (v730 == 1)
          goto LABEL_1189;
        v733 = 0;
        do
        {
          __p[0] = 0;
          v734 = *(_DWORD *)(v717 + 20);
          if ((v734 & 0x40000000) != 0)
            v735 = *(_QWORD *)(v717 - 8);
          else
            v735 = v717 - 32 * (v734 & 0x7FFFFFF);
          v736 = *(_WORD **)(v735 + 32 * (v733 + 1));
          __p[0] = v736;
          v737 = v736[9];
          if ((v737 & 0x7FFF) != 0)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1466, (uint64_t)v736);
            if (v738)
            {
              ++v733;
              continue;
            }
            v736 = __p[0];
            v737 = *((_WORD *)__p[0] + 9);
          }
          if ((v737 & 0x7FFF) == 0)
          {
            sub_1C50878C8((uint64_t)&v1478, (uint64_t *)__p);
            v736 = __p[0];
          }
          llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v736, v729, 0);
          llvm::IndirectBrInst::removeDestination(v717, v733);
          --v732;
          v731 = 1;
        }
        while (v733 != v732);
LABEL_1189:
        if (*(_QWORD *)(a1 + 8))
        {
          v1419 = v1418 | v1411;
          __p[1] = 0;
          __p[0] = 0;
          *(_QWORD *)&v1462 = 0;
          sub_1C501881C((uint64_t)__p, v1484);
          v739 = (char *)__p[1];
          v1412 = v731;
          if ((_DWORD)v1484)
          {
            v740 = (char *)v1483;
            v741 = (char *)v1483 + 8 * v1484;
            do
            {
              v742 = *(_QWORD *)v740 | 4;
              if ((unint64_t)v739 >= (unint64_t)v1462)
              {
                v744 = (char *)__p[0];
                v745 = (v739 - (char *)__p[0]) >> 4;
                v746 = v745 + 1;
                if ((unint64_t)(v745 + 1) >> 60)
                  goto LABEL_2431;
                v747 = v1462 - (unint64_t)__p[0];
                if ((uint64_t)(v1462 - (unint64_t)__p[0]) >> 3 > v746)
                  v746 = v747 >> 3;
                if ((unint64_t)v747 >= 0x7FFFFFFFFFFFFFF0)
                  v748 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v748 = v746;
                if (v748)
                {
                  if (v748 >> 60)
                    goto LABEL_2432;
                  v749 = (char *)operator new(16 * v748);
                }
                else
                {
                  v749 = 0;
                }
                v750 = (llvm::BasicBlock **)&v749[16 * v745];
                *v750 = v729;
                v750[1] = (llvm::BasicBlock *)v742;
                v751 = v750;
                if (v739 != v744)
                {
                  do
                  {
                    *((_OWORD *)v751 - 1) = *((_OWORD *)v739 - 1);
                    v751 -= 2;
                    v739 -= 16;
                  }
                  while (v739 != v744);
                  v739 = (char *)__p[0];
                }
                v743 = v750 + 2;
                __p[0] = v751;
                __p[1] = v750 + 2;
                *(_QWORD *)&v1462 = &v749[16 * v748];
                if (v739)
                  operator delete(v739);
                v4 = v1425;
              }
              else
              {
                *(_QWORD *)v739 = v729;
                *((_QWORD *)v739 + 1) = v742;
                v743 = v739 + 16;
              }
              __p[1] = v743;
              v740 += 8;
              v739 = (char *)v743;
            }
            while (v740 != v741);
          }
          else
          {
            v743 = __p[1];
          }
          llvm::DomTreeUpdater::applyUpdates(*(_QWORD *)(a1 + 8), (unint64_t *)__p[0], (int64_t)((uint64_t)v743 - (unint64_t)__p[0]) >> 4);
          v718 = (uint64_t *)(v717 + 24);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          v33 = v1419;
          v731 = v1412;
        }
        v969 = *(_DWORD *)(v717 + 20);
        v970 = v969 & 0x7FFFFFF;
        if ((v969 & 0x7FFFFFF) == 2)
        {
          if ((v969 & 0x40000000) != 0)
            v972 = *(_QWORD *)(v717 - 8);
          else
            v972 = v717 - 64;
          v1013 = *(_QWORD *)(v972 + 32);
          v1014 = (char *)operator new(0x60uLL);
          v1015 = v1014;
          *((_DWORD *)v1014 + 13) = *((_DWORD *)v1014 + 13) & 0x38000000 | 1;
          *((_QWORD *)v1014 + 1) = 0;
          *((_QWORD *)v1014 + 2) = 0;
          *(_QWORD *)v1014 = 0;
          *((_QWORD *)v1014 + 4) = ***(_QWORD ***)v1013 + 1576;
          v1016 = (llvm::Value *)(v1014 + 32);
          *((_QWORD *)v1014 + 3) = v1014 + 32;
          *((_QWORD *)v1014 + 5) = 0;
          v1014[48] = 30;
          v1014[49] = 0;
          *((_WORD *)v1014 + 25) = 0;
          *((_DWORD *)v1014 + 13) = 1;
          *(_OWORD *)(v1014 + 56) = 0u;
          v1017 = v1014 + 56;
          *(_OWORD *)(v1014 + 72) = 0u;
          *((_DWORD *)v1014 + 22) = 0;
          if (v1430 && v1403 >= 0xFFFFFFF5)
          {
            v1171 = *(_QWORD *)(v717 + 40);
            *((_QWORD *)v1014 + 9) = v1171;
            *(_WORD *)(v1171 + 18) &= ~0x8000u;
            if ((v1014[55] & 0x10) != 0
              && (v1231 = *(_QWORD *)(v1171 + 56)) != 0
              && (v1232 = *(llvm::ValueSymbolTable **)(v1231 + 104)) != 0)
            {
              llvm::ValueSymbolTable::reinsertValue(v1232, v1016);
              v1233 = *(_QWORD *)v1015;
              v1234 = *v718;
              *((_QWORD *)v1015 + 7) = *v718;
              *((_QWORD *)v1015 + 8) = v718;
              *(_QWORD *)(v1234 + 8) = v1017;
              *v718 = (uint64_t)v1017;
              if (v1233)
              {
                **((_QWORD **)v1015 + 2) = *((_QWORD *)v1015 + 1);
                v1235 = *((_QWORD *)v1015 + 1);
                if (v1235)
                  *(_QWORD *)(v1235 + 16) = *((_QWORD *)v1015 + 2);
              }
            }
            else
            {
              v1172 = *v718;
              *((_QWORD *)v1015 + 7) = *v718;
              *((_QWORD *)v1015 + 8) = v718;
              *(_QWORD *)(v1172 + 8) = v1017;
              *v718 = (uint64_t)v1017;
            }
          }
          *(_QWORD *)v1015 = v1013;
          v1020 = *(_QWORD *)(v1013 + 8);
          v1019 = (_QWORD *)(v1013 + 8);
          v1018 = v1020;
          *((_QWORD *)v1015 + 1) = v1020;
          if (v1020)
            *(_QWORD *)(v1018 + 16) = v1015 + 8;
          *((_QWORD *)v1015 + 2) = v1019;
          *v1019 = v1015;
          sub_1C5FA3F18(v717);
          v731 = 1;
          v3 = a1;
        }
        else
        {
          v3 = a1;
          if ((_DWORD)v970 == 1)
          {
            v971 = (llvm::UnreachableInst *)operator new(0x40uLL);
            *((_DWORD *)v971 + 5) &= 0x38000000u;
            llvm::UnreachableInst::UnreachableInst(v971, **(llvm::LLVMContext ***)v717, (llvm::Instruction *)v717);
            sub_1C5FA3F18(v717);
            v731 = 1;
          }
          else
          {
            if ((v969 & 0x40000000) != 0)
              v973 = *(uint64_t **)(v717 - 8);
            else
              v973 = (uint64_t *)(v717 - 32 * v970);
            v1021 = *v973;
            if (v1021 && *(_BYTE *)(v1021 + 16) == 85)
            {
              v1022 = *(_QWORD *)(v1021 - 64);
              if (*(_BYTE *)(v1022 + 16) != 4)
                v1022 = 0;
              v1023 = *(_QWORD *)(v1021 - 32);
              if (*(_BYTE *)(v1023 + 16) != 4)
                v1023 = 0;
              if (v1022)
                v1024 = v1023 == 0;
              else
                v1024 = 1;
              if (!v1024)
              {
                sub_1C5FA5C68(a1, v717, *(llvm::Value **)(v1021 - 96), *(_QWORD ****)(v1022 - 32), *(_QWORD ****)(v1023 - 32), 0, 0);
                v731 = 1;
                *(_BYTE *)(a1 + 48) = 1;
              }
            }
          }
        }
        if (v1483 != &v1485)
          free(v1483);
        if ((v1478 & 1) == 0)
          MEMORY[0x1CAA32FB4](v1479.i64[0], 8);
        if (v1467 != v1466)
          free(v1467);
        v33 |= v731;
LABEL_1877:
        if (v1445 != v1447)
          free(v1445);
LABEL_1879:
        if (v1439 < 0)
          operator delete(v1438);
        v2 = this;
LABEL_57:
        v34 = *(unsigned __int8 *)(v3 + 48);
LABEL_58:
        v4 |= v33;
        if (v34)
          continue;
        return;
      case 0x22:
        v756 = *(_QWORD *)(v717 + 40);
        v757 = (_QWORD *)(v756 + 40);
        v758 = *(_QWORD **)(v756 + 48);
        v759 = v758;
        if (v758 == (_QWORD *)(v756 + 40))
          goto LABEL_1221;
        do
        {
          v760 = v759 - 3;
          if (v759)
            v761 = v759 - 3;
          else
            v761 = 0;
          if (*((_BYTE *)v761 + 16) != 83)
            goto LABEL_1222;
          v759 = (_QWORD *)v759[1];
        }
        while (v759 != v757);
LABEL_1221:
        v760 = 0;
LABEL_1222:
        v762 = *(_QWORD *)(v717 - 32);
        if (*(_BYTE *)(v762 + 16) == 83)
        {
          v763 = (_QWORD *)*v757;
          if ((_QWORD *)*v757 == v757)
          {
            v764 = 0;
          }
          else
          {
            if (v763)
              v764 = v763 - 3;
            else
              v764 = 0;
            if (*((unsigned __int8 *)v764 + 16) - 29 >= 0xB)
              v764 = 0;
          }
          if (v760)
            v974 = (uint64_t)(v760 + 3);
          else
            v974 = 0;
          if (v764)
            v975 = (uint64_t)(v764 + 3);
          else
            v975 = 0;
          if (sub_1C5FA5BEC(v974, v975))
          {
            v1422 = v1418 | v1411;
            v1478 = (void *)1;
            v1479 = v1388;
            v1480 = v1388;
            v1481.i64[0] = (uint64_t)&v1482;
            v1481.i64[1] = 0x400000000;
            v976 = *(_QWORD *)(v717 - 32);
            v977 = *(_DWORD *)(v976 + 20);
            v978 = v977 & 0x7FFFFFF;
            if ((v977 & 0x7FFFFFF) == 0)
            {
              v754 = 0;
              v3 = a1;
              v33 = v1422;
              goto LABEL_1891;
            }
            v979 = 0;
            while (1)
            {
              v1466 = 0;
              v980 = *(_DWORD *)(v976 + 20);
              if ((v980 & 0x40000000) != 0)
              {
                v982 = *(void **)(*(_QWORD *)(v976 - 8) + 32 * *(unsigned int *)(v976 + 60) + 8 * v979);
                v1466 = v982;
                v981 = *(_QWORD *)(v976 - 8);
              }
              else
              {
                v981 = v976 - 32 * (v980 & 0x7FFFFFF);
                v982 = *(void **)(v981 + 32 * *(unsigned int *)(v976 + 60) + 8 * v979);
                v1466 = v982;
              }
              v983 = *(_QWORD *)(v981 + 32 * v979);
              if (llvm::BasicBlock::getUniqueSuccessor((llvm::BasicBlock *)v982) != v756)
                goto LABEL_1678;
              v985 = v1466;
              for (m = *((_QWORD *)v1466 + 6); ; m = *(_QWORD *)(m + 8))
              {
                v987 = m ? m - 24 : 0;
                if (*(_BYTE *)(v987 + 16) != 83)
                  break;
              }
              v988 = *(_BYTE *)(m - 8) == 94 ? m - 24 : 0;
              if (v983 != v988)
                goto LABEL_1678;
              v989 = (char *)v1466 + 40;
              v990 = *(_QWORD *)(v983 + 32);
              v991 = v990 == *(_QWORD *)(v983 + 40) + 40 || v990 == 0;
              v992 = v991;
              v993 = v991 ? 0 : v990 - 24;
              v994 = (_QWORD *)*v989;
              if ((_QWORD *)*v989 == v989)
              {
                v995 = 0;
              }
              else
              {
                if (v994)
                  v995 = v994 - 3;
                else
                  v995 = 0;
                if (*((unsigned __int8 *)v995 + 16) - 29 >= 0xB)
                  v995 = 0;
              }
              v996 = v993 + 24;
              v997 = v995 ? (uint64_t)(v995 + 3) : 0;
              v998 = v992 ? 0 : v996;
              if (!sub_1C5FA5BEC(v998, v997))
                goto LABEL_1678;
              if ((v1478 & 1) != 0)
              {
                v999 = 4;
                v1000 = &v1479;
              }
              else
              {
                v999 = v1479.i32[2];
                if (!v1479.i32[2])
                {
                  v1009 = 0;
LABEL_1675:
                  v1010 = sub_1C5648ADC((uint64_t)&v1478, (uint64_t)&v1466, &v1466, v1009);
                  *v1010 = v1466;
                  v1011 = v1466;
                  v1012 = v1481.u32[2];
                  if (v1481.u32[2] >= (unint64_t)v1481.u32[3])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1481, (uint64_t)&v1482, v1481.u32[2] + 1, 8);
                    v1012 = v1481.u32[2];
                  }
                  *(_QWORD *)(v1481.i64[0] + 8 * v1012) = v1011;
                  ++v1481.i32[2];
                  goto LABEL_1678;
                }
                v1000 = (int64x2_t *)v1479.i64[0];
              }
              v1001 = v999 - 1;
              v1002 = v1001 & ((v985 >> 4) ^ (v985 >> 9));
              v1003 = &v1000->i64[v1002];
              v1004 = (void *)*v1003;
              if (v985 != (void *)*v1003)
              {
                v1005 = 0;
                v1006 = 1;
                while (v1004 != (void *)-4096)
                {
                  if (v1005)
                    v1007 = 0;
                  else
                    v1007 = v1004 == (void *)-8192;
                  if (v1007)
                    v1005 = v1003;
                  v1008 = v1002 + v1006++;
                  v1002 = v1008 & v1001;
                  v1003 = &v1000->i64[v1002];
                  v1004 = (void *)*v1003;
                  if (v985 == (void *)*v1003)
                    goto LABEL_1678;
                }
                if (v1005)
                  v1009 = v1005;
                else
                  v1009 = v1003;
                goto LABEL_1675;
              }
LABEL_1678:
              if (++v979 == v978)
              {
                v1025 = (int64x2_t *)v1481.i64[0];
                if (v1481.i32[2])
                {
                  v1026 = v1481.i64[0] + 8 * v1481.u32[2];
                  do
                  {
                    for (n = v1025->i64[0];
                          ;
                          llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v756, (llvm::BasicBlock *)n, 1))
                    {
                      v1028 = *(_DWORD *)(v976 + 20);
                      v1029 = v1028 & 0x7FFFFFF;
                      if ((v1028 & 0x7FFFFFF) == 0)
                        break;
                      v1030 = 0;
                      while (1)
                      {
                        v1031 = v976 - 32 * v1029;
                        if ((v1028 & 0x40000000) != 0)
                          v1031 = *(_QWORD *)(v976 - 8);
                        if (*(_QWORD *)(v1031 + 32 * *(unsigned int *)(v976 + 60) + 8 * v1030) == n)
                          break;
                        if (v1029 == ++v1030)
                          goto LABEL_1720;
                      }
                      if (v1030 == -1)
                        break;
                    }
LABEL_1720:
                    v1032 = *(_QWORD *)(n + 8);
                    if (v1032)
                    {
                      while (1)
                      {
                        v1033 = *(_QWORD *)(v1032 + 24);
                        v1034 = *(unsigned __int8 *)(v1033 + 16);
                        v1035 = v1033 && v1034 >= 0x1C;
                        if (v1035 && v1034 - 29 <= 0xA)
                          break;
                        v1032 = *(_QWORD *)(v1032 + 8);
                        if (!v1032)
                          goto LABEL_1741;
                      }
                      v1037 = v1032;
                      while (1)
                      {
                        v1037 = *(_QWORD *)(v1037 + 8);
                        if (!v1037)
                          break;
                        v1038 = *(_QWORD *)(v1037 + 24);
                        v1039 = *(unsigned __int8 *)(v1038 + 16);
                        if (v1038)
                          v1040 = v1039 >= 0x1C;
                        else
                          v1040 = 0;
                        if (v1040 && v1039 - 29 <= 0xA)
                        {
                          llvm::removeUnwindEdge(*(llvm **)(*(_QWORD *)(v1032 + 24) + 40), *(llvm::BasicBlock **)(a1 + 8), v984);
                          v1032 = v1037;
                        }
                      }
                      llvm::removeUnwindEdge(*(llvm **)(*(_QWORD *)(v1032 + 24) + 40), *(llvm::BasicBlock **)(a1 + 8), v984);
                    }
LABEL_1741:
                    v1043 = (uint64_t *)(n + 40);
                    v1042 = *(_QWORD *)(n + 40);
                    if (v1042 == n + 40)
                    {
                      v1045 = 0;
                    }
                    else
                    {
                      if (v1042)
                        v1044 = v1042 - 24;
                      else
                        v1044 = 0;
                      if (*(unsigned __int8 *)(v1044 + 16) - 29 >= 0xB)
                        v1045 = 0;
                      else
                        v1045 = v1044;
                    }
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1045 + 40) + 40, (uint64_t ***)v1045);
                    v1046 = *(_QWORD *)(v1045 + 24);
                    v1047 = *(_QWORD **)(v1045 + 32);
                    *v1047 = v1046;
                    *(_QWORD *)(v1046 + 8) = v1047;
                    *(_QWORD *)(v1045 + 24) = 0;
                    *(_QWORD *)(v1045 + 32) = 0;
                    llvm::Value::deleteValue((llvm::Value *)v1045);
                    v1048 = (char *)operator new(0x40uLL);
                    *((_DWORD *)v1048 + 5) &= 0x38000000u;
                    *(_QWORD *)v1048 = ***(_QWORD ***)v717 + 1576;
                    *((_QWORD *)v1048 + 1) = 0;
                    v1048[16] = 35;
                    *(_OWORD *)(v1048 + 44) = 0u;
                    *(_OWORD *)(v1048 + 33) = 0u;
                    *(_OWORD *)(v1048 + 17) = 0u;
                    *((_QWORD *)v1048 + 5) = n;
                    *(_WORD *)(n + 18) &= ~0x8000u;
                    if ((v1048[23] & 0x10) != 0)
                    {
                      v1051 = *(_QWORD *)(n + 56);
                      if (v1051)
                      {
                        v1052 = *(llvm::ValueSymbolTable **)(v1051 + 104);
                        if (v1052)
                          llvm::ValueSymbolTable::reinsertValue(v1052, (llvm::Value *)v1048);
                      }
                    }
                    v1049 = *v1043;
                    *((_QWORD *)v1048 + 3) = *v1043;
                    *((_QWORD *)v1048 + 4) = v1043;
                    *(_QWORD *)(v1049 + 8) = v1048 + 24;
                    *v1043 = (uint64_t)(v1048 + 24);
                    v1050 = *(_QWORD *)(a1 + 8);
                    if (v1050)
                    {
                      v1466 = (void *)n;
                      v1467 = (void *)(v756 | 4);
                      llvm::DomTreeUpdater::applyUpdates(v1050, (unint64_t *)&v1466, 1);
                    }
                    v1025 = (int64x2_t *)((char *)v1025 + 8);
                  }
                  while (v1025 != (int64x2_t *)v1026);
                  v1076 = *(_QWORD *)(v756 + 8);
                  v4 = v1425;
                  v33 = v1422;
                  if (v1076)
                  {
                    while (1)
                    {
                      v1077 = *(_QWORD *)(v1076 + 24);
                      v1078 = *(unsigned __int8 *)(v1077 + 16);
                      v1079 = v1077 && v1078 >= 0x1C;
                      if (v1079 && v1078 - 29 < 0xB)
                        break;
                      v1076 = *(_QWORD *)(v1076 + 8);
                      if (!v1076)
                        goto LABEL_1826;
                    }
                  }
                  else
                  {
LABEL_1826:
                    llvm::DeleteDeadBlock((llvm *)v756, *(llvm::BasicBlock **)(a1 + 8), 0);
                  }
                  v754 = v1481.i32[2] != 0;
                  v1025 = (int64x2_t *)v1481.i64[0];
                }
                else
                {
                  v754 = 0;
                  v33 = v1422;
                }
                v3 = a1;
                if (v1025 != &v1482)
                  free(v1025);
LABEL_1891:
                if ((v1478 & 1) == 0)
                  MEMORY[0x1CAA32FB4](v1479.i64[0], 8);
LABEL_1815:
                v33 |= v754;
                goto LABEL_1877;
              }
            }
          }
        }
        else if (*((_BYTE *)v760 + 16) == 94)
        {
          v790 = *(_QWORD **)(v756 + 48);
          if (v758 != v757)
          {
            do
            {
              v791 = v790 - 3;
              if (v790)
                v792 = v790 - 3;
              else
                v792 = 0;
              if (*((_BYTE *)v792 + 16) != 83)
                goto LABEL_1278;
              v790 = (_QWORD *)v790[1];
            }
            while (v790 != v757);
            v791 = 0;
LABEL_1278:
            if ((_QWORD *)v762 == v791)
            {
              while (1)
              {
                v1061 = v758 - 3;
                if (!v758)
                  v1061 = 0;
                if (*((_BYTE *)v1061 + 16) != 83)
                  break;
                v758 = (_QWORD *)v758[1];
              }
              v1063 = v758 + 1;
              v1062 = v758[1];
              v1064 = v1062 == v1063[1] + 40 || v1062 == 0;
              v1065 = v1064 ? 0 : v1062 - 24;
              v1066 = v1065 + 24;
              v1067 = v1064 ? 0 : v1066;
              v1068 = v716 < 0xFFFFFFF5 || v714 == 0;
              v1069 = v1068 ? 0 : v717 + 24;
              if (sub_1C5FA5BEC(v1067, v1069))
              {
                v1071 = *(_QWORD *)(v756 + 8);
                if (v1071)
                {
                  while (1)
                  {
                    v1072 = *(_QWORD *)(v1071 + 24);
                    v1073 = *(unsigned __int8 *)(v1072 + 16);
                    v1074 = v1072 && v1073 >= 0x1C;
                    if (v1074 && v1073 - 29 <= 0xA)
                      break;
                    v1071 = *(_QWORD *)(v1071 + 8);
                    if (!v1071)
                      goto LABEL_1948;
                  }
                  v1132 = v1071;
                  while (1)
                  {
                    v1132 = *(_QWORD *)(v1132 + 8);
                    if (!v1132)
                      break;
                    v1133 = *(_QWORD *)(v1132 + 24);
                    v1134 = *(unsigned __int8 *)(v1133 + 16);
                    if (v1133)
                      v1135 = v1134 >= 0x1C;
                    else
                      v1135 = 0;
                    if (v1135 && v1134 - 29 <= 0xA)
                    {
                      llvm::removeUnwindEdge(*(llvm **)(*(_QWORD *)(v1071 + 24) + 40), *(llvm::BasicBlock **)(a1 + 8), v1070);
                      v1071 = v1132;
                    }
                  }
                  llvm::removeUnwindEdge(*(llvm **)(*(_QWORD *)(v1071 + 24) + 40), *(llvm::BasicBlock **)(a1 + 8), v1070);
                }
LABEL_1948:
                v3 = a1;
                llvm::DeleteDeadBlock((llvm *)v756, *(llvm::BasicBlock **)(a1 + 8), 0);
                v754 = 1;
                goto LABEL_1815;
              }
            }
          }
        }
        goto LABEL_1813;
      case 0x23:
        v765 = *(llvm::BasicBlock **)(v717 + 40);
        if (v718 != *((uint64_t **)v765 + 6))
        {
          v766 = 0;
          while (1)
          {
            v767 = *v718 ? *v718 - 24 : 0;
            v768 = *(unsigned __int8 *)(v767 + 16);
            if (v768 == 29 || v768 == 35)
              break;
            if (v768 == 80)
            {
              PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(_QWORD *)(v767 + 40)
                                                                                                 + 56));
              if (llvm::classifyEHPersonality(PersonalityFn, v774) != 10)
                break;
            }
            else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v767) & 1) != 0
                   || (llvm::Instruction::willReturn((llvm::Instruction *)v767) & 1) == 0)
            {
              break;
            }
            v770 = (llvm::Value *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v767, v769);
            v766 = 1;
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v767, v770, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v767 + 40) + 40, (uint64_t ***)v767);
            v771 = *(_QWORD *)(v767 + 24);
            v772 = *(_QWORD **)(v767 + 32);
            *v772 = v771;
            *(_QWORD *)(v771 + 8) = v772;
            *(_QWORD *)(v767 + 24) = 0;
            *(_QWORD *)(v767 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v767);
            if (v718 == *((uint64_t **)v765 + 6))
              goto LABEL_1244;
          }
          v718 = (uint64_t *)*((_QWORD *)v765 + 6);
LABEL_1244:
          v3 = a1;
          v720 = v1388;
          goto LABEL_1281;
        }
        v766 = 0;
LABEL_1281:
        v793 = v718 - 3;
        if (!v718)
          v793 = 0;
        if (v793 != (uint64_t *)v717)
          goto LABEL_1781;
        for (ii = *((_QWORD *)v765 + 1); ii; ii = *(_QWORD *)(ii + 8))
        {
          v795 = *(_QWORD *)(ii + 24);
          v796 = *(unsigned __int8 *)(v795 + 16);
          if (v795)
            v797 = v796 >= 0x1C;
          else
            v797 = 0;
          if (v797 && v796 - 29 < 0xB)
            break;
        }
        v1421 = v1418 | v1411;
        v1478 = (void *)1;
        v1479 = v720;
        v1480 = v720;
        v1481 = v720;
        v1482 = v720;
        v1483 = &v1485;
        v1484 = 0x800000000;
        sub_1C5B4C744(&v1478, ii, 0);
        v799 = v1484;
        if ((_DWORD)v1484)
        {
          v800 = 0;
          v801 = 0;
          v802 = 0;
          v803 = 0;
          v1432 = (llvm *)((unint64_t)v765 | 4);
          v1413 = v1484;
          while (1)
          {
            v804 = (llvm::ValueAsMetadata *)*((_QWORD *)v1483 + v800);
            v805 = (_QWORD *)*((_QWORD *)v804 + 5);
            if (v805 == (_QWORD *)((char *)v804 + 40))
            {
              v807 = 0;
            }
            else
            {
              if (v805)
                v806 = (uint64_t)(v805 - 3);
              else
                v806 = 0;
              if (*(unsigned __int8 *)(v806 + 16) - 29 >= 0xB)
                v807 = 0;
              else
                v807 = v806;
            }
            sub_1C4773D54((uint64_t)&v1466, v807, 0, 0, 0);
            v810 = *(unsigned __int8 *)(v807 + 16);
            if (v807 && v810 == 30)
            {
              v811 = *(_DWORD *)(v807 + 20);
              if ((v811 & 0x40000000) != 0)
              {
                v813 = *(_QWORD *)(v807 - 8);
                v812 = v811 & 0x7FFFFFF;
              }
              else
              {
                v812 = v811 & 0x7FFFFFF;
                v813 = v807 - 32 * v812;
              }
              v826 = (_DWORD)v812 == 3;
              if (v812 == v826)
              {
LABEL_1336:
                v829 = v804;
                v830 = (llvm::UnreachableInst *)operator new(0x40uLL);
                *((_DWORD *)v830 + 5) &= 0x38000000u;
                llvm::UnreachableInst::UnreachableInst(v830, **(llvm::LLVMContext ***)v807, (llvm::Instruction *)v807);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v807 + 40) + 40, (uint64_t ***)v807);
                v831 = *(_QWORD *)(v807 + 24);
                v832 = *(_QWORD **)(v807 + 32);
                *v832 = v831;
                *(_QWORD *)(v831 + 8) = v832;
                *(_QWORD *)(v807 + 24) = 0;
                *(_QWORD *)(v807 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v807);
                goto LABEL_1337;
              }
              v827 = (llvm::BasicBlock **)(v813 + 32 * v826);
              v828 = 32 * v812 - 32 * v826;
              while (*v827 == v765)
              {
                v827 += 4;
                v828 -= 32;
                if (!v828)
                  goto LABEL_1336;
              }
              v829 = v804;
              v1406 = v801;
              v866 = *(_QWORD *)(v807 - 96);
              if (*(llvm::BasicBlock **)(v807 - 32) == v765)
              {
                LOWORD(v1463) = 257;
                v867 = sub_1C506EAA0((uint64_t)&v1466, v866, (uint64_t)__p);
                llvm::IRBuilderBase::CreateAssumption((uint64_t *)&v1466, v867, 0, 0);
                v868 = *(_QWORD *)(v807 - 64);
                v869 = (char *)operator new(0x60uLL);
                v870 = v869;
                *((_DWORD *)v869 + 13) = *((_DWORD *)v869 + 13) & 0x38000000 | 1;
                *(_QWORD *)v869 = 0;
                *((_QWORD *)v869 + 2) = 0;
                *((_QWORD *)v869 + 1) = 0;
                *((_QWORD *)v869 + 4) = ***(_QWORD ***)v868 + 1576;
                v1394 = (llvm::Value *)(v869 + 32);
                *((_QWORD *)v869 + 3) = v869 + 32;
                *((_QWORD *)v869 + 5) = 0;
                v869[48] = 30;
                v869[49] = 0;
                *((_WORD *)v869 + 25) = 0;
                *((_DWORD *)v869 + 13) = 1;
                *(_OWORD *)(v869 + 56) = 0u;
                *(_OWORD *)(v869 + 72) = 0u;
                *((_DWORD *)v869 + 22) = 0;
                *(_QWORD *)v869 = v868;
                v873 = *(_QWORD *)(v868 + 8);
                v872 = (_QWORD *)(v868 + 8);
                v871 = v873;
                *((_QWORD *)v869 + 1) = v873;
                if (v873)
                  *(_QWORD *)(v871 + 16) = v869 + 8;
                *((_QWORD *)v869 + 2) = v872;
                *v872 = v869;
                LOWORD(v1463) = 257;
                (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v1474 + 16))(v1474, v1394, __p, v1472, v1473);
                if ((_DWORD)v1467)
                {
                  v874 = (char *)v1466;
                  v875 = (char *)v1466 + 16 * v1467;
                  v876 = (unsigned __int8 **)(v870 + 80);
                  do
                  {
                    v877 = *(_DWORD *)v874;
                    v878 = (unsigned __int8 *)*((_QWORD *)v874 + 1);
                    if (v878)
                    {
                      if (!v877)
                      {
                        v1496 = (_QWORD *)*((_QWORD *)v874 + 1);
                        llvm::MetadataTracking::track((uint64_t)&v1496, v878, 2);
                        v879 = *v876;
                        goto LABEL_1435;
                      }
                    }
                    else
                    {
                      v879 = *v876;
                      if (!*v876 && (v870[55] & 0x20) == 0)
                        goto LABEL_1432;
                      if (!v877)
                      {
                        v1496 = 0;
LABEL_1435:
                        if (v879)
                          llvm::MetadataTracking::untrack((uint64_t)(v870 + 80), v879);
                        v880 = (unsigned __int8 *)v1496;
                        *v876 = (unsigned __int8 *)v1496;
                        if (v880)
                          llvm::MetadataTracking::retrack((uint64_t)&v1496, v880, (uint64_t)(v870 + 80));
                        goto LABEL_1432;
                      }
                    }
                    llvm::Value::setMetadata(v1394, *(_DWORD *)v874, (llvm::MDNode *)v878);
LABEL_1432:
                    v874 += 16;
                  }
                  while (v874 != v875);
                }
LABEL_1477:
                sub_1C5FA3F18(v807);
                v4 = v1425;
                v799 = v1413;
                v801 = v1406;
LABEL_1337:
                v3 = a1;
                if (*(_QWORD *)(a1 + 8))
                {
                  if (v802 >= (unint64_t *)v801)
                  {
                    v833 = ((char *)v802 - (char *)v803) >> 4;
                    v834 = v833 + 1;
                    if ((unint64_t)(v833 + 1) >> 60)
                      goto LABEL_2431;
                    if ((v801 - (llvm::ValueAsMetadata *)v803) >> 3 > v834)
                      v834 = (v801 - (llvm::ValueAsMetadata *)v803) >> 3;
                    if ((unint64_t)(v801 - (llvm::ValueAsMetadata *)v803) >= 0x7FFFFFFFFFFFFFF0)
                      v835 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v835 = v834;
                    if (v835)
                    {
                      if (v835 >> 60)
                        goto LABEL_2432;
                      v836 = (char *)operator new(16 * v835);
                    }
                    else
                    {
                      v836 = 0;
                    }
                    v842 = &v836[16 * v833];
                    *(_QWORD *)v842 = v829;
                    *((_QWORD *)v842 + 1) = v1432;
                    if (v802 == v803)
                    {
                      v844 = v802;
                      v803 = (unint64_t *)&v836[16 * v833];
                      v3 = a1;
                    }
                    else
                    {
                      v843 = (unint64_t *)&v836[16 * v833];
                      v3 = a1;
                      do
                      {
                        *((_OWORD *)v843 - 1) = *((_OWORD *)v802 - 1);
                        v843 -= 2;
                        v802 -= 2;
                      }
                      while (v802 != v803);
                      v844 = v803;
                      v803 = v843;
                    }
                    v801 = (llvm::ValueAsMetadata *)&v836[16 * v835];
                    v802 = (unint64_t *)(v842 + 16);
                    if (v844)
                      operator delete(v844);
                  }
                  else
                  {
                    *v802 = (unint64_t)v829;
                    v802[1] = (unint64_t)v1432;
                    v802 += 2;
                  }
                }
                v766 = 1;
                goto LABEL_1405;
              }
              llvm::IRBuilderBase::CreateAssumption((uint64_t *)&v1466, v866, 0, 0);
              v889 = *(_QWORD *)(v807 - 32);
              v890 = (char *)operator new(0x60uLL);
              v891 = v890;
              *((_DWORD *)v890 + 13) = *((_DWORD *)v890 + 13) & 0x38000000 | 1;
              *(_QWORD *)v890 = 0;
              *((_QWORD *)v890 + 2) = 0;
              *((_QWORD *)v890 + 1) = 0;
              *((_QWORD *)v890 + 4) = ***(_QWORD ***)v889 + 1576;
              v1395 = (llvm::Value *)(v890 + 32);
              *((_QWORD *)v890 + 3) = v890 + 32;
              *((_QWORD *)v890 + 5) = 0;
              v890[48] = 30;
              v890[49] = 0;
              *((_WORD *)v890 + 25) = 0;
              *((_DWORD *)v890 + 13) = 1;
              *(_OWORD *)(v890 + 56) = 0u;
              *(_OWORD *)(v890 + 72) = 0u;
              *((_DWORD *)v890 + 22) = 0;
              *(_QWORD *)v890 = v889;
              v894 = *(_QWORD *)(v889 + 8);
              v893 = (_QWORD *)(v889 + 8);
              v892 = v894;
              *((_QWORD *)v890 + 1) = v894;
              if (v894)
                *(_QWORD *)(v892 + 16) = v890 + 8;
              *((_QWORD *)v890 + 2) = v893;
              *v893 = v890;
              LOWORD(v1463) = 257;
              (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v1474 + 16))(v1474, v1395, __p, v1472, v1473);
              if (!(_DWORD)v1467)
                goto LABEL_1477;
              v895 = (char *)v1466;
              v896 = (char *)v1466 + 16 * v1467;
              v897 = (unsigned __int8 **)(v891 + 80);
              while (2)
              {
                v898 = *(_DWORD *)v895;
                v899 = (unsigned __int8 *)*((_QWORD *)v895 + 1);
                if (v899)
                {
                  if (v898)
                    goto LABEL_1469;
                  v1496 = (_QWORD *)*((_QWORD *)v895 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v1496, v899, 2);
                  v900 = *v897;
LABEL_1473:
                  if (v900)
                    llvm::MetadataTracking::untrack((uint64_t)(v891 + 80), v900);
                  v901 = (unsigned __int8 *)v1496;
                  *v897 = (unsigned __int8 *)v1496;
                  if (v901)
                    llvm::MetadataTracking::retrack((uint64_t)&v1496, v901, (uint64_t)(v891 + 80));
                }
                else
                {
                  v900 = *v897;
                  if (*v897 || (v891[55] & 0x20) != 0)
                  {
                    if (!v898)
                    {
                      v1496 = 0;
                      goto LABEL_1473;
                    }
LABEL_1469:
                    llvm::Value::setMetadata(v1395, *(_DWORD *)v895, (llvm::MDNode *)v899);
                  }
                }
                v895 += 16;
                if (v895 == v896)
                  goto LABEL_1477;
                continue;
              }
            }
            if (v807 && v810 == 31)
            {
              __p[0] = (void *)v807;
              LOBYTE(__p[1]) = 0;
              v1464 = 0;
              v1465 = 0;
              llvm::SwitchInstProfUpdateWrapper::init((llvm::SwitchInstProfUpdateWrapper **)__p, v808);
              v814 = (llvm::BasicBlock **)__p[0];
              v815 = ((*((_DWORD *)__p[0] + 5) >> 1) & 0x3FFFFFFu) - 1;
              if (((*((_DWORD *)__p[0] + 5) >> 1) & 0x3FFFFFF) != 1)
              {
                v816 = 0;
                v817 = __p[0];
                do
                {
                  v818 = v817[5];
                  v819 = 2 * v816 + 3;
                  while (1)
                  {
                    v820 = (char *)&v817[-8 * (v818 & 0x7FFFFFF)];
                    if ((v818 & 0x40000000) != 0)
                      v820 = (char *)*((_QWORD *)v817 - 1);
                    v821 = v819;
                    if ((_DWORD)v816 == -2)
                      v821 = 1;
                    if (*(llvm::BasicBlock **)&v820[32 * v821] == v765)
                      break;
                    ++v816;
                    v819 += 2;
                    if (v815 == v816)
                      goto LABEL_1328;
                  }
                  llvm::BasicBlock::removePredecessor(v765, v814[5], 0);
                  if (v1464)
                  {
                    v1465 = 1;
                    *((_DWORD *)__p[1] + (v816 + 1)) = *((_DWORD *)__p[1] + v1462 - 1);
                    LODWORD(v1462) = v1462 - 1;
                  }
                  v817 = (_DWORD *)llvm::SwitchInst::removeCase((uint64_t)__p[0], (uint64_t)v817, v816);
                  v816 = v822;
                  v814 = (llvm::BasicBlock **)__p[0];
                  v815 = ((*((_DWORD *)__p[0] + 5) >> 1) & 0x3FFFFFFu) - 1;
                  v766 = 1;
                }
                while (v822 != v815);
              }
LABEL_1328:
              if (*(_QWORD *)(a1 + 8))
              {
                v823 = *(_DWORD *)(v807 + 20);
                v4 = v1425;
                v799 = v1413;
                v824 = v804;
                if ((v823 & 0x40000000) != 0)
                  v825 = *(_QWORD *)(v807 - 8);
                else
                  v825 = v807 - 32 * (v823 & 0x7FFFFFF);
                v3 = a1;
                if (*(llvm::BasicBlock **)(v825 + 32) == v765)
                {
                  v839 = v801;
                  v840 = v802;
                }
                else if (v802 >= (unint64_t *)v801)
                {
                  v845 = ((char *)v802 - (char *)v803) >> 4;
                  v846 = v845 + 1;
                  if ((unint64_t)(v845 + 1) >> 60)
                    goto LABEL_2431;
                  if ((v801 - (llvm::ValueAsMetadata *)v803) >> 3 > v846)
                    v846 = (v801 - (llvm::ValueAsMetadata *)v803) >> 3;
                  if ((unint64_t)(v801 - (llvm::ValueAsMetadata *)v803) >= 0x7FFFFFFFFFFFFFF0)
                    v847 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v847 = v846;
                  v848 = v824;
                  if (v847)
                  {
                    if (v847 >> 60)
                      goto LABEL_2432;
                    v849 = (char *)operator new(16 * v847);
                  }
                  else
                  {
                    v849 = 0;
                  }
                  v852 = &v849[16 * v845];
                  *(_QWORD *)v852 = v848;
                  *((_QWORD *)v852 + 1) = v1432;
                  if (v802 == v803)
                  {
                    v803 = (unint64_t *)&v849[16 * v845];
                    v3 = a1;
                  }
                  else
                  {
                    v853 = (unint64_t *)&v849[16 * v845];
                    v3 = a1;
                    do
                    {
                      *((_OWORD *)v853 - 1) = *((_OWORD *)v802 - 1);
                      v853 -= 2;
                      v802 -= 2;
                    }
                    while (v802 != v803);
                    v802 = v803;
                    v803 = v853;
                  }
                  v839 = (llvm::ValueAsMetadata *)&v849[16 * v847];
                  v840 = (unint64_t *)(v852 + 16);
                  if (v802)
                    operator delete(v802);
                }
                else
                {
                  v839 = v801;
                  *v802 = (unint64_t)v824;
                  v802[1] = (unint64_t)v1432;
                  v840 = v802 + 2;
                }
              }
              else
              {
                v839 = v801;
                v840 = v802;
                v4 = v1425;
                v3 = a1;
                v799 = v1413;
              }
              sub_1C5AE380C((uint64_t)__p);
              v802 = v840;
              v801 = v839;
              goto LABEL_1405;
            }
            if (!v807 || v810 != 33)
              break;
            if (*(llvm::BasicBlock **)(v807 - 64) == v765)
              goto LABEL_1400;
LABEL_1404:
            v3 = a1;
LABEL_1405:
            if (v1466 != &v1468)
              free(v1466);
            if (++v800 == v799)
              goto LABEL_1758;
          }
          if (!v807 || v810 != 38)
          {
            if (v807 && v810 == 36)
            {
              if (*(_QWORD *)(a1 + 8))
              {
                if (v802 >= (unint64_t *)v801)
                {
                  v885 = ((char *)v802 - (char *)v803) >> 4;
                  v886 = v885 + 1;
                  if ((unint64_t)(v885 + 1) >> 60)
                    goto LABEL_2431;
                  if ((v801 - (llvm::ValueAsMetadata *)v803) >> 3 > v886)
                    v886 = (v801 - (llvm::ValueAsMetadata *)v803) >> 3;
                  if ((unint64_t)(v801 - (llvm::ValueAsMetadata *)v803) >= 0x7FFFFFFFFFFFFFF0)
                    v887 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v887 = v886;
                  if (v887)
                  {
                    if (v887 >> 60)
                      goto LABEL_2432;
                    v888 = (char *)operator new(16 * v887);
                  }
                  else
                  {
                    v888 = 0;
                  }
                  v923 = &v888[16 * v885];
                  *(_QWORD *)v923 = v804;
                  *((_QWORD *)v923 + 1) = v1432;
                  if (v802 == v803)
                  {
                    v803 = (unint64_t *)&v888[16 * v885];
                  }
                  else
                  {
                    v924 = (unint64_t *)&v888[16 * v885];
                    do
                    {
                      *((_OWORD *)v924 - 1) = *((_OWORD *)v802 - 1);
                      v924 -= 2;
                      v802 -= 2;
                    }
                    while (v802 != v803);
                    v802 = v803;
                    v803 = v924;
                  }
                  v1404 = (llvm::ValueAsMetadata *)&v888[16 * v887];
                  v841 = (unint64_t *)(v923 + 16);
                  if (v802)
                    operator delete(v802);
                }
                else
                {
                  v1404 = v801;
                  *v802 = (unint64_t)v804;
                  v802[1] = (unint64_t)v1432;
                  v841 = v802 + 2;
                }
              }
              else
              {
                v1404 = v801;
                v841 = v802;
              }
              v925 = (llvm::UnreachableInst *)operator new(0x40uLL);
              *((_DWORD *)v925 + 5) &= 0x38000000u;
              llvm::UnreachableInst::UnreachableInst(v925, **(llvm::LLVMContext ***)v807, (llvm::Instruction *)v807);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v807 + 40) + 40, (uint64_t ***)v807);
              v926 = *(_QWORD *)(v807 + 24);
              v927 = *(_QWORD **)(v807 + 32);
              *v927 = v926;
              *(_QWORD *)(v926 + 8) = v927;
              *(_QWORD *)(v807 + 24) = 0;
              *(_QWORD *)(v807 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v807);
              v766 = 1;
              v802 = v841;
              v3 = a1;
              v801 = v1404;
              goto LABEL_1405;
            }
            goto LABEL_1404;
          }
          v837 = *(_WORD *)(v807 + 18);
          if ((v837 & 1) != 0)
          {
            v850 = *(_DWORD *)(v807 + 20);
            if ((v850 & 0x40000000) != 0)
              v851 = *(_QWORD *)(v807 - 8);
            else
              v851 = v807 - 32 * (v850 & 0x7FFFFFF);
            v838 = *(llvm::BasicBlock **)(v851 + 32);
          }
          else
          {
            v838 = 0;
          }
          if (v838 != v765)
          {
            v1405 = v804;
            v854 = *(_DWORD *)(v807 + 20);
            if ((v854 & 0x40000000) != 0)
            {
              v855 = (unint64_t)v801;
              v857 = *(_QWORD *)(v807 - 8);
              v136 = (v837 & 1) == 0;
              v862 = 64;
              if (v136)
                v862 = 32;
              v859 = (llvm::BasicBlock **)(v857 + v862);
              v856 = v854 & 0x7FFFFFF;
            }
            else
            {
              v855 = (unint64_t)v801;
              v856 = v854 & 0x7FFFFFF;
              v857 = v807 - 32 * v856;
              v136 = (v837 & 1) == 0;
              v858 = 64;
              if (v136)
                v858 = 32;
              v859 = (llvm::BasicBlock **)(v857 + v858);
            }
            v863 = (llvm::BasicBlock **)(v857 + 32 * v856);
            while (v859 != v863)
            {
              if (*v859 == v765)
              {
                llvm::CatchSwitchInst::removeHandler(v807, v859);
                v859 -= 4;
                v863 -= 4;
                v766 = 1;
              }
              v859 += 4;
            }
            if (*(_QWORD *)(a1 + 8))
            {
              v801 = (llvm::ValueAsMetadata *)v855;
              if ((unint64_t)v802 >= v855)
              {
                v881 = ((char *)v802 - (char *)v803) >> 4;
                v882 = v881 + 1;
                v864 = v1405;
                if ((unint64_t)(v881 + 1) >> 60)
                  goto LABEL_2431;
                if ((v801 - (llvm::ValueAsMetadata *)v803) >> 3 > v882)
                  v882 = (v801 - (llvm::ValueAsMetadata *)v803) >> 3;
                if ((unint64_t)(v801 - (llvm::ValueAsMetadata *)v803) >= 0x7FFFFFFFFFFFFFF0)
                  v883 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v883 = v882;
                if (v883)
                {
                  if (v883 >> 60)
                    goto LABEL_2432;
                  v884 = (char *)operator new(16 * v883);
                }
                else
                {
                  v884 = 0;
                }
                v902 = (llvm::ValueAsMetadata **)&v884[16 * v881];
                *v902 = v1405;
                v902[1] = v1432;
                if (v802 == v803)
                {
                  v803 = (unint64_t *)&v884[16 * v881];
                  v4 = v1425;
                }
                else
                {
                  v903 = (unint64_t *)&v884[16 * v881];
                  v4 = v1425;
                  do
                  {
                    *((_OWORD *)v903 - 1) = *((_OWORD *)v802 - 1);
                    v903 -= 2;
                    v802 -= 2;
                  }
                  while (v802 != v803);
                  v802 = v803;
                  v803 = v903;
                }
                v801 = (llvm::ValueAsMetadata *)&v884[16 * v883];
                v865 = (unint64_t *)(v902 + 2);
                if (v802)
                  operator delete(v802);
              }
              else
              {
                v864 = v1405;
                *v802 = (unint64_t)v1405;
                v802[1] = (unint64_t)v1432;
                v865 = v802 + 2;
                v4 = v1425;
              }
            }
            else
            {
              v865 = v802;
              v4 = v1425;
              v801 = (llvm::ValueAsMetadata *)v855;
              v864 = v1405;
            }
            v904 = *(_WORD *)(v807 + 18);
            v905 = *(_DWORD *)(v807 + 20);
            v906 = v905 & 0x7FFFFFF;
            if ((v904 & 1) == 0)
            {
              if (v906 == 1)
              {
                v907 = *(_QWORD *)(a1 + 8);
                if (v907)
                {
                  llvm::DomTreeUpdater::applyUpdates(v907, v803, ((char *)v865 - (char *)v803) >> 4);
                  v865 = v803;
                }
                for (jj = *((_QWORD *)v864 + 1); jj; jj = *(_QWORD *)(jj + 8))
                {
                  v909 = *(_QWORD *)(jj + 24);
                  v910 = *(unsigned __int8 *)(v909 + 16);
                  if (v909)
                    v911 = v910 >= 0x1C;
                  else
                    v911 = 0;
                  if (v911 && v910 - 29 < 0xB)
                    break;
                }
                __p[0] = &v1462;
                __p[1] = (void *)0x800000000;
                sub_1C4DBBCC0((unsigned int *)__p, jj, 0);
                v914 = (llvm **)__p[0];
                if (LODWORD(__p[1]))
                {
                  v915 = v801;
                  v916 = 8 * LODWORD(__p[1]);
                  do
                  {
                    v917 = *v914++;
                    llvm::removeUnwindEdge(v917, *(llvm::BasicBlock **)(a1 + 8), v913);
                    v916 -= 8;
                  }
                  while (v916);
                  v914 = (llvm **)__p[0];
                  v801 = v915;
                }
                if (v914 != (llvm **)&v1462)
                  free(v914);
LABEL_1588:
                v960 = (llvm::UnreachableInst *)operator new(0x40uLL);
                *((_DWORD *)v960 + 5) &= 0x38000000u;
                llvm::UnreachableInst::UnreachableInst(v960, **(llvm::LLVMContext ***)v807, (llvm::Instruction *)v807);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v807 + 40) + 40, (uint64_t ***)v807);
                v961 = *(_QWORD *)(v807 + 24);
                v962 = *(_QWORD **)(v807 + 32);
                *v962 = v961;
                *(_QWORD *)(v961 + 8) = v962;
                *(_QWORD *)(v807 + 24) = 0;
                *(_QWORD *)(v807 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v807);
                v766 = 1;
              }
LABEL_1589:
              v802 = v865;
              v3 = a1;
              v799 = v1413;
              goto LABEL_1405;
            }
            if (v906 != 2)
              goto LABEL_1589;
            if (*(_QWORD *)(a1 + 8))
            {
              v918 = *((_QWORD *)v864 + 1);
              if (v918)
              {
                while (1)
                {
                  v919 = *(_QWORD *)(v918 + 24);
                  v920 = *(unsigned __int8 *)(v919 + 16);
                  v921 = v919 && v920 >= 0x1C;
                  if (v921 && v920 - 29 < 0xB)
                    break;
                  v918 = *(_QWORD *)(v918 + 8);
                  if (!v918)
                    goto LABEL_1583;
                }
                v1396 = (llvm::Value *)((unint64_t)v864 | 4);
                if ((v904 & 1) == 0)
                  goto LABEL_1533;
LABEL_1529:
                v928 = *(_DWORD *)(v807 + 20);
                if ((v928 & 0x40000000) != 0)
                  v929 = *(_QWORD *)(v807 - 8);
                else
                  v929 = v807 - 32 * (v928 & 0x7FFFFFF);
                v930 = *(_QWORD *)(v929 + 32);
LABEL_1534:
                v931 = *(_QWORD *)(v919 + 40);
                v932 = v930 & 0xFFFFFFFFFFFFFFFBLL;
                if (v865 >= (unint64_t *)v801)
                {
                  v934 = v801;
                  v935 = ((char *)v865 - (char *)v803) >> 4;
                  v936 = v935 + 1;
                  if ((unint64_t)(v935 + 1) >> 60)
                    goto LABEL_2431;
                  v937 = v934 - (llvm::ValueAsMetadata *)v803;
                  v938 = (v934 - (llvm::ValueAsMetadata *)v803) >> 3;
                  if (v938 > v936)
                    v936 = v938;
                  if (v937 >= 0x7FFFFFFFFFFFFFF0)
                    v939 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v939 = v936;
                  if (v939)
                  {
                    if (v939 >> 60)
                      goto LABEL_2432;
                    v940 = v931;
                    v1385 = v939;
                    v941 = (char *)operator new(16 * v939);
                    v939 = v1385;
                    v931 = v940;
                  }
                  else
                  {
                    v941 = 0;
                  }
                  v942 = &v941[16 * v935];
                  *(_QWORD *)v942 = v931;
                  *((_QWORD *)v942 + 1) = v932;
                  if (v865 == v803)
                  {
                    v803 = (unint64_t *)&v941[16 * v935];
                  }
                  else
                  {
                    v943 = (unint64_t *)&v941[16 * v935];
                    do
                    {
                      *((_OWORD *)v943 - 1) = *((_OWORD *)v865 - 1);
                      v943 -= 2;
                      v865 -= 2;
                    }
                    while (v865 != v803);
                    v865 = v803;
                    v803 = v943;
                  }
                  v801 = (llvm::ValueAsMetadata *)&v941[16 * v939];
                  v933 = (unint64_t *)(v942 + 16);
                  if (v865)
                  {
                    v944 = v931;
                    operator delete(v865);
                    v931 = v944;
                  }
                }
                else
                {
                  *v865 = v931;
                  v865[1] = v932;
                  v933 = v865 + 2;
                }
                if (v933 < (unint64_t *)v801)
                {
                  *v933 = v931;
                  v933[1] = (unint64_t)v1396;
                  v865 = v933 + 2;
                  v4 = v1425;
                  goto LABEL_1570;
                }
                v945 = v801;
                v946 = ((char *)v933 - (char *)v803) >> 4;
                v947 = v946 + 1;
                if ((unint64_t)(v946 + 1) >> 60)
                  goto LABEL_2431;
                v948 = v945 - (llvm::ValueAsMetadata *)v803;
                v949 = (v945 - (llvm::ValueAsMetadata *)v803) >> 3;
                if (v949 > v947)
                  v947 = v949;
                if (v948 >= 0x7FFFFFFFFFFFFFF0)
                  v950 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v950 = v947;
                if (v950)
                {
                  if (v950 >> 60)
                    goto LABEL_2432;
                  v951 = v931;
                  v952 = (char *)operator new(16 * v950);
                  v931 = v951;
                }
                else
                {
                  v952 = 0;
                }
                v953 = &v952[16 * v946];
                v954 = (llvm::ValueAsMetadata *)&v952[16 * v950];
                *(_QWORD *)v953 = v931;
                *((_QWORD *)v953 + 1) = v1396;
                v865 = (unint64_t *)(v953 + 16);
                if (v933 == v803)
                  goto LABEL_1568;
                do
                {
                  *((_OWORD *)v953 - 1) = *((_OWORD *)v933 - 1);
                  v953 -= 16;
                  v933 -= 2;
                }
                while (v933 != v803);
                if (v803)
LABEL_1568:
                  operator delete(v803);
                v803 = (unint64_t *)v953;
                v4 = v1425;
                v801 = v954;
                v864 = v1405;
LABEL_1570:
                while (1)
                {
                  v918 = *(_QWORD *)(v918 + 8);
                  if (!v918)
                    break;
                  v919 = *(_QWORD *)(v918 + 24);
                  v955 = *(unsigned __int8 *)(v919 + 16);
                  if (v919)
                    v956 = v955 >= 0x1C;
                  else
                    v956 = 0;
                  if (v956 && v955 - 29 <= 0xA)
                  {
                    if ((*(_WORD *)(v807 + 18) & 1) == 0)
                    {
LABEL_1533:
                      v930 = 0;
                      goto LABEL_1534;
                    }
                    goto LABEL_1529;
                  }
                }
                if ((*(_WORD *)(v807 + 18) & 1) == 0)
                {
                  v958 = 0;
LABEL_1587:
                  llvm::Value::doRAUW(v864, v958, (llvm::Value *)1);
                  goto LABEL_1588;
                }
                v905 = *(_DWORD *)(v807 + 20);
              }
            }
LABEL_1583:
            if ((v905 & 0x40000000) != 0)
              v959 = *(_QWORD *)(v807 - 8);
            else
              v959 = v807 - 32 * (v905 & 0x7FFFFFF);
            v958 = *(llvm::Value **)(v959 + 32);
            goto LABEL_1587;
          }
LABEL_1400:
          v860 = *(_QWORD *)(a1 + 8);
          if (v860)
          {
            llvm::DomTreeUpdater::applyUpdates(v860, v803, ((char *)v802 - (char *)v803) >> 4);
            v861 = *(llvm::BasicBlock **)(a1 + 8);
            v802 = v803;
          }
          else
          {
            v861 = 0;
          }
          llvm::removeUnwindEdge(*(llvm **)(v807 + 40), v861, v809);
          v766 = 1;
          goto LABEL_1404;
        }
        v803 = 0;
        v802 = 0;
LABEL_1758:
        v1053 = *(_QWORD *)(v3 + 8);
        if (v1053)
          llvm::DomTreeUpdater::applyUpdates(v1053, v803, ((char *)v802 - (char *)v803) >> 4);
        v1054 = *((_QWORD *)v765 + 1);
        if (v1054)
        {
          while (1)
          {
            v1055 = *(_QWORD *)(v1054 + 24);
            v1056 = *(unsigned __int8 *)(v1055 + 16);
            v1057 = v1055 && v1056 >= 0x1C;
            if (v1057 && v1056 - 29 < 0xB)
              break;
            v1054 = *(_QWORD *)(v1054 + 8);
            if (!v1054)
              goto LABEL_1770;
          }
        }
        else
        {
LABEL_1770:
          v1059 = *(_QWORD *)(*((_QWORD *)v765 + 7) + 80);
          if (v1059)
            v1060 = (llvm::BasicBlock *)(v1059 - 24);
          else
            v1060 = 0;
          if (v765 != v1060)
          {
            llvm::DeleteDeadBlock(v765, *(llvm::BasicBlock **)(v3 + 8), 0);
            v766 = 1;
          }
        }
        if (v1483 != &v1485)
          free(v1483);
        if ((v1478 & 1) != 0)
        {
          if (!v803)
          {
LABEL_1780:
            v33 = v1421;
LABEL_1781:
            v33 |= v766;
            goto LABEL_1877;
          }
        }
        else
        {
          MEMORY[0x1CAA32FB4](v1479.i64[0], 8);
          if (!v803)
            goto LABEL_1780;
        }
        operator delete(v803);
        goto LABEL_1780;
      case 0x24:
        v752 = (llvm::BasicBlock **)(v717 - 32 * (*(_DWORD *)(v717 + 20) & 0x7FFFFFF));
        v753 = *v752;
        if (*((unsigned __int8 *)*v752 + 16) - 11 < 2)
        {
          v754 = 0;
          goto LABEL_1815;
        }
        v1431 = (llvm *)(v717 + 24);
        v775 = *(_WORD *)(v717 + 18);
        if ((v775 & 1) != 0)
        {
          v776 = v752[4];
          if (v776)
          {
            if (llvm::BasicBlock::getSinglePredecessor(v752[4]) == *(_QWORD *)(v717 + 40))
            {
              v1107 = *((_QWORD *)v776 + 6);
              v1108 = v1107 ? v1107 - 24 : 0;
              if (v1107 && *(_BYTE *)(v1108 + 16) == 79)
              {
                v754 = 1;
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v1108, v753, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1108 + 40) + 40, (uint64_t ***)v1108);
                v1109 = *(_QWORD *)(v1108 + 24);
                v1110 = *(_QWORD **)(v1108 + 32);
                *v1110 = v1109;
                *(_QWORD *)(v1109 + 8) = v1110;
                *(_QWORD *)(v1108 + 24) = 0;
                *(_QWORD *)(v1108 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v1108);
                v1111 = *(llvm::BasicBlock **)(v717 + 40);
                v1112 = operator new(0x60uLL);
                v1112[13] = v1112[13] & 0x38000000 | 1;
                *(_QWORD *)v1112 = 0;
                *((_QWORD *)v1112 + 1) = 0;
                *((_QWORD *)v1112 + 2) = 0;
                *((_QWORD *)v1112 + 3) = v1112 + 8;
                llvm::BranchInst::BranchInst((llvm::BranchInst *)(v1112 + 8), v776, v1111);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v717 + 40) + 40, (uint64_t ***)v717);
                v1113 = *(_QWORD *)(v717 + 24);
                v1114 = *(_QWORD **)(v717 + 32);
                *v1114 = v1113;
                *(_QWORD *)(v1113 + 8) = v1114;
                *(_QWORD *)v1431 = 0;
                *(_QWORD *)(v717 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v717);
                goto LABEL_1814;
              }
            }
          }
        }
        v777 = *(_QWORD *)(v717 + 40);
        if (*((_QWORD *)v753 + 5) != v777)
          goto LABEL_1813;
        v778 = *((_QWORD *)v753 + 1);
        if (!v778 || *(_QWORD *)(v778 + 8))
          goto LABEL_1813;
        v779 = *(llvm::BasicBlock **)(a1 + 8);
        v780 = *((_QWORD *)v753 + 4);
        v781 = v780 == v777 + 40 || v780 == 0;
        v782 = v781 ? 0 : v780 - 24;
        v783 = v782 + 24;
        v784 = v781 ? 0 : v783;
        v785 = v716 < 0xFFFFFFF5 || v714 == 0;
        v786 = v785 ? 0 : (uint64_t)v1431;
        if (!sub_1C5FA5BEC(v784, v786))
        {
LABEL_1813:
          v754 = 0;
LABEL_1814:
          v3 = a1;
          goto LABEL_1815;
        }
        v1420 = v1418 | v1411;
        if ((v775 & 1) != 0)
        {
          v1137 = v752[4];
          v789 = v779;
          if (v1137)
          {
            v1138 = (_QWORD *)((char *)v1137 + 40);
            v1139 = (_QWORD *)*((_QWORD *)v1137 + 6);
            v1140 = v1139;
            if (v1139 == (_QWORD *)((char *)v1137 + 40))
            {
LABEL_1956:
              v1141 = 0;
            }
            else
            {
              while (1)
              {
                v1141 = (llvm::Instruction *)(v1140 - 3);
                v1142 = v1140 ? (uint64_t)(v1140 - 3) : 0;
                if (*(_BYTE *)(v1142 + 16) != 83)
                  break;
                v1140 = (_QWORD *)v1140[1];
                if (v1140 == v1138)
                  goto LABEL_1956;
              }
            }
            if ((_QWORD *)*v1138 != v1138)
            {
              v1143 = v1139 - 3;
              v1144 = v1139 ? (uint64_t)(v1139 - 3) : 0;
              if (v1139)
              {
                for (kk = *(unsigned __int8 *)(v1144 + 16); kk == 83; kk = *(unsigned __int8 *)(v1160 + 16))
                {
                  v1146 = *((_DWORD *)v1143 + 5);
                  v1147 = v1146 & 0x7FFFFFF;
                  if ((v1146 & 0x7FFFFFF) != 0)
                  {
                    v1148 = 0;
                    while (1)
                    {
                      v1149 = &v1143[-4 * v1147];
                      if ((v1146 & 0x40000000) != 0)
                        v1149 = (_QWORD *)*(v1143 - 1);
                      if (v1149[4 * *((unsigned int *)v1143 + 15) + v1148] == v777)
                        break;
                      if (v1147 == ++v1148)
                        goto LABEL_1970;
                    }
                  }
                  else
                  {
LABEL_1970:
                    LODWORD(v1148) = -1;
                  }
                  if ((v1146 & 0x40000000) != 0)
                    v1150 = (_QWORD *)*(v1143 - 1);
                  else
                    v1150 = &v1143[-4 * v1147];
                  v1151 = v1150[4 * v1148];
                  if (*(_BYTE *)(v1151 + 16) == 83)
                    v1152 = v1150[4 * v1148];
                  else
                    v1152 = 0;
                  if (v1152)
                    v1153 = *(_QWORD *)(v1152 + 40) == v777;
                  else
                    v1153 = 0;
                  v1154 = *(_QWORD *)(v777 + 8);
                  if (v1154)
                  {
                    while (1)
                    {
                      v1155 = *(_QWORD *)(v1154 + 24);
                      v1156 = *(unsigned __int8 *)(v1155 + 16);
                      v1157 = v1155 && v1156 >= 0x1C;
                      if (v1157 && v1156 - 29 < 0xB)
                        break;
                      v1154 = *(_QWORD *)(v1154 + 8);
                      if (!v1154)
                        goto LABEL_1990;
                    }
LABEL_1995:
                    v1161 = *(_QWORD *)(v1155 + 40);
                    v1162 = v1151;
                    if (v1153)
                    {
                      v1163 = *(_DWORD *)(v1152 + 20);
                      v1164 = v1163 & 0x7FFFFFF;
                      if ((v1163 & 0x7FFFFFF) != 0)
                      {
                        v1165 = 0;
                        while (1)
                        {
                          v1166 = v1152 - 32 * v1164;
                          if ((v1163 & 0x40000000) != 0)
                            v1166 = *(_QWORD *)(v1152 - 8);
                          if (*(_QWORD *)(v1166 + 32 * *(unsigned int *)(v1152 + 60) + 8 * v1165) == v1161)
                            break;
                          if (v1164 == ++v1165)
                            goto LABEL_2002;
                        }
                      }
                      else
                      {
LABEL_2002:
                        LODWORD(v1165) = -1;
                      }
                      if ((v1163 & 0x40000000) != 0)
                        v1167 = *(_QWORD *)(v1152 - 8);
                      else
                        v1167 = v1152 - 32 * v1164;
                      v1162 = *(_QWORD *)(v1167 + 32 * v1165);
                    }
                    sub_1C477667C((llvm::PHINode *)v1143, v1162, v1161);
                    while (1)
                    {
                      v1154 = *(_QWORD *)(v1154 + 8);
                      if (!v1154)
                        break;
                      v1155 = *(_QWORD *)(v1154 + 24);
                      v1168 = *(unsigned __int8 *)(v1155 + 16);
                      if (v1155)
                        v1169 = v1168 >= 0x1C;
                      else
                        v1169 = 0;
                      if (v1169 && v1168 - 29 < 0xB)
                        goto LABEL_1995;
                    }
                  }
LABEL_1990:
                  v1159 = v1143[4];
                  v1143 = (_QWORD *)(v1159 - 24);
                  v1160 = v1159 ? v1159 - 24 : 0;
                  v4 = v1425;
                  if (!v1159)
                    break;
                }
              }
            }
            if (*(_QWORD *)(v777 + 40) == v777 + 40)
            {
              v1173 = 0;
            }
            else
            {
              v1173 = 0;
              v1174 = *(_QWORD *)(v777 + 48);
              v1175 = (llvm::PHINode *)(v1174 - 24);
              if (v1174)
                v1176 = v1174 - 24;
              else
                v1176 = 0;
              if (v1174)
              {
                if (*(_BYTE *)(v1176 + 16) == 83)
                {
                  do
                  {
                    v1177 = (_QWORD *)((char *)v1175 + 24);
                    if (!v1175)
                      v1177 = 0;
                    v1178 = v1177[1];
                    if (v1178)
                      v1179 = (unsigned __int8 *)(v1178 - 24);
                    else
                      v1179 = 0;
                    v1180 = v1179[16];
                    if (*((_QWORD *)v1175 + 1)
                      && llvm::Instruction::isUsedOutsideOfBlock(v1175, (const llvm::BasicBlock *)v777))
                    {
                      v1181 = *((_QWORD *)v1137 + 1);
                      if (v1181)
                      {
                        while (1)
                        {
                          v1182 = *(_QWORD *)(v1181 + 24);
                          v1183 = *(unsigned __int8 *)(v1182 + 16);
                          v1184 = v1182 && v1183 >= 0x1C;
                          if (v1184 && v1183 - 29 <= 0xA)
                            break;
                          v1181 = *(_QWORD *)(v1181 + 8);
                          if (!v1181)
                            goto LABEL_2042;
                        }
LABEL_2046:
                        v1188 = *(_QWORD *)(v1182 + 40);
                        if (v1188 != v777)
                          sub_1C477667C(v1175, (uint64_t)v1175, v1188);
                        while (1)
                        {
                          v1181 = *(_QWORD *)(v1181 + 8);
                          if (!v1181)
                            break;
                          v1182 = *(_QWORD *)(v1181 + 24);
                          v1189 = *(unsigned __int8 *)(v1182 + 16);
                          if (v1182)
                            v1190 = v1189 >= 0x1C;
                          else
                            v1190 = 0;
                          if (v1190 && v1189 - 29 < 0xB)
                            goto LABEL_2046;
                        }
                      }
LABEL_2042:
                      llvm::Instruction::moveBefore(v1175, v1141);
                      v1187 = llvm::UndefValue::get(*(llvm::UndefValue **)v1175, v1186);
                      sub_1C477667C(v1175, (uint64_t)v1187, v777);
                    }
                    if (!v1178)
                      break;
                    v1175 = (llvm::PHINode *)v1179;
                  }
                  while (v1180 == 83);
                  v1173 = 0;
                }
                v4 = v1425;
              }
            }
            v788 = v1137;
            goto LABEL_2062;
          }
          v788 = 0;
        }
        else
        {
          v788 = 0;
          v789 = v779;
        }
        v1173 = 1;
LABEL_2062:
        v1192 = *(_QWORD *)(v777 + 8);
        if (!v1192)
        {
LABEL_2072:
          v1199 = 0;
          v1198 = 0;
LABEL_2073:
          if (v789)
            llvm::DomTreeUpdater::applyUpdates((uint64_t)v789, v1199, ((char *)v1198 - (char *)v1199) >> 4);
          llvm::DeleteDeadBlock((llvm *)v777, v789, 0);
          if (v1199)
            operator delete(v1199);
          v754 = 1;
          v3 = a1;
          v33 = v1420;
          goto LABEL_1815;
        }
        while (1)
        {
          v1193 = *(_QWORD *)(v1192 + 24);
          v1194 = *(unsigned __int8 *)(v1193 + 16);
          v1195 = v1193 && v1194 >= 0x1C;
          if (v1195 && v1194 - 29 < 0xB)
            break;
          v1192 = *(_QWORD *)(v1192 + 8);
          if (!v1192)
            goto LABEL_2072;
        }
        v1197 = 0;
        v1198 = 0;
        v1199 = 0;
        v1434 = (llvm *)((unint64_t)v788 & 0xFFFFFFFFFFFFFFFBLL);
        v1414 = v777 | 4;
        v1407 = v789;
        while (1)
        {
          v1200 = v1192;
          do
          {
            v1192 = *(_QWORD *)(v1192 + 8);
            if (!v1192)
              break;
            v1201 = *(_QWORD *)(v1192 + 24);
            v1202 = *(unsigned __int8 *)(v1201 + 16);
            v1203 = v1201 && v1202 >= 0x1C;
          }
          while (!v1203 || v1202 - 29 > 0xA);
          v1205 = *(_QWORD *)(v1200 + 24);
          v1206 = *(llvm **)(v1205 + 40);
          if (v1173)
            break;
          llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v777, *(llvm::BasicBlock **)(v1205 + 40), 0);
          v1207 = (_QWORD *)*((_QWORD *)v1206 + 5);
          if (v1207 == (_QWORD *)((char *)v1206 + 40))
          {
            v1209 = 0;
          }
          else
          {
            if (v1207)
              v1208 = (unsigned __int8 *)(v1207 - 3);
            else
              v1208 = 0;
            if (v1208[16] - 29 >= 0xB)
              v1209 = 0;
            else
              v1209 = (llvm::User *)v1208;
          }
          llvm::User::replaceUsesOfWith(v1209, (llvm::Value *)v777, v788);
          if (!v789)
            goto LABEL_2102;
          if (v1198 >= (unint64_t *)v1197)
          {
            v1212 = ((char *)v1198 - (char *)v1199) >> 4;
            v1213 = v1212 + 1;
            if ((unint64_t)(v1212 + 1) >> 60)
              goto LABEL_2431;
            v1210 = v788;
            if ((v1197 - (char *)v1199) >> 3 > v1213)
              v1213 = (v1197 - (char *)v1199) >> 3;
            if ((unint64_t)(v1197 - (char *)v1199) >= 0x7FFFFFFFFFFFFFF0)
              v1214 = 0xFFFFFFFFFFFFFFFLL;
            else
              v1214 = v1213;
            if (v1214)
            {
              if (v1214 >> 60)
                goto LABEL_2432;
              v1215 = (char *)operator new(16 * v1214);
            }
            else
            {
              v1215 = 0;
            }
            v1216 = (llvm **)&v1215[16 * v1212];
            *v1216 = v1206;
            v1216[1] = v1434;
            if (v1198 == v1199)
            {
              v1199 = (unint64_t *)&v1215[16 * v1212];
              v789 = v1407;
            }
            else
            {
              v1217 = (unint64_t *)&v1215[16 * v1212];
              v789 = v1407;
              do
              {
                *((_OWORD *)v1217 - 1) = *((_OWORD *)v1198 - 1);
                v1217 -= 2;
                v1198 -= 2;
              }
              while (v1198 != v1199);
              v1198 = v1199;
              v1199 = v1217;
            }
            v1197 = &v1215[16 * v1214];
            v1211 = (unint64_t *)(v1216 + 2);
            if (v1198)
              operator delete(v1198);
          }
          else
          {
            v1210 = v788;
            *v1198 = (unint64_t)v1206;
            v1198[1] = (unint64_t)v1434;
            v1211 = v1198 + 2;
          }
          if (v1211 >= (unint64_t *)v1197)
          {
            v1218 = ((char *)v1211 - (char *)v1199) >> 4;
            v1219 = v1218 + 1;
            if ((unint64_t)(v1218 + 1) >> 60)
LABEL_2431:
              abort();
            if ((v1197 - (char *)v1199) >> 3 > v1219)
              v1219 = (v1197 - (char *)v1199) >> 3;
            if ((unint64_t)(v1197 - (char *)v1199) >= 0x7FFFFFFFFFFFFFF0)
              v1220 = 0xFFFFFFFFFFFFFFFLL;
            else
              v1220 = v1219;
            if (v1220)
            {
              if (v1220 >> 60)
LABEL_2432:
                sub_1C4764EE4();
              v1221 = (char *)operator new(16 * v1220);
            }
            else
            {
              v1221 = 0;
            }
            v1222 = (llvm **)&v1221[16 * v1218];
            v1197 = &v1221[16 * v1220];
            *v1222 = v1206;
            v1222[1] = (llvm *)v1414;
            v1198 = (unint64_t *)(v1222 + 2);
            if (v1211 == v1199)
            {
              v4 = v1425;
              v788 = v1210;
            }
            else
            {
              v4 = v1425;
              do
              {
                *((_OWORD *)v1222 - 1) = *((_OWORD *)v1211 - 1);
                v1222 -= 2;
                v1211 -= 2;
              }
              while (v1211 != v1199);
              v788 = v1210;
              if (!v1199)
                goto LABEL_2141;
            }
            operator delete(v1199);
LABEL_2141:
            v1199 = (unint64_t *)v1222;
            v789 = v1407;
            goto LABEL_2103;
          }
          *v1211 = (unint64_t)v1206;
          v1211[1] = v1414;
          v1198 = v1211 + 2;
          v4 = v1425;
          v788 = v1210;
LABEL_2103:
          if (!v1192)
            goto LABEL_2073;
        }
        if (v789)
        {
          llvm::DomTreeUpdater::applyUpdates((uint64_t)v789, v1199, ((char *)v1198 - (char *)v1199) >> 4);
          v1198 = v1199;
        }
        llvm::removeUnwindEdge(v1206, v789, v787);
LABEL_2102:
        v4 = v1425;
        goto LABEL_2103;
      default:
        goto LABEL_1877;
    }
  }
}

uint64_t sub_1C5F90DD8(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (*(_QWORD *)(a1 + 40) == a1 + 40)
    return 1;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = v4 - 24;
  if (v4)
    v6 = v4 - 24;
  else
    v6 = 0;
  result = 1;
  if (v4 && *(_BYTE *)(v6 + 16) == 83)
  {
    do
    {
      v10 = *(_DWORD *)(v5 + 20);
      v11 = v10 & 0x7FFFFFF;
      if ((v10 & 0x7FFFFFF) != 0)
      {
        v12 = 0;
        while (1)
        {
          v13 = v5 - 32 * v11;
          if ((v10 & 0x40000000) != 0)
            v13 = *(_QWORD *)(v5 - 8);
          if (*(_QWORD *)(v13 + 32 * *(unsigned int *)(v5 + 60) + 8 * v12) == *a2)
            break;
          if (v11 == ++v12)
            goto LABEL_13;
        }
      }
      else
      {
LABEL_13:
        LODWORD(v12) = -1;
      }
      v14 = v11;
      if ((v10 & 0x40000000) != 0)
      {
        v15 = *(_QWORD *)(v5 - 8);
        if (!(_DWORD)v11)
          goto LABEL_23;
      }
      else
      {
        v15 = v5 - 32 * v11;
        if (!(_DWORD)v11)
        {
LABEL_23:
          LODWORD(v16) = -1;
          goto LABEL_24;
        }
      }
      v16 = 0;
      while (1)
      {
        v17 = v5 - 32 * v14;
        if ((v10 & 0x40000000) != 0)
          v17 = *(_QWORD *)(v5 - 8);
        if (*(_QWORD *)(v17 + 32 * *(unsigned int *)(v5 + 60) + 8 * v16) == a2[1])
          break;
        if (v14 == ++v16)
          goto LABEL_23;
      }
LABEL_24:
      if ((v10 & 0x40000000) != 0)
        v18 = *(_QWORD *)(v5 - 8);
      else
        v18 = v5 - 32 * v14;
      v19 = *(_QWORD *)(v15 + 32 * v12);
      v20 = *(_QWORD *)(v18 + 32 * v16);
      if (v19 != v20)
      {
        if (!a4)
          return 0;
        v21 = sub_1C477672C((uint64_t)a4, v19);
        v22 = a4[1];
        v23 = v22 == *a4 ? 20 : 16;
        if (v21 == (_QWORD *)(v22 + 8 * *(unsigned int *)((char *)a4 + v23)))
          return 0;
        v24 = sub_1C477672C((uint64_t)a4, v20);
        v25 = a4[1];
        v26 = v25 == *a4 ? 20 : 16;
        if (v24 == (_QWORD *)(v25 + 8 * *(unsigned int *)((char *)a4 + v26)))
          return 0;
      }
      v27 = *(_QWORD *)(v5 + 32);
      v5 = v27 - 24;
      if (v27)
        v28 = v27 - 24;
      else
        v28 = 0;
      result = 1;
    }
    while (v27 && *(_BYTE *)(v28 + 16) == 83);
  }
  return result;
}

void sub_1C5F90FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (*(_QWORD *)(a1 + 40) != a1 + 40)
  {
    for (i = *(_QWORD *)(a1 + 48); ; i = *(_QWORD *)(v9 + 32))
    {
      v9 = i - 24;
      v10 = i ? i - 24 : 0;
      if (!i || *(_BYTE *)(v10 + 16) != 83)
        break;
      v11 = *(_DWORD *)(i - 4);
      v12 = v11 & 0x7FFFFFF;
      if ((v11 & 0x7FFFFFF) != 0)
      {
        v13 = 0;
        while (1)
        {
          v14 = v9 - 32 * v12;
          if ((v11 & 0x40000000) != 0)
            v14 = *(_QWORD *)(v9 - 8);
          if (*(_QWORD *)(v14 + 32 * *(unsigned int *)(v9 + 60) + 8 * v13) == a3)
            break;
          if (v12 == ++v13)
            goto LABEL_14;
        }
      }
      else
      {
LABEL_14:
        LODWORD(v13) = -1;
      }
      if ((v11 & 0x40000000) != 0)
        v15 = *(_QWORD *)(v9 - 8);
      else
        v15 = v9 - 32 * v12;
      sub_1C477667C((llvm::PHINode *)v9, *(_QWORD *)(v15 + 32 * v13), a2);
    }
  }
  if (a4)
  {
    v16 = *(_DWORD *)(*(_QWORD *)a4 + 40);
    if (v16)
    {
      v17 = *(_QWORD *)(*(_QWORD *)a4 + 24);
      v18 = v16 - 1;
      v19 = (v16 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v20 = *(_QWORD *)(v17 + 16 * v19);
      if (v20 == a1)
      {
LABEL_25:
        v23 = v17 + 16 * v19;
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
        {
          v25 = sub_1C4EDF32C(*(_QWORD *)(v23 + 8), a3);
          sub_1C4ECE04C(v24, v25, a2);
        }
      }
      else
      {
        v21 = 1;
        while (v20 != -4096)
        {
          v22 = v19 + v21++;
          v19 = v22 & v18;
          v20 = *(_QWORD *)(v17 + 16 * v19);
          if (v20 == a1)
            goto LABEL_25;
        }
      }
    }
  }
}

void sub_1C5F91118(llvm::Value *this, int a2, int a3)
{
  llvm::MDNode *v4;
  uint64_t *v5;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a3 | a2)
  {
    v5 = (uint64_t *)***((_QWORD ***)this + 5);
    v6[0] = a2;
    v6[1] = a3;
    v4 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights(&v5, (uint64_t)v6, 2);
    if (v4)
      goto LABEL_5;
  }
  if (*((_QWORD *)this + 6) || (*((_BYTE *)this + 23) & 0x20) != 0)
  {
    v4 = 0;
LABEL_5:
    llvm::Value::setMetadata(this, 2, v4);
  }
}

unsigned __int8 *sub_1C5F911C0(uint64_t a1, uint64_t a2, _QWORD *a3, llvm::Constant **a4, uint64_t a5)
{
  llvm::Type *v10;
  llvm::Value **NullValue;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *AllOnesValue;

  if (sub_1C4F8BD90((uint64_t)a4, (uint64_t)a3, 0))
    return sub_1C4773860(a1, a2, a3, (uint64_t)a4, a5, 0);
  if ((_DWORD)a2 == 28)
  {
    NullValue = llvm::Constant::getNullValue(*a4, v10);
    v13 = (uint64_t *)a1;
    v14 = (uint64_t)a3;
    AllOnesValue = (uint64_t *)a4;
  }
  else
  {
    AllOnesValue = (uint64_t *)llvm::Constant::getAllOnesValue(*a4, v10);
    v13 = (uint64_t *)a1;
    v14 = (uint64_t)a3;
    NullValue = a4;
  }
  return (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect(v13, v14, AllOnesValue, (uint64_t)NullValue, a5, 0);
}

uint64_t sub_1C5F91280(uint64_t a1, char *a2, uint64_t a3)
{
  _QWORD **v4;
  llvm::BasicBlock *v5;
  uint64_t SinglePredecessor;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t *v13;
  char *v14;
  llvm::Value *v15;
  int v16;
  int v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  int v25;
  char *v26;
  int v27;
  unsigned int v28;
  llvm::BasicBlock *v29;
  char *v30;
  _QWORD **v31;
  uint64_t v32;
  uint64_t v33;
  llvm::BasicBlock *v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  llvm::BasicBlock *v40;
  char *v41;
  char *v42;
  _QWORD **v43;
  uint64_t v44;
  _DWORD *v45;
  _QWORD **v46;
  _QWORD **v47;
  void *v48;
  unsigned int *v49;
  llvm::Type *v50;
  llvm::BasicBlock *v51;
  llvm::Constant *v52;
  llvm::ConstantFP *v53;
  unsigned int v54;
  llvm::Constant *Zero;
  llvm::Constant *v56;
  llvm::Constant *v57;
  uint64_t v58;
  llvm::Value **v59;
  int v60;
  uint64_t *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  _QWORD ***v73;
  int v74;
  int v75;
  char *v76;
  uint64_t v77;
  _QWORD ***v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  char **v86;
  char *v87;
  char **v88;
  int v89;
  BOOL v90;
  unsigned int v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  const llvm::APInt *v108;
  uint64_t *v109;
  uint64_t v110;
  llvm::Value *v111;
  llvm::ConstantInt *v112;
  unsigned int v113;
  char v114;
  char *v115;
  uint64_t v116;
  unsigned __int8 **v117;
  char *v118;
  unsigned __int8 **v119;
  llvm::Value *v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  char **v126;
  char *v127;
  char **v128;
  int v129;
  BOOL v130;
  unsigned int v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t i;
  uint64_t v136;
  int v137;
  char *v138;
  int v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t j;
  uint64_t v147;
  unsigned int v148;
  char *v149;
  int v150;
  unsigned int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  char *v161;
  unint64_t v162;
  _QWORD **v163;
  _QWORD *v164;
  uint64_t v165;
  int v166;
  uint64_t *v167;
  void *v168;
  const llvm::Value *v169;
  uint64_t v170;
  _QWORD ***v171;
  uint64_t v172;
  const llvm::DominatorTree *v173;
  unsigned int v174;
  llvm::APInt *v175;
  uint64_t k;
  unsigned int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  char *v182;
  uint64_t v183;
  _QWORD **v184;
  char *v185;
  void *v186;
  uint64_t v187;
  _QWORD *v188;
  _QWORD **v189;
  llvm::APInt *v190;
  unint64_t v191;
  uint64_t v192;
  int v193;
  char *v194;
  _QWORD **v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  char *v203;
  const llvm::SwitchInst *v204;
  int v205;
  uint64_t v206;
  uint8x8_t v207;
  __int32 v208;
  size_t v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint8x8_t v215;
  uint64_t *v216;
  uint64_t v217;
  int v218;
  int v219;
  int v220;
  char *v221;
  uint64_t v222;
  char v223;
  char *v224;
  char *v225;
  char *v226;
  void **v227;
  void **v228;
  _QWORD **v229;
  unint64_t v230;
  llvm::APInt *v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  llvm::DataLayout *v239;
  _QWORD *v240;
  unsigned int v241;
  llvm::ConstantInt ****v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  char *v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  _BOOL4 v252;
  llvm::APInt *v253;
  char v255;
  void *v256;
  void **v257;
  uint64_t v258;
  char *v259;
  void **v260;
  void **v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v266;
  int64_t v267;
  uint64_t v268;
  char *v269;
  llvm::BasicBlock *v270;
  uint64_t v271;
  _BOOL4 v272;
  _QWORD *v273;
  uint64_t v274;
  llvm::APInt *v275;
  llvm::APInt *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t *v282;
  llvm::Value *Select;
  llvm::Value **v284;
  int8x8_t v285;
  uint8x8_t v286;
  llvm::Value *v287;
  llvm::Value **v288;
  llvm::Value **v289;
  llvm::Value *v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unsigned int v295;
  unsigned int v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  uint64_t v308;
  unsigned int v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  uint64_t *v314;
  char *v315;
  llvm::BasicBlock *v316;
  uint64_t v317;
  uint64_t v318;
  BOOL v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  uint64_t v326;
  int v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  BOOL v332;
  char **v333;
  char *v334;
  uint64_t v335;
  uint64_t *v336;
  unsigned int v337;
  llvm::Value *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  unint64_t *v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  _BOOL4 v349;
  unint64_t v350;
  _QWORD *v351;
  uint64_t *v352;
  unint64_t v353;
  uint64_t v354;
  uint8x8_t v355;
  __int32 v356;
  unint64_t v357;
  int8x8_t *v358;
  int8x8_t v359;
  uint8x8_t v360;
  unsigned int v361;
  const llvm::APInt *v362;
  uint64_t v363;
  unint64_t v364;
  void *v365;
  llvm::Value **v366;
  llvm::Type *v367;
  llvm::Constant **v368;
  llvm::Value **NullValue;
  uint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  _QWORD *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  llvm::BasicBlock *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unsigned int v382;
  BOOL v383;
  unint64_t *v385;
  uint64_t v386;
  int v387;
  uint64_t v388;
  char v389;
  uint64_t v390;
  _QWORD **v391;
  int v392;
  char *v393;
  _QWORD **v394;
  uint64_t v395;
  llvm::BasicBlock *v396;
  _QWORD *v397;
  uint64_t m;
  uint64_t v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  _QWORD *v408;
  uint64_t v409;
  _QWORD **v410;
  int v411;
  uint64_t *v412;
  char *FirstNonPHIOrDbg;
  _QWORD *v414;
  char *v415;
  uint64_t v416;
  _QWORD *v418;
  unsigned int v419;
  uint64_t v421;
  uint64_t n;
  uint64_t v423;
  uint64_t v424;
  int v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unsigned int v431;
  char v432;
  llvm::APInt *v433;
  int v434;
  unint64_t v435;
  _QWORD *v436;
  _DWORD *v437;
  char *v438;
  unsigned int v439;
  char *v440;
  uint64_t v441;
  char *v442;
  uint64_t v443;
  char *v444;
  uint64_t v445;
  unsigned int *v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  uint64_t *v450;
  unsigned int v451;
  char *v452;
  uint64_t v453;
  char *v454;
  char *v455;
  uint64_t result;
  _QWORD *v457;
  llvm::DataLayout *v458;
  llvm::BasicBlock *v459;
  uint64_t ***v460;
  uint64_t **v461;
  uint64_t *v462;
  int v463;
  uint64_t v464;
  unsigned __int8 v465;
  unint64_t v466;
  unsigned int v467;
  int ii;
  unsigned int v469;
  uint64_t v470;
  _QWORD *v471;
  uint64_t v473;
  unsigned int v474;
  uint64_t v475;
  unsigned int v476;
  char *v477;
  unsigned int v478;
  _QWORD *v479;
  uint64_t v480;
  unsigned __int8 *v481;
  unsigned int v482;
  unsigned int v483;
  BOOL v484;
  char *v486;
  _QWORD *v487;
  uint64_t v488;
  int v489;
  unsigned int v490;
  unsigned int v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unsigned int v497;
  uint64_t v498;
  size_t v499;
  uint64_t v500;
  int v501;
  char *v502;
  _QWORD **v503;
  unsigned int v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  unint64_t *v508;
  int v509;
  char *v510;
  char *v511;
  uint64_t v512;
  char v513;
  uint64_t v514;
  unint64_t *v515;
  uint64_t v516;
  unint64_t v517;
  unint64_t v518;
  char *v519;
  llvm::BasicBlock **v520;
  unint64_t *v521;
  unint64_t *v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  uint64_t v527;
  _QWORD *v528;
  unsigned int v529;
  uint64_t v530;
  unint64_t *v531;
  unint64_t v532;
  unsigned int v533;
  unint64_t *v534;
  _QWORD **v535;
  _QWORD *v536;
  char *v537;
  int v538;
  int v539;
  uint64_t **v540;
  char **v541;
  llvm::APInt *v542;
  uint64_t v543;
  uint64_t v544;
  llvm::APInt *v545;
  llvm::APInt *v546;
  const llvm::APInt *v547;
  llvm::ConstantInt *v548;
  unsigned int v549;
  int v550;
  const llvm::APInt *v551;
  llvm::ValueHandleBase *v552;
  int v553;
  uint64_t *v554;
  uint64_t v555;
  llvm::ConstantInt *v556;
  unsigned int v557;
  unint64_t v558;
  llvm::ValueHandleBase *v559;
  llvm::ConstantInt **v560;
  _QWORD *v561;
  uint64_t v562;
  llvm::Value **v563;
  uint64_t v564;
  llvm::Value *v565;
  int v566;
  llvm::Value **v567;
  uint64_t v568;
  uint64_t ***v569;
  int v570;
  char *v571;
  uint64_t v572;
  _QWORD **v573;
  unint64_t v574;
  unint64_t v575;
  unint64_t v576;
  unint64_t v577;
  unsigned int v578;
  unint64_t v579;
  llvm::APInt *v580;
  unint64_t v581;
  char v582;
  uint64_t *v583;
  const llvm::APInt *v584;
  llvm::Value **v585;
  int v586;
  char *v587;
  llvm::Value ***v588;
  llvm::Value ****v589;
  llvm::Value *v590;
  llvm::Value *v591;
  char *v592;
  char v593;
  llvm::Value **v594;
  uint64_t v595;
  llvm::APInt *v596;
  uint64_t *v597;
  unint64_t v598;
  unint64_t v599;
  uint64_t v600;
  unint64_t v601;
  _BOOL4 v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t jj;
  uint64_t kk;
  uint64_t v607;
  uint64_t v608;
  int v609;
  char *v610;
  uint64_t v611;
  _QWORD *v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  char v616;
  _QWORD *v617;
  uint64_t v618;
  uint64_t v619;
  BOOL v620;
  char *v621;
  uint64_t v622;
  _BOOL4 v623;
  uint64_t *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t *v628;
  void *v629;
  uint64_t v630;
  uint64_t v631;
  _QWORD *v632;
  _QWORD *v633;
  unint64_t v634;
  uint64_t *v635;
  uint64_t v636;
  uint64_t v637;
  unsigned int v638;
  unsigned int v639;
  uint64_t v640;
  uint64_t v641;
  unsigned int v642;
  unsigned int v643;
  uint64_t v644;
  unint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  unint64_t v649;
  unint64_t v650;
  unint64_t v651;
  unint64_t v652;
  unint64_t v653;
  char v654;
  uint64_t *v655;
  uint64_t v656;
  void *v657;
  uint64_t v658;
  unint64_t v659;
  uint64_t v660;
  unint64_t v661;
  void *v662;
  uint64_t v663;
  unint64_t *v664;
  unint64_t v665;
  unint64_t *v666;
  unint64_t v667;
  unint64_t v668;
  unint64_t v669;
  _BOOL4 v670;
  unint64_t v671;
  unint64_t v672;
  int v673;
  char *v674;
  BOOL v675;
  char v676;
  void **v677;
  void **v678;
  void *v679;
  int *v680;
  int *v681;
  _QWORD *v682;
  unsigned int v683;
  int *v684;
  llvm::BasicBlock *v685;
  uint64_t v686;
  llvm::ConstantInt *v687;
  uint64_t v688;
  unsigned int v689;
  _QWORD *v690;
  uint64_t v691;
  uint64_t *v692;
  uint64_t *v693;
  uint64_t v694;
  void *v695;
  uint64_t v696;
  _QWORD **v697;
  int isNullValue;
  int v699;
  unsigned __int8 **v700;
  uint64_t v701;
  unsigned __int8 *v702;
  int *v703;
  int *v704;
  _BOOL4 v705;
  int v706;
  uint64_t v707;
  int8x8_t v708;
  unsigned int v709;
  BOOL v710;
  unsigned int v711;
  unint64_t v712;
  BOOL v713;
  unsigned int v714;
  unsigned int v715;
  uint8x8_t v716;
  uint64_t v718;
  unsigned __int8 *v719;
  uint64_t v720;
  unsigned int v721;
  uint64_t v723;
  unsigned int v724;
  unsigned __int8 *v725;
  uint64_t *v726;
  BOOL v727;
  unint64_t v728;
  unint64_t v729;
  llvm::Type **v730;
  uint64_t v731;
  const char *v732;
  int PrimitiveSizeInBits;
  uint64_t v734;
  int v735;
  char *v736;
  const llvm::APInt *v737;
  BOOL v738;
  int v739;
  llvm::ConstantInt *v740;
  unsigned int v741;
  unint64_t v742;
  llvm::ValueHandleBase *v743;
  llvm::Value *v744;
  int v745;
  char *v746;
  _QWORD *v747;
  llvm::Value *v748;
  llvm::ConstantInt *v749;
  uint64_t v750;
  uint64_t v751;
  unsigned int v752;
  uint64_t v753;
  uint64_t v754;
  unint64_t v755;
  unint64_t v756;
  unint64_t v757;
  unint64_t v758;
  int v759;
  unint64_t v760;
  _QWORD *v761;
  const llvm::APInt *v762;
  uint64_t v763;
  _QWORD *v764;
  uint64_t v765;
  unsigned int v766;
  const void *v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  void *v771;
  uint64_t v772;
  unint64_t *v773;
  unint64_t v774;
  unint64_t *v775;
  unint64_t v776;
  unint64_t v777;
  unint64_t v778;
  _BOOL4 v779;
  unint64_t v780;
  unsigned int v781;
  _QWORD *v782;
  uint64_t *v783;
  unint64_t v784;
  uint64_t v785;
  llvm::ValueHandleBase *v786;
  uint64_t v787;
  unsigned __int8 *v788;
  unsigned __int8 *v789;
  uint64_t v790;
  unsigned __int8 *v791;
  int v792;
  char *v793;
  uint64_t v794;
  uint64_t v795;
  unint64_t v796;
  unint64_t v797;
  char *v798;
  uint64_t *v799;
  unint64_t v800;
  int v801;
  char *v802;
  unint64_t v803;
  uint64_t v804;
  unint64_t v805;
  unint64_t v806;
  char *v807;
  uint64_t *v808;
  uint64_t v809;
  uint64_t *v810;
  __int128 v811;
  int v812;
  char *v813;
  int v814;
  char *v815;
  llvm::Value *v816;
  uint64_t v817;
  unint64_t v818;
  unint64_t *v819;
  unint64_t *v820;
  llvm::Constant ***v821;
  llvm::Constant **v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t ****v827;
  uint64_t ***v828;
  int v829;
  int v830;
  uint64_t ***v831;
  llvm::Constant **v832;
  llvm::Constant *v833;
  const llvm::APInt *v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t mm;
  _QWORD *v838;
  uint64_t v839;
  llvm::Constant **v840;
  uint64_t v841;
  unint64_t v842;
  void *v843;
  uint64_t v844;
  unint64_t *v845;
  unint64_t v846;
  unint64_t *v847;
  unint64_t v848;
  unint64_t v849;
  unint64_t v850;
  _BOOL4 v851;
  unint64_t v852;
  uint64_t *v853;
  llvm::Type *v854;
  llvm::Type *v855;
  int v856;
  unsigned int v857;
  unsigned int v858;
  char *v859;
  uint64_t *v860;
  unsigned int v861;
  uint64_t v862;
  BOOL v863;
  uint64_t v864;
  unint64_t v865;
  char *v866;
  size_t v867;
  uint64_t v868;
  _BOOL8 v869;
  unint64_t v870;
  unint64_t v871;
  unint64_t v872;
  unint64_t v873;
  _BOOL4 v874;
  unint64_t v875;
  _BOOL4 v876;
  unsigned int v877;
  uint64_t v878;
  unsigned int v879;
  unsigned __int8 *v880;
  llvm::PoisonValue *v881;
  llvm::PointerType *v882;
  llvm::Value **v883;
  _DWORD *v884;
  unsigned __int8 v885;
  char *v886;
  uint64_t v887;
  _QWORD *v888;
  uint64_t *v889;
  unint64_t v890;
  uint64_t v891;
  unint64_t v892;
  int v893;
  char *v894;
  uint64_t v895;
  unint64_t v896;
  unint64_t v897;
  char *v898;
  uint64_t v899;
  uint64_t v900;
  unint64_t v901;
  unint64_t v902;
  char *v903;
  uint64_t *v904;
  llvm::Value *v905;
  llvm::Value *v906;
  unint64_t v907;
  unint64_t *v908;
  _QWORD **v909;
  _QWORD *v910;
  uint64_t v911;
  int v912;
  char *v913;
  uint64_t v914;
  char v915;
  uint64_t v916;
  uint64_t v917;
  unint64_t v918;
  unint64_t v919;
  char *v920;
  llvm::BasicBlock **v921;
  unint64_t *v922;
  llvm::BasicBlock **v923;
  llvm::Value *v924;
  llvm::Value *v925;
  llvm::Value *v926;
  _QWORD **v927;
  uint64_t v928;
  unint64_t v929;
  uint64_t v930;
  llvm::Value *v931;
  llvm::Value *__p;
  llvm::ConstantInt **v933;
  unsigned __int8 *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  char *v938;
  char v939;
  llvm::Type *v940;
  int v941;
  uint64_t ***v942;
  uint64_t v943;
  unint64_t v944;
  llvm::Constant **v945;
  llvm::BasicBlock *v946;
  llvm::BasicBlock *v947;
  llvm::Value *v948;
  llvm::Value *v949;
  llvm::Value *v950;
  _QWORD *v951;
  unsigned int v952;
  uint64_t *v953;
  llvm::ConstantInt ***v954;
  llvm::Constant *v955;
  unsigned int v956;
  llvm::Constant *v957;
  uint64_t v958;
  uint64_t v959;
  int v960;
  void **v961;
  unint64_t **v962;
  uint64_t v963;
  uint64_t v964;
  unint64_t *v965;
  _QWORD *v966;
  _QWORD *v967;
  uint64_t v969;
  llvm::PHINode *v971;
  uint64_t **v972;
  unsigned int v973;
  llvm::BasicBlock *v974;
  void *__dst;
  unsigned int v976;
  char *v977;
  llvm::Value *v978;
  __int16 v979;
  void *v980;
  void *v981;
  uint64_t v982;
  _WORD v983[16];
  uint64_t v984;
  void *v985;
  uint64_t v986;
  _BYTE v987[32];
  void *__src;
  _QWORD *v989;
  unint64_t v990;
  unsigned int v991;
  void *v992;
  uint64_t v993;
  unsigned int v994[4];
  __int16 v995;
  char v996;
  char v997;
  llvm::APInt *v998[2];
  uint64_t v999;
  int v1000;
  __int16 v1001;
  uint64_t *v1002;
  void *__base[2];
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t *v1007;
  _BYTE v1008[24];
  _BYTE *v1009;
  unint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;

  v4 = (_QWORD **)a1;
  v1012 = *MEMORY[0x1E0C80C00];
  v5 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (sub_1C5F9E444(a1, (uint64_t)a2))
  {
    SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v5);
    if (SinglePredecessor && (sub_1C5F9E550((uint64_t)v4, (uint64_t)a2, SinglePredecessor, (uint64_t *)a3) & 1) != 0)
      goto LABEL_672;
    v7 = *((_DWORD *)a2 + 5);
    if ((v7 & 0x40000000) != 0)
      v8 = (uint64_t *)*((_QWORD *)a2 - 1);
    else
      v8 = (uint64_t *)&a2[-32 * (v7 & 0x7FFFFFF)];
    v9 = *v8;
    if (v9 && *(_BYTE *)(v9 + 16) == 85)
    {
      v10 = *(_BYTE *)(*(_QWORD *)(v9 - 64) + 16) == 16 ? *(_QWORD *)(v9 - 64) : 0;
      v11 = *(_BYTE *)(*(_QWORD *)(v9 - 32) + 16) == 16 ? *(_QWORD *)(v9 - 32) : 0;
      v12 = !v10 || v11 == 0;
      if (!v12)
      {
        v15 = *(llvm::Value **)(v9 - 96);
        sub_1C4E5D490((uint64_t)a2, v10);
        v17 = *((_DWORD *)a2 + 5);
        if ((v17 & 0x40000000) != 0)
          v18 = (char *)*((_QWORD *)a2 - 1);
        else
          v18 = &a2[-32 * (v17 & 0x7FFFFFF)];
        if (v16 == 4294967294)
          v72 = 1;
        else
          v72 = (2 * v16 + 3);
        v73 = *(_QWORD ****)&v18[32 * v72];
        sub_1C4E5D490((uint64_t)a2, v11);
        v75 = *((_DWORD *)a2 + 5);
        if ((v75 & 0x40000000) != 0)
          v76 = (char *)*((_QWORD *)a2 - 1);
        else
          v76 = &a2[-32 * (v75 & 0x7FFFFFF)];
        if (v74 == 4294967294)
          v77 = 1;
        else
          v77 = (2 * v74 + 3);
        v78 = *(_QWORD ****)&v76[32 * v77];
        __base[0] = &v1004;
        __base[1] = (void *)0x800000000;
        if ((v75 & 0x20000000) == 0)
          goto LABEL_112;
        v81 = ***(_QWORD ***)a2;
        v998[0] = (llvm::APInt *)a2;
        v82 = *(_DWORD *)(v81 + 2496);
        if (v82)
        {
          v83 = *(_QWORD *)(v81 + 2480);
          v84 = v82 - 1;
          v85 = v84 & ((a2 >> 4) ^ (a2 >> 9));
          v86 = (char **)(v83 + 40 * v85);
          v87 = *v86;
          if (*v86 == a2)
          {
LABEL_126:
            v92 = *((unsigned int *)v86 + 4);
            if ((_DWORD)v92)
            {
              v93 = v86[1] + 8;
              v94 = 16 * v92;
              while (*((_DWORD *)v93 - 2) != 2)
              {
                LODWORD(v79) = 0;
                LODWORD(v80) = 0;
                v93 += 2;
                v94 -= 16;
                if (!v94)
                  goto LABEL_113;
              }
              v322 = *v93;
              if (v322)
              {
                v323 = *(_QWORD *)(v322 - 8 * *(unsigned int *)(v322 + 8));
                if (v323)
                {
                  if (!*(_BYTE *)v323)
                  {
                    v324 = *(_QWORD **)(v323 + 8);
                    if (*v324 == 14)
                    {
                      v325 = v324[3];
                      v326 = *(_QWORD *)((char *)v324 + 30);
                      if (v325 == 0x775F68636E617262 && v326 == 0x737468676965775FLL)
                      {
                        sub_1C5FA40A4(a2, (uint64_t)__base);
                        if (LODWORD(__base[1]) == ((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF))
                        {
                          sub_1C4E5D490((uint64_t)a2, v10);
                          v329 = (v328 + 1);
                          if (v328 == -2)
                            v329 = 0;
                          v79 = *((_QWORD *)__base[0] + v329);
                          sub_1C4E5D490((uint64_t)a2, v11);
                          v331 = (v330 + 1);
                          if (v330 == -2)
                            v331 = 0;
                          v80 = *((_QWORD *)__base[0] + v331);
                          goto LABEL_113;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_112:
            LODWORD(v79) = 0;
            LODWORD(v80) = 0;
LABEL_113:
            sub_1C5FA5C68(a1, (uint64_t)a2, v15, v73, v78, v79, v80);
            if (__base[0] != &v1004)
              free(__base[0]);
            v4 = (_QWORD **)a1;
            goto LABEL_672;
          }
          v88 = 0;
          v89 = 1;
          while (v87 != (char *)-4096)
          {
            if (v88)
              v90 = 0;
            else
              v90 = v87 == (char *)-8192;
            if (v90)
              v88 = v86;
            v91 = v85 + v89++;
            v85 = v91 & v84;
            v86 = (char **)(v83 + 40 * v85);
            v87 = *v86;
            if (*v86 == a2)
              goto LABEL_126;
          }
          if (v88)
            v541 = v88;
          else
            v541 = v86;
        }
        else
        {
          v541 = 0;
        }
        v86 = (char **)sub_1C541AB24(v81 + 2480, (uint64_t)v998, (uint64_t *)v998, v541);
        v542 = v998[0];
        v86[3] = 0;
        v86[4] = 0;
        *v86 = (char *)v542;
        v86[1] = (char *)(v86 + 3);
        v86[2] = (char *)0x100000000;
        goto LABEL_126;
      }
    }
    llvm::BasicBlock::instructionsWithoutDebug(v5, 0, (uint64_t)__base);
    *(_OWORD *)v998 = *(_OWORD *)__base;
    if (v1007)
    {
      if (v1007 == &v1004)
      {
        v1002 = &v999;
        (*(void (**)(void))(*v1007 + 24))();
        v13 = v1002;
      }
      else
      {
        v13 = (uint64_t *)(*(uint64_t (**)(void))(*v1007 + 16))();
        v1002 = v13;
      }
      if (v998[0])
        v14 = (char *)v998[0] - 24;
      else
        v14 = 0;
      if (v13 == &v999)
      {
        (*(void (**)(uint64_t *))(v999 + 32))(&v999);
      }
      else if (v13)
      {
        (*(void (**)(uint64_t *))(*v13 + 40))(v13);
      }
    }
    else
    {
      v1002 = 0;
      if (__base[0])
        v14 = (char *)__base[0] - 24;
      else
        v14 = 0;
    }
    v19 = v1009;
    if (v1009 == v1008)
    {
      v20 = 4;
      v19 = v1008;
    }
    else
    {
      if (!v1009)
      {
LABEL_39:
        v21 = v1007;
        if (v1007 == &v1004)
        {
          v22 = 4;
          v21 = &v1004;
        }
        else
        {
          if (!v1007)
            goto LABEL_42;
          v22 = 5;
        }
        (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_42:
        if (v14 != a2)
          goto LABEL_44;
        sub_1C5F9F0E0((uint64_t)v4, (uint64_t)a2, (uint64_t *)a3);
        if ((v23 & 1) == 0)
          goto LABEL_44;
LABEL_672:
        result = 1;
        *((_BYTE *)v4 + 48) = 1;
        return result;
      }
      v20 = 5;
    }
    (*(void (**)(void))(*v19 + 8 * v20))();
    goto LABEL_39;
  }
LABEL_44:
  v24 = v4[5];
  if (*((_BYTE *)v24 + 5))
  {
    v25 = *((_DWORD *)a2 + 5);
    if ((v25 & 0x40000000) != 0)
      v26 = (char *)*((_QWORD *)a2 - 1);
    else
      v26 = &a2[-32 * (v25 & 0x7FFFFFF)];
    v27 = llvm::BasicBlock::getFirstNonPHIOrDbg(*((llvm::BasicBlock **)v26 + 4), 1)[16];
    v28 = *((_DWORD *)a2 + 5);
    if (v27 == 35)
    {
      v29 = 0;
    }
    else
    {
      if ((v28 & 0x40000000) != 0)
        v30 = (char *)*((_QWORD *)a2 - 1);
      else
        v30 = &a2[-32 * (v28 & 0x7FFFFFF)];
      v29 = (llvm::BasicBlock *)*((_QWORD *)v30 + 4);
    }
    v960 = v27;
    v31 = (_QWORD **)*((_QWORD *)a2 + 5);
    __base[0] = &v1004;
    __base[1] = (void *)0x1000000000;
    v998[0] = (llvm::APInt *)&v999;
    v998[1] = (llvm::APInt *)0x1000000000;
    v32 = ((v28 >> 1) & 0x3FFFFFF) - 1;
    if ((_DWORD)v32)
    {
      v33 = 0;
      v34 = 0;
      v35 = 2 * v32;
      do
      {
        v36 = *((_DWORD *)a2 + 5);
        if ((v36 & 0x40000000) != 0)
          v37 = (char *)*((_QWORD *)a2 - 1);
        else
          v37 = &a2[-32 * (v36 & 0x7FFFFFF)];
        v38 = (v33 + 3);
        if (v33 == 0x1FFFFFFFCLL)
          v38 = 1;
        v39 = 32 * v38;
        v40 = *(llvm::BasicBlock **)&v37[v39];
        if (!v29)
          v29 = *(llvm::BasicBlock **)&v37[v39];
        if (v40 == v29)
        {
          if ((v36 & 0x40000000) != 0)
            v42 = (char *)*((_QWORD *)a2 - 1);
          else
            v42 = &a2[-32 * (v36 & 0x7FFFFFF)];
          v43 = *(_QWORD ***)&v42[32 * (((_DWORD)v33 + 2) & 0xFFFFFFFE)];
          v44 = LODWORD(__base[1]);
          v45 = __base;
          if (LODWORD(__base[1]) >= (unint64_t)HIDWORD(__base[1]))
          {
            v47 = v31;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__base, (uint64_t)&v1004, LODWORD(__base[1]) + 1, 8);
            v31 = v47;
            v44 = LODWORD(__base[1]);
          }
        }
        else
        {
          if (v34 && v34 != v40)
          {
            v62 = 0;
            v4 = (_QWORD **)a1;
            goto LABEL_222;
          }
          if ((v36 & 0x40000000) != 0)
            v41 = (char *)*((_QWORD *)a2 - 1);
          else
            v41 = &a2[-32 * (v36 & 0x7FFFFFF)];
          v43 = *(_QWORD ***)&v41[32 * (((_DWORD)v33 + 2) & 0xFFFFFFFE)];
          v44 = LODWORD(v998[1]);
          v45 = v998;
          if (LODWORD(v998[1]) >= (unint64_t)HIDWORD(v998[1]))
          {
            v46 = v31;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v998, (uint64_t)&v999, LODWORD(v998[1]) + 1, 8);
            v31 = v46;
            v44 = LODWORD(v998[1]);
          }
          v34 = v40;
        }
        *(_QWORD *)(*(_QWORD *)v45 + 8 * v44) = v43;
        ++v45[2];
        v33 += 2;
      }
      while (v35 != v33);
      v48 = v31;
      v4 = (_QWORD **)a1;
      if (LODWORD(__base[1]))
      {
        v49 = (unsigned int *)__base;
        if ((sub_1C5FA670C((uint64_t)__base) & 1) != 0)
          goto LABEL_83;
      }
    }
    else
    {
      v48 = v31;
      v34 = 0;
      v4 = (_QWORD **)a1;
    }
    v51 = v29;
    v49 = (unsigned int *)v998;
    v29 = v34;
    v34 = v51;
    if (!sub_1C5FA670C((uint64_t)v998))
    {
      v62 = 0;
LABEL_222:
      if ((uint64_t *)v998[0] != &v999)
        free(v998[0]);
      if (__base[0] != &v1004)
        free(__base[0]);
      if ((v62 & 1) != 0)
        goto LABEL_672;
      v24 = v4[5];
      goto LABEL_228;
    }
LABEL_83:
    v52 = *(llvm::Constant **)(*(_QWORD *)v49 + 8 * v49[2] - 8);
    v53 = *(llvm::ConstantFP **)v52;
    if ((*(_DWORD *)(*(_QWORD *)v52 + 8) & 0xFE) == 0x12)
      v54 = *(unsigned __int8 *)(**((_QWORD **)v53 + 2) + 8);
    else
      v54 = *(_DWORD *)(*(_QWORD *)v52 + 8);
    if (v54 <= 6)
      Zero = llvm::ConstantFP::getZero(v53, (llvm::Type *)1);
    else
      Zero = (llvm::Constant *)llvm::Constant::getNullValue(v53, v50);
    v57 = Zero;
    v58 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)0xF, Zero, v52, v56);
    if (!v58)
    {
      v927 = *(_QWORD ***)v57;
      if (*(_QWORD *)v57)
      {
        v992 = v57;
        v993 = (uint64_t)v52;
        v928 = **v927 + 1512;
        LODWORD(v980) = 15;
        v981 = &v992;
        v982 = 2;
        memset(v983, 0, sizeof(v983));
        v984 = 0;
        v58 = sub_1C537D4FC(v928, (uint64_t)v927, (unsigned __int8 *)&v980);
      }
      else
      {
        v58 = 0;
      }
    }
    v59 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v58, v49[2], 0);
    v60 = *((_DWORD *)a2 + 5);
    if ((v60 & 0x40000000) != 0)
      v61 = (uint64_t *)*((_QWORD *)a2 - 1);
    else
      v61 = (uint64_t *)&a2[-32 * (v60 & 0x7FFFFFF)];
    v63 = *v61;
    if ((llvm::Constant::isNullValue((llvm::Constant *)v58) & 1) != 0)
    {
LABEL_141:
      if (llvm::Constant::isNullValue((llvm::Constant *)v59) && v49[2])
      {
        v109 = **(uint64_t ***)a2;
        v110 = *v109;
        v111 = *(llvm::Value **)(*v109 + 1560);
        if (!v111)
        {
          v112 = *(llvm::ConstantInt **)(v110 + 1888);
          v113 = *(_DWORD *)(v110 + 1896);
          LODWORD(v981) = v113 >> 8;
          if (v113 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v980, 1, 0);
          }
          else
          {
            if (v113 <= 0xFF)
              v114 = 0;
            else
              v114 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v113);
            v980 = (void *)(v114 & 1);
          }
          v111 = llvm::ConstantInt::get(v112, (llvm::LLVMContext *)&v980, v108);
          if (v981 >= 0x41 && v980)
            MEMORY[0x1CAA32F9C](v980, 0x1000C8000313F17);
          *(_QWORD *)(v110 + 1560) = v111;
        }
      }
      else
      {
        v980 = "switch";
        v983[4] = 259;
        v111 = (llvm::Value *)sub_1C4774B48(a3, 36, v63, (uint64_t)v59, (uint64_t)&v980);
      }
      v115 = (char *)operator new(0xA0uLL);
      v116 = 0;
      v117 = (unsigned __int8 **)(v115 + 96);
      *((_DWORD *)v115 + 29) = *((_DWORD *)v115 + 29) & 0x38000000 | 3;
      do
      {
        v118 = &v115[v116];
        *(_QWORD *)v118 = 0;
        *((_QWORD *)v118 + 1) = 0;
        *((_QWORD *)v118 + 2) = 0;
        *((_QWORD *)v118 + 3) = v117;
        v116 += 32;
      }
      while (v116 != 96);
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v115 + 96), v29, v34, v111, 0);
      v983[4] = 257;
      v119 = sub_1C4867F8C((uint64_t *)a3, v117, (uint64_t)&v980);
      if ((a2[23] & 0x20) == 0)
      {
LABEL_169:
        for (i = *((_QWORD *)v29 + 6); ; i = *(_QWORD *)(i + 8))
        {
          v136 = i ? i - 24 : 0;
          if (*(_BYTE *)(v136 + 16) != 83)
            break;
          v137 = *((_DWORD *)a2 + 5);
          if ((v137 & 0x40000000) != 0)
            v138 = (char *)*((_QWORD *)a2 - 1);
          else
            v138 = &a2[-32 * (v137 & 0x7FFFFFF)];
          if (v29 == *((llvm::BasicBlock **)v138 + 4))
            v139 = v49[2] + 1;
          else
            v139 = v49[2];
          v140 = v139 - 1;
          if (v139 != 1)
          {
            v141 = 0;
            do
            {
              v142 = *(_DWORD *)(i - 4);
              v143 = v142 & 0x7FFFFFF;
              if ((v142 & 0x7FFFFFF) != 0)
              {
                v144 = 0;
                while (1)
                {
                  v145 = i - 24 - 32 * v143;
                  if ((v142 & 0x40000000) != 0)
                    v145 = *(_QWORD *)(i - 32);
                  if (*(_QWORD *)(v145 + 32 * *(unsigned int *)(i + 36) + 8 * v144) == *((_QWORD *)a2 + 5))
                    break;
                  if (v143 == ++v144)
                    goto LABEL_188;
                }
              }
              else
              {
LABEL_188:
                LODWORD(v144) = -1;
              }
              llvm::PHINode::removeIncomingValue((llvm::PHINode *)(i - 24), v144, 1);
              ++v141;
            }
            while (v141 != v140);
          }
        }
        for (j = *((_QWORD *)v34 + 6); ; j = *(_QWORD *)(j + 8))
        {
          v147 = j ? j - 24 : 0;
          if (*(_BYTE *)(v147 + 16) != 83)
            break;
          v148 = *((_DWORD *)a2 + 5);
          if ((v148 & 0x40000000) != 0)
            v149 = (char *)*((_QWORD *)a2 - 1);
          else
            v149 = &a2[-32 * (v148 & 0x7FFFFFF)];
          v150 = (v148 >> 1) & 0x3FFFFFF;
          v151 = v49[2];
          if (v34 == *((llvm::BasicBlock **)v149 + 4))
            v152 = -v151;
          else
            v152 = ~v151;
          v153 = v150 + v152;
          v154 = v153 - 1;
          if (v153 != 1)
          {
            v155 = 0;
            do
            {
              v156 = *(_DWORD *)(j - 4);
              v157 = v156 & 0x7FFFFFF;
              if ((v156 & 0x7FFFFFF) != 0)
              {
                v158 = 0;
                while (1)
                {
                  v159 = j - 24 - 32 * v157;
                  if ((v156 & 0x40000000) != 0)
                    v159 = *(_QWORD *)(j - 32);
                  if (*(_QWORD *)(v159 + 32 * *(unsigned int *)(j + 36) + 8 * v158) == *((_QWORD *)a2 + 5))
                    break;
                  if (v157 == ++v158)
                    goto LABEL_210;
                }
              }
              else
              {
LABEL_210:
                LODWORD(v158) = -1;
              }
              llvm::PHINode::removeIncomingValue((llvm::PHINode *)(j - 24), v158, 1);
              ++v155;
            }
            while (v155 != v154);
          }
        }
        v4 = (_QWORD **)a1;
        if (v960 == 35)
          sub_1C5FA6894((uint64_t)a2, *(_QWORD *)(a1 + 8));
        v160 = *((_DWORD *)a2 + 5);
        if ((v160 & 0x40000000) != 0)
          v161 = (char *)*((_QWORD *)a2 - 1);
        else
          v161 = &a2[-32 * (v160 & 0x7FFFFFF)];
        v162 = *((_QWORD *)v161 + 4);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)a2 + 5) + 40, (uint64_t ***)a2);
        v163 = (_QWORD **)*((_QWORD *)a2 + 3);
        v164 = (_QWORD *)*((_QWORD *)a2 + 4);
        *v164 = v163;
        v163[1] = v164;
        *((_QWORD *)a2 + 3) = 0;
        *((_QWORD *)a2 + 4) = 0;
        llvm::Value::deleteValue((llvm::Value *)a2);
        if (v960 == 35 && (v165 = *(_QWORD *)(a1 + 8)) != 0)
        {
          v980 = v48;
          v981 = (void *)(v162 | 4);
          v62 = 1;
          llvm::DomTreeUpdater::applyUpdates(v165, (unint64_t *)&v980, 1);
        }
        else
        {
          v62 = 1;
        }
        goto LABEL_222;
      }
      v120 = (llvm::Value *)v119;
      v121 = ***(_QWORD ***)a2;
      v980 = a2;
      v122 = *(_DWORD *)(v121 + 2496);
      if (v122)
      {
        v123 = *(_QWORD *)(v121 + 2480);
        v124 = v122 - 1;
        v125 = v124 & ((a2 >> 4) ^ (a2 >> 9));
        v126 = (char **)(v123 + 40 * v125);
        v127 = *v126;
        if (*v126 == a2)
          goto LABEL_165;
        v128 = 0;
        v129 = 1;
        while (v127 != (char *)-4096)
        {
          if (v128)
            v130 = 0;
          else
            v130 = v127 == (char *)-8192;
          if (v130)
            v128 = v126;
          v131 = v125 + v129++;
          v125 = v131 & v124;
          v126 = (char **)(v123 + 40 * v125);
          v127 = *v126;
          if (*v126 == a2)
            goto LABEL_165;
        }
        if (v128)
          v333 = v128;
        else
          v333 = v126;
      }
      else
      {
        v333 = 0;
      }
      v126 = (char **)sub_1C541AB24(v121 + 2480, (uint64_t)&v980, (uint64_t *)&v980, v333);
      v334 = (char *)v980;
      v126[3] = 0;
      v126[4] = 0;
      *v126 = v334;
      v126[1] = (char *)(v126 + 3);
      v126[2] = (char *)0x100000000;
LABEL_165:
      v132 = *((unsigned int *)v126 + 4);
      if ((_DWORD)v132)
      {
        v133 = v126[1] + 8;
        v134 = 16 * v132;
        while (*((_DWORD *)v133 - 2) != 2)
        {
          v133 += 2;
          v134 -= 16;
          if (!v134)
            goto LABEL_169;
        }
        v304 = *v133;
        if (v304)
        {
          v305 = *(_QWORD *)(v304 - 8 * *(unsigned int *)(v304 + 8));
          if (v305)
          {
            if (!*(_BYTE *)v305)
            {
              v306 = *(_QWORD **)(v305 + 8);
              if (*v306 == 14)
              {
                v307 = v306[3];
                v308 = *(_QWORD *)((char *)v306 + 30);
                if (v307 == 0x775F68636E617262 && v308 == 0x737468676965775FLL)
                {
                  v980 = &v982;
                  v981 = (void *)0x800000000;
                  sub_1C5FA40A4(a2, (uint64_t)&v980);
                  v310 = *((_DWORD *)a2 + 5);
                  if ((_DWORD)v981 == ((v310 >> 1) & 0x3FFFFFF))
                  {
                    if ((_DWORD)v981)
                    {
                      v311 = 0;
                      v312 = 0;
                      v313 = 0;
                      v314 = (uint64_t *)v980;
                      do
                      {
                        v315 = &a2[-32 * (v310 & 0x7FFFFFF)];
                        if ((v310 & 0x40000000) != 0)
                          v315 = (char *)*((_QWORD *)a2 - 1);
                        v316 = *(llvm::BasicBlock **)&v315[32 * (v311 & 0xFFFFFFFE) + 32];
                        v318 = *v314++;
                        v317 = v318;
                        v319 = v316 == v29;
                        if (v316 == v29)
                          v320 = v317;
                        else
                          v320 = 0;
                        v313 += v320;
                        if (v319)
                          v321 = 0;
                        else
                          v321 = v317;
                        v312 += v321;
                        v311 += 2;
                      }
                      while (2 * v981 != v311);
                    }
                    else
                    {
                      v313 = 0;
                      v312 = 0;
                    }
                    if (HIDWORD(v313))
                      v727 = 0;
                    else
                      v727 = HIDWORD(v312) == 0;
                    if (!v727)
                    {
                      do
                      {
                        do
                        {
                          v728 = v313 >> 33;
                          v729 = v312;
                          v313 >>= 1;
                          v312 >>= 1;
                        }
                        while (v728);
                      }
                      while (v729 >> 33);
                    }
                    sub_1C5F91118(v120, v313, v312);
                  }
                  if (v980 != &v982)
                    free(v980);
                }
              }
            }
          }
        }
      }
      goto LABEL_169;
    }
    if ((*(_BYTE *)(v63 + 23) & 0x10) == 0)
    {
      v97 = 0;
      v96 = &byte_1C871356D;
      goto LABEL_133;
    }
    v64 = ***(_QWORD ***)v63;
    v65 = *(_QWORD *)(v64 + 152);
    v66 = *(unsigned int *)(v64 + 168);
    if ((_DWORD)v66)
    {
      LODWORD(v67) = (v66 - 1) & ((v63 >> 4) ^ (v63 >> 9));
      v68 = (uint64_t *)(v65 + 16 * v67);
      v69 = *v68;
      if (*v68 == v63)
      {
LABEL_132:
        v95 = (_QWORD *)v68[1];
        v98 = *v95;
        v96 = (char *)(v95 + 2);
        v97 = v98;
LABEL_133:
        v995 = 773;
        v992 = v96;
        v993 = v97;
        *(_QWORD *)v994 = ".off";
        v99 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a3 + 72) + 16))(*(_QWORD *)(a3 + 72), v63, v58, 0, 0);
        if (!v99)
        {
          v983[4] = 257;
          v100 = (char *)operator new(0x80uLL);
          *(_QWORD *)v100 = 0;
          *((_QWORD *)v100 + 2) = 0;
          *((_QWORD *)v100 + 1) = 0;
          *((_QWORD *)v100 + 5) = 0;
          *((_QWORD *)v100 + 6) = 0;
          *((_QWORD *)v100 + 4) = 0;
          *((_QWORD *)v100 + 8) = *(_QWORD *)v63;
          v101 = (uint64_t)(v100 + 64);
          *((_QWORD *)v100 + 3) = v100 + 64;
          *((_QWORD *)v100 + 7) = v100 + 64;
          *((_QWORD *)v100 + 9) = 0;
          v100[80] = 41;
          v100[81] = 0;
          *((_WORD *)v100 + 41) = 0;
          *((_DWORD *)v100 + 21) = 2;
          *((_DWORD *)v100 + 30) = 0;
          *(_OWORD *)(v100 + 104) = 0u;
          *(_OWORD *)(v100 + 88) = 0u;
          *(_QWORD *)v100 = v63;
          v104 = *(_QWORD *)(v63 + 8);
          v103 = (_QWORD *)(v63 + 8);
          v102 = v104;
          *((_QWORD *)v100 + 1) = v104;
          if (v104)
            *(_QWORD *)(v102 + 16) = v100 + 8;
          *((_QWORD *)v100 + 2) = v103;
          *v103 = v100;
          if (*((_QWORD *)v100 + 4))
          {
            **((_QWORD **)v100 + 6) = *((_QWORD *)v100 + 5);
            v930 = *((_QWORD *)v100 + 5);
            if (v930)
              *(_QWORD *)(v930 + 16) = *((_QWORD *)v100 + 6);
          }
          *((_QWORD *)v100 + 4) = v58;
          v107 = *(_QWORD *)(v58 + 8);
          v106 = (_QWORD *)(v58 + 8);
          v105 = v107;
          *((_QWORD *)v100 + 5) = v107;
          if (v107)
            *(_QWORD *)(v105 + 16) = v100 + 40;
          *((_QWORD *)v100 + 6) = v106;
          *v106 = v100 + 32;
          llvm::Value::setName((uint64_t ***)v100 + 8, (uint64_t)&v980);
          v99 = sub_1C4773754((uint64_t *)a3, v101, (uint64_t)&v992);
        }
        v63 = v99;
        goto LABEL_141;
      }
      v70 = 1;
      while (v69 != -4096)
      {
        v71 = v67 + v70++;
        v67 = v71 & (v66 - 1);
        v69 = *(_QWORD *)(v65 + 16 * v67);
        if (v69 == v63)
        {
          v68 = (uint64_t *)(v65 + 16 * v67);
          goto LABEL_132;
        }
      }
    }
    v68 = (uint64_t *)(v65 + 16 * v66);
    goto LABEL_132;
  }
LABEL_228:
  v166 = *((_DWORD *)a2 + 5);
  if ((v166 & 0x40000000) != 0)
    v167 = (uint64_t *)*((_QWORD *)a2 - 1);
  else
    v167 = (uint64_t *)&a2[-32 * (v166 & 0x7FFFFFF)];
  v168 = (void *)v24[2];
  v169 = (const llvm::Value *)v4[2];
  v170 = *v167;
  v171 = (_QWORD ***)a2;
  if (!*((_QWORD *)a2 + 5))
  {
    v332 = v170 && *(unsigned __int8 *)(v170 + 16) >= 0x1Cu;
    if (!v332 || (v171 = (_QWORD ***)*v167, !*(_QWORD *)(v170 + 40)))
      v171 = 0;
  }
  v172 = (uint64_t)v4[1];
  __base[0] = v4[2];
  __base[1] = v168;
  v1006 = 0;
  v1004 = (uint64_t)v171;
  v1005 = 0;
  LOBYTE(v1007) = 1;
  sub_1C4F83784(v170, 0, (uint64_t *)__base, &__src);
  v174 = llvm::ComputeMaxSignificantBits((llvm *)v170, v169, 0, (uint64_t)v168, (llvm::AssumptionCache *)a2, 0, v173);
  v175 = (llvm::APInt *)&v999;
  v998[0] = (llvm::APInt *)&v999;
  v998[1] = (llvm::APInt *)0x800000000;
  __base[0] = (void *)1;
  for (k = 1; k != 17; k += 2)
    __base[k] = (void *)-4096;
  v980 = &v982;
  v981 = (void *)0x800000000;
  v177 = *((_DWORD *)a2 + 5);
  v178 = (v177 >> 1) & 0x3FFFFFF;
  v179 = (v178 - 1);
  if (v178 != 1)
  {
    v180 = 0;
    while (1)
    {
      v985 = 0;
      v181 = *((_DWORD *)a2 + 5);
      if ((v181 & 0x40000000) != 0)
        v182 = (char *)*((_QWORD *)a2 - 1);
      else
        v182 = &a2[-32 * (v181 & 0x7FFFFFF)];
      v183 = (2 * v180 + 3);
      if (v180 == 4294967294)
        v183 = 1;
      v184 = *(_QWORD ***)&v182[32 * v183];
      v985 = v184;
      if (v172)
      {
        if ((sub_1C617D1A8((uint64_t)__base, (uint64_t)v184, &v992) & 1) == 0)
        {
          v186 = v985;
          v187 = v981;
          if (v981 >= (unint64_t)HIDWORD(v981))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v980, (uint64_t)&v982, v981 + 1, 8);
            v187 = v981;
          }
          *((_QWORD *)v980 + v187) = v186;
          LODWORD(v981) = (_DWORD)v981 + 1;
        }
        v188 = sub_1C63AED90(__base, &v985);
        ++*((_DWORD *)v188 + 2);
        v181 = *((_DWORD *)a2 + 5);
        if ((v181 & 0x40000000) == 0)
        {
LABEL_243:
          v185 = &a2[-32 * (v181 & 0x7FFFFFF)];
          goto LABEL_250;
        }
      }
      else if ((v181 & 0x40000000) == 0)
      {
        goto LABEL_243;
      }
      v185 = (char *)*((_QWORD *)a2 - 1);
LABEL_250:
      v189 = *(_QWORD ***)&v185[32 * ((2 * (_DWORD)v180 + 2) & 0xFFFFFFFE)];
      v190 = (llvm::APInt *)(v189 + 3);
      if (v989 > 0x40)
      {
        v192 = 0;
        v191 = *(_QWORD *)v190;
        while ((*(_QWORD *)(v191 + v192) & *(_QWORD *)((_BYTE *)__src + v192)) == 0)
        {
          v192 += 8;
          if (((((unint64_t)v989 + 63) >> 3) & 0x3FFFFFF8) == v192)
            goto LABEL_256;
        }
        goto LABEL_260;
      }
      v191 = *(_QWORD *)v190;
      if ((*(_QWORD *)v190 & (unint64_t)__src) != 0)
        goto LABEL_260;
LABEL_256:
      if (v991 > 0x40)
      {
        v197 = ((unint64_t)v991 + 63) >> 6;
        v198 = (uint64_t *)v990;
        while (1)
        {
          v200 = *v198++;
          v199 = v200;
          v201 = *(_QWORD *)v191;
          v191 += 8;
          if ((v199 & ~v201) != 0)
            goto LABEL_260;
          if (!--v197)
            goto LABEL_258;
        }
      }
      if ((v990 & ~v191) != 0)
        goto LABEL_260;
LABEL_258:
      v193 = *((_DWORD *)v189 + 8);
      if (v193 - sub_1C4959174(v190) + 1 > v174)
      {
        v181 = *((_DWORD *)a2 + 5);
LABEL_260:
        if ((v181 & 0x40000000) != 0)
          v194 = (char *)*((_QWORD *)a2 - 1);
        else
          v194 = &a2[-32 * (v181 & 0x7FFFFFF)];
        v195 = *(_QWORD ***)&v194[32 * ((2 * (_DWORD)v180 + 2) & 0xFFFFFFFE)];
        v196 = LODWORD(v998[1]);
        if (LODWORD(v998[1]) >= (unint64_t)HIDWORD(v998[1]))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v998, (uint64_t)&v999, LODWORD(v998[1]) + 1, 8);
          v196 = LODWORD(v998[1]);
        }
        *((_QWORD *)v998[0] + v196) = v195;
        ++LODWORD(v998[1]);
        if (v172)
        {
          v202 = sub_1C63AED90(__base, &v985);
          --*((_DWORD *)v202 + 2);
        }
      }
      if (++v180 == v179)
      {
        v177 = *((_DWORD *)a2 + 5);
        break;
      }
    }
  }
  if ((v177 & 0x40000000) != 0)
    v203 = (char *)*((_QWORD *)a2 - 1);
  else
    v203 = &a2[-32 * (v177 & 0x7FFFFFF)];
  v205 = llvm::BasicBlock::getFirstNonPHIOrDbg(*((llvm::BasicBlock **)v203 + 4), 1)[16];
  v206 = v989;
  if (v989 >= 0x41)
  {
    v209 = (((unint64_t)v989 + 63) >> 3) & 0x3FFFFFF8;
    v210 = (char *)operator new[]();
    memcpy(v210, __src, v209);
    v211 = 0;
    v212 = v990;
    v213 = 8 * ((unint64_t)(v206 + 63) >> 6);
    do
    {
      *(_QWORD *)&v210[v211] |= *(_QWORD *)(v212 + v211);
      v211 += 8;
    }
    while (v213 != v211);
    v214 = 0;
    v208 = 0;
    do
    {
      v215 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v210[v214]);
      v215.i16[0] = vaddlv_u8(v215);
      v208 += v215.i32[0];
      v214 += 8;
    }
    while (v213 != v214);
    MEMORY[0x1CAA32F9C](v210, 0x1000C8000313F17);
  }
  else
  {
    v207 = (uint8x8_t)vcnt_s8((int8x8_t)(v990 | (unint64_t)__src));
    v207.i16[0] = vaddlv_u8(v207);
    v208 = v207.i32[0];
  }
  if (v205 == 35 || LODWORD(v998[1]) || (v206 - v208) > 0x3F)
  {
    if (LODWORD(v998[1]))
    {
      v992 = a2;
      LOBYTE(v993) = 0;
      v996 = 0;
      v997 = 0;
      llvm::SwitchInstProfUpdateWrapper::init((llvm::SwitchInstProfUpdateWrapper **)&v992, v204);
      if (LODWORD(v998[1]))
      {
        v216 = (uint64_t *)v998[0];
        v217 = 8 * LODWORD(v998[1]);
        do
        {
          sub_1C4E5D490((uint64_t)a2, *v216);
          v219 = v218;
          v220 = *((_DWORD *)a2 + 5);
          if ((v220 & 0x40000000) != 0)
            v221 = (char *)*((_QWORD *)a2 - 1);
          else
            v221 = &a2[-32 * (v220 & 0x7FFFFFF)];
          v222 = (2 * v218 + 3);
          if (v218 == 4294967294)
            v222 = 1;
          llvm::BasicBlock::removePredecessor(*(llvm::BasicBlock **)&v221[32 * v222], *((llvm::BasicBlock **)a2 + 5), 0);
          if (v996)
          {
            v997 = 1;
            *(_DWORD *)(v993 + 4 * (v219 + 1)) = *(_DWORD *)(v993 + 4 * v994[0]-- - 4);
          }
          llvm::SwitchInst::removeCase((uint64_t)v992, (uint64_t)a2, v219);
          ++v216;
          v217 -= 8;
        }
        while (v217);
      }
      if (v172)
      {
        if ((_DWORD)v981)
        {
          v224 = 0;
          v225 = 0;
          v226 = 0;
          v227 = (void **)v980;
          v228 = (void **)((char *)v980 + 8 * v981);
          do
          {
            v985 = 0;
            v985 = *v227;
            if (!*((_DWORD *)sub_1C63AED90(__base, &v985) + 2))
            {
              v229 = (_QWORD **)*((_QWORD *)a2 + 5);
              v230 = (unint64_t)v985 | 4;
              if (v225 >= v226)
              {
                v961 = v228;
                v231 = v175;
                v232 = (v225 - v224) >> 4;
                v233 = v232 + 1;
                if ((unint64_t)(v232 + 1) >> 60)
                  goto LABEL_1427;
                if ((v226 - v224) >> 3 > v233)
                  v233 = (v226 - v224) >> 3;
                if ((unint64_t)(v226 - v224) >= 0x7FFFFFFFFFFFFFF0)
                  v234 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v234 = v233;
                if (v234)
                {
                  if (v234 >> 60)
                    goto LABEL_1429;
                  v235 = (char *)operator new(16 * v234);
                }
                else
                {
                  v235 = 0;
                }
                v236 = &v235[16 * v232];
                *(_QWORD *)v236 = v229;
                *((_QWORD *)v236 + 1) = v230;
                if (v225 == v224)
                {
                  v238 = &v235[16 * v232];
                  v175 = v231;
                }
                else
                {
                  v237 = &v235[16 * v232];
                  v175 = v231;
                  do
                  {
                    v238 = v237 - 16;
                    *((_OWORD *)v237 - 1) = *((_OWORD *)v225 - 1);
                    v225 -= 16;
                    v237 -= 16;
                  }
                  while (v225 != v224);
                }
                v226 = &v235[16 * v234];
                v225 = v236 + 16;
                v228 = v961;
                if (v224)
                  operator delete(v224);
                v224 = v238;
              }
              else
              {
                *(_QWORD *)v225 = v229;
                *((_QWORD *)v225 + 1) = v230;
                v225 += 16;
              }
            }
            ++v227;
          }
          while (v227 != v228);
        }
        else
        {
          v225 = 0;
          v224 = 0;
        }
        llvm::DomTreeUpdater::applyUpdates(v172, (unint64_t *)v224, (v225 - v224) >> 4);
        if (v224)
          operator delete(v224);
      }
      sub_1C5AE380C((uint64_t)&v992);
      v223 = 1;
    }
    else
    {
      v223 = 0;
    }
    v4 = (_QWORD **)a1;
  }
  else
  {
    v4 = (_QWORD **)a1;
    if (1 << (v206 - v208) == ((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF) - 1)
    {
      sub_1C5FA6894((uint64_t)a2, v172);
      v223 = 1;
    }
    else
    {
      v223 = 0;
    }
  }
  if (v980 != &v982)
    free(v980);
  if (((uint64_t)__base[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](__base[1], 8);
  if (v998[0] != v175)
    free(v998[0]);
  if (v991 >= 0x41 && v990)
    MEMORY[0x1CAA32F9C](v990, 0x1000C8000313F17);
  if (v989 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if ((v223 & 1) != 0)
    goto LABEL_672;
  v239 = (llvm::DataLayout *)v4[2];
  v240 = *v4;
  v241 = *((_DWORD *)a2 + 5);
  if ((v241 & 0x40000000) != 0)
    v242 = (llvm::ConstantInt ****)*((_QWORD *)a2 - 1);
  else
    v242 = (llvm::ConstantInt ****)&a2[-32 * (v241 & 0x7FFFFFF)];
  v243 = *(_QWORD *)(a1 + 8);
  v954 = *v242;
  v985 = 0;
  __base[0] = &v1004;
  __base[1] = (void *)0x200000000;
  v244 = (v241 >> 1) & 0x3FFFFFF;
  v245 = (v244 - 1);
  v958 = v243;
  if (v244 != 1)
  {
    v246 = 0;
    v963 = 0;
    while (1)
    {
      v247 = *((_DWORD *)a2 + 5);
      if ((v247 & 0x40000000) != 0)
        v248 = (char *)*((_QWORD *)a2 - 1);
      else
        v248 = &a2[-32 * (v247 & 0x7FFFFFF)];
      v249 = *(_QWORD *)&v248[32 * (2 * v246 + 2)];
      v998[0] = (llvm::APInt *)&v999;
      v998[1] = (llvm::APInt *)0x400000000;
      if ((v247 & 0x40000000) != 0)
        v250 = (char *)*((_QWORD *)a2 - 1);
      else
        v250 = &a2[-32 * (v247 & 0x7FFFFFF)];
      v251 = (2 * v246 + 3);
      if (v246 == 4294967294)
        v251 = 1;
      v252 = sub_1C5FA6D20((uint64_t)a2, v249, *(llvm::BasicBlock **)&v250[32 * v251], (llvm::BasicBlock **)&v985, (uint64_t)v998, v239, v240);
      v253 = v998[0];
      if (v252 && LODWORD(v998[1]) <= 1)
      {
        v256 = (void *)*((_QWORD *)v998[0] + 1);
        if (LODWORD(__base[1]))
        {
          v257 = (void **)((char *)__base[0] + 24);
          v258 = 56 * LODWORD(__base[1]);
          while (*(v257 - 3) != v256)
          {
            v257 += 7;
            v258 -= 56;
            if (!v258)
              goto LABEL_365;
          }
          v264 = *((unsigned int *)v257 - 2);
          if (v264 >= *((unsigned int *)v257 - 1))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v257 - 2), (uint64_t)v257, v264 + 1, 8);
            v264 = *((unsigned int *)v257 - 2);
          }
          *((_QWORD *)*(v257 - 2) + v264) = v249;
          v263 = (*((_DWORD *)v257 - 2) + 1);
          *((_DWORD *)v257 - 2) = v263;
        }
        else
        {
LABEL_365:
          v992 = v994;
          *(_QWORD *)v994 = v249;
          v993 = 0x400000001;
          v980 = v256;
          v981 = v983;
          v982 = 0x400000000;
          sub_1C4FCE718((uint64_t)&v981, (uint64_t)&v992);
          v259 = (char *)__base[0];
          if (LODWORD(__base[1]) >= HIDWORD(__base[1]))
          {
            v266 = LODWORD(__base[1]) + 1;
            if (__base[0] <= &v980 && (char *)__base[0] + 56 * LODWORD(__base[1]) > (char *)&v980)
            {
              v267 = (char *)&v980 - (char *)__base[0];
              sub_1C5FA79E4((uint64_t)__base, v266);
              v259 = (char *)__base[0];
              v260 = (void **)((char *)__base[0] + v267);
            }
            else
            {
              sub_1C5FA79E4((uint64_t)__base, v266);
              v260 = &v980;
              v259 = (char *)__base[0];
            }
          }
          else
          {
            v260 = &v980;
          }
          v261 = (void **)&v259[56 * LODWORD(__base[1])];
          *v261 = *v260;
          v261[2] = (void *)0x400000000;
          v261[1] = v261 + 3;
          v262 = (uint64_t)(v261 + 1);
          if (*((_DWORD *)v260 + 4))
            sub_1C4FCE718(v262, (uint64_t)(v260 + 1));
          ++LODWORD(__base[1]);
          if (v981 != v983)
            free(v981);
          if (v992 != v994)
            free(v992);
          v263 = 1;
        }
        if (v263 > dword_1ED828E78 || LODWORD(__base[1]) >= 3)
        {
          v255 = 0;
          v253 = v998[0];
          goto LABEL_388;
        }
        v253 = v998[0];
        if (!v963)
        {
          v963 = *(_QWORD *)v998[0];
LABEL_387:
          v255 = 1;
          goto LABEL_388;
        }
        if (v963 == *(_QWORD *)v998[0])
          goto LABEL_387;
      }
      v255 = 0;
LABEL_388:
      if (v253 != (llvm::APInt *)&v999)
        free(v253);
      if ((v255 & 1) == 0)
        goto LABEL_549;
      if (++v246 == v245)
      {
        v241 = *((_DWORD *)a2 + 5);
        v268 = v963;
        goto LABEL_398;
      }
    }
  }
  v268 = 0;
LABEL_398:
  v998[0] = (llvm::APInt *)&v999;
  v998[1] = (llvm::APInt *)0x100000000;
  if ((v241 & 0x40000000) != 0)
    v269 = (char *)*((_QWORD *)a2 - 1);
  else
    v269 = &a2[-32 * (v241 & 0x7FFFFFF)];
  v270 = (llvm::BasicBlock *)*((_QWORD *)v269 + 4);
  sub_1C5FA6D20((uint64_t)a2, 0, v270, (llvm::BasicBlock **)&v985, (uint64_t)v998, v239, v240);
  v272 = 1;
  if (LODWORD(v998[1]) != 1 || (v271 = *((_QWORD *)v998[0] + 1)) == 0)
  {
    v271 = 0;
    if (llvm::BasicBlock::getFirstNonPHIOrDbg(v270, 1)[16] != 35)
      v272 = 0;
  }
  v964 = v268;
  if ((uint64_t *)v998[0] != &v999)
    free(v998[0]);
  if (!v272)
    goto LABEL_549;
  v273 = a2 + 24;
  v274 = a3;
  *(_QWORD *)(a3 + 48) = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a3 + 56) = a2 + 24;
  v275 = (llvm::APInt *)*((_QWORD *)a2 + 6);
  v998[0] = v275;
  if (v275)
  {
    llvm::MetadataTracking::track((uint64_t)v998, (unsigned __int8 *)v275, 2);
    v274 = a3;
    v276 = v998[0];
  }
  else
  {
    v276 = 0;
  }
  sub_1C4774EF4(v274, 0, (uint64_t)v276);
  if (v998[0])
    llvm::MetadataTracking::untrack((uint64_t)v998, (unsigned __int8 *)v998[0]);
  if (LODWORD(__base[1]) == 2)
  {
    if (*((_DWORD *)__base[0] + 4) != 1 || *((_DWORD *)__base[0] + 18) != 1)
      goto LABEL_549;
    v277 = **((_QWORD **)__base[0] + 1);
    if (v271)
    {
      v278 = **((_QWORD **)__base[0] + 8);
      v998[0] = (llvm::APInt *)"switch.selectcmp";
      v1001 = 259;
      v279 = (uint64_t *)a3;
      v280 = (uint64_t)v954;
      v281 = sub_1C4774B48(a3, 32, (uint64_t)v954, v278, (uint64_t)v998);
      v282 = (uint64_t *)*((_QWORD *)__base[0] + 7);
      v998[0] = (llvm::APInt *)"switch.select";
      v1001 = 259;
      Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)a3, v281, v282, v271, (uint64_t)v998, 0);
    }
    else
    {
      Select = (llvm::Value *)*((_QWORD *)__base[0] + 7);
      v279 = (uint64_t *)a3;
      v280 = (uint64_t)v954;
    }
    v998[0] = (llvm::APInt *)"switch.selectcmp";
    v1001 = 259;
    v335 = sub_1C4774B48((uint64_t)v279, 32, v280, v277, (uint64_t)v998);
    v336 = *(uint64_t **)__base[0];
    v998[0] = (llvm::APInt *)"switch.select";
    v1001 = 259;
    v290 = llvm::IRBuilderBase::CreateSelect(v279, v335, v336, (uint64_t)Select, (uint64_t)v998, 0);
    v268 = v964;
    goto LABEL_536;
  }
  if (!v271 || LODWORD(__base[1]) != 1)
    goto LABEL_549;
  v284 = (llvm::Value **)*((_QWORD *)__base[0] + 1);
  v285 = (int8x8_t)*((unsigned int *)__base[0] + 4);
  v286 = (uint8x8_t)vcnt_s8(v285);
  v286.i16[0] = vaddlv_u8(v286);
  v952 = *((_DWORD *)__base[0] + 4);
  if (v286.i32[0] != 1)
    goto LABEL_534;
  v287 = *v284;
  v288 = &v284[*(_QWORD *)&v285];
  if (v285.i32[0])
  {
    v289 = (llvm::Value **)*((_QWORD *)__base[0] + 1);
    while (1)
    {
      v290 = *v289;
      v291 = (_QWORD *)((char *)v287 + 24);
      v292 = *((unsigned int *)*v289 + 8);
      if (v292 > 0x40)
        break;
      if ((uint64_t)(*((_QWORD *)v290 + 3) << -(char)v292) >> -(char)v292 >= (uint64_t)(*v291 << -(char)v292) >> -(char)v292)
        goto LABEL_425;
LABEL_426:
      ++v289;
      v287 = v290;
      if (v289 == v288)
        goto LABEL_490;
    }
    v293 = *((_QWORD *)v290 + 3);
    v294 = *(_QWORD *)(v293 + 8 * ((v292 - 1) >> 6)) & (1 << (v292 - 1));
    v295 = *((_DWORD *)v287 + 8);
    v296 = v295 - 1;
    v297 = *((_QWORD *)v287 + 3);
    if (v295 >= 0x41)
      v291 = (_QWORD *)(v297 + 8 * (v296 >> 6));
    if ((v294 != 0) == ((*v291 >> v296) & 1))
    {
      v298 = v292 + 63;
      v299 = v297 - 8;
      v300 = (v298 >> 3) & 0x3FFFFFF8;
      v301 = v293 - 8;
      while (v300)
      {
        v302 = *(_QWORD *)(v301 + v300);
        v303 = *(_QWORD *)(v299 + v300);
        v300 -= 8;
        if (v302 != v303)
        {
          if (v302 <= v303)
            goto LABEL_426;
          break;
        }
      }
    }
    else if (v294)
    {
      goto LABEL_426;
    }
LABEL_425:
    v290 = v287;
    goto LABEL_426;
  }
  v290 = *v284;
LABEL_490:
  v337 = *((_DWORD *)v290 + 8);
  LODWORD(v981) = v337;
  v948 = (llvm::Value *)v284;
  v946 = (llvm::BasicBlock *)v271;
  if (v337 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v980, 0, 0);
    v337 = v981;
  }
  else
  {
    v980 = 0;
  }
  if (v952)
  {
    do
    {
      v338 = *v284;
      v339 = *((unsigned int *)*v284 + 8);
      if (v339 >= 0x41)
      {
        v341 = operator new[]();
        memcpy((void *)v341, *((const void **)v338 + 3), ((unint64_t)(v339 + 63) >> 3) & 0x3FFFFFF8);
        v342 = 0;
        v343 = (unint64_t *)*((_QWORD *)v290 + 3);
        v344 = (unint64_t)(v339 + 63) >> 6;
        v345 = (unint64_t *)v341;
        v346 = v344;
        do
        {
          v347 = *v343++;
          v348 = *v345 - v347;
          v349 = *v345 < v347;
          v350 = *v345 + ~v347;
          if (v342)
          {
            v342 = v350 >= *v345;
          }
          else
          {
            v350 = v348;
            v342 = v349;
          }
          *v345++ = v350;
          --v346;
        }
        while (v346);
        *(_QWORD *)(v341 + 8 * (v344 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v339;
      }
      else
      {
        v340 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v339;
        if (!(_DWORD)v339)
          v340 = 0;
        v341 = v340 & (*((_QWORD *)v338 + 3) - *((_QWORD *)v290 + 3));
      }
      if (v337 > 0x40)
      {
        v351 = v980;
        v352 = (uint64_t *)v341;
        v353 = ((unint64_t)v337 + 63) >> 6;
        do
        {
          v354 = *v352++;
          *v351++ |= v354;
          --v353;
        }
        while (v353);
      }
      else
      {
        v980 = (void *)((unint64_t)v980 | v341);
      }
      if (v339 >= 0x41 && v341)
        MEMORY[0x1CAA32F9C](v341, 0x1000C8000313F17);
      ++v284;
    }
    while (v284 != v288);
  }
  if (v337 > 0x40)
  {
    v356 = 0;
    v357 = ((unint64_t)v337 + 63) >> 6;
    v358 = (int8x8_t *)v980;
    v284 = (llvm::Value **)v948;
    v273 = a2 + 24;
    v271 = (uint64_t)v946;
    do
    {
      v359 = *v358++;
      v360 = (uint8x8_t)vcnt_s8(v359);
      v360.i16[0] = vaddlv_u8(v360);
      v356 += v360.i32[0];
      --v357;
    }
    while (v357);
  }
  else
  {
    v355 = (uint8x8_t)vcnt_s8((int8x8_t)v980);
    v355.i16[0] = vaddlv_u8(v355);
    v356 = v355.i32[0];
    v284 = (llvm::Value **)v948;
    v273 = a2 + 24;
    v271 = (uint64_t)v946;
  }
  v361 = 31 - __clz(v952);
  if (v356 == v361)
  {
    if ((llvm::Constant::isNullValue(v290) & 1) != 0)
    {
      v363 = (uint64_t)v954;
    }
    else
    {
      v1001 = 257;
      v363 = sub_1C47733F8(a3, (uint64_t)v954, (uint64_t)v290, (uint64_t)v998, 0, 0);
    }
    v954 = (llvm::ConstantInt ***)v363;
    LODWORD(v989) = v337;
    if (v337 > 0x40)
    {
      __src = (void *)operator new[]();
      memcpy(__src, v980, (((unint64_t)v337 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&__src);
      v337 = v989;
      v365 = __src;
    }
    else
    {
      v364 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v337;
      if (!v337)
        v364 = 0;
      v365 = (void *)(v364 & ~(unint64_t)v980);
      __src = v365;
    }
    LODWORD(v993) = v337;
    v992 = v365;
    LODWORD(v989) = 0;
    v998[0] = (llvm::APInt *)"switch.and";
    v1001 = 259;
    v366 = llvm::ConstantInt::get(*v954, (llvm::Type *)&v992, v362);
    v368 = (llvm::Constant **)sub_1C4D89BCC(a3, v954, (uint64_t)v366, (uint64_t)v998);
    if (v993 >= 0x41 && v992)
      MEMORY[0x1CAA32F9C](v992, 0x1000C8000313F17);
    NullValue = llvm::Constant::getNullValue(*v368, v367);
    v998[0] = (llvm::APInt *)"switch.selectcmp";
    v1001 = 259;
    v370 = sub_1C4774B48(a3, 32, (uint64_t)v368, (uint64_t)NullValue, (uint64_t)v998);
    v371 = *(uint64_t **)__base[0];
    v1001 = 257;
    v290 = llvm::IRBuilderBase::CreateSelect((uint64_t *)a3, v370, v371, v271, (uint64_t)v998, 0);
    v337 = v981;
  }
  if (v337 >= 0x41 && v980)
    MEMORY[0x1CAA32F9C](v980, 0x1000C8000313F17);
  v12 = v356 == v361;
  v243 = v958;
  v268 = v964;
  if (!v12)
  {
LABEL_534:
    if (v952 != 2)
      goto LABEL_549;
    v372 = (uint64_t)*v284;
    v998[0] = (llvm::APInt *)"switch.selectcmp.case1";
    v1001 = 259;
    v373 = (_QWORD *)sub_1C4774B48(a3, 32, (uint64_t)v954, v372, (uint64_t)v998);
    v374 = (uint64_t)v284[1];
    v998[0] = (llvm::APInt *)"switch.selectcmp.case2";
    v1001 = 259;
    v375 = sub_1C4774B48(a3, 32, (uint64_t)v954, v374, (uint64_t)v998);
    v998[0] = (llvm::APInt *)"switch.selectcmp";
    v1001 = 259;
    v376 = sub_1C4773594(a3, v373, v375, (uint64_t)v998);
    v377 = *(uint64_t **)__base[0];
    v1001 = 257;
    v243 = v958;
    v290 = llvm::IRBuilderBase::CreateSelect((uint64_t *)a3, v376, v377, v271, (uint64_t)v998, 0);
  }
LABEL_536:
  if (v290)
  {
    v951 = v273;
    v378 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
    v379 = *(_QWORD *)(v268 + 40);
    if (v243)
    {
      v380 = *(_QWORD *)(v379 + 8);
      if (v380)
      {
        while (1)
        {
          v381 = *(_QWORD *)(v380 + 24);
          v382 = *(unsigned __int8 *)(v381 + 16);
          v383 = v381 && v382 >= 0x1C;
          if (v383 && v382 - 29 <= 0xA)
            break;
          v380 = *(_QWORD *)(v380 + 8);
          if (!v380)
            goto LABEL_548;
        }
LABEL_715:
        if (*(llvm::BasicBlock **)(v381 + 40) == v378)
          goto LABEL_716;
        while (1)
        {
          v380 = *(_QWORD *)(v380 + 8);
          if (!v380)
            break;
          v381 = *(_QWORD *)(v380 + 24);
          v483 = *(unsigned __int8 *)(v381 + 16);
          if (v381)
            v484 = v483 >= 0x1C;
          else
            v484 = 0;
          if (v484 && v483 - 29 <= 0xA)
            goto LABEL_715;
        }
      }
LABEL_548:
      v385 = (unint64_t *)operator new(0x10uLL);
      v965 = v385 + 2;
      *v385 = (unint64_t)v378;
      v385[1] = v379 & 0xFFFFFFFFFFFFFFFBLL;
      goto LABEL_717;
    }
LABEL_716:
    v385 = 0;
    v965 = 0;
LABEL_717:
    v486 = (char *)operator new(0x60uLL);
    *((_DWORD *)v486 + 13) = *((_DWORD *)v486 + 13) & 0x38000000 | 1;
    *(_QWORD *)v486 = 0;
    *((_QWORD *)v486 + 2) = 0;
    *((_QWORD *)v486 + 1) = 0;
    *((_QWORD *)v486 + 4) = ***(_QWORD ***)v379 + 1576;
    *((_QWORD *)v486 + 3) = v486 + 32;
    *((_QWORD *)v486 + 5) = 0;
    v486[48] = 30;
    v486[49] = 0;
    *((_WORD *)v486 + 25) = 0;
    *((_DWORD *)v486 + 13) = 1;
    *(_OWORD *)(v486 + 56) = 0u;
    *(_OWORD *)(v486 + 72) = 0u;
    *((_DWORD *)v486 + 22) = 0;
    *(_QWORD *)v486 = v379;
    v487 = (_QWORD *)(v379 + 8);
    v488 = *(_QWORD *)(v379 + 8);
    *((_QWORD *)v486 + 1) = v488;
    if (v488)
      *(_QWORD *)(v488 + 16) = v486 + 8;
    *((_QWORD *)v486 + 2) = v487;
    *v487 = v486;
    v1001 = 257;
    sub_1C4867F8C((uint64_t *)a3, (unsigned __int8 **)v486 + 4, (uint64_t)v998);
    while (1)
    {
      v489 = *(_DWORD *)(v268 + 20);
      v490 = v489 & 0x7FFFFFF;
      if ((v489 & 0x7FFFFFF) == 0)
        break;
      v491 = 0;
      v492 = *(unsigned int *)(v268 + 60);
      while (1)
      {
        v493 = v268 - 32 * v490;
        if ((v489 & 0x40000000) != 0)
          v493 = *(_QWORD *)(v268 - 8);
        if (*(llvm::BasicBlock **)(v493 + 32 * v492 + 8 * v491) == v378)
          break;
        if (v490 == ++v491)
          goto LABEL_747;
      }
      v494 = 0;
      v495 = 32 * v492;
      while (1)
      {
        v496 = v268 - 32 * v490;
        if ((v489 & 0x40000000) != 0)
          v496 = *(_QWORD *)(v268 - 8);
        if (*(llvm::BasicBlock **)(v496 + v495 + 8 * v494) == v378)
          break;
        if (v490 == ++v494)
        {
          LODWORD(v494) = -1;
          break;
        }
      }
      llvm::PHINode::removeIncomingValue((llvm::PHINode *)v268, v494, 1);
    }
LABEL_747:
    sub_1C477667C((llvm::PHINode *)v268, (uint64_t)v290, (uint64_t)v378);
    v998[0] = (llvm::APInt *)&v1001;
    v998[1] = (llvm::APInt *)&v1001;
    v999 = 4;
    v1000 = 0;
    v506 = ((unint64_t)*((unsigned int *)a2 + 5) >> 1) & 0x3FFFFFF;
    if ((_DWORD)v506)
    {
      v507 = 0;
      v508 = v965;
      while (1)
      {
        v509 = *((_DWORD *)a2 + 5);
        if ((v509 & 0x40000000) != 0)
          v510 = (char *)*((_QWORD *)a2 - 1);
        else
          v510 = &a2[-32 * (v509 & 0x7FFFFFF)];
        v511 = &v510[64 * v507];
        v512 = *((_QWORD *)v511 + 4);
        if (v512 != v379
          && (llvm::BasicBlock::removePredecessor(*((llvm::BasicBlock **)v511 + 4), v378, 0), v243)
          && (sub_1C4774094((llvm::SmallPtrSetImplBase *)v998, v512), v513))
        {
          v514 = v512 | 4;
          if (v508 >= v965)
          {
            v516 = ((char *)v508 - (char *)v385) >> 4;
            v517 = v516 + 1;
            if ((unint64_t)(v516 + 1) >> 60)
              goto LABEL_1427;
            if (v965 - v385 > v517)
              v517 = v965 - v385;
            if ((unint64_t)((char *)v965 - (char *)v385) >= 0x7FFFFFFFFFFFFFF0)
              v518 = 0xFFFFFFFFFFFFFFFLL;
            else
              v518 = v517;
            if (v518)
            {
              if (v518 >> 60)
                goto LABEL_1429;
              v519 = (char *)operator new(16 * v518);
            }
            else
            {
              v519 = 0;
            }
            v520 = (llvm::BasicBlock **)&v519[16 * v516];
            *v520 = v378;
            v520[1] = (llvm::BasicBlock *)v514;
            if (v508 == v385)
            {
              v385 = (unint64_t *)&v519[16 * v516];
              v243 = v958;
            }
            else
            {
              v521 = (unint64_t *)&v519[16 * v516];
              v243 = v958;
              do
              {
                *((_OWORD *)v521 - 1) = *((_OWORD *)v508 - 1);
                v521 -= 2;
                v508 -= 2;
              }
              while (v508 != v385);
              v508 = v385;
              v385 = v521;
            }
            v965 = (unint64_t *)&v519[16 * v518];
            v515 = (unint64_t *)(v520 + 2);
            if (v508)
              operator delete(v508);
          }
          else
          {
            *v508 = (unint64_t)v378;
            v508[1] = v514;
            v515 = v508 + 2;
          }
        }
        else
        {
          v515 = v508;
        }
        ++v507;
        v508 = v515;
        if (v507 == v506)
          goto LABEL_793;
      }
    }
    v515 = v965;
LABEL_793:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)a2 + 5) + 40, (uint64_t ***)a2);
    v535 = (_QWORD **)*((_QWORD *)a2 + 3);
    v536 = (_QWORD *)*((_QWORD *)a2 + 4);
    *v536 = v535;
    v535[1] = v536;
    *v951 = 0;
    v951[1] = 0;
    llvm::Value::deleteValue((llvm::Value *)a2);
    if (v243)
      llvm::DomTreeUpdater::applyUpdates(v243, v385, ((char *)v515 - (char *)v385) >> 4);
    v4 = (_QWORD **)a1;
    if (v998[1] != v998[0])
      free(v998[1]);
    if (v385)
      operator delete(v385);
    sub_1C5FA7AFC((char **)__base);
    goto LABEL_672;
  }
LABEL_549:
  sub_1C5FA7AFC((char **)__base);
  v4 = (_QWORD **)a1;
  v386 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(v386 + 4))
    goto LABEL_674;
  __base[1] = 0;
  __base[0] = 0;
  LODWORD(v1004) = 0;
  v387 = (*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF;
  v388 = (v387 - 1);
  if (v387 == 1)
  {
    v439 = 0;
    v438 = 0;
    v389 = 0;
    goto LABEL_650;
  }
  v389 = 0;
  v390 = 0;
  v391 = (_QWORD **)*((_QWORD *)a2 + 5);
  do
  {
    v392 = *((_DWORD *)a2 + 5);
    if ((v392 & 0x40000000) != 0)
      v393 = (char *)*((_QWORD *)a2 - 1);
    else
      v393 = &a2[-32 * (v392 & 0x7FFFFFF)];
    v394 = *(_QWORD ***)&v393[32 * (2 * v390 + 2)];
    v395 = (2 * v390 + 3);
    if (v390 == 4294967294)
      v395 = 1;
    v396 = *(llvm::BasicBlock **)&v393[32 * v395];
    v397 = (_QWORD *)((char *)v396 + 40);
    if (*((llvm::BasicBlock **)v396 + 5) != (llvm::BasicBlock *)((char *)v396 + 40))
    {
      for (m = *((_QWORD *)v396 + 6); ; m = *(_QWORD *)(v399 + 32))
      {
        v399 = m - 24;
        if (m)
          v400 = m - 24;
        else
          v400 = 0;
        if (!m || *(_BYTE *)(v400 + 16) != 83)
          break;
        v401 = *(_DWORD *)(m - 4);
        v402 = v401 & 0x7FFFFFF;
        if ((v401 & 0x7FFFFFF) != 0)
        {
          v403 = 0;
          while (1)
          {
            v404 = v399 - 32 * v402;
            if ((v401 & 0x40000000) != 0)
              v404 = *(_QWORD *)(v399 - 8);
            if (*(_QWORD ***)(v404 + 32 * *(unsigned int *)(v399 + 60) + 8 * v403) == v391)
              break;
            if (v402 == ++v403)
              goto LABEL_570;
          }
          if ((v401 & 0x40000000) != 0)
          {
LABEL_575:
            v406 = *(_QWORD *)(v399 - 8);
            if (*(_QWORD ***)(v406 + 32 * v403) != v394)
              continue;
            v405 = v402;
            if (!(_DWORD)v402)
              continue;
            goto LABEL_577;
          }
        }
        else
        {
LABEL_570:
          LODWORD(v403) = -1;
          if ((v401 & 0x40000000) != 0)
            goto LABEL_575;
        }
        v405 = v402;
        v406 = v399 - 32 * v402;
        if (*(_QWORD ***)(v406 + 32 * v403) != v394 || !(_DWORD)v402)
          continue;
LABEL_577:
        v407 = 0;
        v408 = (_QWORD *)(v406 + 32 * *(unsigned int *)(v399 + 60));
        v409 = 8 * v405;
        do
        {
          v410 = (_QWORD **)*v408++;
          if (v410 == v391)
            ++v407;
          v409 -= 8;
        }
        while (v409);
        if (v407 == 1)
        {
          v411 = *((_DWORD *)a2 + 5);
          if ((v411 & 0x40000000) != 0)
            v412 = (uint64_t *)*((_QWORD *)a2 - 1);
          else
            v412 = (uint64_t *)&a2[-32 * (v411 & 0x7FFFFFF)];
          sub_1C6125834(v399, v403, *v412);
          v389 = 1;
        }
      }
    }
    FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v396, 1);
    v414 = (_QWORD *)*((_QWORD *)v396 + 5);
    if (v414 == v397)
    {
      v415 = 0;
    }
    else
    {
      v415 = (char *)(v414 - 3);
      if (!v414)
        v415 = 0;
      if (v415[16] - 29 >= 0xB)
        v415 = 0;
    }
    if (FirstNonPHIOrDbg == v415)
    {
      v416 = llvm::BasicBlock::getSinglePredecessor(v396);
      if (v414 != v397 && v416 != 0)
      {
        v418 = v414 - 3;
        if (!v414)
          v418 = 0;
        v419 = *((unsigned __int8 *)v418 + 16) - 40;
        if (v419 < 0xFFFFFFF5)
          v418 = 0;
        if (v414)
        {
          if (*((_BYTE *)v418 + 16) == 30 && v419 >= 0xFFFFFFF5 && (*((_DWORD *)v418 + 5) & 0x7FFFFFF) == 1)
          {
            v421 = *(v418 - 4);
            if (*(_QWORD *)(v421 + 40) != v421 + 40)
            {
              for (n = *(_QWORD *)(v421 + 48); ; n = *(_QWORD *)(v423 + 32))
              {
                v423 = n - 24;
                if (n)
                  v424 = n - 24;
                else
                  v424 = 0;
                if (!n || *(_BYTE *)(v424 + 16) != 83)
                  break;
                v425 = *(_DWORD *)(n - 4);
                v426 = v425 & 0x7FFFFFF;
                if ((v425 & 0x7FFFFFF) != 0)
                {
                  v427 = 0;
                  while (1)
                  {
                    v428 = v423 - 32 * v426;
                    if ((v425 & 0x40000000) != 0)
                      v428 = *(_QWORD *)(v423 - 8);
                    if (*(llvm::BasicBlock **)(v428 + 32 * *(unsigned int *)(v423 + 60) + 8 * v427) == v396)
                      break;
                    if (v426 == ++v427)
                      goto LABEL_623;
                  }
                  v429 = v427;
                  if ((v425 & 0x40000000) == 0)
                  {
LABEL_624:
                    v430 = v423 - 32 * v426;
                    goto LABEL_627;
                  }
                }
                else
                {
LABEL_623:
                  v429 = 0xFFFFFFFFLL;
                  if ((v425 & 0x40000000) == 0)
                    goto LABEL_624;
                }
                v430 = *(_QWORD *)(v423 - 8);
LABEL_627:
                if (*(_QWORD ***)(v430 + 32 * v429) == v394)
                {
                  v998[0] = 0;
                  v431 = v1004;
                  v432 = sub_1C5FA7B7C((uint64_t)__base[0], v1004, v423, v998);
                  v433 = v998[0];
                  if ((v432 & 1) != 0)
                  {
                    v437 = (_DWORD *)((char *)v998[0] + 16);
                    v435 = *((unsigned int *)v998[0] + 4);
                    v436 = (_QWORD *)((char *)v998[0] + 8);
                    if (v435 >= *((unsigned int *)v998[0] + 5))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v998[0] + 8, (uint64_t)v998[0] + 24, v435 + 1, 4);
                      v435 = *((unsigned int *)v433 + 4);
                    }
                  }
                  else
                  {
                    if (4 * LODWORD(__base[1]) + 4 >= 3 * v431)
                    {
                      v434 = 2 * v431;
                      goto LABEL_632;
                    }
                    if (v431 + ~LODWORD(__base[1]) - HIDWORD(__base[1]) <= v431 >> 3)
                    {
                      v434 = v431;
LABEL_632:
                      sub_1C5FA7C18((uint64_t)__base, v434);
                      v998[0] = 0;
                      sub_1C5FA7B7C((uint64_t)__base[0], v1004, v423, v998);
                      v433 = v998[0];
                    }
                    ++LODWORD(__base[1]);
                    if (*(_QWORD *)v433 != -4096)
                      --HIDWORD(__base[1]);
                    v435 = 0;
                    *(_QWORD *)v433 = v423;
                    *((_QWORD *)v433 + 1) = (char *)v433 + 24;
                    v436 = (_QWORD *)((char *)v433 + 8);
                    *((_QWORD *)v433 + 2) = 0x400000000;
                    v437 = (_DWORD *)((char *)v433 + 16);
                  }
                  *(_DWORD *)(*v436 + 4 * v435) = v429;
                  ++*v437;
                  break;
                }
              }
            }
          }
        }
      }
    }
    ++v390;
  }
  while (v390 != v388);
  v438 = (char *)__base[0];
  v439 = v1004;
  if (!LODWORD(__base[1]))
  {
LABEL_650:
    v442 = &v438[40 * v439];
    v440 = v442;
    goto LABEL_651;
  }
  v440 = (char *)__base[0] + 40 * v1004;
  if ((_DWORD)v1004)
  {
    v441 = 0;
    while ((*(_QWORD *)((char *)__base[0] + v441) | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v441 += 40;
      if (40 * v1004 == v441)
      {
        v442 = (char *)__base[0] + 40 * v1004;
        goto LABEL_651;
      }
    }
    v442 = (char *)__base[0] + v441;
  }
  else
  {
    v442 = (char *)__base[0];
  }
LABEL_651:
  v443 = v439;
  v444 = &v438[40 * v439];
LABEL_652:
  while (v442 != v444)
  {
    v445 = *((unsigned int *)v442 + 4);
    if (v445 >= 2)
    {
      v447 = *(_QWORD *)v442;
      v446 = (unsigned int *)*((_QWORD *)v442 + 1);
      v448 = 4 * v445;
      do
      {
        v449 = *((_DWORD *)a2 + 5);
        if ((v449 & 0x40000000) != 0)
          v450 = (uint64_t *)*((_QWORD *)a2 - 1);
        else
          v450 = (uint64_t *)&a2[-32 * (v449 & 0x7FFFFFF)];
        v451 = *v446++;
        sub_1C6125834(v447, v451, *v450);
        v448 -= 4;
      }
      while (v448);
      v389 = 1;
    }
    v452 = v442 + 40;
    v442 = v440;
    if (v452 != v440)
    {
      v442 = v452;
      while ((*(_QWORD *)v442 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v442 += 40;
        if (v442 == v440)
        {
          v442 = v440;
          goto LABEL_652;
        }
      }
    }
  }
  v4 = (_QWORD **)a1;
  if ((_DWORD)v443)
  {
    v453 = 40 * v443;
    v454 = v438 + 24;
    do
    {
      if ((*((_QWORD *)v454 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v455 = (char *)*((_QWORD *)v454 - 2);
        if (v454 != v455)
          free(v455);
      }
      v454 += 40;
      v453 -= 40;
    }
    while (v453);
  }
  MEMORY[0x1CAA32FB4](v438, 8);
  if ((v389 & 1) != 0)
    goto LABEL_672;
  v386 = *(_QWORD *)(a1 + 40);
LABEL_674:
  if (!*(_BYTE *)(v386 + 6))
    goto LABEL_698;
  v457 = v4[1];
  v458 = (llvm::DataLayout *)v4[2];
  v459 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  v460 = (uint64_t ***)*((_QWORD *)v459 + 7);
  v966 = *v4;
  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)**v4 + 496))(**v4))
    goto LABEL_698;
  v461 = v460[14];
  if (v461)
  {
    if (*((_DWORD *)v461 + 2))
    {
      v462 = v461[5];
      if (v462)
      {
        v463 = *((_DWORD *)v462 + 10);
        if (v463)
        {
          v464 = v462[3];
          v465 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v465 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
          {
            v929 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v929 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v929;
            __cxa_guard_release(&qword_1ED7EAC88);
          }
          v466 = 0x9DDFEA08EB382D69
               * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0x9889A0E0DBA4EABELL)) ^ ((0x9DDFEA08EB382D69
                                                                                      * (qword_1ED7EAC80 ^ 0x9889A0E0DBA4EABELL)) >> 47) ^ 0xB5F9CD95B18985D0);
          v467 = (-348639895 * ((v466 >> 47) ^ v466)) ^ 0x61742D70;
          for (ii = 1; ; ++ii)
          {
            v469 = v467 & (v463 - 1);
            v470 = v464 + 24 * v469;
            v471 = *(_QWORD **)v470;
            if (*(_QWORD *)v470 == -1)
            {
              if ("no-jump-tables" == (char *)-1)
                goto LABEL_695;
            }
            else if (v471 == (_QWORD *)-2)
            {
              if ("no-jump-tables" == (char *)-2)
                goto LABEL_695;
            }
            else if (*(_QWORD *)(v470 + 8) == 14
                   && *v471 == 0x2D706D756A2D6F6ELL
                   && *(_QWORD *)((char *)v471 + 6) == 0x73656C6261742D70)
            {
LABEL_695:
              v473 = *(_QWORD *)(v470 + 16);
              if (v473
                && *(_DWORD *)(v473 + 16) == 4
                && *(_DWORD *)(v473 + *(unsigned int *)(v473 + 12) + 25) == *(_DWORD *)"true")
              {
                goto LABEL_698;
              }
              break;
            }
            if (v471 == (_QWORD *)-1)
              break;
            v467 = ii + v469;
          }
        }
      }
    }
  }
  v474 = *((_DWORD *)a2 + 5);
  v475 = ((v474 >> 1) & 0x3FFFFFF) - 1;
  if (v475 < 3)
    goto LABEL_698;
  if ((v474 & 0x40000000) != 0)
    v537 = (char *)*((_QWORD *)a2 - 1);
  else
    v537 = &a2[-32 * (v474 & 0x7FFFFFF)];
  v603 = *((_QWORD *)v537 + 8);
  v974 = 0;
  v604 = 1;
  v998[0] = (llvm::APInt *)1;
  do
  {
    v998[v604] = (llvm::APInt *)-4096;
    v604 += 11;
  }
  while (v604 != 45);
  v992 = (void *)1;
  for (jj = 8; jj != 72; jj += 16)
    *(void **)((char *)&v992 + jj) = (void *)-4096;
  v942 = v460;
  v943 = (uint64_t)v457;
  v947 = v459;
  __src = (void *)1;
  for (kk = 8; kk != 72; kk += 16)
    *(void **)((char *)&__src + kk) = (void *)-4096;
  v607 = 0;
  v985 = v987;
  v986 = 0x400000000;
  v608 = v603;
  v959 = (uint64_t)v458;
  while (2)
  {
    v609 = *((_DWORD *)a2 + 5);
    if ((v609 & 0x40000000) != 0)
      v610 = (char *)*((_QWORD *)a2 - 1);
    else
      v610 = &a2[-32 * (v609 & 0x7FFFFFF)];
    v611 = *(_QWORD *)&v610[32 * (2 * v607 + 2)];
    v612 = (_QWORD *)(v603 + 24);
    v613 = *(unsigned int *)(v611 + 32);
    if (v613 > 0x40)
    {
      v614 = *(_QWORD *)(v611 + 24);
      v636 = (v613 - 1) >> 6;
      v637 = 1 << (v613 - 1);
      v638 = *(_DWORD *)(v603 + 32);
      v639 = v638 - 1;
      v640 = *(_QWORD *)(v603 + 24);
      if (v638 >= 0x41)
        v612 = (_QWORD *)(v640 + 8 * (v639 >> 6));
      if (((*(_QWORD *)(v614 + 8 * v636) & v637) != 0) == ((*v612 >> v639) & 1))
      {
        v651 = ((unint64_t)(v613 + 63) >> 3) & 0x3FFFFFF8;
        while (v651)
        {
          v652 = *(_QWORD *)(v614 + v651 - 8);
          v653 = *(_QWORD *)(v640 - 8 + v651);
          v651 -= 8;
          if (v652 != v653)
          {
            v618 = v611;
            if (v652 <= v653)
              goto LABEL_936;
            goto LABEL_935;
          }
        }
        goto LABEL_935;
      }
      if ((*(_QWORD *)(v614 + 8 * v636) & v637) == 0)
        goto LABEL_935;
      v617 = (_QWORD *)(v608 + 24);
      v603 = v611;
    }
    else
    {
      v614 = *(_QWORD *)(v611 + 24);
      v615 = v614 << -(char)v613 >> -(char)v613;
      if (v615 < (uint64_t)(*v612 << -(char)v613) >> -(char)v613)
      {
        v616 = 64 - v613;
        v617 = (_QWORD *)(v608 + 24);
        v618 = v611;
        goto LABEL_906;
      }
LABEL_935:
      v618 = v603;
LABEL_936:
      v617 = (_QWORD *)(v608 + 24);
      if (v613 <= 0x40)
      {
        v616 = 64 - v613;
        v615 = v614 << -(char)v613 >> -(char)v613;
LABEL_906:
        v619 = (uint64_t)(*v617 << v616) >> v616;
        v620 = v615 < v619 || v615 <= v619;
        v603 = v618;
        if (!v620)
LABEL_943:
          v608 = v611;
        goto LABEL_911;
      }
      v636 = (v613 - 1) >> 6;
      v637 = 1 << (v613 - 1);
      v603 = v618;
    }
    v641 = *(_QWORD *)(v614 + 8 * v636) & v637;
    v642 = *(_DWORD *)(v608 + 32);
    v643 = v642 - 1;
    v644 = *(_QWORD *)(v608 + 24);
    if (v642 >= 0x41)
      v617 = (_QWORD *)(v644 + 8 * (v643 >> 6));
    if ((v641 != 0) == ((*v617 >> v643) & 1))
    {
      v645 = v613 + 63;
      v646 = v644 - 8;
      v647 = (v645 >> 3) & 0x3FFFFFF8;
      v648 = v614 - 8;
      while (v647)
      {
        v649 = *(_QWORD *)(v648 + v647);
        v650 = *(_QWORD *)(v646 + v647);
        v647 -= 8;
        if (v649 != v650)
        {
          if (v649 <= v650)
            break;
          goto LABEL_943;
        }
      }
    }
    else if (!v641)
    {
      goto LABEL_943;
    }
LABEL_911:
    __base[0] = &v1004;
    __base[1] = (void *)0x400000000;
    if ((v609 & 0x40000000) != 0)
      v621 = (char *)*((_QWORD *)a2 - 1);
    else
      v621 = &a2[-32 * (v609 & 0x7FFFFFF)];
    v622 = (2 * v607 + 3);
    if ((_DWORD)v607 == -2)
      v622 = 1;
    v623 = sub_1C5FA6D20((uint64_t)a2, v611, *(llvm::BasicBlock **)&v621[32 * v622], &v974, (uint64_t)__base, v458, v966);
    v624 = (uint64_t *)__base[0];
    if (v623)
    {
      if (LODWORD(__base[1]))
      {
        v625 = v608;
        v626 = v475;
        v627 = v603;
        v628 = (uint64_t *)((char *)__base[0] + 16 * LODWORD(__base[1]));
        do
        {
          v629 = (void *)*v624;
          __dst = v629;
          v630 = v624[1];
          if ((sub_1C63B7C7C((uint64_t)v998, (uint64_t)v629, &v980) & 1) == 0)
          {
            v631 = v986;
            if (v986 >= (unint64_t)HIDWORD(v986))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v985, (uint64_t)v987, v986 + 1, 8);
              v631 = v986;
            }
            *((_QWORD *)v985 + v631) = v629;
            LODWORD(v986) = v986 + 1;
          }
          v632 = sub_1C63B7D30(v998, (uint64_t *)&__dst);
          v633 = v632;
          v634 = *((unsigned int *)v632 + 4);
          if (v634 >= *((unsigned int *)v632 + 5))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v632 + 1), (uint64_t)(v632 + 3), v634 + 1, 16);
            v634 = *((unsigned int *)v633 + 4);
          }
          v635 = (uint64_t *)(v633[1] + 16 * v634);
          *v635 = v611;
          v635[1] = v630;
          ++*((_DWORD *)v633 + 4);
          v624 += 2;
        }
        while (v624 != v628);
        v624 = (uint64_t *)__base[0];
        v603 = v627;
        v475 = v626;
        v608 = v625;
        v458 = (llvm::DataLayout *)v959;
      }
      if (v624 != &v1004)
        free(v624);
      if (++v607 != v475)
        continue;
      v955 = (llvm::Constant *)v603;
      v655 = (uint64_t *)v985;
      if ((_DWORD)v986)
      {
        v656 = 8 * v986;
        do
        {
          v657 = (void *)*v655++;
          __base[0] = v657;
          v658 = **(_QWORD **)(sub_1C63B7D30(v998, (uint64_t *)__base)[1] + 8);
          sub_1C61B5A08(&__src, (uint64_t *)__base)[1] = v658;
          v656 -= 8;
        }
        while (v656);
        v655 = (uint64_t *)v985;
      }
      v659 = *((unsigned int *)sub_1C63B7D30(v998, v655) + 4);
      v660 = *(unsigned int *)(v608 + 32);
      if (v660 >= 0x41)
      {
        v662 = (void *)operator new[]();
        memcpy(v662, *(const void **)(v608 + 24), ((unint64_t)(v660 + 63) >> 3) & 0x3FFFFFF8);
        v663 = 0;
        v664 = (unint64_t *)*((_QWORD *)v955 + 3);
        v962 = (unint64_t **)((char *)v955 + 24);
        v665 = (unint64_t)(v660 + 63) >> 6;
        v666 = (unint64_t *)v662;
        v667 = v665;
        do
        {
          v668 = *v664++;
          v669 = *v666 - v668;
          v670 = *v666 < v668;
          v671 = *v666 + ~v668;
          if (v663)
          {
            v663 = v671 >= *v666;
          }
          else
          {
            v671 = v669;
            v663 = v670;
          }
          *v666++ = v671;
          --v667;
        }
        while (v667);
        *((_QWORD *)v662 + (v665 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v660;
      }
      else
      {
        v962 = (unint64_t **)((char *)v955 + 24);
        v661 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v660;
        if (!(_DWORD)v660)
          v661 = 0;
        v662 = (void *)(v661 & (*(_QWORD *)(v608 + 24) - *((_QWORD *)v955 + 3)));
      }
      v973 = v660;
      v972 = (uint64_t **)v662;
      v953 = sub_1C47EE5B8(&v972, 0xFFFFFFFFFFFFFFFFLL);
      v672 = (unint64_t)v953 + 1;
      v980 = &v982;
      v981 = (void *)0x400000000;
      v673 = *((_DWORD *)a2 + 5);
      if ((v673 & 0x40000000) != 0)
        v674 = (char *)*((_QWORD *)a2 - 1);
      else
        v674 = &a2[-32 * (v673 & 0x7FFFFFF)];
      v675 = sub_1C5FA6D20((uint64_t)a2, 0, *((llvm::BasicBlock **)v674 + 4), &v974, (uint64_t)&v980, v458, v966);
      v676 = v672 <= v659 || v675;
      v939 = v676;
      if ((v676 & 1) == 0)
      {
        if (((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFFu) - 1 < 4 || (v701 = *((_QWORD *)v458 + 5)) == 0)
        {
LABEL_1144:
          v654 = 0;
          goto LABEL_1360;
        }
        v702 = (unsigned __int8 *)*((_QWORD *)v458 + 4);
        while (*v702 < v672)
        {
          ++v702;
          if (!--v701)
            goto LABEL_1144;
        }
      }
      if ((_DWORD)v981)
      {
        v677 = (void **)v980;
        v678 = (void **)((char *)v980 + 16 * v981);
        do
        {
          __base[0] = *v677;
          v679 = v677[1];
          sub_1C61B5A08(&v992, (uint64_t *)__base)[1] = v679;
          v677 += 2;
        }
        while (v677 != v678);
      }
      v654 = 0;
      if (v672 > 0x1999999999999998 || v672 < ((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFFu) - 1)
      {
LABEL_1360:
        if (v980 != &v982)
          free(v980);
        v4 = (_QWORD **)a1;
        if (v973 >= 0x41 && v972)
          MEMORY[0x1CAA32F9C](v972, 0x1000C8000313F17);
        goto LABEL_1365;
      }
      v680 = sub_1C63B7F64((int *)&__src);
      v682 = &v989;
      if ((__src & 1) == 0)
        v682 = v989;
      v683 = v990;
      if ((__src & 1) != 0)
        v683 = 4;
      v684 = (int *)&v682[2 * v683];
      if (v684 == v680)
        goto LABEL_989;
      v703 = v680;
      v704 = v681;
      LOBYTE(v705) = 0;
      LOBYTE(v706) = 1;
      while (2)
      {
        v707 = *((_QWORD *)v703 + 1);
        if (v705)
        {
LABEL_1007:
          v705 = 1;
        }
        else if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v966 + 480))(*v966, *((_QWORD *)v703 + 1)) & 1) != 0)
        {
          v705 = 0;
        }
        else
        {
          v705 = 1;
          if (v707)
          {
            v714 = *(_DWORD *)(v707 + 8);
            if (v714 == 13)
            {
              v715 = v714 >> 8;
              v708.i32[0] = v714 >> 8;
              v716 = (uint8x8_t)vcnt_s8(v708);
              v716.i16[0] = vaddlv_u8(v716);
              if (v714 < 0x800 || v716.i32[0] > 1u)
                goto LABEL_1007;
              v718 = *((_QWORD *)v458 + 5);
              if (!v718)
                goto LABEL_1007;
              v719 = (unsigned __int8 *)*((_QWORD *)v458 + 4);
              v720 = v718 - 1;
              do
              {
                v721 = *v719++;
                v705 = v715 > v721;
              }
              while (v715 > v721 && v720-- != 0);
            }
          }
        }
        if ((v706 & 1) == 0
          || ((v709 = *(_DWORD *)(v707 + 8), v707) ? (v710 = *(_DWORD *)(v707 + 8) == 13) : (v710 = 0),
              (v711 = v709 >> 8, v712 = 0xFFFFFFFF / (v709 >> 8), v710) ? (v713 = v672 >= v712) : (v713 = 1),
              v713 || (v723 = *((_QWORD *)v458 + 5)) == 0))
        {
LABEL_1019:
          v706 = 0;
          v654 = 0;
          if (!v705)
            goto LABEL_1020;
          goto LABEL_1360;
        }
        v724 = v711 * v672;
        v725 = (unsigned __int8 *)*((_QWORD *)v458 + 4);
        while (v724 > *v725)
        {
          ++v725;
          if (!--v723)
            goto LABEL_1019;
        }
        v706 = 1;
LABEL_1020:
        while (1)
        {
          v703 += 4;
          if (v703 == v704)
            break;
          if ((*(_QWORD *)v703 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_1024;
        }
        v703 = v704;
LABEL_1024:
        if (v703 == v684)
        {
          if (((v705 | v706) & 1) != 0)
          {
            if ((v706 & 1) == 0)
              goto LABEL_1144;
          }
          else if (10 * ((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFFu) - 10 < 4 * v672)
          {
            goto LABEL_1144;
          }
LABEL_989:
          v940 = (llvm::Type *)((char *)v953 + 1);
          v685 = v974;
          v686 = *((_QWORD *)v974 + 7);
          v933 = *(llvm::ConstantInt ***)(v686 + 40);
          v687 = *v933;
          __base[0] = "switch.lookup";
          LOWORD(v1006) = 259;
          v688 = operator new();
          *(_QWORD *)v688 = *(_QWORD *)v687 + 1600;
          *(_QWORD *)(v688 + 8) = 0;
          v689 = *(_DWORD *)(v688 + 20) & 0xC0000000;
          *(_DWORD *)(v688 + 16) = 22;
          *(_DWORD *)(v688 + 20) = v689;
          *(_QWORD *)(v688 + 24) = 0;
          v690 = (_QWORD *)(v688 + 24);
          *(_QWORD *)(v688 + 32) = 0;
          *(_QWORD *)(v688 + 40) = v688 + 40;
          *(_QWORD *)(v688 + 48) = v688 + 40;
          *(_QWORD *)(v688 + 56) = 0;
          v691 = v686 + 72;
          v692 = (uint64_t *)((char *)v685 + 24);
          if (v685)
            v693 = (uint64_t *)((char *)v685 + 24);
          else
            v693 = (uint64_t *)(v686 + 72);
          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v691, (_QWORD *)v688);
          v694 = *v693;
          *(_QWORD *)(v688 + 32) = v693;
          *v690 = v694;
          *(_QWORD *)(v694 + 8) = v690;
          *v693 = (uint64_t)v690;
          llvm::Value::setName((uint64_t ***)v688, (uint64_t)__base);
          v695 = 0;
          v696 = a3;
          *(_QWORD *)(a3 + 48) = *((_QWORD *)a2 + 5);
          *(_QWORD *)(a3 + 56) = a2 + 24;
          v697 = (_QWORD **)*((_QWORD *)a2 + 6);
          __base[0] = v697;
          if (v697)
          {
            llvm::MetadataTracking::track((uint64_t)__base, (unsigned __int8 *)v697, 2);
            v696 = a3;
            v695 = __base[0];
          }
          sub_1C4774EF4(v696, 0, (uint64_t)v695);
          if (__base[0])
            llvm::MetadataTracking::untrack((uint64_t)__base, (unsigned __int8 *)__base[0]);
          isNullValue = llvm::Constant::isNullValue(v955);
          v699 = *((_DWORD *)a2 + 5);
          if (isNullValue)
          {
            if ((v699 & 0x40000000) != 0)
              v700 = (unsigned __int8 **)*((_QWORD *)a2 - 1);
            else
              v700 = (unsigned __int8 **)&a2[-32 * (v699 & 0x7FFFFFF)];
            v934 = *v700;
            v730 = (llvm::Type **)v955;
          }
          else
          {
            if ((v699 & 0x40000000) != 0)
              v726 = (uint64_t *)*((_QWORD *)a2 - 1);
            else
              v726 = (uint64_t *)&a2[-32 * (v699 & 0x7FFFFFF)];
            v731 = *v726;
            __base[0] = "switch.tableidx";
            LOWORD(v1006) = 259;
            v730 = (llvm::Type **)v955;
            v934 = (unsigned __int8 *)sub_1C47733F8(a3, v731, (uint64_t)v955, (uint64_t)__base, 0, 0);
          }
          PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*v730);
          if ((_DWORD)v732 == 1)
          if ((PrimitiveSizeInBits & 0xFFFFFFC0) != 0)
            v734 = -1;
          else
            v734 = 1 << PrimitiveSizeInBits;
          v735 = *((_DWORD *)a2 + 5);
          if ((v735 & 0x40000000) != 0)
            v736 = (char *)*((_QWORD *)a2 - 1);
          else
            v736 = &a2[-32 * (v735 & 0x7FFFFFF)];
          v738 = llvm::BasicBlock::getFirstNonPHIOrDbg(*((llvm::BasicBlock **)v736 + 4), 1)[16] == 35 || v734 == v672;
          v739 = v738;
          v941 = v739;
          if (v738)
          {
            sub_1C4867DC8((uint64_t *)a3, v688);
          }
          else
          {
            v740 = **(llvm::ConstantInt ***)v955;
            v741 = *(_DWORD *)(*(_QWORD *)v955 + 8);
            LODWORD(__base[1]) = v741 >> 8;
            if (v741 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)__base, v672, 0);
            }
            else
            {
              if (v741 <= 0xFF)
                v742 = 0;
              else
                v742 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v741);
              __base[0] = (void *)(v742 & v672);
            }
            v743 = llvm::ConstantInt::get(v740, (llvm::LLVMContext *)__base, v737);
            if (LODWORD(__base[1]) >= 0x41 && __base[0])
              MEMORY[0x1CAA32F9C](__base[0], 0x1000C8000313F17);
            LOWORD(v1006) = 257;
            v744 = (llvm::Value *)sub_1C4774B48(a3, 36, (uint64_t)v934, (uint64_t)v743, (uint64_t)__base);
            v745 = *((_DWORD *)a2 + 5);
            if ((v745 & 0x40000000) != 0)
              v746 = (char *)*((_QWORD *)a2 - 1);
            else
              v746 = &a2[-32 * (v745 & 0x7FFFFFF)];
            sub_1C52A30A8((uint64_t *)a3, v744, (llvm::BasicBlock *)v688, *((llvm::BasicBlock **)v746 + 4), 0, 0);
          }
          v747 = 0;
          v748 = 0;
          if (v943)
          {
            v747 = operator new(0x10uLL);
            v748 = (llvm::Value *)(v747 + 2);
            *v747 = v947;
            v747[1] = v688 & 0xFFFFFFFFFFFFFFFBLL;
          }
          *(_QWORD *)(a3 + 48) = v688;
          *(_QWORD *)(a3 + 56) = v688 + 40;
          __p = (llvm::Value *)v747;
          v949 = v748;
          if ((v939 & 1) != 0)
          {
            v944 = (unint64_t)v748;
            v936 = v688;
            goto LABEL_1181;
          }
          __base[0] = "switch.hole_check";
          LOWORD(v1006) = 259;
          v937 = v688;
          llvm::Value::setName((uint64_t ***)v688, (uint64_t)__base);
          v749 = *v933;
          __base[0] = "switch.lookup";
          LOWORD(v1006) = 259;
          v750 = *((_QWORD *)v685 + 7);
          v751 = operator new();
          *(_QWORD *)v751 = *(_QWORD *)v749 + 1600;
          *(_QWORD *)(v751 + 8) = 0;
          v752 = *(_DWORD *)(v751 + 20) & 0xC0000000;
          *(_QWORD *)(v751 + 24) = 0;
          v753 = v751 + 24;
          *(_DWORD *)(v751 + 16) = 22;
          *(_DWORD *)(v751 + 20) = v752;
          *(_QWORD *)(v751 + 32) = 0;
          *(_QWORD *)(v751 + 40) = v751 + 40;
          v935 = v751 + 40;
          *(_QWORD *)(v751 + 48) = v751 + 40;
          *(_QWORD *)(v751 + 56) = 0;
          if (v750)
          {
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v750 + 72, (_QWORD *)v751);
            v754 = *v692;
            *(_QWORD *)(v751 + 24) = *v692;
            *(_QWORD *)(v751 + 32) = v692;
            *(_QWORD *)(v754 + 8) = v753;
            *v692 = v753;
          }
          v936 = v751;
          llvm::Value::setName((uint64_t ***)v751, (uint64_t)__base);
          v755 = 7;
          if ((unint64_t)v953 > 7)
            v755 = (unint64_t)v953;
          v756 = v755 | (v755 >> 1) | ((v755 | (v755 >> 1)) >> 2);
          v757 = v756 | (v756 >> 4) | ((v756 | (v756 >> 4)) >> 8);
          v758 = v757 | (v757 >> 16) | ((v757 | (v757 >> 16)) >> 32);
          v759 = v758 + 1;
          v976 = v758 + 1;
          if ((v758 + 1) > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 0, 0);
            LODWORD(v1011) = v759;
            llvm::APInt::initSlowCase((llvm::APInt *)&v1010, 1, 0);
          }
          else
          {
            __dst = 0;
            LODWORD(v1011) = v758 + 1;
            if ((_DWORD)v758 == -1)
              LOBYTE(v760) = 0;
            else
              v760 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v758;
            v1010 = v760 & 1;
          }
          v761 = sub_1C63B7D30(v998, (uint64_t *)v985);
          v763 = *((unsigned int *)v761 + 4);
          if ((_DWORD)v763)
          {
            v764 = v761;
            v765 = 0;
            v766 = v1011;
            v767 = (const void *)v1010;
            v956 = v1011;
            do
            {
              v768 = *(_QWORD *)(v764[1] + 16 * v765);
              v769 = *(unsigned int *)(v768 + 32);
              if (v769 >= 0x41)
              {
                v771 = (void *)operator new[]();
                memcpy(v771, *(const void **)(v768 + 24), ((unint64_t)(v769 + 63) >> 3) & 0x3FFFFFF8);
                v772 = 0;
                v773 = *v962;
                v774 = (unint64_t)(v769 + 63) >> 6;
                v775 = (unint64_t *)v771;
                v776 = v774;
                do
                {
                  v777 = *v773++;
                  v778 = *v775 - v777;
                  v779 = *v775 < v777;
                  v780 = *v775 + ~v777;
                  if (v772)
                  {
                    v772 = v780 >= *v775;
                  }
                  else
                  {
                    v780 = v778;
                    v772 = v779;
                  }
                  *v775++ = v780;
                  --v776;
                }
                while (v776);
                *((_QWORD *)v771 + (v774 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v769;
                v766 = v956;
              }
              else
              {
                v770 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v769;
                if (!(_DWORD)v769)
                  v770 = 0;
                v771 = (void *)(v770 & (*(_QWORD *)(v768 + 24) - (_QWORD)*v962));
              }
              LODWORD(__base[1]) = v769;
              __base[0] = v771;
              v781 = sub_1C47EE5B8((uint64_t ***)__base, 0xFFFFFFFFFFFFFFFFLL);
              if (LODWORD(__base[1]) >= 0x41 && __base[0])
                MEMORY[0x1CAA32F9C](__base[0], 0x1000C8000313F17);
              LODWORD(__base[1]) = v766;
              if (v766 > 0x40)
              {
                __base[0] = (void *)operator new[]();
                memcpy(__base[0], v767, (((unint64_t)LODWORD(__base[1]) + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                __base[0] = (void *)v767;
              }
              sub_1C4888094((uint64_t)__base, v781);
              if (v976 > 0x40)
              {
                v782 = __dst;
                v783 = (uint64_t *)__base[0];
                v784 = ((unint64_t)v976 + 63) >> 6;
                do
                {
                  v785 = *v783++;
                  *v782++ |= v785;
                  --v784;
                }
                while (v784);
              }
              else
              {
                __dst = (void *)((unint64_t)__dst | (unint64_t)__base[0]);
              }
              if (LODWORD(__base[1]) >= 0x41 && __base[0])
                MEMORY[0x1CAA32F9C](__base[0], 0x1000C8000313F17);
              ++v765;
            }
            while (v765 != v763);
          }
          v786 = llvm::ConstantInt::get(*v933, (llvm::LLVMContext *)&__dst, v762);
          v787 = *(_QWORD *)v786;
          __base[0] = "switch.maskindex";
          LOWORD(v1006) = 259;
          v788 = sub_1C4773690((uint64_t *)a3, v934, v787, (uint64_t)__base);
          __base[0] = "switch.shifted";
          LOWORD(v1006) = 259;
          v789 = (unsigned __int8 *)sub_1C506ED1C(a3, (uint64_t)v786, (uint64_t)v788, (uint64_t)__base, 0);
          v790 = *(_QWORD *)*v933 + 1888;
          __base[0] = "switch.lobit";
          LOWORD(v1006) = 259;
          v791 = sub_1C4773E38((uint64_t *)a3, 38, v789, v790, (uint64_t)__base);
          v792 = *((_DWORD *)a2 + 5);
          if ((v792 & 0x40000000) != 0)
            v793 = (char *)*((_QWORD *)a2 - 1);
          else
            v793 = &a2[-32 * (v792 & 0x7FFFFFF)];
          sub_1C52A30A8((uint64_t *)a3, (llvm::Value *)v791, (llvm::BasicBlock *)v936, *((llvm::BasicBlock **)v793 + 4), 0, 0);
          if (!v943)
          {
            v944 = (unint64_t)v949;
            goto LABEL_1172;
          }
          v794 = v949 - __p;
          v795 = (v949 - __p) >> 4;
          v796 = v795 + 1;
          if ((unint64_t)(v795 + 1) >> 60)
            goto LABEL_1427;
          if (v794 >> 3 > v796)
            v796 = v794 >> 3;
          if ((unint64_t)v794 >= 0x7FFFFFFFFFFFFFF0)
            v797 = 0xFFFFFFFFFFFFFFFLL;
          else
            v797 = v796;
          if (!v797)
          {
            v798 = 0;
            goto LABEL_1148;
          }
          if (v797 >> 60)
            goto LABEL_1429;
          v798 = (char *)operator new(16 * v797);
LABEL_1148:
          v799 = (uint64_t *)&v798[16 * v795];
          *v799 = v937;
          v799[1] = v936 & 0xFFFFFFFFFFFFFFFBLL;
          if (v949 == __p)
          {
            v800 = 0;
          }
          else
          {
            memcpy(&v798[v794 & 0xF], (char *)v949 - ((v794 - 16) & 0xFFFFFFFFFFFFFFF0) - 16, ((v794 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
            v800 = ~((unint64_t)(v794 - 16) >> 4);
          }
          if (__p)
            operator delete(__p);
          v944 = (unint64_t)&v798[16 * v797];
          v801 = *((_DWORD *)a2 + 5);
          __p = (llvm::Value *)&v799[2 * v800];
          if ((v801 & 0x40000000) != 0)
            v802 = (char *)*((_QWORD *)a2 - 1);
          else
            v802 = &a2[-32 * (v801 & 0x7FFFFFF)];
          v803 = *((_QWORD *)v802 + 4) & 0xFFFFFFFFFFFFFFFBLL;
          if ((unint64_t)(v799 + 2) < v944)
          {
            v799[2] = v937;
            v799[3] = v803;
            v949 = (llvm::Value *)(v799 + 4);
            goto LABEL_1172;
          }
          v804 = (uint64_t)(16 - 16 * v800) >> 4;
          v805 = v804 + 1;
          if ((unint64_t)(v804 + 1) >> 60)
            goto LABEL_1427;
          if ((uint64_t)(v944 - (_QWORD)__p) >> 3 > v805)
            v805 = (uint64_t)(v944 - (_QWORD)__p) >> 3;
          if (v944 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0)
            v806 = 0xFFFFFFFFFFFFFFFLL;
          else
            v806 = v805;
          if (!v806)
          {
            v807 = 0;
            goto LABEL_1169;
          }
          if (v806 >> 60)
            goto LABEL_1429;
          v807 = (char *)operator new(16 * v806);
LABEL_1169:
          v808 = (uint64_t *)&v807[16 * v804];
          *v808 = v937;
          v808[1] = v803;
          v809 = 16 * v800 - 16;
          v810 = v808;
          do
          {
            v811 = *(_OWORD *)v799;
            v799 -= 2;
            *((_OWORD *)v810 - 1) = v811;
            v810 -= 2;
            v809 += 16;
          }
          while (v809);
          v944 = (unint64_t)&v807[16 * v806];
          v949 = (llvm::Value *)(v808 + 2);
          operator delete(__p);
          __p = (llvm::Value *)v810;
LABEL_1172:
          *(_QWORD *)(a3 + 48) = v936;
          *(_QWORD *)(a3 + 56) = v935;
          v812 = *((_DWORD *)a2 + 5);
          if ((v812 & 0x40000000) != 0)
            v813 = (char *)*((_QWORD *)a2 - 1);
          else
            v813 = &a2[-32 * (v812 & 0x7FFFFFF)];
          sub_1C5F90FA0(*((_QWORD *)v813 + 4), v937, (uint64_t)v947, 0);
          if (v1011 >= 0x41 && v1010)
            MEMORY[0x1CAA32F9C](v1010, 0x1000C8000313F17);
          if (v976 >= 0x41 && __dst)
            MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
LABEL_1181:
          if (v941)
          {
            v814 = *((_DWORD *)a2 + 5);
            if ((v814 & 0x40000000) != 0)
              v815 = (char *)*((_QWORD *)a2 - 1);
            else
              v815 = &a2[-32 * (v814 & 0x7FFFFFF)];
            llvm::BasicBlock::removePredecessor(*((llvm::BasicBlock **)v815 + 4), v947, 1);
            v817 = v943;
            if (!v943)
            {
              v931 = v949;
LABEL_1190:
              if (!(_DWORD)v986)
              {
                v818 = (unint64_t)v974;
                sub_1C4867DC8((uint64_t *)a3, (uint64_t)v974);
                if (!v817)
                {
                  v819 = (unint64_t *)v931;
                  v820 = (unint64_t *)__p;
                  goto LABEL_1351;
                }
                v892 = v818 & 0xFFFFFFFFFFFFFFFBLL;
                if ((unint64_t)v931 < v944)
                {
                  *(_QWORD *)v931 = v936;
                  *((_QWORD *)v931 + 1) = v892;
                  v819 = (unint64_t *)((char *)v931 + 16);
                  v820 = (unint64_t *)__p;
                  goto LABEL_1351;
                }
                v895 = (v931 - __p) >> 4;
                v896 = v895 + 1;
                if (!((unint64_t)(v895 + 1) >> 60))
                {
                  if ((uint64_t)(v944 - (_QWORD)__p) >> 3 > v896)
                    v896 = (uint64_t)(v944 - (_QWORD)__p) >> 3;
                  if (v944 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0)
                    v897 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v897 = v896;
                  if (!v897)
                  {
                    v898 = 0;
LABEL_1344:
                    v904 = (uint64_t *)&v898[16 * v895];
                    v944 = (unint64_t)&v898[16 * v897];
                    *v904 = v936;
                    v904[1] = v892;
                    v819 = (unint64_t *)(v904 + 2);
                    if (v931 == __p)
                    {
                      v820 = (unint64_t *)&v898[16 * v895];
                      v905 = __p;
                    }
                    else
                    {
                      v906 = v931;
                      v905 = __p;
                      do
                      {
                        v820 = (unint64_t *)(v904 - 2);
                        *((_OWORD *)v904 - 1) = *((_OWORD *)v906 - 1);
                        v906 = (llvm::Value *)((char *)v906 - 16);
                        v904 -= 2;
                      }
                      while (v906 != __p);
                    }
                    if (v905)
                      operator delete(__p);
                    v817 = v943;
LABEL_1351:
                    __base[0] = &v1006;
                    __base[1] = &v1006;
                    v1004 = 8;
                    LODWORD(v1005) = 0;
                    v907 = ((unint64_t)*((unsigned int *)a2 + 5) >> 1) & 0x3FFFFFF;
                    if ((_DWORD)v907)
                    {
                      v911 = 0;
                      while (1)
                      {
                        v912 = *((_DWORD *)a2 + 5);
                        if ((v912 & 0x40000000) != 0)
                          v913 = (char *)*((_QWORD *)a2 - 1);
                        else
                          v913 = &a2[-32 * (v912 & 0x7FFFFFF)];
                        v914 = *(_QWORD *)&v913[64 * v911 + 32];
                        if (v914 != *((_QWORD *)v913 + 4)
                          && (llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v914, v947, 0), v817)
                          && (sub_1C4774094((llvm::SmallPtrSetImplBase *)__base, v914), v915))
                        {
                          v916 = v914 | 4;
                          if ((unint64_t)v819 >= v944)
                          {
                            v917 = ((char *)v819 - (char *)v820) >> 4;
                            v918 = v917 + 1;
                            if ((unint64_t)(v917 + 1) >> 60)
                              goto LABEL_1427;
                            if ((uint64_t)(v944 - (_QWORD)v820) >> 3 > v918)
                              v918 = (uint64_t)(v944 - (_QWORD)v820) >> 3;
                            if (v944 - (unint64_t)v820 >= 0x7FFFFFFFFFFFFFF0)
                              v919 = 0xFFFFFFFFFFFFFFFLL;
                            else
                              v919 = v918;
                            if (v919)
                            {
                              if (v919 >> 60)
                                goto LABEL_1429;
                              v920 = (char *)operator new(16 * v919);
                            }
                            else
                            {
                              v920 = 0;
                            }
                            v921 = (llvm::BasicBlock **)&v920[16 * v917];
                            *v921 = v947;
                            v921[1] = (llvm::BasicBlock *)v916;
                            if (v819 == v820)
                            {
                              v820 = (unint64_t *)&v920[16 * v917];
                              v817 = v943;
                            }
                            else
                            {
                              v922 = (unint64_t *)&v920[16 * v917];
                              v817 = v943;
                              do
                              {
                                *((_OWORD *)v922 - 1) = *((_OWORD *)v819 - 1);
                                v922 -= 2;
                                v819 -= 2;
                              }
                              while (v819 != v820);
                              v819 = v820;
                              v820 = v922;
                            }
                            v944 = (unint64_t)&v920[16 * v919];
                            v908 = (unint64_t *)(v921 + 2);
                            if (v819)
                              operator delete(v819);
                          }
                          else
                          {
                            *v819 = (unint64_t)v947;
                            v819[1] = v916;
                            v908 = v819 + 2;
                          }
                        }
                        else
                        {
                          v908 = v819;
                        }
                        ++v911;
                        v819 = v908;
                        if (v911 == v907)
                          goto LABEL_1353;
                      }
                    }
                    v908 = v819;
LABEL_1353:
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)a2 + 5) + 40, (uint64_t ***)a2);
                    v909 = (_QWORD **)*((_QWORD *)a2 + 3);
                    v910 = (_QWORD *)*((_QWORD *)a2 + 4);
                    *v910 = v909;
                    v909[1] = v910;
                    *((_QWORD *)a2 + 3) = 0;
                    *((_QWORD *)a2 + 4) = 0;
                    llvm::Value::deleteValue((llvm::Value *)a2);
                    if (v817)
                      llvm::DomTreeUpdater::applyUpdates(v817, v820, ((char *)v908 - (char *)v820) >> 4);
                    if (__base[1] != __base[0])
                      free(__base[1]);
                    if (v820)
                      operator delete(v820);
                    v654 = 1;
                    goto LABEL_1360;
                  }
                  if (!(v897 >> 60))
                  {
                    v898 = (char *)operator new(16 * v897);
                    goto LABEL_1344;
                  }
LABEL_1429:
                  sub_1C4764EE4();
                }
LABEL_1427:
                abort();
              }
              v971 = *(llvm::PHINode **)v985;
              v967 = sub_1C63B7D30(v998, (uint64_t *)&v971);
              if ((v939 & 1) != 0)
                v821 = (llvm::Constant ***)(sub_1C61B5A08(&v992, (uint64_t *)&v971) + 1);
              else
                v821 = (llvm::Constant ***)(sub_1C63B7D30(v998, (uint64_t *)&v971)[1] + 8);
              v822 = *v821;
              if ((*((_BYTE *)v942 + 23) & 0x10) != 0)
              {
                v823 = ***v942;
                v824 = *(_QWORD *)(v823 + 152);
                v825 = *(unsigned int *)(v823 + 168);
                if ((_DWORD)v825)
                {
                  LODWORD(v826) = (v825 - 1) & ((v942 >> 4) ^ (v942 >> 9));
                  v827 = (uint64_t ****)(v824 + 16 * v826);
                  v828 = *v827;
                  if (*v827 != v942)
                  {
                    v829 = 1;
                    do
                    {
                      if (v828 == (uint64_t ***)-4096)
                        goto LABEL_1203;
                      v830 = v826 + v829++;
                      v826 = v830 & (v825 - 1);
                      v828 = *(uint64_t ****)(v824 + 16 * v826);
                    }
                    while (v828 != v942);
                    v827 = (uint64_t ****)(v824 + 16 * v826);
                  }
                }
                else
                {
LABEL_1203:
                  v827 = (uint64_t ****)(v824 + 16 * v825);
                }
                v831 = v827[1];
                v938 = (char *)(v831 + 2);
                v950 = (llvm::Value *)*v831;
              }
              else
              {
                v950 = 0;
                v938 = &byte_1C871356D;
              }
              v832 = *(llvm::Constant ***)(v967[1] + 8);
              v833 = *v832;
              __base[0] = &v1004;
              __base[1] = (void *)0x4000000000;
              sub_1C4848C0C((unsigned int *)__base, (unint64_t)v940, 0);
              v835 = *((unsigned int *)v967 + 4);
              v945 = v822;
              if ((_DWORD)v835)
              {
                for (mm = 0; mm != v835; ++mm)
                {
                  v838 = (_QWORD *)(v967[1] + 16 * mm);
                  v839 = *v838;
                  v840 = (llvm::Constant **)v838[1];
                  v841 = *(unsigned int *)(*v838 + 32);
                  if (v841 >= 0x41)
                  {
                    v843 = (void *)operator new[]();
                    memcpy(v843, *(const void **)(v839 + 24), ((unint64_t)(v841 + 63) >> 3) & 0x3FFFFFF8);
                    v844 = 0;
                    v845 = *v962;
                    v846 = (unint64_t)(v841 + 63) >> 6;
                    v847 = (unint64_t *)v843;
                    v848 = v846;
                    do
                    {
                      v849 = *v845++;
                      v850 = *v847 - v849;
                      v851 = *v847 < v849;
                      v852 = *v847 + ~v849;
                      if (v844)
                      {
                        v844 = v852 >= *v847;
                      }
                      else
                      {
                        v852 = v850;
                        v844 = v851;
                      }
                      *v847++ = v852;
                      --v848;
                    }
                    while (v848);
                    *((_QWORD *)v843 + (v846 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v841;
                  }
                  else
                  {
                    v842 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v841;
                    if (!(_DWORD)v841)
                      v842 = 0;
                    v843 = (void *)(v842 & (*(_QWORD *)(v839 + 24) - (_QWORD)*v962));
                  }
                  v976 = v841;
                  __dst = v843;
                  v853 = sub_1C47EE5B8((uint64_t ***)&__dst, 0xFFFFFFFFFFFFFFFFLL);
                  if (v976 >= 0x41 && __dst)
                    MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
                  *((_QWORD *)__base[0] + (_QWORD)v853) = v840;
                  if (v840 != v832)
                    v832 = 0;
                }
                v836 = *((unsigned int *)v967 + 4);
                v822 = v945;
              }
              else
              {
                v836 = 0;
              }
              v854 = (llvm::Type *)((char *)v953 + 1);
              if ((unint64_t)v940 <= v836)
              {
                if (v832)
                {
                  v856 = 0;
                  goto LABEL_1299;
                }
              }
              else
              {
                v855 = 0;
                do
                {
                  if (!*((_QWORD *)__base[0] + (_QWORD)v855))
                    *((_QWORD *)__base[0] + (_QWORD)v855) = v822;
                  v855 = (llvm::Type *)((char *)v855 + 1);
                }
                while (v940 != v855);
                if (v832 == v822 && v832)
                {
                  v856 = 0;
                  goto LABEL_1299;
                }
              }
              v857 = *((_DWORD *)v833 + 2);
              if (v857 != 13)
                goto LABEL_1292;
              v957 = v833;
              v858 = 1;
              v976 = 1;
              __dst = 0;
              LODWORD(v1011) = 1;
              v1010 = 0;
              v859 = 0;
              if (v953 == (uint64_t *)-1)
              {
LABEL_1236:
                llvm::ConstantInt::get(*v933, (llvm::LLVMContext *)&v1010, v834);
                if (v1011 >= 0x41 && v1010)
                  MEMORY[0x1CAA32F9C](v1010, 0x1000C8000313F17);
                if (v858 >= 0x41 && v859)
                  MEMORY[0x1CAA32F9C](v859, 0x1000C8000313F17);
                v856 = 1;
                goto LABEL_1299;
              }
              v860 = 0;
              v861 = 1;
              while (2)
              {
                v862 = *((_QWORD *)__base[0] + (_QWORD)v860);
                if (v862)
                  v863 = *(_BYTE *)(v862 + 16) == 16;
                else
                  v863 = 0;
                if (!v863)
                  goto LABEL_1285;
                if (!v860)
                {
LABEL_1273:
                  v858 = *(_DWORD *)(v862 + 32);
                  if (v861 > 0x40 || v858 > 0x40)
                  {
                    llvm::APInt::reallocate((uint64_t)&__dst, *(_DWORD *)(v862 + 32));
                    v858 = v976;
                    if (v976 <= 0x40)
                    {
                      v859 = *(char **)(v862 + 24);
                      __dst = v859;
                    }
                    else
                    {
                      v859 = (char *)__dst;
                      memcpy(__dst, *(const void **)(v862 + 24), (((unint64_t)v976 + 63) >> 3) & 0x3FFFFFF8);
                    }
                  }
                  else
                  {
                    v859 = *(char **)(v862 + 24);
                    __dst = v859;
                    v976 = v858;
                  }
                  v861 = v858;
                  v12 = v860 == v953;
                  v860 = (uint64_t *)((char *)v860 + 1);
                  if (v12)
                    goto LABEL_1236;
                  continue;
                }
                break;
              }
              v864 = *(unsigned int *)(v862 + 32);
              if (v864 >= 0x41)
              {
                v867 = ((unint64_t)(v864 + 63) >> 3) & 0x3FFFFFF8;
                v866 = (char *)operator new[]();
                memcpy(v866, *(const void **)(v862 + 24), v867);
                v868 = 0;
                v869 = 0;
                v870 = (unint64_t)(v864 + 63) >> 6;
                do
                {
                  v871 = *(_QWORD *)&v866[v868];
                  v872 = *(_QWORD *)&v859[v868];
                  v873 = v871 - v872;
                  v874 = v871 < v872;
                  v875 = v871 + ~v872;
                  v876 = v875 >= v871;
                  if (v869)
                  {
                    v869 = v876;
                  }
                  else
                  {
                    v875 = v873;
                    v869 = v874;
                  }
                  *(_QWORD *)&v866[v868] = v875;
                  v868 += 8;
                }
                while (8 * v870 != v868);
                *(_QWORD *)&v866[8 * (v870 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v864;
                if (v860 == (uint64_t *)1)
                  goto LABEL_1263;
                if (memcmp(v866, (const void *)v1010, v867))
                {
                  MEMORY[0x1CAA32F9C](v866, 0x1000C8000313F17);
LABEL_1285:
                  if (v1011 >= 0x41 && v1010)
                    MEMORY[0x1CAA32F9C](v1010, 0x1000C8000313F17);
                  v854 = (llvm::Type *)((char *)v953 + 1);
                  v833 = v957;
                  if (v861 >= 0x41 && v859)
                    MEMORY[0x1CAA32F9C](v859, 0x1000C8000313F17);
                  v857 = *((_DWORD *)v957 + 2);
LABEL_1292:
                  if (v857 == 13
                    && (v877 = v857 >> 8, (unint64_t)v854 < 0xFFFFFFFF / (v857 >> 8))
                    && (v878 = *(_QWORD *)(v959 + 40)) != 0)
                  {
                    v879 = v877 * (_DWORD)v854;
                    v880 = *(unsigned __int8 **)(v959 + 32);
                    while (v879 > *v880)
                    {
                      ++v880;
                      if (!--v878)
                        goto LABEL_1298;
                    }
                    v976 = v879;
                    if (v879 > 0x40)
                      llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 0, 0);
                    else
                      __dst = 0;
                    v886 = (char *)v953 + 1;
                    if (v953 != (uint64_t *)-1)
                    {
                      do
                      {
                        sub_1C4888094((uint64_t)&__dst, *((_DWORD *)v833 + 2) >> 8);
                        v887 = *((_QWORD *)__base[0] + (_QWORD)--v886);
                        if (*(unsigned __int8 *)(v887 + 16) - 11 >= 2)
                        {
                          llvm::APInt::zext((llvm::APInt *)(v887 + 24), v976, (uint64_t)&v1010);
                          if (v976 > 0x40)
                          {
                            v888 = __dst;
                            v889 = (uint64_t *)v1010;
                            v890 = ((unint64_t)v976 + 63) >> 6;
                            do
                            {
                              v891 = *v889++;
                              *v888++ |= v891;
                              --v890;
                            }
                            while (v890);
                          }
                          else
                          {
                            __dst = (void *)((unint64_t)__dst | v1010);
                          }
                          if (v1011 >= 0x41 && v1010)
                            MEMORY[0x1CAA32F9C](v1010, 0x1000C8000313F17);
                        }
                      }
                      while (v886);
                    }
                    llvm::ConstantInt::get(*v933, (llvm::LLVMContext *)&__dst, v834);
                    if (v976 >= 0x41 && __dst)
                      MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
                    v856 = 2;
                  }
                  else
                  {
LABEL_1298:
                    llvm::ArrayType::get(v833, v854);
                    v882 = v881;
                    v883 = llvm::ConstantArray::get(v881, (llvm::Type *)__base[0], LODWORD(__base[1]));
                    v884 = operator new(0x78uLL);
                    v884[13] = v884[13] & 0x38000000 | 1;
                    *(_QWORD *)v884 = 0;
                    *((_QWORD *)v884 + 1) = 0;
                    *((_QWORD *)v884 + 2) = 0;
                    *((_QWORD *)v884 + 3) = v884 + 8;
                    v979 = 1283;
                    __dst = "switch.table.";
                    v977 = v938;
                    v978 = v950;
                    llvm::GlobalVariable::GlobalVariable((uint64_t)(v884 + 8), (uint64_t)v933, v882, 1, 8, (uint64_t)v883, (uint64_t)&__dst, 0, 0, 0, 0);
                    v884[16] = v884[16] & 0xFFFFFF3F | 0x80;
                    llvm::DataLayout::getAlignment(v959, (uint64_t)v833);
                    v884[16] = ((v885 << 16) + 0x10000) | v884[16] & 0xFFC0FFFF;
                    v856 = 3;
                  }
LABEL_1299:
                  if (__base[0] != &v1004)
                    free(__base[0]);
                  __asm { BR              X9 }
                }
              }
              else
              {
                v865 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v864;
                if (!(_DWORD)v864)
                  v865 = 0;
                v866 = (char *)(v865 & (*(_QWORD *)(v862 + 24) - (_QWORD)v859));
                if (v860 != (uint64_t *)1)
                {
                  if (v866 != (char *)v1010)
                    goto LABEL_1285;
                  goto LABEL_1273;
                }
LABEL_1263:
                if (v864 <= 0x40 && v1011 <= 0x40)
                {
                  v1010 = (unint64_t)v866;
                  LODWORD(v1011) = v864;
                  goto LABEL_1273;
                }
                llvm::APInt::reallocate((uint64_t)&v1010, v864);
                if (v1011 <= 0x40)
                  v1010 = (unint64_t)v866;
                else
                  memcpy((void *)v1010, v866, (((unint64_t)v1011 + 63) >> 3) & 0x3FFFFFF8);
                if (v864 < 0x41 || !v866)
                  goto LABEL_1273;
              }
              MEMORY[0x1CAA32F9C](v866, 0x1000C8000313F17);
              goto LABEL_1273;
            }
            v893 = *((_DWORD *)a2 + 5);
            if ((v893 & 0x40000000) != 0)
              v894 = (char *)*((_QWORD *)a2 - 1);
            else
              v894 = &a2[-32 * (v893 & 0x7FFFFFF)];
            v899 = *((_QWORD *)v894 + 4) | 4;
            if ((unint64_t)v949 >= v944)
            {
              v900 = (v949 - __p) >> 4;
              v901 = v900 + 1;
              if ((unint64_t)(v900 + 1) >> 60)
                goto LABEL_1427;
              if ((uint64_t)(v944 - (_QWORD)__p) >> 3 > v901)
                v901 = (uint64_t)(v944 - (_QWORD)__p) >> 3;
              if (v944 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0)
                v902 = 0xFFFFFFFFFFFFFFFLL;
              else
                v902 = v901;
              if (v902)
              {
                if (v902 >> 60)
                  goto LABEL_1429;
                v903 = (char *)operator new(16 * v902);
              }
              else
              {
                v903 = 0;
              }
              v923 = (llvm::BasicBlock **)&v903[16 * v900];
              v944 = (unint64_t)&v903[16 * v902];
              *v923 = v947;
              v923[1] = (llvm::BasicBlock *)v899;
              v931 = (llvm::Value *)(v923 + 2);
              if (v949 == __p)
              {
                v924 = (llvm::Value *)&v903[16 * v900];
                v925 = __p;
              }
              else
              {
                v925 = __p;
                v926 = v949;
                do
                {
                  v924 = (llvm::Value *)(v923 - 2);
                  *((_OWORD *)v923 - 1) = *((_OWORD *)v926 - 1);
                  v926 = (llvm::Value *)((char *)v926 - 16);
                  v923 -= 2;
                }
                while (v926 != __p);
              }
              if (v925)
                operator delete(__p);
              __p = v924;
            }
            else
            {
              *(_QWORD *)v949 = v947;
              *((_QWORD *)v949 + 1) = v899;
              v816 = (llvm::Value *)((char *)v949 + 16);
LABEL_1185:
              v931 = v816;
            }
            v817 = v943;
            goto LABEL_1190;
          }
          v816 = v949;
          goto LABEL_1185;
        }
        continue;
      }
    }
    break;
  }
  if (__base[0] != &v1004)
    free(__base[0]);
  v654 = 0;
  v4 = (_QWORD **)a1;
LABEL_1365:
  if (v985 != v987)
    free(v985);
  if ((__src & 1) == 0)
    MEMORY[0x1CAA32FB4](v989, 8);
  if ((v992 & 1) == 0)
    MEMORY[0x1CAA32FB4](v993, 8);
  sub_1C63B7FDC((uint64_t)v998);
  if ((v654 & 1) != 0)
    goto LABEL_672;
LABEL_698:
  v476 = *((_DWORD *)a2 + 5);
  if ((v476 & 0x40000000) != 0)
    v477 = (char *)*((_QWORD *)a2 - 1);
  else
    v477 = &a2[-32 * (v476 & 0x7FFFFFF)];
  v478 = *(_DWORD *)(**(_QWORD **)v477 + 8);
  if (v478 >> 8 <= 0x40)
  {
    v479 = v4[2];
    v480 = v479[5];
    if (v480)
    {
      v481 = (unsigned __int8 *)v479[4];
      v482 = BYTE1(v478);
      while (*v481 < v482)
      {
        result = 0;
        ++v481;
        if (!--v480)
          return result;
      }
      v497 = ((v476 >> 1) & 0x3FFFFFF) - 1;
      if (v497 >= 4)
      {
        v498 = 0;
        LODWORD(v499) = 0;
        __base[0] = &v1004;
        __base[1] = (void *)0x400000000;
        v500 = 2 * v497;
        do
        {
          v501 = *((_DWORD *)a2 + 5);
          if ((v501 & 0x40000000) != 0)
            v502 = (char *)*((_QWORD *)a2 - 1);
          else
            v502 = &a2[-32 * (v501 & 0x7FFFFFF)];
          v503 = *(_QWORD ***)&v502[32 * (((_DWORD)v498 + 2) & 0xFFFFFFFE)];
          v504 = *((_DWORD *)v503 + 8);
          if (v504 > 0x40)
            v505 = *v503[3];
          else
            v505 = (uint64_t)((_QWORD)v503[3] << -(char)v504) >> -(char)v504;
          if (v499 >= HIDWORD(__base[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__base, (uint64_t)&v1004, v499 + 1, 8);
            LODWORD(v499) = __base[1];
          }
          *((_QWORD *)__base[0] + v499) = v505;
          v499 = ++LODWORD(__base[1]);
          v498 += 2;
        }
        while (v500 != v498);
        if (v499 >= 2)
        {
          qsort(__base[0], v499, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C5D0F734);
          LODWORD(v499) = __base[1];
        }
        v522 = (unint64_t *)__base[0];
        v523 = v499 - 1;
        v524 = *(_QWORD *)__base[0];
        v525 = 100 * v499;
        if (v525 >= 40 * (*((_QWORD *)__base[0] + v523) - *(_QWORD *)__base[0]) + 40)
          goto LABEL_804;
        if ((_DWORD)v499)
        {
          v526 = 8 * v499;
          v527 = v526;
          v528 = __base[0];
          do
          {
            *v528++ -= v524;
            v527 -= 8;
          }
          while (v527);
          v529 = 64;
          v530 = 8 * v499;
          v531 = v522;
          do
          {
            v532 = *v531++;
            v533 = __clz(__rbit64(v532));
            if (v529 >= v533)
              v529 = v533;
            v530 -= 8;
          }
          while (v530);
          if (v529)
          {
            v534 = v522;
            do
            {
              *v534++ >>= v529;
              v526 -= 8;
            }
            while (v526);
          }
        }
        else
        {
          v529 = 64;
        }
        if (v525 < 40 * (v522[v523] - *v522) + 40)
        {
LABEL_804:
          v538 = 0;
          goto LABEL_888;
        }
        v539 = *((_DWORD *)a2 + 5);
        if ((v539 & 0x40000000) != 0)
          v540 = (uint64_t **)*((_QWORD *)a2 - 1);
        else
          v540 = (uint64_t **)&a2[-32 * (v539 & 0x7FFFFFF)];
        v543 = **v540;
        v544 = a3;
        *(_QWORD *)(a3 + 48) = *((_QWORD *)a2 + 5);
        *(_QWORD *)(a3 + 56) = a2 + 24;
        v545 = (llvm::APInt *)*((_QWORD *)a2 + 6);
        v998[0] = v545;
        if (v545)
        {
          llvm::MetadataTracking::track((uint64_t)v998, (unsigned __int8 *)v545, 2);
          v544 = a3;
          v546 = v998[0];
        }
        else
        {
          v546 = 0;
        }
        sub_1C4774EF4(v544, 0, (uint64_t)v546);
        if (v998[0])
          llvm::MetadataTracking::untrack((uint64_t)v998, (unsigned __int8 *)v998[0]);
        v548 = *(llvm::ConstantInt **)v543;
        v549 = *(_DWORD *)(v543 + 8);
        LODWORD(v998[1]) = v549 >> 8;
        if (v549 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)v998, v529, 0);
        }
        else
        {
          if (v549 <= 0xFF)
            v550 = 0;
          else
            v550 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v549);
          v998[0] = (llvm::APInt *)(v550 & v529);
        }
        v552 = llvm::ConstantInt::get(v548, (llvm::LLVMContext *)v998, v547);
        if (LODWORD(v998[1]) >= 0x41 && v998[0])
          MEMORY[0x1CAA32F9C](v998[0], 0x1000C8000313F17);
        v553 = *((_DWORD *)a2 + 5);
        if ((v553 & 0x40000000) != 0)
          v554 = (uint64_t *)*((_QWORD *)a2 - 1);
        else
          v554 = (uint64_t *)&a2[-32 * (v553 & 0x7FFFFFF)];
        v555 = *v554;
        v556 = *(llvm::ConstantInt **)v543;
        v557 = *(_DWORD *)(v543 + 8);
        LODWORD(v998[1]) = v557 >> 8;
        if (v557 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)v998, v524, 0);
        }
        else
        {
          if (v557 <= 0xFF)
            v558 = 0;
          else
            v558 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v557);
          v998[0] = (llvm::APInt *)(v558 & v524);
        }
        v559 = llvm::ConstantInt::get(v556, (llvm::LLVMContext *)v998, v551);
        if (LODWORD(v998[1]) >= 0x41 && v998[0])
          MEMORY[0x1CAA32F9C](v998[0], 0x1000C8000313F17);
        v1001 = 257;
        v560 = (llvm::ConstantInt **)sub_1C47733F8(a3, v555, (uint64_t)v559, (uint64_t)v998, 0, 0);
        v1001 = 257;
        v561 = (_QWORD *)sub_1C506ED1C(a3, (uint64_t)v560, (uint64_t)v552, (uint64_t)v998, 0);
        v562 = (*(_DWORD *)(v543 + 8) >> 8) - v529;
        v1001 = 257;
        v563 = llvm::ConstantInt::get(*v560, v562, 0);
        v564 = sub_1C506E874(a3, (uint64_t)v560, (uint64_t)v563, (uint64_t)v998, 0, 0);
        v1001 = 257;
        v565 = (llvm::Value *)sub_1C4773594(a3, v561, v564, (uint64_t)v998);
        v566 = *((_DWORD *)a2 + 5);
        if ((v566 & 0x40000000) != 0)
          v567 = (llvm::Value **)*((_QWORD *)a2 - 1);
        else
          v567 = (llvm::Value **)&a2[-32 * (v566 & 0x7FFFFFF)];
        v4 = (_QWORD **)a1;
        llvm::User::replaceUsesOfWith((llvm::User *)a2, *v567, v565);
        v969 = ((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFFu) - 1;
        if (((*((_DWORD *)a2 + 5) >> 1) & 0x3FFFFFF) != 1)
        {
          v568 = 0;
          v569 = (uint64_t ***)((char *)v552 + 24);
          do
          {
            v570 = *((_DWORD *)a2 + 5);
            if ((v570 & 0x40000000) != 0)
              v571 = (char *)*((_QWORD *)a2 - 1);
            else
              v571 = &a2[-32 * (v570 & 0x7FFFFFF)];
            v572 = (2 * v568 + 2);
            v573 = *(_QWORD ***)&v571[32 * v572];
            v574 = *(unsigned int *)(v543 + 8);
            v575 = v574 >> 8;
            LODWORD(v998[1]) = *(_DWORD *)(v543 + 8) >> 8;
            if (v574 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)v998, v524, 0);
              LODWORD(v575) = v998[1];
            }
            else
            {
              if (v574 <= 0xFF)
                v576 = 0;
              else
                v576 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v574);
              v998[0] = (llvm::APInt *)(v576 & v524);
            }
            if (v575 > 0x40)
            {
              llvm::APInt::flipAllBitsSlowCase((uint64_t)v998);
            }
            else
            {
              if ((_DWORD)v575)
                v577 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v575;
              else
                v577 = 0;
              v998[0] = (llvm::APInt *)(v577 & ~(uint64_t)v998[0]);
            }
            llvm::APInt::operator++((uint64_t)v998);
            v578 = v998[1];
            if (LODWORD(v998[1]) >= 0x41)
            {
              v595 = 0;
              v596 = v998[0];
              v597 = v573[3];
              v598 = ((unint64_t)LODWORD(v998[1]) + 63) >> 6;
              v599 = v598;
              do
              {
                v600 = *v597++;
                v601 = v600 + *(_QWORD *)v596;
                v602 = v601 + 1 <= *(_QWORD *)v596;
                if (v595)
                {
                  ++v601;
                  v595 = v602;
                }
                else
                {
                  v595 = v601 < *(_QWORD *)v596;
                }
                *(_QWORD *)v596 = v601;
                v596 = (llvm::APInt *)((char *)v596 + 8);
                --v599;
              }
              while (v599);
              *((_QWORD *)v998[0] + (v598 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v578;
              v578 = v998[1];
              v580 = v998[0];
              if (LODWORD(v998[1]) > 0x40)
              {
                v998[0] = (llvm::APInt *)operator new[]();
                v581 = LODWORD(v998[1]);
                memcpy(v998[0], v580, (((unint64_t)LODWORD(v998[1]) + 63) >> 3) & 0x3FFFFFF8);
                v582 = 0;
                goto LABEL_853;
              }
            }
            else
            {
              v579 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v998[1]);
              if (!LODWORD(v998[1]))
                v579 = 0;
              v580 = (llvm::APInt *)(v579 & ((unint64_t)v998[0] + (unint64_t)v573[3]));
            }
            v998[0] = v580;
            v581 = v578;
            v582 = 1;
LABEL_853:
            v583 = sub_1C47EE5B8(v569, v581);
            v584 = (const llvm::APInt *)v583;
            if (LODWORD(v998[1]) > 0x40)
            {
              llvm::APInt::tcShiftRight(v998[0], (unint64_t *)(((unint64_t)LODWORD(v998[1]) + 63) >> 6), v583);
              v4 = (_QWORD **)a1;
            }
            else
            {
              v4 = (_QWORD **)a1;
              if (LODWORD(v998[1]) == (_DWORD)v583)
                v998[0] = 0;
              else
                v998[0] = (llvm::APInt *)((unint64_t)v998[0] >> (char)v583);
            }
            v585 = llvm::ConstantInt::get((llvm::ConstantInt **)v543, (llvm::Type *)v998, v584);
            v586 = *((_DWORD *)a2 + 5);
            if ((v586 & 0x40000000) != 0)
              v587 = (char *)*((_QWORD *)a2 - 1);
            else
              v587 = &a2[-32 * (v586 & 0x7FFFFFF)];
            v588 = (llvm::Value ***)&v587[32 * v572];
            if (*v588)
            {
              *v588[2] = (llvm::Value *)v588[1];
              v594 = v588[1];
              if (v594)
                v594[2] = (llvm::Value *)v588[2];
            }
            *v588 = v585;
            if (v585)
            {
              v591 = v585[1];
              v589 = (llvm::Value ****)(v585 + 1);
              v590 = v591;
              v592 = &v587[32 * v572];
              *((_QWORD *)v592 + 1) = v591;
              if (v591)
                *((_QWORD *)v590 + 2) = v592 + 8;
              *((_QWORD *)v592 + 2) = v589;
              *v589 = v588;
            }
            if (LODWORD(v998[1]) >= 0x41 && v998[0])
              MEMORY[0x1CAA32F9C](v998[0], 0x1000C8000313F17);
            if (v580)
              v593 = v582;
            else
              v593 = 1;
            if ((v593 & 1) == 0)
              MEMORY[0x1CAA32F9C](v580, 0x1000C8000313F17);
            ++v568;
          }
          while (v568 != v969);
        }
        v538 = 1;
LABEL_888:
        if (__base[0] != &v1004)
          free(__base[0]);
        if (v538)
          goto LABEL_672;
      }
    }
  }
  return 0;
}

uint64_t sub_1C5F9705C(llvm::Constant *this, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t i;
  uint64_t v11;
  int v12;
  llvm::Value *PersonalityFn;
  const llvm::Value *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;

  if (!this)
  {
    LOBYTE(v6) = 0;
    return v6 & 1;
  }
  v4 = 1;
  do
  {
    while (1)
    {
      if (*((unsigned __int8 *)this + 16) > 0x14u)
        goto LABEL_95;
      v5 = a2;
      v6 = *(_QWORD *)(a2 + 8);
      if (!v6)
        return v6 & 1;
      if ((llvm::Constant::isNullValue(this) & 1) == 0 && *((unsigned __int8 *)this + 16) - 11 > 1)
        goto LABEL_95;
      a2 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24);
      v7 = *(_QWORD *)(a2 + 40);
      if (a2 == v5 || v7 != *(_QWORD *)(v5 + 40))
        goto LABEL_95;
      v9 = *(__int16 *)(v7 + 18);
      if ((v9 & 0x80000000) == 0)
      {
        v16 = *(_QWORD *)(v7 + 48);
        if (v16 != v7 + 40)
        {
          v17 = 0;
          do
          {
            v18 = v16 - 24;
            if (!v16)
              v18 = 0;
            *(_DWORD *)(v18 + 56) = v17++;
            v16 = *(_QWORD *)(v16 + 8);
          }
          while (v16 != v7 + 40);
        }
        *(_WORD *)(v7 + 18) = v9 | 0x8000;
      }
      if (*(_DWORD *)(a2 + 56) < *(_DWORD *)(v5 + 56))
        goto LABEL_95;
      for (i = *(_QWORD *)(v5 + 32); i != a2 + 24; i = *(_QWORD *)(i + 8))
      {
        LOBYTE(v6) = 0;
        if (i)
          v11 = i - 24;
        else
          v11 = 0;
        v12 = *(unsigned __int8 *)(v11 + 16);
        if (v12 == 29 || v12 == 35)
          return v6 & 1;
        if (v12 == 80)
        {
          PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(*(llvm::Function **)(*(_QWORD *)(v11 + 40)
                                                                                             + 56));
          if (llvm::classifyEHPersonality(PersonalityFn, v14) != 10)
            goto LABEL_95;
        }
        else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v11) & 1) != 0
               || !llvm::Instruction::willReturn((llvm::Instruction *)v11))
        {
          goto LABEL_95;
        }
      }
      v15 = *(unsigned __int8 *)(a2 + 16);
      if (!a2 || v15 != 62)
        break;
      if (*(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) != v5)
        goto LABEL_95;
      if ((*(_BYTE *)(a2 + 17) & 2) == 0
        || (llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)a2) & 1) == 0)
      {
        v4 = 0;
      }
    }
  }
  while (a2 && v15 == 77);
  if (a2 && v15 == 60)
  {
    if ((*(_WORD *)(a2 + 18) & 1) == 0)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
      v20 = **(_QWORD **)(a2 - 32);
      v21 = *(_DWORD *)(v20 + 8);
      if ((v21 & 0xFE) == 0x12)
        v21 = *(_DWORD *)(**(_QWORD **)(v20 + 16) + 8);
      if (!v19 || (v22 = *(_QWORD *)(v19 + 112)) == 0 || (*(_BYTE *)(v22 + 17) & 1) == 0)
      {
        LOBYTE(v6) = v21 < 0x100;
        return v6 & 1;
      }
    }
    goto LABEL_95;
  }
  if (a2 && v15 == 61)
  {
    if ((*(_WORD *)(a2 + 18) & 1) == 0)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
      v24 = *(_QWORD *)(a2 - 32);
      v25 = *(_DWORD *)(*(_QWORD *)v24 + 8);
      if ((v25 & 0xFE) == 0x12)
        v25 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v24 + 16) + 8);
      if (v23)
      {
        v26 = *(_QWORD *)(v23 + 112);
        if (v26)
        {
          LOBYTE(v6) = 0;
          if ((*(_BYTE *)(v26 + 17) & 1) != 0 || v25 > 0xFF)
            return v6 & 1;
LABEL_94:
          LOBYTE(v6) = v24 == v5;
          return v6 & 1;
        }
      }
      if (v25 <= 0xFF)
        goto LABEL_94;
    }
LABEL_95:
    LOBYTE(v6) = 0;
    return v6 & 1;
  }
  LOBYTE(v6) = 0;
  v27 = v15 - 33;
  if (v27 <= 0x33 && ((1 << v27) & 0x8000000000041) != 0)
  {
    if (llvm::Constant::isNullValue(this))
    {
      v28 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 112);
        if (v29)
        {
          if ((*(_BYTE *)(v29 + 17) & 1) != 0)
            goto LABEL_95;
        }
      }
    }
    if (*(_QWORD *)(a2 - 32) != v5)
    {
      if (llvm::Constant::isNullValue(this))
      {
        v30 = *(_DWORD *)(a2 + 20);
        v31 = v30 & 0x7FFFFFF;
        v32 = *(unsigned __int8 *)(a2 + 16);
        if (v32 == 84)
        {
          v33 = 0;
        }
        else if (v32 == 39)
        {
          v33 = (*(_DWORD *)(a2 + 80) + 1);
        }
        else
        {
          v33 = 2;
        }
        v34 = a2 - 32 * v31;
        if (v30 < 0 && (v48 = *(_QWORD *)(v34 - 8), (v48 & 0xFFFFFFFF0) != 0))
          v35 = (*(_DWORD *)(v34 - 12) - *(_DWORD *)(v34 - v48));
        else
          v35 = 0;
        if (v34 == a2 - 32 * v33 - 32 * v35 - 32)
          goto LABEL_95;
        v36 = (32 * v33 + 32 * v35) ^ 0xFFFFFFFFFFFFFFE0;
        v37 = -32 * v31;
        while (1)
        {
          if (*(_QWORD *)(a2 + v37) == v5)
          {
            v38 = (v37 + 32 * (unint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) >> 5;
            if (sub_1C5EB74F8(a2, v38))
            {
              if ((llvm::CallBase::paramHasAttr(a2, v38, 39) & 1) != 0)
                break;
            }
          }
          LOBYTE(v6) = 0;
          v37 += 32;
          if (v36 == v37)
            return v6 & 1;
        }
        LOBYTE(v6) = v4;
        return v6 & 1;
      }
      if (*((unsigned __int8 *)this + 16) - 11 > 1)
        goto LABEL_95;
      v39 = *(_DWORD *)(a2 + 20);
      v40 = v39 & 0x7FFFFFF;
      v41 = *(unsigned __int8 *)(a2 + 16);
      if (v41 == 84)
        v42 = 0;
      else
        v42 = v41 == 39 ? (*(_DWORD *)(a2 + 80) + 1) : 2;
      v43 = a2 - 32 * v40;
      if (v39 < 0 && (v49 = *(_QWORD *)(v43 - 8), (v49 & 0xFFFFFFFF0) != 0))
        v44 = (*(_DWORD *)(v43 - 12) - *(_DWORD *)(v43 - v49));
      else
        v44 = 0;
      if (v43 == a2 - 32 * v42 - 32 * v44 - 32)
        goto LABEL_95;
      v45 = (32 * v42 + 32 * v44) ^ 0xFFFFFFFFFFFFFFE0;
      v46 = -32 * v40;
      while (*(_QWORD *)(a2 + v46) != v5
           || (sub_1C5EB74F8(a2, (v46 + 32 * (unint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF)) >> 5) & 1) == 0)
      {
        LOBYTE(v6) = 0;
        v46 += 32;
        if (v45 == v46)
          return v6 & 1;
      }
    }
    LOBYTE(v6) = 1;
  }
  return v6 & 1;
}

uint64_t sub_1C5F97518(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(result + 64))
    return result;
  v1 = result;
  v2 = *(unsigned int *)(result + 24);
  if (!(_DWORD)v2)
    return result;
  v3 = *(uint64_t **)(result + 16);
  v4 = &v3[v2];
  while (2)
  {
    v5 = *v3;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(v5 + 40) + 48) == v5 + 24 || (v6 = *(_QWORD *)(v5 + 24)) == 0)
      {
        *v3 = 0;
        goto LABEL_12;
      }
      *v3 = v6 - 24;
      result = sub_1C4D99D08(v6 - 24);
      v5 = *v3;
    }
    while ((_DWORD)result);
    if (!v5)
    {
LABEL_12:
      *(_BYTE *)(v1 + 64) = 1;
      return result;
    }
    if (++v3 != v4)
      continue;
    return result;
  }
}

void *sub_1C5F975A8(void *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  *((_BYTE *)result + 64) = 0;
  *((_DWORD *)result + 6) = 0;
  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = result;
    v3 = (uint64_t)result + 16;
    v4 = *(_QWORD *)result;
    v5 = *(_QWORD *)result + 8 * v1;
    v6 = (uint64_t)result + 32;
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)v4 + 40);
      v8 = v7 ? v7 - 24 : 0;
      v9 = *(unsigned __int8 *)(v8 + 16) - 29 >= 0xB ? 0 : v8;
      v10 = (_QWORD *)(v9 + 24);
      if (*(_QWORD *)(*(_QWORD *)(v9 + 40) + 48) == v9 + 24)
        break;
      v11 = (_QWORD *)*v10;
      if (!*v10)
        break;
      while (1)
      {
        result = (void *)sub_1C4D99D08((uint64_t)(v11 - 3));
        if (!(_DWORD)result)
          break;
        if (*(_QWORD **)(v11[2] + 48) != v11)
        {
          v11 = (_QWORD *)*v11;
          if (v11)
            continue;
        }
        goto LABEL_19;
      }
      v12 = *((unsigned int *)v2 + 6);
      if (v12 >= *((unsigned int *)v2 + 7))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v3, v6, v12 + 1, 8);
        v12 = *((unsigned int *)v2 + 6);
      }
      *(_QWORD *)(v2[2] + 8 * v12) = v11 - 3;
      ++*((_DWORD *)v2 + 6);
      v4 += 8;
      if (v4 == v5)
        return result;
    }
LABEL_19:
    *((_BYTE *)v2 + 64) = 1;
  }
  return result;
}

uint64_t sub_1C5F976BC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  if (!*(_BYTE *)(result + 64))
  {
    v1 = result;
    v2 = *(unsigned int *)(result + 24);
    if ((_DWORD)v2)
    {
      v3 = *(uint64_t **)(result + 16);
      v4 = &v3[v2];
      while (2)
      {
        v5 = *v3;
        do
        {
          v7 = v5 + 32;
          v6 = *(_QWORD *)(v5 + 32);
          result = v6 - 24;
          v8 = v6 == *(_QWORD *)(v7 + 8) + 40 || v6 == 0;
          if (v8)
            v9 = 0;
          else
            v9 = v6 - 24;
          *v3 = v9;
          if (v8)
            goto LABEL_16;
          result = sub_1C4D99D08(result);
          v5 = *v3;
        }
        while ((_DWORD)result);
        if (!v5)
        {
LABEL_16:
          *(_BYTE *)(v1 + 64) = 1;
          return result;
        }
        if (++v3 != v4)
          continue;
        break;
      }
    }
  }
  return result;
}

uint64_t sub_1C5F97744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  uint64_t result;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  _QWORD *v23;
  uint64_t v24;
  unsigned int *v25;
  int v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  int64_t v40;
  _BOOL4 v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _QWORD v55[5];

  v55[4] = *MEMORY[0x1E0C80C00];
  if (dword_1ED828AB8 == a8)
    return 0;
  v10 = *(unsigned __int8 *)(a1 + 16);
  if (!a1 || v10 <= 0x1B)
  {
    if (a1 && v10 == 5)
    {
      v51 = v55;
      v52 = (uint64_t)v55;
      v53 = 4;
      v54 = 0;
      v36 = sub_1C53774DC(a1, (llvm::SmallPtrSetImplBase *)&v51);
      if ((void *)v52 != v51)
        free((void *)v52);
      if ((v36 & 1) != 0)
        return 0;
    }
    return 1;
  }
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 == a2)
    return 0;
  v13 = *(_QWORD *)(v12 + 40);
  if (v13 == v12 + 40)
    return 1;
  v14 = v13 - 24;
  if (!v13)
    v14 = 0;
  v15 = *(unsigned __int8 *)(v14 + 16) - 40;
  if (v15 < 0xFFFFFFF5)
    v14 = 0;
  result = 1;
  if (!v13)
    return result;
  v16 = *(_BYTE *)(v14 + 16) == 30 && v15 >= 0xFFFFFFF5;
  if (!v16 || (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) == 3 || *(_QWORD *)(v14 - 32) != a2)
    return result;
  v23 = sub_1C477672C(a3, a1);
  v24 = *(_QWORD *)(a3 + 8);
  v25 = (unsigned int *)(v24 == *(_QWORD *)a3 ? a3 + 20 : a3 + 16);
  if (v23 != (_QWORD *)(v24 + 8 * *v25))
    return 1;
  result = llvm::isSafeToSpeculativelyExecute(a1, 0, 0, 0);
  if (!(_DWORD)result)
    return result;
  v26 = *(_DWORD *)(a1 + 20);
  if ((v26 & 0x40000000) != 0)
  {
    v28 = *(_QWORD **)(a1 - 8);
    v27 = v26 & 0x7FFFFFF;
  }
  else
  {
    v27 = v26 & 0x7FFFFFF;
    v28 = (_QWORD *)(a1 - 32 * v27);
  }
  v51 = &v53;
  v52 = 0x400000000;
  if (v27 >= 5)
  {
    v50 = v27;
    v49 = v28;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, (uint64_t)&v53, v27, 8);
    v28 = v49;
    v27 = v50;
    v31 = (uint64_t *)v51;
    v29 = v52;
    v30 = v52;
  }
  else
  {
    v29 = 0;
    if (!v27)
    {
      v35 = &v53;
      goto LABEL_40;
    }
    v30 = 0;
    v31 = &v53;
  }
  v32 = 32 * v27;
  v33 = &v31[v30];
  do
  {
    v34 = *v28;
    v28 += 4;
    *v33++ = v34;
    v32 -= 32;
  }
  while (v32);
  v35 = (uint64_t *)v51;
LABEL_40:
  LODWORD(v52) = v29 + v27;
  v37 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)*a7 + 72))(*a7, a1, v35);
  if (v51 != &v53)
  {
    v47 = v37;
    v48 = v38;
    free(v51);
    v38 = v48;
    v37 = v47;
  }
  if (v38 == 1)
  {
    v39 = 1;
    *(_DWORD *)(a4 + 8) = 1;
  }
  else
  {
    v39 = *(_DWORD *)(a4 + 8);
  }
  v40 = *(_QWORD *)a4 + v37;
  if (__OFADD__(*(_QWORD *)a4, v37))
    v40 = (v40 >> 63) ^ 0x8000000000000000;
  *(_QWORD *)a4 = v40;
  v41 = a5 < v40;
  if (v39 != (_DWORD)a6)
    v41 = v39 > (int)a6;
  if (!v41)
    goto LABEL_53;
  if (!byte_1ED8289F8)
    return 0;
  result = 0;
  if (!(v39 | a8) && *(_DWORD *)(a3 + 20) == *(_DWORD *)(a3 + 24))
  {
LABEL_53:
    v42 = *(_DWORD *)(a1 + 20);
    if ((v42 & 0x40000000) != 0)
    {
      v44 = *(_QWORD **)(a1 - 8);
      v43 = v42 & 0x7FFFFFF;
    }
    else
    {
      v43 = v42 & 0x7FFFFFF;
      v44 = (_QWORD *)(a1 - 32 * v43);
    }
    if (v43)
    {
      v45 = (a8 + 1);
      v46 = 32 * v43;
      while ((sub_1C5F97744(*v44, a2, a3, a4, a5, a6, a7, v45) & 1) != 0)
      {
        v44 += 4;
        v46 -= 32;
        if (!v46)
          goto LABEL_60;
      }
      return 0;
    }
LABEL_60:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, a1);
    return 1;
  }
  return result;
}

BOOL sub_1C5F97AC0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unsigned int v4;
  unsigned int v6;

  if (*(_BYTE *)(a1 + 16) != 85)
    return 0;
  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x40000000) != 0)
    v2 = *(_QWORD *)(a1 - 8);
  else
    v2 = a1 - 32 * (v1 & 0x7FFFFFF);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 32) + 16);
  if (v4 <= 0x14 && v4 != 5)
    return 1;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 64) + 16);
  return v6 < 0x15 && v6 != 5;
}

uint64_t sub_1C5F97B20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  llvm *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t SinglePredecessor;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  const llvm::Value *v20;
  unsigned __int8 *v21;
  uint64_t *v22;
  _BOOL4 v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  llvm::ConstantInt ***v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  const llvm::APInt *v42;
  int v43;
  llvm::DataLayout **v44;
  llvm::DataLayout *v45;
  int v46;
  llvm::DataLayout **v47;
  const void **v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int8x8_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  const llvm::APInt *v56;
  llvm::DataLayout **v57;
  const llvm::APInt *v58;
  uint64_t v59;
  _QWORD *v60;
  BOOL v61;
  int v62;
  llvm::DataLayout **v63;
  const void **v64;
  size_t v65;
  int8x8_t v66;
  uint8x8_t v67;
  size_t v68;
  uint8x8_t v69;
  unint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  size_t v75;
  char *v76;
  uint64_t v77;
  int v78;
  uint8x8_t v79;
  uint64_t v80;
  int8x8_t v81;
  uint64_t v82;
  llvm::ConstantInt *v83;
  unint64_t v84;
  unint64_t v85;
  void *v86;
  llvm::ValueHandleBase *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint8x8_t v91;
  size_t v92;
  uint64_t v93;
  size_t v94;
  char *v95;
  uint64_t v96;
  int v97;
  char v98;
  uint64_t v99;
  llvm::ConstantInt *v100;
  uint64_t v101;
  void *v102;
  char v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t *v110;
  _QWORD *v111;
  uint64_t v112;
  llvm::ValueHandleBase *v113;
  uint64_t v114;
  size_t v115;
  const void *v116;
  llvm::ConstantInt **v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  llvm::ValueHandleBase *v121;
  uint64_t v122;
  llvm::DataLayout *v123;
  uint64_t v124;
  int v125;
  int64_t v126;
  unint64_t v127;
  int v128;
  size_t v129;
  char v130;
  unsigned __int8 *v131;
  unsigned __int8 **v132;
  _BOOL4 v133;
  unsigned int v134;
  _BYTE *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  llvm::BasicBlock *v145;
  llvm::BasicBlock *v146;
  uint64_t v147;
  uint64_t v148;
  llvm *v149;
  llvm::Instruction *v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  char *v157;
  uint64_t v158;
  unsigned __int8 **v159;
  char *v160;
  llvm::BranchInst *v161;
  llvm::BasicBlock *v162;
  llvm::BasicBlock *v163;
  uint64_t v164;
  _QWORD *v165;
  unsigned int v166;
  llvm **v167;
  void *v168;
  void *v169;
  uint64_t v170;
  int v171;
  char *v172;
  unsigned __int8 **v173;
  unsigned __int8 **v174;
  unsigned __int8 **v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t i;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t result;
  llvm *v190;
  char v191;
  unsigned __int16 isImpliedCondition;
  const llvm::APInt *v193;
  llvm::BasicBlock *v194;
  uint64_t v195;
  llvm::BasicBlock *v196;
  uint64_t v197;
  llvm::MemoryDependenceResults *v198;
  uint64_t *v199;
  llvm::DataLayout *v200;
  uint64_t v201;
  uint64_t v202;
  llvm::DataLayout *v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  llvm::Instruction *v211;
  const llvm::Instruction *v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  char v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  BOOL v221;
  unsigned int v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t *v226;
  llvm::BasicBlock *v227;
  llvm::BasicBlock *v228;
  uint64_t v229;
  llvm::ValueSymbolTable *v230;
  uint64_t v231;
  llvm::ValueSymbolTable *v232;
  llvm::BasicBlock *j;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t *v239;
  uint64_t v240;
  llvm::ValueSymbolTable *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *k;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  llvm::BasicBlock *v250;
  llvm::BasicBlock *v251;
  uint64_t v252;
  llvm::ValueSymbolTable *v253;
  uint64_t v254;
  llvm::ValueSymbolTable *v255;
  llvm::BasicBlock *v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  llvm::Instruction *v265;
  const llvm::Instruction *v266;
  uint64_t v267;
  uint64_t v268;
  llvm::Value *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  llvm::Value **v274;
  llvm::Value *v275;
  int v276;
  int v277;
  uint64_t v278;
  size_t *v279;
  size_t v280;
  unsigned __int8 *v281;
  int v282;
  int v283;
  _QWORD *v284;
  llvm::Value *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  llvm::Value **v290;
  llvm::Value *v291;
  int v292;
  int v293;
  uint64_t v294;
  size_t *v295;
  int v296;
  size_t v297;
  llvm::BasicBlock *v298;
  int v299;
  int v300;
  _QWORD *v301;
  llvm::Value *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  llvm::Value **v307;
  llvm::Value *v308;
  int v309;
  int v310;
  uint64_t v311;
  size_t *v312;
  size_t v313;
  unsigned __int8 *v314;
  int v315;
  int v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  llvm::ValueHandleBase *v320;
  llvm::ConstantInt *v321;
  unsigned int v322;
  char v323;
  _QWORD *v324;
  _QWORD *v325;
  _QWORD *v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t **v330;
  uint64_t v331;
  void (**v332)(void);
  int v333;
  llvm::MemorySSAUpdater *v334;
  uint64_t ***v335;
  uint64_t *v336;
  int v337;
  char *v338;
  unsigned __int8 **v339;
  llvm::ConstantInt *v340;
  uint64_t v341;
  unsigned __int8 *v342;
  uint64_t v343;
  const llvm::Instruction *v344;
  _QWORD *v345;
  unsigned __int8 *v346;
  int v347;
  int v348;
  unsigned int v349;
  uint64_t v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  llvm::Constant *v365;
  llvm::Constant *v366;
  int v367;
  int v368;
  uint64_t n;
  uint64_t v370;
  uint64_t v371;
  unsigned int v372;
  uint64_t v373;
  uint64_t v374;
  unsigned int v375;
  BOOL v376;
  _QWORD *v378;
  uint64_t v379;
  void **p_s2;
  uint64_t v381;
  int v382;
  _QWORD *v383;
  unint64_t v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  uint64_t v393;
  llvm::DataLayout *v394;
  void **v395;
  uint64_t v396;
  int v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unsigned int v405;
  int v406;
  _QWORD *v408;
  uint64_t v409;
  void **v410;
  uint64_t v411;
  _QWORD *v412;
  uint64_t v413;
  void **v414;
  uint64_t v415;
  _QWORD *v416;
  uint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  _QWORD *v420;
  uint64_t v421;
  const char **v422;
  uint64_t v423;
  int v424;
  char v425;
  llvm::DataLayout *v426;
  _QWORD *v427;
  uint64_t ***v428;
  unsigned int v429;
  uint64_t **v431;
  uint64_t v432;
  llvm::DataLayout *v433;
  llvm::ConstantInt *v434;
  unsigned int v435;
  BOOL v436;
  BOOL v437;
  llvm::ConstantInt *v438;
  unsigned int v439;
  char v440;
  uint64_t v441;
  char *v442;
  _QWORD *v443;
  uint64_t v444;
  uint64_t v445;
  _QWORD *v446;
  _QWORD *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  int v451;
  uint64_t v452;
  llvm::DataLayout **v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t *v458;
  uint64_t v459;
  int v460;
  int v461;
  uint64_t v462;
  llvm::DataLayout **v463;
  llvm::DataLayout *v464;
  BOOL v465;
  int v466;
  uint64_t v467;
  llvm::DataLayout **v468;
  llvm::DataLayout *v469;
  llvm::DataLayout *v470;
  llvm::DataLayout *v471;
  _QWORD *v472;
  uint64_t v473;
  uint64_t v474;
  unsigned int v475;
  uint64_t v476;
  uint64_t v477;
  char *v478;
  uint64_t v479;
  uint64_t *v480;
  unsigned __int8 *v481;
  unsigned __int8 *v482;
  _QWORD *v483;
  unsigned __int8 *v484;
  unsigned __int8 *v485;
  uint64_t ii;
  llvm::Instruction *v487;
  int v488;
  uint64_t v489;
  uint64_t v490;
  _QWORD ***v491;
  _QWORD ***v492;
  _QWORD **v493;
  uint64_t ***v494;
  llvm::Type *v495;
  llvm::DSOLocalEquivalent **v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  llvm::Instruction **v502;
  llvm::Instruction *v503;
  int v504;
  int v505;
  llvm::DataLayout **v506;
  llvm::DataLayout *v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t *v518;
  uint64_t v519;
  int v520;
  int v521;
  unint64_t v522;
  void **v523;
  int v524;
  uint64_t v525;
  void **v526;
  uint64_t v527;
  void **v528;
  void *v529;
  void **v530;
  llvm::UndefValue *v531;
  _QWORD **v532;
  uint64_t v533;
  uint64_t v534;
  _BOOL4 v535;
  uint64_t v536;
  int v537;
  uint64_t v538;
  llvm::ValueSymbolTable *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unsigned int v545;
  int v546;
  _QWORD *v548;
  _QWORD *v549;
  _QWORD *v550;
  int v551;
  unsigned int v552;
  uint64_t v553;
  uint64_t v554;
  _QWORD *v555;
  uint64_t v556;
  int v557;
  uint64_t v558;
  _QWORD *v559;
  uint64_t v560;
  _QWORD *v561;
  uint64_t v562;
  uint64_t v563;
  unsigned int v564;
  BOOL v565;
  uint64_t v567;
  uint64_t v568;
  unsigned int v569;
  BOOL v570;
  uint64_t *v572;
  void **v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  BOOL v578;
  const llvm::APInt *v579;
  const llvm::APInt *v580;
  uint64_t v581;
  BOOL v582;
  char v583;
  uint64_t v584;
  char *v585;
  _QWORD *v586;
  uint64_t v587;
  void **v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  int v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  BOOL v606;
  char v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  BOOL v612;
  char v613;
  uint64_t v614;
  unsigned int v615;
  BOOL v616;
  llvm::BasicBlock *v618;
  uint64_t v619;
  unint64_t v620;
  uint64_t v621;
  unint64_t v622;
  _QWORD *v623;
  _QWORD *v624;
  int v625;
  _QWORD *v626;
  _QWORD *v627;
  int v628;
  uint64_t v630;
  uint64_t v631;
  uint64_t *v632;
  uint64_t v633;
  uint64_t v634;
  llvm::BasicBlock *v635;
  _QWORD *v636;
  _QWORD *v637;
  uint64_t v638;
  int v639;
  uint64_t v640;
  uint64_t v641;
  int v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  unsigned int v648;
  int v649;
  uint64_t v651;
  uint64_t v652;
  int v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  unsigned int v659;
  int v660;
  uint64_t v662;
  uint64_t v663;
  uint64_t *v664;
  uint64_t v665;
  uint64_t v666;
  _QWORD *v667;
  uint64_t v668;
  int v669;
  uint64_t v670;
  uint64_t v671;
  int v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unsigned int v678;
  int v679;
  uint64_t v681;
  uint64_t v682;
  int v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unsigned int v689;
  int v690;
  llvm::ConstantInt *v692;
  unsigned int v693;
  char v694;
  llvm::ValueHandleBase *v695;
  uint64_t v696;
  uint64_t v697;
  unsigned int v698;
  BOOL v699;
  uint64_t v701;
  BOOL v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  BOOL v706;
  uint64_t v707;
  _QWORD *v708;
  uint64_t v709;
  unsigned int v710;
  uint64_t v711;
  uint64_t v712;
  _DWORD *v713;
  unsigned int v714;
  uint64_t *v715;
  unsigned __int8 **v716;
  uint64_t ***v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t ****v722;
  uint64_t ***v723;
  int v724;
  int v725;
  _BOOL8 v726;
  uint64_t v727;
  llvm::ConstantInt *v728;
  unint64_t v729;
  unint64_t v730;
  llvm::ValueHandleBase *v731;
  uint64_t v732;
  uint64_t v733;
  llvm::Constant ****v734;
  uint64_t v735;
  uint64_t ***v736;
  char *v737;
  uint64_t **v738;
  uint64_t **v739;
  llvm::Constant **v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  llvm::Constant ***v745;
  llvm::Constant **v746;
  int v747;
  int v748;
  llvm::Constant **v749;
  char *v750;
  llvm::Constant *v751;
  llvm::Constant *v752;
  unsigned __int8 *v753;
  uint64_t v754;
  unsigned __int8 ***v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  _QWORD *v759;
  uint64_t v760;
  uint64_t *v761;
  uint64_t v762;
  uint64_t **v763;
  uint64_t v764;
  uint64_t v765;
  unsigned int v766;
  _QWORD *v767;
  uint64_t v768;
  uint64_t v769;
  _QWORD *v770;
  int ProfMetadata;
  int v772;
  int v773;
  llvm::DataLayout *v774;
  unint64_t v775;
  unint64_t v776;
  void *v777;
  void *v778;
  unint64_t v779;
  unint64_t v780;
  unint64_t v781;
  unint64_t v782;
  unint64_t v783;
  char v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  int v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t *v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t **v804;
  uint64_t *v805;
  int v806;
  int v807;
  uint64_t *v808;
  void *v809;
  char *v810;
  void *v811;
  llvm::Value *Select;
  void *v813;
  void *v814;
  unint64_t v815;
  unint64_t v816;
  unint64_t v817;
  unint64_t v818;
  unint64_t v819;
  unint64_t v820;
  char v821;
  uint64_t v822;
  llvm::Value *v823;
  uint64_t v824;
  _QWORD *v825;
  size_t v826;
  int v827;
  int v828;
  unsigned int v829;
  int v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t m;
  uint64_t v834;
  uint64_t v835;
  int v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t *v845;
  unint64_t v846;
  void **v847;
  void **v848;
  void **v849;
  unint64_t v850;
  void *v851;
  void **v852;
  uint64_t *v853;
  int v854;
  _BYTE *v855;
  char v856;
  int v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t **v863;
  uint64_t *v864;
  int v865;
  int v866;
  uint64_t *v867;
  void *v868;
  char *v869;
  void *v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t *v875;
  uint64_t v876;
  int v877;
  int v878;
  _QWORD *v879;
  uint64_t v880;
  char *v881;
  uint64_t v882;
  int v883;
  uint64_t v884;
  uint64_t v885;
  int v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  _QWORD *v890;
  int v891;
  int v892;
  unsigned int v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  _QWORD *v897;
  int v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t *v901;
  int v902;
  unsigned int v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  int v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t *v911;
  uint64_t v912;
  llvm::ValueSymbolTable *v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t **v916;
  uint64_t v917;
  uint64_t *v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t *v921;
  llvm::Constant ***v922;
  uint64_t *v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t *v926;
  uint64_t v927;
  uint64_t *v928;
  llvm::ValueSymbolTable *v929;
  llvm::ValueSymbolTable *v930;
  uint64_t v931;
  uint64_t v932;
  int v933;
  uint64_t v934;
  int v935;
  uint64_t v936;
  unsigned __int8 *v937;
  int v938;
  unsigned __int8 *v939;
  char **v940;
  llvm::BasicBlock *v941;
  llvm::BasicBlock *v942;
  llvm::BasicBlock *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t *v946;
  uint64_t v947;
  llvm::Value *v948;
  llvm::Value *v949;
  llvm::Value *v950;
  int v951;
  unint64_t __nc;
  unsigned int __n;
  llvm::Value *__na;
  unsigned int __nb;
  int v956;
  uint64_t v957;
  unsigned int v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  char v962;
  const void **v963;
  int v964;
  size_t v965;
  size_t v966;
  size_t v967;
  size_t v968;
  size_t v969;
  size_t v970;
  size_t v971;
  int v972;
  int v973;
  size_t v974;
  int v975;
  size_t v976;
  int v977;
  _QWORD *v978;
  size_t v979;
  uint64_t v980;
  int v981;
  uint64_t v982;
  uint64_t v983;
  _QWORD *v984;
  uint64_t v985;
  _BOOL4 v986;
  _QWORD *v987;
  int v988;
  uint64_t v989;
  int v990;
  uint64_t v991;
  int v992;
  llvm::DataLayout *v993;
  int v994;
  llvm::DataLayout *v995;
  llvm::DataLayout *v996;
  llvm::DataLayout *v997;
  llvm::DomTreeUpdater *v998;
  char v999;
  int v1000;
  llvm::BasicBlock *v1001;
  uint64_t *v1002;
  char v1003;
  uint64_t v1004;
  void **v1005;
  uint64_t v1006;
  uint64_t v1007;
  void *v1008;
  unsigned int v1009;
  llvm::APInt *v1010;
  llvm::DataLayout *v1011;
  _QWORD v1012[3];
  _QWORD *v1013;
  void *v1014[2];
  uint64_t v1015;
  uint64_t v1016;
  __int16 v1017;
  uint64_t *v1018;
  void *v1019;
  uint64_t v1020;
  _BYTE v1021[136];
  void *__s1[2];
  char *v1023;
  int v1024;
  void **v1025;
  __int128 v1026;
  _QWORD v1027[3];
  _QWORD *v1028;
  void *__src[2];
  void *__s2;
  char **v1031;
  uint64_t v1032;
  void **v1033;
  __int128 v1034;
  _QWORD v1035[3];
  _QWORD *v1036;
  void *__p[2];
  const char *v1038;
  int v1039;
  __int16 v1040;
  const char **v1041;
  __int128 v1042;
  _QWORD v1043[3];
  _QWORD *v1044;
  __int128 v1045;
  _QWORD v1046[3];
  _QWORD *v1047;
  __int128 v1048;
  _QWORD v1049[3];
  _QWORD *v1050;
  llvm::DataLayout *v1051[2];
  void *__base[2];
  size_t __nel[2];
  _BYTE v1054[24];
  _BYTE *v1055;
  int v1056;
  char v1057;
  char v1058;
  char v1059;
  unsigned int v1060;
  unint64_t v1061[2];
  _QWORD v1062[3];
  _QWORD *v1063;
  unint64_t v1064[2];
  _BYTE v1065[24];
  _BYTE *v1066;
  uint64_t v1067;

  v1067 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 40) + 10))
    return 0;
  v4 = (llvm *)a2;
  v5 = a1;
  v6 = *(_QWORD *)(a2 + 40);
  if (!sub_1C5F9E444(a1, a2))
    goto LABEL_37;
  SinglePredecessor = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v6);
  if (SinglePredecessor && sub_1C5F9E550(v5, (uint64_t)v4, SinglePredecessor, a3))
  {
LABEL_1110:
    result = 1;
    *(_BYTE *)(v5 + 48) = 1;
    return result;
  }
  llvm::BasicBlock::instructionsWithoutDebug((llvm::BasicBlock *)v6, 1, (uint64_t)v1051);
  *(_OWORD *)v1014 = *(_OWORD *)v1051;
  v8 = &v1015;
  if (__nel[1])
  {
    if ((void **)__nel[1] == __base)
    {
      v1018 = &v1015;
      (*(void (**)(void))(*(_QWORD *)__nel[1] + 24))();
    }
    else
    {
      v1018 = (uint64_t *)(*(uint64_t (**)(void))(*(_QWORD *)__nel[1] + 16))();
    }
  }
  else
  {
    v1018 = 0;
  }
  v9 = v1055;
  if (v1055 == v1054)
  {
    v10 = 4;
    v9 = v1054;
LABEL_12:
    (*(void (**)(void))(*v9 + 8 * v10))();
    goto LABEL_13;
  }
  if (v1055)
  {
    v10 = 5;
    goto LABEL_12;
  }
LABEL_13:
  v11 = (void **)__nel[1];
  if ((void **)__nel[1] == __base)
  {
    v12 = 4;
    v11 = __base;
  }
  else
  {
    if (!__nel[1])
      goto LABEL_16;
    v12 = 5;
  }
  (*((void (**)(void))*v11 + v12))();
LABEL_16:
  v13 = v1014[0];
  v14 = (char *)v1014[0] - 24;
  if (!v1014[0])
    v14 = 0;
  if (v14 == (char *)v4)
    goto LABEL_1797;
  if (v14 == *((char **)v4 - 12))
  {
    do
    {
      v13 = (_QWORD *)v13[1];
      v1014[0] = v13;
      if (v13 == v1014[1])
        break;
      if (!v1018)
        goto LABEL_1459;
      v15 = (*(uint64_t (**)(void))(*v1018 + 48))();
      v13 = v1014[0];
    }
    while ((v15 & 1) == 0);
    v16 = v13 ? (uint64_t)(v13 - 3) : 0;
    if ((llvm *)v16 == v4)
    {
LABEL_1797:
      sub_1C5F9F0E0(v5, (uint64_t)v4, a3);
      if ((v17 & 1) != 0)
      {
        *(_BYTE *)(v5 + 48) = 1;
        if (v1018 == &v1015)
        {
          v18 = 4;
        }
        else
        {
          if (!v1018)
            return 1;
          v18 = 5;
          v8 = v1018;
        }
        (*(void (**)(uint64_t *))(*v8 + 8 * v18))(v8);
        return 1;
      }
    }
  }
  if (v1018 == &v1015)
  {
    v19 = 4;
  }
  else
  {
    if (!v1018)
      goto LABEL_37;
    v19 = 5;
    v8 = v1018;
  }
  (*(void (**)(uint64_t *))(*v8 + 8 * v19))(v8);
LABEL_37:
  v924 = v6;
  v20 = *(const llvm::Value **)(v5 + 16);
  v22 = (uint64_t *)((char *)v4 - 96);
  v21 = (unsigned __int8 *)*((_QWORD *)v4 - 12);
  v927 = v5;
  v936 = (uint64_t)v4;
  if (!v21 || v21[16] < 0x1Cu)
    goto LABEL_349;
  v923 = (uint64_t *)((char *)v4 - 96);
  v995 = *(llvm::DataLayout **)(v5 + 16);
  v1051[0] = v995;
  v1051[1] = 0;
  __base[0] = 0;
  __base[1] = &__nel[1];
  __nel[0] = 0x800000000;
  v1060 = 0;
  v23 = sub_1C48491B0((uint64_t)v1014, v21);
  __p[0] = &v1038;
  __p[1] = (void *)0x800000000;
  v1014[0] = &v1017;
  v1014[1] = &v1017;
  v1015 = 8;
  LODWORD(v1016) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)v1014, (uint64_t)v21);
  v24 = __p[1];
  if (LODWORD(__p[1]) >= HIDWORD(__p[1]))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&v1038, LODWORD(__p[1]) + 1, 8);
    v24 = __p[1];
  }
  *((_QWORD *)__p[0] + v24) = v21;
  v28 = __CFADD__(__p[1], 1);
  v25 = ++LODWORD(__p[1]);
  if (v28)
    goto LABEL_255;
  if (v23)
    v26 = 32;
  else
    v26 = 33;
  v1000 = v26;
  while (1)
  {
    v27 = *((_QWORD *)__p[0] + v25 - 1);
    LODWORD(__p[1]) = v25 - 1;
    if (v27)
      v28 = *(unsigned __int8 *)(v27 + 16) >= 0x1Cu;
    else
      v28 = 0;
    if (!v28)
      goto LABEL_225;
    v1006 = 0;
    v1007 = 0;
    if (!v23)
      break;
    __src[0] = &v1007;
    __src[1] = &v1006;
    if ((sub_1C4FA4278((_QWORD **)__src, (uint64_t *)v27) & 1) == 0)
      goto LABEL_53;
LABEL_57:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)v1014, v1006);
    if (v31)
    {
      v32 = v1006;
      v33 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&v1038, LODWORD(__p[1]) + 1, 8);
        v33 = LODWORD(__p[1]);
      }
      *((_QWORD *)__p[0] + v33) = v32;
      ++LODWORD(__p[1]);
    }
    sub_1C4774094((llvm::SmallPtrSetImplBase *)v1014, v1007);
    if (v34)
    {
      v35 = v1007;
      v36 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&v1038, LODWORD(__p[1]) + 1, 8);
        v36 = LODWORD(__p[1]);
      }
      *((_QWORD *)__p[0] + v36) = v35;
      ++LODWORD(__p[1]);
    }
LABEL_227:
    v25 = __p[1];
    if (!LODWORD(__p[1]))
      goto LABEL_255;
  }
  __s1[0] = &v1007;
  __s1[1] = &v1006;
  if (sub_1C4FA438C((_QWORD **)__s1, (uint64_t *)v27))
    goto LABEL_57;
LABEL_53:
  if (*(_BYTE *)(v27 + 16) != 81)
    goto LABEL_224;
  v29 = *(_DWORD *)(v27 + 20);
  v30 = (v29 & 0x40000000) != 0 ? *(_QWORD *)(v27 - 8) : v27 - 32 * (v29 & 0x7FFFFFF);
  v37 = sub_1C5FA3A0C(*(unsigned __int8 **)(v30 + 32), v1051[0]);
  if (!v37)
    goto LABEL_224;
  v38 = (llvm::ConstantInt ***)v37;
  v1010 = 0;
  v1011 = 0;
  v39 = *(_WORD *)(v27 + 18) & 0x3F;
  if (v1000 == (_DWORD)v39)
  {
    v40 = *(_QWORD *)(v27 - 64);
    __src[0] = &v1011;
    __src[1] = &v1010;
    __s2 = 0;
    v41 = *(unsigned __int8 *)(v40 + 16);
    if (v41 == 5)
    {
      if (*(_WORD *)(v40 + 18) == 28)
      {
        v47 = (llvm::DataLayout **)(v40 - 32 * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF));
        if (*v47)
        {
          v1011 = *v47;
          if ((sub_1C4D8A004((uint64_t)&__src[1], v47[4]) & 1) != 0)
            goto LABEL_84;
        }
      }
      goto LABEL_88;
    }
    if (v41 != 56)
      goto LABEL_88;
    if (!*(_QWORD *)(v40 - 64))
      goto LABEL_88;
    v1011 = *(llvm::DataLayout **)(v40 - 64);
    if (!sub_1C4D89F84((uint64_t)&__src[1], *(unsigned __int8 **)(v40 - 32)))
      goto LABEL_88;
LABEL_84:
    v48 = (const void **)v1010;
    v49 = *((unsigned int *)v1010 + 2);
    LODWORD(v1064[1]) = v49;
    if (v49 > 0x40)
    {
      v68 = ((unint64_t)(v49 + 63) >> 3) & 0x3FFFFFF8;
      v1064[0] = operator new[]();
      memcpy((void *)v1064[0], *v48, v68);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)v1064);
      v52 = (int8x8_t)v1064[0];
      v53 = LODWORD(v1064[1]);
      LODWORD(v1064[1]) = 0;
      if (v53 <= 0x40)
        goto LABEL_127;
      v89 = 0;
      v90 = 0;
      v74 = (unint64_t)(v53 + 63) >> 3;
      do
      {
        v91 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v1064[0] + v89));
        v91.i16[0] = vaddlv_u8(v91);
        v90 += v91.i32[0];
        v89 += 8;
      }
      while ((((unint64_t)(v53 + 63) >> 3) & 0x3FFFFFF8) != v89);
      if (v90 == 1)
      {
        v963 = (const void **)(v38 + 3);
        v973 = v53;
        LODWORD(v1061[1]) = v53;
        v92 = ((unint64_t)(v53 + 63) >> 3) & 0x3FFFFFF8;
        v1061[0] = operator new[]();
        memcpy((void *)v1061[0], *(const void **)&v52, v92);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)v1061);
        v93 = LODWORD(v1061[1]);
        v73 = v1061[0];
        LODWORD(v1061[1]) = 0;
        if (v93 < 0x41)
        {
          v70 = (unint64_t *)(v38 + 3);
          LODWORD(v53) = v973;
          goto LABEL_131;
        }
        v104 = 0;
        v105 = (char *)*v963;
        v106 = (unint64_t)(v93 + 63) >> 3;
        do
        {
          *(_QWORD *)(v73 + v104) &= *(_QWORD *)&v105[v104];
          v104 += 8;
        }
        while ((v106 & 0x3FFFFFF8) != v104);
        v107 = memcmp((const void *)v73, *v963, v106 & 0x3FFFFFF8);
        if (v73)
        {
          v964 = v107;
          MEMORY[0x1CAA32F9C](v73, 0x1000C8000313F17);
          LOBYTE(v74) = v964;
          if (!v964)
          {
            LODWORD(v53) = v973;
            goto LABEL_132;
          }
          v103 = 0;
LABEL_191:
          LODWORD(v53) = v973;
          goto LABEL_197;
        }
        LODWORD(v53) = v973;
        if (!v107)
          goto LABEL_132;
      }
    }
    else
    {
      v50 = ~*(_QWORD *)v1010;
      v51 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v49;
      if (!(_DWORD)v49)
        v51 = 0;
      v52 = (int8x8_t)(v51 & v50);
      v1064[0] = v51 & v50;
      LODWORD(v1064[1]) = 0;
      LODWORD(v53) = v49;
LABEL_127:
      v69 = (uint8x8_t)vcnt_s8(v52);
      v69.i16[0] = vaddlv_u8(v69);
      if (v69.u32[0] != 1)
        goto LABEL_88;
      v70 = (unint64_t *)(v38 + 3);
      v71 = ~*(_QWORD *)&v52;
      v72 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
      if (!(_DWORD)v53)
        v72 = 0;
      v73 = v72 & v71;
      v1061[0] = v72 & v71;
      LODWORD(v1061[1]) = 0;
LABEL_131:
      v74 = *v70;
      if ((*v70 & ~v73) == 0)
      {
LABEL_132:
        LOBYTE(v74) = (_BYTE)v1011;
        if (v1051[1] && v1051[1] != v1011)
        {
          LOBYTE(v74) = 0;
          goto LABEL_176;
        }
        v1051[1] = v1011;
        if (v1011)
        {
          v99 = LODWORD(__nel[0]);
          v973 = v53;
          if (LODWORD(__nel[0]) >= (unint64_t)HIDWORD(__nel[0]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base[1], (uint64_t)&__nel[1], LODWORD(__nel[0]) + 1, 8);
            v99 = LODWORD(__nel[0]);
          }
          *((_QWORD *)__base[1] + v99) = v38;
          ++LODWORD(__nel[0]);
          v100 = **v38;
          v101 = *((unsigned int *)v38 + 8);
          if (v101 > 0x40)
          {
            v956 = *((_DWORD *)v38 + 8);
            v965 = (size_t)**v38;
            v108 = v101 + 63;
            __nc = ((unint64_t)(v101 + 63) >> 3) & 0x3FFFFFF8;
            v102 = (void *)operator new[]();
            memcpy(v102, v38[3], __nc);
            v109 = v108 >> 6;
            v110 = (uint64_t *)v52;
            v111 = v102;
            do
            {
              v112 = *v110++;
              *v111++ |= v112;
              --v109;
            }
            while (v109);
            v4 = (llvm *)v936;
            LODWORD(v101) = v956;
            v100 = (llvm::ConstantInt *)v965;
          }
          else
          {
            v102 = (void *)((unint64_t)v38[3] | *(_QWORD *)&v52);
          }
          LODWORD(__src[1]) = v101;
          __src[0] = v102;
          v113 = llvm::ConstantInt::get(v100, (llvm::LLVMContext *)__src, v42);
          v114 = LODWORD(__nel[0]);
          if (LODWORD(__nel[0]) >= (unint64_t)HIDWORD(__nel[0]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base[1], (uint64_t)&__nel[1], LODWORD(__nel[0]) + 1, 8);
            v114 = LODWORD(__nel[0]);
          }
          *((_QWORD *)__base[1] + v114) = v113;
          ++LODWORD(__nel[0]);
          if (LODWORD(__src[1]) >= 0x41 && __src[0])
            MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
          ++v1060;
          v103 = 1;
          LOBYTE(v74) = 1;
          goto LABEL_191;
        }
LABEL_176:
        v103 = 1;
LABEL_197:
        v962 = v74;
        if (v53 >= 0x41 && *(_QWORD *)&v52)
          MEMORY[0x1CAA32F9C](*(_QWORD *)&v52, 0x1000C8000313F17);
        if ((v103 & 1) != 0)
        {
LABEL_215:
          if ((v962 & 1) == 0)
            goto LABEL_225;
          goto LABEL_227;
        }
LABEL_88:
        v54 = *(_QWORD *)(v27 - 64);
        __src[0] = &v1011;
        __src[1] = &v1010;
        __s2 = 0;
        v55 = *(unsigned __int8 *)(v54 + 16);
        if (v55 == 5)
        {
          if (*(_WORD *)(v54 + 18) != 29)
            goto LABEL_217;
          v63 = (llvm::DataLayout **)(v54 - 32 * (*(_DWORD *)(v54 + 20) & 0x7FFFFFF));
          if (!*v63)
            goto LABEL_217;
          v1011 = *v63;
          if ((sub_1C4D8A004((uint64_t)&__src[1], v63[4]) & 1) == 0)
            goto LABEL_217;
        }
        else
        {
          if (v55 != 57)
            goto LABEL_217;
          if (!*(_QWORD *)(v54 - 64))
            goto LABEL_217;
          v1011 = *(llvm::DataLayout **)(v54 - 64);
          if (!sub_1C4D89F84((uint64_t)&__src[1], *(unsigned __int8 **)(v54 - 32)))
            goto LABEL_217;
        }
        v64 = (const void **)v1010;
        v65 = *((unsigned int *)v1010 + 2);
        if (v65 > 0x40)
        {
          v971 = *((unsigned int *)v1010 + 2);
          v75 = ((v65 + 63) >> 3) & 0x3FFFFFF8;
          v76 = (char *)operator new[]();
          memcpy(v76, *v64, v75);
          v66 = (int8x8_t)v76;
          v77 = 0;
          v78 = 0;
          do
          {
            v79 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v76[v77]);
            v79.i16[0] = vaddlv_u8(v79);
            v78 += v79.i32[0];
            v77 += 8;
          }
          while (v75 != v77);
          v65 = v971;
          if (v78 != 1)
          {
            MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
LABEL_217:
            v123 = *(llvm::DataLayout **)(v27 - 64);
            if (v1051[1] && v1051[1] != v123)
              goto LABEL_224;
            v1051[1] = *(llvm::DataLayout **)(v27 - 64);
            if (!v123)
              goto LABEL_224;
            ++v1060;
            v124 = LODWORD(__nel[0]);
            if (LODWORD(__nel[0]) >= (unint64_t)HIDWORD(__nel[0]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base[1], (uint64_t)&__nel[1], LODWORD(__nel[0]) + 1, 8);
              v124 = LODWORD(__nel[0]);
            }
            *((_QWORD *)__base[1] + v124) = v38;
            ++LODWORD(__nel[0]);
            if (!*(_QWORD *)(v27 - 64))
              goto LABEL_225;
            goto LABEL_227;
          }
        }
        else
        {
          v66 = *(int8x8_t *)v1010;
          v67 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v1010);
          v67.i16[0] = vaddlv_u8(v67);
          if (v67.u32[0] != 1)
            goto LABEL_217;
        }
        v80 = *((unsigned int *)v38 + 8);
        v81 = v66;
        if (v80 >= 0x41)
        {
          v974 = v65;
          v94 = ((unint64_t)(v80 + 63) >> 3) & 0x3FFFFFF8;
          v95 = (char *)operator new[]();
          memcpy(v95, v38[3], v94);
          v96 = 0;
          do
          {
            *(_QWORD *)&v95[v96] |= *(_QWORD *)(*(_QWORD *)&v81 + v96);
            v96 += 8;
          }
          while (v94 != v96);
          v97 = memcmp(v95, v38[3], v94);
          MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
          v66 = v81;
          v65 = v974;
          if (!v97)
            goto LABEL_140;
        }
        else if ((llvm::ConstantInt **)((unint64_t)v38[3] | *(_QWORD *)&v66) == v38[3])
        {
LABEL_140:
          if ((!v1051[1] || v1051[1] == v1011) && (v1051[1] = v1011) != 0)
          {
            v82 = LODWORD(__nel[0]);
            if (LODWORD(__nel[0]) >= (unint64_t)HIDWORD(__nel[0]))
            {
              v129 = v65;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base[1], (uint64_t)&__nel[1], LODWORD(__nel[0]) + 1, 8);
              v66 = v81;
              v65 = v129;
              v82 = LODWORD(__nel[0]);
            }
            *((_QWORD *)__base[1] + v82) = v38;
            ++LODWORD(__nel[0]);
            v83 = **v38;
            v1009 = v65;
            v972 = v65;
            if (v65 > 0x40)
            {
              v966 = (size_t)v83;
              v115 = ((v65 + 63) >> 3) & 0x3FFFFFF8;
              v116 = (const void *)v66;
              v1008 = (void *)operator new[]();
              memcpy(v1008, v116, v115);
              llvm::APInt::flipAllBitsSlowCase((uint64_t)&v1008);
              v84 = v1009;
              v85 = (unint64_t)v1008;
              v1009 = 0;
              if (v84 <= 0x40)
              {
                v83 = (llvm::ConstantInt *)v966;
                goto LABEL_194;
              }
              v117 = v38[3];
              v118 = (v84 + 63) >> 6;
              v119 = v1008;
              do
              {
                v120 = (uint64_t)*v117++;
                *v119++ &= v120;
                --v118;
              }
              while (v118);
              v83 = (llvm::ConstantInt *)v966;
            }
            else
            {
              v84 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v65;
              if (!(_DWORD)v65)
                v84 = 0;
              v85 = v84 & ~*(_QWORD *)&v66;
              v1008 = (void *)v85;
              v1009 = 0;
              LODWORD(v84) = v65;
LABEL_194:
              v85 &= (unint64_t)v38[3];
            }
            LODWORD(__src[1]) = v84;
            __src[0] = (void *)v85;
            v121 = llvm::ConstantInt::get(v83, (llvm::LLVMContext *)__src, v56);
            v122 = LODWORD(__nel[0]);
            if (LODWORD(__nel[0]) >= (unint64_t)HIDWORD(__nel[0]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base[1], (uint64_t)&__nel[1], LODWORD(__nel[0]) + 1, 8);
              v122 = LODWORD(__nel[0]);
            }
            *((_QWORD *)__base[1] + v122) = v121;
            ++LODWORD(__nel[0]);
            if (LODWORD(__src[1]) >= 0x41 && __src[0])
              MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
            ++v1060;
            v98 = 1;
            v962 = 1;
            LODWORD(v65) = v972;
            v66 = v81;
          }
          else
          {
            v962 = 0;
            v98 = 1;
          }
LABEL_211:
          if (v65 >= 0x41 && *(_QWORD *)&v66)
            MEMORY[0x1CAA32F9C](*(_QWORD *)&v66, 0x1000C8000313F17);
          if ((v98 & 1) == 0)
            goto LABEL_217;
          goto LABEL_215;
        }
        v98 = 0;
        goto LABEL_211;
      }
    }
    v103 = 0;
    goto LABEL_197;
  }
  llvm::ConstantRange::makeExactICmpRegion(__src, v39, v38 + 3);
  v43 = *(_DWORD *)(v27 + 20);
  if ((v43 & 0x40000000) != 0)
    v44 = *(llvm::DataLayout ***)(v27 - 8);
  else
    v44 = (llvm::DataLayout **)(v27 - 32 * (v43 & 0x7FFFFFF));
  v45 = *v44;
  __s1[0] = &v1011;
  __s1[1] = &v1010;
  v1023 = 0;
  v46 = *((unsigned __int8 *)v45 + 16);
  if (v46 == 5)
  {
    if (*((_WORD *)v45 + 9) == 13)
    {
      v57 = (llvm::DataLayout **)((char *)v45 - 32 * (*((_DWORD *)v45 + 5) & 0x7FFFFFF));
      if (*v57)
      {
        v1011 = *v57;
        if ((sub_1C4D8A004((uint64_t)&__s1[1], v57[4]) & 1) != 0)
          goto LABEL_96;
      }
    }
  }
  else
  {
    if (v46 != 41)
      goto LABEL_100;
    if (!*((_QWORD *)v45 - 8))
      goto LABEL_100;
    v1011 = (llvm::DataLayout *)*((_QWORD *)v45 - 8);
    if (!sub_1C4D89F84((uint64_t)&__s1[1], *((unsigned __int8 **)v45 - 4)))
      goto LABEL_100;
LABEL_96:
    llvm::ConstantRange::subtract((char *)__src, (unint64_t **)v1010, (llvm::APInt *)__s1);
    if (LODWORD(__src[1]) >= 0x41 && __src[0])
      MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
    __src[0] = __s1[0];
    LODWORD(__src[1]) = __s1[1];
    LODWORD(__s1[1]) = 0;
    if (v1031 >= 0x41 && __s2)
    {
      MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      __s2 = v1023;
      LODWORD(v1031) = v1024;
      v1024 = 0;
      if (LODWORD(__s1[1]) >= 0x41 && __s1[0])
        MEMORY[0x1CAA32F9C](__s1[0], 0x1000C8000313F17);
    }
    else
    {
      __s2 = v1023;
      LODWORD(v1031) = v1024;
    }
    v45 = v1011;
  }
LABEL_100:
  if (!v23)
  {
    llvm::ConstantRange::inverse((llvm::ConstantRange *)__src, (uint64_t)__s1);
    if (LODWORD(__src[1]) >= 0x41 && __src[0])
      MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
    __src[0] = __s1[0];
    LODWORD(__src[1]) = __s1[1];
    LODWORD(__s1[1]) = 0;
    if (v1031 >= 0x41 && __s2)
    {
      MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      __s2 = v1023;
      LODWORD(v1031) = v1024;
      v1024 = 0;
      if (LODWORD(__s1[1]) >= 0x41 && __s1[0])
        MEMORY[0x1CAA32F9C](__s1[0], 0x1000C8000313F17);
    }
    else
    {
      __s2 = v1023;
      LODWORD(v1031) = v1024;
    }
  }
  if (llvm::ConstantRange::isSizeLargerThan((llvm::ConstantRange *)__src, 8uLL))
    goto LABEL_115;
  v59 = LODWORD(__src[1]);
  if (LODWORD(__src[1]) < 0x41)
  {
    v60 = __src[0];
    if ((unint64_t)__s2 | (unint64_t)__src[0])
      goto LABEL_107;
    goto LABEL_115;
  }
  v60 = __src[0];
  if (!memcmp(__src[0], __s2, (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8))
  {
    v125 = 0;
    v126 = (unint64_t)(v59 + 63) >> 6;
    do
    {
      v437 = v126-- < 1;
      if (v437)
        break;
      v127 = v60[v126];
      v125 += __clz(v127);
    }
    while (!v127);
    v62 = 0;
    v128 = v59 | 0xFFFFFFC0;
    if ((v59 & 0x3F) == 0)
      v128 = 0;
    if (v125 + v128 == (_DWORD)v59)
      goto LABEL_116;
  }
LABEL_107:
  if (v1051[1])
    v61 = v1051[1] == v45;
  else
    v61 = 1;
  if (!v61 || (v1051[1] = v45) == 0)
  {
LABEL_115:
    v62 = 0;
    goto LABEL_116;
  }
  LODWORD(__s1[1]) = v59;
  if (v59 > 0x40)
  {
    __s1[0] = (void *)operator new[]();
    LODWORD(v59) = __s1[1];
    memcpy(__s1[0], __src[0], (((unint64_t)LODWORD(__s1[1]) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __s1[0] = v60;
  }
  while (2)
  {
    if (v59 <= 0x40)
    {
      if (__s1[0] == __s2)
        goto LABEL_159;
      goto LABEL_154;
    }
    v86 = __s1[0];
    if (memcmp(__s1[0], __s2, (((unint64_t)v59 + 63) >> 3) & 0x3FFFFFF8))
    {
LABEL_154:
      v87 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v27, (llvm::LLVMContext *)__s1, v58);
      v88 = LODWORD(__nel[0]);
      if (LODWORD(__nel[0]) >= (unint64_t)HIDWORD(__nel[0]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base[1], (uint64_t)&__nel[1], LODWORD(__nel[0]) + 1, 8);
        v88 = LODWORD(__nel[0]);
      }
      *((_QWORD *)__base[1] + v88) = v87;
      ++LODWORD(__nel[0]);
      llvm::APInt::operator++((uint64_t)__s1);
      LODWORD(v59) = __s1[1];
      continue;
    }
    break;
  }
  if (v86)
    MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
LABEL_159:
  ++v1060;
  v62 = 1;
LABEL_116:
  if (v1031 >= 0x41 && __s2)
    MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  if (LODWORD(__src[1]) >= 0x41 && __src[0])
    MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
  if (v62)
  {
    v4 = (llvm *)v936;
    goto LABEL_227;
  }
LABEL_224:
  v4 = (llvm *)v936;
LABEL_225:
  if (!__base[0])
  {
    __base[0] = (void *)v27;
    goto LABEL_227;
  }
  v1051[1] = 0;
LABEL_255:
  if (v1014[1] != v1014[0])
    free(v1014[1]);
  if (__p[0] != &v1038)
    free(__p[0]);
  v130 = 0;
  v131 = (unsigned __int8 *)v1051[1];
  v5 = v927;
  v22 = v923;
  if (v1051[1] && v1060 >= 2)
  {
    v132 = (unsigned __int8 **)__base[0];
    v133 = sub_1C57BE7B8((uint64_t)v1014, v21);
    v134 = __nel[0];
    if (LODWORD(__nel[0]) >= 2)
    {
      qsort(__base[1], LODWORD(__nel[0]), 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C5FA4658);
      v134 = __nel[0];
    }
    v135 = __base[1];
    v136 = (char *)__base[1] + 8 * v134;
    v137 = (char *)__base[1];
    if (v134)
    {
      v138 = 0;
      while (8 * v134 - 8 != v138)
      {
        v140 = *(_QWORD *)((char *)__base[1] + v138);
        v139 = *(_QWORD *)((char *)__base[1] + v138 + 8);
        v138 += 8;
        if (v140 == v139)
        {
          v137 = (char *)__base[1] + v138 - 8;
          goto LABEL_268;
        }
      }
    }
    else
    {
LABEL_268:
      if (v137 != v136)
      {
        v141 = v137 + 16;
        if (v137 + 16 != v136)
        {
          v142 = *(_QWORD *)v137;
          do
          {
            v143 = v142;
            v142 = *(_QWORD *)v141;
            if (v143 != *(_QWORD *)v141)
            {
              *((_QWORD *)v137 + 1) = v142;
              v137 += 8;
            }
            v141 += 8;
          }
          while (v141 != v136);
          v135 = __base[1];
        }
        v136 = v137 + 8;
      }
    }
    v144 = v136 - v135;
    LODWORD(__nel[0]) = v144 >> 3;
    if (!v132 || (v144 & 0x7FFFFFFF0) != 0)
    {
      v145 = *(llvm::BasicBlock **)(v936 - 64);
      v146 = *(llvm::BasicBlock **)(v936 - 32);
      if (v133)
        v147 = *(_QWORD *)(v936 - 32);
      else
        v147 = *(_QWORD *)(v936 - 64);
      if (v133)
        v148 = *(_QWORD *)(v936 - 64);
      else
        v148 = *(_QWORD *)(v936 - 32);
      v989 = v148;
      v149 = *(llvm **)(v936 + 40);
      v1014[0] = &v1015;
      v1014[1] = (void *)0x200000000;
      if (v132)
      {
        v986 = v133;
        v150 = *(llvm::Instruction **)(v927 + 8);
        __p[0] = "switch.early.test";
        v1040 = 259;
        v151 = sub_1C5EBD70C(v149, (llvm::BasicBlock *)v936, v150, 0, 0, 0, (llvm::Twine *)__p, 0);
        v152 = 0;
        v153 = *((_QWORD *)v149 + 5);
        if (v153)
          v154 = v153 - 24;
        else
          v154 = 0;
        if (*(unsigned __int8 *)(v154 + 16) - 29 >= 0xB)
          v155 = 0;
        else
          v155 = v154;
        a3[6] = *(_QWORD *)(v155 + 40);
        a3[7] = v155 + 24;
        v156 = *(void **)(v155 + 48);
        __p[0] = v156;
        if (v156)
        {
          llvm::MetadataTracking::track((uint64_t)__p, (unsigned __int8 *)v156, 2);
          v152 = __p[0];
        }
        sub_1C4774EF4((uint64_t)a3, 0, (uint64_t)v152);
        if (__p[0])
          llvm::MetadataTracking::untrack((uint64_t)__p, (unsigned __int8 *)__p[0]);
        if ((sub_1C4F8BE80((uint64_t ***)v132, *(_QWORD *)(*(_QWORD *)(v927 + 40) + 16), v936, 0, 0, 0) & 1) == 0)
        {
          LOWORD(v1032) = 257;
          v338 = (char *)operator new(0x60uLL);
          *((_DWORD *)v338 + 13) = *((_DWORD *)v338 + 13) & 0x38000000 | 1;
          v339 = (unsigned __int8 **)(v338 + 32);
          *(_QWORD *)v338 = 0;
          *((_QWORD *)v338 + 1) = 0;
          *((_QWORD *)v338 + 2) = 0;
          *((_QWORD *)v338 + 3) = v338 + 32;
          v1040 = 257;
          llvm::FreezeInst::FreezeInst((uint64_t)(v338 + 32), v132, (uint64_t)__p, 0);
          v132 = sub_1C4867F8C(a3, v339, (uint64_t)__src);
        }
        v157 = (char *)operator new(0xA0uLL);
        v158 = 0;
        v159 = (unsigned __int8 **)(v157 + 96);
        *((_DWORD *)v157 + 29) = *((_DWORD *)v157 + 29) & 0x38000000 | 3;
        do
        {
          v160 = &v157[v158];
          *(_QWORD *)v160 = 0;
          *((_QWORD *)v160 + 1) = 0;
          *((_QWORD *)v160 + 2) = 0;
          *((_QWORD *)v160 + 3) = v159;
          v158 += 32;
        }
        while (v158 != 96);
        v161 = (llvm::BranchInst *)(v157 + 96);
        if (v986)
        {
          v162 = v146;
          v163 = (llvm::BasicBlock *)v151;
        }
        else
        {
          v162 = (llvm::BasicBlock *)v151;
          v163 = v145;
        }
        llvm::BranchInst::BranchInst(v161, v162, v163, (llvm::Value *)v132, 0);
        v1040 = 257;
        sub_1C4867F8C(a3, v159, (uint64_t)__p);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v155 + 40) + 40, (uint64_t ***)v155);
        v164 = *(_QWORD *)(v155 + 24);
        v165 = *(_QWORD **)(v155 + 32);
        *v165 = v164;
        *(_QWORD *)(v164 + 8) = v165;
        *(_QWORD *)(v155 + 24) = 0;
        *(_QWORD *)(v155 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v155);
        v5 = v927;
        v4 = (llvm *)v936;
        v22 = v923;
        if (*(_QWORD *)(v927 + 8))
        {
          v166 = v1014[1];
          if (LODWORD(v1014[1]) >= HIDWORD(v1014[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1014, (uint64_t)&v1015, LODWORD(v1014[1]) + 1, 16);
            v166 = v1014[1];
          }
          v167 = (llvm **)((char *)v1014[0] + 16 * v166);
          *v167 = v149;
          v167[1] = (llvm *)(v147 & 0xFFFFFFFFFFFFFFFBLL);
          ++LODWORD(v1014[1]);
        }
        sub_1C5F90FA0(v147, (uint64_t)v149, v151, 0);
        v149 = *(llvm **)(v936 + 40);
      }
      else
      {
        v151 = (uint64_t)v149;
        v4 = (llvm *)v936;
      }
      a3[6] = (uint64_t)v149;
      a3[7] = (uint64_t)v4 + 24;
      v168 = (void *)*((_QWORD *)v4 + 6);
      __p[0] = v168;
      if (v168)
      {
        llvm::MetadataTracking::track((uint64_t)__p, (unsigned __int8 *)v168, 2);
        v169 = __p[0];
      }
      else
      {
        v169 = 0;
      }
      sub_1C4774EF4((uint64_t)a3, 0, (uint64_t)v169);
      if (__p[0])
        llvm::MetadataTracking::untrack((uint64_t)__p, (unsigned __int8 *)__p[0]);
      if (*(_BYTE *)(*(_QWORD *)v131 + 8) == 15)
      {
        llvm::DataLayout::getIntPtrType(v995, *(llvm::Type **)v131);
        __p[0] = "magicptr";
        v1040 = 259;
        v131 = sub_1C4773E38(a3, 47, v131, v170, (uint64_t)__p);
      }
      v171 = __nel[0];
      v172 = (char *)operator new(0x48uLL);
      *((_DWORD *)v172 + 7) = *((_DWORD *)v172 + 7) & 0x38000000 | 0x40000000;
      *(_QWORD *)v172 = 0;
      *((_QWORD *)v172 + 1) = ***(_QWORD ***)v131 + 1576;
      *((_QWORD *)v172 + 2) = 0;
      v173 = (unsigned __int8 **)(v172 + 8);
      *((_DWORD *)v172 + 7) = 0x40000000;
      v172[24] = 31;
      v172[25] = 0;
      *((_WORD *)v172 + 13) = 0;
      *((_DWORD *)v172 + 16) = 0;
      *((_OWORD *)v172 + 3) = 0u;
      *((_OWORD *)v172 + 2) = 0u;
      llvm::SwitchInst::init((uint64_t)(v172 + 8), (uint64_t)v131, v989, 2 * v171 + 2);
      v1040 = 257;
      v174 = sub_1C4867F8C(a3, v173, (uint64_t)__p);
      if (LODWORD(__nel[0]))
      {
        v175 = v174;
        v176 = 0;
        v177 = 8 * LODWORD(__nel[0]);
        do
        {
          llvm::SwitchInst::addCase(v175, *(llvm::ConstantInt **)((char *)__base[1] + v176), (llvm::BasicBlock *)v147);
          v176 += 8;
        }
        while (v177 != v176);
      }
      for (i = *(_QWORD *)(v147 + 48); ; i = *(_QWORD *)(i + 8))
      {
        v179 = i - 24;
        v180 = i ? i - 24 : 0;
        if (*(_BYTE *)(v180 + 16) != 83)
          break;
        v181 = *(_DWORD *)(i - 4);
        v182 = v181 & 0x7FFFFFF;
        if ((v181 & 0x7FFFFFF) != 0)
        {
          v183 = 0;
          while (1)
          {
            v184 = v179 - 32 * v182;
            if ((v181 & 0x40000000) != 0)
              v184 = *(_QWORD *)(i - 32);
            if (*(_QWORD *)(v184 + 32 * *(unsigned int *)(i + 36) + 8 * v183) == v151)
              break;
            if (v182 == ++v183)
              goto LABEL_331;
          }
        }
        else
        {
LABEL_331:
          LODWORD(v183) = -1;
        }
        if ((v181 & 0x40000000) != 0)
          v185 = *(_QWORD *)(i - 32);
        else
          v185 = v179 - 32 * v182;
        v186 = LODWORD(__nel[0]) - 1;
        if (LODWORD(__nel[0]) != 1)
        {
          v187 = *(_QWORD *)(v185 + 32 * v183);
          do
          {
            sub_1C477667C((llvm::PHINode *)(i - 24), v187, v151);
            --v186;
          }
          while (v186);
        }
      }
      sub_1C5FA3F18((uint64_t)v4);
      v188 = *(_QWORD *)(v5 + 8);
      if (v188)
        llvm::DomTreeUpdater::applyUpdates(v188, (unint64_t *)v1014[0], LODWORD(v1014[1]));
      if (v1014[0] != &v1015)
        free(v1014[0]);
      v130 = 1;
    }
    else
    {
      v130 = 0;
      v4 = (llvm *)v936;
    }
  }
  if (__base[1] != &__nel[1])
    free(__base[1]);
  if ((v130 & 1) != 0)
    return 1;
  v21 = (unsigned __int8 *)*v22;
  v20 = *(const llvm::Value **)(v5 + 16);
LABEL_349:
  v190 = (llvm *)sub_1C4F904E0((uint64_t)v4);
  if (v190)
  {
    isImpliedCondition = llvm::isImpliedCondition(v190, (const llvm::Value *)v21, v20, (const llvm::DataLayout *)(v191 & 1), 0);
    if (isImpliedCondition >= 0x100u)
    {
      v318 = *v22;
      v319 = ***(_QWORD ***)v924;
      if ((_BYTE)isImpliedCondition)
      {
        v320 = *(llvm::ValueHandleBase **)(v319 + 1560);
        if (!v320)
        {
          v321 = *(llvm::ConstantInt **)(v319 + 1888);
          v322 = *(_DWORD *)(v319 + 1896);
          LODWORD(v1051[1]) = v322 >> 8;
          if (v322 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)v1051, 1, 0);
          }
          else
          {
            if (v322 <= 0xFF)
              v323 = 0;
            else
              v323 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v322);
            v1051[0] = (llvm::DataLayout *)(v323 & 1);
          }
          v320 = llvm::ConstantInt::get(v321, (llvm::LLVMContext *)v1051, v193);
          if (LODWORD(v1051[1]) >= 0x41 && v1051[0])
            MEMORY[0x1CAA32F9C](v1051[0], 0x1000C8000313F17);
          *(_QWORD *)(v319 + 1560) = v320;
        }
      }
      else
      {
        v320 = *(llvm::ValueHandleBase **)(v319 + 1568);
        if (!v320)
        {
          v340 = *(llvm::ConstantInt **)(v319 + 1888);
          LODWORD(v1051[1]) = *(_DWORD *)(v319 + 1896) >> 8;
          if (LODWORD(v1051[1]) > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)v1051, 0, 0);
          else
            v1051[0] = 0;
          v320 = llvm::ConstantInt::get(v340, (llvm::LLVMContext *)v1051, v193);
          if (LODWORD(v1051[1]) >= 0x41 && v1051[0])
            MEMORY[0x1CAA32F9C](v1051[0], 0x1000C8000313F17);
          *(_QWORD *)(v319 + 1568) = v320;
        }
      }
      if (*v22)
      {
        **((_QWORD **)v4 - 10) = *((_QWORD *)v4 - 11);
        v328 = *((_QWORD *)v4 - 11);
        if (v328)
          *(_QWORD *)(v328 + 16) = *((_QWORD *)v4 - 10);
      }
      *v22 = (uint64_t)v320;
      if (v320)
      {
        v331 = *((_QWORD *)v320 + 1);
        v330 = (uint64_t **)((char *)v320 + 8);
        v329 = v331;
        *((_QWORD *)v4 - 11) = v331;
        if (v331)
          *(_QWORD *)(v329 + 16) = (char *)v4 - 88;
        *((_QWORD *)v4 - 10) = v330;
        *v330 = v22;
      }
      v1013 = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructions(v318, 0, 0, v1012);
      if (v1013 == v1012)
      {
        v332 = (void (**)(void))(v1012[0] + 32);
      }
      else
      {
        if (!v1013)
          goto LABEL_1110;
        v332 = (void (**)(void))(*v1013 + 40);
      }
      (*v332)();
      goto LABEL_1110;
    }
  }
  if (llvm::FoldBranchToCommonDest(v4, *(llvm::BranchInst **)(v5 + 8), 0, *(llvm::MemorySSAUpdater **)v5, (const llvm::TargetTransformInfo *)**(unsigned int **)(v5 + 40)))goto LABEL_1110;
  v194 = (llvm::BasicBlock *)*((_QWORD *)v4 - 4);
  v926 = (uint64_t *)((char *)v4 - 32);
  v195 = llvm::BasicBlock::getSinglePredecessor(v194);
  v196 = (llvm::BasicBlock *)*((_QWORD *)v4 - 8);
  v921 = (uint64_t *)((char *)v4 - 64);
  v197 = llvm::BasicBlock::getSinglePredecessor(v196);
  if (v195)
  {
    if (v197)
    {
      if (!byte_1ED828638)
        goto LABEL_710;
      v199 = v22;
      v200 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(v924 + 56) + 40) + 216);
      LOWORD(__nel[0]) = 260;
      v1051[0] = v200;
      llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v1051);
      v201 = *(_QWORD *)(v5 + 40);
      if (!*(_BYTE *)(v201 + 9) && (v1039 & 0xFFFFFFFE) == 0x1C)
        goto LABEL_707;
      v202 = *v926;
      if ((*(_WORD *)(*v926 + 18) & 0x7FFF) != 0)
        goto LABEL_707;
      v1004 = *v921;
      if ((*(_WORD *)(*v921 + 18) & 0x7FFF) != 0)
        goto LABEL_707;
      v203 = *(llvm::DataLayout **)v927;
      v204 = *(unsigned __int8 *)(v201 + 8);
      v205 = *(_QWORD *)(v202 + 48);
      v206 = *(_QWORD *)(v1004 + 48);
      v207 = *(_QWORD *)(v205 + 8);
      if (v205)
        v208 = v205 - 24;
      else
        v208 = 0;
      v209 = *(_QWORD *)(v206 + 8);
      if (v206)
        v210 = v206 - 24;
      else
        v210 = 0;
      if (sub_1C4D99D08(v208))
        v211 = (llvm::Instruction *)v208;
      else
        v211 = 0;
      if (sub_1C4D99D08(v210))
        v212 = (const llvm::Instruction *)v210;
      else
        v212 = 0;
      if (!v211 || !v212 || (llvm::Instruction::isIdenticalToWhenDefined(v211, v212) & 1) == 0)
      {
        while (sub_1C4D99D08(v208))
        {
          v213 = v207 - 24;
          v61 = v207 == 0;
          v207 = *(_QWORD *)(v207 + 8);
          if (v61)
            v208 = 0;
          else
            v208 = v213;
        }
        while (sub_1C4D99D08(v210))
        {
          v214 = v209 - 24;
          v61 = v209 == 0;
          v209 = *(_QWORD *)(v209 + 8);
          if (v61)
            v210 = 0;
          else
            v210 = v214;
        }
      }
      if (*(_BYTE *)(v208 + 16) == 83
        || !llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v208, (const llvm::Instruction *)v210)|| (v215 = *(unsigned __int8 *)(v208 + 16), v215 == 39)|| v215 == 33 && !sub_1C5FA46DC(v202, v1004, v208, v210)|| (v216 = *(_QWORD *)(v936 + 40), !v204)&& ((v341 = llvm::skipDebugIntrinsics(v208 + 24)) != 0 ? (v342 = (unsigned __int8 *)(v341 - 24)) : (v342 = 0), (v343 = llvm::skipDebugIntrinsics(v210 + 24)) != 0? (v344 = (const llvm::Instruction *)(v343 - 24)): (v344 = 0), !llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v342, v344)|| v342[16] - 29 > 0xA))
      {
LABEL_707:
        if (SHIBYTE(v1038) < 0)
          operator delete(__p[0]);
        v5 = v927;
        v4 = (llvm *)v936;
        v22 = v199;
        goto LABEL_710;
      }
      v217 = 0;
      v1001 = (llvm::BasicBlock *)(v936 + 24);
      v987 = (_QWORD *)(v202 + 40);
      v996 = v203;
      while (2)
      {
        v218 = *(unsigned __int8 *)(v208 + 16);
        if ((v218 - 29) >= 0xB)
        {
          if (v218 == 84)
            v219 = v208;
          else
            v219 = 0;
          if (*(_BYTE *)(v210 + 16) == 84)
            v220 = v210;
          else
            v220 = 0;
          if (v219)
            v221 = v220 == 0;
          else
            v221 = 1;
          if ((v221 || ((*(_WORD *)(v219 + 18) & 3) == 2) == ((*(_WORD *)(v220 + 18) & 3) == 2))
            && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)v203 + 464))(*(_QWORD *)v203, v208)
            && (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)v203 + 464))(*(_QWORD *)v203, v210))
          {
            if ((v222 = *(unsigned __int8 *)(v208 + 16) - 33, v222 > 0x33)
              || ((1 << v222) & 0x8000000000041) == 0
              || ((v223 = *(_QWORD *)(v208 + 64)) == 0 || (*(_BYTE *)(v223 + 15) & 0x10) == 0)
              && (llvm::CallBase::hasFnAttrOnCalledFunction(v208, 28) & 1) == 0)
            {
              if ((v224 = *(unsigned __int8 *)(v210 + 16) - 33, v224 > 0x33)
                || ((1 << v224) & 0x8000000000041) == 0
                || ((v225 = *(_QWORD *)(v210 + 64)) == 0 || (*(_BYTE *)(v225 + 15) & 0x10) == 0)
                && (llvm::CallBase::hasFnAttrOnCalledFunction(v210, 28) & 1) == 0)
              {
                if (sub_1C4D99D08(v208) || sub_1C4D99D08(v210))
                {
                  v226 = (uint64_t *)(v936 + 24);
                  if (v208 == v936)
                    goto LABEL_431;
                  v227 = *(llvm::BasicBlock **)(v208 + 32);
                  if (v227 == v1001)
                    goto LABEL_431;
                  v228 = (llvm::BasicBlock *)(v208 + 24);
                  *(_WORD *)(v216 + 18) &= ~0x8000u;
                  if (v216 == v202)
                    goto LABEL_429;
                  v229 = *(_QWORD *)(v216 + 56);
                  if (v229)
                    v230 = *(llvm::ValueSymbolTable **)(v229 + 104);
                  else
                    v230 = 0;
                  v231 = *(_QWORD *)(v202 + 56);
                  if (v231)
                    v232 = *(llvm::ValueSymbolTable **)(v231 + 104);
                  else
                    v232 = 0;
                  if (v230 == v232)
                  {
                    for (j = v228; j != v227; j = (llvm::BasicBlock *)*((_QWORD *)j + 1))
                    {
                      v234 = (_QWORD *)((char *)j - 24);
                      if (!j)
                        v234 = 0;
                      v234[5] = v216;
                    }
LABEL_429:
                    if (v227 != v228)
                    {
                      v235 = *(_QWORD *)v227;
                      v236 = *(_QWORD *)v228;
                      *(_QWORD *)(v236 + 8) = v227;
                      *(_QWORD *)v227 = v236;
                      v237 = *v226;
                      *(_QWORD *)(v235 + 8) = v226;
                      *(_QWORD *)v228 = v237;
                      *(_QWORD *)(v237 + 8) = v228;
                      *v226 = v235;
                    }
LABEL_431:
                    if (v210 == v936)
                      goto LABEL_462;
                    v238 = *(uint64_t **)(v210 + 32);
                    if (v238 == v226)
                      goto LABEL_462;
                    v239 = (uint64_t *)(v210 + 24);
                    *(_WORD *)(v216 + 18) &= ~0x8000u;
                    if (v216 == v1004)
                      goto LABEL_443;
                    v240 = *(_QWORD *)(v216 + 56);
                    if (v240)
                      v241 = *(llvm::ValueSymbolTable **)(v240 + 104);
                    else
                      v241 = 0;
                    v242 = *(_QWORD *)(v1004 + 56);
                    if (v242)
                      v243 = *(_QWORD *)(v242 + 104);
                    else
                      v243 = 0;
                    if (v241 == (llvm::ValueSymbolTable *)v243)
                    {
                      for (k = v239; k != v238; k = (uint64_t *)k[1])
                      {
                        v245 = k - 3;
                        if (!k)
                          v245 = 0;
                        v245[5] = v216;
                      }
LABEL_443:
                      if (v238 != v239)
                      {
                        v246 = *v238;
                        v247 = *v239;
                        *(_QWORD *)(v247 + 8) = v238;
                        *v238 = v247;
                        v248 = *v226;
                        *(_QWORD *)(v246 + 8) = v226;
                        *v239 = v248;
                        *(_QWORD *)(v248 + 8) = v239;
                        *v226 = v246;
                      }
LABEL_462:
                      v263 = *(_QWORD *)(v207 + 8);
                      if (v207)
                        v208 = v207 - 24;
                      else
                        v208 = 0;
                      v264 = *(_QWORD *)(v209 + 8);
                      if (v209)
                        v210 = v209 - 24;
                      else
                        v210 = 0;
                      if (sub_1C4D99D08(v208))
                        v265 = (llvm::Instruction *)v208;
                      else
                        v265 = 0;
                      if (sub_1C4D99D08(v210))
                        v266 = (const llvm::Instruction *)v210;
                      else
                        v266 = 0;
                      if (!v265 || !v266 || (llvm::Instruction::isIdenticalToWhenDefined(v265, v266) & 1) == 0)
                      {
                        while (sub_1C4D99D08(v208))
                        {
                          v267 = v263 - 24;
                          v61 = v263 == 0;
                          v263 = *(_QWORD *)(v263 + 8);
                          if (v61)
                            v208 = 0;
                          else
                            v208 = v267;
                        }
                        while (sub_1C4D99D08(v210))
                        {
                          v268 = v264 - 24;
                          v61 = v264 == 0;
                          v264 = *(_QWORD *)(v264 + 8);
                          if (v61)
                            v210 = 0;
                          else
                            v210 = v268;
                        }
                      }
                      v217 = 1;
                      v209 = v264;
                      v207 = v263;
                      v203 = v996;
                      if ((llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)v208, (const llvm::Instruction *)v210) & 1) != 0)continue;
LABEL_705:
                      *(_BYTE *)(v927 + 48) = 1;
                      if (SHIBYTE(v1038) < 0)
                        operator delete(__p[0]);
                      return 1;
                    }
                    v946 = v239;
                    if (v239 == v238)
                      goto LABEL_443;
                    while (2)
                    {
                      v285 = (llvm::Value *)(v946 - 3);
                      if (!v946)
                        v285 = 0;
                      __na = v285;
                      v938 = *((_DWORD *)v285 + 5) & 0x10000000;
                      if (v243 && v938)
                      {
                        v286 = ***(_QWORD ***)v285;
                        v287 = *(_QWORD *)(v286 + 152);
                        v288 = *(unsigned int *)(v286 + 168);
                        if (!(_DWORD)v288)
                          goto LABEL_535;
                        LODWORD(v289) = (v288 - 1) & ((__na >> 4) ^ (__na >> 9));
                        v290 = (llvm::Value **)(v287 + 16 * v289);
                        v291 = *v290;
                        if (*v290 != __na)
                        {
                          v292 = 1;
                          while (v291 != (llvm::Value *)-4096)
                          {
                            v293 = v289 + v292++;
                            v289 = v293 & (v288 - 1);
                            v291 = *(llvm::Value **)(v287 + 16 * v289);
                            if (v291 == __na)
                            {
                              v290 = (llvm::Value **)(v287 + 16 * v289);
                              goto LABEL_536;
                            }
                          }
LABEL_535:
                          v290 = (llvm::Value **)(v287 + 16 * v288);
                        }
LABEL_536:
                        v294 = *(unsigned int *)(v243 + 8);
                        if ((_DWORD)v294)
                        {
                          v295 = (size_t *)v290[1];
                          v934 = *(unsigned int *)(v243 + 20);
                          v942 = (llvm::BasicBlock *)((char *)v295 + v934);
                          v976 = *v295;
                          v296 = 0;
                          if (*v295)
                          {
                            v297 = *v295;
                            v298 = v942;
                            do
                            {
                              v299 = *(unsigned __int8 *)v298;
                              v298 = (llvm::BasicBlock *)((char *)v298 + 1);
                              v296 = 33 * v296 + v299;
                              --v297;
                            }
                            while (v297);
                          }
                          v958 = v294 - 1;
                          v968 = *(_QWORD *)v243;
                          v949 = (llvm::Value *)(*(_QWORD *)v243 + 8 * v294 + 8);
                          v981 = 1;
                          v300 = v296;
                          while (1)
                          {
                            v991 = v300 & v958;
                            v301 = *(_QWORD **)(v968 + 8 * v991);
                            if (v301 != (_QWORD *)-8)
                            {
                              if (!v301)
                                goto LABEL_549;
                              if (*((_DWORD *)v949 + v991) == v296
                                && v976 == *v301
                                && (!v976 || !memcmp(v942, (char *)v301 + v934, v976)))
                              {
                                break;
                              }
                            }
                            v300 = v981 + v991;
                            ++v981;
                          }
                          *(_QWORD *)(v968 + 8 * (int)v991) = -8;
                          *(int32x2_t *)(v243 + 12) = vadd_s32(*(int32x2_t *)(v243 + 12), (int32x2_t)0x1FFFFFFFFLL);
                        }
                      }
LABEL_549:
                      *((_QWORD *)__na + 5) = v216;
                      if (v241 && v938)
                        llvm::ValueSymbolTable::reinsertValue(v241, __na);
                      v946 = (uint64_t *)v946[1];
                      v226 = (uint64_t *)(v936 + 24);
                      if (v946 == v238)
                        goto LABEL_443;
                      continue;
                    }
                  }
                  v941 = v228;
                  if (v228 == v227)
                    goto LABEL_429;
                  while (2)
                  {
                    v269 = (llvm::BasicBlock *)((char *)v941 - 24);
                    if (!v941)
                      v269 = 0;
                    v948 = v269;
                    v933 = *((_DWORD *)v269 + 5) & 0x10000000;
                    if (v232 && v933)
                    {
                      v270 = ***(_QWORD ***)v269;
                      v271 = *(_QWORD *)(v270 + 152);
                      v272 = *(unsigned int *)(v270 + 168);
                      if (!(_DWORD)v272)
                        goto LABEL_502;
                      LODWORD(v273) = (v272 - 1) & ((v948 >> 4) ^ (v948 >> 9));
                      v274 = (llvm::Value **)(v271 + 16 * v273);
                      v275 = *v274;
                      if (*v274 != v948)
                      {
                        v276 = 1;
                        while (v275 != (llvm::Value *)-4096)
                        {
                          v277 = v273 + v276++;
                          v273 = v277 & (v272 - 1);
                          v275 = *(llvm::Value **)(v271 + 16 * v273);
                          if (v275 == v948)
                          {
                            v274 = (llvm::Value **)(v271 + 16 * v273);
                            goto LABEL_503;
                          }
                        }
LABEL_502:
                        v274 = (llvm::Value **)(v271 + 16 * v272);
                      }
LABEL_503:
                      v278 = *((unsigned int *)v232 + 2);
                      if ((_DWORD)v278)
                      {
                        v279 = (size_t *)v274[1];
                        v931 = *((unsigned int *)v232 + 5);
                        v937 = (unsigned __int8 *)v279 + v931;
                        v967 = *v279;
                        if (*v279)
                        {
                          v990 = 0;
                          v280 = *v279;
                          v281 = v937;
                          do
                          {
                            v282 = *v281++;
                            v990 = 33 * v990 + v282;
                            --v280;
                          }
                          while (v280);
                        }
                        else
                        {
                          v990 = 0;
                        }
                        __n = v278 - 1;
                        v957 = *(_QWORD *)v232;
                        v945 = *(_QWORD *)v232 + 8 * v278 + 8;
                        v975 = 1;
                        v283 = v990;
                        while (1)
                        {
                          v980 = v283 & __n;
                          v284 = *(_QWORD **)(v957 + 8 * v980);
                          if (v284 != (_QWORD *)-8)
                          {
                            if (!v284)
                              goto LABEL_516;
                            if (*(_DWORD *)(v945 + 4 * v980) == v990
                              && v967 == *v284
                              && (!v967 || !memcmp(v937, (char *)v284 + v931, v967)))
                            {
                              break;
                            }
                          }
                          v283 = v975 + v980;
                          ++v975;
                        }
                        *(_QWORD *)(v957 + 8 * (int)v980) = -8;
                        *(int32x2_t *)((char *)v232 + 12) = vadd_s32(*(int32x2_t *)((char *)v232 + 12), (int32x2_t)0x1FFFFFFFFLL);
                      }
                    }
LABEL_516:
                    *((_QWORD *)v948 + 5) = v216;
                    if (v230 && v933)
                      llvm::ValueSymbolTable::reinsertValue(v230, v948);
                    v941 = (llvm::BasicBlock *)*((_QWORD *)v941 + 1);
                    v226 = (uint64_t *)(v936 + 24);
                    if (v941 == v227)
                      goto LABEL_429;
                    continue;
                  }
                }
                v249 = (uint64_t *)(v936 + 24);
                if (v208 == v936)
                  goto LABEL_459;
                v250 = *(llvm::BasicBlock **)(v208 + 32);
                if (v250 == v1001)
                  goto LABEL_459;
                v251 = (llvm::BasicBlock *)(v208 + 24);
                *(_WORD *)(v216 + 18) &= ~0x8000u;
                if (v216 == v202)
                  goto LABEL_457;
                v252 = *(_QWORD *)(v216 + 56);
                if (v252)
                  v253 = *(llvm::ValueSymbolTable **)(v252 + 104);
                else
                  v253 = 0;
                v254 = *(_QWORD *)(v202 + 56);
                if (v254)
                  v255 = *(llvm::ValueSymbolTable **)(v254 + 104);
                else
                  v255 = 0;
                if (v253 == v255)
                {
                  v256 = (llvm::BasicBlock *)(v208 + 24);
                  if (v251 != v250)
                  {
                    do
                    {
                      v257 = (_QWORD *)((char *)v256 - 24);
                      if (!v256)
                        v257 = 0;
                      v257[5] = v216;
                      v256 = (llvm::BasicBlock *)*((_QWORD *)v256 + 1);
                    }
                    while (v256 != v250);
                  }
LABEL_457:
                  if (v250 != v251)
                  {
                    v258 = *(_QWORD *)v250;
                    v259 = *(_QWORD *)v251;
                    *(_QWORD *)(v259 + 8) = v250;
                    *(_QWORD *)v250 = v259;
                    v260 = *v249;
                    *(_QWORD *)(v258 + 8) = v249;
                    *(_QWORD *)v251 = v260;
                    *(_QWORD *)(v260 + 8) = v251;
                    *v249 = v258;
                  }
LABEL_459:
                  if (*(_QWORD *)(v210 + 8))
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v210, (llvm::Value *)v208, (llvm::Value *)1);
                  llvm::Instruction::andIRFlags(v208, v210);
                  *(_OWORD *)v1051 = xmmword_1C8676358;
                  *(_OWORD *)__base = unk_1C8676368;
                  *(_OWORD *)__nel = xmmword_1C8676378;
                  llvm::combineMetadata(v208, (_BYTE *)v210, (unsigned int *)v1051, 12, 1);
                  llvm::Instruction::applyMergedLocation((llvm::Instruction *)v208, *(const llvm::DILocation **)(v208 + 48), *(const llvm::DILocation **)(v210 + 48));
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v210 + 40) + 40, (uint64_t ***)v210);
                  v261 = *(_QWORD *)(v210 + 24);
                  v262 = *(_QWORD **)(v210 + 32);
                  *v262 = v261;
                  *(_QWORD *)(v261 + 8) = v262;
                  *(_QWORD *)(v210 + 24) = 0;
                  *(_QWORD *)(v210 + 32) = 0;
                  llvm::Value::deleteValue((llvm::Value *)v210);
                  goto LABEL_462;
                }
                v929 = v253;
                v943 = (llvm::BasicBlock *)(v208 + 24);
                if (v251 == v250)
                  goto LABEL_457;
                while (2)
                {
                  v302 = (llvm::BasicBlock *)((char *)v943 - 24);
                  if (!v943)
                    v302 = 0;
                  v950 = v302;
                  v935 = *((_DWORD *)v302 + 5) & 0x10000000;
                  if (v255 && v935)
                  {
                    v303 = ***(_QWORD ***)v302;
                    v304 = *(_QWORD *)(v303 + 152);
                    v305 = *(unsigned int *)(v303 + 168);
                    if (!(_DWORD)v305)
                      goto LABEL_569;
                    LODWORD(v306) = (v305 - 1) & ((v950 >> 4) ^ (v950 >> 9));
                    v307 = (llvm::Value **)(v304 + 16 * v306);
                    v308 = *v307;
                    if (*v307 != v950)
                    {
                      v309 = 1;
                      while (v308 != (llvm::Value *)-4096)
                      {
                        v310 = v306 + v309++;
                        v306 = v310 & (v305 - 1);
                        v308 = *(llvm::Value **)(v304 + 16 * v306);
                        if (v308 == v950)
                        {
                          v307 = (llvm::Value **)(v304 + 16 * v306);
                          goto LABEL_570;
                        }
                      }
LABEL_569:
                      v307 = (llvm::Value **)(v304 + 16 * v305);
                    }
LABEL_570:
                    v311 = *((unsigned int *)v255 + 2);
                    if ((_DWORD)v311)
                    {
                      v312 = (size_t *)v307[1];
                      v932 = *((unsigned int *)v255 + 5);
                      v939 = (unsigned __int8 *)v312 + v932;
                      v969 = *v312;
                      if (*v312)
                      {
                        v992 = 0;
                        v313 = *v312;
                        v314 = v939;
                        do
                        {
                          v315 = *v314++;
                          v992 = 33 * v992 + v315;
                          --v313;
                        }
                        while (v313);
                      }
                      else
                      {
                        v992 = 0;
                      }
                      __nb = v311 - 1;
                      v959 = *(_QWORD *)v255;
                      v947 = *(_QWORD *)v255 + 8 * v311 + 8;
                      v977 = 1;
                      v316 = v992;
                      while (1)
                      {
                        v982 = v316 & __nb;
                        v317 = *(_QWORD **)(v959 + 8 * v982);
                        if (v317 != (_QWORD *)-8)
                        {
                          if (!v317)
                            goto LABEL_583;
                          if (*(_DWORD *)(v947 + 4 * v982) == v992
                            && v969 == *v317
                            && (!v969 || !memcmp(v939, (char *)v317 + v932, v969)))
                          {
                            break;
                          }
                        }
                        v316 = v977 + v982;
                        ++v977;
                      }
                      *(_QWORD *)(v959 + 8 * (int)v982) = -8;
                      *(int32x2_t *)((char *)v255 + 12) = vadd_s32(*(int32x2_t *)((char *)v255 + 12), (int32x2_t)0x1FFFFFFFFLL);
                    }
                  }
LABEL_583:
                  *((_QWORD *)v950 + 5) = v216;
                  if (v929 && v935)
                    llvm::ValueSymbolTable::reinsertValue(v929, v950);
                  v943 = (llvm::BasicBlock *)*((_QWORD *)v943 + 1);
                  v249 = (uint64_t *)(v936 + 24);
                  if (v943 == v250)
                    goto LABEL_457;
                  continue;
                }
              }
            }
          }
LABEL_704:
          if ((v217 & 1) == 0)
            goto LABEL_707;
          goto LABEL_705;
        }
        break;
      }
      if (v218 == 39 || v218 == 33 && !sub_1C5FA46DC(v202, v1004, v208, v210))
        goto LABEL_704;
      v345 = (_QWORD *)*v987;
      if ((_QWORD *)*v987 != v987)
      {
        if (v345)
          v346 = (unsigned __int8 *)(v345 - 3);
        else
          v346 = 0;
        v997 = (llvm::DataLayout *)v346;
        v347 = v346[16];
        v348 = v347 - 29;
        if (v347 != 30)
        {
          v349 = 2;
          switch(v348)
          {
            case 1:
LABEL_1780:
              __break(1u);
              JUMPOUT(0x1C5F9E098);
            case 2:
              v349 = (*((_DWORD *)v997 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_1717;
            case 3:
            case 9:
              v349 = (*((_DWORD *)v997 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_1717;
            case 4:
              goto LABEL_664;
            case 7:
              v349 = *((_WORD *)v997 + 9) & 1;
              goto LABEL_1717;
            case 8:
              v349 = 1;
              goto LABEL_664;
            case 10:
              v349 = *((_DWORD *)v997 + 20) + 1;
LABEL_1717:
              if (!v349)
                goto LABEL_1607;
              goto LABEL_664;
            default:
              goto LABEL_1607;
          }
        }
        if ((*((_DWORD *)v997 + 5) & 0x7FFFFFF) == 3)
          v349 = 2;
        else
          v349 = 1;
LABEL_664:
        v350 = 0;
        v983 = v349;
        while (1)
        {
          v351 = *((unsigned __int8 *)v997 + 16);
          if (v351 != 30)
            __asm { BR              X9 }
          v352 = *((_QWORD *)v997 - 4 * v350 - 4);
          if (*(_QWORD *)(v352 + 40) != v352 + 40)
            break;
LABEL_701:
          if (++v350 == v983)
            goto LABEL_1607;
        }
        v353 = *(_QWORD *)(v352 + 48);
        while (2)
        {
          v354 = v353 - 24;
          if (v353)
            v355 = v353 - 24;
          else
            v355 = 0;
          if (!v353 || *(_BYTE *)(v355 + 16) != 83)
            goto LABEL_701;
          v356 = *(_DWORD *)(v353 - 4);
          v357 = v356 & 0x7FFFFFF;
          if ((v356 & 0x7FFFFFF) != 0)
          {
            v358 = 0;
            while (1)
            {
              v359 = v354 - 32 * v357;
              if ((v356 & 0x40000000) != 0)
                v359 = *(_QWORD *)(v354 - 8);
              if (*(_QWORD *)(v359 + 32 * *(unsigned int *)(v354 + 60) + 8 * v358) == v202)
                break;
              if (v357 == ++v358)
                goto LABEL_679;
            }
          }
          else
          {
LABEL_679:
            LODWORD(v358) = -1;
          }
          v360 = v357;
          if ((v356 & 0x40000000) != 0)
          {
            v361 = *(_QWORD *)(v354 - 8);
            if ((_DWORD)v357)
            {
LABEL_682:
              v362 = 0;
              do
              {
                v363 = v354 - 32 * v360;
                if ((v356 & 0x40000000) != 0)
                  v363 = *(_QWORD *)(v354 - 8);
                if (*(_QWORD *)(v363 + 32 * *(unsigned int *)(v354 + 60) + 8 * v362) == v1004)
                  goto LABEL_690;
              }
              while (v360 != ++v362);
            }
          }
          else
          {
            v361 = v354 - 32 * v357;
            if ((_DWORD)v357)
              goto LABEL_682;
          }
          LODWORD(v362) = -1;
LABEL_690:
          if ((v356 & 0x40000000) != 0)
            v364 = *(_QWORD *)(v354 - 8);
          else
            v364 = v354 - 32 * v360;
          v365 = *(llvm::Constant **)(v361 + 32 * v358);
          v366 = *(llvm::Constant **)(v364 + 32 * v362);
          if (v365 != v366
            && ((sub_1C5F9705C(v365, v354) & 1) != 0
             || (sub_1C5F9705C(v366, v354) & 1) != 0
             || *((_BYTE *)v365 + 16) == 5
             && !llvm::isSafeToSpeculativelyExecute((uint64_t)v365, 0, 0, 0)
             || *((_BYTE *)v366 + 16) == 5
             && !llvm::isSafeToSpeculativelyExecute((uint64_t)v366, 0, 0, 0)))
          {
            goto LABEL_704;
          }
          v353 = *(_QWORD *)(v354 + 32);
          continue;
        }
      }
LABEL_1607:
      llvm::Instruction::clone((llvm::Instruction *)v208);
      v823 = (llvm::Value *)v822;
      *(_QWORD *)(v822 + 40) = v216;
      *(_WORD *)(v216 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(v822 + 23) & 0x10) != 0)
      {
        v912 = *(_QWORD *)(v216 + 56);
        if (v912)
        {
          v913 = *(llvm::ValueSymbolTable **)(v912 + 104);
          if (v913)
            llvm::ValueSymbolTable::reinsertValue(v913, v823);
        }
      }
      v824 = *(_QWORD *)v1001;
      *((_QWORD *)v823 + 3) = *(_QWORD *)v1001;
      *((_QWORD *)v823 + 4) = v1001;
      *(_QWORD *)(v824 + 8) = (char *)v823 + 24;
      *(_QWORD *)v1001 = (char *)v823 + 24;
      if (*(_BYTE *)(*(_QWORD *)v823 + 8) != 7)
      {
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v208, v823, (llvm::Value *)1);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v210, v823, (llvm::Value *)1);
        llvm::Value::takeName(v823, (llvm::Value *)v208);
      }
      llvm::Instruction::applyMergedLocation(v823, *(const llvm::DILocation **)(v208 + 48), *(const llvm::DILocation **)(v210 + 48));
      sub_1C5673D1C((uint64_t)v1051, (uint64_t)v823, 0, 0, 0);
      v1023 = 0;
      __s1[1] = 0;
      __s1[0] = &__s1[1];
      v825 = (_QWORD *)*v987;
      if ((_QWORD *)*v987 == v987)
      {
        v1014[0] = &v1015;
        v1014[1] = (void *)0x400000000;
      }
      else
      {
        v826 = (size_t)(v825 - 3);
        if (!v825)
          v826 = 0;
        v979 = v826;
        v827 = *(unsigned __int8 *)(v826 + 16);
        v828 = v827 - 29;
        if (v827 != 30)
        {
          v829 = 2;
          switch(v828)
          {
            case 1:
              goto LABEL_1780;
            case 2:
              v829 = (*(_DWORD *)(v979 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_1721;
            case 3:
            case 9:
              v829 = (*(_DWORD *)(v979 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_1721;
            case 4:
              goto LABEL_1617;
            case 7:
              v829 = *(_WORD *)(v979 + 18) & 1;
              goto LABEL_1721;
            case 8:
              v829 = 1;
              goto LABEL_1617;
            case 10:
              v829 = *(_DWORD *)(v979 + 80) + 1;
LABEL_1721:
              if (!v829)
                goto LABEL_1699;
              goto LABEL_1617;
            default:
              goto LABEL_1699;
          }
        }
        if ((*(_DWORD *)(v979 + 20) & 0x7FFFFFF) == 3)
          v829 = 2;
        else
          v829 = 1;
LABEL_1617:
        v985 = 0;
        v961 = v829;
        while (2)
        {
          v830 = *(unsigned __int8 *)(v979 + 16);
          if (v830 != 30)
            __asm { BR              X9 }
          v831 = *(_QWORD *)(v979 - 32 - 32 * v985);
          v832 = v1004;
          if (*(_QWORD *)(v831 + 40) != v831 + 40)
          {
            for (m = *(_QWORD *)(v831 + 48); ; m = *(_QWORD *)(v834 + 32))
            {
              v834 = m - 24;
              if (m)
                v835 = m - 24;
              else
                v835 = 0;
              if (!m || *(_BYTE *)(v835 + 16) != 83)
                break;
              v836 = *(_DWORD *)(m - 4);
              v837 = v836 & 0x7FFFFFF;
              if ((v836 & 0x7FFFFFF) != 0)
              {
                v838 = 0;
                while (1)
                {
                  v839 = v834 - 32 * v837;
                  if ((v836 & 0x40000000) != 0)
                    v839 = *(_QWORD *)(v834 - 8);
                  if (*(_QWORD *)(v839 + 32 * *(unsigned int *)(v834 + 60) + 8 * v838) == v202)
                    break;
                  if (v837 == ++v838)
                    goto LABEL_1632;
                }
              }
              else
              {
LABEL_1632:
                LODWORD(v838) = -1;
              }
              v840 = v837;
              if ((v836 & 0x40000000) != 0)
              {
                v841 = *(_QWORD *)(v834 - 8);
                if (!(_DWORD)v837)
                  goto LABEL_1642;
              }
              else
              {
                v841 = v834 - 32 * v837;
                if (!(_DWORD)v837)
                {
LABEL_1642:
                  LODWORD(v842) = -1;
                  goto LABEL_1643;
                }
              }
              v842 = 0;
              while (1)
              {
                v843 = v834 - 32 * v840;
                if ((v836 & 0x40000000) != 0)
                  v843 = *(_QWORD *)(v834 - 8);
                if (*(_QWORD *)(v843 + 32 * *(unsigned int *)(v834 + 60) + 8 * v842) == v832)
                  break;
                if (v840 == ++v842)
                  goto LABEL_1642;
              }
LABEL_1643:
              if ((v836 & 0x40000000) != 0)
                v844 = *(_QWORD *)(v834 - 8);
              else
                v844 = v834 - 32 * v840;
              v845 = *(uint64_t **)(v841 + 32 * v838);
              v846 = *(_QWORD *)(v844 + 32 * v842);
              if (v845 != (uint64_t *)v846)
              {
                v847 = (void **)__s1[1];
                v848 = &__s1[1];
                v849 = &__s1[1];
                if (__s1[1])
                {
                  while (1)
                  {
                    while (1)
                    {
                      v849 = v847;
                      v850 = (unint64_t)v847[4];
                      if (v850 <= (unint64_t)v845)
                        break;
LABEL_1648:
                      v847 = (void **)*v849;
                      v848 = v849;
                      if (!*v849)
                        goto LABEL_1655;
                    }
                    if (v850 >= (unint64_t)v845)
                    {
                      v851 = v849[5];
                      if ((unint64_t)v851 > v846)
                        goto LABEL_1648;
                      if ((unint64_t)v851 >= v846)
                        goto LABEL_1658;
                    }
                    v847 = (void **)v849[1];
                    if (!v847)
                    {
                      v848 = v849 + 1;
                      break;
                    }
                  }
                }
LABEL_1655:
                v852 = v849;
                v849 = (void **)operator new(0x38uLL);
                v849[4] = v845;
                v849[5] = (void *)v846;
                v849[6] = 0;
                *v849 = 0;
                v849[1] = 0;
                v849[2] = v852;
                *v848 = v849;
                v853 = (uint64_t *)v849;
                if (*(_QWORD *)__s1[0])
                {
                  __s1[0] = *(void **)__s1[0];
                  v853 = (uint64_t *)*v848;
                }
                sub_1C4768E74((uint64_t *)__s1[1], v853);
                ++v1023;
LABEL_1658:
                v832 = v1004;
                if (!v849[6])
                {
                  v854 = v1056;
                  v855 = v1055;
                  v856 = v1057;
                  v1003 = v1058;
                  v999 = v1059;
                  if (sub_1C4774A9C(v834))
                  {
                    v857 = *(unsigned __int8 *)(v834 + 17) >> 1;
                    if (v857 == 127)
                      v857 = -1;
                    v1056 = v857;
                  }
                  v858 = *v199;
                  if ((*((_BYTE *)v845 + 23) & 0x10) != 0)
                  {
                    v859 = **(_QWORD **)*v845;
                    v860 = *(_QWORD *)(v859 + 152);
                    v861 = *(unsigned int *)(v859 + 168);
                    if ((_DWORD)v861)
                    {
                      LODWORD(v862) = (v861 - 1) & ((v845 >> 4) ^ (v845 >> 9));
                      v863 = (uint64_t **)(v860 + 16 * v862);
                      v864 = *v863;
                      if (*v863 != v845)
                      {
                        v865 = 1;
                        do
                        {
                          if (v864 == (uint64_t *)-4096)
                            goto LABEL_1670;
                          v866 = v862 + v865++;
                          v862 = v866 & (v861 - 1);
                          v864 = *(uint64_t **)(v860 + 16 * v862);
                        }
                        while (v864 != v845);
                        v863 = (uint64_t **)(v860 + 16 * v862);
                      }
                    }
                    else
                    {
LABEL_1670:
                      v863 = (uint64_t **)(v860 + 16 * v861);
                    }
                    v867 = v863[1];
                    v870 = (void *)*v867;
                    v869 = (char *)(v867 + 2);
                    v868 = v870;
                  }
                  else
                  {
                    v868 = 0;
                    v869 = &byte_1C871356D;
                  }
                  LOWORD(v1032) = 773;
                  __src[0] = v869;
                  __src[1] = v868;
                  __s2 = ".";
                  if ((*(_BYTE *)(v846 + 23) & 0x10) != 0)
                  {
                    v871 = ***(_QWORD ***)v846;
                    v872 = *(_QWORD *)(v871 + 152);
                    v873 = *(unsigned int *)(v871 + 168);
                    if ((_DWORD)v873)
                    {
                      LODWORD(v874) = (v873 - 1) & ((v846 >> 4) ^ (v846 >> 9));
                      v875 = (uint64_t *)(v872 + 16 * v874);
                      v876 = *v875;
                      if (*v875 != v846)
                      {
                        v877 = 1;
                        do
                        {
                          if (v876 == -4096)
                            goto LABEL_1679;
                          v878 = v874 + v877++;
                          v874 = v878 & (v873 - 1);
                          v876 = *(_QWORD *)(v872 + 16 * v874);
                        }
                        while (v876 != v846);
                        v875 = (uint64_t *)(v872 + 16 * v874);
                      }
                    }
                    else
                    {
LABEL_1679:
                      v875 = (uint64_t *)(v872 + 16 * v873);
                    }
                    v879 = (_QWORD *)v875[1];
                    v882 = *v879;
                    v881 = (char *)(v879 + 2);
                    v880 = v882;
                  }
                  else
                  {
                    v880 = 0;
                    v881 = &byte_1C871356D;
                  }
                  v1014[0] = __src;
                  v1015 = (uint64_t)v881;
                  v1016 = v880;
                  v1017 = 1282;
                  v849[6] = llvm::IRBuilderBase::CreateSelect((uint64_t *)v1051, v858, v845, v846, (uint64_t)v1014, (unsigned __int8 *)v936);
                  v1056 = v854;
                  v1055 = v855;
                  v1057 = v856;
                  v1058 = v1003;
                  v1059 = v999;
                  v832 = v1004;
                }
                v883 = *(_DWORD *)(v834 + 20);
                v884 = v883 & 0x7FFFFFF;
                if ((v883 & 0x7FFFFFF) != 0)
                {
                  v885 = 0;
                  do
                  {
                    v886 = *(_DWORD *)(v834 + 20);
                    if ((v886 & 0x40000000) != 0)
                    {
                      v888 = *(_QWORD *)(v834 - 8);
                      v887 = *(unsigned int *)(v834 + 60);
                    }
                    else
                    {
                      v887 = *(unsigned int *)(v834 + 60);
                      v888 = v834 - 32 * (v886 & 0x7FFFFFF);
                    }
                    v889 = *(_QWORD *)(v888 + 32 * v887 + 8 * v885);
                    if (v889 == v202 || v889 == v832)
                      sub_1C6125834(v834, v885, (uint64_t)v849[6]);
                    ++v885;
                  }
                  while (v884 != v885);
                }
              }
            }
          }
          if (++v985 != v961)
            continue;
          break;
        }
        v825 = (_QWORD *)*v987;
LABEL_1699:
        v1014[0] = &v1015;
        v1014[1] = (void *)0x400000000;
        if (v825 != v987)
        {
          if (v825)
            v890 = v825 - 3;
          else
            v890 = 0;
          v891 = *((unsigned __int8 *)v890 + 16);
          v892 = v891 - 29;
          if (v891 != 30)
          {
            v893 = 2;
            switch(v892)
            {
              case 1:
                goto LABEL_1780;
              case 2:
                v893 = (*((_DWORD *)v890 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_1748;
              case 3:
              case 9:
                v893 = (*((_DWORD *)v890 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_1748;
              case 4:
                goto LABEL_1707;
              case 7:
                v893 = *((_WORD *)v890 + 9) & 1;
                goto LABEL_1748;
              case 8:
                v893 = 1;
                goto LABEL_1707;
              case 10:
                v893 = *((_DWORD *)v890 + 20) + 1;
LABEL_1748:
                if (!v893)
                  goto LABEL_1724;
                goto LABEL_1707;
              default:
                goto LABEL_1724;
            }
          }
          if ((*((_DWORD *)v890 + 5) & 0x7FFFFFF) == 3)
            v893 = 2;
          else
            v893 = 1;
LABEL_1707:
          v894 = 0;
          v895 = 0;
          v896 = v893;
          v897 = v890 - 8;
          do
          {
            v898 = *((unsigned __int8 *)v890 + 16);
            if (v898 != 30)
              __asm { BR              X9 }
            v899 = v890[-4 * v895 - 4];
            sub_1C5F90FA0(v899, v216, v202, 0);
            if (*(_QWORD *)(v927 + 8))
            {
              v900 = LODWORD(v1014[1]);
              if (LODWORD(v1014[1]) >= (unint64_t)HIDWORD(v1014[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1014, (uint64_t)&v1015, LODWORD(v1014[1]) + 1, 16);
                v900 = LODWORD(v1014[1]);
              }
              v901 = (uint64_t *)((char *)v1014[0] + 16 * v900);
              *v901 = v216;
              v901[1] = v899 & 0xFFFFFFFFFFFFFFFBLL;
              ++LODWORD(v1014[1]);
            }
            ++v895;
            v894 += 2;
            v897 += 4;
          }
          while (v896 != v895);
        }
      }
LABEL_1724:
      if (v936 && *(_QWORD *)(v927 + 8))
      {
        v902 = *(unsigned __int8 *)(v936 + 16);
        if (v902 != 30)
          __asm { BR              X11 }
        if ((*(_DWORD *)(v936 + 20) & 0x7FFFFFF) == 3)
          v903 = 2;
        else
          v903 = 1;
        v904 = 0;
        v905 = 0;
        v906 = v903;
        v907 = v936 - 64;
        do
        {
          v908 = *(unsigned __int8 *)(v936 + 16);
          if (v908 != 30)
            __asm { BR              X9 }
          v909 = v926[-4 * v905];
          v910 = LODWORD(v1014[1]);
          if (LODWORD(v1014[1]) >= (unint64_t)HIDWORD(v1014[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1014, (uint64_t)&v1015, LODWORD(v1014[1]) + 1, 16);
            v910 = LODWORD(v1014[1]);
          }
          v911 = (uint64_t *)((char *)v1014[0] + 16 * v910);
          *v911 = v216;
          v911[1] = v909 | 4;
          ++LODWORD(v1014[1]);
          ++v905;
          v904 += 2;
          v907 += 32;
        }
        while (v906 != v905);
      }
      sub_1C5FA3F18(v936);
      v914 = *(_QWORD *)(v927 + 8);
      if (v914)
        llvm::DomTreeUpdater::applyUpdates(v914, (unint64_t *)v1014[0], LODWORD(v1014[1]));
      if (v1014[0] != &v1015)
        free(v1014[0]);
      sub_1C6143384((_QWORD *)__s1[1]);
      if ((void **)v1051[0] != __base)
        free(v1051[0]);
      goto LABEL_705;
    }
    v326 = (_QWORD *)*((_QWORD *)v194 + 5);
    if (v326 == (_QWORD *)((char *)v194 + 40))
    {
      v327 = 0;
    }
    else
    {
      if (v326)
        v327 = v326 - 3;
      else
        v327 = 0;
      if (*((unsigned __int8 *)v327 + 16) - 29 >= 0xB)
        v327 = 0;
    }
    v337 = *((unsigned __int8 *)v327 + 16);
    if (v337 != 30)
      __asm { BR              X12 }
    if ((*((_DWORD *)v327 + 5) & 0x7FFFFFF) == 3 || (llvm::BasicBlock *)*(v327 - 4) != v196)
      goto LABEL_710;
    v334 = *(llvm::MemorySSAUpdater **)v5;
    v335 = (uint64_t ***)v4;
    v336 = (uint64_t *)v194;
    goto LABEL_635;
  }
  if (v197)
  {
    v324 = (_QWORD *)*((_QWORD *)v196 + 5);
    if (v324 == (_QWORD *)((char *)v196 + 40))
    {
      v325 = 0;
    }
    else
    {
      if (v324)
        v325 = v324 - 3;
      else
        v325 = 0;
      if (*((unsigned __int8 *)v325 + 16) - 29 >= 0xB)
        v325 = 0;
    }
    v333 = *((unsigned __int8 *)v325 + 16);
    if (v333 != 30)
      __asm { BR              X12 }
    if ((*((_DWORD *)v325 + 5) & 0x7FFFFFF) != 3 && (llvm::BasicBlock *)*(v325 - 4) == v194)
    {
      v334 = *(llvm::MemorySSAUpdater **)v5;
      v335 = (uint64_t ***)v4;
      v336 = (uint64_t *)v196;
LABEL_635:
      if (sub_1C5FA0BF0(v335, v336, v334))
        goto LABEL_1110;
    }
  }
LABEL_710:
  v922 = (llvm::Constant ***)v22;
  v367 = 0;
  v925 = *(_QWORD *)(v5 + 8);
  v930 = *(llvm::ValueSymbolTable **)(v5 + 16);
  v940 = *(char ***)(*(_QWORD *)(v5 + 40) + 16);
  v6 = -4096;
  do
  {
    v368 = v367;
    v1014[0] = (void *)1;
    for (n = 1; n != 17; n += 2)
      v1014[n] = (void *)-4096;
    v1019 = v1021;
    v1020 = 0x800000000;
    v370 = *((_QWORD *)v4 + 5);
    v371 = *((_QWORD *)v4 - 12);
    v372 = *(unsigned __int8 *)(v371 + 16);
    v951 = v368;
    if (v371 && v372 == 83 && *(_QWORD *)(v371 + 40) == v370)
    {
      v451 = *(_DWORD *)(v371 + 20);
      v452 = v451 & 0x7FFFFFF;
      if ((v451 & 0x7FFFFFF) == 1)
      {
        llvm::FoldSingleEntryPHINodes((llvm *)v370, 0, v198);
        v425 = 0;
        v424 = 1;
        goto LABEL_1074;
      }
      if ((v451 & 0x40000000) != 0)
      {
        v453 = *(llvm::DataLayout ***)(v371 - 8);
        if ((v451 & 0x7FFFFFF) == 0)
          goto LABEL_726;
      }
      else
      {
        v452 = v452;
        v453 = (llvm::DataLayout **)(v371 - 32 * v452);
        if (!(_DWORD)v452)
          goto LABEL_726;
      }
      v462 = 32 * v452;
      v463 = v453;
      do
      {
        v464 = *v453;
        if (*v453)
          v465 = *((_BYTE *)*v453 + 16) == 16;
        else
          v465 = 0;
        if (v465)
        {
          v466 = *(_DWORD *)(v371 + 20);
          if ((v466 & 0x40000000) != 0)
            v467 = *(_QWORD *)(v371 - 8);
          else
            v467 = v371 - 32 * (v466 & 0x7FFFFFF);
          v1051[0] = *(llvm::DataLayout **)(v467
                                          + 32 * *(unsigned int *)(v371 + 60)
                                          + 8 * (((unint64_t)v463 - v467) >> 5));
          v1051[1] = v464;
          sub_1C5FA5228((uint64_t)v1014, (uint64_t *)v1051);
        }
        v453 += 4;
        v463 += 4;
        v462 -= 32;
      }
      while (v462);
    }
    else
    {
      v373 = *(_QWORD *)(v370 + 8);
      if (v373)
      {
        while (1)
        {
          v374 = *(_QWORD *)(v373 + 24);
          v375 = *(unsigned __int8 *)(v374 + 16);
          v376 = v374 && v375 >= 0x1C;
          if (v376 && v375 - 29 < 0xB)
            break;
          v373 = *(_QWORD *)(v373 + 8);
          if (!v373)
            goto LABEL_726;
        }
        while (1)
        {
          v426 = *(llvm::DataLayout **)(v374 + 40);
          if (!v371 || v372 < 0x1C || *(_QWORD *)(v371 + 40) != v370)
          {
            v427 = (_QWORD *)*((_QWORD *)v426 + 5);
            if (v427 != (_QWORD *)((char *)v426 + 40))
            {
              v428 = (uint64_t ***)(v427 - 3);
              if (!v427)
                v428 = 0;
              v429 = *((unsigned __int8 *)v428 + 16) - 40;
              if (v429 < 0xFFFFFFF5)
                v428 = 0;
              if (v427)
              {
                if (*((_BYTE *)v428 + 16) == 30
                  && v429 >= 0xFFFFFFF5
                  && (*((_DWORD *)v428 + 5) & 0x7FFFFFF) == 3
                  && *(v428 - 12) == (uint64_t **)v371)
                {
                  v431 = *(v428 - 4);
                  if (v431 != *(v428 - 8))
                    break;
                }
              }
            }
          }
          do
          {
LABEL_868:
            v373 = *(_QWORD *)(v373 + 8);
            if (!v373)
              goto LABEL_726;
            v374 = *(_QWORD *)(v373 + 24);
            v435 = *(unsigned __int8 *)(v374 + 16);
            if (v374)
              v436 = v435 >= 0x1C;
            else
              v436 = 0;
            v437 = !v436 || v435 - 29 > 0xA;
          }
          while (v437);
          v372 = *(unsigned __int8 *)(v371 + 16);
        }
        v432 = ***v428;
        if (v431 == (uint64_t **)v370)
        {
          v433 = *(llvm::DataLayout **)(v432 + 1560);
          if (v433)
            goto LABEL_867;
          v438 = *(llvm::ConstantInt **)(v432 + 1888);
          v439 = *(_DWORD *)(v432 + 1896);
          LODWORD(v1051[1]) = v439 >> 8;
          if (v439 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)v1051, 1, 0);
          }
          else
          {
            if (v439 <= 0xFF)
              v440 = 0;
            else
              v440 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v439);
            v1051[0] = (llvm::DataLayout *)(v440 & 1);
          }
          v433 = llvm::ConstantInt::get(v438, (llvm::LLVMContext *)v1051, v198);
          if (LODWORD(v1051[1]) >= 0x41 && v1051[0])
            MEMORY[0x1CAA32F9C](v1051[0], 0x1000C8000313F17);
          *(_QWORD *)(v432 + 1560) = v433;
        }
        else
        {
          v433 = *(llvm::DataLayout **)(v432 + 1568);
          if (v433)
            goto LABEL_867;
          v434 = *(llvm::ConstantInt **)(v432 + 1888);
          LODWORD(v1051[1]) = *(_DWORD *)(v432 + 1896) >> 8;
          if (LODWORD(v1051[1]) > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)v1051, 0, 0);
          else
            v1051[0] = 0;
          v433 = llvm::ConstantInt::get(v434, (llvm::LLVMContext *)v1051, v198);
          if (LODWORD(v1051[1]) >= 0x41 && v1051[0])
            MEMORY[0x1CAA32F9C](v1051[0], 0x1000C8000313F17);
          *(_QWORD *)(v432 + 1568) = v433;
        }
        if (!v433)
          goto LABEL_868;
LABEL_867:
        v1051[0] = v426;
        v1051[1] = v433;
        sub_1C5FA5228((uint64_t)v1014, (uint64_t *)v1051);
        goto LABEL_868;
      }
    }
LABEL_726:
    if (!(_DWORD)v1020)
    {
      v424 = 0;
      v425 = 0;
      goto LABEL_1074;
    }
    v1051[0] = (llvm::DataLayout *)__nel;
    v1051[1] = (llvm::DataLayout *)__nel;
    __base[0] = (void *)32;
    LODWORD(__base[1]) = 0;
    llvm::BasicBlock::instructionsWithoutDebug((llvm::BasicBlock *)v370, 0, (uint64_t)__src);
    sub_1C5FA49B8((uint64_t)__p, (uint64_t *)__src);
    v378 = v1036;
    if (v1036 == v1035)
    {
      v378 = v1035;
      v379 = 4;
LABEL_729:
      (*(void (**)(void))(*v378 + 8 * v379))();
      goto LABEL_730;
    }
    if (v1036)
    {
      v379 = 5;
      goto LABEL_729;
    }
LABEL_730:
    p_s2 = v1033;
    if (v1033 == &__s2)
    {
      p_s2 = &__s2;
      v381 = 4;
    }
    else
    {
      if (!v1033)
        goto LABEL_733;
      v381 = 5;
    }
    (*((void (**)(void))*p_s2 + v381))();
LABEL_733:
    *(_OWORD *)__src = *(_OWORD *)__p;
    if (v1041)
    {
      if (v1041 == &v1038)
      {
        v1033 = &__s2;
        (*((void (**)(const char **, void **))v1038 + 3))(&v1038, &__s2);
      }
      else
      {
        v1033 = (void **)(*((uint64_t (**)(void))*v1041 + 2))();
      }
    }
    else
    {
      v1033 = 0;
    }
    v1034 = v1042;
    if (v1044)
    {
      if (v1044 == v1043)
      {
        v1036 = v1035;
        (*(void (**)(_QWORD *, _QWORD *))(v1043[0] + 24))(v1043, v1035);
      }
      else
      {
        v1036 = (_QWORD *)(*(uint64_t (**)(void))(*v1044 + 16))();
      }
    }
    else
    {
      v1036 = 0;
    }
    *(_OWORD *)__s1 = v1045;
    if (v1047)
    {
      if (v1047 == v1046)
      {
        v1025 = (void **)&v1023;
        (*(void (**)(_QWORD *))(v1046[0] + 24))(v1046);
      }
      else
      {
        v1025 = (void **)(*(uint64_t (**)(void))(*v1047 + 16))();
      }
    }
    else
    {
      v1025 = 0;
    }
    v1026 = v1048;
    if (v1050)
    {
      if (v1050 == v1049)
      {
        v1028 = v1027;
        (*(void (**)(_QWORD *, _QWORD *))(v1049[0] + 24))(v1049, v1027);
      }
      else
      {
        v1028 = (_QWORD *)(*(uint64_t (**)(void))(*v1050 + 16))();
      }
    }
    else
    {
      v1028 = 0;
    }
    v382 = 0;
LABEL_746:
    *(_OWORD *)v1064 = v1034;
    if (v1036)
    {
      if (v1036 == v1035)
      {
        v1066 = v1065;
        (*(void (**)(_QWORD *))(v1035[0] + 24))(v1035);
      }
      else
      {
        v1066 = (_BYTE *)(*(uint64_t (**)(void))(*v1036 + 16))();
      }
    }
    else
    {
      v1066 = 0;
    }
    *(_OWORD *)v1061 = v1026;
    if (v1028)
    {
      if (v1028 == v1027)
      {
        v1063 = v1062;
        (*(void (**)(_QWORD *, _QWORD *))(v1027[0] + 24))(v1027, v1062);
        v383 = v1063;
      }
      else
      {
        v383 = (_QWORD *)(*(uint64_t (**)(void))(*v1028 + 16))();
        v1063 = v383;
      }
      a3 = (uint64_t *)v1064[0];
      v384 = v1061[0];
      if (v383 == v1062)
      {
        (*(void (**)(_QWORD *))(v1062[0] + 32))(v1062);
      }
      else if (v383)
      {
        (*(void (**)(_QWORD *))(*v383 + 40))(v383);
      }
    }
    else
    {
      v384 = v1026;
      a3 = (uint64_t *)v1064[0];
    }
    v385 = v1066;
    if (v1066 == v1065)
    {
      v385 = v1065;
      v386 = 4;
      goto LABEL_764;
    }
    if (v1066)
    {
      v386 = 5;
LABEL_764:
      (*(void (**)(void))(*v385 + 8 * v386))();
    }
    if (a3 == (uint64_t *)v384)
      goto LABEL_815;
    v387 = sub_1C5FA503C((uint64_t)__src);
    v388 = v387;
    if (*(_BYTE *)(v387 + 16) == 84)
    {
      v389 = *(_QWORD *)(v387 + 64);
      if (v389)
      {
        if ((*(_BYTE *)(v389 + 15) & 1) != 0)
          goto LABEL_815;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v387, 24) & 1) != 0)
        goto LABEL_815;
      v390 = *(_QWORD *)(v388 + 64);
      if (v390)
      {
        if ((*(_BYTE *)(v390 + 12) & 0x40) != 0)
          goto LABEL_815;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v388, 6) & 1) != 0)
        goto LABEL_815;
    }
    if (sub_1C4D9F8B4(v388))
      goto LABEL_774;
    v391 = *(unsigned __int8 *)(v388 + 16) - 33;
    if (v391 > 0x37)
      goto LABEL_779;
    if (((1 << (*(_BYTE *)(v388 + 16) - 33)) & 0x808001D0000010) != 0)
      goto LABEL_796;
    if (((1 << (*(_BYTE *)(v388 + 16) - 33)) & 0x8000000000041) == 0)
    {
      if (v391 == 27 && (*(_WORD *)(v388 + 18) & 0x301) != 0)
        goto LABEL_796;
LABEL_779:
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v388) & 1) == 0
        && llvm::Instruction::willReturn((llvm::Instruction *)v388))
      {
        v392 = *(unsigned __int8 *)(v388 + 16);
        if ((v392 - 29) < 0xB)
          goto LABEL_797;
        v393 = *(_QWORD *)(v388 + 8);
        if (!v393)
        {
LABEL_774:
          sub_1C4774094((llvm::SmallPtrSetImplBase *)v1051, v388);
          goto LABEL_800;
        }
        while (1)
        {
          v394 = (llvm::DataLayout *)sub_1C477672C((uint64_t)v1051, *(_QWORD *)(v393 + 24));
          v395 = v1051[1] == v1051[0] ? (void **)((char *)__base + 4) : __base;
          if (v394 == (llvm::DataLayout *)((char *)v1051[1] + 8 * *(unsigned int *)v395))
            break;
          v393 = *(_QWORD *)(v393 + 8);
          if (!v393)
            goto LABEL_774;
        }
      }
      goto LABEL_796;
    }
    v396 = *(_QWORD *)(v388 + 64);
    if (v396 && (*(_BYTE *)(v396 + 17) & 0x30) != 0)
      goto LABEL_779;
    v397 = *(_DWORD *)(v388 + 20);
    if (v397 < 0)
    {
      v400 = v388 - 32 * (v397 & 0x7FFFFFF);
      v403 = *(_QWORD *)(v400 - 8);
      v401 = v400 - 8;
      v402 = v403;
      if (v403)
      {
        v404 = -v402;
        do
        {
          v405 = *(_DWORD *)(*(_QWORD *)(v401 + v404) + 8);
          v437 = v405 > 7;
          v406 = (1 << v405) & 0x83;
          if (v437 || v406 == 0)
            goto LABEL_796;
          v404 += 16;
        }
        while (v404);
      }
    }
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v388, 45) & 1) != 0
      || llvm::CallBase::hasFnAttrOnCalledFunction(v388, 44))
    {
      goto LABEL_779;
    }
LABEL_796:
    v392 = *(unsigned __int8 *)(v388 + 16);
LABEL_797:
    if (v392 == 83)
      goto LABEL_800;
    if (v382 <= dword_1ED828B78)
    {
      ++v382;
LABEL_800:
      v398 = *(_QWORD *)(v388 + 8);
      if (!v398)
        goto LABEL_804;
      do
      {
        v399 = *(_QWORD *)(v398 + 24);
        if (*(_QWORD *)(v399 + 40) != v370 || *(_BYTE *)(v399 + 16) == 83)
          goto LABEL_815;
        v398 = *(_QWORD *)(v398 + 8);
      }
      while (v398);
LABEL_804:
      while (1)
      {
        *(_QWORD *)&v1034 = *(_QWORD *)v1034;
        if (!v1036)
          break;
        if (((*(uint64_t (**)(void))(*v1036 + 48))() & 1) != 0)
          goto LABEL_746;
      }
LABEL_1459:
      sub_1C485C2F0();
LABEL_1460:
      v726 = a3 == (uint64_t *)v6;
      v727 = ***(_QWORD ***)v6;
      v728 = *(llvm::ConstantInt **)(v727 + 1888);
      v729 = *(unsigned int *)(v727 + 1896);
      LODWORD(v1051[1]) = v729 >> 8;
      if (v729 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)v1051, v726, 0);
      }
      else
      {
        if (v729 <= 0xFF)
          v730 = 0;
        else
          v730 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v729);
        v1051[0] = (llvm::DataLayout *)(v730 & v726);
      }
      v731 = llvm::ConstantInt::get(v728, (llvm::LLVMContext *)v1051, v579);
      if (LODWORD(v1051[1]) >= 0x41 && v1051[0])
        MEMORY[0x1CAA32F9C](v1051[0], 0x1000C8000313F17);
      if (*v922)
      {
        **(_QWORD **)(v936 - 80) = *(_QWORD *)(v936 - 88);
        v732 = *(_QWORD *)(v936 - 88);
        if (v732)
          *(_QWORD *)(v732 + 16) = *(_QWORD *)(v936 - 80);
      }
      *v922 = (llvm::Constant **)v731;
      if (v731)
      {
        v735 = *((_QWORD *)v731 + 1);
        v734 = (llvm::Constant ****)((char *)v731 + 8);
        v733 = v735;
        *(_QWORD *)(v936 - 88) = v735;
        if (v735)
          *(_QWORD *)(v733 + 16) = v936 - 88;
        *(_QWORD *)(v936 - 80) = v734;
        *v734 = v922;
      }
      goto LABEL_1603;
    }
LABEL_815:
    v408 = v1028;
    if (v1028 == v1027)
    {
      v408 = v1027;
      v409 = 4;
LABEL_817:
      (*(void (**)(void))(*v408 + 8 * v409))();
      goto LABEL_818;
    }
    if (v1028)
    {
      v409 = 5;
      goto LABEL_817;
    }
LABEL_818:
    v410 = v1025;
    if (v1025 == (void **)&v1023)
    {
      v410 = (void **)&v1023;
      v411 = 4;
LABEL_820:
      (*((void (**)(void))*v410 + v411))();
      goto LABEL_821;
    }
    if (v1025)
    {
      v411 = 5;
      goto LABEL_820;
    }
LABEL_821:
    v412 = v1036;
    if (v1036 == v1035)
    {
      v412 = v1035;
      v413 = 4;
LABEL_823:
      (*(void (**)(void))(*v412 + 8 * v413))();
      goto LABEL_824;
    }
    if (v1036)
    {
      v413 = 5;
      goto LABEL_823;
    }
LABEL_824:
    v414 = v1033;
    if (v1033 == &__s2)
    {
      v414 = &__s2;
      v415 = 4;
LABEL_826:
      (*((void (**)(void))*v414 + v415))();
      goto LABEL_827;
    }
    if (v1033)
    {
      v415 = 5;
      goto LABEL_826;
    }
LABEL_827:
    v416 = v1050;
    if (v1050 == v1049)
    {
      v416 = v1049;
      v417 = 4;
LABEL_829:
      (*(void (**)(void))(*v416 + 8 * v417))();
      goto LABEL_830;
    }
    if (v1050)
    {
      v417 = 5;
      goto LABEL_829;
    }
LABEL_830:
    v418 = v1047;
    if (v1047 == v1046)
    {
      v418 = v1046;
      v419 = 4;
LABEL_832:
      (*(void (**)(void))(*v418 + 8 * v419))();
      goto LABEL_833;
    }
    if (v1047)
    {
      v419 = 5;
      goto LABEL_832;
    }
LABEL_833:
    v420 = v1044;
    if (v1044 == v1043)
    {
      v420 = v1043;
      v421 = 4;
LABEL_835:
      (*(void (**)(void))(*v420 + 8 * v421))();
      goto LABEL_836;
    }
    if (v1044)
    {
      v421 = 5;
      goto LABEL_835;
    }
LABEL_836:
    v422 = v1041;
    if (v1041 == &v1038)
    {
      v422 = &v1038;
      v423 = 4;
LABEL_838:
      (*(void (**)(void))&(*v422)[8 * v423])();
      goto LABEL_839;
    }
    if (v1041)
    {
      v423 = 5;
      goto LABEL_838;
    }
LABEL_839:
    if (v1051[1] != v1051[0])
      free(v1051[1]);
    if (a3 != (uint64_t *)v384 || !(_DWORD)v1020)
    {
LABEL_842:
      v424 = 0;
      v425 = 0;
      goto LABEL_1074;
    }
    v441 = 16 * v1020;
    v442 = (char *)v1019 + 8;
    while (1)
    {
      v443 = (_QWORD *)(*(_QWORD *)v442 + 24);
      if (*(_DWORD *)(*(_QWORD *)v442 + 32) >= 0x41u)
        v443 = (_QWORD *)*v443;
      v444 = *v443 ? 0 : -1;
      v445 = v926[4 * v444];
      if (v445 != v370)
      {
        v446 = (_QWORD *)*((_QWORD *)v442 - 1);
        v448 = v446[5];
        v447 = v446 + 5;
        v449 = v448 - 24;
        if (v448)
          v450 = v449;
        else
          v450 = 0;
        if (*(unsigned __int8 *)(v450 + 16) - 29 >= 0xB)
          v450 = 0;
        if (*(_BYTE *)(v450 + 16) != 32)
          break;
      }
      v442 += 16;
      v441 -= 16;
      if (!v441)
        goto LABEL_842;
    }
    __p[0] = &v1038;
    __p[1] = (void *)0x300000000;
    if ((*(_BYTE *)(v445 + 23) & 0x10) == 0)
    {
      v469 = 0;
      v470 = (llvm::DataLayout *)&byte_1C871356D;
      goto LABEL_936;
    }
    v454 = ***(_QWORD ***)v445;
    v455 = *(_QWORD *)(v454 + 152);
    v456 = *(unsigned int *)(v454 + 168);
    if (!(_DWORD)v456)
      goto LABEL_934;
    LODWORD(v457) = (v456 - 1) & ((v445 >> 4) ^ (v445 >> 9));
    v458 = (uint64_t *)(v455 + 16 * v457);
    v459 = *v458;
    if (*v458 != v445)
    {
      v460 = 1;
      while (v459 != -4096)
      {
        v461 = v457 + v460++;
        v457 = v461 & (v456 - 1);
        v459 = *(_QWORD *)(v455 + 16 * v457);
        if (v459 == v445)
        {
          v458 = (uint64_t *)(v455 + 16 * v457);
          goto LABEL_935;
        }
      }
LABEL_934:
      v458 = (uint64_t *)(v455 + 16 * v456);
    }
LABEL_935:
    v468 = (llvm::DataLayout **)v458[1];
    v471 = *v468;
    v470 = (llvm::DataLayout *)(v468 + 2);
    v469 = v471;
LABEL_936:
    v472 = **(_QWORD ***)v370;
    LOWORD(__nel[0]) = 773;
    v1051[0] = v470;
    v1051[1] = v469;
    __base[0] = ".critedge";
    v473 = *(_QWORD *)(v445 + 56);
    v474 = operator new();
    *(_QWORD *)v474 = *v472 + 1600;
    *(_QWORD *)(v474 + 8) = 0;
    v475 = *(_DWORD *)(v474 + 20) & 0xC0000000;
    *(_QWORD *)(v474 + 24) = 0;
    v476 = v474 + 24;
    *(_DWORD *)(v474 + 16) = 22;
    *(_DWORD *)(v474 + 20) = v475;
    *(_QWORD *)(v474 + 32) = 0;
    *(_QWORD *)(v474 + 40) = v474 + 40;
    *(_QWORD *)(v474 + 48) = v474 + 40;
    *(_QWORD *)(v474 + 56) = 0;
    if (v473)
    {
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v473 + 72, (_QWORD *)v474);
      v477 = *(_QWORD *)(v445 + 24);
      *(_QWORD *)(v474 + 24) = v477;
      *(_QWORD *)(v474 + 32) = v445 + 24;
      *(_QWORD *)(v477 + 8) = v476;
      *(_QWORD *)(v445 + 24) = v476;
    }
    llvm::Value::setName((uint64_t ***)v474, (uint64_t)v1051);
    v478 = (char *)operator new(0x60uLL);
    *((_DWORD *)v478 + 13) = *((_DWORD *)v478 + 13) & 0x38000000 | 1;
    *(_QWORD *)v478 = 0;
    *((_QWORD *)v478 + 1) = 0;
    *((_QWORD *)v478 + 2) = 0;
    *((_QWORD *)v478 + 3) = v478 + 32;
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v478 + 32), (llvm::BasicBlock *)v445, (llvm::BasicBlock *)v474);
    if (v925)
    {
      v479 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&v1038, LODWORD(__p[1]) + 1, 16);
        v479 = LODWORD(__p[1]);
      }
      v480 = (uint64_t *)((char *)__p[0] + 16 * v479);
      *v480 = v474;
      v480[1] = v445 & 0xFFFFFFFFFFFFFFFBLL;
      ++LODWORD(__p[1]);
    }
    v481 = (unsigned __int8 *)*((_QWORD *)v4 + 6);
    v1064[0] = (unint64_t)v481;
    if (v481)
      llvm::MetadataTracking::track((uint64_t)v1064, v481, 2);
    v484 = (unsigned __int8 *)*((_QWORD *)v478 + 10);
    v483 = v478 + 80;
    v482 = v484;
    if (v484)
      llvm::MetadataTracking::untrack((uint64_t)v483, v482);
    v485 = (unsigned __int8 *)v1064[0];
    *v483 = v1064[0];
    if (v485)
    {
      llvm::MetadataTracking::retrack((uint64_t)v1064, v485, (uint64_t)v483);
      v1064[0] = 0;
    }
    sub_1C5F90FA0(v445, v474, v370, 0);
    v944 = v474;
    v928 = *(uint64_t **)(v474 + 48);
    __s1[1] = 0;
    __s1[0] = 0;
    LODWORD(v1023) = 0;
    for (ii = *(_QWORD *)(v370 + 48); ; ii = *(_QWORD *)(ii + 8))
    {
      v487 = ii ? (llvm::Instruction *)(ii - 24) : 0;
      if (v487 == v4)
        break;
      if (!ii || *((_BYTE *)v487 + 16) != 83)
      {
        llvm::Instruction::clone(v487);
        v497 = (uint64_t)v494;
        if ((*((_BYTE *)v487 + 23) & 0x10) != 0)
        {
          v498 = ***(_QWORD ***)v487;
          v499 = *(_QWORD *)(v498 + 152);
          v500 = *(unsigned int *)(v498 + 168);
          if (!(_DWORD)v500)
            goto LABEL_972;
          LODWORD(v501) = (v500 - 1) & ((v487 >> 4) ^ (v487 >> 9));
          v502 = (llvm::Instruction **)(v499 + 16 * v501);
          v503 = *v502;
          if (*v502 != v487)
          {
            v504 = 1;
            while (v503 != (llvm::Instruction *)-4096)
            {
              v505 = v501 + v504++;
              v501 = v505 & (v500 - 1);
              v503 = *(llvm::Instruction **)(v499 + 16 * v501);
              if (v503 == v487)
              {
                v502 = (llvm::Instruction **)(v499 + 16 * v501);
                goto LABEL_973;
              }
            }
LABEL_972:
            v502 = (llvm::Instruction **)(v499 + 16 * v500);
          }
LABEL_973:
          v506 = (llvm::DataLayout **)v502[1];
          v507 = *v506;
          LOWORD(__nel[0]) = 773;
          v1051[0] = (llvm::DataLayout *)(v506 + 2);
          v1051[1] = v507;
          __base[0] = ".c";
          llvm::Value::setName(v494, (uint64_t)v1051);
        }
        v508 = *(_DWORD *)(v497 + 20);
        if ((v508 & 0x40000000) != 0)
        {
          v510 = *(_QWORD *)(v497 - 8);
          v509 = v508 & 0x7FFFFFF;
        }
        else
        {
          v509 = v508 & 0x7FFFFFF;
          v510 = v497 - 32 * v509;
        }
        v511 = v510 + 32 * v509;
        if (v509)
        {
          do
          {
            if ((_DWORD)v1023)
            {
              v512 = *(_QWORD *)v510;
              v513 = ((*(_QWORD *)v510 >> 4) ^ (*(_QWORD *)v510 >> 9)) & ((_DWORD)v1023 - 1);
              v514 = *((_QWORD *)__s1[0] + 2 * v513);
              if (*(_QWORD *)v510 == v514)
              {
LABEL_980:
                if ((_DWORD)v513 != (_DWORD)v1023)
                {
                  v515 = *((_QWORD *)__s1[0] + 2 * v513 + 1);
                  if (v512)
                  {
                    **(_QWORD **)(v510 + 16) = *(_QWORD *)(v510 + 8);
                    v516 = *(_QWORD *)(v510 + 8);
                    if (v516)
                      *(_QWORD *)(v516 + 16) = *(_QWORD *)(v510 + 16);
                  }
                  *(_QWORD *)v510 = v515;
                  if (v515)
                  {
                    v519 = *(_QWORD *)(v515 + 8);
                    v518 = (uint64_t *)(v515 + 8);
                    v517 = v519;
                    *(_QWORD *)(v510 + 8) = v519;
                    if (v519)
                      *(_QWORD *)(v517 + 16) = v510 + 8;
                    *(_QWORD *)(v510 + 16) = v518;
                    *v518 = v510;
                  }
                }
              }
              else
              {
                v520 = 1;
                while (v514 != -4096)
                {
                  v521 = v513 + v520++;
                  v513 = v521 & ((_DWORD)v1023 - 1);
                  v514 = *((_QWORD *)__s1[0] + 2 * v513);
                  if (v512 == v514)
                    goto LABEL_980;
                }
              }
            }
            v510 += 32;
          }
          while (v510 != v511);
          v508 = *(_DWORD *)(v497 + 20);
        }
        __src[1] = 0;
        __s2 = 0;
        __src[0] = v930;
        v1031 = v940;
        v1032 = 0;
        LOWORD(v1033) = 257;
        if ((v508 & 0x40000000) != 0)
        {
          v523 = *(void ***)(v497 - 8);
          v522 = v508 & 0x7FFFFFF;
        }
        else
        {
          v522 = v508 & 0x7FFFFFF;
          v523 = (void **)(v497 - 32 * v522);
        }
        v1051[0] = (llvm::DataLayout *)__base;
        v1051[1] = (llvm::DataLayout *)0x800000000;
        if (v522 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1051, (uint64_t)__base, v522, 8);
          v524 = (int)v1051[1];
          v526 = (void **)v1051[0];
          v525 = LODWORD(v1051[1]);
          goto LABEL_999;
        }
        v524 = 0;
        if (v522)
        {
          v525 = 0;
          v526 = __base;
LABEL_999:
          v527 = 32 * v522;
          v528 = &v526[v525];
          do
          {
            v529 = *v523;
            v523 += 4;
            *v528++ = v529;
            v527 -= 32;
          }
          while (v527);
          v530 = (void **)v1051[0];
        }
        else
        {
          v530 = __base;
        }
        LODWORD(v1051[1]) = v524 + v522;
        v531 = llvm::SimplifyInstructionWithOperands((llvm *)v497, (uint64_t)v530, (v524 + v522), (uint64_t)__src, v495, v496);
        v4 = (llvm *)v936;
        if ((void **)v1051[0] != __base)
          free(v1051[0]);
        v532 = (_QWORD **)*((_QWORD *)v487 + 1);
        if (v531)
        {
          if (v532)
          {
            v1051[0] = v487;
            sub_1C4EAD954((uint64_t *)__s1, v1051)[1] = v531;
          }
          v533 = *(unsigned __int8 *)(v497 + 16) - 33;
          if (v533 > 0x37)
            goto LABEL_1012;
          if (((1 << (*(_BYTE *)(v497 + 16) - 33)) & 0x808001D0000010) != 0)
          {
LABEL_1018:
            *(_QWORD *)(v497 + 40) = v944;
            *(_WORD *)(v944 + 18) &= ~0x8000u;
            if ((*(_BYTE *)(v497 + 23) & 0x10) != 0)
            {
              v538 = *(_QWORD *)(v944 + 56);
              if (v538)
              {
                v539 = *(llvm::ValueSymbolTable **)(v538 + 104);
                if (v539)
                  llvm::ValueSymbolTable::reinsertValue(v539, (llvm::Value *)v497);
              }
            }
            v534 = *v928;
            *(_QWORD *)(v497 + 32) = v928;
            *(_QWORD *)(v497 + 24) = v534;
            *(_QWORD *)(v534 + 8) = v497 + 24;
            *v928 = v497 + 24;
            v535 = sub_1C4D9F8B4(v497);
            if (v940 && v535)
              llvm::AssumptionCache::registerAssumption(v940, v497);
            continue;
          }
          if (((1 << (*(_BYTE *)(v497 + 16) - 33)) & 0x8000000000041) != 0)
          {
            v536 = *(_QWORD *)(v497 + 64);
            if (v536 && (*(_BYTE *)(v536 + 17) & 0x30) != 0)
              goto LABEL_1012;
            v537 = *(_DWORD *)(v497 + 20);
            if (v537 < 0
              && (v540 = v497 - 32 * (v537 & 0x7FFFFFF),
                  v543 = *(_QWORD *)(v540 - 8),
                  v541 = v540 - 8,
                  (v542 = v543) != 0))
            {
              v544 = -v542;
              while (1)
              {
                v545 = *(_DWORD *)(*(_QWORD *)(v541 + v544) + 8);
                v437 = v545 > 7;
                v546 = (1 << v545) & 0x83;
                if (v437 || v546 == 0)
                  break;
                v544 += 16;
                if (!v544)
                  goto LABEL_1027;
              }
            }
            else
            {
LABEL_1027:
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v497, 45) & 1) != 0
                || llvm::CallBase::hasFnAttrOnCalledFunction(v497, 44))
              {
                goto LABEL_1012;
              }
            }
          }
          else
          {
            if (v533 == 27 && (*(_WORD *)(v497 + 18) & 0x301) != 0)
              goto LABEL_1018;
LABEL_1012:
            if ((llvm::Instruction::mayThrow((llvm::Instruction *)v497) & 1) == 0
              && llvm::Instruction::willReturn((llvm::Instruction *)v497))
            {
              llvm::Value::deleteValue((llvm::Value *)v497);
              continue;
            }
          }
        }
        else if (v532)
        {
          v1051[0] = v487;
          sub_1C4EAD954((uint64_t *)__s1, v1051)[1] = v497;
        }
        if (!v497)
          continue;
        goto LABEL_1018;
      }
      v488 = *((_DWORD *)v487 + 5);
      v489 = v488 & 0x7FFFFFF;
      if ((v488 & 0x7FFFFFF) != 0)
      {
        v490 = 0;
        while (1)
        {
          v491 = (_QWORD ***)((char *)v487 - 32 * v489);
          if ((v488 & 0x40000000) != 0)
            v491 = (_QWORD ***)*((_QWORD *)v487 - 1);
          if ((&v491[4 * *((unsigned int *)v487 + 15)])[v490] == v446)
            break;
          if (v489 == ++v490)
            goto LABEL_961;
        }
      }
      else
      {
LABEL_961:
        LODWORD(v490) = -1;
      }
      if ((v488 & 0x40000000) != 0)
        v492 = (_QWORD ***)*((_QWORD *)v487 - 1);
      else
        v492 = (_QWORD ***)((char *)v487 - 32 * v489);
      v493 = v492[4 * v490];
      v1051[0] = v487;
      sub_1C4EAD954((uint64_t *)__s1, v1051)[1] = v493;
    }
    v548 = (_QWORD *)*v447;
    if ((_QWORD *)*v447 == v447)
    {
      v550 = 0;
    }
    else
    {
      if (v548)
        v549 = v548 - 3;
      else
        v549 = 0;
      if (*((unsigned __int8 *)v549 + 16) - 29 >= 0xB)
        v550 = 0;
      else
        v550 = v549;
    }
    v551 = *((unsigned __int8 *)v550 + 16);
    if (v551 != 30)
      __asm { BR              X10 }
    if ((*((_DWORD *)v550 + 5) & 0x7FFFFFF) == 3)
      v552 = 2;
    else
      v552 = 1;
    v553 = 0;
    v554 = 0;
    v555 = v550 - 8;
    v556 = v552;
    do
    {
      v557 = *((unsigned __int8 *)v550 + 16);
      if (v557 != 30)
        __asm { BR              X9 }
      if (v550[-4 * v554 - 4] == v370)
      {
        llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v370, (llvm::BasicBlock *)v446, 0);
        llvm::Instruction::setSuccessor((llvm::Instruction *)v550, v554, (llvm::BasicBlock *)v944);
      }
      ++v554;
      v553 += 2;
      v555 += 4;
    }
    while (v556 != v554);
    v5 = v927;
    v4 = (llvm *)v936;
    if (v925)
    {
      v558 = LODWORD(__p[1]);
      if (LODWORD(__p[1]) >= (unint64_t)HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&v1038, LODWORD(__p[1]) + 1, 16);
        v558 = LODWORD(__p[1]);
      }
      v559 = (char *)__p[0] + 16 * v558;
      *v559 = v446;
      v559[1] = v944 & 0xFFFFFFFFFFFFFFFBLL;
      v560 = (LODWORD(__p[1]) + 1);
      LODWORD(__p[1]) = v560;
      if (v560 >= HIDWORD(__p[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&v1038, v560 + 1, 16);
        LODWORD(v560) = __p[1];
      }
      v561 = (char *)__p[0] + 16 * v560;
      *v561 = v446;
      v561[1] = v370 | 4;
      ++LODWORD(__p[1]);
      llvm::DomTreeUpdater::applyUpdates(v925, (unint64_t *)__p[0], LODWORD(__p[1]));
    }
    MEMORY[0x1CAA32FB4](__s1[0], 8);
    if (__p[0] != &v1038)
      free(__p[0]);
    v424 = 0;
    v425 = 1;
LABEL_1074:
    if (v1019 != v1021)
      free(v1019);
    if (((uint64_t)v1014[0] & 1) == 0)
      MEMORY[0x1CAA32FB4](v1014[1], 8);
    v367 = 1;
  }
  while ((v425 & 1) != 0);
  if (((v951 | v424) & 1) != 0)
    goto LABEL_1110;
  v562 = *(_QWORD *)(v924 + 8);
  if (!v562)
  {
LABEL_1121:
    if (byte_1ED828878)
    {
      v567 = *(_QWORD *)(v924 + 8);
      if (v567)
      {
        while (1)
        {
          v568 = *(_QWORD *)(v567 + 24);
          v569 = *(unsigned __int8 *)(v568 + 16);
          v570 = v568 && v569 >= 0x1C;
          if (v570 && v569 - 29 <= 0xA)
            break;
          result = 0;
          v567 = *(_QWORD *)(v567 + 8);
          if (!v567)
            return result;
        }
        result = llvm::BasicBlock::getSinglePredecessor(*(llvm::BasicBlock **)(v568 + 40));
        if (!result)
          return result;
        v696 = result;
        while (1)
        {
          v567 = *(_QWORD *)(v567 + 8);
          if (!v567)
            break;
          v697 = *(_QWORD *)(v567 + 24);
          v698 = *(unsigned __int8 *)(v697 + 16);
          if (v697)
            v699 = v698 >= 0x1C;
          else
            v699 = 0;
          if (v699 && v698 - 29 <= 0xA)
          {
            v701 = llvm::BasicBlock::getSinglePredecessor(*(llvm::BasicBlock **)(v697 + 40));
            result = 0;
            v702 = v696 == v701;
            if (!v701)
              return result;
            v696 = v701;
            if (!v702)
              return result;
          }
        }
        v703 = *(_QWORD *)(v696 + 40);
        if (v703 == v696 + 40)
        {
          v704 = 0;
        }
        else
        {
          if (v703)
            v704 = v703 - 24;
          else
            v704 = 0;
          if (*(unsigned __int8 *)(v704 + 16) - 29 >= 0xB)
            v704 = 0;
        }
        if (*(_BYTE *)(v704 + 16) == 30)
          v705 = v704;
        else
          v705 = 0;
        if (v705)
          v706 = v705 == v936;
        else
          v706 = 1;
        if (!v706 && (*(_DWORD *)(v705 + 20) & 0x7FFFFFF) == 3)
        {
          result = sub_1C5FA25CC(v705, v936, *(llvm::DomTreeUpdater **)(v927 + 8), *(_QWORD **)v927);
          if ((_DWORD)result)
          {
            result = 1;
            *(_BYTE *)(v927 + 48) = 1;
          }
          return result;
        }
      }
    }
    return 0;
  }
  while (1)
  {
    v563 = *(_QWORD *)(v562 + 24);
    v564 = *(unsigned __int8 *)(v563 + 16);
    v565 = v563 && v564 >= 0x1C;
    if (v565 && v564 - 29 < 0xB)
      break;
    v562 = *(_QWORD *)(v562 + 8);
    if (!v562)
      goto LABEL_1121;
  }
  v572 = &v1015;
  v573 = __base;
LABEL_1133:
  v574 = *(_QWORD *)(v563 + 40);
  v575 = *(_QWORD *)(v574 + 40);
  if (v575 == v574 + 40)
  {
    v576 = 0;
  }
  else
  {
    if (v575)
      v576 = v575 - 24;
    else
      v576 = 0;
    if (*(unsigned __int8 *)(v576 + 16) - 29 >= 0xB)
      v576 = 0;
  }
  if (*(_BYTE *)(v576 + 16) == 30)
    v577 = v576;
  else
    v577 = 0;
  if (v577)
    v578 = v577 == v936;
  else
    v578 = 1;
  if (v578 || (*(_DWORD *)(v577 + 20) & 0x7FFFFFF) != 3)
  {
LABEL_1246:
    while (1)
    {
      v562 = *(_QWORD *)(v562 + 8);
      if (!v562)
        goto LABEL_1121;
      v563 = *(_QWORD *)(v562 + 24);
      v615 = *(unsigned __int8 *)(v563 + 16);
      if (v563)
        v616 = v615 >= 0x1C;
      else
        v616 = 0;
      if (v616 && v615 - 29 < 0xB)
        goto LABEL_1133;
    }
  }
  v993 = *(llvm::DataLayout **)v927;
  v998 = *(llvm::DomTreeUpdater **)(v927 + 8);
  v6 = *(_QWORD *)(v936 + 40);
  if (*(_QWORD *)(v577 - 96) == *(_QWORD *)(v936 - 96))
  {
    a3 = *(uint64_t **)(v577 - 32);
    if (a3 != *(uint64_t **)(v577 - 64))
    {
      if (llvm::BasicBlock::getSinglePredecessor(*(llvm::BasicBlock **)(v936 + 40)))
        goto LABEL_1460;
    }
  }
  v1002 = v572;
  __src[0] = 0;
  __s1[0] = 0;
  v1014[0] = 0;
  v1005 = v573;
  if (!llvm::parseWidenableBranch(v577, v1014, __p, __src, __s1))
    goto LABEL_1153;
  v618 = (llvm::BasicBlock *)__src[0];
  if (!v1014[0])
  {
    v619 = ***(_QWORD ***)__src[0];
    if (!*(_QWORD *)(v619 + 1560))
    {
      v692 = *(llvm::ConstantInt **)(v619 + 1888);
      v693 = *(_DWORD *)(v619 + 1896);
      LODWORD(v1051[1]) = v693 >> 8;
      if (v693 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)v1051, 1, 0);
      }
      else
      {
        if (v693 <= 0xFF)
          v694 = 0;
        else
          v694 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v693);
        v1051[0] = (llvm::DataLayout *)(v694 & 1);
      }
      v695 = llvm::ConstantInt::get(v692, (llvm::LLVMContext *)v1051, v580);
      if (LODWORD(v1051[1]) >= 0x41 && v1051[0])
        MEMORY[0x1CAA32F9C](v1051[0], 0x1000C8000313F17);
      *(_QWORD *)(v619 + 1560) = v695;
    }
  }
  if (v618 != *(llvm::BasicBlock **)(v936 + 40))
    goto LABEL_1153;
  if (!llvm::BasicBlock::getSinglePredecessor(v618))
    goto LABEL_1153;
  v620 = (unint64_t)__s1[0];
  if (*((void **)__s1[0] + 5) != (char *)__s1[0] + 40)
  {
    v621 = *((_QWORD *)__s1[0] + 6);
    if (v621)
    {
      if (*(_BYTE *)(v621 - 8) == 83)
        goto LABEL_1153;
    }
  }
  v622 = *v921;
  if ((void *)*v921 == __s1[0])
    goto LABEL_1270;
  v623 = *(_QWORD **)(v622 + 40);
  if (v623 == (_QWORD *)(v622 + 40))
    goto LABEL_1270;
  v624 = v623 - 3;
  if (!v623)
    v624 = 0;
  v625 = *((unsigned __int8 *)v624 + 16);
  if (v625 != 29)
    v624 = 0;
  if (!v623 || v625 != 29)
    goto LABEL_1270;
  v662 = *(_QWORD *)(v622 + 48);
  v663 = v662 ? v662 - 24 : 0;
  if (v624 == (_QWORD *)v663)
    goto LABEL_1270;
  v664 = v624 + 3;
  if (*(_QWORD **)(v624[5] + 48) == v624 + 3)
    goto LABEL_1270;
  v665 = *v664;
  if (!*v664)
    goto LABEL_1270;
  if (*(_BYTE *)(v665 - 8) != 84)
    goto LABEL_1270;
  v666 = *(_QWORD *)(v665 - 56);
  if (!v666
    || *(_BYTE *)(v666 + 16)
    || *(_QWORD *)(v666 + 24) != *(_QWORD *)(v665 + 48)
    || *(_DWORD *)(v666 + 36) != 119)
  {
    goto LABEL_1270;
  }
  v667 = (_QWORD *)*((_QWORD *)v618 + 6);
  if (v667 == (_QWORD *)((char *)v618 + 40))
  {
LABEL_1770:
    llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v622, v618, 0);
    if (*v921)
    {
      **(_QWORD **)(v936 - 48) = *(_QWORD *)(v936 - 56);
      v919 = *(_QWORD *)(v936 - 56);
      if (v919)
        *(_QWORD *)(v919 + 16) = *(_QWORD *)(v936 - 48);
    }
    *v921 = v620;
    if (!v620)
      goto LABEL_1778;
    v916 = (uint64_t **)(v620 + 8);
    v920 = *(_QWORD *)(v620 + 8);
    *(_QWORD *)(v936 - 56) = v920;
    if (v920)
      *(_QWORD *)(v920 + 16) = v936 - 56;
    *(_QWORD *)(v936 - 48) = v916;
    v918 = v921;
    goto LABEL_1777;
  }
  while (2)
  {
    if (v667)
      v668 = (uint64_t)(v667 - 3);
    else
      v668 = 0;
    v669 = *(unsigned __int8 *)(v668 + 16);
    v670 = (v669 - 33);
    if (v670 > 0x37)
      goto LABEL_1379;
    if (((1 << (v669 - 33)) & 0x8000000000041) == 0)
    {
      if (v670 != 27)
      {
        if (((1 << (v669 - 33)) & 0x808001D0000010) != 0)
          goto LABEL_1270;
        goto LABEL_1379;
      }
      if ((*(_WORD *)(v668 + 18) & 0x301) != 0)
        goto LABEL_1270;
LABEL_1378:
      v669 = *(unsigned __int8 *)(v668 + 16);
LABEL_1379:
      v681 = (v669 - 33);
      if (v681 <= 0x37)
      {
        if (((1 << v681) & 0x808001D0000010) != 0)
          goto LABEL_1270;
        if (((1 << v681) & 0x8000000000041) != 0)
        {
          v682 = *(_QWORD *)(v668 + 64);
          if (!v682 || (*(_BYTE *)(v682 + 17) & 0x30) == 0)
          {
            v683 = *(_DWORD *)(v668 + 20);
            if (v683 < 0)
            {
              v684 = v668 - 32 * (v683 & 0x7FFFFFF);
              v687 = *(_QWORD *)(v684 - 8);
              v685 = v684 - 8;
              v686 = v687;
              if (v687)
              {
                v688 = -v686;
                do
                {
                  v689 = *(_DWORD *)(*(_QWORD *)(v685 + v688) + 8);
                  v437 = v689 > 7;
                  v690 = (1 << v689) & 0x83;
                  if (v437 || v690 == 0)
                    goto LABEL_1270;
                  v688 += 16;
                }
                while (v688);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v668, 45) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v668, 44))
            {
              goto LABEL_1270;
            }
          }
        }
        else if (v681 == 27 && (*(_WORD *)(v668 + 18) & 0x301) != 0)
        {
          goto LABEL_1270;
        }
      }
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v668) & 1) != 0
        || (llvm::Instruction::willReturn((llvm::Instruction *)v668) & 1) == 0)
      {
        goto LABEL_1270;
      }
      v667 = (_QWORD *)v667[1];
      if (v667 == (_QWORD *)((char *)v618 + 40))
      {
        v618 = *(llvm::BasicBlock **)(v936 + 40);
        v622 = *(_QWORD *)(v936 - 64);
        v620 = (unint64_t)__s1[0];
        goto LABEL_1770;
      }
      continue;
    }
    break;
  }
  v671 = *(_QWORD *)(v668 + 64);
  if (v671 && (*(_BYTE *)(v671 + 17) & 0x30) != 0)
    goto LABEL_1378;
  v672 = *(_DWORD *)(v668 + 20);
  if ((v672 & 0x80000000) == 0
    || (v673 = v668 - 32 * (v672 & 0x7FFFFFF), v676 = *(_QWORD *)(v673 - 8), v674 = v673 - 8, (v675 = v676) == 0))
  {
LABEL_1374:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v668, 45) & 1) == 0
      && !llvm::CallBase::hasFnAttrOnCalledFunction(v668, 44))
    {
      goto LABEL_1270;
    }
    goto LABEL_1378;
  }
  v677 = -v675;
  while (1)
  {
    v678 = *(_DWORD *)(*(_QWORD *)(v674 + v677) + 8);
    v437 = v678 > 7;
    v679 = (1 << v678) & 0x83;
    if (v437 || v679 == 0)
      break;
    v677 += 16;
    if (!v677)
      goto LABEL_1374;
  }
LABEL_1270:
  v622 = *v926;
  v620 = (unint64_t)__s1[0];
  if ((void *)*v926 == __s1[0])
    goto LABEL_1153;
  v626 = *(_QWORD **)(v622 + 40);
  if (v626 == (_QWORD *)(v622 + 40))
    goto LABEL_1153;
  v627 = v626 - 3;
  if (!v626)
    v627 = 0;
  v628 = *((unsigned __int8 *)v627 + 16);
  if (v628 != 29)
    v627 = 0;
  if (!v626 || v628 != 29)
    goto LABEL_1153;
  v630 = *(_QWORD *)(v622 + 48);
  v631 = v630 ? v630 - 24 : 0;
  if (v627 == (_QWORD *)v631)
    goto LABEL_1153;
  v632 = v627 + 3;
  if (*(_QWORD **)(v627[5] + 48) == v627 + 3)
    goto LABEL_1153;
  v633 = *v632;
  if (!*v632)
    goto LABEL_1153;
  if (*(_BYTE *)(v633 - 8) != 84)
    goto LABEL_1153;
  v634 = *(_QWORD *)(v633 - 56);
  if (!v634
    || *(_BYTE *)(v634 + 16)
    || *(_QWORD *)(v634 + 24) != *(_QWORD *)(v633 + 48)
    || *(_DWORD *)(v634 + 36) != 119)
  {
    goto LABEL_1153;
  }
  v635 = *(llvm::BasicBlock **)(v936 + 40);
  v636 = (_QWORD *)((char *)v635 + 40);
  v637 = (_QWORD *)*((_QWORD *)v635 + 6);
  if (v637 == (_QWORD *)((char *)v635 + 40))
  {
LABEL_1763:
    llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v622, v635, 0);
    if (*v926)
    {
      **(_QWORD **)(v936 - 16) = *(_QWORD *)(v936 - 24);
      v915 = *(_QWORD *)(v936 - 24);
      if (v915)
        *(_QWORD *)(v915 + 16) = *(_QWORD *)(v936 - 16);
    }
    *v926 = v620;
    if (!v620)
      goto LABEL_1778;
    v916 = (uint64_t **)(v620 + 8);
    v917 = *(_QWORD *)(v620 + 8);
    *(_QWORD *)(v936 - 24) = v917;
    if (v917)
      *(_QWORD *)(v917 + 16) = v936 - 24;
    *(_QWORD *)(v936 - 16) = v916;
    v918 = v926;
LABEL_1777:
    *v916 = v918;
LABEL_1778:
    if (v998)
    {
      v1051[0] = *(llvm::DataLayout **)(v936 + 40);
      v1051[1] = (llvm::DataLayout *)(v620 & 0xFFFFFFFFFFFFFFFBLL);
      __base[0] = v1051[0];
      __base[1] = (void *)(v622 | 4);
      llvm::DomTreeUpdater::applyUpdates((uint64_t)v998, (unint64_t *)v1051, 2);
    }
    goto LABEL_1603;
  }
  while (2)
  {
    if (v637)
      v638 = (uint64_t)(v637 - 3);
    else
      v638 = 0;
    v639 = *(unsigned __int8 *)(v638 + 16);
    v640 = (v639 - 33);
    if (v640 > 0x37)
      goto LABEL_1316;
    if (((1 << (v639 - 33)) & 0x8000000000041) == 0)
    {
      if (v640 != 27)
      {
        if (((1 << (v639 - 33)) & 0x808001D0000010) != 0)
          goto LABEL_1153;
        goto LABEL_1316;
      }
      if ((*(_WORD *)(v638 + 18) & 0x301) != 0)
        goto LABEL_1153;
LABEL_1315:
      v639 = *(unsigned __int8 *)(v638 + 16);
LABEL_1316:
      v651 = (v639 - 33);
      if (v651 <= 0x37)
      {
        if (((1 << v651) & 0x808001D0000010) != 0)
          goto LABEL_1153;
        if (((1 << v651) & 0x8000000000041) != 0)
        {
          v652 = *(_QWORD *)(v638 + 64);
          if (!v652 || (*(_BYTE *)(v652 + 17) & 0x30) == 0)
          {
            v653 = *(_DWORD *)(v638 + 20);
            if (v653 < 0)
            {
              v654 = v638 - 32 * (v653 & 0x7FFFFFF);
              v657 = *(_QWORD *)(v654 - 8);
              v655 = v654 - 8;
              v656 = v657;
              if (v657)
              {
                v658 = -v656;
                do
                {
                  v659 = *(_DWORD *)(*(_QWORD *)(v655 + v658) + 8);
                  v437 = v659 > 7;
                  v660 = (1 << v659) & 0x83;
                  if (v437 || v660 == 0)
                    goto LABEL_1153;
                  v658 += 16;
                }
                while (v658);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v638, 45) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v638, 44))
            {
              goto LABEL_1153;
            }
          }
        }
        else if (v651 == 27 && (*(_WORD *)(v638 + 18) & 0x301) != 0)
        {
          goto LABEL_1153;
        }
      }
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v638) & 1) != 0
        || (llvm::Instruction::willReturn((llvm::Instruction *)v638) & 1) == 0)
      {
        goto LABEL_1153;
      }
      v637 = (_QWORD *)v637[1];
      if (v637 == v636)
      {
        v635 = *(llvm::BasicBlock **)(v936 + 40);
        v622 = *(_QWORD *)(v936 - 32);
        v620 = (unint64_t)__s1[0];
        goto LABEL_1763;
      }
      continue;
    }
    break;
  }
  v641 = *(_QWORD *)(v638 + 64);
  if (v641 && (*(_BYTE *)(v641 + 17) & 0x30) != 0)
    goto LABEL_1315;
  v642 = *(_DWORD *)(v638 + 20);
  if ((v642 & 0x80000000) == 0
    || (v643 = v638 - 32 * (v642 & 0x7FFFFFF), v646 = *(_QWORD *)(v643 - 8), v644 = v643 - 8, (v645 = v646) == 0))
  {
LABEL_1311:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v638, 45) & 1) == 0
      && !llvm::CallBase::hasFnAttrOnCalledFunction(v638, 44))
    {
      goto LABEL_1153;
    }
    goto LABEL_1315;
  }
  v647 = -v645;
  while (1)
  {
    v648 = *(_DWORD *)(*(_QWORD *)(v644 + v647) + 8);
    v437 = v648 > 7;
    v649 = (1 << v648) & 0x83;
    if (v437 || v649 == 0)
      break;
    v647 += 16;
    if (!v647)
      goto LABEL_1311;
  }
LABEL_1153:
  v581 = *v22;
  if (*v22)
    v582 = *(_BYTE *)(*v22 + 16) == 5;
  else
    v582 = 0;
  v572 = v1002;
  if (v582)
  {
    v1051[0] = (llvm::DataLayout *)__nel;
    v1051[1] = (llvm::DataLayout *)__nel;
    __base[0] = (void *)4;
    LODWORD(__base[1]) = 0;
    v583 = sub_1C53774DC(v581, (llvm::SmallPtrSetImplBase *)v1051);
    if (v1051[1] == v1051[0])
    {
      if ((v583 & 1) == 0)
        goto LABEL_1160;
    }
    else
    {
      free(v1051[1]);
      if ((v583 & 1) == 0)
        goto LABEL_1160;
    }
LABEL_1245:
    v573 = v1005;
    goto LABEL_1246;
  }
LABEL_1160:
  if (!byte_1ED828878 || (sub_1C5FA25CC(v577, v936, v998, v993) & 1) == 0)
  {
    llvm::BasicBlock::instructionsWithoutDebug((llvm::BasicBlock *)v6, 0, (uint64_t)v1051);
    *(_OWORD *)v1014 = *(_OWORD *)v1051;
    if (__nel[1])
    {
      v573 = v1005;
      if ((void **)__nel[1] == v1005)
      {
        v1018 = v1002;
        (*((void (**)(void **, uint64_t *))__base[0] + 3))(v1005, v1002);
        v584 = (uint64_t)v1018;
      }
      else
      {
        v584 = (*(uint64_t (**)(void))(*(_QWORD *)__nel[1] + 16))();
        v1018 = (uint64_t *)v584;
      }
      if (v1014[0])
        v585 = (char *)v1014[0] - 24;
      else
        v585 = 0;
      if ((uint64_t *)v584 == v1002)
      {
        (*(void (**)(uint64_t *))(v1015 + 32))(v1002);
      }
      else if (v584)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v584 + 40))(v584);
      }
    }
    else
    {
      v1018 = 0;
      if (v1051[0])
        v585 = (char *)v1051[0] - 24;
      else
        v585 = 0;
      v573 = v1005;
    }
    v586 = v1055;
    if (v1055 == v1054)
    {
      v586 = v1054;
      v587 = 4;
      goto LABEL_1179;
    }
    if (v1055)
    {
      v587 = 5;
LABEL_1179:
      (*(void (**)(void))(*v586 + 8 * v587))();
    }
    v588 = (void **)__nel[1];
    if ((void **)__nel[1] == v573)
    {
      v588 = v573;
      v589 = 4;
      goto LABEL_1182;
    }
    if (__nel[1])
    {
      v589 = 5;
LABEL_1182:
      (*((void (**)(void))*v588 + v589))();
    }
    if (v585 != (char *)v936)
      goto LABEL_1246;
    v591 = v577 - 32;
    v590 = *(_QWORD *)(v577 - 32);
    if (v590 == *v926)
    {
      v594 = 0;
      v593 = -1;
      v994 = 1;
    }
    else
    {
      if (v590 != *v921)
      {
        v592 = *(_QWORD *)(v577 - 64);
        if (v592 == *v926)
        {
          v988 = 0;
          v593 = -1;
          v994 = 1;
        }
        else
        {
          if (v592 != *v921)
            goto LABEL_1246;
          v994 = 0;
          v593 = 0;
          v988 = 0;
        }
        v594 = 1;
LABEL_1194:
        v595 = *(_QWORD *)(v591 - 32 * v594);
        if (v595 == v6)
          goto LABEL_1246;
        v970 = v593;
        v978 = (_QWORD *)(v577 - 32);
        v960 = *(_QWORD *)(v591 - 32 * (v594 ^ 1));
        v984 = *(_QWORD **)(v591 - 32 * v594);
        v596 = *(_QWORD *)(v595 + 48);
        v597 = v596 - 24;
        if (v596)
          v598 = v596 - 24;
        else
          v598 = 0;
        if (*(_BYTE *)(v598 + 16) == 83)
        {
          v599 = 0;
          while (v599 != 3)
          {
            v600 = *(_DWORD *)(v597 + 20);
            v601 = v600 & 0x7FFFFFF;
            if ((v600 & 0x7FFFFFF) != 0)
            {
              v602 = 0;
              while (1)
              {
                v603 = v597 - 32 * v601;
                if ((v600 & 0x40000000) != 0)
                  v603 = *(_QWORD *)(v597 - 8);
                if (*(_QWORD *)(v603 + 32 * *(unsigned int *)(v597 + 60) + 8 * v602) == v6)
                  break;
                if (v601 == ++v602)
                  goto LABEL_1207;
              }
            }
            else
            {
LABEL_1207:
              LODWORD(v602) = -1;
            }
            if ((v600 & 0x40000000) != 0)
              v604 = *(_QWORD *)(v597 - 8);
            else
              v604 = v597 - 32 * v601;
            v605 = *(_QWORD *)(v604 + 32 * v602);
            if (v605)
              v606 = *(_BYTE *)(v605 + 16) == 5;
            else
              v606 = 0;
            if (v606)
            {
              v1051[0] = (llvm::DataLayout *)__nel;
              v1051[1] = (llvm::DataLayout *)__nel;
              __base[0] = (void *)4;
              LODWORD(__base[1]) = 0;
              v607 = sub_1C53774DC(v605, (llvm::SmallPtrSetImplBase *)v1051);
              if (v1051[1] == v1051[0])
              {
                if ((v607 & 1) != 0)
                  break;
              }
              else
              {
                free(v1051[1]);
                if ((v607 & 1) != 0)
                  break;
              }
              v600 = *(_DWORD *)(v597 + 20);
              v601 = v600 & 0x7FFFFFF;
            }
            if (v601)
            {
              v608 = 0;
              while (1)
              {
                v609 = v597 - 32 * v601;
                if ((v600 & 0x40000000) != 0)
                  v609 = *(_QWORD *)(v597 - 8);
                if (*(_QWORD *)(v609 + 32 * *(unsigned int *)(v597 + 60) + 8 * v608) == *(_QWORD *)(v577 + 40))
                  break;
                if (v601 == ++v608)
                  goto LABEL_1224;
              }
            }
            else
            {
LABEL_1224:
              LODWORD(v608) = -1;
            }
            if ((v600 & 0x40000000) != 0)
              v610 = *(_QWORD *)(v597 - 8);
            else
              v610 = v597 - 32 * v601;
            v611 = *(_QWORD *)(v610 + 32 * v608);
            if (v611)
              v612 = *(_BYTE *)(v611 + 16) == 5;
            else
              v612 = 0;
            if (v612)
            {
              v1051[0] = (llvm::DataLayout *)__nel;
              v1051[1] = (llvm::DataLayout *)__nel;
              __base[0] = (void *)4;
              LODWORD(__base[1]) = 0;
              v613 = sub_1C53774DC(v611, (llvm::SmallPtrSetImplBase *)v1051);
              if (v1051[1] == v1051[0])
              {
                if ((v613 & 1) != 0)
                  break;
              }
              else
              {
                free(v1051[1]);
                if ((v613 & 1) != 0)
                  break;
              }
            }
            ++v599;
            v596 = *(_QWORD *)(v596 + 8);
            v597 = v596 - 24;
            if (v596)
              v614 = v596 - 24;
            else
              v614 = 0;
            if (*(_BYTE *)(v614 + 16) != 83)
              goto LABEL_1444;
          }
          v572 = v1002;
          goto LABEL_1245;
        }
LABEL_1444:
        v707 = v926[4 * v970];
        v1014[0] = v1002;
        v1014[1] = (void *)0x500000000;
        if (v707 == v6)
        {
          v708 = **(_QWORD ***)v6;
          v1051[0] = (llvm::DataLayout *)"infloop";
          LOWORD(__nel[0]) = 259;
          v709 = *(_QWORD *)(v6 + 56);
          v707 = operator new();
          *(_QWORD *)v707 = *v708 + 1600;
          *(_QWORD *)(v707 + 8) = 0;
          v710 = *(_DWORD *)(v707 + 20) & 0xC0000000;
          *(_QWORD *)(v707 + 24) = 0;
          v711 = v707 + 24;
          *(_DWORD *)(v707 + 16) = 22;
          *(_DWORD *)(v707 + 20) = v710;
          *(_QWORD *)(v707 + 32) = 0;
          *(_QWORD *)(v707 + 40) = v707 + 40;
          *(_QWORD *)(v707 + 48) = v707 + 40;
          *(_QWORD *)(v707 + 56) = 0;
          if (v709)
          {
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v709 + 72, (_QWORD *)v707);
            v712 = *(_QWORD *)(v709 + 72);
            *(_QWORD *)(v707 + 24) = v712;
            *(_QWORD *)(v707 + 32) = v709 + 72;
            *(_QWORD *)(v712 + 8) = v711;
            *(_QWORD *)(v709 + 72) = v711;
          }
          llvm::Value::setName((uint64_t ***)v707, (uint64_t)v1051);
          v713 = operator new(0x60uLL);
          v713[13] = v713[13] & 0x38000000 | 1;
          *(_QWORD *)v713 = 0;
          *((_QWORD *)v713 + 1) = 0;
          *((_QWORD *)v713 + 2) = 0;
          *((_QWORD *)v713 + 3) = v713 + 8;
          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v713 + 8), (llvm::BasicBlock *)v707, (llvm::BasicBlock *)v707);
          if (v998)
          {
            v714 = v1014[1];
            if (LODWORD(v1014[1]) >= HIDWORD(v1014[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1014, (uint64_t)v1002, LODWORD(v1014[1]) + 1, 16);
              v714 = v1014[1];
            }
            v715 = (uint64_t *)((char *)v1014[0] + 16 * v714);
            *v715 = v707;
            v715[1] = v707 & 0xFFFFFFFFFFFFFFFBLL;
            ++LODWORD(v1014[1]);
          }
        }
        v716 = (unsigned __int8 **)(v577 - 96);
        v717 = *(uint64_t ****)(v577 - 96);
        sub_1C5673D1C((uint64_t)v1051, v577, 0, 0, 0);
        if ((v988 & 1) == 0)
        {
          if ((*((_BYTE *)v717 + 23) & 0x10) != 0)
          {
            v718 = ***v717;
            v719 = *(_QWORD *)(v718 + 152);
            v720 = *(unsigned int *)(v718 + 168);
            if (!(_DWORD)v720)
              goto LABEL_1473;
            LODWORD(v721) = (v720 - 1) & ((v717 >> 4) ^ (v717 >> 9));
            v722 = (uint64_t ****)(v719 + 16 * v721);
            v723 = *v722;
            if (*v722 != v717)
            {
              v724 = 1;
              while (v723 != (uint64_t ***)-4096)
              {
                v725 = v721 + v724++;
                v721 = v725 & (v720 - 1);
                v723 = *(uint64_t ****)(v719 + 16 * v721);
                if (v723 == v717)
                {
                  v722 = (uint64_t ****)(v719 + 16 * v721);
                  goto LABEL_1474;
                }
              }
LABEL_1473:
              v722 = (uint64_t ****)(v719 + 16 * v720);
            }
LABEL_1474:
            v736 = v722[1];
            v739 = *v736;
            v737 = (char *)(v736 + 2);
            v738 = v739;
          }
          else
          {
            v738 = 0;
            v737 = &byte_1C871356D;
          }
          v1040 = 773;
          __p[0] = v737;
          __p[1] = v738;
          v1038 = ".not";
          v717 = (uint64_t ***)sub_1C506EAA0((uint64_t)v1051, (uint64_t)v717, (uint64_t)__p);
        }
        v740 = *v922;
        if ((v994 & 1) == 0)
        {
          if ((*((_BYTE *)v740 + 23) & 0x10) != 0)
          {
            v741 = **(_QWORD **)*v740;
            v742 = *(_QWORD *)(v741 + 152);
            v743 = *(unsigned int *)(v741 + 168);
            if (!(_DWORD)v743)
              goto LABEL_1484;
            LODWORD(v744) = (v743 - 1) & ((v740 >> 4) ^ (v740 >> 9));
            v745 = (llvm::Constant ***)(v742 + 16 * v744);
            v746 = *v745;
            if (*v745 != v740)
            {
              v747 = 1;
              while (v746 != (llvm::Constant **)-4096)
              {
                v748 = v744 + v747++;
                v744 = v748 & (v743 - 1);
                v746 = *(llvm::Constant ***)(v742 + 16 * v744);
                if (v746 == v740)
                {
                  v745 = (llvm::Constant ***)(v742 + 16 * v744);
                  goto LABEL_1485;
                }
              }
LABEL_1484:
              v745 = (llvm::Constant ***)(v742 + 16 * v743);
            }
LABEL_1485:
            v749 = v745[1];
            v752 = *v749;
            v750 = (char *)(v749 + 2);
            v751 = v752;
          }
          else
          {
            v751 = 0;
            v750 = &byte_1C871356D;
          }
          v1040 = 773;
          __p[0] = v750;
          __p[1] = v751;
          v1038 = ".not";
          v740 = (llvm::Constant **)sub_1C506EAA0((uint64_t)v1051, (uint64_t)v740, (uint64_t)__p);
        }
        __p[0] = "brmerge";
        v1040 = 259;
        v753 = sub_1C5F911C0((uint64_t)v1051, 29, v717, v740, (uint64_t)__p);
        if (*v716)
        {
          **(_QWORD **)(v577 - 80) = *(_QWORD *)(v577 - 88);
          v754 = *(_QWORD *)(v577 - 88);
          if (v754)
            *(_QWORD *)(v754 + 16) = *(_QWORD *)(v577 - 80);
        }
        *v716 = v753;
        if (v753)
        {
          v757 = *((_QWORD *)v753 + 1);
          v755 = (unsigned __int8 ***)(v753 + 8);
          v756 = v757;
          *(_QWORD *)(v577 - 88) = v757;
          if (v757)
            *(_QWORD *)(v756 + 16) = v577 - 88;
          *(_QWORD *)(v577 - 80) = v755;
          *v755 = v716;
        }
        if (*v978)
        {
          **(_QWORD **)(v577 - 16) = *(_QWORD *)(v577 - 24);
          v758 = *(_QWORD *)(v577 - 24);
          if (v758)
            *(_QWORD *)(v758 + 16) = *(_QWORD *)(v577 - 16);
        }
        *v978 = v984;
        if (v984)
        {
          v759 = v984 + 1;
          v760 = v984[1];
          *(_QWORD *)(v577 - 24) = v760;
          if (v760)
            *(_QWORD *)(v760 + 16) = v577 - 24;
          *(_QWORD *)(v577 - 16) = v759;
          *v759 = v978;
        }
        v761 = (uint64_t *)(v577 - 64);
        if (*(_QWORD *)(v577 - 64))
        {
          **(_QWORD **)(v577 - 48) = *(_QWORD *)(v577 - 56);
          v762 = *(_QWORD *)(v577 - 56);
          if (v762)
            *(_QWORD *)(v762 + 16) = *(_QWORD *)(v577 - 48);
        }
        *v761 = v707;
        if (v707)
        {
          v763 = (uint64_t **)(v707 + 8);
          v764 = *(_QWORD *)(v707 + 8);
          *(_QWORD *)(v577 - 56) = v764;
          if (v764)
            *(_QWORD *)(v764 + 16) = v577 - 56;
          *(_QWORD *)(v577 - 48) = v763;
          *v763 = v761;
        }
        if (v998)
        {
          v765 = *(_QWORD *)(v577 + 40);
          v766 = v1014[1];
          if (LODWORD(v1014[1]) >= HIDWORD(v1014[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1014, (uint64_t)v1002, LODWORD(v1014[1]) + 1, 16);
            v766 = v1014[1];
          }
          v767 = (char *)v1014[0] + 16 * v766;
          *v767 = v765;
          v767[1] = v707 & 0xFFFFFFFFFFFFFFFBLL;
          v768 = (LODWORD(v1014[1]) + 1);
          LODWORD(v1014[1]) = v768;
          v769 = *(_QWORD *)(v577 + 40);
          if (v768 >= HIDWORD(v1014[1]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1014, (uint64_t)v1002, v768 + 1, 16);
            LODWORD(v768) = v1014[1];
          }
          v770 = (char *)v1014[0] + 16 * v768;
          *v770 = v769;
          v770[1] = v960 | 4;
          ++LODWORD(v1014[1]);
          llvm::DomTreeUpdater::applyUpdates((uint64_t)v998, (unint64_t *)v1014[0], LODWORD(v1014[1]));
        }
        __src[0] = 0;
        __s1[0] = 0;
        v1064[0] = 0;
        v1061[0] = 0;
        ProfMetadata = llvm::Instruction::extractProfMetadata((llvm::Instruction *)v577, (unint64_t *)__src, (unint64_t *)__s1);
        v772 = llvm::Instruction::extractProfMetadata((llvm::Instruction *)v936, v1064, v1061);
        v773 = ProfMetadata | v772;
        v774 = (llvm::DataLayout *)v1005;
        if ((ProfMetadata | v772) == 1)
        {
          if ((ProfMetadata & 1) == 0)
          {
            __s1[0] = (void *)1;
            __src[0] = (void *)1;
          }
          if (v772)
          {
            v775 = v1061[0];
            v776 = v1064[0];
          }
          else
          {
            v776 = 1;
            v1061[0] = 1;
            v1064[0] = 1;
            v775 = 1;
          }
          v777 = __s1[0];
          if (v988)
            v778 = __src[0];
          else
            v778 = __s1[0];
          if (!v988)
            v777 = __src[0];
          if (v994)
            v779 = v776;
          else
            v779 = v775;
          if (v994)
            v776 = v775;
          v780 = (_QWORD)v777 * v779 + (_QWORD)v778 * (v779 + v776);
          v781 = (_QWORD)v777 * v776;
          if (v780 <= v781)
            v782 = v781;
          else
            v782 = v780;
          v783 = 32 - __clz(v782);
          if (HIDWORD(v782))
            v784 = v783;
          else
            v784 = 0;
          sub_1C5F91118((llvm::Value *)v577, v780 >> v784, v781 >> v784);
        }
        sub_1C5F90FA0(v707, *(_QWORD *)(v577 + 40), v6, 0);
        if ((_QWORD *)v984[5] == v984 + 5
          || ((v785 = v984[6], v786 = v785 - 24, v785) ? (v787 = v785 - 24) : (v787 = 0),
              !v785 || *(_BYTE *)(v787 + 16) != 83))
        {
LABEL_1599:
          if (v1051[0] != v774)
            free(v1051[0]);
          if (v1014[0] != v1002)
            free(v1014[0]);
          goto LABEL_1603;
        }
        v774 = (llvm::DataLayout *)v1005;
        while (2)
        {
          v788 = *(_DWORD *)(v786 + 20);
          v789 = v788 & 0x7FFFFFF;
          if ((v788 & 0x7FFFFFF) != 0)
          {
            v790 = 0;
            while (1)
            {
              v791 = v786 - 32 * v789;
              if ((v788 & 0x40000000) != 0)
                v791 = *(_QWORD *)(v786 - 8);
              if (*(_QWORD *)(v791 + 32 * *(unsigned int *)(v786 + 60) + 8 * v790) == v6)
                break;
              if (v789 == ++v790)
                goto LABEL_1550;
            }
          }
          else
          {
LABEL_1550:
            LODWORD(v790) = -1;
          }
          if ((v788 & 0x40000000) != 0)
          {
            v792 = *(_QWORD *)(v786 - 8);
            if ((_DWORD)v789)
            {
LABEL_1553:
              v793 = 0;
              while (1)
              {
                v794 = v786 - 32 * v789;
                if ((v788 & 0x40000000) != 0)
                  v794 = *(_QWORD *)(v786 - 8);
                if (*(_QWORD *)(v794 + 32 * *(unsigned int *)(v786 + 60) + 8 * v793) == *(_QWORD *)(v577 + 40))
                  break;
                if (v789 == ++v793)
                  goto LABEL_1558;
              }
LABEL_1559:
              if ((v788 & 0x40000000) != 0)
                v795 = *(_QWORD *)(v786 - 8);
              else
                v795 = v786 - 32 * v789;
              v796 = *(_QWORD *)(v792 + 32 * v790);
              v797 = *(uint64_t **)(v795 + 32 * v793);
              if ((uint64_t *)v796 == v797)
              {
LABEL_1563:
                v798 = *(_QWORD *)(v786 + 32);
                v786 = v798 - 24;
                if (v798)
                  v799 = v798 - 24;
                else
                  v799 = 0;
                if (!v798 || *(_BYTE *)(v799 + 16) != 83)
                  goto LABEL_1599;
                continue;
              }
              if ((*((_BYTE *)v797 + 23) & 0x10) != 0)
              {
                v800 = **(_QWORD **)*v797;
                v801 = *(_QWORD *)(v800 + 152);
                v802 = *(unsigned int *)(v800 + 168);
                if (!(_DWORD)v802)
                  goto LABEL_1576;
                LODWORD(v803) = (v802 - 1) & ((v797 >> 4) ^ (v797 >> 9));
                v804 = (uint64_t **)(v801 + 16 * v803);
                v805 = *v804;
                if (*v804 != v797)
                {
                  v806 = 1;
                  while (v805 != (uint64_t *)-4096)
                  {
                    v807 = v803 + v806++;
                    v803 = v807 & (v802 - 1);
                    v805 = *(uint64_t **)(v801 + 16 * v803);
                    if (v805 == v797)
                    {
                      v804 = (uint64_t **)(v801 + 16 * v803);
                      goto LABEL_1577;
                    }
                  }
LABEL_1576:
                  v804 = (uint64_t **)(v801 + 16 * v802);
                }
LABEL_1577:
                v808 = v804[1];
                v811 = (void *)*v808;
                v810 = (char *)(v808 + 2);
                v809 = v811;
              }
              else
              {
                v809 = 0;
                v810 = &byte_1C871356D;
              }
              v1040 = 773;
              __p[0] = v810;
              __p[1] = v809;
              v1038 = ".mux";
              Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)v1051, (uint64_t)v717, v797, v796, (uint64_t)__p, 0);
              sub_1C6125834(v786, v793, (uint64_t)Select);
              if (v773)
              {
                v813 = __s1[0];
                if (v988)
                  v814 = __src[0];
                else
                  v814 = __s1[0];
                if (!v988)
                  v813 = __src[0];
                v815 = v1061[0];
                if (v994)
                  v816 = v1064[0];
                else
                  v816 = v1061[0];
                if (!v994)
                  v815 = v1064[0];
                v817 = (v816 + v815) * (_QWORD)v814;
                v818 = v816 * (_QWORD)v813;
                if (v817 <= v818)
                  v819 = v818;
                else
                  v819 = v817;
                v820 = 32 - __clz(v819);
                if (HIDWORD(v819))
                  v821 = v820;
                else
                  v821 = 0;
                sub_1C5F91118(Select, v817 >> v821, v818 >> v821);
              }
              goto LABEL_1563;
            }
          }
          else
          {
            v792 = v786 - 32 * v789;
            if ((_DWORD)v789)
              goto LABEL_1553;
          }
          break;
        }
LABEL_1558:
        LODWORD(v793) = -1;
        goto LABEL_1559;
      }
      v994 = 0;
      v593 = 0;
      v594 = 0;
    }
    v988 = 1;
    goto LABEL_1194;
  }
LABEL_1603:
  result = 1;
  *(_BYTE *)(v927 + 48) = 1;
  return result;
}

void sub_1C5F9E214()
{
  JUMPOUT(0x1C5F9DDF8);
}

void sub_1C5F9E228()
{
  JUMPOUT(0x1C5F9DDF8);
}

void sub_1C5F9E238()
{
  JUMPOUT(0x1C5F9DB48);
}

void sub_1C5F9E240()
{
  JUMPOUT(0x1C5F9DDF8);
}

void *sub_1C5F9E250(void *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v12;
  _BYTE v13[24];

  if (a2)
  {
    v2 = a2;
    v3 = (uint64_t)result;
    v4 = (uint64_t)result + 136;
    v5 = (uint64_t)result + 152;
    v6 = *(_QWORD *)(a2 + 24);
LABEL_3:
    v12 = *(_QWORD *)(v6 + 40);
    result = sub_1C5F9E324((uint64_t)v13, v3, &v12);
    if (v13[16])
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 40);
      v8 = *(unsigned int *)(v3 + 144);
      if (v8 >= *(unsigned int *)(v3 + 148))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v4, v5, v8 + 1, 8);
        v8 = *(unsigned int *)(v3 + 144);
      }
      *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * v8) = v7;
      ++*(_DWORD *)(v3 + 144);
    }
    while (1)
    {
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
        break;
      v6 = *(_QWORD *)(v2 + 24);
      v9 = *(unsigned __int8 *)(v6 + 16);
      if (v6)
        v10 = v9 >= 0x1C;
      else
        v10 = 0;
      if (v10 && v9 - 29 < 0xB)
        goto LABEL_3;
    }
  }
  return result;
}

_QWORD *sub_1C5F9E324(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v6 = a2 + 8;
  if ((*(_DWORD *)a2 & 1) != 0)
  {
    v7 = 16;
    v8 = a2 + 8;
  }
  else
  {
    v7 = *(_DWORD *)(a2 + 16);
    if (!v7)
    {
      v20 = 0;
      goto LABEL_19;
    }
    v8 = *(_QWORD *)(a2 + 8);
  }
  v9 = v7 - 1;
  v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
  result = (_QWORD *)(v8 + 8 * v10);
  v12 = *result;
  if (*a3 == *result)
  {
LABEL_13:
    if ((*(_DWORD *)a2 & 1) != 0)
    {
      v17 = 16;
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 8);
      v17 = *(unsigned int *)(a2 + 16);
    }
    v18 = 0;
    v19 = v6 + 8 * v17;
    goto LABEL_22;
  }
  v13 = 0;
  v14 = 1;
  while (v12 != -4096)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -8192;
    if (v15)
      v13 = result;
    v16 = v10 + v14++;
    v10 = v16 & v9;
    result = (_QWORD *)(v8 + 8 * v10);
    v12 = *result;
    if (*a3 == *result)
      goto LABEL_13;
  }
  if (v13)
    v20 = v13;
  else
    v20 = result;
LABEL_19:
  result = sub_1C5AC7B84(a2, (uint64_t)a3, a3, v20);
  *result = *a3;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v21 = 16;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    v21 = *(unsigned int *)(a2 + 16);
  }
  v19 = v6 + 8 * v21;
  v18 = 1;
LABEL_22:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 16) = v18;
  return result;
}

llvm::Type **sub_1C5F9E444(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Type **v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v4 != 31)
  {
    v7 = 0;
    if (!a2 || v4 != 30)
      return (llvm::Type **)v7;
    if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 3)
    {
      v8 = *(_QWORD *)(a2 - 96);
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        if (!*(_QWORD *)(v9 + 8)
          && *(_BYTE *)(v8 + 16) == 81
          && (*(_WORD *)(v8 + 18) & 0x3E) == 0x20
          && sub_1C5FA3A0C(*(unsigned __int8 **)(v8 - 32), *(llvm::DataLayout **)(a1 + 16)))
        {
          v6 = (uint64_t **)(v8 - 64);
          goto LABEL_18;
        }
      }
    }
    return 0;
  }
  v5 = *(_DWORD *)(a2 + 20);
  if (llvm::BasicBlock::hasNPredecessorsOrMore(*(llvm::BasicBlock **)(a2 + 40), 0x80 / ((v5 >> 1) & 0x3FFFFFF)))
    return 0;
  if ((v5 & 0x40000000) != 0)
    v6 = *(uint64_t ***)(a2 - 8);
  else
    v6 = (uint64_t **)(a2 - 32 * (v5 & 0x7FFFFFF));
LABEL_18:
  v7 = *v6;
  if (*v6)
  {
    if (*((_BYTE *)v7 + 16) == 75)
    {
      v11 = (llvm::Type **)*(v7 - 4);
      v12 = *v7;
      llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(a1 + 16), *v11);
      if (v12 == v13)
        return v11;
    }
  }
  return (llvm::Type **)v7;
}

uint64_t sub_1C5F9E550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Type **v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void **p_p;
  llvm::BasicBlock *v18;
  uint64_t v19;
  const llvm::SwitchInst *v20;
  llvm::BasicBlock *v21;
  char *v22;
  uint64_t *v23;
  unint64_t v24;
  llvm::BasicBlock *v25;
  uint64_t v26;
  llvm::BasicBlock **v27;
  llvm::BasicBlock **v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  llvm::BasicBlock **v46;
  llvm::BasicBlock *v47;
  llvm::BasicBlock *v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  llvm::BasicBlock *v58;
  int v59;
  uint64_t *v60;
  llvm::BasicBlock *v61;
  char *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  llvm::BasicBlock *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t i;
  llvm::SwitchInstProfUpdateWrapper *v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  char *v80;
  uint64_t *v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unsigned int v91;
  char *v92;
  unint64_t v93;
  llvm::BasicBlock **v94;
  unint64_t *v95;
  unint64_t v96;
  int *v97;
  int *v98;
  uint64_t *v99;
  unsigned int v100;
  int *v101;
  int *v102;
  int *v103;
  unint64_t *v104;
  unint64_t *v105;
  unint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  llvm::BasicBlock **v112;
  unint64_t *v113;
  unint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  llvm::BasicBlock *v121;
  void *__p;
  char *v123;
  uint64_t v124;
  void *v125;
  char *v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  _DWORD v130[4];
  __int16 v131;
  llvm::BasicBlock *v132;
  llvm::BasicBlock *v133;
  uint64_t v134;
  int v135;
  _WORD v136[64];
  llvm::SwitchInstProfUpdateWrapper *v137;
  uint64_t v138;
  unsigned int v139;
  char v140;
  char v141;
  uint64_t v142;

  v142 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)(a3 + 40);
  v7 = *(_QWORD *)(a3 + 40);
  if (v7 == a3 + 40)
  {
    v10 = 0;
  }
  else
  {
    if (v7)
      v9 = v7 - 24;
    else
      v9 = 0;
    if (*(unsigned __int8 *)(v9 + 16) - 29 >= 0xB)
      v10 = 0;
    else
      v10 = v9;
  }
  v11 = sub_1C5F9E444(a1, v10);
  if (!v11 || sub_1C5F9E444(a1, a2) != v11)
    return 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v14 = (_QWORD *)*v8;
  if ((_QWORD *)*v8 == v8)
  {
    v16 = 0;
  }
  else
  {
    if (v14)
      v15 = (uint64_t)(v14 - 3);
    else
      v15 = 0;
    if (*(unsigned __int8 *)(v15 + 16) - 29 >= 0xB)
      v16 = 0;
    else
      v16 = v15;
  }
  p_p = &v125;
  v18 = (llvm::BasicBlock *)sub_1C5FA3B40(a1, v16, (uint64_t)&v125);
  sub_1C5FA3E60((uint64_t)v18, (uint64_t *)&v125);
  __p = 0;
  v123 = 0;
  v124 = 0;
  v19 = sub_1C5FA3B40(a1, a2, (uint64_t)&__p);
  sub_1C5FA3E60(v19, (uint64_t *)&__p);
  v21 = *(llvm::BasicBlock **)(a2 + 40);
  v23 = (uint64_t *)v125;
  v22 = v126;
  v24 = v126 - (_BYTE *)v125;
  if (v18 != v21)
  {
    if ((v24 & 0xFFFFFFFF0) != 0)
    {
      v25 = 0;
      v26 = (v24 >> 4);
      v27 = (llvm::BasicBlock **)((char *)v125 + 8);
      do
      {
        if (*v27 == v21)
        {
          if (v25)
            goto LABEL_65;
          v25 = *(v27 - 1);
        }
        v27 += 2;
        --v26;
      }
      while (v26);
    }
    else
    {
      v25 = 0;
    }
    v118 = a4;
    v120 = a1;
    v116 = a2;
    if (((v123 - (_BYTE *)__p) & 0xFFFFFFFF0) != 0)
    {
      v45 = ((unint64_t)(v123 - (_BYTE *)__p) >> 4);
      v46 = (llvm::BasicBlock **)((char *)__p + 8);
      while (*(v46 - 1) != v25)
      {
        v46 += 2;
        if (!--v45)
          goto LABEL_71;
      }
      v47 = *v46;
    }
    else
    {
LABEL_71:
      v47 = 0;
    }
    if (v47)
      v48 = v47;
    else
      v48 = (llvm::BasicBlock *)v19;
    v132 = (llvm::BasicBlock *)v136;
    v133 = (llvm::BasicBlock *)v136;
    v134 = 2;
    v135 = 0;
    v49 = (_QWORD *)*((_QWORD *)v21 + 5);
    if (v49 != (_QWORD *)((char *)v21 + 40))
    {
      if (v49)
        v50 = v49 - 3;
      else
        v50 = 0;
      v51 = *((unsigned __int8 *)v50 + 16);
      v52 = v51 - 29;
      if (v51 != 30)
      {
        v53 = 2;
        switch(v52)
        {
          case 1:
            __break(1u);
            goto LABEL_205;
          case 2:
            v53 = (*((_DWORD *)v50 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_164;
          case 3:
          case 9:
LABEL_205:
            v53 = (*((_DWORD *)v50 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_164;
          case 4:
            goto LABEL_84;
          case 7:
            v53 = *((_WORD *)v50 + 9) & 1;
            goto LABEL_164;
          case 8:
            v53 = 1;
            goto LABEL_84;
          case 10:
            v53 = *((_DWORD *)v50 + 20) + 1;
LABEL_164:
            if (!v53)
              goto LABEL_132;
            goto LABEL_84;
          default:
            goto LABEL_132;
        }
      }
      if ((*((_DWORD *)v50 + 5) & 0x7FFFFFF) == 3)
        v53 = 2;
      else
        v53 = 1;
LABEL_84:
      v54 = 0;
      v55 = 0;
      v56 = v50 - 8;
      v57 = v53;
      v58 = v48;
      do
      {
        v59 = *((unsigned __int8 *)v50 + 16);
        if (v59 != 30)
          __asm { BR              X9 }
        v60 = &v50[-4 * v55 - 4];
        v61 = (llvm::BasicBlock *)*v60;
        if ((llvm::BasicBlock *)*v60 == v58)
        {
          v58 = 0;
        }
        else
        {
          if (v61 != v48)
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v132, *v60);
          llvm::BasicBlock::removePredecessor(v61, v21, 0);
        }
        ++v55;
        v54 += 2;
        v56 += 4;
      }
      while (v57 != v55);
    }
LABEL_132:
    v83 = (char *)operator new(0x60uLL);
    *((_DWORD *)v83 + 13) = *((_DWORD *)v83 + 13) & 0x38000000 | 1;
    *(_QWORD *)v83 = 0;
    *((_QWORD *)v83 + 1) = 0;
    *((_QWORD *)v83 + 2) = 0;
    *((_QWORD *)v83 + 4) = ***(_QWORD ***)v48 + 1576;
    *((_QWORD *)v83 + 3) = v83 + 32;
    *((_QWORD *)v83 + 5) = 0;
    v83[48] = 30;
    v83[49] = 0;
    *((_WORD *)v83 + 25) = 0;
    *((_DWORD *)v83 + 13) = 1;
    *(_OWORD *)(v83 + 56) = 0u;
    *(_OWORD *)(v83 + 72) = 0u;
    *((_DWORD *)v83 + 22) = 0;
    *(_QWORD *)v83 = v48;
    v86 = *((_QWORD *)v48 + 1);
    v85 = (_QWORD *)((char *)v48 + 8);
    v84 = v86;
    *((_QWORD *)v83 + 1) = v86;
    if (v86)
      *(_QWORD *)(v84 + 16) = v83 + 8;
    *((_QWORD *)v83 + 2) = v85;
    *v85 = v83;
    v131 = 257;
    sub_1C4867F8C(v118, (unsigned __int8 **)v83 + 4, (uint64_t)&v128);
    sub_1C5FA3F18(v116);
    if (*(_QWORD *)(v120 + 8))
    {
      v128 = v130;
      v129 = 0x200000000;
      LODWORD(v87) = HIDWORD(v134);
      v88 = (HIDWORD(v134) - v135);
      if (v88 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, (uint64_t)v130, v88, 16);
        LODWORD(v87) = HIDWORD(v134);
      }
      if (v133 == v132)
        v87 = v87;
      else
        v87 = v134;
      if ((_DWORD)v87)
      {
        v89 = 8 * v87;
        v90 = (unint64_t *)v133;
        while (*v90 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v90;
          v89 -= 8;
          if (!v89)
          {
            v91 = v129;
            goto LABEL_154;
          }
        }
      }
      else
      {
        v90 = (unint64_t *)v133;
      }
      v92 = (char *)v133 + 8 * v87;
      v91 = v129;
      if (v90 != (unint64_t *)v92)
      {
        v93 = *v90;
LABEL_148:
        if (v91 >= HIDWORD(v129))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v128, (uint64_t)v130, v91 + 1, 16);
          v91 = v129;
        }
        v94 = (llvm::BasicBlock **)((char *)v128 + 16 * v91);
        *v94 = v21;
        v94[1] = (llvm::BasicBlock *)(v93 | 4);
        v91 = v129 + 1;
        LODWORD(v129) = v129 + 1;
        v95 = v90 + 1;
        while (v95 != (unint64_t *)v92)
        {
          v96 = *v95++;
          v93 = v96;
          if (v96 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v90 = v95 - 1;
            goto LABEL_148;
          }
        }
      }
LABEL_154:
      llvm::DomTreeUpdater::applyUpdates(*(_QWORD *)(v120 + 8), (unint64_t *)v128, v91);
      if (v128 != v130)
        free(v128);
    }
    if (v133 != v132)
      free(v133);
    goto LABEL_158;
  }
  v117 = a4;
  v119 = a1;
  v28 = (llvm::BasicBlock **)__p;
  v29 = v123 - (_BYTE *)__p;
  if (v24 <= v123 - (_BYTE *)__p)
    v30 = (char *)v125;
  else
    v30 = (char *)__p;
  if (v24 <= v123 - (_BYTE *)__p)
    v31 = (char *)__p;
  else
    v31 = (char *)v125;
  if (v24 > v123 - (_BYTE *)__p)
  {
    v32 = v123;
  }
  else
  {
    p_p = &__p;
    v32 = v126;
  }
  if (v30 == v32)
  {
LABEL_65:
    v12 = 0;
    goto LABEL_159;
  }
  v33 = v32 - v30;
  v34 = (unint64_t)v33 >> 4;
  if (v33 == 16)
  {
    if (v24 <= v29)
      v22 = v123;
    if (((v22 - v31) & 0xFFFFFFFF0) != 0)
    {
      v35 = ((unint64_t)(v22 - v31) >> 4);
      v36 = v31;
      while (*(_QWORD *)v30 != *(_QWORD *)v36)
      {
        v36 += 16;
        if (!--v35)
          goto LABEL_46;
      }
      goto LABEL_94;
    }
  }
  else
  {
LABEL_46:
    if (v33 >= 32)
    {
      qsort(v30, (unint64_t)v33 >> 4, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1C5FA408C);
      v31 = (char *)*p_p;
    }
  }
  if (v24 <= v29)
    v37 = &__p;
  else
    v37 = &v125;
  v38 = (_BYTE *)v37[1] - v31;
  v115 = a2;
  if (v38 >= 32)
  {
    qsort(v31, (unint64_t)v38 >> 4, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1C5FA408C);
    v31 = (char *)*p_p;
    v38 = (_BYTE *)v37[1] - (_BYTE *)*p_p;
  }
  v12 = 0;
  if (!(_DWORD)v34)
    goto LABEL_159;
  v39 = (unint64_t)v38 >> 4;
  if (!(_DWORD)v39)
    goto LABEL_159;
  v40 = 0;
  v41 = 0;
  a2 = v115;
  while (1)
  {
    v42 = *(_QWORD *)&v30[16 * v41];
    v43 = *(_QWORD *)&v31[16 * v40];
    if (v42 == v43)
      break;
    if (v42 >= v43)
      ++v40;
    else
      ++v41;
    if (v41 == (_DWORD)v34 || v40 == (_DWORD)v39)
      goto LABEL_65;
  }
LABEL_94:
  if (*(_BYTE *)(a2 + 16) != 30)
  {
    v137 = (llvm::SwitchInstProfUpdateWrapper *)a2;
    LOBYTE(v138) = 0;
    v140 = 0;
    v141 = 0;
    llvm::SwitchInstProfUpdateWrapper::init(&v137, v20);
    v132 = (llvm::BasicBlock *)v136;
    v133 = (llvm::BasicBlock *)v136;
    v134 = 16;
    v135 = 0;
    if ((v24 & 0xFFFFFFFF0) != 0)
    {
      v67 = (v24 >> 4);
      do
      {
        v68 = *v23;
        v23 += 2;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v132, v68);
        --v67;
      }
      while (v67);
    }
    v128 = (void *)1;
    for (i = 8; i != 136; i += 16)
      *(void **)((char *)&v128 + i) = (void *)-4096;
    v70 = v137;
    v71 = (*((_DWORD *)v137 + 5) >> 1) & 0x3FFFFFF;
    v72 = (v71 - 1);
    if (v71 == 1)
    {
LABEL_125:
      if (*(_QWORD *)(v119 + 8))
      {
        v97 = sub_1C617D0CC((int *)&v128);
        if ((v128 & 1) != 0)
          v99 = &v129;
        else
          v99 = (uint64_t *)v129;
        v100 = v130[0];
        if ((v128 & 1) != 0)
          v100 = 8;
        v101 = (int *)&v99[2 * v100];
        if (v101 == v97)
        {
          v106 = 0;
          v105 = 0;
        }
        else
        {
          v102 = v97;
          v103 = v98;
          v104 = 0;
          v105 = 0;
          v106 = 0;
          do
          {
            if (!v102[2])
            {
              v107 = *(_QWORD *)v102 | 4;
              if (v105 >= v104)
              {
                v108 = ((char *)v105 - (char *)v106) >> 4;
                v109 = v108 + 1;
                if ((unint64_t)(v108 + 1) >> 60)
                  abort();
                if (v104 - v106 > v109)
                  v109 = v104 - v106;
                if ((unint64_t)((char *)v104 - (char *)v106) >= 0x7FFFFFFFFFFFFFF0)
                  v110 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v110 = v109;
                if (v110)
                {
                  if (v110 >> 60)
                    sub_1C4764EE4();
                  v111 = (char *)operator new(16 * v110);
                }
                else
                {
                  v111 = 0;
                }
                v112 = (llvm::BasicBlock **)&v111[16 * v108];
                *v112 = v18;
                v112[1] = (llvm::BasicBlock *)v107;
                if (v105 == v106)
                {
                  v114 = v105;
                  v106 = (unint64_t *)&v111[16 * v108];
                }
                else
                {
                  v113 = (unint64_t *)&v111[16 * v108];
                  do
                  {
                    *((_OWORD *)v113 - 1) = *((_OWORD *)v105 - 1);
                    v113 -= 2;
                    v105 -= 2;
                  }
                  while (v105 != v106);
                  v114 = v106;
                  v106 = v113;
                }
                v104 = (unint64_t *)&v111[16 * v110];
                v105 = (unint64_t *)(v112 + 2);
                if (v114)
                  operator delete(v114);
              }
              else
              {
                *v105 = (unint64_t)v18;
                v105[1] = v107;
                v105 += 2;
              }
            }
            while (1)
            {
              v102 += 4;
              if (v102 == v103)
                break;
              if ((*(_QWORD *)v102 | 0x1000) != 0xFFFFFFFFFFFFF000)
                goto LABEL_197;
            }
            v102 = v103;
LABEL_197:
            ;
          }
          while (v102 != v101);
        }
        llvm::DomTreeUpdater::applyUpdates(*(_QWORD *)(v119 + 8), v106, ((char *)v105 - (char *)v106) >> 4);
        if (v106)
          operator delete(v106);
      }
      if ((v128 & 1) == 0)
        MEMORY[0x1CAA32FB4](v129, 8);
      if (v133 != v132)
        free(v133);
      sub_1C5AE380C((uint64_t)&v137);
      goto LABEL_158;
    }
    v73 = (2 * v72) | 1;
    while (1)
    {
      v121 = 0;
      v74 = *((_DWORD *)v70 + 5);
      if ((v74 & 0x40000000) != 0)
        v75 = (char *)*((_QWORD *)v70 - 1);
      else
        v75 = (char *)v70 - 32 * (v74 & 0x7FFFFFF);
      v76 = v72 - 1;
      v77 = v73;
      if ((_DWORD)v72 == -1)
        v77 = 1;
      v121 = *(llvm::BasicBlock **)&v75[32 * v77];
      if (*(_QWORD *)(v119 + 8))
      {
        v79 = sub_1C63AED90(&v128, &v121);
        ++*((_DWORD *)v79 + 2);
        v74 = *((_DWORD *)v70 + 5);
        if ((v74 & 0x40000000) != 0)
        {
LABEL_115:
          v78 = (char *)*((_QWORD *)v70 - 1);
          goto LABEL_116;
        }
      }
      else if ((v74 & 0x40000000) != 0)
      {
        goto LABEL_115;
      }
      v78 = (char *)v70 - 32 * (v74 & 0x7FFFFFF);
LABEL_116:
      v80 = (char *)sub_1C477672C((uint64_t)&v132, *(_QWORD *)&v78[32 * ((v73 - 1) & 0xFFFFFFFE)]);
      if (v133 == v132)
        v81 = (uint64_t *)((char *)&v134 + 4);
      else
        v81 = &v134;
      if (v80 != (char *)v133 + 8 * *(unsigned int *)v81)
      {
        llvm::BasicBlock::removePredecessor(v121, v18, 0);
        if (v140)
        {
          v141 = 1;
          *(_DWORD *)(v138 + 4 * v72) = *(_DWORD *)(v138 + 4 * v139-- - 4);
        }
        llvm::SwitchInst::removeCase((uint64_t)v137, (uint64_t)v70, v72 - 1);
        if (*(_QWORD *)(v119 + 8))
        {
          v82 = sub_1C63AED90(&v128, &v121);
          --*((_DWORD *)v82 + 2);
        }
      }
      v73 -= 2;
      --v72;
      if (!v76)
        goto LABEL_125;
    }
  }
  v62 = (char *)operator new(0x60uLL);
  *((_DWORD *)v62 + 13) = *((_DWORD *)v62 + 13) & 0x38000000 | 1;
  *(_QWORD *)v62 = 0;
  *((_QWORD *)v62 + 2) = 0;
  *((_QWORD *)v62 + 1) = 0;
  *((_QWORD *)v62 + 4) = ***(_QWORD ***)v19 + 1576;
  *((_QWORD *)v62 + 3) = v62 + 32;
  *((_QWORD *)v62 + 5) = 0;
  v62[48] = 30;
  v62[49] = 0;
  *((_WORD *)v62 + 25) = 0;
  *((_DWORD *)v62 + 13) = 1;
  *(_OWORD *)(v62 + 56) = 0u;
  *(_OWORD *)(v62 + 72) = 0u;
  *((_DWORD *)v62 + 22) = 0;
  v63 = (_QWORD *)(v19 + 8);
  v64 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)v62 = v19;
  *((_QWORD *)v62 + 1) = v64;
  if (v64)
    *(_QWORD *)(v64 + 16) = v62 + 8;
  *((_QWORD *)v62 + 2) = v63;
  *v63 = v62;
  v136[0] = 257;
  sub_1C4867F8C(v117, (unsigned __int8 **)v62 + 4, (uint64_t)&v132);
  llvm::BasicBlock::removePredecessor(v28[1], v18, 0);
  sub_1C5FA3F18(a2);
  v65 = *(_QWORD *)(v119 + 8);
  if (!v65)
  {
LABEL_158:
    v12 = 1;
    goto LABEL_159;
  }
  v66 = (llvm::BasicBlock *)((unint64_t)v28[1] | 4);
  v132 = v18;
  v133 = v66;
  v12 = 1;
  llvm::DomTreeUpdater::applyUpdates(v65, (unint64_t *)&v132, 1);
LABEL_159:
  if (__p)
    operator delete(__p);
  if (v125)
    operator delete(v125);
  return v12;
}

void sub_1C5F9F0E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t ***v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Type **v7;
  uint64_t i;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v13;
  int64x2_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ***v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t v24;
  _BYTE *v25;
  llvm::BasicBlock *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  _BYTE *v36;
  _QWORD *v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _BOOL4 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t ****v57;
  uint64_t ***v58;
  uint64_t ****v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _BOOL4 v66;
  uint64_t v67;
  _BOOL4 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  _BOOL4 v76;
  char *v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  uint64_t *v81;
  __int128 v82;
  _QWORD *v83;
  int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  unint64_t v105;
  void *v106;
  _DWORD *v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  int v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  int v127;
  uint64_t **v128;
  unint64_t *v129;
  unint64_t v130;
  unsigned int v131;
  uint64_t *v132;
  uint64_t *v133;
  int v134;
  char *v135;
  uint64_t v136;
  __int128 v137;
  uint64_t **v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  unint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  unint64_t *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  _DWORD *v155;
  uint64_t *v156;
  uint64_t *v157;
  void **v158;
  void **v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  void ***v165;
  uint64_t **v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void ***v173;
  void **v174;
  void **v175;
  void **v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  unint64_t *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  char *v192;
  unint64_t *v193;
  char *v194;
  void *v195;
  _DWORD *v196;
  void **v197;
  void **v198;
  _QWORD *v199;
  void *v200;
  uint64_t ****v201;
  uint64_t ***v202;
  void *v203;
  void *v204;
  unint64_t v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  llvm::BasicBlock **v213;
  void *v214;
  void *v215;
  uint64_t v216;
  unint64_t v217;
  char *v218;
  uint64_t v219;
  unsigned __int8 **v220;
  unsigned __int8 **v221;
  unsigned __int8 *v222;
  unsigned __int8 **v223;
  unsigned __int8 *v224;
  unint64_t *v225;
  void *v226;
  llvm::ConstantInt **v227;
  llvm::ConstantInt *v228;
  llvm::BasicBlock *v229;
  llvm::Type **v230;
  uint64_t *v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t *v236;
  uint64_t v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  BOOL v241;
  unint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  llvm::MDNode *BranchWeights;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  int v258;
  unsigned __int8 **v259;
  _QWORD *v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  _DWORD *v265;
  uint64_t v266;
  uint64_t *v267;
  int v268;
  unsigned __int8 **v269;
  unsigned __int8 **v270;
  uint64_t *v271;
  unsigned __int8 *v272;
  uint64_t v273;
  unsigned __int8 **v274;
  unsigned __int8 *v275;
  unsigned int v276;
  llvm::BasicBlock **v277;
  llvm::BasicBlock **v278;
  unint64_t v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t ***v283;
  uint64_t *v284;
  int64x2_t v285;
  uint64_t v286;
  uint64_t v287;
  llvm::Type **v288;
  llvm::Type **v289;
  uint64_t v290;
  uint64_t v291;
  unsigned __int8 *v292;
  void *__dst;
  uint64_t *v294;
  uint64_t v295;
  int v296;
  _BYTE v297[16];
  void *__p;
  unint64_t *v299;
  char *v300;
  uint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  __int128 v305;
  uint64_t v306;
  int64x2_t v307;
  int64x2_t v308;
  void *v309;
  uint64_t v310;
  _BYTE v311[32];
  _QWORD v312[17];
  void *v313;
  uint64_t v314;
  _BYTE v315[128];
  void *__src[2];
  uint64_t v317;
  int v318;
  _WORD v319[8];
  void *v320;
  uint64_t v321;
  _BYTE v322[64];
  void *v323;
  uint64_t v324;
  _BYTE v325[64];
  _QWORD v326[17];
  void *v327;
  uint64_t v328;
  _BYTE v329[128];
  void *v330;
  uint64_t v331;
  _QWORD v332[67];

  v4 = (uint64_t ***)a2;
  v5 = a1;
  v332[64] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 40);
  v7 = sub_1C5F9E444(a1, a2);
  for (i = *(_QWORD *)(v6 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v9 = *(_QWORD *)(i + 24);
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (v9)
      v11 = v10 >= 0x1C;
    else
      v11 = 0;
    if (v11 && v10 - 29 < 0xB)
      break;
  }
  v312[0] = 1;
  v13 = 1;
  v14 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v312[v13] = v14;
    v13 += 2;
  }
  while (v13 != 17);
  v313 = v315;
  v314 = 0x1000000000;
  sub_1C5F9E250(v312, i);
  v15 = v314;
  if ((_DWORD)v314)
  {
    v284 = a3;
    v280 = (v4 >> 4) ^ (v4 >> 9);
    v285 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v290 = v5;
    v282 = v6;
    v283 = v4;
    while (1)
    {
      v16 = (char *)v313 + 8 * v15;
      v17 = *((_QWORD *)v16 - 1);
      sub_1C5AC7990((uint64_t)v312, (_QWORD *)v16 - 1);
      LODWORD(v314) = v314 - 1;
      v18 = *(_QWORD *)(v17 + 40);
      if (v18 == v17 + 40)
      {
        v20 = 0;
      }
      else
      {
        if (v18)
          v19 = v18 - 24;
        else
          v19 = 0;
        if (*(unsigned __int8 *)(v19 + 16) - 29 >= 0xB)
          v20 = 0;
        else
          v20 = v19;
      }
      if (v17 == v6 || sub_1C5F9E444(v5, v20) != v7)
        goto LABEL_408;
      v288 = v7;
      v306 = 1;
      v307 = v285;
      v308 = v285;
      v309 = v311;
      v310 = 0x400000000;
      if ((sub_1C5F8891C((uint64_t)v4, v20, (uint64_t)&v306) & 1) != 0 || !(_DWORD)v310)
        break;
      v21 = (uint64_t ***)v309;
      v22 = 8 * v310;
      while (1)
      {
        v23 = *v21;
        v330 = v4[5];
        if (!sub_1C5EBE3AC(v23, (uint64_t *)&v330, 1, ".fold.split", *(llvm::DomTreeUpdater **)(v5 + 8), 0, 0, 0, 0))break;
        ++v21;
        v22 -= 8;
        if (!v22)
          goto LABEL_30;
      }
      v45 = 0;
      v7 = v288;
LABEL_404:
      if (v309 != v311)
        free(v309);
      if ((v306 & 1) != 0)
      {
        if (!v45)
          goto LABEL_430;
      }
      else
      {
        MEMORY[0x1CAA32FB4](v307.i64[0], 8);
        if (!v45)
          goto LABEL_430;
      }
LABEL_408:
      v15 = v314;
      if (!(_DWORD)v314)
        goto LABEL_430;
    }
LABEL_30:
    v24 = (uint64_t)v4[5];
    v25 = (_BYTE *)v20;
    v26 = *(llvm::BasicBlock **)(v20 + 40);
    v330 = v332;
    v331 = 0x2000000000;
    v302 = 0;
    v303 = 0;
    v304 = 0;
    v27 = sub_1C5FA3B40(v5, (uint64_t)v4, (uint64_t)&v302);
    v300 = 0;
    v301 = v27;
    __p = 0;
    v299 = 0;
    v291 = (uint64_t)v25;
    v28 = sub_1C5FA3B40(v5, (uint64_t)v25, (uint64_t)&__p);
    v326[0] = 1;
    for (j = 1; j != 17; j += 2)
      v326[j] = -4096;
    v327 = v329;
    v328 = 0x800000000;
    v323 = v325;
    v324 = 0x800000000;
    if ((v25[23] & 0x20) == 0)
      goto LABEL_59;
    v30 = ***(_QWORD ***)v25;
    v320 = v25;
    v31 = *(_DWORD *)(v30 + 2496);
    if (v31)
    {
      v32 = *(_QWORD *)(v30 + 2480);
      v33 = v31 - 1;
      v34 = v33 & ((v25 >> 4) ^ (v25 >> 9));
      v35 = (_QWORD *)(v32 + 40 * v34);
      v36 = (_BYTE *)*v35;
      if ((_BYTE *)*v35 == v25)
      {
LABEL_43:
        v41 = *((unsigned int *)v35 + 4);
        if ((_DWORD)v41)
        {
          v42 = (_QWORD *)(v35[1] + 8);
          v43 = 16 * v41;
          while (*((_DWORD *)v42 - 2) != 2)
          {
            v44 = 0;
            v42 += 2;
            v43 -= 16;
            if (!v43)
              goto LABEL_60;
          }
          v46 = *v42;
          if (v46)
          {
            v47 = *(_QWORD *)(v46 - 8 * *(unsigned int *)(v46 + 8));
            if (v47)
            {
              if (!*(_BYTE *)v47)
              {
                v48 = *(_QWORD **)(v47 + 8);
                if (*v48 == 14)
                {
                  v49 = v48[3];
                  v50 = *(_QWORD *)((char *)v48 + 30);
                  v44 = v49 == 0x775F68636E617262 && v50 == 0x737468676965775FLL;
LABEL_60:
                  if ((*((_BYTE *)v4 + 23) & 0x20) == 0)
                    goto LABEL_95;
                  v52 = ***v4;
                  v320 = v4;
                  v53 = *(_DWORD *)(v52 + 2496);
                  if (v53)
                  {
                    v54 = *(_QWORD *)(v52 + 2480);
                    v55 = v53 - 1;
                    v56 = v55 & v280;
                    v57 = (uint64_t ****)(v54 + 40 * (v55 & v280));
                    v58 = *v57;
                    if (*v57 == v4)
                      goto LABEL_71;
                    v59 = 0;
                    v60 = 1;
                    while (v58 != (uint64_t ***)-4096)
                    {
                      if (v59)
                        v61 = 0;
                      else
                        v61 = v58 == (uint64_t ***)-8192;
                      if (v61)
                        v59 = v57;
                      v62 = v56 + v60++;
                      v56 = v62 & v55;
                      v57 = (uint64_t ****)(v54 + 40 * v56);
                      v58 = *v57;
                      if (*v57 == v4)
                        goto LABEL_71;
                    }
                    if (v59)
                      v201 = v59;
                    else
                      v201 = v57;
                  }
                  else
                  {
                    v201 = 0;
                  }
                  v57 = (uint64_t ****)sub_1C541AB24(v52 + 2480, (uint64_t)&v320, (uint64_t *)&v320, v201);
                  v202 = (uint64_t ***)v320;
                  v57[4] = 0;
                  v57[3] = 0;
                  *v57 = v202;
                  v57[1] = (uint64_t ***)(v57 + 3);
                  v57[2] = (uint64_t ***)0x100000000;
LABEL_71:
                  v63 = *((unsigned int *)v57 + 4);
                  if ((_DWORD)v63)
                  {
                    v64 = v57[1] + 1;
                    v65 = 16 * v63;
                    while (*((_DWORD *)v64 - 2) != 2)
                    {
                      v66 = 0;
                      v64 += 2;
                      v65 -= 16;
                      if (!v65)
                      {
                        if (!v44)
                          goto LABEL_96;
                        goto LABEL_76;
                      }
                    }
                    v69 = *v64;
                    if (!v69)
                      goto LABEL_95;
                    v70 = *(_QWORD *)(v69 - 8 * *(unsigned int *)(v69 + 8));
                    if (!v70)
                      goto LABEL_95;
                    if (*(_BYTE *)v70)
                      goto LABEL_95;
                    v71 = *(_QWORD **)(v70 + 8);
                    if (*v71 != 14)
                      goto LABEL_95;
                    v72 = v71[3];
                    v73 = *(_QWORD *)((char *)v71 + 30);
                    v66 = v72 == 0x775F68636E617262 && v73 == 0x737468676965775FLL;
                    if (v44)
                    {
LABEL_76:
                      sub_1C5FA40A4((_BYTE *)v291, (uint64_t)&v323);
                      v67 = (((char *)v299 - (_BYTE *)__p) >> 4) + 1;
                      v68 = v67 == v324 && v66;
                      v320 = v322;
                      v321 = 0x800000000;
                      if (!v68)
                      {
                        if (v67 == v324)
                        {
                          sub_1C4765AA4((char *)&v320, ((v303 - (uint64_t)v302) >> 4) + 1, 1);
                          v287 = 0x100000000;
                        }
                        else
                        {
                          v287 = 0;
                        }
                        goto LABEL_103;
                      }
LABEL_98:
                      sub_1C5FA40A4(v4, (uint64_t)&v320);
                      v75 = ((v303 - (uint64_t)v302) >> 4) + 1;
                      LODWORD(v287) = v75 == v321;
                      v76 = v75 == v321 && v44;
                      HIDWORD(v287) = v76;
LABEL_103:
                      if (v28 != v24)
                      {
                        v286 = v28;
                        v294 = 0;
                        v295 = 0;
                        __dst = &v294;
                        __src[1] = 0;
                        v317 = 0;
                        __src[0] = &__src[1];
                        v128 = (uint64_t **)__p;
                        v129 = v299;
                        v130 = (unint64_t)((char *)v299 - (_BYTE *)__p) >> 4;
                        if ((_DWORD)v130)
                        {
                          v131 = 0;
                          do
                          {
                            if (v128[2 * v131 + 1] == (uint64_t *)v24)
                            {
                              v132 = (uint64_t *)&v128[2 * v131];
                              sub_1C5FA42B8((uint64_t *)&__dst, *v132);
                              if (v287)
                              {
                                v133 = (uint64_t *)*((_QWORD *)v323 + v131 + 1);
                                sub_1C506577C((uint64_t **)__src, *v132, &v128[2 * v131])[5] = v133;
                                v134 = v324;
                                v135 = (char *)v323 + 8 * v324;
                                v136 = *((_QWORD *)v323 + v131 + 1);
                                *((_QWORD *)v323 + v131 + 1) = *((_QWORD *)v135 - 1);
                                *((_QWORD *)v135 - 1) = v136;
                                LODWORD(v324) = v134 - 1;
                              }
                              v305 = *(_OWORD *)v132;
                              v137 = v305;
                              *(_OWORD *)v132 = *((_OWORD *)v129 - 1);
                              *((_OWORD *)v129 - 1) = v137;
                              v129 -= 2;
                              --v131;
                              LODWORD(v130) = v130 - 1;
                            }
                            ++v131;
                          }
                          while (v131 != (_DWORD)v130);
                        }
                        v299 = v129;
                        v138 = (uint64_t **)v302;
                        if (((v303 - (_QWORD)v302) & 0xFFFFFFFF0) == 0)
                        {
                          v78 = v129;
LABEL_181:
                          v139 = __dst;
                          if (__dst != &v294)
                          {
                            v183 = v301;
                            do
                            {
                              v184 = v139[4];
                              *(_QWORD *)&v305 = v184;
                              if (v287)
                              {
                                v185 = sub_1C506577C((uint64_t **)__src, v184, (uint64_t **)&v305)[5];
                                v186 = v324;
                                if (v324 >= (unint64_t)HIDWORD(v324))
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v323, (uint64_t)v325, v324 + 1, 8);
                                  v186 = v324;
                                }
                                *((_QWORD *)v323 + v186) = v185;
                                LODWORD(v324) = v324 + 1;
                              }
                              if (v78 >= (unint64_t *)v300)
                              {
                                v187 = (unint64_t *)__p;
                                v188 = ((char *)v78 - (_BYTE *)__p) >> 4;
                                v189 = v188 + 1;
                                if ((unint64_t)(v188 + 1) >> 60)
                                  goto LABEL_435;
                                v190 = v300 - (_BYTE *)__p;
                                if ((v300 - (_BYTE *)__p) >> 3 > v189)
                                  v189 = v190 >> 3;
                                if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF0)
                                  v191 = 0xFFFFFFFFFFFFFFFLL;
                                else
                                  v191 = v189;
                                if (v191)
                                {
                                  if (v191 >> 60)
                                    goto LABEL_436;
                                  v192 = (char *)operator new(16 * v191);
                                }
                                else
                                {
                                  v192 = 0;
                                }
                                v193 = (unint64_t *)&v192[16 * v188];
                                *v193 = v184;
                                v193[1] = v183;
                                if (v78 == v187)
                                {
                                  v195 = v78;
                                  v194 = &v192[16 * v188];
                                }
                                else
                                {
                                  v194 = &v192[16 * v188];
                                  do
                                  {
                                    *((_OWORD *)v194 - 1) = *((_OWORD *)v78 - 1);
                                    v194 -= 16;
                                    v78 -= 2;
                                  }
                                  while (v78 != v187);
                                  v195 = __p;
                                }
                                v78 = v193 + 2;
                                __p = v194;
                                v300 = &v192[16 * v191];
                                if (v195)
                                  operator delete(v195);
                              }
                              else
                              {
                                *v78 = v184;
                                v78[1] = v183;
                                v78 += 2;
                              }
                              v299 = v78;
                              v196 = (_DWORD *)sub_1C5FA4404((uint64_t)v326, &v301);
                              ++*v196;
                              v197 = (void **)v139[1];
                              if (v197)
                              {
                                do
                                {
                                  v198 = v197;
                                  v197 = (void **)*v197;
                                }
                                while (v197);
                              }
                              else
                              {
                                do
                                {
                                  v198 = (void **)v139[2];
                                  v39 = *v198 == v139;
                                  v139 = v198;
                                }
                                while (!v39);
                              }
                              v139 = v198;
                            }
                            while (v198 != (void **)&v294);
                          }
                          sub_1C4ABB360((_QWORD *)__src[1]);
                          goto LABEL_155;
                        }
                        v140 = 0;
                        v141 = ((unint64_t)(v303 - (_QWORD)v302) >> 4);
                        while (2)
                        {
                          v142 = (uint64_t *)&v138[2 * v140];
                          v143 = *v142;
                          if (sub_1C5FA44C0((uint64_t)v294, *v142))
                          {
                            if (v287)
                            {
                              v144 = sub_1C506577C((uint64_t **)__src, v143, &v138[2 * v140])[5];
                              v145 = v324;
                              if (v324 >= (unint64_t)HIDWORD(v324))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v323, (uint64_t)v325, v324 + 1, 8);
                                v145 = v324;
                              }
                              *((_QWORD *)v323 + v145) = v144;
                              LODWORD(v324) = v324 + 1;
                            }
                            if (v129 >= (unint64_t *)v300)
                            {
                              v146 = (unint64_t *)__p;
                              v147 = ((char *)v129 - (_BYTE *)__p) >> 4;
                              v148 = v147 + 1;
                              if ((unint64_t)(v147 + 1) >> 60)
LABEL_435:
                                abort();
                              v149 = v300 - (_BYTE *)__p;
                              if ((v300 - (_BYTE *)__p) >> 3 > v148)
                                v148 = v149 >> 3;
                              if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF0)
                                v150 = 0xFFFFFFFFFFFFFFFLL;
                              else
                                v150 = v148;
                              if (v150)
                              {
                                if (v150 >> 60)
LABEL_436:
                                  sub_1C4764EE4();
                                v151 = (char *)operator new(16 * v150);
                              }
                              else
                              {
                                v151 = 0;
                              }
                              v152 = &v151[16 * v147];
                              *(_OWORD *)v152 = *(_OWORD *)v142;
                              v153 = v152;
                              if (v129 != v146)
                              {
                                do
                                {
                                  *((_OWORD *)v153 - 1) = *((_OWORD *)v129 - 1);
                                  v153 -= 16;
                                  v129 -= 2;
                                }
                                while (v129 != v146);
                                v129 = (unint64_t *)__p;
                              }
                              v154 = &v151[16 * v150];
                              v78 = (unint64_t *)(v152 + 16);
                              __p = v153;
                              v300 = v154;
                              if (v129)
                                operator delete(v129);
                            }
                            else
                            {
                              *(_OWORD *)v129 = *(_OWORD *)v142;
                              v78 = v129 + 2;
                            }
                            v299 = v78;
                            v138 = (uint64_t **)v302;
                            v155 = (_DWORD *)sub_1C5FA4404((uint64_t)v326, (uint64_t *)v302 + 2 * v140 + 1);
                            ++*v155;
                            if (v294)
                            {
                              v156 = v138[2 * v140];
                              v157 = v294;
                              v158 = (void **)&v294;
                              do
                              {
                                v159 = v158;
                                v160 = v157;
                                v161 = v157[4];
                                v162 = *(unsigned int *)(v161 + 32);
                                if (v162 > 0x40)
                                {
                                  v167 = *(_QWORD *)(v161 + 24);
                                  v163 = v156[3];
                                  v164 = ((unint64_t)(v162 + 63) >> 3) & 0x3FFFFFF8;
                                  v168 = v167 - 8;
                                  do
                                  {
                                    if (!v164)
                                      goto LABEL_212;
                                    v169 = *(_QWORD *)(v168 + v164);
                                    v170 = *(_QWORD *)(v163 + v164 - 8);
                                    v164 -= 8;
                                  }
                                  while (v169 == v170);
                                  if (v169 > v170)
                                    LODWORD(v164) = 1;
                                  else
                                    LODWORD(v164) = -1;
                                }
                                else
                                {
                                  v164 = *(_QWORD *)(v161 + 24);
                                  v163 = v156[3];
                                  v11 = v164 >= v163;
                                  LODWORD(v164) = v164 > v163;
                                  if (!v11)
                                    LODWORD(v164) = -1;
                                }
LABEL_212:
                                v165 = (void ***)(v160 + 1);
                                if ((v164 & 0x80000000) == 0)
                                  v166 = (uint64_t **)v160;
                                else
                                  v166 = (uint64_t **)(v160 + 1);
                                if ((v164 & 0x80000000) == 0)
                                  v158 = (void **)v160;
                                v157 = *v166;
                              }
                              while (v157);
                              if (v158 != (void **)&v294)
                              {
                                if ((v164 & 0x80000000) != 0)
                                  v160 = (uint64_t *)v159;
                                v171 = v160[4];
                                v172 = *((unsigned int *)v156 + 8);
                                if (v172 > 0x40)
                                {
                                  v177 = v172 + 63;
                                  v178 = *(_QWORD *)(v171 + 24) - 8;
                                  v179 = (v177 >> 3) & 0x3FFFFFF8;
                                  v180 = v163 - 8;
                                  do
                                  {
                                    if (!v179)
                                      goto LABEL_230;
                                    v181 = *(_QWORD *)(v180 + v179);
                                    v182 = *(_QWORD *)(v178 + v179);
                                    v179 -= 8;
                                  }
                                  while (v181 == v182);
                                  if (v181 > v182)
                                  {
LABEL_230:
                                    v173 = (void ***)(v159 + 1);
                                    if ((v164 & 0x80000000) == 0)
                                      v173 = v165;
                                    v174 = *v173;
                                    v175 = v158;
                                    if (*v173)
                                    {
                                      do
                                      {
                                        v176 = v174;
                                        v174 = (void **)*v174;
                                      }
                                      while (v174);
                                    }
                                    else
                                    {
                                      do
                                      {
                                        v176 = (void **)v175[2];
                                        v39 = *v176 == v175;
                                        v175 = v176;
                                      }
                                      while (!v39);
                                    }
                                    if (__dst == v158)
                                      __dst = v176;
                                    --v295;
                                    sub_1C485B6E0(v294, (uint64_t *)v158);
                                    operator delete(v158);
                                  }
                                }
                                else if (v163 >= *(_QWORD *)(v171 + 24))
                                {
                                  goto LABEL_230;
                                }
                              }
                            }
                          }
                          else
                          {
                            v78 = v129;
                          }
                          ++v140;
                          v129 = v78;
                          if (v140 == v141)
                            goto LABEL_181;
                          continue;
                        }
                      }
                      v294 = 0;
                      v295 = 0;
                      __dst = &v294;
                      v77 = (char *)__p;
                      v78 = v299;
                      v79 = (unint64_t)((char *)v299 - (_BYTE *)__p) >> 4;
                      if ((_DWORD)v79)
                      {
                        v80 = 0;
                        do
                        {
                          v81 = (uint64_t *)&v77[16 * v80];
                          if (v81[1] == v24)
                          {
                            *(_OWORD *)__src = *(_OWORD *)v81;
                            v82 = *(_OWORD *)__src;
                            *(_OWORD *)v81 = *((_OWORD *)v78 - 1);
                            *((_OWORD *)v78 - 1) = v82;
                            if (v287)
                            {
                              v83 = v323;
                              *(_QWORD *)v323 += *((_QWORD *)v323 + (v80 + 1));
                              v84 = v324;
                              v85 = (char *)&v83[v324];
                              v86 = v83[v80 + 1];
                              v83[v80 + 1] = *((_QWORD *)v85 - 1);
                              *((_QWORD *)v85 - 1) = v86;
                              LODWORD(v324) = v84 - 1;
                            }
                            v78 -= 2;
                            --v80;
                            LODWORD(v79) = v79 - 1;
                          }
                          else
                          {
                            sub_1C5FA42B8((uint64_t *)&__dst, *v81);
                          }
                          ++v80;
                        }
                        while (v80 != (_DWORD)v79);
                      }
                      v299 = v78;
                      v87 = v24;
                      if (v24 != v27)
                      {
                        llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)v24, v26, 0);
                        v88 = (_DWORD *)sub_1C5FA4404((uint64_t)v326, &v301);
                        ++*v88;
                        v87 = v27;
                      }
                      v286 = v87;
                      v89 = v324;
                      v90 = (char *)v302;
                      if (((v303 - (_QWORD)v302) & 0xFFFFFFFF0) != 0)
                      {
                        v91 = 0;
                        v92 = -(uint64_t)((unint64_t)(v303 - (_QWORD)v302) >> 4);
                        v281 = 0;
                        do
                        {
                          while (1)
                          {
                            v93 = v294;
                            v94 = v301;
                            v95 = (16 * v91++) | 8;
                            while (sub_1C5FA44C0((uint64_t)v93, *(_QWORD *)&v90[v95 - 8]) || *(_QWORD *)&v90[v95] == v94)
                            {
                              ++v91;
                              v95 += 16;
                              if (v92 + v91 == 1)
                              {
                                if (((v287 | BYTE4(v287)) & 1) == 0)
                                  goto LABEL_155;
                                goto LABEL_150;
                              }
                            }
                            v96 = &v90[v95 - 8];
                            if (v78 >= (unint64_t *)v300)
                            {
                              v97 = v89;
                              v98 = (unint64_t *)__p;
                              v99 = ((char *)v78 - (_BYTE *)__p) >> 4;
                              v100 = v99 + 1;
                              if ((unint64_t)(v99 + 1) >> 60)
                                goto LABEL_435;
                              v101 = v300 - (_BYTE *)__p;
                              if ((v300 - (_BYTE *)__p) >> 3 > v100)
                                v100 = v101 >> 3;
                              if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF0)
                                v100 = 0xFFFFFFFFFFFFFFFLL;
                              v279 = v100;
                              if (v100)
                              {
                                if (v100 >> 60)
                                  goto LABEL_436;
                                v102 = (char *)operator new(16 * v100);
                              }
                              else
                              {
                                v102 = 0;
                              }
                              v103 = &v102[16 * v99];
                              *(_OWORD *)v103 = *(_OWORD *)v96;
                              if (v78 == v98)
                              {
                                v106 = v78;
                                v104 = &v102[16 * v99];
                                v89 = v97;
                                v105 = v279;
                              }
                              else
                              {
                                v104 = &v102[16 * v99];
                                v89 = v97;
                                v105 = v279;
                                do
                                {
                                  *((_OWORD *)v104 - 1) = *((_OWORD *)v78 - 1);
                                  v104 -= 16;
                                  v78 -= 2;
                                }
                                while (v78 != v98);
                                v106 = __p;
                              }
                              v78 = (unint64_t *)(v103 + 16);
                              __p = v104;
                              v299 = (unint64_t *)(v103 + 16);
                              v300 = &v102[16 * v105];
                              if (v106)
                                operator delete(v106);
                            }
                            else
                            {
                              *(_OWORD *)v78 = *(_OWORD *)v96;
                              v78 += 2;
                            }
                            v299 = v78;
                            v90 = (char *)v302;
                            v107 = (_DWORD *)sub_1C5FA4404((uint64_t)v326, (uint64_t *)((char *)v302 + v95));
                            ++*v107;
                            if (v287)
                              break;
                            if (!(v92 + v91))
                              goto LABEL_155;
                          }
                          v108 = v323;
                          v109 = *(_QWORD *)v323;
                          v110 = *((_QWORD *)v320 + v91);
                          v111 = v324;
                          if (v324 >= (unint64_t)HIDWORD(v324))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v323, (uint64_t)v325, v324 + 1, 8);
                            v108 = v323;
                            v111 = v324;
                          }
                          v108[v111] = v110 * v109;
                          LODWORD(v324) = v324 + 1;
                          v281 += *((_QWORD *)v320 + v91);
                        }
                        while (v92 + v91);
                      }
                      else
                      {
                        if (((v287 | HIDWORD(v287)) & 1) == 0)
                          goto LABEL_155;
                        v281 = 0;
                      }
LABEL_150:
                      v112 = (uint64_t *)v320;
                      v113 = *(_QWORD *)v320;
                      v114 = v323;
                      if (v89 >= 2)
                      {
                        v115 = v113 + v281;
                        v116 = v89 - 1;
                        v117 = (char *)v323 + 8;
                        do
                        {
                          *v117++ *= v115;
                          --v116;
                        }
                        while (v116);
                        v113 = *v112;
                      }
                      *v114 *= v113;
LABEL_155:
                      sub_1C49F3440(v294);
                      __dst = v297;
                      v294 = (uint64_t *)v297;
                      v295 = 2;
                      v296 = 0;
                      v118 = v290;
                      if (*(_QWORD *)(v290 + 8))
                      {
                        v119 = (_QWORD *)*((_QWORD *)v26 + 5);
                        if (v119 == (_QWORD *)((char *)v26 + 40))
                        {
LABEL_287:
                          __src[0] = v319;
                          __src[1] = v319;
                          v317 = 2;
                          v318 = 0;
                        }
                        else
                        {
                          if (v119)
                            v120 = v119 - 3;
                          else
                            v120 = 0;
                          v121 = *((unsigned __int8 *)v120 + 16);
                          v122 = v121 - 29;
                          if (v121 != 30)
                          {
                            v123 = 2;
                            switch(v122)
                            {
                              case 1:
                                __break(1u);
                                return;
                              case 2:
                                v123 = (*((_DWORD *)v120 + 5) >> 1) & 0x3FFFFFF;
                                goto LABEL_419;
                              case 3:
                              case 9:
                                v123 = (*((_DWORD *)v120 + 5) & 0x7FFFFFF) - 1;
                                goto LABEL_419;
                              case 4:
                                goto LABEL_164;
                              case 7:
                                v123 = *((_WORD *)v120 + 9) & 1;
                                goto LABEL_419;
                              case 8:
                                v123 = 1;
                                goto LABEL_164;
                              case 10:
                                v123 = *((_DWORD *)v120 + 20) + 1;
LABEL_419:
                                __src[0] = v319;
                                __src[1] = v319;
                                v317 = 2;
                                v318 = 0;
                                if (!v123)
                                  goto LABEL_288;
                                goto LABEL_165;
                              default:
                                goto LABEL_287;
                            }
                          }
                          if ((*((_DWORD *)v120 + 5) & 0x7FFFFFF) == 3)
                            v123 = 2;
                          else
                            v123 = 1;
LABEL_164:
                          __src[0] = v319;
                          __src[1] = v319;
                          v317 = 2;
                          v318 = 0;
LABEL_165:
                          v124 = 0;
                          v125 = v123;
                          v126 = v120 - 4;
                          do
                          {
                            v127 = *((unsigned __int8 *)v120 + 16);
                            if (v127 != 30)
                              __asm { BR              X9 }
                            sub_1C4774094((llvm::SmallPtrSetImplBase *)__src, *v126);
                            ++v124;
                            v126 -= 4;
                          }
                          while (v125 != v124);
                          v118 = v290;
                          if (v294 != __dst)
                            free(v294);
                        }
LABEL_288:
                        v203 = __src[1];
                        v204 = __src[0];
                        if (__src[1] == __src[0])
                        {
                          v294 = (uint64_t *)__dst;
                          if (HIDWORD(v317))
                          {
                            memmove(__dst, __src[1], 8 * HIDWORD(v317));
                            v204 = __src[1];
                            v203 = __src[0];
                          }
                          else
                          {
                            v204 = __src[1];
                          }
                        }
                        else
                        {
                          v294 = (uint64_t *)__src[1];
                          __src[1] = __src[0];
                          v203 = __src[0];
                        }
                        v295 = v317;
                        v296 = v318;
                        v317 = 2;
                        v318 = 0;
                        if (v204 != v203)
                          free(v204);
                        v205 = v328 + (unint64_t)v331;
                        if (v205 > HIDWORD(v331))
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v330, (uint64_t)v332, v205, 16);
                      }
                      if ((_DWORD)v328)
                      {
                        v206 = (uint64_t *)v327;
                        v207 = (uint64_t *)((char *)v327 + 16 * v328);
                        do
                        {
                          v208 = *((int *)v206 + 2);
                          if ((_DWORD)v208)
                          {
                            do
                            {
                              sub_1C5F90FA0(*v206, (uint64_t)v26, v24, 0);
                              --v208;
                            }
                            while (v208);
                          }
                          if (*(_QWORD *)(v118 + 8))
                          {
                            v209 = sub_1C477672C((uint64_t)&__dst, *v206);
                            v210 = v294 == __dst ? (uint64_t *)((char *)&v295 + 4) : &v295;
                            if (v209 == &v294[*(unsigned int *)v210])
                            {
                              v211 = *v206;
                              v212 = v331;
                              if (v331 >= (unint64_t)HIDWORD(v331))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v330, (uint64_t)v332, v331 + 1, 16);
                                v212 = v331;
                              }
                              v213 = (llvm::BasicBlock **)((char *)v330 + 16 * v212);
                              *v213 = v26;
                              v213[1] = (llvm::BasicBlock *)(v211 & 0xFFFFFFFFFFFFFFFBLL);
                              LODWORD(v331) = v331 + 1;
                            }
                          }
                          v206 += 2;
                        }
                        while (v206 != v207);
                      }
                      v284[6] = *(_QWORD *)(v291 + 40);
                      v284[7] = v291 + 24;
                      v214 = *(void **)(v291 + 48);
                      __src[0] = v214;
                      if (v214)
                      {
                        llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v214, 2);
                        v215 = __src[0];
                      }
                      else
                      {
                        v215 = 0;
                      }
                      sub_1C4774EF4((uint64_t)v284, 0, (uint64_t)v215);
                      if (__src[0])
                        llvm::MetadataTracking::untrack((uint64_t)__src, (unsigned __int8 *)__src[0]);
                      if (*((_BYTE *)*v288 + 8) == 15)
                      {
                        llvm::DataLayout::getIntPtrType(*(llvm::DataLayout **)(v118 + 16), *v288);
                        __src[0] = "magicptr";
                        v319[0] = 259;
                        v7 = (llvm::Type **)sub_1C4773E38(v284, 47, (unsigned __int8 *)v288, v216, (uint64_t)__src);
                        v78 = v299;
                      }
                      else
                      {
                        v7 = v288;
                      }
                      v217 = (char *)v78 - (_BYTE *)__p;
                      v218 = (char *)operator new(0x48uLL);
                      *((_DWORD *)v218 + 7) = *((_DWORD *)v218 + 7) & 0x38000000 | 0x40000000;
                      *(_QWORD *)v218 = 0;
                      v219 = **(_QWORD **)*v7 + 1576;
                      *((_DWORD *)v218 + 7) = 0x40000000;
                      *((_QWORD *)v218 + 1) = v219;
                      *((_QWORD *)v218 + 2) = 0;
                      v220 = (unsigned __int8 **)(v218 + 8);
                      v218[24] = 31;
                      v218[25] = 0;
                      *((_WORD *)v218 + 13) = 0;
                      *((_DWORD *)v218 + 16) = 0;
                      *((_OWORD *)v218 + 3) = 0u;
                      *((_OWORD *)v218 + 2) = 0u;
                      llvm::SwitchInst::init((uint64_t)(v218 + 8), (uint64_t)v7, v286, ((v217 >> 3) & 0xFFFFFFFE) + 2);
                      v319[0] = 257;
                      v221 = sub_1C4867F8C(v284, v220, (uint64_t)__src);
                      v222 = *(unsigned __int8 **)(v291 + 48);
                      v292 = v222;
                      if (v222)
                        llvm::MetadataTracking::track((uint64_t)&v292, v222, 2);
                      v223 = v221 + 6;
                      if (&v292 == v221 + 6)
                      {
                        if (v292)
                          llvm::MetadataTracking::untrack((uint64_t)&v292, v292);
                      }
                      else
                      {
                        if (*v223)
                          llvm::MetadataTracking::untrack((uint64_t)(v221 + 6), *v223);
                        v224 = v292;
                        *v223 = v292;
                        if (v224)
                        {
                          llvm::MetadataTracking::retrack((uint64_t)&v292, v224, (uint64_t)(v221 + 6));
                          v292 = 0;
                        }
                      }
                      v226 = __p;
                      v225 = v299;
                      v227 = (llvm::ConstantInt **)__p;
                      if (__p != v299)
                      {
                        do
                        {
                          v228 = *v227;
                          v229 = v227[1];
                          v227 += 2;
                          llvm::SwitchInst::addCase(v221, v228, v229);
                        }
                        while (v227 != (llvm::ConstantInt **)v225);
                      }
                      if (((HIDWORD(v287) | v287) & 1) == 0)
                      {
LABEL_353:
                        sub_1C5FA3F18(v291);
                        v254 = ((unint64_t)*((unsigned int *)v221 + 5) >> 1) & 0x3FFFFFF;
                        if ((_DWORD)v254)
                        {
                          v289 = v7;
                          v255 = 0;
                          v256 = 0;
                          v257 = v254 << 6;
                          do
                          {
                            v258 = *((_DWORD *)v221 + 5);
                            if ((v258 & 0x40000000) != 0)
                              v259 = (unsigned __int8 **)*(v221 - 1);
                            else
                              v259 = &v221[-4 * (v258 & 0x7FFFFFF)];
                            if (v259[v255 / 8 + 4] == (unsigned __int8 *)v24)
                            {
                              if (!v256)
                              {
                                v260 = **(_QWORD ***)v24;
                                __src[0] = "infloop";
                                v319[0] = 259;
                                v261 = *(_QWORD *)(v24 + 56);
                                v256 = operator new();
                                *(_QWORD *)v256 = *v260 + 1600;
                                *(_QWORD *)(v256 + 8) = 0;
                                v262 = *(_DWORD *)(v256 + 20) & 0xC0000000;
                                *(_QWORD *)(v256 + 24) = 0;
                                v263 = v256 + 24;
                                *(_DWORD *)(v256 + 16) = 22;
                                *(_DWORD *)(v256 + 20) = v262;
                                *(_QWORD *)(v256 + 32) = 0;
                                *(_QWORD *)(v256 + 40) = v256 + 40;
                                *(_QWORD *)(v256 + 48) = v256 + 40;
                                *(_QWORD *)(v256 + 56) = 0;
                                if (v261)
                                {
                                  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v261 + 72, (_QWORD *)v256);
                                  v264 = *(_QWORD *)(v261 + 72);
                                  *(_QWORD *)(v256 + 24) = v264;
                                  *(_QWORD *)(v256 + 32) = v261 + 72;
                                  *(_QWORD *)(v264 + 8) = v263;
                                  *(_QWORD *)(v261 + 72) = v263;
                                }
                                llvm::Value::setName((uint64_t ***)v256, (uint64_t)__src);
                                v265 = operator new(0x60uLL);
                                v265[13] = v265[13] & 0x38000000 | 1;
                                *(_QWORD *)v265 = 0;
                                *((_QWORD *)v265 + 1) = 0;
                                *((_QWORD *)v265 + 2) = 0;
                                *((_QWORD *)v265 + 3) = v265 + 8;
                                llvm::BranchInst::BranchInst((llvm::BranchInst *)(v265 + 8), (llvm::BasicBlock *)v256, (llvm::BasicBlock *)v256);
                                if (*(_QWORD *)(v290 + 8))
                                {
                                  v266 = v331;
                                  if (v331 >= (unint64_t)HIDWORD(v331))
                                  {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v330, (uint64_t)v332, v331 + 1, 16);
                                    v266 = v331;
                                  }
                                  v267 = (uint64_t *)((char *)v330 + 16 * v266);
                                  *v267 = v256;
                                  v267[1] = v256 & 0xFFFFFFFFFFFFFFFBLL;
                                  LODWORD(v331) = v331 + 1;
                                }
                              }
                              v268 = *((_DWORD *)v221 + 5);
                              if ((v268 & 0x40000000) != 0)
                                v269 = (unsigned __int8 **)*(v221 - 1);
                              else
                                v269 = &v221[-4 * (v268 & 0x7FFFFFF)];
                              v270 = &v269[v255 / 8];
                              v271 = (uint64_t *)&v269[v255 / 8 + 4];
                              if (*v271)
                              {
                                *(_QWORD *)v270[6] = v270[5];
                                v275 = v270[5];
                                if (v275)
                                  *((_QWORD *)v275 + 2) = v270[6];
                              }
                              *v271 = v256;
                              v272 = (unsigned __int8 *)(v256 + 8);
                              v273 = *(_QWORD *)(v256 + 8);
                              v270[5] = (unsigned __int8 *)v273;
                              v274 = v270 + 5;
                              if (v273)
                                *(_QWORD *)(v273 + 16) = v274;
                              v269[v255 / 8 + 6] = v272;
                              *(_QWORD *)v272 = v271;
                            }
                            v255 += 64;
                          }
                          while (v257 != v255);
                          v7 = v289;
                          v5 = v290;
                          v4 = v283;
                          if (!*(_QWORD *)(v290 + 8))
                            goto LABEL_387;
                          v276 = v331;
                          if (v256)
                          {
                            if (v331 >= HIDWORD(v331))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v330, (uint64_t)v332, v331 + 1, 16);
                              v276 = v331;
                            }
                            v277 = (llvm::BasicBlock **)((char *)v330 + 16 * v276);
                            *v277 = v26;
                            v277[1] = (llvm::BasicBlock *)(v256 & 0xFFFFFFFFFFFFFFFBLL);
                            v276 = v331 + 1;
                            LODWORD(v331) = v331 + 1;
                          }
                        }
                        else
                        {
                          v5 = v290;
                          v4 = v283;
                          if (!*(_QWORD *)(v290 + 8))
                          {
LABEL_387:
                            if (v294 != __dst)
                              free(v294);
                            v6 = v282;
                            if (v320 != v322)
                              free(v320);
                            if (v323 != v325)
                              free(v323);
                            if (v327 != v329)
                              free(v327);
                            if ((v326[0] & 1) == 0)
                              MEMORY[0x1CAA32FB4](v326[1], 8);
                            if (v226)
                              operator delete(v226);
                            if (v302)
                              operator delete(v302);
                            if (v330 != v332)
                              free(v330);
                            v45 = 1;
                            goto LABEL_404;
                          }
                          v276 = v331;
                        }
                        if (v276 >= HIDWORD(v331))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v330, (uint64_t)v332, v276 + 1, 16);
                          v276 = v331;
                        }
                        v278 = (llvm::BasicBlock **)((char *)v330 + 16 * v276);
                        *v278 = v26;
                        v278[1] = (llvm::BasicBlock *)(v24 | 4);
                        LODWORD(v331) = v331 + 1;
                        llvm::DomTreeUpdater::applyUpdates(*(_QWORD *)(v5 + 8), (unint64_t *)v330, v331);
                        goto LABEL_387;
                      }
                      v230 = v7;
                      v231 = (uint64_t *)v323;
                      v232 = v324;
                      v233 = 8 * v324;
                      v234 = (unint64_t *)v323;
                      if (v324 >= 2)
                      {
                        v236 = (unint64_t *)((char *)v323 + 8);
                        v235 = *(_QWORD *)v323;
                        v237 = v233 - 8;
                        v234 = (unint64_t *)v323;
                        v238 = (unint64_t *)((char *)v323 + 8);
                        do
                        {
                          v240 = *v238++;
                          v239 = v240;
                          v241 = v235 >= v240;
                          if (v235 <= v240)
                            v235 = v239;
                          if (!v241)
                            v234 = v236;
                          v236 = v238;
                          v237 -= 8;
                        }
                        while (v237);
                      }
                      if (HIDWORD(*v234))
                      {
                        if (!(_DWORD)v324)
                        {
                          v249 = 0;
                          v246 = &v317;
                          __src[0] = &v317;
                          HIDWORD(__src[1]) = 8;
                          goto LABEL_343;
                        }
                        v242 = 32 - __clz(*v234);
                        v243 = 8 * v324;
                        v244 = v323;
                        do
                        {
                          *v244++ >>= v242;
                          v243 -= 8;
                        }
                        while (v243);
                      }
                      __src[0] = &v317;
                      __src[1] = (void *)0x800000000;
                      if (v232 >= 9)
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__src, (uint64_t)&v317, v232, 4);
                        v245 = LODWORD(__src[1]);
                        v246 = (uint64_t *)__src[0];
LABEL_340:
                        v247 = 4 * v245;
                        do
                        {
                          v248 = *v231++;
                          *(_DWORD *)((char *)v246 + v247) = v248;
                          v247 += 4;
                          v233 -= 8;
                        }
                        while (v233);
                        v249 = (int)__src[1];
                        goto LABEL_343;
                      }
                      if ((_DWORD)v232)
                      {
                        v245 = 0;
                        v246 = &v317;
                        goto LABEL_340;
                      }
                      v249 = 0;
                      v246 = &v317;
LABEL_343:
                      v250 = (v249 + v232);
                      LODWORD(__src[1]) = v249 + v232;
                      v7 = v230;
                      if (!(v249 + (_DWORD)v232))
                        goto LABEL_347;
                      v251 = 4 * v250;
                      v252 = v246;
                      while (!*(_DWORD *)v252)
                      {
                        v252 = (uint64_t *)((char *)v252 + 4);
                        v251 -= 4;
                        if (!v251)
                          goto LABEL_347;
                      }
                      *(_QWORD *)&v305 = **(_QWORD **)v221[5];
                      BranchWeights = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&v305, (uint64_t)v246, v250);
                      if (!BranchWeights)
                      {
LABEL_347:
                        if (!*v223 && (*((_BYTE *)v221 + 23) & 0x20) == 0)
                        {
LABEL_351:
                          if (__src[0] != &v317)
                            free(__src[0]);
                          goto LABEL_353;
                        }
                        BranchWeights = 0;
                      }
                      llvm::Value::setMetadata((llvm::Value *)v221, 2, BranchWeights);
                      goto LABEL_351;
                    }
LABEL_96:
                    if (!v66)
                    {
                      v287 = 0;
                      v320 = v322;
                      v321 = 0x800000000;
                      goto LABEL_103;
                    }
                    sub_1C4765AA4((char *)&v323, (((char *)v299 - (_BYTE *)__p) >> 4) + 1, 1);
                    v320 = v322;
                    v321 = 0x800000000;
                    goto LABEL_98;
                  }
LABEL_95:
                  v66 = 0;
                  if (v44)
                    goto LABEL_76;
                  goto LABEL_96;
                }
              }
            }
          }
        }
LABEL_59:
        v44 = 0;
        goto LABEL_60;
      }
      v37 = 0;
      v38 = 1;
      while (v36 != (_BYTE *)-4096)
      {
        if (v37)
          v39 = 0;
        else
          v39 = v36 == (_BYTE *)-8192;
        if (v39)
          v37 = v35;
        v40 = v34 + v38++;
        v34 = v40 & v33;
        v35 = (_QWORD *)(v32 + 40 * v34);
        v36 = (_BYTE *)*v35;
        if ((_BYTE *)*v35 == v25)
          goto LABEL_43;
      }
      if (v37)
        v199 = v37;
      else
        v199 = v35;
    }
    else
    {
      v199 = 0;
    }
    v35 = sub_1C541AB24(v30 + 2480, (uint64_t)&v320, (uint64_t *)&v320, v199);
    v200 = v320;
    v35[4] = 0;
    v35[3] = 0;
    *v35 = v200;
    v35[1] = v35 + 3;
    v35[2] = 0x100000000;
    goto LABEL_43;
  }
LABEL_430:
  if (v313 != v315)
    free(v313);
  if ((v312[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v312[1], 8);
}

