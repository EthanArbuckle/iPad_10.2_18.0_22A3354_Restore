uint64_t llvm::InductionDescriptor::isInductionPHI(unint64_t a1, const llvm::Loop *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t SCEVIter;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t result;
  uint64_t LoopPredecessor;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v46;
  int32x2_t ****v47;
  int32x2_t ****v48;
  unint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  _QWORD *v53;
  void **v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  int32x2_t ****v59;
  int32x2_t *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  int32x2_t *****v65;
  int32x2_t ****v66;
  int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  BOOL v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  int32x2_t *v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  int v87;
  unint64_t Constant;
  uint64_t v89;
  unint64_t v91;
  _QWORD *v92;
  uint64_t *v93;
  __int128 v94;
  _QWORD *v95;
  void **v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  int32x2_t ****v101;
  int v102;
  int v103;
  void *v105;
  unint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  int32x2_t *v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  int v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  size_t v120;
  void *v121;
  uint64_t v122;
  int32x2_t ****v123;
  __int128 v124;
  __int128 v125;
  void *__src;
  uint64_t v127;
  _QWORD v128[3];

  v128[2] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a1;
  if ((*(unsigned __int8 *)(*(_QWORD *)a1 + 8) | 2) != 0xF)
    return 0;
  SCEVIter = a5;
  if (!a5)
  {
    v13 = *(_QWORD *)(a3 + 104);
    v14 = *(_DWORD *)(a3 + 120);
    if (v14)
    {
      v15 = (v14 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v16 = v13 + 48 * v15;
      v17 = *(_QWORD *)(v16 + 24);
      if (v17 == a1)
      {
LABEL_10:
        if (v16 == v13 + 48 * v14 || (SCEVIter = *(_QWORD *)(v16 + 40)) == 0)
          SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a3, a1);
        goto LABEL_13;
      }
      v18 = 1;
      while (v17 != -4096)
      {
        v19 = v15 + v18++;
        v15 = v19 & (v14 - 1);
        v16 = v13 + 48 * v15;
        v17 = *(_QWORD *)(v16 + 24);
        if (v17 == a1)
          goto LABEL_10;
      }
    }
    v16 = v13 + 48 * v14;
    goto LABEL_10;
  }
LABEL_13:
  result = 0;
  if (!SCEVIter || *(_WORD *)(SCEVIter + 24) != 7)
    return result;
  if (*(const llvm::Loop **)(SCEVIter + 48) != a2)
    return 0;
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
  if (!LoopPredecessor)
    goto LABEL_24;
  v22 = *(_QWORD *)(LoopPredecessor + 40);
  if (v22 == LoopPredecessor + 40)
    goto LABEL_24;
  v23 = v22 - 24;
  if (!v22)
    v23 = 0;
  v24 = *(unsigned __int8 *)(v23 + 16);
  v25 = v24 - 29;
  if (v24 == 30)
  {
    if ((*(_DWORD *)(v23 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_24:
      v26 = 0;
      goto LABEL_29;
    }
  }
  else
  {
    v26 = 0;
    switch(v25)
    {
      case 0:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_29;
      case 1:
        __break(1u);
        goto LABEL_204;
      case 2:
        v27 = (*(_DWORD *)(v23 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 3:
LABEL_204:
        v27 = (*(_DWORD *)(v23 + 20) & 0x7FFFFFF) - 1;
        break;
      case 10:
        v27 = *(_DWORD *)(v23 + 80) + 1;
        break;
      default:
        goto LABEL_24;
    }
    if (v27 != 1)
      goto LABEL_24;
  }
  v26 = LoopPredecessor;
LABEL_29:
  v28 = *(_DWORD *)(a1 + 20);
  v29 = v28 & 0x7FFFFFF;
  if ((v28 & 0x7FFFFFF) != 0)
  {
    v30 = 0;
    while (1)
    {
      v31 = a1 - 32 * v29;
      if ((v28 & 0x40000000) != 0)
        v31 = *(_QWORD *)(a1 - 8);
      if (*(_QWORD *)(v31 + 32 * *(unsigned int *)(a1 + 60) + 8 * v30) == v26)
        break;
      if (v29 == ++v30)
        goto LABEL_35;
    }
  }
  else
  {
LABEL_35:
    LODWORD(v30) = -1;
  }
  if ((v28 & 0x40000000) != 0)
    v32 = *(_QWORD *)(a1 - 8);
  else
    v32 = a1 - 32 * v29;
  v33 = *(_QWORD *)(v32 + 32 * v30);
  result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*(_QWORD *)(SCEVIter + 48));
  if (!result)
    return result;
  v34 = result;
  v35 = *(_QWORD *)(SCEVIter + 40);
  if (v35 == 2)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(SCEVIter + 32) + 8);
  }
  else
  {
    v119 = *(_QWORD *)(SCEVIter + 32);
    v122 = 0x300000000;
    v120 = 8 * v35 - 8;
    v121 = &v123;
    if (v120 >= 0x19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)&v123, (uint64_t)v120 >> 3, 8);
      v118 = v122;
    }
    else
    {
      v118 = 0;
    }
    if (v35 != 1)
    {
      memcpy((char *)v121 + 8 * v118, (const void *)(v119 + 8), v120);
      v118 = v122;
    }
    LODWORD(v122) = v118 + (v120 >> 3);
    v36 = sub_1C618AB20((uint64_t *)a3, (uint64_t)&v121, *(uint64_t ***)(SCEVIter + 48));
    if (v121 != &v123)
      free(v121);
  }
  if (!v36 || *(_WORD *)(v36 + 24))
  {
    if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a3, (const llvm::SCEV *)v36, a2) != 1|| *(_BYTE *)(v6 + 8) != 13)
    {
      return 0;
    }
LABEL_48:
    v38 = *(_DWORD *)(a1 + 20);
    v39 = v38 & 0x7FFFFFF;
    if ((v38 & 0x7FFFFFF) != 0)
    {
      v40 = 0;
      while (1)
      {
        v41 = a1 - 32 * v39;
        if ((v38 & 0x40000000) != 0)
          v41 = *(_QWORD *)(a1 - 8);
        if (*(_QWORD *)(v41 + 32 * *(unsigned int *)(a1 + 60) + 8 * v40) == v34)
          break;
        if (v39 == ++v40)
          goto LABEL_54;
      }
    }
    else
    {
LABEL_54:
      LODWORD(v40) = -1;
    }
    if ((v38 & 0x40000000) != 0)
      v42 = *(_QWORD *)(a1 - 8);
    else
      v42 = a1 - 32 * v39;
    v43 = *(_QWORD *)(v42 + 32 * v40);
    v44 = *(unsigned __int8 *)(v43 + 16);
    if (v44 - 41 < 0x12 && v44 > 0x1B)
      v46 = v43;
    else
      v46 = 0;
    llvm::InductionDescriptor::InductionDescriptor((llvm::ValueHandleBase *)&v121, v33, 1, v36, v46, 0, a6);
    v47 = *(int32x2_t *****)(a4 + 16);
    v48 = v123;
    if (v47 != v123)
    {
      if (v47 != (int32x2_t ****)-4096 && v47 && v47 != (int32x2_t ****)-8192)
      {
        v76 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v76 = *(_QWORD *)(a4 + 8);
        v77 = *(unint64_t **)(a4 + 8);
        if (v77)
        {
          *v77 = *v77 & 7 | v76;
        }
        else
        {
          v78 = *(_QWORD *)(a4 + 16);
          v79 = ***(int32x2_t ****)v78;
          v80 = (unint64_t)v79[303];
          if (v80 <= v76)
          {
            v81 = v79[305].u32[0];
            if (v80 + 16 * v81 > v76)
            {
              v82 = v81 - 1;
              LODWORD(v83) = v82 & ((v78 >> 4) ^ (v78 >> 9));
              v84 = (uint64_t *)(v80 + 16 * v83);
              v85 = *v84;
              if (v78 == *v84)
              {
LABEL_116:
                *v84 = -8192;
                v79[304] = vadd_s32(v79[304], (int32x2_t)0x1FFFFFFFFLL);
                v78 = *(_QWORD *)(a4 + 16);
              }
              else
              {
                v86 = 1;
                while (v85 != -4096)
                {
                  v87 = v83 + v86++;
                  v83 = v87 & v82;
                  v85 = *(_QWORD *)(v80 + 16 * v83);
                  if (v78 == v85)
                  {
                    v84 = (uint64_t *)(v80 + 16 * v83);
                    goto LABEL_116;
                  }
                }
              }
              *(_BYTE *)(v78 + 17) &= ~1u;
            }
          }
        }
        v48 = v123;
      }
      *(_QWORD *)(a4 + 16) = v48;
      if (v48 != (int32x2_t ****)-4096 && v48 != (int32x2_t ****)-8192 && v48 != 0)
      {
        v50 = (unint64_t)v121;
        v51 = (_QWORD *)((unint64_t)v121 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(a4 + 8) = *(_QWORD *)((unint64_t)v121 & 0xFFFFFFFFFFFFFFF8);
        *v51 = a4;
        *(_QWORD *)a4 = v50 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)a4 & 7;
        v52 = *(uint64_t **)(a4 + 8);
        if (v52)
          *v52 = *v52 & 7 | (a4 + 8);
      }
    }
    *(_OWORD *)(a4 + 24) = v124;
    *(_OWORD *)(a4 + 40) = v125;
    v53 = __src;
    if (&v121 == (void **)a4)
    {
LABEL_82:
      if (v53 != v128)
        free(v53);
      if (!v123 || v123 == (int32x2_t ****)-8192 || v123 == (int32x2_t ****)-4096)
        return 1;
      v57 = (unint64_t)v121 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v121 & 0xFFFFFFFFFFFFFFF8) = v122;
      v58 = (_QWORD *)v122;
      if (!v122)
      {
        v59 = v123;
        v60 = ***v123;
        v61 = (unint64_t)v60[303];
        if (v61 > v57)
          return 1;
        v62 = v60[305].u32[0];
        if (v61 + 16 * v62 <= v57)
          return 1;
        v63 = v62 - 1;
        LODWORD(v64) = v63 & ((v123 >> 4) ^ (v123 >> 9));
        v65 = (int32x2_t *****)(v61 + 16 * v64);
        v66 = *v65;
        if (v123 != *v65)
        {
          v67 = 1;
          while (v66 != (int32x2_t ****)-4096)
          {
            v68 = v64 + v67++;
            v64 = v68 & v63;
            v66 = *(int32x2_t *****)(v61 + 16 * v64);
            if (v123 == v66)
            {
LABEL_94:
              v65 = (int32x2_t *****)(v61 + 16 * v64);
              goto LABEL_95;
            }
          }
          goto LABEL_96;
        }
        goto LABEL_95;
      }
LABEL_155:
      *v58 = *v58 & 7 | v57;
      return 1;
    }
    if (__src != v128)
    {
      v105 = *(void **)(a4 + 56);
      if (v105 != (void *)(a4 + 72))
      {
        free(v105);
        v53 = __src;
      }
      *(_QWORD *)(a4 + 56) = v53;
      *(_QWORD *)(a4 + 64) = v127;
      __src = v128;
      HIDWORD(v127) = 0;
      goto LABEL_81;
    }
    v54 = (void **)(a4 + 56);
    v55 = v127;
    v56 = *(unsigned int *)(a4 + 64);
    if (v56 >= v127)
    {
      if ((_DWORD)v127)
        memmove(*v54, __src, 8 * v127);
      goto LABEL_80;
    }
    if (*(_DWORD *)(a4 + 68) < v127)
    {
      *(_DWORD *)(a4 + 64) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 56, a4 + 72, v55, 8);
    }
    else if ((_DWORD)v56)
    {
      memmove(*v54, __src, 8 * v56);
LABEL_78:
      if (v56 != v127)
        memcpy((char *)*v54 + 8 * v56, (char *)__src + 8 * v56, 8 * v127 - 8 * v56);
LABEL_80:
      *(_DWORD *)(a4 + 64) = v55;
LABEL_81:
      LODWORD(v127) = 0;
      v53 = __src;
      goto LABEL_82;
    }
    v56 = 0;
    goto LABEL_78;
  }
  if (*(_BYTE *)(v6 + 8) == 13)
    goto LABEL_48;
  if (*(_QWORD *)(v6 + 24))
    v37 = **(_QWORD **)(v6 + 16);
  else
    v37 = **(_QWORD **)v6 + 1912;
  v69 = *(unsigned __int8 *)(v37 + 8);
  if (v69 > 0x11)
    goto LABEL_162;
  if (((1 << v69) & 0xAC7F) != 0)
    goto LABEL_100;
  if (((1 << v69) & 0x30000) == 0)
  {
LABEL_162:
    if ((v69 & 0xFE) != 0x12 && v69 != 21)
      return 0;
  }
  result = llvm::Type::isSizedDerivedType(v37, 0);
  if ((_DWORD)result)
  {
LABEL_100:
    v70 = *(_QWORD *)(v36 + 32);
    v71 = sub_1C4E3D148(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40) + 272, v37);
    if (v71)
      v73 = v72 == 1;
    else
      v73 = 1;
    if (v73)
      return 0;
    v74 = *(_DWORD *)(v70 + 32);
    v75 = v74 > 0x40 ? **(_QWORD **)(v70 + 24) : (uint64_t)(*(_QWORD *)(v70 + 24) << -(char)v74) >> -(char)v74;
    if (v75 % v71)
      return 0;
    Constant = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)a3, *(llvm::Type **)v70, v75 / v71, 1);
    v122 = 0;
    v123 = 0;
    v121 = (void *)6;
    if (v33)
    {
      v123 = (int32x2_t ****)v33;
      if ((v33 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v121);
        v33 = (uint64_t)v123;
      }
    }
    LODWORD(v124) = 2;
    *((_QWORD *)&v124 + 1) = Constant;
    *(_QWORD *)&v125 = 0;
    *((_QWORD *)&v125 + 1) = v37;
    __src = v128;
    v127 = 0x200000000;
    v89 = *(_QWORD *)(a4 + 16);
    if (v89 != v33)
    {
      if (v89 != -4096 && v89 && v89 != -8192)
      {
        v106 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v106 = *(_QWORD *)(a4 + 8);
        v107 = *(unint64_t **)(a4 + 8);
        if (v107)
        {
          *v107 = *v107 & 7 | v106;
        }
        else
        {
          v108 = *(_QWORD *)(a4 + 16);
          v109 = ***(int32x2_t ****)v108;
          v110 = (unint64_t)v109[303];
          if (v110 <= v106)
          {
            v111 = v109[305].u32[0];
            if (v110 + 16 * v111 > v106)
            {
              v112 = v111 - 1;
              LODWORD(v113) = v112 & ((v108 >> 4) ^ (v108 >> 9));
              v114 = (uint64_t *)(v110 + 16 * v113);
              v115 = *v114;
              if (v108 == *v114)
              {
LABEL_181:
                *v114 = -8192;
                v109[304] = vadd_s32(v109[304], (int32x2_t)0x1FFFFFFFFLL);
                v108 = *(_QWORD *)(a4 + 16);
              }
              else
              {
                v116 = 1;
                while (v115 != -4096)
                {
                  v117 = v113 + v116++;
                  v113 = v117 & v112;
                  v115 = *(_QWORD *)(v110 + 16 * v113);
                  if (v108 == v115)
                  {
                    v114 = (uint64_t *)(v110 + 16 * v113);
                    goto LABEL_181;
                  }
                }
              }
              *(_BYTE *)(v108 + 17) &= ~1u;
            }
          }
        }
        v33 = (uint64_t)v123;
      }
      *(_QWORD *)(a4 + 16) = v33;
      if (v33 != -4096 && v33 != -8192 && v33 != 0)
      {
        v91 = (unint64_t)v121;
        v92 = (_QWORD *)((unint64_t)v121 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(a4 + 8) = *(_QWORD *)((unint64_t)v121 & 0xFFFFFFFFFFFFFFF8);
        *v92 = a4;
        *(_QWORD *)a4 = v91 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)a4 & 7;
        v93 = *(uint64_t **)(a4 + 8);
        if (v93)
          *v93 = *v93 & 7 | (a4 + 8);
      }
    }
    v94 = v125;
    *(_OWORD *)(a4 + 24) = v124;
    *(_OWORD *)(a4 + 40) = v94;
    v95 = __src;
    if (&v121 == (void **)a4)
    {
LABEL_142:
      if (v95 != v128)
        free(v95);
      if (!v123 || v123 == (int32x2_t ****)-8192 || v123 == (int32x2_t ****)-4096)
        return 1;
      v57 = (unint64_t)v121 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)((unint64_t)v121 & 0xFFFFFFFFFFFFFFF8) = v122;
      v58 = (_QWORD *)v122;
      if (!v122)
      {
        v59 = v123;
        v60 = ***v123;
        v61 = (unint64_t)v60[303];
        if (v61 > v57)
          return 1;
        v99 = v60[305].u32[0];
        if (v61 + 16 * v99 <= v57)
          return 1;
        v100 = v99 - 1;
        LODWORD(v64) = v100 & ((v123 >> 4) ^ (v123 >> 9));
        v65 = (int32x2_t *****)(v61 + 16 * v64);
        v101 = *v65;
        if (v123 != *v65)
        {
          v102 = 1;
          while (v101 != (int32x2_t ****)-4096)
          {
            v103 = v64 + v102++;
            v64 = v103 & v100;
            v101 = *(int32x2_t *****)(v61 + 16 * v64);
            if (v123 == v101)
              goto LABEL_94;
          }
          goto LABEL_96;
        }
LABEL_95:
        *v65 = (int32x2_t ****)-8192;
        v60[304] = vadd_s32(v60[304], (int32x2_t)0x1FFFFFFFFLL);
        v59 = v123;
LABEL_96:
        *((_BYTE *)v59 + 17) &= ~1u;
        return 1;
      }
      goto LABEL_155;
    }
    if (__src != v128)
    {
      if (*(_QWORD *)(a4 + 56) != a4 + 72)
      {
        free(*(void **)(a4 + 56));
        v95 = __src;
      }
      *(_QWORD *)(a4 + 56) = v95;
      *(_QWORD *)(a4 + 64) = v127;
      __src = v128;
      HIDWORD(v127) = 0;
      goto LABEL_141;
    }
    v96 = (void **)(a4 + 56);
    v97 = v127;
    v98 = *(unsigned int *)(a4 + 64);
    if (v98 >= v127)
    {
      if ((_DWORD)v127)
        memmove(*v96, v128, 8 * v127);
      goto LABEL_140;
    }
    if (*(_DWORD *)(a4 + 68) < v127)
    {
      *(_DWORD *)(a4 + 64) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4 + 56, a4 + 72, v97, 8);
    }
    else if ((_DWORD)v98)
    {
      memmove(*v96, v128, 8 * v98);
LABEL_138:
      if (v98 != v127)
        memcpy((char *)*v96 + 8 * v98, (char *)__src + 8 * v98, 8 * v127 - 8 * v98);
LABEL_140:
      *(_DWORD *)(a4 + 64) = v97;
LABEL_141:
      LODWORD(v127) = 0;
      v95 = __src;
      goto LABEL_142;
    }
    v98 = 0;
    goto LABEL_138;
  }
  return result;
}

uint64_t sub_1C4E3D148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  char v6;

  sub_1C4768AD0(a1, a2);
  v5 = (unint64_t)(v4 + 7) >> 3;
  llvm::DataLayout::getAlignment(a1, a2);
  return ((1 << v6) + v5 - 1) & -(1 << v6);
}

llvm::SmallPtrSetImplBase *sub_1C4E3D1B8(llvm::SmallPtrSetImplBase *this, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v6;
  llvm::SmallPtrSetImplBase *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;

  if (a2 != a4)
  {
    v6 = a2;
    v7 = this;
    do
    {
      v9 = *v6;
      v8 = (unint64_t *)(v6 + 1);
      this = (llvm::SmallPtrSetImplBase *)sub_1C4774094(v7, v9);
      while (v8 != (unint64_t *)a3)
      {
        v10 = *v8++;
        if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v6 = (uint64_t *)(v8 - 1);
          goto LABEL_8;
        }
      }
      v6 = a3;
LABEL_8:
      ;
    }
    while (v6 != a4);
  }
  return this;
}

_QWORD *sub_1C4E3D224(int32x2_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int32x2_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  __int32 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v2 = a1[2].u32[0];
  if ((_DWORD)v2)
  {
    v3 = *a1;
    LODWORD(v4) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v2 - 1);
    v5 = (uint64_t *)(*(_QWORD *)a1 + 16 * v4);
    v6 = *v5;
    if (*a2 == *v5)
    {
LABEL_7:
      *v5 = -8192;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v7 = 1;
      while (v6 != -4096)
      {
        v8 = v4 + v7++;
        v4 = v8 & (v2 - 1);
        v6 = *(_QWORD *)(*(_QWORD *)&v3 + 16 * v4);
        if (*a2 == v6)
        {
          v5 = (uint64_t *)(*(_QWORD *)&v3 + 16 * v4);
          goto LABEL_7;
        }
      }
    }
  }
  v9 = (_QWORD *)a1[4];
  v10 = a2 + 2;
  if (a2 + 2 == v9)
  {
    a1[4] = (int32x2_t)a2;
  }
  else
  {
    v11 = 0;
    v12 = ((uint64_t)a2 - *(_QWORD *)&a1[3]) >> 4;
    do
    {
      v13 = &v10[v11];
      *((_OWORD *)v13 - 1) = *(_OWORD *)&v10[v11];
      v11 += 2;
    }
    while (v13 + 2 != v9);
    a1[4] = (int32x2_t)&a2[v11];
    if (v11 * 8)
    {
      v14 = a1[1].i32[0];
      v15 = *(_QWORD *)a1 + 16 * v2;
      if (v14)
        v16 = 0;
      else
        v16 = v2;
      if (v14)
        v17 = (uint64_t)*a1;
      else
        v17 = *(_QWORD *)a1 + 16 * v2;
      if ((_DWORD)v2 && v14)
      {
        v18 = 16 * v2;
        v17 = (uint64_t)*a1;
        while ((*(_QWORD *)v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v17 += 16;
          v18 -= 16;
          if (!v18)
          {
            v16 = v2;
            v17 = *(_QWORD *)a1 + 16 * v2;
            goto LABEL_27;
          }
        }
        v16 = v2;
      }
LABEL_27:
      v20 = *(_QWORD *)a1 + 16 * v16;
LABEL_28:
      while (v17 != v20)
      {
        v21 = *(unsigned int *)(v17 + 8);
        if (v12 < v21)
          *(_DWORD *)(v17 + 8) = v21 - 1;
        v22 = v17 + 16;
        v17 = v15;
        if (v22 != v15)
        {
          v17 = v22;
          while ((*(_QWORD *)v17 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v17 += 16;
            if (v17 == v15)
            {
              v17 = v15;
              goto LABEL_28;
            }
          }
        }
      }
    }
  }
  return a2;
}

uint64_t sub_1C4E3D39C(llvm::ValueHandleBase *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int32x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;

  v3 = *((_QWORD *)a1 + 2);
  if (v3 != a2)
  {
    if (v3 && v3 != -8192 && v3 != -4096)
    {
      v5 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v5 = *((_QWORD *)a1 + 1);
      v6 = (unint64_t *)*((_QWORD *)a1 + 1);
      if (v6)
      {
        *v6 = *v6 & 7 | v5;
      }
      else
      {
        v7 = *((_QWORD *)a1 + 2);
        v8 = ***(int32x2_t ****)v7;
        v9 = (unint64_t)v8[303];
        if (v9 <= v5)
        {
          v10 = v8[305].u32[0];
          if (v9 + 16 * v10 > v5)
          {
            v11 = v10 - 1;
            LODWORD(v12) = v11 & ((v7 >> 4) ^ (v7 >> 9));
            v13 = (uint64_t *)(v9 + 16 * v12);
            v14 = *v13;
            if (v7 == *v13)
            {
LABEL_18:
              *v13 = -8192;
              v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
              v7 = *((_QWORD *)a1 + 2);
            }
            else
            {
              v15 = 1;
              while (v14 != -4096)
              {
                v16 = v12 + v15++;
                v12 = v16 & v11;
                v14 = *(_QWORD *)(v9 + 16 * v12);
                if (v7 == v14)
                {
                  v13 = (uint64_t *)(v9 + 16 * v12);
                  goto LABEL_18;
                }
              }
            }
            *(_BYTE *)(v7 + 17) &= ~1u;
          }
        }
      }
    }
    *((_QWORD *)a1 + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2)
      llvm::ValueHandleBase::AddToUseList(a1);
  }
  return a2;
}

uint64_t sub_1C4E3D4C8(int **a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(a2 + 8);
  if (!v2 || *(_QWORD *)(v2 + 8))
    return 0;
  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 < 0x1C || v3 - 81 > 1)
    return 0;
  **a1 = *(_WORD *)(a2 + 18) & 0x3F;
  return 1;
}

BOOL sub_1C4E3D50C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 85)
  {
    if (v2 == 84)
    {
      v3 = *(_QWORD *)(a2 - 32);
      if (v3)
      {
        if (!*(_BYTE *)(v3 + 16) && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a2 + 72) && (*(_BYTE *)(v3 + 33) & 0x20) != 0)
          return *(_DWORD *)(v3 + 36) == 306;
      }
    }
    return 0;
  }
  result = 0;
  v6 = *(_QWORD *)(a2 - 96);
  if (v6 && *(_BYTE *)(v6 + 16) == 81)
  {
    v7 = *(_QWORD *)(a2 - 64);
    v8 = *(_QWORD *)(a2 - 32);
    v9 = *(_QWORD *)(v6 - 64);
    v10 = *(_QWORD *)(v6 - 32);
    v11 = v7 == v9 && v8 == v10;
    if (v11 || (v7 == v10 ? (v12 = v8 == v9) : (v12 = 0), v12))
    {
      v13 = *(_WORD *)(v6 + 18) & 0x3F;
      if (v7 != v9)
        LODWORD(v13) = dword_1C85F3370[v13];
      return (v13 & 0xFFFE) == 36;
    }
    return 0;
  }
  return result;
}

BOOL sub_1C4E3D5C8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 85)
  {
    if (v2 == 84)
    {
      v3 = *(_QWORD *)(a2 - 32);
      if (v3)
      {
        if (!*(_BYTE *)(v3 + 16) && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a2 + 72) && (*(_BYTE *)(v3 + 33) & 0x20) != 0)
          return *(_DWORD *)(v3 + 36) == 305;
      }
    }
    return 0;
  }
  result = 0;
  v6 = *(_QWORD *)(a2 - 96);
  if (v6 && *(_BYTE *)(v6 + 16) == 81)
  {
    v7 = *(_QWORD *)(a2 - 64);
    v8 = *(_QWORD *)(a2 - 32);
    v9 = *(_QWORD *)(v6 - 64);
    v10 = *(_QWORD *)(v6 - 32);
    v11 = v7 == v9 && v8 == v10;
    if (v11 || (v7 == v10 ? (v12 = v8 == v9) : (v12 = 0), v12))
    {
      v13 = *(_WORD *)(v6 + 18) & 0x3F;
      if (v7 != v9)
        LODWORD(v13) = dword_1C85F3370[v13];
      return (v13 & 0xFFFE) == 34;
    }
    return 0;
  }
  return result;
}

BOOL sub_1C4E3D684(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 85)
  {
    if (v2 == 84)
    {
      v3 = *(_QWORD *)(a2 - 32);
      if (v3)
      {
        if (!*(_BYTE *)(v3 + 16) && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a2 + 72) && (*(_BYTE *)(v3 + 33) & 0x20) != 0)
          return *(_DWORD *)(v3 + 36) == 274;
      }
    }
    return 0;
  }
  result = 0;
  v6 = *(_QWORD *)(a2 - 96);
  if (v6 && *(_BYTE *)(v6 + 16) == 81)
  {
    v7 = *(_QWORD *)(a2 - 64);
    v8 = *(_QWORD *)(a2 - 32);
    v9 = *(_QWORD *)(v6 - 64);
    v10 = *(_QWORD *)(v6 - 32);
    v11 = v7 == v9 && v8 == v10;
    if (v11 || (v7 == v10 ? (v12 = v8 == v9) : (v12 = 0), v12))
    {
      v13 = *(_WORD *)(v6 + 18) & 0x3F;
      if (v7 != v9)
        LODWORD(v13) = dword_1C85F3370[v13];
      return (v13 & 0xFFFE) == 38;
    }
    return 0;
  }
  return result;
}

BOOL sub_1C4E3D740(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 85)
  {
    if (v2 == 84)
    {
      v3 = *(_QWORD *)(a2 - 32);
      if (v3)
      {
        if (!*(_BYTE *)(v3 + 16) && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a2 + 72) && (*(_BYTE *)(v3 + 33) & 0x20) != 0)
          return *(_DWORD *)(v3 + 36) == 275;
      }
    }
    return 0;
  }
  result = 0;
  v6 = *(_QWORD *)(a2 - 96);
  if (v6 && *(_BYTE *)(v6 + 16) == 81)
  {
    v7 = *(_QWORD *)(a2 - 64);
    v8 = *(_QWORD *)(a2 - 32);
    v9 = *(_QWORD *)(v6 - 64);
    v10 = *(_QWORD *)(v6 - 32);
    v11 = v7 == v9 && v8 == v10;
    if (v11 || (v7 == v10 ? (v12 = v8 == v9) : (v12 = 0), v12))
    {
      v13 = *(_WORD *)(v6 + 18) & 0x3F;
      if (v7 != v9)
        LODWORD(v13) = dword_1C85F3370[v13];
      return (v13 & 0xFFFE) == 40;
    }
    return 0;
  }
  return result;
}

_OWORD *sub_1C4E3D7FC(void **a1, _OWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  _OWORD *v12;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 3 > v5)
    v5 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 60)
      sub_1C4764EE4();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * v4];
  *(_OWORD *)v11 = *a2;
  v12 = v11 + 16;
  if (v2 != v3)
  {
    do
    {
      *((_OWORD *)v11 - 1) = *((_OWORD *)v2 - 1);
      v11 -= 16;
      v2 -= 16;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[16 * v9];
  if (v2)
    operator delete(v2);
  return v12;
}

_QWORD *llvm::GPUFunctionAnalysisResult::analyzeLoaderState(llvm::GPUFunctionAnalysisResult *this)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void (**v18)(void);
  uint64_t (**v19)(void);
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  void *v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD v29[2];
  __int16 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)this + 40);
  v26 = "agx.loader.state";
  v30 = 259;
  result = (_QWORD *)llvm::Module::getNamedMetadata(v2, (uint64_t)&v26);
  v21 = (uint64_t)result;
  if (result)
  {
    v20 = *(unsigned int *)(result[6] + 8);
    if ((_DWORD)v20)
    {
      for (i = 0; i != v20; ++i)
      {
        v5 = *(_QWORD *)(**(_QWORD **)(v21 + 48) + 8 * i);
        v6 = *(_QWORD *)(*(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8)) + 128);
        v7 = *(_QWORD *)this;
        v22[0] = &off_1E8137288;
        v22[1] = this;
        v23 = v22;
        v24[0] = &off_1E8137288;
        v25 = v24;
        v24[1] = this;
        v8 = *(_QWORD *)(v6 + 8);
        if (v8)
        {
          while (2)
          {
            v9 = *(_QWORD *)(v8 + 24);
            v26 = v29;
            v28 = 16;
            v29[0] = v9;
            v10 = 1;
            do
            {
              v11 = *((_QWORD *)v26 + --v10);
              v27 = v10;
              v12 = *(unsigned __int8 *)(v11 + 16);
              if (v12 > 0xA || ((1 << v12) & 0x728) == 0)
              {
                if (v12 >= 0x1C && *(_QWORD *)(*(_QWORD *)(v11 + 40) + 56) == v7)
                {
                  if (!v25)
                    sub_1C485C2F0();
                  (*(void (**)(_QWORD *))(*v25 + 48))(v25);
                  if (v26 != v29)
                    free(v26);
                  goto LABEL_36;
                }
              }
              else
              {
                for (j = *(_QWORD *)(v11 + 8); j; j = *(_QWORD *)(j + 8))
                {
                  v15 = *(_QWORD *)(j + 24);
                  if (*(_BYTE *)(v15 + 16) != 84
                    || (v16 = *(_QWORD *)(v15 - 32)) == 0
                    || *(_BYTE *)(v16 + 16)
                    || *(_QWORD *)(v16 + 24) != *(_QWORD *)(v15 + 72)
                    || (*(_BYTE *)(v16 + 33) & 0x20) == 0
                    || (v17 = *(_DWORD *)(v16 + 36), (v17 - 1282) >= 0x190)
                    && (v17 - 2824) > 0xB
                    || *(_QWORD *)(v15 + 8))
                  {
                    if (v10 >= v28)
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v26, (uint64_t)v29, v10 + 1, 8);
                      v10 = v27;
                    }
                    *((_QWORD *)v26 + v10) = v15;
                    v10 = ++v27;
                  }
                }
              }
            }
            while (v10);
            if (v26 != v29)
              free(v26);
            v8 = *(_QWORD *)(v8 + 8);
            if (v8)
              continue;
            break;
          }
        }
LABEL_36:
        if (v25 == v24)
        {
          v18 = (void (**)(void))(v24[0] + 32);
        }
        else
        {
          if (!v25)
            goto LABEL_41;
          v18 = (void (**)(void))(*v25 + 40);
        }
        (*v18)();
LABEL_41:
        result = v23;
        if (v23 == v22)
        {
          v19 = (uint64_t (**)(void))(v22[0] + 32);
          goto LABEL_45;
        }
        if (v23)
        {
          v19 = (uint64_t (**)(void))(*v23 + 40);
LABEL_45:
          result = (_QWORD *)(*v19)();
        }
      }
    }
  }
  return result;
}

_QWORD *llvm::GPUFunctionAnalysisResult::analyze(llvm::GPUFunctionAnalysisResult *this)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t j;
  uint64_t v7;

  v2 = *(_QWORD *)this + 72;
  for (i = *(_QWORD *)(*(_QWORD *)this + 80); i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = i - 24;
    if (!i)
      v4 = 0;
    v5 = v4 + 40;
    for (j = *(_QWORD *)(v4 + 48); j != v5; j = *(_QWORD *)(j + 8))
    {
      if (j)
        v7 = j - 24;
      else
        v7 = 0;
      if (sub_1C5EA7E14(v7))
        *((_BYTE *)this + 8) = 1;
    }
  }
  return llvm::GPUFunctionAnalysisResult::analyzeLoaderState(this);
}

BOOL llvm::GPUFunctionAnalysisResult::operator==(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
      && *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9);
}

uint64_t llvm::GPUFunctionInfoCache::get(llvm::GPUFunctionInfoCache *this, const llvm::Function *a2)
{
  llvm::GPUFunctionAnalysisResult *v4;
  uint64_t v5;
  uint64_t v6;
  const llvm::Function *v8;
  llvm::GPUFunctionAnalysisResult *v9;
  _QWORD v10[3];

  v8 = a2;
  v10[0] = 0;
  if (sub_1C4DA97DC((uint64_t *)this, &v8, v10)
    && v10[0] != *(_QWORD *)this + 16 * *((unsigned int *)this + 4))
  {
    return *(_QWORD *)(v10[0] + 8);
  }
  v4 = (llvm::GPUFunctionAnalysisResult *)operator new();
  *(_QWORD *)v4 = a2;
  *((_WORD *)v4 + 4) = 0;
  llvm::GPUFunctionAnalysisResult::analyze(v4);
  v8 = a2;
  v9 = v4;
  sub_1C4E3E3D8((uint64_t)this, &v8, (uint64_t *)&v9, (uint64_t)v10);
  v5 = (uint64_t)v9;
  v6 = *(_QWORD *)(v10[0] + 8);
  v9 = 0;
  if (v5)
    MEMORY[0x1CAA32FC0](v5, 0x1060C4076547154);
  return v6;
}

llvm::raw_ostream *llvm::GPUFunctionInfoCache::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((unsigned int *)this + 4);
  v4 = *(_QWORD *)this + 16 * v3;
  if (*((_DWORD *)this + 2))
  {
    if ((_DWORD)v3)
    {
      v5 = 16 * v3;
      v6 = *(_QWORD *)this;
      while ((*(_QWORD *)v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 16;
        v5 -= 16;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = *(_QWORD *)this;
    }
  }
  else
  {
LABEL_6:
    v6 = *(_QWORD *)this + 16 * v3;
  }
  v7 = *(_QWORD *)this + 16 * v3;
LABEL_9:
  while (v6 != v7)
  {
    this = llvm::GPUFunctionAnalysisResult::print(*(llvm::Value ***)(v6 + 8), a2);
    v8 = v6 + 16;
    v6 = v4;
    if (v8 != v4)
    {
      v6 = v8;
      while ((*(_QWORD *)v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 16;
        if (v6 == v4)
        {
          v6 = v4;
          goto LABEL_9;
        }
      }
    }
  }
  return this;
}

uint64_t *llvm::GPUFunctionInfoCache::verifyAnalysis(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;

  v1 = *((unsigned int *)this + 4);
  v2 = *this + 16 * v1;
  if (*((_DWORD *)this + 2))
  {
    if ((_DWORD)v1)
    {
      v3 = 16 * v1;
      v4 = *this;
      while ((*(_QWORD *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 16;
        v3 -= 16;
        if (!v3)
          goto LABEL_6;
      }
    }
    else
    {
      v4 = *this;
    }
  }
  else
  {
LABEL_6:
    v4 = *this + 16 * v1;
  }
  v5 = *this + 16 * v1;
LABEL_9:
  while (v4 != v5)
  {
    v7 = **(_QWORD **)(v4 + 8);
    v8 = 0;
    this = llvm::GPUFunctionAnalysisResult::analyze((llvm::GPUFunctionAnalysisResult *)&v7);
    v6 = v4 + 16;
    v4 = v2;
    if (v6 != v2)
    {
      v4 = v6;
      while ((*(_QWORD *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 16;
        if (v4 == v2)
        {
          v4 = v2;
          goto LABEL_9;
        }
      }
    }
  }
  return this;
}

_DWORD *llvm::GPUFunctionInfoCache::releaseMemory(_DWORD *this)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;

  v1 = this;
  if (*((_QWORD *)this + 1))
  {
    v2 = this[4];
    if (v2 > 4 * this[2] && v2 >= 0x41)
    {
      return sub_1C4E3E6A8((uint64_t)this);
    }
    else
    {
      if ((_DWORD)v2)
      {
        v3 = 16 * v2;
        v4 = (_DWORD **)(*(_QWORD *)this + 8);
        do
        {
          v5 = (uint64_t)*(v4 - 1);
          if (v5 != -4096)
          {
            if (v5 != -8192)
            {
              this = *v4;
              *v4 = 0;
              if (this)
                this = (_DWORD *)MEMORY[0x1CAA32FC0](this, 0x1060C4076547154);
            }
            *(v4 - 1) = (_DWORD *)-4096;
          }
          v4 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)v1 + 1) = 0;
    }
  }
  return this;
}

uint64_t llvm::GPUFunctionInfoCache::invalidate(llvm::GPUFunctionInfoCache *this, llvm::Function *a2)
{
  llvm::Function *v3;

  v3 = a2;
  return sub_1C4E3DFD8((uint64_t)this, &v3);
}

uint64_t sub_1C4E3DFD8(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;

  v7 = 0;
  result = sub_1C4DA97DC((uint64_t *)a1, a2, &v7);
  if ((_DWORD)result)
  {
    v6 = result;
    v4 = v7;
    v5 = v7[1];
    v7[1] = 0;
    if (v5)
      MEMORY[0x1CAA32FC0](v5, 0x1060C4076547154);
    *v4 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    return v6;
  }
  return result;
}

void llvm::initializeGPUFunctionAnalysisWrapperPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EFBE8);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E3E0BC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EFBE8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E3E0BC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "GPU Function Analysis";
  *(_QWORD *)(v2 + 8) = 21;
  *(_QWORD *)(v2 + 16) = "gpu-function-analysis";
  *(_QWORD *)(v2 + 24) = 21;
  *(_QWORD *)(v2 + 32) = &llvm::GPUFunctionAnalysisWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::GPUFunctionAnalysisWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::GPUFunctionAnalysisWrapperPass::runOnFunction(llvm::GPUFunctionAnalysisWrapperPass *this, Function *a2)
{
  return 0;
}

uint64_t *llvm::GPUFunctionAnalysisWrapperPass::verifyAnalysis(llvm::GPUFunctionAnalysisWrapperPass *this)
{
  return llvm::GPUFunctionInfoCache::verifyAnalysis((uint64_t *)this + 4);
}

llvm::raw_ostream *llvm::GPUFunctionAnalysisWrapperPass::print(llvm::GPUFunctionAnalysisWrapperPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  return llvm::GPUFunctionInfoCache::print((llvm::GPUFunctionAnalysisWrapperPass *)((char *)this + 32), a2);
}

_DWORD *llvm::GPUFunctionAnalysisWrapperPass::releaseMemory(llvm::GPUFunctionAnalysisWrapperPass *this)
{
  return llvm::GPUFunctionInfoCache::releaseMemory((_DWORD *)this + 8);
}

void sub_1C4E3E16C(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E81371E8;
  sub_1C4E3E2EC((uint64_t)a1 + 32);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 4), 8);
  llvm::Pass::~Pass(a1);
}

void sub_1C4E3E1A8(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E81371E8;
  sub_1C4E3E2EC((uint64_t)a1 + 32);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 4), 8);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4E3E1F8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t llvm::callDefaultCtor<llvm::GPUFunctionAnalysisWrapperPass>()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &llvm::GPUFunctionAnalysisWrapperPass::ID;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E81371E8;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 48) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1EF8EFBE8);
  if (v2 != -1)
  {
    v6[0] = sub_1C4E3E0BC;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1EF8EFBE8, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

uint64_t sub_1C4E3E2EC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (uint64_t *)(*(_QWORD *)result + 8);
    do
    {
      v4 = *(v3 - 1);
      if (v4 != -4096 && v4 != -8192)
      {
        result = *v3;
        *v3 = 0;
        if (result)
          result = MEMORY[0x1CAA32FC0](result, 0x1060C4076547154);
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

void sub_1C4E3E364()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4E3E378(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8137288;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4E3E3AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8137288;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4E3E3C8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 9) = 1;
  return result;
}

uint64_t sub_1C4E3E3D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = 0;
  result = sub_1C4DA97DC((uint64_t *)a1, a2, &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C4E3E46C(a1, (uint64_t)a2, a2, v13);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v10 = *a3;
    *a3 = 0;
    *(_QWORD *)(result + 8) = v10;
    v11 = 1;
  }
  v12 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v12;
  *(_BYTE *)(a4 + 16) = v11;
  return result;
}

_QWORD *sub_1C4E3E46C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4E3E51C(a1, v7);
  v9 = 0;
  sub_1C4DA97DC((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4E3E51C(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4E3E5D4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4E3E5D4(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      sub_1C4DA97DC((uint64_t *)v5, a2, &v11);
      v9 = v11;
      *v11 = *a2;
      v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
        result = MEMORY[0x1CAA32FC0](result, 0x1060C4076547154);
    }
    a2 += 2;
  }
  return result;
}

_DWORD *sub_1C4E3E6A8(uint64_t a1)
{
  int v2;
  _DWORD *result;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_DWORD *)(a1 + 8);
  result = (_DWORD *)sub_1C4E3E2EC(a1);
  if (!v2)
  {
    if (!*(_DWORD *)(a1 + 16))
    {
      *(_QWORD *)(a1 + 8) = 0;
      return result;
    }
    v5 = 0;
LABEL_11:
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    return sub_1C476B10C((_DWORD *)a1, v5);
  }
  v4 = 1 << (33 - __clz(v2 - 1));
  if (v4 <= 64)
    v5 = 64;
  else
    v5 = v4;
  if (v5 != *(_DWORD *)(a1 + 16))
    goto LABEL_11;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = 16 * v5;
  v7 = *(_QWORD **)a1;
  do
  {
    *v7 = -4096;
    v7 += 2;
    v6 -= 16;
  }
  while (v6);
  return result;
}

llvm::raw_ostream *llvm::GPUFunctionCallInfo::print(unsigned int **this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *result;
  _BYTE *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t ***v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  size_t *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  _BYTE *v30;
  llvm::raw_ostream *v31;
  _BYTE *v32;
  unsigned int *v33;
  void *v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t ***v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ****v47;
  uint64_t ***v48;
  int v49;
  int v50;
  size_t *v51;
  const void *v52;
  size_t v53;
  size_t v54;
  _BYTE *v55;
  llvm::raw_ostream *v56;
  _BYTE *v57;
  unsigned int *v58;
  void *v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *i;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  int v74;
  _QWORD *v75;
  const char *v76;
  size_t v77;
  unint64_t v78;
  llvm::raw_ostream *v79;
  unint64_t *v80;
  unint64_t v81;

  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 8)
  {
    *(_BYTE *)(v4 + 8) = 32;
    *(_QWORD *)v4 = *(_QWORD *)"IsDylib: ";
    *((_QWORD *)a2 + 4) += 9;
    v5 = a2;
  }
  else
  {
    v5 = llvm::raw_ostream::write(a2, "IsDylib: ", 9uLL);
  }
  sub_1C5E21910(v5, *((unsigned __int8 *)this + 144), 0, 0, 0);
  v6 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) > 0x12)
  {
    *(_DWORD *)(v6 + 15) = 540700271;
    *(_OWORD *)v6 = *(_OWORD *)"\tUseDylibFunction: ";
    *((_QWORD *)v5 + 4) += 19;
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, "\tUseDylibFunction: ", 0x13uLL);
  }
  sub_1C5E21910(v5, *((unsigned __int8 *)this + 145), 0, 0, 0);
  v7 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v7) > 0x13)
  {
    *(_DWORD *)(v7 + 16) = 540701548;
    *(_OWORD *)v7 = *(_OWORD *)"\tNbUnknownIndCalls: ";
    *((_QWORD *)v5 + 4) += 20;
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, "\tNbUnknownIndCalls: ", 0x14uLL);
  }
  result = sub_1C5E21910(v5, *((unsigned int *)this + 37), 0, 0, 0);
  v9 = (_BYTE *)*((_QWORD *)v5 + 4);
  if (*((_BYTE **)v5 + 3) == v9)
  {
    result = llvm::raw_ostream::write(v5, "\n", 1uLL);
  }
  else
  {
    *v9 = 10;
    ++*((_QWORD *)v5 + 4);
  }
  v10 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 0x2DuLL)
  {
    qmemcpy(v10, "- Number of calls (including indirect calls):\n", 46);
    *((_QWORD *)a2 + 4) += 46;
  }
  else
  {
    result = llvm::raw_ostream::write(a2, "- Number of calls (including indirect calls):\n", 0x2EuLL);
  }
  v11 = *((unsigned int *)this + 4);
  v12 = (uint64_t)&(*this)[4 * v11];
  if (*((_DWORD *)this + 2))
  {
    if ((_DWORD)v11)
    {
      v13 = 16 * v11;
      v14 = *this;
      while ((*(_QWORD *)v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v14 += 4;
        v13 -= 16;
        if (!v13)
          goto LABEL_16;
      }
    }
    else
    {
      v14 = *this;
    }
  }
  else
  {
LABEL_16:
    v14 = &(*this)[4 * v11];
  }
  v15 = (uint64_t)&(*this)[4 * v11];
  while (v14 != (unsigned int *)v15)
  {
    v16 = *(uint64_t ****)v14;
    v17 = v14[2];
    if ((*(_BYTE *)(*(_QWORD *)v14 + 23) & 0x10) == 0)
    {
      v30 = (_BYTE *)*((_QWORD *)a2 + 4);
LABEL_31:
      v31 = a2;
      goto LABEL_32;
    }
    v18 = ***v16;
    v19 = *(_QWORD *)(v18 + 152);
    v20 = *(unsigned int *)(v18 + 168);
    if ((_DWORD)v20)
    {
      LODWORD(v21) = (v20 - 1) & ((v16 >> 4) ^ (v16 >> 9));
      v22 = (uint64_t ****)(v19 + 16 * v21);
      v23 = *v22;
      if (*v22 == v16)
        goto LABEL_27;
      v24 = 1;
      while (v23 != (uint64_t ***)-4096)
      {
        v25 = v21 + v24++;
        v21 = v25 & (v20 - 1);
        v23 = *(uint64_t ****)(v19 + 16 * v21);
        if (v23 == v16)
        {
          v22 = (uint64_t ****)(v19 + 16 * v21);
          goto LABEL_27;
        }
      }
    }
    v22 = (uint64_t ****)(v19 + 16 * v20);
LABEL_27:
    v26 = (size_t *)v22[1];
    v29 = *v26;
    v27 = v26 + 2;
    v28 = v29;
    v30 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (v29 <= *((_QWORD *)a2 + 3) - (_QWORD)v30)
    {
      if (v28)
      {
        memcpy(v30, v27, v28);
        v30 = (_BYTE *)(*((_QWORD *)a2 + 4) + v28);
        *((_QWORD *)a2 + 4) = v30;
      }
      goto LABEL_31;
    }
    v31 = llvm::raw_ostream::write(a2, (const char *)v27, v28);
    v30 = (_BYTE *)*((_QWORD *)v31 + 4);
LABEL_32:
    if (*((_BYTE **)v31 + 3) == v30)
    {
      v31 = llvm::raw_ostream::write(v31, ":", 1uLL);
    }
    else
    {
      *v30 = 58;
      ++*((_QWORD *)v31 + 4);
    }
    result = sub_1C5E21910(v31, v17, 0, 0, 0);
    v32 = (_BYTE *)*((_QWORD *)v31 + 4);
    if (*((_BYTE **)v31 + 3) == v32)
    {
      result = llvm::raw_ostream::write(v31, "\n", 1uLL);
    }
    else
    {
      *v32 = 10;
      ++*((_QWORD *)v31 + 4);
    }
    v33 = v14 + 4;
    v14 = (unsigned int *)v12;
    if (v33 != (unsigned int *)v12)
    {
      v14 = v33;
      while ((*(_QWORD *)v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v14 += 4;
        if (v14 == (unsigned int *)v12)
        {
          v14 = (unsigned int *)v12;
          break;
        }
      }
    }
  }
  v34 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v34 > 0x26uLL)
  {
    qmemcpy(v34, "- Number of indirect calls leading to:\n", 39);
    *((_QWORD *)a2 + 4) += 39;
  }
  else
  {
    result = llvm::raw_ostream::write(a2, "- Number of indirect calls leading to:\n", 0x27uLL);
  }
  v35 = this[3];
  v36 = *((unsigned int *)this + 10);
  v37 = &v35[4 * v36];
  if (*((_DWORD *)this + 8))
  {
    if ((_DWORD)v36)
    {
      v38 = 16 * v36;
      v39 = this[3];
      while ((*(_QWORD *)v39 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v39 += 4;
        v38 -= 16;
        if (!v38)
          goto LABEL_53;
      }
    }
    else
    {
      v39 = this[3];
    }
  }
  else
  {
LABEL_53:
    v39 = &v35[4 * v36];
  }
  v40 = &v35[4 * v36];
  while (v39 != v40)
  {
    v41 = *(uint64_t ****)v39;
    v42 = v39[2];
    if ((*(_BYTE *)(*(_QWORD *)v39 + 23) & 0x10) == 0)
    {
      v55 = (_BYTE *)*((_QWORD *)a2 + 4);
LABEL_68:
      v56 = a2;
      goto LABEL_69;
    }
    v43 = ***v41;
    v44 = *(_QWORD *)(v43 + 152);
    v45 = *(unsigned int *)(v43 + 168);
    if ((_DWORD)v45)
    {
      LODWORD(v46) = (v45 - 1) & ((v41 >> 4) ^ (v41 >> 9));
      v47 = (uint64_t ****)(v44 + 16 * v46);
      v48 = *v47;
      if (*v47 == v41)
        goto LABEL_64;
      v49 = 1;
      while (v48 != (uint64_t ***)-4096)
      {
        v50 = v46 + v49++;
        v46 = v50 & (v45 - 1);
        v48 = *(uint64_t ****)(v44 + 16 * v46);
        if (v48 == v41)
        {
          v47 = (uint64_t ****)(v44 + 16 * v46);
          goto LABEL_64;
        }
      }
    }
    v47 = (uint64_t ****)(v44 + 16 * v45);
LABEL_64:
    v51 = (size_t *)v47[1];
    v54 = *v51;
    v52 = v51 + 2;
    v53 = v54;
    v55 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (v54 <= *((_QWORD *)a2 + 3) - (_QWORD)v55)
    {
      if (v53)
      {
        memcpy(v55, v52, v53);
        v55 = (_BYTE *)(*((_QWORD *)a2 + 4) + v53);
        *((_QWORD *)a2 + 4) = v55;
      }
      goto LABEL_68;
    }
    v56 = llvm::raw_ostream::write(a2, (const char *)v52, v53);
    v55 = (_BYTE *)*((_QWORD *)v56 + 4);
LABEL_69:
    if (*((_BYTE **)v56 + 3) == v55)
    {
      v56 = llvm::raw_ostream::write(v56, ":", 1uLL);
    }
    else
    {
      *v55 = 58;
      ++*((_QWORD *)v56 + 4);
    }
    result = sub_1C5E21910(v56, v42, 0, 0, 0);
    v57 = (_BYTE *)*((_QWORD *)v56 + 4);
    if (*((_BYTE **)v56 + 3) == v57)
    {
      result = llvm::raw_ostream::write(v56, "\n", 1uLL);
    }
    else
    {
      *v57 = 10;
      ++*((_QWORD *)v56 + 4);
    }
    v58 = v39 + 4;
    v39 = v37;
    if (v58 != v37)
    {
      v39 = v58;
      while ((*(_QWORD *)v39 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v39 += 4;
        if (v39 == v37)
        {
          v39 = v37;
          break;
        }
      }
    }
  }
  v59 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v59 > 0x22uLL)
  {
    qmemcpy(v59, "- MayUseFunctionsInUnknownContext:\n", 35);
    *((_QWORD *)a2 + 4) += 35;
  }
  else
  {
    result = llvm::raw_ostream::write(a2, "- MayUseFunctionsInUnknownContext:\n", 0x23uLL);
  }
  v60 = this[7];
  v61 = 64;
  if (v60 == this[6])
    v61 = 68;
  v62 = *(unsigned int *)((char *)this + v61);
  if ((_DWORD)v62)
  {
    v63 = 8 * v62;
    for (i = (unint64_t *)this[7]; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v63 -= 8;
      if (!v63)
        return result;
    }
  }
  else
  {
    i = (unint64_t *)this[7];
  }
  v65 = (unint64_t *)&v60[2 * v62];
  if (i != v65)
  {
    v66 = *i;
LABEL_95:
    if ((*(_BYTE *)(v66 + 23) & 0x10) == 0)
    {
      result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
      goto LABEL_107;
    }
    v67 = ***(_QWORD ***)v66;
    v68 = *(_QWORD *)(v67 + 152);
    v69 = *(unsigned int *)(v67 + 168);
    if ((_DWORD)v69)
    {
      LODWORD(v70) = (v69 - 1) & ((v66 >> 4) ^ (v66 >> 9));
      v71 = (uint64_t *)(v68 + 16 * v70);
      v72 = *v71;
      if (*v71 == v66)
      {
LABEL_103:
        v75 = (_QWORD *)v71[1];
        v78 = *v75;
        v76 = (const char *)(v75 + 2);
        v77 = v78;
        result = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
        if (v78 > *((_QWORD *)a2 + 3) - (_QWORD)result)
        {
          v79 = llvm::raw_ostream::write(a2, v76, v77);
          result = (llvm::raw_ostream *)*((_QWORD *)v79 + 4);
          goto LABEL_108;
        }
        if (v77)
        {
          memcpy(result, v76, v77);
          result = (llvm::raw_ostream *)(*((_QWORD *)a2 + 4) + v77);
          *((_QWORD *)a2 + 4) = result;
        }
LABEL_107:
        v79 = a2;
LABEL_108:
        if (*((llvm::raw_ostream **)v79 + 3) == result)
        {
          result = llvm::raw_ostream::write(v79, "\n", 1uLL);
        }
        else
        {
          *(_BYTE *)result = 10;
          ++*((_QWORD *)v79 + 4);
        }
        v80 = i + 1;
        while (v80 != v65)
        {
          v81 = *v80++;
          v66 = v81;
          if (v81 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            i = v80 - 1;
            goto LABEL_95;
          }
        }
        return result;
      }
      v73 = 1;
      while (v72 != -4096)
      {
        v74 = v70 + v73++;
        v70 = v74 & (v69 - 1);
        v72 = *(_QWORD *)(v68 + 16 * v70);
        if (v72 == v66)
        {
          v71 = (uint64_t *)(v68 + 16 * v70);
          goto LABEL_103;
        }
      }
    }
    v71 = (uint64_t *)(v68 + 16 * v69);
    goto LABEL_103;
  }
  return result;
}

llvm::GPUFunctionCallInfo *llvm::GPUFunctionCallInfo::GPUFunctionCallInfo(llvm::GPUFunctionCallInfo *this, uint64_t **a2)
{
  char *v4;
  llvm::SmallPtrSetImplBase *v5;
  uint64_t v6;
  char *v7;
  const llvm::Module *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ***v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  int v40;
  unsigned int v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  char v51;
  uint64_t **v52;
  llvm::SmallPtrSetImplBase *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t **v74;
  llvm::SmallPtrSetImplBase *v75;
  char *v76;
  const llvm::Module *v77;
  const llvm::Module *v78;
  char *v79;
  __int16 v80;
  void *__p[2];
  char v82;
  int v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  int v88;
  _BYTE v89[72];

  *((_QWORD *)this + 3) = 0;
  v4 = (char *)this + 24;
  *((_QWORD *)this + 6) = (char *)this + 80;
  v5 = (llvm::GPUFunctionCallInfo *)((char *)this + 48);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 7) = (char *)this + 80;
  *((_QWORD *)this + 8) = 8;
  *((_DWORD *)this + 18) = 0;
  v6 = sub_1C4FB7E80(a2[14], "agc.main", 8uLL);
  if (v6 && !*(_BYTE *)(v6 + 16))
    sub_1C4774094(v5, v6);
  v75 = v5;
  *((_BYTE *)this + 144) = llvm::Module::getPICLevel((llvm::Module *)a2) != 0;
  *((_BYTE *)this + 145) = 0;
  *((_DWORD *)this + 37) = 0;
  v85 = v89;
  v86 = v89;
  v87 = 8;
  v88 = 0;
  sub_1C611A8F4(&v84, (uint64_t)a2);
  v7 = (char *)(a2 + 3);
  v74 = a2;
  v8 = (const llvm::Module *)a2[4];
  if (v8 != (const llvm::Module *)(a2 + 3))
  {
    v76 = (char *)(a2 + 27);
    v77 = (const llvm::Module *)(a2 + 3);
    do
    {
      if (v8)
        v9 = (uint64_t)v8 - 56;
      else
        v9 = 0;
      v78 = v8;
      if (v8 && *(_BYTE *)(v9 + 16) == 3)
      {
        if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) == 0)
        {
          v10 = *(_DWORD *)(v9 + 32);
LABEL_11:
          if (*(_QWORD *)(v9 + 8))
          {
            *((_BYTE *)this + 145) |= (v10 & 0x2000) == 0;
          }
          else if ((v10 & 0x2000) == 0)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v85, v9);
          }
          goto LABEL_83;
        }
      }
      else if (!*(_BYTE *)(v9 + 16) && *(_QWORD *)(v9 + 72) == v9 + 72)
      {
        v10 = *(_DWORD *)(v9 + 32);
        if ((v10 & 0x800000) == 0)
          goto LABEL_11;
      }
      if (sub_1C611A970((uint64_t)&v84, v9))
      {
        v80 = 260;
        v79 = v76;
        llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v79);
        v11 = v83;
        if (v82 < 0)
          operator delete(__p[0]);
        if (v11 == 29)
          sub_1C4774094(v75, v9);
      }
      v12 = v9 + 72;
      v13 = *(_QWORD *)(v9 + 80);
      while (2)
      {
        if (v13 != v12)
        {
          v14 = v13 - 24;
          if (!v13)
            v14 = 0;
          v15 = v14 + 40;
          v16 = *(_QWORD *)(v14 + 48);
LABEL_26:
          if (v16 == v15)
          {
            v13 = *(_QWORD *)(v13 + 8);
            continue;
          }
          v17 = (uint64_t ***)(v16 - 24);
          if (!v16)
            v17 = 0;
          if (*((_BYTE *)v17 + 16) != 84)
            goto LABEL_49;
          v18 = (uint64_t)*(v17 - 4);
          if (!v18 || *(_BYTE *)(v18 + 16) || *(uint64_t ***)(v18 + 24) != v17[9])
          {
            if ((*((_BYTE *)v17 + 23) & 0x20) != 0)
            {
              v19 = ***v17;
              __p[0] = v17;
              v20 = *(_DWORD *)(v19 + 2496);
              if (!v20)
              {
                v48 = 0;
                goto LABEL_72;
              }
              v21 = *(_QWORD *)(v19 + 2480);
              v22 = v20 - 1;
              v23 = v22 & ((v17 >> 4) ^ (v17 >> 9));
              v24 = (_QWORD *)(v21 + 40 * v23);
              v25 = *v24;
              if ((uint64_t ***)*v24 != v17)
              {
                v26 = 0;
                v27 = 1;
                while (v25 != -4096)
                {
                  if (v26)
                    v28 = 0;
                  else
                    v28 = v25 == -8192;
                  if (v28)
                    v26 = v24;
                  v29 = v23 + v27++;
                  v23 = v29 & v22;
                  v24 = (_QWORD *)(v21 + 40 * v23);
                  v25 = *v24;
                  if ((uint64_t ***)*v24 == v17)
                    goto LABEL_44;
                }
                if (v26)
                  v48 = v26;
                else
                  v48 = v24;
LABEL_72:
                v24 = sub_1C541AB24(v19 + 2480, (uint64_t)__p, (uint64_t *)__p, v48);
                v49 = __p[0];
                v24[4] = 0;
                v24[3] = 0;
                *v24 = v49;
                v24[1] = v24 + 3;
                v24[2] = 0x100000000;
              }
LABEL_44:
              v30 = *((unsigned int *)v24 + 4);
              if ((_DWORD)v30)
              {
                v31 = (_QWORD *)(v24[1] + 8);
                v32 = 16 * v30;
                while (*((_DWORD *)v31 - 2) != 23)
                {
                  v31 += 2;
                  v32 -= 16;
                  if (!v32)
                    goto LABEL_48;
                }
                v33 = *v31;
                if (*v31)
                {
                  v34 = *(unsigned int *)(v33 + 8);
                  if ((_DWORD)v34)
                  {
                    v35 = -8 * v34;
                    v36 = -8 * v34;
                    while (*(_QWORD *)(v33 + v36))
                    {
                      v36 += 8;
                      if (!v36)
                      {
                        do
                        {
                          __p[0] = 0;
                          __p[0] = *(void **)(*(_QWORD *)(v33 + v35) + 128);
                          v37 = sub_1C4E2FB20((uint64_t)v4, (uint64_t *)__p);
                          ++*((_DWORD *)v37 + 2);
                          v38 = sub_1C4E2FB20((uint64_t)this, (uint64_t *)__p);
                          ++*((_DWORD *)v38 + 2);
                          v35 += 8;
                        }
                        while (v35);
                        goto LABEL_49;
                      }
                    }
                  }
                }
              }
            }
LABEL_48:
            ++*((_DWORD *)this + 37);
LABEL_49:
            v16 = *(_QWORD *)(v16 + 8);
            goto LABEL_26;
          }
          if ((*(_BYTE *)(v18 + 33) & 0x20) != 0)
            goto LABEL_49;
          __p[0] = *(v17 - 4);
          v39 = *((_DWORD *)this + 4);
          if (v39)
          {
            v40 = v39 - 1;
            v41 = v40 & ((v18 >> 4) ^ (v18 >> 9));
            v42 = (_QWORD *)(*(_QWORD *)this + 16 * v41);
            v43 = (void *)*v42;
            if (v18 != *v42)
            {
              v44 = 0;
              v45 = 1;
              while (v43 != (void *)-4096)
              {
                if (v44)
                  v46 = 0;
                else
                  v46 = v43 == (void *)-8192;
                if (v46)
                  v44 = v42;
                v47 = v41 + v45++;
                v41 = v47 & v40;
                v42 = (_QWORD *)(*(_QWORD *)this + 16 * v41);
                v43 = (void *)*v42;
                if (v18 == *v42)
                  goto LABEL_78;
              }
              if (v44)
                v50 = v44;
              else
                v50 = v42;
LABEL_77:
              v42 = sub_1C4E2FC78((uint64_t)this, (uint64_t)__p, (uint64_t *)__p, v50);
              *v42 = __p[0];
              *((_DWORD *)v42 + 2) = 0;
            }
LABEL_78:
            ++*((_DWORD *)v42 + 2);
            goto LABEL_49;
          }
          v50 = 0;
          goto LABEL_77;
        }
        break;
      }
LABEL_83:
      v7 = (char *)v77;
      v8 = (const llvm::Module *)*((_QWORD *)v78 + 1);
    }
    while (v8 != v77);
  }
  if (*((_BYTE *)this + 145))
  {
    v51 = 0;
    v52 = v74;
    v53 = v75;
    goto LABEL_110;
  }
  if (v86 == v85)
    v54 = (uint64_t *)((char *)&v87 + 4);
  else
    v54 = &v87;
  v55 = *(unsigned int *)v54;
  if ((_DWORD)v55)
  {
    v56 = 8 * v55;
    v57 = (unint64_t *)v86;
    v52 = v74;
    while (*v57 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v57;
      v56 -= 8;
      if (!v56)
        goto LABEL_108;
    }
  }
  else
  {
    v57 = (unint64_t *)v86;
    v52 = v74;
  }
  v58 = &v86[8 * v55];
  if (v57 == (unint64_t *)v58)
  {
LABEL_108:
    v51 = 1;
    v53 = v75;
    goto LABEL_110;
  }
  v59 = *(_QWORD *)this;
  v60 = *((unsigned int *)this + 4);
  v61 = v60 - 1;
  v62 = *v57;
  v53 = v75;
  if ((_DWORD)v60)
  {
LABEL_97:
    LODWORD(v63) = ((v62 >> 4) ^ (v62 >> 9)) & v61;
    v64 = (uint64_t *)(v59 + 16 * v63);
    v65 = *v64;
    if (v62 == *v64)
    {
LABEL_102:
      if (v64 != (uint64_t *)(*(_QWORD *)this + 16 * v60))
      {
        v51 = 0;
        *((_BYTE *)this + 145) = 1;
        goto LABEL_110;
      }
    }
    else
    {
      v66 = 1;
      while (v65 != -4096)
      {
        v67 = v63 + v66++;
        v63 = v67 & v61;
        v65 = *(_QWORD *)(v59 + 16 * v63);
        if (v62 == v65)
        {
          v64 = (uint64_t *)(v59 + 16 * v63);
          goto LABEL_102;
        }
      }
    }
  }
LABEL_103:
  v68 = v57 + 1;
  while (v68 != (unint64_t *)v58)
  {
    v69 = *v68++;
    v62 = v69;
    if (v69 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v57 = v68 - 1;
      if ((_DWORD)v60)
        goto LABEL_97;
      goto LABEL_103;
    }
  }
  v51 = 1;
LABEL_110:
  v70 = v52[4];
  if (!*((_DWORD *)this + 37))
  {
    if (v70 == (uint64_t *)v7)
      v51 = 1;
    if ((v51 & 1) != 0)
      goto LABEL_128;
    while (1)
    {
LABEL_112:
      if (v70)
        v71 = (uint64_t)(v70 - 7);
      else
        v71 = 0;
      if (v70 && *(_BYTE *)(v71 + 16) == 3)
      {
        if ((*(_DWORD *)(v71 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_127;
      }
      else if (!*(_BYTE *)(v71 + 16) && *(_QWORD *)(v71 + 72) == v71 + 72 && (*(_BYTE *)(v71 + 34) & 0x80) == 0)
      {
        goto LABEL_127;
      }
      if ((*(_DWORD *)(v71 + 32) & 0xFu) - 9 >= 0xFFFFFFFE)
      {
        v72 = *(_QWORD *)(v71 + 8);
        if (!v72)
          goto LABEL_127;
        while (*(_BYTE *)(*(_QWORD *)(v72 + 24) + 16) == 84)
        {
          v72 = *(_QWORD *)(v72 + 8);
          if (!v72)
            goto LABEL_127;
        }
      }
      sub_1C4774094(v53, v71);
LABEL_127:
      v70 = (uint64_t *)v70[1];
      if (v70 == (uint64_t *)v7)
        goto LABEL_128;
    }
  }
  if (v70 != (uint64_t *)v7)
    goto LABEL_112;
LABEL_128:
  if (v86 != v85)
    free(v86);
  return this;
}

uint64_t sub_1C4E3F5DC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Function Call Info";
  *(_QWORD *)(v2 + 8) = 18;
  *(_QWORD *)(v2 + 16) = "function-call-analysis";
  *(_QWORD *)(v2 + 24) = 22;
  *(_QWORD *)(v2 + 32) = &llvm::GPUFunctionCallInfoWrapper::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::GPUFunctionCallInfoWrapper>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createGPUFunctionCallInfoWrapperPass(llvm *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &llvm::GPUFunctionCallInfoWrapper::ID;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E81372D0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1C4E3F6B8(uint64_t a1)
{
  _QWORD *v1;
  void *v2;

  v1 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v1)
  {
    v2 = (void *)v1[7];
    if (v2 != (void *)v1[6])
      free(v2);
    MEMORY[0x1CAA32FB4](v1[3], 8);
    MEMORY[0x1CAA32FB4](*v1, 8);
    MEMORY[0x1CAA32FC0](v1, 0x10E0C408DED98BELL);
  }
  return 0;
}

uint64_t sub_1C4E3F724(uint64_t a1, uint64_t **a2)
{
  llvm::GPUFunctionCallInfo *v4;
  _QWORD *v5;
  _QWORD *v7;

  v4 = (llvm::GPUFunctionCallInfo *)operator new();
  llvm::GPUFunctionCallInfo::GPUFunctionCallInfo(v4, a2);
  v5 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v5)
  {
    v7 = sub_1C4E3F79C(v5);
    MEMORY[0x1CAA32FC0](v7, 0x10E0C408DED98BELL);
  }
  return 0;
}

_QWORD *sub_1C4E3F79C(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[7];
  if (v2 != (void *)a1[6])
    free(v2);
  MEMORY[0x1CAA32FB4](a1[3], 8);
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

uint64_t llvm::FunctionGroup::getGlobalResource(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    return 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(&v7, a1, a2);
  v4 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v6 = v7;
  v7 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v4;
}

uint64_t llvm::FunctionGroup::setGlobalResource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  if (result)
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, a2, a3);
  if (a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2, a3);
  return result;
}

uint64_t llvm::FunctionGroup::calcDMAListSize(llvm::FunctionGroup *this, int a2)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::string __dst;
  uint64_t v44;

  v4 = (*(uint64_t (**)(llvm::FunctionGroup *))(*(_QWORD *)this + 112))(this);
  if (*(char *)(v4 + 239) < 0)
    sub_1C47EBC30(&__dst, *(void **)(v4 + 216), *(_QWORD *)(v4 + 224));
  else
    __dst = *(std::string *)(v4 + 216);
  if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
  {
    v5 = 27;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
  {
    v5 = 28;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
  {
    v5 = 29;
  }
  else
  {
    v5 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if ((*(uint64_t (**)(llvm::FunctionGroup *))(*(_QWORD *)this + 312))(this))
    v6 = 0;
  else
    v6 = a2 == 0;
  if (v6)
  {
    v7 = 0;
  }
  else
  {
    v7 = 1;
    v8 = (**(uint64_t (***)(llvm::FunctionGroup *, uint64_t, _QWORD, uint64_t, uint64_t))this)(this, 7, 0, 1, 3);
    v9 = (**(uint64_t (***)(llvm::FunctionGroup *, uint64_t, _QWORD, uint64_t, uint64_t))this)(this, 6, 0, 1, 1);
    v10 = (*(uint64_t (**)(llvm::FunctionGroup *))(*(_QWORD *)this + 312))(this);
    v11 = (**(uint64_t (***)(llvm::FunctionGroup *, uint64_t, _QWORD, uint64_t, uint64_t))this)(this, 6, 0, 1, 1);
    if ((v5 - 27) <= 2)
    {
      v12 = v8 / v9;
      v13 = 4 * v10 / (unint64_t)v11;
      v14 = (*(uint64_t (**)(llvm::FunctionGroup *, uint64_t))(*(_QWORD *)this + 176))(this, 24);
      if (v12 == (_DWORD)v13)
        v15 = a2;
      else
        v15 = 1;
      if (v14)
        v16 = 2;
      else
        v16 = 1;
      if (v15)
        v7 = v16;
      else
        v7 = v14 != 0;
    }
  }
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *, uint64_t))(*(_QWORD *)this + 128))(&v41, this, 3);
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *, uint64_t))(*(_QWORD *)this + 136))(&v44, this, 3);
  v17 = v41;
  v18 = v44;
  if (v41)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v41 + 16))(&v41, v41);
    v19 = v41;
  }
  else
  {
    v19 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v18 + 16))(&v41, v18);
  v20 = v41;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 24))(v19, v41) & 1) == 0)
  {
    while (1)
    {
      v21 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
      if ((unint64_t)(*(uint64_t (**)(llvm::FunctionGroup *, _QWORD))(*(_QWORD *)this + 400))(this, *v21) >> 32)break;
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 24))(v19, v20))
        goto LABEL_33;
    }
    ++v7;
  }
LABEL_33:
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *, _QWORD))(*(_QWORD *)this + 128))(&v41, this, 0);
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *, _QWORD))(*(_QWORD *)this + 136))(&v44, this, 0);
  v22 = v41;
  v23 = v44;
  if (v41)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v41 + 16))(&v41, v41);
    v24 = v41;
  }
  else
  {
    v24 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(&v41, v23);
  v25 = v41;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 24))(v24, v41) & 1) == 0)
  {
    while (1)
    {
      v26 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
      if (!llvm::Value::getMetadata(*v26, "agx.ts.dma", 0xAuLL))
        break;
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 24))(v24, v25))
        goto LABEL_43;
    }
    ++v7;
  }
LABEL_43:
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *, _QWORD))(*(_QWORD *)this + 128))(&v41, this, 0);
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *, _QWORD))(*(_QWORD *)this + 136))(&v44, this, 0);
  v27 = v41;
  v28 = v44;
  if (v41)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v41 + 16))(&v41, v41);
    v29 = v41;
  }
  else
  {
    v29 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v28 + 16))(&v41, v28);
  v30 = v41;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 24))(v29, v41) & 1) == 0)
  {
    while (1)
    {
      v31 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
      if (llvm::Value::getMetadata(*v31, "agx.ts.dma", 0xAuLL))
        break;
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 40))(v29);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 24))(v29, v30))
        goto LABEL_53;
    }
    ++v7;
  }
LABEL_53:
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if ((*(uint64_t (**)(llvm::FunctionGroup *, uint64_t))(*(_QWORD *)this + 176))(this, 1))
    v32 = v7 + 1;
  else
    v32 = v7;
  if (((*(uint64_t (**)(llvm::FunctionGroup *))(*(_QWORD *)this + 288))(this) & 1) != 0)
  {
    LOBYTE(v33) = 0;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(_QWORD *)this + 272))(&v44, this);
    (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(_QWORD *)this + 280))(&v42, this);
    v41 = v44;
    sub_1C4E40408(&v44, (uint64_t)&v41);
    sub_1C4E40408(&v40, (uint64_t)&v42);
    v33 = 0;
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 24))(v44, v40) & 1) == 0)
    {
      v34 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 32))(v44);
      v33 |= (*(uint64_t (**)(llvm::FunctionGroup *, uint64_t, _QWORD))(*(_QWORD *)this + 184))(this, 3, *v34);
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 40))(v44);
    }
    v35 = v40;
    v40 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = v44;
    v44 = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v37 = v42;
    v42 = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v38 = v41;
    v41 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  if ((*(uint64_t (**)(llvm::FunctionGroup *, uint64_t))(*(_QWORD *)this + 176))(this, 5)
    || ((*(uint64_t (**)(llvm::FunctionGroup *, uint64_t))(*(_QWORD *)this + 176))(this, 17) != 0) | v33 & 1)
  {
    ++v32;
  }
  if ((*(uint64_t (**)(llvm::FunctionGroup *, uint64_t))(*(_QWORD *)this + 176))(this, 2)
    || (*(uint64_t (**)(llvm::FunctionGroup *, uint64_t))(*(_QWORD *)this + 176))(this, 4))
  {
    ++v32;
  }
  return v32 + (*(unsigned int (**)(llvm::FunctionGroup *, uint64_t))(*(_QWORD *)this + 176))(this, 6);
}

uint64_t llvm::FunctionGroupInfo::create@<X0>(llvm::FunctionGroupInfo *this@<X0>, llvm::GPUFunctionInfoCache *a2@<X1>, _QWORD *a3@<X8>)
{
  char v3;
  uint64_t v6;
  uint64_t result;

  v3 = (char)a2;
  v6 = operator new();
  result = sub_1C6194DA8(v6, (uint64_t)this, v3);
  *a3 = result;
  return result;
}

void llvm::initializeFunctionGroupInfoWrapperPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D498);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E40108;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D498, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E40108(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Function Groups";
  *(_QWORD *)(v2 + 8) = 15;
  *(_QWORD *)(v2 + 16) = "function-groups";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &llvm::FunctionGroupInfoWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::FunctionGroupInfoWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *llvm::FunctionGroupInfoPrinterPass::run@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;

  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::FunctionGroupAnalysis::Key, a2);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(ResultImpl + 8) + 88))(*(_QWORD *)(ResultImpl + 8), *a1, a2);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C4E40220(uint64_t a1, char a2)
{
  uint64_t *v4;
  _QWORD **v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *v15[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &llvm::FunctionGroupInfoWrapperPass::ID;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81373B8;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (_QWORD **)(a1 + 40);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v13 = qword_1ED830BC0[0];
  v7 = atomic_load(&qword_1ED82D498);
  if (v7 != -1)
  {
    v15[0] = sub_1C4E40108;
    v15[1] = &v13;
    v14 = v15;
    std::__call_once(&qword_1ED82D498, &v14, (void (__cdecl *)(void *))sub_1C4776838);
  }
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  v15[0] = 0;
  sub_1C4E403B0(v5, v8);
  sub_1C4E403B0(v15, 0);
  v9 = *v5;
  v10 = operator new();
  sub_1C6194DA8(v10, (uint64_t)v9, a2);
  v11 = *v4;
  *v4 = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

uint64_t sub_1C4E4038C(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
  return 0;
}

_QWORD **sub_1C4E403B0(_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_1C4E3E2EC((uint64_t)v2);
    MEMORY[0x1CAA32FB4](*v2, 8);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t *sub_1C4E40408(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *a1 = 0;
  if (*(_QWORD *)a2)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 16))(&v7);
    v3 = v7;
    v4 = *a1;
    v7 = 0;
    *a1 = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v6 = v7;
      v7 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_1C4E40490(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t k;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  int64x2_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  __int16 v72;
  void *__p;
  char v74;
  int v75;
  uint64_t v76[2];

  if (!*(_BYTE *)(a1 + 16))
  {
    v3 = a1;
    v72 = 260;
    v69 = a2 + 216;
    llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v69);
    v4 = v75;
    if ((v75 & 0xFFFFFFFE) == 0x1C)
      v5 = 1024;
    else
      v5 = 0x4000;
    *(_DWORD *)(v3 + 760) = 1;
    *(_DWORD *)(v3 + 764) = v5;
    *(_QWORD *)(v3 + 768) = 32;
    if (v4 == 29 || v4 == 28)
    {
      v6 = operator new();
      *(_QWORD *)v6 = off_1E81375A0;
    }
    else
    {
      v6 = operator new();
      v7 = *(_BYTE *)(v3 + 776);
      *(_QWORD *)v6 = off_1E8137540;
      *(_BYTE *)(v6 + 8) = v7;
    }
    v8 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = v6;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v9 = *(_QWORD *)(a2 + 32);
    if (v9 != a2 + 24)
    {
      v63 = a2;
      v64 = v3;
      v68 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v65 = a2 + 24;
      do
      {
        v10 = v9 - 56;
        v66 = v9;
        if (!v9)
          v10 = 0;
        v11 = *(_QWORD *)(v10 + 80);
        for (i = v10 + 72; v11 != i; v11 = *(_QWORD *)(v11 + 8))
        {
          v12 = v11 - 24;
          if (!v11)
            v12 = 0;
          v13 = v12 + 40;
          for (j = *(_QWORD *)(v12 + 48); j != v13; j = *(_QWORD *)(j + 8))
          {
            v15 = j - 24;
            if (!j)
              v15 = 0;
            v16 = *(unsigned __int8 *)(v15 + 16);
            if (v16 == 84)
              v17 = v15;
            else
              v17 = 0;
            if (!j || v16 != 84 || (*(_BYTE *)(v15 + 23) & 0x20) == 0)
              continue;
            v18 = ***(_QWORD ***)v15;
            v76[0] = v15;
            v19 = *(_DWORD *)(v18 + 2496);
            if (!v19)
            {
              v57 = 0;
LABEL_87:
              v23 = sub_1C541AB24(v18 + 2480, (uint64_t)v76, v76, v57);
              v58 = v76[0];
              v23[4] = 0;
              v23[3] = 0;
              *v23 = v58;
              v23[1] = v23 + 3;
              v23[2] = 0x100000000;
              goto LABEL_38;
            }
            v20 = *(_QWORD *)(v18 + 2480);
            v21 = v19 - 1;
            v22 = v21 & ((v15 >> 4) ^ (v15 >> 9));
            v23 = (_QWORD *)(v20 + 40 * v22);
            v24 = *v23;
            if (*v23 != v15)
            {
              v25 = 0;
              v26 = 1;
              while (v24 != -4096)
              {
                if (v25)
                  v27 = 0;
                else
                  v27 = v24 == -8192;
                if (v27)
                  v25 = v23;
                v28 = v22 + v26++;
                v22 = v28 & v21;
                v23 = (_QWORD *)(v20 + 40 * v22);
                v24 = *v23;
                if (*v23 == v15)
                  goto LABEL_38;
              }
              if (v25)
                v57 = v25;
              else
                v57 = v23;
              goto LABEL_87;
            }
LABEL_38:
            v29 = *((unsigned int *)v23 + 4);
            if ((_DWORD)v29)
            {
              v30 = (_QWORD *)(v23[1] + 8);
              v31 = 16 * v29;
              while (*((_DWORD *)v30 - 2) != 23)
              {
                v30 += 2;
                v31 -= 16;
                if (!v31)
                  goto LABEL_42;
              }
              v32 = *v30;
              if (*v30)
              {
                v33 = *(unsigned int *)(v32 + 8);
                if ((_DWORD)v33)
                {
                  v34 = v32 - 8 * v33;
                  v35 = -8 * v33;
                  while (*(_QWORD *)(v32 + v35))
                  {
                    v35 += 8;
                    if (!v35)
                    {
                      while (1)
                      {
                        if (**(_BYTE **)v34 == 1)
                          v41 = *(_QWORD *)(*(_QWORD *)v34 + 128);
                        else
                          v41 = 0;
                        v76[0] = 0;
                        v42 = v71;
                        v43 = sub_1C4E44338(v69, v71, v41, v76);
                        v39 = v76[0];
                        if ((v43 & 1) != 0)
                          goto LABEL_64;
                        if (4 * (int)v70 + 4 >= 3 * v42)
                        {
                          v38 = 2 * v42;
                        }
                        else
                        {
                          if (v42 + ~(_DWORD)v70 - HIDWORD(v70) > v42 >> 3)
                            goto LABEL_61;
                          v38 = v42;
                        }
                        sub_1C4E443C4((uint64_t)&v69, v38);
                        v76[0] = 0;
                        sub_1C4E44338(v69, v71, v41, v76);
                        v39 = v76[0];
LABEL_61:
                        LODWORD(v70) = v70 + 1;
                        if (*(_QWORD *)v39 != -4096)
                          --HIDWORD(v70);
                        *(_QWORD *)v39 = v41;
                        *(_OWORD *)(v39 + 48) = 0u;
                        *(_OWORD *)(v39 + 64) = 0u;
                        *(_OWORD *)(v39 + 80) = 0u;
                        *(_QWORD *)(v39 + 8) = 1;
                        *(int64x2_t *)(v39 + 16) = v68;
                        *(int64x2_t *)(v39 + 32) = v68;
                        *(_QWORD *)(v39 + 48) = v39 + 64;
                        *(_QWORD *)(v39 + 56) = 0x400000000;
LABEL_64:
                        v44 = *(_BYTE *)(v39 + 8);
                        v45 = *(_QWORD *)(v17 - 32);
                        v76[0] = v45;
                        if ((v44 & 1) != 0)
                        {
                          v37 = v39 + 16;
                          v36 = 4;
                        }
                        else
                        {
                          v36 = *(_DWORD *)(v39 + 24);
                          if (!v36)
                          {
                            v40 = 0;
LABEL_79:
                            v54 = sub_1C4E4473C(v39 + 8, (uint64_t)v76, v76, v40);
                            *v54 = v76[0];
                            v55 = v76[0];
                            v56 = *(unsigned int *)(v39 + 56);
                            if (v56 >= *(unsigned int *)(v39 + 60))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod(v39 + 48, v39 + 64, v56 + 1, 8);
                              v56 = *(unsigned int *)(v39 + 56);
                            }
                            *(_QWORD *)(*(_QWORD *)(v39 + 48) + 8 * v56) = v55;
                            ++*(_DWORD *)(v39 + 56);
                            goto LABEL_82;
                          }
                          v37 = *(_QWORD *)(v39 + 16);
                        }
                        v46 = v36 - 1;
                        v47 = v46 & ((v45 >> 4) ^ (v45 >> 9));
                        v48 = (_QWORD *)(v37 + 8 * v47);
                        v49 = *v48;
                        if (v45 != *v48)
                        {
                          v50 = 0;
                          v51 = 1;
                          while (v49 != -4096)
                          {
                            if (v50)
                              v52 = 0;
                            else
                              v52 = v49 == -8192;
                            if (v52)
                              v50 = v48;
                            v53 = v47 + v51++;
                            v47 = v53 & v46;
                            v48 = (_QWORD *)(v37 + 8 * v47);
                            v49 = *v48;
                            if (v45 == *v48)
                              goto LABEL_82;
                          }
                          if (v50)
                            v40 = v50;
                          else
                            v40 = v48;
                          goto LABEL_79;
                        }
LABEL_82:
                        v34 += 8;
                        if (v34 == v32)
                          goto LABEL_42;
                      }
                    }
                  }
                }
              }
            }
LABEL_42:
            ;
          }
        }
        v9 = *(_QWORD *)(v66 + 8);
      }
      while (v9 != v65);
      v3 = v64;
      v59 = *(_QWORD *)(v63 + 32);
      if (v59 != v65)
      {
        do
        {
          if (v59)
            v60 = v59 - 56;
          else
            v60 = 0;
          if (sub_1C4E434A4(v60, v64 + 32, (uint64_t)&v69) >= 5)
            sub_1C4E43818(v64, v60);
          v59 = *(_QWORD *)(v59 + 8);
        }
        while (v59 != v65);
        for (k = *(_QWORD *)(v63 + 32); k != v65; k = *(_QWORD *)(k + 8))
        {
          if (k)
            v62 = k - 56;
          else
            v62 = 0;
          if (k && *(_BYTE *)(v62 + 16) == 3)
          {
            if ((*(_DWORD *)(v62 + 20) & 0x7FFFFFF) != 0)
              goto LABEL_110;
          }
          else if (*(_BYTE *)(v62 + 16) || *(_QWORD *)(v62 + 72) != v62 + 72 || (*(_BYTE *)(v62 + 34) & 0x80) != 0)
          {
LABEL_110:
            sub_1C4E43E28(v64, v62, (uint64_t)&v69);
            continue;
          }
        }
      }
    }
    *(_BYTE *)(v3 + 16) = 1;
    sub_1C4E4B2A0(v69, v71);
    MEMORY[0x1CAA32FB4](v69, 8);
    if (v74 < 0)
      operator delete(__p);
  }
}

uint64_t sub_1C4E40A88(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  uint64_t v20;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45[3];
  void *__src;
  uint64_t v47;
  unsigned int v48[8];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 16))
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, *(_QWORD *)(a2 + 40));
  if (a2 && *(_BYTE *)(a2 + 16) == 3)
  {
    if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 0)
      goto LABEL_6;
  }
  else if (*(_BYTE *)(a2 + 16) || *(_QWORD *)(a2 + 72) != a2 + 72 || (*(_BYTE *)(a2 + 34) & 0x80) != 0)
  {
LABEL_6:
    v4 = *(_QWORD *)(a1 + 584);
    v5 = *(unsigned int *)(a1 + 600);
    v6 = a2 >> 4;
    if ((_DWORD)v5)
    {
      v7 = ((_DWORD)v5 - 1) & (v6 ^ (a2 >> 9));
      v8 = v4 + (v7 << 7);
      v9 = *(_QWORD *)(v8 + 24);
      if (v9 == a2)
        goto LABEL_8;
      v22 = 1;
      while (v9 != -4096)
      {
        v23 = v7 + v22++;
        v7 = v23 & (v5 - 1);
        v8 = v4 + (v7 << 7);
        v9 = *(_QWORD *)(v8 + 24);
        if (v9 == a2)
          goto LABEL_8;
      }
    }
    v8 = v4 + (v5 << 7);
LABEL_8:
    if (v8 == v4 + (v5 << 7))
    {
      sub_1C4E43818(a1, a2);
      __src = 0;
      v47 = 0;
      v48[0] = 0;
      sub_1C4E43E28(a1, a2, (uint64_t)&__src);
      sub_1C4E4B2A0((uint64_t)__src, v48[0]);
      MEMORY[0x1CAA32FB4](__src, 8);
      v4 = *(_QWORD *)(a1 + 584);
      LODWORD(v5) = *(_DWORD *)(a1 + 600);
    }
    if ((_DWORD)v5)
    {
      v10 = ((_DWORD)v5 - 1) & (v6 ^ (a2 >> 9));
      v11 = v4 + (v10 << 7);
      v12 = *(_QWORD *)(v11 + 24);
      if (v12 == a2)
        goto LABEL_12;
      v24 = 1;
      while (v12 != -4096)
      {
        v25 = v10 + v24++;
        v10 = v25 & (v5 - 1);
        v11 = v4 + (v10 << 7);
        v12 = *(_QWORD *)(v11 + 24);
        if (v12 == a2)
          goto LABEL_12;
      }
    }
    v11 = v4 + ((unint64_t)v5 << 7);
LABEL_12:
    v13 = *(unsigned int *)(v11 + 88);
    if ((_DWORD)v13 == 1)
    {
      v14 = *(_QWORD **)(a1 + 544);
      if (!v14)
        goto LABEL_24;
      v15 = **(_QWORD **)(v11 + 80);
      v16 = a1 + 544;
      do
      {
        v17 = v14[4];
        v18 = v17 >= v15;
        if (v17 >= v15)
          v19 = v14;
        else
          v19 = v14 + 1;
        if (v18)
          v16 = (uint64_t)v14;
        v14 = (_QWORD *)*v19;
      }
      while (*v19);
      if (v16 == a1 + 544 || v15 < *(_QWORD *)(v16 + 32))
LABEL_24:
        v16 = a1 + 544;
      v20 = v16 + 40;
      return *(_QWORD *)v20;
    }
    v26 = *(_QWORD *)(a1 + 648);
    v27 = *(_DWORD *)(a1 + 664);
    if (v27)
    {
      v28 = (v27 - 1) & (v6 ^ (a2 >> 9));
      v29 = v26 + 48 * v28;
      v30 = *(_QWORD *)(v29 + 24);
      if (v30 == a2)
        goto LABEL_41;
      v31 = 1;
      while (v30 != -4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v27 - 1);
        v29 = v26 + 48 * v28;
        v30 = *(_QWORD *)(v29 + 24);
        if (v30 == a2)
          goto LABEL_41;
      }
    }
    v29 = v26 + 48 * v27;
LABEL_41:
    if (v29 != v26 + 48 * v27)
    {
LABEL_42:
      v20 = v29 + 40;
      return *(_QWORD *)v20;
    }
    v33 = a1 + 648;
    __src = v48;
    v47 = 0x400000000;
    if ((_DWORD)v13)
    {
      v34 = *(unint64_t **)(v11 + 80);
      v35 = 8 * v13;
      do
      {
        v36 = *sub_1C4E4AD60(*(_QWORD **)(a1 + 544), *v34);
        v37 = v47;
        if (v47 >= (unint64_t)HIDWORD(v47))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v48, v47 + 1, 8);
          v37 = v47;
        }
        *((_QWORD *)__src + v37) = v36;
        LODWORD(v47) = v47 + 1;
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
    v38 = (_QWORD *)operator new();
    v39 = __src;
    v40 = v47;
    *v38 = off_1E8137A28;
    v38[1] = a1;
    v38[2] = v38 + 4;
    v38[3] = 0x400000000;
    if (v40 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v38 + 2), (uint64_t)(v38 + 4), v40, 8);
      v41 = *((unsigned int *)v38 + 6);
    }
    else
    {
      if (!(_DWORD)v40)
      {
        v38[8] = 0;
LABEL_61:
        v43 = a2;
        v44 = v38;
        sub_1C4E4263C((uint64_t)v45, v33, (uint64_t)&v43);
        v29 = v45[0];
        if (v44)
          (*(void (**)(_QWORD *))(*v44 + 24))(v44);
        if (__src != v48)
          free(__src);
        goto LABEL_42;
      }
      v41 = 0;
    }
    v42 = 8 * v40;
    memcpy((void *)(v38[2] + 8 * v41), v39, 8 * v40);
    *((_DWORD *)v38 + 6) += v40;
    v38[8] = 0;
    while (((*(unsigned __int16 *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v39 + 568))(*v39) + 18) >> 4) & 0x3FFu)
          - 100 >= 9)
    {
      ++v39;
      v42 -= 8;
      if (!v42)
        goto LABEL_61;
    }
    v38[8] = *v39;
    goto LABEL_61;
  }
  return 0;
}

BOOL sub_1C4E40ED0(uint64_t a1, int32x2_t ****a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v17;
  unint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  unint64_t v26;

  v26 = a3;
  v6 = a1 + 584;
  v7 = sub_1C4E4AA50(a1 + 584, a2);
  v8 = *(unsigned int *)(v7 + 48);
  if ((_DWORD)v8)
  {
    v17 = *(unint64_t **)(v7 + 40);
    v18 = &v17[v8];
    v19 = (_QWORD *)(a1 + 544);
    do
    {
      v20 = (_QWORD *)*v19;
      if (*v19)
      {
        v21 = *v17;
        v22 = (_QWORD *)(a1 + 544);
        do
        {
          v23 = v20[4];
          v24 = v23 >= v21;
          if (v23 >= v21)
            v25 = v20;
          else
            v25 = v20 + 1;
          if (v24)
            v22 = v20;
          v20 = (_QWORD *)*v25;
        }
        while (*v25);
        if (v22 != v19 && v21 >= v22[4])
          (*(void (**)(_QWORD, int32x2_t ****))(*(_QWORD *)v22[5] + 48))(v22[5], a2);
      }
      ++v17;
    }
    while (v17 != v18);
  }
  v9 = sub_1C4E4AA50(v6, a2);
  sub_1C4E4D164((_QWORD *)v9);
  *(_DWORD *)(v9 + 48) = 0;
  v10 = *(_QWORD **)(a1 + 544);
  if (!v10)
    goto LABEL_13;
  v11 = (_QWORD *)(a1 + 544);
  do
  {
    v12 = v10[4];
    v13 = v12 >= a3;
    if (v12 >= a3)
      v14 = v10;
    else
      v14 = v10 + 1;
    if (v13)
      v11 = v10;
    v10 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 == (_QWORD *)(a1 + 544) || v11[4] > a3)
LABEL_13:
    v11 = (_QWORD *)(a1 + 544);
  (*(void (**)(_QWORD, int32x2_t ****))(*(_QWORD *)v11[5] + 40))(v11[5], a2);
  v15 = sub_1C4E4AA50(v6, a2);
  return sub_1C4E486A0(v15, (uint64_t *)&v26);
}

uint64_t sub_1C4E41020(uint64_t a1)
{
  return *(_QWORD *)(a1 + 560);
}

uint64_t sub_1C4E41028(uint64_t a1)
{
  return *(_QWORD *)(a1 + 560) + 8 * *(unsigned int *)(a1 + 568);
}

uint64_t sub_1C4E41038(uint64_t a1)
{
  return a1 + 760;
}

_DWORD *sub_1C4E41040(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int32x2_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  int32x2_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  int32x2_t v33;
  int32x2_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 *v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t i;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int *v67;
  _QWORD *v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  uint64_t v86;
  int32x2_t *v87;
  unint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  int v95;
  __int128 v96;
  _QWORD v97[9];
  __int128 v98;
  _OWORD v99[26];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 544;
  sub_1C4E433AC(*(_QWORD **)(a1 + 544));
  *(_QWORD *)(a1 + 536) = v2;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 568) = 0;
  v3 = *(_DWORD *)(a1 + 592);
  if (!v3 && !*(_DWORD *)(a1 + 596))
    goto LABEL_46;
  v4 = (_QWORD *)(a1 + 584);
  v5 = *(unsigned int *)(a1 + 600);
  if (v5 <= 4 * v3 || v5 < 0x41)
  {
    if ((_DWORD)v5)
    {
      v16 = *v4;
      v17 = v16 + (v5 << 7);
      v18 = (int32x2_t)0x1FFFFFFFFLL;
      do
      {
        v19 = *(_QWORD *)(v16 + 24);
        if (v19 != -4096)
        {
          if (v19 == -8192)
            goto LABEL_33;
          v20 = *(void **)(v16 + 80);
          if (v20 != (void *)(v16 + 96))
          {
            v34 = v18;
            free(v20);
            v18 = v34;
          }
          if ((*(_BYTE *)(v16 + 40) & 1) == 0)
          {
            v33 = v18;
            MEMORY[0x1CAA32FB4](*(_QWORD *)(v16 + 48), 8);
            v18 = v33;
          }
          v19 = *(_QWORD *)(v16 + 24);
          if (v19 != -4096)
          {
LABEL_33:
            if (v19 && v19 != -8192)
            {
              v21 = *(_QWORD *)(v16 + 8) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v21 = *(_QWORD *)(v16 + 16);
              v22 = *(unint64_t **)(v16 + 16);
              if (v22)
              {
                *v22 = *v22 & 7 | v21;
              }
              else
              {
                v23 = *(_QWORD *)(v16 + 24);
                v24 = ***(int32x2_t ****)v23;
                v25 = (unint64_t)v24[303];
                if (v25 <= v21)
                {
                  v26 = v24[305].u32[0];
                  if (v25 + 16 * v26 > v21)
                  {
                    v27 = v26 - 1;
                    LODWORD(v28) = v27 & ((v23 >> 4) ^ (v23 >> 9));
                    v29 = (uint64_t *)(v25 + 16 * v28);
                    v30 = *v29;
                    if (v23 == *v29)
                    {
LABEL_42:
                      *v29 = -8192;
                      v24[304] = vadd_s32(v24[304], v18);
                      v23 = *(_QWORD *)(v16 + 24);
                    }
                    else
                    {
                      v31 = 1;
                      while (v30 != -4096)
                      {
                        v32 = v28 + v31++;
                        v28 = v32 & v27;
                        v30 = *(_QWORD *)(v25 + 16 * v28);
                        if (v23 == v30)
                        {
                          v29 = (uint64_t *)(v25 + 16 * v28);
                          goto LABEL_42;
                        }
                      }
                    }
                    *(_BYTE *)(v23 + 17) &= ~1u;
                  }
                }
              }
            }
            *(_QWORD *)(v16 + 24) = -4096;
          }
          *(_QWORD *)(v16 + 32) = 0;
        }
        v16 += 128;
      }
      while (v16 != v17);
    }
LABEL_45:
    *(_QWORD *)(a1 + 592) = 0;
    goto LABEL_46;
  }
  sub_1C4E43230((uint64_t *)(a1 + 584));
  if (!v3)
  {
    if (*(_DWORD *)(a1 + 600))
    {
      MEMORY[0x1CAA32FB4](*v4, 8);
      *v4 = 0;
      *(_QWORD *)(a1 + 592) = 0;
      *(_DWORD *)(a1 + 600) = 0;
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  v6 = 1 << (33 - __clz(v3 - 1));
  if (v6 <= 64)
    v7 = 64;
  else
    v7 = v6;
  if (v7 == *(_DWORD *)(a1 + 600))
  {
    *(_QWORD *)(a1 + 592) = 0;
    v8 = (unint64_t)v7 << 7;
    v9 = (_QWORD *)(*(_QWORD *)(a1 + 584) + 16);
    do
    {
      *v9 = 0;
      v9[1] = -4096;
      *(v9 - 2) = &off_1E81374F0;
      *(v9 - 1) = 2;
      v9[2] = 0;
      v9 += 16;
      v8 -= 128;
    }
    while (v8);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 584), 8);
    v10 = (4 * v7 / 3 + 1) | ((unint64_t)(4 * v7 / 3 + 1) >> 1);
    v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
    LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
    *(_DWORD *)(a1 + 600) = v11;
    v12 = (char *)operator new((unint64_t)v11 << 7, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 584) = v12;
    *(_QWORD *)(a1 + 592) = 0;
    v13 = *(unsigned int *)(a1 + 600);
    if ((_DWORD)v13)
    {
      v14 = v13 << 7;
      v15 = v12 + 16;
      do
      {
        *v15 = 0;
        v15[1] = -4096;
        *(v15 - 2) = &off_1E81374F0;
        *(v15 - 1) = 2;
        v15[2] = 0;
        v15 += 16;
        v14 -= 128;
      }
      while (v14);
    }
  }
LABEL_46:
  if (*(_BYTE *)(a1 + 632))
  {
    sub_1C4E43068(a1 + 608);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 608), 8);
    *(_BYTE *)(a1 + 632) = 0;
  }
  v35 = *(_DWORD *)(a1 + 656);
  if (v35 || *(_DWORD *)(a1 + 660))
  {
    v69 = (_QWORD *)(a1 + 648);
    v70 = *(_DWORD *)(a1 + 664);
    if (v70 <= 4 * v35 || v70 < 0x41)
    {
      if (v70)
      {
        v80 = (_QWORD *)*v69;
        v81 = &v80[6 * v70];
        do
        {
          v82 = v80[3];
          if (v82 != -4096)
          {
            if (v82 == -8192)
              goto LABEL_139;
            v83 = v80[5];
            v80[5] = 0;
            if (v83)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v83 + 24))(v83);
              v82 = v80[3];
            }
            if (v82 != -4096)
            {
LABEL_139:
              if (v82 && v82 != -8192)
              {
                v84 = v80[1] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v84 = v80[2];
                v85 = (unint64_t *)v80[2];
                if (v85)
                {
                  *v85 = *v85 & 7 | v84;
                }
                else
                {
                  v86 = v80[3];
                  v87 = ***(int32x2_t ****)v86;
                  v88 = (unint64_t)v87[303];
                  if (v88 <= v84)
                  {
                    v89 = v87[305].u32[0];
                    if (v88 + 16 * v89 > v84)
                    {
                      v90 = v89 - 1;
                      LODWORD(v91) = v90 & ((v86 >> 4) ^ (v86 >> 9));
                      v92 = (uint64_t *)(v88 + 16 * v91);
                      v93 = *v92;
                      if (v86 == *v92)
                      {
LABEL_148:
                        *v92 = -8192;
                        v87[304] = vadd_s32(v87[304], (int32x2_t)0x1FFFFFFFFLL);
                        v86 = v80[3];
                      }
                      else
                      {
                        v94 = 1;
                        while (v93 != -4096)
                        {
                          v95 = v91 + v94++;
                          v91 = v95 & v90;
                          v93 = *(_QWORD *)(v88 + 16 * v91);
                          if (v86 == v93)
                          {
                            v92 = (uint64_t *)(v88 + 16 * v91);
                            goto LABEL_148;
                          }
                        }
                      }
                      *(_BYTE *)(v86 + 17) &= ~1u;
                    }
                  }
                }
              }
              v80[3] = -4096;
            }
            v80[4] = 0;
          }
          v80 += 6;
        }
        while (v80 != v81);
      }
      *(_QWORD *)(a1 + 656) = 0;
    }
    else
    {
      sub_1C4E430CC((_DWORD *)(a1 + 648));
      if (v35)
      {
        v71 = 1 << (33 - __clz(v35 - 1));
        if (v71 <= 64)
          v35 = 64;
        else
          v35 = v71;
      }
      if (v35 == *(_DWORD *)(a1 + 664))
      {
        *(_QWORD *)(a1 + 656) = 0;
        if (v35)
        {
          v72 = 48 * v35;
          v73 = (_QWORD *)(*(_QWORD *)(a1 + 648) + 16);
          do
          {
            *v73 = 0;
            v73[1] = -4096;
            *(v73 - 2) = &off_1E8137518;
            *(v73 - 1) = 2;
            v73[2] = 0;
            v73 += 6;
            v72 -= 48;
          }
          while (v72);
        }
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v69, 8);
        if (v35)
        {
          v74 = (4 * v35 / 3 + 1) | ((unint64_t)(4 * v35 / 3 + 1) >> 1);
          v75 = v74 | (v74 >> 2) | ((v74 | (v74 >> 2)) >> 4);
          LODWORD(v75) = (((v75 | (v75 >> 8)) >> 16) | v75 | (v75 >> 8)) + 1;
          *(_DWORD *)(a1 + 664) = v75;
          v76 = (char *)operator new(48 * v75, (std::align_val_t)8uLL);
          *(_QWORD *)(a1 + 648) = v76;
          *(_QWORD *)(a1 + 656) = 0;
          v77 = *(unsigned int *)(a1 + 664);
          if ((_DWORD)v77)
          {
            v78 = 48 * v77;
            v79 = v76 + 16;
            do
            {
              *v79 = 0;
              v79[1] = -4096;
              *(v79 - 2) = &off_1E8137518;
              *(v79 - 1) = 2;
              v79[2] = 0;
              v79 += 6;
              v78 -= 48;
            }
            while (v78);
          }
        }
        else
        {
          *v69 = 0;
          *(_QWORD *)(a1 + 656) = 0;
          *(_DWORD *)(a1 + 664) = 0;
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 696))
  {
    sub_1C4E43068(a1 + 672);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 672), 8);
    *(_BYTE *)(a1 + 696) = 0;
  }
  *(_BYTE *)(a1 + 16) = 0;
  v36 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 72))(v36);
  memset(v99, 0, sizeof(v99));
  v98 = 0u;
  memset(&v97[1], 0, 64);
  v37 = 1;
  v97[0] = 1;
  do
  {
    v97[v37] = -4096;
    v37 += 2;
  }
  while (v37 != 9);
  *(_QWORD *)&v98 = v99;
  *((_QWORD *)&v98 + 1) = 0x400000000;
  v38 = (_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 40), 8);
  v39 = 0;
  *(_DWORD *)(a1 + 32) = 1;
  v40 = (__int128 *)(a1 + 104);
  do
  {
    *(_QWORD *)(a1 + 40 + v39) = -4096;
    v39 += 16;
  }
  while (v39 != 64);
  v41 = *(_DWORD *)(a1 + 32);
  v42 = HIDWORD(v97[0]);
  v43 = v97[0] & 1;
  v44 = v41 & 0xFFFFFFFE | v43;
  v45 = v97[0] & 0xFFFFFFFE | v41 & 1;
  *(_DWORD *)(a1 + 32) = v45;
  *(_DWORD *)(a1 + 36) = v42;
  v97[0] = v44;
  if ((v41 & 1) == 0)
  {
    if (!v43)
    {
      v46 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v97[1];
      v97[1] = v46;
      LODWORD(v46) = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(a1 + 48) = v97[2];
      LODWORD(v97[2]) = v46;
      goto LABEL_82;
    }
    v44 = v45;
    v47 = (_QWORD *)(a1 + 32);
    v38 = v97;
    goto LABEL_77;
  }
  v47 = v97;
  if (!v43)
  {
LABEL_77:
    v54 = 0;
    v96 = *(_OWORD *)(v47 + 1);
    *(_DWORD *)v47 = v44 | 1;
    do
    {
      v55 = v38[v54 + 1];
      v47[v54 + 1] = v55;
      if ((v55 | 0x1000) != 0xFFFFFFFFFFFFF000)
        LODWORD(v47[v54 + 2]) = v38[v54 + 2];
      v54 += 2;
    }
    while (v54 != 8);
    *(_DWORD *)v38 &= ~1u;
    *(_OWORD *)(v38 + 1) = v96;
    goto LABEL_82;
  }
  for (i = 0; i != 8; i += 2)
  {
    v49 = a1 + i * 8;
    v50 = &v97[i];
    v51 = *(_QWORD *)(a1 + i * 8 + 40);
    v52 = v97[i + 1];
    if (v51 == -4096 || v51 == -8192 || v52 == -4096 || v52 == -8192)
    {
      *(_QWORD *)(v49 + 40) = v52;
      v50[1] = v51;
      if ((v51 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if ((v52 | 0x1000) != 0xFFFFFFFFFFFFF000)
          *(_DWORD *)(a1 + i * 8 + 48) = v97[i + 2];
      }
      else
      {
        LODWORD(v97[i + 2]) = *(_DWORD *)(a1 + i * 8 + 48);
      }
    }
    else
    {
      v53 = *(_DWORD *)(a1 + i * 8 + 48);
      *(_QWORD *)(v49 + 40) = v52;
      *(_DWORD *)(a1 + i * 8 + 48) = v97[i + 2];
      v50[1] = v51;
      LODWORD(v97[i + 2]) = v53;
    }
  }
LABEL_82:
  if (v40 == &v98)
    goto LABEL_106;
  if ((_OWORD *)v98 != v99)
  {
    sub_1C6197F44((char **)(a1 + 104), (char **)&v98);
    goto LABEL_106;
  }
  v56 = DWORD2(v98);
  v57 = *(unsigned int *)(a1 + 112);
  if (v57 >= DWORD2(v98))
  {
    v58 = *(_QWORD *)v40;
    if (DWORD2(v98))
    {
      v59 = sub_1C4E4D3A8((uint64_t)v99, (uint64_t)v99 + 104 * DWORD2(v98), v58);
      v58 = *(_QWORD *)(a1 + 104);
      LODWORD(v57) = *(_DWORD *)(a1 + 112);
    }
    else
    {
      v59 = *(_QWORD *)v40;
    }
    if (v58 + 104 * v57 != v59)
    {
      v60 = v58 + 104 * v57 - 32;
      do
      {
        v61 = *(void **)(v60 - 16);
        if ((void *)v60 != v61)
          free(v61);
        if ((*(_BYTE *)(v60 - 56) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v60 - 48), 8);
        v62 = v60 - 72;
        v60 -= 104;
      }
      while (v62 != v59);
    }
    goto LABEL_105;
  }
  if (*(_DWORD *)(a1 + 116) < DWORD2(v98))
  {
    sub_1C4E4D328((uint64_t *)(a1 + 104));
    sub_1C6195C80(a1 + 104, v56);
  }
  else if ((_DWORD)v57)
  {
    sub_1C4E4D3A8((uint64_t)v99, (uint64_t)v99 + 104 * v57, *(_QWORD *)v40);
    goto LABEL_102;
  }
  v57 = 0;
LABEL_102:
  if (v57 != DWORD2(v98))
  {
    v63 = (unsigned int *)(v98 + 104 * DWORD2(v98));
    v64 = 104 * v57 + 16;
    v65 = (unsigned int *)(*(_QWORD *)v40 + v64);
    v66 = (unsigned int *)(v98 + v64);
    do
    {
      *((_QWORD *)v65 - 2) = *((_QWORD *)v66 - 2);
      *((_BYTE *)v65 - 8) = *((_BYTE *)v66 - 8);
      v65 = sub_1C4E44570(v65, v66) + 26;
      v67 = v66 + 22;
      v66 += 26;
    }
    while (v67 != v63);
  }
LABEL_105:
  *(_DWORD *)(a1 + 112) = v56;
  sub_1C4E4D328((uint64_t *)&v98);
LABEL_106:
  sub_1C4E433FC((void **)&v98);
  if ((v97[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v97[1], 8);
  sub_1C4E2F044((_DWORD *)(a1 + 712));
  return sub_1C4E2F044((_DWORD *)(a1 + 736));
}

BOOL sub_1C4E41A9C(uint64_t a1, llvm::Function *a2)
{
  int hasAddressTaken;
  _BOOL8 result;
  uint64_t v6;

  hasAddressTaken = llvm::Function::hasAddressTaken(a2, 0, 0, 1, 0, 0);
  result = 0;
  if (hasAddressTaken)
  {
    v6 = a1 + 32;
    sub_1C4E44E6C(v6, (llvm::Type **)a2);
    return *(_BYTE *)(sub_1C4E458C0(v6, (uint64_t)a2) + 8) == 0;
  }
  return result;
}

_QWORD *sub_1C4E41B10(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_1C4E2FB20(a1 + 712, &v5);
  *((_DWORD *)result + 2) = a3;
  return result;
}

uint64_t sub_1C4E41B48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v9;

  v2 = *(_QWORD *)(a1 + 712);
  v3 = *(unsigned int *)(a1 + 728);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_6;
    v7 = 1;
    while (v6 != -4096)
    {
      v9 = v4 + v7++;
      v4 = v9 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_6;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_6:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  else
    return *((unsigned int *)v5 + 2) | 0x100000000;
}

_QWORD *sub_1C4E41BC8(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_1C4E2FB20(a1 + 736, &v5);
  *((_DWORD *)result + 2) = a3;
  return result;
}

uint64_t sub_1C4E41C00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v9;

  v2 = *(_QWORD *)(a1 + 736);
  v3 = *(unsigned int *)(a1 + 752);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_6;
    v7 = 1;
    while (v6 != -4096)
    {
      v9 = v4 + v7++;
      v4 = v9 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_6;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_6:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  else
    return *((unsigned int *)v5 + 2) | 0x100000000;
}

uint64_t sub_1C4E41C80(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = a1 + (v4 << 7);
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 == a3)
    {
      v9 = 1;
    }
    else
    {
      v7 = 0;
      v8 = 1;
      while (v6 != -4096)
      {
        if (v7)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v7 = v5;
        v12 = v4 + v8++;
        v4 = v12 & (a2 - 1);
        v5 = a1 + (v4 << 7);
        v6 = *(_QWORD *)(v5 + 24);
        v9 = 1;
        if (v6 == a3)
          goto LABEL_7;
      }
      v9 = 0;
      if (v7)
        v5 = v7;
    }
  }
  else
  {
    v5 = 0;
    v9 = 0;
  }
LABEL_7:
  *a4 = v5;
  return v9;
}

uint64_t sub_1C4E41D14(uint64_t a1, unsigned int *a2)
{
  int64x2_t v4;

  *(_QWORD *)a1 = 1;
  v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 8) = v4;
  *(int64x2_t *)(a1 + 24) = v4;
  sub_1C4E41E00((unsigned int *)a1, a2);
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 48) = 0x400000000;
  if (a2[12])
    sub_1C4E41EEC(a1 + 40, (uint64_t)(a2 + 10));
  return a1;
}

_QWORD *sub_1C4E41D80(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 4)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 5;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = operator new(8 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[v5];
  do
LABEL_4:
    *result++ = -4096;
  while (result != v4);
  return result;
}

unsigned int *sub_1C4E41E00(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t i;
  uint64_t v11;
  __int128 v12;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) != 0)
  {
    if ((v4 & 1) != 0)
    {
      v5 = 0;
      v6 = (int *)(result + 2);
      v7 = (int *)(a2 + 2);
      do
      {
        v8 = *(_QWORD *)&v6[v5];
        *(_QWORD *)&v6[v5] = *(_QWORD *)&v7[v5];
        *(_QWORD *)&v7[v5] = v8;
        v5 += 2;
      }
      while (v5 != 8);
      return result;
    }
    v9 = a2;
  }
  else
  {
    if ((v4 & 1) == 0)
    {
      v11 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v11;
      LODWORD(v11) = result[4];
      result[4] = a2[4];
      a2[4] = v11;
      return result;
    }
    v4 = *result;
    v9 = result;
    result = a2;
  }
  v12 = *(_OWORD *)(v9 + 2);
  *v9 = v4 | 1;
  for (i = 2; i != 10; i += 2)
    *(_QWORD *)&v9[i] = *(_QWORD *)&result[i];
  *result &= ~1u;
  *(_OWORD *)(result + 2) = v12;
  return result;
}

uint64_t sub_1C4E41EEC(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v4 = a2 + 16;
    v3 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v11 = a2;
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v3 = *(const void **)v11;
      }
      *(_QWORD *)a1 = v3;
      v13 = v11;
      v14 = *(_QWORD *)(v11 + 8);
      v6 = (_DWORD *)(v11 + 8);
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
      goto LABEL_10;
    }
    v6 = (_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v16 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 8);
      a2 = v16;
    }
    else if ((_DWORD)v7)
    {
      v15 = *(unsigned int *)(a1 + 8);
      v17 = a2;
      memmove(*(void **)a1, v3, 8 * v7);
      v8 = v15;
      a2 = v17;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v8), *(_QWORD *)a2 + 8 * v9 - (*(_QWORD *)a2 + 8 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

uint64_t sub_1C4E42024(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  _DWORD *v7;
  uint64_t v8;

  v3 = a1[2];
  v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[3] > v4 >> 3)
  {
    goto LABEL_3;
  }
  v7 = a1;
  sub_1C4E420E0((uint64_t)a1, v4);
  v8 = 0;
  sub_1C4E41C80(*(_QWORD *)v7, v7[4], *(_QWORD *)(a2 + 24), &v8);
  a1 = v7;
  a3 = v8;
LABEL_3:
  ++a1[2];
  if (*(_QWORD *)(a3 + 24) != -4096)
    --a1[3];
  return a3;
}

char *sub_1C4E420E0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new((unint64_t)v8 << 7, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4E421B4(a1, v4, v4 + (v3 << 7));
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = v10 << 7;
    v12 = result + 16;
    do
    {
      *v12 = 0;
      v12[1] = -4096;
      *(v12 - 2) = &off_1E81374F0;
      *(v12 - 1) = 2;
      v12[2] = 0;
      v12 += 16;
      v11 -= 128;
    }
    while (v11);
  }
  return result;
}

void sub_1C4E421B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  int32x2_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  int64x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v28;
  uint64_t *v29;
  uint64_t i64;
  void *v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  int32x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  int64x2_t v44;
  int64x2_t *v45;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = v6 << 7;
    v8 = (_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      *v8 = 0;
      v8[1] = -4096;
      *(v8 - 2) = &off_1E81374F0;
      *(v8 - 1) = 2;
      v8[2] = 0;
      v8 += 16;
      v7 -= 128;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v44 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      v9 = *(_QWORD *)(v4 + 24);
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v45 = 0;
        sub_1C4E41C80(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v45);
        v23 = v45;
        v24 = v45[1].i64[1];
        v25 = *(_QWORD *)(v4 + 24);
        if (v24 != v25)
        {
          v26 = v24 == -4096 || v24 == 0;
          if (!v26 && v24 != -8192)
          {
            v32 = v45->i64[1] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v32 = v45[1].i64[0];
            v33 = (unint64_t *)v23[1].i64[0];
            if (v33)
            {
              *v33 = *v33 & 7 | v32;
            }
            else
            {
              v34 = v23[1].i64[1];
              v35 = ***(int32x2_t ****)v34;
              v36 = (unint64_t)v35[303];
              if (v36 <= v32)
              {
                v37 = v35[305].u32[0];
                if (v36 + 16 * v37 > v32)
                {
                  v38 = v37 - 1;
                  LODWORD(v39) = v38 & ((v34 >> 4) ^ (v34 >> 9));
                  v40 = (uint64_t *)(v36 + 16 * v39);
                  v41 = *v40;
                  if (v34 == *v40)
                  {
LABEL_54:
                    *v40 = -8192;
                    v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
                    v34 = v23[1].i64[1];
                  }
                  else
                  {
                    v42 = 1;
                    while (v41 != -4096)
                    {
                      v43 = v39 + v42++;
                      v39 = v43 & v38;
                      v41 = *(_QWORD *)(v36 + 16 * v39);
                      if (v34 == v41)
                      {
                        v40 = (uint64_t *)(v36 + 16 * v39);
                        goto LABEL_54;
                      }
                    }
                  }
                  *(_BYTE *)(v34 + 17) &= ~1u;
                }
              }
            }
            v25 = *(_QWORD *)(v4 + 24);
          }
          v23[1].i64[1] = v25;
          if (v25 != -4096 && v25 != -8192 && v25 != 0)
          {
            v28 = *(_QWORD *)(v4 + 8);
            v23[1].i64[0] = *(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)(v28 & 0xFFFFFFFFFFFFFFF8) = &v23->i64[1];
            v23->i64[1] = v28 & 0xFFFFFFFFFFFFFFF8 | v23->i64[1] & 7;
            v29 = (uint64_t *)v23[1].i64[0];
            if (v29)
              *v29 = *v29 & 7 | (unint64_t)&v23[1];
          }
        }
        v23[2].i64[0] = *(_QWORD *)(v4 + 32);
        v23[2].i64[1] = 1;
        v23[3] = v44;
        v23[4] = v44;
        sub_1C4E41E00(&v23[2].u32[2], (unsigned int *)(v4 + 40));
        v23[5].i64[0] = (uint64_t)v23[6].i64;
        i64 = (uint64_t)v23[5].i64;
        *(_QWORD *)(i64 + 8) = 0x400000000;
        if (*(_DWORD *)(v4 + 88))
          sub_1C4E41EEC(i64, v4 + 80);
        ++*(_DWORD *)(a1 + 8);
        v31 = *(void **)(v4 + 80);
        if (v31 != (void *)(v4 + 96))
          free(v31);
        if ((*(_BYTE *)(v4 + 40) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v4 + 48), 8);
        v9 = *(_QWORD *)(v4 + 24);
      }
      if (v9 != -4096 && v9 != -8192 && v9 != 0)
      {
        v11 = *(_QWORD *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v11 = *(_QWORD *)(v4 + 16);
        v12 = *(unint64_t **)(v4 + 16);
        if (v12)
        {
          *v12 = *v12 & 7 | v11;
        }
        else
        {
          v13 = *(_QWORD *)(v4 + 24);
          v14 = ***(int32x2_t ****)v13;
          v15 = (unint64_t)v14[303];
          if (v15 <= v11)
          {
            v16 = v14[305].u32[0];
            if (v15 + 16 * v16 > v11)
            {
              v17 = v16 - 1;
              LODWORD(v18) = v17 & ((v13 >> 4) ^ (v13 >> 9));
              v19 = (uint64_t *)(v15 + 16 * v18);
              v20 = *v19;
              if (v13 == *v19)
              {
LABEL_20:
                *v19 = -8192;
                v14[304] = vadd_s32(v14[304], (int32x2_t)0x1FFFFFFFFLL);
                v13 = *(_QWORD *)(v4 + 24);
              }
              else
              {
                v21 = 1;
                while (v20 != -4096)
                {
                  v22 = v18 + v21++;
                  v18 = v22 & v17;
                  v20 = *(_QWORD *)(v15 + 16 * v18);
                  if (v13 == v20)
                  {
                    v19 = (uint64_t *)(v15 + 16 * v18);
                    goto LABEL_20;
                  }
                }
              }
              *(_BYTE *)(v13 + 17) &= ~1u;
            }
          }
        }
      }
      v4 += 128;
    }
    while (v4 != a3);
  }
}

_QWORD *sub_1C4E42548(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t *v6;

  v2 = *a2 & 6;
  *result = v2;
  result[1] = 0;
  v3 = a2[2];
  result[2] = v3;
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
  {
    v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
    result[1] = *(_QWORD *)v5;
    *(_QWORD *)v5 = result;
    *result = v5 | v2;
    v6 = (unint64_t *)result[1];
    if (v6)
      *v6 = *v6 & 7 | (unint64_t)(result + 1);
  }
  return result;
}

uint64_t sub_1C4E425B0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = a1 + 48 * v5;
    v7 = *(_QWORD *)(v6 + 24);
    if (v7 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = a1 + 48 * (v11 & v4);
        v7 = *(_QWORD *)(v6 + 24);
        if (v7 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

uint64_t sub_1C4E4263C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD ***v6;
  uint64_t v7;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  _QWORD ***v16;
  _QWORD ***v17;
  unint64_t v19;
  _QWORD *v20;
  unint64_t *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  _QWORD ***v27;
  int32x2_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD ***v34;
  int v35;
  int v36;
  unint64_t v38;
  _QWORD ***v39;
  int32x2_t *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD ***v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  int32x2_t *v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t *v64;
  _QWORD ***v65;
  uint64_t v66;
  uint64_t (**v67)(llvm::CallbackVH *__hidden);
  unint64_t v68;
  unint64_t *v69;
  _QWORD ***v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;

  v6 = *(_QWORD ****)a3;
  v7 = 2;
  v63 = 2;
  v64 = 0;
  v65 = v6;
  if (v6 != (_QWORD ***)-8192 && v6 != (_QWORD ***)-4096 && v6 != 0)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v63);
    v7 = v63;
    v6 = v65;
  }
  v66 = a2;
  v68 = v7 & 6;
  v69 = 0;
  v70 = v6;
  if (v6 == (_QWORD ***)-8192)
  {
    v10 = a2;
  }
  else
  {
    v9 = v6 == (_QWORD ***)-4096 || v6 == 0;
    v10 = a2;
    if (!v9)
    {
      v69 = *(unint64_t **)(v7 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8) = &v68;
      v68 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if (v69)
        *v69 = *v69 & 7 | (unint64_t)&v69;
      v10 = v66;
      v6 = v70;
    }
  }
  v67 = &off_1E8137518;
  v11 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v71 = v10;
  v72 = v11;
  v73 = 0;
  v12 = sub_1C4E425B0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), (uint64_t)v6, &v73);
  v13 = v73;
  v14 = *(_DWORD *)(a2 + 16);
  if ((v12 & 1) != 0)
  {
    v23 = 0;
    goto LABEL_30;
  }
  v15 = *(_DWORD *)(a2 + 8);
  if (4 * v15 + 4 >= 3 * v14)
  {
    v14 *= 2;
    goto LABEL_78;
  }
  if (v14 + ~v15 - *(_DWORD *)(a2 + 12) <= v14 >> 3)
  {
LABEL_78:
    sub_1C4E42B4C(a2, v14);
    v73 = 0;
    sub_1C4E425B0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), (uint64_t)v70, &v73);
    v13 = v73;
  }
  ++*(_DWORD *)(a2 + 8);
  v16 = (_QWORD ***)v13[3];
  if (v16 != (_QWORD ***)-4096)
    --*(_DWORD *)(a2 + 12);
  v17 = v70;
  if (v16 != v70)
  {
    if (v16 != (_QWORD ***)-4096 && v16 && v16 != (_QWORD ***)-8192)
    {
      v49 = v13[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v49 = v13[2];
      v50 = (unint64_t *)v13[2];
      if (v50)
      {
        *v50 = *v50 & 7 | v49;
      }
      else
      {
        v51 = v13[3];
        v52 = ***(int32x2_t ****)v51;
        v53 = (unint64_t)v52[303];
        if (v53 <= v49)
        {
          v54 = v52[305].u32[0];
          if (v53 + 16 * v54 > v49)
          {
            v55 = v54 - 1;
            LODWORD(v56) = v55 & ((v51 >> 4) ^ (v51 >> 9));
            v57 = (uint64_t *)(v53 + 16 * v56);
            v58 = *v57;
            if (v51 == *v57)
            {
LABEL_73:
              *v57 = -8192;
              v52[304] = vadd_s32(v52[304], (int32x2_t)0x1FFFFFFFFLL);
              v51 = v13[3];
            }
            else
            {
              v59 = 1;
              while (v58 != -4096)
              {
                v60 = v56 + v59++;
                v56 = v60 & v55;
                v58 = *(_QWORD *)(v53 + 16 * v56);
                if (v51 == v58)
                {
                  v57 = (uint64_t *)(v53 + 16 * v56);
                  goto LABEL_73;
                }
              }
            }
            *(_BYTE *)(v51 + 17) &= ~1u;
          }
        }
      }
      v17 = v70;
    }
    v13[3] = v17;
    if (v17 != (_QWORD ***)-4096 && v17 != (_QWORD ***)-8192 && v17 != 0)
    {
      v19 = v68;
      v20 = (_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF8);
      v13[2] = *(_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF8);
      *v20 = v13 + 1;
      v13[1] = v19 & 0xFFFFFFFFFFFFFFF8 | v13[1] & 7;
      v21 = (unint64_t *)v13[2];
      if (v21)
        *v21 = *v21 & 7 | (unint64_t)(v13 + 2);
    }
  }
  v13[4] = v71;
  v22 = v72;
  v72 = 0;
  v13[5] = v22;
  v14 = *(_DWORD *)(a2 + 16);
  v23 = 1;
LABEL_30:
  v24 = *(_QWORD *)a2;
  result = v72;
  v72 = 0;
  if (result)
  {
    v61 = v23;
    v62 = v14;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    v23 = v61;
    v14 = v62;
  }
  if (v70 != (_QWORD ***)-8192 && v70 != (_QWORD ***)-4096 && v70)
  {
    v26 = v68 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v68 & 0xFFFFFFFFFFFFFFF8) = v69;
    if (v69)
    {
      *v69 = *v69 & 7 | v26;
    }
    else
    {
      v27 = v70;
      v28 = (int32x2_t *)***v70;
      v29 = (unint64_t)v28[303];
      if (v29 <= v26)
      {
        v30 = v28[305].u32[0];
        if (v29 + 16 * v30 > v26)
        {
          v31 = v30 - 1;
          LODWORD(v32) = v31 & ((v70 >> 4) ^ (v70 >> 9));
          v33 = (_QWORD *)(v29 + 16 * v32);
          v34 = (_QWORD ***)*v33;
          if (v70 == (_QWORD ***)*v33)
          {
LABEL_43:
            *v33 = -8192;
            v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
            v27 = v70;
          }
          else
          {
            v35 = 1;
            while (v34 != (_QWORD ***)-4096)
            {
              v36 = v32 + v35++;
              v32 = v36 & v31;
              v34 = *(_QWORD ****)(v29 + 16 * v32);
              if (v70 == v34)
              {
                v33 = (_QWORD *)(v29 + 16 * v32);
                goto LABEL_43;
              }
            }
          }
          *((_BYTE *)v27 + 17) &= ~1u;
        }
      }
    }
  }
  if (v65 != (_QWORD ***)-8192 && v65 != (_QWORD ***)-4096 && v65 != 0)
  {
    v38 = v63 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF8) = v64;
    if (v64)
    {
      *v64 = *v64 & 7 | v38;
    }
    else
    {
      v39 = v65;
      v40 = (int32x2_t *)***v65;
      v41 = (unint64_t)v40[303];
      if (v41 <= v38)
      {
        v42 = v40[305].u32[0];
        if (v41 + 16 * v42 > v38)
        {
          v43 = v42 - 1;
          LODWORD(v44) = v43 & ((v65 >> 4) ^ (v65 >> 9));
          v45 = (_QWORD *)(v41 + 16 * v44);
          v46 = (_QWORD ***)*v45;
          if (v65 == (_QWORD ***)*v45)
          {
LABEL_59:
            *v45 = -8192;
            v40[304] = vadd_s32(v40[304], (int32x2_t)0x1FFFFFFFFLL);
            v39 = v65;
          }
          else
          {
            v47 = 1;
            while (v46 != (_QWORD ***)-4096)
            {
              v48 = v44 + v47++;
              v44 = v48 & v43;
              v46 = *(_QWORD ****)(v41 + 16 * v44);
              if (v65 == v46)
              {
                v45 = (_QWORD *)(v41 + 16 * v44);
                goto LABEL_59;
              }
            }
          }
          *((_BYTE *)v39 + 17) &= ~1u;
        }
      }
    }
  }
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v24 + 48 * v14;
  *(_BYTE *)(a1 + 16) = v23;
  return result;
}

char *sub_1C4E42B4C(uint64_t a1, int a2)
{
  unsigned int v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4E42C2C(a1, v4, &v4[6 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 48 * v10;
    v12 = result + 16;
    do
    {
      *v12 = 0;
      v12[1] = -4096;
      *(v12 - 2) = &off_1E8137518;
      *(v12 - 1) = 2;
      v12[2] = 0;
      v12 += 6;
      v11 -= 48;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4E42C2C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  int32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  int32x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  _QWORD *v44;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = 48 * v6;
    v8 = (_QWORD *)(*(_QWORD *)result + 16);
    do
    {
      *v8 = 0;
      v8[1] = -4096;
      *(v8 - 2) = &off_1E8137518;
      *(v8 - 1) = 2;
      v8[2] = 0;
      v8 += 6;
      v7 -= 48;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = v4[3];
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v44 = 0;
        sub_1C4E425B0(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v44);
        v24 = v44;
        v25 = v44[3];
        v26 = v4[3];
        if (v25 != v26)
        {
          v27 = v25 == -4096 || v25 == 0;
          if (!v27 && v25 != -8192)
          {
            v32 = v44[1] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v32 = v44[2];
            v33 = (unint64_t *)v24[2];
            if (v33)
            {
              *v33 = *v33 & 7 | v32;
            }
            else
            {
              v34 = v24[3];
              v35 = ***(int32x2_t ****)v34;
              v36 = (unint64_t)v35[303];
              if (v36 <= v32)
              {
                v37 = v35[305].u32[0];
                if (v36 + 16 * v37 > v32)
                {
                  v38 = v37 - 1;
                  LODWORD(v39) = v38 & ((v34 >> 4) ^ (v34 >> 9));
                  v40 = (uint64_t *)(v36 + 16 * v39);
                  v41 = *v40;
                  if (v34 == *v40)
                  {
LABEL_48:
                    *v40 = -8192;
                    v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
                    v34 = v24[3];
                  }
                  else
                  {
                    v42 = 1;
                    while (v41 != -4096)
                    {
                      v43 = v39 + v42++;
                      v39 = v43 & v38;
                      v41 = *(_QWORD *)(v36 + 16 * v39);
                      if (v34 == v41)
                      {
                        v40 = (uint64_t *)(v36 + 16 * v39);
                        goto LABEL_48;
                      }
                    }
                  }
                  *(_BYTE *)(v34 + 17) &= ~1u;
                }
              }
            }
            v26 = v4[3];
          }
          v24[3] = v26;
          if (v26 != -4096 && v26 != -8192 && v26 != 0)
          {
            v29 = v4[1];
            v24[2] = *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)(v29 & 0xFFFFFFFFFFFFFFF8) = v24 + 1;
            v24[1] = v29 & 0xFFFFFFFFFFFFFFF8 | v24[1] & 7;
            v30 = (unint64_t *)v24[2];
            if (v30)
              *v30 = *v30 & 7 | (unint64_t)(v24 + 2);
          }
        }
        v24[4] = v4[4];
        v31 = v4[5];
        v4[5] = 0;
        v24[5] = v31;
        ++*(_DWORD *)(v5 + 8);
        result = v4[5];
        v4[5] = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      }
      v10 = v4[3];
      if (v10 != -4096 && v10 != -8192 && v10 != 0)
      {
        v12 = v4[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v12 = v4[2];
        v13 = (unint64_t *)v4[2];
        if (v13)
        {
          *v13 = *v13 & 7 | v12;
        }
        else
        {
          v14 = v4[3];
          v15 = ***(int32x2_t ****)v14;
          v16 = (unint64_t)v15[303];
          if (v16 <= v12)
          {
            v17 = v15[305].u32[0];
            if (v16 + 16 * v17 > v12)
            {
              v18 = v17 - 1;
              LODWORD(v19) = v18 & ((v14 >> 4) ^ (v14 >> 9));
              v20 = (uint64_t *)(v16 + 16 * v19);
              v21 = *v20;
              if (v14 == *v20)
              {
LABEL_19:
                *v20 = -8192;
                v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
                v14 = v4[3];
              }
              else
              {
                v22 = 1;
                while (v21 != -4096)
                {
                  v23 = v19 + v22++;
                  v19 = v23 & v18;
                  v21 = *(_QWORD *)(v16 + 16 * v19);
                  if (v14 == v21)
                  {
                    v20 = (uint64_t *)(v16 + 16 * v19);
                    goto LABEL_19;
                  }
                }
              }
              *(_BYTE *)(v14 + 17) &= ~1u;
            }
          }
        }
      }
      v4 += 6;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1C4E42F54(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E8137460;
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 736), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 712), 8);
  sub_1C4E4302C(a1 + 672);
  sub_1C4E430CC((_DWORD *)(a1 + 648));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 648), 8);
  sub_1C4E4302C(a1 + 608);
  sub_1C4E43230((uint64_t *)(a1 + 584));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 584), 8);
  v2 = *(void **)(a1 + 560);
  if (v2 != (void *)(a1 + 576))
    free(v2);
  sub_1C4E433AC(*(_QWORD **)(a1 + 544));
  sub_1C4E433FC((void **)(a1 + 104));
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 40), 8);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  return a1;
}

uint64_t sub_1C4E4302C(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 24))
  {
    v1 = result;
    sub_1C4E43068(result);
    result = MEMORY[0x1CAA32FB4](*(_QWORD *)v1, 8);
    *(_BYTE *)(v1 + 24) = 0;
  }
  return result;
}

uint64_t sub_1C4E43068(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 **v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 16 * v1;
    v3 = (unsigned __int8 **)(*(_QWORD *)result + 8);
    do
    {
      v4 = (uint64_t)*(v3 - 1);
      if (v4 != -4096 && v4 != -8192)
      {
        if (*v3)
          result = llvm::MetadataTracking::untrack((uint64_t)v3, *v3);
      }
      v3 += 2;
      v2 -= 16;
    }
    while (v2);
  }
  return result;
}

_DWORD *sub_1C4E430CC(_DWORD *result)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;

  v1 = result[4];
  if (v1)
  {
    v2 = *(_QWORD **)result;
    v3 = *(_QWORD *)result + 48 * v1;
    do
    {
      v4 = v2[3];
      if ((v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        result = (_DWORD *)v2[5];
        v2[5] = 0;
        if (result)
        {
          result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 24))(result);
          v4 = v2[3];
        }
      }
      if (v4 != -4096 && v4 != -8192 && v4 != 0)
      {
        v6 = v2[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v6 = v2[2];
        v7 = (unint64_t *)v2[2];
        if (v7)
        {
          *v7 = *v7 & 7 | v6;
        }
        else
        {
          v8 = v2[3];
          v9 = ***(int32x2_t ****)v8;
          v10 = (unint64_t)v9[303];
          if (v10 <= v6)
          {
            v11 = v9[305].u32[0];
            if (v10 + 16 * v11 > v6)
            {
              v12 = v11 - 1;
              LODWORD(v13) = v12 & ((v8 >> 4) ^ (v8 >> 9));
              v14 = (uint64_t *)(v10 + 16 * v13);
              v15 = *v14;
              if (v8 == *v14)
              {
LABEL_22:
                *v14 = -8192;
                v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
                v8 = v2[3];
              }
              else
              {
                v16 = 1;
                while (v15 != -4096)
                {
                  v17 = v13 + v16++;
                  v13 = v17 & v12;
                  v15 = *(_QWORD *)(v10 + 16 * v13);
                  if (v8 == v15)
                  {
                    v14 = (uint64_t *)(v10 + 16 * v13);
                    goto LABEL_22;
                  }
                }
              }
              *(_BYTE *)(v8 + 17) &= ~1u;
            }
          }
        }
      }
      v2 += 6;
    }
    while (v2 != (_QWORD *)v3);
  }
  return result;
}

void sub_1C4E43230(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  v1 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v1)
  {
    v2 = *a1;
    v3 = *a1 + (v1 << 7);
    do
    {
      v4 = *(_QWORD *)(v2 + 24);
      if ((v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v5 = *(void **)(v2 + 80);
        if (v5 != (void *)(v2 + 96))
          free(v5);
        if ((*(_BYTE *)(v2 + 40) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 48), 8);
        v4 = *(_QWORD *)(v2 + 24);
      }
      if (v4 != -4096 && v4 != -8192 && v4 != 0)
      {
        v7 = *(_QWORD *)(v2 + 8) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v7 = *(_QWORD *)(v2 + 16);
        v8 = *(unint64_t **)(v2 + 16);
        if (v8)
        {
          *v8 = *v8 & 7 | v7;
        }
        else
        {
          v9 = *(_QWORD *)(v2 + 24);
          v10 = ***(int32x2_t ****)v9;
          v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              v15 = (uint64_t *)(v11 + 16 * v14);
              v16 = *v15;
              if (v9 == *v15)
              {
LABEL_25:
                *v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                v9 = *(_QWORD *)(v2 + 24);
              }
              else
              {
                v17 = 1;
                while (v16 != -4096)
                {
                  v18 = v14 + v17++;
                  v14 = v18 & v13;
                  v16 = *(_QWORD *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_25;
                  }
                }
              }
              *(_BYTE *)(v9 + 17) &= ~1u;
            }
          }
        }
      }
      v2 += 128;
    }
    while (v2 != v3);
  }
}

void sub_1C4E433AC(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    sub_1C4E433AC(*a1);
    sub_1C4E433AC(a1[1]);
    v2 = a1[5];
    a1[5] = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    operator delete(a1);
  }
}

void **sub_1C4E433FC(void **result)
{
  void **v1;
  unsigned int v2;
  void **v3;
  uint64_t v4;
  char *v5;
  void **v6;
  char *v7;

  v1 = (void **)*result;
  v2 = *((_DWORD *)result + 2);
  if (v2)
  {
    v6 = result;
    v7 = (char *)*result;
    v4 = 104 * v2;
    do
    {
      v5 = *(char **)&v7[v4 - 48];
      if (&v7[v4 - 32] != v5)
        free(v5);
      if ((v7[v4 - 88] & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)&v7[v4 - 80], 8);
      v4 -= 104;
    }
    while (v4);
    result = v6;
    v1 = (void **)*v6;
  }
  if (v1 != result + 2)
  {
    v3 = result;
    free(v1);
    return v3;
  }
  return result;
}

uint64_t sub_1C4E434A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Module *v6;
  int v8;
  unsigned int v9;
  uint64_t i;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  __int32 v21[4];
  uint64_t v22;
  __int32 __s[2];
  uint64_t v24;
  void *v25;
  unsigned int v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  v6 = *(llvm::Module **)(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 16) == 3 && (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 0)
      return 0;
  }
  else if (*(_QWORD *)(a1 + 72) == a1 + 72 && (*(_BYTE *)(a1 + 34) & 0x80) == 0)
  {
    return 0;
  }
  v8 = (*(unsigned __int16 *)(a1 + 18) >> 4) & 0x3FF;
  if (v8 == 105)
  {
    __s[0] = 100;
    if (sub_1C4E44B78((uint64_t ***)a1, (uint64_t)".thread_invariants", 18, (uint64_t)"", 0, __s, 1))
      return 5;
    return 6;
  }
  v9 = v8 - 100;
  if (!v9)
  {
    *(_QWORD *)__s = 0x6600000069;
    LODWORD(v24) = 101;
    if (sub_1C4E44B78((uint64_t ***)a1, (uint64_t)"", 0, (uint64_t)".thread_invariants", 18, __s, 3))
      return 1;
    v22 = 0x6A00000067;
    *(_OWORD *)v21 = *(_OWORD *)"e";
    if (sub_1C4E44B78((uint64_t ***)a1, (uint64_t)"", 0, (uint64_t)".constant_program", 17, v21, 6)
      || sub_1C4E44B78((uint64_t ***)a1, (uint64_t)"", 0, (uint64_t)".constant_program.cfg", 21, v21, 6))
    {
      return 2;
    }
    return 6;
  }
  if (v9 < 9)
    return 6;
  if (llvm::Module::getPICLevel(v6)
    && (*(_DWORD *)(a1 + 32) & 0xF) == 0
    && (*(_DWORD *)(a1 + 32) & 0x30) != 0x10)
  {
    return 7;
  }
  sub_1C611A8F4(&v20, *(_QWORD *)(a1 + 40));
  if (sub_1C611A970((uint64_t)&v20, a1))
    return 8;
  if (!llvm::Function::hasAddressTaken((llvm::Function *)a1, 0, 0, 1, 0, 0))
  {
    for (i = *(_QWORD *)(a1 + 8); i; i = *(_QWORD *)(i + 8))
    {
      v11 = *(_QWORD *)(i + 24);
      v12 = *(unsigned __int8 *)(v11 + 16);
      if (v12 != 4)
      {
        if (v12 != 84)
          v11 = 0;
        v13 = v11 && v11 - 32 == i;
        if (v13 && *(_QWORD *)(*(_QWORD *)(v11 + 40) + 56) != a1)
          return 4;
      }
    }
    sub_1C4E4606C((char *)__s, *(_QWORD *)a3, *(_DWORD *)(a3 + 16), a1);
    if (v26)
    {
      v14 = (uint64_t *)v25;
      do
      {
        v15 = *v14;
        while (1)
        {
          v15 = *(_QWORD *)(v15 + 8);
          if (!v15)
            break;
          v16 = *(_QWORD *)(v15 + 24);
          v17 = *(unsigned __int8 *)(v16 + 16);
          if (v17 != 4)
          {
            if (v17 != 84)
              v16 = 0;
            v18 = v16 && v16 - 32 == v15;
            if (v18 && *(_QWORD *)(*(_QWORD *)(v16 + 40) + 56) != a1)
            {
              v19 = 1;
              goto LABEL_57;
            }
          }
        }
        ++v14;
      }
      while (v14 != (uint64_t *)((char *)v25 + 8 * v26));
    }
    v19 = 0;
LABEL_57:
    if (v25 != v27)
      free(v25);
    if ((__s[0] & 1) != 0)
    {
      if (v19)
        return 4;
    }
    else
    {
      MEMORY[0x1CAA32FB4](v24, 8);
      if (v19)
        return 4;
    }
    return 10;
  }
  sub_1C4E44E6C(a2, (llvm::Type **)a1);
  if (*(_BYTE *)(sub_1C4E458C0(a2, a1) + 8))
    return 3;
  else
    return 9;
}

void *sub_1C4E43818(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  int64x2_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t i;
  uint64_t j;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (***v20)(_QWORD);
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t NamedMetadata;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  _DWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t **v52;
  unint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  void *result;
  uint64_t v60;
  uint64_t v61[4];
  __int16 v62;
  void *__p[2];
  char v64;
  int v65;
  __int16 v66;

  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = operator new();
  v7 = (_DWORD *)v6;
  *(_QWORD *)v6 = off_1E8137640;
  *(_QWORD *)(v6 + 8) = a1;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_DWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 48) = 1;
  v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(v6 + 56) = v8;
  *(int64x2_t *)(v6 + 72) = v8;
  *(_QWORD *)(v6 + 88) = v6 + 104;
  *(_QWORD *)(v6 + 96) = 0x400000000;
  v9 = 136;
  do
  {
    v10 = v6 + v9;
    *(_QWORD *)v10 = 1;
    *(int64x2_t *)(v10 + 8) = v8;
    *(int64x2_t *)(v10 + 24) = v8;
    *(_QWORD *)(v10 + 40) = v6 + v9 + 56;
    *(_QWORD *)(v10 + 48) = 0x400000000;
    v9 += 88;
  }
  while (v10 + 88 != v6 + 2424);
  *(_QWORD *)(v6 + 2424) = v6 + 2440;
  *(_QWORD *)(v6 + 2432) = 0x1000000000;
  v11 = (void **)(v6 + 2720);
  *(_QWORD *)(v6 + 2696) = 0;
  *(_QWORD *)(v6 + 2712) = 0;
  *(_QWORD *)(v6 + 2704) = 0;
  *(_QWORD *)(v6 + 2720) = v6 + 2736;
  *(_QWORD *)(v6 + 2728) = 0x500000000;
  *(_QWORD *)(v6 + 2760) = 1;
  for (i = 2768; i != 3792; i += 16)
    *(_QWORD *)(v6 + i) = -1;
  *(_QWORD *)(v6 + 3792) = 1;
  for (j = 3800; j != 4056; j += 16)
    *(_QWORD *)(v6 + j) = -4096;
  *(_QWORD *)(v6 + 4056) = v6 + 4072;
  *(_QWORD *)(v6 + 4064) = 0x1000000000;
  *(_QWORD *)(v6 + 4328) = v6 + 4344;
  *(_QWORD *)(v6 + 4336) = 0x800000000;
  *(_QWORD *)(v6 + 4472) = v6 + 4488;
  *(_QWORD *)(v6 + 4480) = 0x800000000;
  *(_QWORD *)(v6 + 4520) = v5;
  *(_DWORD *)(v6 + 4528) = 0;
  *(_WORD *)(v6 + 4532) = 0;
  *(_QWORD *)(v6 + 4536) = 1;
  v14 = -1536;
  do
  {
    *(_QWORD *)(v6 + v14 + 6080) = -4096;
    v14 += 24;
  }
  while (v14);
  v15 = (_QWORD *)(v6 + 6832);
  v16 = 6080;
  do
  {
    v17 = (_BYTE *)(v6 + v16);
    *v17 = 0;
    v17[8] = 0;
    v16 += 16;
  }
  while (v17 + 16 != (_BYTE *)v15);
  *v15 = 0;
  *(_QWORD *)(v6 + 6840) = 0;
  *(_QWORD *)(v6 + 6848) = 0;
  v62 = 260;
  v61[0] = v4 + 216;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v61);
  if ((v65 & 0xFFFFFFFE) == 0x1C)
    v18 = 256;
  else
    v18 = 4096;
  if ((v65 & 0xFFFFFFFE) == 0x1C)
    v19 = 128;
  else
    v19 = 4096;
  (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v7 + 8))(v7, 19, v18, 1, 0, 0, 5);
  (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v7 + 8))(v7, 20, v19, 1, 0, 0, 5);
  v20 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 336))(v7);
  v21 = (**v20)(v20);
  v22 = v21;
  v23 = v21;
  v24 = v7[682];
  if (v24 != v21)
  {
    if (v24 <= v21)
    {
      if (v7[683] < v21)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v7 + 680), (uint64_t)(v7 + 684), v21, 4);
        v24 = v7[682];
      }
      if (v24 != v22)
        bzero((char *)*v11 + 4 * v24, 4 * (v23 - v24));
    }
    v7[682] = v22;
  }
  if (v22)
    bzero(*v11, 4 * v23);
  if (v64 < 0)
    operator delete(__p[0]);
  v25 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 336))(v7);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 24))(v25, 9);
  (*(void (**)(_DWORD *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v7 + 8))(v7, 6, v26, 1, 0, 1, 1);
  __p[0] = "agx.common.store.limits";
  v66 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v4, (uint64_t)__p);
  if (NamedMetadata)
  {
    v28 = *(uint64_t **)(NamedMetadata + 48);
    v29 = *((unsigned int *)v28 + 2);
    if ((_DWORD)v29)
    {
      v30 = *v28;
      do
      {
        v31 = (_QWORD *)(*(_QWORD *)v30 - 8 * *(unsigned int *)(*(_QWORD *)v30 + 8));
        if (!*(_BYTE *)*v31)
        {
          v32 = *(uint64_t **)(*v31 + 8);
          v33 = *v32;
          if (*v32 == 10)
          {
            v42 = v32[3];
            v43 = *((unsigned __int16 *)v32 + 16);
            if (v42 == 0x61632D74736E6F63 && v43 == 25452)
            {
              v45 = *(_QWORD *)(v31[1] + 128);
              v39 = (_QWORD *)(v45 + 24);
              v40 = *(_DWORD *)(v45 + 32);
              v41 = (_DWORD *)(a1 + 760);
              goto LABEL_60;
            }
          }
          else if (v33 == 11)
          {
            v46 = v32[3];
            v47 = *(uint64_t *)((char *)v32 + 27);
            if (v46 == 0x74732D6C61636F6CLL && v47 == 0x65726F74732D6C61)
            {
              v49 = *(_QWORD *)(v31[1] + 128);
              v39 = (_QWORD *)(v49 + 24);
              v40 = *(_DWORD *)(v49 + 32);
              v41 = (_DWORD *)(a1 + 772);
              goto LABEL_60;
            }
          }
          else if (v33 == 13)
          {
            if (v32[3] == 0x6D6F72702D616D64 && *(uint64_t *)((char *)v32 + 29) == 0x6E6F69746F6D6F72)
            {
              v50 = *(_QWORD *)(v31[1] + 128);
              v39 = (_QWORD *)(v50 + 24);
              v40 = *(_DWORD *)(v50 + 32);
              v41 = (_DWORD *)(a1 + 764);
              goto LABEL_60;
            }
            v35 = v32[3];
            v36 = *(uint64_t *)((char *)v32 + 29);
            if (v35 == 0x6F2D7265626D756ELL && v36 == 0x616D642D666F2D72)
            {
              v38 = *(_QWORD *)(v31[1] + 128);
              v39 = (_QWORD *)(v38 + 24);
              v40 = *(_DWORD *)(v38 + 32);
              v41 = (_DWORD *)(a1 + 768);
LABEL_60:
              if (v40 >= 0x41)
                v39 = (_QWORD *)*v39;
              *v41 = *v39;
            }
          }
        }
        v30 += 8;
        --v29;
      }
      while (v29);
    }
  }
  v51 = *(uint64_t **)(a1 + 544);
  if (v51)
  {
    while (1)
    {
      while (1)
      {
        v52 = (uint64_t **)v51;
        v53 = v51[4];
        if (v53 <= a2)
          break;
        v51 = *v52;
        v54 = v52;
        if (!*v52)
          goto LABEL_71;
      }
      if (v53 >= a2)
        break;
      v51 = v52[1];
      if (!v51)
      {
        v54 = v52 + 1;
        goto LABEL_71;
      }
    }
    v58 = (uint64_t)v52[5];
    (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 24))(v7);
  }
  else
  {
    v54 = (uint64_t **)(a1 + 544);
    v52 = (uint64_t **)(a1 + 544);
LABEL_71:
    v55 = (uint64_t *)operator new(0x30uLL);
    v55[4] = a2;
    v55[5] = (uint64_t)v7;
    *v55 = 0;
    v55[1] = 0;
    v55[2] = (uint64_t)v52;
    *v54 = v55;
    v56 = **(_QWORD **)(a1 + 536);
    v57 = v55;
    if (v56)
    {
      *(_QWORD *)(a1 + 536) = v56;
      v57 = *v54;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 544), v57);
    ++*(_QWORD *)(a1 + 552);
    v58 = v55[5];
  }
  result = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v58 + 40))(v58, a2);
  v60 = *(unsigned int *)(a1 + 568);
  if (v60 >= *(_DWORD *)(a1 + 572))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 560, a1 + 576, v60 + 1, 8);
    LODWORD(v60) = *(_DWORD *)(a1 + 568);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 560) + 8 * v60) = v58;
  ++*(_DWORD *)(a1 + 568);
  return result;
}

void sub_1C4E43E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64x2_t v45;
  int64x2_t v46;
  void *v47[2];
  _BYTE v48[32];
  uint64_t v49;
  int64x2_t v50;
  int64x2_t v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[32];
  _QWORD *v55;
  uint64_t v56;
  _BYTE v57[32];
  __int32 __s[2];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 40);
  v44 = 1;
  v45 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v46 = v45;
  v47[0] = v48;
  v47[1] = (void *)0x400000000;
  v55 = v57;
  v56 = 0x400000000;
  v49 = 1;
  v50 = v45;
  v51 = v45;
  v7 = a1 + 32;
  v52 = v54;
  v53 = 0x400000000;
  v8 = *(_WORD *)(a2 + 18);
  if (sub_1C4E434A4(a2, a1 + 32, a3) >= 5)
  {
    if ((v8 & 0x3FF0) != 0x690
      || (*(_QWORD *)__s = 0x6800000067,
          !sub_1C4E44B78((uint64_t ***)a2, (uint64_t)"", 0, (uint64_t)".sample_invariants", 18, __s, 2)))
    {
      *(_QWORD *)__s = a2;
      sub_1C4E486A0((uint64_t)&v44, (uint64_t *)__s);
    }
  }
  sub_1C4E4AEF8((uint64_t)&v55, (uint64_t)&v49, v7, a3, a2);
  v9 = v56;
  if (!(_DWORD)v56)
  {
    v10 = 0;
    goto LABEL_27;
  }
  v10 = 0;
  do
  {
    v11 = v55[--v9];
    LODWORD(v56) = v9;
    v12 = *(_QWORD *)(v11 + 8);
    if (!v12)
      continue;
    do
    {
      v13 = *(_QWORD *)(v12 + 24);
      v14 = *(unsigned __int8 *)(v13 + 16);
      if (v14 != 4)
      {
        if (v14 != 84)
          v13 = 0;
        if (v13 && v13 - 32 == v12)
        {
          *(_QWORD *)__s = *(_QWORD *)(*(_QWORD *)(v13 + 40) + 56);
          v16 = sub_1C4E434A4(*(uint64_t *)__s, v7, a3);
          if (v16 < 5)
          {
            v43 = 0;
            v43 = sub_1C4E4ADA0(*(uint64_t ****)__s);
            if (!v43)
            {
LABEL_21:
              sub_1C4E4AEF8((uint64_t)&v55, (uint64_t)&v49, v7, a3, *(uint64_t *)__s);
              goto LABEL_22;
            }
            v17 = &v43;
          }
          else
          {
            v10 |= v16 == 8;
            v17 = (uint64_t *)__s;
          }
          sub_1C4E486A0((uint64_t)&v44, v17);
          goto LABEL_21;
        }
      }
LABEL_22:
      v12 = *(_QWORD *)(v12 + 8);
    }
    while (v12);
    v9 = v56;
  }
  while (v9);
LABEL_27:
  *(_QWORD *)__s = sub_1C4E4ADA0((uint64_t ***)a2);
  if (*(_QWORD *)__s)
    sub_1C4E486A0((uint64_t)&v44, (uint64_t *)__s);
  sub_1C611A8F4(&v43, *(_QWORD *)(a2 + 40));
  if (((sub_1C611A970((uint64_t)&v43, a2) | v10) & 1) != 0)
  {
    v18 = *(_QWORD *)(v6 + 32);
    if (v18 != v6 + 24)
    {
      while (2)
      {
        v19 = v18 - 56;
        if (!v18)
          v19 = 0;
        if ((*(_BYTE *)(v19 + 23) & 0x10) == 0)
          goto LABEL_43;
        v20 = ***(_QWORD ***)v19;
        v21 = *(_QWORD *)(v20 + 152);
        v22 = *(unsigned int *)(v20 + 168);
        if ((_DWORD)v22)
        {
          LODWORD(v23) = (v22 - 1) & ((v19 >> 4) ^ (v19 >> 9));
          v24 = (uint64_t *)(v21 + 16 * v23);
          v25 = *v24;
          if (*v24 != v19)
          {
            v26 = 1;
            while (v25 != -4096)
            {
              v27 = v23 + v26++;
              v23 = v27 & (v22 - 1);
              v25 = *(_QWORD *)(v21 + 16 * v23);
              if (v25 == v19)
              {
                v24 = (uint64_t *)(v21 + 16 * v23);
                goto LABEL_41;
              }
            }
            goto LABEL_40;
          }
        }
        else
        {
LABEL_40:
          v24 = (uint64_t *)(v21 + 16 * v22);
        }
LABEL_41:
        v28 = (_QWORD *)v24[1];
        if (*v28 == 8 && v28[2] == 0x6E69616D2E636761)
        {
          v42 = v19;
          sub_1C4E486A0((uint64_t)&v44, &v42);
          break;
        }
LABEL_43:
        v18 = *(_QWORD *)(v18 + 8);
        if (v18 == v6 + 24)
          break;
        continue;
      }
    }
  }
  if (v52 != v54)
    free(v52);
  if ((v49 & 1) == 0)
    MEMORY[0x1CAA32FB4](v50.i64[0], 8);
  if (v55 != (_QWORD *)v57)
    free(v55);
  v29 = sub_1C4E4AA50(a1 + 584, (int32x2_t ****)a2);
  sub_1C4E4B1A0(v29, (unsigned int *)&v44);
  sub_1C4E41EEC(v29 + 40, (uint64_t)v47);
  if (v47[0] != v48)
    free(v47[0]);
  if ((v44 & 1) == 0)
    MEMORY[0x1CAA32FB4](v45.i64[0], 8);
  v30 = *(_QWORD *)(a1 + 584);
  v31 = *(unsigned int *)(a1 + 600);
  if ((_DWORD)v31)
  {
    v32 = ((_DWORD)v31 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v33 = v30 + (v32 << 7);
    v34 = *(_QWORD *)(v33 + 24);
    if (v34 == a2)
      goto LABEL_58;
    v40 = 1;
    while (v34 != -4096)
    {
      v41 = v32 + v40++;
      v32 = v41 & (v31 - 1);
      v33 = v30 + (v32 << 7);
      v34 = *(_QWORD *)(v33 + 24);
      if (v34 == a2)
        goto LABEL_58;
    }
  }
  v33 = v30 + (v31 << 7);
LABEL_58:
  v35 = *(unsigned int *)(v33 + 88);
  if ((_DWORD)v35)
  {
    v36 = *(unint64_t **)(v33 + 80);
    v37 = 8 * v35;
    do
    {
      v38 = *v36++;
      v39 = sub_1C4E4AD60(*(_QWORD **)(a1 + 544), v38);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v39 + 40))(*v39, a2);
      v37 -= 8;
    }
    while (v37);
  }
}

uint64_t sub_1C4E4429C(uint64_t a1, int a2)
{
  unsigned int v2;
  BOOL v3;

  v2 = llvm::AGX01CommonRegisterInfo::RegLimits[a2];
  if (*(_BYTE *)(a1 + 8))
    v3 = 0;
  else
    v3 = a2 == 1;
  if (v3)
    return v2 + 32;
  else
    return v2;
}

uint64_t sub_1C4E442C0()
{
  return 6;
}

uint64_t sub_1C4E442C8()
{
  return 2;
}

uint64_t sub_1C4E442D0(uint64_t a1, int a2)
{
  return dword_1C85F3510[a2];
}

uint64_t sub_1C4E442E0(uint64_t a1, int a2)
{
  return llvm::AGX2CommonRegisterInfo::RegSize[qword_1C85F3560[a2]];
}

uint64_t sub_1C4E442FC()
{
  return 1;
}

uint64_t sub_1C4E44304(uint64_t a1, int a2)
{
  return llvm::AGX2CommonRegisterInfo::RegSize[a2];
}

uint64_t sub_1C4E44314(uint64_t a1, int a2)
{
  return llvm::AGX2CommonRegisterInfo::RegLimits[a2];
}

void sub_1C4E44324()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4E44338(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 96 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 96 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_QWORD *sub_1C4E443C4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(96 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4E44488(a1, v4, v4 + 96 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 96 * v10;
    do
    {
      *result = -4096;
      result += 12;
      v11 -= 96;
    }
    while (v11);
  }
  return result;
}

void sub_1C4E44488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  void *v11;
  unsigned int *v12;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 96 * v6;
    do
    {
      *v7 = -4096;
      v7 += 12;
      v8 -= 96;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      sub_1C4E44338(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v12);
      v10 = v12;
      *(_QWORD *)v12 = *(_QWORD *)a2;
      sub_1C4E44570(v10 + 2, (unsigned int *)(a2 + 8));
      ++*(_DWORD *)(a1 + 8);
      v11 = *(void **)(a2 + 48);
      if ((void *)(a2 + 64) != v11)
        free(v11);
      if ((*(_BYTE *)(a2 + 8) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(a2 + 16), 8);
    }
    a2 += 96;
  }
}

unsigned int *sub_1C4E44570(unsigned int *a1, unsigned int *a2)
{
  int64x2_t v4;
  int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int *v10;
  unsigned int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  int *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t i;
  __int128 v22;

  v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(_QWORD *)a1 = 1;
  *(int64x2_t *)(a1 + 2) = v4;
  v5 = (int *)(a1 + 2);
  *(int64x2_t *)(a1 + 6) = v4;
  v6 = *a2;
  *a2 = *a1 & 0xFFFFFFFE | *a2 & 1;
  v7 = a1[1];
  *a1 = v6 & 0xFFFFFFFE | *a1 & 1;
  a1[1] = a2[1];
  a2[1] = v7;
  v8 = *a1;
  v9 = *a2;
  if ((*a1 & 1) != 0)
  {
    v8 = *a2;
    v10 = (int *)a2;
    v11 = a1;
    if ((v9 & 1) != 0)
    {
      v12 = 0;
      v13 = (int *)(a2 + 2);
      do
      {
        v14 = *(_QWORD *)&v5[v12];
        *(_QWORD *)&v5[v12] = *(_QWORD *)&v13[v12];
        *(_QWORD *)&v13[v12] = v14;
        v12 += 2;
      }
      while (v12 != 8);
      goto LABEL_5;
    }
  }
  else
  {
    v10 = (int *)a1;
    v11 = a2;
    if ((v9 & 1) == 0)
    {
      v20 = *((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v20;
      LODWORD(v20) = a1[4];
      a1[4] = a2[4];
      a2[4] = v20;
      goto LABEL_5;
    }
  }
  v22 = *(_OWORD *)(v10 + 2);
  *v10 = v8 | 1;
  for (i = 2; i != 10; i += 2)
    *(_QWORD *)&v10[i] = *(_QWORD *)&v11[i];
  *v11 &= ~1u;
  *(_OWORD *)(v11 + 2) = v22;
LABEL_5:
  v15 = a1 + 14;
  *((_QWORD *)a1 + 5) = a1 + 14;
  *((_QWORD *)a1 + 6) = 0x400000000;
  v16 = a2[12];
  if (v16 && a1 != a2)
  {
    v17 = (int *)*((_QWORD *)a2 + 5);
    if (v17 != (int *)(a2 + 14))
    {
      *((_QWORD *)a1 + 5) = v17;
      a1[12] = v16;
      a1[13] = a2[13];
      *((_QWORD *)a2 + 5) = a2 + 14;
      a2[13] = 0;
      goto LABEL_12;
    }
    if (v16 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(a1 + 10), (uint64_t)(a1 + 14), a2[12], 8);
      v18 = a2[12];
      if (!(_DWORD)v18)
        goto LABEL_11;
      v17 = (int *)*((_QWORD *)a2 + 5);
      v15 = (void *)*((_QWORD *)a1 + 5);
    }
    else
    {
      v18 = a2[12];
    }
    memcpy(v15, v17, 8 * v18);
LABEL_11:
    a1[12] = v16;
LABEL_12:
    a2[12] = 0;
  }
  return a1;
}

_QWORD *sub_1C4E4473C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 < 3 * v8)
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
    {
      v9 = *(_DWORD *)a1 & 1;
      goto LABEL_6;
    }
    sub_1C4E44910(a1, v8);
    v18 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v19 = 4;
LABEL_22:
      v9 = *(_DWORD *)a1 & 1;
      v20 = v19 - 1;
      v21 = ((*a3 >> 4) ^ (*a3 >> 9)) & v20;
      a4 = (_QWORD *)(v18 + 8 * v21);
      v22 = *a4;
      if (*a3 == *a4)
        goto LABEL_6;
      v16 = 0;
      v23 = 1;
      while (v22 != -4096)
      {
        if (v16)
          v24 = 0;
        else
          v24 = v22 == -8192;
        if (v24)
          v16 = a4;
        v25 = v21 + v23++;
        v21 = v25 & v20;
        a4 = (_QWORD *)(v18 + 8 * v21);
        v22 = *a4;
        if (*a3 == *a4)
          goto LABEL_6;
      }
      goto LABEL_15;
    }
    v19 = *(_DWORD *)(a1 + 16);
    if (v19)
    {
      v18 = *(_QWORD *)(a1 + 8);
      goto LABEL_22;
    }
LABEL_41:
    v9 = 0;
    a4 = 0;
    goto LABEL_6;
  }
  sub_1C4E44910(a1, 2 * v8);
  v11 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v12 = 4;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 16);
    if (!v12)
      goto LABEL_41;
    v11 = *(_QWORD *)(a1 + 8);
  }
  v9 = *(_DWORD *)a1 & 1;
  v13 = v12 - 1;
  v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
  a4 = (_QWORD *)(v11 + 8 * v14);
  v15 = *a4;
  if (*a3 == *a4)
    goto LABEL_6;
  v16 = 0;
  v17 = 1;
  while (v15 != -4096)
  {
    if (v16)
      v26 = 0;
    else
      v26 = v15 == -8192;
    if (v26)
      v16 = a4;
    v27 = v14 + v17++;
    v14 = v27 & v13;
    a4 = (_QWORD *)(v11 + 8 * v14);
    v15 = *a4;
    if (*a3 == *a4)
      goto LABEL_6;
  }
LABEL_15:
  if (v16)
    a4 = v16;
LABEL_6:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C4E44910(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E44A78((int *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4E44A78((int *)a1, v14, v8);
}

int *sub_1C4E44A78(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 10;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 4;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v9[2 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v9[2 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_14;
        }
        if (v14)
          v12 = v14;
      }
LABEL_14:
      *(_QWORD *)v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C4E44B78(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int32 *__s, uint64_t a7)
{
  uint64_t **v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v13;
  size_t v14;
  __int32 *v15;
  uint64_t v16;
  __int32 *v17;
  __int32 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ****v23;
  uint64_t ***v24;
  int v25;
  int v26;
  uint64_t ***v27;
  uint64_t **v28;
  char *v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char v43;
  size_t v44;
  int v45;
  void *v46;
  void **v47;
  uint64_t v48;
  void **v49;
  int v50;
  int v51;
  int v52;
  int v53;
  BOOL v55;
  _BOOL4 v56;
  unsigned int v58;
  __int32 *v59;
  size_t v60;
  _QWORD v65[4];
  __int16 v66;
  void *__p[2];
  char v68;
  _QWORD v69[4];
  __int16 v70;
  void *v71;
  size_t v72;
  char v73;

  v7 = a1[5];
  v8 = v7 + 3;
  v9 = v7[4];
  if (v9 != (uint64_t *)(v7 + 3))
  {
    v13 = 0;
    v14 = (4 * a7) >> 2;
    v15 = &__s[a7];
    v58 = (a1 >> 4) ^ (a1 >> 9);
    v59 = v15;
    v60 = v14;
    while (1)
    {
      v16 = v9 ? (uint64_t)(v9 - 7) : 0;
      v17 = wmemchr(__s, (*(unsigned __int16 *)(v16 + 18) >> 4) & 0x3FF, v14);
      v18 = v17 ? v17 : v15;
      if (a7 != v18 - __s)
        break;
LABEL_54:
      v9 = (uint64_t *)v9[1];
      if (v9 == (uint64_t *)v8)
        return v13;
    }
    if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
    {
      v28 = 0;
      v29 = &byte_1C871356D;
LABEL_19:
      v69[0] = v29;
      v69[1] = v28;
      v69[2] = a2;
      v69[3] = a3;
      v70 = 1285;
      llvm::Twine::str((llvm::Twine *)v69, &v71);
      if ((*(_BYTE *)(v16 + 23) & 0x10) == 0)
      {
        v40 = 0;
        v41 = &byte_1C871356D;
LABEL_28:
        v65[0] = v41;
        v65[1] = v40;
        v65[2] = a4;
        v65[3] = a5;
        v66 = 1285;
        llvm::Twine::str((llvm::Twine *)v65, __p);
        v43 = v73;
        if (v73 >= 0)
          v44 = v73 & 0x7F;
        else
          v44 = v72;
        v45 = v68;
        v46 = (void *)(v68 & 0x7F);
        if (v68 < 0)
          v46 = __p[1];
        if ((void *)v44 != v46)
        {
          v56 = 0;
          if ((v68 & 0x80000000) == 0)
            goto LABEL_50;
          goto LABEL_57;
        }
        if (v68 >= 0)
          v47 = __p;
        else
          v47 = (void **)__p[0];
        if (v73 < 0)
        {
          v56 = memcmp(v71, v47, v72) == 0;
        }
        else
        {
          if ((v73 & 0x7F) == 0)
          {
            v56 = 1;
            if ((v68 & 0x80000000) == 0)
            {
LABEL_50:
              if ((v43 & 0x80) == 0)
              {
LABEL_51:
                if (v56)
                  v13 = v16;
                v15 = v59;
                v14 = v60;
                goto LABEL_54;
              }
LABEL_58:
              operator delete(v71);
              goto LABEL_51;
            }
LABEL_57:
            operator delete(__p[0]);
            if ((v73 & 0x80) == 0)
              goto LABEL_51;
            goto LABEL_58;
          }
          v48 = (v73 & 0x7F) - 1;
          v49 = &v71;
          do
          {
            v51 = *(unsigned __int8 *)v49;
            v49 = (void **)((char *)v49 + 1);
            v50 = v51;
            v53 = *(unsigned __int8 *)v47;
            v47 = (void **)((char *)v47 + 1);
            v52 = v53;
            v55 = v48-- != 0;
            v56 = v50 == v52;
          }
          while (v50 == v52 && v55);
        }
        if ((v45 & 0x80000000) == 0)
          goto LABEL_50;
        goto LABEL_57;
      }
      v31 = ***(_QWORD ***)v16;
      v32 = *(_QWORD *)(v31 + 152);
      v33 = *(unsigned int *)(v31 + 168);
      if ((_DWORD)v33)
      {
        LODWORD(v34) = (v33 - 1) & ((v16 >> 4) ^ (v16 >> 9));
        v35 = (uint64_t *)(v32 + 16 * v34);
        v36 = *v35;
        if (*v35 == v16)
        {
LABEL_27:
          v39 = (_QWORD *)v35[1];
          v42 = *v39;
          v41 = (char *)(v39 + 2);
          v40 = v42;
          goto LABEL_28;
        }
        v37 = 1;
        while (v36 != -4096)
        {
          v38 = v34 + v37++;
          v34 = v38 & (v33 - 1);
          v36 = *(_QWORD *)(v32 + 16 * v34);
          if (v36 == v16)
          {
            v35 = (uint64_t *)(v32 + 16 * v34);
            goto LABEL_27;
          }
        }
      }
      v35 = (uint64_t *)(v32 + 16 * v33);
      goto LABEL_27;
    }
    v19 = ***a1;
    v20 = *(_QWORD *)(v19 + 152);
    v21 = *(unsigned int *)(v19 + 168);
    if ((_DWORD)v21)
    {
      LODWORD(v22) = (v21 - 1) & v58;
      v23 = (uint64_t ****)(v20 + 16 * v22);
      v24 = *v23;
      if (*v23 == a1)
      {
LABEL_18:
        v27 = v23[1];
        v30 = *v27;
        v29 = (char *)(v27 + 2);
        v28 = v30;
        goto LABEL_19;
      }
      v25 = 1;
      while (v24 != (uint64_t ***)-4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & (v21 - 1);
        v24 = *(uint64_t ****)(v20 + 16 * v22);
        if (v24 == a1)
        {
          v23 = (uint64_t ****)(v20 + 16 * v22);
          goto LABEL_18;
        }
      }
    }
    v23 = (uint64_t ****)(v20 + 16 * v21);
    goto LABEL_18;
  }
  return 0;
}

void sub_1C4E44E6C(uint64_t a1, llvm::Type **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  _QWORD *v18;
  _QWORD *v19;
  llvm::Type **v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  __int128 *v24;
  int v25;
  unsigned int v26;
  llvm::Type ***v27;
  llvm::Type **v28;
  llvm::Type ***v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  llvm::Type ***v33;
  _QWORD *v34;
  llvm::Type **v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  int v47;
  _OWORD *v48;
  int v49;
  unsigned int v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  int v54;
  BOOL v55;
  unsigned int v56;
  _QWORD *v57;
  _QWORD *v58;
  llvm::Type **v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  __int128 *v63;
  int v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  int v69;
  BOOL v70;
  unsigned int v71;
  _QWORD *v72;
  _QWORD *v73;
  llvm::Type **v74;
  uint64_t v75;
  void **v76;
  void **v77;
  int v78;
  _OWORD *v79;
  int v80;
  unsigned int v81;
  _QWORD *v82;
  void *v83;
  _QWORD *v84;
  int v85;
  BOOL v86;
  unsigned int v87;
  _QWORD *v88;
  void **v89;
  void *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  unint64_t v103;
  BOOL v104;
  char *v105;
  llvm::Type **v106;
  uint64_t v107;
  _OWORD v108[2];
  void *v109;
  uint64_t v110;
  _BYTE v111[32];
  char v112;
  uint64_t v113;
  _OWORD v114[2];
  void *v115;
  uint64_t v116;
  _BYTE v117[32];
  void *v118[2];
  _OWORD v119[2];
  void *v120[2];
  _OWORD v121[2];
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  void **v125;
  uint64_t v126;
  void *v127[2];
  _QWORD v128[7];

  v128[4] = *MEMORY[0x1E0C80C00];
  v122 = 0;
  if (sub_1C4E45958(a1, (uint64_t)a2, &v122))
  {
    v4 = v122;
    if ((*(_DWORD *)a1 & 1) == 0)
    {
LABEL_3:
      v5 = *(_QWORD *)(a1 + 8);
      v6 = *(unsigned int *)(a1 + 16);
      goto LABEL_9;
    }
  }
  else
  {
    v7 = a1 + 8;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v8 = 4;
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(unsigned int *)(a1 + 16);
    }
    v4 = v7 + 16 * v8;
    if ((*(_DWORD *)a1 & 1) == 0)
      goto LABEL_3;
  }
  v5 = a1 + 8;
  v6 = 4;
LABEL_9:
  if (v5 + 16 * v6 != v4)
    return;
  v112 = 1;
  v113 = 1;
  v114[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v114[1] = v114[0];
  v115 = v117;
  v116 = 0x400000000;
  v107 = 1;
  v108[0] = v114[0];
  v108[1] = v114[0];
  v106 = a2;
  v109 = v111;
  v110 = 0x400000000;
  v118[0] = v119;
  v118[1] = (void *)0x400000000;
  v122 = 1;
  v123 = v114[0];
  v124 = v114[0];
  v125 = v127;
  v126 = 0x400000000;
  v9 = (a2 >> 4) ^ (a2 >> 9);
  LOBYTE(v10) = v9 & 3;
  v11 = (char *)v108 + 8 * (v9 & 3);
  v12 = *(_QWORD *)v11;
  if (*(llvm::Type ***)v11 == a2)
  {
LABEL_19:
    v17 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & 3;
      v11 = (char *)v108 + 8 * v10;
      v12 = *(_QWORD *)v11;
      if (*(llvm::Type ***)v11 == a2)
        goto LABEL_19;
    }
    if (v13)
      v18 = v13;
    else
      v18 = v11;
    v19 = sub_1C4E4473C((uint64_t)&v107, (uint64_t)&v106, &v106, v18);
    *v19 = v106;
    v20 = v106;
    v21 = v110;
    if (v110 >= HIDWORD(v110))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v110 + 1, 8);
      v21 = v110;
    }
    *((_QWORD *)v109 + v21) = v20;
    LODWORD(v110) = v110 + 1;
    v17 = v118[1];
    if (LODWORD(v118[1]) >= HIDWORD(v118[1]))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v118, (uint64_t)v119, LODWORD(v118[1]) + 1, 8);
      v17 = v118[1];
    }
  }
  *((_QWORD *)v118[0] + v17) = a2;
  v22 = ++LODWORD(v118[1]);
  v106 = a2;
  if ((v122 & 1) != 0)
  {
    v23 = 4;
    v24 = &v123;
  }
  else
  {
    v23 = DWORD2(v123);
    if (!DWORD2(v123))
    {
      v33 = 0;
LABEL_42:
      v34 = sub_1C4E4473C((uint64_t)&v122, (uint64_t)&v106, &v106, v33);
      *v34 = v106;
      v35 = v106;
      v36 = v126;
      if (v126 >= HIDWORD(v126))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v125, (uint64_t)v127, v126 + 1, 8);
        v36 = v126;
      }
      v125[v36] = v35;
      LODWORD(v126) = v126 + 1;
      v22 = v118[1];
      goto LABEL_45;
    }
    v24 = (__int128 *)v123;
  }
  v25 = v23 - 1;
  v26 = v25 & v9;
  v27 = (llvm::Type ***)v24 + (v25 & v9);
  v28 = *v27;
  if (*v27 != a2)
  {
    v29 = 0;
    v30 = 1;
    while (v28 != (llvm::Type **)-4096)
    {
      if (v29)
        v31 = 0;
      else
        v31 = v28 == (llvm::Type **)-8192;
      if (v31)
        v29 = v27;
      v32 = v26 + v30++;
      v26 = v32 & v25;
      v27 = (llvm::Type ***)v24 + v26;
      v28 = *v27;
      if (*v27 == a2)
        goto LABEL_45;
    }
    if (v29)
      v33 = v29;
    else
      v33 = v27;
    goto LABEL_42;
  }
LABEL_45:
  if (!v22)
  {
    v37 = 0;
    goto LABEL_108;
  }
  v37 = 0;
  do
  {
    v38 = *((_QWORD *)v118[0] + --v22);
    LODWORD(v118[1]) = v22;
    v39 = *(_QWORD *)(v38 + 8);
    if (!v39)
      continue;
    do
    {
      v40 = *(_QWORD *)(v39 + 24);
      v41 = *(unsigned __int8 *)(v40 + 16);
      if (v41 == 4)
        goto LABEL_97;
      if (v41 == 84)
      {
        if (*(llvm::Type ***)(v40 - 32) == a2)
          goto LABEL_97;
LABEL_51:
        v37 = 1;
        goto LABEL_97;
      }
      v42 = *(unsigned __int8 *)(v40 + 16);
      if (v42 >= 0x15)
      {
        v43 = v42 - 60;
        v44 = v43 > 0x19;
        v45 = (1 << v43) & 0x2860005;
        if (v44 || v45 == 0)
          goto LABEL_51;
      }
      if (*(llvm::Type **)v40 == *a2 || llvm::Type::canLosslesslyBitCastTo(*a2, *(llvm::Type **)v40))
      {
        v106 = (llvm::Type **)v40;
        if ((v107 & 1) != 0)
        {
          v47 = 4;
          v48 = v108;
          goto LABEL_61;
        }
        v47 = DWORD2(v108[0]);
        if (DWORD2(v108[0]))
        {
          v48 = *(_OWORD **)&v108[0];
LABEL_61:
          v49 = v47 - 1;
          v50 = v49 & ((v40 >> 4) ^ (v40 >> 9));
          v51 = (_QWORD *)v48 + v50;
          v52 = *v51;
          if (v40 == *v51)
            goto LABEL_97;
          v53 = 0;
          v54 = 1;
          while (v52 != -4096)
          {
            if (v53)
              v55 = 0;
            else
              v55 = v52 == -8192;
            if (v55)
              v53 = v51;
            v56 = v50 + v54++;
            v50 = v56 & v49;
            v51 = (_QWORD *)v48 + v50;
            v52 = *v51;
            if (v40 == *v51)
              goto LABEL_97;
          }
          if (v53)
            v57 = v53;
          else
            v57 = v51;
        }
        else
        {
          v57 = 0;
        }
        v58 = sub_1C4E4473C((uint64_t)&v107, (uint64_t)&v106, &v106, v57);
        *v58 = v106;
        v59 = v106;
        v60 = v110;
        if (v110 >= (unint64_t)HIDWORD(v110))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v110 + 1, 8);
          v60 = v110;
        }
        *((_QWORD *)v109 + v60) = v59;
        LODWORD(v110) = v110 + 1;
        goto LABEL_97;
      }
      v61 = LODWORD(v118[1]);
      if (LODWORD(v118[1]) >= (unint64_t)HIDWORD(v118[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v118, (uint64_t)v119, LODWORD(v118[1]) + 1, 8);
        v61 = LODWORD(v118[1]);
      }
      *((_QWORD *)v118[0] + v61) = v40;
      ++LODWORD(v118[1]);
      v106 = (llvm::Type **)v40;
      if ((v122 & 1) != 0)
      {
        v62 = 4;
        v63 = &v123;
LABEL_81:
        v64 = v62 - 1;
        v65 = v64 & ((v40 >> 4) ^ (v40 >> 9));
        v66 = (_QWORD *)v63 + v65;
        v67 = *v66;
        if (v40 == *v66)
          goto LABEL_97;
        v68 = 0;
        v69 = 1;
        while (v67 != -4096)
        {
          if (v68)
            v70 = 0;
          else
            v70 = v67 == -8192;
          if (v70)
            v68 = v66;
          v71 = v65 + v69++;
          v65 = v71 & v64;
          v66 = (_QWORD *)v63 + v65;
          v67 = *v66;
          if (v40 == *v66)
            goto LABEL_97;
        }
        if (v68)
          v72 = v68;
        else
          v72 = v66;
        goto LABEL_94;
      }
      v62 = DWORD2(v123);
      if (DWORD2(v123))
      {
        v63 = (__int128 *)v123;
        goto LABEL_81;
      }
      v72 = 0;
LABEL_94:
      v73 = sub_1C4E4473C((uint64_t)&v122, (uint64_t)&v106, &v106, v72);
      *v73 = v106;
      v74 = v106;
      v75 = v126;
      if (v126 >= (unint64_t)HIDWORD(v126))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v125, (uint64_t)v127, v126 + 1, 8);
        v75 = v126;
      }
      v125[v75] = v74;
      LODWORD(v126) = v126 + 1;
LABEL_97:
      v39 = *(_QWORD *)(v39 + 8);
    }
    while (v39);
    v22 = v118[1];
  }
  while (v22);
LABEL_108:
  if (v125 != v127)
    free(v125);
  if ((v122 & 1) == 0)
    MEMORY[0x1CAA32FB4](v123, 8);
  if (v118[0] != v119)
    free(v118[0]);
  if (v37)
    v112 = 0;
  if ((_DWORD)v110)
  {
    v76 = (void **)v109;
    v77 = (void **)((char *)v109 + 8 * v110);
    do
    {
      v118[0] = *v76;
      v122 = (uint64_t)&off_1E8137600;
      *(_QWORD *)&v123 = a2;
      *((_QWORD *)&v123 + 1) = &v113;
      LOBYTE(v124) = 1;
      llvm::PointerMayBeCaptured((llvm *)v118[0], (const llvm::Value *)&v122, 0);
      if (!(_BYTE)v124)
        v112 = 0;
      if ((v113 & 1) != 0)
      {
        v78 = 4;
        v79 = v114;
      }
      else
      {
        v78 = DWORD2(v114[0]);
        if (!DWORD2(v114[0]))
        {
          v88 = 0;
LABEL_135:
          v89 = (void **)sub_1C4E4473C((uint64_t)&v113, (uint64_t)v118, v118, v88);
          *v89 = v118[0];
          v90 = v118[0];
          v91 = v116;
          if (v116 >= (unint64_t)HIDWORD(v116))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v115, (uint64_t)v117, v116 + 1, 8);
            v91 = v116;
          }
          *((_QWORD *)v115 + v91) = v90;
          LODWORD(v116) = v116 + 1;
          goto LABEL_138;
        }
        v79 = *(_OWORD **)&v114[0];
      }
      v80 = v78 - 1;
      v81 = ((LODWORD(v118[0]) >> 4) ^ (LODWORD(v118[0]) >> 9)) & v80;
      v82 = (_QWORD *)v79 + v81;
      v83 = (void *)*v82;
      if (v118[0] != (void *)*v82)
      {
        v84 = 0;
        v85 = 1;
        while (v83 != (void *)-4096)
        {
          if (v84)
            v86 = 0;
          else
            v86 = v83 == (void *)-8192;
          if (v86)
            v84 = v82;
          v87 = v81 + v85++;
          v81 = v87 & v80;
          v82 = (_QWORD *)v79 + v81;
          v83 = (void *)*v82;
          if (v118[0] == (void *)*v82)
            goto LABEL_138;
        }
        if (v84)
          v88 = v84;
        else
          v88 = v82;
        goto LABEL_135;
      }
LABEL_138:
      ++v76;
    }
    while (v76 != v77);
  }
  v122 = 0;
  v92 = sub_1C4E45B90(a1, (uint64_t)a2, &v122);
  v93 = v122;
  if ((v92 & 1) != 0)
  {
    v101 = *(_DWORD *)(v122 + 8);
  }
  else
  {
    v94 = *(_DWORD *)a1 >> 1;
    if ((*(_DWORD *)a1 & 1) != 0)
      v95 = 4;
    else
      v95 = *(_DWORD *)(a1 + 16);
    if (4 * v94 + 4 >= 3 * v95)
    {
      v95 *= 2;
    }
    else if (v95 + ~v94 - *(_DWORD *)(a1 + 4) > v95 >> 3)
    {
      goto LABEL_149;
    }
    sub_1C4E45C34(a1, v95);
    v122 = 0;
    sub_1C4E45B90(a1, (uint64_t)a2, &v122);
    v93 = v122;
LABEL_149:
    *(_DWORD *)a1 += 2;
    if (*(_QWORD *)v93 != -4096)
      --*(_DWORD *)(a1 + 4);
    *(_QWORD *)v93 = a2;
    *(_DWORD *)(v93 + 8) = 0;
    memset(v121, 0, sizeof(v121));
    *(_OWORD *)v118 = 0u;
    v119[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    LOBYTE(v118[0]) = 1;
    LODWORD(v118[1]) = 1;
    v119[1] = v119[0];
    v120[0] = v121;
    v120[1] = (void *)0x400000000;
    v122 = (uint64_t)a2;
    LOBYTE(v123) = 1;
    sub_1C4E44570((unsigned int *)&v123 + 2, (unsigned int *)&v118[1]);
    v97 = (unint64_t *)(a1 + 72);
    v96 = *(_QWORD *)(a1 + 72);
    v98 = *(unsigned int *)(a1 + 80);
    if (v98 >= *(_DWORD *)(a1 + 84))
    {
      v103 = v98 + 1;
      v104 = v96 + 104 * v98 > (unint64_t)&v122;
      if (v96 > (unint64_t)&v122 || !v104)
      {
        sub_1C6195C80(a1 + 72, v103);
        v96 = *v97;
        goto LABEL_152;
      }
      v105 = (char *)&v122 - v96;
      sub_1C6195C80(a1 + 72, v103);
      v96 = *v97;
      v99 = (uint64_t *)&v105[*v97];
    }
    else
    {
LABEL_152:
      v99 = &v122;
    }
    v100 = v96 + 104 * *(unsigned int *)(a1 + 80);
    *(_QWORD *)v100 = *v99;
    *(_BYTE *)(v100 + 8) = *((_BYTE *)v99 + 8);
    sub_1C4E44570((unsigned int *)(v100 + 16), (unsigned int *)v99 + 4);
    ++*(_DWORD *)(a1 + 80);
    if (v127[0] != v128)
      free(v127[0]);
    if ((BYTE8(v123) & 1) == 0)
      MEMORY[0x1CAA32FB4](v124, 8);
    if (v120[0] != v121)
      free(v120[0]);
    if (((uint64_t)v118[1] & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v119[0], 8);
    v101 = *(_DWORD *)(a1 + 80) - 1;
    *(_DWORD *)(v93 + 8) = v101;
  }
  v102 = *(_QWORD *)(a1 + 72) + 104 * v101;
  *(_BYTE *)(v102 + 8) = v112;
  sub_1C4E45F30((unsigned int *)(v102 + 16), (unsigned int *)&v113);
  sub_1C4964480(v102 + 56, (const void **)&v115);
  if (v109 != v111)
    free(v109);
  if ((v107 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v108[0], 8);
  if (v115 != v117)
    free(v115);
  if ((v113 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v114[0], 8);
}

uint64_t sub_1C4E458C0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = 0;
  v3 = sub_1C4E45958(a1, a2, &v13);
  v4 = a1 + 8;
  v5 = *(_DWORD *)a1;
  if ((v3 & 1) != 0)
  {
    v6 = v13;
  }
  else
  {
    if ((v5 & 1) != 0)
    {
      v12 = 4;
      v11 = a1 + 8;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(unsigned int *)(a1 + 16);
    }
    v6 = v11 + 16 * v12;
  }
  if ((v5 & 1) != 0)
  {
    v7 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
  }
  v8 = v4 + 16 * v7 == v6;
  v9 = (unsigned int *)(v6 + 8);
  if (v8)
    v9 = (unsigned int *)(a1 + 80);
  return *(_QWORD *)(a1 + 72) + 104 * *v9;
}

uint64_t sub_1C4E45958(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_6;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_6;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_6:
  *a3 = v7;
  return result;
}

BOOL sub_1C4E45A04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v3 < 0x1C || *(_QWORD *)v2 != **(_QWORD **)(a1 + 8))
    return v3 > 0x1B;
  v5 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a2 + 24);
  v6 = v5 + 8;
  if ((*(_BYTE *)v5 & 1) != 0)
  {
    v7 = 4;
LABEL_6:
    v8 = v7 - 1;
    v9 = v8 & ((v2 >> 4) ^ (v2 >> 9));
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (v2 == *v10)
      return v3 > 0x1B;
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v18 = 0;
      else
        v18 = v11 == -8192;
      if (v18)
        v12 = v10;
      v19 = v9 + v13++;
      v9 = v19 & v8;
      v10 = (_QWORD *)(v6 + 8 * v9);
      v11 = *v10;
      if (v2 == *v10)
        return v3 > 0x1B;
    }
    if (v12)
      v14 = v12;
    else
      v14 = v10;
    goto LABEL_12;
  }
  v7 = *(_DWORD *)(v5 + 16);
  if (v7)
  {
    v6 = *(_QWORD *)(v5 + 8);
    goto LABEL_6;
  }
  v14 = 0;
LABEL_12:
  v15 = sub_1C4E4473C(v5, (uint64_t)&v20, &v20, v14);
  *v15 = v20;
  v16 = v20;
  v17 = *(unsigned int *)(v5 + 48);
  if (v17 >= *(_DWORD *)(v5 + 52))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 40, v5 + 56, v17 + 1, 8);
    LODWORD(v17) = *(_DWORD *)(v5 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8 * v17) = v16;
  ++*(_DWORD *)(v5 + 48);
  return v3 > 0x1B;
}

uint64_t sub_1C4E45B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  BOOL v4;

  v2 = *(_QWORD *)(a2 + 24);
  if (!v2
    || *(_BYTE *)(v2 + 16) != 81
    || ((v3 = *(_BYTE **)(v2 - 32)) != 0 ? (v4 = v3[16] == 19) : (v4 = 0),
        !v4 || *(_DWORD *)(*(_QWORD *)v3 + 8) >= 0x100u))
  {
    *(_BYTE *)(a1 + 24) = 0;
  }
  return 0;
}

uint64_t sub_1C4E45B90(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4E45C34(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E45DAC(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4E45DAC(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C4E45DAC(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C4E45B90((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_1C4E45E6C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1;
    v5 = *a1 + 104 * v2;
    v6 = (unsigned int *)(a2 + 16);
    v7 = (unsigned int *)(v4 + 16);
    do
    {
      *((_QWORD *)v6 - 2) = *((_QWORD *)v7 - 2);
      *((_BYTE *)v6 - 8) = *((_BYTE *)v7 - 8);
      v6 = sub_1C4E44570(v6, v7) + 26;
      v8 = v7 + 22;
      v7 += 26;
    }
    while (v8 != (unsigned int *)v5);
    v9 = *((_DWORD *)a1 + 2);
    if (v9)
    {
      v10 = *a1;
      v11 = 104 * v9;
      do
      {
        v12 = *(void **)(v10 + v11 - 48);
        if ((void *)(v10 + v11 - 32) != v12)
          free(v12);
        if ((*(_BYTE *)(v10 + v11 - 88) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v10 + v11 - 80), 8);
        v11 -= 104;
      }
      while (v11);
    }
  }
}

unsigned int *sub_1C4E45F30(unsigned int *result, unsigned int *a2)
{
  int64x2_t v2;
  int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int *v10;
  unsigned int *v11;
  uint64_t i;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  __int128 v16;

  if ((*(_BYTE *)result & 1) == 0)
  {
    v14 = a2;
    v15 = result;
    MEMORY[0x1CAA32FB4](*((_QWORD *)result + 1), 8);
    a2 = v14;
    result = v15;
  }
  v2 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(_QWORD *)result = 1;
  *(int64x2_t *)(result + 2) = v2;
  v3 = (int *)(result + 2);
  *(int64x2_t *)(result + 6) = v2;
  v4 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v5 = result[1];
  *result = v4 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v5;
  v6 = *a2;
  if ((*result & 1) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = 0;
      v8 = (int *)(a2 + 2);
      do
      {
        v9 = *(_QWORD *)&v3[v7];
        *(_QWORD *)&v3[v7] = *(_QWORD *)&v8[v7];
        *(_QWORD *)&v8[v7] = v9;
        v7 += 2;
      }
      while (v7 != 8);
      return result;
    }
    v10 = (int *)a2;
    v11 = result;
  }
  else
  {
    if ((v6 & 1) == 0)
    {
      v13 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v13;
      LODWORD(v13) = result[4];
      result[4] = a2[4];
      a2[4] = v13;
      return result;
    }
    v6 = *result;
    v10 = (int *)result;
    v11 = a2;
  }
  v16 = *(_OWORD *)(v10 + 2);
  *v10 = v6 | 1;
  for (i = 2; i != 10; i += 2)
    *(_QWORD *)&v10[i] = *(_QWORD *)&v11[i];
  *v11 &= ~1u;
  *(_OWORD *)(v11 + 2) = v16;
  return result;
}

char *sub_1C4E4606C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v4;
  int64x2_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int64x2_t v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  BOOL v23;
  void *v24;

  v4 = result;
  if (!a3)
  {
LABEL_2:
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = 1;
    v5 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    *(int64x2_t *)(result + 8) = v5;
    *(int64x2_t *)(result + 24) = v5;
    *((_QWORD *)result + 5) = result + 56;
    *((_QWORD *)result + 6) = 0x400000000;
    return result;
  }
  v6 = ((a4 >> 4) ^ (a4 >> 9)) & (a3 - 1);
  v7 = (uint64_t *)(a2 + 96 * v6);
  v8 = *v7;
  if (*v7 != a4)
  {
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (a3 - 1);
      v7 = (uint64_t *)(a2 + 96 * v6);
      v8 = *v7;
      if (*v7 == a4)
        goto LABEL_8;
    }
    goto LABEL_2;
  }
LABEL_8:
  v11 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(_QWORD *)result = 1;
  *(int64x2_t *)(result + 8) = v11;
  v12 = result + 8;
  *(int64x2_t *)(v4 + 24) = v11;
  v13 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 1) == 0)
  {
    MEMORY[0x1CAA32FB4](*((_QWORD *)v4 + 1), 8);
    v12 = v4 + 8;
    v13 = *(_DWORD *)v4;
  }
  v14 = *((_DWORD *)v7 + 2);
  if ((v14 & 1) != 0 || (v15 = *((unsigned int *)v7 + 6), v15 <= 4))
  {
    v16 = 0;
    v17 = *((_DWORD *)v7 + 3);
    *(_DWORD *)v4 = v14 | 1;
    *((_DWORD *)v4 + 1) = v17;
  }
  else
  {
    *(_DWORD *)v4 = v13 & 0xFFFFFFFE;
    v24 = v12;
    v20 = v15;
    v21 = operator new(8 * v15, (std::align_val_t)8uLL);
    v12 = v24;
    *((_QWORD *)v4 + 1) = v21;
    *((_QWORD *)v4 + 2) = v20;
    v14 = *((_DWORD *)v7 + 2);
    v22 = *((_DWORD *)v7 + 3);
    v23 = (*(_DWORD *)v4 & 1) == 0;
    *(_DWORD *)v4 = *(_DWORD *)v4 & 1 | v14 & 0xFFFFFFFE;
    *((_DWORD *)v4 + 1) = v22;
    v16 = v23;
    if (v23)
      v12 = v21;
  }
  v18 = v7 + 2;
  if ((v14 & 1) == 0)
    v18 = (_QWORD *)*v18;
  if (v16)
    v19 = 8 * *((unsigned int *)v4 + 4);
  else
    v19 = 32;
  result = (char *)memcpy(v12, v18, v19);
  *((_QWORD *)v4 + 5) = v4 + 56;
  *((_QWORD *)v4 + 6) = 0x400000000;
  if (*((_DWORD *)v7 + 14))
    return (char *)sub_1C49EEBE4((uint64_t)(v4 + 40), (uint64_t)(v7 + 6));
  return result;
}

uint64_t sub_1C4E46244(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a1 + 16 * a2;
  if (*(_QWORD *)(v3 + 6088))
    return *(_QWORD *)(v3 + 6080);
  else
    return a3;
}

unint64_t sub_1C4E46260(void (***a1)(uint64_t (***)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v14;
  char v15;
  unint64_t result;
  uint64_t (***v17)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (**v18)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);

  (**a1)(a1, a2, 0, 0, a7);
  v14 = (**a1)(a1, a2, a5, a6, a7);
  result = sub_1C4E4845C(v14, v15, a3, a4, a7);
  v17 = &a1[2 * a2];
  v17[760] = (uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))result;
  v17[761] = (uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))v18;
  return result;
}

void sub_1C4E46300(uint64_t a1)
{
  sub_1C4E48504(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4E46324(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

BOOL sub_1C4E4632C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  if (!*(_QWORD *)(a1 + 40))
    *(_QWORD *)(a1 + 40) = a2;
  return sub_1C4E486A0(a1 + 48, &v3);
}

uint64_t sub_1C4E46360(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  if (*(_QWORD *)(a1 + 40) == a2)
    *(_QWORD *)(a1 + 40) = 0;
  v3 = a1 + 48;
  v4 = *(_QWORD **)(a1 + 88);
  v5 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = &v4[v5];
    while (*v4 != a2)
    {
      ++v4;
      v6 -= 8;
      if (!v6)
      {
        v4 = v7;
        break;
      }
    }
  }
  v12 = 0;
  result = sub_1C4E487E4(v3, v4, &v12);
  if ((_DWORD)result)
  {
    *v12 = -8192;
    v9 = *(_DWORD *)(a1 + 52) + 1;
    *(_DWORD *)(a1 + 48) -= 2;
    *(_DWORD *)(a1 + 52) = v9;
  }
  v10 = *(unsigned int *)(a1 + 96);
  v11 = *(_QWORD *)(a1 + 88) + 8 * v10;
  if ((_QWORD *)v11 != v4 + 1)
  {
    result = (uint64_t)memmove(v4, v4 + 1, v11 - (_QWORD)(v4 + 1));
    LODWORD(v10) = *(_DWORD *)(a1 + 96);
  }
  *(_DWORD *)(a1 + 96) = v10 - 1;
  return result;
}

uint64_t sub_1C4E46424(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  v4 = a2;
  return sub_1C4E48B78(a1 + 48, &v4, &v3);
}

_QWORD *sub_1C4E46450@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 88);
  result = (_QWORD *)operator new();
  *result = &off_1E81378E8;
  result[1] = v3;
  *a2 = result;
  return result;
}

_QWORD *sub_1C4E46498@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 88) + 8 * *(unsigned int *)(a1 + 96);
  result = (_QWORD *)operator new();
  *result = &off_1E81378E8;
  result[1] = v3;
  *a2 = result;
  return result;
}

uint64_t sub_1C4E464E8()
{
  return 0;
}

uint64_t sub_1C4E464F0(uint64_t a1)
{
  return *(_QWORD *)(**(_QWORD **)(a1 + 88) + 40);
}

_QWORD *sub_1C4E46500@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 88 * a2 + 176);
  result = (_QWORD *)operator new();
  *result = &off_1E8137928;
  result[1] = v4;
  *a3 = result;
  return result;
}

_QWORD *sub_1C4E46550@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 88 * a2 + 176) + 8 * *(unsigned int *)(a1 + 88 * a2 + 184);
  result = (_QWORD *)operator new();
  *result = &off_1E8137928;
  result[1] = v4;
  *a3 = result;
  return result;
}

_QWORD *sub_1C4E465A8(_QWORD *result, unsigned int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;

  v19 = a3;
  v3 = &result[11 * a2];
  v5 = *((_BYTE *)v3 + 136);
  v4 = (uint64_t)(v3 + 17);
  if ((v5 & 1) != 0)
  {
    v6 = v4 + 8;
    v7 = 4;
  }
  else
  {
    v7 = *(_DWORD *)(v4 + 16);
    if (!v7)
    {
      v14 = 0;
      goto LABEL_9;
    }
    v6 = *(_QWORD *)(v4 + 8);
  }
  v8 = v7 - 1;
  v9 = v8 & ((a3 >> 4) ^ (a3 >> 9));
  v10 = (_QWORD *)(v6 + 8 * v9);
  v11 = *v10;
  if (*v10 == a3)
    return result;
  v12 = 0;
  v13 = 1;
  while (v11 != -4096)
  {
    if (v12)
      v17 = 0;
    else
      v17 = v11 == -8192;
    if (v17)
      v12 = v10;
    v18 = v9 + v13++;
    v9 = v18 & v8;
    v10 = (_QWORD *)(v6 + 8 * v9);
    v11 = *v10;
    if (*v10 == a3)
      return result;
  }
  if (v12)
    v14 = v12;
  else
    v14 = v10;
LABEL_9:
  result = sub_1C4E48DF0(v4, (uint64_t)&v19, &v19, v14);
  *result = v19;
  v15 = v19;
  v16 = *(unsigned int *)(v4 + 48);
  if (v16 >= *(_DWORD *)(v4 + 52))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(v4 + 40, v4 + 56, v16 + 1, 8);
    LODWORD(v16) = *(_DWORD *)(v4 + 48);
  }
  *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8 * v16) = v15;
  ++*(_DWORD *)(v4 + 48);
  return result;
}

_QWORD *sub_1C4E466BC(_QWORD *result, unsigned int a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  _QWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = &result[11 * a2];
  v5 = *((_BYTE *)v3 + 136);
  v4 = v3 + 17;
  if ((v5 & 1) != 0)
  {
    v6 = v4 + 1;
    v7 = 4;
  }
  else
  {
    v7 = *((_DWORD *)v4 + 4);
    if (!v7)
      return result;
    v6 = (_QWORD *)v4[1];
  }
  v8 = v7 - 1;
  LODWORD(v9) = (v7 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  v10 = &v6[v9];
  v11 = *v10;
  if (*v10 == a3)
  {
LABEL_11:
    *v10 = -8192;
    v14 = *((_DWORD *)v4 + 1) + 1;
    *(_DWORD *)v4 -= 2;
    *((_DWORD *)v4 + 1) = v14;
    result = (_QWORD *)v4[5];
    v15 = *((unsigned int *)v4 + 12);
    v16 = &result[v15];
    if ((_DWORD)v15)
    {
      v17 = 8 * v15;
      while (*result != a3)
      {
        ++result;
        v17 -= 8;
        if (!v17)
        {
          result = v16;
          break;
        }
      }
    }
    if (v16 != result + 1)
    {
      result = memmove(result, result + 1, (char *)v16 - (char *)(result + 1));
      LODWORD(v15) = *((_DWORD *)v4 + 12);
    }
    *((_DWORD *)v4 + 12) = v15 - 1;
  }
  else
  {
    v12 = 1;
    while (v11 != -4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & v8;
      v11 = v6[v9];
      if (v11 == a3)
      {
        v10 = &v6[v9];
        goto LABEL_11;
      }
    }
  }
  return result;
}

BOOL sub_1C4E467AC(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 88 * a2 + 184) == 0;
}

_QWORD *sub_1C4E467C4(_QWORD *result, unsigned int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;

  v2 = &result[11 * a2];
  v5 = *((_DWORD *)v2 + 34);
  v3 = v2 + 17;
  v4 = v5;
  if (v5 > 1 || *((_DWORD *)v3 + 1))
  {
    if ((v4 & 1) != 0)
    {
      v7 = v3 + 1;
      v8 = v3 + 5;
    }
    else
    {
      v6 = *((unsigned int *)v3 + 4);
      if (((2 * v4) & 0xFFFFFFFC) < v6 && v6 >= 0x41)
      {
        v10 = v3;
        result = sub_1C6196610(v3);
        v3 = v10;
        goto LABEL_10;
      }
      if (!(_DWORD)v6)
      {
        v9 = 0;
LABEL_9:
        *(_DWORD *)v3 = v9;
        *((_DWORD *)v3 + 1) = 0;
        goto LABEL_10;
      }
      v7 = (_QWORD *)v3[1];
      v8 = &v7[v6];
    }
    do
      *v7++ = -4096;
    while (v7 != v8);
    v9 = *(_DWORD *)v3 & 1;
    goto LABEL_9;
  }
LABEL_10:
  *((_DWORD *)v3 + 12) = 0;
  return result;
}

uint64_t sub_1C4E46870(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(a1 + 88 * a2 + 184);
}

BOOL sub_1C4E46880(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _BOOL8 result;
  unsigned int v13;

  v3 = a1 + 88 * a2;
  v5 = *(_BYTE *)(v3 + 136);
  v4 = v3 + 136;
  if ((v5 & 1) != 0)
  {
    v6 = v4 + 8;
    v7 = 4;
  }
  else
  {
    v7 = *(_DWORD *)(v4 + 16);
    if (!v7)
      return 0;
    v6 = *(_QWORD *)(v4 + 8);
  }
  v8 = v7 - 1;
  v9 = v8 & ((a3 >> 4) ^ (a3 >> 9));
  v10 = *(_QWORD *)(v6 + 8 * v9);
  if (v10 == a3)
    return 1;
  v11 = 1;
  do
  {
    result = v10 != -4096;
    if (v10 == -4096)
      break;
    v13 = v9 + v11++;
    v9 = v13 & v8;
    v10 = *(_QWORD *)(v6 + 8 * v9);
  }
  while (v10 != a3);
  return result;
}

uint64_t sub_1C4E46904(uint64_t a1)
{
  return *(_QWORD *)(a1 + 2424);
}

double sub_1C4E46914(_QWORD *a1, const void *a2, unint64_t a3)
{
  void *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v6 = 0uLL;
  v7 = 0;
  sub_1C4979194(&v6, a2, (uint64_t)a2 + 4 * a3, a3);
  v4 = (void *)a1[337];
  if (v4)
  {
    a1[338] = v4;
    operator delete(v4);
  }
  result = *(double *)&v6;
  *(_OWORD *)(a1 + 337) = v6;
  a1[339] = v7;
  return result;
}

uint64_t sub_1C4E46974(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_DWORD *)(a1 + 2760);
  v3 = a1 + 2768;
  if ((v2 & 1) != 0)
  {
    v4 = 64;
    v5 = a1 + 2768;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 2768);
    v4 = *(_DWORD *)(a1 + 2776);
    if (!v4)
    {
      v12 = 0;
      goto LABEL_10;
    }
  }
  v6 = v4 - 1;
  LODWORD(v7) = (v4 - 1) & (37 * a2);
  v8 = (uint64_t *)(v5 + 16 * v7);
  v9 = *v8;
  if (*v8 == a2)
    goto LABEL_11;
  v10 = 1;
  while (v9 != -1)
  {
    v11 = v7 + v10++;
    v7 = v11 & v6;
    v9 = *(_QWORD *)(v5 + 16 * v7);
    if (v9 == a2)
    {
      v8 = (uint64_t *)(v5 + 16 * v7);
      goto LABEL_11;
    }
  }
  if ((v2 & 1) != 0)
  {
    v12 = 64;
    v5 = a1 + 2768;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 2768);
    v12 = *(unsigned int *)(a1 + 2776);
  }
LABEL_10:
  v8 = (uint64_t *)(v5 + 16 * v12);
LABEL_11:
  if ((v2 & 1) != 0)
  {
    v13 = 64;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 2768);
    v13 = *(unsigned int *)(a1 + 2776);
  }
  if ((uint64_t *)(v3 + 16 * v13) == v8)
    return 0;
  else
    return *((unsigned int *)v8 + 2) | 0x100000000;
}

uint64_t sub_1C4E46A3C(uint64_t result, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  _DWORD *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v3 = *(_DWORD *)(result + 2760);
  if ((v3 & 1) != 0)
  {
    v4 = result + 2768;
    v5 = 64;
  }
  else
  {
    v5 = *(_DWORD *)(result + 2776);
    if (!v5)
    {
      v8 = 0;
      goto LABEL_17;
    }
    v4 = *(_QWORD *)(result + 2768);
  }
  v6 = v5 - 1;
  v7 = v6 & (37 * a2);
  v8 = (uint64_t *)(v4 + 16 * v7);
  v9 = *v8;
  if (*v8 == a2)
    goto LABEL_22;
  v10 = 0;
  v11 = 1;
  while (v9 != -1)
  {
    if (v10)
      v12 = 0;
    else
      v12 = v9 == -2;
    if (v12)
      v10 = v8;
    v13 = v7 + v11++;
    v7 = v13 & v6;
    v8 = (uint64_t *)(v4 + 16 * (v13 & v6));
    v9 = *v8;
    if (*v8 == a2)
      goto LABEL_22;
  }
  if (v10)
    v8 = v10;
  if ((v3 & 1) != 0)
    v5 = 64;
  else
    v5 = *(_DWORD *)(result + 2776);
LABEL_17:
  v14 = (_DWORD *)(result + 2760);
  v15 = v3 >> 1;
  if (4 * v15 + 4 >= 3 * v5)
  {
    v5 *= 2;
    goto LABEL_27;
  }
  if (v5 + ~v15 - *(_DWORD *)(result + 2764) <= v5 >> 3)
  {
LABEL_27:
    v17 = result;
    v19 = a2;
    v16 = a3;
    v18 = result + 2760;
    sub_1C4E49264(result + 2760, v5);
    v20 = 0;
    sub_1C4E491CC(v18, v19, &v20);
    result = v17;
    v14 = (_DWORD *)v18;
    a2 = v19;
    v8 = v20;
    a3 = v16;
  }
  *v14 += 2;
  if (*v8 != -1)
    --*(_DWORD *)(result + 2764);
  *v8 = a2;
  *((_DWORD *)v8 + 2) = 0;
LABEL_22:
  *((_DWORD *)v8 + 2) = a3;
  return result;
}

uint64_t sub_1C4E46BA0(uint64_t a1, uint64_t a2)
{
  int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v14;

  v3 = (int *)(a1 + 3792);
  v14 = 0;
  if (sub_1C4E494E4(a1 + 3792, a2, &v14))
  {
    v7 = v14;
    v4 = *v3;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 3792);
    if ((v4 & 1) != 0)
    {
      v5 = a1 + 3800;
      v6 = 16;
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 3800);
      v6 = *(unsigned int *)(a1 + 3808);
    }
    v7 = v5 + 16 * v6;
  }
  if ((v4 & 1) != 0)
  {
    v8 = a1 + 3800;
    v9 = 16;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 3800);
    v9 = *(unsigned int *)(a1 + 3808);
  }
  v10 = v8 + 16 * v9 == v7;
  v11 = (unsigned int *)(v7 + 8);
  if (v10)
    v11 = (unsigned int *)(a1 + 4064);
  v12 = *v11;
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 4064))
    return 0;
  else
    return *(unsigned int *)(*(_QWORD *)(a1 + 4056) + 16 * v12 + 8) | 0x100000000;
}

BOOL sub_1C4E46C5C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4064) == 0;
}

_QWORD *sub_1C4E46C6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 4328);
  result = (_QWORD *)operator new();
  *result = &off_1E81379A8;
  result[1] = v3;
  *a2 = result;
  return result;
}

_QWORD *sub_1C4E46CB4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 4328) + 16 * *(unsigned int *)(a1 + 4336);
  result = (_QWORD *)operator new();
  *result = &off_1E81379A8;
  result[1] = v3;
  *a2 = result;
  return result;
}

BOOL sub_1C4E46D04(uint64_t a1)
{
  return *(_DWORD *)(a1 + 4336) == 0;
}

_QWORD *sub_1C4E46D14@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 4472);
  result = (_QWORD *)operator new();
  *result = &off_1E81379E8;
  result[1] = v3;
  *a2 = result;
  return result;
}

_QWORD *sub_1C4E46D5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 4472) + 4 * *(unsigned int *)(a1 + 4480);
  result = (_QWORD *)operator new();
  *result = &off_1E81379E8;
  result[1] = v3;
  *a2 = result;
  return result;
}

uint64_t sub_1C4E46DAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4480);
}

_DWORD *sub_1C4E46DB4(_DWORD *result, int a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1120];
  if (v4 >= result[1121])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 1118), (uint64_t)(result + 1122), v4 + 1, 4);
    LODWORD(v4) = v3[1120];
  }
  *(_DWORD *)(*((_QWORD *)v3 + 559) + 4 * v4) = a2;
  ++v3[1120];
  return result;
}

uint64_t sub_1C4E46E1C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 4520);
}

uint64_t sub_1C4E46E24(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 4528);
  return v1 / (**(unsigned int (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a1)(a1, 6, 0, 1, 1);
}

uint64_t sub_1C4E46E60(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4533);
}

uint64_t sub_1C4E46E6C(_BYTE *a1, int a2)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 352))(a1);
  v5 = (**(uint64_t (***)(_BYTE *, uint64_t, _QWORD, uint64_t, uint64_t))a1)(a1, 7, 0, 1, 3);
  v6 = v5 / (**(unsigned int (***)(_BYTE *, uint64_t, _QWORD, uint64_t, uint64_t))a1)(a1, 6, 0, 1, 1);
  v7 = 4 * (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 312))(a1);
  v8 = (v7
                    / (**(unsigned int (***)(_BYTE *, uint64_t, _QWORD, uint64_t, uint64_t))a1)(a1, 6, 0, 1, 1))- v6+ v4;
  if (a2)
    v9 = 20;
  else
    v9 = 19;
  if (v8 >= (**(unsigned int (***)(_BYTE *, uint64_t, _QWORD, _QWORD, uint64_t))a1)(a1, v9, 0, 0, 5))return 0xFFFFFFFFLL;
  a1[4532] = 1;
  return v8;
}

uint64_t sub_1C4E46F80(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  int v5;

  v2 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a1)(a1, 7, 0, 1, 3);
  v3 = v2 / (**(unsigned int (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a1)(a1, 6, 0, 1, 1);
  v4 = 4 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
  v5 = v4 / (**(unsigned int (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a1)(a1, 6, 0, 1, 1)
     - v3;
  return v5 + (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
}

unint64_t sub_1C4E4703C(_BYTE *a1, uint64_t a2)
{
  int v4;
  int v5;
  _BYTE *v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;

  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFFFFFF00) != 0x200
    && (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, 8, a2))
  {
    a1[4532] = 1;
    v17 = *((_DWORD *)sub_1C4E496B4((uint64_t)(a1 + 4536), a2) + 2);
    v18 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 352))(a1);
    v12 = 0;
    LODWORD(v11) = v18 + v17;
    return v12 | v11;
  }
  v4 = *((_DWORD *)a1 + 1134);
  if ((v4 & 1) != 0)
  {
    v5 = 64;
    v6 = a1 + 4544;
  }
  else
  {
    v6 = (_BYTE *)*((_QWORD *)a1 + 568);
    v5 = *((_DWORD *)a1 + 1138);
    if (!v5)
    {
      v16 = 0;
LABEL_15:
      v9 = (uint64_t *)&v6[24 * v16];
      goto LABEL_6;
    }
  }
  v7 = v5 - 1;
  v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
  v9 = (uint64_t *)&v6[24 * v8];
  v10 = *v9;
  if (*v9 != a2)
  {
    v14 = 1;
    while (v10 != -4096)
    {
      v15 = v8 + v14++;
      v8 = v15 & v7;
      v9 = (uint64_t *)&v6[24 * v8];
      v10 = *v9;
      if (*v9 == a2)
        goto LABEL_6;
    }
    if ((v4 & 1) != 0)
    {
      v16 = 64;
      v6 = a1 + 4544;
    }
    else
    {
      v6 = (_BYTE *)*((_QWORD *)a1 + 568);
      v16 = *((_DWORD *)a1 + 1138);
    }
    goto LABEL_15;
  }
LABEL_6:
  v11 = v9[1];
  v12 = v11 & 0xFFFFFFFF00000000;
  return v12 | v11;
}

BOOL sub_1C4E47180(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BOOL8 result;
  int v8;
  unsigned int v9;

  if ((*(_BYTE *)(a1 + 4536) & 1) != 0)
  {
    v2 = a1 + 4544;
    v3 = 64;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 4552);
    if (!v3)
      return 0;
    v2 = *(_QWORD *)(a1 + 4544);
  }
  v4 = v3 - 1;
  v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
  v6 = *(_QWORD *)(v2 + 24 * v5);
  if (v6 == a2)
    return 1;
  v8 = 1;
  do
  {
    result = v6 != -4096;
    if (v6 == -4096)
      break;
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v6 = *(_QWORD *)(v2 + 24 * v5);
  }
  while (v6 != a2);
  return result;
}

_QWORD *sub_1C4E4720C(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  _QWORD *result;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;

  v22 = a2;
  result = (_QWORD *)(a1 + 4536);
  if ((*(_BYTE *)result & 1) != 0)
  {
    v11 = a1 + 4544;
    v12 = 64;
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 4552);
    if (!v12)
    {
      v21 = 0;
LABEL_17:
      result = sub_1C4E49818((uint64_t)result, &v22, v21);
      v15 = result;
      *result = a2;
      result[1] = 0;
      *((_DWORD *)result + 4) = 0;
      goto LABEL_4;
    }
    v11 = *(_QWORD *)(a1 + 4544);
  }
  v13 = v12 - 1;
  v14 = v13 & ((a2 >> 4) ^ (a2 >> 9));
  v15 = (_QWORD *)(v11 + 24 * v14);
  v16 = *v15;
  if (*v15 != a2)
  {
    v17 = 0;
    v18 = 1;
    while (v16 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -8192;
      if (v19)
        v17 = v15;
      v20 = v14 + v18++;
      v14 = v20 & v13;
      v15 = (_QWORD *)(v11 + 24 * (v20 & v13));
      v16 = *v15;
      if (*v15 == a2)
        goto LABEL_4;
    }
    if (v17)
      v21 = v17;
    else
      v21 = v15;
    goto LABEL_17;
  }
LABEL_4:
  *((_DWORD *)v15 + 2) = a3;
  *((_DWORD *)v15 + 3) = a4;
  *((_DWORD *)v15 + 4) = a5;
  return result;
}

uint64_t sub_1C4E4730C(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  int v4;

  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
  v3 = *(_DWORD *)(a1[340] + 4 * (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2));
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 312))(a1);
  return v3
       + 4 * v4
       - (*(unsigned int (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t))*a1)(a1, 7, 0, 1, 3);
}

uint64_t sub_1C4E4738C(_QWORD *a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
  return *(unsigned int *)(a1[340]
                         + 4 * (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 16));
}

uint64_t sub_1C4E473CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
  v3 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
  LODWORD(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 56))(v4, v3);
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
  v8 = *(_DWORD *)(a1[340] + 4 * (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0));
  v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
  return v3 - v8 / (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, v6);
}

uint64_t sub_1C4E474A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  if ((v4 & 0xFF00000000) != 0)
    return v4;
  v5 = 4 * (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 408))(a1, a2))
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 400))(a1, a2);
  }
  else
  {
    v9 = a2;
    v6 = (_DWORD *)sub_1C4E49C50(a1 + 3792, &v9);
    v7 = 0;
    *v6 = v5;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 328))(a1, v7);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 328))(a1, 0);
  return v5;
}

BOOL sub_1C4E4757C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v8;
  unint64_t v9;
  unsigned int v11;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 480))(a1, 5, 8, 8);
  v9 = HIDWORD(v8);
  if (HIDWORD(v8) <= a4)
  {
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 488))(a1, 5, 8, 8);
    sub_1C61968E8(a1 + 4328, a2, v11, a3);
  }
  return v9 <= a4;
}

unint64_t sub_1C4E47618(_QWORD *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;

  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a2);
  if (a4 <= 4)
    v10 = 4;
  else
    v10 = a4;
  v11 = (v10 + *(unsigned int *)(a1[340] + 4 * v9) - 1) / v10 * v10;
  return v11 | ((unint64_t)(v11 + a3) << 32);
}

uint64_t sub_1C4E47694(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  llvm::raw_ostream *v21;
  uint64_t v22;
  char *v23;
  llvm::raw_ostream *v24;
  llvm::raw_ostream *v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  __int16 v31;
  void *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  _QWORD v41[3];

  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 480))(a1);
  v8 = v7;
  v10 = v9;
  v11 = HIDWORD(v7);
  v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 24))(v12, a2);
  v14 = v13;
  if (a4 <= 4)
    v15 = 4;
  else
    v15 = a4;
  v16 = (v11 + v13 - 1) / v13;
  v17 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
  if (v16 > (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 56))(v17, v10))
  {
    memset(v41, 0, sizeof(v41));
    v33 = 0;
    v37 = 0;
    v38 = 0;
    v32 = &unk_1E81A7208;
    v40 = v41;
    v39 = 0;
    v35 = 0;
    v36 = 0;
    v34 = 0;
    v21 = sub_1C4816AD8((llvm::raw_ostream *)&v32, "Too many resources of type '");
    v22 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
    v23 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 32))(v22, v10);
    v24 = sub_1C4816AD8(v21, v23);
    v25 = sub_1C4816AD8(v24, "' used: ");
    v26 = sub_1C6196914(v25, v16);
    v27 = sub_1C4816AD8(v26, "/");
    v28 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 56))(v28, v10);
    sub_1C6196914(v27, v29);
    v31 = 260;
    v30 = v40;
    llvm::report_fatal_error((uint64_t)&v30, 1);
  }
  *(_DWORD *)(a1[340] + 4 * v10) = v11;
  if ((_DWORD)a2 == 5)
  {
    v18 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t))*a1)(a1, 8, 0, 1, 3);
    (*(void (**)(_QWORD *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*a1 + 8))(a1, 8, (_DWORD)v11 - v8 - ((v15 + v18 - 1) % v15) + (_DWORD)v15 - 1, 1, 0, 1, 3);
  }
  v19 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, 9) == (_DWORD)v10)
    *((_DWORD *)a1 + 1132) = (*(_DWORD *)(a1[340] + 4 * v10) + 3) & 0xFFFFFFFC;
  return v8 / v14;
}

uint64_t sub_1C4E478F0(uint64_t result, uint64_t ***a2, llvm::DataLayout *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t ****v15;
  uint64_t ***v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ****v25;
  uint64_t ***v26;
  int v27;
  int v28;
  uint64_t ***v29;
  uint64_t v30;
  uint64_t ****v31;
  uint64_t ***v32;
  int v33;
  int v34;
  uint64_t ***v35;
  uint64_t **v36;
  uint64_t **v37;
  int v38;
  BOOL v39;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t **v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t ****v55;
  uint64_t ***v56;
  int v57;
  int v58;
  uint64_t ***v59;
  uint64_t ***v60;
  int v61;
  int v62;
  uint64_t **v63;
  uint64_t v64;
  BOOL v65;

  v7 = result;
  v8 = *(_DWORD *)(result + 4536);
  v9 = result + 4544;
  v10 = a2 >> 4;
  if ((v8 & 1) != 0)
  {
    v11 = 64;
    v12 = result + 4544;
  }
  else
  {
    v12 = *(_QWORD *)(result + 4544);
    v11 = *(_DWORD *)(result + 4552);
    if (!v11)
    {
      v43 = 0;
      goto LABEL_37;
    }
  }
  v13 = v11 - 1;
  v14 = (v11 - 1) & (v10 ^ (a2 >> 9));
  v15 = (uint64_t ****)(v12 + 24 * v14);
  v16 = *v15;
  if (*v15 == a2)
    goto LABEL_4;
  v41 = 1;
  while (v16 != (uint64_t ***)-4096)
  {
    v42 = v14 + v41++;
    v14 = v42 & v13;
    v15 = (uint64_t ****)(v12 + 24 * (v42 & v13));
    v16 = *v15;
    if (*v15 == a2)
      goto LABEL_4;
  }
  if ((v8 & 1) != 0)
  {
    v43 = 64;
    v12 = result + 4544;
  }
  else
  {
    v12 = *(_QWORD *)(result + 4544);
    v43 = *(_DWORD *)(result + 4552);
  }
LABEL_37:
  v15 = (uint64_t ****)(v12 + 24 * v43);
LABEL_4:
  if ((v8 & 1) != 0)
  {
    v17 = 64;
  }
  else
  {
    v9 = *(_QWORD *)(result + 4544);
    v17 = *(_DWORD *)(result + 4552);
  }
  if ((uint64_t ****)(v9 + 24 * v17) == v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 336))(result);
    v18 = sub_1C4E4A060((uint64_t)a2[3], a3);
    v19 = HIWORD(*((_DWORD *)a2 + 8)) & 0x3F;
    if (v19)
    {
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 488))(v7, a4, v18, 1 << (v19 - 1));
      result = (*(uint64_t (**)(uint64_t, uint64_t ***, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 416))(v7, a2, v20, v18, a4);
      if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
        return result;
      v21 = ***a2;
      v22 = *(_QWORD *)(v21 + 152);
      v23 = *(unsigned int *)(v21 + 168);
      if ((_DWORD)v23)
      {
        LODWORD(v24) = (v23 - 1) & (v10 ^ (a2 >> 9));
        v25 = (uint64_t ****)(v22 + 16 * v24);
        v26 = *v25;
        if (*v25 == a2)
        {
LABEL_15:
          v29 = v25[1];
          if (*v29 != (uint64_t **)14
            || ((v50 = v29[2], v51 = *(uint64_t *)((char *)v29 + 22), v50 == (uint64_t **)0x696C79642E636761)
              ? (v52 = v51 == 0x657361625F62696CLL)
              : (v52 = 0),
                !v52))
          {
            if ((_DWORD)v23)
            {
              LODWORD(v30) = (v23 - 1) & (v10 ^ (a2 >> 9));
              v31 = (uint64_t ****)(v22 + 16 * v30);
              v32 = *v31;
              if (*v31 == a2)
                goto LABEL_22;
              v33 = 1;
              while (v32 != (uint64_t ***)-4096)
              {
                v34 = v30 + v33++;
                v30 = v34 & (v23 - 1);
                v32 = *(uint64_t ****)(v22 + 16 * v30);
                if (v32 == a2)
                  goto LABEL_21;
              }
            }
            goto LABEL_64;
          }
          goto LABEL_49;
        }
        v27 = 1;
        while (v26 != (uint64_t ***)-4096)
        {
          v28 = v24 + v27++;
          v24 = v28 & (v23 - 1);
          v26 = *(uint64_t ****)(v22 + 16 * v24);
          if (v26 == a2)
          {
            v25 = (uint64_t ****)(v22 + 16 * v24);
            goto LABEL_15;
          }
        }
      }
      v25 = (uint64_t ****)(v22 + 16 * v23);
      goto LABEL_15;
    }
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, _QWORD))(*(_QWORD *)v7 + 488))(v7, a4, v18, 0);
    result = (*(uint64_t (**)(uint64_t, uint64_t ***, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 416))(v7, a2, v20, v18, a4);
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
      return result;
    v53 = ***a2;
    v22 = *(_QWORD *)(v53 + 152);
    v23 = *(unsigned int *)(v53 + 168);
    if ((_DWORD)v23)
    {
      LODWORD(v54) = (v23 - 1) & (v10 ^ (a2 >> 9));
      v55 = (uint64_t ****)(v22 + 16 * v54);
      v56 = *v55;
      if (*v55 == a2)
      {
LABEL_57:
        v59 = v55[1];
        if (*v59 != (uint64_t **)14
          || ((v63 = v59[2], v64 = *(uint64_t *)((char *)v59 + 22), v63 == (uint64_t **)0x696C79642E636761)
            ? (v65 = v64 == 0x657361625F62696CLL)
            : (v65 = 0),
              !v65))
        {
          if ((_DWORD)v23)
          {
            LODWORD(v30) = (v23 - 1) & (v10 ^ (a2 >> 9));
            v31 = (uint64_t ****)(v22 + 16 * v30);
            v60 = *v31;
            if (*v31 == a2)
              goto LABEL_22;
            v61 = 1;
            while (v60 != (uint64_t ***)-4096)
            {
              v62 = v30 + v61++;
              v30 = v62 & (v23 - 1);
              v60 = *(uint64_t ****)(v22 + 16 * v30);
              if (v60 == a2)
              {
LABEL_21:
                v31 = (uint64_t ****)(v22 + 16 * v30);
                goto LABEL_22;
              }
            }
          }
LABEL_64:
          v31 = (uint64_t ****)(v22 + 16 * v23);
LABEL_22:
          v35 = v31[1];
          if ((unint64_t)*v35 < 0x11)
            return result;
          v36 = v35[2];
          v37 = v35[3];
          v38 = *((unsigned __int8 *)v35 + 32);
          v39 = v36 == (uint64_t **)0x706D61732E636761 && v37 == (uint64_t **)0x706165685F72656CLL;
          if (!v39 || v38 != 46)
            return result;
          v44 = v20;
          v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 8);
          v46 = v7;
          v47 = 3;
          v48 = 0;
          v49 = 0;
          return v45(v46, v47, v44, 1, v48, v49, 1);
        }
LABEL_49:
        v44 = v20;
        v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 8);
        v46 = v7;
        v47 = 5;
        v48 = 0xFFFFFFFFLL;
        v49 = 1;
        return v45(v46, v47, v44, 1, v48, v49, 1);
      }
      v57 = 1;
      while (v56 != (uint64_t ***)-4096)
      {
        v58 = v54 + v57++;
        v54 = v58 & (v23 - 1);
        v56 = *(uint64_t ****)(v22 + 16 * v54);
        if (v56 == a2)
        {
          v55 = (uint64_t ****)(v22 + 16 * v54);
          goto LABEL_57;
        }
      }
    }
    v55 = (uint64_t ****)(v22 + 16 * v23);
    goto LABEL_57;
  }
  return result;
}

uint64_t sub_1C4E47D54(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;

  v3 = *a1;
  if (a2)
  {
    (*(void (**)(uint64_t *))(v3 + 496))(a1);
    v17 = a2;
    if ((a1[567] & 1) != 0)
    {
      v5 = a1 + 568;
      v6 = 64;
    }
    else
    {
      v6 = *((_DWORD *)a1 + 1138);
      if (!v6)
      {
        v16 = 0;
        goto LABEL_18;
      }
      v5 = (uint64_t *)a1[568];
    }
    v7 = v6 - 1;
    v8 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = &v5[3 * v8];
    v10 = *v9;
    if (*v9 == a2)
      return *((unsigned int *)v9 + 2);
    v12 = 0;
    v13 = 1;
    while (v10 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v10 == -8192;
      if (v14)
        v12 = v9;
      v15 = v8 + v13++;
      v8 = v15 & v7;
      v9 = &v5[3 * (v15 & v7)];
      v10 = *v9;
      if (*v9 == a2)
        return *((unsigned int *)v9 + 2);
    }
    if (v12)
      v16 = v12;
    else
      v16 = v9;
LABEL_18:
    v9 = sub_1C4E49818((uint64_t)(a1 + 567), &v17, v16);
    *v9 = a2;
    v9[1] = 0;
    *((_DWORD *)v9 + 4) = 0;
    return *((unsigned int *)v9 + 2);
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v3 + 488))(a1, 4, 8, 8);
}

uint64_t sub_1C4E47E74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
  v3 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 488))(a1, 4, v2, 4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 8))(a1, 3, v3, 1, 0, 0, 1);
}

uint64_t sub_1C4E47EDC(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v15;

  v4 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 336))(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
  *(_DWORD *)(*((_QWORD *)a1 + 340) + 4 * result) = 0;
  if ((_DWORD)a2 == 5)
    result = (*(uint64_t (**)(unsigned int *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 8))(a1, 8, 0, 1, 0, 1, 0);
  v6 = a1[1134];
  if (v6 <= 1)
  {
    if (v6)
    {
      v14 = a1 + 1136;
      v15 = 64;
    }
    else
    {
      v14 = (_QWORD *)*((_QWORD *)a1 + 568);
      v15 = a1[1138];
    }
    v7 = &v14[3 * v15];
LABEL_28:
    v8 = v7;
    goto LABEL_10;
  }
  if ((v6 & 1) == 0)
  {
    v7 = (_QWORD *)*((_QWORD *)a1 + 568);
    v13 = a1[1138];
    if (v13)
    {
      v8 = &v7[3 * v13];
      goto LABEL_6;
    }
    goto LABEL_28;
  }
  v7 = a1 + 1136;
  v8 = a1 + 1520;
LABEL_6:
  while (*v7 == -4096 || *v7 == -8192)
  {
    v7 += 3;
    if (v7 == v8)
    {
      v7 = v8;
      break;
    }
  }
LABEL_10:
  while (1)
  {
    v9 = v7;
    if ((v6 & 1) != 0)
    {
      v10 = a1 + 1136;
      v11 = 64;
    }
    else
    {
      v10 = (_QWORD *)*((_QWORD *)a1 + 568);
      v11 = a1[1138];
    }
    if (v9 == &v10[3 * v11])
      return result;
    v12 = v9 + 3;
    v7 = v8;
    if (v9 + 3 != v8)
    {
      while ((*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v12 += 3;
        if (v12 == v8)
        {
          v7 = v8;
          goto LABEL_19;
        }
      }
      v7 = v12;
    }
LABEL_19:
    if (*((_DWORD *)v9 + 4) == (_DWORD)a2)
    {
      *v9 = -8192;
      v6 = a1[1134] - 2;
      a1[1134] = v6;
      ++a1[1135];
    }
  }
}

void sub_1C4E4807C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1;
  v5 = a3;
  v3 = 0;
  v6 = 0;
  sub_1C4E4A16C(&v3, a2);
  if ((_DWORD)v6)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 328))(v4, v3);
}

uint64_t sub_1C4E480C8(uint64_t a1)
{
  uint64_t result;
  unsigned int v2;
  BOOL v3;
  int v4;

  result = *(_QWORD *)(a1 + 40);
  v2 = ((*(unsigned __int16 *)(result + 18) >> 4) & 0x3FF) - 101;
  v3 = v2 > 7;
  v4 = (1 << v2) & 0xAF;
  if (v3 || v4 == 0)
    return 0;
  return result;
}

uint64_t sub_1C4E48100(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_1C4E48108(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;

  if ((*(_BYTE *)(result + 4536) & 1) != 0)
  {
    v2 = result + 4544;
    v3 = 64;
  }
  else
  {
    v3 = *(_DWORD *)(result + 4552);
    if (!v3)
      return result;
    v2 = *(_QWORD *)(result + 4544);
  }
  v4 = v3 - 1;
  v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
  v6 = (uint64_t *)(v2 + 24 * v5);
  v7 = *v6;
  if (*v6 == a2)
  {
LABEL_4:
    *v6 = -8192;
    *(_DWORD *)(result + 4536) -= 2;
    ++*(_DWORD *)(result + 4540);
  }
  else
  {
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & v4;
      v6 = (uint64_t *)(v2 + 24 * v5);
      v7 = *v6;
      if (*v6 == a2)
        goto LABEL_4;
    }
  }
  return result;
}

uint64_t sub_1C4E481A4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 96);
  if (!(_DWORD)v2)
    return 0;
  v3 = *(uint64_t **)(a1 + 88);
  v4 = 8 * v2;
  while (1)
  {
    result = *v3;
    if (((*(unsigned __int16 *)(*v3 + 18) >> 4) & 0x3FF) == a2)
      break;
    ++v3;
    v4 -= 8;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t sub_1C4E481DC(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 568))(a1) == a2)
    return a1;
  else
    return 0;
}

void sub_1C4E48210(_QWORD *a1, int a2)
{
  char *v4;
  unint64_t v5;
  _DWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;

  v4 = (char *)a1[855];
  v5 = a1[856];
  if ((unint64_t)v4 >= v5)
  {
    v7 = (char *)a1[854];
    v8 = (v4 - v7) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      abort();
    v10 = v5 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 62)
        sub_1C4764EE4();
      v12 = (char *)operator new(4 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    *(_DWORD *)v13 = a2;
    v6 = v13 + 4;
    while (v4 != v7)
    {
      v14 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v13 - 1) = v14;
      v13 -= 4;
    }
    a1[854] = v13;
    a1[855] = v6;
    a1[856] = &v12[4 * v11];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_DWORD *)v4 = a2;
    v6 = v4 + 4;
  }
  a1[855] = v6;
}

uint64_t sub_1C4E482F8(uint64_t a1)
{
  return a1 + 6832;
}

uint64_t sub_1C4E48304()
{
  return 8;
}

_QWORD *sub_1C4E4830C(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;
  uint64_t v5;

  v5 = a2;
  result = sub_1C4E2FB20(a1 + 16, &v5);
  *((_DWORD *)result + 2) = a3;
  return result;
}

uint64_t sub_1C4E48344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_6;
    v7 = 1;
    while (v6 != -4096)
    {
      v9 = v4 + v7++;
      v4 = v9 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_6;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_6:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  else
    return *((unsigned int *)v5 + 2) | 0x100000000;
}

BOOL sub_1C4E483C4(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v7, a1);
  v6 = v8;
  v2 = sub_1C4E4A938(&v6, a1);
  v3 = v7;
  v7 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v2;
}

unint64_t sub_1C4E4845C(unint64_t a1, char a2, unint64_t a3, uint64_t a4, int a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  switch(a5)
  {
    case 0:
    case 1:
      v5 = a3 & 0xFFFFFFFFFFFFFF00;
      return v5 | a3;
    case 2:
      a3 |= a1;
      goto LABEL_17;
    case 3:
      a3 += a1;
      goto LABEL_17;
    case 4:
      if (a2)
        v6 = a1;
      else
        v6 = a3;
      if (v6 > a3)
        a3 = v6;
      goto LABEL_17;
    case 5:
      if (a2)
        v7 = a1;
      else
        v7 = a3;
      if (a3 >= v7)
        a3 = v7;
LABEL_17:
      v5 = a3 & 0xFFFFFFFFFFFFFF00;
      break;
    default:
      LOBYTE(a3) = 0;
      v5 = 0;
      break;
  }
  return v5 | a3;
}

uint64_t sub_1C4E48504(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  *(_QWORD *)a1 = off_1E8137640;
  v2 = *(void **)(a1 + 6832);
  if (v2)
  {
    *(_QWORD *)(a1 + 6840) = v2;
    operator delete(v2);
  }
  if ((*(_BYTE *)(a1 + 4536) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 4544), 8);
  v3 = *(void **)(a1 + 4472);
  if (v3 != (void *)(a1 + 4488))
    free(v3);
  v4 = *(void **)(a1 + 4328);
  if (v4 != (void *)(a1 + 4344))
    free(v4);
  v5 = *(void **)(a1 + 4056);
  if (v5 != (void *)(a1 + 4072))
    free(v5);
  if ((*(_BYTE *)(a1 + 3792) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 3800), 8);
  if ((*(_BYTE *)(a1 + 2760) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 2768), 8);
  v6 = *(void **)(a1 + 2720);
  if (v6 != (void *)(a1 + 2736))
    free(v6);
  v7 = *(void **)(a1 + 2696);
  if (v7)
  {
    *(_QWORD *)(a1 + 2704) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 2424);
  if (v8 != (void *)(a1 + 2440))
    free(v8);
  v9 = 2288;
  do
  {
    v10 = *(void **)(a1 + v9 + 88);
    if ((void *)(a1 + v9 + 104) != v10)
      free(v10);
    if ((*(_BYTE *)(a1 + v9 + 48) & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + v9 + 56), 8);
    v9 -= 88;
  }
  while (v9);
  v11 = *(void **)(a1 + 88);
  if (v11 != (void *)(a1 + 104))
    free(v11);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 16), 8);
  return a1;
}

BOOL sub_1C4E486A0(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 v9;

  sub_1C4E4872C(a1, a2, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, a1 + 56, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

_QWORD *sub_1C4E4872C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C4E487E4(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 4;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = 0;
    v10 = v12 + 8 * v13;
  }
  else
  {
    result = sub_1C4E48894((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 4;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = v8 + 8 * v9;
    v11 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1C4E487E4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4E48894(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C4E48954((uint64_t)a1, v7);
  v9 = 0;
  sub_1C4E487E4((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C4E48954(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E48ABC(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4E48ABC(a1, v14, v8);
}

uint64_t sub_1C4E48ABC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C4E487E4((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C4E48B78(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void sub_1C4E48C28()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4E48C3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81378E8;
  result[1] = v5;
  *a2 = result;
  return result;
}

BOOL sub_1C4E48C88(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

uint64_t sub_1C4E48C9C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1C4E48CA4(uint64_t result)
{
  *(_QWORD *)(result + 8) += 8;
  return result;
}

void sub_1C4E48CB4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4E48CC8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8137928;
  result[1] = v5;
  *a2 = result;
  return result;
}

BOOL sub_1C4E48D14(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

uint64_t sub_1C4E48D28(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1C4E48D30(uint64_t result)
{
  *(_QWORD *)(result + 8) += 8;
  return result;
}

uint64_t sub_1C4E48D40(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4E48DF0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C4E48F64(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 4;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 8 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 8 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C4E48F64(a1, v8);
      v20 = 0;
      sub_1C4E48D40(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C4E48F64(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E490CC((int *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4E490CC((int *)a1, v14, v8);
}

int *sub_1C4E490CC(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 10;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 4;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v9[2 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v9[2 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_14;
        }
        if (v14)
          v12 = v14;
      }
LABEL_14:
      *(_QWORD *)v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C4E491CC(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 64;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -1)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -2;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

int *sub_1C4E49264(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[129];

  v14[128] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x41)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x40)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E493E4((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      *v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 1024);
  if (a2 > 0x40)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4E493E4((int *)a1, v14, v9);
}

int *sub_1C4E493E4(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 258;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -1;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((unint64_t)*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 64;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & (37 * v7);
      v12 = (uint64_t *)&v9[4 * v11];
      v13 = *v12;
      if (v7 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -1)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -2;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)&v9[4 * (v17 & v10)];
          v13 = *v12;
          if (v7 == *v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      *v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C4E494E4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

BOOL sub_1C4E49588(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

uint64_t sub_1C4E4959C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1C4E495A4(uint64_t result)
{
  *(_QWORD *)(result + 8) += 16;
  return result;
}

void sub_1C4E495B4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4E495C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81379A8;
  result[1] = v5;
  *a2 = result;
  return result;
}

BOOL sub_1C4E49614(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

void sub_1C4E49628()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4E4963C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81379E8;
  result[1] = v5;
  *a2 = result;
  return result;
}

BOOL sub_1C4E49688(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

uint64_t sub_1C4E4969C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1C4E496A4(uint64_t result)
{
  *(_QWORD *)(result + 8) += 4;
  return result;
}

uint64_t *sub_1C4E496B4(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  unsigned int v11;

  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v2 = 64;
    v3 = a1 + 8;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v2 = *(_DWORD *)(a1 + 16);
    if (!v2)
    {
      v11 = 0;
      return (uint64_t *)(v3 + 24 * v11);
    }
  }
  v4 = v2 - 1;
  v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = (uint64_t *)(v3 + 24 * v5);
  v7 = *v6;
  if (*v6 != a2)
  {
    v9 = 1;
    while (v7 != -4096)
    {
      v10 = v5 + v9++;
      v5 = v10 & v4;
      v6 = (uint64_t *)(v3 + 24 * (v10 & v4));
      v7 = *v6;
      if (*v6 == a2)
        return v6;
    }
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v11 = 64;
      v3 = a1 + 8;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 8);
      v11 = *(_DWORD *)(a1 + 16);
    }
    return (uint64_t *)(v3 + 24 * v11);
  }
  return v6;
}

uint64_t sub_1C4E49778(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 64;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_4;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 24 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 24 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_4;
    }
    if (v9)
      v7 = v9;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4E49818(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  _QWORD *v19;

  v5 = *(_DWORD *)a1;
  v6 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v7 = 64;
  else
    v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C4E49990(a1, 2 * v7);
    v10 = a1 + 8;
    v5 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v11 = 64;
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 16);
      if (!v11)
      {
        v8 = 0;
        a3 = 0;
        goto LABEL_7;
      }
      v10 = *(_QWORD *)(a1 + 8);
    }
    v8 = *(_DWORD *)a1 & 1;
    v12 = v11 - 1;
    v13 = ((*a2 >> 4) ^ (*a2 >> 9)) & v12;
    a3 = (_QWORD *)(v10 + 24 * v13);
    v14 = *a3;
    if (*a2 != *a3)
    {
      v15 = 0;
      v16 = 1;
      while (v14 != -4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -8192;
        if (v17)
          v15 = a3;
        v18 = v13 + v16++;
        v13 = v18 & v12;
        a3 = (_QWORD *)(v10 + 24 * v13);
        v14 = *a3;
        if (*a2 == *a3)
          goto LABEL_7;
      }
      if (v15)
        a3 = v15;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 4) <= v7 >> 3)
    {
      sub_1C4E49990(a1, v7);
      v19 = 0;
      sub_1C4E49778(a1, *a2, &v19);
      a3 = v19;
      v5 = *(_DWORD *)a1;
    }
    v8 = v5 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v8) + 2;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a3;
}

int *sub_1C4E49990(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16[193];

  v16[192] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x41)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 0x40)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E49B34((int *)a1, v6, &v6[3 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v16;
  do
  {
    v10 = a1 + v8;
    v11 = *(_QWORD *)(a1 + v8 + 8);
    if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v11;
      v12 = *(_QWORD *)(v10 + 16);
      *((_DWORD *)v9 + 4) = *(_DWORD *)(v10 + 24);
      v9[1] = v12;
      v9 += 3;
    }
    v8 += 24;
  }
  while (v8 != 1536);
  if (a2 > 0x40)
  {
    *(_DWORD *)a1 &= ~1u;
    v13 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v13;
  }
  return sub_1C4E49B34((int *)a1, v16, v9);
}

int *sub_1C4E49B34(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  unsigned int v18;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 386;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[3 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 3;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 64;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = (uint64_t *)&v9[6 * v11];
      v13 = *v12;
      if (v7 != *v12)
      {
        v15 = 0;
        v16 = 1;
        while (v13 != -4096)
        {
          if (v15)
            v17 = 0;
          else
            v17 = v13 == -8192;
          if (v17)
            v15 = v12;
          v18 = v11 + v16++;
          v11 = v18 & v10;
          v12 = (uint64_t *)&v9[6 * (v18 & v10)];
          v13 = *v12;
          if (v7 == *v12)
            goto LABEL_10;
        }
        if (v15)
          v12 = v15;
      }
LABEL_10:
      *v12 = v7;
      v14 = a2[1];
      *((_DWORD *)v12 + 4) = *((_DWORD *)a2 + 4);
      v12[1] = v14;
      *result += 2;
    }
    a2 += 3;
  }
  return result;
}

uint64_t sub_1C4E49C50(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v14;

  v4 = *a2;
  v14 = 0;
  v5 = sub_1C4E494E4(a1, v4, &v14);
  v6 = v14;
  if ((v5 & 1) != 0)
  {
    v12 = *(_DWORD *)(v14 + 8);
    return *(_QWORD *)(a1 + 264) + 16 * v12 + 8;
  }
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 16;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_14;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
  {
LABEL_14:
    sub_1C4E49D98(a1, v8);
    v14 = 0;
    sub_1C4E494E4(a1, v4, &v14);
    v6 = v14;
  }
  *(_DWORD *)a1 += 2;
  if (*(_QWORD *)v6 != -4096)
    --*(_DWORD *)(a1 + 4);
  *(_QWORD *)v6 = v4;
  *(_DWORD *)(v6 + 8) = 0;
  v9 = *a2;
  v10 = *(unsigned int *)(a1 + 272);
  if (v10 >= *(_DWORD *)(a1 + 276))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 264, a1 + 280, v10 + 1, 16);
    LODWORD(v10) = *(_DWORD *)(a1 + 272);
  }
  v11 = (uint64_t *)(*(_QWORD *)(a1 + 264) + 16 * v10);
  *v11 = v9;
  v11[1] = 0;
  v12 = *(_DWORD *)(a1 + 272);
  *(_DWORD *)(a1 + 272) = v12 + 1;
  *(_DWORD *)(v6 + 8) = v12;
  return *(_QWORD *)(a1 + 264) + 16 * v12 + 8;
}

uint64_t sub_1C4E49D98(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[256];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E49F1C(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4E49F1C(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C4E49F1C(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C4E494E4((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C4E49FDC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;

  v8 = *(unsigned int *)(a1 + 8);
  if (v8 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(a1 + 8);
  }
  v9 = (_QWORD *)(*(_QWORD *)a1 + 16 * v8);
  *v9 = a2;
  v9[1] = a3 | (unint64_t)(a4 << 32);
  LODWORD(v9) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v9;
  return *(_QWORD *)a1 + 16 * v9 - 16;
}

unint64_t sub_1C4E4A060(uint64_t a1, llvm::DataLayout *a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v3 = a1;
  sub_1C4768AD0((uint64_t)a2, a1);
  v6 = (unint64_t)(v5 + 7) >> 3;
  if ((_DWORD)v4 == 1)
  {
    if (!v3)
      return v6;
  }
  else if (!v3)
  {
    return v6;
  }
  if (*(_BYTE *)(v3 + 8) == 16)
  {
    do
    {
      v7 = *(_DWORD *)(v3 + 12);
      if (!v7)
        break;
      v8 = *((_QWORD *)llvm::DataLayout::getStructLayout(a2, (llvm::StructType *)v3) + (v7 - 1) + 2);
      v9 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * (v7 - 1));
      v10 = sub_1C4E4A060(v9, a2);
      sub_1C4768AD0((uint64_t)a2, v3);
      v13 = v12;
      if ((_DWORD)v11 == 1)
      v6 = (v8 & 0x1FFFFFFFFFFFFFFFLL) + v6 + v10 - ((unint64_t)(v13 + 7) >> 3);
      v14 = v9 && *(_BYTE *)(v9 + 8) == 16;
      v3 = v9;
    }
    while (v14);
  }
  return v6;
}

void sub_1C4E4A16C(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  const char *v10;
  char v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t RawDataValues;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  _QWORD *v32;
  llvm::detail::DoubleAPFloat *v33;
  unsigned int v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int v37;
  char v38;
  int v39;
  llvm::Value **v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  llvm::StructLayout *StructLayout;
  llvm::StructLayout *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  BOOL v53;
  char v54;
  const char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  const char *v64;
  char v65;
  char v66;
  unint64_t v67;
  int v68;
  unsigned int v69;
  char v70;
  llvm::Value **v71;
  uint64_t *v72;
  const char *v73;
  char *v74;
  unsigned int v75;
  uint64_t v76;
  _QWORD *v77;
  unsigned int v78;

  v4 = *((_QWORD *)a1 + 2);
  v5 = *(_QWORD *)a2;
  sub_1C4768AD0(v4, *(_QWORD *)a2);
  v7 = (unint64_t)(v6 + 7) >> 3;
  v9 = v8 == 1;
  llvm::DataLayout::getAlignment(v4, v5);
  v12 = ((1 << v11) + v7 - 1) & -(1 << v11);
  if (v9)
  v13 = a1[7];
  v14 = *(unsigned __int8 *)(a2 + 16);
  if ((v14 - 11) < 3)
    goto LABEL_6;
  if (v14 == 16)
  {
    v20 = *(unsigned int *)(a2 + 32);
    v78 = v20;
    if (v20 > 0x40)
    {
      v22 = (_QWORD *)operator new[]();
      memcpy(v22, *(const void **)(a2 + 24), ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8);
      v21 = v22;
    }
    else
    {
      v21 = *(_QWORD **)(a2 + 24);
      v22 = &v77;
    }
    v77 = v21;
    if (v12 != (v20 + 7) >> 3)
    {
      v74 = "Literal constant support for weirdly sized int type not yet implemented";
      goto LABEL_97;
    }
    if (v12)
    {
      v29 = 0;
      v30 = a1[6];
      do
      {
        v31 = *((_BYTE *)v22 + v29);
        ++a1[7];
        *((_BYTE *)a1 + v30) = v31;
        v30 = a1[6] + 1;
        a1[6] = v30;
        if (v30 == 4)
        {
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 1) + 328))(*((_QWORD *)a1 + 1), *a1);
          v30 = 0;
          *a1 = 0;
          a1[6] = 0;
        }
        ++v29;
      }
      while (v12 > v29);
    }
    if (v20 >= 0x41 && v21)
    {
      v32 = v21;
      goto LABEL_38;
    }
  }
  else
  {
    if (v14 == 19)
    {
LABEL_6:
      if (v12)
      {
        v15 = a1[6];
        v16 = 1;
        do
        {
          ++a1[7];
          *((_BYTE *)a1 + v15) = 0;
          v15 = a1[6] + 1;
          a1[6] = v15;
          if (v15 == 4)
          {
            (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 1) + 328))(*((_QWORD *)a1 + 1), *a1);
            v15 = 0;
            *a1 = 0;
            a1[6] = 0;
          }
        }
        while (v12 > v16++);
      }
      goto LABEL_11;
    }
    if ((v14 & 0xFE) == 0xE)
    {
      RawDataValues = llvm::ConstantDataSequential::getRawDataValues((llvm::ConstantDataSequential *)a2);
      if (v24)
      {
        v25 = (char *)RawDataValues;
        v26 = v24;
        v27 = a1[6];
        do
        {
          v28 = *v25;
          ++a1[7];
          *((_BYTE *)a1 + v27) = v28;
          v27 = a1[6] + 1;
          a1[6] = v27;
          if (v27 == 4)
          {
            (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 1) + 328))(*((_QWORD *)a1 + 1), *a1);
            v27 = 0;
            *a1 = 0;
            a1[6] = 0;
          }
          ++v25;
          --v26;
        }
        while (v26);
      }
      goto LABEL_11;
    }
    if (v14 == 17)
    {
      v33 = (llvm::detail::DoubleAPFloat *)(a2 + 32);
      if (*(_UNKNOWN **)(a2 + 32) == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt(v33, (unsigned int *)&v77);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v33, (unsigned int *)&v77);
      v34 = v78;
      if (v12 == (v78 + 7) >> 3)
      {
        if (v12)
        {
          v35 = 0;
          if (v78 >= 0x41)
            v36 = v77;
          else
            v36 = &v77;
          v37 = a1[6];
          do
          {
            v38 = *((_BYTE *)v36 + v35);
            ++a1[7];
            *((_BYTE *)a1 + v37) = v38;
            v37 = a1[6] + 1;
            a1[6] = v37;
            if (v37 == 4)
            {
              (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 1) + 328))(*((_QWORD *)a1 + 1), *a1);
              v37 = 0;
              *a1 = 0;
              a1[6] = 0;
            }
            ++v35;
          }
          while (v12 > v35);
          v34 = v78;
        }
        if (v34 < 0x41)
          goto LABEL_11;
        v32 = v77;
        if (!v77)
          goto LABEL_11;
LABEL_38:
        MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
        goto LABEL_11;
      }
      v74 = "Literal constant support for weirdly sized FP type not yet implemented";
LABEL_97:
      llvm::report_fatal_error((llvm *)v74, (const char *)1);
    }
    if ((v14 - 11) >= 0xFFFFFFFD)
    {
      v75 = a1[7];
      if (v14 == 8 || v14 == 9)
        v42 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      else
        v42 = *(_DWORD *)(*(_QWORD *)a2 + 32);
      if (v42)
      {
        v43 = 0;
        v44 = v42;
        v76 = v42;
        do
        {
          sub_1C4E4A16C(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * v43));
          if (*(_BYTE *)(a2 + 16) == 9)
          {
            StructLayout = llvm::DataLayout::getStructLayout(*((llvm::DataLayout **)a1 + 2), *(llvm::StructType **)a2);
            v46 = StructLayout;
            v47 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
            if (v43 == v47 - 1)
            {
              v48 = *((_QWORD *)a1 + 2);
              v49 = *(_QWORD *)a2;
              sub_1C4768AD0(v48, *(_QWORD *)a2);
              v51 = v50;
              v53 = v52 == 1;
              llvm::DataLayout::getAlignment(v48, v49);
              if (v53)
              {
                v70 = v54;
                v54 = v70;
              }
              v56 = ((1 << v54) + ((unint64_t)(v51 + 7) >> 3) - 1) & -(1 << v54);
              v47 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
            }
            else
            {
              v56 = *((_QWORD *)StructLayout + v43 + 3);
            }
            v57 = *((_QWORD *)v46 + v43 + 2);
            v58 = *((_QWORD *)a1 + 2);
            v59 = **(_QWORD **)(a2 - 32 * v47 + 32 * v43);
            sub_1C4768AD0(v58, v59);
            v61 = v60;
            v63 = v62 == 1;
            llvm::DataLayout::getAlignment(v58, v59);
            v66 = v65;
            if (v63)
            v67 = ((1 << v66) + 0xFFFFFFFFLL + ((unint64_t)(v61 + 7) >> 3)) & -(1 << v66);
            v68 = v56 - v57 - (((1 << v66) - 1 + ((unint64_t)(v61 + 7) >> 3)) & -(1 << v66));
            v44 = v76;
            if ((_DWORD)v56 - (_DWORD)v57 != (_DWORD)v67)
            {
              v69 = a1[6];
              do
              {
                ++a1[7];
                *((_BYTE *)a1 + v69) = 0;
                v69 = a1[6] + 1;
                a1[6] = v69;
                if (v69 == 4)
                {
                  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 1) + 328))(*((_QWORD *)a1 + 1), *a1);
                  v69 = 0;
                  *a1 = 0;
                  a1[6] = 0;
                }
                --v68;
              }
              while (v68);
            }
          }
          ++v43;
        }
        while (v43 != v44);
      }
      if (a1[6])
      {
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 1) + 328))(*((_QWORD *)a1 + 1), *a1);
        *a1 = 0;
        a1[6] = 0;
      }
      v13 = v75;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 16) || v14 == 3)
      {
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 1) + 464))(*((_QWORD *)a1 + 1), a2);
        a1[7] += v12;
        goto LABEL_11;
      }
      if (v14 != 5)
      {
        v74 = "Unsupported literal constant";
        goto LABEL_97;
      }
      v39 = *(unsigned __int16 *)(a2 + 18);
      if ((v39 - 49) >= 2)
      {
        if (v39 != 48)
          goto LABEL_11;
        v12 = ***(_QWORD ***)a2 + 1984;
        v71 = *(llvm::Value ***)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        if (v71 && *((_BYTE *)v71 + 16) == 16)
        {
          v72 = (uint64_t *)(v71 + 3);
          if (*((_DWORD *)v71 + 8) >= 0x41u)
            v72 = (uint64_t *)*v72;
          v71 = llvm::ConstantInt::get((llvm::ConstantInt *)(***(_QWORD ***)a2 + 1984), *v72, 0);
        }
        LODWORD(v12) = sub_1C4E3D148(*((_QWORD *)a1 + 2), v12);
        if ((_DWORD)v73 == 1)
        v41 = a1;
        v40 = v71;
      }
      else
      {
        v40 = *(llvm::Value ***)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        v41 = a1;
      }
      sub_1C4E4A16C(v41, v40);
    }
  }
LABEL_11:
  v18 = v12 - (a1[7] - v13);
  if (v18)
  {
    v19 = a1[6];
    do
    {
      ++a1[7];
      *((_BYTE *)a1 + v19) = 0;
      v19 = a1[6] + 1;
      a1[6] = v19;
      if (v19 == 4)
      {
        (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 1) + 328))(*((_QWORD *)a1 + 1), *a1);
        v19 = 0;
        *a1 = 0;
        a1[6] = 0;
      }
      --v18;
    }
    while (v18);
  }
  if (*(_BYTE *)(a2 + 16) == 9)
    llvm::DataLayout::getStructLayout(*((llvm::DataLayout **)a1 + 2), *(llvm::StructType **)a2);
}

BOOL sub_1C4E4A890(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _BOOL8 v6;
  const llvm::Function **v7;
  uint64_t v8;

  if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 24))(*a1, *a2) & 1) != 0)
    return 0;
  do
  {
    v7 = (const llvm::Function **)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
    v8 = llvm::GPUFunctionInfoCache::get(*(llvm::GPUFunctionInfoCache **)(*(_QWORD *)(a3 + 8) + 8), *v7);
    v6 = *(_BYTE *)(v8 + 8) != 0;
    if (*(_BYTE *)(v8 + 8))
      break;
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
  }
  while (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 24))(*a1, *a2));
  return v6;
}

BOOL sub_1C4E4A938(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  const llvm::Function **v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 16))(&v12);
    v5 = v12;
  }
  else
  {
    v5 = 0;
  }
  v6 = a1[1];
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 16))(&v12);
    v7 = v12;
  }
  else
  {
    v7 = 0;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v7) & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    do
    {
      v10 = (const llvm::Function **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      v11 = llvm::GPUFunctionInfoCache::get(*(llvm::GPUFunctionInfoCache **)(*(_QWORD *)(a2 + 8) + 8), *v10);
      v8 = *(_BYTE *)(v11 + 9) != 0;
      if (*(_BYTE *)(v11 + 9))
        break;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    }
    while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v7));
  }
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v8;
}

uint64_t sub_1C4E4AA50(uint64_t a1, int32x2_t ****a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  int32x2_t ****v7;
  int32x2_t ****v8;
  BOOL v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  int64x2_t v15;
  unint64_t v16;
  int32x2_t ****v17;
  int32x2_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int32x2_t *****v23;
  int32x2_t ****v24;
  int v25;
  int v26;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  int32x2_t *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t (**v40)(llvm::CallbackVH *__hidden);
  uint64_t v41;
  unint64_t *v42;
  int32x2_t ****v43;
  uint64_t v44;
  uint64_t v45;

  v2 = (uint64_t)a2;
  v41 = 2;
  v42 = 0;
  v43 = a2;
  if (a2 != (int32x2_t ****)-8192 && a2 != (int32x2_t ****)-4096 && a2)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v41);
    v2 = (uint64_t)v43;
  }
  v40 = &off_1E81374F0;
  v44 = a1;
  v45 = 0;
  v4 = sub_1C4E41C80(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v2, &v45);
  v5 = v45;
  if ((v4 & 1) == 0)
  {
    v6 = sub_1C4E42024((_DWORD *)a1, (uint64_t)&v40, v45);
    v5 = v6;
    v7 = *(int32x2_t *****)(v6 + 24);
    v8 = v43;
    if (v7 != v43)
    {
      v9 = v7 == (int32x2_t ****)-4096 || v7 == 0;
      if (!v9 && v7 != (int32x2_t ****)-8192)
      {
        v28 = *(_QWORD *)(v6 + 8) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v28 = *(_QWORD *)(v6 + 16);
        v29 = *(unint64_t **)(v6 + 16);
        if (v29)
        {
          *v29 = *v29 & 7 | v28;
        }
        else
        {
          v30 = *(_QWORD *)(v6 + 24);
          v31 = ***(int32x2_t ****)v30;
          v32 = (unint64_t)v31[303];
          if (v32 <= v28)
          {
            v33 = v31[305].u32[0];
            if (v32 + 16 * v33 > v28)
            {
              v34 = v33 - 1;
              LODWORD(v35) = v34 & ((v30 >> 4) ^ (v30 >> 9));
              v36 = (uint64_t *)(v32 + 16 * v35);
              v37 = *v36;
              if (v30 == *v36)
              {
LABEL_44:
                *v36 = -8192;
                v31[304] = vadd_s32(v31[304], (int32x2_t)0x1FFFFFFFFLL);
                v30 = *(_QWORD *)(v6 + 24);
              }
              else
              {
                v38 = 1;
                while (v37 != -4096)
                {
                  v39 = v35 + v38++;
                  v35 = v39 & v34;
                  v37 = *(_QWORD *)(v32 + 16 * v35);
                  if (v30 == v37)
                  {
                    v36 = (uint64_t *)(v32 + 16 * v35);
                    goto LABEL_44;
                  }
                }
              }
              *(_BYTE *)(v30 + 17) &= ~1u;
            }
          }
        }
        v8 = v43;
      }
      *(_QWORD *)(v6 + 24) = v8;
      if (v8 != (int32x2_t ****)-4096 && v8 != (int32x2_t ****)-8192 && v8 != 0)
      {
        v11 = v41;
        v12 = (_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v6 + 16) = *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF8);
        *v12 = v6 + 8;
        *(_QWORD *)(v6 + 8) = v11 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)(v6 + 8) & 7;
        v13 = *(uint64_t **)(v6 + 16);
        if (v13)
          *v13 = *v13 & 7 | (v6 + 16);
      }
    }
    v14 = v44;
    *(_OWORD *)(v6 + 96) = 0u;
    *(_QWORD *)(v6 + 32) = v14;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 112) = 0u;
    *(_QWORD *)(v6 + 40) = 1;
    v15 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    *(int64x2_t *)(v6 + 48) = v15;
    *(int64x2_t *)(v6 + 64) = v15;
    *(_QWORD *)(v6 + 80) = v6 + 96;
    *(_QWORD *)(v6 + 88) = 0x400000000;
  }
  if (v43 != (int32x2_t ****)-8192 && v43 != (int32x2_t ****)-4096 && v43)
  {
    v16 = v41 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v41 & 0xFFFFFFFFFFFFFFF8) = v42;
    if (v42)
    {
      *v42 = *v42 & 7 | v16;
    }
    else
    {
      v17 = v43;
      v18 = ***v43;
      v19 = (unint64_t)v18[303];
      if (v19 <= v16)
      {
        v20 = v18[305].u32[0];
        if (v19 + 16 * v20 > v16)
        {
          v21 = v20 - 1;
          LODWORD(v22) = v21 & ((v43 >> 4) ^ (v43 >> 9));
          v23 = (int32x2_t *****)(v19 + 16 * v22);
          v24 = *v23;
          if (v43 == *v23)
          {
LABEL_31:
            *v23 = (int32x2_t ****)-8192;
            v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
            v17 = v43;
          }
          else
          {
            v25 = 1;
            while (v24 != (int32x2_t ****)-4096)
            {
              v26 = v22 + v25++;
              v22 = v26 & v21;
              v24 = *(int32x2_t *****)(v19 + 16 * v22);
              if (v43 == v24)
              {
                v23 = (int32x2_t *****)(v19 + 16 * v22);
                goto LABEL_31;
              }
            }
          }
          *((_BYTE *)v17 + 17) &= ~1u;
        }
      }
    }
  }
  return v5 + 40;
}

_QWORD *sub_1C4E4AD60(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  if (!a1)
LABEL_7:
    abort();
  while (1)
  {
    while (1)
    {
      v2 = a1[4];
      if (v2 <= a2)
        break;
      a1 = (_QWORD *)*a1;
      if (!a1)
        goto LABEL_7;
    }
    if (v2 >= a2)
      return a1 + 5;
    a1 = (_QWORD *)a1[1];
    if (!a1)
      goto LABEL_7;
  }
}

uint64_t sub_1C4E4ADA0(uint64_t ***a1)
{
  uint64_t ***v1;
  int v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  v9 = *MEMORY[0x1E0C80C00];
  v2 = (*((unsigned __int16 *)a1 + 9) >> 4) & 0x3FF;
  if (v2 == 100)
  {
    *(_QWORD *)&v7 = 0x6600000069;
    DWORD2(v7) = 101;
    result = sub_1C4E44B78(a1, (uint64_t)"", 0, (uint64_t)".thread_invariants", 18, (__int32 *)&v7, 3);
    if (result)
      return result;
    v8 = 0x6A00000067;
    v7 = *(_OWORD *)"e";
    result = sub_1C4E44B78(v1, (uint64_t)"", 0, (uint64_t)".constant_program", 17, (__int32 *)&v7, 6);
    if (result)
      return result;
    v3 = ".constant_program.cfg";
    a1 = v1;
    v4 = 21;
    v5 = 6;
  }
  else
  {
    if (v2 != 105)
      return 0;
    *(_QWORD *)&v7 = 0x6800000067;
    v3 = ".sample_invariants";
    v4 = 18;
    v5 = 2;
  }
  result = sub_1C4E44B78(a1, (uint64_t)"", 0, (uint64_t)v3, v4, (__int32 *)&v7, v5);
  if (!result)
    return 0;
  return result;
}

void sub_1C4E4AEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  void *v36;
  unsigned int v37;
  _QWORD v38[5];

  v38[4] = *MEMORY[0x1E0C80C00];
  v34 = 0;
  v35[0] = a5;
  if ((sub_1C4E487E4(a2, v35, &v34) & 1) != 0)
    return;
  v10 = *(unsigned int *)(a1 + 8);
  if (v10 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v10 + 1, 8);
    LODWORD(v10) = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v10) = a5;
  ++*(_DWORD *)(a1 + 8);
  v35[0] = a5;
  v11 = a2 + 8;
  if ((*(_BYTE *)a2 & 1) != 0)
  {
    v12 = 4;
  }
  else
  {
    v12 = *(_DWORD *)(a2 + 16);
    if (!v12)
    {
      v21 = 0;
LABEL_19:
      v22 = sub_1C4E4473C(a2, (uint64_t)v35, v35, v21);
      *v22 = v35[0];
      v23 = v35[0];
      v24 = *(unsigned int *)(a2 + 48);
      if (v24 >= *(_DWORD *)(a2 + 52))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 40, a2 + 56, v24 + 1, 8);
        LODWORD(v24) = *(_DWORD *)(a2 + 48);
      }
      *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v24) = v23;
      ++*(_DWORD *)(a2 + 48);
      goto LABEL_22;
    }
    v11 = *(_QWORD *)(a2 + 8);
  }
  v13 = v12 - 1;
  v14 = v13 & ((a5 >> 4) ^ (a5 >> 9));
  v15 = (_QWORD *)(v11 + 8 * v14);
  v16 = *v15;
  if (*v15 != a5)
  {
    v17 = 0;
    v18 = 1;
    while (v16 != -4096)
    {
      if (v17)
        v19 = 0;
      else
        v19 = v16 == -8192;
      if (v19)
        v17 = v15;
      v20 = v14 + v18++;
      v14 = v20 & v13;
      v15 = (_QWORD *)(v11 + 8 * v14);
      v16 = *v15;
      if (*v15 == a5)
        goto LABEL_22;
    }
    if (v17)
      v21 = v17;
    else
      v21 = v15;
    goto LABEL_19;
  }
LABEL_22:
  if (*(_BYTE *)(a5 + 16))
    v25 = 0;
  else
    v25 = a5;
  if (!*(_BYTE *)(a5 + 16))
  {
    if (llvm::Function::hasAddressTaken((llvm::Function *)a5, 0, 0, 1, 0, 0))
    {
      sub_1C4E44E6C(a3, (llvm::Type **)a5);
      v26 = sub_1C4E458C0(a3, a5);
      v27 = *(unsigned int *)(v26 + 64);
      if ((_DWORD)v27)
      {
        v28 = *(uint64_t **)(v26 + 56);
        v29 = 8 * v27;
        do
        {
          v30 = *v28++;
          sub_1C4E4AEF8(a1, a2, a3, a4, v30);
          v29 -= 8;
        }
        while (v29);
      }
    }
    sub_1C4E4606C((char *)v35, *(_QWORD *)a4, *(_DWORD *)(a4 + 16), v25);
    v31 = (uint64_t *)v36;
    if (v37)
    {
      v32 = 8 * v37;
      do
      {
        v33 = *v31++;
        sub_1C4E4AEF8(a1, a2, a3, a4, v33);
        v32 -= 8;
      }
      while (v32);
      v31 = (uint64_t *)v36;
    }
    if (v31 != v38)
      free(v31);
    if ((v35[0] & 1) == 0)
      MEMORY[0x1CAA32FB4](v35[1], 8);
  }
}

uint64_t sub_1C4E4B1A0(uint64_t a1, unsigned int *a2)
{
  int64x2_t v3;
  unsigned int *v5;

  if ((*(_BYTE *)a1 & 1) == 0)
  {
    v5 = a2;
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
    a2 = v5;
  }
  *(_QWORD *)a1 = 1;
  v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 8) = v3;
  *(int64x2_t *)(a1 + 24) = v3;
  sub_1C4E41E00((unsigned int *)a1, a2);
  return a1;
}

uint64_t sub_1C4E4B20C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = a1 + (v4 << 7);
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = a1 + (v4 << 7);
        v6 = *(_QWORD *)(v5 + 24);
        v7 = 1;
        if (v6 == a3)
          goto LABEL_4;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_4:
  *a4 = v5;
  return v7;
}

void sub_1C4E4B2A0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  if (a2)
  {
    v2 = 96 * a2;
    v3 = (_QWORD *)(a1 + 64);
    do
    {
      if ((*(v3 - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = (_QWORD *)*(v3 - 2);
        if (v3 != v4)
          free(v4);
        if ((*(_BYTE *)(v3 - 7) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(v3 - 6), 8);
      }
      v3 += 12;
      v2 -= 96;
    }
    while (v2);
  }
}

unint64_t sub_1C4E4B318(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t (****v10)(_QWORD, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t (***v14)(_QWORD, uint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v15;
  uint64_t v16;
  char v17;

  v7 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v7)
    return a3;
  v10 = *(uint64_t (*****)(_QWORD, uint64_t, unint64_t, uint64_t, uint64_t))(a1 + 16);
  v11 = 8 * v7;
  v12 = a3;
  v13 = a4;
  do
  {
    v14 = *v10++;
    v15 = (**v14)(v14, a2, a3, a4, a5);
    v12 = sub_1C4E4845C(v12, v13, v15, v16, a5);
    v13 = v17;
    v11 -= 8;
  }
  while (v11);
  return v12;
}

uint64_t sub_1C4E4B3CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v7 = *(unsigned int *)(result + 24);
  if ((_DWORD)v7)
  {
    v14 = *(uint64_t **)(result + 16);
    v15 = 8 * v7;
    do
    {
      v16 = *v14++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 8))(v16, a2, a3, a4, a5, a6, a7);
      v15 -= 8;
    }
    while (v15);
  }
  return result;
}

void sub_1C4E4B454(_QWORD *a1)
{
  _QWORD *v1;

  *a1 = off_1E8137A28;
  v1 = (_QWORD *)a1[2];
  if (v1 != a1 + 4)
    free(v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4E4B4AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 16) + 32))(**(_QWORD **)(a1 + 16));
}

uint64_t sub_1C4E4B4C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = v3 + 8 * *(unsigned int *)(a1 + 24);
  v5 = operator new();
  result = sub_1C4E4BE84(v5, v3, v4);
  *a2 = result;
  return result;
}

uint64_t sub_1C4E4B518@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 24);
  v4 = operator new();
  result = sub_1C4E4BE84(v4, v3, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1C4E4B568()
{
  return 1;
}

uint64_t sub_1C4E4B570(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1C4E4B578(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C4E4B588(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 16) + 112))(**(_QWORD **)(a1 + 16));
}

uint64_t sub_1C4E4B59C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 + 8 * *(unsigned int *)(a1 + 24);
  v7 = operator new();
  result = sub_1C4E4C94C(v7, a2, v5, v6);
  *a3 = result;
  return result;
}

uint64_t sub_1C4E4B5FC@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 16) + 8 * *(unsigned int *)(a1 + 24);
  v6 = operator new();
  result = sub_1C4E4C94C(v6, a2, v5, v5);
  *a3 = result;
  return result;
}

uint64_t sub_1C4E4B65C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(result + 24);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 16);
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 144))(v8, a2, a3);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1C4E4B6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  BOOL v8;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 1;
  v4 = *(uint64_t **)(a1 + 16);
  v5 = 8 * v2 - 8;
  do
  {
    v6 = *v4++;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 160))(v6, a2);
    if ((_DWORD)result)
      v8 = v5 == 0;
    else
      v8 = 1;
    v5 -= 8;
  }
  while (!v8);
  return result;
}

uint64_t sub_1C4E4B718(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 128))(&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(&v10, a1, a2);
  if (v11)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v11 + 16))(&v12);
    v4 = v12;
  }
  else
  {
    v4 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v10 + 16))(&v12);
  v5 = v12;
  v6 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v12) & 1) == 0)
  {
    do
    {
      ++v6;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    }
    while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v5));
  }
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v7 = v10;
  v10 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v11;
  v11 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return v6;
}

uint64_t sub_1C4E4B84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v3)
    return 0;
  v6 = *(uint64_t **)(a1 + 16);
  v7 = 8 * v3 - 8;
  do
  {
    v8 = *v6++;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 184))(v8, a2, a3);
    if ((result & 1) != 0)
      break;
    v10 = v7;
    v7 -= 8;
  }
  while (v10);
  return result;
}

uint64_t sub_1C4E4B8B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  v1 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v1)
    return 1;
  v2 = *(uint64_t **)(a1 + 16);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 288))(v4);
    if ((_DWORD)result)
      v6 = v3 == 0;
    else
      v6 = 1;
    v3 -= 8;
  }
  while (!v6);
  return result;
}

uint64_t sub_1C4E4B90C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 16) + 336))(**(_QWORD **)(a1 + 16));
}

unint64_t sub_1C4E4B920(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v1)
    return 0;
  v2 = 0;
  v3 = *(uint64_t **)(a1 + 16);
  v4 = 8 * v1;
  do
  {
    v5 = *v3++;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 392))(v5);
    if (v6 > v2)
      v2 = v6;
    v4 -= 8;
  }
  while (v4);
  return v2;
}

uint64_t sub_1C4E4B980(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = *(_QWORD *)(a1 + 64);
  if (!v3)
  {
    v5 = *(_QWORD **)(a1 + 16);
    v6 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      v8 = &v5[v6];
      while (((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 408))(*v5, a2) & 1) == 0)
      {
        ++v5;
        v7 -= 8;
        if (!v7)
        {
          v5 = v8;
          break;
        }
      }
    }
    v3 = *v5;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 400))(v3);
}

uint64_t sub_1C4E4BA10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v4 = *(uint64_t **)(a1 + 16);
  v5 = 8 * v2 - 8;
  do
  {
    v6 = *v4++;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 408))(v6, a2);
    if ((result & 1) != 0)
      break;
    v8 = v5;
    v5 -= 8;
  }
  while (v8);
  return result;
}

uint64_t sub_1C4E4BA74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v1 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v1)
    return 0;
  LODWORD(v2) = 0;
  v3 = *(uint64_t **)(a1 + 16);
  v4 = 8 * v1;
  do
  {
    v5 = *v3++;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 440))(v5);
    if (v6 <= v2)
      v2 = v2;
    else
      v2 = v6;
    v4 -= 8;
  }
  while (v4);
  return v2;
}

uint64_t sub_1C4E4BAD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v1 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v1)
    return 0;
  v2 = 0;
  v3 = *(_QWORD **)(a1 + 16);
  v4 = 8 * v1;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 560))(*v3);
    if (result)
    {
      if (v2)
        llvm::report_fatal_error((llvm *)"Assuming only one exit function.", (const char *)1);
    }
    else
    {
      result = v2;
    }
    ++v3;
    v2 = result;
    v4 -= 8;
  }
  while (v4);
  return result;
}

uint64_t sub_1C4E4BB4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v4 = 0;
  v5 = *(uint64_t **)(a1 + 16);
  v6 = 8 * v2;
  do
  {
    v7 = *v5++;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 592))(v7, a2);
    if (v8)
      v4 = v8;
    v6 -= 8;
  }
  while (v6);
  return v4;
}

uint64_t sub_1C4E4BBB4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    v6 = 8 * v3;
    v7 = &v2[v3];
    while ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 568))(*v2) != a2)
    {
      ++v2;
      v6 -= 8;
      if (!v6)
      {
        v2 = v7;
        break;
      }
    }
    v8 = v2;
    v2 = *(_QWORD **)(a1 + 16);
    v9 = *(unsigned int *)(a1 + 24);
  }
  else
  {
    v9 = 0;
    v8 = *(_QWORD **)(a1 + 16);
  }
  if (v8 == &v2[v9])
    return 0;
  else
    return *v8;
}

uint64_t sub_1C4E4BC54(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  LODWORD(v3) = a3;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 640))(a1);
  if ((result & 0xFF00000000) != 0)
    v7 = result;
  else
    v7 = v3;
  if (v7 <= v3)
    v3 = v3;
  else
    v3 = v7;
  v8 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD **)(a1 + 16);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v9 + 64))(*v9, a2);
      if ((_DWORD)result)
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 632))(v11, a2, v3);
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

unint64_t sub_1C4E4BCF4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;

  v3 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD **)(a1 + 16);
    v9 = 8 * v3;
    do
    {
      v10 = *v8;
      if ((*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v8 + 64))(*v8, a2))
      {
        v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 640))(v10, a2);
        if (BYTE4(v11))
        {
          if ((_DWORD)v7)
          {
            v12 = v6 | (v5 << 8);
            if (v12 <= v11)
              v12 = v11;
            v6 = v12;
            v5 = v12 >> 8;
          }
          else
          {
            v2 = v11 >> 40;
            v6 = v11;
            v5 = v11 >> 8;
            v7 = BYTE4(v11);
          }
        }
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  else
  {
    v7 = 0;
    v6 = 0;
    v5 = 0;
  }
  return v6 | ((unint64_t)v5 << 8) | (v2 << 40) | (v7 << 32);
}

uint64_t sub_1C4E4BDDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v1)
    return 0;
  v2 = *(uint64_t **)(a1 + 16);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 648))(v4);
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t sub_1C4E4BE30(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v1)
    return 0;
  v2 = *(uint64_t **)(a1 + 16);
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 656))(v4);
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t sub_1C4E4BE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64x2_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1E8137CD0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 1;
  v4 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 56) = v4;
  *(int64x2_t *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 0x400000000;
  if (a2 != a3)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a2 + 72))(&v9);
    v5 = v9;
    v9 = 0;
    v6 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v5;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    sub_1C4E4BF50(a1);
  }
  return a1;
}

uint64_t sub_1C4E4BF50(uint64_t a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr))(***(_QWORD ***)(a1 + 32) + 80))(&v9);
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), v9);
    result = v9;
    v9 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (!v2)
      break;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 32) + 8;
    *(_QWORD *)(a1 + 32) = v5;
    if (v5 == v4)
      break;
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v5 + 72))(&v9);
    v6 = v9;
    v9 = 0;
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  return result;
}

void sub_1C4E4C024(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E8137CD0;
  v2 = *(void **)(a1 + 88);
  if (v2 != (void *)(a1 + 104))
    free(v2);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4E4C0A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = operator new();
  *(_QWORD *)v4 = off_1E8137CD0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 16))(&v9);
    v6 = v9;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 48) = 1;
  v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(v4 + 56) = v7;
  *(int64x2_t *)(v4 + 72) = v7;
  sub_1C4E4C550((unsigned int *)(v4 + 48), (_DWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 88) = v4 + 104;
  result = v4 + 88;
  *(_QWORD *)(v4 + 96) = 0x400000000;
  if (*(_DWORD *)(a1 + 96))
    result = llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(result, a1 + 88);
  *a2 = v4;
  return result;
}

uint64_t sub_1C4E4C190(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 != *(_QWORD *)(a2 + 32))
    return 0;
  if (v2 == *(_QWORD *)(a1 + 24))
    return 1;
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
}

uint64_t sub_1C4E4C1D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1C4E4C1E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int *v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t *v39;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v3 = v2;
  v5 = (unsigned int *)(a1 + 48);
  v4 = *(_DWORD *)(a1 + 48);
  v6 = v4 & 1;
  v7 = v2 >> 4;
  if ((v4 & 1) != 0)
  {
    v8 = 4;
    v9 = a1 + 56;
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 64);
    if (!v8)
    {
      v18 = 0;
      v19 = 0;
      goto LABEL_19;
    }
    v9 = *(_QWORD *)(a1 + 56);
  }
  v10 = v8 - 1;
  v11 = v10 & (v7 ^ (v2 >> 9));
  v12 = (uint64_t *)(v9 + 8 * v11);
  v13 = *v12;
  if (v2 == *v12)
    goto LABEL_27;
  v14 = 0;
  v15 = 1;
  while (v13 != -4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v13 == -8192;
    if (v16)
      v14 = v12;
    v17 = v11 + v15++;
    v11 = v17 & v10;
    v12 = (uint64_t *)(v9 + 8 * v11);
    v13 = *v12;
    if (v2 == *v12)
      goto LABEL_27;
  }
  if (v14)
    v18 = v14;
  else
    v18 = v12;
  if ((v4 & 1) != 0)
    v19 = 4;
  else
    v19 = *(_DWORD *)(a1 + 64);
LABEL_19:
  if (4 * (v4 >> 1) + 4 < 3 * v19)
  {
    if (v19 + ~(v4 >> 1) - *(_DWORD *)(a1 + 52) <= v19 >> 3)
    {
      sub_1C4E4C6E4(a1 + 48, v19);
      v39 = 0;
      sub_1C4E4C64C(a1 + 48, v3, &v39);
      v18 = v39;
      v4 = *v5;
      v6 = *v5 & 1;
    }
    goto LABEL_22;
  }
  sub_1C4E4C6E4(a1 + 48, 2 * v19);
  v4 = *v5;
  if ((*v5 & 1) != 0)
  {
    v30 = 4;
    v31 = a1 + 56;
  }
  else
  {
    v30 = *(_DWORD *)(a1 + 64);
    if (!v30)
    {
      v6 = 0;
      v18 = 0;
      goto LABEL_22;
    }
    v31 = *(_QWORD *)(a1 + 56);
  }
  v6 = *v5 & 1;
  v32 = v30 - 1;
  v33 = (v30 - 1) & (v7 ^ (v3 >> 9));
  v18 = (uint64_t *)(v31 + 8 * v33);
  v34 = *v18;
  if (v3 != *v18)
  {
    v35 = 0;
    v36 = 1;
    while (v34 != -4096)
    {
      if (v35)
        v37 = 0;
      else
        v37 = v34 == -8192;
      if (v37)
        v35 = v18;
      v38 = v33 + v36++;
      v33 = v38 & v32;
      v18 = (uint64_t *)(v31 + 8 * (v38 & v32));
      v34 = *v18;
      if (v3 == *v18)
        goto LABEL_22;
    }
    if (v35)
      v18 = v35;
  }
LABEL_22:
  *v5 = (v4 & 0xFFFFFFFE | v6) + 2;
  if (*v18 != -4096)
    --*(_DWORD *)(a1 + 52);
  *v18 = v3;
  v20 = *(unsigned int *)(a1 + 96);
  if (v20 >= *(_DWORD *)(a1 + 100))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 88, a1 + 104, v20 + 1, 8);
    LODWORD(v20) = *(_DWORD *)(a1 + 96);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v20) = v3;
  ++*(_DWORD *)(a1 + 96);
LABEL_27:
  while (1)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40));
    sub_1C4E4BF50(a1);
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
      return a1;
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    {
      v22 = 4;
      v23 = a1 + 56;
    }
    else
    {
      v22 = *(_DWORD *)(a1 + 64);
      if (!v22)
        return a1;
      v23 = *(_QWORD *)(a1 + 56);
    }
    v24 = v22 - 1;
    v25 = v24 & ((v21 >> 4) ^ (v21 >> 9));
    v26 = *(_QWORD *)(v23 + 8 * v25);
    if (v21 != v26)
    {
      v27 = 1;
      while (v26 != -4096)
      {
        v28 = v25 + v27++;
        v25 = v28 & v24;
        v26 = *(_QWORD *)(v23 + 8 * v25);
        if (v21 == v26)
          goto LABEL_27;
      }
      return a1;
    }
  }
}

uint64_t sub_1C4E4C4DC(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E8137CD0;
  v2 = *(void **)(a1 + 88);
  if (v2 != (void *)(a1 + 104))
    free(v2);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void *sub_1C4E4C550(unsigned int *a1, _DWORD *a2)
{
  unsigned int v2;
  uint64_t v4;
  void *v5;
  _DWORD *v6;
  _DWORD *v7;
  unsigned int *v8;
  unsigned int *v9;

  v2 = *a1;
  if ((*a1 & 1) == 0)
  {
    v6 = a2;
    v8 = a1;
    MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 1), 8);
    a2 = v6;
    a1 = v8;
    v2 = *v8;
  }
  *a1 = v2 | 1;
  if ((*(_BYTE *)a2 & 1) == 0 && a2[4] >= 5u)
  {
    *a1 = v2 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v4 = 4;
    else
      v4 = a2[4];
    v7 = a2;
    v9 = a1;
    v5 = operator new(8 * v4, (std::align_val_t)8uLL);
    a2 = v7;
    a1 = v9;
    *((_QWORD *)v9 + 1) = v5;
    *((_QWORD *)v9 + 2) = v4;
  }
  return sub_1C4E4C5F4(a1, a2);
}

void *sub_1C4E4C5F4(unsigned int *a1, _DWORD *a2)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  size_t v7;

  v3 = *a1 & 1;
  *a1 = *a2 & 0xFFFFFFFE | v3;
  a1[1] = a2[1];
  v4 = a1 + 2;
  if (!v3)
    v4 = (_QWORD *)*v4;
  v6 = *(_BYTE *)a2;
  v5 = a2 + 2;
  if ((v6 & 1) == 0)
    v5 = (_QWORD *)*v5;
  if (v3)
    v7 = 32;
  else
    v7 = 8 * a1[4];
  return memcpy(v4, v5, v7);
}

uint64_t sub_1C4E4C64C(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_16;
    }
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

int *sub_1C4E4C6E4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E4C84C((int *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4E4C84C((int *)a1, v14, v8);
}

int *sub_1C4E4C84C(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 10;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v9 = 4;
        v8 = result + 2;
      }
      else
      {
        v8 = (int *)*((_QWORD *)result + 1);
        v9 = result[4];
      }
      v10 = v9 - 1;
      v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v8[2 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v8[2 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      *(_QWORD *)v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C4E4C94C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int64x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_1E8137D10;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 1;
  v5 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 56) = v5;
  *(int64x2_t *)(a1 + 72) = v5;
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 0x400000000;
  if (a3 != a4)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)a3 + 128))(&v10);
    v6 = v10;
    v10 = 0;
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v9 = v10;
      v10 = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    sub_1C4E4CA1C(a1);
  }
  return a1;
}

uint64_t sub_1C4E4CA1C(uint64_t a1)
{
  int v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 136))(&v9, **(_QWORD **)(a1 + 32), *(unsigned int *)(a1 + 8));
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), v9);
    result = v9;
    v9 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (!v2)
      break;
    v4 = *(_QWORD **)(a1 + 24);
    v5 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    *(_QWORD *)(a1 + 32) = v5;
    if (v5 == v4)
      break;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*v5 + 128))(&v9, *v5, *(unsigned int *)(a1 + 8));
    v6 = v9;
    v9 = 0;
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v8 = v9;
      v9 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  return result;
}

void sub_1C4E4CAF8(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E8137D10;
  v2 = *(void **)(a1 + 88);
  if (v2 != (void *)(a1 + 104))
    free(v2);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4E4CB7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = operator new();
  *(_QWORD *)v4 = off_1E8137D10;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 16))(&v9);
    v6 = v9;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 48) = 1;
  v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(v4 + 56) = v7;
  *(int64x2_t *)(v4 + 72) = v7;
  sub_1C4E4C550((unsigned int *)(v4 + 48), (_DWORD *)(a1 + 48));
  *(_QWORD *)(v4 + 88) = v4 + 104;
  result = v4 + 88;
  *(_QWORD *)(v4 + 96) = 0x400000000;
  if (*(_DWORD *)(a1 + 96))
    result = llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(result, a1 + 88);
  *a2 = v4;
  return result;
}

uint64_t sub_1C4E4CC64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 != *(_QWORD *)(a2 + 32))
    return 0;
  if (v2 == *(_QWORD *)(a1 + 24))
    return 1;
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40));
}

uint64_t sub_1C4E4CCA4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1C4E4CCB4(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;

  v2 = (_DWORD *)(a1 + 48);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v10 = 0;
  if ((sub_1C4E4CEA0((uint64_t)v2, v3, &v10) & 1) != 0)
    goto LABEL_11;
  v4 = *v2 >> 1;
  if ((*v2 & 1) != 0)
    v5 = 4;
  else
    v5 = *(_DWORD *)(a1 + 64);
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
    goto LABEL_16;
  }
  if (v5 + ~v4 - *(_DWORD *)(a1 + 52) <= v5 >> 3)
  {
LABEL_16:
    sub_1C4E4CF44((uint64_t)v2, v5);
    v10 = 0;
    sub_1C4E4CEA0((uint64_t)v2, v3, &v10);
  }
  v6 = v10;
  *v2 += 2;
  if (*v6 != -4096)
    --*(_DWORD *)(a1 + 52);
  *v6 = v3;
  v7 = *(unsigned int *)(a1 + 96);
  if (v7 >= *(_DWORD *)(a1 + 100))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 88, a1 + 104, v7 + 1, 8);
    LODWORD(v7) = *(_DWORD *)(a1 + 96);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v7) = v3;
  ++*(_DWORD *)(a1 + 96);
  do
  {
LABEL_11:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40));
    sub_1C4E4CA1C(a1);
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
      break;
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  }
  while ((sub_1C4E4CEA0((uint64_t)v2, v8, &v10) & 1) != 0);
  return a1;
}

uint64_t sub_1C4E4CE2C(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E8137D10;
  v2 = *(void **)(a1 + 88);
  if (v2 != (void *)(a1 + 104))
    free(v2);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t sub_1C4E4CEA0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_17;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_14:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_14;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_17:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4E4CF44(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E4D0AC(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4E4D0AC(a1, v14, v8);
}

uint64_t sub_1C4E4D0AC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4E4CEA0((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

_QWORD *sub_1C4E4D164(_QWORD *result)
{
  int v1;
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v2 = result + 1;
      v3 = result + 5;
      goto LABEL_5;
    }
    v5 = *((unsigned int *)result + 4);
    if (((2 * v1) & 0xFFFFFFFC) >= v5 || v5 < 0x41)
    {
      if (!(_DWORD)v5)
      {
        v4 = 0;
LABEL_7:
        *(_DWORD *)result = v4;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v2 = (_QWORD *)result[1];
      v3 = &v2[v5];
      do
LABEL_5:
        *v2++ = -4096;
      while (v2 != v3);
      v4 = *(_DWORD *)result & 1;
      goto LABEL_7;
    }
    return sub_1C6196610(result);
  }
  return result;
}

int32x2_t sub_1C4E4D1E0(int32x2_t *a1, uint64_t a2)
{
  int32x2_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int32x2_t result;

  v2 = *a1;
  v3 = a1[2].u32[0];
  if ((_DWORD)v3)
  {
    v4 = ((_DWORD)v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = *(_QWORD *)&v2 + (v4 << 7);
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 == a2)
      goto LABEL_3;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v5 = *(_QWORD *)&v2 + (v4 << 7);
      v6 = *(_QWORD *)(v5 + 24);
      if (v6 == a2)
        goto LABEL_3;
    }
  }
  v5 = *(_QWORD *)&v2 + (v3 << 7);
LABEL_3:
  if (*(_QWORD *)&v2 + (v3 << 7) != v5)
    return sub_1C6195584(a1, v5);
  return result;
}

uint64_t *sub_1C4E4D260(uint64_t *result, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v6 = result;
  v8 = (uint64_t **)(result + 1);
  v7 = (uint64_t *)result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = v7[4];
        if (v10 <= a2)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v10 >= a2)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v9 = (uint64_t **)(result + 1);
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v12 = *a4;
    *a4 = 0;
    v11[4] = a3;
    v11[5] = v12;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v9;
    *v8 = v11;
    v13 = *(_QWORD *)*v6;
    if (v13)
    {
      *v6 = v13;
      v14 = *v8;
    }
    else
    {
      v14 = v11;
    }
    result = sub_1C4768E74((uint64_t *)v6[1], v14);
    ++v6[2];
  }
  return result;
}

uint64_t *sub_1C4E4D328(uint64_t *result)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;

  v1 = *((_DWORD *)result + 2);
  if (v1)
  {
    v2 = *result;
    v3 = 104 * v1;
    do
    {
      v4 = result;
      v5 = *(void **)(v2 + v3 - 48);
      if ((void *)(v2 + v3 - 32) != v5)
        free(v5);
      if ((*(_BYTE *)(v2 + v3 - 88) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + v3 - 80), 8);
      v3 -= 104;
      result = v4;
    }
    while (v3);
  }
  *((_DWORD *)result + 2) = 0;
  return result;
}

uint64_t sub_1C4E4D3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v5 = a1 + 16;
    do
    {
      *(_QWORD *)a3 = *(_QWORD *)(v5 - 16);
      *(_BYTE *)(a3 + 8) = *(_BYTE *)(v5 - 8);
      sub_1C4E45F30((unsigned int *)(a3 + 16), (unsigned int *)v5);
      sub_1C4964480(a3 + 56, (const void **)(v5 + 40));
      a3 += 104;
      v6 = v5 + 88;
      v5 += 104;
    }
    while (v6 != a2);
  }
  return a3;
}

uint64_t sub_1C4E4D420(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeScalarEvolutionWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Induction Variable Users";
  *(_QWORD *)(v3 + 8) = 24;
  *(_QWORD *)(v3 + 16) = "iv-users";
  *(_QWORD *)(v3 + 24) = 8;
  *(_QWORD *)(v3 + 32) = &llvm::IVUsersWrapperPass::ID;
  *(_WORD *)(v3 + 40) = 256;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::IVUsersWrapperPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

llvm::IVUsersWrapperPass *llvm::createIVUsersPass(llvm *this)
{
  llvm::IVUsersWrapperPass *v1;

  v1 = (llvm::IVUsersWrapperPass *)operator new();
  return llvm::IVUsersWrapperPass::IVUsersWrapperPass(v1);
}

uint64_t llvm::IVUsers::AddUsersIfInteresting(llvm::IVUsers *this, llvm::Instruction *a2)
{
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;
  unint64_t IndexTypeSizeInBits;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  llvm::Instruction *v27;
  int v28;
  unsigned int v29;
  uint64_t SCEVIter;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  llvm::Instruction *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  llvm::Instruction *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v59[4];
  llvm::Instruction *v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  int v64;
  _BYTE v65[32];
  llvm::Instruction *v66;

  v66 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40);
  v5 = (char *)this + 40;
  sub_1C4774094((llvm::IVUsers *)((char *)this + 40), (uint64_t)a2);
  if (!v6)
    return 1;
  v7 = *(_QWORD *)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFD) != 0xD)
    return 0;
  if (*((_BYTE *)a2 + 16) == 83)
  {
    v8 = *(_DWORD *)(*(_QWORD *)a2 + 8);
    goto LABEL_8;
  }
  if (!llvm::isSafeToSpeculativelyExecute((uint64_t)a2, 0, 0, 0))
    return 0;
  v7 = *(_QWORD *)a2;
  v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
LABEL_8:
  v10 = *(_QWORD *)(**((_QWORD **)this + 4) + 40) + 272;
  if (v8 == 15)
  {
    IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v10, v7);
  }
  else
  {
    sub_1C4768AD0(v10, v7);
    IndexTypeSizeInBits = v12;
    if ((_DWORD)v11 == 1)
  }
  if (IndexTypeSizeInBits > 0x40)
    return 0;
  v14 = *(char **)(v4 + 304);
  v15 = *(_QWORD *)(v4 + 312);
  v16 = (char *)memchr(v14, IndexTypeSizeInBits, v15);
  v17 = v16 ? v16 : &v14[v15];
  if (v17 - v14 == v15)
    return 0;
  v18 = sub_1C477672C((uint64_t)this + 216, (uint64_t)a2);
  v19 = *((_QWORD *)this + 28);
  v20 = 232;
  if (v19 == *((_QWORD *)this + 27))
    v20 = 236;
  if (v18 != (_QWORD *)(v19 + 8 * *(unsigned int *)((char *)this + v20)))
    return 0;
  v21 = *((_QWORD *)this + 4);
  v22 = *(_QWORD *)(v21 + 104);
  v23 = *(_DWORD *)(v21 + 120);
  if (!v23)
    goto LABEL_25;
  v24 = v23 - 1;
  v25 = (v23 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v26 = v22 + 48 * v25;
  v27 = *(llvm::Instruction **)(v26 + 24);
  if (v27 != a2)
  {
    v28 = 1;
    while (v27 != (llvm::Instruction *)-4096)
    {
      v29 = v25 + v28++;
      v25 = v29 & v24;
      v26 = v22 + 48 * (v29 & v24);
      v27 = *(llvm::Instruction **)(v26 + 24);
      if (v27 == a2)
        goto LABEL_26;
    }
LABEL_25:
    v26 = v22 + 48 * v23;
  }
LABEL_26:
  if (v26 == v22 + 48 * v23 || (SCEVIter = *(_QWORD *)(v26 + 40)) == 0)
  {
    SCEVIter = llvm::ScalarEvolution::createSCEVIter(*((llvm::ScalarEvolution **)this + 4), (unint64_t)a2);
    v21 = *((_QWORD *)this + 4);
  }
  if (!sub_1C4E4D92C(SCEVIter, (uint64_t)a2, *(_QWORD *)this, (uint64_t *)v21, *((uint64_t **)this + 2)))
    return 0;
  v61 = v65;
  v62 = v65;
  v63 = 4;
  v64 = 0;
  v31 = *((_QWORD *)a2 + 1);
  if (!v31)
  {
LABEL_61:
    v9 = 1;
    goto LABEL_62;
  }
  v32 = (uint64_t *)((char *)this + 200);
  while (1)
  {
    v60 = *(llvm::Instruction **)(v31 + 24);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v61, (uint64_t)v60);
    if (v33)
      break;
LABEL_53:
    v51 = SCEVIter;
LABEL_54:
    v31 = *(_QWORD *)(v31 + 8);
    SCEVIter = v51;
    if (!v31)
      goto LABEL_61;
  }
  v34 = v60;
  if (*((_BYTE *)v60 + 16) == 83)
  {
    v35 = sub_1C477672C((uint64_t)v5, (uint64_t)v60);
    v36 = *((_QWORD *)this + 6);
    if (v36 == *((_QWORD *)this + 5))
      v37 = 60;
    else
      v37 = 56;
    if (v35 != (_QWORD *)(v36 + 8 * *(unsigned int *)((char *)this + v37)))
      goto LABEL_53;
    v34 = v60;
  }
  v38 = (uint64_t *)*((_QWORD *)this + 2);
  v39 = *((_DWORD *)v38 + 4);
  if (v39)
  {
    v40 = *((_QWORD *)v34 + 5);
    v41 = *v38;
    v42 = v39 - 1;
    v43 = ((v40 >> 4) ^ (v40 >> 9)) & (v39 - 1);
    v44 = *(_QWORD *)(v41 + 16 * v43);
    if (v40 == v44)
    {
LABEL_44:
      v47 = *(_QWORD *)(v41 + 16 * v43 + 8);
      goto LABEL_46;
    }
    v45 = 1;
    while (v44 != -4096)
    {
      v46 = v43 + v45++;
      v43 = v46 & v42;
      v44 = *(_QWORD *)(v41 + 16 * v43);
      if (v40 == v44)
        goto LABEL_44;
    }
  }
  v47 = 0;
LABEL_46:
  if (v47 == *(_QWORD *)this || *((_BYTE *)v34 + 16) != 83)
  {
    v48 = sub_1C477672C((uint64_t)v5, (uint64_t)v34);
    v49 = *((_QWORD *)this + 6);
    v50 = v49 == *((_QWORD *)this + 5) ? 60 : 56;
    if (v48 == (_QWORD *)(v49 + 8 * *(unsigned int *)((char *)this + v50))
      && (llvm::IVUsers::AddUsersIfInteresting(this, v60) & 1) != 0)
    {
      goto LABEL_53;
    }
  }
  v52 = v60;
  v53 = (uint64_t)v66;
  v54 = operator new();
  v55 = sub_1C6198608(v54, (uint64_t)this, (uint64_t)v52, v53);
  v56 = *((_QWORD *)this + 25);
  *(_QWORD *)(v55 + 40) = v32;
  *(_QWORD *)(v55 + 32) = v56;
  *(_QWORD *)(v56 + 8) = v55 + 32;
  *((_QWORD *)this + 25) = v55 + 32;
  v59[0] = &v60;
  v59[1] = &v66;
  v59[2] = this;
  v59[3] = v55;
  v57 = llvm::normalizeForPostIncUseIf(SCEVIter, (uint64_t)sub_1C4E4E3A4, (uint64_t)v59, *((_QWORD *)this + 4));
  v51 = v57;
  if (SCEVIter == v57 || SCEVIter == llvm::denormalizeForPostIncUse(v57, v54 + 80, *((_QWORD *)this + 4)))
    goto LABEL_54;
  sub_1C6198704((uint64_t)this + 200, *v32);
  v9 = 0;
LABEL_62:
  if (v62 != v61)
    free(v62);
  return v9;
}

uint64_t sub_1C4E4D92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  int v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const llvm::Loop *v30;
  llvm::ScalarEvolution *v31;
  const llvm::SCEV *v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  unsigned int v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[4];

  v39[3] = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int16 *)(a1 + 24);
  if (!a1 || v10 != 7)
  {
    if (v10 == 4)
    {
      v14 = *(_QWORD *)(a1 + 40);
      if (v14)
      {
        v13 = 0;
        v15 = *(_QWORD **)(a1 + 32);
        v16 = 8 * v14;
        while (1)
        {
          v17 = sub_1C4E4D92C(*v15, a2, a3, a4, a5);
          if (v17)
          {
            if ((v13 & 1) != 0)
              break;
          }
          v13 |= v17;
          ++v15;
          v16 -= 8;
          if (!v16)
            return v13 & 1;
        }
      }
    }
    goto LABEL_20;
  }
  if (*(_QWORD *)(a1 + 48) != a3)
  {
    if (sub_1C4E4D92C(**(_QWORD **)(a1 + 32), a2, a3, a4, a5))
    {
      v11 = *(_QWORD *)(a1 + 40);
      if (v11 == 2)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      }
      else
      {
        v33 = *(_QWORD *)(a1 + 32);
        v37 = v39;
        v38 = 0x300000000;
        v34 = v11;
        v35 = 8 * v11 - 8;
        if (v35 >= 0x19)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v37, (uint64_t)v39, (uint64_t)v35 >> 3, 8);
          v36 = v38;
        }
        else
        {
          v36 = 0;
        }
        if (v34 != 1)
        {
          memcpy((char *)v37 + 8 * v36, (const void *)(v33 + 8), v35);
          v36 = v38;
        }
        LODWORD(v38) = v36 + (v35 >> 3);
        v12 = sub_1C618AB20(a4, (uint64_t)&v37, *(uint64_t ***)(a1 + 48));
        if (v37 != v39)
          free(v37);
      }
      v13 = sub_1C4E4D92C(v12, a2, a3, a4, a5) ^ 1;
      return v13 & 1;
    }
LABEL_20:
    v13 = 0;
    return v13 & 1;
  }
  if (*(_QWORD *)(a1 + 40) == 2)
  {
    v13 = 1;
    return v13 & 1;
  }
  v18 = sub_1C477672C(a3 + 56, *(_QWORD *)(a2 + 40));
  v19 = *(_QWORD *)(a3 + 64);
  v20 = 72;
  if (v19 == *(_QWORD *)(a3 + 56))
    v20 = 76;
  if (v18 != (_QWORD *)(v19 + 8 * *(unsigned int *)(a3 + v20)))
    goto LABEL_20;
  v22 = *((_DWORD *)a5 + 4);
  if (v22)
  {
    v23 = *(_QWORD *)(a2 + 40);
    v24 = *a5;
    v25 = v22 - 1;
    v26 = ((v23 >> 4) ^ (v23 >> 9)) & (v22 - 1);
    v27 = *(_QWORD *)(*a5 + 16 * v26);
    if (v23 == v27)
    {
LABEL_27:
      v30 = *(const llvm::Loop **)(v24 + 16 * v26 + 8);
    }
    else
    {
      v28 = 1;
      while (v27 != -4096)
      {
        v29 = v26 + v28++;
        v26 = v29 & v25;
        v27 = *(_QWORD *)(v24 + 16 * v26);
        if (v23 == v27)
          goto LABEL_27;
      }
      v30 = 0;
    }
    v31 = (llvm::ScalarEvolution *)a4;
    v32 = (const llvm::SCEV *)a1;
  }
  else
  {
    v31 = (llvm::ScalarEvolution *)a4;
    v32 = (const llvm::SCEV *)a1;
    v30 = 0;
  }
  v13 = llvm::ScalarEvolution::getSCEVAtScope(v31, v32, v30) != (const llvm::SCEV *)a1;
  return v13 & 1;
}

void *sub_1C4E4DBF0(uint64_t a1)
{
  void *result;
  uint64_t v3;
  unsigned int v5;
  int v6;
  unsigned int v7;
  void *v8;

  result = *(void **)(a1 + 8);
  if (result == *(void **)a1)
    goto LABEL_2;
  v3 = *(unsigned int *)(a1 + 16);
  if (v3 < 0x21 || 4 * (*(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24)) >= v3)
  {
    result = memset(result, 255, 8 * v3);
LABEL_2:
    *(_DWORD *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return result;
  }
  free(result);
  v5 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
  v6 = 1 << (33 - __clz(v5 - 1));
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (v5 <= 0x10)
    v7 = 32;
  else
    v7 = v6;
  *(_DWORD *)(a1 + 16) = v7;
  v8 = malloc_type_malloc(8 * v7, 0x4065EBACuLL);
  if (!v8)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 8) = v8;
  return memset(v8, 255, 8 * *(unsigned int *)(a1 + 16));
}

void llvm::IVUsers::print(llvm::ScalarEvolution **this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  uint64_t v5;
  void *v6;
  llvm::ScalarEvolution *v7;
  uint64_t v8;
  const llvm::Loop **BackedgeTakenInfo;
  uint64_t Exact;
  _WORD *v11;
  llvm::ScalarEvolution **i;
  llvm::ScalarEvolution **v13;
  _WORD *v14;
  uint64_t v15;
  llvm::ScalarEvolution *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t SCEVIter;
  llvm::ScalarEvolution *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  _BYTE *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  uint64_t v39;
  _BYTE *v40;

  v5 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v5) > 0x11)
  {
    *(_WORD *)(v5 + 16) = 8304;
    *(_OWORD *)v5 = *(_OWORD *)"IV Users for loop ";
    *((_QWORD *)a2 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(a2, "IV Users for loop ", 0x12uLL);
  }
  llvm::Value::printAsOperand(**((llvm::Value ***)*this + 4), a2, 0, 0);
  if (llvm::ScalarEvolution::hasLoopInvariantBackedgeTakenCount(this[4], *this))
  {
    v6 = (void *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v6 > 0x1AuLL)
    {
      qmemcpy(v6, " with backedge-taken count ", 27);
      *((_QWORD *)a2 + 4) += 27;
    }
    else
    {
      llvm::raw_ostream::write(a2, " with backedge-taken count ", 0x1BuLL);
    }
    v7 = this[4];
    v8 = (uint64_t)*this;
    BackedgeTakenInfo = llvm::ScalarEvolution::getBackedgeTakenInfo(v7, *this);
    Exact = llvm::ScalarEvolution::BackedgeTakenInfo::getExact((uint64_t)BackedgeTakenInfo, v8, (uint64_t)v7, 0);
    llvm::SCEV::print(Exact);
  }
  v11 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 2618;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, ":\n", 2uLL);
  }
  for (i = (llvm::ScalarEvolution **)this[26]; i != this + 25; i = (llvm::ScalarEvolution **)i[1])
  {
    if (i)
      v13 = i - 4;
    else
      v13 = 0;
    v14 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v14 > 1uLL)
    {
      *v14 = 8224;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "  ", 2uLL);
    }
    llvm::Value::printAsOperand(v13[9], a2, 0, 0);
    v15 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v15) > 2)
    {
      *(_BYTE *)(v15 + 2) = 32;
      *(_WORD *)v15 = 15648;
      *((_QWORD *)a2 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a2, " = ", 3uLL);
    }
    v16 = this[4];
    v17 = (unint64_t)v13[9];
    v18 = *((_QWORD *)v16 + 13);
    v19 = *((_DWORD *)v16 + 30);
    if (v19)
    {
      v20 = ((v17 >> 4) ^ (v17 >> 9)) & (v19 - 1);
      v21 = v18 + 48 * v20;
      v22 = *(_QWORD *)(v21 + 24);
      if (v22 == v17)
        goto LABEL_24;
      v23 = 1;
      while (v22 != -4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v19 - 1);
        v21 = v18 + 48 * v20;
        v22 = *(_QWORD *)(v21 + 24);
        if (v22 == v17)
          goto LABEL_24;
      }
    }
    v21 = v18 + 48 * v19;
LABEL_24:
    if (v21 == v18 + 48 * v19 || (SCEVIter = *(_QWORD *)(v21 + 40)) == 0)
      SCEVIter = llvm::ScalarEvolution::createSCEVIter(v16, v17);
    llvm::SCEV::print(SCEVIter);
    v26 = v13[11];
    v27 = 96;
    if (v26 == v13[10])
      v27 = 100;
    v28 = *(unsigned int *)((char *)v13 + v27);
    if ((_DWORD)v28)
    {
      v29 = 8 * v28;
      v30 = (unint64_t *)v13[11];
      while (*v30 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v30;
        v29 -= 8;
        if (!v29)
          goto LABEL_47;
      }
    }
    else
    {
      v30 = (unint64_t *)v13[11];
    }
    v31 = (unint64_t *)((char *)v26 + 8 * v28);
    if (v30 != v31)
    {
      v32 = *v30;
LABEL_37:
      v33 = (void *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v33 > 0x14uLL)
      {
        qmemcpy(v33, " (post-inc with loop ", 21);
        *((_QWORD *)a2 + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(a2, " (post-inc with loop ", 0x15uLL);
      }
      llvm::Value::printAsOperand(**(llvm::Value ***)(v32 + 32), a2, 0, 0);
      v34 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) == v34)
      {
        llvm::raw_ostream::write(a2, ")", 1uLL);
      }
      else
      {
        *v34 = 41;
        ++*((_QWORD *)a2 + 4);
      }
      v35 = v30 + 1;
      while (v35 != v31)
      {
        v36 = *v35++;
        v32 = v36;
        if (v36 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v30 = v35 - 1;
          goto LABEL_37;
        }
      }
    }
LABEL_47:
    v37 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v37) > 4)
    {
      *(_BYTE *)(v37 + 4) = 32;
      *(_DWORD *)v37 = 544106784;
      *((_QWORD *)a2 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(a2, " in  ", 5uLL);
    }
    v38 = v13[3];
    if (v38)
    {
      llvm::Value::print(v38, a2, 0);
    }
    else
    {
      v39 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v39) > 0x13)
      {
        *(_DWORD *)(v39 + 16) = 1919251285;
        *(_OWORD *)v39 = *(_OWORD *)"Printing <null> User";
        *((_QWORD *)a2 + 4) += 20;
      }
      else
      {
        llvm::raw_ostream::write(a2, "Printing <null> User", 0x14uLL);
      }
    }
    v40 = (_BYTE *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v40 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 10);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v40 + 1;
      *v40 = 10;
    }
  }
}

uint64_t llvm::IVUsers::getReplacementExpr(llvm::IVUsers *this, const llvm::IVStrideUse *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;

  v2 = *((_QWORD *)this + 4);
  v3 = *((_QWORD *)a2 + 9);
  v4 = *(_QWORD *)(v2 + 104);
  v5 = *(_DWORD *)(v2 + 120);
  if (!v5)
  {
LABEL_7:
    v7 = v4 + 48 * v5;
    goto LABEL_8;
  }
  v6 = ((v3 >> 4) ^ (v3 >> 9)) & (v5 - 1);
  v7 = v4 + 48 * v6;
  v8 = *(_QWORD *)(v7 + 24);
  if (v8 != v3)
  {
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v7 = v4 + 48 * v6;
      v8 = *(_QWORD *)(v7 + 24);
      if (v8 == v3)
        goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v7 == v4 + 48 * v5 || !*(_QWORD *)(v7 + 40))
    return llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v2, v3);
  else
    return *(_QWORD *)(v7 + 40);
}

char *llvm::IVUsers::releaseMemory(llvm::IVUsers *this)
{
  char *result;
  llvm::IVUsers *v3;
  uint64_t v4;
  unsigned int v6;
  int v7;
  unsigned int v8;
  void *v9;

  result = (char *)*((_QWORD *)this + 6);
  if (result == *((char **)this + 5))
    goto LABEL_2;
  v4 = *((unsigned int *)this + 14);
  if (v4 < 0x21 || 4 * (*((_DWORD *)this + 15) - *((_DWORD *)this + 16)) >= v4)
  {
    result = (char *)memset(result, 255, 8 * v4);
LABEL_2:
    *((_DWORD *)this + 15) = 0;
    *((_DWORD *)this + 16) = 0;
    goto LABEL_3;
  }
  free(result);
  v6 = *((_DWORD *)this + 15) - *((_DWORD *)this + 16);
  v7 = 1 << (33 - __clz(v6 - 1));
  *((_DWORD *)this + 15) = 0;
  *((_DWORD *)this + 16) = 0;
  if (v6 <= 0x10)
    v8 = 32;
  else
    v8 = v7;
  *((_DWORD *)this + 14) = v8;
  v9 = malloc_type_malloc(8 * v8, 0x4065EBACuLL);
  if (!v9)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *((_QWORD *)this + 6) = v9;
  result = (char *)memset(v9, 255, 8 * *((unsigned int *)this + 14));
LABEL_3:
  v3 = (llvm::IVUsers *)*((_QWORD *)this + 26);
  if ((llvm::IVUsers *)((char *)this + 200) != v3)
  {
    do
    {
      result = (char *)sub_1C6198704((uint64_t)this + 200, (uint64_t)v3);
      v3 = (llvm::IVUsers *)result;
    }
    while ((char *)this + 200 != result);
  }
  return result;
}

uint64_t sub_1C4E4E304(uint64_t result, uint64_t a2)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = *(unsigned __int16 *)(result + 24);
  if (result && v3 == 7)
  {
    while (*(_QWORD *)(result + 48) != a2)
    {
      result = **(_QWORD **)(result + 32);
      v3 = *(unsigned __int16 *)(result + 24);
      if (result)
        v4 = v3 == 7;
      else
        v4 = 0;
      if (!v4)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    if (v3 == 4 && (v5 = *(_QWORD *)(result + 40)) != 0)
    {
      v6 = *(_QWORD **)(result + 32);
      v7 = 8 * v5;
      while (1)
      {
        result = sub_1C4E4E304(*v6, a2);
        if (result)
          break;
        ++v6;
        v7 -= 8;
        if (!v7)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C4E4E394()
{
  return 0;
}

uint64_t sub_1C4E4E39C()
{
  return 0;
}

uint64_t sub_1C4E4E3A4(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a2 + 48);
  v4 = **a1;
  v5 = *a1[1];
  v6 = a1[2][3];
  v7 = sub_1C477672C(v3 + 56, *(_QWORD *)(v4 + 40));
  v8 = *(_QWORD *)(v3 + 64);
  v9 = 72;
  if (v8 == *(_QWORD *)(v3 + 56))
    v9 = 76;
  if (v7 != (_QWORD *)(v8 + 8 * *(unsigned int *)(v3 + v9)))
    return 0;
  result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v3);
  if (result)
  {
    v11 = result;
    if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v6, result, *(_QWORD *)(v4 + 40)))
      goto LABEL_8;
    if (*(_BYTE *)(v4 + 16) != 83)
      v4 = 0;
    if (v5)
      v12 = v4 == 0;
    else
      v12 = 1;
    if (v12)
      return 0;
    v13 = *(_DWORD *)(v4 + 20) & 0x7FFFFFF;
    if (!(_DWORD)v13)
    {
LABEL_8:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1[3] + 10), v3);
      return 1;
    }
    v14 = 0;
    v15 = 0;
    v16 = 32 * v13;
    while (1)
    {
      v17 = *(_DWORD *)(v4 + 20);
      v18 = (v17 & 0x40000000) != 0 ? *(_QWORD *)(v4 - 8) : v4 - 32 * (v17 & 0x7FFFFFF);
      if (*(_QWORD *)(v18 + v15) == v5)
      {
        result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v6, v11, *(_QWORD *)(v18 + 32 * *(unsigned int *)(v4 + 60) + v14));
        if (!(_DWORD)result)
          break;
      }
      v15 += 32;
      v14 += 8;
      if (v16 == v15)
        goto LABEL_8;
    }
  }
  return result;
}

void llvm::ImportedFunctionsInliningStatistics::recordInline(llvm::ImportedFunctionsInliningStatistics *this, const llvm::Function *a2, const llvm::Function *a3)
{
  size_t InlineGraphNode;
  size_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const llvm::Function *v15;
  int v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  char *v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  int v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unsigned int v49;

  InlineGraphNode = llvm::ImportedFunctionsInliningStatistics::createInlineGraphNode(this, a2);
  v7 = llvm::ImportedFunctionsInliningStatistics::createInlineGraphNode(this, a3);
  v8 = v7;
  ++*(_DWORD *)(v7 + 80);
  if (!(*(unsigned __int8 *)(InlineGraphNode + 88) | *(unsigned __int8 *)(v7 + 88)))
  {
    ++*(_DWORD *)(v7 + 84);
    return;
  }
  v9 = *(unsigned int *)(InlineGraphNode + 8);
  if (v9 >= *(_DWORD *)(InlineGraphNode + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(InlineGraphNode, InlineGraphNode + 16, v9 + 1, 8);
    LODWORD(v9) = *(_DWORD *)(InlineGraphNode + 8);
  }
  *(_QWORD *)(*(_QWORD *)InlineGraphNode + 8 * v9) = v8;
  ++*(_DWORD *)(InlineGraphNode + 8);
  if (!*(_BYTE *)(InlineGraphNode + 88))
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v24 = 0;
      v18 = *((_DWORD *)this + 2);
      if (v18)
      {
        v21 = 0;
        v20 = &byte_1C871356D;
        goto LABEL_33;
      }
      v49 = 0;
LABEL_35:
      v27 = *(_QWORD *)this;
      v33 = v49;
LABEL_36:
      v34 = *(uint64_t **)(v27 + 8 * v33);
      v37 = *v34;
      v35 = v34 + 2;
      v36 = v37;
      v39 = (char *)*((_QWORD *)this + 5);
      v38 = *((_QWORD *)this + 6);
      if ((unint64_t)v39 >= v38)
      {
        v41 = (char *)*((_QWORD *)this + 4);
        v42 = (v39 - v41) >> 4;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 60)
          abort();
        v44 = v38 - (_QWORD)v41;
        if (v44 >> 3 > v43)
          v43 = v44 >> 3;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
          v45 = 0xFFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          if (v45 >> 60)
            sub_1C4764EE4();
          v46 = (char *)operator new(16 * v45);
        }
        else
        {
          v46 = 0;
        }
        v47 = &v46[16 * v42];
        *(_QWORD *)v47 = v35;
        *((_QWORD *)v47 + 1) = v36;
        v40 = v47 + 16;
        if (v39 != v41)
        {
          do
          {
            *((_OWORD *)v47 - 1) = *((_OWORD *)v39 - 1);
            v47 -= 16;
            v39 -= 16;
          }
          while (v39 != v41);
          v39 = (char *)*((_QWORD *)this + 4);
        }
        *((_QWORD *)this + 4) = v47;
        *((_QWORD *)this + 5) = v40;
        *((_QWORD *)this + 6) = &v46[16 * v45];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *(_QWORD *)v39 = v35;
        *((_QWORD *)v39 + 1) = v36;
        v40 = v39 + 16;
      }
      *((_QWORD *)this + 5) = v40;
      return;
    }
    v10 = ***(_QWORD ***)a2;
    v11 = *(_QWORD *)(v10 + 152);
    v12 = *(unsigned int *)(v10 + 168);
    if ((_DWORD)v12)
    {
      LODWORD(v13) = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v14 = v11 + 16 * v13;
      v15 = *(const llvm::Function **)v14;
      if (*(const llvm::Function **)v14 == a2)
      {
LABEL_14:
        v18 = *((_DWORD *)this + 2);
        if (v18)
        {
          v19 = *(_QWORD **)(v14 + 8);
          v22 = *v19;
          v20 = (char *)(v19 + 2);
          v21 = v22;
          if (v22)
          {
            v23 = 0;
            v24 = 0;
            do
              v24 = 33 * v24 + v20[v23++];
            while (v21 != v23);
            v25 = 0;
LABEL_19:
            v26 = v18 - 1;
            v27 = *(_QWORD *)this;
            v48 = v18;
            v49 = v18;
            v28 = *(_QWORD *)this + 8 * v18 + 8;
            v29 = 1;
            v30 = v24;
            while (1)
            {
              v31 = v30 & v26;
              v32 = *(_QWORD **)(v27 + 8 * v31);
              if (v32 != (_QWORD *)-8)
              {
                if (!v32)
                  goto LABEL_35;
                if (*(_DWORD *)(v28 + 4 * v31) == v24
                  && v21 == *v32
                  && ((v25 & 1) != 0 || !memcmp(v20, (char *)v32 + *((unsigned int *)this + 5), v21)))
                {
                  break;
                }
              }
              v30 = v29 + v31;
              ++v29;
            }
            v33 = (int)v31;
            if ((_DWORD)v31 == -1)
              v33 = v48;
            goto LABEL_36;
          }
          v24 = 0;
LABEL_33:
          v25 = 1;
          goto LABEL_19;
        }
        v49 = 0;
        goto LABEL_35;
      }
      v16 = 1;
      while (v15 != (const llvm::Function *)-4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(const llvm::Function **)(v11 + 16 * v13);
        if (v15 == a2)
        {
          v14 = v11 + 16 * v13;
          goto LABEL_14;
        }
      }
    }
    v14 = v11 + 16 * v12;
    goto LABEL_14;
  }
}

void llvm::ImportedFunctionsInliningStatistics::dump(size_t *this, int a2)
{
  llvm::raw_ostream *v4;
  const void *v5;
  size_t v6;
  _WORD *v7;
  char *v8;
  size_t **v9;
  size_t **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char *v17;
  llvm::raw_ostream *v18;
  void *v19;
  unint64_t v20;
  llvm::raw_ostream *v21;
  int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  llvm::raw_ostream *v27;
  int v28;
  _BYTE *v29;
  void **v30;
  size_t v31;
  llvm::raw_ostream *v32;
  void **v33;
  size_t v34;
  llvm::raw_ostream *v35;
  void **v36;
  size_t v37;
  llvm::raw_ostream *v38;
  void **v39;
  size_t v40;
  llvm::raw_ostream *v41;
  void **v42;
  size_t v43;
  llvm::raw_ostream *v44;
  void **v45;
  size_t v46;
  llvm *v47;
  uint64_t v48;
  llvm *v49;
  std::string *v50;
  size_t size;
  size_t v52;
  int v53;
  _BOOL4 v54;
  unsigned int v55;
  unsigned int v56;
  llvm::raw_ostream *v57;
  void *v58;
  char **v59;
  const char *v60;
  size_t v61;
  uint64_t v62;
  _BYTE *v63;
  const void *v64;
  size_t v65;
  void *v66;
  unint64_t v67;
  llvm::raw_ostream *v68;
  int v69;
  void *v70;
  unint64_t v71;
  llvm::raw_ostream *v72;
  int v73;
  _BYTE *v74;
  size_t *v75;
  char **v76;
  void *__p[2];
  char v78;
  void *v79[2];
  char v80;
  void *v81[2];
  char v82;
  void *v83[2];
  char v84;
  void *v85[2];
  char v86;
  void *v87[2];
  char v88;
  void (**v89)(llvm::raw_ostream *__hidden);
  int v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char v94;
  uint64_t v95;
  int v96;
  std::string *v97;
  std::string v98;
  size_t **v99;
  size_t **v100;

  llvm::ImportedFunctionsInliningStatistics::calculateRealInlines((llvm::ImportedFunctionsInliningStatistics *)this);
  this[5] = this[4];
  llvm::ImportedFunctionsInliningStatistics::getSortedNodes((size_t ***)this, &v99);
  memset(&v98, 0, sizeof(v98));
  std::string::reserve(&v98, 0x1388uLL);
  v90 = 0;
  v94 = 0;
  v95 = 0;
  v89 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v97 = &v98;
  v96 = 0;
  v92 = 0;
  v93 = 0;
  v91 = 0;
  v4 = llvm::raw_ostream::write((llvm::raw_ostream *)&v89, "------- Dumping inliner stats for [", 0x23uLL);
  v5 = (const void *)this[8];
  v6 = this[9];
  v7 = (_WORD *)*((_QWORD *)v4 + 4);
  if (v6 <= *((_QWORD *)v4 + 3) - (_QWORD)v7)
  {
    if (v6)
    {
      memcpy(v7, v5, this[9]);
      v7 = (_WORD *)(*((_QWORD *)v4 + 4) + v6);
      *((_QWORD *)v4 + 4) = v7;
    }
  }
  else
  {
    v4 = llvm::raw_ostream::write(v4, (const char *)v5, this[9]);
    v7 = (_WORD *)*((_QWORD *)v4 + 4);
  }
  if (*((_QWORD *)v4 + 3) - (_QWORD)v7 > 9uLL)
  {
    v7[4] = 2605;
    *(_QWORD *)v7 = *(_QWORD *)"] -------\n";
    *((_QWORD *)v4 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v4, "] -------\n", 0xAuLL);
  }
  v76 = &v93;
  if (a2)
  {
    v8 = v93;
    if ((unint64_t)(v92 - (_QWORD)v93) > 0x1D)
    {
      *(_OWORD *)v93 = *(_OWORD *)"-- List of inlined functions:\n";
      *(_OWORD *)(v8 + 14) = *(_OWORD *)"ined functions:\n";
      v93 += 30;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v89, "-- List of inlined functions:\n", 0x1EuLL);
    }
  }
  v75 = this;
  v9 = v99;
  v10 = v100;
  if (v99 == v100)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v12 = 0;
    v11 = 0;
    do
    {
      v52 = (*v9)[1];
      if (*(_DWORD *)(v52 + 80))
      {
        v53 = *(unsigned __int8 *)(v52 + 88);
        v54 = *(_DWORD *)(v52 + 84) > 0;
        v55 = v11 + v54;
        v56 = v12 + v54;
        v11 = v53 ? v11 : v55;
        v12 = v53 ? v56 : v12;
        v13 = v53 ? v13 : (v13 + 1);
        v14 = v53 ? (v14 + 1) : v14;
        if (a2)
        {
          if ((unint64_t)(v92 - (_QWORD)v93) > 7)
          {
            *(_QWORD *)v93 = 0x2064656E696C6E49;
            v58 = v93 + 8;
            v93 += 8;
            v57 = (llvm::raw_ostream *)&v89;
            v59 = &v93;
          }
          else
          {
            v57 = llvm::raw_ostream::write((llvm::raw_ostream *)&v89, "Inlined ", 8uLL);
            v59 = (char **)((char *)v57 + 32);
            v58 = (void *)*((_QWORD *)v57 + 4);
          }
          if (*(_BYTE *)((*v9)[1] + 88))
            v60 = "imported ";
          else
            v60 = "not imported ";
          if (*(_BYTE *)((*v9)[1] + 88))
            v61 = 9;
          else
            v61 = 13;
          if (v61 <= *((_QWORD *)v57 + 3) - (_QWORD)v58)
          {
            memcpy(v58, v60, v61);
            *v59 += v61;
          }
          else
          {
            v57 = llvm::raw_ostream::write(v57, v60, v61);
          }
          v62 = *((_QWORD *)v57 + 4);
          if ((unint64_t)(*((_QWORD *)v57 + 3) - v62) > 9)
          {
            *(_WORD *)(v62 + 8) = 23328;
            *(_QWORD *)v62 = *(_QWORD *)"function [";
            v63 = (_BYTE *)(*((_QWORD *)v57 + 4) + 10);
            *((_QWORD *)v57 + 4) = v63;
          }
          else
          {
            v57 = llvm::raw_ostream::write(v57, "function [", 0xAuLL);
            v63 = (_BYTE *)*((_QWORD *)v57 + 4);
          }
          v64 = *v9 + 2;
          v65 = **v9;
          if (v65 <= *((_QWORD *)v57 + 3) - (_QWORD)v63)
          {
            if (v65)
            {
              memcpy(v63, v64, **v9);
              v63 = (_BYTE *)(*((_QWORD *)v57 + 4) + v65);
              *((_QWORD *)v57 + 4) = v63;
            }
          }
          else
          {
            v57 = llvm::raw_ostream::write(v57, (const char *)v64, **v9);
            v63 = (_BYTE *)*((_QWORD *)v57 + 4);
          }
          if (*((_BYTE **)v57 + 3) == v63)
          {
            v57 = llvm::raw_ostream::write(v57, "]", 1uLL);
            v66 = (void *)*((_QWORD *)v57 + 4);
          }
          else
          {
            *v63 = 93;
            v66 = (void *)(*((_QWORD *)v57 + 4) + 1);
            *((_QWORD *)v57 + 4) = v66;
          }
          if (*((_QWORD *)v57 + 3) - (_QWORD)v66 > 0xCuLL)
          {
            qmemcpy(v66, ": #inlines = ", 13);
            *((_QWORD *)v57 + 4) += 13;
          }
          else
          {
            v57 = llvm::raw_ostream::write(v57, ": #inlines = ", 0xDuLL);
          }
          v67 = *(int *)((*v9)[1] + 80);
          if ((v67 & 0x80000000) != 0)
          {
            v67 = -(uint64_t)v67;
            v68 = v57;
            v69 = 1;
          }
          else
          {
            v68 = v57;
            v69 = 0;
          }
          sub_1C5E21910(v68, v67, 0, 0, v69);
          v70 = (void *)*((_QWORD *)v57 + 4);
          if (*((_QWORD *)v57 + 3) - (_QWORD)v70 > 0x20uLL)
          {
            qmemcpy(v70, ", #inlines_to_importing_module = ", 33);
            *((_QWORD *)v57 + 4) += 33;
          }
          else
          {
            v57 = llvm::raw_ostream::write(v57, ", #inlines_to_importing_module = ", 0x21uLL);
          }
          v71 = *(int *)((*v9)[1] + 84);
          if ((v71 & 0x80000000) != 0)
          {
            v71 = -(uint64_t)v71;
            v72 = v57;
            v73 = 1;
          }
          else
          {
            v72 = v57;
            v73 = 0;
          }
          sub_1C5E21910(v72, v71, 0, 0, v73);
          v74 = (_BYTE *)*((_QWORD *)v57 + 4);
          if (*((_BYTE **)v57 + 3) == v74)
          {
            llvm::raw_ostream::write(v57, "\n", 1uLL);
          }
          else
          {
            *v74 = 10;
            ++*((_QWORD *)v57 + 4);
          }
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  v15 = *((_DWORD *)v75 + 14);
  v16 = *((_DWORD *)v75 + 15);
  v17 = v93;
  if ((unint64_t)(v92 - (_QWORD)v93) > 0xB)
  {
    *((_DWORD *)v93 + 2) = 171604338;
    *(_QWORD *)v17 = *(_QWORD *)"-- Summary:\n";
    v19 = v93 + 12;
    v93 += 12;
    v18 = (llvm::raw_ostream *)&v89;
  }
  else
  {
    v18 = llvm::raw_ostream::write((llvm::raw_ostream *)&v89, "-- Summary:\n", 0xCuLL);
    v19 = (void *)*((_QWORD *)v18 + 4);
    v76 = (char **)((char *)v18 + 32);
  }
  if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 0xEuLL)
  {
    qmemcpy(v19, "All functions: ", 15);
    *v76 += 15;
  }
  else
  {
    v18 = llvm::raw_ostream::write(v18, "All functions: ", 0xFuLL);
  }
  v20 = *((int *)v75 + 14);
  if ((v20 & 0x80000000) != 0)
  {
    v20 = -(uint64_t)v20;
    v21 = v18;
    v22 = 1;
  }
  else
  {
    v21 = v18;
    v22 = 0;
  }
  sub_1C5E21910(v21, v20, 0, 0, v22);
  v23 = (void *)*((_QWORD *)v18 + 4);
  if (*((_QWORD *)v18 + 3) - (_QWORD)v23 > 0x15uLL)
  {
    qmemcpy(v23, ", imported functions: ", 22);
    *((_QWORD *)v18 + 4) += 22;
  }
  else
  {
    v18 = llvm::raw_ostream::write(v18, ", imported functions: ", 0x16uLL);
  }
  v24 = (v15 - v16);
  v25 = (v16 - v12);
  v26 = *((int *)v75 + 15);
  if ((v26 & 0x80000000) != 0)
  {
    v26 = -(uint64_t)v26;
    v27 = v18;
    v28 = 1;
  }
  else
  {
    v27 = v18;
    v28 = 0;
  }
  sub_1C5E21910(v27, v26, 0, 0, v28);
  v29 = (_BYTE *)*((_QWORD *)v18 + 4);
  if (*((_BYTE **)v18 + 3) == v29)
  {
    v18 = llvm::raw_ostream::write(v18, "\n", 1uLL);
  }
  else
  {
    *v29 = 10;
    ++*((_QWORD *)v18 + 4);
  }
  sub_1C4E4F434((uint64_t)v87, "inlined functions", (v14 + v13), *((unsigned int *)v75 + 14), "all functions", 1);
  if (v88 >= 0)
    v30 = v87;
  else
    v30 = (void **)v87[0];
  if (v88 >= 0)
    v31 = v88 & 0x7F;
  else
    v31 = (size_t)v87[1];
  v32 = llvm::raw_ostream::write(v18, (const char *)v30, v31);
  sub_1C4E4F434((uint64_t)v85, "imported functions inlined anywhere", v14, *((unsigned int *)v75 + 15), "imported functions", 1);
  if (v86 >= 0)
    v33 = v85;
  else
    v33 = (void **)v85[0];
  if (v86 >= 0)
    v34 = v86 & 0x7F;
  else
    v34 = (size_t)v85[1];
  v35 = llvm::raw_ostream::write(v32, (const char *)v33, v34);
  sub_1C4E4F434((uint64_t)v83, "imported functions inlined into importing module", v12, *((unsigned int *)v75 + 15), "imported functions", 0);
  if (v84 >= 0)
    v36 = v83;
  else
    v36 = (void **)v83[0];
  if (v84 >= 0)
    v37 = v84 & 0x7F;
  else
    v37 = (size_t)v83[1];
  v38 = llvm::raw_ostream::write(v35, (const char *)v36, v37);
  sub_1C4E4F434((uint64_t)v81, ", remaining", v25, *((unsigned int *)v75 + 15), "imported functions", 1);
  if (v82 >= 0)
    v39 = v81;
  else
    v39 = (void **)v81[0];
  if (v82 >= 0)
    v40 = v82 & 0x7F;
  else
    v40 = (size_t)v81[1];
  v41 = llvm::raw_ostream::write(v38, (const char *)v39, v40);
  sub_1C4E4F434((uint64_t)v79, "non-imported functions inlined anywhere", v13, v24, "non-imported functions", 1);
  if (v80 >= 0)
    v42 = v79;
  else
    v42 = (void **)v79[0];
  if (v80 >= 0)
    v43 = v80 & 0x7F;
  else
    v43 = (size_t)v79[1];
  v44 = llvm::raw_ostream::write(v41, (const char *)v42, v43);
  sub_1C4E4F434((uint64_t)__p, "non-imported functions inlined into importing module", v11, v24, "non-imported functions", 1);
  if (v78 >= 0)
    v45 = __p;
  else
    v45 = (void **)__p[0];
  if (v78 >= 0)
    v46 = v78 & 0x7F;
  else
    v46 = (size_t)__p[1];
  v47 = llvm::raw_ostream::write(v44, (const char *)v45, v46);
  if (v78 < 0)
    operator delete(__p[0]);
  if (v80 < 0)
    operator delete(v79[0]);
  if (v82 < 0)
    operator delete(v81[0]);
  if (v84 < 0)
    operator delete(v83[0]);
  if (v86 < 0)
    operator delete(v85[0]);
  if (v88 < 0)
    operator delete(v87[0]);
  v48 = v93 - v91;
  if (v93 != v91)
  {
    v93 = v91;
    v47 = (llvm *)llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v89, v91, v48);
  }
  v49 = llvm::dbgs(v47);
  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v50 = &v98;
  else
    v50 = (std::string *)v98.__r_.__value_.__r.__words[0];
  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v98.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v98.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v49, (const char *)v50, size);
  v89 = off_1E81A6E70;
  if (v96 == 1 && v91)
    MEMORY[0x1CAA32F9C](v91, 0x1000C8077774924);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (v99)
    operator delete(v99);
}

uint64_t llvm::ImportedFunctionsInliningStatistics::calculateRealInlines(llvm::ImportedFunctionsInliningStatistics *this)
{
  __int128 *v2;
  __int128 *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = (__int128 *)*((_QWORD *)this + 4);
  v3 = (__int128 *)*((_QWORD *)this + 5);
  v4 = 126 - 2 * __clz(v3 - v2);
  if (v3 == v2)
    v5 = 0;
  else
    v5 = v4;
  sub_1C4E4F728(v2, v3, (uint64_t)&v10, v5, 1);
  result = (uint64_t)sub_1C4E509FC(*((const void ***)this + 4), *((const void ***)this + 5));
  v7 = result;
  v8 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 5) != result)
    *((_QWORD *)this + 5) = result;
  while (v8 != v7)
  {
    result = (uint64_t)sub_1C6198FB4((uint64_t)this, *(unsigned __int8 **)v8, *(_QWORD *)(v8 + 8));
    v9 = *(_QWORD *)(*(_QWORD *)result + 8);
    if (!*(_BYTE *)(v9 + 89))
      result = llvm::ImportedFunctionsInliningStatistics::dfs((uint64_t)this, (uint64_t **)v9);
    v8 += 16;
  }
  return result;
}

size_t **llvm::ImportedFunctionsInliningStatistics::getSortedNodes@<X0>(size_t ***this@<X0>, size_t ***a2@<X8>)
{
  uint64_t v4;
  size_t **v5;
  size_t **v6;
  uint64_t v7;
  size_t **i;
  size_t **v10;
  size_t *v11;
  unint64_t v12;
  size_t **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  size_t **v20;
  uint64_t v21;
  size_t *v22;
  BOOL v23;
  size_t **v24;
  unint64_t v25;
  char *v26;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *((unsigned int *)this + 3);
  if ((_DWORD)v4)
  {
    v5 = (size_t **)operator new(8 * v4);
    *a2 = v5;
    a2[1] = v5;
    a2[2] = &v5[v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = *this;
  v7 = *((unsigned int *)this + 2);
  if ((_DWORD)v7)
  {
    for (i = *this; !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *this;
  }
  v10 = &v6[v7];
  if (i == v10)
  {
    v24 = v5;
  }
  else
  {
    v11 = *i;
    do
    {
      v12 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v12)
      {
        v13 = *a2;
        v14 = v5 - *a2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61)
          abort();
        v16 = v12 - (_QWORD)v13;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 >> 61)
            sub_1C4764EE4();
          v18 = (char *)operator new(8 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v11;
        v20 = (size_t **)(v19 + 8);
        if (v5 != v13)
        {
          do
          {
            v21 = (uint64_t)*--v5;
            *((_QWORD *)v19 - 1) = v21;
            v19 -= 8;
          }
          while (v5 != v13);
          v5 = *a2;
        }
        *a2 = (size_t **)v19;
        a2[1] = v20;
        a2[2] = (size_t **)&v18[8 * v17];
        if (v5)
          operator delete(v5);
        v5 = v20;
      }
      else
      {
        *v5++ = v11;
      }
      a2[1] = v5;
      do
      {
        v22 = i[1];
        ++i;
        v11 = v22;
        if (v22)
          v23 = v11 + 1 == 0;
        else
          v23 = 1;
      }
      while (v23);
    }
    while (i != v10);
    v24 = *a2;
  }
  v25 = 126 - 2 * __clz(v5 - v24);
  if (v5 == v24)
    v26 = 0;
  else
    v26 = (char *)v25;
  return sub_1C4E50AD4(v24, v5, v26, 1);
}

uint64_t sub_1C4E4F434(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, const char *a5, int a6)
{
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v18[2];
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  sub_1C4D7C8B4((uint64_t)v18);
  *(_QWORD *)((char *)&v19[2] + *(_QWORD *)(v19[0] - 24)) = 4;
  v9 = strlen(a2);
  v10 = sub_1C4D7C62C(v19, (uint64_t)a2, v9);
  sub_1C4D7C62C(v10, (uint64_t)": ", 2);
  v11 = (_QWORD *)std::ostream::operator<<();
  sub_1C4D7C62C(v11, (uint64_t)" [", 2);
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = sub_1C4D7C62C(v12, (uint64_t)"% of ", 5);
  v14 = strlen(a5);
  v15 = sub_1C4D7C62C(v13, (uint64_t)a5, v14);
  sub_1C4D7C62C(v15, (uint64_t)"]", 1);
  if (a6)
    sub_1C4D7C62C(v19, (uint64_t)"\n", 1);
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F50];
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v19[0] = v16;
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CAA32F18](&v21);
}

uint64_t sub_1C4E4F5D8(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

__n128 sub_1C4E4F5EC(int **a1, uint64_t *a2, _WORD *a3, __n128 *a4)
{
  int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&InlinerFunctionImportStats, "inliner-function-import-stats", 0x1DuLL);
  v8 = *a1;
  dword_1ED82D528 = **a1;
  byte_1ED82D53C = 1;
  dword_1ED82D538 = *v8;
  v9 = *((_DWORD *)a2 + 2);
  if (v9)
  {
    v10 = *a2;
    v11 = v10 + 40 * v9;
    do
    {
      sub_1C6198E34(*(unsigned __int8 **)v10, *(_QWORD *)(v10 + 8), *(_DWORD *)(v10 + 16), *(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32));
      v10 += 40;
    }
    while (v10 != v11);
  }
  word_1ED82D4B2 = (32 * (*a3 & 3)) | word_1ED82D4B2 & 0xFF9F;
  result = *a4;
  unk_1ED82D4C8 = *a4;
  return result;
}

unint64_t sub_1C4E4F6B4(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED82D558 >= HIDWORD(qword_1ED82D558))
  {
    v3 = qword_1ED82D558 + 1;
    if (qword_1ED82D550 <= a1 && qword_1ED82D550 + 48 * (unint64_t)qword_1ED82D558 > a1)
    {
      v5 = a1 - qword_1ED82D550;
      sub_1C6198EE8(v3);
      return qword_1ED82D550 + v5;
    }
    else
    {
      sub_1C6198EE8(v3);
    }
  }
  return a1;
}

void sub_1C4E4F728(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  __int128 *v17;
  char v18;
  BOOL v19;
  __int128 v20;
  __int128 v21;

BOOL sub_1C4E4FA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  size_t v6;
  int v7;
  int v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a3 + 8);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a2 + 8);
  else
    v6 = *(_QWORD *)(a3 + 8);
  if (v6 && (v7 = memcmp(*(const void **)a2, *(const void **)a3, v6)) != 0)
  {
    v8 = (v7 >> 31) | 1;
  }
  else
  {
    if (v4 < v5)
      v8 = -1;
    else
      v8 = 1;
    if (v4 == v5)
      v8 = 0;
  }
  return v8 == -1;
}

uint64_t sub_1C4E4FAE4(uint64_t result, _OWORD *a2, uint64_t a3)
{
  _OWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  const void *v10;
  size_t v11;
  _QWORD *v12;
  uint64_t v13;
  const void **v14;
  size_t v15;
  size_t v16;
  BOOL v17;

  if ((_OWORD *)result == a2)
    return result;
  v3 = a2;
  v4 = (_QWORD *)result;
  v5 = result + 16;
  if ((_OWORD *)(result + 16) == a2)
    return result;
  v6 = a3;
  v7 = 0;
  v8 = result;
  do
  {
    v9 = (_OWORD *)v5;
    result = sub_1C4E4FA7C(v6, v5, v8);
    if (!(_DWORD)result)
      goto LABEL_27;
    v10 = *(const void **)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 24);
    *v9 = *(_OWORD *)v8;
    v12 = v4;
    if ((_QWORD *)v8 == v4)
      goto LABEL_26;
    v13 = v7;
    while (1)
    {
      v14 = (const void **)((char *)v4 + v13 - 16);
      v15 = *(_QWORD *)((char *)v4 + v13 - 8);
      if (v15 >= v11)
        v16 = v11;
      else
        v16 = *(_QWORD *)((char *)v4 + v13 - 8);
      if (v16)
      {
        result = memcmp(v10, *v14, v16);
        if ((result & 0x80000000) == 0)
        {
          v17 = (_DWORD)result || v11 == v15;
          if (v17 || v11 >= v15)
          {
            v12 = (_QWORD *)((char *)v4 + v13);
            goto LABEL_25;
          }
        }
        goto LABEL_22;
      }
      if (v11 >= v15)
        break;
LABEL_22:
      v8 -= 16;
      *(_OWORD *)((char *)v4 + v13) = *(_OWORD *)v14;
      v13 -= 16;
      if (!v13)
      {
        v12 = v4;
        goto LABEL_25;
      }
    }
    v12 = (_QWORD *)v8;
LABEL_25:
    v3 = a2;
    v6 = a3;
LABEL_26:
    *v12 = v10;
    v12[1] = v11;
LABEL_27:
    v5 = (uint64_t)(v9 + 1);
    v7 += 16;
    v8 = (uint64_t)v9;
  }
  while (v9 + 1 != v3);
  return result;
}

uint64_t sub_1C4E4FC0C(uint64_t result, const void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  const void **v7;
  const void *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  size_t v12;
  BOOL v13;

  if ((const void **)result != a2)
  {
    v4 = result;
    v5 = result + 16;
    if ((const void **)(result + 16) != a2)
    {
      do
      {
        v7 = (const void **)v5;
        result = sub_1C4E4FA7C(a3, v5, v4);
        if ((_DWORD)result)
        {
          v8 = *v7;
          v9 = *(_QWORD *)(v4 + 24);
          while (1)
          {
            while (1)
            {
              v10 = (_QWORD *)v4;
              *(_OWORD *)(v4 + 16) = *(_OWORD *)v4;
              v4 -= 16;
              v11 = *(v10 - 1);
              v12 = v11 >= v9 ? v9 : *(v10 - 1);
              if (v12)
                break;
              if (v9 >= v11)
                goto LABEL_20;
            }
            result = memcmp(v8, (const void *)*(v10 - 2), v12);
            if ((result & 0x80000000) == 0)
            {
              v13 = (_DWORD)result || v9 == v11;
              if (v13 || v9 >= v11)
                break;
            }
          }
LABEL_20:
          *v10 = v8;
          v10[1] = v9;
        }
        v5 = (uint64_t)(v7 + 2);
        v4 = (uint64_t)v7;
      }
      while (v7 + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_1C4E4FCDC(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v8 = sub_1C4E4FA7C(a4, (uint64_t)a2, (uint64_t)a1);
  result = sub_1C4E4FA7C(a4, (uint64_t)a3, (uint64_t)a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!sub_1C4E4FA7C(a4, (uint64_t)a2, (uint64_t)a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v13 = *a1;
    *a1 = *a2;
    *a2 = v13;
    if (!sub_1C4E4FA7C(a4, (uint64_t)a3, (uint64_t)a2))
      return 1;
    v14 = *a2;
    *a2 = *a3;
    *a3 = v14;
    return 2;
  }
  v10 = *a1;
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

unint64_t sub_1C4E4FDD4(uint64_t a1, const void **a2)
{
  const void **v2;
  const void *v4;
  size_t v5;
  size_t v6;
  size_t v7;
  int v8;
  unint64_t i;
  size_t v10;
  size_t v11;
  int v12;
  BOOL v13;
  unint64_t v15;
  size_t v16;
  size_t v17;
  int v18;
  BOOL v19;
  const void **j;
  size_t v22;
  int v23;
  BOOL v24;
  const void *v26;
  unint64_t v27;
  size_t v28;
  size_t v29;
  int v30;
  int v31;
  const void **v32;
  const void *v33;
  size_t v34;
  int v35;
  BOOL v36;
  __int128 v39;

  v2 = a2;
  v4 = *(const void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (size_t)*(a2 - 1);
  if (v6 >= v5)
    v7 = *(_QWORD *)(a1 + 8);
  else
    v7 = (size_t)*(a2 - 1);
  if (v7)
  {
    v8 = memcmp(*(const void **)a1, *(a2 - 2), v7);
    if (v8)
    {
      if ((v8 & 0x80000000) == 0)
        goto LABEL_7;
LABEL_25:
      v15 = a1 + 16;
      do
      {
        while (1)
        {
          i = v15;
          v16 = *(_QWORD *)(v15 + 8);
          v17 = v16 >= v5 ? v5 : *(_QWORD *)(v15 + 8);
          v15 += 16;
          if (v17)
            break;
          if (v5 < v16)
            goto LABEL_40;
        }
        v18 = memcmp(v4, *(const void **)i, v17);
        if (v18 < 0)
          break;
        v19 = v18 || v5 == v16;
      }
      while (v19 || v5 >= v16);
      goto LABEL_40;
    }
  }
  if (v5 < v6)
    goto LABEL_25;
LABEL_7:
  for (i = a1 + 16; i < (unint64_t)v2; i += 16)
  {
    v10 = *(_QWORD *)(i + 8);
    if (v10 >= v5)
      v11 = v5;
    else
      v11 = *(_QWORD *)(i + 8);
    if (v11)
    {
      v12 = memcmp(v4, *(const void **)i, v11);
      if (v12 < 0)
        break;
      v13 = v12 || v5 == v10;
      if (!v13 && v5 < v10)
        break;
    }
    else if (v5 < v10)
    {
      break;
    }
  }
LABEL_40:
  if (i >= (unint64_t)v2)
    goto LABEL_87;
  for (j = v2 - 3; ; j -= 2)
  {
    v22 = v6 >= v5 ? v5 : v6;
    if (v22)
      break;
    if (v5 >= v6)
      goto LABEL_58;
LABEL_57:
    v26 = *j;
    v6 = (size_t)v26;
  }
  v23 = memcmp(v4, j[1], v22);
  if (v23 < 0)
    goto LABEL_57;
  v24 = v23 || v5 == v6;
  if (!v24 && v5 < v6)
    goto LABEL_57;
LABEL_58:
  v2 = j + 1;
LABEL_87:
  while (i < (unint64_t)v2)
  {
    v39 = *(_OWORD *)i;
    *(_OWORD *)i = *(_OWORD *)v2;
    *(_OWORD *)v2 = v39;
    v27 = i + 16;
    do
    {
      i = v27;
      v28 = *(_QWORD *)(v27 + 8);
      if (v28 >= v5)
        v29 = v5;
      else
        v29 = *(_QWORD *)(v27 + 8);
      if (v29 && (v30 = memcmp(v4, *(const void **)v27, v29)) != 0)
      {
        v31 = (v30 >> 31) | 1;
      }
      else if (v5 == v28)
      {
        v31 = 0;
      }
      else
      {
        if (v5 < v28)
          break;
        v31 = 1;
      }
      v27 = i + 16;
    }
    while (v31 != -1);
    v32 = v2 - 2;
    while (1)
    {
      while (1)
      {
        v2 = v32;
        v33 = v32[1];
        v34 = (unint64_t)v33 >= v5 ? v5 : (size_t)v32[1];
        v32 -= 2;
        if (v34)
          break;
        if (v5 >= (unint64_t)v33)
          goto LABEL_87;
      }
      v35 = memcmp(v4, *v2, v34);
      if ((v35 & 0x80000000) == 0)
      {
        v36 = v35 || v5 == (_QWORD)v33;
        if (v36 || v5 >= (unint64_t)v33)
          break;
      }
    }
  }
  if (i - 16 != a1)
    *(_OWORD *)a1 = *(_OWORD *)(i - 16);
  *(_QWORD *)(i - 16) = v4;
  *(_QWORD *)(i - 8) = v5;
  return i;
}

const void **sub_1C4E5000C(uint64_t a1, const void **a2)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  size_t v8;
  int v9;
  BOOL v10;
  unint64_t v12;
  const void **v13;
  const void *v14;
  size_t v15;
  int v16;
  BOOL v17;
  const void **v19;
  const void *v20;
  size_t v21;
  int v22;
  BOOL v23;
  BOOL v24;
  const void **v27;
  const void **v28;
  _OWORD *v29;
  size_t v30;
  size_t v31;
  int v32;
  int v33;
  const void **v34;
  const void *v35;
  size_t v36;
  int v37;
  BOOL v38;
  const void **result;
  __int128 v41;

  v4 = 0;
  v5 = *(const void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  while (1)
  {
    v7 = *(_QWORD *)(a1 + v4 + 24);
    v8 = v6 >= v7 ? *(_QWORD *)(a1 + v4 + 24) : v6;
    if (v8)
      break;
    if (v7 >= v6)
      goto LABEL_18;
LABEL_17:
    v4 += 16;
  }
  v9 = memcmp(*(const void **)(a1 + v4 + 16), v5, v8);
  if (v9 < 0)
    goto LABEL_17;
  v10 = v9 || v7 == v6;
  if (!v10 && v7 < v6)
    goto LABEL_17;
LABEL_18:
  v12 = a1 + v4 + 16;
  if (v4)
  {
    v13 = a2 - 2;
    do
    {
      while (1)
      {
        a2 = v13;
        v14 = v13[1];
        v15 = v6 >= (unint64_t)v14 ? (size_t)v13[1] : v6;
        v13 -= 2;
        if (v15)
          break;
        if ((unint64_t)v14 < v6)
          goto LABEL_59;
      }
      v16 = memcmp(*a2, v5, v15);
      if (v16 < 0)
        break;
      v17 = v16 || v14 == (const void *)v6;
    }
    while (v17 || (unint64_t)v14 >= v6);
  }
  else if (v12 < (unint64_t)a2)
  {
    v19 = a2 - 2;
    do
    {
      while (1)
      {
        a2 = v19;
        v20 = v19[1];
        v21 = v6 >= (unint64_t)v20 ? (size_t)v19[1] : v6;
        v19 -= 2;
        if (!v21)
          break;
        v22 = memcmp(*a2, v5, v21);
        if ((v22 & 0x80000000) == 0)
        {
          v23 = (unint64_t)v20 >= v6 || v20 == (const void *)v6;
          v24 = !v23 && v22 == 0;
          if (!v24 && v12 < (unint64_t)a2)
            continue;
        }
        goto LABEL_59;
      }
    }
    while ((unint64_t)v20 >= v6 && v12 < (unint64_t)a2);
  }
LABEL_59:
  v27 = (const void **)v12;
  if (v12 < (unint64_t)a2)
  {
    v28 = a2;
    do
    {
      v41 = *(_OWORD *)v27;
      *(_OWORD *)v27 = *(_OWORD *)v28;
      *(_OWORD *)v28 = v41;
      v29 = v27 + 2;
      do
      {
        v27 = (const void **)v29;
        v30 = *((_QWORD *)v29 + 1);
        if (v6 >= v30)
          v31 = *((_QWORD *)v29 + 1);
        else
          v31 = v6;
        if (v31 && (v32 = memcmp(*(const void **)v29, v5, v31)) != 0)
        {
          v33 = (v32 >> 31) | 1;
        }
        else
        {
          if (v30 >= v6)
            break;
          v33 = -1;
        }
        v29 = v27 + 2;
      }
      while (v33 == -1);
      v34 = v28 - 2;
      do
      {
        while (1)
        {
          v28 = v34;
          v35 = v34[1];
          v36 = v6 >= (unint64_t)v35 ? (size_t)v34[1] : v6;
          v34 -= 2;
          if (v36)
            break;
          if ((unint64_t)v35 < v6)
            goto LABEL_86;
        }
        v37 = memcmp(*v28, v5, v36);
        if (v37 < 0)
          break;
        v38 = v37 || v35 == (const void *)v6;
      }
      while (v38 || (unint64_t)v35 >= v6);
LABEL_86:
      ;
    }
    while (v27 < v28);
  }
  result = v27 - 2;
  if (v27 - 2 != (const void **)a1)
    *(_OWORD *)a1 = *(_OWORD *)result;
  *(v27 - 2) = v5;
  *(v27 - 1) = (const void *)v6;
  return result;
}

BOOL sub_1C4E50238(__int128 *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  int v13;
  const void *v14;
  size_t v15;
  __int128 *v16;
  uint64_t v17;
  const void **v18;
  size_t v19;
  size_t v20;
  int v21;
  BOOL v22;
  __int128 *v24;
  uint64_t v25;
  int v26;

  v3 = a3;
  v4 = a2;
  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if (sub_1C4E4FA7C(a3, (uint64_t)(a2 - 1), (uint64_t)a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      sub_1C4E4FCDC(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C4E50450(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C4E50508(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_1C4E4FCDC(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == v4)
        return 1;
      v12 = 0;
      v13 = 0;
      v24 = v4;
      v25 = v3;
      break;
  }
  while (2)
  {
    if (!sub_1C4E4FA7C(v3, (uint64_t)v11, (uint64_t)v10))
      goto LABEL_29;
    v14 = *(const void **)v11;
    v15 = *((_QWORD *)v11 + 1);
    *v11 = *v10;
    v16 = a1;
    if (v10 == a1)
      goto LABEL_28;
    v26 = v13;
    v17 = v12;
    while (1)
    {
      v18 = (const void **)((char *)a1 + v17 + 16);
      v19 = *(_QWORD *)((char *)a1 + v17 + 24);
      if (v19 >= v15)
        v20 = v15;
      else
        v20 = *(_QWORD *)((char *)a1 + v17 + 24);
      if (v20)
      {
        v21 = memcmp(v14, *v18, v20);
        if ((v21 & 0x80000000) == 0)
        {
          v22 = v21 || v15 == v19;
          if (v22 || v15 >= v19)
          {
            v16 = (__int128 *)((char *)a1 + v17 + 32);
            goto LABEL_27;
          }
        }
        goto LABEL_24;
      }
      if (v15 >= v19)
        break;
LABEL_24:
      --v10;
      *(__int128 *)((char *)a1 + v17 + 32) = *(_OWORD *)v18;
      v17 -= 16;
      if (v17 == -32)
      {
        v16 = a1;
        goto LABEL_27;
      }
    }
    v16 = v10;
LABEL_27:
    v4 = v24;
    v3 = v25;
    v13 = v26;
LABEL_28:
    *(_QWORD *)v16 = v14;
    *((_QWORD *)v16 + 1) = v15;
    if (++v13 != 8)
    {
LABEL_29:
      v10 = v11;
      v12 += 16;
      if (++v11 == v4)
        return 1;
      continue;
    }
    return v11 + 1 == v4;
  }
}

__n128 sub_1C4E50450(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;

  sub_1C4E4FCDC(a1, a2, a3, a5);
  if (sub_1C4E4FA7C(a5, (uint64_t)a4, (uint64_t)a3))
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    if (sub_1C4E4FA7C(a5, (uint64_t)a3, (uint64_t)a2))
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      if (sub_1C4E4FA7C(a5, (uint64_t)a2, (uint64_t)a1))
      {
        result = (__n128)*a1;
        *a1 = *a2;
        *a2 = (__int128)result;
      }
    }
  }
  return result;
}

__n128 sub_1C4E50508(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __n128 result;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  sub_1C4E50450(a1, a2, a3, a4, a6);
  if (sub_1C4E4FA7C(a6, (uint64_t)a5, (uint64_t)a4))
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    if (sub_1C4E4FA7C(a6, (uint64_t)a4, (uint64_t)a3))
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      if (sub_1C4E4FA7C(a6, (uint64_t)a3, (uint64_t)a2))
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        if (sub_1C4E4FA7C(a6, (uint64_t)a2, (uint64_t)a1))
        {
          result = (__n128)*a1;
          *a1 = *a2;
          *a2 = (__int128)result;
        }
      }
    }
  }
  return result;
}

void **sub_1C4E505E8(void **a1, void **a2, void **a3, uint64_t a4)
{
  void **v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void **v12;
  void **v13;
  void **v14;
  __int128 v15;
  uint64_t v16;
  void **v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  void **v23;
  __int128 v24;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        sub_1C4E507B4((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (sub_1C4E4FA7C(a4, (uint64_t)v14, (uint64_t)a1))
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          sub_1C4E507B4((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 < 17)
    {
      return v13;
    }
    else
    {
      v23 = v13;
      do
      {
        v16 = 0;
        v24 = *(_OWORD *)a1;
        v17 = a1;
        do
        {
          v18 = &v17[2 * v16 + 2];
          v19 = (2 * v16) | 1;
          v20 = 2 * v16 + 2;
          if (v20 < v9 && sub_1C4E4FA7C(a4, (uint64_t)&v17[2 * v16 + 2], (uint64_t)&v17[2 * v16 + 4]))
          {
            v18 += 2;
            v19 = v20;
          }
          *(_OWORD *)v17 = *(_OWORD *)v18;
          v17 = v18;
          v16 = v19;
        }
        while (v19 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        v6 -= 2;
        if (v18 == v6)
        {
          *(_OWORD *)v18 = v24;
        }
        else
        {
          *(_OWORD *)v18 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v24;
          sub_1C4E50920((uint64_t)a1, (uint64_t)(v18 + 2), a4, ((char *)(v18 + 2) - (char *)a1) >> 4);
        }
      }
      while (v9-- > 2);
      return v23;
    }
  }
  return a3;
}

uint64_t sub_1C4E507B4(uint64_t result, uint64_t a2, uint64_t a3, void **a4)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  size_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  BOOL v20;
  void *__s2;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v10 = ((uint64_t)a4 - result) >> 3;
      v11 = v10 + 1;
      v12 = (_OWORD *)(result + 16 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && sub_1C4E4FA7C(a2, result + 16 * (v10 + 1), (uint64_t)(v12 + 1)))
      {
        ++v12;
        v11 = v13;
      }
      result = sub_1C4E4FA7C(a2, (uint64_t)v12, (uint64_t)a4);
      if ((result & 1) == 0)
      {
        v14 = (size_t)a4[1];
        __s2 = *a4;
        *(_OWORD *)a4 = *v12;
        if (v7 >= v11)
        {
          while (1)
          {
            v16 = 2 * v11;
            v11 = (2 * v11) | 1;
            v15 = (_OWORD *)(v6 + 16 * v11);
            v17 = v16 + 2;
            if (v16 + 2 < a3)
            {
              result = sub_1C4E4FA7C(a2, v6 + 16 * v11, (uint64_t)(v15 + 1));
              if ((_DWORD)result)
              {
                ++v15;
                v11 = v17;
              }
            }
            v18 = *((_QWORD *)v15 + 1);
            if (v14 >= v18)
              v19 = *((_QWORD *)v15 + 1);
            else
              v19 = v14;
            if (v19)
            {
              result = memcmp(*(const void **)v15, __s2, v19);
              if ((result & 0x80000000) != 0)
                break;
              v20 = (_DWORD)result || v18 == v14;
              if (!v20 && v18 < v14)
                break;
            }
            else if (v18 < v14)
            {
              break;
            }
            *v12 = *v15;
            v12 = v15;
            if (v7 < v11)
              goto LABEL_9;
          }
        }
        v15 = v12;
LABEL_9:
        *(_QWORD *)v15 = __s2;
        *((_QWORD *)v15 + 1) = v14;
      }
    }
  }
  return result;
}

uint64_t sub_1C4E50920(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  const void *v10;
  unint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  BOOL v16;

  v4 = a4 - 2;
  if (a4 < 2)
    return result;
  v6 = result;
  v7 = v4 >> 1;
  v8 = result + 16 * (v4 >> 1);
  v9 = (_OWORD *)(a2 - 16);
  result = sub_1C4E4FA7C(a3, v8, a2 - 16);
  if (!(_DWORD)result)
    return result;
  v10 = *(const void **)(a2 - 16);
  v11 = *(_QWORD *)(a2 - 8);
  *v9 = *(_OWORD *)v8;
  if (v4 < 2)
    goto LABEL_22;
  while (1)
  {
    v12 = (_OWORD *)v8;
    v13 = v7 - 1;
    v7 = (v7 - 1) >> 1;
    v8 = v6 + 16 * v7;
    v14 = *(_QWORD *)(v8 + 8);
    v15 = v11 >= v14 ? *(_QWORD *)(v8 + 8) : v11;
    if (v15)
      break;
    if (v14 >= v11)
      goto LABEL_21;
LABEL_19:
    *v12 = *(_OWORD *)v8;
    if (v13 <= 1)
      goto LABEL_22;
  }
  result = memcmp(*(const void **)v8, v10, v15);
  if ((result & 0x80000000) != 0)
    goto LABEL_19;
  v16 = (_DWORD)result || v14 == v11;
  if (!v16 && v14 < v11)
    goto LABEL_19;
LABEL_21:
  v8 = (uint64_t)v12;
LABEL_22:
  *(_QWORD *)v8 = v10;
  *(_QWORD *)(v8 + 8) = v11;
  return result;
}

const void **sub_1C4E509FC(const void **a1, const void **a2)
{
  const void **v3;
  const void **v4;
  const void *v5;
  size_t v6;
  const void *v7;
  const void **v9;
  const void **i;
  size_t v11;

  if (a1 == a2)
    return a2;
  v3 = a1;
  v4 = a1 + 2;
  if (a1 + 2 == a2)
    return a2;
  v5 = *a1;
  while (1)
  {
    v6 = (size_t)*(v4 - 1);
    v7 = *v4;
    if ((const void *)v6 == v4[1] && (!v6 || !memcmp(v5, *v4, v6)))
      break;
    v4 += 2;
    v3 += 2;
    v5 = v7;
    if (v4 == a2)
      return a2;
  }
  v9 = v4 - 2;
  if (v4 - 2 != a2)
  {
    for (i = v4 + 2; i != a2; i += 2)
    {
      v11 = (size_t)v9[1];
      if ((const void *)v11 != i[1] || v11 && memcmp(*v9, *i, v11))
      {
        *((_OWORD *)v9 + 1) = *(_OWORD *)i;
        v9 += 2;
      }
    }
    return v9 + 2;
  }
  return v3;
}

size_t **sub_1C4E50AD4(size_t **result, size_t **a2, char *a3, char a4)
{
  size_t **v5;
  size_t **i;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t **v10;
  size_t *v11;
  size_t *v12;
  size_t v13;
  int v14;
  size_t *v15;
  size_t v16;
  int v17;
  int v18;
  int v19;
  size_t v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  size_t *v24;
  size_t v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  size_t v30;
  size_t v31;
  size_t v32;
  int v33;
  size_t **j;
  size_t *v35;
  size_t v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  size_t **v41;
  size_t v42;
  size_t v43;
  size_t v44;
  int v45;
  BOOL v46;
  size_t *v47;
  size_t v48;
  int v49;
  int v50;
  int v51;
  size_t v52;
  size_t v53;
  size_t v54;
  int v55;
  _BOOL4 v56;
  size_t *v57;
  size_t **v58;
  size_t v59;
  int v60;
  size_t v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  size_t v66;
  size_t v67;
  size_t v68;
  int v69;
  size_t *v70;
  size_t v71;
  int v72;
  BOOL v73;
  int v74;
  int v75;
  size_t v76;
  size_t v77;
  size_t v78;
  int v79;
  size_t **v80;
  BOOL v81;
  size_t *v82;
  size_t v83;
  int v84;
  BOOL v85;
  int v86;
  int v87;
  size_t v88;
  size_t v89;
  size_t v90;
  size_t *v91;
  size_t *v92;
  size_t v93;
  int v94;
  BOOL v95;
  int v96;
  int v97;
  size_t v98;
  size_t v99;
  size_t v100;
  size_t *v101;
  size_t v102;
  int v103;
  BOOL v104;
  int v105;
  int v106;
  size_t v107;
  size_t v108;
  size_t v109;
  size_t **v110;
  BOOL v111;
  int v112;
  int v113;
  size_t v114;
  size_t v115;
  size_t v116;
  size_t *v117;
  size_t *v118;
  size_t *v119;
  size_t v120;
  int v121;
  size_t v122;
  int v123;
  BOOL v124;
  int v125;
  int v126;
  size_t v127;
  size_t v128;
  size_t v129;
  size_t *v130;
  size_t v131;
  int v132;
  BOOL v133;
  int v134;
  int v135;
  size_t v136;
  size_t v137;
  size_t v138;
  size_t **v139;
  size_t *v140;
  size_t v141;
  int v142;
  size_t *v143;
  size_t v144;
  int v145;
  BOOL v146;
  int v147;
  int v148;
  size_t v149;
  size_t v150;
  size_t v151;
  size_t **v152;
  size_t **v153;
  size_t **v154;
  size_t *v155;
  size_t v156;
  int v157;
  size_t *v158;
  size_t v159;
  int v160;
  BOOL v161;
  int v162;
  int v163;
  size_t v164;
  size_t v165;
  size_t v166;
  size_t **v167;
  BOOL v168;
  char v169;
  uint64_t v170;
  size_t **v171;
  size_t **v172;
  size_t *v173;
  size_t *v174;
  size_t v175;
  int v176;
  size_t v177;
  int v178;
  BOOL v179;
  int v180;
  int v181;
  size_t **v182;
  size_t v183;
  size_t v184;
  size_t v185;
  size_t **v186;
  uint64_t v187;
  size_t **v188;
  size_t v189;
  int v190;
  size_t *v191;
  size_t v192;
  int v193;
  BOOL v194;
  int v195;
  int v196;
  size_t v197;
  size_t v198;
  size_t v199;
  int64_t v200;
  int64_t v201;
  int64_t v202;
  uint64_t v203;
  size_t **v204;
  size_t *v205;
  size_t *v206;
  size_t v207;
  int v208;
  size_t v209;
  int v210;
  BOOL v211;
  int v212;
  int v213;
  size_t v214;
  size_t v215;
  size_t v216;
  int v217;
  _BOOL4 v218;
  size_t *v219;
  size_t v220;
  int v221;
  size_t *v222;
  size_t v223;
  int v224;
  BOOL v225;
  int v226;
  int v227;
  size_t v228;
  size_t v229;
  size_t v230;
  size_t **v231;
  uint64_t v232;
  uint64_t v233;
  size_t *v234;
  size_t *v235;
  size_t v236;
  int v237;
  size_t v238;
  int v239;
  BOOL v240;
  int v241;
  int v242;
  size_t v243;
  size_t v244;
  size_t v245;
  int v246;
  _BOOL4 v247;
  size_t *v248;
  size_t v249;
  int v250;
  size_t v251;
  int v252;
  BOOL v253;
  int v254;
  int v255;
  size_t v256;
  size_t v257;
  size_t v258;
  unint64_t v259;
  unint64_t v260;
  size_t **v261;
  size_t *v262;
  size_t v263;
  int v264;
  size_t v265;
  int v266;
  BOOL v267;
  int v268;
  int v269;
  size_t v270;
  size_t v271;
  size_t v272;
  size_t **v273;
  uint64_t v274;
  _QWORD *v275;
  size_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  size_t *v280;
  size_t *v281;
  uint64_t v282;
  int v283;
  size_t v284;
  int v285;
  BOOL v286;
  int v287;
  int v288;
  size_t v289;
  size_t v290;
  size_t v291;
  int v292;
  _BOOL4 v293;
  size_t **v294;
  uint64_t v295;
  unint64_t v296;
  size_t *v297;
  size_t v298;
  int v299;
  size_t *v300;
  uint64_t v301;
  int v302;
  BOOL v303;
  int v304;
  int v305;
  size_t v306;
  size_t v307;
  size_t v308;
  size_t *v309;
  size_t v310;
  int v311;
  size_t *v312;
  size_t v313;
  int v314;
  BOOL v315;
  int v316;
  int v317;
  size_t v318;
  size_t v319;
  size_t v320;
  size_t **v321;
  size_t **v322;
  size_t *v323;
  size_t *v324;
  size_t v325;
  int v326;
  size_t v327;
  int v328;
  BOOL v329;
  int v330;
  int v331;
  size_t v332;
  size_t v333;
  size_t v334;
  size_t **v335;
  size_t *v336;
  size_t *v337;
  size_t v338;
  int v339;
  size_t v340;
  int v341;
  BOOL v342;
  int v343;
  int v344;
  size_t v345;
  size_t v346;
  size_t v347;
  size_t v348;
  int v349;
  size_t *v350;
  size_t v351;
  int v352;
  BOOL v353;
  int v354;
  int v355;
  size_t v356;
  size_t v357;
  size_t v358;
  size_t v359;
  int v360;
  size_t *v361;
  size_t v362;
  int v363;
  BOOL v364;
  int v365;
  int v366;
  size_t v367;
  size_t v368;
  size_t v369;
  unint64_t v371;
  size_t **__s1;
  char *__s2;
  size_t **v374;
  size_t **v376;

  v376 = result;
LABEL_2:
  v5 = a2;
  i = v376;
  v374 = a2 - 1;
  while (2)
  {
    v376 = i;
    v7 = (char *)v5 - (char *)i;
    v8 = v5 - i;
    switch(v8)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v140 = *(a2 - 1);
        v141 = v140[1];
        v142 = *(_DWORD *)(v141 + 80);
        v143 = *v376;
        v144 = (*v376)[1];
        v145 = *(_DWORD *)(v144 + 80);
        v146 = v142 <= v145;
        if (v142 == v145
          && (v147 = *(_DWORD *)(v141 + 84), v148 = *(_DWORD *)(v144 + 84), v146 = v147 <= v148, v147 == v148))
        {
          v149 = *v140;
          v150 = *v143;
          if (*v143 >= *v140)
            v151 = *v140;
          else
            v151 = *v143;
          if (v151 && (result = (size_t **)memcmp(v140 + 2, v143 + 2, v151), (_DWORD)result))
          {
            if ((result & 0x80000000) == 0)
              return result;
          }
          else if (v149 >= v150)
          {
            return result;
          }
        }
        else if (v146)
        {
          return result;
        }
        *v376 = v140;
        *(a2 - 1) = v143;
        return result;
      case 3:
        return sub_1C4E51CC4(v376, v376 + 1, v374);
      case 4:
        return sub_1C4E523DC(v376, v376 + 1, v376 + 2, v374);
      case 5:
        v152 = v376 + 1;
        v153 = v376 + 2;
        v154 = v376 + 3;
        result = sub_1C4E523DC(v376, v376 + 1, v376 + 2, v376 + 3);
        v155 = *(a2 - 1);
        v156 = v155[1];
        v157 = *(_DWORD *)(v156 + 80);
        v158 = v376[3];
        v159 = v158[1];
        v160 = *(_DWORD *)(v159 + 80);
        v161 = v157 <= v160;
        if (v157 == v160
          && (v162 = *(_DWORD *)(v156 + 84), v163 = *(_DWORD *)(v159 + 84), v161 = v162 <= v163, v162 == v163))
        {
          v164 = *v155;
          v165 = *v158;
          if (*v158 >= *v155)
            v166 = *v155;
          else
            v166 = *v158;
          if (v166 && (result = (size_t **)memcmp(v155 + 2, v158 + 2, v166), (_DWORD)result))
          {
            if ((result & 0x80000000) == 0)
              return result;
          }
          else if (v164 >= v165)
          {
            return result;
          }
        }
        else if (v161)
        {
          return result;
        }
        *v154 = v155;
        *(a2 - 1) = v158;
        v309 = *v154;
        v310 = (*v154)[1];
        v311 = *(_DWORD *)(v310 + 80);
        v312 = *v153;
        v313 = (*v153)[1];
        v314 = *(_DWORD *)(v313 + 80);
        v315 = v311 <= v314;
        if (v311 == v314
          && (v316 = *(_DWORD *)(v310 + 84), v317 = *(_DWORD *)(v313 + 84), v315 = v316 <= v317, v316 == v317))
        {
          v318 = *v309;
          v319 = *v312;
          if (*v312 >= *v309)
            v320 = *v309;
          else
            v320 = *v312;
          if (v320 && (result = (size_t **)memcmp(v309 + 2, v312 + 2, v320), (_DWORD)result))
          {
            if ((result & 0x80000000) == 0)
              return result;
          }
          else if (v318 >= v319)
          {
            return result;
          }
        }
        else if (v315)
        {
          return result;
        }
        *v153 = v309;
        *v154 = v312;
        v348 = v309[1];
        v349 = *(_DWORD *)(v348 + 80);
        v350 = *v152;
        v351 = (*v152)[1];
        v352 = *(_DWORD *)(v351 + 80);
        v353 = v349 <= v352;
        if (v349 == v352
          && (v354 = *(_DWORD *)(v348 + 84), v355 = *(_DWORD *)(v351 + 84), v353 = v354 <= v355, v354 == v355))
        {
          v356 = *v309;
          v357 = *v350;
          if (*v350 >= *v309)
            v358 = *v309;
          else
            v358 = *v350;
          if (v358 && (result = (size_t **)memcmp(v309 + 2, v350 + 2, v358), (_DWORD)result))
          {
            if ((result & 0x80000000) == 0)
              return result;
          }
          else if (v356 >= v357)
          {
            return result;
          }
        }
        else if (v353)
        {
          return result;
        }
        v376[1] = v309;
        v376[2] = v350;
        v359 = v309[1];
        v360 = *(_DWORD *)(v359 + 80);
        v361 = *v376;
        v362 = (*v376)[1];
        v363 = *(_DWORD *)(v362 + 80);
        v364 = v360 <= v363;
        if (v360 == v363
          && (v365 = *(_DWORD *)(v359 + 84), v366 = *(_DWORD *)(v362 + 84), v364 = v365 <= v366, v365 == v366))
        {
          v367 = *v309;
          v368 = *v361;
          if (*v361 >= *v309)
            v369 = *v309;
          else
            v369 = *v361;
          if (v369 && (result = (size_t **)memcmp(v309 + 2, v361 + 2, v369), (_DWORD)result))
          {
            if ((result & 0x80000000) == 0)
              return result;
          }
          else if (v367 >= v368)
          {
            return result;
          }
        }
        else if (v364)
        {
          return result;
        }
        *v376 = v309;
        v376[1] = v361;
        return result;
      default:
        if (v7 <= 191)
        {
          v167 = v376 + 1;
          v168 = v376 == v5 || v167 == v5;
          v169 = v168;
          if ((a4 & 1) == 0)
          {
            if ((v169 & 1) != 0)
              return result;
            while (1)
            {
              v321 = v376;
              v322 = v167;
              v324 = *v376;
              v323 = v376[1];
              v325 = v323[1];
              v326 = *(_DWORD *)(v325 + 80);
              v327 = (*v376)[1];
              v328 = *(_DWORD *)(v327 + 80);
              v329 = v326 <= v328;
              if (v326 == v328
                && (v330 = *(_DWORD *)(v325 + 84), v331 = *(_DWORD *)(v327 + 84), v329 = v330 <= v331, v330 == v331))
              {
                v332 = *v323;
                v333 = *v324;
                if (*v324 >= *v323)
                  v334 = *v323;
                else
                  v334 = *v324;
                if (v334 && (result = (size_t **)memcmp(v323 + 2, v324 + 2, v334), (_DWORD)result))
                {
                  if ((result & 0x80000000) != 0)
                    goto LABEL_414;
                }
                else if (v332 < v333)
                {
                  goto LABEL_414;
                }
              }
              else if (!v329)
              {
                do
                {
                  while (1)
                  {
LABEL_414:
                    while (1)
                    {
                      v335 = v321;
                      v336 = v324;
                      v337 = *--v321;
                      v324 = v337;
                      v321[2] = v336;
                      v338 = v323[1];
                      v339 = *(_DWORD *)(v338 + 80);
                      v340 = v337[1];
                      v341 = *(_DWORD *)(v340 + 80);
                      v342 = v339 <= v341;
                      if (v339 == v341)
                      {
                        v343 = *(_DWORD *)(v338 + 84);
                        v344 = *(_DWORD *)(v340 + 84);
                        v342 = v343 <= v344;
                        if (v343 == v344)
                          break;
                      }
                      if (v342)
                        goto LABEL_427;
                    }
                    v345 = *v323;
                    v346 = *v324;
                    v347 = *v324 >= *v323 ? *v323 : *v324;
                    if (!v347)
                      break;
                    result = (size_t **)memcmp(v323 + 2, v324 + 2, v347);
                    if (!(_DWORD)result)
                      break;
                    if ((result & 0x80000000) == 0)
                      goto LABEL_427;
                  }
                }
                while (v345 < v346);
LABEL_427:
                *v335 = v323;
              }
              v376 = v322;
              v167 = v322 + 1;
              if (v322 + 1 == a2)
                return result;
            }
          }
          if ((v169 & 1) != 0)
            return result;
          v170 = 0;
          v171 = v376;
LABEL_226:
          v172 = v171;
          v171 = v167;
          v173 = *v172;
          v174 = v172[1];
          v175 = v174[1];
          v176 = *(_DWORD *)(v175 + 80);
          v177 = (*v172)[1];
          v178 = *(_DWORD *)(v177 + 80);
          v179 = v176 <= v178;
          if (v176 == v178)
          {
            v180 = *(_DWORD *)(v175 + 84);
            v181 = *(_DWORD *)(v177 + 84);
            v179 = v180 <= v181;
            v182 = v376;
            if (v180 == v181)
            {
              v183 = *v174;
              v184 = *v173;
              if (*v173 >= *v174)
                v185 = *v174;
              else
                v185 = *v173;
              if (v185 && (result = (size_t **)memcmp(v174 + 2, v173 + 2, v185), (_DWORD)result))
              {
                if ((result & 0x80000000) == 0)
                  goto LABEL_257;
              }
              else if (v183 >= v184)
              {
                goto LABEL_257;
              }
              goto LABEL_237;
            }
          }
          else
          {
            v182 = v376;
          }
          if (v179)
            goto LABEL_257;
LABEL_237:
          v172[1] = v173;
          v186 = v182;
          if (v172 == v182)
            goto LABEL_256;
          v187 = v170;
          while (1)
          {
            v188 = (size_t **)((char *)v182 + v187);
            v189 = v174[1];
            v190 = *(_DWORD *)(v189 + 80);
            v191 = *(size_t **)((char *)v182 + v187 - 8);
            v192 = v191[1];
            v193 = *(_DWORD *)(v192 + 80);
            v194 = v190 <= v193;
            if (v190 == v193
              && (v195 = *(_DWORD *)(v189 + 84), v196 = *(_DWORD *)(v192 + 84), v194 = v195 <= v196, v195 == v196))
            {
              v197 = *v174;
              v198 = *v191;
              if (*v191 >= *v174)
                v199 = *v174;
              else
                v199 = *v191;
              if (v199 && (result = (size_t **)memcmp(v174 + 2, v191 + 2, v199), (_DWORD)result))
              {
                if ((result & 0x80000000) == 0)
                  goto LABEL_255;
              }
              else if (v197 >= v198)
              {
                v186 = (size_t **)((char *)v376 + v187);
                goto LABEL_256;
              }
            }
            else if (v194)
            {
LABEL_255:
              v186 = v172;
LABEL_256:
              *v186 = v174;
LABEL_257:
              v167 = v171 + 1;
              v170 += 8;
              if (v171 + 1 == a2)
                return result;
              goto LABEL_226;
            }
            --v172;
            *v188 = v191;
            v187 -= 8;
            v182 = v376;
            if (!v187)
            {
              v186 = v376;
              goto LABEL_256;
            }
          }
        }
        if (!a3)
        {
          if (v376 == v5)
            return result;
          v200 = (unint64_t)(v8 - 2) >> 1;
          v201 = v200;
          while (1)
          {
            v202 = v201;
            if (v200 < v201)
              goto LABEL_330;
            v203 = (2 * v201) | 1;
            v204 = &v376[v203];
            if (2 * v201 + 2 < v8)
            {
              v205 = v204[1];
              v206 = *v204;
              v207 = (*v204)[1];
              v208 = *(_DWORD *)(v207 + 80);
              v209 = v205[1];
              v210 = *(_DWORD *)(v209 + 80);
              v211 = v208 <= v210;
              if (v208 == v210
                && (v212 = *(_DWORD *)(v207 + 84), v213 = *(_DWORD *)(v209 + 84), v211 = v212 <= v213, v212 == v213))
              {
                v214 = *v206;
                v215 = *v205;
                if (*v205 >= *v206)
                  v216 = *v206;
                else
                  v216 = *v205;
                if (v216
                  && (result = (size_t **)memcmp(v206 + 2, v205 + 2, v216),
                      v200 = (unint64_t)(v8 - 2) >> 1,
                      (_DWORD)result))
                {
                  v217 = ((int)result >> 31) | 1;
                }
                else
                {
                  if (v214 < v215)
                    v217 = -1;
                  else
                    v217 = 1;
                  if (v214 == v215)
                    v217 = 0;
                }
                v218 = v217 == -1;
              }
              else
              {
                v218 = !v211;
              }
              if (v218)
              {
                ++v204;
                v203 = 2 * v202 + 2;
              }
            }
            v219 = *v204;
            v220 = (*v204)[1];
            v221 = *(_DWORD *)(v220 + 80);
            v222 = v376[v202];
            v223 = v222[1];
            v224 = *(_DWORD *)(v223 + 80);
            v225 = v221 <= v224;
            if (v221 == v224
              && (v226 = *(_DWORD *)(v220 + 84), v227 = *(_DWORD *)(v223 + 84), v225 = v226 <= v227, v226 == v227))
            {
              v228 = *v219;
              v229 = *v222;
              if (*v222 >= *v219)
                v230 = *v219;
              else
                v230 = *v222;
              if (v230
                && (result = (size_t **)memcmp(v219 + 2, v222 + 2, v230),
                    v200 = (unint64_t)(v8 - 2) >> 1,
                    (_DWORD)result))
              {
                if ((result & 0x80000000) != 0)
                  goto LABEL_330;
              }
              else if (v228 < v229)
              {
                goto LABEL_330;
              }
            }
            else if (!v225)
            {
              goto LABEL_330;
            }
            v376[v202] = v219;
            if (v200 < v203)
              goto LABEL_329;
            while (1)
            {
              v231 = v204;
              v232 = 2 * v203;
              v203 = (2 * v203) | 1;
              v204 = &v376[v203];
              v233 = v232 + 2;
              if (v232 + 2 < v8)
              {
                v234 = v204[1];
                v235 = *v204;
                v236 = (*v204)[1];
                v237 = *(_DWORD *)(v236 + 80);
                v238 = v234[1];
                v239 = *(_DWORD *)(v238 + 80);
                v240 = v237 <= v239;
                if (v237 == v239
                  && (v241 = *(_DWORD *)(v236 + 84), v242 = *(_DWORD *)(v238 + 84), v240 = v241 <= v242, v241 == v242))
                {
                  v243 = *v235;
                  v244 = *v234;
                  if (*v234 >= *v235)
                    v245 = *v235;
                  else
                    v245 = *v234;
                  if (v245
                    && (result = (size_t **)memcmp(v235 + 2, v234 + 2, v245),
                        v200 = (unint64_t)(v8 - 2) >> 1,
                        (_DWORD)result))
                  {
                    v246 = ((int)result >> 31) | 1;
                  }
                  else
                  {
                    if (v243 < v244)
                      v246 = -1;
                    else
                      v246 = 1;
                    if (v243 == v244)
                      v246 = 0;
                  }
                  v247 = v246 == -1;
                }
                else
                {
                  v247 = !v240;
                }
                if (v247)
                {
                  ++v204;
                  v203 = v233;
                }
              }
              v248 = *v204;
              v249 = (*v204)[1];
              v250 = *(_DWORD *)(v249 + 80);
              v251 = v222[1];
              v252 = *(_DWORD *)(v251 + 80);
              v253 = v250 <= v252;
              if (v250 != v252
                || (v254 = *(_DWORD *)(v249 + 84), v255 = *(_DWORD *)(v251 + 84), v253 = v254 <= v255, v254 != v255))
              {
                if (!v253)
                  break;
                goto LABEL_325;
              }
              v256 = *v248;
              v257 = *v222;
              if (*v222 >= *v248)
                v258 = *v248;
              else
                v258 = *v222;
              if (v258)
              {
                result = (size_t **)memcmp(v248 + 2, v222 + 2, v258);
                v200 = (unint64_t)(v8 - 2) >> 1;
                if ((_DWORD)result)
                {
                  if ((result & 0x80000000) != 0)
                    break;
                  goto LABEL_325;
                }
              }
              if (v256 < v257)
                break;
LABEL_325:
              *v231 = v248;
              if (v200 < v203)
                goto LABEL_329;
            }
            v204 = v231;
LABEL_329:
            *v204 = v222;
LABEL_330:
            v201 = v202 - 1;
            if (!v202)
            {
              while (2)
              {
                v274 = 0;
                v275 = v376;
                v276 = *v376;
                do
                {
                  v277 = (uint64_t)&v275[v274 + 1];
                  v278 = (2 * v274) | 1;
                  v279 = 2 * v274 + 2;
                  if (v279 < v8)
                  {
                    v280 = (size_t *)v275[v274 + 2];
                    v281 = *(size_t **)v277;
                    v282 = *(_QWORD *)(*(_QWORD *)v277 + 8);
                    v283 = *(_DWORD *)(v282 + 80);
                    v284 = v280[1];
                    v285 = *(_DWORD *)(v284 + 80);
                    v286 = v283 <= v285;
                    if (v283 == v285
                      && (v287 = *(_DWORD *)(v282 + 84), v288 = *(_DWORD *)(v284 + 84),
                                                         v286 = v287 <= v288,
                                                         v287 == v288))
                    {
                      v289 = *v281;
                      v290 = *v280;
                      if (*v280 >= *v281)
                        v291 = *v281;
                      else
                        v291 = *v280;
                      if (v291 && (result = (size_t **)memcmp(v281 + 2, v280 + 2, v291), (_DWORD)result))
                      {
                        v292 = ((int)result >> 31) | 1;
                      }
                      else
                      {
                        if (v289 < v290)
                          v292 = -1;
                        else
                          v292 = 1;
                        if (v289 == v290)
                          v292 = 0;
                      }
                      v293 = v292 == -1;
                    }
                    else
                    {
                      v293 = !v286;
                    }
                    if (v293)
                    {
                      v277 += 8;
                      v278 = v279;
                    }
                  }
                  *v275 = *(_QWORD *)v277;
                  v275 = (_QWORD *)v277;
                  v274 = v278;
                }
                while (v278 <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
                v294 = a2 - 1;
                v168 = v277 == (_QWORD)--a2;
                if (v168)
                {
                  *(_QWORD *)v277 = v276;
                }
                else
                {
                  *(_QWORD *)v277 = *v294;
                  *v294 = v276;
                  v295 = v277 - (_QWORD)v376 + 8;
                  if (v295 >= 9)
                  {
                    v296 = ((unint64_t)v295 >> 3) - 2;
                    v260 = v296 >> 1;
                    v273 = &v376[v296 >> 1];
                    v297 = *v273;
                    v298 = (*v273)[1];
                    v299 = *(_DWORD *)(v298 + 80);
                    v300 = *(size_t **)v277;
                    v301 = *(_QWORD *)(*(_QWORD *)v277 + 8);
                    v302 = *(_DWORD *)(v301 + 80);
                    v303 = v299 <= v302;
                    if (v299 == v302
                      && (v304 = *(_DWORD *)(v298 + 84), v305 = *(_DWORD *)(v301 + 84),
                                                         v303 = v304 <= v305,
                                                         v304 == v305))
                    {
                      v306 = *v297;
                      v307 = *v300;
                      if (*v300 >= *v297)
                        v308 = *v297;
                      else
                        v308 = *v300;
                      if (v308 && (result = (size_t **)memcmp(v297 + 2, v300 + 2, v308), (_DWORD)result))
                      {
                        if ((result & 0x80000000) != 0)
                        {
LABEL_385:
                          *(_QWORD *)v277 = v297;
                          if (v296 >= 2)
                          {
                            while (1)
                            {
                              v259 = v260 - 1;
                              v260 = (v260 - 1) >> 1;
                              v261 = &v376[v260];
                              v262 = *v261;
                              v263 = (*v261)[1];
                              v264 = *(_DWORD *)(v263 + 80);
                              v265 = v300[1];
                              v266 = *(_DWORD *)(v265 + 80);
                              v267 = v264 <= v266;
                              if (v264 == v266
                                && (v268 = *(_DWORD *)(v263 + 84),
                                    v269 = *(_DWORD *)(v265 + 84),
                                    v267 = v268 <= v269,
                                    v268 == v269))
                              {
                                v270 = *v262;
                                v271 = *v300;
                                if (*v300 >= *v262)
                                  v272 = *v262;
                                else
                                  v272 = *v300;
                                if (v272 && (result = (size_t **)memcmp(v262 + 2, v300 + 2, v272), (_DWORD)result))
                                {
                                  if ((result & 0x80000000) == 0)
                                    break;
                                }
                                else if (v270 >= v271)
                                {
                                  break;
                                }
                              }
                              else if (v267)
                              {
                                break;
                              }
                              *v273 = v262;
                              v273 = &v376[v260];
                              if (v259 <= 1)
                                goto LABEL_387;
                            }
                          }
                          v261 = v273;
LABEL_387:
                          *v261 = v300;
                        }
                      }
                      else if (v306 < v307)
                      {
                        goto LABEL_385;
                      }
                    }
                    else if (!v303)
                    {
                      goto LABEL_385;
                    }
                  }
                }
                v27 = v8-- <= 2;
                if (v27)
                  return result;
                continue;
              }
            }
          }
        }
        v9 = (unint64_t)v8 >> 1;
        v10 = &v376[(unint64_t)v8 >> 1];
        if ((unint64_t)v7 < 0x401)
        {
          result = sub_1C4E51CC4(v10, v376, v374);
        }
        else
        {
          sub_1C4E51CC4(v376, v10, v374);
          sub_1C4E51CC4(v376 + 1, v10 - 1, a2 - 2);
          sub_1C4E51CC4(v376 + 2, &v376[v9 + 1], a2 - 3);
          result = sub_1C4E51CC4(v10 - 1, v10, &v376[v9 + 1]);
          v11 = *v376;
          *v376 = *v10;
          *v10 = v11;
        }
        i = v376;
        v12 = *v376;
        __s2 = a3 - 1;
        if ((a4 & 1) != 0)
        {
          v13 = v12[1];
          v14 = *(_DWORD *)(v13 + 80);
          goto LABEL_24;
        }
        v15 = *(v376 - 1);
        v16 = v15[1];
        v17 = *(_DWORD *)(v16 + 80);
        v13 = v12[1];
        v14 = *(_DWORD *)(v13 + 80);
        if (v17 != v14)
        {
          if (v17 > v14)
            goto LABEL_24;
          goto LABEL_108;
        }
        v18 = *(_DWORD *)(v16 + 84);
        v19 = *(_DWORD *)(v13 + 84);
        if (v18 != v19)
        {
          if (v18 > v19)
            goto LABEL_23;
LABEL_108:
          v82 = *v374;
          v83 = (*v374)[1];
          v84 = *(_DWORD *)(v83 + 80);
          v85 = v14 <= v84;
          if (v14 == v84 && (v86 = *(_DWORD *)(v13 + 84), v87 = *(_DWORD *)(v83 + 84), v85 = v86 <= v87, v86 == v87))
          {
            v88 = *v12;
            v89 = *v82;
            if (*v82 >= *v12)
              v90 = *v12;
            else
              v90 = *v82;
            if (v90 && (result = (size_t **)memcmp(v12 + 2, v82 + 2, v90), (_DWORD)result))
            {
              if ((result & 0x80000000) != 0)
                goto LABEL_118;
            }
            else if (v88 < v89)
            {
              goto LABEL_118;
            }
          }
          else if (!v85)
          {
            do
            {
              while (1)
              {
LABEL_118:
                while (1)
                {
                  v92 = i[1];
                  ++i;
                  v91 = v92;
                  v93 = v92[1];
                  v94 = *(_DWORD *)(v93 + 80);
                  v95 = v14 <= v94;
                  if (v14 == v94)
                  {
                    v96 = *(_DWORD *)(v13 + 84);
                    v97 = *(_DWORD *)(v93 + 84);
                    v95 = v96 <= v97;
                    if (v96 == v97)
                      break;
                  }
                  if (!v95)
                    goto LABEL_147;
                }
                v98 = *v12;
                v99 = *v91;
                v100 = *v91 >= *v12 ? *v12 : *v91;
                if (!v100)
                  break;
                result = (size_t **)memcmp(v12 + 2, v91 + 2, v100);
                if (!(_DWORD)result)
                  break;
                if ((result & 0x80000000) != 0)
                  goto LABEL_147;
              }
            }
            while (v98 >= v99);
            goto LABEL_147;
          }
          for (i = v376 + 1; i < a2; ++i)
          {
            v101 = *i;
            v102 = (*i)[1];
            v103 = *(_DWORD *)(v102 + 80);
            v104 = v14 <= v103;
            if (v14 == v103
              && (v105 = *(_DWORD *)(v13 + 84), v106 = *(_DWORD *)(v102 + 84), v104 = v105 <= v106, v105 == v106))
            {
              v107 = *v12;
              v108 = *v101;
              if (*v101 >= *v12)
                v109 = *v12;
              else
                v109 = *v101;
              if (v109 && (result = (size_t **)memcmp(v12 + 2, v101 + 2, v109), (_DWORD)result))
              {
                if ((result & 0x80000000) != 0)
                  break;
              }
              else if (v107 < v108)
              {
                break;
              }
            }
            else if (!v104)
            {
              break;
            }
          }
LABEL_147:
          v110 = a2;
          if (i < a2)
          {
            v110 = a2 - 1;
            while (1)
            {
              v111 = v14 <= v84;
              if (v14 == v84
                && (v112 = *(_DWORD *)(v13 + 84), v113 = *(_DWORD *)(v83 + 84), v111 = v112 <= v113, v112 == v113))
              {
                v114 = *v12;
                v115 = *v82;
                if (*v82 >= *v12)
                  v116 = *v12;
                else
                  v116 = *v82;
                if (v116 && (result = (size_t **)memcmp(v12 + 2, v82 + 2, v116), (_DWORD)result))
                {
                  if ((result & 0x80000000) == 0)
                    break;
                }
                else if (v114 >= v115)
                {
                  break;
                }
              }
              else if (v111)
              {
                break;
              }
              v117 = *--v110;
              v82 = v117;
              v83 = v117[1];
              v84 = *(_DWORD *)(v83 + 80);
            }
          }
          if (i >= v110)
            goto LABEL_191;
          v118 = *i;
          v119 = *v110;
          do
          {
            *i++ = v119;
            *v110 = v118;
            v120 = v12[1];
            v121 = *(_DWORD *)(v120 + 80);
            while (1)
            {
              v118 = *i;
              v122 = (*i)[1];
              v123 = *(_DWORD *)(v122 + 80);
              v124 = v121 <= v123;
              if (v121 != v123
                || (v125 = *(_DWORD *)(v120 + 84), v126 = *(_DWORD *)(v122 + 84), v124 = v125 <= v126, v125 != v126))
              {
                if (!v124)
                  goto LABEL_177;
                goto LABEL_175;
              }
              v127 = *v12;
              v128 = *v118;
              v129 = *v118 >= *v12 ? *v12 : *v118;
              if (!v129)
                break;
              result = (size_t **)memcmp(v12 + 2, v118 + 2, v129);
              if (!(_DWORD)result)
                break;
              if ((result & 0x80000000) != 0)
                goto LABEL_177;
LABEL_175:
              ++i;
            }
            if (v127 >= v128)
              goto LABEL_175;
            do
            {
              while (1)
              {
LABEL_177:
                while (1)
                {
                  v130 = *--v110;
                  v119 = v130;
                  v131 = v130[1];
                  v132 = *(_DWORD *)(v131 + 80);
                  v133 = v121 <= v132;
                  if (v121 == v132)
                  {
                    v134 = *(_DWORD *)(v120 + 84);
                    v135 = *(_DWORD *)(v131 + 84);
                    v133 = v134 <= v135;
                    if (v134 == v135)
                      break;
                  }
                  if (v133)
                    goto LABEL_190;
                }
                v136 = *v12;
                v137 = *v119;
                v138 = *v119 >= *v12 ? *v12 : *v119;
                if (!v138)
                  break;
                result = (size_t **)memcmp(v12 + 2, v119 + 2, v138);
                if (!(_DWORD)result)
                  break;
                if ((result & 0x80000000) == 0)
                  goto LABEL_190;
              }
            }
            while (v136 < v137);
LABEL_190:
            ;
          }
          while (i < v110);
LABEL_191:
          v139 = i - 1;
          if (i - 1 != v376)
            *v376 = *v139;
          a4 = 0;
          *v139 = v12;
          v5 = a2;
          a3 = __s2;
          continue;
        }
        v20 = *v15;
        v21 = *v12;
        if (*v12 >= *v15)
          v22 = *v15;
        else
          v22 = *v12;
        if (v22)
        {
          result = (size_t **)memcmp(v15 + 2, v12 + 2, v22);
          if ((_DWORD)result)
          {
            if ((result & 0x80000000) != 0)
              goto LABEL_23;
            goto LABEL_108;
          }
        }
        if (v20 >= v21)
          goto LABEL_108;
LABEL_23:
        v14 = v17;
LABEL_24:
        v23 = 1;
        while (2)
        {
          v24 = v376[v23];
          v25 = v24[1];
          v26 = *(_DWORD *)(v25 + 80);
          v27 = v26 <= v14;
          if (v26 != v14 || (v28 = *(_DWORD *)(v25 + 84), v29 = *(_DWORD *)(v13 + 84), v27 = v28 <= v29, v28 != v29))
          {
            if (v27)
              break;
            goto LABEL_35;
          }
          v30 = *v24;
          v31 = *v12;
          if (*v12 >= *v24)
            v32 = *v24;
          else
            v32 = *v12;
          if (v32)
          {
            v33 = memcmp(v24 + 2, v12 + 2, v32);
            if (v33)
            {
              if ((v33 & 0x80000000) == 0)
                break;
              goto LABEL_35;
            }
          }
          if (v30 < v31)
          {
LABEL_35:
            ++v23;
            continue;
          }
          break;
        }
        i = &v376[v23];
        j = a2 - 1;
        if (v23 != 1)
        {
          while (1)
          {
            v35 = *j;
            v36 = (*j)[1];
            v37 = *(_DWORD *)(v36 + 80);
            v38 = v37 <= v14;
            if (v37 == v14 && (v39 = *(_DWORD *)(v36 + 84), v40 = *(_DWORD *)(v13 + 84), v38 = v39 <= v40, v39 == v40))
            {
              v41 = j;
              v42 = *v35;
              v43 = *v12;
              if (*v12 >= *v35)
                v44 = *v35;
              else
                v44 = *v12;
              if (v44 && (v45 = memcmp(v35 + 2, v12 + 2, v44)) != 0)
              {
                j = v41;
                if (v45 < 0)
                  goto LABEL_73;
              }
              else
              {
                v46 = v42 >= v43;
                j = v41;
                if (!v46)
                  goto LABEL_73;
              }
            }
            else if (!v38)
            {
              goto LABEL_73;
            }
            --j;
          }
        }
        j = a2;
        if (i < a2)
        {
          for (j = a2 - 1; ; --j)
          {
            v47 = *j;
            v48 = (*j)[1];
            v49 = *(_DWORD *)(v48 + 80);
            if (v49 == v14)
            {
              v50 = *(_DWORD *)(v48 + 84);
              v51 = *(_DWORD *)(v13 + 84);
              if (v50 == v51)
              {
                v52 = *v47;
                v53 = *v12;
                if (*v12 >= *v47)
                  v54 = *v47;
                else
                  v54 = *v12;
                if (v54 && (v55 = memcmp(v47 + 2, v12 + 2, v54)) != 0)
                {
                  v56 = v55 >= 0;
                }
                else
                {
                  if (v52 < v53)
                    break;
                  v56 = 1;
                }
                if (i >= j || !v56)
                  break;
              }
              else if (i >= j || v50 > v51)
              {
                break;
              }
            }
            else if (i >= j || v49 > v14)
            {
              break;
            }
          }
        }
LABEL_73:
        v371 = (unint64_t)j;
        __s1 = i;
        if (i >= j)
          goto LABEL_101;
        v57 = *j;
        v58 = j;
        while (2)
        {
          *i++ = v57;
          *v58 = v24;
          v59 = v12[1];
          v60 = *(_DWORD *)(v59 + 80);
          while (2)
          {
            v24 = *i;
            v61 = (*i)[1];
            v62 = *(_DWORD *)(v61 + 80);
            v63 = v62 <= v60;
            if (v62 == v60)
            {
              v64 = *(_DWORD *)(v61 + 84);
              v65 = *(_DWORD *)(v59 + 84);
              v63 = v64 <= v65;
              if (v64 == v65)
              {
                v66 = *v24;
                v67 = *v12;
                if (*v12 >= *v24)
                  v68 = *v24;
                else
                  v68 = *v12;
                if (v68 && (v69 = memcmp(v24 + 2, v12 + 2, v68)) != 0)
                {
                  if ((v69 & 0x80000000) == 0)
                    goto LABEL_88;
                }
                else if (v66 >= v67)
                {
                  goto LABEL_88;
                }
                goto LABEL_86;
              }
            }
            if (!v63)
            {
LABEL_86:
              ++i;
              continue;
            }
            break;
          }
          do
          {
            while (1)
            {
LABEL_88:
              while (1)
              {
                v70 = *--v58;
                v57 = v70;
                v71 = v70[1];
                v72 = *(_DWORD *)(v71 + 80);
                v73 = v72 <= v60;
                if (v72 == v60)
                {
                  v74 = *(_DWORD *)(v71 + 84);
                  v75 = *(_DWORD *)(v59 + 84);
                  v73 = v74 <= v75;
                  if (v74 == v75)
                    break;
                }
                if (!v73)
                  goto LABEL_100;
              }
              v76 = *v57;
              v77 = *v12;
              v78 = *v12 >= *v57 ? *v57 : *v12;
              if (!v78)
                break;
              v79 = memcmp(v57 + 2, v12 + 2, v78);
              if (!v79)
                break;
              if (v79 < 0)
                goto LABEL_100;
            }
          }
          while (v76 >= v77);
LABEL_100:
          if (i < v58)
            continue;
          break;
        }
LABEL_101:
        v80 = i - 1;
        if (i - 1 != v376)
          *v376 = *v80;
        *v80 = v12;
        v5 = a2;
        a3 = __s2;
        if ((unint64_t)__s1 < v371)
        {
LABEL_106:
          result = (size_t **)sub_1C4E50AD4(v376, i - 1, __s2, a4 & 1);
          a4 = 0;
          continue;
        }
        v81 = sub_1C4E51F2C(v376, i - 1);
        result = (size_t **)sub_1C4E51F2C(i, a2);
        if (!(_DWORD)result)
        {
          if (v81)
            continue;
          goto LABEL_106;
        }
        a2 = i - 1;
        if (!v81)
          goto LABEL_2;
        return result;
    }
  }
}

size_t **sub_1C4E51CC4(size_t **result, size_t **a2, size_t **a3)
{
  size_t **v5;
  size_t *v6;
  size_t v7;
  int v8;
  size_t *v9;
  size_t v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;
  size_t *v18;
  size_t v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t *v27;
  size_t v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  size_t v33;
  size_t v34;
  size_t v35;
  size_t *v36;
  size_t v37;
  int v38;
  size_t *v39;
  size_t v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  size_t v45;
  size_t v46;
  size_t v47;
  size_t *v48;
  size_t v49;
  int v50;
  size_t v51;
  int v52;
  BOOL v53;
  int v54;
  int v55;
  size_t v56;
  size_t v57;
  size_t v58;

  v5 = result;
  v6 = *a2;
  v7 = (*a2)[1];
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *result;
  v10 = (*result)[1];
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v8 <= v11;
  if (v8 != v11 || (v13 = *(_DWORD *)(v7 + 84), v14 = *(_DWORD *)(v10 + 84), v12 = v13 <= v14, v13 != v14))
  {
    if (v12)
      goto LABEL_23;
LABEL_11:
    v18 = *a3;
    v19 = (*a3)[1];
    v20 = *(_DWORD *)(v19 + 80);
    v21 = v20 <= v8;
    if (v20 == v8 && (v22 = *(_DWORD *)(v19 + 84), v23 = *(_DWORD *)(v7 + 84), v21 = v22 <= v23, v22 == v23))
    {
      v24 = *v18;
      v25 = *v6;
      if (*v6 >= *v18)
        v26 = *v18;
      else
        v26 = *v6;
      if (v26)
      {
        result = (size_t **)memcmp(v18 + 2, v6 + 2, v26);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) != 0)
            goto LABEL_21;
LABEL_47:
          *v5 = v6;
          *a2 = v9;
          v48 = *a3;
          v49 = (*a3)[1];
          v50 = *(_DWORD *)(v49 + 80);
          v51 = v9[1];
          v52 = *(_DWORD *)(v51 + 80);
          v53 = v50 <= v52;
          if (v50 == v52 && (v54 = *(_DWORD *)(v49 + 84), v55 = *(_DWORD *)(v51 + 84), v53 = v54 <= v55, v54 == v55))
          {
            v56 = *v48;
            v57 = *v9;
            if (*v9 >= *v48)
              v58 = *v48;
            else
              v58 = *v9;
            if (v58 && (result = (size_t **)memcmp(v48 + 2, v9 + 2, v58), (_DWORD)result))
            {
              if ((result & 0x80000000) == 0)
                return result;
            }
            else if (v56 >= v57)
            {
              return result;
            }
          }
          else if (v53)
          {
            return result;
          }
          *a2 = v48;
          goto LABEL_58;
        }
      }
      if (v24 >= v25)
        goto LABEL_47;
    }
    else if (v21)
    {
      goto LABEL_47;
    }
LABEL_21:
    *v5 = v18;
LABEL_58:
    *a3 = v9;
    return result;
  }
  v15 = *v6;
  v16 = *v9;
  if (*v9 >= *v6)
    v17 = *v6;
  else
    v17 = *v9;
  if (!v17 || (result = (size_t **)memcmp(v6 + 2, v9 + 2, v17), !(_DWORD)result))
  {
    if (v15 >= v16)
      goto LABEL_23;
    goto LABEL_11;
  }
  if ((result & 0x80000000) != 0)
    goto LABEL_11;
LABEL_23:
  v27 = *a3;
  v28 = (*a3)[1];
  v29 = *(_DWORD *)(v28 + 80);
  v30 = v29 <= v8;
  if (v29 == v8 && (v31 = *(_DWORD *)(v28 + 84), v32 = *(_DWORD *)(v7 + 84), v30 = v31 <= v32, v31 == v32))
  {
    v33 = *v27;
    v34 = *v6;
    if (*v6 >= *v27)
      v35 = *v27;
    else
      v35 = *v6;
    if (v35 && (result = (size_t **)memcmp(v27 + 2, v6 + 2, v35), (_DWORD)result))
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v33 >= v34)
    {
      return result;
    }
  }
  else if (v30)
  {
    return result;
  }
  *a2 = v27;
  *a3 = v6;
  v36 = *a2;
  v37 = (*a2)[1];
  v38 = *(_DWORD *)(v37 + 80);
  v39 = *v5;
  v40 = (*v5)[1];
  v41 = *(_DWORD *)(v40 + 80);
  v42 = v38 <= v41;
  if (v38 != v41 || (v43 = *(_DWORD *)(v37 + 84), v44 = *(_DWORD *)(v40 + 84), v42 = v43 <= v44, v43 != v44))
  {
    if (v42)
      return result;
LABEL_43:
    *v5 = v36;
    *a2 = v39;
    return result;
  }
  v45 = *v36;
  v46 = *v39;
  if (*v39 >= *v36)
    v47 = *v36;
  else
    v47 = *v39;
  if (v47)
  {
    result = (size_t **)memcmp(v36 + 2, v39 + 2, v47);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
      goto LABEL_43;
    }
  }
  if (v45 < v46)
    goto LABEL_43;
  return result;
}

BOOL sub_1C4E51F2C(size_t **a1, size_t **a2)
{
  size_t **v2;
  size_t **v3;
  uint64_t v4;
  _BOOL8 result;
  size_t *v6;
  size_t v7;
  int v8;
  size_t *v9;
  size_t v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  size_t v15;
  size_t v16;
  size_t v17;
  int v18;
  size_t **v19;
  size_t **v20;
  size_t **v21;
  uint64_t v22;
  int v23;
  size_t *v24;
  size_t v25;
  int v26;
  size_t *v27;
  size_t v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  size_t v33;
  size_t v34;
  size_t v35;
  int v36;
  size_t **v37;
  uint64_t v38;
  char *v39;
  size_t v40;
  int v41;
  size_t *v42;
  size_t v43;
  int v44;
  BOOL v45;
  int v46;
  int v47;
  size_t v48;
  size_t v49;
  size_t v50;
  int v51;
  size_t **v52;
  size_t **v53;
  size_t **v54;
  size_t **v55;
  size_t *v56;
  size_t v57;
  int v58;
  size_t *v59;
  size_t v60;
  int v61;
  BOOL v62;
  int v63;
  int v64;
  size_t v65;
  size_t v66;
  size_t v67;
  int v68;
  size_t *v69;
  size_t v70;
  int v71;
  size_t *v72;
  size_t v73;
  int v74;
  BOOL v75;
  int v76;
  int v77;
  size_t v78;
  size_t v79;
  size_t v80;
  int v81;
  size_t v82;
  int v83;
  size_t *v84;
  size_t v85;
  int v86;
  BOOL v87;
  int v88;
  int v89;
  size_t v90;
  size_t v91;
  size_t v92;
  int v93;
  size_t v94;
  int v95;
  size_t *v96;
  size_t v97;
  int v98;
  BOOL v99;
  int v100;
  int v101;
  size_t v102;
  size_t v103;
  size_t v104;
  int v105;
  size_t **v106;

  v2 = a2;
  v3 = a1;
  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = v6[1];
      v8 = *(_DWORD *)(v7 + 80);
      v9 = *v3;
      v10 = (*v3)[1];
      v11 = *(_DWORD *)(v10 + 80);
      v12 = v8 <= v11;
      if (v8 == v11 && (v13 = *(_DWORD *)(v7 + 84), v14 = *(_DWORD *)(v10 + 84), v12 = v13 <= v14, v13 == v14))
      {
        v15 = *v6;
        v16 = *v9;
        if (*v9 >= *v6)
          v17 = *v6;
        else
          v17 = *v9;
        if (v17)
        {
          v18 = memcmp(v6 + 2, v9 + 2, v17);
          v3 = a1;
          if (v18)
          {
            if ((v18 & 0x80000000) == 0)
              return 1;
            goto LABEL_58;
          }
        }
        if (v15 >= v16)
          return 1;
      }
      else if (v12)
      {
        return result;
      }
LABEL_58:
      *v3 = v6;
      *(v2 - 1) = v9;
      return 1;
    case 3:
      sub_1C4E51CC4(v3, v3 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C4E523DC(v3, v3 + 1, v3 + 2, a2 - 1);
      return 1;
    case 5:
      v52 = v3 + 1;
      v53 = v3 + 2;
      v54 = v3 + 3;
      sub_1C4E523DC(v3, v3 + 1, v3 + 2, v3 + 3);
      v55 = a1;
      v56 = *(v2 - 1);
      v57 = v56[1];
      v58 = *(_DWORD *)(v57 + 80);
      v59 = a1[3];
      v60 = v59[1];
      v61 = *(_DWORD *)(v60 + 80);
      v62 = v58 <= v61;
      if (v58 == v61 && (v63 = *(_DWORD *)(v57 + 84), v64 = *(_DWORD *)(v60 + 84), v62 = v63 <= v64, v63 == v64))
      {
        v65 = *v56;
        v66 = *v59;
        if (*v59 >= *v56)
          v67 = *v56;
        else
          v67 = *v59;
        if (v67 && (v68 = memcmp(v56 + 2, v59 + 2, v67), v55 = a1, v68))
        {
          if ((v68 & 0x80000000) == 0)
            return 1;
        }
        else if (v65 >= v66)
        {
          return 1;
        }
      }
      else if (v62)
      {
        return 1;
      }
      *v54 = v56;
      *(v2 - 1) = v59;
      v69 = *v54;
      v70 = (*v54)[1];
      v71 = *(_DWORD *)(v70 + 80);
      v72 = *v53;
      v73 = (*v53)[1];
      v74 = *(_DWORD *)(v73 + 80);
      v75 = v71 <= v74;
      if (v71 == v74 && (v76 = *(_DWORD *)(v70 + 84), v77 = *(_DWORD *)(v73 + 84), v75 = v76 <= v77, v76 == v77))
      {
        v78 = *v69;
        v79 = *v72;
        if (*v72 >= *v69)
          v80 = *v69;
        else
          v80 = *v72;
        if (v80 && (v81 = memcmp(v69 + 2, v72 + 2, v80), v55 = a1, v81))
        {
          if ((v81 & 0x80000000) == 0)
            return 1;
        }
        else if (v78 >= v79)
        {
          return 1;
        }
      }
      else if (v75)
      {
        return 1;
      }
      *v53 = v69;
      *v54 = v72;
      v82 = v69[1];
      v83 = *(_DWORD *)(v82 + 80);
      v84 = *v52;
      v85 = v84[1];
      v86 = *(_DWORD *)(v85 + 80);
      v87 = v83 <= v86;
      if (v83 != v86 || (v88 = *(_DWORD *)(v82 + 84), v89 = *(_DWORD *)(v85 + 84), v87 = v88 <= v89, v88 != v89))
      {
        if (v87)
          return 1;
LABEL_81:
        v55[1] = v69;
        v55[2] = v84;
        v94 = v69[1];
        v95 = *(_DWORD *)(v94 + 80);
        v96 = *v55;
        v97 = (*v55)[1];
        v98 = *(_DWORD *)(v97 + 80);
        v99 = v95 <= v98;
        if (v95 == v98
          && (v100 = *(_DWORD *)(v94 + 84), v101 = *(_DWORD *)(v97 + 84), v99 = v100 <= v101, v100 == v101))
        {
          v102 = *v69;
          v103 = *v96;
          if (*v96 >= *v69)
            v104 = *v69;
          else
            v104 = *v96;
          if (v104 && (v105 = memcmp(v69 + 2, v96 + 2, v104), v55 = a1, v105))
          {
            if ((v105 & 0x80000000) == 0)
              return 1;
          }
          else if (v102 >= v103)
          {
            return 1;
          }
        }
        else if (v99)
        {
          return 1;
        }
        *v55 = v69;
        v55[1] = v96;
        return 1;
      }
      v90 = *v69;
      v91 = *v84;
      if (*v84 >= *v69)
        v92 = *v69;
      else
        v92 = *v84;
      if (v92)
      {
        v93 = memcmp(v69 + 2, v84 + 2, v92);
        v55 = a1;
        if (v93)
        {
          if ((v93 & 0x80000000) == 0)
            return 1;
          goto LABEL_81;
        }
      }
      if (v90 < v91)
        goto LABEL_81;
      return 1;
    default:
      v19 = v3 + 2;
      sub_1C4E51CC4(v3, v3 + 1, v3 + 2);
      v20 = a1;
      v21 = a1 + 3;
      if (a1 + 3 == v2)
        return 1;
      v22 = 0;
      v23 = 0;
      v106 = v2;
      while (2)
      {
        v24 = *v21;
        v25 = (*v21)[1];
        v26 = *(_DWORD *)(v25 + 80);
        v27 = *v19;
        v28 = (*v19)[1];
        v29 = *(_DWORD *)(v28 + 80);
        v30 = v26 <= v29;
        if (v26 == v29 && (v31 = *(_DWORD *)(v25 + 84), v32 = *(_DWORD *)(v28 + 84), v30 = v31 <= v32, v31 == v32))
        {
          v33 = *v24;
          v34 = *v27;
          if (*v27 >= *v24)
            v35 = *v24;
          else
            v35 = *v27;
          if (v35 && (v36 = memcmp(v24 + 2, v27 + 2, v35), v20 = a1, v36))
          {
            if ((v36 & 0x80000000) == 0)
              goto LABEL_44;
          }
          else if (v33 >= v34)
          {
            goto LABEL_44;
          }
        }
        else if (v30)
        {
          goto LABEL_44;
        }
        *v21 = v27;
        v37 = v20;
        if (v19 == v20)
          goto LABEL_43;
        v38 = v22;
        while (2)
        {
          v39 = (char *)v20 + v38;
          v40 = v24[1];
          v41 = *(_DWORD *)(v40 + 80);
          v42 = *(size_t **)((char *)v20 + v38 + 8);
          v43 = v42[1];
          v44 = *(_DWORD *)(v43 + 80);
          v45 = v41 <= v44;
          if (v41 == v44)
          {
            v46 = *(_DWORD *)(v40 + 84);
            v47 = *(_DWORD *)(v43 + 84);
            v45 = v46 <= v47;
            if (v46 == v47)
            {
              v48 = *v24;
              v49 = *v42;
              if (*v42 >= *v24)
                v50 = *v24;
              else
                v50 = *v42;
              if (v50 && (v51 = memcmp(v24 + 2, v42 + 2, v50), v20 = a1, v51))
              {
                if ((v51 & 0x80000000) == 0)
                  break;
              }
              else if (v48 >= v49)
              {
                v37 = (size_t **)((char *)v20 + v38 + 16);
                goto LABEL_42;
              }
              goto LABEL_35;
            }
          }
          if (!v45)
          {
LABEL_35:
            --v19;
            *((_QWORD *)v39 + 2) = v42;
            v38 -= 8;
            if (v38 == -16)
            {
              v37 = v20;
              goto LABEL_42;
            }
            continue;
          }
          break;
        }
        v37 = v19;
LABEL_42:
        v2 = v106;
LABEL_43:
        *v37 = v24;
        if (++v23 != 8)
        {
LABEL_44:
          v19 = v21;
          v22 += 8;
          if (++v21 == v2)
            return 1;
          continue;
        }
        return v21 + 1 == v2;
      }
  }
}

size_t **sub_1C4E523DC(size_t **a1, size_t **a2, size_t **a3, size_t **a4)
{
  size_t **result;
  size_t *v9;
  size_t v10;
  int v11;
  size_t *v12;
  size_t v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t *v21;
  size_t v22;
  int v23;
  size_t *v24;
  size_t v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  size_t v30;
  size_t v31;
  size_t v32;
  size_t *v33;
  size_t v34;
  int v35;
  size_t *v36;
  size_t v37;
  int v38;
  BOOL v39;
  int v40;
  int v41;
  size_t v42;
  size_t v43;
  size_t v44;

  result = sub_1C4E51CC4(a1, a2, a3);
  v9 = *a4;
  v10 = (*a4)[1];
  v11 = *(_DWORD *)(v10 + 80);
  v12 = *a3;
  v13 = (*a3)[1];
  v14 = *(_DWORD *)(v13 + 80);
  v15 = v11 <= v14;
  if (v11 == v14 && (v16 = *(_DWORD *)(v10 + 84), v17 = *(_DWORD *)(v13 + 84), v15 = v16 <= v17, v16 == v17))
  {
    v18 = *v9;
    v19 = *v12;
    if (*v12 >= *v9)
      v20 = *v9;
    else
      v20 = *v12;
    if (v20 && (result = (size_t **)memcmp(v9 + 2, v12 + 2, v20), (_DWORD)result))
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v18 >= v19)
    {
      return result;
    }
  }
  else if (v15)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v12;
  v21 = *a3;
  v22 = (*a3)[1];
  v23 = *(_DWORD *)(v22 + 80);
  v24 = *a2;
  v25 = (*a2)[1];
  v26 = *(_DWORD *)(v25 + 80);
  v27 = v23 <= v26;
  if (v23 == v26 && (v28 = *(_DWORD *)(v22 + 84), v29 = *(_DWORD *)(v25 + 84), v27 = v28 <= v29, v28 == v29))
  {
    v30 = *v21;
    v31 = *v24;
    if (*v24 >= *v21)
      v32 = *v21;
    else
      v32 = *v24;
    if (v32 && (result = (size_t **)memcmp(v21 + 2, v24 + 2, v32), (_DWORD)result))
    {
      if ((result & 0x80000000) == 0)
        return result;
    }
    else if (v30 >= v31)
    {
      return result;
    }
  }
  else if (v27)
  {
    return result;
  }
  *a2 = v21;
  *a3 = v24;
  v33 = *a2;
  v34 = (*a2)[1];
  v35 = *(_DWORD *)(v34 + 80);
  v36 = *a1;
  v37 = (*a1)[1];
  v38 = *(_DWORD *)(v37 + 80);
  v39 = v35 <= v38;
  if (v35 != v38 || (v40 = *(_DWORD *)(v34 + 84), v41 = *(_DWORD *)(v37 + 84), v39 = v40 <= v41, v40 != v41))
  {
    if (v39)
      return result;
    goto LABEL_31;
  }
  v42 = *v33;
  v43 = *v36;
  if (*v36 >= *v33)
    v44 = *v33;
  else
    v44 = *v36;
  if (v44)
  {
    result = (size_t **)memcmp(v33 + 2, v36 + 2, v44);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        return result;
      goto LABEL_31;
    }
  }
  if (v42 < v43)
  {
LABEL_31:
    *a1 = v33;
    *a2 = v36;
  }
  return result;
}

uint64_t sub_1C4E5257C()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;
  void *v5[2];
  _QWORD v6[2];
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5[0] = v6;
  v6[0] = "basic";
  v6[1] = 5;
  v7 = 1;
  v8 = "basic statistics";
  v9 = 16;
  v10 = "verbose";
  v11 = 7;
  v12 = 2;
  v13 = "printing of statistics for each inlined function";
  v14 = 48;
  v5[1] = (void *)0x400000002;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable inliner stats for imported functions";
  v1.n128_u64[1] = 43;
  sub_1C6198D24(&v4, (uint64_t *)v5, &v2, &v1);
  if (v5[0] != v6)
    free(v5[0]);
  return __cxa_atexit((void (*)(void *))sub_1C619883C, &InlinerFunctionImportStats, &dword_1C475E000);
}

llvm::ICallPromotionAnalysis *llvm::ICallPromotionAnalysis::ICallPromotionAnalysis(llvm::ICallPromotionAnalysis *this)
{
  size_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)this = 0;
  v2 = 16 * dword_1ED82D900;
  v3 = (void *)operator new[]();
  bzero(v3, v2);
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = v3;
  if (v4)
    MEMORY[0x1CAA32F9C](v4, 0x1000C80451B5BE8);
  return this;
}

BOOL llvm::ICallPromotionAnalysis::isPromotionProfitable(llvm::ICallPromotionAnalysis *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 100 * a2 >= (unint64_t)dword_1ED82D780 * a4
      && 100 * a2 >= (unint64_t)dword_1ED82D840 * a3;
}

uint64_t llvm::ICallPromotionAnalysis::getProfitablePromotionCandidates(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  if (a3 >= dword_1ED82D900)
    result = dword_1ED82D900;
  else
    result = a3;
  if ((_DWORD)result)
  {
    v6 = 0;
    v7 = dword_1ED82D840 * a4;
    v8 = (uint64_t *)(*a1 + 8);
    while (1)
    {
      v10 = *v8;
      v8 += 2;
      v9 = v10;
      v11 = 100 * v10;
      if (100 * v10 < a4 * (unint64_t)dword_1ED82D780 || v11 < v7)
        break;
      a4 -= v9;
      if (result == ++v6)
        return result;
    }
    return v6;
  }
  return result;
}

uint64_t llvm::ICallPromotionAnalysis::getPromotionCandidatesForInstruction(llvm::ICallPromotionAnalysis *this, const llvm::Instruction *a2, unsigned int *a3, unint64_t *a4, unsigned int *a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if ((llvm::getValueProfDataFromInst((uint64_t)a2, 0, dword_1ED82D900, *(_QWORD *)this, a3, a4, 0) & 1) != 0)
  {
    LODWORD(v9) = *a3;
    result = *(_QWORD *)this;
    if (*a3 >= dword_1ED82D900)
      v9 = dword_1ED82D900;
    else
      v9 = v9;
    if ((_DWORD)v9)
    {
      v11 = 0;
      v12 = *a4;
      v13 = (uint64_t *)(result + 8);
      while (1)
      {
        v15 = *v13;
        v13 += 2;
        v14 = v15;
        v16 = 100 * v15;
        if (100 * v15 < v12 * (unint64_t)dword_1ED82D780
          || v16 < *a4 * dword_1ED82D840)
        {
          break;
        }
        v12 -= v14;
        if (v9 == ++v11)
          goto LABEL_15;
      }
      LODWORD(v9) = v11;
    }
LABEL_15:
    *a5 = v9;
  }
  else
  {
    result = 0;
    *a5 = 0;
  }
  return result;
}

uint64_t sub_1C4E52894()
{
  __n128 v1;
  int v2;
  int v3;
  int v4;
  int *v5;

  v5 = &v4;
  v3 = 1;
  v4 = 30;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"The percentage threshold against remaining unpromoted indirect call count for the promotion";
  v1.n128_u64[1] = 91;
  sub_1C61990A0(&v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED82D700, &dword_1C475E000);
  v3 = 1;
  v4 = 5;
  v5 = &v4;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"The percentage threshold against total count for the promotion";
  v1.n128_u64[1] = 62;
  sub_1C61991E4((llvm::cl::Option *)&unk_1ED82D7C0, "icp-total-percent-threshold", &v5, &v3, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82D7C0, &dword_1C475E000);
  v3 = 1;
  v4 = 3;
  v5 = &v4;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Max number of promotions for a single indirect call callsite";
  v1.n128_u64[1] = 60;
  sub_1C6199334(&v5, &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED82D880, &dword_1C475E000);
}

uint64_t llvm::getStringFnAttrAsInt(uint64_t a1, _QWORD *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  int i;
  int v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
  {
    if (*(_DWORD *)(v6 + 8))
    {
      v7 = *(_QWORD *)(v6 + 40);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 + 40);
        if (v8)
        {
          v9 = *(_QWORD *)(v7 + 24);
          v10 = sub_1C5E3DF4C(a2, (uint64_t)a2 + a3);
          v12 = v8 - 1;
          for (i = 1; ; ++i)
          {
            v14 = v10 & v12;
            v15 = v9 + 24 * (v10 & v12);
            v16 = *(const void **)v15;
            if (*(_QWORD *)v15 == -1)
            {
              if (a2 == (_QWORD *)-1)
                goto LABEL_16;
            }
            else if (v16 == (const void *)-2)
            {
              if (a2 == (_QWORD *)-2)
                goto LABEL_16;
            }
            else if (a3 == *(_QWORD *)(v15 + 8) && (!a3 || !memcmp(a2, *(const void **)v15, a3)))
            {
LABEL_16:
              v17 = *(_QWORD *)(v15 + 16);
              if (!v17)
                break;
LABEL_18:
              v18 = *(unsigned int *)(v17 + 16);
              v19 = v17 + *(unsigned int *)(v17 + 12) + 25;
              goto LABEL_19;
            }
            if (v16 == (const void *)-1)
              break;
            v10 = i + v14;
          }
        }
      }
    }
  }
  v17 = llvm::CallBase::getFnAttrOnCalledFunction<llvm::StringRef>(a1, a2, a3);
  if (v17)
    goto LABEL_18;
  v19 = 0;
  v18 = 0;
LABEL_19:
  v23 = 0;
  v24 = v19;
  v25 = v18;
  llvm::consumeSignedInteger((llvm *)&v24, (llvm::StringRef *)0xA, &v23, v11);
  v21 = v20;
  result = 0;
  if ((v21 & 1) == 0 && !v25)
  {
    if (v23 == (int)v23)
      return v23 | 0x100000000;
    else
      return 0;
  }
  return result;
}

llvm::raw_ostream *sub_1C4E52B28(llvm *a1)
{
  llvm *v2;

  v2 = llvm::dbgs(a1);
  return sub_1C4E52B50((uint64_t)a1, v2);
}

llvm::raw_ostream *sub_1C4E52B50(uint64_t a1, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v2;
  void *v4;
  llvm::raw_ostream *v5;
  _BYTE *v6;
  void *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  void *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  void *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  void *v16;
  llvm::raw_ostream *v17;
  _BYTE *v18;
  void *v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  void *v22;
  llvm::raw_ostream *v23;
  _BYTE *v24;
  void *v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  void *v28;
  llvm::raw_ostream *v29;
  _BYTE *v30;
  void *v31;
  llvm::raw_ostream *v32;
  unint64_t v33;
  llvm::raw_ostream *v34;
  int v35;
  _BYTE *v36;
  void *v37;
  llvm::raw_ostream *v38;
  _BYTE *v39;
  uint64_t v40;
  llvm::raw_ostream *v41;
  unint64_t v42;
  llvm::raw_ostream *v43;
  int v44;
  _BYTE *v45;
  uint64_t v46;
  unint64_t v47;
  llvm::raw_ostream *v48;
  int v49;
  llvm::raw_ostream *result;
  _BYTE *v51;

  v2 = this;
  if (byte_1ED7F1970)
    llvm::Function::print(*(llvm::Function **)(a1 + 56), this, (llvm::AssemblyAnnotationWriter *)(a1 + 752), 0, 0);
  v4 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v4 > 0x16uLL)
  {
    qmemcpy(v4, "      NumConstantArgs: ", 23);
    *((_QWORD *)v2 + 4) += 23;
    v5 = v2;
  }
  else
  {
    v5 = llvm::raw_ostream::write(v2, "      NumConstantArgs: ", 0x17uLL);
  }
  sub_1C5E21910(v5, *(unsigned int *)(a1 + 568), 0, 0, 0);
  v6 = (_BYTE *)*((_QWORD *)v5 + 4);
  if (*((_BYTE **)v5 + 3) == v6)
  {
    llvm::raw_ostream::write(v5, "\n", 1uLL);
  }
  else
  {
    *v6 = 10;
    ++*((_QWORD *)v5 + 4);
  }
  v7 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v7 > 0x1FuLL)
  {
    qmemcpy(v7, "      NumConstantOffsetPtrArgs: ", 32);
    *((_QWORD *)v2 + 4) += 32;
    v8 = v2;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v2, "      NumConstantOffsetPtrArgs: ", 0x20uLL);
  }
  sub_1C5E21910(v8, *(unsigned int *)(a1 + 572), 0, 0, 0);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if (*((_BYTE **)v8 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, "\n", 1uLL);
  }
  else
  {
    *v9 = 10;
    ++*((_QWORD *)v8 + 4);
  }
  v10 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v10 > 0x14uLL)
  {
    qmemcpy(v10, "      NumAllocaArgs: ", 21);
    *((_QWORD *)v2 + 4) += 21;
    v11 = v2;
  }
  else
  {
    v11 = llvm::raw_ostream::write(v2, "      NumAllocaArgs: ", 0x15uLL);
  }
  sub_1C5E21910(v11, *(unsigned int *)(a1 + 576), 0, 0, 0);
  v12 = (_BYTE *)*((_QWORD *)v11 + 4);
  if (*((_BYTE **)v11 + 3) == v12)
  {
    llvm::raw_ostream::write(v11, "\n", 1uLL);
  }
  else
  {
    *v12 = 10;
    ++*((_QWORD *)v11 + 4);
  }
  v13 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v13 > 0x19uLL)
  {
    qmemcpy(v13, "      NumConstantPtrCmps: ", 26);
    *((_QWORD *)v2 + 4) += 26;
    v14 = v2;
  }
  else
  {
    v14 = llvm::raw_ostream::write(v2, "      NumConstantPtrCmps: ", 0x1AuLL);
  }
  sub_1C5E21910(v14, *(unsigned int *)(a1 + 580), 0, 0, 0);
  v15 = (_BYTE *)*((_QWORD *)v14 + 4);
  if (*((_BYTE **)v14 + 3) == v15)
  {
    llvm::raw_ostream::write(v14, "\n", 1uLL);
  }
  else
  {
    *v15 = 10;
    ++*((_QWORD *)v14 + 4);
  }
  v16 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v16 > 0x1AuLL)
  {
    qmemcpy(v16, "      NumConstantPtrDiffs: ", 27);
    *((_QWORD *)v2 + 4) += 27;
    v17 = v2;
  }
  else
  {
    v17 = llvm::raw_ostream::write(v2, "      NumConstantPtrDiffs: ", 0x1BuLL);
  }
  sub_1C5E21910(v17, *(unsigned int *)(a1 + 584), 0, 0, 0);
  v18 = (_BYTE *)*((_QWORD *)v17 + 4);
  if (*((_BYTE **)v17 + 3) == v18)
  {
    llvm::raw_ostream::write(v17, "\n", 1uLL);
  }
  else
  {
    *v18 = 10;
    ++*((_QWORD *)v17 + 4);
  }
  v19 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v19 > 0x20uLL)
  {
    qmemcpy(v19, "      NumInstructionsSimplified: ", 33);
    *((_QWORD *)v2 + 4) += 33;
    v20 = v2;
  }
  else
  {
    v20 = llvm::raw_ostream::write(v2, "      NumInstructionsSimplified: ", 0x21uLL);
  }
  sub_1C5E21910(v20, *(unsigned int *)(a1 + 588), 0, 0, 0);
  v21 = (_BYTE *)*((_QWORD *)v20 + 4);
  if (*((_BYTE **)v20 + 3) == v21)
  {
    llvm::raw_ostream::write(v20, "\n", 1uLL);
  }
  else
  {
    *v21 = 10;
    ++*((_QWORD *)v20 + 4);
  }
  v22 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v22 > 0x16uLL)
  {
    qmemcpy(v22, "      NumInstructions: ", 23);
    *((_QWORD *)v2 + 4) += 23;
    v23 = v2;
  }
  else
  {
    v23 = llvm::raw_ostream::write(v2, "      NumInstructions: ", 0x17uLL);
  }
  sub_1C5E21910(v23, *(unsigned int *)(a1 + 112), 0, 0, 0);
  v24 = (_BYTE *)*((_QWORD *)v23 + 4);
  if (*((_BYTE **)v23 + 3) == v24)
  {
    llvm::raw_ostream::write(v23, "\n", 1uLL);
  }
  else
  {
    *v24 = 10;
    ++*((_QWORD *)v23 + 4);
  }
  v25 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v25 > 0x16uLL)
  {
    qmemcpy(v25, "      SROACostSavings: ", 23);
    *((_QWORD *)v2 + 4) += 23;
    v26 = v2;
  }
  else
  {
    v26 = llvm::raw_ostream::write(v2, "      SROACostSavings: ", 0x17uLL);
  }
  sub_1C5E21910(v26, *(unsigned int *)(a1 + 716), 0, 0, 0);
  v27 = (_BYTE *)*((_QWORD *)v26 + 4);
  if (*((_BYTE **)v26 + 3) == v27)
  {
    llvm::raw_ostream::write(v26, "\n", 1uLL);
  }
  else
  {
    *v27 = 10;
    ++*((_QWORD *)v26 + 4);
  }
  v28 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v28 > 0x1AuLL)
  {
    qmemcpy(v28, "      SROACostSavingsLost: ", 27);
    *((_QWORD *)v2 + 4) += 27;
    v29 = v2;
  }
  else
  {
    v29 = llvm::raw_ostream::write(v2, "      SROACostSavingsLost: ", 0x1BuLL);
  }
  sub_1C5E21910(v29, *(unsigned int *)(a1 + 720), 0, 0, 0);
  v30 = (_BYTE *)*((_QWORD *)v29 + 4);
  if (*((_BYTE **)v29 + 3) == v30)
  {
    llvm::raw_ostream::write(v29, "\n", 1uLL);
  }
  else
  {
    *v30 = 10;
    ++*((_QWORD *)v29 + 4);
  }
  v31 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v31 > 0x1AuLL)
  {
    qmemcpy(v31, "      LoadEliminationCost: ", 27);
    *((_QWORD *)v2 + 4) += 27;
    v32 = v2;
  }
  else
  {
    v32 = llvm::raw_ostream::write(v2, "      LoadEliminationCost: ", 0x1BuLL);
  }
  v33 = *(int *)(a1 + 600);
  if ((v33 & 0x80000000) != 0)
  {
    v33 = -(uint64_t)v33;
    v34 = v32;
    v35 = 1;
  }
  else
  {
    v34 = v32;
    v35 = 0;
  }
  sub_1C5E21910(v34, v33, 0, 0, v35);
  v36 = (_BYTE *)*((_QWORD *)v32 + 4);
  if (*((_BYTE **)v32 + 3) == v36)
  {
    llvm::raw_ostream::write(v32, "\n", 1uLL);
  }
  else
  {
    *v36 = 10;
    ++*((_QWORD *)v32 + 4);
  }
  v37 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v37 > 0x1EuLL)
  {
    qmemcpy(v37, "      ContainsNoDuplicateCall: ", 31);
    *((_QWORD *)v2 + 4) += 31;
    v38 = v2;
  }
  else
  {
    v38 = llvm::raw_ostream::write(v2, "      ContainsNoDuplicateCall: ", 0x1FuLL);
  }
  sub_1C5E21910(v38, *(unsigned __int8 *)(a1 + 92), 0, 0, 0);
  v39 = (_BYTE *)*((_QWORD *)v38 + 4);
  if (*((_BYTE **)v38 + 3) == v39)
  {
    llvm::raw_ostream::write(v38, "\n", 1uLL);
  }
  else
  {
    *v39 = 10;
    ++*((_QWORD *)v38 + 4);
  }
  v40 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v40) > 0xB)
  {
    *(_DWORD *)(v40 + 8) = 540701811;
    *(_QWORD *)v40 = *(_QWORD *)"      Cost: ";
    *((_QWORD *)v2 + 4) += 12;
    v41 = v2;
  }
  else
  {
    v41 = llvm::raw_ostream::write(v2, "      Cost: ", 0xCuLL);
  }
  v42 = *(int *)(a1 + 656);
  if ((v42 & 0x80000000) != 0)
  {
    v42 = -(uint64_t)v42;
    v43 = v41;
    v44 = 1;
  }
  else
  {
    v43 = v41;
    v44 = 0;
  }
  sub_1C5E21910(v43, v42, 0, 0, v44);
  v45 = (_BYTE *)*((_QWORD *)v41 + 4);
  if (*((_BYTE **)v41 + 3) == v45)
  {
    llvm::raw_ostream::write(v41, "\n", 1uLL);
  }
  else
  {
    *v45 = 10;
    ++*((_QWORD *)v41 + 4);
  }
  v46 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v46) > 0x10)
  {
    *(_BYTE *)(v46 + 16) = 32;
    *(_OWORD *)v46 = *(_OWORD *)"      Threshold: ";
    *((_QWORD *)v2 + 4) += 17;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, "      Threshold: ", 0x11uLL);
  }
  v47 = *(int *)(a1 + 648);
  if ((v47 & 0x80000000) != 0)
  {
    v47 = -(uint64_t)v47;
    v48 = v2;
    v49 = 1;
  }
  else
  {
    v48 = v2;
    v49 = 0;
  }
  result = sub_1C5E21910(v48, v47, 0, 0, v49);
  v51 = (_BYTE *)*((_QWORD *)v2 + 4);
  if (*((_BYTE **)v2 + 3) == v51)
    return llvm::raw_ostream::write(v2, "\n", 1uLL);
  *v51 = 10;
  ++*((_QWORD *)v2 + 4);
  return result;
}

uint64_t llvm::getCallsiteCost(llvm *this, llvm::CallBase *a2, const llvm::DataLayout *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  llvm *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int v19;
  int v20;
  uint64_t PointerAlignElem;
  unsigned int v22;
  int v23;
  char *v25;
  uint64_t v26;

  v5 = *((unsigned __int8 *)this + 16);
  if (v5 == 84)
  {
    v6 = 0;
  }
  else if (v5 == 39)
  {
    v6 = (*((_DWORD *)this + 20) + 1);
  }
  else
  {
    v6 = 2;
  }
  v7 = 0;
  v8 = *((_DWORD *)this + 5);
  v9 = -(uint64_t)(v8 & 0x7FFFFFF);
  if (v8 < 0)
  {
    v25 = (char *)this - 32 * (v8 & 0x7FFFFFF);
    v26 = *((_QWORD *)v25 - 1);
    if ((v26 & 0xFFFFFFFF0) != 0)
      v7 = (*((_DWORD *)v25 - 3) - *(_DWORD *)&v25[-v26]);
    else
      v7 = 0;
  }
  v10 = -32 * v6 - 32 * v7 - 32 * v9 - 32;
  if ((v10 & 0x1FFFFFFFE0) != 0)
  {
    v11 = 0;
    v12 = 0;
    v13 = (v10 >> 5);
    v14 = this;
    do
    {
      if (llvm::CallBase::paramHasAttr((uint64_t)this, v11, 69))
      {
        v16 = **((_QWORD **)v14 - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
        v17 = sub_1C6199478((uint64_t)this, v11);
        sub_1C4768AD0((uint64_t)a2, v17);
        v20 = v19;
        if ((_DWORD)v18 == 1)
        PointerAlignElem = llvm::DataLayout::getPointerAlignElem(a2, *(_DWORD *)(v16 + 8) >> 8);
        v22 = (v20 + *(_DWORD *)(PointerAlignElem + 4) - 1) / *(_DWORD *)(PointerAlignElem + 4);
        if (v22 >= 8)
          v22 = 8;
        v15 = 10 * v22;
      }
      else
      {
        v15 = 5;
      }
      v12 += v15;
      ++v11;
      v14 = (llvm *)((char *)v14 + 32);
    }
    while (v13 != v11);
    v23 = v12 + 5;
  }
  else
  {
    v23 = 5;
  }
  return (dword_1ED7F1DF0 + v23);
}

llvm::APInt *llvm::getInlineCost@<X0>(uint64_t a1@<X0>, int *a2@<X1>, llvm::BasicBlock *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(uint64_t, llvm *)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18;

  v18 = *(_QWORD *)(a1 - 32);
  if (!v18 || *(_BYTE *)(v18 + 16) || *(_QWORD *)(v18 + 24) != *(_QWORD *)(a1 + 72))
    v18 = 0;
  return llvm::getInlineCost(a1, (llvm::Function *)v18, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

llvm::APInt *llvm::getInlineCost@<X0>(uint64_t a1@<X0>, llvm::Function *a2@<X1>, int *a3@<X2>, llvm::BasicBlock *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t, llvm *)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  llvm::APInt *AttributeBasedInliningDecision;
  char v21;
  llvm::APInt *result;
  _BYTE *v23;
  char v24;
  BOOL v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  int v29;
  _BYTE v30[32];
  char v31;
  _BYTE v32[32];
  char v33;
  _BYTE v34[32];
  char v35;
  _BYTE v36[32];
  char v37;
  uint64_t v38[12];
  char v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  __int128 v47;
  int v48;
  _OWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  int v52;
  _OWORD v53[9];
  int v54;
  char v55;
  char v56;
  _OWORD *v57;
  _OWORD *v58;
  uint64_t v59;
  int v60;
  _OWORD v61[9];
  uint64_t v62;
  int v63;
  char v64;
  uint64_t v65;
  int v66;
  int *v67;
  __int128 v68;
  int v69;
  int v70;
  __int16 v71;
  char v72;
  _QWORD v73[2];
  _BYTE v74[32];
  char v75;
  char v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  uint64_t (**v80)();
  uint64_t *v81;
  _BYTE v82[32];
  char v83;
  _BYTE v84[32];
  char v85;

  AttributeBasedInliningDecision = (llvm::APInt *)llvm::getAttributeBasedInliningDecision(a1, a2, a4, a7, a8);
  if (!v21)
  {
    v38[2] = a5;
    v38[3] = a6;
    v38[4] = a10;
    v38[5] = a11;
    v38[6] = a12;
    v38[7] = (uint64_t)a2;
    v38[8] = *((_QWORD *)a2 + 5) + 272;
    v38[9] = a13;
    v38[10] = a1;
    v38[11] = 0;
    v39 = 0;
    v40 = 0u;
    v41 = 0u;
    v42 = 0;
    v43 = 0u;
    v44 = 0;
    v46 = 0;
    v45 = 0u;
    v48 = 0;
    v47 = 0u;
    v49 = v53;
    v50 = v53;
    v51 = 16;
    v53[8] = 0u;
    v52 = 0;
    v54 = 0;
    v55 = 1;
    v57 = v61;
    v58 = v61;
    v59 = 16;
    v60 = 0;
    v61[8] = 0u;
    v62 = 0;
    v38[0] = (uint64_t)&off_1E8138008;
    v38[1] = (uint64_t)a4;
    v63 = 2147483641;
    v24 = 1;
    if (!byte_1ED7F1EB0)
    {
      if (a13)
        v25 = 0;
      else
        v25 = *((_BYTE *)a3 + 61) == 0;
      v24 = !v25;
    }
    v64 = v24;
    v65 = 0;
    v66 = 0;
    v67 = a3;
    v68 = 0uLL;
    v69 = 0;
    v70 = *a3;
    v71 = 1;
    v72 = 0;
    v74[0] = 0;
    v75 = 0;
    memset(v73, 0, 14);
    v76 = 1;
    v77 = 0;
    v78 = 0uLL;
    v79 = 0;
    v80 = &off_1E81381A8;
    v81 = v38;
    v56 = *((_BYTE *)a3 + 64);
    v26 = sub_1C4E53B28(v38);
    if (BYTE5(v73[1]))
    {
      if (v26)
      {
        v34[0] = 0;
        v35 = 0;
        if (v75)
        {
          sub_1C6199A28((llvm::APInt *)v34, (llvm::APInt *)v74);
          v35 = 1;
        }
        sub_1C4E55798((llvm::APInt *)"cost over benefit", (llvm::APInt *)v34, a9);
        if (!v35)
          return (llvm::APInt *)sub_1C4E54B0C((uint64_t)v38);
        v27 = &v35;
        v28 = v34;
      }
      else
      {
        v36[0] = 0;
        v37 = 0;
        if (v75)
        {
          sub_1C6199A28((llvm::APInt *)v36, (llvm::APInt *)v74);
          v37 = 1;
        }
        sub_1C4E556F4((llvm::APInt *)"benefit over cost", (llvm::APInt *)v36, a9);
        if (!v37)
          return (llvm::APInt *)sub_1C4E54B0C((uint64_t)v38);
        v27 = &v37;
        v28 = v36;
      }
    }
    else
    {
      if (BYTE4(v73[1]))
      {
        v29 = v70;
        *(_DWORD *)a9 = v73[0];
        *(_DWORD *)(a9 + 4) = v29;
        *(_QWORD *)(a9 + 8) = 0;
        *(_BYTE *)(a9 + 16) = 0;
        v27 = (char *)(a9 + 48);
LABEL_23:
        *v27 = 0;
        return (llvm::APInt *)sub_1C4E54B0C((uint64_t)v38);
      }
      if (v26)
      {
        v30[0] = 0;
        v31 = 0;
        sub_1C4E55798((llvm::APInt *)v26, (llvm::APInt *)v30, a9);
        if (!v31)
          return (llvm::APInt *)sub_1C4E54B0C((uint64_t)v38);
        v27 = &v31;
        v28 = v30;
      }
      else
      {
        v32[0] = 0;
        v33 = 0;
        sub_1C4E556F4((llvm::APInt *)"empty function", (llvm::APInt *)v32, a9);
        if (!v33)
          return (llvm::APInt *)sub_1C4E54B0C((uint64_t)v38);
        v27 = &v33;
        v28 = v32;
      }
    }
    sub_1C61996A0((uint64_t)v28);
    goto LABEL_23;
  }
  if (AttributeBasedInliningDecision)
  {
    v82[0] = 0;
    v83 = 0;
    result = sub_1C4E55798(AttributeBasedInliningDecision, (llvm::APInt *)v82, a9);
    if (v83)
    {
      v23 = v82;
      return (llvm::APInt *)sub_1C61996A0((uint64_t)v23);
    }
  }
  else
  {
    v84[0] = 0;
    v85 = 0;
    result = sub_1C4E556F4((llvm::APInt *)"always inline attribute", (llvm::APInt *)v84, a9);
    if (v85)
    {
      v23 = v84;
      return (llvm::APInt *)sub_1C61996A0((uint64_t)v23);
    }
  }
  return result;
}

uint64_t llvm::getInliningCostEstimate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12[12];
  char v13;
  __int128 v14;
  __int128 v15;
  int v16;
  __int128 v17;
  int v18;
  __int128 v19;
  int v20;
  __int128 v21;
  int v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  int v26;
  _OWORD v27[9];
  int v28;
  char v29;
  char v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  int v34;
  _OWORD v35[9];
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  int v40;
  _BYTE *v41;
  __int128 v42;
  int v43;
  int v44;
  __int16 v45;
  char v46;
  unsigned int v47[4];
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  uint64_t (**v54)();
  uint64_t *v55;
  _BYTE v56[60];
  int v57;
  __int16 v58;

  memset(v56, 0, sizeof(v56));
  v57 = 16843009;
  v58 = 256;
  v8 = *(_QWORD *)(a1 - 32);
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a7;
  v12[7] = v8;
  v12[8] = *(_QWORD *)(v8 + 40) + 272;
  v12[9] = a8;
  v13 = 0;
  v12[10] = a1;
  v12[11] = 0;
  v16 = 0;
  v15 = 0u;
  v14 = 0u;
  v18 = 0;
  v17 = 0u;
  v20 = 0;
  v19 = 0u;
  v22 = 0;
  v21 = 0u;
  v23 = v27;
  v24 = v27;
  v25 = 16;
  v27[8] = 0u;
  v26 = 0;
  v28 = 0;
  v29 = 1;
  v31 = v35;
  v32 = v35;
  v33 = 16;
  v34 = 0;
  v35[8] = 0u;
  v36 = 0;
  v12[0] = (uint64_t)&off_1E8138008;
  v12[1] = a2;
  v37 = 2147483641;
  v38 = 1;
  v39 = 0;
  v40 = 0;
  v41 = v56;
  v43 = 0;
  v42 = 0u;
  v44 = 0;
  v45 = 257;
  v46 = 0;
  v48 = 0;
  v49 = 0;
  *(_QWORD *)((char *)&v47[1] + 2) = 0;
  *(_QWORD *)v47 = 0;
  v50 = 1;
  v51 = 0;
  v52 = 0u;
  v53 = 0;
  v54 = &off_1E81381A8;
  v55 = v12;
  v30 = 0;
  v9 = sub_1C4E53B28(v12);
  v10 = v47[0];
  sub_1C4E54B0C((uint64_t)v12);
  if (v9)
    return 0;
  else
    return v10 | 0x100000000;
}

char *sub_1C4E53B28(uint64_t *a1)
{
  uint64_t *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t (**v14)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v15)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v16)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t *v25;
  llvm::Module *v26;
  char v27;
  llvm::ConstantInt **v28;
  const llvm::APInt *v29;
  llvm::Value **v30;
  uint64_t v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::AssumptionCache *v38;
  uint64_t v39;
  uint64_t (**v40)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v41;
  int v42;
  llvm::BasicBlock *v43;
  llvm::Function *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t *v49;
  int v50;
  llvm::Function *v51;
  char *v52;
  BOOL v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  llvm::APInt *v59;
  unsigned int v60;
  BOOL v61;
  char v62;
  int v63;
  uint64_t (***v64)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t i;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int j;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  llvm::Constant *v76;
  uint64_t v77;
  uint64_t v78;
  llvm::OptimizationRemarkEmitter *v79;
  uint64_t v80;
  llvm::OptimizationRemarkEmitter *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  void **v91;
  char *v92;
  unint64_t v93;
  void **v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  void **v102;
  char *v103;
  unint64_t v104;
  void **v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  llvm::Function *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  int v114;
  _BYTE v115[256];
  void *__dst[2];
  char v117;
  void *__p;
  char v119;
  void *v120[2];
  char v121;
  void *v122;
  char v123;
  _BYTE *v124;
  _BYTE *v125;
  uint64_t v126;
  int v127;
  _BYTE v128[128];
  void *v129;
  uint64_t v130;
  _BYTE v131[128];
  _OWORD v132[5];
  void *v133;
  unsigned int v134;
  _BYTE v135[272];
  uint64_t (**Successor)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  void *v137;
  uint64_t v138;
  __int128 v139;
  const char *v140;
  const char *v141;
  uint64_t v142;
  char v143;
  char v144;
  void *v145;
  uint64_t v146;
  _BYTE v147[256];
  char v148;
  int v149;
  uint64_t v150;
  uint64_t v151;

  v1 = a1;
  v151 = *MEMORY[0x1E0C80C00];
  v2 = (char *)(*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
  if (v2)
    return v2;
  v4 = v1[7];
  if (*(_QWORD *)(v4 + 72) == v4 + 72)
    return 0;
  v5 = v1[10];
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 56);
  v7 = *(_QWORD *)(v6 + 8);
  if (v7)
  {
    while (1)
    {
      v8 = *(_QWORD *)(v7 + 24);
      v9 = *(unsigned __int8 *)(v8 + 16);
      if (v9 >= 0x1C)
      {
        v10 = v9 - 33;
        v20 = v10 > 0x33;
        v11 = (1 << v10) & 0x8000000000041;
        v12 = v20 || v11 == 0;
        if (!v12 && *(_QWORD *)(*(_QWORD *)(v8 + 40) + 56) == v6)
          break;
      }
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
        goto LABEL_15;
    }
    *((_BYTE *)v1 + 88) = 1;
  }
LABEL_15:
  v13 = *(_DWORD *)(v5 + 20);
  if ((*(_WORD *)(v4 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v4);
    v14 = *(uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v4 + 88);
    if ((*(_WORD *)(v4 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v4);
      v15 = *(uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v4 + 88);
      goto LABEL_18;
    }
  }
  else
  {
    v14 = *(uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v4 + 88);
  }
  v15 = v14;
LABEL_18:
  v16 = &v15[5 * *(_QWORD *)(v4 + 96)];
  if (v14 == v16)
    goto LABEL_74;
  v17 = v1 + 15;
  v108 = v1 + 18;
  v109 = (uint64_t)(v1 + 24);
  v107 = (uint64_t)(v1 + 21);
  v18 = (uint64_t *)(v5 - 32 * (v13 & 0x7FFFFFF));
  v106 = v1;
  do
  {
    v19 = *v18;
    if (*v18)
      v20 = *(unsigned __int8 *)(*v18 + 16) > 0x14u;
    else
      v20 = 1;
    if (!v20)
    {
      Successor = v14;
      sub_1C4E58228(v17, &Successor)[1] = v19;
      v19 = *v18;
    }
    v21 = *(_DWORD *)(*(_QWORD *)v19 + 8);
    if (v21 != 15)
      goto LABEL_71;
    if ((v21 & 0xFE) == 0x12)
      v21 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v19 + 16) + 8);
    DWORD2(v132[0]) = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem((llvm::DataLayout *)v1[8], v21 >> 8) + 12);
    if (DWORD2(v132[0]) > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)v132, 0, 0);
    else
      *(_QWORD *)&v132[0] = 0;
    Successor = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&v139 + 1;
    v137 = (char *)&v139 + 8;
    v138 = 4;
    LODWORD(v139) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&Successor, v19);
    while (1)
    {
      v22 = *(unsigned __int8 *)(v19 + 16);
      if (v22 == 62)
        break;
      if (v22 == 5)
      {
        v23 = *(unsigned __int16 *)(v19 + 18);
        if (v23 == 34)
          break;
      }
      else
      {
        v23 = v22 - 28;
        if (v22 < 0x1C)
          goto LABEL_41;
      }
      if (v23 == 49)
        goto LABEL_39;
LABEL_41:
      if (v22 != 1
        || (*(_DWORD *)(v19 + 32) & 0xFu) - 5 >= 4 && ((1 << (*(_DWORD *)(v19 + 32) & 0xF)) & 0x614) != 0
        || (v26 = *(llvm::Module **)(v19 + 40)) != 0
        && llvm::Module::getSemanticInterposition(v26)
        && (*(_BYTE *)(v19 + 33) & 0x40) == 0)
      {
LABEL_52:
        llvm::DataLayout::getIndexType((llvm::DataLayout *)v1[8], *(llvm::Type **)v19);
        v30 = llvm::ConstantInt::get(v28, (llvm::Type *)v132, v29);
        goto LABEL_54;
      }
      v25 = (uint64_t *)(v19 - 32);
LABEL_47:
      v19 = *v25;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&Successor, *v25);
      if (!v27)
        goto LABEL_52;
    }
    if ((*(_BYTE *)(v19 + 17) & 2) != 0 && sub_1C4E5892C((uint64_t)v1, v19, (unint64_t *)v132))
    {
LABEL_39:
      v24 = *(_DWORD *)(v19 + 20);
      if ((v24 & 0x40000000) != 0)
        v25 = *(uint64_t **)(v19 - 8);
      else
        v25 = (uint64_t *)(v19 - 32 * (v24 & 0x7FFFFFF));
      goto LABEL_47;
    }
    v30 = 0;
LABEL_54:
    if (v137 != Successor)
      free(v137);
    if (DWORD2(v132[0]) >= 0x41 && *(_QWORD *)&v132[0])
      MEMORY[0x1CAA32F9C](*(_QWORD *)&v132[0], 0x1000C8000313F17);
    if (v30)
    {
      v31 = *((unsigned int *)v30 + 8);
      if (v31 > 0x40)
      {
        v32 = (llvm::Value *)operator new[]();
        v1 = v106;
        memcpy(v32, v30[3], ((unint64_t)(v31 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v32 = v30[3];
      }
      Successor = v14;
      v33 = sub_1C4E58E24(v109, (uint64_t *)&Successor);
      v34 = v33;
      *(_QWORD *)(v33 + 8) = v19;
      if (*(_DWORD *)(v33 + 24) >= 0x41u)
      {
        v35 = *(_QWORD *)(v33 + 16);
        if (v35)
          MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
      }
      *(_QWORD *)(v34 + 16) = v32;
      *(_DWORD *)(v34 + 24) = v31;
      if (*(_BYTE *)(v19 + 16) == 59)
        v36 = v19;
      else
        v36 = 0;
      *(_QWORD *)&v132[0] = v36;
      if (v36)
      {
        Successor = v14;
        sub_1C4E58FC4(v108, &Successor)[1] = v36;
        (*(void (**)(uint64_t *, _QWORD))(*v1 + 176))(v1, *(_QWORD *)&v132[0]);
        sub_1C4E59188(v107, (uint64_t *)v132, (uint64_t)&Successor);
      }
    }
LABEL_71:
    v18 += 4;
    v14 += 5;
  }
  while (v14 != v16);
LABEL_74:
  *((_DWORD *)v1 + 142) = *((_DWORD *)v1 + 32);
  *((_DWORD *)v1 + 143) = *((_DWORD *)v1 + 50);
  *((_DWORD *)v1 + 144) = *((_DWORD *)v1 + 38);
  v111 = v115;
  v112 = v115;
  v113 = 32;
  v114 = 0;
  v37 = v1[7];
  v38 = (llvm::AssumptionCache *)((uint64_t (*)(uint64_t, uint64_t))v1[2])(v1[3], v37);
  llvm::CodeMetrics::collectEphemeralValues(v37, v38, (llvm::SmallPtrSetImplBase *)&v111);
  v124 = v128;
  v125 = v128;
  v126 = 16;
  v127 = 0;
  v129 = v131;
  v130 = 0x1000000000;
  v39 = *(_QWORD *)(v1[7] + 80);
  if (v39)
    v40 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v39 - 24);
  else
    v40 = 0;
  Successor = v40;
  sub_1C4E585E4((uint64_t)&v124, (uint64_t *)&Successor);
  if (!(_DWORD)v130)
  {
LABEL_165:
    v76 = (llvm::Constant *)v1[7];
    if ((*((_DWORD *)v76 + 8) & 0xFu) - 7 <= 1 && llvm::Constant::hasNLiveUses(v76, 1u))
    {
      v77 = v1[10];
      v78 = *(_QWORD *)(v77 - 32);
      if (!v78 || *(_BYTE *)(v78 + 16) || *(_QWORD *)(v78 + 24) != *(_QWORD *)(v77 + 72))
        v78 = 0;
      if (v1[7] == v78)
        goto LABEL_174;
    }
    if (!*((_BYTE *)v1 + 92))
LABEL_174:
      v2 = (char *)(*(uint64_t (**)(uint64_t *))(*v1 + 48))(v1);
    else
      v2 = "noduplicate";
    goto LABEL_187;
  }
  v41 = 0;
  v42 = 0;
  v2 = "blockaddress used outside of callbr";
  while (2)
  {
    if (((*(uint64_t (**)(uint64_t *))(*v1 + 56))(v1) & 1) != 0)
      goto LABEL_165;
    v110 = 0;
    v110 = (llvm::Function *)*((_QWORD *)v129 + v41);
    if (*((llvm::Function **)v110 + 5) == (llvm::Function *)((char *)v110 + 40))
      goto LABEL_151;
    (*(void (**)(uint64_t *))(*v1 + 16))(v1);
    if ((*((_WORD *)v110 + 9) & 0x7FFF) != 0)
    {
      for (i = *((_QWORD *)llvm::BlockAddress::get(*((llvm::BlockAddress **)v110 + 7), v110, v43) + 1);
            i;
            i = *(_QWORD *)(i + 8))
      {
        if (*(_BYTE *)(*(_QWORD *)(i + 24) + 16) != 39)
          goto LABEL_187;
      }
    }
    v44 = v110;
    v45 = (char *)v110 + 40;
    v46 = (char *)*((_QWORD *)v110 + 6);
    if (v46 == (char *)v110 + 40)
    {
LABEL_110:
      v51 = (llvm::Function *)*((_QWORD *)v44 + 5);
      if (v51 == (llvm::Function *)((char *)v44 + 40))
      {
        v52 = 0;
      }
      else
      {
        v52 = (char *)v51 - 24;
        v53 = v51 == 0;
        if (v53)
          v54 = 0;
        else
          v54 = (uint64_t)v52;
        v55 = *(unsigned __int8 *)(v54 + 16) - 40;
        if (v55 >= 0xFFFFFFF5)
          v56 = v54;
        else
          v56 = 0;
        v57 = *(unsigned __int8 *)(v56 + 16);
        if (v55 < 0xFFFFFFF5)
          v53 = 1;
        if (v57 != 30 || v53)
        {
          v62 = v57 != 31 || v53;
          if ((v62 & 1) == 0)
          {
            v63 = *(_DWORD *)(v56 + 20);
            v64 = (v63 & 0x40000000) != 0
                ? *(uint64_t (****)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v56 - 8)
                : (uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v56
                                                                                           - 32 * (v63 & 0x7FFFFFF));
            Successor = *v64;
            *(_QWORD *)&v132[0] = 0;
            if ((sub_1C4E5818C(v1 + 15, &Successor, v132) & 1) != 0)
            {
              v66 = *(_QWORD *)(*(_QWORD *)&v132[0] + 8);
              if (v66)
              {
                if (*(_BYTE *)(v66 + 16) == 16)
                {
                  Successor = 0;
                  sub_1C4E5D490(v56, v66);
                  v68 = *(_DWORD *)(v56 + 20);
                  if ((v68 & 0x40000000) != 0)
                    v69 = *(_QWORD *)(v56 - 8);
                  else
                    v69 = v56 - 32 * (v68 & 0x7FFFFFF);
                  if (v67 == 4294967294)
                    v73 = 1;
                  else
                    v73 = (2 * v67 + 3);
                  v74 = *(_QWORD *)(v69 + 32 * v73);
                  goto LABEL_164;
                }
              }
            }
          }
        }
        else if ((*(_DWORD *)(v56 + 20) & 0x7FFFFFF) == 3)
        {
          Successor = *(uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden))(v56 - 96);
          *(_QWORD *)&v132[0] = 0;
          if ((sub_1C4E5818C(v1 + 15, &Successor, v132) & 1) != 0)
          {
            v58 = *(_QWORD *)(*(_QWORD *)&v132[0] + 8);
            if (v58)
            {
              if (*(_BYTE *)(v58 + 16) == 16)
              {
                v59 = (llvm::APInt *)(v58 + 24);
                v60 = *(_DWORD *)(v58 + 32);
                if (v60 > 0x40)
                  v61 = llvm::APInt::countLeadingZerosSlowCase(v59) == v60;
                else
                  v61 = *(_QWORD *)v59 == 0;
                v75 = v61;
                v74 = *(_QWORD *)(v56 + 32 * (v75 << 63 >> 63) - 32);
LABEL_164:
                Successor = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v74;
                sub_1C4E585E4((uint64_t)&v124, (uint64_t *)&Successor);
                sub_1C4E5D0EC(v1 + 47, &v110)[1] = v74;
                sub_1C4E58654(v1, (uint64_t)v110, v74);
                goto LABEL_151;
              }
            }
          }
        }
      }
      v70 = v52[16];
      if (v70 != 30)
        __asm { BR              X9 }
      if ((*((_DWORD *)v52 + 5) & 0x7FFFFFF) == 3)
        v71 = 2;
      else
        v71 = 1;
      for (j = 0; j != v71; ++j)
      {
        Successor = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))llvm::Instruction::getSuccessor((llvm::Instruction *)v52, j);
        sub_1C4E585E4((uint64_t)&v124, (uint64_t *)&Successor);
      }
      (*(void (**)(uint64_t *, llvm::Function *))(*v1 + 24))(v1, v110);
LABEL_151:
      v41 = (v42 + 1);
      v42 = v41;
      if ((_DWORD)v130 == (_DWORD)v41)
        goto LABEL_165;
      continue;
    }
    break;
  }
  while (1)
  {
    if (v46)
      v47 = v46 - 24;
    else
      v47 = 0;
    if (sub_1C4D99D08((uint64_t)v47) || sub_1C509DDB0((uint64_t)v47))
      goto LABEL_108;
    v48 = (char *)sub_1C477672C((uint64_t)&v111, (uint64_t)v47);
    v49 = v112 == v111 ? (uint64_t *)((char *)&v113 + 4) : &v113;
    if (v48 != &v112[8 * *(unsigned int *)v49])
      goto LABEL_108;
    ++*((_DWORD *)v1 + 28);
    if (v47[16] == 89 || (*(_DWORD *)(*(_QWORD *)v47 + 8) & 0xFE) == 0x12)
      ++*((_DWORD *)v1 + 29);
    (*(void (**)(uint64_t *, char *))(*v1 + 32))(v1, v47);
    sub_1C4E59434((uint64_t)v1, (uint64_t)v47);
    if (v50)
      ++*((_DWORD *)v1 + 147);
    else
      (*(void (**)(uint64_t *))(*v1 + 168))(v1);
    (*(void (**)(uint64_t *, char *))(*v1 + 40))(v1, v47);
    if (*((_BYTE *)v1 + 89))
    {
      if (!*((_BYTE *)v1 + 401))
        break;
    }
    if (*((_BYTE *)v1 + 90))
    {
      v2 = "exposes returns twice";
      goto LABEL_184;
    }
    if (*((_BYTE *)v1 + 91))
    {
      v2 = "dynamic alloca";
      goto LABEL_184;
    }
    if (*((_BYTE *)v1 + 94))
    {
      v2 = "indirect branch";
      goto LABEL_184;
    }
    if (*((_BYTE *)v1 + 95))
    {
      v2 = "uninlinable intrinsic";
      goto LABEL_184;
    }
    if (*((_BYTE *)v1 + 96))
    {
      v2 = "varargs";
      goto LABEL_184;
    }
    if (*((_BYTE *)v1 + 88) && (unint64_t)v1[13] >= 0x401)
    {
      v81 = (llvm::OptimizationRemarkEmitter *)v1[9];
      if (v81)
      {
        v82 = ****(_QWORD ****)v81;
        if (*(_QWORD *)(v82 + 128)
          || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v82 + 72) + 48))(*(_QWORD *)(v82 + 72)))
        {
          v95 = v1[10];
          v96 = *(_QWORD *)(*(_QWORD *)(v95 + 40) + 56);
          llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v132, (const llvm::DebugLoc *)(v95 + 48));
          v97 = *(_QWORD *)(v95 + 40);
          LODWORD(v137) = 10;
          BYTE4(v137) = 2;
          v139 = v132[0];
          v138 = v96;
          v140 = "inline-cost";
          v141 = "NeverInline";
          v142 = 11;
          v143 = 0;
          v144 = 0;
          v145 = v147;
          v146 = 0x400000000;
          v148 = 0;
          v149 = -1;
          v150 = v97;
          Successor = &off_1E814E538;
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v120, "Callee", 6uLL, (_BYTE *)v1[7]);
          v98 = sub_1C47E3888((uint64_t)&Successor, (uint64_t)v120);
          *(_QWORD *)&v132[0] = " is ";
          *((_QWORD *)&v132[0] + 1) = 4;
          sub_1C53B17B4(v98 + 80, (const void **)v132);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "InlineResult", 0xCuLL, "recursive and allocates too much stack space", 0x2CuLL);
          v99 = sub_1C47E3888(v98, (uint64_t)__dst);
          *(_QWORD *)&v132[0] = ". Cost is not fully computed";
          *((_QWORD *)&v132[0] + 1) = 28;
          sub_1C53B17B4(v99 + 80, (const void **)v132);
          sub_1C61998EC((uint64_t)v132, v99);
          *(_QWORD *)&v132[0] = &off_1E814E538;
          if (v119 < 0)
            operator delete(__p);
          if (v117 < 0)
            operator delete(__dst[0]);
          if (v123 < 0)
            operator delete(v122);
          if (v121 < 0)
            operator delete(v120[0]);
          Successor = &off_1E814E790;
          v100 = (char *)v145;
          if ((_DWORD)v146)
          {
            v101 = (unint64_t)v146 << 6;
            do
            {
              v102 = (void **)&v100[v101];
              if (v100[v101 - 17] < 0)
                operator delete(*(v102 - 5));
              if (*((char *)v102 - 41) < 0)
                operator delete(*(v102 - 8));
              v101 -= 64;
            }
            while (v101);
            v100 = (char *)v145;
          }
          if (v100 != v147)
            free(v100);
          llvm::OptimizationRemarkEmitter::emit(v81, (llvm::DiagnosticInfoOptimizationBase *)v132);
          *(_QWORD *)&v132[0] = &off_1E814E790;
          v103 = (char *)v133;
          if (v134)
          {
            v104 = (unint64_t)v134 << 6;
            do
            {
              v105 = (void **)&v103[v104];
              if (v103[v104 - 17] < 0)
                operator delete(*(v105 - 5));
              if (*((char *)v105 - 41) < 0)
                operator delete(*(v105 - 8));
              v104 -= 64;
            }
            while (v104);
            v103 = (char *)v133;
          }
          if (v103 != v135)
            free(v103);
        }
      }
      v2 = "recursive and allocates too much stack space";
      goto LABEL_187;
    }
    if (((*(uint64_t (**)(uint64_t *))(*v1 + 56))(v1) & 1) != 0)
    {
      v2 = "Call site analysis is not favorable to inlining.";
      goto LABEL_187;
    }
LABEL_108:
    v46 = (char *)*((_QWORD *)v46 + 1);
    if (v46 == v45)
    {
      v44 = v110;
      goto LABEL_110;
    }
  }
  v2 = "recursive";
LABEL_184:
  v79 = (llvm::OptimizationRemarkEmitter *)v1[9];
  if (v79)
  {
    v80 = ****(_QWORD ****)v79;
    if (*(_QWORD *)(v80 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v80 + 72) + 48))(*(_QWORD *)(v80 + 72)))
    {
      v83 = v1[10];
      v84 = *(_QWORD *)(*(_QWORD *)(v83 + 40) + 56);
      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v132, (const llvm::DebugLoc *)(v83 + 48));
      v85 = *(_QWORD *)(v83 + 40);
      LODWORD(v137) = 10;
      BYTE4(v137) = 2;
      v139 = v132[0];
      v138 = v84;
      v140 = "inline-cost";
      v141 = "NeverInline";
      v142 = 11;
      v143 = 0;
      v144 = 0;
      v145 = v147;
      v146 = 0x400000000;
      v148 = 0;
      v149 = -1;
      v150 = v85;
      Successor = &off_1E814E538;
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v120, "Callee", 6uLL, (_BYTE *)v1[7]);
      v86 = sub_1C47E3888((uint64_t)&Successor, (uint64_t)v120);
      *(_QWORD *)&v132[0] = " has uninlinable pattern (";
      *((_QWORD *)&v132[0] + 1) = 26;
      sub_1C53B17B4(v86 + 80, (const void **)v132);
      v87 = strlen(v2);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "InlineResult", 0xCuLL, v2, v87);
      v88 = sub_1C47E3888(v86, (uint64_t)__dst);
      *(_QWORD *)&v132[0] = ") and cost is not fully computed";
      *((_QWORD *)&v132[0] + 1) = 32;
      sub_1C53B17B4(v88 + 80, (const void **)v132);
      sub_1C61998EC((uint64_t)v132, v88);
      *(_QWORD *)&v132[0] = &off_1E814E538;
      if (v119 < 0)
        operator delete(__p);
      if (v117 < 0)
        operator delete(__dst[0]);
      if (v123 < 0)
        operator delete(v122);
      if (v121 < 0)
        operator delete(v120[0]);
      Successor = &off_1E814E790;
      v89 = (char *)v145;
      if ((_DWORD)v146)
      {
        v90 = (unint64_t)v146 << 6;
        do
        {
          v91 = (void **)&v89[v90];
          if (v89[v90 - 17] < 0)
            operator delete(*(v91 - 5));
          if (*((char *)v91 - 41) < 0)
            operator delete(*(v91 - 8));
          v90 -= 64;
        }
        while (v90);
        v89 = (char *)v145;
      }
      if (v89 != v147)
        free(v89);
      llvm::OptimizationRemarkEmitter::emit(v79, (llvm::DiagnosticInfoOptimizationBase *)v132);
      *(_QWORD *)&v132[0] = &off_1E814E790;
      v92 = (char *)v133;
      if (v134)
      {
        v93 = (unint64_t)v134 << 6;
        do
        {
          v94 = (void **)&v92[v93];
          if (v92[v93 - 17] < 0)
            operator delete(*(v94 - 5));
          if (*((char *)v94 - 41) < 0)
            operator delete(*(v94 - 8));
          v93 -= 64;
        }
        while (v93);
        v92 = (char *)v133;
      }
      if (v92 != v135)
        free(v92);
    }
  }
LABEL_187:
  if (v129 != v131)
    free(v129);
  if (v125 != v124)
    free(v125);
  if (v112 != v111)
    free(v112);
  return v2;
}

uint64_t sub_1C4E54B0C(uint64_t a1)
{
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 728), 8);
  if (*(_BYTE *)(a1 + 704))
  {
    sub_1C61996A0(a1 + 672);
    *(_BYTE *)(a1 + 704) = 0;
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 624), 8);
  return sub_1C4E578C4(a1);
}

uint64_t llvm::getInliningCostFeatures@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15[12];
  char v16;
  __int128 v17;
  __int128 v18;
  int v19;
  __int128 v20;
  int v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  int v29;
  _OWORD v30[9];
  int v31;
  __int16 v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  int v36;
  _OWORD v37[9];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[28];
  int v45;
  __int128 v46;
  int v47;

  v9 = *(_QWORD *)(a1 - 32);
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  v15[5] = a6;
  v15[6] = a7;
  v15[7] = v9;
  v15[8] = *(_QWORD *)(v9 + 40) + 272;
  v15[9] = 0;
  v16 = 0;
  v15[10] = a1;
  v15[11] = 0;
  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  v21 = 0;
  v20 = 0u;
  v23 = 0;
  v22 = 0u;
  v25 = 0;
  v24 = 0u;
  v26 = v30;
  v27 = v30;
  v28 = 16;
  v30[8] = 0u;
  v29 = 0;
  v31 = 0;
  v32 = 1;
  v33 = v37;
  v34 = v37;
  v35 = 16;
  v36 = 0;
  v37[8] = 0u;
  v38 = 0;
  v15[0] = (uint64_t)&off_1E81381F0;
  v15[1] = a2;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  memset(v44, 0, sizeof(v44));
  v45 = 5;
  v46 = 0u;
  v47 = 0;
  if (sub_1C4E53B28(v15))
  {
    v10 = 0;
    *(_BYTE *)a8 = 0;
  }
  else
  {
    v11 = v42;
    *(_OWORD *)(a8 + 32) = v41;
    *(_OWORD *)(a8 + 48) = v11;
    v12 = *(_OWORD *)v44;
    *(_OWORD *)(a8 + 64) = v43;
    *(_OWORD *)(a8 + 80) = v12;
    v13 = v40;
    v10 = 1;
    *(_OWORD *)a8 = v39;
    *(_OWORD *)(a8 + 16) = v13;
  }
  *(_BYTE *)(a8 + 96) = v10;
  MEMORY[0x1CAA32FB4](v46, 8);
  return sub_1C4E578C4((uint64_t)v15);
}

uint64_t sub_1C4E54CC0(uint64_t a1)
{
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 704), 8);
  return sub_1C4E578C4(a1);
}

unint64_t llvm::getAttributeBasedInliningDecision(uint64_t a1, llvm::Function *a2, llvm::BasicBlock *a3, uint64_t (*a4)(uint64_t, llvm *), uint64_t a5)
{
  llvm::BasicBlock *v7;
  llvm *v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  llvm::AttributeFuncs *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  unint64_t v43;
  uint64_t v44;
  const llvm::Function *v45;
  uint64_t v46;
  unsigned int v47;
  const void **v48;
  unsigned int v49;
  _BYTE *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  llvm::GlobalValue *Section;
  uint64_t v65;
  llvm::Module *v66;
  uint64_t v67;
  uint64_t v68;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  llvm::BasicBlock *v79;
  uint64_t v80;
  void *__dst;
  uint64_t v82;
  _BYTE v83[48];
  unsigned int v84;
  void *__s1;
  uint64_t v86;
  _BYTE v87[48];
  unsigned int v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v37 = "indirect call";
LABEL_99:
    v24 = (unint64_t)v37 & 0xFFFFFFFFFFFFFF00;
    LOBYTE(v25) = (_BYTE)v37;
    return v24 | v25;
  }
  v7 = a3;
  v8 = a2;
  v10 = *((_QWORD *)a2 + 14);
  if (v10)
  {
    if (*(_DWORD *)(v10 + 8))
    {
      v11 = *(_QWORD *)(v10 + 40);
      if (v11)
      {
        v12 = *(_DWORD *)(v11 + 40);
        if (v12)
        {
          v13 = *(_QWORD *)(v11 + 24);
          v14 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
          {
            v75 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v75 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v75;
            __cxa_guard_release(&qword_1ED7EAC88);
          }
          v15 = __ROR8__(qword_1ED7EAC80 ^ 0x7A48DC6FE7EA5090, 30);
          v16 = 0x9DDFEA08EB382D69
              * ((qword_1ED7EAC80 - 0x2D69957673248ED7) ^ ((0x9DDFEA08EB382D69
                                                            * ((v15 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80
                                                                                             - 0x2D69957673248ED7))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v15 - 0x574D426307C1BC2DLL) ^ (qword_1ED7EAC80 - 0x2D69957673248ED7))));
          v17 = -348639895 * ((v16 >> 47) ^ v16);
          for (i = 1; ; ++i)
          {
            v19 = v17 & (v12 - 1);
            v20 = (uint64_t *)(v13 + 24 * v19);
            v21 = *v20;
            if (*v20 == -1)
            {
              if ("coroutine.presplit" == (char *)-1)
                goto LABEL_24;
            }
            else if (v21 == -2)
            {
              if ("coroutine.presplit" == (char *)-2)
                goto LABEL_24;
            }
            else if (v20[1] == 18)
            {
              a2 = *(llvm::Function **)(v21 + 8);
              a3 = (llvm::BasicBlock *)*(unsigned __int16 *)(v21 + 16);
              v22 = *(_QWORD *)v21 == 0x6E6974756F726F63 && a2 == (llvm::Function *)0x6C70736572702E65;
              if (v22 && (_DWORD)a3 == 29801)
              {
LABEL_24:
                v24 = (unint64_t)"unsplited coroutine call" & 0xFFFFFFFFFFFFFF00;
                v25 = (unint64_t)"unsplited coroutine call" & 0xFF;
                return v24 | v25;
              }
            }
            if (v21 == -1)
              break;
            v17 = i + v19;
          }
        }
      }
    }
  }
  v26 = *(unsigned __int8 *)(a1 + 16);
  v79 = v7;
  if (v26 == 84)
  {
    v27 = 0;
  }
  else if (v26 == 39)
  {
    v27 = (*(_DWORD *)(a1 + 80) + 1);
  }
  else
  {
    v27 = 2;
  }
  v28 = *(_DWORD *)(a1 + 20);
  if (v28 < 0 && (v76 = a1 - 32 * (v28 & 0x7FFFFFF), v77 = *(_QWORD *)(v76 - 8), (v77 & 0xFFFFFFFF0) != 0))
  {
    v30 = -(uint64_t)(v28 & 0x7FFFFFF);
    v29 = (*(_DWORD *)(v76 - 12) - *(_DWORD *)(v76 - v77));
  }
  else
  {
    v29 = 0;
    v30 = -(uint64_t)(v28 & 0x7FFFFFF);
  }
  v31 = -32 * v27 - 32 * v29 - 32 * v30 - 32;
  if ((v31 & 0x1FFFFFFFE0) == 0)
  {
LABEL_34:
    v36 = *(_QWORD *)(a1 + 64);
    if (v36 && (*(_BYTE *)(v36 + 12) & 4) != 0)
    {
LABEL_38:
      if ((*(_BYTE *)(v36 + 15) & 8) == 0)
        goto LABEL_39;
LABEL_93:
      v37 = "noinline call site attribute";
      goto LABEL_99;
    }
    if (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 2))
    {
      v36 = *(_QWORD *)(a1 + 64);
      if (!v36)
      {
LABEL_39:
        v25 = (unint64_t)llvm::isInlineViable(v8, a2, a3);
        v24 = v25 & 0xFFFFFFFFFFFFFF00;
        return v24 | v25;
      }
      goto LABEL_38;
    }
    v38 = *(llvm::AttributeFuncs **)(*(_QWORD *)(a1 + 40) + 56);
    v39 = a4(a5, v8);
    v40 = v39;
    v80 = *(_QWORD *)v39;
    __dst = v83;
    v82 = 0x600000000;
    v41 = *(unsigned int *)(v39 + 16);
    if (!(_DWORD)v41 || &v80 == (uint64_t *)v39)
    {
LABEL_50:
      v84 = *(_DWORD *)(v40 + 72);
      if (!byte_1ED7F18B0
        && !(*(unsigned int (**)(_QWORD, llvm::AttributeFuncs *, llvm *))(**(_QWORD **)v79 + 1032))(*(_QWORD *)v79, v38, v8))
      {
        goto LABEL_69;
      }
      v44 = a4(a5, v38);
      v46 = v44;
      if (!byte_1ED7F1F70)
      {
        if (*(_DWORD *)(v44 + 72) == v84
          && !memcmp(*(const void **)(v44 + 8), __dst, 8 * *(unsigned int *)(v44 + 16)))
        {
LABEL_74:
          v60 = llvm::AttributeFuncs::areOutlineCompatible(v38, v8, v45);
          goto LABEL_75;
        }
LABEL_69:
        v60 = 0;
LABEL_75:
        if (__dst != v83)
          free(__dst);
        if (!v60)
        {
          v37 = "conflicting attributes";
          goto LABEL_99;
        }
        v61 = *((_QWORD *)v38 + 14);
        if (!v61)
          goto LABEL_81;
        v62 = *(_BYTE *)(v61 + 17);
        if ((v62 & 8) != 0)
        {
          v37 = "optnone attribute";
          goto LABEL_99;
        }
        if ((v62 & 1) == 0)
        {
LABEL_81:
          v63 = *((_QWORD *)v8 + 14);
          if (v63 && (*(_BYTE *)(v63 + 17) & 1) != 0)
          {
            v37 = "nullptr definitions incompatible";
            goto LABEL_99;
          }
        }
        if (*((_BYTE *)v8 + 16) == 3)
        {
          Section = llvm::GlobalValue::getSection(v8);
          if (v65 == 12
            && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
            && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
          {
            goto LABEL_131;
          }
        }
        if ((*((_DWORD *)v8 + 8) & 0xFu) - 5 >= 4)
        {
          v24 = (unint64_t)"interposable" & 0xFFFFFFFFFFFFFF00;
          v25 = (unint64_t)"interposable" & 0xFF;
          if (((1 << (*((_DWORD *)v8 + 8) & 0xF)) & 0x614) != 0)
            return v24 | v25;
        }
        v66 = (llvm::Module *)*((_QWORD *)v8 + 5);
        if (v66)
        {
          if (llvm::Module::getSemanticInterposition(v66) && (*((_BYTE *)v8 + 33) & 0x40) == 0)
          {
LABEL_131:
            v24 = (unint64_t)"interposable" & 0xFFFFFFFFFFFFFF00;
            v25 = (unint64_t)"interposable" & 0xFF;
            return v24 | v25;
          }
        }
        v67 = *((_QWORD *)v8 + 14);
        if (v67 && (*(_BYTE *)(v67 + 15) & 8) != 0)
        {
          v37 = "noinline function attribute";
          goto LABEL_99;
        }
        v68 = *(_QWORD *)(a1 + 64);
        if ((!v68 || (*(_BYTE *)(v68 + 15) & 8) == 0)
          && !llvm::CallBase::hasFnAttrOnCalledFunction(a1, 27))
        {
          LOBYTE(v25) = 0;
          v24 = 0;
          return v24 | v25;
        }
        goto LABEL_93;
      }
      v47 = 0;
      v48 = (const void **)(v44 + 8);
      __s1 = v87;
      v86 = 0x600000000;
      v49 = *(_DWORD *)(v44 + 16);
      if (!v49 || &__s1 == (void **)(v44 + 8))
      {
LABEL_60:
        v52 = *(_DWORD *)(v46 + 72);
        v88 = v52;
        v53 = v84;
        if (v52 < v84)
        {
          v70 = v52 & 0x3F;
          v71 = v47;
          if (v70)
            *((_QWORD *)__s1 + v47 - 1) &= ~(-1 << v70);
          v88 = v53;
          v72 = v53 + 63;
          if (v47 != (v53 + 63) >> 6)
          {
            v73 = v72 >> 6;
            if (v47 > v73)
            {
              LODWORD(v86) = v72 >> 6;
              v47 = v72 >> 6;
            }
            else
            {
              v74 = v47;
              if (v73 > HIDWORD(v86))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v87, v73, 8);
                v74 = v86;
                v47 = v86;
              }
              if (v73 != v71)
                bzero((char *)__s1 + 8 * v74, 8 * (v73 - v71));
              v47 += v73 - v71;
              LODWORD(v86) = v47;
              v53 = v88;
            }
          }
          v54 = __s1;
          if ((v53 & 0x3F) != 0)
            *((_QWORD *)__s1 + v47 - 1) &= ~(-1 << (v53 & 0x3F));
        }
        else
        {
          v54 = __s1;
          v53 = v52;
        }
        v55 = v82;
        if ((_DWORD)v82)
        {
          v56 = (uint64_t *)__dst;
          v57 = v54;
          do
          {
            v58 = *v56++;
            *v57++ |= v58;
            --v55;
          }
          while (v55);
        }
        v59 = v53 == *(_DWORD *)(v46 + 72) && memcmp(v54, *v48, 8 * v47) == 0;
        if (v54 != (_QWORD *)v87)
          free(v54);
        if (v59)
          goto LABEL_74;
        goto LABEL_69;
      }
      v50 = v87;
      v51 = *(_DWORD *)(v46 + 16);
      if (v49 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s1, (uint64_t)v87, *(unsigned int *)(v46 + 16), 8);
        v51 = *(_DWORD *)(v46 + 16);
        if (!v51)
        {
LABEL_59:
          LODWORD(v86) = v49;
          v47 = v49;
          goto LABEL_60;
        }
        v50 = __s1;
      }
      memcpy(v50, *v48, 8 * v51);
      goto LABEL_59;
    }
    if (v41 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v83, v41, 8);
      v43 = *(unsigned int *)(v40 + 16);
      if (!(_DWORD)v43)
      {
LABEL_49:
        LODWORD(v82) = v41;
        goto LABEL_50;
      }
      v42 = __dst;
    }
    else
    {
      v42 = v83;
      v43 = v41;
    }
    memcpy(v42, *(const void **)(v40 + 8), 8 * v43);
    goto LABEL_49;
  }
  v32 = 0;
  v33 = *(_DWORD *)(*((_QWORD *)v8 + 5) + 276);
  v34 = (v31 >> 5);
  v35 = a1;
  while (!llvm::CallBase::paramHasAttr(a1, v32, 69)
       || v33 == *(_DWORD *)(**(_QWORD **)(v35 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)) + 8) >> 8)
  {
    ++v32;
    v35 += 32;
    if (v34 == v32)
      goto LABEL_34;
  }
  v24 = (unint64_t)"byval arguments without alloca address space" & 0xFFFFFFFFFFFFFF00;
  v25 = (unint64_t)"byval arguments without alloca address space" & 0xFF;
  return v24 | v25;
}

const char *llvm::isInlineViable(llvm *this, llvm::Function *a2, llvm::BasicBlock *a3)
{
  uint64_t v4;
  BOOL v5;
  char *v6;
  char *v7;
  const char *result;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *i;
  _QWORD *v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char hasFnAttrOnCalledFunction;
  int v22;
  llvm::BlockAddress *v23;
  uint64_t v24;
  char *v25;

  v4 = *((_QWORD *)this + 14);
  if (v4)
    v5 = *(char *)(v4 + 17) < 0;
  else
    v5 = 0;
  v6 = (char *)this + 72;
  v7 = (char *)*((_QWORD *)this + 10);
  if (v7 == (char *)this + 72)
    return 0;
  while (1)
  {
    v9 = v7 - 24;
    if (!v7)
      v9 = 0;
    v11 = v9 + 40;
    v10 = *((_QWORD *)v9 + 5);
    if (v10)
      v12 = v10 - 24;
    else
      v12 = 0;
    if (*(unsigned __int8 *)(v12 + 16) - 29 >= 0xB)
      v12 = 0;
    if (*(_BYTE *)(v12 + 16) == 32)
      return "contains indirect branches";
    if ((*((_WORD *)v9 + 9) & 0x7FFF) != 0)
    {
      v25 = v9;
      v23 = llvm::BlockAddress::get(*((llvm::BlockAddress **)v9 + 7), (llvm::Function *)v9, a3);
      v9 = v25;
      v24 = *((_QWORD *)v23 + 1);
      if (v24)
        break;
    }
LABEL_16:
    for (i = (_QWORD *)*((_QWORD *)v9 + 6); i != v11; i = (_QWORD *)i[1])
    {
      if (i)
        v14 = i - 3;
      else
        v14 = 0;
      v15 = *((unsigned __int8 *)v14 + 16) - 33;
      v16 = v15 > 0x33;
      v17 = (1 << v15) & 0x8000000000041;
      if (!v16 && v17 != 0)
      {
        v19 = *(i - 7);
        if (v19)
        {
          if (*(_BYTE *)(v19 + 16) || *(_QWORD *)(v19 + 24) != i[6])
          {
            v19 = 0;
          }
          else if ((llvm *)v19 == this)
          {
            return "recursive call";
          }
        }
        if (!v5 && *((_BYTE *)i - 8) == 84)
        {
          v20 = i[5];
          if (v20 && *(char *)(v20 + 17) < 0)
            return "exposes returns-twice attribute";
          hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(i - 3), 47);
          result = "exposes returns-twice attribute";
          if ((hasFnAttrOnCalledFunction & 1) != 0)
            return result;
        }
        if (v19)
        {
          v22 = *(_DWORD *)(v19 + 36);
          if (v22 == 173)
            return "disallowed inlining of @llvm.localescape";
          result = "disallowed inlining of @llvm.icall.branch.funnel";
          if (v22 == 157)
            return result;
          if (v22 == 315)
            return "contains VarArgs initialized with va_start";
        }
      }
    }
    result = 0;
    v7 = (char *)*((_QWORD *)v7 + 1);
    if (v7 == v6)
      return result;
  }
  while (*(_BYTE *)(*(_QWORD *)(v24 + 24) + 16) == 39)
  {
    v24 = *(_QWORD *)(v24 + 8);
    v9 = v25;
    if (!v24)
      goto LABEL_16;
  }
  return "blockaddress used outside of callbr";
}

llvm::APInt *sub_1C4E556F4@<X0>(llvm::APInt *result@<X0>, llvm::APInt *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::APInt *v3;
  _BYTE v5[32];
  char v6;

  v3 = result;
  v5[0] = 0;
  v6 = 0;
  if (*((_BYTE *)a2 + 32))
  {
    sub_1C6199A28((llvm::APInt *)v5, a2);
    v6 = 1;
    *(_QWORD *)a3 = 0x80000000;
    *(_QWORD *)(a3 + 8) = v3;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 48) = 0;
    result = sub_1C6199A28((llvm::APInt *)(a3 + 16), (llvm::APInt *)v5);
    *(_BYTE *)(a3 + 48) = 1;
    if (v6)
      return (llvm::APInt *)sub_1C61996A0((uint64_t)v5);
  }
  else
  {
    *(_QWORD *)a3 = 0x80000000;
    *(_QWORD *)(a3 + 8) = result;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 48) = 0;
  }
  return result;
}

llvm::APInt *sub_1C4E55798@<X0>(llvm::APInt *result@<X0>, llvm::APInt *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::APInt *v3;
  _BYTE v5[32];
  char v6;

  v3 = result;
  v5[0] = 0;
  v6 = 0;
  if (*((_BYTE *)a2 + 32))
  {
    sub_1C6199A28((llvm::APInt *)v5, a2);
    v6 = 1;
    *(_QWORD *)a3 = 0x7FFFFFFFLL;
    *(_QWORD *)(a3 + 8) = v3;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 48) = 0;
    result = sub_1C6199A28((llvm::APInt *)(a3 + 16), (llvm::APInt *)v5);
    *(_BYTE *)(a3 + 48) = 1;
    if (v6)
      return (llvm::APInt *)sub_1C61996A0((uint64_t)v5);
  }
  else
  {
    *(_QWORD *)a3 = 0x7FFFFFFFLL;
    *(_QWORD *)(a3 + 8) = result;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 48) = 0;
  }
  return result;
}

uint64_t llvm::getInlineParams@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;

  *(_BYTE *)(a2 + 12) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 28) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 44) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 60) = 0;
  *(_WORD *)(a2 + 64) = 256;
  v2 = (unsigned __int16)word_1ED82DA08;
  v3 = dword_1ED82DA80;
  if (!word_1ED82DA08)
    v3 = this;
  v4 = dword_1ED82DB40;
  *(_DWORD *)a2 = v3;
  *(_DWORD *)(a2 + 4) = v4;
  *(_BYTE *)(a2 + 8) = 1;
  *(_DWORD *)(a2 + 36) = dword_1ED82DD80;
  *(_BYTE *)(a2 + 40) = 1;
  if (word_1ED82DDC8)
  {
    *(_DWORD *)(a2 + 44) = dword_1ED82DE40;
    *(_BYTE *)(a2 + 48) = 1;
  }
  *(_DWORD *)(a2 + 52) = dword_1ED82DC00;
  *(_BYTE *)(a2 + 56) = 1;
  if (!v2)
  {
    *(_DWORD *)(a2 + 28) = 5;
    *(_BYTE *)(a2 + 32) = 1;
    *(_DWORD *)(a2 + 20) = 50;
    *(_BYTE *)(a2 + 24) = 1;
    goto LABEL_9;
  }
  if (word_1ED82DC48)
  {
LABEL_9:
    *(_DWORD *)(a2 + 12) = dword_1ED82DCC0;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return this;
}

_QWORD *llvm::InlineCostAnnotationPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, llvm::SmallPtrSetImplBase *a4@<X8>)
{
  const llvm::Module *v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  size_t *v28;
  const void *v29;
  size_t v30;
  size_t v31;
  _DWORD *v32;
  uint64_t ***v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ****v38;
  uint64_t ***v39;
  int v40;
  int v41;
  size_t *v42;
  const void *v43;
  size_t v44;
  size_t v45;
  _WORD *v46;
  llvm::raw_ostream *v47;
  _BYTE *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *result;
  uint64_t (**v54)(_QWORD *);
  llvm::SmallPtrSetImplBase *v55;
  uint64_t v56;
  uint64_t v58[12];
  char v59;
  __int128 v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  int v75;
  _QWORD v76[18];
  int v77;
  char v78;
  char v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  int v83;
  _BYTE v84[152];
  int v85;
  char v86;
  uint64_t v87;
  int v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  __int16 v94;
  char v95;
  _QWORD v96[2];
  char v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t (**v104)();
  uint64_t *v105;
  _BYTE v106[16];
  uint64_t *v107;
  _DWORD v108[2];
  char v109;
  int v110;
  char v111;
  int v112;
  char v113;
  int v114;
  char v115;
  int v116;
  char v117;
  int v118;
  char v119;
  int v120;
  char v121;
  int v122;
  __int16 v123;
  _QWORD *v124;
  const llvm::Module *v125;
  uint64_t v126;
  char v127;
  char v128;
  char v129;
  char v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  _BYTE v135[432];
  _QWORD v136[3];
  _QWORD *v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  LOBYTE(v58[0]) = 1;
  byte_1ED7F1970 = 1;
  if (!qword_1ED7F19A8)
    sub_1C485C2F0();
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)qword_1ED7F19A8 + 48))(qword_1ED7F19A8, v58);
  v136[0] = &off_1E81382C0;
  v136[1] = a3;
  v137 = v136;
  v125 = *(const llvm::Module **)(a2 + 40);
  v7 = v125;
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v130 = 0;
  v131 = 0;
  v133 = 0;
  v132 = 0;
  v134 = 0;
  llvm::ProfileSummaryInfo::refresh((unsigned __int8 *)&v125);
  llvm::DataLayout::DataLayout((llvm::DataLayout *)v135, v7);
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E813D768;
  v8[1] = v135;
  v9 = &dword_1ED82D9C0;
  v124 = v8;
  LOBYTE(v110) = 0;
  v111 = 0;
  LOBYTE(v112) = 0;
  v113 = 0;
  LOBYTE(v114) = 0;
  v115 = 0;
  LOBYTE(v118) = 0;
  v119 = 0;
  v122 = 0;
  v123 = 256;
  if (word_1ED82DA08)
    v9 = &dword_1ED82DA80;
  v108[0] = *v9;
  v108[1] = dword_1ED82DB40;
  v109 = 1;
  v116 = dword_1ED82DD80;
  v117 = 1;
  if (word_1ED82DDC8)
  {
    v118 = dword_1ED82DE40;
    v119 = 1;
  }
  v120 = dword_1ED82DC00;
  v121 = 1;
  v55 = a4;
  if (!word_1ED82DA08)
  {
    v114 = 5;
    v115 = 1;
    v112 = 50;
    v113 = 1;
    goto LABEL_10;
  }
  if (word_1ED82DC48)
  {
LABEL_10:
    v110 = dword_1ED82DCC0;
    v111 = 1;
  }
  v10 = *(_QWORD *)(a2 + 80);
  v56 = a2 + 72;
  if (v10 == a2 + 72)
    goto LABEL_72;
  do
  {
    v11 = v10 - 24;
    if (!v10)
      v11 = 0;
    v12 = v11 + 40;
    for (i = *(_QWORD *)(v11 + 48); i != v12; i = *(_QWORD *)(i + 8))
    {
      v14 = i - 24;
      if (!i)
        v14 = 0;
      v15 = *(unsigned __int8 *)(v14 + 16);
      if (v15 == 84)
        v16 = v14;
      else
        v16 = 0;
      if (i)
      {
        if (v15 == 84)
        {
          v17 = *(_QWORD *)(v16 - 32);
          if (v17)
          {
            if (!*(_BYTE *)(v17 + 16)
              && *(_QWORD *)(v17 + 24) == *(_QWORD *)(v16 + 72)
              && (*(_QWORD *)(v17 + 72) != v17 + 72 || (*(_BYTE *)(v17 + 34) & 0x80) != 0))
            {
              llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v106, *(const llvm::Function **)(v16 - 32));
              v58[2] = (uint64_t)sub_1C4E5E070;
              v58[3] = (uint64_t)v136;
              v58[4] = 0;
              v58[6] = (uint64_t)&v125;
              v58[7] = v17;
              v58[8] = *(_QWORD *)(v17 + 40) + 272;
              v58[9] = (uint64_t)v106;
              v59 = 0;
              v58[11] = 0;
              v62 = 0;
              v60 = 0u;
              v61 = 0u;
              v65 = 0;
              v63 = 0;
              v64 = 0;
              v68 = 0;
              v66 = 0;
              v67 = 0;
              v71 = 0;
              v69 = 0;
              v70 = 0;
              v58[10] = v16;
              v72 = v76;
              v73 = v76;
              v74 = 16;
              v75 = 0;
              v77 = 0;
              v76[16] = 0;
              v76[17] = 0;
              v78 = 1;
              v80 = v84;
              v81 = v84;
              v82 = 16;
              v83 = 0;
              memset(&v84[128], 0, 24);
              v58[1] = (uint64_t)&v124;
              v58[0] = (uint64_t)&off_1E8138008;
              v85 = 2147483641;
              v86 = 1;
              v87 = 0;
              v88 = 0;
              v89 = v108;
              v90 = 0;
              v91 = 0;
              v92 = 0;
              v93 = v108[0];
              v94 = 1;
              v95 = 0;
              v97 = 0;
              v98 = 0;
              *(_QWORD *)((char *)v96 + 6) = 0;
              v96[0] = 0;
              v99 = 1;
              v100 = 0;
              v101 = 0;
              v102 = 0;
              v103 = 0;
              v104 = &off_1E81381A8;
              v105 = v58;
              v79 = v123;
              sub_1C4E53B28(v58);
              v18 = *a1;
              v19 = (void *)*((_QWORD *)*a1 + 4);
              if (*((_QWORD *)*a1 + 3) - (_QWORD)v19 > 0x17uLL)
              {
                qmemcpy(v19, "      Analyzing call of ", 24);
                *((_QWORD *)v18 + 4) += 24;
              }
              else
              {
                v18 = llvm::raw_ostream::write(*a1, "      Analyzing call of ", 0x18uLL);
              }
              if ((*(_BYTE *)(v17 + 23) & 0x10) != 0)
              {
                v20 = ***(_QWORD ***)v17;
                v21 = *(_QWORD *)(v20 + 152);
                v22 = *(unsigned int *)(v20 + 168);
                if (!(_DWORD)v22)
                  goto LABEL_37;
                LODWORD(v23) = (v22 - 1) & ((v17 >> 4) ^ (v17 >> 9));
                v24 = (uint64_t *)(v21 + 16 * v23);
                v25 = *v24;
                if (*v24 != v17)
                {
                  v26 = 1;
                  while (v25 != -4096)
                  {
                    v27 = v23 + v26++;
                    v23 = v27 & (v22 - 1);
                    v25 = *(_QWORD *)(v21 + 16 * v23);
                    if (v25 == v17)
                    {
                      v24 = (uint64_t *)(v21 + 16 * v23);
                      goto LABEL_38;
                    }
                  }
LABEL_37:
                  v24 = (uint64_t *)(v21 + 16 * v22);
                }
LABEL_38:
                v28 = (size_t *)v24[1];
                v31 = *v28;
                v29 = v28 + 2;
                v30 = v31;
                v32 = (_DWORD *)*((_QWORD *)v18 + 4);
                if (v31 <= *((_QWORD *)v18 + 3) - (_QWORD)v32)
                {
                  if (v30)
                  {
                    memcpy(v32, v29, v30);
                    v32 = (_DWORD *)(*((_QWORD *)v18 + 4) + v30);
                    *((_QWORD *)v18 + 4) = v32;
                  }
                }
                else
                {
                  v18 = llvm::raw_ostream::write(v18, (const char *)v29, v30);
                  v32 = (_DWORD *)*((_QWORD *)v18 + 4);
                }
              }
              else
              {
                v32 = (_DWORD *)*((_QWORD *)v18 + 4);
              }
              if (*((_QWORD *)v18 + 3) - (_QWORD)v32 > 0xBuLL)
              {
                v32[2] = 980575596;
                *(_QWORD *)v32 = *(_QWORD *)"... (caller:";
                *((_QWORD *)v18 + 4) += 12;
              }
              else
              {
                v18 = llvm::raw_ostream::write(v18, "... (caller:", 0xCuLL);
              }
              v33 = *(uint64_t ****)(*(_QWORD *)(v16 + 40) + 56);
              if ((*((_BYTE *)v33 + 23) & 0x10) != 0)
              {
                v34 = ***v33;
                v35 = *(_QWORD *)(v34 + 152);
                v36 = *(unsigned int *)(v34 + 168);
                if (!(_DWORD)v36)
                  goto LABEL_51;
                LODWORD(v37) = (v36 - 1) & ((v33 >> 4) ^ (v33 >> 9));
                v38 = (uint64_t ****)(v35 + 16 * v37);
                v39 = *v38;
                if (*v38 != v33)
                {
                  v40 = 1;
                  while (v39 != (uint64_t ***)-4096)
                  {
                    v41 = v37 + v40++;
                    v37 = v41 & (v36 - 1);
                    v39 = *(uint64_t ****)(v35 + 16 * v37);
                    if (v39 == v33)
                    {
                      v38 = (uint64_t ****)(v35 + 16 * v37);
                      goto LABEL_52;
                    }
                  }
LABEL_51:
                  v38 = (uint64_t ****)(v35 + 16 * v36);
                }
LABEL_52:
                v42 = (size_t *)v38[1];
                v45 = *v42;
                v43 = v42 + 2;
                v44 = v45;
                v46 = (_WORD *)*((_QWORD *)v18 + 4);
                if (v45 <= *((_QWORD *)v18 + 3) - (_QWORD)v46)
                {
                  if (v44)
                  {
                    memcpy(v46, v43, v44);
                    v46 = (_WORD *)(*((_QWORD *)v18 + 4) + v44);
                    *((_QWORD *)v18 + 4) = v46;
                  }
                }
                else
                {
                  v18 = llvm::raw_ostream::write(v18, (const char *)v43, v44);
                  v46 = (_WORD *)*((_QWORD *)v18 + 4);
                }
              }
              else
              {
                v46 = (_WORD *)*((_QWORD *)v18 + 4);
              }
              if (*((_QWORD *)v18 + 3) - (_QWORD)v46 > 1uLL)
              {
                *v46 = 2601;
                *((_QWORD *)v18 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v18, ")\n", 2uLL);
              }
              sub_1C4E52B50((uint64_t)v58, *a1);
              v47 = *a1;
              v48 = (_BYTE *)*((_QWORD *)*a1 + 4);
              if (*((_BYTE **)*a1 + 3) == v48)
              {
                llvm::raw_ostream::write(v47, "\n", 1uLL);
              }
              else
              {
                *v48 = 10;
                ++*((_QWORD *)v47 + 4);
              }
              sub_1C4E54B0C((uint64_t)v58);
              v49 = v107;
              v107 = 0;
              if (v49)
              {
                v50 = *v49;
                *v49 = 0;
                if (v50)
                  (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
                MEMORY[0x1CAA32FC0](v49, 0x20C4093837F09);
              }
              continue;
            }
          }
        }
      }
    }
    v10 = *(_QWORD *)(v10 + 8);
  }
  while (v10 != v56);
LABEL_72:
  *(_QWORD *)v55 = (char *)v55 + 32;
  *((_QWORD *)v55 + 1) = (char *)v55 + 32;
  *((_QWORD *)v55 + 2) = 2;
  *((_DWORD *)v55 + 6) = 0;
  *((_QWORD *)v55 + 6) = (char *)v55 + 80;
  *((_QWORD *)v55 + 7) = (char *)v55 + 80;
  *((_QWORD *)v55 + 8) = 2;
  *((_DWORD *)v55 + 18) = 0;
  sub_1C4774094(v55, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v51 = v124;
  v124 = 0;
  if (v51)
    (*(void (**)(_QWORD *))(*v51 + 8))(v51);
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)v135);
  MEMORY[0x1CAA32FB4](v132, 8);
  v52 = v126;
  v126 = 0;
  if (v52)
    sub_1C4E5DDC4((uint64_t)&v126, v52);
  result = v137;
  if (v137 == v136)
  {
    v54 = (uint64_t (**)(_QWORD *))(v136[0] + 32);
    result = v136;
    return (_QWORD *)(*v54)(result);
  }
  else if (v137)
  {
    v54 = (uint64_t (**)(_QWORD *))(*v137 + 40);
    return (_QWORD *)(*v54)(result);
  }
  return result;
}

void sub_1C4E56120(uint64_t a1)
{
  sub_1C4E54B0C(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4E56144(uint64_t result)
{
  *(_DWORD *)(result + 660) = *(_DWORD *)(result + 656);
  return result;
}

uint64_t *sub_1C4E56150(uint64_t *result, const llvm::BasicBlock *a2)
{
  uint64_t *v3;
  uint64_t **v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;

  v3 = result;
  if (*((_BYTE *)result + 654))
  {
    v4 = (uint64_t **)((uint64_t (*)(uint64_t, uint64_t))result[4])(result[5], result[7]);
    result = llvm::BlockFrequencyInfo::getBlockProfileCount(v4, a2, 0);
    if (!result)
      *((_DWORD *)v3 + 166) += *((_DWORD *)v3 + 164) - *((_DWORD *)v3 + 165);
  }
  if (*((_BYTE *)v3 + 712))
  {
    v5 = (_QWORD *)*((_QWORD *)a2 + 5);
    if (v5 == (_QWORD *)((char *)a2 + 40))
    {
      v6 = 0;
    }
    else
    {
      if (v5)
        v6 = v5 - 3;
      else
        v6 = 0;
      if (*((unsigned __int8 *)v6 + 16) - 29 >= 0xB)
        v6 = 0;
    }
    v7 = *((unsigned __int8 *)v6 + 16);
    if (v7 != 30)
      __asm { BR              X11 }
    if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) == 3)
    {
      *((_DWORD *)v3 + 162) -= *((_DWORD *)v3 + 152);
      *((_BYTE *)v3 + 712) = 0;
    }
  }
  return result;
}

void sub_1C4E56230(uint64_t a1@<X8>)
{
  if (((*(_DWORD *)(a1 + 20) >> 1) & 0x3FFFFFFu) >= 2)
    JUMPOUT(0x1C4E561F4);
  JUMPOUT(0x1C4E56208);
}

void sub_1C4E56248()
{
  JUMPOUT(0x1C4E56238);
}

void sub_1C4E56258()
{
  JUMPOUT(0x1C4E56238);
}

uint64_t *sub_1C4E56264(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = a2;
  if (byte_1ED7F1970)
  {
    v2 = result;
    v3 = *((_DWORD *)result + 164);
    v4 = (uint64_t)(result + 78);
    *(_DWORD *)sub_1C4E57F00((uint64_t)(result + 78), &v5) = v3;
    LODWORD(v2) = *((_DWORD *)v2 + 162);
    result = sub_1C4E57F00(v4, &v5);
    *((_DWORD *)result + 2) = (_DWORD)v2;
  }
  return result;
}

uint64_t *sub_1C4E562CC(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = a2;
  if (byte_1ED7F1970)
  {
    v2 = result;
    v3 = *((_DWORD *)result + 164);
    v4 = (uint64_t)(result + 78);
    *((_DWORD *)sub_1C4E57F00((uint64_t)(result + 78), &v5) + 1) = v3;
    LODWORD(v2) = *((_DWORD *)v2 + 162);
    result = sub_1C4E57F00(v4, &v5);
    *((_DWORD *)result + 3) = (_DWORD)v2;
  }
  return result;
}

const char *sub_1C4E56334(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unint64_t StringFnAttrAsInt;
  unint64_t v15;
  unint64_t v16;
  int v18;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const llvm::BasicBlock *v23;
  _QWORD *i;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t *BlockProfileCount;
  unsigned int v29;
  unint64_t v30;
  llvm::APInt **v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  llvm::APInt *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _BOOL4 v41;
  llvm::APInt *v42;
  const llvm::BasicBlock *v43;
  uint64_t **v44;
  const llvm::DataLayout *v45;
  int CallsiteCost;
  uint64_t *v47;
  unsigned int v48;
  unint64_t v49;
  void **p_src;
  int v51;
  BOOL v52;
  int v53;
  const unint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  llvm::APInt *v64;
  unint64_t v65;
  llvm::APInt **v66;
  unint64_t v67;
  llvm::APInt *v68;
  _BOOL4 v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  llvm::APInt *v74;
  llvm::APInt *v75;
  unsigned int v76;
  unint64_t v77;
  llvm::APInt *v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD v86[6];
  _QWORD v87[2];
  void *__src;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91[2];
  int v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  int v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) + 56) + 112);
  if (v2 && *(char *)(v2 + 13) < 0)
  {
    v3 = *(_QWORD *)(a1 + 56);
    __src = &v90;
    v89 = 0x100000000;
    v96 = 0;
    v91[0] = 0;
    v91[1] = 0;
    v92 = 0;
    v95 = 0;
    v93 = 0;
    v94 = v3;
    sub_1C53BA620((uint64_t)&__src, 0);
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v81 = 0u;
    v82 = 0u;
    v83 = 0;
    v84 = v86;
    v85 = 0x400000000;
    v86[4] = v87;
    v86[5] = 0;
    v87[0] = 0;
    v87[1] = 1;
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)&v78, (uint64_t)&__src);
    v5 = (uint64_t *)*((_QWORD *)&v81 + 1);
    v4 = (uint64_t *)v81;
    if ((_QWORD)v81 == *((_QWORD *)&v81 + 1))
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      do
      {
        v7 = *v4++;
        v8 = sub_1C477672C(a1 + 216, **(_QWORD **)(v7 + 32));
        v9 = *(_QWORD *)(a1 + 224);
        if (v9 == *(_QWORD *)(a1 + 216))
          v10 = 236;
        else
          v10 = 232;
        if (v8 == (_QWORD *)(v9 + 8 * *(unsigned int *)(a1 + v10)))
          ++v6;
      }
      while (v4 != v5);
    }
    *(_DWORD *)(a1 + 656) += 25 * v6;
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(&v78);
    sub_1C4DC4E38(v91);
    if (__src != &v90)
      free(__src);
  }
  v12 = *(_DWORD *)(a1 + 112);
  v11 = *(_DWORD *)(a1 + 116);
  if (v11 <= v12 / 0xA)
  {
    v13 = *(_DWORD *)(a1 + 648) - *(_DWORD *)(a1 + 604);
  }
  else
  {
    if (v11 > v12 >> 1)
      goto LABEL_20;
    v13 = *(_DWORD *)(a1 + 648) - *(_DWORD *)(a1 + 604) / 2;
  }
  *(_DWORD *)(a1 + 648) = v13;
LABEL_20:
  StringFnAttrAsInt = llvm::getStringFnAttrAsInt(*(_QWORD *)(a1 + 80), "function-inline-cost", 0x14uLL);
  if (HIDWORD(StringFnAttrAsInt))
    *(_DWORD *)(a1 + 656) = StringFnAttrAsInt;
  v15 = llvm::getStringFnAttrAsInt(*(_QWORD *)(a1 + 80), "function-inline-cost-multiplier", 0x1FuLL);
  if (HIDWORD(v15))
    *(_DWORD *)(a1 + 656) *= (_DWORD)v15;
  v16 = llvm::getStringFnAttrAsInt(*(_QWORD *)(a1 + 80), "function-inline-threshold", 0x19uLL);
  if (HIDWORD(v16))
    *(_DWORD *)(a1 + 648) = v16;
  if (!*(_BYTE *)(a1 + 654) || !*(_DWORD *)(a1 + 648))
  {
    if (*(_BYTE *)(a1 + 653))
      return 0;
    *(_BYTE *)(a1 + 668) = 1;
    v18 = *(_DWORD *)(a1 + 648);
    if (v18 <= 1)
      v18 = 1;
    if (*(_DWORD *)(a1 + 656) >= v18)
      return "Cost over threshold.";
    else
      return 0;
  }
  v19 = (uint64_t **)(*(uint64_t (**)(_QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56));
  LODWORD(v89) = 128;
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = v20 + 72;
  v22 = *(_QWORD *)(v20 + 80);
  if (v22 != v20 + 72)
  {
LABEL_36:
    if (v22)
      v23 = (const llvm::BasicBlock *)(v22 - 24);
    else
      v23 = 0;
    LODWORD(v79) = 128;
    llvm::APInt::initSlowCase((llvm::APInt *)&v78, 0, 0);
    for (i = (_QWORD *)*((_QWORD *)v23 + 6); ; i = (_QWORD *)i[1])
    {
      if (i == (_QWORD *)((char *)v23 + 40))
      {
        BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(v19, v23, 0);
        v29 = v79;
        if (v79 <= 0x40)
        {
          v78 = (llvm::APInt *)((_QWORD)v78 * (_QWORD)BlockProfileCount);
          if ((_DWORD)v79)
            goto LABEL_59;
LABEL_78:
          v30 = 0;
          goto LABEL_60;
        }
        llvm::APInt::tcMultiplyPart(v78, (unint64_t *)v78, (const unint64_t *)BlockProfileCount, 0, ((unint64_t)v79 + 63) >> 6, ((unint64_t)v79 + 63) >> 6, 0);
        v29 = v79;
        if (!(_DWORD)v79)
          goto LABEL_78;
LABEL_59:
        v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v29;
        if (v29 >= 0x41)
          v31 = (llvm::APInt **)((char *)v78 + 8 * (((unint64_t)v29 + 63) >> 6) - 8);
        else
LABEL_60:
          v31 = &v78;
        *v31 = (llvm::APInt *)((unint64_t)*v31 & v30);
        v32 = v89;
        if (v89 >= 0x41)
        {
          v34 = 0;
          v35 = (unint64_t *)__src;
          v36 = v78;
          v37 = ((unint64_t)v89 + 63) >> 6;
          v38 = v37;
          do
          {
            v39 = *(_QWORD *)v36;
            v36 = (llvm::APInt *)((char *)v36 + 8);
            v40 = v39 + *v35;
            v41 = v40 + 1 <= *v35;
            if (v34)
            {
              ++v40;
              v34 = v41;
            }
            else
            {
              v34 = v40 < *v35;
            }
            *v35++ = v40;
            --v38;
          }
          while (v38);
          *((_QWORD *)__src + (v37 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v32;
        }
        else
        {
          if ((_DWORD)v89)
            v33 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v89;
          else
            v33 = 0;
          __src = (void *)(v33 & ((unint64_t)v78 + (_QWORD)__src));
        }
        if (v79 >= 0x41 && v78)
          MEMORY[0x1CAA32F9C](v78, 0x1000C8000313F17);
        v22 = *(_QWORD *)(v22 + 8);
        if (v22 == v21)
        {
          v20 = *(_QWORD *)(a1 + 56);
          break;
        }
        goto LABEL_36;
      }
      if (i)
        v25 = i - 3;
      else
        v25 = 0;
      v26 = *((unsigned __int8 *)v25 + 16);
      if (v26 != 30)
        v25 = 0;
      if (i && v26 == 30)
      {
        if ((*((_DWORD *)v25 + 5) & 0x7FFFFFF) == 3)
        {
          v75 = (llvm::APInt *)*(v25 - 12);
          v77 = 0;
          if ((sub_1C4E5818C((uint64_t *)(a1 + 120), &v75, &v77) & 1) != 0)
          {
            v27 = *(_QWORD *)(v77 + 8);
            if (v27)
            {
              if (*(_BYTE *)(v27 + 16) == 16)
                goto LABEL_55;
            }
          }
        }
      }
      else if (i)
      {
        v75 = (llvm::APInt *)(i - 3);
        v77 = 0;
        if (sub_1C4E5818C((uint64_t *)(a1 + 120), &v75, &v77))
        {
LABEL_55:
          llvm::APInt::operator+=((uint64_t)&v78, 5uLL);
          continue;
        }
      }
    }
  }
  llvm::Function::getEntryCount((uint64_t ***)v20, 0, (uint64_t)&v78);
  v42 = v78;
  llvm::APInt::operator+=((uint64_t)&__src, (unint64_t)v78 >> 1);
  llvm::APInt::udiv((llvm::APInt *)&__src, (unint64_t)v42, (llvm::APInt *)&v75);
  if (v89 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  __src = v75;
  LODWORD(v89) = v76;
  v43 = *(const llvm::BasicBlock **)(*(_QWORD *)(a1 + 80) + 40);
  v44 = (uint64_t **)(*(uint64_t (**)(_QWORD, _QWORD))(a1 + 32))(*(_QWORD *)(a1 + 40), *((_QWORD *)v43 + 7));
  CallsiteCost = llvm::getCallsiteCost(*(llvm **)(a1 + 80), *(llvm::CallBase **)(a1 + 64), v45);
  llvm::APInt::operator+=((uint64_t)&__src, CallsiteCost);
  v47 = llvm::BlockFrequencyInfo::getBlockProfileCount(v44, v43, 0);
  v48 = v89;
  if (v89 <= 0x40)
  {
    __src = (void *)((_QWORD)__src * (_QWORD)v47);
    if ((_DWORD)v89)
      goto LABEL_85;
LABEL_125:
    v49 = 0;
    goto LABEL_86;
  }
  llvm::APInt::tcMultiplyPart((llvm::APInt *)__src, (unint64_t *)__src, (const unint64_t *)v47, 0, ((unint64_t)v89 + 63) >> 6, ((unint64_t)v89 + 63) >> 6, 0);
  v48 = v89;
  if (!(_DWORD)v89)
    goto LABEL_125;
LABEL_85:
  v49 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v48;
  if (v48 >= 0x41)
  {
    p_src = (void **)((char *)__src + 8 * (((unint64_t)v48 + 63) >> 6) - 8);
    goto LABEL_87;
  }
LABEL_86:
  p_src = &__src;
LABEL_87:
  *p_src = (void *)((unint64_t)*p_src & v49);
  v51 = *(_DWORD *)(a1 + 656) - *(_DWORD *)(a1 + 664);
  v52 = __OFSUB__(v51, dword_1ED7F1BB0);
  v53 = v51 - dword_1ED7F1BB0;
  if ((v53 < 0) ^ v52 | (v53 == 0))
    v53 = 1;
  v54 = (const unint64_t *)v53;
  v76 = 128;
  llvm::APInt::initSlowCase((llvm::APInt *)&v75, v53, 0);
  sub_1C6199584((llvm::APInt *)(a1 + 672), (uint64_t *)&v75, (uint64_t)&__src);
  if (v76 > 0x40 && v75)
    MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
  v55 = v89;
  if (v89 > 0x40)
  {
    v59 = v89 + 63;
    v60 = (char *)operator new[]();
    v77 = (unint64_t)v60;
    memcpy(v60, __src, (v59 >> 3) & 0x3FFFFFF8);
    llvm::APInt::tcMultiplyPart((llvm::APInt *)v60, (unint64_t *)v60, (const unint64_t *)dword_1ED7F1AF0, 0, v59 >> 6, v59 >> 6, 0);
    v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v55;
    v58 = (unint64_t *)&v60[8 * (v59 >> 6) - 8];
    v56 = *v58;
  }
  else
  {
    v56 = (_QWORD)__src * dword_1ED7F1AF0;
    v77 = v56;
    v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v89;
    if (!(_DWORD)v89)
      v57 = 0;
    v58 = &v77;
  }
  *v58 = v56 & v57;
  v61 = *(_QWORD *)(a1 + 48);
  if (*(_BYTE *)(v61 + 24))
    v62 = *(_QWORD *)(v61 + 16);
  else
    v62 = -1;
  v76 = 128;
  llvm::APInt::initSlowCase((llvm::APInt *)&v75, v62, 0);
  v63 = v76;
  if (v76 > 0x40)
  {
    v73 = ((unint64_t)v76 + 63) >> 6;
    v74 = v75;
    llvm::APInt::tcMultiplyPart(v75, (unint64_t *)v75, v54, 0, v73, v73, 0);
    v65 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v63;
    v66 = (llvm::APInt **)((char *)v74 + 8 * (v73 - 1));
    v64 = *v66;
  }
  else
  {
    v64 = (llvm::APInt *)((_QWORD)v75 * (_QWORD)v54);
    v75 = (llvm::APInt *)((_QWORD)v75 * (_QWORD)v54);
    v65 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v76;
    if (!v76)
      v65 = 0;
    v66 = &v75;
  }
  *v66 = (llvm::APInt *)((unint64_t)v64 & v65);
  v67 = v77;
  if (v55 > 0x40)
  {
    v68 = v75;
    v70 = ((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8;
    while (v70)
    {
      v71 = *(_QWORD *)(v77 - 8 + v70);
      v72 = *(_QWORD *)((char *)v75 + v70 - 8);
      v70 -= 8;
      if (v71 != v72)
      {
        v69 = v71 <= v72;
        goto LABEL_107;
      }
    }
    v69 = 0;
  }
  else
  {
    v68 = v75;
    v69 = v77 < (unint64_t)v75;
  }
LABEL_107:
  if (v63 >= 0x41 && v68)
    MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
  if (v55 >= 0x41 && v67)
    MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
  if (v89 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  *(_BYTE *)(a1 + 669) = 1;
  if (v69)
    return "Cost over threshold.";
  else
    return 0;
}

uint64_t sub_1C4E56C48(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(a1 + 653) || *(_BYTE *)(a1 + 596) || *(_DWORD *)(a1 + 656) < *(_DWORD *)(a1 + 648))
    return 0;
  v1 = 1;
  *(_BYTE *)(a1 + 668) = 1;
  return v1;
}

const char *sub_1C4E56C80(uint64_t a1, uint64_t a2, const llvm::DataLayout *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t (*v23)(_QWORD, uint64_t);
  uint64_t *v24;
  llvm::ProfileSummaryInfo *v25;
  unint64_t BlockFreq;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  llvm::ProfileSummaryInfo *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  llvm::ProfileSummaryInfo *v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  llvm::Constant *v47;
  uint64_t v48;
  int v49;
  int v51;

  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(v4 + 16) == 33)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v4 - 96) + 40);
    if (v6)
      v7 = v6 - 24;
    else
      v7 = 0;
    if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB)
      v7 = 0;
    if (*(_BYTE *)(v7 + 16) != 35)
    {
      v8 = *(_QWORD *)(v4 + 40);
      goto LABEL_16;
    }
LABEL_15:
    *(_DWORD *)(a1 + 648) = 0;
    goto LABEL_92;
  }
  v8 = *(_QWORD *)(v4 + 40);
  v9 = *(_QWORD *)(v8 + 40);
  if (v9)
    v10 = v9 - 24;
  else
    v10 = 0;
  if (*(unsigned __int8 *)(v10 + 16) - 29 >= 0xB)
    v10 = 0;
  if (*(_BYTE *)(v10 + 16) == 35)
    goto LABEL_15;
LABEL_16:
  v11 = *(_QWORD *)(v8 + 56);
  v12 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 48))(**(_QWORD **)(a1 + 8));
  v13 = *(_QWORD *)(v11 + 112);
  if (!v13)
  {
LABEL_19:
    v14 = 50;
    goto LABEL_29;
  }
  if (*(char *)(v13 + 13) < 0)
  {
    v14 = 0;
    v12 = 0;
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 616) + 28);
  }
  else
  {
    if ((*(_BYTE *)(v13 + 17) & 4) == 0)
      goto LABEL_19;
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 616) + 20);
    v14 = 50;
  }
  v16 = *v15;
  if ((int)v16 >= *(_DWORD *)(a1 + 648))
    v17 = *(_DWORD *)(a1 + 648);
  else
    v17 = v16;
  if ((v16 & 0xFF00000000) != 0)
    v18 = v17;
  else
    v18 = *(_DWORD *)(a1 + 648);
  *(_DWORD *)(a1 + 648) = v18;
  if (*(char *)(v13 + 13) < 0)
    goto LABEL_75;
LABEL_29:
  v19 = *(_QWORD *)(v5 + 112);
  if (v19 && (*(_BYTE *)(v19 + 13) & 0x20) != 0)
  {
    v20 = *(_DWORD *)(a1 + 648);
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + 4);
    if ((int)v21 <= v20)
      v22 = *(_DWORD *)(a1 + 648);
    else
      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + 4);
    if ((v21 & 0xFF00000000) != 0)
      v20 = v22;
    *(_DWORD *)(a1 + 648) = v20;
  }
  v23 = *(uint64_t (**)(_QWORD, uint64_t))(a1 + 32);
  if (v23)
    v24 = (uint64_t *)v23(*(_QWORD *)(a1 + 40), v11);
  else
    v24 = 0;
  v25 = *(llvm::ProfileSummaryInfo **)(a1 + 48);
  if (v25
    && *((_QWORD *)v25 + 1)
    && llvm::ProfileSummaryInfo::isHotCallSite(v25, (const llvm::BasicBlock **)v4, (uint64_t **)v24))
  {
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + 36);
  }
  else
  {
    if (!v24 || !*(_BYTE *)(*(_QWORD *)(a1 + 616) + 48))
      goto LABEL_47;
    BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(v24, *(_QWORD *)(v4 + 40));
    v27 = *v24;
    if (*v24)
      v27 = *(_QWORD *)(*(_QWORD *)(v27 + 8) + 16);
    if (BlockFreq < v27 * dword_1ED7F1D30)
    {
LABEL_47:
      v28 = 0;
      LOBYTE(v29) = 0;
      v30 = 0;
      goto LABEL_50;
    }
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + 44);
  }
  v30 = v29 & 0xFFFFFF00;
  v28 = v29 & 0xFFFFFFFF00000000;
LABEL_50:
  v31 = *(_QWORD *)(v11 + 112);
  if (v31)
  {
    if ((*(_BYTE *)(v31 + 17) & 4) != 0)
      goto LABEL_56;
    LOBYTE(v31) = *(char *)(v31 + 13) < 0;
  }
  if ((v31 & 1) == 0 && (v28 & 0xFF00000000) != 0)
  {
    v32 = v30 | v29;
LABEL_74:
    *(_DWORD *)(a1 + 648) = v32;
    goto LABEL_75;
  }
LABEL_56:
  v33 = *(llvm::ProfileSummaryInfo **)(a1 + 48);
  if (v33 && *((_QWORD *)v33 + 1))
  {
    if (llvm::ProfileSummaryInfo::isColdCallSite(v33, (const llvm::BasicBlock **)v4, (uint64_t **)v24))
    {
LABEL_63:
      v14 = 0;
      v12 = 0;
      v39 = 0;
      v40 = *(_DWORD *)(a1 + 648);
      v41 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + 52);
      goto LABEL_78;
    }
  }
  else if (v24)
  {
    v34 = (unint64_t)(((((unint64_t)dword_1ED7F1C70 << 31) | 0x30)
                            * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
    v35 = llvm::BlockFrequencyInfo::getBlockFreq(v24, *(_QWORD *)(v4 + 40));
    v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 56) + 80);
    v37 = v36 ? v36 - 24 : 0;
    v38 = llvm::BlockFrequencyInfo::getBlockFreq(v24, v37);
    v51 = v34;
    if (v35 < llvm::BranchProbability::scale((llvm::BranchProbability *)&v51, v38))
      goto LABEL_63;
  }
  v42 = *(llvm::ProfileSummaryInfo **)(a1 + 48);
  if (v42)
  {
    if (llvm::ProfileSummaryInfo::isFunctionEntryHot(v42, (uint64_t ***)v5))
    {
      v32 = *(_DWORD *)(a1 + 648);
      v43 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + 4);
      if ((int)v43 <= v32)
        v44 = *(_DWORD *)(a1 + 648);
      else
        v44 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + 4);
      if ((v43 & 0xFF00000000) != 0)
        v32 = v44;
      goto LABEL_74;
    }
    if (!llvm::ProfileSummaryInfo::isFunctionEntryCold(*(llvm::ProfileSummaryInfo **)(a1 + 48), (const llvm::Function *)v5))goto LABEL_75;
    v14 = 0;
    v12 = 0;
    v39 = 0;
    v40 = *(_DWORD *)(a1 + 648);
    v41 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + 12);
LABEL_78:
    if ((int)v41 >= v40)
      v45 = v40;
    else
      v45 = v41;
    if ((v41 & 0xFF00000000) != 0)
      v40 = v45;
    *(_DWORD *)(a1 + 648) = v40;
    goto LABEL_84;
  }
LABEL_75:
  v39 = -15000;
LABEL_84:
  *(_DWORD *)(a1 + 648) += (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 8) + 40))(**(_QWORD **)(a1 + 8), v4);
  v46 = *(_DWORD *)(a1 + 648)
      * (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
  *(_DWORD *)(a1 + 648) = v46;
  *(_DWORD *)(a1 + 608) = v46 * v14 / 100;
  *(_DWORD *)(a1 + 604) = v46 * v12 / 100;
  v47 = *(llvm::Constant **)(a1 + 56);
  if ((*((_DWORD *)v47 + 8) & 0xFu) - 7 <= 1 && llvm::Constant::hasNLiveUses(v47, 1u))
  {
    v48 = *(_QWORD *)(v4 - 32);
    if (!v48 || *(_BYTE *)(v48 + 16) || *(_QWORD *)(v48 + 24) != *(_QWORD *)(v4 + 72))
      v48 = 0;
    if (*(_QWORD *)(a1 + 56) == v48)
      *(_DWORD *)(a1 + 656) += v39;
  }
LABEL_92:
  *(_DWORD *)(a1 + 648) += *(_DWORD *)(a1 + 604) + *(_DWORD *)(a1 + 608);
  v49 = *(_DWORD *)(a1 + 656) - llvm::getCallsiteCost(*(llvm **)(a1 + 80), *(llvm::CallBase **)(a1 + 64), a3);
  *(_DWORD *)(a1 + 656) = v49;
  if ((*(_WORD *)(*(_QWORD *)(a1 + 56) + 18) & 0x3FF0) == 0x90)
  {
    v49 += 2000;
    *(_DWORD *)(a1 + 656) = v49;
  }
  if (v49 < *(_DWORD *)(a1 + 648) || *(_BYTE *)(a1 + 596))
    return 0;
  else
    return "high cost";
}

int32x2_t sub_1C4E57144(uint64_t a1, uint64_t a2)
{
  int v3;
  int32x2_t result;
  _QWORD *v5;
  BOOL v6;
  int v7;
  uint64_t v8;

  v8 = 0;
  v3 = sub_1C6144BDC(*(_QWORD *)(a1 + 728), *(_DWORD *)(a1 + 744), a2, &v8);
  v5 = (_QWORD *)v8;
  if (v3)
    v6 = v8 == *(_QWORD *)(a1 + 728) + 16 * *(unsigned int *)(a1 + 744);
  else
    v6 = 1;
  if (!v6)
  {
    v7 = *(_DWORD *)(v8 + 8);
    *(_DWORD *)(a1 + 656) += v7;
    *(_DWORD *)(a1 + 716) -= v7;
    *(_DWORD *)(a1 + 720) += v7;
    *v5 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 736), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 736) = result;
  }
  return result;
}

uint64_t sub_1C4E571E0(uint64_t result)
{
  *(_DWORD *)(result + 656) += *(_DWORD *)(result + 600);
  *(_DWORD *)(result + 600) = 0;
  return result;
}

uint64_t sub_1C4E571F8(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 84)
  {
    v3 = 0;
  }
  else if (v2 == 39)
  {
    v3 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v3 = 2;
  }
  v4 = 0;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = -(uint64_t)(v5 & 0x7FFFFFF);
  if (v5 < 0)
  {
    v7 = a2 - 32 * (v5 & 0x7FFFFFF);
    v8 = *(_QWORD *)(v7 - 8);
    if ((v8 & 0xFFFFFFFF0) != 0)
      v4 = *(_DWORD *)(v7 - 12) - *(_DWORD *)(v7 - v8);
    else
      v4 = 0;
  }
  *(_DWORD *)(result + 656) += dword_1ED7F1DF0
                             + 5 * ((-32 * v3 + 32 * (unint64_t)-v4 - 32 * v6 - 32) >> 5);
  return result;
}

BOOL sub_1C4E572A0(uint64_t a1, uint64_t a2)
{
  unint64_t StringFnAttrAsInt;
  unint64_t v5;

  StringFnAttrAsInt = llvm::getStringFnAttrAsInt(a2, "call-threshold-bonus", 0x14uLL);
  if (HIDWORD(StringFnAttrAsInt))
    *(_DWORD *)(a1 + 648) += StringFnAttrAsInt;
  v5 = llvm::getStringFnAttrAsInt(a2, "call-inline-cost", 0x10uLL);
  if (HIDWORD(v5))
    *(_DWORD *)(a1 + 656) += v5;
  return HIDWORD(v5) == 0;
}

uint64_t sub_1C4E57318(uint64_t result)
{
  *(_DWORD *)(result + 656) += dword_1ED7F1DF0;
  return result;
}

uint64_t sub_1C4E57330(uint64_t result)
{
  *(_DWORD *)(result + 600) += 5;
  return result;
}

uint64_t sub_1C4E57340(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 84)
  {
    v3 = 0;
  }
  else if (v2 == 39)
  {
    v3 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v3 = 2;
  }
  v4 = 0;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = -(uint64_t)(v5 & 0x7FFFFFF);
  if (v5 < 0)
  {
    v7 = a2 - 32 * (v5 & 0x7FFFFFF);
    v8 = *(_QWORD *)(v7 - 8);
    if ((v8 & 0xFFFFFFFF0) != 0)
      v4 = *(_DWORD *)(v7 - 12) - *(_DWORD *)(v7 - v8);
    else
      v4 = 0;
  }
  *(_DWORD *)(result + 656) += 5 * ((-32 * v3 + 32 * (unint64_t)-v4 - 32 * v6 - 32) >> 5);
  return result;
}

uint64_t sub_1C4E573DC(uint64_t result)
{
  *(_DWORD *)(result + 656) += 15;
  return result;
}

uint64_t sub_1C4E573EC(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  int v35;
  __int128 v36;
  int v37;
  __int128 v38;
  int v39;
  __int128 v40;
  int v41;
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  int v45;
  _OWORD v46[9];
  int v47;
  char v48;
  char v49;
  _OWORD *v50;
  _OWORD *v51;
  uint64_t v52;
  int v53;
  _OWORD v54[9];
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;
  int v59;
  _OWORD *v60;
  __int128 v61;
  int v62;
  int v63;
  __int16 v64;
  char v65;
  _QWORD v66[2];
  char v67;
  char v68;
  char v69;
  uint64_t v70;
  __int128 v71;
  int v72;
  uint64_t (**v73)();
  uint64_t *v74;
  _OWORD v75[3];
  __int128 v76;
  int v77;

  v4 = result;
  v5 = *(unsigned __int8 *)(a3 + 16);
  if (v5 == 84)
  {
    v6 = 0;
  }
  else if (v5 == 39)
  {
    v6 = (*(_DWORD *)(a3 + 80) + 1);
  }
  else
  {
    v6 = 2;
  }
  v7 = 0;
  v8 = *(_DWORD *)(a3 + 20);
  v9 = -(uint64_t)(v8 & 0x7FFFFFF);
  if (v8 < 0)
  {
    v21 = a3 - 32 * (v8 & 0x7FFFFFF);
    v22 = *(_QWORD *)(v21 - 8);
    if ((v22 & 0xFFFFFFFF0) != 0)
      v7 = *(_DWORD *)(v21 - 12) - *(_DWORD *)(v21 - v22);
    else
      v7 = 0;
  }
  v10 = 5 * ((-32 * v6 + 32 * (unint64_t)-v7 - 32 * v9 - 32) >> 5) + *(_DWORD *)(result + 656);
  *(_DWORD *)(result + 656) = v10;
  if (a4 && *(_BYTE *)(result + 652))
  {
    v11 = *(_QWORD *)(result + 616);
    v75[0] = *(_OWORD *)v11;
    v12 = *(_OWORD *)(v11 + 16);
    v13 = *(_OWORD *)(v11 + 32);
    v14 = *(_OWORD *)(v11 + 48);
    v77 = *(_DWORD *)(v11 + 64);
    v75[2] = v13;
    v76 = v14;
    v75[1] = v12;
    LODWORD(v75[0]) = 100;
    v15 = *(_QWORD *)(result + 8);
    v16 = *(_QWORD *)(result + 48);
    v17 = *(_QWORD *)(result + 72);
    v18 = *(_OWORD *)(result + 32);
    v24 = *(_OWORD *)(result + 16);
    v25 = v18;
    v26 = v16;
    v27 = a2;
    v28 = *(_QWORD *)(a2 + 40) + 272;
    v29 = v17;
    v30 = a3;
    v31 = 0;
    v32 = 0;
    v33 = 0u;
    v34 = 0u;
    v35 = 0;
    v37 = 0;
    v36 = 0u;
    v39 = 0;
    v38 = 0u;
    v41 = 0;
    v40 = 0u;
    v42 = v46;
    v43 = v46;
    v44 = 16;
    v46[8] = 0u;
    v45 = 0;
    v47 = 0;
    v48 = 1;
    v50 = v54;
    v51 = v54;
    v52 = 16;
    v53 = 0;
    v54[8] = 0u;
    v55 = 0;
    v23[0] = (uint64_t)&off_1E8138008;
    v23[1] = v15;
    v56 = 2147483641;
    v19 = 1;
    if (!byte_1ED7F1EB0)
    {
      if (v17)
        v20 = 0;
      else
        v20 = BYTE13(v76) == 0;
      v19 = !v20;
    }
    v57 = v19;
    v58 = 0;
    v59 = 0;
    v60 = v75;
    v61 = 0uLL;
    v62 = 0;
    v63 = 100;
    v64 = 0;
    v65 = 0;
    v67 = 0;
    v68 = 0;
    *(_QWORD *)((char *)v66 + 6) = 0;
    v66[0] = 0;
    v69 = 1;
    v70 = 0;
    v71 = 0uLL;
    v72 = 0;
    v73 = &off_1E81381A8;
    v74 = v23;
    v49 = v77;
    if (!sub_1C4E53B28(v23))
      *(_DWORD *)(v4 + 656) -= (v63 - LODWORD(v66[0])) & ~((v63 - LODWORD(v66[0])) >> 31);
    return sub_1C4E54B0C((uint64_t)v23);
  }
  else
  {
    *(_DWORD *)(result + 656) = dword_1ED7F1DF0 + v10;
  }
  return result;
}

uint64_t sub_1C4E57668()
{
  return 1;
}

uint64_t sub_1C4E57670()
{
  return 1;
}

uint64_t sub_1C4E57678(uint64_t result, int a2, unsigned int a3)
{
  int v3;
  int v4;

  if (a2)
  {
    v3 = *(_DWORD *)(result + 592);
    v4 = 5 * a2 + *(_DWORD *)(result + 656) + 20;
  }
  else
  {
    if (a3 <= 3)
    {
      v4 = *(_DWORD *)(result + 656) + 10 * a3;
      goto LABEL_8;
    }
    v3 = *(_DWORD *)(result + 592);
    v4 = *(_DWORD *)(result + 656) + 10 * (3 * (int)a3 / 2) - 10;
  }
  if (v4 >= v3)
    v4 = v3;
LABEL_8:
  *(_DWORD *)(result + 656) = v4;
  return result;
}

uint64_t sub_1C4E576E4(uint64_t result)
{
  *(_DWORD *)(result + 656) += 5;
  return result;
}

uint64_t sub_1C4E576F4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  result = sub_1C4E58498(*(_QWORD *)(a1 + 728), *(_DWORD *)(a1 + 744), a2, &v8);
  v5 = v8;
  if ((result & 1) != 0)
    goto LABEL_8;
  result = a1 + 728;
  v6 = *(_DWORD *)(a1 + 736);
  v7 = *(_DWORD *)(a1 + 744);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 740) > v7 >> 3)
      goto LABEL_5;
  }
  else
  {
    v7 *= 2;
  }
  sub_1C4E5852C(result, v7);
  v8 = 0;
  result = sub_1C4E58498(*(_QWORD *)(a1 + 728), *(_DWORD *)(a1 + 744), a2, &v8);
  v5 = v8;
LABEL_5:
  ++*(_DWORD *)(a1 + 736);
  if (*(_QWORD *)v5 != -4096)
    --*(_DWORD *)(a1 + 740);
  *(_QWORD *)v5 = a2;
  *(_DWORD *)(v5 + 8) = 0;
LABEL_8:
  *(_DWORD *)(v5 + 8) = 0;
  return result;
}

uint64_t sub_1C4E577D0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  result = sub_1C6144BDC(*(_QWORD *)(a1 + 728), *(_DWORD *)(a1 + 744), a2, &v5);
  if ((result & 1) != 0)
    v4 = v5;
  else
    v4 = *(_QWORD *)(a1 + 728) + 16 * *(unsigned int *)(a1 + 744);
  *(_DWORD *)(v4 + 8) += 5;
  *(_DWORD *)(a1 + 716) += 5;
  return result;
}

void sub_1C4E57840(uint64_t a1)
{
  sub_1C4E578C4(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4E57874()
{
  return 0;
}

uint64_t sub_1C4E5787C()
{
  return 0;
}

uint64_t sub_1C4E57884()
{
  return 0;
}

uint64_t sub_1C4E57898()
{
  return 1;
}

uint64_t sub_1C4E578C4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_1E81380D8;
  v2 = *(void **)(a1 + 416);
  if (v2 != *(void **)(a1 + 408))
    free(v2);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 376), 8);
  v3 = *(void **)(a1 + 224);
  if (v3 != *(void **)(a1 + 216))
    free(v3);
  v4 = *(unsigned int *)(a1 + 208);
  v5 = *(_QWORD *)(a1 + 192);
  if ((_DWORD)v4)
  {
    v6 = v5 + 16;
    v7 = 32 * v4;
    do
    {
      v8 = *(_QWORD *)(v6 - 16);
      if (v8 != -4096 && v8 != -8192 && *(_DWORD *)(v6 + 8) >= 0x41u && *(_QWORD *)v6)
      {
        v10 = v7;
        v11 = v6;
        MEMORY[0x1CAA32F9C](*(_QWORD *)v6, 0x1000C8000313F17);
        v7 = v10;
        v6 = v11;
      }
      v6 += 32;
      v7 -= 32;
    }
    while (v7);
    v5 = *(_QWORD *)(a1 + 192);
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 168), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 144), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 120), 8);
  return a1;
}

void sub_1C4E579C8()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4E579DC(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  unint64_t v18;
  int v19;
  void *v20;
  llvm::raw_ostream *v21;
  unint64_t v22;
  int v23;
  void *v24;
  llvm::raw_ostream *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  llvm::raw_ostream *v29;
  unint64_t v30;
  int v31;
  _WORD *v32;
  void *v33;
  llvm::raw_ostream *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  llvm::raw_ostream *v38;
  unint64_t v39;
  int v40;
  void *v41;
  uint64_t v42;
  llvm::Value *v43;
  _OWORD *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;

  v6 = *(_QWORD *)(a1 + 8);
  v46 = a2;
  v47 = 0;
  if (sub_1C4E580F4(*(_QWORD *)(v6 + 624), *(_DWORD *)(v6 + 640), a2, &v47))
  {
    v7 = v47;
    v8 = *(_QWORD *)(v6 + 624);
    v9 = *(_DWORD *)(v6 + 640);
  }
  else
  {
    v8 = *(_QWORD *)(v6 + 624);
    v9 = *(_DWORD *)(v6 + 640);
    v7 = v8 + 24 * v9;
  }
  if (v7 == v8 + 24 * v9)
  {
    v41 = (void *)*((_QWORD *)a3 + 4);
    if (*((_QWORD *)a3 + 3) - (_QWORD)v41 > 0x20uLL)
    {
      qmemcpy(v41, "; No analysis for the instruction", 33);
      *((_QWORD *)a3 + 4) += 33;
    }
    else
    {
      llvm::raw_ostream::write(a3, "; No analysis for the instruction", 0x21uLL);
    }
    goto LABEL_31;
  }
  v10 = (int *)sub_1C4E57F00(v6 + 624, &v46);
  v11 = *v10;
  v12 = v10[1];
  v13 = v10[2];
  v14 = v10[3];
  v15 = (_OWORD *)*((_QWORD *)a3 + 4);
  if (*((_QWORD *)a3 + 3) - (_QWORD)v15 > 0xFuLL)
  {
    *v15 = *(_OWORD *)"; cost before = ";
    *((_QWORD *)a3 + 4) += 16;
    v16 = a3;
    if ((v11 & 0x80000000) == 0)
      goto LABEL_7;
  }
  else
  {
    v16 = llvm::raw_ostream::write(a3, "; cost before = ", 0x10uLL);
    if ((v11 & 0x80000000) == 0)
    {
LABEL_7:
      v17 = v16;
      v18 = v11;
      v19 = 0;
      goto LABEL_8;
    }
  }
  v18 = -(uint64_t)v11;
  v17 = v16;
  v19 = 1;
LABEL_8:
  sub_1C5E21910(v17, v18, 0, 0, v19);
  v20 = (void *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v20 > 0xEuLL)
  {
    qmemcpy(v20, ", cost after = ", 15);
    *((_QWORD *)v16 + 4) += 15;
    if ((v12 & 0x80000000) == 0)
      goto LABEL_10;
  }
  else
  {
    v16 = llvm::raw_ostream::write(v16, ", cost after = ", 0xFuLL);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_10:
      v21 = v16;
      v22 = v12;
      v23 = 0;
      goto LABEL_11;
    }
  }
  v22 = -(uint64_t)v12;
  v21 = v16;
  v23 = 1;
LABEL_11:
  sub_1C5E21910(v21, v22, 0, 0, v23);
  v24 = (void *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v24 > 0x14uLL)
  {
    qmemcpy(v24, ", threshold before = ", 21);
    *((_QWORD *)v16 + 4) += 21;
    if ((v13 & 0x80000000) == 0)
      goto LABEL_13;
  }
  else
  {
    v16 = llvm::raw_ostream::write(v16, ", threshold before = ", 0x15uLL);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_13:
      v25 = v16;
      v26 = v13;
      v27 = 0;
      goto LABEL_14;
    }
  }
  v26 = -(uint64_t)v13;
  v25 = v16;
  v27 = 1;
LABEL_14:
  sub_1C5E21910(v25, v26, 0, 0, v27);
  v28 = *((_QWORD *)v16 + 4);
  if ((unint64_t)(*((_QWORD *)v16 + 3) - v28) > 0x13)
  {
    *(_DWORD *)(v28 + 16) = 540876914;
    *(_OWORD *)v28 = *(_OWORD *)", threshold after = ";
    *((_QWORD *)v16 + 4) += 20;
    if ((v14 & 0x80000000) == 0)
      goto LABEL_16;
  }
  else
  {
    v16 = llvm::raw_ostream::write(v16, ", threshold after = ", 0x14uLL);
    if ((v14 & 0x80000000) == 0)
    {
LABEL_16:
      v29 = v16;
      v30 = v14;
      v31 = 0;
      goto LABEL_17;
    }
  }
  v30 = -(uint64_t)v14;
  v29 = v16;
  v31 = 1;
LABEL_17:
  sub_1C5E21910(v29, v30, 0, 0, v31);
  v32 = (_WORD *)*((_QWORD *)v16 + 4);
  if (*((_QWORD *)v16 + 3) - (_QWORD)v32 > 1uLL)
  {
    *v32 = 8236;
    *((_QWORD *)v16 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v16, ", ", 2uLL);
  }
  v33 = (void *)*((_QWORD *)a3 + 4);
  if (*((_QWORD *)a3 + 3) - (_QWORD)v33 > 0xCuLL)
  {
    qmemcpy(v33, "cost delta = ", 13);
    *((_QWORD *)a3 + 4) += 13;
    v34 = a3;
  }
  else
  {
    v34 = llvm::raw_ostream::write(a3, "cost delta = ", 0xDuLL);
  }
  v35 = v12 - v11;
  if ((_DWORD)v12 - (_DWORD)v11 < 0)
  {
    v35 = v11 - v12;
    v36 = 1;
  }
  else
  {
    v36 = 0;
  }
  sub_1C5E21910(v34, v35, 0, 0, v36);
  if ((_DWORD)v14 != (_DWORD)v13)
  {
    v37 = *((_QWORD *)a3 + 4);
    if ((unint64_t)(*((_QWORD *)a3 + 3) - v37) > 0x13)
    {
      *(_DWORD *)(v37 + 16) = 540876897;
      *(_OWORD *)v37 = *(_OWORD *)", threshold delta = ";
      *((_QWORD *)a3 + 4) += 20;
      v38 = a3;
    }
    else
    {
      v38 = llvm::raw_ostream::write(a3, ", threshold delta = ", 0x14uLL);
    }
    v39 = (int)v14 - (int)v13;
    if ((int)v14 - (int)v13 < 0)
    {
      v39 = -(uint64_t)((int)v14 - (int)v13);
      v40 = 1;
    }
    else
    {
      v40 = 0;
    }
    sub_1C5E21910(v38, v39, 0, 0, v40);
  }
LABEL_31:
  v42 = *(_QWORD *)(a1 + 8);
  v46 = a2;
  v47 = 0;
  if (sub_1C4E5818C((uint64_t *)(v42 + 120), &v46, &v47)
    && v47 != *(_QWORD *)(v42 + 120) + 16 * *(unsigned int *)(v42 + 136))
  {
    v47 = a2;
    v43 = (llvm::Value *)sub_1C4E58228((uint64_t *)(v42 + 120), &v47)[1];
    v44 = (_OWORD *)*((_QWORD *)a3 + 4);
    if (*((_QWORD *)a3 + 3) - (_QWORD)v44 > 0xFuLL)
    {
      *v44 = *(_OWORD *)", simplified to ";
      *((_QWORD *)a3 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(a3, ", simplified to ", 0x10uLL);
    }
    llvm::Value::print(v43, a3, 1);
  }
  v45 = (_BYTE *)*((_QWORD *)a3 + 4);
  if (*((_BYTE **)a3 + 3) == v45)
  {
    llvm::raw_ostream::write(a3, "\n", 1uLL);
  }
  else
  {
    *v45 = 10;
    ++*((_QWORD *)a3 + 4);
  }
}

uint64_t *sub_1C4E57F00(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v25 = 0;
  v4 = sub_1C4E580F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v25);
  v5 = v25;
  if ((v4 & 1) != 0)
    return v5 + 1;
  v26 = v25;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    v8 = 2 * v7;
    goto LABEL_9;
  }
  v8 = *(_DWORD *)(a1 + 16);
  if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    v11 = *(_QWORD *)a1;
    v12 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
    v14 = ((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8);
    if ((v14 + 1) > 0x40)
      v15 = v14 + 1;
    else
      v15 = 64;
    *(_DWORD *)(a1 + 16) = v15;
    v16 = operator new(24 * v15, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v16;
    if (v11)
    {
      *(_QWORD *)(a1 + 8) = 0;
      v17 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v17)
      {
        v18 = 24 * v17;
        do
        {
          *v16 = -4096;
          v16 += 3;
          v18 -= 24;
        }
        while (v18);
      }
      if ((_DWORD)v7)
      {
        v19 = (_OWORD *)(v11 + 8);
        v20 = 24 * v7;
        do
        {
          v21 = *((_QWORD *)v19 - 1);
          if ((v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v27 = 0;
            sub_1C4E580F4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v21, &v27);
            v22 = v27;
            *v27 = v21;
            *(_OWORD *)(v22 + 1) = *v19;
            ++*(_DWORD *)(a1 + 8);
          }
          v19 = (_OWORD *)((char *)v19 + 24);
          v20 -= 24;
        }
        while (v20);
      }
      MEMORY[0x1CAA32FB4](v11, 8);
      v16 = *(_QWORD **)a1;
      LODWORD(v23) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      v23 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v23)
      {
        v24 = 0;
        do
        {
          v16[v24] = -4096;
          v24 += 3;
        }
        while (3 * v23 != v24);
      }
    }
    sub_1C4E580F4((uint64_t)v16, v23, *a2, &v26);
    v6 = *(_DWORD *)(a1 + 8);
    v5 = v26;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (*v5 != -4096)
    --*(_DWORD *)(a1 + 12);
  v9 = *a2;
  v5[1] = 0;
  v5[2] = 0;
  *v5 = v9;
  return v5 + 1;
}

uint64_t sub_1C4E580F4(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t sub_1C4E5818C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *a1;
    v7 = v3 - 1;
    v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v4 = (_QWORD *)(*a1 + 16 * v8);
    v9 = *v4;
    if (*a2 == *v4)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(v6 + 16 * (v13 & v7));
        v9 = *v4;
        if (*a2 == *v4)
          goto LABEL_3;
      }
      result = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v4;
  return result;
}

_QWORD *sub_1C4E58228(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4DA97DC(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4E58284((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C4E58284(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C4E58334(a1, v7);
  v9 = 0;
  sub_1C4DA97DC((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4E58334(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4E583EC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4E583EC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C4DA97DC((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C4E58498(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_9;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_9:
  *a4 = v6;
  return v10;
}

_QWORD *sub_1C4E5852C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6199780(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void *sub_1C4E585E4(uint64_t a1, uint64_t *a2)
{
  void *result;
  char v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, *a2);
  if (v5)
  {
    v6 = *a2;
    v7 = *(unsigned int *)(a1 + 168);
    if (v7 >= *(_DWORD *)(a1 + 172))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 160, a1 + 176, v7 + 1, 8);
      LODWORD(v7) = *(_DWORD *)(a1 + 168);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v7) = v6;
    ++*(_DWORD *)(a1 + 168);
  }
  return result;
}

void sub_1C4E58654(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  unsigned int v7;
  llvm::SmallPtrSetImplBase *v8;
  uint64_t Successor;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[2];
  _QWORD *v21;
  void *v22;
  unsigned int v23;
  unsigned int v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x1E0C80C00];
  v20[0] = (uint64_t)a1;
  v20[1] = (uint64_t)&v21;
  v21 = a1;
  v3 = *(_QWORD *)(a2 + 40);
  if (v3 != a2 + 40)
  {
    if (v3)
      v4 = v3 - 24;
    else
      v4 = 0;
    if (*(_BYTE *)(v4 + 16) != 30)
    {
      v6 = 2;
      switch(*(_BYTE *)(v4 + 16))
      {
        case 0x1E:
LABEL_47:
          __break(1u);
          goto LABEL_48;
        case 0x1F:
          v6 = (*(_DWORD *)(v4 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_45;
        case 0x20:
        case 0x26:
LABEL_48:
          v6 = (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_45;
        case 0x21:
          goto LABEL_9;
        case 0x24:
          v6 = *(_WORD *)(v4 + 18) & 1;
          goto LABEL_45;
        case 0x25:
          v6 = 1;
          goto LABEL_9;
        case 0x27:
          v6 = *(_DWORD *)(v4 + 80) + 1;
LABEL_45:
          if (!v6)
            return;
          goto LABEL_9;
        default:
          return;
      }
    }
    if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) == 3)
      v6 = 2;
    else
      v6 = 1;
LABEL_9:
    v7 = 0;
    v8 = (llvm::SmallPtrSetImplBase *)(a1 + 27);
    while (1)
    {
      Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v4, v7);
      if (Successor != a3)
      {
        v10 = Successor;
        if (sub_1C4E5D35C(v20, Successor))
          break;
      }
LABEL_41:
      if (v6 == ++v7)
        return;
    }
    v22 = v25;
    v24 = 4;
    v11 = 1;
    v25[0] = v10;
    while (1)
    {
      v12 = *((_QWORD *)v22 + v11 - 1);
      v23 = v11 - 1;
      a1 = sub_1C4774094(v8, v12);
      if (v13)
      {
        v14 = *(_QWORD *)(v12 + 40);
        if (v14 != v12 + 40)
        {
          if (v14)
            v15 = v14 - 24;
          else
            v15 = 0;
          if (*(_BYTE *)(v15 + 16) == 30)
          {
            if ((*(_DWORD *)(v15 + 20) & 0x7FFFFFF) == 3)
              v16 = 2;
            else
              v16 = 1;
          }
          else
          {
            v16 = 2;
            switch(*(_BYTE *)(v15 + 16))
            {
              case 0x1E:
                goto LABEL_47;
              case 0x1F:
                v16 = (*(_DWORD *)(v15 + 20) >> 1) & 0x3FFFFFF;
                break;
              case 0x20:
              case 0x26:
                v16 = (*(_DWORD *)(v15 + 20) & 0x7FFFFFF) - 1;
                break;
              case 0x21:
                goto LABEL_22;
              case 0x24:
                v16 = *(_WORD *)(v15 + 18) & 1;
                break;
              case 0x25:
                v16 = 1;
                goto LABEL_22;
              case 0x27:
                v16 = *(_DWORD *)(v15 + 80) + 1;
                break;
              default:
                goto LABEL_30;
            }
            if (!v16)
              goto LABEL_30;
          }
LABEL_22:
          for (i = 0; i != v16; ++i)
          {
            v18 = llvm::Instruction::getSuccessor((llvm::Instruction *)v15, i);
            if (sub_1C4E5D35C(v20, v18))
            {
              v19 = v23;
              if (v23 >= (unint64_t)v24)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v25, v23 + 1, 8);
                v19 = v23;
              }
              *((_QWORD *)v22 + v19) = v18;
              ++v23;
            }
          }
        }
      }
LABEL_30:
      v11 = v23;
      if (!v23)
      {
        if (v22 != v25)
          free(v22);
        goto LABEL_41;
      }
    }
  }
}

uint64_t sub_1C4E5892C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unsigned int IndexTypeSizeInBits;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::UndefValue **v14;
  llvm::UndefValue **v16;
  uint64_t *v17;
  unint64_t v18;
  int v19;
  _DWORD **v21;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  llvm::StructType *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  llvm::UndefValue *AggregateElement;
  BOOL v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  const char *v41;
  char v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _BOOL4 v56;
  _BOOL4 v57;
  uint64_t v58;
  _BOOL8 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _BOOL4 v64;
  _BOOL4 v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unsigned int v72;
  llvm::UndefValue **v73;
  uint64_t v74;

  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(*(_QWORD *)(a1 + 64), *(_QWORD *)a2);
  v7 = IndexTypeSizeInBits;
  v8 = 24;
  if (*(_BYTE *)(a2 + 16) == 62)
    v8 = 64;
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0)
  {
    v12 = *(_QWORD *)(a2 - 8);
    v11 = v10 & 0x7FFFFFF;
  }
  else
  {
    v11 = v10 & 0x7FFFFFF;
    v12 = a2 - 32 * v11;
  }
  v13 = v9 | 4;
  v14 = (llvm::UndefValue **)(v12 + 32);
  v73 = (llvm::UndefValue **)(v12 + 32);
  v74 = v13;
  if (v11 == 1)
    return 1;
  v16 = (llvm::UndefValue **)(v12 + 32 * v11);
  v17 = (uint64_t *)(a1 + 120);
  v66 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
  while (1)
  {
    v18 = (unint64_t)*v14;
    v19 = *((unsigned __int8 *)*v14 + 16);
    if (!v18 || v19 != 16)
    {
      v71 = v18;
      v69 = 0;
      if ((sub_1C4E5818C(v17, &v71, &v69) & 1) == 0)
        return 0;
      v18 = *(_QWORD *)(v69 + 8);
      if (!v18 || *(_BYTE *)(v18 + 16) != 16)
        return 0;
    }
    v21 = (_DWORD **)(v18 + 24);
    v22 = *(_DWORD *)(v18 + 32);
    if (v22 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v18 + 24)) != v22)
      {
        v24 = v74 & 4;
        v25 = (llvm::StructType *)(v74 & 0xFFFFFFFFFFFFFFF8);
        if ((v74 & 4) == 0 && v25)
        {
          LODWORD(v23) = **v21;
LABEL_25:
          v26 = *((_QWORD *)llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)(a1 + 64), v25)
                + v23
                + 2);
          v72 = v7;
          if (v7 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v71, v26, 0);
          }
          else
          {
            v27 = v66;
            if (!v7)
              v27 = 0;
            v71 = v27 & v26;
          }
          v28 = *((unsigned int *)a3 + 2);
          if (v28 >= 0x41)
          {
            v50 = 0;
            v51 = 0;
            v52 = *a3;
            v29 = v71;
            v53 = (unint64_t)(v28 + 63) >> 6;
            do
            {
              v54 = *(_QWORD *)(v52 + v50);
              v55 = *(_QWORD *)(v29 + v50) + v54;
              v56 = v55 < v54;
              v57 = v55 + 1 <= v54;
              if (v51)
              {
                ++v55;
                v51 = v57;
              }
              else
              {
                v51 = v56;
              }
              *(_QWORD *)(v52 + v50) = v55;
              v50 += 8;
            }
            while (8 * v53 != v50);
            *(_QWORD *)(*a3 + 8 * (v53 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
            v17 = (uint64_t *)(a1 + 120);
          }
          else
          {
            v29 = v71;
            if ((_DWORD)v28)
              v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
            else
              v30 = 0;
            *a3 = v30 & (*a3 + v71);
          }
          if (v72 < 0x41 || !v29)
            goto LABEL_69;
LABEL_68:
          MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
          goto LABEL_69;
        }
LABEL_37:
        v31 = *(_QWORD *)(a1 + 64);
        if (!v25 || !v24)
        {
          AggregateElement = *v73;
          if (*v73)
            v33 = *((_BYTE *)*v73 + 16) == 16;
          else
            v33 = 0;
          if (!v33)
            AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
          v36 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
          v34 = (unsigned int *)((char *)AggregateElement + 24);
          v35 = v36;
          if (v34[2] < 0x41)
            v35 = v34;
          v25 = *(llvm::StructType **)(*((_QWORD *)v25 + 2) + 8 * *v35);
        }
        sub_1C4768AD0(v31, (uint64_t)v25);
        v38 = v37;
        v40 = v39 == 1;
        llvm::DataLayout::getAlignment(v31, (uint64_t)v25);
        v43 = v42;
        if (v40)
        v44 = ((1 << v43) + ((unint64_t)(v38 + 7) >> 3) - 1) & -(1 << v43);
        v72 = v7;
        if (v7 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v71, v44, 0);
          v17 = (uint64_t *)(a1 + 120);
        }
        else
        {
          v17 = (uint64_t *)(a1 + 120);
          v45 = v66;
          if (!v7)
            v45 = 0;
          v71 = v45 & v44;
        }
        v46 = *(_DWORD *)(v18 + 32);
        if (v46 < v7)
        {
          llvm::APInt::sext((llvm::APInt *)(v18 + 24), v7, (llvm::APInt *)&v67);
        }
        else if (v46 > v7)
        {
          llvm::APInt::trunc((llvm::APInt *)(v18 + 24), v7, (llvm::APInt *)&v67);
        }
        else
        {
          sub_1C5DD14E0((uint64_t)&v67, v18 + 24);
        }
        llvm::APInt::operator*((uint64_t)&v67, &v71, (uint64_t)&v69);
        v47 = *((unsigned int *)a3 + 2);
        if (v47 >= 0x41)
        {
          v58 = 0;
          v59 = 0;
          v60 = *a3;
          v49 = v69;
          v61 = (unint64_t)(v47 + 63) >> 6;
          do
          {
            v62 = *(_QWORD *)(v60 + v58);
            v63 = *(_QWORD *)(v49 + v58) + v62;
            v64 = v63 < v62;
            v65 = v63 + 1 <= v62;
            if (v59)
            {
              ++v63;
              v59 = v65;
            }
            else
            {
              v59 = v64;
            }
            *(_QWORD *)(v60 + v58) = v63;
            v58 += 8;
          }
          while (8 * v61 != v58);
          *(_QWORD *)(*a3 + 8 * (v61 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v47;
          v17 = (uint64_t *)(a1 + 120);
        }
        else
        {
          if ((_DWORD)v47)
            v48 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v47;
          else
            v48 = 0;
          v49 = v69;
          *a3 = v48 & (*a3 + v69);
        }
        if (v70 >= 0x41 && v49)
          MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
        if (v68 >= 0x41 && v67)
          MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
        if (v72 < 0x41)
          goto LABEL_69;
        v29 = v71;
        if (!v71)
          goto LABEL_69;
        goto LABEL_68;
      }
    }
    else
    {
      v23 = *v21;
      if (*v21)
      {
        v24 = v74 & 4;
        v25 = (llvm::StructType *)(v74 & 0xFFFFFFFFFFFFFFF8);
        if ((v74 & 4) == 0 && v25)
          goto LABEL_25;
        goto LABEL_37;
      }
    }
LABEL_69:
    sub_1C4774E38((uint64_t)&v73);
    v14 = v73;
    if (v73 == v16)
      return 1;
  }
}

uint64_t sub_1C4E58E24(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = 0;
  v4 = sub_1C49EEE4C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  result = v9;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C4E58F0C(a1, v7);
    v9 = 0;
    sub_1C49EEE4C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    result = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)result != -4096)
    --*(_DWORD *)(a1 + 12);
  v8 = *a2;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v8;
  *(_DWORD *)(result + 24) = 1;
  return result;
}

_QWORD *sub_1C4E58F0C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C619982C(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C4E58FC4(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4DA97DC(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4E59020((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C4E59020(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4E590D0(a1, v7);
  v9 = 0;
  sub_1C4DA97DC((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4E590D0(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4E583EC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C4E59188@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  char v15;
  _QWORD *v16;

  v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
  {
    v16 = 0;
LABEL_15:
    result = sub_1C4E59304(a1, (uint64_t)a2, a2, v16);
    *result = *a2;
    v7 = *(_QWORD *)a1;
    v6 = *(_DWORD *)(a1 + 16);
    v15 = 1;
    goto LABEL_16;
  }
  v7 = *(_QWORD *)a1;
  v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v6 - 1);
  result = (_QWORD *)(*(_QWORD *)a1 + 8 * v8);
  v10 = *result;
  if (*a2 != *result)
  {
    v11 = 0;
    v12 = 1;
    while (v10 != -4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -8192;
      if (v13)
        v11 = result;
      v14 = v8 + v12++;
      v8 = v14 & (v6 - 1);
      result = (_QWORD *)(v7 + 8 * v8);
      v10 = *result;
      if (*a2 == *result)
        goto LABEL_11;
    }
    if (v11)
      v16 = v11;
    else
      v16 = result;
    goto LABEL_15;
  }
LABEL_11:
  v15 = 0;
LABEL_16:
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v7 + 8 * v6;
  *(_BYTE *)(a3 + 16) = v15;
  return result;
}

uint64_t sub_1C4E59268(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_14;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_14:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4E59304(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4A0811C(a1, v7);
      v17 = 0;
      sub_1C4E59268((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4A0811C(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 8 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 8 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_1C4E59434(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

BOOL sub_1C4E59494()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1C4E5C06C(v1, v0);
}

uint64_t sub_1C4E5B4C8(uint64_t a1, uint64_t a2)
{
  const llvm::Function *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unsigned int v26;
  llvm::Value **v27;
  uint64_t ***v28;
  uint64_t **v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  llvm::Value **v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ****v43;
  uint64_t ***v44;
  int v45;
  int v46;
  uint64_t ***v47;
  uint64_t **v48;
  int v49;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  int v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  _QWORD v87[5];

  v87[4] = *MEMORY[0x1E0C80C00];
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
    return 1;
  v5 = *(_QWORD *)(a2 + 64);
  if (v5 && *(char *)(v5 + 17) < 0 || llvm::CallBase::hasFnAttrOnCalledFunction(a2, 47))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 112);
    if (!v6 || (*(char *)(v6 + 17) & 0x80000000) == 0)
    {
      result = 0;
      *(_BYTE *)(a1 + 90) = 1;
      return result;
    }
  }
  if (*(_BYTE *)(a2 + 16) == 84
    && ((v8 = *(_QWORD *)(a2 + 64)) != 0 && (*(_BYTE *)(v8 + 15) & 1) != 0
     || llvm::CallBase::hasFnAttrOnCalledFunction(a2, 24)))
  {
    *(_BYTE *)(a1 + 92) = 1;
  }
  v9 = *(_QWORD *)(a2 - 32);
  if (v9 && !*(_BYTE *)(v9 + 16) && *(_QWORD *)(v9 + 24) == *(_QWORD *)(a2 + 72))
  {
    v12 = 0;
  }
  else
  {
    v84 = 0;
    v85 = (void *)v9;
    if ((sub_1C4E5818C((uint64_t *)(a1 + 120), &v85, &v84) & 1) == 0
      || (v9 = *(_QWORD *)(v84 + 8)) == 0
      || *(_BYTE *)(v9 + 16)
      || *(_QWORD *)(v9 + 24) != *(_QWORD *)(a2 + 72))
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2);
      v10 = *(_QWORD *)(a2 + 64);
      if (v10 && (*(_BYTE *)(v10 + 17) & 0x30) != 0)
        return sub_1C4E5BDF8((int32x2_t *)a1, a2);
      v11 = *(_DWORD *)(a2 + 20);
      if (v11 < 0 && (v53 = a2 - 32 * (v11 & 0x7FFFFFF), v56 = *(_QWORD *)(v53 - 8), v54 = v53 - 8, (v55 = v56) != 0))
      {
        v57 = -v55;
        while (1)
        {
          v58 = *(_DWORD *)(*(_QWORD *)(v54 + v57) + 8);
          v59 = v58 > 7;
          v60 = (1 << v58) & 0x83;
          if (v59 || v60 == 0)
            break;
          v57 += 16;
          if (!v57)
            goto LABEL_23;
        }
      }
      else
      {
LABEL_23:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) != 0)
        {
          return sub_1C4E5BDF8((int32x2_t *)a1, a2);
        }
      }
      goto LABEL_25;
    }
    v12 = 1;
  }
  if (llvm::canConstantFoldCallTo((llvm *)a2, (const llvm::CallBase *)v9, v4))
  {
    v85 = v87;
    v86 = 0x400000000;
    v13 = *(unsigned __int8 *)(a2 + 16);
    if (v13 == 84)
    {
      v14 = 0;
    }
    else if (v13 == 39)
    {
      v14 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      v14 = 2;
    }
    v15 = *(_DWORD *)(a2 + 20);
    if (v15 < 0 && (v70 = a2 - 32 * (v15 & 0x7FFFFFF), v71 = *(_QWORD *)(v70 - 8), (v71 & 0xFFFFFFFF0) != 0))
    {
      v17 = -(uint64_t)(v15 & 0x7FFFFFF);
      v16 = *(_DWORD *)(v70 - 12) - *(_DWORD *)(v70 - v71);
    }
    else
    {
      v16 = 0;
      v17 = -(uint64_t)(v15 & 0x7FFFFFF);
    }
    v18 = ((-32 * v14 + 32 * (unint64_t)-v16 - 32 * v17 - 32) >> 5);
    if (v18 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)v87, v18, 8);
      v15 = *(_DWORD *)(a2 + 20);
      v17 = -(uint64_t)(v15 & 0x7FFFFFF);
      v13 = *(unsigned __int8 *)(a2 + 16);
    }
    if (v13 == 84)
      v19 = 0;
    else
      v19 = v13 == 39 ? (*(_DWORD *)(a2 + 80) + 1) : 2;
    v20 = a2 + 32 * v17;
    if (v15 < 0 && (v72 = a2 - 32 * (v15 & 0x7FFFFFF), v73 = *(_QWORD *)(v72 - 8), (v73 & 0xFFFFFFFF0) != 0))
      v21 = (*(_DWORD *)(v72 - 12) - *(_DWORD *)(v72 - v73));
    else
      v21 = 0;
    if (v20 == a2 - 32 * v19 - 32 * v21 - 32)
    {
      v26 = v86;
LABEL_55:
      v27 = llvm::ConstantFoldCall(a2, (uint64_t ***)v9, (uint64_t)v85, v26, 0);
      if (v27)
      {
        v84 = a2;
        sub_1C4E58228((uint64_t *)(a1 + 120), &v84)[1] = v27;
        LOBYTE(v27) = 1;
      }
    }
    else
    {
      v22 = ((32 * v19 + 32 * v21) ^ 0xFFFFFFFFFFFFFFE0) - 32 * v17;
      while (1)
      {
        v23 = *(_QWORD *)v20;
        if (!*(_QWORD *)v20 || *(unsigned __int8 *)(*(_QWORD *)v20 + 16) >= 0x15u)
        {
          v83 = 0;
          v84 = v23;
          if ((sub_1C4E5818C((uint64_t *)(a1 + 120), &v84, &v83) & 1) == 0)
            break;
          v23 = *(_QWORD *)(v83 + 8);
          if (!v23)
            break;
        }
        v25 = v86;
        if (v86 >= (unint64_t)HIDWORD(v86))
        {
          v82 = v23;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)v87, v86 + 1, 8);
          v23 = v82;
          v25 = v86;
        }
        *((_QWORD *)v85 + v25) = v23;
        v26 = v86 + 1;
        LODWORD(v86) = v86 + 1;
        v20 += 32;
        v22 -= 32;
        if (!v22)
          goto LABEL_55;
      }
      LOBYTE(v27) = 0;
    }
    if (v85 != v87)
      free(v85);
    if ((v27 & 1) != 0)
      return 1;
  }
  if (*(_BYTE *)(a2 + 16) != 84
    || (v28 = *(uint64_t ****)(a2 - 32)) == 0
    || *((_BYTE *)v28 + 16)
    || (v29 = v28[3], v29 != *(uint64_t ***)(a2 + 72))
    || (*((_BYTE *)v28 + 33) & 0x20) == 0)
  {
    if (v9 != *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) || (*(_BYTE *)(a1 + 89) = 1, *(_BYTE *)(a1 + 401)))
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 8) + 176))(**(_QWORD **)(a1 + 8), v9))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v9, a2, v12);
      }
      v30 = *(_QWORD *)(a2 + 64);
      if (v30 && (*(_BYTE *)(v30 + 17) & 0x30) != 0)
        return sub_1C4E5BDF8((int32x2_t *)a1, a2);
      v31 = *(_DWORD *)(a2 + 20);
      if (v31 < 0 && (v62 = a2 - 32 * (v31 & 0x7FFFFFF), v65 = *(_QWORD *)(v62 - 8), v63 = v62 - 8, (v64 = v65) != 0))
      {
        v66 = -v64;
        while (1)
        {
          v67 = *(_DWORD *)(*(_QWORD *)(v63 + v66) + 8);
          v59 = v67 > 7;
          v68 = (1 << v67) & 0x83;
          if (v59 || v68 == 0)
            break;
          v66 += 16;
          if (!v66)
            goto LABEL_74;
        }
      }
      else
      {
LABEL_74:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) != 0)
        {
          return sub_1C4E5BDF8((int32x2_t *)a1, a2);
        }
      }
      if (!(_DWORD)v12)
        goto LABEL_25;
      v32 = *(_QWORD *)(v9 + 112);
      if (!v32 || (*(_BYTE *)(v32 + 17) & 0x30) == 0)
        goto LABEL_25;
      return sub_1C4E5BDF8((int32x2_t *)a1, a2);
    }
    return 0;
  }
  v33 = *((_DWORD *)v28 + 9);
  if (v33 > 193)
  {
    if ((v33 - 194) <= 5 && ((1 << (v33 + 62)) & 0x29) != 0)
    {
      if (*(_BYTE *)(a1 + 400))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
        result = 0;
        *(_BYTE *)(a1 + 400) = 0;
        return result;
      }
      return 0;
    }
    if (v33 == 290)
    {
LABEL_95:
      v38 = sub_1C4E5BD2C(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
      if (v38)
      {
        v36 = (llvm::Value **)v38;
        v85 = (void *)a2;
        v37 = sub_1C4E58FC4((uint64_t *)(a1 + 144), &v85);
LABEL_97:
        v37[1] = v36;
      }
      return 1;
    }
    if (v33 == 315)
    {
      result = 0;
      *(_BYTE *)(a1 + 96) = 1;
      return result;
    }
LABEL_100:
    if ((*((_BYTE *)v28 + 23) & 0x10) == 0)
    {
LABEL_115:
      v51 = *(_QWORD *)(a2 + 64);
      if (v51 && (*(_BYTE *)(v51 + 17) & 0x30) != 0)
        return sub_1C4E5BDF8((int32x2_t *)a1, a2);
      v52 = *(_DWORD *)(a2 + 20);
      if (v52 < 0 && (v74 = a2 - 32 * (v52 & 0x7FFFFFF), v77 = *(_QWORD *)(v74 - 8), v75 = v74 - 8, (v76 = v77) != 0))
      {
        v78 = -v76;
        while (1)
        {
          v79 = *(_DWORD *)(*(_QWORD *)(v75 + v78) + 8);
          v59 = v79 > 7;
          v80 = (1 << v79) & 0x83;
          if (v59 || v80 == 0)
            break;
          v78 += 16;
          if (!v78)
            goto LABEL_118;
        }
      }
      else
      {
LABEL_118:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a2, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 44) & 1) != 0)
        {
          return sub_1C4E5BDF8((int32x2_t *)a1, a2);
        }
      }
      if ((llvm::isAssumeLikeIntrinsic(a2) & 1) == 0)
      {
LABEL_25:
        if (*(_BYTE *)(a1 + 400))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
          *(_BYTE *)(a1 + 400) = 0;
        }
      }
      return sub_1C4E5BDF8((int32x2_t *)a1, a2);
    }
    v39 = ***v28;
    v40 = *(_QWORD *)(v39 + 152);
    v41 = *(unsigned int *)(v39 + 168);
    if ((_DWORD)v41)
    {
      LODWORD(v42) = (v41 - 1) & ((v28 >> 4) ^ (v28 >> 9));
      v43 = (uint64_t ****)(v40 + 16 * v42);
      v44 = *v43;
      if (*v43 == v28)
      {
LABEL_110:
        v47 = v43[1];
        if ((unint64_t)*v47 >= 9)
        {
          v48 = v47[2];
          v49 = *((unsigned __int8 *)v47 + 24);
          if (v48 == (uint64_t **)0x6A626F2E6D766C6CLL && v49 == 99)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
            return sub_1C4E5BDF8((int32x2_t *)a1, a2);
          }
        }
        goto LABEL_115;
      }
      v45 = 1;
      while (v44 != (uint64_t ***)-4096)
      {
        v46 = v42 + v45++;
        v42 = v46 & (v41 - 1);
        v44 = *(uint64_t ****)(v40 + 16 * v42);
        if (v44 == v28)
        {
          v43 = (uint64_t ****)(v40 + 16 * v42);
          goto LABEL_110;
        }
      }
    }
    v43 = (uint64_t ****)(v40 + 16 * v41);
    goto LABEL_110;
  }
  switch(v33)
  {
    case 165:
      v34 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if (!v34 || v34[16] >= 0x15u)
      {
        v84 = 0;
        v85 = v34;
        v35 = sub_1C4E5818C((uint64_t *)(a1 + 120), &v85, &v84);
        v34 = 0;
        if (v35)
          v34 = *(unsigned __int8 **)(v84 + 8);
        v29 = *(uint64_t ***)(a2 + 72);
      }
      v36 = llvm::ConstantInt::get((llvm::ConstantInt *)*v29[2], v34 != 0, 0);
      v85 = (void *)a2;
      v37 = sub_1C4E58228((uint64_t *)(a1 + 120), &v85);
      goto LABEL_97;
    case 166:
      goto LABEL_95;
    case 167:
    case 168:
    case 169:
    case 170:
    case 172:
      goto LABEL_100;
    case 171:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
      return 0;
    case 173:
      break;
    default:
      if (v33 != 157)
        goto LABEL_100;
      break;
  }
  result = 0;
  *(_BYTE *)(a1 + 95) = 1;
  return result;
}

uint64_t sub_1C4E5BD2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  v2 = *(_QWORD *)(a1 + 144);
  v3 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v3)
  {
    LODWORD(v14) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v4 = (uint64_t *)(v2 + 16 * v14);
    v15 = *v4;
    if (*v4 == a2)
      goto LABEL_3;
    v16 = 1;
    while (v15 != -4096)
    {
      v17 = v14 + v16++;
      v14 = v17 & (v3 - 1);
      v15 = *(_QWORD *)(v2 + 16 * v14);
      if (v15 == a2)
      {
        v4 = (uint64_t *)(v2 + 16 * v14);
        goto LABEL_3;
      }
    }
  }
  v4 = (uint64_t *)(v2 + 16 * v3);
LABEL_3:
  if (v4 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  v5 = *(_DWORD *)(a1 + 184);
  if (!v5)
    return 0;
  v6 = v4[1];
  v7 = *(_QWORD *)(a1 + 168);
  v8 = v5 - 1;
  v9 = ((v6 >> 4) ^ (v6 >> 9)) & v8;
  v10 = *(_QWORD *)(v7 + 8 * v9);
  if (v10 != v6)
  {
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v9 + v11++;
      v9 = v12 & v8;
      v10 = *(_QWORD *)(v7 + 8 * v9);
      if (v10 == v6)
        return v6;
    }
    return 0;
  }
  return v6;
}

uint64_t sub_1C4E5BDF8(int32x2_t *a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  unint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)a1[1];
  v5 = *(_DWORD *)(a2 + 20);
  if ((v5 & 0x40000000) != 0)
  {
    v7 = *(uint64_t **)(a2 - 8);
    v6 = v5 & 0x7FFFFFF;
  }
  else
  {
    v6 = v5 & 0x7FFFFFF;
    v7 = (uint64_t *)(a2 - 32 * v6);
  }
  v27 = v29;
  v28 = 0x400000000;
  if (v6 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v6, 8);
    v8 = v28;
    v10 = v27;
    v9 = v28;
  }
  else
  {
    v8 = 0;
    if (!v6)
    {
      v14 = v29;
      goto LABEL_10;
    }
    v9 = 0;
    v10 = v29;
  }
  v11 = 32 * v6;
  v12 = &v10[v9];
  do
  {
    v13 = *v7;
    v7 += 4;
    *v12++ = v13;
    v11 -= 32;
  }
  while (v11);
  v14 = v27;
LABEL_10:
  LODWORD(v28) = v8 + v6;
  v15 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*v4 + 72))(*v4, a2, v14);
  v17 = v16;
  if (v27 != v29)
    free(v27);
  v18 = v15 >= 0;
  v19 = v17 < 1;
  if (v17)
    v18 = v17 >= 0;
  else
    v19 = v15 < 1;
  v20 = v18 & v19;
  if (!v18 || !v19)
  {
    v21 = *(_DWORD *)(a2 + 20);
    if ((v21 & 0x40000000) != 0)
    {
      v23 = *(uint64_t **)(a2 - 8);
      v22 = v21 & 0x7FFFFFF;
      if (!v22)
        return v20;
    }
    else
    {
      v22 = v21 & 0x7FFFFFF;
      v23 = (uint64_t *)(a2 - 32 * v22);
      if (!v22)
        return v20;
    }
    v24 = 32 * v22;
    do
    {
      v25 = sub_1C4E5BD2C((uint64_t)a1, *v23);
      if (v25)
        sub_1C4E5BFB4(a1, v25);
      v23 += 4;
      v24 -= 32;
    }
    while (v24);
  }
  return v20;
}

uint64_t sub_1C4E5BFB4(int32x2_t *a1, uint64_t a2)
{
  uint64_t result;
  __int32 v5;
  int32x2_t v6;
  __int32 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;

  result = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 72))(a1);
  v5 = a1[23].i32[0];
  if (v5)
  {
    v6 = a1[21];
    v7 = v5 - 1;
    LODWORD(v8) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = (uint64_t *)(*(_QWORD *)&v6 + 8 * v8);
    v10 = *v9;
    if (*v9 == a2)
    {
LABEL_7:
      *v9 = -8192;
      a1[22] = vadd_s32(a1[22], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v11 = 1;
      while (v10 != -4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & v7;
        v10 = *(_QWORD *)(*(_QWORD *)&v6 + 8 * v8);
        if (v10 == a2)
        {
          v9 = (uint64_t *)(*(_QWORD *)&v6 + 8 * v8);
          goto LABEL_7;
        }
      }
    }
  }
  if (a1[50].i8[0])
  {
    result = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 80))(a1);
    a1[50].i8[0] = 0;
  }
  return result;
}

BOOL sub_1C4E5C06C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  BOOL v6;
  llvm *v7;
  BOOL v8;
  unsigned __int8 *v9;
  _BOOL4 v10;
  int v11;
  llvm *v12;
  llvm::Constant *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  _BOOL4 v23;
  unsigned int v24;
  int v25;
  int v26;
  llvm::Constant **v27;
  int v28;
  llvm::Constant **v29;
  llvm::Constant *v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a2 - 64);
  v5 = *(unsigned __int8 **)(a2 - 32);
  if (v4)
    v6 = *(unsigned __int8 *)(v4 + 16) >= 0x15u;
  else
    v6 = 1;
  v7 = *(llvm **)(a2 - 64);
  if (v6)
  {
    v31 = *(llvm::Constant **)(a2 - 64);
    v35 = 0;
    v7 = 0;
    if (sub_1C4E5818C((uint64_t *)(a1 + 120), &v31, &v35))
      v7 = *(llvm **)(v35 + 8);
  }
  v8 = v5[16] > 0x14u || v5 == 0;
  v9 = v5;
  if (v8)
  {
    v31 = (llvm::Constant *)v5;
    v35 = 0;
    v9 = 0;
    if (sub_1C4E5818C((uint64_t *)(a1 + 120), &v31, &v35))
      v9 = *(unsigned __int8 **)(v35 + 8);
  }
  v10 = sub_1C4774A9C(a2);
  v11 = *(unsigned __int8 *)(a2 + 16) - 28;
  if (v7)
    v12 = v7;
  else
    v12 = (llvm *)v4;
  if (v9)
    v13 = (llvm::Constant *)v9;
  else
    v13 = (llvm::Constant *)v5;
  if (v10)
  {
    v14 = (unint64_t)*(unsigned __int8 *)(a2 + 17) >> 1;
    v31 = *(llvm::Constant **)(a1 + 64);
    v32 = 0u;
    v33 = 0u;
    v34 = 257;
    if ((_DWORD)v14 == 127)
      v15 = -1;
    else
      v15 = v14;
    v16 = llvm::SimplifyBinOp(v11, v12, v13, v15, &v31);
  }
  else
  {
    v31 = *(llvm::Constant **)(a1 + 64);
    v32 = 0u;
    v33 = 0u;
    v34 = 257;
    v16 = sub_1C4E6D628(v11);
  }
  v17 = v16;
  if (v16)
  {
    if (*(unsigned __int8 *)(v16 + 16) <= 0x14u)
    {
      v31 = (llvm::Constant *)a2;
      sub_1C4E58228((uint64_t *)(a1 + 120), &v31)[1] = v16;
    }
    return v17 != 0;
  }
  v18 = sub_1C4E5BD2C(a1, v4);
  if (v18)
    sub_1C4E5BFB4((int32x2_t *)a1, v18);
  v19 = sub_1C4E5BD2C(a1, (uint64_t)v5);
  if (v19)
    sub_1C4E5BFB4((int32x2_t *)a1, v19);
  if (*(unsigned __int8 *)(*(_QWORD *)a2 + 8) <= 6u)
  {
    v20 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 632))(**(_QWORD **)(a1 + 8));
    v22 = v20 < 4;
    if (v21)
      v22 = v21 < 0;
    if (!v22)
    {
      v23 = v21 < 1;
      if (!v21)
        v23 = v20 < 5;
      if (v23)
      {
        if (!sub_1C4774A9C(a2))
          goto LABEL_57;
        v24 = *(unsigned __int8 *)(a2 + 16);
        v25 = v24 > 0x1B ? v24 - 28 : *(unsigned __int16 *)(a2 + 18);
        if (v25 != 12)
        {
          if (v25 != 16)
            goto LABEL_57;
          if ((*(_BYTE *)(a2 + 17) & 0x10) == 0)
          {
            v26 = *(_DWORD *)(a2 + 20);
            if ((v26 & 0x40000000) != 0)
              v27 = *(llvm::Constant ***)(a2 - 8);
            else
              v27 = (llvm::Constant **)(a2 - 32 * (v26 & 0x7FFFFFF));
            if (sub_1C4E5C46C((uint64_t)&v31, *v27))
              return v17 != 0;
LABEL_57:
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
            return v17 != 0;
          }
          v28 = *(_DWORD *)(a2 + 20);
          if ((v28 & 0x40000000) != 0)
            v29 = *(llvm::Constant ***)(a2 - 8);
          else
            v29 = (llvm::Constant **)(a2 - 32 * (v28 & 0x7FFFFFF));
          if (!sub_1C4E5C310((uint64_t)&v31, *v29))
            goto LABEL_57;
        }
      }
    }
  }
  return v17 != 0;
}

BOOL sub_1C4E5C310(uint64_t a1, llvm::Constant *a2)
{
  _BOOL4 v2;
  unsigned int v4;
  char *v5;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  int v10;
  llvm::APFloatBase *SplatValue;
  char *v12;
  int v13;
  llvm::Type *v14;
  llvm::UndefValue *AggregateElement;
  int v16;
  char *v17;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 17)
  {
    v5 = (char *)a2 + 24;
    if (*((_UNKNOWN **)a2 + 4) == &unk_1C866F1C0)
      v5 = (char *)*((_QWORD *)a2 + 5);
    return (v5[28] & 7) == 3;
  }
  else
  {
    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v8 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
    else
      v8 = 0;
    v9 = !v8 || v4 > 0x14;
    v10 = v9;
    if (!v9)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((_BYTE *)SplatValue + 16) == 17)
      {
        v12 = (char *)SplatValue + 24;
        if (*((_UNKNOWN **)SplatValue + 4) == &unk_1C866F1C0)
          v12 = (char *)*((_QWORD *)SplatValue + 5);
        v2 = (v12[28] & 7) == 3;
      }
      else
      {
        if (*(_BYTE *)(v7 + 8) == 18)
        {
          v13 = *(_DWORD *)(v7 + 32);
          if (v13)
          {
            v14 = 0;
            v2 = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(a2, v14);
              if (!AggregateElement)
                break;
              v16 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v16 - 11) >= 2)
              {
                if (v16 != 17)
                  break;
                v17 = (char *)AggregateElement + 24;
                if (*((_UNKNOWN **)AggregateElement + 4) == &unk_1C866F1C0)
                  v17 = (char *)*((_QWORD *)AggregateElement + 5);
                if ((v17[28] & 7) != 3)
                  break;
                v2 = 1;
              }
              v14 = (llvm::Type *)((_DWORD)v14 + 1);
              if (v13 == (_DWORD)v14)
                return (v10 ^ 1) & v2;
            }
          }
        }
        v2 = 0;
      }
    }
    return (v10 ^ 1) & v2;
  }
}

BOOL sub_1C4E5C46C(uint64_t a1, llvm::Constant *a2)
{
  _BOOL4 v2;
  unsigned int v4;
  char *v5;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  int v10;
  llvm::APFloatBase *SplatValue;
  char *v12;
  int v13;
  llvm::Type *v14;
  llvm::UndefValue *AggregateElement;
  int v16;
  char *v17;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 17)
  {
    v5 = (char *)a2 + 24;
    if (*((_UNKNOWN **)a2 + 4) == &unk_1C866F1C0)
      v5 = (char *)*((_QWORD *)a2 + 5);
    return (v5[28] & 0xF) == 11;
  }
  else
  {
    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v8 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
    else
      v8 = 0;
    v9 = !v8 || v4 > 0x14;
    v10 = v9;
    if (!v9)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((_BYTE *)SplatValue + 16) == 17)
      {
        v12 = (char *)SplatValue + 24;
        if (*((_UNKNOWN **)SplatValue + 4) == &unk_1C866F1C0)
          v12 = (char *)*((_QWORD *)SplatValue + 5);
        v2 = (v12[28] & 0xF) == 11;
      }
      else
      {
        if (*(_BYTE *)(v7 + 8) == 18)
        {
          v13 = *(_DWORD *)(v7 + 32);
          if (v13)
          {
            v14 = 0;
            v2 = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(a2, v14);
              if (!AggregateElement)
                break;
              v16 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v16 - 11) >= 2)
              {
                if (v16 != 17)
                  break;
                v17 = (char *)AggregateElement + 24;
                if (*((_UNKNOWN **)AggregateElement + 4) == &unk_1C866F1C0)
                  v17 = (char *)*((_QWORD *)AggregateElement + 5);
                if ((v17[28] & 0xF) != 0xB)
                  break;
                v2 = 1;
              }
              v14 = (llvm::Type *)((_DWORD)v14 + 1);
              if (v13 == (_DWORD)v14)
                return (v10 ^ 1) & v2;
            }
          }
        }
        v2 = 0;
      }
    }
    return (v10 ^ 1) & v2;
  }
}

_QWORD *sub_1C4E5C5C8(_QWORD *result, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  const void **v10;
  unsigned int v11;

  if (!a3)
  {
LABEL_5:
    *result = 0;
    result[1] = 0;
    *((_DWORD *)result + 4) = 1;
    return result;
  }
  v4 = a3 - 1;
  v5 = (uint64_t *)(a2 + 32 * (((a4 >> 4) ^ (a4 >> 9)) & (a3 - 1)));
  v6 = *v5;
  if (*v5 != a4)
  {
    v7 = 1;
    LODWORD(v8) = ((a4 >> 4) ^ (a4 >> 9)) & v4;
    while (v6 != -4096)
    {
      v9 = v8 + v7++;
      v8 = v9 & v4;
      v6 = *(_QWORD *)(a2 + 32 * v8);
      if (v6 == a4)
      {
        v5 = (uint64_t *)(a2 + 32 * v8);
        goto LABEL_8;
      }
    }
    goto LABEL_5;
  }
LABEL_8:
  *result = v5[1];
  v10 = (const void **)(v5 + 2);
  v11 = *((_DWORD *)v5 + 6);
  *((_DWORD *)result + 4) = v11;
  if (v11 > 0x40)
    return llvm::APInt::initSlowCase((llvm::APInt *)(result + 1), v10);
  result[1] = *v10;
  return result;
}

uint64_t sub_1C4E5C660(int32x2_t *a1, uint64_t a2, int a3)
{
  uint64_t result;

  result = sub_1C4E5BD2C((uint64_t)a1, a2);
  if (result)
  {
    if (a3)
    {
      (*(void (**)(int32x2_t *, uint64_t))(*(_QWORD *)a1 + 184))(a1, result);
      return 1;
    }
    else
    {
      sub_1C4E5BFB4(a1, result);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C4E5C6B4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t Cast;
  char v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  _BOOL4 v18;
  _QWORD *v19;
  int v20;
  unint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD v38[5];

  v38[4] = *MEMORY[0x1E0C80C00];
  v36 = v38;
  v37 = 0x200000000;
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = *(uint64_t **)(a2 - 8);
    v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (uint64_t *)(a2 - 32 * v5);
  }
  v7 = 0;
  v8 = 32 * v5;
  do
  {
    v9 = *v6;
    if (*v6)
      v10 = *(unsigned __int8 *)(*v6 + 16) >= 0x15u;
    else
      v10 = 1;
    if (v10)
    {
      v34 = 0;
      v35 = v9;
      if ((sub_1C4E5818C((uint64_t *)(a1 + 120), &v35, &v34) & 1) == 0)
        goto LABEL_18;
      v9 = *(_QWORD *)(v34 + 8);
      if (!v9)
        goto LABEL_18;
      v7 = v37;
    }
    if (v7 >= HIDWORD(v37))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v7 + 1, 8);
      v7 = v37;
    }
    *((_QWORD *)v36 + v7) = v9;
    v7 = v37 + 1;
    LODWORD(v37) = v37 + 1;
    v6 += 4;
    v8 -= 32;
  }
  while (v8);
  Cast = llvm::ConstantExpr::getCast(*(unsigned __int8 *)(a2 + 16) - 28);
  if (Cast)
  {
    v35 = a2;
    sub_1C4E58228((uint64_t *)(a1 + 120), &v35)[1] = Cast;
    v12 = 1;
    goto LABEL_19;
  }
LABEL_18:
  v12 = 0;
LABEL_19:
  if (v36 != v38)
    free(v36);
  if ((v12 & 1) != 0)
    return 1;
  v14 = sub_1C4E5BD2C(a1, *(_QWORD *)(a2 - 32));
  if (v14)
    sub_1C4E5BFB4((int32x2_t *)a1, v14);
  if (*(unsigned __int8 *)(a2 + 16) - 69 <= 5)
  {
    v15 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 8) + 632))(**(_QWORD **)(a1 + 8), *(_QWORD *)a2);
    v17 = v15 < 4;
    if (v16)
      v17 = v16 < 0;
    if (!v17)
    {
      v18 = v16 < 1;
      if (!v16)
        v18 = v15 < 5;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
    }
  }
  v19 = *(_QWORD **)(a1 + 8);
  v20 = *(_DWORD *)(a2 + 20);
  if ((v20 & 0x40000000) != 0)
  {
    v22 = *(uint64_t **)(a2 - 8);
    v21 = v20 & 0x7FFFFFF;
  }
  else
  {
    v21 = v20 & 0x7FFFFFF;
    v22 = (uint64_t *)(a2 - 32 * v21);
  }
  v36 = v38;
  v37 = 0x400000000;
  if (v21 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v21, 8);
    v23 = v37;
    v25 = v36;
    v24 = v37;
LABEL_38:
    v26 = 32 * v21;
    v27 = &v25[v24];
    do
    {
      v28 = *v22;
      v22 += 4;
      *v27++ = v28;
      v26 -= 32;
    }
    while (v26);
    v29 = v36;
    goto LABEL_42;
  }
  v23 = 0;
  if (v21)
  {
    v24 = 0;
    v25 = v38;
    goto LABEL_38;
  }
  v29 = v38;
LABEL_42:
  LODWORD(v37) = v23 + v21;
  v30 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)*v19 + 72))(*v19, a2, v29);
  v32 = v31;
  if (v36 != v38)
    free(v36);
  v33 = v30 < 0;
  if (v32)
    v33 = v32 < 0;
  if (v33)
    return 0;
  if (v32)
    return v32 < 1;
  return v30 < 1;
}

uint64_t sub_1C4E5C9E4(uint64_t a1, _QWORD *a2)
{
  llvm::ConstantInt ***v4;
  llvm::ConstantInt ***v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  llvm::ConstantExpr *v15;
  uint64_t ***v16;
  llvm::Constant *v17;
  uint64_t FCmp;
  uint64_t v19;
  llvm::Type *v20;
  const llvm::APInt *v21;
  void *v22;
  unsigned __int8 *v23;
  const llvm::APInt *v24;
  llvm::Constant *v25;
  llvm::UndefValue *ICmp;
  unsigned int v27;
  uint64_t v28;
  uint64_t **v29;
  llvm::Value **True;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v39;
  unsigned int v40;
  _QWORD *v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  _DWORD v45[4];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::ConstantInt ***)*(a2 - 8);
  v5 = (llvm::ConstantInt ***)*(a2 - 4);
  v43 = v45;
  v44 = 0x200000000;
  v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 0x40000000) != 0)
  {
    v8 = (_QWORD *)*(a2 - 1);
    v7 = v6 & 0x7FFFFFF;
  }
  else
  {
    v7 = v6 & 0x7FFFFFF;
    v8 = &a2[-4 * v7];
  }
  v9 = 0;
  v10 = (uint64_t *)(a1 + 120);
  v11 = 32 * v7;
  do
  {
    v12 = *v8;
    if (*v8)
      v13 = *(unsigned __int8 *)(*v8 + 16) >= 0x15u;
    else
      v13 = 1;
    if (v13)
    {
      v41 = (_QWORD *)*v8;
      v39 = 0;
      if ((sub_1C4E5818C((uint64_t *)(a1 + 120), &v41, &v39) & 1) == 0 || (v12 = *(_QWORD *)(v39 + 8)) == 0)
      {
        v14 = 0;
        goto LABEL_22;
      }
      v9 = v44;
    }
    if (v9 >= HIDWORD(v44))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, v9 + 1, 8);
      v9 = v44;
    }
    *((_QWORD *)v43 + v9) = v12;
    v9 = v44 + 1;
    LODWORD(v44) = v44 + 1;
    v8 += 4;
    v11 -= 32;
  }
  while (v11);
  v15 = (llvm::ConstantExpr *)(*((_WORD *)a2 + 9) & 0x3F);
  v16 = *(uint64_t ****)v43;
  v17 = (llvm::Constant *)*((_QWORD *)v43 + 1);
  if (v15 <= 0xF)
    FCmp = llvm::ConstantExpr::getFCmp(v15, v16, v17, 0);
  else
    FCmp = (uint64_t)llvm::ConstantExpr::getICmp(v15, (unsigned __int8 *)v16, v17, 0);
  v14 = FCmp;
  if (FCmp)
  {
    v41 = a2;
    sub_1C4E58228((uint64_t *)(a1 + 120), &v41)[1] = FCmp;
    v14 = 1;
  }
LABEL_22:
  if (v43 != v45)
    free(v43);
  if ((v14 & 1) != 0)
    return 1;
  if (*((_BYTE *)a2 + 16) == 82)
    return 0;
  v40 = 1;
  v39 = 0;
  sub_1C4E5C5C8(&v43, *(_QWORD *)(a1 + 192), *(_DWORD *)(a1 + 208), (uint64_t)v4);
  v22 = v43;
  v41 = (_QWORD *)v44;
  v42 = v45[0];
  if (v43)
  {
    sub_1C4E5C5C8(&v43, *(_QWORD *)(a1 + 192), *(_DWORD *)(a1 + 208), (uint64_t)v5);
    v39 = v44;
    v40 = v45[0];
    if (v43)
    {
      if (v22 == v43)
      {
        v23 = (unsigned __int8 *)llvm::ConstantInt::get(**v4, (llvm::LLVMContext *)&v41, v21);
        v25 = llvm::ConstantInt::get(**v5, (llvm::LLVMContext *)&v39, v24);
        ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)(*((_WORD *)a2 + 9) & 0x3F), v23, v25, 0);
        if (ICmp)
        {
          v43 = a2;
          sub_1C4E58228((uint64_t *)(a1 + 120), &v43)[1] = ICmp;
          ++*(_DWORD *)(a1 + 580);
LABEL_33:
          v19 = 1;
          goto LABEL_52;
        }
      }
    }
  }
  v27 = *((_WORD *)a2 + 9) & 0x3F;
  if (v27 - 32 >= 0xA)
  {
    if (v27 > 0xE || ((1 << v27) & 0x4242) == 0)
      goto LABEL_51;
  }
  else if ((*((_WORD *)a2 + 9) & 0x3E) != 0x20)
  {
    goto LABEL_51;
  }
  if (*(_BYTE *)(*(a2 - 4) + 16) == 19)
  {
    v28 = *(a2 - 8);
    if (v28
      && *(_BYTE *)(v28 + 16) == 21
      && (llvm::CallBase::paramHasAttr(*(_QWORD *)(a1 + 80), *(_DWORD *)(v28 + 32), 39) & 1) != 0)
    {
LABEL_40:
      v29 = (uint64_t **)*a2;
      if ((*((_WORD *)a2 + 9) & 0x3F) == 0x21)
        True = llvm::ConstantInt::getTrue(v29, v20, v21);
      else
        True = llvm::ConstantInt::getFalse(v29, v20, v21);
      v43 = a2;
      sub_1C4E58228(v10, &v43)[1] = True;
      goto LABEL_33;
    }
    v31 = *(_DWORD *)(a1 + 160);
    if (v31)
    {
      v32 = *(_QWORD *)(a1 + 144);
      v33 = v31 - 1;
      v34 = v33 & ((v28 >> 4) ^ (v28 >> 9));
      v35 = *(_QWORD *)(v32 + 16 * v34);
      if (v28 == v35)
        goto LABEL_40;
      v36 = 1;
      while (v35 != -4096)
      {
        v37 = v34 + v36++;
        v34 = v37 & v33;
        v35 = *(_QWORD *)(v32 + 16 * v34);
        if (v28 == v35)
          goto LABEL_40;
      }
    }
  }
LABEL_51:
  v19 = sub_1C4E5C660((int32x2_t *)a1, *(a2 - 8), *(unsigned __int8 *)(*(a2 - 4) + 16) == 19);
LABEL_52:
  if (v40 >= 0x41 && v39)
    MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  if (v42 >= 0x41 && v41)
    MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
  return v19;
}

uint64_t sub_1C4E5CE00(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *i;
  std::string *v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  _BYTE *v21;
  void **v22;
  __int128 v23;
  char *v24;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        sub_1C4E5CFC4(*(std::string **)a2, (std::string *)(*(_QWORD *)a2 + (v4 << 6)), *(std::string **)a1);
        v7 = v6;
        v8 = *(std::string **)a1;
        v5 = *(unsigned int *)(a1 + 8);
      }
      else
      {
        v8 = *(std::string **)a1;
        v7 = *(std::string **)a1;
      }
      for (i = (std::string *)((char *)v8 + 64 * v5); i != v7; i = (std::string *)((char *)i - 64))
      {
        if (i[-1].__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)i[-2].__r_.__value_.__l.__size_);
        if (i[-2].__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)i[-3].__r_.__value_.__l.__size_);
      }
      goto LABEL_34;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v10 = *(std::string **)a1;
        v11 = v5 << 6;
        do
        {
          v12 = (void **)((char *)&v10->__r_.__value_.__l.__data_ + v11);
          if (v10->__r_.__value_.__s.__data_[v11 - 17] < 0)
            operator delete(*(v12 - 5));
          if (*((char *)v12 - 41) < 0)
            operator delete(*(v12 - 8));
          v11 -= 64;
        }
        while (v11);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C61999BC(a1, v4);
    }
    else if ((_DWORD)v5)
    {
      sub_1C4E5CFC4(*(std::string **)a2, (std::string *)(*(_QWORD *)a2 + (v5 << 6)), *(std::string **)a1);
      goto LABEL_25;
    }
    v5 = 0;
LABEL_25:
    v13 = *(unsigned int *)(a2 + 8);
    if (v5 != v13)
    {
      v14 = *(std::string **)a2;
      v15 = *(std::string **)a1;
      v16 = v5 << 6;
      v17 = v13 << 6;
      do
      {
        v18 = (char *)v15 + v16;
        v19 = (char *)v14 + v16;
        if (*((char *)&v14->__r_.__value_.__r.__words[2] + v16 + 7) < 0)
        {
          sub_1C47EBC30(v18, *(void **)v19, *((_QWORD *)v19 + 1));
        }
        else
        {
          v20 = *(_OWORD *)v19;
          *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v18 = v20;
        }
        v21 = (char *)&v15[1] + v16;
        v22 = (void **)((char *)&v14[1].__r_.__value_.__l.__data_ + v16);
        if (*((char *)&v14[1].__r_.__value_.__r.__words[2] + v16 + 7) < 0)
        {
          sub_1C47EBC30(v21, *v22, *(std::string::size_type *)((char *)&v14[1].__r_.__value_.__l.__size_ + v16));
        }
        else
        {
          v23 = *(_OWORD *)v22;
          *(std::string::size_type *)((char *)&v15[1].__r_.__value_.__r.__words[2] + v16) = *(std::string::size_type *)((char *)&v14[1].__r_.__value_.__r.__words[2] + v16);
          *(_OWORD *)v21 = v23;
        }
        v24 = (char *)v14 + v16;
        v14 = (std::string *)((char *)v14 + 64);
        *(_OWORD *)((char *)&v15[2].__r_.__value_.__l.__data_ + v16) = *((_OWORD *)v24 + 3);
        v15 = (std::string *)((char *)v15 + 64);
        v17 -= 64;
      }
      while (v16 != v17);
    }
LABEL_34:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

std::string *sub_1C4E5CFC4(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v4;
  std::string *v5;

  v4 = __str;
  if (__str == a2)
    return __str;
  v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    std::string::operator=(this + 1, v4 + 1);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = *(_OWORD *)&v4[2].__r_.__value_.__l.__data_;
    this = (std::string *)((char *)this + 64);
    v4 = (std::string *)((char *)v4 + 64);
  }
  while (v4 != v5);
  return v5;
}

void sub_1C4E5D038(__int128 **a1, uint64_t a2)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = (uint64_t)&(*a1)[4 * v2];
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      v6 = *(__int128 *)((char *)v3 + 24);
      *(_QWORD *)(a2 + 40) = *((_QWORD *)v3 + 5);
      *(_OWORD *)(a2 + 24) = v6;
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      *((_QWORD *)v3 + 3) = 0;
      *(_OWORD *)(a2 + 48) = v3[3];
      v3 += 4;
      a2 += 64;
    }
    while (v3 != (__int128 *)v4);
    v7 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v7)
    {
      v8 = *a1;
      v9 = v7 << 6;
      do
      {
        v10 = (uint64_t)v8 + v9;
        if (*((char *)v8 + v9 - 17) < 0)
          operator delete(*(void **)(v10 - 40));
        if (*(char *)(v10 - 41) < 0)
          operator delete(*(void **)(v10 - 64));
        v9 -= 64;
      }
      while (v9);
    }
  }
}

_QWORD *sub_1C4E5D0EC(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4E2FBDC(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4E5D148((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C4E5D148(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4E5D1F8(a1, v7);
  v9 = 0;
  sub_1C4E2FBDC((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4E5D1F8(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4E5D2B0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4E5D2B0(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C4E2FBDC((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C4E5D35C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v23;

  v4 = *a1;
  v5 = sub_1C477672C(*a1 + 216, a2);
  v6 = *(_QWORD *)(v4 + 224);
  v7 = 232;
  if (v6 == *(_QWORD *)(v4 + 216))
    v7 = 236;
  if (v5 != (_QWORD *)(v6 + 8 * *(unsigned int *)(v4 + v7)))
    return 0;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    while (1)
    {
      v10 = *(_QWORD *)(v9 + 24);
      v11 = *(unsigned __int8 *)(v10 + 16);
      v12 = v10 && v11 >= 0x1C;
      if (v12 && v11 - 29 < 0xB)
        break;
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
        return 1;
    }
    v14 = (_QWORD *)a1[1];
LABEL_17:
    v23 = *(_QWORD *)(v10 + 40);
    v15 = (_QWORD *)*v14;
    v16 = sub_1C477672C(*v14 + 216, v23);
    v17 = v15[28];
    if (v17 == v15[27])
      v18 = 236;
    else
      v18 = 232;
    if (v16 == (_QWORD *)(v17 + 8 * *(unsigned int *)((char *)v15 + v18)))
    {
      v19 = v15 + 47;
      if (!sub_1C4E5D0EC(v19, &v23)[1] || sub_1C4E5D0EC(v19, &v23)[1] == a2)
        return 0;
    }
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
        break;
      v10 = *(_QWORD *)(v9 + 24);
      v20 = *(unsigned __int8 *)(v10 + 16);
      if (v10)
        v21 = v20 >= 0x1C;
      else
        v21 = 0;
      if (v21 && v20 - 29 < 0xB)
        goto LABEL_17;
    }
  }
  return 1;
}

uint64_t sub_1C4E5D490(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *(_DWORD *)(result + 20);
  if (((v2 >> 1) & 0x3FFFFFF) != 1)
  {
    v4 = 0;
    v5 = 2;
    do
    {
      v6 = result - 32 * (v2 & 0x7FFFFFF);
      if ((v2 & 0x40000000) != 0)
        v6 = *(_QWORD *)(result - 8);
      if (*(_QWORD *)(v6 + 32 * (v5 & 0xFFFFFFFE)) == a2)
        break;
      ++v4;
      v5 += 2;
    }
    while (((v2 >> 1) & 0x3FFFFFF) - 1 != v4);
  }
  return result;
}

void sub_1C4E5D4EC(uint64_t a1)
{
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 704), 8);
  sub_1C4E578C4(a1);
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C4E5D52C(_DWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *(_QWORD *)(a2 + 40);
  if (v2 == a2 + 40)
  {
    v3 = 0;
  }
  else
  {
    if (v2)
      v3 = v2 - 24;
    else
      v3 = 0;
    if (*(unsigned __int8 *)(v3 + 16) - 29 >= 0xB)
      v3 = 0;
  }
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 != 30)
    return (_DWORD *)((uint64_t (*)(void))((char *)&loc_1C4E5D578 + 4 * byte_1C85F36EF[v4 - 29]))();
  if ((*(_DWORD *)(v3 + 20) & 0x7FFFFFF) == 3)
    result[168] = 1;
  result[175] -= result[174];
  return result;
}

void sub_1C4E5D5B0(uint64_t a1@<X8>)
{
  if (((*(_DWORD *)(a1 + 20) >> 1) & 0x3FFFFFFu) >= 2)
    JUMPOUT(0x1C4E5D578);
  JUMPOUT(0x1C4E5D580);
}

void sub_1C4E5D5C8()
{
  JUMPOUT(0x1C4E5D5B8);
}

void sub_1C4E5D5D8()
{
  JUMPOUT(0x1C4E5D5B8);
}

uint64_t sub_1C4E5D5E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _QWORD v13[2];
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[6];
  _QWORD v21[2];
  void *v22[2];
  uint64_t v23;
  uint64_t v24[2];
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) + 56) + 112);
  if (v2 && *(char *)(v2 + 13) < 0)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v22[0] = &v23;
    v22[1] = (void *)0x100000000;
    v29 = 0;
    v24[0] = 0;
    v24[1] = 0;
    v25 = 0;
    v28 = 0;
    v26 = 0;
    v27 = v3;
    sub_1C53BA620((uint64_t)v22, 0);
    v13[0] = 0;
    v13[1] = 0;
    v14 = 0;
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
    v18 = v20;
    v19 = 0x400000000;
    v20[4] = v21;
    v20[5] = 0;
    v21[0] = 0;
    v21[1] = 1;
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)v13, (uint64_t)v22);
    v5 = *((_QWORD *)&v15 + 1);
    for (i = v15; i != v5; i += 8)
    {
      v6 = sub_1C477672C(a1 + 216, **(_QWORD **)(*(_QWORD *)i + 32));
      v7 = *(_QWORD *)(a1 + 224);
      if (v7 == *(_QWORD *)(a1 + 216))
        v8 = 236;
      else
        v8 = 232;
      if (v6 == (_QWORD *)(v7 + 8 * *(unsigned int *)(a1 + v8)))
        *(_DWORD *)(a1 + 640) += 25;
    }
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(v13);
    sub_1C4DC4E38(v24);
    if (v22[0] != &v23)
      free(v22[0]);
  }
  *(_DWORD *)(a1 + 644) = *(_DWORD *)(a1 + 236) - *(_DWORD *)(a1 + 240);
  *(_DWORD *)(a1 + 648) = *(_DWORD *)(a1 + 588);
  *(_QWORD *)(a1 + 652) = *(_QWORD *)(a1 + 568);
  *(_DWORD *)(a1 + 592) = *(_DWORD *)(a1 + 688);
  v10 = *(_DWORD *)(a1 + 112);
  v9 = *(_DWORD *)(a1 + 116);
  if (v9 <= v10 / 0xA)
  {
    v11 = *(_DWORD *)(a1 + 700) - *(_DWORD *)(a1 + 692);
LABEL_17:
    *(_DWORD *)(a1 + 700) = v11;
    goto LABEL_18;
  }
  if (v9 <= v10 >> 1)
  {
    v11 = *(_DWORD *)(a1 + 700) - *(_DWORD *)(a1 + 692) / 2;
    goto LABEL_17;
  }
  v11 = *(_DWORD *)(a1 + 700);
LABEL_18:
  *(_DWORD *)(a1 + 684) = v11;
  return 0;
}

uint64_t sub_1C4E5D7FC()
{
  return 0;
}

uint64_t sub_1C4E5D804(uint64_t a1, uint64_t a2, const llvm::DataLayout *a3)
{
  int v4;
  int v5;
  int v6;
  int v7;

  *(_DWORD *)(a1 + 660) -= llvm::getCallsiteCost(*(llvm **)(a1 + 80), *(llvm::CallBase **)(a1 + 64), a3);
  *(_DWORD *)(a1 + 664) = (*(_WORD *)(*(_QWORD *)(a1 + 56) + 18) & 0x3FF0) == 144;
  v4 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 48))(**(_QWORD **)(a1 + 8));
  *(_DWORD *)(a1 + 700) += (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 8) + 40))(**(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 700)
     * (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
  if (v5 >= 0)
    v6 = v5;
  else
    v6 = v5 + 1;
  *(_DWORD *)(a1 + 696) = v6 >> 1;
  v7 = v5 * v4 / 100;
  *(_DWORD *)(a1 + 692) = v7;
  *(_DWORD *)(a1 + 700) = v5 + (v6 >> 1) + v7;
  return 0;
}

int32x2_t sub_1C4E5D8E8(uint64_t a1, uint64_t a2)
{
  int v3;
  int32x2_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v7 = 0;
  v3 = sub_1C49F21C0(*(_QWORD *)(a1 + 704), *(_DWORD *)(a1 + 720), a2, &v7);
  v5 = v7;
  if (v3)
    v6 = v7 == *(_QWORD *)(a1 + 704) + 16 * *(unsigned int *)(a1 + 720);
  else
    v6 = 1;
  if (!v6)
  {
    *(_DWORD *)(a1 + 596) += *(_DWORD *)(v7 + 8);
    *(_DWORD *)(a1 + 688) -= *(_DWORD *)(v5 + 8);
    *(_QWORD *)v5 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 712), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 712) = result;
  }
  return result;
}

uint64_t sub_1C4E5D97C(uint64_t result)
{
  *(_DWORD *)(result + 600) = 1;
  return result;
}

uint64_t sub_1C4E5D988(uint64_t result)
{
  *(_DWORD *)(result + 604) += dword_1ED7F1DF0;
  return result;
}

uint64_t sub_1C4E5D9A0(uint64_t result)
{
  ++*(_DWORD *)(result + 600);
  return result;
}

uint64_t sub_1C4E5D9B0(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 84)
  {
    v3 = 0;
  }
  else if (v2 == 39)
  {
    v3 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v3 = 2;
  }
  v4 = 0;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = -(uint64_t)(v5 & 0x7FFFFFF);
  if (v5 < 0)
  {
    v7 = a2 - 32 * (v5 & 0x7FFFFFF);
    v8 = *(_QWORD *)(v7 - 8);
    if ((v8 & 0xFFFFFFFF0) != 0)
      v4 = *(_DWORD *)(v7 - 12) - *(_DWORD *)(v7 - v8);
    else
      v4 = 0;
  }
  *(_DWORD *)(result + 608) += 5 * ((-32 * v3 + 32 * (unint64_t)-v4 - 32 * v6 - 32) >> 5);
  return result;
}

uint64_t sub_1C4E5DA4C(uint64_t result)
{
  *(_DWORD *)(result + 612) += 15;
  return result;
}

uint64_t sub_1C4E5DA5C(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  int v38;
  _OWORD v39[9];
  int v40;
  char v41;
  char v42;
  _OWORD *v43;
  _OWORD *v44;
  uint64_t v45;
  int v46;
  _OWORD v47[9];
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  int v52;
  int *v53;
  __int128 v54;
  int v55;
  int v56;
  __int16 v57;
  char v58;
  _QWORD v59[2];
  char v60;
  char v61;
  char v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  uint64_t (**v66)();
  uint64_t *v67;
  int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int16 v74;

  v4 = result;
  v5 = *(unsigned __int8 *)(a3 + 16);
  if (v5 == 84)
  {
    v6 = 0;
  }
  else if (v5 == 39)
  {
    v6 = (*(_DWORD *)(a3 + 80) + 1);
  }
  else
  {
    v6 = 2;
  }
  v7 = 0;
  v8 = *(_DWORD *)(a3 + 20);
  v9 = -(uint64_t)(v8 & 0x7FFFFFF);
  if (v8 < 0)
  {
    v14 = a3 - 32 * (v8 & 0x7FFFFFF);
    v15 = *(_QWORD *)(v14 - 8);
    if ((v15 & 0xFFFFFFFF0) != 0)
      v7 = *(_DWORD *)(v14 - 12) - *(_DWORD *)(v14 - v15);
    else
      v7 = 0;
  }
  *(_DWORD *)(result + 616) += 5 * ((-32 * v6 + 32 * (unint64_t)-v7 - 32 * v9 - 32) >> 5);
  if (a4)
  {
    v72 = 0;
    v71 = 0u;
    v70 = 0u;
    v69 = 0u;
    v74 = 256;
    v73 = 16843009;
    v68 = 100;
    v10 = *(_QWORD *)(result + 8);
    v11 = *(_QWORD *)(result + 48);
    v12 = *(_QWORD *)(result + 72);
    v13 = *(_OWORD *)(result + 32);
    v17 = *(_OWORD *)(result + 16);
    v18 = v13;
    v19 = v11;
    v20 = a2;
    v21 = *(_QWORD *)(a2 + 40) + 272;
    v22 = v12;
    v23 = a3;
    v24 = 0;
    v25 = 0;
    v26 = 0u;
    v27 = 0u;
    v28 = 0;
    v30 = 0;
    v29 = 0u;
    v32 = 0;
    v31 = 0u;
    v34 = 0;
    v33 = 0u;
    v35 = v39;
    v36 = v39;
    v37 = 16;
    v39[8] = 0u;
    v38 = 0;
    v40 = 0;
    v41 = 1;
    v43 = v47;
    v44 = v47;
    v45 = 16;
    v46 = 0;
    v47[8] = 0u;
    v48 = 0;
    v16[0] = (uint64_t)&off_1E8138008;
    v16[1] = v10;
    v49 = 2147483641;
    v50 = 1;
    v51 = 0;
    v52 = 0;
    v53 = &v68;
    v55 = 0;
    v54 = 0u;
    v56 = 100;
    v57 = 256;
    v58 = 0;
    v60 = 0;
    v61 = 0;
    *(_QWORD *)((char *)v59 + 6) = 0;
    v59[0] = 0;
    v62 = 1;
    v63 = 0;
    v64 = 0u;
    v65 = 0;
    v66 = &off_1E81381A8;
    v67 = v16;
    v42 = 0;
    if (!sub_1C4E53B28(v16))
    {
      *(_DWORD *)(v4 + 680) += LODWORD(v59[0]);
      ++*(_DWORD *)(v4 + 676);
    }
    return sub_1C4E54B0C((uint64_t)v16);
  }
  else
  {
    *(_DWORD *)(result + 604) += dword_1ED7F1DF0;
  }
  return result;
}

_DWORD *sub_1C4E5DCB8(_DWORD *result, int a2, unsigned int a3)
{
  if (a2)
  {
    result[156] += 5 * a2 + 20;
  }
  else if (a3 > 3)
  {
    result[158] = result[158] + 10 * (3 * (int)a3 / 2) - 10;
  }
  else
  {
    result[157] += 10 * a3;
  }
  return result;
}

uint64_t sub_1C4E5DD1C(uint64_t result)
{
  *(_DWORD *)(result + 636) += 5;
  return result;
}

_QWORD *sub_1C4E5DD2C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v3;

  v3 = a2;
  result = sub_1C496F93C((_DWORD *)(a1 + 704), &v3);
  *((_DWORD *)result + 2) = 0;
  return result;
}

uint64_t sub_1C4E5DD58(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  result = sub_1C49F21C0(*(_QWORD *)(a1 + 704), *(_DWORD *)(a1 + 720), a2, &v5);
  if ((result & 1) != 0)
    v4 = v5;
  else
    v4 = *(_QWORD *)(a1 + 704) + 16 * *(unsigned int *)(a1 + 720);
  *(_DWORD *)(v4 + 8) += 5;
  *(_DWORD *)(a1 + 688) += 5;
  return result;
}

void sub_1C4E5DDC4(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)(a2 + 8);
    if (v2)
    {
      *(_QWORD *)(a2 + 16) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1CAA32FC0);
  }
}

llvm::cl::Option *sub_1C4E5DE0C(llvm::cl::Option *a1, char *a2, _WORD *a3, _BYTE **a4, __n128 *a5)
{
  uint64_t v10;

  v10 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_BYTE *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E898;
  *(_QWORD *)(v10 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v10 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  sub_1C4E5DEC0(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 sub_1C4E5DEC0(uint64_t a1, char *__s, _WORD *a3, _BYTE **a4, __n128 *a5)
{
  size_t v10;
  _BYTE *v11;
  __n128 result;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v10);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  v11 = *a4;
  *(_BYTE *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v11;
  result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

__n128 sub_1C4E5DF50(uint64_t a1, char *__s, _WORD *a3, _DWORD **a4, __n128 *a5)
{
  size_t v10;
  _DWORD *v11;
  __n128 result;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v10);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  v11 = *a4;
  *(_DWORD *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v11;
  result = *a5;
  *(__n128 *)(a1 + 32) = *a5;
  return result;
}

void sub_1C4E5DFE4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4E5DFF8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81382C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4E5E02C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81382C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4E5E048(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::AssumptionAnalysis::Key, a2)
       + 8;
}

uint64_t sub_1C4E5E070(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  sub_1C485C2F0();
  return sub_1C4E5E094();
}

uint64_t sub_1C4E5E094()
{
  int v1;
  int v2;
  __n128 v3;
  int *v4;
  int v5;

  v5 = 1;
  v1 = 1;
  v2 = 225;
  v3.n128_u64[0] = (unint64_t)"Default amount of inlining to perform";
  v3.n128_u64[1] = 37;
  v4 = &v2;
  sub_1C6199A9C((llvm::cl::Option *)&unk_1ED82D940, "inlinedefault-threshold", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED82D940, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Ignore TTI attributes compatibility check between callee/caller during inline cost calculation";
  v3.n128_u64[1] = 94;
  v4 = &v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F1830, "ignore-tti-inline-compatible", &v5, (_BYTE **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F1830, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Prints comments for instruction based on inline cost analysis";
  v3.n128_u64[1] = 61;
  v4 = &v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F18F0, "print-instruction-comments", &v5, (_BYTE **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F18F0, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 225;
  v3.n128_u64[0] = (unint64_t)"Control the amount of inlining to perform (default = 225)";
  v3.n128_u64[1] = 57;
  v4 = &v2;
  sub_1C6199BE8(&v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED82DA00, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 325;
  v3.n128_u64[0] = (unint64_t)"Threshold for inlining functions with inline hint";
  v3.n128_u64[1] = 49;
  v4 = &v2;
  sub_1C6199A9C((llvm::cl::Option *)&unk_1ED82DAC0, "inlinehint-threshold", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED82DAC0, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 45;
  v3.n128_u64[1] = 37;
  v4 = &v2;
  v3.n128_u64[0] = (unint64_t)"Threshold for inlining cold callsites";
  sub_1C6199A9C((llvm::cl::Option *)&unk_1ED82DB80, "inline-cold-callsite-threshold", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED82DB80, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Enable the cost-benefit analysis for the inliner";
  v3.n128_u64[1] = 48;
  v4 = &v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F19B0, "inline-enable-cost-benefit-analysis", &v5, (_BYTE **)&v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F19B0, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 8;
  v3.n128_u64[0] = (unint64_t)"Multiplier to multiply cycle savings by during inlining";
  v3.n128_u64[1] = 55;
  v4 = &v2;
  sub_1C6199D28(&v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED7F1A70, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 100;
  v3.n128_u64[0] = (unint64_t)"The maximum size of a callee that get's inlined without sufficient cycle savings";
  v3.n128_u64[1] = 80;
  v4 = &v2;
  sub_1C6199A9C((llvm::cl::Option *)&unk_1ED7F1B30, "inline-size-allowance", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED7F1B30, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 45;
  v3.n128_u64[0] = (unint64_t)"Threshold for inlining functions with cold attribute";
  v3.n128_u64[1] = 52;
  v4 = &v2;
  sub_1C6199A9C((llvm::cl::Option *)&unk_1ED82DC40, "inlinecold-threshold", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED82DC40, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 3000;
  v3.n128_u64[0] = (unint64_t)"Threshold for hot callsites ";
  v3.n128_u64[1] = 28;
  v4 = &v2;
  sub_1C6199A9C((llvm::cl::Option *)&unk_1ED82DD00, "hot-callsite-threshold", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED82DD00, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 525;
  v3.n128_u64[0] = (unint64_t)"Threshold for locally hot callsites ";
  v3.n128_u64[1] = 36;
  v4 = &v2;
  sub_1C6199A9C((llvm::cl::Option *)&unk_1ED82DDC0, "locally-hot-callsite-threshold", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED82DDC0, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 2;
  v3.n128_u64[0] = (unint64_t)"Maximum block frequency, expressed as a percentage of caller's entry frequency, for"
                                     " a callsite to be cold in the absence of profile information.";
  v3.n128_u64[1] = 144;
  v4 = &v2;
  sub_1C6199A9C((llvm::cl::Option *)&unk_1ED7F1BF0, "cold-callsite-rel-freq", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED7F1BF0, &dword_1C475E000);
  v5 = 1;
  v1 = 1;
  v2 = 60;
  v3.n128_u64[0] = (unint64_t)"Minimum block frequency, expressed as a multiple of caller's entry frequency, for a"
                                     " callsite to be hot in the absence of profile information.";
  v3.n128_u64[1] = 141;
  v4 = &v2;
  sub_1C6199A9C((llvm::cl::Option *)&unk_1ED7F1CB0, "hot-callsite-rel-freq", &v5, &v4, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED7F1CB0, &dword_1C475E000);
  v5 = 1;
  v2 = 25;
  v3.n128_u64[1] = 55;
  v4 = &v2;
  v3.n128_u64[0] = (unint64_t)"Call penalty that is applied per callsite when inlining";
  sub_1C6199E68((llvm::cl::Option *)&unk_1ED7F1D70, "inline-call-penalty", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED7F1D70, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v1) = 0;
  v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Compute the full inline cost of a call site even when the cost exceeds the threshold.";
  v3.n128_u64[1] = 85;
  v4 = &v1;
  sub_1C6199F14((llvm::cl::Option *)&unk_1ED7F1E30, "inline-cost-full", &v5, (_BYTE **)&v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F1E30, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v1) = 1;
  v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Allow inlining when caller has a superset of callee's nobuiltin attributes.";
  v3.n128_u64[1] = 75;
  v4 = &v1;
  sub_1C619A068(&v5, (char **)&v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7F1EF0, &dword_1C475E000);
  v5 = 1;
  LOBYTE(v2) = 0;
  v3.n128_u64[0] = (unint64_t)"Disables evaluation of GetElementPtr with constant operands";
  v3.n128_u64[1] = 59;
  v4 = &v2;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED7F1FB0, "disable-gep-const-evaluation", &v5, (_BYTE **)&v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F1FB0, &dword_1C475E000);
}

void llvm::DefaultInlineAdvice::recordUnsuccessfulInliningImpl(uint64_t a1, const char **a2)
{
  llvm::Value *v4;
  const char *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string::size_type v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  unsigned __int8 *v17;
  size_t v18;
  llvm::OptimizationRemarkEmitter *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  void **v33;
  char *v34;
  unint64_t v35;
  void **v36;
  void *v37[2];
  char v38;
  void *v39;
  char v40;
  void *v41[2];
  char v42;
  void *v43;
  char v44;
  std::string __dst;
  void *v46;
  char v47;
  std::string v48;
  void *v49;
  unsigned int v50;
  uint64_t v51;
  void *__p[2];
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  char v60;
  char v61;
  void *v62;
  uint64_t v63;
  _BYTE v64[260];
  int v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v4 = *(llvm::Value **)(a1 + 64);
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v7;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memmove(p_dst, v5, v7);
  p_dst->__r_.__value_.__s.__data_[v7] = 0;
  v11 = std::string::append(&__dst, "; ");
  v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  llvm::inlineCostStr(a1 + 72, (uint64_t)v41);
  if (v42 >= 0)
    v13 = v41;
  else
    v13 = (void **)v41[0];
  if (v42 >= 0)
    v14 = v42 & 0x7F;
  else
    v14 = (std::string::size_type)v41[1];
  v15 = std::string::append(&v48, (const std::string::value_type *)v13, v14);
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v53 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v53 >= 0)
    v17 = (unsigned __int8 *)__p;
  else
    v17 = (unsigned __int8 *)__p[0];
  if (v53 >= 0)
    v18 = HIBYTE(v53) & 0x7F;
  else
    v18 = (size_t)__p[1];
  llvm::setInlineRemark(v4, v17, v18);
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
  if (v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v19 = *(llvm::OptimizationRemarkEmitter **)(a1 + 48);
  v20 = ****(_QWORD ****)v19;
  if (*(_QWORD *)(v20 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v20 + 72) + 48))(*(_QWORD *)(v20 + 72)))
  {
    v21 = *(_QWORD *)(a1 + 32);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 - 8 * *(unsigned int *)(v21 + 8));
      if (*(_BYTE *)v22 != 15)
        v22 = *(_QWORD *)(v22 - 8 * *(unsigned int *)(v22 + 8));
      v23 = *(_DWORD *)(v21 + 4);
      LODWORD(v21) = *(unsigned __int16 *)(v21 + 2);
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    v24 = *(_QWORD *)(a1 + 40);
    v25 = *(_QWORD *)(v24 + 56);
    LODWORD(__p[1]) = 10;
    BYTE4(__p[1]) = 2;
    v53 = v25;
    v54 = v22;
    v55 = v23;
    v56 = v21;
    v57 = "inline";
    v58 = "NotInlined";
    v59 = 10;
    v60 = 0;
    v61 = 0;
    v62 = v64;
    v63 = 0x400000000;
    v64[256] = 0;
    v65 = -1;
    v66 = v24;
    __p[0] = &off_1E814E538;
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)"'";
    v48.__r_.__value_.__l.__size_ = 1;
    sub_1C53B17B4((uint64_t)&v62, (const void **)&v48.__r_.__value_.__l.__data_);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__dst, "Callee", 6uLL, *(_BYTE **)(a1 + 24));
    v26 = sub_1C47E3888((uint64_t)__p, (uint64_t)&__dst);
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)"' is not inlined into '";
    v48.__r_.__value_.__l.__size_ = 23;
    sub_1C53B17B4(v26 + 80, (const void **)&v48.__r_.__value_.__l.__data_);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v41, "Caller", 6uLL, *(_BYTE **)(a1 + 16));
    v27 = sub_1C47E3888(v26, (uint64_t)v41);
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)"': ";
    v48.__r_.__value_.__l.__size_ = 3;
    sub_1C53B17B4(v27 + 80, (const void **)&v48.__r_.__value_.__l.__data_);
    v28 = (char *)*a2;
    if (v28)
      v29 = strlen(v28);
    else
      v29 = 0;
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v37, "Reason", 6uLL, v28, v29);
    v30 = sub_1C47E3888(v27, (uint64_t)v37);
    sub_1C61998EC((uint64_t)&v48, v30);
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E538;
    if (v40 < 0)
      operator delete(v39);
    if (v38 < 0)
      operator delete(v37[0]);
    if (v44 < 0)
      operator delete(v43);
    if (v42 < 0)
      operator delete(v41[0]);
    if (v47 < 0)
      operator delete(v46);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    __p[0] = &off_1E814E790;
    v31 = (char *)v62;
    if ((_DWORD)v63)
    {
      v32 = (unint64_t)v63 << 6;
      do
      {
        v33 = (void **)&v31[v32];
        if (v31[v32 - 17] < 0)
          operator delete(*(v33 - 5));
        if (*((char *)v33 - 41) < 0)
          operator delete(*(v33 - 8));
        v32 -= 64;
      }
      while (v32);
      v31 = (char *)v62;
    }
    if (v31 != v64)
      free(v31);
    llvm::OptimizationRemarkEmitter::emit(v19, (llvm::DiagnosticInfoOptimizationBase *)&v48);
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E790;
    v34 = (char *)v49;
    if (v50)
    {
      v35 = (unint64_t)v50 << 6;
      do
      {
        v36 = (void **)&v34[v35];
        if (v34[v35 - 17] < 0)
          operator delete(*(v36 - 5));
        if (*((char *)v36 - 41) < 0)
          operator delete(*(v36 - 8));
        v35 -= 64;
      }
      while (v35);
      v34 = (char *)v49;
    }
    if (v34 != (char *)&v51)
      free(v34);
  }
}

llvm::Value *llvm::setInlineRemark(llvm::Value *result, unsigned __int8 *a2, size_t a3)
{
  llvm::Value *v3;
  uint64_t *Context;
  unsigned int *v7;
  llvm::LLVMContext *v8;

  if (byte_1ED82DF00)
  {
    v3 = result;
    Context = (uint64_t *)llvm::Value::getContext(result);
    v7 = llvm::Attribute::get(Context, "inline-remark", 0xDuLL, a2, a3);
    v8 = (llvm::LLVMContext *)llvm::Value::getContext(v3);
    result = (llvm::Value *)llvm::AttributeList::addAttributeAtIndex((llvm::Value *)((char *)v3 + 64), v8, -1, (uint64_t)v7);
    *((_QWORD *)v3 + 8) = result;
  }
  return result;
}

void llvm::inlineCostStr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  void (**v4)(llvm::raw_ostream *__hidden);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v4 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v12 = v13;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  sub_1C4E5F1B8((llvm::raw_ostream *)&v4, a1);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a2, *v12, (unint64_t)v12[1]);
  }
  else
  {
    v3 = *(_OWORD *)v12;
    *(_QWORD *)(a2 + 16) = v12[2];
    *(_OWORD *)a2 = v3;
  }
  v4 = off_1E81A6E70;
  if (v11 == 1 && v6)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
}

void llvm::DefaultInlineAdvice::recordInliningWithCalleeDeletedImpl(llvm::OptimizationRemarkEmitter **this)
{
  llvm::DefaultInlineAdvice *v1;
  llvm::OptimizationRemarkEmitter *v2;
  unsigned __int8 *v3;
  llvm::DefaultInlineAdvice *v4;
  llvm::OptimizationRemarkEmitter *v5;
  unsigned __int8 *v6;

  if (*((_BYTE *)this + 136))
  {
    v1 = (llvm::DefaultInlineAdvice *)this;
    v2 = this[6];
    v3 = (unsigned __int8 *)*((_QWORD *)v1 + 4);
    v6 = v3;
    if (v3)
    {
      v4 = v1;
      v5 = v2;
      llvm::MetadataTracking::track((uint64_t)&v6, v3, 2);
      v1 = v4;
      v2 = v5;
    }
    llvm::emitInlinedIntoBasedOnCost(v2, &v6, *((_QWORD *)v1 + 5), *((_BYTE **)v1 + 3), *((_BYTE **)v1 + 2), (_DWORD *)v1 + 18, 0, 0);
    if (v6)
      llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
  }
}

void llvm::emitInlinedIntoBasedOnCost(llvm::OptimizationRemarkEmitter *a1, unsigned __int8 **a2, uint64_t a3, _BYTE *a4, _BYTE *a5, _DWORD *a6, char a7, const char *a8)
{
  unsigned __int8 *v14;
  _BOOL4 v15;
  _QWORD v16[2];
  unsigned __int8 *v17;
  char v18;

  v18 = a7;
  v14 = *a2;
  v17 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v17, v14, 2);
  v15 = *a6 == 0x80000000;
  v16[0] = &v18;
  v16[1] = a6;
  llvm::emitInlinedInto(a1, &v17, a3, a4, a5, v15, (void (*)(uint64_t, uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden)))sub_1C4E616E4, (uint64_t)v16, a8);
  if (v17)
    llvm::MetadataTracking::untrack((uint64_t)&v17, v17);
}

void llvm::DefaultInlineAdvice::recordInliningImpl(llvm::OptimizationRemarkEmitter **this)
{
  llvm::DefaultInlineAdvice *v1;
  llvm::OptimizationRemarkEmitter *v2;
  unsigned __int8 *v3;
  llvm::DefaultInlineAdvice *v4;
  llvm::OptimizationRemarkEmitter *v5;
  unsigned __int8 *v6;

  if (*((_BYTE *)this + 136))
  {
    v1 = (llvm::DefaultInlineAdvice *)this;
    v2 = this[6];
    v3 = (unsigned __int8 *)*((_QWORD *)v1 + 4);
    v6 = v3;
    if (v3)
    {
      v4 = v1;
      v5 = v2;
      llvm::MetadataTracking::track((uint64_t)&v6, v3, 2);
      v1 = v4;
      v2 = v5;
    }
    llvm::emitInlinedIntoBasedOnCost(v2, &v6, *((_QWORD *)v1 + 5), *((_BYTE **)v1 + 3), *((_BYTE **)v1 + 2), (_DWORD *)v1 + 18, 0, 0);
    if (v6)
      llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
  }
}

uint64_t llvm::DefaultInlineAdvisor::getAdviceImpl@<X0>(llvm::DefaultInlineAdvisor *this@<X0>, llvm::CallBase *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t ResultImpl;
  llvm::OptimizationRemarkEmitter *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  _BYTE v15[16];
  _BYTE v16[40];
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  _QWORD v23[4];
  llvm::OptimizationRemarkEmitter *v24;
  char v25;

  v6 = *((_QWORD *)this + 2);
  v7 = (char *)this + 32;
  v8 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 56);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(v6, &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Key, v8);
  v21 = sub_1C4E60FE0((uint64_t *)(ResultImpl + 8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40));
  v10 = (llvm::OptimizationRemarkEmitter *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v6, &llvm::OptimizationRemarkEmitterAnalysis::Key, v8)+ 8);
  v19 = v6;
  v20 = v6;
  v18 = v6;
  v22[0] = v6;
  v22[1] = v7;
  v23[0] = &v20;
  v23[1] = &v18;
  v23[2] = &v19;
  v23[3] = &v21;
  v24 = v10;
  v11 = (unsigned __int8 *)this + 94;
  if (!*((_BYTE *)this + 95))
    v11 = (unsigned __int8 *)&unk_1ED7F20F0;
  llvm::shouldInline(a2, (void (*)(__int128 *__return_ptr, uint64_t, llvm::Value *))sub_1C4E61128, (uint64_t)v22, v10, *v11 != 0, (uint64_t)v15);
  v12 = llvm::AnalysisManager<llvm::Function>::getResultImpl(*((_QWORD *)this + 2), &llvm::OptimizationRemarkEmitterAnalysis::Key, *(_QWORD *)(*((_QWORD *)a2 + 5) + 56))+ 8;
  v13 = operator new();
  LOBYTE(v22[0]) = 0;
  v25 = 0;
  if (v17)
    sub_1C4E61424((uint64_t)v22, (uint64_t)v15);
  result = sub_1C4E614A0(v13, (uint64_t)this, a2, (uint64_t)v22, v12, 1);
  if (v25 && (_BYTE)v24)
    result = sub_1C61996A0((uint64_t)v23);
  *a3 = v13;
  if (v17)
  {
    if (v16[32])
      return sub_1C61996A0((uint64_t)v16);
  }
  return result;
}

uint64_t llvm::InlineAdvice::InlineAdvice(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  char v10;
  uint64_t v11;

  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)result = &unk_1E8138308;
  v5 = a3[5];
  *(_QWORD *)(result + 16) = *(_QWORD *)(v5 + 56);
  v6 = *(a3 - 4);
  if (!v6 || *(_BYTE *)(v6 + 16) || *(_QWORD *)(v6 + 24) != a3[9])
    v6 = 0;
  v7 = (unsigned __int8 *)a3[6];
  *(_QWORD *)(result + 32) = v7;
  *(_QWORD *)(result + 24) = v6;
  if (v7)
  {
    v11 = result;
    v10 = a5;
    v9 = a4;
    llvm::MetadataTracking::track(result + 32, v7, 2);
    a4 = v9;
    result = v11;
    a5 = v10;
    v5 = a3[5];
  }
  *(_QWORD *)(result + 40) = v5;
  *(_QWORD *)(result + 48) = a4;
  *(_BYTE *)(result + 56) = a5;
  *(_BYTE *)(result + 57) = 0;
  return result;
}

void llvm::InlineAdvice::recordInlineStatsIfNeeded(llvm::InlineAdvice *this)
{
  if (*(_QWORD *)(*((_QWORD *)this + 1) + 24))
    llvm::ImportedFunctionsInliningStatistics::recordInline(*(llvm::ImportedFunctionsInliningStatistics **)(*((_QWORD *)this + 1) + 24), *((const llvm::Function **)this + 2), *((const llvm::Function **)this + 3));
}

uint64_t llvm::InlineAdvice::recordInlining(llvm::InlineAdvice *this)
{
  llvm::ImportedFunctionsInliningStatistics *v1;

  *((_BYTE *)this + 57) = 1;
  v1 = *(llvm::ImportedFunctionsInliningStatistics **)(*((_QWORD *)this + 1) + 24);
  if (!v1)
    return (*(uint64_t (**)(llvm::InlineAdvice *))(*(_QWORD *)this + 16))(this);
  llvm::ImportedFunctionsInliningStatistics::recordInline(v1, *((const llvm::Function **)this + 2), *((const llvm::Function **)this + 3));
  return (*(uint64_t (**)(llvm::InlineAdvice *))(*(_QWORD *)this + 16))(this);
}

uint64_t llvm::InlineAdvice::recordInliningWithCalleeDeleted(llvm::InlineAdvice *this)
{
  llvm::ImportedFunctionsInliningStatistics *v1;

  *((_BYTE *)this + 57) = 1;
  v1 = *(llvm::ImportedFunctionsInliningStatistics **)(*((_QWORD *)this + 1) + 24);
  if (!v1)
    return (*(uint64_t (**)(llvm::InlineAdvice *))(*(_QWORD *)this + 24))(this);
  llvm::ImportedFunctionsInliningStatistics::recordInline(v1, *((const llvm::Function **)this + 2), *((const llvm::Function **)this + 3));
  return (*(uint64_t (**)(llvm::InlineAdvice *))(*(_QWORD *)this + 24))(this);
}

llvm::raw_ostream *sub_1C4E5F1B8(llvm::raw_ostream *this, uint64_t a2)
{
  void *v4;
  const char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  uint64_t v11;
  void **v12;
  size_t v13;
  _BYTE *v14;
  char *v15;
  _WORD *v16;
  size_t v17;
  const char *v18;
  size_t v19;
  uint64_t v21;
  void *v22;
  char v23;
  void *__p[2];
  char v25;
  void *__dst[2];
  char v27;
  void *v28;
  size_t v29;
  char v30;

  if (*(_DWORD *)a2 == 0x7FFFFFFF)
  {
    v7 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v7) <= 0xB)
    {
      v5 = "(cost=never)";
      v6 = 12;
      goto LABEL_7;
    }
    *(_DWORD *)(v7 + 8) = 695362934;
    *(_QWORD *)v7 = *(_QWORD *)"(cost=never)";
    v21 = *((_QWORD *)this + 4) + 12;
    goto LABEL_51;
  }
  if (*(_DWORD *)a2 == 0x80000000)
  {
    v4 = (void *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v4 <= 0xCuLL)
    {
      v5 = "(cost=always)";
      v6 = 13;
LABEL_7:
      llvm::raw_ostream::write(this, v5, v6);
      goto LABEL_34;
    }
    qmemcpy(v4, "(cost=always)", 13);
    v21 = *((_QWORD *)this + 4) + 13;
LABEL_51:
    *((_QWORD *)this + 4) = v21;
    goto LABEL_34;
  }
  v8 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v8) > 5)
  {
    *(_WORD *)(v8 + 4) = 15732;
    *(_DWORD *)v8 = 1936679720;
    *((_QWORD *)this + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(this, "(cost=", 6uLL);
  }
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Cost", 4uLL, *(_DWORD *)a2);
  if (v30 >= 0)
    v9 = (const char *)&v28;
  else
    v9 = (const char *)v28;
  if (v30 >= 0)
    v10 = v30 & 0x7F;
  else
    v10 = v29;
  llvm::raw_ostream::write(this, v9, v10);
  v11 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v11) > 0xB)
  {
    *(_DWORD *)(v11 + 8) = 1029991535;
    *(_QWORD *)v11 = *(_QWORD *)", threshold=";
    *((_QWORD *)this + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(this, ", threshold=", 0xCuLL);
  }
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v22, "Threshold", 9uLL, *(_DWORD *)(a2 + 4));
  if (v25 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if (v25 >= 0)
    v13 = v25 & 0x7F;
  else
    v13 = (size_t)__p[1];
  llvm::raw_ostream::write(this, (const char *)v12, v13);
  v14 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v14)
  {
    llvm::raw_ostream::write(this, ")", 1uLL);
  }
  else
  {
    *v14 = 41;
    ++*((_QWORD *)this + 4);
  }
  if (v25 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22);
  if (v30 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(__dst[0]);
LABEL_34:
  v15 = *(char **)(a2 + 8);
  if (v15)
  {
    v16 = (_WORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v16 > 1uLL)
    {
      *v16 = 8250;
      *((_QWORD *)this + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(this, ": ", 2uLL);
    }
    v17 = strlen(v15);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Reason", 6uLL, v15, v17);
    if (v30 >= 0)
      v18 = (const char *)&v28;
    else
      v18 = (const char *)v28;
    if (v30 >= 0)
      v19 = v30 & 0x7F;
    else
      v19 = v29;
    llvm::raw_ostream::write(this, v18, v19);
    if (v30 < 0)
      operator delete(v28);
    if (v27 < 0)
      operator delete(__dst[0]);
  }
  return this;
}

void llvm::shouldInline(llvm::Value *a1@<X0>, void (*a2)(__int128 *__return_ptr, uint64_t, llvm::Value *)@<X1>, uint64_t a3@<X2>, llvm::OptimizationRemarkEmitter *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  llvm::Value *v10;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  llvm::APInt *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  llvm::OptimizationRemarkEmitter *v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *p_p;
  size_t v31;
  _BOOL4 v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  llvm::OptimizationRemarkEmitter *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  void **v59;
  char *v60;
  unint64_t v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  llvm::OptimizationRemarkEmitter *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  void **v73;
  unint64_t v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  void **v80;
  char *v81;
  unint64_t v82;
  void **v83;
  llvm::APInt *v84;
  llvm::OptimizationRemarkEmitter *v85;
  llvm::Value *v86;
  int v87;
  _BYTE v88[32];
  unsigned __int8 v89;
  __int128 v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  char v95;
  void *v96[2];
  char v97;
  void *v98;
  char v99;
  void *v100[2];
  char v101;
  void *v102;
  char v103;
  const char *v104;
  uint64_t v105;
  void *v106;
  unsigned int v107;
  _BYTE v108[272];
  void *__p;
  size_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  const char *v115;
  const char *v116;
  uint64_t v117;
  char v118;
  char v119;
  void *v120;
  uint64_t v121;
  _BYTE v122[256];
  char v123;
  int v124;
  uint64_t v125;
  uint64_t v126;

  v10 = a1;
  v126 = *MEMORY[0x1E0C80C00];
  a2(&v90, a3, a1);
  v12 = *((_QWORD *)v10 - 4);
  if (!v12 || *(_BYTE *)(v12 + 16) || *(_QWORD *)(v12 + 24) != *((_QWORD *)v10 + 9))
    v12 = 0;
  v13 = v90;
  if ((_DWORD)v90 == 0x80000000)
    goto LABEL_6;
  v15 = *((_QWORD *)v10 + 5);
  v16 = *(_QWORD *)(v15 + 56);
  if ((int)v90 >= SDWORD1(v90))
  {
    v23 = ****(_QWORD ****)a4;
    if (*(_QWORD *)(v23 + 128))
    {
      v50 = *(_QWORD *)(v15 + 56);
      v25 = v50;
      if ((_DWORD)v90 == 0x7FFFFFFF)
        goto LABEL_24;
    }
    else
    {
      v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v23 + 72) + 48))(*(_QWORD *)(v23 + 72));
      if (v13 == 0x7FFFFFFF)
      {
        if (v24)
        {
          v15 = *((_QWORD *)v10 + 5);
          v25 = *(_QWORD *)(v15 + 56);
LABEL_24:
          v26 = *((_QWORD *)v10 + 6);
          if (v26)
          {
            v28 = *(_QWORD *)(v26 - 8 * *(unsigned int *)(v26 + 8));
            if (*(_BYTE *)v28 != 15)
              v28 = *(_QWORD *)(v28 - 8 * *(unsigned int *)(v28 + 8));
            v27 = a4;
            v29 = *(_DWORD *)(v26 + 4);
            LODWORD(v26) = *(unsigned __int16 *)(v26 + 2);
          }
          else
          {
            v27 = a4;
            v28 = 0;
            v29 = 0;
          }
          LODWORD(v110) = 10;
          BYTE4(v110) = 2;
          v111 = v25;
          v112 = v28;
          v113 = v29;
          v114 = v26;
          v115 = "inline";
          v116 = "NeverInline";
          v117 = 11;
          v118 = 0;
          v119 = 0;
          v120 = v122;
          v121 = 0x400000000;
          v123 = 0;
          v124 = -1;
          v125 = v15;
          __p = &off_1E814E538;
          v104 = "'";
          v105 = 1;
          sub_1C53B17B4((uint64_t)&v120, (const void **)&v104);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v100, "Callee", 6uLL, (_BYTE *)v12);
          v55 = sub_1C47E3888((uint64_t)&__p, (uint64_t)v100);
          v104 = "' not inlined into '";
          v105 = 20;
          sub_1C53B17B4(v55 + 80, (const void **)&v104);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v96, "Caller", 6uLL, (_BYTE *)v16);
          v56 = sub_1C47E3888(v55, (uint64_t)v96);
          v104 = "' because it should never be inlined ";
          v105 = 37;
          sub_1C53B17B4(v56 + 80, (const void **)&v104);
          sub_1C4E61510(v56, (uint64_t)&v90);
          sub_1C61998EC((uint64_t)&v104, v56);
          v104 = (const char *)&off_1E814E538;
          if (v99 < 0)
            operator delete(v98);
          if (v97 < 0)
            operator delete(v96[0]);
          if (v103 < 0)
            operator delete(v102);
          if (v101 < 0)
            operator delete(v100[0]);
          __p = &off_1E814E790;
          v57 = (char *)v120;
          if ((_DWORD)v121)
          {
            v58 = (unint64_t)v121 << 6;
            do
            {
              v59 = (void **)&v57[v58];
              if (v57[v58 - 17] < 0)
                operator delete(*(v59 - 5));
              if (*((char *)v59 - 41) < 0)
                operator delete(*(v59 - 8));
              v58 -= 64;
            }
            while (v58);
            v57 = (char *)v120;
          }
          if (v57 != v122)
            free(v57);
          llvm::OptimizationRemarkEmitter::emit(v27, (llvm::DiagnosticInfoOptimizationBase *)&v104);
          v104 = (const char *)&off_1E814E790;
          v60 = (char *)v106;
          if (!v107)
            goto LABEL_149;
          v61 = (unint64_t)v107 << 6;
          do
          {
            v62 = (void **)&v60[v61];
            if (v60[v61 - 17] < 0)
              operator delete(*(v62 - 5));
            if (*((char *)v62 - 41) < 0)
              operator delete(*(v62 - 8));
            v61 -= 64;
          }
          while (v61);
LABEL_148:
          v60 = (char *)v106;
LABEL_149:
          if (v60 != v108)
            free(v60);
        }
LABEL_27:
        llvm::inlineCostStr((uint64_t)&v90, (uint64_t)&__p);
        if (v111 >= 0)
          p_p = (unsigned __int8 *)&__p;
        else
          p_p = (unsigned __int8 *)__p;
        if (v111 >= 0)
          v31 = HIBYTE(v111) & 0x7F;
        else
          v31 = v110;
        llvm::setInlineRemark(v10, p_p, v31);
        if (SHIBYTE(v111) < 0)
          operator delete(__p);
        goto LABEL_80;
      }
      if (!v24)
        goto LABEL_27;
      v15 = *((_QWORD *)v10 + 5);
      v50 = *(_QWORD *)(v15 + 56);
    }
    v51 = *((_QWORD *)v10 + 6);
    if (v51)
    {
      v53 = *(_QWORD *)(v51 - 8 * *(unsigned int *)(v51 + 8));
      if (*(_BYTE *)v53 != 15)
        v53 = *(_QWORD *)(v53 - 8 * *(unsigned int *)(v53 + 8));
      v52 = a4;
      v54 = *(_DWORD *)(v51 + 4);
      LODWORD(v51) = *(unsigned __int16 *)(v51 + 2);
    }
    else
    {
      v52 = a4;
      v53 = 0;
      v54 = 0;
    }
    LODWORD(v110) = 10;
    BYTE4(v110) = 2;
    v111 = v50;
    v112 = v53;
    v113 = v54;
    v114 = v51;
    v115 = "inline";
    v116 = "TooCostly";
    v117 = 9;
    v118 = 0;
    v119 = 0;
    v120 = v122;
    v121 = 0x400000000;
    v123 = 0;
    v124 = -1;
    v125 = v15;
    __p = &off_1E814E538;
    v104 = "'";
    v105 = 1;
    sub_1C53B17B4((uint64_t)&v120, (const void **)&v104);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v100, "Callee", 6uLL, (_BYTE *)v12);
    v69 = sub_1C47E3888((uint64_t)&__p, (uint64_t)v100);
    v104 = "' not inlined into '";
    v105 = 20;
    sub_1C53B17B4(v69 + 80, (const void **)&v104);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v96, "Caller", 6uLL, (_BYTE *)v16);
    v70 = sub_1C47E3888(v69, (uint64_t)v96);
    v104 = "' because too costly to inline ";
    v105 = 31;
    sub_1C53B17B4(v70 + 80, (const void **)&v104);
    sub_1C4E61510(v70, (uint64_t)&v90);
    sub_1C61998EC((uint64_t)&v104, v70);
    v104 = (const char *)&off_1E814E538;
    if (v99 < 0)
      operator delete(v98);
    if (v97 < 0)
      operator delete(v96[0]);
    if (v103 < 0)
      operator delete(v102);
    if (v101 < 0)
      operator delete(v100[0]);
    __p = &off_1E814E790;
    v71 = (char *)v120;
    if ((_DWORD)v121)
    {
      v72 = (unint64_t)v121 << 6;
      do
      {
        v73 = (void **)&v71[v72];
        if (v71[v72 - 17] < 0)
          operator delete(*(v73 - 5));
        if (*((char *)v73 - 41) < 0)
          operator delete(*(v73 - 8));
        v72 -= 64;
      }
      while (v72);
      v71 = (char *)v120;
    }
    if (v71 != v122)
      free(v71);
    llvm::OptimizationRemarkEmitter::emit(v52, (llvm::DiagnosticInfoOptimizationBase *)&v104);
    v104 = (const char *)&off_1E814E790;
    v60 = (char *)v106;
    if (!v107)
      goto LABEL_149;
    v74 = (unint64_t)v107 << 6;
    do
    {
      v75 = (void **)&v60[v74];
      if (v60[v74 - 17] < 0)
        operator delete(*(v75 - 5));
      if (*((char *)v75 - 41) < 0)
        operator delete(*(v75 - 8));
      v74 -= 64;
    }
    while (v74);
    goto LABEL_148;
  }
  if (!a5)
    goto LABEL_6;
  v17 = 0;
  v87 = v90;
  v18 = (llvm::APInt *)v88;
  v88[0] = 0;
  v89 = 0;
  if (v95)
  {
    v18 = sub_1C6199A28((llvm::APInt *)v88, (llvm::APInt *)&v91);
    v17 = 1;
    v89 = 1;
  }
  v19 = *(_DWORD *)(v16 + 32) & 0xF;
  v20 = v19 > 8 || ((1 << v19) & 0x188) == 0;
  if (v20 || v87 < 1)
  {
    v32 = 0;
    goto LABEL_75;
  }
  v86 = v10;
  v21 = *(_QWORD *)(v16 + 8);
  if (v19 - 7 > 1)
  {
    v22 = 0;
    v32 = 0;
    if (v21)
    {
LABEL_37:
      v84 = v18;
      v85 = a4;
      v33 = 0;
      v34 = 0;
      v35 = 0;
      do
      {
        v36 = *(_QWORD *)(v21 + 24);
        v37 = *(unsigned __int8 *)(v36 + 16);
        if (v37 < 0x1C)
          goto LABEL_48;
        v38 = v37 - 33;
        v39 = v38 > 0x33;
        v40 = (1 << v38) & 0x8000000000041;
        if (v39 || v40 == 0)
          goto LABEL_48;
        v42 = *(_QWORD *)(v36 - 32);
        if (!v42 || *(_BYTE *)(v42 + 16) || *(_QWORD *)(v42 + 24) != *(_QWORD *)(v36 + 72))
          v42 = 0;
        if (v42 == v16)
        {
          ((void (*)(void **__return_ptr, uint64_t))a2)(&__p, a3);
          v43 = (_DWORD)__p + v35;
          if (HIDWORD(__p) - (int)__p < v87)
          {
            v44 = v34 + 1;
          }
          else
          {
            v43 = v35;
            v44 = v34;
          }
          if (HIDWORD(__p) - (int)__p < v87)
            v45 = 1;
          else
            v45 = v33;
          if ((_DWORD)__p == 0x80000000)
          {
            v43 = v35;
            v44 = v34;
            v45 = v33;
          }
          if (SHIDWORD(__p) <= (int)__p)
          {
            v22 = 0;
          }
          else
          {
            v35 = v43;
            v34 = v44;
            v33 = v45;
          }
          if ((_BYTE)v116)
            sub_1C61996A0((uint64_t)&v111);
        }
        else
        {
LABEL_48:
          v22 = 0;
        }
        v21 = *(_QWORD *)(v21 + 8);
      }
      while (v21);
      if ((v33 & 1) != 0)
      {
        v46 = v35 - 15000;
        if (!v22)
          v46 = v35;
        v47 = v46 + v87 * v34 < v87 * dword_1ED7F21B0;
        v48 = v46 < v87;
        if (dword_1ED7F21B0 < 0)
          v32 = v48;
        else
          v32 = v47;
      }
      else
      {
        v32 = 0;
      }
      v18 = v84;
      a4 = v85;
    }
  }
  else
  {
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 8) != 0;
      goto LABEL_37;
    }
    v32 = 0;
  }
  v17 = v89;
  v10 = v86;
LABEL_75:
  if (v17)
  {
    sub_1C61996A0((uint64_t)v18);
    v89 = 0;
    if (v32)
    {
LABEL_77:
      v49 = ****(_QWORD ****)a4;
      if (*(_QWORD *)(v49 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v49 + 72) + 48))(*(_QWORD *)(v49 + 72)))
      {
        v63 = *((_QWORD *)v10 + 5);
        v64 = *((_QWORD *)v10 + 6);
        v65 = *(_QWORD *)(v63 + 56);
        if (v64)
        {
          v67 = *(_QWORD *)(v64 - 8 * *(unsigned int *)(v64 + 8));
          v66 = a4;
          if (*(_BYTE *)v67 != 15)
            v67 = *(_QWORD *)(v67 - 8 * *(unsigned int *)(v67 + 8));
          v68 = *(_DWORD *)(v64 + 4);
          LODWORD(v64) = *(unsigned __int16 *)(v64 + 2);
        }
        else
        {
          v66 = a4;
          v67 = 0;
          v68 = 0;
        }
        LODWORD(v110) = 10;
        BYTE4(v110) = 2;
        v111 = v65;
        v112 = v67;
        v113 = v68;
        v114 = v64;
        v115 = "inline";
        v116 = "IncreaseCostInOtherContexts";
        v117 = 27;
        v118 = 0;
        v119 = 0;
        v120 = v122;
        v121 = 0x400000000;
        v123 = 0;
        v124 = -1;
        v125 = v63;
        __p = &off_1E814E538;
        v104 = "Not inlining. Cost of inlining '";
        v105 = 32;
        sub_1C53B17B4((uint64_t)&v120, (const void **)&v104);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v100, "Callee", 6uLL, (_BYTE *)v12);
        v76 = sub_1C47E3888((uint64_t)&__p, (uint64_t)v100);
        v104 = "' increases the cost of inlining '";
        v105 = 34;
        sub_1C53B17B4(v76 + 80, (const void **)&v104);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v96, "Caller", 6uLL, (_BYTE *)v16);
        v77 = sub_1C47E3888(v76, (uint64_t)v96);
        v104 = "' in other contexts";
        v105 = 19;
        sub_1C53B17B4(v77 + 80, (const void **)&v104);
        sub_1C61998EC((uint64_t)&v104, v77);
        v104 = (const char *)&off_1E814E538;
        if (v99 < 0)
          operator delete(v98);
        if (v97 < 0)
          operator delete(v96[0]);
        if (v103 < 0)
          operator delete(v102);
        if (v101 < 0)
          operator delete(v100[0]);
        __p = &off_1E814E790;
        v78 = (char *)v120;
        if ((_DWORD)v121)
        {
          v79 = (unint64_t)v121 << 6;
          do
          {
            v80 = (void **)&v78[v79];
            if (v78[v79 - 17] < 0)
              operator delete(*(v80 - 5));
            if (*((char *)v80 - 41) < 0)
              operator delete(*(v80 - 8));
            v79 -= 64;
          }
          while (v79);
          v78 = (char *)v120;
        }
        if (v78 != v122)
          free(v78);
        llvm::OptimizationRemarkEmitter::emit(v66, (llvm::DiagnosticInfoOptimizationBase *)&v104);
        v104 = (const char *)&off_1E814E790;
        v81 = (char *)v106;
        if (v107)
        {
          v82 = (unint64_t)v107 << 6;
          do
          {
            v83 = (void **)&v81[v82];
            if (v81[v82 - 17] < 0)
              operator delete(*(v83 - 5));
            if (*((char *)v83 - 41) < 0)
              operator delete(*(v83 - 8));
            v82 -= 64;
          }
          while (v82);
          v81 = (char *)v106;
        }
        if (v81 != v108)
          free(v81);
      }
      llvm::setInlineRemark(v10, "deferred", 8uLL);
LABEL_80:
      v14 = 0;
      *(_BYTE *)a6 = 0;
      goto LABEL_81;
    }
  }
  else if (v32)
  {
    goto LABEL_77;
  }
LABEL_6:
  *(_OWORD *)a6 = v90;
  *(_BYTE *)(a6 + 16) = 0;
  *(_BYTE *)(a6 + 48) = 0;
  v14 = 1;
  if (v95)
  {
    *(_DWORD *)(a6 + 24) = v92;
    *(_QWORD *)(a6 + 16) = v91;
    *(_DWORD *)(a6 + 40) = v94;
    *(_QWORD *)(a6 + 32) = v93;
    v92 = 0;
    v94 = 0;
    *(_BYTE *)(a6 + 48) = 1;
  }
LABEL_81:
  *(_BYTE *)(a6 + 56) = v14;
  if (v95)
    sub_1C61996A0((uint64_t)&v91);
}

void llvm::formatCallSiteLocation(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  void **v3;
  uint64_t v4;
  char *v6;
  char v7;
  _WORD *v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t *v19;
  size_t v20;
  uint64_t v21;
  void ***p_dst;
  uint64_t v23;
  char *v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  void **v29;
  int v30;
  const char *v31;
  size_t v32;
  size_t v33;
  char *v34;
  unint64_t v35;
  BOOL v36;
  const char *v37;
  size_t v38;
  int v39;
  unint64_t v40;
  char *v41;
  const char *v42;
  size_t v43;
  uint64_t v44;
  const char *v45;
  size_t v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  int v50;
  void **__dst;
  size_t v52;
  int64_t v53;
  void (**v54)(llvm::raw_ostream *__hidden);
  int v55;
  uint64_t v56;
  _BYTE *v57;
  _BYTE *v58;
  char v59;
  uint64_t v60;
  int v61;
  void **v62;
  void *__p[2];
  uint64_t v64;
  void *v65[2];
  char v66;
  char v67[2];
  char v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  __p[0] = 0;
  __p[1] = 0;
  v64 = 0;
  v55 = 0;
  v59 = 0;
  v60 = 0;
  v54 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v3 = __p;
  v62 = __p;
  v61 = 0;
  v57 = 0;
  v58 = 0;
  v56 = 0;
  v4 = *a1;
  if (!*a1)
    goto LABEL_99;
  v48 = a3;
  v6 = (char *)&v70;
  v7 = 1;
  do
  {
    if ((v7 & 1) == 0)
    {
      v8 = v58;
      if ((unint64_t)(v57 - v58) > 2)
      {
        v58[2] = 32;
        *v8 = 16416;
        v58 += 3;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v54, " @ ", 3uLL);
      }
    }
    v9 = *(unsigned __int8 **)(v4 - 8 * *(unsigned int *)(v4 + 8));
    v10 = *v9;
    v11 = v10 & 0xFE;
    v12 = v9;
    if (v11 == 18)
    {
      v12 = *(unsigned __int8 **)(v4 - 8 * *(unsigned int *)(v4 + 8));
      do
        v12 = *(unsigned __int8 **)&v12[-8 * *((unsigned int *)v12 + 2) + 8];
      while ((*v12 & 0xFE) == 0x12);
    }
    v13 = *((_DWORD *)v12 + 6);
    if (v10 == 19)
      v14 = *((unsigned int *)v9 + 6);
    else
      v14 = 0;
    if (byte_1ED830650)
    {
      v15 = v14;
    }
    else
    {
      v16 = (v14 >> 1) & 0x1F;
      if ((v14 & 0x40) != 0)
        v16 = (v14 >> 2) & 0xFE0 | (v14 >> 1) & 0x1F;
      if ((v14 & 1) != 0)
        v15 = 0;
      else
        v15 = v16;
    }
    v17 = *(_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8));
    if (v11 == 18)
    {
      v17 = *(_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8));
      do
        v17 = *(_QWORD *)(v17 - 8 * *(unsigned int *)(v17 + 8) + 8);
      while ((*(_BYTE *)v17 & 0xFE) == 0x12);
    }
    v18 = *(_QWORD *)(v17 - 8 * *(unsigned int *)(v17 + 8) + 24);
    v49 = v13;
    v50 = *(_DWORD *)(v4 + 4);
    if (v18)
    {
      v19 = *(size_t **)(v18 + 8);
      v20 = *v19;
      if (*v19)
        goto LABEL_29;
    }
    while (v11 == 18)
    {
      v9 = *(unsigned __int8 **)&v9[-8 * *((unsigned int *)v9 + 2) + 8];
      v11 = *v9 & 0xFE;
    }
    v21 = *(_QWORD *)&v9[-8 * *((unsigned int *)v9 + 2) + 16];
    if (v21)
    {
      v19 = *(size_t **)(v21 + 8);
      v20 = *v19;
LABEL_29:
      if (v20 >= 0x7FFFFFFFFFFFFFF8)
        abort();
      if (v20 >= 0x17)
      {
        v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17)
          v23 = v20 | 7;
        v24 = v6;
        v25 = a2;
        v26 = v23 + 1;
        p_dst = (void ***)operator new(v23 + 1);
        v27 = v26 | 0x8000000000000000;
        a2 = v25;
        v6 = v24;
        v52 = v20;
        v53 = v27;
        __dst = (void **)p_dst;
      }
      else
      {
        HIBYTE(v53) = v20;
        p_dst = &__dst;
        if (!v20)
          goto LABEL_37;
      }
      memmove(p_dst, v19 + 3, v20);
LABEL_37:
      *((_BYTE *)p_dst + v20) = 0;
      LOBYTE(v21) = HIBYTE(v53);
      v29 = __dst;
      v28 = v52;
      goto LABEL_39;
    }
    v28 = 0;
    v29 = 0;
    __dst = 0;
    v52 = 0;
    v53 = 0;
LABEL_39:
    v30 = (char)v21;
    if ((v21 & 0x80u) == 0)
      v31 = (const char *)&__dst;
    else
      v31 = (const char *)v29;
    v32 = v21 & 0x7F;
    if (v30 >= 0)
      v33 = v32;
    else
      v33 = v28;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v54, v31, v33);
    if (v57 == v58)
      llvm::raw_ostream::write((llvm::raw_ostream *)&v54, ":", 1uLL);
    else
      *v58++ = 58;
    if (v50 == v49)
    {
      v69 = 48;
      v34 = &v69;
    }
    else
    {
      v35 = (v50 - v49);
      v34 = v6;
      do
      {
        *--v34 = (v35 % 0xA) | 0x30;
        v36 = v35 > 9;
        v35 /= 0xAuLL;
      }
      while (v36);
    }
    sub_1C4E61270(v65, v34, v6, v6 - v34);
    if (v68 >= 0)
      v37 = (const char *)v65;
    else
      v37 = (const char *)v65[0];
    if (v68 >= 0)
      v38 = v68 & 0x7F;
    else
      v38 = (size_t)v65[1];
    llvm::raw_ostream::write((llvm::raw_ostream *)&v54, v37, v38);
    if (v68 < 0)
      operator delete(v65[0]);
    if (SHIBYTE(v53) < 0)
      operator delete(__dst);
    v39 = *a2;
    if ((*a2 & 0xFFFFFFFD) == 1)
    {
      if (v57 == v58)
        llvm::raw_ostream::write((llvm::raw_ostream *)&v54, ":", 1uLL);
      else
        *v58++ = 58;
      v40 = *(unsigned __int16 *)(v4 + 2);
      v41 = v67;
      if (*(_WORD *)(v4 + 2))
      {
        do
        {
          *--v41 = (v40 % 0xA) | 0x30;
          v36 = v40 > 9;
          v40 /= 0xAuLL;
        }
        while (v36);
      }
      else
      {
        v66 = 48;
        v41 = &v66;
      }
      sub_1C4E61270(&__dst, v41, v67, v67 - v41);
      if (v53 >= 0)
        v42 = (const char *)&__dst;
      else
        v42 = (const char *)__dst;
      if (v53 >= 0)
        v43 = HIBYTE(v53) & 0x7F;
      else
        v43 = v52;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v54, v42, v43);
      if (SHIBYTE(v53) < 0)
        operator delete(__dst);
      v39 = *a2;
    }
    if ((v39 & 0xFFFFFFFE) == 2 && v15)
    {
      if (v57 == v58)
        llvm::raw_ostream::write((llvm::raw_ostream *)&v54, ".", 1uLL);
      else
        *v58++ = 46;
      v44 = 0;
      do
      {
        v67[--v44] = (v15 % 0xA) | 0x30;
        v36 = v15 > 9;
        v15 /= 0xAuLL;
      }
      while (v36);
      sub_1C4E61270(&__dst, &v67[v44], v67, -v44);
      v45 = v53 >= 0 ? (const char *)&__dst : (const char *)__dst;
      v46 = v53 >= 0 ? HIBYTE(v53) & 0x7F : v52;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v54, v45, v46);
      if (SHIBYTE(v53) < 0)
        operator delete(__dst);
    }
    if (*(_DWORD *)(v4 + 8) != 2)
      break;
    v7 = 0;
    v4 = *(_QWORD *)(v4 - 8);
  }
  while (v4);
  v3 = v62;
  a3 = v48;
LABEL_99:
  if (*((char *)v3 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a3, *v3, (unint64_t)v3[1]);
  }
  else
  {
    v47 = *(_OWORD *)v3;
    *(_QWORD *)(a3 + 16) = v3[2];
    *(_OWORD *)a3 = v47;
  }
  v54 = off_1E81A6E70;
  if (v61 == 1 && v56)
    MEMORY[0x1CAA32F9C](v56, 0x1000C8077774924);
  if (SHIBYTE(v64) < 0)
    operator delete(__p[0]);
}

uint64_t llvm::addLocationToRemarks(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  std::string v26;
  void *v27;
  char v28;
  std::string v29;
  void *__p;
  char v31;
  std::string v32;
  void *v33;
  char v34;
  const char *v35;
  uint64_t v36;

  if (*a2)
  {
    v3 = result;
    v35 = " at callsite ";
    v36 = 13;
    v4 = result + 80;
    sub_1C53B17B4(result + 80, (const void **)&v35);
    v5 = *a2;
    if (*a2)
    {
      v6 = 1;
      do
      {
        if ((v6 & 1) == 0)
        {
          v35 = " @ ";
          v36 = 3;
          sub_1C53B17B4(v4, (const void **)&v35);
        }
        v7 = *(unsigned __int8 **)(v5 - 8 * *(unsigned int *)(v5 + 8));
        v8 = *v7;
        v9 = v8 & 0xFE;
        v10 = v7;
        if (v9 == 18)
        {
          v10 = *(unsigned __int8 **)(v5 - 8 * *(unsigned int *)(v5 + 8));
          do
            v10 = *(unsigned __int8 **)&v10[-8 * *((unsigned int *)v10 + 2) + 8];
          while ((*v10 & 0xFE) == 0x12);
        }
        v11 = *((_DWORD *)v10 + 6);
        if (v8 == 19)
          v12 = *((_DWORD *)v7 + 6);
        else
          v12 = 0;
        if (byte_1ED830650)
        {
          v14 = v12;
        }
        else
        {
          v13 = (v12 >> 1) & 0x1F;
          if ((v12 & 0x40) != 0)
            v13 = (v12 >> 2) & 0xFE0 | (v12 >> 1) & 0x1F;
          if ((v12 & 1) != 0)
            v14 = 0;
          else
            v14 = v13;
        }
        v15 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8));
        if (v9 == 18)
        {
          v15 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8));
          do
            v15 = *(_QWORD *)(v15 - 8 * *(unsigned int *)(v15 + 8) + 8);
          while ((*(_BYTE *)v15 & 0xFE) == 0x12);
        }
        v16 = *(_QWORD *)(v15 - 8 * *(unsigned int *)(v15 + 8) + 24);
        if (!v16 || (v17 = *(_QWORD **)(v16 + 8), v20 = *v17, v18 = (const char *)(v17 + 3), (v19 = v20) == 0))
        {
          while (v9 == 18)
          {
            v7 = *(unsigned __int8 **)&v7[-8 * *((unsigned int *)v7 + 2) + 8];
            v9 = *v7 & 0xFE;
          }
          v21 = *(_QWORD *)&v7[-8 * *((unsigned int *)v7 + 2) + 16];
          if (v21)
          {
            v22 = *(_QWORD **)(v21 + 8);
            v23 = *v22;
            v18 = (const char *)(v22 + 3);
            v19 = v23;
          }
          else
          {
            v18 = 0;
            v19 = 0;
          }
        }
        v24 = *(_DWORD *)(v5 + 4) - v11;
        v35 = v18;
        v36 = v19;
        sub_1C53B17B4(v4, (const void **)&v35);
        v35 = ":";
        v36 = 1;
        sub_1C53B17B4(v4, (const void **)&v35);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v32, "Line", 4uLL, v24);
        v25 = sub_1C47E3888(v3, (uint64_t)&v32);
        v35 = ":";
        v36 = 1;
        sub_1C53B17B4(v25 + 80, (const void **)&v35);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v29, "Column", 6uLL, *(unsigned __int16 *)(v5 + 2));
        sub_1C47E3888(v25, (uint64_t)&v29);
        if (v31 < 0)
          operator delete(__p);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
        if (v34 < 0)
          operator delete(v33);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (v14)
        {
          v35 = ".";
          v36 = 1;
          sub_1C53B17B4(v4, (const void **)&v35);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v26, "Disc", 4uLL, v14);
          sub_1C47E3888(v3, (uint64_t)&v26);
          if (v28 < 0)
            operator delete(v27);
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v26.__r_.__value_.__l.__data_);
        }
        if (*(_DWORD *)(v5 + 8) != 2)
          break;
        v6 = 0;
        v5 = *(_QWORD *)(v5 - 8);
      }
      while (v5);
    }
    v35 = ";";
    v36 = 1;
    return sub_1C53B17B4(v4, (const void **)&v35);
  }
  return result;
}

void llvm::emitInlinedInto(llvm::OptimizationRemarkEmitter *a1, _QWORD *a2, uint64_t a3, _BYTE *a4, _BYTE *a5, int a6, void (*a7)(uint64_t, uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden this)), uint64_t a8, const char *a9)
{
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  unint64_t v29;
  void **v30;
  void *v31[2];
  char v32;
  void *__p;
  char v34;
  void *v35[2];
  char v36;
  void *v37;
  char v38;
  const void *v39[2];
  uint64_t (**v40)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  char v50;
  char v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[260];
  int v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v17 = ****(_QWORD ****)a1;
  if (*(_QWORD *)(v17 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v17 + 72) + 48))(*(_QWORD *)(v17 + 72)))
  {
    v18 = a9;
    if (!a9)
      v18 = "inline";
    v19 = 7;
    if (a6)
      v19 = 12;
    v20 = "Inlined";
    if (a6)
      v20 = "AlwaysInline";
    v21 = (_QWORD *)*a2;
    if (*a2)
    {
      v22 = v21[-*((unsigned int *)v21 + 2)];
      if (*(_BYTE *)v22 != 15)
        v22 = *(_QWORD *)(v22 - 8 * *(unsigned int *)(v22 + 8));
      v23 = *((_DWORD *)v21 + 1);
      LODWORD(v21) = *((unsigned __int16 *)v21 + 1);
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    v24 = *(_QWORD *)(a3 + 56);
    v41 = 9;
    v42 = 2;
    v43 = v24;
    v44 = v22;
    v45 = v23;
    v46 = (int)v21;
    v47 = v18;
    v48 = v20;
    v49 = v19;
    v50 = 0;
    v51 = 0;
    v52 = v54;
    v53 = 0x400000000;
    v54[256] = 0;
    v55 = -1;
    v56 = a3;
    v40 = &off_1E814E500;
    v35[0] = "'";
    v35[1] = (void *)1;
    sub_1C53B17B4((uint64_t)&v52, (const void **)v35);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v35, "Callee", 6uLL, a4);
    v25 = sub_1C47E3888((uint64_t)&v40, (uint64_t)v35);
    v31[0] = "' inlined into '";
    v31[1] = (void *)16;
    sub_1C53B17B4(v25 + 80, (const void **)v31);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v31, "Caller", 6uLL, a5);
    v26 = sub_1C47E3888(v25, (uint64_t)v31);
    v39[0] = "'";
    v39[1] = (const void *)1;
    sub_1C53B17B4(v26 + 80, v39);
    if (v34 < 0)
      operator delete(__p);
    if (v32 < 0)
      operator delete(v31[0]);
    if (v38 < 0)
      operator delete(v37);
    if (v36 < 0)
      operator delete(v35[0]);
    if (a7)
      a7(a8, &v40);
    v27 = (_QWORD *)*a2;
    v39[0] = v27;
    if (v27)
      llvm::MetadataTracking::track((uint64_t)v39, (unsigned __int8 *)v27, 2);
    llvm::addLocationToRemarks((uint64_t)&v40, (uint64_t *)v39);
    if (v39[0])
      llvm::MetadataTracking::untrack((uint64_t)v39, (unsigned __int8 *)v39[0]);
    llvm::OptimizationRemarkEmitter::emit(a1, (llvm::DiagnosticInfoOptimizationBase *)&v40);
    v40 = &off_1E814E790;
    v28 = (char *)v52;
    if ((_DWORD)v53)
    {
      v29 = (unint64_t)v53 << 6;
      do
      {
        v30 = (void **)&v28[v29];
        if (v28[v29 - 17] < 0)
          operator delete(*(v30 - 5));
        if (*((char *)v30 - 41) < 0)
          operator delete(*(v30 - 8));
        v29 -= 64;
      }
      while (v29);
      v28 = (char *)v52;
    }
    if (v28 != v54)
      free(v28);
  }
}

_QWORD *llvm::InlineAdvisor::getMandatoryAdvice@<X0>(llvm::InlineAdvisor *this@<X0>, llvm::CallBase *a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(*((_QWORD *)this + 2), &llvm::OptimizationRemarkEmitterAnalysis::Key, *(_QWORD *)(*((_QWORD *)a2 + 5) + 56))+ 8;
  v9 = operator new();
  result = (_QWORD *)llvm::InlineAdvice::InlineAdvice(v9, (uint64_t)this, a2, v8, a3);
  *result = &off_1E8138418;
  *a4 = result;
  return result;
}

uint64_t llvm::InlineAdvisor::getCallerORE(llvm::InlineAdvisor *this, llvm::CallBase *a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*((_QWORD *)this + 2), &llvm::OptimizationRemarkEmitterAnalysis::Key, *(_QWORD *)(*((_QWORD *)a2 + 5) + 56))+ 8;
}

uint64_t llvm::InlineAdvisor::getMandatoryKind(uint64_t a1, uint64_t a2)
{
  llvm::Function *v3;
  uint64_t ResultImpl;
  char v5;
  unsigned int v6;
  uint64_t v8;

  v3 = *(llvm::Function **)(a1 - 32);
  v8 = a2;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, (uint64_t)v3);
  if (llvm::getAttributeBasedInliningDecision(a1, v3, (llvm::BasicBlock *)(ResultImpl + 8), (uint64_t (*)(uint64_t, llvm *))sub_1C4E61EBC, (uint64_t)&v8))
  {
    v6 = 2;
  }
  else
  {
    v6 = 1;
  }
  if (v5)
    return v6;
  else
    return 0;
}

_QWORD *llvm::InlineAdvisor::getAdvice@<X0>(llvm::InlineAdvisor *this@<X0>, llvm::CallBase *a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;

  if ((a3 & 1) == 0)
    return (*(_QWORD *(**)(_QWORD *__return_ptr, llvm::InlineAdvisor *, llvm::CallBase *))(*(_QWORD *)this + 40))(a4, this, a2);
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 56);
  v8 = *((_QWORD *)a2 - 4);
  if (!v8 || *(_BYTE *)(v8 + 16) || *(_QWORD *)(v8 + 24) != *((_QWORD *)a2 + 9))
    v8 = 0;
  if (v7 == v8)
  {
    v10 = 0;
  }
  else
  {
    v9 = *((_QWORD *)this + 2);
    llvm::AnalysisManager<llvm::Function>::getResultImpl(v9, &llvm::OptimizationRemarkEmitterAnalysis::Key, v7);
    v10 = llvm::InlineAdvisor::getMandatoryKind((uint64_t)a2, v9) == 1;
  }
  return (_QWORD *)(*(uint64_t (**)(llvm::InlineAdvisor *, llvm::CallBase *, _BOOL8))(*(_QWORD *)this + 48))(this, a2, v10);
}

void sub_1C4E60F40(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E8138390;
  if (*(_BYTE *)(a1 + 128))
  {
    if (*(_BYTE *)(a1 + 120))
    {
      v2 = a1;
      sub_1C61996A0(a1 + 88);
      a1 = v2;
      *(_BYTE *)(v2 + 120) = 0;
    }
    *(_BYTE *)(a1 + 128) = 0;
  }
  *(_QWORD *)a1 = &unk_1E8138308;
  v1 = *(unsigned __int8 **)(a1 + 32);
  if (v1)
    llvm::MetadataTracking::untrack(a1 + 32, v1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4E60FE0(uint64_t *a1, uint64_t a2)
{
  uint64_t CachedResultImpl;
  uint64_t v3;

  CachedResultImpl = llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(*a1, (uint64_t)&llvm::ProfileSummaryAnalysis::Key, a2);
  if (!CachedResultImpl)
    return 0;
  v3 = CachedResultImpl + 8;
  sub_1C4E61040();
  return v3;
}

void sub_1C4E61040()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  _QWORD v3[18];

  v3[17] = *MEMORY[0x1E0C80C00];
  v2 = 0;
  v1 = 0u;
  v0 = 1;
  v3[0] = 1;
  do
  {
    v3[v0] = -4096;
    v0 += 2;
  }
  while (v0 != 17);
  if ((v3[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v3[1], 8);
}

llvm::APInt *sub_1C4E61128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t ResultImpl;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD *)(a2 - 32);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)a1, &llvm::TargetIRAnalysis::Key, v6);
  v8 = *(_QWORD *)(***(_QWORD ***)v6 + 72);
  if ((*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v8 + 32))(v8, "inline", 6))
    v9 = *(_QWORD *)(a1 + 48);
  else
    v9 = 0;
  return llvm::getInlineCost(a2, *(int **)(a1 + 8), (llvm::BasicBlock *)(ResultImpl + 8), (uint64_t)sub_1C4E611F8, *(_QWORD *)(a1 + 16), (uint64_t (*)(uint64_t, llvm *))sub_1C4E61220, *(_QWORD *)(a1 + 24), a3, (uint64_t)sub_1C4E61248, *(_QWORD *)(a1 + 32), **(_QWORD **)(a1 + 40), v9);
}

uint64_t sub_1C4E611F8(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::AssumptionAnalysis::Key, a2) + 8;
}

uint64_t sub_1C4E61220(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::TargetLibraryAnalysis::Key, a2) + 8;
}

uint64_t sub_1C4E61248(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::BlockFrequencyAnalysis::Key, a2) + 8;
}

_QWORD *sub_1C4E61270(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

uint64_t sub_1C4E61310(uint64_t result)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)result = &off_1E8138390;
  if (*(_BYTE *)(result + 128))
  {
    if (*(_BYTE *)(result + 120))
    {
      v3 = result;
      sub_1C61996A0(result + 88);
      result = v3;
      *(_BYTE *)(v3 + 120) = 0;
    }
    *(_BYTE *)(result + 128) = 0;
  }
  *(_QWORD *)result = &unk_1E8138308;
  v1 = *(unsigned __int8 **)(result + 32);
  if (v1)
  {
    v2 = result;
    llvm::MetadataTracking::untrack(result + 32, v1);
    return v2;
  }
  return result;
}

__n128 sub_1C4E61394(uint64_t a1, char *__s, __n128 *a3, _DWORD **a4, _WORD *a5)
{
  size_t v10;
  __n128 result;
  _DWORD *v12;

  v10 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v10);
  result = *a3;
  *(__n128 *)(a1 + 32) = *a3;
  v12 = *a4;
  *(_DWORD *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v12;
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  return result;
}

llvm::APInt *sub_1C4E61424(uint64_t a1, uint64_t a2)
{
  llvm::APInt *result;

  if (*(_BYTE *)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      sub_1C61996A0(a1 + 16);
      *(_BYTE *)(a1 + 48) = 0;
    }
    *(_BYTE *)(a1 + 56) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = 0;
  result = (llvm::APInt *)(a1 + 16);
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    result = sub_1C6199A28(result, (llvm::APInt *)(a2 + 16));
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_BYTE *)(a1 + 56) = 1;
  return result;
}

uint64_t sub_1C4E614A0(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10;
  uint64_t v11;

  v10 = llvm::InlineAdvice::InlineAdvice(a1, a2, a3, a5, *(_BYTE *)(a4 + 56));
  *(_QWORD *)v10 = &off_1E8138390;
  *(_QWORD *)(v10 + 64) = a3;
  *(_BYTE *)(v10 + 72) = 0;
  v11 = v10 + 72;
  *(_BYTE *)(a1 + 128) = 0;
  if (*(_BYTE *)(a4 + 56))
    sub_1C4E61424(v11, a4);
  *(_BYTE *)(a1 + 136) = a6;
  return a1;
}

uint64_t sub_1C4E61510(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  void *v11[2];
  char v12;
  void *v13;
  char v14;
  void *v15[2];
  char v16;
  void *__p;
  char v18;
  void *v19[2];
  char v20;
  void *v21;
  char v22;
  const char *v23;
  uint64_t v24;

  if (*(_DWORD *)a2 == 0x7FFFFFFF)
  {
    v4 = "(cost=never)";
    v5 = 12;
    goto LABEL_5;
  }
  if (*(_DWORD *)a2 == 0x80000000)
  {
    v4 = "(cost=always)";
    v5 = 13;
LABEL_5:
    v23 = v4;
    v24 = v5;
    sub_1C53B17B4(a1 + 80, (const void **)&v23);
    goto LABEL_14;
  }
  v23 = "(cost=";
  v24 = 6;
  sub_1C53B17B4(a1 + 80, (const void **)&v23);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v19, "Cost", 4uLL, *(_DWORD *)a2);
  v6 = sub_1C47E3888(a1, (uint64_t)v19);
  v23 = ", threshold=";
  v24 = 12;
  sub_1C53B17B4(v6 + 80, (const void **)&v23);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v15, "Threshold", 9uLL, *(_DWORD *)(a2 + 4));
  v7 = sub_1C47E3888(v6, (uint64_t)v15);
  v23 = ")";
  v24 = 1;
  sub_1C53B17B4(v7 + 80, (const void **)&v23);
  if (v18 < 0)
    operator delete(__p);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19[0]);
LABEL_14:
  v8 = *(char **)(a2 + 8);
  if (v8)
  {
    v23 = ": ";
    v24 = 2;
    sub_1C53B17B4(a1 + 80, (const void **)&v23);
    v9 = strlen(v8);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v11, "Reason", 6uLL, v8, v9);
    sub_1C47E3888(a1, (uint64_t)v11);
    if (v14 < 0)
      operator delete(v13);
    if (v12 < 0)
      operator delete(v11[0]);
  }
  return a1;
}

void sub_1C4E616E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  void *v14;
  char v15;
  void *v16[2];
  char v17;
  void *__p;
  char v19;
  char *v20;
  uint64_t v21;
  char v22;
  void *v23;
  char v24;

  if (**(_BYTE **)a1)
  {
    v20 = " to match profiling context";
    v21 = 27;
    sub_1C53B17B4(a2 + 80, (const void **)&v20);
  }
  v20 = " with ";
  v21 = 6;
  sub_1C53B17B4(a2 + 80, (const void **)&v20);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)v4 == 0x7FFFFFFF)
  {
    v5 = "(cost=never)";
    v6 = 12;
    goto LABEL_7;
  }
  if (*(_DWORD *)v4 == 0x80000000)
  {
    v5 = "(cost=always)";
    v6 = 13;
LABEL_7:
    v20 = (char *)v5;
    v21 = v6;
    sub_1C53B17B4(a2 + 80, (const void **)&v20);
    goto LABEL_16;
  }
  v20 = "(cost=";
  v21 = 6;
  sub_1C53B17B4(a2 + 80, (const void **)&v20);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v20, "Cost", 4uLL, *(_DWORD *)v4);
  v7 = sub_1C47E3888(a2, (uint64_t)&v20);
  v16[0] = ", threshold=";
  v16[1] = (void *)12;
  sub_1C53B17B4(v7 + 80, (const void **)v16);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v16, "Threshold", 9uLL, *(_DWORD *)(v4 + 4));
  v8 = sub_1C47E3888(v7, (uint64_t)v16);
  v11 = ")";
  v12 = 1;
  sub_1C53B17B4(v8 + 80, (const void **)&v11);
  if (v19 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(v16[0]);
  if (v24 < 0)
    operator delete(v23);
  if (v22 < 0)
    operator delete(v20);
LABEL_16:
  v9 = *(char **)(v4 + 8);
  if (v9)
  {
    v11 = ": ";
    v12 = 2;
    sub_1C53B17B4(a2 + 80, (const void **)&v11);
    v10 = strlen(v9);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v11, "Reason", 6uLL, v9, v10);
    sub_1C47E3888(a2, (uint64_t)&v11);
    if (v15 < 0)
      operator delete(v14);
    if (v13 < 0)
      operator delete(v11);
  }
}

uint64_t sub_1C4E61900(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          sub_1C4E6197C((void ***)(v5 + 8));
          MEMORY[0x1CAA32FB4](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void ***sub_1C4E6197C(void ***a1)
{
  void **v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2 != v2 + 2)
      free(*v2);
    MEMORY[0x1CAA32FC0](v2, 0x1080C40232BEC51);
  }
  return a1;
}

_QWORD *sub_1C4E619D4(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  *a1 = &unk_1E8138308;
  v4 = (unsigned __int8 *)a1[4];
  v2 = (uint64_t)(a1 + 4);
  v3 = v4;
  if (v4)
    llvm::MetadataTracking::untrack(v2, v3);
  return a1;
}

void sub_1C4E61A10(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  *a1 = &unk_1E8138308;
  v3 = (unsigned __int8 *)a1[4];
  v1 = (uint64_t)(a1 + 4);
  v2 = v3;
  if (v3)
    llvm::MetadataTracking::untrack(v1, v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4E61A5C(uint64_t a1)
{
  llvm::OptimizationRemarkEmitter *v2;
  unsigned __int8 *v3;
  _BOOL4 v4;
  char v5;
  unsigned __int8 *v6;

  if (*(_BYTE *)(a1 + 56))
  {
    v2 = *(llvm::OptimizationRemarkEmitter **)(a1 + 48);
    v3 = *(unsigned __int8 **)(a1 + 32);
    v6 = v3;
    if (v3)
    {
      llvm::MetadataTracking::track((uint64_t)&v6, v3, 2);
      v4 = *(_BYTE *)(a1 + 56) != 0;
    }
    else
    {
      v4 = 1;
    }
    llvm::emitInlinedInto(v2, &v6, *(_QWORD *)(a1 + 40), *(_BYTE **)(a1 + 24), *(_BYTE **)(a1 + 16), v4, (void (*)(uint64_t, uint64_t (***)(llvm::DiagnosticInfoWithLocationBase *__hidden)))sub_1C4E61E88, (uint64_t)&v5, 0);
    if (v6)
      llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
  }
}

uint64_t sub_1C4E61AEC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void sub_1C4E61AF8(uint64_t a1, char **a2)
{
  llvm::OptimizationRemarkEmitter *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  void **v18;
  char *v19;
  unint64_t v20;
  void **v21;
  void *__dst[2];
  char v23;
  void *__p;
  char v25;
  void *v26[2];
  char v27;
  void *v28;
  char v29;
  void *v30[2];
  char v31;
  void *v32;
  char v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t (**v39)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  char v49;
  char v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[260];
  int v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 56))
  {
    v4 = *(llvm::OptimizationRemarkEmitter **)(a1 + 48);
    v5 = ****(_QWORD ****)v4;
    if (*(_QWORD *)(v5 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 72) + 48))(*(_QWORD *)(v5 + 72)))
    {
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8));
        if (*(_BYTE *)v7 != 15)
          v7 = *(_QWORD *)(v7 - 8 * *(unsigned int *)(v7 + 8));
        v8 = *(_DWORD *)(v6 + 4);
        LODWORD(v6) = *(unsigned __int16 *)(v6 + 2);
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(v9 + 56);
      v40 = 10;
      v41 = 2;
      v42 = v10;
      v43 = v7;
      v44 = v8;
      v45 = v6;
      v46 = "inline";
      v47 = "NotInlined";
      v48 = 10;
      v49 = 0;
      v50 = 0;
      v51 = v53;
      v52 = 0x400000000;
      v53[256] = 0;
      v54 = -1;
      v55 = v9;
      v39 = &off_1E814E538;
      v34 = "'";
      v35 = 1;
      sub_1C53B17B4((uint64_t)&v51, (const void **)&v34);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v30, "Callee", 6uLL, *(_BYTE **)(a1 + 24));
      v11 = sub_1C47E3888((uint64_t)&v39, (uint64_t)v30);
      v34 = "' is not AlwaysInline into '";
      v35 = 28;
      sub_1C53B17B4(v11 + 80, (const void **)&v34);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v26, "Caller", 6uLL, *(_BYTE **)(a1 + 16));
      v12 = sub_1C47E3888(v11, (uint64_t)v26);
      v34 = "': ";
      v35 = 3;
      sub_1C53B17B4(v12 + 80, (const void **)&v34);
      v13 = *a2;
      if (v13)
        v14 = strlen(v13);
      else
        v14 = 0;
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Reason", 6uLL, v13, v14);
      v15 = sub_1C47E3888(v12, (uint64_t)__dst);
      sub_1C61998EC((uint64_t)&v34, v15);
      v34 = (const char *)&off_1E814E538;
      if (v25 < 0)
        operator delete(__p);
      if (v23 < 0)
        operator delete(__dst[0]);
      if (v29 < 0)
        operator delete(v28);
      if (v27 < 0)
        operator delete(v26[0]);
      if (v33 < 0)
        operator delete(v32);
      if (v31 < 0)
        operator delete(v30[0]);
      v39 = &off_1E814E790;
      v16 = (char *)v51;
      if ((_DWORD)v52)
      {
        v17 = (unint64_t)v52 << 6;
        do
        {
          v18 = (void **)&v16[v17];
          if (v16[v17 - 17] < 0)
            operator delete(*(v18 - 5));
          if (*((char *)v18 - 41) < 0)
            operator delete(*(v18 - 8));
          v17 -= 64;
        }
        while (v17);
        v16 = (char *)v51;
      }
      if (v16 != v53)
        free(v16);
      llvm::OptimizationRemarkEmitter::emit(v4, (llvm::DiagnosticInfoOptimizationBase *)&v34);
      v34 = (const char *)&off_1E814E790;
      v19 = (char *)v36;
      if (v37)
      {
        v20 = (unint64_t)v37 << 6;
        do
        {
          v21 = (void **)&v19[v20];
          if (v19[v20 - 17] < 0)
            operator delete(*(v21 - 5));
          if (*((char *)v21 - 41) < 0)
            operator delete(*(v21 - 8));
          v20 -= 64;
        }
        while (v20);
        v19 = (char *)v36;
      }
      if (v19 != (char *)&v38)
        free(v19);
    }
  }
}

uint64_t sub_1C4E61E88(uint64_t a1, uint64_t a2)
{
  const void *v3[2];

  v3[0] = ": always inline attribute";
  v3[1] = (const void *)25;
  return sub_1C53B17B4(a2 + 80, v3);
}

uint64_t sub_1C4E61EBC(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::TargetLibraryAnalysis::Key, a2) + 8;
}

uint64_t sub_1C4E61EE4()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  LOBYTE(v1) = 0;
  v2 = 1;
  v3 = &v1;
  v4.n128_u64[0] = (unint64_t)"Enable adding inline-remark attribute to callsites processed by inliner but decided"
                                     " to be not inlined";
  v4.n128_u64[1] = 101;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82DE80, "inline-remark-attribute", (_BYTE **)&v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82DE80, &dword_1C475E000);
  LOBYTE(v1) = 0;
  v2 = 1;
  v3 = &v1;
  v4.n128_u64[0] = (unint64_t)"Enable deferred inlining";
  v4.n128_u64[1] = 24;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F2070, "inline-deferral", (_BYTE **)&v3, &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F2070, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Scale to limit the cost of inline deferral";
  v4.n128_u64[1] = 42;
  v1 = 1;
  v2 = 2;
  v3 = &v2;
  sub_1C619A5AC((llvm::cl::Option *)&unk_1ED7F2130, "inline-deferral-scale", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &unk_1ED7F2130, &dword_1C475E000);
}

_QWORD *llvm::InlineSizeEstimatorAnalysis::InlineSizeEstimatorAnalysis(_QWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

_QWORD *llvm::InlineSizeEstimatorAnalysis::InlineSizeEstimatorAnalysis(_QWORD *result)
{
  *result = 0;
  return result;
}

{
  *result = 0;
  return result;
}

void llvm::InlineSizeEstimatorAnalysis::~InlineSizeEstimatorAnalysis(llvm::InlineSizeEstimatorAnalysis *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0xC400A2AC0F1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    MEMORY[0x1CAA32FC0](v1, 0xC400A2AC0F1);
}

uint64_t llvm::InlineSizeEstimatorAnalysis::isEvaluatorRequested(llvm::InlineSizeEstimatorAnalysis *this)
{
  return 0;
}

void llvm::initializeInstCountLegacyPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82DF40);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E620D4;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82DF40, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E620D4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Counts the various types of Instructions";
  *(_QWORD *)(v2 + 8) = 40;
  *(_QWORD *)(v2 + 16) = "instcount";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBF0;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4E62230;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4E62168(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBF0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8138458;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82DF40);
  if (v3 != -1)
  {
    v7[0] = sub_1C4E620D4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82DF40, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C4E62230()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4E62168(v0);
}

void sub_1C4E6225C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4E62284(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C4E62290()
{
  return 0;
}

uint64_t llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(int32x2_t *this, const llvm::BasicBlock *a2)
{
  int32x2_t v2;
  int32x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  const llvm::BasicBlock **v6;
  const llvm::BasicBlock *v7;
  int v8;
  int v9;
  const llvm::BasicBlock *v11;

  v11 = a2;
  v3 = this + 1;
  v2 = this[1];
  v4 = this[3].u32[0];
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (const llvm::BasicBlock **)(*(_QWORD *)&v2 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_8;
    v8 = 1;
    while (v7 != (const llvm::BasicBlock *)-4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(const llvm::BasicBlock **)(*(_QWORD *)&v2 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (const llvm::BasicBlock **)(*(_QWORD *)&v2 + 16 * v5);
        goto LABEL_8;
      }
    }
  }
  v6 = (const llvm::BasicBlock **)(*(_QWORD *)&v2 + 16 * v4);
LABEL_8:
  if (v6 == (const llvm::BasicBlock **)(*(_QWORD *)&v2 + 16 * v4))
    llvm::InstructionPrecedenceTracking::fill(this, a2);
  return sub_1C4E628F0((uint64_t)v3, (uint64_t *)&v11)[1];
}

_QWORD *llvm::InstructionPrecedenceTracking::fill(int32x2_t *this, const llvm::BasicBlock *a2)
{
  int32x2_t v3;
  int32x2_t *v4;
  __int32 v5;
  __int32 v6;
  uint64_t v7;
  const llvm::BasicBlock **v8;
  const llvm::BasicBlock *v9;
  int v10;
  int v11;
  char *v12;
  uint64_t i;
  uint64_t v14;
  _QWORD *result;
  const llvm::BasicBlock *v16;

  v16 = a2;
  v4 = this + 1;
  v3 = this[1];
  v5 = this[3].i32[0];
  if (v5)
  {
    v6 = v5 - 1;
    LODWORD(v7) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v8 = (const llvm::BasicBlock **)(*(_QWORD *)&v3 + 16 * v7);
    v9 = *v8;
    if (*v8 == a2)
    {
LABEL_7:
      *v8 = (const llvm::BasicBlock *)-8192;
      this[2] = vadd_s32(this[2], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v10 = 1;
      while (v9 != (const llvm::BasicBlock *)-4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & v6;
        v9 = *(const llvm::BasicBlock **)(*(_QWORD *)&v3 + 16 * v7);
        if (v9 == a2)
        {
          v8 = (const llvm::BasicBlock **)(*(_QWORD *)&v3 + 16 * v7);
          goto LABEL_7;
        }
      }
    }
  }
  v12 = (char *)a2 + 40;
  for (i = *((_QWORD *)a2 + 6); (char *)i != v12; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v14 = i - 24;
    else
      v14 = 0;
    if ((**(unint64_t (***)(int32x2_t *, uint64_t))this)(this, v14))
      goto LABEL_16;
  }
  v14 = 0;
LABEL_16:
  result = sub_1C4E628F0((uint64_t)v4, (uint64_t *)&v16);
  result[1] = v14;
  return result;
}

BOOL llvm::InstructionPrecedenceTracking::hasSpecialInstructions(int32x2_t *this, const llvm::BasicBlock *a2)
{
  return llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(this, a2) != 0;
}

uint64_t llvm::InstructionPrecedenceTracking::isPreceededBySpecialInstruction(int32x2_t *this, const llvm::BasicBlock **a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  result = llvm::InstructionPrecedenceTracking::getFirstSpecialInstruction(this, a2[5]);
  if (result)
  {
    v4 = *(_QWORD *)(result + 40);
    v5 = *(__int16 *)(v4 + 18);
    if ((v5 & 0x80000000) == 0)
    {
      v6 = *(_QWORD *)(v4 + 48);
      if (v6 != v4 + 40)
      {
        v7 = 0;
        do
        {
          v8 = v6 - 24;
          if (!v6)
            v8 = 0;
          *(_DWORD *)(v8 + 56) = v7++;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6 != v4 + 40);
      }
      *(_WORD *)(v4 + 18) = v5 | 0x8000;
    }
    return *(_DWORD *)(result + 56) < *((_DWORD *)a2 + 14);
  }
  return result;
}

int32x2_t llvm::InstructionPrecedenceTracking::insertInstructionTo(llvm::InstructionPrecedenceTracking *this, const llvm::Instruction *a2, const llvm::BasicBlock *a3)
{
  int32x2_t result;
  const llvm::BasicBlock *v5;
  _QWORD *v6;

  v5 = a3;
  if ((**(unsigned int (***)(llvm::InstructionPrecedenceTracking *, const llvm::Instruction *))this)(this, a2))
  {
    v6 = 0;
    if (sub_1C4E62854((uint64_t *)this + 1, &v5, &v6))
    {
      *v6 = -8192;
      result = vadd_s32(*(int32x2_t *)((char *)this + 16), (int32x2_t)0x1FFFFFFFFLL);
      *((int32x2_t *)this + 2) = result;
    }
  }
  return result;
}

int32x2_t llvm::InstructionPrecedenceTracking::removeInstruction(int32x2_t *this, const llvm::Instruction *a2)
{
  uint64_t v2;
  int32x2_t v3;
  uint64_t *v4;
  __int32 v5;
  __int32 v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int32x2_t result;
  uint64_t v13;
  _QWORD *v14;

  v2 = *((_QWORD *)a2 + 5);
  v13 = v2;
  v4 = (uint64_t *)&this[1];
  v3 = this[1];
  v5 = this[3].i32[0];
  if (v5)
  {
    v7 = v5 - 1;
    v8 = ((v2 >> 4) ^ (v2 >> 9)) & v7;
    v9 = *(_QWORD *)(*(_QWORD *)&v3 + 16 * v8);
    if (v2 == v9)
    {
LABEL_6:
      if ((const llvm::Instruction *)sub_1C4E628F0((uint64_t)&this[1], &v13)[1] == a2)
      {
        v14 = 0;
        if (sub_1C4E62854(v4, &v13, &v14))
        {
          *v14 = -8192;
          result = vadd_s32(this[2], (int32x2_t)0x1FFFFFFFFLL);
          this[2] = result;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v8 + v10++;
        v8 = v11 & v7;
        v9 = *(_QWORD *)(*(_QWORD *)&v3 + 16 * v8);
        if (v2 == v9)
          goto LABEL_6;
      }
    }
  }
  return result;
}

void llvm::InstructionPrecedenceTracking::removeUsersOf(int32x2_t *this, const llvm::Instruction *a2)
{
  uint64_t i;
  unsigned __int8 *v4;
  BOOL v5;

  for (i = *((_QWORD *)a2 + 1); i; i = *(_QWORD *)(i + 8))
  {
    v4 = *(unsigned __int8 **)(i + 24);
    if (v4)
      v5 = v4[16] >= 0x1Cu;
    else
      v5 = 0;
    if (v5)
      llvm::InstructionPrecedenceTracking::removeInstruction(this, (const llvm::Instruction *)v4);
  }
}

unsigned int *llvm::InstructionPrecedenceTracking::clear(llvm::InstructionPrecedenceTracking *this)
{
  return sub_1C4A5A548((unsigned int *)this + 2);
}

uint64_t llvm::ImplicitControlFlowTracking::isSpecialInstruction(llvm::ImplicitControlFlowTracking *this, const llvm::Instruction *a2)
{
  int v2;
  int v3;
  llvm::Function *Function;
  llvm::Value *PersonalityFn;
  const llvm::Value *v8;

  v2 = 0;
  v3 = *((unsigned __int8 *)a2 + 16);
  if (v3 != 29 && v3 != 35)
  {
    if (v3 == 80)
    {
      Function = (llvm::Function *)llvm::Instruction::getFunction(a2);
      PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(Function);
      v2 = llvm::classifyEHPersonality(PersonalityFn, v8) == 10;
    }
    else if ((llvm::Instruction::mayThrow(a2) & 1) != 0)
    {
      v2 = 0;
    }
    else
    {
      v2 = llvm::Instruction::willReturn(a2);
    }
  }
  return v2 ^ 1u;
}

uint64_t llvm::MemoryWriteTracking::isSpecialInstruction(llvm::MemoryWriteTracking *this, const llvm::Instruction *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;

  v3 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v3 == 84)
  {
    v4 = *((_QWORD *)a2 - 4);
    if (v4 && !*(_BYTE *)(v4 + 16) && *(_QWORD *)(v4 + 24) == *((_QWORD *)a2 + 9) && *(_DWORD *)(v4 + 36) == 138)
      return 0;
  }
  else
  {
    result = 0;
    v8 = (v3 - 33);
    if (v8 > 0x37)
      return result;
    if (((1 << v8) & 0x808001D0000010) != 0)
      return 1;
    if (v8 == 27)
      return (*((_WORD *)a2 + 9) & 0x301) != 0;
    if (((1 << v8) & 0x8000000000041) == 0)
      return result;
  }
  v5 = *((_QWORD *)a2 + 8);
  if (v5 && (*(_BYTE *)(v5 + 17) & 0x30) != 0)
    return 0;
  v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 0x80000000) == 0
    || (v9 = (char *)a2 - 32 * (v6 & 0x7FFFFFF), v12 = *((_QWORD *)v9 - 1), v10 = v9 - 8, (v11 = v12) == 0))
  {
LABEL_10:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 45) & 1) == 0)
      return llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44) ^ 1;
    return 0;
  }
  v13 = -v11;
  while (1)
  {
    v14 = *(_DWORD *)(*(_QWORD *)&v10[v13] + 8);
    v15 = v14 > 7;
    v16 = (1 << v14) & 0x83;
    if (v15 || v16 == 0)
      return 1;
    v13 += 16;
    if (!v13)
      goto LABEL_10;
  }
}

uint64_t sub_1C4E62854(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_16;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4E628F0(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_15:
    v6 = sub_1C4E629A8(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_15;
  }
  return v6;
}

_QWORD *sub_1C4E629A8(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C4964094(a1, v7);
      v17 = 0;
      sub_1C4E62854((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C4964094(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

llvm::ValueHandleBase *llvm::SimplifyAddInst(llvm *a1, llvm::Constant *a2, char a3, int a4, uint64_t a5)
{
  return sub_1C4E62AE0(a1, a2, a3, a4, a5, (llvm::DSOLocalEquivalent **)3);
}

llvm::ValueHandleBase *sub_1C4E62AE0(llvm *a1, llvm::Constant *a2, char a3, int a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  int v6;
  llvm *v10;
  llvm::ValueHandleBase *result;
  llvm *v13;
  unsigned int v14;
  llvm::Type *v15;
  const llvm::DataLayout *v16;
  llvm::DSOLocalEquivalent **v17;
  int v18;
  llvm *v19;
  uint64_t *v20;
  int v21;
  llvm *v22;
  int v23;
  uint64_t *v24;
  llvm::Constant *v25;
  void *v26;
  llvm::Type *v27;
  uint64_t v28;
  llvm **v29;
  uint64_t v30;
  void *v31;
  void **v32;
  int v33;
  llvm *v34;
  uint64_t v35;
  llvm **v36;
  uint64_t v37;
  llvm *v38;
  llvm **v39;
  int v40;
  unint64_t ***v41;
  int v42;
  llvm *v43;
  uint64_t v44;
  llvm::ValueHandleBase **v45;
  uint64_t v46;
  llvm::ValueHandleBase *v47;

  v6 = (int)a6;
  v10 = a2;
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
    {
      result = llvm::ConstantFoldBinaryOpOperands((llvm *)0xD, a1, a2, *(llvm::Constant **)a5, (const llvm::DataLayout *)a5, a6);
      v13 = a1;
      if (result)
        return result;
    }
    else
    {
      v13 = a2;
      v10 = a1;
    }
  }
  else
  {
    v13 = a1;
  }
  v14 = *((unsigned __int8 *)v10 + 16);
  if (v14 == 12)
    return v10;
  if (*(_BYTE *)(a5 + 41))
  {
    if ((sub_1C4E7B480((uint64_t)v10) & 1) != 0)
      return v10;
    v14 = *((unsigned __int8 *)v10 + 16);
  }
  if (v14 <= 0x14 && ((llvm::Constant::isNullValue(v10) & 1) != 0 || (sub_1C4E71060((uint64_t)&v45, v10) & 1) != 0))
    return v13;
  if (llvm::isKnownNegation(v13, v10, 0))
    return (llvm::ValueHandleBase *)llvm::Constant::getNullValue(*(llvm::Constant **)v13, v15);
  v47 = 0;
  v18 = *((unsigned __int8 *)v10 + 16);
  if (v18 == 5)
  {
    if (*((_WORD *)v10 + 9) != 15)
      goto LABEL_29;
    v20 = (uint64_t *)((char *)v10 - 32 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF));
    result = (llvm::ValueHandleBase *)*v20;
    if (!*v20)
      goto LABEL_29;
    v47 = (llvm::ValueHandleBase *)*v20;
    v19 = (llvm *)v20[4];
  }
  else
  {
    if (v18 != 43)
      goto LABEL_29;
    result = (llvm::ValueHandleBase *)*((_QWORD *)v10 - 8);
    if (!result)
      goto LABEL_29;
    v47 = (llvm::ValueHandleBase *)*((_QWORD *)v10 - 8);
    v19 = (llvm *)*((_QWORD *)v10 - 4);
  }
  if (v13 == v19)
    return result;
LABEL_29:
  v21 = *((unsigned __int8 *)v13 + 16);
  if (v21 == 5)
  {
    v23 = *((unsigned __int16 *)v13 + 9);
    if (v23 == 15)
    {
      v24 = (uint64_t *)((char *)v13 - 32 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF));
      result = (llvm::ValueHandleBase *)*v24;
      if (*v24)
      {
        v47 = (llvm::ValueHandleBase *)*v24;
        v22 = (llvm *)v24[4];
LABEL_36:
        if (v10 == v22)
          return result;
      }
LABEL_37:
      v25 = *(llvm::Constant **)v13;
      v45 = (llvm::ValueHandleBase **)v10;
      goto LABEL_52;
    }
    v25 = *(llvm::Constant **)v13;
    v45 = (llvm::ValueHandleBase **)v10;
    if (v23 == 30)
    {
      v28 = *((_DWORD *)v13 + 5) & 0x7FFFFFF;
      v29 = (llvm **)((char *)v13 - 32 * v28);
      if (v10 == *v29)
      {
        if ((sub_1C4D9EED4((uint64_t)&v46, v29[4]) & 1) != 0)
          return llvm::Constant::getAllOnesValue(v25, v27);
        v31 = v45;
        v30 = -(uint64_t)(*((_DWORD *)v13 + 5) & 0x7FFFFFF);
      }
      else
      {
        v30 = -v28;
        v31 = v10;
      }
      v32 = (void **)((char *)v13 + 32 * v30);
      if (v31 == v32[4] && (sub_1C4D9EED4((uint64_t)&v46, (llvm::Constant *)*v32) & 1) != 0)
        return llvm::Constant::getAllOnesValue(v25, v27);
    }
  }
  else
  {
    if (v21 == 43)
    {
      result = (llvm::ValueHandleBase *)*((_QWORD *)v13 - 8);
      if (result)
      {
        v47 = (llvm::ValueHandleBase *)*((_QWORD *)v13 - 8);
        v22 = (llvm *)*((_QWORD *)v13 - 4);
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    v25 = *(llvm::Constant **)v13;
    v45 = (llvm::ValueHandleBase **)v10;
    if (v21 == 58)
    {
      v26 = v10;
      if (v10 == *((llvm **)v13 - 8))
      {
        if ((sub_1C4D9ED34((uint64_t)&v46, *((llvm::Constant **)v13 - 4)) & 1) != 0)
          return llvm::Constant::getAllOnesValue(v25, v27);
        v26 = v45;
      }
      if (v26 == *((void **)v13 - 4) && (sub_1C4D9ED34((uint64_t)&v46, *((llvm::Constant **)v13 - 8)) & 1) != 0)
        return llvm::Constant::getAllOnesValue(v25, v27);
    }
  }
LABEL_52:
  v43 = v13;
  v33 = *((unsigned __int8 *)v10 + 16);
  if (v33 == 5)
  {
    if (*((_WORD *)v10 + 9) == 30)
    {
      v35 = *((_DWORD *)v10 + 5) & 0x7FFFFFF;
      v36 = (llvm **)((char *)v10 - 32 * v35);
      if (v13 == *v36)
      {
        if ((sub_1C4D9EED4((uint64_t)&v44, v36[4]) & 1) != 0)
          return llvm::Constant::getAllOnesValue(v25, v27);
        v38 = v43;
        v37 = -(uint64_t)(*((_DWORD *)v10 + 5) & 0x7FFFFFF);
      }
      else
      {
        v37 = -v35;
        v38 = v13;
      }
      v39 = (llvm **)((char *)v10 + 32 * v37);
      if (v38 != v39[4] || (sub_1C4D9EED4((uint64_t)&v44, *v39) & 1) == 0)
        goto LABEL_68;
      return llvm::Constant::getAllOnesValue(v25, v27);
    }
  }
  else if (v33 == 58)
  {
    v34 = v13;
    if (v13 == *((llvm **)v10 - 8))
    {
      if ((sub_1C4D9ED34((uint64_t)&v44, *((llvm::Constant **)v10 - 4)) & 1) != 0)
        return llvm::Constant::getAllOnesValue(v25, v27);
      v34 = v43;
    }
    if (v34 != *((llvm **)v10 - 4) || (sub_1C4D9ED34((uint64_t)&v44, *((llvm::Constant **)v10 - 8)) & 1) == 0)
      goto LABEL_68;
    return llvm::Constant::getAllOnesValue(v25, v27);
  }
LABEL_68:
  if ((a3 & 1) == 0 && !a4 || !sub_1C4E7119C((uint64_t)&v43, (unsigned __int8 *)v10))
    goto LABEL_80;
  v45 = &v47;
  v40 = *((unsigned __int8 *)v13 + 16);
  if (v40 == 5)
  {
    if (*((_WORD *)v13 + 9) != 30)
      goto LABEL_80;
    v41 = (unint64_t ***)((char *)v13 - 32 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF));
    if (!*v41)
      goto LABEL_80;
    v47 = (llvm::ValueHandleBase *)*v41;
    if ((sub_1C4E71378((uint64_t)&v46, v41[4]) & 1) == 0)
      goto LABEL_80;
    return v47;
  }
  if (v40 == 58)
  {
    if (*((_QWORD *)v13 - 8))
    {
      v47 = (llvm::ValueHandleBase *)*((_QWORD *)v13 - 8);
      if (sub_1C4E7119C((uint64_t)&v46, *((unsigned __int8 **)v13 - 4)))
        return v47;
    }
  }
LABEL_80:
  if (a4 && (sub_1C4D9ED34((uint64_t)&v45, v10) & 1) != 0)
    return v10;
  if (!v6)
    return (llvm::ValueHandleBase *)sub_1C4E70E2C(0xDu, (uint64_t)v13, (uint64_t)v10, a5, v6);
  v42 = *(_DWORD *)(*(_QWORD *)v13 + 8);
  if ((v42 & 0xFE) == 0x12)
    v42 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v13 + 16) + 8);
  if (v42 != 269)
    return (llvm::ValueHandleBase *)sub_1C4E70E2C(0xDu, (uint64_t)v13, (uint64_t)v10, a5, v6);
  result = sub_1C4E661DC(v13, v10, a5, v6 - 1, v16, v17);
  if (!result)
    return (llvm::ValueHandleBase *)sub_1C4E70E2C(0xDu, (uint64_t)v13, (uint64_t)v10, a5, v6);
  return result;
}

llvm::Value **llvm::SimplifySubInst(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  return sub_1C4E62F88(a1, a2, a3, a4, a5, (llvm::DSOLocalEquivalent **)3);
}

llvm::Value **sub_1C4E62F88(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  int v6;
  unsigned int v12;
  llvm::Value **result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Type *v17;
  BOOL v18;
  int v19;
  llvm *v20;
  llvm **v21;
  llvm::Constant *v22;
  llvm::Constant *v23;
  int v24;
  llvm *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm *v30;
  llvm *v31;
  llvm **v32;
  llvm *v33;
  const llvm::DataLayout *v34;
  llvm::DSOLocalEquivalent **v35;
  llvm::DataLayout *v36;
  const llvm::APInt *v37;
  llvm *v38;
  llvm::ConstantExpr *Splat;
  llvm::ConstantInt *v40;
  unsigned int v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  const llvm::DataLayout *v45;
  unint64_t v46;
  uint64_t v47;
  llvm **v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _BOOL4 v53;
  unint64_t v54;
  llvm::Constant *v55;
  uint64_t v56;
  int v57;
  llvm::Value **v58;
  llvm::Value **v59;
  unsigned int v60;
  llvm *v61;
  llvm *v62;
  llvm **v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  void *v67;
  unsigned int v68;
  llvm *v69;
  llvm *v70;
  void *__src;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;

  v6 = (int)a6;
  v12 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v12 <= 0x14 && a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
  {
    result = (llvm::Value **)llvm::ConstantFoldBinaryOpOperands((llvm *)0xF, (llvm *)a1, (llvm::Constant *)a2, *(llvm::Constant **)a5, (const llvm::DataLayout *)a5, a6);
    if (result)
      return result;
    v12 = *(unsigned __int8 *)(a1 + 16);
  }
  if (v12 == 12 || *(_BYTE *)(a2 + 16) == 12)
    return (llvm::Value **)llvm::PoisonValue::get(*(llvm::PoisonValue **)a1, (llvm::Type *)a2);
  if (*(_BYTE *)(a5 + 41) && ((sub_1C4E7B480(a1) & 1) != 0 || *(_BYTE *)(a5 + 41) && sub_1C4E7B480(a2)))
    return (llvm::Value **)llvm::UndefValue::get(*(llvm::UndefValue **)a1, (llvm::Type *)a2);
  if (*(unsigned __int8 *)(a2 + 16) <= 0x14u
    && ((llvm::Constant::isNullValue((llvm::Constant *)a2) & 1) != 0
     || (sub_1C4E71060((uint64_t)&__src, (llvm::Constant *)a2) & 1) != 0))
  {
    return (llvm::Value **)a1;
  }
  if (a1 == a2)
    return llvm::Constant::getNullValue(*(llvm::Constant **)a1, (llvm::Type *)a2);
  if (!a1
    || *(unsigned __int8 *)(a1 + 16) > 0x14u
    || (llvm::Constant::isNullValue((llvm::Constant *)a1) & 1) == 0
    && (sub_1C4E71060((uint64_t)&__src, (llvm::Constant *)a1) & 1) == 0)
  {
LABEL_38:
    v61 = 0;
    if (!v6)
    {
      v62 = (llvm *)a1;
LABEL_78:
      __src = &v62;
      if (!sub_1C4E714F4((_QWORD **)&__src, a1))
        goto LABEL_134;
      v63 = &v61;
      if (!sub_1C4E714F4(&v63, a2))
        goto LABEL_134;
      v36 = *(llvm::DataLayout **)a5;
      v69 = v61;
      v70 = v62;
      sub_1C4E71560((llvm::APInt *)&__src, v36, (uint64_t **)&v70, 0);
      sub_1C4E71560((llvm::APInt *)&v63, v36, (uint64_t **)&v69, 0);
      v38 = v70;
      if (v70 == v69)
      {
        v40 = **(llvm::ConstantInt ***)v70;
        v41 = v72;
        if (v72 >= 0x41)
        {
          v46 = v72 + 63;
          v43 = (void *)operator new[]();
          memcpy(v43, __src, (v46 >> 3) & 0x3FFFFFF8);
          v47 = 0;
          v48 = v63;
          v49 = (unint64_t *)v43;
          v50 = v46 >> 6;
          do
          {
            v51 = (unint64_t)*v48++;
            v52 = *v49 - v51;
            v53 = *v49 < v51;
            v54 = *v49 + ~v51;
            if (v47)
            {
              v47 = v54 >= *v49;
            }
            else
            {
              v54 = v52;
              v47 = v53;
            }
            *v49++ = v54;
            --v50;
          }
          while (v50);
          *((_QWORD *)v43 + (v46 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v41;
        }
        else
        {
          if ((_DWORD)v72)
            v42 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v72;
          else
            v42 = 0;
          v43 = (void *)(v42 & ((_BYTE *)__src - (_BYTE *)v63));
        }
        v68 = v41;
        v67 = v43;
        Splat = llvm::ConstantInt::get(v40, (llvm::LLVMContext *)&v67, v37);
        if (v68 >= 0x41 && v67)
          MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
        v56 = *(_QWORD *)v38;
        if (*(_QWORD *)v38 && (*(_DWORD *)(v56 + 8) & 0xFE) == 0x12)
          Splat = (llvm::ConstantExpr *)llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v56 + 32) | ((unint64_t)(*(_DWORD *)(v56 + 8) == 19) << 32)), (uint64_t)Splat, v55);
      }
      else
      {
        Splat = 0;
      }
      if (v64 >= 0x41 && v63)
        MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
      if (v72 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      if (Splat)
        return (llvm::Value **)llvm::ConstantExpr::getIntegerCast(Splat, *(llvm::Type ****)a1, (llvm::Type *)1);
LABEL_134:
      if (!v6)
        return 0;
      v57 = *(_DWORD *)(*(_QWORD *)a1 + 8);
      if ((v57 & 0xFE) == 0x12)
        v57 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 16) + 8);
      if (v57 != 269)
        return 0;
      result = (llvm::Value **)sub_1C4E661DC((llvm *)a1, (llvm::Constant *)a2, a5, v6 - 1, v34, v35);
      if (!result)
        return 0;
      return result;
    }
    v19 = *(unsigned __int8 *)(a1 + 16);
    if (v19 == 5)
    {
      if (*(_WORD *)(a1 + 18) != 13)
        goto LABEL_52;
      v21 = (llvm **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
      if (!*v21)
        goto LABEL_52;
      v62 = *v21;
      v20 = v21[4];
      if (!v20)
        goto LABEL_52;
    }
    else
    {
      if (v19 != 41)
        goto LABEL_52;
      if (!*(_QWORD *)(a1 - 64))
        goto LABEL_52;
      v62 = *(llvm **)(a1 - 64);
      v20 = *(llvm **)(a1 - 32);
      if (!v20)
        goto LABEL_52;
    }
    v61 = v20;
    v22 = (llvm::Constant *)sub_1C4E62F88(v20, a2, 0, 0, a5, (v6 - 1));
    if (v22)
    {
      result = (llvm::Value **)sub_1C4E62AE0(v62, v22, 0, 0, a5, (llvm::DSOLocalEquivalent **)(v6 - 1));
      if (result)
        return result;
    }
    v23 = (llvm::Constant *)sub_1C4E62F88(v62, a2, 0, 0, a5, (v6 - 1));
    if (v23)
    {
      result = (llvm::Value **)sub_1C4E62AE0(v61, v23, 0, 0, a5, (llvm::DSOLocalEquivalent **)(v6 - 1));
      if (result)
        return result;
    }
LABEL_52:
    v62 = (llvm *)a1;
    v24 = *(unsigned __int8 *)(a2 + 16);
    if (v24 == 5)
    {
      if (*(_WORD *)(a2 + 18) != 13)
        goto LABEL_64;
      v27 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      v25 = *(llvm **)v27;
      if (!*(_QWORD *)v27)
        goto LABEL_64;
      v61 = *(llvm **)v27;
      v26 = *(_QWORD *)(v27 + 32);
      if (!v26)
        goto LABEL_64;
    }
    else
    {
      if (v24 != 41)
        goto LABEL_65;
      v25 = *(llvm **)(a2 - 64);
      if (!v25 || (v61 = *(llvm **)(a2 - 64), (v26 = *(_QWORD *)(a2 - 32)) == 0))
      {
LABEL_64:
        v24 = *(unsigned __int8 *)(a2 + 16);
LABEL_65:
        if (v24 == 5)
        {
          if (*(_WORD *)(a2 + 18) != 15
            || (v32 = (llvm **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), (v30 = *v32) == 0)
            || (v62 = *v32, (v31 = v32[4]) == 0))
          {
LABEL_75:
            __src = &v62;
            if (sub_1C4B03864((_QWORD **)&__src, a1))
            {
              v63 = &v61;
              if (sub_1C4B03864(&v63, a2))
              {
                if (*(_QWORD *)v62 == *(_QWORD *)v61)
                {
                  v44 = sub_1C4E62F88(v62, v61, 0, 0, a5, (v6 - 1));
                  if (v44)
                  {
                    result = sub_1C4E6C1BC((llvm *)0x26, v44, *(llvm::Constant **)a1, (llvm::Type **)a5, v45);
                    if (result)
                      return result;
                  }
                }
              }
            }
            goto LABEL_78;
          }
        }
        else
        {
          if (v24 != 43)
            goto LABEL_75;
          v30 = *(llvm **)(a2 - 64);
          if (!v30)
            goto LABEL_75;
          v62 = *(llvm **)(a2 - 64);
          v31 = *(llvm **)(a2 - 32);
          if (!v31)
            goto LABEL_75;
        }
        v61 = v31;
        v33 = (llvm *)sub_1C4E62F88(a1, v30, 0, 0, a5, (v6 - 1));
        if (v33)
        {
          result = (llvm::Value **)sub_1C4E62AE0(v33, v61, 0, 0, a5, (llvm::DSOLocalEquivalent **)(v6 - 1));
          if (result)
            return result;
        }
        goto LABEL_75;
      }
    }
    v28 = sub_1C4E62F88(a1, v25, 0, 0, a5, (v6 - 1));
    if (v28)
    {
      result = (llvm::Value **)sub_1C4E62F88(v28, v26, 0, 0, a5, (v6 - 1));
      if (result)
        return result;
    }
    v29 = sub_1C4E62F88(v62, v26, 0, 0, a5, (v6 - 1));
    if (v29)
    {
      result = (llvm::Value **)sub_1C4E62F88(v29, v61, 0, 0, a5, (v6 - 1));
      if (result)
        return result;
    }
    goto LABEL_64;
  }
  if (a4)
    return llvm::Constant::getNullValue(*(llvm::Constant **)a1, (llvm::Type *)a2);
  v14 = *(_QWORD *)(a5 + 24);
  v15 = *(_QWORD *)(a5 + 32);
  v16 = *(_QWORD *)(a5 + 16);
  if (!v15 || !*(_QWORD *)(v15 + 40))
  {
    if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu || (v15 = a2, !*(_QWORD *)(a2 + 40)))
      v15 = 0;
  }
  __src = *(void **)a5;
  v72 = v14;
  v73 = v15;
  v74 = v16;
  v75 = 0;
  v76 = 1;
  sub_1C4F83784(a2, 0, (uint64_t *)&__src, &v63);
  if (v64 > 0x40)
  {
    if ((((unint64_t)v63[(v64 - 1) >> 6] >> (v64 - 1)) & 1) != 0)
    {
      v18 = 0;
      result = 0;
      goto LABEL_35;
    }
    v60 = v64 - 1;
    v18 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v63) == v60;
    if (v18)
      result = (llvm::Value **)a2;
    else
      result = 0;
    if (v18 && a3)
      goto LABEL_34;
  }
  else
  {
    v18 = v63 == (llvm **)~(-1 << (v64 - 1));
    if (v63 == (llvm **)~(-1 << (v64 - 1)))
      result = (llvm::Value **)a2;
    else
      result = 0;
    if (v63 == (llvm **)~(-1 << (v64 - 1)) && (a3 & 1) != 0)
    {
LABEL_34:
      result = llvm::Constant::getNullValue(*(llvm::Constant **)a1, v17);
      v18 = 1;
    }
  }
LABEL_35:
  if (v66 >= 0x41 && v65)
  {
    v58 = result;
    MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
    result = v58;
  }
  if (v64 >= 0x41 && v63)
  {
    v59 = result;
    MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
    result = v59;
  }
  if (!v18)
    goto LABEL_38;
  return result;
}

llvm::Value **llvm::SimplifyMulInst(llvm *a1, llvm::Constant *a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E637C8(a1, a2, a3, 3, a5, a6);
}

llvm::Value **sub_1C4E637C8(llvm *a1, llvm::Constant *a2, uint64_t a3, int a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  llvm *v8;
  llvm::Value **result;
  llvm *v11;
  unsigned int v12;
  llvm::Type *v13;
  const llvm::DataLayout *v14;
  llvm::DSOLocalEquivalent **v15;
  int v16;
  int v17;
  _QWORD v18[2];
  _QWORD v19[2];
  uint64_t v20;

  v8 = a2;
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
    {
      result = (llvm::Value **)llvm::ConstantFoldBinaryOpOperands((llvm *)0x11, a1, a2, *(llvm::Constant **)a3, a5, a6);
      v11 = a1;
      if (result)
        return result;
    }
    else
    {
      v11 = a2;
      v8 = a1;
    }
  }
  else
  {
    v11 = a1;
  }
  v12 = *((unsigned __int8 *)v8 + 16);
  if (v12 == 12)
    return (llvm::Value **)v8;
  if (*(_BYTE *)(a3 + 41))
  {
    if ((sub_1C4E7B480((uint64_t)v8) & 1) != 0)
      return llvm::Constant::getNullValue(*(llvm::Constant **)v11, v13);
    v12 = *((unsigned __int8 *)v8 + 16);
  }
  if (v12 <= 0x14 && ((llvm::Constant::isNullValue(v8) & 1) != 0 || (sub_1C4E71060((uint64_t)v19, v8) & 1) != 0))
    return llvm::Constant::getNullValue(*(llvm::Constant **)v11, v13);
  if ((sub_1C4D89CC8((uint64_t)v19, v8) & 1) != 0)
    return (llvm::Value **)v11;
  v20 = 0;
  if (*(_BYTE *)(a3 + 40))
  {
    v19[0] = &v20;
    v19[1] = v8;
    if (sub_1C4E71A38((uint64_t)v19, (uint64_t)v11))
      return (llvm::Value **)v20;
    v18[0] = &v20;
    v18[1] = v11;
    if (sub_1C4E71A38((uint64_t)v18, (uint64_t)v8))
      return (llvm::Value **)v20;
  }
  if (!a4)
    goto LABEL_42;
  v16 = *(_DWORD *)(*(_QWORD *)v11 + 8);
  if ((v16 & 0xFE) == 0x12)
    v16 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v11 + 16) + 8);
  if (v16 != 269 || (result = sub_1C4E640C8(v11, v8, a3, a4 - 1, v14, v15)) == 0)
  {
LABEL_42:
    result = (llvm::Value **)sub_1C4E70E2C(0x11u, (uint64_t)v11, (uint64_t)v8, a3, a4);
    if (!result)
    {
      result = (llvm::Value **)sub_1C4E7166C(17, (uint64_t)v11, (uint64_t)v8, 0xDu, a3, a4);
      if (!result)
      {
        v17 = *((unsigned __int8 *)v11 + 16);
        if (v17 == 85 || *((_BYTE *)v8 + 16) == 85)
        {
          result = (llvm::Value **)sub_1C4E716EC(17, (uint64_t)v11, (uint64_t)v8, a3, a4);
          if (result)
            return result;
          v17 = *((unsigned __int8 *)v11 + 16);
        }
        if (v17 != 83 && *((_BYTE *)v8 + 16) != 83)
          return 0;
        result = (llvm::Value **)sub_1C4E71910(17, v11, v8, a3, a4);
        if (!result)
          return 0;
      }
    }
  }
  return result;
}

llvm::Value **llvm::SimplifySDivInst(llvm::Constant **a1, llvm::Constant *a2, llvm::Constant **a3)
{
  return sub_1C4E63A00(a1, a2, a3, (const llvm::DataLayout *)3);
}

llvm::Value **sub_1C4E63A00(llvm::Constant **a1, llvm::Constant *a2, llvm::Constant **a3, const llvm::DataLayout *a4)
{
  llvm::Type *v8;
  llvm::DSOLocalEquivalent **v9;

  if (llvm::isKnownNegation((llvm *)a1, a2, (const llvm::Value *)1))
    return (llvm::Value **)llvm::Constant::getAllOnesValue(*a1, v8);
  else
    return sub_1C4E71D14((llvm *)0x14, (unsigned __int8 *)a1, a2, a3, a4, v9);
}

llvm::Value **llvm::SimplifyUDivInst(unsigned __int8 *a1, llvm::Constant *a2, llvm::Constant **a3, uint64_t a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E71D14((llvm *)0x13, a1, a2, a3, (const llvm::DataLayout *)3, a6);
}

llvm::Value **llvm::SimplifySRemInst(llvm::Constant **a1, llvm::Constant *a2, uint64_t a3)
{
  return sub_1C4E63A84(a1, a2, a3, (const llvm::DataLayout *)3);
}

llvm::Value **sub_1C4E63A84(llvm::Constant **a1, llvm::Constant *a2, uint64_t a3, const llvm::DataLayout *a4)
{
  llvm::Type *v8;
  int v9;
  llvm::DSOLocalEquivalent **v10;
  uint64_t *v12;
  uint64_t v13;

  v12 = &v13;
  v13 = 0;
  if (sub_1C4B037F8(&v12, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & 0xFE) == 0x12)
      v9 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v13 + 16) + 8);
    if (v9 == 269)
      return llvm::Constant::getNullValue(*a1, v8);
  }
  if (llvm::isKnownNegation((llvm *)a1, a2, 0))
    return llvm::Constant::getNullValue(*a1, v8);
  else
    return sub_1C4E72984((llvm *)0x17, (unsigned __int8 *)a1, a2, a3, a4, v10);
}

llvm::Value **llvm::SimplifyURemInst(unsigned __int8 *a1, llvm::Constant *a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E72984((llvm *)0x16, a1, a2, a3, (const llvm::DataLayout *)3, a6);
}

llvm::Value **llvm::SimplifyShlInst(llvm::Constant *a1, llvm::Constant *a2, int a3, int a4, uint64_t a5)
{
  return sub_1C4E63B54(a1, a2, a3, a4, a5, (llvm::DSOLocalEquivalent **)3);
}

llvm::Value **sub_1C4E63B54(llvm::Constant *a1, llvm::Constant *a2, int a3, int a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  char v8;
  llvm::Constant **v10;
  llvm::Value **result;
  llvm::Type *v12;
  _QWORD v13[2];
  uint64_t v14;

  v8 = a3;
  v10 = (llvm::Constant **)a1;
  result = sub_1C4E72C84((llvm *)0x19, a1, a2, a3, a5, a6);
  if (!result)
  {
    if (*(_BYTE *)(a5 + 41) && sub_1C4E7B480((uint64_t)v10))
    {
      if ((v8 & 1) == 0 && (a4 & 1) == 0)
        return llvm::Constant::getNullValue(*v10, v12);
    }
    else
    {
      v14 = 0;
      if (*(_BYTE *)(a5 + 40) && (v13[0] = &v14, v13[1] = a2, sub_1C4E733C8((uint64_t)v13, (uint64_t)v10)))
      {
        return (llvm::Value **)v14;
      }
      else if (!a4 || (sub_1C4E734E4((uint64_t)v13, (llvm::Constant *)v10) & 1) == 0)
      {
        return 0;
      }
    }
    return v10;
  }
  return result;
}

llvm::Value **llvm::SimplifyLShrInst(uint64_t a1, llvm::Constant *a2, int a3, uint64_t a4)
{
  return sub_1C4E63C38(a1, a2, a3, a4, (llvm::DSOLocalEquivalent **)3);
}

llvm::Value **sub_1C4E63C38(uint64_t a1, llvm::Constant *a2, int a3, uint64_t a4, llvm::DSOLocalEquivalent **a5)
{
  llvm::Value **result;
  uint64_t v9;
  const void ***v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  int v14;
  llvm::APInt *v15;
  unsigned int v16;
  char v17;
  llvm::Value **v18;
  llvm::Value **v19;
  llvm::APInt **v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  const void **v24;
  llvm::APInt *v25;
  uint64_t v26;
  llvm::Value **v27;
  llvm::Value ***v28;
  const void ***v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;

  result = sub_1C4E73640((llvm *)0x1A, a1, a2, a3, a4, a5);
  if (result)
    return result;
  v27 = 0;
  v28 = &v27;
  v29 = (const void ***)a2;
  if (sub_1C4E737A4((uint64_t)&v28, a1))
    return v27;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v20 = &v25;
  v21 = 0;
  if (!sub_1C4D89F84((uint64_t)&v20, (unsigned __int8 *)a2))
    return 0;
  v28 = &v27;
  v29 = &v24;
  v30 = 0;
  v31 = &v26;
  if (!sub_1C4E73878(&v28, 29, a1))
    return 0;
  v9 = *((unsigned int *)v25 + 2);
  if (v9 > 0x40)
  {
    if (memcmp(*(const void **)v25, *v24, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8))
      return 0;
  }
  else if (*(const void **)v25 != *v24)
  {
    return 0;
  }
  v10 = *(const void ****)(a4 + 24);
  v11 = *(_QWORD *)(a4 + 32);
  v12 = *(uint64_t **)(a4 + 16);
  if (!v11 || !*(_QWORD *)(v11 + 40))
  {
    if (!v26 || *(unsigned __int8 *)(v26 + 16) < 0x1Cu || (v11 = v26, !*(_QWORD *)(v26 + 40)))
      v11 = 0;
  }
  v28 = *(llvm::Value ****)a4;
  v29 = v10;
  v30 = v11;
  v31 = v12;
  v32 = 0;
  v33 = 1;
  sub_1C4F83784(v26, 0, (uint64_t *)&v28, &v20);
  v13 = v21;
  if (v21 > 0x40)
  {
    v14 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v20);
  }
  else if ((_DWORD)v21)
  {
    v14 = __clz(~((_QWORD)v20 << -(char)v21));
  }
  else
  {
    v14 = 0;
  }
  v15 = v25;
  v16 = *((_DWORD *)v25 + 2);
  if (v16 >= 0x41)
  {
    if (v16 - llvm::APInt::countLeadingZerosSlowCase(v25) > 0x40)
      goto LABEL_20;
    v15 = *(llvm::APInt **)v15;
  }
  if (*(_QWORD *)v15 < (unint64_t)(v13 - v14))
  {
    v17 = 0;
    result = 0;
    goto LABEL_22;
  }
LABEL_20:
  v17 = 1;
  result = v27;
LABEL_22:
  if (v23 >= 0x41 && v22)
  {
    v18 = result;
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
    result = v18;
    v13 = v21;
  }
  if (v13 >= 0x41)
  {
    if (v20)
    {
      v19 = result;
      MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
      result = v19;
    }
  }
  if ((v17 & 1) == 0)
    return 0;
  return result;
}

llvm::ValueHandleBase *llvm::SimplifyAShrInst(uint64_t a1, llvm::Constant *a2, int a3, uint64_t a4)
{
  return sub_1C4E63EA4(a1, a2, a3, a4, (llvm::DSOLocalEquivalent **)3);
}

llvm::ValueHandleBase *sub_1C4E63EA4(uint64_t a1, llvm::Constant *a2, int a3, uint64_t a4, llvm::DSOLocalEquivalent **a5)
{
  llvm::ValueHandleBase *result;
  llvm::Type *v9;
  int v10;
  llvm::Constant *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  llvm::ValueHandleBase **v19;
  llvm::Constant *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  llvm::Constant *v24;
  char v25;
  uint64_t v26;
  llvm::Constant *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  result = (llvm::ValueHandleBase *)sub_1C4E73640((llvm *)0x1B, a1, a2, a3, a4, a5);
  if (result)
    return result;
  if ((sub_1C4D9ED34((uint64_t)&v25, (llvm::Constant *)a1) & 1) != 0)
    return llvm::Constant::getAllOnesValue(*(llvm::Constant **)a1, v9);
  v27 = a2;
  v10 = *(unsigned __int8 *)(a1 + 16);
  if (v10 == 5)
  {
    if (*(_WORD *)(a1 + 18) != 25
      || !sub_1C4D9EED4((uint64_t)&v26, *(llvm::Constant **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF))))
    {
      goto LABEL_12;
    }
    v11 = *(llvm::Constant **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
  }
  else
  {
    if (v10 != 53 || !sub_1C4D9ED34((uint64_t)&v26, *(llvm::Constant **)(a1 - 64)))
      goto LABEL_12;
    v11 = *(llvm::Constant **)(a1 - 32);
  }
  if (v27 == v11)
    return llvm::Constant::getAllOnesValue(*(llvm::Constant **)a1, v9);
LABEL_12:
  if (*(_BYTE *)(a4 + 40))
  {
    v12 = *(unsigned __int8 *)(a1 + 16);
    if (v12 < 0x1C)
    {
      if (v12 == 5)
      {
        v15 = *(unsigned __int16 *)(a1 + 18);
        HIDWORD(v17) = v15 - 13;
        LODWORD(v17) = v15 - 13;
        v16 = v17 >> 1;
        if (v16 <= 6 && ((1 << v16) & 0x47) != 0)
          goto LABEL_20;
      }
    }
    else
    {
      HIDWORD(v14) = v12 - 41;
      LODWORD(v14) = v12 - 41;
      v13 = v14 >> 1;
      if (v13 <= 6 && ((1 << v13) & 0x47) != 0)
      {
        v15 = v12 - 28;
LABEL_20:
        if (v15 == 25 && (*(_BYTE *)(a1 + 17) & 4) != 0)
        {
          v18 = *(_DWORD *)(a1 + 20);
          v19 = (v18 & 0x40000000) != 0
              ? *(llvm::ValueHandleBase ***)(a1 - 8)
              : (llvm::ValueHandleBase **)(a1 - 32 * (v18 & 0x7FFFFFF));
          result = *v19;
          if (*v19)
          {
            if (v19[4] == a2)
              return result;
          }
        }
      }
    }
  }
  v20 = *(llvm::Constant **)(a4 + 24);
  v21 = *(_QWORD *)(a4 + 32);
  v22 = *(_QWORD *)(a4 + 16);
  if (!v21 || !*(_QWORD *)(v21 + 40))
  {
    if (*(unsigned __int8 *)(a1 + 16) < 0x1Cu || (v21 = a1, !*(_QWORD *)(a1 + 40)))
      v21 = 0;
  }
  v26 = *(_QWORD *)a4;
  v27 = v20;
  v28 = v21;
  v29 = v22;
  v30 = 0;
  v31 = 1;
  v23 = sub_1C4F85990((llvm::Constant *)a1, 0, (uint64_t)&v26);
  v24 = *(llvm::Constant **)a1;
  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12)
    v24 = (llvm::Constant *)**((_QWORD **)v24 + 2);
  if (v23 == llvm::Type::getPrimitiveSizeInBits(v24))
    return (llvm::ValueHandleBase *)a1;
  else
    return 0;
}

llvm::Value **llvm::SimplifyAndInst(llvm *a1, llvm::Constant *a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E640C8(a1, a2, a3, 3, a5, a6);
}

llvm::Value **sub_1C4E640C8(llvm *a1, llvm::Constant *a2, uint64_t a3, int a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  llvm *v8;
  llvm::Value **result;
  llvm *v11;
  llvm::Type *v12;
  llvm::Type *v13;
  llvm::Constant *v14;
  int v15;
  llvm::Constant *v16;
  uint64_t v17;
  llvm **v18;
  uint64_t v19;
  llvm::Constant *v20;
  llvm::Constant **v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  llvm **v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  llvm **v30;
  llvm **v31;
  int v32;
  llvm **v33;
  llvm **v34;
  int v35;
  llvm::Value **v36;
  llvm::Value **v37;
  llvm::Value ***v38;
  int v39;
  llvm::Value **v40;
  llvm::Value ***v41;
  llvm::Use **v42;
  int v43;
  llvm::Constant **v44;
  const void **v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t ***v50;
  unsigned int v51;
  uint64_t ***v52;
  void *v53;
  unsigned int v54;
  int64_t v55;
  int v56;
  BOOL v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  llvm::Constant **v62;
  const void **v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  const void *v67;
  uint64_t ***v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  BOOL v72;
  int v73;
  int64_t v74;
  unint64_t v75;
  unsigned int v76;
  llvm::Use **v77;
  int v78;
  llvm::APInt **v79;
  int v80;
  llvm *v81;
  int v82;
  llvm **v83;
  int v84;
  llvm **v85;
  int v86;
  int v87;
  llvm::Type *v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  llvm::Constant *v99;
  unsigned int PrimitiveSizeInBits;
  llvm::APInt *v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  llvm::APInt **v105;
  uint64_t v106;
  uint64_t *v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  llvm::APInt **v112;
  uint64_t v113;
  uint64_t *v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  unint64_t v119;
  unint64_t v120;
  unsigned int v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  unsigned int v139;
  BOOL v140;
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  void *__src;
  unsigned int v152;
  unint64_t v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  llvm *v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v163;
  void *v164;
  unsigned int v165;
  void *v166;
  unsigned int v167;
  llvm::APInt *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  llvm::Constant *v172;
  llvm::APInt **v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t *v176;
  char v177;

  v8 = a2;
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
    {
      result = (llvm::Value **)llvm::ConstantFoldBinaryOpOperands((llvm *)0x1C, a1, a2, *(llvm::Constant **)a3, a5, a6);
      v11 = a1;
      if (result)
        return result;
    }
    else
    {
      v11 = a2;
      v8 = a1;
    }
  }
  else
  {
    v11 = a1;
  }
  if (*((_BYTE *)v8 + 16) == 12)
    return (llvm::Value **)v8;
  if (*(_BYTE *)(a3 + 41) && sub_1C4E7B480((uint64_t)v8))
    return llvm::Constant::getNullValue(*(llvm::Constant **)v11, v12);
  if (v11 == v8)
    return (llvm::Value **)v11;
  if (*((unsigned __int8 *)v8 + 16) <= 0x14u
    && ((llvm::Constant::isNullValue(v8) & 1) != 0 || (sub_1C4E71060((uint64_t)&v172, v8) & 1) != 0))
  {
    goto LABEL_20;
  }
  if ((sub_1C4D9ED34((uint64_t)&v172, v8) & 1) != 0)
    return (llvm::Value **)v11;
  v172 = v8;
  v15 = *((unsigned __int8 *)v11 + 16);
  if (v15 == 5)
  {
    if (*((_WORD *)v11 + 9) == 30)
    {
      v17 = *((_DWORD *)v11 + 5) & 0x7FFFFFF;
      v18 = (llvm **)((char *)v11 - 32 * v17);
      if (v8 == *v18)
      {
        if ((sub_1C4D9EED4((uint64_t)&v173, v18[4]) & 1) != 0)
          goto LABEL_20;
        v20 = v172;
        v19 = -(uint64_t)(*((_DWORD *)v11 + 5) & 0x7FFFFFF);
      }
      else
      {
        v19 = -v17;
        v20 = v8;
      }
      v21 = (llvm::Constant **)((char *)v11 + 32 * v19);
      if (v20 == v21[4] && (sub_1C4D9EED4((uint64_t)&v173, *v21) & 1) != 0)
        goto LABEL_20;
    }
  }
  else if (v15 == 58)
  {
    v16 = v8;
    if (v8 == *((llvm **)v11 - 8))
    {
      if ((sub_1C4D9ED34((uint64_t)&v173, *((llvm::Constant **)v11 - 4)) & 1) != 0)
        goto LABEL_20;
      v16 = v172;
    }
    if (v16 == *((llvm::Constant **)v11 - 4) && (sub_1C4D9ED34((uint64_t)&v173, *((llvm::Constant **)v11 - 8)) & 1) != 0)
      goto LABEL_20;
  }
  v159 = (uint64_t)v11;
  v22 = *((unsigned __int8 *)v8 + 16);
  if (v22 == 5)
  {
    if (*((_WORD *)v8 + 9) == 30)
    {
      v24 = *((_DWORD *)v8 + 5) & 0x7FFFFFF;
      v25 = (llvm **)((char *)v8 - 32 * v24);
      if (v11 == *v25)
      {
        if ((sub_1C4D9EED4((uint64_t)&v160, v25[4]) & 1) != 0)
          goto LABEL_20;
        v27 = v159;
        v26 = -(uint64_t)(*((_DWORD *)v8 + 5) & 0x7FFFFFF);
      }
      else
      {
        v26 = -v24;
        v27 = (uint64_t)v11;
      }
      v28 = (char *)v8 + 32 * v26;
      if (v27 == *((_QWORD *)v28 + 4) && (sub_1C4D9EED4((uint64_t)&v160, *(llvm::Constant **)v28) & 1) != 0)
        goto LABEL_20;
    }
  }
  else if (v22 == 58)
  {
    v23 = (uint64_t)v11;
    if (v11 == *((llvm **)v8 - 8))
    {
      if ((sub_1C4D9ED34((uint64_t)&v160, *((llvm::Constant **)v8 - 4)) & 1) != 0)
        goto LABEL_20;
      v23 = v159;
    }
    if (v23 == *((_QWORD *)v8 - 4) && (sub_1C4D9ED34((uint64_t)&v160, *((llvm::Constant **)v8 - 8)) & 1) != 0)
      goto LABEL_20;
  }
  v29 = *((unsigned __int8 *)v11 + 16);
  if (v29 == 5)
  {
    if (*((_WORD *)v11 + 9) != 29)
      goto LABEL_61;
    v31 = (llvm **)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
    if (v8 == *v31)
      return (llvm::Value **)v8;
    v30 = v31 + 4;
  }
  else
  {
    if (v29 != 57)
      goto LABEL_61;
    if (v8 == *((llvm **)v11 - 8))
      return (llvm::Value **)v8;
    v30 = (llvm **)((char *)v11 - 32);
  }
  if (v8 == *v30)
    return (llvm::Value **)v8;
LABEL_61:
  v32 = *((unsigned __int8 *)v8 + 16);
  if (v32 == 5)
  {
    if (*((_WORD *)v8 + 9) != 29)
      goto LABEL_69;
    v34 = (llvm **)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
    if (v11 == *v34)
      return (llvm::Value **)v11;
    v33 = v34 + 4;
  }
  else
  {
    if (v32 != 57)
      goto LABEL_69;
    if (v11 == *((llvm **)v8 - 8))
      return (llvm::Value **)v11;
    v33 = (llvm **)((char *)v8 - 32);
  }
  if (v11 == *v33)
    return (llvm::Value **)v11;
LABEL_69:
  v170 = 0;
  v171 = 0;
  v172 = (llvm::Constant *)&v171;
  v173 = (llvm::APInt **)&v170;
  if (!sub_1C4E74064((_QWORD **)&v172, 29, (uint64_t)v11))
    goto LABEL_79;
  v35 = *((unsigned __int8 *)v8 + 16);
  if (v35 == 5)
  {
    if (*((_WORD *)v8 + 9) != 29)
      goto LABEL_79;
    v38 = (llvm::Value ***)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
    v36 = *v38;
    result = (llvm::Value **)v171;
    v37 = v38[4];
  }
  else
  {
    if (v35 != 57)
      goto LABEL_79;
    v36 = (llvm::Value **)*((_QWORD *)v8 - 8);
    result = (llvm::Value **)v171;
    v37 = (llvm::Value **)*((_QWORD *)v8 - 4);
  }
  if (result == v36 && (llvm::Value **)v170 == v37)
    return v36;
  if (result == v37 && (llvm::Value **)v170 == v36)
    return result;
LABEL_79:
  v172 = (llvm::Constant *)&v171;
  v173 = (llvm::APInt **)&v170;
  if (!sub_1C4E74064((_QWORD **)&v172, 29, (uint64_t)v8))
    goto LABEL_90;
  v39 = *((unsigned __int8 *)v11 + 16);
  if (v39 == 5)
  {
    if (*((_WORD *)v11 + 9) != 29)
      goto LABEL_90;
    v41 = (llvm::Value ***)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
    v36 = *v41;
    result = (llvm::Value **)v171;
    v40 = v41[4];
  }
  else
  {
    if (v39 != 57)
      goto LABEL_90;
    v36 = (llvm::Value **)*((_QWORD *)v11 - 8);
    result = (llvm::Value **)v171;
    v40 = (llvm::Value **)*((_QWORD *)v11 - 4);
  }
  if (result == v36 && (llvm::Value **)v170 == v40)
    return v36;
  if (result == v40 && (llvm::Value **)v170 == v36)
    return result;
LABEL_90:
  result = sub_1C4E73A4C((uint64_t)v11, (uint64_t)v8, 28);
  if (result)
    return result;
  v168 = 0;
  v169 = 0;
  v172 = (llvm::Constant *)&v169;
  v173 = 0;
  if (sub_1C4D89F84((uint64_t)&v172, (unsigned __int8 *)v8))
  {
    v172 = (llvm::Constant *)&v171;
    v173 = &v168;
    v174 = 0;
    v43 = *((unsigned __int8 *)v11 + 16);
    if (v43 == 5)
    {
      if (*((_WORD *)v11 + 9) != 25)
        goto LABEL_116;
      v44 = (llvm::Constant **)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
      if (!*v44)
        goto LABEL_116;
      v171 = (uint64_t)*v44;
      if (!sub_1C4D8A004((uint64_t)&v173, v44[4]))
        goto LABEL_116;
    }
    else
    {
      if (v43 != 53)
        goto LABEL_116;
      if (!*((_QWORD *)v11 - 8))
        goto LABEL_116;
      v171 = *((_QWORD *)v11 - 8);
      if ((sub_1C4D89F84((uint64_t)&v173, *((unsigned __int8 **)v11 - 4)) & 1) == 0)
        goto LABEL_116;
    }
    v45 = (const void **)v169;
    v46 = *(unsigned int *)(v169 + 8);
    v167 = v46;
    if (v46 > 0x40)
    {
      v166 = (void *)operator new[]();
      memcpy(v166, *v45, ((v46 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v166);
      v46 = v167;
      v49 = (unint64_t)v166;
      v167 = 0;
      v50 = (uint64_t ***)v168;
      if (v46 > 0x40)
      {
        v52 = (uint64_t ***)v168;
        v53 = (void *)operator new[]();
        memcpy(v53, (const void *)v49, ((v46 + 63) >> 3) & 0x3FFFFFF8);
        v54 = sub_1C47EE5B8(v52, v46);
        v55 = (v46 + 63) >> 6;
        llvm::APInt::tcShiftRight((llvm::APInt *)v53, (unint64_t *)v55, v54);
        v56 = 0;
        do
        {
          v57 = v55-- < 1;
          if (v57)
            break;
          v58 = *((_QWORD *)v53 + v55);
          v56 += __clz(v58);
        }
        while (!v58);
        v59 = v46 | 0xFFFFFFC0;
        if ((v46 & 0x3F) == 0)
          v59 = 0;
        v60 = v56 + v59;
        MEMORY[0x1CAA32F9C](v53, 0x1000C8000313F17);
        if (v49)
          MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
        if (v60 == (_DWORD)v46)
          return (llvm::Value **)v11;
        goto LABEL_116;
      }
    }
    else
    {
      v47 = ~*(_QWORD *)v169;
      if ((_DWORD)v46)
        v48 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v46;
      else
        v48 = 0;
      v49 = v48 & v47;
      v166 = (void *)(v48 & v47);
      v167 = 0;
      v50 = (uint64_t ***)v168;
    }
    v51 = sub_1C47EE5B8(v50, v46);
    if ((_DWORD)v46 == v51 || !(v49 >> v51))
      return (llvm::Value **)v11;
LABEL_116:
    v172 = (llvm::Constant *)&v171;
    v173 = &v168;
    v174 = 0;
    v61 = *((unsigned __int8 *)v11 + 16);
    if (v61 == 5)
    {
      if (*((_WORD *)v11 + 9) != 26)
        goto LABEL_148;
      v62 = (llvm::Constant **)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
      if (!*v62)
        goto LABEL_148;
      v171 = (uint64_t)*v62;
      if (!sub_1C4D8A004((uint64_t)&v173, v62[4]))
        goto LABEL_148;
    }
    else
    {
      if (v61 != 54)
        goto LABEL_148;
      if (!*((_QWORD *)v11 - 8))
        goto LABEL_148;
      v171 = *((_QWORD *)v11 - 8);
      if ((sub_1C4D89F84((uint64_t)&v173, *((unsigned __int8 **)v11 - 4)) & 1) == 0)
        goto LABEL_148;
    }
    v63 = (const void **)v169;
    v64 = *(unsigned int *)(v169 + 8);
    v165 = v64;
    if (v64 > 0x40)
    {
      v164 = (void *)operator new[]();
      memcpy(v164, *v63, ((unint64_t)(v64 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v164);
      LODWORD(v64) = v165;
      v67 = v164;
      v165 = 0;
      v68 = (uint64_t ***)v168;
      LODWORD(v160) = v64;
      if (v64 > 0x40)
      {
        v159 = operator new[]();
        v70 = v160;
        memcpy((void *)v159, v67, (((unint64_t)v160 + 63) >> 3) & 0x3FFFFFF8);
        v69 = v70;
LABEL_131:
        v71 = sub_1C47EE5B8(v68, v69);
        sub_1C4888094((uint64_t)&v159, v71);
        if (v160 >= 0x41)
        {
          v73 = 0;
          v74 = ((unint64_t)v160 + 63) >> 6;
          do
          {
            v57 = v74-- < 1;
            if (v57)
              break;
            v75 = *(_QWORD *)(v159 + 8 * v74);
            v73 += __clz(v75);
          }
          while (!v75);
          if ((v160 & 0x3F) != 0)
            v76 = v160 | 0xFFFFFFC0;
          else
            v76 = 0;
          v72 = v73 + v76 == (_DWORD)v160;
          if (v159)
            MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
        }
        else
        {
          v72 = v159 == 0;
        }
        if (v64 >= 0x41 && v67)
          MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
        if (v165 >= 0x41 && v164)
          MEMORY[0x1CAA32F9C](v164, 0x1000C8000313F17);
        if (v72)
          return (llvm::Value **)v11;
        goto LABEL_148;
      }
    }
    else
    {
      v65 = ~*(_QWORD *)v169;
      v66 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v64;
      if (!(_DWORD)v64)
        v66 = 0;
      v67 = (const void *)(v66 & v65);
      v164 = (void *)(v66 & v65);
      v165 = 0;
      v68 = (uint64_t ***)v168;
      LODWORD(v160) = v64;
    }
    v159 = (uint64_t)v67;
    v69 = v64;
    goto LABEL_131;
  }
LABEL_148:
  if ((llvm::isCheckForZeroAndMulWithOverflow(v11, v8, (llvm::Value *)1, &v172, v42) & 1) != 0)
    return (llvm::Value **)v8;
  if ((llvm::isCheckForZeroAndMulWithOverflow(v8, v11, (llvm::Value *)1, &v172, v77) & 1) != 0)
    return (llvm::Value **)v11;
  v173 = (llvm::APInt **)v8;
  v78 = *((unsigned __int8 *)v11 + 16);
  if (v78 == 5)
  {
    if (*((_WORD *)v11 + 9) == 15
      && sub_1C4E71060((uint64_t)&v172, *((llvm::Constant **)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))))
    {
      v79 = (llvm::APInt **)((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4];
LABEL_157:
      if (v173 == v79)
        goto LABEL_166;
    }
  }
  else if (v78 == 43 && sub_1C4D8AC3C((uint64_t)&v172, *((llvm::Constant **)v11 - 8)))
  {
    v79 = (llvm::APInt **)*((_QWORD *)v11 - 4);
    goto LABEL_157;
  }
  v160 = v11;
  v80 = *((unsigned __int8 *)v8 + 16);
  if (v80 == 5)
  {
    if (*((_WORD *)v8 + 9) != 15
      || !sub_1C4E71060((uint64_t)&v159, *((llvm::Constant **)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF))))
    {
      goto LABEL_168;
    }
    v81 = (llvm *)((_QWORD *)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF))[4];
  }
  else
  {
    if (v80 != 43 || !sub_1C4D8AC3C((uint64_t)&v159, *((llvm::Constant **)v8 - 8)))
      goto LABEL_168;
    v81 = (llvm *)*((_QWORD *)v8 - 4);
  }
  if (v160 != v81)
    goto LABEL_168;
LABEL_166:
  if ((llvm::isKnownToBeAPowerOfTwo(v11, *(const llvm::Value **)a3, (const llvm::DataLayout *)1, 0, *(_QWORD *)(a3 + 24), *(llvm::AssumptionCache **)(a3 + 32), *(const llvm::Instruction **)(a3 + 16), (const llvm::DominatorTree *)1, (BOOL)__src) & 1) != 0)return (llvm::Value **)v11;
  if ((llvm::isKnownToBeAPowerOfTwo(v8, *(const llvm::Value **)a3, (const llvm::DataLayout *)1, 0, *(_QWORD *)(a3 + 24), *(llvm::AssumptionCache **)(a3 + 32), *(const llvm::Instruction **)(a3 + 16), (const llvm::DominatorTree *)1, (BOOL)__src) & 1) != 0)return (llvm::Value **)v8;
LABEL_168:
  v172 = v8;
  v82 = *((unsigned __int8 *)v11 + 16);
  if (v82 == 5)
  {
    if (*((_WORD *)v11 + 9) != 13)
      goto LABEL_178;
    v83 = (llvm **)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
    if (v8 != *v83 || !sub_1C4D9EED4((uint64_t)&v173, v83[4]))
      goto LABEL_178;
  }
  else if (v82 != 41
         || v8 != *((llvm **)v11 - 8)
         || (sub_1C4D9ED34((uint64_t)&v173, *((llvm::Constant **)v11 - 4)) & 1) == 0)
  {
    goto LABEL_178;
  }
  if (llvm::isKnownToBeAPowerOfTwo(v8, *(const llvm::Value **)a3, (const llvm::DataLayout *)1, 0, *(_QWORD *)(a3 + 24), *(llvm::AssumptionCache **)(a3 + 32), *(const llvm::Instruction **)(a3 + 16), (const llvm::DominatorTree *)1, (BOOL)__src))
  {
    v14 = *(llvm::Constant **)v8;
    return llvm::Constant::getNullValue(v14, v13);
  }
LABEL_178:
  v172 = v11;
  v84 = *((unsigned __int8 *)v8 + 16);
  if (v84 == 5)
  {
    if (*((_WORD *)v8 + 9) != 13)
      goto LABEL_187;
    v85 = (llvm **)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
    if (v11 != *v85 || !sub_1C4D9EED4((uint64_t)&v173, v85[4]))
      goto LABEL_187;
  }
  else if (v84 != 41
         || v11 != *((llvm **)v8 - 8)
         || (sub_1C4D9ED34((uint64_t)&v173, *((llvm::Constant **)v8 - 4)) & 1) == 0)
  {
    goto LABEL_187;
  }
  if (llvm::isKnownToBeAPowerOfTwo(v11, *(const llvm::Value **)a3, (const llvm::DataLayout *)1, 0, *(_QWORD *)(a3 + 24), *(llvm::AssumptionCache **)(a3 + 32), *(const llvm::Instruction **)(a3 + 16), (const llvm::DominatorTree *)1, (BOOL)__src))
  {
LABEL_20:
    v14 = *(llvm::Constant **)v11;
    return llvm::Constant::getNullValue(v14, v13);
  }
LABEL_187:
  result = (llvm::Value **)sub_1C4E73C1C(a3, (uint64_t)v11, (uint64_t)v8, 1);
  if (result)
    return result;
  result = (llvm::Value **)sub_1C4E70E2C(0x1Cu, (uint64_t)v11, (uint64_t)v8, a3, a4);
  if (result)
    return result;
  result = (llvm::Value **)sub_1C4E7166C(28, (uint64_t)v11, (uint64_t)v8, 0x1Du, a3, a4);
  if (result)
    return result;
  result = (llvm::Value **)sub_1C4E7166C(28, (uint64_t)v11, (uint64_t)v8, 0x1Eu, a3, a4);
  if (result)
    return result;
  v86 = *((unsigned __int8 *)v11 + 16);
  if (v86 == 85 || *((_BYTE *)v8 + 16) == 85)
  {
    v87 = *(_DWORD *)(*(_QWORD *)v11 + 8);
    if ((v87 & 0xFE) == 0x12)
      v87 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v11 + 16) + 8);
    if (v87 == 269)
    {
      if ((sub_1C4E76068((uint64_t)v11, (uint64_t)v8) & 1) != 0)
        return (llvm::Value **)v8;
      if ((sub_1C4E76068((uint64_t)v8, (uint64_t)v11) & 1) != 0)
        return (llvm::Value **)v11;
    }
    result = (llvm::Value **)sub_1C4E716EC(28, (uint64_t)v11, (uint64_t)v8, a3, a4);
    if (result)
      return result;
    v86 = *((unsigned __int8 *)v11 + 16);
  }
  if (v86 != 83 && *((_BYTE *)v8 + 16) != 83 || (result = (llvm::Value **)sub_1C4E71910(28, v11, v8, a3, a4)) == 0)
  {
    v163 = 0;
    v159 = (uint64_t)&v169;
    v160 = 0;
    if (!sub_1C4D89F84((uint64_t)&v159, (unsigned __int8 *)v8))
      goto LABEL_296;
    v172 = (llvm::Constant *)&v171;
    v173 = &v168;
    v174 = 0;
    v175 = &v163;
    v176 = &v170;
    v89 = *((unsigned __int8 *)v11 + 16);
    if (v89 == 5)
    {
      if (*((_WORD *)v11 + 9) != 29)
        goto LABEL_296;
      v93 = *((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
      v94 = sub_1C4E73984((_QWORD **)&v172, v93);
      if (v93 && v94)
      {
        *v175 = v93;
        v92 = ((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4];
        if (!v92)
          goto LABEL_209;
      }
      else
      {
        v97 = ((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4];
        v98 = sub_1C4E73984((_QWORD **)&v172, v97);
        if (!v97)
          goto LABEL_296;
        if (!v98)
          goto LABEL_296;
        *v175 = v97;
        v92 = *((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
        if (!v92)
          goto LABEL_296;
      }
    }
    else
    {
      if (v89 != 57)
        goto LABEL_296;
      v90 = *((_QWORD *)v11 - 8);
      v91 = sub_1C4E73984((_QWORD **)&v172, v90);
      if (v90 && v91)
      {
        *v175 = v90;
        v92 = *((_QWORD *)v11 - 4);
        if (!v92)
        {
LABEL_209:
          sub_1C4E73984((_QWORD **)&v172, 0);
          goto LABEL_296;
        }
      }
      else
      {
        v95 = *((_QWORD *)v11 - 4);
        v96 = sub_1C4E73984((_QWORD **)&v172, v95);
        if (!v95)
          goto LABEL_296;
        if (!v96)
          goto LABEL_296;
        *v175 = v95;
        v92 = *((_QWORD *)v11 - 8);
        if (!v92)
          goto LABEL_296;
      }
    }
    *v176 = v92;
    v99 = *(llvm::Constant **)v11;
    if ((*(_DWORD *)(*(_QWORD *)v11 + 8) & 0xFE) == 0x12)
      v99 = (llvm::Constant *)**((_QWORD **)v99 + 2);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v99);
    v101 = v168;
    v102 = PrimitiveSizeInBits;
    v103 = *((_DWORD *)v168 + 2);
    if (v103 >= 0x41)
    {
      if (v103 - llvm::APInt::countLeadingZerosSlowCase(v168) > 0x40)
        goto LABEL_230;
      v104 = **(_QWORD **)v101;
    }
    else
    {
      v104 = *(_QWORD *)v168;
    }
    if (v104 <= PrimitiveSizeInBits)
      v102 = v104;
LABEL_230:
    v105 = *(llvm::APInt ***)(a3 + 24);
    v106 = *(_QWORD *)(a3 + 32);
    v107 = *(uint64_t **)(a3 + 16);
    if (!v106 || !*(_QWORD *)(v106 + 40))
    {
      if (!v170 || *(unsigned __int8 *)(v170 + 16) < 0x1Cu || (v106 = v170, !*(_QWORD *)(v170 + 40)))
        v106 = 0;
    }
    v172 = *(llvm::Constant **)a3;
    v173 = v105;
    v174 = v106;
    v175 = v107;
    v176 = 0;
    v177 = 1;
    sub_1C4F83784(v170, 0, (uint64_t *)&v172, &v159);
    v108 = (int)v160;
    if (v160 > 0x40)
    {
      v109 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v159);
    }
    else if ((_DWORD)v160)
    {
      v109 = __clz(~(v159 << -(char)v160));
    }
    else
    {
      v109 = 0;
    }
    v110 = v108 - v109;
    if (v110 > v102)
    {
      v111 = 0;
      goto LABEL_292;
    }
    v112 = *(llvm::APInt ***)(a3 + 24);
    v113 = *(_QWORD *)(a3 + 32);
    v114 = *(uint64_t **)(a3 + 16);
    if (!v113 || !*(_QWORD *)(v113 + 40))
    {
      if (!v171 || *(unsigned __int8 *)(v171 + 16) < 0x1Cu || (v113 = v171, !*(_QWORD *)(v171 + 40)))
        v113 = 0;
    }
    v172 = *(llvm::Constant **)a3;
    v173 = v112;
    v174 = v113;
    v175 = v114;
    v176 = 0;
    v177 = 1;
    sub_1C4F83784(v171, 0, (uint64_t *)&v172, &v155);
    v115 = v156;
    if (v156 > 0x40)
    {
      v116 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v155);
    }
    else if (v156)
    {
      v116 = __clz(~(v155 << -(char)v156));
    }
    else
    {
      v116 = 0;
    }
    v117 = v115 - v116;
    LODWORD(v173) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v172, 0, 0);
      sub_1C4912E54(&v172, 0, v110);
      v152 = PrimitiveSizeInBits;
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
    }
    else
    {
      v172 = 0;
      sub_1C4912E54(&v172, 0, v110);
      v152 = PrimitiveSizeInBits;
      __src = 0;
    }
    sub_1C4912E54(&__src, 0, v117);
    v154 = v152;
    if (v152 > 0x40)
    {
      v153 = operator new[]();
      memcpy((void *)v153, __src, (((unint64_t)v154 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v153 = (unint64_t)__src;
    }
    sub_1C4888094((uint64_t)&v153, v102);
    if (v152 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    v118 = v173;
    if (v173 > 0x40)
    {
      v124 = 0;
      v119 = (unint64_t)v172;
      v120 = *(_QWORD *)v169;
      while ((*(_QWORD *)((_BYTE *)v172 + v124) & ~*(_QWORD *)(v120 + v124)) == 0)
      {
        v124 += 8;
        if (((((unint64_t)v173 + 63) >> 3) & 0x3FFFFFF8) == v124)
          goto LABEL_260;
      }
    }
    else
    {
      v119 = (unint64_t)v172;
      v120 = *(_QWORD *)v169;
      if (((unint64_t)v172 & ~*(_QWORD *)v169) == 0)
      {
LABEL_260:
        v121 = v154;
        if (v154 > 0x40)
        {
          v127 = 0;
          v125 = ((unint64_t)v154 + 63) >> 6;
          v122 = v153;
          while ((*(_QWORD *)(v120 + v127) & *(_QWORD *)(v153 + v127)) == 0)
          {
            v127 += 8;
            if (8 * v125 == v127)
              goto LABEL_278;
          }
          goto LABEL_264;
        }
        v122 = v153;
        if ((v120 & v153) == 0)
        {
LABEL_278:
          v123 = 0;
          v111 = v170;
          goto LABEL_283;
        }
      }
    }
    v121 = v154;
    if (v154 < 0x41)
    {
      v122 = v153;
      if ((v153 & ~v120) != 0)
      {
        v111 = 0;
        v123 = 1;
        goto LABEL_286;
      }
LABEL_267:
      if (v173 >= 0x41)
      {
        v128 = ((unint64_t)v173 + 63) >> 6;
        while (1)
        {
          v130 = *(_QWORD *)v119;
          v119 += 8;
          v129 = v130;
          v131 = *(_QWORD *)v120;
          v120 += 8;
          if ((v131 & v129) != 0)
            break;
          if (!--v128)
            goto LABEL_282;
        }
      }
      else if ((v120 & v119) == 0)
      {
LABEL_282:
        v123 = 0;
        v111 = v163;
        goto LABEL_283;
      }
      v111 = 0;
      v123 = 1;
LABEL_283:
      if (v121 < 0x41 || !v122)
      {
LABEL_286:
        if (v118 >= 0x41 && v172)
          MEMORY[0x1CAA32F9C](v172, 0x1000C8000313F17);
        if (v158 >= 0x41 && v157)
          MEMORY[0x1CAA32F9C](v157, 0x1000C8000313F17);
        if (v156 >= 0x41 && v155)
          MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
        if (!v123)
        {
LABEL_293:
          if (v162 >= 0x41 && v161)
            MEMORY[0x1CAA32F9C](v161, 0x1000C8000313F17);
          if (v160 >= 0x41 && v159)
            MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
          if ((v123 & 1) == 0)
            return (llvm::Value **)v111;
LABEL_296:
          v132 = *((unsigned __int8 *)v11 + 16);
          if (v132 != 5)
          {
            if (v132 != 58)
              return 0;
            v133 = *((_QWORD *)v11 - 8);
            if (!v133)
            {
              v134 = *((_QWORD *)v11 - 4);
              if (!v134)
                return 0;
              goto LABEL_323;
            }
            v171 = *((_QWORD *)v11 - 8);
            v134 = *((_QWORD *)v11 - 4);
            if (*(_BYTE *)(v134 + 16) != 57 || !v134)
            {
LABEL_323:
              v111 = 0;
              v171 = v134;
              if (*(_BYTE *)(v133 + 16) != 57 || !v133)
                return (llvm::Value **)v111;
              v144 = *(_QWORD *)(v133 - 64);
              v136 = *(_QWORD *)(v133 - 32);
              if (v134 == v144)
              {
                if (!v136)
                  return 0;
                v170 = *(_QWORD *)(v133 - 32);
              }
              else
              {
                v111 = 0;
                if (!v144 || v134 != v136)
                  return (llvm::Value **)v111;
                v170 = *(_QWORD *)(v133 - 64);
                v136 = v144;
              }
              v134 = v133;
              goto LABEL_347;
            }
            v135 = *(_QWORD *)(v134 - 64);
            v136 = *(_QWORD *)(v134 - 32);
            if (v133 != v135)
            {
              if (v135 && v133 == v136)
              {
                v170 = *(_QWORD *)(v134 - 64);
                v136 = v135;
LABEL_347:
                v147 = *((unsigned __int8 *)v8 + 16);
                if (v147 == 5)
                {
                  if (*((_WORD *)v8 + 9) != 30)
                    return 0;
                  v150 = (uint64_t *)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
                  v148 = *v150;
                  v149 = v150[4];
                }
                else
                {
                  if (v147 != 58)
                    return 0;
                  v148 = *((_QWORD *)v8 - 8);
                  v149 = *((_QWORD *)v8 - 4);
                }
                if (v134 == v148 && v136 == v149 || v134 == v149 && v136 == v148)
                  return llvm::Constant::getNullValue(*(llvm::Constant **)v11, v88);
                return 0;
              }
              goto LABEL_323;
            }
            if (!v136)
              goto LABEL_323;
LABEL_346:
            v170 = v136;
            goto LABEL_347;
          }
          if (*((_WORD *)v11 + 9) != 30)
            return 0;
          v137 = (uint64_t *)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
          v138 = *v137;
          if (*v137)
          {
            v171 = *v137;
            v134 = v137[4];
            v139 = *(unsigned __int8 *)(v134 + 16);
            v140 = v139 != 57 || v134 == 0;
            if (!v140 && v139 >= 0x1C && v139 - 59 >= 0xFFFFFFEE)
            {
              v136 = *(_QWORD *)(v134 - 64);
              v143 = *(_QWORD *)(v134 - 32);
              if (v138 == v136)
              {
                v136 = *(_QWORD *)(v134 - 32);
                if (v143)
                  goto LABEL_346;
              }
              else if (v136 && v138 == v143)
              {
                goto LABEL_346;
              }
            }
          }
          else
          {
            v134 = v137[4];
            if (!v134)
              return 0;
          }
          v171 = v134;
          if (*(_BYTE *)(v138 + 16) != 57 || v138 == 0)
            return 0;
          v136 = *(_QWORD *)(v138 - 64);
          v146 = *(_QWORD *)(v138 - 32);
          if (v134 == v136)
          {
            v134 = v138;
            v136 = *(_QWORD *)(v138 - 32);
            if (!v146)
              return 0;
          }
          else
          {
            v111 = 0;
            if (!v136)
              return (llvm::Value **)v111;
            v140 = v134 == v146;
            v134 = v138;
            if (!v140)
              return (llvm::Value **)v111;
          }
          goto LABEL_346;
        }
LABEL_292:
        LOBYTE(v123) = 1;
        goto LABEL_293;
      }
LABEL_285:
      MEMORY[0x1CAA32F9C]();
      v118 = v173;
      goto LABEL_286;
    }
    v122 = v153;
    v125 = ((unint64_t)v154 + 63) >> 6;
LABEL_264:
    v126 = 0;
    while ((*(_QWORD *)(v122 + 8 * v126) & ~*(_QWORD *)(v120 + 8 * v126)) == 0)
    {
      if (v125 == ++v126)
        goto LABEL_267;
    }
    v111 = 0;
    v123 = 1;
    goto LABEL_285;
  }
  return result;
}

llvm::ValueHandleBase *llvm::SimplifyOrInst(llvm *a1, llvm::Constant *a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E65634(a1, a2, a3, 3, a5, a6);
}

llvm::ValueHandleBase *sub_1C4E65634(llvm *a1, llvm::Constant *a2, uint64_t a3, int a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  llvm *v8;
  llvm::ValueHandleBase *result;
  llvm *v11;
  llvm::Type *v12;
  llvm::Constant *v13;
  int v14;
  llvm::APInt *v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  llvm::APInt *v27;
  llvm::Constant **v28;
  llvm::Type *v29;
  unsigned int PrimitiveSizeInBits;
  unsigned int v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  llvm::Use **v44;
  llvm::Use **v45;
  int v46;
  int v47;
  llvm::Constant **v48;
  int v49;
  llvm::Constant **v50;
  llvm::APInt *v51;
  const void **v52;
  uint64_t v53;
  unint64_t v54;
  const void *v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  int v59;
  llvm *v60;
  llvm *v61;
  llvm **v62;
  int v63;
  llvm *v64;
  llvm *v65;
  llvm **v66;
  BOOL v67;
  void *v68;
  int v69;
  llvm::APInt *v70;
  llvm::APInt *v71;
  uint64_t v72;
  llvm::APInt **v73;
  uint64_t v74;
  __int128 v75;
  uint64_t *v76;
  __int128 v77;
  uint64_t v78;
  llvm *v79;
  uint64_t *v80;
  llvm *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;

  v8 = a2;
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
    {
      result = llvm::ConstantFoldBinaryOpOperands((llvm *)0x1D, a1, a2, *(llvm::Constant **)a3, a5, a6);
      v11 = a1;
      if (result)
        return result;
    }
    else
    {
      v11 = a2;
      v8 = a1;
    }
  }
  else
  {
    v11 = a1;
  }
  if (*((_BYTE *)v8 + 16) == 12)
    return v8;
  if (*(_BYTE *)(a3 + 41) && (sub_1C4E7B480((uint64_t)v8) & 1) != 0 || (sub_1C4D9ED34((uint64_t)&v72, v8) & 1) != 0)
  {
    v13 = *(llvm::Constant **)v11;
    return llvm::Constant::getAllOnesValue(v13, v12);
  }
  if (v11 == v8
    || *((unsigned __int8 *)v8 + 16) <= 0x14u
    && ((llvm::Constant::isNullValue(v8) & 1) != 0 || (sub_1C4E71060((uint64_t)&v72, v8) & 1) != 0))
  {
    return v11;
  }
  result = sub_1C4E760F4((llvm::Constant **)v11, (uint64_t)v8);
  if (!result)
  {
    result = sub_1C4E760F4((llvm::Constant **)v8, (uint64_t)v11);
    if (!result)
    {
      result = (llvm::ValueHandleBase *)sub_1C4E73A4C((uint64_t)v11, (uint64_t)v8, 29);
      if (!result)
      {
        v83 = 0;
        v84 = 0;
        v73 = (llvm::APInt **)&v84;
        v14 = *((unsigned __int8 *)v11 + 16);
        if (v14 == 5)
        {
          if (*((_WORD *)v11 + 9) != 25)
            goto LABEL_42;
          if (!sub_1C4D9EED4((uint64_t)&v72, *((llvm::Constant **)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))))goto LABEL_42;
          v15 = (llvm::APInt *)((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4];
          if (!v15)
            goto LABEL_42;
        }
        else
        {
          if (v14 != 53)
            goto LABEL_42;
          if (!sub_1C4D9ED34((uint64_t)&v72, *((llvm::Constant **)v11 - 8)))
            goto LABEL_42;
          v15 = (llvm::APInt *)*((_QWORD *)v11 - 4);
          if (!v15)
            goto LABEL_42;
        }
        *v73 = v15;
        *((_QWORD *)&v77 + 1) = &v83;
        v16 = *((unsigned __int8 *)v8 + 16);
        if (v16 == 5)
        {
          if (*((_WORD *)v8 + 9) != 26)
            goto LABEL_42;
          if (!sub_1C4D9EED4((uint64_t)&v77, *((llvm::Constant **)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF))))goto LABEL_42;
          v17 = ((_QWORD *)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF))[4];
          if (!v17)
            goto LABEL_42;
        }
        else
        {
          if (v16 != 54)
          {
LABEL_43:
            v82 = &v84;
            if (v16 == 5)
            {
              if (*((_WORD *)v8 + 9) != 25)
                goto LABEL_82;
              if (!sub_1C4D9EED4((uint64_t)&v81, *((llvm::Constant **)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF))))goto LABEL_82;
              v19 = ((_QWORD *)v8 - 4 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF))[4];
              if (!v19)
                goto LABEL_82;
            }
            else
            {
              if (v16 != 53)
                goto LABEL_82;
              if (!sub_1C4D9ED34((uint64_t)&v81, *((llvm::Constant **)v8 - 8)))
                goto LABEL_82;
              v19 = *((_QWORD *)v8 - 4);
              if (!v19)
                goto LABEL_82;
            }
            *v82 = v19;
            v80 = &v83;
            v20 = *((unsigned __int8 *)v11 + 16);
            if (v20 == 5)
            {
              if (*((_WORD *)v11 + 9) != 26)
                goto LABEL_82;
              if (!sub_1C4D9EED4((uint64_t)&v79, *((llvm::Constant **)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))))goto LABEL_82;
              v17 = ((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4];
              if (!v17)
                goto LABEL_82;
            }
            else
            {
              if (v20 != 54)
                goto LABEL_82;
              if (!sub_1C4D9ED34((uint64_t)&v79, *((llvm::Constant **)v11 - 8)))
                goto LABEL_82;
              v17 = *((_QWORD *)v11 - 4);
              if (!v17)
                goto LABEL_82;
            }
            v18 = v80;
LABEL_60:
            *v18 = v17;
            v81 = 0;
            v21 = v84;
            v72 = (uint64_t)&v81;
            v73 = 0;
            v74 = v83;
            v22 = *(unsigned __int8 *)(v84 + 16);
            if (v22 == 5)
            {
              if (*(_WORD *)(v84 + 18) != 15
                || !sub_1C4D8A004((uint64_t)&v72, *(llvm::Constant **)(v84 - 32 * (*(_DWORD *)(v84 + 20) & 0x7FFFFFF))))
              {
                goto LABEL_68;
              }
              v23 = *(_QWORD *)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF) + 32);
            }
            else
            {
              if (v22 != 43 || !sub_1C4D89F84((uint64_t)&v72, *(unsigned __int8 **)(v84 - 64)))
                goto LABEL_68;
              v23 = *(_QWORD *)(v21 - 32);
            }
            if (v74 == v23)
            {
LABEL_76:
              v27 = v81;
              v28 = (llvm::Constant **)v84;
              v29 = *(llvm::Type **)v84;
              if ((*(_DWORD *)(*(_QWORD *)v84 + 8) & 0xFE) == 0x12)
                v29 = (llvm::Type *)**((_QWORD **)v29 + 2);
              PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v29);
              v31 = *((_DWORD *)v27 + 2);
              if (v31 >= 0x41)
              {
                if (v31 - llvm::APInt::countLeadingZerosSlowCase(v27) > 0x40)
                  goto LABEL_82;
                v27 = *(llvm::APInt **)v27;
              }
              if (*(_QWORD *)v27 <= (unint64_t)PrimitiveSizeInBits)
              {
                v13 = *v28;
                return llvm::Constant::getAllOnesValue(v13, v12);
              }
LABEL_82:
              LODWORD(v72) = 148;
              v73 = 0;
              v74 = (uint64_t)&v84;
              v67 = 1;
              v75 = xmmword_1C6A5FC00;
              v76 = &v83;
              if (!sub_1C4E775B8((uint64_t)&v72, (uint64_t)v11))
                goto LABEL_91;
              v32 = *((unsigned __int8 *)v8 + 16);
              if (v32 == 5)
              {
                if (*((_WORD *)v8 + 9) != 25)
                  goto LABEL_91;
                v34 = (_QWORD *)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
                if (v84 != *v34)
                  goto LABEL_91;
                v33 = v34[4];
              }
              else
              {
                if (v32 != 53 || v84 != *((_QWORD *)v8 - 8))
                  goto LABEL_91;
                v33 = *((_QWORD *)v8 - 4);
              }
              if (v83 == v33)
                return v11;
LABEL_91:
              LODWORD(v72) = 148;
              v73 = 0;
              v74 = (uint64_t)&v84;
              v75 = xmmword_1C6A5FC00;
              v76 = &v83;
              if (!sub_1C4E775B8((uint64_t)&v72, (uint64_t)v8))
                goto LABEL_100;
              v35 = *((unsigned __int8 *)v11 + 16);
              if (v35 == 5)
              {
                if (*((_WORD *)v11 + 9) != 25)
                  goto LABEL_100;
                v37 = (_QWORD *)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
                if (v84 != *v37)
                  goto LABEL_100;
                v36 = v37[4];
              }
              else
              {
                if (v35 != 53 || v84 != *((_QWORD *)v11 - 8))
                  goto LABEL_100;
                v36 = *((_QWORD *)v11 - 4);
              }
              if (v83 == v36)
                return v8;
LABEL_100:
              LODWORD(v77) = 149;
              *(_QWORD *)((char *)&v77 + 4) = 0;
              v72 = 149;
              LODWORD(v73) = 0;
              v74 = 1;
              *(_QWORD *)&v75 = &v84;
              *((_QWORD *)&v75 + 1) = 2;
              v76 = &v83;
              if (!sub_1C4E77624((uint64_t)&v72, (uint64_t)v11))
                goto LABEL_109;
              v38 = *((unsigned __int8 *)v8 + 16);
              if (v38 == 5)
              {
                if (*((_WORD *)v8 + 9) != 26)
                  goto LABEL_109;
                v40 = (_QWORD *)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
                if (v84 != *v40)
                  goto LABEL_109;
                v39 = v40[4];
              }
              else
              {
                if (v38 != 54 || v84 != *((_QWORD *)v8 - 8))
                  goto LABEL_109;
                v39 = *((_QWORD *)v8 - 4);
              }
              if (v83 == v39)
                return v11;
LABEL_109:
              LODWORD(v77) = 149;
              *(_QWORD *)((char *)&v77 + 4) = 0;
              v72 = 149;
              LODWORD(v73) = 0;
              v74 = 1;
              *(_QWORD *)&v75 = &v84;
              *((_QWORD *)&v75 + 1) = 2;
              v76 = &v83;
              if (!sub_1C4E77624((uint64_t)&v72, (uint64_t)v8))
                goto LABEL_118;
              v41 = *((unsigned __int8 *)v11 + 16);
              if (v41 == 5)
              {
                if (*((_WORD *)v11 + 9) != 26)
                  goto LABEL_118;
                v43 = (_QWORD *)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
                if (v84 != *v43)
                  goto LABEL_118;
                v42 = v43[4];
              }
              else
              {
                if (v41 != 54 || v84 != *((_QWORD *)v11 - 8))
                  goto LABEL_118;
                v42 = *((_QWORD *)v11 - 4);
              }
              if (v83 == v42)
                return v8;
LABEL_118:
              result = (llvm::ValueHandleBase *)sub_1C4E73C1C(a3, (uint64_t)v11, (uint64_t)v8, 0);
              if (result)
                return result;
              if ((llvm::isCheckForZeroAndMulWithOverflow(v11, v8, 0, &v72, v44) & 1) != 0)
                return v8;
              if ((llvm::isCheckForZeroAndMulWithOverflow(v8, v11, 0, &v72, v45) & 1) == 0)
              {
                result = (llvm::ValueHandleBase *)sub_1C4E70E2C(0x1Du, (uint64_t)v11, (uint64_t)v8, a3, a4);
                if (result)
                  return result;
                result = (llvm::ValueHandleBase *)sub_1C4E7166C(29, (uint64_t)v11, (uint64_t)v8, 0x1Cu, a3, a4);
                if (result)
                  return result;
                v46 = *((unsigned __int8 *)v11 + 16);
                if (v46 != 85 && *((_BYTE *)v8 + 16) != 85)
                {
LABEL_132:
                  v81 = 0;
                  v79 = 0;
                  v70 = 0;
                  v71 = 0;
                  v72 = (uint64_t)&v81;
                  v73 = &v71;
                  v74 = 0;
                  if (v46 == 5)
                  {
                    if (*((_WORD *)v11 + 9) != 28)
                      goto LABEL_198;
                    v48 = (llvm::Constant **)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
                    if (!*v48)
                      goto LABEL_198;
                    v81 = *v48;
                    if ((sub_1C4D8A004((uint64_t)&v73, v48[4]) & 1) == 0)
                      goto LABEL_198;
                  }
                  else
                  {
                    if (v46 != 56)
                      goto LABEL_198;
                    if (!*((_QWORD *)v11 - 8))
                      goto LABEL_198;
                    v81 = (llvm *)*((_QWORD *)v11 - 8);
                    if (!sub_1C4D89F84((uint64_t)&v73, *((unsigned __int8 **)v11 - 4)))
                      goto LABEL_198;
                  }
                  *(_QWORD *)&v77 = &v79;
                  *((_QWORD *)&v77 + 1) = &v70;
                  v78 = 0;
                  v49 = *((unsigned __int8 *)v8 + 16);
                  if (v49 == 5)
                  {
                    if (*((_WORD *)v8 + 9) != 28)
                      goto LABEL_198;
                    v50 = (llvm::Constant **)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
                    if (!*v50)
                      goto LABEL_198;
                    v79 = *v50;
                    if ((sub_1C4D8A004((uint64_t)&v77 + 8, v50[4]) & 1) == 0)
                      goto LABEL_198;
                  }
                  else
                  {
                    if (v49 != 56)
                      goto LABEL_198;
                    if (!*((_QWORD *)v8 - 8))
                      goto LABEL_198;
                    v79 = (llvm *)*((_QWORD *)v8 - 8);
                    if (!sub_1C4D89F84((uint64_t)&v77 + 8, *((unsigned __int8 **)v8 - 4)))
                      goto LABEL_198;
                  }
                  v52 = (const void **)v70;
                  v51 = v71;
                  v53 = *((unsigned int *)v70 + 2);
                  v69 = v53;
                  if (v53 > 0x40)
                  {
                    v68 = (void *)operator new[]();
                    memcpy(v68, *v52, ((unint64_t)(v53 + 63) >> 3) & 0x3FFFFFF8);
                    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v68);
                    LODWORD(v53) = v69;
                    v55 = v68;
                  }
                  else
                  {
                    if ((_DWORD)v53)
                      v54 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
                    else
                      v54 = 0;
                    v55 = (const void *)(v54 & ~*(_QWORD *)v70);
                  }
                  v56 = *((unsigned int *)v51 + 2);
                  if (v56 > 0x40)
                    v57 = memcmp(*(const void **)v51, v55, ((unint64_t)(v56 + 63) >> 3) & 0x3FFFFFF8) == 0;
                  else
                    v57 = *(_QWORD *)v51 == (_QWORD)v55;
                  v58 = v57;
                  if (v53 >= 0x41 && v55)
                    MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
                  if (!v58)
                    goto LABEL_198;
                  if (sub_1C49AB31C(v70))
                  {
                    v59 = *((unsigned __int8 *)v81 + 16);
                    if (v59 == 5)
                    {
                      if (*((_WORD *)v81 + 9) != 13)
                        goto LABEL_181;
                      v62 = (llvm **)((char *)v81 - 32 * (*((_DWORD *)v81 + 5) & 0x7FFFFFF));
                      v61 = v62[4];
                      if (v79 != *v62 || !v61)
                      {
                        if (!*v62)
                          goto LABEL_181;
                        v57 = v79 == v61;
                        v61 = *v62;
                        if (!v57)
                          goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v59 != 41)
                        goto LABEL_181;
                      v60 = (llvm *)*((_QWORD *)v81 - 8);
                      v61 = (llvm *)*((_QWORD *)v81 - 4);
                      if (v79 != v60 || !v61)
                      {
                        if (!v60)
                          goto LABEL_181;
                        v57 = v79 == v61;
                        v61 = (llvm *)*((_QWORD *)v81 - 8);
                        if (!v57)
                          goto LABEL_181;
                      }
                    }
                    if (llvm::MaskedValueIsZero(v61, v70, *(const llvm::APInt **)a3, 0, *(const llvm::DataLayout **)(a3 + 24), *(llvm::AssumptionCache **)(a3 + 32), *(const llvm::Instruction **)(a3 + 16), (const llvm::DominatorTree *)1, 1))
                    {
                      return v81;
                    }
                  }
LABEL_181:
                  if (!sub_1C49AB31C(v71))
                    goto LABEL_198;
                  v63 = *((unsigned __int8 *)v79 + 16);
                  if (v63 == 5)
                  {
                    if (*((_WORD *)v79 + 9) != 13
                      || ((v66 = (llvm **)((char *)v79 - 32 * (*((_DWORD *)v79 + 5) & 0x7FFFFFF)),
                           v65 = v66[4],
                           v81 != *v66)
                       || !v65)
                      && (!*v66 || (v57 = v81 == v65, v65 = *v66, !v57)))
                    {
LABEL_198:
                      if (*((_BYTE *)v11 + 16) != 83 && *((_BYTE *)v8 + 16) != 83)
                        return 0;
                      result = (llvm::ValueHandleBase *)sub_1C4E71910(29, v11, v8, a3, a4);
                      if (!result)
                        return 0;
                      return result;
                    }
                  }
                  else
                  {
                    if (v63 != 41)
                      goto LABEL_198;
                    v64 = (llvm *)*((_QWORD *)v79 - 8);
                    v65 = (llvm *)*((_QWORD *)v79 - 4);
                    if (v81 != v64 || !v65)
                    {
                      if (!v64)
                        goto LABEL_198;
                      v57 = v81 == v65;
                      v65 = (llvm *)*((_QWORD *)v79 - 8);
                      if (!v57)
                        goto LABEL_198;
                    }
                  }
                  if (llvm::MaskedValueIsZero(v65, v71, *(const llvm::APInt **)a3, 0, *(const llvm::DataLayout **)(a3 + 24), *(llvm::AssumptionCache **)(a3 + 32), *(const llvm::Instruction **)(a3 + 16), (const llvm::DominatorTree *)1, v67))
                  {
                    return v79;
                  }
                  goto LABEL_198;
                }
                v47 = *(_DWORD *)(*(_QWORD *)v11 + 8);
                if ((v47 & 0xFE) == 0x12)
                  v47 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v11 + 16) + 8);
                if (v47 != 269)
                  goto LABEL_130;
                v72 = (uint64_t)v11;
                if ((sub_1C4E776FC(&v72, (uint64_t)v8) & 1) != 0)
                  return v8;
                v72 = (uint64_t)v8;
                if ((sub_1C4E776FC(&v72, (uint64_t)v11) & 1) == 0)
                {
LABEL_130:
                  result = (llvm::ValueHandleBase *)sub_1C4E716EC(29, (uint64_t)v11, (uint64_t)v8, a3, a4);
                  if (result)
                    return result;
                  v46 = *((unsigned __int8 *)v11 + 16);
                  goto LABEL_132;
                }
              }
              return v11;
            }
LABEL_68:
            v24 = v83;
            *(_QWORD *)&v77 = &v81;
            *((_QWORD *)&v77 + 1) = 0;
            v78 = v84;
            v25 = *(unsigned __int8 *)(v83 + 16);
            if (v25 == 5)
            {
              if (*(_WORD *)(v83 + 18) != 15
                || !sub_1C4D8A004((uint64_t)&v77, *(llvm::Constant **)(v83 - 32 * (*(_DWORD *)(v83 + 20) & 0x7FFFFFF))))
              {
                goto LABEL_82;
              }
              v26 = *(_QWORD *)(v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF) + 32);
            }
            else
            {
              if (v25 != 43 || !sub_1C4D89F84((uint64_t)&v77, *(unsigned __int8 **)(v83 - 64)))
                goto LABEL_82;
              v26 = *(_QWORD *)(v24 - 32);
            }
            if (v78 != v26)
              goto LABEL_82;
            goto LABEL_76;
          }
          if (!sub_1C4D9ED34((uint64_t)&v77, *((llvm::Constant **)v8 - 8))
            || (v17 = *((_QWORD *)v8 - 4)) == 0)
          {
LABEL_42:
            v16 = *((unsigned __int8 *)v8 + 16);
            goto LABEL_43;
          }
        }
        v18 = (uint64_t *)*((_QWORD *)&v77 + 1);
        goto LABEL_60;
      }
    }
  }
  return result;
}

llvm::ValueHandleBase *llvm::SimplifyXorInst(llvm *a1, llvm::Constant *a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E661DC(a1, a2, a3, 3, a5, a6);
}

llvm::ValueHandleBase *sub_1C4E661DC(llvm *a1, llvm::Constant *a2, uint64_t a3, int a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  llvm *v8;
  llvm::ValueHandleBase *result;
  llvm *v11;
  unsigned int v12;
  int v13;
  _QWORD *v14;
  llvm::Type *v15;
  uint64_t v16;
  llvm **v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  int v21;
  llvm *v22;
  uint64_t v23;
  llvm **v24;
  uint64_t v25;
  llvm::ValueHandleBase *v26;
  llvm::ValueHandleBase **v27;
  int v28;
  llvm::ValueHandleBase *v29;
  llvm::ValueHandleBase *v30;
  llvm::ValueHandleBase **v31;
  int v32;
  llvm::ValueHandleBase *v33;
  llvm::ValueHandleBase *v34;
  llvm::ValueHandleBase **v35;
  int v36;
  llvm::ValueHandleBase *v37;
  llvm::ValueHandleBase *v38;
  llvm::ValueHandleBase **v39;
  int v40;
  llvm::ValueHandleBase *v41;
  llvm::ValueHandleBase *v42;
  llvm::ValueHandleBase **v43;
  llvm::ValueHandleBase *v44;
  uint64_t v45;
  llvm::ValueHandleBase *v46;
  llvm::ValueHandleBase **v47;
  llvm::ValueHandleBase **v48;
  llvm::ValueHandleBase **v49;
  llvm::ValueHandleBase *v50;

  v8 = a2;
  if (a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
    {
      result = llvm::ConstantFoldBinaryOpOperands((llvm *)0x1E, a1, a2, *(llvm::Constant **)a3, a5, a6);
      v11 = a1;
      if (result)
        return result;
    }
    else
    {
      v11 = a2;
      v8 = a1;
    }
  }
  else
  {
    v11 = a1;
  }
  v12 = *((unsigned __int8 *)v8 + 16);
  if (v12 == 12)
    return v8;
  if (*(_BYTE *)(a3 + 41))
  {
    if ((sub_1C4E7B480((uint64_t)v8) & 1) != 0)
      return v8;
    v12 = *((unsigned __int8 *)v8 + 16);
  }
  if (v12 <= 0x14 && ((llvm::Constant::isNullValue(v8) & 1) != 0 || (sub_1C4E71060((uint64_t)&v47, v8) & 1) != 0))
    return v11;
  if (v11 == v8)
    return (llvm::ValueHandleBase *)llvm::Constant::getNullValue(*(llvm::Constant **)v11, a2);
  v47 = (llvm::ValueHandleBase **)v8;
  v13 = *((unsigned __int8 *)v11 + 16);
  if (v13 == 5)
  {
    if (*((_WORD *)v11 + 9) == 30)
    {
      v16 = *((_DWORD *)v11 + 5) & 0x7FFFFFF;
      v17 = (llvm **)((char *)v11 - 32 * v16);
      if (v8 == *v17)
      {
        if ((sub_1C4D9EED4((uint64_t)&v48, v17[4]) & 1) != 0)
          return llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v15);
        v19 = v47;
        v18 = -(uint64_t)(*((_DWORD *)v11 + 5) & 0x7FFFFFF);
      }
      else
      {
        v18 = -v16;
        v19 = v8;
      }
      v20 = (char *)v11 + 32 * v18;
      if (v19 == *((_QWORD **)v20 + 4) && (sub_1C4D9EED4((uint64_t)&v48, *(llvm::Constant **)v20) & 1) != 0)
        return llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v15);
    }
  }
  else if (v13 == 58)
  {
    v14 = v8;
    if (v8 == *((llvm **)v11 - 8))
    {
      if ((sub_1C4D9ED34((uint64_t)&v48, *((llvm::Constant **)v11 - 4)) & 1) != 0)
        return llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v15);
      v14 = v47;
    }
    if (v14 == *((_QWORD **)v11 - 4) && (sub_1C4D9ED34((uint64_t)&v48, *((llvm::Constant **)v11 - 8)) & 1) != 0)
      return llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v15);
  }
  v44 = v11;
  v21 = *((unsigned __int8 *)v8 + 16);
  if (v21 != 5)
  {
    if (v21 != 58)
      goto LABEL_52;
    v22 = v11;
    if (v11 == *((llvm **)v8 - 8))
    {
      if ((sub_1C4D9ED34((uint64_t)&v45, *((llvm::Constant **)v8 - 4)) & 1) != 0)
        return llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v15);
      v22 = v44;
    }
    if (v22 != *((llvm **)v8 - 4) || (sub_1C4D9ED34((uint64_t)&v45, *((llvm::Constant **)v8 - 8)) & 1) == 0)
      goto LABEL_52;
    return llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v15);
  }
  if (*((_WORD *)v8 + 9) != 30)
    goto LABEL_52;
  v23 = *((_DWORD *)v8 + 5) & 0x7FFFFFF;
  v24 = (llvm **)((char *)v8 - 32 * v23);
  if (v11 == *v24)
  {
    if ((sub_1C4D9EED4((uint64_t)&v45, v24[4]) & 1) != 0)
      return llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v15);
    v26 = v44;
    v25 = -(uint64_t)(*((_DWORD *)v8 + 5) & 0x7FFFFFF);
  }
  else
  {
    v25 = -v23;
    v26 = v11;
  }
  v27 = (llvm::ValueHandleBase **)((char *)v8 + 32 * v25);
  if (v26 == v27[4] && (sub_1C4D9EED4((uint64_t)&v45, *v27) & 1) != 0)
    return llvm::Constant::getAllOnesValue(*(llvm::Constant **)v11, v15);
LABEL_52:
  v44 = 0;
  v47 = &v44;
  v49 = &v50;
  v50 = 0;
  if (!sub_1C4E76FA0(&v47, 28, (uint64_t)v11))
    goto LABEL_62;
  result = v44;
  v28 = *((unsigned __int8 *)v8 + 16);
  if (v28 == 5)
  {
    if (*((_WORD *)v8 + 9) != 29)
      goto LABEL_62;
    v31 = (llvm::ValueHandleBase **)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
    v29 = *v31;
    v30 = v31[4];
  }
  else
  {
    if (v28 != 57)
      goto LABEL_62;
    v29 = (llvm::ValueHandleBase *)*((_QWORD *)v8 - 8);
    v30 = (llvm::ValueHandleBase *)*((_QWORD *)v8 - 4);
  }
  if ((v44 != v29 || v50 != v30) && (v44 != v30 || v50 != v29))
  {
LABEL_62:
    v46 = 0;
    v47 = &v44;
    v48 = &v46;
    v49 = &v50;
    if (sub_1C4E77744(&v47, 29, (uint64_t)v11))
    {
      v32 = *((unsigned __int8 *)v8 + 16);
      if (v32 == 5)
      {
        if (*((_WORD *)v8 + 9) == 28)
        {
          v35 = (llvm::ValueHandleBase **)((char *)v8 - 32 * (*((_DWORD *)v8 + 5) & 0x7FFFFFF));
          v33 = *v35;
          v34 = v35[4];
LABEL_68:
          if (v44 == v33 && v50 == v34 || v44 == v34 && v50 == v33)
          {
            result = v46;
            goto LABEL_74;
          }
        }
      }
      else if (v32 == 56)
      {
        v33 = (llvm::ValueHandleBase *)*((_QWORD *)v8 - 8);
        v34 = (llvm::ValueHandleBase *)*((_QWORD *)v8 - 4);
        goto LABEL_68;
      }
    }
    result = 0;
  }
LABEL_74:
  if (result)
    return result;
  v44 = 0;
  v47 = &v44;
  v49 = &v50;
  v50 = 0;
  if (sub_1C4E76FA0(&v47, 28, (uint64_t)v8))
  {
    result = v44;
    v36 = *((unsigned __int8 *)v11 + 16);
    if (v36 == 5)
    {
      if (*((_WORD *)v11 + 9) != 29)
        goto LABEL_85;
      v39 = (llvm::ValueHandleBase **)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
      v37 = *v39;
      v38 = v39[4];
    }
    else
    {
      if (v36 != 57)
        goto LABEL_85;
      v37 = (llvm::ValueHandleBase *)*((_QWORD *)v11 - 8);
      v38 = (llvm::ValueHandleBase *)*((_QWORD *)v11 - 4);
    }
    if (v44 == v37 && v50 == v38 || v44 == v38 && v50 == v37)
      goto LABEL_97;
  }
LABEL_85:
  v46 = 0;
  v47 = &v44;
  v48 = &v46;
  v49 = &v50;
  if (sub_1C4E77744(&v47, 29, (uint64_t)v8))
  {
    v40 = *((unsigned __int8 *)v11 + 16);
    if (v40 == 5)
    {
      if (*((_WORD *)v11 + 9) != 28)
        goto LABEL_96;
      v43 = (llvm::ValueHandleBase **)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
      v41 = *v43;
      v42 = v43[4];
    }
    else
    {
      if (v40 != 56)
        goto LABEL_96;
      v41 = (llvm::ValueHandleBase *)*((_QWORD *)v11 - 8);
      v42 = (llvm::ValueHandleBase *)*((_QWORD *)v11 - 4);
    }
    if (v44 == v41 && v50 == v42 || v44 == v42 && v50 == v41)
    {
      result = v46;
      goto LABEL_97;
    }
  }
LABEL_96:
  result = 0;
LABEL_97:
  if (!result)
  {
    result = (llvm::ValueHandleBase *)sub_1C4E73A4C((uint64_t)v11, (uint64_t)v8, 30);
    if (!result)
      return (llvm::ValueHandleBase *)sub_1C4E70E2C(0x1Eu, (uint64_t)v11, (uint64_t)v8, a3, a4);
  }
  return result;
}

llvm::Value **llvm::SimplifyICmpInst(uint64_t a1, llvm *a2, llvm::UndefValue *a3, uint64_t a4)
{
  return sub_1C4E66730(a1, a2, a3, a4, 3);
}

llvm::Value **sub_1C4E66730(uint64_t a1, llvm *a2, llvm::UndefValue *a3, uint64_t a4, int a5)
{
  llvm::UndefValue *v11;
  llvm::UndefValue *v12;
  int v13;
  llvm::Type *v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  llvm::Type *v19;
  const llvm::APInt *v20;
  uint64_t v21;
  const llvm::Value *v22;
  llvm *v23;
  const llvm::Value *v24;
  unsigned int isImpliedCondition;
  llvm::Value **False;
  uint64_t **v27;
  uint64_t **v28;
  unsigned int v29;
  int v30;
  int v31;
  uint64_t *v32;
  llvm::Type *v33;
  const llvm::APInt *v34;
  llvm::Value **True;
  llvm::Type *v36;
  llvm::UndefValue *v37;
  llvm::Type *v38;
  const llvm::APInt *v39;
  llvm::Type *v40;
  const llvm::APInt *v41;
  int v42;
  int v43;
  llvm::Type *v44;
  const llvm::APInt *v45;
  llvm::Value **v46;
  _BOOL4 v47;
  llvm::Value **v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  int v56;
  unsigned __int8 **v57;
  llvm::APInt *v58;
  unsigned int v59;
  llvm::APInt *v60;
  _QWORD *v61;
  int v62;
  int64_t v63;
  unint64_t v64;
  unsigned int v65;
  _BOOL4 v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  int v73;
  unsigned __int8 **v74;
  const void **v75;
  unsigned int v76;
  llvm::APInt *v77;
  const void *v78;
  int v79;
  int64_t v80;
  unint64_t v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  _QWORD *v92;
  _QWORD ***v93;
  _QWORD *v94;
  int v95;
  BOOL v96;
  unsigned int v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  int v106;
  unsigned int v107;
  _QWORD *v108;
  _DWORD **v109;
  _QWORD *v110;
  int v111;
  BOOL v112;
  unsigned int v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unsigned int v117;
  BOOL v118;
  unsigned int v119;
  int v120;
  llvm::Constant ***v121;
  llvm::Constant **v122;
  llvm::Type *v123;
  int v124;
  int v125;
  uint64_t v126;
  int v128;
  int v129;
  unsigned int v130;
  llvm::UndefValue *v131;
  llvm::UndefValue *v132;
  llvm::UndefValue *v133;
  int v134;
  llvm::Constant **v135;
  llvm::UndefValue *v136;
  llvm::UndefValue *v137;
  llvm::UndefValue *v138;
  uint64_t v139;
  llvm *v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  unsigned int v144;
  llvm *v145;
  unsigned int v146;
  BOOL v147;
  llvm::UndefValue *v148;
  llvm::UndefValue *v149;
  char v150;
  int v151;
  _BOOL4 v152;
  int v153;
  BOOL v154;
  int v155;
  llvm::UndefValue *v156;
  llvm::Value **NullValue;
  BOOL v158;
  int v159;
  llvm::Value **v160;
  llvm *v161;
  int v162;
  uint64_t v163;
  llvm *v164;
  int v165;
  llvm::APInt *v166;
  _QWORD *v167;
  llvm::APInt **v168;
  uint64_t v169;
  llvm::APInt *v170;
  llvm::APInt *v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  unsigned int v177;
  llvm::UndefValue **v178;
  llvm::UndefValue *v179;
  llvm::UndefValue **v180;
  int v181;
  BOOL v182;
  unsigned int v183;
  llvm::UndefValue *v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  llvm **v192;
  llvm *v193;
  llvm **v194;
  int v195;
  BOOL v196;
  unsigned int v197;
  llvm *v198;
  uint64_t v199;
  int v200;
  uint64_t *v201;
  uint64_t v202;
  llvm::ConstantInt *v203;
  unsigned int v204;
  char v205;
  int v206;
  uint64_t v207;
  llvm::APInt **v208;
  llvm::Constant **v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t *v216;
  uint64_t v217;
  _QWORD *v218;
  llvm::APInt **v219;
  llvm::UndefValue **v220;
  llvm::APInt **v221;
  llvm **v222;
  llvm::APInt *v223;
  unsigned int v224;
  unsigned int v225;
  llvm::APInt *v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unsigned int v231;
  llvm::APInt *v232;
  _BOOL4 v234;
  char v235;
  llvm *v236;
  llvm::UndefValue *v237;
  llvm *v238;
  int v239;
  _DWORD *v240;
  unsigned int v241;
  unsigned int v242;
  BOOL v244;
  llvm::APInt *v245;
  unsigned int v246;
  unsigned int v247;
  int v248;
  uint64_t v249;
  int v250;
  unint64_t v251;
  int8x8_t *v252;
  int8x8_t v253;
  uint8x8_t v254;
  int v255;
  unsigned int v256;
  int v257;
  uint64_t **v258;
  llvm::Type *v259;
  const llvm::APInt *v260;
  llvm::Value **v261;
  unsigned int v262;
  llvm::Type *v263;
  const llvm::APInt *v264;
  uint64_t **v265;
  llvm::APInt *v266;
  llvm::APInt *v267;
  llvm::APInt *v268;
  llvm::APInt *v269;
  uint64_t v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  llvm::APInt *v276;
  llvm::APInt *v277;
  llvm::APInt *v278;
  llvm::APInt *v279;
  uint64_t v280;
  int v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  char v288;
  uint64_t **v289;
  llvm::Type *v290;
  const llvm::APInt *v291;
  llvm::Value **v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  char v296;
  llvm::APInt **v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int v300;
  uint64_t v301;
  unsigned int v302;
  unsigned int v303;
  llvm::APInt **v304;
  int v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  const llvm::DominatorTree *v310;
  unsigned __int16 v311;
  llvm::ConstantInt *v312;
  int v313;
  int v314;
  int v315;
  uint64_t **v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  int v320;
  int v321;
  uint64_t v322;
  int v324;
  uint64_t **v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  int v329;
  int v330;
  uint64_t v331;
  int v332;
  llvm::Value **v333;
  llvm::Value *v334;
  int v335;
  llvm::Value **v336;
  llvm::ConstantInt *v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  llvm *v343;
  llvm *v344;
  llvm *v345;
  llvm::UndefValue *v346;
  llvm::UndefValue *v347;
  llvm *v348;
  unint64_t v349;
  int v350;
  unsigned __int8 v351;
  _QWORD *__s1;
  llvm::Constant *__s1a;
  _BOOL4 __s1b;
  uint64_t **__s1c;
  llvm *__s1d;
  llvm::APInt *v357;
  unsigned int v358;
  llvm::APInt *v359;
  llvm::APInt **v360;
  uint64_t v361;
  _QWORD *v362;
  unsigned int v363;
  llvm::APInt *v364;
  llvm::APInt *v365;
  llvm::APInt **v366;
  uint64_t v367;
  unsigned int v368;
  llvm::APInt *v369;
  llvm::APInt **v370;
  void *__s2;
  unsigned int v372;
  llvm::APInt *v373;
  llvm::APInt *v374;
  llvm::APInt **v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  char v380;
  uint64_t v381;

  v381 = *MEMORY[0x1E0C80C00];
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
  {
    if (!a3 || *((unsigned __int8 *)a3 + 16) >= 0x15u)
      __asm { BR              X10 }
    return (llvm::Value **)llvm::ConstantFoldCompareInstOperands(a1, (uint64_t)a2, (uint64_t)a3, *(llvm::DataLayout **)a4, *(_QWORD *)(a4 + 8));
  }
  sub_1C4774CC4(*(_DWORD **)a2);
  v12 = v11;
  if (*(_BYTE *)(a4 + 41))
  {
    v13 = sub_1C4E7B480((uint64_t)a3);
    if ((a1 & 0xFFFFFFFE) == 0x20)
    {
      if (v13)
        return (llvm::Value **)llvm::UndefValue::get(v12, v14);
    }
  }
  if (a2 == a3 || *(_BYTE *)(a4 + 41) && sub_1C4E7B480((uint64_t)a3))
  {
    v15 = a1 <= 0x29 && ((1 << a1) & 0x2A90000AA00) != 0;
    return llvm::ConstantInt::get(v12, v15, 0);
  }
  sub_1C4774CC4(*(_DWORD **)a2);
  v17 = v16;
  v18 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v18 & 0xFE) == 0x12)
    v18 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  if (v18 == 269)
  {
    if (a3
      && *((unsigned __int8 *)a3 + 16) <= 0x14u
      && ((llvm::Constant::isNullValue(a3) & 1) != 0 || (sub_1C4E71060((uint64_t)&v375, a3) & 1) != 0))
    {
      v21 = (uint64_t)a2;
      switch((int)a1)
      {
        case ' ':
        case '%':
        case '\'':
          goto LABEL_29;
        case '!':
        case '"':
        case '(':
          return (llvm::Value **)v21;
        case '#':
        case ')':
          goto LABEL_39;
        case '$':
        case '&':
          goto LABEL_40;
        default:
          goto LABEL_42;
      }
      return (llvm::Value **)v21;
    }
    if (sub_1C4D89CC8((uint64_t)&v375, a3))
    {
      v21 = (uint64_t)a2;
      switch((int)a1)
      {
        case ' ':
        case '#':
        case ')':
          return (llvm::Value **)v21;
        case '!':
        case '$':
        case '&':
LABEL_29:
          v369 = 0;
          v375 = &v369;
          if (!sub_1C4D9EC28(&v375, 30, (uint64_t)a2))
            goto LABEL_31;
          v21 = (uint64_t)v369;
          if (!v369)
            goto LABEL_31;
          break;
        case '"':
        case '(':
LABEL_40:
          False = llvm::ConstantInt::getFalse(v17, v19, v20);
          goto LABEL_41;
        case '%':
        case '\'':
          goto LABEL_39;
        default:
          goto LABEL_42;
      }
      return (llvm::Value **)v21;
    }
LABEL_31:
    if ((_DWORD)a1 == 39 || (_DWORD)a1 == 37)
    {
      v22 = *(const llvm::Value **)a4;
      v23 = a2;
      v24 = a3;
    }
    else
    {
      if ((_DWORD)a1 != 35)
        goto LABEL_42;
      v22 = *(const llvm::Value **)a4;
      v23 = a3;
      v24 = a2;
    }
    isImpliedCondition = (unsigned __int16)llvm::isImpliedCondition(v23, v24, v22, (const llvm::DataLayout *)1, 0);
    if (isImpliedCondition <= 0x100)
      LOBYTE(isImpliedCondition) = 0;
    if ((_BYTE)isImpliedCondition)
    {
LABEL_39:
      False = llvm::ConstantInt::getTrue(v17, v19, v20);
LABEL_41:
      v21 = (uint64_t)False;
      if (False)
        return (llvm::Value **)v21;
    }
  }
LABEL_42:
  if (a3
    && *((unsigned __int8 *)a3 + 16) <= 0x14u
    && ((llvm::Constant::isNullValue(a3) & 1) != 0 || (sub_1C4E71060((uint64_t)&v375, a3) & 1) != 0))
  {
    sub_1C4774CC4(*(_DWORD **)a2);
    __asm { BR              X10 }
  }
  sub_1C4774CC4(*(_DWORD **)a3);
  v28 = v27;
  v374 = 0;
  v375 = &v374;
  v29 = *((unsigned __int8 *)a2 + 16);
  if (v29 > 0x1B || v29 == 5)
  {
    v30 = v29 > 0x1B ? v29 - 28 : *((unsigned __int16 *)a2 + 9);
    if (v30 == 49)
    {
      v31 = *((_DWORD *)a2 + 5);
      v32 = (v31 & 0x40000000) != 0 ? (uint64_t *)*((_QWORD *)a2 - 1) : (uint64_t *)((char *)a2 - 32 * (v31 & 0x7FFFFFF));
      if (sub_1C4E787F4(&v375, *v32))
      {
        if ((_DWORD)a1 == 40)
        {
          if (*((unsigned __int8 *)a3 + 16) <= 0x14u
            && ((llvm::Constant::isNullValue(a3) & 1) != 0 || (sub_1C4E71060((uint64_t)&v375, a3) & 1) != 0))
          {
            True = llvm::ConstantInt::getFalse(v28, v33, v34);
LABEL_65:
            v21 = (uint64_t)True;
            goto LABEL_179;
          }
        }
        else if ((_DWORD)a1 == 38 && sub_1C4D9ED34((uint64_t)&v375, a3))
        {
          True = llvm::ConstantInt::getTrue(v28, v38, v39);
          goto LABEL_65;
        }
      }
    }
  }
  v373 = 0;
  v375 = &v373;
  v376 = 1;
  v21 = 0;
  if (sub_1C4D89F84((uint64_t)&v375, (unsigned __int8 *)a3))
  {
    llvm::ConstantRange::makeExactICmpRegion(&v375, a1, v373);
    v42 = v376;
    if (v376 >= 0x41)
    {
      v78 = (const void *)v377;
      v349 = v376 + 63;
      __s1 = v375;
      if (memcmp(v375, (const void *)v377, (v349 >> 3) & 0x3FFFFFF8))
        goto LABEL_144;
      v83 = 0;
      v84 = v349 >> 6;
      do
      {
        v118 = v84-- < 1;
        if (v118)
          break;
        v85 = __s1[v84];
        v83 += __clz(v85);
      }
      while (!v85);
      v86 = v42 | 0xFFFFFFC0;
      if ((v42 & 0x3F) == 0)
        v86 = 0;
      if (v83 + v86 != v42)
      {
LABEL_144:
        if (!memcmp(__s1, v78, (v349 >> 3) & 0x3FFFFFF8)
          && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v375) == v42)
        {
          goto LABEL_81;
        }
        goto LABEL_70;
      }
    }
    else if (v377 | (unint64_t)v375)
    {
      if (v375 == (llvm::APInt **)v377
        && (!(_DWORD)v376 || v375 == (llvm::APInt **)(0xFFFFFFFFFFFFFFFFLL >> -(char)v376)))
      {
LABEL_81:
        v48 = llvm::ConstantInt::getTrue(v28, v40, v41);
LABEL_176:
        v21 = (uint64_t)v48;
LABEL_177:
        if (v378 >= 0x41 && v377)
          MEMORY[0x1CAA32F9C](v377, 0x1000C8000313F17);
        if (v376 >= 0x41 && v375)
          MEMORY[0x1CAA32F9C](v375, 0x1000C8000313F17);
        goto LABEL_179;
      }
LABEL_70:
      llvm::computeConstantRange(a2, (const llvm::Value *)((a1 - 38) < 4), 0, 0, 0, *(unsigned __int8 *)(a4 + 40), 0, &v369);
      v43 = (int)v370;
      if (v370 > 0x40)
      {
        if (!memcmp(v369, __s2, (((unint64_t)v370 + 63) >> 3) & 0x3FFFFFF8)
          && llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v369) == v43)
        {
          goto LABEL_84;
        }
      }
      else if (v369 == __s2 && (!(_DWORD)v370 || v369 == (llvm::APInt *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v370)))
      {
        goto LABEL_84;
      }
      if (llvm::ConstantRange::contains((llvm::ConstantRange *)&v375, (const llvm::ConstantRange *)&v369))
      {
        v46 = llvm::ConstantInt::getTrue(v28, v44, v45);
LABEL_78:
        v21 = (uint64_t)v46;
        goto LABEL_163;
      }
      llvm::ConstantRange::inverse((llvm::ConstantRange *)&v375, (uint64_t)&v365);
      v47 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v365, (const llvm::ConstantRange *)&v369);
      if (v368 >= 0x41 && v367)
        MEMORY[0x1CAA32F9C](v367, 0x1000C8000313F17);
      if (v366 >= 0x41 && v365)
        MEMORY[0x1CAA32F9C](v365, 0x1000C8000313F17);
      if (v47)
      {
        v46 = llvm::ConstantInt::getFalse(v28, v36, v37);
        goto LABEL_78;
      }
LABEL_84:
      v364 = 0;
      if ((a1 & 0xFFFFFFFE) != 0x20)
        goto LABEL_162;
      v366 = &v364;
      v367 = 1;
      v49 = *((unsigned __int8 *)a2 + 16);
      if (v49 < 0x1C)
      {
        if (v49 != 5)
        {
          v50 = 0;
          v360 = &v364;
          v361 = 1;
          goto LABEL_120;
        }
        v50 = 0;
        v53 = *((unsigned __int16 *)a2 + 9);
        HIDWORD(v55) = v53 - 13;
        LODWORD(v55) = v53 - 13;
        v54 = v55 >> 1;
        if (v54 > 6 || ((1 << v54) & 0x47) == 0)
        {
LABEL_114:
          v49 = *((unsigned __int8 *)a2 + 16);
          v360 = &v364;
          v361 = 1;
          if (v49 >= 0x1C)
          {
            HIDWORD(v68) = v49 - 41;
            LODWORD(v68) = v49 - 41;
            v67 = v68 >> 1;
            if (v67 > 6 || ((1 << v67) & 0x47) == 0)
              goto LABEL_135;
            v70 = v49 - 28;
LABEL_123:
            if (v70 == 17 && (*((_BYTE *)a2 + 17) & 4) != 0)
            {
              v73 = *((_DWORD *)a2 + 5);
              v74 = (v73 & 0x40000000) != 0
                  ? (unsigned __int8 **)*((_QWORD *)a2 - 1)
                  : (unsigned __int8 **)((char *)a2 - 32 * (v73 & 0x7FFFFFF));
              if (sub_1C4D89F84((uint64_t)&v360, v74[4]))
              {
                v75 = (const void **)v364;
                v76 = *((_DWORD *)v364 + 2);
                v77 = v364;
                if (v76 >= 0x41)
                {
                  if (v76 - llvm::APInt::countLeadingZerosSlowCase(v364) > 0x40)
                    goto LABEL_133;
                  v77 = (llvm::APInt *)*v75;
                }
                if (*(_QWORD *)v77)
                {
LABEL_133:
                  llvm::APInt::srem(v373, v75, (llvm::APInt *)&v357);
                  if (v358 >= 0x41)
                  {
                    v79 = 0;
                    v80 = ((unint64_t)v358 + 63) >> 6;
                    do
                    {
                      v118 = v80-- < 1;
                      if (v118)
                        break;
                      v81 = *((_QWORD *)v357 + v80);
                      v79 += __clz(v81);
                    }
                    while (!v81);
                    v82 = v358 | 0xFFFFFFC0;
                    if ((v358 & 0x3F) == 0)
                      v82 = 0;
                    if (v358 - v79 - v82 > 0x40)
                    {
                      if (!v357)
                      {
                        if ((v50 & 1) != 0)
                          goto LABEL_112;
LABEL_141:
                        v46 = llvm::ConstantInt::get((llvm::ConstantInt *)v28, (_DWORD)a1 == 33, 0);
                        goto LABEL_78;
                      }
                      v66 = 1;
                    }
                    else
                    {
                      v66 = *(_QWORD *)v357 != 0;
                    }
                    MEMORY[0x1CAA32F9C](v357, 0x1000C8000313F17);
                  }
                  else
                  {
                    v66 = v357 != 0;
                  }
                  if ((v50 & 1) != 0)
                    goto LABEL_137;
                  if (!v66)
                    goto LABEL_162;
                  goto LABEL_141;
                }
              }
            }
LABEL_135:
            if ((v50 & 1) == 0)
              goto LABEL_162;
            LOBYTE(v66) = 0;
            goto LABEL_137;
          }
LABEL_120:
          if (v49 != 5)
            goto LABEL_135;
          v70 = *((unsigned __int16 *)a2 + 9);
          HIDWORD(v72) = v70 - 13;
          LODWORD(v72) = v70 - 13;
          v71 = v72 >> 1;
          if (v71 > 6 || ((1 << v71) & 0x47) == 0)
            goto LABEL_135;
          goto LABEL_123;
        }
      }
      else
      {
        v50 = 0;
        HIDWORD(v52) = v49 - 41;
        LODWORD(v52) = v49 - 41;
        v51 = v52 >> 1;
        if (v51 > 6 || ((1 << v51) & 0x47) == 0)
          goto LABEL_114;
        v53 = v49 - 28;
      }
      if (v53 == 17 && (*((_BYTE *)a2 + 17) & 2) != 0)
      {
        v56 = *((_DWORD *)a2 + 5);
        v57 = (v56 & 0x40000000) != 0
            ? (unsigned __int8 **)*((_QWORD *)a2 - 1)
            : (unsigned __int8 **)((char *)a2 - 32 * (v56 & 0x7FFFFFF));
        if (sub_1C4D89F84((uint64_t)&v366, v57[4]))
        {
          v58 = v364;
          v59 = *((_DWORD *)v364 + 2);
          v60 = v364;
          if (v59 >= 0x41)
          {
            if (v59 - llvm::APInt::countLeadingZerosSlowCase(v364) > 0x40)
            {
LABEL_103:
              llvm::APInt::urem(v373, v58, (llvm::APInt *)&v362);
              v61 = v362;
              if (v363 >= 0x41)
              {
                v62 = 0;
                v63 = ((unint64_t)v363 + 63) >> 6;
                do
                {
                  v118 = v63-- < 1;
                  if (v118)
                    break;
                  v64 = v362[v63];
                  v62 += __clz(v64);
                }
                while (!v64);
                v65 = v363 | 0xFFFFFFC0;
                if ((v363 & 0x3F) == 0)
                  v65 = 0;
                if (v363 - v62 - v65 > 0x40)
                  goto LABEL_112;
                v61 = (_QWORD *)*v362;
              }
              if (v61)
              {
LABEL_112:
                LOBYTE(v66) = 1;
LABEL_137:
                if (v363 >= 0x41 && v362)
                  MEMORY[0x1CAA32F9C](v362, 0x1000C8000313F17);
                if (v66)
                  goto LABEL_141;
LABEL_162:
                v21 = 0;
LABEL_163:
                if (v372 >= 0x41 && __s2)
                  MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
                if (v370 >= 0x41 && v369)
                  MEMORY[0x1CAA32F9C](v369, 0x1000C8000313F17);
                goto LABEL_177;
              }
              v50 = 1;
              goto LABEL_114;
            }
            v60 = *(llvm::APInt **)v58;
          }
          if (*(_QWORD *)v60)
            goto LABEL_103;
        }
      }
      v50 = 0;
      goto LABEL_114;
    }
    v48 = llvm::ConstantInt::getFalse(v28, v40, v41);
    goto LABEL_176;
  }
LABEL_179:
  if (v21)
    return (llvm::Value **)v21;
  if (*((unsigned __int8 *)a3 + 16) < 0x1Cu
    || *((unsigned __int8 *)a2 + 16) < 0x1Cu
    || !*(_BYTE *)(a4 + 40)
    || (*((_BYTE *)a3 + 23) & 0x20) == 0)
  {
    goto LABEL_219;
  }
  v87 = ***(_QWORD ***)a3;
  v375 = (llvm::APInt **)a3;
  v88 = *(_DWORD *)(v87 + 2496);
  v21 = a3 >> 4;
  if (!v88)
  {
    v167 = 0;
LABEL_366:
    v92 = sub_1C541AB24(v87 + 2480, (uint64_t)&v375, (uint64_t *)&v375, v167);
    v168 = v375;
    v92[3] = 0;
    v92[4] = 0;
    *v92 = v168;
    v92[1] = v92 + 3;
    v92[2] = 0x100000000;
    goto LABEL_195;
  }
  v89 = *(_QWORD *)(v87 + 2480);
  v90 = v88 - 1;
  v91 = v90 & (v21 ^ (a3 >> 9));
  v92 = (_QWORD *)(v89 + 40 * v91);
  v93 = (_QWORD ***)*v92;
  if ((llvm::UndefValue *)*v92 != a3)
  {
    v94 = 0;
    v95 = 1;
    while (v93 != (_QWORD ***)-4096)
    {
      if (v94)
        v96 = 0;
      else
        v96 = v93 == (_QWORD ***)-8192;
      if (v96)
        v94 = v92;
      v97 = v91 + v95++;
      v91 = v97 & v90;
      v92 = (_QWORD *)(v89 + 40 * v91);
      v93 = (_QWORD ***)*v92;
      if ((llvm::UndefValue *)*v92 == a3)
        goto LABEL_195;
    }
    if (v94)
      v167 = v94;
    else
      v167 = v92;
    goto LABEL_366;
  }
LABEL_195:
  v98 = *((unsigned int *)v92 + 4);
  if (!(_DWORD)v98)
    goto LABEL_219;
  v99 = (_QWORD *)(v92[1] + 8);
  v100 = 16 * v98;
  while (*((_DWORD *)v99 - 2) != 4)
  {
    v99 += 2;
    v100 -= 16;
    if (!v100)
      goto LABEL_219;
  }
  v101 = !*v99 || *(_BYTE *)(a4 + 40) == 0;
  if (v101 || (*((_BYTE *)a2 + 23) & 0x20) == 0)
    goto LABEL_219;
  v102 = ***(_QWORD ***)a2;
  v375 = (llvm::APInt **)a2;
  v103 = *(_DWORD *)(v102 + 2496);
  v104 = a2 >> 4;
  if (!v103)
  {
    v218 = 0;
LABEL_449:
    v108 = sub_1C541AB24(v102 + 2480, (uint64_t)&v375, (uint64_t *)&v375, v218);
    v219 = v375;
    v108[3] = 0;
    v108[4] = 0;
    *v108 = v219;
    v108[1] = v108 + 3;
    v108[2] = 0x100000000;
    goto LABEL_215;
  }
  v105 = *(_QWORD *)(v102 + 2480);
  v106 = v103 - 1;
  v107 = v106 & (v104 ^ (a2 >> 9));
  v108 = (_QWORD *)(v105 + 40 * v107);
  v109 = (_DWORD **)*v108;
  if ((llvm *)*v108 != a2)
  {
    v110 = 0;
    v111 = 1;
    while (v109 != (_DWORD **)-4096)
    {
      if (v110)
        v112 = 0;
      else
        v112 = v109 == (_DWORD **)-8192;
      if (v112)
        v110 = v108;
      v113 = v107 + v111++;
      v107 = v113 & v106;
      v108 = (_QWORD *)(v105 + 40 * v107);
      v109 = (_DWORD **)*v108;
      if ((llvm *)*v108 == a2)
        goto LABEL_215;
    }
    if (v110)
      v218 = v110;
    else
      v218 = v108;
    goto LABEL_449;
  }
LABEL_215:
  v114 = *((unsigned int *)v108 + 4);
  if ((_DWORD)v114)
  {
    v115 = (_QWORD *)(v108[1] + 8);
    v116 = 16 * v114;
    while (*((_DWORD *)v115 - 2) != 4)
    {
      v115 += 2;
      v116 -= 16;
      if (!v116)
        goto LABEL_219;
    }
    if (*v115)
    {
      v173 = ***(_QWORD ***)a3;
      v375 = (llvm::APInt **)a3;
      v174 = *(_DWORD *)(v173 + 2496);
      if (v174)
      {
        v175 = *(_QWORD *)(v173 + 2480);
        v176 = v174 - 1;
        v177 = v176 & (v21 ^ (a3 >> 9));
        v178 = (llvm::UndefValue **)(v175 + 40 * v177);
        v179 = *v178;
        if (*v178 == a3)
          goto LABEL_398;
        v180 = 0;
        v181 = 1;
        while (v179 != (llvm::UndefValue *)-4096)
        {
          if (v180)
            v182 = 0;
          else
            v182 = v179 == (llvm::UndefValue *)-8192;
          if (v182)
            v180 = v178;
          v183 = v177 + v181++;
          v177 = v183 & v176;
          v178 = (llvm::UndefValue **)(v175 + 40 * v177);
          v179 = *v178;
          if (*v178 == a3)
            goto LABEL_398;
        }
        if (v180)
          v220 = v180;
        else
          v220 = v178;
      }
      else
      {
        v220 = 0;
      }
      v178 = (llvm::UndefValue **)sub_1C541AB24(v173 + 2480, (uint64_t)&v375, (uint64_t *)&v375, v220);
      v221 = v375;
      v178[3] = 0;
      v178[4] = 0;
      *v178 = (llvm::UndefValue *)v221;
      v178[1] = (llvm::UndefValue *)(v178 + 3);
      v178[2] = (llvm::UndefValue *)0x100000000;
LABEL_398:
      v184 = v178[1];
      if (*(_DWORD *)v184 != 4)
      {
        v185 = 16 * *((unsigned int *)v178 + 4) - 16;
        do
        {
          v186 = *((_DWORD *)v184 + 4);
          v184 = (llvm::UndefValue *)((char *)v184 + 16);
          v185 -= 16;
        }
        while (v186 != 4);
      }
      llvm::getConstantRangeFromMetadata(*((_QWORD *)v184 + 1), (uint64_t)&v375);
      v187 = ***(_QWORD ***)a2;
      v369 = a2;
      v188 = *(_DWORD *)(v187 + 2496);
      if (v188)
      {
        v189 = *(_QWORD *)(v187 + 2480);
        v190 = v188 - 1;
        v191 = v190 & (v104 ^ (a2 >> 9));
        v192 = (llvm **)(v189 + 40 * v191);
        v193 = *v192;
        if (*v192 == a2)
          goto LABEL_411;
        v194 = 0;
        v195 = 1;
        while (v193 != (llvm *)-4096)
        {
          if (v194)
            v196 = 0;
          else
            v196 = v193 == (llvm *)-8192;
          if (v196)
            v194 = v192;
          v197 = v191 + v195++;
          v191 = v197 & v190;
          v192 = (llvm **)(v189 + 40 * v191);
          v193 = *v192;
          if (*v192 == a2)
            goto LABEL_411;
        }
        if (v194)
          v222 = v194;
        else
          v222 = v192;
      }
      else
      {
        v222 = 0;
      }
      v192 = (llvm **)sub_1C541AB24(v187 + 2480, (uint64_t)&v369, (uint64_t *)&v369, v222);
      v223 = v369;
      v192[3] = 0;
      v192[4] = 0;
      *v192 = v223;
      v192[1] = (llvm *)(v192 + 3);
      v192[2] = (llvm *)0x100000000;
LABEL_411:
      v198 = v192[1];
      if (*(_DWORD *)v198 != 4)
      {
        v199 = 16 * *((unsigned int *)v192 + 4) - 16;
        do
        {
          v200 = *((_DWORD *)v198 + 4);
          v198 = (llvm *)((char *)v198 + 16);
          v199 -= 16;
        }
        while (v200 != 4);
      }
      llvm::getConstantRangeFromMetadata(*((_QWORD *)v198 + 1), (uint64_t)&v369);
      if ((llvm::ConstantRange::icmp((int)&v369, a1, (int)&v375) & 1) != 0)
      {
        v201 = **(uint64_t ***)a3;
        v202 = *v201;
        v21 = *(_QWORD *)(*v201 + 1560);
        if (!v21)
        {
          v203 = *(llvm::ConstantInt **)(v202 + 1888);
          v204 = *(_DWORD *)(v202 + 1896);
          LODWORD(v366) = v204 >> 8;
          if (v204 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v365, 1, 0);
          }
          else
          {
            if (v204 <= 0xFF)
              v205 = 0;
            else
              v205 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v204);
            v365 = (llvm::APInt *)(v205 & 1);
          }
          v21 = (uint64_t)llvm::ConstantInt::get(v203, (llvm::LLVMContext *)&v365, v37);
          if (v366 >= 0x41 && v365)
            MEMORY[0x1CAA32F9C](v365, 0x1000C8000313F17);
          v206 = 0;
          *(_QWORD *)(v202 + 1560) = v21;
          goto LABEL_451;
        }
      }
      else
      {
        if (!llvm::ConstantRange::icmp((int)&v369, dword_1C85F3C44[(int)a1], (int)&v375))
        {
          v206 = 1;
          goto LABEL_451;
        }
        v216 = **(uint64_t ***)a3;
        v217 = *v216;
        v21 = *(_QWORD *)(*v216 + 1568);
        if (!v21)
        {
          v337 = *(llvm::ConstantInt **)(v217 + 1888);
          LODWORD(v366) = *(_DWORD *)(v217 + 1896) >> 8;
          if (v366 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v365, 0, 0);
          else
            v365 = 0;
          v21 = (uint64_t)llvm::ConstantInt::get(v337, (llvm::LLVMContext *)&v365, v37);
          if (v366 >= 0x41 && v365)
            MEMORY[0x1CAA32F9C](v365, 0x1000C8000313F17);
          v206 = 0;
          *(_QWORD *)(v217 + 1568) = v21;
LABEL_451:
          if (v372 >= 0x41 && __s2)
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
          if (v370 >= 0x41 && v369)
            MEMORY[0x1CAA32F9C](v369, 0x1000C8000313F17);
          if (v378 >= 0x41 && v377)
            MEMORY[0x1CAA32F9C](v377, 0x1000C8000313F17);
          if (v376 >= 0x41 && v375)
            MEMORY[0x1CAA32F9C](v375, 0x1000C8000313F17);
          if (!v206)
            return (llvm::Value **)v21;
          goto LABEL_219;
        }
      }
      v206 = 0;
      goto LABEL_451;
    }
  }
LABEL_219:
  v117 = *((unsigned __int8 *)a2 + 16);
  v118 = v117 < 0x1C || v117 - 66 > 0xC;
  if (v118)
    goto LABEL_275;
  v119 = *((unsigned __int8 *)a3 + 16);
  if (v119 >= 0x15 && (v119 < 0x1C || v119 - 66 > 0xC))
    goto LABEL_275;
  v120 = *((_DWORD *)a2 + 5);
  if ((v120 & 0x40000000) != 0)
    v121 = (llvm::Constant ***)*((_QWORD *)a2 - 1);
  else
    v121 = (llvm::Constant ***)((char *)a2 - 32 * (v120 & 0x7FFFFFF));
  v122 = *v121;
  __s1a = **v121;
  v123 = *(llvm::Type **)a2;
  if (a5 && v117 == 75)
  {
    sub_1C4768AD0(*(_QWORD *)a4, (uint64_t)__s1a);
    v125 = v124;
    if (v126 == llvm::Type::getPrimitiveSizeInBits(v123) && v125 == (_DWORD)v36)
    {
      v130 = *((unsigned __int8 *)a3 + 16);
      if (v130 <= 0x14)
      {
        v37 = sub_1C537D3B8((llvm *)0x30, (uint64_t)a3, __s1a, 0);
      }
      else
      {
        if (v130 != 75)
          goto LABEL_235;
        v37 = (llvm::UndefValue *)*((_QWORD *)a3 - 4);
        if (*(llvm::Constant **)v37 != __s1a)
          goto LABEL_235;
      }
      v21 = sub_1C4E66730(a1, v122, v37, a4, (a5 - 1));
      if (v21)
        return (llvm::Value **)v21;
    }
  }
LABEL_235:
  v128 = *((unsigned __int8 *)a2 + 16);
  if (v128 == 67)
  {
    v129 = *((unsigned __int8 *)a3 + 16);
    switch(v129)
    {
      case 16:
        v131 = sub_1C537D3B8((llvm *)0x26, (uint64_t)a3, __s1a, 0);
        v132 = sub_1C537D3B8((llvm *)0x27, (uint64_t)v131, v123, 0);
        v133 = v132;
        if (a5)
        {
          if (v132 == a3)
          {
            v21 = sub_1C4E66730(dword_1C85F3BA8[(int)a1 - 32], v122, v131, a4, (a5 - 1));
            if (v21)
              return (llvm::Value **)v21;
          }
        }
        if (v133 != a3)
          __asm { BR              X10 }
        break;
      case 68:
        if (v122 == *((llvm::Constant ***)a3 - 4))
        {
          if ((a1 & 0xFFFFFFFD) == 0x25)
            return llvm::ConstantInt::getTrue((uint64_t **)v12, v36, v37);
          if ((_DWORD)a1 == 40 || (_DWORD)a1 == 34)
            return llvm::ConstantInt::getFalse((uint64_t **)v12, v36, v37);
        }
        break;
      case 67:
        if (!a5)
          goto LABEL_275;
        v37 = (llvm::UndefValue *)*((_QWORD *)a3 - 4);
        if (__s1a == *(llvm::Constant **)v37)
        {
          v21 = sub_1C4E66730(dword_1C85F3BA8[(int)a1 - 32], v122, v37, a4, (a5 - 1));
          if (v21)
            return (llvm::Value **)v21;
        }
        break;
    }
    v128 = *((unsigned __int8 *)a2 + 16);
  }
  if (v128 == 68)
  {
    v134 = *((unsigned __int8 *)a3 + 16);
    switch(v134)
    {
      case 16:
        v136 = sub_1C537D3B8((llvm *)0x26, (uint64_t)a3, __s1a, 0);
        v137 = sub_1C537D3B8((llvm *)0x28, (uint64_t)v136, v123, 0);
        v138 = v137;
        if (a5)
        {
          if (v137 == a3)
          {
            v21 = sub_1C4E66730(a1, v122, v136, a4, (a5 - 1));
            if (v21)
              return (llvm::Value **)v21;
          }
        }
        if (v138 != a3)
          __asm { BR              X10 }
        break;
      case 67:
        if (v122 == *((llvm::Constant ***)a3 - 4))
        {
          if ((_DWORD)a1 == 41 || (_DWORD)a1 == 35)
            return llvm::ConstantInt::getTrue((uint64_t **)v12, v36, v37);
          if ((a1 & 0xFFFFFFFD) == 0x24)
            return llvm::ConstantInt::getFalse((uint64_t **)v12, v36, v37);
        }
        break;
      case 68:
        if (a5)
        {
          v135 = (llvm::Constant **)*((_QWORD *)a3 - 4);
          if (__s1a == *v135)
          {
            v21 = sub_1C4E66730(a1, v122, v135, a4, (a5 - 1));
            if (v21)
              return (llvm::Value **)v21;
          }
        }
        break;
    }
  }
LABEL_275:
  v350 = a1 & 0xFFFFFFFE;
  if ((a1 & 0xFFFFFFFE) == 0x20
    && (!a3
     || *((unsigned __int8 *)a3 + 16) > 0x14u
     || (llvm::Constant::isNullValue(a3) & 1) == 0 && (sub_1C4E71060((uint64_t)&v375, a3) & 1) == 0))
  {
    v139 = *(_QWORD *)(a4 + 24);
    v140 = *(llvm **)(a4 + 32);
    v141 = *(_QWORD *)(a4 + 16);
    v142 = *(_BYTE *)(a4 + 40);
    if (!v140 || !*((_QWORD *)v140 + 5))
    {
      if (!a3 || *((unsigned __int8 *)a3 + 16) < 0x1Cu || (v140 = a3, !*((_QWORD *)a3 + 5)))
      {
        if (*((unsigned __int8 *)a2 + 16) < 0x1Cu || (v140 = a2, !*((_QWORD *)a2 + 5)))
          v140 = 0;
      }
    }
    v375 = *(llvm::APInt ***)a4;
    v376 = v139;
    v377 = (unint64_t)v140;
    v378 = v141;
    v379 = 0;
    v380 = v142;
    if (sub_1C4F851B8((uint64_t)a2, a3, 0, (uint64_t)&v375))
    {
      if ((_DWORD)a1 == 33)
        return llvm::ConstantInt::getTrue((uint64_t **)v12, v36, v37);
      return llvm::ConstantInt::getFalse((uint64_t **)v12, v36, v37);
    }
  }
  v144 = *((unsigned __int8 *)a2 + 16);
  __s1b = v144 > 0x1B && v144 - 41 < 0x12;
  if (v144 > 0x1B && v144 - 41 < 0x12)
    v145 = a2;
  else
    v145 = 0;
  v348 = v145;
  v146 = *((unsigned __int8 *)a3 + 16);
  v147 = v146 > 0x1B && v146 - 41 < 0x12;
  if (v147)
    v148 = a3;
  else
    v148 = 0;
  v347 = v148;
  if (!a5)
    goto LABEL_505;
  if ((v144 <= 0x1B || v144 - 41 >= 0x12) && (v146 <= 0x1B || v146 - 41 >= 0x12))
  {
    v151 = 0;
    __s1b = 0;
    goto LABEL_511;
  }
  if (v144 != 41)
  {
    v346 = 0;
    v149 = 0;
    v152 = 0;
    goto LABEL_306;
  }
  v346 = (llvm::UndefValue *)*((_QWORD *)a2 - 8);
  v149 = (llvm::UndefValue *)*((_QWORD *)a2 - 4);
  if (v350 == 32)
  {
    if (v146 != 41)
    {
      v344 = 0;
      v345 = 0;
      v153 = 0;
      v152 = 1;
      goto LABEL_317;
    }
    v344 = (llvm *)*((_QWORD *)a3 - 4);
    v345 = (llvm *)*((_QWORD *)a3 - 8);
    v152 = 1;
    goto LABEL_312;
  }
  if ((a1 - 34) <= 3 && *(_BYTE *)(a4 + 40))
  {
    v150 = 2;
LABEL_305:
    v152 = (*((_BYTE *)a2 + 17) & v150) != 0;
    goto LABEL_306;
  }
  v152 = 0;
  if ((a1 - 38) <= 3 && *(_BYTE *)(a4 + 40))
  {
    v150 = 4;
    goto LABEL_305;
  }
LABEL_306:
  if (v146 != 41)
  {
    v344 = 0;
    v345 = 0;
    v153 = 0;
    goto LABEL_317;
  }
  v344 = (llvm *)*((_QWORD *)a3 - 4);
  v345 = (llvm *)*((_QWORD *)a3 - 8);
  if (v350 == 32)
  {
LABEL_312:
    v153 = 1;
    goto LABEL_317;
  }
  if ((a1 - 34) <= 3 && *(_BYTE *)(a4 + 40))
  {
    v153 = (*((unsigned __int8 *)a3 + 17) >> 1) & 1;
  }
  else
  {
    v153 = 0;
    if ((a1 - 38) <= 3 && *(_BYTE *)(a4 + 40))
      v153 = (*((unsigned __int8 *)a3 + 17) >> 2) & 1;
  }
LABEL_317:
  v343 = v149;
  v154 = v149 == a3 || v346 == a3;
  v155 = !v152;
  if (v154 && (v155 & 1) == 0)
  {
    v156 = v346 == a3 ? v149 : v346;
    NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)a3, v36);
    v21 = sub_1C4E66730(a1, v156, NullValue, a4, (a5 - 1));
    if (v21)
      return (llvm::Value **)v21;
  }
  v158 = v344 == a2 || v345 == a2;
  v159 = v153 ^ 1;
  if (v158 && (v159 & 1) == 0)
  {
    v160 = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v36);
    v161 = v345 == a2 ? v344 : v345;
    v21 = sub_1C4E66730(a1, v160, v161, a4, (a5 - 1));
    if (v21)
      return (llvm::Value **)v21;
  }
  if ((v155 | v159) != 1)
    goto LABEL_436;
  if ((_DWORD)a1 != 40)
    goto LABEL_480;
  v162 = sub_1C4E798EC((uint64_t)a3);
  v163 = (uint64_t)(v162 ? a3 : a2);
  if (!sub_1C4E798EC(v163))
    goto LABEL_480;
  if (v162)
    v164 = a2;
  else
    v164 = a3;
  v365 = 0;
  v359 = 0;
  v357 = 0;
  v375 = &v365;
  v376 = (uint64_t)&v359;
  v377 = 0;
  v165 = *((unsigned __int8 *)v164 + 16);
  if (v165 == 5)
  {
    if (*((_WORD *)v164 + 9) != 13)
      goto LABEL_480;
    v169 = *((_DWORD *)v164 + 5) & 0x7FFFFFF;
    if (*((_QWORD *)v164 - 4 * v169))
    {
      v365 = (llvm::APInt *)*((_QWORD *)v164 - 4 * v169);
      if ((sub_1C4D8A004((uint64_t)&v376, ((llvm::Constant **)v164 - 4 * (*((_DWORD *)v164 + 5) & 0x7FFFFFF))[4]) & 1) != 0)goto LABEL_373;
      v169 = *((_DWORD *)v164 + 5) & 0x7FFFFFF;
    }
    v170 = (llvm::APInt *)((_QWORD *)v164 - 4 * v169)[4];
    if (!v170)
      goto LABEL_480;
    *v375 = v170;
    if (!sub_1C4D8A004((uint64_t)&v376, *((llvm::Constant **)v164 - 4 * (*((_DWORD *)v164 + 5) & 0x7FFFFFF))))goto LABEL_480;
  }
  else
  {
    if (v165 != 41)
      goto LABEL_480;
    if (!*((_QWORD *)v164 - 8)
      || (v365 = (llvm::APInt *)*((_QWORD *)v164 - 8),
          (sub_1C4D89F84((uint64_t)&v376, *((unsigned __int8 **)v164 - 4)) & 1) == 0))
    {
      v166 = (llvm::APInt *)*((_QWORD *)v164 - 4);
      if (!v166)
        goto LABEL_480;
      *v375 = v166;
      if ((sub_1C4D89F84((uint64_t)&v376, *((unsigned __int8 **)v164 - 8)) & 1) == 0)
        goto LABEL_480;
    }
  }
LABEL_373:
  v171 = v365;
  v369 = v365;
  v370 = &v357;
  __s2 = 0;
  v172 = *(unsigned __int8 *)(v163 + 16);
  if (v172 == 5)
  {
    if (*(_WORD *)(v163 + 18) != 13)
      goto LABEL_480;
    v207 = *(_DWORD *)(v163 + 20) & 0x7FFFFFF;
    v208 = (llvm::APInt **)(v163 - 32 * v207);
    if (v365 == *v208)
    {
      if ((sub_1C4D8A004((uint64_t)&v370, v208[4]) & 1) != 0)
        goto LABEL_429;
      v171 = v369;
      v207 = *(_DWORD *)(v163 + 20) & 0x7FFFFFF;
    }
    v209 = (llvm::Constant **)(v163 - 32 * v207);
    if (v171 != v209[4] || (sub_1C4D8A004((uint64_t)&v370, *v209) & 1) == 0)
      goto LABEL_480;
  }
  else
  {
    if (v172 != 41)
      goto LABEL_480;
    if (v365 == *(llvm::APInt **)(v163 - 64))
    {
      if ((sub_1C4D89F84((uint64_t)&v370, *(unsigned __int8 **)(v163 - 32)) & 1) != 0)
        goto LABEL_429;
      v171 = v369;
    }
    if (v171 != *(llvm::APInt **)(v163 - 32)
      || (sub_1C4D89F84((uint64_t)&v370, *(unsigned __int8 **)(v163 - 64)) & 1) == 0)
    {
      goto LABEL_480;
    }
  }
LABEL_429:
  v210 = *((unsigned int *)v359 + 2);
  if (v210 <= 0x40)
  {
    v211 = *(_QWORD *)v359;
    v212 = *(_QWORD *)v357;
    if ((uint64_t)(*(_QWORD *)v359 << -(char)v210) >> -(char)v210 >= (uint64_t)(*(_QWORD *)v357 << -(char)v210) >> -(char)v210)
      goto LABEL_433;
    v213 = (1 << (v210 - 1)) & v211;
LABEL_432:
    if (v213)
      goto LABEL_433;
LABEL_436:
    v215 = 1;
    goto LABEL_481;
  }
  v211 = *(_QWORD *)v359;
  v213 = *(_QWORD *)(*(_QWORD *)v359 + 8 * ((v210 - 1) >> 6)) & (1 << (v210 - 1));
  v224 = *((_DWORD *)v357 + 2);
  v225 = v224 - 1;
  v212 = *(_QWORD *)v357;
  if (v224 >= 0x41)
    v226 = (llvm::APInt *)(*(_QWORD *)v357 + 8 * (v225 >> 6));
  else
    v226 = v357;
  if ((((v213 != 0) ^ (*(_QWORD *)v226 >> v225)) & 1) == 0)
  {
    v227 = ((unint64_t)(v210 + 63) >> 3) & 0x3FFFFFF8;
    while (v227)
    {
      v228 = *(_QWORD *)(v211 + v227 - 8);
      v229 = *(_QWORD *)(v212 + v227 - 8);
      v227 -= 8;
      if (v228 != v229)
      {
        if (v228 <= v229)
          goto LABEL_432;
        break;
      }
    }
  }
LABEL_433:
  v214 = *((unsigned int *)v357 + 2);
  if (v214 > 0x40)
  {
    v230 = *(_QWORD *)(v212 + 8 * ((v214 - 1) >> 6)) & (1 << (v214 - 1));
    v231 = v210 - 1;
    if (v210 >= 0x41)
      v232 = (llvm::APInt *)(v211 + 8 * (v231 >> 6));
    else
      v232 = v359;
    if ((v230 != 0) == ((*(_QWORD *)v232 >> v231) & 1))
    {
      v338 = v211 - 8;
      v339 = ((unint64_t)(v214 + 63) >> 3) & 0x3FFFFFF8;
      v340 = v212 - 8;
      while (v339)
      {
        v341 = *(_QWORD *)(v340 + v339);
        v342 = *(_QWORD *)(v338 + v339);
        v339 -= 8;
        if (v341 != v342)
        {
          if (v341 <= v342)
            goto LABEL_435;
          goto LABEL_480;
        }
      }
      goto LABEL_480;
    }
    if (v230)
    {
LABEL_435:
      v215 = sub_1C49591DC(v359) ^ 1;
      goto LABEL_481;
    }
  }
  else if (v212 << -(char)v214 >> -(char)v214 < v211 << -(char)v214 >> -(char)v214)
  {
    goto LABEL_435;
  }
LABEL_480:
  v215 = 0;
LABEL_481:
  if (v346 && v345)
  {
    v234 = v346 == v345 || v346 == v344;
    v235 = (v343 != v345) & ~v234;
    if (v343 == v344)
      v235 = 0;
    if ((v235 & 1) == 0 && ((v215 ^ 1) & 1) == 0)
    {
      if (v343 == v345)
        v236 = v344;
      else
        v236 = v345;
      if (v346 == v344)
        v236 = v345;
      v237 = v234 ? v343 : v346;
      v238 = v346 == v345 ? v344 : v236;
      v21 = sub_1C4E66730(a1, v237, v238, a4, (a5 - 1));
      if (v21)
        return (llvm::Value **)v21;
    }
  }
LABEL_505:
  if (__s1b)
  {
    v21 = (uint64_t)sub_1C4E78860(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)a4);
    if (v21)
      return (llvm::Value **)v21;
  }
  if (v147)
  {
    v21 = (uint64_t)sub_1C4E78860(dword_1C85F3CEC[(int)a1], (uint64_t)a3, (uint64_t)a2, (uint64_t *)a4);
    if (v21)
      return (llvm::Value **)v21;
    v151 = 1;
  }
  else
  {
    v151 = 0;
  }
LABEL_511:
  if ((a1 - 34) < 4)
    goto LABEL_536;
  LOWORD(v375) = 0;
  v239 = *((unsigned __int8 *)a2 + 16);
  if (v239 == 5)
  {
    if (*((_WORD *)a2 + 9) != 15
      || !sub_1C4E71060((uint64_t)&v375, *((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))))
    {
      goto LABEL_536;
    }
    v240 = (_DWORD *)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  }
  else
  {
    if (v239 != 43 || !sub_1C4D8AC3C((uint64_t)&v375, *((llvm::Constant **)a2 - 8)))
      goto LABEL_536;
    v240 = (_DWORD *)*((_QWORD *)a2 - 4);
  }
  v241 = *((unsigned __int8 *)v240 + 16);
  v242 = v241 - 28;
  v244 = v241 < 0x1C && v241 != 5;
  if (v240 && !v244)
  {
    if (v241 <= 0x1B)
      v242 = *((unsigned __int16 *)v240 + 9);
    if (v242 == 39)
    {
      v369 = 0;
      v375 = &v369;
      v376 = 0;
      if (sub_1C4D89F84((uint64_t)&v375, (unsigned __int8 *)a3))
      {
        if (sub_1C49591DC(v369))
        {
          switch((int)a1)
          {
            case ' ':
            case '\'':
              goto LABEL_573;
            case '!':
            case '(':
              goto LABEL_686;
            default:
              break;
          }
        }
        v245 = v369;
        v246 = *((_DWORD *)v369 + 2);
        v247 = v246 - 1;
        if (v246 >= 0x41)
          v245 = (llvm::APInt *)(*(_QWORD *)v369 + 8 * (v247 >> 6));
        if (((*(_QWORD *)v245 >> v247) & 1) == 0)
        {
          if ((_DWORD)a1 == 38)
            goto LABEL_573;
          if ((_DWORD)a1 == 41)
          {
LABEL_686:
            sub_1C4774CC4(*(_DWORD **)a3);
            v261 = llvm::ConstantInt::getTrue(v289, v290, v291);
            goto LABEL_687;
          }
        }
      }
    }
  }
LABEL_536:
  v369 = 0;
  v248 = *((unsigned __int8 *)a2 + 16);
  if (v248 == 5)
  {
    if (*((_WORD *)a2 + 9) != 25
      || !sub_1C4E79B78((uint64_t)&v365, *((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))))
    {
      goto LABEL_564;
    }
  }
  else if (v248 != 53 || !sub_1C4E79980((uint64_t)&v365, *((llvm::Constant **)a2 - 8)))
  {
    goto LABEL_564;
  }
  v375 = &v369;
  v376 = 1;
  if (sub_1C4D89F84((uint64_t)&v375, (unsigned __int8 *)a3))
  {
    v249 = *((unsigned int *)v369 + 2);
    if (v249 > 0x40)
    {
      v250 = 0;
      v251 = (unint64_t)(v249 + 63) >> 6;
      v252 = *(int8x8_t **)v369;
      do
      {
        v253 = *v252++;
        v254 = (uint8x8_t)vcnt_s8(v253);
        v254.i16[0] = vaddlv_u8(v254);
        v250 += v254.i32[0];
        --v251;
      }
      while (v251);
      if (v250 == 1)
        goto LABEL_564;
    }
    else if (*(_QWORD *)v369 && (*(_QWORD *)v369 & (*(_QWORD *)v369 - 1)) == 0)
    {
      goto LABEL_564;
    }
    if (*(_BYTE *)(a4 + 40) && (*((_BYTE *)v348 + 17) & 6) != 0)
      goto LABEL_562;
    v255 = *((unsigned __int8 *)a2 + 16);
    if (v255 == 5)
    {
      if (*((_WORD *)a2 + 9) == 25
        && (sub_1C4D89E3C((uint64_t)&v375, *((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) & 1) != 0)
      {
LABEL_562:
        if ((_DWORD)a1 == 33)
          goto LABEL_686;
        if ((_DWORD)a1 == 32)
        {
LABEL_573:
          sub_1C4774CC4(*(_DWORD **)a3);
          v261 = llvm::ConstantInt::getFalse(v258, v259, v260);
LABEL_687:
          v21 = (uint64_t)v261;
          goto LABEL_579;
        }
        goto LABEL_564;
      }
    }
    else if (v255 == 53 && (sub_1C4D89CC8((uint64_t)&v375, *((llvm::Constant **)a2 - 8)) & 1) != 0)
    {
      goto LABEL_562;
    }
    v256 = *((_DWORD *)v369 + 2);
    if (v256 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v369) == v256)
        goto LABEL_564;
    }
    else if (!*(_QWORD *)v369)
    {
      goto LABEL_564;
    }
    goto LABEL_562;
  }
LABEL_564:
  v257 = *((unsigned __int8 *)a2 + 16);
  if (v257 == 5)
  {
    if (*((_WORD *)a2 + 9) != 25
      || !sub_1C4D89E3C((uint64_t)&v375, *((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))))
    {
      goto LABEL_574;
    }
  }
  else if (v257 != 53 || (sub_1C4D89CC8((uint64_t)&v375, *((llvm::Constant **)a2 - 8)) & 1) == 0)
  {
    goto LABEL_574;
  }
  if (sub_1C4E7119C((uint64_t)&v365, (unsigned __int8 *)a3))
  {
    if ((_DWORD)a1 == 37)
      goto LABEL_686;
    if ((_DWORD)a1 == 34)
      goto LABEL_573;
  }
LABEL_574:
  if (a5)
  {
    if ((v151 & __s1b) != 0)
    {
      v262 = *((unsigned __int8 *)v348 + 16);
      if (v262 == *((unsigned __int8 *)v347 + 16) && *((_QWORD *)v348 - 4) == *((_QWORD *)v347 - 4))
      {
        switch(*((_BYTE *)v348 + 16))
        {
          case '/':
          case '6':
            if ((a1 - 38) < 4
              || !*(_BYTE *)(a4 + 40)
              || v262 > 0x36
              || ((1 << v262) & 0x41800000000000) == 0
              || (*((_BYTE *)v348 + 17) & 2) == 0
              || ((1 << v262) & 0x41800000000000) == 0)
            {
              break;
            }
            goto LABEL_650;
          case '0':
            if (v350 != 32)
              break;
            goto LABEL_648;
          case '5':
            LOBYTE(v282) = *(_BYTE *)(a4 + 40);
            if ((_BYTE)v282
              && ((*((_BYTE *)v348 + 17) & 2) != 0
                ? (v282 = (*((unsigned __int8 *)v347 + 17) >> 1) & 1)
                : (LOBYTE(v282) = 0),
                  (*((_BYTE *)v348 + 17) & 4) != 0))
            {
              v287 = (*((unsigned __int8 *)v347 + 17) >> 2) & 1;
            }
            else
            {
              v287 = 0;
            }
            if ((v282 & 1) == 0 && !v287)
              break;
            v288 = v287 ^ 1;
            if ((a1 - 42) <= 0xFFFFFFFB)
              v288 = 0;
            if ((v288 & 1) != 0)
              break;
            goto LABEL_682;
          case '7':
LABEL_648:
            if (!*(_BYTE *)(a4 + 40) || (*((_BYTE *)v348 + 17) & 2) == 0)
              break;
LABEL_650:
            if ((*((_BYTE *)v347 + 17) & 2) == 0)
              break;
LABEL_682:
            v21 = sub_1C4E66730(a1, *((_QWORD *)v348 - 8), *((_QWORD *)v347 - 8), a4, (a5 - 1));
            if (!v21)
              break;
            goto LABEL_579;
          default:
            break;
        }
      }
    }
  }
  v21 = 0;
LABEL_579:
  if (v21)
    return (llvm::Value **)v21;
  sub_1C4774CC4(*(_DWORD **)a2);
  v365 = 0;
  v359 = 0;
  v375 = &v365;
  v376 = (uint64_t)&v359;
  __s1c = v265;
  if (sub_1C4E79DC8(&v375, (uint64_t)a2) && ((v266 = v365, v267 = v359, v365 == a3) || v359 == a3))
  {
    v271 = 0;
    if (v365 == a3)
    {
      v270 = 39;
      v266 = v359;
      v267 = a3;
    }
    else
    {
      v365 = v359;
      v359 = v266;
      v270 = 39;
    }
  }
  else
  {
    v375 = &v365;
    v376 = (uint64_t)&v359;
    if (sub_1C4E79DC8(&v375, (uint64_t)a3))
    {
      v268 = v365;
      if (v365 == a2 || v359 == a2)
      {
        if (v365 != a2)
        {
          v365 = v359;
          v359 = v268;
        }
        __asm { BR              X12 }
      }
    }
    v375 = &v365;
    v376 = (uint64_t)&v359;
    if (sub_1C4E79EE4(&v375, (uint64_t)a2))
    {
      v269 = v365;
      if (v365 == a3 || v359 == a3)
      {
        if (v365 != a3)
        {
          v365 = v359;
          v359 = v269;
        }
        __asm { BR              X12 }
      }
    }
    v375 = &v365;
    v376 = (uint64_t)&v359;
    if (!sub_1C4E79EE4(&v375, (uint64_t)a3))
      goto LABEL_625;
    v266 = v365;
    v267 = v359;
    if (v365 != a2 && v359 != a2)
      goto LABEL_625;
    if (v365 == a2)
    {
      v270 = 41;
      v271 = 1;
      v266 = v359;
      v267 = a2;
    }
    else
    {
      v365 = v359;
      v359 = v266;
      v270 = 41;
      v271 = 1;
    }
  }
  v272 = v270;
  switch((int)a1)
  {
    case ' ':
    case ')':
      v143 = sub_1C4E79D4C((uint64_t)a2, v270, (uint64_t)v267, (uint64_t)v266);
      if (v143)
        return (llvm::Value **)v143;
      v21 = sub_1C4E79D4C((uint64_t)a3, v272, (uint64_t)v267, (uint64_t)v266);
      if (v21)
        return (llvm::Value **)v21;
      if (!a5)
        goto LABEL_625;
      v273 = (a5 - 1);
      v274 = v272;
      break;
    case '!':
    case '&':
      if (v271)
        v275 = 38;
      else
        v275 = 40;
      v143 = sub_1C4E79D4C((uint64_t)a2, v275, (uint64_t)v267, (uint64_t)v266);
      if (v143)
        return (llvm::Value **)v143;
      v21 = sub_1C4E79D4C((uint64_t)a3, v275, (uint64_t)v267, (uint64_t)v266);
      if (v21)
        return (llvm::Value **)v21;
      if (!a5)
        goto LABEL_625;
      v273 = (a5 - 1);
      v274 = v275;
      break;
    case '\'':
      goto LABEL_705;
    case '(':
      goto LABEL_706;
    default:
      goto LABEL_625;
  }
  v21 = sub_1C4E66730(v274, v267, v266, a4, v273);
  if (v21)
    return (llvm::Value **)v21;
LABEL_625:
  v375 = &v365;
  v376 = (uint64_t)&v359;
  if (sub_1C4E7A018(&v375, (uint64_t)a2) && ((v276 = v365, v277 = v359, v365 == a3) || v359 == a3))
  {
    v281 = 0;
    if (v365 == a3)
    {
      v280 = 35;
      v276 = v359;
      v277 = a3;
    }
    else
    {
      v365 = v359;
      v359 = v276;
      v280 = 35;
    }
  }
  else
  {
    v375 = &v365;
    v376 = (uint64_t)&v359;
    if (sub_1C4E7A018(&v375, (uint64_t)a3))
    {
      v278 = v365;
      if (v365 == a2 || v359 == a2)
      {
        if (v365 != a2)
        {
          v365 = v359;
          v359 = v278;
        }
        __asm { BR              X12 }
      }
    }
    v375 = &v365;
    v376 = (uint64_t)&v359;
    if (sub_1C4E7A140(&v375, (uint64_t)a2))
    {
      v279 = v365;
      if (v365 == a3 || v359 == a3)
      {
        if (v365 != a3)
        {
          v365 = v359;
          v359 = v279;
        }
        __asm { BR              X12 }
      }
    }
    v375 = &v365;
    v376 = (uint64_t)&v359;
    if (!sub_1C4E7A140(&v375, (uint64_t)a3))
      goto LABEL_670;
    v276 = v365;
    v277 = v359;
    if (v365 != a2 && v359 != a2)
      goto LABEL_670;
    if (v365 == a2)
    {
      v280 = 37;
      v281 = 1;
      v276 = v359;
      v277 = a2;
    }
    else
    {
      v365 = v359;
      v359 = v276;
      v280 = 37;
      v281 = 1;
    }
  }
  v283 = v280;
  switch((int)a1)
  {
    case ' ':
    case '%':
      v21 = sub_1C4E79D4C((uint64_t)a2, v280, (uint64_t)v277, (uint64_t)v276);
      if (v21)
        return (llvm::Value **)v21;
      v21 = sub_1C4E79D4C((uint64_t)a3, v283, (uint64_t)v277, (uint64_t)v276);
      if (v21)
        return (llvm::Value **)v21;
      if (!a5)
        goto LABEL_670;
      v284 = (a5 - 1);
      v285 = v283;
      break;
    case '!':
    case '"':
      if (v281)
        v286 = 34;
      else
        v286 = 36;
      v21 = sub_1C4E79D4C((uint64_t)a2, v286, (uint64_t)v277, (uint64_t)v276);
      if (v21)
        return (llvm::Value **)v21;
      v21 = sub_1C4E79D4C((uint64_t)a3, v286, (uint64_t)v277, (uint64_t)v276);
      if (v21)
        return (llvm::Value **)v21;
      if (!a5)
        goto LABEL_670;
      v284 = (a5 - 1);
      v285 = v286;
      break;
    case '#':
      goto LABEL_705;
    case '$':
      goto LABEL_706;
    default:
      goto LABEL_670;
  }
  v21 = sub_1C4E66730(v285, v277, v276, a4, v284);
  if (v21)
    return (llvm::Value **)v21;
LABEL_670:
  if (sub_1C4E7A268((uint64_t)&v375, (uint64_t)a2) || sub_1C4E7A324((uint64_t)&v369, (uint64_t)a2))
    __asm { BR              X10 }
  v357 = 0;
  v374 = 0;
  v375 = &v365;
  v376 = (uint64_t)&v359;
  if (sub_1C4E79DC8(&v375, (uint64_t)a2))
  {
    v369 = (llvm::APInt *)&v357;
    v370 = &v374;
    if (sub_1C4E79EE4((_QWORD **)&v369, (uint64_t)a3))
    {
      if (v365 == v357 || v365 == v374 || v359 == v357 || v359 == v374)
      {
        if ((_DWORD)a1 != 40)
        {
          if ((_DWORD)a1 != 39)
            goto LABEL_702;
          goto LABEL_705;
        }
LABEL_706:
        v292 = llvm::ConstantInt::getFalse(__s1c, v263, v264);
        goto LABEL_707;
      }
    }
  }
  v375 = &v365;
  v376 = (uint64_t)&v359;
  if (!sub_1C4E7A018(&v375, (uint64_t)a2))
    goto LABEL_702;
  v369 = (llvm::APInt *)&v357;
  v370 = &v374;
  if (!sub_1C4E7A140((_QWORD **)&v369, (uint64_t)a3)
    || v365 != v357 && v365 != v374 && v359 != v357 && v359 != v374)
  {
    goto LABEL_702;
  }
  if ((_DWORD)a1 == 36)
    goto LABEL_706;
  if ((_DWORD)a1 == 35)
  {
LABEL_705:
    v292 = llvm::ConstantInt::getTrue(__s1c, v263, v264);
LABEL_707:
    v21 = (uint64_t)v292;
    goto LABEL_708;
  }
LABEL_702:
  v21 = 0;
LABEL_708:
  if (v21)
    return (llvm::Value **)v21;
  if (!*(_QWORD *)(a4 + 24))
    goto LABEL_733;
  v293 = *(_QWORD *)(a4 + 32);
  if (!v293 || !*(_QWORD *)(v293 + 40))
    goto LABEL_733;
  v294 = 0;
  v295 = 0;
  v375 = (llvm::APInt **)a2;
  v376 = (uint64_t)a3;
  while (1)
  {
    v296 = v294;
    v297 = (&v375)[v295];
    v298 = *(_QWORD *)(a4 + 24);
    if (!*(_BYTE *)(v298 + 184))
      llvm::AssumptionCache::scanFunction(*(llvm::AssumptionCache **)(a4 + 24));
    v299 = *(_QWORD *)(v298 + 160);
    v300 = *(_DWORD *)(v298 + 176);
    if (v300)
    {
      v302 = v300 - 1;
      v303 = (v300 - 1) & ((v297 >> 4) ^ (v297 >> 9));
      v301 = v299 + 88 * v303;
      v304 = *(llvm::APInt ***)(v301 + 24);
      if (v304 == v297)
        goto LABEL_717;
      v305 = 1;
      while (v304 != (llvm::APInt **)-4096)
      {
        v306 = v303 + v305++;
        v303 = v306 & v302;
        v301 = v299 + 88 * (v306 & v302);
        v304 = *(llvm::APInt ***)(v301 + 24);
        if (v304 == v297)
          goto LABEL_717;
      }
    }
    v301 = v299 + 88 * v300;
LABEL_717:
    if (v301 != v299 + 88 * v300)
    {
      v307 = *(unsigned int *)(v301 + 48);
      if ((_DWORD)v307)
        break;
    }
LABEL_718:
    v294 = 1;
    v295 = 1;
    if ((v296 & 1) != 0)
      goto LABEL_733;
  }
  v308 = 32 * v307;
  v309 = *(_QWORD *)(v301 + 40) + 16;
  while (1)
  {
    if (*(_QWORD *)v309)
    {
      __s1d = *(llvm **)v309;
      v311 = llvm::isImpliedCondition(*(uint64_t **)(*(_QWORD *)v309 - 32 * (*(_DWORD *)(*(_QWORD *)v309 + 20) & 0x7FFFFFF)), a1, (uint64_t)a2, (uint64_t)a3, *(const llvm::DataLayout **)a4, 1, 0);
      v351 = v311;
      if (v311 >= 0x100u
        && (llvm::isValidAssumeForContext(__s1d, *(const llvm::Instruction **)(a4 + 32), *(const llvm::Instruction **)(a4 + 16), v310) & 1) != 0)
      {
        break;
      }
    }
    v309 += 32;
    v308 -= 32;
    if (!v308)
      goto LABEL_718;
  }
  sub_1C4774CC4(*(_DWORD **)a2);
  v21 = (uint64_t)llvm::ConstantInt::get(v312, v351, 0);
  if (v21)
    return (llvm::Value **)v21;
LABEL_733:
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15)
  {
    v21 = (uint64_t)sub_1C4E778CC(a1, a2, a3, a4);
    if (v21)
      return (llvm::Value **)v21;
  }
  v313 = *((unsigned __int8 *)a2 + 16);
  if (v313 == 75)
    goto LABEL_738;
  if (v313 != 5)
  {
LABEL_750:
    if (v313 == 85)
      goto LABEL_752;
    goto LABEL_751;
  }
  if (*((_WORD *)a2 + 9) != 47)
  {
    v313 = 5;
LABEL_751:
    if (*((_BYTE *)a3 + 16) != 85)
    {
LABEL_754:
      if (v313 != 83 && *((_BYTE *)a3 + 16) != 83)
        return 0;
      v21 = sub_1C4E785F4(a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
      if (!v21)
        return 0;
      return (llvm::Value **)v21;
    }
LABEL_752:
    v21 = (uint64_t)sub_1C4E78354(a1, a2, a3, a4, a5);
    if (v21)
      return (llvm::Value **)v21;
    v313 = *((unsigned __int8 *)a2 + 16);
    goto LABEL_754;
  }
LABEL_738:
  v314 = *((unsigned __int8 *)a3 + 16);
  if (v314 != 75 && (v314 != 5 || *((_WORD *)a3 + 9) != 47))
    goto LABEL_749;
  v315 = *((_DWORD *)a2 + 5);
  v316 = (v315 & 0x40000000) != 0 ? (uint64_t **)*((_QWORD *)a2 - 1) : (uint64_t **)((char *)a2 - 32 * (v315 & 0x7FFFFFF));
  sub_1C4768AD0(*(_QWORD *)a4, **v316);
  v318 = v317;
  v320 = v319;
  sub_1C4768AD0(*(_QWORD *)a4, *(_QWORD *)a2);
  if (v318 != v322 || v320 != v321)
    goto LABEL_749;
  v324 = *((_DWORD *)a3 + 5);
  v325 = (v324 & 0x40000000) != 0 ? (uint64_t **)*((_QWORD *)a3 - 1) : (uint64_t **)((char *)a3 - 32 * (v324 & 0x7FFFFFF));
  sub_1C4768AD0(*(_QWORD *)a4, **v325);
  v327 = v326;
  v329 = v328;
  sub_1C4768AD0(*(_QWORD *)a4, *(_QWORD *)a3);
  if (v327 != v331 || v329 != v330)
    goto LABEL_749;
  v332 = *((_DWORD *)a2 + 5);
  v333 = (v332 & 0x40000000) != 0
       ? (llvm::Value **)*((_QWORD *)a2 - 1)
       : (llvm::Value **)((char *)a2 - 32 * (v332 & 0x7FFFFFF));
  v334 = *v333;
  v335 = *((_DWORD *)a3 + 5);
  v336 = (v335 & 0x40000000) != 0
       ? (llvm::Value **)*((_QWORD *)a3 - 1)
       : (llvm::Value **)((char *)a3 - 32 * (v335 & 0x7FFFFFF));
  v21 = (uint64_t)sub_1C4E778CC(a1, v334, *v336, a4);
  if (!v21)
  {
LABEL_749:
    v313 = *((unsigned __int8 *)a2 + 16);
    goto LABEL_750;
  }
  return (llvm::Value **)v21;
}

llvm::Value **llvm::SimplifyFCmpInst(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, char a4, uint64_t a5)
{
  return sub_1C4E69950(a1, a2, a3, a4, a5, 3);
}

llvm::Value **sub_1C4E69950(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, char a4, uint64_t a5, uint64_t a6)
{
  llvm::Value **result;
  uint64_t **v13;
  llvm::Type *v14;
  const llvm::APInt *v15;
  llvm::ConstantInt *v16;
  llvm::Type *v17;
  const llvm::APInt *v18;
  uint64_t v19;
  void *v20;
  char v21;
  llvm::detail::DoubleAPFloat *v22;
  const llvm::detail::DoubleAPFloat *v23;
  int v24;
  llvm::detail::DoubleAPFloat *v25;
  const llvm::detail::DoubleAPFloat *v26;
  int v27;
  int v28;
  _BYTE v29[12];
  int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD v40[4];

  if (a2 && a2[16] <= 0x14u)
  {
    if (!a3 || a3[16] >= 0x15u)
      __asm { BR              X10 }
    return (llvm::Value **)llvm::ConstantFoldCompareInstOperands(a1, (uint64_t)a2, (uint64_t)a3, *(llvm::DataLayout **)a5, *(_QWORD *)(a5 + 8));
  }
  sub_1C4774CC4(*(_DWORD **)a2);
  v16 = (llvm::ConstantInt *)v13;
  if ((_DWORD)a1 == 15)
    return llvm::ConstantInt::getTrue(v13, v14, v15);
  if (!(_DWORD)a1)
    return llvm::ConstantInt::getFalse(v13, v14, v15);
  if ((a1 - 7) <= 1
    && ((a4 & 2) != 0
     || llvm::isKnownNeverNaN((uint64_t)a2, *(uint64_t **)(a5 + 8), 0)
     && llvm::isKnownNeverNaN((uint64_t)a3, *(uint64_t **)(a5 + 8), 0)))
  {
    return llvm::ConstantInt::get(v16, (_DWORD)a1 == 7, 0);
  }
  if (sub_1C4E7A4A8((uint64_t)&v33, (llvm::Constant *)a3))
    return llvm::ConstantInt::get(v16, (a1 - 8) < 7, 0);
  if (a2[16] == 12 || a3[16] == 12)
    return (llvm::Value **)llvm::PoisonValue::get(v16, v17);
  if (*(_BYTE *)(a5 + 41)
    && ((sub_1C4E7B480((uint64_t)a2) & 1) != 0 || *(_BYTE *)(a5 + 41) && sub_1C4E7B480((uint64_t)a3)))
  {
    return llvm::ConstantInt::get(v16, (a1 - 8) < 7, 0);
  }
  if (a2 == a3 && a1 <= 0x29)
  {
    if (((1 << a1) & 0x2A90000AA00) != 0)
      return llvm::ConstantInt::getTrue((uint64_t **)v16, v17, v18);
    if (((1 << a1) & 0x15600000055) != 0)
      return llvm::ConstantInt::getFalse((uint64_t **)v16, v17, v18);
  }
  v39 = 0;
  v33 = (uint64_t)&v39;
  v34 = 0;
  if (!sub_1C4E7A604((uint64_t)&v33, a3))
    goto LABEL_63;
  v19 = v39;
  v20 = *(void **)(v39 + 8);
  if (v20 == &unk_1C866F1C0)
    v21 = *(_BYTE *)(*(_QWORD *)(v39 + 16) + 28);
  else
    v21 = *(_BYTE *)(v39 + 28);
  if ((v21 & 7) == 0)
  {
    if ((v21 & 8) != 0)
    {
      if ((_DWORD)a1 == 11)
        return llvm::ConstantInt::getTrue((uint64_t **)v16, v17, v18);
      if ((_DWORD)a1 == 4)
        return llvm::ConstantInt::getFalse((uint64_t **)v16, v17, v18);
    }
    else
    {
      if ((_DWORD)a1 == 13)
        return llvm::ConstantInt::getTrue((uint64_t **)v16, v17, v18);
      if ((_DWORD)a1 == 2)
        return llvm::ConstantInt::getFalse((uint64_t **)v16, v17, v18);
    }
    if (v20 == &unk_1C866F1C0)
      v19 = *(_QWORD *)(v39 + 16);
    v21 = *(_BYTE *)(v19 + 28);
    if ((v21 & 8) == 0)
      goto LABEL_55;
    goto LABEL_36;
  }
  if ((v21 & 8) != 0)
  {
LABEL_36:
    if ((v21 & 7) != 3 && a1 <= 0xE)
    {
      if (((1 << a1) & 0x32) != 0)
      {
        if (sub_1C4F876C8(a2, *(uint64_t **)(a5 + 8), 0, 0))
          return llvm::ConstantInt::getFalse((uint64_t **)v16, v17, v18);
      }
      else if (((1 << a1) & 0x4C00) != 0 && sub_1C4F876C8(a2, *(uint64_t **)(a5 + 8), 0, 0))
      {
        return llvm::ConstantInt::getTrue((uint64_t **)v16, v17, v18);
      }
    }
  }
LABEL_55:
  v37 = 0;
  v38 = 0;
  *(_DWORD *)v29 = 202;
  *(_QWORD *)&v29[4] = 0;
  v33 = 202;
  LODWORD(v34) = 0;
  v35 = 1;
  v36 = &v38;
  if (sub_1C4E7A684(&v33, (uint64_t)a2))
  {
    v22 = (llvm::detail::DoubleAPFloat *)(v38 + 8);
    v23 = (const llvm::detail::DoubleAPFloat *)(v39 + 8);
    if (*(_UNKNOWN **)(v38 + 8) == &unk_1C866F1C0)
    {
      if (!llvm::detail::DoubleAPFloat::compare(v22, v23))
        goto LABEL_62;
    }
    else
    {
      llvm::detail::IEEEFloat::compare(v22, v23);
      if (!v24)
        goto LABEL_62;
    }
  }
  v40[0] = 193;
  *(_QWORD *)&v40[1] = 0;
  *(_QWORD *)v29 = 193;
  *(_DWORD *)&v29[8] = 0;
  v30 = 1;
  v31 = &v38;
  v32 = 0;
  if (sub_1C4E7A684(v29, (uint64_t)a2))
  {
    v25 = (llvm::detail::DoubleAPFloat *)(v38 + 8);
    v26 = (const llvm::detail::DoubleAPFloat *)(v39 + 8);
    if (*(_UNKNOWN **)(v38 + 8) == &unk_1C866F1C0)
      v27 = llvm::detail::DoubleAPFloat::compare(v25, v26);
    else
      llvm::detail::IEEEFloat::compare(v25, v26);
    if (v27 == 2)
LABEL_62:
      __asm { BR              X11 }
  }
LABEL_63:
  if (sub_1C4E5C310((uint64_t)&v33, (llvm::Constant *)a3))
  {
    switch((int)a1)
    {
      case 3:
      case 12:
        if ((a4 & 2) == 0 && !llvm::isKnownNeverNaN((uint64_t)a2, *(uint64_t **)(a5 + 8), 0)
          || !sub_1C4F876C8(a2, *(uint64_t **)(a5 + 8), 0, 0))
        {
          break;
        }
        if ((_DWORD)a1 != 3)
          return llvm::ConstantInt::getFalse((uint64_t **)v16, v17, v18);
        return llvm::ConstantInt::getTrue((uint64_t **)v16, v17, v18);
      case 4:
      case 11:
        if (!sub_1C4F876C8(a2, *(uint64_t **)(a5 + 8), 0, 0))
          break;
        if ((_DWORD)a1 != 11)
          return llvm::ConstantInt::getFalse((uint64_t **)v16, v17, v18);
        return llvm::ConstantInt::getTrue((uint64_t **)v16, v17, v18);
      default:
        break;
    }
  }
  v28 = a2[16];
  if (v28 == 85 || a3[16] == 85)
  {
    result = (llvm::Value **)sub_1C4E78354(a1, a2, a3, a5, a6);
    if (result)
      return result;
    v28 = a2[16];
  }
  if (v28 != 83 && a3[16] != 83)
    return 0;
  result = (llvm::Value **)sub_1C4E785F4(a1, (uint64_t)a2, (uint64_t)a3, a5, a6);
  if (!result)
    return 0;
  return result;
}

unsigned __int8 *llvm::simplifyWithOpReplaced(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_1C4E69F48(a1, a2, a3, a4, a5, 3);
}

unsigned __int8 *sub_1C4E69F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  unsigned __int8 *v8;
  int v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  llvm::Type *v19;
  const llvm::DataLayout *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  unsigned __int8 *v33;
  BOOL v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v40;
  llvm::Type **v41;
  unsigned __int8 *v42;
  unsigned __int8 *Zero;
  unsigned __int8 *v44;
  llvm::ConstantExpr *v45;
  void *v46;
  int v47[2];
  _BYTE v48[64];
  void *v49;
  uint64_t v50;
  _QWORD v51[9];

  v51[8] = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
    return (unsigned __int8 *)a3;
  if (*(unsigned __int8 *)(a2 + 16) < 0x15u)
    return 0;
  v8 = 0;
  if (a1 && *(unsigned __int8 *)(a1 + 16) >= 0x1Cu)
  {
    v14 = *(_DWORD *)(a1 + 20);
    if ((v14 & 0x40000000) != 0)
    {
      v16 = *(char **)(a1 - 8);
      v15 = v14 & 0x7FFFFFF;
      if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) != 0)
      {
LABEL_10:
        v17 = 32 * v15;
        v18 = v16;
        while (*(_QWORD *)v18 != a2)
        {
          v18 += 32;
          v17 -= 32;
          if (!v17)
          {
            v18 = &v16[32 * v15];
            break;
          }
        }
LABEL_16:
        if (v15 == (v18 - v16) >> 5)
          return 0;
        v49 = v51;
        v50 = 0x800000000;
        sub_1C4848C0C((unsigned int *)&v49, v15, 0);
        v21 = *(_DWORD *)(a1 + 20);
        if ((v21 & 0x40000000) != 0)
        {
          v23 = *(uint64_t **)(a1 - 8);
          v22 = v21 & 0x7FFFFFF;
        }
        else
        {
          v22 = v21 & 0x7FFFFFF;
          v23 = (uint64_t *)(a1 - 32 * v22);
        }
        if (v22)
        {
          v24 = v49;
          v25 = 32 * v22;
          do
          {
            v27 = *v23;
            v23 += 4;
            v26 = v27;
            if (v27 == a2)
              v26 = a3;
            *v24++ = v26;
            v25 -= 32;
          }
          while (v25);
        }
        if ((a5 & 1) != 0)
        {
          if (!a6)
            goto LABEL_48;
          v28 = *(unsigned __int8 *)(a1 + 16);
          if ((v28 - 59) >= 0xFFFFFFEE)
          {
            v29 = sub_1C4E6D628(v28 - 28);
          }
          else if ((v28 - 83) >= 0xFFFFFFFE)
          {
            v29 = (uint64_t)sub_1C4E6D894(*(_WORD *)(a1 + 18) & 0x3F, *(unsigned __int8 **)v49, *((unsigned __int8 **)v49 + 1), a4, (a6 - 1));
          }
          else
          {
            if (v28 != 85)
            {
              if (v28 == 62)
              {
                v29 = (uint64_t)sub_1C4E6B244(*(llvm::GetElementPtrInst **)(a1 + 64), *(unsigned __int8 **)v49, (llvm::Value *)((char *)v49 + 8), v50 - 1, (*(unsigned __int8 *)(a1 + 17) >> 1) & 1, a4);
                goto LABEL_78;
              }
LABEL_48:
              v46 = v48;
              *(_QWORD *)v47 = 0x800000000;
              if ((_DWORD)v50)
              {
                v35 = 0;
                v36 = (char *)v49;
                v37 = 8 * v50;
                do
                {
                  v38 = *(_QWORD *)v36;
                  if (!*(_QWORD *)v36 || *(unsigned __int8 *)(*(_QWORD *)v36 + 16) > 0x14u)
                    goto LABEL_59;
                  if (v35 >= v47[1])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v35 + 1, 8);
                    v35 = v47[0];
                  }
                  *((_QWORD *)v46 + v35) = v38;
                  v35 = ++v47[0];
                  v36 += 8;
                  v37 -= 8;
                }
                while (v37);
              }
              if ((a5 & 1) == 0 && (sub_1C4F8B92C((llvm::Operator *)a1, 1, 1) & 1) != 0)
              {
LABEL_59:
                v8 = 0;
                goto LABEL_75;
              }
              v40 = *(unsigned __int8 *)(a1 + 16);
              if ((v40 - 83) < 0xFFFFFFFE)
              {
                if (v40 == 60)
                {
                  v41 = (llvm::Type **)v46;
                  if ((*(_WORD *)(a1 + 18) & 1) == 0)
                  {
                    v42 = (unsigned __int8 *)llvm::ConstantFoldLoadFromConstPtr(*(llvm **)v46, *(llvm::Constant **)a1, *(llvm::Type **)a4, v20);
LABEL_74:
                    v8 = v42;
LABEL_75:
                    if (v46 != v48)
                      free(v46);
                    goto LABEL_90;
                  }
                }
                else
                {
                  v41 = (llvm::Type **)v46;
                }
                v42 = (unsigned __int8 *)sub_1C4DECDA4((int **)a1, (llvm *)(v40 - 28), v41, v47[0], *(__int32 ***)a4, *(llvm::DSOLocalEquivalent ***)(a4 + 8));
                goto LABEL_74;
              }
              v42 = (unsigned __int8 *)llvm::ConstantFoldCompareInstOperands(*(_WORD *)(a1 + 18) & 0x3F, *(_QWORD *)v46, *((_QWORD *)v46 + 1), *(llvm::DataLayout **)a4, *(_QWORD *)(a4 + 8));
              goto LABEL_74;
            }
            v29 = sub_1C4E6A420(*(_QWORD *)v49, *((_QWORD *)v49 + 1), *((_QWORD *)v49 + 2), a4, (a6 - 1));
          }
LABEL_78:
          if (v29 == a1)
            v8 = 0;
          else
            v8 = (unsigned __int8 *)v29;
          goto LABEL_90;
        }
        v30 = *(unsigned __int8 *)(a1 + 16);
        if ((v30 - 59) >= 0xFFFFFFEE)
        {
          Zero = 0;
          v44 = *(unsigned __int8 **)v49;
          switch(*(_BYTE *)(a1 + 16))
          {
            case ')':
              goto LABEL_70;
            case '*':
              Zero = (unsigned __int8 *)llvm::ConstantFP::getZero(*(llvm::ConstantFP **)a1, (llvm::Type *)1);
              break;
            case '+':
            case ',':
              break;
            case '-':
              Zero = (unsigned __int8 *)llvm::ConstantInt::get(*(llvm::ConstantInt **)a1, 1, 0);
              break;
            case '.':
              Zero = (unsigned __int8 *)llvm::ConstantFP::get(*(llvm::ConstantFP ***)a1, v19, 1.0);
              break;
            default:
              if (v30 == 56)
              {
                Zero = (unsigned __int8 *)llvm::Constant::getAllOnesValue(*(llvm::Constant **)a1, v19);
              }
              else if ((v30 - 57) <= 1)
              {
LABEL_70:
                Zero = (unsigned __int8 *)llvm::Constant::getNullValue(*(llvm::Constant **)a1, v19);
              }
              break;
          }
          v8 = (unsigned __int8 *)*((_QWORD *)v49 + 1);
          if (v44 == Zero)
            goto LABEL_90;
          v45 = (llvm::ConstantExpr *)(v30 - 28);
          if (v8 == (unsigned __int8 *)llvm::ConstantExpr::getBinOpIdentity(v45, *(llvm::ConstantFP **)a1, (llvm::Type *)1, 0))goto LABEL_89;
          if ((v45 & 0xFFFFFFFE) == 0x1C)
          {
            v8 = *(unsigned __int8 **)v49;
            if (*(_QWORD *)v49 == *((_QWORD *)v49 + 1))
            {
LABEL_90:
              if (v49 != v51)
                free(v49);
              return v8;
            }
          }
        }
        if (*(_BYTE *)(a1 + 16) == 62)
          v31 = a1;
        else
          v31 = 0;
        if (v31)
          v32 = (_DWORD)v50 == 2;
        else
          v32 = 0;
        if (!v32)
          goto LABEL_48;
        v33 = (unsigned __int8 *)*((_QWORD *)v49 + 1);
        v34 = !v33 || v33[16] > 0x14u;
        if (v34
          || (llvm::Constant::isNullValue(*((llvm::Constant **)v49 + 1)) & 1) == 0
          && (sub_1C4E71060((uint64_t)&v46, (llvm::Constant *)v33) & 1) == 0
          || (*(_BYTE *)(v31 + 17) & 2) != 0)
        {
          goto LABEL_48;
        }
LABEL_89:
        v8 = *(unsigned __int8 **)v49;
        goto LABEL_90;
      }
    }
    else
    {
      v15 = v14 & 0x7FFFFFF;
      v16 = (char *)(a1 - 32 * v15);
      if ((v14 & 0x7FFFFFF) != 0)
        goto LABEL_10;
    }
    v18 = v16;
    goto LABEL_16;
  }
  return v8;
}

llvm::Constant *llvm::SimplifySelectInst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4E6A420(a1, a2, a3, a4, 3);
}

llvm::Constant *sub_1C4E6A420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v10;
  uint64_t Impl;
  uint64_t v13;
  llvm::Type *v14;
  llvm::UndefValue *AggregateElement;
  llvm::UndefValue *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  llvm::FixedVectorType ***v21;
  _QWORD **v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int matched;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  llvm::Type *v39;
  unsigned int PrimitiveSizeInBits;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const llvm::Value *v60;
  llvm *v61;
  char v62;
  __int16 isImpliedCondition;
  uint64_t v64;
  int v65;
  void *v66;
  unint64_t __n;
  unsigned __int8 *v68;
  BOOL v69;
  uint64_t v70;
  _QWORD v71[3];
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  __int128 v79;
  uint64_t *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  int8x8_t *v88;
  uint64_t v89;
  __int128 __src;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  int v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v10 = *(unsigned __int8 *)(a1 + 16);
    if (v10 <= 0x14)
    {
      if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u && a3 && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
        return llvm::ConstantFoldSelectInstruction((llvm *)a1, (llvm::PoisonValue **)a2, (llvm::PoisonValue **)a3, (llvm::Constant *)a4);
      if (v10 == 12)
        return (llvm::Constant *)llvm::PoisonValue::get(*(llvm::PoisonValue **)a2, (llvm::Type *)a2);
      if (*(_BYTE *)(a4 + 41) && sub_1C4E7B480(a1))
      {
        if (*(unsigned __int8 *)(a3 + 16) >= 0x15u)
          return (llvm::Constant *)a2;
        else
          return (llvm::Constant *)a3;
      }
      if ((sub_1C4D89E3C((uint64_t)&__src, (llvm::Constant *)a1) & 1) != 0)
        return (llvm::Constant *)a2;
      if (llvm::Constant::isNullValue((llvm::Constant *)a1)
        || (sub_1C4E71060((uint64_t)&__src, (llvm::Constant *)a1) & 1) != 0)
      {
        return (llvm::Constant *)a3;
      }
    }
  }
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    if (sub_1C4D89CC8((uint64_t)&__src, (llvm::Constant *)a2)
      && (sub_1C4D8AC3C((uint64_t)&v76, (llvm::Constant *)a3) & 1) != 0)
    {
      return (llvm::Constant *)a1;
    }
    v72 = 0;
    v71[0] = 0;
    if (sub_1C4D8AC3C((uint64_t)&__src, (llvm::Constant *)a3))
    {
      *(_QWORD *)&__src = &v72;
      *((_QWORD *)&__src + 1) = v71;
      if (sub_1C4E7A6EC((uint64_t **)&__src, a1))
      {
        v76 = (uint64_t *)v72;
        v77 = v71[0];
        if (sub_1C4E7A804(&v76, a2))
          return (llvm::Constant *)v72;
      }
      *(_QWORD *)&__src = &v72;
      *((_QWORD *)&__src + 1) = v71;
      if ((sub_1C4E7A6EC((uint64_t **)&__src, a2) & 1) != 0)
      {
        v76 = (uint64_t *)v72;
        v77 = v71[0];
        if (sub_1C4E7A804(&v76, a1))
          return (llvm::Constant *)v72;
      }
    }
  }
  if (a2 == a3)
    return (llvm::Constant *)a2;
  if (*(_BYTE *)(a2 + 16) == 12
    || *(_BYTE *)(a4 + 41)
    && sub_1C4E7B480(a2)
    && (sub_1C4F8BE80((uint64_t ***)a3, *(_QWORD *)(a4 + 24), *(_QWORD *)(a4 + 32), *(_QWORD *)(a4 + 16), 0, 1) & 1) != 0)
  {
    return (llvm::Constant *)a3;
  }
  if (*(_BYTE *)(a3 + 16) == 12
    || *(_BYTE *)(a4 + 41)
    && sub_1C4E7B480(a3)
    && (sub_1C4F8BE80((uint64_t ***)a2, *(_QWORD *)(a4 + 24), *(_QWORD *)(a4 + 32), *(_QWORD *)(a4 + 16), 0, 1) & 1) != 0)
  {
    return (llvm::Constant *)a2;
  }
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 18
    && *(unsigned __int8 *)(a2 + 16) <= 0x14u
    && *(unsigned __int8 *)(a3 + 16) <= 0x14u)
  {
    v13 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    *(_QWORD *)&__src = &v91;
    *((_QWORD *)&__src + 1) = 0x1000000000;
    if ((_DWORD)v13)
    {
      v14 = 0;
      while (1)
      {
        AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a2, v14);
        v16 = llvm::Constant::getAggregateElement((llvm::Constant *)a3, v14);
        if (!AggregateElement || (v17 = (uint64_t)v16) == 0)
        {
LABEL_61:
          v20 = DWORD2(__src);
          v21 = (llvm::FixedVectorType ***)__src;
          goto LABEL_63;
        }
        if (AggregateElement == v16)
          goto LABEL_57;
        if (*((_BYTE *)AggregateElement + 16) != 12
          && (!*(_BYTE *)(a4 + 41)
           || !sub_1C4E7B480((uint64_t)AggregateElement)
           || !sub_1C4F8BE80((uint64_t ***)v17, 0, 0, 0, 0, 1)))
        {
          break;
        }
        v18 = DWORD2(__src);
        v19 = HIDWORD(__src);
LABEL_58:
        if (v18 >= v19)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)&v91, v18 + 1, 8);
          v18 = DWORD2(__src);
        }
        *(_QWORD *)(__src + 8 * v18) = v17;
        ++DWORD2(__src);
        v14 = (llvm::Type *)((_DWORD)v14 + 1);
        if ((_DWORD)v13 == (_DWORD)v14)
          goto LABEL_61;
      }
      if (*(_BYTE *)(v17 + 16) != 12
        && (!*(_BYTE *)(a4 + 41)
         || !sub_1C4E7B480(v17)
         || !sub_1C4F8BE80((uint64_t ***)AggregateElement, 0, 0, 0, 0, 1)))
      {
        goto LABEL_61;
      }
LABEL_57:
      v18 = DWORD2(__src);
      v19 = HIDWORD(__src);
      v17 = (uint64_t)AggregateElement;
      goto LABEL_58;
    }
    v20 = 0;
    v21 = (llvm::FixedVectorType ***)&v91;
LABEL_63:
    if (v20 == (_DWORD)v13)
    {
      Impl = (uint64_t)llvm::ConstantVector::getImpl(v21, (llvm::Type *)v13);
      if (!Impl)
      {
        llvm::FixedVectorType::get(**v21, (llvm::Type *)v13);
        Impl = sub_1C537B3A4(**v22 + 1288, (uint64_t)v22, v21, v13);
      }
      v21 = (llvm::FixedVectorType ***)__src;
    }
    else
    {
      Impl = a3;
    }
    if (v21 != (llvm::FixedVectorType ***)&v91)
      free(v21);
    if (v20 == (_DWORD)v13)
      return (llvm::Constant *)Impl;
  }
  if (*(_BYTE *)(a1 + 16) != 81 || (v23 = *(_QWORD *)(a1 - 64)) == 0 || (v24 = *(unsigned __int8 **)(a1 - 32)) == 0)
  {
LABEL_159:
    if (!a1 || *(_BYTE *)(a1 + 16) != 82)
      goto LABEL_181;
    v46 = *(_QWORD *)(a1 - 64);
    if ((v46 != a2 || *(_QWORD *)(a1 - 32) != a3) && (v46 != a3 || *(_QWORD *)(a1 - 32) != a2))
      goto LABEL_181;
    v47 = *(_WORD *)(a1 + 18);
    v48 = *(_QWORD *)(a4 + 32);
    if (v48 && sub_1C4774A9C(v48))
    {
      v49 = *(_BYTE *)(*(_QWORD *)(a4 + 32) + 17);
      v72 = 0;
      if ((v49 & 0x10) != 0)
      {
LABEL_178:
        Impl = a3;
        if ((v47 & 0x3F) == 1 || (Impl = a2, (v47 & 0x3F) == 0xE))
        {
          if (Impl)
            return (llvm::Constant *)Impl;
        }
LABEL_181:
        if (a1)
        {
          v52 = *(unsigned __int8 *)(a1 + 16);
          v53 = v52 - 28;
          if (v52 >= 0x1C && v52 - 59 >= 0xFFFFFFEE)
          {
            LODWORD(v71[0]) = 0;
            LODWORD(v89) = 0;
            if (v52 == 57)
            {
              v54 = 33;
LABEL_188:
              v76 = 0;
              v72 = 0;
              *(_QWORD *)&__src = v71;
              *((_QWORD *)&__src + 1) = a2;
              v91 = (uint64_t *)a3;
              v92 = (uint64_t)&v89;
              v93 = (uint64_t *)&v76;
              v94 = (uint64_t)&v72;
              if (sub_1C4E7AF1C((uint64_t)&__src, *(_QWORD *)(a1 - 64)))
              {
                v55 = *(_QWORD *)(a1 - 32);
                if (v55)
                {
                  if (*(_BYTE *)(v55 + 16) == 81)
                  {
                    v56 = *(_QWORD *)(v55 - 64);
                    if (v56)
                    {
                      *v93 = v56;
                      v57 = *(_QWORD *)(v55 - 32);
                      if (v57)
                        goto LABEL_207;
                    }
                  }
                }
              }
              if (sub_1C4E7AF1C((uint64_t)&__src, *(_QWORD *)(a1 - 32)))
              {
                v55 = *(_QWORD *)(a1 - 64);
                if (v55)
                {
                  if (*(_BYTE *)(v55 + 16) == 81)
                  {
                    v58 = *(_QWORD *)(v55 - 64);
                    if (v58)
                    {
                      *v93 = v58;
                      v57 = *(_QWORD *)(v55 - 32);
                      if (v57)
                      {
LABEL_207:
                        *(_QWORD *)v94 = v57;
                        *(_DWORD *)v92 = *(_WORD *)(v55 + 18) & 0x3F;
                        if (LODWORD(v71[0]) == (_DWORD)v89
                          && LODWORD(v71[0]) == v54
                          && (v76 == (uint64_t *)a2 || v76 == (uint64_t *)a3 || v72 == a2 || v72 == a3))
                        {
                          Impl = v53 == 29 ? a2 : a3;
                          if (Impl)
                            return (llvm::Constant *)Impl;
                        }
                      }
                    }
                  }
                }
              }
              goto LABEL_208;
            }
            if (v52 == 56)
            {
              v54 = 32;
              goto LABEL_188;
            }
          }
        }
LABEL_208:
        v59 = *(_QWORD *)(a4 + 32);
        v60 = *(const llvm::Value **)a4;
        v61 = (llvm *)sub_1C4F904E0(v59);
        if (!v61)
          return 0;
        isImpliedCondition = llvm::isImpliedCondition(v61, (const llvm::Value *)a1, v60, (const llvm::DataLayout *)(v62 & 1), 0);
        if ((_BYTE)isImpliedCondition)
          v64 = a2;
        else
          v64 = a3;
        if ((isImpliedCondition & 0xFF00) != 0)
          return (llvm::Constant *)v64;
        else
          return 0;
      }
    }
    else
    {
      v72 = 0;
    }
    *(_QWORD *)&__src = &v72;
    *((_QWORD *)&__src + 1) = 0;
    if (!sub_1C4E7A604((uint64_t)&__src, (unsigned __int8 *)a2))
      goto LABEL_177;
    v50 = v72;
    if (*(_UNKNOWN **)(v72 + 8) == &unk_1C866F1C0)
      v50 = *(_QWORD *)(v72 + 16);
    if ((*(_BYTE *)(v50 + 28) & 7) == 3)
    {
LABEL_177:
      v76 = &v72;
      v77 = 0;
      if (!sub_1C4E7A604((uint64_t)&v76, (unsigned __int8 *)a3))
        goto LABEL_181;
      v51 = v72;
      if (*(_UNKNOWN **)(v72 + 8) == &unk_1C866F1C0)
        v51 = *(_QWORD *)(v72 + 16);
      if ((*(_BYTE *)(v51 + 28) & 7) == 3)
        goto LABEL_181;
    }
    goto LABEL_178;
  }
  v25 = *(_WORD *)(a1 + 18) & 0x3F;
  v26 = v25 == 33;
  if (v25 == 33)
    v27 = 32;
  else
    v27 = *(_WORD *)(a1 + 18) & 0x3F;
  if (v25 == 33)
    v28 = a2;
  else
    v28 = a3;
  v70 = v28;
  if (v26)
    v29 = a3;
  else
    v29 = a2;
  if ((*(_DWORD *)(*(_QWORD *)v29 + 8) & 0xFE) == 0x12)
    v30 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v29 + 16) + 8);
  else
    v30 = *(_DWORD *)(*(_QWORD *)v29 + 8);
  if (v30 == 13)
  {
    v72 = 0;
    v71[0] = 0;
    matched = llvm::matchDecomposedSelectPattern(a1, (llvm::ConstantExpr *)v29, (llvm::ConstantExpr *)v70, (uint64_t)&v72, v71, 0, 0);
    v32 = 40;
    switch(matched)
    {
      case 0:
      case 7:
      case 8:
        goto LABEL_88;
      case 1:
        break;
      case 2:
        v32 = 36;
        break;
      case 3:
        v32 = 38;
        break;
      case 4:
        v32 = 34;
        break;
      case 5:
        v32 = 12;
        break;
      default:
        v32 = 10;
        break;
    }
    if (v32 == v27)
    {
      if ((matched - 1) > 2)
        v34 = 2;
      else
        v34 = dword_1C85F3BD0[matched - 1];
      v39 = *(llvm::Type **)v72;
      if ((*(_DWORD *)(*(_QWORD *)v72 + 8) & 0xFE) == 0x12)
        v39 = (llvm::Type *)**((_QWORD **)v39 + 2);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v39);
      llvm::getMinMaxLimit(v34, PrimitiveSizeInBits, (llvm::APInt *)&__src);
      v41 = (unsigned __int8 *)v71[0];
      v42 = DWORD2(__src);
      if (DWORD2(__src) > 0x40)
      {
        __n = (((unint64_t)DWORD2(__src) + 63) >> 3) & 0x3FFFFFF8;
        v68 = (unsigned __int8 *)v71[0];
        v66 = (void *)operator new[]();
        memcpy(v66, (const void *)__src, __n);
        v43 = (uint64_t)v66;
        v41 = v68;
      }
      else
      {
        v43 = __src;
      }
      LODWORD(v77) = v42;
      v76 = (uint64_t *)v43;
      v44 = sub_1C4D8A7F0((llvm::APInt *)&v76, v41);
      if (v77 >= 0x41 && v76)
      {
        v45 = v44;
        MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
        v44 = v45;
      }
      Impl = v72;
      if (DWORD2(__src) >= 0x41 && (_QWORD)__src)
      {
        v69 = v44;
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        v44 = v69;
      }
      if (v44)
        goto LABEL_158;
    }
  }
LABEL_88:
  if (v27 != 32
    || v24[16] > 0x14u
    || (llvm::Constant::isNullValue((llvm::Constant *)v24) & 1) == 0
    && (sub_1C4E71060((uint64_t)&__src, (llvm::Constant *)v24) & 1) == 0)
  {
    goto LABEL_144;
  }
  v88 = 0;
  v89 = 0;
  *(_QWORD *)&__src = &v89;
  *((_QWORD *)&__src + 1) = &v88;
  v91 = 0;
  v33 = *(unsigned __int8 *)(v23 + 16);
  if (v33 == 5)
  {
    if (*(_WORD *)(v23 + 18) != 28)
      goto LABEL_106;
    v35 = v23 - 32 * (*(_DWORD *)(v23 + 20) & 0x7FFFFFF);
    if (!*(_QWORD *)v35)
      goto LABEL_106;
    v89 = *(_QWORD *)v35;
    if ((sub_1C4D8A004((uint64_t)&__src + 8, *(llvm::Constant **)(v35 + 32)) & 1) == 0)
      goto LABEL_106;
  }
  else
  {
    if (v33 != 56)
      goto LABEL_106;
    if (!*(_QWORD *)(v23 - 64))
      goto LABEL_106;
    v89 = *(_QWORD *)(v23 - 64);
    if (!sub_1C4D89F84((uint64_t)&__src + 8, *(unsigned __int8 **)(v23 - 32)))
      goto LABEL_106;
  }
  v36 = sub_1C4E7A91C(v29, v70, v89, v88, 1);
  if (v36)
    return (llvm::Constant *)v36;
LABEL_106:
  v87 = 0;
  LODWORD(__src) = 149;
  *(_QWORD *)((char *)&__src + 4) = 0;
  LODWORD(v76) = 148;
  v77 = 0;
  v78 = &v89;
  v79 = xmmword_1C6A5FC00;
  v80 = &v87;
  v81 = 149;
  v82 = 0;
  v83 = 1;
  v84 = &v89;
  v85 = 2;
  v86 = &v87;
  if ((sub_1C4E775B8((uint64_t)&v76, v29) || sub_1C4E77624((uint64_t)&v81, v29)) && v70 == v89 && v23 == v87)
    goto LABEL_143;
  LODWORD(__src) = 148;
  *((_QWORD *)&__src + 1) = 0;
  v91 = &v89;
  v92 = 1;
  v93 = &v89;
  v94 = 2;
  v95 = &v87;
  v96 = 149;
  v97 = 0;
  v98 = &v89;
  v99 = 1;
  v100 = &v89;
  v101 = 2;
  v102 = &v87;
  if ((sub_1C4E7AE2C((uint64_t)&__src, v70) || sub_1C4E7AE2C((uint64_t)&v96, v70)) && v29 == v89 && v23 == v87)
    goto LABEL_143;
  if (*(_BYTE *)(v29 + 16) == 84)
  {
    v37 = *(_QWORD *)(v29 - 32);
    if (v37)
    {
      if (!*(_BYTE *)(v37 + 16)
        && *(_QWORD *)(v37 + 24) == *(_QWORD *)(v29 + 72)
        && *(_DWORD *)(v37 + 36) == 1
        && v23 == *(_QWORD *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF)))
      {
        v73 = 1;
        v74 = 0;
        v75 = v23;
        v65 = *(unsigned __int8 *)(v70 + 16);
        if (v65 == 5)
        {
          if (*(_WORD *)(v70 + 18) == 15
            && sub_1C4E71060((uint64_t)&v72, *(llvm::Constant **)(v70 - 32 * (*(_DWORD *)(v70 + 20) & 0x7FFFFFF)))&& sub_1C4E7AEB4((uint64_t)&v73, *(_QWORD *)(v70 - 32 * (*(_DWORD *)(v70 + 20) & 0x7FFFFFF) + 32)))
          {
            goto LABEL_143;
          }
        }
        else if (v65 == 43
               && sub_1C4D8AC3C((uint64_t)&v72, *(llvm::Constant **)(v70 - 64))
               && sub_1C4E7AEB4((uint64_t)&v73, *(_QWORD *)(v70 - 32)))
        {
          goto LABEL_143;
        }
      }
    }
  }
  v73 = 1;
  v74 = 0;
  v75 = v23;
  v38 = *(unsigned __int8 *)(v29 + 16);
  if (v38 != 5)
  {
    if (v38 != 43
      || !sub_1C4D8AC3C((uint64_t)&v72, *(llvm::Constant **)(v29 - 64))
      || !sub_1C4E7AEB4((uint64_t)&v73, *(_QWORD *)(v29 - 32)))
    {
      goto LABEL_144;
    }
    goto LABEL_142;
  }
  if (*(_WORD *)(v29 + 18) == 15
    && sub_1C4E71060((uint64_t)&v72, *(llvm::Constant **)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF)))&& sub_1C4E7AEB4((uint64_t)&v73, *(_QWORD *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF) + 32)))
  {
LABEL_142:
    LODWORD(v71[0]) = 1;
    v71[1] = 0;
    v71[2] = v23;
    if (!sub_1C4E7AEB4((uint64_t)v71, v70))
      goto LABEL_144;
LABEL_143:
    Impl = v70;
    goto LABEL_158;
  }
LABEL_144:
  LODWORD(v72) = v27;
  v76 = 0;
  DWORD2(__src) = 1;
  *(_QWORD *)&__src = 0;
  Impl = 0;
  if (llvm::decomposeBitTestICmp(v23, v24, (int *)&v72, (uint64_t *)&v76, (int8x8_t ***)&__src, 1))
    Impl = sub_1C4E7A91C(v29, v70, (uint64_t)v76, (int8x8_t *)&__src, v72 == 32);
  if (DWORD2(__src) >= 0x41 && (_QWORD)__src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v27 == 32 && !Impl)
  {
    if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12)
      goto LABEL_159;
    if (sub_1C4E69F48(v70, v23, (uint64_t)v24, a4, 0, a5) == (unsigned __int8 *)v29
      || sub_1C4E69F48(v70, (uint64_t)v24, v23, a4, 0, a5) == (unsigned __int8 *)v29
      || sub_1C4E69F48(v29, v23, (uint64_t)v24, a4, 1, a5) == (unsigned __int8 *)v70)
    {
      Impl = v70;
    }
    else
    {
      Impl = v70;
      if (sub_1C4E69F48(v29, (uint64_t)v24, v23, a4, 1, a5) != (unsigned __int8 *)v70)
        goto LABEL_159;
    }
  }
LABEL_158:
  if (!Impl)
    goto LABEL_159;
  return (llvm::Constant *)Impl;
}

llvm::UndefValue *sub_1C4E6B244(llvm::GetElementPtrInst *a1, unsigned __int8 *a2, llvm::Value *a3, uint64_t a4, int a5, uint64_t a6)
{
  unsigned __int8 *v8;
  unsigned int v9;
  llvm::Type *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::GetElementPtrInst *TypeAtIndex;
  uint64_t **v14;
  llvm::Type *v15;
  llvm::UndefValue *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  llvm::Value *v20;
  int v22;
  llvm::Type *v23;
  llvm::UndefValue *v24;
  llvm::UndefValue *v25;
  llvm::UndefValue *v26;
  int v27;
  uint64_t v30;
  uint64_t v31;
  llvm::Constant **i;
  llvm::Constant *v33;
  BOOL v34;
  BOOL v36;
  uint64_t v37;
  llvm::Value *v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  llvm::Constant *v42;
  BOOL v43;
  unsigned int v44;
  uint64_t v45;
  const char *v46;
  uint64_t *v47;
  llvm::Constant *v48;
  uint64_t v49;
  int PrimitiveSizeInBits;
  int v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm::Constant **v56;
  llvm::Constant *v57;
  BOOL v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  llvm *v66;
  uint64_t v67;
  const llvm::APInt *v68;
  llvm::ValueHandleBase *v69;
  int v70;
  llvm *v71;
  uint64_t v72;
  llvm *v73;
  uint64_t v74;
  BOOL v75;
  llvm *UnderlyingObject;
  int v77;
  int64_t v78;
  unint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  llvm::ConstantInt *v83;
  int v84;
  int64_t v85;
  unint64_t v86;
  unsigned int v87;
  llvm::Value *j;
  uint64_t ElementPtr;
  size_t v90;
  const llvm::APInt *v91;
  llvm::ValueHandleBase *v92;
  void *v96;
  unsigned int v97;
  llvm *v98;
  llvm *v99;
  void *__src;
  unsigned __int8 *v101;
  uint64_t *v102;
  unsigned int v103;
  uint64_t v104;

  v8 = a2;
  v9 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v9 & 0xFE) == 0x12)
    v9 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  if (!a4)
    return (llvm::UndefValue *)v8;
  v10 = (llvm::Type *)(v9 >> 8);
  v11 = 8 * a4;
  v12 = 8;
  TypeAtIndex = a1;
  do
  {
    if (v11 == v12)
      break;
    TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, *(llvm::Type **)((char *)a3 + v12), a3);
    v12 += 8;
  }
  while (TypeAtIndex);
  v14 = (uint64_t **)llvm::PointerType::get(TypeAtIndex, v10);
  v16 = (llvm::UndefValue *)v14;
  v17 = *(_QWORD *)v8;
  if (*(_QWORD *)v8)
    v18 = (*(_DWORD *)(*(_QWORD *)v8 + 8) & 0xFE) == 18;
  else
    v18 = 0;
  if (v18)
  {
    v22 = *(_DWORD *)(*(_QWORD *)v8 + 8);
  }
  else
  {
    v19 = 8 * a4;
    v20 = a3;
    while (1)
    {
      v17 = **(_QWORD **)v20;
      if (v17 && (*(_DWORD *)(v17 + 8) & 0xFE) == 18)
        break;
      v20 = (llvm::Value *)((char *)v20 + 8);
      v19 -= 8;
      if (!v19)
        goto LABEL_23;
    }
    v22 = *(_DWORD *)(v17 + 8);
  }
  v23 = (llvm::Type *)*(unsigned int *)(v17 + 32);
  if (v22 == 19)
    llvm::ScalableVectorType::get(v14, v23);
  else
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v14, v23);
  v16 = v24;
LABEL_23:
  v25 = *(llvm::UndefValue **)v8;
  if ((*(_DWORD *)(*(_QWORD *)v8 + 8) & 0xFE) == 0x12)
  {
    v26 = (llvm::UndefValue *)**((_QWORD **)v25 + 2);
    v27 = *((unsigned __int8 *)v26 + 8);
  }
  else
  {
    v27 = *(_DWORD *)(*(_QWORD *)v8 + 8);
    v26 = *(llvm::UndefValue **)v8;
  }
  if (v27 == 15 && !*((_QWORD *)v26 + 3) && v25 == v16)
  {
    v31 = 8 * a4;
    for (i = (llvm::Constant **)a3; ; ++i)
    {
      v33 = *i;
      v34 = !*i || *((unsigned __int8 *)*i + 16) > 0x14u;
      if (v34 || (llvm::Constant::isNullValue(*i) & 1) == 0 && (sub_1C4E71060((uint64_t)&__src, v33) & 1) == 0)
        break;
      v31 -= 8;
      if (!v31)
        return (llvm::UndefValue *)v8;
    }
  }
  if (v8[16] == 12)
    return (llvm::UndefValue *)llvm::PoisonValue::get(v16, v15);
  v30 = 0;
  do
  {
    if (*(_BYTE *)(*(_QWORD *)((char *)a3 + v30) + 16) == 12)
      return (llvm::UndefValue *)llvm::PoisonValue::get(v16, v15);
    v30 += 8;
  }
  while (v11 != v30);
  if (*(_BYTE *)(a6 + 41) && sub_1C4E7B480((uint64_t)v8))
  {
    if (a5)
      return (llvm::UndefValue *)llvm::PoisonValue::get(v16, v15);
    return llvm::UndefValue::get(v16, v15);
  }
  if (*((_BYTE *)a1 + 8) == 19)
  {
    if (a4 != 1)
      goto LABEL_163;
    v36 = 1;
  }
  else
  {
    v37 = v11 - 8;
    v38 = a3;
    do
    {
      v39 = *(_QWORD *)v38;
      v38 = (llvm::Value *)((char *)v38 + 8);
      v40 = *(unsigned __int8 *)(*(_QWORD *)v39 + 8);
      v36 = v40 == 19;
      v41 = v40 == 19 || v37 == 0;
      v37 -= 8;
    }
    while (!v41);
    if (a4 != 1)
    {
      if (v40 == 19)
        goto LABEL_163;
      goto LABEL_84;
    }
  }
  v42 = *(llvm::Constant **)a3;
  v43 = !*(_QWORD *)a3 || *(unsigned __int8 *)(*(_QWORD *)a3 + 16) > 0x14u;
  if (!v43
    && ((llvm::Constant::isNullValue(*(llvm::Constant **)a3) & 1) != 0 || (sub_1C4E71060((uint64_t)&__src, v42) & 1) != 0)
    && *(llvm::UndefValue **)v8 == v16)
  {
    return (llvm::UndefValue *)v8;
  }
  if (v36)
    goto LABEL_163;
  v44 = *((unsigned __int8 *)a1 + 8);
  if (v44 > 0x11)
    goto LABEL_112;
  if (((1 << v44) & 0xAC7F) != 0)
    goto LABEL_71;
  if (((1 << v44) & 0x30000) == 0)
  {
LABEL_112:
    if ((v44 & 0xFE) != 0x12 && v44 != 21)
      goto LABEL_84;
  }
  if (!llvm::Type::isSizedDerivedType((uint64_t)a1, 0))
    goto LABEL_84;
LABEL_71:
  v98 = 0;
  v104 = 0;
  v45 = sub_1C4E3D148(*(_QWORD *)a6, (uint64_t)a1);
  v47 = (uint64_t *)v45;
  if ((_DWORD)v46 == 1)
  {
    if (v47)
      goto LABEL_74;
  }
  else if (v45)
  {
    goto LABEL_74;
  }
  if (*(llvm::UndefValue **)v8 == v16)
    return (llvm::UndefValue *)v8;
LABEL_74:
  v48 = *(llvm::Constant **)a3;
  v49 = **(_QWORD **)a3;
  if ((*(_DWORD *)(v49 + 8) & 0xFE) == 0x12)
    v49 = **(_QWORD **)(v49 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v49);
  if (*(_DWORD *)(llvm::DataLayout::getPointerAlignElem(*(llvm::DataLayout **)a6, v10) + 4) == PrimitiveSizeInBits)
  {
    if (v47 != (uint64_t *)1)
      goto LABEL_119;
    __src = &v98;
    v101 = v8;
    v51 = *((unsigned __int8 *)v48 + 16);
    if (v51 == 5)
    {
      if (*((_WORD *)v48 + 9) != 15
        || !sub_1C4E714F4((_QWORD **)&__src, *((_QWORD *)v48 - 4 * (*((_DWORD *)v48 + 5) & 0x7FFFFFF)))
        || !sub_1C4E75A04(&v101, ((_QWORD *)v48 - 4 * (*((_DWORD *)v48 + 5) & 0x7FFFFFF))[4]))
      {
LABEL_119:
        v72 = *(_QWORD *)a3;
        __src = &v98;
        v101 = v8;
        v102 = &v104;
        if (!sub_1C4E7AFA8((uint64_t)&__src, 27, v72)
          || v47 != (uint64_t *)(1 << v104)
          || *(llvm::UndefValue **)v98 != v16
          || (v73 = llvm::getUnderlyingObject(v98, (const llvm::Value *)6),
              v73 != llvm::getUnderlyingObject((llvm *)v8, (const llvm::Value *)6)))
        {
          v74 = *(_QWORD *)a3;
          __src = &v98;
          v101 = v8;
          v103 = 64;
          v102 = v47;
          if (sub_1C4E7B1CC((uint64_t)&__src, 20, v74))
          {
            if (*(llvm::UndefValue **)v98 == v16)
            {
              UnderlyingObject = llvm::getUnderlyingObject(v98, (const llvm::Value *)6);
              v75 = UnderlyingObject == llvm::getUnderlyingObject((llvm *)v8, (const llvm::Value *)6);
            }
            else
            {
              v75 = 0;
            }
            if (v103 >= 0x41 && v102)
              MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
            if (v75)
              return v98;
          }
          else if (v103 >= 0x41 && v102)
          {
            MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
          }
          goto LABEL_84;
        }
        return v98;
      }
    }
    else if (v51 != 43
           || !sub_1C4E714F4((_QWORD **)&__src, *((_QWORD *)v48 - 8))
           || (sub_1C4E75A04(&v101, *((_QWORD *)v48 - 4)) & 1) == 0)
    {
      goto LABEL_119;
    }
    if (*(llvm::UndefValue **)v98 == v16)
    {
      v71 = llvm::getUnderlyingObject(v98, (const llvm::Value *)6);
      if (v71 == llvm::getUnderlyingObject((llvm *)v8, (const llvm::Value *)6))
        return v98;
    }
    goto LABEL_119;
  }
LABEL_84:
  v53 = sub_1C4E3D148(*(_QWORD *)a6, (uint64_t)TypeAtIndex);
  if ((_DWORD)v52 == 1)
  if (v53 == 1)
  {
    v54 = a4 - 1;
    if (a4 != 1)
    {
      v55 = v11 - 8;
      v56 = (llvm::Constant **)a3;
      do
      {
        v57 = *v56;
        v58 = !*v56 || *((unsigned __int8 *)*v56 + 16) > 0x14u;
        if (v58 || (llvm::Constant::isNullValue(*v56) & 1) == 0 && (sub_1C4E71060((uint64_t)&__src, v57) & 1) == 0)
          goto LABEL_163;
        ++v56;
        v55 -= 8;
      }
      while (v55);
    }
    v59 = *(_QWORD *)a6;
    v60 = *(_DWORD *)(*(_QWORD *)v8 + 8);
    if ((v60 & 0xFE) == 0x12)
      v60 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v8 + 16) + 8);
    v61 = *(unsigned int *)(llvm::DataLayout::getPointerAlignElem(*(llvm::DataLayout **)a6, v60 >> 8) + 12);
    sub_1C4768AD0(v59, **((_QWORD **)a3 + v54));
    v65 = v64;
    if ((_DWORD)v62 == 1)
    if (v65 == v61)
    {
      LODWORD(v101) = v61;
      if (v61 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      else
        __src = 0;
      v66 = (llvm *)llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v8, *(llvm::DataLayout **)a6, (const void **)&__src, 0, 0, 0, v63);
      v67 = *((_QWORD *)a3 + v54);
      v99 = v66;
      if (sub_1C4E7B378((uint64_t)&v98, 15, v67))
      {
        if (v101 > 0x40)
        {
          v77 = 0;
          v78 = ((unint64_t)v101 + 63) >> 6;
          do
          {
            v34 = v78-- < 1;
            if (v34)
              break;
            v79 = *((_QWORD *)__src + v78);
            v77 += __clz(v79);
          }
          while (!v79);
          v80 = v101 | 0xFFFFFFC0;
          if ((v101 & 0x3F) == 0)
            v80 = 0;
          if (v77 + v80 != (_DWORD)v101)
            goto LABEL_106;
        }
        else if (__src)
        {
LABEL_106:
          v69 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v16, (llvm::LLVMContext *)&__src, v68);
LABEL_107:
          v16 = sub_1C537D3B8((llvm *)0x30, (uint64_t)v69, v16, 0);
          v70 = 0;
LABEL_159:
          if (v101 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          if (!v70)
            return v16;
          goto LABEL_163;
        }
      }
      v81 = *((_QWORD *)a3 + v54);
      v98 = v66;
      v82 = *(unsigned __int8 *)(v81 + 16);
      if (v82 == 5)
      {
        if (*(_WORD *)(v81 + 18) != 30
          || !sub_1C4E75A04(&v98, *(_QWORD *)(v81 - 32 * (*(_DWORD *)(v81 + 20) & 0x7FFFFFF)))
          || !sub_1C4D9EED4((uint64_t)&v99, *(llvm::Constant **)(v81 - 32 * (*(_DWORD *)(v81 + 20) & 0x7FFFFFF) + 32)))
        {
          goto LABEL_158;
        }
      }
      else if (v82 != 58
             || !sub_1C4E75A04(&v98, *(_QWORD *)(v81 - 64))
             || (sub_1C4D9ED34((uint64_t)&v99, *(llvm::Constant **)(v81 - 32)) & 1) == 0)
      {
        goto LABEL_158;
      }
      if (v101 > 0x40)
      {
        v84 = 0;
        v85 = ((unint64_t)v101 + 63) >> 6;
        do
        {
          v34 = v85-- < 1;
          if (v34)
            break;
          v86 = *((_QWORD *)__src + v85);
          v84 += __clz(v86);
        }
        while (!v86);
        v87 = v101 | 0xFFFFFFC0;
        if ((v101 & 0x3F) == 0)
          v87 = 0;
        if (v84 + v87 == (_DWORD)v101 - 1)
          goto LABEL_158;
        v83 = *(llvm::ConstantInt **)v16;
        v97 = v101;
        v90 = (((unint64_t)v101 + 63) >> 3) & 0x3FFFFFF8;
        v96 = (void *)operator new[]();
        memcpy(v96, __src, v90);
      }
      else
      {
        if (__src == (void *)1)
        {
LABEL_158:
          v70 = 1;
          goto LABEL_159;
        }
        v83 = *(llvm::ConstantInt **)v16;
        v97 = v101;
        v96 = __src;
      }
      llvm::APInt::operator-=((uint64_t)&v96, 1uLL);
      LODWORD(v99) = v97;
      v98 = (llvm *)v96;
      v97 = 0;
      v92 = llvm::ConstantInt::get(v83, (llvm::LLVMContext *)&v98, v91);
      if (v99 >= 0x41 && v98)
        MEMORY[0x1CAA32F9C](v98, 0x1000C8000313F17);
      if (v97 >= 0x41 && v96)
        MEMORY[0x1CAA32F9C](v96, 0x1000C8000313F17);
      v69 = v92;
      goto LABEL_107;
    }
  }
LABEL_163:
  if (v8[16] <= 0x14u)
  {
    for (j = a3; *(unsigned __int8 *)(*(_QWORD *)j + 16) < 0x15u; j = (llvm::Value *)((char *)j + 8))
    {
      v11 -= 8;
      if (!v11)
      {
        ElementPtr = llvm::ConstantExpr::getGetElementPtr(a1, (uint64_t *)v8, a3, a4, a5, 0, 0);
        return llvm::ConstantFoldConstant(ElementPtr, *(llvm::Type **)a6, 0);
      }
    }
  }
  return 0;
}

unsigned __int8 *llvm::SimplifyInsertValueInst(unsigned __int8 *a1, uint64_t a2, _DWORD *__s2, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v11;
  uint64_t v12;
  char v13;
  BOOL v14;

  if (a1 && a1[16] <= 0x14u && a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
    return (unsigned __int8 *)llvm::ConstantFoldInsertValueInstruction((llvm::Constant *)a1, (void *)a2, __s2, a4);
  if (*(_BYTE *)(a5 + 41) && (sub_1C4E7B480(a2) & 1) != 0)
    return a1;
  if (!a2)
    return 0;
  if (*(_BYTE *)(a2 + 16) != 92)
    return 0;
  v11 = *(unsigned __int8 **)(a2 - 32);
  if (*(_QWORD *)v11 != *(_QWORD *)a1)
    return 0;
  v12 = *(unsigned int *)(a2 + 72);
  if (a4 != v12 || memcmp(*(const void **)(a2 + 64), __s2, 4 * v12))
    return 0;
  if (!*(_BYTE *)(a5 + 41) || (v13 = sub_1C4E7B480((uint64_t)a1), v11 = *(unsigned __int8 **)(a2 - 32), (v13 & 1) == 0))
  {
    v14 = v11 == a1;
    v11 = a1;
    if (!v14)
      return 0;
  }
  return v11;
}

llvm *llvm::SimplifyInsertElementInst(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, llvm::Type *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t ***v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int *v13;
  unint64_t v14;
  unint64_t *v15;
  unsigned int v16;
  llvm::PoisonValue *v17;
  int v19;
  uint64_t ****v20;

  v5 = (uint64_t)a3;
  v6 = (uint64_t)a2;
  v7 = (uint64_t ***)a1;
  if (a1[16] >= 0x15u)
    a1 = 0;
  v8 = a2[16];
  if (v8 >= 0x15)
    a2 = 0;
  v9 = a3[16];
  if (v9 >= 0x15)
    a3 = 0;
  if (a1)
    v10 = a2 == 0;
  else
    v10 = 1;
  if (!v10 && a3 != 0)
    return llvm::ConstantExpr::getInsertElement((llvm::ConstantExpr *)a1, (llvm::Constant *)a2, (llvm::Constant *)a3, 0, a5);
  if (v9 == 16)
  {
    v13 = (unsigned int *)*v7;
    if (*((_BYTE *)*v7 + 8) == 18)
    {
      v14 = v13[8];
      v15 = (unint64_t *)(v5 + 24);
      v16 = *(_DWORD *)(v5 + 32);
      if (v16 >= 0x41)
      {
        if (v16 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v5 + 24)) > 0x40)
          goto LABEL_33;
        v15 = (unint64_t *)*v15;
      }
      if (*v15 < v14)
        goto LABEL_21;
LABEL_33:
      v17 = (llvm::PoisonValue *)v13;
      return (llvm *)llvm::PoisonValue::get(v17, (llvm::Type *)a2);
    }
  }
LABEL_21:
  if (*(_BYTE *)(a4 + 41))
  {
    if ((sub_1C4E7B480(v5) & 1) != 0)
    {
      v17 = (llvm::PoisonValue *)*v7;
      return (llvm *)llvm::PoisonValue::get(v17, (llvm::Type *)a2);
    }
    v8 = *(unsigned __int8 *)(v6 + 16);
  }
  if (v8 != 12)
  {
    if (!*(_BYTE *)(a4 + 41))
    {
LABEL_30:
      if (v8 != 89)
        return 0;
      v19 = *(_DWORD *)(v6 + 20);
      v20 = (v19 & 0x40000000) != 0 ? *(uint64_t *****)(v6 - 8) : (uint64_t ****)(v6 - 32 * (v19 & 0x7FFFFFF));
      if (*v20 != v7)
        return 0;
      if (v20[4] != (uint64_t ***)v5)
        return 0;
      return (llvm *)v7;
    }
    if (!sub_1C4E7B480(v6) || (sub_1C4F8BE80(v7, 0, 0, 0, 0, 1) & 1) == 0)
    {
      v8 = *(unsigned __int8 *)(v6 + 16);
      goto LABEL_30;
    }
  }
  return (llvm *)v7;
}

unsigned __int8 *llvm::SimplifyExtractValueInst(unsigned __int8 *result, char *__s2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = a3;
  v5 = result[16];
  if (result && v5 <= 0x14)
  {
    if (a3)
    {
      do
      {
        result = (unsigned __int8 *)llvm::Constant::getAggregateElement((llvm::Constant *)result, (llvm::Type *)*(unsigned int *)__s2);
        if (!result)
          break;
        __s2 += 4;
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    if (v5 != 93)
      return 0;
    v6 = result;
    do
    {
      v7 = *((_DWORD *)v6 + 18);
      v8 = v7 >= v3 ? v3 : *((_DWORD *)v6 + 18);
      if (!memcmp(*((const void **)v6 + 8), __s2, 4 * v8))
        break;
      result = 0;
      v6 = (unsigned __int8 *)*((_QWORD *)v6 - 8);
    }
    while (v6 && v6[16] == 93);
    if (v7 == (_DWORD)v3)
      return (unsigned __int8 *)*((_QWORD *)v6 - 4);
    else
      return 0;
  }
  return result;
}

llvm::UndefValue *llvm::SimplifyExtractElementInst(unsigned __int8 *a1, uint64_t a2, llvm::Constant *a3)
{
  _QWORD **v6;
  llvm::UndefValue *result;
  _QWORD **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unsigned int v13;
  unint64_t **v14;
  unint64_t *v15;
  int v16;
  _WORD v17[4];
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD ***)a1;
  if (a1[16] <= 0x14u)
  {
    if (a2 && *(unsigned __int8 *)(a2 + 16) <= 0x14u)
    {
      result = llvm::ConstantFoldExtractElementInstruction((llvm *)a1, (llvm::Constant *)a2, a3);
      if (result)
        return result;
      v8 = *(_QWORD ***)a1;
      v9 = *(_QWORD *)(*(_QWORD *)a1 + 24);
      if (v9)
      {
        v23[0] = a1;
        v23[1] = a2;
        v10 = **v8 + 1512;
        v17[0] = 61;
        v17[1] = 0;
        v18 = v23;
        v19 = 2;
        v20 = 0u;
        v21 = 0u;
        v22 = 0;
        return (llvm::UndefValue *)sub_1C537D4FC(v10, v9, (unsigned __int8 *)v17);
      }
      return 0;
    }
    if (*((_BYTE *)a3 + 41) && sub_1C4E7B480((uint64_t)a1))
      return llvm::UndefValue::get((llvm::UndefValue *)v6[3], (llvm::Type *)a2);
  }
  if (*((_BYTE *)a3 + 41) && sub_1C4E7B480(a2))
    return (llvm::UndefValue *)llvm::PoisonValue::get((llvm::PoisonValue *)v6[3], (llvm::Type *)a2);
  if (!a2 || *(_BYTE *)(a2 + 16) != 16)
  {
    result = llvm::getSplatValue((llvm *)a1, (const llvm::Value *)a2);
    if (result)
      return result;
    return 0;
  }
  v11 = *((unsigned int *)v6 + 8);
  if (*((_BYTE *)v6 + 8) == 18)
  {
    v12 = (unint64_t *)(a2 + 24);
    v13 = *(_DWORD *)(a2 + 32);
    if (v13 >= 0x41)
    {
      if (v13 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a2 + 24)) > 0x40)
        return (llvm::UndefValue *)llvm::PoisonValue::get((llvm::PoisonValue *)v6[3], (llvm::Type *)a2);
      v12 = (unint64_t *)*v12;
    }
    if (*v12 < v11)
      goto LABEL_24;
    return (llvm::UndefValue *)llvm::PoisonValue::get((llvm::PoisonValue *)v6[3], (llvm::Type *)a2);
  }
  v13 = *(_DWORD *)(a2 + 32);
LABEL_24:
  v14 = (unint64_t **)(a2 + 24);
  v15 = (unint64_t *)(a2 + 24);
  if (v13 < 0x41
    || (v16 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a2 + 24)), v15 = *v14, v13 - v16 <= 0x40))
  {
    if (*v15 < v11)
    {
      result = llvm::getSplatValue((llvm *)a1, (const llvm::Value *)a2);
      if (result)
        return result;
      v13 = *(_DWORD *)(a2 + 32);
    }
    if (v13 >= 0x41)
      v15 = *v14;
    else
      v15 = (unint64_t *)(a2 + 24);
  }
  result = llvm::findScalarElement((llvm *)a1, (llvm::Value *)*(unsigned int *)v15);
  if (!result)
    return 0;
  return result;
}

llvm::Constant **sub_1C4E6C1BC(llvm *this, uint64_t a2, llvm::Constant *a3, llvm::Type **a4, const llvm::DataLayout *a5)
{
  int v8;
  unsigned int v9;
  llvm::Constant **v12;
  llvm::Constant *v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v8 = (int)this;
  v9 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v9 <= 0x14)
    return (llvm::Constant **)llvm::ConstantFoldCastOperand((int)this, a2, a3, *a4, a5);
  if (!a2)
    goto LABEL_33;
  if (v9 < 0x1C || v9 - 79 < 0xFFFFFFF3)
    goto LABEL_33;
  v12 = *(llvm::Constant ***)(a2 - 32);
  if (*v12 != a3)
    goto LABEL_33;
  v13 = *(llvm::Constant **)a2;
  if ((*((_DWORD *)a3 + 2) & 0xFE) == 0x12)
    v14 = *(unsigned __int8 *)(**((_QWORD **)a3 + 2) + 8);
  else
    v14 = *((_DWORD *)a3 + 2);
  if (v14 == 15)
    llvm::DataLayout::getIntPtrType(*a4, a3);
  if ((*((_DWORD *)v13 + 2) & 0xFE) == 0x12)
    v15 = *(unsigned __int8 *)(**((_QWORD **)v13 + 2) + 8);
  else
    v15 = *((_DWORD *)v13 + 2);
  if (v15 == 15)
    llvm::DataLayout::getIntPtrType(*a4, v13);
  v16 = v9 - 28;
  if ((*((_DWORD *)a3 + 2) & 0xFE) == 0x12)
    v17 = *(unsigned __int8 *)(**((_QWORD **)a3 + 2) + 8);
  else
    v17 = *((_DWORD *)a3 + 2);
  if (v17 == 15)
    llvm::DataLayout::getIntPtrType(*a4, a3);
  if (llvm::CastInst::isEliminableCastPair(v16, v8, (uint64_t)a3, (uint64_t)v13, (uint64_t)a3) != 49)
  {
LABEL_33:
    if (v8 != 49)
      return 0;
    v12 = (llvm::Constant **)a2;
    if (*(llvm::Constant **)a2 != a3)
      return 0;
  }
  return v12;
}

llvm::UndefValue *llvm::SimplifyShuffleVectorInst(llvm *a1, llvm::Type *a2, char *__src, _BOOL8 a4, llvm::UndefValue *a5, uint64_t a6)
{
  llvm *v9;
  llvm *v10;
  uint64_t v11;
  llvm::PoisonValue *v13;
  unsigned int v14;
  int64_t v15;
  int v16;
  __int32 *v17;
  llvm::Type *v18;
  int v19;
  int v20;
  __int32 *v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  llvm *v26;
  unsigned int v27;
  llvm *v28;
  BOOL v29;
  __int32 *v30;
  uint64_t v31;
  __int32 v32;
  int v33;
  llvm *v34;
  uint64_t Impl;
  int v36;
  _QWORD *v37;
  llvm::UndefValue *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  __int32 *v47;
  uint64_t v48;
  llvm::Type *v50;
  uint64_t v51;
  llvm::UndefValue *v52;
  llvm::FixedVectorType ***v53;
  uint64_t v54;
  _QWORD **v55;
  int v56;
  __int32 *v57;
  __int32 *v58;
  __int32 *v59;
  uint64_t v60;
  uint64_t v61;
  __int32 v62;
  int v63;
  llvm *v64;
  llvm *v65;
  __int32 v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v71;
  BOOL v72;
  int v74;
  void *v75;
  uint64_t v76;
  _BYTE v77[128];
  __int32 *__s;
  size_t __n;
  _QWORD v80[18];

  v80[16] = *MEMORY[0x1E0C80C00];
  if (!a4)
    return llvm::UndefValue::get(a5, a2);
  v9 = a2;
  v10 = a1;
  v11 = 0;
  while (*(_DWORD *)&__src[v11] == -1)
  {
    v11 += 4;
    if (4 * a4 == v11)
      return llvm::UndefValue::get(a5, a2);
  }
  v13 = *(llvm::PoisonValue **)a1;
  v14 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  v74 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
  __s = (__int32 *)v80;
  __n = 0x2000000000;
  v15 = 4 * a4;
  if ((unint64_t)(4 * a4) >= 0x81)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__s, (uint64_t)v80, v15 >> 2, 4);
    v16 = __n;
    v17 = __s;
  }
  else
  {
    v16 = 0;
    v17 = (__int32 *)v80;
  }
  memcpy(&v17[v16], __src, v15);
  LODWORD(__n) = __n + ((unint64_t)v15 >> 2);
  if (v74 != 19)
  {
    if (a4)
    {
      v19 = 0;
      v20 = 0;
      v21 = __s;
      v22 = a4;
      do
      {
        v23 = *v21++;
        v24 = (v23 < v14) | v20;
        v25 = (v23 >= v14) | v19;
        if (v23 != -1)
        {
          v20 = v24;
          v19 = v25;
        }
        --v22;
      }
      while (v22);
      if ((v20 & 1) == 0)
        v10 = (llvm *)llvm::PoisonValue::get(v13, v18);
      if ((v19 & 1) != 0)
        goto LABEL_20;
    }
    else
    {
      v10 = (llvm *)llvm::PoisonValue::get(v13, v18);
    }
    v9 = (llvm *)llvm::PoisonValue::get(v13, v18);
  }
LABEL_20:
  if (*((unsigned __int8 *)v10 + 16) >= 0x15u)
    v26 = 0;
  else
    v26 = v10;
  v27 = *((unsigned __int8 *)v9 + 16);
  if (v27 >= 0x15)
    v28 = 0;
  else
    v28 = v9;
  if (v26)
    v29 = v28 == 0;
  else
    v29 = 1;
  if (v29)
  {
    if (v74 == 19 || !v26 || v28)
    {
      v34 = v9;
    }
    else
    {
      if (!(_DWORD)__n)
      {
LABEL_45:
        if (v27 == 90)
        {
          v36 = *((_DWORD *)v9 + 5);
          if ((v36 & 0x40000000) != 0)
            v37 = (_QWORD *)*((_QWORD *)v9 - 1);
          else
            v37 = (_QWORD *)((char *)v9 - 32 * (v36 & 0x7FFFFFF));
          v42 = v37[4];
          if (v42)
            v43 = *(unsigned __int8 *)(v42 + 16) > 0x14u;
          else
            v43 = 1;
          v39 = a5;
          if (v43)
            goto LABEL_92;
          v44 = v37[8];
          if (!v44 || *(_BYTE *)(v44 + 16) != 16)
            goto LABEL_92;
          v45 = (_QWORD *)(v44 + 24);
          if (*(_DWORD *)(v44 + 32) >= 0x41u)
            v45 = (_QWORD *)*v45;
          if (!(_DWORD)__n)
          {
LABEL_76:
            v75 = v77;
            v76 = 0x1000000000;
            sub_1C4848C0C((unsigned int *)&v75, a4, v42);
            if (a4)
            {
              v51 = 0;
              do
              {
                if (__s[v51] == -1)
                {
                  v52 = llvm::UndefValue::get(*(llvm::UndefValue **)v42, v50);
                  *((_QWORD *)v75 + v51) = v52;
                }
                ++v51;
              }
              while (a4 != v51);
            }
            v53 = (llvm::FixedVectorType ***)v75;
            v54 = v76;
            Impl = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)v75, (llvm::Type *)v76);
            if (!Impl)
            {
              llvm::FixedVectorType::get(**v53, (llvm::Type *)v54);
              Impl = sub_1C537B3A4(**v55 + 1288, (uint64_t)v55, v53, v54);
            }
            if (v75 != v77)
              free(v75);
            goto LABEL_123;
          }
          v46 = *(_DWORD *)v45;
          v47 = __s;
          v48 = 4 * __n;
          while (*v47 == v46 || *v47 == -1)
          {
            ++v47;
            v48 -= 4;
            if (!v48)
              goto LABEL_76;
          }
LABEL_85:
          if (v74 == 19)
          {
LABEL_86:
            Impl = 0;
            goto LABEL_123;
          }
LABEL_92:
          v57 = &__s[__n];
          v58 = wmemchr(__s, -1, __n);
          Impl = 0;
          if (v58)
            v59 = v58;
          else
            v59 = v57;
          if (!a4 || v59 != &__s[__n])
            goto LABEL_123;
          v60 = 0;
          v61 = 0;
          while (1)
          {
            v62 = __s[v60];
            if (v62 == -1)
              goto LABEL_86;
            v63 = -2;
            v64 = v10;
            v65 = v9;
            while (1)
            {
              v66 = *(_DWORD *)(*(_QWORD *)v65 + 32);
              v67 = v66 <= v62 ? *(_DWORD *)(*(_QWORD *)v65 + 32) : 0;
              v68 = (uint64_t)(v66 <= v62 ? v64 : v65);
              v69 = (v62 - v67);
              if (*(_BYTE *)(v68 + 16) != 91 || v68 == 0)
                break;
              Impl = 0;
              if (v63)
              {
                v65 = *(llvm **)(v68 - 64);
                v64 = *(llvm **)(v68 - 32);
                v62 = *(_DWORD *)(*(_QWORD *)(v68 + 64) + 4 * v69);
                ++v63;
                if (v62 != -1)
                  continue;
              }
              goto LABEL_123;
            }
            v71 = v68 == v61 || v61 == 0;
            v72 = v71 && v60 == v69;
            if (!v72 || *(llvm::UndefValue **)v68 != v39)
              goto LABEL_86;
            ++v60;
            v61 = v68;
            Impl = v68;
            if (v60 == a4)
              goto LABEL_123;
          }
        }
LABEL_48:
        if (v27 != 91 || *(_BYTE *)(a6 + 41) == 0)
        {
          v39 = a5;
        }
        else
        {
          v40 = sub_1C4E7B480((uint64_t)v10);
          v39 = a5;
          if (v13 == a5)
          {
            if (v40)
            {
              v41 = *((unsigned int *)v9 + 18);
              if ((_DWORD)v41)
              {
                if ((_DWORD)v41 == 1)
                {
                  Impl = (uint64_t)v9;
                  goto LABEL_123;
                }
                v56 = memcmp((const void *)(*((_QWORD *)v9 + 8) + 4), *((const void **)v9 + 8), 4 * v41 - 4);
                if (v56)
                  Impl = 0;
                else
                  Impl = (uint64_t)v9;
                if (!v56 || v74 == 19)
                  goto LABEL_123;
                goto LABEL_92;
              }
            }
          }
        }
        goto LABEL_85;
      }
      v30 = __s;
      v31 = 4 * __n;
      do
      {
        v32 = *v30;
        if (*v30 != -1)
        {
          if (v32 >= (int)v14)
            v33 = -v14;
          else
            v33 = v14;
          *v30 = v33 + v32;
        }
        ++v30;
        v31 -= 4;
      }
      while (v31);
      v34 = v10;
      v10 = v9;
    }
    v27 = *((unsigned __int8 *)v10 + 16);
    v9 = v10;
    v10 = v34;
    if (v74 == 19)
      goto LABEL_48;
    goto LABEL_45;
  }
  Impl = (uint64_t)llvm::ConstantExpr::getShuffleVector(v26, v28, (int *)__src, a4, 0);
LABEL_123:
  if (__s != (__int32 *)v80)
    free(__s);
  return (llvm::UndefValue *)Impl;
}

uint64_t sub_1C4E6C8F4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;

  if (!a1 || a1[16] > 0x14u || (result = llvm::ConstantExpr::get((llvm::ConstantExpr *)0xC, a1, 0, 0, a5)) == 0)
  {
    v7 = &v8;
    v8 = 0;
    if (sub_1C4E7B6EC(&v7, (uint64_t)a1))
      return v8;
    else
      return 0;
  }
  return result;
}

llvm::Value **llvm::SimplifyFAddInst(llvm *a1, llvm::Constant *a2, int a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E6C968(a1, a2, a3, a4, a5, a6);
}

llvm::Value **sub_1C4E6C968(llvm *a1, llvm::Constant *a2, int a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v6;
  int v7;
  llvm *v11;
  BOOL v12;
  int v13;
  llvm::Value **result;
  llvm *v15;
  int v16;
  char v17;
  int v18;
  llvm *v19;
  int v20;
  llvm::Type *v21;
  llvm *v22;
  int v23;
  llvm *v24;
  uint64_t *v25;
  int v26;
  llvm *v27;
  uint64_t *v28;
  llvm *v29;
  llvm *v30;
  llvm::PoisonValue **v31;
  llvm *v32;
  uint64_t v33;

  v6 = (int)a6;
  v7 = (int)a5;
  v11 = a1;
  v33 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a5)
    v12 = 0;
  else
    v12 = (_DWORD)a6 == 1;
  v13 = v12;
  if (v12 && a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
    {
      result = (llvm::Value **)llvm::ConstantFoldBinaryOpOperands((llvm *)0xE, a1, a2, *(llvm::Constant **)a4, a5, a6);
      v15 = a2;
      if (result)
        return result;
    }
    else
    {
      v15 = a1;
      v11 = a2;
    }
  }
  else
  {
    v15 = a2;
  }
  v31 = (llvm::PoisonValue **)v11;
  v32 = v15;
  result = (llvm::Value **)sub_1C4E7B804(&v31, (llvm::Type *)2, a3, a4, v7, v6);
  if (!result)
  {
    if (!v7 || (a3 & 2) != 0)
    {
      if (((v6 | 4) != 7 || (a3 & 8) != 0) && sub_1C4E5C46C((uint64_t)&v31, v15))
        return (llvm::Value **)v11;
      if (sub_1C4E7BA90((uint64_t)&v31, v15))
      {
        if ((a3 & 8) == 0)
        {
          v16 = llvm::CannotBeNegativeZero((uint64_t)v11, *(uint64_t **)(a4 + 8), 0);
          v17 = v16;
          if (v16)
            result = (llvm::Value **)v11;
          else
            result = 0;
          if ((v17 & 1) != 0 || ((v13 ^ 1) & 1) != 0)
            return result;
          goto LABEL_31;
        }
        return (llvm::Value **)v11;
      }
    }
    if (!v13)
      return 0;
LABEL_31:
    if ((a3 & 2) == 0)
      goto LABEL_32;
    v32 = v15;
    v20 = *((unsigned __int8 *)v11 + 16);
    if (v20 == 5)
    {
      if (*((_WORD *)v11 + 9) != 16
        || !sub_1C4E7BBEC((uint64_t)&v31, *((llvm::Constant **)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))))
      {
        goto LABEL_47;
      }
      v22 = (llvm *)((_QWORD *)v11 - 4 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF))[4];
    }
    else
    {
      if (v20 != 44 || !sub_1C4E5C310((uint64_t)&v31, *((llvm::Constant **)v11 - 8)))
        goto LABEL_47;
      v22 = (llvm *)*((_QWORD *)v11 - 4);
    }
    if (v32 == v22)
      return llvm::Constant::getNullValue(*(llvm::Constant **)v11, v21);
LABEL_47:
    v30 = v11;
    v23 = *((unsigned __int8 *)v15 + 16);
    if (v23 == 5)
    {
      if (*((_WORD *)v15 + 9) == 16
        && sub_1C4E7BBEC((uint64_t)&v29, *((llvm::Constant **)v15 - 4 * (*((_DWORD *)v15 + 5) & 0x7FFFFFF))))
      {
        v24 = (llvm *)((_QWORD *)v15 - 4 * (*((_DWORD *)v15 + 5) & 0x7FFFFFF))[4];
LABEL_54:
        if (v30 == v24)
          return llvm::Constant::getNullValue(*(llvm::Constant **)v11, v21);
      }
    }
    else if (v23 == 44 && sub_1C4E5C310((uint64_t)&v29, *((llvm::Constant **)v15 - 8)))
    {
      v24 = (llvm *)*((_QWORD *)v15 - 4);
      goto LABEL_54;
    }
    v31 = (llvm::PoisonValue **)v15;
    if (!sub_1C4E7BD14(&v31, (uint64_t)v11))
    {
      v29 = v11;
      if (!sub_1C4E7BD14(&v29, (uint64_t)v15))
      {
LABEL_32:
        if ((~a3 & 9) != 0)
          return 0;
        v18 = *((unsigned __int8 *)v11 + 16);
        if (v18 == 5)
        {
          if (*((_WORD *)v11 + 9) != 16)
            goto LABEL_62;
          v25 = (uint64_t *)((char *)v11 - 32 * (*((_DWORD *)v11 + 5) & 0x7FFFFFF));
          result = (llvm::Value **)*v25;
          if (!*v25)
            goto LABEL_62;
          v19 = (llvm *)v25[4];
        }
        else
        {
          if (v18 != 44)
            goto LABEL_62;
          result = (llvm::Value **)*((_QWORD *)v11 - 8);
          if (!result)
            goto LABEL_62;
          v19 = (llvm *)*((_QWORD *)v11 - 4);
        }
        if (v15 == v19)
          return result;
LABEL_62:
        v26 = *((unsigned __int8 *)v15 + 16);
        if (v26 == 5)
        {
          if (*((_WORD *)v15 + 9) == 16)
          {
            v28 = (uint64_t *)((char *)v15 - 32 * (*((_DWORD *)v15 + 5) & 0x7FFFFFF));
            result = (llvm::Value **)*v28;
            if (!*v28)
              return result;
            v27 = (llvm *)v28[4];
LABEL_69:
            if (v11 == v27)
              return result;
          }
        }
        else if (v26 == 44)
        {
          result = (llvm::Value **)*((_QWORD *)v15 - 8);
          if (!result)
            return result;
          v27 = (llvm *)*((_QWORD *)v15 - 4);
          goto LABEL_69;
        }
        return 0;
      }
    }
    return llvm::Constant::getNullValue(*(llvm::Constant **)v11, v21);
  }
  return result;
}

llvm::Constant *llvm::SimplifyFSubInst(llvm *a1, llvm::Constant *a2, int a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E6CCB4(a1, a2, a3, a4, a5, a6);
}

llvm::Constant *sub_1C4E6CCB4(llvm *a1, llvm::Constant *a2, int a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v6;
  int v7;
  BOOL v12;
  int v13;
  llvm::Constant *result;
  llvm::Type *v15;
  int v16;
  uint64_t v17;
  int v18;
  char *v19;
  int v20;
  llvm::Constant *v21;
  char *v23;
  llvm::Constant *v24;
  llvm::Constant *v25;
  uint64_t *v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  llvm::Constant *v30;
  uint64_t v31;

  v6 = (int)a6;
  v7 = (int)a5;
  v31 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a5)
    v12 = 0;
  else
    v12 = (_DWORD)a6 == 1;
  v13 = v12;
  if (v12)
  {
    if (a1)
    {
      if (*((unsigned __int8 *)a1 + 16) <= 0x14u)
      {
        if (a2)
        {
          if (*((unsigned __int8 *)a2 + 16) <= 0x14u)
          {
            result = llvm::ConstantFoldBinaryOpOperands((llvm *)0x10, a1, a2, *(llvm::Constant **)a4, a5, a6);
            if (result)
              return result;
          }
        }
      }
    }
  }
  v29 = (uint64_t *)a1;
  v30 = a2;
  result = sub_1C4E7B804((llvm::PoisonValue ***)&v29, (llvm::Type *)2, a3, a4, v7, v6);
  if (result)
    return result;
  if (!v7 || (a3 & 2) != 0)
  {
    if (((v6 | 4) != 7 || (a3 & 8) != 0) && sub_1C4E7BA90((uint64_t)&v29, a2)
      || sub_1C4E5C46C((uint64_t)&v29, a2)
      && ((a3 & 8) != 0 || (llvm::CannotBeNegativeZero((uint64_t)a1, *(uint64_t **)(a4 + 8), 0) & 1) != 0))
    {
      return a1;
    }
    v28 = 0;
    if (sub_1C4E5C46C((uint64_t)&v26, a1))
    {
      v29 = &v28;
      if (sub_1C4E7B6EC(&v29, (uint64_t)a2))
        return (llvm::Constant *)v28;
    }
  }
  else
  {
    v28 = 0;
  }
  if (!v13)
    return 0;
  if ((a3 & 8) == 0 || !sub_1C4E5C310((uint64_t)&v27, a1))
    goto LABEL_42;
  v30 = (llvm::Constant *)&v28;
  v16 = *((unsigned __int8 *)a2 + 16);
  if (v16 != 5)
  {
    if (v16 != 44)
      goto LABEL_40;
    if (!sub_1C4E5C310((uint64_t)&v29, *((llvm::Constant **)a2 - 8)))
      goto LABEL_40;
    v17 = *((_QWORD *)a2 - 4);
    if (!v17)
      goto LABEL_40;
LABEL_39:
    *(_QWORD *)v30 = v17;
    return (llvm::Constant *)v28;
  }
  if (*((_WORD *)a2 + 9) == 16
    && sub_1C4E7BBEC((uint64_t)&v29, *((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))))
  {
    v17 = ((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
    if (v17)
      goto LABEL_39;
  }
LABEL_40:
  v26 = &v28;
  if (sub_1C4E7B6EC(&v26, (uint64_t)a2))
    return (llvm::Constant *)v28;
LABEL_42:
  if (a1 == a2 && (a3 & 2) != 0)
    return (llvm::Constant *)llvm::Constant::getNullValue(*(llvm::Constant **)a1, v15);
  if ((~a3 & 9) != 0)
    return 0;
  v18 = *((unsigned __int8 *)a2 + 16);
  if (v18 == 5)
  {
    if (*((_WORD *)a2 + 9) == 16)
    {
      v19 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
      if (*(llvm **)v19 == a1)
      {
        result = (llvm::Constant *)*((_QWORD *)v19 + 4);
        if (result)
          return result;
      }
    }
  }
  else if (v18 == 44 && *((llvm **)a2 - 8) == a1)
  {
    result = (llvm::Constant *)*((_QWORD *)a2 - 4);
    if (result)
      return result;
  }
  v20 = *((unsigned __int8 *)a1 + 16);
  if (v20 == 5)
  {
    if (*((_WORD *)a1 + 9) == 14)
    {
      v23 = (char *)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF);
      v24 = *(llvm::Constant **)v23;
      v25 = (llvm::Constant *)*((_QWORD *)v23 + 4);
      if (v24 == a2)
      {
        v24 = v25;
        if (!v25)
          return 0;
      }
      else
      {
        result = 0;
        if (!v24 || v25 != a2)
          return result;
      }
      return v24;
    }
    return 0;
  }
  if (v20 != 42)
    return 0;
  v21 = (llvm::Constant *)*((_QWORD *)a1 - 8);
  result = (llvm::Constant *)*((_QWORD *)a1 - 4);
  if (v21 != a2)
  {
    if (result != a2 || v21 == 0)
      return 0;
    else
      return (llvm::Constant *)*((_QWORD *)a1 - 8);
  }
  return result;
}

llvm::Value **llvm::SimplifyFMulInst(llvm *a1, llvm::Constant *a2, int a3, llvm::Constant **a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E6CFEC(a1, a2, a3, a4, a5, a6);
}

llvm::Value **sub_1C4E6CFEC(llvm *a1, llvm::Constant *a2, int a3, llvm::Constant **a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v6;
  int v7;
  unsigned __int8 *v10;
  llvm *v11;
  llvm::ValueHandleBase *v12;

  v6 = (int)a6;
  v7 = (int)a5;
  v10 = (unsigned __int8 *)a2;
  v11 = a1;
  if (!(_DWORD)a5 && (_DWORD)a6 == 1 && a1 && *((unsigned __int8 *)a1 + 16) <= 0x14u)
  {
    if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
    {
      v12 = llvm::ConstantFoldBinaryOpOperands((llvm *)0x12, a1, a2, *a4, a5, a6);
      a1 = v11;
      if (v12)
        return (llvm::Value **)v12;
    }
    else
    {
      a1 = a2;
      v10 = (unsigned __int8 *)v11;
    }
  }
  return sub_1C4E6D0BC((llvm::PoisonValue **)a1, v10, a3, (uint64_t)a4, v7, v6);
}

llvm::Value **llvm::SimplifyFMAFMul(llvm::PoisonValue **a1, unsigned __int8 *a2, int a3, uint64_t a4, int a5, int a6)
{
  return sub_1C4E6D0BC(a1, a2, a3, a4, a5, a6);
}

llvm::Value **sub_1C4E6D0BC(llvm::PoisonValue **a1, unsigned __int8 *a2, int a3, uint64_t a4, int a5, int a6)
{
  llvm::Value **result;
  llvm::Type *v12;
  llvm::Constant *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v15 = (uint64_t)a1;
  v16 = a2;
  result = (llvm::Value **)sub_1C4E7B804((llvm::PoisonValue ***)&v15, (llvm::Type *)2, a3, a4, a5, a6);
  if (!result && !a5 && a6 == 1)
  {
    v15 = 0x3FF0000000000000;
    if ((sub_1C4E7BE28((const llvm::APInt **)&v15, a2) & 1) != 0)
      return a1;
    v15 = 0x3FF0000000000000;
    if ((sub_1C4E7BE28((const llvm::APInt **)&v15, (unsigned __int8 *)a1) & 1) != 0)
      return (llvm::Value **)a2;
    if ((~a3 & 0xA) == 0)
    {
      if (sub_1C4E5C310((uint64_t)&v15, (llvm::Constant *)a2))
      {
        v13 = *a1;
        return llvm::Constant::getNullValue(v13, v12);
      }
      if (sub_1C4E5C310((uint64_t)&v15, (llvm::Constant *)a1))
      {
        v13 = *(llvm::Constant **)a2;
        return llvm::Constant::getNullValue(v13, v12);
      }
    }
    v14 = 0;
    if (a1 == (llvm::PoisonValue **)a2
      && (LODWORD(v15) = 280, v16 = 0, v17 = &v14, sub_1C4E75A6C((uint64_t)&v15, (uint64_t)a1))
      && (a3 & 3) == 3)
    {
      if ((a3 & 8) != 0)
        return (llvm::Value **)v14;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

llvm::Constant *llvm::SimplifyFDivInst(llvm::PoisonValue **a1, llvm::Constant *a2, int a3, llvm::Constant **a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E6D224(a1, a2, a3, a4, a5, a6);
}

llvm::Constant *sub_1C4E6D224(llvm::PoisonValue **a1, llvm::Constant *a2, int a3, llvm::Constant **a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v6;
  int v7;
  BOOL v12;
  char v13;
  llvm::Constant *result;
  char v15;
  llvm::Type *v16;
  int v17;
  llvm::Constant *v18;
  llvm::PoisonValue *v19;
  double v20;
  uint64_t *v21;
  llvm::Constant *v22;
  int v23;
  llvm::PoisonValue **v24;
  _BYTE v25[8];
  llvm::PoisonValue **v26;
  uint64_t v27;
  llvm::Constant *v28;
  uint64_t v29;

  v6 = (int)a6;
  v7 = (int)a5;
  v29 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a5)
    v12 = 0;
  else
    v12 = (_DWORD)a6 == 1;
  v13 = !v12;
  if (!v12
    || !a1
    || *((unsigned __int8 *)a1 + 16) > 0x14u
    || !a2
    || *((unsigned __int8 *)a2 + 16) > 0x14u
    || (result = llvm::ConstantFoldBinaryOpOperands((llvm *)0x15, (llvm *)a1, a2, *a4, a5, a6)) == 0)
  {
    v27 = (uint64_t)a1;
    v28 = a2;
    result = sub_1C4E7B804((llvm::PoisonValue ***)&v27, (llvm::Type *)2, a3, (uint64_t)a4, v7, v6);
    v15 = result ? 1 : v13;
    if ((v15 & 1) == 0)
    {
      v27 = 0x3FF0000000000000;
      if ((sub_1C4E7BE28((const llvm::APInt **)&v27, (unsigned __int8 *)a2) & 1) != 0)
        return (llvm::Constant *)a1;
      if ((~a3 & 0xA) == 0 && sub_1C4E5C310((uint64_t)&v27, (llvm::Constant *)a1))
        return (llvm::Constant *)llvm::Constant::getNullValue(*a1, v16);
      if ((a3 & 2) == 0)
        return 0;
      if (a1 == (llvm::PoisonValue **)a2)
      {
        v19 = *a1;
        v20 = 1.0;
        return llvm::ConstantFP::get((llvm::ConstantFP **)v19, v16, v20);
      }
      v17 = *((unsigned __int8 *)a1 + 16);
      if ((a3 & 1) == 0)
      {
LABEL_37:
        v28 = a2;
        if (v17 == 44)
        {
          if (!sub_1C4E5C310((uint64_t)&v27, *(a1 - 8)))
            goto LABEL_46;
          v22 = *(a1 - 4);
          goto LABEL_45;
        }
LABEL_41:
        if (v17 != 5
          || *((_WORD *)a1 + 9) != 16
          || !sub_1C4E7BBEC((uint64_t)&v27, a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)]))
        {
          goto LABEL_46;
        }
        v22 = a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 4];
LABEL_45:
        if (v28 == v22)
        {
LABEL_54:
          v19 = *a1;
          v20 = -1.0;
          return llvm::ConstantFP::get((llvm::ConstantFP **)v19, v16, v20);
        }
LABEL_46:
        v26 = a1;
        v23 = *((unsigned __int8 *)a2 + 16);
        if (v23 == 5)
        {
          if (*((_WORD *)a2 + 9) != 16
            || !sub_1C4E7BBEC((uint64_t)v25, *((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))))
          {
            return 0;
          }
          v24 = (llvm::PoisonValue **)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
        }
        else
        {
          if (v23 != 44 || !sub_1C4E5C310((uint64_t)v25, *((llvm::Constant **)a2 - 8)))
            return 0;
          v24 = (llvm::PoisonValue **)*((_QWORD *)a2 - 4);
        }
        if (v26 == v24)
          goto LABEL_54;
        return 0;
      }
      if (v17 == 5)
      {
        if (*((_WORD *)a1 + 9) != 18)
          goto LABEL_40;
        v21 = (uint64_t *)&a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
        result = (llvm::Constant *)*v21;
        v18 = (llvm::Constant *)v21[4];
        if (!result)
        {
LABEL_35:
          if (v18)
          {
            v12 = result == a2;
            result = v18;
            if (v12)
              return result;
            goto LABEL_37;
          }
LABEL_40:
          v28 = a2;
          goto LABEL_41;
        }
      }
      else
      {
        if (v17 != 46)
          goto LABEL_37;
        result = *(a1 - 8);
        v18 = *(a1 - 4);
        if (!result)
          goto LABEL_35;
      }
      if (v18 == a2)
        return result;
      goto LABEL_35;
    }
  }
  return result;
}

llvm::APFloatBase *llvm::SimplifyFRemInst(llvm::PoisonValue **a1, llvm::PoisonValue **a2, char a3, llvm::Constant **a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E6D4DC(a1, a2, a3, a4, a5, a6);
}

llvm::APFloatBase *sub_1C4E6D4DC(llvm::PoisonValue **a1, llvm::PoisonValue **a2, char a3, llvm::Constant **a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v6;
  int v7;
  BOOL v12;
  char v13;
  llvm::APFloatBase *result;
  char v15;
  llvm::Type *v16;
  llvm::PoisonValue **v17[3];

  v6 = (int)a6;
  v7 = (int)a5;
  v17[2] = *(llvm::PoisonValue ***)MEMORY[0x1E0C80C00];
  if ((_DWORD)a5)
    v12 = 0;
  else
    v12 = (_DWORD)a6 == 1;
  v13 = !v12;
  if (!v12
    || !a1
    || *((unsigned __int8 *)a1 + 16) > 0x14u
    || !a2
    || *((unsigned __int8 *)a2 + 16) > 0x14u
    || (result = llvm::ConstantFoldBinaryOpOperands((llvm *)0x18, (llvm *)a1, (llvm::Constant *)a2, *a4, a5, a6)) == 0)
  {
    v17[0] = a1;
    v17[1] = a2;
    result = sub_1C4E7B804(v17, (llvm::Type *)2, a3, (uint64_t)a4, v7, v6);
    v15 = result ? 1 : v13;
    if ((v15 & 1) == 0)
    {
      if ((a3 & 2) == 0)
        return 0;
      if (sub_1C4E7BA90((uint64_t)v17, (llvm::Constant *)a1))
        return (llvm::APFloatBase *)llvm::Constant::getNullValue(*a1, v16);
      if (sub_1C4E5C46C((uint64_t)v17, (llvm::Constant *)a1))
        return llvm::ConstantFP::getZero(*a1, (llvm::Type *)1);
      else
        return 0;
    }
  }
  return result;
}

uint64_t llvm::SimplifyUnOp(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  return sub_1C4E6C8F4(a2, (uint64_t)a2, a3, a4, a5);
}

{
  return sub_1C4E6C8F4(a2, (uint64_t)a2, a3, a4, a5);
}

uint64_t llvm::SimplifyBinOp(int a1)
{
  return sub_1C4E6D628(a1);
}

uint64_t sub_1C4E6D628(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C4E6D64C + 4 * byte_1C85F3A5A[a1 - 13]))();
}

uint64_t sub_1C4E6D64C(int a1, llvm *a2, llvm::Constant *a3)
{
  return sub_1C4E62AE0(a2, a3);
}

llvm::Value **sub_1C4E6D660(int a1, llvm *a2, llvm::Constant *a3, uint64_t a4, uint64_t a5)
{
  return sub_1C4E6C968(a2, a3, 0, a5, 0, (llvm::DSOLocalEquivalent **)1);
}

llvm::Value **sub_1C4E6D67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E62F88(a2, a3, 0, 0, a5, a6);
}

llvm::Constant *sub_1C4E6D690(int a1, llvm *a2, llvm::Constant *a3, uint64_t a4, uint64_t a5)
{
  return sub_1C4E6CCB4(a2, a3, 0, a5, 0, (llvm::DSOLocalEquivalent **)1);
}

llvm::Value **sub_1C4E6D6AC(int a1, llvm *a2, llvm::Constant *a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E637C8(a2, a3, (uint64_t)a5, (int)a6, a5, a6);
}

llvm::Value **sub_1C4E6D6C0(int a1, llvm *a2, llvm::Constant *a3, uint64_t a4, llvm::Constant **a5)
{
  return sub_1C4E6CFEC(a2, a3, 0, a5, 0, (llvm::DSOLocalEquivalent **)1);
}

llvm::Value **sub_1C4E6D6DC(uint64_t a1, unsigned __int8 *a2, llvm::Constant *a3, uint64_t a4, llvm::Constant **a5, const llvm::DataLayout *a6)
{
  return sub_1C4E71D14((llvm *)0x13, a2, a3, a5, a6, (llvm::DSOLocalEquivalent **)a6);
}

llvm::Value **sub_1C4E6D6EC(uint64_t a1, llvm::Constant **a2, llvm::Constant *a3, uint64_t a4, llvm::Constant **a5, const llvm::DataLayout *a6)
{
  return sub_1C4E63A00(a2, a3, a5, a6);
}

llvm::Constant *sub_1C4E6D700(int a1, llvm::PoisonValue **a2, llvm::Constant *a3, uint64_t a4, llvm::Constant **a5)
{
  return sub_1C4E6D224(a2, a3, 0, a5, 0, (llvm::DSOLocalEquivalent **)1);
}

llvm::Value **sub_1C4E6D71C(uint64_t a1, unsigned __int8 *a2, llvm::Constant *a3, uint64_t a4, uint64_t a5, const llvm::DataLayout *a6)
{
  return sub_1C4E72984((llvm *)0x16, a2, a3, a5, a6, (llvm::DSOLocalEquivalent **)a6);
}

llvm::Value **sub_1C4E6D72C(uint64_t a1, llvm::Constant **a2, llvm::Constant *a3, uint64_t a4, uint64_t a5, const llvm::DataLayout *a6)
{
  return sub_1C4E63A84(a2, a3, a5, a6);
}

llvm::APFloatBase *sub_1C4E6D740(int a1, llvm::PoisonValue **a2, llvm::PoisonValue **a3, uint64_t a4, llvm::Constant **a5)
{
  return sub_1C4E6D4DC(a2, a3, 0, a5, 0, (llvm::DSOLocalEquivalent **)1);
}

llvm::Value **sub_1C4E6D75C(uint64_t a1, llvm::Constant *a2, llvm::Constant *a3, uint64_t a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E63B54(a2, a3, 0, 0, a5, a6);
}

llvm::Value **sub_1C4E6D770(uint64_t a1, uint64_t a2, llvm::Constant *a3, uint64_t a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E63C38(a2, a3, 0, a5, a6);
}

llvm::ValueHandleBase *sub_1C4E6D788(uint64_t a1, uint64_t a2, llvm::Constant *a3, uint64_t a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E63EA4(a2, a3, 0, a5, a6);
}

llvm::Value **sub_1C4E6D7A0(int a1, llvm *a2, llvm::Constant *a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E640C8(a2, a3, (uint64_t)a5, (int)a6, a5, a6);
}

llvm::ValueHandleBase *sub_1C4E6D7B4(int a1, llvm *a2, llvm::Constant *a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E65634(a2, a3, (uint64_t)a5, (int)a6, a5, a6);
}

llvm::ValueHandleBase *sub_1C4E6D7C8(int a1, llvm *a2, llvm::Constant *a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E661DC(a2, a3, (uint64_t)a5, (int)a6, a5, a6);
}

uint64_t llvm::SimplifyBinOp(int a1, llvm *a2, llvm::Constant *a3, int a4, llvm::Constant **a5)
{
  uint64_t result;

  switch(a1)
  {
    case 14:
      result = (uint64_t)sub_1C4E6C968(a2, a3, a4, (uint64_t)a5, 0, (llvm::DSOLocalEquivalent **)1);
      break;
    case 16:
      result = (uint64_t)sub_1C4E6CCB4(a2, a3, a4, (uint64_t)a5, 0, (llvm::DSOLocalEquivalent **)1);
      break;
    case 18:
      result = (uint64_t)sub_1C4E6CFEC(a2, a3, a4, a5, 0, (llvm::DSOLocalEquivalent **)1);
      break;
    case 21:
      result = (uint64_t)sub_1C4E6D224((llvm::PoisonValue **)a2, a3, a4, a5, 0, (llvm::DSOLocalEquivalent **)1);
      break;
    default:
      result = sub_1C4E6D628(a1);
      break;
  }
  return result;
}

llvm::Value **llvm::SimplifyCmpInst(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1C4E6D894(a1, a2, a3, a4, 3);
}

llvm::Value **sub_1C4E6D894(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if ((a1 - 32) > 9)
    return sub_1C4E69950(a1, a2, a3, 0, a4, a5);
  else
    return (llvm::Value **)sub_1C4E66730();
}

_QWORD *llvm::SimplifyCall(llvm *this, uint64_t **a2, const llvm::Function *a3)
{
  uint64_t v5;
  int v6;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  llvm *v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x1E0C80C00];
  if (this && *((_BYTE *)this + 16) == 84 && (*((_WORD *)this + 9) & 3) == 2)
    return 0;
  v5 = *((_QWORD *)this - 4);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if ((v6 - 11) < 2)
    return llvm::PoisonValue::get(*(llvm::PoisonValue **)this, (llvm::Type *)a2);
  if (*(_BYTE *)(v5 + 16))
  {
    if (v6 == 19)
      return llvm::PoisonValue::get(*(llvm::PoisonValue **)this, (llvm::Type *)a2);
  }
  else
  {
    if (llvm::canConstantFoldCallTo(this, *((const llvm::CallBase **)this - 4), a3))
    {
      v27 = v29;
      v28 = 0x400000000;
      v8 = *((unsigned __int8 *)this + 16);
      if (v8 == 84)
      {
        v9 = 0;
      }
      else if (v8 == 39)
      {
        v9 = (*((_DWORD *)this + 20) + 1);
      }
      else
      {
        v9 = 2;
      }
      v10 = 0;
      v11 = *((_DWORD *)this + 5);
      v12 = -(uint64_t)(v11 & 0x7FFFFFF);
      if (v11 < 0)
      {
        v23 = (char *)this - 32 * (v11 & 0x7FFFFFF);
        v24 = *((_QWORD *)v23 - 1);
        if ((v24 & 0xFFFFFFFF0) != 0)
          v10 = *((_DWORD *)v23 - 3) - *(_DWORD *)&v23[-v24];
        else
          v10 = 0;
      }
      v13 = ((-32 * v9 + 32 * -v10 - -32 * (unint64_t)(v11 & 0x7FFFFFF) - 32) >> 5);
      if (v13 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v13, 8);
        v11 = *((_DWORD *)this + 5);
        v12 = -(uint64_t)(v11 & 0x7FFFFFF);
        v8 = *((unsigned __int8 *)this + 16);
      }
      if (v8 == 84)
      {
        v14 = 0;
      }
      else if (v8 == 39)
      {
        v14 = (*((_DWORD *)this + 20) + 1);
      }
      else
      {
        v14 = 2;
      }
      v15 = (llvm *)((char *)this + 32 * v12);
      if (v11 < 0
        && (v25 = (char *)this - 32 * (v11 & 0x7FFFFFF), v26 = *((_QWORD *)v25 - 1), (v26 & 0xFFFFFFFF0) != 0))
      {
        v16 = (*((_DWORD *)v25 - 3) - *(_DWORD *)&v25[-v26]);
      }
      else
      {
        v16 = 0;
      }
      if (v15 != (llvm *)((char *)this + -32 * v16 + -32 * v14 - 32))
      {
        for (i = ((32 * v14 + 32 * v16) ^ 0xFFFFFFFFFFFFFFE0) - 32 * v12; i; i -= 32)
        {
          v18 = *(_QWORD *)v15;
          v19 = *(unsigned __int8 *)(*(_QWORD *)v15 + 16);
          if (*(_QWORD *)v15)
            v20 = v19 >= 0x15;
          else
            v20 = 1;
          if (v20)
          {
            if (v19 != 23)
            {
              v22 = 0;
              goto LABEL_32;
            }
          }
          else
          {
            v21 = v28;
            if (v28 >= (unint64_t)HIDWORD(v28))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 8);
              v21 = v28;
            }
            *((_QWORD *)v27 + v21) = v18;
            LODWORD(v28) = v28 + 1;
          }
          v15 = (llvm *)((char *)v15 + 32);
        }
      }
      v22 = llvm::ConstantFoldCall((uint64_t)this, (uint64_t ***)v5, (uint64_t)v27, v28, a2[1]);
LABEL_32:
      if (v27 != v29)
        free(v27);
      if (v22)
        return v22;
    }
    v6 = *(unsigned __int8 *)(v5 + 16);
  }
  if (v6)
    return 0;
  if ((*(_BYTE *)(v5 + 33) & 0x20) == 0)
    return 0;
  v22 = sub_1C4E6DBCC(this, (uint64_t)a2);
  if (!v22)
    return 0;
  return v22;
}

llvm::UndefValue *sub_1C4E6DBCC(llvm::ConstrainedFPIntrinsic *this, uint64_t a2)
{
  llvm::ConstrainedFPIntrinsic *v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AttributeAtIndex;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  __int128 v24;
  BOOL v25;
  llvm::UndefValue *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Type *v30;
  unsigned int v31;
  llvm::Type *v32;
  llvm::DSOLocalEquivalent **v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  _BOOL4 v42;
  uint64_t v44;
  llvm::ConstrainedFPIntrinsic *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  llvm *v57;
  llvm::Constant *v58;
  unint64_t v59;
  unsigned __int8 ExceptionBehavior;
  char RoundingMode;
  int v62;
  unsigned int v63;
  llvm::Type *v64;
  llvm::Type *v66;
  uint64_t v67;
  char v68;
  int v69;
  _BOOL4 v71;
  uint64_t v73;
  _QWORD *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned __int8 *v86;
  uint64_t v87;
  BOOL v88;
  unsigned int v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  _BOOL4 v96;
  unsigned int v97;
  const llvm::APInt *v98;
  int v99;
  uint64_t v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  int v103;
  int v104;
  BOOL v105;
  llvm::Type *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  int v121;
  llvm::APInt *v122;
  llvm::Constant *v123;
  llvm::PointerType *v124;
  llvm::Constant *v125;
  unsigned int v126;
  unint64_t v127;
  unsigned int v128;
  llvm *v129;
  llvm::Constant *v130;
  unint64_t v131;
  unsigned __int8 v132;
  char v133;
  int v134;
  llvm::PoisonValue **v135;
  llvm::Constant *v136;
  unint64_t v137;
  unsigned __int8 v138;
  char v139;
  int v140;
  llvm::PoisonValue **v141;
  llvm::PoisonValue **v142;
  unint64_t v143;
  unsigned __int8 v144;
  char v145;
  char v146;
  llvm *v147;
  llvm::Constant *v148;
  unint64_t v149;
  unsigned __int8 v150;
  char v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int8 v156;
  char v157;
  char v159;
  llvm::Constant *v160;
  BOOL v161;
  BOOL v162;
  llvm::APInt *v163;
  const llvm::APInt *v164;
  uint64_t v165;
  const void *v166;
  uint64_t v167;
  BOOL v168;
  llvm::Type *v169;
  unsigned int PrimitiveSizeInBits;
  unsigned int v171;
  unsigned int v172;
  BOOL IsZero;
  char *v174;
  llvm::APInt *v175;
  unsigned int v176;
  llvm::Type *v177;
  llvm::Type *v178;
  llvm::Constant *v179;
  char v180;
  BOOL v181;
  char v182;
  uint64_t v183;
  int v184;
  char v185;
  unsigned int *v186;
  uint64_t v187;
  const llvm::APFloat *v188;
  uint64_t v189;
  llvm::detail::DoubleAPFloat *v190;
  uint64_t v191;
  uint64_t v192;
  _BOOL4 v194;
  unsigned int v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD *v201;
  llvm::APInt *v202;
  uint64_t v203;
  unint64_t v204;
  int v205;
  char v206;
  int v207;
  int64_t v208;
  unint64_t v209;
  unsigned int v210;
  BOOL v211;
  char isNullValue;
  char v213;
  const void *v214;
  int v215;
  llvm::APInt *v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  BOOL v220;
  char v221;
  int v223;
  int v224;
  char v225;
  uint64_t v226;
  unsigned __int8 **v227;
  unsigned __int8 *v228;
  unsigned __int8 *v229;
  int v230;
  llvm::ConstantInt *v231;
  llvm *ElementPtr;
  const llvm::DataLayout *v233;
  _BYTE *v234;
  llvm::DSOLocalEquivalent **v235;
  int v236;
  BOOL v237;
  _QWORD *v238;
  uint64_t v239;
  BOOL v240;
  llvm::Constant **v241;
  llvm *v242;
  unsigned int v243;
  char v244;
  uint64_t v245;
  unsigned int v246;
  __int128 v247;
  unsigned __int8 *v248;
  __int128 v249;
  unsigned __int8 *v250;
  const llvm::DataLayout *v251;
  uint64_t *v252;
  char v253;
  uint64_t v254;
  const llvm::DataLayout *v255;
  uint64_t *v256;
  char v257;
  unsigned __int16 isImpliedCondition;
  unsigned __int16 v259;
  _QWORD *v260;
  char *v261;
  uint64_t v262;
  unsigned int v263;
  const llvm::APFloat *v264;
  BOOL v265;
  char v266;
  uint64_t v267;
  llvm::APInt *v268[2];
  int v269;
  char v270;
  uint64_t *v271;
  int v272;
  __int128 v273;
  llvm::APInt *v274;
  int v275;
  char v276;
  _BYTE __s2[32];
  __int128 v278;
  uint64_t v279;

  v3 = this;
  v279 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int8 *)this + 16);
  if (v4 == 84)
  {
    v5 = 0;
  }
  else if (v4 == 39)
  {
    v5 = (*((_DWORD *)this + 20) + 1);
  }
  else
  {
    v5 = 2;
  }
  v6 = *((_DWORD *)this + 5);
  if (v6 < 0
    && (v261 = (char *)this - 32 * (v6 & 0x7FFFFFF), v262 = *((_QWORD *)v261 - 1), (v262 & 0xFFFFFFFF0) != 0))
  {
    v8 = -(uint64_t)(v6 & 0x7FFFFFF);
    v7 = *((_DWORD *)v261 - 3) - *(_DWORD *)&v261[-v262];
  }
  else
  {
    v7 = 0;
    v8 = -(uint64_t)(v6 & 0x7FFFFFF);
  }
  v9 = (char *)this + 32 * -v7 + -32 * v5;
  v10 = (char *)this + 32 * v8;
  v11 = *((_QWORD *)this - 4);
  if (!v11 || *(_BYTE *)(v11 + 16) || *(_QWORD *)(v11 + 24) != *((_QWORD *)this + 9))
    v11 = 0;
  v12 = *(_DWORD *)(v11 + 36);
  switch(((unint64_t)(v9 - v10 - 32) >> 5))
  {
    case 0u:
      if (v12 != 382)
        return 0;
      v13 = *((_QWORD *)this + 5);
      if (!v13)
        return 0;
      v14 = *(_QWORD *)(v13 + 56);
      if (!v14)
        return 0;
      AttributeAtIndex = llvm::AttributeList::getAttributeAtIndex((uint64_t *)(v14 + 112), -1, 80);
      if (!AttributeAtIndex)
        return 0;
      v16 = 0;
      v20 = *(_QWORD *)(AttributeAtIndex + 16);
      v17 = HIDWORD(v20);
      v25 = v20 == 0;
      v18 = (_DWORD)v20 != 0;
      v19 = v20 & 0xFFFFFF00;
      v20 = v20;
      *(_DWORD *)__s2 = v17;
      if (v25)
        v20 = 0;
      v21 = v20 | v19 | (v18 << 32);
      v22 = *(_DWORD *)__s2;
      *(_DWORD *)__s2 = v17;
      *(_QWORD *)&__s2[4] = v21;
      *((_QWORD *)&v24 + 1) = v18;
      *(_QWORD *)&v24 = *(_QWORD *)__s2;
      v23 = v24 >> 32;
      if (HIDWORD(v23))
        v25 = v22 == (_DWORD)v23;
      else
        v25 = 0;
      if (!v25)
        return (llvm::UndefValue *)v16;
      return (llvm::UndefValue *)llvm::ConstantInt::get(**(llvm::ConstantInt ***)(*(_QWORD *)(v11 + 24) + 16), v22, 0);
    case 1u:
      v16 = *(_QWORD *)v10;
      v54 = sub_1C4E7BF8C(*(_DWORD *)(v11 + 36));
      if ((_DWORD)v54)
      {
        if (*(_BYTE *)(v16 + 16) == 84)
        {
          v55 = *(_QWORD *)(v16 - 32);
          if (v55)
          {
            if (!*(_BYTE *)(v55 + 16)
              && *(_QWORD *)(v55 + 24) == *(_QWORD *)(v16 + 72)
              && (*(_BYTE *)(v55 + 33) & 0x20) != 0
              && *(_DWORD *)(v55 + 36) == v12)
            {
              return (llvm::UndefValue *)v16;
            }
          }
        }
      }
      v267 = 0;
      if (v12 <= 175)
      {
        if (v12 <= 75)
        {
          if (v12 > 13)
          {
            if (v12 != 14)
            {
              if (v12 == 53)
              {
                v169 = *(llvm::Type **)v16;
                if ((*(_DWORD *)(*(_QWORD *)v16 + 8) & 0xFE) == 0x12)
                  v169 = (llvm::Type *)**((_QWORD **)v169 + 2);
                PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v169);
                v171 = PrimitiveSizeInBits;
                *(_DWORD *)&__s2[8] = PrimitiveSizeInBits;
                if (PrimitiveSizeInBits > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)__s2, 0, 0);
                  v172 = *(_DWORD *)&__s2[8];
                }
                else
                {
                  *(_QWORD *)__s2 = 0;
                  v172 = PrimitiveSizeInBits;
                }
                sub_1C4912E54(__s2, v172 - v171 + 1, v172);
                IsZero = llvm::MaskedValueIsZero((llvm *)v16, (const llvm::Value *)__s2, *(const llvm::APInt **)a2, 0, *(const llvm::DataLayout **)(a2 + 24), *(llvm::AssumptionCache **)(a2 + 32), *(const llvm::Instruction **)(a2 + 16), (const llvm::DominatorTree *)1, v265);
                if (*(_DWORD *)&__s2[8] >= 0x41u && *(_QWORD *)__s2)
                  MEMORY[0x1CAA32F9C](*(_QWORD *)__s2, 0x1000C8000313F17);
                if (IsZero)
                  return (llvm::UndefValue *)v16;
              }
              else if (v12 == 75 && (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 17) & 2) != 0)
              {
                v56 = 175;
                goto LABEL_310;
              }
              return 0;
            }
            goto LABEL_208;
          }
          if (v12 == 8)
          {
            v56 = 8;
          }
          else
          {
            if (v12 != 9)
              return 0;
            v56 = 9;
          }
LABEL_310:
          *(_DWORD *)__s2 = v56;
          *(_QWORD *)&__s2[8] = 0;
          *(_QWORD *)&__s2[16] = &v267;
          if (!sub_1C4E75A6C((uint64_t)__s2, v16))
            return 0;
          return (llvm::UndefValue *)v267;
        }
        if (v12 > 138)
        {
          if (v12 == 139)
          {
            if ((sub_1C4F876C8((unsigned __int8 *)v16, *(uint64_t **)(a2 + 8), 1, 0) & 1) == 0)
              return 0;
            return (llvm::UndefValue *)v16;
          }
          if (v12 != 140)
          {
            if (v12 == 175 && (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 17) & 2) != 0)
            {
              v56 = 75;
              goto LABEL_310;
            }
            return 0;
          }
LABEL_208:
          v113 = *(unsigned __int8 *)(v16 + 16);
          v114 = v113 - 28;
          v116 = v113 < 0x1C && v113 != 5;
          if (v16 && !v116)
          {
            if (v113 > 0x1B)
            {
              if (v113 == 72)
                return (llvm::UndefValue *)v16;
            }
            else
            {
              v114 = *(unsigned __int16 *)(v16 + 18);
              if (v114 == 44)
                return (llvm::UndefValue *)v16;
            }
            if (v114 == 43)
              return (llvm::UndefValue *)v16;
          }
          return 0;
        }
        if (v12 == 76)
        {
          if ((*(_BYTE *)(*(_QWORD *)(a2 + 32) + 17) & 2) == 0)
            return 0;
          v56 = 177;
          goto LABEL_310;
        }
        if (v12 != 133)
          return 0;
        *(_DWORD *)__s2 = 133;
        *(_QWORD *)&__s2[8] = 0;
        *(_QWORD *)&__s2[16] = &v267;
        if (!sub_1C4E75A6C((uint64_t)__s2, v16))
        {
          if ((llvm::isSplatValue((const void **)v16, (const llvm::Value *)0xFFFFFFFFLL, 0, v128) & 1) == 0)
            return 0;
          return (llvm::UndefValue *)v16;
        }
        return (llvm::UndefValue *)v267;
      }
      if (v12 <= 257)
      {
        switch(v12)
        {
          case 176:
            if ((*(_BYTE *)(*(_QWORD *)(a2 + 32) + 17) & 2) == 0)
              return 0;
            *(_DWORD *)__s2 = 238;
            *(_OWORD *)&__s2[8] = xmmword_1C85F3720;
            *(_QWORD *)&__s2[24] = 1;
            *(_QWORD *)&v278 = &v267;
            if (!sub_1C4E7C01C((uint64_t)__s2, v16))
              return 0;
            break;
          case 177:
            if ((*(_BYTE *)(*(_QWORD *)(a2 + 32) + 17) & 2) == 0)
              return 0;
            LODWORD(v273) = 76;
            *((_QWORD *)&v273 + 1) = 0;
            v274 = (llvm::APInt *)&v267;
            if (!sub_1C4E75A6C((uint64_t)&v273, v16))
            {
              *(_DWORD *)__s2 = 238;
              *(_OWORD *)&__s2[8] = xmmword_1C85F3730;
              *(_QWORD *)&__s2[24] = 1;
              *(_QWORD *)&v278 = &v267;
              if ((sub_1C4E7C01C((uint64_t)__s2, v16) & 1) == 0)
                return 0;
            }
            break;
          case 203:
            goto LABEL_208;
          default:
            return 0;
        }
        return (llvm::UndefValue *)v267;
      }
      if ((v12 - 258) <= 0x26 && ((1 << (v12 - 2)) & 0x4000000007) != 0)
        goto LABEL_208;
      if (v12 != 1851 && v12 != 2131)
        return 0;
      if (!v16 || *(_BYTE *)(v16 + 16) != 17)
        return 0;
      v66 = *(llvm::Type **)v16;
      if ((*(unsigned __int8 *)(*(_QWORD *)v16 + 8) | 2) != 2)
        return 0;
      v67 = *(_QWORD *)(v16 + 32);
      if ((_UNKNOWN *)v67 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&__s2[8], (const llvm::detail::DoubleAPFloat *)(v16 + 32));
      }
      else
      {
        *(_QWORD *)&__s2[8] = *(_QWORD *)(v16 + 32);
        if ((*(_DWORD *)(v67 + 8) + 64) >= 0x80)
        {
          v54 = operator new[]();
          *(_QWORD *)&__s2[16] = v54;
        }
        v68 = *(_BYTE *)(v16 + 52);
        v69 = v68 & 7;
        __s2[28] = v68 & 0xF;
        *(_DWORD *)&__s2[24] = *(_DWORD *)(v16 + 48);
        v71 = (v68 & 6) != 0 && v69 != 3;
        if (v69 == 1 || v71)
        {
          v73 = *(unsigned int *)(v67 + 8);
          if ((v73 - 64) <= 0xFFFFFF7F)
            v74 = (_QWORD *)v54;
          else
            v74 = &__s2[16];
          v77 = *(uint64_t **)(v16 + 40);
          v76 = (uint64_t *)(v16 + 40);
          v75 = v77;
          if ((*(_DWORD *)(*(v76 - 1) + 8) - 64) >= 0xFFFFFF80)
            v75 = v76;
          if (v73 <= 0xFFFFFFBF)
          {
            v78 = (unint64_t)(v73 + 64) >> 6;
            do
            {
              v79 = *v75++;
              *v74++ = v79;
              --v78;
            }
            while (v78);
            v80 = v276 & 0xF0;
LABEL_655:
            llvm::APFloat::convert((uint64_t)__s2, &unk_1C866F198, 1, &v266);
            *(float *)&v263 = fmin(fmax(llvm::APFloat::convertToDouble((llvm::APFloat *)__s2), 0.0), 1.0);
            v272 = 32;
            v271 = (uint64_t *)v263;
            llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)v268, (const llvm::APInt **)&v271);
            *((llvm::APInt **)&v273 + 1) = v268[0];
            v274 = v268[1];
            v275 = v269;
            v276 = v80 | v270 & 0xF;
            sub_1C48552C0((uint64_t)&__s2[8], (uint64_t)&v273 + 8);
            if (*((_UNKNOWN **)&v273 + 1) == &unk_1C866F1C0)
            {
              sub_1C4773C74((uint64_t *)&v274);
            }
            else if ((*(_DWORD *)(*((_QWORD *)&v273 + 1) + 8) - 64) <= 0xFFFFFF7F && v274)
            {
              MEMORY[0x1CAA32F9C](v274, 0x1000C8000313F17);
            }
            if (!*((_BYTE *)v66 + 8))
              llvm::APFloat::convert((uint64_t)__s2, &unk_1C866F15C, 1, &v266);
            v16 = (uint64_t)llvm::ConstantFP::get(*(llvm::ConstantFP **)v66, (llvm::LLVMContext *)__s2, v264);
            v51 = *(_QWORD *)&__s2[8];
            if (*(_UNKNOWN **)&__s2[8] == &unk_1C866F1C0)
            {
LABEL_651:
              sub_1C4773C74((uint64_t *)&__s2[16]);
              return (llvm::UndefValue *)v16;
            }
LABEL_71:
            if ((*(_DWORD *)(v51 + 8) - 64) > 0xFFFFFF7F || !*(_QWORD *)&__s2[16])
              return (llvm::UndefValue *)v16;
            goto LABEL_187;
          }
        }
      }
      v80 = 0;
      goto LABEL_655;
    case 2u:
      v27 = *(llvm::UndefValue **)v10;
      v28 = *((_QWORD *)v10 + 4);
      v29 = **(_QWORD **)(*(_QWORD *)(v11 + 24) + 16);
      v30 = (llvm::Type *)v29;
      if ((*(_DWORD *)(v29 + 8) & 0xFE) == 0x12)
        v30 = **(llvm::Type ***)(v29 + 16);
      v31 = llvm::Type::getPrimitiveSizeInBits(v30);
      if (v12 > 273)
      {
        v63 = v31;
        switch(v12)
        {
          case 300:
            if ((sub_1C4D9ED34((uint64_t)__s2, v27) & 1) == 0
              && (sub_1C4D9ED34((uint64_t)&v273, (llvm::Constant *)v28) & 1) == 0)
            {
              goto LABEL_338;
            }
            goto LABEL_342;
          case 301:
            goto LABEL_333;
          case 302:
          case 303:
          case 304:
          case 307:
          case 308:
          case 310:
            goto LABEL_343;
          case 305:
          case 306:
LABEL_176:
            if (v27 == (llvm::UndefValue *)v28)
              return v27;
            v97 = *((unsigned __int8 *)v27 + 16);
            if (v97 >= 0x15)
              v36 = v28;
            else
              v36 = (uint64_t)v27;
            if (v97 < 0x15)
              v27 = (llvm::UndefValue *)v28;
            if (*(_BYTE *)(a2 + 41) && sub_1C4E7B480(v36))
            {
              sub_1C4DF901C(v12, v63, (llvm::APInt *)__s2);
              v16 = (uint64_t)llvm::ConstantInt::get((llvm::ConstantInt **)v29, (llvm::Type *)__s2, v98);
              goto LABEL_185;
            }
            v268[0] = 0;
            *(_QWORD *)__s2 = v268;
            *(_QWORD *)&__s2[8] = 1;
            if (!sub_1C4D89F84((uint64_t)__s2, (unsigned __int8 *)v36))
              goto LABEL_599;
            v163 = v268[0];
            sub_1C4DF901C(v12, v63, (llvm::APInt *)__s2);
            v165 = *((unsigned int *)v163 + 2);
            if (v165 > 0x40)
            {
              v214 = *(const void **)v163;
              v167 = *(_QWORD *)__s2;
              v168 = memcmp(v214, *(const void **)__s2, ((unint64_t)(v165 + 63) >> 3) & 0x3FFFFFF8) == 0;
            }
            else
            {
              v166 = *(const void **)v163;
              v167 = *(_QWORD *)__s2;
              v168 = v166 == *(const void **)__s2;
            }
            v215 = v168;
            if (*(_DWORD *)&__s2[8] >= 0x41u && v167)
              MEMORY[0x1CAA32F9C](v167, 0x1000C8000313F17);
            v216 = v268[0];
            if (v215)
              return (llvm::UndefValue *)llvm::ConstantInt::get((llvm::ConstantInt **)v29, v268[0], v164);
            switch(v12)
            {
              case 306:
                v217 = 305;
                break;
              case 274:
                v217 = 275;
                break;
              case 275:
                v217 = 274;
                break;
              default:
                v217 = 306;
                break;
            }
            sub_1C4DF901C(v217, v63, (llvm::APInt *)__s2);
            v218 = *((unsigned int *)v216 + 2);
            v219 = *(_QWORD *)__s2;
            if (v218 > 0x40)
              v220 = memcmp(*(const void **)v216, *(const void **)__s2, ((unint64_t)(v218 + 63) >> 3) & 0x3FFFFFF8) == 0;
            else
              v220 = *(_QWORD *)v216 == *(_QWORD *)__s2;
            v225 = v220;
            if (*(_DWORD *)&__s2[8] >= 0x41u && v219)
              MEMORY[0x1CAA32F9C](v219, 0x1000C8000313F17);
            if ((v225 & 1) != 0)
              return v27;
            if (*((_BYTE *)v27 + 16) == 84)
            {
              v226 = *((_QWORD *)v27 - 4);
              if (v226)
              {
                if (!*(_BYTE *)(v226 + 16)
                  && *(_QWORD *)(v226 + 24) == *((_QWORD *)v27 + 9)
                  && (*(_BYTE *)(v226 + 33) & 0x20) != 0
                  && *(_DWORD *)(v226 + 36) == v12)
                {
                  v227 = (unsigned __int8 **)((char *)v27 - 32 * (*((_DWORD *)v27 + 5) & 0x7FFFFFF));
                  v228 = *v227;
                  v229 = v227[4];
                  v271 = 0;
                  *(_QWORD *)__s2 = &v271;
                  *(_QWORD *)&__s2[8] = 0;
                  if ((sub_1C4D89F84((uint64_t)__s2, v228) & 1) != 0
                    || (*(_QWORD *)&v273 = &v271,
                        *((_QWORD *)&v273 + 1) = 0,
                        sub_1C4D89F84((uint64_t)&v273, v229)))
                  {
                    if (v12 > 304)
                    {
                      if (v12 == 306)
                        v230 = 36;
                      else
                        v230 = 34;
                    }
                    else if (v12 == 274)
                    {
                      v230 = 38;
                    }
                    else
                    {
                      v230 = 40;
                    }
                    v243 = (v230 - 2) >> 1;
                    if (v243 <= 0x13 && ((0xF0033u >> v243) & 1) != 0)
                      v230 = dword_1C85F3BDC[v243];
                    llvm::ICmpInst::compare((uint64_t)v271, (uint64_t)v268[0], v230);
                    if ((v244 & 1) != 0)
                      return v27;
                  }
                }
              }
            }
LABEL_599:
            v16 = sub_1C4E7C0B8(v12, (uint64_t)v27, v36);
            if (v16)
              return (llvm::UndefValue *)v16;
            v16 = sub_1C4E7C0B8(v12, v36, (uint64_t)v27);
            if (v16)
              return (llvm::UndefValue *)v16;
            if (v12 > 304)
            {
              if (v12 == 306)
                v245 = 36;
              else
                v245 = 34;
            }
            else if (v12 == 274)
            {
              v245 = 38;
            }
            else
            {
              v245 = 40;
            }
            v246 = (v245 - 2) >> 1;
            if (v246 <= 0x13 && ((0xF0033u >> v246) & 1) != 0)
              v245 = dword_1C85F3BDC[v246];
            v247 = *(_OWORD *)(a2 + 32);
            *(_OWORD *)&__s2[16] = *(_OWORD *)(a2 + 16);
            v278 = v247;
            *(_OWORD *)__s2 = *(_OWORD *)a2;
            BYTE9(v278) = 0;
            v248 = (unsigned __int8 *)sub_1C4E66730(v245, v27, (llvm::UndefValue *)v36, (uint64_t)__s2, 3);
            if (v248 && v248[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)v248))
              return v27;
            v249 = *(_OWORD *)(a2 + 32);
            *(_OWORD *)&__s2[16] = *(_OWORD *)(a2 + 16);
            v278 = v249;
            *(_OWORD *)__s2 = *(_OWORD *)a2;
            BYTE9(v278) = 0;
            v250 = (unsigned __int8 *)sub_1C4E66730(v245, (llvm *)v36, v27, (uint64_t)__s2, 3);
            if (v250 && v250[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)v250))
              return (llvm::UndefValue *)v36;
            v251 = *(const llvm::DataLayout **)a2;
            v252 = (uint64_t *)sub_1C4F904E0(*(_QWORD *)(a2 + 32));
            if (v252)
            {
              isImpliedCondition = llvm::isImpliedCondition(v252, v245, (uint64_t)v27, v36, v251, v253 & 1, 0);
              v16 = (_BYTE)isImpliedCondition ? (uint64_t)v27 : v36;
              if (isImpliedCondition >= 0x100u)
                return (llvm::UndefValue *)v16;
            }
            v254 = *(_QWORD *)(a2 + 32);
            v255 = *(const llvm::DataLayout **)a2;
            v256 = (uint64_t *)sub_1C4F904E0(v254);
            if (v256)
            {
              v259 = llvm::isImpliedCondition(v256, v245, v36, (uint64_t)v27, v255, v257 & 1, 0);
              v16 = (_BYTE)v259 ? v36 : (uint64_t)v27;
              if (v259 >= 0x100u)
                return (llvm::UndefValue *)v16;
            }
            return 0;
          case 309:
LABEL_278:
            if (v27)
              v161 = *((unsigned __int8 *)v27 + 16) > 0x14u;
            else
              v161 = 1;
            if (v161
              || (v182 = llvm::Constant::isNullValue(v27),
                  (v182 & 1) == 0 && (sub_1C4E71060((uint64_t)__s2, v27) & 1) == 0))
            {
              v162 = !v28 || *(unsigned __int8 *)(v28 + 16) > 0x14u;
              if (v162
                || (isNullValue = llvm::Constant::isNullValue((llvm::Constant *)v28),
                    (isNullValue & 1) == 0 && (sub_1C4E71060((uint64_t)__s2, (llvm::Constant *)v28) & 1) == 0))
              {
                if (!*(_BYTE *)(a2 + 41)
                  || (sub_1C4E7B480((uint64_t)v27) & 1) == 0
                  && (!*(_BYTE *)(a2 + 41) || !sub_1C4E7B480(v28)))
                {
                  return 0;
                }
              }
            }
            goto LABEL_524;
          case 311:
            if (v27)
              v181 = *((unsigned __int8 *)v27 + 16) > 0x14u;
            else
              v181 = 1;
            if (!v181)
            {
              v213 = llvm::Constant::isNullValue(v27);
              if ((v213 & 1) != 0 || (sub_1C4E71060((uint64_t)__s2, v27) & 1) != 0)
                goto LABEL_524;
            }
            if ((sub_1C4D9ED34((uint64_t)__s2, (llvm::Constant *)v28) & 1) != 0)
              goto LABEL_524;
LABEL_352:
            if (v27 == (llvm::UndefValue *)v28
              || *(_BYTE *)(a2 + 41)
              && ((sub_1C4E7B480((uint64_t)v27) & 1) != 0 || *(_BYTE *)(a2 + 41) && sub_1C4E7B480(v28)))
            {
              goto LABEL_524;
            }
            if (!v28 || *(unsigned __int8 *)(v28 + 16) > 0x14u)
              return 0;
            if ((llvm::Constant::isNullValue((llvm::Constant *)v28) & 1) != 0)
              return v27;
            v180 = sub_1C4E71060((uint64_t)__s2, (llvm::Constant *)v28);
            goto LABEL_344;
          case 312:
LABEL_272:
            if (v27 != (llvm::UndefValue *)v28
              && (!*(_BYTE *)(a2 + 41)
               || (sub_1C4E7B480((uint64_t)v27) & 1) == 0 && (!*(_BYTE *)(a2 + 41) || !sub_1C4E7B480(v28))))
            {
              return 0;
            }
            return (llvm::UndefValue *)llvm::Constant::getNullValue((llvm::Constant *)v29, v32);
          default:
            switch(v12)
            {
              case 274:
              case 275:
                goto LABEL_176;
              case 276:
              case 277:
              case 279:
              case 280:
              case 281:
              case 282:
                goto LABEL_343;
              case 278:
                goto LABEL_278;
              case 283:
                goto LABEL_352;
              case 284:
                goto LABEL_272;
              default:
                if (v12 != 1847)
                  goto LABEL_343;
                if (!v27 || *((_BYTE *)v27 + 16) != 17)
                  return 0;
                if (*((_UNKNOWN **)v27 + 4) == &unk_1C866F1C0)
                  v174 = (char *)*((_QWORD *)v27 + 5);
                else
                  v174 = (char *)v27 + 24;
                if ((v174[28] & 7) == 1)
                  v16 = v28;
                else
                  v16 = (uint64_t)v27;
                break;
            }
            return (llvm::UndefValue *)v16;
        }
      }
      if (v12 > 191)
      {
        v34 = (v12 - 192);
        if (v34 <= 0x2F)
        {
          if (((1 << (v12 + 64)) & 0x603) != 0)
          {
            if (v27 != (llvm::UndefValue *)v28)
            {
              v35 = *((unsigned __int8 *)v27 + 16);
              if (v35 >= 0x15)
                v36 = v28;
              else
                v36 = (uint64_t)v27;
              if (v35 >= 0x15)
                v16 = (uint64_t)v27;
              else
                v16 = v28;
              if (*(_BYTE *)(a2 + 41) && (sub_1C4E7B480(v36) & 1) != 0)
                return (llvm::UndefValue *)v16;
              if (sub_1C4E7A4A8((uint64_t)__s2, (llvm::Constant *)v36))
              {
                if (v12 != 201 && v12 != 192)
                  return (llvm::UndefValue *)v16;
                if ((llvm::Constant::isNaN((llvm::Constant *)v36) & 1) != 0)
                  return (llvm::UndefValue *)v36;
                return llvm::ConstantFP::getNaN(*(llvm::ConstantFP **)v36, 0, 0);
              }
              *(_QWORD *)&v273 = 0;
              *(_QWORD *)__s2 = &v273;
              *(_QWORD *)&__s2[8] = 0;
              if (sub_1C4E7A604((uint64_t)__s2, (unsigned __int8 *)v36))
              {
                v189 = v273;
                v190 = (llvm::detail::DoubleAPFloat *)(v273 + 8);
                v191 = *(_QWORD *)(v273 + 8);
                v192 = v273;
                if ((_UNKNOWN *)v191 == &unk_1C866F1C0)
                  v192 = *(_QWORD *)(v273 + 16);
                if ((*(_BYTE *)(v192 + 28) & 7) != 0)
                {
                  if ((*(_BYTE *)(*(_QWORD *)(a2 + 32) + 17) & 8) == 0)
                    goto LABEL_414;
                  if ((_UNKNOWN *)v191 == &unk_1C866F1C0)
                  {
                    if (!llvm::detail::DoubleAPFloat::isLargest(v190))
                      goto LABEL_414;
                    v189 = v273;
                  }
                  else
                  {
                    v194 = (*(_BYTE *)(v273 + 28) & 6) != 0 && (*(_BYTE *)(v273 + 28) & 7) != 3;
                    if (*(_DWORD *)(v191 + 16) == 1)
                    {
                      if (!v194
                        || *(_DWORD *)(v273 + 24) != *(_DWORD *)v191
                        || !llvm::detail::IEEEFloat::isSignificandAllOnesExceptLSB(v190))
                      {
                        goto LABEL_414;
                      }
                    }
                    else if (!v194
                           || *(_DWORD *)(v273 + 24) != *(_DWORD *)v191
                           || !llvm::detail::IEEEFloat::isSignificandAllOnes(v190))
                    {
                      goto LABEL_414;
                    }
                  }
                }
                v195 = v12 - 201;
                v196 = *(void **)(v189 + 8);
                v197 = v189;
                if (v196 == &unk_1C866F1C0)
                  v197 = *(_QWORD *)(v189 + 16);
                if ((((v195 < 2) ^ ((*(_BYTE *)(v197 + 28) & 8) >> 3)) & 1) == 0
                  && (v12 != 201 && v12 != 192 || (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 17) & 4) != 0))
                {
                  return (llvm::UndefValue *)llvm::ConstantFP::get((llvm::ConstantFP **)v29, (llvm::Type *)v189, v188);
                }
                if (v196 == &unk_1C866F1C0)
                  v189 = *(_QWORD *)(v189 + 16);
                if (v195 < 2 != (*(_BYTE *)(v189 + 28) & 8) >> 3
                  && (v12 == 192 || v12 == 201 || (*(_BYTE *)(*(_QWORD *)(a2 + 32) + 17) & 4) != 0))
                {
                  return (llvm::UndefValue *)v16;
                }
              }
LABEL_414:
              if (*(_BYTE *)(v16 + 16) == 84)
              {
                v198 = *(_QWORD *)(v16 - 32);
                if (v198)
                {
                  if (!*(_BYTE *)(v198 + 16)
                    && *(_QWORD *)(v198 + 24) == *(_QWORD *)(v16 + 72)
                    && (*(_BYTE *)(v198 + 33) & 0x20) != 0
                    && *(_DWORD *)(v198 + 36) == v12)
                  {
                    v199 = (_QWORD *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF));
                    if (*v199 == v36 || v199[4] == v36)
                      return (llvm::UndefValue *)v16;
                  }
                }
              }
              if (*(_BYTE *)(v36 + 16) != 84)
                return 0;
              v200 = *(_QWORD *)(v36 - 32);
              if (!v200
                || *(_BYTE *)(v200 + 16)
                || *(_QWORD *)(v200 + 24) != *(_QWORD *)(v36 + 72)
                || (*(_BYTE *)(v200 + 33) & 0x20) == 0
                || *(_DWORD *)(v200 + 36) != v12)
              {
                return 0;
              }
              v201 = (_QWORD *)(v36 - 32 * (*(_DWORD *)(v36 + 20) & 0x7FFFFFF));
              if (*v201 != v16)
              {
                v25 = v201[4] == v16;
                v16 = v36;
                if (v25)
                  return (llvm::UndefValue *)v16;
                return 0;
              }
              return (llvm::UndefValue *)v36;
            }
            return v27;
          }
          if (v34 == 47)
          {
            if (!v28 || *(_BYTE *)(v28 + 16) != 16)
              return 0;
            v175 = (llvm::APInt *)(v28 + 24);
            v176 = *(_DWORD *)(v28 + 32);
            if (v176 > 0x40)
            {
              v224 = llvm::APInt::countLeadingZerosSlowCase(v175);
              if (v224 != v176)
              {
                v16 = (uint64_t)v27;
                if (v224 == v176 - 1)
                  return (llvm::UndefValue *)v16;
                return 0;
              }
            }
            else if (*(_QWORD *)v175)
            {
              v16 = (uint64_t)v27;
              if (*(_QWORD *)v175 != 1)
                return 0;
              return (llvm::UndefValue *)v16;
            }
            return llvm::ConstantFP::get(*(llvm::ConstantFP ***)v27, v32, 1.0);
          }
        }
        if (v12 != 262)
        {
          if (v12 == 263)
          {
LABEL_333:
            if (!*(_BYTE *)(a2 + 41)
              || (sub_1C4E7B480((uint64_t)v27) & 1) == 0 && (!*(_BYTE *)(a2 + 41) || !sub_1C4E7B480(v28)))
            {
              return 0;
            }
            *(_QWORD *)__s2 = llvm::Constant::getAllOnesValue(**(llvm::Constant ***)(v29 + 16), v177);
            *(_QWORD *)&__s2[8] = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v29 + 16) + 8), v178);
            return llvm::ConstantStruct::get((llvm::ConstantAggregateZero *)v29, (llvm::Type *)__s2, 2);
          }
          goto LABEL_343;
        }
LABEL_338:
        if (*(_BYTE *)(a2 + 41)
          && ((sub_1C4E7B480((uint64_t)v27) & 1) != 0 || *(_BYTE *)(a2 + 41) && sub_1C4E7B480(v28)))
        {
LABEL_342:
          v179 = (llvm::Constant *)v29;
          return llvm::Constant::getAllOnesValue(v179, v64);
        }
        if (v28)
          v211 = *(unsigned __int8 *)(v28 + 16) > 0x14u;
        else
          v211 = 1;
        if (!v211)
        {
          v221 = llvm::Constant::isNullValue((llvm::Constant *)v28);
          if ((v221 & 1) != 0 || (sub_1C4E71060((uint64_t)__s2, (llvm::Constant *)v28) & 1) != 0)
            return v27;
        }
        if (!v27 || *((unsigned __int8 *)v27 + 16) > 0x14u)
          return 0;
        if ((llvm::Constant::isNullValue(v27) & 1) != 0)
          return (llvm::UndefValue *)v28;
        v185 = sub_1C4E71060((uint64_t)__s2, v27);
LABEL_556:
        v16 = v28;
        if ((v185 & 1) != 0)
          return (llvm::UndefValue *)v16;
        return 0;
      }
      if (v12 <= 53)
      {
        switch(v12)
        {
          case 1:
            *(_DWORD *)__s2 = 1;
            *(_QWORD *)&__s2[4] = 0;
            if (v27)
            {
              if (*((_BYTE *)v27 + 16) == 84)
              {
                v183 = *((_QWORD *)v27 - 4);
                if (v183)
                {
                  if (!*(_BYTE *)(v183 + 16) && *(_QWORD *)(v183 + 24) == *((_QWORD *)v27 + 9))
                  {
                    v16 = (uint64_t)v27;
                    if (*(_DWORD *)(v183 + 36) == *(_DWORD *)__s2)
                      return (llvm::UndefValue *)v16;
                  }
                }
              }
            }
            return 0;
          case 19:
            if (v27 == (llvm::UndefValue *)v28)
              return v27;
            *(_QWORD *)__s2 = v28;
            if (sub_1C4E7BD14(__s2, (uint64_t)v27))
              return (llvm::UndefValue *)v28;
            *(_QWORD *)&v273 = v27;
            v185 = sub_1C4E7BD14(&v273, v28);
            goto LABEL_556;
          case 52:
            *(_QWORD *)&v273 = 0;
            *(_QWORD *)&__s2[8] = &v273;
            v99 = *((unsigned __int8 *)v27 + 16);
            if (v99 == 5)
            {
              if (*((_WORD *)v27 + 9) != 26)
                goto LABEL_517;
              if (!sub_1C4E7C5D8((uint64_t)__s2, *((llvm::Constant **)v27 - 4 * (*((_DWORD *)v27 + 5) & 0x7FFFFFF))))goto LABEL_517;
              v100 = ((_QWORD *)v27 - 4 * (*((_DWORD *)v27 + 5) & 0x7FFFFFF))[4];
              if (!v100)
                goto LABEL_517;
            }
            else if (v99 != 54
                   || !sub_1C4E734E4((uint64_t)__s2, *((llvm::Constant **)v27 - 8))
                   || (v100 = *((_QWORD *)v27 - 4)) == 0)
            {
LABEL_517:
              v223 = *((unsigned __int8 *)v27 + 16);
              if (v223 == 5)
              {
                if (*((_WORD *)v27 + 9) != 27
                  || !sub_1C4E7C5D8((uint64_t)__s2, *((llvm::Constant **)v27 - 4 * (*((_DWORD *)v27 + 5) & 0x7FFFFFF))))
                {
                  return 0;
                }
              }
              else if (v223 != 55 || (sub_1C4E734E4((uint64_t)__s2, *((llvm::Constant **)v27 - 8)) & 1) == 0)
              {
                return 0;
              }
LABEL_524:
              v160 = (llvm::Constant *)v29;
              return (llvm::UndefValue *)llvm::Constant::getNullValue(v160, v32);
            }
LABEL_516:
            **(_QWORD **)&__s2[8] = v100;
            return (llvm::UndefValue *)v273;
        }
        goto LABEL_343;
      }
      switch(v12)
      {
        case 54:
          *(_QWORD *)&v273 = 0;
          *(_QWORD *)&__s2[8] = &v273;
          v184 = *((unsigned __int8 *)v27 + 16);
          if (v184 == 5)
          {
            if (*((_WORD *)v27 + 9) != 25)
              return 0;
            if (!sub_1C4D89E3C((uint64_t)__s2, *((llvm::Constant **)v27 - 4 * (*((_DWORD *)v27 + 5) & 0x7FFFFFF))))return 0;
            v100 = ((_QWORD *)v27 - 4 * (*((_DWORD *)v27 + 5) & 0x7FFFFFF))[4];
            if (!v100)
              return 0;
          }
          else
          {
            if (v184 != 53)
              return 0;
            if (!sub_1C4D89CC8((uint64_t)__s2, *((llvm::Constant **)v27 - 8)))
              return 0;
            v100 = *((_QWORD *)v27 - 4);
            if (!v100)
              return 0;
          }
          goto LABEL_516;
        case 131:
          v186 = (unsigned int *)(v28 + 24);
          if (*(_DWORD *)(v28 + 32) >= 0x41u)
            v186 = *(unsigned int **)v186;
          v187 = *v186;
          v268[0] = 0;
          LODWORD(v273) = 132;
          *(_QWORD *)((char *)&v273 + 4) = 0;
          *(_QWORD *)__s2 = 132;
          *(_DWORD *)&__s2[8] = 0;
          *(_QWORD *)&__s2[16] = 1;
          *(_QWORD *)&__s2[24] = v268;
          *(_QWORD *)&v278 = 2;
          if (sub_1C4E77690((uint64_t)__s2, (uint64_t)v27))
          {
            if (sub_1C4E7C6F8(v278, (uint64_t)v27))
            {
              if (!v187)
              {
                v16 = (uint64_t)v268[0];
                if (*(_QWORD *)v268[0] == v29)
                  return (llvm::UndefValue *)v16;
              }
            }
          }
          return 0;
        case 171:
          if (!v27 || *((unsigned __int8 *)v27 + 16) > 0x14u || !v28 || *(unsigned __int8 *)(v28 + 16) > 0x14u)
            return 0;
          v122 = *(llvm::APInt **)a2;
          v268[0] = 0;
          *(_DWORD *)&__s2[8] = 1;
          *(_QWORD *)__s2 = 0;
          v16 = 0;
          if (!llvm::IsConstantOffsetFromGlobal(v27, (uint64_t **)v268, (llvm::GlobalValue **)__s2, v122, 0, v33))goto LABEL_185;
          v123 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)v27 + 1912), 0);
          v124 = (llvm::PointerType *)(***(_QWORD ***)v27 + 1960);
          v125 = (llvm::Constant *)llvm::PointerType::get(v124, 0);
          if (*(_BYTE *)(v28 + 16) != 16 || *(_DWORD *)(*(_QWORD *)v28 + 8) >> 8 > 0x40u)
            goto LABEL_565;
          v126 = *(_DWORD *)(v28 + 32);
          v127 = v126 > 0x40 ? **(_QWORD **)(v28 + 24) : (uint64_t)(*(_QWORD *)(v28 + 24) << -(char)v126) >> -(char)v126;
          if ((v127 & 3) != 0)
            goto LABEL_565;
          v231 = (llvm::ConstantInt *)(***(_QWORD ***)v27 + 1984);
          if (*(llvm::Constant **)v27 != v125)
            v27 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v27, v125, 0);
          *(_QWORD *)&v273 = llvm::ConstantInt::get(v231, v127 >> 2, 0);
          ElementPtr = (llvm *)llvm::ConstantExpr::getGetElementPtr(v124, (uint64_t *)v27, (llvm::Value *)&v273, 1, 0, 0, 0);
          v234 = llvm::ConstantFoldLoadFromConstPtr(ElementPtr, v124, v122, v233);
          if (!v234 || v234[16] != 5)
            goto LABEL_565;
          v236 = *((unsigned __int16 *)v234 + 9);
          if (v236 == 38)
          {
            v234 = *(_BYTE **)&v234[-32 * (*((_DWORD *)v234 + 5) & 0x7FFFFFF)];
            if (v234)
              v237 = v234[16] == 5;
            else
              v237 = 0;
            if (!v237)
              goto LABEL_565;
            v236 = *((unsigned __int16 *)v234 + 9);
          }
          if (v236 != 15
            || ((v238 = &v234[-32 * (*((_DWORD *)v234 + 5) & 0x7FFFFFF)], (v239 = *v238) != 0)
              ? (v240 = *(_BYTE *)(*v238 + 16) == 5)
              : (v240 = 0),
                !v240 || *(_WORD *)(v239 + 18) != 47))
          {
LABEL_565:
            v16 = 0;
            goto LABEL_185;
          }
          v241 = *(llvm::Constant ***)(v239 - 32 * (*(_DWORD *)(v239 + 20) & 0x7FFFFFF));
          v242 = (llvm *)v238[4];
          v271 = 0;
          DWORD2(v273) = 1;
          *(_QWORD *)&v273 = 0;
          v16 = 0;
          if (llvm::IsConstantOffsetFromGlobal(v242, &v271, (llvm::GlobalValue **)&v273, v122, 0, v235))
          {
            if ((uint64_t *)v268[0] != v271)
            {
LABEL_586:
              v16 = 0;
              goto LABEL_587;
            }
            if (*(_DWORD *)&__s2[8] > 0x40u)
            {
              if (memcmp(*(const void **)__s2, (const void *)v273, (((unint64_t)*(unsigned int *)&__s2[8] + 63) >> 3) & 0x3FFFFFF8))
              {
                goto LABEL_586;
              }
            }
            else if (*(_QWORD *)__s2 != (_QWORD)v273)
            {
              goto LABEL_586;
            }
            if (*v241 == v123)
              v16 = (uint64_t)v241;
            else
              v16 = (uint64_t)sub_1C537D3B8((llvm *)0x31, (uint64_t)v241, v123, 0);
          }
LABEL_587:
          if (DWORD2(v273) >= 0x41 && (_QWORD)v273)
            MEMORY[0x1CAA32F9C](v273, 0x1000C8000313F17);
LABEL_185:
          if (*(_DWORD *)&__s2[8] < 0x41u || !*(_QWORD *)__s2)
            return (llvm::UndefValue *)v16;
          goto LABEL_187;
      }
LABEL_343:
      v180 = sub_1C4E7BF8C(v12);
      if (v27 != (llvm::UndefValue *)v28)
        return 0;
LABEL_344:
      v16 = (uint64_t)v27;
      if ((v180 & 1) == 0)
        return 0;
      return (llvm::UndefValue *)v16;
    case 3u:
      v16 = *((_QWORD *)v10 + 8);
      if (*(_BYTE *)(v16 + 16) == 17)
        v37 = *((_QWORD *)v10 + 8);
      else
        v37 = 0;
      if (!v37 || v12 != 2483)
        goto LABEL_74;
      v38 = *(_QWORD *)(v37 + 32);
      if ((_UNKNOWN *)v38 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&__s2[8], (const llvm::detail::DoubleAPFloat *)(v37 + 32));
      }
      else
      {
        *(_QWORD *)&__s2[8] = *(_QWORD *)(v37 + 32);
        if ((*(_DWORD *)(v38 + 8) + 64) >= 0x80)
        {
          this = (llvm::ConstrainedFPIntrinsic *)operator new[]();
          *(_QWORD *)&__s2[16] = this;
        }
        v39 = *(_BYTE *)(v37 + 52);
        v40 = v39 & 7;
        __s2[28] = v39 & 0xF;
        *(_DWORD *)&__s2[24] = *(_DWORD *)(v37 + 48);
        v42 = (v39 & 6) != 0 && v40 != 3;
        if (v40 == 1 || v42)
        {
          v44 = *(unsigned int *)(v38 + 8);
          if ((v44 - 64) <= 0xFFFFFF7F)
            v45 = this;
          else
            v45 = (llvm::ConstrainedFPIntrinsic *)&__s2[16];
          v48 = *(uint64_t **)(v37 + 40);
          v47 = (uint64_t *)(v37 + 40);
          v46 = v48;
          if ((*(_DWORD *)(*(v47 - 1) + 8) - 64) >= 0xFFFFFF80)
            v46 = v47;
          if (v44 <= 0xFFFFFFBF)
          {
            v49 = (unint64_t)(v44 + 64) >> 6;
            do
            {
              v50 = *v46++;
              *(_QWORD *)v45 = v50;
              v45 = (llvm::ConstrainedFPIntrinsic *)((char *)v45 + 8);
              --v49;
            }
            while (v49);
          }
        }
      }
      if (*(_QWORD *)v16 != *(_QWORD *)v3)
        v16 = 0;
      v51 = *(_QWORD *)&__s2[8];
      if (*(_UNKNOWN **)&__s2[8] != &unk_1C866F1C0)
        goto LABEL_71;
      goto LABEL_651;
    default:
LABEL_74:
      v16 = 0;
      if (v12 <= 141)
      {
        switch(v12)
        {
          case 'S':
            v57 = *(llvm **)v10;
            v58 = (llvm::Constant *)*((_QWORD *)v10 + 4);
            v59 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
            ExceptionBehavior = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(this);
            RoundingMode = llvm::ConstrainedFPIntrinsic::getRoundingMode(v3);
            if ((_DWORD)v59 == 127)
              v62 = -1;
            else
              v62 = v59;
            return (llvm::UndefValue *)sub_1C4E6C968(v57, v58, v62, a2, (const llvm::DataLayout *)ExceptionBehavior, (llvm::DSOLocalEquivalent **)RoundingMode);
          case 'T':
          case 'U':
          case 'W':
          case 'Z':
          case '[':
          case '\\':
          case ']':
          case '^':
            return (llvm::UndefValue *)v16;
          case 'V':
            v135 = *(llvm::PoisonValue ***)v10;
            v136 = (llvm::Constant *)*((_QWORD *)v10 + 4);
            v137 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
            v138 = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(this);
            v139 = llvm::ConstrainedFPIntrinsic::getRoundingMode(v3);
            if ((_DWORD)v137 == 127)
              v140 = -1;
            else
              v140 = v137;
            return sub_1C4E6D224(v135, v136, v140, (llvm::Constant **)a2, (const llvm::DataLayout *)v138, (llvm::DSOLocalEquivalent **)v139);
          case 'X':
            v153 = *(_QWORD *)v10;
            v154 = *((_QWORD *)v10 + 4);
            v155 = *((_QWORD *)v10 + 8);
            *(_QWORD *)__s2 = v153;
            *(_QWORD *)&__s2[8] = v154;
            *(_QWORD *)&__s2[16] = v155;
            v156 = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(this);
            v157 = llvm::ConstrainedFPIntrinsic::getRoundingMode(v3);
            v111 = v156;
            v112 = v157;
            v110 = a2;
            return sub_1C4E7B804((llvm::PoisonValue ***)__s2, (llvm::Type *)3, 0, v110, v111, v112);
          case 'Y':
            v147 = *(llvm **)v10;
            v148 = (llvm::Constant *)*((_QWORD *)v10 + 4);
            v149 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
            v150 = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(this);
            v151 = llvm::ConstrainedFPIntrinsic::getRoundingMode(v3);
            if ((_DWORD)v149 == 127)
              v152 = -1;
            else
              v152 = v149;
            return (llvm::UndefValue *)sub_1C4E6CFEC(v147, v148, v152, (llvm::Constant **)a2, (const llvm::DataLayout *)v150, (llvm::DSOLocalEquivalent **)v151);
          case '_':
            v141 = *(llvm::PoisonValue ***)v10;
            v142 = (llvm::PoisonValue **)*((_QWORD *)v10 + 4);
            v143 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
            v144 = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(this);
            v145 = llvm::ConstrainedFPIntrinsic::getRoundingMode(v3);
            if ((_DWORD)v143 == 127)
              v146 = -1;
            else
              v146 = v143;
            return sub_1C4E6D4DC(v141, v142, v146, (llvm::Constant **)a2, (const llvm::DataLayout *)v144, (llvm::DSOLocalEquivalent **)v145);
            v129 = *(llvm **)v10;
            v130 = (llvm::Constant *)*((_QWORD *)v10 + 4);
            v131 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
            v132 = llvm::ConstrainedFPIntrinsic::getExceptionBehavior(this);
            v133 = llvm::ConstrainedFPIntrinsic::getRoundingMode(v3);
            if ((_DWORD)v131 == 127)
              v134 = -1;
            else
              v134 = v131;
            return sub_1C4E6CCB4(v129, v130, v134, a2, (const llvm::DataLayout *)v132, (llvm::DSOLocalEquivalent **)v133);
          default:
            if (v12 != 132)
              return (llvm::UndefValue *)v16;
            v117 = *((_QWORD *)v10 + 4);
            v118 = *((_QWORD *)v10 + 8);
            v119 = (_QWORD *)(v118 + 24);
            if (*(_DWORD *)(v118 + 32) >= 0x41u)
              v119 = (_QWORD *)*v119;
            v16 = *(_QWORD *)v10;
            v120 = **(_QWORD **)(*(_QWORD *)(v11 + 24) + 16);
            v121 = *(_DWORD *)v119;
            *(_QWORD *)&v273 = 0;
            *(_DWORD *)__s2 = 131;
            *(_QWORD *)&__s2[8] = 0;
            *(_QWORD *)&__s2[16] = &v273;
            *(_QWORD *)&__s2[24] = 1;
            if (!sub_1C4E75A6C((uint64_t)__s2, v117) || !sub_1C4E7C6F8(*(unsigned int *)&__s2[24], v117))
              return 0;
            if (*(_BYTE *)(a2 + 41) && (sub_1C4E7B480(v16) & 1) != 0)
            {
              if (v121)
                return 0;
              v16 = v273;
            }
            else if (v16 != (_QWORD)v273 || v121 != 0)
            {
              return 0;
            }
            if (*(_QWORD *)v16 != v120)
              v16 = 0;
            break;
        }
        return (llvm::UndefValue *)v16;
      }
      v52 = v12 + 114;
      if ((v12 - 142) > 0x2B)
        goto LABEL_145;
      if (((1 << v52) & 3) != 0)
      {
        v107 = *(_QWORD *)v10;
        v108 = *((_QWORD *)v10 + 4);
        v109 = *((_QWORD *)v10 + 8);
        *(_QWORD *)__s2 = v107;
        *(_QWORD *)&__s2[8] = v108;
        *(_QWORD *)&__s2[16] = v109;
        v110 = a2;
        v111 = 0;
        v112 = 1;
        return sub_1C4E7B804((llvm::PoisonValue ***)__s2, (llvm::Type *)3, 0, v110, v111, v112);
      }
      if (((1 << v52) & 0xC0) == 0)
      {
        if (((1 << v52) & 0xC0000000000) != 0)
        {
          v53 = *((_QWORD *)v10 + 12);
          if (llvm::maskIsAllZeroOrUndef(*((llvm **)v10 + 8), (llvm::Value *)a2))
            return (llvm::UndefValue *)v53;
          else
            return 0;
        }
LABEL_145:
        if ((v12 - 276) >= 2)
          return (llvm::UndefValue *)v16;
        v81 = *(unsigned __int8 **)v10;
        v82 = (unsigned __int8 *)*((_QWORD *)v10 + 4);
        v83 = *((_QWORD *)v10 + 8);
        v84 = **(_QWORD **)(*(_QWORD *)(v11 + 24) + 16);
        v85 = *(unsigned __int8 *)(*(_QWORD *)v10 + 16);
        if (v85 >= 0x15)
          v86 = v82;
        else
          v86 = v81;
        if (v85 >= 0x15)
          v87 = (uint64_t)v81;
        else
          v87 = (uint64_t)v82;
        v88 = v86[16] > 0x14u || v86 == 0;
        if (!v88
          && (v159 = llvm::Constant::isNullValue((llvm::Constant *)v86),
              (v159 & 1) != 0 || (sub_1C4E71060((uint64_t)__s2, (llvm::Constant *)v86) & 1) != 0)
          || *(_BYTE *)(a2 + 41) && sub_1C4E7B480((uint64_t)v86))
        {
          v160 = (llvm::Constant *)v84;
          return (llvm::UndefValue *)llvm::Constant::getNullValue(v160, v32);
        }
        if ((*(_DWORD *)(v84 + 8) & 0xFE) == 0x12)
          v84 = **(_QWORD **)(v84 + 16);
        v89 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v84);
        LODWORD(v90) = v89;
        v91 = (_QWORD *)(v83 + 24);
        if (*(_DWORD *)(v83 + 32) >= 0x41u)
          v91 = (_QWORD *)*v91;
        v92 = (_QWORD *)*v91;
        *(_DWORD *)&__s2[8] = v89;
        if (v89 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)__s2, 0, 0);
          v90 = *(unsigned int *)&__s2[8];
          v94 = 1 << (char)v92;
          if (*(_DWORD *)&__s2[8] > 0x40u)
          {
            v260 = *(_QWORD **)__s2;
            *(_QWORD *)(*(_QWORD *)__s2 + 8 * (v92 >> 6)) |= v94;
            if (((v260[(v90 - 1) >> 6] >> (v90 - 1)) & 1) != 0)
            {
              v16 = 0;
              goto LABEL_187;
            }
            v95 = (void *)operator new[]();
            memcpy(v95, v260, ((unint64_t)(v90 + 63) >> 3) & 0x3FFFFFF8);
LABEL_167:
            DWORD2(v273) = v90;
            *(_QWORD *)&v273 = v95;
            v96 = sub_1C4D8A7F0((llvm::APInt *)&v273, v86);
            if (DWORD2(v273) >= 0x41 && (_QWORD)v273)
              MEMORY[0x1CAA32F9C](v273, 0x1000C8000313F17);
            if (v96)
              v16 = v87;
            else
              v16 = 0;
            if (v90 < 0x41)
              return (llvm::UndefValue *)v16;
LABEL_187:
            MEMORY[0x1CAA32F9C]();
            return (llvm::UndefValue *)v16;
          }
          v93 = *(_QWORD *)__s2;
        }
        else
        {
          v93 = 0;
          v94 = 1 << (char)v92;
        }
        *(_QWORD *)__s2 = v93 | v94;
        if ((((v93 | (unint64_t)v94) >> (v90 - 1)) & 1) != 0)
          return 0;
        v95 = (void *)(v93 | v94);
        goto LABEL_167;
      }
      v101 = *(unsigned __int8 **)v10;
      v102 = (unsigned __int8 *)*((_QWORD *)v10 + 4);
      v16 = *((_QWORD *)v10 + 8);
      if (*(_BYTE *)(a2 + 41))
      {
        v103 = sub_1C4E7B480((uint64_t)v101);
        v104 = *(unsigned __int8 *)(a2 + 41);
        if (v103)
          v105 = v104 == 0;
        else
          v105 = 1;
        if (!v105)
        {
          if (sub_1C4E7B480((uint64_t)v102))
            return llvm::UndefValue::get(**(llvm::UndefValue ***)(*(_QWORD *)(v11 + 24) + 16), v106);
          v104 = *(unsigned __int8 *)(a2 + 41);
        }
        if (v104 && sub_1C4E7B480(v16))
          return (llvm::UndefValue *)*((_QWORD *)v3 + 4 * (v12 != 148) + -4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF));
      }
      v268[0] = 0;
      *(_QWORD *)__s2 = v268;
      *(_QWORD *)&__s2[8] = 0;
      if (!sub_1C4D89F84((uint64_t)__s2, (unsigned __int8 *)v16))
        goto LABEL_457;
      v202 = v268[0];
      v203 = *((unsigned int *)v268[0] + 2);
      *(_DWORD *)&__s2[8] = v203;
      if (v203 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)__s2, v203, 0);
        v202 = v268[0];
      }
      else
      {
        if ((_DWORD)v203)
          v204 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v203;
        else
          v204 = 0;
        *(_QWORD *)__s2 = v204 & v203;
      }
      llvm::APInt::urem(v202, (const llvm::APInt *)__s2, (llvm::APInt *)&v273);
      v205 = DWORD2(v273);
      if (DWORD2(v273) > 0x40)
      {
        v207 = 0;
        v208 = ((unint64_t)DWORD2(v273) + 63) >> 6;
        do
        {
          v161 = v208-- < 1;
          if (v161)
            break;
          v209 = *(_QWORD *)(v273 + 8 * v208);
          v207 += __clz(v209);
        }
        while (!v209);
        v210 = DWORD2(v273) | 0xFFFFFFC0;
        if ((BYTE8(v273) & 0x3F) == 0)
          v210 = 0;
        v16 = v207 + v210;
        if ((_QWORD)v273)
          MEMORY[0x1CAA32F9C](v273, 0x1000C8000313F17);
        if ((_DWORD)v16 != v205)
          goto LABEL_443;
      }
      else if ((_QWORD)v273)
      {
LABEL_443:
        v206 = 0;
LABEL_453:
        if (*(_DWORD *)&__s2[8] >= 0x41u && *(_QWORD *)__s2)
          MEMORY[0x1CAA32F9C](*(_QWORD *)__s2, 0x1000C8000313F17);
        if ((v206 & 1) != 0)
          return (llvm::UndefValue *)v16;
LABEL_457:
        if (v101
          && v101[16] <= 0x14u
          && ((llvm::Constant::isNullValue((llvm::Constant *)v101) & 1) != 0
           || (sub_1C4E71060((uint64_t)__s2, (llvm::Constant *)v101) & 1) != 0)
          && v102
          && v102[16] <= 0x14u
          && ((llvm::Constant::isNullValue((llvm::Constant *)v102) & 1) != 0
           || (sub_1C4E71060((uint64_t)__s2, (llvm::Constant *)v102) & 1) != 0))
        {
          v160 = **(llvm::Constant ***)(*(_QWORD *)(v11 + 24) + 16);
          return (llvm::UndefValue *)llvm::Constant::getNullValue(v160, v32);
        }
        if (sub_1C4D9ED34((uint64_t)__s2, (llvm::Constant *)v101)
          && sub_1C4D9ED34((uint64_t)&v273, (llvm::Constant *)v102))
        {
          v179 = **(llvm::Constant ***)(*(_QWORD *)(v11 + 24) + 16);
          return llvm::Constant::getAllOnesValue(v179, v64);
        }
        return 0;
      }
      v16 = *((_QWORD *)v3 + 4 * (v12 != 148) + -4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF));
      v206 = 1;
      goto LABEL_453;
  }
}

uint64_t ***llvm::SimplifyFreezeInst(uint64_t ***a1, uint64_t *a2)
{
  if (sub_1C4F8BE80(a1, a2[3], a2[4], a2[2], 0, 0))
    return a1;
  else
    return 0;
}

llvm::UndefValue *llvm::SimplifyInstructionWithOperands(llvm *this, uint64_t a2, unint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  unsigned __int8 *v11;
  uint64_t ElementInst;
  unsigned __int8 *v14;
  llvm::PoisonValue **v15;
  unint64_t v16;
  unsigned __int8 *v17;
  llvm::Constant *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  llvm::Constant *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  int v28;
  unsigned __int8 *v29;
  llvm::Constant *v30;
  unint64_t v31;
  unsigned __int8 *v32;
  llvm::Constant *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned __int8 *v40;
  llvm::Constant *v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned __int8 *v45;
  llvm::Constant *v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  llvm::Constant *v51;
  int v52;
  unsigned __int8 *v53;
  llvm::Constant *v54;
  int v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t IndexTypeSizeInBits;
  uint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm::Type **v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  size_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  void *v76;
  unsigned int v77;
  void *__src;
  int v79[2];
  uint64_t v80;
  int v81;
  _QWORD v82[7];

  v7 = a2;
  v82[6] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a4 + 32);
  v10 = *(_OWORD *)(a4 + 16);
  v73 = *(_OWORD *)a4;
  v74 = v10;
  v75 = *(_OWORD *)(a4 + 32);
  if (!v9)
    *(_QWORD *)&v75 = this;
  v11 = 0;
  switch(*((_BYTE *)this + 16))
  {
    case '(':
      ElementInst = sub_1C4E6C8F4(*(unsigned __int8 **)a2, a2, a3, a4, a5);
      goto LABEL_5;
    case ')':
      v40 = *(unsigned __int8 **)a2;
      v41 = *(llvm::Constant **)(a2 + 8);
      if (BYTE8(v75))
      {
        v42 = *((unsigned __int8 *)this + 17);
        v43 = (v42 >> 2) & 1;
        v44 = (v42 >> 1) & 1;
      }
      else
      {
        LOBYTE(v43) = 0;
        v44 = 0;
      }
      ElementInst = (uint64_t)sub_1C4E62AE0((llvm *)v40, v41, v43, v44, (uint64_t)&v73, (llvm::DSOLocalEquivalent **)3);
      goto LABEL_5;
    case '*':
      v32 = *(unsigned __int8 **)a2;
      v33 = *(llvm::Constant **)(a2 + 8);
      if ((unint64_t)*((unsigned __int8 *)this + 17) >> 1 == 127)
        LODWORD(v34) = -1;
      else
        v34 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
      ElementInst = (uint64_t)sub_1C4E6C968((llvm *)v32, v33, v34, (uint64_t)&v73, 0, (llvm::DSOLocalEquivalent **)1);
      goto LABEL_5;
    case '+':
      v35 = *(unsigned __int8 **)a2;
      v36 = *(_QWORD *)(a2 + 8);
      if (BYTE8(v75))
      {
        v37 = *((unsigned __int8 *)this + 17);
        v38 = (v37 >> 2) & 1;
        v39 = (v37 >> 1) & 1;
      }
      else
      {
        v38 = 0;
        v39 = 0;
      }
      ElementInst = (uint64_t)sub_1C4E62F88((uint64_t)v35, v36, v38, v39, (uint64_t)&v73, (llvm::DSOLocalEquivalent **)3);
      goto LABEL_5;
    case ',':
      v29 = *(unsigned __int8 **)a2;
      v30 = *(llvm::Constant **)(a2 + 8);
      if ((unint64_t)*((unsigned __int8 *)this + 17) >> 1 == 127)
        LODWORD(v31) = -1;
      else
        v31 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
      ElementInst = (uint64_t)sub_1C4E6CCB4((llvm *)v29, v30, v31, (uint64_t)&v73, 0, (llvm::DSOLocalEquivalent **)1);
      goto LABEL_5;
    case '-':
      ElementInst = (uint64_t)sub_1C4E637C8(*(llvm **)a2, *(llvm::Constant **)(a2 + 8), (uint64_t)&v73, 3, a5, a6);
      goto LABEL_5;
    case '.':
      v17 = *(unsigned __int8 **)a2;
      v18 = *(llvm::Constant **)(a2 + 8);
      if ((unint64_t)*((unsigned __int8 *)this + 17) >> 1 == 127)
        LODWORD(v19) = -1;
      else
        v19 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
      ElementInst = (uint64_t)sub_1C4E6CFEC((llvm *)v17, v18, v19, (llvm::Constant **)&v73, 0, (llvm::DSOLocalEquivalent **)1);
      goto LABEL_5;
    case '/':
      ElementInst = (uint64_t)sub_1C4E71D14((llvm *)0x13, *(unsigned __int8 **)a2, *(llvm::Constant **)(a2 + 8), (llvm::Constant **)&v73, (const llvm::DataLayout *)3, a6);
      goto LABEL_5;
    case '0':
      ElementInst = (uint64_t)sub_1C4E63A00(*(llvm::Constant ***)a2, *(llvm::Constant **)(a2 + 8), (llvm::Constant **)&v73, (const llvm::DataLayout *)3);
      goto LABEL_5;
    case '1':
      v20 = *(unsigned __int8 **)a2;
      v21 = *(llvm::Constant **)(a2 + 8);
      if ((unint64_t)*((unsigned __int8 *)this + 17) >> 1 == 127)
        LODWORD(v22) = -1;
      else
        v22 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
      ElementInst = (uint64_t)sub_1C4E6D224((llvm::PoisonValue **)v20, v21, v22, (llvm::Constant **)&v73, 0, (llvm::DSOLocalEquivalent **)1);
      goto LABEL_5;
    case '2':
      ElementInst = (uint64_t)sub_1C4E72984((llvm *)0x16, *(unsigned __int8 **)a2, *(llvm::Constant **)(a2 + 8), (uint64_t)&v73, (const llvm::DataLayout *)3, a6);
      goto LABEL_5;
    case '3':
      ElementInst = (uint64_t)sub_1C4E63A84(*(llvm::Constant ***)a2, *(llvm::Constant **)(a2 + 8), (uint64_t)&v73, (const llvm::DataLayout *)3);
      goto LABEL_5;
    case '4':
      v14 = *(unsigned __int8 **)a2;
      v15 = *(llvm::PoisonValue ***)(a2 + 8);
      if ((unint64_t)*((unsigned __int8 *)this + 17) >> 1 == 127)
        LOBYTE(v16) = -1;
      else
        v16 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
      ElementInst = (uint64_t)sub_1C4E6D4DC((llvm::PoisonValue **)v14, v15, v16, (llvm::Constant **)&v73, 0, (llvm::DSOLocalEquivalent **)1);
      goto LABEL_5;
    case '5':
      v45 = *(unsigned __int8 **)a2;
      v46 = *(llvm::Constant **)(a2 + 8);
      if (BYTE8(v75))
      {
        v47 = *((unsigned __int8 *)this + 17);
        v48 = (v47 >> 2) & 1;
        v49 = (v47 >> 1) & 1;
      }
      else
      {
        v48 = 0;
        v49 = 0;
      }
      ElementInst = (uint64_t)sub_1C4E63B54((llvm::Constant *)v45, v46, v48, v49, (uint64_t)&v73, (llvm::DSOLocalEquivalent **)3);
      goto LABEL_5;
    case '6':
      v50 = *(unsigned __int8 **)a2;
      v51 = *(llvm::Constant **)(a2 + 8);
      if (BYTE8(v75))
        v52 = (*((unsigned __int8 *)this + 17) >> 1) & 1;
      else
        v52 = 0;
      ElementInst = (uint64_t)sub_1C4E63C38((uint64_t)v50, v51, v52, (uint64_t)&v73, (llvm::DSOLocalEquivalent **)3);
      goto LABEL_5;
    case '7':
      v53 = *(unsigned __int8 **)a2;
      v54 = *(llvm::Constant **)(a2 + 8);
      if (BYTE8(v75))
        v55 = (*((unsigned __int8 *)this + 17) >> 1) & 1;
      else
        v55 = 0;
      ElementInst = (uint64_t)sub_1C4E63EA4((uint64_t)v53, v54, v55, (uint64_t)&v73, (llvm::DSOLocalEquivalent **)3);
      goto LABEL_5;
    case '8':
      ElementInst = (uint64_t)sub_1C4E640C8(*(llvm **)a2, *(llvm::Constant **)(a2 + 8), (uint64_t)&v73, 3, a5, a6);
      goto LABEL_5;
    case '9':
      ElementInst = (uint64_t)sub_1C4E65634(*(llvm **)a2, *(llvm::Constant **)(a2 + 8), (uint64_t)&v73, 3, a5, a6);
      goto LABEL_5;
    case ':':
      ElementInst = (uint64_t)sub_1C4E661DC(*(llvm **)a2, *(llvm::Constant **)(a2 + 8), (uint64_t)&v73, 3, a5, a6);
      goto LABEL_5;
    case ';':
      goto LABEL_6;
    case '<':
      if ((*((_WORD *)this + 9) & 1) != 0)
        goto LABEL_134;
      v56 = *(unsigned __int8 **)a2;
      v79[0] = llvm::DataLayout::getIndexTypeSizeInBits(v73, **(_QWORD **)a2);
      if (v79[0] > 0x40u)
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      else
        __src = 0;
      if (v56[16] <= 0x14u)
      {
        v70 = v79[0];
        goto LABEL_113;
      }
      if (*((unsigned __int8 *)llvm::getUnderlyingObject((llvm *)v56, (const llvm::Value *)6) + 16) > 0x14u)
      {
        v11 = 0;
LABEL_120:
        v70 = v79[0];
        goto LABEL_121;
      }
      v56 = (unsigned __int8 *)llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v56, (llvm::DataLayout *)v73, (const void **)&__src, 1, 1, 0, v60);
      IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits(v73, *(_QWORD *)v56);
      a2 = IndexTypeSizeInBits;
      if (v79[0] < IndexTypeSizeInBits)
      {
        llvm::APInt::sext((llvm::APInt *)&__src, IndexTypeSizeInBits, (llvm::APInt *)&v76);
      }
      else if (v79[0] > IndexTypeSizeInBits)
      {
        llvm::APInt::trunc((llvm::APInt *)&__src, IndexTypeSizeInBits, (llvm::APInt *)&v76);
      }
      else
      {
        v77 = v79[0];
        if (v79[0] > 0x40u)
        {
          v76 = (void *)operator new[]();
          memcpy(v76, __src, (((unint64_t)v77 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v76 = __src;
        }
      }
      if (v79[0] >= 0x41u && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      __src = v76;
      v70 = v77;
      v79[0] = v77;
      if (v56[16] <= 0x14u)
      {
LABEL_113:
        v71 = *(_QWORD *)this;
        v77 = v70;
        if (v70 > 0x40)
        {
          v72 = (((unint64_t)v70 + 63) >> 3) & 0x3FFFFFF8;
          v76 = (void *)operator new[]();
          memcpy(v76, __src, v72);
        }
        else
        {
          v76 = __src;
        }
        v11 = (unsigned __int8 *)llvm::ConstantFoldLoadFromConstPtr((uint64_t)v56, v71, (const void **)&v76, (llvm::DataLayout *)v73, v57, v58, v59);
        if (v77 >= 0x41 && v76)
          MEMORY[0x1CAA32F9C](v76, 0x1000C8000313F17);
        goto LABEL_120;
      }
      v11 = 0;
LABEL_121:
      if (v70 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
LABEL_6:
      if (v11 == (unsigned __int8 *)this)
        return llvm::UndefValue::get(*(llvm::UndefValue **)this, (llvm::Type *)a2);
      return (llvm::UndefValue *)v11;
    case '>':
      ElementInst = (uint64_t)sub_1C4E6B244(*((llvm::GetElementPtrInst **)this + 8), *(unsigned __int8 **)a2, (llvm::Value *)(a2 + 8), a3 - 1, (*((unsigned __int8 *)this + 17) >> 1) & 1, (uint64_t)&v73);
      goto LABEL_5;
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
      ElementInst = (uint64_t)sub_1C4E6C1BC((llvm *)(*((unsigned __int8 *)this + 16) - 28), *(_QWORD *)a2, *(llvm::Constant **)this, (llvm::Type **)&v73, a5);
      goto LABEL_5;
    case 'Q':
      ElementInst = (uint64_t)sub_1C4E66730(*((_WORD *)this + 9) & 0x3F, *(llvm **)a2, *(llvm::UndefValue **)(a2 + 8), (uint64_t)&v73, 3);
      goto LABEL_5;
    case 'R':
      v62 = *((_WORD *)this + 9) & 0x3F;
      v63 = *(unsigned __int8 **)a2;
      if ((unint64_t)*((unsigned __int8 *)this + 17) >> 1 == 127)
        LOBYTE(v64) = -1;
      else
        v64 = (unint64_t)*((unsigned __int8 *)this + 17) >> 1;
      ElementInst = (uint64_t)sub_1C4E69950(v62, v63, *(unsigned __int8 **)(v7 + 8), v64, (uint64_t)&v73, 3);
      goto LABEL_5;
    case 'S':
      if (!a3)
        goto LABEL_101;
      v11 = 0;
      v23 = 0;
      v24 = 8 * a3;
      do
      {
        v25 = *(_QWORD *)v7;
        if (*(llvm **)v7 != this)
        {
          if (BYTE9(v75) && (sub_1C4E7B480(*(_QWORD *)v7) & 1) != 0)
          {
            v23 = 1;
          }
          else if (v11)
          {
            v26 = v25 == (_QWORD)v11;
            v11 = (unsigned __int8 *)v25;
            if (!v26)
              goto LABEL_134;
          }
          else
          {
            v11 = (unsigned __int8 *)v25;
          }
        }
        v7 += 8;
        v24 -= 8;
      }
      while (v24);
      if (v11)
      {
        if ((v23 & 1) == 0)
          goto LABEL_6;
        if (v11[16] == 5)
        {
          __src = v82;
          *(_QWORD *)v79 = v82;
          v80 = 4;
          v81 = 0;
          v27 = sub_1C53774DC((uint64_t)v11, (llvm::SmallPtrSetImplBase *)&__src);
          if (*(void **)v79 == __src)
          {
            if ((v27 & 1) != 0)
              goto LABEL_134;
          }
          else
          {
            free(*(void **)v79);
            if ((v27 & 1) != 0)
              goto LABEL_134;
          }
        }
        v28 = sub_1C4E71C9C((uint64_t)v11, this, (llvm::DominatorTree *)v74);
LABEL_56:
        if (!v28)
          v11 = 0;
      }
      else
      {
LABEL_101:
        ElementInst = (uint64_t)llvm::UndefValue::get(*(llvm::UndefValue **)this, (llvm::Type *)a2);
LABEL_5:
        v11 = (unsigned __int8 *)ElementInst;
      }
      goto LABEL_6;
    case 'T':
      ElementInst = (uint64_t)llvm::SimplifyCall(this, (uint64_t **)&v73, (const llvm::Function *)a3);
      goto LABEL_5;
    case 'U':
      ElementInst = (uint64_t)sub_1C4E6A420(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)&v73, 3);
      goto LABEL_5;
    case 'Y':
      ElementInst = (uint64_t)llvm::SimplifyExtractElementInst(*(unsigned __int8 **)a2, *(_QWORD *)(a2 + 8), (llvm::Constant *)&v73);
      goto LABEL_5;
    case 'Z':
      ElementInst = (uint64_t)llvm::SimplifyInsertElementInst(*(unsigned __int8 **)a2, *(unsigned __int8 **)(a2 + 8), *(unsigned __int8 **)(a2 + 16), (uint64_t)&v73, a5);
      goto LABEL_5;
    case '[':
      ElementInst = (uint64_t)llvm::SimplifyShuffleVectorInst(*(llvm **)a2, *(llvm::Type **)(a2 + 8), *((char **)this + 8), *((unsigned int *)this + 18), *(llvm::UndefValue **)this, (uint64_t)&v73);
      goto LABEL_5;
    case '\\':
      ElementInst = (uint64_t)llvm::SimplifyExtractValueInst(*(unsigned __int8 **)a2, *((char **)this + 8), *((unsigned int *)this + 18));
      goto LABEL_5;
    case ']':
      ElementInst = (uint64_t)llvm::SimplifyInsertValueInst(*(unsigned __int8 **)a2, *(_QWORD *)(a2 + 8), *((_DWORD **)this + 8), *((unsigned int *)this + 18), (uint64_t)&v73);
      goto LABEL_5;
    case '_':
      v11 = *(unsigned __int8 **)a2;
      v28 = sub_1C4F8BE80(*(uint64_t ****)a2, *((uint64_t *)&v74 + 1), v75, v74, 0, 0);
      goto LABEL_56;
    default:
      if (!a3)
        goto LABEL_95;
      v65 = 8 * a3;
      v66 = a2;
      do
      {
        if (*(unsigned __int8 *)(*(_QWORD *)v66 + 16) >= 0x15u)
        {
LABEL_134:
          v11 = 0;
          goto LABEL_6;
        }
        v66 += 8;
        v65 -= 8;
      }
      while (v65);
LABEL_95:
      __src = &v80;
      *(_QWORD *)v79 = 0x800000000;
      sub_1C4848C0C((unsigned int *)&__src, a3, 0);
      v67 = (llvm::Type **)__src;
      if (a3)
      {
        v68 = 8 * a3;
        do
        {
          v69 = *(_QWORD *)v7;
          v7 += 8;
          *v67++ = (llvm::Type *)v69;
          v68 -= 8;
        }
        while (v68);
        v67 = (llvm::Type **)__src;
      }
      v11 = (unsigned __int8 *)sub_1C4DECDA4((int **)this, (llvm *)(*((unsigned __int8 *)this + 16) - 28), v67, v79[0], (__int32 **)v73, *((llvm::DSOLocalEquivalent ***)&v73 + 1));
      if (__src != &v80)
        free(__src);
      goto LABEL_6;
  }
}

llvm::UndefValue *llvm::SimplifyInstruction(llvm *this, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6)
{
  int v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  llvm::UndefValue *v18;
  void *v20;
  uint64_t v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x1E0C80C00];
  v8 = *((_DWORD *)this + 5);
  if ((v8 & 0x40000000) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)this - 1);
    v9 = v8 & 0x7FFFFFF;
  }
  else
  {
    v9 = v8 & 0x7FFFFFF;
    v10 = (uint64_t *)((char *)this - 32 * v9);
  }
  v20 = v22;
  v21 = 0x800000000;
  if (v9 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, (uint64_t)v22, v9, 8);
    v11 = v21;
    v13 = v20;
    v12 = v21;
  }
  else
  {
    v11 = 0;
    if (!v9)
    {
      v17 = v22;
      goto LABEL_9;
    }
    v12 = 0;
    v13 = v22;
  }
  v14 = 32 * v9;
  v15 = &v13[v12];
  do
  {
    v16 = *v10;
    v10 += 4;
    *v15++ = v16;
    v14 -= 32;
  }
  while (v14);
  v17 = v20;
LABEL_9:
  LODWORD(v21) = v11 + v9;
  v18 = llvm::SimplifyInstructionWithOperands(this, (uint64_t)v17, (v11 + v9), a2, a5, a6);
  if (v20 != v22)
    free(v20);
  return v18;
}

uint64_t llvm::getBestSimplifyQuery<llvm::Function>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t CachedResultImpl;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a1, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a2);
  if (CachedResultImpl)
    v7 = CachedResultImpl + 8;
  else
    v7 = 0;
  v8 = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a1, (uint64_t)&llvm::TargetLibraryAnalysis::Key, a2);
  if (v8)
    v9 = v8 + 8;
  else
    v9 = 0;
  result = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a1, (uint64_t)&llvm::AssumptionAnalysis::Key, a2);
  v11 = result + 8;
  if (!result)
    v11 = 0;
  *(_QWORD *)a3 = *(_QWORD *)(a2 + 40) + 272;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v11;
  *(_QWORD *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 40) = 257;
  return result;
}

{
  return __ZN4llvm20getBestSimplifyQueryINS_8FunctionEJEEEKNS_13SimplifyQueryERNS_15AnalysisManagerIT_JDpT0_EEERS1_(a1, a2, a3);
}

llvm::AssumptionCacheTracker *llvm::getBestSimplifyQuery@<X0>(llvm *this@<X0>, llvm::Pass *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::PMDataManager *v7;
  uint64_t AnalysisPass;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  void **v14;
  unint64_t v15;
  uint64_t v16;
  llvm::AssumptionCacheTracker *result;
  uint64_t v18;
  uint64_t v19[2];
  int v20;
  uint64_t v21[2];
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *__src;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = *(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(v7, &llvm::DominatorTreeWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v9 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::DominatorTreeWrapperPass::ID);
    v7 = *(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24);
  }
  else
  {
    v9 = 0;
  }
  v10 = llvm::PMDataManager::findAnalysisPass(v7, llvm::TargetLibraryInfoWrapperPass::ID, 1);
  if (!v10
    || (v11 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v10 + 96))(v10, llvm::TargetLibraryInfoWrapperPass::ID)) == 0)
  {
    v13 = 0;
    goto LABEL_18;
  }
  v12 = v11;
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  llvm::TargetLibraryAnalysis::run(v11 + 32, (uint64_t)a2, (uint64_t)&v26);
  *(_QWORD *)(v12 + 240) = v26;
  v13 = (uint64_t *)(v12 + 240);
  if (!*(_BYTE *)(v12 + 320))
  {
    *(_QWORD *)(v12 + 248) = v12 + 264;
    *(_QWORD *)(v12 + 256) = 0x600000000;
    if (v28)
      sub_1C49DA960(v12 + 248, (uint64_t)&__src);
    *(_DWORD *)(v12 + 312) = v30;
    *(_BYTE *)(v12 + 320) = 1;
    goto LABEL_15;
  }
  if (v13 != &v26)
  {
    v14 = (void **)(v12 + 248);
    v15 = v28;
    v16 = *(unsigned int *)(v12 + 256);
    if (v16 >= v28)
    {
      if (v28)
        memmove(*v14, __src, 8 * v28);
      goto LABEL_13;
    }
    if (*(_DWORD *)(v12 + 260) < v28)
    {
      *(_DWORD *)(v12 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v12 + 248, v12 + 264, v15, 8);
    }
    else if ((_DWORD)v16)
    {
      memmove(*v14, __src, 8 * v16);
LABEL_11:
      if (v16 != v28)
        memcpy((char *)*v14 + 8 * v16, (char *)__src + 8 * v16, 8 * v28 - 8 * v16);
LABEL_13:
      *(_DWORD *)(v12 + 256) = v15;
      goto LABEL_14;
    }
    v16 = 0;
    goto LABEL_11;
  }
LABEL_14:
  *(_DWORD *)(v12 + 312) = v30;
LABEL_15:
  if (__src != &v29)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v21);
  sub_1C4D8B52C(v19);
LABEL_18:
  result = (llvm::AssumptionCacheTracker *)llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), llvm::AssumptionCacheTracker::ID, 1);
  if (result)
  {
    result = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(llvm::AssumptionCacheTracker *, char *))(*(_QWORD *)result + 96))(result, llvm::AssumptionCacheTracker::ID);
    if (result)
      result = (llvm::AssumptionCacheTracker *)llvm::AssumptionCacheTracker::getAssumptionCache(result, a2);
  }
  v18 = v9 + 32;
  if (!v9)
    v18 = 0;
  *(_QWORD *)a3 = *((_QWORD *)a2 + 5) + 272;
  *(_QWORD *)(a3 + 8) = v13;
  *(_QWORD *)(a3 + 16) = v18;
  *(_QWORD *)(a3 + 24) = result;
  *(_QWORD *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 40) = 257;
  return result;
}

int8x16_t llvm::getBestSimplifyQuery@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int8x16_t *a3@<X8>)
{
  uint64_t v3;
  int8x16_t result;

  v3 = *(_QWORD *)(a1 + 40);
  a3->i64[0] = a2;
  a3->i64[1] = v3;
  result = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  a3[1] = result;
  a3[2].i64[0] = 0;
  a3[2].i16[4] = 257;
  return result;
}

llvm::ValueHandleBase *sub_1C4E70B3C(uint64_t a1, llvm *a2, llvm::Constant *a3, char a4, int a5)
{
  return sub_1C4E62AE0(a2, a3, a4, a5, a1 + 24, (llvm::DSOLocalEquivalent **)3);
}

llvm::UndefValue *sub_1C4E70B5C(uint64_t a1, int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t Cast;

  if (*a3 == a4)
    return (llvm::UndefValue *)a3;
  Cast = llvm::ConstantExpr::getCast(a2);
  return llvm::ConstantFoldConstant(Cast, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C4E70BB0(uint64_t a1, llvm::ConstantExpr *a2, llvm::Constant *a3)
{
  llvm::ConstantExpr *PointerCast;

  if (*(llvm::Constant **)a2 == a3)
    return a2;
  PointerCast = llvm::ConstantExpr::getPointerCast(a2, a3, a3);
  return llvm::ConstantFoldConstant((uint64_t)PointerCast, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C4E70BFC(uint64_t a1, llvm::UndefValue *a2, llvm::Constant *a3)
{
  llvm::UndefValue *PointerBitCastOrAddrSpaceCast;

  if (*(llvm::Constant **)a2 == a3)
    return a2;
  PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(a2, a3, a3);
  return llvm::ConstantFoldConstant((uint64_t)PointerBitCastOrAddrSpaceCast, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C4E70C48(uint64_t a1, llvm::ConstantExpr *this, llvm::Type ***a3, llvm::Type *a4)
{
  uint64_t IntegerCast;

  if (*(llvm::Type ****)this == a3)
    return this;
  IntegerCast = llvm::ConstantExpr::getIntegerCast(this, a3, a4);
  return llvm::ConstantFoldConstant(IntegerCast, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C4E70C98(uint64_t a1, llvm::ConstantExpr *this, llvm::Type ***a3)
{
  llvm::ConstantExpr *FPCast;

  if (*(llvm::Type ****)this == a3)
    return this;
  FPCast = llvm::ConstantExpr::getFPCast(this, a3, (llvm::Type *)a3);
  return llvm::ConstantFoldConstant((uint64_t)FPCast, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C4E70CE4(uint64_t a1, llvm::Type **a2, llvm::Type ***a3)
{
  llvm::UndefValue *ZExtOrBitCast;

  if (*a2 == (llvm::Type *)a3)
    return (llvm::UndefValue *)a2;
  ZExtOrBitCast = llvm::ConstantExpr::getZExtOrBitCast(a2, a3, (llvm::Type *)a3);
  return llvm::ConstantFoldConstant((uint64_t)ZExtOrBitCast, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C4E70D30(uint64_t a1, llvm::Type **a2, llvm::Type ***a3)
{
  llvm::ConstantExpr *SExtOrBitCast;

  if (*a2 == (llvm::Type *)a3)
    return (llvm::UndefValue *)a2;
  SExtOrBitCast = llvm::ConstantExpr::getSExtOrBitCast(a2, a3, (llvm::Type *)a3);
  return llvm::ConstantFoldConstant((uint64_t)SExtOrBitCast, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C4E70D7C(uint64_t a1, llvm::Type **a2, llvm::Type ***a3)
{
  llvm::ConstantExpr *TruncOrBitCast;

  if (*a2 == (llvm::Type *)a3)
    return (llvm::UndefValue *)a2;
  TruncOrBitCast = llvm::ConstantExpr::getTruncOrBitCast(a2, a3, (llvm::Type *)a3);
  return llvm::ConstantFoldConstant((uint64_t)TruncOrBitCast, *(llvm::Type **)(a1 + 16), 0);
}

llvm::ValueHandleBase *sub_1C4E70DC8(llvm *a1, unsigned __int8 **a2, llvm::Constant **a3, llvm::Constant *a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  unsigned __int8 *v7;
  BOOL v8;
  BOOL v9;

  v7 = *a2;
  if (v7)
    v8 = v7[16] > 0x14u;
  else
    v8 = 1;
  if (!v8)
  {
    if (*a3)
      v9 = *((unsigned __int8 *)*a3 + 16) > 0x14u;
    else
      v9 = 1;
    if (!v9)
      return llvm::ConstantFoldBinaryOpOperands(a1, (llvm *)v7, *a3, a4, a5, a6);
    if (a1 <= 0x1E && ((1 << (char)a1) & 0x70066000) != 0)
    {
      *a2 = (unsigned __int8 *)*a3;
      *a3 = (llvm::Constant *)v7;
    }
  }
  return 0;
}

uint64_t sub_1C4E70E2C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  unsigned int v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!a5)
    return 0;
  v5 = a3;
  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 - 41 < 0x12 && v8 > 0x1B)
    v10 = a2;
  else
    v10 = 0;
  v11 = *(unsigned __int8 *)(a3 + 16);
  if (v11 - 41 < 0x12 && v11 > 0x1B)
    v13 = a3;
  else
    v13 = 0;
  if (v10)
  {
    if (*(unsigned __int8 *)(v10 + 16) - 28 == a1)
    {
      v14 = *(_QWORD *)(v10 - 32);
      v15 = sub_1C4E6D628(a1);
      if (v15)
      {
        if (v15 == v14)
          return a2;
        result = sub_1C4E6D628(a1);
        if (result)
          return result;
      }
    }
  }
  if (v13)
  {
    if (*(unsigned __int8 *)(v13 + 16) - 28 == a1)
    {
      v17 = *(_QWORD *)(v13 - 64);
      v18 = sub_1C4E6D628(a1);
      if (v18)
      {
        if (v18 == v17)
          return v5;
        result = sub_1C4E6D628(a1);
        if (result)
          return result;
      }
    }
  }
  result = 0;
  if (a1 <= 0x1E && ((1 << a1) & 0x70066000) != 0)
  {
    if (!v10
      || *(unsigned __int8 *)(v10 + 16) - 28 != a1
      || (v19 = *(_QWORD *)(v10 - 64), (v20 = sub_1C4E6D628(a1)) == 0))
    {
      if (!v13)
        return 0;
      goto LABEL_35;
    }
    if (v20 != v19)
    {
      result = sub_1C4E6D628(a1);
      if (!v13 || result)
        return result;
LABEL_35:
      if (*(unsigned __int8 *)(v13 + 16) - 28 == a1)
      {
        v21 = *(_QWORD *)(v13 - 32);
        result = sub_1C4E6D628(a1);
        if (!result)
          return result;
        if (result != v21)
        {
          result = sub_1C4E6D628(a1);
          v5 = result;
          if (!result)
            return result;
        }
        return v5;
      }
      return 0;
    }
    return a2;
  }
  return result;
}

uint64_t sub_1C4E71060(uint64_t a1, llvm::Constant *a2)
{
  llvm::APInt *v3;
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  llvm::APFloatBase *SplatValue;
  int v10;
  llvm::Type *v11;
  char v12;
  llvm::UndefValue *AggregateElement;
  int v14;
  unsigned int v15;

  if (a2 && *((_BYTE *)a2 + 16) == 16)
  {
    v3 = (llvm::Constant *)((char *)a2 + 24);
    v4 = *((_DWORD *)a2 + 8);
    if (v4 <= 0x40)
    {
      v5 = *(_QWORD *)v3;
LABEL_5:
      v6 = v5 == 0;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v8 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
  else
    v8 = 0;
  if (!v8)
  {
LABEL_28:
    v12 = 0;
    return v12 & 1;
  }
  SplatValue = llvm::Constant::getSplatValue(a2, 0);
  if (!SplatValue || *((_BYTE *)SplatValue + 16) != 16)
  {
    if (*(_BYTE *)(v7 + 8) == 18)
    {
      v10 = *(_DWORD *)(v7 + 32);
      if (v10)
      {
        v11 = 0;
        v12 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement(a2, v11);
          if (!AggregateElement)
            break;
          v14 = *((unsigned __int8 *)AggregateElement + 16);
          if ((v14 - 11) >= 2)
          {
            if (v14 != 16)
              goto LABEL_28;
            v15 = *((_DWORD *)AggregateElement + 8);
            if (v15 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)AggregateElement
                                                                                           + 24)) != v15)
                goto LABEL_28;
            }
            else if (*((_QWORD *)AggregateElement + 3))
            {
              goto LABEL_28;
            }
            v12 = 1;
          }
          v11 = (llvm::Type *)((_DWORD)v11 + 1);
          if (v10 == (_DWORD)v11)
            return v12 & 1;
        }
      }
    }
    goto LABEL_28;
  }
  v4 = *((_DWORD *)SplatValue + 8);
  if (v4 <= 0x40)
  {
    v5 = *((_QWORD *)SplatValue + 3);
    goto LABEL_5;
  }
  v3 = (llvm::APFloatBase *)((char *)SplatValue + 24);
LABEL_30:
  v6 = llvm::APInt::countLeadingZerosSlowCase(v3) == v4;
LABEL_31:
  v12 = v6;
  return v12 & 1;
}

uint64_t sub_1C4E7119C(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  unsigned int v4;
  unint64_t **v5;
  unsigned int v6;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  llvm::APFloatBase *SplatValue;
  llvm::APFloatBase *v14;
  unint64_t **v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  llvm::Type *v19;
  llvm::UndefValue *AggregateElement;
  llvm::UndefValue *v21;
  int v22;
  unint64_t **v23;
  unsigned int v24;

  v4 = a2[16];
  if (!a2 || v4 != 16)
  {
    v9 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v10 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
    else
      v10 = 0;
    v11 = !v10 || v4 > 0x14;
    v12 = v11;
    if (v11)
      return (v12 ^ 1) & v2;
    SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
    if (SplatValue && (v14 = SplatValue, *((_BYTE *)SplatValue + 16) == 16))
    {
      v15 = (unint64_t **)((char *)SplatValue + 24);
      v16 = *((_DWORD *)v14 + 8);
      if (v16 <= 0x40)
      {
        v17 = *v15 == (unint64_t *)(1 << (v16 - 1));
        goto LABEL_22;
      }
      if ((((*v15)[(v16 - 1) >> 6] >> (v16 - 1)) & 1) != 0)
      {
        v17 = llvm::APInt::countTrailingZerosSlowCase(v15) == v16 - 1;
LABEL_22:
        v2 = v17;
        return (v12 ^ 1) & v2;
      }
    }
    else if (*(_BYTE *)(v9 + 8) == 18)
    {
      v18 = *(_DWORD *)(v9 + 32);
      if (v18)
      {
        v19 = 0;
        v2 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a2, v19);
          if (!AggregateElement)
            break;
          v21 = AggregateElement;
          v22 = *((unsigned __int8 *)AggregateElement + 16);
          if ((v22 - 11) >= 2)
          {
            if (v22 != 16)
              break;
            v23 = (unint64_t **)((char *)AggregateElement + 24);
            v24 = *((_DWORD *)v21 + 8);
            if (v24 > 0x40)
            {
              if ((((*v23)[(v24 - 1) >> 6] >> (v24 - 1)) & 1) == 0
                || llvm::APInt::countTrailingZerosSlowCase(v23) != v24 - 1)
              {
                break;
              }
              v2 = 1;
            }
            else
            {
              v2 = 1;
              if (*v23 != (unint64_t *)(1 << (v24 - 1)))
                break;
            }
          }
          v19 = (llvm::Type *)((_DWORD)v19 + 1);
          if (v18 == (_DWORD)v19)
            return (v12 ^ 1) & v2;
        }
      }
    }
    v2 = 0;
    return (v12 ^ 1) & v2;
  }
  v5 = (unint64_t **)(a2 + 24);
  v6 = *((_DWORD *)a2 + 8);
  if (v6 > 0x40)
  {
    if ((((*v5)[(v6 - 1) >> 6] >> (v6 - 1)) & 1) == 0)
      return 0;
    return llvm::APInt::countTrailingZerosSlowCase(v5) == v6 - 1;
  }
  else
  {
    return *v5 == (unint64_t *)(1 << (v6 - 1));
  }
}

uint64_t sub_1C4E71378(uint64_t a1, unint64_t **a2)
{
  unint64_t **v3;
  unsigned int v4;
  BOOL v5;
  char v6;
  unint64_t *v7;
  BOOL v8;
  llvm::APFloatBase *SplatValue;
  llvm::APFloatBase *v10;
  int v11;
  llvm::Type *v12;
  llvm::UndefValue *AggregateElement;
  llvm::UndefValue *v14;
  int v15;
  unint64_t **v16;
  unsigned int v17;

  if (a2 && *((_BYTE *)a2 + 16) == 16)
  {
    v3 = a2 + 3;
    v4 = *((_DWORD *)a2 + 8);
  }
  else
  {
    v7 = *a2;
    if (*a2)
      v8 = ((*a2)[1] & 0xFE) == 18;
    else
      v8 = 0;
    if (!v8)
      goto LABEL_31;
    SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
    if (!SplatValue || (v10 = SplatValue, *((_BYTE *)SplatValue + 16) != 16))
    {
      if (*((_BYTE *)v7 + 8) == 18)
      {
        v11 = *((_DWORD *)v7 + 8);
        if (v11)
        {
          v12 = 0;
          v6 = 0;
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a2, v12);
            if (!AggregateElement)
              break;
            v14 = AggregateElement;
            v15 = *((unsigned __int8 *)AggregateElement + 16);
            if ((v15 - 11) >= 2)
            {
              if (v15 != 16)
                goto LABEL_31;
              v16 = (unint64_t **)((char *)AggregateElement + 24);
              v17 = *((_DWORD *)v14 + 8);
              if (v17 > 0x40)
              {
                if ((((*v16)[(v17 - 1) >> 6] >> (v17 - 1)) & 1) == 0
                  || llvm::APInt::countTrailingZerosSlowCase(v16) != v17 - 1)
                {
                  goto LABEL_31;
                }
                v6 = 1;
              }
              else
              {
                v6 = 1;
                if (*v16 != (unint64_t *)(1 << (v17 - 1)))
                  goto LABEL_31;
              }
            }
            v12 = (llvm::Type *)((_DWORD)v12 + 1);
            if (v11 == (_DWORD)v12)
              return v6 & 1;
          }
        }
      }
      goto LABEL_31;
    }
    v3 = (unint64_t **)((char *)SplatValue + 24);
    v4 = *((_DWORD *)v10 + 8);
  }
  if (v4 <= 0x40)
  {
    v5 = *v3 == (unint64_t *)(1 << (v4 - 1));
    goto LABEL_6;
  }
  if ((((*v3)[(v4 - 1) >> 6] >> (v4 - 1)) & 1) == 0)
  {
LABEL_31:
    v6 = 0;
    return v6 & 1;
  }
  v5 = llvm::APInt::countTrailingZerosSlowCase(v3) == v4 - 1;
LABEL_6:
  v6 = v5;
  return v6 & 1;
}

uint64_t sub_1C4E714F4(_QWORD **a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 47
      && ((v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (v9 = *(uint64_t **)(a2 - 8))
        : (v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (v10 = *v9) != 0))
    {
      **a1 = v10;
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

const void *sub_1C4E71560(llvm::APInt *a1, llvm::DataLayout *a2, uint64_t **a3, char a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  const void *result;
  const void *v13;
  unsigned int IndexTypeSizeInBits;

  v8 = *a3;
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a2, **a3);
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v13, 0, 0);
    v8 = *a3;
  }
  else
  {
    v13 = 0;
  }
  v10 = (uint64_t *)llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v8, a2, &v13, a4, 0, 0, v9);
  *a3 = v10;
  v11 = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a2, *v10);
  if (IndexTypeSizeInBits < v11)
  {
    result = llvm::APInt::sext((llvm::APInt *)&v13, v11, a1);
  }
  else if (IndexTypeSizeInBits > v11)
  {
    result = llvm::APInt::trunc((llvm::APInt *)&v13, v11, a1);
  }
  else
  {
    result = (const void *)sub_1C5DD14E0((uint64_t)a1, (uint64_t)&v13);
  }
  if (IndexTypeSizeInBits >= 0x41)
  {
    result = v13;
    if (v13)
      return (const void *)MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C4E7166C(int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6)
{
  uint64_t result;

  if (!a6)
    return 0;
  result = sub_1C4E71B54(a1, a2, a3, a4);
  if (!result)
    return sub_1C4E71B54(a1, a3, a2, a4);
  return result;
}

uint64_t sub_1C4E716EC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;

  if (!a5)
    return 0;
  v6 = a3;
  v7 = a2;
  if (*(_BYTE *)(a2 + 16) == 85)
    v9 = a2;
  else
    v9 = a3;
  v10 = sub_1C4E6D628(a1);
  v11 = sub_1C4E6D628(a1);
  if (v10 == v11)
    return v10;
  v12 = *(unsigned __int8 *)(a4 + 41);
  if (v10)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (!v13)
  {
    if ((sub_1C4E7B480(v10) & 1) != 0)
      return v11;
    v12 = *(unsigned __int8 *)(a4 + 41);
  }
  v14 = !v11 || v12 == 0;
  if (!v14 && (sub_1C4E7B480(v11) & 1) != 0)
    return v10;
  if (v10 == *(_QWORD *)(v9 - 64) && v11 == *(_QWORD *)(v9 - 32))
    return v9;
  v15 = v10 == 0;
  if (v11)
    v16 = 1;
  else
    v16 = v10 == 0;
  if (!v11)
    v15 = 0;
  if (!v15 && v16)
    return 0;
  if (v11)
    v10 = v11;
  v17 = *(unsigned __int8 *)(v10 + 16);
  v18 = v10 && v17 >= 0x1C;
  if (!v18 || v17 - 28 != a1)
    return 0;
  v20 = -32;
  if (v11)
    v20 = -64;
  v21 = *(_QWORD *)(v9 + v20);
  if (v9 == v7)
    v7 = v21;
  else
    v6 = v21;
  v22 = *(_DWORD *)(v10 + 20);
  if ((v22 & 0x40000000) != 0)
  {
    v23 = *(_QWORD **)(v10 - 8);
    if (*v23 != v7)
    {
      if ((llvm::Instruction::isCommutative((llvm::Instruction *)v10) & 1) == 0)
        return 0;
      goto LABEL_56;
    }
  }
  else
  {
    v23 = (_QWORD *)(v10 - 32 * (v22 & 0x7FFFFFF));
    if (*v23 != v7)
    {
      if ((llvm::Instruction::isCommutative((llvm::Instruction *)v10) & 1) == 0)
        return 0;
      v24 = -(uint64_t)(v22 & 0x7FFFFFF);
      goto LABEL_54;
    }
  }
  if (v23[4] == v6)
    return v10;
  if ((llvm::Instruction::isCommutative((llvm::Instruction *)v10) & 1) == 0)
    return 0;
  if ((v22 & 0x40000000) != 0)
  {
    v23 = *(_QWORD **)(v10 - 8);
    goto LABEL_56;
  }
  v24 = -(uint64_t)(v22 & 0x7FFFFFF);
LABEL_54:
  v23 = (_QWORD *)(v10 + 32 * v24);
LABEL_56:
  if (v23[4] != v7 || *v23 != v6)
    return 0;
  return v10;
}

uint64_t sub_1C4E71910(int a1, const llvm::Instruction *a2, const llvm::Instruction *a3, uint64_t a4, int a5)
{
  llvm::DominatorTree *v7;
  const llvm::Instruction *v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  const llvm::Instruction **v12;
  uint64_t v13;
  uint64_t v14;

  if (!a5)
    return 0;
  v7 = *(llvm::DominatorTree **)(a4 + 16);
  if (*((_BYTE *)a2 + 16) == 83)
  {
    v8 = a2;
    if (!sub_1C4E71C9C((uint64_t)a3, a2, v7))
      return 0;
  }
  else
  {
    v8 = a3;
    if (!sub_1C4E71C9C((uint64_t)a2, a3, v7))
      return 0;
  }
  v10 = *((_DWORD *)v8 + 5);
  if ((v10 & 0x40000000) == 0)
  {
    v11 = v10 & 0x7FFFFFF;
    v12 = (const llvm::Instruction **)((char *)v8 - 32 * v11);
    if (!v11)
      return 0;
LABEL_11:
    v13 = 0;
    v14 = 32 * v11;
    while (1)
    {
      if (*v12 == v8)
      {
        result = v13;
      }
      else
      {
        result = sub_1C4E6D628(a1);
        if (!result)
          return result;
        if (v13 && result != v13)
          return 0;
      }
      v12 += 4;
      v13 = result;
      v14 -= 32;
      if (!v14)
        return result;
    }
  }
  v12 = (const llvm::Instruction **)*((_QWORD *)v8 - 1);
  v11 = v10 & 0x7FFFFFF;
  if (v11)
    goto LABEL_11;
  return 0;
}

BOOL sub_1C4E71A38(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  unsigned int v6;
  int v7;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5)
      return 0;
    v6 = *(unsigned __int16 *)(a2 + 18);
    v3 = v6 > 0x1B;
    v7 = (1 << v6) & 0xC180000;
    if (v3 || v7 == 0)
      return 0;
  }
  else
  {
    v3 = v2 > 0x37;
    v4 = (1 << v2) & 0xC1800000000000;
    if (v3 || v4 == 0)
      return 0;
  }
  if ((*(_BYTE *)(a2 + 17) & 2) == 0)
    return 0;
  return sub_1C4E71AA0(a1, a2);
}

BOOL sub_1C4E71AA0(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v2 < 0x1C)
  {
    if (v2 == 5 && *(unsigned __int16 *)(a2 + 18) - 19 <= 1)
    {
      v5 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if (v5)
      {
        **(_QWORD **)a1 = v5;
        v6 = *(_DWORD *)(a2 + 20);
        goto LABEL_13;
      }
    }
    return 0;
  }
  if (v2 - 47 > 1)
    return 0;
  v3 = *(_DWORD *)(a2 + 20);
  v4 = (v3 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
  v7 = *v4;
  if (!v7)
    return 0;
  **(_QWORD **)a1 = v7;
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
  {
    v8 = *(_QWORD *)(a2 - 8);
    return *(_QWORD *)(a1 + 8) == *(_QWORD *)(v8 + 32);
  }
LABEL_13:
  v8 = a2 - 32 * (v6 & 0x7FFFFFF);
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(v8 + 32);
}

uint64_t sub_1C4E71B54(int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t result;
  unsigned int v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = 0;
  if (a2)
  {
    v8 = *(unsigned __int8 *)(a2 + 16);
    v9 = v8 >= 0x1C && v8 - 59 >= 0xFFFFFFEE;
    if (v9 && v8 - 28 == a4)
    {
      v11 = *(_QWORD *)(a2 - 64);
      v12 = *(_QWORD *)(a2 - 32);
      result = sub_1C4E6D628(a1);
      if (result)
      {
        v13 = result;
        result = sub_1C4E6D628(a1);
        if (result)
        {
          v14 = result;
          if (v13 == v11 && result == v12)
          {
            return a2;
          }
          else
          {
            if (a4 > 0x1E)
              return sub_1C4E6D628(a4);
            if (((1 << a4) & 0x70066000) == 0)
              return sub_1C4E6D628(a4);
            if (v13 != v12)
              return sub_1C4E6D628(a4);
            result = a2;
            if (v14 != v11)
              return sub_1C4E6D628(a4);
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_1C4E71C9C(uint64_t a1, const llvm::Instruction *a2, llvm::DominatorTree *a3)
{
  _BOOL8 result;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = 1;
  if (a1)
  {
    v6 = *(unsigned __int8 *)(a1 + 16);
    if (v6 >= 0x1C)
    {
      v7 = *(_QWORD *)(a1 + 40);
      if (!v7)
        return 0;
      if (!*((_QWORD *)a2 + 5))
        return 0;
      v8 = *(_QWORD *)(v7 + 56);
      if (!v8)
        return 0;
      if (a3)
        return llvm::DominatorTree::dominates(a3, (const llvm::Value *)a1, a2);
      v9 = *(_QWORD *)(v8 + 80);
      v10 = v9 ? v9 - 24 : 0;
      return v10 == v7 && v6 != 33 && v6 != 39;
    }
  }
  return result;
}

llvm::Value **sub_1C4E71D14(llvm *a1, unsigned __int8 *a2, llvm::Constant *a3, llvm::Constant **a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v6;
  int v8;
  llvm::Value **result;
  unsigned __int8 *v10;
  llvm::Constant *v11;
  llvm::Type *v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  BOOL v19;
  llvm::Type *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  llvm::Constant *v24;
  llvm::Type *v25;

  v6 = (int)a5;
  v8 = (int)a1;
  v24 = a3;
  v25 = (llvm::Type *)a2;
  result = (llvm::Value **)sub_1C4E70DC8(a1, (unsigned __int8 **)&v25, &v24, *a4, a5, a6);
  if (result)
    return result;
  v11 = v24;
  v10 = (unsigned __int8 *)v25;
  result = sub_1C4E71F8C(v8, v25, (unsigned __int8 *)v24, (uint64_t)a4);
  if (result)
    return result;
  v13 = v10[16];
  if (v8 != 20)
  {
    switch(v13)
    {
      case 5:
        v16 = *((unsigned __int16 *)v10 + 9);
        if (v16 != 22)
          goto LABEL_21;
        v15 = &v10[-32 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 32];
        break;
      case 47:
        v17 = *((_QWORD *)v10 - 4);
        if (v17)
          v19 = *(_BYTE *)(v17 + 16) == 16;
        else
          v19 = 0;
        if (!v19)
        {
          v13 = 47;
          goto LABEL_41;
        }
        goto LABEL_33;
      case 50:
        v15 = v10 - 32;
        break;
      default:
        goto LABEL_40;
    }
    if (v11 == *(llvm::Constant **)v15)
      return llvm::Constant::getNullValue(*(llvm::Constant **)v10, v12);
    if (v13 != 5)
    {
LABEL_41:
      if (*((_BYTE *)v11 + 16) != 85)
        goto LABEL_44;
      goto LABEL_42;
    }
    v16 = *((unsigned __int16 *)v10 + 9);
LABEL_21:
    if (v16 != 19)
      goto LABEL_26;
    v17 = *(_QWORD *)&v10[-32 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 32];
    if (!v17 || *(_BYTE *)(v17 + 16) != 16)
      goto LABEL_26;
LABEL_33:
    if (!v11 || *((_BYTE *)v11 + 16) != 16)
      goto LABEL_41;
    v23 = 0;
    llvm::APInt::umul_ov((llvm::APInt *)(v17 + 24), (uint64_t **)v11 + 3, &v23, (uint64_t)&v21);
    if (v22 >= 0x41 && v21)
      MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
    if (v23)
      return llvm::Constant::getNullValue(*(llvm::Constant **)v10, v20);
    v13 = v10[16];
    goto LABEL_40;
  }
  if (v13 == 5)
  {
    if (*((_WORD *)v10 + 9) == 23)
    {
      v14 = &v10[-32 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 32];
LABEL_14:
      if (v11 == *(llvm::Constant **)v14)
        return llvm::Constant::getNullValue(*(llvm::Constant **)v10, v12);
      goto LABEL_41;
    }
LABEL_26:
    v13 = 5;
    goto LABEL_41;
  }
  if (v13 == 51)
  {
    v14 = v10 - 32;
    goto LABEL_14;
  }
LABEL_40:
  if (v13 != 85)
    goto LABEL_41;
LABEL_42:
  result = (llvm::Value **)sub_1C4E716EC(v8, (uint64_t)v10, (uint64_t)v11, (uint64_t)a4, v6);
  if (result)
    return result;
  v13 = v10[16];
LABEL_44:
  if (v13 != 83 && *((_BYTE *)v11 + 16) != 83
    || (result = (llvm::Value **)sub_1C4E71910(v8, (const llvm::Instruction *)v10, v11, (uint64_t)a4, v6)) == 0)
  {
    if (!sub_1C4E7236C((uint64_t)v10, (unsigned __int8 *)v11, (uint64_t)a4, v6, v8 == 20))
      return 0;
    return llvm::Constant::getNullValue(*(llvm::Constant **)v10, v20);
  }
  return result;
}

llvm::Value **sub_1C4E71F8C(int a1, llvm::Type *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v6;
  llvm::Constant *v8;
  unsigned int v9;
  llvm::Constant *v11;
  llvm::Constant *v12;
  BOOL v13;
  int v14;
  llvm::Type *v15;
  llvm::UndefValue *AggregateElement;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  llvm::Constant *v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 **v27;
  int v28;
  unsigned __int8 **v29;
  int v30;
  unsigned __int8 **v31;
  unsigned __int8 *v32;
  unsigned __int8 **v33;
  char v34;
  unsigned __int8 *v35;

  v6 = (uint64_t)a2;
  v8 = *(llvm::Constant **)a2;
  if (*(_BYTE *)(a4 + 41) && (sub_1C4E7B480((uint64_t)a3) & 1) != 0)
    return (llvm::Value **)llvm::PoisonValue::get(v8, a2);
  v9 = a3[16];
  if (v9 == 12)
    return (llvm::Value **)llvm::PoisonValue::get(v8, a2);
  if (v9 <= 0x14)
  {
    if ((llvm::Constant::isNullValue((llvm::Constant *)a3) & 1) != 0
      || (sub_1C4E71060((uint64_t)&v35, (llvm::Constant *)a3) & 1) != 0)
    {
      return (llvm::Value **)llvm::PoisonValue::get(v8, a2);
    }
    v9 = a3[16];
  }
  if (v9 >= 0x15)
    v11 = 0;
  else
    v11 = (llvm::Constant *)a3;
  if (*((_BYTE *)v8 + 8) == 18)
    v12 = v8;
  else
    v12 = 0;
  if (v11)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (!v13)
  {
    v14 = *((_DWORD *)v12 + 8);
    if (v14)
    {
      v15 = 0;
      do
      {
        AggregateElement = llvm::Constant::getAggregateElement(v11, v15);
        if (AggregateElement)
        {
          v17 = (uint64_t)AggregateElement;
          if ((llvm::Constant::isNullValue(AggregateElement) & 1) != 0
            || *(_BYTE *)(a4 + 41) && (sub_1C4E7B480(v17) & 1) != 0)
          {
            return (llvm::Value **)llvm::PoisonValue::get(v8, a2);
          }
        }
        v15 = (llvm::Type *)((_DWORD)v15 + 1);
      }
      while (v14 != (_DWORD)v15);
    }
  }
  v18 = *(unsigned __int8 *)(v6 + 16);
  if (v18 != 12)
  {
    if (*(_BYTE *)(a4 + 41))
    {
      if (sub_1C4E7B480(v6))
      {
LABEL_90:
        v22 = v8;
        return llvm::Constant::getNullValue(v22, a2);
      }
      v18 = *(unsigned __int8 *)(v6 + 16);
    }
    if (v18 <= 0x14
      && ((llvm::Constant::isNullValue((llvm::Constant *)v6) & 1) != 0
       || (sub_1C4E71060((uint64_t)&v35, (llvm::Constant *)v6) & 1) != 0))
    {
      v22 = *(llvm::Constant **)v6;
      return llvm::Constant::getNullValue(v22, a2);
    }
    v19 = a1 - 19;
    if ((unsigned __int8 *)v6 == a3)
    {
      if (v19 <= 1)
        return llvm::ConstantInt::get(v8, 1, 0);
      goto LABEL_90;
    }
    v35 = 0;
    if ((sub_1C4D89CC8((uint64_t)&v34, (llvm::Constant *)a3) & 1) != 0)
      goto LABEL_33;
    v20 = *((_DWORD *)v8 + 2);
    if ((v20 & 0xFE) == 0x12)
      v20 = *(_DWORD *)(**((_QWORD **)v8 + 2) + 8);
    if (v20 == 269)
      goto LABEL_33;
    v33 = &v35;
    if (sub_1C4B0378C(&v33, (uint64_t)a3))
    {
      v23 = *(_DWORD *)(*(_QWORD *)v35 + 8);
      if ((v23 & 0xFE) == 0x12)
        v23 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v35 + 16) + 8);
      if (v23 == 269)
      {
LABEL_33:
        v21 = v6;
        if (v19 < 2)
          return (llvm::Value **)v21;
        goto LABEL_90;
      }
    }
    v24 = *(unsigned __int8 *)(v6 + 16);
    if (v24 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 17)
        return 0;
      v27 = (unsigned __int8 **)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
      v25 = *v27;
      if (!*v27)
      {
        v26 = v27[4];
        goto LABEL_59;
      }
      v35 = *v27;
      v26 = v27[4];
    }
    else
    {
      if (v24 != 45)
        return 0;
      v25 = *(unsigned __int8 **)(v6 - 64);
      if (!v25)
      {
        v26 = *(unsigned __int8 **)(v6 - 32);
        goto LABEL_59;
      }
      v35 = *(unsigned __int8 **)(v6 - 64);
      v26 = *(unsigned __int8 **)(v6 - 32);
    }
    if (v26 == a3)
    {
LABEL_62:
      if (a1 == 20 || a1 == 23)
      {
        if (!*(_BYTE *)(a4 + 40) || (*(_BYTE *)(v6 + 17) & 4) == 0)
        {
          v28 = v25[16];
          if (v28 == 5)
          {
            if (*((_WORD *)v25 + 9) == 20)
            {
              v29 = (unsigned __int8 **)&v25[-32 * (*((_DWORD *)v25 + 5) & 0x7FFFFFF) + 32];
LABEL_75:
              if (*v29 != a3)
                return 0;
              goto LABEL_80;
            }
          }
          else if (v28 == 48)
          {
            v29 = (unsigned __int8 **)(v25 - 32);
            goto LABEL_75;
          }
          return 0;
        }
LABEL_80:
        v21 = (uint64_t)v25;
        if (v19 < 2)
          return (llvm::Value **)v21;
        goto LABEL_89;
      }
      if (*(_BYTE *)(a4 + 40) && (*(_BYTE *)(v6 + 17) & 2) != 0)
        goto LABEL_80;
      v30 = v25[16];
      if (v30 == 5)
      {
        if (*((_WORD *)v25 + 9) == 19)
        {
          v31 = (unsigned __int8 **)&v25[-32 * (*((_DWORD *)v25 + 5) & 0x7FFFFFF) + 32];
LABEL_84:
          v32 = *v31;
          if (v32 == a3)
            v21 = (uint64_t)v25;
          else
            v21 = 0;
          if (v19 < 2 || v32 != a3)
            return (llvm::Value **)v21;
LABEL_89:
          v8 = *(llvm::Constant **)v6;
          goto LABEL_90;
        }
      }
      else if (v30 == 47)
      {
        v31 = (unsigned __int8 **)(v25 - 32);
        goto LABEL_84;
      }
      return 0;
    }
LABEL_59:
    if (!v26)
      return 0;
    v35 = v26;
    v13 = v25 == a3;
    v25 = v26;
    if (!v13)
      return 0;
    goto LABEL_62;
  }
  return (llvm::Value **)v6;
}

uint64_t sub_1C4E7236C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, int a5)
{
  int v8;
  llvm::ConstantInt **v9;
  const void **v10;
  unsigned int v11;
  const llvm::APInt *v12;
  llvm::Value **v13;
  unint64_t v14;
  const llvm::APInt *v15;
  llvm::Value **v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t result;
  const void **v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  _QWORD *v28;
  BOOL v29;
  size_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  const llvm::APInt *v34;
  llvm::Value **v35;
  unint64_t v36;
  const llvm::APInt *v37;
  llvm::Value **v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  void *__src;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  _QWORD v45[2];
  _QWORD *v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v50;
  char *p_src;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;

  if (!a4)
    return 0;
  v8 = a4 - 1;
  if (!a5)
  {
    v45[1] = 0;
    v46 = 0;
    v45[0] = &v46;
    if ((sub_1C4D89F84((uint64_t)v45, a2) & 1) == 0)
      goto LABEL_44;
    v23 = *(_QWORD *)(a3 + 24);
    v24 = *(_QWORD *)(a3 + 32);
    v25 = *(_QWORD *)(a3 + 16);
    if (!v24 || !*(_QWORD *)(v24 + 40))
    {
      if (!a1 || *(unsigned __int8 *)(a1 + 16) < 0x1Cu || (v24 = a1, !*(_QWORD *)(a1 + 40)))
        v24 = 0;
    }
    p_src = *(char **)a3;
    v52 = v23;
    v53 = v24;
    v54 = v25;
    v55 = 0;
    v56 = 1;
    sub_1C4F83784(a1, 0, (uint64_t *)&p_src, &__src);
    LODWORD(v52) = v42;
    if (v42 > 0x40)
    {
      v30 = (((unint64_t)v42 + 63) >> 3) & 0x3FFFFFF8;
      p_src = (char *)operator new[]();
      memcpy(p_src, __src, v30);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&p_src);
      v27 = p_src;
      v28 = v46;
      if (v52 > 0x40)
      {
        v31 = (((unint64_t)v52 + 63) >> 3) & 0x3FFFFFF8;
        while (v31)
        {
          v32 = *(_QWORD *)&p_src[v31 - 8];
          v33 = *(_QWORD *)(*v46 - 8 + v31);
          v31 -= 8;
          if (v32 != v33)
          {
            v29 = v32 <= v33;
            if (!p_src)
              goto LABEL_40;
            goto LABEL_57;
          }
        }
        v29 = 0;
        if (p_src)
LABEL_57:
          MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
LABEL_40:
        if (v44 >= 0x41 && v43)
          MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
        if (v42 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        if (v29)
          return 1;
LABEL_44:
        v22 = 36;
        goto LABEL_45;
      }
    }
    else
    {
      if (v42)
        v26 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v42;
      else
        v26 = 0;
      v27 = (char *)(v26 & ~(unint64_t)__src);
      v28 = v46;
    }
    v29 = (unint64_t)v27 < *v28;
    goto LABEL_40;
  }
  v9 = *(llvm::ConstantInt ***)a1;
  __src = 0;
  p_src = (char *)&__src;
  v52 = 0;
  if (!sub_1C4D89F84((uint64_t)&p_src, (unsigned __int8 *)a1))
    goto LABEL_26;
  v10 = (const void **)__src;
  v11 = *((_DWORD *)__src + 2);
  if (v11 > 0x40)
  {
    if (((*(_QWORD *)(*(_QWORD *)__src + 8 * ((v11 - 1) >> 6)) >> (v11 - 1)) & 1) != 0
      && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)__src) == v11 - 1)
    {
      goto LABEL_26;
    }
  }
  else if (*(_QWORD *)__src == 1 << (v11 - 1))
  {
    goto LABEL_26;
  }
  sub_1C4DA6CE8(v10, (uint64_t)&p_src);
  v13 = llvm::ConstantInt::get(v9, (llvm::Type *)&p_src, v12);
  if (v52 >= 0x41 && p_src)
    MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
  sub_1C4DA6CE8((const void **)__src, (uint64_t)&v49);
  if (v50 > 0x40)
  {
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v49);
  }
  else
  {
    if (v50)
      v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v50;
    else
      v14 = 0;
    v49 = v14 & ~v49;
  }
  llvm::APInt::operator++((uint64_t)&v49);
  LODWORD(v52) = v50;
  p_src = (char *)v49;
  v50 = 0;
  v16 = llvm::ConstantInt::get(v9, (llvm::Type *)&p_src, v15);
  if (v52 >= 0x41 && p_src)
    MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
  if (v50 >= 0x41 && v49)
    MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
  v17 = (unsigned __int8 *)sub_1C4E66730(40, (llvm *)a2, (llvm::UndefValue *)v16, a3, v8);
  if (v17 && v17[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)v17))
    return 1;
  v18 = (unsigned __int8 *)sub_1C4E66730(38, (llvm *)a2, (llvm::UndefValue *)v13, a3, v8);
  if (v18)
  {
    if (v18[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)v18))
      return 1;
  }
LABEL_26:
  p_src = (char *)&__src;
  v52 = 0;
  result = (uint64_t)sub_1C4D89F84((uint64_t)&p_src, a2);
  if (!(_DWORD)result)
    return result;
  v20 = (const void **)__src;
  v21 = *((_DWORD *)__src + 2);
  if (v21 > 0x40)
  {
    if (((*(_QWORD *)(*(_QWORD *)__src + 8 * ((v21 - 1) >> 6)) >> (v21 - 1)) & 1) != 0
      && llvm::APInt::countTrailingZerosSlowCase((unint64_t **)__src) == v21 - 1)
    {
      goto LABEL_29;
    }
    goto LABEL_67;
  }
  if (*(_QWORD *)__src != 1 << (v21 - 1))
  {
LABEL_67:
    sub_1C4DA6CE8(v20, (uint64_t)&p_src);
    v35 = llvm::ConstantInt::get(v9, (llvm::Type *)&p_src, v34);
    if (v52 >= 0x41 && p_src)
      MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
    sub_1C4DA6CE8((const void **)__src, (uint64_t)&v47);
    if (v48 > 0x40)
    {
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v47);
    }
    else
    {
      if (v48)
        v36 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v48;
      else
        v36 = 0;
      v47 = v36 & ~v47;
    }
    llvm::APInt::operator++((uint64_t)&v47);
    LODWORD(v52) = v48;
    p_src = (char *)v47;
    v48 = 0;
    v38 = llvm::ConstantInt::get(v9, (llvm::Type *)&p_src, v37);
    if (v52 >= 0x41 && p_src)
      MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
    if (v48 >= 0x41 && v47)
      MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
    v39 = (unsigned __int8 *)sub_1C4E66730(38, (llvm *)a1, (llvm::UndefValue *)v38, a3, v8);
    if (!v39)
      return 0;
    if (v39[16] > 0x14u)
      return 0;
    if (!llvm::Constant::isAllOnesValue((llvm::Constant *)v39))
      return 0;
    v40 = (unsigned __int8 *)sub_1C4E66730(40, (llvm *)a1, (llvm::UndefValue *)v35, a3, v8);
    return v40 && v40[16] <= 0x14u && llvm::Constant::isAllOnesValue((llvm::Constant *)v40);
  }
LABEL_29:
  v22 = 33;
LABEL_45:
  result = (uint64_t)sub_1C4E66730(v22, (llvm *)a1, (llvm::UndefValue *)a2, a3, v8);
  if (!result)
    return result;
  if (*(unsigned __int8 *)(result + 16) <= 0x14u)
    return llvm::Constant::isAllOnesValue((llvm::Constant *)result);
  return 0;
}

llvm::Value **sub_1C4E72984(llvm *a1, unsigned __int8 *a2, llvm::Constant *a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  int v6;
  int v8;
  llvm::Value **result;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  llvm::Type *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  BOOL v19;
  int v20;
  unsigned int v22;
  unint64_t v23;
  int v24;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  int v29;
  unsigned int v31;
  unint64_t v32;
  int v33;
  int v35;
  unsigned __int8 **v36;
  unsigned __int8 *v37;
  llvm::Constant *v38;
  llvm::Type *v39;

  v6 = (int)a5;
  v8 = (int)a1;
  v38 = a3;
  v39 = (llvm::Type *)a2;
  result = (llvm::Value **)sub_1C4E70DC8(a1, (unsigned __int8 **)&v39, &v38, *(llvm::Constant **)a4, a5, a6);
  if (result)
    return result;
  v11 = (unsigned __int8 *)v38;
  v10 = (unsigned __int8 *)v39;
  result = sub_1C4E71F8C(v8, v39, (unsigned __int8 *)v38, a4);
  if (result)
    return result;
  if (v8 != 23)
  {
    v13 = v10[16];
    if (v8 != 22)
      goto LABEL_58;
    if (v13 == 5)
    {
      if (*((_WORD *)v10 + 9) != 22)
      {
        if (!*(_BYTE *)(a4 + 40))
          goto LABEL_54;
        goto LABEL_46;
      }
      v15 = &v10[-32 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 32];
    }
    else
    {
      if (v13 != 50)
      {
LABEL_27:
        if (!*(_BYTE *)(a4 + 40))
          goto LABEL_58;
        if (v13 >= 0x1C)
        {
          HIDWORD(v23) = v13 - 41;
          LODWORD(v23) = v13 - 41;
          v22 = v23 >> 1;
          v19 = v22 > 6;
          v24 = (1 << v22) & 0x47;
          if (v19 || v24 == 0)
            goto LABEL_58;
          v26 = v13 - 28;
          goto LABEL_50;
        }
        if (v13 != 5)
          goto LABEL_55;
LABEL_46:
        v26 = *((unsigned __int16 *)v10 + 9);
        HIDWORD(v32) = v26 - 13;
        LODWORD(v32) = v26 - 13;
        v31 = v32 >> 1;
        v19 = v31 > 6;
        v33 = (1 << v31) & 0x47;
        if (v19 || v33 == 0)
          goto LABEL_54;
LABEL_50:
        if (v26 != 25 || (v10[17] & 2) == 0)
          goto LABEL_58;
        goto LABEL_52;
      }
      v15 = v10 - 32;
    }
    if (v11 == *(unsigned __int8 **)v15)
      return (llvm::Value **)v10;
    goto LABEL_27;
  }
  v13 = v10[16];
  if (v13 == 5)
  {
    v16 = *((unsigned __int16 *)v10 + 9);
    if (v16 == 23)
    {
      v14 = &v10[-32 * (*((_DWORD *)v10 + 5) & 0x7FFFFFF) + 32];
LABEL_14:
      if (v11 != *(unsigned __int8 **)v14)
        goto LABEL_15;
      return (llvm::Value **)v10;
    }
    if (*(_BYTE *)(a4 + 40))
      goto LABEL_36;
LABEL_54:
    v13 = 5;
    goto LABEL_55;
  }
  if (v13 == 51)
  {
    v14 = v10 - 32;
    goto LABEL_14;
  }
LABEL_15:
  if (!*(_BYTE *)(a4 + 40))
    goto LABEL_58;
  if (v13 >= 0x1C)
  {
    HIDWORD(v18) = v13 - 41;
    LODWORD(v18) = v13 - 41;
    v17 = v18 >> 1;
    v19 = v17 > 6;
    v20 = (1 << v17) & 0x47;
    if (v19 || v20 == 0)
      goto LABEL_58;
    v16 = v13 - 28;
    goto LABEL_40;
  }
  if (v13 != 5)
  {
LABEL_55:
    v37 = v10 + 16;
    goto LABEL_59;
  }
  v16 = *((unsigned __int16 *)v10 + 9);
LABEL_36:
  HIDWORD(v28) = v16 - 13;
  LODWORD(v28) = v16 - 13;
  v27 = v28 >> 1;
  v19 = v27 > 6;
  v29 = (1 << v27) & 0x47;
  if (v19 || v29 == 0)
    goto LABEL_54;
LABEL_40:
  if (v16 != 25 || (v10[17] & 4) == 0)
    goto LABEL_58;
LABEL_52:
  v35 = *((_DWORD *)v10 + 5);
  if ((v35 & 0x40000000) != 0)
    v36 = (unsigned __int8 **)*((_QWORD *)v10 - 1);
  else
    v36 = (unsigned __int8 **)&v10[-32 * (v35 & 0x7FFFFFF)];
  if (*v36 == v11)
    return llvm::Constant::getNullValue(*(llvm::Constant **)v10, v12);
LABEL_58:
  v37 = v10 + 16;
  if (v13 == 85)
  {
LABEL_60:
    result = (llvm::Value **)sub_1C4E716EC(v8, (uint64_t)v10, (uint64_t)v11, a4, v6);
    if (result)
      return result;
    v13 = *v37;
    goto LABEL_62;
  }
LABEL_59:
  if (v11[16] == 85)
    goto LABEL_60;
LABEL_62:
  if (v13 != 83 && v11[16] != 83
    || (result = (llvm::Value **)sub_1C4E71910(v8, (const llvm::Instruction *)v10, (const llvm::Instruction *)v11, a4, v6)) == 0)
  {
    if (sub_1C4E7236C((uint64_t)v10, v11, a4, v6, v8 == 23))
      return (llvm::Value **)v10;
    else
      return 0;
  }
  return result;
}

llvm::Value **sub_1C4E72C84(llvm *a1, llvm::Constant *a2, llvm::Constant *a3, int a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  int v6;
  int v9;
  llvm::ValueHandleBase *v10;
  unsigned int v11;
  llvm::Type *v12;
  uint64_t v13;
  llvm::Constant *v14;
  int v15;
  llvm::Type *v16;
  int v17;
  uint64_t v18;
  llvm::Constant *v19;
  uint64_t v20;
  llvm::Type *v21;
  uint64_t v22;
  unsigned int v23;
  size_t v24;
  _QWORD *v25;
  int v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  llvm::ValueHandleBase *v36;
  uint64_t v37;
  llvm::Type *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  uint64_t *v46;
  llvm::Constant *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  int8x8_t v61;
  unsigned int v62;
  void *__src;
  unsigned int v64;
  uint64_t v65;
  llvm::Constant *v66;
  llvm::Constant *v67;
  unint64_t v68;
  uint64_t v69;
  llvm::Constant *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;

  v6 = (int)a6;
  v9 = (int)a1;
  v66 = a3;
  v67 = a2;
  v10 = sub_1C4E70DC8(a1, (unsigned __int8 **)&v67, &v66, *(llvm::Constant **)a5, (const llvm::DataLayout *)a5, a6);
  if (!v10)
  {
    v10 = v67;
    v11 = *((unsigned __int8 *)v67 + 16);
    if (v11 != 12)
    {
      if (v11 <= 0x14 && ((llvm::Constant::isNullValue(v67) & 1) != 0 || (sub_1C4E71060((uint64_t)&v68, v10) & 1) != 0))
        return llvm::Constant::getNullValue(*(llvm::Constant **)v10, v12);
      v65 = 0;
      v14 = v66;
      if (v66
        && *((unsigned __int8 *)v66 + 16) <= 0x14u
        && ((llvm::Constant::isNullValue(v66) & 1) != 0 || (sub_1C4E71060((uint64_t)&v68, v14) & 1) != 0))
      {
        return (llvm::Value **)v10;
      }
      v68 = (unint64_t)&v65;
      if (sub_1C4B037F8((_QWORD **)&v68, (uint64_t)v14))
      {
        v15 = *(_DWORD *)(*(_QWORD *)v65 + 8);
        if ((v15 & 0xFE) == 0x12)
          v15 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v65 + 16) + 8);
        if (v15 == 269)
          return (llvm::Value **)v10;
      }
      if (sub_1C4E732B0((unsigned __int8 *)v14, a5))
        return (llvm::Value **)llvm::PoisonValue::get(*(llvm::PoisonValue **)v10, v16);
      v17 = *((unsigned __int8 *)v10 + 16);
      if (v17 == 85 || *((_BYTE *)v14 + 16) == 85)
      {
        v13 = sub_1C4E716EC(v9, (uint64_t)v10, (uint64_t)v14, a5, v6);
        if (v13)
          return (llvm::Value **)v13;
        v17 = *((unsigned __int8 *)v10 + 16);
      }
      if (v17 == 83 || *((_BYTE *)v14 + 16) == 83)
      {
        v13 = sub_1C4E71910(v9, v10, v14, a5, v6);
        if (v13)
          return (llvm::Value **)v13;
      }
      v18 = *(_QWORD *)(a5 + 24);
      v19 = *(llvm::Constant **)(a5 + 32);
      v20 = *(_QWORD *)(a5 + 16);
      if (!v19 || !*((_QWORD *)v19 + 5))
      {
        if (!v14 || *((unsigned __int8 *)v14 + 16) < 0x1Cu || (v19 = v14, !*((_QWORD *)v14 + 5)))
          v19 = 0;
      }
      v68 = *(_QWORD *)a5;
      v69 = v18;
      v70 = v19;
      v71 = v20;
      v72 = 0;
      v73 = 1;
      sub_1C4F83784((uint64_t)v14, 0, (uint64_t *)&v68, &v61);
      v22 = v64;
      if (v64 < 0x41)
      {
        v23 = v62;
        if ((unint64_t)__src >= v62)
          goto LABEL_41;
LABEL_38:
        v33 = 32 - __clz(v23 - 1);
        if (v23 > 0x40)
          v34 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v61);
        else
          v34 = __clz(__rbit64(~*(_QWORD *)&v61));
        if (v34 >= v33)
        {
          v13 = (uint64_t)v10;
          goto LABEL_78;
        }
        if (!a4)
        {
LABEL_77:
          v13 = 0;
LABEL_78:
          if (v64 >= 0x41 && __src)
          {
            v52 = v13;
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            v13 = v52;
          }
          if (v62 < 0x41 || !*(_QWORD *)&v61)
            return (llvm::Value **)v13;
          v10 = (llvm::ValueHandleBase *)v13;
          MEMORY[0x1CAA32F9C](*(_QWORD *)&v61, 0x1000C8000313F17);
          return (llvm::Value **)v10;
        }
        v35 = *(_QWORD *)(a5 + 24);
        v36 = *(llvm::ValueHandleBase **)(a5 + 32);
        v37 = *(_QWORD *)(a5 + 16);
        if (!v36 || !*((_QWORD *)v36 + 5))
        {
          if (!v10 || *((unsigned __int8 *)v10 + 16) < 0x1Cu || (v36 = v10, !*((_QWORD *)v10 + 5)))
            v36 = 0;
        }
        v68 = *(_QWORD *)a5;
        v69 = v35;
        v70 = v36;
        v71 = v37;
        v72 = 0;
        v73 = 1;
        sub_1C4F83784((uint64_t)v10, 0, (uint64_t *)&v68, &v57);
        llvm::KnownBits::shl((llvm::KnownBits *)&v57, &v61, (llvm::KnownBits *)&v68);
        if (v58 >= 0x41)
          v39 = (uint64_t *)(v57 + 8 * ((v58 - 1) >> 6));
        else
          v39 = &v57;
        if ((((unint64_t)*v39 >> (v58 - 1)) & 1) != 0)
        {
          v40 = 1 << (v69 - 1);
          if (v69 > 0x40)
            *(_QWORD *)(v68 + 8 * ((v69 - 1) >> 6)) |= v40;
          else
            v68 |= v40;
        }
        v41 = &v59;
        v42 = v60 - 1;
        if (v60 >= 0x41)
          v41 = (uint64_t *)(v59 + 8 * (v42 >> 6));
        if ((((unint64_t)*v41 >> v42) & 1) != 0)
        {
          v43 = &v70;
          if (v71 >= 0x41)
            v43 = (_QWORD *)((char *)v70 + 8 * ((v71 - 1) >> 6));
          *v43 |= 1 << (v71 - 1);
        }
        if (v69 > 0x40)
        {
          v45 = ((unint64_t)v69 + 63) >> 6;
          v46 = (uint64_t *)v68;
          v47 = v70;
          while (1)
          {
            v49 = *v46++;
            v48 = v49;
            v50 = *(_QWORD *)v47;
            v47 = (llvm::Constant *)((char *)v47 + 8);
            if ((v50 & v48) != 0)
              break;
            if (!--v45)
              goto LABEL_71;
          }
        }
        else if (((unint64_t)v70 & v68) == 0)
        {
LABEL_71:
          v44 = 0;
          v13 = 0;
          goto LABEL_72;
        }
        v13 = (uint64_t)llvm::PoisonValue::get(*(llvm::PoisonValue **)v10, v38);
        v44 = 1;
LABEL_72:
        if (v71 >= 0x41 && v70)
        {
          v53 = v13;
          MEMORY[0x1CAA32F9C](v70, 0x1000C8000313F17);
          v13 = v53;
        }
        if (v69 >= 0x41 && v68)
        {
          v54 = v13;
          MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
          v13 = v54;
        }
        if (v60 >= 0x41 && v59)
        {
          v55 = v13;
          MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
          v13 = v55;
        }
        if (v58 >= 0x41 && v57)
        {
          v56 = v13;
          MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
          v13 = v56;
        }
        if ((v44 & 1) != 0)
          goto LABEL_78;
        goto LABEL_77;
      }
      v24 = (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8;
      v25 = (_QWORD *)operator new[]();
      memcpy(v25, __src, v24);
      v26 = 0;
      v27 = v62;
      v28 = (unint64_t)(v22 + 63) >> 6;
      do
      {
        if (v28-- < 1)
          break;
        v30 = v25[v28];
        v26 += __clz(v30);
      }
      while (!v30);
      v31 = v22 | 0xFFFFFFC0;
      if ((v22 & 0x3F) == 0)
        v31 = 0;
      if ((v22 - v26 - v31) >= 0x41)
      {
        MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
      }
      else
      {
        v32 = *v25;
        MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
        if (v32 < v27)
        {
          v23 = v62;
          goto LABEL_38;
        }
      }
LABEL_41:
      v13 = (uint64_t)llvm::PoisonValue::get(*(llvm::PoisonValue **)v10, v21);
      goto LABEL_78;
    }
  }
  return (llvm::Value **)v10;
}

uint64_t sub_1C4E732B0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v4;
  BOOL v6;
  int v7;
  llvm::Type *v8;
  int v9;
  llvm::UndefValue *AggregateElement;
  llvm::Type *v11;
  llvm::APInt *v12;
  unsigned int PrimitiveSizeInBits;
  unsigned int v14;

  result = 0;
  if (!a1)
    return result;
  v4 = a1[16];
  if (v4 > 0x14)
    return result;
  if (*(_BYTE *)(a2 + 41))
  {
    if ((sub_1C4E7B480((uint64_t)a1) & 1) != 0)
      return 1;
    v4 = a1[16];
  }
  v6 = v4 == 10 || v4 == 15;
  if (v6)
  {
    v7 = *(_DWORD *)(*(_QWORD *)a1 + 32);
    if (v7)
    {
      v8 = 0;
      v9 = v7 - 1;
      do
      {
        AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a1, v8);
        result = sub_1C4E732B0(AggregateElement, a2);
        if (!(_DWORD)result)
          break;
        v6 = v9 == (_DWORD)v8;
        v8 = (llvm::Type *)((_DWORD)v8 + 1);
      }
      while (!v6);
      return result;
    }
    return 1;
  }
  if (v4 == 16)
  {
    v12 = (llvm::APInt *)(a1 + 24);
    v11 = *(llvm::Type **)a1;
    if ((*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12)
      v11 = (llvm::Type *)**((_QWORD **)v11 + 2);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v11);
    v14 = *((_DWORD *)a1 + 8);
    if (v14 < 0x41)
      return *(_QWORD *)v12 >= (unint64_t)PrimitiveSizeInBits;
    if (v14 - llvm::APInt::countLeadingZerosSlowCase(v12) <= 0x40)
    {
      v12 = *(llvm::APInt **)v12;
      return *(_QWORD *)v12 >= (unint64_t)PrimitiveSizeInBits;
    }
    return 1;
  }
  return 0;
}

BOOL sub_1C4E733C8(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  unsigned int v6;
  int v7;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5)
      return 0;
    v6 = *(unsigned __int16 *)(a2 + 18);
    v3 = v6 > 0x1B;
    v7 = (1 << v6) & 0xC180000;
    if (v3 || v7 == 0)
      return 0;
  }
  else
  {
    v3 = v2 > 0x37;
    v4 = (1 << v2) & 0xC1800000000000;
    if (v3 || v4 == 0)
      return 0;
  }
  if ((*(_BYTE *)(a2 + 17) & 2) == 0)
    return 0;
  return sub_1C4E73430(a1, a2);
}

BOOL sub_1C4E73430(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v2 < 0x1C)
  {
    if (v2 == 5 && (*(_WORD *)(a2 + 18) & 0xFFFE) == 0x1A)
    {
      v5 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      if (v5)
      {
        **(_QWORD **)a1 = v5;
        v6 = *(_DWORD *)(a2 + 20);
        goto LABEL_13;
      }
    }
    return 0;
  }
  if ((v2 & 0xFE) != 0x36)
    return 0;
  v3 = *(_DWORD *)(a2 + 20);
  v4 = (v3 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v3 & 0x7FFFFFF));
  v7 = *v4;
  if (!v7)
    return 0;
  **(_QWORD **)a1 = v7;
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
  {
    v8 = *(_QWORD *)(a2 - 8);
    return *(_QWORD *)(a1 + 8) == *(_QWORD *)(v8 + 32);
  }
LABEL_13:
  v8 = a2 - 32 * (v6 & 0x7FFFFFF);
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(v8 + 32);
}

uint64_t sub_1C4E734E4(uint64_t a1, llvm::Constant *a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  int v11;
  llvm::APFloatBase *SplatValue;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  int v17;
  llvm::Type *v18;
  llvm::UndefValue *AggregateElement;
  int v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v24;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 16)
  {
    v5 = *((_DWORD *)a2 + 8);
    v6 = (_QWORD *)(*((_QWORD *)a2 + 3) + 8 * ((v5 - 1) >> 6));
    if (v5 < 0x41)
      v6 = (_QWORD *)((char *)a2 + 24);
    return (*v6 >> (v5 - 1)) & 1;
  }
  else
  {
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v9 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
    else
      v9 = 0;
    v10 = !v9 || v4 > 0x14;
    v11 = v10;
    if (!v10)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((_BYTE *)SplatValue + 16) == 16)
      {
        v14 = *((_QWORD *)SplatValue + 3);
        v13 = (char *)SplatValue + 24;
        v15 = *((_DWORD *)v13 + 2);
        v16 = (_QWORD *)(v14 + 8 * ((v15 - 1) >> 6));
        if (v15 < 0x41)
          v16 = v13;
        v2 = (*v16 >> (v15 - 1)) & 1;
      }
      else
      {
        if (*(_BYTE *)(v8 + 8) == 18)
        {
          v17 = *(_DWORD *)(v8 + 32);
          if (v17)
          {
            v18 = 0;
            LODWORD(v2) = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(a2, v18);
              if (!AggregateElement)
                break;
              v20 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v20 - 11) >= 2)
              {
                if (v20 != 16)
                  break;
                v22 = *((_QWORD *)AggregateElement + 3);
                v21 = (char *)AggregateElement + 24;
                v23 = *((_DWORD *)v21 + 2);
                v24 = (_QWORD *)(v22 + 8 * ((v23 - 1) >> 6));
                if (v23 < 0x41)
                  v24 = v21;
                if (((*v24 >> (v23 - 1)) & 1) == 0)
                  break;
                LODWORD(v2) = 1;
              }
              v18 = (llvm::Type *)((_DWORD)v18 + 1);
              if (v17 == (_DWORD)v18)
                return (v11 ^ 1) & v2;
            }
          }
        }
        LODWORD(v2) = 0;
      }
    }
    return (v11 ^ 1) & v2;
  }
}

llvm::Value **sub_1C4E73640(llvm *a1, uint64_t a2, llvm::Constant *a3, int a4, uint64_t a5, llvm::DSOLocalEquivalent **a6)
{
  llvm::Value **result;
  llvm::Type *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21[5];
  char v22;

  result = sub_1C4E72C84(a1, (llvm::Constant *)a2, a3, 0, a5, a6);
  if (result)
    return result;
  if ((llvm::Constant *)a2 == a3)
    return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v11);
  if (*(_BYTE *)(a5 + 41) && sub_1C4E7B480(a2))
  {
    if ((a4 & 1) != 0)
      return (llvm::Value **)a2;
    return llvm::Constant::getNullValue(*(llvm::Constant **)a2, v11);
  }
  if (!a4)
    return 0;
  v12 = *(_QWORD *)(a5 + 24);
  v13 = *(_QWORD *)(a5 + 32);
  v14 = *(_QWORD *)(a5 + 16);
  if (!v13 || !*(_QWORD *)(v13 + 40))
  {
    if (!a2 || *(unsigned __int8 *)(a2 + 16) < 0x1Cu || (v13 = a2, !*(_QWORD *)(a2 + 40)))
      v13 = 0;
  }
  v21[0] = *(_QWORD *)a5;
  v21[1] = v12;
  v21[2] = v13;
  v21[3] = v14;
  v21[4] = 0;
  v22 = 1;
  sub_1C4F83784(a2, 0, v21, &v17);
  v15 = (uint64_t *)&v19;
  if (v20 >= 0x41)
    v15 = v19;
  v16 = *v15;
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C]();
  if (v18 >= 0x41)
  {
    if (v17)
      MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  }
  result = (llvm::Value **)a2;
  if ((v16 & 1) == 0)
    return 0;
  return result;
}

BOOL sub_1C4E737A4(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5)
      return 0;
    v8 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v10) = v8 - 13;
    LODWORD(v10) = v8 - 13;
    v9 = v10 >> 1;
    v5 = v9 > 6;
    v11 = (1 << v9) & 0x47;
    if (v5 || v11 == 0)
      return 0;
  }
  else
  {
    HIDWORD(v4) = v2 - 41;
    LODWORD(v4) = v2 - 41;
    v3 = v4 >> 1;
    v5 = v3 > 6;
    v6 = (1 << v3) & 0x47;
    if (v5 || v6 == 0)
      return 0;
    v8 = v2 - 28;
  }
  if (v8 != 25 || (*(_BYTE *)(a2 + 17) & 2) == 0)
    return 0;
  v13 = *(_DWORD *)(a2 + 20);
  v14 = (v13 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v13 & 0x7FFFFFF));
  v15 = *v14;
  if (!v15)
    return 0;
  **(_QWORD **)a1 = v15;
  v16 = *(_DWORD *)(a2 + 20);
  if ((v16 & 0x40000000) != 0)
    v17 = *(_QWORD *)(a2 - 8);
  else
    v17 = a2 - 32 * (v16 & 0x7FFFFFF);
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(v17 + 32);
}

uint64_t sub_1C4E73878(_QWORD **a1, int a2, uint64_t a3)
{
  int v5;
  char v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v5 = *(unsigned __int8 *)(a3 + 16);
  v6 = a2 + 28;
  if (a2 + 28 == v5)
  {
    v7 = sub_1C4E73984(a1, *(_QWORD *)(a3 - 64));
    v8 = *(_QWORD *)(a3 - 32);
    if (v7 && v8)
    {
      *a1[3] = v8;
      return 1;
    }
    result = (uint64_t)sub_1C4E73984(a1, v8);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a3 - 64);
      if (v12)
      {
        *a1[3] = v12;
        return 1;
      }
      return 0;
    }
  }
  else
  {
    if (v5 == 5)
    {
      if (*(unsigned __int16 *)(a3 + 18) == a2
        && ((v9 = sub_1C4E73984(a1, *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF))),
             v10 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32),
             v9)
         && v10
         || sub_1C4E73984(a1, v10)
         && (v10 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF))) != 0))
      {
        *a1[3] = v10;
        v6 = 1;
      }
      else
      {
        v6 = 0;
      }
    }
    return (v5 == 5) & v6;
  }
  return result;
}

llvm::APFloatBase *sub_1C4E73984(_QWORD **a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5)
      return 0;
    v8 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v10) = v8 - 13;
    LODWORD(v10) = v8 - 13;
    v9 = v10 >> 1;
    v5 = v9 > 6;
    v11 = (1 << v9) & 0x47;
    if (v5 || v11 == 0)
      return 0;
  }
  else
  {
    HIDWORD(v4) = v2 - 41;
    LODWORD(v4) = v2 - 41;
    v3 = v4 >> 1;
    v5 = v3 > 6;
    v6 = (1 << v3) & 0x47;
    if (v5 || v6 == 0)
      return 0;
    v8 = v2 - 28;
  }
  if (v8 != 25 || (*(_BYTE *)(a2 + 17) & 2) == 0)
    return 0;
  v13 = *(_DWORD *)(a2 + 20);
  v14 = (v13 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v13 & 0x7FFFFFF));
  v15 = *v14;
  if (!v15)
    return 0;
  v17 = *a1;
  v16 = (uint64_t)(a1 + 1);
  *v17 = v15;
  v18 = *(_DWORD *)(a2 + 20);
  if ((v18 & 0x40000000) != 0)
    v19 = *(_QWORD *)(a2 - 8);
  else
    v19 = a2 - 32 * (v18 & 0x7FFFFFF);
  return sub_1C4D89F84(v16, *(unsigned __int8 **)(v19 + 32));
}

llvm::Value **sub_1C4E73A4C(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  llvm::Type *v18;
  llvm::Constant *v20;

  v5 = *(unsigned __int8 *)(a1 + 16);
  if (v5 != 5)
  {
    if (v5 != 41)
      goto LABEL_19;
    v6 = *(_QWORD *)(a1 - 64);
    if (!v6)
      goto LABEL_19;
    v7 = *(_QWORD *)(a1 - 32);
    if (!v7 || *(unsigned __int8 *)(v7 + 16) > 0x14u)
      goto LABEL_19;
LABEL_10:
    v9 = *(unsigned __int8 *)(a2 + 16);
    if (v9 == 5)
    {
      if (*(_WORD *)(a2 + 18) != 15)
        goto LABEL_19;
      v12 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
      v10 = *v12;
      if (!*v12)
        goto LABEL_19;
      v11 = v12[4];
    }
    else
    {
      if (v9 != 43)
        goto LABEL_19;
      v10 = *(_QWORD *)(a2 - 64);
      if (!v10 || *(unsigned __int8 *)(v10 + 16) > 0x14u)
        goto LABEL_19;
      v11 = *(_QWORD *)(a2 - 32);
    }
    if (v6 == v11)
      goto LABEL_37;
    goto LABEL_19;
  }
  if (*(_WORD *)(a1 + 18) == 13)
  {
    v8 = (uint64_t *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
    v6 = *v8;
    if (*v8)
    {
      v7 = v8[4];
      if (v7)
        goto LABEL_10;
    }
  }
LABEL_19:
  v13 = *(unsigned __int8 *)(a2 + 16);
  if (v13 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 13)
      return 0;
    v15 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v14 = *v15;
    if (!*v15)
      return 0;
    v7 = v15[4];
    if (!v7)
      return 0;
  }
  else
  {
    if (v13 != 41)
      return 0;
    v14 = *(_QWORD *)(a2 - 64);
    if (!v14)
      return 0;
    v7 = *(_QWORD *)(a2 - 32);
    if (!v7 || *(unsigned __int8 *)(v7 + 16) > 0x14u)
      return 0;
  }
  if (v5 == 5)
  {
    if (*(_WORD *)(a1 + 18) != 15)
      return 0;
    v17 = (uint64_t *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
    v10 = *v17;
    if (!*v17)
      return 0;
    v16 = v17[4];
  }
  else
  {
    if (v5 != 43)
      return 0;
    v10 = *(_QWORD *)(a1 - 64);
    if (!v10 || *(unsigned __int8 *)(v10 + 16) > 0x14u)
      return 0;
    v16 = *(_QWORD *)(a1 - 32);
  }
  if (v14 != v16)
    return 0;
LABEL_37:
  if (llvm::ConstantExpr::getNot((llvm::Constant **)v7, (llvm::Constant *)a2) != v10)
    return 0;
  v20 = *(llvm::Constant **)a1;
  if (a3 == 28)
    return llvm::Constant::getNullValue(v20, v18);
  else
    return (llvm::Value **)llvm::Constant::getAllOnesValue(v20, v18);
}

uint64_t sub_1C4E73C1C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  llvm::Value **v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v32;
  BOOL v33;

  v5 = (_QWORD *)a3;
  v6 = a2;
  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 - 66 < 0xD && v8 > 0x1B)
    v10 = a2;
  else
    v10 = 0;
  v11 = *(unsigned __int8 *)(a3 + 16);
  if (v11 - 66 < 0xD && v11 > 0x1B)
    v13 = a3;
  else
    v13 = 0;
  if (v10)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14 && *(unsigned __int8 *)(v10 + 16) == *(unsigned __int8 *)(v13 + 16))
  {
    v15 = *(_QWORD **)(v13 - 32);
    if (**(_QWORD **)(v10 - 32) == *v15)
    {
      v6 = *(_QWORD *)(v10 - 32);
      v5 = v15;
    }
    v8 = *(unsigned __int8 *)(v6 + 16);
    v11 = *((unsigned __int8 *)v5 + 16);
  }
  v16 = 0;
  if (v8 == 81)
    v17 = v6;
  else
    v17 = 0;
  if (v11 == 81)
    v18 = (uint64_t)v5;
  else
    v18 = 0;
  if (v17)
    v19 = v18 == 0;
  else
    v19 = 1;
  if (!v19)
  {
    if (a4)
    {
      v16 = (uint64_t)sub_1C4E74180(v17, v18, 1, (int **)a1);
      if (v16)
        goto LABEL_55;
      v16 = (uint64_t)sub_1C4E74180(v18, v17, 1, (int **)a1);
      if (v16)
        goto LABEL_55;
      v16 = (uint64_t)sub_1C4E745E0(v17, v18);
      if (v16)
        goto LABEL_55;
      v16 = (uint64_t)sub_1C4E745E0(v18, v17);
      if (v16)
        goto LABEL_55;
      v16 = (uint64_t)sub_1C4E746D8(v17, v18, 1);
      if (v16)
        goto LABEL_55;
      v16 = sub_1C4E74A60(v17, v18, 1);
      if (v16)
        goto LABEL_55;
      v16 = sub_1C4E7511C(v17, v18, 1);
      if (v16)
        goto LABEL_55;
      v16 = sub_1C4E7538C(v17, v18, 1);
      if (v16)
        goto LABEL_55;
      v16 = sub_1C4E7538C(v18, v17, 1);
      if (v16)
        goto LABEL_55;
      v16 = (uint64_t)sub_1C4E754BC(v17, v18, (_BYTE *)(a1 + 40));
      if (v16)
        goto LABEL_55;
      v20 = sub_1C4E754BC(v18, v17, (_BYTE *)(a1 + 40));
    }
    else
    {
      v16 = (uint64_t)sub_1C4E74180(v17, v18, 0, (int **)a1);
      if (v16)
        goto LABEL_55;
      v16 = (uint64_t)sub_1C4E74180(v18, v17, 0, (int **)a1);
      if (v16)
        goto LABEL_55;
      v16 = (uint64_t)sub_1C4E75AD8(v17, v18);
      if (v16)
        goto LABEL_55;
      v16 = (uint64_t)sub_1C4E75AD8(v18, v17);
      if (v16)
        goto LABEL_55;
      v16 = (uint64_t)sub_1C4E746D8(v17, v18, 0);
      if (v16)
        goto LABEL_55;
      v16 = sub_1C4E74A60(v17, v18, 0);
      if (v16)
        goto LABEL_55;
      v16 = sub_1C4E7511C(v17, v18, 0);
      if (v16)
        goto LABEL_55;
      v16 = sub_1C4E7538C(v17, v18, 0);
      if (v16)
        goto LABEL_55;
      v16 = sub_1C4E7538C(v18, v17, 0);
      if (v16)
        goto LABEL_55;
      v16 = (uint64_t)sub_1C4E75BD0(v17, v18, (_BYTE *)(a1 + 40));
      if (v16)
        goto LABEL_55;
      v20 = sub_1C4E75BD0(v18, v17, (_BYTE *)(a1 + 40));
    }
    v16 = (uint64_t)v20;
  }
LABEL_55:
  if (*(_BYTE *)(v6 + 16) == 82)
    v21 = v6;
  else
    v21 = 0;
  if (*((_BYTE *)v5 + 16) == 82)
    v22 = v5;
  else
    v22 = 0;
  if (!v21 || !v22)
    goto LABEL_93;
  v23 = *(_QWORD **)(v21 - 64);
  v24 = (_QWORD *)*(v22 - 8);
  if (*v23 != *v24)
    return 0;
  v25 = *(uint64_t **)(a1 + 8);
  v26 = *(_QWORD *)(v21 - 32);
  v27 = *(v22 - 4);
  v28 = *(_WORD *)(v21 + 18) & 0x3F;
  v29 = *((_WORD *)v22 + 9) & 0x3F;
  if (v28 != 7 || v29 != 7 || a4 == 0)
  {
    v16 = 0;
    v32 = v28 == 8 && v29 == 8;
    if (!v32 || (a4 & 1) != 0)
      return v16;
  }
  if (llvm::isKnownNeverNaN((uint64_t)v23, v25, 0) && ((_QWORD *)v26 == v24 || v26 == v27))
    goto LABEL_91;
  if (llvm::isKnownNeverNaN(v26, v25, 0))
  {
    if (v23 != v24)
    {
      v16 = (uint64_t)v5;
      if (v23 == (_QWORD *)v27)
        goto LABEL_93;
      goto LABEL_84;
    }
LABEL_91:
    v16 = (uint64_t)v5;
    goto LABEL_93;
  }
LABEL_84:
  if (llvm::isKnownNeverNaN((uint64_t)v24, v25, 0) && ((_QWORD *)v27 == v23 || v27 == v26))
    goto LABEL_92;
  if (!llvm::isKnownNeverNaN(v27, v25, 0))
    return 0;
  if (v24 == v23)
  {
LABEL_92:
    v16 = v6;
  }
  else
  {
    v16 = v6;
    if (v24 != (_QWORD *)v26)
      return 0;
  }
LABEL_93:
  if (v10)
    v33 = v16 == 0;
  else
    v33 = 1;
  if (v33)
    return v16;
  if (*(unsigned __int8 *)(v16 + 16) > 0x14u)
    return 0;
  return llvm::ConstantExpr::getCast(*(unsigned __int8 *)(v10 + 16) - 28);
}

uint64_t sub_1C4E74064(_QWORD **a1, int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(unsigned __int8 *)(a3 + 16);
  if (a2 + 28 == v5)
  {
    v6 = *(_QWORD *)(a3 - 64);
    if (!v6 || (**a1 = v6, (sub_1C4D9EC28(a1 + 1, 30, *(_QWORD *)(a3 - 32)) & 1) == 0))
    {
      v7 = *(_QWORD *)(a3 - 32);
      if (v7)
      {
        **a1 = v7;
        return sub_1C4D9EC28(a1 + 1, 30, *(_QWORD *)(a3 - 64));
      }
      return 0;
    }
    return 1;
  }
  if (v5 == 5 && *(unsigned __int16 *)(a3 + 18) == a2)
  {
    v8 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
    v9 = *(_QWORD *)(a3 - 32 * v8);
    if (v9)
    {
      **a1 = v9;
      if ((sub_1C4D9EC28(a1 + 1, 30, *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
        return 1;
      v8 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
    }
    v10 = *(_QWORD *)(a3 - 32 * v8 + 32);
    if (v10)
    {
      **a1 = v10;
      return sub_1C4D9EC28(a1 + 1, 30, *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
    }
  }
  return 0;
}

llvm::Value **sub_1C4E74180(uint64_t a1, uint64_t a2, int a3, int **a4)
{
  llvm::Type *v8;
  const llvm::APInt *v9;
  int v10;
  int *v11;
  uint64_t v12;
  int **v13;
  uint64_t v14;
  int v15;
  llvm::Value **result;
  uint64_t v17;
  int v18;
  int *v19;
  uint64_t v20;
  int *v21;
  int *v22;
  uint64_t v23;
  int *v24;
  BOOL v25;
  BOOL v26;
  int v27;
  int *v28;
  uint64_t v29;
  int *v30;
  int *v31;
  uint64_t v32;
  int *v33;
  int v34;
  int v35;
  uint64_t v36;
  int *v37;
  int *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char v42;

  v35 = 0;
  v36 = 0;
  v37 = &v35;
  v38 = (int *)&v36;
  if (!sub_1C4E7596C((uint64_t)&v37, a1) || (v35 & 0xFFFFFFFE) != 0x20)
    return 0;
  v34 = 0;
  v10 = *(unsigned __int8 *)(v36 + 16);
  if (v10 == 5)
  {
    if (*(_WORD *)(v36 + 18) != 15)
      goto LABEL_11;
    v13 = (int **)(v36 - 32 * (*(_DWORD *)(v36 + 20) & 0x7FFFFFF));
    v11 = *v13;
    if (!*v13)
      goto LABEL_11;
    v12 = (uint64_t)v13[4];
    if (!v12)
      goto LABEL_11;
  }
  else
  {
    if (v10 != 43)
      goto LABEL_11;
    v11 = *(int **)(v36 - 64);
    if (!v11)
      goto LABEL_11;
    v12 = *(_QWORD *)(v36 - 32);
    if (!v12)
      goto LABEL_11;
  }
  v37 = &v34;
  v38 = v11;
  v39 = v12;
  if (sub_1C619B2F8((uint64_t)&v37, a2) && (v34 - 34) <= 3)
  {
    v25 = v34 == 37 || v34 == 35;
    if (v25 && v35 == 33 && (a3 & 1) == 0)
      return llvm::ConstantInt::getTrue(*(uint64_t ***)a2, v8, v9);
    v26 = v34 == 34 || v34 == 36;
    if (v26 && v35 == 32 && a3)
      return llvm::ConstantInt::getFalse(*(uint64_t ***)a2, v8, v9);
    if (v35 == 33)
    {
      if (v34 == 36 || v34 == 34)
        goto LABEL_34;
    }
    else if (v35 == 32 && (v34 == 37 || v34 == 35))
    {
      goto LABEL_39;
    }
  }
  v37 = &v34;
  v38 = (int *)v36;
  v39 = (uint64_t)v11;
  if (sub_1C619B2F8((uint64_t)&v37, a2))
  {
    v27 = v34;
    if (v34 == 35)
    {
      if (!a3 || v35 != 33)
        goto LABEL_11;
      v28 = a4[3];
      v29 = (uint64_t)a4[4];
      v30 = a4[2];
      if (!v29 || !*(_QWORD *)(v29 + 40))
      {
        if (*(unsigned __int8 *)(v12 + 16) < 0x1Cu || (v29 = v12, !*(_QWORD *)(v12 + 40)))
          v29 = 0;
      }
      v37 = *a4;
      v38 = v28;
      v39 = v29;
      v40 = v30;
      v41 = 0;
      v42 = 1;
      if ((sub_1C4F84D74(v12, 0, (uint64_t)&v37) & 1) != 0)
        return (llvm::Value **)a2;
      v27 = v34;
    }
    if (v27 == 36 && (a3 & 1) == 0 && v35 == 32)
    {
      v31 = a4[3];
      v32 = (uint64_t)a4[4];
      v33 = a4[2];
      if (!v32 || !*(_QWORD *)(v32 + 40))
      {
        if (*(unsigned __int8 *)(v12 + 16) < 0x1Cu || (v32 = v12, !*(_QWORD *)(v12 + 40)))
          v32 = 0;
      }
      v37 = *a4;
      v38 = v31;
      v39 = v32;
      v40 = v33;
      v41 = 0;
      v42 = 1;
      if ((sub_1C4F84D74(v12, 0, (uint64_t)&v37) & 1) != 0)
        return (llvm::Value **)a2;
    }
  }
LABEL_11:
  v14 = *(_QWORD *)(a2 - 64);
  if (!v14
    || v36 != *(_QWORD *)(a2 - 32)
    || (v15 = *(_WORD *)(a2 + 18) & 0x3F, v34 = v15, (v15 - 34) >= 4))
  {
    if (v36 == v14)
    {
      v14 = *(_QWORD *)(a2 - 32);
      if (v14)
      {
        v17 = *(_WORD *)(a2 + 18) & 0x3F;
        if ((v17 - 34) <= 3)
        {
          v15 = dword_1C85F3740[v17 - 34];
          v34 = v15;
          goto LABEL_20;
        }
      }
    }
    return 0;
  }
LABEL_20:
  v18 = v35;
  if (v15 == 34 && v35 == 32)
  {
    v19 = a4[3];
    v20 = (uint64_t)a4[4];
    v21 = a4[2];
    if (!v20 || !*(_QWORD *)(v20 + 40))
    {
      if (*(unsigned __int8 *)(v14 + 16) < 0x1Cu || (v20 = v14, !*(_QWORD *)(v14 + 40)))
        v20 = 0;
    }
    v37 = *a4;
    v38 = v19;
    v39 = v20;
    v40 = v21;
    v41 = 0;
    v42 = 1;
    if ((sub_1C4F84D74(v14, 0, (uint64_t)&v37) & 1) == 0)
    {
      v15 = v34;
      v18 = v35;
      goto LABEL_26;
    }
LABEL_39:
    if (a3)
      return (llvm::Value **)a1;
    else
      return (llvm::Value **)a2;
  }
LABEL_26:
  if (v15 == 37 && v18 == 33)
  {
    v22 = a4[3];
    v23 = (uint64_t)a4[4];
    v24 = a4[2];
    if (!v23 || !*(_QWORD *)(v23 + 40))
    {
      if (*(unsigned __int8 *)(v14 + 16) < 0x1Cu || (v23 = v14, !*(_QWORD *)(v14 + 40)))
        v23 = 0;
    }
    v37 = *a4;
    v38 = v22;
    v39 = v23;
    v40 = v24;
    v41 = 0;
    v42 = 1;
    if ((sub_1C4F84D74(v14, 0, (uint64_t)&v37) & 1) != 0)
      goto LABEL_34;
    v15 = v34;
    v18 = v35;
  }
  if (v15 == 36 && v18 == 33)
  {
LABEL_34:
    if (a3)
      return (llvm::Value **)a2;
    else
      return (llvm::Value **)a1;
  }
  if (v15 == 35 && v18 == 32)
    goto LABEL_39;
  if (v15 == 36 && v18 == 32 && a3)
    return llvm::ConstantInt::getFalse(*(uint64_t ***)a2, v8, v9);
  result = 0;
  if (v15 == 35 && v18 == 33 && (a3 & 1) == 0)
    return llvm::ConstantInt::getTrue(*(uint64_t ***)a2, v8, v9);
  return result;
}

llvm::Value **sub_1C4E745E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  llvm::Value **result;
  int v6;
  uint64_t v7;
  llvm::Type *v8;
  const llvm::APInt *v9;

  v2 = *(_QWORD *)(a1 - 64);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(a1 - 32);
  if (!v4 || v2 != *(_QWORD *)(a2 - 64) || v4 != *(_QWORD *)(a2 - 32))
    return 0;
  v6 = *(_WORD *)(a1 + 18) & 0x3F;
  v7 = *(_WORD *)(a2 + 18) & 0x3F;
  if ((llvm::CmpInst::isImpliedTrueByMatchingCmp(v6, v7) & 1) != 0)
    return (llvm::Value **)a1;
  if (dword_1C85F3C44[v7] == v6)
    return llvm::ConstantInt::getFalse(*(uint64_t ***)a1, v8, v9);
  if (v6 == 32)
  {
    result = 0;
    if (v7 > 0x28 || ((1 << v7) & 0x15600000055) == 0)
      return result;
    return llvm::ConstantInt::getFalse(*(uint64_t ***)a1, v8, v9);
  }
  if (v6 == 40 && (_DWORD)v7 == 38)
    return llvm::ConstantInt::getFalse(*(uint64_t ***)a1, v8, v9);
  result = 0;
  if (v6 == 36 && (_DWORD)v7 == 34)
    return llvm::ConstantInt::getFalse(*(uint64_t ***)a1, v8, v9);
  return result;
}

llvm::Value **sub_1C4E746D8(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  llvm::Value **v8;
  llvm::Type *v9;
  const llvm::APInt *v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  int v14;
  llvm::Value **False;
  llvm::Type *v18;
  const llvm::APInt *v19;
  unsigned int v20;
  void *v21;
  int v22;
  _BOOL4 v23;
  llvm::Value **v24;
  BOOL v25;
  int v26;
  int64_t v27;
  unint64_t v29;
  int v30;
  _QWORD *v31;
  void *__s1;
  unsigned int v33;
  void *__s2;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;

  if (*(_QWORD *)(a1 - 64) != *(_QWORD *)(a2 - 64))
    return 0;
  v44 = 0;
  v45 = 0;
  v6 = *(unsigned __int8 **)(a1 - 32);
  v40 = &v45;
  v41 = 0;
  if (!sub_1C4D89F84((uint64_t)&v40, v6))
    return 0;
  v7 = *(unsigned __int8 **)(a2 - 32);
  v36 = &v44;
  v37 = 0;
  v8 = 0;
  if ((sub_1C4D89F84((uint64_t)&v36, v7) & 1) != 0)
  {
    llvm::ConstantRange::makeExactICmpRegion(&v40, *(_WORD *)(a1 + 18) & 0x3F, v45);
    llvm::ConstantRange::makeExactICmpRegion(&v36, *(_WORD *)(a2 + 18) & 0x3F, v44);
    if (a3)
    {
      llvm::ConstantRange::intersectWith((uint64_t)&v40, (llvm::ConstantRange *)&v36, 0, (uint64_t)&__s1);
      v11 = v33;
      if (v33 > 0x40)
      {
        v12 = __s2;
        v31 = __s1;
        if (memcmp(__s1, __s2, (((unint64_t)v33 + 63) >> 3) & 0x3FFFFFF8))
        {
          v14 = 0;
LABEL_10:
          if (v35 >= 0x41 && v12 != 0)
          {
            MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
            LODWORD(v11) = v33;
          }
          if (v11 >= 0x41 && __s1)
            MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
          if (v14)
          {
            False = llvm::ConstantInt::getFalse(*(uint64_t ***)a1, v9, v10);
LABEL_27:
            v8 = False;
LABEL_38:
            if (v39 >= 0x41 && v38)
              MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
            if (v37 >= 0x41 && v36)
              MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
            if (v43 >= 0x41 && v42)
              MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
            if (v41 >= 0x41 && v40)
              MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
            return v8;
          }
          goto LABEL_28;
        }
        v26 = 0;
        v27 = (unint64_t)(v11 + 63) >> 6;
        do
        {
          if (v27-- < 1)
            break;
          v29 = v31[v27];
          v26 += __clz(v29);
        }
        while (!v29);
        v30 = v11 | 0xFFFFFFC0;
        if ((v11 & 0x3F) == 0)
          v30 = 0;
        v13 = v26 + v30 == (_DWORD)v11;
      }
      else
      {
        v12 = __s2;
        v13 = ((unint64_t)__s2 | (unint64_t)__s1) == 0;
      }
      v14 = v13;
      goto LABEL_10;
    }
    llvm::ConstantRange::unionWith((uint64_t)&v40, (unsigned int *)&v36, 0, (uint64_t)&__s1);
    v20 = v33;
    if (v33 > 0x40)
    {
      v21 = __s2;
      if (memcmp(__s1, __s2, (((unint64_t)v33 + 63) >> 3) & 0x3FFFFFF8))
        goto LABEL_22;
      v25 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__s1) == v20;
    }
    else
    {
      v21 = __s2;
      if (__s1 != __s2)
      {
LABEL_22:
        v22 = 0;
        goto LABEL_23;
      }
      if (!v33)
      {
        v22 = 1;
        goto LABEL_23;
      }
      v25 = __s1 == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v33);
    }
    v22 = v25;
LABEL_23:
    if (v35 >= 0x41 && v21)
    {
      MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
      v20 = v33;
    }
    if (v20 >= 0x41 && __s1)
      MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
    if (v22)
    {
      False = llvm::ConstantInt::getTrue(*(uint64_t ***)a1, v18, v19);
      goto LABEL_27;
    }
LABEL_28:
    if (llvm::ConstantRange::contains((llvm::ConstantRange *)&v40, (const llvm::ConstantRange *)&v36))
    {
      if (a3)
        v8 = (llvm::Value **)a2;
      else
        v8 = (llvm::Value **)a1;
    }
    else
    {
      v23 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v36, (const llvm::ConstantRange *)&v40);
      if (a3)
        v24 = (llvm::Value **)a1;
      else
        v24 = (llvm::Value **)a2;
      if (v23)
        v8 = v24;
      else
        v8 = 0;
    }
    goto LABEL_38;
  }
  return v8;
}

uint64_t sub_1C4E74A60(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  int v27;
  unsigned __int8 *v28;
  const void **v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  void *v39;
  _QWORD *v41;
  int v42;
  int64_t v43;
  unint64_t v45;
  unsigned int v46;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BOOL4 v56;
  int v57;
  void *v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  void *__dst;
  uint64_t v64;
  _BYTE v65[20];
  int v66;

  v3 = *(_WORD *)(a2 + 18) & 0x3E;
  if (v3 == 32)
    v4 = a1;
  else
    v4 = a2;
  if (v3 == 32)
    v5 = a2;
  else
    v5 = a1;
  v6 = *(_WORD *)(v5 + 18);
  if ((v6 & 0x3E) != 0x20)
    return 0;
  v8 = *(_QWORD *)(v5 - 64);
  v66 = 0;
  __dst = &v66;
  v64 = v8;
  v9 = *(_QWORD *)(v4 - 64);
  v10 = *(unsigned __int8 *)(v9 + 16);
  if (v10 == 5)
  {
    if (*(_WORD *)(v9 + 18) != 30)
      goto LABEL_23;
    v12 = *(_DWORD *)(v9 + 20) & 0x7FFFFFF;
    v13 = v9 - 32 * v12;
    if (v8 == *(_QWORD *)v13)
    {
      if ((sub_1C4D9EED4((uint64_t)v65, *(llvm::Constant **)(v13 + 32)) & 1) != 0)
        goto LABEL_119;
      v15 = v64;
      v14 = -(uint64_t)(*(_DWORD *)(v9 + 20) & 0x7FFFFFF);
    }
    else
    {
      v14 = -v12;
      v15 = v8;
    }
    v16 = v9 + 32 * v14;
    if (v15 == *(_QWORD *)(v16 + 32) && sub_1C4D9EED4((uint64_t)v65, *(llvm::Constant **)v16))
      goto LABEL_119;
    goto LABEL_23;
  }
  if (v10 != 58)
    goto LABEL_23;
  v11 = v8;
  if (v8 != *(_QWORD *)(v9 - 64))
    goto LABEL_13;
  if ((sub_1C4D9ED34((uint64_t)v65, *(llvm::Constant **)(v9 - 32)) & 1) != 0)
  {
LABEL_119:
    v57 = *(_WORD *)(v4 + 18) & 0x3F;
LABEL_121:
    *(_DWORD *)__dst = v57;
    v27 = 1;
    v26 = v66;
    goto LABEL_44;
  }
  v11 = v64;
LABEL_13:
  if (v11 == *(_QWORD *)(v9 - 32) && (sub_1C4D9ED34((uint64_t)v65, *(llvm::Constant **)(v9 - 64)) & 1) != 0)
    goto LABEL_119;
LABEL_23:
  v17 = *(_QWORD *)(v4 - 32);
  v18 = *(unsigned __int8 *)(v17 + 16);
  if (v18 == 5)
  {
    if (*(_WORD *)(v17 + 18) != 30)
      goto LABEL_38;
    v20 = *(_DWORD *)(v17 + 20) & 0x7FFFFFF;
    v21 = v17 - 32 * v20;
    v22 = v64;
    if (v64 == *(_QWORD *)v21)
    {
      if ((sub_1C4D9EED4((uint64_t)v65, *(llvm::Constant **)(v21 + 32)) & 1) != 0)
        goto LABEL_120;
      v22 = v64;
      v23 = -(uint64_t)(*(_DWORD *)(v17 + 20) & 0x7FFFFFF);
    }
    else
    {
      v23 = -v20;
    }
    v24 = v17 + 32 * v23;
    if (v22 == *(_QWORD *)(v24 + 32) && sub_1C4D9EED4((uint64_t)v65, *(llvm::Constant **)v24))
      goto LABEL_120;
    goto LABEL_38;
  }
  if (v18 != 58)
    goto LABEL_38;
  v19 = v64;
  if (v64 != *(_QWORD *)(v17 - 64))
    goto LABEL_28;
  if ((sub_1C4D9ED34((uint64_t)v65, *(llvm::Constant **)(v17 - 32)) & 1) != 0)
  {
LABEL_120:
    v57 = dword_1C85F3CEC[*(_WORD *)(v4 + 18) & 0x3F];
    goto LABEL_121;
  }
  v19 = v64;
LABEL_28:
  if (v19 == *(_QWORD *)(v17 - 32) && (sub_1C4D9ED34((uint64_t)v65, *(llvm::Constant **)(v17 - 64)) & 1) != 0)
    goto LABEL_120;
LABEL_38:
  if (v8 == *(_QWORD *)(v4 - 64))
  {
    v26 = *(_WORD *)(v4 + 18) & 0x3F;
  }
  else
  {
    if (v8 != *(_QWORD *)(v4 - 32))
      return 0;
    v26 = dword_1C85F3CEC[*(_WORD *)(v4 + 18) & 0x3F];
  }
  v27 = 0;
  v66 = v26;
LABEL_44:
  if ((v26 & 0xFFFFFFFE) == 0x20)
    return 0;
  LODWORD(v64) = 1;
  v62 = 0;
  __dst = 0;
  v28 = *(unsigned __int8 **)(v5 - 32);
  v60 = &v62;
  v61 = 0;
  if (sub_1C4D89F84((uint64_t)&v60, v28))
  {
    v29 = (const void **)v62;
    v30 = *(unsigned int *)(v62 + 8);
    if (v27)
    {
      v59 = *(_DWORD *)(v62 + 8);
      if (v30 <= 0x40)
      {
        v31 = ~*(_QWORD *)v62;
        v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v30;
        if (!(_DWORD)v30)
          v32 = 0;
        v33 = (void *)(v32 & v31);
        v58 = (void *)(v32 & v31);
        v59 = 0;
        goto LABEL_56;
      }
      v58 = (void *)operator new[]();
      memcpy(v58, *v29, ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v58);
      LODWORD(v30) = v59;
      v33 = v58;
      v59 = 0;
      v35 = v58;
      if (v30 <= 0x40)
      {
LABEL_56:
        __dst = v33;
        LODWORD(v64) = v30;
        v34 = v30;
        goto LABEL_61;
      }
    }
    else
    {
      if (v30 <= 0x40)
      {
        v33 = *(void **)v62;
        goto LABEL_56;
      }
      v35 = (void *)operator new[]();
      memcpy(v35, *v29, ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8);
    }
    llvm::APInt::reallocate((uint64_t)&__dst, v30);
    v34 = v64;
    if (v64 > 0x40)
    {
      v33 = __dst;
      memcpy(__dst, v35, (((unint64_t)v64 + 63) >> 3) & 0x3FFFFFF8);
      if (!v35)
        goto LABEL_61;
      goto LABEL_60;
    }
    __dst = v35;
    v33 = v35;
    if (v35)
LABEL_60:
      MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(v5 - 32) + 16) != 19)
      return 0;
    v33 = 0;
    __dst = 0;
    v34 = 8;
    LODWORD(v64) = 8;
  }
LABEL_61:
  v36 = v6 & 0x3F;
  if (a3)
  {
    v37 = v66;
  }
  else
  {
    LODWORD(v36) = dword_1C85F3C44[v36];
    v37 = dword_1C85F3C44[v66];
    v66 = v37;
  }
  if ((v37 - 38) <= 3)
  {
    v66 = v37 - 4;
    LODWORD(v61) = v34;
    if (v34 >= 0x41)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v60, 0, 0);
      v48 = 0;
      v49 = &v60[(v34 - 1) >> 6];
      if (v61 < 0x41)
        v49 = (uint64_t *)&v60;
      *v49 |= 1 << (v34 - 1);
      v50 = v60;
      v51 = ((unint64_t)v34 + 63) >> 6;
      v52 = (unint64_t *)v33;
      v53 = v51;
      do
      {
        v54 = *v50++;
        v55 = v54 + *v52;
        v56 = v55 + 1 <= *v52;
        if (v48)
        {
          ++v55;
          v48 = v56;
        }
        else
        {
          v48 = v55 < *v52;
        }
        *v52++ = v55;
        --v53;
      }
      while (v53);
      *((_QWORD *)v33 + (v51 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v34;
      if (v61 >= 0x41 && v60)
        MEMORY[0x1CAA32F9C](v60, 0x1000C8000313F17);
    }
    else
    {
      if (v34)
        v38 = 0xFFFFFFFFFFFFFFFFLL >> ((v34 - 1) & 0x3F ^ 0x3F);
      else
        v38 = 0;
      __dst = (void *)(v38 & ((unint64_t)v33 + (1 << (v34 - 1))));
    }
    v34 = v64;
  }
  if (!v34)
  {
    if ((_DWORD)v36 == 33 && v66 == 36)
      return v4;
    v39 = __dst;
LABEL_79:
    if (!v39)
    {
      if (v66 != 34 || (_DWORD)v36 != 33)
        return 0;
      return v4;
    }
    return 0;
  }
  if (v34 <= 0x40)
  {
    v39 = __dst;
    if (__dst == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v34) && (_DWORD)v36 == 33 && v66 == 36)
      return v4;
    goto LABEL_79;
  }
  if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__dst) != v34)
  {
    v41 = __dst;
    goto LABEL_91;
  }
  v41 = __dst;
  if ((_DWORD)v36 != 33 || v66 != 36)
  {
LABEL_91:
    v42 = 0;
    v43 = ((unint64_t)v34 + 63) >> 6;
    do
    {
      if (v43-- < 1)
        break;
      v45 = v41[v43];
      v42 += __clz(v45);
    }
    while (!v45);
    v46 = v34 | 0xFFFFFFC0;
    if ((v34 & 0x3F) == 0)
      v46 = 0;
    if (v42 + v46 == v34)
    {
      if (v66 != 34 || (_DWORD)v36 != 33)
        v4 = 0;
    }
    else
    {
      v4 = 0;
    }
  }
  if (v41)
    MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
  return v4;
}

uint64_t sub_1C4E7511C(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 *v3;
  BOOL v4;
  __int16 v8;
  __int16 v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t *v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD v26[2];

  v3 = *(unsigned __int8 **)(a1 - 32);
  if (v3)
    v4 = v3[16] > 0x14u;
  else
    v4 = 1;
  if (v4)
    return 0;
  v8 = *(_WORD *)(a1 + 18);
  v9 = *(_WORD *)(a2 + 18);
  if ((llvm::Constant::isNullValue(*(llvm::Constant **)(a1 - 32)) & 1) == 0
    && (sub_1C4E71060((uint64_t)v26, (llvm::Constant *)v3) & 1) == 0)
  {
    return 0;
  }
  v10 = *(unsigned __int8 **)(a2 - 32);
  if (!v10 || v10[16] > 0x14u)
    return 0;
  v11 = v8 & 0x3F;
  v12 = v9 & 0x3F;
  if ((llvm::Constant::isNullValue(*(llvm::Constant **)(a2 - 32)) & 1) != 0)
  {
    if (v11 != v12)
      return 0;
LABEL_14:
    v15 = v11 == 33;
    if (!a3)
      v15 = v12 == 32;
    if (!v15)
      return 0;
    v16 = *(_QWORD *)(a1 - 64);
    v17 = *(_QWORD *)(a2 - 64);
    v18 = *(unsigned __int8 *)(v17 + 16);
    if (v18 == 5)
    {
      if (*(_WORD *)(v17 + 18) != 28)
        goto LABEL_30;
      v20 = (uint64_t *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF));
      if (v16 != *v20 && v16 != v20[4])
      {
        v26[0] = *(_QWORD *)(a1 - 64);
        if (!sub_1C4E75A04(v26, *v20))
        {
          v19 = sub_1C4E75A04(v26, *(_QWORD *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) + 32));
LABEL_29:
          v21 = v19;
          result = a2;
          if ((v21 & 1) != 0)
            return result;
LABEL_30:
          v22 = *(unsigned __int8 *)(v16 + 16);
          if (v22 == 5)
          {
            if (*(_WORD *)(v16 + 18) != 28)
              return 0;
            v24 = (uint64_t *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF));
            v25 = *v24;
            if (v17 != *v24 && v17 != v24[4])
            {
              v26[0] = v17;
              if (!sub_1C4E75A04(v26, v25)
                && !sub_1C4E75A04(v26, *(_QWORD *)(v16 - 32 * (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) + 32)))
              {
                return 0;
              }
            }
          }
          else
          {
            if (v22 != 56)
              return 0;
            v23 = *(_QWORD *)(v16 - 64);
            if (v17 != v23 && v17 != *(_QWORD *)(v16 - 32))
            {
              v26[0] = v17;
              if ((sub_1C4E75A04(v26, v23) & 1) == 0 && (sub_1C4E75A04(v26, *(_QWORD *)(v16 - 32)) & 1) == 0)
                return 0;
            }
          }
          return a1;
        }
      }
    }
    else
    {
      if (v18 != 56)
        goto LABEL_30;
      if (v16 != *(_QWORD *)(v17 - 64) && v16 != *(_QWORD *)(v17 - 32))
      {
        v26[0] = *(_QWORD *)(a1 - 64);
        if ((sub_1C4E75A04(v26, *(_QWORD *)(v17 - 64)) & 1) == 0)
        {
          v19 = sub_1C4E75A04(v26, *(_QWORD *)(v17 - 32));
          goto LABEL_29;
        }
      }
    }
    return a2;
  }
  v13 = sub_1C4E71060((uint64_t)v26, (llvm::Constant *)v10);
  result = 0;
  if (v13 && v11 == v12)
    goto LABEL_14;
  return result;
}

uint64_t sub_1C4E7538C(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v7;
  unsigned __int8 v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD v14[2];
  llvm::APInt *v15;
  uint64_t v16;
  uint64_t v17;

  v10 = (int *)&v17 + 1;
  v11 = 53;
  v12 = 0;
  v13 = &v16;
  v14[0] = &v15;
  v14[1] = 0;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  if (!sub_1C4E75A6C((uint64_t)&v11, *(_QWORD *)(a1 - 64)))
    return 0;
  if ((sub_1C4D89F84((uint64_t)v14, *(unsigned __int8 **)(a1 - 32)) & 1) == 0)
    return 0;
  *v10 = *(_WORD *)(a1 + 18) & 0x3F;
  if (v16 != *(_QWORD *)(a2 - 64) || !sub_1C4D8AC3C((uint64_t)&v9, *(llvm::Constant **)(a2 - 32)))
    return 0;
  LODWORD(v17) = *(_WORD *)(a2 + 18) & 0x3F;
  v7 = *((_DWORD *)v15 + 2);
  if (v7 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v15) == v7)
      return 0;
  }
  else if (!*(_QWORD *)v15)
  {
    return 0;
  }
  if (a3 || v17 != 0x2000000021)
  {
    if (HIDWORD(v17) == 33)
      v8 = a3;
    else
      v8 = 0;
    if ((v8 & ((_DWORD)v17 == 32)) == 0)
      return 0;
  }
  return a2;
}

llvm::Value **sub_1C4E754BC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  int v7;
  uint64_t *v8;
  llvm::Value **False;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t **v17;
  int v18;
  const void **v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char v23;
  llvm::Type *v24;
  const llvm::APInt *v25;
  _QWORD *v26;
  uint64_t v27;
  _BOOL8 v28;
  llvm::APInt *v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _BOOL4 v35;
  unint64_t v36;
  _BOOL4 v37;
  int v38;
  int64_t v39;
  BOOL v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  char v44;
  _QWORD *v45;
  int v46;
  unint64_t v47;
  int v48;
  BOOL v49;
  char v50;
  unsigned int v51;
  BOOL v52;
  char v53;
  _QWORD *v54;
  int v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  _QWORD *v60;
  int v61;
  unint64_t v62;
  int v63;
  _QWORD v64[2];
  _QWORD v65[2];
  uint64_t v66;
  uint64_t v67;
  llvm::APInt *v68;
  int v69;

  v64[0] = &v68;
  v64[1] = 0;
  v65[0] = &v67;
  v65[1] = 0;
  v69 = 0;
  v67 = 0;
  v68 = 0;
  v66 = 0;
  v6 = *(_QWORD *)(a1 - 64);
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (v7 == 5)
  {
    if (*(_WORD *)(v6 + 18) == 13)
    {
      v8 = (uint64_t *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
      if (*v8)
      {
        v66 = *v8;
        if (sub_1C4D8A004((uint64_t)v64, (llvm::Constant *)v8[4]))
          goto LABEL_11;
      }
    }
    return 0;
  }
  if (v7 != 41)
    return 0;
  if (!*(_QWORD *)(v6 - 64))
    return 0;
  v66 = *(_QWORD *)(v6 - 64);
  if ((sub_1C4D89F84((uint64_t)v64, *(unsigned __int8 **)(v6 - 32)) & 1) == 0)
    return 0;
LABEL_11:
  if ((sub_1C4D89F84((uint64_t)v65, *(unsigned __int8 **)(a1 - 32)) & 1) == 0)
    return 0;
  v69 = *(_WORD *)(a1 + 18) & 0x3F;
  if (v66 != *(_QWORD *)(a2 - 64))
    return 0;
  v11 = *(_QWORD *)(a1 - 64);
  v12 = *(_DWORD *)(v11 + 20);
  v13 = (v12 & 0x40000000) != 0 ? *(_QWORD *)(v11 - 8) : v11 - 32 * (v12 & 0x7FFFFFF);
  if (*(_QWORD *)(v13 + 32) != *(_QWORD *)(a2 - 32))
    return 0;
  if (*a3)
  {
    v14 = *(unsigned __int8 *)(v11 + 17);
    v15 = (v14 >> 2) & 1;
    v16 = (v14 >> 1) & 1;
  }
  else
  {
    LOBYTE(v15) = 0;
    v16 = 0;
  }
  v17 = *(uint64_t ***)a1;
  v18 = *(_WORD *)(a2 + 18) & 0x3F;
  v19 = (const void **)v67;
  v20 = *(unsigned int *)(v67 + 8);
  if (v20 >= 0x41)
  {
    v22 = (_QWORD *)operator new[]();
    memcpy(v22, *v19, ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8);
    v27 = 0;
    v28 = 0;
    v29 = v68;
    v30 = *(_QWORD *)v68;
    v31 = (unint64_t)(v20 + 63) >> 6;
    do
    {
      v32 = v22[v27];
      v33 = *(_QWORD *)(v30 + v27 * 8);
      v34 = v32 - v33;
      v35 = v32 < v33;
      v36 = v32 + ~v33;
      v37 = v36 >= v32;
      if (v28)
      {
        v28 = v37;
      }
      else
      {
        v36 = v34;
        v28 = v35;
      }
      v22[v27++] = v36;
    }
    while ((unint64_t)(v20 + 63) >> 6 != v27);
    v22[(v31 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
    if (!sub_1C49591DC(v29))
      goto LABEL_68;
    v38 = 0;
    v39 = (unint64_t)(v20 + 63) >> 6;
    do
    {
      v40 = v39-- < 1;
      if (v40)
        break;
      v41 = v22[v39];
      v38 += __clz(v41);
    }
    while (!v41);
    v42 = v20 | 0xFFFFFFC0;
    if ((v20 & 0x3F) == 0)
      v42 = 0;
    if ((v20 - v38 - v42) > 0x40)
      goto LABEL_51;
    v26 = (_QWORD *)*v22;
  }
  else
  {
    if ((_DWORD)v20)
      v21 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
    else
      v21 = 0;
    v22 = (_QWORD *)(v21 & (*(_QWORD *)v67 - *(_QWORD *)v68));
    v23 = sub_1C49591DC(v68);
    v26 = v22;
    if ((v23 & 1) == 0)
      goto LABEL_68;
  }
  if (v26 == (_QWORD *)2)
  {
    if (v69 == 36 && v18 == 38)
      goto LABEL_99;
    v43 = v69 == 40 && v18 == 38;
    v44 = v43 ? v15 : 0;
    if ((v44 & 1) != 0)
      goto LABEL_99;
  }
  if (v20 < 0x41)
  {
    v45 = v22;
    goto LABEL_58;
  }
  v31 = (unint64_t)(v20 + 63) >> 6;
LABEL_51:
  v46 = 0;
  do
  {
    v40 = v31-- < 1;
    if (v40)
      break;
    v47 = v22[v31];
    v46 += __clz(v47);
  }
  while (!v47);
  v48 = v20 | 0xFFFFFFC0;
  if ((v20 & 0x3F) == 0)
    v48 = 0;
  if ((v20 - v46 - v48) > 0x40)
    goto LABEL_68;
  v45 = (_QWORD *)*v22;
LABEL_58:
  if (v45 == (_QWORD *)1)
  {
    if (v69 == 37 && v18 == 38)
      goto LABEL_99;
    v49 = v69 == 41 && v18 == 38;
    v50 = v49 ? v15 : 0;
    if ((v50 & 1) != 0)
      goto LABEL_99;
  }
LABEL_68:
  v51 = *((_DWORD *)v68 + 2);
  if (v51 > 0x40)
    v52 = llvm::APInt::countLeadingZerosSlowCase(v68) == v51;
  else
    v52 = *(_QWORD *)v68 == 0;
  v53 = v52;
  False = 0;
  if ((v53 & 1) != 0 || ((v16 ^ 1) & 1) != 0)
    goto LABEL_101;
  v54 = v22;
  if (v20 >= 0x41)
  {
    v55 = 0;
    v56 = (unint64_t)(v20 + 63) >> 6;
    v57 = v56;
    do
    {
      v40 = v57-- < 1;
      if (v40)
        break;
      v58 = v22[v57];
      v55 += __clz(v58);
    }
    while (!v58);
    v59 = v20 | 0xFFFFFFC0;
    if ((v20 & 0x3F) == 0)
      v59 = 0;
    if ((v20 - v55 - v59) > 0x40)
      goto LABEL_89;
    v54 = (_QWORD *)*v22;
  }
  if (v54 == (_QWORD *)2 && v69 == 36 && v18 == 34)
    goto LABEL_99;
  v60 = v22;
  if (v20 < 0x41)
    goto LABEL_96;
  v56 = (unint64_t)(v20 + 63) >> 6;
LABEL_89:
  v61 = 0;
  do
  {
    v40 = v56-- < 1;
    if (v40)
      break;
    v62 = v22[v56];
    v61 += __clz(v62);
  }
  while (!v62);
  v63 = v20 | 0xFFFFFFC0;
  if ((v20 & 0x3F) == 0)
    v63 = 0;
  if ((v20 - v61 - v63) > 0x40)
    goto LABEL_100;
  v60 = (_QWORD *)*v22;
LABEL_96:
  if (v60 != (_QWORD *)1)
  {
LABEL_100:
    False = 0;
    goto LABEL_101;
  }
  False = 0;
  if (v69 == 37 && v18 == 34)
LABEL_99:
    False = llvm::ConstantInt::getFalse(v17, v24, v25);
LABEL_101:
  if (v20 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  return False;
}

uint64_t sub_1C4E7596C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v5;
  BOOL v6;
  char v8;

  if (!a2)
    return 0;
  v3 = *(_QWORD *)(a2 - 64);
  if (!v3)
    return 0;
  **(_QWORD **)(a1 + 8) = v3;
  v5 = *(unsigned __int8 **)(a2 - 32);
  v6 = !v5 || v5[16] > 0x14u;
  if (v6
    || (llvm::Constant::isNullValue(*(llvm::Constant **)(a2 - 32)) & 1) == 0
    && (sub_1C4E71060((uint64_t)&v8, (llvm::Constant *)v5) & 1) == 0)
  {
    return 0;
  }
  **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
  return 1;
}

uint64_t sub_1C4E75A04(_QWORD *a1, uint64_t a2)
{
  _BOOL4 v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  _QWORD *v9;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 47)
    {
      v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(_QWORD **)(a2 - 8);
      else
        v9 = (_QWORD *)(a2 - 32 * (v8 & 0x7FFFFFF));
      v2 = *a1 == *v9;
    }
    else
    {
      v2 = 0;
    }
  }
  return (v7 ^ 1) & v2;
}

BOOL sub_1C4E75A6C(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;

  result = sub_1C4D9B530((_DWORD *)a1, a2);
  if (result)
  {
    result = 0;
    if (a2)
    {
      if (*(_BYTE *)(a2 + 16) == 84)
      {
        v5 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 8));
        if (v5)
        {
          **(_QWORD **)(a1 + 16) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

llvm::Value **sub_1C4E75AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  llvm::Type *v9;
  const llvm::APInt *v10;

  v2 = *(_QWORD *)(a1 - 64);
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(a1 - 32);
  if (!v4)
    return 0;
  v5 = a2;
  if (v2 != *(_QWORD *)(a2 - 64) || v4 != *(_QWORD *)(a2 - 32))
    return 0;
  v7 = *(_WORD *)(a1 + 18) & 0x3F;
  v8 = *(_WORD *)(a2 + 18) & 0x3F;
  if ((llvm::CmpInst::isImpliedTrueByMatchingCmp(v7, v8) & 1) != 0)
    return (llvm::Value **)v5;
  if (dword_1C85F3C44[v8] != v7)
  {
    if (v7 == 33)
    {
      v5 = 0;
      if (v8 > 0x29 || ((1 << v8) & 0x2A90000AA00) == 0)
        return (llvm::Value **)v5;
    }
    else if (v7 != 41 || (_DWORD)v8 != 39)
    {
      v5 = 0;
      if (v7 != 37 || (_DWORD)v8 != 35)
        return (llvm::Value **)v5;
    }
  }
  return llvm::ConstantInt::getTrue(*(uint64_t ***)a1, v9, v10);
}

llvm::Value **sub_1C4E75BD0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  int v7;
  uint64_t *v8;
  llvm::Value **True;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t **v15;
  int v16;
  const void **v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char v21;
  llvm::Type *v22;
  const llvm::APInt *v23;
  _QWORD *v24;
  uint64_t v25;
  _BOOL8 v26;
  llvm::APInt *v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BOOL4 v33;
  unint64_t v34;
  _BOOL4 v35;
  int v36;
  int64_t v37;
  BOOL v38;
  unint64_t v39;
  int v40;
  BOOL v41;
  char v42;
  _QWORD *v43;
  int v44;
  unint64_t v45;
  int v46;
  BOOL v47;
  char v48;
  unsigned int v49;
  BOOL v50;
  char v51;
  _QWORD *v52;
  int v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  _QWORD *v58;
  int v59;
  unint64_t v60;
  int v61;
  _QWORD v62[2];
  _QWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  llvm::APInt *v66;
  int v67;

  v62[0] = &v66;
  v62[1] = 0;
  v63[0] = &v65;
  v63[1] = 0;
  v67 = 0;
  v65 = 0;
  v66 = 0;
  v64 = 0;
  v6 = *(_QWORD *)(a1 - 64);
  v7 = *(unsigned __int8 *)(v6 + 16);
  if (v7 == 5)
  {
    if (*(_WORD *)(v6 + 18) != 13)
      return 0;
    v8 = (uint64_t *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
    if (!*v8)
      return 0;
    v64 = *v8;
    if (!sub_1C4D8A004((uint64_t)v62, (llvm::Constant *)v8[4]))
      return 0;
  }
  else
  {
    if (v7 != 41)
      return 0;
    if (!*(_QWORD *)(v6 - 64))
      return 0;
    v64 = *(_QWORD *)(v6 - 64);
    if ((sub_1C4D89F84((uint64_t)v62, *(unsigned __int8 **)(v6 - 32)) & 1) == 0)
      return 0;
  }
  if ((sub_1C4D89F84((uint64_t)v63, *(unsigned __int8 **)(a1 - 32)) & 1) == 0)
    return 0;
  v67 = *(_WORD *)(a1 + 18) & 0x3F;
  if (v64 != *(_QWORD *)(a2 - 64))
    return 0;
  v11 = *(_QWORD *)(a1 - 64);
  if (*(_QWORD *)(v11 - 32) != *(_QWORD *)(a2 - 32))
    return 0;
  if (*a3)
  {
    v12 = *(unsigned __int8 *)(v11 + 17);
    v13 = (v12 >> 2) & 1;
    v14 = (v12 >> 1) & 1;
  }
  else
  {
    LOBYTE(v13) = 0;
    v14 = 0;
  }
  v15 = *(uint64_t ***)a1;
  v16 = *(_WORD *)(a2 + 18) & 0x3F;
  v17 = (const void **)v65;
  v18 = *(unsigned int *)(v65 + 8);
  if (v18 >= 0x41)
  {
    v20 = (_QWORD *)operator new[]();
    memcpy(v20, *v17, ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8);
    v25 = 0;
    v26 = 0;
    v27 = v66;
    v28 = *(_QWORD *)v66;
    v29 = (unint64_t)(v18 + 63) >> 6;
    do
    {
      v30 = v20[v25];
      v31 = *(_QWORD *)(v28 + v25 * 8);
      v32 = v30 - v31;
      v33 = v30 < v31;
      v34 = v30 + ~v31;
      v35 = v34 >= v30;
      if (v26)
      {
        v26 = v35;
      }
      else
      {
        v34 = v32;
        v26 = v33;
      }
      v20[v25++] = v34;
    }
    while ((unint64_t)(v18 + 63) >> 6 != v25);
    v20[(v29 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
    if (!sub_1C49591DC(v27))
      goto LABEL_65;
    v36 = 0;
    v37 = (unint64_t)(v18 + 63) >> 6;
    do
    {
      v38 = v37-- < 1;
      if (v38)
        break;
      v39 = v20[v37];
      v36 += __clz(v39);
    }
    while (!v39);
    v40 = v18 | 0xFFFFFFC0;
    if ((v18 & 0x3F) == 0)
      v40 = 0;
    if ((v18 - v36 - v40) > 0x40)
      goto LABEL_48;
    v24 = (_QWORD *)*v20;
  }
  else
  {
    if ((_DWORD)v18)
      v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
    else
      v19 = 0;
    v20 = (_QWORD *)(v19 & (*(_QWORD *)v65 - *(_QWORD *)v66));
    v21 = sub_1C49591DC(v66);
    v24 = v20;
    if ((v21 & 1) == 0)
      goto LABEL_65;
  }
  if (v24 == (_QWORD *)2)
  {
    if (v67 == 35 && v16 == 41)
      goto LABEL_96;
    v41 = v67 == 39 && v16 == 41;
    v42 = v41 ? v13 : 0;
    if ((v42 & 1) != 0)
      goto LABEL_96;
  }
  if (v18 < 0x41)
  {
    v43 = v20;
    goto LABEL_55;
  }
  v29 = (unint64_t)(v18 + 63) >> 6;
LABEL_48:
  v44 = 0;
  do
  {
    v38 = v29-- < 1;
    if (v38)
      break;
    v45 = v20[v29];
    v44 += __clz(v45);
  }
  while (!v45);
  v46 = v18 | 0xFFFFFFC0;
  if ((v18 & 0x3F) == 0)
    v46 = 0;
  if ((v18 - v44 - v46) > 0x40)
    goto LABEL_65;
  v43 = (_QWORD *)*v20;
LABEL_55:
  if (v43 == (_QWORD *)1)
  {
    if (v67 == 34 && v16 == 41)
      goto LABEL_96;
    v47 = v67 == 38 && v16 == 41;
    v48 = v47 ? v13 : 0;
    if ((v48 & 1) != 0)
      goto LABEL_96;
  }
LABEL_65:
  v49 = *((_DWORD *)v66 + 2);
  if (v49 > 0x40)
    v50 = llvm::APInt::countLeadingZerosSlowCase(v66) == v49;
  else
    v50 = *(_QWORD *)v66 == 0;
  v51 = v50;
  True = 0;
  if ((v51 & 1) != 0 || ((v14 ^ 1) & 1) != 0)
    goto LABEL_98;
  v52 = v20;
  if (v18 >= 0x41)
  {
    v53 = 0;
    v54 = (unint64_t)(v18 + 63) >> 6;
    v55 = v54;
    do
    {
      v38 = v55-- < 1;
      if (v38)
        break;
      v56 = v20[v55];
      v53 += __clz(v56);
    }
    while (!v56);
    v57 = v18 | 0xFFFFFFC0;
    if ((v18 & 0x3F) == 0)
      v57 = 0;
    if ((v18 - v53 - v57) > 0x40)
      goto LABEL_86;
    v52 = (_QWORD *)*v20;
  }
  if (v52 == (_QWORD *)2 && v67 == 35 && v16 == 37)
    goto LABEL_96;
  v58 = v20;
  if (v18 < 0x41)
    goto LABEL_93;
  v54 = (unint64_t)(v18 + 63) >> 6;
LABEL_86:
  v59 = 0;
  do
  {
    v38 = v54-- < 1;
    if (v38)
      break;
    v60 = v20[v54];
    v59 += __clz(v60);
  }
  while (!v60);
  v61 = v18 | 0xFFFFFFC0;
  if ((v18 & 0x3F) == 0)
    v61 = 0;
  if ((v18 - v59 - v61) > 0x40)
    goto LABEL_97;
  v58 = (_QWORD *)*v20;
LABEL_93:
  if (v58 != (_QWORD *)1)
  {
LABEL_97:
    True = 0;
    goto LABEL_98;
  }
  True = 0;
  if (v67 == 34 && v16 == 37)
LABEL_96:
    True = llvm::ConstantInt::getTrue(v15, v22, v23);
LABEL_98:
  if (v18 >= 0x41 && v20)
    MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  return True;
}

uint64_t sub_1C4E76068(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;
  unsigned __int8 *v4;
  char isNullValue;
  char v8;

  if (*(_BYTE *)(a2 + 16) != 85)
    return 0;
  v2 = *(_DWORD *)(a2 + 20);
  v3 = (v2 & 0x40000000) != 0 ? *(_QWORD **)(a2 - 8) : (_QWORD *)(a2 - 32 * (v2 & 0x7FFFFFF));
  if (*v3 != a1)
    return 0;
  v4 = (unsigned __int8 *)v3[8];
  if (!v4 || v4[16] > 0x14u)
    return 0;
  isNullValue = llvm::Constant::isNullValue((llvm::Constant *)v4);
  if ((isNullValue & 1) != 0)
    return 1;
  else
    return sub_1C4E71060((uint64_t)&v8, (llvm::Constant *)v4);
}

llvm::ValueHandleBase *sub_1C4E760F4(llvm::Constant **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::Constant *v4;
  int v5;
  llvm::APInt **v6;
  llvm::Type *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::APInt **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Constant **v19;
  llvm::Constant *v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  llvm::APInt **v26;
  llvm::APInt ***v27;
  llvm::APInt ***v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  llvm::APInt **v33;
  llvm::APInt ***v34;
  llvm::APInt ***v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  llvm::APInt *v48;
  uint64_t v49;
  int v50;
  llvm::APInt *v51;
  llvm::Type *v52;
  uint64_t v53;
  int v54;
  llvm::APInt *v55;
  llvm::APInt *v56;
  llvm::APInt *v57;
  uint64_t v58;
  int v59;
  llvm::APInt *v60;
  llvm::APInt *v61;
  llvm::APInt *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  _QWORD v120[3];
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  llvm::APInt **v124;
  llvm::APInt **v125;
  uint64_t *v126;
  llvm::APInt *v127;

  v2 = a2;
  v3 = (uint64_t)a1;
  v4 = *a1;
  v124 = a1;
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 5)
  {
    if (*(_WORD *)(a2 + 18) == 30)
    {
      v8 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      v9 = a2 - 32 * v8;
      if (*(llvm::Constant ***)v9 == a1)
      {
        if ((sub_1C4D9EED4((uint64_t)&v125, *(llvm::Constant **)(v9 + 32)) & 1) != 0)
          return llvm::Constant::getAllOnesValue(v4, v7);
        v11 = v124;
        v10 = -(uint64_t)(*(_DWORD *)(v2 + 20) & 0x7FFFFFF);
      }
      else
      {
        v10 = -v8;
        v11 = a1;
      }
      v12 = v2 + 32 * v10;
      if (v11 == *(llvm::APInt ***)(v12 + 32) && sub_1C4D9EED4((uint64_t)&v125, *(llvm::Constant **)v12))
        return llvm::Constant::getAllOnesValue(v4, v7);
    }
  }
  else if (v5 == 58)
  {
    v6 = a1;
    if (*(llvm::Constant ***)(a2 - 64) == a1)
    {
      if ((sub_1C4D9ED34((uint64_t)&v125, *(llvm::Constant **)(a2 - 32)) & 1) != 0)
        return llvm::Constant::getAllOnesValue(v4, v7);
      v6 = v124;
    }
    if (v6 == *(llvm::APInt ***)(v2 - 32) && (sub_1C4D9ED34((uint64_t)&v125, *(llvm::Constant **)(v2 - 64)) & 1) != 0)
      return llvm::Constant::getAllOnesValue(v4, v7);
  }
  v124 = (llvm::APInt **)v3;
  v13 = *(unsigned __int8 *)(v2 + 16);
  if (v13 == 5)
  {
    if (*(_WORD *)(v2 + 18) != 30)
      goto LABEL_58;
    v17 = *(_DWORD *)(v2 + 20) & 0x7FFFFFF;
    v18 = -v17;
    v19 = (llvm::Constant **)(v2 - 32 * v17);
    v20 = *v19;
    v21 = *((unsigned __int8 *)*v19 + 16);
    if (v21 == 5)
    {
      if (*((_WORD *)v20 + 9) != 28)
        goto LABEL_48;
      v29 = (_QWORD *)((char *)v20 - 32 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
      if (*v29 != v3)
      {
        v22 = v29 + 4;
LABEL_45:
        if (*v22 != v3)
          goto LABEL_48;
      }
    }
    else
    {
      if (v21 != 56)
        goto LABEL_48;
      if (*((_QWORD *)v20 - 8) != v3)
      {
        v22 = (_QWORD *)((char *)v20 - 32);
        goto LABEL_45;
      }
    }
    if ((sub_1C4D9EED4((uint64_t)&v126, v19[4]) & 1) != 0)
      return llvm::Constant::getAllOnesValue(v4, v7);
    v18 = -(uint64_t)(*(_DWORD *)(v2 + 20) & 0x7FFFFFF);
LABEL_48:
    v30 = v2 + 32 * v18;
    v31 = *(_QWORD *)(v30 + 32);
    v32 = *(unsigned __int8 *)(v31 + 16);
    if (v32 == 5)
    {
      if (*(_WORD *)(v31 + 18) != 28)
        goto LABEL_58;
      v35 = (llvm::APInt ***)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF));
      v33 = v124;
      if (v124 == *v35)
        goto LABEL_56;
      v34 = v35 + 4;
    }
    else
    {
      if (v32 != 56)
        goto LABEL_58;
      v33 = v124;
      if (v124 == *(llvm::APInt ***)(v31 - 64))
        goto LABEL_56;
      v34 = (llvm::APInt ***)(v31 - 32);
    }
    if (v33 != *v34)
      goto LABEL_58;
LABEL_56:
    if (!sub_1C4D9EED4((uint64_t)&v126, *(llvm::Constant **)v30))
      goto LABEL_58;
    return llvm::Constant::getAllOnesValue(v4, v7);
  }
  if (v13 != 58)
    goto LABEL_58;
  v14 = *(_QWORD *)(v2 - 64);
  v15 = *(unsigned __int8 *)(v14 + 16);
  if (v15 == 5)
  {
    if (*(_WORD *)(v14 + 18) != 28)
      goto LABEL_32;
    v23 = (_QWORD *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF));
    if (*v23 != v3)
    {
      v16 = v23 + 4;
LABEL_30:
      if (*v16 != v3)
        goto LABEL_32;
    }
  }
  else
  {
    if (v15 != 56)
      goto LABEL_32;
    if (*(_QWORD *)(v14 - 64) != v3)
    {
      v16 = (_QWORD *)(v14 - 32);
      goto LABEL_30;
    }
  }
  if ((sub_1C4D9ED34((uint64_t)&v126, *(llvm::Constant **)(v2 - 32)) & 1) != 0)
    return llvm::Constant::getAllOnesValue(v4, v7);
LABEL_32:
  v24 = *(_QWORD *)(v2 - 32);
  v25 = *(unsigned __int8 *)(v24 + 16);
  if (v25 == 5)
  {
    if (*(_WORD *)(v24 + 18) != 28)
      goto LABEL_58;
    v28 = (llvm::APInt ***)(v24 - 32 * (*(_DWORD *)(v24 + 20) & 0x7FFFFFF));
    v26 = v124;
    if (v124 == *v28)
      goto LABEL_40;
    v27 = v28 + 4;
  }
  else
  {
    if (v25 != 56)
      goto LABEL_58;
    v26 = v124;
    if (v124 == *(llvm::APInt ***)(v24 - 64))
      goto LABEL_40;
    v27 = (llvm::APInt ***)(v24 - 32);
  }
  if (v26 != *v27)
    goto LABEL_58;
LABEL_40:
  if ((sub_1C4D9ED34((uint64_t)&v126, *(llvm::Constant **)(v2 - 64)) & 1) == 0)
  {
LABEL_58:
    v36 = *(unsigned __int8 *)(v2 + 16);
    if (v36 == 5)
    {
      if (*(_WORD *)(v2 + 18) != 28)
        goto LABEL_66;
      v38 = (_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
      if (*v38 == v3)
        return (llvm::ValueHandleBase *)v3;
      v37 = v38 + 4;
    }
    else
    {
      if (v36 != 56)
        goto LABEL_66;
      if (*(_QWORD *)(v2 - 64) == v3)
        return (llvm::ValueHandleBase *)v3;
      v37 = (_QWORD *)(v2 - 32);
    }
    if (*v37 == v3)
      return (llvm::ValueHandleBase *)v3;
LABEL_66:
    v122 = 0;
    v123 = 0;
    v39 = *(unsigned __int8 *)(v3 + 16);
    if (v39 == 5)
    {
      v42 = *(unsigned __int16 *)(v3 + 18);
      if (v42 != 30
        || (v43 = (uint64_t *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF)), (v40 = *v43) == 0)
        || (v123 = *v43, (v41 = v43[4]) == 0))
      {
        v124 = (llvm::APInt **)&v123;
        v125 = (llvm::APInt **)&v122;
        goto LABEL_93;
      }
    }
    else
    {
      if (v39 != 58)
        goto LABEL_84;
      v40 = *(_QWORD *)(v3 - 64);
      if (!v40 || (v123 = *(_QWORD *)(v3 - 64), (v41 = *(_QWORD *)(v3 - 32)) == 0))
      {
        v124 = (llvm::APInt **)&v123;
        v125 = (llvm::APInt **)&v122;
LABEL_87:
        v47 = *(unsigned __int8 *)(v40 + 16);
        if (v47 == 5)
        {
          if (*(_WORD *)(v40 + 18) != 30)
            goto LABEL_103;
          if (!*(_QWORD *)(v40 - 32 * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF)))
            goto LABEL_103;
          v123 = *(_QWORD *)(v40 - 32 * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF));
          v48 = *(llvm::APInt **)(v40 - 32 * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF) + 32);
          if (!v48)
            goto LABEL_103;
        }
        else
        {
          if (v47 != 58)
            goto LABEL_103;
          if (!*(_QWORD *)(v40 - 64))
            goto LABEL_103;
          v123 = *(_QWORD *)(v40 - 64);
          v48 = *(llvm::APInt **)(v40 - 32);
          if (!v48)
            goto LABEL_103;
        }
        *v125 = v48;
        if ((sub_1C4D9ED34((uint64_t)&v126, *(llvm::Constant **)(v3 - 32)) & 1) == 0)
        {
LABEL_103:
          v53 = *(_QWORD *)(v3 - 32);
          v54 = *(unsigned __int8 *)(v53 + 16);
          if (v54 == 5)
          {
            if (*(_WORD *)(v53 + 18) != 30)
              goto LABEL_135;
            v57 = *(llvm::APInt **)(v53 - 32 * (*(_DWORD *)(v53 + 20) & 0x7FFFFFF));
            if (!v57)
              goto LABEL_135;
            *v124 = v57;
            v56 = *(llvm::APInt **)(v53 - 32 * (*(_DWORD *)(v53 + 20) & 0x7FFFFFF) + 32);
            if (!v56)
              goto LABEL_135;
          }
          else
          {
            if (v54 != 58)
              goto LABEL_135;
            v55 = *(llvm::APInt **)(v53 - 64);
            if (!v55)
              goto LABEL_135;
            *v124 = v55;
            v56 = *(llvm::APInt **)(v53 - 32);
            if (!v56)
              goto LABEL_135;
          }
          *v125 = v56;
          if ((sub_1C4D9ED34((uint64_t)&v126, *(llvm::Constant **)(v3 - 64)) & 1) == 0)
            goto LABEL_135;
        }
LABEL_126:
        v63 = *(unsigned __int8 *)(v2 + 16);
        if (v63 == 5)
        {
          if (*(_WORD *)(v2 + 18) != 29)
            goto LABEL_135;
          v66 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
          v64 = *v66;
          v65 = v66[4];
        }
        else
        {
          if (v63 != 57)
            goto LABEL_135;
          v64 = *(_QWORD *)(v2 - 64);
          v65 = *(_QWORD *)(v2 - 32);
        }
        if (v123 == v64 && v122 == v65 || v123 == v65 && v122 == v64)
          return llvm::Constant::getAllOnesValue(v4, v52);
LABEL_135:
        v124 = (llvm::APInt **)&v123;
        v125 = (llvm::APInt **)&v122;
        if (!sub_1C4E74064(&v124, 28, v3))
          goto LABEL_145;
        v67 = *(unsigned __int8 *)(v2 + 16);
        if (v67 == 5)
        {
          if (*(_WORD *)(v2 + 18) != 30)
            goto LABEL_145;
          v70 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
          v68 = *v70;
          v69 = v70[4];
        }
        else
        {
          if (v67 != 58)
            goto LABEL_145;
          v68 = *(_QWORD *)(v2 - 64);
          v69 = *(_QWORD *)(v2 - 32);
        }
        if (v123 == v68 && v122 == v69 || v123 == v69 && v122 == v68)
          return (llvm::ValueHandleBase *)v2;
LABEL_145:
        v124 = (llvm::APInt **)&v123;
        v126 = &v122;
        if (sub_1C4E76FA0(&v124, 30, v3))
        {
          v71 = *(unsigned __int8 *)(v2 + 16);
          if (v71 == 5)
          {
            if (*(_WORD *)(v2 + 18) == 28)
            {
              v74 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
              v72 = *v74;
              v73 = v74[4];
LABEL_151:
              if (v123 == v72 && v122 == v73 || v123 == v73 && v122 == v72)
                return (llvm::ValueHandleBase *)v3;
            }
          }
          else if (v71 == 56)
          {
            v72 = *(_QWORD *)(v2 - 64);
            v73 = *(_QWORD *)(v2 - 32);
            goto LABEL_151;
          }
        }
        v124 = (llvm::APInt **)&v123;
        v126 = &v122;
        if (!sub_1C4E76FA0(&v124, 29, v3))
          goto LABEL_166;
        v75 = *(unsigned __int8 *)(v2 + 16);
        if (v75 == 5)
        {
          if (*(_WORD *)(v2 + 18) != 30)
            goto LABEL_166;
          v78 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
          v76 = *v78;
          v77 = v78[4];
        }
        else
        {
          if (v75 != 58)
            goto LABEL_166;
          v76 = *(_QWORD *)(v2 - 64);
          v77 = *(_QWORD *)(v2 - 32);
        }
        if ((v123 != v76 || v122 != v77) && (v123 != v77 || v122 != v76))
        {
LABEL_166:
          v121 = 0;
          v124 = (llvm::APInt **)&v121;
          v125 = (llvm::APInt **)&v123;
          v126 = &v122;
          v79 = *(unsigned __int8 *)(v3 + 16);
          if (v79 != 5)
          {
            if (v79 != 56)
              goto LABEL_186;
            v80 = *(_QWORD *)(v3 - 64);
            if (!v80
              || (v121 = *(_QWORD *)(v3 - 64), !sub_1C4E770BC(&v125, v80))
              || (v81 = *(_QWORD *)(v3 - 32)) == 0)
            {
              v82 = *(_QWORD *)(v3 - 32);
              if (!v82)
                goto LABEL_186;
              v121 = *(_QWORD *)(v3 - 32);
              if (!sub_1C4E770BC(&v125, v82))
                goto LABEL_186;
              v81 = *(_QWORD *)(v3 - 64);
              if (!v81)
                goto LABEL_186;
            }
            goto LABEL_184;
          }
          if (*(_WORD *)(v3 + 18) != 28)
            goto LABEL_186;
          v83 = *(_DWORD *)(v3 + 20) & 0x7FFFFFF;
          v84 = (uint64_t *)(v3 - 32 * v83);
          v85 = *v84;
          if (*v84)
          {
            v121 = *v84;
            v86 = sub_1C4E770BC(&v125, v85);
            v87 = *(_DWORD *)(v3 + 20) & 0x7FFFFFF;
            v88 = -v87;
            if (v86)
            {
              v81 = *(_QWORD *)(v3 - 32 * v87 + 32);
              if (v81)
              {
LABEL_184:
                v122 = v81;
                v120[0] = v123;
                v120[1] = v81;
                if (sub_1C4E77280(v120, 30, v2))
                  return (llvm::ValueHandleBase *)v121;
LABEL_186:
                v120[0] = 0;
                v127 = 0;
                v124 = (llvm::APInt **)v120;
                v125 = &v127;
                v126 = 0;
                v91 = *(unsigned __int8 *)(v3 + 16);
                if (v91 == 5)
                {
                  if (*(_WORD *)(v3 + 18) != 30)
                    goto LABEL_194;
                  v92 = v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF);
                  if (!*(_QWORD *)v92)
                    goto LABEL_194;
                  v120[0] = *(_QWORD *)v92;
                  if (!sub_1C4D8A004((uint64_t)&v125, *(llvm::Constant **)(v92 + 32)))
                    goto LABEL_194;
                }
                else
                {
                  if (v91 != 58)
                    goto LABEL_194;
                  if (!*(_QWORD *)(v3 - 64))
                    goto LABEL_194;
                  v120[0] = *(_QWORD *)(v3 - 64);
                  if ((sub_1C4D89F84((uint64_t)&v125, *(unsigned __int8 **)(v3 - 32)) & 1) == 0)
                    goto LABEL_194;
                }
                v96 = *((_DWORD *)v127 + 2);
                if (!v96)
                  goto LABEL_211;
                if (v96 > 0x40)
                {
                  if (llvm::APInt::countTrailingOnesSlowCase(v127) == v96)
                    goto LABEL_211;
                }
                else if (*(_QWORD *)v127 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v96)
                {
                  goto LABEL_211;
                }
LABEL_194:
                v124 = &v127;
                v125 = 0;
                v126 = v120;
                v93 = *(unsigned __int8 *)(v3 + 16);
                if (v93 == 5)
                {
                  if (*(_WORD *)(v3 + 18) != 30)
                    goto LABEL_228;
                  if (!sub_1C4D8A004((uint64_t)&v124, *(llvm::Constant **)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF))))goto LABEL_228;
                  v94 = *(_QWORD *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 32);
                  if (!v94)
                    goto LABEL_228;
                }
                else
                {
                  if (v93 != 58)
                    goto LABEL_228;
                  if (!sub_1C4D89F84((uint64_t)&v124, *(unsigned __int8 **)(v3 - 64)))
                    goto LABEL_228;
                  v94 = *(_QWORD *)(v3 - 32);
                  if (!v94)
                    goto LABEL_228;
                }
                *v126 = v94;
                v95 = *((_DWORD *)v127 + 2);
                if (v95)
                {
                  if (v95 > 0x40)
                  {
                    if (llvm::APInt::countTrailingOnesSlowCase(v127) != v95)
                      goto LABEL_228;
                  }
                  else if (*(_QWORD *)v127 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v95)
                  {
                    goto LABEL_228;
                  }
                }
LABEL_211:
                v97 = *(unsigned __int8 *)(v120[0] + 16);
                if (v97 == 5)
                {
                  if (*(_WORD *)(v120[0] + 18) != 30)
                    goto LABEL_228;
                  v100 = (uint64_t *)(v120[0] - 32 * (*(_DWORD *)(v120[0] + 20) & 0x7FFFFFF));
                  v98 = *v100;
                  if (!*v100)
                    goto LABEL_228;
                  v123 = *v100;
                  v99 = v100[4];
                  if (!v99)
                    goto LABEL_228;
                }
                else
                {
                  if (v97 != 58)
                    goto LABEL_228;
                  v98 = *(_QWORD *)(v120[0] - 64);
                  if (!v98)
                    goto LABEL_228;
                  v123 = *(_QWORD *)(v120[0] - 64);
                  v99 = *(_QWORD *)(v120[0] - 32);
                  if (!v99)
                    goto LABEL_228;
                }
                v122 = v99;
                v101 = *(unsigned __int8 *)(v2 + 16);
                if (v101 == 5)
                {
                  if (*(_WORD *)(v2 + 18) != 28)
                    goto LABEL_228;
                  v104 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
                  v102 = *v104;
                  v103 = v104[4];
                }
                else
                {
                  if (v101 != 56)
                    goto LABEL_228;
                  v102 = *(_QWORD *)(v2 - 64);
                  v103 = *(_QWORD *)(v2 - 32);
                }
                if (v98 == v102 && v99 == v103 || v98 == v103 && v99 == v102)
                  return (llvm::ValueHandleBase *)v3;
LABEL_228:
                v120[0] = 0;
                v127 = 0;
                v124 = (llvm::APInt **)v120;
                v125 = &v127;
                v126 = 0;
                v105 = *(unsigned __int8 *)(v3 + 16);
                if (v105 == 5)
                {
                  if (*(_WORD *)(v3 + 18) != 30)
                    goto LABEL_236;
                  v106 = v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF);
                  if (!*(_QWORD *)v106)
                    goto LABEL_236;
                  v120[0] = *(_QWORD *)v106;
                  if (!sub_1C4D8A004((uint64_t)&v125, *(llvm::Constant **)(v106 + 32)))
                    goto LABEL_236;
                }
                else
                {
                  if (v105 != 58)
                    goto LABEL_236;
                  if (!*(_QWORD *)(v3 - 64))
                    goto LABEL_236;
                  v120[0] = *(_QWORD *)(v3 - 64);
                  if ((sub_1C4D89F84((uint64_t)&v125, *(unsigned __int8 **)(v3 - 32)) & 1) == 0)
                    goto LABEL_236;
                }
                v110 = *((_DWORD *)v127 + 2);
                if (!v110)
                  goto LABEL_253;
                if (v110 > 0x40)
                {
                  if (llvm::APInt::countTrailingOnesSlowCase(v127) == v110)
                    goto LABEL_253;
                }
                else if (*(_QWORD *)v127 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v110)
                {
                  goto LABEL_253;
                }
LABEL_236:
                v124 = &v127;
                v125 = 0;
                v126 = v120;
                v107 = *(unsigned __int8 *)(v3 + 16);
                if (v107 == 5)
                {
                  if (*(_WORD *)(v3 + 18) != 30)
                    return 0;
                  if (!sub_1C4D8A004((uint64_t)&v124, *(llvm::Constant **)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF))))return 0;
                  v108 = *(_QWORD *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 32);
                  if (!v108)
                    return 0;
                }
                else
                {
                  if (v107 != 58)
                    return 0;
                  if (!sub_1C4D89F84((uint64_t)&v124, *(unsigned __int8 **)(v3 - 64)))
                    return 0;
                  v108 = *(_QWORD *)(v3 - 32);
                  if (!v108)
                    return 0;
                }
                *v126 = v108;
                v109 = *((_DWORD *)v127 + 2);
                if (v109)
                {
                  if (v109 > 0x40)
                  {
                    if (llvm::APInt::countTrailingOnesSlowCase(v127) != v109)
                      return 0;
                  }
                  else if (*(_QWORD *)v127 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v109)
                  {
                    return 0;
                  }
                }
LABEL_253:
                v111 = *(unsigned __int8 *)(v120[0] + 16);
                if (v111 == 5)
                {
                  if (*(_WORD *)(v120[0] + 18) != 28)
                    return 0;
                  v114 = (uint64_t *)(v120[0] - 32 * (*(_DWORD *)(v120[0] + 20) & 0x7FFFFFF));
                  v112 = *v114;
                  if (!*v114)
                    return 0;
                  v123 = *v114;
                  v113 = v114[4];
                  if (!v113)
                    return 0;
                }
                else
                {
                  if (v111 != 56)
                    return 0;
                  v112 = *(_QWORD *)(v120[0] - 64);
                  if (!v112)
                    return 0;
                  v123 = *(_QWORD *)(v120[0] - 64);
                  v113 = *(_QWORD *)(v120[0] - 32);
                  if (!v113)
                    return 0;
                }
                v115 = *(unsigned __int8 *)(v2 + 16);
                if (v115 == 5)
                {
                  if (*(_WORD *)(v2 + 18) == 30)
                  {
                    v118 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
                    v116 = *v118;
                    v117 = v118[4];
LABEL_266:
                    if (v112 == v116 && v113 == v117 || v112 == v117 && v113 == v116)
                      return (llvm::ValueHandleBase *)v3;
                  }
                }
                else if (v115 == 58)
                {
                  v116 = *(_QWORD *)(v2 - 64);
                  v117 = *(_QWORD *)(v2 - 32);
                  goto LABEL_266;
                }
                return 0;
              }
            }
          }
          else
          {
            v88 = -v83;
          }
          v89 = v3 + 32 * v88;
          v90 = *(_QWORD *)(v89 + 32);
          if (!v90)
            goto LABEL_186;
          v121 = *(_QWORD *)(v89 + 32);
          if (!sub_1C4E770BC(&v125, v90))
            goto LABEL_186;
          v81 = *(_QWORD *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
          if (!v81)
            goto LABEL_186;
          goto LABEL_184;
        }
        return llvm::Constant::getAllOnesValue(v4, v52);
      }
    }
    v122 = v41;
    if (v36 == 5)
    {
      if (*(_WORD *)(v2 + 18) == 29)
      {
        v46 = (uint64_t *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
        v44 = *v46;
        v45 = v46[4];
LABEL_80:
        if (v40 == v44 && v41 == v45 || v40 == v45 && v41 == v44)
          return (llvm::ValueHandleBase *)v2;
      }
    }
    else if (v36 == 57)
    {
      v44 = *(_QWORD *)(v2 - 64);
      v45 = *(_QWORD *)(v2 - 32);
      goto LABEL_80;
    }
LABEL_84:
    v124 = (llvm::APInt **)&v123;
    v125 = (llvm::APInt **)&v122;
    if (v39 != 5)
    {
      if (v39 != 58)
        goto LABEL_135;
      v40 = *(_QWORD *)(v3 - 64);
      goto LABEL_87;
    }
    v42 = *(unsigned __int16 *)(v3 + 18);
LABEL_93:
    if (v42 != 30)
      goto LABEL_135;
    v49 = *(_QWORD *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
    v50 = *(unsigned __int8 *)(v49 + 16);
    if (v50 == 5)
    {
      if (*(_WORD *)(v49 + 18) != 30)
        goto LABEL_117;
      if (!*(_QWORD *)(v49 - 32 * (*(_DWORD *)(v49 + 20) & 0x7FFFFFF)))
        goto LABEL_117;
      v123 = *(_QWORD *)(v49 - 32 * (*(_DWORD *)(v49 + 20) & 0x7FFFFFF));
      v51 = *(llvm::APInt **)(v49 - 32 * (*(_DWORD *)(v49 + 20) & 0x7FFFFFF) + 32);
      if (!v51)
        goto LABEL_117;
    }
    else if (v50 != 58
           || !*(_QWORD *)(v49 - 64)
           || (v123 = *(_QWORD *)(v49 - 64), (v51 = *(llvm::APInt **)(v49 - 32)) == 0))
    {
LABEL_117:
      v58 = *(_QWORD *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 32);
      v59 = *(unsigned __int8 *)(v58 + 16);
      if (v59 == 5)
      {
        if (*(_WORD *)(v58 + 18) != 30)
          goto LABEL_135;
        v62 = *(llvm::APInt **)(v58 - 32 * (*(_DWORD *)(v58 + 20) & 0x7FFFFFF));
        if (!v62)
          goto LABEL_135;
        *v124 = v62;
        v61 = *(llvm::APInt **)(v58 - 32 * (*(_DWORD *)(v58 + 20) & 0x7FFFFFF) + 32);
        if (!v61)
          goto LABEL_135;
      }
      else
      {
        if (v59 != 58)
          goto LABEL_135;
        v60 = *(llvm::APInt **)(v58 - 64);
        if (!v60)
          goto LABEL_135;
        *v124 = v60;
        v61 = *(llvm::APInt **)(v58 - 32);
        if (!v61)
          goto LABEL_135;
      }
      *v125 = v61;
      if (!sub_1C4D9EED4((uint64_t)&v126, *(llvm::Constant **)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF))))goto LABEL_135;
      goto LABEL_126;
    }
    *v125 = v51;
    if ((sub_1C4D9EED4((uint64_t)&v126, *(llvm::Constant **)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
      goto LABEL_126;
    goto LABEL_117;
  }
  return llvm::Constant::getAllOnesValue(v4, v7);
}

uint64_t sub_1C4E76FA0(_QWORD **a1, int a2, uint64_t a3)
{
  int v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v5 = *(unsigned __int8 *)(a3 + 16);
  v6 = a2 + 28;
  if (a2 + 28 == v5)
  {
    v7 = sub_1C4D9EC28(a1, 30, *(_QWORD *)(a3 - 64));
    v8 = *(_QWORD *)(a3 - 32);
    if (v7 && v8)
    {
      *a1[2] = v8;
      return 1;
    }
    result = sub_1C4D9EC28(a1, 30, v8);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(a3 - 64);
      if (v12)
      {
        *a1[2] = v12;
        return 1;
      }
      return 0;
    }
  }
  else
  {
    if (v5 == 5)
    {
      if (*(unsigned __int16 *)(a3 + 18) == a2
        && ((v9 = sub_1C4D9EC28(a1, 30, *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF))),
             v10 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32),
             v9)
         && v10
         || sub_1C4D9EC28(a1, 30, v10)
         && (v10 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF))) != 0))
      {
        *a1[2] = v10;
        v6 = 1;
      }
      else
      {
        v6 = 0;
      }
    }
    return (v5 == 5) & v6;
  }
  return result;
}

uint64_t sub_1C4E770BC(_QWORD **a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  llvm::APInt **v11;
  llvm::APInt **v12;
  uint64_t *v13;
  llvm::APInt *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  v11 = (llvm::APInt **)&v15;
  v12 = &v14;
  v13 = 0;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 30)
      goto LABEL_14;
    v5 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (!*v5)
      goto LABEL_14;
    v15 = *v5;
    if (!sub_1C4D8A004((uint64_t)&v12, (llvm::Constant *)v5[4]))
      goto LABEL_14;
  }
  else
  {
    if (v4 != 58)
      goto LABEL_14;
    if (!*(_QWORD *)(a2 - 64))
      goto LABEL_14;
    v15 = *(_QWORD *)(a2 - 64);
    if ((sub_1C4D89F84((uint64_t)&v12, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
      goto LABEL_14;
  }
  v6 = *((_DWORD *)v14 + 2);
  if (!v6)
    goto LABEL_27;
  if (v6 > 0x40)
  {
    if (llvm::APInt::countTrailingOnesSlowCase(v14) == v6)
      goto LABEL_27;
  }
  else if (*(_QWORD *)v14 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v6)
  {
    goto LABEL_27;
  }
LABEL_14:
  v11 = &v14;
  v12 = 0;
  v13 = &v15;
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 30)
      return 0;
    if (!sub_1C4D8A004((uint64_t)&v11, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF))))return 0;
    v8 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
    if (!v8)
      return 0;
  }
  else
  {
    if (v7 != 58)
      return 0;
    if (!sub_1C4D89F84((uint64_t)&v11, *(unsigned __int8 **)(a2 - 64)))
      return 0;
    v8 = *(_QWORD *)(a2 - 32);
    if (!v8)
      return 0;
  }
  *v13 = v8;
  v9 = *((_DWORD *)v14 + 2);
  if (v9)
  {
    if (v9 > 0x40)
    {
      if (llvm::APInt::countTrailingOnesSlowCase(v14) != v9)
        return 0;
    }
    else if (*(_QWORD *)v14 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v9)
    {
      return 0;
    }
  }
LABEL_27:
  if (v15)
  {
    **a1 = v15;
    return 1;
  }
  return 0;
}

uint64_t sub_1C4E77280(_QWORD *a1, int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Constant **v12;
  llvm::Constant *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;

  v5 = *(unsigned __int8 *)(a3 + 16);
  if (a2 + 28 == v5)
  {
    v6 = *(_QWORD *)(a3 - 64);
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 != 5)
    {
      if (v7 != 57)
        goto LABEL_26;
      v8 = *(_QWORD *)(v6 - 64);
      if (*a1 != v8)
      {
        v9 = *(_QWORD *)(v6 - 32);
        goto LABEL_16;
      }
      v9 = *(_QWORD *)(v6 - 32);
      if (a1[1] != v9)
      {
LABEL_16:
        if (*a1 != v9)
          goto LABEL_26;
        goto LABEL_23;
      }
LABEL_24:
      if ((sub_1C4D9ED34((uint64_t)(a1 + 2), *(llvm::Constant **)(a3 - 32)) & 1) != 0)
        return 1;
LABEL_26:
      v22 = *(_QWORD *)(a3 - 32);
      v23 = *(unsigned __int8 *)(v22 + 16);
      if (v23 != 5)
      {
        if (v23 != 57)
          return 0;
        v24 = *(_QWORD *)(v22 - 64);
        if (*a1 != v24)
        {
          v25 = *(_QWORD *)(v22 - 32);
          goto LABEL_34;
        }
        v25 = *(_QWORD *)(v22 - 32);
        if (a1[1] != v25)
        {
LABEL_34:
          if (*a1 == v25)
          {
LABEL_38:
            if (a1[1] == v24)
              return sub_1C4D9ED34((uint64_t)(a1 + 2), *(llvm::Constant **)(a3 - 64));
          }
          return 0;
        }
        return sub_1C4D9ED34((uint64_t)(a1 + 2), *(llvm::Constant **)(a3 - 64));
      }
      if (*(_WORD *)(v22 + 18) != 29)
        return 0;
      v26 = (uint64_t *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
      v24 = *v26;
      if (*a1 == *v26)
      {
        v27 = v26[4];
        if (a1[1] == v27)
          return sub_1C4D9ED34((uint64_t)(a1 + 2), *(llvm::Constant **)(a3 - 64));
      }
      else
      {
        v27 = v26[4];
      }
      if (*a1 == v27)
        goto LABEL_38;
      return 0;
    }
    if (*(_WORD *)(v6 + 18) != 29)
      goto LABEL_26;
    v17 = (uint64_t *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF));
    v8 = *v17;
    if (*a1 == *v17)
    {
      v18 = v17[4];
      if (a1[1] == v18)
        goto LABEL_24;
    }
    else
    {
      v18 = v17[4];
    }
    if (*a1 != v18)
      goto LABEL_26;
LABEL_23:
    if (a1[1] != v8)
      goto LABEL_26;
    goto LABEL_24;
  }
  if (v5 != 5 || *(unsigned __int16 *)(a3 + 18) != a2)
    return 0;
  v10 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
  v11 = -v10;
  v12 = (llvm::Constant **)(a3 - 32 * v10);
  v13 = *v12;
  v14 = *((unsigned __int8 *)*v12 + 16);
  if (v14 == 5)
  {
    if (*((_WORD *)v13 + 9) != 29)
      goto LABEL_48;
    v19 = (uint64_t *)((char *)v13 - 32 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF));
    v15 = *v19;
    if (*a1 == *v19)
    {
      v20 = v19[4];
      if (a1[1] == v20)
        goto LABEL_46;
    }
    else
    {
      v20 = v19[4];
    }
    if (*a1 != v20)
      goto LABEL_48;
LABEL_45:
    if (a1[1] != v15)
      goto LABEL_48;
    goto LABEL_46;
  }
  if (v14 != 57)
    goto LABEL_48;
  v15 = *((_QWORD *)v13 - 8);
  if (*a1 != v15)
  {
    v16 = *((_QWORD *)v13 - 4);
    goto LABEL_41;
  }
  v16 = *((_QWORD *)v13 - 4);
  if (a1[1] != v16)
  {
LABEL_41:
    if (*a1 != v16)
      goto LABEL_48;
    goto LABEL_45;
  }
LABEL_46:
  if ((sub_1C4D9EED4((uint64_t)(a1 + 2), v12[4]) & 1) != 0)
    return 1;
  v11 = -(uint64_t)(*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
LABEL_48:
  v28 = a3 + 32 * v11;
  v29 = *(_QWORD *)(v28 + 32);
  v30 = *(unsigned __int8 *)(v29 + 16);
  if (v30 == 5)
  {
    if (*(_WORD *)(v29 + 18) != 29)
      return 0;
    v33 = (uint64_t *)(v29 - 32 * (*(_DWORD *)(v29 + 20) & 0x7FFFFFF));
    v31 = *v33;
    if (*a1 == *v33)
    {
      v34 = v33[4];
      if (a1[1] == v34)
        return sub_1C4D9EED4((uint64_t)(a1 + 2), *(llvm::Constant **)v28);
    }
    else
    {
      v34 = v33[4];
    }
    if (*a1 != v34)
      return 0;
  }
  else
  {
    if (v30 != 57)
      return 0;
    v31 = *(_QWORD *)(v29 - 64);
    if (*a1 == v31)
    {
      v32 = *(_QWORD *)(v29 - 32);
      if (a1[1] == v32)
        return sub_1C4D9EED4((uint64_t)(a1 + 2), *(llvm::Constant **)v28);
    }
    else
    {
      v32 = *(_QWORD *)(v29 - 32);
    }
    if (*a1 != v32)
      return 0;
  }
  if (a1[1] != v31)
    return 0;
  return sub_1C4D9EED4((uint64_t)(a1 + 2), *(llvm::Constant **)v28);
}

BOOL sub_1C4E775B8(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;

  result = sub_1C4E75A6C(a1, a2);
  if (result)
  {
    result = 0;
    if (a2)
    {
      if (*(_BYTE *)(a2 + 16) == 84)
      {
        v5 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 32));
        if (v5)
        {
          **(_QWORD **)(a1 + 40) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C4E77624(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;

  result = sub_1C4E77690(a1, a2);
  if (result)
  {
    result = 0;
    if (a2)
    {
      if (*(_BYTE *)(a2 + 16) == 84)
      {
        v5 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 32));
        if (v5)
        {
          **(_QWORD **)(a1 + 40) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C4E77690(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;

  result = sub_1C4D9B530((_DWORD *)a1, a2);
  if (result)
  {
    result = 0;
    if (a2)
    {
      if (*(_BYTE *)(a2 + 16) == 84)
      {
        v5 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 16));
        if (v5)
        {
          **(_QWORD **)(a1 + 24) = v5;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4E776FC(_QWORD *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  if (*(_BYTE *)(a2 + 16) == 85
    && ((v2 = *(_DWORD *)(a2 + 20), (v2 & 0x40000000) != 0)
      ? (v3 = *(_QWORD *)(a2 - 8))
      : (v3 = a2 - 32 * (v2 & 0x7FFFFFF)),
        *a1 == *(_QWORD *)v3))
  {
    return sub_1C4D89CC8((uint64_t)(a1 + 1), *(llvm::Constant **)(v3 + 32));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C4E77744(_QWORD **a1, int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  BOOL v19;

  v5 = *(unsigned __int8 *)(a3 + 16);
  LOBYTE(v6) = a2 + 28;
  if (a2 + 28 != v5)
  {
    if (v5 != 5)
      return (v5 == 5) & v6;
    if (*(unsigned __int16 *)(a3 + 18) == a2)
    {
      v14 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      v15 = sub_1C4E770BC(a1, v14);
      if (v14)
        v16 = v15 == 0;
      else
        v16 = 1;
      if (v16)
      {
        v17 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
        v18 = sub_1C4E770BC(a1, v17);
        if (v17)
          v19 = v18 == 0;
        else
          v19 = 1;
        if (!v19)
        {
          *a1[1] = v17;
          v6 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
          if (!v6)
            return (v5 == 5) & v6;
          goto LABEL_29;
        }
      }
      else
      {
        *a1[1] = v14;
        v6 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32);
        if (v6)
        {
LABEL_29:
          *a1[2] = v6;
          LOBYTE(v6) = 1;
          return (v5 == 5) & v6;
        }
        sub_1C4E770BC(a1, 0);
      }
    }
    LOBYTE(v6) = 0;
    return (v5 == 5) & v6;
  }
  v7 = *(_QWORD *)(a3 - 64);
  v8 = sub_1C4E770BC(a1, v7);
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    *a1[1] = v7;
    v13 = *(_QWORD *)(a3 - 32);
    if (v13)
      goto LABEL_25;
    sub_1C4E770BC(a1, 0);
    return 0;
  }
  v10 = *(_QWORD *)(a3 - 32);
  v11 = sub_1C4E770BC(a1, v10);
  result = 0;
  if (v10 && v11)
  {
    *a1[1] = v10;
    v13 = *(_QWORD *)(a3 - 64);
    if (v13)
    {
LABEL_25:
      *a1[2] = v13;
      return 1;
    }
    return 0;
  }
  return result;
}

llvm::Value **sub_1C4E778CC(int a1, llvm::Value *this, llvm::Value *a3, uint64_t a4)
{
  uint64_t *v7;
  llvm::DataLayout *v8;
  uint64_t v9;
  uint64_t *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  char v13;
  llvm::Value *v14;
  llvm::ConstantInt *v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  BOOL v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  llvm::ConstantInt *v31;
  llvm::ConstantInt *v32;
  unsigned int v33;
  uint64_t v34;
  llvm::ConstantInt *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  BOOL v75;
  uint64_t *v76;
  uint64_t i;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  int v89;
  BOOL v90;
  int v91;
  uint64_t *v92;
  char v93;
  llvm *v94;
  int v95;
  int v96;
  int v97;
  llvm::ConstantInt *v98;
  _BOOL8 v99;
  int v100;
  int64_t v101;
  unint64_t v102;
  unsigned int v103;
  int v104;
  int64_t v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t *v109;
  unsigned int v110;
  unint64_t *v111;
  unsigned int v112;
  uint64_t *v113;
  uint64_t *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  void *v121;
  uint64_t v122;
  _BYTE v123[64];
  uint64_t *v124;
  uint64_t v125;
  _QWORD v126[3];
  char v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v7 = *(uint64_t **)a4;
  v8 = *(llvm::DataLayout **)(a4 + 8);
  v9 = *(_QWORD *)(a4 + 16);
  v10 = *(uint64_t **)(a4 + 32);
  v11 = llvm::Value::stripPointerCasts(this);
  v114 = (uint64_t *)v11;
  v12 = llvm::Value::stripPointerCasts(a3);
  v113 = (uint64_t *)v12;
  if ((a1 & 0xFFFFFFFE) == 0x20 && *((_BYTE *)v12 + 16) == 19)
  {
    v13 = *(_BYTE *)(a4 + 40);
    if (!v11 || *((unsigned __int8 *)v11 + 16) < 0x1Cu || (v14 = v11, !*((_QWORD *)v11 + 5)))
      v14 = 0;
    v124 = v7;
    v125 = 0;
    v126[1] = 0;
    v126[2] = 0;
    v126[0] = v14;
    v127 = v13;
    if (sub_1C4F84D74((uint64_t)v11, 0, (uint64_t)&v124))
    {
      sub_1C4774CC4(*(_DWORD **)v11);
      return llvm::ConstantInt::get(v15, a1 != 32, 0);
    }
  }
  v17 = a1 - 32;
  if (v17 <= 5)
  {
    v18 = dword_1C85F3C2C[v17];
    sub_1C4E71560((llvm::APInt *)&v111, (llvm::DataLayout *)v7, &v114, v17 < 2);
    sub_1C4E71560((llvm::APInt *)&v109, (llvm::DataLayout *)v7, &v113, v17 < 2);
    v20 = v113;
    v19 = v114;
    if (v114 == v113)
    {
      sub_1C4774CC4((_DWORD *)*v114);
      v32 = v31;
      llvm::ICmpInst::compare((uint64_t)&v111, (uint64_t)&v109, v18);
      v34 = v33;
      v35 = v32;
      goto LABEL_35;
    }
    if (v17 > 1)
    {
LABEL_187:
      v30 = 0;
LABEL_188:
      if (v110 >= 0x41 && v109)
        MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
      if (v112 >= 0x41)
      {
        if (v111)
          MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
      }
      return (llvm::Value **)v30;
    }
    v21 = *((unsigned __int8 *)v114 + 16);
    if (v114)
      v22 = v21 == 21;
    else
      v22 = 0;
    v23 = !v22;
    if (v22 && *(_BYTE *)(*v114 + 8) == 15)
    {
      v24 = *(_QWORD *)(v114[3] + 112);
      if (v24)
      {
        v25 = *((_DWORD *)v114 + 8) + 2;
        if (v25 < *(_DWORD *)(v24 + 8))
        {
          v36 = *(_QWORD *)(v24 + 8 * v25 + 40);
          if (v36)
          {
            if ((*(_BYTE *)(v36 + 20) & 0x20) != 0)
            {
              v37 = *((unsigned __int8 *)v113 + 16);
              if (v37 == 3 || v37 == 59)
              {
LABEL_56:
                v124 = 0;
                v121 = 0;
                goto LABEL_57;
              }
              if (v37 != 21)
                goto LABEL_70;
              if (*(_BYTE *)(*v113 + 8) != 15)
                goto LABEL_70;
              v38 = *(_QWORD *)(v113[3] + 112);
              if (!v38)
                goto LABEL_70;
              v39 = *((_DWORD *)v113 + 8);
LABEL_53:
              v41 = v39 + 2;
              if (v41 >= *(_DWORD *)(v38 + 8))
                goto LABEL_70;
              v42 = *(_QWORD *)(v38 + 8 * v41 + 40);
              if (!v42 || (*(_BYTE *)(v42 + 20) & 0x20) == 0)
                goto LABEL_70;
              goto LABEL_56;
            }
          }
        }
      }
    }
    v26 = *((unsigned __int8 *)v113 + 16);
    if (v113
      && v26 == 21
      && *(_BYTE *)(*v113 + 8) == 15
      && (v27 = *(_QWORD *)(v113[3] + 112)) != 0
      && (v28 = *((_DWORD *)v113 + 8) + 2, v28 < *(_DWORD *)(v27 + 8))
      && (v40 = *(_QWORD *)(v27 + 8 * v28 + 40)) != 0
      && (*(_BYTE *)(v40 + 20) & 0x20) != 0)
    {
      if (v21 != 3 && v21 != 59)
      {
        if ((v23 & 1) != 0)
          goto LABEL_70;
        if (*(_BYTE *)(*v114 + 8) != 15)
          goto LABEL_70;
        v38 = *(_QWORD *)(v114[3] + 112);
        if (!v38)
          goto LABEL_70;
        v39 = *((_DWORD *)v114 + 8);
        goto LABEL_53;
      }
    }
    else if (v21 != 59 || v26 != 3 && v26 != 59)
    {
      goto LABEL_70;
    }
    v124 = 0;
    v121 = 0;
    if (v114 && v21 >= 0x1C)
    {
      v29 = (uint64_t *)(v114[5] + 56);
LABEL_58:
      v43 = *v29;
      if (v43 && (v44 = *(_QWORD *)(v43 + 112)) != 0 && (*(_BYTE *)(v44 + 17) & 1) != 0)
        v45 = 65537;
      else
        v45 = 1;
      if (!llvm::getObjectSize((llvm::Value *)v114, &v124, (llvm::DataLayout *)v7, v8, (llvm::DataLayout *)v45, 0)
        || !llvm::getObjectSize((llvm::Value *)v20, &v121, (llvm::DataLayout *)v7, v8, (llvm::DataLayout *)v45, 0))
      {
        goto LABEL_70;
      }
      v46 = (unint64_t)v111;
      v47 = &v111[(v112 - 1) >> 6];
      if (v112 < 0x41)
        v47 = (unint64_t *)&v111;
      if (((*v47 >> (v112 - 1)) & 1) != 0)
        goto LABEL_70;
      v48 = (unint64_t)v109;
      v49 = &v109[(v110 - 1) >> 6];
      if (v110 < 0x41)
        v49 = (unint64_t *)&v109;
      if (((*v49 >> (v110 - 1)) & 1) != 0)
      {
LABEL_70:
        v108 = v18;
        v124 = v126;
        v125 = 0x800000000;
        v121 = v123;
        v122 = 0x800000000;
        llvm::getUnderlyingObjects((uint64_t)v19, (uint64_t)&v124, 0, (llvm::Value *)6);
        llvm::getUnderlyingObjects((uint64_t)v20, (uint64_t)&v121, 0, (llvm::Value *)6);
        if ((_DWORD)v125)
        {
          v50 = v124;
          v51 = 8 * v125;
          v30 = 0x8000000000041;
          while (1)
          {
            v52 = *(unsigned __int8 *)(*v50 + 16);
            if (v52 < 0x1C)
              break;
            v53 = v52 - 33;
            v65 = v53 > 0x33;
            v54 = (1 << v53) & 0x8000000000041;
            v55 = v65 || v54 == 0;
            if (v55 || (sub_1C4D91DD8(*v50, 19) & 1) == 0)
              break;
            ++v50;
            v51 -= 8;
            if (!v51)
              goto LABEL_79;
          }
          if ((_DWORD)v122)
          {
            v57 = (uint64_t *)v121;
            v58 = (uint64_t *)((char *)v121 + 8 * v122);
LABEL_116:
            v30 = 1;
            while (1)
            {
              v72 = *(unsigned __int8 *)(*v57 + 16);
              if (v72 < 0x1C)
                break;
              v73 = v72 - 33;
              v65 = v73 > 0x33;
              v74 = (1 << v73) & 0x8000000000041;
              v75 = v65 || v74 == 0;
              if (v75 || (sub_1C4D91DD8(*v57, 19) & 1) == 0)
                break;
              if (++v57 == v58)
                goto LABEL_124;
            }
LABEL_158:
            if (byte_1ED82E438)
              v91 = 43;
            else
              v91 = 47;
            sub_1C4EBF808((uint64_t)v19, v91, (uint64_t *)v8, &v115);
            if (!(_BYTE)v118)
              goto LABEL_165;
            if (!v10 || (v92 = v10, !v10[5]))
            {
              if (!v20 || *((unsigned __int8 *)v20 + 16) < 0x1Cu || (v92 = v20, !v20[5]))
                v92 = 0;
            }
            v115 = v7;
            v116 = 0;
            v117 = v92;
            v118 = v9;
            v119 = 0;
            v120 = 1;
            v93 = sub_1C4F84D74((uint64_t)v20, 0, (uint64_t)&v115);
            v94 = (llvm *)v19;
            if ((v93 & 1) == 0)
            {
LABEL_165:
              if (byte_1ED82E438)
                v95 = 43;
              else
                v95 = 47;
              sub_1C4EBF808((uint64_t)v20, v95, (uint64_t *)v8, &v115);
              if (!(_BYTE)v118)
              {
LABEL_181:
                v96 = 1;
                goto LABEL_182;
              }
              if (!v10 || !v10[5])
              {
                if (!v19 || *((unsigned __int8 *)v19 + 16) < 0x1Cu || (v10 = v19, !v19[5]))
                  v10 = 0;
              }
              v115 = v7;
              v116 = 0;
              v117 = v10;
              v118 = v9;
              v119 = 0;
              v96 = 1;
              v120 = 1;
              v97 = sub_1C4F84D74((uint64_t)v19, 0, (uint64_t)&v115);
              v94 = (llvm *)v20;
              if (!v97)
              {
LABEL_182:
                if (v121 != v123)
                  free(v121);
                if (v124 != v126)
                  free(v124);
                if (!v96)
                  goto LABEL_188;
                goto LABEL_187;
              }
            }
            v30 = v108;
            if (v94)
            {
              v96 = 1;
              if (llvm::PointerMayBeCaptured(v94, (const llvm::Value *)1, 1, 0))
                goto LABEL_182;
              sub_1C4774CC4((_DWORD *)*v19);
              v99 = v108 <= 0x28 && ((1 << v108) & 0x15600000055) != 0;
              goto LABEL_180;
            }
            goto LABEL_181;
          }
LABEL_124:
          if ((_DWORD)v125)
          {
            v76 = v124;
            for (i = 8 * v125; i; i -= 8)
            {
              v78 = *v76;
              v79 = *(unsigned __int8 *)(*v76 + 16);
              if (*v76 && v79 == 59)
              {
                v80 = *(_QWORD *)(v78 + 40);
                if (!v80)
                  goto LABEL_158;
                v81 = *(_QWORD *)(v80 + 56);
                if (!v81 || *(_BYTE *)(*(_QWORD *)(v78 - 32) + 16) != 16)
                  goto LABEL_158;
                v82 = *(_QWORD *)(v81 + 80);
                v83 = v82 ? v82 - 24 : 0;
                if (v80 != v83 || (*(_WORD *)(v78 + 18) & 0x40) != 0)
                  goto LABEL_158;
              }
              else
              {
                if (v78)
                  v84 = v79 > 3;
                else
                  v84 = 1;
                if (v84)
                {
                  if (v79 != 21)
                    goto LABEL_158;
                  if (*(_BYTE *)(*(_QWORD *)v78 + 8) != 15)
                    goto LABEL_158;
                  v85 = *(_QWORD *)(*(_QWORD *)(v78 + 24) + 112);
                  if (!v85)
                    goto LABEL_158;
                  v86 = *(_DWORD *)(v78 + 32) + 2;
                  if (v86 >= *(_DWORD *)(v85 + 8))
                    goto LABEL_158;
                  v87 = *(_QWORD *)(v85 + 8 * v86 + 40);
                  if (!v87 || (*(_BYTE *)(v87 + 20) & 0x20) == 0)
                    goto LABEL_158;
                }
                else
                {
                  v88 = *(_DWORD *)(v78 + 32);
                  v89 = v88 & 0x30;
                  v90 = (v88 & 0xFu) - 7 < 2 || v89 == 16;
                  if (v90 || v89 == 32)
                  {
                    if ((v88 & 0x1C00) != 0)
                      goto LABEL_158;
                  }
                  else if ((v88 & 0x1CC0) != 0x80)
                  {
                    goto LABEL_158;
                  }
                }
              }
              ++v76;
            }
          }
        }
        else
        {
LABEL_79:
          if ((_DWORD)v122)
          {
            v56 = 0;
            v57 = (uint64_t *)v121;
            v58 = (uint64_t *)((char *)v121 + 8 * v122);
            do
            {
              v59 = *(_QWORD *)((char *)v121 + v56);
              v60 = *(unsigned __int8 *)(v59 + 16);
              if (v59 && v60 == 59)
              {
                v61 = *(_QWORD *)(v59 + 40);
                if (!v61)
                  goto LABEL_116;
                v62 = *(_QWORD *)(v61 + 56);
                if (!v62 || *(_BYTE *)(*(_QWORD *)(v59 - 32) + 16) != 16)
                  goto LABEL_116;
                v63 = *(_QWORD *)(v62 + 80);
                v64 = v63 ? v63 - 24 : 0;
                if (v61 != v64 || (*(_WORD *)(v59 + 18) & 0x40) != 0)
                  goto LABEL_116;
              }
              else
              {
                if (v59)
                  v65 = v60 > 3;
                else
                  v65 = 1;
                if (v65)
                {
                  if (v60 != 21)
                    goto LABEL_116;
                  if (*(_BYTE *)(*(_QWORD *)v59 + 8) != 15)
                    goto LABEL_116;
                  v66 = *(_QWORD *)(*(_QWORD *)(v59 + 24) + 112);
                  if (!v66)
                    goto LABEL_116;
                  v67 = *(_DWORD *)(v59 + 32) + 2;
                  if (v67 >= *(_DWORD *)(v66 + 8))
                    goto LABEL_116;
                  v68 = *(_QWORD *)(v66 + 8 * v67 + 40);
                  if (!v68 || (*(_BYTE *)(v68 + 20) & 0x20) == 0)
                    goto LABEL_116;
                }
                else
                {
                  v69 = *(_DWORD *)(v59 + 32);
                  v70 = v69 & 0x30;
                  v71 = (v69 & 0xFu) - 7 < 2 || v70 == 16;
                  if (v71 || v70 == 32)
                  {
                    if ((v69 & 0x1C00) != 0)
                      goto LABEL_116;
                  }
                  else if ((v69 & 0x1CC0) != 0x80)
                  {
                    goto LABEL_116;
                  }
                }
              }
              v56 += 8;
            }
            while (8 * v122 != v56);
          }
        }
        sub_1C4774CC4((_DWORD *)*v19);
        v99 = v108 > 0x29 || ((1 << v108) & 0x2A90000AA00) == 0;
LABEL_180:
        v30 = (uint64_t)llvm::ConstantInt::get(v98, v99, 0);
        v96 = 0;
        goto LABEL_182;
      }
      if (v112 >= 0x41)
      {
        v100 = 0;
        v101 = ((unint64_t)v112 + 63) >> 6;
        do
        {
          v65 = v101-- < 1;
          if (v65)
            break;
          v102 = v111[v101];
          v100 += __clz(v102);
        }
        while (!v102);
        v103 = v112 | 0xFFFFFFC0;
        if ((v112 & 0x3F) == 0)
          v103 = 0;
        if (v112 - v100 - v103 > 0x40)
          goto LABEL_70;
        v46 = *v111;
      }
      if (v46 >= (unint64_t)v124)
        goto LABEL_70;
      if (v110 >= 0x41)
      {
        v104 = 0;
        v105 = ((unint64_t)v110 + 63) >> 6;
        do
        {
          v65 = v105-- < 1;
          if (v65)
            break;
          v106 = v109[v105];
          v104 += __clz(v106);
        }
        while (!v106);
        v107 = v110 | 0xFFFFFFC0;
        if ((v110 & 0x3F) == 0)
          v107 = 0;
        if (v110 - v104 - v107 > 0x40)
          goto LABEL_70;
        v48 = *v109;
      }
      if (v48 >= (unint64_t)v121)
        goto LABEL_70;
      sub_1C4774CC4((_DWORD *)*v19);
      v34 = v18 > 0x29 || ((1 << v18) & 0x2A90000AA00) == 0;
LABEL_35:
      v30 = (uint64_t)llvm::ConstantInt::get(v35, v34, 0);
      goto LABEL_188;
    }
LABEL_57:
    v29 = v114 + 3;
    goto LABEL_58;
  }
  return 0;
}

unsigned __int8 *sub_1C4E78354(uint64_t a1, _BYTE *a2, const llvm::APInt *a3, uint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t ***v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  llvm::Value **True;
  unsigned __int8 *result;
  llvm::Type *v14;
  const llvm::APInt *v15;
  unsigned __int8 *v16;
  llvm::Value **False;
  llvm::Constant *v18;
  const llvm::DataLayout *v19;
  llvm::DSOLocalEquivalent **v20;
  const llvm::DataLayout *v21;
  llvm::DSOLocalEquivalent **v22;
  llvm::Type *v23;
  llvm::Constant *AllOnesValue;
  const llvm::DataLayout *v25;
  llvm::DSOLocalEquivalent **v26;
  char v27;
  char v28;
  char v29;
  char v30;

  if (!a5)
    return 0;
  if (a2[16] != 85)
    __asm { BR              X10 }
  v8 = (a5 - 1);
  v9 = (uint64_t ***)*((_QWORD *)a2 - 12);
  v10 = (unsigned __int8 *)*((_QWORD *)a2 - 8);
  v11 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
  True = llvm::ConstantInt::getTrue(*v9, (llvm::Type *)a2, a3);
  result = (unsigned __int8 *)sub_1C4E7A3E0(a1, v10, (unsigned __int8 *)a3, (uint64_t)v9, a4, v8, (uint64_t)True);
  if (result)
  {
    v16 = result;
    False = llvm::ConstantInt::getFalse(*v9, v14, v15);
    result = (unsigned __int8 *)sub_1C4E7A3E0(a1, v11, (unsigned __int8 *)a3, (uint64_t)v9, a4, v8, (uint64_t)False);
    if (result)
    {
      v18 = (llvm::Constant *)result;
      if (v16 == result)
        return v16;
      if ((((_DWORD)(*v9)[1] & 0xFE) == 18) != ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 18))
        return 0;
      if ((result[16] > 0x14u
         || (llvm::Constant::isNullValue((llvm::Constant *)result) & 1) == 0
         && (sub_1C4E71060((uint64_t)&v30, v18) & 1) == 0
         || !sub_1C4F8BD90((uint64_t)v16, (uint64_t)v9, 0)
         || (result = (unsigned __int8 *)sub_1C4E640C8((llvm *)v9, (llvm::Constant *)v16, a4, v8, v19, v20)) == 0)
        && (!sub_1C4D89CC8((uint64_t)&v28, (llvm::Constant *)v16)
         || !sub_1C4F8BD90((uint64_t)v18, (uint64_t)v9, 0)
         || (result = (unsigned __int8 *)sub_1C4E65634((llvm *)v9, v18, a4, v8, v21, v22)) == 0))
      {
        if (!sub_1C4D89CC8((uint64_t)&v27, v18)
          || v16[16] > 0x14u
          || (llvm::Constant::isNullValue((llvm::Constant *)v16) & 1) == 0
          && (sub_1C4E71060((uint64_t)&v29, (llvm::Constant *)v16) & 1) == 0)
        {
          return 0;
        }
        AllOnesValue = llvm::Constant::getAllOnesValue((llvm::Constant *)*v9, v23);
        result = (unsigned __int8 *)sub_1C4E661DC((llvm *)v9, AllOnesValue, a4, v8, v25, v26);
        if (!result)
          return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1C4E785F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t result;
  _OWORD v25[2];
  __int128 v26;

  if (a5)
  {
    if (*(_BYTE *)(a2 + 16) != 83)
      __asm { BR              X10 }
    if (sub_1C4E71C9C(a3, (const llvm::Instruction *)a2, *(llvm::DominatorTree **)(a4 + 16)))
    {
      v11 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = (a5 - 1);
        v16 = 32 * v11;
        while (1)
        {
          v17 = *(_DWORD *)(a2 + 20);
          if ((v17 & 0x40000000) != 0)
            v18 = *(_QWORD *)(a2 - 8);
          else
            v18 = a2 - 32 * (v17 & 0x7FFFFFF);
          v19 = *(_QWORD *)(v18 + 32 * *(unsigned int *)(a2 + 60) + v12);
          v20 = *(_QWORD *)(v19 + 40);
          if (v20 == v19 + 40)
          {
            v21 = 0;
          }
          else
          {
            if (v20)
              v21 = v20 - 24;
            else
              v21 = 0;
            if (*(unsigned __int8 *)(v21 + 16) - 29 >= 0xB)
              v21 = 0;
          }
          v22 = *(_QWORD *)(v18 + v13);
          if (v22 == a2)
          {
            result = v14;
          }
          else
          {
            v23 = *(_OWORD *)(a4 + 32);
            v25[1] = *(_OWORD *)(a4 + 16);
            v26 = v23;
            v25[0] = *(_OWORD *)a4;
            *(_QWORD *)&v26 = v21;
            result = sub_1C4E6D894(a1, v22, a3, v25, v15);
            if (!result)
              return result;
            if (v14 && result != v14)
              return 0;
          }
          v13 += 32;
          v12 += 8;
          v14 = result;
          if (v16 == v13)
            return result;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C4E787F4(_QWORD **a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 43
      && ((v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (v9 = *(uint64_t **)(a2 - 8))
        : (v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (v10 = *v9) != 0))
    {
      **a1 = v10;
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

llvm::Value **sub_1C4E78860(int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t **v8;
  llvm::Type *v9;
  const llvm::APInt *v10;
  uint64_t **v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  BOOL v17;
  llvm::APInt **v19;
  uint64_t v20;
  llvm::APInt **v21;
  llvm::APInt **v22;
  uint64_t v23;
  llvm::APInt **v24;
  uint64_t *v25;
  uint64_t *v26;
  unsigned int v27;
  llvm::Value **False;
  uint64_t *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  int v33;
  _QWORD *v34;
  int v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  llvm::APInt **v40;
  uint64_t v41;
  llvm::APInt **v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  llvm::APInt *v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  llvm::APInt *v53;
  unsigned int v54;
  llvm::APInt **v55;
  uint64_t v56;
  llvm::APInt **v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t ***v75;
  unsigned int v76;
  unint64_t v77;
  char *v78;
  unint64_t v79;
  unsigned int v80;
  uint64_t v81;
  BOOL v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t ***v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  unsigned int v95;
  char *v96;
  int v97;
  llvm::APInt **v100;
  uint64_t v101;
  llvm::APInt **v102;
  unsigned int v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  size_t v117;
  void *v118;
  unsigned int v119;
  char *v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  _QWORD v125[2];
  void *__src;
  unsigned int v127;
  char *v128;
  unsigned int v129;
  uint64_t v130;
  llvm::APInt **v131;
  uint64_t v132;
  _QWORD v133[2];
  llvm::APInt *v134;
  uint64_t v135;
  llvm::APInt *v136;
  uint64_t v137;
  llvm::APInt **v138;
  uint64_t v139;
  llvm::APInt **v140;
  uint64_t v141;
  char v142;

  sub_1C4774CC4(*(_DWORD **)a3);
  v11 = v8;
  v12 = *(unsigned __int8 *)(a2 + 16);
  if (v12 == 5)
  {
    v15 = *(unsigned __int16 *)(a2 + 18);
    if (v15 != 29)
      goto LABEL_50;
    v16 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v13 = *v16;
    v14 = v16[4];
    if (v13)
      v17 = v14 == a3;
    else
      v17 = 0;
    if (v17)
      goto LABEL_14;
    goto LABEL_11;
  }
  if (v12 != 57)
    goto LABEL_46;
  v13 = *(_QWORD *)(a2 - 64);
  v14 = *(_QWORD *)(a2 - 32);
  if (!v13 || v14 != a3)
  {
LABEL_11:
    if (!v14)
      goto LABEL_66;
    v17 = v13 == a3;
    v13 = v14;
    if (!v17)
      goto LABEL_46;
  }
LABEL_14:
  if (a1 == 35)
    return llvm::ConstantInt::getTrue(v8, v9, v10);
  if (a1 == 36)
    return llvm::ConstantInt::getFalse(v8, v9, v10);
  if ((a1 - 39) <= 1)
  {
    v19 = (llvm::APInt **)a4[3];
    v20 = a4[4];
    v21 = (llvm::APInt **)a4[2];
    if (!v20 || !*(_QWORD *)(v20 + 40))
    {
      if (*(unsigned __int8 *)(a3 + 16) < 0x1Cu || (v20 = a3, !*(_QWORD *)(a3 + 40)))
        v20 = 0;
    }
    v137 = *a4;
    v138 = v19;
    v139 = v20;
    v140 = v21;
    v141 = 0;
    v142 = 1;
    sub_1C4F83784(a3, 0, &v137, &v130);
    v22 = (llvm::APInt **)a4[3];
    v23 = a4[4];
    v24 = (llvm::APInt **)a4[2];
    if (!v23 || !*(_QWORD *)(v23 + 40))
    {
      if (*(unsigned __int8 *)(v13 + 16) < 0x1Cu || (v23 = v13, !*(_QWORD *)(v13 + 40)))
        v23 = 0;
    }
    v137 = *a4;
    v138 = v22;
    v139 = v23;
    v140 = v24;
    v141 = 0;
    v142 = 1;
    sub_1C4F83784(v13, 0, &v137, &v122);
    v25 = (uint64_t *)(v130 + 8 * (((_DWORD)v131 - 1) >> 6));
    if (v131 < 0x41)
      v25 = &v130;
    if ((((unint64_t)*v25 >> (v131 - 1)) & 1) == 0)
      goto LABEL_31;
    v26 = &v124;
    v27 = LODWORD(v125[0]) - 1;
    if (LODWORD(v125[0]) >= 0x41)
      v26 = (uint64_t *)(v124 + 8 * (v27 >> 6));
    if ((((unint64_t)*v26 >> v27) & 1) != 0)
    {
      if (a1 != 40)
      {
LABEL_30:
        False = llvm::ConstantInt::getFalse(v11, v9, v10);
LABEL_39:
        v13 = (uint64_t)False;
        v33 = 0;
        goto LABEL_40;
      }
    }
    else
    {
LABEL_31:
      v29 = &v132;
      v30 = LODWORD(v133[0]) - 1;
      if (LODWORD(v133[0]) >= 0x41)
        v29 = (uint64_t *)(v132 + 8 * (v30 >> 6));
      if ((((unint64_t)*v29 >> v30) & 1) == 0)
      {
        v31 = (_DWORD)v123 - 1;
        v32 = &v122;
        if (v123 >= 0x41)
          v32 = (uint64_t *)(v122 + 8 * (v31 >> 6));
        if ((((unint64_t)*v32 >> v31) & 1) == 0)
        {
          v33 = 1;
LABEL_40:
          if (LODWORD(v125[0]) >= 0x41 && v124)
            MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
          if (v123 >= 0x41 && v122)
            MEMORY[0x1CAA32F9C](v122, 0x1000C8000313F17);
          if (LODWORD(v133[0]) >= 0x41 && v132)
            MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
          if (v131 >= 0x41 && v130)
            MEMORY[0x1CAA32F9C](v130, 0x1000C8000313F17);
          if (!v33)
            return (llvm::Value **)v13;
          v12 = *(unsigned __int8 *)(a2 + 16);
          goto LABEL_46;
        }
      }
      if (a1 == 40)
        goto LABEL_30;
    }
    False = llvm::ConstantInt::getTrue(v11, v9, v10);
    goto LABEL_39;
  }
LABEL_46:
  if (v12 == 56)
  {
    if (*(_QWORD *)(a2 - 32) == a3)
    {
      v35 = 56;
      goto LABEL_58;
    }
    v34 = (_QWORD *)(a2 - 64);
    v35 = 56;
LABEL_55:
    if (*v34 != a3)
    {
LABEL_60:
      if (v35 != 5)
        goto LABEL_66;
      v15 = *(unsigned __int16 *)(a2 + 18);
      goto LABEL_62;
    }
LABEL_58:
    if (a1 == 37)
      return llvm::ConstantInt::getTrue(v11, v9, v10);
    if (a1 == 34)
      return llvm::ConstantInt::getFalse(v11, v9, v10);
    goto LABEL_60;
  }
  if (v12 == 50)
  {
    v36 = (_QWORD *)(a2 - 32);
    goto LABEL_65;
  }
  if (v12 != 5)
    goto LABEL_66;
  v15 = *(unsigned __int16 *)(a2 + 18);
LABEL_50:
  if (v15 == 28)
  {
    v34 = (_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v35 = 5;
    if (v34[4] == a3)
      goto LABEL_58;
    goto LABEL_55;
  }
LABEL_62:
  if (v15 != 22)
    goto LABEL_66;
  v36 = (_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
LABEL_65:
  if (*v36 == a3)
  {
    switch(a1)
    {
      case ' ':
      case '"':
      case '#':
        return llvm::ConstantInt::getFalse(v11, v9, v10);
      case '!':
      case '$':
      case '%':
        return llvm::ConstantInt::getTrue(v11, v9, v10);
      case '&':
      case '\'':
        v40 = (llvm::APInt **)a4[3];
        v41 = a4[4];
        v42 = (llvm::APInt **)a4[2];
        if (!v41 || !*(_QWORD *)(v41 + 40))
        {
          if (*(unsigned __int8 *)(a3 + 16) < 0x1Cu || (v41 = a3, !*(_QWORD *)(a3 + 40)))
            v41 = 0;
        }
        v137 = *a4;
        v138 = v40;
        v139 = v41;
        v140 = v42;
        v141 = 0;
        v142 = 1;
        sub_1C4F83784(a3, 0, &v137, &v130);
        v43 = v131;
        v44 = (uint64_t *)(v130 + 8 * (((_DWORD)v131 - 1) >> 6));
        if (v131 < 0x41)
          v44 = &v130;
        v45 = 1 << (v131 - 1);
        v46 = *v44;
        if (LODWORD(v133[0]) >= 0x41 && v132)
        {
          MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
          v43 = v131;
        }
        v47 = v45 & v46;
        if (v43 >= 0x41 && v130)
          MEMORY[0x1CAA32F9C](v130, 0x1000C8000313F17);
        if (!v47)
          break;
        return llvm::ConstantInt::getFalse(v11, v9, v10);
      case '(':
      case ')':
        v100 = (llvm::APInt **)a4[3];
        v101 = a4[4];
        v102 = (llvm::APInt **)a4[2];
        if (!v101 || !*(_QWORD *)(v101 + 40))
        {
          if (*(unsigned __int8 *)(a3 + 16) < 0x1Cu || (v101 = a3, !*(_QWORD *)(a3 + 40)))
            v101 = 0;
        }
        v137 = *a4;
        v138 = v100;
        v139 = v101;
        v140 = v102;
        v141 = 0;
        v142 = 1;
        sub_1C4F83784(a3, 0, &v137, &v130);
        v103 = v131;
        v104 = (uint64_t *)(v130 + 8 * (((_DWORD)v131 - 1) >> 6));
        if (v131 < 0x41)
          v104 = &v130;
        v105 = 1 << (v131 - 1);
        v106 = *v104;
        if (LODWORD(v133[0]) >= 0x41 && v132)
        {
          MEMORY[0x1CAA32F9C](v132, 0x1000C8000313F17);
          v103 = v131;
        }
        v107 = v105 & v106;
        if (v103 >= 0x41 && v130)
          MEMORY[0x1CAA32F9C](v130, 0x1000C8000313F17);
        if (v107)
          return llvm::ConstantInt::getTrue(v11, v9, v10);
        break;
      default:
        break;
    }
  }
LABEL_66:
  v37 = *(unsigned __int8 *)(a2 + 16);
  v38 = -2;
  if (v37 <= 0x31)
  {
    if (v37 != 5)
    {
      if (v37 != 47)
        goto LABEL_97;
      goto LABEL_94;
    }
    v39 = *(unsigned __int16 *)(a2 + 18);
    if (v39 != 22)
      goto LABEL_78;
    v38 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
LABEL_75:
    if (*(_QWORD *)(a2 + 32 * v38) == a3)
    {
      if (a1 == 34)
        return llvm::ConstantInt::getFalse(v11, v9, v10);
      if (a1 == 37)
        return llvm::ConstantInt::getTrue(v11, v9, v10);
    }
    if (v37 != 5)
      goto LABEL_97;
    v39 = *(unsigned __int16 *)(a2 + 18);
LABEL_78:
    if (v39 != 26)
    {
LABEL_83:
      if (v39 != 19)
      {
        v136 = 0;
        v137 = a3;
        v138 = &v136;
        v139 = 0;
LABEL_107:
        if (v39 != 26)
          goto LABEL_114;
        v48 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        if (*(_QWORD *)v48 != a3
          || (sub_1C4D8A004((uint64_t)&v138, *(llvm::Constant **)(v48 + 32)) & 1) == 0)
        {
          goto LABEL_114;
        }
        goto LABEL_110;
      }
      v38 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
LABEL_94:
      if (*(_QWORD *)(a2 + 32 * v38) != a3)
        goto LABEL_97;
LABEL_95:
      if (a1 != 37)
      {
        if (a1 != 34)
          goto LABEL_97;
        return llvm::ConstantInt::getFalse(v11, v9, v10);
      }
      return llvm::ConstantInt::getTrue(v11, v9, v10);
    }
    v38 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
LABEL_80:
    if (*(_QWORD *)(a2 + 32 * v38) == a3)
      goto LABEL_95;
    if (v37 != 5)
      goto LABEL_97;
    v39 = *(unsigned __int16 *)(a2 + 18);
    goto LABEL_83;
  }
  if (v37 == 50)
    goto LABEL_75;
  if (v37 == 54)
    goto LABEL_80;
LABEL_97:
  v136 = 0;
  v137 = a3;
  v138 = &v136;
  v139 = 0;
  if (v37 != 54)
  {
    if (v37 != 5)
      goto LABEL_114;
    v39 = *(unsigned __int16 *)(a2 + 18);
    goto LABEL_107;
  }
  if (*(_QWORD *)(a2 - 64) != a3 || !sub_1C4D89F84((uint64_t)&v138, *(unsigned __int8 **)(a2 - 32)))
    goto LABEL_114;
LABEL_110:
  v49 = v136;
  v50 = *((_DWORD *)v136 + 2);
  if (v50 >= 0x41)
  {
    if (v50 - llvm::APInt::countLeadingZerosSlowCase(v136) > 0x40)
      goto LABEL_126;
    v49 = *(llvm::APInt **)v49;
  }
  if (*(_QWORD *)v49)
    goto LABEL_126;
LABEL_114:
  v130 = a3;
  v131 = &v136;
  v132 = 0;
  v51 = *(unsigned __int8 *)(a2 + 16);
  if (v51 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 19)
      goto LABEL_130;
    v52 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    if (*(_QWORD *)v52 != a3 || !sub_1C4D8A004((uint64_t)&v131, *(llvm::Constant **)(v52 + 32)))
      goto LABEL_130;
  }
  else if (v51 != 47
         || *(_QWORD *)(a2 - 64) != a3
         || (sub_1C4D89F84((uint64_t)&v131, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
  {
    goto LABEL_130;
  }
  v53 = v136;
  v54 = *((_DWORD *)v136 + 2);
  if (v54 < 0x41)
    goto LABEL_125;
  if (v54 - llvm::APInt::countLeadingZerosSlowCase(v136) <= 0x40)
  {
    v53 = *(llvm::APInt **)v53;
LABEL_125:
    if (*(_QWORD *)v53 == 1)
      goto LABEL_130;
  }
LABEL_126:
  v55 = (llvm::APInt **)a4[3];
  v56 = a4[4];
  v57 = (llvm::APInt **)a4[2];
  if (!v56 || !*(_QWORD *)(v56 + 40))
  {
    if (*(unsigned __int8 *)(a3 + 16) < 0x1Cu || (v56 = a3, !*(_QWORD *)(a3 + 40)))
      v56 = 0;
  }
  v137 = *a4;
  v138 = v55;
  v139 = v56;
  v140 = v57;
  v141 = 0;
  v142 = 1;
  if (sub_1C4F84D74(a3, 0, (uint64_t)&v137))
  {
    switch(a1)
    {
      case ' ':
      case '#':
        return llvm::ConstantInt::getFalse(v11, v9, v10);
      case '!':
      case '$':
        return llvm::ConstantInt::getTrue(v11, v9, v10);
      default:
        break;
    }
  }
LABEL_130:
  v135 = 0;
  v134 = 0;
  v137 = a3;
  v138 = (llvm::APInt **)&v135;
  v139 = 0;
  v140 = &v134;
  v141 = 0;
  v58 = *(unsigned __int8 *)(a2 + 16);
  if (v58 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 19)
      goto LABEL_156;
    v61 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v62 = *(unsigned __int8 *)(v61 + 16);
    if (v62 == 5)
    {
      if (*(_WORD *)(v61 + 18) != 17)
        goto LABEL_156;
      v64 = v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF);
      if (*(_QWORD *)v64 != a3 || !sub_1C4D8A004((uint64_t)&v138, *(llvm::Constant **)(v64 + 32)))
        goto LABEL_156;
    }
    else if (v62 != 45
           || *(_QWORD *)(v61 - 64) != a3
           || (sub_1C4D89F84((uint64_t)&v138, *(unsigned __int8 **)(v61 - 32)) & 1) == 0)
    {
      goto LABEL_156;
    }
    if ((sub_1C4D8A004((uint64_t)&v140, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)goto LABEL_156;
  }
  else
  {
    if (v58 != 47)
      goto LABEL_156;
    v59 = *(_QWORD *)(a2 - 64);
    v60 = *(unsigned __int8 *)(v59 + 16);
    if (v60 == 5)
    {
      if (*(_WORD *)(v59 + 18) != 17)
        goto LABEL_156;
      v63 = v59 - 32 * (*(_DWORD *)(v59 + 20) & 0x7FFFFFF);
      if (*(_QWORD *)v63 != a3 || !sub_1C4D8A004((uint64_t)&v138, *(llvm::Constant **)(v63 + 32)))
        goto LABEL_156;
    }
    else if (v60 != 45
           || *(_QWORD *)(v59 - 64) != a3
           || (sub_1C4D89F84((uint64_t)&v138, *(unsigned __int8 **)(v59 - 32)) & 1) == 0)
    {
      goto LABEL_156;
    }
    if (!sub_1C4D89F84((uint64_t)&v140, *(unsigned __int8 **)(a2 - 32)))
      goto LABEL_156;
  }
  v65 = *(unsigned int *)(v135 + 8);
  if (v65 > 0x40)
  {
    v108 = ((unint64_t)(v65 + 63) >> 3) & 0x3FFFFFF8;
    while (v108)
    {
      v109 = *(_QWORD *)(*(_QWORD *)v135 - 8 + v108);
      v110 = *(_QWORD *)(*(_QWORD *)v134 - 8 + v108);
      v108 -= 8;
      v66 = v109 > v110;
      if (v109 != v110)
        goto LABEL_154;
    }
    goto LABEL_238;
  }
  v66 = *(_QWORD *)v135 > *(_QWORD *)v134;
LABEL_154:
  if (!v66)
    goto LABEL_238;
LABEL_156:
  v130 = a3;
  v131 = (llvm::APInt **)&v135;
  v132 = 0;
  v133[0] = &v134;
  v133[1] = 0;
  v67 = *(unsigned __int8 *)(a2 + 16);
  if (v67 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 26)
      goto LABEL_186;
    v70 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v71 = *(unsigned __int8 *)(v70 + 16);
    if (v71 == 5)
    {
      if (*(_WORD *)(v70 + 18) != 17)
        goto LABEL_186;
      v73 = v70 - 32 * (*(_DWORD *)(v70 + 20) & 0x7FFFFFF);
      if (*(_QWORD *)v73 != a3 || !sub_1C4D8A004((uint64_t)&v131, *(llvm::Constant **)(v73 + 32)))
        goto LABEL_186;
    }
    else if (v71 != 45
           || *(_QWORD *)(v70 - 64) != a3
           || (sub_1C4D89F84((uint64_t)&v131, *(unsigned __int8 **)(v70 - 32)) & 1) == 0)
    {
      goto LABEL_186;
    }
    if (!sub_1C4D8A004((uint64_t)v133, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)))goto LABEL_186;
  }
  else
  {
    if (v67 != 54)
      goto LABEL_186;
    v68 = *(_QWORD *)(a2 - 64);
    v69 = *(unsigned __int8 *)(v68 + 16);
    if (v69 == 5)
    {
      if (*(_WORD *)(v68 + 18) != 17)
        goto LABEL_186;
      v72 = v68 - 32 * (*(_DWORD *)(v68 + 20) & 0x7FFFFFF);
      if (*(_QWORD *)v72 != a3 || !sub_1C4D8A004((uint64_t)&v131, *(llvm::Constant **)(v72 + 32)))
        goto LABEL_186;
    }
    else if (v69 != 45
           || *(_QWORD *)(v68 - 64) != a3
           || (sub_1C4D89F84((uint64_t)&v131, *(unsigned __int8 **)(v68 - 32)) & 1) == 0)
    {
      goto LABEL_186;
    }
    if ((sub_1C4D89F84((uint64_t)v133, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
    {
LABEL_186:
      v83 = 0;
      goto LABEL_187;
    }
  }
  v74 = v135;
  v75 = (uint64_t ***)v134;
  v76 = *((_DWORD *)v134 + 2);
  v127 = v76;
  if (v76 <= 0x40)
  {
    v77 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v76;
    if (!v76)
      LOBYTE(v77) = 0;
    v78 = (char *)(v77 & 1);
    __src = v78;
    v129 = v76;
    goto LABEL_182;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
  v75 = (uint64_t ***)v134;
  v76 = v127;
  v129 = v127;
  if (v127 <= 0x40)
  {
    v78 = (char *)__src;
LABEL_182:
    v128 = v78;
    v79 = v76;
    goto LABEL_183;
  }
  v128 = (char *)operator new[]();
  v79 = v129;
  memcpy(v128, __src, (((unint64_t)v129 + 63) >> 3) & 0x3FFFFFF8);
LABEL_183:
  v80 = sub_1C47EE5B8(v75, v79);
  sub_1C4888094((uint64_t)&v128, v80);
  v81 = *(unsigned int *)(v74 + 8);
  if (v81 > 0x40)
  {
    v111 = ((unint64_t)(v81 + 63) >> 3) & 0x3FFFFFF8;
    while (v111)
    {
      v112 = *(_QWORD *)(*(_QWORD *)v74 - 8 + v111);
      v113 = *(_QWORD *)&v128[v111 - 8];
      v111 -= 8;
      if (v112 != v113)
      {
        if (v112 <= v113)
          goto LABEL_185;
        goto LABEL_276;
      }
    }
    goto LABEL_185;
  }
  if (*(_QWORD *)v74 <= (unint64_t)v128)
  {
LABEL_185:
    v82 = 1;
    goto LABEL_231;
  }
LABEL_276:
  v83 = 1;
LABEL_187:
  v122 = a3;
  v123 = &v135;
  v124 = 0;
  v125[0] = &v134;
  v125[1] = 0;
  v84 = *(unsigned __int8 *)(a2 + 16);
  if (v84 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 19)
      goto LABEL_229;
    v87 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v88 = *(unsigned __int8 *)(v87 + 16);
    if (v88 == 5)
    {
      if (*(_WORD *)(v87 + 18) != 25)
        goto LABEL_229;
      v90 = v87 - 32 * (*(_DWORD *)(v87 + 20) & 0x7FFFFFF);
      if (*(_QWORD *)v90 != a3 || !sub_1C4D8A004((uint64_t)&v123, *(llvm::Constant **)(v90 + 32)))
        goto LABEL_229;
    }
    else if (v88 != 53
           || *(_QWORD *)(v87 - 64) != a3
           || (sub_1C4D89F84((uint64_t)&v123, *(unsigned __int8 **)(v87 - 32)) & 1) == 0)
    {
      goto LABEL_229;
    }
    if (!sub_1C4D8A004((uint64_t)v125, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)))goto LABEL_229;
  }
  else
  {
    if (v84 != 47)
      goto LABEL_229;
    v85 = *(_QWORD *)(a2 - 64);
    v86 = *(unsigned __int8 *)(v85 + 16);
    if (v86 == 5)
    {
      if (*(_WORD *)(v85 + 18) != 25)
        goto LABEL_229;
      v89 = v85 - 32 * (*(_DWORD *)(v85 + 20) & 0x7FFFFFF);
      if (*(_QWORD *)v89 != a3 || !sub_1C4D8A004((uint64_t)&v123, *(llvm::Constant **)(v89 + 32)))
        goto LABEL_229;
    }
    else if (v86 != 53
           || *(_QWORD *)(v85 - 64) != a3
           || (sub_1C4D89F84((uint64_t)&v123, *(unsigned __int8 **)(v85 - 32)) & 1) == 0)
    {
      goto LABEL_229;
    }
    if ((sub_1C4D89F84((uint64_t)v125, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
    {
LABEL_229:
      if ((v83 & 1) == 0)
        return 0;
      v82 = 0;
      goto LABEL_231;
    }
  }
  v91 = (uint64_t ***)v135;
  LODWORD(v92) = *(_DWORD *)(v135 + 8);
  v119 = v92;
  if (v92 <= 0x40)
  {
    v93 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v92;
    if (!(_DWORD)v92)
      LOBYTE(v93) = 0;
    v94 = (char *)(v93 & 1);
    v118 = v94;
    v121 = v92;
    goto LABEL_213;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v118, 1, 0);
  v91 = (uint64_t ***)v135;
  v92 = v119;
  v121 = v119;
  if (v119 <= 0x40)
  {
    v94 = (char *)v118;
LABEL_213:
    v120 = v94;
    v92 = v92;
    goto LABEL_214;
  }
  v117 = (((unint64_t)v119 + 63) >> 3) & 0x3FFFFFF8;
  v120 = (char *)operator new[]();
  memcpy(v120, v118, v117);
LABEL_214:
  v95 = sub_1C47EE5B8(v91, v92);
  sub_1C4888094((uint64_t)&v120, v95);
  if (v121 > 0x40)
  {
    v96 = v120;
    v114 = (((unint64_t)v121 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v114)
      {
        v97 = 0;
        goto LABEL_218;
      }
      v115 = *(_QWORD *)&v120[v114 - 8];
      v116 = *(_QWORD *)(*(_QWORD *)v134 - 8 + v114);
      v114 -= 8;
    }
    while (v115 == v116);
    if (v115 > v116)
      v97 = 1;
    else
      v97 = -1;
  }
  else
  {
    v96 = v120;
    if ((unint64_t)v120 < *(_QWORD *)v134)
      v97 = -1;
    else
      v97 = (unint64_t)v120 > *(_QWORD *)v134;
  }
LABEL_218:
  v82 = v97 < 1;
  if (v121 >= 0x41 && v96 != 0)
    MEMORY[0x1CAA32F9C]();
  if (v119 >= 0x41 && v118)
    MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
  if (v83)
  {
LABEL_231:
    if (v129 >= 0x41 && v128)
      MEMORY[0x1CAA32F9C](v128, 0x1000C8000313F17);
    if (v127 >= 0x41)
    {
      if (__src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    }
    if (!v82)
      return 0;
    goto LABEL_238;
  }
  if (v97 > 0)
    return 0;
LABEL_238:
  if (a1 == 37)
    return llvm::ConstantInt::getTrue(v11, v9, v10);
  if (a1 == 34)
    return llvm::ConstantInt::getFalse(v11, v9, v10);
  return 0;
}

uint64_t sub_1C4E798EC(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  BOOL v4;
  int v5;
  unsigned int v7;
  unint64_t v8;
  int v9;
  int v11;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 < 0x1C)
  {
    if (v1 == 5)
    {
      v1 = *(unsigned __int16 *)(a1 + 18);
      HIDWORD(v8) = v1 - 13;
      LODWORD(v8) = v1 - 13;
      v7 = v8 >> 1;
      v4 = v7 > 6;
      v9 = (1 << v7) & 0x47;
      if (!v4 && v9 != 0)
        goto LABEL_12;
    }
LABEL_14:
    v11 = 0;
    return v11 & v1;
  }
  HIDWORD(v3) = v1 - 41;
  LODWORD(v3) = v1 - 41;
  v2 = v3 >> 1;
  v4 = v2 > 6;
  v5 = (1 << v2) & 0x47;
  if (v4 || v5 == 0)
    goto LABEL_14;
  v1 -= 28;
LABEL_12:
  if (v1 == 13)
    v1 = (*(unsigned __int8 *)(a1 + 17) >> 2) & 1;
  else
    v1 = 0;
  v11 = 1;
  return v11 & v1;
}

BOOL sub_1C4E79980(uint64_t a1, llvm::Constant *a2)
{
  _BOOL4 v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  int v11;
  llvm::APFloatBase *SplatValue;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int8x8_t *v17;
  int8x8_t v18;
  uint8x8_t v19;
  int v20;
  llvm::Type *v21;
  int8x8_t *AggregateElement;
  int v23;
  uint64_t v24;
  uint8x8_t v25;
  int v26;
  unint64_t v27;
  int8x8_t *v28;
  int8x8_t v29;
  uint8x8_t v30;
  int v31;
  unint64_t v32;
  int8x8_t *v33;
  int8x8_t v34;
  uint8x8_t v35;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 16)
  {
    v5 = *((unsigned int *)a2 + 8);
    if (v5 > 0x40)
    {
      v15 = 0;
      v16 = (unint64_t)(v5 + 63) >> 6;
      v17 = (int8x8_t *)*((_QWORD *)a2 + 3);
      do
      {
        v18 = *v17++;
        v19 = (uint8x8_t)vcnt_s8(v18);
        v19.i16[0] = vaddlv_u8(v19);
        v15 += v19.i32[0];
        --v16;
      }
      while (v16);
      return v15 == 1;
    }
    else
    {
      v6 = *((_QWORD *)a2 + 3);
      return v6 && (v6 & (v6 - 1)) == 0;
    }
  }
  else
  {
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v9 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
    else
      v9 = 0;
    v10 = !v9 || v4 > 0x14;
    v11 = v10;
    if (!v10)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((_BYTE *)SplatValue + 16) == 16)
      {
        v13 = *((unsigned int *)SplatValue + 8);
        if (v13 > 0x40)
        {
          v31 = 0;
          v32 = (unint64_t)(v13 + 63) >> 6;
          v33 = (int8x8_t *)*((_QWORD *)SplatValue + 3);
          do
          {
            v34 = *v33++;
            v35 = (uint8x8_t)vcnt_s8(v34);
            v35.i16[0] = vaddlv_u8(v35);
            v31 += v35.i32[0];
            --v32;
          }
          while (v32);
          v2 = v31 == 1;
        }
        else
        {
          v14 = *((_QWORD *)SplatValue + 3);
          if (v14)
            v2 = (v14 & (v14 - 1)) == 0;
          else
            v2 = 0;
        }
      }
      else
      {
        if (*(_BYTE *)(v8 + 8) == 18)
        {
          v20 = *(_DWORD *)(v8 + 32);
          if (v20)
          {
            v21 = 0;
            v2 = 0;
            while (1)
            {
              AggregateElement = (int8x8_t *)llvm::Constant::getAggregateElement(a2, v21);
              if (!AggregateElement)
                break;
              v23 = AggregateElement[2].u8[0];
              if ((v23 - 11) >= 2)
              {
                if (v23 != 16)
                  break;
                v24 = AggregateElement[4].u32[0];
                if (v24 > 0x40)
                {
                  v26 = 0;
                  v27 = (unint64_t)(v24 + 63) >> 6;
                  v28 = (int8x8_t *)AggregateElement[3];
                  do
                  {
                    v29 = *v28++;
                    v30 = (uint8x8_t)vcnt_s8(v29);
                    v30.i16[0] = vaddlv_u8(v30);
                    v26 += v30.i32[0];
                    --v27;
                  }
                  while (v27);
                  if (v26 != 1)
                    break;
                }
                else
                {
                  v25 = (uint8x8_t)vcnt_s8(AggregateElement[3]);
                  v25.i16[0] = vaddlv_u8(v25);
                  if (v25.u32[0] != 1)
                    break;
                }
                v2 = 1;
              }
              v21 = (llvm::Type *)((_DWORD)v21 + 1);
              if ((_DWORD)v21 == v20)
                return (v11 ^ 1) & v2;
            }
          }
        }
        v2 = 0;
      }
    }
    return (v11 ^ 1) & v2;
  }
}

BOOL sub_1C4E79B78(uint64_t a1, llvm::Constant *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  llvm::APFloatBase *SplatValue;
  uint64_t v9;
  uint64_t v10;
  int v12;
  unint64_t v13;
  int8x8_t *v14;
  int8x8_t v15;
  uint8x8_t v16;
  int v17;
  llvm::Type *v18;
  int8x8_t *AggregateElement;
  int v20;
  uint64_t v21;
  uint8x8_t v22;
  int v23;
  unint64_t v24;
  int8x8_t *v25;
  int8x8_t v26;
  uint8x8_t v27;
  unint64_t v29;
  int8x8_t *v30;
  int8x8_t v31;
  uint8x8_t v32;

  if (a2 && *((_BYTE *)a2 + 16) == 16)
  {
    v3 = *((unsigned int *)a2 + 8);
    if (v3 <= 0x40)
    {
      v4 = *((_QWORD *)a2 + 3);
      return v4 && (v4 & (v4 - 1)) == 0;
    }
    v12 = 0;
    v13 = (unint64_t)(v3 + 63) >> 6;
    v14 = (int8x8_t *)*((_QWORD *)a2 + 3);
    do
    {
      v15 = *v14++;
      v16 = (uint8x8_t)vcnt_s8(v15);
      v16.i16[0] = vaddlv_u8(v16);
      v12 += v16.i32[0];
      --v13;
    }
    while (v13);
    return v12 == 1;
  }
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v7 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
  else
    v7 = 0;
  if (!v7)
    return 0;
  SplatValue = llvm::Constant::getSplatValue(a2, 0);
  if (!SplatValue || *((_BYTE *)SplatValue + 16) != 16)
  {
    if (*(_BYTE *)(v6 + 8) == 18)
    {
      v17 = *(_DWORD *)(v6 + 32);
      if (v17)
      {
        v18 = 0;
        v5 = 0;
        while (1)
        {
          AggregateElement = (int8x8_t *)llvm::Constant::getAggregateElement(a2, v18);
          if (!AggregateElement)
            break;
          v20 = AggregateElement[2].u8[0];
          if ((v20 - 11) >= 2)
          {
            if (v20 != 16)
              return 0;
            v21 = AggregateElement[4].u32[0];
            if (v21 > 0x40)
            {
              v23 = 0;
              v24 = (unint64_t)(v21 + 63) >> 6;
              v25 = (int8x8_t *)AggregateElement[3];
              do
              {
                v26 = *v25++;
                v27 = (uint8x8_t)vcnt_s8(v26);
                v27.i16[0] = vaddlv_u8(v27);
                v23 += v27.i32[0];
                --v24;
              }
              while (v24);
              if (v23 != 1)
                return 0;
            }
            else
            {
              v22 = (uint8x8_t)vcnt_s8(AggregateElement[3]);
              v22.i16[0] = vaddlv_u8(v22);
              if (v22.u32[0] != 1)
                return 0;
            }
            v5 = 1;
          }
          v18 = (llvm::Type *)((_DWORD)v18 + 1);
          if ((_DWORD)v18 == v17)
            return v5;
        }
      }
    }
    return 0;
  }
  v9 = *((unsigned int *)SplatValue + 8);
  if (v9 <= 0x40)
  {
    v10 = *((_QWORD *)SplatValue + 3);
    if (v10)
      return (v10 & (v10 - 1)) == 0;
    return 0;
  }
  v12 = 0;
  v29 = (unint64_t)(v9 + 63) >> 6;
  v30 = (int8x8_t *)*((_QWORD *)SplatValue + 3);
  do
  {
    v31 = *v30++;
    v32 = (uint8x8_t)vcnt_s8(v31);
    v32.i16[0] = vaddlv_u8(v32);
    v12 += v32.i32[0];
    --v29;
  }
  while (v29);
  return v12 == 1;
}

uint64_t sub_1C4E79D4C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned int v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v14;

  result = 0;
  if (a1 && *(_BYTE *)(a1 + 16) == 85)
  {
    result = *(_QWORD *)(a1 - 96);
    v6 = *(unsigned __int8 *)(result + 16);
    if (result)
      v7 = v6 >= 0x1C;
    else
      v7 = 0;
    if (v7 && v6 - 83 >= 0xFFFFFFFE)
    {
      v9 = *(_QWORD *)(result - 64);
      v10 = *(_QWORD *)(result - 32);
      v11 = *(_WORD *)(result + 18) & 0x3F;
      if ((_DWORD)v11 != a2 || v9 != a3 || v10 != a4)
      {
        v14 = dword_1C85F3CEC[v11];
        if (v9 != a4 || v10 != a3 || v14 != a2)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C4E79DC8(_QWORD **a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v12;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 85)
  {
    v3 = 0;
    v6 = *(_QWORD *)(a2 - 96);
    if (!v6 || *(_BYTE *)(v6 + 16) != 81)
      return v3;
    v7 = *(_QWORD *)(a2 - 64);
    v8 = *(_QWORD *)(a2 - 32);
    v9 = *(_QWORD *)(v6 - 64);
    v5 = *(_QWORD *)(v6 - 32);
    if ((v7 != v9 || v8 != v5) && (v7 != v5 || v8 != v9))
      return 0;
    v12 = *(_WORD *)(v6 + 18) & 0x3F;
    if (v7 != v9)
    {
      if (v12 - 32 < 8 || v12 < 0x10)
        return 0;
      if (v12 == 40)
        LOBYTE(v12) = 39;
      else
        LOBYTE(v12) = 38;
    }
    v3 = 0;
    if (!v9 || (v12 & 0x3E) != 0x26)
      return v3;
    **a1 = v9;
    if (v5)
      goto LABEL_35;
    return 0;
  }
  if (v2 != 84)
    return 0;
  v3 = *(_QWORD *)(a2 - 32);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16)
      || *(_QWORD *)(v3 + 24) != *(_QWORD *)(a2 + 72)
      || (*(_BYTE *)(v3 + 33) & 0x20) == 0
      || *(_DWORD *)(v3 + 36) != 274)
    {
      return 0;
    }
    v4 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v3 = *v4;
    if (*v4)
    {
      v5 = v4[4];
      **a1 = v3;
      if (!v5)
        return 0;
LABEL_35:
      *a1[1] = v5;
      return 1;
    }
  }
  return v3;
}

uint64_t sub_1C4E79EE4(_QWORD **a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 85)
  {
    v3 = 0;
    v6 = *(_QWORD *)(a2 - 96);
    if (!v6 || *(_BYTE *)(v6 + 16) != 81)
      return v3;
    v7 = *(_QWORD *)(a2 - 64);
    v8 = *(_QWORD *)(a2 - 32);
    v9 = *(_QWORD *)(v6 - 64);
    v5 = *(_QWORD *)(v6 - 32);
    if ((v7 != v9 || v8 != v5) && (v7 != v5 || v8 != v9))
      return 0;
    v13 = *(_WORD *)(v6 + 18) & 0x3F;
    if (v7 != v9)
    {
      v3 = 0;
      if ((v13 - 32) < 6 || ((1 << v13) & 0x3000000FFFFLL) != 0)
        return v3;
      if (v13 == 38)
        LOBYTE(v13) = 41;
      else
        LOBYTE(v13) = 40;
    }
    v3 = 0;
    if (!v9 || (v13 & 0x3E) != 0x28)
      return v3;
    **a1 = v9;
    if (v5)
      goto LABEL_32;
    return 0;
  }
  if (v2 != 84)
    return 0;
  v3 = *(_QWORD *)(a2 - 32);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16)
      || *(_QWORD *)(v3 + 24) != *(_QWORD *)(a2 + 72)
      || (*(_BYTE *)(v3 + 33) & 0x20) == 0
      || *(_DWORD *)(v3 + 36) != 275)
    {
      return 0;
    }
    v4 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v3 = *v4;
    if (*v4)
    {
      v5 = v4[4];
      **a1 = v3;
      if (!v5)
        return 0;
LABEL_32:
      *a1[1] = v5;
      return 1;
    }
  }
  return v3;
}

uint64_t sub_1C4E7A018(_QWORD **a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 85)
  {
    if (v2 == 84)
    {
      v3 = *(_QWORD *)(a2 - 32);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 16)
          || *(_QWORD *)(v3 + 24) != *(_QWORD *)(a2 + 72)
          || (*(_BYTE *)(v3 + 33) & 0x20) == 0
          || *(_DWORD *)(v3 + 36) != 305)
        {
          return 0;
        }
        v4 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        v3 = *v4;
        if (*v4)
        {
          v5 = v4[4];
          **a1 = v3;
          if (!v5)
            return 0;
          goto LABEL_30;
        }
      }
      return v3;
    }
    return 0;
  }
  v3 = 0;
  v6 = *(_QWORD *)(a2 - 96);
  if (v6 && *(_BYTE *)(v6 + 16) == 81)
  {
    v7 = *(_QWORD *)(a2 - 64);
    v8 = *(_QWORD *)(a2 - 32);
    v9 = *(_QWORD *)(v6 - 64);
    v5 = *(_QWORD *)(v6 - 32);
    if ((v7 != v9 || v8 != v5) && (v7 != v5 || v8 != v9))
      return 0;
    v12 = *(_WORD *)(v6 + 18) & 0x3F;
    if (v7 != v9)
    {
      v3 = 0;
      if (((1 << v12) & 0x3CF0000FFFFLL) != 0)
        return v3;
      if (v12 == 36)
        LOBYTE(v12) = 35;
      else
        LOBYTE(v12) = 34;
    }
    v3 = 0;
    if (v9)
    {
      if ((v12 & 0x3E) == 0x22)
      {
        **a1 = v9;
        if (v5)
        {
LABEL_30:
          *a1[1] = v5;
          return 1;
        }
        return 0;
      }
    }
  }
  return v3;
}

uint64_t sub_1C4E7A140(_QWORD **a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 == 85)
  {
    v3 = 0;
    v6 = *(_QWORD *)(a2 - 96);
    if (!v6 || *(_BYTE *)(v6 + 16) != 81)
      return v3;
    v7 = *(_QWORD *)(a2 - 64);
    v8 = *(_QWORD *)(a2 - 32);
    v9 = *(_QWORD *)(v6 - 64);
    v5 = *(_QWORD *)(v6 - 32);
    if ((v7 != v9 || v8 != v5) && (v7 != v5 || v8 != v9))
      return 0;
    v13 = *(_WORD *)(v6 + 18) & 0x3F;
    if (v7 != v9)
    {
      v3 = 0;
      if (((1 << v13) & 0x3F30000FFFFLL) != 0)
        return v3;
      if (v13 == 34)
        LOBYTE(v13) = 37;
      else
        LOBYTE(v13) = 36;
    }
    v3 = 0;
    if (!v9 || (v13 & 0x3E) != 0x24)
      return v3;
    **a1 = v9;
    if (v5)
      goto LABEL_31;
    return 0;
  }
  if (v2 != 84)
    return 0;
  v3 = *(_QWORD *)(a2 - 32);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16)
      || *(_QWORD *)(v3 + 24) != *(_QWORD *)(a2 + 72)
      || (*(_BYTE *)(v3 + 33) & 0x20) == 0
      || *(_DWORD *)(v3 + 36) != 306)
    {
      return 0;
    }
    v4 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v3 = *v4;
    if (*v4)
    {
      v5 = v4[4];
      **a1 = v3;
      if (!v5)
        return 0;
LABEL_31:
      *a1[1] = v5;
      return 1;
    }
  }
  return v3;
}

BOOL sub_1C4E7A268(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 85)
  {
    if (v2 == 84)
    {
      v3 = *(_QWORD *)(a2 - 32);
      if (v3)
      {
        if (!*(_BYTE *)(v3 + 16) && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a2 + 72) && (*(_BYTE *)(v3 + 33) & 0x20) != 0)
          return *(_DWORD *)(v3 + 36) == 306;
      }
    }
    return 0;
  }
  result = 0;
  v6 = *(_QWORD *)(a2 - 96);
  if (v6 && *(_BYTE *)(v6 + 16) == 81)
  {
    v7 = *(_QWORD *)(a2 - 64);
    v8 = *(_QWORD *)(a2 - 32);
    v9 = *(_QWORD *)(v6 - 64);
    v10 = *(_QWORD *)(v6 - 32);
    v11 = v7 == v9 && v8 == v10;
    if (v11 || (v7 == v10 ? (v12 = v8 == v9) : (v12 = 0), v12))
    {
      v13 = *(_WORD *)(v6 + 18) & 0x3F;
      if (v7 != v9)
        LODWORD(v13) = dword_1C85F3C44[v13];
      return (v13 & 0xFFFE) == 36;
    }
    return 0;
  }
  return result;
}

BOOL sub_1C4E7A324(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != 85)
  {
    if (v2 == 84)
    {
      v3 = *(_QWORD *)(a2 - 32);
      if (v3)
      {
        if (!*(_BYTE *)(v3 + 16) && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a2 + 72) && (*(_BYTE *)(v3 + 33) & 0x20) != 0)
          return *(_DWORD *)(v3 + 36) == 275;
      }
    }
    return 0;
  }
  result = 0;
  v6 = *(_QWORD *)(a2 - 96);
  if (v6 && *(_BYTE *)(v6 + 16) == 81)
  {
    v7 = *(_QWORD *)(a2 - 64);
    v8 = *(_QWORD *)(a2 - 32);
    v9 = *(_QWORD *)(v6 - 64);
    v10 = *(_QWORD *)(v6 - 32);
    v11 = v7 == v9 && v8 == v10;
    if (v11 || (v7 == v10 ? (v12 = v8 == v9) : (v12 = 0), v12))
    {
      v13 = *(_WORD *)(v6 + 18) & 0x3F;
      if (v7 != v9)
        LODWORD(v13) = dword_1C85F3C44[v13];
      return (v13 & 0xFFFE) == 40;
    }
    return 0;
  }
  return result;
}

llvm::Value **sub_1C4E7A3E0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v11;
  llvm::Value **v12;
  unsigned int v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;

  v11 = a1;
  v12 = sub_1C4E6D894(a1, a2, a3, a5, a6);
  if (v12 != (llvm::Value **)a4)
  {
    if (v12)
      return v12;
    if (!a4)
      return v12;
    v14 = *(unsigned __int8 *)(a4 + 16);
    if (v14 < 0x1C || v14 - 83 < 0xFFFFFFFE)
      return v12;
    v15 = *(_WORD *)(a4 + 18) & 0x3F;
    v16 = *(unsigned __int8 **)(a4 - 64);
    v17 = *(unsigned __int8 **)(a4 - 32);
    if ((v15 != v11 || v16 != a2 || v17 != a3) && (dword_1C85F3CEC[v11] != v15 || v16 != a3 || v17 != a2))
      return v12;
  }
  return (llvm::Value **)a7;
}

BOOL sub_1C4E7A4A8(uint64_t a1, llvm::Constant *a2)
{
  _BOOL4 v2;
  unsigned int v4;
  char *v5;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  int v10;
  llvm::APFloatBase *SplatValue;
  char *v12;
  int v13;
  llvm::Type *v14;
  llvm::UndefValue *AggregateElement;
  int v16;
  char *v17;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 17)
  {
    v5 = (char *)a2 + 24;
    if (*((_UNKNOWN **)a2 + 4) == &unk_1C866F1C0)
      v5 = (char *)*((_QWORD *)a2 + 5);
    return (v5[28] & 7) == 1;
  }
  else
  {
    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v8 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
    else
      v8 = 0;
    v9 = !v8 || v4 > 0x14;
    v10 = v9;
    if (!v9)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((_BYTE *)SplatValue + 16) == 17)
      {
        v12 = (char *)SplatValue + 24;
        if (*((_UNKNOWN **)SplatValue + 4) == &unk_1C866F1C0)
          v12 = (char *)*((_QWORD *)SplatValue + 5);
        v2 = (v12[28] & 7) == 1;
      }
      else
      {
        if (*(_BYTE *)(v7 + 8) == 18)
        {
          v13 = *(_DWORD *)(v7 + 32);
          if (v13)
          {
            v14 = 0;
            v2 = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(a2, v14);
              if (!AggregateElement)
                break;
              v16 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v16 - 11) >= 2)
              {
                if (v16 != 17)
                  break;
                v17 = (char *)AggregateElement + 24;
                if (*((_UNKNOWN **)AggregateElement + 4) == &unk_1C866F1C0)
                  v17 = (char *)*((_QWORD *)AggregateElement + 5);
                if ((v17[28] & 7) != 1)
                  break;
                v2 = 1;
              }
              v14 = (llvm::Type *)((_DWORD)v14 + 1);
              if (v13 == (_DWORD)v14)
                return (v10 ^ 1) & v2;
            }
          }
        }
        v2 = 0;
      }
    }
    return (v10 ^ 1) & v2;
  }
}

llvm::APFloatBase *sub_1C4E7A604(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v3;
  llvm::APFloatBase *result;

  v3 = a2[16];
  if (a2 && v3 == 17)
    goto LABEL_3;
  if (v3 <= 0x14 && (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18)
  {
    result = llvm::Constant::getSplatValue((llvm::Constant *)a2, (llvm::Type *)*(unsigned __int8 *)(a1 + 8));
    if (!result)
      return result;
    a2 = (unsigned __int8 *)result;
    if (*((_BYTE *)result + 16) == 17)
    {
LABEL_3:
      **(_QWORD **)a1 = a2 + 24;
      return (llvm::APFloatBase *)1;
    }
  }
  return 0;
}

BOOL sub_1C4E7A684(_DWORD *a1, uint64_t a2)
{
  return sub_1C4D9B530(a1, a2)
      && a2
      && *(_BYTE *)(a2 + 16) == 84
      && (sub_1C4E7A604((uint64_t)(a1 + 6), *(unsigned __int8 **)(a2- 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)+ 32 * a1[4])) & 1) != 0;
}

uint64_t sub_1C4E7A6EC(uint64_t **a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = 0;
  if (a2)
  {
    v4 = *(unsigned __int8 *)(a2 + 16);
    if (v4 >= 0x1C)
    {
      v5 = *(_DWORD *)(*(_QWORD *)a2 + 8);
      if ((v5 & 0xFE) == 0x12)
        v5 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
      if (v5 != 269)
        return 0;
      if (v4 != 85)
      {
        if (v4 == 57)
        {
          v6 = *(_DWORD *)(a2 + 20);
          if ((v6 & 0x40000000) != 0)
            v7 = *(uint64_t **)(a2 - 8);
          else
            v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF));
          v9 = *v7;
          v10 = v7[4];
          if (!*v7)
            goto LABEL_19;
          goto LABEL_17;
        }
        return 0;
      }
      result = 0;
      v8 = *(_QWORD *)(a2 - 64);
      if (v8)
      {
        if (*(unsigned __int8 *)(v8 + 16) <= 0x14u)
        {
          v9 = *(_QWORD *)(a2 - 96);
          v10 = *(_QWORD *)(a2 - 32);
          result = llvm::Constant::isOneValue(*(llvm::Constant **)(a2 - 64));
          if ((_DWORD)result)
          {
            if (!v9)
              goto LABEL_19;
LABEL_17:
            **a1 = v9;
            if ((sub_1C4D9EC28(a1 + 1, 30, v10) & 1) != 0)
              return 1;
LABEL_19:
            if (v10)
            {
              **a1 = v10;
              return sub_1C4D9EC28(a1 + 1, 30, v9);
            }
            return 0;
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_1C4E7A804(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = 0;
  if (a2)
  {
    v4 = *(unsigned __int8 *)(a2 + 16);
    if (v4 >= 0x1C)
    {
      v5 = *(_DWORD *)(*(_QWORD *)a2 + 8);
      if ((v5 & 0xFE) == 0x12)
        v5 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
      if (v5 != 269)
        return 0;
      if (v4 != 85)
      {
        if (v4 == 57)
        {
          v6 = *(_DWORD *)(a2 + 20);
          if ((v6 & 0x40000000) != 0)
            v7 = *(uint64_t **)(a2 - 8);
          else
            v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF));
          v9 = *v7;
          v11 = v7[4];
          if (*a1 != v9 || a1[1] != v11)
          {
            if (*a1 != v11)
              return 0;
            return a1[1] == v9;
          }
          return 1;
        }
        return 0;
      }
      result = 0;
      v8 = *(_QWORD *)(a2 - 64);
      if (v8)
      {
        if (*(unsigned __int8 *)(v8 + 16) <= 0x14u)
        {
          v9 = *(_QWORD *)(a2 - 96);
          v10 = *(_QWORD *)(a2 - 32);
          result = llvm::Constant::isOneValue(*(llvm::Constant **)(a2 - 64));
          if (result)
          {
            if (*a1 == v9 && a1[1] == v10)
              return 1;
            if (*a1 == v10)
              return a1[1] == v9;
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4E7A91C(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t *a4, int a5)
{
  uint64_t v10;
  uint8x8_t v11;
  int v12;
  unint64_t v13;
  int8x8_t *v14;
  int8x8_t v15;
  uint8x8_t v16;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  const void **v23;
  uint64_t v24;
  unint64_t v25;
  const void *v26;
  uint64_t v27;
  const void **v28;
  uint64_t v29;
  unint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  void *v45;
  int v46;
  void *v47;
  int v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;

  v52 = 0;
  if (a2 == a3)
  {
    v49 = a2;
    v50 = &v52;
    v51 = 0;
    v18 = *(unsigned __int8 *)(a1 + 16);
    if (v18 == 5)
    {
      if (*(_WORD *)(a1 + 18) != 28)
        goto LABEL_2;
      v22 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
      if (*(_QWORD *)v22 != a2 || !sub_1C4D8A004((uint64_t)&v50, *(llvm::Constant **)(v22 + 32)))
        goto LABEL_2;
    }
    else if (v18 != 56
           || *(_QWORD *)(a1 - 64) != a2
           || (sub_1C4D89F84((uint64_t)&v50, *(unsigned __int8 **)(a1 - 32)) & 1) == 0)
    {
      goto LABEL_2;
    }
    v23 = (const void **)v52;
    v24 = *(unsigned int *)(v52 + 8);
    v48 = v24;
    if (v24 > 0x40)
    {
      v47 = (void *)operator new[]();
      memcpy(v47, *v23, ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v47);
      LODWORD(v24) = v48;
      v26 = v47;
    }
    else
    {
      v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
      if (!(_DWORD)v24)
        v25 = 0;
      v26 = (const void *)(v25 & ~*(_QWORD *)v52);
    }
    v37 = a4[1].u32[0];
    if (v37 > 0x40)
      v38 = memcmp(*(const void **)a4, v26, ((unint64_t)(v37 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v38 = *a4 == (_QWORD)v26;
    v41 = v38;
    if (v24 >= 0x41 && v26)
      MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
    if (v41)
    {
      if (a5)
        return a2;
      else
        return a1;
    }
  }
LABEL_2:
  if (a1 != a3)
    goto LABEL_3;
  v49 = a3;
  v50 = &v52;
  v51 = 0;
  v19 = *(unsigned __int8 *)(a2 + 16);
  if (v19 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 28)
      goto LABEL_3;
    v27 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    if (*(_QWORD *)v27 != a3 || !sub_1C4D8A004((uint64_t)&v50, *(llvm::Constant **)(v27 + 32)))
      goto LABEL_3;
  }
  else if (v19 != 56
         || *(_QWORD *)(a2 - 64) != a3
         || (sub_1C4D89F84((uint64_t)&v50, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
  {
    goto LABEL_3;
  }
  v28 = (const void **)v52;
  v29 = *(unsigned int *)(v52 + 8);
  v46 = v29;
  if (v29 > 0x40)
  {
    v45 = (void *)operator new[]();
    memcpy(v45, *v28, ((unint64_t)(v29 + 63) >> 3) & 0x3FFFFFF8);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v45);
    LODWORD(v29) = v46;
    v31 = v45;
  }
  else
  {
    v30 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v29;
    if (!(_DWORD)v29)
      v30 = 0;
    v31 = (const void *)(v30 & ~*(_QWORD *)v52);
  }
  v39 = a4[1].u32[0];
  if (v39 > 0x40)
    v40 = memcmp(*(const void **)a4, v31, ((unint64_t)(v39 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v40 = *a4 == (_QWORD)v31;
  v42 = v40;
  if (v29 >= 0x41 && v31)
    MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
  if (v42)
  {
    if (a5)
      return a2;
    else
      return a3;
  }
LABEL_3:
  v10 = a4[1].u32[0];
  if (v10 > 0x40)
  {
    v12 = 0;
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = (int8x8_t *)*a4;
    do
    {
      v15 = *v14++;
      v16 = (uint8x8_t)vcnt_s8(v15);
      v16.i16[0] = vaddlv_u8(v16);
      v12 += v16.i32[0];
      --v13;
    }
    while (v13);
    if (v12 != 1)
      return 0;
  }
  else
  {
    v11 = (uint8x8_t)vcnt_s8(*a4);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] != 1)
      return 0;
  }
  if (a2 == a3)
  {
    v49 = a2;
    v50 = &v52;
    v51 = 0;
    v20 = *(unsigned __int8 *)(a1 + 16);
    if (v20 == 5)
    {
      if (*(_WORD *)(a1 + 18) != 29)
        goto LABEL_10;
      v32 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF);
      if (*(_QWORD *)v32 != a2 || !sub_1C4D8A004((uint64_t)&v50, *(llvm::Constant **)(v32 + 32)))
        goto LABEL_10;
    }
    else if (v20 != 57
           || *(_QWORD *)(a1 - 64) != a2
           || (sub_1C4D89F84((uint64_t)&v50, *(unsigned __int8 **)(a1 - 32)) & 1) == 0)
    {
      goto LABEL_10;
    }
    v33 = a4[1].u32[0];
    if (v33 > 0x40)
    {
      if (memcmp(*(const void **)a4, *(const void **)v52, ((unint64_t)(v33 + 63) >> 3) & 0x3FFFFFF8))
        goto LABEL_10;
    }
    else if (*a4 != *(_QWORD *)v52)
    {
      goto LABEL_10;
    }
    if (a5)
      return a1;
    else
      return a2;
  }
LABEL_10:
  if (a1 != a3)
    return 0;
  v49 = a3;
  v50 = &v52;
  v51 = 0;
  v21 = *(unsigned __int8 *)(a2 + 16);
  if (v21 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 29)
      return 0;
    v34 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    if (*(_QWORD *)v34 != a3 || !sub_1C4D8A004((uint64_t)&v50, *(llvm::Constant **)(v34 + 32)))
      return 0;
  }
  else if (v21 != 57
         || *(_QWORD *)(a2 - 64) != a3
         || (sub_1C4D89F84((uint64_t)&v50, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
  {
    return 0;
  }
  v35 = a4[1].u32[0];
  if (v35 > 0x40)
    v36 = memcmp(*(const void **)a4, *(const void **)v52, ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v36 = *a4 == *(_QWORD *)v52;
  v43 = v36;
  if (a5)
    v44 = a3;
  else
    v44 = a2;
  if (v43)
    return v44;
  else
    return 0;
}

BOOL sub_1C4E7AE2C(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1C4E75A6C(a1, a2);
  if (result)
  {
    result = 0;
    if (a2)
    {
      if (*(_BYTE *)(a2 + 16) == 84)
      {
        v5 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        if (**(_QWORD **)(a1 + 32) == *(_QWORD *)(v5 + 32 * *(unsigned int *)(a1 + 24))
          && (v6 = *(_QWORD *)(v5 + 32 * *(unsigned int *)(a1 + 40))) != 0)
        {
          **(_QWORD **)(a1 + 48) = v6;
          return 1;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C4E7AEB4(uint64_t a1, uint64_t a2)
{
  return sub_1C4D9B530((_DWORD *)a1, a2)
      && a2
      && *(_BYTE *)(a2 + 16) == 84
      && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2
                                           - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)
                                           + 32 * *(unsigned int *)(a1 + 8));
}

uint64_t sub_1C4E7AF1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = 0;
  if (a2 && *(_BYTE *)(a2 + 16) == 81)
  {
    v3 = *(_QWORD *)(a2 - 64);
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 == v3)
    {
      v5 = *(_QWORD *)(a2 - 32);
      if (*(_QWORD *)(a1 + 16) == v5)
      {
        v6 = *(_WORD *)(a2 + 18) & 0x3F;
        goto LABEL_11;
      }
    }
    else
    {
      v5 = *(_QWORD *)(a2 - 32);
    }
    if (v4 != v5 || *(_QWORD *)(a1 + 16) != v3)
      return 0;
    v6 = dword_1C85F3CEC[*(_WORD *)(a2 + 18) & 0x3F];
LABEL_11:
    **(_DWORD **)a1 = v6;
    return 1;
  }
  return v2;
}

BOOL sub_1C4E7AFA8(uint64_t a1, int a2, uint64_t a3)
{
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v5 = *(unsigned __int8 *)(a3 + 16);
  v6 = a2 + 28;
  if (a2 + 28 == v5)
  {
    v7 = *(_QWORD *)(a3 - 64);
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 == 5)
    {
      if (*(_WORD *)(v7 + 18) != 15
        || !sub_1C4E714F4((_QWORD **)a1, *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)))
        || !sub_1C4E75A04((_QWORD *)(a1 + 8), *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32)))
      {
        return 0;
      }
    }
    else if (v8 != 43
           || !sub_1C4E714F4((_QWORD **)a1, *(_QWORD *)(v7 - 64))
           || (sub_1C4E75A04((_QWORD *)(a1 + 8), *(_QWORD *)(v7 - 32)) & 1) == 0)
    {
      return 0;
    }
    return (sub_1C4E7B154((_QWORD **)(a1 + 16), *(_QWORD *)(a3 - 32)) & 1) != 0;
  }
  if (v5 == 5)
  {
    if (*(unsigned __int16 *)(a3 + 18) != a2)
      goto LABEL_25;
    v9 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 15
        || !sub_1C4E714F4((_QWORD **)a1, *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)))
        || !sub_1C4E75A04((_QWORD *)(a1 + 8), *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32)))
      {
        goto LABEL_25;
      }
    }
    else if (v10 != 43
           || !sub_1C4E714F4((_QWORD **)a1, *(_QWORD *)(v9 - 64))
           || (sub_1C4E75A04((_QWORD *)(a1 + 8), *(_QWORD *)(v9 - 32)) & 1) == 0)
    {
      goto LABEL_25;
    }
    if ((sub_1C4E7B154((_QWORD **)(a1 + 16), *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)
    {
LABEL_25:
      v6 = 0;
      return (v5 == 5) & v6;
    }
    v6 = 1;
  }
  return (v5 == 5) & v6;
}

uint64_t sub_1C4E7B154(_QWORD **a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  unsigned int v5;

  result = 0;
  if (a2 && *(_BYTE *)(a2 + 16) == 16)
  {
    v4 = (_QWORD *)(a2 + 24);
    v5 = *(_DWORD *)(a2 + 32);
    if (v5 >= 0x41)
    {
      if (v5 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a2 + 24)) > 0x40)
        return 0;
      v4 = (_QWORD *)*v4;
    }
    **a1 = *v4;
    return 1;
  }
  return result;
}

BOOL sub_1C4E7B1CC(uint64_t a1, int a2, uint64_t a3)
{
  int v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;

  v5 = *(unsigned __int8 *)(a3 + 16);
  v6 = a2 + 28;
  if (a2 + 28 == v5)
  {
    v7 = *(_QWORD *)(a3 - 64);
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (v8 == 5)
    {
      if (*(_WORD *)(v7 + 18) != 15
        || !sub_1C4E714F4((_QWORD **)a1, *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)))
        || !sub_1C4E75A04((_QWORD *)(a1 + 8), *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32)))
      {
        return 0;
      }
    }
    else if (v8 != 43
           || !sub_1C4E714F4((_QWORD **)a1, *(_QWORD *)(v7 - 64))
           || (sub_1C4E75A04((_QWORD *)(a1 + 8), *(_QWORD *)(v7 - 32)) & 1) == 0)
    {
      return 0;
    }
    return sub_1C4D8A7F0((llvm::APInt *)(a1 + 16), *(unsigned __int8 **)(a3 - 32));
  }
  if (v5 == 5)
  {
    if (*(unsigned __int16 *)(a3 + 18) != a2)
      goto LABEL_25;
    v9 = *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
    v10 = *(unsigned __int8 *)(v9 + 16);
    if (v10 == 5)
    {
      if (*(_WORD *)(v9 + 18) != 15
        || !sub_1C4E714F4((_QWORD **)a1, *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)))
        || !sub_1C4E75A04((_QWORD *)(a1 + 8), *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32)))
      {
        goto LABEL_25;
      }
    }
    else if (v10 != 43
           || !sub_1C4E714F4((_QWORD **)a1, *(_QWORD *)(v9 - 64))
           || (sub_1C4E75A04((_QWORD *)(a1 + 8), *(_QWORD *)(v9 - 32)) & 1) == 0)
    {
      goto LABEL_25;
    }
    if (!sub_1C4D8A86C((llvm::APInt *)(a1 + 16), *(llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32)))
    {
LABEL_25:
      v6 = 0;
      return (v5 == 5) & v6;
    }
    v6 = 1;
  }
  return (v5 == 5) & v6;
}

BOOL sub_1C4E7B378(uint64_t a1, int a2, uint64_t a3)
{
  int v5;
  char v6;
  unsigned __int8 *v7;
  BOOL v8;
  llvm::Constant **v10;
  llvm::Constant *v11;
  char v12;
  char v13;

  v5 = *(unsigned __int8 *)(a3 + 16);
  v6 = a2 + 28;
  if (a2 + 28 == v5)
  {
    v7 = *(unsigned __int8 **)(a3 - 64);
    if (v7)
      v8 = v7[16] > 0x14u;
    else
      v8 = 1;
    return !v8
        && ((llvm::Constant::isNullValue(*(llvm::Constant **)(a3 - 64)) & 1) != 0
         || (sub_1C4E71060((uint64_t)&v12, (llvm::Constant *)v7) & 1) != 0)
        && (sub_1C4E75A04((_QWORD *)(a1 + 8), *(_QWORD *)(a3 - 32)) & 1) != 0;
  }
  else
  {
    if (v5 == 5)
      v6 = *(unsigned __int16 *)(a3 + 18) == a2
        && (v10 = (llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)), (v11 = *v10) != 0)
        && ((llvm::Constant::isNullValue(*v10) & 1) != 0 || (sub_1C4E71060((uint64_t)&v13, v11) & 1) != 0)
        && (sub_1C4E75A04((_QWORD *)(a1 + 8), *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32)) & 1) != 0;
    return (v5 == 5) & v6;
  }
}

uint64_t sub_1C4E7B480(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char v19;
  int v20;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[64];
  void *v27;
  uint64_t v28;
  _QWORD v29[9];

  v29[8] = *MEMORY[0x1E0C80C00];
  v1 = (*(_BYTE *)(a1 + 16) - 11);
  if (v1 < 2)
    return 1;
  if (v1 < 0xFD)
    return 0;
  v22 = v26;
  v23 = v26;
  v24 = 8;
  v25 = 0;
  v27 = v29;
  v28 = 0x800000000;
  v3 = *(_DWORD *)(a1 + 20);
  if ((v3 & 0x40000000) != 0)
  {
    v5 = *(uint64_t **)(a1 - 8);
    v4 = v3 & 0x7FFFFFF;
    if (!v4)
      goto LABEL_36;
  }
  else
  {
    v4 = v3 & 0x7FFFFFF;
    v5 = (uint64_t *)(a1 - 32 * v4);
    if (!v4)
      goto LABEL_36;
  }
  v6 = 32 * v4;
  do
  {
    v7 = *v5;
    v8 = (*(_BYTE *)(*v5 + 16) - 11);
    if (v8 >= 2)
    {
      if (v8 < 0xFD)
      {
LABEL_37:
        v2 = 0;
        goto LABEL_38;
      }
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, *v5);
      if (v9)
      {
        v10 = v28;
        if (v28 >= HIDWORD(v28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 8);
          *((_QWORD *)v27 + v28) = v7;
          v10 = v28;
        }
        else
        {
          *((_QWORD *)v27 + v28) = v7;
        }
        LODWORD(v28) = v10 + 1;
      }
    }
    v5 += 4;
    v6 -= 32;
  }
  while (v6);
  v11 = v28;
  while (v11)
  {
    while (1)
    {
      v12 = *((_QWORD *)v27 + --v11);
      LODWORD(v28) = v11;
      v13 = *(_DWORD *)(v12 + 20);
      if ((v13 & 0x40000000) == 0)
        break;
      v15 = *(uint64_t **)(v12 - 8);
      v14 = v13 & 0x7FFFFFF;
      if (!v14)
        goto LABEL_22;
LABEL_25:
      v16 = 32 * v14;
      do
      {
        v17 = *v15;
        v18 = (*(_BYTE *)(*v15 + 16) - 11);
        if (v18 >= 2)
        {
          if (v18 < 0xFD)
            goto LABEL_37;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, *v15);
          if (v19)
          {
            v20 = v28;
            if (v28 >= HIDWORD(v28))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 8);
              *((_QWORD *)v27 + v28) = v17;
              v20 = v28;
            }
            else
            {
              *((_QWORD *)v27 + v28) = v17;
            }
            LODWORD(v28) = v20 + 1;
          }
        }
        v15 += 4;
        v16 -= 32;
      }
      while (v16);
      v11 = v28;
      if (!(_DWORD)v28)
        goto LABEL_36;
    }
    v14 = v13 & 0x7FFFFFF;
    v15 = (uint64_t *)(v12 - 32 * v14);
    if (v14)
      goto LABEL_25;
LABEL_22:
    ;
  }
LABEL_36:
  v2 = 1;
LABEL_38:
  if (v27 != v29)
    free(v27);
  if (v23 != v22)
    free(v23);
  return v2;
}

BOOL sub_1C4E7B6EC(_QWORD **a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  int v10;
  llvm::Constant **v11;
  uint64_t v12;
  int v13;
  llvm::Constant **v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;

  v4 = sub_1C4774A9C(a2);
  result = 0;
  if (!a2 || !v4)
    return result;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 > 0x1B)
    v7 = v6 - 28;
  else
    v7 = *(unsigned __int16 *)(a2 + 18);
  if (v7 == 12)
  {
    v8 = *(_DWORD *)(a2 + 20);
    if ((v8 & 0x40000000) != 0)
      v9 = *(uint64_t **)(a2 - 8);
    else
      v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF));
    v12 = *v9;
    if (v12)
    {
LABEL_15:
      **a1 = v12;
      return 1;
    }
    return 0;
  }
  if (v7 != 16)
    return 0;
  if ((*(_BYTE *)(a2 + 17) & 0x10) != 0)
  {
    v13 = *(_DWORD *)(a2 + 20);
    if ((v13 & 0x40000000) != 0)
      v14 = *(llvm::Constant ***)(a2 - 8);
    else
      v14 = (llvm::Constant **)(a2 - 32 * (v13 & 0x7FFFFFF));
    if (sub_1C4E5C310((uint64_t)&v18, *v14))
    {
LABEL_23:
      v15 = *(_DWORD *)(a2 + 20);
      if ((v15 & 0x40000000) != 0)
        v16 = *(_QWORD *)(a2 - 8);
      else
        v16 = a2 - 32 * (v15 & 0x7FFFFFF);
      v12 = *(_QWORD *)(v16 + 32);
      if (v12)
        goto LABEL_15;
    }
    return 0;
  }
  v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(llvm::Constant ***)(a2 - 8);
  else
    v11 = (llvm::Constant **)(a2 - 32 * (v10 & 0x7FFFFFF));
  result = sub_1C4E5C46C((uint64_t)&v17, *v11);
  if (result)
    goto LABEL_23;
  return result;
}

llvm::APFloatBase *sub_1C4E7B804(llvm::PoisonValue ***a1, llvm::Type *a2, char a3, uint64_t a4, int a5, int a6)
{
  int v6;
  uint64_t v7;
  llvm::Constant **v9;
  llvm::Type *v10;
  llvm::Constant **v11;
  BOOL v12;
  int v13;
  llvm::Constant *v14;
  llvm::Type *v15;
  _BOOL4 v16;
  unsigned int v17;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  int v22;
  llvm::APFloatBase *SplatValue;
  char *v24;
  char *v25;
  int v26;
  llvm::Type *v27;
  llvm::UndefValue *AggregateElement;
  int v29;
  char *v30;
  int v31;
  int v32;
  char v37;

  if (!a2)
    return 0;
  v7 = a4;
  v9 = (llvm::Constant **)a1;
  v10 = 0;
  v11 = (llvm::Constant **)&a1[(_QWORD)a2];
  do
  {
    if (*(_BYTE *)(*(_QWORD *)((char *)v10 + (_QWORD)a1) + 16) == 12)
      return (llvm::APFloatBase *)llvm::PoisonValue::get(**a1, a2);
    v10 = (llvm::Type *)((char *)v10 + 8);
  }
  while ((llvm::Type *)(8 * (_QWORD)a2) != v10);
  if (a5)
    v12 = 0;
  else
    v12 = a6 == 1;
  v13 = v12;
  while (1)
  {
    v14 = *v9;
    v16 = sub_1C4E7A4A8((uint64_t)&v37, *v9);
    v17 = *((unsigned __int8 *)v14 + 16);
    if (v14 && v17 == 17)
    {
      v25 = (char *)v14 + 24;
      if (*((_UNKNOWN **)v14 + 4) == &unk_1C866F1C0)
        v25 = (char *)*((_QWORD *)v14 + 5);
      v6 = (v25[28] & 7) == 0;
    }
    else
    {
      v19 = *(_QWORD *)v14;
      if (*(_QWORD *)v14)
        v20 = (*(_DWORD *)(*(_QWORD *)v14 + 8) & 0xFE) == 18;
      else
        v20 = 0;
      v21 = !v20 || v17 > 0x14;
      v22 = v21;
      if (!v21)
      {
        SplatValue = llvm::Constant::getSplatValue(v14, 0);
        if (SplatValue && *((_BYTE *)SplatValue + 16) == 17)
        {
          v24 = (char *)SplatValue + 24;
          if (*((_UNKNOWN **)SplatValue + 4) == &unk_1C866F1C0)
            v24 = (char *)*((_QWORD *)SplatValue + 5);
          v6 = (v24[28] & 7) == 0;
        }
        else
        {
          if (*(_BYTE *)(v19 + 8) == 18)
          {
            v26 = *(_DWORD *)(v19 + 32);
            if (v26)
            {
              v27 = 0;
              v6 = 0;
              while (1)
              {
                AggregateElement = llvm::Constant::getAggregateElement(v14, v27);
                if (!AggregateElement)
                  break;
                v29 = *((unsigned __int8 *)AggregateElement + 16);
                if ((v29 - 11) >= 2)
                {
                  if (v29 != 17)
                    break;
                  v30 = (char *)AggregateElement + 24;
                  if (*((_UNKNOWN **)AggregateElement + 4) == &unk_1C866F1C0)
                    v30 = (char *)*((_QWORD *)AggregateElement + 5);
                  if ((v30[28] & 7) != 0)
                    break;
                  v6 = 1;
                }
                v27 = (llvm::Type *)((_DWORD)v27 + 1);
                if (v26 == (_DWORD)v27)
                  goto LABEL_46;
              }
            }
          }
          v6 = 0;
        }
      }
LABEL_46:
      v6 &= v22 ^ 1;
      v7 = a4;
    }
    if (*(_BYTE *)(v7 + 41))
    {
      v31 = sub_1C4E7B480((uint64_t)v14);
      if ((a3 & 2) == 0)
        goto LABEL_52;
    }
    else
    {
      v31 = 0;
      if ((a3 & 2) == 0)
        goto LABEL_52;
    }
    if (v16 | v31)
      return (llvm::APFloatBase *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v14, v15);
LABEL_52:
    if ((a3 & 4) != 0 && v6 | v31)
      return (llvm::APFloatBase *)llvm::PoisonValue::get(*(llvm::PoisonValue **)v14, v15);
    if (v13)
      v32 = v31 | v16;
    else
      v32 = a5 != 2 && v16;
    if (v32 == 1)
      break;
    if (++v9 == v11)
      return 0;
  }
  if ((llvm::Constant::isNaN(v14) & 1) != 0)
    return v14;
  return llvm::ConstantFP::getNaN(*(llvm::ConstantFP **)v14, 0, 0);
}

BOOL sub_1C4E7BA90(uint64_t a1, llvm::Constant *a2)
{
  _BOOL4 v2;
  unsigned int v4;
  char *v5;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  int v10;
  llvm::APFloatBase *SplatValue;
  char *v12;
  int v13;
  llvm::Type *v14;
  llvm::UndefValue *AggregateElement;
  int v16;
  char *v17;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 17)
  {
    v5 = (char *)a2 + 24;
    if (*((_UNKNOWN **)a2 + 4) == &unk_1C866F1C0)
      v5 = (char *)*((_QWORD *)a2 + 5);
    return (v5[28] & 0xF) == 3;
  }
  else
  {
    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v8 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
    else
      v8 = 0;
    v9 = !v8 || v4 > 0x14;
    v10 = v9;
    if (!v9)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((_BYTE *)SplatValue + 16) == 17)
      {
        v12 = (char *)SplatValue + 24;
        if (*((_UNKNOWN **)SplatValue + 4) == &unk_1C866F1C0)
          v12 = (char *)*((_QWORD *)SplatValue + 5);
        v2 = (v12[28] & 0xF) == 3;
      }
      else
      {
        if (*(_BYTE *)(v7 + 8) == 18)
        {
          v13 = *(_DWORD *)(v7 + 32);
          if (v13)
          {
            v14 = 0;
            v2 = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(a2, v14);
              if (!AggregateElement)
                break;
              v16 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v16 - 11) >= 2)
              {
                if (v16 != 17)
                  break;
                v17 = (char *)AggregateElement + 24;
                if (*((_UNKNOWN **)AggregateElement + 4) == &unk_1C866F1C0)
                  v17 = (char *)*((_QWORD *)AggregateElement + 5);
                if ((v17[28] & 0xF) != 3)
                  break;
                v2 = 1;
              }
              v14 = (llvm::Type *)((_DWORD)v14 + 1);
              if (v13 == (_DWORD)v14)
                return (v10 ^ 1) & v2;
            }
          }
        }
        v2 = 0;
      }
    }
    return (v10 ^ 1) & v2;
  }
}

BOOL sub_1C4E7BBEC(uint64_t a1, llvm::Constant *a2)
{
  llvm::APFloatBase *SplatValue;
  char *v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  llvm::Type *v9;
  llvm::UndefValue *AggregateElement;
  int v11;
  char *v12;

  if (!a2 || *((_BYTE *)a2 + 16) != 17)
  {
    v6 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v7 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
    else
      v7 = 0;
    if (v7)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((_BYTE *)SplatValue + 16) == 17)
        goto LABEL_4;
      if (*(_BYTE *)(v6 + 8) == 18)
      {
        v8 = *(_DWORD *)(v6 + 32);
        if (v8)
        {
          v9 = 0;
          v5 = 0;
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement(a2, v9);
            if (!AggregateElement)
              break;
            v11 = *((unsigned __int8 *)AggregateElement + 16);
            if ((v11 - 11) >= 2)
            {
              if (v11 != 17)
                break;
              v12 = (char *)AggregateElement + 24;
              if (*((_UNKNOWN **)AggregateElement + 4) == &unk_1C866F1C0)
                v12 = (char *)*((_QWORD *)AggregateElement + 5);
              if ((v12[28] & 7) != 3)
                break;
              v5 = 1;
            }
            v9 = (llvm::Type *)((_DWORD)v9 + 1);
            if (v8 == (_DWORD)v9)
              return v5;
          }
        }
      }
    }
    return 0;
  }
  SplatValue = a2;
LABEL_4:
  v4 = (char *)SplatValue + 24;
  if (*((_UNKNOWN **)SplatValue + 4) == &unk_1C866F1C0)
    v4 = (char *)*((_QWORD *)SplatValue + 5);
  return (v4[28] & 7) == 3;
}

BOOL sub_1C4E7BD14(_QWORD *a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  int v8;
  _QWORD *v9;
  int v10;
  llvm::Constant **v11;
  int v12;
  llvm::Constant **v13;
  int v14;
  uint64_t v15;
  char v16;
  char v17;

  v4 = sub_1C4774A9C(a2);
  result = 0;
  if (!a2 || !v4)
    return result;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 > 0x1B)
    v7 = v6 - 28;
  else
    v7 = *(unsigned __int16 *)(a2 + 18);
  if (v7 == 12)
  {
    v8 = *(_DWORD *)(a2 + 20);
    if ((v8 & 0x40000000) != 0)
      v9 = *(_QWORD **)(a2 - 8);
    else
      v9 = (_QWORD *)(a2 - 32 * (v8 & 0x7FFFFFF));
    return *a1 == *v9;
  }
  if (v7 != 16)
    return 0;
  if ((*(_BYTE *)(a2 + 17) & 0x10) != 0)
  {
    v12 = *(_DWORD *)(a2 + 20);
    if ((v12 & 0x40000000) != 0)
      v13 = *(llvm::Constant ***)(a2 - 8);
    else
      v13 = (llvm::Constant **)(a2 - 32 * (v12 & 0x7FFFFFF));
    if (sub_1C4E5C310((uint64_t)&v17, *v13))
      goto LABEL_21;
    return 0;
  }
  v10 = *(_DWORD *)(a2 + 20);
  if ((v10 & 0x40000000) != 0)
    v11 = *(llvm::Constant ***)(a2 - 8);
  else
    v11 = (llvm::Constant **)(a2 - 32 * (v10 & 0x7FFFFFF));
  result = sub_1C4E5C46C((uint64_t)&v16, *v11);
  if (result)
  {
LABEL_21:
    v14 = *(_DWORD *)(a2 + 20);
    if ((v14 & 0x40000000) != 0)
      v15 = *(_QWORD *)(a2 - 8);
    else
      v15 = a2 - 32 * (v14 & 0x7FFFFFF);
    v9 = (_QWORD *)(v15 + 32);
    return *a1 == *v9;
  }
  return result;
}

uint64_t sub_1C4E7BE28(const llvm::APInt **a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v4;
  const llvm::APInt *v5;
  llvm::APFloatBase *SplatValue;
  _QWORD v9[2];
  int v10;
  char v11;
  const llvm::APInt *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;

  v2 = (uint64_t)a2;
  v17 = *MEMORY[0x1E0C80C00];
  v4 = a2[16];
  if (!a2 || v4 != 17)
  {
    if (v4 > 0x14 || (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 18)
      return 0;
    SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)a2, 0);
    v2 = (uint64_t)SplatValue;
    if (!SplatValue)
      return v2;
    if (*((_BYTE *)SplatValue + 16) != 17)
      return 0;
  }
  v5 = *a1;
  LODWORD(v13) = 64;
  v12 = v5;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v9, &v12);
  v13 = v9[0];
  v14 = v9[1];
  v15 = v10;
  v16 = v11 & 0xF;
  llvm::APFloat::convert((uint64_t)&v12, *(void **)(v2 + 32), 1, v9);
  v2 = sub_1C47ECB98(v2 + 24, (uint64_t)&v12);
  if ((_UNKNOWN *)v13 == &unk_1C866F1C0)
  {
    sub_1C4773C74(&v14);
  }
  else if ((*(_DWORD *)(v13 + 8) - 64) <= 0xFFFFFF7F && v14)
  {
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  }
  return v2;
}

uint64_t sub_1C4E7BF8C(int a1)
{
  uint64_t result;

  result = 0;
  if (a1 <= 257)
  {
    if ((a1 - 13) >= 2 && (a1 - 139) >= 2 && a1 != 203)
      return result;
    return 1;
  }
  if ((a1 - 258) <= 0x26 && ((1 << (a1 - 2)) & 0x4000000007) != 0
    || (a1 - 1830) <= 0x15 && ((1 << (a1 - 38)) & 0x220001) != 0
    || a1 == 2131)
  {
    return 1;
  }
  return result;
}

uint64_t sub_1C4E7C01C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = sub_1C4D9B530((_DWORD *)a1, a2);
  if ((_DWORD)result)
  {
    result = 0;
    if (a2)
    {
      if (*(_BYTE *)(a2 + 16) == 84)
      {
        result = sub_1C4E7BE28((const llvm::APInt **)(a1 + 16), *(unsigned __int8 **)(a2- 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)+ 32 * *(unsigned int *)(a1 + 8)));
        if ((_DWORD)result)
        {
          if (*(_BYTE *)(a2 + 16) == 84
            && (v5 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * *(unsigned int *)(a1 + 24))) != 0)
          {
            **(_QWORD **)(a1 + 32) = v5;
            return 1;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4E7C0B8(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33[2];
  _QWORD *v34[2];
  _QWORD *v35[2];
  _QWORD *v36[2];
  uint64_t v37;
  uint64_t v38;

  v4 = a2;
  v37 = 0;
  v38 = 0;
  v33[0] = &v38;
  v33[1] = &v37;
  v34[0] = &v38;
  v34[1] = &v37;
  v35[0] = &v38;
  v35[1] = &v37;
  v36[0] = &v38;
  v36[1] = &v37;
  if ((sub_1C4E79DC8(v33, a2) & 1) == 0
    && (sub_1C4E79EE4(v34, v4) & 1) == 0
    && !sub_1C4E7A018(v35, v4)
    && !sub_1C4E7A140(v36, v4))
  {
    return 0;
  }
  if (*(_BYTE *)(v4 + 16) != 84)
    return 0;
  v6 = *(_QWORD *)(v4 - 32);
  if (!v6 || *(_BYTE *)(v6 + 16) || *(_QWORD *)(v6 + 24) != *(_QWORD *)(v4 + 72) || (*(_BYTE *)(v6 + 33) & 0x20) == 0)
    return 0;
  v8 = *(_DWORD *)(v6 + 36);
  if (v38 == a3 || v37 == a3)
    goto LABEL_86;
  v9 = *(unsigned __int8 *)(a3 + 16);
  if (v9 != 85)
  {
    if (v9 != 84)
      return 0;
    v10 = *(_QWORD *)(a3 - 32);
    if (!v10)
      return 0;
    if (*(_BYTE *)(v10 + 16)
      || *(_QWORD *)(v10 + 24) != *(_QWORD *)(a3 + 72)
      || (*(_BYTE *)(v10 + 33) & 0x20) == 0
      || *(_DWORD *)(v10 + 36) != 274)
    {
      goto LABEL_103;
    }
    v11 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
    v12 = *v11;
    v13 = v11[4];
    if (v38 == v12 && v37 == v13)
      goto LABEL_86;
    if (v38 != v13)
      goto LABEL_103;
    goto LABEL_38;
  }
  v14 = *(_QWORD *)(a3 - 96);
  v15 = *(unsigned __int8 *)(v14 + 16);
  if (!v14 || v15 != 81)
  {
LABEL_41:
    if (v15 != 81)
      return 0;
    goto LABEL_42;
  }
  v16 = *(_QWORD *)(a3 - 64);
  v17 = *(_QWORD *)(a3 - 32);
  v12 = *(_QWORD *)(v14 - 64);
  v18 = *(_QWORD *)(v14 - 32);
  if ((v16 != v12 || v17 != v18) && (v16 != v18 || v17 != v12))
    goto LABEL_42;
  v19 = *(_WORD *)(v14 + 18) & 0x3E;
  if (v16 != v12)
  {
    if (v19 == 40)
      goto LABEL_35;
LABEL_42:
    v20 = *(_QWORD *)(a3 - 64);
    v10 = *(_QWORD *)(a3 - 32);
    v21 = *(_QWORD *)(v14 - 64);
    v22 = *(_QWORD *)(v14 - 32);
    if ((v20 != v21 || v10 != v22) && (v20 != v22 || v10 != v21))
      goto LABEL_59;
    v23 = *(_WORD *)(v14 + 18) & 0x3E;
    if (v20 == v21)
    {
      if (v23 != 40)
      {
        v21 = *(_QWORD *)(a3 - 64);
        goto LABEL_59;
      }
    }
    else if (v23 != 38)
    {
      goto LABEL_59;
    }
    if (v38 == v21 && v37 == v22)
      goto LABEL_86;
    if (v38 != v22)
      goto LABEL_59;
LABEL_53:
    if (v37 == v21)
      goto LABEL_86;
    if (v9 != 85)
    {
      if (!v10 || *(_BYTE *)(v10 + 16))
        return 0;
      goto LABEL_110;
    }
    v14 = *(_QWORD *)(a3 - 96);
    if (*(_BYTE *)(v14 + 16) != 81)
      return 0;
    v20 = *(_QWORD *)(a3 - 64);
    v21 = *(_QWORD *)(v14 - 64);
    v22 = *(_QWORD *)(v14 - 32);
LABEL_59:
    if ((v20 != v21 || v10 != v22) && (v20 != v22 || v10 != v21))
      goto LABEL_76;
    v24 = *(_WORD *)(v14 + 18) & 0x3E;
    if (v20 == v21)
    {
      if (v24 != 34)
      {
        v20 = v21;
        goto LABEL_76;
      }
    }
    else if (v24 != 36)
    {
      goto LABEL_76;
    }
    if (v38 == v21 && v37 == v22)
      goto LABEL_86;
    if (v38 != v22)
    {
LABEL_76:
      if ((v20 != v21 || v10 != v22) && (v20 != v22 || v10 != v21))
        return 0;
      v25 = *(_WORD *)(v14 + 18) & 0x3E;
      if (v20 == v21)
      {
        if (v25 != 36)
          return 0;
      }
      else if (v25 != 34)
      {
        return 0;
      }
      if (v38 == v21 && v37 == v22)
        goto LABEL_86;
      if (v38 != v22)
        return 0;
LABEL_96:
      if (v37 == v21)
        goto LABEL_86;
      return 0;
    }
    goto LABEL_70;
  }
  if (v19 != 38)
    goto LABEL_42;
LABEL_35:
  if (v38 == v12 && v37 == v18)
    goto LABEL_86;
  if (v38 != v18)
    goto LABEL_42;
LABEL_38:
  if (v37 == v12)
    goto LABEL_86;
  if (v9 != 84)
  {
    v14 = *(_QWORD *)(a3 - 96);
    v15 = *(unsigned __int8 *)(v14 + 16);
    goto LABEL_41;
  }
  v10 = *(_QWORD *)(a3 - 32);
  if (!v10)
    return 0;
LABEL_103:
  if (*(_BYTE *)(v10 + 16))
    return 0;
  if (*(_QWORD *)(v10 + 24) == *(_QWORD *)(a3 + 72)
    && (*(_BYTE *)(v10 + 33) & 0x20) != 0
    && *(_DWORD *)(v10 + 36) == 275)
  {
    v27 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
    v21 = *v27;
    v28 = v27[4];
    if (v38 == v21 && v37 == v28)
      goto LABEL_86;
    if (v38 == v28)
      goto LABEL_53;
  }
LABEL_110:
  if (*(_QWORD *)(v10 + 24) != *(_QWORD *)(a3 + 72)
    || (*(_BYTE *)(v10 + 33) & 0x20) == 0
    || *(_DWORD *)(v10 + 36) != 305)
  {
    goto LABEL_116;
  }
  v29 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
  v21 = *v29;
  v30 = v29[4];
  if (v38 == v21 && v37 == v30)
    goto LABEL_86;
  if (v38 != v30)
    goto LABEL_116;
LABEL_70:
  if (v37 != v21)
  {
    if (v9 != 85)
    {
      if (!v10 || *(_BYTE *)(v10 + 16))
        return 0;
LABEL_116:
      if (*(_QWORD *)(v10 + 24) != *(_QWORD *)(a3 + 72)
        || (*(_BYTE *)(v10 + 33) & 0x20) == 0
        || *(_DWORD *)(v10 + 36) != 306)
      {
        return 0;
      }
      v31 = (uint64_t *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
      v21 = *v31;
      v32 = v31[4];
      if (v38 == v21 && v37 == v32)
        goto LABEL_86;
      if (v38 != v32)
        return 0;
      goto LABEL_96;
    }
    v14 = *(_QWORD *)(a3 - 96);
    if (*(_BYTE *)(v14 + 16) != 81)
      return 0;
    v20 = *(_QWORD *)(a3 - 64);
    v21 = *(_QWORD *)(v14 - 64);
    v22 = *(_QWORD *)(v14 - 32);
    goto LABEL_76;
  }
LABEL_86:
  if (v8 != a1)
  {
    if (a1 == 306)
    {
      v26 = 305;
    }
    else if (a1 == 274)
    {
      v26 = 275;
    }
    else
    {
      v26 = a1 == 275 ? 274 : 306;
    }
    v4 = a3;
    if (v8 != v26)
      return 0;
  }
  return v4;
}

uint64_t sub_1C4E7C5D8(uint64_t a1, llvm::Constant *a2)
{
  llvm::APFloatBase *SplatValue;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  llvm::Type *v12;
  llvm::UndefValue *AggregateElement;
  int v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;

  if (!a2 || *((_BYTE *)a2 + 16) != 16)
  {
    v9 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v10 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
    else
      v10 = 0;
    if (v10)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((_BYTE *)SplatValue + 16) == 16)
        goto LABEL_4;
      if (*(_BYTE *)(v9 + 8) == 18)
      {
        v11 = *(_DWORD *)(v9 + 32);
        if (v11)
        {
          v12 = 0;
          LOBYTE(v8) = 0;
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement(a2, v12);
            if (!AggregateElement)
              break;
            v14 = *((unsigned __int8 *)AggregateElement + 16);
            if ((v14 - 11) >= 2)
            {
              if (v14 != 16)
                break;
              v16 = *((_QWORD *)AggregateElement + 3);
              v15 = (char *)AggregateElement + 24;
              v17 = *((_DWORD *)v15 + 2);
              v18 = (_QWORD *)(v16 + 8 * ((v17 - 1) >> 6));
              if (v17 < 0x41)
                v18 = v15;
              if (((*v18 >> (v17 - 1)) & 1) == 0)
                break;
              LOBYTE(v8) = 1;
            }
            v12 = (llvm::Type *)((_DWORD)v12 + 1);
            if (v11 == (_DWORD)v12)
              return v8 & 1;
          }
        }
      }
    }
    LOBYTE(v8) = 0;
    return v8 & 1;
  }
  SplatValue = a2;
LABEL_4:
  v5 = *((_QWORD *)SplatValue + 3);
  v4 = (char *)SplatValue + 24;
  v6 = *((_DWORD *)v4 + 2);
  v7 = (_QWORD *)(v5 + 8 * ((v6 - 1) >> 6));
  if (v6 < 0x41)
    v7 = v4;
  v8 = (*v7 >> (v6 - 1)) & 1;
  return v8 & 1;
}

uint64_t sub_1C4E7C6F8(unsigned int a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int8 *v4;
  BOOL v5;
  char isNullValue;
  char v7;

  result = 0;
  if (a2 && *(_BYTE *)(a2 + 16) == 84)
  {
    v4 = *(unsigned __int8 **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * a1);
    if (v4)
      v5 = v4[16] > 0x14u;
    else
      v5 = 1;
    if (v5)
    {
      return 0;
    }
    else
    {
      isNullValue = llvm::Constant::isNullValue((llvm::Constant *)v4);
      if ((isNullValue & 1) != 0)
        return 1;
      else
        return sub_1C4E71060((uint64_t)&v7, (llvm::Constant *)v4);
    }
  }
  return result;
}

BOOL sub_1C4E7C77C(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  _BYTE v9[16];
  unsigned __int8 v10;

  sub_1C4E7C808(a1, a2, (uint64_t)v9);
  v4 = v10;
  if (v10)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 80);
    if (v6 >= *(_DWORD *)(a1 + 84))
    {
      v8 = v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 72, a1 + 88, v6 + 1, 8);
      v4 = v8;
      LODWORD(v6) = *(_DWORD *)(a1 + 80);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 80);
  }
  return v4 != 0;
}

_QWORD *sub_1C4E7C808@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C4E7C8C0(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 8;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = 0;
    v10 = v12 + 8 * v13;
  }
  else
  {
    result = sub_1C4E7C968((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 8;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = v8 + 8 * v9;
    v11 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1C4E7C8C0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_15:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4E7C968(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v8;
  _QWORD *v9;

  v4 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v5 = 8;
  else
    v5 = a1[4];
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  v8 = (uint64_t)a1;
  sub_1C4E7CA24((uint64_t)a1, v5);
  v9 = 0;
  sub_1C4E7C8C0(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C4E7CA24(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C619B38C(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C619B38C(a1, v14, v8);
}

void llvm::initializeIntervalPartitionPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82DF48);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E7CBEC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82DF48, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E7CBEC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Interval Partition Construction";
  *(_QWORD *)(v2 + 8) = 31;
  *(_QWORD *)(v2 + 16) = "intervals";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &llvm::IntervalPartition::ID;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::IntervalPartition>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

llvm::IntervalPartition *llvm::IntervalPartition::IntervalPartition(llvm::IntervalPartition *this, llvm::IntervalPartition *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD v15[2];
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[3];
  char v21;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::IntervalPartition::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E81386F0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  v16 = 0;
  v17 = 0;
  v20[0] = 0;
  v20[1] = 0;
  v18 = 0;
  v19 = v20;
  v21 = 0;
  v20[2] = a2;
  sub_1C4E7D65C((uint64_t)&v16, *((_QWORD *)a2 + 7));
  v3 = *((_QWORD *)v17 - 2);
  *((_QWORD *)this + 7) = v3;
  llvm::IntervalPartition::addIntervalToPartition((uint64_t)this, v3);
  sub_1C4E7CDD4((uint64_t)&v16);
  v4 = 0;
  v5 = 0;
  memset(v15, 0, sizeof(v15));
  v12 = 0u;
  v13 = 0;
  v14 = v15;
  while (1)
  {
    v6 = v16;
    if (v17 - v16 == v5 - (_QWORD)v4)
      break;
LABEL_10:
    llvm::IntervalPartition::addIntervalToPartition((uint64_t)this, *((_QWORD *)v17 - 2));
    sub_1C4E7CDD4((uint64_t)&v16);
    v5 = *((_QWORD *)&v12 + 1);
    v4 = (_QWORD *)v12;
  }
  while (v6 != v17)
  {
    if (*(_QWORD *)v6 != *v4 || *((_QWORD *)v6 + 1) != v4[1])
      goto LABEL_10;
    v6 += 16;
    v4 += 2;
  }
  sub_1C619BAA4((char **)&v12);
  v8 = (uint64_t **)*((_QWORD *)this + 8);
  v9 = (uint64_t **)*((_QWORD *)this + 9);
  while (v8 != v9)
  {
    v10 = *v8++;
    llvm::IntervalPartition::updatePredecessors(this, v10);
  }
  sub_1C619BAA4(&v16);
  return this;
}

{
  return llvm::IntervalPartition::IntervalPartition(this, a2);
}

uint64_t sub_1C4E7CDD4(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;

  v2 = *(_QWORD *)(a1 + 8);
  while (1)
  {
    v3 = *(unint64_t **)(v2 - 8);
    v4 = *(unint64_t **)(*(_QWORD *)(v2 - 16) + 40);
    if (v3 != v4)
      break;
LABEL_21:
    if (*(_BYTE *)(a1 + 56))
    {
      v17 = *(_QWORD **)(v2 - 16);
      if (v17)
      {
        v18 = sub_1C619BA10(v17);
        MEMORY[0x1CAA32FC0](v18, 0xA0C40CC6163FFLL);
        v2 = *(_QWORD *)(a1 + 8);
      }
    }
    v2 -= 16;
    *(_QWORD *)(a1 + 8) = v2;
    if (*(_QWORD *)a1 == v2)
      return a1;
  }
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD **)(v5 + 40);
    v6 = (_QWORD *)(v5 + 40);
    v7 = v8;
    if (v8)
    {
      v9 = *v3;
      v10 = v6;
      do
      {
        v11 = v7[4];
        v12 = v11 >= v9;
        if (v11 >= v9)
          v13 = v7;
        else
          v13 = v7 + 1;
        if (v12)
          v10 = v7;
        v7 = (_QWORD *)*v13;
      }
      while (*v13);
      v14 = v10 == v6 || v10[4] > v9 ? 0 : v10[5];
      v15 = a1;
    }
    else
    {
      v15 = a1;
      v14 = 0;
    }
    v16 = sub_1C4E7D65C(v15, v14);
    v3 = (unint64_t *)(*(_QWORD *)(v2 - 8) + 8);
    *(_QWORD *)(v2 - 8) = v3;
    if ((v16 & 1) != 0)
      return a1;
    if (v3 == v4)
    {
      v2 = *(_QWORD *)(a1 + 8);
      goto LABEL_21;
    }
  }
}

uint64_t sub_1C4E7CEE0(uint64_t a1, uint64_t *a2)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  llvm::Instruction *v12;
  int v13;
  unsigned int i;
  uint64_t *Successor;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t *v28;

  v28 = a2;
  sub_1C47BC21C((uint64_t **)(a1 + 24), (unint64_t *)&v28, &v28);
  v5 = v4;
  if ((v4 & 1) != 0)
  {
    v6 = operator new();
    v7 = v28;
    *(_QWORD *)v6 = v28;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    v8 = operator new(8uLL);
    *v8 = v7;
    *(_QWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v6 + 16) = v8 + 1;
    *(_QWORD *)(v6 + 24) = v8 + 1;
    v9 = (uint64_t *)a2[5];
    if (v9 == a2 + 5)
    {
LABEL_19:
      v16 = 0;
    }
    else
    {
      if (v9)
        v10 = v9 - 3;
      else
        v10 = 0;
      v11 = *((unsigned __int8 *)v10 + 16);
      if ((v11 - 29) >= 0xB)
        v12 = 0;
      else
        v12 = (llvm::Instruction *)v10;
      if (v11 != 30)
      {
        v13 = 2;
        v16 = 0;
        switch(*((_BYTE *)v10 + 16))
        {
          case 0x1E:
            __break(1u);
            goto LABEL_42;
          case 0x1F:
            v13 = (*((_DWORD *)v10 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_18;
          case 0x20:
          case 0x26:
LABEL_42:
            v13 = (*((_DWORD *)v10 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_18;
          case 0x21:
            goto LABEL_13;
          case 0x24:
            v13 = *((_WORD *)v10 + 9) & 1;
            goto LABEL_18;
          case 0x25:
            v13 = 1;
            goto LABEL_13;
          case 0x27:
            v13 = *((_DWORD *)v10 + 20) + 1;
LABEL_18:
            if (!v13)
              goto LABEL_19;
            goto LABEL_13;
          default:
            goto LABEL_20;
        }
      }
      if ((*((_DWORD *)v10 + 5) & 0x7FFFFFF) == 3)
        v13 = 2;
      else
        v13 = 1;
LABEL_13:
      for (i = 0; i != v13; ++i)
      {
        Successor = (uint64_t *)llvm::Instruction::getSuccessor(v12, i);
        sub_1C4E7D138(a1, (_QWORD *)v6, Successor);
      }
      v16 = *(_QWORD *)(v6 + 32);
    }
LABEL_20:
    v18 = *(uint64_t **)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v18 >= v17)
    {
      v20 = *(uint64_t **)a1;
      v21 = ((uint64_t)v18 - *(_QWORD *)a1) >> 4;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60)
        abort();
      v23 = v17 - (_QWORD)v20;
      if (v23 >> 3 > v22)
        v22 = v23 >> 3;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 >> 60)
          sub_1C4764EE4();
        v25 = (char *)operator new(16 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = (uint64_t *)&v25[16 * v21];
      *v26 = v6;
      v26[1] = v16;
      v19 = v26 + 2;
      if (v18 != v20)
      {
        do
        {
          *((_OWORD *)v26 - 1) = *((_OWORD *)v18 - 1);
          v26 -= 2;
          v18 -= 2;
        }
        while (v18 != v20);
        v18 = *(uint64_t **)a1;
      }
      *(_QWORD *)a1 = v26;
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = &v25[16 * v24];
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v18 = v6;
      v18[1] = v16;
      v19 = v18 + 2;
    }
    *(_QWORD *)(a1 + 8) = v19;
  }
  return v5 & 1;
}

void sub_1C4E7D138(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t **v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  BOOL v25;
  uint64_t **j;
  char *v28;
  char *v29;
  uint64_t **v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t **v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  llvm::Instruction *v47;
  int v48;
  unsigned int i;
  uint64_t Successor;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t **v56;
  char *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;

  v60 = a3;
  v6 = *(_QWORD **)(a1 + 32);
  if (!v6)
  {
LABEL_6:
    v8 = a3[1];
    if (v8)
    {
      while (1)
      {
        v9 = *(_QWORD *)(v8 + 24);
        v10 = *(unsigned __int8 *)(v9 + 16);
        v11 = v9 && v10 >= 0x1C;
        if (v11 && v10 - 29 < 0xB)
          break;
        v8 = *(_QWORD *)(v8 + 8);
        if (!v8)
          goto LABEL_16;
      }
      v13 = (uint64_t **)a2[2];
      if ((uint64_t **)a2[1] == v13)
      {
LABEL_46:
        v28 = (char *)a2[4];
        v29 = (char *)a2[5];
        if (v28 != v29)
        {
          v30 = (uint64_t **)a2[4];
          while (*v30 != a3)
          {
            if (++v30 == (uint64_t **)v29)
              goto LABEL_50;
          }
          return;
        }
LABEL_50:
        v31 = a2[6];
        if ((unint64_t)v29 < v31)
          goto LABEL_65;
        v32 = (v29 - v28) >> 3;
        v33 = v32 + 1;
        if (!((unint64_t)(v32 + 1) >> 61))
        {
          v34 = v31 - (_QWORD)v28;
          if (v34 >> 2 > v33)
            v33 = v34 >> 2;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            if (v35 >> 61)
              goto LABEL_117;
            v36 = (char *)operator new(8 * v35);
          }
          else
          {
            v36 = 0;
          }
          v56 = (uint64_t **)&v36[8 * v32];
          v57 = &v36[8 * v35];
          *v56 = a3;
          v39 = v56 + 1;
          if (v28 == v29)
            goto LABEL_108;
          do
          {
            v58 = (uint64_t *)*((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v56 = v58;
          }
          while (v29 != v28);
          goto LABEL_107;
        }
LABEL_116:
        abort();
      }
LABEL_29:
      v22 = *(_QWORD *)(v9 + 40);
      v23 = (_QWORD *)a2[1];
      while (*v23 != v22)
      {
        if (++v23 == v13)
          goto LABEL_46;
      }
      while (1)
      {
        v8 = *(_QWORD *)(v8 + 8);
        if (!v8)
          break;
        v9 = *(_QWORD *)(v8 + 24);
        v24 = *(unsigned __int8 *)(v9 + 16);
        if (v9)
          v25 = v24 >= 0x1C;
        else
          v25 = 0;
        if (v25 && v24 - 29 < 0xB)
          goto LABEL_29;
      }
    }
    else
    {
LABEL_16:
      v13 = (uint64_t **)a2[2];
    }
    v14 = a2[3];
    if ((unint64_t)v13 >= v14)
    {
      v16 = (_QWORD *)a2[1];
      v17 = v13 - (uint64_t **)v16;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
        goto LABEL_116;
      v19 = v14 - (_QWORD)v16;
      if (v19 >> 2 > v18)
        v18 = v19 >> 2;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 61)
          goto LABEL_117;
        v21 = (char *)operator new(8 * v20);
      }
      else
      {
        v21 = 0;
      }
      v40 = (uint64_t **)&v21[8 * v17];
      *v40 = a3;
      v15 = v40 + 1;
      if (v13 != v16)
      {
        do
        {
          v41 = *--v13;
          *--v40 = v41;
        }
        while (v13 != v16);
        v13 = (uint64_t **)a2[1];
      }
      a2[1] = v40;
      a2[2] = v15;
      a2[3] = &v21[8 * v20];
      if (v13)
        operator delete(v13);
    }
    else
    {
      *v13 = a3;
      v15 = v13 + 1;
    }
    a2[2] = v15;
    sub_1C47BC21C((uint64_t **)(a1 + 24), (unint64_t *)&v60, &v60);
    v42 = (uint64_t **)a2[4];
    v43 = (uint64_t **)a2[5];
    if (v42 != v43)
    {
      while (*v42 != v60)
      {
        if (++v42 == v43)
          goto LABEL_77;
      }
      sub_1C4E7D5A8((uint64_t)(a2 + 4), (uint64_t)v60);
    }
LABEL_77:
    v44 = (uint64_t *)a3[5];
    if (v44 != a3 + 5)
    {
      if (v44)
        v45 = v44 - 3;
      else
        v45 = 0;
      v46 = *((unsigned __int8 *)v45 + 16);
      if ((v46 - 29) >= 0xB)
        v47 = 0;
      else
        v47 = (llvm::Instruction *)v45;
      if (v46 != 30)
      {
        v48 = 2;
        switch(*((_BYTE *)v45 + 16))
        {
          case 0x1E:
            __break(1u);
            goto LABEL_119;
          case 0x1F:
            v48 = (*((_DWORD *)v45 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_114;
          case 0x20:
          case 0x26:
LABEL_119:
            v48 = (*((_DWORD *)v45 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_114;
          case 0x21:
            goto LABEL_88;
          case 0x24:
            v48 = *((_WORD *)v45 + 9) & 1;
            goto LABEL_114;
          case 0x25:
            v48 = 1;
            goto LABEL_88;
          case 0x27:
            v48 = *((_DWORD *)v45 + 20) + 1;
LABEL_114:
            if (!v48)
              return;
            goto LABEL_88;
          default:
            return;
        }
      }
      if ((*((_DWORD *)v45 + 5) & 0x7FFFFFF) == 3)
        v48 = 2;
      else
        v48 = 1;
LABEL_88:
      for (i = 0; i != v48; ++i)
      {
        Successor = llvm::Instruction::getSuccessor(v47, i);
        sub_1C4E7D138(a1, a2, Successor);
      }
    }
    return;
  }
  while (1)
  {
    v7 = v6[4];
    if (v7 <= (unint64_t)a3)
      break;
LABEL_5:
    v6 = (_QWORD *)*v6;
    if (!v6)
      goto LABEL_6;
  }
  if (v7 < (unint64_t)a3)
  {
    ++v6;
    goto LABEL_5;
  }
  for (j = (uint64_t **)a2[1]; j != (uint64_t **)a2[2]; ++j)
  {
    if (*j == a3)
      return;
  }
  v28 = (char *)a2[4];
  v29 = (char *)a2[5];
  if (v28 == v29)
  {
LABEL_64:
    v38 = a2[6];
    if ((unint64_t)v29 < v38)
    {
LABEL_65:
      *(_QWORD *)v29 = a3;
      v39 = v29 + 8;
LABEL_110:
      a2[5] = v39;
      return;
    }
    v51 = (v29 - v28) >> 3;
    v52 = v51 + 1;
    if (!((unint64_t)(v51 + 1) >> 61))
    {
      v53 = v38 - (_QWORD)v28;
      if (v53 >> 2 > v52)
        v52 = v53 >> 2;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
        v54 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v54 = v52;
      if (!v54)
      {
        v55 = 0;
        goto LABEL_105;
      }
      if (!(v54 >> 61))
      {
        v55 = (char *)operator new(8 * v54);
LABEL_105:
        v56 = (uint64_t **)&v55[8 * v51];
        v57 = &v55[8 * v54];
        *v56 = a3;
        v39 = v56 + 1;
        if (v28 == v29)
          goto LABEL_108;
        do
        {
          v59 = (uint64_t *)*((_QWORD *)v29 - 1);
          v29 -= 8;
          *--v56 = v59;
        }
        while (v29 != v28);
LABEL_107:
        v28 = (char *)a2[4];
LABEL_108:
        a2[4] = v56;
        a2[5] = v39;
        a2[6] = v57;
        if (v28)
          operator delete(v28);
        goto LABEL_110;
      }
LABEL_117:
      sub_1C4764EE4();
    }
    goto LABEL_116;
  }
  v37 = (uint64_t **)a2[4];
  while (*v37 != a3)
  {
    if (++v37 == (uint64_t **)v29)
      goto LABEL_64;
  }
}

uint64_t sub_1C4E7D5A8(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD **)(result + 8);
  v3 = *(_QWORD **)result;
  if (*(_QWORD **)result != v2)
  {
    while (*v3 != a2)
    {
      if (++v3 == v2)
      {
        v3 = *(_QWORD **)(result + 8);
        break;
      }
    }
  }
  v4 = v3 + 1;
  if (v3 != v2 && v4 != v2)
  {
    do
    {
      if (*v4 != a2)
        *v3++ = *v4;
      ++v4;
    }
    while (v4 != v2);
    v2 = *(_QWORD **)(result + 8);
  }
  if (v3 != v2)
    *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t sub_1C4E7D65C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t *v33;

  v33 = *(uint64_t **)a2;
  sub_1C47BC21C((uint64_t **)(a1 + 24), (unint64_t *)&v33, &v33);
  v5 = v4;
  if ((v4 & 1) != 0)
  {
    v6 = operator new();
    v7 = v33;
    *(_QWORD *)v6 = v33;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    v8 = operator new(8uLL);
    *v8 = v7;
    *(_QWORD *)(v6 + 8) = v8;
    *(_QWORD *)(v6 + 16) = v8 + 1;
    *(_QWORD *)(v6 + 24) = v8 + 1;
    v10 = *(unint64_t **)(a2 + 32);
    v9 = *(unint64_t **)(a2 + 40);
    if (v10 == v9)
    {
      v11 = 0;
    }
    else
    {
      do
      {
        v13 = *(_QWORD *)(a1 + 48);
        v16 = *(_QWORD **)(v13 + 40);
        v14 = (_QWORD *)(v13 + 40);
        v15 = v16;
        if (!v16)
          goto LABEL_16;
        v17 = *v10;
        v18 = v14;
        do
        {
          v19 = v15[4];
          v20 = v19 >= v17;
          if (v19 >= v17)
            v21 = v15;
          else
            v21 = v15 + 1;
          if (v20)
            v18 = v15;
          v15 = (_QWORD *)*v21;
        }
        while (*v21);
        if (v18 != v14 && v18[4] <= v17)
          v12 = (uint64_t **)v18[5];
        else
LABEL_16:
          v12 = 0;
        sub_1C4E7D850(a1, (_QWORD *)v6, v12);
        ++v10;
      }
      while (v10 != v9);
      v11 = *(_QWORD *)(v6 + 32);
    }
    v23 = *(uint64_t **)(a1 + 8);
    v22 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v23 >= v22)
    {
      v25 = *(uint64_t **)a1;
      v26 = ((uint64_t)v23 - *(_QWORD *)a1) >> 4;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60)
        abort();
      v28 = v22 - (_QWORD)v25;
      if (v28 >> 3 > v27)
        v27 = v28 >> 3;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
        v29 = 0xFFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 >> 60)
          sub_1C4764EE4();
        v30 = (char *)operator new(16 * v29);
      }
      else
      {
        v30 = 0;
      }
      v31 = (uint64_t *)&v30[16 * v26];
      *v31 = v6;
      v31[1] = v11;
      v24 = v31 + 2;
      if (v23 != v25)
      {
        do
        {
          *((_OWORD *)v31 - 1) = *((_OWORD *)v23 - 1);
          v31 -= 2;
          v23 -= 2;
        }
        while (v23 != v25);
        v23 = *(uint64_t **)a1;
      }
      *(_QWORD *)a1 = v31;
      *(_QWORD *)(a1 + 8) = v24;
      *(_QWORD *)(a1 + 16) = &v30[16 * v29];
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v23 = v6;
      v23[1] = v11;
      v24 = v23 + 2;
    }
    *(_QWORD *)(a1 + 8) = v24;
  }
  return v5 & 1;
}

void sub_1C4E7D850(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  uint64_t *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t **i;
  uint64_t **v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  char *v41;
  uint64_t **v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  int64_t v61;
  size_t v62;
  char *v63;
  void *v64;
  uint64_t **v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  BOOL v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  char *__src;
  uint64_t *v81;

  v6 = *a3;
  v81 = *a3;
  v7 = *(_QWORD **)(a1 + 32);
  if (!v7)
  {
LABEL_6:
    v9 = a3[7];
    v10 = a3[8];
    if (v9 == v10)
    {
      v12 = (char *)a2[1];
      v11 = (char *)a2[2];
    }
    else
    {
      v12 = (char *)a2[1];
      v11 = (char *)a2[2];
      if (v12 == v11)
      {
LABEL_14:
        v14 = (char *)a2[4];
        v15 = (char *)a2[5];
        if (v14 != v15)
        {
          v16 = (uint64_t **)a2[4];
          while (*v16 != v6)
          {
            if (++v16 == (uint64_t **)v15)
              goto LABEL_18;
          }
          return;
        }
LABEL_18:
        v17 = a2[6];
        if ((unint64_t)v15 < v17)
          goto LABEL_49;
        v18 = (v15 - v14) >> 3;
        v19 = v18 + 1;
        if (!((unint64_t)(v18 + 1) >> 61))
        {
          v20 = v17 - (_QWORD)v14;
          if (v20 >> 2 > v19)
            v19 = v20 >> 2;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            if (v21 >> 61)
              goto LABEL_117;
            v22 = (char *)operator new(8 * v21);
          }
          else
          {
            v22 = 0;
          }
          v42 = (uint64_t **)&v22[8 * v18];
          v43 = &v22[8 * v21];
          *v42 = v6;
          v37 = v42 + 1;
          if (v14 == v15)
            goto LABEL_112;
          do
          {
            v44 = (uint64_t *)*((_QWORD *)v15 - 1);
            v15 -= 8;
            *--v42 = v44;
          }
          while (v15 != v14);
          goto LABEL_111;
        }
        goto LABEL_116;
      }
      do
      {
        v13 = (_QWORD *)a2[1];
        while (*v13 != *v9)
        {
          if (++v13 == (_QWORD *)v11)
            goto LABEL_14;
        }
        ++v9;
      }
      while (v9 != v10);
    }
    v24 = a3[1];
    v23 = a3[2];
    if ((char *)v23 - (char *)v24 >= 1)
    {
      v25 = v23 - v24;
      v26 = v11 - v12;
      v27 = &v12[(v11 - v12) & 0xFFFFFFFFFFFFFFF8];
      v28 = a2[3];
      if (v25 <= (v28 - (uint64_t)v11) >> 3)
      {
        v38 = (v11 - v27) >> 3;
        if (v38 >= v25)
        {
          v39 = (char *)&v24[v25];
          v41 = v11;
        }
        else
        {
          v39 = (char *)&v24[v38];
          v40 = (char *)v23 - v39;
          if (v23 != (uint64_t *)v39)
            memmove(v11, &v24[v38], (char *)v23 - v39);
          v41 = &v11[v40];
          a2[2] = &v11[v40];
          if (v11 - v27 < 1)
            goto LABEL_87;
        }
        v50 = &v27[8 * v25];
        v51 = &v41[-8 * v25];
        v52 = v41;
        if (v51 < v11)
        {
          v52 = v41;
          do
          {
            v53 = *(_QWORD *)v51;
            v51 += 8;
            *v52++ = v53;
          }
          while (v51 < v11);
        }
        a2[2] = v52;
        if (v41 != v50)
          memmove(&v41[-8 * ((v41 - v50) >> 3)], v27, v41 - v50);
        if (v39 != (char *)v24)
          memmove(v27, v24, v39 - (char *)v24);
      }
      else
      {
        __src = &v12[(v11 - v12) & 0xFFFFFFFFFFFFFFF8];
        v29 = v26 >> 3;
        v30 = (v26 >> 3) + v25;
        if (v30 >> 61)
          goto LABEL_116;
        v31 = v28 - (_QWORD)v12;
        if (v31 >> 2 > v30)
          v30 = v31 >> 2;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          if (v32 >> 61)
            goto LABEL_117;
          v33 = (char *)operator new(8 * v32);
          v29 = v26 >> 3;
        }
        else
        {
          v33 = 0;
        }
        v54 = &v33[8 * v29];
        v55 = &v54[8 * v25];
        v56 = 8 * v25;
        v57 = v54;
        do
        {
          v58 = *v24++;
          *(_QWORD *)v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
        if ((unint64_t)v26 >= 8)
        {
          v59 = 8 * v29;
          do
          {
            *(_QWORD *)&v33[v59 - 8] = *(_QWORD *)&v12[v59 - 8];
            v59 -= 8;
          }
          while (v59);
          v11 = (char *)a2[2];
          v54 = v33;
        }
        v60 = &v33[8 * v32];
        v61 = v11 - __src;
        if (v11 != __src)
        {
          v62 = v11 - __src;
          v63 = v55;
          memmove(v55, __src, v62);
          v55 = v63;
        }
        v64 = (void *)a2[1];
        a2[1] = v54;
        a2[2] = &v55[v61];
        a2[3] = v60;
        if (v64)
          operator delete(v64);
      }
    }
LABEL_87:
    sub_1C47BC21C((uint64_t **)(a1 + 24), (unint64_t *)&v81, &v81);
    v65 = (uint64_t **)a2[4];
    v66 = (uint64_t **)a2[5];
    if (v65 != v66)
    {
      while (*v65 != v81)
      {
        if (++v65 == v66)
          goto LABEL_92;
      }
      sub_1C4E7D5A8((uint64_t)(a2 + 4), (uint64_t)v81);
    }
LABEL_92:
    v68 = a3[4];
    v67 = a3[5];
    while (v68 != v67)
    {
      v69 = *(_QWORD *)(a1 + 48);
      v72 = *(_QWORD **)(v69 + 40);
      v70 = (_QWORD *)(v69 + 40);
      v71 = v72;
      if (!v72)
        goto LABEL_105;
      v73 = *v68;
      v74 = v70;
      do
      {
        v75 = v71[4];
        v76 = v75 >= v73;
        if (v75 >= v73)
          v77 = v71;
        else
          v77 = v71 + 1;
        if (v76)
          v74 = v71;
        v71 = (_QWORD *)*v77;
      }
      while (*v77);
      if (v74 != v70 && v74[4] <= v73)
        v78 = v74[5];
      else
LABEL_105:
        v78 = 0;
      sub_1C4E7D850(a1, a2, v78);
      ++v68;
    }
    return;
  }
  while (1)
  {
    v8 = v7[4];
    if ((unint64_t)v6 >= v8)
      break;
LABEL_5:
    v7 = (_QWORD *)*v7;
    if (!v7)
      goto LABEL_6;
  }
  if (v8 < (unint64_t)v6)
  {
    ++v7;
    goto LABEL_5;
  }
  for (i = (uint64_t **)a2[1]; i != (uint64_t **)a2[2]; ++i)
  {
    if (*i == v6)
      return;
  }
  v14 = (char *)a2[4];
  v15 = (char *)a2[5];
  if (v14 == v15)
  {
LABEL_48:
    v36 = a2[6];
    if ((unint64_t)v15 < v36)
    {
LABEL_49:
      *(_QWORD *)v15 = v6;
      v37 = v15 + 8;
LABEL_114:
      a2[5] = v37;
      return;
    }
    v45 = (v15 - v14) >> 3;
    v46 = v45 + 1;
    if (!((unint64_t)(v45 + 1) >> 61))
    {
      v47 = v36 - (_QWORD)v14;
      if (v47 >> 2 > v46)
        v46 = v47 >> 2;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (!v48)
      {
        v49 = 0;
        goto LABEL_109;
      }
      if (!(v48 >> 61))
      {
        v49 = (char *)operator new(8 * v48);
LABEL_109:
        v42 = (uint64_t **)&v49[8 * v45];
        v43 = &v49[8 * v48];
        *v42 = v6;
        v37 = v42 + 1;
        if (v14 == v15)
          goto LABEL_112;
        do
        {
          v79 = (uint64_t *)*((_QWORD *)v15 - 1);
          v15 -= 8;
          *--v42 = v79;
        }
        while (v15 != v14);
LABEL_111:
        v14 = (char *)a2[4];
LABEL_112:
        a2[4] = v42;
        a2[5] = v37;
        a2[6] = v43;
        if (v14)
          operator delete(v14);
        goto LABEL_114;
      }
LABEL_117:
      sub_1C4764EE4();
    }
LABEL_116:
    abort();
  }
  v35 = (uint64_t **)a2[4];
  while (*v35 != v6)
  {
    if (++v35 == (uint64_t **)v15)
      goto LABEL_48;
  }
}

uint64_t *sub_1C4E7DD38(uint64_t *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;

  v6 = result;
  v8 = (uint64_t **)(result + 1);
  v7 = (uint64_t *)result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = v7[4];
        if (v10 <= a2)
          break;
        v7 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v10 >= a2)
        break;
      v7 = v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v9 = (uint64_t **)(result + 1);
LABEL_9:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = a3;
    v11[5] = a4;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v9;
    *v8 = v11;
    v12 = *(_QWORD *)*v6;
    if (v12)
    {
      *v6 = v12;
      v13 = *v8;
    }
    else
    {
      v13 = v11;
    }
    result = sub_1C4768E74((uint64_t *)v6[1], v13);
    ++v6[2];
  }
  return result;
}

void llvm::initializeLazyBranchProbabilityInfoPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82DF50);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E7DE58;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82DF50, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E7DE58(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeLoopInfoWrapperPassPass(a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Lazy Branch Probability Analysis";
  *(_QWORD *)(v2 + 8) = 32;
  *(_QWORD *)(v2 + 16) = "lazy-branch-prob";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &llvm::LazyBranchProbabilityInfoPass::ID;
  *(_WORD *)(v2 + 40) = 257;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::LazyBranchProbabilityInfoPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::LazyBranchProbabilityInfoPass::releaseMemory(llvm::LazyBranchProbabilityInfoPass *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
  {
    sub_1C4DC0BBC(result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t llvm::LazyBranchProbabilityInfoPass::runOnFunction(llvm::LazyBranchProbabilityInfoPass *this, llvm::Function *a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  void **v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t j;
  uint64_t v18;
  uint64_t v19;
  void *v21;
  void **v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25[2];
  int v26;
  uint64_t v27[2];
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  void *__src;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = (void **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::LoopInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::LoopInfoWrapperPass::ID);
  v7 = (void **)**((_QWORD **)this + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::TargetLibraryInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::TargetLibraryInfoWrapperPass::ID);
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  v27[0] = 0;
  v27[1] = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  llvm::TargetLibraryAnalysis::run(v9 + 32, (uint64_t)a2, (uint64_t)&v32);
  *(_QWORD *)(v9 + 240) = v32;
  v10 = (uint64_t *)(v9 + 240);
  if (*(_BYTE *)(v9 + 320))
  {
    if (v10 == &v32)
    {
LABEL_18:
      *(_DWORD *)(v9 + 312) = v36;
      goto LABEL_19;
    }
    v11 = (void **)(v9 + 248);
    v12 = v34;
    v13 = *(unsigned int *)(v9 + 256);
    if (v13 >= v34)
    {
      if (v34)
        memmove(*v11, __src, 8 * v34);
      goto LABEL_17;
    }
    if (*(_DWORD *)(v9 + 260) < v34)
    {
      *(_DWORD *)(v9 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9 + 248, v9 + 264, v12, 8);
    }
    else if ((_DWORD)v13)
    {
      memmove(*v11, __src, 8 * v13);
      goto LABEL_15;
    }
    v13 = 0;
LABEL_15:
    if (v13 != v34)
      memcpy((char *)*v11 + 8 * v13, (char *)__src + 8 * v13, 8 * v34 - 8 * v13);
LABEL_17:
    *(_DWORD *)(v9 + 256) = v12;
    goto LABEL_18;
  }
  v21 = (void *)(v9 + 264);
  *(_QWORD *)(v9 + 248) = v9 + 264;
  v22 = (void **)(v9 + 248);
  *(_QWORD *)(v9 + 256) = 0x600000000;
  v23 = v34;
  if (v34 && v22 != &__src)
  {
    if (v34 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9 + 248, v9 + 264, v34, 8);
      v24 = v34;
      if (!v34)
      {
LABEL_35:
        *(_DWORD *)(v9 + 256) = v23;
        goto LABEL_36;
      }
      v21 = *v22;
    }
    else
    {
      v24 = v34;
    }
    memcpy(v21, __src, 8 * v24);
    goto LABEL_35;
  }
LABEL_36:
  *(_DWORD *)(v9 + 312) = v36;
  *(_BYTE *)(v9 + 320) = 1;
LABEL_19:
  v14 = v6 + 32;
  if (__src != &v35)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v27);
  sub_1C4D8B52C(v25);
  v15 = operator new();
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_DWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 56) = 0;
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 72) = 1;
  for (i = 80; i != 144; i += 16)
    *(_QWORD *)(v15 + i) = -4096;
  *(_QWORD *)(v15 + 144) = 1;
  for (j = 152; j != 248; j += 24)
    *(_OWORD *)(v15 + j) = xmmword_1C85F22B0;
  *(_BYTE *)(v15 + 248) = 0;
  *(_QWORD *)(v15 + 256) = a2;
  *(_QWORD *)(v15 + 264) = v14;
  *(_QWORD *)(v15 + 272) = v10;
  v18 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v15;
  if (v18)
  {
    v19 = sub_1C4DC0BBC(v18);
    MEMORY[0x1CAA32FC0](v19, 0x1060C4069C990F3);
  }
  return 0;
}

uint64_t sub_1C4E7E27C(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeLazyBPIPassPass(a1, a2);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Lazy Block Frequency Analysis";
  *(_QWORD *)(v3 + 8) = 29;
  *(_QWORD *)(v3 + 16) = "lazy-block-freq";
  *(_QWORD *)(v3 + 24) = 15;
  *(_QWORD *)(v3 + 32) = &llvm::LazyBlockFrequencyInfoPass::ID;
  *(_WORD *)(v3 + 40) = 257;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::LazyBlockFrequencyInfoPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::LazyBlockFrequencyInfoPass::releaseMemory(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = 0;
  if (v1)
  {
    v2 = this;
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    this = v2;
  }
  *(_BYTE *)(this + 40) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 48) = 0;
  return this;
}

uint64_t llvm::LazyBlockFrequencyInfoPass::runOnFunction(llvm::LazyBlockFrequencyInfoPass *this, Function *a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;

  v4 = (void **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::LazyBranchProbabilityInfoPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::LazyBranchProbabilityInfoPass::ID);
  v7 = (void **)**((_QWORD **)this + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::LoopInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::LoopInfoWrapperPass::ID);
  *((_QWORD *)this + 6) = a2;
  *((_QWORD *)this + 7) = v6;
  *((_QWORD *)this + 8) = v9 + 32;
  return 0;
}

_DWORD *llvm::LazyCallGraph::EdgeSequence::insertEdgeInternal(_DWORD *a1, uint64_t a2, int a3)
{
  int v6;
  _DWORD *result;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  uint64_t v11;
  int v12;

  v6 = a1[2];
  v11 = a2;
  v12 = v6;
  result = (_DWORD *)sub_1C4E853AC(a1 + 12, &v11, &v12, (uint64_t)v10);
  v8 = a1[2];
  if (v8 >= a1[3])
    return sub_1C619C7F0(a1, a2, a3);
  v9 = 4;
  if (!a3)
    v9 = 0;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = v9 | a2;
  a1[2] = v8 + 1;
  return result;
}

uint64_t llvm::LazyCallGraph::EdgeSequence::setEdgeKind(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = 0;
  result = sub_1C4850EC8((uint64_t *)(a1 + 48), &v9, &v10);
  if ((result & 1) != 0)
    v6 = v10;
  else
    v6 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
  v7 = *(int *)(v6 + 8);
  v8 = 4;
  if (!a3)
    v8 = 0;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v7) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v7) & 0xFFFFFFFFFFFFFFFBLL | v8;
  return result;
}

BOOL llvm::LazyCallGraph::EdgeSequence::removeEdgeInternal(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = 0;
  v3 = sub_1C4850EC8((uint64_t *)(a1 + 48), &v7, &v8);
  v4 = v8;
  v5 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
  if (!v3)
    v4 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
  if (v4 != v5)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8 * *(int *)(v4 + 8)) = 0;
    *(_QWORD *)v4 = -8192;
    *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v4 != v5;
}

char *llvm::LazyCallGraph::Node::populateSlow(llvm::LazyCallGraph::Node *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ***v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t ****v18;
  uint64_t ***v19;
  uint64_t ****v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  BOOL v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  char v47;
  uint64_t v48;
  uint64_t ****v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unsigned int *v56;
  unint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  int v65;
  _BYTE v66[32];
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD v79[18];

  v79[16] = *MEMORY[0x1E0C80C00];
  v74 = 0u;
  v76 = 0;
  v73 = 0u;
  v71 = &v73;
  v72 = 0x400000000;
  v2 = (char *)this + 24;
  v75 = 0uLL;
  if (*((_BYTE *)this + 96))
  {
    sub_1C619C6B4((uint64_t)this + 24, (const void **)&v71);
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 9), 8);
    *(_OWORD *)((char *)this + 72) = v75;
    v75 = 0uLL;
    *((_DWORD *)this + 22) = v76;
    LODWORD(v76) = 0;
  }
  else
  {
    *((_QWORD *)this + 3) = (char *)this + 40;
    *((_QWORD *)this + 4) = 0x400000000;
    *((_QWORD *)this + 9) = 0;
    *(_QWORD *)&v75 = 0;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)&v75 + 1) = 0;
    *((_DWORD *)this + 22) = 0;
    LODWORD(v76) = 0;
    *((_BYTE *)this + 96) = 1;
  }
  MEMORY[0x1CAA32FB4](0, 8);
  if (v71 != &v73)
    free(v71);
  v77 = v79;
  v78 = 0x1000000000;
  v62 = v66;
  v63 = v66;
  v64 = 4;
  v65 = 0;
  v71 = &v74;
  v72 = (uint64_t)&v74;
  *(_QWORD *)&v73 = 16;
  DWORD2(v73) = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = *(_QWORD *)(v3 + 80);
  v59 = v3 + 72;
  if (v4 != v3 + 72)
  {
    while (1)
    {
      v5 = v4 - 24;
      if (!v4)
        v5 = 0;
      v6 = *(_QWORD *)(v5 + 48);
      v60 = v4;
      v61 = v5 + 40;
      if (v6 != v5 + 40)
        break;
LABEL_88:
      v4 = *(_QWORD *)(v60 + 8);
      if (v4 == v59)
        goto LABEL_89;
    }
    while (1)
    {
      v7 = (uint64_t ***)(v6 - 24);
      if (v6)
        v8 = v6 - 24;
      else
        v8 = 0;
      v9 = *(unsigned __int8 *)(v8 + 16) - 33;
      v46 = v9 > 0x33;
      v10 = (1 << v9) & 0x8000000000041;
      if (v46 || v10 == 0)
        goto LABEL_67;
      v68 = &v70;
      v69 = 0x100000000;
      v12 = *(_QWORD *)(v6 - 56);
      if (v12)
      {
        if (!*(_BYTE *)(v12 + 16) && *(_QWORD *)(v12 + 24) == *(_QWORD *)(v6 + 48))
          break;
      }
      if ((*(_BYTE *)(v6 - 1) & 0x20) == 0)
        goto LABEL_34;
      v13 = ***v7;
      v67 = v6 - 24;
      v14 = *(_DWORD *)(v13 + 2496);
      if (v14)
      {
        v15 = *(_QWORD *)(v13 + 2480);
        v16 = v14 - 1;
        v17 = v16 & ((v7 >> 4) ^ (v7 >> 9));
        v18 = (uint64_t ****)(v15 + 40 * v17);
        v19 = *v18;
        if (*v18 == v7)
          goto LABEL_30;
        v20 = 0;
        v21 = 1;
        while (v19 != (uint64_t ***)-4096)
        {
          if (v20)
            v22 = 0;
          else
            v22 = v19 == (uint64_t ***)-8192;
          if (v22)
            v20 = v18;
          v23 = v17 + v21++;
          v17 = v23 & v16;
          v18 = (uint64_t ****)(v15 + 40 * v17);
          v19 = *v18;
          if (*v18 == v7)
            goto LABEL_30;
        }
        if (v20)
          v49 = v20;
        else
          v49 = v18;
      }
      else
      {
        v49 = 0;
      }
      v18 = (uint64_t ****)sub_1C541AB24(v13 + 2480, (uint64_t)&v67, &v67, v49);
      v50 = v67;
      v18[4] = 0;
      v18[3] = 0;
      *v18 = (uint64_t ***)v50;
      v18[1] = (uint64_t ***)(v18 + 3);
      v18[2] = (uint64_t ***)0x100000000;
LABEL_30:
      v24 = *((unsigned int *)v18 + 4);
      if ((_DWORD)v24)
      {
        v25 = v18[1] + 1;
        v26 = 16 * v24;
        while (*((_DWORD *)v25 - 2) != 23)
        {
          v25 += 2;
          v26 -= 16;
          if (!v26)
            goto LABEL_34;
        }
        v29 = *v25;
        if (*v25)
        {
          v30 = *(unsigned int *)(v29 + 8);
          if ((_DWORD)v30)
          {
            v31 = -8 * v30;
            do
            {
              v32 = *(_QWORD *)(v29 + v31);
              if (v32)
              {
                v33 = *(_QWORD *)(v32 + 128);
                if (v33)
                {
                  v34 = v69;
                  if (v69 >= (unint64_t)HIDWORD(v69))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, (uint64_t)&v70, v69 + 1, 8);
                    v34 = v69;
                  }
                  *((_QWORD *)v68 + v34) = v33;
                  LODWORD(v69) = v69 + 1;
                }
              }
              v31 += 8;
            }
            while (v31);
          }
        }
      }
LABEL_34:
      v27 = (uint64_t *)v68;
      if ((_DWORD)v69)
      {
        v28 = (void **)((char *)v68 + 8 * v69);
        goto LABEL_48;
      }
LABEL_65:
      if (v27 != &v70)
        free(v27);
LABEL_67:
      v41 = *(_DWORD *)(v8 + 20);
      if ((v41 & 0x40000000) != 0)
      {
        v43 = *(uint64_t **)(v8 - 8);
        v42 = v41 & 0x7FFFFFF;
        if (v42)
        {
LABEL_71:
          v44 = 32 * v42;
          do
          {
            v45 = *v43;
            if (*v43)
              v46 = *(unsigned __int8 *)(*v43 + 16) > 0x14u;
            else
              v46 = 1;
            if (!v46)
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v71, *v43);
              if (v47)
              {
                v48 = v78;
                if (v78 >= (unint64_t)HIDWORD(v78))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v77, (uint64_t)v79, v78 + 1, 8);
                  v48 = v78;
                }
                v77[v48] = v45;
                LODWORD(v78) = v78 + 1;
              }
            }
            v43 += 4;
            v44 -= 32;
          }
          while (v44);
        }
      }
      else
      {
        v42 = v41 & 0x7FFFFFF;
        v43 = (uint64_t *)(v8 - 32 * v42);
        if (v42)
          goto LABEL_71;
      }
      v6 = *(_QWORD *)(v6 + 8);
      if (v6 == v61)
        goto LABEL_88;
    }
    v70 = *(_QWORD *)(v6 - 56);
    LODWORD(v69) = 1;
    v28 = &v71;
    v27 = &v70;
    while (1)
    {
LABEL_48:
      v36 = *v27;
      if (*v27)
        v37 = *(_BYTE *)(*v27 + 16) == 3;
      else
        v37 = 0;
      if (v37)
      {
        if ((*(_DWORD *)(v36 + 20) & 0x7FFFFFF) != 0)
          goto LABEL_57;
      }
      else if (*(_BYTE *)(*v27 + 16) || *(_QWORD *)(v36 + 72) != v36 + 72 || (*(_BYTE *)(v36 + 34) & 0x80) != 0)
      {
LABEL_57:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v62, *v27);
        if (v38)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v71, v36);
          v39 = *(_QWORD *)(v6 - 56);
          v35 = v39 && !*(_BYTE *)(v39 + 16) && *(_QWORD *)(v39 + 24) == *(_QWORD *)(v6 + 48);
          v40 = sub_1C4E7EC8C(*(_QWORD *)this, v36);
          sub_1C4E7EBD4((uint64_t)v2, (_DWORD *)this + 18, v40, v35);
        }
      }
      if (++v27 == (uint64_t *)v28)
      {
        v27 = (uint64_t *)v68;
        goto LABEL_65;
      }
    }
  }
LABEL_89:
  v68 = this;
  llvm::LazyCallGraph::visitReferences(&v77, (llvm::SmallPtrSetImplBase *)&v71, (uint64_t (*)(uint64_t))sub_1C4E8543C, (uint64_t)&v68);
  v51 = *(unsigned int *)(*(_QWORD *)this + 624);
  if ((_DWORD)v51)
  {
    v52 = *(uint64_t **)(*(_QWORD *)this + 616);
    v53 = 8 * v51;
    do
    {
      v54 = *v52;
      v55 = sub_1C477672C((uint64_t)&v71, *v52);
      if ((void *)v72 == v71)
        v56 = (unsigned int *)&v73 + 1;
      else
        v56 = (unsigned int *)&v73;
      if (v55 == (_QWORD *)(v72 + 8 * *v56))
      {
        v57 = sub_1C4E7EC8C(*(_QWORD *)this, v54);
        sub_1C4E7EBD4((uint64_t)v2, (_DWORD *)this + 18, v57, 0);
      }
      ++v52;
      v53 -= 8;
    }
    while (v53);
  }
  if ((void *)v72 != v71)
    free((void *)v72);
  if (v63 != v62)
    free(v63);
  if (v77 != v79)
    free(v77);
  return v2;
}

uint64_t sub_1C4E7EBD4(uint64_t a1, _DWORD *a2, uint64_t a3, int a4)
{
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v14[24];

  v7 = *(_DWORD *)(a1 + 8);
  v12 = a3;
  v13 = v7;
  result = sub_1C4E853AC(a2, &v12, &v13, (uint64_t)v14);
  if (v14[16])
  {
    v9 = 4;
    if (!a4)
      v9 = 0;
    v10 = v9 | a3;
    v11 = *(unsigned int *)(a1 + 8);
    if (v11 >= *(_DWORD *)(a1 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v11 + 1, 8);
      *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 8)) = v10;
      LODWORD(v11) = *(_DWORD *)(a1 + 8);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v10;
    }
    *(_DWORD *)(a1 + 8) = v11 + 1;
  }
  return result;
}

unint64_t sub_1C4E7EC8C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t result;
  uint64_t v6;

  v6 = a2;
  v4 = sub_1C4E851E8((uint64_t *)(a1 + 96), &v6);
  result = v4[1];
  if (!result)
  {
    result = sub_1C484358C(a1, 104, 3);
    v4[1] = result;
    *(_QWORD *)result = a1;
    *(_QWORD *)(result + 8) = a2;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
  }
  return result;
}

_DWORD *llvm::LazyCallGraph::visitReferences(_DWORD *result, llvm::SmallPtrSetImplBase *this, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;

  v4 = result[2];
  if (v4)
  {
    v8 = (uint64_t)result;
    v9 = (uint64_t)(result + 4);
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)v8 + 8 * v4 - 8);
      *(_DWORD *)(v8 + 8) = v4 - 1;
      v11 = *(unsigned __int8 *)(v10 + 16);
      if (v10)
        v12 = v11 == 0;
      else
        v12 = 0;
      if (v12)
      {
        if (*(_QWORD *)(v10 + 72) != v10 + 72 || (*(_BYTE *)(v10 + 34) & 0x80) != 0)
          result = (_DWORD *)a3(a4);
        goto LABEL_14;
      }
      if (v11 != 4)
      {
        v13 = *(_DWORD *)(v10 + 20);
        if ((v13 & 0x40000000) != 0)
        {
          v15 = *(uint64_t **)(v10 - 8);
          v14 = v13 & 0x7FFFFFF;
          if (v14)
          {
LABEL_17:
            v16 = 32 * v14;
            do
            {
              v17 = *v15;
              result = sub_1C4774094(this, *v15);
              if (v18)
              {
                v19 = *(unsigned int *)(v8 + 8);
                if (v19 >= *(unsigned int *)(v8 + 12))
                {
                  result = llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v9, v19 + 1, 8);
                  v19 = *(unsigned int *)(v8 + 8);
                }
                *(_QWORD *)(*(_QWORD *)v8 + 8 * v19) = v17;
                ++*(_DWORD *)(v8 + 8);
              }
              v15 += 4;
              v16 -= 32;
            }
            while (v16);
          }
        }
        else
        {
          v14 = v13 & 0x7FFFFFF;
          v15 = (uint64_t *)(v10 - 32 * v14);
          if (v14)
            goto LABEL_17;
        }
      }
LABEL_14:
      v4 = *(_DWORD *)(v8 + 8);
    }
    while (v4);
  }
  return result;
}

uint64_t llvm::LazyCallGraph::Node::replaceFunction(uint64_t this, Function *a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

llvm::raw_ostream *sub_1C4E7EE34(llvm::raw_ostream *result, uint64_t a2)
{
  uint64_t ***v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ****v7;
  uint64_t ***v8;
  int v9;
  int v10;
  size_t *v11;
  const void *v12;
  size_t v13;
  size_t v14;
  void *v15;
  size_t v16;
  llvm::raw_ostream *v17;

  v2 = *(uint64_t ****)(a2 + 8);
  if ((*((_BYTE *)v2 + 23) & 0x10) != 0)
  {
    v3 = ***v2;
    v4 = *(_QWORD *)(v3 + 152);
    v5 = *(unsigned int *)(v3 + 168);
    if ((_DWORD)v5)
    {
      LODWORD(v6) = (v5 - 1) & ((v2 >> 4) ^ (v2 >> 9));
      v7 = (uint64_t ****)(v4 + 16 * v6);
      v8 = *v7;
      if (*v7 == v2)
        goto LABEL_8;
      v9 = 1;
      while (v8 != (uint64_t ***)-4096)
      {
        v10 = v6 + v9++;
        v6 = v10 & (v5 - 1);
        v8 = *(uint64_t ****)(v4 + 16 * v6);
        if (v8 == v2)
        {
          v7 = (uint64_t ****)(v4 + 16 * v6);
          goto LABEL_8;
        }
      }
    }
    v7 = (uint64_t ****)(v4 + 16 * v5);
LABEL_8:
    v11 = (size_t *)v7[1];
    v14 = *v11;
    v12 = v11 + 2;
    v13 = v14;
    v15 = (void *)*((_QWORD *)result + 4);
    if (v14 <= *((_QWORD *)result + 3) - (_QWORD)v15)
    {
      if (v13)
      {
        v16 = v13;
        v17 = result;
        memcpy(v15, v12, v13);
        result = v17;
        *((_QWORD *)v17 + 4) += v16;
      }
    }
    else
    {
      return llvm::raw_ostream::write(result, (const char *)v12, v13);
    }
  }
  return result;
}

uint64_t llvm::LazyCallGraph::LazyCallGraph(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t, uint64_t ***), uint64_t a4)
{
  uint64_t v5;
  _DWORD *v6;
  int64x2_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t ***v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ****v20;
  uint64_t ***v21;
  int v22;
  int v23;
  uint64_t ***v24;
  char *v25;
  size_t v26;
  size_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ****v33;
  uint64_t ***v34;
  int v35;
  int v36;
  uint64_t ***v37;
  char *v38;
  size_t v39;
  size_t v40;
  _QWORD *i;
  _QWORD *v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  _QWORD *j;
  _QWORD *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t ***v56;
  uint64_t ***v57;
  uint64_t v58;
  int v59;
  _BYTE v60[128];
  void *v61;
  uint64_t v62;
  _QWORD v63[18];

  v63[16] = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x400000000;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  v5 = a1 + 120;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_QWORD *)(a1 + 128) = 0x400000000;
  *(_OWORD *)(a1 + 168) = 0u;
  v6 = (_DWORD *)(a1 + 168);
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = a1 + 224;
  *(_QWORD *)(a1 + 216) = 0x400000000;
  *(_QWORD *)(a1 + 256) = a1 + 272;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 328) = a1 + 344;
  *(_QWORD *)(a1 + 336) = 0x400000000;
  *(_QWORD *)(a1 + 376) = a1 + 392;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = a1 + 424;
  *(_QWORD *)(a1 + 416) = 0x1000000000;
  *(_DWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_QWORD *)(a1 + 576) = 1;
  v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(int64x2_t *)(a1 + 584) = v7;
  *(int64x2_t *)(a1 + 600) = v7;
  *(_QWORD *)(a1 + 616) = a1 + 632;
  *(_QWORD *)(a1 + 624) = 0x400000000;
  v8 = a2 + 3;
  v9 = (_QWORD *)a2[4];
  if (v9 != a2 + 3)
  {
    v54 = a1 + 576;
    do
    {
      if (v9)
        v12 = (uint64_t ***)(v9 - 7);
      else
        v12 = 0;
      if (v9 && *((_BYTE *)v12 + 16) == 3)
      {
        if ((*((_DWORD *)v12 + 5) & 0x7FFFFFF) != 0)
          goto LABEL_13;
      }
      else if (*((_BYTE *)v12 + 16) || v12[9] != (uint64_t **)(v12 + 9) || (*((_BYTE *)v12 + 34) & 0x80) != 0)
      {
LABEL_13:
        v13 = (uint64_t *)a3(a4, v12);
        v14 = v13;
        LODWORD(v56) = 0;
        v15 = v12 >> 4;
        if ((*((_BYTE *)v12 + 33) & 0x20) != 0)
          goto LABEL_14;
        if ((*((_BYTE *)v12 + 23) & 0x10) != 0)
        {
          v29 = ***v12;
          v30 = *(_QWORD *)(v29 + 152);
          v31 = *(unsigned int *)(v29 + 168);
          if (!(_DWORD)v31)
            goto LABEL_37;
          LODWORD(v32) = (v31 - 1) & (v15 ^ (v12 >> 9));
          v33 = (uint64_t ****)(v30 + 16 * v32);
          v34 = *v33;
          if (*v33 != v12)
          {
            v35 = 1;
            while (v34 != (uint64_t ***)-4096)
            {
              v36 = v32 + v35++;
              v32 = v36 & (v31 - 1);
              v34 = *(uint64_t ****)(v30 + 16 * v32);
              if (v34 == v12)
              {
                v33 = (uint64_t ****)(v30 + 16 * v32);
                goto LABEL_38;
              }
            }
LABEL_37:
            v33 = (uint64_t ****)(v30 + 16 * v31);
          }
LABEL_38:
          v37 = v33[1];
          v40 = (size_t)*v37;
          v38 = (char *)(v37 + 2);
          v39 = v40;
        }
        else
        {
          v39 = 0;
          v38 = &byte_1C871356D;
        }
        v52 = *v13;
        if (llvm::TargetLibraryInfoImpl::getLibFunc((int)v13, v38, v39, &v56)
          && (llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v52, (uint64_t)v12[3], (int)v56) & 1) != 0)
        {
LABEL_24:
          v56 = v12;
          sub_1C4E486A0(v54, (uint64_t *)&v56);
          goto LABEL_25;
        }
LABEL_14:
        if ((*((_BYTE *)v12 + 23) & 0x10) != 0)
        {
          v16 = ***v12;
          v17 = *(_QWORD *)(v16 + 152);
          v18 = *(unsigned int *)(v16 + 168);
          if (!(_DWORD)v18)
            goto LABEL_21;
          LODWORD(v19) = (v18 - 1) & (v15 ^ (v12 >> 9));
          v20 = (uint64_t ****)(v17 + 16 * v19);
          v21 = *v20;
          if (*v20 != v12)
          {
            v22 = 1;
            while (v21 != (uint64_t ***)-4096)
            {
              v23 = v19 + v22++;
              v19 = v23 & (v18 - 1);
              v21 = *(uint64_t ****)(v17 + 16 * v19);
              if (v21 == v12)
              {
                v20 = (uint64_t ****)(v17 + 16 * v19);
                goto LABEL_22;
              }
            }
LABEL_21:
            v20 = (uint64_t ****)(v17 + 16 * v18);
          }
LABEL_22:
          v24 = v20[1];
          v27 = (size_t)*v24;
          v25 = (char *)(v24 + 2);
          v26 = v27;
        }
        else
        {
          v26 = 0;
          v25 = &byte_1C871356D;
        }
        if (llvm::TargetLibraryInfoImpl::isFunctionVectorizable(*v14, v25, v26))
          goto LABEL_24;
LABEL_25:
        if (((_DWORD)v12[4] & 0xFu) - 7 >= 2)
        {
          v28 = sub_1C4E7EC8C(a1, (uint64_t)v12);
          sub_1C4E7EBD4(v5, v6, v28, 0);
        }
      }
      v9 = (_QWORD *)v9[1];
    }
    while (v9 != v8);
  }
  for (i = (_QWORD *)a2[6]; i != a2 + 5; i = (_QWORD *)i[1])
  {
    v42 = i - 6;
    if (!i)
      v42 = 0;
    if (((_DWORD)v42[4] & 0xFu) - 7 >= 2)
    {
      v43 = *(v42 - 4);
      if (v43)
        v44 = *(_BYTE *)(v43 + 16) == 0;
      else
        v44 = 0;
      if (v44)
      {
        v45 = sub_1C4E7EC8C(a1, v43);
        sub_1C4E7EBD4(v5, v6, v45, 0);
      }
    }
  }
  v61 = v63;
  v62 = 0x1000000000;
  v56 = (uint64_t ***)v60;
  v57 = (uint64_t ***)v60;
  v58 = 16;
  v59 = 0;
  for (j = (_QWORD *)a2[2]; j != a2 + 1; j = (_QWORD *)j[1])
  {
    if (j)
      v47 = j - 7;
    else
      v47 = 0;
    if (j && *((_BYTE *)v47 + 16) == 3)
    {
      if ((*((_DWORD *)v47 + 5) & 0x7FFFFFF) == 0)
        continue;
    }
    else if (!*((_BYTE *)v47 + 16) && (_QWORD *)v47[9] == v47 + 9 && (*((_BYTE *)v47 + 34) & 0x80) == 0)
    {
      continue;
    }
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v56, *(v47 - 4));
    if (v48)
    {
      v49 = *(v47 - 4);
      v50 = v62;
      if (v62 >= (unint64_t)HIDWORD(v62))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v62 + 1, 8);
        v50 = v62;
      }
      *((_QWORD *)v61 + v50) = v49;
      LODWORD(v62) = v62 + 1;
    }
  }
  v55 = a1;
  llvm::LazyCallGraph::visitReferences(&v61, (llvm::SmallPtrSetImplBase *)&v56, (uint64_t (*)(uint64_t))sub_1C4E85474, (uint64_t)&v55);
  if (v57 != v56)
    free(v57);
  if (v61 != v63)
    free(v61);
  return a1;
}

uint64_t llvm::LazyCallGraph::updateGraphPtrs(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(this + 96);
  v2 = *(unsigned int *)(this + 112);
  v3 = v1 + 16 * v2;
  if (*(_DWORD *)(this + 104))
  {
    if ((_DWORD)v2)
    {
      v4 = 16 * v2;
      v5 = *(_QWORD *)(this + 96);
      while ((*(_QWORD *)v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v5 += 16;
        v4 -= 16;
        if (!v4)
          goto LABEL_6;
      }
    }
    else
    {
      v5 = *(_QWORD *)(this + 96);
    }
  }
  else
  {
LABEL_6:
    v5 = v1 + 16 * v2;
  }
  v6 = v1 + 16 * v2;
LABEL_9:
  while (v5 != v6)
  {
    **(_QWORD **)(v5 + 8) = this;
    v7 = v5 + 16;
    v5 = v3;
    if (v7 != v3)
    {
      v5 = v7;
      while ((*(_QWORD *)v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v5 += 16;
        if (v5 == v3)
        {
          v5 = v3;
          goto LABEL_9;
        }
      }
    }
  }
  v8 = *(unsigned int *)(this + 416);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD ***)(this + 408);
    v10 = 8 * v8;
    do
    {
      v11 = *v9++;
      *v11 = this;
      v10 -= 8;
    }
    while (v10);
  }
  return this;
}

uint64_t llvm::LazyCallGraph::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;

  sub_1C4E85668(a1, a2);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 96), 8);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  v4 = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = v4;
  v5 = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = v5;
  sub_1C619C6B4(a1 + 120, (const void **)(a2 + 120));
  sub_1C6182300(a1 + 168, a2 + 168);
  sub_1C4E85668(a1 + 192, a2 + 192);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 288), 8);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 288) = 0;
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a2 + 296) = 0;
  v6 = *(_DWORD *)(a1 + 300);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a2 + 300) = v6;
  v7 = *(_DWORD *)(a1 + 304);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a2 + 304) = v7;
  sub_1C4E4B1A0(a1 + 576, (unsigned int *)(a2 + 576));
  sub_1C4E41EEC(a1 + 616, a2 + 616);
  llvm::LazyCallGraph::updateGraphPtrs(a1);
  return a1;
}

llvm::raw_ostream *sub_1C4E7F5E0(llvm::raw_ostream *this, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;

  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v4 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 40);
  }
  else
  {
    *((_QWORD *)this + 4) = v4 + 1;
    *v4 = 40;
  }
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = 8 * v5;
    while (1)
    {
      v9 = *(_QWORD *)(v7 + 8 * v6);
      if ((_DWORD)v6)
      {
        v10 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v10 > 1uLL)
        {
          *v10 = 8236;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, ", ", 2uLL);
        }
        if (v6 >= 9)
          break;
      }
      sub_1C4E7EE34(this, v9);
      ++v6;
      v8 -= 8;
      if (!v8)
        goto LABEL_16;
    }
    v11 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v11) > 4)
    {
      *(_BYTE *)(v11 + 4) = 32;
      *(_DWORD *)v11 = 741223982;
      *((_QWORD *)this + 4) += 5;
      v12 = this;
    }
    else
    {
      v12 = llvm::raw_ostream::write(this, "..., ", 5uLL);
    }
    sub_1C4E7EE34(v12, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a2 + 16) - 8));
  }
LABEL_16:
  v13 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v13 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 41);
  }
  else
  {
    *((_QWORD *)this + 4) = v13 + 1;
    *v13 = 41;
  }
  return this;
}

uint64_t llvm::LazyCallGraph::SCC::isParentOf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;
  _QWORD v17[9];

  if (a1 == a2)
    return 0;
  v17[7] = v2;
  v17[8] = v3;
  v5 = *(unsigned int *)(a1 + 16);
  if (!(_DWORD)v5)
    return 0;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = v7 + 8 * v5;
  while (1)
  {
    v9 = *(unsigned int *)(*(_QWORD *)v7 + 32);
    if ((_DWORD)v9)
    {
      v10 = 8 * v9;
      v11 = *(uint64_t **)(*(_QWORD *)v7 + 24);
      while ((*v11 & 0xFFFFFFFFFFFFFFF8) == 0 || (*v11 & 4) == 0 || !*(_QWORD *)(*v11 & 0xFFFFFFFFFFFFFFF8))
      {
        ++v11;
        v10 -= 8;
        if (!v10)
          goto LABEL_21;
      }
    }
    else
    {
      v11 = *(uint64_t **)(*(_QWORD *)v7 + 24);
    }
    v12 = *(_QWORD *)(*(_QWORD *)v7 + 24) + 8 * v9;
    if (v11 == (uint64_t *)v12)
      goto LABEL_21;
    v13 = *v11;
LABEL_14:
    v14 = (uint64_t *)(**(_QWORD **)a1 + 288);
    v16 = 0;
    v17[0] = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((sub_1C4DD8A9C(v14, v17, &v16) & 1) != 0 && *(_QWORD *)(v16 + 8) == a2)
      return 1;
    while (++v11 != (uint64_t *)v12)
    {
      v13 = *v11;
      if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0 && (v13 & 4) != 0 && *(_QWORD *)(*v11 & 0xFFFFFFFFFFFFFFF8))
      {
        if (v11 != (uint64_t *)v12)
          goto LABEL_14;
        break;
      }
    }
LABEL_21:
    v7 += 8;
    if (v7 == v8)
      return 0;
  }
}

uint64_t llvm::LazyCallGraph::SCC::isAncestorOf(uint64_t **this, const llvm::LazyCallGraph::SCC *a2)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const llvm::LazyCallGraph::SCC *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  _BYTE v25[128];
  uint64_t v26;
  unint64_t v27;
  void *v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD v31[17];

  v31[16] = *MEMORY[0x1E0C80C00];
  if (this == (uint64_t **)a2)
    return 0;
  v4 = **this;
  v21 = v25;
  v22 = v25;
  v23 = 16;
  v24 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v21, (uint64_t)this);
  v28 = v31;
  v30 = 16;
  v31[0] = this;
  v5 = (uint64_t *)(v4 + 288);
  v6 = 1;
  while (1)
  {
    v7 = *((_QWORD *)v28 + --v6);
    v29 = v6;
    v8 = *(unsigned int *)(v7 + 16);
    if ((_DWORD)v8)
      break;
LABEL_29:
    if (!v6)
    {
      v19 = 0;
      goto LABEL_32;
    }
  }
  v9 = *(_QWORD *)(v7 + 8);
  v10 = v9 + 8 * v8;
  while (1)
  {
    v11 = *(unsigned int *)(*(_QWORD *)v9 + 32);
    if ((_DWORD)v11)
    {
      v12 = 8 * v11;
      v13 = *(uint64_t **)(*(_QWORD *)v9 + 24);
      while ((*v13 & 0xFFFFFFFFFFFFFFF8) == 0 || (*v13 & 4) == 0 || !*(_QWORD *)(*v13 & 0xFFFFFFFFFFFFFFF8))
      {
        ++v13;
        v12 -= 8;
        if (!v12)
          goto LABEL_27;
      }
    }
    else
    {
      v13 = *(uint64_t **)(*(_QWORD *)v9 + 24);
    }
    v14 = *(_QWORD *)(*(_QWORD *)v9 + 24) + 8 * v11;
    if (v13 == (uint64_t *)v14)
      goto LABEL_27;
    v15 = *v13;
LABEL_15:
    v26 = 0;
    v27 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((sub_1C4DD8A9C(v5, &v27, &v26) & 1) == 0)
      goto LABEL_22;
    v16 = *(const llvm::LazyCallGraph::SCC **)(v26 + 8);
    if (!v16)
      goto LABEL_22;
    if (v16 == a2)
      break;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v21, *(_QWORD *)(v26 + 8));
    if (v17)
    {
      v18 = v29;
      if (v29 >= (unint64_t)v30)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v31, v29 + 1, 8);
        v18 = v29;
      }
      *((_QWORD *)v28 + v18) = v16;
      ++v29;
    }
LABEL_22:
    while (++v13 != (uint64_t *)v14)
    {
      v15 = *v13;
      if ((*v13 & 0xFFFFFFFFFFFFFFF8) != 0 && (v15 & 4) != 0 && *(_QWORD *)(*v13 & 0xFFFFFFFFFFFFFFF8))
      {
        if (v13 != (uint64_t *)v14)
          goto LABEL_15;
        break;
      }
    }
LABEL_27:
    v9 += 8;
    if (v9 == v10)
    {
      v6 = v29;
      goto LABEL_29;
    }
  }
  v19 = 1;
LABEL_32:
  if (v28 != v31)
    free(v28);
  if (v22 != v21)
    free(v22);
  return v19;
}

_QWORD *llvm::LazyCallGraph::RefSCC::RefSCC(_QWORD *this, llvm::LazyCallGraph *a2)
{
  uint64_t i;

  *this = a2;
  this[1] = this + 3;
  this[2] = 0x400000000;
  this[7] = 1;
  for (i = 8; i != 16; i += 2)
    this[i] = -4096;
  return this;
}

{
  uint64_t i;

  *this = a2;
  this[1] = this + 3;
  this[2] = 0x400000000;
  this[7] = 1;
  for (i = 8; i != 16; i += 2)
    this[i] = -4096;
  return this;
}

llvm::raw_ostream *sub_1C4E7FB30(llvm::raw_ostream *this, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;

  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v4 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 91);
  }
  else
  {
    *((_QWORD *)this + 4) = v4 + 1;
    *v4 = 91;
  }
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a2 + 8);
    v8 = 8 * v5;
    while (1)
    {
      v9 = *(_QWORD *)(v7 + 8 * v6);
      if ((_DWORD)v6)
      {
        v10 = (_WORD *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v10 > 1uLL)
        {
          *v10 = 8236;
          *((_QWORD *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, ", ", 2uLL);
        }
        if (v6 >= 5)
          break;
      }
      sub_1C4E7F5E0(this, v9);
      ++v6;
      v8 -= 8;
      if (!v8)
        goto LABEL_16;
    }
    v11 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v11) > 4)
    {
      *(_BYTE *)(v11 + 4) = 32;
      *(_DWORD *)v11 = 741223982;
      *((_QWORD *)this + 4) += 5;
      v12 = this;
    }
    else
    {
      v12 = llvm::raw_ostream::write(this, "..., ", 5uLL);
    }
    sub_1C4E7F5E0(v12, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a2 + 16) - 8));
  }
LABEL_16:
  v13 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v13 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 93);
  }
  else
  {
    *((_QWORD *)this + 4) = v13 + 1;
    *v13 = 93;
  }
  return this;
}

uint64_t llvm::LazyCallGraph::RefSCC::isParentOf(llvm::LazyCallGraph::RefSCC *this, const llvm::LazyCallGraph::RefSCC *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  const llvm::LazyCallGraph::RefSCC **v18;
  uint64_t v20;
  _QWORD v21[11];

  if (a2 == this)
    return 0;
  v21[9] = v2;
  v21[10] = v3;
  v5 = *((unsigned int *)this + 4);
  if (!(_DWORD)v5)
    return 0;
  v7 = *((_QWORD *)this + 1);
  v8 = v7 + 8 * v5;
  while (1)
  {
    v9 = *(unsigned int *)(*(_QWORD *)v7 + 16);
    if ((_DWORD)v9)
      break;
LABEL_23:
    v7 += 8;
    if (v7 == v8)
      return 0;
  }
  v10 = *(_QWORD *)(*(_QWORD *)v7 + 8);
  v11 = v10 + 8 * v9;
  while (1)
  {
    v12 = *(unsigned int *)(*(_QWORD *)v10 + 32);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = *(uint64_t **)(*(_QWORD *)v10 + 24);
      while ((*v14 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v14 & 0xFFFFFFFFFFFFFFF8))
      {
        ++v14;
        v13 -= 8;
        if (!v13)
          goto LABEL_22;
      }
    }
    else
    {
      v14 = *(uint64_t **)(*(_QWORD *)v10 + 24);
    }
    v15 = *(_QWORD *)(*(_QWORD *)v10 + 24) + 8 * v12;
    if (v14 == (uint64_t *)v15)
      goto LABEL_22;
    v16 = *v14;
LABEL_15:
    v17 = (uint64_t *)(*(_QWORD *)this + 288);
    v20 = 0;
    v21[0] = v16 & 0xFFFFFFFFFFFFFFF8;
    if ((sub_1C4DD8A9C(v17, v21, &v20) & 1) != 0)
    {
      v18 = *(const llvm::LazyCallGraph::RefSCC ***)(v20 + 8);
      if (v18)
      {
        if (*v18 == a2)
          return 1;
      }
    }
    while (++v14 != (uint64_t *)v15)
    {
      v16 = *v14;
      if ((*v14 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v14 & 0xFFFFFFFFFFFFFFF8))
      {
        if (v14 != (uint64_t *)v15)
          goto LABEL_15;
        break;
      }
    }
LABEL_22:
    v10 += 8;
    if (v10 == v11)
      goto LABEL_23;
  }
}

uint64_t llvm::LazyCallGraph::RefSCC::isAncestorOf(llvm::LazyCallGraph::RefSCC *this, const llvm::LazyCallGraph::RefSCC *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  const llvm::LazyCallGraph::RefSCC *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[32];
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x1E0C80C00];
  if (a2 == this)
    return 0;
  v31 = v33;
  v24 = v28;
  v25 = v28;
  v26 = 4;
  v27 = 0;
  v33[0] = this;
  v32 = 0x400000001;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v24, (uint64_t)this);
  v4 = v32;
  while (1)
  {
    v5 = *((_QWORD *)v31 + --v4);
    LODWORD(v32) = v4;
    v6 = *(unsigned int *)(v5 + 16);
    if ((_DWORD)v6)
      break;
LABEL_31:
    if (!v4)
    {
      v22 = 0;
      goto LABEL_34;
    }
  }
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 + 8 * v6;
  while (1)
  {
    v9 = *(unsigned int *)(*(_QWORD *)v7 + 16);
    if ((_DWORD)v9)
      break;
LABEL_29:
    v7 += 8;
    if (v7 == v8)
    {
      v4 = v32;
      goto LABEL_31;
    }
  }
  v10 = *(_QWORD *)(*(_QWORD *)v7 + 8);
  v11 = v10 + 8 * v9;
  while (1)
  {
    v12 = *(unsigned int *)(*(_QWORD *)v10 + 32);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = *(uint64_t **)(*(_QWORD *)v10 + 24);
      while ((*v14 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v14 & 0xFFFFFFFFFFFFFFF8))
      {
        ++v14;
        v13 -= 8;
        if (!v13)
          goto LABEL_28;
      }
    }
    else
    {
      v14 = *(uint64_t **)(*(_QWORD *)v10 + 24);
    }
    v15 = *(_QWORD *)(*(_QWORD *)v10 + 24) + 8 * v12;
    if (v14 == (uint64_t *)v15)
      goto LABEL_28;
    v16 = *v14;
LABEL_16:
    v17 = (uint64_t *)(*(_QWORD *)this + 288);
    v29 = 0;
    v30 = v16 & 0xFFFFFFFFFFFFFFF8;
    if ((sub_1C4DD8A9C(v17, &v30, &v29) & 1) == 0)
      goto LABEL_24;
    v18 = *(uint64_t **)(v29 + 8);
    if (!v18)
      goto LABEL_24;
    v19 = (const llvm::LazyCallGraph::RefSCC *)*v18;
    if ((const llvm::LazyCallGraph::RefSCC *)*v18 == a2)
      break;
    if (v19)
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v24, *v18);
      if (v20)
      {
        v21 = v32;
        if (v32 >= (unint64_t)HIDWORD(v32))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v33, v32 + 1, 8);
          v21 = v32;
        }
        *((_QWORD *)v31 + v21) = v19;
        LODWORD(v32) = v32 + 1;
      }
    }
LABEL_24:
    while (++v14 != (uint64_t *)v15)
    {
      v16 = *v14;
      if ((*v14 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v14 & 0xFFFFFFFFFFFFFFF8))
      {
        if (v14 != (uint64_t *)v15)
          goto LABEL_16;
        break;
      }
    }
LABEL_28:
    v10 += 8;
    if (v10 == v11)
      goto LABEL_29;
  }
  v22 = 1;
LABEL_34:
  if (v25 != v24)
    free(v25);
  if (v31 != v33)
    free(v31);
  return v22;
}

uint64_t llvm::LazyCallGraph::RefSCC::switchInternalEdgeToCall(uint64_t a1, uint64_t a2, char *a3, void (*a4)(uint64_t, uint64_t *, int64_t), uint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  int8x16_t *v35;
  uint64_t v36;
  uint64_t v37;
  char **v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  char **v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  BOOL v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  char *v54;
  void *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t *, int64_t);
  uint64_t v61;
  unsigned int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  char *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char **v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  char **v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  const std::nothrow_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  void *v103;
  uint64_t v104;
  uint64_t *v105;
  int v106;
  uint64_t v107;
  int v108;
  void *v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  int64_t v121;
  unint64_t v122;
  uint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  int v127;
  int v128;
  unsigned int v129;
  char *v130;
  int v131;
  void (*v132)(uint64_t, uint64_t *, int64_t);
  int v133;
  int8x16_t *v134;
  uint64_t v135;
  _DWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141[2];
  int v142[2];
  int v143[2];
  _QWORD *__src;
  __int8 *__srca;
  void *__srcb;
  uint64_t *__srcc;
  char *v148;
  char *v149;
  uint64_t v150;
  int v151;
  _BYTE v152[32];
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  char **v158;
  unsigned int v159;
  unsigned int v160;
  _QWORD v161[6];

  v161[4] = *MEMORY[0x1E0C80C00];
  v155 = &v157;
  v156 = 0x100000000;
  v10 = (uint64_t *)(*(_QWORD *)a1 + 288);
  v148 = (char *)a2;
  v158 = 0;
  v11 = 0;
  if (sub_1C4DD8A9C(v10, &v148, &v158))
    v11 = (uint64_t)v158[1];
  v12 = (uint64_t *)(*(_QWORD *)a1 + 288);
  v148 = a3;
  v158 = 0;
  v13 = 0;
  if (sub_1C4DD8A9C(v12, &v148, &v158))
    v13 = (uint64_t)v158[1];
  if (v11 == v13)
    goto LABEL_6;
  v139 = a5;
  v148 = (char *)v11;
  v18 = *((int *)sub_1C619C864((_DWORD *)(a1 + 56), (uint64_t *)&v148) + 2);
  v148 = (char *)v13;
  v19 = *((int *)sub_1C619C864((_DWORD *)(a1 + 56), (uint64_t *)&v148) + 2);
  if ((int)v19 < (int)v18)
    goto LABEL_6;
  v132 = (void (*)(uint64_t, uint64_t *, int64_t))a4;
  v148 = (char *)v11;
  v131 = *((_DWORD *)sub_1C619C864((_DWORD *)(a1 + 56), (uint64_t *)&v148) + 2);
  v148 = (char *)v13;
  v136 = (_DWORD *)(a1 + 56);
  v135 = *((int *)sub_1C619C864((_DWORD *)(a1 + 56), (uint64_t *)&v148) + 2);
  v148 = v152;
  v149 = v152;
  v150 = 4;
  v151 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v148, v11);
  v20 = *(_QWORD *)(a1 + 8);
  v133 = v18;
  if ((_DWORD)v18 == (_DWORD)v19)
    goto LABEL_42;
  v137 = (_QWORD *)(v20 + 8 * v19);
  v21 = (_QWORD *)(v20 + 8 * v18);
  do
  {
    v140 = v21[1];
    __src = v21 + 1;
    v22 = *(unsigned int *)(v140 + 16);
    if (!(_DWORD)v22)
      goto LABEL_40;
    v23 = *(_QWORD *)(v140 + 8);
    v24 = v23 + 8 * v22;
    while (1)
    {
      v25 = *(unsigned int *)(*(_QWORD *)v23 + 32);
      if ((_DWORD)v25)
      {
        v26 = 8 * v25;
        v27 = *(uint64_t **)(*(_QWORD *)v23 + 24);
        while ((*v27 & 0xFFFFFFFFFFFFFFF8) == 0 || (*v27 & 4) == 0 || !*(_QWORD *)(*v27 & 0xFFFFFFFFFFFFFFF8))
        {
          ++v27;
          v26 -= 8;
          if (!v26)
            goto LABEL_37;
        }
      }
      else
      {
        v27 = *(uint64_t **)(*(_QWORD *)v23 + 24);
      }
      v28 = *(_QWORD *)(*(_QWORD *)v23 + 24) + 8 * v25;
      if (v27 == (uint64_t *)v28)
        goto LABEL_37;
      v29 = *v27;
LABEL_26:
      v30 = (uint64_t *)(*(_QWORD *)a1 + 288);
      v158 = (char **)(v29 & 0xFFFFFFFFFFFFFFF8);
      v154 = 0;
      v31 = sub_1C4DD8A9C(v30, &v158, &v154);
      v32 = 0;
      if (v31)
        v32 = *(_QWORD *)(v154 + 8);
      v33 = (char *)sub_1C477672C((uint64_t)&v148, v32);
      v34 = v149 == v148 ? (uint64_t *)((char *)&v150 + 4) : &v150;
      if (v33 != &v149[8 * *(unsigned int *)v34])
        break;
      while (++v27 != (uint64_t *)v28)
      {
        v29 = *v27;
        if ((*v27 & 0xFFFFFFFFFFFFFFF8) != 0 && (v29 & 4) != 0 && *(_QWORD *)(*v27 & 0xFFFFFFFFFFFFFFF8))
        {
          if (v27 != (uint64_t *)v28)
            goto LABEL_26;
          break;
        }
      }
LABEL_37:
      v23 += 8;
      if (v23 == v24)
        goto LABEL_40;
    }
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v148, v140);
LABEL_40:
    v21 = __src;
  }
  while (__src != v137);
  v20 = *(_QWORD *)(a1 + 8);
LABEL_42:
  v35 = (int8x16_t *)(v20 + 8 * v131);
  v36 = v20 + 8 * v135 + 8;
  v158 = &v148;
  if (v35 != (int8x16_t *)v36)
  {
    v37 = 8 * v135 - 8 * v131 + 8;
    while (1)
    {
      v38 = v158;
      v39 = (char *)sub_1C477672C((uint64_t)v158, v35->i64[0]);
      v40 = v38[1];
      v41 = 16;
      if (v40 == *v38)
        v41 = 20;
      if (v39 != &v40[8 * *(unsigned int *)((char *)v38 + v41)])
        break;
      v35 = (int8x16_t *)((char *)v35 + 8);
      v37 -= 8;
      if (!v37)
        goto LABEL_64;
    }
    while (1)
    {
      v37 -= 8;
      if (!v37)
        break;
      v42 = (uint64_t *)(v36 - 8);
      v43 = v158;
      v44 = (char *)sub_1C477672C((uint64_t)v158, *(_QWORD *)(v36 - 8));
      v45 = v43[1];
      v46 = 16;
      if (v45 == *v43)
        v46 = 20;
      v36 -= 8;
      if (v44 == &v45[8 * *(unsigned int *)((char *)v43 + v46)])
      {
        v47 = (v37 >> 3) + 1;
        if (v37 < 17)
        {
LABEL_60:
          v51 = 0;
          v48 = 0;
        }
        else
        {
          if (v47 >= 0xFFFFFFFFFFFFFFFLL)
            v48 = 0xFFFFFFFFFFFFFFFLL;
          else
            v48 = (v37 >> 3) + 1;
          while (1)
          {
            v49 = (uint64_t *)operator new(8 * v48, MEMORY[0x1E0DE4E10]);
            if (v49)
              break;
            v50 = v48 > 1;
            v48 >>= 1;
            if (!v50)
              goto LABEL_60;
          }
          v51 = v49;
        }
        v35 = (int8x16_t *)sub_1C4E85A00(v35, v42, (uint64_t *)&v158, v47, v51, v48);
        if (v51)
          operator delete(v51);
        break;
      }
    }
  }
LABEL_64:
  v52 = v131;
  if (v131 <= (int)v135)
  {
    v53 = 8 * v131;
    do
    {
      *(_DWORD *)(sub_1C619C984((uint64_t)v136, *(_QWORD *)(*(_QWORD *)(a1 + 8) + v53)) + 8) = v52++;
      v53 += 8;
    }
    while ((_DWORD)v135 + 1 != v52);
  }
  v54 = (char *)sub_1C477672C((uint64_t)&v148, v13);
  v56 = (uint64_t)v148;
  v55 = v149;
  if (v149 == v148)
    v57 = HIDWORD(v150);
  else
    v57 = v150;
  if (v54 == &v149[8 * v57])
  {
    v101 = &v35[-1].i64[1];
    v102 = v101;
    v60 = v132;
    v61 = v139;
  }
  else
  {
    v58 = *(_QWORD *)(a1 + 8);
    v59 = (uint64_t)v35->i64 - v58;
    *(_QWORD *)v141 = ((unint64_t)v35 - v58) >> 3;
    v60 = v132;
    v61 = v139;
    if (v141[0] + 1 >= (int)v135)
    {
      v103 = (void *)(int)(v59 >> 3);
      v104 = v135;
    }
    else
    {
      __srca = &v35->i8[-v58];
      if (v149 == v148)
        goto LABEL_73;
      if (v150 >= 0x21 && 4 * (HIDWORD(v150) - v151) < v150)
      {
        free(v149);
        v128 = 1 << (33 - __clz(HIDWORD(v150) - v151 - 1));
        v50 = (HIDWORD(v150) - v151) > 0x10;
        HIDWORD(v150) = 0;
        v151 = 0;
        if (v50)
          v129 = v128;
        else
          v129 = 32;
        LODWORD(v150) = v129;
        v130 = (char *)malloc_type_malloc(8 * v129, 0x4065EBACuLL);
        if (!v130)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        v149 = v130;
        memset(v130, 255, 8 * v150);
        v59 = (uint64_t)__srca;
      }
      else
      {
        memset(v149, 255, 8 * v150);
LABEL_73:
        HIDWORD(v150) = 0;
        v151 = 0;
      }
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v148, v13);
      v158 = (char **)v161;
      v160 = 4;
      v161[0] = v13;
      v62 = 1;
      do
      {
        v63 = v158[--v62];
        v159 = v62;
        v64 = *((unsigned int *)v63 + 4);
        if ((_DWORD)v64)
        {
          v65 = *((_QWORD *)v63 + 1);
          v66 = v65 + 8 * v64;
          do
          {
            v67 = *(unsigned int *)(*(_QWORD *)v65 + 32);
            if ((_DWORD)v67)
            {
              v68 = 8 * v67;
              v69 = *(uint64_t **)(*(_QWORD *)v65 + 24);
              while ((*v69 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v69 & 0xFFFFFFFFFFFFFFF8))
              {
                ++v69;
                v68 -= 8;
                if (!v68)
                  goto LABEL_100;
              }
            }
            else
            {
              v69 = *(uint64_t **)(*(_QWORD *)v65 + 24);
            }
            v70 = *(_QWORD *)(*(_QWORD *)v65 + 24) + 8 * v67;
            if (v69 != (uint64_t *)v70)
            {
              v71 = *v69;
LABEL_86:
              if ((v71 & 4) != 0)
              {
                v72 = (uint64_t *)(*(_QWORD *)a1 + 288);
                v153 = 0;
                v154 = v71 & 0xFFFFFFFFFFFFFFF8;
                v73 = 0;
                if (sub_1C4DD8A9C(v72, &v154, &v153))
                  v73 = *(char **)(v153 + 8);
                if (*(_QWORD *)v73 == a1 && *(_DWORD *)(sub_1C619C984((uint64_t)v136, (uint64_t)v73) + 8) > v133)
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v148, (uint64_t)v73);
                  if (v74)
                  {
                    v75 = v159;
                    if (v159 >= (unint64_t)v160)
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v158, (uint64_t)v161, v159 + 1, 8);
                      v75 = v159;
                    }
                    v158[v75] = v73;
                    ++v159;
                  }
                }
              }
              while (++v69 != (uint64_t *)v70)
              {
                v71 = *v69;
                if ((*v69 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v69 & 0xFFFFFFFFFFFFFFF8))
                {
                  if (v69 != (uint64_t *)v70)
                    goto LABEL_86;
                  break;
                }
              }
            }
LABEL_100:
            v65 += 8;
          }
          while (v65 != v66);
          v62 = v159;
          v59 = (uint64_t)__srca;
        }
      }
      while (v62);
      if (v158 != v161)
        free(v158);
      v76 = 0;
      v138 = v59 << 29;
      v77 = *(_QWORD *)(a1 + 8);
      __srcb = (void *)(int)(v59 >> 3);
      v78 = v77 + 8 * v141[0];
      v79 = v77 + 8 * v135 + 8;
      v158 = &v148;
      v80 = 8 * v135 - 8 * v141[0];
      do
      {
        v81 = v76;
        v82 = v78 + v76;
        if (v80 == v81)
        {
          v105 = (uint64_t *)(v82 + 8);
          v107 = a1 + 56;
          v106 = HIDWORD(v138);
          goto LABEL_135;
        }
        v83 = v158;
        v84 = (char *)sub_1C477672C((uint64_t)v158, *(_QWORD *)(v82 + 8));
        v85 = v83[1];
        v86 = 16;
        if (v85 == *v83)
          v86 = 20;
        v87 = &v85[8 * *(unsigned int *)((char *)v83 + v86)];
        v76 = v81 + 8;
      }
      while (v84 != v87);
      v88 = v80 - v76;
      v89 = v80 - v76 + 16;
      v90 = v88 + 8;
      *(_QWORD *)v142 = v78 + v81 + 8;
      v134 = (int8x16_t *)(v78 + v76);
      do
      {
        if (v89 == 16)
        {
          v107 = a1 + 56;
          v106 = HIDWORD(v138);
          v105 = *(uint64_t **)v142;
          v103 = __srcb;
          goto LABEL_136;
        }
        v91 = (uint64_t *)(v79 - 8);
        v92 = v158;
        v93 = (char *)sub_1C477672C((uint64_t)v158, *(_QWORD *)(v79 - 8));
        v94 = v92[1];
        v95 = 16;
        if (v94 == *v92)
          v95 = 20;
        v90 -= 8;
        v89 -= 8;
        v79 -= 8;
      }
      while (v93 == &v94[8 * *(unsigned int *)((char *)v92 + v95)]);
      v96 = (v90 >> 3) + 1;
      if (v90 < 17)
      {
        v100 = 0;
        v97 = 0;
        v107 = a1 + 56;
        v106 = HIDWORD(v138);
      }
      else
      {
        *(_QWORD *)v143 = (v90 >> 3) + 1;
        if (v96 >= 0xFFFFFFFFFFFFFFFLL)
          v97 = 0xFFFFFFFFFFFFFFFLL;
        else
          v97 = (v90 >> 3) + 1;
        v98 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
        while (1)
        {
          v99 = (uint64_t *)operator new(8 * v97, v98);
          if (v99)
            break;
          v50 = v97 > 1;
          v97 >>= 1;
          if (!v50)
          {
            v100 = 0;
            v97 = 0;
            goto LABEL_132;
          }
        }
        v100 = v99;
LABEL_132:
        v107 = a1 + 56;
        v106 = HIDWORD(v138);
        v96 = *(_QWORD *)v143;
      }
      v105 = sub_1C4E85EBC(v134, v91, (uint64_t *)&v158, v96, v100, v97);
      if (v100)
        operator delete(v100);
LABEL_135:
      v103 = __srcb;
LABEL_136:
      v108 = v135 - v106;
      v109 = v103;
      do
      {
        v110 = sub_1C619C984(v107, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (_QWORD)v109 + 8));
        v109 = (char *)v109 + 1;
        *(_DWORD *)(v110 + 8) = (_DWORD)v109;
        --v108;
      }
      while (v108);
      v58 = *(_QWORD *)(a1 + 8);
      v56 = (uint64_t)v148;
      v55 = v149;
      v104 = (int)(((uint64_t)v105 - v58 - 8) >> 3);
      v60 = v132;
      v61 = v139;
    }
    v101 = (uint64_t *)(v58 + 8 * (_QWORD)v103);
    v102 = (uint64_t *)(v58 + 8 * v104);
  }
  if (v55 != (void *)v56)
    free(v55);
  if (v60)
    v60(v61, v101, v102 - v101);
  if (v101 != v102)
  {
    __srcc = v102;
    v111 = v101;
    do
    {
      v112 = *v111;
      v148 = 0;
      if (sub_1C4E85724((uint64_t)v136, v112, &v148))
      {
        *(_QWORD *)v148 = -8192;
        v113 = *(_DWORD *)(a1 + 60) + 1;
        *(_DWORD *)(a1 + 56) -= 2;
        *(_DWORD *)(a1 + 60) = v113;
      }
      sub_1C618A450((unsigned int *)(v13 + 8), *(_BYTE **)(v112 + 8), (_BYTE *)(*(_QWORD *)(v112 + 8) + 8 * *(unsigned int *)(v112 + 16)));
      v114 = *(unsigned int *)(v112 + 16);
      if ((_DWORD)v114)
      {
        v115 = *(uint64_t **)(v112 + 8);
        v116 = 8 * v114;
        do
        {
          v117 = *v115++;
          v148 = (char *)v117;
          sub_1C619C9E4(*(_QWORD *)a1 + 288, (uint64_t *)&v148)[1] = v13;
          v116 -= 8;
        }
        while (v116);
      }
      *(_QWORD *)v112 = 0;
      *(_DWORD *)(v112 + 16) = 0;
      v118 = v156;
      if (v156 >= (unint64_t)HIDWORD(v156))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v155, (uint64_t)&v157, v156 + 1, 8);
        v118 = v156;
      }
      *((_QWORD *)v155 + v118) = v112;
      LODWORD(v156) = v156 + 1;
      ++v111;
    }
    while (v111 != __srcc);
    v119 = *(_QWORD *)(a1 + 8);
    v120 = (uint64_t *)(v119 + 8 * *(unsigned int *)(a1 + 16));
    v121 = (char *)v120 - (char *)__srcc;
    if (v120 != __srcc)
    {
      memmove(v101, __srcc, (char *)v120 - (char *)__srcc);
      v119 = *(_QWORD *)(a1 + 8);
    }
    v122 = (unint64_t)v101 + v121 - v119;
    *(_DWORD *)(a1 + 16) = v122 >> 3;
    v123 = (uint64_t *)(v119 + (v122 & 0x7FFFFFFF8));
    if (v123 != v101)
    {
      v124 = (unint64_t)((char *)__srcc - (char *)v101) >> 3;
      do
      {
        v125 = *v101++;
        v148 = (char *)v125;
        v126 = sub_1C619C864(v136, (uint64_t *)&v148);
        *((_DWORD *)v126 + 2) -= v124;
      }
      while (v101 != v123);
    }
    v158 = (char **)a3;
    v148 = 0;
    v127 = sub_1C4850EC8((uint64_t *)(a2 + 72), &v158, &v148);
    v16 = (uint64_t)v148;
    if (!v127)
      v16 = *(_QWORD *)(a2 + 72) + 16 * *(unsigned int *)(a2 + 88);
    v15 = 1;
    goto LABEL_8;
  }
LABEL_6:
  v158 = (char **)a3;
  v148 = 0;
  v14 = sub_1C4850EC8((uint64_t *)(a2 + 72), &v158, &v148);
  v15 = 0;
  v16 = (uint64_t)v148;
  if (!v14)
    v16 = *(_QWORD *)(a2 + 72) + 16 * *(unsigned int *)(a2 + 88);
LABEL_8:
  *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * *(int *)(v16 + 8)) |= 4uLL;
  if (v155 != &v157)
    free(v155);
  return v15;
}

uint64_t llvm::LazyCallGraph::RefSCC::switchInternalEdgeToRef(llvm::LazyCallGraph::RefSCC *this, llvm::LazyCallGraph::Node *a2, llvm::LazyCallGraph::Node *a3)
{
  uint64_t *v6;
  llvm::LazyCallGraph::Node *v7;
  int v8;
  int *v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _QWORD *v28;
  unsigned int *v29;
  uint64_t v30;
  signed int v31;
  uint64_t v32;
  signed int v33;
  uint64_t v34;
  uint64_t v35;
  llvm::LazyCallGraph::Node **v37;
  llvm::LazyCallGraph::Node *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  __int128 v45;
  unsigned int v46;
  uint64_t v47;
  char *v48;
  llvm::LazyCallGraph::Node *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  llvm::LazyCallGraph::Node *v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  llvm::LazyCallGraph::Node **v76;
  uint64_t v77;
  llvm::LazyCallGraph::Node *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int i;
  uint64_t v85;
  uint64_t v86;
  llvm::LazyCallGraph::Node **v87;
  uint64_t v88;
  llvm::LazyCallGraph::Node *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  llvm::LazyCallGraph::Node **v93;
  llvm::LazyCallGraph::Node *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  _BYTE v100[128];
  void *v101;
  uint64_t v102;
  _BYTE v103[32];
  void *__src;
  uint64_t v105;
  _BYTE v106[128];
  void *v107;
  uint64_t v108;
  _QWORD v109[50];

  v109[48] = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)(*(_QWORD *)this + 288);
  v107 = a3;
  __src = 0;
  v7 = 0;
  if (sub_1C4DD8A9C(v6, &v107, &__src))
    v7 = (llvm::LazyCallGraph::Node *)*((_QWORD *)__src + 1);
  __src = a3;
  v107 = 0;
  v8 = sub_1C4850EC8((uint64_t *)a2 + 9, &__src, &v107);
  v9 = (int *)v107;
  if (!v8)
    v9 = (int *)(*((_QWORD *)a2 + 9) + 16 * *((unsigned int *)a2 + 22));
  *(_QWORD *)(*((_QWORD *)a2 + 3) + 8 * v9[2]) &= ~4uLL;
  v107 = v109;
  v108 = 0x1000000000;
  __src = v106;
  v105 = 0x1000000000;
  v101 = v103;
  v102 = 0x400000000;
  v98 = v100;
  v99 = 0x1000000000;
  v92 = (unsigned int *)((char *)v7 + 8);
  if (&v98 != (void **)((char *)v7 + 8))
  {
    v10 = *((unsigned int *)v7 + 4);
    if (v10 < 0x11)
    {
      v11 = 0;
      v12 = (uint64_t *)((char *)v7 + 8);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v100, v10, 8);
      v11 = v99;
      v12 = (uint64_t *)((char *)v7 + 8);
      if (*((_DWORD *)v7 + 5) < v99)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v92, (uint64_t)v7 + 24, v99, 8);
        v11 = v99;
      }
    }
    v13 = *((unsigned int *)v7 + 4);
    if (v11 >= v13)
      v14 = v13;
    else
      v14 = v11;
    if ((_DWORD)v14)
    {
      v15 = 0;
      do
      {
        v16 = *v12;
        v17 = *(_QWORD *)((char *)v98 + v15);
        *(_QWORD *)((char *)v98 + v15) = *(_QWORD *)(*v12 + v15);
        *(_QWORD *)(v16 + v15) = v17;
        v15 += 8;
      }
      while (8 * v14 != v15);
    }
    if (v13 >= v11)
    {
      if (v13 <= v11)
      {
        v14 = v11;
        if (!v11)
          goto LABEL_27;
LABEL_23:
        v21 = (uint64_t *)v98;
        v22 = 8 * v14;
        do
        {
          v23 = *v21;
          *(_QWORD *)(v23 + 16) = 0;
          v24 = *(_QWORD *)this;
          v94 = 0;
          if (sub_1C4A5C500(*(_QWORD *)(v24 + 288), *(_DWORD *)(v24 + 304), v23, &v94))
          {
            *(_QWORD *)v94 = -8192;
            *(int32x2_t *)(v24 + 296) = vadd_s32(*(int32x2_t *)(v24 + 296), (int32x2_t)0x1FFFFFFFFLL);
          }
          ++v21;
          v22 -= 8;
        }
        while (v22);
        goto LABEL_27;
      }
      v19 = v13 - v11;
      memcpy((char *)v98 + 8 * v11, (const void *)(*((_QWORD *)v7 + 1) + 8 * v14), 8 * v13 - 8 * v14);
      v20 = v99;
      *((_DWORD *)v7 + 4) = v14;
      v14 = (v20 + v19);
    }
    else
    {
      v18 = v11 - v13;
      memcpy((void *)(*((_QWORD *)v7 + 1) + 8 * v13), (char *)v98 + 8 * v14, 8 * v11 - 8 * v14);
      *((_DWORD *)v7 + 4) += v18;
    }
    LODWORD(v99) = v14;
    if (!(_DWORD)v14)
      goto LABEL_27;
    goto LABEL_23;
  }
LABEL_27:
  *((_QWORD *)a3 + 2) = -1;
  v25 = *((unsigned int *)v7 + 4);
  if (v25 >= *((_DWORD *)v7 + 5))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v92, (uint64_t)v7 + 24, v25 + 1, 8);
    LODWORD(v25) = *((_DWORD *)v7 + 4);
  }
  *(_QWORD *)(*((_QWORD *)v7 + 1) + 8 * v25) = a3;
  ++*((_DWORD *)v7 + 4);
  v26 = *(_QWORD *)this + 288;
  v94 = a3;
  sub_1C619C9E4(v26, (uint64_t *)&v94)[1] = v7;
  if ((_DWORD)v99)
  {
    v37 = (llvm::LazyCallGraph::Node **)v98;
    v93 = (llvm::LazyCallGraph::Node **)((char *)v98 + 8 * v99);
    v91 = (uint64_t)v7 + 24;
    do
    {
      v38 = *v37;
      if (*((_DWORD *)*v37 + 4))
        goto LABEL_44;
      *((_QWORD *)v38 + 2) = 0x100000001;
      v39 = (_QWORD *)*((_QWORD *)v38 + 3);
      v40 = *((unsigned int *)v38 + 8);
      v41 = &v39[v40];
      if ((_DWORD)v40)
      {
        v42 = 8 * v40;
        do
        {
          if ((*v39 & 0xFFFFFFFFFFFFFFF8) != 0 && (*v39 & 4) != 0 && *(_QWORD *)(*v39 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_53;
          ++v39;
          v42 -= 8;
        }
        while (v42);
        v39 = v41;
      }
LABEL_53:
      v94 = v38;
      v95 = v39;
      v96 = v41;
      v43 = sub_1C4DC1E54((uint64_t)&v107, (unint64_t)&v94);
      v44 = (char *)v107 + 24 * v108;
      v45 = *(_OWORD *)v43;
      *((_QWORD *)v44 + 2) = *(_QWORD *)(v43 + 16);
      *(_OWORD *)v44 = v45;
      v46 = v108 + 1;
      LODWORD(v108) = v108 + 1;
      v47 = 2;
      do
      {
        v48 = (char *)v107 + 24 * v46;
        v49 = (llvm::LazyCallGraph::Node *)*((_QWORD *)v48 - 3);
        v50 = (_QWORD *)*((_QWORD *)v48 - 2);
        v51 = (_QWORD *)*((_QWORD *)v48 - 1);
        LODWORD(v108) = v46 - 1;
        v52 = *((_QWORD *)v49 + 3) + 8 * *((unsigned int *)v49 + 8);
        if (v50 == (_QWORD *)v52)
          goto LABEL_84;
        do
        {
          v53 = *v50 & 0xFFFFFFFFFFFFFFF8;
          v54 = *(_DWORD *)(v53 + 16);
          if (v54 == -1)
          {
            v61 = (uint64_t *)(*(_QWORD *)this + 288);
            v94 = (llvm::LazyCallGraph::Node *)(*v50 & 0xFFFFFFFFFFFFFFF8);
            v97 = 0;
            v62 = sub_1C4DD8A9C(v61, &v94, &v97);
            v63 = 0;
            if (v62)
              v63 = *(llvm::LazyCallGraph::Node **)(v97 + 8);
            if (v63 == v7)
            {
              v81 = *((unsigned int *)v7 + 4);
              v82 = v81;
              if (v81 >= *((_DWORD *)v7 + 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v92, v91, v81 + 1, 8);
                v82 = *((_DWORD *)v7 + 4);
              }
              *(_QWORD *)(*((_QWORD *)v7 + 1) + 8 * v82) = v49;
              ++*((_DWORD *)v7 + 4);
              sub_1C618A450(v92, __src, (_BYTE *)__src + 8 * v105);
              LODWORD(v105) = 0;
              v83 = v108;
              for (i = *((_DWORD *)v7 + 4); (_DWORD)v108; v83 = v108)
              {
                v85 = *((_QWORD *)v107 + 3 * v83 - 3);
                LODWORD(v108) = v83 - 1;
                if (i >= *((_DWORD *)v7 + 5))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v92, v91, i + 1, 8);
                  i = *((_DWORD *)v7 + 4);
                }
                *(_QWORD *)(*((_QWORD *)v7 + 1) + 8 * i) = v85;
                i = *((_DWORD *)v7 + 4) + 1;
                *((_DWORD *)v7 + 4) = i;
              }
              v86 = (int)v81;
              if ((int)v81 != (unint64_t)i)
              {
                v87 = (llvm::LazyCallGraph::Node **)(*(_QWORD *)v92 + 8 * (int)v81);
                v88 = 8 * i - 8 * v86;
                do
                {
                  v89 = *v87++;
                  *((_QWORD *)v89 + 2) = -1;
                  v90 = *(_QWORD *)this + 288;
                  v94 = v89;
                  sub_1C619C9E4(v90, (uint64_t *)&v94)[1] = v7;
                  v88 -= 8;
                }
                while (v88);
              }
              goto LABEL_44;
            }
            while (++v50 != v51)
            {
              if ((*v50 & 0xFFFFFFFFFFFFFFF8) != 0 && (*v50 & 4) != 0 && *(_QWORD *)(*v50 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_80;
            }
          }
          else
          {
            if (!v54)
            {
              v94 = v49;
              v95 = v50;
              v96 = v51;
              v55 = sub_1C4DC1E54((uint64_t)&v107, (unint64_t)&v94);
              v56 = (char *)v107 + 24 * v108;
              v57 = *(_OWORD *)v55;
              *((_QWORD *)v56 + 2) = *(_QWORD *)(v55 + 16);
              *(_OWORD *)v56 = v57;
              LODWORD(v108) = v108 + 1;
              v58 = (v47 + 1);
              *(_DWORD *)(v53 + 16) = v47;
              *(_DWORD *)(v53 + 20) = v47;
              v50 = *(_QWORD **)(v53 + 24);
              v59 = *(unsigned int *)(v53 + 32);
              v51 = &v50[v59];
              if ((_DWORD)v59)
              {
                v60 = 8 * v59;
                while ((*v50 & 0xFFFFFFFFFFFFFFF8) == 0
                     || (*v50 & 4) == 0
                     || !*(_QWORD *)(*v50 & 0xFFFFFFFFFFFFFFF8))
                {
                  ++v50;
                  v60 -= 8;
                  if (!v60)
                  {
                    v49 = (llvm::LazyCallGraph::Node *)v53;
                    goto LABEL_83;
                  }
                }
              }
              v49 = (llvm::LazyCallGraph::Node *)v53;
              v52 = (uint64_t)v51;
              goto LABEL_82;
            }
            v64 = *(_DWORD *)(v53 + 20);
            if (v64 < *((_DWORD *)v49 + 5))
              *((_DWORD *)v49 + 5) = v64;
            while (++v50 != v51)
            {
              if ((*v50 & 0xFFFFFFFFFFFFFFF8) != 0 && (*v50 & 4) != 0 && *(_QWORD *)(*v50 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_80;
            }
          }
          v50 = v51;
LABEL_80:
          v58 = v47;
LABEL_82:
          v47 = v58;
        }
        while (v50 != (_QWORD *)v52);
LABEL_83:
        v47 = v58;
        if (!v49)
          break;
LABEL_84:
        v65 = v105;
        if (v105 >= (unint64_t)HIDWORD(v105))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v106, v105 + 1, 8);
          v65 = v105;
        }
        *((_QWORD *)__src + v65) = v49;
        v66 = v105 + 1;
        LODWORD(v105) = v105 + 1;
        v67 = *((_DWORD *)v49 + 5);
        if (v67 == *((_DWORD *)v49 + 4))
        {
          v68 = (char *)__src;
          v69 = (char *)__src + 8 * v66;
          v70 = 8 * v66;
          while (v70)
          {
            v71 = *(_DWORD *)(*(_QWORD *)((char *)__src + v70 - 8) + 16);
            v70 -= 8;
            if (v71 < v67)
            {
              v68 = (char *)__src + v70 + 8;
              break;
            }
          }
          v72 = (_QWORD *)sub_1C484358C(*(_QWORD *)this + 192, 32, 3);
          *v72 = this;
          v72[1] = v72 + 3;
          v72[2] = 0x100000000;
          sub_1C4E86360((uint64_t)(v72 + 1), (uint64_t)v69, (uint64_t)v69, (uint64_t)v69, (uint64_t)v68);
          v73 = v102;
          if (v102 >= (unint64_t)HIDWORD(v102))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)v103, v102 + 1, 8);
            v73 = v102;
          }
          *((_QWORD *)v101 + v73) = v72;
          LODWORD(v102) = v102 + 1;
          v74 = *((_QWORD *)v101 + v102 - 1);
          v75 = *(unsigned int *)(v74 + 16);
          if ((_DWORD)v75)
          {
            v76 = *(llvm::LazyCallGraph::Node ***)(v74 + 8);
            v77 = 8 * v75;
            do
            {
              v78 = *v76++;
              *((_QWORD *)v78 + 2) = -1;
              v79 = *((_QWORD *)v101 + v102 - 1);
              v80 = *(_QWORD *)this + 288;
              v94 = v78;
              sub_1C619C9E4(v80, (uint64_t *)&v94)[1] = v79;
              v77 -= 8;
            }
            while (v77);
          }
          LODWORD(v105) = (unint64_t)(v68 - (_BYTE *)__src) >> 3;
        }
        v46 = v108;
      }
      while ((_DWORD)v108);
LABEL_44:
      ++v37;
    }
    while (v37 != v93);
  }
  v27 = (_DWORD *)((char *)this + 56);
  v94 = v7;
  v28 = sub_1C619C864((_DWORD *)this + 14, (uint64_t *)&v94);
  v30 = *((_QWORD *)this + 1);
  v29 = (unsigned int *)((char *)this + 8);
  v31 = *((_DWORD *)v28 + 2);
  v32 = v31;
  sub_1C618FC28(v29, v30 + 8 * v31, (uint64_t *)v101, (uint64_t *)v101 + v102);
  v33 = v29[2];
  if (v31 < v33)
  {
    v34 = 8 * v31;
    do
    {
      *((_DWORD *)sub_1C619C864(v27, (uint64_t *)(*(_QWORD *)v29 + v34)) + 2) = v31++;
      v34 += 8;
    }
    while (v33 != v31);
  }
  v35 = *(_QWORD *)v29;
  if (v98 != v100)
    free(v98);
  if (v101 != v103)
    free(v101);
  if (__src != v106)
    free(__src);
  if (v107 != v109)
    free(v107);
  return v35 + 8 * v32;
}

_DWORD *llvm::LazyCallGraph::RefSCC::insertInternalRefEdge(llvm::LazyCallGraph::RefSCC *this, llvm::LazyCallGraph::Node *a2, llvm::LazyCallGraph::Node *a3)
{
  return llvm::LazyCallGraph::EdgeSequence::insertEdgeInternal((_DWORD *)a2 + 6, (uint64_t)a3, 0);
}

_DWORD *llvm::LazyCallGraph::RefSCC::insertOutgoingEdge(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return llvm::LazyCallGraph::EdgeSequence::insertEdgeInternal((_DWORD *)(a2 + 24), a3, a4);
}

void llvm::LazyCallGraph::RefSCC::insertIncomingRefEdge(llvm::LazyCallGraph::RefSCC *this@<X0>, llvm::LazyCallGraph::Node *a2@<X1>, llvm::LazyCallGraph::Node *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  int8x16_t *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::LazyCallGraph::Node **v36;
  _QWORD *v37;
  llvm::LazyCallGraph::Node *v38;
  uint64_t v39;
  uint64_t *v40;
  llvm::LazyCallGraph::Node **v41;
  _QWORD *v42;
  llvm::LazyCallGraph::Node *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  const std::nothrow_t *v47;
  uint64_t *v48;
  BOOL v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  llvm::LazyCallGraph::Node **v54;
  char *v55;
  llvm::LazyCallGraph::Node *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  llvm::LazyCallGraph::Node *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  _QWORD *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  llvm::LazyCallGraph::Node **v93;
  _QWORD *v94;
  llvm::LazyCallGraph::Node *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  llvm::LazyCallGraph::Node **v102;
  _QWORD *v103;
  llvm::LazyCallGraph::Node *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  const std::nothrow_t *v108;
  uint64_t v109;
  uint64_t *v110;
  int8x16_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  llvm::LazyCallGraph::Node **v119;
  uint64_t *v120;
  uint64_t v121;
  int v122;
  _BYTE *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD **v128;
  uint64_t v129;
  _QWORD **v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  int64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  _QWORD *v151;
  _QWORD *v152;
  int v153;
  unsigned int v154;
  llvm::LazyCallGraph::Node *v155;
  uint64_t v156;
  uint64_t v159;
  uint64_t v160;
  _QWORD *__dst;
  void *__dsta;
  uint64_t *__dstb;
  uint64_t v164;
  _QWORD *v165;
  int8x16_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  llvm::LazyCallGraph::Node *v171;
  llvm::LazyCallGraph::Node *v172;
  uint64_t v173;
  int v174;
  _BYTE v175[128];
  uint64_t v176;
  _QWORD *v177;
  llvm::LazyCallGraph::Node **v178;
  uint64_t v179;
  _QWORD v180[18];

  v180[16] = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)(*(_QWORD *)this + 288);
  v171 = a2;
  v178 = 0;
  if ((sub_1C4DD8A9C(v6, &v171, &v178) & 1) != 0 && (v7 = (uint64_t *)v178[1]) != 0)
    v8 = *v7;
  else
    v8 = 0;
  v156 = (uint64_t)(a4 + 2);
  *a4 = a4 + 2;
  v164 = (uint64_t)a4;
  a4[1] = 0x100000000;
  v9 = *(_QWORD *)this + 552;
  v171 = (llvm::LazyCallGraph::Node *)v8;
  v10 = *((int *)sub_1C4E863E8(v9, (uint64_t *)&v171) + 2);
  v11 = *(_QWORD *)this + 552;
  v171 = this;
  v12 = *((int *)sub_1C4E863E8(v11, (uint64_t *)&v171) + 2);
  v160 = *(_QWORD *)this;
  v171 = (llvm::LazyCallGraph::Node *)v8;
  v13 = *((_DWORD *)sub_1C4E863E8(v160 + 552, (uint64_t *)&v171) + 2);
  v171 = this;
  v159 = *((int *)sub_1C4E863E8(v160 + 552, (uint64_t *)&v171) + 2);
  v171 = (llvm::LazyCallGraph::Node *)v175;
  v172 = (llvm::LazyCallGraph::Node *)v175;
  v173 = 4;
  v174 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v171, v8);
  if ((_DWORD)v10 != (_DWORD)v12)
  {
    v14 = *(_QWORD *)(*(_QWORD *)this + 408);
    __dst = (_QWORD *)(v14 + 8 * v12);
    v15 = (_QWORD *)(v14 + 8 * v10);
    do
    {
      v16 = v15[1];
      v165 = v15 + 1;
      v17 = *(unsigned int *)(v16 + 16);
      if (!(_DWORD)v17)
        goto LABEL_36;
      v18 = *(_QWORD *)(v16 + 8);
      v168 = v18 + 8 * v17;
      do
      {
        v19 = *(unsigned int *)(*(_QWORD *)v18 + 16);
        if ((_DWORD)v19)
        {
          v20 = *(_QWORD *)(*(_QWORD *)v18 + 8);
          v21 = v20 + 8 * v19;
          do
          {
            v22 = *(unsigned int *)(*(_QWORD *)v20 + 32);
            if ((_DWORD)v22)
            {
              v23 = 8 * v22;
              v24 = *(uint64_t **)(*(_QWORD *)v20 + 24);
              while ((*v24 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF8))
              {
                ++v24;
                v23 -= 8;
                if (!v23)
                  goto LABEL_32;
              }
            }
            else
            {
              v24 = *(uint64_t **)(*(_QWORD *)v20 + 24);
            }
            v25 = *(_QWORD *)(*(_QWORD *)v20 + 24) + 8 * v22;
            if (v24 != (uint64_t *)v25)
            {
              v26 = *v24;
LABEL_20:
              v27 = (uint64_t *)(*(_QWORD *)this + 288);
              v178 = (llvm::LazyCallGraph::Node **)(v26 & 0xFFFFFFFFFFFFFFF8);
              v177 = 0;
              if ((sub_1C4DD8A9C(v27, &v178, &v177) & 1) != 0 && (v28 = (uint64_t *)v177[1]) != 0)
                v29 = *v28;
              else
                v29 = 0;
              v30 = (char *)sub_1C477672C((uint64_t)&v171, v29);
              if (v172 == v171)
                v31 = (uint64_t *)((char *)&v173 + 4);
              else
                v31 = &v173;
              if (v30 != (char *)v172 + 8 * *(unsigned int *)v31)
              {
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v171, v16);
                goto LABEL_36;
              }
              while (++v24 != (uint64_t *)v25)
              {
                v26 = *v24;
                if ((*v24 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v24 & 0xFFFFFFFFFFFFFFF8))
                {
                  if (v24 != (uint64_t *)v25)
                    goto LABEL_20;
                  break;
                }
              }
            }
LABEL_32:
            v20 += 8;
          }
          while (v20 != v21);
        }
        v18 += 8;
      }
      while (v18 != v168);
LABEL_36:
      v15 = v165;
    }
    while (v165 != __dst);
  }
  v32 = *(_QWORD *)(v160 + 408);
  v33 = (int8x16_t *)(v32 + 8 * v13);
  v34 = v32 + 8 * v159 + 8;
  v178 = &v171;
  if (v33 != (int8x16_t *)v34)
  {
    v35 = 8 * v159 - 8 * v13 + 8;
    while (1)
    {
      v36 = v178;
      v37 = sub_1C477672C((uint64_t)v178, v33->i64[0]);
      v38 = v36[1];
      v39 = v38 == *v36 ? 20 : 16;
      if (v37 != (_QWORD *)((char *)v38 + 8 * *(unsigned int *)((char *)v36 + v39)))
        break;
      v33 = (int8x16_t *)((char *)v33 + 8);
      v35 -= 8;
      if (!v35)
        goto LABEL_61;
    }
    while (1)
    {
      v35 -= 8;
      if (!v35)
        break;
      v40 = (uint64_t *)(v34 - 8);
      v41 = v178;
      v42 = sub_1C477672C((uint64_t)v178, *(_QWORD *)(v34 - 8));
      v43 = v41[1];
      if (v43 == *v41)
        v44 = 20;
      else
        v44 = 16;
      v34 -= 8;
      if (v42 == (_QWORD *)((char *)v43 + 8 * *(unsigned int *)((char *)v41 + v44)))
      {
        v45 = (v35 >> 3) + 1;
        if (v35 < 17)
        {
LABEL_57:
          v50 = 0;
          v46 = 0;
        }
        else
        {
          if (v45 >= 0xFFFFFFFFFFFFFFFLL)
            v46 = 0xFFFFFFFFFFFFFFFLL;
          else
            v46 = (v35 >> 3) + 1;
          v47 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          while (1)
          {
            v48 = (uint64_t *)operator new(8 * v46, v47);
            if (v48)
              break;
            v49 = v46 > 1;
            v46 >>= 1;
            if (!v49)
              goto LABEL_57;
          }
          v50 = v48;
        }
        v33 = (int8x16_t *)sub_1C4E85A00(v33, v40, (uint64_t *)&v178, v45, v50, v46);
        if (v50)
          operator delete(v50);
        break;
      }
    }
  }
LABEL_61:
  v51 = v160;
  if (v13 <= (int)v159)
  {
    v52 = 8 * v13;
    do
    {
      v177 = *(_QWORD **)(*(_QWORD *)(v160 + 408) + v52);
      v178 = 0;
      v53 = sub_1C4DD8A9C((uint64_t *)(v160 + 552), &v177, &v178);
      v54 = v178;
      if (!v53)
        v54 = (llvm::LazyCallGraph::Node **)(*(_QWORD *)(v160 + 552) + 16 * *(unsigned int *)(v160 + 568));
      *((_DWORD *)v54 + 2) = v13++;
      v52 += 8;
    }
    while ((_DWORD)v159 + 1 != v13);
  }
  v55 = (char *)sub_1C477672C((uint64_t)&v171, (uint64_t)this);
  v57 = (uint64_t)v171;
  v56 = v172;
  if (v172 == v171)
    v58 = HIDWORD(v173);
  else
    v58 = v173;
  if (v55 == (char *)v172 + 8 * v58)
  {
    v59 = &v33[-1].i64[1];
    v60 = &v33[-1].i64[1];
    goto LABEL_147;
  }
  v61 = *(_QWORD *)(v160 + 408);
  v62 = (uint64_t)v33->i64 - v61;
  __dsta = (void *)(((unint64_t)v33 - v61) >> 3);
  if ((int)__dsta + 1 < (int)v159)
  {
    if (v172 != v171)
    {
      if (v173 >= 0x21 && 4 * (HIDWORD(v173) - v174) < v173)
      {
        free(v172);
        v153 = 1 << (33 - __clz(HIDWORD(v173) - v174 - 1));
        v49 = (HIDWORD(v173) - v174) > 0x10;
        HIDWORD(v173) = 0;
        v174 = 0;
        if (v49)
          v154 = v153;
        else
          v154 = 32;
        LODWORD(v173) = v154;
        v155 = (llvm::LazyCallGraph::Node *)malloc_type_malloc(8 * v154, 0x4065EBACuLL);
        if (!v155)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        v172 = v155;
        memset(v155, 255, 8 * v173);
LABEL_74:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v171, (uint64_t)this);
        v169 = v62;
        v178 = (llvm::LazyCallGraph::Node **)v180;
        HIDWORD(v179) = 4;
        v180[0] = this;
        v63 = 1;
        do
        {
          v64 = v178[--v63];
          LODWORD(v179) = v63;
          v65 = *((unsigned int *)v64 + 4);
          if ((_DWORD)v65)
          {
            v66 = *((_QWORD *)v64 + 1);
            v67 = v66 + 8 * v65;
            do
            {
              v68 = *(unsigned int *)(*(_QWORD *)v66 + 16);
              if ((_DWORD)v68)
              {
                v69 = *(_QWORD *)(*(_QWORD *)v66 + 8);
                v70 = v69 + 8 * v68;
                do
                {
                  v71 = *(unsigned int *)(*(_QWORD *)v69 + 32);
                  if ((_DWORD)v71)
                  {
                    v72 = 8 * v71;
                    v73 = *(uint64_t **)(*(_QWORD *)v69 + 24);
                    while ((*v73 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v73 & 0xFFFFFFFFFFFFFFF8))
                    {
                      ++v73;
                      v72 -= 8;
                      if (!v72)
                        goto LABEL_104;
                    }
                  }
                  else
                  {
                    v73 = *(uint64_t **)(*(_QWORD *)v69 + 24);
                  }
                  v74 = *(_QWORD *)(*(_QWORD *)v69 + 24) + 8 * v71;
                  if (v73 != (uint64_t *)v74)
                  {
                    v75 = *v73;
LABEL_88:
                    v76 = (uint64_t *)(*(_QWORD *)this + 288);
                    v176 = 0;
                    v177 = (_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF8);
                    if ((sub_1C4DD8A9C(v76, &v177, &v176) & 1) != 0 && (v77 = *(uint64_t **)(v176 + 8)) != 0)
                      v78 = *v77;
                    else
                      v78 = 0;
                    v79 = *(_QWORD *)this;
                    v80 = (uint64_t *)(*(_QWORD *)this + 552);
                    v176 = v78;
                    v177 = 0;
                    if ((sub_1C4DD8A9C(v80, &v176, &v177) & 1) != 0)
                      v81 = v177;
                    else
                      v81 = (_QWORD *)(*(_QWORD *)(v79 + 552) + 16 * *(unsigned int *)(v79 + 568));
                    if (*((_DWORD *)v81 + 2) > (int)v10)
                    {
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v171, v78);
                      if (v82)
                      {
                        v83 = v179;
                        if (v179 >= (unint64_t)HIDWORD(v179))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v178, (uint64_t)v180, v179 + 1, 8);
                          v83 = v179;
                        }
                        v178[v83] = (llvm::LazyCallGraph::Node *)v78;
                        LODWORD(v179) = v179 + 1;
                      }
                    }
                    while (++v73 != (uint64_t *)v74)
                    {
                      v75 = *v73;
                      if ((*v73 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v73 & 0xFFFFFFFFFFFFFFF8))
                      {
                        if (v73 != (uint64_t *)v74)
                          goto LABEL_88;
                        break;
                      }
                    }
                  }
LABEL_104:
                  v69 += 8;
                }
                while (v69 != v70);
              }
              v66 += 8;
            }
            while (v66 != v67);
            v63 = v179;
            v51 = v160;
            v62 = v169;
          }
        }
        while (v63);
        if (v178 != v180)
          free(v178);
        v84 = 0;
        v85 = v62 << 29;
        v86 = *(_QWORD *)(v51 + 408);
        v87 = (int)(v62 >> 3);
        v88 = v86 + 8 * (int)__dsta;
        v89 = v86 + 8 * v159 + 8;
        v178 = &v171;
        v90 = 8 * v159 - 8 * (int)__dsta;
        do
        {
          v91 = v84;
          v92 = v88 + v84;
          if (v90 == v91)
          {
            v100 = (uint64_t *)(v92 + 8);
            v115 = v159;
            v109 = v160;
            v110 = (uint64_t *)(v160 + 552);
            goto LABEL_141;
          }
          v93 = v178;
          v94 = sub_1C477672C((uint64_t)v178, *(_QWORD *)(v92 + 8));
          v95 = v93[1];
          if (v95 == *v93)
            v96 = 20;
          else
            v96 = 16;
          v97 = (_QWORD *)((char *)v95 + 8 * *(unsigned int *)((char *)v93 + v96));
          v84 = v91 + 8;
        }
        while (v94 != v97);
        v170 = HIDWORD(v85);
        v98 = v90 - v84 + 16;
        v99 = v90 - v91;
        v100 = (uint64_t *)(v88 + v91 + 8);
        v166 = (int8x16_t *)(v88 + v84);
        do
        {
          if (v98 == 16)
          {
            v109 = v160;
            v110 = (uint64_t *)(v160 + 552);
            goto LABEL_140;
          }
          v101 = (uint64_t *)(v89 - 8);
          v102 = v178;
          v103 = sub_1C477672C((uint64_t)v178, *(_QWORD *)(v89 - 8));
          v104 = v102[1];
          if (v104 == *v102)
            v105 = 20;
          else
            v105 = 16;
          v99 -= 8;
          v98 -= 8;
          v89 -= 8;
        }
        while (v103 == (_QWORD *)((char *)v104 + 8 * *(unsigned int *)((char *)v102 + v105)));
        v106 = (v99 >> 3) + 1;
        if (v99 < 17)
        {
          v113 = 0;
          v107 = 0;
          v109 = v160;
          v110 = (uint64_t *)(v160 + 552);
          v111 = v166;
        }
        else
        {
          if (v106 >= 0xFFFFFFFFFFFFFFFLL)
            v107 = 0xFFFFFFFFFFFFFFFLL;
          else
            v107 = (v99 >> 3) + 1;
          v108 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          v109 = v160;
          v110 = (uint64_t *)(v160 + 552);
          v111 = v166;
          while (1)
          {
            v112 = (uint64_t *)operator new(8 * v107, v108);
            if (v112)
              break;
            v49 = v107 > 1;
            v107 >>= 1;
            if (!v49)
            {
              v113 = 0;
              v107 = 0;
              goto LABEL_138;
            }
          }
          v113 = v112;
        }
LABEL_138:
        v100 = sub_1C4E85EBC(v111, v101, (uint64_t *)&v178, v106, v113, v107);
        if (v113)
          operator delete(v113);
LABEL_140:
        v115 = v159;
        HIDWORD(v85) = v170;
LABEL_141:
        v116 = v115 - HIDWORD(v85);
        v117 = v87;
        do
        {
          v177 = *(_QWORD **)(*(_QWORD *)(v109 + 408) + 8 * v117 + 8);
          v178 = 0;
          v118 = sub_1C4DD8A9C(v110, &v177, &v178);
          v119 = v178;
          if (!v118)
            v119 = (llvm::LazyCallGraph::Node **)(*(_QWORD *)(v109 + 552) + 16 * *(unsigned int *)(v109 + 568));
          *((_DWORD *)v119 + 2) = ++v117;
          --v116;
        }
        while (v116);
        v61 = *(_QWORD *)(v109 + 408);
        v57 = (uint64_t)v171;
        v56 = v172;
        v114 = (int)(((uint64_t)v100 - v61 - 8) >> 3);
        goto LABEL_146;
      }
      memset(v172, 255, 8 * v173);
    }
    HIDWORD(v173) = 0;
    v174 = 0;
    goto LABEL_74;
  }
  v87 = (int)(v62 >> 3);
  v114 = v159;
LABEL_146:
  v59 = (uint64_t *)(v61 + 8 * v87);
  v60 = (uint64_t *)(v61 + 8 * v114);
LABEL_147:
  if (v56 != (llvm::LazyCallGraph::Node *)v57)
    free(v56);
  v171 = (llvm::LazyCallGraph::Node *)v175;
  v172 = (llvm::LazyCallGraph::Node *)v175;
  v173 = 16;
  v174 = 0;
  if (v59 != v60)
  {
    v120 = v59;
    do
    {
      v121 = *v120++;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v171, v121);
    }
    while (v120 != v60);
  }
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v171, (uint64_t)this);
  v178 = (llvm::LazyCallGraph::Node **)v180;
  v179 = 0x1000000000;
  __dstb = v59;
  v122 = 0;
  if (v59 != v60)
  {
    v167 = v60;
    do
    {
      v126 = *v59;
      v127 = (_QWORD *)(*v59 + 8);
      v128 = (_QWORD **)*v127;
      v129 = *(unsigned int *)(*v59 + 16);
      if ((_DWORD)v129)
      {
        v130 = &v128[v129];
        do
        {
          v131 = *v128;
          *v131 = this;
          v177 = v131;
          *((_DWORD *)sub_1C619C864((_DWORD *)this + 14, (uint64_t *)&v177) + 2) = v122;
          v132 = *((unsigned int *)v131 + 4);
          if ((_DWORD)v132)
          {
            v133 = (_QWORD *)v131[1];
            v134 = 8 * v132;
            do
            {
              v135 = (_QWORD *)*v133++;
              v136 = *(_QWORD *)this + 288;
              v177 = v135;
              sub_1C619C9E4(v136, (uint64_t *)&v177)[1] = v131;
              v134 -= 8;
            }
            while (v134);
          }
          ++v122;
          ++v128;
        }
        while (v128 != v130);
      }
      if ((_DWORD)v179)
        sub_1C618A450((unsigned int *)&v178, *(_BYTE **)(v126 + 8), (_BYTE *)(*(_QWORD *)(v126 + 8) + 8 * *(unsigned int *)(v126 + 16)));
      else
        sub_1C4E865BC((uint64_t)&v178, (uint64_t)v127);
      v60 = v167;
      *(_DWORD *)(v126 + 16) = 0;
      v137 = *(unsigned int *)(v164 + 8);
      if (v137 >= *(unsigned int *)(v164 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v164, v156, v137 + 1, 8);
        v137 = *(unsigned int *)(v164 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v164 + 8 * v137) = v126;
      ++*(_DWORD *)(v164 + 8);
      ++v59;
    }
    while (v59 != v167);
  }
  v123 = (_BYTE *)*((_QWORD *)this + 1);
  v124 = *((unsigned int *)this + 4);
  if ((_DWORD)v124)
  {
    v138 = 8 * v124;
    do
    {
      v139 = *(_QWORD **)v123;
      v123 += 8;
      v177 = v139;
      *((_DWORD *)sub_1C619C864((_DWORD *)this + 14, (uint64_t *)&v177) + 2) = v122++;
      v138 -= 8;
    }
    while (v138);
    v123 = (_BYTE *)*((_QWORD *)this + 1);
    v125 = *((unsigned int *)this + 4);
  }
  else
  {
    v125 = 0;
  }
  sub_1C618A450((unsigned int *)&v178, v123, &v123[8 * v125]);
  sub_1C4E865BC((uint64_t)this + 8, (uint64_t)&v178);
  v140 = __dstb;
  if (__dstb != v60)
  {
    v141 = __dstb;
    do
    {
      v142 = *v141;
      v143 = *(_QWORD *)this;
      v177 = 0;
      if (sub_1C4A5C500(*(_QWORD *)(v143 + 552), *(_DWORD *)(v143 + 568), v142, &v177))
      {
        *v177 = -8192;
        *(int32x2_t *)(v143 + 560) = vadd_s32(*(int32x2_t *)(v143 + 560), (int32x2_t)0x1FFFFFFFFLL);
      }
      ++v141;
    }
    while (v141 != v60);
  }
  v144 = *(_QWORD *)this;
  v145 = *(_QWORD *)(*(_QWORD *)this + 408);
  v146 = (uint64_t *)(v145 + 8 * *(unsigned int *)(*(_QWORD *)this + 416));
  v147 = (char *)v146 - (char *)v60;
  if (v146 == v60)
  {
    v149 = *(_QWORD *)this;
    v148 = *(_QWORD *)(*(_QWORD *)this + 408);
  }
  else
  {
    memmove(__dstb, v60, (char *)v146 - (char *)v60);
    v148 = *(_QWORD *)(v144 + 408);
    v149 = *(_QWORD *)this;
    v145 = *(_QWORD *)(*(_QWORD *)this + 408);
  }
  *(_DWORD *)(v144 + 416) = ((unint64_t)__dstb + v147 - v148) >> 3;
  v150 = (uint64_t *)(v145 + 8 * *(unsigned int *)(v149 + 416));
  if (v150 != __dstb)
  {
    do
    {
      v151 = (_QWORD *)*v140++;
      v177 = v151;
      v152 = sub_1C4E863E8(*(_QWORD *)this + 552, (uint64_t *)&v177);
      *((_DWORD *)v152 + 2) -= (unint64_t)((char *)v60 - (char *)__dstb) >> 3;
    }
    while (v140 != v150);
  }
  llvm::LazyCallGraph::EdgeSequence::insertEdgeInternal((_DWORD *)a2 + 6, (uint64_t)a3, 0);
  if (v178 != v180)
    free(v178);
  if (v172 != v171)
    free(v172);
}

BOOL llvm::LazyCallGraph::RefSCC::removeOutgoingEdge(llvm::LazyCallGraph::RefSCC *this, llvm::LazyCallGraph::Node *a2, llvm::LazyCallGraph::Node *a3)
{
  return llvm::LazyCallGraph::EdgeSequence::removeEdgeInternal((uint64_t)a2 + 24, (uint64_t)a3);
}

void llvm::LazyCallGraph::RefSCC::removeInternalRefEdge(uint64_t *a1@<X0>, void *a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  void **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void **i;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  __int128 v39;
  unsigned int v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  char *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  int j;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t *v100;
  void *v101;
  uint64_t v102;
  _BYTE v103[32];
  void *v104;
  uint64_t v105;
  _BYTE v106[96];
  _QWORD *v107;
  uint64_t v108;
  _QWORD v109[10];

  v109[8] = *MEMORY[0x1E0C80C00];
  v6 = a5 + 16;
  *(_QWORD *)a5 = a5 + 16;
  *(_QWORD *)(a5 + 8) = 0x100000000;
  if (a4)
  {
    v7 = a3;
    v10 = (uint64_t)a2 + 24;
    v11 = 8 * a4;
    v12 = 8 * a4;
    v13 = (uint64_t *)a3;
    do
    {
      v14 = *v13++;
      llvm::LazyCallGraph::EdgeSequence::removeEdgeInternal(v10, v14);
      v12 -= 8;
    }
    while (v12);
    v15 = v11;
    for (i = v7; *i == a2; ++i)
    {
      v15 -= 8;
      if (!v15)
        return;
    }
    v17 = (uint64_t *)(*a1 + 288);
    v104 = a2;
    v107 = 0;
    v18 = 0;
    if (sub_1C4DD8A9C(v17, &v104, &v107))
      v18 = v107[1];
    while (1)
    {
      v19 = (uint64_t *)(*a1 + 288);
      v104 = *v7;
      v107 = 0;
      v20 = sub_1C4DD8A9C(v19, &v104, &v107);
      v21 = 0;
      if (v20)
        v21 = v107[1];
      if (v21 != v18)
        break;
      ++v7;
      v11 -= 8;
      if (!v11)
        return;
    }
    v107 = v109;
    v108 = 0x800000000;
    v22 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v22)
    {
      v23 = a1[1];
      v24 = v23 + 8 * v22;
      do
      {
        v25 = *(_BYTE **)(*(_QWORD *)v23 + 8);
        v26 = *(unsigned int *)(*(_QWORD *)v23 + 16);
        if ((_DWORD)v26)
        {
          v27 = 8 * v26;
          v28 = *(uint64_t **)(*(_QWORD *)v23 + 8);
          do
          {
            v29 = *v28++;
            *(_QWORD *)(v29 + 16) = 0;
            v27 -= 8;
          }
          while (v27);
        }
        sub_1C618A450((unsigned int *)&v107, v25, &v25[8 * v26]);
        v23 += 8;
      }
      while (v23 != v24);
      LODWORD(v22) = v108;
    }
    v30 = 0;
    v104 = v106;
    v105 = 0x400000000;
    v101 = v103;
    v102 = 0x400000000;
    v31 = (int)v22;
    while (2)
    {
      while (1)
      {
        v32 = v107[v22 - 1];
        LODWORD(v22) = v22 - 1;
        LODWORD(v108) = v22;
        if (!*(_DWORD *)(v32 + 16))
          break;
        if (!(_DWORD)v22)
          goto LABEL_71;
      }
      *(_QWORD *)(v32 + 16) = 0x100000001;
      v33 = *(_QWORD **)(v32 + 24);
      v34 = *(unsigned int *)(v32 + 32);
      v35 = &v33[v34];
      if ((_DWORD)v34)
      {
        v36 = 8 * v34;
        while ((*v33 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v33 & 0xFFFFFFFFFFFFFFF8))
        {
          ++v33;
          v36 -= 8;
          if (!v36)
          {
            v33 = v35;
            break;
          }
        }
      }
      v97 = v32;
      v98 = v33;
      v99 = v35;
      v37 = sub_1C4DC1E54((uint64_t)&v104, (unint64_t)&v97);
      v38 = (char *)v104 + 24 * v105;
      v39 = *(_OWORD *)v37;
      *((_QWORD *)v38 + 2) = *(_QWORD *)(v37 + 16);
      *(_OWORD *)v38 = v39;
      v40 = v105 + 1;
      LODWORD(v105) = v105 + 1;
      v41 = 2;
      do
      {
        v42 = (char *)v104 + 24 * v40;
        v44 = *((_QWORD *)v42 - 3);
        v43 = (_QWORD *)*((_QWORD *)v42 - 2);
        v45 = (_QWORD *)*((_QWORD *)v42 - 1);
        LODWORD(v105) = v40 - 1;
        v46 = *(_QWORD *)(v44 + 24) + 8 * *(unsigned int *)(v44 + 32);
        if (v43 != (_QWORD *)v46)
        {
          v47 = v41;
          do
          {
            v48 = *v43 & 0xFFFFFFFFFFFFFFF8;
            v49 = *(_DWORD *)(v48 + 16);
            if (v49)
            {
              if (v49 == -1)
              {
                while (++v43 != v45)
                {
                  if ((*v43 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v43 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_55;
                }
              }
              else
              {
                v55 = *(_DWORD *)(v48 + 20);
                if ((v55 & 0x80000000) == 0 && v55 < *(_DWORD *)(v44 + 20))
                  *(_DWORD *)(v44 + 20) = v55;
                while (++v43 != v45)
                {
                  if ((*v43 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v43 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_55;
                }
              }
              v43 = v45;
LABEL_55:
              v41 = v47;
            }
            else
            {
              v97 = v44;
              v98 = v43;
              v99 = v45;
              v50 = sub_1C4DC1E54((uint64_t)&v104, (unint64_t)&v97);
              v51 = (char *)v104 + 24 * v105;
              v52 = *(_OWORD *)v50;
              *((_QWORD *)v51 + 2) = *(_QWORD *)(v50 + 16);
              *(_OWORD *)v51 = v52;
              LODWORD(v105) = v105 + 1;
              v41 = (v47 + 1);
              *(_DWORD *)(v48 + 16) = v47;
              *(_DWORD *)(v48 + 20) = v47;
              v43 = *(_QWORD **)(v48 + 24);
              v53 = *(unsigned int *)(v48 + 32);
              v45 = &v43[v53];
              if ((_DWORD)v53)
              {
                v54 = 8 * v53;
                while ((*v43 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v43 & 0xFFFFFFFFFFFFFFF8))
                {
                  ++v43;
                  v54 -= 8;
                  if (!v54)
                  {
                    v44 = v48;
                    goto LABEL_58;
                  }
                }
              }
              v44 = v48;
              v46 = (uint64_t)v45;
            }
            v47 = v41;
          }
          while (v43 != (_QWORD *)v46);
        }
LABEL_58:
        v56 = v102;
        if (v102 >= (unint64_t)HIDWORD(v102))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)v103, v102 + 1, 8);
          v56 = v102;
        }
        *((_QWORD *)v101 + v56) = v44;
        v57 = (v102 + 1);
        LODWORD(v102) = v102 + 1;
        v58 = *(_DWORD *)(v44 + 20);
        if (v58 == *(_DWORD *)(v44 + 16))
        {
          v59 = (char *)v101;
          v60 = (char *)v101 + 8 * v57;
          if ((_DWORD)v57)
          {
            v61 = 8 * v57;
            while (1)
            {
              v62 = &v59[v61];
              v63 = *(_QWORD *)&v59[v61 - 8];
              if (*(_DWORD *)(v63 + 16) < v58)
                break;
              *(_DWORD *)(v63 + 16) = -1;
              *(_DWORD *)(v63 + 20) = v30;
              v61 -= 8;
              if (!v61)
              {
                v62 = v59;
                break;
              }
            }
          }
          else
          {
            v62 = (char *)v101;
          }
          if (v31 == (v60 - v62) >> 3)
          {
            for (; v62 != v60; *(_DWORD *)(v70 + 20) = -1)
            {
              v70 = *(_QWORD *)v62;
              v62 += 8;
            }
            if (v59 != v103)
              free(v59);
            v71 = v104;
            goto LABEL_84;
          }
          ++v30;
          LODWORD(v102) = (unint64_t)(v62 - v59) >> 3;
        }
        v40 = v105;
      }
      while ((_DWORD)v105);
      LODWORD(v22) = v108;
      if ((_DWORD)v108)
        continue;
      break;
    }
LABEL_71:
    if (v30 >= 1)
    {
      for (j = 0; j != v30; ++j)
      {
        v65 = *a1;
        v66 = (_QWORD *)sub_1C484358C(*a1 + 312, 128, 3);
        v67 = v66;
        v68 = 0;
        *v66 = v65;
        v66[1] = v66 + 3;
        v66[2] = 0x400000000;
        v66[7] = 1;
        do
        {
          v66[v68 + 8] = -4096;
          v68 += 2;
        }
        while (v68 != 8);
        v69 = *(unsigned int *)(a5 + 8);
        if (v69 >= *(unsigned int *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v6, v69 + 1, 8);
          v69 = *(unsigned int *)(a5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v69) = v67;
        ++*(_DWORD *)(a5 + 8);
      }
    }
    v72 = *a1;
    v73 = (uint64_t *)(*a1 + 552);
    v100 = a1;
    v97 = 0;
    if ((sub_1C4DD8A9C(v73, &v100, &v97) & 1) != 0)
      v74 = v97;
    else
      v74 = *(_QWORD *)(v72 + 552) + 16 * *(unsigned int *)(v72 + 568);
    v75 = *(_DWORD *)(v74 + 8);
    v76 = *a1;
    v77 = *(_QWORD *)(*a1 + 408);
    v78 = v77 + 8 * v75;
    v79 = *(unsigned int *)(*a1 + 416);
    v80 = v77 + 8 * v79;
    if (v80 == v78 + 8)
    {
      v81 = *a1;
    }
    else
    {
      memmove((void *)v78, (const void *)(v78 + 8), v80 - (v78 + 8));
      LODWORD(v79) = *(_DWORD *)(v76 + 416);
      v81 = *a1;
      v77 = *(_QWORD *)(*a1 + 408);
    }
    *(_DWORD *)(v76 + 416) = v79 - 1;
    sub_1C618FC28((unsigned int *)(v81 + 408), v77 + 8 * v75, *(uint64_t **)a5, (uint64_t *)(*(_QWORD *)a5 + 8 * *(unsigned int *)(a5 + 8)));
    v82 = *(int *)(*a1 + 416);
    if (v75 != (_DWORD)v82)
    {
      v83 = v82 - v75;
      v84 = (uint64_t)v75 << 32;
      do
      {
        *((_DWORD *)sub_1C4E863E8(*a1 + 552, (uint64_t *)(*(_QWORD *)(*a1 + 408) + (v84 >> 29))) + 2) = v75;
        v84 += 0x100000000;
        ++v75;
        --v83;
      }
      while (v83);
    }
    v85 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v85)
    {
      v86 = (uint64_t *)a1[1];
      v87 = &v86[v85];
      do
      {
        v88 = *v86;
        v97 = v88;
        v89 = *(uint64_t **)(v88 + 8);
        v90 = *(int *)(*v89 + 20);
        v91 = *(unsigned int *)(v88 + 16);
        if ((_DWORD)v91)
        {
          v92 = 8 * v91;
          do
          {
            v93 = *v89++;
            *(_DWORD *)(v93 + 20) = -1;
            v92 -= 8;
          }
          while (v92);
        }
        v94 = *(_QWORD *)(*(_QWORD *)a5 + 8 * v90);
        v95 = *(unsigned int *)(v94 + 16);
        v96 = v95;
        if (v95 >= *(unsigned int *)(v94 + 20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v94 + 8, v94 + 24, v95 + 1, 8);
          v96 = *(unsigned int *)(v94 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(v94 + 8) + 8 * v96) = v88;
        ++*(_DWORD *)(v94 + 16);
        *((_DWORD *)sub_1C619C864((_DWORD *)(v94 + 56), &v97) + 2) = v95;
        *(_QWORD *)v88 = v94;
        ++v86;
      }
      while (v86 != v87);
    }
    *a1 = 0;
    *((_DWORD *)a1 + 4) = 0;
    sub_1C4E8289C(a1 + 7);
    if (v101 != v103)
      free(v101);
    v71 = v104;
LABEL_84:
    if (v71 != v106)
      free(v71);
    if (v107 != v109)
      free(v107);
  }
}

_QWORD *sub_1C4E8289C(_QWORD *result)
{
  int v1;
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v2 = result + 1;
      v3 = result + 9;
    }
    else
    {
      v5 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v5)
      {
        if (v5 > 0x40)
          return sub_1C4E850D4(result);
      }
      else if (!(_DWORD)v5)
      {
        v4 = 0;
LABEL_6:
        *(_DWORD *)result = v4;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v2 = (_QWORD *)result[1];
      v3 = &v2[2 * v5];
    }
    do
    {
      *v2 = -4096;
      v2 += 2;
    }
    while (v2 != v3);
    v4 = *(_DWORD *)result & 1;
    goto LABEL_6;
  }
  return result;
}

uint64_t llvm::LazyCallGraph::RefSCC::insertTrivialCallEdge(llvm::LazyCallGraph::RefSCC *this, llvm::LazyCallGraph::Node *a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;

  v5 = (_QWORD *)((char *)a2 + 24);
  v6 = *((_DWORD *)a2 + 8);
  v11 = a3;
  v12 = v6;
  result = sub_1C4E853AC((_DWORD *)a2 + 18, &v11, &v12, (uint64_t)&v13);
  if (v14)
  {
    LOBYTE(v11) = 1;
    v8 = *((unsigned int *)a2 + 8);
    if (v8 >= *((_DWORD *)a2 + 9))
    {
      return sub_1C619CA48((uint64_t)v5, a3, (unsigned __int8 *)&v11);
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)a2 + 3) + 8 * v8) = a3 | 4;
      *((_DWORD *)a2 + 8) = v8 + 1;
    }
  }
  else
  {
    v9 = *(int *)(v13 + 8);
    v10 = *(_QWORD *)(*v5 + 8 * v9);
    if ((v10 & 4) == 0)
      *(_QWORD *)(*v5 + 8 * v9) = v10 | 4;
  }
  return result;
}

uint64_t llvm::LazyCallGraph::RefSCC::insertTrivialRefEdge(llvm::LazyCallGraph::RefSCC *this, llvm::LazyCallGraph::Node *a2, llvm::LazyCallGraph::Node *a3)
{
  int v5;
  uint64_t result;
  uint64_t v7;
  llvm::LazyCallGraph::Node *v8;
  int v9;
  _BYTE v10[24];

  v5 = *((_DWORD *)a2 + 8);
  v8 = a3;
  v9 = v5;
  result = sub_1C4E853AC((_DWORD *)a2 + 18, &v8, &v9, (uint64_t)v10);
  if (v10[16])
  {
    LOBYTE(v8) = 0;
    v7 = *((unsigned int *)a2 + 8);
    if (v7 >= *((_DWORD *)a2 + 9))
    {
      return sub_1C619CA48((uint64_t)a2 + 24, (uint64_t)a3, (unsigned __int8 *)&v8);
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)a2 + 3) + 8 * v7) = a3;
      *((_DWORD *)a2 + 8) = v7 + 1;
    }
  }
  return result;
}

_DWORD *llvm::LazyCallGraph::insertEdge(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return llvm::LazyCallGraph::EdgeSequence::insertEdgeInternal((_DWORD *)(a2 + 24), a3, a4);
}

BOOL llvm::LazyCallGraph::removeEdge(llvm::LazyCallGraph *this, llvm::LazyCallGraph::Node *a2, llvm::LazyCallGraph::Node *a3)
{
  return llvm::LazyCallGraph::EdgeSequence::removeEdgeInternal((uint64_t)a2 + 24, (uint64_t)a3);
}

uint64_t llvm::LazyCallGraph::removeDeadFunction(llvm::LazyCallGraph *this, llvm::Function *a2)
{
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  llvm::Function *v10;
  _QWORD *v11;

  v10 = a2;
  v11 = 0;
  result = sub_1C4850EC8((uint64_t *)this + 12, &v10, &v11);
  v4 = v11;
  if ((result & 1) == 0)
    v4 = (_QWORD *)(*((_QWORD *)this + 12) + 16 * *((unsigned int *)this + 28));
  if (v4 != (_QWORD *)(*((_QWORD *)this + 12) + 16 * *((unsigned int *)this + 28)))
  {
    v5 = v4[1];
    *v4 = -8192;
    *((int32x2_t *)this + 13) = vadd_s32(*(int32x2_t *)((char *)this + 104), (int32x2_t)0x1FFFFFFFFLL);
    llvm::LazyCallGraph::EdgeSequence::removeEdgeInternal((uint64_t)this + 120, v5);
    v10 = (llvm::Function *)v5;
    v11 = 0;
    if ((sub_1C4DD8A9C((uint64_t *)this + 36, &v10, &v11) & 1) != 0)
      v6 = v11;
    else
      v6 = (_QWORD *)(*((_QWORD *)this + 36) + 16 * *((unsigned int *)this + 76));
    v7 = (uint64_t *)v6[1];
    *v6 = -8192;
    *((int32x2_t *)this + 37) = vadd_s32(*(int32x2_t *)((char *)this + 296), (int32x2_t)0x1FFFFFFFFLL);
    v8 = *v7;
    if (*(_BYTE *)(v5 + 96))
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)(v5 + 72), 8);
      v9 = *(void **)(v5 + 24);
      if (v9 != (void *)(v5 + 40))
        free(v9);
      *(_BYTE *)(v5 + 96) = 0;
    }
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *v7 = 0;
    *((_DWORD *)v7 + 4) = 0;
    *(_DWORD *)(v8 + 16) = 0;
    result = (uint64_t)sub_1C4E8289C((_QWORD *)(v8 + 56));
    *(_QWORD *)v8 = 0;
  }
  return result;
}

_DWORD *llvm::LazyCallGraph::addSplitFunction(llvm::LazyCallGraph *this, llvm::Function *a2, llvm::Function *a3)
{
  _DWORD *v6;
  char *v7;
  _QWORD *v8;
  unsigned int **v9;
  unsigned int *v10;
  unint64_t inited;
  uint64_t v12;
  char *v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  _QWORD *v42;
  _QWORD *v43;
  _DWORD *v44;
  uint64_t j;
  uint64_t v46;
  char *v47;
  _DWORD *v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _DWORD *v56;
  signed int v57;
  uint64_t v58;
  signed int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unsigned int *v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[2];

  v70[1] = *MEMORY[0x1E0C80C00];
  v6 = (_DWORD *)sub_1C4E7EC8C((uint64_t)this, (uint64_t)a2);
  v7 = (char *)this + 288;
  v67 = 0;
  v68 = v6;
  v8 = 0;
  if (sub_1C4DD8A9C((uint64_t *)this + 36, &v68, &v67))
    v8 = (_QWORD *)*((_QWORD *)v67 + 1);
  v66 = v8;
  v67 = 0;
  v68 = v6;
  if ((sub_1C4DD8A9C((uint64_t *)this + 36, &v68, &v67) & 1) != 0 && (v9 = (unsigned int **)*((_QWORD *)v67 + 1)) != 0)
    v10 = *v9;
  else
    v10 = 0;
  inited = llvm::LazyCallGraph::initNode(this, a3);
  v12 = inited;
  v13 = (char *)a2 + 72;
  for (i = *((_QWORD *)a2 + 10); ; i = *(_QWORD *)(i + 8))
  {
    if ((char *)i == v13)
    {
LABEL_32:
      v27 = 0;
      goto LABEL_33;
    }
    v15 = i - 24;
    if (!i)
      v15 = 0;
    v16 = v15 + 40;
    v17 = *(_QWORD *)(v15 + 48);
    if (v17 != v16)
      break;
  }
  while (1)
  {
    v18 = v17 - 24;
    if (!v17)
      v18 = 0;
    v19 = *(unsigned __int8 *)(v18 + 16) - 33;
    v20 = v19 > 0x33;
    v21 = (1 << v19) & 0x8000000000041;
    if (!v20 && v21 != 0)
    {
      v23 = *(_QWORD *)(v17 - 56);
      if (v23)
      {
        if (!*(_BYTE *)(v23 + 16) && (llvm::Function *)v23 == a3 && *(_QWORD *)(v23 + 24) == *(_QWORD *)(v17 + 48))
          break;
      }
    }
    v17 = *(_QWORD *)(v17 + 8);
    v24 = i - 24;
    if (!i)
      v24 = 0;
    v25 = v24 + 40;
    while (v17 == v25)
    {
      i = *(_QWORD *)(i + 8);
      if ((char *)i == v13)
        goto LABEL_32;
      v26 = i - 24;
      if (!i)
        v26 = 0;
      v25 = v26 + 40;
      v17 = *(_QWORD *)(v26 + 48);
    }
    if ((char *)i == v13)
      goto LABEL_32;
  }
  v27 = 1;
LABEL_33:
  v65 = 0;
  v28 = *(unsigned int *)(inited + 32);
  if ((_DWORD)v28)
  {
    v29 = 8 * v28;
    v30 = *(uint64_t **)(inited + 24);
    while ((*v30 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v30 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v30;
      v29 -= 8;
      if (!v29)
        goto LABEL_50;
    }
  }
  else
  {
    v30 = *(uint64_t **)(inited + 24);
  }
  v31 = *(_QWORD *)(inited + 24) + 8 * v28;
  if (v30 != (uint64_t *)v31)
  {
    v32 = *v30;
    if ((v27 & ((v32 & 4) != 0)) != 1)
      goto LABEL_99;
LABEL_42:
    v67 = 0;
    v68 = (void *)(v32 & 0xFFFFFFFFFFFFFFF8);
    v33 = sub_1C4DD8A9C((uint64_t *)this + 36, &v68, &v67);
    v34 = 0;
    if (v33)
      v34 = (_QWORD *)*((_QWORD *)v67 + 1);
    if (v34 == v8)
    {
      v65 = v8;
      v54 = *((unsigned int *)v8 + 4);
      if (v54 < *((_DWORD *)v8 + 5))
      {
        *(_QWORD *)(v8[1] + 8 * v54) = v12;
        ++*((_DWORD *)v8 + 4);
        goto LABEL_69;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v8 + 1), (uint64_t)(v8 + 3), v54 + 1, 8);
      v62 = (uint64_t)v65;
      *(_QWORD *)(v8[1] + 8 * (*((_DWORD *)v8 + 4))++) = v12;
      v8 = (_QWORD *)v62;
      if (v62)
        goto LABEL_69;
    }
    else
    {
LABEL_99:
      while (++v30 != (uint64_t *)v31)
      {
        v32 = *v30;
        if ((*v30 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v30 & 0xFFFFFFFFFFFFFFF8))
        {
          if (v30 != (uint64_t *)v31)
            goto LABEL_42;
          break;
        }
      }
    }
  }
LABEL_50:
  v35 = *(unsigned int *)(v12 + 32);
  if ((_DWORD)v35)
  {
    v36 = 8 * v35;
    v37 = *(uint64_t **)(v12 + 24);
    while ((*v37 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v37 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v37;
      v36 -= 8;
      if (!v36)
        goto LABEL_68;
    }
  }
  else
  {
    v37 = *(uint64_t **)(v12 + 24);
  }
  v38 = *(_QWORD *)(v12 + 24) + 8 * v35;
  if (v37 != (uint64_t *)v38)
  {
    v39 = *v37;
LABEL_59:
    v67 = 0;
    v68 = (void *)(v39 & 0xFFFFFFFFFFFFFFF8);
    if ((sub_1C4DD8A9C((uint64_t *)this + 36, &v68, &v67) & 1) != 0)
    {
      v40 = (unsigned int *)*((_QWORD *)v67 + 1);
      if (v40)
        v40 = *(unsigned int **)v40;
    }
    else
    {
      v40 = 0;
    }
    if (v40 == v10)
    {
      v68 = v70;
      v70[0] = v12;
      v69 = 0x100000001;
      v55 = sub_1C619C5EC((uint64_t)this, (uint64_t)v10, (uint64_t)&v68);
      v65 = v55;
      if (v68 != v70)
        free(v68);
      v56 = v10 + 14;
      if (v27)
      {
        v57 = *((_DWORD *)sub_1C619C864(v56, (uint64_t *)&v66) + 2);
        v55 = v65;
      }
      else
      {
        v57 = *v56 >> 1;
      }
      v58 = *((_QWORD *)v10 + 1) + 8 * v57;
      v68 = v55;
      sub_1C619CAC4(v10 + 2, v58, (uint64_t *)&v68);
      v59 = v10[4];
      if (v57 < v59)
      {
        v60 = v10 + 2;
        v61 = 8 * v57;
        do
        {
          *((_DWORD *)sub_1C619C864(v10 + 14, (uint64_t *)(*v60 + v61)) + 2) = v57;
          v60 = v10 + 2;
          ++v57;
          v61 += 8;
        }
        while (v59 != v57);
      }
    }
    else
    {
      while (++v37 != (uint64_t *)v38)
      {
        v39 = *v37;
        if ((*v37 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v37 & 0xFFFFFFFFFFFFFFF8))
        {
          if (v37 != (uint64_t *)v38)
            goto LABEL_59;
          break;
        }
      }
    }
  }
LABEL_68:
  v8 = v65;
  if (!v65)
  {
    v42 = (_QWORD *)sub_1C484358C((uint64_t)this + 312, 128, 3);
    v43 = v42;
    *v42 = this;
    v42[1] = v42 + 3;
    v63 = (uint64_t)(v42 + 1);
    v64 = (uint64_t)(v42 + 3);
    v42[2] = 0x400000000;
    v42[7] = 1;
    v44 = v42 + 7;
    for (j = 8; j != 16; j += 2)
      v42[j] = -4096;
    v68 = v70;
    v70[0] = v12;
    v69 = 0x100000001;
    v8 = sub_1C619C5EC((uint64_t)this, (uint64_t)v42, (uint64_t)&v68);
    v65 = v8;
    if (v68 != v70)
      free(v68);
    *((_DWORD *)sub_1C619C864(v44, (uint64_t *)&v65) + 2) = 0;
    v46 = *((unsigned int *)v43 + 4);
    if (v46 >= *((_DWORD *)v43 + 5))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v63, v64, v46 + 1, 8);
      LODWORD(v46) = *((_DWORD *)v43 + 4);
    }
    *(_QWORD *)(v43[1] + 8 * v46) = v8;
    ++*((_DWORD *)v43 + 4);
    v47 = (char *)this + 552;
    v67 = v10;
    v68 = 0;
    if ((sub_1C4DD8A9C((uint64_t *)this + 69, &v67, &v68) & 1) != 0)
      v48 = v68;
    else
      v48 = (_DWORD *)(*((_QWORD *)this + 69) + 16 * *((unsigned int *)this + 142));
    v49 = v48[2];
    v50 = (_QWORD *)((char *)this + 408);
    v51 = *((_QWORD *)this + 51) + 8 * v49;
    v68 = v43;
    sub_1C619CAC4((unsigned int *)this + 102, v51, (uint64_t *)&v68);
    v52 = *((_DWORD *)this + 104);
    if (v49 < v52)
    {
      v53 = 8 * v49;
      do
      {
        *((_DWORD *)sub_1C4E863E8((uint64_t)v47, (uint64_t *)(*v50 + v53)) + 2) = v49++;
        v53 += 8;
      }
      while (v52 != v49);
    }
  }
LABEL_69:
  v68 = (void *)v12;
  sub_1C619C9E4((uint64_t)v7, (uint64_t *)&v68)[1] = v8;
  return llvm::LazyCallGraph::EdgeSequence::insertEdgeInternal(v6 + 6, v12, v27);
}

_DWORD *llvm::LazyCallGraph::addSplitRefRecursiveFunctions(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _DWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  _DWORD *v11;
  llvm::Function **v12;
  llvm::Function **v13;
  unint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *result;
  _QWORD *v31;
  void *v32;
  uint64_t i;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  void *v41[2];
  _QWORD v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  v7 = (_DWORD *)sub_1C4E7EC8C(a1, a2);
  v40 = 0;
  v41[0] = v7;
  v39 = (uint64_t *)(a1 + 288);
  if ((sub_1C4DD8A9C((uint64_t *)(a1 + 288), v41, &v40) & 1) != 0 && (v8 = (uint64_t *)v40[1]) != 0)
  {
    v9 = *v8;
    if (!a4)
      goto LABEL_40;
  }
  else
  {
    v9 = 0;
    if (!a4)
      goto LABEL_40;
  }
  v10 = 0;
  v11 = v7 + 6;
  v12 = (llvm::Function **)a3;
  v13 = (llvm::Function **)&a3[a4];
  do
  {
    while (1)
    {
      inited = llvm::LazyCallGraph::initNode((llvm::LazyCallGraph *)a1, *v12);
      llvm::LazyCallGraph::EdgeSequence::insertEdgeInternal(v11, inited, 0);
      v15 = *(_QWORD *)(inited + 24);
      v16 = *(unsigned int *)(inited + 32);
      if ((_DWORD)v16)
      {
        v17 = 8 * v16;
        v18 = *(uint64_t **)(inited + 24);
        while ((*v18 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v18 & 0xFFFFFFFFFFFFFFF8))
        {
          ++v18;
          v17 -= 8;
          if (!v17)
            goto LABEL_28;
        }
      }
      else
      {
        v18 = *(uint64_t **)(inited + 24);
      }
      v19 = (uint64_t *)(v15 + 8 * v16);
      if (v18 == v19)
        break;
      v20 = *v18;
      while (1)
      {
        v40 = 0;
        v41[0] = (void *)(v20 & 0xFFFFFFFFFFFFFFF8);
        if ((sub_1C4DD8A9C(v39, v41, &v40) & 1) != 0)
        {
          v21 = (_QWORD *)v40[1];
          if (v21)
            v21 = (_QWORD *)*v21;
        }
        else
        {
          v21 = 0;
        }
        v22 = v21 == (_QWORD *)v9;
        if (v22)
          break;
        if (++v18 != v19)
        {
          v10 |= v22;
          while (1)
          {
            v20 = *v18;
            if ((*v18 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              if (*(_QWORD *)(*v18 & 0xFFFFFFFFFFFFFFF8))
                break;
            }
            if (++v18 == v19)
              goto LABEL_28;
          }
          if (v18 != v19)
            continue;
        }
        goto LABEL_28;
      }
      ++v12;
      v10 = 1;
      if (v12 == v13)
        goto LABEL_33;
    }
LABEL_28:
    ++v12;
  }
  while (v12 != v13);
  if ((v10 & 1) != 0)
    goto LABEL_33;
LABEL_40:
  v31 = (_QWORD *)sub_1C484358C(a1 + 312, 128, 3);
  v32 = v31;
  *v31 = a1;
  v31[1] = v31 + 3;
  v31[2] = 0x400000000;
  v31[7] = 1;
  for (i = 8; i != 16; i += 2)
    v31[i] = -4096;
  v40 = (_QWORD *)v9;
  v41[0] = 0;
  if ((sub_1C4DD8A9C((uint64_t *)(a1 + 552), &v40, v41) & 1) != 0)
    v34 = v41[0];
  else
    v34 = (_DWORD *)(*(_QWORD *)(a1 + 552) + 16 * *(unsigned int *)(a1 + 568));
  v35 = v34[2];
  v36 = *(_QWORD *)(a1 + 408) + 8 * v35;
  v41[0] = v32;
  result = sub_1C619CAC4((unsigned int *)(a1 + 408), v36, (uint64_t *)v41);
  v37 = *(_DWORD *)(a1 + 416);
  if (v35 < v37)
  {
    v38 = 8 * v35;
    do
    {
      result = sub_1C4E863E8(a1 + 552, (uint64_t *)(*(_QWORD *)(a1 + 408) + v38));
      result[2] = v35++;
      v38 += 8;
    }
    while (v37 != v35);
  }
  v9 = (uint64_t)v32;
  if (a4)
  {
LABEL_33:
    v23 = 8 * a4;
    do
    {
      v24 = (void *)sub_1C4E7EC8C(a1, *a3);
      v40 = 0;
      v41[0] = v42;
      v42[0] = v24;
      v41[1] = (void *)0x100000001;
      v25 = sub_1C619C5EC(a1, v9, (uint64_t)v41);
      if (v41[0] != v42)
        free(v41[0]);
      v40 = v25;
      v26 = *(_DWORD *)(v9 + 56) >> 1;
      *((_DWORD *)sub_1C619C864((_DWORD *)(v9 + 56), (uint64_t *)&v40) + 2) = v26;
      v27 = (uint64_t)v40;
      v28 = *(unsigned int *)(v9 + 16);
      if (v28 >= *(unsigned int *)(v9 + 20))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v9 + 8, v9 + 24, v28 + 1, 8);
        v28 = *(unsigned int *)(v9 + 16);
      }
      v29 = (uint64_t)v40;
      *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8 * v28) = v27;
      ++*(_DWORD *)(v9 + 16);
      v41[0] = v24;
      result = sub_1C619C9E4((uint64_t)v39, (uint64_t *)v41);
      *((_QWORD *)result + 1) = v29;
      ++a3;
      v23 -= 8;
    }
    while (v23);
  }
  return result;
}

void llvm::LazyCallGraph::buildSCCs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  void *v59;
  uint64_t v60;
  _BYTE v61[128];
  void *v62;
  uint64_t v63;
  _QWORD v64[50];

  v64[48] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a3 + 8);
  v5 = *(_QWORD *)(a3 + 24);
  if (v4 == v5)
  {
    v7 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    do
    {
      v6 = *(_QWORD *)(v4 - 8);
      v4 -= 8;
      *(_QWORD *)(v6 + 16) = 0;
    }
    while (v4 != v5);
    v7 = *(_QWORD *)(a3 + 8);
    v4 = *(_QWORD *)(a3 + 24);
  }
  v62 = v64;
  v63 = 0x1000000000;
  v59 = v61;
  v60 = 0x1000000000;
  if (v7 != v4)
  {
    v8 = a1 + 192;
    v53 = a2 + 24;
    v54 = a2 + 8;
    v9 = a1 + 288;
    do
    {
      v10 = *(_QWORD *)(v7 - 8);
      v55 = v7 - 8;
      if (!*(_DWORD *)(v10 + 16))
      {
        *(_QWORD *)(v10 + 16) = 0x100000001;
        v11 = *(_QWORD **)(v10 + 24);
        v12 = *(unsigned int *)(v10 + 32);
        v13 = &v11[v12];
        if ((_DWORD)v12)
        {
          v14 = 8 * v12;
          while ((*v11 & 0xFFFFFFFFFFFFFFF8) == 0 || (*v11 & 4) == 0 || !*(_QWORD *)(*v11 & 0xFFFFFFFFFFFFFFF8))
          {
            ++v11;
            v14 -= 8;
            if (!v14)
            {
              v11 = v13;
              break;
            }
          }
        }
        v56 = v10;
        v57 = v11;
        v58 = v13;
        v15 = sub_1C4DC1E54((uint64_t)&v62, (unint64_t)&v56);
        v16 = (char *)v62 + 24 * v63;
        v17 = *(_OWORD *)v15;
        *((_QWORD *)v16 + 2) = *(_QWORD *)(v15 + 16);
        *(_OWORD *)v16 = v17;
        v18 = v63 + 1;
        LODWORD(v63) = v63 + 1;
        v19 = 2;
        do
        {
          v20 = (char *)v62 + 24 * v18;
          v22 = *((_QWORD *)v20 - 3);
          v21 = (_QWORD *)*((_QWORD *)v20 - 2);
          v23 = (_QWORD *)*((_QWORD *)v20 - 1);
          LODWORD(v63) = v18 - 1;
          v24 = *(_QWORD *)(v22 + 24) + 8 * *(unsigned int *)(v22 + 32);
          if (v21 != (_QWORD *)v24)
          {
            v25 = v19;
            do
            {
              v26 = *v21 & 0xFFFFFFFFFFFFFFF8;
              v27 = *(_DWORD *)(v26 + 16);
              if (v27)
              {
                if (v27 == -1)
                {
                  while (++v21 != v23)
                  {
                    if ((*v21 & 0xFFFFFFFFFFFFFFF8) != 0
                      && (*v21 & 4) != 0
                      && *(_QWORD *)(*v21 & 0xFFFFFFFFFFFFFFF8))
                    {
                      goto LABEL_42;
                    }
                  }
                }
                else
                {
                  v33 = *(_DWORD *)(v26 + 20);
                  if (v33 < *(_DWORD *)(v22 + 20))
                    *(_DWORD *)(v22 + 20) = v33;
                  while (++v21 != v23)
                  {
                    if ((*v21 & 0xFFFFFFFFFFFFFFF8) != 0
                      && (*v21 & 4) != 0
                      && *(_QWORD *)(*v21 & 0xFFFFFFFFFFFFFFF8))
                    {
                      goto LABEL_42;
                    }
                  }
                }
                v21 = v23;
LABEL_42:
                v19 = v25;
              }
              else
              {
                v56 = v22;
                v57 = v21;
                v58 = v23;
                v28 = sub_1C4DC1E54((uint64_t)&v62, (unint64_t)&v56);
                v29 = (char *)v62 + 24 * v63;
                v30 = *(_OWORD *)v28;
                *((_QWORD *)v29 + 2) = *(_QWORD *)(v28 + 16);
                *(_OWORD *)v29 = v30;
                LODWORD(v63) = v63 + 1;
                v19 = (v25 + 1);
                *(_DWORD *)(v26 + 16) = v25;
                *(_DWORD *)(v26 + 20) = v25;
                v21 = *(_QWORD **)(v26 + 24);
                v31 = *(unsigned int *)(v26 + 32);
                v23 = &v21[v31];
                if ((_DWORD)v31)
                {
                  v32 = 8 * v31;
                  while ((*v21 & 0xFFFFFFFFFFFFFFF8) == 0
                       || (*v21 & 4) == 0
                       || !*(_QWORD *)(*v21 & 0xFFFFFFFFFFFFFFF8))
                  {
                    ++v21;
                    v32 -= 8;
                    if (!v32)
                    {
                      v22 = v26;
                      goto LABEL_45;
                    }
                  }
                }
                v22 = v26;
                v24 = (uint64_t)v23;
              }
              v25 = v19;
            }
            while (v21 != (_QWORD *)v24);
          }
LABEL_45:
          v34 = v60;
          if (v60 >= (unint64_t)HIDWORD(v60))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v60 + 1, 8);
            v34 = v60;
          }
          *((_QWORD *)v59 + v34) = v22;
          v35 = v60 + 1;
          LODWORD(v60) = v60 + 1;
          v36 = *(_DWORD *)(v22 + 20);
          if (v36 == *(_DWORD *)(v22 + 16))
          {
            v37 = (char *)v59;
            v38 = (char *)v59 + 8 * v35;
            v39 = 8 * v35;
            while (v39)
            {
              v40 = *(_DWORD *)(*(_QWORD *)((char *)v59 + v39 - 8) + 16);
              v39 -= 8;
              if (v40 < v36)
              {
                v37 = (char *)v59 + v39 + 8;
                break;
              }
            }
            v41 = (_QWORD *)sub_1C484358C(v8, 32, 3);
            *v41 = a2;
            v41[1] = v41 + 3;
            v41[2] = 0x100000000;
            sub_1C4E86360((uint64_t)(v41 + 1), (uint64_t)v38, (uint64_t)v38, (uint64_t)v38, (uint64_t)v37);
            v42 = *(unsigned int *)(a2 + 16);
            if (v42 >= *(unsigned int *)(a2 + 20))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v54, v53, v42 + 1, 8);
              v42 = *(unsigned int *)(a2 + 16);
            }
            *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v42) = v41;
            v43 = *(_DWORD *)(a2 + 16) + 1;
            *(_DWORD *)(a2 + 16) = v43;
            v44 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v43 - 8);
            v45 = *(unsigned int *)(v44 + 16);
            if ((_DWORD)v45)
            {
              v46 = *(uint64_t **)(v44 + 8);
              v47 = 8 * v45;
              do
              {
                v48 = *v46++;
                *(_QWORD *)(v48 + 16) = -1;
                v49 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a2 + 16) - 8);
                v56 = v48;
                sub_1C619C9E4(v9, &v56)[1] = v49;
                v47 -= 8;
              }
              while (v47);
            }
            LODWORD(v60) = (unint64_t)(v37 - (_BYTE *)v59) >> 3;
          }
          v18 = v63;
        }
        while ((_DWORD)v63);
      }
      v7 = v55;
    }
    while (v55 != v4);
    if (v59 != v61)
      free(v59);
  }
  if (v62 != v64)
    free(v62);
  v50 = *(unsigned int *)(a2 + 16);
  if ((int)v50 >= 1)
  {
    v51 = 0;
    for (i = 0; i != v50; ++i)
    {
      *((_DWORD *)sub_1C619C864((_DWORD *)(a2 + 56), (uint64_t *)(*(_QWORD *)(a2 + 8) + v51)) + 2) = i;
      v51 += 8;
    }
  }
}

void llvm::LazyCallGraph::buildRefSCCs(llvm::LazyCallGraph *this)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  unsigned int v18;
  int v19;
  char *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t j;
  int v43;
  _QWORD *v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[128];
  void *v57;
  uint64_t v58;
  _BYTE v59[128];
  void *v60;
  uint64_t v61;
  _QWORD v62[50];

  v62[48] = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)this + 32);
  if ((_DWORD)v1)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 15);
    v4 = &v3[v1];
    v5 = 8 * v1;
    v6 = v5;
    for (i = v3; (*i & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*i & 0xFFFFFFFFFFFFFFF8); ++i)
    {
      v6 -= 8;
      if (!v6)
        return;
    }
    if (!*((_DWORD *)this + 104))
    {
      v54 = v56;
      v55 = 0x1000000000;
      while (1)
      {
        v8 = *v3;
        if ((*v3 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*(_QWORD *)(*v3 & 0xFFFFFFFFFFFFFFF8))
            break;
        }
        ++v3;
        v5 -= 8;
        if (!v5)
          goto LABEL_12;
      }
      if (!v5)
      {
LABEL_12:
        v9 = v56;
        goto LABEL_23;
      }
      LODWORD(v5) = 0;
LABEL_15:
      if (v5 >= HIDWORD(v55))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v5 + 1, 8);
        LODWORD(v5) = v55;
      }
      *((_QWORD *)v54 + v5) = v8 & 0xFFFFFFFFFFFFFFF8;
      LODWORD(v5) = v55 + 1;
      LODWORD(v55) = v55 + 1;
      while (++v3 != v4)
      {
        v8 = *v3;
        if ((*v3 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v3 & 0xFFFFFFFFFFFFFFF8))
        {
          if (v3 != v4)
            goto LABEL_15;
          break;
        }
      }
      v9 = v54;
LABEL_23:
      v60 = v62;
      v61 = 0x1000000000;
      v57 = v59;
      v58 = 0x1000000000;
      if ((_DWORD)v5)
      {
        v46 = &v9[8 * v5];
        do
        {
          v10 = *(char **)v9;
          if (!*(_DWORD *)(*(_QWORD *)v9 + 16))
          {
            *((_QWORD *)v10 + 2) = 0x100000001;
            if (!v10[96])
              llvm::LazyCallGraph::Node::populateSlow((llvm::LazyCallGraph::Node *)v10);
            v11 = (_QWORD *)*((_QWORD *)v10 + 3);
            v12 = *((unsigned int *)v10 + 8);
            v13 = &v11[v12];
            if ((_DWORD)v12)
            {
              v14 = 8 * v12;
              while ((*v11 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v11 & 0xFFFFFFFFFFFFFFF8))
              {
                ++v11;
                v14 -= 8;
                if (!v14)
                {
                  v11 = v13;
                  break;
                }
              }
            }
            v49 = v10;
            v50 = v11;
            v51 = (char *)v13;
            v15 = sub_1C4DC1E54((uint64_t)&v60, (unint64_t)&v49);
            v16 = (char *)v60 + 24 * v61;
            v17 = *(_OWORD *)v15;
            *((_QWORD *)v16 + 2) = *(_QWORD *)(v15 + 16);
            *(_OWORD *)v16 = v17;
            v18 = v61 + 1;
            LODWORD(v61) = v61 + 1;
            v19 = 2;
            do
            {
              v20 = (char *)v60 + 24 * v18;
              v22 = *((_QWORD *)v20 - 3);
              v21 = (_QWORD *)*((_QWORD *)v20 - 2);
              v23 = (_QWORD *)*((_QWORD *)v20 - 1);
              LODWORD(v61) = v18 - 1;
              v24 = *(_QWORD *)(v22 + 24) + 8 * *(unsigned int *)(v22 + 32);
LABEL_38:
              while (v21 != (_QWORD *)v24)
              {
                v25 = *v21 & 0xFFFFFFFFFFFFFFF8;
                v26 = *(_DWORD *)(v25 + 16);
                if (v26)
                {
                  if (v26 == -1)
                  {
                    while (++v21 != v23)
                    {
                      if ((*v21 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v21 & 0xFFFFFFFFFFFFFFF8))
                        goto LABEL_38;
                    }
                  }
                  else
                  {
                    v32 = *(_DWORD *)(v25 + 20);
                    if (v32 < *(_DWORD *)(v22 + 20))
                      *(_DWORD *)(v22 + 20) = v32;
                    while (++v21 != v23)
                    {
                      if ((*v21 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v21 & 0xFFFFFFFFFFFFFFF8))
                        goto LABEL_38;
                    }
                  }
                  v21 = v23;
                }
                else
                {
                  v49 = (char *)v22;
                  v50 = v21;
                  v51 = (char *)v23;
                  v27 = sub_1C4DC1E54((uint64_t)&v60, (unint64_t)&v49);
                  v28 = (char *)v60 + 24 * v61;
                  v29 = *(_OWORD *)v27;
                  *((_QWORD *)v28 + 2) = *(_QWORD *)(v27 + 16);
                  *(_OWORD *)v28 = v29;
                  LODWORD(v61) = v61 + 1;
                  *(_DWORD *)(v25 + 16) = v19;
                  *(_DWORD *)(v25 + 20) = v19;
                  if (!*(_BYTE *)(v25 + 96))
                    llvm::LazyCallGraph::Node::populateSlow((llvm::LazyCallGraph::Node *)v25);
                  ++v19;
                  v21 = *(_QWORD **)(v25 + 24);
                  v30 = *(unsigned int *)(v25 + 32);
                  v23 = &v21[v30];
                  if ((_DWORD)v30)
                  {
                    v31 = 8 * v30;
                    while ((*v21 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v21 & 0xFFFFFFFFFFFFFFF8))
                    {
                      ++v21;
                      v31 -= 8;
                      if (!v31)
                      {
                        v22 = v25;
                        goto LABEL_61;
                      }
                    }
                  }
                  v22 = v25;
                  v24 = (uint64_t)v23;
                }
              }
LABEL_61:
              v33 = v58;
              if (v58 >= (unint64_t)HIDWORD(v58))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v58 + 1, 8);
                v33 = v58;
              }
              *((_QWORD *)v57 + v33) = v22;
              v34 = v58 + 1;
              LODWORD(v58) = v58 + 1;
              v35 = *(_DWORD *)(v22 + 20);
              if (v35 == *(_DWORD *)(v22 + 16))
              {
                v36 = (char *)v57;
                v37 = (char *)v57 + 8 * v34;
                v38 = 8 * v34;
                while (v38)
                {
                  v39 = *(_DWORD *)(*(_QWORD *)((char *)v57 + v38 - 8) + 16);
                  v38 -= 8;
                  if (v39 < v35)
                  {
                    v36 = (char *)v57 + v38 + 8;
                    break;
                  }
                }
                v40 = (_QWORD *)sub_1C484358C((uint64_t)this + 312, 128, 3);
                v41 = (uint64_t)v40;
                *v40 = this;
                v40[1] = v40 + 3;
                v40[2] = 0x400000000;
                v40[7] = 1;
                for (j = 8; j != 16; j += 2)
                  v40[j] = -4096;
                v49 = v37;
                v50 = v37;
                v51 = v37;
                v52 = v36;
                llvm::LazyCallGraph::buildSCCs((uint64_t)this, (uint64_t)v40, (uint64_t)&v49);
                v43 = *((_DWORD *)this + 104);
                v47 = v41;
                v48 = v43;
                v53 = 0;
                if ((sub_1C4A5C500(*((_QWORD *)this + 69), *((_DWORD *)this + 142), v41, &v53) & 1) == 0)
                {
                  v44 = sub_1C4E86450((uint64_t)this + 552, &v47, v53);
                  *v44 = v41;
                  *((_DWORD *)v44 + 2) = v43;
                }
                v45 = *((unsigned int *)this + 104);
                if (v45 >= *((unsigned int *)this + 105))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 408, (uint64_t)this + 424, v45 + 1, 8);
                  v45 = *((unsigned int *)this + 104);
                }
                *(_QWORD *)(*((_QWORD *)this + 51) + 8 * v45) = v41;
                ++*((_DWORD *)this + 104);
                LODWORD(v58) = (unint64_t)(v36 - (_BYTE *)v57) >> 3;
              }
              v18 = v61;
            }
            while ((_DWORD)v61);
          }
          v9 += 8;
        }
        while (v9 != v46);
        if (v57 != v59)
          free(v57);
      }
      if (v60 != v62)
        free(v60);
      if (v54 != v56)
        free(v54);
    }
  }
}

_QWORD *llvm::LazyCallGraphPrinterPass::LazyCallGraphPrinterPass(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

_QWORD *llvm::LazyCallGraphPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  llvm::raw_ostream *v7;
  void *v8;
  char v9;
  const char *v10;
  size_t v11;
  llvm::raw_ostream *v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  unint64_t v18;
  void *v19;
  llvm::raw_ostream *v20;
  uint64_t ***v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ****v26;
  uint64_t ***v27;
  int v28;
  int v29;
  size_t *v30;
  const void *v31;
  size_t v32;
  size_t v33;
  _BYTE *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _BYTE *v39;
  uint64_t v40;
  _DWORD *v41;
  llvm::raw_ostream *v42;
  _DWORD *v43;
  const char *v44;
  _DWORD *v45;
  uint64_t ***v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ****v51;
  uint64_t ***v52;
  int v53;
  int v54;
  size_t *v55;
  const void *v56;
  size_t v57;
  size_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  BOOL v66;
  llvm::raw_ostream *v68;
  void *v69;
  llvm::raw_ostream *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  void *v76;
  llvm::raw_ostream *v77;
  unint64_t v78;
  llvm::raw_ostream *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  llvm::raw_ostream *v87;
  uint64_t ***v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t ****v93;
  uint64_t ***v94;
  int v95;
  int v96;
  size_t *v97;
  const void *v98;
  size_t v99;
  size_t v100;
  _BYTE *v101;
  _BYTE *v102;
  uint64_t v103;
  llvm::LazyCallGraph *v105;
  llvm::raw_ostream **v106;
  llvm::LazyCallGraph *v107;
  uint64_t v108;

  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::LazyCallGraphAnalysis::Key, a2);
  v106 = a1;
  v7 = *a1;
  v8 = (void *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v8 > 0x23uLL)
  {
    qmemcpy(v8, "Printing the call graph for module: ", 36);
    *((_QWORD *)v7 + 4) += 36;
  }
  else
  {
    v7 = llvm::raw_ostream::write(v7, "Printing the call graph for module: ", 0x24uLL);
  }
  v105 = (llvm::LazyCallGraph *)(ResultImpl + 8);
  v9 = *(_BYTE *)(a2 + 191);
  if (v9 >= 0)
    v10 = (const char *)(a2 + 168);
  else
    v10 = *(const char **)(a2 + 168);
  if (v9 >= 0)
    v11 = v9 & 0x7F;
  else
    v11 = *(_QWORD *)(a2 + 176);
  v12 = llvm::raw_ostream::write(v7, v10, v11);
  v13 = (_WORD *)*((_QWORD *)v12 + 4);
  v103 = ResultImpl;
  if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 1uLL)
  {
    *v13 = 2570;
    *((_QWORD *)v12 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v12, "\n\n", 2uLL);
  }
  v14 = a2 + 24;
  v15 = *(_QWORD *)(a2 + 32);
  if (v15 != a2 + 24)
  {
    do
    {
      if (v15)
        v16 = v15 - 56;
      else
        v16 = 0;
      v17 = *v106;
      v18 = sub_1C4E7EC8C((uint64_t)v105, v16);
      v19 = (void *)*((_QWORD *)v17 + 4);
      if (*((_QWORD *)v17 + 3) - (_QWORD)v19 > 0x14uLL)
      {
        qmemcpy(v19, "  Edges in function: ", 21);
        *((_QWORD *)v17 + 4) += 21;
        v20 = v17;
      }
      else
      {
        v20 = llvm::raw_ostream::write(v17, "  Edges in function: ", 0x15uLL);
      }
      v21 = *(uint64_t ****)(v18 + 8);
      if ((*((_BYTE *)v21 + 23) & 0x10) == 0)
      {
        v34 = (_BYTE *)*((_QWORD *)v20 + 4);
        goto LABEL_29;
      }
      v22 = ***v21;
      v23 = *(_QWORD *)(v22 + 152);
      v24 = *(unsigned int *)(v22 + 168);
      if ((_DWORD)v24)
      {
        LODWORD(v25) = (v24 - 1) & ((v21 >> 4) ^ (v21 >> 9));
        v26 = (uint64_t ****)(v23 + 16 * v25);
        v27 = *v26;
        if (*v26 == v21)
          goto LABEL_25;
        v28 = 1;
        while (v27 != (uint64_t ***)-4096)
        {
          v29 = v25 + v28++;
          v25 = v29 & (v24 - 1);
          v27 = *(uint64_t ****)(v23 + 16 * v25);
          if (v27 == v21)
          {
            v26 = (uint64_t ****)(v23 + 16 * v25);
            goto LABEL_25;
          }
        }
      }
      v26 = (uint64_t ****)(v23 + 16 * v24);
LABEL_25:
      v30 = (size_t *)v26[1];
      v33 = *v30;
      v31 = v30 + 2;
      v32 = v33;
      v34 = (_BYTE *)*((_QWORD *)v20 + 4);
      if (v33 <= *((_QWORD *)v20 + 3) - (_QWORD)v34)
      {
        if (v32)
        {
          memcpy(v34, v31, v32);
          v34 = (_BYTE *)(*((_QWORD *)v20 + 4) + v32);
          *((_QWORD *)v20 + 4) = v34;
        }
      }
      else
      {
        v20 = llvm::raw_ostream::write(v20, (const char *)v31, v32);
        v34 = (_BYTE *)*((_QWORD *)v20 + 4);
      }
LABEL_29:
      if (*((_BYTE **)v20 + 3) == v34)
      {
        llvm::raw_ostream::write(v20, "\n", 1uLL);
      }
      else
      {
        *v34 = 10;
        ++*((_QWORD *)v20 + 4);
      }
      if (*(_BYTE *)(v18 + 96))
        v35 = (char *)(v18 + 24);
      else
        v35 = llvm::LazyCallGraph::Node::populateSlow((llvm::LazyCallGraph::Node *)v18);
      v36 = *((unsigned int *)v35 + 2);
      if ((_DWORD)v36)
      {
        v37 = 8 * v36;
        v38 = *(_QWORD **)v35;
        while ((*v38 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v38 & 0xFFFFFFFFFFFFFFF8))
        {
          ++v38;
          v37 -= 8;
          if (!v37)
            goto LABEL_39;
        }
      }
      else
      {
        v38 = *(_QWORD **)v35;
      }
      v40 = *(_QWORD *)v35 + 8 * v36;
LABEL_45:
      if (v38 == (_QWORD *)v40)
        goto LABEL_39;
      v41 = (_DWORD *)*((_QWORD *)v17 + 4);
      if (*((_QWORD *)v17 + 3) - (_QWORD)v41 > 3uLL)
      {
        *v41 = 538976288;
        v43 = (_DWORD *)(*((_QWORD *)v17 + 4) + 4);
        *((_QWORD *)v17 + 4) = v43;
        v42 = v17;
      }
      else
      {
        v42 = llvm::raw_ostream::write(v17, "    ", 4uLL);
        v43 = (_DWORD *)*((_QWORD *)v42 + 4);
      }
      if ((*(_BYTE *)v38 & 4) != 0)
        v44 = "call";
      else
        v44 = "ref ";
      if (*((_QWORD *)v42 + 3) - (_QWORD)v43 > 3uLL)
      {
        *v43 = *(_DWORD *)v44;
        v45 = (_DWORD *)(*((_QWORD *)v42 + 4) + 4);
        *((_QWORD *)v42 + 4) = v45;
      }
      else
      {
        v42 = llvm::raw_ostream::write(v42, v44, 4uLL);
        v45 = (_DWORD *)*((_QWORD *)v42 + 4);
      }
      if (*((_QWORD *)v42 + 3) - (_QWORD)v45 > 3uLL)
      {
        *v45 = 540945696;
        *((_QWORD *)v42 + 4) += 4;
      }
      else
      {
        v42 = llvm::raw_ostream::write(v42, " -> ", 4uLL);
      }
      v46 = *(uint64_t ****)((*v38 & 0xFFFFFFFFFFFFFFF8) + 8);
      if ((*((_BYTE *)v46 + 23) & 0x10) == 0)
      {
        v59 = (_BYTE *)*((_QWORD *)v42 + 4);
        goto LABEL_67;
      }
      v47 = ***v46;
      v48 = *(_QWORD *)(v47 + 152);
      v49 = *(unsigned int *)(v47 + 168);
      if ((_DWORD)v49)
      {
        LODWORD(v50) = (v49 - 1) & ((v46 >> 4) ^ (v46 >> 9));
        v51 = (uint64_t ****)(v48 + 16 * v50);
        v52 = *v51;
        if (*v51 == v46)
          goto LABEL_63;
        v53 = 1;
        while (v52 != (uint64_t ***)-4096)
        {
          v54 = v50 + v53++;
          v50 = v54 & (v49 - 1);
          v52 = *(uint64_t ****)(v48 + 16 * v50);
          if (v52 == v46)
          {
            v51 = (uint64_t ****)(v48 + 16 * v50);
            goto LABEL_63;
          }
        }
      }
      v51 = (uint64_t ****)(v48 + 16 * v49);
LABEL_63:
      v55 = (size_t *)v51[1];
      v58 = *v55;
      v56 = v55 + 2;
      v57 = v58;
      v59 = (_BYTE *)*((_QWORD *)v42 + 4);
      if (v58 <= *((_QWORD *)v42 + 3) - (_QWORD)v59)
      {
        if (v57)
        {
          memcpy(v59, v56, v57);
          v59 = (_BYTE *)(*((_QWORD *)v42 + 4) + v57);
          *((_QWORD *)v42 + 4) = v59;
        }
      }
      else
      {
        v42 = llvm::raw_ostream::write(v42, (const char *)v56, v57);
        v59 = (_BYTE *)*((_QWORD *)v42 + 4);
      }
LABEL_67:
      if (*((_BYTE **)v42 + 3) == v59)
      {
        llvm::raw_ostream::write(v42, "\n", 1uLL);
      }
      else
      {
        *v59 = 10;
        ++*((_QWORD *)v42 + 4);
      }
      while (++v38 != (_QWORD *)v40)
      {
        if ((*v38 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v38 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_45;
      }
LABEL_39:
      v39 = (_BYTE *)*((_QWORD *)v17 + 4);
      if (*((_BYTE **)v17 + 3) == v39)
      {
        llvm::raw_ostream::write(v17, "\n", 1uLL);
      }
      else
      {
        *v39 = 10;
        ++*((_QWORD *)v17 + 4);
      }
      v15 = *(_QWORD *)(v15 + 8);
    }
    while (v15 != v14);
  }
  llvm::LazyCallGraph::buildRefSCCs(v105);
  sub_1C4DD89C0((uint64_t)v105);
  v61 = v60;
  v62 = *(unsigned int *)(v103 + 136);
  if ((_DWORD)v62)
  {
    v63 = *(_QWORD **)(v103 + 128);
    v64 = &v63[v62];
    do
    {
      while ((*v63 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        if (++v63 == v64)
          goto LABEL_92;
      }
      if (*(_QWORD *)(*v63++ & 0xFFFFFFFFFFFFFFF8))
        v66 = 1;
      else
        v66 = v63 == v64;
    }
    while (!v66);
  }
LABEL_92:
  v107 = v105;
  v108 = v60;
  if (v60)
  {
    while (1)
    {
      v68 = *v106;
      v69 = (void *)*((_QWORD *)*v106 + 4);
      if (*((_QWORD *)*v106 + 3) - (_QWORD)v69 > 0xDuLL)
      {
        qmemcpy(v69, "  RefSCC with ", 14);
        *((_QWORD *)v68 + 4) += 14;
        v70 = v68;
      }
      else
      {
        v70 = llvm::raw_ostream::write(*v106, "  RefSCC with ", 0xEuLL);
      }
      sub_1C5E21910(v70, *(unsigned int *)(v61 + 16), 0, 0, 0);
      v71 = *((_QWORD *)v70 + 4);
      if ((unint64_t)(*((_QWORD *)v70 + 3) - v71) > 0xB)
      {
        *(_DWORD *)(v71 + 8) = 171602755;
        *(_QWORD *)v71 = *(_QWORD *)" call SCCs:\n";
        *((_QWORD *)v70 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v70, " call SCCs:\n", 0xCuLL);
      }
      v72 = *(unsigned int *)(v61 + 16);
      if ((_DWORD)v72)
        break;
LABEL_134:
      v102 = (_BYTE *)*((_QWORD *)v68 + 4);
      if (*((_BYTE **)v68 + 3) == v102)
      {
        llvm::raw_ostream::write(v68, "\n", 1uLL);
      }
      else
      {
        *v102 = 10;
        ++*((_QWORD *)v68 + 4);
      }
      do
      {
        sub_1C4DD8A20(&v107);
        v61 = v108;
      }
      while (v108 && !*(_DWORD *)(v108 + 16));
      if (!v108 && v107 == v105)
        goto LABEL_93;
    }
    v73 = *(uint64_t **)(v61 + 8);
    v74 = &v73[v72];
    while (1)
    {
      v75 = *v73;
      v76 = (void *)*((_QWORD *)v68 + 4);
      if (*((_QWORD *)v68 + 3) - (_QWORD)v76 > 0xCuLL)
      {
        qmemcpy(v76, "    SCC with ", 13);
        *((_QWORD *)v68 + 4) += 13;
        v77 = v68;
      }
      else
      {
        v77 = llvm::raw_ostream::write(v68, "    SCC with ", 0xDuLL);
      }
      v78 = *(int *)(v75 + 16);
      if ((v78 & 0x80000000) != 0)
      {
        v78 = -(uint64_t)v78;
        v79 = v77;
        v80 = 1;
      }
      else
      {
        v79 = v77;
        v80 = 0;
      }
      sub_1C5E21910(v79, v78, 0, 0, v80);
      v81 = *((_QWORD *)v77 + 4);
      if ((unint64_t)(*((_QWORD *)v77 + 3) - v81) > 0xB)
      {
        *(_DWORD *)(v81 + 8) = 171602798;
        *(_QWORD *)v81 = *(_QWORD *)" functions:\n";
        *((_QWORD *)v77 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v77, " functions:\n", 0xCuLL);
      }
      v82 = *(unsigned int *)(v75 + 16);
      if ((_DWORD)v82)
        break;
LABEL_129:
      if (++v73 == v74)
        goto LABEL_134;
    }
    v83 = *(uint64_t **)(v75 + 8);
    v84 = &v83[v82];
    while (1)
    {
      v85 = *v83;
      v86 = *((_QWORD *)v68 + 4);
      if ((unint64_t)(*((_QWORD *)v68 + 3) - v86) > 5)
      {
        *(_WORD *)(v86 + 4) = 8224;
        *(_DWORD *)v86 = 538976288;
        *((_QWORD *)v68 + 4) += 6;
        v87 = v68;
      }
      else
      {
        v87 = llvm::raw_ostream::write(v68, "      ", 6uLL);
      }
      v88 = *(uint64_t ****)(v85 + 8);
      if ((*((_BYTE *)v88 + 23) & 0x10) != 0)
        break;
      v101 = (_BYTE *)*((_QWORD *)v87 + 4);
LABEL_122:
      if (*((_BYTE **)v87 + 3) == v101)
      {
        llvm::raw_ostream::write(v87, "\n", 1uLL);
      }
      else
      {
        *v101 = 10;
        ++*((_QWORD *)v87 + 4);
      }
      if (++v83 == v84)
        goto LABEL_129;
    }
    v89 = ***v88;
    v90 = *(_QWORD *)(v89 + 152);
    v91 = *(unsigned int *)(v89 + 168);
    if ((_DWORD)v91)
    {
      LODWORD(v92) = (v91 - 1) & ((v88 >> 4) ^ (v88 >> 9));
      v93 = (uint64_t ****)(v90 + 16 * v92);
      v94 = *v93;
      if (*v93 == v88)
        goto LABEL_118;
      v95 = 1;
      while (v94 != (uint64_t ***)-4096)
      {
        v96 = v92 + v95++;
        v92 = v96 & (v91 - 1);
        v94 = *(uint64_t ****)(v90 + 16 * v92);
        if (v94 == v88)
        {
          v93 = (uint64_t ****)(v90 + 16 * v92);
          goto LABEL_118;
        }
      }
    }
    v93 = (uint64_t ****)(v90 + 16 * v91);
LABEL_118:
    v97 = (size_t *)v93[1];
    v100 = *v97;
    v98 = v97 + 2;
    v99 = v100;
    v101 = (_BYTE *)*((_QWORD *)v87 + 4);
    if (v100 <= *((_QWORD *)v87 + 3) - (_QWORD)v101)
    {
      if (v99)
      {
        memcpy(v101, v98, v99);
        v101 = (_BYTE *)(*((_QWORD *)v87 + 4) + v99);
        *((_QWORD *)v87 + 4) = v101;
      }
    }
    else
    {
      v87 = llvm::raw_ostream::write(v87, (const char *)v98, v99);
      v101 = (_BYTE *)*((_QWORD *)v87 + 4);
    }
    goto LABEL_122;
  }
LABEL_93:
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

_QWORD *llvm::LazyCallGraphDOTPrinterPass::LazyCallGraphDOTPrinterPass(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

_QWORD *llvm::LazyCallGraphDOTPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  llvm::raw_ostream *v7;
  uint64_t v8;
  std::string *p_p;
  size_t size;
  llvm::raw_ostream *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  unint64_t v16;
  uint64_t ***v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ****v22;
  uint64_t ***v23;
  int v24;
  int v25;
  unint64_t *v26;
  size_t v27;
  const void *v28;
  unint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _BYTE *v41;
  uint64_t v42;
  _WORD *v43;
  llvm::raw_ostream *v44;
  std::string *v45;
  size_t v46;
  llvm::raw_ostream *v47;
  llvm::raw_ostream *v48;
  uint64_t v49;
  uint64_t ***v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t ****v55;
  uint64_t ***v56;
  int v57;
  int v58;
  unint64_t *v59;
  std::string::size_type v60;
  const void *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  std::string *v66;
  size_t v67;
  llvm::raw_ostream *v68;
  _BYTE *v69;
  _WORD *v70;
  llvm::raw_ostream *v71;
  _WORD *v72;
  uint64_t v75;
  llvm::raw_ostream **v76;
  void *__dst[2];
  unint64_t v78;
  std::string v79;
  std::string v80;
  std::string __p;

  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::LazyCallGraphAnalysis::Key, a2);
  v76 = a1;
  v7 = *a1;
  v8 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v8) > 8)
  {
    *(_BYTE *)(v8 + 8) = 34;
    *(_QWORD *)v8 = *(_QWORD *)"digraph \"";
    *((_QWORD *)v7 + 4) += 9;
  }
  else
  {
    v7 = llvm::raw_ostream::write(*a1, "digraph \"", 9uLL);
  }
  llvm::DOT::EscapeString((char *)(a2 + 168), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = llvm::raw_ostream::write(v7, (const char *)p_p, size);
  v12 = (_DWORD *)*((_QWORD *)v11 + 4);
  if (*((_QWORD *)v11 + 3) - (_QWORD)v12 > 3uLL)
  {
    *v12 = 175841314;
    *((_QWORD *)v11 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v11, "\" {\n", 4uLL);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = *(_QWORD *)(a2 + 32);
  v75 = a2 + 24;
  if (v13 != a2 + 24)
  {
    while (1)
    {
      if (v13)
        v14 = v13 - 56;
      else
        v14 = 0;
      v15 = *v76;
      v16 = sub_1C4E7EC8C(ResultImpl + 8, v14);
      v17 = *(uint64_t ****)(v16 + 8);
      if ((*((_BYTE *)v17 + 23) & 0x10) == 0)
      {
        v27 = 0;
        HIBYTE(v78) = 0;
        v30 = __dst;
        goto LABEL_33;
      }
      v18 = ***v17;
      v19 = *(_QWORD *)(v18 + 152);
      v20 = *(unsigned int *)(v18 + 168);
      if (!(_DWORD)v20)
        goto LABEL_24;
      LODWORD(v21) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
      v22 = (uint64_t ****)(v19 + 16 * v21);
      v23 = *v22;
      if (*v22 != v17)
        break;
LABEL_25:
      v26 = (unint64_t *)v22[1];
      v29 = *v26;
      v28 = v26 + 2;
      v27 = v29;
      if (v29 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_117;
      if (v27 >= 0x17)
      {
        v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v27 | 7) != 0x17)
          v31 = v27 | 7;
        v32 = v31 + 1;
        v30 = (void **)operator new(v31 + 1);
        __dst[1] = (void *)v27;
        v78 = v32 | 0x8000000000000000;
        __dst[0] = v30;
LABEL_32:
        memmove(v30, v28, v27);
        goto LABEL_33;
      }
      HIBYTE(v78) = v27;
      v30 = __dst;
      if (v27)
        goto LABEL_32;
LABEL_33:
      *((_BYTE *)v30 + v27) = 0;
      llvm::DOT::EscapeString((char *)__dst, &v79);
      v33 = std::string::insert(&v79, 0, "\"");
      v34 = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v80.__r_.__value_.__r.__words[2] = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v35 = std::string::append(&v80, "\"");
      v36 = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if (SHIBYTE(v78) < 0)
        operator delete(__dst[0]);
      if (*(_BYTE *)(v16 + 96))
        v37 = (char *)(v16 + 24);
      else
        v37 = llvm::LazyCallGraph::Node::populateSlow((llvm::LazyCallGraph::Node *)v16);
      v38 = *((unsigned int *)v37 + 2);
      if ((_DWORD)v38)
      {
        v39 = 8 * v38;
        v40 = *(_QWORD **)v37;
        while ((*v40 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v40 & 0xFFFFFFFFFFFFFFF8))
        {
          ++v40;
          v39 -= 8;
          if (!v39)
            goto LABEL_47;
        }
      }
      else
      {
        v40 = *(_QWORD **)v37;
      }
      v42 = *(_QWORD *)v37 + 8 * v38;
LABEL_55:
      if (v40 == (_QWORD *)v42)
        goto LABEL_47;
      v43 = (_WORD *)*((_QWORD *)v15 + 4);
      if (*((_QWORD *)v15 + 3) - (_QWORD)v43 > 1uLL)
      {
        *v43 = 8224;
        *((_QWORD *)v15 + 4) += 2;
        v44 = v15;
      }
      else
      {
        v44 = llvm::raw_ostream::write(v15, "  ", 2uLL);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &__p;
      else
        v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        v46 = __p.__r_.__value_.__l.__size_;
      v47 = llvm::raw_ostream::write(v44, (const char *)v45, v46);
      v48 = v47;
      v49 = *((_QWORD *)v47 + 4);
      if ((unint64_t)(*((_QWORD *)v47 + 3) - v49) > 4)
      {
        *(_BYTE *)(v49 + 4) = 34;
        *(_DWORD *)v49 = 540945696;
        *((_QWORD *)v47 + 4) += 5;
      }
      else
      {
        v48 = llvm::raw_ostream::write(v47, " -> \"", 5uLL);
      }
      v50 = *(uint64_t ****)((*v40 & 0xFFFFFFFFFFFFFFF8) + 8);
      if ((*((_BYTE *)v50 + 23) & 0x10) == 0)
      {
        v60 = 0;
        *((_BYTE *)&v79.__r_.__value_.__s + 23) = 0;
        v63 = &v79;
        goto LABEL_82;
      }
      v51 = ***v50;
      v52 = *(_QWORD *)(v51 + 152);
      v53 = *(unsigned int *)(v51 + 168);
      if (!(_DWORD)v53)
        goto LABEL_73;
      LODWORD(v54) = (v53 - 1) & ((v50 >> 4) ^ (v50 >> 9));
      v55 = (uint64_t ****)(v52 + 16 * v54);
      v56 = *v55;
      if (*v55 != v50)
      {
        v57 = 1;
        while (v56 != (uint64_t ***)-4096)
        {
          v58 = v54 + v57++;
          v54 = v58 & (v53 - 1);
          v56 = *(uint64_t ****)(v52 + 16 * v54);
          if (v56 == v50)
          {
            v55 = (uint64_t ****)(v52 + 16 * v54);
            goto LABEL_74;
          }
        }
LABEL_73:
        v55 = (uint64_t ****)(v52 + 16 * v53);
      }
LABEL_74:
      v59 = (unint64_t *)v55[1];
      v62 = *v59;
      v61 = v59 + 2;
      v60 = v62;
      if (v62 > 0x7FFFFFFFFFFFFFF7)
LABEL_117:
        abort();
      if (v60 >= 0x17)
      {
        v64 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v60 | 7) != 0x17)
          v64 = v60 | 7;
        v65 = v64 + 1;
        v63 = operator new(v64 + 1);
        v79.__r_.__value_.__l.__size_ = v60;
        v79.__r_.__value_.__r.__words[2] = v65 | 0x8000000000000000;
        v79.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
LABEL_81:
        memmove(v63, v61, v60);
        goto LABEL_82;
      }
      *((_BYTE *)&v79.__r_.__value_.__s + 23) = v60;
      v63 = &v79;
      if (v60)
        goto LABEL_81;
LABEL_82:
      *((_BYTE *)v63 + v60) = 0;
      llvm::DOT::EscapeString((char *)&v79, &v80);
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v66 = &v80;
      else
        v66 = (std::string *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = *((_BYTE *)&v80.__r_.__value_.__s + 23) & 0x7F;
      else
        v67 = v80.__r_.__value_.__l.__size_;
      v68 = llvm::raw_ostream::write(v48, (const char *)v66, v67);
      v69 = (_BYTE *)*((_QWORD *)v68 + 4);
      if (*((_BYTE **)v68 + 3) == v69)
      {
        llvm::raw_ostream::write(v68, "\"", 1uLL);
      }
      else
      {
        *v69 = 34;
        ++*((_QWORD *)v68 + 4);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      v70 = (_WORD *)*((_QWORD *)v15 + 4);
      if ((*(_BYTE *)v40 & 4) == 0)
      {
        if (*((_QWORD *)v15 + 3) - (_QWORD)v70 > 0x1AuLL)
        {
          qmemcpy(v70, " [style=dashed,label=\"ref\"]", 27);
          v70 = (_WORD *)(*((_QWORD *)v15 + 4) + 27);
          *((_QWORD *)v15 + 4) = v70;
        }
        else
        {
          llvm::raw_ostream::write(v15, " [style=dashed,label=\"ref\"]", 0x1BuLL);
          v70 = (_WORD *)*((_QWORD *)v15 + 4);
        }
      }
      if (*((_QWORD *)v15 + 3) - (_QWORD)v70 > 1uLL)
      {
        *v70 = 2619;
        *((_QWORD *)v15 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v15, ";\n", 2uLL);
      }
      while (++v40 != (_QWORD *)v42)
      {
        if ((*v40 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v40 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_55;
      }
LABEL_47:
      v41 = (_BYTE *)*((_QWORD *)v15 + 4);
      if (*((_BYTE **)v15 + 3) == v41)
      {
        llvm::raw_ostream::write(v15, "\n", 1uLL);
      }
      else
      {
        *v41 = 10;
        ++*((_QWORD *)v15 + 4);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v13 = *(_QWORD *)(v13 + 8);
      if (v13 == v75)
        goto LABEL_111;
    }
    v24 = 1;
    while (v23 != (uint64_t ***)-4096)
    {
      v25 = v21 + v24++;
      v21 = v25 & (v20 - 1);
      v23 = *(uint64_t ****)(v19 + 16 * v21);
      if (v23 == v17)
      {
        v22 = (uint64_t ****)(v19 + 16 * v21);
        goto LABEL_25;
      }
    }
LABEL_24:
    v22 = (uint64_t ****)(v19 + 16 * v20);
    goto LABEL_25;
  }
LABEL_111:
  v71 = *v76;
  v72 = (_WORD *)*((_QWORD *)*v76 + 4);
  if (*((_QWORD *)*v76 + 3) - (_QWORD)v72 > 1uLL)
  {
    *v72 = 2685;
    *((_QWORD *)v71 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v71, "}\n", 2uLL);
  }
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C4E85050(uint64_t result, uint64_t a2)
{
  int v3;
  int v4;

  *(_QWORD *)result = result + 16;
  *(_QWORD *)(result + 8) = 0x400000000;
  if (*(_DWORD *)(a2 + 8))
    result = sub_1C619C6B4(result, (const void **)a2);
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  v3 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v3;
  v4 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v4;
  return result;
}

_QWORD *sub_1C4E850D4(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 9;
    do
    {
LABEL_10:
      *v6 = -4096;
      v6 += 2;
    }
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) == 0)
  {
    if ((_DWORD)v5 == *((_DWORD *)result + 4))
    {
      *result = 0;
      if (!(_DWORD)v5)
        return result;
      v6 = (_QWORD *)result[1];
      v7 = &v6[2 * v5];
      goto LABEL_10;
    }
    MEMORY[0x1CAA32FB4](result[1], 8);
  }
  if (v5 <= 4)
  {
    *v1 = 1;
LABEL_19:
    result = v1 + 1;
    v8 = v1 + 9;
    goto LABEL_20;
  }
  *(_DWORD *)v1 &= ~1u;
  result = operator new(16 * v5, (std::align_val_t)8uLL);
  v1[1] = result;
  v1[2] = v5;
  v9 = *(_DWORD *)v1;
  *v1 = *(_DWORD *)v1 & 1;
  if ((v9 & 1) != 0)
    goto LABEL_19;
  v8 = &result[2 * v5];
  do
  {
LABEL_20:
    *result = -4096;
    result += 2;
  }
  while (result != v8);
  return result;
}

_QWORD *sub_1C4E851E8(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4850EC8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4E85244((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C4E85244(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4E852F4(a1, v7);
  v9 = 0;
  sub_1C4850EC8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4E852F4(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C617ADCC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4E853AC@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C4926528((uint64_t)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C496F99C(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * a1[4];
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1C4E8543C(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  unint64_t v4;

  v2 = (uint64_t)(*a1 + 3);
  v3 = *a1 + 9;
  v4 = sub_1C4E7EC8C(**a1, a2);
  return sub_1C4E7EBD4(v2, v3, v4, 0);
}

uint64_t sub_1C4E85474(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;

  v2 = *a1;
  v3 = v2 + 120;
  v4 = (_DWORD *)(v2 + 168);
  v5 = sub_1C4E7EC8C(v2, a2);
  return sub_1C4E7EBD4(v3, v4, v5, 0);
}

uint64_t sub_1C4E854AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  v4 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0x400000000;
  if (*(_DWORD *)(a2 + 24))
    sub_1C4964480(v4, (const void **)(a2 + 16));
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0;
  if (*(_DWORD *)(a2 + 72))
    sub_1C4E85538(a1 + 64, a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return a1;
}

uint64_t sub_1C4E85538(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(uint64_t **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v7 = (_DWORD *)(a2 + 8);
      v8 = *(unsigned int *)(a2 + 8);
      v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if ((_DWORD)v8)
        {
          v11 = &v4[2 * v8];
          v12 = *(_QWORD **)a1;
          do
          {
            v13 = *v4;
            v14 = v4[1];
            v4 += 2;
            *v12 = v13;
            v12[1] = v14;
            v12 += 2;
          }
          while (v4 != v11);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v8)
        {
          if ((_DWORD)v9)
          {
            v15 = &v4[2 * v9];
            v16 = *(_QWORD **)a1;
            do
            {
              v17 = *v4;
              v18 = v4[1];
              v4 += 2;
              *v16 = v17;
              v16[1] = v18;
              v16 += 2;
            }
            while (v4 != v15);
          }
          else
          {
            v9 = 0;
          }
          v10 = v8;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 16);
          v9 = 0;
          v10 = *v7;
        }
        if (v9 != v10)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*(_QWORD *)a2 + 16 * v9), *(_QWORD *)a2 + 16 * v10 - (*(_QWORD *)a2 + 16 * v9));
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(uint64_t **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *v7 = 0;
  }
  return a1;
}

uint64_t sub_1C4E85668(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + 16;
  v5 = *(uint64_t **)(a1 + 16);
  v6 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    do
    {
      v8 = *v5++;
      MEMORY[0x1CAA32FB4](v8, 8);
      v7 -= 8;
    }
    while (v7);
  }
  v9 = *(uint64_t **)(a1 + 64);
  v10 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      v12 = *v9;
      v9 += 2;
      MEMORY[0x1CAA32FB4](v12, 8);
      v11 -= 16;
    }
    while (v11);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_1C4964480(v4, (const void **)(a2 + 16));
  sub_1C6154804(a1 + 64, a2 + 64);
  *(_QWORD *)(a2 + 80) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return a1;
}

uint64_t sub_1C4E85724(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4E857C8(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  uint64_t v7;
  _QWORD *v8;

  v3 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v4 = 4;
  else
    v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[1] > v4 >> 3)
  {
    goto LABEL_5;
  }
  v7 = (uint64_t)a1;
  sub_1C4E85888((uint64_t)a1, v4);
  v8 = 0;
  sub_1C4E85724(v7, *a2, &v8);
  a1 = (_DWORD *)v7;
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C4E85888(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C619C8C4(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C619C8C4(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t *sub_1C4E85A00(int8x16_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v7;
  int8x16_t *v8;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  char *v60;

  v7 = a2;
  v8 = a1;
  if (a4 == 3)
  {
    v11 = (_QWORD *)*a3;
    v12 = sub_1C477672C(*a3, a1->i64[1]);
    v13 = v11[1];
    v14 = 16;
    if (v13 == *v11)
      v14 = 20;
    if (v12 == (_QWORD *)(v13 + 8 * *(unsigned int *)((char *)v11 + v14)))
    {
      v10 = v8->i64[0];
      v8->i64[0] = v8->i64[1];
      v8->i64[1] = v10;
      v8->i64[1] = *v7;
      goto LABEL_33;
    }
    v15 = v8->i64[1];
    v8->i64[1] = *v7;
    *v7 = v15;
    *v8 = vextq_s8(*v8, *v8, 8uLL);
    return &v8->i64[1];
  }
  else
  {
    if (a4 == 2)
    {
      v10 = a1->i64[0];
      a1->i64[0] = *a2;
LABEL_33:
      *v7 = v10;
      return v7;
    }
    if (a6 >= a4)
    {
      v34 = &a1->i64[1];
      *a5 = a1->i64[0];
      v35 = a5 + 1;
      if (&a1->u64[1] == (unint64_t *)a2)
      {
        a1->i64[0] = *a2;
      }
      else
      {
        do
        {
          v36 = (_QWORD *)*a3;
          v37 = sub_1C477672C(*a3, *v34);
          v38 = v36[1];
          if (v38 == *v36)
            v39 = 20;
          else
            v39 = 16;
          v40 = (_QWORD *)(v38 + 8 * *(unsigned int *)((char *)v36 + v39));
          v41 = *v34;
          if (v37 == v40)
          {
            v8->i64[0] = v41;
            v8 = (int8x16_t *)((char *)v8 + 8);
          }
          else
          {
            *v35++ = v41;
          }
          ++v34;
        }
        while (v34 != v7);
        v8->i64[0] = *v7;
        v7 = &v8->i64[1];
        if (v35 <= a5)
          return v7;
      }
      v43 = 0;
      do
      {
        v7[v43] = a5[v43];
        ++v43;
      }
      while (&a5[v43] < v35);
    }
    else
    {
      if (a4 >= 0)
        v18 = a4;
      else
        v18 = a4 + 1;
      v19 = v18 >> 1;
      v20 = &a1->i8[8 * (v18 >> 1)];
      v21 = v20 - 8;
      v22 = (_QWORD *)*a3;
      v23 = sub_1C477672C(*a3, *((_QWORD *)v20 - 1));
      v24 = v22[1];
      v25 = 16;
      if (v24 == *v22)
        v25 = 20;
      v60 = v20;
      if (v23 == (_QWORD *)(v24 + 8 * *(unsigned int *)((char *)v22 + v25)))
      {
        v28 = v19;
LABEL_35:
        v42 = (uint64_t *)sub_1C4E85A00(v8, v21, a3, v28, a5, a6);
      }
      else
      {
        v26 = 8 - 8 * v19;
        v27 = v19;
        while (v26)
        {
          v28 = v27 - 1;
          v29 = (_QWORD *)*a3;
          v30 = sub_1C477672C(*a3, v8[-1].i64[v27]);
          v31 = v29[1];
          if (v31 == *v29)
            v32 = 20;
          else
            v32 = 16;
          v33 = (_QWORD *)(v31 + 8 * *(unsigned int *)((char *)v29 + v32));
          v26 += 8;
          v27 = v28;
          if (v30 == v33)
          {
            v21 = &v8->i8[-v26];
            v20 = v60;
            goto LABEL_35;
          }
        }
        v42 = (uint64_t *)v8;
        v20 = v60;
      }
      v44 = a4 - v19;
      v45 = (_QWORD *)*a3;
      v46 = sub_1C477672C(*a3, v8->i64[v19]);
      v47 = v45[1];
      v48 = 16;
      if (v47 == *v45)
        v48 = 20;
      if (v46 == (_QWORD *)(v47 + 8 * *(unsigned int *)((char *)v45 + v48)))
      {
        v50 = (char *)(v7 + 1);
        v51 = &v8->i64[v19 + 1];
        while (v51 != v7)
        {
          --v44;
          v52 = *v51++;
          v53 = (_QWORD *)*a3;
          v54 = sub_1C477672C(*a3, v52);
          v55 = v53[1];
          if (v55 == *v53)
            v56 = 20;
          else
            v56 = 16;
          if (v54 != (_QWORD *)(v55 + 8 * *(unsigned int *)((char *)v53 + v56)))
          {
            v49 = v51 - 1;
            v20 = v60;
            goto LABEL_52;
          }
        }
        v20 = v60;
      }
      else
      {
        v49 = (uint64_t *)v20;
LABEL_52:
        v50 = (char *)sub_1C4E85A00(v49, v7, a3, v44, a5, a6);
      }
      if (v42 == (uint64_t *)v20)
      {
        return (uint64_t *)v50;
      }
      else if (v20 == v50)
      {
        return v42;
      }
      else if (v42 + 1 == (uint64_t *)v20)
      {
        v58 = *v42;
        memmove(v42, v20, v50 - v20);
        v7 = (uint64_t *)((char *)v42 + v50 - v20);
        *v7 = v58;
      }
      else
      {
        if (v20 + 8 != v50)
          return sub_1C4E85DF0(v42, v20, v50);
        v59 = *((_QWORD *)v50 - 1);
        v7 = v42 + 1;
        if (v50 - 8 != (char *)v42)
          memmove(v42 + 1, v42, v50 - 8 - (char *)v42);
        *v42 = v59;
      }
    }
  }
  return v7;
}

_QWORD *sub_1C4E85DF0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  char v19;
  uint64_t v20;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = 0;
      do
      {
        v5 = a1[v4];
        a1[v4] = a2[v4];
        v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        v7 = (uint64_t)&a2[++v4];
      }
      while ((_QWORD *)v6 != a2 && v7 != (_QWORD)a3);
    }
  }
  else
  {
    v9 = a3 - a2;
    v10 = a2 - a1;
    do
    {
      v11 = v10;
      v10 = v9;
      v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      v12 = &a1[v10];
      do
      {
        v14 = *--v12;
        v13 = v14;
        v15 = &v12[v3];
        v16 = v12;
        do
        {
          v17 = v16;
          v16 = v15;
          *v17 = *v15;
          v18 = __OFSUB__(v3, a3 - v15);
          v20 = v3 - (a3 - v15);
          v19 = (v20 < 0) ^ v18;
          v15 = &a1[v20];
          if (v19)
            v15 = &v16[v3];
        }
        while (v15 != v12);
        *v16 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t *sub_1C4E85EBC(int8x16_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v7;
  int8x16_t *v8;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;

  v7 = a2;
  v8 = a1;
  if (a4 == 3)
  {
    v11 = (_QWORD *)*a3;
    v12 = sub_1C477672C(*a3, a1->i64[1]);
    v13 = v11[1];
    v14 = 16;
    if (v13 == *v11)
      v14 = 20;
    if (v12 == (_QWORD *)(v13 + 8 * *(unsigned int *)((char *)v11 + v14)))
    {
      v35 = v8->i64[1];
      v8->i64[1] = *v7;
      *v7 = v35;
      *v8 = vextq_s8(*v8, *v8, 8uLL);
      return &v8->i64[1];
    }
    v10 = v8->i64[0];
    v8->i64[0] = v8->i64[1];
    v8->i64[1] = v10;
    v8->i64[1] = *v7;
    goto LABEL_8;
  }
  if (a4 == 2)
  {
    v10 = a1->i64[0];
    a1->i64[0] = *a2;
LABEL_8:
    *v7 = v10;
    return v7;
  }
  if (a6 >= a4)
  {
    v27 = &a1->i64[1];
    *a5 = a1->i64[0];
    v28 = a5 + 1;
    if (&a1->u64[1] == (unint64_t *)a2)
    {
      a1->i64[0] = *a2;
    }
    else
    {
      do
      {
        v29 = (_QWORD *)*a3;
        v30 = sub_1C477672C(*a3, *v27);
        v31 = v29[1];
        if (v31 == *v29)
          v32 = 20;
        else
          v32 = 16;
        v33 = (_QWORD *)(v31 + 8 * *(unsigned int *)((char *)v29 + v32));
        v34 = *v27;
        if (v30 == v33)
        {
          *v28++ = v34;
        }
        else
        {
          v8->i64[0] = v34;
          v8 = (int8x16_t *)((char *)v8 + 8);
        }
        ++v27;
      }
      while (v27 != v7);
      v8->i64[0] = *v7;
      v7 = &v8->i64[1];
      if (v28 <= a5)
        return v7;
    }
    v57 = 0;
    do
    {
      v7[v57] = a5[v57];
      ++v57;
    }
    while (&a5[v57] < v28);
    return v7;
  }
  if (a4 >= 0)
    v18 = a4;
  else
    v18 = a4 + 1;
  v19 = v18 >> 1;
  v20 = &a1->i8[8 * (v18 >> 1)];
  v21 = v20 - 8;
  v22 = (_QWORD *)*a3;
  v23 = sub_1C477672C(*a3, *((_QWORD *)v20 - 1));
  v24 = v22[1];
  v25 = 16;
  if (v24 == *v22)
    v25 = 20;
  v60 = v20;
  if (v23 == (_QWORD *)(v24 + 8 * *(unsigned int *)((char *)v22 + v25)))
  {
    v36 = 8 - 8 * v19;
    v37 = v19;
    while (v36)
    {
      v26 = v37 - 1;
      v38 = (_QWORD *)*a3;
      v39 = sub_1C477672C(*a3, v8[-1].i64[v37]);
      v40 = v38[1];
      if (v40 == *v38)
        v41 = 20;
      else
        v41 = 16;
      v42 = (_QWORD *)(v40 + 8 * *(unsigned int *)((char *)v38 + v41));
      v36 += 8;
      v37 = v26;
      if (v39 != v42)
      {
        v21 = &v8->i8[-v36];
        v20 = v60;
        goto LABEL_36;
      }
    }
    v43 = (uint64_t *)v8;
    v20 = v60;
  }
  else
  {
    v26 = v19;
LABEL_36:
    v43 = (uint64_t *)sub_1C4E85EBC(v8, v21, a3, v26, a5, a6);
  }
  v44 = a4 - v19;
  v45 = (_QWORD *)*a3;
  v46 = sub_1C477672C(*a3, v8->i64[v19]);
  v47 = v45[1];
  v48 = 16;
  if (v47 == *v45)
    v48 = 20;
  if (v46 == (_QWORD *)(v47 + 8 * *(unsigned int *)((char *)v45 + v48)))
  {
    v56 = (uint64_t *)v20;
LABEL_52:
    v49 = (char *)sub_1C4E85EBC(v56, v7, a3, v44, a5, a6);
  }
  else
  {
    v49 = (char *)(v7 + 1);
    v50 = &v8->i64[v19 + 1];
    while (v50 != v7)
    {
      --v44;
      v51 = *v50++;
      v52 = (_QWORD *)*a3;
      v53 = sub_1C477672C(*a3, v51);
      v54 = v52[1];
      if (v54 == *v52)
        v55 = 20;
      else
        v55 = 16;
      if (v53 == (_QWORD *)(v54 + 8 * *(unsigned int *)((char *)v52 + v55)))
      {
        v56 = v50 - 1;
        v20 = v60;
        goto LABEL_52;
      }
    }
    v20 = v60;
  }
  if (v43 == (uint64_t *)v20)
    return (uint64_t *)v49;
  if (v20 == v49)
    return v43;
  if (v43 + 1 == (uint64_t *)v20)
  {
    v58 = *v43;
    memmove(v43, v20, v49 - v20);
    v7 = (uint64_t *)((char *)v43 + v49 - v20);
    *v7 = v58;
    return v7;
  }
  if (v20 + 8 == v49)
  {
    v59 = *((_QWORD *)v49 - 1);
    v7 = v43 + 1;
    if (v49 - 8 != (char *)v43)
      memmove(v43 + 1, v43, v49 - 8 - (char *)v43);
    *v43 = v59;
    return v7;
  }
  return sub_1C4E85DF0(v43, v20, v49);
}

_QWORD *sub_1C4E862AC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DE4F18(a1, v6);
  v8 = 0;
  sub_1C4A5C500(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C4E86360(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a3 - a5;
  v6 = *(unsigned int *)(result + 8);
  if (v6 + ((a3 - a5) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    v12 = result;
    v10 = a5;
    v11 = a3;
    v9 = a3 - a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v6 + ((a3 - a5) >> 3), 8);
    v5 = v9;
    a5 = v10;
    a3 = v11;
    result = v12;
    v6 = *(unsigned int *)(v12 + 8);
  }
  if (a3 != a5)
  {
    v7 = (_QWORD *)(*(_QWORD *)result + 8 * v6);
    do
    {
      v8 = *(_QWORD *)(a3 - 8);
      a3 -= 8;
      *v7++ = v8;
    }
    while (a3 != a5);
  }
  *(_DWORD *)(result + 8) = v6 + (v5 >> 3);
  return result;
}

_QWORD *sub_1C4E863E8(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4A5C500(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4E86450(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_QWORD *sub_1C4E86450(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4E86504(a1, v6);
  v8 = 0;
  sub_1C4A5C500(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C4E86504(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61526BC(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4E865BC(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 8 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 8 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v9), (const void *)(*(_QWORD *)a2 + 8 * v9), *(_QWORD *)a2 + 8 * v10 - (*(_QWORD *)a2 + 8 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

uint64_t sub_1C4E866D8(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeAssumptionCacheTrackerPass(a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Lazy Value Information Analysis";
  *(_QWORD *)(v2 + 8) = 31;
  *(_QWORD *)(v2 + 16) = "lazy-value-info";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &llvm::LazyValueInfoWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::LazyValueInfoWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::LazyValueInfoWrapperPass::runOnFunction(llvm::LazyValueInfoWrapperPass *this, llvm::Function *a2)
{
  void **v4;
  void *v5;
  llvm::AssumptionCacheTracker *v6;
  void **v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  void **v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17[2];
  int v18;
  uint64_t v19[2];
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *__src;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = (void **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::AssumptionCacheTracker::ID);
  v6 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::AssumptionCacheTracker::ID);
  *((_QWORD *)this + 4) = llvm::AssumptionCacheTracker::getAssumptionCache(v6, a2);
  v7 = (void **)**((_QWORD **)this + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::TargetLibraryInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::TargetLibraryInfoWrapperPass::ID);
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  llvm::TargetLibraryAnalysis::run(v9 + 32, (uint64_t)a2, (uint64_t)&v24);
  *(_QWORD *)(v9 + 240) = v24;
  v10 = (uint64_t *)(v9 + 240);
  if (*(_BYTE *)(v9 + 320))
  {
    if (v10 == &v24)
    {
LABEL_14:
      *(_DWORD *)(v9 + 312) = v28;
      goto LABEL_15;
    }
    v11 = (void **)(v9 + 248);
    v12 = v26;
    v13 = *(unsigned int *)(v9 + 256);
    if (v13 >= v26)
    {
      if (v26)
        memmove(*v11, __src, 8 * v26);
      goto LABEL_13;
    }
    if (*(_DWORD *)(v9 + 260) < v26)
    {
      *(_DWORD *)(v9 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9 + 248, v9 + 264, v12, 8);
    }
    else if ((_DWORD)v13)
    {
      memmove(*v11, __src, 8 * v13);
LABEL_11:
      if (v13 != v26)
        memcpy((char *)*v11 + 8 * v13, (char *)__src + 8 * v13, 8 * v26 - 8 * v13);
LABEL_13:
      *(_DWORD *)(v9 + 256) = v12;
      goto LABEL_14;
    }
    v13 = 0;
    goto LABEL_11;
  }
  *(_QWORD *)(v9 + 248) = v9 + 264;
  *(_QWORD *)(v9 + 256) = 0x600000000;
  if (v26)
    sub_1C49DA960(v9 + 248, (uint64_t)&__src);
  *(_DWORD *)(v9 + 312) = v28;
  *(_BYTE *)(v9 + 320) = 1;
LABEL_15:
  if (__src != &v27)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v19);
  sub_1C4D8B52C(v17);
  v14 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 6) = v10;
  if (v14)
  {
    sub_1C4E869F0((uint64_t *)this + 7, *((_QWORD *)this + 4), *((_QWORD *)a2 + 5));
    sub_1C4E86AA0(v16);
  }
  return 0;
}

double sub_1C4E869F0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  if (!*a1)
  {
    v5 = a3 + 272;
    v6 = sub_1C4FB7E80(*(uint64_t **)(a3 + 112), "llvm.experimental.guard", 0x17uLL);
    if (v6)
    {
      if (*(_BYTE *)(v6 + 16))
        v7 = 0;
      else
        v7 = v6;
    }
    else
    {
      v7 = 0;
    }
    v8 = operator new();
    *(_QWORD *)v8 = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 32) = 0;
    *(_DWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = v8 + 64;
    *(_QWORD *)&result = 0x800000000;
    *(_QWORD *)(v8 + 56) = 0x800000000;
    *(_QWORD *)(v8 + 192) = 0;
    *(_QWORD *)(v8 + 200) = 0;
    *(_DWORD *)(v8 + 208) = 0;
    *(_QWORD *)(v8 + 216) = a2;
    *(_QWORD *)(v8 + 224) = v5;
    *(_QWORD *)(v8 + 232) = v7;
    *a1 = v8;
  }
  return result;
}

uint64_t sub_1C4E86AA0(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  int32x2_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = result;
  v2 = *(_DWORD *)(result + 8);
  if (!v2 && !*(_DWORD *)(result + 12))
    goto LABEL_25;
  v3 = *(unsigned int *)(result + 16);
  v4 = *(_QWORD *)result;
  if (v3 <= 4 * v2 || v3 < 0x41)
  {
    if (!(_DWORD)v3)
    {
LABEL_24:
      *(_QWORD *)(v1 + 8) = 0;
      goto LABEL_25;
    }
    v10 = 16 * v3;
    result = v4 + 8;
    while (1)
    {
      v11 = *(_QWORD *)(result - 8);
      if (v11 == -8192)
        goto LABEL_22;
      if (v11 != -4096)
        break;
LABEL_23:
      result += 16;
      v10 -= 16;
      if (!v10)
        goto LABEL_24;
    }
    result = (uint64_t)sub_1C4E89280((uint64_t *)result);
LABEL_22:
    *(_QWORD *)(result - 8) = -4096;
    goto LABEL_23;
  }
  v5 = 16 * v3;
  result = v4 + 8;
  do
  {
    if ((*(_QWORD *)(result - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
      result = (uint64_t)sub_1C4E89280((uint64_t *)result);
    result += 16;
    v5 -= 16;
  }
  while (v5);
  if (!v2)
  {
    if (*(_DWORD *)(v1 + 16))
    {
      result = MEMORY[0x1CAA32FB4](*(_QWORD *)v1, 8);
      *(_QWORD *)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
      *(_DWORD *)(v1 + 16) = 0;
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v6 = 1 << (33 - __clz(v2 - 1));
  if (v6 <= 64)
    v7 = 64;
  else
    v7 = v6;
  if (v7 == *(_DWORD *)(v1 + 16))
  {
    *(_QWORD *)(v1 + 8) = 0;
    v8 = 16 * v7;
    v9 = *(_QWORD **)v1;
    do
    {
      *v9 = -4096;
      v9 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)v1, 8);
    v37 = (4 * v7 / 3 + 1) | ((unint64_t)(4 * v7 / 3 + 1) >> 1);
    v38 = v37 | (v37 >> 2) | ((v37 | (v37 >> 2)) >> 4);
    LODWORD(v38) = (((v38 | (v38 >> 8)) >> 16) | v38 | (v38 >> 8)) + 1;
    *(_DWORD *)(v1 + 16) = v38;
    result = (uint64_t)operator new(16 * v38, (std::align_val_t)8uLL);
    *(_QWORD *)v1 = result;
    *(_QWORD *)(v1 + 8) = 0;
    v39 = *(unsigned int *)(v1 + 16);
    if ((_DWORD)v39)
    {
      v40 = 16 * v39;
      do
      {
        *(_QWORD *)result = -4096;
        result += 16;
        v40 -= 16;
      }
      while (v40);
    }
  }
LABEL_25:
  v12 = *(_DWORD *)(v1 + 32);
  if (v12 || *(_DWORD *)(v1 + 36))
  {
    v13 = (_QWORD *)(v1 + 24);
    v14 = *(_DWORD *)(v1 + 40);
    if (v14 <= 4 * v12 || v14 < 0x41)
    {
      if (v14)
      {
        v19 = (_QWORD *)*v13;
        v20 = *v13 + 40 * v14;
        do
        {
          v21 = v19[3];
          if (v21 != -4096)
          {
            if (v21 && v21 != -8192)
            {
              v22 = v19[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v22 = v19[2];
              v23 = (unint64_t *)v19[2];
              if (v23)
              {
                *v23 = *v23 & 7 | v22;
              }
              else
              {
                v24 = v19[3];
                v25 = ***(int32x2_t ****)v24;
                v26 = (unint64_t)v25[303];
                if (v26 <= v22)
                {
                  v27 = v25[305].u32[0];
                  if (v26 + 16 * v27 > v22)
                  {
                    v28 = v27 - 1;
                    LODWORD(v29) = v28 & ((v24 >> 4) ^ (v24 >> 9));
                    result = v26 + 16 * v29;
                    v30 = *(_QWORD *)result;
                    if (v24 == *(_QWORD *)result)
                    {
LABEL_52:
                      *(_QWORD *)result = -8192;
                      v25[304] = vadd_s32(v25[304], (int32x2_t)0x1FFFFFFFFLL);
                      v24 = v19[3];
                    }
                    else
                    {
                      result = 1;
                      while (v30 != -4096)
                      {
                        v31 = v29 + result;
                        result = (result + 1);
                        v29 = v31 & v28;
                        v30 = *(_QWORD *)(v26 + 16 * v29);
                        if (v24 == v30)
                        {
                          result = v26 + 16 * v29;
                          goto LABEL_52;
                        }
                      }
                    }
                    *(_BYTE *)(v24 + 17) &= ~1u;
                  }
                }
              }
            }
            v19[3] = -4096;
          }
          v19[4] = 0;
          v19 += 5;
        }
        while (v19 != (_QWORD *)v20);
      }
      *(_QWORD *)(v1 + 32) = 0;
    }
    else
    {
      result = sub_1C4E89410(v1 + 24);
      v15 = 1 << (33 - __clz(v12 - 1));
      if (v15 <= 64)
        v15 = 64;
      if (v12)
        v16 = v15;
      else
        v16 = 0;
      if ((_DWORD)v16 == *(_DWORD *)(v1 + 40))
      {
        *(_QWORD *)(v1 + 32) = 0;
        if ((_DWORD)v16)
        {
          v17 = 40 * v16;
          v18 = (_QWORD *)(*(_QWORD *)(v1 + 24) + 16);
          do
          {
            *v18 = 0;
            v18[1] = -4096;
            *(v18 - 2) = &off_1E8138970;
            *(v18 - 1) = 2;
            v18[2] = 0;
            v18 += 5;
            v17 -= 40;
          }
          while (v17);
        }
      }
      else
      {
        result = MEMORY[0x1CAA32FB4](*v13, 8);
        if ((_DWORD)v16)
        {
          v32 = (4 * (int)v16 / 3u + 1) | ((unint64_t)(4 * (int)v16 / 3u + 1) >> 1);
          v33 = v32 | (v32 >> 2) | ((v32 | (v32 >> 2)) >> 4);
          LODWORD(v33) = (((v33 | (v33 >> 8)) >> 16) | v33 | (v33 >> 8)) + 1;
          *(_DWORD *)(v1 + 40) = v33;
          result = (uint64_t)operator new(40 * v33, (std::align_val_t)8uLL);
          *(_QWORD *)(v1 + 24) = result;
          *(_QWORD *)(v1 + 32) = 0;
          v34 = *(unsigned int *)(v1 + 40);
          if ((_DWORD)v34)
          {
            v35 = 40 * v34;
            v36 = (_QWORD *)(result + 16);
            do
            {
              *v36 = 0;
              v36[1] = -4096;
              *(v36 - 2) = &off_1E8138970;
              *(v36 - 1) = 2;
              v36[2] = 0;
              v36 += 5;
              v35 -= 40;
            }
            while (v35);
          }
        }
        else
        {
          *v13 = 0;
          *(_QWORD *)(v1 + 32) = 0;
          *(_DWORD *)(v1 + 40) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::LazyValueInfoWrapperPass::getLVI(llvm::LazyValueInfoWrapperPass *this)
{
  return (uint64_t)this + 32;
}

void llvm::LazyValueInfo::~LazyValueInfo(llvm::LazyValueInfo *this)
{
  llvm::LazyValueInfo::releaseMemory((uint64_t *)this);
}

{
  llvm::LazyValueInfo::releaseMemory((uint64_t *)this);
}

uint64_t *llvm::LazyValueInfo::releaseMemory(uint64_t *this)
{
  _QWORD *v1;
  double v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v1 = this + 3;
  if (this[3])
  {
    v2 = sub_1C4E869F0(this + 3, *this, 0);
    v4 = v3;
    MEMORY[0x1CAA32FB4](v3[24], 8, v2);
    v5 = (uint64_t *)v4[6];
    if (v5 != v4 + 8)
      free(v5);
    sub_1C4E89410((uint64_t)(v4 + 3));
    MEMORY[0x1CAA32FB4](v4[3], 8);
    v6 = *((unsigned int *)v4 + 4);
    v7 = *v4;
    if ((_DWORD)v6)
    {
      v8 = 16 * v6;
      v9 = (uint64_t *)(v7 + 8);
      do
      {
        v10 = *(v9 - 1);
        if (v10 != -4096 && v10 != -8192)
          v9 = sub_1C4E89280(v9);
        v9 += 2;
        v8 -= 16;
      }
      while (v8);
      v7 = *v4;
    }
    MEMORY[0x1CAA32FB4](v7, 8);
    this = (uint64_t *)MEMORY[0x1CAA32FC0](v4, 0x10E0C401BD65BB8);
    *v1 = 0;
  }
  return this;
}

BOOL llvm::LazyValueInfo::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &llvm::LazyValueAnalysis::Key;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::LazyValueAnalysis::Key);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C4DAA3F8((uint64_t)v8);
}

uint64_t *llvm::LazyValueInfoWrapperPass::releaseMemory(llvm::LazyValueInfoWrapperPass *this)
{
  return llvm::LazyValueInfo::releaseMemory((uint64_t *)this + 4);
}

uint64_t llvm::LazyValueAnalysis::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, a1) + 8;
  result = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1);
  v8 = *(_QWORD *)(a1 + 40) + 272;
  *a3 = v6;
  a3[1] = v8;
  a3[2] = result + 8;
  a3[3] = 0;
  return result;
}

llvm::ValueHandleBase *llvm::LazyValueInfo::getConstant(llvm::LazyValueInfo *this, llvm::Value *a2, llvm::Instruction *a3)
{
  uint64_t v6;
  uint64_t v7;
  llvm::ValueHandleBase *v8;
  llvm::LLVMContext *v10;
  const llvm::APInt *v11;
  __int16 v12;
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)llvm::Value::stripPointerCasts(a2) + 16) == 59)
    return 0;
  v6 = *((_QWORD *)a3 + 5);
  sub_1C4E869F0((uint64_t *)this + 3, *(_QWORD *)this, *(_QWORD *)(*(_QWORD *)(v6 + 56) + 40));
  sub_1C4E871E0(v7, (uint64_t)a2, v6, a3, (uint64_t)&v12);
  if (v12 == 2)
  {
    v8 = (llvm::ValueHandleBase *)v13[0];
  }
  else if ((v12 & 0xFE) == 4 && (v10 = (llvm::LLVMContext *)sub_1C4E87458((uint64_t)v13)) != 0)
  {
    v8 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)a2, v10, v11);
  }
  else
  {
    v8 = 0;
  }
  if ((v12 & 0xFE) == 4)
    sub_1C4E8C6FC((uint64_t)v13);
  return v8;
}

void sub_1C4E871E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const llvm::DominatorTree *a4@<X3>, uint64_t a5@<X8>)
{
  char v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  size_t v17;
  unsigned __int8 v18[8];
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  char v23;
  __int16 v24;
  void *__src;
  unsigned int v26;
  void *v27;
  unsigned int v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  sub_1C4E89520((uint64_t)&v24, a1, a2, a3, a4);
  if (!v29)
  {
    sub_1C4E89BEC(a1);
    sub_1C4E89520((uint64_t)v18, a1, a2, a3, a4);
    sub_1C4E94288((uint64_t)&v24, v18);
    if (v23)
    {
      if ((v18[0] & 0xFE) == 4)
      {
        if (v22 >= 0x41 && v21)
          MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
        if (v20 >= 0x41 && v19)
          MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
      }
    }
  }
  v10 = v24;
  v11 = v24;
  *(_WORD *)a5 = v24;
  if ((v11 - 4) < 2)
  {
    v12 = v26;
    *(_DWORD *)(a5 + 16) = v26;
    if (v12 > 0x40)
    {
      v16 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
      v13 = (void *)operator new[]();
      memcpy(v13, __src, v16);
    }
    else
    {
      v13 = __src;
    }
    *(_QWORD *)(a5 + 8) = v13;
    v14 = v28;
    *(_DWORD *)(a5 + 32) = v28;
    if (v14 > 0x40)
    {
      v17 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
      v15 = (void *)operator new[]();
      memcpy(v15, v27, v17);
    }
    else
    {
      v15 = v27;
    }
    *(_QWORD *)(a5 + 24) = v15;
    v10 = v24;
    *(_WORD *)a5 = v24 & 0xFF00 | v11;
  }
  else if ((v11 - 2) < 2)
  {
    *(_QWORD *)(a5 + 8) = __src;
  }
  if (v29 && (v10 & 0xFE) == 4)
  {
    if (v28 >= 0x41 && v27)
      MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
    if (v26 >= 0x41)
    {
      if (__src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    }
  }
}

uint64_t sub_1C4E87458(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  unsigned int v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  size_t v10;
  int v11;
  void *v12;
  void *__s2;
  unsigned int v14;

  v2 = *(unsigned int *)(a1 + 8);
  v14 = v2;
  if (v2 > 0x40)
  {
    v10 = ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8;
    v3 = (void *)operator new[]();
    memcpy(v3, *(const void **)a1, v10);
  }
  else
  {
    v3 = *(void **)a1;
  }
  __s2 = v3;
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v4 = v14;
  v5 = __s2;
  v14 = 0;
  v6 = *(unsigned int *)(a1 + 24);
  if (v6 > 0x40)
  {
    v12 = __s2;
    v11 = memcmp(*(const void **)(a1 + 16), __s2, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
    v5 = v12;
    v7 = v11 == 0;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16) == (_QWORD)__s2;
  }
  v8 = v7;
  if (v4 >= 0x41)
  {
    if (v5)
    {
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
      if (v14 >= 0x41)
      {
        if (__s2)
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      }
    }
  }
  if (v8)
    return a1;
  else
    return 0;
}

void llvm::LazyValueInfo::getConstantRange(llvm::LazyValueInfo *this@<X0>, llvm::Value *a2@<X1>, llvm::Instruction *a3@<X2>, char a4@<W3>, _DWORD *a5@<X8>)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  unsigned int v15;
  llvm::APInt *v16;
  unsigned int v17;
  __int16 v18;
  const void *v19;
  unsigned int v20;
  const void *v21;
  unsigned int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned int *)(*(_QWORD *)a2 + 8);
  v10 = v9 >> 8;
  v11 = *((_QWORD *)a3 + 5);
  sub_1C4E869F0((uint64_t *)this + 3, *(_QWORD *)this, *(_QWORD *)(*(_QWORD *)(v11 + 56) + 40));
  sub_1C4E871E0(v12, (uint64_t)a2, v11, a3, (uint64_t)&v18);
  if ((_BYTE)v18)
  {
    if (v18 == 4 || v18 == 5 && ((a4 & 1) != 0 || sub_1C4E87458((uint64_t)&v19)))
    {
      v15 = v20;
      a5[2] = v20;
      if (v15 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)a5, &v19);
      else
        *(_QWORD *)a5 = v19;
      v16 = (llvm::APInt *)(a5 + 4);
      v17 = v22;
      a5[6] = v22;
      if (v17 > 0x40)
        llvm::APInt::initSlowCase(v16, &v21);
      else
        *(_QWORD *)v16 = v21;
    }
    else
    {
      a5[2] = v10;
      if (v9 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)a5, -1, 1);
        LODWORD(v10) = a5[2];
      }
      else
      {
        v13 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v9);
        if (v9 <= 0xFF)
          v13 = 0;
        *(_QWORD *)a5 = v13;
      }
      a5[6] = v10;
      if (v10 > 0x40)
      {
        v14 = (void *)operator new[]();
        *((_QWORD *)a5 + 2) = v14;
        memcpy(v14, *(const void **)a5, (((unint64_t)v10 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *((_QWORD *)a5 + 2) = *(_QWORD *)a5;
      }
    }
  }
  else
  {
    llvm::ConstantRange::ConstantRange((llvm::ConstantRange *)a5, v9 >> 8, 0);
  }
  if ((v18 & 0xFE) == 4)
  {
    if (v22 >= 0x41 && v21)
      MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
    if (v20 >= 0x41)
    {
      if (v19)
        MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
    }
  }
}

void *llvm::LazyValueInfo::getConstantOnEdge(llvm::LazyValueInfo *this, llvm::ConstantInt ***a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4, llvm::Instruction *a5)
{
  uint64_t v9;
  char v10;
  void *v11;
  void *v13;
  const llvm::APInt *v14;
  unsigned int v15;
  void *v16;
  BOOL v17;
  int v18;
  size_t v19;
  int v20;
  void *v21;
  void *__s2;
  unsigned int v23;
  __int16 v24;
  void *__src;
  unsigned int v26;
  void *__s1;
  unsigned int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  sub_1C4E869F0((uint64_t *)this + 3, *(_QWORD *)this, *(_QWORD *)(*((_QWORD *)a3 + 7) + 40));
  sub_1C4E87A04(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)&v24);
  v10 = v24;
  if (v24 == 2)
  {
    v11 = __src;
  }
  else
  {
    if ((v24 & 0xFE) != 4)
      goto LABEL_3;
    v23 = v26;
    if (v26 > 0x40)
    {
      v19 = (((unint64_t)v26 + 63) >> 3) & 0x3FFFFFF8;
      v13 = (void *)operator new[]();
      memcpy(v13, __src, v19);
    }
    else
    {
      v13 = __src;
    }
    __s2 = v13;
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    v15 = v23;
    v16 = __s2;
    v23 = 0;
    if (v28 > 0x40)
    {
      v21 = __s2;
      v20 = memcmp(__s1, __s2, (((unint64_t)v28 + 63) >> 3) & 0x3FFFFFF8);
      v16 = v21;
      v17 = v20 == 0;
    }
    else
    {
      v17 = __s1 == __s2;
    }
    v18 = v17;
    if (v15 >= 0x41)
    {
      if (v16)
      {
        MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
        if (v23 >= 0x41)
        {
          if (__s2)
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        }
      }
    }
    if (v18)
    {
      v11 = llvm::ConstantInt::get(**a2, (llvm::LLVMContext *)&__src, v14);
      v10 = v24;
    }
    else
    {
LABEL_3:
      v11 = 0;
    }
  }
  if ((v10 & 0xFE) == 4)
  {
    if (v28 >= 0x41 && __s1)
      MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
    if (v26 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  return v11;
}

void sub_1C4E87A04(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const llvm::DominatorTree *a5@<X4>, uint64_t a6@<X8>)
{
  char v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  size_t v18;
  size_t v19;
  unsigned __int8 v20[8];
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  __int16 v26;
  void *__src;
  unsigned int v28;
  void *v29;
  unsigned int v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  sub_1C4E91E10((uint64_t)&v26, a1, a2, a3, a4, a5);
  if (!v31)
  {
    sub_1C4E89BEC(a1);
    sub_1C4E91E10((uint64_t)v20, a1, a2, a3, a4, a5);
    sub_1C4E94288((uint64_t)&v26, v20);
    if (v25)
    {
      if ((v20[0] & 0xFE) == 4)
      {
        if (v24 >= 0x41 && v23)
          MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
        if (v22 >= 0x41 && v21)
          MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
      }
    }
  }
  v12 = v26;
  v13 = v26;
  *(_WORD *)a6 = v26;
  if ((v13 - 4) < 2)
  {
    v14 = v28;
    *(_DWORD *)(a6 + 16) = v28;
    if (v14 > 0x40)
    {
      v18 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
      v15 = (void *)operator new[]();
      memcpy(v15, __src, v18);
    }
    else
    {
      v15 = __src;
    }
    *(_QWORD *)(a6 + 8) = v15;
    v16 = v30;
    *(_DWORD *)(a6 + 32) = v30;
    if (v16 > 0x40)
    {
      v19 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
      v17 = (void *)operator new[]();
      memcpy(v17, v29, v19);
    }
    else
    {
      v17 = v29;
    }
    *(_QWORD *)(a6 + 24) = v17;
    v12 = v26;
    *(_WORD *)a6 = v26 & 0xFF00 | v13;
  }
  else if ((v13 - 2) < 2)
  {
    *(_QWORD *)(a6 + 8) = __src;
  }
  if (v31 && (v12 & 0xFE) == 4)
  {
    if (v30 >= 0x41 && v29)
      MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    if (v28 >= 0x41)
    {
      if (__src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    }
  }
}

uint64_t llvm::LazyValueInfo::getPredicateOnEdge(llvm::LazyValueInfo *this, uint64_t a2, llvm::Value *a3, llvm::Constant *a4, llvm::BasicBlock *a5, llvm::BasicBlock *a6, llvm::Instruction *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(*((_QWORD *)a5 + 7) + 40);
  sub_1C4E869F0((uint64_t *)this + 3, *(_QWORD *)this, v14);
  sub_1C4E87A04(v15, (uint64_t)a3, (uint64_t)a5, (uint64_t)a6, a7, (uint64_t)&v18);
  v16 = sub_1C4E87DC0(a2, (uint64_t)a4, (uint64_t)&v18, (llvm::DataLayout *)(v14 + 272), *((_QWORD *)this + 2));
  if ((v18 & 0xFE) == 4)
  {
    if (v22 >= 0x41 && v21)
      MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
    if (v20 >= 0x41 && v19)
      MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  }
  return v16;
}

uint64_t sub_1C4E87DC0(uint64_t a1, uint64_t a2, uint64_t a3, llvm::DataLayout *a4, uint64_t a5)
{
  int v6;
  llvm::UndefValue *v7;
  BOOL v8;
  llvm::UndefValue *v9;
  llvm::APInt *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  const void **v14;
  const llvm::APInt *v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  llvm::UndefValue *v23;
  int v24;
  llvm::UndefValue *v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  void *v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  int v33;
  _BOOL4 v34;
  size_t v36;
  void *v37;
  const void *v38;
  size_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  void *__s2;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;

  v6 = *(_WORD *)a3;
  if (v6 != 2)
  {
    if ((*(_WORD *)a3 & 0xFE) == 4)
    {
      v13 = 0xFFFFFFFFLL;
      if (!a2 || *(_BYTE *)(a2 + 16) != 16)
        return v13;
      v14 = (const void **)(a3 + 8);
      v15 = (const llvm::APInt *)(a2 + 24);
      if ((_DWORD)a1 != 33)
      {
        if ((_DWORD)a1 != 32)
        {
          llvm::ConstantRange::makeExactICmpRegion(&__s2, a1, v15);
          if (llvm::ConstantRange::contains((llvm::ConstantRange *)&__s2, (const llvm::ConstantRange *)(a3 + 8)))
          {
            v33 = 0;
            v13 = 1;
          }
          else
          {
            llvm::ConstantRange::inverse((llvm::ConstantRange *)&__s2, (uint64_t)&v42);
            v34 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v42, (const llvm::ConstantRange *)(a3 + 8));
            if (v45 >= 0x41 && v44)
              MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
            if (v43 >= 0x41 && v42)
              MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
            v13 = 0;
            v33 = !v34;
          }
          if (v49 >= 0x41 && v48)
            MEMORY[0x1CAA32F9C](v48, 0x1000C8000313F17);
          if (v47 >= 0x41 && __s2)
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
          if (v33)
            return 0xFFFFFFFFLL;
          return v13;
        }
        if (llvm::ConstantRange::contains((llvm::ConstantRange *)(a3 + 8), v15))
        {
          v16 = *(unsigned int *)(a3 + 16);
          v47 = v16;
          if (v16 > 0x40)
          {
            v36 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
            v37 = (void *)operator new[]();
            v38 = *v14;
            v17 = v37;
            memcpy(v37, v38, v36);
          }
          else
          {
            v17 = (void *)*v14;
          }
          __s2 = v17;
          llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
          v18 = v47;
          v19 = __s2;
          v47 = 0;
          v20 = *(unsigned int *)(a3 + 32);
          if (v20 > 0x40)
            v21 = memcmp(*(const void **)(a3 + 24), __s2, ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8) == 0;
          else
            v21 = *(_QWORD *)(a3 + 24) == (_QWORD)__s2;
          v22 = v21;
          if (v18 >= 0x41)
          {
            if (v19)
            {
              MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
              if (v47 >= 0x41)
              {
                if (__s2)
                  MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
              }
            }
          }
          if ((v22 & 1) == 0)
            return 0xFFFFFFFFLL;
          return 1;
        }
        return 0;
      }
      if (llvm::ConstantRange::contains((llvm::ConstantRange *)(a3 + 8), v15))
      {
        v26 = *(unsigned int *)(a3 + 16);
        v47 = v26;
        if (v26 > 0x40)
        {
          v39 = ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8;
          v40 = (void *)operator new[]();
          v41 = *v14;
          v27 = v40;
          memcpy(v40, v41, v39);
        }
        else
        {
          v27 = (void *)*v14;
        }
        __s2 = v27;
        llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
        v28 = v47;
        v29 = __s2;
        v47 = 0;
        v30 = *(unsigned int *)(a3 + 32);
        if (v30 > 0x40)
          v31 = memcmp(*(const void **)(a3 + 24), __s2, ((unint64_t)(v30 + 63) >> 3) & 0x3FFFFFF8) == 0;
        else
          v31 = *(_QWORD *)(a3 + 24) == (_QWORD)__s2;
        v32 = v31;
        if (v28 >= 0x41)
        {
          if (v29)
          {
            MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
            if (v47 >= 0x41)
            {
              if (__s2)
                MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
            }
          }
        }
        if ((v32 & 1) == 0)
          return 0xFFFFFFFFLL;
        return 0;
      }
      return 1;
    }
    if (v6 == 3)
    {
      if ((_DWORD)a1 == 33)
      {
        v25 = llvm::ConstantFoldCompareInstOperands(a1, *(_QWORD *)(a3 + 8), a2, a4, a5);
        if ((llvm::Constant::isNullValue(v25) & 1) != 0)
          return 1;
      }
      else if ((_DWORD)a1 == 32)
      {
        v23 = llvm::ConstantFoldCompareInstOperands(33, *(_QWORD *)(a3 + 8), a2, a4, a5);
        if ((llvm::Constant::isNullValue(v23) & 1) != 0)
          return 0;
      }
    }
    return 0xFFFFFFFFLL;
  }
  v7 = llvm::ConstantFoldCompareInstOperands(a1, *(_QWORD *)(a3 + 8), a2, a4, a5);
  if (v7)
    v8 = *((_BYTE *)v7 + 16) == 16;
  else
    v8 = 0;
  if (!v8)
    return 0xFFFFFFFFLL;
  v9 = v7;
  v10 = (llvm::UndefValue *)((char *)v7 + 24);
  v11 = *((_DWORD *)v9 + 8);
  if (v11 > 0x40)
    v12 = llvm::APInt::countLeadingZerosSlowCase(v10) == v11;
  else
    v12 = *(_QWORD *)v10 == 0;
  v24 = v12;
  return v24 ^ 1u;
}

uint64_t llvm::LazyValueInfo::getPredicateAt(llvm::LazyValueInfo *this, uint64_t a2, llvm::Value *a3, llvm::Constant *a4, llvm::Instruction *a5, int a6)
{
  uint64_t v12;
  llvm::DataLayout *v13;
  llvm::Value *v14;
  llvm::Value *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  llvm::BasicBlock *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  llvm::Value *v31;
  unsigned int PredicateOnEdge;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  BOOL v37;
  __int16 v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Value *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a5 + 5) + 56) + 40);
  v13 = (llvm::DataLayout *)(v12 + 272);
  if (*(_BYTE *)(*(_QWORD *)a3 + 8) == 15 && llvm::Constant::isNullValue(a4))
  {
    v14 = llvm::Value::stripPointerCastsSameRepresentation(a3);
    if (!v14 || *((unsigned __int8 *)v14 + 16) < 0x1Cu || (v15 = v14, !*((_QWORD *)v14 + 5)))
      v15 = 0;
    v44 = v12 + 272;
    v45 = 0;
    v47 = 0;
    v48 = 0;
    v46 = v15;
    v49 = 1;
    if (sub_1C4F84D74((uint64_t)v14, 0, (uint64_t)&v44))
    {
      if ((_DWORD)a2 == 32)
        return 0;
      if ((_DWORD)a2 == 33)
        return 1;
    }
  }
  sub_1C4E869F0((uint64_t *)this + 3, *(_QWORD *)this, v12);
  v18 = v17;
  if (a6)
  {
    sub_1C4E871E0(v17, (uint64_t)a3, *((_QWORD *)a5 + 5), a5, (uint64_t)&v39);
  }
  else
  {
    v19 = *((unsigned __int8 *)a3 + 16);
    if (v19 <= 0x14)
    {
      v39 = 0;
      if (v19 - 11 > 1)
        sub_1C4E8C21C((uint64_t)&v39, (uint64_t)a3, 0);
      else
        v39 = 1;
    }
    else
    {
      v39 = 6;
      if (v19 >= 0x1C)
      {
        sub_1C4E91C38((__int16 *)&v44, (uint64_t)a3);
        if ((v39 & 0xFE) == 4)
        {
          if (v43 >= 0x41 && v42)
            MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
          if (v41 >= 0x41 && v40)
            MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
        }
        v39 = v44;
        if (v44 - 2 < 2)
        {
          v40 = v45;
        }
        else if (v44 - 4 <= 1)
        {
          v41 = v46;
          v40 = v45;
          LODWORD(v46) = 0;
          v43 = v48;
          v42 = v47;
          v39 = v44;
        }
      }
      sub_1C4E8B92C(v18, (uint64_t)a3, (uint64_t)&v39, a5);
    }
  }
  v16 = sub_1C4E87DC0(a2, (uint64_t)a4, (uint64_t)&v39, v13, *((_QWORD *)this + 2));
  if ((_DWORD)v16 == -1)
  {
    v20 = (llvm::BasicBlock *)*((_QWORD *)a5 + 5);
    v21 = *((_QWORD *)v20 + 1);
    if (!v21)
    {
LABEL_67:
      v16 = 0xFFFFFFFFLL;
      goto LABEL_68;
    }
    while (1)
    {
      v22 = *(_QWORD *)(v21 + 24);
      v23 = *(unsigned __int8 *)(v22 + 16);
      v24 = v22 && v23 >= 0x1C;
      if (v24 && v23 - 29 < 0xB)
        break;
      v21 = *(_QWORD *)(v21 + 8);
      if (!v21)
        goto LABEL_67;
    }
    v26 = *((unsigned __int8 *)a3 + 16);
    if (v26 == 83)
    {
      if (*((llvm::BasicBlock **)a3 + 5) != v20)
        goto LABEL_56;
      v27 = *((_DWORD *)a3 + 5);
      v28 = v27 & 0x7FFFFFF;
      if ((v27 & 0x7FFFFFF) == 0)
        goto LABEL_56;
      v29 = 0;
      LODWORD(v16) = -1;
      while (1)
      {
        v30 = *((_DWORD *)a3 + 5);
        v31 = (v30 & 0x40000000) != 0
            ? (llvm::Value *)*((_QWORD *)a3 - 1)
            : (llvm::Value *)((char *)a3 - 32 * (v30 & 0x7FFFFFF));
        PredicateOnEdge = llvm::LazyValueInfo::getPredicateOnEdge(this, a2, *((llvm::Value **)v31 + 4 * v29), a4, *((llvm::BasicBlock **)v31 + 4 * *((unsigned int *)a3 + 15) + v29), v20, a5);
        v33 = (_DWORD)v16 == PredicateOnEdge ? v16 : -1;
        v16 = v29 ? v33 : PredicateOnEdge;
        if ((_DWORD)v16 == -1)
          break;
        if (++v29 == v28)
          goto LABEL_68;
      }
      v26 = *((unsigned __int8 *)a3 + 16);
    }
    if (v26 < 0x1C)
      goto LABEL_57;
LABEL_56:
    if (*((llvm::BasicBlock **)a3 + 5) != v20)
    {
LABEL_57:
      v16 = llvm::LazyValueInfo::getPredicateOnEdge(this, a2, a3, a4, *(llvm::BasicBlock **)(*(_QWORD *)(v21 + 24) + 40), v20, a5);
      if ((_DWORD)v16 != -1)
      {
        while (1)
        {
          v21 = *(_QWORD *)(v21 + 8);
          if (!v21)
            break;
          v34 = *(_QWORD *)(v21 + 24);
          v35 = *(unsigned __int8 *)(v34 + 16);
          if (v34)
            v36 = v35 >= 0x1C;
          else
            v36 = 0;
          v37 = !v36 || v35 - 29 > 0xA;
          if (!v37
            && llvm::LazyValueInfo::getPredicateOnEdge(this, a2, a3, a4, *(llvm::BasicBlock **)(v34 + 40), v20, a5) != (_DWORD)v16)
          {
            goto LABEL_67;
          }
        }
      }
      goto LABEL_68;
    }
    goto LABEL_67;
  }
LABEL_68:
  if ((v39 & 0xFE) == 4)
  {
    if (v43 >= 0x41 && v42)
      MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
    if (v41 >= 0x41 && v40)
      MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
  }
  return v16;
}

uint64_t llvm::LazyValueInfo::getPredicateAt(llvm::LazyValueInfo *this, uint64_t a2, llvm::Value *a3, llvm::Value *a4, llvm::Instruction *a5, int a6)
{
  llvm::Value *v6;

  v6 = a3;
  if (a4 && *((unsigned __int8 *)a4 + 16) <= 0x14u)
    return llvm::LazyValueInfo::getPredicateAt(this, a2, a3, a4, a5, a6);
  if (a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    a2 = dword_1C85F3E20[(int)a2];
    a3 = a4;
    a4 = v6;
    return llvm::LazyValueInfo::getPredicateAt(this, a2, a3, a4, a5, a6);
  }
  return 0xFFFFFFFFLL;
}

void llvm::LazyValueInfo::threadEdge(llvm::LazyValueInfo *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  llvm::BasicBlock *v23;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  char *__src;
  llvm::BasicBlock *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _QWORD v68[5];

  v68[4] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 3);
  v5 = (uint64_t *)((char *)this + 24);
  if (!v6)
    return;
  sub_1C4E869F0(v5, *(_QWORD *)this, *(_QWORD *)(*((_QWORD *)a2 + 7) + 40));
  v10 = v9;
  v11 = (char *)operator new(8uLL);
  *(_QWORD *)v11 = a3;
  v12 = v11 + 8;
  v66 = 0;
  if (sub_1C49F21C0(*(_QWORD *)v10, *(_DWORD *)(v10 + 16), (uint64_t)a3, &v66))
    v13 = v66 == (void *)(*(_QWORD *)v10 + 16 * *(unsigned int *)(v10 + 16));
  else
    v13 = 1;
  if (v13 || (v14 = *((_QWORD *)v66 + 1)) == 0 || (v15 = *(_DWORD *)(v14 + 200), v15 < 2))
  {
LABEL_8:
    operator delete(v11);
    return;
  }
  v17 = (uint64_t *)sub_1C619D0D0((int *)(v14 + 200));
  if ((v15 & 1) != 0)
  {
    v18 = v14 + 208;
    v19 = 4;
  }
  else
  {
    v18 = *(_QWORD *)(v14 + 208);
    v19 = *(unsigned int *)(v14 + 216);
  }
  v66 = v68;
  v67 = 0x400000000;
  sub_1C619D148((unsigned int *)&v66, v17, v16, (uint64_t *)(v18 + 8 * v19));
  v20 = v11 + 8;
  v21 = v11 + 8;
  v64 = a4;
  do
  {
    v23 = (llvm::BasicBlock *)*((_QWORD *)v21 - 1);
    v21 -= 8;
    v22 = (uint64_t)v23;
    if (v23 != a4)
    {
      v65 = 0;
      if (sub_1C49F21C0(*(_QWORD *)v10, *(_DWORD *)(v10 + 16), v22, &v65)
        && v65 != *(_QWORD *)v10 + 16 * *(unsigned int *)(v10 + 16))
      {
        v25 = *(_QWORD *)(v65 + 8);
        v27 = *(_DWORD *)(v25 + 200);
        v26 = v25 + 200;
        if (v27 >= 2)
        {
          if ((_DWORD)v67)
          {
            v28 = 0;
            v29 = (uint64_t *)v66;
            v30 = 8 * v67;
            do
            {
              v31 = *v29++;
              v28 |= sub_1C4E89144(v26, v31);
              v30 -= 8;
            }
            while (v30);
            a4 = v64;
            if ((v28 & 1) != 0)
            {
              v32 = *(_QWORD *)(v22 + 40);
              if (v32 != v22 + 40)
              {
                v33 = v32 - 24;
                if (v32)
                  v34 = v32 - 24;
                else
                  v34 = 0;
                v35 = *(unsigned __int8 *)(v34 + 16);
                v36 = v35 - 29;
                if (v35 != 30)
                {
                  v37 = 2;
                  switch(v36)
                  {
                    case 1:
                      __break(1u);
                      break;
                    case 2:
                      v37 = (*(_DWORD *)(v34 + 20) >> 1) & 0x3FFFFFF;
                      goto LABEL_32;
                    case 3:
                    case 9:
                      v37 = (*(_DWORD *)(v34 + 20) & 0x7FFFFFF) - 1;
                      goto LABEL_32;
                    case 4:
                      goto LABEL_33;
                    case 7:
                      v37 = *(_WORD *)(v34 + 18) & 1;
                      goto LABEL_32;
                    case 8:
                      v37 = 1;
                      goto LABEL_33;
                    case 10:
                      v37 = *(_DWORD *)(v34 + 80) + 1;
                      goto LABEL_32;
                    default:
                      goto LABEL_73;
                  }
                  return;
                }
                v37 = (*(_DWORD *)(v34 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
LABEL_32:
                if ((int)v37 >= 1)
                {
LABEL_33:
                  v38 = v21 - v11;
                  v39 = v37;
                  v40 = &v11[(v21 - v11) & 0xFFFFFFFFFFFFFFF8];
                  if (v37 > (v12 - v21) >> 3)
                  {
                    v41 = v38 >> 3;
                    v42 = (v38 >> 3) + v37;
                    if (v42 >> 61)
                      abort();
                    if ((v12 - v11) >> 2 > v42)
                      v42 = (v12 - v11) >> 2;
                    v43 = 0x1FFFFFFFFFFFFFFFLL;
                    if ((unint64_t)(v12 - v11) < 0x7FFFFFFFFFFFFFF8)
                      v43 = v42;
                    v61 = v43;
                    __src = &v11[(v21 - v11) & 0xFFFFFFFFFFFFFFF8];
                    if (v43)
                    {
                      if (v43 >> 61)
                        sub_1C4764EE4();
                      v44 = (char *)operator new(8 * v43);
                    }
                    else
                    {
                      v44 = 0;
                    }
                    v49 = 0;
                    v50 = &v44[8 * v41];
                    v60 = &v50[8 * v39];
                    v51 = 8 * v39;
                    do
                    {
                      *(_QWORD *)&v50[8 * v49] = llvm::Instruction::getSuccessor((llvm::Instruction *)v34, v49);
                      ++v49;
                      v51 -= 8;
                    }
                    while (v51);
                    if ((unint64_t)(v21 - v11) >= 8)
                    {
                      v52 = 8 * v41;
                      do
                      {
                        *(_QWORD *)&v44[v52 - 8] = *(_QWORD *)&v11[v52 - 8];
                        v52 -= 8;
                      }
                      while (v52);
                      v50 = v44;
                    }
                    if (v21 != __src)
                      memmove(v60, __src, v21 - __src);
                    v12 = &v44[8 * v61];
                    v21 = &v60[v21 - __src];
                    if (v11)
                      operator delete(v11);
                    v11 = v50;
                    goto LABEL_72;
                  }
                  v45 = v21 - v40;
                  v46 = (v21 - v40) >> 3;
                  if (v46 < v39)
                  {
                    v62 = v21 - v40;
                    v47 = v45 >> 3;
                    if ((_DWORD)v39 == (v45 >> 3))
                    {
                      v53 = v21;
                    }
                    else
                    {
                      v53 = v20 - 8;
                      v54 = v21;
                      do
                      {
                        *(_QWORD *)v54 = llvm::Instruction::getSuccessor((llvm::Instruction *)v34, v47);
                        v54 += 8;
                        LODWORD(v47) = v47 + 1;
                        v53 += 8;
                      }
                      while ((_DWORD)v39 != (_DWORD)v47);
                    }
                    v48 = v53;
                    if (v62 < 1)
                    {
                      v21 = v53;
LABEL_72:
                      a4 = v64;
                      goto LABEL_73;
                    }
                    v40 = &v11[(v21 - v11) & 0xFFFFFFFFFFFFFFF8];
                  }
                  else
                  {
                    v34 = v33;
                    v48 = v21;
                    LODWORD(v46) = v39;
                  }
                  v55 = &v48[-8 * v39];
                  v56 = v48;
                  while (v55 < v21)
                  {
                    v57 = *(_QWORD *)v55;
                    v55 += 8;
                    *(_QWORD *)v56 = v57;
                    v56 += 8;
                  }
                  v58 = &v40[8 * v39];
                  if (v48 != v58)
                    memmove(&v48[-8 * ((v48 - v58) >> 3)], v40, v48 - v58);
                  if ((_DWORD)v46)
                  {
                    v59 = 0;
                    do
                    {
                      *(_QWORD *)&v40[8 * v59] = llvm::Instruction::getSuccessor((llvm::Instruction *)v34, v59);
                      ++v59;
                    }
                    while ((_DWORD)v46 != (_DWORD)v59);
                  }
                  v21 = v56;
                  goto LABEL_72;
                }
              }
            }
          }
        }
      }
    }
LABEL_73:
    v20 = v21;
  }
  while (v11 != v21);
  if (v66 != v68)
    free(v66);
  if (v11)
    goto LABEL_8;
}

int32x2_t llvm::LazyValueInfo::eraseBlock(llvm::LazyValueInfo *this, llvm::BasicBlock *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  int32x2_t *v7;
  int32x2_t result;
  _QWORD *v9;
  llvm::BasicBlock *v10;
  _QWORD *v11;

  v4 = *((_QWORD *)this + 3);
  v3 = (uint64_t *)((char *)this + 24);
  if (v4)
  {
    sub_1C4E869F0(v3, *(_QWORD *)this, *(_QWORD *)(*((_QWORD *)a2 + 7) + 40));
    v7 = (int32x2_t *)v6;
    v10 = a2;
    v11 = 0;
    if (sub_1C4E90754(v6, &v10, &v11))
    {
      v9 = v11;
      sub_1C4E89280(v11 + 1);
      *v9 = -8192;
      result = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
      v7[1] = result;
    }
  }
  return result;
}

uint64_t *llvm::LazyValueInfo::clear(llvm::LazyValueInfo *this, const llvm::Module *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)this + 3);
  result = (uint64_t *)((char *)this + 24);
  if (v4)
  {
    sub_1C4E869F0(result, *(_QWORD *)this, (uint64_t)a2);
    return (uint64_t *)sub_1C4E86AA0(v5);
  }
  return result;
}

void llvm::initializeLazyValueInfoPrinterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82DF68);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E88C68;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82DF68, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E88C68(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a1;
  v2 = atomic_load(&qword_1ED82DF60);
  if (v2 != -1)
  {
    v7[0] = sub_1C4E866D8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82DF60, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  v3 = operator new();
  *(_QWORD *)v3 = "Lazy Value Info Printer Pass";
  *(_QWORD *)(v3 + 8) = 28;
  *(_QWORD *)(v3 + 16) = "print-lazy-value-info";
  *(_QWORD *)(v3 + 24) = 21;
  *(_QWORD *)(v3 + 32) = &unk_1EF8EFBF1;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C4E94A94;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v3, 1);
  return v3;
}

int32x2_t sub_1C4E88D48(uint64_t a1)
{
  uint64_t v1;
  int32x2_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  int32x2_t result;
  uint64_t v20;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  int32x2_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(int32x2_t **)(a1 + 32);
  v3 = v2[2].u32[0];
  v4 = *(_QWORD *)v2 + 16 * v3;
  if (v2[1].i32[0])
  {
    if ((_DWORD)v3)
    {
      v5 = 16 * v3;
      v6 = (_QWORD *)*v2;
      while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 2;
        v5 -= 16;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = (_QWORD *)*v2;
    }
  }
  else
  {
LABEL_6:
    v6 = (_QWORD *)(*(_QWORD *)v2 + 16 * v3);
  }
  v7 = *(_QWORD *)v2 + 16 * v3;
  while (v6 != (_QWORD *)v7)
  {
    v8 = (_DWORD *)v6[1];
    v34 = 0;
    if (sub_1C4E8909C((uint64_t)v8, v1, &v34))
    {
      v12 = v34;
      if ((*(_WORD *)(v34 + 8) & 0xFE) == 4)
      {
        if (*(_DWORD *)(v34 + 40) >= 0x41u)
        {
          v14 = *(_QWORD *)(v34 + 32);
          if (v14)
            MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
        }
        if (*(_DWORD *)(v12 + 24) >= 0x41u)
        {
          v15 = *(_QWORD *)(v12 + 16);
          if (v15)
            MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
        }
      }
      *(_QWORD *)v12 = -8192;
      v13 = v8[1] + 1;
      *v8 -= 2;
      v8[1] = v13;
    }
    sub_1C4E89144(v6[1] + 200, v1);
    v9 = v6[1];
    if (*(_BYTE *)(v9 + 264))
    {
      v34 = 0;
      if (sub_1C4E891D4(v9 + 240, v1, &v34))
      {
        *(_QWORD *)v34 = -8192;
        v10 = *(_DWORD *)(v9 + 244) + 1;
        *(_DWORD *)(v9 + 240) -= 2;
        *(_DWORD *)(v9 + 244) = v10;
      }
    }
    v11 = v6 + 2;
    v6 = (_QWORD *)v4;
    if (v11 != (_QWORD *)v4)
    {
      v6 = v11;
      while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 2;
        if (v6 == (_QWORD *)v4)
        {
          v6 = (_QWORD *)v4;
          break;
        }
      }
    }
  }
  v16 = (uint64_t)v2[3];
  v17 = v2[5].u32[0];
  v18 = (_QWORD *)sub_1C4E89038(v16, v17, v1);
  if ((_QWORD *)(v16 + 40 * v17) != v18)
  {
    v20 = v18[3];
    if (v20 != -8192)
    {
      if (v20 != -4096 && v20 != 0)
      {
        v22 = v18[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v22 = v18[2];
        v23 = (unint64_t *)v18[2];
        if (v23)
        {
          *v23 = *v23 & 7 | v22;
        }
        else
        {
          v24 = v18[3];
          v25 = ***(int32x2_t ****)v24;
          v26 = (unint64_t)v25[303];
          if (v26 <= v22)
          {
            v27 = v25[305].u32[0];
            if (v26 + 16 * v27 > v22)
            {
              v28 = v27 - 1;
              LODWORD(v29) = v28 & ((v24 >> 4) ^ (v24 >> 9));
              v30 = (uint64_t *)(v26 + 16 * v29);
              v31 = *v30;
              if (v24 == *v30)
              {
LABEL_46:
                *v30 = -8192;
                v25[304] = vadd_s32(v25[304], (int32x2_t)0x1FFFFFFFFLL);
                v24 = v18[3];
              }
              else
              {
                v32 = 1;
                while (v31 != -4096)
                {
                  v33 = v29 + v32++;
                  v29 = v33 & v28;
                  v31 = *(_QWORD *)(v26 + 16 * v29);
                  if (v24 == v31)
                  {
                    v30 = (uint64_t *)(v26 + 16 * v29);
                    goto LABEL_46;
                  }
                }
              }
              *(_BYTE *)(v24 + 17) &= ~1u;
            }
          }
        }
      }
      v18[3] = -8192;
    }
    v18[4] = 0;
    result = vadd_s32(v2[4], (int32x2_t)0x1FFFFFFFFLL);
    v2[4] = result;
  }
  return result;
}

uint64_t sub_1C4E89038(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  if (!a2)
    return a1 + 40 * a2;
  v3 = a2 - 1;
  v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  v5 = a1 + 40 * v4;
  v6 = *(_QWORD *)(v5 + 24);
  if (v6 != a3)
  {
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & v3;
      v5 = a1 + 40 * (v8 & v3);
      v6 = *(_QWORD *)(v5 + 24);
      if (v6 == a3)
        return v5;
    }
    return a1 + 40 * a2;
  }
  return v5;
}

uint64_t sub_1C4E8909C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 48 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 48 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4E89144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v2 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v3 = 4;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
      return 0;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v4 = v3 - 1;
  LODWORD(v5) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = (uint64_t *)(v2 + 8 * v5);
  v7 = *v6;
  if (*v6 == a2)
  {
LABEL_10:
    *v6 = -8192;
    v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  v8 = 1;
  while (v7 != -4096)
  {
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v7 = *(_QWORD *)(v2 + 8 * v5);
    if (v7 == a2)
    {
      v6 = (uint64_t *)(v2 + 8 * v5);
      goto LABEL_10;
    }
  }
  return 0;
}

uint64_t sub_1C4E891D4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t *sub_1C4E89280(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 264))
    {
      if ((*(_BYTE *)(v2 + 240) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 248), 8);
      *(_BYTE *)(v2 + 264) = 0;
    }
    if ((*(_BYTE *)(v2 + 200) & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)(v2 + 208), 8);
    v3 = sub_1C4E89304(v2);
    MEMORY[0x1CAA32FC0](v3, 0x1000C40F44D7D81);
  }
  return a1;
}

uint64_t sub_1C4E89304(uint64_t a1)
{
  sub_1C4E89340(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

uint64_t sub_1C4E89340(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)result & 1) != 0)
  {
    v1 = result + 8;
    v2 = 4;
  }
  else
  {
    v2 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v2)
      return result;
    v1 = *(_QWORD *)(result + 8);
  }
  v3 = 48 * v2;
  v4 = v1 + 24;
  do
  {
    v5 = *(_QWORD *)(v4 - 24);
    if (v5 != -4096 && v5 != -8192 && (*(_WORD *)(v4 - 16) & 0xFE) == 4)
    {
      if (*(_DWORD *)(v4 + 16) >= 0x41u)
      {
        result = *(_QWORD *)(v4 + 8);
        if (result)
          result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      }
      if (*(_DWORD *)v4 >= 0x41u)
      {
        result = *(_QWORD *)(v4 - 8);
        if (result)
          result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      }
    }
    v4 += 48;
    v3 -= 48;
  }
  while (v3);
  return result;
}

uint64_t sub_1C4E89410(uint64_t result)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;

  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD **)result;
    v3 = *(_QWORD *)result + 40 * v1;
    do
    {
      v4 = v2[3];
      if (v4 != -8192 && v4 != -4096 && v4 != 0)
      {
        v6 = v2[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v6 = v2[2];
        v7 = (unint64_t *)v2[2];
        if (v7)
        {
          *v7 = *v7 & 7 | v6;
        }
        else
        {
          v8 = v2[3];
          v9 = ***(int32x2_t ****)v8;
          v10 = (unint64_t)v9[303];
          if (v10 <= v6)
          {
            v11 = v9[305].u32[0];
            if (v10 + 16 * v11 > v6)
            {
              v12 = v11 - 1;
              LODWORD(v13) = v12 & ((v8 >> 4) ^ (v8 >> 9));
              v14 = (uint64_t *)(v10 + 16 * v13);
              v15 = *v14;
              if (v8 == *v14)
              {
LABEL_19:
                *v14 = -8192;
                v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
                v8 = v2[3];
              }
              else
              {
                v16 = 1;
                while (v15 != -4096)
                {
                  v17 = v13 + v16++;
                  v13 = v17 & v12;
                  v15 = *(_QWORD *)(v10 + 16 * v13);
                  if (v8 == v15)
                  {
                    v14 = (uint64_t *)(v10 + 16 * v13);
                    goto LABEL_19;
                  }
                }
              }
              *(_BYTE *)(v8 + 17) &= ~1u;
            }
          }
        }
      }
      v2 += 5;
    }
    while (v2 != (_QWORD *)v3);
  }
  return result;
}

void sub_1C4E89520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const llvm::DominatorTree *a5)
{
  unsigned int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  __int16 v25;
  int *v26;
  int v27;
  int v28;
  int *v29;
  int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  __int16 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v52;
  int v53;
  BOOL v54;
  unsigned int v56;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v75;
  int v76;
  BOOL v77;
  unsigned int v79;
  int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  int v92;
  BOOL v93;
  unsigned int v95;
  size_t v97;
  uint64_t *v98;
  void *v99;
  size_t v100;
  uint64_t *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v10 = *(unsigned __int8 *)(a3 + 16);
    if (v10 <= 0x14)
    {
      LOWORD(v103) = 0;
      if (v10 - 11 <= 1)
      {
        v11 = 1;
LABEL_62:
        *(_WORD *)a1 = v11;
        goto LABEL_63;
      }
      sub_1C4E8C21C((uint64_t)&v103, a3, 0);
      v11 = v103;
      v19 = v103;
      *(_WORD *)a1 = v103;
      if ((v19 - 2) < 2)
      {
        *(_QWORD *)(a1 + 8) = v104;
      }
      else if ((v19 - 4) <= 1)
      {
        *(_DWORD *)(a1 + 16) = v105;
        *(_QWORD *)(a1 + 8) = v104;
        *(_DWORD *)(a1 + 32) = v107;
        *(_QWORD *)(a1 + 24) = v106;
        goto LABEL_62;
      }
LABEL_63:
      *(_BYTE *)(a1 + 40) = 1;
      return;
    }
  }
  v103 = 0;
  if (sub_1C49F21C0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a4, &v103))
  {
    v12 = v103;
    v13 = *(_QWORD *)a2;
    v14 = *(unsigned int *)(a2 + 16);
  }
  else
  {
    v13 = *(_QWORD *)a2;
    v14 = *(unsigned int *)(a2 + 16);
    v12 = *(_QWORD *)a2 + 16 * v14;
  }
  v15 = a3 >> 4;
  if (v12 == v13 + 16 * v14)
    goto LABEL_40;
  v16 = *(int **)(v12 + 8);
  if (!v16)
    goto LABEL_40;
  if ((v16[50] & 1) != 0)
  {
    v17 = v16 + 52;
    v18 = 4;
  }
  else
  {
    v18 = v16[54];
    if (!v18)
      goto LABEL_23;
    v17 = (int *)*((_QWORD *)v16 + 26);
  }
  v20 = v18 - 1;
  v21 = v20 & (v15 ^ (a3 >> 9));
  v22 = *(_QWORD *)&v17[2 * v21];
  if (v22 == a3)
  {
LABEL_22:
    v25 = 6;
    goto LABEL_80;
  }
  v23 = 1;
  while (v22 != -4096)
  {
    v24 = v21 + v23++;
    v21 = v24 & v20;
    v22 = *(_QWORD *)&v17[2 * v21];
    if (v22 == a3)
      goto LABEL_22;
  }
LABEL_23:
  v26 = v16 + 2;
  v27 = *v16;
  if ((*v16 & 1) != 0)
  {
    v28 = 4;
    v29 = v16 + 2;
  }
  else
  {
    v29 = (int *)*((_QWORD *)v16 + 1);
    v28 = v16[4];
    if (!v28)
    {
      v36 = 0;
      goto LABEL_32;
    }
  }
  v30 = v28 - 1;
  v31 = (v28 - 1) & (v15 ^ (a3 >> 9));
  v32 = (uint64_t *)&v29[12 * v31];
  v33 = *v32;
  if (*v32 == a3)
    goto LABEL_33;
  v34 = 1;
  while (v33 != -4096)
  {
    v35 = v31 + v34++;
    v31 = v35 & v30;
    v32 = (uint64_t *)&v29[12 * (v35 & v30)];
    v33 = *v32;
    if (*v32 == a3)
      goto LABEL_33;
  }
  if ((v27 & 1) != 0)
  {
    v36 = 4;
    v29 = v16 + 2;
  }
  else
  {
    v29 = (int *)*((_QWORD *)v16 + 1);
    v36 = v16[4];
  }
LABEL_32:
  v32 = (uint64_t *)&v29[12 * v36];
LABEL_33:
  if ((v27 & 1) != 0)
  {
    v37 = 4;
  }
  else
  {
    v26 = (int *)*((_QWORD *)v16 + 1);
    v37 = v16[4];
  }
  if (&v26[12 * v37] != (int *)v32)
  {
    v38 = *((unsigned __int8 *)v32 + 8);
    *(_WORD *)a1 = v38;
    v39 = *((unsigned __int8 *)v32 + 8);
    if ((v39 - 4) >= 2)
    {
      if ((v39 - 2) < 2)
        *(_QWORD *)(a1 + 8) = v32[2];
      goto LABEL_81;
    }
    v62 = *((unsigned int *)v32 + 6);
    *(_DWORD *)(a1 + 16) = v62;
    if (v62 > 0x40)
    {
      v97 = ((unint64_t)(v62 + 63) >> 3) & 0x3FFFFFF8;
      v98 = v32;
      v99 = (void *)operator new[]();
      *(_QWORD *)(a1 + 8) = v99;
      memcpy(v99, (const void *)v98[2], v97);
      v32 = v98;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v32[2];
    }
    v63 = *((unsigned int *)v32 + 10);
    *(_DWORD *)(a1 + 32) = v63;
    if (v63 > 0x40)
    {
      v100 = ((unint64_t)(v63 + 63) >> 3) & 0x3FFFFFF8;
      v101 = v32;
      v102 = (void *)operator new[]();
      *(_QWORD *)(a1 + 24) = v102;
      memcpy(v102, (const void *)v101[4], v100);
      v32 = v101;
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v32[4];
    }
    v25 = v38 | (*((unsigned __int8 *)v32 + 9) << 8);
LABEL_80:
    *(_WORD *)a1 = v25;
LABEL_81:
    *(_BYTE *)(a1 + 40) = 1;
    sub_1C4E8B92C(a2, a3, a1, a5);
    return;
  }
LABEL_40:
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v40 = a2 + 192;
  v41 = *(_QWORD *)(a2 + 192);
  v42 = *(_DWORD *)(a2 + 208);
  v43 = a4 >> 4;
  if (v42)
  {
    v44 = ~((unint64_t)(v15 ^ (a3 >> 9)) << 32)
        + (v15 ^ (a3 >> 9))
        + ((unint64_t)(v43 ^ (a4 >> 9)) << 32);
    v45 = (v44 ^ (v44 >> 22)) + ~((v44 ^ (v44 >> 22)) << 13);
    v46 = (9 * (v45 ^ (v45 >> 8))) ^ ((9 * (v45 ^ (v45 >> 8))) >> 15);
    v47 = (v42 - 1) & (((v46 + ~(v46 << 27)) >> 31) ^ (v46 + ~((_DWORD)v46 << 27)));
    v48 = (uint64_t *)(v41 + 16 * v47);
    v49 = *v48;
    v50 = v48[1];
    if (*v48 == a4 && v50 == a3)
    {
LABEL_61:
      v11 = 6;
      goto LABEL_62;
    }
    v52 = 0;
    v53 = 1;
    while (v49 != -4096 || v50 != -4096)
    {
      if (v52)
        v54 = 0;
      else
        v54 = v50 == -8192;
      if (v54 && v49 == -8192)
        v52 = v48;
      v56 = v47 + v53++;
      v47 = v56 & (v42 - 1);
      v48 = (uint64_t *)(v41 + 16 * v47);
      v49 = *v48;
      v50 = v48[1];
      if (*v48 == a4 && v50 == a3)
        goto LABEL_61;
    }
    if (v52)
      v58 = v52;
    else
      v58 = v48;
  }
  else
  {
    v58 = 0;
  }
  v59 = *(_DWORD *)(a2 + 200);
  if (4 * v59 + 4 >= 3 * v42)
  {
    sub_1C4E90E80(v40, 2 * v42);
    v64 = *(_DWORD *)(a2 + 208);
    if (v64)
    {
      v65 = *(_QWORD *)(a2 + 192);
      v66 = ~((unint64_t)(v15 ^ (a3 >> 9)) << 32)
          + (v15 ^ (a3 >> 9))
          + ((unint64_t)(v43 ^ (a4 >> 9)) << 32);
      v67 = (v66 ^ (v66 >> 22)) + ~((v66 ^ (v66 >> 22)) << 13);
      v68 = (9 * (v67 ^ (v67 >> 8))) ^ ((9 * (v67 ^ (v67 >> 8))) >> 15);
      v69 = ((v68 + ~(v68 << 27)) >> 31) ^ (v68 + ~((_DWORD)v68 << 27));
      v70 = v64 - 1;
      v71 = (v64 - 1) & v69;
      v58 = (uint64_t *)(v65 + 16 * v71);
      v72 = *v58;
      v73 = v58[1];
      if (*v58 == a4 && v73 == a3)
        goto LABEL_69;
      v75 = 0;
      v76 = 1;
      while (v72 != -4096 || v73 != -4096)
      {
        if (v75)
          v77 = 0;
        else
          v77 = v73 == -8192;
        if (v77 && v72 == -8192)
          v75 = v58;
        v79 = v71 + v76++;
        v71 = v79 & v70;
        v58 = (uint64_t *)(v65 + 16 * (v79 & v70));
        v72 = *v58;
        v73 = v58[1];
        if (*v58 == a4 && v73 == a3)
          goto LABEL_69;
      }
      goto LABEL_130;
    }
  }
  else
  {
    if (v42 + ~v59 - *(_DWORD *)(a2 + 204) > v42 >> 3)
      goto LABEL_69;
    sub_1C4E90E80(v40, v42);
    v81 = *(_DWORD *)(a2 + 208);
    if (v81)
    {
      v82 = *(_QWORD *)(a2 + 192);
      v83 = ~((unint64_t)(v15 ^ (a3 >> 9)) << 32)
          + (v15 ^ (a3 >> 9))
          + ((unint64_t)(v43 ^ (a4 >> 9)) << 32);
      v84 = (v83 ^ (v83 >> 22)) + ~((v83 ^ (v83 >> 22)) << 13);
      v85 = (9 * (v84 ^ (v84 >> 8))) ^ ((9 * (v84 ^ (v84 >> 8))) >> 15);
      v86 = ((v85 + ~(v85 << 27)) >> 31) ^ (v85 + ~((_DWORD)v85 << 27));
      v87 = v81 - 1;
      v88 = (v81 - 1) & v86;
      v58 = (uint64_t *)(v82 + 16 * v88);
      v89 = *v58;
      v90 = v58[1];
      if (*v58 == a4 && v90 == a3)
        goto LABEL_69;
      v75 = 0;
      v92 = 1;
      while (v89 != -4096 || v90 != -4096)
      {
        if (v75)
          v93 = 0;
        else
          v93 = v90 == -8192;
        if (v93 && v89 == -8192)
          v75 = v58;
        v95 = v88 + v92++;
        v88 = v95 & v87;
        v58 = (uint64_t *)(v82 + 16 * (v95 & v87));
        v89 = *v58;
        v90 = v58[1];
        if (*v58 == a4 && v90 == a3)
          goto LABEL_69;
      }
LABEL_130:
      if (v75)
        v58 = v75;
      goto LABEL_69;
    }
  }
  v58 = 0;
LABEL_69:
  ++*(_DWORD *)(a2 + 200);
  if (*v58 != -4096 || v58[1] != -4096)
    --*(_DWORD *)(a2 + 204);
  *v58 = a4;
  v58[1] = a3;
  v60 = *(unsigned int *)(a2 + 56);
  if (v60 >= *(_DWORD *)(a2 + 60))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 48, a2 + 64, v60 + 1, 16);
    LODWORD(v60) = *(_DWORD *)(a2 + 56);
  }
  v61 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v60);
  *v61 = a4;
  v61[1] = a3;
  ++*(_DWORD *)(a2 + 56);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 40) = 0;
}

void sub_1C4E89BEC(uint64_t a1)
{
  const void *v2;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t (****v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  int matched;
  void *v37;
  llvm::ConstantPointerNull *v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  llvm::PointerType *v42;
  _QWORD *v43;
  int v44;
  _DWORD *v45;
  int v46;
  uint64_t v47;
  char *v48;
  BOOL v49;
  unsigned __int8 *ValueInst;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  unsigned int v57;
  unint64_t v58;
  int v59;
  unint64_t v61;
  void (*v62)(void);
  int v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  int v82;
  unsigned int v83;
  void (**v85)(void);
  int v86;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  size_t v97;
  const void **v98;
  unint64_t *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int i;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (****v109)();
  _BYTE *v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  void *v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int v120;
  void *__src;
  unsigned int v122;
  void *v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  void *v131;
  uint64_t v132;
  _BYTE v133[128];
  __int16 v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t (***v137)();
  unsigned int v138;
  char v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  void *v145;
  void *v146;
  uint64_t v147;
  uint64_t (***v148)();
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t (***v153)();
  unsigned int v154;
  char v155;
  uint64_t (**v156)();
  uint64_t v157;
  unint64_t v158;
  uint64_t (***v159)();
  unsigned int v160;
  char v161;
  uint64_t v162;

  v162 = *MEMORY[0x1E0C80C00];
  v2 = *(const void **)(a1 + 48);
  v3 = *(unsigned int *)(a1 + 56);
  v4 = v133;
  v131 = v133;
  v132 = 0x800000000;
  if (v3 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v131, (uint64_t)v133, v3, 16);
    v5 = v132;
  }
  else
  {
    if (!(_DWORD)v3)
    {
      v6 = 0;
      goto LABEL_5;
    }
    v5 = 0;
  }
  memcpy((char *)v131 + 16 * v5, v2, 16 * v3);
  v6 = v132;
LABEL_5:
  LODWORD(v132) = v6 + v3;
  v7 = *(_DWORD *)(a1 + 56);
  if (!v7)
    goto LABEL_421;
  v8 = 0;
  v9 = a1 + 192;
  v10 = &v159;
  while (v8 != 500)
  {
    v11 = *(_QWORD *)(a1 + 48) + 16 * v7;
    v12 = *(_QWORD *)(v11 - 16);
    v13 = *(_QWORD *)(v11 - 8);
    v14 = *(unsigned __int8 *)(v13 + 16);
    if (v13)
      v15 = v14 >= 0x1C;
    else
      v15 = 0;
    if (!v15 || *(_QWORD *)(v13 + 40) != v12)
    {
      LOWORD(v150) = 0;
      v16 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 80);
      if (v16)
        v17 = v16 - 24;
      else
        v17 = 0;
      if (v17 == v12)
        goto LABEL_249;
      v18 = *(_QWORD *)(v12 + 8);
      if (v18)
      {
        while (1)
        {
          v19 = *(_QWORD *)(v18 + 24);
          v20 = *(unsigned __int8 *)(v19 + 16);
          v21 = v19 && v20 >= 0x1C;
          v22 = !v21 || v20 - 29 > 0xA;
          if (!v22)
            break;
          v18 = *(_QWORD *)(v18 + 8);
          if (!v18)
            goto LABEL_28;
        }
LABEL_71:
        sub_1C4E91E10((uint64_t)&v156, a1, v13, *(_QWORD *)(v19 + 40), v12, 0);
        if (!v161)
        {
          LOBYTE(v134) = 0;
          v139 = 0;
          goto LABEL_78;
        }
        sub_1C4E8EE28((uint64_t)&v150, (unsigned __int8 *)&v156, 0x100000000);
        if (v150 == 6)
        {
          v134 = 6;
          LOWORD(v150) = v150 & 0xFF00;
          v139 = 1;
          if (v161)
          {
LABEL_200:
            if ((v156 & 0xFE) == 4)
            {
              if (v160 >= 0x41 && v159)
                MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
              if (v158 >= 0x41 && v157)
                MEMORY[0x1CAA32F9C](v157, 0x1000C8000313F17);
            }
          }
          goto LABEL_78;
        }
        if (v161 && (v156 & 0xFE) == 4)
        {
          if (v160 >= 0x41 && v159)
            MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
          if (v158 >= 0x41 && v157)
            MEMORY[0x1CAA32F9C](v157, 0x1000C8000313F17);
        }
        while (1)
        {
          v18 = *(_QWORD *)(v18 + 8);
          if (!v18)
            break;
          v19 = *(_QWORD *)(v18 + 24);
          v33 = *(unsigned __int8 *)(v19 + 16);
          if (v19)
            v34 = v33 >= 0x1C;
          else
            v34 = 0;
          if (v34 && v33 - 29 <= 0xA)
            goto LABEL_71;
        }
        LOWORD(v23) = v150;
        v134 = v150;
        if (v150 - 2 < 2)
        {
          v135 = v151;
        }
        else if (v150 - 4 <= 1)
        {
          v136 = v152;
          v135 = v151;
          v138 = v154;
          v137 = v153;
          LODWORD(v152) = 0;
          v154 = 0;
          v134 = v150;
        }
      }
      else
      {
LABEL_28:
        LOWORD(v23) = 0;
        v134 = 0;
      }
LABEL_29:
      v24 = v23 & 0xFF00;
      LOWORD(v150) = v24;
      v139 = 1;
      goto LABEL_30;
    }
    if (v14 == 85)
    {
      sub_1C4E89520((uint64_t)&v156, a1, *(_QWORD *)(v13 - 64), v12, (const llvm::DominatorTree *)v13);
      if (!v161)
        goto LABEL_140;
      sub_1C4E89520((uint64_t)&v150, a1, *(_QWORD *)(v13 - 32), v12, (const llvm::DominatorTree *)v13);
      if (v155)
      {
        if ((v156 & 0xFE) == 4 || (v150 & 0xFE) == 4)
        {
          sub_1C4E93A0C(&v140, (uint64_t)&v156, *(_QWORD *)v13, *(_QWORD *)(a1 + 224));
          sub_1C4E93A0C(&v127, (uint64_t)&v150, *(_QWORD *)v13, *(_QWORD *)(a1 + 224));
          v125 = 0;
          v126 = 0;
          matched = llvm::matchSelectPattern(v13, (uint64_t)&v126, &v125, 0, 0);
          switch(matched)
          {
            case 0:
              goto LABEL_162;
            case 7:
              if (v126 == *(_QWORD *)(v13 - 64))
              {
                llvm::ConstantRange::abs((llvm::ConstantRange *)&v140, 0, (uint64_t)&__src);
                v63 = v156;
              }
              else
              {
                if (v126 != *(_QWORD *)(v13 - 32))
                  goto LABEL_162;
                llvm::ConstantRange::abs((llvm::ConstantRange *)&v127, 0, (uint64_t)&__src);
                v63 = v150;
              }
              sub_1C4E8E6E0((uint64_t)&__src, v63 == 5, (__int16 *)&v145);
              v134 = v145;
              if (v145 - 2 < 2)
              {
                v135 = (uint64_t)v146;
              }
              else if (v145 - 4 <= 1)
              {
                v136 = v147;
                v135 = (uint64_t)v146;
                v138 = v149;
                v137 = v148;
                LODWORD(v147) = 0;
                v149 = 0;
                v134 = (__int16)v145;
              }
              LOWORD(v145) = (unsigned __int16)v145 & 0xFF00;
              v139 = 1;
              goto LABEL_284;
            case 8:
              v116 = v141;
              if (v141 > 0x40)
              {
                v95 = v8;
                llvm::APInt::initSlowCase((llvm::APInt *)&v115, 0, 0);
                v96 = v116;
                v122 = v96;
                v37 = v115;
                __src = v115;
                v116 = 0;
                LODWORD(v146) = v96;
                if (v96 > 0x40)
                {
                  v97 = ((unint64_t)(v96 + 63) >> 3) & 0x3FFFFFF8;
                  v37 = (void *)operator new[]();
                  memcpy(v37, __src, v97);
                }
                v8 = v95;
              }
              else
              {
                v37 = 0;
                v115 = 0;
                v122 = v141;
                __src = 0;
                v116 = 0;
                LODWORD(v146) = v141;
              }
              v145 = v37;
              llvm::APInt::operator+=((uint64_t)&v145, 1uLL);
              v124 = v146;
              v123 = v145;
              if (v126 == *(_QWORD *)(v13 - 64))
              {
                llvm::ConstantRange::abs((llvm::ConstantRange *)&v140, 0, (uint64_t)&v111);
                llvm::ConstantRange::sub((llvm::ConstantRange *)&__src, (const llvm::ConstantRange *)&v111, (uint64_t)&v117);
                sub_1C4E8E6E0((uint64_t)&v117, v150 == 5, (__int16 *)&v145);
                v68 = (__int16)v145;
                v69 = v145;
                v134 = v145;
                if (v145 - 2 < 2)
                  goto LABEL_238;
              }
              else
              {
                if (v126 != *(_QWORD *)(v13 - 32))
                {
                  if (v146 >= 0x41 && v145)
                    MEMORY[0x1CAA32F9C]();
                  if (v122 >= 0x41 && __src)
                    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                  goto LABEL_162;
                }
                llvm::ConstantRange::abs((llvm::ConstantRange *)&v127, 0, (uint64_t)&v111);
                llvm::ConstantRange::sub((llvm::ConstantRange *)&__src, (const llvm::ConstantRange *)&v111, (uint64_t)&v117);
                sub_1C4E8E6E0((uint64_t)&v117, v150 == 5, (__int16 *)&v145);
                v68 = (__int16)v145;
                v69 = v145;
                v134 = v145;
                if (v145 - 2 < 2)
                {
LABEL_238:
                  v135 = (uint64_t)v146;
                  goto LABEL_239;
                }
              }
              if ((v69 - 4) <= 1)
              {
                v136 = v147;
                v135 = (uint64_t)v146;
                v138 = v149;
                v137 = v148;
                LODWORD(v147) = 0;
                v149 = 0;
                v134 = v68;
              }
LABEL_239:
              LOWORD(v145) = v68 & 0xFF00;
              v139 = 1;
              if (v120 >= 0x41 && v119)
                MEMORY[0x1CAA32F9C](v119, 0x1000C8000313F17);
              if (v118 >= 0x41 && v117)
                MEMORY[0x1CAA32F9C](v117, 0x1000C8000313F17);
              if (v114 >= 0x41 && v113)
                MEMORY[0x1CAA32F9C](v113, 0x1000C8000313F17);
              if (v112 >= 0x41 && v111)
                MEMORY[0x1CAA32F9C](v111, 0x1000C8000313F17);
LABEL_284:
              if (v124 >= 0x41 && v123)
                MEMORY[0x1CAA32F9C](v123, 0x1000C8000313F17);
              if (v122 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
              if (v130 >= 0x41 && v129)
                MEMORY[0x1CAA32F9C](v129, 0x1000C8000313F17);
              if (v128 >= 0x41 && v127)
                MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
              if (v143 >= 0x41 && v142)
                MEMORY[0x1CAA32F9C](v142, 0x1000C8000313F17);
              if (v141 >= 0x41 && v140)
                MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
LABEL_290:
              if (v155 && (v150 & 0xFE) == 4)
              {
                if (v154 >= 0x41 && v153)
                  MEMORY[0x1CAA32F9C](v153, 0x1000C8000313F17);
                if (v152 >= 0x41 && v151)
                  MEMORY[0x1CAA32F9C](v151, 0x1000C8000313F17);
              }
LABEL_294:
              if (v161 && (v156 & 0xFE) == 4)
              {
                if (v160 >= 0x41 && v159)
                  MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
                if (v158 >= 0x41)
                {
                  v25 = v157;
                  if (v157)
                  {
LABEL_34:
                    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
                    goto LABEL_251;
                  }
                }
              }
              goto LABEL_251;
          }
          v64 = *(_QWORD *)(v13 - 64);
          if (v126 == v64 && v125 == *(_QWORD *)(v13 - 32) || v125 == v64 && v126 == *(_QWORD *)(v13 - 32))
            __asm { BR              X9 }
LABEL_162:
          if (v130 >= 0x41 && v129)
            MEMORY[0x1CAA32F9C](v129, 0x1000C8000313F17);
          if (v128 >= 0x41 && v127)
            MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
          if (v143 >= 0x41 && v142)
            MEMORY[0x1CAA32F9C](v142, 0x1000C8000313F17);
          if (v141 >= 0x41 && v140)
            MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
        }
        v65 = *(_QWORD **)(v13 - 96);
        sub_1C4E8CDD8((uint64_t)&v140, *(_QWORD *)(v13 - 64), v65, 1);
        sub_1C4E8C7E8((uint64_t)&v145, (unsigned __int8 *)&v156, (__int16 *)&v140);
        if ((v156 & 0xFE) == 4)
        {
          if (v160 >= 0x41 && v159)
            MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
          if (v158 >= 0x41 && v157)
            MEMORY[0x1CAA32F9C](v157, 0x1000C8000313F17);
        }
        LOWORD(v156) = v145;
        if (v145 - 2 < 2)
        {
          v157 = (uint64_t)v146;
        }
        else if (v145 - 4 <= 1)
        {
          LODWORD(v158) = v147;
          v157 = (uint64_t)v146;
          v160 = v149;
          v159 = v148;
          LODWORD(v147) = 0;
          v149 = 0;
          LOWORD(v156) = (_WORD)v145;
        }
        LOWORD(v145) = (unsigned __int16)v145 & 0xFF00;
        if ((v140 & 0xFE) == 4)
        {
          if (v144 >= 0x41 && v143)
            MEMORY[0x1CAA32F9C](v143, 0x1000C8000313F17);
          if (v142 >= 0x41 && v141)
            MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
        }
        sub_1C4E8CDD8((uint64_t)&v140, *(_QWORD *)(v13 - 32), v65, 0);
        sub_1C4E8C7E8((uint64_t)&v145, (unsigned __int8 *)&v150, (__int16 *)&v140);
        if ((v150 & 0xFE) == 4)
        {
          if (v154 >= 0x41 && v153)
            MEMORY[0x1CAA32F9C](v153, 0x1000C8000313F17);
          if (v152 >= 0x41 && v151)
            MEMORY[0x1CAA32F9C](v151, 0x1000C8000313F17);
        }
        LOWORD(v150) = v145;
        if (v145 - 2 < 2)
        {
          v151 = (uint64_t)v146;
        }
        else if (v145 - 4 <= 1)
        {
          LODWORD(v152) = v147;
          v151 = (uint64_t)v146;
          v154 = v149;
          v153 = v148;
          LODWORD(v147) = 0;
          v149 = 0;
          LOWORD(v150) = (_WORD)v145;
        }
        LOWORD(v145) = (unsigned __int16)v145 & 0xFF00;
        if ((v140 & 0xFE) == 4)
        {
          if (v144 >= 0x41 && v143)
            MEMORY[0x1CAA32F9C](v143, 0x1000C8000313F17);
          if (v142 >= 0x41 && v141)
            MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
        }
        LOWORD(v145) = v156;
        if (v156 - 4 < 2)
        {
          LODWORD(v147) = v158;
          if (v158 > 0x40)
          {
            v146 = (void *)operator new[]();
            memcpy(v146, (const void *)v157, (((unint64_t)v147 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v146 = (void *)v157;
          }
          v149 = v160;
          if (v160 > 0x40)
          {
            v148 = (uint64_t (***)())operator new[]();
            memcpy(v148, v159, (((unint64_t)v149 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v148 = v159;
          }
          BYTE1(v145) = BYTE1(v156);
        }
        else if (v156 - 2 < 2)
        {
          v146 = (void *)v157;
        }
        sub_1C4E8EE28((uint64_t)&v145, (unsigned __int8 *)&v150, 0x100000000);
        v134 = v145;
        if (v145 - 2 < 2)
        {
          v135 = (uint64_t)v146;
        }
        else if (v145 - 4 <= 1)
        {
          v136 = v147;
          v135 = (uint64_t)v146;
          LODWORD(v147) = 0;
          v138 = v149;
          v137 = v148;
          v134 = (__int16)v145;
        }
        v139 = 1;
        goto LABEL_290;
      }
      LOBYTE(v134) = 0;
      v139 = 0;
      goto LABEL_294;
    }
    if (v14 == 83)
    {
      LOWORD(v150) = 0;
      v23 = *(_DWORD *)(v13 + 20) & 0x7FFFFFF;
      if (!(_DWORD)v23)
      {
        v134 = 0;
        goto LABEL_29;
      }
      v109 = v10;
      v26 = v9;
      v27 = v4;
      v28 = 0;
      v29 = 0;
      v30 = 8 * v23;
      while (1)
      {
        v31 = *(_DWORD *)(v13 + 20);
        if ((v31 & 0x40000000) != 0)
          v32 = *(_QWORD *)(v13 - 8);
        else
          v32 = v13 - 32 * (v31 & 0x7FFFFFF);
        sub_1C4E91E10((uint64_t)&v156, a1, *(_QWORD *)(v32 + v28), *(_QWORD *)(v32 + 32 * *(unsigned int *)(v13 + 60) + v29), v12, (const llvm::DominatorTree *)v13);
        if (!v161)
        {
          LOBYTE(v134) = 0;
          v139 = 0;
          v4 = v27;
          v9 = v26;
          v10 = v109;
          goto LABEL_78;
        }
        sub_1C4E8EE28((uint64_t)&v150, (unsigned __int8 *)&v156, 0x100000000);
        if (v150 == 6)
          break;
        if (v161 && (v156 & 0xFE) == 4)
        {
          if (v160 >= 0x41 && v159)
            MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
          if (v158 >= 0x41 && v157)
            MEMORY[0x1CAA32F9C](v157, 0x1000C8000313F17);
        }
        v29 += 8;
        v28 += 32;
        if (v30 == v29)
        {
          LOWORD(v23) = v150;
          v134 = v150;
          if (v150 - 2 < 2)
          {
            v135 = v151;
            v4 = v27;
          }
          else
          {
            v4 = v27;
            if (v150 - 4 <= 1)
            {
              v136 = v152;
              v135 = v151;
              v138 = v154;
              v137 = v153;
              LODWORD(v152) = 0;
              v154 = 0;
              v134 = v150;
            }
          }
          v9 = v26;
          v10 = v109;
          goto LABEL_29;
        }
      }
      v134 = 6;
      v4 = v27;
      LOWORD(v150) = v150 & 0xFF00;
      v139 = 1;
      v9 = v26;
      v10 = v109;
      if (v161)
        goto LABEL_200;
LABEL_78:
      LOBYTE(v24) = v150;
LABEL_30:
      if ((v24 & 0xFE) == 4)
      {
        if (v154 >= 0x41 && v153)
          MEMORY[0x1CAA32F9C](v153, 0x1000C8000313F17);
        if (v152 >= 0x41)
        {
          v25 = v151;
          if (v151)
            goto LABEL_34;
        }
      }
      goto LABEL_251;
    }
    v38 = *(llvm::ConstantPointerNull **)v13;
    v39 = *(unsigned __int8 *)(*(_QWORD *)v13 + 8);
    if (*(_QWORD *)v13)
      v40 = v39 == 15;
    else
      v40 = 0;
    if (v40)
    {
      if (v12)
        v41 = v13;
      else
        v41 = 0;
      v156 = *(uint64_t (***)())(a1 + 224);
      v157 = 0;
      v158 = v41;
      *v10 = 0;
      v10[1] = 0;
      v161 = 1;
      if ((sub_1C4F84D74(v13, 0, (uint64_t)&v156) & 1) != 0)
      {
        v43 = llvm::ConstantPointerNull::get(v38, v42);
        LOWORD(v156) = 0;
        sub_1C4E90C9C((uint64_t)&v156, (uint64_t)v43);
LABEL_221:
        v134 = v156;
        if (v156 - 2 < 2)
        {
          v135 = v157;
        }
        else if (v156 - 4 <= 1)
        {
          v136 = v158;
          v135 = v157;
          LODWORD(v158) = 0;
          v138 = v160;
          v137 = v159;
          v134 = (__int16)v156;
        }
LABEL_225:
        v139 = 1;
LABEL_252:
        sub_1C4E91078(a1, v13, v12, (uint64_t)&v134);
        if (v139 && (v134 & 0xFE) == 4)
        {
          if (v138 >= 0x41 && v137)
            MEMORY[0x1CAA32F9C](v137, 0x1000C8000313F17);
          if (v136 >= 0x41 && v135)
            MEMORY[0x1CAA32F9C](v135, 0x1000C8000313F17);
        }
        v7 = *(_DWORD *)(a1 + 56) - 1;
        *(_DWORD *)(a1 + 56) = v7;
        v71 = *(_DWORD *)(a1 + 208);
        if (v71)
        {
          v72 = *(_QWORD *)(a1 + 192);
          v73 = ((v13 >> 4) ^ (v13 >> 9) | ((unint64_t)((v12 >> 4) ^ (v12 >> 9)) << 32))
              + ~((unint64_t)((v13 >> 4) ^ (v13 >> 9)) << 32);
          v74 = (v73 ^ (v73 >> 22)) + ~((v73 ^ (v73 >> 22)) << 13);
          v75 = (9 * (v74 ^ (v74 >> 8))) ^ ((9 * (v74 ^ (v74 >> 8))) >> 15);
          v76 = v71 - 1;
          v77 = v76 & (((v75 + ~(v75 << 27)) >> 31) ^ (v75 + ~((_DWORD)v75 << 27)));
          v78 = (uint64_t *)(v72 + 16 * v77);
          v80 = *v78;
          v79 = v78[1];
          if (v12 == *v78 && v13 == v79)
          {
LABEL_269:
            *v78 = -8192;
            v78[1] = -8192;
            *(int32x2_t *)(a1 + 200) = vadd_s32(*(int32x2_t *)(a1 + 200), (int32x2_t)0x1FFFFFFFFLL);
          }
          else
          {
            v82 = 1;
            while (v80 != -4096 || v79 != -4096)
            {
              v83 = v77 + v82++;
              v77 = v83 & v76;
              v78 = (uint64_t *)(v72 + 16 * v77);
              v80 = *v78;
              v79 = v78[1];
              if (v12 == *v78 && v13 == v79)
                goto LABEL_269;
            }
          }
        }
        goto LABEL_271;
      }
      v39 = *(unsigned __int8 *)(*(_QWORD *)v13 + 8);
    }
    if (v39 != 13)
      goto LABEL_220;
    v44 = *(unsigned __int8 *)(v13 + 16);
    if ((v44 - 79) >= 0xFFFFFFF3)
    {
      v52 = **(_QWORD **)(v13 - 32);
      v53 = *(unsigned __int8 *)(v52 + 8);
      if (v53 > 0x11)
        goto LABEL_245;
      if (((1 << v53) & 0xAC7F) != 0)
      {
LABEL_132:
        v54 = v44 - 66;
        v22 = v54 > 0xB;
        v55 = (1 << v54) & 0x807;
        if (v22 || v55 == 0)
          goto LABEL_249;
        sub_1C4E93B98((uint64_t)&v156, a1, *(uint64_t **)(v13 - 32), (const llvm::DominatorTree *)v13, v12);
        if (!(_BYTE)v160)
        {
LABEL_140:
          LOBYTE(v134) = 0;
          v139 = 0;
          goto LABEL_251;
        }
        llvm::ConstantRange::castOp((uint64_t)&v156, *(unsigned __int8 *)(v13 + 16) - 28);
        sub_1C4E8E6E0((uint64_t)&v145, 0, (__int16 *)&v150);
        v134 = v150;
        if (v150 - 2 < 2)
        {
          v135 = v151;
        }
        else if (v150 - 4 <= 1)
        {
          v136 = v152;
          v135 = v151;
          v138 = v154;
          v137 = v153;
          LODWORD(v152) = 0;
          v154 = 0;
          v134 = v150;
        }
        LOWORD(v150) = v150 & 0xFF00;
        v139 = 1;
        if (v148 >= 0x41 && v147)
          MEMORY[0x1CAA32F9C](v147, 0x1000C8000313F17);
        if (v146 >= 0x41 && v145)
          MEMORY[0x1CAA32F9C](v145, 0x1000C8000313F17);
        if ((_BYTE)v160)
        {
          if (v159 >= 0x41 && v158)
            MEMORY[0x1CAA32F9C](v158, 0x1000C8000313F17);
          if (v157 >= 0x41)
          {
            v25 = (uint64_t)v156;
            if (v156)
              goto LABEL_34;
          }
        }
        goto LABEL_251;
      }
      if (((1 << v53) & 0x30000) == 0)
      {
LABEL_245:
        if ((v53 & 0xFE) != 0x12 && v53 != 21)
        {
LABEL_249:
          v134 = 6;
LABEL_250:
          v139 = 1;
          goto LABEL_251;
        }
      }
      if (!llvm::Type::isSizedDerivedType(v52, 0))
        goto LABEL_249;
      v44 = *(unsigned __int8 *)(v13 + 16);
      goto LABEL_132;
    }
    if ((v44 - 59) >= 0xFFFFFFEE)
    {
      if (v44 == 58)
        goto LABEL_249;
      HIDWORD(v58) = v44 - 41;
      LODWORD(v58) = v44 - 41;
      v57 = v58 >> 1;
      v22 = v57 > 6;
      v59 = (1 << v57) & 0x47;
      if (v22 || v59 == 0)
      {
        v156 = &off_1E81389E0;
        v157 = v13;
      }
      else
      {
        v61 = ((unint64_t)*(unsigned __int8 *)(v13 + 17) >> 1) & 3;
        v156 = (uint64_t (**)())&unk_1E8138998;
        v157 = v13;
        v158 = v61;
      }
      v159 = &v156;
      sub_1C4E93CC8((uint64_t)&v134, a1, (_DWORD *)v13, v12, (uint64_t)&v156);
      if (v159 != &v156)
      {
        if (!v159)
          goto LABEL_251;
        v62 = (void (*)(void))(*v159)[5];
        goto LABEL_150;
      }
      ((void (*)(uint64_t (***)()))v156[4])(&v156);
    }
    else if (v44 == 84)
    {
      v67 = v13 - 32;
      v66 = *(_QWORD *)(v13 - 32);
      if (!v66
        || *(_BYTE *)(v66 + 16)
        || *(_QWORD *)(v66 + 24) != *(_QWORD *)(v13 + 72)
        || (*(_BYTE *)(v66 + 33) & 0x20) == 0)
      {
LABEL_220:
        sub_1C4E91C38((__int16 *)&v156, v13);
        goto LABEL_221;
      }
      v86 = *(_DWORD *)(v66 + 36);
      if (((v86 - 262) > 0x31 || ((1 << (v86 - 6)) & 0x2184000203001) == 0)
        && v86 != 1)
      {
        sub_1C4E91C38((__int16 *)&v156, v13);
        v134 = v156;
        if (v156 - 2 < 2)
        {
          v135 = v157;
        }
        else if (v156 - 4 <= 1)
        {
          v136 = v158;
          v135 = v157;
          LODWORD(v158) = 0;
          v138 = v160;
          v137 = v159;
          v134 = (__int16)v156;
        }
        goto LABEL_250;
      }
      v110 = v4;
      v156 = (uint64_t (**)())&v158;
      v157 = 0x200000000;
      v89 = *(_DWORD *)(v13 + 20);
      v90 = v89 & 0x7FFFFFF;
      v91 = v13 - 32 * v90;
      if (v89 < 0 && (v104 = *(_QWORD *)(v91 - 8), (v104 & 0xFFFFFFFF0) != 0))
        v92 = (*(_DWORD *)(v91 - 12) - *(_DWORD *)(v91 - v104));
      else
        v92 = 0;
      if (v91 == v67 - 32 * v92)
      {
        v98 = (const void **)&v158;
LABEL_393:
        llvm::ConstantRange::intrinsic(v98, *(_DWORD *)(*(_QWORD *)v67 + 36), (uint64_t)&v145);
        sub_1C4E8E6E0((uint64_t)&v145, 0, (__int16 *)&v150);
        v134 = v150;
        if (v150 - 2 < 2)
        {
          v135 = v151;
        }
        else if (v150 - 4 <= 1)
        {
          v136 = v152;
          v135 = v151;
          v138 = v154;
          v137 = v153;
          LODWORD(v152) = 0;
          v154 = 0;
          v134 = v150;
        }
        LOWORD(v150) = v150 & 0xFF00;
        v139 = 1;
        if (v148 >= 0x41 && v147)
          MEMORY[0x1CAA32F9C](v147, 0x1000C8000313F17);
        if (v146 >= 0x41 && v145)
          MEMORY[0x1CAA32F9C](v145, 0x1000C8000313F17);
      }
      else
      {
        v93 = -32 * v90;
        v94 = 32 * ~v92;
        while (1)
        {
          sub_1C4E93B98((uint64_t)&v150, a1, *(uint64_t **)(v13 + v93), (const llvm::DominatorTree *)v13, v12);
          if (!(_BYTE)v154)
            break;
          sub_1C4E94140((uint64_t)&v156, (unint64_t)&v150);
          if ((_BYTE)v154)
          {
            if (v153 >= 0x41 && v152)
              MEMORY[0x1CAA32F9C](v152, 0x1000C8000313F17);
            if (v151 >= 0x41 && v150)
              MEMORY[0x1CAA32F9C](v150, 0x1000C8000313F17);
          }
          v93 += 32;
          if (v94 == v93)
          {
            v98 = (const void **)v156;
            goto LABEL_393;
          }
        }
        LOBYTE(v134) = 0;
        v139 = 0;
      }
      v99 = (unint64_t *)v156;
      if ((_DWORD)v157)
      {
        v100 = 4 * v157;
        do
        {
          v101 = (char *)&v99[v100];
          if (LODWORD(v99[v100 - 1]) >= 0x41)
          {
            v102 = *((_QWORD *)v101 - 2);
            if (v102)
              MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
          }
          if (*((_DWORD *)v101 - 6) >= 0x41u)
          {
            v103 = *((_QWORD *)v101 - 4);
            if (v103)
              MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
          }
          v100 -= 4;
        }
        while (v100 * 8);
        v99 = (unint64_t *)v156;
      }
      if (v99 != &v158)
        free(v99);
      v4 = v110;
    }
    else
    {
      if (v44 != 92)
        goto LABEL_220;
      v45 = *(_DWORD **)(v13 - 32);
      v46 = sub_1C4E8FD48((uint64_t)v45);
      v47 = *(unsigned int *)(v13 + 72);
      v48 = *(char **)(v13 + 64);
      if (v45)
        v49 = v46 == 0;
      else
        v49 = 1;
      if (v49 || v47 != 1)
        goto LABEL_122;
      if (*(_DWORD *)v48)
      {
        v47 = 1;
LABEL_122:
        ValueInst = llvm::SimplifyExtractValueInst(*(unsigned __int8 **)(v13 - 32), v48, v47);
        if (!ValueInst)
        {
          v134 = 6;
          goto LABEL_225;
        }
        sub_1C4E89520((uint64_t)&v134, a1, (uint64_t)ValueInst, v12, (const llvm::DominatorTree *)v13);
        goto LABEL_251;
      }
      v156 = &off_1E8138A28;
      v157 = (uint64_t)v45;
      v159 = &v156;
      sub_1C4E93CC8((uint64_t)&v134, a1, v45, v12, (uint64_t)&v156);
      if (v159 == &v156)
      {
        v85 = (void (**)(void))(v156 + 4);
        goto LABEL_301;
      }
      if (v159)
      {
        v85 = (void (**)(void))(*v159 + 5);
LABEL_301:
        v62 = *v85;
LABEL_150:
        v62();
      }
    }
LABEL_251:
    if (v139)
      goto LABEL_252;
    v7 = *(_DWORD *)(a1 + 56);
LABEL_271:
    ++v8;
    if (!v7)
      goto LABEL_421;
  }
  for (i = v132; (_DWORD)v132; LODWORD(v132) = v132 - 1)
  {
    v106 = (char *)v131 + 16 * i;
    v108 = *((_QWORD *)v106 - 2);
    v107 = *((_QWORD *)v106 - 1);
    LOWORD(v156) = 6;
    sub_1C4E91078(a1, v107, v108, (uint64_t)&v156);
    i = v132 - 1;
  }
  sub_1C4E91B00(v9);
  *(_DWORD *)(a1 + 56) = 0;
LABEL_421:
  if (v131 != v4)
    free(v131);
}

void sub_1C4E8B92C(uint64_t a1, uint64_t a2, uint64_t a3, const llvm::DominatorTree *a4)
{
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  llvm::PointerType *v31;
  _QWORD *v32;
  __int16 v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  llvm::APInt *v48;
  unsigned int v49;
  uint64_t v50;
  llvm::APInt *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm **v64;
  llvm *v65;
  __int16 v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  int64x2_t v76;
  unsigned int *v77;
  uint64_t v78;
  _QWORD *v79;
  __int16 v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  int64x2_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;

  v4 = a4;
  v89 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    v4 = (_QWORD *)a2;
    if (*(unsigned __int8 *)(a2 + 16) < 0x1Cu)
      return;
  }
  v8 = (_QWORD *)v4[5];
  v9 = *(_QWORD *)(a1 + 216);
  if (!*(_BYTE *)(v9 + 184))
    llvm::AssumptionCache::scanFunction(*(llvm::AssumptionCache **)(a1 + 216));
  v10 = *(_QWORD *)(v9 + 160);
  v11 = *(_DWORD *)(v9 + 176);
  if (!v11)
  {
LABEL_6:
    v12 = v10 + 88 * v11;
    goto LABEL_7;
  }
  v35 = v11 - 1;
  v36 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v12 = v10 + 88 * v36;
  v37 = *(_QWORD *)(v12 + 24);
  if (v37 != a2)
  {
    v38 = 1;
    while (v37 != -4096)
    {
      v39 = v36 + v38++;
      v36 = v39 & v35;
      v12 = v10 + 88 * (v39 & v35);
      v37 = *(_QWORD *)(v12 + 24);
      if (v37 == a2)
        goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_7:
  if (v12 != v10 + 88 * v11)
  {
    v62 = *(unsigned int *)(v12 + 48);
    if ((_DWORD)v62)
    {
      v63 = 32 * v62;
      v64 = (llvm **)(*(_QWORD *)(v12 + 40) + 16);
      do
      {
        v65 = *v64;
        if (*v64
          && *((_QWORD **)v65 + 5) == v8
          && llvm::isValidAssumeForContext(*v64, (const llvm::Instruction *)v4, 0, a4))
        {
          sub_1C4E8CDD8((uint64_t)&v80, a2, *((_QWORD **)v65 - 4 * (*((_DWORD *)v65 + 5) & 0x7FFFFFF)), 1);
          sub_1C4E8C7E8((uint64_t)&v85, (unsigned __int8 *)a3, &v80);
          if ((*(_WORD *)a3 & 0xFE) == 4)
          {
            if (*(_DWORD *)(a3 + 32) >= 0x41u)
            {
              v68 = *(_QWORD *)(a3 + 24);
              if (v68)
                MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
            }
            if (*(_DWORD *)(a3 + 16) >= 0x41u)
            {
              v69 = *(_QWORD *)(a3 + 8);
              if (v69)
                MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
            }
          }
          v66 = v85;
          v67 = v85;
          *(_WORD *)a3 = v85;
          if ((v67 - 2) < 2)
          {
            *(_QWORD *)(a3 + 8) = v86.i64[0];
          }
          else if ((v67 - 4) <= 1)
          {
            *(_DWORD *)(a3 + 16) = v86.i32[2];
            *(_QWORD *)(a3 + 8) = v86.i64[0];
            *(_DWORD *)(a3 + 32) = v88;
            *(_QWORD *)(a3 + 24) = v87;
            v86.i32[2] = 0;
            v88 = 0;
            *(_WORD *)a3 = v66;
          }
          LOWORD(v85) = v66 & 0xFF00;
          if ((v80 & 0xFE) == 4)
          {
            if (v84 >= 0x41 && v83)
              MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
            if (v82 >= 0x41 && v81)
              MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
          }
        }
        v64 += 4;
        v63 -= 32;
      }
      while (v63);
    }
  }
  v13 = *(_QWORD *)(a1 + 232);
  if (v13)
  {
    if (*(_QWORD *)(v13 + 8))
    {
      v14 = (_QWORD **)(v4 + 3);
      if (v4 + 3 != (_QWORD *)v8[6])
      {
        for (i = *v14; i != v8 + 5; i = (_QWORD *)*i)
        {
          v79 = 0;
          if (i)
            v16 = (uint64_t)(i - 3);
          else
            v16 = 0;
          LODWORD(v85) = 125;
          v86.i64[0] = 0;
          v86.i64[1] = (uint64_t)&v79;
          if (sub_1C4E75A6C((uint64_t)&v85, v16))
          {
            sub_1C4E8CDD8((uint64_t)&v80, a2, v79, 1);
            sub_1C4E8C7E8((uint64_t)&v85, (unsigned __int8 *)a3, &v80);
            if ((*(_WORD *)a3 & 0xFE) == 4)
            {
              if (*(_DWORD *)(a3 + 32) >= 0x41u)
              {
                v19 = *(_QWORD *)(a3 + 24);
                if (v19)
                  MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
              }
              if (*(_DWORD *)(a3 + 16) >= 0x41u)
              {
                v20 = *(_QWORD *)(a3 + 8);
                if (v20)
                  MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
              }
            }
            v17 = v85;
            v18 = v85;
            *(_WORD *)a3 = v85;
            if ((v18 - 2) < 2)
            {
              *(_QWORD *)(a3 + 8) = v86.i64[0];
            }
            else if ((v18 - 4) <= 1)
            {
              *(_DWORD *)(a3 + 16) = v86.i32[2];
              *(_QWORD *)(a3 + 8) = v86.i64[0];
              *(_DWORD *)(a3 + 32) = v88;
              *(_QWORD *)(a3 + 24) = v87;
              v86.i32[2] = 0;
              v88 = 0;
              *(_WORD *)a3 = v17;
            }
            LOWORD(v85) = v17 & 0xFF00;
            if ((v80 & 0xFE) == 4)
            {
              if (v84 >= 0x41 && v83)
                MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
              if (v82 >= 0x41 && v81)
                MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
            }
          }
        }
      }
    }
  }
  if (*(_BYTE *)a3 != 6)
    return;
  v21 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return;
  v22 = *(_DWORD *)(v21 + 8);
  if (v22 != 15)
    return;
  v24 = v8 + 5;
  v23 = (_QWORD *)v8[5];
  if (v23 == v8 + 5)
  {
    v25 = 0;
  }
  else
  {
    if (v23)
      v25 = v23 - 3;
    else
      v25 = 0;
    if (*((unsigned __int8 *)v25 + 16) - 29 >= 0xB)
      v25 = 0;
  }
  if (v25 != v4)
    return;
  v26 = v8[7];
  if ((v22 & 0xFE) == 0x12)
    v22 = *(_DWORD *)(**(_QWORD **)(v21 + 16) + 8);
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 112);
    if (v27)
    {
      if ((*(_BYTE *)(v27 + 17) & 1) != 0)
        return;
    }
  }
  if (v22 > 0xFF)
    return;
  v28 = llvm::Value::stripInBoundsOffsets(a2, (void (*)(uint64_t, uint64_t))nullsub_615, (uint64_t)&v85);
  v29 = sub_1C4E8FDB4(a1, (uint64_t)v8);
  v30 = (unsigned int *)(v29 + 240);
  if (*(_BYTE *)(v29 + 264))
    goto LABEL_56;
  v40 = v29;
  v77 = (unsigned int *)(v29 + 240);
  v78 = v28;
  v41 = (uint64_t *)(v29 + 264);
  v85 = 1;
  v76 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v86 = v76;
  v42 = (_QWORD *)v8[6];
  if (v42 == v24)
    goto LABEL_100;
  v75 = (uint64_t *)(v29 + 264);
  do
  {
    if (v42)
      v43 = (uint64_t)(v42 - 3);
    else
      v43 = 0;
    v44 = *(unsigned __int8 *)(v43 + 16);
    if (v42 && v44 == 60 || v42 && v44 == 61)
    {
      v45 = (uint64_t *)(v43 - 32);
LABEL_78:
      sub_1C4E90960(*v45, &v85);
      goto LABEL_79;
    }
    if (sub_1C4DE85D0(v43) && v42)
    {
      v46 = (uint64_t *)(v43 - 32 * (*(_DWORD *)(v43 + 20) & 0x7FFFFFF));
      v47 = v46[12];
      v48 = (llvm::APInt *)(v47 + 24);
      v49 = *(_DWORD *)(v47 + 32);
      if (v49 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v48) != v49)
          goto LABEL_79;
      }
      else if (*(_QWORD *)v48)
      {
        goto LABEL_79;
      }
      v50 = v46[8];
      if (v50 && *(_BYTE *)(v50 + 16) == 16)
      {
        v52 = (llvm::APInt *)(v50 + 24);
        v53 = *(_DWORD *)(v50 + 32);
        if (v53 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v52) == v53)
            goto LABEL_79;
        }
        else if (!*(_QWORD *)v52)
        {
          goto LABEL_79;
        }
        sub_1C4E90960(*v46, &v85);
        if ((*(_DWORD *)(*(_QWORD *)(v43 - 32) + 36) - 194) <= 3
          && *(_DWORD *)(*(_QWORD *)(v43 - 32) + 36) != 195)
        {
          v45 = &v42[-4 * (*((_DWORD *)v42 - 1) & 0x7FFFFFF) + 1];
          goto LABEL_78;
        }
      }
    }
LABEL_79:
    v42 = (_QWORD *)v42[1];
  }
  while (v42 != v24);
  v41 = v75;
  if (*(_BYTE *)v75)
  {
    v30 = v77;
    sub_1C619CF84((uint64_t)v77, (unsigned int *)&v85);
  }
  else
  {
LABEL_100:
    *(_QWORD *)(v40 + 240) = 1;
    *(int64x2_t *)(v40 + 248) = v76;
    v30 = v77;
    sub_1C4E907F0(v77, (unsigned int *)&v85);
    *(_BYTE *)(v40 + 264) = 1;
  }
  v28 = v78;
  if ((v85 & 1) == 0)
    MEMORY[0x1CAA32FB4](v86.i64[0], 8);
  v54 = *v30;
  if (*v30 <= 1)
  {
    if (v54)
    {
      v55 = v40 + 248;
      v56 = 2;
    }
    else
    {
      v55 = *(_QWORD *)(v40 + 248);
      v56 = *(unsigned int *)(v40 + 256);
    }
    v57 = (uint64_t *)(v55 + 8 * v56);
    v41 = v57;
    if (!v54)
      goto LABEL_152;
LABEL_117:
    v60 = (uint64_t *)(v40 + 248);
    v61 = 2;
    goto LABEL_153;
  }
  if ((v54 & 1) != 0)
  {
    v58 = (uint64_t *)(v40 + 248);
LABEL_111:
    v59 = *v30 & 1;
    v57 = v58;
    do
    {
      if (*v57 != -4096 && *v57 != -8192)
      {
        if (!v59)
          goto LABEL_152;
        goto LABEL_117;
      }
      ++v57;
    }
    while (v57 != v41);
    v57 = v41;
    if (v59)
      goto LABEL_117;
LABEL_152:
    v60 = *(uint64_t **)(v40 + 248);
    v61 = *(unsigned int *)(v40 + 256);
LABEL_153:
    v58 = v41;
  }
  else
  {
    v58 = *(uint64_t **)(v40 + 248);
    v70 = *(unsigned int *)(v40 + 256);
    if ((_DWORD)v70)
    {
      v41 = &v58[v70];
      goto LABEL_111;
    }
    v61 = 0;
    v57 = *(uint64_t **)(v40 + 248);
    v60 = v57;
  }
  v73 = &v60[v61];
LABEL_155:
  while (v57 != v73)
  {
    v74 = v57 + 1;
    sub_1C4E90074(a1, *v57);
    v57 = v58;
    if (v74 != v58)
    {
      v57 = v74;
      while ((*v57 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v57 == v58)
        {
          v57 = v58;
          goto LABEL_155;
        }
      }
    }
  }
LABEL_56:
  if (sub_1C4E891D4((uint64_t)v30, v28, &v85))
  {
    v32 = llvm::ConstantPointerNull::get((llvm::ConstantPointerNull *)v21, v31);
    LOWORD(v85) = 0;
    sub_1C4E90C9C((uint64_t)&v85, (uint64_t)v32);
    if ((*(_WORD *)a3 & 0xFE) == 4)
    {
      if (*(_DWORD *)(a3 + 32) >= 0x41u)
      {
        v71 = *(_QWORD *)(a3 + 24);
        if (v71)
          MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
      }
      if (*(_DWORD *)(a3 + 16) >= 0x41u)
      {
        v72 = *(_QWORD *)(a3 + 8);
        if (v72)
          MEMORY[0x1CAA32F9C](v72, 0x1000C8000313F17);
      }
    }
    v33 = v85;
    v34 = v85;
    *(_WORD *)a3 = v85;
    if ((v34 - 2) < 2)
    {
      *(_QWORD *)(a3 + 8) = v86.i64[0];
    }
    else if ((v34 - 4) <= 1)
    {
      *(_DWORD *)(a3 + 16) = v86.i32[2];
      *(_QWORD *)(a3 + 8) = v86.i64[0];
      *(_DWORD *)(a3 + 32) = v88;
      *(_QWORD *)(a3 + 24) = v87;
      *(_WORD *)a3 = v33;
    }
  }
}

uint64_t sub_1C4E8C21C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v4;
  __int16 v5;
  int v6;
  _BOOL8 v7;
  uint64_t v10;
  void *v11;
  size_t v12;
  void *v13;
  void *v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  void *v19;
  unsigned int v20;

  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = *(_WORD *)a1;
  v6 = *(_WORD *)a1;
  if ((v4 - 11) <= 1)
  {
    if (v6 != 1)
    {
      *(_WORD *)a1 = v5 & 0xFF00 | 1;
      return 1;
    }
    return 0;
  }
  if (v6 == 2)
    return 0;
  if (v4 != 16)
  {
    *(_WORD *)a1 = v5 & 0xFF00 | 2;
    *(_QWORD *)(a1 + 8) = a2;
    return 1;
  }
  v10 = *(unsigned int *)(a2 + 32);
  if (v10 > 0x40)
  {
    v12 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
    v13 = (void *)operator new[]();
    memcpy(v13, *(const void **)(a2 + 24), v12);
    v16 = v10;
    v15 = v13;
    v20 = v10;
    v11 = (void *)operator new[]();
    memcpy(v11, v13, v12);
  }
  else
  {
    v11 = *(void **)(a2 + 24);
    v16 = *(_DWORD *)(a2 + 32);
    v15 = v11;
    v20 = v10;
  }
  v19 = v11;
  llvm::APInt::operator+=((uint64_t)&v19, 1uLL);
  v18 = v20;
  v17 = v19;
  v7 = sub_1C4E8C3D4((__int16 *)a1, (uint64_t)&v15, a3 | 0x100000000);
  if (v18 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  if (v16 >= 0x41 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  return v7;
}

BOOL sub_1C4E8C3D4(__int16 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  __int16 v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  uint64_t v21;
  const void *v22;
  unsigned int v23;

  v6 = *(unsigned int *)(a2 + 8);
  if (v6 > 0x40)
  {
    if (memcmp(*(const void **)a2, *(const void **)(a2 + 16), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
      goto LABEL_3;
    v13 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)a2);
    v7 = (unsigned __int16)*a1;
    if (v13 != (_DWORD)v6)
      goto LABEL_4;
  }
  else
  {
    if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 16))
    {
LABEL_3:
      v7 = (unsigned __int16)*a1;
      goto LABEL_4;
    }
    if ((_DWORD)v6)
    {
      v7 = (unsigned __int16)*a1;
      if (*(_QWORD *)a2 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v6)
        goto LABEL_18;
LABEL_4:
      if ((a3 & 1) != 0)
        v8 = 5;
      else
        v8 = 4;
      if ((v7 | 4) == 5)
        v8 = 5;
      if ((v7 & 0xFE) != 4)
      {
        *a1 = v8;
        *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 8);
        *((_QWORD *)a1 + 1) = *(_QWORD *)a2;
        *(_DWORD *)(a2 + 8) = 0;
        *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 24);
        *((_QWORD *)a1 + 3) = *(_QWORD *)(a2 + 16);
        goto LABEL_38;
      }
      *a1 = v8 | v7 & 0xFF00;
      v9 = *((unsigned int *)a1 + 4);
      if (v9 > 0x40)
      {
        v23 = v7;
        v10 = (const void *)*((_QWORD *)a1 + 1);
        v19 = v8;
        v20 = memcmp(v10, *(const void **)a2, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
        v8 = v19;
        v7 = v23;
        if (!v20)
        {
LABEL_12:
          v11 = *((unsigned int *)a1 + 8);
          if (v11 > 0x40)
          {
            v22 = v10;
            v15 = v8;
            v16 = memcmp(*((const void **)a1 + 3), *(const void **)(a2 + 16), ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
            v8 = v15;
            v10 = v22;
            if (!v16)
              return v8 != v7;
          }
          else if (*((_QWORD *)a1 + 3) == *(_QWORD *)(a2 + 16))
          {
            return v8 != v7;
          }
        }
      }
      else
      {
        v10 = (const void *)*((_QWORD *)a1 + 1);
        if (v10 == *(const void **)a2)
          goto LABEL_12;
      }
      if ((a3 & 0x100) != 0)
      {
        *a1 = v8 | (((unsigned __int16)(v7 >> 8) + 1) << 8);
        if (HIDWORD(a3) < (BYTE1(v7) + 1))
        {
          if (*((_DWORD *)a1 + 8) >= 0x41u)
          {
            v18 = *((_QWORD *)a1 + 3);
            if (v18)
            {
              MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
              LODWORD(v9) = *((_DWORD *)a1 + 4);
            }
          }
          if (v9 < 0x41)
            goto LABEL_34;
          goto LABEL_40;
        }
      }
      if (v9 >= 0x41 && v10)
        MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
      *((_QWORD *)a1 + 1) = *(_QWORD *)a2;
      *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = 0;
      if (*((_DWORD *)a1 + 8) >= 0x41u)
      {
        v21 = *((_QWORD *)a1 + 3);
        if (v21)
          MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
      }
      *((_QWORD *)a1 + 3) = *(_QWORD *)(a2 + 16);
      *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 24);
LABEL_38:
      *(_DWORD *)(a2 + 24) = 0;
      return 1;
    }
    LOBYTE(v7) = *(_BYTE *)a1;
  }
LABEL_18:
  if (v7 == 6)
    return 0;
  if ((v7 & 0xFE) != 4)
    goto LABEL_34;
  if (*((_DWORD *)a1 + 8) >= 0x41u)
  {
    v14 = *((_QWORD *)a1 + 3);
    if (v14)
      MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  }
  if (*((_DWORD *)a1 + 4) < 0x41u)
    goto LABEL_34;
LABEL_40:
  v17 = *((_QWORD *)a1 + 1);
  if (v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
LABEL_34:
  *(_BYTE *)a1 = 6;
  return 1;
}

uint64_t sub_1C4E8C6FC(uint64_t a1)
{
  uint64_t v3;

  if (*(_DWORD *)(a1 + 24) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
    MEMORY[0x1CAA32F9C](*(_QWORD *)a1, 0x1000C8000313F17);
  return a1;
}

uint64_t sub_1C4E8C774(uint64_t result, unsigned __int8 *a2)
{
  int v2;

  *(_WORD *)result = *a2;
  v2 = *a2;
  if ((v2 - 4) < 2)
  {
    *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
    *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(result + 32) = *((_DWORD *)a2 + 8);
    *(_QWORD *)(result + 24) = *((_QWORD *)a2 + 3);
    *((_DWORD *)a2 + 8) = 0;
    *(_BYTE *)(result + 1) = a2[1];
  }
  else if ((v2 - 2) < 2)
  {
    *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
  }
  *(_WORD *)a2 = a2[1] << 8;
  return result;
}

uint64_t sub_1C4E8C7E8(uint64_t result, unsigned __int8 *a2, __int16 *a3)
{
  uint64_t v4;
  __int16 v5;
  int v6;
  __int16 v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned __int8 v24;
  __int16 v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  __int16 v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  size_t v41;
  void *v42;
  void *v43;
  void *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  void *__s2;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;

  v4 = result;
  v5 = *(_WORD *)a2;
  v6 = *(_WORD *)a2;
  if (!*(_WORD *)a2)
  {
    *(_WORD *)result = 0;
LABEL_13:
    v12 = v5;
    goto LABEL_14;
  }
  v8 = *a3;
  v9 = *a3;
  if (!*a3)
  {
    *(_WORD *)result = 0;
LABEL_7:
    if (v8 - 4 >= 2)
    {
      v10 = v8 - 2;
      goto LABEL_9;
    }
LABEL_54:
    v33 = *((_DWORD *)a3 + 4);
    *(_DWORD *)(v4 + 16) = v33;
    if (v33 > 0x40)
    {
      v39 = (void *)operator new[]();
      *(_QWORD *)(v4 + 8) = v39;
      result = (uint64_t)memcpy(v39, *((const void **)a3 + 1), (((unint64_t)*(unsigned int *)(v4 + 16) + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *(_QWORD *)(v4 + 8) = *((_QWORD *)a3 + 1);
    }
    v34 = *((_DWORD *)a3 + 8);
    *(_DWORD *)(v4 + 32) = v34;
    if (v34 > 0x40)
    {
      v40 = (void *)operator new[]();
      *(_QWORD *)(v4 + 24) = v40;
      result = (uint64_t)memcpy(v40, *((const void **)a3 + 3), (((unint64_t)*(unsigned int *)(v4 + 32) + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      *(_QWORD *)(v4 + 24) = *((_QWORD *)a3 + 3);
    }
    v24 = *((_BYTE *)a3 + 1);
LABEL_59:
    *(_BYTE *)(v4 + 1) = v24;
    return result;
  }
  if (v6 == 6)
  {
    *(_WORD *)result = v9;
    goto LABEL_7;
  }
  if (v9 == 6)
  {
    *(_WORD *)result = v6;
    goto LABEL_13;
  }
  if ((v5 & 0xFE) == 4)
  {
    v14 = *((unsigned int *)a2 + 4);
    v49 = v14;
    if (v14 > 0x40)
    {
      v41 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
      v15 = (void *)operator new[]();
      memcpy(v15, *((const void **)a2 + 1), v41);
    }
    else
    {
      v15 = (void *)*((_QWORD *)a2 + 1);
    }
    __s2 = v15;
    result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    v16 = v49;
    v17 = __s2;
    v49 = 0;
    v18 = *((unsigned int *)a2 + 8);
    if (v18 > 0x40)
    {
      v42 = __s2;
      result = memcmp(*((const void **)a2 + 3), __s2, ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8);
      v17 = v42;
      v19 = (_DWORD)result == 0;
    }
    else
    {
      v19 = *((_QWORD *)a2 + 3) == (_QWORD)__s2;
    }
    v20 = v19;
    if (v16 >= 0x41)
    {
      if (v17)
      {
        result = MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
        if (v49 >= 0x41)
        {
          result = (uint64_t)__s2;
          if (__s2)
            result = MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        }
      }
    }
    v6 = *a2;
    v21 = v6;
    if ((v20 & 1) != 0)
      goto LABEL_32;
  }
  else
  {
    v21 = *(_WORD *)a2;
  }
  if (v6 != 2)
  {
    v25 = *a3;
    if ((*a3 & 0xFE) != 4)
      goto LABEL_50;
    v49 = *((_DWORD *)a3 + 4);
    if (v49 > 0x40)
    {
      __s2 = (void *)operator new[]();
      memcpy(__s2, *((const void **)a3 + 1), (((unint64_t)v49 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      __s2 = (void *)*((_QWORD *)a3 + 1);
    }
    result = llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    v26 = v49;
    v27 = __s2;
    v49 = 0;
    v28 = *((unsigned int *)a3 + 8);
    if (v28 > 0x40)
    {
      v43 = __s2;
      result = memcmp(*((const void **)a3 + 3), __s2, ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8);
      v27 = v43;
      v29 = (_DWORD)result == 0;
    }
    else
    {
      v29 = *((_QWORD *)a3 + 3) == (_QWORD)__s2;
    }
    v30 = v29;
    if (v26 >= 0x41)
    {
      if (v27)
      {
        result = MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
        if (v49 >= 0x41)
        {
          result = (uint64_t)__s2;
          if (__s2)
            result = MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        }
      }
    }
    v25 = *a3;
    if (v30)
    {
      v31 = *a3;
      v32 = *a3;
    }
    else
    {
LABEL_50:
      v32 = v25;
      if (v25 != 2)
      {
        if ((v25 & 0xFE) == 4 && (*(_WORD *)a2 & 0xFE) == 4)
        {
          llvm::ConstantRange::intersectWith((uint64_t)(a2 + 8), (llvm::ConstantRange *)(a3 + 4), 0, (uint64_t)&__s2);
          v45 = v49;
          v44 = __s2;
          v47 = v51;
          v46 = v50;
          v49 = 0;
          v51 = 0;
          v36 = *a2 == 5 || *(_BYTE *)a3 == 5;
          result = sub_1C4E8E6E0((uint64_t)&v44, v36, (__int16 *)v4);
          if (v47 >= 0x41)
          {
            result = v46;
            if (v46)
              result = MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
          }
          if (v45 >= 0x41)
          {
            result = (uint64_t)v44;
            if (v44)
              result = MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
          }
          if (v51 >= 0x41)
          {
            result = v50;
            if (v50)
              result = MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
          }
          if (v49 >= 0x41)
          {
            result = (uint64_t)__s2;
            if (__s2)
              return MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
          }
          return result;
        }
        v12 = *(_WORD *)a2;
        *(_WORD *)v4 = *(_WORD *)a2;
LABEL_14:
        if ((v12 - 4) >= 2)
        {
          v13 = v12 - 2;
          goto LABEL_16;
        }
LABEL_34:
        v22 = *((_DWORD *)a2 + 4);
        *(_DWORD *)(v4 + 16) = v22;
        if (v22 > 0x40)
        {
          v37 = (void *)operator new[]();
          *(_QWORD *)(v4 + 8) = v37;
          result = (uint64_t)memcpy(v37, *((const void **)a2 + 1), (((unint64_t)*(unsigned int *)(v4 + 16) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *(_QWORD *)(v4 + 8) = *((_QWORD *)a2 + 1);
        }
        v23 = *((_DWORD *)a2 + 8);
        *(_DWORD *)(v4 + 32) = v23;
        if (v23 > 0x40)
        {
          v38 = (void *)operator new[]();
          *(_QWORD *)(v4 + 24) = v38;
          result = (uint64_t)memcpy(v38, *((const void **)a2 + 3), (((unint64_t)*(unsigned int *)(v4 + 32) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *(_QWORD *)(v4 + 24) = *((_QWORD *)a2 + 3);
        }
        v24 = a2[1];
        goto LABEL_59;
      }
      v31 = 2;
    }
    *(_WORD *)v4 = v31;
    if ((v32 - 4) >= 2)
    {
      v10 = v32 - 2;
LABEL_9:
      if (v10 < 2)
      {
        v11 = *((_QWORD *)a3 + 1);
LABEL_18:
        *(_QWORD *)(v4 + 8) = v11;
        return result;
      }
      return result;
    }
    goto LABEL_54;
  }
LABEL_32:
  *(_WORD *)v4 = v6;
  if ((v21 - 4) < 2)
    goto LABEL_34;
  v13 = v21 - 2;
LABEL_16:
  if (v13 < 2)
  {
    v11 = *((_QWORD *)a2 + 1);
    goto LABEL_18;
  }
  return result;
}

void sub_1C4E8CDD8(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  int v4;
  llvm::Type **v5;
  _QWORD **v6;
  uint64_t i;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _QWORD **v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  llvm::Type ***v32;
  unsigned __int8 *v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  _QWORD **v39;
  int v40;
  unsigned int v41;
  void **v42;
  void *v43;
  int v44;
  _QWORD **v45;
  int v46;
  unsigned int v47;
  unsigned __int8 *v48;
  _QWORD *v49;
  _QWORD **v50;
  unsigned int v51;
  _QWORD *v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  __int16 v61;
  _QWORD **v62;
  unsigned int v63;
  _QWORD **v64;
  unsigned int v65;
  _QWORD **v66;
  void *v68;
  uint64_t v69;
  BOOL v70;
  _QWORD **v71;
  unsigned int v72;
  void *v73;
  uint64_t v74;
  __int16 v75;
  int v76;
  unint64_t *v77;
  int v78;
  _QWORD **v79;
  int v80;
  unsigned int v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  BOOL v86;
  unsigned int v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  int v93;
  _QWORD **v94;
  _QWORD *v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  uint64_t *v99;
  uint64_t v100;
  __int16 v101;
  int v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD **v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unsigned int v114;
  size_t v115;
  void *v116;
  size_t v117;
  void *v118;
  void *v123;
  void **v124;
  uint64_t v125;
  unint64_t *v126;
  unsigned int PrimitiveSizeInBits;
  _QWORD *v128;
  unsigned int v129;
  void *v130;
  unsigned int v131;
  void *__s1;
  uint64_t v133;
  void *__s2;
  unsigned int v135;
  void *v136;
  uint64_t v137;
  _QWORD v138[6];
  uint64_t v139;
  _QWORD *v140;
  unsigned int v141;
  void **p_s1;
  void **v143;
  void *v144;
  _QWORD *v145;
  unsigned int v146;
  uint64_t v147;

  v4 = a4;
  v5 = (llvm::Type **)a2;
  v147 = *MEMORY[0x1E0C80C00];
  v139 = 1;
  v6 = &v140;
  for (i = 8; i != 200; i += 48)
    *(uint64_t *)((char *)&v139 + i) = -4096;
  v8 = 0;
  v9 = 0;
  v136 = v138;
  v138[0] = a3;
  v137 = 0x600000001;
  v10 = 1;
  do
  {
    while (1)
    {
      v11 = *((_QWORD *)v136 + v10 - 1);
      v125 = v11;
      if ((v139 & 1) != 0)
      {
        v12 = 4;
        v13 = &v140;
      }
      else
      {
        v12 = v141;
        if (!v141)
        {
          v22 = 0;
          goto LABEL_21;
        }
        v13 = (_QWORD **)v140;
      }
      v14 = v12 - 1;
      v15 = v14 & ((v11 >> 4) ^ (v11 >> 9));
      v16 = &v13[6 * v15];
      v17 = *v16;
      if (v11 == *v16)
        goto LABEL_42;
      v18 = 0;
      v19 = 1;
      while (v17 != -4096)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v17 == -8192;
        if (v20)
          v18 = v16;
        v21 = v15 + v19++;
        v15 = v21 & v14;
        v16 = &v13[6 * v15];
        v17 = *v16;
        if (v11 == *v16)
          goto LABEL_42;
      }
      v22 = v18 ? v18 : v16;
LABEL_21:
      v23 = sub_1C4E8E8D4((uint64_t)&v139, &v125, v22);
      *v23 = v11;
      *((_WORD *)v23 + 4) = 6;
      v24 = *(unsigned __int8 *)(v11 + 16);
      if (v11 && v24 == 81)
      {
        v25 = *(_WORD *)(v11 + 18);
        v26 = v25 & 0x3F;
        if ((v4 & 1) == 0)
          LODWORD(v26) = dword_1C85F3EC8[v26];
        v27 = *(_QWORD *)(v11 - 64);
        v28 = *(_QWORD *)(v11 - 32);
        v29 = *(unsigned __int8 *)(v28 + 16);
        if (v29 > 0x14 || (v25 & 0x3E) != 0x20 || (llvm::Type **)v27 != v5)
          goto LABEL_282;
        if ((_DWORD)v26 == 32)
        {
          LOWORD(p_s1) = 0;
          if (v29 - 11 > 1)
            sub_1C4E8C21C((uint64_t)&p_s1, v28, 0);
          else
            LOWORD(p_s1) = 1;
          goto LABEL_164;
        }
        if (v29 - 11 >= 2)
        {
          LOWORD(p_s1) = 0;
          sub_1C4E90C9C((uint64_t)&p_s1, v28);
        }
        else
        {
LABEL_282:
          if (*((_BYTE *)*v5 + 8) == 13)
          {
            PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*v5);
            if (PrimitiveSizeInBits > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v126, 0, 0);
            else
              v126 = 0;
            if (!sub_1C4E8F324(&v126, v27, a2, v26))
              __asm { BR              X9 }
            sub_1C4E8F6BC((__int16 *)&p_s1, v26, (uint64_t ***)v28, &v126);
            v5 = (llvm::Type **)a2;
            v4 = a4;
            if (PrimitiveSizeInBits < 0x41)
              goto LABEL_164;
            v77 = v126;
            if (!v126)
              goto LABEL_164;
LABEL_163:
            MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
            goto LABEL_164;
          }
          LOWORD(p_s1) = 6;
        }
      }
      else
      {
        if (!v11
          || v24 != 92
          || (v30 = *(_QWORD *)(v11 - 32), v31 = sub_1C4E8FD48(v30), !v30)
          || !v31
          || *(_DWORD *)(v11 + 72) != 1
          || **(_DWORD **)(v11 + 64) != 1)
        {
LABEL_42:
          __s1 = 0;
          v128 = 0;
          p_s1 = &__s1;
          v143 = (void **)&v128;
          if ((sub_1C4848F80(&p_s1, v11) & 1) != 0)
          {
            v36 = 1;
          }
          else
          {
            p_s1 = &__s1;
            v143 = (void **)&v128;
            if (!sub_1C4849098(&p_s1, v11))
              goto LABEL_83;
            v36 = 0;
          }
          v37 = v139 & 1;
          if ((v139 & 1) != 0)
          {
            v38 = 4;
            v39 = &v140;
            goto LABEL_49;
          }
          v39 = (_QWORD **)v140;
          v38 = v141;
          if (v141)
          {
LABEL_49:
            v40 = v38 - 1;
            v41 = v40 & ((__s1 >> 4) ^ (__s1 >> 9));
            v42 = (void **)&v39[6 * v41];
            v43 = *v42;
            if (*v42 == __s1)
              goto LABEL_50;
            v55 = 1;
            while (v43 != (void *)-4096)
            {
              v56 = v41 + v55++;
              v41 = v56 & v40;
              v42 = (void **)&v39[6 * v41];
              v43 = *v42;
              if (*v42 == __s1)
                goto LABEL_50;
            }
            if ((v139 & 1) != 0)
            {
              v39 = &v140;
              v59 = 4;
            }
            else
            {
              v39 = (_QWORD **)v140;
              v59 = v141;
            }
          }
          else
          {
            v59 = 0;
          }
          v42 = (void **)&v39[6 * v59];
LABEL_50:
          if ((v139 & 1) != 0)
          {
            v44 = 4;
            v45 = &v140;
            goto LABEL_53;
          }
          v45 = (_QWORD **)v140;
          v44 = v141;
          if (v141)
          {
LABEL_53:
            v46 = v44 - 1;
            v47 = v46 & ((v128 >> 4) ^ (v128 >> 9));
            v48 = (unsigned __int8 *)&v45[6 * v47];
            v49 = *(_QWORD **)v48;
            if (*(_QWORD **)v48 == v128)
            {
LABEL_54:
              v50 = (_QWORD **)v140;
              v51 = v141;
              if (v36 != v4)
              {
                v52 = (v139 & 1) != 0 ? &v140 : v140;
                v53 = (v139 & 1) != 0 ? 4 : v141;
                if (&v52[6 * v53] != v42)
                {
                  v54 = *((unsigned __int8 *)v42 + 8);
                  LOWORD(p_s1) = *((unsigned __int8 *)v42 + 8);
                  if ((v54 - 4) < 2)
                  {
                    LODWORD(v144) = *((_DWORD *)v42 + 6);
                    if (v144 > 0x40)
                    {
                      v143 = (void **)operator new[]();
                      memcpy(v143, v42[2], (((unint64_t)v144 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v143 = (void **)v42[2];
                    }
                    v146 = *((_DWORD *)v42 + 10);
                    if (v146 > 0x40)
                    {
                      v145 = (_QWORD *)operator new[]();
                      memcpy(v145, v42[4], (((unint64_t)v146 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v145 = v42[4];
                    }
                    LOBYTE(v54) = (_BYTE)p_s1;
                    LOWORD(p_s1) = p_s1 | (*((unsigned __int8 *)v42 + 9) << 8);
                  }
                  else if ((v54 - 2) < 2)
                  {
                    v143 = (void **)v42[2];
                  }
                  if (v54 == 6)
                  {
LABEL_83:
                    v61 = 6;
                    goto LABEL_168;
                  }
                  if ((v139 & 1) != 0)
                    v62 = &v140;
                  else
                    v62 = (_QWORD **)v140;
                  v63 = v141;
                  if ((v139 & 1) != 0)
                    v63 = 4;
                  if (&v62[6 * v63] != (_QWORD **)v48)
                  {
                    sub_1C4E8EE28((uint64_t)&p_s1, v48 + 8, 0x100000000);
                    goto LABEL_128;
                  }
                  if ((v54 & 0xFE) == 4)
                  {
                    if (v146 >= 0x41 && v145)
                      MEMORY[0x1CAA32F9C](v145, 0x1000C8000313F17);
                    if (v144 >= 0x41 && v143)
                      MEMORY[0x1CAA32F9C](v143, 0x1000C8000313F17);
                  }
                  v50 = (_QWORD **)v140;
                  v51 = v141;
                  v37 = v139 & 1;
                }
              }
              if (v37)
                v64 = &v140;
              else
                v64 = v50;
              if (v37)
                v65 = 4;
              else
                v65 = v51;
              v66 = &v64[6 * v65];
              if (v66 == (_QWORD **)v42 || v66 == (_QWORD **)v48)
              {
                if (v66 == (_QWORD **)v42)
                {
                  v68 = __s1;
                  v69 = v137;
                  if (v137 >= (unint64_t)HIDWORD(v137))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v136, (uint64_t)v138, v137 + 1, 8);
                    v69 = v137;
                  }
                  *((_QWORD *)v136 + v69) = v68;
                  LODWORD(v137) = v137 + 1;
                  v50 = (_QWORD **)v140;
                  v51 = v141;
                  v37 = v139 & 1;
                }
                v70 = v37 == 0;
                if (v37)
                  v71 = &v140;
                else
                  v71 = v50;
                if (v70)
                  v72 = v51;
                else
                  v72 = 4;
                if (&v71[6 * v72] == (_QWORD **)v48)
                {
                  v73 = v128;
                  v74 = v137;
                  if (v137 >= (unint64_t)HIDWORD(v137))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v136, (uint64_t)v138, v137 + 1, 8);
                    v74 = v137;
                  }
                  *((_QWORD *)v136 + v74) = v73;
                  LODWORD(v137) = v137 + 1;
                }
                goto LABEL_200;
              }
              sub_1C4E8C7E8((uint64_t)&p_s1, (unsigned __int8 *)v42 + 8, (__int16 *)v48 + 4);
LABEL_128:
              v75 = (__int16)p_s1;
              v61 = p_s1;
              if (p_s1 - 2 < 2)
              {
                v124 = v143;
                goto LABEL_168;
              }
              if (p_s1 - 4 <= 1)
                goto LABEL_166;
              goto LABEL_168;
            }
            v57 = 1;
            while (v49 != (_QWORD *)-4096)
            {
              v58 = v47 + v57++;
              v47 = v58 & v46;
              v48 = (unsigned __int8 *)&v45[6 * v47];
              v49 = *(_QWORD **)v48;
              if (*(_QWORD **)v48 == v128)
                goto LABEL_54;
            }
            if ((v139 & 1) != 0)
            {
              v45 = &v140;
              v60 = 4;
            }
            else
            {
              v45 = (_QWORD **)v140;
              v60 = v141;
            }
          }
          else
          {
            v60 = 0;
          }
          v48 = (unsigned __int8 *)&v45[6 * v60];
          goto LABEL_54;
        }
        v126 = 0;
        v32 = (llvm::Type ***)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF));
        if (*v32 != v5)
          goto LABEL_83;
        v33 = (unsigned __int8 *)v32[4];
        p_s1 = (void **)&v126;
        v143 = 0;
        if ((sub_1C4D89F84((uint64_t)&p_s1, v33) & 1) == 0)
          goto LABEL_83;
        v34 = 13;
        v35 = *(_DWORD *)(*(_QWORD *)(v30 - 32) + 36) - 262;
        if (((1 << (*(_BYTE *)(*(_QWORD *)(v30 - 32) + 36) - 6)) & 0xC000000003) == 0)
        {
          if (((1 << v35) & 0x6000000600000) != 0)
            v34 = 15;
          else
            v34 = 17;
        }
        if (v35 <= 0x16 && ((1 << v35) & 0x610003) != 0)
          v76 = 2;
        else
          v76 = 1;
        llvm::ConstantRange::makeExactNoWrapRegion(v34, (uint64_t)v126, v76, (uint64_t)&__s1);
        if (v4)
        {
          llvm::ConstantRange::inverse((llvm::ConstantRange *)&__s1, (uint64_t)&p_s1);
          if (v133 >= 0x41 && __s1)
            MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
          __s1 = p_s1;
          LODWORD(v133) = (_DWORD)v143;
          LODWORD(v143) = 0;
          if (v135 >= 0x41 && __s2)
          {
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
            __s2 = v144;
            v135 = v145;
            LODWORD(v145) = 0;
            if (v143 >= 0x41 && p_s1)
              MEMORY[0x1CAA32F9C](p_s1, 0x1000C8000313F17);
          }
          else
          {
            __s2 = v144;
            v135 = v145;
          }
        }
        v129 = v133;
        if (v133 > 0x40)
        {
          v128 = (_QWORD *)operator new[]();
          memcpy(v128, __s1, (((unint64_t)v129 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v128 = __s1;
        }
        v131 = v135;
        if (v135 > 0x40)
        {
          v130 = (void *)operator new[]();
          memcpy(v130, __s2, (((unint64_t)v131 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v130 = __s2;
        }
        sub_1C4E8E6E0((uint64_t)&v128, 0, (__int16 *)&p_s1);
        if (v131 >= 0x41 && v130)
          MEMORY[0x1CAA32F9C](v130, 0x1000C8000313F17);
        if (v129 >= 0x41 && v128)
          MEMORY[0x1CAA32F9C](v128, 0x1000C8000313F17);
        if (v135 >= 0x41 && __s2)
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        if (v133 >= 0x41)
        {
          v77 = (unint64_t *)__s1;
          if (__s1)
            goto LABEL_163;
        }
      }
LABEL_164:
      v75 = (__int16)p_s1;
      v61 = p_s1;
      if (p_s1 - 2 >= 2)
      {
        if (p_s1 - 4 > 1)
          goto LABEL_168;
LABEL_166:
        v9 = v144;
        v124 = v143;
        v8 = v146;
        v61 = v75;
        v123 = v145;
        goto LABEL_168;
      }
      v124 = v143;
LABEL_168:
      if ((v139 & 1) != 0)
      {
        v78 = 4;
        v79 = &v140;
      }
      else
      {
        v78 = v141;
        if (!v141)
        {
          v88 = 0;
          goto LABEL_185;
        }
        v79 = (_QWORD **)v140;
      }
      v80 = v78 - 1;
      v81 = ((v125 >> 4) ^ (v125 >> 9)) & v80;
      v82 = &v79[6 * v81];
      v83 = *v82;
      if (v125 == *v82)
        goto LABEL_186;
      v84 = 0;
      v85 = 1;
      while (v83 != -4096)
      {
        if (v84)
          v86 = 0;
        else
          v86 = v83 == -8192;
        if (v86)
          v84 = v82;
        v87 = v81 + v85++;
        v81 = v87 & v80;
        v82 = &v79[6 * v81];
        v83 = *v82;
        if (v125 == *v82)
          goto LABEL_186;
      }
      v88 = v84 ? v84 : v82;
LABEL_185:
      v82 = sub_1C4E8E8D4((uint64_t)&v139, &v125, v88);
      *v82 = v125;
      *((_WORD *)v82 + 4) = 0;
LABEL_186:
      if ((v82[1] & 0xFE) == 4)
      {
        if (*((_DWORD *)v82 + 10) >= 0x41u)
        {
          v89 = v82[4];
          if (v89)
            MEMORY[0x1CAA32F9C](v89, 0x1000C8000313F17);
        }
        if (*((_DWORD *)v82 + 6) >= 0x41u)
        {
          v90 = v82[2];
          if (v90)
            MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
        }
      }
      *((_WORD *)v82 + 4) = v61;
      if (v61 - 4 < 2)
      {
        *((_DWORD *)v82 + 6) = v9;
        if (v9 > 0x40)
        {
          v91 = (void *)operator new[]();
          v82[2] = v91;
          memcpy(v91, v124, (((unint64_t)*((unsigned int *)v82 + 6) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v82[2] = v124;
        }
        *((_DWORD *)v82 + 10) = v8;
        if (v8 > 0x40)
        {
          v92 = (void *)operator new[]();
          v82[4] = v92;
          memcpy(v92, v123, (((unint64_t)*((unsigned int *)v82 + 10) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v82[4] = v123;
        }
        *((_WORD *)v82 + 4) = *((unsigned __int8 *)v82 + 8) | v61 & 0xFF00;
      }
      else if (v61 - 2 < 2)
      {
        v82[2] = v124;
      }
      v10 = v137 - 1;
      LODWORD(v137) = v137 - 1;
      if ((v61 & 0xFE) != 4)
        break;
      if (v8 >= 0x41 && v123)
        MEMORY[0x1CAA32F9C](v123, 0x1000C8000313F17);
      if (v9 >= 0x41)
      {
        if (v124)
          MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
        else
          v124 = 0;
      }
LABEL_200:
      v10 = v137;
      if (!(_DWORD)v137)
        goto LABEL_236;
    }
  }
  while (v10);
LABEL_236:
  if ((v139 & 1) != 0)
  {
    v93 = 4;
    v94 = &v140;
    v95 = a3;
    v96 = a1;
    goto LABEL_239;
  }
  v94 = (_QWORD **)v140;
  v93 = v141;
  v95 = a3;
  v96 = a1;
  if (v141)
  {
LABEL_239:
    v97 = v93 - 1;
    v98 = v97 & ((v95 >> 4) ^ (v95 >> 9));
    v99 = (uint64_t *)&v94[6 * v98];
    v100 = *v99;
    if ((_QWORD *)*v99 == v95)
      goto LABEL_240;
    v103 = 1;
    while (v100 != -4096)
    {
      v104 = v98 + v103++;
      v98 = v104 & v97;
      v99 = (uint64_t *)&v94[6 * v98];
      v100 = *v99;
      if ((_QWORD *)*v99 == v95)
        goto LABEL_240;
    }
    if ((v139 & 1) != 0)
    {
      v114 = 4;
      v94 = &v140;
    }
    else
    {
      v94 = (_QWORD **)v140;
      v114 = v141;
    }
  }
  else
  {
    v114 = 0;
  }
  v99 = (uint64_t *)&v94[6 * v114];
LABEL_240:
  v101 = *((unsigned __int8 *)v99 + 8);
  *(_WORD *)v96 = v101;
  v102 = *((unsigned __int8 *)v99 + 8);
  if ((v102 - 4) < 2)
  {
    v105 = *((unsigned int *)v99 + 6);
    *(_DWORD *)(v96 + 16) = v105;
    if (v105 > 0x40)
    {
      v115 = ((unint64_t)(v105 + 63) >> 3) & 0x3FFFFFF8;
      v116 = (void *)operator new[]();
      *(_QWORD *)(v96 + 8) = v116;
      memcpy(v116, (const void *)v99[2], v115);
    }
    else
    {
      *(_QWORD *)(v96 + 8) = v99[2];
    }
    v106 = *((unsigned int *)v99 + 10);
    *(_DWORD *)(v96 + 32) = v106;
    if (v106 > 0x40)
    {
      v117 = ((unint64_t)(v106 + 63) >> 3) & 0x3FFFFFF8;
      v118 = (void *)operator new[]();
      *(_QWORD *)(v96 + 24) = v118;
      memcpy(v118, (const void *)v99[4], v117);
    }
    else
    {
      *(_QWORD *)(v96 + 24) = v99[4];
    }
    *(_WORD *)v96 = v101 | (*((unsigned __int8 *)v99 + 9) << 8);
  }
  else if ((v102 - 2) < 2)
  {
    *(_QWORD *)(v96 + 8) = v99[2];
  }
  if (v136 != v138)
    free(v136);
  v107 = v139;
  if ((v139 & 1) != 0)
  {
    v108 = 4;
LABEL_256:
    v109 = 48 * v108;
    v110 = v6 + 3;
    do
    {
      v111 = (uint64_t)*(v110 - 3);
      if (v111 != -4096 && v111 != -8192 && (*(_WORD *)(v110 - 2) & 0xFE) == 4)
      {
        if (*((_DWORD *)v110 + 4) >= 0x41u)
        {
          v113 = v110[1];
          if (v113)
            MEMORY[0x1CAA32F9C](v113, 0x1000C8000313F17);
        }
        if (*(_DWORD *)v110 >= 0x41u)
        {
          v112 = (uint64_t)*(v110 - 1);
          if (v112)
            MEMORY[0x1CAA32F9C](v112, 0x1000C8000313F17);
        }
      }
      v110 += 6;
      v109 -= 48;
    }
    while (v109);
    v107 = v139;
  }
  else
  {
    v108 = v141;
    if (v141)
    {
      v6 = (_QWORD **)v140;
      goto LABEL_256;
    }
  }
  if ((v107 & 1) == 0)
    MEMORY[0x1CAA32FB4](v140, 8);
}

uint64_t sub_1C4E8E6E0@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, __int16 *a3@<X8>)
{
  llvm::APInt *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;

  v4 = (llvm::APInt *)result;
  v6 = *(unsigned int *)(result + 8);
  if (v6 <= 0x40)
  {
    v7 = *(_QWORD *)result;
    v8 = *(_QWORD *)(result + 16);
    if (*(_QWORD *)result != v8 || ((_DWORD)v6 ? (v9 = v7 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v6) : (v9 = 1), !v9))
    {
      if (v8 | v7)
        goto LABEL_4;
LABEL_17:
      *a3 = a2;
      return result;
    }
LABEL_13:
    *a3 = 6;
    return result;
  }
  v7 = *(_QWORD *)result;
  v8 = *(_QWORD *)(result + 16);
  if (!memcmp(*(const void **)result, (const void *)v8, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8))
  {
    result = llvm::APInt::countTrailingOnesSlowCase(v4);
    if ((_DWORD)result == (_DWORD)v6)
      goto LABEL_13;
    result = llvm::APInt::countLeadingZerosSlowCase(v4);
    if ((_DWORD)result == (_DWORD)v6)
      goto LABEL_17;
  }
LABEL_4:
  *a3 = 0;
  v11 = v6;
  v10 = v7;
  *((_DWORD *)v4 + 2) = 0;
  v13 = *((_DWORD *)v4 + 6);
  v12 = v8;
  *((_DWORD *)v4 + 6) = 0;
  result = sub_1C4E8C3D4(a3, (uint64_t)&v10, a2 | 0x100000000);
  if (v13 >= 0x41)
  {
    result = v12;
    if (v12)
      result = MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  }
  if (v11 >= 0x41)
  {
    result = v10;
    if (v10)
      return MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C4E8E838(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 48 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 48 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_8;
    }
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4E8E8D4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  _QWORD *v19;

  v5 = *(_DWORD *)a1;
  v6 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v7 = 4;
  else
    v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C4E8EA4C(a1, 2 * v7);
    v10 = a1 + 8;
    v5 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v11 = 4;
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 16);
      if (!v11)
      {
        v8 = 0;
        a3 = 0;
        goto LABEL_7;
      }
      v10 = *(_QWORD *)(a1 + 8);
    }
    v8 = *(_DWORD *)a1 & 1;
    v12 = v11 - 1;
    v13 = ((*a2 >> 4) ^ (*a2 >> 9)) & v12;
    a3 = (_QWORD *)(v10 + 48 * v13);
    v14 = *a3;
    if (*a2 != *a3)
    {
      v15 = 0;
      v16 = 1;
      while (v14 != -4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -8192;
        if (v17)
          v15 = a3;
        v18 = v13 + v16++;
        v13 = v18 & v12;
        a3 = (_QWORD *)(v10 + 48 * v13);
        v14 = *a3;
        if (*a2 == *a3)
          goto LABEL_7;
      }
      if (v15)
        a3 = v15;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 4) <= v7 >> 3)
    {
      sub_1C4E8EA4C(a1, v7);
      v19 = 0;
      sub_1C4E8E838(a1, *a2, &v19);
      a3 = v19;
      v5 = *(_DWORD *)a1;
    }
    v8 = v5 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v8) + 2;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a3;
}

int *sub_1C4E8EA4C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17[25];

  v17[24] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v16 = a2;
      *(_QWORD *)(a1 + 8) = operator new(48 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v16;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E8EC5C((int *)a1, v6, &v6[6 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v17;
  do
  {
    v10 = a1 + v8;
    v11 = *(_QWORD *)(a1 + v8 + 8);
    if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v11;
      *((_WORD *)v9 + 4) = *(unsigned __int8 *)(v10 + 16);
      v12 = *(unsigned __int8 *)(v10 + 16);
      if ((v12 - 4) < 2)
      {
        v13 = a1 + v8;
        *((_DWORD *)v9 + 6) = *(_DWORD *)(a1 + v8 + 32);
        v9[2] = *(_QWORD *)(a1 + v8 + 24);
        *(_DWORD *)(v13 + 32) = 0;
        *((_DWORD *)v9 + 10) = *(_DWORD *)(a1 + v8 + 48);
        v9[4] = *(_QWORD *)(a1 + v8 + 40);
        *(_DWORD *)(v13 + 48) = 0;
        *((_BYTE *)v9 + 9) = *(_BYTE *)(v10 + 17);
      }
      else if ((v12 - 2) < 2)
      {
        v9[2] = *(_QWORD *)(a1 + v8 + 24);
      }
      *(_WORD *)(v10 + 16) = *(unsigned __int8 *)(v10 + 17) << 8;
      v9 += 6;
    }
    v8 += 48;
  }
  while (v8 != 192);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v14 = a2;
    *(_QWORD *)(a1 + 8) = operator new(48 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v14;
  }
  return sub_1C4E8EC5C((int *)a1, v17, v9);
}

int *sub_1C4E8EC5C(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int *v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  int *v22;
  int *v23;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  v4 = result + 2;
  if ((v3 & 1) != 0)
  {
    v7 = result + 50;
    v6 = result + 2;
  }
  else
  {
    v5 = result[4];
    if (!v5)
      goto LABEL_5;
    v6 = (_QWORD *)*((_QWORD *)result + 1);
    v7 = &v6[6 * v5];
  }
  do
  {
    *v6 = -4096;
    v6 += 6;
  }
  while (v6 != v7);
LABEL_5:
  while (a2 != a3)
  {
    v8 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v9 = 4;
        v10 = v4;
      }
      else
      {
        v10 = (int *)*((_QWORD *)result + 1);
        v9 = result[4];
      }
      v11 = v9 - 1;
      v12 = (v9 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      v13 = (uint64_t *)&v10[12 * v12];
      v14 = *v13;
      if (v8 != *v13)
      {
        v15 = 0;
        v16 = 1;
        while (v14 != -4096)
        {
          if (v15)
            v18 = 0;
          else
            v18 = v14 == -8192;
          if (v18)
            v15 = v13;
          v19 = v12 + v16++;
          v12 = v19 & v11;
          v13 = (uint64_t *)&v10[12 * (v19 & v11)];
          v14 = *v13;
          if (v8 == *v13)
            goto LABEL_14;
        }
        if (v15)
          v13 = v15;
      }
LABEL_14:
      *v13 = v8;
      *((_WORD *)v13 + 4) = *((unsigned __int8 *)a2 + 8);
      v17 = *((unsigned __int8 *)a2 + 8);
      if ((v17 - 4) < 2)
      {
        *((_DWORD *)v13 + 6) = *((_DWORD *)a2 + 6);
        v13[2] = a2[2];
        *((_DWORD *)a2 + 6) = 0;
        *((_DWORD *)v13 + 10) = *((_DWORD *)a2 + 10);
        v13[4] = a2[4];
        *((_DWORD *)a2 + 10) = 0;
        *((_BYTE *)v13 + 9) = *((_BYTE *)a2 + 9);
      }
      else if ((v17 - 2) < 2)
      {
        v13[2] = a2[2];
      }
      *((_WORD *)a2 + 4) = *((unsigned __int8 *)a2 + 9) << 8;
      *result += 2;
      if ((a2[1] & 0xFE) == 4)
      {
        v23 = v4;
        v21 = a3;
        v22 = result;
        v20 = a2;
        sub_1C4E8C6FC((uint64_t)(a2 + 2));
        v4 = v23;
        a3 = v21;
        result = v22;
        a2 = v20;
      }
    }
    a2 += 6;
  }
  return result;
}

uint64_t sub_1C4E8EE28(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  __int16 v3;
  int v4;
  __int16 v6;
  int v7;
  _BOOL8 v8;
  unint64_t v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  size_t v27;
  void *v28;
  size_t v29;
  void *v30;
  const void *v31;
  unint64_t v32;
  void *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  void *v41;
  unsigned int v42;
  void *v43;
  unsigned int v44;

  v3 = *(_WORD *)a2;
  v4 = *(_WORD *)a2;
  if (!*(_WORD *)a2)
    return 0;
  v6 = *(_WORD *)a1;
  v7 = *(_WORD *)a1;
  if (v7 == 6)
    return 0;
  if (v4 == 6)
  {
LABEL_5:
    if ((v6 & 0xFE) == 4)
    {
      if (*(_DWORD *)(a1 + 32) >= 0x41u)
      {
        v21 = *(_QWORD *)(a1 + 24);
        if (v21)
          MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
      }
      if (*(_DWORD *)(a1 + 16) >= 0x41u)
      {
        v22 = *(_QWORD *)(a1 + 8);
        if (v22)
          MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
      }
    }
    *(_BYTE *)a1 = 6;
    return 1;
  }
  else
  {
    v11 = a3 & 0xFFFFFFFFFFFFFF00;
    switch(*(_WORD *)a1)
    {
      case 0u:
        if ((v6 & 0xFE) == 4)
        {
          if (*(_DWORD *)(a1 + 32) >= 0x41u)
          {
            v23 = *(_QWORD *)(a1 + 24);
            if (v23)
              MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
          }
          if (*(_DWORD *)(a1 + 16) >= 0x41u)
          {
            v24 = *(_QWORD *)(a1 + 8);
            if (v24)
              MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
          }
        }
        *(_WORD *)a1 = *a2;
        v12 = *a2;
        if ((v12 - 4) < 2)
        {
          v19 = *((_DWORD *)a2 + 4);
          *(_DWORD *)(a1 + 16) = v19;
          if (v19 > 0x40)
          {
            v25 = (void *)operator new[]();
            *(_QWORD *)(a1 + 8) = v25;
            memcpy(v25, *((const void **)a2 + 1), (((unint64_t)*(unsigned int *)(a1 + 16) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
          }
          v20 = *((_DWORD *)a2 + 8);
          *(_DWORD *)(a1 + 32) = v20;
          if (v20 > 0x40)
          {
            v26 = (void *)operator new[]();
            *(_QWORD *)(a1 + 24) = v26;
            memcpy(v26, *((const void **)a2 + 3), (((unint64_t)*(unsigned int *)(a1 + 32) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
          }
          *(_BYTE *)(a1 + 1) = a2[1];
        }
        else if ((v12 - 2) < 2)
        {
          *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
        }
        return 1;
      case 1u:
        if (*(_WORD *)a2 == 1)
          return 0;
        if (*(_WORD *)a2 == 2)
          return sub_1C4E8C21C(a1, *((_QWORD *)a2 + 1), 1u);
        if ((v3 & 0xFE) != 4)
          goto LABEL_5;
        v15 = *((unsigned int *)a2 + 4);
        v42 = v15;
        if (v15 > 0x40)
        {
          v27 = ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8;
          v32 = a3 & 0xFFFFFFFFFFFFFF00;
          v28 = (void *)operator new[]();
          memcpy(v28, *((const void **)a2 + 1), v27);
          v16 = v28;
          v11 = v32;
        }
        else
        {
          v16 = (void *)*((_QWORD *)a2 + 1);
        }
        v41 = v16;
        v17 = *((unsigned int *)a2 + 8);
        v44 = v17;
        if (v17 > 0x40)
        {
          v29 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
          v30 = (void *)operator new[]();
          v31 = (const void *)*((_QWORD *)a2 + 3);
          v18 = v30;
          memcpy(v30, v31, v29);
        }
        else
        {
          v18 = (void *)*((_QWORD *)a2 + 3);
        }
        v43 = v18;
        v8 = sub_1C4E8C3D4((__int16 *)a1, (uint64_t)&v41, v11 | 1);
        if (v44 >= 0x41 && v43)
          MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
        if (v42 >= 0x41)
        {
          v14 = v41;
          if (v41)
            goto LABEL_44;
        }
        return v8;
      case 2u:
        v13 = *(_WORD *)a2;
        if (v13 == 1)
          return 0;
        if (v13 != 2)
          goto LABEL_5;
        goto LABEL_27;
      case 3u:
        if (v4 != 3)
          goto LABEL_5;
LABEL_27:
        if (*(_QWORD *)(a1 + 8) == *((_QWORD *)a2 + 1))
          return 0;
        goto LABEL_5;
      default:
        if (v4 == 1)
        {
          *(_WORD *)a1 = v6 & 0xFF00 | 5;
          return v7 != 5;
        }
        if ((v3 & 0xFE) != 4)
          goto LABEL_5;
        llvm::ConstantRange::unionWith(a1 + 8, (unsigned int *)a2 + 2, 0, (uint64_t)&v37);
        v34 = v38;
        v33 = v37;
        v36 = v40;
        v35 = v39;
        v38 = 0;
        v40 = 0;
        v8 = sub_1C4E8C3D4((__int16 *)a1, (uint64_t)&v33, v11 | (*a2 == 5));
        if (v36 >= 0x41 && v35)
          MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
        if (v34 >= 0x41 && v33)
          MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
        if (v40 >= 0x41 && v39)
          MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
        if (v38 >= 0x41)
        {
          v14 = v37;
          if (v37)
LABEL_44:
            MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
        }
        break;
    }
  }
  return v8;
}

BOOL sub_1C4E8F324(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const void **v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  size_t v26;
  unsigned int v27;
  void *v28;
  unsigned int v29;
  void *v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[7];

  if (a2 == a3)
    return 1;
  v35[5] = v4;
  v35[6] = v5;
  v34 = 0;
  v35[0] = 0;
  v32 = a3;
  v33 = v35;
  v10 = *(unsigned __int8 *)(a2 + 16);
  if (v10 != 5)
  {
    if (v10 != 41
      || *(_QWORD *)(a2 - 64) != a3
      || !sub_1C4D89F84((uint64_t)&v33, *(unsigned __int8 **)(a2 - 32)))
    {
      goto LABEL_14;
    }
LABEL_11:
    v13 = v35[0];
    if (*((_DWORD *)a1 + 2) > 0x40u || *(_DWORD *)(v35[0] + 8) > 0x40u)
    {
      if ((_QWORD *)v35[0] != a1)
      {
        llvm::APInt::reallocate((uint64_t)a1, *(_DWORD *)(v35[0] + 8));
        v25 = *((unsigned int *)a1 + 2);
        if (v25 <= 0x40)
          *a1 = *(_QWORD *)v13;
        else
          memcpy((void *)*a1, *(const void **)v13, ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      *a1 = *(_QWORD *)v35[0];
      *((_DWORD *)a1 + 2) = *(_DWORD *)(v13 + 8);
    }
    return 1;
  }
  if (*(_WORD *)(a2 + 18) == 13)
  {
    v12 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    if (*(_QWORD *)v12 == a3
      && (sub_1C4D8A004((uint64_t)&v33, *(llvm::Constant **)(v12 + 32)) & 1) != 0)
    {
      goto LABEL_11;
    }
  }
LABEL_14:
  v32 = a2;
  v33 = v35;
  v34 = 0;
  v14 = *(unsigned __int8 *)(a3 + 16);
  if (v14 != 5)
  {
    if (v14 != 41
      || *(_QWORD *)(a3 - 64) != a2
      || !sub_1C4D89F84((uint64_t)&v33, *(unsigned __int8 **)(a3 - 32)))
    {
      goto LABEL_27;
    }
LABEL_22:
    v16 = (const void **)v35[0];
    v17 = *(unsigned int *)(v35[0] + 8);
    v31 = v17;
    if (v17 > 0x40)
    {
      v26 = ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8;
      v30 = (void *)operator new[]();
      memcpy(v30, *v16, v26);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v30);
    }
    else
    {
      if ((_DWORD)v17)
        v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
      else
        v18 = 0;
      v30 = (void *)(v18 & ~*(_QWORD *)v35[0]);
    }
    llvm::APInt::operator++((uint64_t)&v30);
    v27 = v31;
    v28 = v30;
    v31 = 0;
    if (*((_DWORD *)a1 + 2) > 0x40u && *a1)
    {
      MEMORY[0x1CAA32F9C](*a1, 0x1000C8000313F17);
      v29 = v31;
      *a1 = v28;
      *((_DWORD *)a1 + 2) = v27;
      if (v29 >= 0x41 && v30)
        MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
    }
    else
    {
      *a1 = v30;
      *((_DWORD *)a1 + 2) = v27;
    }
    return 1;
  }
  if (*(_WORD *)(a3 + 18) == 13)
  {
    v15 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
    if (*(_QWORD *)v15 == a2
      && (sub_1C4D8A004((uint64_t)&v33, *(llvm::Constant **)(v15 + 32)) & 1) != 0)
    {
      goto LABEL_22;
    }
  }
LABEL_27:
  v19 = *(unsigned __int8 *)(a2 + 16);
  if (v19 == 5)
  {
    v21 = *(unsigned __int16 *)(a2 + 18);
    if (v21 != 29)
      goto LABEL_41;
    v22 = (_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (*v22 != a3)
    {
      v20 = v22 + 4;
      goto LABEL_35;
    }
LABEL_38:
    if ((a4 & 0xFFFFFFFE) == 0x24)
      return 1;
    goto LABEL_39;
  }
  if (v19 == 56)
  {
    if (*(_QWORD *)(a2 - 64) != a3)
    {
      v24 = (_QWORD *)(a2 - 32);
      return (a4 & 0xFFFFFFFE) == 0x22 && *v24 == a3;
    }
    return (a4 & 0xFFFFFFFE) == 0x22;
  }
  if (v19 != 57)
    return 0;
  if (*(_QWORD *)(a2 - 64) == a3)
    goto LABEL_38;
  v20 = (_QWORD *)(a2 - 32);
LABEL_35:
  if ((a4 & 0xFFFFFFFE) == 0x24 && *v20 == a3)
    return 1;
LABEL_39:
  if (v19 != 5)
    return 0;
  v21 = *(unsigned __int16 *)(a2 + 18);
LABEL_41:
  if (v21 != 28)
    return 0;
  v23 = (_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  if (*v23 == a3)
    return (a4 & 0xFFFFFFFE) == 0x22;
  v24 = v23 + 4;
  return (a4 & 0xFFFFFFFE) == 0x22 && *v24 == a3;
}

void *sub_1C4E8F6BC(__int16 *a1, int a2, uint64_t ***a3, unint64_t **a4)
{
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t **v15;
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD ***v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  size_t v31;
  int v32;
  void *v33;
  void *result;
  _QWORD *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  unsigned int v40;
  void *v41;
  int v42;
  void *v43;
  unsigned int v44;
  void *__src;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;

  v8 = *((unsigned int *)*a3 + 2);
  v9 = v8 >> 8;
  v46 = *((_DWORD *)*a3 + 2) >> 8;
  if (v8 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
    LODWORD(v9) = v46;
  }
  else
  {
    if (v8 <= 0xFF)
      v10 = 0;
    else
      v10 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v8));
    __src = v10;
  }
  v48 = v9;
  if (v9 > 0x40)
  {
    v12 = (void *)operator new[]();
    v11 = __src;
    memcpy(v12, __src, (((unint64_t)v9 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v11 = __src;
    v12 = __src;
  }
  v47 = (uint64_t)v12;
  v13 = *((unsigned __int8 *)a3 + 16);
  if (v13 == 16)
  {
    v14 = *((unsigned int *)a3 + 8);
    if (v14 > 0x40)
    {
      v31 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
      v15 = (uint64_t **)operator new[]();
      memcpy(v15, a3[3], v31);
      v42 = v14;
      v16 = (void *)operator new[]();
      memcpy(v16, v15, v31);
    }
    else
    {
      v15 = a3[3];
      v42 = *((_DWORD *)a3 + 8);
      v16 = v15;
    }
    v41 = v16;
    llvm::APInt::operator+=((uint64_t)&v41, 1uLL);
    v32 = v42;
    v33 = v41;
    if (v9 >= 0x41)
    {
      if (v11)
        MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
      __src = v15;
      v46 = v14;
      if (v12)
        MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
    }
    else
    {
      __src = v15;
      v46 = v14;
    }
    v47 = (uint64_t)v33;
    v48 = v32;
    goto LABEL_32;
  }
  if (v13 < 0x1C || (*((_BYTE *)a3 + 23) & 0x20) == 0)
    goto LABEL_32;
  v17 = ***a3;
  v41 = a3;
  v18 = *(_DWORD *)(v17 + 2496);
  if (!v18)
  {
    v35 = 0;
LABEL_46:
    v22 = sub_1C541AB24(v17 + 2480, (uint64_t)&v41, (uint64_t *)&v41, v35);
    v36 = v41;
    v22[3] = 0;
    v22[4] = 0;
    *v22 = v36;
    v22[1] = v22 + 3;
    v22[2] = 0x100000000;
    goto LABEL_23;
  }
  v19 = *(_QWORD *)(v17 + 2480);
  v20 = v18 - 1;
  v21 = v20 & ((a3 >> 4) ^ (a3 >> 9));
  v22 = (_QWORD *)(v19 + 40 * v21);
  v23 = (_QWORD ***)*v22;
  if ((uint64_t ***)*v22 != a3)
  {
    v24 = 0;
    v25 = 1;
    while (v23 != (_QWORD ***)-4096)
    {
      if (v24)
        v26 = 0;
      else
        v26 = v23 == (_QWORD ***)-8192;
      if (v26)
        v24 = v22;
      v27 = v21 + v25++;
      v21 = v27 & v20;
      v22 = (_QWORD *)(v19 + 40 * v21);
      v23 = (_QWORD ***)*v22;
      if ((uint64_t ***)*v22 == a3)
        goto LABEL_23;
    }
    if (v24)
      v35 = v24;
    else
      v35 = v22;
    goto LABEL_46;
  }
LABEL_23:
  v28 = *((unsigned int *)v22 + 4);
  if ((_DWORD)v28)
  {
    v29 = (uint64_t *)(v22[1] + 8);
    v30 = 16 * v28;
    while (*((_DWORD *)v29 - 2) != 4)
    {
      v29 += 2;
      v30 -= 16;
      if (!v30)
        goto LABEL_32;
    }
    if (*v29)
    {
      llvm::getConstantRangeFromMetadata(*v29, (uint64_t)&v41);
      if (v9 < 0x41)
      {
        __src = v41;
        v46 = v42;
        v42 = 0;
LABEL_42:
        v47 = (uint64_t)v43;
        v48 = v44;
        goto LABEL_32;
      }
      if (v11)
        MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
      __src = v41;
      v46 = v42;
      v42 = 0;
      if (!v12)
        goto LABEL_42;
      MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
      v47 = (uint64_t)v43;
      v48 = v44;
      v44 = 0;
      if (v42 >= 0x41 && v41)
        MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
    }
  }
LABEL_32:
  llvm::ConstantRange::makeAllowedICmpRegion(a2, (uint64_t)&__src, (uint64_t)&v41, (uint64_t)v37, v38, v39, v40, v41, v42, v43, v44, __src, v46, v47, v48, v49, v50, v51, v52,
    v53,
    v54,
    v55,
    v56);
  llvm::ConstantRange::subtract((char *)&v41, a4, (llvm::APInt *)&v37);
  result = (void *)sub_1C4E8E6E0((uint64_t)&v37, 0, a1);
  if (v40 >= 0x41)
  {
    result = v39;
    if (v39)
      result = (void *)MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
  }
  if (v38 >= 0x41)
  {
    result = v37;
    if (v37)
      result = (void *)MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  }
  if (v44 >= 0x41)
  {
    result = v43;
    if (v43)
      result = (void *)MEMORY[0x1CAA32F9C](v43, 0x1000C8000313F17);
  }
  if (v42 >= 0x41)
  {
    result = v41;
    if (v41)
      result = (void *)MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
  }
  if (v48 >= 0x41)
  {
    result = (void *)v47;
    if (v47)
      result = (void *)MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
  }
  if (v46 >= 0x41)
  {
    result = __src;
    if (__src)
      return (void *)MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  return result;
}

void sub_1C4E8FBB0(uint64_t a1@<X0>, uint64_t *a2@<X1>, llvm::APInt *a3@<X8>)
{
  uint64_t v3;
  const void *v4;
  unint64_t v5;
  llvm::APInt *v6;
  uint64_t v7;
  size_t v8;
  llvm::APInt *v9;
  void *v10;
  int v11;
  uint64_t v12;
  const void *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 <= 0x40)
  {
    v4 = *(const void **)a1;
    if (*(_QWORD *)a1 == *a2)
    {
      *((_DWORD *)a3 + 2) = v3;
      v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
      if (!(_DWORD)v3)
        v5 = 0;
      *(_QWORD *)a3 = v5;
      *((_DWORD *)a3 + 6) = v3;
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  v6 = a3;
  v15 = a1;
  v16 = *(_DWORD *)(a1 + 8);
  v13 = *(const void **)a1;
  v14 = a2;
  if (memcmp(*(const void **)a1, (const void *)*a2, ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8))
  {
    a3 = v6;
    a2 = v14;
    a1 = v15;
    v4 = v13;
    LODWORD(v3) = v16;
LABEL_11:
    *(_DWORD *)(a1 + 8) = 0;
    v11 = *((_DWORD *)a2 + 2);
    v12 = *a2;
    *((_DWORD *)a2 + 2) = 0;
    *((_DWORD *)a3 + 2) = v3;
    *(_QWORD *)a3 = v4;
    *((_DWORD *)a3 + 6) = v11;
    *((_QWORD *)a3 + 2) = v12;
    return;
  }
  *((_DWORD *)v6 + 2) = v16;
  llvm::APInt::initSlowCase(v6, -1, 1);
  a3 = v6;
  v7 = *((unsigned int *)v6 + 2);
  *((_DWORD *)v6 + 6) = v7;
  if (v7 <= 0x40)
  {
LABEL_6:
    *((_QWORD *)a3 + 2) = *(_QWORD *)a3;
    return;
  }
  v8 = ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8;
  v9 = a3;
  v10 = (void *)operator new[]();
  *((_QWORD *)v9 + 2) = v10;
  memcpy(v10, *(const void **)v9, v8);
}

uint64_t sub_1C4E8FCE0(_QWORD *a1, uint64_t a2)
{
  _BOOL4 v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  _QWORD *v9;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 38)
    {
      v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(_QWORD **)(a2 - 8);
      else
        v9 = (_QWORD *)(a2 - 32 * (v8 & 0x7FFFFFF));
      v2 = *a1 == *v9;
    }
    else
    {
      v2 = 0;
    }
  }
  return (v7 ^ 1) & v2;
}

unint64_t sub_1C4E8FD48(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  if (*(_BYTE *)(a1 + 16) == 84
    && (v1 = *(_QWORD *)(a1 - 32)) != 0
    && !*(_BYTE *)(v1 + 16)
    && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
    && (*(_BYTE *)(v1 + 33) & 0x20) != 0
    && (v2 = *(_DWORD *)(v1 + 36) - 263, v2 <= 0x31))
  {
    return (0x2404000208001uLL >> v2) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C4E8FDB4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  char v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  _QWORD *v37;

  v33 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v33);
  v5 = *(unsigned int *)(a1 + 16);
  if (v4)
    v6 = v33;
  else
    v6 = (uint64_t *)(*(_QWORD *)a1 + 16 * v5);
  if (v6 == (uint64_t *)(*(_QWORD *)a1 + 16 * v5))
  {
    v7 = operator new();
    v8 = v7;
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v7 + 16) = 0u;
    *(_OWORD *)(v7 + 32) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 96) = 0u;
    *(_OWORD *)(v7 + 112) = 0u;
    *(_OWORD *)(v7 + 128) = 0u;
    *(_OWORD *)(v7 + 144) = 0u;
    *(_OWORD *)(v7 + 160) = 0u;
    *(_OWORD *)(v7 + 176) = 0u;
    *(_OWORD *)(v7 + 192) = 0u;
    *(_OWORD *)(v7 + 208) = 0u;
    *(_OWORD *)(v7 + 224) = 0u;
    *(_OWORD *)(v7 + 240) = 0u;
    *(_DWORD *)v7 = 1;
    v9 = 8;
    *(_OWORD *)(v7 + 256) = 0u;
    do
    {
      *(_QWORD *)(v7 + v9) = -4096;
      v9 += 48;
    }
    while (v9 != 200);
    *(_QWORD *)(v7 + 200) = 1;
    v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    *(int64x2_t *)(v7 + 208) = v10;
    *(int64x2_t *)(v7 + 224) = v10;
    *(_BYTE *)(v7 + 240) = 0;
    *(_BYTE *)(v7 + 264) = 0;
    v32 = 0;
    v33 = (uint64_t *)a2;
    v34 = v7;
    v35 = 0;
    v11 = sub_1C4E90754((uint64_t *)a1, &v33, &v35);
    v6 = v35;
    if ((v11 & 1) != 0)
    {
LABEL_13:
      sub_1C4E89280(&v34);
      sub_1C4E89280(&v32);
      return v6[1];
    }
    v36 = v35;
    v12 = *(_DWORD *)(a1 + 8);
    v13 = *(unsigned int *)(a1 + 16);
    if (4 * v12 + 4 >= (3 * v13))
    {
      v14 = 2 * v13;
    }
    else
    {
      v14 = *(_DWORD *)(a1 + 16);
      if ((int)v13 + ~v12 - *(_DWORD *)(a1 + 12) > v13 >> 3)
      {
LABEL_10:
        *(_DWORD *)(a1 + 8) = v12 + 1;
        if (*v6 != -4096)
          --*(_DWORD *)(a1 + 12);
        *v6 = a2;
        v34 = 0;
        v6[1] = v8;
        goto LABEL_13;
      }
    }
    v16 = *(_QWORD *)a1;
    v17 = (v14 - 1) | ((unint64_t)(v14 - 1) >> 1);
    v18 = v17 | (v17 >> 2) | ((v17 | (v17 >> 2)) >> 4);
    v19 = ((v18 | (v18 >> 8)) >> 16) | v18 | (v18 >> 8);
    if ((v19 + 1) > 0x40)
      v20 = v19 + 1;
    else
      v20 = 64;
    *(_DWORD *)(a1 + 16) = v20;
    v21 = operator new(16 * v20, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v21;
    if (v16)
    {
      *(_QWORD *)(a1 + 8) = 0;
      v22 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v22)
      {
        v23 = 16 * v22;
        do
        {
          *v21 = -4096;
          v21 += 2;
          v23 -= 16;
        }
        while (v23);
      }
      if ((_DWORD)v13)
      {
        v24 = v13;
        v25 = (uint64_t *)(v16 + 8);
        v26 = 16 * v24;
        do
        {
          v27 = *(v25 - 1);
          if ((v27 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v37 = 0;
            sub_1C4E90754((uint64_t *)a1, v25 - 1, &v37);
            v28 = v37;
            *v37 = v27;
            v29 = *v25;
            *v25 = 0;
            v28[1] = v29;
            ++*(_DWORD *)(a1 + 8);
            sub_1C4E89280(v25);
          }
          v25 += 2;
          v26 -= 16;
        }
        while (v26);
      }
      MEMORY[0x1CAA32FB4](v16, 8);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      v30 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v30)
      {
        v31 = 16 * v30;
        do
        {
          *v21 = -4096;
          v21 += 2;
          v31 -= 16;
        }
        while (v31);
      }
    }
    sub_1C4E90754((uint64_t *)a1, &v33, &v36);
    v12 = *(_DWORD *)(a1 + 8);
    v6 = v36;
    goto LABEL_10;
  }
  return v6[1];
}

uint64_t sub_1C4E90074(uint64_t a1, uint64_t a2)
{
  _QWORD ***v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  _QWORD *v7;
  int v8;
  unsigned int v9;
  int v10;
  _QWORD ***v11;
  _QWORD ***v12;
  BOOL v13;
  uint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v19;
  _QWORD ***v20;
  int32x2_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD ***v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  int32x2_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v62;
  unint64_t *v63;
  uint64_t v64;
  int32x2_t *v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  int32x2_t *v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t *v90;
  _QWORD ***v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;

  v2 = (_QWORD ***)a2;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 40);
  result = sub_1C4E89038(v4, v5, a2);
  if (v4 + 40 * v5 != result)
    return result;
  v89 = 2;
  v90 = 0;
  v91 = v2;
  if (v2 != (_QWORD ***)-8192 && v2 != (_QWORD ***)-4096 && v2)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v89);
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_DWORD *)(a1 + 40);
    v2 = v91;
  }
  v92 = a1;
  v93 = 0;
  result = sub_1C4E908C8(v4, v5, (uint64_t)v2, &v93);
  if ((result & 1) == 0)
  {
    v7 = v93;
    v94 = v93;
    v8 = *(_DWORD *)(a1 + 32);
    v9 = *(_DWORD *)(a1 + 40);
    if (4 * v8 + 4 >= 3 * v9)
    {
      v10 = 2 * v9;
    }
    else
    {
      v10 = *(_DWORD *)(a1 + 40);
      if (v9 + ~v8 - *(_DWORD *)(a1 + 36) > v9 >> 3)
      {
LABEL_9:
        *(_DWORD *)(a1 + 32) = v8 + 1;
        v11 = (_QWORD ***)v7[3];
        if (v11 != (_QWORD ***)-4096)
          --*(_DWORD *)(a1 + 36);
        v12 = v91;
        if (v11 != v91)
        {
          v13 = v11 == (_QWORD ***)-4096 || v11 == 0;
          if (!v13 && v11 != (_QWORD ***)-8192)
          {
            v30 = v7[1] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v30 = v7[2];
            v31 = (unint64_t *)v7[2];
            if (v31)
            {
              *v31 = *v31 & 7 | v30;
            }
            else
            {
              v32 = v7[3];
              v33 = ***(int32x2_t ****)v32;
              v34 = (unint64_t)v33[303];
              if (v34 <= v30)
              {
                v35 = v33[305].u32[0];
                if (v34 + 16 * v35 > v30)
                {
                  v36 = v35 - 1;
                  LODWORD(v37) = v36 & ((v32 >> 4) ^ (v32 >> 9));
                  v38 = (uint64_t *)(v34 + 16 * v37);
                  v39 = *v38;
                  if (v32 == *v38)
                  {
LABEL_51:
                    *v38 = -8192;
                    v33[304] = vadd_s32(v33[304], (int32x2_t)0x1FFFFFFFFLL);
                    v32 = v7[3];
                  }
                  else
                  {
                    v40 = 1;
                    while (v39 != -4096)
                    {
                      v41 = v37 + v40++;
                      v37 = v41 & v36;
                      v39 = *(_QWORD *)(v34 + 16 * v37);
                      if (v32 == v39)
                      {
                        v38 = (uint64_t *)(v34 + 16 * v37);
                        goto LABEL_51;
                      }
                    }
                  }
                  *(_BYTE *)(v32 + 17) &= ~1u;
                }
              }
            }
            v12 = v91;
          }
          v7[3] = v12;
          if (v12 != (_QWORD ***)-4096 && v12 != (_QWORD ***)-8192 && v12 != 0)
          {
            v15 = v89;
            v16 = (_QWORD *)(v89 & 0xFFFFFFFFFFFFFFF8);
            v7[2] = *(_QWORD *)(v89 & 0xFFFFFFFFFFFFFFF8);
            *v16 = v7 + 1;
            v7[1] = v15 & 0xFFFFFFFFFFFFFFF8 | v7[1] & 7;
            v17 = (unint64_t *)v7[2];
            if (v17)
              *v17 = *v17 & 7 | (unint64_t)(v7 + 2);
          }
        }
        v7[4] = v92;
        goto LABEL_25;
      }
    }
    v42 = *(_QWORD **)(a1 + 24);
    v43 = (v10 - 1) | ((unint64_t)(v10 - 1) >> 1);
    v44 = v43 | (v43 >> 2) | ((v43 | (v43 >> 2)) >> 4);
    v45 = ((v44 | (v44 >> 8)) >> 16) | v44 | (v44 >> 8);
    if ((v45 + 1) > 0x40)
      v46 = v45 + 1;
    else
      v46 = 64;
    *(_DWORD *)(a1 + 40) = v46;
    v47 = (char *)operator new(40 * v46, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 24) = v47;
    if (v42)
    {
      *(_QWORD *)(a1 + 32) = 0;
      v48 = *(unsigned int *)(a1 + 40);
      if ((_DWORD)v48)
      {
        v49 = 40 * v48;
        v50 = v47 + 16;
        do
        {
          *v50 = 0;
          v50[1] = -4096;
          *(v50 - 2) = &off_1E8138970;
          *(v50 - 1) = 2;
          v50[2] = 0;
          v50 += 5;
          v49 -= 40;
        }
        while (v49);
      }
      if (v9)
      {
        v51 = &v42[5 * v9];
        v52 = v42;
        do
        {
          v53 = v52[3];
          if ((v53 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v95 = 0;
            sub_1C4E908C8(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 40), v53, &v95);
            v54 = v95;
            v55 = v95[3];
            v56 = v52[3];
            if (v55 != v56)
            {
              v57 = v55 == -4096 || v55 == 0;
              if (!v57 && v55 != -8192)
              {
                v74 = v95[1] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v74 = v95[2];
                v75 = (unint64_t *)v54[2];
                if (v75)
                {
                  *v75 = *v75 & 7 | v74;
                }
                else
                {
                  v76 = v54[3];
                  v77 = ***(int32x2_t ****)v76;
                  v78 = (unint64_t)v77[303];
                  if (v78 <= v74)
                  {
                    v79 = v77[305].u32[0];
                    if (v78 + 16 * v79 > v74)
                    {
                      v80 = v79 - 1;
                      LODWORD(v81) = v80 & ((v76 >> 4) ^ (v76 >> 9));
                      v82 = (uint64_t *)(v78 + 16 * v81);
                      v83 = *v82;
                      if (v76 == *v82)
                      {
LABEL_109:
                        *v82 = -8192;
                        v77[304] = vadd_s32(v77[304], (int32x2_t)0x1FFFFFFFFLL);
                        v76 = v54[3];
                      }
                      else
                      {
                        v84 = 1;
                        while (v83 != -4096)
                        {
                          v85 = v81 + v84++;
                          v81 = v85 & v80;
                          v83 = *(_QWORD *)(v78 + 16 * v81);
                          if (v76 == v83)
                          {
                            v82 = (uint64_t *)(v78 + 16 * v81);
                            goto LABEL_109;
                          }
                        }
                      }
                      *(_BYTE *)(v76 + 17) &= ~1u;
                    }
                  }
                }
                v56 = v52[3];
              }
              v54[3] = v56;
              if (v56 != -4096 && v56 != -8192 && v56 != 0)
              {
                v59 = v52[1];
                v54[2] = *(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF8);
                *(_QWORD *)(v59 & 0xFFFFFFFFFFFFFFF8) = v54 + 1;
                v54[1] = v59 & 0xFFFFFFFFFFFFFFF8 | v54[1] & 7;
                v60 = (unint64_t *)v54[2];
                if (v60)
                  *v60 = *v60 & 7 | (unint64_t)(v54 + 2);
              }
            }
            v54[4] = v52[4];
            ++*(_DWORD *)(a1 + 32);
            v53 = v52[3];
          }
          if (v53 != -8192 && v53 != -4096 && v53 != 0)
          {
            v62 = v52[1] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v62 = v52[2];
            v63 = (unint64_t *)v52[2];
            if (v63)
            {
              *v63 = *v63 & 7 | v62;
            }
            else
            {
              v64 = v52[3];
              v65 = ***(int32x2_t ****)v64;
              v66 = (unint64_t)v65[303];
              if (v66 <= v62)
              {
                v67 = v65[305].u32[0];
                if (v66 + 16 * v67 > v62)
                {
                  v68 = v67 - 1;
                  LODWORD(v69) = v68 & ((v64 >> 4) ^ (v64 >> 9));
                  v70 = (uint64_t *)(v66 + 16 * v69);
                  v71 = *v70;
                  if (v64 == *v70)
                  {
LABEL_97:
                    *v70 = -8192;
                    v65[304] = vadd_s32(v65[304], (int32x2_t)0x1FFFFFFFFLL);
                    v64 = v52[3];
                  }
                  else
                  {
                    v72 = 1;
                    while (v71 != -4096)
                    {
                      v73 = v69 + v72++;
                      v69 = v73 & v68;
                      v71 = *(_QWORD *)(v66 + 16 * v69);
                      if (v64 == v71)
                      {
                        v70 = (uint64_t *)(v66 + 16 * v69);
                        goto LABEL_97;
                      }
                    }
                  }
                  *(_BYTE *)(v64 + 17) &= ~1u;
                }
              }
            }
          }
          v52 += 5;
        }
        while (v52 != v51);
      }
      MEMORY[0x1CAA32FB4](v42, 8);
      v47 = *(char **)(a1 + 24);
      LODWORD(v86) = *(_DWORD *)(a1 + 40);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = 0;
      v86 = *(unsigned int *)(a1 + 40);
      if ((_DWORD)v86)
      {
        v87 = 0;
        do
        {
          v88 = &v47[v87];
          *((_QWORD *)v88 + 2) = 0;
          *((_QWORD *)v88 + 3) = -4096;
          *(_QWORD *)v88 = &off_1E8138970;
          *((_QWORD *)v88 + 1) = 2;
          v87 += 40;
          *((_QWORD *)v88 + 4) = 0;
        }
        while (40 * v86 != v87);
      }
    }
    result = sub_1C4E908C8((uint64_t)v47, v86, (uint64_t)v91, &v94);
    v8 = *(_DWORD *)(a1 + 32);
    v7 = v94;
    goto LABEL_9;
  }
LABEL_25:
  if (v91 != (_QWORD ***)-8192 && v91 != (_QWORD ***)-4096 && v91 != 0)
  {
    v19 = v89 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v89 & 0xFFFFFFFFFFFFFFF8) = v90;
    if (v90)
    {
      *v90 = *v90 & 7 | v19;
    }
    else
    {
      v20 = v91;
      v21 = (int32x2_t *)***v91;
      v22 = (unint64_t)v21[303];
      if (v22 <= v19)
      {
        v23 = v21[305].u32[0];
        if (v22 + 16 * v23 > v19)
        {
          v24 = v23 - 1;
          LODWORD(v25) = v24 & ((v91 >> 4) ^ (v91 >> 9));
          v26 = (_QWORD *)(v22 + 16 * v25);
          v27 = (_QWORD ***)*v26;
          if (v91 == (_QWORD ***)*v26)
          {
LABEL_40:
            *v26 = -8192;
            v21[304] = vadd_s32(v21[304], (int32x2_t)0x1FFFFFFFFLL);
            v20 = v91;
          }
          else
          {
            v28 = 1;
            while (v27 != (_QWORD ***)-4096)
            {
              v29 = v25 + v28++;
              v25 = v29 & v24;
              v27 = *(_QWORD ****)(v22 + 16 * v25);
              if (v91 == v27)
              {
                v26 = (_QWORD *)(v22 + 16 * v25);
                goto LABEL_40;
              }
            }
          }
          *((_BYTE *)v20 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4E90754(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

unsigned int *sub_1C4E907F0(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  unsigned int *v9;
  __int128 v10;
  uint64_t v11;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) == 0)
  {
    if ((v4 & 1) == 0)
    {
      v11 = *((_QWORD *)result + 1);
      *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = v11;
      LODWORD(v11) = result[4];
      result[4] = a2[4];
      a2[4] = v11;
      return result;
    }
    v4 = *result;
    v9 = result;
    result = a2;
LABEL_7:
    v10 = *(_OWORD *)(v9 + 2);
    *v9 = v4 | 1;
    *((_QWORD *)v9 + 1) = *((_QWORD *)result + 1);
    *((_QWORD *)v9 + 2) = *((_QWORD *)result + 2);
    *result &= ~1u;
    *(_OWORD *)(result + 2) = v10;
    return result;
  }
  if ((v4 & 1) == 0)
  {
    v9 = a2;
    goto LABEL_7;
  }
  v5 = 0;
  v6 = (int *)(result + 2);
  v7 = (int *)(a2 + 2);
  do
  {
    v8 = *(_QWORD *)&v6[v5];
    *(_QWORD *)&v6[v5] = *(_QWORD *)&v7[v5];
    *(_QWORD *)&v7[v5] = v8;
    v5 += 2;
  }
  while (v5 != 4);
  return result;
}

uint64_t sub_1C4E908C8(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = a1 + 40 * v5;
    v7 = *(_QWORD *)(v6 + 24);
    if (v7 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = a1 + 40 * (v13 & v4);
        v7 = *(_QWORD *)(v6 + 24);
        v8 = 1;
        if (v7 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t sub_1C4E90960(uint64_t result, _DWORD *a2)
{
  unsigned int v3;
  llvm *UnderlyingObject;
  int v5;
  unsigned int v6;
  llvm **v7;
  llvm **v8;

  v3 = *(_DWORD *)(*(_QWORD *)result + 8);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)result + 16) + 8);
  if (v3 <= 0xFF)
  {
    UnderlyingObject = llvm::getUnderlyingObject((llvm *)result, (const llvm::Value *)6);
    v8 = 0;
    result = sub_1C4E891D4((uint64_t)a2, (uint64_t)UnderlyingObject, &v8);
    if ((result & 1) == 0)
    {
      v5 = *a2 >> 1;
      if ((*a2 & 1) != 0)
        v6 = 2;
      else
        v6 = a2[4];
      if (4 * v5 + 4 >= 3 * v6)
      {
        v6 *= 2;
      }
      else if (v6 + ~v5 - a2[1] > v6 >> 3)
      {
LABEL_10:
        v7 = v8;
        *a2 += 2;
        if (*v7 != (llvm *)-4096)
          --a2[1];
        *v7 = UnderlyingObject;
        return result;
      }
      sub_1C4E90A68((uint64_t)a2, v6);
      v8 = 0;
      result = sub_1C4E891D4((uint64_t)a2, (uint64_t)UnderlyingObject, &v8);
      goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_1C4E90A68(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  if (a2 >= 3)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 2)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E90BE4(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v16;
  v10 = 1;
  v11 = (uint64_t *)(a1 + 8);
  do
  {
    v12 = v8;
    if ((*v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v9++ = *v11;
    v11 = (uint64_t *)(a1 + 8 + 8 * v10);
    v8 = 1;
    v10 = 2;
  }
  while ((v12 & 1) == 0);
  if (a2 > 2)
  {
    *(_DWORD *)a1 &= ~1u;
    v13 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v13;
  }
  return sub_1C4E90BE4(a1, v16, v9);
}

uint64_t sub_1C4E90BE4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 24);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4E891D4((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C4E90C9C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  void *v6;
  _BOOL8 v7;
  size_t v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v14;
  unsigned int v15;
  void *v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v4 == 16)
  {
    v5 = *(unsigned int *)(a2 + 32);
    v15 = v5;
    if (v5 > 0x40)
    {
      v8 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
      v6 = (void *)operator new[]();
      memcpy(v6, *(const void **)(a2 + 24), v8);
    }
    else
    {
      v6 = *(void **)(a2 + 24);
    }
    v14 = v6;
    llvm::APInt::operator+=((uint64_t)&v14, 1uLL);
    v9 = v15;
    v10 = v14;
    v15 = 0;
    v11 = *(unsigned int *)(a2 + 32);
    if (v11 > 0x40)
    {
      v12 = (void *)operator new[]();
      memcpy(v12, *(const void **)(a2 + 24), ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v12 = *(void **)(a2 + 24);
    }
    v17 = v9;
    v16 = v10;
    v19 = v11;
    v18 = v12;
    v7 = sub_1C4E8C3D4((__int16 *)a1, (uint64_t)&v16, 0x100000000);
    if (v19 >= 0x41 && v18)
      MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
    if (v17 >= 0x41 && v16)
      MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
    if (v15 >= 0x41 && v14)
      MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  }
  else if ((v4 - 11) < 2 || *(_WORD *)a1 == 3)
  {
    return 0;
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a1 & 0xFF00 | 3;
    *(_QWORD *)(a1 + 8) = a2;
    return 1;
  }
  return v7;
}

void sub_1C4E90E80(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  int v26;
  BOOL v27;
  unsigned int v29;
  uint64_t v31;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = (char *)operator new(16 * v8, (std::align_val_t)8uLL);
  v10 = v9;
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
      memset_pattern16(v9, &unk_1C85F2160, 16 * v11);
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v11 - 1;
      v14 = v4;
      do
      {
        v15 = *v14;
        v16 = v14[1];
        if ((*v14 != -4096 || v16 != -4096) && (v15 != -8192 || v16 != -8192))
        {
          v17 = ((v16 >> 4) ^ (v16 >> 9) | ((unint64_t)((v15 >> 4) ^ (v15 >> 9)) << 32))
              + ~((unint64_t)((v16 >> 4) ^ (v16 >> 9)) << 32);
          v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
          v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
          v20 = v13 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
          v21 = &v10[16 * v20];
          v22 = *(_QWORD *)v21;
          v23 = *((_QWORD *)v21 + 1);
          if (v15 != *(_QWORD *)v21 || v16 != v23)
          {
            v25 = 0;
            v26 = 1;
            while (v22 != -4096 || v23 != -4096)
            {
              if (v25)
                v27 = 0;
              else
                v27 = v23 == -8192;
              if (v27 && v22 == -8192)
                v25 = v21;
              v29 = v20 + v26++;
              v20 = v29 & v13;
              v21 = &v10[16 * (v29 & v13)];
              v22 = *(_QWORD *)v21;
              v23 = *((_QWORD *)v21 + 1);
              if (v15 == *(_QWORD *)v21 && v16 == v23)
                goto LABEL_38;
            }
            if (v25)
              v21 = v25;
          }
LABEL_38:
          *(_QWORD *)v21 = v15;
          *((_QWORD *)v21 + 1) = v16;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        v14 += 2;
      }
      while (v14 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v31 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v31)
    memset_pattern16(v9, &unk_1C85F2160, 16 * v31);
}

uint64_t sub_1C4E91078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t *v33;
  unsigned int v34;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  uint64_t v51;

  v11 = sub_1C4E8FDB4(a1, a3);
  v12 = v11;
  v13 = *(_WORD *)a4;
  if (v13 == 6)
  {
    v15 = (unsigned int *)(v11 + 200);
    v14 = *(_DWORD *)(v11 + 200);
    v16 = v14 & 1;
    v17 = v11 + 208;
    v18 = a2 >> 4;
    if ((v14 & 1) != 0)
    {
      v19 = 4;
      v20 = v11 + 208;
    }
    else
    {
      v19 = *(_DWORD *)(v11 + 216);
      if (!v19)
      {
        v33 = 0;
        v34 = 0;
        goto LABEL_36;
      }
      v20 = *(_QWORD *)(v11 + 208);
    }
    v25 = v19 - 1;
    v26 = v25 & (v18 ^ (a2 >> 9));
    v27 = (uint64_t *)(v20 + 8 * v26);
    v28 = *v27;
    if (*v27 == a2)
      return sub_1C4E90074(a1, a2);
    v29 = 0;
    v30 = 1;
    while (v28 != -4096)
    {
      if (v29)
        v31 = 0;
      else
        v31 = v28 == -8192;
      if (v31)
        v29 = v27;
      v32 = v26 + v30++;
      v26 = v32 & v25;
      v27 = (uint64_t *)(v20 + 8 * v26);
      v28 = *v27;
      if (*v27 == a2)
        return sub_1C4E90074(a1, a2);
    }
    if (v29)
      v33 = v29;
    else
      v33 = v27;
    if ((v14 & 1) != 0)
      v34 = 4;
    else
      v34 = *(_DWORD *)(v11 + 216);
LABEL_36:
    if (4 * (v14 >> 1) + 4 < 3 * v34)
    {
      if (v34 + ~(v14 >> 1) - *(_DWORD *)(v11 + 204) > v34 >> 3)
      {
LABEL_38:
        *v15 = (v14 & 0xFFFFFFFE | v16) + 2;
        if (*v33 != -4096)
          --*(_DWORD *)(v12 + 204);
        *v33 = a2;
        return sub_1C4E90074(a1, a2);
      }
      sub_1C4E9153C(v11 + 200, v34);
      v14 = *v15;
      if ((*v15 & 1) != 0)
      {
        v44 = 4;
LABEL_77:
        v16 = *v15 & 1;
        v45 = v44 - 1;
        v46 = (v44 - 1) & (v18 ^ (a2 >> 9));
        v33 = (uint64_t *)(v17 + 8 * v46);
        v47 = *v33;
        if (*v33 == a2)
          goto LABEL_38;
        v40 = 0;
        v48 = 1;
        while (v47 != -4096)
        {
          if (v40)
            v49 = 0;
          else
            v49 = v47 == -8192;
          if (v49)
            v40 = v33;
          v50 = v46 + v48++;
          v46 = v50 & v45;
          v33 = (uint64_t *)(v17 + 8 * (v50 & v45));
          v47 = *v33;
          if (*v33 == a2)
            goto LABEL_38;
        }
        goto LABEL_87;
      }
      v44 = *(_DWORD *)(v12 + 216);
      if (v44)
      {
        v17 = *(_QWORD *)(v12 + 208);
        goto LABEL_77;
      }
LABEL_90:
      v16 = 0;
      v33 = 0;
      goto LABEL_38;
    }
    sub_1C4E9153C(v11 + 200, 2 * v34);
    v14 = *v15;
    if ((*v15 & 1) != 0)
    {
      v36 = 4;
    }
    else
    {
      v36 = *(_DWORD *)(v12 + 216);
      if (!v36)
        goto LABEL_90;
      v17 = *(_QWORD *)(v12 + 208);
    }
    v16 = *v15 & 1;
    v37 = v36 - 1;
    v38 = (v36 - 1) & (v18 ^ (a2 >> 9));
    v33 = (uint64_t *)(v17 + 8 * v38);
    v39 = *v33;
    if (*v33 == a2)
      goto LABEL_38;
    v40 = 0;
    v41 = 1;
    while (v39 != -4096)
    {
      if (v40)
        v42 = 0;
      else
        v42 = v39 == -8192;
      if (v42)
        v40 = v33;
      v43 = v38 + v41++;
      v38 = v43 & v37;
      v33 = (uint64_t *)(v17 + 8 * (v43 & v37));
      v39 = *v33;
      if (*v33 == a2)
        goto LABEL_38;
    }
LABEL_87:
    if (v40)
      v33 = v40;
    goto LABEL_38;
  }
  if ((v13 - 4) < 2)
  {
    v6 = *(unsigned int *)(a4 + 16);
    if (v6 > 0x40)
    {
      v4 = (void *)operator new[]();
      memcpy(v4, *(const void **)(a4 + 8), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v4 = *(void **)(a4 + 8);
    }
    v7 = *(unsigned int *)(a4 + 32);
    if (v7 > 0x40)
    {
      v5 = (void *)operator new[]();
      memcpy(v5, *(const void **)(a4 + 24), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v5 = *(void **)(a4 + 24);
    }
    v21 = v13 | (*(unsigned __int8 *)(a4 + 1) << 8);
  }
  else
  {
    if ((v13 - 2) < 2)
      v4 = *(void **)(a4 + 8);
    v21 = *(_WORD *)a4;
  }
  v51 = 0;
  if ((sub_1C4E8909C(v12, a2, &v51) & 1) == 0)
  {
    v22 = *(_DWORD *)v12 >> 1;
    if ((*(_DWORD *)v12 & 1) != 0)
      v23 = 4;
    else
      v23 = *(_DWORD *)(v12 + 16);
    if (4 * v22 + 4 >= 3 * v23)
    {
      v23 *= 2;
    }
    else if (v23 + ~v22 - *(_DWORD *)(v12 + 4) > v23 >> 3)
    {
LABEL_13:
      v24 = v51;
      *(_DWORD *)v12 += 2;
      if (*(_QWORD *)v24 != -4096)
        --*(_DWORD *)(v12 + 4);
      *(_QWORD *)v24 = a2;
      *(_WORD *)(v24 + 8) = v13;
      if (v21 - 4 < 2)
      {
        *(_DWORD *)(v24 + 24) = v6;
        *(_QWORD *)(v24 + 16) = v4;
        *(_DWORD *)(v24 + 40) = v7;
        *(_QWORD *)(v24 + 32) = v5;
        *(_WORD *)(v24 + 8) = v21 & 0xFF00 | v13;
      }
      else if (v21 - 2 < 2)
      {
        *(_QWORD *)(v24 + 16) = v4;
      }
      return sub_1C4E90074(a1, a2);
    }
    sub_1C4E917A4(v12, v23);
    v51 = 0;
    sub_1C4E8909C(v12, a2, &v51);
    goto LABEL_13;
  }
  if ((v21 & 0xFE) == 4)
  {
    if (v7 >= 0x41 && v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
    if (v6 >= 0x41 && v4)
      MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
  }
  return sub_1C4E90074(a1, a2);
}

int *sub_1C4E9153C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E916A4((int *)a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4E916A4((int *)a1, v14, v8);
}

int *sub_1C4E916A4(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 10;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[v4];
  }
  do
    *v5++ = -4096;
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 4;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v9[2 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v9[2 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      *(_QWORD *)v12 = v7;
      *result += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C4E917A4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _BYTE v17[192];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v16 = a2;
      *(_QWORD *)(a1 + 8) = operator new(48 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v16;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4E919B4(a1, v6, v6 + 48 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v17;
  do
  {
    v10 = a1 + v8;
    v11 = *(_QWORD *)(a1 + v8 + 8);
    if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v11;
      *((_WORD *)v9 + 4) = *(unsigned __int8 *)(v10 + 16);
      v12 = *(unsigned __int8 *)(v10 + 16);
      if ((v12 - 4) < 2)
      {
        v13 = a1 + v8;
        *((_DWORD *)v9 + 6) = *(_DWORD *)(a1 + v8 + 32);
        *((_QWORD *)v9 + 2) = *(_QWORD *)(a1 + v8 + 24);
        *(_DWORD *)(v13 + 32) = 0;
        *((_DWORD *)v9 + 10) = *(_DWORD *)(a1 + v8 + 48);
        *((_QWORD *)v9 + 4) = *(_QWORD *)(a1 + v8 + 40);
        *(_DWORD *)(v13 + 48) = 0;
        v9[9] = *(_BYTE *)(v10 + 17);
      }
      else if ((v12 - 2) < 2)
      {
        *((_QWORD *)v9 + 2) = *(_QWORD *)(a1 + v8 + 24);
      }
      *(_WORD *)(v10 + 16) = *(unsigned __int8 *)(v10 + 17) << 8;
      v9 += 48;
    }
    v8 += 48;
  }
  while (v8 != 192);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v14 = a2;
    *(_QWORD *)(a1 + 8) = operator new(48 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v14;
  }
  return sub_1C4E919B4(a1, (uint64_t)v17, (uint64_t)v9);
}

uint64_t sub_1C4E919B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 200);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[6 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 6;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = 0;
      result = sub_1C4E8909C((uint64_t)v5, v10, &v13);
      v11 = v13;
      *v13 = *(_QWORD *)a2;
      *((_WORD *)v11 + 4) = *(unsigned __int8 *)(a2 + 8);
      v12 = *(unsigned __int8 *)(a2 + 8);
      if ((v12 - 4) < 2)
      {
        *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
        v11[2] = *(_QWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 24) = 0;
        *((_DWORD *)v11 + 10) = *(_DWORD *)(a2 + 40);
        v11[4] = *(_QWORD *)(a2 + 32);
        *(_DWORD *)(a2 + 40) = 0;
        *((_BYTE *)v11 + 9) = *(_BYTE *)(a2 + 9);
      }
      else if ((v12 - 2) < 2)
      {
        v11[2] = *(_QWORD *)(a2 + 16);
      }
      *(_WORD *)(a2 + 8) = *(unsigned __int8 *)(a2 + 9) << 8;
      *v5 += 2;
      if ((*(_WORD *)(a2 + 8) & 0xFE) == 4)
        result = sub_1C4E8C6FC(a2 + 16);
    }
    a2 += 48;
  }
  return result;
}

void sub_1C4E91B00(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 8))
  {
    v1 = *(unsigned int *)(a1 + 16);
    if (v1 <= 4 * *(_DWORD *)(a1 + 8) || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)a1;
        v3 = *(_QWORD *)a1 + 16 * v1;
        do
        {
          *v2 = -4096;
          v2[1] = -4096;
          v2 += 2;
        }
        while (v2 != (_QWORD *)v3);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      sub_1C4E91B50(a1);
    }
  }
}

void sub_1C4E91B50(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 8);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *(_QWORD *)(a1 + 8) = 0;
    if (!(_DWORD)v2)
      return;
    v6 = *(void **)a1;
LABEL_11:
    memset_pattern16(v6, &unk_1C85F2160, 16 * v2);
    return;
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  if (v5)
  {
    v7 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
    v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
    LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v8;
    v6 = operator new(16 * v8, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = 0;
    v2 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v2)
      return;
    goto LABEL_11;
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

__int16 *sub_1C4E91C38(__int16 *result, uint64_t a2)
{
  __int16 *v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  __int16 *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD **v19;
  uint64_t v20;
  __int16 *v21;
  uint64_t v22;
  __int16 *v23;
  unsigned int v24;
  __int16 *v25;
  unsigned int v26;
  uint64_t v27;

  v2 = result;
  v3 = *(unsigned __int8 *)(a2 + 16) - 33;
  v4 = v3 > 0x33;
  v5 = (1 << v3) & 0x8000008000001;
  v6 = v4 || v5 == 0;
  if (v6 || (*(_BYTE *)(a2 + 23) & 0x20) == 0)
  {
LABEL_20:
    *v2 = 6;
    return result;
  }
  v8 = ***(_QWORD ***)a2;
  v27 = a2;
  v9 = *(_DWORD *)(v8 + 2496);
  if (!v9)
  {
    v21 = 0;
LABEL_31:
    result = (__int16 *)sub_1C541AB24(v8 + 2480, (uint64_t)&v27, &v27, v21);
    v22 = v27;
    *((_QWORD *)result + 3) = 0;
    *((_QWORD *)result + 4) = 0;
    *(_QWORD *)result = v22;
    *((_QWORD *)result + 1) = result + 12;
    *((_QWORD *)result + 2) = 0x100000000;
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(v8 + 2480);
  v11 = v9 - 1;
  v12 = v11 & ((a2 >> 4) ^ (a2 >> 9));
  result = (__int16 *)(v10 + 40 * v12);
  v13 = *(_QWORD *)result;
  if (*(_QWORD *)result != a2)
  {
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = result;
      v17 = v12 + v15++;
      v12 = v17 & v11;
      result = (__int16 *)(v10 + 40 * v12);
      v13 = *(_QWORD *)result;
      if (*(_QWORD *)result == a2)
        goto LABEL_16;
    }
    if (v14)
      v21 = v14;
    else
      v21 = result;
    goto LABEL_31;
  }
LABEL_16:
  v18 = *((unsigned int *)result + 4);
  if (!(_DWORD)v18)
    goto LABEL_20;
  v19 = (_QWORD **)(*((_QWORD *)result + 1) + 8);
  v20 = 16 * v18;
  while (*((_DWORD *)v19 - 2) != 4)
  {
    v19 += 2;
    v20 -= 16;
    if (!v20)
      goto LABEL_20;
  }
  result = (__int16 *)*v19;
  if (!*v19 || *(_BYTE *)(*(_QWORD *)a2 + 8) != 13)
    goto LABEL_20;
  llvm::getConstantRangeFromMetadata((uint64_t)result, (uint64_t)&v23);
  result = (__int16 *)sub_1C4E8E6E0((uint64_t)&v23, 0, v2);
  if (v26 >= 0x41)
  {
    result = v25;
    if (v25)
      result = (__int16 *)MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
  }
  if (v24 >= 0x41)
  {
    result = v23;
    if (v23)
      return (__int16 *)MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
  }
  return result;
}

void sub_1C4E91E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const llvm::DominatorTree *a6)
{
  const llvm::DominatorTree *v6;
  uint64_t v8;
  unsigned int v12;
  __int16 v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  llvm::Constant ****v20;
  __int16 v21;
  __int16 v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  llvm::Constant *****v26;
  int v27;
  _QWORD *v28;
  unsigned int v29;
  _QWORD *v30;
  int v32;
  llvm::Constant *****v33;
  unsigned __int8 *v34;
  const llvm::DominatorTree *v35;
  __int16 v36;
  int v37;
  void *v38;
  unint64_t v39;
  llvm::Constant ****v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  llvm::Constant *****v44;
  _BOOL8 v45;
  uint64_t v46;
  llvm::ConstantInt *v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  void *v52;
  unsigned int v53;
  llvm::ValueHandleBase *v54;
  __int16 v55;
  BOOL v56;
  _BOOL4 v57;
  llvm::Constant *****v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned int v71;
  void *v72;
  unsigned int v73;
  const void *v74;
  size_t v75;
  void *v76;
  int v77;
  int v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  BOOL v84;
  _BOOL4 v85;
  llvm::Type *v86;
  llvm::Constant *****v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  llvm::APInt *v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  llvm::APInt *v96;
  BOOL v97;
  int v98;
  int v99;
  void *v100;
  llvm::APInt *v101;
  unint64_t v102;
  unsigned int v103;
  unint64_t v104;
  BOOL v105;
  int v106;
  void **v107;
  uint64_t v108;
  int v109;
  int v110;
  unsigned __int8 v111;
  int v112;
  unsigned int v113;
  __int16 v114;
  uint64_t v115;
  unsigned int v116;
  void *v117;
  BOOL v118;
  char v119;
  char v120;
  uint64_t v121;
  int v122;
  void *v123;
  void *v124;
  unsigned int v125;
  unint64_t v126;
  int v127;
  llvm::APInt *v128;
  llvm::APInt *v129;
  llvm::APInt *v130;
  uint64_t v131;
  unint64_t __n;
  void *v133;
  unsigned int *v134;
  unint64_t v135;
  int v136;
  const llvm::DominatorTree *v138;
  uint64_t v139;
  llvm::Type *v140;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  llvm::Constant ****v145;
  void *v146;
  unsigned int v147;
  void *v148;
  unsigned int v149;
  void *__src;
  unsigned int v151;
  char v152;
  void *__s2;
  void *v154;
  unsigned int v155[2];
  void *v156;
  unsigned int v157;
  char v158;
  unint64_t v159;
  void *v160;
  void *v161;
  void *v162;
  unsigned int v163;
  void *v164;
  unsigned int *v165;
  void *v166;
  void *v167;
  unsigned int v168;
  uint64_t v169;

  v6 = a6;
  v8 = a4;
  v169 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v12 = *(unsigned __int8 *)(a3 + 16);
    if (v12 <= 0x14)
    {
      LOWORD(__s2) = 0;
      if (v12 - 11 <= 1)
      {
        v13 = 1;
        goto LABEL_30;
      }
      sub_1C4E8C21C((uint64_t)&__s2, a3, 0);
      v13 = (__int16)__s2;
      v27 = __s2;
      *(_WORD *)a1 = __s2;
      if ((v27 - 2) >= 2)
      {
        if ((v27 - 4) > 1)
        {
LABEL_73:
          *(_BYTE *)(a1 + 40) = 1;
          return;
        }
        *(_DWORD *)(a1 + 16) = v155[0];
        *(_QWORD *)(a1 + 8) = v154;
        *(_DWORD *)(a1 + 32) = v157;
        *(_QWORD *)(a1 + 24) = v156;
LABEL_30:
        *(_WORD *)a1 = v13;
        goto LABEL_73;
      }
      v38 = v154;
LABEL_72:
      *(_QWORD *)(a1 + 8) = v38;
      goto LABEL_73;
    }
  }
  v15 = (_QWORD *)(a4 + 40);
  v14 = *(_QWORD **)(a4 + 40);
  if (v14 == (_QWORD *)(a4 + 40))
    goto LABEL_46;
  v16 = v14 - 3;
  if (!v14)
    v16 = 0;
  v17 = *((unsigned __int8 *)v16 + 16) - 40;
  if (v17 < 0xFFFFFFF5)
    v16 = 0;
  if (v14)
  {
    v18 = *((_BYTE *)v16 + 16) == 30 && v17 >= 0xFFFFFFF5;
    if (v18 && (*((_DWORD *)v16 + 5) & 0x7FFFFFF) == 3)
    {
      v19 = *(v16 - 4);
      if (v19 == *(v16 - 8))
      {
        v8 = a4;
      }
      else
      {
        v20 = (llvm::Constant ****)*(v16 - 12);
        if (v20 == (llvm::Constant ****)a3)
        {
          v45 = v19 == a5;
          v46 = ***(_QWORD ***)a3;
          v47 = *(llvm::ConstantInt **)(v46 + 1888);
          v48 = *(unsigned int *)(v46 + 1896);
          LODWORD(v154) = v48 >> 8;
          if (v48 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&__s2, v45, 0);
          }
          else
          {
            if (v48 <= 0xFF)
              v49 = 0;
            else
              v49 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v48);
            __s2 = (void *)(v49 & v45);
          }
          v6 = a6;
          v8 = a4;
          v54 = llvm::ConstantInt::get(v47, (llvm::LLVMContext *)&__s2, (const llvm::APInt *)a3);
          if (v154 >= 0x41 && __s2)
            MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
          LOWORD(__s2) = 0;
          if (*((unsigned __int8 *)v54 + 16) - 11 >= 2)
          {
            sub_1C4E8C21C((uint64_t)&__s2, (uint64_t)v54, 0);
            v55 = __s2;
            if (__s2 - 2 < 2)
            {
              v50 = (unsigned int *)v154;
            }
            else
            {
              v50 = (unsigned int *)(__s2 - 4);
              if (v50 <= 1)
              {
                v51 = v155[0];
                v50 = (unsigned int *)v154;
                v53 = v157;
                v55 = (__int16)__s2;
                v52 = v156;
              }
            }
          }
          else
          {
            v55 = 1;
          }
          v83 = 1;
          goto LABEL_341;
        }
        sub_1C4E8CDD8((uint64_t)&__s2, a3, (_QWORD *)*(v16 - 12), v19 == a5);
        v21 = (__int16)__s2;
        v22 = __s2;
        if (__s2 == 6)
        {
          if (!a3)
            goto LABEL_326;
          v23 = *(unsigned __int8 *)(a3 + 16);
          if (v23 - 21 < 7 || *(_BYTE *)(*(_QWORD *)a3 + 8) != 13)
            goto LABEL_326;
          if (v23 < 0x1C || v23 - 66 >= 0xD)
          {
            v84 = v23 <= 0x1B || v23 - 41 >= 0x12;
            v85 = !v84;
            if (v23 != 95 && !v85)
              goto LABEL_326;
          }
          v24 = *(_DWORD *)(a3 + 20);
          if ((v24 & 0x40000000) != 0)
          {
            v26 = *(llvm::Constant ******)(a3 - 8);
            v25 = v24 & 0x7FFFFFF;
          }
          else
          {
            v25 = v24 & 0x7FFFFFF;
            v26 = (llvm::Constant *****)(a3 - 32 * v25);
          }
          v86 = (llvm::Type *)(*(_QWORD *)(*(_QWORD *)(a5 + 56) + 40) + 272);
          v87 = v26;
          if (v25)
          {
            v88 = 32 * v25;
            v87 = v26;
            do
            {
              if (*v87 == v20)
                goto LABEL_231;
              v87 += 4;
              v88 -= 32;
            }
            while (v88);
            v87 = &v26[4 * v25];
          }
LABEL_231:
          if (v25 != ((char *)v87 - (char *)v26) >> 5)
          {
            LODWORD(v160) = 1;
            v159 = v19 == a5;
            sub_1C4E935E8((__int16 *)&v164, a3, v20, (unsigned int *)&v159, v86);
            v6 = a6;
            v8 = a4;
            if ((v21 & 0xFE) == 4)
            {
              if (v157 >= 0x41 && v156)
                MEMORY[0x1CAA32F9C](v156, 0x1000C8000313F17);
              if (v155[0] >= 0x41 && v154)
                MEMORY[0x1CAA32F9C](v154, 0x1000C8000313F17);
            }
            v21 = v164;
            if (v164 - 2 < 2)
            {
              v154 = v165;
            }
            else if (v164 - 4 <= 1)
            {
              v155[0] = v166;
              v154 = v165;
              LODWORD(v166) = 0;
              v157 = v168;
              v156 = v167;
              LOWORD(__s2) = (_WORD)v164;
              v21 = (__int16)v164;
            }
            if (v160 >= 0x41 && v159)
              MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
            goto LABEL_327;
          }
          if (!v25)
            goto LABEL_326;
          v89 = 0;
          v90 = 0;
          v140 = (llvm::Type *)(*(_QWORD *)(*(_QWORD *)(a5 + 56) + 40) + 272);
          while (1)
          {
            if ((v24 & 0x40000000) != 0)
              v91 = *(_QWORD *)(a3 - 8);
            else
              v91 = a3 - 32 * v25;
            v145 = *(llvm::Constant *****)(v91 + v89);
            sub_1C4E8CDD8((uint64_t)&v164, (uint64_t)v145, v20, v19 == a5);
            if (v164 == 2)
            {
              v134 = v165;
              if (*((_BYTE *)v165 + 16) == 16)
              {
                LODWORD(v133) = (unsigned __int16)v164;
                v151 = v165[8];
                if (v151 <= 0x40)
                {
                  v100 = (void *)*((_QWORD *)v165 + 3);
LABEL_306:
                  __src = v100;
                  goto LABEL_307;
                }
                v123 = (void *)operator new[]();
                __src = v123;
                v124 = (void *)*((_QWORD *)v134 + 3);
                goto LABEL_409;
              }
            }
            if ((v164 & 0xFE) == 4)
            {
              LODWORD(v160) = (_DWORD)v166;
              v135 = v166;
              LODWORD(v133) = (unsigned __int16)v164;
              if (v166 > 0x40)
              {
                __n = (((unint64_t)v166 + 63) >> 3) & 0x3FFFFFF8;
                v128 = (llvm::APInt *)operator new[]();
                v134 = v165;
                memcpy(v128, v165, __n);
                v92 = v128;
              }
              else
              {
                v92 = (llvm::APInt *)v165;
                v134 = v165;
              }
              v159 = (unint64_t)v92;
              llvm::APInt::operator+=((uint64_t)&v159, 1uLL);
              v93 = v160;
              v94 = v159;
              LODWORD(v160) = 0;
              v95 = v168;
              if (v168 > 0x40)
              {
                v126 = v159;
                v129 = (llvm::APInt *)v167;
                __n = v168;
                v125 = v93;
                v99 = memcmp(v167, (const void *)v159, (((unint64_t)v168 + 63) >> 3) & 0x3FFFFFF8);
                v93 = v125;
                v94 = v126;
                v96 = v129;
                v95 = __n;
                v97 = v99 == 0;
              }
              else
              {
                v96 = (llvm::APInt *)v167;
                v97 = v167 == (void *)v159;
              }
              v98 = v97;
              if (v93 >= 0x41)
              {
                if (v94)
                {
                  __n = v95;
                  v130 = v96;
                  v127 = v98;
                  MEMORY[0x1CAA32F9C](v94, 0x1000C8000313F17);
                  v98 = v127;
                  v96 = v130;
                  v95 = __n;
                  if (v160 >= 0x41)
                  {
                    if (v159)
                    {
                      MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
                      v98 = v127;
                      v96 = v130;
                      v95 = __n;
                    }
                  }
                }
              }
              if (v98)
              {
                v101 = v96;
                v102 = v95;
                LODWORD(v160) = v135;
                if (v135 > 0x40)
                {
                  v159 = operator new[]();
                  memcpy((void *)v159, v134, ((v135 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v159 = (unint64_t)v134;
                }
                llvm::APInt::operator+=((uint64_t)&v159, 1uLL);
                v103 = v160;
                v104 = v159;
                LODWORD(v160) = 0;
                if (v102 > 0x40)
                  v105 = memcmp(v101, (const void *)v159, ((v102 + 63) >> 3) & 0x3FFFFFF8) == 0;
                else
                  v105 = v101 == (llvm::APInt *)v159;
                v106 = v105;
                if (v103 >= 0x41)
                {
                  if (v104)
                  {
                    MEMORY[0x1CAA32F9C](v104, 0x1000C8000313F17);
                    if (v160 >= 0x41)
                    {
                      if (v159)
                        MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
                    }
                  }
                }
                if (v106)
                  v107 = (void **)&v165;
                else
                  v107 = 0;
                v108 = 8;
                if (v106)
                  v108 = (uint64_t)&v166;
                v151 = *(_DWORD *)v108;
                if (v151 <= 0x40)
                {
                  v100 = *v107;
                  goto LABEL_306;
                }
                v123 = (void *)operator new[]();
                __src = v123;
                v124 = *v107;
LABEL_409:
                memcpy(v123, v124, (((unint64_t)v151 + 63) >> 3) & 0x3FFFFFF8);
LABEL_307:
                v152 = 1;
                sub_1C4E935E8((__int16 *)&v159, a3, v145, (unsigned int *)&__src, v140);
                if ((v21 & 0xFE) == 4)
                {
                  if (v157 >= 0x41 && v156)
                    MEMORY[0x1CAA32F9C](v156, 0x1000C8000313F17);
                  if (v155[0] >= 0x41 && v154)
                    MEMORY[0x1CAA32F9C](v154, 0x1000C8000313F17);
                }
                v21 = v159;
                LOWORD(__s2) = v159;
                if (v159 - 2 < 2)
                {
                  v154 = v160;
                }
                else if (v159 - 4 <= 1)
                {
                  v155[0] = v161;
                  v154 = v160;
                  LODWORD(v161) = 0;
                  v157 = v163;
                  v156 = v162;
                  LOWORD(__s2) = v159;
                  v21 = v159;
                }
                if (v152 && v151 >= 0x41 && __src)
                  MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                if ((v133 & 0xFE) == 4)
                {
                  if (v168 >= 0x41 && v167)
                    MEMORY[0x1CAA32F9C](v167, 0x1000C8000313F17);
                  if (v166 >= 0x41 && v134)
                  {
                    MEMORY[0x1CAA32F9C](v134, 0x1000C8000313F17);
                    v21 = (__int16)__s2;
                  }
                }
LABEL_326:
                v6 = a6;
                v8 = a4;
LABEL_327:
                v22 = v21;
                if (v21 == 6)
                {
                  v110 = 1;
                  goto LABEL_334;
                }
                if (v21 - 2 < 2)
                {
                  LOWORD(v140) = v21;
                  v135 = (unint64_t)v154;
                  goto LABEL_333;
                }
                if (v21 - 4 > 1)
                {
LABEL_331:
                  LOWORD(v140) = v22;
                  goto LABEL_333;
                }
LABEL_95:
                LODWORD(v134) = v155[0];
                v135 = (unint64_t)v154;
                LODWORD(__n) = v157;
                v133 = v156;
                LOWORD(v140) = v21;
                v155[0] = 0;
                v157 = 0;
                goto LABEL_333;
              }
              if (v168 >= 0x41 && v167)
                MEMORY[0x1CAA32F9C](v167, 0x1000C8000313F17);
              if (v166 >= 0x41 && v165)
                MEMORY[0x1CAA32F9C](v165, 0x1000C8000313F17);
            }
            ++v90;
            v24 = *(_DWORD *)(a3 + 20);
            v25 = v24 & 0x7FFFFFF;
            v89 += 32;
            if (v90 >= v25)
              goto LABEL_326;
          }
        }
        if (__s2 - 2 >= 2)
        {
          v6 = a6;
          v8 = a4;
          if (__s2 - 4 > 1)
            goto LABEL_331;
          goto LABEL_95;
        }
        LOWORD(v140) = __s2;
        v135 = (unint64_t)v154;
        v6 = a6;
        v8 = a4;
LABEL_333:
        v110 = 0;
        LOBYTE(v21) = 0;
LABEL_334:
        if ((v21 & 0xFE) == 4)
        {
          if (v157 >= 0x41 && v156)
            MEMORY[0x1CAA32F9C](v156, 0x1000C8000313F17);
          if (v155[0] >= 0x41 && v154)
            MEMORY[0x1CAA32F9C](v154, 0x1000C8000313F17);
        }
        if (!v110)
        {
          v83 = 1;
          v50 = (unsigned int *)v135;
          v55 = (__int16)v140;
          goto LABEL_340;
        }
        v14 = (_QWORD *)*v15;
      }
    }
  }
  if (v14 == v15)
  {
LABEL_46:
    v14 = v15;
    goto LABEL_47;
  }
  if (v14)
    v28 = v14 - 3;
  else
    v28 = 0;
  v29 = *((unsigned __int8 *)v28 + 16) - 40;
  if (v29 >= 0xFFFFFFF5)
    v30 = v28;
  else
    v30 = 0;
  if (!v14)
    goto LABEL_47;
  if (*((_BYTE *)v30 + 16) != 31 || v29 < 0xFFFFFFF5)
    goto LABEL_47;
  v32 = *((_DWORD *)v30 + 5);
  v33 = (v32 & 0x40000000) != 0 ? (llvm::Constant *****)*(v30 - 1) : (llvm::Constant *****)&v30[-4 * (v32 & 0x7FFFFFF)];
  v39 = *(unsigned int *)(*(_QWORD *)a3 + 8);
  if (*(_DWORD *)(*(_QWORD *)a3 + 8) != 13)
    goto LABEL_47;
  v40 = *v33;
  if (*v33 != (llvm::Constant ****)a3)
  {
    v41 = *(unsigned __int8 *)(a3 + 16);
    if (v41 - 21 < 7)
      goto LABEL_47;
    if (v41 < 0x1C || v41 - 66 >= 0xD)
    {
      v56 = v41 <= 0x1B || v41 - 41 >= 0x12;
      v57 = !v56;
      if (v41 != 95 && !v57)
        goto LABEL_47;
    }
    v42 = *(_DWORD *)(a3 + 20);
    if ((v42 & 0x40000000) != 0)
    {
      v44 = *(llvm::Constant ******)(a3 - 8);
      v43 = v42 & 0x7FFFFFF;
    }
    else
    {
      v43 = v42 & 0x7FFFFFF;
      v44 = (llvm::Constant *****)(a3 - 32 * v43);
    }
    v58 = v44;
    if (v43)
    {
      v59 = 32 * v43;
      v58 = v44;
      while (*v58 != v40)
      {
        v58 += 4;
        v59 -= 32;
        if (!v59)
        {
          v58 = &v44[4 * v43];
          break;
        }
      }
    }
    if (v43 == ((char *)v58 - (char *)v44) >> 5)
    {
LABEL_47:
      LOWORD(v164) = 6;
      goto LABEL_48;
    }
  }
  if ((v32 & 0x40000000) != 0)
    v60 = (_QWORD *)*(v30 - 1);
  else
    v60 = &v30[-4 * (v32 & 0x7FFFFFF)];
  v61 = v60[4];
  v62 = v39 >> 8;
  LODWORD(v165) = *(_DWORD *)(*(_QWORD *)a3 + 8) >> 8;
  v63 = v39 >> 8;
  v138 = v6;
  v131 = a2;
  v142 = v8;
  if (v61 == a5)
  {
    if (v63 <= 0x40)
    {
      if (v39 <= 0xFF)
        v64 = 0;
      else
        v64 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v39));
      v164 = v64;
      goto LABEL_124;
    }
    v121 = -1;
    v122 = 1;
  }
  else
  {
    if (v63 <= 0x40)
    {
      v65 = 0;
      v164 = 0;
      LODWORD(v167) = v39 >> 8;
      goto LABEL_126;
    }
    v121 = 0;
    v122 = 0;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v164, v121, v122);
LABEL_124:
  LODWORD(v62) = (_DWORD)v165;
  LODWORD(v167) = (_DWORD)v165;
  if (v165 > 0x40)
  {
    v65 = (void *)operator new[]();
    v166 = v65;
    v66 = v164;
    v109 = (int)v167;
    memcpy(v65, v164, (((unint64_t)v167 + 63) >> 3) & 0x3FFFFFF8);
    LODWORD(v62) = v109;
    goto LABEL_127;
  }
  v65 = v164;
LABEL_126:
  v166 = v65;
  v66 = v65;
LABEL_127:
  if (((*((_DWORD *)v30 + 5) >> 1) & 0x3FFFFFF) == 1)
  {
LABEL_199:
    v147 = v165;
    v146 = v66;
    v149 = v62;
    v148 = v65;
    LODWORD(v165) = 0;
    LODWORD(v167) = 0;
    sub_1C4E8E6E0((uint64_t)&v146, 0, (__int16 *)&__s2);
    v55 = __s2;
    if (__s2 - 2 < 2)
    {
      v135 = (unint64_t)v154;
      v6 = v138;
      a2 = v131;
      v8 = v142;
    }
    else
    {
      v6 = v138;
      a2 = v131;
      v8 = v142;
      if (__s2 - 4 <= 1)
      {
        LODWORD(v134) = v155[0];
        v135 = (unint64_t)v154;
        LODWORD(__n) = v157;
        v133 = v156;
        v55 = (__int16)__s2;
        v155[0] = 0;
        v157 = 0;
      }
    }
    LOWORD(__s2) = (unsigned __int16)__s2 & 0xFF00;
    if (v149 >= 0x41 && v148)
      MEMORY[0x1CAA32F9C](v148, 0x1000C8000313F17);
    if (v147 >= 0x41 && v146)
      MEMORY[0x1CAA32F9C](v146, 0x1000C8000313F17);
    v83 = 1;
    goto LABEL_206;
  }
  v67 = 0;
  v144 = 2 * (((*((_DWORD *)v30 + 5) >> 1) & 0x3FFFFFFu) - 1);
  v136 = 1;
  v139 = v61;
  while (1)
  {
    v68 = *((_DWORD *)v30 + 5);
    v69 = (v68 & 0x40000000) != 0 ? (_QWORD *)*(v30 - 1) : &v30[-4 * (v68 & 0x7FFFFFF)];
    v70 = v69[4 * (((_DWORD)v67 + 2) & 0xFFFFFFFE)];
    v71 = *(_DWORD *)(v70 + 32);
    v151 = v71;
    if (v71 > 0x40)
    {
      v72 = (void *)operator new[]();
      __src = v72;
      v74 = *(const void **)(v70 + 24);
      v73 = v151;
      v75 = (((unint64_t)v151 + 63) >> 3) & 0x3FFFFFF8;
      memcpy(v72, v74, v75);
      if (v73 > 0x40)
      {
        v76 = (void *)operator new[]();
        memcpy(v76, __src, v75);
        LODWORD(v160) = v73;
        v159 = (unint64_t)v76;
        LODWORD(v154) = v73;
        v72 = (void *)operator new[]();
        memcpy(v72, (const void *)v159, v75);
        v61 = v139;
        goto LABEL_138;
      }
      v61 = v139;
    }
    else
    {
      v72 = *(void **)(v70 + 24);
      __src = v72;
      v73 = v71;
    }
    LODWORD(v160) = v73;
    v159 = (unint64_t)v72;
    LODWORD(v154) = v73;
LABEL_138:
    __s2 = v72;
    llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
    LODWORD(v162) = (_DWORD)v154;
    v161 = __s2;
    if (v40 != (llvm::Constant ****)a3)
    {
      sub_1C4E935E8((__int16 *)&__s2, a3, v40, (unsigned int *)&__src, (llvm::Type *)(*(_QWORD *)(*(_QWORD *)(a5 + 56) + 40) + 272));
      v77 = __s2;
      if (__s2 == 6)
      {
        v136 = 0;
        LOWORD(v140) = (unsigned __int16)v140 & 0xFF00;
      }
      else
      {
        if (v160 > 0x40 || v155[0] > 0x40)
        {
          llvm::APInt::reallocate((uint64_t)&v159, v155[0]);
          if (v160 <= 0x40)
            v159 = (unint64_t)v154;
          else
            memcpy((void *)v159, v154, (((unint64_t)v160 + 63) >> 3) & 0x3FFFFFF8);
          v61 = v139;
        }
        else
        {
          v159 = (unint64_t)v154;
          LODWORD(v160) = v155[0];
        }
        if (v162 > 0x40 || v157 > 0x40)
        {
          llvm::APInt::reallocate((uint64_t)&v161, v157);
          if (v162 <= 0x40)
            v161 = v156;
          else
            memcpy(v161, v156, (((unint64_t)v162 + 63) >> 3) & 0x3FFFFFF8);
          v61 = v139;
        }
        else
        {
          v161 = v156;
          LODWORD(v162) = v157;
        }
      }
      if ((__s2 & 0xFE) == 4)
      {
        if (v157 >= 0x41 && v156)
          MEMORY[0x1CAA32F9C](v156, 0x1000C8000313F17);
        if (v155[0] >= 0x41 && v154)
          MEMORY[0x1CAA32F9C](v154, 0x1000C8000313F17);
      }
      if (v77 == 6)
        break;
    }
    v78 = *((_DWORD *)v30 + 5);
    if (v61 == a5)
    {
      if ((v78 & 0x40000000) != 0)
        v80 = (_QWORD *)*(v30 - 1);
      else
        v80 = &v30[-4 * (v78 & 0x7FFFFFF)];
      v82 = (v67 + 3);
      if (v67 == 0x1FFFFFFFCLL)
        v82 = 1;
      if (v40 != (llvm::Constant ****)a3 || v80[4 * v82] == a5)
        goto LABEL_170;
      llvm::ConstantRange::difference((llvm::ConstantRange *)&v164, (const llvm::ConstantRange *)&v159, (uint64_t)&__s2);
    }
    else
    {
      if ((v78 & 0x40000000) != 0)
        v79 = (_QWORD *)*(v30 - 1);
      else
        v79 = &v30[-4 * (v78 & 0x7FFFFFF)];
      v81 = (v67 + 3);
      if (v67 == 0x1FFFFFFFCLL)
        v81 = 1;
      if (v79[4 * v81] != a5)
        goto LABEL_170;
      llvm::ConstantRange::unionWith((uint64_t)&v164, (unsigned int *)&v159, 0, (uint64_t)&__s2);
    }
    if (v165 >= 0x41 && v164)
      MEMORY[0x1CAA32F9C](v164, 0x1000C8000313F17);
    v164 = __s2;
    LODWORD(v165) = (_DWORD)v154;
    LODWORD(v154) = 0;
    if (v167 >= 0x41 && v166)
    {
      MEMORY[0x1CAA32F9C](v166, 0x1000C8000313F17);
      v166 = *(void **)v155;
      LODWORD(v167) = (_DWORD)v156;
      LODWORD(v156) = 0;
      if (v154 >= 0x41 && __s2)
        MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
    }
    else
    {
      v166 = *(void **)v155;
      LODWORD(v167) = (_DWORD)v156;
    }
LABEL_170:
    if (v162 >= 0x41 && v161)
      MEMORY[0x1CAA32F9C](v161, 0x1000C8000313F17);
    if (v160 >= 0x41 && v159)
      MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
    if (v151 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    v67 += 2;
    if (v144 == v67)
    {
      LODWORD(v62) = (_DWORD)v167;
      v66 = v164;
      v65 = v166;
      goto LABEL_199;
    }
  }
  v6 = v138;
  if (v162 >= 0x41 && v161)
    MEMORY[0x1CAA32F9C](v161, 0x1000C8000313F17);
  a2 = v131;
  v8 = v142;
  v55 = (__int16)v140;
  v83 = v136;
  if (v160 >= 0x41 && v159)
    MEMORY[0x1CAA32F9C](v159, 0x1000C8000313F17);
  if (v151 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
LABEL_206:
  if (v167 >= 0x41 && v166)
    MEMORY[0x1CAA32F9C](v166, 0x1000C8000313F17);
  if (v165 >= 0x41 && v164)
    MEMORY[0x1CAA32F9C](v164, 0x1000C8000313F17);
  v50 = (unsigned int *)v135;
LABEL_340:
  v51 = v134;
  v52 = v133;
  v53 = __n;
LABEL_341:
  if (v83)
    v111 = v55;
  else
    v111 = 6;
  v112 = v111;
  LOWORD(v164) = v111;
  if (v111 - 4 >= 2)
  {
    v114 = v111;
    if (v111 - 2 < 2)
    {
      v165 = v50;
      goto LABEL_353;
    }
  }
  else
  {
    if (v83)
      v113 = v51;
    else
      v113 = 0;
    LODWORD(v166) = v113;
    v165 = v50;
    if (v83)
    {
      v168 = v53;
      v167 = v52;
      v114 = v112 | v55 & 0xFF00;
      LOWORD(v164) = v114;
      goto LABEL_354;
    }
    v168 = 0;
LABEL_353:
    v114 = v112;
  }
LABEL_354:
  if ((v114 & 0xFE) != 4)
  {
    if (v112 != 2)
      goto LABEL_367;
    goto LABEL_369;
  }
  LODWORD(v154) = (_DWORD)v166;
  v143 = v8;
  v115 = a2;
  if (v166 > 0x40)
  {
    __s2 = (void *)operator new[]();
    memcpy(__s2, v165, (((unint64_t)v154 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __s2 = v165;
  }
  llvm::APInt::operator+=((uint64_t)&__s2, 1uLL);
  v116 = v154;
  v117 = __s2;
  LODWORD(v154) = 0;
  if (v168 > 0x40)
    v118 = memcmp(v167, __s2, (((unint64_t)v168 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    v118 = v167 == __s2;
  v119 = v118;
  if (v116 >= 0x41)
  {
    if (v117)
    {
      MEMORY[0x1CAA32F9C](v117, 0x1000C8000313F17);
      if (v154 >= 0x41)
      {
        if (__s2)
          MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
      }
    }
  }
  if (v112 == 2)
    v120 = 1;
  else
    v120 = v119;
  a2 = v115;
  v8 = v143;
  if ((v120 & 1) != 0)
  {
LABEL_369:
    *(_WORD *)a1 = v112;
    if (v114 - 2 >= 2)
    {
      if (v114 - 4 <= 1)
      {
        *(_DWORD *)(a1 + 16) = (_DWORD)v166;
        *(_QWORD *)(a1 + 8) = v165;
        *(_DWORD *)(a1 + 32) = v168;
        *(_QWORD *)(a1 + 24) = v167;
        *(_WORD *)a1 = v114;
      }
      goto LABEL_73;
    }
    v38 = v165;
    goto LABEL_72;
  }
LABEL_367:
  v14 = (_QWORD *)*v15;
LABEL_48:
  if (v14 == v15)
  {
    v35 = 0;
  }
  else
  {
    if (v14)
      v34 = (unsigned __int8 *)(v14 - 3);
    else
      v34 = 0;
    if (v34[16] - 29 >= 0xB)
      v35 = 0;
    else
      v35 = (const llvm::DominatorTree *)v34;
  }
  sub_1C4E89520((uint64_t)&__s2, a2, a3, v8, v35);
  if (v158)
  {
    sub_1C4E8B92C(a2, a3, (uint64_t)&__s2, v6);
    sub_1C4E8C7E8((uint64_t)&v159, (unsigned __int8 *)&v164, (__int16 *)&__s2);
    v36 = v159;
    v37 = v159;
    *(_WORD *)a1 = v159;
    if ((v37 - 2) < 2)
    {
      *(_QWORD *)(a1 + 8) = v160;
    }
    else if ((v37 - 4) <= 1)
    {
      *(_DWORD *)(a1 + 16) = (_DWORD)v161;
      *(_QWORD *)(a1 + 8) = v160;
      LODWORD(v161) = 0;
      *(_DWORD *)(a1 + 32) = v163;
      *(_QWORD *)(a1 + 24) = v162;
      *(_WORD *)a1 = v36;
    }
    *(_BYTE *)(a1 + 40) = 1;
    if (v158 && (__s2 & 0xFE) == 4)
    {
      if (v157 >= 0x41 && v156)
        MEMORY[0x1CAA32F9C](v156, 0x1000C8000313F17);
      if (v155[0] >= 0x41 && v154)
        MEMORY[0x1CAA32F9C](v154, 0x1000C8000313F17);
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 40) = 0;
  }
  if ((v164 & 0xFE) == 4)
  {
    if (v168 >= 0x41 && v167)
      MEMORY[0x1CAA32F9C](v167, 0x1000C8000313F17);
    if (v166 >= 0x41)
    {
      if (v165)
        MEMORY[0x1CAA32F9C](v165, 0x1000C8000313F17);
    }
  }
}

uint64_t sub_1C4E935E8(__int16 *a1, uint64_t a2, llvm::Constant ****a3, unsigned int *a4, llvm::Type *a5)
{
  uint64_t result;
  const llvm::DataLayout *v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  llvm::Constant *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  size_t v24;
  void *v25;
  size_t v26;
  void *v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  unsigned int v31;
  llvm::Type *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  llvm::Type *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  llvm::Type *v40;
  unsigned int v41;
  llvm::Type *v42;
  __int128 v43;
  __int128 v44;
  __int16 v45;

  result = (uint64_t)llvm::Constant::getIntegerValue(*a3, (llvm::Type *)a4, (const llvm::APInt *)a3);
  v11 = result;
  v12 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && ((result = v12 - 28, v12 >= 0x1C) ? (v13 = v12 - 79 >= 0xFFFFFFF3) : (v13 = 0), v13))
  {
    v14 = *(llvm::Constant **)a2;
    v42 = a5;
    v43 = 0u;
    v44 = 0u;
    v45 = 257;
    result = (uint64_t)sub_1C4E6C1BC((llvm *)result, v11, v14, &v42, v10);
    if (!result)
      goto LABEL_24;
    v15 = result;
    if (*(_BYTE *)(result + 16) != 16)
      goto LABEL_24;
    v16 = *(unsigned int *)(result + 32);
    if (v16 > 0x40)
    {
      v24 = ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8;
      v25 = (void *)operator new[]();
      memcpy(v25, *(const void **)(v15 + 24), v24);
      v39 = v16;
      v38 = (uint64_t)v25;
      LODWORD(v43) = v16;
      v17 = (void *)operator new[]();
      memcpy(v17, v25, v24);
    }
    else
    {
      v17 = *(void **)(result + 24);
      v39 = *(_DWORD *)(result + 32);
      v38 = (uint64_t)v17;
      LODWORD(v43) = v16;
    }
    v42 = (llvm::Type *)v17;
    llvm::APInt::operator+=((uint64_t)&v42, 1uLL);
    v41 = v43;
    v40 = v42;
    result = sub_1C4E8E6E0((uint64_t)&v38, 0, a1);
    if (v41 >= 0x41)
    {
      result = (uint64_t)v40;
      if (v40)
        result = MEMORY[0x1CAA32F9C](v40, 0x1000C8000313F17);
    }
    if (v39 >= 0x41)
    {
      result = v38;
      if (v38)
        return MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    }
  }
  else
  {
    if (!a2 || ((result = v12 - 28, v12 >= 0x1C) ? (v18 = v12 - 59 >= 0xFFFFFFEE) : (v18 = 0), !v18))
    {
      if (v12 == 95)
      {
        v22 = a4[2];
        if (v22 > 0x40)
        {
          v26 = ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8;
          v27 = (void *)operator new[]();
          memcpy(v27, *(const void **)a4, v26);
          v31 = v22;
          v30 = (uint64_t)v27;
          LODWORD(v43) = v22;
          v23 = (void *)operator new[]();
          memcpy(v23, v27, v26);
        }
        else
        {
          v23 = *(void **)a4;
          v31 = v22;
          v30 = (uint64_t)v23;
          LODWORD(v43) = v22;
        }
        v42 = (llvm::Type *)v23;
        llvm::APInt::operator+=((uint64_t)&v42, 1uLL);
        v33 = v43;
        v32 = v42;
        result = sub_1C4E8E6E0((uint64_t)&v30, 0, a1);
        if (v33 >= 0x41)
        {
          result = (uint64_t)v32;
          if (v32)
            result = MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
        }
        if (v31 < 0x41)
          return result;
        result = v30;
        if (!v30)
          return result;
        return MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
      }
LABEL_24:
      *a1 = 6;
      return result;
    }
    v42 = a5;
    v43 = 0u;
    v44 = 0u;
    v45 = 257;
    result = sub_1C4E6D628(result);
    if (!result)
      goto LABEL_24;
    v19 = result;
    if (*(_BYTE *)(result + 16) != 16)
      goto LABEL_24;
    v20 = *(unsigned int *)(result + 32);
    if (v20 > 0x40)
    {
      v28 = ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8;
      v29 = (void *)operator new[]();
      memcpy(v29, *(const void **)(v19 + 24), v28);
      v35 = v20;
      v34 = (uint64_t)v29;
      LODWORD(v43) = v20;
      v21 = (void *)operator new[]();
      memcpy(v21, v29, v28);
    }
    else
    {
      v21 = *(void **)(result + 24);
      v35 = *(_DWORD *)(result + 32);
      v34 = (uint64_t)v21;
      LODWORD(v43) = v20;
    }
    v42 = (llvm::Type *)v21;
    llvm::APInt::operator+=((uint64_t)&v42, 1uLL);
    v37 = v43;
    v36 = v42;
    result = sub_1C4E8E6E0((uint64_t)&v34, 0, a1);
    if (v37 >= 0x41)
    {
      result = (uint64_t)v36;
      if (v36)
        result = MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
    }
    if (v35 >= 0x41)
    {
      result = v34;
      if (v34)
        return MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    }
  }
  return result;
}

void sub_1C4E93A0C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  void *v16;
  const void *v17;
  size_t v18;
  uint64_t v19;
  unint64_t v20;

  if ((*(_WORD *)a2 & 0xFE) != 4)
  {
    sub_1C4768AD0(a4, a3);
    v12 = v11;
    if ((_DWORD)v10 == 1)
    *((_DWORD *)a1 + 2) = v12;
    if (v12 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a1, -1, 1);
      v19 = *((unsigned int *)a1 + 2);
      *((_DWORD *)a1 + 6) = v19;
      if (v19 > 0x40)
      {
        v20 = ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8;
        v16 = (void *)operator new[]();
        a1[2] = (unint64_t)v16;
        v17 = (const void *)*a1;
        v18 = v20;
        goto LABEL_18;
      }
    }
    else
    {
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
      if (!v12)
        v13 = 0;
      *a1 = v13;
      *((_DWORD *)a1 + 6) = v12;
    }
    v9 = *a1;
    goto LABEL_13;
  }
  v6 = *(unsigned int *)(a2 + 16);
  *((_DWORD *)a1 + 2) = v6;
  if (v6 > 0x40)
  {
    v14 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
    v7 = (void *)operator new[]();
    memcpy(v7, *(const void **)(a2 + 8), v14);
  }
  else
  {
    v7 = *(void **)(a2 + 8);
  }
  *a1 = (unint64_t)v7;
  v8 = *(unsigned int *)(a2 + 32);
  *((_DWORD *)a1 + 6) = v8;
  if (v8 <= 0x40)
  {
    v9 = *(_QWORD *)(a2 + 24);
LABEL_13:
    a1[2] = v9;
    return;
  }
  v15 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
  v16 = (void *)operator new[]();
  a1[2] = (unint64_t)v16;
  v17 = *(const void **)(a2 + 24);
  v18 = v15;
LABEL_18:
  memcpy(v16, v17, v18);
}

void sub_1C4E93B98(uint64_t a1, uint64_t a2, uint64_t *a3, const llvm::DominatorTree *a4, uint64_t a5)
{
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  sub_1C4E89520((uint64_t)&v12, a2, (uint64_t)a3, a5, a4);
  if (v17)
  {
    sub_1C4E93A0C(&v8, (uint64_t)&v12, *a3, *(_QWORD *)(a2 + 224));
    *(_DWORD *)(a1 + 8) = v9;
    *(_QWORD *)a1 = v8;
    *(_DWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 16) = v10;
    *(_BYTE *)(a1 + 32) = 1;
    if (v17 && (v12 & 0xFE) == 4)
    {
      if (v16 >= 0x41 && v15)
        MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
      if (v14 >= 0x41)
      {
        if (v13)
          MEMORY[0x1CAA32F9C](v13, 0x1000C8000313F17);
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
}

void sub_1C4E93CC8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t **v11;
  int v12;
  uint64_t **v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned __int8 v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  char v31;
  __int16 v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v10 = a3[5];
  if ((v10 & 0x40000000) != 0)
    v11 = (uint64_t **)*((_QWORD *)a3 - 1);
  else
    v11 = (uint64_t **)&a3[-8 * (v10 & 0x7FFFFFF)];
  sub_1C4E93B98((uint64_t)&v27, a2, *v11, (const llvm::DominatorTree *)a3, a4);
  v12 = a3[5];
  if ((v12 & 0x40000000) != 0)
    v13 = (uint64_t **)*((_QWORD *)a3 - 1);
  else
    v13 = (uint64_t **)&a3[-8 * (v12 & 0x7FFFFFF)];
  sub_1C4E93B98((uint64_t)&v22, a2, v13[4], (const llvm::DominatorTree *)a3, a4);
  v14 = v26;
  if (!v31 || !v26)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 40) = 0;
    if (!v14)
      goto LABEL_21;
    goto LABEL_19;
  }
  v15 = *(_QWORD *)(a5 + 24);
  if (!v15)
  {
    sub_1C485C2F0();
    JUMPOUT(0x1C4E93F70);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v15 + 48))(&v18, v15, &v27, &v22);
  sub_1C4E8E6E0((uint64_t)&v18, 0, &v32);
  v16 = v32;
  v17 = v32;
  *(_WORD *)a1 = v32;
  if ((v17 - 2) < 2)
  {
    *(_QWORD *)(a1 + 8) = v33;
  }
  else if ((v17 - 4) <= 1)
  {
    *(_DWORD *)(a1 + 16) = v34;
    *(_QWORD *)(a1 + 8) = v33;
    *(_DWORD *)(a1 + 32) = v36;
    *(_QWORD *)(a1 + 24) = v35;
    v34 = 0;
    v36 = 0;
    *(_WORD *)a1 = v16;
  }
  v32 = v16 & 0xFF00;
  *(_BYTE *)(a1 + 40) = 1;
  if (v21 >= 0x41 && v20)
    MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  if (v19 >= 0x41 && v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  if (v26)
  {
LABEL_19:
    if (v25 >= 0x41 && v24)
      MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
    if (v23 >= 0x41 && v22)
      MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  }
LABEL_21:
  if (v31)
  {
    if (v30 >= 0x41 && v29)
      MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    if (v28 >= 0x41)
    {
      if (v27)
        MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
    }
  }
}

void sub_1C4E93F74()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C4E93F88(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E8138998;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C4E93FC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E8138998;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C4E93FE0(uint64_t a1@<X0>, llvm::ConstantRange *a2@<X1>, llvm::ConstantRange *a3@<X2>, llvm::ConstantRange *a4@<X8>)
{
  llvm::ConstantRange::overflowingBinaryOp(a3, (llvm::ConstantRange *)*(unsigned int *)(a1 + 16), a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 16) - 28, a4);
}

void sub_1C4E94000()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4E94014(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81389E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4E94048(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81389E0;
  a2[1] = v2;
  return result;
}

void sub_1C4E94064(uint64_t a1@<X0>, unsigned int *a2@<X1>, llvm::ConstantRange *a3@<X2>, llvm::ConstantRange *a4@<X8>)
{
  llvm::ConstantRange::binaryOp(a3, a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 16) - 28, a4);
}

void sub_1C4E94080()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4E94094(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8138A28;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4E940C8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8138A28;
  a2[1] = v2;
  return result;
}

void sub_1C4E940E4(uint64_t a1@<X0>, unsigned int *a2@<X1>, llvm::ConstantRange *a3@<X2>, llvm::ConstantRange *a4@<X8>)
{
  int v5;

  v5 = 13;
  if (((1 << (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 32) + 36) - 6)) & 0xC000000003) == 0)
  {
    if (((1 << (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 32) + 36) - 6)) & 0x6000000600000) != 0)
      v5 = 15;
    else
      v5 = 17;
  }
  llvm::ConstantRange::binaryOp(a3, a2, v5, a4);
}

void sub_1C4E94140(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  unint64_t v13;
  unint64_t v14;
  void *v16;
  void *v17;
  unint64_t v18;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v13 = v4 + 1;
    v14 = v5 + 32 * v4;
    if (v5 <= a2 && v14 > a2)
    {
      v18 = a2 - v5;
      sub_1C619CFE0(a1, v13);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v18;
    }
    else
    {
      sub_1C619CFE0(a1, v13);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = v5 + 32 * v6;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v7 + 8) = v8;
  if (v8 > 0x40)
  {
    v16 = (void *)operator new[]();
    *(_QWORD *)v7 = v16;
    memcpy(v16, *(const void **)a2, (((unint64_t)*(unsigned int *)(v7 + 8) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
  }
  v9 = v5 + 32 * v6;
  v10 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(v9 + 24) = v10;
  v11 = (unsigned int *)(v9 + 24);
  v12 = v11 - 2;
  if (v10 > 0x40)
  {
    v17 = (void *)operator new[]();
    *(_QWORD *)v12 = v17;
    memcpy(v17, *(const void **)(a2 + 16), (((unint64_t)*v11 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)v12 = *(_QWORD *)(a2 + 16);
  }
  ++*(_DWORD *)(a1 + 8);
}

uint64_t sub_1C4E94288(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;

  if (a2[40])
  {
    if (*(_BYTE *)(result + 40))
    {
      v5 = result;
      if ((*(_WORD *)result & 0xFE) == 4)
        sub_1C4E8C6FC(result + 8);
      return sub_1C4E8C774(v5, a2);
    }
    else
    {
      *(_WORD *)result = *a2;
      v2 = *a2;
      if ((v2 - 4) < 2)
      {
        *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
        *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
        *((_DWORD *)a2 + 4) = 0;
        *(_DWORD *)(result + 32) = *((_DWORD *)a2 + 8);
        *(_QWORD *)(result + 24) = *((_QWORD *)a2 + 3);
        *((_DWORD *)a2 + 8) = 0;
        *(_BYTE *)(result + 1) = a2[1];
      }
      else if ((v2 - 2) < 2)
      {
        *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
      }
      *(_WORD *)a2 = a2[1] << 8;
      *(_BYTE *)(result + 40) = 1;
    }
  }
  else if (*(_BYTE *)(result + 40))
  {
    v4 = result;
    if ((*(_WORD *)result & 0xFE) == 4)
      sub_1C4E8C6FC(result + 8);
    result = v4;
    *(_BYTE *)(v4 + 40) = 0;
  }
  return result;
}

uint64_t sub_1C4E94384(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  void *v7;
  void *v8;

  v4 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 8) = v4;
  if (v4 > 0x40)
  {
    v7 = (void *)operator new[]();
    *(_QWORD *)a1 = v7;
    memcpy(v7, *(const void **)a2, (((unint64_t)*(unsigned int *)(a1 + 8) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
  }
  v5 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = v5;
  if (v5 > 0x40)
  {
    v8 = (void *)operator new[]();
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v8, *(const void **)(a2 + 16), (((unint64_t)*(unsigned int *)(a1 + 24) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  return a1;
}

void sub_1C4E9445C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4E94470(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v6;
  llvm::Value *v7;
  llvm::Value *v8;
  llvm::Value *v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  _BYTE *v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = sub_1C485F330(*(_QWORD *)(a2 + 56));
  if ((llvm::Value *)v6 != v7)
  {
    v8 = (llvm::Value *)v6;
    v9 = v7;
    do
    {
      sub_1C4E871E0(*(_QWORD *)(a1 + 8), (uint64_t)v8, a2, 0, (uint64_t)&v15);
      if ((_BYTE)v15)
      {
        v10 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v10) > 0x12)
        {
          *(_DWORD *)(v10 + 15) = 656423538;
          *(_OWORD *)v10 = *(_OWORD *)"; LatticeVal for: '";
          *((_QWORD *)a3 + 4) += 19;
          v11 = a3;
        }
        else
        {
          v11 = llvm::raw_ostream::write(a3, "; LatticeVal for: '", 0x13uLL);
        }
        llvm::Value::print(v8, v11, 0);
        v12 = *((_QWORD *)v11 + 4);
        if ((unint64_t)(*((_QWORD *)v11 + 3) - v12) > 5)
        {
          *(_WORD *)(v12 + 4) = 8250;
          *(_DWORD *)v12 = 1936269351;
          *((_QWORD *)v11 + 4) += 6;
        }
        else
        {
          v11 = llvm::raw_ostream::write(v11, "' is: ", 6uLL);
        }
        v13 = llvm::operator<<(v11, (uint64_t)&v15);
        v14 = (_BYTE *)*((_QWORD *)v13 + 4);
        if (*((_BYTE **)v13 + 3) == v14)
        {
          llvm::raw_ostream::write(v13, "\n", 1uLL);
        }
        else
        {
          *v14 = 10;
          ++*((_QWORD *)v13 + 4);
        }
      }
      if ((v15 & 0xFE) == 4)
      {
        if (v19 >= 0x41 && v18)
          MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
        if (v17 >= 0x41)
        {
          if (v16)
            MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
        }
      }
      v8 = (llvm::Value *)((char *)v8 + 40);
    }
    while (v8 != v9);
  }
}

void sub_1C4E94694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Value *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  unsigned int i;
  llvm::Value *Successor;
  uint64_t j;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  _QWORD v14[4];
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = a2;
  v4 = *(llvm::Value **)(a2 + 40);
  v15 = v19;
  v16 = v19;
  v17 = 16;
  v18 = 0;
  v14[0] = &v15;
  v14[1] = a1;
  v14[2] = &v20;
  v14[3] = a3;
  sub_1C4E94854((uint64_t)v14, v4);
  v5 = (_QWORD *)*((_QWORD *)v4 + 5);
  if (v5 != (_QWORD *)((char *)v4 + 40))
  {
    if (v5)
      v6 = v5 - 3;
    else
      v6 = 0;
    if (*((_BYTE *)v6 + 16) != 30)
    {
      v7 = 2;
      switch(*((_BYTE *)v6 + 16))
      {
        case 0x1E:
          __break(1u);
          goto LABEL_31;
        case 0x1F:
          v7 = (*((_DWORD *)v6 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_28;
        case 0x20:
        case 0x26:
LABEL_31:
          v7 = (*((_DWORD *)v6 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_28;
        case 0x21:
          goto LABEL_9;
        case 0x24:
          v7 = *((_WORD *)v6 + 9) & 1;
          goto LABEL_28;
        case 0x25:
          v7 = 1;
          goto LABEL_9;
        case 0x27:
          v7 = *((_DWORD *)v6 + 20) + 1;
LABEL_28:
          if (!v7)
            goto LABEL_13;
          goto LABEL_9;
        default:
          goto LABEL_13;
      }
    }
    if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) == 3)
      v7 = 2;
    else
      v7 = 1;
LABEL_9:
    for (i = 0; i != v7; ++i)
    {
      Successor = (llvm::Value *)llvm::Instruction::getSuccessor((llvm::Instruction *)v6, i);
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 16), (uint64_t)v4, (uint64_t)Successor))
      {
        sub_1C4E94854((uint64_t)v14, Successor);
      }
    }
  }
LABEL_13:
  for (j = *(_QWORD *)(v20 + 8); j; j = *(_QWORD *)(j + 8))
  {
    v11 = *(_QWORD *)(j + 24);
    v12 = *(unsigned __int8 *)(v11 + 16);
    if (v11)
      v13 = v12 >= 0x1C;
    else
      v13 = 0;
    if (v13
      && (v12 != 83
       || llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(*(_QWORD *)(a1 + 16), (uint64_t)v4, *(_QWORD *)(v11 + 40))))
    {
      sub_1C4E94854((uint64_t)v14, *(llvm::Value **)(v11 + 40));
    }
  }
  if (v16 != v15)
    free(v16);
}

llvm::raw_ostream *sub_1C4E94854(uint64_t a1, llvm::Value *a2)
{
  uint64_t v4;
  llvm::raw_ostream *result;
  char v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  _BYTE *v12;
  __int16 v13;
  llvm::raw_ostream *v14;
  unsigned int v15;
  llvm::raw_ostream *v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 8);
  result = (llvm::raw_ostream *)sub_1C4774094(*(llvm::SmallPtrSetImplBase **)a1, (uint64_t)a2);
  if (v6)
  {
    sub_1C4E871E0(*(_QWORD *)(v4 + 8), **(_QWORD **)(a1 + 16), (uint64_t)a2, 0, (uint64_t)&v13);
    v7 = *(llvm::raw_ostream **)(a1 + 24);
    v8 = *((_QWORD *)v7 + 4);
    if ((unint64_t)(*((_QWORD *)v7 + 3) - v8) > 0x12)
    {
      *(_DWORD *)(v8 + 15) = 656423538;
      *(_OWORD *)v8 = *(_OWORD *)"; LatticeVal for: '";
      *((_QWORD *)v7 + 4) += 19;
    }
    else
    {
      v7 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 24), "; LatticeVal for: '", 0x13uLL);
    }
    llvm::Value::print(**(llvm::Value ***)(a1 + 16), v7, 0);
    v9 = *((_QWORD *)v7 + 4);
    if ((unint64_t)(*((_QWORD *)v7 + 3) - v9) > 9)
    {
      *(_WORD *)(v9 + 8) = 10016;
      *(_QWORD *)v9 = *(_QWORD *)"' in BB: '";
      *((_QWORD *)v7 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v7, "' in BB: '", 0xAuLL);
    }
    llvm::Value::printAsOperand(a2, *(llvm::raw_ostream **)(a1 + 24), 0, 0);
    v10 = *(llvm::raw_ostream **)(a1 + 24);
    v11 = *((_QWORD *)v10 + 4);
    if ((unint64_t)(*((_QWORD *)v10 + 3) - v11) > 5)
    {
      *(_WORD *)(v11 + 4) = 8250;
      *(_DWORD *)v11 = 1936269351;
      *((_QWORD *)v10 + 4) += 6;
    }
    else
    {
      v10 = llvm::raw_ostream::write(v10, "' is: ", 6uLL);
    }
    result = llvm::operator<<(v10, (uint64_t)&v13);
    v12 = (_BYTE *)*((_QWORD *)result + 4);
    if (*((_BYTE **)result + 3) == v12)
    {
      result = llvm::raw_ostream::write(result, "\n", 1uLL);
    }
    else
    {
      *v12 = 10;
      ++*((_QWORD *)result + 4);
    }
    if ((v13 & 0xFE) == 4)
    {
      if (v17 >= 0x41)
      {
        result = v16;
        if (v16)
          result = (llvm::raw_ostream *)MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
      }
      if (v15 >= 0x41)
      {
        result = v14;
        if (v14)
          return (llvm::raw_ostream *)MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
      }
    }
  }
  return result;
}

uint64_t sub_1C4E94A94()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8EFBF1;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E8138AB8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED82DF68);
  if (v2 != -1)
  {
    v6[0] = sub_1C4E88C68;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED82DF68, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C4E94B78(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4E94B9C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::LazyValueInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C4E94BE0(llvm *a1, llvm::Function *a2)
{
  llvm *v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Function **v11;
  llvm::Function *v12;
  int v13;
  int v14;
  size_t *v15;
  const void *v16;
  size_t v17;
  size_t v18;
  _BYTE *v19;
  void **v20;
  void *v21;
  uint64_t v22;
  void **v23;
  void *v24;
  llvm::LazyValueInfo *v25;
  llvm *v26;
  llvm::DominatorTree *v27;
  llvm *v28;

  v4 = llvm::dbgs(a1);
  v5 = v4;
  v6 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v6) > 0x11)
  {
    *(_WORD *)(v6 + 16) = 10016;
    *(_OWORD *)v6 = *(_OWORD *)"LVI for function '";
    *((_QWORD *)v4 + 4) += 18;
  }
  else
  {
    v5 = llvm::raw_ostream::write(v4, "LVI for function '", 0x12uLL);
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v19 = (_BYTE *)*((_QWORD *)v5 + 4);
    goto LABEL_15;
  }
  v7 = ***(_QWORD ***)a2;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if ((_DWORD)v9)
  {
    LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v11 = (llvm::Function **)(v8 + 16 * v10);
    v12 = *v11;
    if (*v11 == a2)
      goto LABEL_11;
    v13 = 1;
    while (v12 != (llvm::Function *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(llvm::Function **)(v8 + 16 * v10);
      if (v12 == a2)
      {
        v11 = (llvm::Function **)(v8 + 16 * v10);
        goto LABEL_11;
      }
    }
  }
  v11 = (llvm::Function **)(v8 + 16 * v9);
LABEL_11:
  v15 = (size_t *)v11[1];
  v18 = *v15;
  v16 = v15 + 2;
  v17 = v18;
  v19 = (_BYTE *)*((_QWORD *)v5 + 4);
  if (v18 <= *((_QWORD *)v5 + 3) - (_QWORD)v19)
  {
    if (v17)
    {
      memcpy(v19, v16, v17);
      v19 = (_BYTE *)(*((_QWORD *)v5 + 4) + v17);
      *((_QWORD *)v5 + 4) = v19;
    }
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, (const char *)v16, v17);
    v19 = (_BYTE *)*((_QWORD *)v5 + 4);
  }
LABEL_15:
  if (*((_QWORD *)v5 + 3) - (_QWORD)v19 > 2uLL)
  {
    v19[2] = 10;
    *(_WORD *)v19 = 14887;
    *((_QWORD *)v5 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v5, "':\n", 3uLL);
  }
  v20 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v21 = *v20;
    v20 += 2;
  }
  while (v21 != &llvm::LazyValueInfoWrapperPass::ID);
  v22 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v20 - 1) + 96))(*(v20 - 1), &llvm::LazyValueInfoWrapperPass::ID);
  v23 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v24 = *v23;
    v23 += 2;
  }
  while (v24 != &llvm::DominatorTreeWrapperPass::ID);
  v25 = (llvm::LazyValueInfo *)(v22 + 32);
  v26 = (llvm *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v23 - 1) + 96))(*(v23 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v27 = (llvm *)((char *)v26 + 32);
  v28 = llvm::dbgs(v26);
  llvm::LazyValueInfo::printLVI(v25, a2, v27, v28);
  return 0;
}

uint64_t sub_1C4E94DFC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  llvm::initializeLoopInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Legacy Divergence Analysis";
  *(_QWORD *)(v2 + 8) = 26;
  *(_QWORD *)(v2 + 16) = "divergence";
  *(_QWORD *)(v2 + 24) = 10;
  *(_QWORD *)(v2 + 32) = &llvm::LegacyDivergenceAnalysis::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::LegacyDivergenceAnalysis>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::LegacyDivergenceAnalysis::runOnFunction(llvm::LegacyDivergenceAnalysis *this, llvm::Function *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t AnalysisPass;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  void *v21;
  const llvm::DominatorTree *v22;
  uint64_t v23;
  const llvm::PostDominatorTree *v24;
  void **v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t i;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  llvm::PHINode **v48;
  char *v49;
  uint64_t v50;
  llvm::PHINode **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm::PHINode *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  llvm::PHINode **v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  llvm::PHINode **v73;
  llvm::PHINode *v74;
  uint64_t v75;
  llvm::PHINode **v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t *v102;
  int v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t *v119;
  int v120;
  unsigned int v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  llvm::PHINode **__p;
  uint64_t *__pa;
  char *v140;
  unint64_t v141;
  uint64_t v142[2];
  int v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  _QWORD v148[2];
  int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;

  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::TargetTransformInfoWrapperPass::ID, 1);
  if (!AnalysisPass)
    return;
  v7 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetTransformInfoWrapperPass::ID);
  if (!v7)
    return;
  v8 = v7;
  v145 = 0;
  v146 = 0;
  LODWORD(v147) = 0;
  v148[0] = 0;
  v148[1] = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v9 = *(_QWORD *)(v7 + 56);
  if (!v9)
  {
    sub_1C485C2F0();
LABEL_235:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    goto LABEL_7;
  }
  v3 = v148;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, llvm::Function *))(*(_QWORD *)v9 + 48))(v142, v9, a2);
  v2 = (uint64_t *)(v8 + 64);
  v10 = v142[0];
  if (!*(_BYTE *)(v8 + 72))
  {
    *(_QWORD *)(v8 + 64) = v142[0];
    *(_BYTE *)(v8 + 72) = 1;
    goto LABEL_7;
  }
  v142[0] = 0;
  v11 = *v2;
  *v2 = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v142[0];
    v142[0] = 0;
    if (v12)
      goto LABEL_235;
  }
LABEL_7:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v3);
  sub_1C4D8B52C((uint64_t *)&v145);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v2 + 88))(*v2))
    return;
  v13 = (char *)this + 40;
  sub_1C619D588((_DWORD *)this + 10);
  sub_1C6189548((unsigned int *)this + 16);
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v14)
  {
    v15 = sub_1C619D5D8(v14);
    MEMORY[0x1CAA32FC0](v15, 0x1020C40F5E4CFB4);
  }
  v16 = (void **)**((_QWORD **)this + 1);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != &llvm::DominatorTreeWrapperPass::ID);
  v18 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v19 = v18;
  v20 = (void **)**((_QWORD **)this + 1);
  do
  {
    v21 = *v20;
    v20 += 2;
  }
  while (v21 != &llvm::PostDominatorTreeWrapperPass::ID);
  v22 = (const llvm::DominatorTree *)(v18 + 32);
  v23 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v20 - 1) + 96))(*(v20 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  if ((llvm::LegacyDivergenceAnalysis::shouldUseGPUDivergenceAnalysis(this, a2, (const llvm::TargetTransformInfo *)v2) & 1) != 0)
  {
    v24 = (const llvm::PostDominatorTree *)(v23 + 32);
    v25 = (void **)**((_QWORD **)this + 1);
    do
    {
      v26 = *v25;
      v25 += 2;
    }
    while (v26 != &llvm::LoopInfoWrapperPass::ID);
    v27 = (uint64_t *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v25 - 1) + 96))(*(v25 - 1), &llvm::LoopInfoWrapperPass::ID)+ 32);
    v28 = operator new();
    llvm::DivergenceInfo::DivergenceInfo(v28, (uint64_t)a2, v22, v24, v27, v2, 1);
    v29 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v28;
    if (v29)
    {
      v30 = sub_1C619D5D8(v29);
      MEMORY[0x1CAA32FC0](v30, 0x1020C40F5E4CFB4);
    }
    return;
  }
  v131 = v23;
  v132 = v19 + 32;
  v133 = v19;
  sub_1C619D588((_DWORD *)this + 10);
  sub_1C6189548((unsigned int *)this + 16);
  v31 = (char *)a2 + 72;
  v32 = (char *)*((_QWORD *)a2 + 10);
  if (v32 == (char *)a2 + 72)
  {
LABEL_25:
    v35 = 0;
    v36 = 0;
    v140 = 0;
  }
  else
  {
    while (1)
    {
      v33 = v32 - 24;
      if (!v32)
        v33 = 0;
      v34 = (char *)*((_QWORD *)v33 + 6);
      if (v34 != v33 + 40)
        break;
      v32 = (char *)*((_QWORD *)v32 + 1);
      if (v32 == v31)
        goto LABEL_25;
    }
    v140 = 0;
    v36 = 0;
    v35 = 0;
    while (1)
    {
      if (v34)
        v122 = (uint64_t)(v34 - 24);
      else
        v122 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*v2 + 104))(*v2, v122))
      {
        if (v35 >= (uint64_t *)v140)
        {
          v125 = v35 - v36;
          v126 = v125 + 1;
          if ((unint64_t)(v125 + 1) >> 61)
LABEL_232:
            abort();
          if ((v140 - (char *)v36) >> 2 > v126)
            v126 = (v140 - (char *)v36) >> 2;
          if ((unint64_t)(v140 - (char *)v36) >= 0x7FFFFFFFFFFFFFF8)
            v126 = 0x1FFFFFFFFFFFFFFFLL;
          v141 = v126;
          if (v126)
          {
            if (v126 >> 61)
LABEL_233:
              sub_1C4764EE4();
            v127 = (char *)operator new(8 * v126);
          }
          else
          {
            v127 = 0;
          }
          v128 = (uint64_t *)&v127[8 * v125];
          *v128 = v122;
          __pa = v128 + 1;
          while (v35 != v36)
          {
            v129 = *--v35;
            *--v128 = v129;
          }
          v140 = &v127[8 * v141];
          if (v36)
            operator delete(v36);
          v36 = v128;
          v13 = (char *)this + 40;
          v35 = __pa;
        }
        else
        {
          *v35++ = v122;
        }
        v142[0] = v122;
        sub_1C61904FC((uint64_t)v13, v142, (uint64_t)&v145);
      }
      v34 = (char *)*((_QWORD *)v34 + 1);
      v123 = v32 - 24;
      if (!v32)
        v123 = 0;
      if (v34 == v123 + 40)
        break;
LABEL_209:
      if (v32 == v31)
        goto LABEL_26;
    }
    while (1)
    {
      v32 = (char *)*((_QWORD *)v32 + 1);
      if (v32 == v31)
        break;
      v124 = v32 - 24;
      if (!v32)
        v124 = 0;
      v34 = (char *)*((_QWORD *)v124 + 6);
      if (v34 != v124 + 40)
        goto LABEL_209;
    }
  }
LABEL_26:
  if ((*((_WORD *)a2 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(a2);
    v37 = *((_QWORD *)a2 + 11);
    if ((*((_WORD *)a2 + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(a2);
      v38 = *((_QWORD *)a2 + 11);
      goto LABEL_29;
    }
  }
  else
  {
    v37 = *((_QWORD *)a2 + 11);
  }
  v38 = v37;
LABEL_29:
  v39 = v36;
  for (i = v38 + 40 * *((_QWORD *)a2 + 12); v37 != i; v37 += 40)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*v2 + 104))(*v2, v37))
    {
      if (v35 >= (uint64_t *)v140)
      {
        v42 = v35 - v39;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 61)
          goto LABEL_232;
        v44 = v39;
        if ((v140 - (char *)v39) >> 2 > v43)
          v43 = (v140 - (char *)v39) >> 2;
        if ((unint64_t)(v140 - (char *)v39) >= 0x7FFFFFFFFFFFFFF8)
          v45 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          if (v45 >> 61)
            goto LABEL_233;
          v46 = (char *)operator new(8 * v45);
          v44 = v39;
        }
        else
        {
          v46 = 0;
        }
        v39 = (uint64_t *)&v46[8 * v42];
        *v39 = v37;
        v41 = v39 + 1;
        while (v35 != v44)
        {
          v47 = *--v35;
          *--v39 = v47;
        }
        v140 = &v46[8 * v45];
        if (v44)
          operator delete(v44);
        v13 = (char *)this + 40;
      }
      else
      {
        *v35 = v37;
        v41 = v35 + 1;
      }
      v142[0] = v37;
      sub_1C61904FC((uint64_t)v13, v142, (uint64_t)&v145);
      v35 = v41;
    }
  }
  if (v39 != v35)
  {
    v48 = (llvm::PHINode **)v39;
    v49 = (char *)this + 64;
    do
    {
      v50 = *(v35 - 1);
      v51 = (llvm::PHINode **)(v35 - 1);
      if (*(_BYTE *)(v50 + 16) != 30)
      {
        switch(*(_BYTE *)(v50 + 16))
        {
          case 0x1E:
            __break(1u);
            return;
          case 0x1F:
            v60 = (*(_DWORD *)(v50 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_65;
          case 0x20:
          case 0x26:
            v60 = (*(_DWORD *)(v50 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_65;
          case 0x21:
            goto LABEL_56;
          case 0x27:
            v60 = *(_DWORD *)(v50 + 80) + 1;
LABEL_65:
            if (v60 < 2)
              goto LABEL_102;
            goto LABEL_56;
          default:
            goto LABEL_102;
        }
      }
      if ((*(_DWORD *)(v50 + 20) & 0x7FFFFFF) != 3)
        goto LABEL_102;
LABEL_56:
      __p = v48;
      v52 = *(_QWORD *)(v50 + 40);
      if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(v132, v52))
      {
LABEL_101:
        v48 = __p;
        goto LABEL_102;
      }
      v53 = *(_QWORD *)(v131 + 80);
      v54 = *(unsigned int *)(v131 + 96);
      if ((_DWORD)v54)
      {
        LODWORD(v55) = (v54 - 1) & ((v52 >> 4) ^ (v52 >> 9));
        v56 = (uint64_t *)(v53 + 16 * v55);
        v57 = *v56;
        if (v52 == *v56)
          goto LABEL_68;
        v58 = 1;
        while (v57 != -4096)
        {
          v59 = v55 + v58++;
          v55 = v59 & (v54 - 1);
          v57 = *(_QWORD *)(v53 + 16 * v55);
          if (v52 == v57)
          {
            v56 = (uint64_t *)(v53 + 16 * v55);
            goto LABEL_68;
          }
        }
      }
      v56 = (uint64_t *)(v53 + 16 * v54);
LABEL_68:
      if (v56 == (uint64_t *)(v53 + 16 * v54))
        goto LABEL_101;
      v61 = v56[1];
      v48 = __p;
      if (v61)
      {
        v62 = **(_QWORD **)(v61 + 8);
        if (v62)
        {
          v130 = v50;
          v63 = *(_QWORD *)(v62 + 48);
          v64 = (llvm::PHINode *)(v63 - 24);
          if (v63)
            v65 = v63 - 24;
          else
            v65 = 0;
          if (*(_BYTE *)(v65 + 16) == 83)
          {
            while (1)
            {
              if ((llvm::PHINode::hasConstantOrUndefValue(v64) & 1) == 0)
              {
                v142[0] = (uint64_t)v64;
                sub_1C61904FC((uint64_t)v13, v142, (uint64_t)&v145);
                if ((_BYTE)v147)
                {
                  if (v51 >= (llvm::PHINode **)v140)
                  {
                    v134 = v62;
                    v136 = v52;
                    v68 = __p;
                    v69 = v51 - __p;
                    v70 = v69 + 1;
                    if ((unint64_t)(v69 + 1) >> 61)
                      goto LABEL_232;
                    if ((v140 - (char *)__p) >> 2 > v70)
                      v70 = (v140 - (char *)__p) >> 2;
                    if ((unint64_t)(v140 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
                      v71 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v71 = v70;
                    if (v71)
                    {
                      if (v71 >> 61)
                        goto LABEL_233;
                      v72 = (char *)operator new(8 * v71);
                      v68 = __p;
                    }
                    else
                    {
                      v72 = 0;
                    }
                    v73 = (llvm::PHINode **)&v72[8 * v69];
                    *v73 = v64;
                    v66 = (uint64_t *)(v73 + 1);
                    while (v51 != v68)
                    {
                      v74 = *--v51;
                      *--v73 = v74;
                    }
                    v140 = &v72[8 * v71];
                    if (v68)
                      operator delete(v68);
                    __p = v73;
                    v62 = v134;
                    v52 = v136;
                    goto LABEL_77;
                  }
                  *v51++ = v64;
                }
              }
              v66 = (uint64_t *)v51;
LABEL_77:
              v63 = *(_QWORD *)(v63 + 8);
              v64 = (llvm::PHINode *)(v63 - 24);
              if (v63)
                v67 = v63 - 24;
              else
                v67 = 0;
              v51 = (llvm::PHINode **)v66;
              if (*(_BYTE *)(v67 + 16) != 83)
                goto LABEL_130;
            }
          }
          v66 = (uint64_t *)v51;
LABEL_130:
          v142[0] = 0;
          v142[1] = 0;
          v143 = 0;
          v145 = 0;
          v146 = 0;
          v147 = 0;
          v84 = v52;
          while (1)
          {
            sub_1C4E961BC(v84, v62, v142, &v145);
            if (v145 == v146)
              break;
            v84 = *((_QWORD *)v146 - 1);
            v146 -= 8;
          }
          if (v145)
            operator delete(v145);
          while (2)
          {
            if (v143)
            {
              v135 = (v52 >> 4) ^ (v52 >> 9);
              v85 = v135 & (v143 - 1);
              v86 = *(_QWORD *)(v142[0] + 8 * v85);
              if (v52 != v86)
              {
                v120 = 1;
                while (v86 != -4096)
                {
                  v121 = v85 + v120++;
                  v85 = v121 & (v143 - 1);
                  v86 = *(_QWORD *)(v142[0] + 8 * v85);
                  v13 = (char *)this + 40;
                  v49 = (char *)this + 64;
                  if (v52 == v86)
                    goto LABEL_137;
                }
                v13 = (char *)this + 40;
                v49 = (char *)this + 64;
                break;
              }
LABEL_137:
              v87 = v52 + 40;
              v137 = v52;
              v88 = *(_QWORD *)(v52 + 48);
LABEL_138:
              if (v88 == v87)
              {
                v112 = *(_QWORD *)(v133 + 56);
                v113 = *(unsigned int *)(v133 + 72);
                if (!(_DWORD)v113)
                  goto LABEL_184;
                LODWORD(v114) = (v113 - 1) & v135;
                v115 = (uint64_t *)(v112 + 16 * v114);
                v116 = *v115;
                if (v137 != *v115)
                {
                  v117 = 1;
                  while (v116 != -4096)
                  {
                    v118 = v114 + v117++;
                    v114 = v118 & (v113 - 1);
                    v116 = *(_QWORD *)(v112 + 16 * v114);
                    if (v137 == v116)
                    {
                      v115 = (uint64_t *)(v112 + 16 * v114);
                      goto LABEL_185;
                    }
                  }
LABEL_184:
                  v115 = (uint64_t *)(v112 + 16 * v113);
                }
LABEL_185:
                v119 = *(uint64_t **)(v115[1] + 8);
                if (v119)
                {
                  v52 = *v119;
                  continue;
                }
                break;
              }
              v89 = v88 - 24;
              if (!v88)
                v89 = 0;
              v90 = *((_DWORD *)this + 14);
              if (v90)
              {
                v91 = *((_QWORD *)this + 5);
                v92 = v90 - 1;
                v93 = v92 & ((v89 >> 4) ^ (v89 >> 9));
                v94 = *(_QWORD *)(v91 + 8 * v93);
                if (v89 != v94)
                {
                  v95 = 1;
                  while (v94 != -4096)
                  {
                    v96 = v93 + v95++;
                    v93 = v96 & v92;
                    v94 = *(_QWORD *)(v91 + 8 * v93);
                    if (v89 == v94)
                      goto LABEL_176;
                  }
                  goto LABEL_147;
                }
              }
              else
              {
LABEL_147:
                v97 = *(_QWORD *)(v89 + 8);
                if (v97)
                {
                  while (1)
                  {
                    v98 = *(_QWORD *)(v97 + 24);
                    if (v143)
                    {
                      v99 = *(_QWORD *)(v98 + 40);
                      v100 = ((v99 >> 4) ^ (v99 >> 9)) & (v143 - 1);
                      v101 = *(_QWORD *)(v142[0] + 8 * v100);
                      if (v99 == v101)
                        goto LABEL_150;
                      v103 = 1;
                      while (v101 != -4096)
                      {
                        v104 = v100 + v103++;
                        v100 = v104 & (v143 - 1);
                        v101 = *(_QWORD *)(v142[0] + 8 * v100);
                        if (v99 == v101)
                          goto LABEL_150;
                      }
                    }
                    v144 = v97;
                    sub_1C6190580((uint64_t)&v145, (uint64_t)v49, &v144);
                    v144 = v98;
                    sub_1C61904FC((uint64_t)v13, &v144, (uint64_t)&v145);
                    if (!(_BYTE)v147)
                      goto LABEL_150;
                    if (v66 < (uint64_t *)v140)
                      break;
                    v105 = (uint64_t *)__p;
                    v106 = ((char *)v66 - (char *)__p) >> 3;
                    v107 = v106 + 1;
                    if ((unint64_t)(v106 + 1) >> 61)
                      goto LABEL_232;
                    if ((v140 - (char *)__p) >> 2 > v107)
                      v107 = (v140 - (char *)__p) >> 2;
                    if ((unint64_t)(v140 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
                      v108 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v108 = v107;
                    if (v108)
                    {
                      if (v108 >> 61)
                        goto LABEL_233;
                      v109 = (char *)operator new(8 * v108);
                      v105 = (uint64_t *)__p;
                    }
                    else
                    {
                      v109 = 0;
                    }
                    v110 = (uint64_t *)&v109[8 * v106];
                    *v110 = v98;
                    v102 = v110 + 1;
                    while (v66 != v105)
                    {
                      v111 = *--v66;
                      *--v110 = v111;
                    }
                    v140 = &v109[8 * v108];
                    if (v105)
                      operator delete(v105);
                    __p = (llvm::PHINode **)v110;
                    v13 = (char *)this + 40;
                    v49 = (char *)this + 64;
LABEL_151:
                    v97 = *(_QWORD *)(v97 + 8);
                    v66 = v102;
                    if (!v97)
                      goto LABEL_177;
                  }
                  *v66++ = v98;
LABEL_150:
                  v102 = v66;
                  goto LABEL_151;
                }
              }
LABEL_176:
              v102 = v66;
LABEL_177:
              v88 = *(_QWORD *)(v88 + 8);
              v66 = v102;
              goto LABEL_138;
            }
            break;
          }
          MEMORY[0x1CAA32FB4](v142[0], 8);
          v51 = (llvm::PHINode **)v66;
          v48 = __p;
          v50 = v130;
        }
      }
LABEL_102:
      v75 = *(_QWORD *)(v50 + 8);
      if (v75)
      {
        while (1)
        {
          v76 = v48;
          v77 = *(_QWORD *)(v75 + 24);
          if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v2 + 112))(*v2, v77) & 1) != 0
            || (v142[0] = v77, sub_1C61904FC((uint64_t)v13, v142, (uint64_t)&v145), !(_BYTE)v147))
          {
            v35 = (uint64_t *)v51;
            v48 = v76;
          }
          else
          {
            v48 = v76;
            if (v51 >= (llvm::PHINode **)v140)
            {
              v78 = v51 - v76;
              v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 61)
                goto LABEL_232;
              if ((v140 - (char *)v76) >> 2 > v79)
                v79 = (v140 - (char *)v76) >> 2;
              if ((unint64_t)(v140 - (char *)v76) >= 0x7FFFFFFFFFFFFFF8)
                v80 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v80 = v79;
              if (v80)
              {
                if (v80 >> 61)
                  goto LABEL_233;
                v81 = (char *)operator new(8 * v80);
                v48 = v76;
              }
              else
              {
                v81 = 0;
              }
              v82 = (uint64_t *)&v81[8 * v78];
              *v82 = v77;
              v35 = v82 + 1;
              while (v51 != v48)
              {
                v83 = (uint64_t)*--v51;
                *--v82 = v83;
              }
              v140 = &v81[8 * v80];
              if (v48)
                operator delete(v48);
              v48 = (llvm::PHINode **)v82;
              v13 = (char *)this + 40;
            }
            else
            {
              *v51 = (llvm::PHINode *)v77;
              v35 = (uint64_t *)(v51 + 1);
            }
          }
          v75 = *(_QWORD *)(v75 + 8);
          v51 = (llvm::PHINode **)v35;
          if (!v75)
            goto LABEL_127;
        }
      }
      v35 = (uint64_t *)v51;
LABEL_127:
      ;
    }
    while (v48 != (llvm::PHINode **)v35);
  }
  if (v35)
    operator delete(v35);
}

uint64_t llvm::LegacyDivergenceAnalysis::isDivergentUse(llvm::LegacyDivergenceAnalysis *this, const llvm::Value **a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  const llvm::Value *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  const llvm::Value **v13;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    if (!*(_BYTE *)(v2 + 8))
      return llvm::DivergenceAnalysisImpl::isDivergentUse(*(llvm::DivergenceAnalysisImpl **)(v2 + 24), a2);
    return 1;
  }
  v4 = *((_DWORD *)this + 14);
  if (!v4)
  {
LABEL_12:
    v12 = 0;
    v13 = a2;
    return sub_1C614F7B0((uint64_t *)this + 8, &v13, &v12);
  }
  v5 = *((_QWORD *)this + 5);
  v6 = v4 - 1;
  v7 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v8 = *(const llvm::Value **)(v5 + 8 * v7);
  if (*a2 != v8)
  {
    v9 = 1;
    while (v8 != (const llvm::Value *)-4096)
    {
      v10 = v7 + v9++;
      v7 = v10 & v6;
      v8 = *(const llvm::Value **)(v5 + 8 * (v10 & v6));
      v11 = 1;
      if (*a2 == v8)
        return v11;
    }
    goto LABEL_12;
  }
  return 1;
}

void llvm::LegacyDivergenceAnalysis::print(llvm::LegacyDivergenceAnalysis *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  const llvm::Value *v15;
  const llvm::Value *v16;
  const llvm::Value *v17;
  const char *v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  const char *v24;
  const char *v25;
  llvm::BasicBlock *v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::BasicBlock **v33;
  llvm::BasicBlock *v34;
  int v35;
  int v36;
  const char *v37;
  const char *v38;
  uint64_t *v39;
  uint64_t *v40;
  size_t *v41;
  const void *v42;
  size_t v43;
  size_t v44;
  _WORD *v45;
  uint64_t v46;
  const llvm::Value *v47;
  const char *v48;
  _QWORD *v49;
  _BYTE *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  _QWORD v65[3];
  _QWORD *v66;
  __int128 v67;
  _QWORD v68[3];
  _QWORD *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 4);
  if (v5 && (*(_BYTE *)(v5 + 8) || *(_DWORD *)(*(_QWORD *)(v5 + 24) + 104)) || *((_DWORD *)this + 12))
  {
    if (*((_DWORD *)this + 12))
    {
      v6 = (uint64_t *)*((_QWORD *)this + 5);
      v7 = *((unsigned int *)this + 14);
      if ((_DWORD)v7)
      {
        v8 = 8 * v7;
        v9 = &v6[v7];
        while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          ++v6;
          v8 -= 8;
          if (!v8)
          {
            v6 = v9;
            break;
          }
        }
      }
      v10 = *v6;
      v11 = *(unsigned __int8 *)(v10 + 16);
      if (v10)
        v12 = v11 == 21;
      else
        v12 = 0;
      if (v12)
      {
        v5 = v10 + 24;
      }
      else
      {
        if (v11 <= 0x1B)
          v10 = 0;
        v5 = *(_QWORD *)(v10 + 40) + 56;
      }
    }
    else if (!v5)
    {
      return;
    }
    v13 = *(_QWORD *)v5;
    if (*(_QWORD *)v5)
    {
      v14 = sub_1C485F330(*(_QWORD *)v5);
      if ((const llvm::Value *)v14 != v15)
      {
        v16 = (const llvm::Value *)v14;
        v17 = v15;
        do
        {
          if (llvm::LegacyDivergenceAnalysis::isDivergent(this, v16))
            v18 = "DIVERGENT: ";
          else
            v18 = "           ";
          v19 = *((_QWORD *)a2 + 4);
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v19) > 0xA)
          {
            *(_QWORD *)v19 = *(_QWORD *)v18;
            *(_DWORD *)(v19 + 7) = *(_DWORD *)(v18 + 7);
            *((_QWORD *)a2 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(a2, v18, 0xBuLL);
          }
          llvm::Value::print(v16, a2, 0);
          v20 = (_BYTE *)*((_QWORD *)a2 + 4);
          if (*((_BYTE **)a2 + 3) == v20)
          {
            llvm::raw_ostream::write(a2, "\n", 1uLL);
          }
          else
          {
            *v20 = 10;
            ++*((_QWORD *)a2 + 4);
          }
          v16 = (const llvm::Value *)((char *)v16 + 40);
        }
        while (v16 != v17);
      }
      v21 = *(_QWORD *)(v13 + 80);
      v56 = v13 + 72;
      if (v21 != v13 + 72)
      {
        v22 = &v62;
        v23 = &v59;
        v24 = "               ";
        v25 = "DIVERGENT:     ";
        while (1)
        {
          v26 = v21 ? (llvm::BasicBlock *)(v21 - 24) : 0;
          v27 = *((_QWORD *)a2 + 4);
          if ((unint64_t)(*((_QWORD *)a2 + 3) - v27) > 0xB)
          {
            *(_DWORD *)(v27 + 8) = 538976288;
            *(_QWORD *)v27 = *(_QWORD *)"\n           ";
            *((_QWORD *)a2 + 4) += 12;
            v28 = a2;
          }
          else
          {
            v28 = llvm::raw_ostream::write(a2, "\n           ", 0xCuLL);
          }
          if ((*((_BYTE *)v26 + 23) & 0x10) != 0)
            break;
          v45 = (_WORD *)*((_QWORD *)v28 + 4);
LABEL_55:
          if (*((_QWORD *)v28 + 3) - (_QWORD)v45 > 1uLL)
          {
            *v45 = 2618;
            *((_QWORD *)v28 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v28, ":\n", 2uLL);
          }
          llvm::BasicBlock::instructionsWithoutDebug(v26, 1, &v64);
          v61 = v64;
          if (v66)
          {
            if (v66 == v65)
            {
              v63 = (uint64_t)v22;
              (*(void (**)(_QWORD *, uint64_t *))(v65[0] + 24))(v65, v22);
            }
            else
            {
              v63 = (*(uint64_t (**)(void))(*v66 + 16))();
            }
          }
          else
          {
            v63 = 0;
          }
          v58 = v67;
          if (v69)
          {
            if (v69 == v68)
            {
              v60 = (uint64_t)v23;
              (*(void (**)(_QWORD *, uint64_t *))(v68[0] + 24))(v68, v23);
            }
            else
            {
              v60 = (*(uint64_t (**)(void))(*v69 + 16))();
            }
          }
          else
          {
            v60 = 0;
          }
LABEL_67:
          v46 = v61;
          while (v46 != v58)
          {
            if (v46)
              v47 = (const llvm::Value *)(v46 - 24);
            else
              v47 = 0;
            if (llvm::LegacyDivergenceAnalysis::isDivergent(this, v47))
              v48 = v25;
            else
              v48 = v24;
            v49 = (_QWORD *)*((_QWORD *)a2 + 4);
            if (*((_QWORD *)a2 + 3) - (_QWORD)v49 > 0xEuLL)
            {
              *v49 = *(_QWORD *)v48;
              *(_QWORD *)((char *)v49 + 7) = *(_QWORD *)(v48 + 7);
              *((_QWORD *)a2 + 4) += 15;
            }
            else
            {
              llvm::raw_ostream::write(a2, v48, 0xFuLL);
            }
            llvm::Value::print(v47, a2, 0);
            v50 = (_BYTE *)*((_QWORD *)a2 + 4);
            if (*((_BYTE **)a2 + 3) == v50)
            {
              llvm::raw_ostream::write(a2, "\n", 1uLL);
            }
            else
            {
              *v50 = 10;
              ++*((_QWORD *)a2 + 4);
            }
            while (1)
            {
              v46 = *(_QWORD *)(v61 + 8);
              *(_QWORD *)&v61 = v46;
              if (v46 == *((_QWORD *)&v61 + 1))
                break;
              if (!v63)
                sub_1C485C2F0();
              if ((*(unsigned int (**)(void))(*(_QWORD *)v63 + 48))())
                goto LABEL_67;
            }
          }
          v51 = (_QWORD *)v60;
          if ((uint64_t *)v60 == v23)
          {
            v51 = v23;
            v52 = 4;
          }
          else
          {
            if (!v60)
              goto LABEL_90;
            v52 = 5;
          }
          (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_90:
          v53 = (_QWORD *)v63;
          if ((uint64_t *)v63 == v22)
          {
            v53 = v22;
            v54 = 4;
LABEL_94:
            (*(void (**)(void))(*v53 + 8 * v54))();
            goto LABEL_95;
          }
          if (v63)
          {
            v54 = 5;
            goto LABEL_94;
          }
LABEL_95:
          sub_1C619047C(&v64);
          v21 = *(_QWORD *)(v21 + 8);
          if (v21 == v56)
            goto LABEL_100;
        }
        v29 = ***(_QWORD ***)v26;
        v30 = *(_QWORD *)(v29 + 152);
        v31 = *(unsigned int *)(v29 + 168);
        if ((_DWORD)v31)
        {
          LODWORD(v32) = (v31 - 1) & ((v26 >> 4) ^ (v26 >> 9));
          v33 = (llvm::BasicBlock **)(v30 + 16 * v32);
          v34 = *v33;
          if (*v33 == v26)
          {
LABEL_50:
            v57 = v21;
            v37 = v25;
            v38 = v24;
            v39 = v23;
            v40 = v22;
            v41 = (size_t *)v33[1];
            v44 = *v41;
            v42 = v41 + 2;
            v43 = v44;
            v45 = (_WORD *)*((_QWORD *)v28 + 4);
            if (v44 <= *((_QWORD *)v28 + 3) - (_QWORD)v45)
            {
              if (v43)
              {
                memcpy(v45, v42, v43);
                v45 = (_WORD *)(*((_QWORD *)v28 + 4) + v43);
                *((_QWORD *)v28 + 4) = v45;
              }
            }
            else
            {
              v28 = llvm::raw_ostream::write(v28, (const char *)v42, v43);
              v45 = (_WORD *)*((_QWORD *)v28 + 4);
            }
            v22 = v40;
            v23 = v39;
            v24 = v38;
            v25 = v37;
            v21 = v57;
            goto LABEL_55;
          }
          v35 = 1;
          while (v34 != (llvm::BasicBlock *)-4096)
          {
            v36 = v32 + v35++;
            v32 = v36 & (v31 - 1);
            v34 = *(llvm::BasicBlock **)(v30 + 16 * v32);
            if (v34 == v26)
            {
              v33 = (llvm::BasicBlock **)(v30 + 16 * v32);
              goto LABEL_50;
            }
          }
        }
        v33 = (llvm::BasicBlock **)(v30 + 16 * v31);
        goto LABEL_50;
      }
LABEL_100:
      v55 = (_BYTE *)*((_QWORD *)a2 + 4);
      if (*((_BYTE **)a2 + 3) == v55)
      {
        llvm::raw_ostream::write(a2, "\n", 1uLL);
      }
      else
      {
        *v55 = 10;
        ++*((_QWORD *)a2 + 4);
      }
    }
  }
}

void sub_1C4E961BC(uint64_t a1, uint64_t a2, _DWORD *a3, char **a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char **v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _BYTE v29[31];

  v4 = *(_QWORD *)(a1 + 40);
  if (v4 != a1 + 40)
  {
    if (v4)
      v5 = v4 - 24;
    else
      v5 = 0;
    v6 = *(unsigned __int8 *)(v5 + 16);
    v7 = v6 - 29;
    if (v6 != 30)
    {
      v11 = 2;
      switch(v7)
      {
        case 1:
          __break(1u);
          goto LABEL_44;
        case 2:
          v11 = (*(_DWORD *)(v5 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_39;
        case 3:
        case 9:
LABEL_44:
          v11 = (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_39;
        case 4:
          goto LABEL_9;
        case 7:
          v11 = *(_WORD *)(v5 + 18) & 1;
          goto LABEL_39;
        case 8:
          v11 = 1;
          goto LABEL_9;
        case 10:
          v11 = *(_DWORD *)(v5 + 80) + 1;
LABEL_39:
          if (!v11)
            return;
          goto LABEL_9;
        default:
          return;
      }
    }
    if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3)
      v11 = 2;
    else
      v11 = 1;
LABEL_9:
    v12 = 0;
    v13 = v11;
    do
    {
      v28 = 0;
      v14 = *(unsigned __int8 *)(v5 + 16);
      if (v14 != 30)
        __asm { BR              X9 }
      v28 = *(_QWORD *)(v5 - 32 - 32 * v12);
      if (v28 != a2)
      {
        sub_1C6187FB8(a3, &v28, (uint64_t)v29);
        if (v29[16])
        {
          v16 = a4[1];
          v15 = (unint64_t)a4[2];
          if ((unint64_t)v16 >= v15)
          {
            v27 = a3;
            v18 = a4;
            v19 = *a4;
            v20 = (v16 - v19) >> 3;
            v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 61)
              abort();
            v22 = v15 - (_QWORD)v19;
            if (v22 >> 2 > v21)
              v21 = v22 >> 2;
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
              v23 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v23 = v21;
            if (v23)
            {
              if (v23 >> 61)
                sub_1C4764EE4();
              v24 = (char *)operator new(8 * v23);
            }
            else
            {
              v24 = 0;
            }
            v25 = &v24[8 * v20];
            *(_QWORD *)v25 = v28;
            v17 = v25 + 8;
            if (v16 == v19)
            {
              a4 = v18;
            }
            else
            {
              do
              {
                v26 = *((_QWORD *)v16 - 1);
                v16 -= 8;
                *((_QWORD *)v25 - 1) = v26;
                v25 -= 8;
              }
              while (v16 != v19);
              a4 = v18;
              v16 = *v18;
            }
            *a4 = v25;
            a4[1] = v17;
            a4[2] = &v24[8 * v23];
            if (v16)
              operator delete(v16);
            a3 = v27;
          }
          else
          {
            *(_QWORD *)v16 = v28;
            v17 = v16 + 8;
          }
          a4[1] = v17;
        }
      }
      ++v12;
    }
    while (v12 != v13);
  }
}

uint64_t sub_1C4E964C4()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"turn the LegacyDivergenceAnalysis into a wrapper for GPUDivergenceAnalysis";
  v1.n128_u64[1] = 74;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F21F0, "use-gpu-divergence-analysis", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F21F0, &dword_1C475E000);
}

void llvm::LintPass::run(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  size_t v7;
  llvm *v8;
  llvm *v9;
  char v10;
  const char *v11;
  size_t v12;
  _QWORD v13[6];
  void *__p[2];
  uint64_t v15;
  void (**v16)(llvm::raw_ostream *__hidden);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  void **v24;

  v13[0] = *(_QWORD *)(a1 + 40);
  v13[1] = v13[0] + 272;
  v13[2] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AAManager::Key, a1) + 8;
  v13[3] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, a1) + 8;
  v13[4] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1) + 8;
  v13[5] = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1) + 8;
  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  v21 = 0;
  v22 = 0;
  v15 = 0;
  v16 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v24 = __p;
  v23 = 0;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  sub_1C4E966EC(v13, a1, v6, v7);
  v9 = llvm::dbgs(v8);
  v10 = *((_BYTE *)v24 + 23);
  if (v10 >= 0)
    v11 = (const char *)v24;
  else
    v11 = (const char *)*v24;
  if (v10 >= 0)
    v12 = v10 & 0x7F;
  else
    v12 = (size_t)v24[1];
  llvm::raw_ostream::write(v9, v11, v12);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v16 = off_1E81A6E70;
  if (v23 == 1 && v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8077774924);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_1C4E966EC(_QWORD *a1, uint64_t a2, uint64_t a3, size_t a4)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15[7];

  v15[6] = *(unsigned __int8 **)MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 23) & 0x10) == 0 && (*(_DWORD *)(a2 + 32) & 0xFu) - 7 >= 2)
  {
    llvm::Twine::printOneChild((uint64_t)a1, (llvm::raw_ostream *)(a1 + 9), (uint64_t)"Unusual: Unnamed function with non-local linkage", a4, 3);
    llvm::Twine::printOneChild(v6, (llvm::raw_ostream *)(a1 + 9), v7, v8, 1);
    v9 = (_BYTE *)a1[13];
    if ((unint64_t)v9 >= a1[12])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 9), 10);
    }
    else
    {
      a1[13] = v9 + 1;
      *v9 = 10;
    }
    v15[0] = (unsigned __int8 *)a2;
    sub_1C4E97688((uint64_t)a1, v15, 1);
  }
  v10 = *(_QWORD *)(a2 + 80);
  while (v10 != a2 + 72)
  {
    v11 = v10 - 24;
    v12 = v10 == 0;
    v10 = *(_QWORD *)(v10 + 8);
    if (v12)
      v11 = 0;
    v13 = *(_QWORD *)(v11 + 48);
    if (v13 != v11 + 40)
    {
      if (v13)
        v14 = v13 - 24;
      else
        v14 = 0;
      __asm { BR              X9 }
    }
  }
}

void llvm::initializeLintLegacyPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82DF78);
  if (v1 != -1)
  {
    v4[0] = sub_1C4E96F1C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82DF78, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4E96F1C(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Statically lint-checks LLVM IR";
  *(_QWORD *)(v3 + 8) = 30;
  *(_QWORD *)(v3 + 16) = "lint";
  *(_QWORD *)(v3 + 24) = 4;
  *(_QWORD *)(v3 + 32) = &unk_1EF8EFBF2;
  *(_WORD *)(v3 + 40) = 256;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C4E971B0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C4E96FCC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBF2;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8138BF8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82DF78);
  if (v3 != -1)
  {
    v7[0] = sub_1C4E96F1C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82DF78, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

int32x2_t *llvm::lintFunction(llvm::Module **this, const llvm::Function *a2)
{
  const void **v3;
  int32x2_t *result;
  void (**v5)(llvm::legacy::FunctionPassManager *__hidden);
  int32x2_t *v6;

  llvm::legacy::FunctionPassManager::FunctionPassManager((llvm::legacy::FunctionPassManager *)&v5, this[5]);
  v3 = (const void **)operator new();
  sub_1C4E96FCC((uint64_t)v3);
  llvm::PMTopLevelManager::schedulePass(v6 + 52, v3);
  llvm::legacy::FunctionPassManager::run((llvm::legacy::FunctionPassManagerImpl **)&v5, this);
  v5 = &off_1E8168290;
  result = v6;
  if (v6)
    return (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

llvm::legacy::PassManagerImpl *llvm::lintModule(llvm *this, const llvm::Module *a2)
{
  const void **v3;
  llvm::legacy::PassManagerImpl *result;
  void (**v5)(llvm::legacy::PassManager *__hidden);
  llvm::legacy::PassManagerImpl *v6;

  llvm::legacy::PassManager::PassManager((llvm::legacy::PassManager *)&v5);
  v3 = (const void **)operator new();
  sub_1C4E96FCC((uint64_t)v3);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)v6 + 52, v3);
  llvm::legacy::PassManagerImpl::run(v6, this);
  v5 = &off_1E81682B8;
  result = v6;
  if (v6)
    return (llvm::legacy::PassManagerImpl *)(*(uint64_t (**)(llvm::legacy::PassManagerImpl *))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t sub_1C4E971B0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4E96FCC(v0);
}

void sub_1C4E971DC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4E97204(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::TargetLibraryInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C4E97270(uint64_t a1, llvm::Function *a2)
{
  llvm::Function *v2;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  llvm::AssumptionCacheTracker *v10;
  uint64_t AssumptionCache;
  void **v12;
  void *v13;
  uint64_t v14;
  void **v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  llvm *v28;
  llvm *v29;
  char v30;
  const char *v31;
  size_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void **v38;
  int v39;
  uint64_t v40;
  llvm::Function *v41;
  uint64_t v42[2];
  int v43;
  uint64_t v44[2];
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  void *__src;
  uint64_t v51;
  _QWORD v52[3];
  void *__p[2];
  uint64_t v54;
  void (**v55)(llvm::raw_ostream *__hidden);
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  int v62;
  void **v63;
  uint64_t v64;

  v2 = a2;
  v64 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 5);
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::AAResultsWrapperPass::ID);
  v7 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v8 = **(void ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::AssumptionCacheTracker::ID);
  v10 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v10, v2);
  v12 = **(void ****)(a1 + 8);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != &llvm::DominatorTreeWrapperPass::ID);
  v14 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v15 = **(void ****)(a1 + 8);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != &llvm::TargetLibraryInfoWrapperPass::ID);
  v17 = (void *)(v4 + 272);
  v18 = v14 + 32;
  v19 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), &llvm::TargetLibraryInfoWrapperPass::ID);
  v42[0] = 0;
  v42[1] = 0;
  v43 = 0;
  v44[0] = 0;
  v44[1] = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  llvm::TargetLibraryAnalysis::run(v19 + 32, (uint64_t)v2, (uint64_t)&v49);
  *(_QWORD *)(v19 + 240) = v49;
  if (*(_BYTE *)(v19 + 320))
  {
    if ((uint64_t *)(v19 + 240) == &v49)
    {
LABEL_22:
      *(_DWORD *)(v19 + 312) = (_DWORD)v55;
      goto LABEL_23;
    }
    v41 = v2;
    v20 = v4;
    v21 = AssumptionCache;
    v22 = v7;
    v23 = (void **)(v19 + 248);
    v24 = v51;
    v25 = *(unsigned int *)(v19 + 256);
    if (v25 >= v51)
    {
      if ((_DWORD)v51)
        memmove(*v23, __src, 8 * v51);
      goto LABEL_21;
    }
    if (*(_DWORD *)(v19 + 260) < v51)
    {
      *(_DWORD *)(v19 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v19 + 248, v19 + 264, v24, 8);
    }
    else if ((_DWORD)v25)
    {
      memmove(*v23, __src, 8 * v25);
      goto LABEL_19;
    }
    v25 = 0;
LABEL_19:
    if (v25 != v51)
      memcpy((char *)*v23 + 8 * v25, (char *)__src + 8 * v25, 8 * v51 - 8 * v25);
LABEL_21:
    *(_DWORD *)(v19 + 256) = v24;
    v7 = v22;
    AssumptionCache = v21;
    v4 = v20;
    v2 = v41;
    goto LABEL_22;
  }
  v34 = v4;
  v35 = AssumptionCache;
  v36 = v7;
  v37 = (void *)(v19 + 264);
  *(_QWORD *)(v19 + 248) = v19 + 264;
  v38 = (void **)(v19 + 248);
  *(_QWORD *)(v19 + 256) = 0x600000000;
  v39 = v51;
  if ((_DWORD)v51 && v38 != &__src)
  {
    if (v51 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v19 + 248, v19 + 264, v51, 8);
      v40 = v51;
      if (!(_DWORD)v51)
      {
LABEL_42:
        *(_DWORD *)(v19 + 256) = v39;
        goto LABEL_43;
      }
      v37 = *v38;
    }
    else
    {
      v40 = v51;
    }
    memcpy(v37, __src, 8 * v40);
    goto LABEL_42;
  }
LABEL_43:
  *(_DWORD *)(v19 + 312) = (_DWORD)v55;
  *(_BYTE *)(v19 + 320) = 1;
  v7 = v36;
  AssumptionCache = v35;
  v4 = v34;
LABEL_23:
  if (__src != v52)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v44);
  sub_1C4D8B52C(v42);
  v49 = v4;
  __src = v17;
  v51 = v7;
  v52[0] = AssumptionCache;
  v52[1] = v18;
  v52[2] = v19 + 240;
  __p[0] = 0;
  __p[1] = 0;
  v56 = 0;
  v60 = 0;
  v61 = 0;
  v54 = 0;
  v55 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v63 = __p;
  v62 = 0;
  v58 = 0;
  v59 = 0;
  v57 = 0;
  sub_1C4E966EC(&v49, (uint64_t)v2, v26, v27);
  v29 = llvm::dbgs(v28);
  v30 = *((_BYTE *)v63 + 23);
  if (v30 >= 0)
    v31 = (const char *)v63;
  else
    v31 = (const char *)*v63;
  if (v30 >= 0)
    v32 = v30 & 0x7F;
  else
    v32 = (size_t)v63[1];
  llvm::raw_ostream::write(v29, v31, v32);
  v55 = off_1E81A6E70;
  if (v62 == 1 && v57)
    MEMORY[0x1CAA32F9C](v57, 0x1000C8077774924);
  if (SHIBYTE(v54) < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1C4E97688(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  llvm::raw_ostream *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  _BYTE *v8;

  if (a3)
  {
    v5 = (llvm::raw_ostream *)(a1 + 72);
    v6 = 8 * a3;
    do
    {
      v7 = *a2;
      if (*a2)
      {
        if (v7[16] < 0x1Cu)
          llvm::Value::printAsOperand((llvm::Value *)v7, v5, 1, *(const llvm::Module **)a1);
        else
          llvm::Value::print((llvm::Value *)v7, v5, 0);
        v8 = *(_BYTE **)(a1 + 104);
        if ((unint64_t)v8 >= *(_QWORD *)(a1 + 96))
        {
          llvm::raw_ostream::write(v5, 10);
        }
        else
        {
          *(_QWORD *)(a1 + 104) = v8 + 1;
          *v8 = 10;
        }
      }
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
}

void sub_1C4E97734(_QWORD *a1, uint64_t a2, unsigned __int8 **a3)
{
  llvm::raw_ostream *v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned __int8 *v9[2];

  v9[1] = *(unsigned __int8 **)MEMORY[0x1E0C80C00];
  v6 = (llvm::raw_ostream *)(a1 + 9);
  llvm::Twine::printOneChild((uint64_t)a1, (llvm::raw_ostream *)(a1 + 9), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 32));
  llvm::Twine::printOneChild(v7, v6, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_BYTE *)(a2 + 33));
  v8 = (_BYTE *)a1[13];
  if ((unint64_t)v8 >= a1[12])
  {
    llvm::raw_ostream::write(v6, 10);
  }
  else
  {
    a1[13] = v8 + 1;
    *v8 = 10;
  }
  v9[0] = *a3;
  sub_1C4E97688((uint64_t)a1, v9, 1);
}

llvm::UndefValue *sub_1C4E977FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::UndefValue *v3;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  _BYTE v9[32];

  v5 = v9;
  v6 = v9;
  v7 = 4;
  v8 = 0;
  v3 = sub_1C4E97858(a1, a2, a3, (llvm::SmallPtrSetImplBase *)&v5);
  if (v6 != v5)
    free(v6);
  return v3;
}

llvm::UndefValue *sub_1C4E97858(uint64_t a1, uint64_t a2, uint64_t a3, llvm::SmallPtrSetImplBase *a4)
{
  llvm::UndefValue **v6;
  llvm::SmallPtrSetImplBase *v8;
  llvm::Type *v9;
  llvm *v10;
  llvm::Type *v11;
  llvm::Type *v12;
  llvm::DSOLocalEquivalent **v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  llvm::UndefValue ***v18;
  unsigned int v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  llvm::UndefValue **v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint64_t InsertedValue;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t **v33;
  char v34;
  llvm::UndefValue *AvailableLoadedValue;
  uint64_t UniquePredecessor;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t *v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  llvm::UndefValue *v51;
  llvm::UndefValue *v52;
  uint64_t v53;
  llvm::UndefValue *v54;
  uint64_t *v55;
  int8x16_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD v64[7];

  v6 = (llvm::UndefValue **)a2;
  v64[6] = *MEMORY[0x1E0C80C00];
  v8 = a4;
  while (1)
  {
    sub_1C4774094(v8, a2);
    if (!(_BYTE)v9)
      return llvm::UndefValue::get(*v6, v9);
    v10 = (_DWORD)a3
        ? llvm::getUnderlyingObject((llvm *)v6, (const llvm::Value *)6)
        : llvm::Value::stripPointerCasts((llvm::Value *)v6);
    v14 = (uint64_t)v10;
    v15 = *((unsigned __int8 *)v10 + 16);
    v16 = v10 == 0;
    if (v10)
    {
      if (v15 == 60)
        break;
    }
    if (v10 && v15 == 83)
    {
      v17 = *((_DWORD *)v10 + 5);
      if ((v17 & 0x40000000) != 0)
      {
        v18 = (llvm::UndefValue ***)*((_QWORD *)v10 - 1);
        v19 = v17 & 0x7FFFFFF;
      }
      else
      {
        v19 = v17 & 0x7FFFFFF;
        v18 = (llvm::UndefValue ***)((char *)v10 - 32 * (v17 & 0x7FFFFFF));
      }
      v6 = *v18;
      v20 = v19 - 1;
      if (v19 != 1)
      {
        v21 = (char *)v10 - 32 * v19;
        v22 = 32;
        do
        {
          if ((v17 & 0x40000000) != 0)
            v23 = *(llvm::UndefValue ***)(*((_QWORD *)v10 - 1) + v22);
          else
            v23 = *(llvm::UndefValue ***)&v21[v22];
          if (v23 != v6 && v23 != (llvm::UndefValue **)v10)
          {
            if (v6 != (llvm::UndefValue **)v10)
              goto LABEL_62;
            v24 = v21;
            if ((v17 & 0x40000000) != 0)
              v24 = (char *)*((_QWORD *)v10 - 1);
            v6 = *(llvm::UndefValue ***)&v24[v22];
          }
          v22 += 32;
          --v20;
        }
        while (v20);
      }
      if (v6 == (llvm::UndefValue **)v10)
        v6 = (llvm::UndefValue **)llvm::UndefValue::get(*(llvm::UndefValue **)v10, v11);
      if (!v6)
        goto LABEL_62;
    }
    else
    {
      if (v10 && v15 >= 0x1C && v15 - 79 >= 0xFFFFFFF3)
      {
        llvm::CastInst::isNoopCast(v10, *(const llvm::DataLayout **)(a1 + 8));
        if (!v25)
          goto LABEL_62;
        v26 = -1;
LABEL_30:
        v6 = *(llvm::UndefValue ***)(v14 + 32 * v26);
        goto LABEL_46;
      }
      if (v10 && v15 == 92)
      {
        InsertedValue = llvm::FindInsertedValue(*((_QWORD *)v10 - 4), *((llvm::Type **)v10 + 8), *((unsigned int *)v10 + 18), 0);
        v16 = 0;
        if (!InsertedValue)
          goto LABEL_63;
        v6 = (llvm::UndefValue **)InsertedValue;
        if (InsertedValue == v14)
          goto LABEL_63;
      }
      else
      {
        if (!v10 || v15 != 5)
          goto LABEL_63;
        v28 = *((unsigned __int16 *)v10 + 9);
        if ((v28 - 38) <= 0xC)
        {
          llvm::CastInst::isNoopCast(v28);
          if (!v29)
            goto LABEL_62;
          v26 = -(uint64_t)(*(_DWORD *)(v14 + 20) & 0x7FFFFFF);
          goto LABEL_30;
        }
        if (v28 != 64)
          goto LABEL_62;
        v30 = llvm::FindInsertedValue(*(_QWORD *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF)), *(llvm::Type **)(v14 + 24), *(unsigned int *)(v14 + 32), 0);
        v6 = (llvm::UndefValue **)v30;
        if (!v30 || v30 == v14)
          goto LABEL_62;
      }
    }
LABEL_46:
    v8 = a4;
    a2 = (uint64_t)v6;
  }
  v55 = (uint64_t *)((char *)v10 + 24);
  v33 = (uint64_t **)*((_QWORD *)v10 + 5);
  v60 = v64;
  v61 = (uint64_t)v64;
  v62 = 4;
  v63 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v60, (uint64_t)v33);
  if (v34)
  {
    while (1)
    {
      AvailableLoadedValue = llvm::FindAvailableLoadedValue((llvm::MemoryLocation *)v14, (uint64_t)v33, &v55, dword_1ED82E000, *(_QWORD *)(a1 + 16), 0, 0);
      if (AvailableLoadedValue)
        break;
      if (v55 == v33[6])
      {
        UniquePredecessor = llvm::BasicBlock::getUniquePredecessor((llvm::BasicBlock *)v33);
        if (UniquePredecessor)
        {
          v33 = (uint64_t **)UniquePredecessor;
          v55 = (uint64_t *)(UniquePredecessor + 40);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v60, UniquePredecessor);
          if (v37)
            continue;
        }
      }
      goto LABEL_58;
    }
    v33 = (uint64_t **)sub_1C4E97858(a1, AvailableLoadedValue, a3, a4);
    v38 = 0;
  }
  else
  {
LABEL_58:
    v38 = 1;
  }
  if ((void *)v61 != v60)
    free((void *)v61);
  if ((v38 & 1) != 0)
  {
LABEL_62:
    v16 = 0;
LABEL_63:
    v39 = *(unsigned __int8 *)(v14 + 16);
    if (v16 || v39 < 0x1C)
    {
      if (v39 > 0x14)
        v16 = 1;
      if (v16)
        return (llvm::UndefValue *)v14;
      v51 = llvm::ConstantFoldConstant(v14, *(llvm::Type **)(a1 + 8), *(_QWORD *)(a1 + 40));
      v33 = (uint64_t **)v14;
      if (v51 != (llvm::UndefValue *)v14)
      {
        v52 = v51;
        v53 = a1;
        return (llvm::UndefValue *)sub_1C4E97858(v53, v52, a3, a4);
      }
    }
    else
    {
      v40 = *(_QWORD *)(a1 + 24);
      v55 = *(uint64_t **)(a1 + 8);
      v56 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
      v57 = v40;
      v58 = 0;
      v59 = 257;
      v41 = *(_DWORD *)(v14 + 20);
      if ((v41 & 0x40000000) != 0)
      {
        v43 = *(uint64_t **)(v14 - 8);
        v42 = v41 & 0x7FFFFFF;
      }
      else
      {
        v42 = v41 & 0x7FFFFFF;
        v43 = (uint64_t *)(v14 - 32 * v42);
      }
      v60 = &v62;
      v61 = 0x800000000;
      if (v42 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v60, (uint64_t)&v62, v42, 8);
        v44 = v61;
        v46 = (uint64_t *)v60;
        v45 = v61;
        goto LABEL_70;
      }
      v44 = 0;
      if (v42)
      {
        v45 = 0;
        v46 = &v62;
LABEL_70:
        v47 = 32 * v42;
        v48 = &v46[v45];
        do
        {
          v49 = *v43;
          v43 += 4;
          *v48++ = v49;
          v47 -= 32;
        }
        while (v47);
        v50 = (uint64_t *)v60;
      }
      else
      {
        v50 = &v62;
      }
      LODWORD(v61) = v44 + v42;
      v54 = llvm::SimplifyInstructionWithOperands((llvm *)v14, (uint64_t)v50, (v44 + v42), (uint64_t)&v55, v12, v13);
      if (v60 != &v62)
        free(v60);
      v33 = (uint64_t **)v14;
      if (v54)
      {
        v53 = a1;
        v52 = v54;
        return (llvm::UndefValue *)sub_1C4E97858(v53, v52, a3, a4);
      }
    }
  }
  return (llvm::UndefValue *)v33;
}

void sub_1C4E97D2C(_QWORD *a1, unsigned __int8 *a2, uint64_t *a3, __int16 a4, uint64_t a5, char a6)
{
  unint64_t v6;
  uint64_t *v14;
  llvm::UndefValue *v15;
  unsigned int v16;
  const char *v17;
  llvm::UndefValue *v18;
  unsigned int v19;
  _QWORD *v20;
  BOOL v21;
  BOOL v22;
  llvm::DataLayout *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  llvm::GlobalValue *Section;
  uint64_t v34;
  llvm::Module *v35;
  uint64_t v36;
  unsigned int v37;
  const char *v38;
  char v39;
  int v40;
  unsigned int v41;
  const char *v42;
  unint64_t v43;
  unsigned int v44;
  char v45;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unsigned __int8 *v54;
  const void *v55;
  unsigned int IndexTypeSizeInBits;
  __int16 v57;

  v6 = a3[1];
  if (v6 <= 0xFFFFFFFFFFFFFFFDLL && (v6 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    return;
  v14 = (uint64_t *)*a3;
  v15 = sub_1C4E977FC((uint64_t)a1, *a3, 1);
  v16 = *((unsigned __int8 *)v15 + 16);
  if (v16 == 19)
  {
    v17 = "Undefined behavior: Null pointer dereference";
LABEL_54:
    v54 = a2;
    v55 = v17;
    v57 = 259;
    sub_1C4E97734(a1, (uint64_t)&v55, &v54);
    return;
  }
  if (v16 - 11 <= 1)
  {
    v17 = "Undefined behavior: Undef pointer dereference";
    goto LABEL_54;
  }
  v18 = v15;
  if (v16 != 16)
    goto LABEL_20;
  v53 = a5;
  v19 = *((_DWORD *)v15 + 8);
  if (!v19)
    goto LABEL_15;
  v20 = (_QWORD *)((char *)v15 + 24);
  if (v19 <= 0x40)
  {
    if (*v20 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v19)
    {
      v21 = *v20 == 1;
      goto LABEL_17;
    }
LABEL_15:
    v17 = "Unusual: All-ones pointer dereference";
    goto LABEL_54;
  }
  if (llvm::APInt::countTrailingOnesSlowCase((llvm::UndefValue *)((char *)v15 + 24)) == v19)
    goto LABEL_15;
  v21 = llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)v18 + 24)) == v19 - 1;
LABEL_17:
  a5 = v53;
  if (v21)
  {
    v17 = "Unusual: Address one pointer dereference";
    goto LABEL_54;
  }
LABEL_20:
  if ((a6 & 2) != 0)
  {
    if (v16)
      v22 = v16 == 4;
    else
      v22 = 1;
    if (v22)
    {
      v17 = "Undefined behavior: Write to text section";
      goto LABEL_54;
    }
    if (v16 == 3 && (*((_BYTE *)v18 + 80) & 1) != 0)
    {
      v17 = "Undefined behavior: Write to read-only memory";
      goto LABEL_54;
    }
  }
  if ((a6 & 1) != 0)
  {
    if (v16 == 4)
    {
      v17 = "Undefined behavior: Load from block address";
      goto LABEL_54;
    }
    if (!v16)
    {
      v17 = "Unusual: Load from function body";
      goto LABEL_54;
    }
  }
  if ((a6 & 4) != 0 && v16 == 4)
  {
    v17 = "Undefined behavior: Call to block address";
    goto LABEL_54;
  }
  if (v16 != 4 && (a6 & 8) != 0 && v16 <= 0x14)
  {
    v17 = "Undefined behavior: Branch to non-blockaddress";
    goto LABEL_54;
  }
  v25 = (llvm::DataLayout *)a1[1];
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v25, *v14);
  if (IndexTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v55, 0, 0);
  else
    v55 = 0;
  v27 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v14, v25, &v55, 1, 0, 0, v26);
  v28 = v27;
  if (IndexTypeSizeInBits > 0x40)
  {
    v29 = *(_QWORD *)v55;
    MEMORY[0x1CAA32F9C]();
    if (!v28)
      return;
  }
  else
  {
    v29 = (uint64_t)((_QWORD)v55 << -(uint64_t)IndexTypeSizeInBits) >> -(uint64_t)IndexTypeSizeInBits;
    if (!v27)
      return;
  }
  v30 = *(unsigned __int8 *)(v28 + 16);
  if (v30 != 3)
  {
    if (v30 == 59)
    {
      v31 = *(_QWORD *)(v28 + 64);
      if ((llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)v28) & 1) != 0)
      {
LABEL_52:
        v32 = -1;
LABEL_72:
        v40 = 1;
        v39 = __clz(1 << *(_WORD *)(v28 + 18)) ^ 0x3F;
        goto LABEL_73;
      }
      v41 = *(unsigned __int8 *)(v31 + 8);
      if (v41 > 0x11)
        goto LABEL_90;
      if (((1 << v41) & 0xAC7F) != 0)
        goto LABEL_70;
      if (((1 << v41) & 0x30000) == 0)
      {
LABEL_90:
        if ((v41 & 0xFE) != 0x12 && v41 != 21)
          goto LABEL_52;
      }
      if (!llvm::Type::isSizedDerivedType(v31, 0))
        goto LABEL_52;
LABEL_70:
      v32 = sub_1C4E3D148(a1[1], v31);
      if ((_DWORD)v42 == 1)
      goto LABEL_72;
    }
LABEL_111:
    v40 = 0;
    v39 = 0;
    goto LABEL_112;
  }
  if ((*(_DWORD *)(v28 + 20) & 0x7FFFFFF) == 0)
    goto LABEL_111;
  Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)v28);
  if (v34 == 12
    && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
    && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
  {
    goto LABEL_111;
  }
  if ((*(_DWORD *)(v28 + 32) & 0xFu) - 5 >= 4)
  {
    v40 = 0;
    v39 = 0;
    if (((1 << (*(_DWORD *)(v28 + 32) & 0xF)) & 0x614) != 0)
      goto LABEL_112;
  }
  v35 = *(llvm::Module **)(v28 + 40);
  if (v35)
  {
    if (llvm::Module::getSemanticInterposition(v35) && (*(_BYTE *)(v28 + 33) & 0x40) == 0)
      goto LABEL_111;
  }
  if ((*(_BYTE *)(v28 + 80) & 2) != 0)
    goto LABEL_111;
  v36 = *(_QWORD *)(v28 + 24);
  v37 = *(unsigned __int8 *)(v36 + 8);
  if (v37 > 0x11)
    goto LABEL_93;
  if (((1 << v37) & 0xAC7F) != 0)
    goto LABEL_64;
  if (((1 << v37) & 0x30000) == 0)
  {
LABEL_93:
    if ((v37 & 0xFE) != 0x12 && v37 != 21)
      goto LABEL_94;
  }
  if (!llvm::Type::isSizedDerivedType(*(_QWORD *)(v28 + 24), 0))
  {
LABEL_94:
    v32 = -1;
    goto LABEL_66;
  }
LABEL_64:
  v32 = sub_1C4E3D148(a1[1], v36);
  if ((_DWORD)v38 == 1)
LABEL_66:
  if ((*(_WORD *)(v28 + 34) & 0x3F) == 0)
  {
    v44 = *(unsigned __int8 *)(v36 + 8);
    if (v44 <= 0x11)
    {
      if (((1 << v44) & 0xAC7F) != 0)
      {
LABEL_80:
        v40 = 1;
        llvm::DataLayout::getAlignment(a1[1], v36);
        v39 = v45;
        goto LABEL_73;
      }
      if (((1 << v44) & 0x30000) != 0)
        goto LABEL_129;
    }
    if ((v44 & 0xFE) == 0x12 || v44 == 21)
    {
LABEL_129:
      if (llvm::Type::isSizedDerivedType(v36, 0))
        goto LABEL_80;
    }
    v39 = 0;
    v40 = 0;
    goto LABEL_73;
  }
  v39 = (*(_WORD *)(v28 + 34) & 0x3F) - 1;
  v40 = 1;
LABEL_73:
  v43 = a3[1];
  if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v32 != -1 && (v29 < 0 || (v43 & 0x7FFFFFFFFFFFFFFFLL) + v29 > v32))
  {
    v17 = "Undefined behavior: Buffer overflow";
    goto LABEL_54;
  }
LABEL_112:
  v47 = a5;
  v48 = HIBYTE(a4);
  if (v47 && !HIBYTE(a4))
  {
    v49 = v47;
    v50 = *(unsigned __int8 *)(v47 + 8);
    if (v50 > 0x11)
      goto LABEL_125;
    if (((1 << v50) & 0xAC7F) != 0)
    {
LABEL_116:
      v51 = v49;
      v48 = 1;
      llvm::DataLayout::getAlignment(a1[1], v51);
      LOBYTE(a4) = v52;
      goto LABEL_117;
    }
    if (((1 << v50) & 0x30000) == 0)
    {
LABEL_125:
      if ((v50 & 0xFE) != 0x12 && v50 != 21)
        return;
    }
    if (!llvm::Type::isSizedDerivedType(v47, 0))
      return;
    goto LABEL_116;
  }
LABEL_117:
  if (v40
    && v48
    && (63 - __clz(((1 << v39) | v29) & -((1 << v39) | v29))) < a4)
  {
    v17 = "Undefined behavior: Memory reference address is misaligned";
    goto LABEL_54;
  }
}

void sub_1C4E9830C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  llvm::UndefValue *v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  llvm::UndefValue *v17;
  unsigned int v18;
  const char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  __int16 ParamAlignment;
  __int16 v31;
  llvm::UndefValue *v32;
  uint64_t v33;
  unint64_t *v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _QWORD **v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 *v47;
  _OWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  llvm::AttributeList *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t ParamStructRetType;
  uint64_t v63;
  unint64_t v64;
  int v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  char v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unsigned __int8 *v76;
  __int16 v77;
  char v78;
  uint64_t v79;
  llvm::APInt *v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t *v83;
  unsigned int v84;
  unint64_t v85;
  __int16 v86;
  __int16 v87;
  __int16 v88;
  uint64_t v89;
  llvm::Value *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 *v100;
  _OWORD *v101;
  _OWORD *v102;
  unint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  uint64_t v106;
  _OWORD v107[2];
  _QWORD *v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;

  v5 = (uint64_t *)(a2 - 32);
  v108 = *(_QWORD **)(a2 - 32);
  v4 = (uint64_t)v108;
  v109 = -2;
  v110 = 0u;
  v111 = 0u;
  sub_1C4E97D2C((_QWORD *)a1, (unsigned __int8 *)a2, (uint64_t *)&v108, 0, 0, 4);
  v6 = sub_1C4E977FC(a1, v4, 0);
  if (v6)
    v7 = *((_BYTE *)v6 + 16) == 0;
  else
    v7 = 0;
  if (!v7)
    goto LABEL_5;
  v17 = v6;
  v18 = *((unsigned __int16 *)v6 + 9);
  if ((((v18 >> 4) ^ (*(unsigned __int16 *)(a2 + 18) >> 2)) & 0x3FF) != 0)
  {
    v19 = "Undefined behavior: Caller and callee calling convention differ";
    goto LABEL_32;
  }
  v20 = *((_QWORD *)v6 + 3);
  v21 = *(unsigned __int8 *)(a2 + 16);
  if (v21 == 84)
  {
    v22 = 0;
  }
  else if (v21 == 39)
  {
    v22 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v22 = 2;
  }
  v23 = *(_DWORD *)(a2 + 20);
  if (v23 < 0 && (v92 = a2 - 32 * (v23 & 0x7FFFFFF), v93 = *(_QWORD *)(v92 - 8), (v93 & 0xFFFFFFFF0) != 0))
  {
    v25 = -(uint64_t)(v23 & 0x7FFFFFF);
    v24 = *(_DWORD *)(v92 - 12) - *(_DWORD *)(v92 - v93);
  }
  else
  {
    v24 = 0;
    v25 = -(uint64_t)(v23 & 0x7FFFFFF);
  }
  v26 = (-32 * v22 + 32 * (unint64_t)-v24 - 32 * v25 - 32) >> 5;
  v27 = *(_DWORD *)(v20 + 12) - 1;
  if (*(_DWORD *)(v20 + 8) >= 0x100u)
  {
    if (v27 <= v26)
      goto LABEL_27;
LABEL_30:
    v19 = "Undefined behavior: Call argument count mismatches callee argument count";
    goto LABEL_32;
  }
  if (v27 != (_DWORD)v26)
    goto LABEL_30;
LABEL_27:
  if (**(_QWORD **)(v20 + 16) != *(_QWORD *)a2)
  {
    v19 = "Undefined behavior: Call return type mismatches callee return type";
    goto LABEL_32;
  }
  if ((v18 & 1) == 0)
  {
    v37 = *((_QWORD *)v6 + 11);
LABEL_49:
    v38 = v37;
    goto LABEL_51;
  }
  llvm::Function::BuildLazyArguments(v6);
  v37 = *((_QWORD *)v17 + 11);
  if ((*((_WORD *)v17 + 9) & 1) == 0)
    goto LABEL_49;
  llvm::Function::BuildLazyArguments(v17);
  v38 = *((_QWORD *)v17 + 11);
LABEL_51:
  v39 = *(_DWORD *)(a2 + 20);
  v40 = v39 & 0x7FFFFFF;
  v41 = (_QWORD **)(a2 - 32 * v40);
  v42 = *(unsigned __int8 *)(a2 + 16);
  if (v42 == 84)
  {
    v43 = 0;
  }
  else if (v42 == 39)
  {
    v43 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v43 = 2;
  }
  if (v39 < 0 && (v95 = (uint64_t)*(v41 - 1), (v95 & 0xFFFFFFFF0) != 0))
    v44 = (*((_DWORD *)v41 - 3) - *(_DWORD *)((char *)v41 - v95));
  else
    v44 = 0;
  v45 = a2 - 32 * v43 - 32 * v44 - 32;
  if (v41 != (_QWORD **)v45)
  {
    v46 = v38 + 40 * *((_QWORD *)v17 + 12);
    v47 = &v110;
    v48 = v107;
    v103 = (32 * v43 + 32 * v44) ^ 0xFFFFFFFFFFFFFFE0;
    v49 = -32 * v40;
    do
    {
      if (v37 == v46)
      {
        v51 = v46;
      }
      else
      {
        v50 = *v41;
        v51 = v37 + 40;
        if (*(_QWORD *)v37 != **v41)
        {
          v19 = "Undefined behavior: Call argument type mismatches callee parameter type";
          goto LABEL_32;
        }
        v52 = *(unsigned __int8 *)(*(_QWORD *)v37 + 8);
        if (v52 == 15)
        {
          v53 = *(_QWORD *)(*(_QWORD *)(v37 + 24) + 112);
          if (v53)
          {
            v54 = *(_DWORD *)(v37 + 32) + 2;
            if (v54 < *(_DWORD *)(v53 + 8))
            {
              v67 = *(_QWORD *)(v53 + 8 * v54 + 40);
              if (v67)
              {
                if ((*(_BYTE *)(v67 + 14) & 8) != 0)
                {
                  v68 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
                  if (a2 - 32 * v68 != v45)
                  {
                    v100 = v47;
                    v102 = v48;
                    v97 = v45;
                    v104 = *(_QWORD *)(a2 + 64);
                    v99 = v46;
                    v69 = -32 * v68;
                    v70 = 2;
                    while (1)
                    {
                      if (v104)
                      {
                        if (v70 < *(_DWORD *)(v104 + 8))
                        {
                          v74 = *(_QWORD *)(v104 + 40 + 8 * v70);
                          if (v74)
                          {
                            if ((*(_BYTE *)(v74 + 20) & 0x20) != 0)
                              goto LABEL_88;
                          }
                        }
                      }
                      if (llvm::Argument::onlyReadsMemory((llvm::Argument *)v37))
                      {
                        if ((sub_1C4D91D40(a2, v70 - 2, 45) & 1) != 0)
                          goto LABEL_88;
                        v71 = sub_1C4D91D40(a2, v70 - 2, 44);
                        if (v49 == v69 || (v71 & 1) != 0)
                          goto LABEL_88;
                      }
                      else if (v49 == v69)
                      {
                        goto LABEL_88;
                      }
                      v72 = *(unsigned __int8 **)(a2 + v69);
                      if (*(_BYTE *)(*(_QWORD *)v72 + 8) == 15)
                      {
                        v73 = *(_QWORD *)(a1 + 16);
                        v108 = *v41;
                        v109 = -1;
                        *v100 = 0u;
                        v100[1] = 0u;
                        v105 = v72;
                        v106 = -1;
                        *v102 = 0u;
                        v102[1] = 0u;
                        if ((llvm::AAResults::alias(v73, (uint64_t)&v108, (uint64_t)&v105) & 0xFE) == 2)
                        {
                          v19 = "Unusual: noalias argument aliases another argument";
                          goto LABEL_32;
                        }
                      }
LABEL_88:
                      ++v70;
                      v69 += 32;
                      if (v103 == v69)
                      {
                        v52 = *(unsigned __int8 *)(*(_QWORD *)v37 + 8);
                        v45 = v97;
                        v46 = v99;
                        v47 = v100;
                        v48 = v102;
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v52 == 15)
        {
          v55 = *(_QWORD *)(v37 + 24);
          v58 = *(_QWORD *)(v55 + 112);
          v56 = (llvm::AttributeList *)(v55 + 112);
          v57 = v58;
          if (v58)
          {
            v59 = *(_DWORD *)(v37 + 32);
            if ((v59 + 2) < *(_DWORD *)(v57 + 8))
            {
              v60 = *(_QWORD *)(v57 + 8 * (v59 + 2) + 40);
              if (v60)
              {
                if ((*(_BYTE *)(v60 + 21) & 2) != 0 && *(_BYTE *)(*v50 + 8) == 15)
                {
                  v98 = v46;
                  v61 = v47;
                  v101 = v48;
                  ParamStructRetType = llvm::AttributeList::getParamStructRetType(v56, v59);
                  sub_1C4768AD0(*(_QWORD *)(a1 + 8), ParamStructRetType);
                  v64 = (unint64_t)(v63 + 7) >> 3;
                  if (v65 == 1)
                    v64 = -2;
                  v108 = v50;
                  v109 = v64;
                  *v61 = 0u;
                  v61[1] = 0u;
                  llvm::DataLayout::getAlignment(*(_QWORD *)(a1 + 8), ParamStructRetType);
                  v96 = v96 & 0xFFFFFFFFFFFF0000 | v66 | 0x100;
                  sub_1C4E97D2C((_QWORD *)a1, (unsigned __int8 *)a2, (uint64_t *)&v108, v66 | 0x100, ParamStructRetType, 3);
                  v48 = v101;
                  v47 = v61;
                  v46 = v98;
                }
              }
            }
          }
        }
      }
      v41 += 4;
      v49 += 32;
      v37 = v51;
    }
    while (v41 != (_QWORD **)v45);
  }
LABEL_5:
  if (*(_BYTE *)(a2 + 16) != 84)
    return;
  if ((*(_WORD *)(a2 + 18) & 3u) - 1 <= 1)
  {
    v8 = *(_DWORD *)(a2 + 20);
    v9 = v8 & 0x7FFFFFF;
    v10 = (uint64_t *)(a2 - 32 * v9);
    if (v8 < 0 && (v94 = *(v10 - 1), (v94 & 0xFFFFFFFF0) != 0))
      v11 = (*((_DWORD *)v10 - 3) - *(_DWORD *)((char *)v10 - v94));
    else
      v11 = 0;
    if (v10 != &v5[-4 * v11])
    {
      v12 = *(_QWORD *)(a2 + 64);
      v13 = 32 * ~v11;
      v14 = -32 * v9;
      v15 = 2;
      do
      {
        if ((!v12
           || v15 >= *(_DWORD *)(v12 + 8)
           || (v16 = *(_QWORD *)(v12 + 40 + 8 * v15)) == 0
           || (*(_BYTE *)(v16 + 20) & 0x20) == 0)
          && *((_BYTE *)sub_1C4E977FC(a1, *(_QWORD *)(a2 + v14), 1) + 16) == 59)
        {
          v19 = "Undefined behavior: Call with \"tail\" keyword references alloca";
          goto LABEL_32;
        }
        ++v15;
        v14 += 32;
      }
      while (v13 != v14);
      if (*(_BYTE *)(a2 + 16) != 84)
        return;
    }
  }
  v28 = *v5;
  if (!*v5
    || *(_BYTE *)(v28 + 16)
    || *(_QWORD *)(v28 + 24) != *(_QWORD *)(a2 + 72)
    || (*(_BYTE *)(v28 + 33) & 0x20) == 0)
  {
    return;
  }
  v29 = *(_DWORD *)(v28 + 36);
  if (v29 > 286)
  {
    if (v29 > 313)
    {
      if (v29 != 314)
      {
        if (v29 != 315)
          return;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 24) + 8) <= 0xFFu)
        {
          v19 = "Undefined behavior: va_start called in a non-varargs function";
          goto LABEL_32;
        }
      }
    }
    else if (v29 != 287)
    {
      if (v29 != 313)
        return;
      llvm::MemoryLocation::getForArgument(a2, 0, *(uint64_t **)(a1 + 40), (uint64_t)&v108);
      sub_1C4E97D2C((_QWORD *)a1, (unsigned __int8 *)a2, (uint64_t *)&v108, 0, 0, 2);
      llvm::MemoryLocation::getForArgument(a2, 1u, *(uint64_t **)(a1 + 40), (uint64_t)&v108);
      v75 = (_QWORD *)a1;
      v76 = (unsigned __int8 *)a2;
      v77 = 0;
LABEL_113:
      v78 = 1;
LABEL_114:
      sub_1C4E97D2C(v75, v76, (uint64_t *)&v108, v77, 0, v78);
      return;
    }
    llvm::MemoryLocation::getForArgument(a2, 0, *(uint64_t **)(a1 + 40), (uint64_t)&v108);
    v75 = (_QWORD *)a1;
    v76 = (unsigned __int8 *)a2;
    v77 = 0;
    v78 = 3;
    goto LABEL_114;
  }
  switch(v29)
  {
    case 194:
      llvm::MemoryLocation::getForArgument(a2, 0, 0, (uint64_t)&v108);
      ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 0);
      sub_1C4E97D2C((_QWORD *)a1, (unsigned __int8 *)a2, (uint64_t *)&v108, ParamAlignment, 0, 2);
      llvm::MemoryLocation::getForArgument(a2, 1u, 0, (uint64_t)&v108);
      v31 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 1);
      sub_1C4E97D2C((_QWORD *)a1, (unsigned __int8 *)a2, (uint64_t *)&v108, v31, 0, 1);
      v32 = sub_1C4E977FC(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64), 0);
      v33 = -2;
      if (!v32 || *((_BYTE *)v32 + 16) != 16)
        goto LABEL_127;
      v34 = (unint64_t *)((char *)v32 + 24);
      v35 = *((_DWORD *)v32 + 8);
      if (v35 > 0x40)
      {
        if (v35 - llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)v32 + 24)) > 0x20)
          goto LABEL_127;
        v36 = *(_QWORD **)*v34;
      }
      else
      {
        v36 = (_QWORD *)*v34;
        if (__clz(*v34) - 32 >= 0x21)
          goto LABEL_127;
      }
      if ((unint64_t)v36 <= 0x7FFFFFFFFFFFFFFBLL)
        v33 = (uint64_t)v36;
      else
        v33 = -2;
LABEL_127:
      v89 = *(_QWORD *)(a1 + 16);
      v90 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
      v91 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*(llvm::Value **)(a2
                                                                              - 32
                                                                              * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
      v108 = v90;
      v109 = v33;
      v110 = 0u;
      v111 = 0u;
      v105 = v91;
      v106 = v33;
      memset(v107, 0, sizeof(v107));
      if (llvm::AAResults::alias(v89, (uint64_t)&v108, (uint64_t)&v105) != 3)
        return;
      v19 = "Undefined behavior: memcpy source and destination overlap";
      break;
    case 195:
    case 198:
      return;
    case 196:
      v82 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 64);
      v83 = (unint64_t *)(v82 + 24);
      v84 = *(_DWORD *)(v82 + 32);
      if (v84 < 0x41)
        goto LABEL_123;
      if (v84 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v82 + 24)) <= 0x40)
      {
        v83 = (unint64_t *)*v83;
LABEL_123:
        v85 = *v83;
      }
      else
      {
        v85 = -1;
      }
      llvm::MemoryLocation::getForArgument(a2, 0, 0, (uint64_t)&v108);
      v87 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 0);
      sub_1C4E97D2C((_QWORD *)a1, (unsigned __int8 *)a2, (uint64_t *)&v108, v87, 0, 2);
      llvm::MemoryLocation::getForArgument(a2, 1u, 0, (uint64_t)&v108);
      v88 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 1);
      sub_1C4E97D2C((_QWORD *)a1, (unsigned __int8 *)a2, (uint64_t *)&v108, v88, 0, 1);
      if (v85 <= 0x7FFFFFFFFFFFFFFBLL)
        v33 = v85;
      else
        v33 = -2;
      goto LABEL_127;
    case 197:
      llvm::MemoryLocation::getForArgument(a2, 0, 0, (uint64_t)&v108);
      v86 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 0);
      sub_1C4E97D2C((_QWORD *)a1, (unsigned __int8 *)a2, (uint64_t *)&v108, v86, 0, 2);
      llvm::MemoryLocation::getForArgument(a2, 1u, 0, (uint64_t)&v108);
      v77 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 1);
      v75 = (_QWORD *)a1;
      v76 = (unsigned __int8 *)a2;
      goto LABEL_113;
    case 199:
      llvm::MemoryLocation::getForArgument(a2, 0, 0, (uint64_t)&v108);
      v77 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(a2 + 64), 0);
      v75 = (_QWORD *)a1;
      v76 = (unsigned __int8 *)a2;
      v78 = 2;
      goto LABEL_114;
    default:
      if (v29 != 153)
        return;
      v79 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
      if (!v79 || *(_BYTE *)(v79 + 16) != 16)
        return;
      v80 = (llvm::APInt *)(v79 + 24);
      v81 = *(_DWORD *)(v79 + 32);
      if (v81 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v80) != v81)
          return;
      }
      else if (*(_QWORD *)v80)
      {
        return;
      }
      v19 = "get_active_lane_mask: operand #2 must be greater than 0";
      break;
  }
LABEL_32:
  v108 = v19;
  LOWORD(v111) = 259;
  v105 = (unsigned __int8 *)a2;
  sub_1C4E97734((_QWORD *)a1, (uint64_t)&v108, &v105);
}

uint64_t sub_1C4E98DB0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v8;
  BOOL v9;
  unsigned __int8 *v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  llvm::Type *v14;
  llvm::UndefValue *AggregateElement;
  unsigned int v16;
  llvm::UndefValue *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v4 = a1[16];
  if (v4 - 11 < 2)
    return 1;
  v8 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v9 = (*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 18;
  else
    v9 = 0;
  if (v9)
  {
    if (v4 <= 0x14)
    {
      if ((llvm::Constant::isZeroValue((llvm::Constant *)a1) & 1) != 0)
        return 1;
      v13 = *(_DWORD *)(v8 + 32);
      if (v13)
      {
        v14 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a1, v14);
          v16 = *((unsigned __int8 *)AggregateElement + 16);
          if (v16 - 11 < 2)
            break;
          if (v16 < 0x1C || (v17 = AggregateElement, !*((_QWORD *)AggregateElement + 5)))
            v17 = 0;
          v25 = a2;
          v26 = 0;
          v27 = v17;
          v28 = 0;
          v29 = 0;
          v5 = 1;
          v30 = 1;
          sub_1C4F83784((uint64_t)AggregateElement, 0, &v25, &v21);
          v18 = v22;
          if (v22)
          {
            if (v22 > 0x40)
              v19 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v21) == v18;
            else
              v19 = v21 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
            v5 = v19;
          }
          if (v24 >= 0x41 && v23)
          {
            MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
            v18 = v22;
          }
          if (v18 >= 0x41 && v21)
            MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
          if ((_DWORD)v5)
            break;
          v14 = (llvm::Type *)((_DWORD)v14 + 1);
          if (v13 == (_DWORD)v14)
            return v5;
        }
        return 1;
      }
    }
    return 0;
  }
  if (v4 < 0x1C || (v10 = a1, !*((_QWORD *)a1 + 5)))
    v10 = 0;
  v25 = a2;
  v26 = a4;
  v27 = v10;
  v28 = a3;
  v29 = 0;
  v5 = 1;
  v30 = 1;
  sub_1C4F83784((uint64_t)a1, 0, &v25, &v21);
  v11 = v22;
  if (v22)
  {
    if (v22 > 0x40)
      v12 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v21) == v11;
    else
      v12 = v21 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
    v5 = v12;
  }
  if (v24 >= 0x41 && v23)
  {
    MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
    v11 = v22;
  }
  if (v11 >= 0x41 && v21)
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  return v5;
}

uint64_t llvm::isDereferenceableAndAlignedPointer(uint64_t a1, unsigned __int8 a2, llvm::APInt *a3, const llvm::DataLayout *a4, unint64_t *a5, unsigned __int8 *a6, llvm::DataLayout *a7)
{
  uint64_t result;
  unsigned int v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  _BYTE v13[256];

  v9 = v13;
  v10 = v13;
  v11 = 32;
  v12 = 0;
  result = sub_1C4E99094(a1, a2, a3, a4, a5, a6, a7, (llvm::SmallPtrSetImplBase *)&v9, 16);
  if (v10 != v9)
  {
    v8 = result;
    free(v10);
    return v8;
  }
  return result;
}

uint64_t sub_1C4E99094(uint64_t a1, unsigned __int8 a2, llvm::APInt *a3, const llvm::DataLayout *a4, unint64_t *a5, unsigned __int8 *a6, llvm::DataLayout *a7, llvm::SmallPtrSetImplBase *a8, int a9)
{
  uint64_t v17;
  int i;
  char v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v26;
  uint64_t PointerDereferenceableBytes;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  int v31;
  unint64_t *v32;
  const char *v33;
  int v34;
  int v35;
  int v36;
  int64_t v37;
  BOOL v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t *v43;
  uint64_t DerivedPtr;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unint64_t v50;
  _BOOL4 v51;
  unsigned int v52;
  int v53;
  uint64_t *v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  int v60;
  int64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  uint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _BOOL4 v79;
  int v80;
  int64_t v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  const char *v88;
  int v89;
  int v90;
  int v91[6];
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unsigned int v99;
  BOOL v100[2];
  unint64_t *v101;
  unsigned __int8 v102[9];
  unsigned int v103[2];
  unint64_t *v104;
  unsigned __int8 *v105;
  llvm::APInt *v106;
  char v107;
  _QWORD v108[3];

  v108[1] = *MEMORY[0x1E0C80C00];
  v101 = a5;
  if (a9)
  {
    v17 = a2;
    for (i = a9 - 1; i != -1; --i)
    {
      sub_1C4774094(a8, a1);
      if (!v19)
        return 0;
      v20 = *(unsigned __int8 *)(a1 + 16);
      if (a1 && v20 == 85)
      {
        if (!sub_1C4E99094(*(_QWORD *)(a1 - 64), v17, a3, a4, a5, a6, a7, a8, i))
          return 0;
        v21 = *(_QWORD *)(a1 - 32);
      }
      else if (v20 != 77 && (v20 != 5 || *(_WORD *)(a1 + 18) != 49)
             || ((v22 = *(_DWORD *)(a1 + 20), (v22 & 0x40000000) != 0)
               ? (v23 = *(uint64_t **)(a1 - 8))
               : (v23 = (uint64_t *)(a1 - 32 * (v22 & 0x7FFFFFF))),
                 v21 = *v23,
                 *(_BYTE *)(*(_QWORD *)v21 + 8) != 15))
      {
        v102[0] = a2;
        *(_WORD *)v100 = 0;
        v26 = *((_DWORD *)a3 + 2);
        PointerDereferenceableBytes = llvm::Value::getPointerDereferenceableBytes((uint64_t ***)a1, a4, &v100[1], v100);
        v99 = v26;
        if (v26 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v98, PointerDereferenceableBytes, 0);
          if (v99 > 0x40)
          {
            v36 = 0;
            v37 = ((unint64_t)v99 + 63) >> 6;
            do
            {
              v38 = v37-- < 1;
              if (v38)
                break;
              v39 = *(_QWORD *)(v98 + 8 * v37);
              v36 += __clz(v39);
            }
            while (!v39);
            v40 = v99 | 0xFFFFFFC0;
            if ((v99 & 0x3F) == 0)
              v40 = 0;
            if (v36 + v40 == v99)
              goto LABEL_49;
            v69 = 8 * (((unint64_t)v99 + 63) >> 6);
            do
            {
              if (!v69)
              {
                v31 = 0;
                goto LABEL_24;
              }
              v70 = *(_QWORD *)(v98 - 8 + v69);
              v71 = *(_QWORD *)(*(_QWORD *)a3 - 8 + v69);
              v69 -= 8;
            }
            while (v70 == v71);
            if (v70 > v71)
              v31 = 1;
            else
              v31 = -1;
          }
          else
          {
            v29 = v98;
            if (!v98)
              goto LABEL_49;
LABEL_22:
            v30 = v29 >= *(_QWORD *)a3;
            v31 = v29 > *(_QWORD *)a3;
            if (!v30)
              v31 = -1;
          }
LABEL_24:
          if (v31 < 0 || v100[0])
            goto LABEL_49;
          if (v100[1])
          {
            v32 = v101;
            if (!v101 || !v101[5])
            {
              if (!a1 || *(unsigned __int8 *)(a1 + 16) < 0x1Cu || (v32 = (unint64_t *)a1, !*(_QWORD *)(a1 + 40)))
                v32 = 0;
            }
            *(_QWORD *)&v102[1] = a4;
            *(_QWORD *)v103 = 0;
            v104 = v32;
            v105 = a6;
            v106 = 0;
            v107 = 1;
            if (!sub_1C4F84D74(a1, 0, (uint64_t)&v102[1]))
              goto LABEL_49;
          }
          sub_1C4768AD0((uint64_t)a4, *(_QWORD *)a1);
          v35 = v34;
          if ((_DWORD)v33 == 1)
          v103[0] = (v35 + 7) & 0xFFFFFFF8;
          if (v103[0] > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v102[1], 0, 0);
          else
            *(_QWORD *)&v102[1] = 0;
          v24 = sub_1C4E9AB50((llvm::Value *)a1, (uint64_t *)&v102[1], v102[0], a4);
          if (v103[0] >= 0x41)
          {
LABEL_118:
            if (*(_QWORD *)&v102[1])
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v102[1], 0x1000C8000313F17);
          }
        }
        else
        {
          if (v26)
            v28 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v26;
          else
            v28 = 0;
          v29 = v28 & PointerDereferenceableBytes;
          v98 = v29;
          if (v29)
            goto LABEL_22;
LABEL_49:
          if (v101)
          {
            LODWORD(v95) = 0;
            v96 = 0;
            v97 = 0;
            LODWORD(v92) = 0;
            v93 = 0;
            v94 = 0;
            v108[0] = 0x4A0000004CLL;
            *(_QWORD *)&v102[1] = &v101;
            *(_QWORD *)v103 = &v95;
            v104 = &v92;
            v105 = v102;
            v106 = a3;
            llvm::getKnowledgeForValue(a1, v108, 2, 0, (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t))sub_1C4E9AD34, (uint64_t)&v102[1], (uint64_t)v91);
            if (v91[0])
            {
              v24 = 1;
              goto LABEL_170;
            }
          }
          v41 = *(unsigned __int8 *)(a1 + 16);
          if (v41 == 62 || v41 == 5 && *(_WORD *)(a1 + 18) == 34)
          {
            v42 = *(_DWORD *)(a1 + 20);
            if ((v42 & 0x40000000) != 0)
              v43 = *(uint64_t **)(a1 - 8);
            else
              v43 = (uint64_t *)(a1 - 32 * (v42 & 0x7FFFFFF));
            v45 = *v43;
            v103[0] = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a4, *(_QWORD *)a1);
            if (v103[0] > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v102[1], 0, 0);
            else
              *(_QWORD *)&v102[1] = 0;
            v47 = llvm::GEPOperator::accumulateConstantOffset(a1, a4, (uint64_t)&v102[1], 0, v46);
            v48 = v103[0];
            if (!v47)
              goto LABEL_116;
            v49 = (unsigned __int8 *)(*(_QWORD *)&v102[1] + 8 * ((v103[0] - 1) >> 6));
            if (v103[0] < 0x41)
              v49 = &v102[1];
            if (((*(_QWORD *)v49 >> (LOBYTE(v103[0]) - 1)) & 1) != 0)
              goto LABEL_116;
            LODWORD(v93) = v103[0];
            if (v103[0] > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v92, 1 << v102[0], 0);
            }
            else
            {
              v50 = v103[0] ? 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v103[0]) : 0;
              v92 = v50 & (1 << v102[0]);
            }
            llvm::APInt::urem((llvm::APInt *)&v102[1], (const llvm::APInt *)&v92, (llvm::APInt *)&v95);
            if (v96 > 0x40)
            {
              v60 = 0;
              v61 = ((unint64_t)v96 + 63) >> 6;
              do
              {
                v38 = v61-- < 1;
                if (v38)
                  break;
                v62 = *(_QWORD *)(v95 + 8 * v61);
                v60 += __clz(v62);
              }
              while (!v62);
              v63 = v96 | 0xFFFFFFC0;
              if ((v96 & 0x3F) == 0)
                v63 = 0;
              v51 = v60 + v63 == v96;
              if (v95)
                MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
            }
            else
            {
              v51 = v95 == 0;
            }
            if (v93 >= 0x41 && v92)
              MEMORY[0x1CAA32F9C](v92, 0x1000C8000313F17);
            v48 = v103[0];
            if (v51)
            {
              v64 = v102[0];
              v65 = *((_DWORD *)a3 + 2);
              if (v65 < v103[0])
              {
                llvm::APInt::sext(a3, v103[0], (llvm::APInt *)&v92);
              }
              else if (v65 > v103[0])
              {
                llvm::APInt::trunc(a3, v103[0], (llvm::APInt *)&v92);
              }
              else
              {
                sub_1C5DD14E0((uint64_t)&v92, (uint64_t)a3);
              }
              v66 = v93;
              if (v93 >= 0x41)
              {
                v72 = 0;
                v73 = (unint64_t *)v92;
                v74 = *(uint64_t **)&v102[1];
                v75 = ((unint64_t)v93 + 63) >> 6;
                v76 = v75;
                do
                {
                  v77 = *v74++;
                  v78 = v77 + *v73;
                  v79 = v78 + 1 <= *v73;
                  if (v72)
                  {
                    ++v78;
                    v72 = v79;
                  }
                  else
                  {
                    v72 = v78 < *v73;
                  }
                  *v73++ = v78;
                  --v76;
                }
                while (v76);
                *(_QWORD *)(v92 + 8 * (v75 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v66;
                v66 = v93;
                v68 = v92;
              }
              else
              {
                if ((_DWORD)v93)
                  v67 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v93;
                else
                  v67 = 0;
                v68 = v67 & (v92 + *(_QWORD *)&v102[1]);
                v92 = v68;
              }
              LODWORD(v96) = v66;
              v95 = v68;
              LODWORD(v93) = 0;
              v24 = sub_1C4E99094(v45, v64, &v95, a4, v101, a6, a7, a8, i);
              if (v96 >= 0x41 && v95)
                MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
              if (v93 >= 0x41 && v92)
                MEMORY[0x1CAA32F9C](v92, 0x1000C8000313F17);
              v48 = v103[0];
            }
            else
            {
LABEL_116:
              v24 = 0;
            }
            if (v48 < 0x41)
              goto LABEL_170;
            goto LABEL_118;
          }
          if (sub_1C4E9AE24(a1))
          {
            DerivedPtr = llvm::GCRelocateInst::getDerivedPtr((llvm::GCRelocateInst *)a1);
LABEL_90:
            v24 = sub_1C4E99094(DerivedPtr, v102[0], a3, a4, v101, a6, a7, a8, i);
            goto LABEL_170;
          }
          v52 = *(unsigned __int8 *)(a1 + 16);
          if (v52 == 78)
          {
LABEL_75:
            v53 = *(_DWORD *)(a1 + 20);
            if ((v53 & 0x40000000) != 0)
              v54 = *(uint64_t **)(a1 - 8);
            else
              v54 = (uint64_t *)(a1 - 32 * (v53 & 0x7FFFFFF));
            DerivedPtr = *v54;
            goto LABEL_90;
          }
          if (v52 == 5)
          {
            if (*(_WORD *)(a1 + 18) == 50)
              goto LABEL_75;
LABEL_169:
            v24 = 0;
            goto LABEL_170;
          }
          if (v52 < 0x1C)
            goto LABEL_169;
          v24 = 0;
          v55 = v52 - 33;
          if (v55 <= 0x33 && ((1 << v55) & 0x8000000000041) != 0)
          {
            DerivedPtr = llvm::getArgumentAliasingToReturnedPointer((llvm *)a1, (const llvm::CallBase *)1);
            if (DerivedPtr)
              goto LABEL_90;
            v92 = 0;
            if (!llvm::getObjectSize((llvm::Value *)a1, &v92, a4, a7, (llvm::DataLayout *)0x10000, 0))
              goto LABEL_169;
            v56 = *((_DWORD *)a3 + 2);
            LODWORD(v96) = v56;
            if (v56 <= 0x40)
            {
              if (v56)
                v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v56;
              else
                v57 = 0;
              v58 = v57 & v92;
              v95 = v58;
              if (!v58)
                goto LABEL_169;
              goto LABEL_86;
            }
            llvm::APInt::initSlowCase((llvm::APInt *)&v95, v92, 0);
            if (v96 > 0x40)
            {
              v80 = 0;
              v81 = ((unint64_t)v96 + 63) >> 6;
              do
              {
                v38 = v81-- < 1;
                if (v38)
                  break;
                v82 = *(_QWORD *)(v95 + 8 * v81);
                v80 += __clz(v82);
              }
              while (!v82);
              v83 = v96 | 0xFFFFFFC0;
              if ((v96 & 0x3F) == 0)
                v83 = 0;
              if (v80 + v83 == (_DWORD)v96)
              {
                if (v95)
                  MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
                goto LABEL_169;
              }
              v84 = 8 * (((unint64_t)v96 + 63) >> 6);
              while (v84)
              {
                v85 = *(_QWORD *)(v95 - 8 + v84);
                v86 = *(_QWORD *)(*(_QWORD *)a3 - 8 + v84);
                v84 -= 8;
                if (v85 != v86)
                {
                  if (v85 <= v86)
                    goto LABEL_87;
                  break;
                }
              }
            }
            else
            {
              v58 = v95;
              if (!v95)
                goto LABEL_169;
LABEL_86:
              if (v58 < *(_QWORD *)a3)
              {
LABEL_87:
                v59 = 1;
                v24 = 1;
                goto LABEL_165;
              }
            }
            v87 = v101;
            if (!v101 || !v101[5])
            {
              if (!a1 || *(unsigned __int8 *)(a1 + 16) < 0x1Cu || (v87 = (unint64_t *)a1, !*(_QWORD *)(a1 + 40)))
                v87 = 0;
            }
            *(_QWORD *)&v102[1] = a4;
            *(_QWORD *)v103 = 0;
            v104 = v87;
            v105 = a6;
            v106 = 0;
            v59 = 1;
            v107 = 1;
            v24 = 1;
            if (sub_1C4F84D74(a1, 0, (uint64_t)&v102[1]) && !llvm::Value::canBeFreed((llvm::Value *)a1))
            {
              sub_1C4768AD0((uint64_t)a4, *(_QWORD *)a1);
              v90 = v89;
              if ((_DWORD)v88 == 1)
              v103[0] = (v90 + 7) & 0xFFFFFFF8;
              if (v103[0] > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v102[1], 0, 0);
              else
                *(_QWORD *)&v102[1] = 0;
              v24 = sub_1C4E9AB50((llvm::Value *)a1, (uint64_t *)&v102[1], v102[0], a4);
              if (v103[0] >= 0x41 && *(_QWORD *)&v102[1])
                MEMORY[0x1CAA32F9C](*(_QWORD *)&v102[1], 0x1000C8000313F17);
              v59 = 0;
            }
LABEL_165:
            if (v96 >= 0x41 && v95)
              MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
            if ((v59 & 1) == 0)
              goto LABEL_170;
            goto LABEL_169;
          }
        }
LABEL_170:
        if (v99 >= 0x41 && v98)
          MEMORY[0x1CAA32F9C](v98, 0x1000C8000313F17);
        return v24;
      }
      v101 = a5;
      a1 = v21;
    }
  }
  return 0;
}

uint64_t llvm::isDereferenceableAndAlignedPointer(uint64_t *a1, uint64_t a2, unsigned __int8 a3, const llvm::DataLayout *a4, unint64_t *a5, unsigned __int8 *a6, llvm::DataLayout *a7)
{
  unsigned int v14;
  unsigned int PointerTypeSizeInBits;
  const char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v24;
  unsigned int v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  _BYTE v30[256];

  v14 = *(unsigned __int8 *)(a2 + 8);
  if (v14 > 0x11)
    goto LABEL_15;
  if (((1 << v14) & 0xAC7F) != 0)
    goto LABEL_3;
  if (((1 << v14) & 0x30000) == 0)
  {
LABEL_15:
    if ((v14 & 0xFE) != 0x12 && v14 != 21)
      return 0;
  }
  if (!llvm::Type::isSizedDerivedType(a2, 0))
    return 0;
  v14 = *(unsigned __int8 *)(a2 + 8);
LABEL_3:
  if (v14 == 19)
    return 0;
  PointerTypeSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits((uint64_t)a4, *a1);
  sub_1C4768AD0((uint64_t)a4, a2);
  v18 = v17 + 7;
  if ((_DWORD)v16 == 1)
  v19 = v18 >> 3;
  v25 = PointerTypeSizeInBits;
  if (PointerTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v24, v19, 0);
  }
  else
  {
    v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PointerTypeSizeInBits;
    if (!PointerTypeSizeInBits)
      v20 = 0;
    v24 = v20 & v19;
  }
  v26 = v30;
  v27 = v30;
  v28 = 32;
  v29 = 0;
  v21 = sub_1C4E99094((uint64_t)a1, a3, (llvm::APInt *)&v24, a4, a5, a6, a7, (llvm::SmallPtrSetImplBase *)&v26, 16);
  if (v27 != v26)
    free(v27);
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  return v21;
}

uint64_t llvm::isDereferenceablePointer(uint64_t *a1, uint64_t a2, const llvm::DataLayout *a3, unint64_t *a4, unsigned __int8 *a5, llvm::DataLayout *a6)
{
  return llvm::isDereferenceableAndAlignedPointer(a1, a2, 0, a3, a4, a5, a6);
}

uint64_t llvm::isDereferenceableAndAlignedInLoop(llvm *this, llvm::LoadInst *a2, llvm::Loop *a3, llvm::ScalarEvolution *a4, llvm::DominatorTree *a5)
{
  const llvm::DataLayout *v9;
  uint64_t *v10;
  unsigned int IndexTypeSizeInBits;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  unint64_t *v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  unsigned int v29;
  uint64_t SCEVIter;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unsigned int SmallConstantMaxTripCount;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  void **v42;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  unint64_t *v48;
  char *v49;
  char *v50;
  unsigned int v51;
  void *__s2;
  unsigned int v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  int v57;
  _BYTE v58[264];

  v9 = (const llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40) + 272);
  v10 = (uint64_t *)*((_QWORD *)this - 4);
  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v9, *v10);
  sub_1C4768AD0((uint64_t)v9, *(_QWORD *)this);
  v13 = (unint64_t)(v12 + 7) >> 3;
  v53 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__s2, v13, 0);
  }
  else
  {
    v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
    if (!IndexTypeSizeInBits)
      v14 = 0;
    __s2 = (void *)(v14 & v13);
  }
  v15 = __clz(1 << ((unint64_t)*((unsigned __int16 *)this + 9) >> 1));
  v16 = **((_QWORD **)a2 + 4);
  v17 = v16 + 40;
  for (i = *(_QWORD *)(v16 + 48); i != v17; i = *(_QWORD *)(i + 8))
  {
    v19 = (unint64_t *)(i - 24);
    if (i)
      v20 = i - 24;
    else
      v20 = 0;
    if (*(_BYTE *)(v20 + 16) != 83)
      goto LABEL_13;
  }
  v19 = 0;
LABEL_13:
  v21 = v15 ^ 0x3F;
  if (llvm::Loop::isLoopInvariant((uint64_t)a2, (uint64_t)v10))
  {
    v54 = v58;
    v55 = v58;
    v56 = 32;
    v57 = 0;
    v22 = sub_1C4E99094((uint64_t)v10, v21, (llvm::APInt *)&__s2, v9, v19, (unsigned __int8 *)a4, 0, (llvm::SmallPtrSetImplBase *)&v54, 16);
    if (v55 != v54)
      free(v55);
    goto LABEL_49;
  }
  v23 = *((_QWORD *)a3 + 13);
  v24 = *((_DWORD *)a3 + 30);
  if (!v24)
    goto LABEL_22;
  v25 = (v24 - 1) & ((v10 >> 4) ^ (v10 >> 9));
  v26 = v23 + 48 * v25;
  v27 = *(uint64_t **)(v26 + 24);
  if (v27 != v10)
  {
    v28 = 1;
    while (v27 != (uint64_t *)-4096)
    {
      v29 = v25 + v28++;
      v25 = v29 & (v24 - 1);
      v26 = v23 + 48 * v25;
      v27 = *(uint64_t **)(v26 + 24);
      if (v27 == v10)
        goto LABEL_23;
    }
LABEL_22:
    v26 = v23 + 48 * v24;
  }
LABEL_23:
  if (v26 == v23 + 48 * v24 || (SCEVIter = *(_QWORD *)(v26 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter(a3, (unint64_t)v10);
  if (SCEVIter)
    v31 = *(unsigned __int16 *)(SCEVIter + 24) == 7;
  else
    v31 = 0;
  if (!v31 || *(llvm::LoadInst **)(SCEVIter + 48) != a2 || *(_QWORD *)(SCEVIter + 40) != 2)
    goto LABEL_48;
  v32 = *(_QWORD *)(*(_QWORD *)(SCEVIter + 32) + 8);
  if (!v32 || *(_WORD *)(v32 + 24) != 0)
    goto LABEL_48;
  v34 = *(_QWORD *)(v32 + 32);
  v35 = *(unsigned int *)(v34 + 32);
  if (v35 > 0x40)
  {
    v36 = __s2;
    if (memcmp(*(const void **)(v34 + 24), __s2, ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8))
    {
LABEL_48:
      v22 = 0;
      goto LABEL_49;
    }
    v37 = v36;
  }
  else
  {
    v36 = *(void **)(v34 + 24);
    v37 = __s2;
    if (v36 != __s2)
      goto LABEL_48;
  }
  SmallConstantMaxTripCount = llvm::ScalarEvolution::getSmallConstantMaxTripCount((const llvm::Loop **)a3, a2);
  if (!SmallConstantMaxTripCount)
    goto LABEL_48;
  v39 = v53;
  if (v53 > 0x40)
  {
    v44 = v53 + 63;
    v48 = (unint64_t *)SmallConstantMaxTripCount;
    v49 = (char *)operator new[]();
    memcpy(v49, v37, (v44 >> 3) & 0x3FFFFFF8);
    llvm::APInt::tcMultiplyPart((llvm::APInt *)v49, (unint64_t *)v49, v48, 0, v44 >> 6, v44 >> 6, 0);
    v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v39;
    v42 = (void **)&v49[8 * (v44 >> 6) - 8];
    v40 = (unint64_t)*v42;
  }
  else
  {
    v40 = (_QWORD)v36 * SmallConstantMaxTripCount;
    v49 = (char *)v40;
    v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
    if (!v53)
      v41 = 0;
    v42 = (void **)&v49;
  }
  *v42 = (void *)(v40 & v41);
  v51 = v39;
  v50 = v49;
  v45 = **(_QWORD **)(SCEVIter + 32);
  if (v45)
    v46 = *(unsigned __int16 *)(v45 + 24) == 14;
  else
    v46 = 0;
  if (v46 && (v47 = *(_QWORD *)(v45 - 8), !llvm::APInt::urem((uint64_t **)&__s2, 1 << v21)))
  {
    v54 = v58;
    v55 = v58;
    v56 = 32;
    v57 = 0;
    v22 = sub_1C4E99094(v47, v21, (llvm::APInt *)&v50, v9, v19, (unsigned __int8 *)a4, 0, (llvm::SmallPtrSetImplBase *)&v54, 16);
    if (v55 != v54)
      free(v55);
    v39 = v51;
  }
  else
  {
    v22 = 0;
  }
  if (v39 >= 0x41 && v50)
    MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
LABEL_49:
  if (v53 >= 0x41 && __s2)
    MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  return v22;
}

BOOL llvm::isSafeToLoadUnconditionally(llvm::Value *a1, unsigned __int8 a2, llvm::APInt *a3, const llvm::DataLayout *a4, unint64_t *a5, unsigned __int8 *a6, llvm::DataLayout *a7)
{
  unint64_t *v7;
  char v12;
  _BOOL8 result;
  char v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  llvm::Value *v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Value *v28;
  uint64_t v29;
  const char *v30;
  unsigned __int8 *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  int v42;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  _BYTE v49[264];

  v7 = a5;
  v45 = v49;
  v46 = v49;
  if (!a6)
    a5 = 0;
  v47 = 32;
  v48 = 0;
  v12 = sub_1C4E99094((uint64_t)a1, a2, a3, a4, a5, a6, a7, (llvm::SmallPtrSetImplBase *)&v45, 16);
  if (v46 == v45)
  {
    if ((v12 & 1) != 0)
      return 1;
  }
  else
  {
    v14 = v12;
    free(v46);
    if ((v14 & 1) != 0)
      return 1;
  }
  result = 0;
  if (v7 && *((_DWORD *)a3 + 2) <= 0x40u)
  {
    v15 = *(_QWORD *)a3;
    v16 = v7 + 3;
    v17 = *(unint64_t **)(v7[5] + 48);
    v18 = llvm::Value::stripPointerCasts(a1);
    if (v7 + 3 != v17)
    {
      v19 = (unsigned __int8 *)v18;
      do
      {
        v16 = (unint64_t *)*v16;
        v20 = (uint64_t *)(v16 - 3);
        if (v16)
          v21 = (uint64_t)(v16 - 3);
        else
          v21 = 0;
        if (*(_BYTE *)(v21 + 16) == 84)
        {
          v22 = *(_QWORD *)(v21 + 64);
          if (!v22 || (*(_BYTE *)(v22 + 17) & 0x30) == 0)
          {
            v23 = *(_DWORD *)(v21 + 20);
            if (v23 < 0
              && (v35 = v21 - 32 * (v23 & 0x7FFFFFF), v38 = *(_QWORD *)(v35 - 8), v36 = v35 - 8, (v37 = v38) != 0))
            {
              v39 = -v37;
              while (1)
              {
                v40 = *(_DWORD *)(*(_QWORD *)(v36 + v39) + 8);
                v41 = v40 > 7;
                v42 = (1 << v40) & 0x83;
                if (v41 || v42 == 0)
                  break;
                v39 += 16;
                if (!v39)
                  goto LABEL_18;
              }
            }
            else
            {
LABEL_18:
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v21, 45) & 1) != 0
                || (llvm::CallBase::hasFnAttrOnCalledFunction(v21, 44) & 1) != 0)
              {
                goto LABEL_21;
              }
            }
            result = sub_1C4D99D08(v21);
            if (!result)
              return result;
          }
        }
LABEL_21:
        v24 = *(unsigned __int8 *)(v21 + 16);
        if (v16 && v24 == 60)
        {
          v25 = *(unsigned __int16 *)(v21 + 18);
          if ((v25 & 1) != 0)
            continue;
        }
        else
        {
          if (v24 == 61)
            v26 = v21;
          else
            v26 = 0;
          if (!v16)
            continue;
          if (v24 != 61)
            continue;
          v25 = *(unsigned __int16 *)(v26 + 18);
          if ((v25 & 1) != 0)
            continue;
          v20 = *(uint64_t **)(v26 - 64);
        }
        if (a2 <= (__clz(1 << (v25 >> 1)) ^ 0x3F))
        {
          v27 = *v20;
          v28 = *(llvm::Value **)(v21 - 32);
          if (v28 == (llvm::Value *)v19)
          {
            sub_1C4768AD0((uint64_t)a4, v27);
            if ((_DWORD)v30 == 1)
            {
              v44 = v29;
              v29 = v44;
            }
            if (v15 <= (unint64_t)(v29 + 7) >> 3)
              return 1;
          }
          v31 = (unsigned __int8 *)llvm::Value::stripPointerCasts(v28);
          if (sub_1C4E9A3CC(v31, v19))
          {
            sub_1C4768AD0((uint64_t)a4, v27);
            v34 = v33;
            if ((_DWORD)v32 == 1)
            if (v15 <= (unint64_t)(v34 + 7) >> 3)
              return 1;
          }
        }
      }
      while (v16 != v17);
    }
    return 0;
  }
  return result;
}

BOOL sub_1C4E9A3CC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  BOOL v3;
  BOOL v4;
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  v2 = a1[16];
  v3 = v2 < 0x1C || v2 - 41 >= 0x12;
  result = (!v3 || (v2 - 66 < 0xD ? (v4 = v2 > 0x1B) : (v4 = 0), v4 || v2 == 83 || v2 == 62))
        && a2
        && a2[16] >= 0x1Cu
        && (llvm::Instruction::isIdenticalToWhenDefined((llvm::Instruction *)a1, (const llvm::Instruction *)a2) & 1) != 0;
  return result;
}

BOOL llvm::isSafeToLoadUnconditionally(uint64_t *a1, uint64_t a2, unsigned __int8 a3, const llvm::DataLayout *a4, unint64_t *a5, unsigned __int8 *a6, llvm::DataLayout *a7)
{
  unsigned int IndexTypeSizeInBits;
  const char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BOOL8 isSafeToLoadUnconditionally;
  unint64_t v22;
  unsigned int v23;

  IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)a4, *a1);
  sub_1C4768AD0((uint64_t)a4, a2);
  v17 = v16 + 7;
  if ((_DWORD)v15 == 1)
  v18 = v17 >> 3;
  v23 = IndexTypeSizeInBits;
  if (IndexTypeSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v22, v18, 0);
  }
  else
  {
    v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)IndexTypeSizeInBits;
    if (!IndexTypeSizeInBits)
      v19 = 0;
    v22 = v19 & v18;
  }
  isSafeToLoadUnconditionally = llvm::isSafeToLoadUnconditionally((llvm::Value *)a1, a3, (llvm::APInt *)&v22, a4, a5, a6, a7);
  if (v23 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  return isSafeToLoadUnconditionally;
}

llvm::UndefValue *sub_1C4E9A560(uint64_t a1, unsigned __int8 *a2, llvm::Type *a3, char a4, __int32 **a5, _BYTE *a6)
{
  int v12;
  unsigned __int8 *v13;
  const llvm::DataLayout *v14;
  llvm::UndefValue *result;
  unsigned __int8 *v16;
  const llvm::DataLayout *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  const llvm::DataLayout *v24;
  const llvm::DataLayout *v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;

  v12 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v12 == 60)
  {
    if ((*(_WORD *)(a1 + 18) & 0x380) == 0 && (a4 & 1) != 0)
      return 0;
    v13 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 - 32));
    if (!sub_1C4E9A3CC(v13, a2))
      return 0;
    if (llvm::CastInst::isBitOrNoopPointerCastable(*(llvm::CastInst **)a1, a3, a5, v14))
    {
      if (a6)
        *a6 = 1;
      return (llvm::UndefValue *)a1;
    }
    v12 = *(unsigned __int8 *)(a1 + 16);
  }
  result = 0;
  if (!a1 || v12 != 61)
    return result;
  if ((*(_WORD *)(a1 + 18) & 0x380) == 0 && (a4 & 1) != 0)
    return 0;
  v16 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*(llvm::Value **)(a1 - 32));
  if (!sub_1C4E9A3CC(v16, a2))
    return 0;
  if (a6)
    *a6 = 0;
  v18 = *(_QWORD *)(a1 - 64);
  if (llvm::CastInst::isBitOrNoopPointerCastable(*(llvm::CastInst **)v18, a3, a5, v17))
    return (llvm::UndefValue *)v18;
  sub_1C4768AD0((uint64_t)a5, *(_QWORD *)v18);
  v20 = v19;
  v22 = v21;
  sub_1C4768AD0((uint64_t)a5, (uint64_t)a3);
  v27 = v26;
  result = 0;
  v28 = v22 != 1 && v23 == 1;
  if (!v28 && v27 <= v20)
  {
    if (*(unsigned __int8 *)(v18 + 16) <= 0x14u)
      return llvm::ConstantFoldLoadFromConst((llvm::Type **)v18, (llvm::Constant ***)a3, (llvm::Type *)a5, v24, v25);
    return 0;
  }
  return result;
}

llvm::UndefValue *llvm::FindAvailableLoadedValue(llvm *this, llvm::LoadInst *a2, llvm::AAResults *a3, BOOL *a4)
{
  int v4;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  char v10;
  llvm::Type *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  llvm::UndefValue *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  llvm::UndefValue *v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  __int128 v40[3];
  char v41;
  __int128 v42;
  _OWORD v43[2];
  void *v44;
  uint64_t v45;
  _QWORD v46[8];

  v4 = (int)a4;
  v46[6] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40);
  v8 = (unsigned __int8 *)llvm::Value::stripPointerCasts(*((llvm::Value **)this - 4));
  v9 = *((unsigned __int8 *)this + 16);
  if (v9 == 60 || v9 == 61)
    v10 = (*((_WORD *)this + 9) & 0x380) != 0;
  else
    v10 = (v9 - 63) <= 2;
  if ((*((_WORD *)this + 9) & 0x301) != 0)
    return 0;
  v11 = *(llvm::Type **)this;
  v12 = *((_QWORD *)this + 5);
  v44 = v46;
  v45 = 0x600000000;
  v13 = (_QWORD *)(v12 + 40);
  v14 = (_QWORD *)*((_QWORD *)this + 3);
  if (v14 == (_QWORD *)(v12 + 40))
    goto LABEL_43;
  while (1)
  {
    if (v14)
      v15 = (uint64_t)(v14 - 3);
    else
      v15 = 0;
    if (sub_1C4D99D08(v15) || sub_1C509DDB0(v15))
      goto LABEL_16;
    if (!v4)
      goto LABEL_28;
    v16 = sub_1C4E9A560(v15, v8, v11, v10, (__int32 **)(v7 + 272), a3);
    if (v16)
      break;
    --v4;
    v17 = *(unsigned __int8 *)(v15 + 16) - 33;
    if (v17 <= 0x37)
    {
      if (((1 << (*(_BYTE *)(v15 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v18 = *(_QWORD *)(v15 + 64);
        if (!v18 || (*(_BYTE *)(v18 + 17) & 0x30) == 0)
        {
          v19 = *(_DWORD *)(v15 + 20);
          if (v19 < 0)
          {
            v30 = v15 - 32 * (v19 & 0x7FFFFFF);
            v33 = *(_QWORD *)(v30 - 8);
            v31 = v30 - 8;
            v32 = v33;
            if (v33)
            {
              v34 = -v32;
              while (1)
              {
                v35 = *(_DWORD *)(*(_QWORD *)(v31 + v34) + 8);
                v36 = v35 > 7;
                v37 = (1 << v35) & 0x83;
                if (v36 || v37 == 0)
                  break;
                v34 += 16;
                if (!v34)
                  goto LABEL_21;
              }
LABEL_25:
              v20 = v45;
              if (v45 >= (unint64_t)HIDWORD(v45))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v45 + 1, 8);
                v20 = v45;
              }
              *((_QWORD *)v44 + v20) = v15;
              LODWORD(v45) = v45 + 1;
              goto LABEL_16;
            }
          }
LABEL_21:
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v15, 45) & 1) == 0
            && (llvm::CallBase::hasFnAttrOnCalledFunction(v15, 44) & 1) == 0)
          {
            goto LABEL_25;
          }
        }
      }
      else if (v17 == 27)
      {
        if ((*(_WORD *)(v15 + 18) & 0x301) != 0)
          goto LABEL_25;
      }
      else if (((1 << (*(_BYTE *)(v15 + 16) - 33)) & 0x808001D0000010) != 0)
      {
        goto LABEL_25;
      }
    }
LABEL_16:
    v14 = (_QWORD *)*v14;
    if (v14 == v13)
    {
LABEL_28:
      v21 = 0;
      goto LABEL_29;
    }
  }
  v21 = v16;
  v23 = *((_QWORD *)this - 4);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40) + 272, *(_QWORD *)this);
  if (v25 == 1)
    v26 = -2;
  else
    v26 = (unint64_t)(v24 + 7) >> 3;
  llvm::Instruction::getAAMetadata((uint64_t ***)this, v43);
  *(_QWORD *)&v42 = v23;
  *((_QWORD *)&v42 + 1) = v26;
  if ((_DWORD)v45)
  {
    v27 = (uint64_t *)v44;
    v28 = 8 * v45;
    while (1)
    {
      v29 = *v27;
      v40[0] = v42;
      v40[1] = v43[0];
      v40[2] = v43[1];
      v41 = 1;
      if ((sub_1C4D90C64((uint64_t)a2, v29, v40) & 2) != 0)
        break;
      ++v27;
      v28 -= 8;
      if (!v28)
        goto LABEL_29;
    }
LABEL_43:
    v21 = 0;
  }
LABEL_29:
  if (v44 != v46)
    free(v44);
  return v21;
}

uint64_t llvm::canReplacePointersIfEqual(llvm *this, llvm::Value *a2, llvm::Value *a3, const llvm::DataLayout *a4, llvm::Instruction *a5)
{
  uint64_t v5;
  unsigned int PointerTypeSizeInBits;
  unint64_t v10;
  unint64_t v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  _BYTE v18[256];

  v5 = 1;
  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
  {
    PointerTypeSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits((uint64_t)a3, *(_QWORD *)this);
    v13 = PointerTypeSizeInBits;
    if (PointerTypeSizeInBits > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v12, 1, 0);
    }
    else
    {
      v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PointerTypeSizeInBits;
      if (!PointerTypeSizeInBits)
        LOBYTE(v10) = 0;
      v12 = v10 & 1;
    }
    if ((llvm::Constant::isNullValue(a2) & 1) == 0)
    {
      v14 = v18;
      v15 = v18;
      v16 = 32;
      v17 = 0;
      v5 = sub_1C4E99094((uint64_t)a2, 0, (llvm::APInt *)&v12, a3, (unint64_t *)a4, 0, 0, (llvm::SmallPtrSetImplBase *)&v14, 16);
      if (v15 != v14)
        free(v15);
    }
    if (v13 >= 0x41 && v12)
      MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  }
  return v5;
}

BOOL sub_1C4E9AB50(llvm::Value *a1, uint64_t *a2, unsigned __int8 a3, const llvm::DataLayout *a4)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int v18;
  unint64_t v20;
  int v21;
  unint64_t v23;
  unsigned int v24;
  void *__src;
  unsigned int v26;

  llvm::Value::getPointerAlignment(a1, a4);
  v7 = v6;
  v8 = *((_DWORD *)a2 + 2);
  v9 = 1 << a3;
  v26 = v8;
  if (v8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, v9, 0);
    v8 = v26;
  }
  else
  {
    v10 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
    if (!v8)
      v10 = 0;
    __src = (void *)(v10 & v9);
  }
  if (a3 <= v7)
  {
    v24 = v8;
    if (v8 > 0x40)
    {
      v12 = (void *)operator new[]();
      memcpy(v12, __src, (((unint64_t)v8 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v12 = __src;
    }
    v23 = (unint64_t)v12;
    llvm::APInt::operator-=((uint64_t)&v23, 1uLL);
    v13 = v24;
    v14 = v23;
    v24 = 0;
    if (v13 >= 0x41)
    {
      v15 = 0;
      v16 = *a2;
      v17 = (unint64_t)(v13 + 63) >> 6;
      do
      {
        *(_QWORD *)(v14 + v15) &= *(_QWORD *)(v16 + v15);
        v15 += 8;
      }
      while (8 * v17 != v15);
      v18 = 0;
      do
      {
        if (v17-- < 1)
          break;
        v20 = *(_QWORD *)(v14 + 8 * v17);
        v18 += __clz(v20);
      }
      while (!v20);
      v21 = v13 | 0xFFFFFFC0;
      if ((v13 & 0x3F) == 0)
        v21 = 0;
      v11 = v18 + v21 == (_DWORD)v13;
      if (v14)
      {
        MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
        if (v24 >= 0x41)
        {
          if (v23)
            MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
        }
      }
    }
    else
    {
      v11 = (*a2 & v23) == 0;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v8 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return v11;
}

uint64_t sub_1C4E9AD34(uint64_t a1, __int128 *a2, llvm *a3, const llvm::DominatorTree *a4)
{
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;

  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  result = llvm::isValidAssumeForContext(a3, **(const llvm::Instruction ***)a1, 0, a4);
  if (!(_DWORD)result)
    return result;
  if ((_DWORD)v14 == 76)
  {
    v6 = (uint64_t *)(a1 + 16);
    goto LABEL_6;
  }
  if ((_DWORD)v14 == 74)
  {
    v6 = (uint64_t *)(a1 + 8);
LABEL_6:
    v7 = *v6;
    v8 = &v14;
    if (*(_QWORD *)(v7 + 8) >= *((_QWORD *)&v14 + 1))
      v8 = (__int128 *)v7;
    v9 = *((_QWORD *)v8 + 2);
    *(_OWORD *)v7 = *v8;
    *(_QWORD *)(v7 + 16) = v9;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (!*(_DWORD *)v10)
    return 0;
  v11 = *(_QWORD *)(a1 + 16);
  if (!*(_DWORD *)v11 || !(*(_QWORD *)(v10 + 8) >> **(_BYTE **)(a1 + 24)))
    return 0;
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(unint64_t **)(a1 + 32);
  if (*((_DWORD *)v13 + 2) >= 0x41u)
    v13 = (unint64_t *)*v13;
  return v12 >= *v13;
}

BOOL sub_1C4E9AE24(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 122;
}

uint64_t sub_1C4E9AE70()
{
  __int128 v1;
  int v2;
  int v3;
  int *v4;

  v4 = &v3;
  v2 = 1;
  v3 = 6;
  *(_QWORD *)&v1 = "Use this to specify the default maximum number of instructions to scan backward from a given instruct"
                   "ion, when searching for available loaded value";
  *((_QWORD *)&v1 + 1) = 147;
  sub_1C4DB1928((uint64_t)&llvm::DefMaxInstsToScan, "available-load-scan-limit", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &llvm::DefMaxInstsToScan, &dword_1C475E000);
}

_QWORD *sub_1C4E9AEF0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E8138D38;
  v2 = a1 + 20;
  v3 = (_QWORD *)a1[23];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      return sub_1C47A80D0(a1);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  return sub_1C47A80D0(a1);
}

uint64_t llvm::stripIntegerCast(uint64_t result)
{
  unsigned int v1;

  if (result)
  {
    v1 = *(unsigned __int8 *)(result + 16);
    if (v1 >= 0x1C && v1 - 79 >= 0xFFFFFFF3 && *(_BYTE *)(**(_QWORD **)(result - 32) + 8) == 13)
      return *(_QWORD *)(result - 32);
  }
  return result;
}

uint64_t llvm::replaceSymbolicStrideSCEV(int8x16_t *a1, uint64_t a2, llvm::Value *a3)
{
  uint64_t SCEV;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t SCEVIter;
  unint64_t Constant;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t ComparePredicate;
  uint64_t v27;
  llvm::Value *v28;

  SCEV = llvm::PredicatedScalarEvolution::getSCEV(a1, a3);
  v27 = 0;
  v28 = a3;
  if (!sub_1C4E5818C((uint64_t *)a2, &v28, &v27)
    || v27 == *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16))
  {
    return SCEV;
  }
  v8 = *(_QWORD *)(v27 + 8);
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (v8)
    v10 = v9 >= 0x1C;
  else
    v10 = 0;
  v11 = v10 && v9 - 79 >= 0xFFFFFFF3;
  if (v11 && *(_BYTE *)(**(_QWORD **)(v8 - 32) + 8) == 13)
    v8 = *(_QWORD *)(v8 - 32);
  v12 = a1[5].i64[1];
  v13 = *(_QWORD *)(v12 + 104);
  v14 = *(_DWORD *)(v12 + 120);
  if (v14)
  {
    v15 = v14 - 1;
    v16 = (v14 - 1) & ((v8 >> 4) ^ (v8 >> 9));
    v17 = v13 + 48 * v16;
    v18 = *(_QWORD *)(v17 + 24);
    if (v18 == v8)
      goto LABEL_21;
    v19 = 1;
    while (v18 != -4096)
    {
      v20 = v16 + v19++;
      v16 = v20 & v15;
      v17 = v13 + 48 * (v20 & v15);
      v18 = *(_QWORD *)(v17 + 24);
      if (v18 == v8)
        goto LABEL_21;
    }
  }
  v17 = v13 + 48 * v14;
LABEL_21:
  if (v17 == v13 + 48 * v14 || (SCEVIter = *(_QWORD *)(v17 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a1[5].i64[1], v8);
  Constant = llvm::ScalarEvolution::getConstant((llvm::ScalarEvolution *)v12, *(llvm::Type **)v8, 1, 0);
  if (SCEVIter)
    v23 = SCEVIter - 32;
  else
    v23 = 0;
  v24 = v23 + 32;
  if (SCEVIter)
    v25 = v24;
  else
    v25 = 0;
  ComparePredicate = llvm::ScalarEvolution::getComparePredicate(v12, 32, v25, Constant);
  llvm::PredicatedScalarEvolution::addPredicate(a1, ComparePredicate);
  return llvm::PredicatedScalarEvolution::getSCEV(a1, a3);
}

void llvm::RuntimePointerChecking::insert(uint64_t a1, const llvm::Loop *a2, llvm::Value *a3, llvm::Type *a4, char a5, int a6, int a7, uint64_t a8, int8x16_t *a9)
{
  const llvm::SCEV *v13;
  uint64_t *v14;
  uint64_t UMinExpr;
  const llvm::SCEV *UMaxExpr;
  const llvm::SCEV *v17;
  const llvm::SCEV **v18;
  const llvm::SCEV *v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Type *v29;
  unint64_t StoreSizeOfExpr;
  uint64_t AddExpr;
  void **v32;
  uint64_t v33;
  char *v34;
  int v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v46;
  uint64_t *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  int32x2_t *v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t __n;
  void *v73;
  uint64_t v74;
  _QWORD v75[4];

  v75[3] = *MEMORY[0x1E0C80C00];
  v13 = (const llvm::SCEV *)llvm::replaceSymbolicStrideSCEV(a9, a8, a3);
  v14 = (uint64_t *)a9[5].i64[1];
  UMinExpr = (uint64_t)v13;
  UMaxExpr = v13;
  if (llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)v14, v13, a2) != 1)
  {
    if (*((_WORD *)v13 + 12) == 7)
      v17 = v13;
    else
      v17 = 0;
    llvm::PredicatedScalarEvolution::getBackedgeTakenCount(a9);
    v18 = (const llvm::SCEV **)*((_QWORD *)v17 + 4);
    UMaxExpr = *v18;
    v19 = (const llvm::SCEV *)llvm::SCEVAddRecExpr::evaluateAtIteration((uint64_t)v18, *((_QWORD *)v17 + 5));
    v20 = *((_QWORD *)v17 + 5);
    if (v20 == 2)
    {
      v21 = *(_QWORD *)(*((_QWORD *)v17 + 4) + 8);
    }
    else
    {
      v68 = *((_QWORD *)v17 + 4);
      v73 = v75;
      v74 = 0x300000000;
      __n = 8 * v20 - 8;
      if ((unint64_t)__n >= 0x19)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v73, (uint64_t)v75, __n >> 3, 8);
        v67 = v74;
      }
      else
      {
        v67 = 0;
      }
      if (v20 != 1)
      {
        memcpy((char *)v73 + 8 * v67, (const void *)(v68 + 8), __n);
        v67 = v74;
      }
      LODWORD(v74) = v67 + ((unint64_t)__n >> 3);
      v21 = sub_1C618AB20(v14, (uint64_t)&v73, *((uint64_t ***)v17 + 6));
      if (v73 != v75)
        free(v73);
    }
    if (v21)
      v22 = *(unsigned __int16 *)(v21 + 24) == 0;
    else
      v22 = 0;
    if (v22)
    {
      v23 = *(_QWORD *)(v21 + 32);
      v24 = (uint64_t *)(v23 + 24);
      v25 = *(_DWORD *)(v23 + 32);
      v26 = v25 - 1;
      if (v25 >= 0x41)
        v24 = (uint64_t *)(*v24 + 8 * (v26 >> 6));
      v27 = 1 << v26;
      v28 = *v24;
      if ((v28 & v27) != 0)
        UMinExpr = (uint64_t)v19;
      else
        UMinExpr = (uint64_t)UMaxExpr;
      if ((v28 & v27) == 0)
        UMaxExpr = v19;
    }
    else
    {
      UMinExpr = llvm::ScalarEvolution::getUMinExpr((llvm::ScalarEvolution *)v14, UMaxExpr, v19, 0);
      UMaxExpr = (const llvm::SCEV *)llvm::ScalarEvolution::getUMaxExpr((llvm::ScalarEvolution *)v14, **((const llvm::SCEV ***)v17 + 4), v19);
    }
  }
  llvm::DataLayout::getIndexType((llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(**((_QWORD **)a2 + 4) + 56) + 40) + 272), *(llvm::Type **)a3);
  StoreSizeOfExpr = llvm::ScalarEvolution::getStoreSizeOfExpr((llvm::ScalarEvolution *)v14, v29, a4);
  v73 = v75;
  v75[0] = UMaxExpr;
  v75[1] = StoreSizeOfExpr;
  v74 = 0x200000002;
  AddExpr = llvm::ScalarEvolution::getAddExpr((uint64_t)v14, (uint64_t)&v73, 0, 0);
  if (v73 != v75)
    free(v73);
  v32 = (void **)(a1 + 8);
  v33 = *(unsigned int *)(a1 + 16);
  if (v33 >= *(_DWORD *)(a1 + 20))
  {
    v73 = 0;
    v36 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 8, 0, 64, (unint64_t *)&v73);
    v37 = &v36[64 * (unint64_t)*(unsigned int *)(a1 + 16)];
    *(_OWORD *)v37 = xmmword_1C85F4040;
    *((_QWORD *)v37 + 2) = a3;
    if (((unint64_t)a3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v37);
    *((_QWORD *)v37 + 3) = UMinExpr;
    *((_QWORD *)v37 + 4) = AddExpr;
    v37[40] = a5;
    *((_DWORD *)v37 + 11) = a6;
    *((_DWORD *)v37 + 12) = a7;
    *((_QWORD *)v37 + 7) = v13;
    v38 = *(char **)(a1 + 8);
    v39 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v39)
    {
      v40 = v38 + 24;
      v41 = (unint64_t)(v36 + 8);
      v42 = v39 << 6;
      v43 = v36;
      do
      {
        *(_QWORD *)v43 = 6;
        *((_QWORD *)v43 + 1) = 0;
        v44 = *((_QWORD *)v40 - 1);
        *((_QWORD *)v43 + 2) = v44;
        if (v44 != -8192 && v44 != -4096 && v44 != 0)
        {
          v46 = *((_QWORD *)v40 - 3) & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)v43 + 1) = *(_QWORD *)v46;
          *(_QWORD *)v46 = v43;
          *(_QWORD *)v43 = v46 | 6;
          v47 = (uint64_t *)*((_QWORD *)v43 + 1);
          if (v47)
            *v47 = *v47 & 7 | v41;
        }
        v48 = *(_OWORD *)v40;
        v49 = *((_OWORD *)v40 + 1);
        *((_QWORD *)v43 + 7) = *((_QWORD *)v40 + 4);
        *(_OWORD *)(v43 + 40) = v49;
        *(_OWORD *)(v43 + 24) = v48;
        v43 += 64;
        v40 += 64;
        v41 += 64;
        v42 -= 64;
      }
      while (v42);
      v38 = *(char **)(a1 + 8);
      v50 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v50)
      {
        v51 = &v38[64 * v50];
        do
        {
          v52 = *((_QWORD *)v51 - 6);
          if (v52 != -8192 && v52 != -4096 && v52 != 0)
          {
            v54 = *((_QWORD *)v51 - 8) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v54 = *((_QWORD *)v51 - 7);
            v55 = (unint64_t *)*((_QWORD *)v51 - 7);
            if (v55)
            {
              *v55 = *v55 & 7 | v54;
            }
            else
            {
              v56 = *((_QWORD *)v51 - 6);
              v57 = ***(int32x2_t ****)v56;
              v58 = (unint64_t)v57[303];
              if (v58 <= v54)
              {
                v59 = v57[305].u32[0];
                if (v58 + 16 * v59 > v54)
                {
                  v60 = v59 - 1;
                  LODWORD(v61) = v60 & ((v56 >> 4) ^ (v56 >> 9));
                  v62 = (uint64_t *)(v58 + 16 * v61);
                  v63 = *v62;
                  if (v56 == *v62)
                  {
LABEL_53:
                    *v62 = -8192;
                    v57[304] = vadd_s32(v57[304], (int32x2_t)0x1FFFFFFFFLL);
                    v56 = *((_QWORD *)v51 - 6);
                  }
                  else
                  {
                    v64 = 1;
                    while (v63 != -4096)
                    {
                      v65 = v61 + v64++;
                      v61 = v65 & v60;
                      v63 = *(_QWORD *)(v58 + 16 * v61);
                      if (v56 == v63)
                      {
                        v62 = (uint64_t *)(v58 + 16 * v61);
                        goto LABEL_53;
                      }
                    }
                  }
                  *(_BYTE *)(v56 + 17) &= ~1u;
                }
              }
            }
          }
          v51 -= 64;
        }
        while (v51 != v38);
        v38 = (char *)*v32;
      }
    }
    v66 = (int)v73;
    if (v38 != (char *)(a1 + 24))
      free(v38);
    *(_QWORD *)(a1 + 8) = v36;
    v35 = *(_DWORD *)(a1 + 16) + 1;
    *(_DWORD *)(a1 + 20) = v66;
  }
  else
  {
    v34 = (char *)*v32 + 64 * v33;
    *(_OWORD *)v34 = xmmword_1C85F4040;
    *((_QWORD *)v34 + 2) = a3;
    if (((unint64_t)a3 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v34);
      LODWORD(v33) = *(_DWORD *)(a1 + 16);
    }
    *((_QWORD *)v34 + 3) = UMinExpr;
    *((_QWORD *)v34 + 4) = AddExpr;
    v34[40] = a5;
    *((_DWORD *)v34 + 11) = a6;
    *((_DWORD *)v34 + 12) = a7;
    *((_QWORD *)v34 + 7) = v13;
    v35 = v33 + 1;
  }
  *(_DWORD *)(a1 + 16) = v35;
}

void llvm::RuntimePointerChecking::tryToCreateDiffCheck(llvm::RuntimePointerChecking *this, const llvm::RuntimeCheckingPtrGroup *a2, const llvm::RuntimeCheckingPtrGroup *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _BYTE *v34;
  uint64_t v35;
  llvm::DataLayout *v36;
  unint64_t v37;
  int v38;
  int v39;
  const char *v40;
  unint64_t v41;
  int v42;
  int v43;
  _QWORD *v44;
  int v45;
  llvm::Type *v46;
  uint64_t v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  int64_t v53;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  _DWORD *v70;
  int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  llvm::RuntimePointerChecking *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  _QWORD v88[5];

  v88[3] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 360))
    return;
  if (*((_DWORD *)a2 + 6) != 1 || *((_DWORD *)a3 + 6) != 1)
  {
    *((_BYTE *)this + 360) = 0;
    return;
  }
  v5 = *((_QWORD *)this + 1);
  v6 = v5 + ((unint64_t)**((unsigned int **)a2 + 2) << 6);
  v7 = **((unsigned int **)a3 + 2);
  v9 = *((_QWORD *)this + 33);
  v10 = *(_QWORD *)(v6 + 16);
  v11 = *(unsigned __int8 *)(v6 + 40);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(_DWORD *)(v9 + 32);
  sub_1C4E9BD3C(v12, v13, v10, *(_BYTE *)(v6 + 40) == 0);
  if (v14
    || (v15 = v5 + (v7 << 6),
        v16 = *(unsigned __int8 *)(v15 + 40),
        v81 = *(_QWORD *)(v15 + 16),
        sub_1C4E9BD3C(v12, v13, v81, *(_BYTE *)(v15 + 40) == 0),
        v17))
  {
    *((_BYTE *)this + 360) = 0;
    return;
  }
  v80 = this;
  v18 = (_DWORD *)sub_1C4E9BD3C(v12, v13, v10, v11 != 0);
  v20 = v19;
  v21 = (_DWORD *)sub_1C4E9BD3C(v12, v13, v81, v16 != 0);
  v23 = v20 == 1 && v22 == 1;
  if (!v23
    || (*v21 >= *v18 ? (v24 = v15) : (v24 = v6),
        *v21 >= *v18 ? (v25 = v6) : (v25 = v15),
        *(_WORD *)(*(_QWORD *)(v25 + 56) + 24) != 7 ? (v26 = 0) : (v26 = *(_QWORD *)(v25 + 56)),
        *(_WORD *)(*(_QWORD *)(v24 + 56) + 24) != 7 ? (v27 = 0) : (v27 = *(_QWORD *)(v24 + 56)),
        v26 ? (v28 = v27 == 0) : (v28 = 1),
        v28 || (v29 = *(_QWORD *)(v26 + 48), v29 != *(_QWORD *)(v9 + 8)) || *(_QWORD *)(v27 + 48) != v29))
  {
    *((_BYTE *)v80 + 360) = 0;
    return;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v29 + 32) + 56) + 40);
  llvm::MemoryDepChecker::getInstructionsForAccess((unsigned int *)v9, *(_QWORD *)(v25 + 16), *(unsigned __int8 *)(v25 + 40), (uint64_t)&v84);
  llvm::MemoryDepChecker::getInstructionsForAccess(*((unsigned int **)v80 + 33), *(_QWORD *)(v24 + 16), *(unsigned __int8 *)(v24 + 40), (uint64_t)&v82);
  v31 = *(_QWORD *)v84;
  if (!*(_QWORD *)v84 || *(_BYTE *)(v31 + 16) != 60)
    v31 = *(_QWORD *)(v31 - 64);
  v32 = *(_QWORD *)v31;
  v33 = (uint64_t *)v82;
  v34 = *(_BYTE **)v82;
  if (!*(_QWORD *)v82 || v34[16] != 60)
    v34 = (_BYTE *)*((_QWORD *)v34 - 8);
  if (*(_BYTE *)(v32 + 8) != 19)
  {
    v35 = *(_QWORD *)v34;
    if (*(_BYTE *)(*(_QWORD *)v34 + 8) != 19)
    {
      v36 = (llvm::DataLayout *)(v30 + 272);
      v37 = sub_1C4E3D148((uint64_t)v36, v32);
      v39 = v38;
      v41 = sub_1C4E3D148((uint64_t)v36, v35);
      v42 = (int)v40;
      if (v39 == 1)
      if (v42 == 1)
      if (v37 >= v41)
        v43 = v39;
      else
        v43 = v42;
      if (v43 == 1)
      if (v37 <= v41)
        LODWORD(v37) = v41;
      v44 = ***(_QWORD ****)(v25 + 16);
      v45 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v36, *((_DWORD *)a2 + 10)) + 4);
      LODWORD(v86) = v45;
      if (v45 <= 63)
      {
        if (v45 <= 31)
        {
          switch(v45)
          {
            case 16:
              v46 = (llvm::Type *)(*v44 + 1936);
              goto LABEL_62;
            case 8:
              v46 = (llvm::Type *)(*v44 + 1912);
              goto LABEL_62;
            case 1:
              v46 = (llvm::Type *)(*v44 + 1888);
              goto LABEL_62;
          }
        }
        else if (v45 == 32)
        {
          v46 = (llvm::Type *)(*v44 + 1960);
          goto LABEL_62;
        }
      }
      else
      {
        if (v45 == 64)
        {
          v46 = (llvm::Type *)(*v44 + 1984);
          goto LABEL_62;
        }
        if (v45 == 128)
        {
          v46 = (llvm::Type *)(*v44 + 2008);
          goto LABEL_62;
        }
      }
      v69 = sub_1C5270984(*v44 + 2168, &v86);
      v46 = (llvm::Type *)*((_QWORD *)v69 + 1);
      if (!v46)
      {
        v70 = v69;
        v46 = (llvm::Type *)sub_1C484358C(*v44 + 2040, 24, 3);
        v71 = (int)v86;
        *(_QWORD *)v46 = v44;
        *((_QWORD *)v46 + 2) = 0;
        *((_QWORD *)v46 + 1) = (v71 << 8) | 0xDu;
        *((_QWORD *)v70 + 1) = v46;
      }
LABEL_62:
      v47 = *(_QWORD *)(v27 + 40);
      if (v47 == 2)
      {
        v48 = *(_QWORD *)(*(_QWORD *)(v27 + 32) + 8);
      }
      else
      {
        v72 = (uint64_t *)*((_QWORD *)v80 + 34);
        v73 = *(_QWORD *)(v27 + 32);
        v86 = v88;
        v87 = 0x300000000;
        v74 = 8 * v47 - 8;
        if ((unint64_t)v74 >= 0x19)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v74 >> 3, 8);
          v75 = v87;
        }
        else
        {
          v75 = 0;
        }
        if (v47 != 1)
        {
          memcpy((char *)v86 + 8 * v75, (const void *)(v73 + 8), 8 * v47 - 8);
          v75 = v87;
        }
        LODWORD(v87) = v75 + ((unint64_t)v74 >> 3);
        v48 = sub_1C618AB20(v72, (uint64_t)&v86, *(uint64_t ***)(v27 + 48));
        if (v86 != v88)
          free(v86);
      }
      if (v48)
        v49 = *(unsigned __int16 *)(v48 + 24) == 0;
      else
        v49 = 0;
      if (!v49)
        goto LABEL_72;
      v50 = *(_QWORD *)(v26 + 40);
      if (v50 == 2)
      {
        v51 = *(_QWORD *)(*(_QWORD *)(v26 + 32) + 8);
      }
      else
      {
        v76 = (uint64_t *)*((_QWORD *)v80 + 34);
        v77 = *(_QWORD *)(v26 + 32);
        v86 = v88;
        v87 = 0x300000000;
        v78 = 8 * v50 - 8;
        if ((unint64_t)v78 >= 0x19)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v78 >> 3, 8);
          v79 = v87;
        }
        else
        {
          v79 = 0;
        }
        if (v50 != 1)
        {
          memcpy((char *)v86 + 8 * v79, (const void *)(v77 + 8), 8 * v50 - 8);
          v79 = v87;
        }
        LODWORD(v87) = v79 + ((unint64_t)v78 >> 3);
        v51 = sub_1C618AB20(v76, (uint64_t)&v86, *(uint64_t ***)(v26 + 48));
        if (v86 != v88)
          free(v86);
      }
      if (v48 != v51)
        goto LABEL_72;
      sub_1C4DA6CE8((const void **)(*(_QWORD *)(v48 + 32) + 24), (uint64_t)&v86);
      if (v87 >= 0x41)
      {
        v52 = 0;
        v53 = ((unint64_t)v87 + 63) >> 6;
        do
        {
          if (v53-- < 1)
            break;
          v55 = *((_QWORD *)v86 + v53);
          v52 += __clz(v55);
        }
        while (!v55);
        v56 = v87 | 0xFFFFFFC0;
        if ((v87 & 0x3F) == 0)
          v56 = 0;
        if ((v87 - v52 - v56) >= 0x41)
        {
          if (v86)
            MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
          goto LABEL_72;
        }
        v57 = *(_QWORD *)v86;
        MEMORY[0x1CAA32F9C]();
        if (v57 != v37)
        {
LABEL_72:
          *((_BYTE *)v80 + 360) = 0;
LABEL_73:
          v33 = (uint64_t *)v82;
          goto LABEL_74;
        }
      }
      else if (v86 != (void *)v37)
      {
        goto LABEL_72;
      }
      v58 = *(_QWORD *)(v48 + 32);
      v59 = (uint64_t *)(v58 + 24);
      v60 = *(_DWORD *)(v58 + 32);
      v61 = v60 - 1;
      if (v60 >= 0x41)
        v59 = (uint64_t *)(*v59 + 8 * (v61 >> 6));
      v62 = 1 << v61;
      v63 = *v59;
      if ((v63 & v62) != 0)
        v64 = v27;
      else
        v64 = v26;
      if ((v63 & v62) != 0)
        v65 = v26;
      else
        v65 = v27;
      llvm::ScalarEvolution::getPtrToIntExpr(*((llvm::ScalarEvolution **)v80 + 34), **(const llvm::SCEV ***)(v65 + 32), v46);
      v67 = v66;
      llvm::ScalarEvolution::getPtrToIntExpr(*((llvm::ScalarEvolution **)v80 + 34), **(const llvm::SCEV ***)(v64 + 32), v46);
      if (*(_WORD *)(v67 + 24) != 15 && *(_WORD *)(v68 + 24) != 15)
      {
        sub_1C619DDB0((uint64_t)v80 + 368, v68, v67, v37);
        goto LABEL_73;
      }
      goto LABEL_72;
    }
  }
LABEL_74:
  if (v33 != &v83)
    free(v33);
  if (v84 != &v85)
    free(v84);
}

uint64_t sub_1C4E9BD3C(uint64_t a1, unsigned int a2, unint64_t a3, int a4)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v4 = 4;
  if (!a4)
    v4 = 0;
  if (a2)
  {
    v5 = a3 & 0xFFFFFFFFFFFFFFFBLL | v4;
    v6 = a2 - 1;
    v7 = (uint64_t *)(a1 + 32 * ((a2 - 1) & (v5 ^ (a3 >> 9))));
    v8 = *v7;
    if (v5 == *v7)
      goto LABEL_10;
    v9 = 1;
    LODWORD(v10) = v6 & (v5 ^ (a3 >> 9));
    while (v8 != -4)
    {
      v11 = v10 + v9++;
      v10 = v11 & v6;
      v8 = *(_QWORD *)(a1 + 32 * v10);
      if (v5 == v8)
      {
        v7 = (uint64_t *)(a1 + 32 * v10);
        goto LABEL_10;
      }
    }
  }
  v7 = (uint64_t *)(a1 + 32 * a2);
LABEL_10:
  if (v7 == (uint64_t *)(a1 + 32 * a2))
    return 0;
  else
    return v7[1];
}

unsigned int *llvm::MemoryDepChecker::getInstructionsForAccess@<X0>(unsigned int *this@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;

  v4 = this;
  if (a3)
    v6 = 4;
  else
    v6 = 0;
  v7 = *((_QWORD *)this + 2);
  v8 = this[8];
  if ((_DWORD)v8)
  {
    v9 = a2 & 0xFFFFFFFFFFFFFFFBLL | v6;
    v10 = v8 - 1;
    v11 = (uint64_t *)(v7 + 32 * (((_DWORD)v8 - 1) & (v9 ^ (a2 >> 9))));
    v12 = *v11;
    if (v9 == *v11)
      goto LABEL_11;
    v13 = 1;
    LODWORD(v14) = v10 & (v9 ^ (a2 >> 9));
    while (v12 != -4)
    {
      v15 = v14 + v13++;
      v14 = v15 & v10;
      v12 = *(_QWORD *)(v7 + 32 * v14);
      if (v9 == v12)
      {
        v11 = (uint64_t *)(v7 + 32 * v14);
        goto LABEL_11;
      }
    }
  }
  v11 = (uint64_t *)(v7 + 32 * v8);
LABEL_11:
  *(_QWORD *)a4 = a4 + 16;
  *(_QWORD *)(a4 + 8) = 0x400000000;
  v16 = (unsigned int *)v11[1];
  v17 = (unsigned int *)v11[2];
  if (v16 != v17)
  {
    v18 = 0;
    do
    {
      v19 = *(_QWORD *)(v4[5] + 8 * *v16);
      if (v18 >= *(_DWORD *)(a4 + 12))
      {
        this = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v18 + 1, 8);
        v18 = *(_DWORD *)(a4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a4 + 8 * v18) = v19;
      v18 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v18;
      ++v16;
    }
    while (v16 != v17);
  }
  return this;
}

void llvm::RuntimePointerChecking::generateChecks(llvm::RuntimePointerChecking *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v11 = a2 + 16;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v3 = *((unsigned int *)this + 40);
  if ((_DWORD)v3)
  {
    v5 = 0;
    v6 = 1;
    v7 = 48;
    do
    {
      v13 = v7;
      v14 = v6;
      v12 = v5 + 1;
      if (v5 + 1 < v3)
      {
        do
        {
          v8 = *((_QWORD *)this + 19);
          if (llvm::RuntimePointerChecking::needsChecking((uint64_t)this, v8 + 48 * v5, v8 + v7))
          {
            llvm::RuntimePointerChecking::tryToCreateDiffCheck(this, (const llvm::RuntimeCheckingPtrGroup *)(v8 + 48 * v5), (const llvm::RuntimeCheckingPtrGroup *)(v8 + v7));
            v9 = *(unsigned int *)(a2 + 8);
            if (v9 >= *(unsigned int *)(a2 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v11, v9 + 1, 16);
              v9 = *(unsigned int *)(a2 + 8);
            }
            v10 = (_QWORD *)(*(_QWORD *)a2 + 16 * v9);
            *v10 = v8 + 48 * v5;
            v10[1] = v7 + v8;
            ++*(_DWORD *)(a2 + 8);
            v3 = *((unsigned int *)this + 40);
          }
          ++v6;
          v7 += 48;
        }
        while (v6 < v3);
      }
      v6 = v14 + 1;
      v7 = v13 + 48;
      ++v5;
    }
    while (v3 > v12);
  }
}

uint64_t llvm::RuntimePointerChecking::needsChecking(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  v3 = *(unsigned int *)(a2 + 24);
  if (!(_DWORD)v3)
    return 0;
  v4 = 0;
  v5 = *(unsigned int *)(a3 + 24);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(unsigned int **)(a3 + 16);
  while (!(_DWORD)v5)
  {
LABEL_9:
    if (++v4 == v3)
      return 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 + ((unint64_t)*(unsigned int *)(v6 + 4 * v4) << 6);
  v10 = *(unsigned __int8 *)(v9 + 40);
  v11 = (_DWORD *)(v9 + 44);
  v12 = (_DWORD *)(v9 + 48);
  v13 = v7;
  v14 = v5;
  while (1)
  {
    v16 = *v13++;
    v15 = v16;
    v17 = v8 + ((unint64_t)v16 << 6);
    if (v10 | *(unsigned __int8 *)(v17 + 40))
    {
      if (*v11 != *(_DWORD *)(v17 + 44) && *v12 == *(_DWORD *)(v8 + (v15 << 6) + 48))
        return 1;
    }
    if (!--v14)
      goto LABEL_9;
  }
}

void llvm::RuntimePointerChecking::groupChecks(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *i;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int64_t v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  llvm::RuntimeCheckingPtrGroup *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  char v51;
  llvm::RuntimeCheckingPtrGroup *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int v62;
  _QWORD v63[2];
  unsigned int v64;
  int8x16_t v65;
  void *v66;
  uint64_t v67;
  _DWORD v68[4];
  llvm::RuntimeCheckingPtrGroup *v69[2];
  void *v70;
  uint64_t v71;
  _DWORD v72[22];
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 152);
  v61 = a1 + 152;
  v7 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v7)
  {
    v8 = 48 * v7;
    do
    {
      v9 = *(void **)(v6 + v8 - 32);
      if ((void *)(v6 + v8 - 16) != v9)
        free(v9);
      v8 -= 48;
    }
    while (v8);
  }
  *(_DWORD *)(a1 + 160) = 0;
  if ((a3 & 1) != 0)
  {
    v63[0] = 0;
    v63[1] = 0;
    v64 = 0;
    if (*(_DWORD *)(a1 + 16))
    {
      v10 = 0;
      v11 = 16;
      do
      {
        v69[0] = *(llvm::RuntimeCheckingPtrGroup **)(*(_QWORD *)(a1 + 8) + v11);
        *((_DWORD *)sub_1C4EA30AC((uint64_t)v63, (uint64_t *)v69) + 2) = v10++;
        v12 = *(unsigned int *)(a1 + 16);
        v11 += 64;
      }
      while (v10 < v12);
    }
    else
    {
      v12 = 0;
    }
    v73 = &v75;
    v74 = 0x200000000;
    v77 = 0;
    v78 = 0;
    v76 = &v77;
    if (v12)
    {
      v18 = 0;
      v19 = 0;
      v60 = (_QWORD *)(a2 + 8);
      while (1)
      {
        if (v78)
        {
          for (i = v77; i; i = (_QWORD *)*i)
          {
            v21 = *((unsigned int *)i + 7);
            if (v18 >= v21)
            {
              if (v18 <= v21)
                goto LABEL_63;
              ++i;
            }
          }
        }
        else if ((_DWORD)v74)
        {
          v22 = v73;
          v23 = 4 * v74;
          while (v18 != *(_DWORD *)v22)
          {
            v22 = (uint64_t *)((char *)v22 + 4);
            v23 -= 4;
            if (!v23)
              goto LABEL_35;
          }
          if (v23)
            goto LABEL_63;
        }
LABEL_35:
        v24 = *(_QWORD *)(a1 + 8) + (v18 << 6);
        v25 = *(_QWORD *)(v24 + 16);
        v26 = *(unsigned __int8 *)(v24 + 40);
        v69[0] = (llvm::RuntimeCheckingPtrGroup *)&v70;
        v69[1] = (llvm::RuntimeCheckingPtrGroup *)0x200000000;
        v27 = (_QWORD *)*v60;
        if (*v60)
        {
          v28 = v25 & 0xFFFFFFFFFFFFFFFBLL | (4 * v26);
          v29 = (_QWORD *)*v60;
          v30 = v60;
          do
          {
            v31 = v29[6];
            v32 = v31 < v28;
            if (v31 >= v28)
              v33 = v29;
            else
              v33 = v29 + 1;
            if (!v32)
              v30 = v29;
            v29 = (_QWORD *)*v33;
          }
          while (*v33);
          if (v30 == v60 || v28 < v30[6])
          {
            v34 = 0;
            if (v27)
              goto LABEL_48;
          }
          else
          {
            v34 = sub_1C4EA2500((uint64_t)(v30 + 4));
            v27 = (_QWORD *)*v60;
            if (*v60)
            {
LABEL_48:
              v35 = *(_QWORD *)(v34 + 16);
              v36 = v60;
              do
              {
                v37 = v27[6];
                v38 = v37 < v35;
                if (v37 >= v35)
                  v39 = v27;
                else
                  v39 = v27 + 1;
                if (!v38)
                  v36 = v27;
                v27 = (_QWORD *)*v39;
              }
              while (*v39);
              if (v36 != v60 && v35 >= v36[6])
                goto LABEL_58;
            }
          }
        }
        v36 = v60;
LABEL_58:
        if ((v36[5] & 1) != 0)
        {
          v42 = (unint64_t)(v36 + 4);
          do
          {
            if (v64)
            {
              v43 = *(_QWORD *)(v42 + 16) & 0xFFFFFFFFFFFFFFF8;
              LODWORD(v44) = ((v43 >> 4) ^ (v43 >> 9)) & (v64 - 1);
              v45 = v63[0] + 16 * v44;
              v46 = *(_QWORD *)v45;
              if (*(_QWORD *)v45 != v43)
              {
                v47 = 1;
                while (v46 != -4096)
                {
                  v48 = v44 + v47++;
                  v44 = v48 & (v64 - 1);
                  v46 = *(_QWORD *)(v63[0] + 16 * v44);
                  if (v46 == v43)
                  {
                    v45 = v63[0] + 16 * v44;
                    goto LABEL_73;
                  }
                }
                v45 = v63[0] + 16 * v64;
              }
            }
            else
            {
              v45 = v63[0];
            }
LABEL_73:
            v62 = *(_DWORD *)(v45 + 8);
            sub_1C4778DC4((uint64_t)&v73, &v62);
            if (!LODWORD(v69[1]))
              goto LABEL_81;
            v51 = 0;
            v52 = v69[0];
            v53 = 48 * LODWORD(v69[1]) - 48;
            do
            {
              if (v19 > dword_1ED7F2570)
                break;
              ++v19;
              v54 = llvm::RuntimeCheckingPtrGroup::addPointer(v52, v62, (llvm::RuntimePointerChecking *)a1, v49, v50);
              v51 |= v54;
              if ((v54 & 1) != 0)
                break;
              v52 = (llvm::RuntimeCheckingPtrGroup *)((char *)v52 + 48);
              v55 = v53;
              v53 -= 48;
            }
            while (v55);
            if ((v51 & 1) == 0)
            {
LABEL_81:
              v56 = *(_QWORD *)(a1 + 8) + ((unint64_t)v62 << 6);
              v65 = vextq_s8(*(int8x16_t *)(v56 + 24), *(int8x16_t *)(v56 + 24), 8uLL);
              v66 = v68;
              v67 = 0x200000000;
              v57 = **(_QWORD **)(v56 + 16);
              v58 = *(_DWORD *)(v57 + 8);
              if ((v58 & 0xFE) == 0x12)
                v58 = *(_DWORD *)(**(_QWORD **)(v57 + 16) + 8);
              v68[2] = v58 >> 8;
              v68[0] = v62;
              LODWORD(v67) = 1;
              sub_1C619DE84((uint64_t)v69, (unint64_t)&v65);
              if (v66 != v68)
                free(v66);
            }
            v42 = *(_QWORD *)(v42 + 8) & 0xFFFFFFFFFFFFFFFELL;
          }
          while (v42);
        }
        if (LODWORD(v69[1]))
        {
          v40 = v69[0];
          v41 = 48 * LODWORD(v69[1]);
          do
          {
            sub_1C619F5FC(v61, (unint64_t)v40);
            v40 = (llvm::RuntimeCheckingPtrGroup *)((char *)v40 + 48);
            v41 -= 48;
          }
          while (v41);
        }
        sub_1C4EA2CC0((char **)v69);
        v12 = *(unsigned int *)(a1 + 16);
LABEL_63:
        if (++v18 >= v12)
        {
          v59 = v77;
          goto LABEL_87;
        }
      }
    }
    v59 = 0;
LABEL_87:
    sub_1C47655E8((uint64_t)&v76, v59);
    if (v73 != &v75)
      free(v73);
    MEMORY[0x1CAA32FB4](v63[0], 8);
  }
  else if (*(_DWORD *)(a1 + 16))
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(a1 + 8) + v13;
      *(int8x16_t *)v69 = vextq_s8(*(int8x16_t *)(v15 + 24), *(int8x16_t *)(v15 + 24), 8uLL);
      v70 = v72;
      v71 = 0x200000000;
      v16 = **(_QWORD **)(v15 + 16);
      v17 = *(_DWORD *)(v16 + 8);
      if ((v17 & 0xFE) == 0x12)
        v17 = *(_DWORD *)(**(_QWORD **)(v16 + 16) + 8);
      v72[2] = v17 >> 8;
      v72[0] = v14;
      LODWORD(v71) = 1;
      sub_1C619DE84(v61, (unint64_t)v69);
      if (v70 != v72)
        free(v70);
      ++v14;
      v13 += 64;
    }
    while (v14 < *(unsigned int *)(a1 + 16));
  }
}

BOOL llvm::RuntimePointerChecking::needsChecking(llvm::RuntimePointerChecking *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 1);
  v4 = v3 + ((unint64_t)a2 << 6);
  v5 = v3 + ((unint64_t)a3 << 6);
  return *(unsigned __int8 *)(v4 + 40) | *(unsigned __int8 *)(v5 + 40)
      && *(_DWORD *)(v4 + 44) != *(_DWORD *)(v5 + 44)
      && *(_DWORD *)(v3 + ((unint64_t)a2 << 6) + 48) == *(_DWORD *)(v3 + ((unint64_t)a3 << 6) + 48);
}

uint64_t llvm::RuntimeCheckingPtrGroup::addPointer(llvm::RuntimeCheckingPtrGroup *this, int a2, const llvm::SCEV *a3, const llvm::SCEV *a4, unsigned int a5, llvm::ScalarEvolution *a6)
{
  uint64_t result;
  const llvm::SCEV *v12;
  uint64_t v13;

  result = sub_1C4E9C710((uint64_t)a3, *((_QWORD *)this + 1), (uint64_t)a6);
  if (result)
  {
    v12 = (const llvm::SCEV *)result;
    result = sub_1C4E9C710((uint64_t)a4, *(_QWORD *)this, (uint64_t)a6);
    if (result)
    {
      if (v12 == a3)
        *((_QWORD *)this + 1) = a3;
      if ((const llvm::SCEV *)result != a4)
        *(_QWORD *)this = a4;
      v13 = *((unsigned int *)this + 6);
      if (v13 >= *((_DWORD *)this + 7))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 16, (uint64_t)this + 32, v13 + 1, 4);
        LODWORD(v13) = *((_DWORD *)this + 6);
      }
      *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v13) = a2;
      ++*((_DWORD *)this + 6);
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C4E9C710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;

  llvm::ScalarEvolution::getMinusSCEV(a3, a2, a1);
  v6 = v5;
  result = 0;
  if (v6 && !*(_WORD *)(v6 + 24))
  {
    v8 = *(_QWORD *)(v6 + 32);
    v9 = (_QWORD *)(v8 + 24);
    v10 = *(_DWORD *)(v8 + 32);
    v11 = v10 - 1;
    if (v10 >= 0x41)
      v9 = (_QWORD *)(*v9 + 8 * (v11 >> 6));
    if (((*v9 >> v11) & 1) != 0)
      return a2;
    else
      return a1;
  }
  return result;
}

uint64_t llvm::getPtrStride(int8x16_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t AsAddRec;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t SCEV;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t result;
  char v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  unsigned int v60;
  void *v61;
  uint64_t v62;
  _QWORD v63[4];

  v63[3] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 8) == 19)
    return 0;
  v13 = *(_QWORD *)a3;
  v14 = llvm::replaceSymbolicStrideSCEV(a1, a5, a3);
  if (*(_WORD *)(v14 + 24) == 7)
    AsAddRec = v14;
  else
    AsAddRec = 0;
  if (a6 && !AsAddRec)
    AsAddRec = llvm::PredicatedScalarEvolution::getAsAddRec(a1, a3);
  if (!AsAddRec || *(_QWORD *)(AsAddRec + 48) != a4)
    return 0;
  v16 = *(_DWORD *)(v13 + 8);
  if ((v16 & 0xFE) == 0x12)
    v16 = *(_DWORD *)(**(_QWORD **)(v13 + 16) + 8);
  if (*((_BYTE *)a3 + 16) == 62)
  {
    v17 = (*((unsigned __int8 *)a3 + 17) >> 1) & 1;
    if (!a7)
    {
LABEL_14:
      LOBYTE(v18) = 1;
      goto LABEL_55;
    }
  }
  else
  {
    v17 = 0;
    if (!a7)
      goto LABEL_14;
  }
  LOBYTE(v18) = 1;
  if (llvm::PredicatedScalarEvolution::hasNoOverflow((uint64_t)a1, a3, 1) || (*(_WORD *)(AsAddRec + 28) & 7) != 0)
    goto LABEL_55;
  if (*((_BYTE *)a3 + 16) != 62 || (*((_BYTE *)a3 + 17) & 2) == 0)
    goto LABEL_48;
  v19 = 0;
  v20 = 32 - 32 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF);
  while (v20)
  {
    v21 = *(_QWORD *)((char *)a3 + v20);
    v22 = *(unsigned __int8 *)(v21 + 16);
    if (v19)
      v21 = v19;
    if (v22 == 16)
      v21 = v19;
    v20 += 32;
    v23 = v22 == 16 || v19 == 0;
    v19 = v21;
    if (!v23)
      goto LABEL_48;
  }
  if (!v19)
    goto LABEL_48;
  v24 = *(unsigned __int8 *)(v19 + 16);
  if (v24 < 0x1C)
  {
    if (v24 != 5)
      goto LABEL_48;
    v25 = *(unsigned __int16 *)(v19 + 18) - 13;
  }
  else
  {
    v25 = v24 - 41;
  }
  HIDWORD(v27) = v25;
  LODWORD(v27) = v25;
  v26 = v27 >> 1;
  v28 = v26 > 6;
  v29 = (1 << v26) & 0x47;
  v30 = v28 || v29 == 0;
  if (!v30 && (*(_BYTE *)(v19 + 17) & 4) != 0)
  {
    v31 = *(_DWORD *)(v19 + 20);
    v32 = (v31 & 0x40000000) != 0 ? *(_QWORD *)(v19 - 8) : v19 - 32 * (v31 & 0x7FFFFFF);
    if (*(_BYTE *)(*(_QWORD *)(v32 + 32) + 16) == 16)
    {
      SCEV = llvm::PredicatedScalarEvolution::getSCEV(a1, *(llvm::Value **)v32);
      v18 = 0;
      if (!SCEV || *(_WORD *)(SCEV + 24) != 7)
        goto LABEL_49;
      if (*(_QWORD *)(SCEV + 48) == a4)
      {
        v18 = (*(unsigned __int16 *)(SCEV + 28) >> 2) & 1;
        goto LABEL_49;
      }
    }
  }
LABEL_48:
  v18 = 0;
LABEL_49:
  if (((v18 | v17) & 1) != 0)
    goto LABEL_55;
  v34 = *(_QWORD *)(**(_QWORD **)(a4 + 32) + 56);
  if (v34 && (v35 = *(_QWORD *)(v34 + 112)) != 0)
  {
    if (v16 <= 0xFF && (*(_BYTE *)(v35 + 17) & 1) == 0)
      goto LABEL_54;
  }
  else if (v16 < 0x100)
  {
LABEL_54:
    LOBYTE(v18) = 0;
    goto LABEL_55;
  }
  if (!a6)
    return 0;
  LOBYTE(v18) = 1;
  llvm::PredicatedScalarEvolution::setNoOverflow((uint64_t)a1, a3, 1);
LABEL_55:
  v36 = *(_QWORD *)(AsAddRec + 40);
  if (v36 == 2)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(AsAddRec + 32) + 8);
  }
  else
  {
    v58 = v17;
    v60 = v16;
    v54 = (uint64_t *)a1[5].i64[1];
    v57 = *(_QWORD *)(AsAddRec + 32);
    v61 = v63;
    v62 = 0x300000000;
    v55 = 8 * v36 - 8;
    if ((unint64_t)v55 >= 0x19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v61, (uint64_t)v63, v55 >> 3, 8);
      v56 = v62;
    }
    else
    {
      v56 = 0;
    }
    if (v36 != 1)
    {
      memcpy((char *)v61 + 8 * v56, (const void *)(v57 + 8), 8 * v36 - 8);
      v56 = v62;
    }
    LODWORD(v62) = v56 + ((unint64_t)v55 >> 3);
    v37 = sub_1C618AB20(v54, (uint64_t)&v61, *(uint64_t ***)(AsAddRec + 48));
    if (v61 != v63)
      free(v61);
    LOBYTE(v17) = v58;
    v16 = v60;
  }
  if (v37)
    v38 = *(unsigned __int16 *)(v37 + 24) == 0;
  else
    v38 = 0;
  if (!v38)
    return 0;
  v59 = v16;
  v39 = v18;
  v40 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a4 + 32) + 56) + 40) + 272;
  sub_1C4768AD0(v40, a2);
  v42 = v41;
  llvm::DataLayout::getAlignment(v40, a2);
  v44 = *(_QWORD *)(v37 + 32);
  v45 = *(_DWORD *)(v44 + 32);
  if (v45 > 0x40)
    return 0;
  v47 = v43;
  result = 0;
  v48 = ((1 << v47) + ((unint64_t)(v42 + 7) >> 3) - 1) & -(1 << v47);
  v49 = (uint64_t)(*(_QWORD *)(v44 + 24) << -(char)v45) >> -(char)v45;
  v50 = v49 / v48;
  if (!(v49 % v48))
  {
    if ((v39 & 1) != 0)
      return v50;
    if (v50 == -1 || v50 == 1)
      return v50;
    if ((v17 & 1) != 0)
    {
      if (a6)
        goto LABEL_87;
      return 0;
    }
    v52 = *(_QWORD *)(**(_QWORD **)(a4 + 32) + 56);
    if (v52)
    {
      v53 = *(_QWORD *)(v52 + 112);
      if (v53)
      {
        if ((*(_BYTE *)(v53 + 17) & 1) != 0)
          return v50;
      }
    }
    if (v59 >= 0x100)
      result = v50;
    else
      result = 0;
    if (v59 <= 0xFF && (a6 & 1) != 0)
    {
LABEL_87:
      llvm::PredicatedScalarEvolution::setNoOverflow((uint64_t)a1, a3, 1);
      return v50;
    }
  }
  return result;
}

unint64_t llvm::getPointersDiff(llvm *this, llvm::Type *a2, llvm::Value *a3, llvm::Type *a4, llvm::Value *a5, const llvm::DataLayout *a6, llvm::ScalarEvolution *a7, char a8, BOOL a9)
{
  int v9;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  llvm::Type *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned int v31;
  uint64_t SCEVIter;
  unsigned int v34;
  uint64_t v35;
  llvm::Type *v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t *v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t *v49;
  const char *v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _BOOL4 v60;
  unint64_t v61;
  void *v62;
  unsigned int v63;
  void *v64;
  unsigned int v65;
  void *__src;
  unsigned int v67;

  if (a2 == a4)
  {
    v30 = 0;
    v31 = 0;
    v29 = 1;
    return v31 | v30 | (unint64_t)(v29 << 32);
  }
  v9 = (int)a7;
  if (this != a3 && (a8 & 1) != 0)
    goto LABEL_18;
  v15 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v15 & 0xFE) == 0x12)
    v15 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  v16 = v15 >> 8;
  v17 = *(_DWORD *)(*(_QWORD *)a4 + 8);
  if ((v17 & 0xFE) == 0x12)
    v17 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a4 + 16) + 8);
  if (v16 != v17 >> 8)
  {
LABEL_18:
    v29 = 0;
    v30 = 0;
    v31 = 0;
    return v31 | v30 | (unint64_t)(v29 << 32);
  }
  v19 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(a5, v16) + 12);
  v67 = v19;
  if (v19 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
    v65 = v19;
    llvm::APInt::initSlowCase((llvm::APInt *)&v64, 0, 0);
  }
  else
  {
    __src = 0;
    v65 = v19;
    v64 = 0;
  }
  v20 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)a2, a5, (const void **)&__src, 0, 0, 0, v18);
  if (v20 == llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)a4, a5, (const void **)&v64, 0, 0, 0, v21))
  {
    v39 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(a5, *(_DWORD *)(*(_QWORD *)v20 + 8) >> 8) + 12);
    if (v67 < v39)
    {
      llvm::APInt::sext((llvm::APInt *)&__src, v39, (llvm::APInt *)&v62);
    }
    else if (v67 > v39)
    {
      llvm::APInt::trunc((llvm::APInt *)&__src, v39, (llvm::APInt *)&v62);
    }
    else
    {
      v63 = v67;
      if (v67 > 0x40)
      {
        v62 = (void *)operator new[]();
        memcpy(v62, __src, (((unint64_t)v63 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v62 = __src;
      }
    }
    if (v67 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    __src = v62;
    v67 = v63;
    if (v65 < v39)
    {
      llvm::APInt::sext((llvm::APInt *)&v64, v39, (llvm::APInt *)&v62);
    }
    else if (v65 > v39)
    {
      llvm::APInt::trunc((llvm::APInt *)&v64, v39, (llvm::APInt *)&v62);
    }
    else
    {
      v63 = v65;
      if (v65 > 0x40)
      {
        v62 = (void *)operator new[]();
        memcpy(v62, v64, (((unint64_t)v63 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v62 = v64;
      }
    }
    if (v65 >= 0x41 && v64)
      MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
    v40 = (unint64_t *)v62;
    v64 = v62;
    v41 = v63;
    v65 = v63;
    if (v63 >= 0x41)
    {
      v54 = 0;
      v55 = (unint64_t *)__src;
      v56 = ((unint64_t)v63 + 63) >> 6;
      v57 = v56;
      do
      {
        v58 = *v55++;
        v59 = *v40 - v58;
        v60 = *v40 < v58;
        v61 = *v40 + ~v58;
        if (v54)
        {
          v54 = v61 >= *v40;
        }
        else
        {
          v61 = v59;
          v54 = v60;
        }
        *v40++ = v61;
        --v57;
      }
      while (v57);
      *((_QWORD *)v64 + (v56 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v41;
      v41 = v65;
      if (v65 > 0x40)
      {
        v49 = (uint64_t *)v64;
        goto LABEL_64;
      }
    }
    else
    {
      v42 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v63;
      if (!v63)
        v42 = 0;
      v64 = (void *)(v42 & ((_BYTE *)v62 - (_BYTE *)__src));
    }
    v43 = (uint64_t)((_QWORD)v64 << -v41) >> -v41;
LABEL_65:
    sub_1C4768AD0((uint64_t)a5, (uint64_t)this);
    v52 = v51 + 7;
    if ((_DWORD)v50 == 1)
    v53 = (int)v43 / (int)(v52 >> 3);
    if (v53 * (v52 >> 3) == (_DWORD)v43)
      v29 = 1;
    else
      v29 = v9 ^ 1u;
    if ((_DWORD)v29)
      v30 = (int)v43 / (int)(v52 >> 3);
    else
      v30 = 0;
    if ((_DWORD)v29)
      v31 = v53 & 0xFFFFFF00;
    else
      v31 = 0;
    goto LABEL_76;
  }
  v22 = *((_QWORD *)a6 + 13);
  v23 = *((_DWORD *)a6 + 30);
  if (!v23)
    goto LABEL_21;
  v24 = (v23 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v25 = v22 + 48 * v24;
  v26 = *(llvm::Type **)(v25 + 24);
  if (v26 != a2)
  {
    v27 = 1;
    while (v26 != (llvm::Type *)-4096)
    {
      v28 = v24 + v27++;
      v24 = v28 & (v23 - 1);
      v25 = v22 + 48 * v24;
      v26 = *(llvm::Type **)(v25 + 24);
      if (v26 == a2)
        goto LABEL_22;
    }
LABEL_21:
    v25 = v22 + 48 * v23;
  }
LABEL_22:
  if (v25 != v22 + 48 * v23)
  {
    SCEVIter = *(_QWORD *)(v25 + 40);
    if (SCEVIter)
    {
      if (v23)
        goto LABEL_25;
LABEL_52:
      v35 = v22 + 48 * v23;
      goto LABEL_53;
    }
  }
  SCEVIter = llvm::ScalarEvolution::createSCEVIter(a6, (unint64_t)a2);
  v22 = *((_QWORD *)a6 + 13);
  v23 = *((_DWORD *)a6 + 30);
  if (!v23)
    goto LABEL_52;
LABEL_25:
  v34 = (v23 - 1) & ((a4 >> 4) ^ (a4 >> 9));
  v35 = v22 + 48 * v34;
  v36 = *(llvm::Type **)(v35 + 24);
  if (v36 != a4)
  {
    v37 = 1;
    while (v36 != (llvm::Type *)-4096)
    {
      v38 = v34 + v37++;
      v34 = v38 & (v23 - 1);
      v35 = v22 + 48 * v34;
      v36 = *(llvm::Type **)(v35 + 24);
      if (v36 == a4)
        goto LABEL_53;
    }
    goto LABEL_52;
  }
LABEL_53:
  if (v35 == v22 + 48 * v23 || (v44 = *(_QWORD *)(v35 + 40)) == 0)
    v44 = llvm::ScalarEvolution::createSCEVIter(a6, (unint64_t)a4);
  llvm::ScalarEvolution::getMinusSCEV((uint64_t)a6, v44, SCEVIter);
  if (v45)
    v46 = *(unsigned __int16 *)(v45 + 24) == 0;
  else
    v46 = 0;
  if (v46)
  {
    v47 = *(_QWORD *)(v45 + 32);
    v48 = *(_DWORD *)(v47 + 32);
    if (v48 <= 0x40)
    {
      v43 = (uint64_t)(*(_QWORD *)(v47 + 24) << -(char)v48) >> -(char)v48;
      goto LABEL_65;
    }
    v49 = *(uint64_t **)(v47 + 24);
LABEL_64:
    v43 = *v49;
    goto LABEL_65;
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
LABEL_76:
  if (v65 >= 0x41 && v64)
    MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
  if (v67 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return v31 | v30 | (unint64_t)(v29 << 32);
}

uint64_t llvm::sortPtrAccesses(llvm::Type **a1, unint64_t a2, llvm *a3, llvm::Value *a4, const llvm::DataLayout *a5, uint64_t a6)
{
  llvm::Type *v12;
  _QWORD *v13;
  uint64_t v14;
  llvm::Type **v15;
  unint64_t PointersDiff;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t **v28;
  BOOL v29;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  llvm::Type **v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;

  v12 = *a1;
  v13 = operator new(0x30uLL);
  v13[4] = 0;
  *((_DWORD *)v13 + 10) = 0;
  *v13 = 0;
  v13[1] = 0;
  v13[2] = &v44;
  v43 = v13;
  v44 = v13;
  *((_BYTE *)v13 + 24) = 1;
  v45 = 1;
  if (a2 == 1)
  {
    *(_DWORD *)(a6 + 8) = 0;
    goto LABEL_3;
  }
  v15 = a1 + 1;
  PointersDiff = llvm::getPointersDiff(a3, v12, a3, a1[1], a4, a5, (llvm::ScalarEvolution *)1, 1, v39);
  if (!HIDWORD(PointersDiff))
  {
LABEL_28:
    v14 = 0;
    goto LABEL_29;
  }
  v40 = a2;
  v41 = a6;
  v42 = &a1[a2];
  v17 = 1;
  v18 = 1;
  while (1)
  {
    v19 = (int)PointersDiff;
    v20 = (uint64_t **)operator new(0x30uLL);
    v21 = v20;
    v20[4] = (uint64_t *)v19;
    *((_DWORD *)v20 + 10) = v17;
    v22 = v44;
    v23 = &v44;
    v24 = &v44;
    if (v44)
    {
      while (1)
      {
        while (1)
        {
          v24 = (uint64_t **)v22;
          v25 = v22[4];
          if (v19 >= v25)
            break;
          v22 = (uint64_t *)*v22;
          v23 = v24;
          if (!*v24)
            goto LABEL_13;
        }
        if (v25 >= v19)
          break;
        v22 = (uint64_t *)v22[1];
        if (!v22)
        {
          v23 = v24 + 1;
          goto LABEL_13;
        }
      }
      operator delete(v20);
      goto LABEL_28;
    }
LABEL_13:
    *v20 = 0;
    v20[1] = 0;
    v20[2] = (uint64_t *)v24;
    *v23 = (uint64_t *)v20;
    v26 = (uint64_t *)v20;
    if (*v43)
    {
      v43 = (uint64_t *)*v43;
      v26 = *v23;
    }
    sub_1C4768E74(v44, v26);
    ++v45;
    if (v18)
      break;
    if (++v15 == v42)
    {
      v31 = v41;
      *(_DWORD *)(v41 + 8) = 0;
      v32 = (_DWORD *)(v41 + 8);
      goto LABEL_33;
    }
    v18 = 0;
LABEL_25:
    ++v17;
    PointersDiff = llvm::getPointersDiff(a3, v12, a3, *v15, a4, a5, (llvm::ScalarEvolution *)1, 1, v40);
    v14 = 0;
    if (!HIDWORD(PointersDiff))
      goto LABEL_29;
  }
  v27 = v21[1];
  if (v27)
  {
    do
    {
      v28 = (uint64_t **)v27;
      v27 = (uint64_t *)*v27;
    }
    while (v27);
  }
  else
  {
    do
    {
      v28 = (uint64_t **)v21[2];
      v29 = *v28 == (uint64_t *)v21;
      v21 = v28;
    }
    while (!v29);
  }
  v18 = v28 == &v44;
  if (++v15 != v42)
    goto LABEL_25;
  v31 = v41;
  *(_DWORD *)(v41 + 8) = 0;
  v32 = (_DWORD *)(v41 + 8);
  if (v28 == &v44)
    goto LABEL_3;
LABEL_33:
  if (v40)
  {
    if (v40 > *(unsigned int *)(v31 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v31, v31 + 16, v40, 4);
      v33 = *(unsigned int *)(v31 + 8);
    }
    else
    {
      v33 = 0;
    }
    if (v40 != v33)
      bzero((void *)(*(_QWORD *)v31 + 4 * v33), 4 * (v40 - v33));
    *v32 = v40;
  }
  v34 = v43;
  if (v43 != (uint64_t *)&v44)
  {
    v35 = 0;
    v36 = *(_QWORD *)v31;
    v14 = 1;
    do
    {
      *(_DWORD *)(v36 + 4 * v35) = *((_DWORD *)v34 + 10);
      v37 = (uint64_t *)v34[1];
      if (v37)
      {
        do
        {
          v38 = (uint64_t **)v37;
          v37 = (uint64_t *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (uint64_t **)v34[2];
          v29 = *v38 == v34;
          v34 = (uint64_t *)v38;
        }
        while (!v29);
      }
      ++v35;
      v34 = (uint64_t *)v38;
    }
    while (v38 != &v44);
    goto LABEL_29;
  }
LABEL_3:
  v14 = 1;
LABEL_29:
  sub_1C49F3440(v44);
  return v14;
}

BOOL llvm::isConsecutiveAccess(llvm *this, llvm::Value *a2, llvm::Value *a3, const llvm::DataLayout *a4, llvm::ScalarEvolution *a5)
{
  llvm::Type *v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  llvm::Type *v15;
  llvm *v16;
  unint64_t PointersDiff;
  BOOL vars0;

  v7 = 0;
  v8 = *((unsigned __int8 *)this + 16);
  if (this)
    v9 = v8 == 60;
  else
    v9 = 0;
  v10 = !v9;
  if (this && (v8 - 62) >= 0xFFFFFFFE)
    v7 = (llvm::Type *)*((_QWORD *)this - 4);
  v11 = 0;
  v12 = *((unsigned __int8 *)a2 + 16);
  if (a2)
    v13 = v12 == 60;
  else
    v13 = 0;
  v14 = !v13;
  if (a2)
  {
    if ((v12 - 62) >= 0xFFFFFFFE)
    {
      v11 = 0;
      if (v7)
      {
        v15 = (llvm::Type *)*((_QWORD *)a2 - 4);
        if (v15)
        {
          if (v10)
            this = (llvm *)*((_QWORD *)this - 8);
          v16 = *(llvm **)this;
          if (v14)
            a2 = (llvm::Value *)*((_QWORD *)a2 - 8);
          PointersDiff = llvm::getPointersDiff(v16, v7, *(llvm::Value **)a2, v15, a3, a4, (llvm::ScalarEvolution *)1, (char)a5, vars0);
          return HIDWORD(PointersDiff) && (_DWORD)PointersDiff == 1;
        }
      }
    }
  }
  return v11;
}

void llvm::MemoryDepChecker::addAccess(llvm::MemoryDepChecker *this, llvm::StoreInst *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v2 = *((_QWORD *)a2 - 4);
  v3 = *((_QWORD *)this + 1);
  v4[0] = this;
  v4[1] = a2;
  sub_1C4E9D5E4(v2, v3, (void (*)(uint64_t, uint64_t))sub_1C4EA3234, (uint64_t)v4);
}

void sub_1C4E9D5E4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  _BYTE v23[64];
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD v27[7];

  v27[6] = *MEMORY[0x1E0C80C00];
  v19 = v23;
  v20 = v23;
  v21 = 8;
  v22 = 0;
  v24 = v27;
  v26 = 6;
  v27[0] = a1;
  v7 = a2 + 56;
  v8 = 1;
  do
  {
    v9 = *((_QWORD *)v24 + v8 - 1);
    v25 = v8 - 1;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v19, v9);
    if (!v10)
      goto LABEL_14;
    if (!v9
      || *(_BYTE *)(v9 + 16) != 83
      || ((v11 = sub_1C477672C(v7, *(_QWORD *)(v9 + 40)), v12 = *(_QWORD *)(a2 + 64), v12 != *(_QWORD *)(a2 + 56))
        ? (v13 = (unsigned int *)(a2 + 72))
        : (v13 = (unsigned int *)(a2 + 76)),
          v11 == (_QWORD *)(v12 + 8 * *v13) || *(_QWORD *)(v9 + 40) == **(_QWORD **)(a2 + 32)))
    {
      a3(a4, v9);
LABEL_14:
      v8 = v25;
      continue;
    }
    v14 = *(_DWORD *)(v9 + 20);
    if ((v14 & 0x40000000) != 0)
    {
      v16 = *(uint64_t **)(v9 - 8);
      v15 = v14 & 0x7FFFFFF;
      if ((v14 & 0x7FFFFFF) == 0)
        goto LABEL_14;
    }
    else
    {
      v15 = v14 & 0x7FFFFFF;
      v16 = (uint64_t *)(v9 - 32 * v15);
      if ((v14 & 0x7FFFFFF) == 0)
        goto LABEL_14;
    }
    v8 = v25;
    v17 = 32 * v15;
    do
    {
      v18 = *v16;
      if (v8 >= v26)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, (uint64_t)v27, v8 + 1, 8);
        v8 = v25;
      }
      *((_QWORD *)v24 + v8) = v18;
      v8 = ++v25;
      v16 += 4;
      v17 -= 32;
    }
    while (v17);
  }
  while (v8);
  if (v24 != v27)
    free(v24);
  if (v20 != v19)
    free(v20);
}

void llvm::MemoryDepChecker::addAccess(llvm::MemoryDepChecker *this, llvm::LoadInst *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v2 = *((_QWORD *)a2 - 4);
  v3 = *((_QWORD *)this + 1);
  v4[0] = this;
  v4[1] = a2;
  sub_1C4E9D5E4(v2, v3, (void (*)(uint64_t, uint64_t))sub_1C4EA3564, (uint64_t)v4);
}

uint64_t llvm::MemoryDepChecker::Dependence::isSafeForVectorization(int a1)
{
  return dword_1C85F4108[a1];
}

BOOL llvm::MemoryDepChecker::Dependence::isBackward(llvm::MemoryDepChecker::Dependence *this)
{
  return *((_DWORD *)this + 2) > 3u;
}

BOOL llvm::MemoryDepChecker::Dependence::isForward(llvm::MemoryDepChecker::Dependence *this)
{
  return (*((_DWORD *)this + 2) & 0xFFFFFFFE) == 2;
}

BOOL llvm::MemoryDepChecker::couldPreventStoreLoadForward(llvm::MemoryDepChecker *this, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *((_QWORD *)this + 24);
  if (v3 >= a3 << 6)
    v4 = a3 << 6;
  else
    v4 = *((_QWORD *)this + 24);
  v5 = 2 * a3;
  if (2 * a3 <= v4)
  {
    v6 = 2 * a3;
    while (!(a2 % v6) || a2 / v6 >= 8 * a3)
    {
      v6 *= 2;
      if (v6 > v4)
        goto LABEL_12;
    }
    v4 = v6 >> 1;
  }
LABEL_12:
  if (v4 >= v5 && v4 < v3 && v4 != a3 << 6)
    *((_QWORD *)this + 24) = v4;
  return v4 < v5;
}

uint64_t llvm::MemoryDepChecker::mergeInStatus(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 212) < a2)
    *(_DWORD *)(result + 212) = a2;
  return result;
}

uint64_t llvm::MemoryDepChecker::isDependent(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t *a4, unsigned int a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  llvm::Value *v17;
  llvm::Value *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t PtrStride;
  uint64_t v25;
  uint64_t SCEV;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  const char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  _BOOL4 v49;
  int v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  llvm::APInt *v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  char *v60;
  unint64_t v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  void *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v84;
  unsigned int v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v9 = *a4;
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(v10 + 8 * a3);
  if (!v11 || *(_BYTE *)(v11 + 16) != 60)
    v11 = *(_QWORD *)(v11 - 64);
  v12 = (v8 >> 2) & 1;
  v13 = (v9 >> 2) & 1;
  v14 = *(_QWORD *)(v10 + 8 * a5);
  if (!v14 || *(_BYTE *)(v14 + 16) != 60)
    v14 = *(_QWORD *)(v14 - 64);
  if (!(v12 | v13))
    goto LABEL_8;
  v17 = (llvm::Value *)(v8 & 0xFFFFFFFFFFFFFFF8);
  v18 = (llvm::Value *)(v9 & 0xFFFFFFFFFFFFFFF8);
  v19 = *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  v20 = *(_DWORD *)(v19 + 8);
  if ((v20 & 0xFE) == 0x12)
    v20 = *(_DWORD *)(**(_QWORD **)(v19 + 16) + 8);
  v21 = *(_DWORD *)(*(_QWORD *)v18 + 8);
  if ((v21 & 0xFE) == 0x12)
    v21 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v18 + 16) + 8);
  if ((v21 ^ v20) > 0xFF)
    goto LABEL_101;
  v22 = *(_QWORD *)v11;
  v23 = *(_QWORD *)v14;
  PtrStride = llvm::getPtrStride(*(int8x16_t **)a1, *(_QWORD *)v11, v17, *(_QWORD *)(a1 + 8), a6, 1, 1);
  v25 = llvm::getPtrStride(*(int8x16_t **)a1, v23, v18, *(_QWORD *)(a1 + 8), a6, 1, 1);
  SCEV = llvm::PredicatedScalarEvolution::getSCEV(*(int8x16_t **)a1, v17);
  v27 = llvm::PredicatedScalarEvolution::getSCEV(*(int8x16_t **)a1, v18);
  if (PtrStride < 0)
    v28 = SCEV;
  else
    v28 = v27;
  if (PtrStride < 0)
    v29 = v27;
  else
    v29 = SCEV;
  if (PtrStride < 0)
    v30 = PtrStride;
  else
    v30 = v25;
  if (PtrStride < 0)
  {
    v31 = v22;
  }
  else
  {
    v25 = PtrStride;
    v31 = v23;
  }
  if (PtrStride < 0)
    v32 = v23;
  else
    v32 = v22;
  if (PtrStride < 0)
    v33 = v12;
  else
    v33 = v13;
  if (PtrStride < 0)
    v12 = v13;
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(*(_QWORD *)a1 + 88), v28, v29);
  v16 = 0;
  v15 = 1;
  if (v25 && v30 && v25 == v30)
  {
    v35 = v34;
    v85 = v33;
    v36 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 32) + 56) + 40) + 272;
    sub_1C4768AD0(v36, v32);
    v38 = (unint64_t)(v37 + 7) >> 3;
    v40 = v39 == 1;
    llvm::DataLayout::getAlignment(v36, v32);
    v43 = (1 << v42) + v38 - 1;
    v44 = -(1 << v42);
    if (v40)
    v45 = v43 & v44;
    sub_1C4768AD0(v36, v32);
    v47 = v46 + 7;
    v49 = v48 != 1;
    sub_1C4768AD0(v36, v31);
    if (((v51 + 7) ^ v47) < 8)
      v52 = v49 ^ (v50 == 1);
    else
      v52 = 0;
    if (v30 >= 0)
      v53 = v30;
    else
      v53 = -v30;
    if (*(_WORD *)(v35 + 24) || !v35)
    {
      if (*(_WORD *)(v35 + 24) == 15)
        v59 = 0;
      else
        v59 = v52;
      if (v59 == 1)
      {
        v60 = (char *)&loc_1C4E9DB80
            + 4
            * word_1C85F4050[*(unsigned __int16 *)(llvm::PredicatedScalarEvolution::getBackedgeTakenCount(*(int8x16_t **)a1)
                                                 + 24)];
        __asm { BR              X11 }
      }
      v16 = 0;
      v15 = 1;
      *(_BYTE *)(a1 + 208) = 1;
    }
    else
    {
      v54 = *(_QWORD *)(v35 + 32);
      v55 = (llvm::APInt *)(v54 + 24);
      v56 = *(_DWORD *)(v54 + 32);
      v57 = *(_QWORD *)(v54 + 24);
      if (v56 > 0x40)
        v58 = **(_QWORD **)v55;
      else
        v58 = (uint64_t)(*(_QWORD *)v55 << -(char)v56) >> -(char)v56;
      if ((v58 & 0x8000000000000000) == 0)
        v61 = v58;
      else
        v61 = -(uint64_t)v58;
      v62 = v52 ^ 1;
      if (v58 && v53 >= 2 && (v62 & 1) == 0 && !(v61 % v45) && v61 / v45 % v53)
      {
LABEL_8:
        v15 = 0;
        v16 = 0;
        return v15 | (v16 << 32);
      }
      v63 = v56 - 1;
      if (v56 > 0x40)
      {
        if (((*(_QWORD *)(v57 + 8 * (v63 >> 6)) >> v63) & 1) == 0)
        {
          if (v56 - llvm::APInt::countLeadingZerosSlowCase(v55) > 0x40)
            goto LABEL_89;
          v57 = *(_QWORD *)v57;
          goto LABEL_88;
        }
      }
      else if (((v57 >> v63) & 1) == 0)
      {
LABEL_88:
        if (v57)
        {
LABEL_89:
          if (v52)
          {
            v72 = llvm::VectorizerParams::VectorizationFactor;
            if (llvm::VectorizerParams::VectorizationFactor <= 1)
              v72 = 1;
            v73 = llvm::VectorizerParams::VectorizationInterleave;
            if (llvm::VectorizerParams::VectorizationInterleave <= 1)
              v73 = 1;
            v74 = v73 * v72;
            if (v74 <= 2)
              v75 = 2;
            else
              v75 = v74;
            v76 = v45 + v45 * v53 * (v75 - 1);
            if (v76 <= v58)
            {
              v77 = *(_QWORD *)(a1 + 192);
              if (v76 <= v77)
              {
                if (v77 >= v58)
                  v77 = v58;
                *(_QWORD *)(a1 + 192) = v77;
                v80 = 8 * v45;
                if (!v12 && v85 && byte_1ED7F27B0)
                {
                  if (v77 >= v45 << 6)
                    v81 = v45 << 6;
                  else
                    v81 = v77;
                  if (2 * v45 <= v81)
                  {
                    v82 = 2 * v45;
                    while (!(v58 % v82) || v58 / v82 >= v80)
                    {
                      v82 *= 2;
                      if (v82 > v81)
                        goto LABEL_138;
                    }
                    v81 = v82 >> 1;
                  }
LABEL_138:
                  if (v81 < 2 * v45)
                  {
                    v15 = 6;
                    goto LABEL_120;
                  }
                  if (v81 < v77 && v81 != v45 << 6)
                  {
                    *(_QWORD *)(a1 + 192) = v81;
                    v77 = v81;
                  }
                }
                v84 = v77 / (v45 * v53) * v80;
                if (v84 >= *(_QWORD *)(a1 + 200))
                  v84 = *(_QWORD *)(a1 + 200);
                *(_QWORD *)(a1 + 200) = v84;
                v15 = 5;
                goto LABEL_120;
              }
            }
            v15 = 4;
LABEL_120:
            v16 = v58 / v45;
            return v15 | (v16 << 32);
          }
LABEL_101:
          v16 = 0;
          v15 = 1;
          return v15 | (v16 << 32);
        }
        if (!v52)
          goto LABEL_101;
LABEL_119:
        v15 = 2;
        goto LABEL_120;
      }
      if (!v12 || v85 || !byte_1ED7F27B0)
        goto LABEL_119;
      sub_1C4DA6CE8((const void **)v55, (uint64_t)&v86);
      v64 = v87;
      v65 = v86;
      if (v87 >= 0x41)
        v66 = (unint64_t *)v86;
      else
        v66 = (unint64_t *)&v86;
      v67 = *(_QWORD *)(a1 + 192);
      if (v67 >= v45 << 6)
        v68 = v45 << 6;
      else
        v68 = *(_QWORD *)(a1 + 192);
      if (2 * v45 <= v68)
      {
        v69 = *v66;
        v70 = 2 * v45;
        while (!(v69 % v70) || v69 / v70 >= 8 * v45)
        {
          v70 *= 2;
          if (v70 > v68)
            goto LABEL_103;
        }
        v68 = v70 >> 1;
      }
LABEL_103:
      if (v68 >= 2 * v45)
      {
        if (v68 < v67 && v68 != v45 << 6)
          *(_QWORD *)(a1 + 192) = v68;
      }
      else
      {
        v62 = 1;
      }
      if (v64 >= 0x41 && v65)
        MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
      if (!v62)
        goto LABEL_119;
      sub_1C4DA6CE8((const void **)v55, (uint64_t)&v86);
      if (v87 >= 0x41)
        v79 = v86;
      else
        v79 = &v86;
      v16 = *v79 / v45;
      if (v87 >= 0x41 && v86)
        MEMORY[0x1CAA32F9C]();
      v15 = 3;
    }
  }
  return v15 | (v16 << 32);
}

BOOL llvm::MemoryDepChecker::areDepsSafe(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned int *v28;
  unint64_t *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t isDependent;
  uint64_t v39;
  signed int v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  int v56;
  _BYTE v57[72];

  *(_QWORD *)(a1 + 192) = -1;
  v53 = v57;
  v54 = v57;
  v55 = 8;
  v56 = 0;
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5)
  {
    v7 = *(uint64_t **)a3;
    v8 = *(_QWORD *)a3 + 8 * v5;
    v9 = (_QWORD *)(a2 + 8);
    v51 = a1 + 16;
    v44 = a1 + 240;
    v45 = a1 + 224;
    while (1)
    {
      v10 = *v7;
      v11 = (char *)sub_1C477672C((uint64_t)&v53, *v7);
      v12 = v54 == v53 ? (uint64_t *)((char *)&v55 + 4) : &v55;
      if (v11 == &v54[8 * *(unsigned int *)v12])
        break;
LABEL_31:
      if (++v7 == (uint64_t *)v8)
        goto LABEL_74;
    }
    v13 = (_QWORD *)*v9;
    if (!*v9)
      goto LABEL_29;
    v14 = (_QWORD *)*v9;
    v15 = v9;
    do
    {
      v16 = v14[6];
      v17 = v16 < v10;
      if (v16 >= v10)
        v18 = v14;
      else
        v18 = v14 + 1;
      if (!v17)
        v15 = v14;
      v14 = (_QWORD *)*v18;
    }
    while (*v18);
    if (v15 == v9 || v10 < v15[6])
    {
      v19 = 0;
      if (!v13)
        goto LABEL_29;
    }
    else
    {
      v19 = sub_1C4EA2500((uint64_t)(v15 + 4));
      v13 = (_QWORD *)*v9;
      if (!*v9)
      {
LABEL_29:
        v21 = v9;
LABEL_30:
        if ((v21[5] & 1) == 0)
          goto LABEL_31;
        v25 = (unint64_t)(v21 + 4);
        v47 = v8;
        v48 = v7;
        v46 = v9;
        while (1)
        {
          v26 = (unint64_t *)(v25 + 16);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v53, *(_QWORD *)(v25 + 16));
          v27 = v25;
          if ((*(_BYTE *)(v25 + 16) & 4) == 0)
            v27 = *(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFFELL;
          if (!v27)
            goto LABEL_71;
          v49 = v25;
          do
          {
            v28 = (unsigned int *)sub_1C4EA36C0(v51, v26)[1];
            v52 = (unsigned int *)sub_1C4EA36C0(v51, v26)[2];
            if (v28 == v52)
              goto LABEL_70;
            v29 = (unint64_t *)(v27 + 16);
            v50 = v27;
            while (2)
            {
              if (v25 == v27)
              {
                v30 = v28 + 1;
                v31 = v52;
              }
              else
              {
                v30 = (unsigned int *)sub_1C4EA36C0(v51, v29)[1];
                v31 = (unsigned int *)sub_1C4EA36C0(v51, v29)[2];
              }
              while (v30 != v31)
              {
                v32 = *v28;
                v33 = *v30;
                if (*v28 > *v30)
                  v34 = (uint64_t *)v26;
                else
                  v34 = (uint64_t *)v29;
                if (v32 > v33)
                  v35 = v32;
                else
                  v35 = v33;
                if (v32 > v33)
                  v36 = (uint64_t *)v29;
                else
                  v36 = (uint64_t *)v26;
                if (v32 > v33)
                  v37 = v33;
                else
                  v37 = v32;
                isDependent = llvm::MemoryDepChecker::isDependent(a1, v36, v37, v34, v35, a4);
                v39 = isDependent;
                v40 = dword_1C85F4108[(int)isDependent];
                if (*(_DWORD *)(a1 + 212) < v40)
                  *(_DWORD *)(a1 + 212) = v40;
                if (*(_BYTE *)(a1 + 216))
                {
                  v41 = *(unsigned int *)(a1 + 232);
                  if ((_DWORD)isDependent)
                  {
                    if (v41 >= *(_DWORD *)(a1 + 236))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v45, v44, v41 + 1, 16);
                      LODWORD(v41) = *(_DWORD *)(a1 + 232);
                    }
                    v41 = *(_QWORD *)(a1 + 224) + 16 * v41;
                    *(_QWORD *)v41 = v37 | (v35 << 32);
                    *(_QWORD *)(v41 + 8) = v39;
                    LODWORD(v41) = *(_DWORD *)(a1 + 232) + 1;
                    *(_DWORD *)(a1 + 232) = v41;
                  }
                  if (v41 >= dword_1ED7F2630)
                  {
                    *(_BYTE *)(a1 + 216) = 0;
                    *(_DWORD *)(a1 + 232) = 0;
                  }
                  else if (*(_BYTE *)(a1 + 216))
                  {
                    goto LABEL_68;
                  }
                }
                if (*(_DWORD *)(a1 + 212))
                {
                  v42 = 0;
                  goto LABEL_75;
                }
LABEL_68:
                ++v30;
              }
              ++v28;
              v25 = v49;
              v27 = v50;
              if (v28 != v52)
                continue;
              break;
            }
LABEL_70:
            v27 = *(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFFELL;
          }
          while (v27);
LABEL_71:
          v25 = *(_QWORD *)(v25 + 8) & 0xFFFFFFFFFFFFFFFELL;
          v8 = v47;
          v7 = v48;
          v9 = v46;
          if (!v25)
            goto LABEL_31;
        }
      }
    }
    v20 = *(_QWORD *)(v19 + 16);
    v21 = v9;
    do
    {
      v22 = v13[6];
      v23 = v22 < v20;
      if (v22 >= v20)
        v24 = v13;
      else
        v24 = v13 + 1;
      if (!v23)
        v21 = v13;
      v13 = (_QWORD *)*v24;
    }
    while (*v24);
    if (v21 != v9 && v20 >= v21[6])
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_74:
  v42 = *(_DWORD *)(a1 + 212) == 0;
LABEL_75:
  if (v54 != v53)
    free(v54);
  return v42;
}

uint64_t llvm::LoopAccessInfo::canAnalyzeLoop(llvm::LoopAccessInfo *this)
{
  uint64_t v2;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const void *v7[2];

  v2 = *((_QWORD *)this + 3);
  if (*(_QWORD *)(v2 + 8) != *(_QWORD *)(v2 + 16))
  {
    v4 = llvm::LoopAccessInfo::recordAnalysis((uint64_t)this, (uint64_t)"NotInnerMostLoop", 16, 0);
    v5 = "loop is not the innermost loop";
    v6 = 30;
    goto LABEL_7;
  }
  if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges(v2) != 1)
  {
    v4 = llvm::LoopAccessInfo::recordAnalysis((uint64_t)this, (uint64_t)"CFGNotUnderstood", 16, 0);
    v5 = "loop control flow is not understood by analyzer";
    v6 = 47;
    goto LABEL_7;
  }
  if (*(_WORD *)(llvm::PredicatedScalarEvolution::getBackedgeTakenCount(*(int8x16_t **)this) + 24) == 15)
  {
    v4 = llvm::LoopAccessInfo::recordAnalysis((uint64_t)this, (uint64_t)"CantComputeNumberOfIterations", 29, 0);
    v5 = "could not determine number of loop iterations";
    v6 = 45;
LABEL_7:
    v7[0] = v5;
    v7[1] = (const void *)v6;
    sub_1C53B17B4(v4 + 80, v7);
    return 0;
  }
  return 1;
}

uint64_t llvm::LoopAccessInfo::recordAnalysis(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Loop *v8;
  uint64_t v9;
  uint64_t result;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 **v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;

  v8 = *(llvm::Loop **)(a1 + 24);
  v9 = **((_QWORD **)v8 + 4);
  llvm::Loop::getStartLoc(v8, &v20);
  if (a4)
  {
    v18 = *(_QWORD *)(a4 + 48);
    v17 = (unsigned __int8 **)(a4 + 48);
    v9 = (uint64_t)*(v17 - 1);
    if (v18)
      sub_1C47C0F04(&v20, v17);
  }
  result = operator new();
  v11 = v20;
  if (v20)
  {
    v12 = *(_QWORD *)&v20[-8 * *((unsigned int *)v20 + 2)];
    if (*(_BYTE *)v12 != 15)
      v12 = *(_QWORD *)(v12 - 8 * *(unsigned int *)(v12 + 8));
    v13 = *((_DWORD *)v20 + 1);
    v14 = *((unsigned __int16 *)v20 + 1);
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  v15 = *(_QWORD *)(v9 + 56);
  *(_DWORD *)(result + 8) = 11;
  *(_BYTE *)(result + 12) = 2;
  *(_QWORD *)(result + 16) = v15;
  *(_QWORD *)(result + 24) = v12;
  *(_DWORD *)(result + 32) = v13;
  *(_DWORD *)(result + 36) = v14;
  *(_QWORD *)(result + 40) = "loop-accesses";
  *(_QWORD *)(result + 48) = a2;
  *(_QWORD *)(result + 56) = a3;
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = result + 96;
  *(_QWORD *)(result + 88) = 0x400000000;
  *(_BYTE *)(result + 352) = 0;
  *(_DWORD *)(result + 356) = -1;
  *(_QWORD *)(result + 360) = v9;
  *(_QWORD *)result = &off_1E814E570;
  v16 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = result;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    result = *(_QWORD *)(a1 + 56);
    v11 = v20;
  }
  if (v11)
  {
    v19 = result;
    llvm::MetadataTracking::untrack((uint64_t)&v20, v11);
    return v19;
  }
  return result;
}

void llvm::LoopAccessInfo::analyzeLoop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  llvm::LoopAccessInfo *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  int32x2_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t isAnnotatedParallel;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  __int16 v49;
  _BOOL4 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  __int16 v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  llvm *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  llvm::Loop *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void **v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  llvm::Value *v89;
  char v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t LoopLatch;
  uint64_t v99;
  uint64_t **v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  void *v104;
  uint64_t v105;
  char v106;
  char *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  char v118;
  void **v119;
  unint64_t *v120;
  __int128 *v121;
  unint64_t *v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t *v126;
  char *v127;
  int v128;
  char *v129;
  uint64_t v130;
  uint64_t *v131;
  BOOL v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t **v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t **v148;
  uint64_t **v149;
  uint64_t **v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  _QWORD *v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  BOOL v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  _BYTE *v170;
  uint64_t v171;
  uint64_t *v172;
  llvm::LoopAccessInfo *v173;
  char v174;
  uint64_t *v175;
  _BOOL4 v176;
  int v177;
  unint64_t v178;
  int v179;
  int v180;
  unint64_t *v182;
  uint64_t v183;
  char v184;
  int v185;
  int v186;
  uint64_t *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  int v192;
  _BYTE v193[128];
  _QWORD **v194;
  _QWORD *v195[3];
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  char v203;
  unint64_t v204;
  int v205;
  void *v206[2];
  _QWORD v207[33];
  _QWORD *v208[2];
  void *v209;
  uint64_t v210;
  int v211;
  void *v212;
  _QWORD v213[2];
  uint64_t v214;
  void *v215;
  uint64_t v216;
  _BYTE v217[64];
  _BYTE *v218;
  void *v219;
  uint64_t v220;
  int v221;
  _BYTE v222[128];
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  uint64_t v230;
  int v231[2];
  uint64_t **v232;
  char v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  _BYTE v237[128];
  void *v238;
  uint64_t v239;
  _BYTE v240[128];
  void *v241;
  uint64_t v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  char v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  __int128 v251;
  uint64_t v252;

  v7 = (llvm::LoopAccessInfo *)a1;
  v252 = *MEMORY[0x1E0C80C00];
  v238 = v240;
  v239 = 0x1000000000;
  v235 = v237;
  v236 = 0x1000000000;
  *(_BYTE *)(a1 + 49) = 0;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(v8 + 16);
  v10 = (_BYTE *)v8;
  if ((_DWORD)v9)
  {
    v11 = *(_QWORD *)(v8 + 8);
    v12 = v11 + (v9 << 6);
    do
    {
      v13 = *(_QWORD *)(v12 - 48);
      if (v13 != -8192 && v13 != -4096 && v13 != 0)
      {
        v15 = *(_QWORD *)(v12 - 64) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v15 = *(_QWORD *)(v12 - 56);
        v16 = *(unint64_t **)(v12 - 56);
        if (v16)
        {
          *v16 = *v16 & 7 | v15;
        }
        else
        {
          v17 = *(_QWORD *)(v12 - 48);
          v18 = ***(int32x2_t ****)v17;
          v19 = (unint64_t)v18[303];
          if (v19 <= v15)
          {
            v20 = v18[305].u32[0];
            if (v19 + 16 * v20 > v15)
            {
              v21 = v20 - 1;
              LODWORD(v22) = v21 & ((v17 >> 4) ^ (v17 >> 9));
              v23 = (uint64_t *)(v19 + 16 * v22);
              v24 = *v23;
              if (v17 == *v23)
              {
LABEL_19:
                *v23 = -8192;
                v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
                v17 = *(_QWORD *)(v12 - 48);
              }
              else
              {
                v25 = 1;
                while (v24 != -4096)
                {
                  v26 = v22 + v25++;
                  v22 = v26 & v21;
                  v24 = *(_QWORD *)(v19 + 16 * v22);
                  if (v17 == v24)
                  {
                    v23 = (uint64_t *)(v19 + 16 * v22);
                    goto LABEL_19;
                  }
                }
              }
              *(_BYTE *)(v17 + 17) &= ~1u;
            }
          }
        }
      }
      v12 -= 64;
    }
    while (v12 != v11);
    v10 = (_BYTE *)*((_QWORD *)v7 + 1);
  }
  *(_DWORD *)(v8 + 16) = 0;
  *v10 = 0;
  isAnnotatedParallel = llvm::Loop::isAnnotatedParallel(*((llvm::Loop **)v7 + 3));
  v28 = *((_QWORD *)v7 + 3);
  v29 = *(_QWORD *)(v28 + 32);
  if (byte_1ED7F26F0)
  {
    v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 56) + 112);
    if (v30)
      LODWORD(v30) = (*(_BYTE *)(v30 + 17) & 4) != 0 || *(char *)(v30 + 13) < 0;
    v180 = v30 ^ 1;
  }
  else
  {
    v180 = 0;
  }
  v183 = *(_QWORD *)(v28 + 40);
  v173 = v7;
  if (v183 == v29)
    goto LABEL_158;
  v31 = 0;
  v32 = a4;
  v33 = v180;
  do
  {
    v34 = *(_QWORD *)v29 + 40;
    for (i = *(_QWORD *)(*(_QWORD *)v29 + 48); i != v34; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v36 = i - 24;
      else
        v36 = 0;
      v37 = *(unsigned __int8 *)(v36 + 16) - 33;
      v38 = v37 > 0x33;
      v39 = (1 << v37) & 0x8000000000041;
      if (!v38
        && v39 != 0
        && ((v41 = *(_QWORD *)(i + 40)) != 0 && (*(_BYTE *)(v41 + 12) & 0x40) != 0
         || llvm::CallBase::hasFnAttrOnCalledFunction(i - 24, 6)))
      {
        *((_BYTE *)v173 + 49) = 1;
      }
      if ((v31 & 1) != 0)
      {
        if (*((_BYTE *)v173 + 49))
        {
          *((_BYTE *)v173 + 48) = 0;
          goto LABEL_317;
        }
        goto LABEL_46;
      }
      v42 = *(unsigned __int8 *)(v36 + 16);
      v43 = (v42 - 33);
      if (v43 > 0x37)
        goto LABEL_51;
      if (((1 << (v42 - 33)) & 0x8000000000041) != 0)
      {
        v45 = *(_QWORD *)(v36 + 64);
        if (!v45 || (*(_BYTE *)(v45 + 20) & 4) == 0 && (*(_BYTE *)(v45 + 17) & 0x10) == 0)
        {
          LODWORD(v209) = 7;
          if (sub_1C53E4BBC(v36, (__int32 *)&v209, 1uLL))
          {
            v74 = *(_QWORD *)(v36 - 32);
            if (!v74 || *(_BYTE *)(v74 + 16) || *(_QWORD *)(v74 + 24) != *(_QWORD *)(v36 + 72))
            {
              v32 = a4;
              v33 = v180;
LABEL_79:
              v51 = *(unsigned __int8 *)(v36 + 16);
              if (v51 == 84)
                v52 = v36;
              else
                v52 = 0;
              if (!i || v51 != 84)
                goto LABEL_94;
              if (!llvm::getVectorIntrinsicIDForCall(v52, v32))
              {
                v53 = *(_QWORD *)(v52 + 64);
                if (v53 && (*(_BYTE *)(v53 + 14) & 0x10) != 0)
                {
LABEL_89:
                  if ((*(_BYTE *)(v53 + 12) & 0x10) == 0)
                    goto LABEL_90;
                  goto LABEL_91;
                }
                if (!llvm::CallBase::hasFnAttrOnCalledFunction(v52, 20))
                  goto LABEL_91;
                v53 = *(_QWORD *)(v52 + 64);
                if (v53)
                  goto LABEL_89;
LABEL_90:
                if (llvm::CallBase::hasFnAttrOnCalledFunction(v52, 4))
                {
LABEL_91:
                  v54 = *(_QWORD *)(v52 - 32);
                  if (v54 && !*(_BYTE *)(v54 + 16) && *(_QWORD *)(v54 + 24) == *(_QWORD *)(v52 + 72))
                  {
                    v209 = &v211;
                    v210 = 0x800000000;
                    sub_1C4EA1A3C((char **)v52, (uint64_t)&v209);
                    v69 = (char *)v209;
                    v177 = v210;
                    if ((_DWORD)v210)
                    {
                      v70 = 208 * v210;
                      do
                      {
                        v71 = isAnnotatedParallel;
                        v72 = (void **)&v69[v70];
                        if (v69[v70 - 9] < 0)
                          operator delete(*(v72 - 4));
                        if (*((char *)v72 - 33) < 0)
                          operator delete(*(void **)&v69[v70 - 56]);
                        v73 = *(char **)&v69[v70 - 200];
                        isAnnotatedParallel = v71;
                        if (&v69[v70 - 184] != v73)
                          free(v73);
                        v70 -= 208;
                      }
                      while (v70);
                      v69 = (char *)v209;
                      v32 = a4;
                      v33 = v180;
                    }
                    if (v69 != (char *)&v211)
                      free(v69);
                    if (v177)
                      goto LABEL_122;
                  }
                }
LABEL_94:
                v55 = *(unsigned __int8 *)(v36 + 16);
                if (v55 != 60)
                  v36 = 0;
                if (!i || v55 != 60)
                {
LABEL_101:
                  v59 = llvm::LoopAccessInfo::recordAnalysis((uint64_t)v173, (uint64_t)"CantVectorizeInstruction", 24, 0);
                  v209 = "instruction cannot be vectorized";
                  v60 = 32;
LABEL_102:
                  v210 = v60;
                  sub_1C53B17B4(v59 + 80, (const void **)&v209);
LABEL_46:
                  v31 = 1;
                  continue;
                }
                v56 = *(unsigned __int8 *)(v36 + 16);
                if (v56 == 60 || v56 == 61)
                {
                  v57 = *(_WORD *)(v36 + 18);
                  if ((v57 & 0x380) == 0)
                    goto LABEL_106;
                }
                else if ((v56 - 63) >= 3)
                {
                  v57 = *(_WORD *)(v36 + 18);
LABEL_106:
                  v58 = (v57 & 1) == 0;
LABEL_107:
                  if (((v58 | isAnnotatedParallel) & 1) == 0)
                  {
                    v59 = llvm::LoopAccessInfo::recordAnalysis((uint64_t)v173, (uint64_t)"NonSimpleLoad", 13, v36);
                    v209 = "read with atomic ordering or volatile read";
                    v60 = 42;
                    goto LABEL_102;
                  }
                  ++*((_DWORD *)v173 + 8);
                  v61 = v239;
                  if (v239 >= (unint64_t)HIDWORD(v239))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v238, (uint64_t)v240, v239 + 1, 8);
                    v61 = v239;
                  }
                  *((_QWORD *)v238 + v61) = v36;
                  LODWORD(v239) = v239 + 1;
                  v62 = v173;
                  v63 = *(_QWORD *)(v36 - 32);
                  v64 = *(_QWORD *)(*((_QWORD *)v173 + 2) + 8);
                  v209 = (void *)*((_QWORD *)v173 + 2);
                  v210 = v36;
                  v65 = (void (*)(uint64_t, uint64_t))sub_1C4EA3564;
LABEL_120:
                  sub_1C4E9D5E4(v63, v64, v65, (uint64_t)&v209);
                  if (v33)
                    llvm::LoopAccessInfo::collectStridedAccess(v62, (llvm::Value *)v36, v67, v68);
                  goto LABEL_122;
                }
                v58 = 0;
                goto LABEL_107;
              }
              goto LABEL_122;
            }
            v32 = a4;
            v33 = v180;
            if (*(_DWORD *)(v74 + 36) != 7)
              goto LABEL_79;
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction(v36, 66) & 1) == 0
            && (llvm::CallBase::hasFnAttrOnCalledFunction(v36, 44) & 1) == 0)
          {
            goto LABEL_79;
          }
        }
        goto LABEL_62;
      }
      if (((1 << (v42 - 33)) & 0x808001C8000010) != 0)
        goto LABEL_79;
      if (v43 == 28)
      {
        if ((*(_WORD *)(v36 + 18) & 0x301) != 0)
          goto LABEL_79;
LABEL_62:
        v42 = *(unsigned __int8 *)(v36 + 16);
      }
LABEL_51:
      v31 = 0;
      v44 = (v42 - 33);
      if (v44 > 0x37)
        continue;
      if (((1 << (v42 - 33)) & 0x8000000000041) == 0)
      {
        if (v44 == 27)
        {
          if ((*(_WORD *)(v36 + 18) & 0x301) != 0)
            goto LABEL_101;
          goto LABEL_122;
        }
        if (((1 << (v42 - 33)) & 0x808001D0000010) == 0)
          continue;
LABEL_69:
        if (v42 != 61)
          v36 = 0;
        if (!i || v42 != 61)
          goto LABEL_101;
        v48 = *(unsigned __int8 *)(v36 + 16);
        if (v48 == 60 || v48 == 61)
        {
          v49 = *(_WORD *)(v36 + 18);
          if ((v49 & 0x380) == 0)
            goto LABEL_115;
        }
        else if ((v48 - 63) >= 3)
        {
          v49 = *(_WORD *)(v36 + 18);
LABEL_115:
          v50 = (v49 & 1) == 0;
LABEL_116:
          if (((v50 | isAnnotatedParallel) & 1) == 0)
          {
            v59 = llvm::LoopAccessInfo::recordAnalysis((uint64_t)v173, (uint64_t)"NonSimpleStore", 14, v36);
            v209 = "write with atomic ordering or volatile write";
            v60 = 44;
            goto LABEL_102;
          }
          ++*((_DWORD *)v173 + 9);
          v66 = v236;
          if (v236 >= (unint64_t)HIDWORD(v236))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v235, (uint64_t)v237, v236 + 1, 8);
            v66 = v236;
          }
          *((_QWORD *)v235 + v66) = v36;
          LODWORD(v236) = v236 + 1;
          v62 = v173;
          v63 = *(_QWORD *)(v36 - 32);
          v64 = *(_QWORD *)(*((_QWORD *)v173 + 2) + 8);
          v209 = (void *)*((_QWORD *)v173 + 2);
          v210 = v36;
          v65 = (void (*)(uint64_t, uint64_t))sub_1C4EA3234;
          goto LABEL_120;
        }
        v50 = 0;
        goto LABEL_116;
      }
      v46 = *(_QWORD *)(v36 + 64);
      if (!v46 || (*(_BYTE *)(v46 + 17) & 0x30) == 0)
      {
        v47 = *(_DWORD *)(v36 + 20);
        if (v47 < 0)
        {
          v75 = v36 - 32 * (v47 & 0x7FFFFFF);
          v78 = *(_QWORD *)(v75 - 8);
          v76 = v75 - 8;
          v77 = v78;
          if (v78)
          {
            v79 = -v77;
            while (1)
            {
              v80 = *(_DWORD *)(*(_QWORD *)(v76 + v79) + 8);
              v38 = v80 > 7;
              v81 = (1 << v80) & 0x83;
              if (v38 || v81 == 0)
                break;
              v79 += 16;
              v32 = a4;
              v33 = v180;
              if (!v79)
                goto LABEL_66;
            }
            v32 = a4;
            v33 = v180;
            goto LABEL_69;
          }
        }
LABEL_66:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v36, 45) & 1) == 0
          && (llvm::CallBase::hasFnAttrOnCalledFunction(v36, 44) & 1) == 0)
        {
          v42 = *(unsigned __int8 *)(v36 + 16);
          goto LABEL_69;
        }
      }
LABEL_122:
      v31 = 0;
    }
    v29 += 8;
  }
  while (v29 != v183);
  v7 = v173;
  if ((v31 & 1) != 0)
  {
    *((_BYTE *)v173 + 48) = 0;
    goto LABEL_317;
  }
LABEL_158:
  if (!(_DWORD)v236)
  {
    *((_BYTE *)v7 + 48) = 1;
    goto LABEL_317;
  }
  v184 = isAnnotatedParallel;
  v83 = 0;
  v195[0] = 0;
  v195[1] = 0;
  v194 = v195;
  v84 = *((_QWORD *)v7 + 3);
  v85 = *(_QWORD *)v7;
  v210 = 0;
  v209 = 0;
  v211 = 0;
  v212 = 0;
  v213[0] = 0;
  v213[1] = 0;
  v214 = v84;
  v215 = v217;
  v216 = 0x800000000;
  v218 = v222;
  v219 = v222;
  v220 = 16;
  v221 = 0;
  v223 = a2;
  v224 = (uint64_t)&v224;
  v229 = 0;
  v227 = 0;
  v225 = &v224;
  v226 = 0;
  v228 = 0;
  v230 = 0;
  *(_QWORD *)v231 = a3;
  v232 = (uint64_t **)&v194;
  v233 = 0;
  v234 = v85;
  v206[0] = v207;
  v206[1] = (void *)0x1000000000;
  v208[1] = 0;
  v208[0] = 0;
  v207[32] = v208;
  v189 = v193;
  v190 = v193;
  v191 = 16;
  v192 = 0;
  v86 = 8 * v236;
  v87 = (uint64_t *)v235;
  do
  {
    v88 = *v87;
    v89 = *(llvm::Value **)(*v87 - 32);
    if (llvm::LoopAccessInfo::isUniform((const llvm::Loop **)v173, v89))
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v189, (uint64_t)v89);
      *((_BYTE *)v173 + 50) |= v90 ^ 1;
    }
    v91 = (uint64_t *)v88;
    if (*(_BYTE *)(v88 + 16) != 60)
      v91 = *(uint64_t **)(v88 - 64);
    v92 = *v91;
    v241 = v89;
    v242 = v92;
    if ((sub_1C4EA0100((uint64_t)v206, (unint64_t *)&v241) & 0x100000000) != 0)
    {
      v93 = *(_QWORD *)(v88 - 32);
      sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 40) + 56) + 40) + 272, **(_QWORD **)(v88 - 64));
      if (v95 == 1)
        v96 = -2;
      else
        v96 = (unint64_t)(v94 + 7) >> 3;
      llvm::Instruction::getAAMetadata((uint64_t ***)v88, &v197);
      *(_QWORD *)&v196 = v93;
      *((_QWORD *)&v196 + 1) = v96;
      v97 = *(_QWORD *)(v88 + 40);
      LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*((_QWORD *)v173 + 3));
      if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a5, v97, LoopLatch))
        *(_QWORD *)&v197 = 0;
      ++v83;
      v99 = *((_QWORD *)v173 + 3);
      v241 = &v209;
      v242 = v92;
      v243 = v196;
      v244 = v197;
      v245 = v198;
      sub_1C4E9D5E4(v93, v99, (void (*)(uint64_t, uint64_t))sub_1C4EA3804, (uint64_t)&v241);
    }
    ++v87;
    v86 -= 8;
  }
  while (v86);
  if ((v184 & 1) != 0)
    goto LABEL_198;
  if ((_DWORD)v239)
  {
    v185 = 0;
    v100 = (uint64_t **)v238;
    v101 = 8 * v239;
    do
    {
      v102 = *v100;
      if (!*v100 || (v103 = *v100, *((_BYTE *)v102 + 16) != 60))
        v103 = (uint64_t *)*(v102 - 8);
      v104 = (void *)*(v102 - 4);
      v105 = *v103;
      v241 = v104;
      v242 = v105;
      if ((sub_1C4EA0100((uint64_t)v206, (unint64_t *)&v241) & 0x100000000) != 0
        || !llvm::getPtrStride(*(int8x16_t **)v173, *v102, (llvm::Value *)v104, *((_QWORD *)v173 + 3), (uint64_t)v173 + 64, 0, 1))
      {
        ++v185;
        v106 = 1;
      }
      else
      {
        v106 = 0;
      }
      v107 = (char *)sub_1C477672C((uint64_t)&v189, (uint64_t)v104);
      if (v190 == v189)
        v108 = (uint64_t *)((char *)&v191 + 4);
      else
        v108 = &v191;
      if (v107 != &v190[8 * *(unsigned int *)v108])
        *((_BYTE *)v173 + 50) = 1;
      v109 = *(v102 - 4);
      sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(v102[5] + 56) + 40) + 272, *v102);
      if (v111 == 1)
        v112 = -2;
      else
        v112 = (unint64_t)(v110 + 7) >> 3;
      llvm::Instruction::getAAMetadata((uint64_t ***)v102, &v197);
      *(_QWORD *)&v196 = v109;
      *((_QWORD *)&v196 + 1) = v112;
      v113 = v102[5];
      v114 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*((_QWORD *)v173 + 3));
      if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(a5, v113, v114))
        *(_QWORD *)&v197 = 0;
      v115 = *((_QWORD *)v173 + 3);
      v241 = &v209;
      v242 = v105;
      v243 = v196;
      v244 = v197;
      v245 = v198;
      v246 = v106;
      sub_1C4E9D5E4(v109, v115, (void (*)(uint64_t, uint64_t))sub_1C4EA3C6C, (uint64_t)&v241);
      ++v100;
      v101 -= 8;
    }
    while (v101);
  }
  else
  {
    v185 = 0;
  }
  if (v83 == 1 && !v185)
  {
LABEL_198:
    *((_BYTE *)v173 + 48) = 1;
    goto LABEL_306;
  }
  v172 = v225;
  if (v225 == &v224)
    goto LABEL_287;
  while (2)
  {
    v116 = 0;
    v179 = 0;
    v117 = 0;
    v199 = 0;
    v200 = 0;
    v201 = 0;
    v196 = 0uLL;
    LODWORD(v197) = 0;
    v198 = 0uLL;
    v118 = 1;
    *((_QWORD *)&v197 + 1) = 0;
    while (2)
    {
      v174 = v118;
      v175 = (uint64_t *)v172[2];
      v186 = v117;
      if (v175)
      {
        while (1)
        {
          v119 = (void **)&v197 + 1;
          if ((v117 & 1) == 0)
            v119 = &v212;
          v120 = (unint64_t *)*v119;
          v121 = &v198;
          if ((v117 & 1) == 0)
            v121 = (__int128 *)v213;
          v122 = *(unint64_t **)v121;
          if (v120 != *(unint64_t **)v121)
            break;
LABEL_282:
          v175 = (uint64_t *)v175[2];
          if (!v175)
            goto LABEL_283;
        }
        v123 = *v175;
        v178 = *v175 & 0xFFFFFFFFFFFFFFFBLL;
        v182 = *(unint64_t **)v121;
        while (2)
        {
          v124 = *v120;
          if (v123 == (*v120 & 0xFFFFFFFFFFFFFFF8))
          {
            v125 = (char *)sub_1C477672C((uint64_t)&v218, v123);
            if (v219 == v218)
              v126 = (uint64_t *)((char *)&v220 + 4);
            else
              v126 = &v220;
            v127 = (char *)v219 + 8 * *(unsigned int *)v126;
            if (v125 == v127)
              v128 = 1;
            else
              v128 = (v124 >> 2) & 1;
            if ((v117 & v128 & 1) == 0)
            {
              v129 = v125;
              v130 = v124 & 4;
              v131 = (uint64_t *)(v130 | v178);
              sub_1C4EA1E64(v232, (uint64_t)v131, v131);
              if (((v117 | v128) & 1) != 0)
              {
                v132 = v129 == v127 && v130 == 0;
                if (!v132 && ((v179 ^ 1) & 1) == 0)
                {
                  v133 = v216;
                  if (v216 >= (unint64_t)HIDWORD(v216))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v215, (uint64_t)v217, v216 + 1, 8);
                    v133 = v216;
                  }
                  *((_QWORD *)v215 + v133) = v131;
                  LODWORD(v216) = v216 + 1;
                  v233 = 1;
                }
                v176 = v130 != 0;
                v241 = &v243;
                v242 = 0x1000000000;
                llvm::getUnderlyingObjects(v123, (uint64_t)&v241, *(uint64_t **)v231, (llvm::Value *)6);
                v134 = (uint64_t *)v241;
                v135 = (uint64_t *)((char *)v241 + 8 * v242);
                v188 = v135;
                if ((_DWORD)v242)
                {
                  while (1)
                  {
                    v136 = *v134;
                    if (*(_BYTE *)(*v134 + 16) != 19)
                      goto LABEL_235;
                    v137 = *(_DWORD *)(*(_QWORD *)v136 + 8);
                    if ((v137 & 0xFE) == 0x12)
                      v137 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v136 + 16) + 8);
                    v138 = *(_QWORD *)(**(_QWORD **)(v214 + 32) + 56);
                    if (v138)
                    {
                      v139 = *(_QWORD *)(v138 + 112);
                      if (v139)
                        break;
                    }
                    if (v137 >= 0x100)
                      goto LABEL_235;
LABEL_252:
                    if (++v134 == v135)
                    {
                      v134 = (uint64_t *)v241;
                      goto LABEL_267;
                    }
                  }
                  if ((*(_BYTE *)(v139 + 17) & 1) == 0 && v137 <= 0xFF)
                    goto LABEL_252;
LABEL_235:
                  v140 = v201;
                  if (v201)
                  {
                    v141 = (v201 - 1) & ((v136 >> 4) ^ (v136 >> 9));
                    v142 = *(_QWORD *)(v116 + 16 * v141);
                    if (v136 == v142)
                    {
LABEL_237:
                      if ((_DWORD)v141 != v201)
                      {
                        v143 = v131;
                        v144 = v123;
                        v145 = v232;
                        v146 = v116 + 16 * v141;
                        v147 = v143;
                        v148 = sub_1C4EA1E64(v232, (uint64_t)v143, v143);
                        v149 = sub_1C4EA1E64(v145, *(_QWORD *)(v146 + 8), *(uint64_t **)(v146 + 8));
                        v150 = v145 + 1;
                        v151 = v150 == v148 ? 0 : sub_1C4EA2500((uint64_t)(v148 + 4));
                        v152 = v150 == v149 ? 0 : sub_1C4EA2500((uint64_t)(v149 + 4));
                        v123 = v144;
                        v117 = v186;
                        v131 = v147;
                        v135 = v188;
                        if (v151 != v152)
                        {
                          *(_QWORD *)(*(_QWORD *)v151 + 8) = *(_QWORD *)(*(_QWORD *)v151 + 8) & 1 | v152;
                          *(_QWORD *)v151 = *(_QWORD *)v152;
                          v153 = *(_QWORD *)(v152 + 8) & 0xFFFFFFFFFFFFFFFELL;
                          *(_QWORD *)v152 = v151;
                          *(_QWORD *)(v152 + 8) = v153;
                        }
                      }
                    }
                    else
                    {
                      v157 = 1;
                      while (v142 != -4096)
                      {
                        v158 = v141 + v157++;
                        v141 = v158 & (v201 - 1);
                        v142 = *(_QWORD *)(v116 + 16 * v141);
                        if (v136 == v142)
                          goto LABEL_237;
                      }
                    }
                  }
                  v247 = 0;
                  v154 = sub_1C4EA246C(v116, v140, v136, &v247);
                  v155 = (_QWORD *)v247;
                  if ((v154 & 1) != 0)
                  {
LABEL_251:
                    v155[1] = v131;
                    goto LABEL_252;
                  }
                  if (4 * (int)v200 + 4 < 3 * v140)
                  {
                    if (v140 + ~(_DWORD)v200 - HIDWORD(v200) > v140 >> 3)
                      goto LABEL_248;
                    v156 = v140;
                  }
                  else
                  {
                    v156 = 2 * v140;
                  }
                  sub_1C4EA2544((uint64_t)&v199, v156);
                  v247 = 0;
                  v116 = v199;
                  sub_1C4EA246C(v199, v201, v136, &v247);
                  v155 = (_QWORD *)v247;
LABEL_248:
                  LODWORD(v200) = v200 + 1;
                  if (*v155 != -4096)
                    --HIDWORD(v200);
                  *v155 = v136;
                  v155[1] = 0;
                  goto LABEL_251;
                }
LABEL_267:
                if (v134 != (uint64_t *)&v243)
                  free(v134);
                v179 |= v176;
              }
              else
              {
                v249 = 0;
                v251 = 0u;
                v247 = 1;
                v248 = -4096;
                v250 = (char *)&v251 + 8;
                DWORD1(v251) = 1;
                v241 = (void *)(v130 | v178);
                v242 = 1;
                *(_QWORD *)&v243 = -4096;
                *(_QWORD *)&v244 = &v245;
                *((_QWORD *)&v244 + 1) = 0x100000000;
                v204 = v130 | v178;
                v205 = 0;
                sub_1C4EA1F34((uint64_t)&v202, (uint64_t)&v196, &v204, &v205);
                if (v203)
                {
                  v159 = v202;
                  v160 = v198;
                  if ((unint64_t)v198 >= *((_QWORD *)&v198 + 1))
                  {
                    v161 = sub_1C4EA2190((void **)&v197 + 1, (uint64_t)&v241);
                  }
                  else
                  {
                    *(_QWORD *)v198 = v241;
                    *(_QWORD *)(v160 + 8) = 1;
                    *(_QWORD *)(v160 + 16) = -4096;
                    sub_1C4EA2398((unsigned int *)(v160 + 8), (unsigned int *)&v242);
                    *(_QWORD *)(v160 + 32) = v160 + 48;
                    *(_QWORD *)(v160 + 40) = 0x100000000;
                    if (DWORD2(v244))
                      sub_1C4E41EEC(v160 + 32, (uint64_t)&v244);
                    v161 = (char *)(v160 + 56);
                  }
                  *(_QWORD *)&v198 = v161;
                  *(_DWORD *)(v159 + 8) = -1 - 1227133513 * ((unint64_t)&v161[-*((_QWORD *)&v197 + 1)] >> 3);
                }
                if ((__int128 *)v244 != &v245)
                  free((void *)v244);
                if ((v242 & 1) == 0)
                  MEMORY[0x1CAA32FB4](v243, 8);
                if (v250 != (char *)&v251 + 8)
                  free(v250);
                if ((v247 & 1) == 0)
                  MEMORY[0x1CAA32FB4](v248, 8);
              }
            }
            v122 = v182;
          }
          v120 += 7;
          if (v120 == v122)
            goto LABEL_282;
          continue;
        }
      }
LABEL_283:
      v118 = 0;
      v117 = 1;
      if ((v174 & 1) != 0)
        continue;
      break;
    }
    if (*((_QWORD *)&v197 + 1))
    {
      sub_1C4EA25FC((uint64_t *)&v197 + 1);
      operator delete(*((void **)&v197 + 1));
    }
    MEMORY[0x1CAA32FB4](v196, 8);
    MEMORY[0x1CAA32FB4](v116, 8);
    v172 = (uint64_t *)v172[1];
    if (v172 != &v224)
      continue;
    break;
  }
LABEL_287:
  *(_QWORD *)&v196 = 0;
  v162 = (uint64_t)v173 + 64;
  if ((sub_1C4EA023C((uint64_t)&v209, *((_QWORD *)v173 + 1), *((const llvm::Loop **)v173 + 3), (uint64_t)v173 + 64, (unint64_t *)&v196, 0) & 1) == 0)
  {
    if ((_QWORD)v196)
    {
      if (*(unsigned __int8 *)(v196 + 16) <= 0x1Bu)
        v166 = 0;
      else
        v166 = v196;
    }
    else
    {
      v166 = 0;
    }
    v167 = llvm::LoopAccessInfo::recordAnalysis((uint64_t)v173, (uint64_t)"CantIdentifyArrayBounds", 23, v166);
    v168 = "cannot identify array bounds";
    v169 = 28;
    goto LABEL_305;
  }
  *((_BYTE *)v173 + 48) = 1;
  if (!(_DWORD)v216)
  {
    v165 = 0;
    goto LABEL_303;
  }
  v163 = llvm::MemoryDepChecker::areDepsSafe(*((_QWORD *)v173 + 2), (uint64_t)&v194, (uint64_t)&v215, v162);
  *((_BYTE *)v173 + 48) = v163;
  v164 = *((_QWORD *)v173 + 2);
  *((_QWORD *)v173 + 5) = *(_QWORD *)(v164 + 192);
  if (v163)
  {
    v165 = 0;
    goto LABEL_303;
  }
  if (*(_BYTE *)(v164 + 208))
  {
    v165 = 1;
    if (*(_DWORD *)(v164 + 212) != 1)
      goto LABEL_303;
    LODWORD(v216) = 0;
    *(_DWORD *)(v164 + 232) = 0;
    sub_1C619E3C0(*((_QWORD **)v173 + 1));
    v170 = (_BYTE *)*((_QWORD *)v173 + 1);
    *v170 = 1;
    *(_QWORD *)&v196 = 0;
    if ((sub_1C4EA023C((uint64_t)&v209, (uint64_t)v170, *((const llvm::Loop **)v173 + 3), v162, (unint64_t *)&v196, 1) & 1) != 0)
    {
      v165 = 0;
      *((_BYTE *)v173 + 48) = 1;
      goto LABEL_303;
    }
    if ((_QWORD)v196)
    {
      if (*(unsigned __int8 *)(v196 + 16) <= 0x1Bu)
        v171 = 0;
      else
        v171 = v196;
    }
    else
    {
      v171 = 0;
    }
    v167 = llvm::LoopAccessInfo::recordAnalysis((uint64_t)v173, (uint64_t)"CantCheckMemDepsAtRunTime", 25, v171);
    v168 = "cannot check memory dependencies at runtime";
    v169 = 43;
LABEL_305:
    v241 = v168;
    v242 = v169;
    sub_1C53B17B4(v167 + 80, (const void **)&v241);
    *((_BYTE *)v173 + 48) = 0;
  }
  else
  {
    v165 = 1;
LABEL_303:
    if (*((_BYTE *)v173 + 49))
    {
      v167 = llvm::LoopAccessInfo::recordAnalysis((uint64_t)v173, (uint64_t)"CantInsertRuntimeCheckWithConvergent", 36, 0);
      v168 = "cannot add control dependency to convergent operation";
      v169 = 53;
      goto LABEL_305;
    }
    if (v165)
      llvm::LoopAccessInfo::emitUnsafeDependenceRemark(v173);
  }
LABEL_306:
  if (v190 != v189)
    free(v190);
  sub_1C6143384(v208[0]);
  if (v206[0] != v207)
    free(v206[0]);
  sub_1C4D992E4((uint64_t)&v223);
  if (v219 != v218)
    free(v219);
  if (v215 != v217)
    free(v215);
  if (v212)
  {
    sub_1C4EA25FC((uint64_t *)&v212);
    operator delete(v212);
  }
  MEMORY[0x1CAA32FB4](v209, 8);
  sub_1C6143384(v195[0]);
LABEL_317:
  if (v235 != v237)
    free(v235);
  if (v238 != v240)
    free(v238);
}

