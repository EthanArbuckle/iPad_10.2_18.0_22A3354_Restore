uint64_t sub_1C4D80634(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, char a7, char a8)
{
  uint64_t *v16;
  llvm::TargetLibraryInfoWrapperPass *v17;
  void *v19[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  void *__p[2];
  uint64_t v24;

  *(_QWORD *)a1 = a3;
  v16 = llvm::nulls((llvm *)a1);
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = &unk_1E8133330;
  *(_QWORD *)(a1 + 72) = v16;
  llvm::legacy::PassManager::PassManager((llvm::legacy::PassManager *)(a1 + 80));
  *(_BYTE *)(a1 + 96) = a8;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C47EBC30(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v24 = *(_QWORD *)(a2 + 16);
  }
  llvm::AGX::AGCStatusPrinter::AGCStatusPrinter((llvm::AGX::AGCStatusPrinter *)(a1 + 104), a6, (uint64_t)__p, a4, a5, a7);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  llvm::AGX::AGCStatusPrinter::hookLoweredPrinter(a1 + 104, (llvm::legacy::PassManager *)(a1 + 80));
  v17 = (llvm::TargetLibraryInfoWrapperPass *)operator new();
  if (*(char *)(a3 + 471) < 0)
  {
    sub_1C47EBC30(v19, *(void **)(a3 + 448), *(_QWORD *)(a3 + 456));
  }
  else
  {
    *(_OWORD *)v19 = *(_OWORD *)(a3 + 448);
    v20 = *(_QWORD *)(a3 + 464);
  }
  v22 = *(_QWORD *)(a3 + 488);
  v21 = *(_OWORD *)(a3 + 472);
  llvm::TargetLibraryInfoWrapperPass::TargetLibraryInfoWrapperPass(v17, (const llvm::Triple *)v19);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(*(_QWORD *)(a1 + 88) + 416), (const void **)v17);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  return a1;
}

uint64_t sub_1C4D807CC(uint64_t *a1)
{
  const void **v2;
  uint64_t result;
  uint64_t (**v4)(void);
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E81335F0;
  v5[1] = a1;
  v6 = v5;
  v2 = (const void **)sub_1C627D0AC(*a1);
  llvm::PMTopLevelManager::schedulePass((int32x2_t *)(a1[11] + 416), v2);
  result = (uint64_t)v6;
  if (v6 == v5)
  {
    v4 = (uint64_t (**)(void))(v5[0] + 32);
  }
  else
  {
    if (!v6)
      return result;
    v4 = (uint64_t (**)(void))(*v6 + 40);
  }
  return (*v4)();
}

uint64_t sub_1C4D80878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = a3;
  if ((_DWORD)a3 == 1)
    goto LABEL_4;
  if ((_DWORD)a3 == 2)
  {
    v5 = 0;
LABEL_4:
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 120))(a2, a1 + 80, a1 + 8, 0, v5, 1, 0);
    if (v6)
    {
      v7 = (char *)operator new(0x20uLL);
      strcpy(v7, "Can't initialize backend");
      v8 = operator new();
      *(_DWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 24;
      *(_QWORD *)(v8 + 32) = 0x8000000000000020;
      *(_QWORD *)v8 = &unk_1E8133408;
      v19 = v8;
      v9 = *(uint64_t **)(a4 + 8);
      if ((unint64_t)v9 >= *(_QWORD *)(a4 + 16))
      {
        v14 = sub_1C4D62F9C((char **)a4, &v19);
        v15 = v19;
        *(_QWORD *)(a4 + 8) = v14;
        v19 = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
      else
      {
        *v9 = v8;
        *(_QWORD *)(a4 + 8) = v9 + 1;
      }
    }
    return v6 ^ 1u;
  }
  v10 = (char *)operator new(0x38uLL);
  strcpy(v10, "Can't initialize backend, unhandled OutputSelection");
  v11 = operator new();
  *(_DWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = 51;
  *(_QWORD *)(v11 + 32) = 0x8000000000000038;
  *(_QWORD *)v11 = &unk_1E8133408;
  v20 = v11;
  v12 = *(uint64_t **)(a4 + 8);
  if ((unint64_t)v12 >= *(_QWORD *)(a4 + 16))
  {
    v17 = sub_1C4D62F9C((char **)a4, &v20);
    v18 = v20;
    *(_QWORD *)(a4 + 8) = v17;
    v20 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    return 0;
  }
  else
  {
    v13 = 0;
    *v12 = v11;
    *(_QWORD *)(a4 + 8) = v12 + 1;
  }
  return v13;
}

void sub_1C4D80A70()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D80A84()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8133560;
  return result;
}

void sub_1C4D80AA8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8133560;
}

uint64_t sub_1C4D80AC0()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F7639;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E81A9158;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = &unk_1C877348F;
  *(_DWORD *)(result + 56) = 1;
  return result;
}

void sub_1C4D80B24()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D80B38()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81335A8;
  return result;
}

void sub_1C4D80B5C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81335A8;
}

uint64_t sub_1C4D80B74()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F7129;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E8171EE0;
  return result;
}

void sub_1C4D80BC0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D80BD4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81335F0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4D80C08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81335F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4D80C24(uint64_t a1)
{
  return sub_1C627D0AC(**(_QWORD **)(a1 + 8));
}

void sub_1C4D80C34()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D80C48(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8133638;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4D80C7C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8133638;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4D80C98(uint64_t a1)
{
  uint64_t TargetTransformInfoWrapperPass;
  void (**v2)(void);
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  llvm::TargetMachine::getTargetIRAnalysis(**(llvm::TargetMachine ***)(a1 + 8), (uint64_t)v4);
  TargetTransformInfoWrapperPass = llvm::createTargetTransformInfoWrapperPass(v4);
  if (v5 == v4)
  {
    v2 = (void (**)(void))(v4[0] + 32);
    goto LABEL_5;
  }
  if (v5)
  {
    v2 = (void (**)(void))(*v5 + 40);
LABEL_5:
    (*v2)();
  }
  return TargetTransformInfoWrapperPass;
}

void sub_1C4D80D3C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D80D50()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8133758;
  return result;
}

void sub_1C4D80D74(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8133758;
}

uint64_t sub_1C4D80D8C()
{
  uint64_t ExternalAAWrapperPass;
  void (**v1)(void);
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = &off_1E81337A0;
  v4 = v3;
  ExternalAAWrapperPass = llvm::createExternalAAWrapperPass(v3);
  if (v4 == v3)
  {
    v1 = (void (**)(void))(v3[0] + 32);
    goto LABEL_5;
  }
  if (v4)
  {
    v1 = (void (**)(void))(*v4 + 40);
LABEL_5:
    (*v1)();
  }
  return ExternalAAWrapperPass;
}

void sub_1C4D80E30()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D80E44()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81337A0;
  return result;
}

void sub_1C4D80E68(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81337A0;
}

_QWORD *sub_1C4D80E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  result = (_QWORD *)llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a2 + 8) + 24), &llvm::GPUAAWrapperPass::ID, 1);
  if (result)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, void *))(*result + 96))(result, &llvm::GPUAAWrapperPass::ID);
    if (result)
    {
      v6 = (_QWORD *)result[4];
      v7 = (_QWORD *)operator new();
      *v7 = &unk_1E8133F60;
      v7[1] = v6;
      *v6 = a4;
      v9 = v7;
      v8 = *(_QWORD **)(a4 + 16);
      if ((unint64_t)v8 < *(_QWORD *)(a4 + 24))
      {
        *v8 = v7;
        result = v8 + 1;
      }
      else
      {
        result = sub_1C4D80F34((char **)(a4 + 8), &v9);
      }
      *(_QWORD *)(a4 + 16) = result;
    }
  }
  return result;
}

char *sub_1C4D80F34(char **a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a1;
  v2 = a1[1];
  v4 = (v2 - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    abort();
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 61)
      sub_1C4764EE4();
    v10 = (char *)operator new(8 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[8 * v4];
  v12 = &v10[8 * v9];
  *(_QWORD *)v11 = *a2;
  v13 = v11 + 8;
  if (v2 == v3)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v14 = *((_QWORD *)v2 - 1);
      v2 -= 8;
      *(_QWORD *)v2 = 0;
      *((_QWORD *)v11 - 1) = v14;
      v11 -= 8;
    }
    while (v2 != v3);
    v2 = *a1;
    v15 = a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v15 != v2)
    {
      v17 = *((_QWORD *)v15 - 1);
      v15 -= 8;
      v16 = v17;
      *(_QWORD *)v15 = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  if (v2)
    operator delete(v2);
  return v13;
}

void sub_1C4D8103C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D81050(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(result + 8) = a2;
  return result;
}

BOOL sub_1C4D8105C(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;

  v3 = **a2;
  v4 = *(_DWORD *)(v3 + 8);
  if (v4 != 15)
    return 1;
  v5 = **a3;
  v6 = *(_DWORD *)(v5 + 8);
  if (v6 != 15)
    return 1;
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**(_QWORD **)(v3 + 16) + 8);
  if ((v6 & 0xFE) == 0x12)
    v6 = *(_DWORD *)(**(_QWORD **)(v5 + 16) + 8);
  return v6 < 0x100 || v4 < 0x100 || (v6 ^ v4) <= 0xFF;
}

BOOL sub_1C4D810F0(uint64_t a1, llvm **a2)
{
  llvm *UnderlyingObject;
  int v3;

  UnderlyingObject = llvm::getUnderlyingObject(*a2, (const llvm::Value *)6);
  v3 = *(_DWORD *)(*(_QWORD *)UnderlyingObject + 8);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)UnderlyingObject + 16) + 8);
  return (v3 & 0xFFFFFF00) == 512;
}

uint64_t sub_1C4D8113C()
{
  return 7;
}

uint64_t sub_1C4D81144(uint64_t a1, const llvm::CallBase *a2)
{
  return llvm::GPUAAResult::getModRefBehavior(*(llvm::GPUAAResult **)(a1 + 8), a2);
}

uint64_t sub_1C4D8114C(uint64_t a1, llvm::Value *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t result;
  _QWORD *v6;
  char *Name;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v13;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *((_QWORD *)this + 14);
  if (v3)
  {
    if ((*(_BYTE *)(v3 + 17) & 0x10) != 0)
      return 4;
    if ((*(_BYTE *)(v3 + 17) & 0x20) != 0)
      v4 = 61;
    else
      v4 = 63;
    if ((*(_BYTE *)(v3 + 12) & 8) != 0)
      result = v4 & 0xF;
    else
      result = v4;
  }
  else
  {
    result = 63;
  }
  v6 = *(_QWORD **)(v2 + 8);
  if ((*(_BYTE *)(v6[1] + 40) & 0x80) == 0 && *(unsigned __int8 *)(*v6 + 81) >= 0x40u)
  {
    v13 = result;
    Name = llvm::Value::getName(this);
    if (v8 == 16
      && (*(_QWORD *)Name == *(_QWORD *)"memset_pattern16"
        ? (v9 = *((_QWORD *)Name + 1) == *(_QWORD *)"attern16")
        : (v9 = 0),
          v9
       && (v10 = *((_QWORD *)this + 3), *(_DWORD *)(v10 + 8) <= 0xFFu)
       && *(_DWORD *)(v10 + 12) == 4
       && (v11 = *(_QWORD **)(v10 + 16), *(_BYTE *)(v11[1] + 8) == 15)
       && *(_BYTE *)(v11[2] + 8) == 15
       && *(_BYTE *)(v11[3] + 8) == 13))
    {
      return 15;
    }
    else
    {
      return v13;
    }
  }
  return result;
}

uint64_t sub_1C4D81260()
{
  return 7;
}

uint64_t sub_1C4D81268()
{
  return 7;
}

void sub_1C4D81274()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81288(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81337E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4D812BC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81337E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4D812D8(uint64_t a1)
{
  return llvm::createArgumentPromotionPass((llvm *)**(unsigned int **)(a1 + 8));
}

void sub_1C4D812E8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D812FC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8133878;
  return result;
}

void sub_1C4D81320(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8133878;
}

uint64_t sub_1C4D81338()
{
  return llvm::createAlwaysInlinerLegacyPass(0);
}

void sub_1C4D81344()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81358()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81338C0;
  return result;
}

void sub_1C4D8137C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81338C0;
}

void sub_1C4D8139C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D813B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8133908;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4D813E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8133908;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4D81400(uint64_t a1)
{
  return sub_1C627A444(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 20));
}

void sub_1C4D81410()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81424(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8133950;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4D81458(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8133950;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4D81474(uint64_t a1)
{
  return sub_1C6282770(**(_DWORD **)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4));
}

void sub_1C4D81484()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81498()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81339E0;
  return result;
}

void sub_1C4D814BC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81339E0;
}

void sub_1C4D814DC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D814F0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8133A28;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4D81524(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8133A28;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4D81540(uint64_t a1)
{
  return llvm::createLoopRotatePass((llvm *)*(unsigned int *)(*(_QWORD *)(a1 + 8) + 12), 0);
}

void sub_1C4D81554()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81568()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8133A70;
  return result;
}

void sub_1C4D8158C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8133A70;
}

uint64_t sub_1C4D815A4()
{
  int v1;

  return llvm::createLoopUnrollPass((llvm *)2, 0, 0, -1, -1, -1, -1, -1, -1, v1);
}

void sub_1C4D815EC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81600()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8133AB8;
  return result;
}

void sub_1C4D81624(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8133AB8;
}

void sub_1C4D81644()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81658()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8133B00;
  return result;
}

void sub_1C4D8167C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8133B00;
}

void sub_1C4D8169C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D816B0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8133B48;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4D816E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8133B48;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4D81700(uint64_t a1)
{
  return sub_1C6282770(**(_DWORD **)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4));
}

void sub_1C4D81710()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81724()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8133B90;
  return result;
}

void sub_1C4D81748(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8133B90;
}

uint64_t sub_1C4D81760()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F7129;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E8171EE0;
  return result;
}

void sub_1C4D817AC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D817C0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8133BD8;
  return result;
}

void sub_1C4D817E4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8133BD8;
}

void sub_1C4D81804()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81818(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8133C20;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4D8184C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8133C20;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4D81868(uint64_t a1)
{
  return sub_1C627D43C(*(_BYTE *)(*(_QWORD *)(a1 + 8) + 18));
}

void sub_1C4D81878()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D8188C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8133C68;
  return result;
}

void sub_1C4D818B0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8133C68;
}

uint64_t sub_1C4D818C8()
{
  uint64_t CFGSimplificationPass;
  void (**v1)(void);
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 3;
  v4 = 0x101010001010001;
  v5 = 0;
  v6 = 0;
  v8 = 0;
  CFGSimplificationPass = llvm::createCFGSimplificationPass((uint64_t)&v3, v7);
  if (v8 == v7)
  {
    v1 = (void (**)(void))(v7[0] + 32);
    goto LABEL_5;
  }
  if (v8)
  {
    v1 = (void (**)(void))(*v8 + 40);
LABEL_5:
    (*v1)();
  }
  return CFGSimplificationPass;
}

void sub_1C4D81980()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81994()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8133CB0;
  return result;
}

void sub_1C4D819B8(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8133CB0;
}

void sub_1C4D819D8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D819EC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8133CF8;
  return result;
}

void sub_1C4D81A10(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8133CF8;
}

uint64_t sub_1C4D81A28()
{
  return sub_1C627E3D8(0);
}

void sub_1C4D81A34()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81A48()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8133D40;
  return result;
}

void sub_1C4D81A6C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8133D40;
}

uint64_t sub_1C4D81A84()
{
  uint64_t InternalizePass;
  void (**v1)(void);
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[0] = &off_1E8133D88;
  v4 = v3;
  InternalizePass = llvm::createInternalizePass(v3);
  if (v4 == v3)
  {
    v1 = (void (**)(void))(v3[0] + 32);
    goto LABEL_5;
  }
  if (v4)
  {
    v1 = (void (**)(void))(*v4 + 40);
LABEL_5:
    (*v1)();
  }
  return InternalizePass;
}

void sub_1C4D81B28()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81B3C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8133D88;
  return result;
}

void sub_1C4D81B60(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8133D88;
}

BOOL sub_1C4D81B78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;

  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    v3 = ***(_QWORD ***)a2;
    v4 = *(_QWORD *)(v3 + 152);
    v5 = *(unsigned int *)(v3 + 168);
    if ((_DWORD)v5)
    {
      LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v7 = (uint64_t *)(v4 + 16 * v6);
      v8 = *v7;
      if (*v7 == a2)
      {
LABEL_9:
        v11 = v7[1];
        if (*(_QWORD *)v11 >= 4uLL && *(_DWORD *)(v11 + 16) == 778266465)
          return 1;
        goto LABEL_11;
      }
      v9 = 1;
      while (v8 != -4096)
      {
        v10 = v6 + v9++;
        v6 = v10 & (v5 - 1);
        v8 = *(_QWORD *)(v4 + 16 * v6);
        if (v8 == a2)
        {
          v7 = (uint64_t *)(v4 + 16 * v6);
          goto LABEL_9;
        }
      }
    }
    v7 = (uint64_t *)(v4 + 16 * v5);
    goto LABEL_9;
  }
LABEL_11:
  sub_1C611A8F4(&v13, *(_QWORD *)(a2 + 40));
  return sub_1C611A970((uint64_t)&v13, a2) || *(_BYTE *)(a2 + 16) == 3 && (*(_BYTE *)(a2 + 80) & 2) != 0;
}

void sub_1C4D81C74()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81C88(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8133DD0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4D81CBC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8133DD0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4D81CD8(uint64_t a1)
{
  uint64_t TargetTransformInfoWrapperPass;
  void (**v2)(void);
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  llvm::TargetMachine::getTargetIRAnalysis(**(llvm::TargetMachine ***)(a1 + 8), (uint64_t)v4);
  TargetTransformInfoWrapperPass = llvm::createTargetTransformInfoWrapperPass(v4);
  if (v5 == v4)
  {
    v2 = (void (**)(void))(v4[0] + 32);
    goto LABEL_5;
  }
  if (v5)
  {
    v2 = (void (**)(void))(*v5 + 40);
LABEL_5:
    (*v2)();
  }
  return TargetTransformInfoWrapperPass;
}

void sub_1C4D81D7C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81D90(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8133E18;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4D81DC4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8133E18;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4D81DE0(uint64_t a1)
{
  return sub_1C6282770(**(_DWORD **)(a1 + 8), *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4));
}

void sub_1C4D81DF0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81E04()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8133E60;
  return result;
}

void sub_1C4D81E28(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8133E60;
}

void sub_1C4D81E48()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D81E5C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8133EA8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4D81E90(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8133EA8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4D81EAC(uint64_t a1)
{
  return sub_1C627A444(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 20));
}

uint64_t *sub_1C4D81EB8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    llvm::AGX::AGCStatusPrinter::~AGCStatusPrinter((llvm::AGX::AGCStatusPrinter *)(v2 + 104));
    *(_QWORD *)(v2 + 80) = &off_1E81682B8;
    v3 = *(_QWORD *)(v2 + 88);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_QWORD *)(v2 + 8) = &unk_1E8133330;
    v4 = *(const char **)(v2 + 40);
    v5 = *(const char **)(v2 + 24);
    v6 = v4 - v5;
    if (v4 != v5)
    {
      *(_QWORD *)(v2 + 40) = v5;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)(v2 + 8), v5, v6);
    }
    *(_QWORD *)(v2 + 8) = off_1E81A6E70;
    if (*(_DWORD *)(v2 + 64) == 1)
    {
      v7 = *(_QWORD *)(v2 + 24);
      if (v7)
        MEMORY[0x1CAA32F9C](v7, 0x1000C8077774924, v6);
    }
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

void sub_1C4D81F90(uint64_t a1, uint64_t a2)
{
  xpc_object_t **v2;
  xpc_object_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(xpc_object_t ***)(*(_QWORD *)a2 + 56);
  if (v2)
  {
    v3 = *v2;
    if (v3)
    {
      v4 = 3;
      if (!*(_BYTE *)(*(_QWORD *)a2 + 17))
        v4 = 1;
      if (*(_BYTE *)(a1 + 96))
        v5 = 2;
      else
        v5 = v4;
      xpc_dictionary_set_uint64(*v3, "instruction_selector", v5);
    }
  }
}

void sub_1C4D81FD8(uint64_t a1, llvm::TargetMachine **a2, llvm::AGX::CompileRequest *a3)
{
  const std::string *v6;
  llvm::Module *v7;
  std::string *v8;
  llvm::LLVMContext *v9;
  uint64_t v10;
  llvm::TargetMachine *v11;
  llvm::TargetMachine *v12;
  llvm::TargetMachine *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t v23;
  uint64_t v24;
  uint64_t (***v25)();
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  void **v44;
  void **v45;
  uint64_t v46;
  uint64_t *v47;
  llvm *v48;
  const char *v49;
  const char *v50;
  __int128 v51;
  llvm *v52;
  llvm::TargetMachine *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  llvm::AGX::AGCStatusPrinter *v57;
  __int128 v58;
  uint64_t *v59;
  void *__dst[2];
  void *v61;
  void *__p[2];
  char v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  float64x2_t v67;
  double v68;
  int64x2_t v69;
  void (**v70)(llvm::raw_ostream *__hidden);
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  int v77;
  void **v78;
  void *v79[2];
  uint64_t v80;
  _QWORD v81[2];
  char *v82;
  uint64_t *v83;
  uint64_t *v84;
  float64x2_t v85;
  double v86;
  int64x2_t v87;
  void **v88;
  BOOL (*v89)(llvm::AGXIR *, const llvm::Module *, size_t);
  __int16 v90;
  void ***v91;
  uint64_t (**v92)();
  __int128 v93;
  uint64_t (***v94)();
  uint64_t (**v95)();
  void *v96;
  uint64_t v97;
  _QWORD v98[3];
  _BYTE v99[120];
  _QWORD *v100;
  uint64_t v101;
  _QWORD v102[19];
  uint64_t v103;
  char **v104;
  __int16 v105;
  __int16 v106;
  _QWORD *v107;
  __int128 v108;
  _QWORD v109[3];
  _QWORD v110[17];
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD v115[19];
  _QWORD v116[7];

  v116[4] = *MEMORY[0x1E0C80C00];
  llvm::TimeRecord::getCurrentTime((llvm::TimeRecord *)1, (uint64_t)&v85);
  v6 = *(const std::string **)a3;
  v7 = *(llvm::Module **)(*(_QWORD *)a3 + 8);
  if (byte_1ED7EF158 && (*((_DWORD *)*a2 + 118) & 0xFFFFFFFE) == 0x1C)
    v6->__r_.__value_.__s.__data_[16] = 0;
  v57 = (llvm::AGX::AGCStatusPrinter *)(a2 + 13);
  v8 = (std::string *)a2[30];
  if (v8)
  {
    std::string::operator=(v8 + 3, v6 + 1);
    v8[4].__r_.__value_.__r.__words[0] = *(int *)(*(_QWORD *)a3 + 48);
    if (a2[30])
      llvm::AGX::AGCReplay::serializeRequestToIR(v57, a3, *a2);
  }
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v9 = *(llvm::LLVMContext **)v7;
  v81[0] = v9;
  v10 = *(_QWORD *)(*(_QWORD *)v9 + 72);
  *(_QWORD *)(*(_QWORD *)v9 + 72) = 0;
  v81[1] = v10;
  llvm::AGX::DiagnosticManager::install((llvm::AGX::DiagnosticManager *)&v82, v9);
  v11 = a2[30];
  if (v11)
  {
    v54 = **(uint64_t ***)a3;
    if (!v54)
      v54 = llvm::nulls(0);
    *((_QWORD *)v11 + 8) = v54;
  }
  v12 = *a2;
  *((_DWORD *)v12 + 276) = 2 - v6->__r_.__value_.__s.__data_[18];
  *((_WORD *)v12 + 510) = *((_WORD *)v12 + 510) & 0xFFFE | v6->__r_.__value_.__s.__data_[16];
  *((_WORD *)*a2 + 510) = *((_WORD *)*a2 + 510) & 0xFFFD | (2 * (v6->__r_.__value_.__s.__data_[16] & 0x7F));
  *((_WORD *)*a2 + 510) = *((_WORD *)*a2 + 510) & 0xFFFB | (4 * (v6->__r_.__value_.__s.__data_[16] & 0x3F));
  *((_WORD *)*a2 + 510) = *((_WORD *)*a2 + 510) & 0xFFEF | (16 * (v6->__r_.__value_.__s.__data_[16] & 0xF));
  *((_WORD *)*a2 + 510) = *((_WORD *)*a2 + 510) & 0xF7FF | (v6->__r_.__value_.__s.__data_[17] << 11);
  *((_WORD *)*a2 + 510) = *((_WORD *)*a2 + 510) & 0xEFFF | (*((unsigned __int8 *)a2 + 96) << 12);
  v13 = *a2;
  v14 = (uint64_t)*a2 + 1008;
  v15 = (uint64_t)*a2 + 704;
  *((_BYTE *)v13 + 704) = *(_BYTE *)v15 & 0xFE | *(_BYTE *)v14 & 1;
  *((_DWORD *)v13 + 177) = *((_DWORD *)v13 + 253);
  *((_DWORD *)v13 + 178) = *((_DWORD *)v13 + 254);
  *(_OWORD *)(v15 + 12) = *(_OWORD *)(v14 + 12);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(v14 + 24);
  sub_1C4D82DC0((_QWORD *)v13 + 93, (uint64_t *)v13 + 131);
  *((_WORD *)v13 + 380) = *((_WORD *)v13 + 532);
  std::string::operator=((std::string *)v13 + 32, (const std::string *)((char *)v13 + 1072));
  *(_OWORD *)(v15 + 88) = *(_OWORD *)(v14 + 88);
  *(_OWORD *)(v15 + 104) = *(_OWORD *)(v14 + 104);
  *((_QWORD *)v13 + 103) = *((_QWORD *)v13 + 141);
  *((_DWORD *)v13 + 208) = *((_DWORD *)v13 + 284);
  std::string::operator=((std::string *)v13 + 35, (const std::string *)((char *)v13 + 1144));
  std::string::operator=((std::string *)v13 + 36, (const std::string *)((char *)v13 + 1168));
  std::string::operator=((std::string *)v13 + 37, (const std::string *)((char *)v13 + 1192));
  std::string::operator=((std::string *)v13 + 38, (const std::string *)((char *)v13 + 1216));
  *(_OWORD *)(v15 + 232) = *(_OWORD *)(v14 + 232);
  *((_QWORD *)v13 + 119) = *((_QWORD *)v13 + 157);
  sub_1C4D82E38((uint64_t)v13 + 960, *((std::string **)v13 + 158), *((std::string **)v13 + 159), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v13 + 159) - *((_QWORD *)v13 + 158)) >> 3));
  std::string::operator=((std::string *)v13 + 41, (const std::string *)((char *)v13 + 1288));
  v16 = *((_BYTE *)*a2 + 471);
  if (v16 >= 0)
    v17 = (char *)*a2 + 448;
  else
    v17 = (void *)*((_QWORD *)*a2 + 56);
  if (v16 >= 0)
    v18 = v16 & 0x7F;
  else
    v18 = *((_QWORD *)*a2 + 57);
  sub_1C4D828E4((uint64_t)v7, v17, v18);
  v105 = 0;
  v106 = 0;
  v107 = v109;
  v108 = xmmword_1C6464ED0;
  v109[1] = v110;
  v109[2] = 0x1000000000;
  v110[16] = 0;
  v111 = 0;
  v112 = 0;
  v113 = v115;
  v114 = 0x800000000;
  v115[16] = 0;
  v115[17] = v116;
  v115[18] = 0x800000000;
  sub_1C48815D8((uint64_t)&v104, (uint64_t)v7 + 272);
  v19 = HIBYTE(v112) & 0x7F;
  if (v112 < 0)
    v19 = v111;
  if (!v19)
  {
    v20 = (uint64_t)*a2 + 16;
    LOWORD(v89) = 0;
    v90 = 0;
    v92 = (uint64_t (**)())&v94;
    v93 = xmmword_1C6464ED0;
    v95 = (uint64_t (**)())&v97;
    v96 = (void *)0x1000000000;
    memset(&v99[96], 0, 24);
    v100 = v102;
    v101 = 0x800000000;
    v102[16] = 0;
    v102[17] = &v103;
    v102[18] = 0x800000000;
    sub_1C48815D8((uint64_t)&v88, v20);
    sub_1C48815D8((uint64_t)v7 + 272, (uint64_t)&v88);
    llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v88);
  }
  v21 = 0;
  v88 = (void **)&off_1E8133EF0;
  v89 = sub_1C4D829B0;
  v91 = &v88;
  v92 = &off_1E8133EF0;
  *(_QWORD *)&v93 = sub_1C4D82AF4;
  v94 = &v92;
  v95 = &off_1E8133EF0;
  v98[0] = &v95;
  v96 = sub_1C4D82C48;
  do
  {
    v22 = (uint64_t (***)())v98[v21];
    if (&(&v95)[v21] == v22)
    {
      v22 = &(&v95)[v21];
      v23 = 4;
    }
    else
    {
      if (!v22)
        goto LABEL_22;
      v23 = 5;
    }
    (*v22)[v23]();
LABEL_22:
    v21 -= 4;
  }
  while (v21 != -12);
  v24 = 0;
  v88 = (void **)&off_1E8133EF0;
  v89 = sub_1C4D829B0;
  v91 = &v88;
  v92 = &off_1E8133EF0;
  *(_QWORD *)&v93 = sub_1C4D82AF4;
  v94 = &v92;
  v95 = &off_1E8133EF0;
  v96 = sub_1C4D82C48;
  v98[0] = &v95;
  do
  {
    v25 = (uint64_t (***)())v98[v24];
    if (&(&v95)[v24] == v25)
    {
      v25 = &(&v95)[v24];
      v26 = 4;
    }
    else
    {
      if (!v25)
        goto LABEL_29;
      v26 = 5;
    }
    (*v25)[v26]();
LABEL_29:
    v24 -= 4;
  }
  while (v24 != -12);
  v79[0] = 0;
  v79[1] = 0;
  v80 = 0;
  v71 = 0;
  v75 = 0;
  v76 = 0;
  v70 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v78 = v79;
  v77 = 0;
  v73 = 0;
  v74 = 0;
  v72 = 0;
  a2[9] = (llvm::TargetMachine *)&v70;
  llvm::legacy::PassManagerImpl::run(a2[11], v7);
  llvm::TimeRecord::getCurrentTime(0, (uint64_t)&v67);
  v67 = vsubq_f64(v67, v85);
  v68 = v68 - v86;
  v69 = vsubq_s64(v69, v87);
  v27 = 1000.0 * v67.f64[0];
  v28 = operator new();
  v29 = v28;
  *(_DWORD *)(v28 + 8) = 5;
  *(_QWORD *)v28 = &off_1E8133538;
  *(double *)(v28 + 16) = v27;
  *(_QWORD *)(v28 + 24) = 0;
  v30 = v83;
  v56 = a1;
  if (v83 >= v84)
  {
    v32 = (uint64_t *)v82;
    v33 = ((char *)v83 - v82) >> 3;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 61)
      abort();
    v35 = (char *)v84 - v82;
    if (((char *)v84 - v82) >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        sub_1C4764EE4();
      v37 = (char *)operator new(8 * v36);
    }
    else
    {
      v37 = 0;
    }
    v38 = (uint64_t *)&v37[8 * v33];
    *v38 = v29;
    v31 = v38 + 1;
    if (v30 == v32)
    {
      v82 = &v37[8 * v33];
      v83 = v38 + 1;
      v84 = (uint64_t *)&v37[8 * v36];
    }
    else
    {
      do
      {
        v39 = *--v30;
        *v30 = 0;
        *--v38 = v39;
      }
      while (v30 != v32);
      v30 = (uint64_t *)v82;
      v40 = v83;
      v82 = (char *)v38;
      v83 = v31;
      v84 = (uint64_t *)&v37[8 * v36];
      while (v40 != v30)
      {
        v42 = *--v40;
        v41 = v42;
        *v40 = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
      }
    }
    if (v30)
      operator delete(v30);
  }
  else
  {
    *v83 = v28;
    v31 = v30 + 1;
  }
  v65 = v31;
  v66 = 0;
  v43 = (uint64_t *)v82;
  v55 = v84;
  v64 = (uint64_t *)v82;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  if (v64 != v31)
  {
    v44 = (void **)*MEMORY[0x1E0DE4F60];
    v45 = *(void ***)(MEMORY[0x1E0DE4F60] + 24);
    v46 = MEMORY[0x1E0DE4FB8] + 16;
    v47 = v43;
    do
    {
      if ((*(_DWORD *)(*v47 + 8) & 0xFFFFFFFE) != 4)
      {
        sub_1C4D82D08((uint64_t)&v88);
        llvm::AGX::operator<<(&v88, *v47);
        sub_1C4D7C62C(&v88, (uint64_t)"\n", 1);
        std::stringbuf::str();
        llvm::AGX::AGCStatusPrinter::logRaw((uint64_t)v57, (uint64_t *)__p);
        if (v63 < 0)
          operator delete(__p[0]);
        v88 = v44;
        *(void ***)((char *)&v88 + (_QWORD)*(v44 - 3)) = v45;
        v89 = (BOOL (*)(llvm::AGXIR *, const llvm::Module *, size_t))v46;
        if (SHIBYTE(v98[0]) < 0)
          operator delete(v96);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1CAA32F18](v99);
      }
      ++v47;
    }
    while (v47 != v31);
  }
  v48 = llvm::AGX::AGCStatusPrinter::flush(v57);
  v49 = (const char *)a2[5];
  v50 = (const char *)a2[3];
  if (v49 != v50)
  {
    a2[5] = (llvm::TargetMachine *)v50;
    v48 = (llvm *)llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)(a2 + 1), v50, v49 - v50);
  }
  a2[9] = (llvm::TargetMachine *)llvm::nulls(v48);
  if (*((char *)v78 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *v78, (unint64_t)v78[1]);
  }
  else
  {
    v51 = *(_OWORD *)v78;
    v61 = v78[2];
    *(_OWORD *)__dst = v51;
  }
  *(_QWORD *)&v58 = v43;
  *((_QWORD *)&v58 + 1) = v31;
  v59 = v55;
  v65 = 0;
  v66 = 0;
  v64 = 0;
  llvm::AGX::CompileReply::CompileReply((uint64_t *)__p, (uint64_t)__dst, &v58);
  *(_BYTE *)v56 = 0;
  *(void **)(v56 + 8) = __p[0];
  __p[0] = 0;
  v88 = (void **)&v58;
  sub_1C4764BBC(&v88);
  if (SHIBYTE(v61) < 0)
    operator delete(__dst[0]);
  v88 = (void **)&v64;
  sub_1C4764BBC(&v88);
  v70 = off_1E81A6E70;
  if (v77 == 1 && v72)
    MEMORY[0x1CAA32F9C](v72, 0x1000C8077774924);
  if (SHIBYTE(v80) < 0)
    operator delete(v79[0]);
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v104);
  v53 = a2[30];
  if (v53)
    *((_QWORD *)v53 + 8) = llvm::nulls(v52);
  llvm::AGX::DiagnosticHandlerResetter::~DiagnosticHandlerResetter((llvm::AGX::DiagnosticHandlerResetter *)v81);
  v104 = &v82;
  sub_1C4764BBC((void ***)&v104);
}

double sub_1C4D828E4(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 232) = v12;
  return result;
}

BOOL sub_1C4D829B0(llvm::AGXIR *a1, const llvm::Module *a2, size_t a3)
{
  uint64_t ShaderID;
  int v6;
  uint64_t v7;
  char *p_dst;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *__dst;
  size_t v15;
  unint64_t v16;

  ShaderID = llvm::AGXIR::getShaderID(a1, a2);
  if ((ShaderID & 0xFF00000000) == 0)
    return 0;
  v6 = ShaderID;
  if (a3)
  {
    v7 = 0;
    while ((*((char *)a2 + v7) & 0x80000000) == 0
         && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *((unsigned __int8 *)a2 + v7) + 60) & 0x400) != 0)
    {
      if (a3 == ++v7)
      {
        if (!a2)
          goto LABEL_14;
        if (a3 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (a3 >= 0x17)
        {
          v10 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((a3 | 7) != 0x17)
            v10 = a3 | 7;
          v11 = v10 + 1;
          p_dst = (char *)operator new(v10 + 1);
          v15 = a3;
          v16 = v11 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v16) = a3;
          p_dst = (char *)&__dst;
        }
        memmove(p_dst, a2, a3);
        goto LABEL_19;
      }
    }
    return 0;
  }
  if (a2)
  {
    HIBYTE(v16) = 0;
    p_dst = (char *)&__dst;
LABEL_19:
    p_dst[a3] = 0;
    if (SHIBYTE(v16) < 0)
    {
      v13 = __dst;
      v12 = atoi(__dst);
      operator delete(v13);
      return v12 == v6;
    }
  }
  else
  {
LABEL_14:
    __dst = 0;
    v15 = 0;
    v16 = 0;
  }
  v12 = atoi((const char *)&__dst);
  return v12 == v6;
}

BOOL sub_1C4D82AF4(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t NamedMetadata;
  uint64_t v6;
  unint64_t *v7;
  size_t v8;
  const void *v9;
  unint64_t v10;
  const char **p_dst;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  const char **v17;
  size_t v18;
  const char *__dst;
  size_t v21;
  int64_t v22;
  __int16 v23;

  __dst = "agx.shaderHash";
  v23 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a1, (uint64_t)&__dst);
  if (!NamedMetadata)
    return 0;
  v6 = *(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                 - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8));
  if (*(_BYTE *)v6)
    v6 = 0;
  v7 = *(unint64_t **)(v6 + 8);
  v10 = *v7;
  v9 = v7 + 3;
  v8 = v10;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    p_dst = (const char **)operator new(v13 + 1);
    v21 = v8;
    v22 = v14 | 0x8000000000000000;
    __dst = (const char *)p_dst;
  }
  else
  {
    HIBYTE(v22) = v8;
    p_dst = &__dst;
    if (!v8)
      goto LABEL_13;
  }
  memmove(p_dst, v9, v8);
LABEL_13:
  v12 = 0;
  *((_BYTE *)p_dst + v8) = 0;
  v15 = SHIBYTE(v22);
  v16 = (char *)__dst;
  if (v22 >= 0)
    v17 = &__dst;
  else
    v17 = (const char **)__dst;
  if (v22 >= 0)
    v18 = HIBYTE(v22) & 0x7F;
  else
    v18 = v21;
  if (a3 == v18)
  {
    if (!v18)
    {
      v12 = 1;
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        return v12;
      goto LABEL_23;
    }
    v12 = memcmp(a2, v17, v18) == 0;
  }
  if (v15 < 0)
LABEL_23:
    operator delete(v16);
  return v12;
}

BOOL sub_1C4D82C48(const std::string *a1, const void *a2, uint64_t a3)
{
  int v5;
  void *v6;
  _QWORD *v7;
  size_t v8;
  _BOOL8 v9;
  void *__p[2];
  char v12;
  _QWORD v13[2];
  char v14;

  sub_1C5EACE4C(a1, __p);
  sub_1C5EACCD4((uint64_t)__p, v13);
  if (v12 < 0)
    operator delete(__p[0]);
  v5 = v14;
  v6 = (void *)v13[0];
  if (v14 >= 0)
    v7 = v13;
  else
    v7 = (_QWORD *)v13[0];
  if (v14 >= 0)
    v8 = v14 & 0x7F;
  else
    v8 = v13[1];
  if (a3 == v8)
  {
    if (!v8)
    {
      v9 = 1;
      if ((v14 & 0x80000000) == 0)
        return v9;
      goto LABEL_14;
    }
    v9 = memcmp(a2, v7, v8) == 0;
    if (v5 < 0)
LABEL_14:
      operator delete(v6);
  }
  else
  {
    v9 = 0;
    if (v14 < 0)
      goto LABEL_14;
  }
  return v9;
}

uint64_t sub_1C4D82D08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = v4;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

_QWORD *sub_1C4D82DC0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_1C4D82E38(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  std::string *v6;
  std::string *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::string *v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;

  v6 = __str;
  v8 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= a4)
  {
    v13 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v8) >> 3) >= a4)
    {
      if (__str == a3)
      {
        v19 = *(std::string **)a1;
      }
      else
      {
        v19 = *(std::string **)a1;
        do
        {
          std::string::operator=(v8++, v6++);
          ++v19;
        }
        while (v6 != a3);
        v13 = *(std::string **)(a1 + 8);
      }
      while (v13 != v19)
      {
        if (SHIBYTE(v13[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v13[-1].__r_.__value_.__l.__data_);
        --v13;
      }
      *(_QWORD *)(a1 + 8) = v19;
    }
    else
    {
      v14 = (std::string *)((char *)__str + 8 * (((char *)v13 - (char *)v8) >> 3));
      if (v13 != v8)
      {
        v15 = 8 * (((char *)v13 - (char *)v8) >> 3);
        do
        {
          std::string::operator=(v8++, v6++);
          v15 -= 24;
        }
        while (v15);
        v8 = *(std::string **)(a1 + 8);
      }
      v16 = v8;
      if (v14 != a3)
      {
        v16 = v8;
        v17 = v8;
        do
        {
          if (SHIBYTE(v14->__r_.__value_.__r.__words[2]) < 0)
          {
            sub_1C47EBC30(v17, v14->__r_.__value_.__l.__data_, v14->__r_.__value_.__l.__size_);
          }
          else
          {
            v18 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
            v17->__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          }
          ++v14;
          ++v17;
          ++v16;
        }
        while (v14 != a3);
      }
      *(_QWORD *)(a1 + 8) = v16;
    }
  }
  else
  {
    sub_1C4D8305C((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_38;
    v9 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555
        ? 0xAAAAAAAAAAAAAAALL
        : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_38:
      abort();
    v11 = 3 * v10;
    v12 = operator new(24 * v10);
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = &v12[v11];
    while (v6 != a3)
    {
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1C47EBC30(v12, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v12[2] = *((_QWORD *)&v6->__r_.__value_.__l + 2);
      }
      ++v6;
      v12 += 3;
    }
    *(_QWORD *)(a1 + 8) = v12;
  }
}

void sub_1C4D8305C(void **a1)
{
  void **v1;
  void **v3;
  void *v4;

  v1 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1C4D830CC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E8133430;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1C4D8310C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E8133430;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C4D8315C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 135) < 0)
      operator delete(*(void **)(a2 + 112));
    if (*(char *)(a2 + 111) < 0)
      operator delete(*(void **)(a2 + 88));
    if (*(char *)(a2 + 79) < 0)
      operator delete(*(void **)(a2 + 56));
    if (*(char *)(a2 + 39) < 0)
      operator delete(*(void **)(a2 + 16));
    sub_1C4D81EB8((uint64_t *)(a2 + 8), 0);
    sub_1C4D81EB8((uint64_t *)a2, 0);
    JUMPOUT(0x1CAA32FC0);
  }
}

uint64_t sub_1C4D831EC()
{
  uint64_t result;
  char v1;
  char *v2;
  int v3;
  __n128 v4;

  v3 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable optimization passes in driver pipeline";
  v4.n128_u64[1] = 45;
  v1 = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&qword_1ED7EF010[1], "enable-driver-opt-passes", &v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EF010[1], &dword_1C475E000);
  v3 = 1;
  v4.n128_u64[0] = (unint64_t)"Turn of FastMath module flag for this compilation";
  v4.n128_u64[1] = 49;
  v1 = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7EF0D8, "disable-fast-math-module-flag", &v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EF0D8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Synthesize debug info before compilation";
  v4.n128_u64[1] = 40;
  sub_1C6136DA0((llvm::cl::Option *)&unk_1ED7EF198, "agx-debugify", &v4);
  result = __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EF198, &dword_1C475E000);
  dword_1ED7EEFF8 = 65537;
  word_1ED7EEFFC = 1;
  return result;
}

void llvm::AGX::AGXCompilePlan::collectConfiguration(uint64_t ***a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = **a1;
  v3 = v2[1];
  if (v3 || (v3 = *v2) != 0)
    sub_1C4D81F90(v3, a2);
}

void llvm::AGX::AGXCompilePlan::execute(llvm::AGX::AGXCompilePlan *this@<X0>, llvm::AGX::CompileRequest *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::AGX::CompileRequest *v3;
  std::string *v6;
  uint64_t inserted;
  uint64_t *v8;
  unsigned __int8 *p_p;
  size_t v10;
  unsigned __int8 *Impl;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  const llvm::APInt *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::ConstantInt *v20;
  unint64_t v21;
  unint64_t v22;
  llvm::ValueHandleBase *v23;
  llvm::Value *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 **v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  unsigned __int8 *v33;
  size_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 **v39;
  llvm::AGX::DiagnosticManager ****v40;
  unsigned __int8 *v41;
  llvm::ConstantInt *v42;
  llvm::ValueHandleBase *v43;
  void *v44[2];
  char v45;
  void *__p;
  size_t v47;
  char v48;
  char v49;
  __int16 v50;
  unsigned __int8 *v51;
  _QWORD *v52;
  unsigned __int8 *v53[2];

  v3 = a2;
  v53[1] = *(unsigned __int8 **)MEMORY[0x1E0C80C00];
  v6 = *(std::string **)(*(_QWORD *)a2 + 8);
  if (**(_QWORD **)a2)
  {
    __p = "agx.shaderHash";
    v50 = 259;
    if (!llvm::Module::getNamedMetadata((uint64_t)v6, (uint64_t)&__p))
    {
      inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)v6, "agx.shaderHash", 0xEuLL);
      v8 = (uint64_t *)v6->__r_.__value_.__r.__words[0];
      sub_1C5EACE4C(v6, v44);
      sub_1C5EACCD4((uint64_t)v44, &__p);
      if (v48 >= 0)
        p_p = (unsigned __int8 *)&__p;
      else
        p_p = (unsigned __int8 *)__p;
      if (v48 >= 0)
        v10 = v48 & 0x7F;
      else
        v10 = v47;
      v53[0] = (unsigned __int8 *)llvm::MDString::get(v8, p_p, v10);
      Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(v8, v53, 1, 0, 1);
      v51 = Impl;
      v12 = *(_QWORD *)(inserted + 48);
      v13 = *(unsigned int *)(v12 + 8);
      if (v13 >= *(_DWORD *)(v12 + 12))
      {
        sub_1C5419FD8(v12, &v51);
      }
      else
      {
        a2 = (llvm::AGX::CompileRequest *)Impl;
        v14 = (_QWORD *)(*(_QWORD *)v12 + 8 * v13);
        *v14 = a2;
        if (a2)
        {
          llvm::MetadataTracking::track((uint64_t)v14, (unsigned __int8 *)a2, 2);
          LODWORD(v13) = *(_DWORD *)(v12 + 8);
        }
        *(_DWORD *)(v12 + 8) = v13 + 1;
      }
      if (v48 < 0)
        operator delete(__p);
      if (v45 < 0)
        operator delete(v44[0]);
    }
  }
  if ((llvm::AGXIR::getShaderID((llvm::AGXIR *)v6, a2) & 0xFF00000000) == 0)
  {
    v15 = llvm::Module::getOrInsertNamedMetadata((uint64_t)v6, "agxcompiler.config", 0x12uLL);
    v16 = (uint64_t *)v6->__r_.__value_.__r.__words[0];
    v51 = (unsigned __int8 *)llvm::MDString::get((uint64_t *)v6->__r_.__value_.__l.__data_, "Request.ShaderID", 0x10uLL);
    v18 = *(_QWORD *)v6->__r_.__value_.__l.__data_;
    v19 = *(int *)(*(_QWORD *)v3 + 48);
    v20 = *(llvm::ConstantInt **)(v18 + 1960);
    v21 = *(unsigned int *)(v18 + 1968);
    LODWORD(v47) = v21 >> 8;
    if (v21 >> 8 > 0x40)
    {
      v42 = v20;
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, v19, 0);
      v20 = v42;
    }
    else
    {
      if (v21 <= 0xFF)
        v22 = 0;
      else
        v22 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v21);
      __p = (void *)(v22 & v19);
    }
    v23 = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&__p, v17);
    if (v47 >= 0x41 && __p)
    {
      v43 = v23;
      MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
      v23 = v43;
    }
    v52 = llvm::ValueAsMetadata::get(v23, v24);
    v25 = (void *)llvm::MDTuple::getImpl(v16, &v51, 2, 0, 1);
    __p = v25;
    v26 = *(_QWORD *)(v15 + 48);
    v27 = *(unsigned int *)(v26 + 8);
    if (v27 >= *(_DWORD *)(v26 + 12))
    {
      sub_1C5419FD8(v26, (unsigned __int8 **)&__p);
    }
    else
    {
      v28 = (unsigned __int8 *)v25;
      v29 = (unsigned __int8 **)(*(_QWORD *)v26 + 8 * v27);
      *v29 = v28;
      if (v28)
      {
        llvm::MetadataTracking::track((uint64_t)v29, v28, 2);
        LODWORD(v27) = *(_DWORD *)(v26 + 8);
      }
      *(_DWORD *)(v26 + 8) = v27 + 1;
    }
  }
  sub_1C5EAC020((uint64_t)v6, (uint64_t)&__p);
  if (!v49)
  {
    v30 = llvm::Module::getOrInsertNamedMetadata((uint64_t)v6, "agxcompiler.config", 0x12uLL);
    v31 = (uint64_t *)v6->__r_.__value_.__r.__words[0];
    v51 = (unsigned __int8 *)llvm::MDString::get((uint64_t *)v6->__r_.__value_.__l.__data_, "Request.ShaderType", 0x12uLL);
    v32 = *(_BYTE *)(*(_QWORD *)v3 + 47);
    if (v32 >= 0)
      v33 = (unsigned __int8 *)(*(_QWORD *)v3 + 24);
    else
      v33 = *(unsigned __int8 **)(*(_QWORD *)v3 + 24);
    if (v32 >= 0)
      v34 = v32 & 0x7F;
    else
      v34 = *(_QWORD *)(*(_QWORD *)v3 + 32);
    v52 = llvm::MDString::get((uint64_t *)v6->__r_.__value_.__l.__data_, v33, v34);
    v35 = (unsigned __int8 *)llvm::MDTuple::getImpl(v31, &v51, 2, 0, 1);
    v53[0] = v35;
    v36 = *(_QWORD *)(v30 + 48);
    v37 = *(unsigned int *)(v36 + 8);
    if (v37 >= *(_DWORD *)(v36 + 12))
    {
      sub_1C5419FD8(*(_QWORD *)(v30 + 48), v53);
    }
    else
    {
      v38 = v35;
      v39 = (unsigned __int8 **)(*(_QWORD *)v36 + 8 * v37);
      *v39 = v38;
      if (v38)
      {
        llvm::MetadataTracking::track((uint64_t)v39, v38, 2);
        LODWORD(v37) = *(_DWORD *)(v36 + 8);
      }
      *(_DWORD *)(v36 + 8) = v37 + 1;
    }
  }
  v40 = (llvm::AGX::DiagnosticManager ****)*((_QWORD *)this + 1);
  if (v40)
  {
    v51 = 0;
    if (llvm::AGX::AGXAssemblePlan::execute(v40, v3, (llvm::AGX::CompileReply *)&v51))
    {
      *(_BYTE *)a3 = 0;
      *(_QWORD *)(a3 + 8) = v51;
      goto LABEL_45;
    }
    v41 = v51;
    v51 = 0;
    if (v41)
      sub_1C4D85830((uint64_t)&v51, (uint64_t)v41);
  }
  sub_1C4D7DAD8(**(_QWORD **)this, v3, a3);
LABEL_45:
  if (v49)
  {
    if (v48 < 0)
      operator delete(__p);
  }
}

uint64_t llvm::AGX::AGXAssemblePlan::execute(llvm::AGX::DiagnosticManager ****this, llvm::AGX::CompileRequest *a2, llvm::AGX::CompileReply *a3)
{
  _QWORD *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t *v12;
  std::string::size_type v13;
  const void *v14;
  unint64_t v15;
  void *v16;
  _BYTE *v17;
  _BYTE *v18;
  size_t v19;
  _QWORD *v20;
  _BYTE *v21;
  _BYTE *v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  void **v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  char *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  char *v56;
  void *v57[2];
  void *v58;
  uint64_t v59;
  void *__p[3];
  void *v61[2];
  void *v62;
  __int128 v63;
  uint64_t v64;
  _QWORD __dst[2];
  unint64_t v66;
  _OWORD v67[2];
  __int128 v68;
  uint64_t v69;
  __int16 v70;
  std::string v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  int v76;
  void **v77;
  void *v78[2];
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  void **v82;
  _QWORD *v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v6 = this + 1;
  std::to_string(&v71, *(_DWORD *)(*(_QWORD *)a2 + 48));
  v7 = sub_1C6176504(v6, (uint64_t)&v71);
  v8 = v7;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v71.__r_.__value_.__l.__data_);
    if (v8)
      goto LABEL_5;
  }
  else if (v7)
  {
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)"agx.shaderHash";
  LOWORD(v73) = 259;
  result = llvm::Module::getNamedMetadata(v9, (uint64_t)&v71);
  if (!result)
    return result;
  v11 = *(_QWORD *)(***(_QWORD ***)(result + 48) - 8 * *(unsigned int *)(***(_QWORD ***)(result + 48) + 8));
  if (*(_BYTE *)v11)
    v11 = 0;
  v12 = *(unint64_t **)(v11 + 8);
  v15 = *v12;
  v14 = v12 + 3;
  v13 = v15;
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_94;
  if (v13 >= 0x17)
  {
    v53 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v53 = v13 | 7;
    v54 = v53 + 1;
    v16 = operator new(v53 + 1);
    v71.__r_.__value_.__l.__size_ = v13;
    v71.__r_.__value_.__r.__words[2] = v54 | 0x8000000000000000;
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    goto LABEL_89;
  }
  *((_BYTE *)&v71.__r_.__value_.__s + 23) = v13;
  v16 = &v71;
  if (v13)
LABEL_89:
    memmove(v16, v14, v13);
  *((_BYTE *)v16 + v13) = 0;
  v8 = sub_1C6176504(v6, (uint64_t)&v71);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (!v8)
    return 0;
LABEL_5:
  if ((char)v8[63] < 0)
  {
    sub_1C47EBC30(&v80, *((void **)v8 + 5), *((_QWORD *)v8 + 6));
  }
  else
  {
    v80 = *(_OWORD *)(v8 + 40);
    v81 = *((_QWORD *)v8 + 7);
  }
  v78[0] = 0;
  v78[1] = 0;
  v79 = 0;
  LODWORD(v71.__r_.__value_.__r.__words[1]) = 0;
  v74 = 0;
  v75 = 0;
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  v77 = v78;
  v76 = 0;
  v72 = 0;
  v73 = 0;
  v71.__r_.__value_.__r.__words[2] = 0;
  v70 = 260;
  *(_QWORD *)&v68 = &v80;
  sub_1C5E1F6CC((unsigned __int8 *)&v68, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v83);
  if ((v84 & 1) != 0)
  {
    std::operator+<char>();
    v70 = 260;
    *(_QWORD *)&v68 = v67;
    llvm::report_fatal_error((uint64_t)&v68, 1);
  }
  memset(v67, 0, 24);
  v68 = 0u;
  v69 = 0;
  if (*((_DWORD *)this + 12) != 2)
  {
    v22 = (_BYTE *)v83[1];
    v21 = (_BYTE *)v83[2];
    v23 = v21 - v22;
    if ((unint64_t)(v21 - v22) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_94;
    if (v23 >= 0x17)
    {
      v31 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17)
        v31 = v23 | 7;
      v32 = v31 + 1;
      v24 = operator new(v31 + 1);
      v61[1] = (void *)v23;
      v62 = (void *)(v32 | 0x8000000000000000);
      v61[0] = v24;
    }
    else
    {
      HIBYTE(v62) = (_BYTE)v21 - (_BYTE)v22;
      v24 = v61;
      if (v21 == v22)
        goto LABEL_38;
    }
    memmove(v24, v22, v23);
LABEL_38:
    *((_BYTE *)v24 + v23) = 0;
    if (!llvm::AGX::AssemblePipeline::AssemblerImpl::run(**this, (uint64_t *)v61, (uint64_t)&v71, 1))
      llvm::report_fatal_error((llvm *)"Asm injection failed", (const char *)1);
    if (SHIBYTE(v62) < 0)
    {
      sub_1C47EBC30(__p, v61[0], (unint64_t)v61[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v61;
      __p[2] = v62;
    }
    v33 = operator new();
    v34 = v33;
    v35 = __p[1];
    *(void **)(v33 + 16) = __p[0];
    *(_QWORD *)(v33 + 24) = v35;
    *(void **)(v33 + 31) = *(void **)((char *)&__p[1] + 7);
    LOBYTE(v35) = HIBYTE(__p[2]);
    memset(__p, 0, sizeof(__p));
    *(_DWORD *)(v33 + 8) = 3;
    *(_BYTE *)(v33 + 39) = (_BYTE)v35;
    *(_QWORD *)v33 = &unk_1E8133F38;
    v36 = (_QWORD *)*((_QWORD *)&v67[0] + 1);
    v37 = *(char **)&v67[1];
    if (*((_QWORD *)&v67[0] + 1) < *(_QWORD *)&v67[1])
    {
      **((_QWORD **)&v67[0] + 1) = v33;
      v38 = v36 + 1;
LABEL_63:
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if (*((char *)v77 + 23) < 0)
      {
        sub_1C47EBC30(v57, *v77, (unint64_t)v77[1]);
      }
      else
      {
        v49 = *(_OWORD *)v77;
        v58 = v77[2];
        *(_OWORD *)v57 = v49;
      }
      *(_QWORD *)&v55 = *(_QWORD *)&v67[0];
      *((_QWORD *)&v55 + 1) = v38;
      v56 = v37;
      memset(v67, 0, 24);
      llvm::AGX::CompileReply::CompileReply(&v59, (uint64_t)v57, &v55);
      v50 = v59;
      v59 = 0;
      v51 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v50;
      if (v51)
      {
        sub_1C4D85830((uint64_t)a3, v51);
        v52 = v59;
        v59 = 0;
        if (v52)
          sub_1C4D85830((uint64_t)&v59, v52);
      }
      v82 = (void **)&v55;
      sub_1C4764BBC(&v82);
      if (SHIBYTE(v58) < 0)
        operator delete(v57[0]);
      if ((SHIBYTE(v62) & 0x80000000) == 0)
        goto LABEL_76;
      v30 = v61[0];
      goto LABEL_75;
    }
    v39 = *(_QWORD **)&v67[0];
    v40 = (uint64_t)(*((_QWORD *)&v67[0] + 1) - *(_QWORD *)&v67[0]) >> 3;
    v41 = v40 + 1;
    if (!((unint64_t)(v40 + 1) >> 61))
    {
      if ((uint64_t)(*(_QWORD *)&v67[1] - *(_QWORD *)&v67[0]) >> 2 > v41)
        v41 = (uint64_t)(*(_QWORD *)&v67[1] - *(_QWORD *)&v67[0]) >> 2;
      if (*(_QWORD *)&v67[1] - *(_QWORD *)&v67[0] >= 0x7FFFFFFFFFFFFFF8uLL)
        v42 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
      {
        if (v42 >> 61)
          sub_1C4764EE4();
        v43 = (char *)operator new(8 * v42);
      }
      else
      {
        v43 = 0;
      }
      v44 = (uint64_t *)&v43[8 * v40];
      v37 = &v43[8 * v42];
      *v44 = v34;
      v38 = v44 + 1;
      if (v36 == v39)
      {
        *(_QWORD *)&v67[0] = v44;
        *((_QWORD *)&v67[0] + 1) = v44 + 1;
        *(_QWORD *)&v67[1] = v37;
      }
      else
      {
        do
        {
          v45 = *--v36;
          *v36 = 0;
          *--v44 = v45;
        }
        while (v36 != v39);
        v46 = (_QWORD *)*((_QWORD *)&v67[0] + 1);
        v36 = *(_QWORD **)&v67[0];
        *(_QWORD *)&v67[0] = v44;
        *((_QWORD *)&v67[0] + 1) = v38;
        *(_QWORD *)&v67[1] = v37;
        while (v46 != v36)
        {
          v48 = *--v46;
          v47 = v48;
          *v46 = 0;
          if (v48)
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        }
      }
      if (v36)
        operator delete(v36);
      goto LABEL_63;
    }
LABEL_94:
    abort();
  }
  v18 = (_BYTE *)v83[1];
  v17 = (_BYTE *)v83[2];
  v19 = v17 - v18;
  if ((unint64_t)(v17 - v18) > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_94;
  if (v19 >= 0x17)
  {
    v25 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v25 = v19 | 7;
    v26 = v25 + 1;
    v20 = operator new(v25 + 1);
    __dst[1] = v19;
    v66 = v26 | 0x8000000000000000;
    __dst[0] = v20;
    goto LABEL_28;
  }
  HIBYTE(v66) = (_BYTE)v17 - (_BYTE)v18;
  v20 = __dst;
  if (v17 != v18)
LABEL_28:
    memmove(v20, v18, v19);
  *((_BYTE *)v20 + v19) = 0;
  v63 = v67[0];
  v64 = *(_QWORD *)&v67[1];
  memset(v67, 0, 24);
  llvm::AGX::CompileReply::CompileReply((uint64_t *)&v82, (uint64_t)__dst, &v63);
  v27 = v82;
  v82 = 0;
  v28 = *(_QWORD *)a3;
  *(_QWORD *)a3 = v27;
  if (v28)
  {
    sub_1C4D85830((uint64_t)a3, v28);
    v29 = v82;
    v82 = 0;
    if (v29)
      sub_1C4D85830((uint64_t)&v82, (uint64_t)v29);
  }
  v61[0] = &v63;
  sub_1C4764BBC((void ***)v61);
  if ((SHIBYTE(v66) & 0x80000000) == 0)
    goto LABEL_76;
  v30 = (void *)__dst[0];
LABEL_75:
  operator delete(v30);
LABEL_76:
  v61[0] = v67;
  sub_1C4764BBC((void ***)v61);
  *(_QWORD *)&v67[0] = &v68;
  sub_1C4764BBC((void ***)v67);
  if ((v84 & 1) == 0 && v83)
    (*(void (**)(_QWORD *))(*v83 + 8))(v83);
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
  if (v76 == 1 && v71.__r_.__value_.__r.__words[2])
    MEMORY[0x1CAA32F9C](v71.__r_.__value_.__r.__words[2], 0x1000C8077774924);
  if (SHIBYTE(v79) < 0)
    operator delete(v78[0]);
  if (SHIBYTE(v81) < 0)
    operator delete((void *)v80);
  return 1;
}

uint64_t **llvm::AGX::AGXCompilePlan::AGXCompilePlan(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7, char a8, char a9)
{
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  BOOL v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t **v26;
  size_t v27;
  std::string::size_type v28;
  std::string *p_dst;
  uint64_t v30;
  uint64_t v31;
  std::string __dst;

  v17 = (uint64_t *)operator new();
  sub_1C4D7D7A4(a2, a3, a4, a5, a6, a8, a7, a9, v17);
  *a1 = v17;
  a1[1] = 0;
  if (!*v17)
  {
    *a1 = 0;
    *v17 = 0;
    MEMORY[0x1CAA32FC0](v17, 0x20C4093837F09);
  }
  v18 = byte_1ED7EF2EF;
  v19 = byte_1ED7EF2EF & 0x7F;
  if (byte_1ED7EF2EF < 0)
  {
    v19 = unk_1ED7EF2E0;
    v18 = unk_1ED7EF2E0;
  }
  v20 = v19 | v18;
  if (byte_1ED7EF2EF >= 0)
    v21 = (const char *)&qword_1ED7EF2D8;
  else
    v21 = (const char *)qword_1ED7EF2D8;
  if (v20)
    v22 = v21 == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = operator new();
    v24 = (_QWORD *)operator new();
    v25 = (_QWORD *)operator new();
    *v25 = a3;
    v25[1] = a4;
    *v24 = v25;
    *(_QWORD *)v23 = v24;
    *(_OWORD *)(v23 + 8) = 0u;
    *(_OWORD *)(v23 + 24) = 0u;
    *(_DWORD *)(v23 + 40) = 1065353216;
    v26 = (uint64_t **)a1[1];
    a1[1] = (uint64_t *)v23;
    if (v26)
    {
      llvm::AGX::AGXAssemblePlan::~AGXAssemblePlan(v26);
      MEMORY[0x1CAA32FC0]();
      v23 = (uint64_t)a1[1];
    }
    v27 = strlen(v21);
    if (v27 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v28 = v27;
    if (v27 >= 0x17)
    {
      v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17)
        v30 = v27 | 7;
      v31 = v30 + 1;
      p_dst = (std::string *)operator new(v30 + 1);
      __dst.__r_.__value_.__l.__size_ = v28;
      __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v27;
      p_dst = &__dst;
      if (!v27)
        goto LABEL_22;
    }
    memmove(p_dst, v21, v28);
LABEL_22:
    p_dst->__r_.__value_.__s.__data_[v28] = 0;
    llvm::AGX::AGXAssemblePlan::initializeAsmInjection(v23, &__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    *((_DWORD *)a1[1] + 12) = a6;
  }
  return a1;
}

{
  return llvm::AGX::AGXCompilePlan::AGXCompilePlan(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t llvm::AGX::AGXAssemblePlan::initializeAsmInjection(uint64_t a1, const std::string *a2)
{
  const llvm::MemoryBuffer *v4;
  _QWORD *v5;
  std::string::size_type v6;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type v9;
  unint64_t v10;
  std::string::size_type size;
  unint64_t v12;
  unint64_t first_not_of;
  std::string::size_type v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v20[2];
  std::string v21;
  unint64_t v22;
  unsigned __int8 v23[32];
  __int16 v24;
  __int128 v25;
  std::string v26;
  const llvm::MemoryBuffer *v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v24 = 260;
  *(_QWORD *)v23 = a2;
  sub_1C5E1F6CC(v23, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v27);
  if ((v28 & 1) != 0)
  {
    std::string::basic_string(&v26, a2);
    sub_1C486A9C4("Fail to open injection file: ", &v26, &v21);
    v24 = 260;
    *(_QWORD *)v23 = &v21;
    llvm::report_fatal_error((uint64_t)v23, 1);
  }
  v4 = v27;
  v27 = 0;
  llvm::line_iterator::line_iterator((llvm::line_iterator *)v23, v4, 1, 0);
  if ((_BYTE)v24)
  {
    v5 = (_QWORD *)(a1 + 8);
    do
    {
      v7 = *((_QWORD *)&v25 + 1);
      v6 = v25;
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v25;
      LOBYTE(v20[0]) = 44;
      v8 = llvm::StringRef::find((uint64_t *)&v26, (char *)v20, 1uLL, 0);
      if (v8 == -1)
      {
        v9 = 0;
        v10 = 0;
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
        size = v26.__r_.__value_.__l.__size_;
        v6 = v26.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v7 >= v8)
          size = v8;
        else
          size = v7;
        if (v7 >= v8 + 1)
          v12 = v8 + 1;
        else
          v12 = v7;
        v9 = v6 + v12;
        v10 = v7 - v12;
        v21.__r_.__value_.__r.__words[0] = v6;
        v21.__r_.__value_.__l.__size_ = size;
      }
      v21.__r_.__value_.__r.__words[2] = v9;
      v22 = v10;
      first_not_of = llvm::StringRef::find_first_not_of(&v21, " \t\n\v\f\r", 6, 0);
      if (first_not_of >= size)
        v14 = size;
      else
        v14 = first_not_of;
      v15 = (const std::string::value_type *)(v6 + v14);
      v16 = size - v14;
      v17 = llvm::StringRef::find_first_not_of(&v21.__r_.__value_.__r.__words[2], " \t\n\v\f\r", 6, 0);
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v20[0] = v9 + v18;
      v20[1] = v10 - v18;
      sub_1C617667C(v5, v15, v16, (uint64_t)v20);
      llvm::line_iterator::advance((uint64_t)v23);
    }
    while ((_BYTE)v24);
  }
  return (*(uint64_t (**)(const llvm::MemoryBuffer *))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *llvm::AGX::AGXCompilePlan::AGXCompilePlan(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  v3 = a2[1];
  a2[1] = 0;
  result[1] = v3;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  v3 = a2[1];
  a2[1] = 0;
  result[1] = v3;
  return result;
}

uint64_t llvm::AGX::AGXCompilePlan::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;

  v4 = *a2;
  *a2 = 0;
  v5 = *(uint64_t **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    v6 = *v5;
    *v5 = 0;
    if (v6)
      sub_1C4D8315C((uint64_t)v5, v6);
    MEMORY[0x1CAA32FC0](v5, 0x20C4093837F09);
  }
  v7 = a2[1];
  a2[1] = 0;
  v8 = *(uint64_t ***)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  if (v8)
  {
    llvm::AGX::AGXAssemblePlan::~AGXAssemblePlan(v8);
    MEMORY[0x1CAA32FC0]();
  }
  return a1;
}

BOOL llvm::AGX::AGXAssemblePlan::execute(llvm::AGX::DiagnosticManager ****a1, uint64_t *a2, uint64_t a3)
{
  return llvm::AGX::AssemblePipeline::AssemblerImpl::run(**a1, a2, a3, 0);
}

BOOL llvm::AGX::AGXAssemblePlan::isValid(llvm::AGX::AGXAssemblePlan *this)
{
  return *(_QWORD *)this != 0;
}

llvm::AGX::AGXAssemblePlan *llvm::AGX::AGXAssemblePlan::AGXAssemblePlan(llvm::AGX::AGXAssemblePlan *this, llvm::TargetMachine *a2, llvm::AGX::DiagnosticManager *a3)
{
  _QWORD *v6;
  _QWORD *v7;

  v6 = (_QWORD *)operator new();
  v7 = (_QWORD *)operator new();
  *v7 = a2;
  v7[1] = a3;
  *v6 = v7;
  *(_QWORD *)this = v6;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  return this;
}

{
  _QWORD *v6;
  _QWORD *v7;

  v6 = (_QWORD *)operator new();
  v7 = (_QWORD *)operator new();
  *v7 = a2;
  v7[1] = a3;
  *v6 = v7;
  *(_QWORD *)this = v6;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  return this;
}

uint64_t llvm::AGX::AGXAssemblePlan::AGXAssemblePlan(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  sub_1C4D84EE4(a1 + 8, a2 + 1);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  return a1;
}

{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v4;
  sub_1C4D84EE4(a1 + 8, a2 + 1);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  return a1;
}

uint64_t llvm::AGX::AGXAssemblePlan::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void **v7;
  void **v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = *a2;
  *a2 = 0;
  v5 = *(uint64_t **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    v6 = *v5;
    *v5 = 0;
    if (v6)
      MEMORY[0x1CAA32FC0](v6, 0x20C40A4A59CD2);
    MEMORY[0x1CAA32FC0](v5, 0x20C4093837F09);
  }
  if (*(_QWORD *)(a1 + 32))
  {
    v7 = *(void ***)(a1 + 24);
    if (v7)
    {
      do
      {
        v8 = (void **)*v7;
        if (*((char *)v7 + 63) < 0)
          operator delete(v7[5]);
        if (*((char *)v7 + 39) < 0)
          operator delete(v7[2]);
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    *(_QWORD *)(a1 + 24) = 0;
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      for (i = 0; i != v9; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 32) = 0;
  }
  v11 = a2[1];
  a2[1] = 0;
  v12 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v11;
  if (v12)
    operator delete(v12);
  v13 = a2[3];
  v14 = a2[2];
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 16) = v14;
  a2[2] = 0;
  v15 = a2[4];
  *(_QWORD *)(a1 + 32) = v15;
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  if (v15)
  {
    v16 = *(_QWORD *)(v13 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    if ((v17 & (v17 - 1)) != 0)
    {
      if (v16 >= v17)
        v16 %= v17;
    }
    else
    {
      v16 &= v17 - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v16) = a1 + 24;
    a2[3] = 0;
    a2[4] = 0;
  }
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  return a1;
}

unint64_t sub_1C4D8463C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v9 = *(uint64_t *)((char *)a2 + a3 - 48);
      v10 = *(uint64_t *)((char *)a2 + a3 - 40);
      v11 = *(uint64_t *)((char *)a2 + a3 - 24);
      v13 = *(uint64_t *)((char *)a2 + a3 - 64);
      v12 = *(uint64_t *)((char *)a2 + a3 - 56);
      v14 = *(uint64_t *)((char *)a2 + a3 - 16);
      v15 = *(uint64_t *)((char *)a2 + a3 - 8);
      v16 = v12 + v14;
      v17 = 0x9DDFEA08EB382D69
          * (v11 ^ ((0x9DDFEA08EB382D69 * ((v9 + a3) ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * ((v9 + a3) ^ v11)));
      v18 = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
      v19 = v9 + v12 + v13 + a3;
      v20 = v19 + v10;
      v21 = __ROR8__(v19, 44) + v13 + a3 + __ROR8__(v13 + a3 + v10 - 0x622015F714C7D297 * (v17 ^ (v17 >> 47)), 21);
      v22 = v12 + v14 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v23 = v11 + v14 + v22;
      v24 = __ROR8__(v23, 44);
      v25 = v23 + v15;
      v26 = v24 + v22 + __ROR8__(v22 + v10 + v15, 21);
      v28 = *a2;
      v27 = a2 + 4;
      v29 = v28 - 0x4B6D499041670D8DLL * v10;
      v30 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v31 = *(v27 - 3);
        v32 = v29 + v20 + v16 + v31;
        v33 = v27[2];
        v34 = v27[3];
        v35 = v27[1];
        v16 = v35 + v20 - 0x4B6D499041670D8DLL * __ROR8__(v16 + v21 + v33, 42);
        v36 = v18 + v25;
        v37 = *(v27 - 2);
        v38 = *(v27 - 1);
        v39 = *(v27 - 4) - 0x4B6D499041670D8DLL * v21;
        v40 = v39 + v25 + v38;
        v41 = v39 + v31 + v37;
        v20 = v41 + v38;
        v42 = __ROR8__(v41, 44) + v39;
        v43 = (0xB492B66FBE98F273 * __ROR8__(v32, 37)) ^ v26;
        v29 = 0xB492B66FBE98F273 * __ROR8__(v36, 33);
        v21 = v42 + __ROR8__(v40 + v43, 21);
        v44 = v29 + v26 + *v27;
        v25 = v35 + v33 + v44 + v34;
        v26 = __ROR8__(v35 + v33 + v44, 44) + v44 + __ROR8__(v16 + v37 + v44 + v34, 21);
        v27 += 8;
        v18 = v43;
        v30 += 64;
      }
      while (v30);
      v45 = v29
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v26 ^ ((0x9DDFEA08EB382D69 * (v26 ^ v21)) >> 47) ^ (0x9DDFEA08EB382D69 * (v26 ^ v21)))) ^ ((0x9DDFEA08EB382D69 * (v26 ^ ((0x9DDFEA08EB382D69 * (v26 ^ v21)) >> 47) ^ (0x9DDFEA08EB382D69 * (v26 ^ v21)))) >> 47));
      v46 = 0x9DDFEA08EB382D69
          * (v45 ^ (v43
                  - 0x4B6D499041670D8DLL * (v16 ^ (v16 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v20)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v20)))) ^ ((0x9DDFEA08EB382D69 * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v20)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v20)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v45 ^ (v46 >> 47) ^ v46)) ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v46 >> 47) ^ v46)) >> 47));
    }
    else
    {
      return sub_1C4D849E4(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    v4 = a2[1];
    v5 = 0xB492B66FBE98F273 * *a2;
    v6 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v5 - v4, 43);
    v7 = v5 + a3 + __ROR8__(v4 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v8 = 0x9DDFEA08EB382D69 * ((v6 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v7);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  }
  else
  {
    return sub_1C4D848EC(a2, a3);
  }
}

unint64_t sub_1C4D848EC(_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_1C4D849E4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t *sub_1C4D84AA4(uint64_t a1, unint64_t a2, unsigned __int8 **a3)
{
  unint64_t v4;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  char v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  void *v38;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v6.i16[0] = vaddlv_u8(v6);
    v7 = v6.u32[0];
    if (v6.u32[0] > 1uLL)
      v8 = v4 <= a2 ? a2 % v4 : a2;
    else
      v8 = (v4 - 1) & a2;
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        v11 = *((_BYTE *)a3 + 23);
        v12 = v11;
        v13 = (unsigned __int8 *)(v11 & 0x7F);
        if (v12 >= 0)
          v14 = v13;
        else
          v14 = a3[1];
        if (v12 >= 0)
          v15 = (unsigned __int8 *)a3;
        else
          v15 = *a3;
        do
        {
          v16 = v10[1];
          if (v16 == a2)
          {
            v17 = *((_BYTE *)v10 + 39);
            v18 = v17 & 0x7F;
            if (v17 >= 0)
              v19 = (unsigned __int8 *)(v17 & 0x7F);
            else
              v19 = (unsigned __int8 *)v10[3];
            if (v19 == v14)
            {
              if ((*((_BYTE *)v10 + 39) & 0x80) != 0)
              {
                if (!memcmp((const void *)v10[2], v15, v10[3]))
                  return v10;
              }
              else
              {
                if ((v17 & 0x7F) == 0)
                  return v10;
                v20 = 0;
                while (*((unsigned __int8 *)v10 + v20 + 16) == v15[v20])
                {
                  if (v18 == ++v20)
                    return v10;
                }
              }
            }
          }
          else
          {
            if (v7 > 1)
            {
              if (v16 >= v4)
                v16 %= v4;
            }
            else
            {
              v16 &= v4 - 1;
            }
            if (v16 != v8)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (v4 && (float)(v22 * (float)v4) >= v21)
    return 0;
  v23 = 1;
  if (v4 >= 3)
    v23 = (v4 & (v4 - 1)) != 0;
  v24 = v23 | (2 * v4);
  v25 = vcvtps_u32_f32(v21 / v22);
  if (v24 <= v25)
    prime = (int8x8_t)v25;
  else
    prime = (int8x8_t)v24;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (*(_QWORD *)&prime > v4)
  {
LABEL_47:
    if (*(_QWORD *)&prime >> 61)
      sub_1C4764EE4();
    v27 = operator new(8 * *(_QWORD *)&prime);
    v28 = *(void **)a1;
    *(_QWORD *)a1 = v27;
    if (v28)
      operator delete(v28);
    v29 = 0;
    *(int8x8_t *)(a1 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
    while (*(_QWORD *)&prime != v29);
    v30 = *(_QWORD **)(a1 + 16);
    if (v30)
    {
      v31 = v30[1];
      v32 = (uint8x8_t)vcnt_s8(prime);
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.u32[0] > 1uLL)
      {
        if (v31 >= *(_QWORD *)&prime)
          v31 %= *(_QWORD *)&prime;
      }
      else
      {
        v31 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = a1 + 16;
      v36 = (_QWORD *)*v30;
      if (*v30)
      {
        while (1)
        {
          v37 = v36[1];
          if (v32.u32[0] > 1uLL)
          {
            if (v37 >= *(_QWORD *)&prime)
              v37 %= *(_QWORD *)&prime;
          }
          else
          {
            v37 &= *(_QWORD *)&prime - 1;
          }
          if (v37 != v31)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v30;
              goto LABEL_72;
            }
            *v30 = *v36;
            *v36 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v37);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v37) = v36;
            v36 = v30;
          }
          v37 = v31;
LABEL_72:
          v30 = v36;
          v36 = (_QWORD *)*v36;
          v31 = v37;
          if (!v36)
            return 0;
        }
      }
    }
    return 0;
  }
  if (*(_QWORD *)&prime >= v4)
    return 0;
  v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (v4 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
  {
    v33 = std::__next_prime(v33);
  }
  else
  {
    v35 = 1 << -(char)__clz(v33 - 1);
    if (v33 >= 2)
      v33 = v35;
  }
  if (*(_QWORD *)&prime <= v33)
    prime = (int8x8_t)v33;
  if (*(_QWORD *)&prime >= v4)
    return 0;
  if (prime)
    goto LABEL_47;
  v38 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v38)
    operator delete(v38);
  v10 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return v10;
}

_QWORD *sub_1C4D84E2C(_QWORD *result, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  _QWORD *v5;
  unint64_t v6;

  v2 = (int8x8_t)result[1];
  v3 = a2[1];
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(_QWORD *)&v2)
      v3 %= *(_QWORD *)&v2;
  }
  else
  {
    v3 &= *(_QWORD *)&v2 - 1;
  }
  v5 = *(_QWORD **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(_QWORD *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v2)
        v6 %= *(_QWORD *)&v2;
    }
    else
    {
      v6 &= *(_QWORD *)&v2 - 1;
    }
    v5 = (_QWORD *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

uint64_t sub_1C4D84EE4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_1C4D84F54()
{
  uint64_t v0;
  const char *v2;

  v2 = "";
  v0 = sub_1C47AD050((uint64_t)qword_1ED7EF258, 0, 0);
  qword_1ED7EF2D8 = 0;
  unk_1ED7EF2E0 = 0;
  qword_1ED7EF300 = 0;
  unk_1ED7EF308 = 0;
  qword_1ED7EF2F8 = 0;
  byte_1ED7EF310 = 0;
  unk_1ED7EF2E8 = 0;
  unk_1ED7EF2F0 = &unk_1E819E950;
  qword_1ED7EF258[0] = (uint64_t)&unk_1E819E480;
  qword_1ED7EF318 = (uint64_t)&unk_1E819E970;
  qword_1ED7EF320 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED7EF338 = (uint64_t)&qword_1ED7EF320;
  llvm::cl::Option::setArgStr(v0, "agx-asm-injection", 0x11uLL);
  qword_1ED7EF278 = (uint64_t)"AsmInjection info file";
  unk_1ED7EF280 = 22;
  sub_1C49C7D74(&v2, (uint64_t)qword_1ED7EF258);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED7EF258);
  return __cxa_atexit((void (*)(void *))sub_1C49BEA38, qword_1ED7EF258, &dword_1C475E000);
}

void sub_1C4D85038(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = off_1E81A6E70;
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    v1 = *(_QWORD *)(a1 + 16);
    if (v1)
      MEMORY[0x1CAA32F9C](v1, 0x1000C8077774924);
  }
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *llvm::addExtraSegment(uint64_t **a1, uint64_t a2)
{
  uint64_t inserted;
  uint64_t *v5;
  char v6;
  BOOL v7;
  unsigned __int8 *v8;
  size_t v9;
  size_t v10;
  unsigned __int8 *Impl;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  _QWORD *result;
  unsigned __int8 *v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)a1, "agx.segments", 0xCuLL);
  v5 = *a1;
  v6 = *(_BYTE *)(a2 + 23);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = (unsigned __int8 *)a2;
  else
    v8 = *(unsigned __int8 **)a2;
  v9 = v6 & 0x7F;
  if (v7)
    v10 = *(_QWORD *)(a2 + 8);
  else
    v10 = v9;
  v17[0] = llvm::MDString::get(v5, v8, v10);
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl(v5, v17, 1, 0, 1);
  v16 = Impl;
  v12 = *(_QWORD *)(inserted + 48);
  v13 = *(unsigned int *)(v12 + 8);
  if (v13 >= *(_DWORD *)(v12 + 12))
    return (_QWORD *)sub_1C5419FD8(*(_QWORD *)(inserted + 48), &v16);
  v14 = Impl;
  result = (_QWORD *)(*(_QWORD *)v12 + 8 * v13);
  *result = v14;
  if (v14)
  {
    result = (_QWORD *)llvm::MetadataTracking::track((uint64_t)result, v14, 2);
    LODWORD(v13) = *(_DWORD *)(v12 + 8);
  }
  *(_DWORD *)(v12 + 8) = v13 + 1;
  return result;
}

_QWORD *llvm::AGX::CompileRequest::addDMAListEntry(llvm::AGX::CompileRequest *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  return sub_1C566834C(*(uint64_t ***)(*(_QWORD *)this + 8), a2, a3, a4, a5);
}

uint64_t llvm::AGX::CompileRequest::getModule(llvm::AGX::CompileRequest *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 8);
}

void llvm::AGX::CompileRequest::addSegments(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t **v7;
  void *__p[2];
  uint64_t v9;
  void *__dst[2];
  uint64_t v11;

  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        sub_1C47EBC30(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v6 = *a2;
        v11 = *((_QWORD *)a2 + 2);
        *(_OWORD *)__dst = v6;
      }
      v7 = *(uint64_t ***)(*(_QWORD *)a1 + 8);
      if (SHIBYTE(v11) < 0)
      {
        sub_1C47EBC30(__p, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)__dst;
        v9 = v11;
      }
      llvm::addExtraSegment(v7, (uint64_t)__p);
      if (SHIBYTE(v9) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v11) < 0)
        operator delete(__dst[0]);
      a2 = (__int128 *)((char *)a2 + 24);
      v5 -= 24;
    }
    while (v5);
  }
}

uint64_t *llvm::AGX::CompileRequest::CompileRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = operator new();
  v11 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(v10 + 24) = *(_QWORD *)a4;
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 39) = *(_QWORD *)(a4 + 15);
  LOBYTE(v11) = *(_BYTE *)(a4 + 23);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = a2;
  *(_QWORD *)(v10 + 16) = a3;
  *(_BYTE *)(v10 + 47) = v11;
  *(_DWORD *)(v10 + 48) = a5;
  *(_QWORD *)(v10 + 56) = 0;
  *a1 = v10;
  return a1;
}

{
  uint64_t v10;
  uint64_t v11;

  v10 = operator new();
  v11 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(v10 + 24) = *(_QWORD *)a4;
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 39) = *(_QWORD *)(a4 + 15);
  LOBYTE(v11) = *(_BYTE *)(a4 + 23);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = a2;
  *(_QWORD *)(v10 + 16) = a3;
  *(_BYTE *)(v10 + 47) = v11;
  *(_DWORD *)(v10 + 48) = a5;
  *(_QWORD *)(v10 + 56) = 0;
  *a1 = v10;
  return a1;
}

uint64_t *llvm::AGX::CompileRequest::CompileRequest(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;

  v12 = operator new();
  v13 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(v12 + 24) = *(_QWORD *)a4;
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 39) = *(_QWORD *)(a4 + 15);
  LOBYTE(v13) = *(_BYTE *)(a4 + 23);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = a2;
  *(_QWORD *)(v12 + 16) = a3;
  *(_BYTE *)(v12 + 47) = v13;
  *(_DWORD *)(v12 + 48) = a5;
  *(_QWORD *)(v12 + 56) = a6;
  *a1 = v12;
  return a1;
}

{
  uint64_t v12;
  uint64_t v13;

  v12 = operator new();
  v13 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(v12 + 24) = *(_QWORD *)a4;
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 39) = *(_QWORD *)(a4 + 15);
  LOBYTE(v13) = *(_BYTE *)(a4 + 23);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = a2;
  *(_QWORD *)(v12 + 16) = a3;
  *(_BYTE *)(v12 + 47) = v13;
  *(_DWORD *)(v12 + 48) = a5;
  *(_QWORD *)(v12 + 56) = a6;
  *a1 = v12;
  return a1;
}

uint64_t llvm::AGX::CompileRequest::getOptions(llvm::AGX::CompileRequest *this)
{
  return *(_QWORD *)this + 16;
}

{
  return *(_QWORD *)this + 16;
}

uint64_t llvm::AGX::CompileRequest::getMaybeLoggingStream(llvm::AGX::CompileRequest *this)
{
  return **(_QWORD **)this;
}

uint64_t llvm::AGX::CompileRequest::setLoggingStream(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 40) = 0;
  *(_QWORD *)v4 = &unk_1E8133FC0;
  *(_QWORD *)(v4 + 64) = a2;
  *(_DWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  result = *v3;
  *v3 = v4;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::AGX::CompileRequest::getShaderType(llvm::AGX::CompileRequest *this)
{
  return *(_QWORD *)this + 24;
}

void llvm::AGX::CompileRequest::~CompileRequest(uint64_t **this)
{
  uint64_t *v1;

  v1 = *this;
  *this = 0;
  if (v1)
    sub_1C4D85640((uint64_t)this, v1);
}

{
  uint64_t *v1;

  v1 = *this;
  *this = 0;
  if (v1)
    sub_1C4D85640((uint64_t)this, v1);
}

_QWORD *llvm::AGX::CompileRequest::CompileRequest(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t **llvm::AGX::CompileRequest::operator=(uint64_t **a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
    sub_1C4D85640((uint64_t)a1, v4);
  return a1;
}

void sub_1C4D85640(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if (a2)
  {
    if (*((char *)a2 + 47) < 0)
      operator delete((void *)a2[3]);
    v3 = *a2;
    *a2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x1CAA32FC0);
  }
}

uint64_t *llvm::AGX::CompileReply::CompileReply(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v11[3];
  void **v12;

  v6 = operator new();
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v6 = *(_QWORD *)a2;
  *(_QWORD *)(v6 + 8) = v7;
  *(_QWORD *)(v6 + 15) = *(_QWORD *)(a2 + 15);
  LOBYTE(v7) = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v8 = *((_QWORD *)a3 + 2);
  v9 = *a3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(v6 + 23) = v7;
  *(_OWORD *)(v6 + 24) = v9;
  *(_QWORD *)(v6 + 40) = v8;
  v11[0] = 0;
  v11[1] = 0;
  *a1 = v6;
  v11[2] = 0;
  v12 = (void **)v11;
  sub_1C4764BBC(&v12);
  return a1;
}

BOOL llvm::AGX::CompileReply::isValid(llvm::AGX::CompileReply *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 result;
  BOOL v6;

  v2 = *(_QWORD *)(*(_QWORD *)this + 24);
  v1 = *(_QWORD *)(*(_QWORD *)this + 32);
  if (v2 == v1)
    return 1;
  v3 = v2 + 8;
  do
  {
    v4 = *(_DWORD *)(*(_QWORD *)(v3 - 8) + 8);
    result = v4 != 0;
    if (v4)
      v6 = v3 == v1;
    else
      v6 = 1;
    v3 += 8;
  }
  while (!v6);
  return result;
}

uint64_t llvm::AGX::CompileReply::getBinary(llvm::AGX::CompileReply *this)
{
  return *(_QWORD *)this;
}

uint64_t llvm::AGX::CompileReply::getDiagnostics(llvm::AGX::CompileReply *this)
{
  return *(_QWORD *)this + 24;
}

{
  return *(_QWORD *)this + 24;
}

_QWORD *llvm::AGX::CompileReply::CompileReply(_QWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

_QWORD *llvm::AGX::CompileReply::CompileReply(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

void llvm::AGX::CompileReply::~CompileReply(llvm::AGX::CompileReply *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    sub_1C4D85830((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    sub_1C4D85830((uint64_t)this, v1);
}

uint64_t sub_1C4D85830(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 24);
    sub_1C4764BBC(&v4);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    return MEMORY[0x1CAA32FC0](a2, 0x1032C402D514303);
  }
  return result;
}

double llvm::AGX::TargetResolver::getTargetInfo@<D0>(const std::string *a1@<X0>, uint64_t a2@<X8>)
{
  const char **v4;
  const char *v5;
  size_t v6;
  std::string::size_type v7;
  std::string *p_p;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  signed __int8 v12;
  std::string::size_type size;
  int v14;
  std::string::size_type v15;
  std::string *v16;
  uint64_t v17;
  const std::string *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  char v24;
  size_t v25;
  size_t v26;
  void *v27;
  const char **v28;
  const char *v29;
  size_t v30;
  std::string::size_type v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  signed __int8 v36;
  std::string::size_type v37;
  int v38;
  std::string::size_type v39;
  std::string *v40;
  uint64_t v41;
  const std::string *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  double result;
  _BOOL4 v51;
  char v52;
  std::string::size_type v53;
  std::string::size_type v54;
  std::string *v55;
  size_t v56;
  _BOOL4 v57;
  char v58;
  const char *v59;
  const char **v60;
  size_t v61;
  std::string::size_type v62;
  std::string *v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v66;
  signed __int8 v67;
  std::string::size_type v68;
  int v69;
  std::string::size_type v70;
  std::string *v71;
  uint64_t v72;
  const std::string *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  char v78;
  size_t v79;
  size_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  std::string __p;
  char v85;

  v4 = (const char **)&off_1E8053EF8;
  while (1)
  {
    v5 = *v4;
    v6 = strlen(*v4);
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_145;
    v7 = v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      p_p = (std::string *)operator new(v9 + 1);
      __p.__r_.__value_.__l.__size_ = v7;
      __p.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
LABEL_9:
      memmove(p_p, v5, v7);
      goto LABEL_10;
    }
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v6;
    p_p = &__p;
    if (v6)
      goto LABEL_9;
LABEL_10:
    v11 = 0;
    p_p->__r_.__value_.__s.__data_[v7] = 0;
    v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v12 >= 0)
      size = v12 & 0x7F;
    else
      size = a1->__r_.__value_.__l.__size_;
    v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v15 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = __p.__r_.__value_.__l.__size_;
    if (size != v15)
      goto LABEL_29;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &__p;
    else
      v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v11 = memcmp(a1->__r_.__value_.__l.__data_, v16, a1->__r_.__value_.__l.__size_) == 0;
      goto LABEL_29;
    }
    if ((v12 & 0x7F) != 0)
    {
      v17 = (v12 & 0x7F) - 1;
      v18 = a1;
      do
      {
        v20 = v18->__r_.__value_.__s.__data_[0];
        v18 = (const std::string *)((char *)v18 + 1);
        v19 = v20;
        v22 = v16->__r_.__value_.__s.__data_[0];
        v16 = (std::string *)((char *)v16 + 1);
        v21 = v22;
        v23 = v17-- != 0;
        v24 = v23;
        v11 = v19 == v21;
      }
      while (v19 == v21 && (v24 & 1) != 0);
LABEL_29:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_31;
LABEL_30:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_31;
    }
    v11 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_30;
LABEL_31:
    if (v11)
      break;
    v4 += 12;
    if (v4 == (const char **)&unk_1E8054318)
    {
      v28 = (const char **)&off_1E80B9520;
      while (1)
      {
        v29 = *v28;
        v30 = strlen(*v28);
        if (v30 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_145;
        v31 = v30;
        if (v30 >= 0x17)
          break;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v30;
        v32 = &__p;
        if (v30)
          goto LABEL_47;
LABEL_48:
        v35 = 0;
        v32->__r_.__value_.__s.__data_[v31] = 0;
        v36 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
        if (v36 >= 0)
          v37 = v36 & 0x7F;
        else
          v37 = a1->__r_.__value_.__l.__size_;
        v38 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        v39 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v39 = __p.__r_.__value_.__l.__size_;
        if (v37 == v39)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = &__p;
          else
            v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((*((_BYTE *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
          {
            v35 = memcmp(a1->__r_.__value_.__l.__data_, v40, a1->__r_.__value_.__l.__size_) == 0;
          }
          else
          {
            if ((v36 & 0x7F) == 0)
            {
              v35 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_69;
LABEL_68:
              operator delete(__p.__r_.__value_.__l.__data_);
              goto LABEL_69;
            }
            v41 = (v36 & 0x7F) - 1;
            v42 = a1;
            do
            {
              v44 = v42->__r_.__value_.__s.__data_[0];
              v42 = (const std::string *)((char *)v42 + 1);
              v43 = v44;
              v46 = v40->__r_.__value_.__s.__data_[0];
              v40 = (std::string *)((char *)v40 + 1);
              v45 = v46;
              v23 = v41-- != 0;
              v47 = v23;
              v35 = v43 == v45;
            }
            while (v43 == v45 && (v47 & 1) != 0);
          }
        }
        if (v38 < 0)
          goto LABEL_68;
LABEL_69:
        if (v35)
        {
          v59 = "agx2-apple-ios";
          goto LABEL_136;
        }
        v28 += 12;
        if (v28 == (const char **)&unk_1E80BA420)
        {
          v60 = (const char **)&off_1E812E978;
          while (1)
          {
            v29 = *v60;
            v61 = strlen(*v60);
            if (v61 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_145;
            v62 = v61;
            if (v61 >= 0x17)
              break;
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = v61;
            v63 = &__p;
            if (v61)
              goto LABEL_108;
LABEL_109:
            v66 = 0;
            v63->__r_.__value_.__s.__data_[v62] = 0;
            v67 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
            if (v67 >= 0)
              v68 = v67 & 0x7F;
            else
              v68 = a1->__r_.__value_.__l.__size_;
            v69 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            v70 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v70 = __p.__r_.__value_.__l.__size_;
            if (v68 != v70)
              goto LABEL_128;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v71 = &__p;
            else
              v71 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((*((_BYTE *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
            {
              v66 = memcmp(a1->__r_.__value_.__l.__data_, v71, a1->__r_.__value_.__l.__size_) == 0;
              goto LABEL_128;
            }
            if ((v67 & 0x7F) != 0)
            {
              v72 = (v67 & 0x7F) - 1;
              v73 = a1;
              do
              {
                v75 = v73->__r_.__value_.__s.__data_[0];
                v73 = (const std::string *)((char *)v73 + 1);
                v74 = v75;
                v77 = v71->__r_.__value_.__s.__data_[0];
                v71 = (std::string *)((char *)v71 + 1);
                v76 = v77;
                v23 = v72-- != 0;
                v78 = v23;
                v66 = v74 == v76;
              }
              while (v74 == v76 && (v78 & 1) != 0);
LABEL_128:
              if ((v69 & 0x80000000) == 0)
                goto LABEL_130;
LABEL_129:
              operator delete(__p.__r_.__value_.__l.__data_);
              goto LABEL_130;
            }
            v66 = 1;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_129;
LABEL_130:
            if (v66)
            {
              v59 = "agx3-apple-ios";
LABEL_136:
              *(_BYTE *)(a2 + 23) = 14;
              *(_QWORD *)a2 = *(_QWORD *)v59;
              *(_QWORD *)(a2 + 6) = *(_QWORD *)(v59 + 6);
              *(_BYTE *)(a2 + 14) = 0;
              v79 = strlen(v29);
              if (v79 <= 0x7FFFFFFFFFFFFFF7)
              {
                v80 = v79;
                if (v79 >= 0x17)
                {
                  v82 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v79 | 7) != 0x17)
                    v82 = v79 | 7;
                  v83 = v82 + 1;
                  v81 = operator new(v82 + 1);
                  *(_QWORD *)(a2 + 32) = v80;
                  *(_QWORD *)(a2 + 40) = v83 | 0x8000000000000000;
                  *(_QWORD *)(a2 + 24) = v81;
                }
                else
                {
                  v81 = (_BYTE *)(a2 + 24);
                  *(_BYTE *)(a2 + 47) = v79;
                  if (!v79)
                  {
LABEL_144:
                    v81[v80] = 0;
                    *(_BYTE *)(a2 + 71) = 0;
                    *(_BYTE *)(a2 + 48) = 0;
                    return result;
                  }
                }
                memmove(v81, v29, v80);
                goto LABEL_144;
              }
LABEL_145:
              abort();
            }
            v60 += 12;
            if (v60 == (const char **)&unk_1E812F098)
            {
              *(_QWORD *)(a2 + 64) = 0;
              result = 0.0;
              *(_OWORD *)(a2 + 32) = 0u;
              *(_OWORD *)(a2 + 48) = 0u;
              *(_OWORD *)a2 = 0u;
              *(_OWORD *)(a2 + 16) = 0u;
              return result;
            }
          }
          v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v61 | 7) != 0x17)
            v64 = v61 | 7;
          v65 = v64 + 1;
          v63 = (std::string *)operator new(v64 + 1);
          __p.__r_.__value_.__l.__size_ = v62;
          __p.__r_.__value_.__r.__words[2] = v65 | 0x8000000000000000;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
LABEL_108:
          memmove(v63, v29, v62);
          goto LABEL_109;
        }
      }
      v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v33 = v30 | 7;
      v34 = v33 + 1;
      v32 = (std::string *)operator new(v33 + 1);
      __p.__r_.__value_.__l.__size_ = v31;
      __p.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
LABEL_47:
      memmove(v32, v29, v31);
      goto LABEL_48;
    }
  }
  *(_BYTE *)(a2 + 23) = 14;
  strcpy((char *)a2, "agx1-apple-ios");
  v25 = strlen(v5);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_145;
  v26 = v25;
  if (v25 >= 0x17)
  {
    v48 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v48 = v25 | 7;
    v49 = v48 + 1;
    v27 = operator new(v48 + 1);
    *(_QWORD *)(a2 + 32) = v26;
    *(_QWORD *)(a2 + 40) = v49 | 0x8000000000000000;
    *(_QWORD *)(a2 + 24) = v27;
  }
  else
  {
    v27 = (void *)(a2 + 24);
    *(_BYTE *)(a2 + 47) = v25;
    if (!v25)
      goto LABEL_78;
  }
  memmove(v27, v5, v26);
LABEL_78:
  *((_BYTE *)v27 + v26) = 0;
  std::string::basic_string(&__p, a1, 0, 3uLL, (std::allocator<char> *)&v85);
  v51 = 0;
  v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v53 = __p.__r_.__value_.__l.__size_;
  if (v53 == 3)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v54 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = &__p;
    else
      v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v54 >= 3)
      v56 = 3;
    else
      v56 = v54;
    v57 = memcmp(v55, "g4g", v56) == 0;
    v51 = v54 == 3 && v57;
  }
  if (v52 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v51)
  {
    strcpy((char *)(a2 + 48), "-dualphantom");
    v58 = 12;
  }
  else
  {
    v58 = 0;
    *(_BYTE *)(a2 + 48) = 0;
  }
  *(_BYTE *)(a2 + 71) = v58;
  return result;
}

uint64_t llvm::AGX::TargetResolver::supportsTarget(unsigned __int8 *a1)
{
  const char **v2;
  const char *v3;
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  signed __int8 v10;
  uint64_t v11;
  int v12;
  size_t v13;
  void **v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  char v22;
  const char **v23;
  const char *v24;
  size_t v25;
  size_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  signed __int8 v31;
  uint64_t v32;
  int v33;
  size_t v34;
  void **v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  char v42;
  _BOOL8 v43;
  const char **v45;
  const char *v46;
  size_t v47;
  size_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  signed __int8 v52;
  uint64_t v53;
  int v54;
  size_t v55;
  void **v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  char v63;
  int v64;
  void **__dst;
  size_t v66;
  int64_t v67;

  v2 = (const char **)&off_1E8053EF8;
  while (1)
  {
    v3 = *v2;
    v4 = strlen(*v2);
    if (v4 > 0x7FFFFFFFFFFFFFF7)
LABEL_108:
      abort();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v7 = v4 | 7;
      v8 = v7 + 1;
      p_dst = (void **)operator new(v7 + 1);
      v66 = v5;
      v67 = v8 | 0x8000000000000000;
      __dst = p_dst;
LABEL_9:
      memmove(p_dst, v3, v5);
      goto LABEL_10;
    }
    HIBYTE(v67) = v4;
    p_dst = (void **)&__dst;
    if (v4)
      goto LABEL_9;
LABEL_10:
    v9 = 0;
    *((_BYTE *)p_dst + v5) = 0;
    v10 = a1[23];
    if (v10 >= 0)
      v11 = v10 & 0x7F;
    else
      v11 = *((_QWORD *)a1 + 1);
    v12 = SHIBYTE(v67);
    v13 = HIBYTE(v67) & 0x7F;
    if (v67 < 0)
      v13 = v66;
    if (v11 != v13)
      goto LABEL_29;
    if (v67 >= 0)
      v14 = (void **)&__dst;
    else
      v14 = __dst;
    if ((a1[23] & 0x80) != 0)
    {
      v9 = memcmp(*(const void **)a1, v14, *((_QWORD *)a1 + 1)) == 0;
      goto LABEL_29;
    }
    if ((v10 & 0x7F) != 0)
    {
      v15 = (v10 & 0x7F) - 1;
      v16 = a1;
      do
      {
        v18 = *v16++;
        v17 = v18;
        v20 = *(unsigned __int8 *)v14;
        v14 = (void **)((char *)v14 + 1);
        v19 = v20;
        v21 = v15-- != 0;
        v22 = v21;
        v9 = v17 == v19;
      }
      while (v17 == v19 && (v22 & 1) != 0);
LABEL_29:
      if ((v12 & 0x80000000) == 0)
        goto LABEL_31;
LABEL_30:
      operator delete(__dst);
      goto LABEL_31;
    }
    v9 = 1;
    if (SHIBYTE(v67) < 0)
      goto LABEL_30;
LABEL_31:
    if (v9)
      return 1;
    v2 += 12;
    if (v2 == (const char **)&unk_1E8054318)
    {
      v23 = (const char **)&off_1E80B9520;
      while (1)
      {
        v24 = *v23;
        v25 = strlen(*v23);
        if (v25 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_108;
        v26 = v25;
        if (v25 >= 0x17)
          break;
        HIBYTE(v67) = v25;
        v27 = (void **)&__dst;
        if (v25)
          goto LABEL_43;
LABEL_44:
        v30 = 0;
        *((_BYTE *)v27 + v26) = 0;
        v31 = a1[23];
        if (v31 >= 0)
          v32 = v31 & 0x7F;
        else
          v32 = *((_QWORD *)a1 + 1);
        v33 = SHIBYTE(v67);
        v34 = HIBYTE(v67) & 0x7F;
        if (v67 < 0)
          v34 = v66;
        if (v32 == v34)
        {
          if (v67 >= 0)
            v35 = (void **)&__dst;
          else
            v35 = __dst;
          if ((a1[23] & 0x80) != 0)
          {
            v30 = memcmp(*(const void **)a1, v35, *((_QWORD *)a1 + 1)) == 0;
          }
          else
          {
            if ((v31 & 0x7F) == 0)
            {
              v30 = 1;
              if ((SHIBYTE(v67) & 0x80000000) == 0)
                goto LABEL_65;
LABEL_64:
              operator delete(__dst);
              goto LABEL_65;
            }
            v36 = (v31 & 0x7F) - 1;
            v37 = a1;
            do
            {
              v39 = *v37++;
              v38 = v39;
              v41 = *(unsigned __int8 *)v35;
              v35 = (void **)((char *)v35 + 1);
              v40 = v41;
              v21 = v36-- != 0;
              v42 = v21;
              v30 = v38 == v40;
            }
            while (v38 == v40 && (v42 & 1) != 0);
          }
        }
        if (v33 < 0)
          goto LABEL_64;
LABEL_65:
        if (v30)
          return 1;
        v23 += 12;
        if (v23 == (const char **)&unk_1E80BA420)
        {
          v45 = (const char **)&off_1E812E978;
          while (1)
          {
            v46 = *v45;
            v47 = strlen(*v45);
            if (v47 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_108;
            v48 = v47;
            if (v47 >= 0x17)
              break;
            HIBYTE(v67) = v47;
            v49 = (void **)&__dst;
            if (v47)
              goto LABEL_79;
LABEL_80:
            v43 = 0;
            *((_BYTE *)v49 + v48) = 0;
            v52 = a1[23];
            if (v52 >= 0)
              v53 = v52 & 0x7F;
            else
              v53 = *((_QWORD *)a1 + 1);
            v54 = SHIBYTE(v67);
            v55 = HIBYTE(v67) & 0x7F;
            if (v67 < 0)
              v55 = v66;
            if (v53 == v55)
            {
              if (v67 >= 0)
                v56 = (void **)&__dst;
              else
                v56 = __dst;
              if ((a1[23] & 0x80) != 0)
              {
                v43 = memcmp(*(const void **)a1, v56, *((_QWORD *)a1 + 1)) == 0;
              }
              else
              {
                if ((v52 & 0x7F) == 0)
                {
                  v43 = 1;
                  if ((SHIBYTE(v67) & 0x80000000) == 0)
                    goto LABEL_101;
LABEL_100:
                  operator delete(__dst);
                  goto LABEL_101;
                }
                v57 = (v52 & 0x7F) - 1;
                v58 = a1;
                do
                {
                  v60 = *v58++;
                  v59 = v60;
                  v62 = *(unsigned __int8 *)v56;
                  v56 = (void **)((char *)v56 + 1);
                  v61 = v62;
                  v21 = v57-- != 0;
                  v63 = v21;
                  v43 = v59 == v61;
                }
                while (v59 == v61 && (v63 & 1) != 0);
              }
            }
            if (v54 < 0)
              goto LABEL_100;
LABEL_101:
            v45 += 12;
            v64 = v45 == (const char **)&unk_1E812F098 || v43;
            if (v64 == 1)
              return v43;
          }
          v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v47 | 7) != 0x17)
            v50 = v47 | 7;
          v51 = v50 + 1;
          v49 = (void **)operator new(v50 + 1);
          v66 = v48;
          v67 = v51 | 0x8000000000000000;
          __dst = v49;
LABEL_79:
          memmove(v49, v46, v48);
          goto LABEL_80;
        }
      }
      v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v28 = v25 | 7;
      v29 = v28 + 1;
      v27 = (void **)operator new(v28 + 1);
      v66 = v26;
      v67 = v29 | 0x8000000000000000;
      __dst = v27;
LABEL_43:
      memmove(v27, v24, v26);
      goto LABEL_44;
    }
  }
}

void llvm::AGX::TargetResolver::getTargetList(int64x2_t *a1@<X8>)
{
  int64x2_t *v3;
  const char **v4;
  const char *v5;
  size_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int64x2_t v21;
  char v22;
  char *v23;
  const char **v24;
  const char *v25;
  size_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  int64x2_t v41;
  char v42;
  char *v43;
  const char **v44;
  const char *v45;
  size_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  int64x2_t v61;
  char v62;
  char *v63;
  void *__p[2];
  unint64_t v65;
  uint64_t v66;
  int64x2_t v67;
  unint64_t v68;
  uint64_t *v69;

  a1[1].i64[0] = 0;
  v3 = a1 + 1;
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  v4 = (const char **)&off_1E8053EF8;
  do
  {
    v5 = *v4;
    v6 = strlen(*v4);
    if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_89:
      abort();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = operator new(v9 + 1);
      __p[1] = v7;
      v65 = v10 | 0x8000000000000000;
      __p[0] = v8;
LABEL_9:
      memmove(v8, v5, (size_t)v7);
      goto LABEL_10;
    }
    HIBYTE(v65) = v6;
    v8 = __p;
    if (v6)
      goto LABEL_9;
LABEL_10:
    *((_BYTE *)v7 + (_QWORD)v8) = 0;
    v11 = a1->u64[1];
    v12 = a1[1].u64[0];
    if (v11 >= v12)
    {
      v13 = a1->i64[0];
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - a1->i64[0]) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_89;
      if (0x5555555555555556 * ((uint64_t)(v12 - v13) >> 3) > v15)
        v15 = 0x5555555555555556 * ((uint64_t)(v12 - v13) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v13) >> 3) >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v15;
      v69 = (uint64_t *)v3;
      if (v16)
      {
        if (v16 > 0xAAAAAAAAAAAAAAALL)
LABEL_90:
          sub_1C4764EE4();
        v17 = (char *)operator new(24 * v16);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[24 * v14];
      *(_OWORD *)v18 = *(_OWORD *)__p;
      *((_QWORD *)v18 + 2) = v65;
      __p[1] = 0;
      v65 = 0;
      __p[0] = 0;
      if (v11 == v13)
      {
        v22 = 0;
        v21 = vdupq_n_s64(v11);
        v19 = &v17[24 * v14];
      }
      else
      {
        v19 = &v17[24 * v14];
        do
        {
          v20 = *(_OWORD *)(v11 - 24);
          *((_QWORD *)v19 - 1) = *(_QWORD *)(v11 - 8);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          *(_QWORD *)(v11 - 16) = 0;
          *(_QWORD *)(v11 - 8) = 0;
          *(_QWORD *)(v11 - 24) = 0;
          v11 -= 24;
        }
        while (v11 != v13);
        v21 = *a1;
        v12 = a1[1].u64[0];
        v22 = HIBYTE(v65);
      }
      v23 = v18 + 24;
      a1->i64[0] = (uint64_t)v19;
      a1->i64[1] = (uint64_t)(v18 + 24);
      v67 = v21;
      a1[1].i64[0] = (uint64_t)&v17[24 * v16];
      v68 = v12;
      v66 = v21.i64[0];
      sub_1C4D868F0((uint64_t)&v66);
      a1->i64[1] = (uint64_t)v23;
      if (v22 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)__p;
      *(_QWORD *)(v11 + 16) = v65;
      a1->i64[1] = v11 + 24;
    }
    v4 += 12;
  }
  while (v4 != (const char **)&unk_1E8054318);
  v24 = (const char **)&off_1E80B9520;
  do
  {
    v25 = *v24;
    v26 = strlen(*v24);
    if (v26 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_89;
    v27 = (void *)v26;
    if (v26 >= 0x17)
    {
      v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v29 = v26 | 7;
      v30 = v29 + 1;
      v28 = operator new(v29 + 1);
      __p[1] = v27;
      v65 = v30 | 0x8000000000000000;
      __p[0] = v28;
LABEL_38:
      memmove(v28, v25, (size_t)v27);
      goto LABEL_39;
    }
    HIBYTE(v65) = v26;
    v28 = __p;
    if (v26)
      goto LABEL_38;
LABEL_39:
    *((_BYTE *)v27 + (_QWORD)v28) = 0;
    v31 = a1->u64[1];
    v32 = a1[1].u64[0];
    if (v31 >= v32)
    {
      v33 = a1->i64[0];
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - a1->i64[0]) >> 3);
      v35 = v34 + 1;
      if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_89;
      if (0x5555555555555556 * ((uint64_t)(v32 - v33) >> 3) > v35)
        v35 = 0x5555555555555556 * ((uint64_t)(v32 - v33) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - v33) >> 3) >= 0x555555555555555)
        v36 = 0xAAAAAAAAAAAAAAALL;
      else
        v36 = v35;
      v69 = (uint64_t *)v3;
      if (v36)
      {
        if (v36 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_90;
        v37 = (char *)operator new(24 * v36);
      }
      else
      {
        v37 = 0;
      }
      v38 = &v37[24 * v34];
      *(_OWORD *)v38 = *(_OWORD *)__p;
      *((_QWORD *)v38 + 2) = v65;
      __p[1] = 0;
      v65 = 0;
      __p[0] = 0;
      if (v31 == v33)
      {
        v42 = 0;
        v41 = vdupq_n_s64(v31);
        v39 = &v37[24 * v34];
      }
      else
      {
        v39 = &v37[24 * v34];
        do
        {
          v40 = *(_OWORD *)(v31 - 24);
          *((_QWORD *)v39 - 1) = *(_QWORD *)(v31 - 8);
          *(_OWORD *)(v39 - 24) = v40;
          v39 -= 24;
          *(_QWORD *)(v31 - 16) = 0;
          *(_QWORD *)(v31 - 8) = 0;
          *(_QWORD *)(v31 - 24) = 0;
          v31 -= 24;
        }
        while (v31 != v33);
        v41 = *a1;
        v32 = a1[1].u64[0];
        v42 = HIBYTE(v65);
      }
      v43 = v38 + 24;
      a1->i64[0] = (uint64_t)v39;
      a1->i64[1] = (uint64_t)(v38 + 24);
      v67 = v41;
      a1[1].i64[0] = (uint64_t)&v37[24 * v36];
      v68 = v32;
      v66 = v41.i64[0];
      sub_1C4D868F0((uint64_t)&v66);
      a1->i64[1] = (uint64_t)v43;
      if (v42 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)v31 = *(_OWORD *)__p;
      *(_QWORD *)(v31 + 16) = v65;
      a1->i64[1] = v31 + 24;
    }
    v24 += 12;
  }
  while (v24 != (const char **)&unk_1E80BA420);
  v44 = (const char **)&off_1E812E978;
  do
  {
    v45 = *v44;
    v46 = strlen(*v44);
    if (v46 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_89;
    v47 = (void *)v46;
    if (v46 >= 0x17)
    {
      v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17)
        v49 = v46 | 7;
      v50 = v49 + 1;
      v48 = operator new(v49 + 1);
      __p[1] = v47;
      v65 = v50 | 0x8000000000000000;
      __p[0] = v48;
LABEL_67:
      memmove(v48, v45, (size_t)v47);
      goto LABEL_68;
    }
    HIBYTE(v65) = v46;
    v48 = __p;
    if (v46)
      goto LABEL_67;
LABEL_68:
    *((_BYTE *)v47 + (_QWORD)v48) = 0;
    v51 = a1->u64[1];
    v52 = a1[1].u64[0];
    if (v51 >= v52)
    {
      v53 = a1->i64[0];
      v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - a1->i64[0]) >> 3);
      v55 = v54 + 1;
      if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_89;
      if (0x5555555555555556 * ((uint64_t)(v52 - v53) >> 3) > v55)
        v55 = 0x5555555555555556 * ((uint64_t)(v52 - v53) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - v53) >> 3) >= 0x555555555555555)
        v56 = 0xAAAAAAAAAAAAAAALL;
      else
        v56 = v55;
      v69 = (uint64_t *)v3;
      if (v56)
      {
        if (v56 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_90;
        v57 = (char *)operator new(24 * v56);
      }
      else
      {
        v57 = 0;
      }
      v58 = &v57[24 * v54];
      *(_OWORD *)v58 = *(_OWORD *)__p;
      *((_QWORD *)v58 + 2) = v65;
      __p[1] = 0;
      v65 = 0;
      __p[0] = 0;
      if (v51 == v53)
      {
        v62 = 0;
        v61 = vdupq_n_s64(v51);
        v59 = &v57[24 * v54];
      }
      else
      {
        v59 = &v57[24 * v54];
        do
        {
          v60 = *(_OWORD *)(v51 - 24);
          *((_QWORD *)v59 - 1) = *(_QWORD *)(v51 - 8);
          *(_OWORD *)(v59 - 24) = v60;
          v59 -= 24;
          *(_QWORD *)(v51 - 16) = 0;
          *(_QWORD *)(v51 - 8) = 0;
          *(_QWORD *)(v51 - 24) = 0;
          v51 -= 24;
        }
        while (v51 != v53);
        v61 = *a1;
        v52 = a1[1].u64[0];
        v62 = HIBYTE(v65);
      }
      v63 = v58 + 24;
      a1->i64[0] = (uint64_t)v59;
      a1->i64[1] = (uint64_t)(v58 + 24);
      v67 = v61;
      a1[1].i64[0] = (uint64_t)&v57[24 * v56];
      v68 = v52;
      v66 = v61.i64[0];
      sub_1C4D868F0((uint64_t)&v66);
      a1->i64[1] = (uint64_t)v63;
      if (v62 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)v51 = *(_OWORD *)__p;
      *(_QWORD *)(v51 + 16) = v65;
      a1->i64[1] = v51 + 24;
    }
    v44 += 12;
  }
  while (v44 != (const char **)&unk_1E812F098);
}

uint64_t sub_1C4D868F0(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *llvm::AGX::TelemetryCollector::TelemetryCollector(_QWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

xpc_object_t **llvm::AGX::TelemetryCollector::enable(xpc_object_t **this)
{
  xpc_object_t **v1;
  xpc_object_t *v2;

  if (*this)
    goto LABEL_2;
  v1 = this;
  this = (xpc_object_t **)operator new();
  *this = 0;
  v2 = *v1;
  *v1 = (xpc_object_t *)this;
  if (!v2)
    goto LABEL_2;
  if (*v2)
    xpc_release(*v2);
  this = (xpc_object_t **)MEMORY[0x1CAA32FC0](v2, 0x80C40B8603338);
  if (*v1)
  {
LABEL_2:
    byte_1ED836D79 = 1;
    byte_1ED836D7A = 1;
    llvm::TimePassesIsEnabled = 1;
  }
  return this;
}

void llvm::AGX::TelemetryCollector::setInstructionSelector(xpc_object_t **this, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (*this)
  {
    v3 = 3;
    if (!a3)
      v3 = 1;
    if (a2)
      v4 = 2;
    else
      v4 = v3;
    xpc_dictionary_set_uint64(**this, "instruction_selector", v4);
  }
}

llvm *llvm::AGX::TelemetryCollector::startCollection(llvm *this)
{
  xpc_object_t *v1;

  v1 = *(xpc_object_t **)this;
  if (*(_QWORD *)this)
  {
    llvm::ResetStatistics(this);
    if (*v1)
      xpc_release(*v1);
    this = (llvm *)xpc_dictionary_create(0, 0, 0);
    *v1 = this;
  }
  return this;
}

void llvm::AGX::TelemetryCollector::finishCollection(xpc_object_t **this)
{
  xpc_object_t *v1;
  const void **v2;
  const void **v3;
  const void *v4;
  size_t v5;
  void *p_p;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  size_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  const void *v18;
  size_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  size_t v29;
  _BOOL4 v30;
  _BOOL4 v31;
  const void *v32;
  size_t v33;
  void *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  const void *v42;
  size_t v43;
  _BOOL4 v44;
  _BOOL4 v45;
  const void *v46;
  size_t v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  const void *v56;
  size_t v57;
  _BOOL4 v58;
  _BOOL4 v59;
  const void *v60;
  size_t v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  const void *v70;
  size_t v71;
  _BOOL4 v72;
  _BOOL4 v73;
  uint64_t NamedTimer;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *__p;
  size_t v109;
  unint64_t v110;
  void *v111;
  const void **v112;

  v1 = *this;
  if (*this)
  {
    llvm::GetStatistics((const char ***)&v111);
    v2 = (const void **)v111;
    v3 = v112;
    if (v111 != v112)
    {
      do
      {
        v4 = *v2;
        if (!*v2)
        {
          v7 = 0;
          v8 = 0;
          __p = 0;
          v109 = 0;
          v110 = 0;
          goto LABEL_14;
        }
        v5 = (size_t)v2[1];
        if (v5 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_201;
        if (v5 >= 0x17)
        {
          v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v5 | 7) != 0x17)
            v9 = v5 | 7;
          v10 = v9 + 1;
          p_p = operator new(v9 + 1);
          v109 = v5;
          v110 = v10 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v110) = v2[1];
          p_p = &__p;
          if (!v5)
            goto LABEL_13;
        }
        memmove(p_p, v4, v5);
LABEL_13:
        *((_BYTE *)p_p + v5) = 0;
        v8 = HIBYTE(v110);
        v7 = v109;
LABEL_14:
        v11 = (char)v8;
        v12 = v8 & 0x7F;
        if ((v8 & 0x80u) != 0)
          v12 = v7;
        if (v12 != 19)
        {
          v17 = 0;
          if (((char)v8 & 0x80000000) == 0)
            goto LABEL_33;
LABEL_32:
          operator delete(__p);
          goto LABEL_33;
        }
        if ((v8 & 0x80u) == 0)
          v13 = v8;
        else
          v13 = v7;
        if ((v8 & 0x80u) == 0)
          v14 = &__p;
        else
          v14 = __p;
        if (v13 >= 0x13)
          v15 = 19;
        else
          v15 = v13;
        v16 = memcmp(v14, "NumFastIselFailures", v15) == 0;
        v17 = v13 == 19 && v16;
        if (v11 < 0)
          goto LABEL_32;
LABEL_33:
        if (v17)
          xpc_dictionary_set_uint64(*v1, "stat_numfastiselfailures", *((unsigned int *)v2 + 4));
        v18 = *v2;
        if (!*v2)
        {
          v21 = 0;
          v22 = 0;
          __p = 0;
          v109 = 0;
          v110 = 0;
          goto LABEL_46;
        }
        v19 = (size_t)v2[1];
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_201;
        if (v19 >= 0x17)
        {
          v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v23 = v19 | 7;
          v24 = v23 + 1;
          v20 = operator new(v23 + 1);
          v109 = v19;
          v110 = v24 | 0x8000000000000000;
          __p = v20;
        }
        else
        {
          HIBYTE(v110) = v2[1];
          v20 = &__p;
          if (!v19)
            goto LABEL_45;
        }
        memmove(v20, v18, v19);
LABEL_45:
        *((_BYTE *)v20 + v19) = 0;
        v22 = HIBYTE(v110);
        v21 = v109;
LABEL_46:
        v25 = (char)v22;
        v26 = v22 & 0x7F;
        if ((v22 & 0x80u) != 0)
          v26 = v21;
        if (v26 != 18)
        {
          v31 = 0;
          if (((char)v22 & 0x80000000) == 0)
            goto LABEL_65;
LABEL_64:
          operator delete(__p);
          goto LABEL_65;
        }
        if ((v22 & 0x80u) == 0)
          v27 = v22;
        else
          v27 = v21;
        if ((v22 & 0x80u) == 0)
          v28 = &__p;
        else
          v28 = __p;
        if (v27 >= 0x12)
          v29 = 18;
        else
          v29 = v27;
        v30 = memcmp(v28, "NumFastIselSuccess", v29) == 0;
        v31 = v27 == 18 && v30;
        if (v25 < 0)
          goto LABEL_64;
LABEL_65:
        if (v31)
          xpc_dictionary_set_uint64(*v1, "stat_numfastiselsuccesses", *((unsigned int *)v2 + 4));
        v32 = *v2;
        if (!*v2)
        {
          v35 = 0;
          v36 = 0;
          __p = 0;
          v109 = 0;
          v110 = 0;
          goto LABEL_78;
        }
        v33 = (size_t)v2[1];
        if (v33 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_201;
        if (v33 >= 0x17)
        {
          v37 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17)
            v37 = v33 | 7;
          v38 = v37 + 1;
          v34 = operator new(v37 + 1);
          v109 = v33;
          v110 = v38 | 0x8000000000000000;
          __p = v34;
        }
        else
        {
          HIBYTE(v110) = v2[1];
          v34 = &__p;
          if (!v33)
            goto LABEL_77;
        }
        memmove(v34, v32, v33);
LABEL_77:
        *((_BYTE *)v34 + v33) = 0;
        v36 = HIBYTE(v110);
        v35 = v109;
LABEL_78:
        v39 = (char)v36;
        v40 = v36 & 0x7F;
        if ((v36 & 0x80u) != 0)
          v40 = v35;
        if (v40 != 17)
        {
          v45 = 0;
          if (((char)v36 & 0x80000000) == 0)
            goto LABEL_97;
LABEL_96:
          operator delete(__p);
          goto LABEL_97;
        }
        if ((v36 & 0x80u) == 0)
          v41 = v36;
        else
          v41 = v35;
        if ((v36 & 0x80u) == 0)
          v42 = &__p;
        else
          v42 = __p;
        if (v41 >= 0x11)
          v43 = 17;
        else
          v43 = v41;
        v44 = memcmp(v42, "NumFunctionsReset", v43) == 0;
        v45 = v41 == 17 && v44;
        if (v39 < 0)
          goto LABEL_96;
LABEL_97:
        if (v45)
          xpc_dictionary_set_uint64(*v1, "stat_numfunctionsreset", *((unsigned int *)v2 + 4));
        v46 = *v2;
        if (!*v2)
        {
          v49 = 0;
          v50 = 0;
          __p = 0;
          v109 = 0;
          v110 = 0;
          goto LABEL_110;
        }
        v47 = (size_t)v2[1];
        if (v47 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_201;
        if (v47 >= 0x17)
        {
          v51 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v47 | 7) != 0x17)
            v51 = v47 | 7;
          v52 = v51 + 1;
          v48 = operator new(v51 + 1);
          v109 = v47;
          v110 = v52 | 0x8000000000000000;
          __p = v48;
        }
        else
        {
          HIBYTE(v110) = v2[1];
          v48 = &__p;
          if (!v47)
            goto LABEL_109;
        }
        memmove(v48, v46, v47);
LABEL_109:
        *((_BYTE *)v48 + v47) = 0;
        v50 = HIBYTE(v110);
        v49 = v109;
LABEL_110:
        v53 = (char)v50;
        v54 = v50 & 0x7F;
        if ((v50 & 0x80u) != 0)
          v54 = v49;
        if (v54 != 24)
        {
          v59 = 0;
          if (((char)v50 & 0x80000000) == 0)
            goto LABEL_129;
LABEL_128:
          operator delete(__p);
          goto LABEL_129;
        }
        if ((v50 & 0x80u) == 0)
          v55 = v50;
        else
          v55 = v49;
        if ((v50 & 0x80u) == 0)
          v56 = &__p;
        else
          v56 = __p;
        if (v55 >= 0x18)
          v57 = 24;
        else
          v57 = v55;
        v58 = memcmp(v56, "FallbackReportsGenerated", v57) == 0;
        v59 = v55 == 24 && v58;
        if (v53 < 0)
          goto LABEL_128;
LABEL_129:
        if (v59)
          xpc_dictionary_set_uint64(*v1, "stat_numfallbackreports_generated", *((unsigned int *)v2 + 4));
        v60 = *v2;
        if (!*v2)
        {
          v63 = 0;
          v64 = 0;
          __p = 0;
          v109 = 0;
          v110 = 0;
          goto LABEL_142;
        }
        v61 = (size_t)v2[1];
        if (v61 > 0x7FFFFFFFFFFFFFF7)
LABEL_201:
          abort();
        if (v61 >= 0x17)
        {
          v65 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v61 | 7) != 0x17)
            v65 = v61 | 7;
          v66 = v65 + 1;
          v62 = operator new(v65 + 1);
          v109 = v61;
          v110 = v66 | 0x8000000000000000;
          __p = v62;
        }
        else
        {
          HIBYTE(v110) = v2[1];
          v62 = &__p;
          if (!v61)
            goto LABEL_141;
        }
        memmove(v62, v60, v61);
LABEL_141:
        *((_BYTE *)v62 + v61) = 0;
        v64 = HIBYTE(v110);
        v63 = v109;
LABEL_142:
        v67 = (char)v64;
        v68 = v64 & 0x7F;
        if ((v64 & 0x80u) != 0)
          v68 = v63;
        if (v68 == 25)
        {
          if ((v64 & 0x80u) == 0)
            v69 = v64;
          else
            v69 = v63;
          if ((v64 & 0x80u) == 0)
            v70 = &__p;
          else
            v70 = __p;
          if (v69 >= 0x19)
            v71 = 25;
          else
            v71 = v69;
          v72 = memcmp(v70, "FallbackReportsSuppressed", v71) == 0;
          v73 = v69 == 25 && v72;
          if ((v67 & 0x80000000) == 0)
            goto LABEL_161;
LABEL_160:
          operator delete(__p);
          goto LABEL_161;
        }
        v73 = 0;
        if ((char)v64 < 0)
          goto LABEL_160;
LABEL_161:
        if (v73)
          xpc_dictionary_set_uint64(*v1, "stat_numfallbackreports_suppressed", *((unsigned int *)v2 + 4));
        v2 += 3;
      }
      while (v2 != v3);
    }
    NamedTimer = llvm::getNamedTimer("sdag", 4uLL, "combine1", 8uLL);
    if (NamedTimer)
    {
      v75 = ((*(double *)(NamedTimer + 8) + *(double *)(NamedTimer + 16)) * 1000000.0);
      *(_WORD *)(NamedTimer + 128) = 0;
      *(_OWORD *)(NamedTimer + 32) = 0u;
      *(_OWORD *)(NamedTimer + 48) = 0u;
      *(_OWORD *)(NamedTimer + 64) = 0u;
      *(_OWORD *)NamedTimer = 0u;
      *(_OWORD *)(NamedTimer + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_dagsel_dagcombining1", v75);
    }
    v76 = llvm::getNamedTimer("sdag", 4uLL, "legalize_types", 0xEuLL);
    if (v76)
    {
      v77 = ((*(double *)(v76 + 8) + *(double *)(v76 + 16)) * 1000000.0);
      *(_WORD *)(v76 + 128) = 0;
      *(_OWORD *)(v76 + 32) = 0u;
      *(_OWORD *)(v76 + 48) = 0u;
      *(_OWORD *)(v76 + 64) = 0u;
      *(_OWORD *)v76 = 0u;
      *(_OWORD *)(v76 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_dagisel_typelegalization", v77);
    }
    v78 = llvm::getNamedTimer("sdag", 4uLL, "combine_lt", 0xAuLL);
    if (v78)
    {
      v79 = ((*(double *)(v78 + 8) + *(double *)(v78 + 16)) * 1000000.0);
      *(_WORD *)(v78 + 128) = 0;
      *(_OWORD *)(v78 + 32) = 0u;
      *(_OWORD *)(v78 + 48) = 0u;
      *(_OWORD *)(v78 + 64) = 0u;
      *(_OWORD *)v78 = 0u;
      *(_OWORD *)(v78 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_dagisel_dagcombiningafterlegalizetypes", v79);
    }
    v80 = llvm::getNamedTimer("sdag", 4uLL, "legalize_vec", 0xCuLL);
    if (v80)
    {
      v81 = ((*(double *)(v80 + 8) + *(double *)(v80 + 16)) * 1000000.0);
      *(_WORD *)(v80 + 128) = 0;
      *(_OWORD *)(v80 + 32) = 0u;
      *(_OWORD *)(v80 + 48) = 0u;
      *(_OWORD *)(v80 + 64) = 0u;
      *(_OWORD *)v80 = 0u;
      *(_OWORD *)(v80 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_dagisel_vectorlegalization", v81);
    }
    v82 = llvm::getNamedTimer("sdag", 4uLL, "legalize_types2", 0xFuLL);
    if (v82)
    {
      v83 = ((*(double *)(v82 + 8) + *(double *)(v82 + 16)) * 1000000.0);
      *(_WORD *)(v82 + 128) = 0;
      *(_OWORD *)(v82 + 32) = 0u;
      *(_OWORD *)(v82 + 48) = 0u;
      *(_OWORD *)(v82 + 64) = 0u;
      *(_OWORD *)v82 = 0u;
      *(_OWORD *)(v82 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_dagisel_typelegalization2", v83);
    }
    v84 = llvm::getNamedTimer("sdag", 4uLL, "combine_lv", 0xAuLL);
    if (v84)
    {
      v85 = ((*(double *)(v84 + 8) + *(double *)(v84 + 16)) * 1000000.0);
      *(_WORD *)(v84 + 128) = 0;
      *(_OWORD *)(v84 + 32) = 0u;
      *(_OWORD *)(v84 + 48) = 0u;
      *(_OWORD *)(v84 + 64) = 0u;
      *(_OWORD *)v84 = 0u;
      *(_OWORD *)(v84 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_dagisel_dagcombiningafterlegalizevectors", v85);
    }
    v86 = llvm::getNamedTimer("sdag", 4uLL, "legalize", 8uLL);
    if (v86)
    {
      v87 = ((*(double *)(v86 + 8) + *(double *)(v86 + 16)) * 1000000.0);
      *(_WORD *)(v86 + 128) = 0;
      *(_OWORD *)(v86 + 32) = 0u;
      *(_OWORD *)(v86 + 48) = 0u;
      *(_OWORD *)(v86 + 64) = 0u;
      *(_OWORD *)v86 = 0u;
      *(_OWORD *)(v86 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_dagisel_legalization", v87);
    }
    v88 = llvm::getNamedTimer("sdag", 4uLL, "combine2", 8uLL);
    if (v88)
    {
      v89 = ((*(double *)(v88 + 8) + *(double *)(v88 + 16)) * 1000000.0);
      *(_WORD *)(v88 + 128) = 0;
      *(_OWORD *)(v88 + 32) = 0u;
      *(_OWORD *)(v88 + 48) = 0u;
      *(_OWORD *)(v88 + 64) = 0u;
      *(_OWORD *)v88 = 0u;
      *(_OWORD *)(v88 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_dagisel_dagcombining2", v89);
    }
    v90 = llvm::getNamedTimer("sdag", 4uLL, "isel", 4uLL);
    if (v90)
    {
      v91 = ((*(double *)(v90 + 8) + *(double *)(v90 + 16)) * 1000000.0);
      *(_WORD *)(v90 + 128) = 0;
      *(_OWORD *)(v90 + 32) = 0u;
      *(_OWORD *)(v90 + 48) = 0u;
      *(_OWORD *)(v90 + 64) = 0u;
      *(_OWORD *)v90 = 0u;
      *(_OWORD *)(v90 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_dagisel_instructionselection", v91);
    }
    v92 = llvm::getNamedTimer("sdag", 4uLL, "sched", 5uLL);
    if (v92)
    {
      v93 = ((*(double *)(v92 + 8) + *(double *)(v92 + 16)) * 1000000.0);
      *(_WORD *)(v92 + 128) = 0;
      *(_OWORD *)(v92 + 32) = 0u;
      *(_OWORD *)(v92 + 48) = 0u;
      *(_OWORD *)(v92 + 64) = 0u;
      *(_OWORD *)v92 = 0u;
      *(_OWORD *)(v92 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_dagisel_instructionscheduling", v93);
    }
    v94 = llvm::getNamedTimer("sdag", 4uLL, "emit", 4uLL);
    if (v94)
    {
      v95 = ((*(double *)(v94 + 8) + *(double *)(v94 + 16)) * 1000000.0);
      *(_WORD *)(v94 + 128) = 0;
      *(_OWORD *)(v94 + 32) = 0u;
      *(_OWORD *)(v94 + 48) = 0u;
      *(_OWORD *)(v94 + 64) = 0u;
      *(_OWORD *)v94 = 0u;
      *(_OWORD *)(v94 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_dagisel_instructioncreation", v95);
    }
    v96 = llvm::getNamedTimer("pass", 4uLL, "irtranslator", 0xCuLL);
    if (v96)
    {
      v97 = ((*(double *)(v96 + 8) + *(double *)(v96 + 16)) * 1000000.0);
      *(_WORD *)(v96 + 128) = 0;
      *(_OWORD *)(v96 + 32) = 0u;
      *(_OWORD *)(v96 + 48) = 0u;
      *(_OWORD *)(v96 + 64) = 0u;
      *(_OWORD *)v96 = 0u;
      *(_OWORD *)(v96 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_gisel_irtranslator", v97);
    }
    v98 = llvm::getNamedTimer("pass", 4uLL, "legalizer", 9uLL);
    if (v98)
    {
      v99 = ((*(double *)(v98 + 8) + *(double *)(v98 + 16)) * 1000000.0);
      *(_WORD *)(v98 + 128) = 0;
      *(_OWORD *)(v98 + 32) = 0u;
      *(_OWORD *)(v98 + 48) = 0u;
      *(_OWORD *)(v98 + 64) = 0u;
      *(_OWORD *)v98 = 0u;
      *(_OWORD *)(v98 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_gisel_legalizer", v99);
    }
    v100 = llvm::getNamedTimer("pass", 4uLL, "regbankselect", 0xDuLL);
    if (v100)
    {
      v101 = ((*(double *)(v100 + 8) + *(double *)(v100 + 16)) * 1000000.0);
      *(_WORD *)(v100 + 128) = 0;
      *(_OWORD *)(v100 + 32) = 0u;
      *(_OWORD *)(v100 + 48) = 0u;
      *(_OWORD *)(v100 + 64) = 0u;
      *(_OWORD *)v100 = 0u;
      *(_OWORD *)(v100 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_gisel_regbankallocator", v101);
    }
    v102 = llvm::getNamedTimer("pass", 4uLL, "instruction-select", 0x12uLL);
    if (v102)
    {
      v103 = ((*(double *)(v102 + 8) + *(double *)(v102 + 16)) * 1000000.0);
      *(_WORD *)(v102 + 128) = 0;
      *(_OWORD *)(v102 + 32) = 0u;
      *(_OWORD *)(v102 + 48) = 0u;
      *(_OWORD *)(v102 + 64) = 0u;
      *(_OWORD *)v102 = 0u;
      *(_OWORD *)(v102 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_gisel_instructionselector", v103);
    }
    v104 = llvm::getNamedTimer("pass", 4uLL, "agx2-prelegalizer-combiner", 0x1AuLL);
    if (v104)
    {
      v105 = ((*(double *)(v104 + 8) + *(double *)(v104 + 16)) * 1000000.0);
      *(_WORD *)(v104 + 128) = 0;
      *(_OWORD *)(v104 + 32) = 0u;
      *(_OWORD *)(v104 + 48) = 0u;
      *(_OWORD *)(v104 + 64) = 0u;
      *(_OWORD *)v104 = 0u;
      *(_OWORD *)(v104 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_gisel_agx2_prelegalizer_combiner", v105);
    }
    v106 = llvm::getNamedTimer("pass", 4uLL, "agx2-postlegalizer-combiner", 0x1BuLL);
    if (v106)
    {
      v107 = ((*(double *)(v106 + 8) + *(double *)(v106 + 16)) * 1000000.0);
      *(_WORD *)(v106 + 128) = 0;
      *(_OWORD *)(v106 + 32) = 0u;
      *(_OWORD *)(v106 + 48) = 0u;
      *(_OWORD *)(v106 + 64) = 0u;
      *(_OWORD *)v106 = 0u;
      *(_OWORD *)(v106 + 16) = 0u;
      xpc_dictionary_set_uint64(*v1, "time_gisel_agx2_postlegalizer_combiner", v107);
    }
    if (v111)
    {
      v112 = (const void **)v111;
      operator delete(v111);
    }
  }
}

uint64_t llvm::AGX::TelemetryCollector::fetchData(llvm::AGX::TelemetryCollector *this)
{
  if (*(_QWORD *)this)
    return **(_QWORD **)this;
  else
    return 0;
}

uint64_t llvm::AGX::TelemetryCollector::getAndResetTimer(_QWORD *a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *a4, size_t a5)
{
  uint64_t result;
  uint64_t v6;

  if (!*a1)
    return 0;
  result = llvm::getNamedTimer(a2, a3, a4, a5);
  if (result)
  {
    v6 = ((*(double *)(result + 8) + *(double *)(result + 16)) * 1000000.0);
    *(_WORD *)(result + 128) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    return v6 | 0x100000000;
  }
  return result;
}

void llvm::AGX::TelemetryCollector::~TelemetryCollector(xpc_object_t **this)
{
  xpc_object_t *v1;

  v1 = *this;
  *this = 0;
  if (v1)
  {
    if (*v1)
      xpc_release(*v1);
    MEMORY[0x1CAA32FC0](v1, 0x80C40B8603338);
  }
}

uint64_t llvm::verifyAGXModule()
{
  return 0;
}

_QWORD *llvm::AggressiveInstCombinePass::run@<X0>(llvm::Function *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t ResultImpl;
  char v9;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, (uint64_t)a1) + 8;
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, (uint64_t)a1) + 8;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a1);
  v9 = sub_1C4D877DC(a1, v6, v7, ResultImpl + 8);
  *(_QWORD *)a3 = a3 + 32;
  *(_QWORD *)(a3 + 8) = a3 + 32;
  *(_QWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 48) = a3 + 80;
  *(_QWORD *)(a3 + 56) = a3 + 80;
  *(_QWORD *)(a3 + 64) = 2;
  *(_DWORD *)(a3 + 72) = 0;
  if ((v9 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C4D877DC(llvm::Function *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Type *v14;
  llvm::DSOLocalEquivalent **v15;
  _QWORD *i;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  llvm::ConstantInt **v34;
  uint8x8_t v35;
  uint64_t v36;
  int v37;
  llvm::ConstantInt **v38;
  int v39;
  unint64_t v40;
  llvm::APInt *v41;
  _BOOL4 v42;
  uint64_t v43;
  int v44;
  uint64_t *v45;
  int v46;
  int v47;
  uint64_t *v48;
  llvm::Value *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  llvm::Type *v57;
  unsigned int PrimitiveSizeInBits;
  int v59;
  const llvm::APInt *v60;
  llvm::Value **v61;
  llvm::Constant **v62;
  llvm::Type *v63;
  llvm::Constant **v64;
  __int16 v65;
  uint64_t v66;
  llvm::Value **NullValue;
  unsigned __int8 *v68;
  llvm::ConstantInt **v69;
  unsigned __int8 *v70;
  int v71;
  llvm::Type *v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t j;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned int v90;
  void *v91;
  void *v92;
  size_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  void *v98;
  uint64_t v99;
  unsigned int v100;
  void *v101;
  size_t v102;
  char v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  _QWORD *v108;
  int v109;
  uint64_t v110;
  size_t v111;
  int v112;
  uint64_t v113;
  _QWORD *v114;
  int v115;
  uint64_t v116;
  BOOL v117;
  unsigned int v118;
  BOOL v119;
  uint64_t v120;
  llvm::Value *v122;
  _DWORD *v123;
  llvm::Value *v124;
  uint64_t v125;
  char *v126;
  unsigned __int8 **v127;
  int v128;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  llvm::Value *v132;
  _DWORD *v133;
  llvm::Value *v134;
  uint64_t v135;
  char *v136;
  unsigned __int8 **v137;
  int v138;
  unsigned __int8 *v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t Declaration;
  uint64_t **v147;
  llvm::Value *v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  size_t v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  _BOOL4 v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  size_t v172;
  _BOOL4 v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  size_t v177;
  BOOL v178;
  size_t v179;
  uint64_t v180;
  size_t v181;
  _BOOL4 v182;
  uint64_t v183;
  int v184;
  void *v185;
  unint64_t v186;
  size_t v187;
  void *v188;
  const void *v189;
  llvm::Value *v190;
  void *v191;
  llvm::Value *v192;
  int v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  _BOOL4 v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  int v216;
  llvm::ConstantInt **v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  llvm::Value *v221;
  size_t v222;
  void *v223;
  llvm::Value *v224;
  char v225;
  int v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t **v236;
  llvm::Value *v237;
  _QWORD *v238;
  _QWORD *v239;
  void *v241;
  llvm::Function *v242;
  int v243;
  unint64_t __nc;
  size_t __nd;
  llvm::Value *__n;
  llvm::Value *__na;
  size_t __ne;
  llvm::Value *__nb;
  unsigned __int8 *v250;
  uint64_t v251;
  uint64_t v252;
  _DWORD *v253;
  _DWORD *v254;
  unint64_t v255;
  unsigned int v256;
  _QWORD *v257;
  llvm::DominatorTree *v258;
  llvm::Value *v259;
  int v260;
  _QWORD v261[2];
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  unsigned int v267;
  void *__src;
  unsigned int v269;
  void *v270;
  unsigned int v271;
  llvm::Value *v272;
  unsigned int v273;
  llvm::Value *v274;
  unsigned int v275;
  llvm::ConstantInt **v276;
  uint64_t v277;
  int v278;
  uint64_t *v279;
  __int16 v280;
  _QWORD v281[4];
  void *v282;
  uint64_t v283;
  _QWORD v284[5];
  _QWORD v285[2];
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  llvm::Value *v290;
  llvm::Value *v291;
  void *v292;
  __int16 v293;
  __int16 v294;
  uint64_t p_src;
  void *v296;
  unsigned int v297;
  _QWORD *v298;
  _QWORD v299[2];
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;

  v4 = a4;
  v303 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a1 + 5) + 272;
  v281[0] = a2;
  v281[1] = a3;
  v281[2] = v6;
  v281[3] = a4;
  v282 = v284;
  v283 = 0x400000000;
  v285[0] = 0;
  v285[1] = 0;
  v284[4] = 0;
  v286 = 0;
  v288 = 0;
  v289 = 0;
  v287 = 0;
  v7 = llvm::TruncInstCombine::run((llvm::TruncInstCombine *)v281, a1);
  v8 = v7;
  v9 = 0;
  v10 = (_QWORD *)*((_QWORD *)a1 + 10);
  if (v10 == (_QWORD *)((char *)a1 + 72))
    goto LABEL_460;
  v242 = a1;
  v243 = v7;
  v9 = 0;
  v257 = (_QWORD *)((char *)a1 + 72);
  v258 = (llvm::DominatorTree *)v4;
  do
  {
    if (v10)
      v11 = (uint64_t)(v10 - 3);
    else
      v11 = 0;
    if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(v4, v11))
    {
      v18 = *(_QWORD **)(v11 + 40);
      v17 = (_QWORD *)(v11 + 40);
      for (i = v18; i != v17; i = (_QWORD *)*i)
      {
        if (i)
          v19 = (uint64_t)(i - 3);
        else
          v19 = 0;
        v20 = *(unsigned __int8 *)(v19 + 16);
        if (v20 == 5)
        {
          if (*(_WORD *)(v19 + 18) != 28)
            goto LABEL_32;
          v26 = (_QWORD *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
          v27 = *v26;
          v28 = *(_QWORD *)(*v26 + 8);
          if (v28
            && !*(_QWORD *)(v28 + 8)
            && ((v55 = *(unsigned __int8 *)(v27 + 16), v55 == 56) || v55 == 5 && *(_WORD *)(v27 + 18) == 28)
            || (v29 = v26[4], (v30 = *(_QWORD *)(v29 + 8)) != 0)
            && !*(_QWORD *)(v30 + 8)
            && ((v56 = *(unsigned __int8 *)(v29 + 16), v56 == 56) || v56 == 5 && *(_WORD *)(v29 + 18) == 28))
          {
LABEL_96:
            v57 = *(llvm::Type **)v19;
            if ((*(_DWORD *)(*(_QWORD *)v19 + 8) & 0xFE) == 0x12)
              v57 = (llvm::Type *)**((_QWORD **)v57 + 2);
            PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v57);
            v290 = 0;
            LODWORD(v292) = PrimitiveSizeInBits;
            if (PrimitiveSizeInBits > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v291, 0, 0);
            else
              v291 = 0;
            v59 = 1;
            v293 = 1;
            v31 = 0;
            if (!sub_1C4D898E4(v19, (uint64_t *)&v290) || !HIBYTE(v293))
              goto LABEL_108;
            goto LABEL_102;
          }
          BYTE2(p_src) = 0;
          LOWORD(p_src) = 0;
          if (!v28
            || *(_QWORD *)(v28 + 8)
            || (v71 = *(unsigned __int8 *)(v27 + 16), v71 != 57) && (v71 != 5 || *(_WORD *)(v27 + 18) != 29)
            || (sub_1C4D89E3C((uint64_t)&p_src + 2, (llvm::Constant *)v29) & 1) == 0)
          {
LABEL_32:
            v31 = 0;
            goto LABEL_33;
          }
        }
        else
        {
          if (v20 != 56)
            goto LABEL_32;
          v21 = *(_QWORD *)(v19 - 64);
          v22 = *(_QWORD *)(v21 + 8);
          if (v22)
          {
            if (!*(_QWORD *)(v22 + 8))
            {
              v46 = *(unsigned __int8 *)(v21 + 16);
              if (v46 == 56 || v46 == 5 && *(_WORD *)(v21 + 18) == 28)
                goto LABEL_96;
            }
          }
          v23 = *(_QWORD *)(v19 - 32);
          v24 = *(_QWORD *)(v23 + 8);
          if (v24)
          {
            if (!*(_QWORD *)(v24 + 8))
            {
              v47 = *(unsigned __int8 *)(v23 + 16);
              if (v47 == 56 || v47 == 5 && *(_WORD *)(v23 + 18) == 28)
                goto LABEL_96;
            }
          }
          BYTE2(p_src) = 0;
          LOWORD(p_src) = 0;
          if (!v22)
            goto LABEL_32;
          if (*(_QWORD *)(v22 + 8))
            goto LABEL_32;
          v25 = *(unsigned __int8 *)(v21 + 16);
          if (v25 != 57 && (v25 != 5 || *(_WORD *)(v21 + 18) != 29))
            goto LABEL_32;
          if (!sub_1C4D89CC8((uint64_t)&p_src + 2, (llvm::Constant *)v23))
            goto LABEL_32;
        }
        v72 = *(llvm::Type **)v19;
        if ((*(_DWORD *)(*(_QWORD *)v19 + 8) & 0xFE) == 0x12)
          v72 = (llvm::Type *)**((_QWORD **)v72 + 2);
        v73 = llvm::Type::getPrimitiveSizeInBits(v72);
        v290 = 0;
        LODWORD(v292) = v73;
        if (v73 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v291, 0, 0);
        else
          v291 = 0;
        v293 = 0;
        v59 = 0;
        v31 = 0;
        if (!sub_1C4D898E4(*(_QWORD *)(v19 - 64), (uint64_t *)&v290))
          goto LABEL_108;
LABEL_102:
        sub_1C4773D54((uint64_t)&p_src, v19, 0, 0, 0);
        v61 = llvm::ConstantInt::get(*(llvm::ConstantInt ***)v19, (llvm::Type *)&v291, v60);
        v280 = 257;
        v62 = (llvm::Constant **)sub_1C4D89BCC((uint64_t)&p_src, v290, (uint64_t)v61, (uint64_t)&v276);
        v64 = v62;
        v280 = 257;
        if (v59)
        {
          v65 = 32;
          v66 = (uint64_t)v62;
          NullValue = v61;
        }
        else
        {
          NullValue = llvm::Constant::getNullValue(*v62, v63);
          v65 = 33;
          v66 = (uint64_t)v64;
        }
        v68 = (unsigned __int8 *)sub_1C4774B48((uint64_t)&p_src, v65, v66, (uint64_t)NullValue, (uint64_t)&v276);
        v69 = *(llvm::ConstantInt ***)v19;
        v280 = 257;
        v70 = sub_1C4773E38(&p_src, 39, v68, (uint64_t)v69, (uint64_t)&v276);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v19, (llvm::Value *)v70, (llvm::Value *)1);
        if ((unsigned int *)p_src != &v297)
          free((void *)p_src);
        v31 = 1;
LABEL_108:
        if (v292 >= 0x41 && v291)
          MEMORY[0x1CAA32F9C](v291, 0x1000C8000313F17);
LABEL_33:
        v32 = *(unsigned __int8 *)(v19 + 16);
        if (v32 == 83)
        {
          v33 = *(_DWORD *)(v19 + 20);
          if ((v33 & 0x7FFFFFF) != 2)
            goto LABEL_64;
          v34 = *(llvm::ConstantInt ***)v19;
          if ((*(_DWORD *)(*(_QWORD *)v19 + 8) & 0xFE) == 0x12)
            v34 = *(llvm::ConstantInt ***)v34[2];
          v35 = (uint8x8_t)vcnt_s8((int8x8_t)llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v34));
          v35.i16[0] = vaddlv_u8(v35);
          if (v35.i32[0] != 1)
          {
LABEL_64:
            v42 = 0;
            goto LABEL_65;
          }
          if ((v33 & 0x40000000) != 0)
            v36 = *(_QWORD *)(v19 - 8);
          else
            v36 = v19 - 64;
          v48 = *(uint64_t **)v36;
          v49 = *(llvm::Value **)(v36 + 32);
          v274 = 0;
          v272 = 0;
          v270 = 0;
          v50 = sub_1C4D8A080(v48, &v274, &v272, (uint64_t *)&v270);
          if ((_BYTE)v50)
          {
            if (v50 == 149)
              goto LABEL_80;
            v51 = v50;
            if (v50 != 148)
              goto LABEL_92;
            if (v274 != v49)
              goto LABEL_81;
            if (v50 == 149)
            {
LABEL_80:
              if (v272 != v49)
                goto LABEL_81;
              v54 = 0;
              v51 = 149;
            }
            else
            {
LABEL_92:
              v54 = 0;
            }
            v53 = 1;
LABEL_126:
            v74 = *(_DWORD *)(v19 + 20);
            if ((v74 & 0x40000000) != 0)
              v75 = *(_QWORD *)(v19 - 8);
            else
              v75 = v19 - 32 * (v74 & 0x7FFFFFF);
            v76 = *(unsigned int *)(v19 + 60);
            v77 = *(_QWORD *)(v75 + 32 * v76 + 8 * v53);
            v78 = *(_QWORD *)(v77 + 40);
            if (v78 == v77 + 40)
            {
              v80 = 0;
            }
            else
            {
              if (v78)
                v79 = v78 - 24;
              else
                v79 = 0;
              if (*(unsigned __int8 *)(v79 + 16) - 29 >= 0xB)
                v80 = 0;
              else
                v80 = v79;
            }
            v81 = *(_QWORD *)(v75 + 32 * v76 + 8 * v54);
            if (llvm::DominatorTree::dominates(v258, v274, (const llvm::Instruction *)v80)
              && llvm::DominatorTree::dominates(v258, v272, (const llvm::Instruction *)v80))
            {
              LODWORD(__src) = 0;
              v82 = *(_QWORD **)(v19 + 40);
              p_src = (uint64_t)&__src;
              v296 = v270;
              v298 = v82;
              v299[0] = v81;
              if (v80)
              {
                if (*(_BYTE *)(v80 + 16) == 30 && (*(_DWORD *)(v80 + 20) & 0x7FFFFFF) == 3)
                {
                  if (sub_1C4D8ABCC((uint64_t)&p_src, *(_QWORD *)(v80 - 96)))
                  {
                    v83 = *(_QWORD **)(v80 - 32);
                    if (v83)
                    {
                      if (v298 == v83)
                      {
                        v84 = *(_QWORD *)(v80 - 64);
                        if (v84)
                        {
                          v37 = 0;
                          if (v299[0] != v84 || (_DWORD)__src != 32)
                            goto LABEL_155;
                          v85 = (uint64_t)(v82 + 5);
                          for (j = v82[6]; j != v85; j = *(_QWORD *)(j + 8))
                          {
                            v87 = j - 24;
                            if (!j)
                              v87 = 0;
                            if (*(_BYTE *)(v87 + 16) != 83)
                            {
                              v118 = *(unsigned __int8 *)(j - 8) - 38;
                              v119 = v118 > 0x38;
                              v120 = (1 << v118) & 0x100060000000001;
                              if (v119 || v120 == 0)
                                v85 = j;
                              else
                                v85 = *(_QWORD *)(j + 8);
                              break;
                            }
                          }
                          sub_1C4D8ADA0((uint64_t)&p_src, (uint64_t **)v82, v85, 0, 0, 0);
                          if (v274 == v272)
                            goto LABEL_264;
                          if (v51 == 148)
                          {
                            if ((sub_1C4F8BE80((uint64_t ***)v272, 0, 0, 0, 0, 1) & 1) == 0)
                            {
                              v122 = v272;
                              v294 = 257;
                              v123 = operator new(0x60uLL);
                              v123[13] = v123[13] & 0x38000000 | 1;
                              v124 = (llvm::Value *)(v123 + 8);
                              *(_QWORD *)v123 = 0;
                              *((_QWORD *)v123 + 1) = 0;
                              *((_QWORD *)v123 + 2) = 0;
                              *((_QWORD *)v123 + 3) = v123 + 8;
                              v253 = v123;
                              v280 = 257;
                              llvm::FreezeInst::FreezeInst((uint64_t)(v123 + 8), v122, (uint64_t)&v276, 0);
                              __n = v124;
                              (*(void (**)(uint64_t, llvm::Value *, llvm::Value **, uint64_t, uint64_t))(*(_QWORD *)v302 + 16))(v302, v124, &v290, v300, v301);
                              if ((_DWORD)v296)
                              {
                                v125 = p_src;
                                v126 = (char *)(p_src + 16 * v296);
                                v127 = (unsigned __int8 **)(v253 + 20);
                                do
                                {
                                  v128 = *(_DWORD *)v125;
                                  v129 = *(unsigned __int8 **)(v125 + 8);
                                  if (v129)
                                  {
                                    if (!v128)
                                    {
                                      v261[0] = *(_QWORD *)(v125 + 8);
                                      llvm::MetadataTracking::track((uint64_t)v261, v129, 2);
                                      v130 = *v127;
                                      if (!*v127)
                                      {
LABEL_238:
                                        v131 = (unsigned __int8 *)v261[0];
                                        *v127 = (unsigned __int8 *)v261[0];
                                        if (v131)
                                          llvm::MetadataTracking::retrack((uint64_t)v261, v131, (uint64_t)v127);
                                        goto LABEL_235;
                                      }
LABEL_232:
                                      llvm::MetadataTracking::untrack((uint64_t)v127, v130);
                                      goto LABEL_238;
                                    }
                                  }
                                  else
                                  {
                                    v130 = *v127;
                                    if (!*v127 && (*((_BYTE *)v253 + 55) & 0x20) == 0)
                                      goto LABEL_235;
                                    if (!v128)
                                    {
                                      v261[0] = 0;
                                      if (!v130)
                                        goto LABEL_238;
                                      goto LABEL_232;
                                    }
                                  }
                                  llvm::Value::setMetadata(__n, *(_DWORD *)v125, (llvm::MDNode *)v129);
LABEL_235:
                                  v125 += 16;
                                }
                                while ((char *)v125 != v126);
                              }
                              v272 = __n;
                            }
LABEL_264:
                            v145 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v19 + 40) + 56) + 40);
                            v276 = *(llvm::ConstantInt ***)v19;
                            Declaration = llvm::Intrinsic::getDeclaration(v145, v51, (uint64_t *)&v276, 1);
                            if (Declaration)
                              v147 = *(uint64_t ***)(Declaration + 24);
                            else
                              v147 = 0;
                            v290 = v274;
                            v291 = v272;
                            v292 = v270;
                            v280 = 257;
                            v148 = (llvm::Value *)sub_1C4774778(&p_src, v147, Declaration, (uint64_t *)&v290, 3, (uint64_t)&v276, 0);
                            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v19, v148, (llvm::Value *)1);
                            if ((unsigned int *)p_src != &v297)
                              free((void *)p_src);
                            v37 = 1;
LABEL_155:
                            v32 = *(unsigned __int8 *)(v19 + 16);
                            goto LABEL_41;
                          }
                          if ((sub_1C4F8BE80((uint64_t ***)v274, 0, 0, 0, 0, 1) & 1) != 0)
                            goto LABEL_264;
                          v132 = v274;
                          v294 = 257;
                          v133 = operator new(0x60uLL);
                          v133[13] = v133[13] & 0x38000000 | 1;
                          v134 = (llvm::Value *)(v133 + 8);
                          *(_QWORD *)v133 = 0;
                          *((_QWORD *)v133 + 1) = 0;
                          *((_QWORD *)v133 + 2) = 0;
                          *((_QWORD *)v133 + 3) = v133 + 8;
                          v254 = v133;
                          v280 = 257;
                          llvm::FreezeInst::FreezeInst((uint64_t)(v133 + 8), v132, (uint64_t)&v276, 0);
                          __na = v134;
                          (*(void (**)(uint64_t, llvm::Value *, llvm::Value **, uint64_t, uint64_t))(*(_QWORD *)v302 + 16))(v302, v134, &v290, v300, v301);
                          if (!(_DWORD)v296)
                          {
LABEL_263:
                            v274 = __na;
                            goto LABEL_264;
                          }
                          v135 = p_src;
                          v136 = (char *)(p_src + 16 * v296);
                          v137 = (unsigned __int8 **)(v254 + 20);
                          while (2)
                          {
                            v138 = *(_DWORD *)v135;
                            v139 = *(unsigned __int8 **)(v135 + 8);
                            if (v139)
                            {
                              if (v138)
                                goto LABEL_250;
                              v261[0] = *(_QWORD *)(v135 + 8);
                              llvm::MetadataTracking::track((uint64_t)v261, v139, 2);
                              v140 = *v137;
                              if (*v137)
LABEL_248:
                                llvm::MetadataTracking::untrack((uint64_t)v137, v140);
LABEL_254:
                              v141 = (unsigned __int8 *)v261[0];
                              *v137 = (unsigned __int8 *)v261[0];
                              if (v141)
                                llvm::MetadataTracking::retrack((uint64_t)v261, v141, (uint64_t)v137);
                            }
                            else
                            {
                              v140 = *v137;
                              if (*v137 || (*((_BYTE *)v254 + 55) & 0x20) != 0)
                              {
                                if (!v138)
                                {
                                  v261[0] = 0;
                                  if (v140)
                                    goto LABEL_248;
                                  goto LABEL_254;
                                }
LABEL_250:
                                llvm::Value::setMetadata(__na, *(_DWORD *)v135, (llvm::MDNode *)v139);
                              }
                            }
                            v135 += 16;
                            if ((char *)v135 == v136)
                              goto LABEL_263;
                            continue;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_154:
            v37 = 0;
            goto LABEL_155;
          }
LABEL_81:
          v52 = sub_1C4D8A080((uint64_t *)v49, &v274, &v272, (uint64_t *)&v270);
          v37 = v52;
          if (!(_BYTE)v52)
            goto LABEL_155;
          v51 = v52;
          if (v52 == 149)
          {
            if (v272 != (llvm::Value *)v48)
              goto LABEL_154;
          }
          else if (v52 == 148)
          {
            if (v274 != (llvm::Value *)v48)
              goto LABEL_154;
            v53 = 0;
            if (v52 == 149)
            {
              v54 = 1;
              if (v272 == (llvm::Value *)v48)
                goto LABEL_126;
              goto LABEL_154;
            }
LABEL_123:
            v54 = 1;
            goto LABEL_126;
          }
          v53 = 0;
          goto LABEL_123;
        }
        v37 = 0;
LABEL_41:
        v31 |= v37;
        if (v32 != 54)
          goto LABEL_64;
        v38 = *(llvm::ConstantInt ***)v19;
        if ((*(_DWORD *)(*(_QWORD *)v19 + 8) & 0xFE) == 0x12)
        {
          v38 = *(llvm::ConstantInt ***)v38[2];
          v39 = *((unsigned __int8 *)v38 + 8);
        }
        else
        {
          v39 = *(_DWORD *)(*(_QWORD *)v19 + 8);
        }
        if (v39 != 13)
          goto LABEL_64;
        v40 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v38);
        v41 = (llvm::APInt *)v40;
        v42 = 0;
        if ((v40 - 9) <= 0x77 && (v40 & 7) == 0)
        {
          LODWORD(v296) = 8;
          p_src = 85;
          llvm::APInt::getSplat((llvm::APInt *)v40, (llvm::APInt *)&p_src, (uint64_t)&v274);
          if (v296 >= 0x41 && p_src)
            MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
          LODWORD(v296) = 8;
          p_src = 51;
          llvm::APInt::getSplat(v41, (llvm::APInt *)&p_src, (uint64_t)&v272);
          if (v296 >= 0x41 && p_src)
            MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
          LODWORD(v296) = 8;
          p_src = 15;
          llvm::APInt::getSplat(v41, (llvm::APInt *)&p_src, (uint64_t)&v270);
          if (v296 >= 0x41 && p_src)
            MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
          LODWORD(v296) = 8;
          p_src = 1;
          llvm::APInt::getSplat(v41, (llvm::APInt *)&p_src, (uint64_t)&__src);
          if (v296 >= 0x41 && p_src)
            MEMORY[0x1CAA32F9C](p_src, 0x1000C8000313F17);
          v43 = ((_DWORD)v41 - 8);
          v267 = v41;
          if (v41 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v266, v43, 0);
          else
            v266 = (void *)((0xFFFFFFFFFFFFFFFFLL >> -(char)v41) & v43);
          v44 = *(_DWORD *)(v19 + 20);
          if ((v44 & 0x40000000) != 0)
            v45 = *(uint64_t **)(v19 - 8);
          else
            v45 = (uint64_t *)(v19 - 32 * (v44 & 0x7FFFFFF));
          v88 = *v45;
          v89 = (unsigned __int8 *)v45[4];
          v265 = 0;
          v90 = v269;
          v250 = v89;
          if (v269 > 0x40)
          {
            v93 = (((unint64_t)v269 + 63) >> 3) & 0x3FFFFFF8;
            v92 = (void *)operator new[]();
            memcpy(v92, __src, v93);
            p_src = (uint64_t)&v265;
            v297 = v90;
            v91 = (void *)operator new[]();
            memcpy(v91, v92, (((unint64_t)v297 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v91 = __src;
            p_src = (uint64_t)&v265;
            v297 = v269;
            v92 = __src;
          }
          v296 = v91;
          v94 = *(unsigned __int8 *)(v88 + 16);
          if (v94 == 5)
          {
            if (*(_WORD *)(v88 + 18) == 17)
            {
              v96 = *(_QWORD *)(v88 - 32 * (*(_DWORD *)(v88 + 20) & 0x7FFFFFF));
              if (v96)
              {
                *(_QWORD *)p_src = v96;
                if (sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v88 - 32 * (*(_DWORD *)(v88 + 20) & 0x7FFFFFF) + 32)))
                {
                  goto LABEL_168;
                }
              }
            }
LABEL_170:
            v42 = 0;
          }
          else
          {
            if (v94 != 45)
              goto LABEL_170;
            v95 = *(_QWORD *)(v88 - 64);
            if (!v95)
              goto LABEL_170;
            *(_QWORD *)p_src = v95;
            if (!sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v88 - 32)))
              goto LABEL_170;
LABEL_168:
            v97 = v267;
            if (v267 > 0x40)
            {
              __nc = (((unint64_t)v267 + 63) >> 3) & 0x3FFFFFF8;
              v98 = (void *)operator new[]();
              memcpy(v98, v266, __nc);
            }
            else
            {
              v98 = v266;
            }
            LODWORD(v277) = v97;
            v276 = (llvm::ConstantInt **)v98;
            v42 = sub_1C4D8A7F0((llvm::APInt *)&v276, v250);
            if (v277 >= 0x41 && v276)
              MEMORY[0x1CAA32F9C](v276, 0x1000C8000313F17);
          }
          if (v297 >= 0x41 && v296)
            MEMORY[0x1CAA32F9C](v296, 0x1000C8000313F17);
          if (v90 >= 0x41 && v92)
            MEMORY[0x1CAA32F9C](v92, 0x1000C8000313F17);
          if (!v42)
          {
LABEL_178:
            if (v267 >= 0x41 && v266)
              MEMORY[0x1CAA32F9C](v266, 0x1000C8000313F17);
            if (v269 >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            if (v271 >= 0x41 && v270)
              MEMORY[0x1CAA32F9C](v270, 0x1000C8000313F17);
            if (v273 >= 0x41 && v272)
              MEMORY[0x1CAA32F9C](v272, 0x1000C8000313F17);
            if (v275 >= 0x41)
            {
              if (v274)
                MEMORY[0x1CAA32F9C](v274, 0x1000C8000313F17);
            }
            goto LABEL_65;
          }
          v264 = 0;
          v99 = v265;
          v278 = 64;
          v276 = (llvm::ConstantInt **)&v264;
          v277 = 4;
          v279 = &v264;
          v100 = v271;
          if (v271 > 0x40)
          {
            v102 = (((unint64_t)v271 + 63) >> 3) & 0x3FFFFFF8;
            v101 = (void *)operator new[]();
            memcpy(v101, v270, v102);
          }
          else
          {
            v101 = v270;
          }
          LODWORD(v291) = v100;
          v290 = (llvm::Value *)v101;
          sub_1C6176948((uint64_t)&p_src, (uint64_t *)&v276, (llvm::APInt *)&v290);
          v104 = *(unsigned __int8 *)(v99 + 16);
          if (v104 == 56)
          {
            v251 = v99;
            v105 = *(_QWORD *)(v99 - 64);
            v106 = *(unsigned __int8 *)(v105 + 16);
            if (v106 != 5)
            {
              if (v106 != 41)
                goto LABEL_307;
              v108 = (_QWORD *)(v105 - 64);
              v107 = *(_QWORD *)(v105 - 64);
              v109 = *(unsigned __int8 *)(v107 + 16);
              if (v109 != 5)
              {
                if (v109 != 54)
                  goto LABEL_274;
                v110 = *(_QWORD *)(v107 - 64);
                if (!v110)
                  goto LABEL_274;
                *(_QWORD *)p_src = v110;
                if (!sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v107 - 32)))
                  goto LABEL_274;
LABEL_273:
                if (*v298 != *(_QWORD *)(v105 - 32))
                  goto LABEL_274;
LABEL_305:
                if (sub_1C4D8A7F0((llvm::APInt *)v299, *(unsigned __int8 **)(v251 - 32)))
                {
                  v164 = 1;
LABEL_339:
                  sub_1C61769D0((uint64_t)&p_src);
                  if (v100 >= 0x41 && v101)
                    MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
                  if (!v164)
                  {
LABEL_343:
                    v42 = 0;
                    goto LABEL_178;
                  }
                  v263 = 0;
                  v183 = v264;
                  v184 = v273;
                  v255 = v273;
                  if (v273 > 0x40)
                  {
                    v187 = (((unint64_t)v273 + 63) >> 3) & 0x3FFFFFF8;
                    v188 = (void *)operator new[]();
                    memcpy(v188, v272, v187);
                    v185 = (void *)operator new[]();
                    __nb = (llvm::Value *)v188;
                    v189 = v188;
                    v184 = v255;
                    memcpy(v185, v189, v187);
                    v186 = v273;
                  }
                  else
                  {
                    v185 = v272;
                    v186 = v273;
                    __nb = v272;
                  }
                  LODWORD(v292) = v184;
                  v290 = (llvm::Value *)&v263;
                  v291 = (llvm::Value *)v185;
                  v262 = 64;
                  v261[0] = &v263;
                  v261[1] = 2;
                  v241 = v185;
                  if (v186 > 0x40)
                  {
                    v191 = (void *)operator new[]();
                    memcpy(v191, v272, ((v186 + 63) >> 3) & 0x3FFFFFF8);
                    v190 = (llvm::Value *)v191;
                  }
                  else
                  {
                    v190 = v272;
                  }
                  v260 = v186;
                  v192 = v190;
                  v259 = v190;
                  sub_1C6176B10((uint64_t)&v276, v261, (llvm::APInt *)&v259);
                  sub_1C6176A40((uint64_t)&p_src, &v290, (uint64_t *)&v276);
                  v193 = *(unsigned __int8 *)(v183 + 16);
                  if (v193 != 5)
                  {
                    if (v193 == 41)
                    {
                      v194 = *(_QWORD *)(v183 - 64);
                      v195 = *(unsigned __int8 *)(v194 + 16);
                      if (v195 != 5)
                      {
                        if (v195 != 56)
                          goto LABEL_367;
                        v196 = *(_QWORD *)(v194 - 64);
                        if (!v196)
                          goto LABEL_367;
                        *(_QWORD *)p_src = v196;
                        if (!sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v194 - 32)))
                          goto LABEL_367;
LABEL_366:
                        if (!sub_1C4D8AEB4(&v298, *(_QWORD *)(v183 - 32), v197))
                          goto LABEL_367;
LABEL_381:
                        v210 = 1;
LABEL_393:
                        sub_1C6176B88((uint64_t)&v298);
                        if (v297 >= 0x41 && v296)
                          MEMORY[0x1CAA32F9C](v296, 0x1000C8000313F17);
                        sub_1C6176B88((uint64_t)&v276);
                        if (v186 >= 0x41 && v192)
                          MEMORY[0x1CAA32F9C](v192, 0x1000C8000313F17);
                        if (v255 >= 0x41)
                        {
                          if (v241)
                            MEMORY[0x1CAA32F9C](v241, 0x1000C8000313F17);
                          if (__nb)
                            MEMORY[0x1CAA32F9C](__nb, 0x1000C8000313F17);
                        }
                        if (!v210)
                          goto LABEL_343;
                        v216 = *(unsigned __int8 *)(v263 + 16);
                        if (v216 == 5)
                        {
                          if (*(_WORD *)(v263 + 18) != 15)
                            goto LABEL_343;
                          v219 = v263 - 32 * (*(_DWORD *)(v263 + 20) & 0x7FFFFFF);
                          v217 = *(llvm::ConstantInt ***)v219;
                          if (!*(_QWORD *)v219)
                            goto LABEL_343;
                          v218 = *(_QWORD *)(v219 + 32);
                          if (!v218)
                            goto LABEL_343;
                        }
                        else
                        {
                          if (v216 != 43)
                            goto LABEL_343;
                          v217 = *(llvm::ConstantInt ***)(v263 - 64);
                          if (!v217)
                            goto LABEL_343;
                          v218 = *(_QWORD *)(v263 - 32);
                          if (!v218)
                            goto LABEL_343;
                        }
                        v278 = 64;
                        v276 = v217;
                        v277 = 1;
                        v220 = v275;
                        v256 = v275;
                        if (v275 > 0x40)
                        {
                          v222 = (((unint64_t)v275 + 63) >> 3) & 0x3FFFFFF8;
                          v223 = (void *)operator new[]();
                          memcpy(v223, v274, v222);
                          v220 = v256;
                          v221 = (llvm::Value *)v223;
                        }
                        else
                        {
                          v221 = v274;
                        }
                        LODWORD(v291) = v220;
                        v224 = v221;
                        v290 = v221;
                        sub_1C6176B10((uint64_t)&p_src, &v276, (llvm::APInt *)&v290);
                        v226 = *(unsigned __int8 *)(v218 + 16);
                        if (v226 == 56)
                        {
                          v227 = *(_QWORD *)(v218 - 64);
                          v228 = *(unsigned __int8 *)(v227 + 16);
                          if (v228 == 5)
                          {
                            if (*(_WORD *)(v227 + 18) == 26)
                            {
                              v231 = v227 - 32 * (*(_DWORD *)(v227 + 20) & 0x7FFFFFF);
                              if (p_src == *(_QWORD *)v231
                                && sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v231 + 32)))
                              {
                                goto LABEL_433;
                              }
                            }
LABEL_435:
                            v232 = 0;
                          }
                          else
                          {
                            if (v228 != 54
                              || p_src != *(_QWORD *)(v227 - 64)
                              || !sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v227 - 32)))
                            {
                              goto LABEL_435;
                            }
LABEL_433:
                            if (!sub_1C4D8A7F0((llvm::APInt *)&v298, *(unsigned __int8 **)(v218 - 32)))
                              goto LABEL_435;
                            v232 = 1;
                          }
LABEL_443:
                          sub_1C6176B88((uint64_t)&p_src);
                          if (v256 >= 0x41 && v224)
                            MEMORY[0x1CAA32F9C](v224, 0x1000C8000313F17);
                          if (v232)
                          {
                            sub_1C4773D54((uint64_t)&p_src, v19, 0, 0, 0);
                            v234 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v19 + 40) + 56) + 40);
                            v276 = *(llvm::ConstantInt ***)v19;
                            v235 = llvm::Intrinsic::getDeclaration(v234, 53, (uint64_t *)&v276, 1);
                            if (v235)
                              v236 = *(uint64_t ***)(v235 + 24);
                            else
                              v236 = 0;
                            v290 = (llvm::Value *)v217;
                            v280 = 257;
                            v237 = (llvm::Value *)sub_1C4774778(&p_src, v236, v235, (uint64_t *)&v290, 1, (uint64_t)&v276, 0);
                            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v19, v237, (llvm::Value *)1);
                            if ((unsigned int *)p_src != &v297)
                              free((void *)p_src);
                            v42 = 1;
                            goto LABEL_178;
                          }
                          goto LABEL_343;
                        }
                        if (v226 == 5)
                        {
                          if (*(_WORD *)(v218 + 18) != 28)
                            goto LABEL_441;
                          v229 = *(_QWORD *)(v218 - 32 * (*(_DWORD *)(v218 + 20) & 0x7FFFFFF));
                          v230 = *(unsigned __int8 *)(v229 + 16);
                          if (v230 == 5)
                          {
                            if (*(_WORD *)(v229 + 18) == 26)
                            {
                              v233 = v229 - 32 * (*(_DWORD *)(v229 + 20) & 0x7FFFFFF);
                              if (p_src == *(_QWORD *)v233
                                && sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v233 + 32)))
                              {
                                goto LABEL_439;
                              }
                            }
LABEL_441:
                            v225 = 0;
                          }
                          else
                          {
                            if (v230 != 54
                              || p_src != *(_QWORD *)(v229 - 64)
                              || !sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v229 - 32)))
                            {
                              goto LABEL_441;
                            }
LABEL_439:
                            if (!sub_1C4D8A86C((llvm::APInt *)&v298, *(llvm::Constant **)(v218 - 32 * (*(_DWORD *)(v218 + 20) & 0x7FFFFFF) + 32)))goto LABEL_441;
                            v225 = 1;
                          }
                        }
                        v232 = (v226 == 5) & v225;
                        goto LABEL_443;
                      }
                      if (*(_WORD *)(v194 + 18) == 28)
                      {
                        v201 = *(_QWORD *)(v194 - 32 * (*(_DWORD *)(v194 + 20) & 0x7FFFFFF));
                        if (v201)
                        {
                          *(_QWORD *)p_src = v201;
                          if (sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v194 - 32 * (*(_DWORD *)(v194 + 20) & 0x7FFFFFF) + 32)))
                          {
                            goto LABEL_366;
                          }
                        }
                      }
LABEL_367:
                      v202 = *(_QWORD *)(v183 - 32);
                      v203 = *(unsigned __int8 *)(v202 + 16);
                      if (v203 == 5)
                      {
                        if (*(_WORD *)(v202 + 18) != 28)
                          goto LABEL_392;
                        v206 = *(_QWORD *)(v202 - 32 * (*(_DWORD *)(v202 + 20) & 0x7FFFFFF));
                        if (!v206)
                          goto LABEL_392;
                        *(_QWORD *)p_src = v206;
                        if (!sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v202 - 32 * (*(_DWORD *)(v202 + 20) & 0x7FFFFFF) + 32)))goto LABEL_392;
                      }
                      else
                      {
                        if (v203 != 56)
                          goto LABEL_392;
                        v204 = *(_QWORD *)(v202 - 64);
                        if (!v204)
                          goto LABEL_392;
                        *(_QWORD *)p_src = v204;
                        if (!sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v202 - 32)))
                          goto LABEL_392;
                      }
                      v207 = sub_1C4D8AEB4(&v298, *(_QWORD *)(v183 - 64), v205);
LABEL_391:
                      v210 = v207;
                      goto LABEL_393;
                    }
LABEL_392:
                    v210 = 0;
                    goto LABEL_393;
                  }
                  if (*(_WORD *)(v183 + 18) != 13)
                    goto LABEL_392;
                  v198 = *(_QWORD *)(v183 - 32 * (*(_DWORD *)(v183 + 20) & 0x7FFFFFF));
                  v199 = *(unsigned __int8 *)(v198 + 16);
                  if (v199 == 5)
                  {
                    if (*(_WORD *)(v198 + 18) != 28)
                      goto LABEL_382;
                    v208 = *(_QWORD *)(v198 - 32 * (*(_DWORD *)(v198 + 20) & 0x7FFFFFF));
                    if (!v208)
                      goto LABEL_382;
                    *(_QWORD *)p_src = v208;
                    if (!sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v198 - 32 * (*(_DWORD *)(v198 + 20) & 0x7FFFFFF) + 32)))goto LABEL_382;
                  }
                  else if (v199 != 56
                         || (v200 = *(_QWORD *)(v198 - 64)) == 0
                         || (*(_QWORD *)p_src = v200,
                             !sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v198 - 32))))
                  {
LABEL_382:
                    v211 = *(_QWORD *)(v183 - 32 * (*(_DWORD *)(v183 + 20) & 0x7FFFFFF) + 32);
                    v212 = *(unsigned __int8 *)(v211 + 16);
                    if (v212 == 5)
                    {
                      if (*(_WORD *)(v211 + 18) != 28)
                        goto LABEL_392;
                      v214 = *(_QWORD *)(v211 - 32 * (*(_DWORD *)(v211 + 20) & 0x7FFFFFF));
                      if (!v214)
                        goto LABEL_392;
                      *(_QWORD *)p_src = v214;
                      if (!sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v211 - 32 * (*(_DWORD *)(v211 + 20) & 0x7FFFFFF) + 32)))goto LABEL_392;
                    }
                    else
                    {
                      if (v212 != 56)
                        goto LABEL_392;
                      v213 = *(_QWORD *)(v211 - 64);
                      if (!v213)
                        goto LABEL_392;
                      *(_QWORD *)p_src = v213;
                      if (!sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v211 - 32)))
                        goto LABEL_392;
                    }
                    v215 = (uint64_t *)(v183 - 32 * (*(_DWORD *)(v183 + 20) & 0x7FFFFFF));
                    v207 = sub_1C4D8AEB4(&v298, *v215, (char)v215);
                    goto LABEL_391;
                  }
                  v209 = v183 - 32 * (*(_DWORD *)(v183 + 20) & 0x7FFFFFF);
                  if (sub_1C4D8AEB4(&v298, *(_QWORD *)(v209 + 32), v209))
                    goto LABEL_381;
                  goto LABEL_382;
                }
LABEL_307:
                v164 = 0;
                goto LABEL_339;
              }
              if (*(_WORD *)(v107 + 18) == 26)
              {
                v149 = *(_QWORD *)(v107 - 32 * (*(_DWORD *)(v107 + 20) & 0x7FFFFFF));
                if (v149)
                {
                  *(_QWORD *)p_src = v149;
                  if (sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v107 - 32 * (*(_DWORD *)(v107 + 20) & 0x7FFFFFF) + 32)))
                  {
                    goto LABEL_273;
                  }
                }
              }
LABEL_274:
              v150 = *(_QWORD *)(v105 - 32);
              v151 = *(unsigned __int8 *)(v150 + 16);
              if (v151 == 5)
              {
                if (*(_WORD *)(v150 + 18) != 26)
                  goto LABEL_307;
                v153 = *(_QWORD *)(v150 - 32 * (*(_DWORD *)(v150 + 20) & 0x7FFFFFF));
                if (!v153)
                  goto LABEL_307;
                *(_QWORD *)p_src = v153;
                if (!sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v150 - 32 * (*(_DWORD *)(v150 + 20) & 0x7FFFFFF) + 32)))goto LABEL_307;
              }
              else
              {
                if (v151 != 54)
                  goto LABEL_307;
                v152 = *(_QWORD *)(v150 - 64);
                if (!v152)
                  goto LABEL_307;
                *(_QWORD *)p_src = v152;
                if (!sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v150 - 32)))
                  goto LABEL_307;
              }
LABEL_304:
              if (*v298 == *v108)
                goto LABEL_305;
              goto LABEL_307;
            }
            if (*(_WORD *)(v105 + 18) != 13)
              goto LABEL_307;
            v142 = *(_QWORD *)(v105 - 32 * (*(_DWORD *)(v105 + 20) & 0x7FFFFFF));
            v143 = *(unsigned __int8 *)(v142 + 16);
            if (v143 == 5)
            {
              if (*(_WORD *)(v142 + 18) != 26)
                goto LABEL_295;
              v159 = *(_QWORD *)(v142 - 32 * (*(_DWORD *)(v142 + 20) & 0x7FFFFFF));
              if (!v159)
                goto LABEL_295;
              *(_QWORD *)p_src = v159;
              if (!sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v142 - 32 * (*(_DWORD *)(v142 + 20) & 0x7FFFFFF) + 32)))goto LABEL_295;
            }
            else if (v143 != 54
                   || (v144 = *(_QWORD *)(v142 - 64)) == 0
                   || (*(_QWORD *)p_src = v144, !sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v142 - 32))))
            {
LABEL_295:
              v160 = *(_QWORD *)(v105 - 32 * (*(_DWORD *)(v105 + 20) & 0x7FFFFFF) + 32);
              v161 = *(unsigned __int8 *)(v160 + 16);
              if (v161 == 5)
              {
                if (*(_WORD *)(v160 + 18) != 26)
                  goto LABEL_307;
                v163 = *(_QWORD *)(v160 - 32 * (*(_DWORD *)(v160 + 20) & 0x7FFFFFF));
                if (!v163)
                  goto LABEL_307;
                *(_QWORD *)p_src = v163;
                if (!sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v160 - 32 * (*(_DWORD *)(v160 + 20) & 0x7FFFFFF) + 32)))goto LABEL_307;
              }
              else
              {
                if (v161 != 54)
                  goto LABEL_307;
                v162 = *(_QWORD *)(v160 - 64);
                if (!v162)
                  goto LABEL_307;
                *(_QWORD *)p_src = v162;
                if (!sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v160 - 32)))
                  goto LABEL_307;
              }
              v108 = (_QWORD *)(v105 - 32 * (*(_DWORD *)(v105 + 20) & 0x7FFFFFF));
              goto LABEL_304;
            }
            if (*v298 == *(_QWORD *)(v105 - 32 * (*(_DWORD *)(v105 + 20) & 0x7FFFFFF) + 32))
              goto LABEL_305;
            goto LABEL_295;
          }
          if (v104 != 5)
          {
LABEL_338:
            v164 = (v104 == 5) & v103;
            goto LABEL_339;
          }
          if (*(_WORD *)(v99 + 18) != 28)
          {
LABEL_337:
            v103 = 0;
            goto LABEL_338;
          }
          v252 = v99;
          v111 = *(_QWORD *)(v99 - 32 * (*(_DWORD *)(v99 + 20) & 0x7FFFFFF));
          v112 = *(unsigned __int8 *)(v111 + 16);
          if (v112 != 5)
          {
            if (v112 != 41)
              goto LABEL_337;
            v114 = (_QWORD *)(v111 - 64);
            v113 = *(_QWORD *)(v111 - 64);
            v115 = *(unsigned __int8 *)(v113 + 16);
            if (v115 != 5)
            {
              if (v115 != 54)
                goto LABEL_312;
              v116 = *(_QWORD *)(v113 - 64);
              if (!v116)
                goto LABEL_312;
              __nd = v111;
              *(_QWORD *)p_src = v116;
              v117 = sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v113 - 32));
              v111 = __nd;
              if (!v117)
                goto LABEL_312;
LABEL_311:
              if (*v298 != *(_QWORD *)(v111 - 32))
                goto LABEL_312;
LABEL_335:
              if (sub_1C4D8A86C((llvm::APInt *)v299, *(llvm::Constant **)(v252 - 32 * (*(_DWORD *)(v252 + 20) & 0x7FFFFFF) + 32)))
              {
                v103 = 1;
                goto LABEL_338;
              }
              goto LABEL_337;
            }
            if (*(_WORD *)(v113 + 18) == 26)
            {
              v165 = *(_QWORD *)(v113 - 32 * (*(_DWORD *)(v113 + 20) & 0x7FFFFFF));
              if (v165)
              {
                __ne = v111;
                *(_QWORD *)p_src = v165;
                v166 = sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v113 - 32 * (*(_DWORD *)(v113 + 20) & 0x7FFFFFF) + 32));
                v111 = __ne;
                if (v166)
                  goto LABEL_311;
              }
            }
LABEL_312:
            v167 = *(_QWORD *)(v111 - 32);
            v168 = *(unsigned __int8 *)(v167 + 16);
            if (v168 == 5)
            {
              if (*(_WORD *)(v167 + 18) != 26)
                goto LABEL_337;
              v170 = *(_QWORD *)(v167 - 32 * (*(_DWORD *)(v167 + 20) & 0x7FFFFFF));
              if (!v170)
                goto LABEL_337;
              *(_QWORD *)p_src = v170;
              if (!sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v167 - 32 * (*(_DWORD *)(v167 + 20) & 0x7FFFFFF) + 32)))goto LABEL_337;
            }
            else
            {
              if (v168 != 54)
                goto LABEL_337;
              v169 = *(_QWORD *)(v167 - 64);
              if (!v169)
                goto LABEL_337;
              *(_QWORD *)p_src = v169;
              if (!sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v167 - 32)))
                goto LABEL_337;
            }
LABEL_334:
            if (*v298 == *v114)
              goto LABEL_335;
            goto LABEL_337;
          }
          if (*(_WORD *)(v111 + 18) != 13)
            goto LABEL_337;
          v154 = *(_QWORD *)(v111 - 32 * (*(_DWORD *)(v111 + 20) & 0x7FFFFFF));
          v155 = *(unsigned __int8 *)(v154 + 16);
          if (v155 == 5)
          {
            if (*(_WORD *)(v154 + 18) != 26)
              goto LABEL_325;
            v171 = *(_QWORD *)(v154 - 32 * (*(_DWORD *)(v154 + 20) & 0x7FFFFFF));
            if (!v171)
              goto LABEL_325;
            v172 = *(_QWORD *)(v99 - 32 * (*(_DWORD *)(v99 + 20) & 0x7FFFFFF));
            *(_QWORD *)p_src = v171;
            v173 = sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v154 - 32 * (*(_DWORD *)(v154 + 20) & 0x7FFFFFF) + 32));
            v111 = v172;
            if (!v173)
              goto LABEL_325;
          }
          else if (v155 != 54
                 || (v156 = *(_QWORD *)(v154 - 64)) == 0
                 || (v157 = *(_QWORD *)(v99 - 32 * (*(_DWORD *)(v99 + 20) & 0x7FFFFFF)),
                     *(_QWORD *)p_src = v156,
                     v158 = sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v154 - 32)),
                     v111 = v157,
                     !v158))
          {
LABEL_325:
            v174 = *(_QWORD *)(v111 - 32 * (*(_DWORD *)(v111 + 20) & 0x7FFFFFF) + 32);
            v175 = *(unsigned __int8 *)(v174 + 16);
            if (v175 == 5)
            {
              if (*(_WORD *)(v174 + 18) != 26)
                goto LABEL_337;
              v180 = *(_QWORD *)(v174 - 32 * (*(_DWORD *)(v174 + 20) & 0x7FFFFFF));
              if (!v180)
                goto LABEL_337;
              v181 = v111;
              *(_QWORD *)p_src = v180;
              v182 = sub_1C4D8A86C((llvm::APInt *)&v296, *(llvm::Constant **)(v174 - 32 * (*(_DWORD *)(v174 + 20) & 0x7FFFFFF) + 32));
              v179 = v181;
              if (!v182)
                goto LABEL_337;
            }
            else
            {
              if (v175 != 54)
                goto LABEL_337;
              v176 = *(_QWORD *)(v174 - 64);
              if (!v176)
                goto LABEL_337;
              v177 = v111;
              *(_QWORD *)p_src = v176;
              v178 = sub_1C4D8A7F0((llvm::APInt *)&v296, *(unsigned __int8 **)(v174 - 32));
              v179 = v177;
              if (!v178)
                goto LABEL_337;
            }
            v114 = (_QWORD *)(v179 - 32 * (*(_DWORD *)(v179 + 20) & 0x7FFFFFF));
            goto LABEL_334;
          }
          if (*v298 == *(_QWORD *)(v111 - 32 * (*(_DWORD *)(v111 + 20) & 0x7FFFFFF) + 32))
            goto LABEL_335;
          goto LABEL_325;
        }
LABEL_65:
        v9 |= v31 | v42;
      }
    }
    v10 = (_QWORD *)v10[1];
    v4 = (uint64_t)v258;
  }
  while (v10 != v257);
  v238 = (_QWORD *)*((_QWORD *)v242 + 10);
  v8 = v243;
  if ((v9 & (v238 != v257)) == 1)
  {
    do
    {
      if (v238)
        v239 = v238 - 3;
      else
        v239 = 0;
      llvm::SimplifyInstructionsInBlock(v239, 0, v12, v13, v14, v15);
      v238 = (_QWORD *)v238[1];
    }
    while (v238 != v257);
    v9 = 1;
  }
LABEL_460:
  sub_1C6176BF8(v285);
  if (v282 != v284)
    free(v282);
  return (v8 | v9) & 1;
}

void llvm::initializeAggressiveInstCombinerLegacyPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EF348);
  if (v1 != -1)
  {
    v4[0] = sub_1C4D8966C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EF348, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4D8966C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeAssumptionCacheTrackerPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Combine pattern based expressions";
  *(_QWORD *)(v2 + 8) = 33;
  *(_QWORD *)(v2 + 16) = "aggressive-instcombine";
  *(_QWORD *)(v2 + 24) = 22;
  *(_QWORD *)(v2 + 32) = &unk_1ED7EF340;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4D8B054;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializeAggressiveInstCombine(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EF348);
  if (v1 != -1)
  {
    v4[0] = sub_1C4D8966C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EF348, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void LLVMInitializeAggressiveInstCombiner(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EF348);
  if (v1 != -1)
  {
    v4[0] = sub_1C4D8966C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EF348, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4D897D0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED7EF340;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8134038;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED7EF348);
  if (v3 != -1)
  {
    v7[0] = sub_1C4D8966C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED7EF348, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t LLVMAddAggressiveInstCombinerPass(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  sub_1C4D897D0(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v2);
}

uint64_t sub_1C4D898E4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  llvm::APInt *v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  llvm::APInt **v25;
  uint64_t v26;
  llvm::APInt *v27;
  uint64_t v28;
  uint64_t v29;

  while (1)
  {
    v2 = a2;
    v3 = a1;
    v29 = 0;
    if (*((_BYTE *)a2 + 24))
      break;
    v5 = *(unsigned __int8 *)(a1 + 16);
    if (v5 == 5)
    {
      v11 = *(unsigned __int16 *)(a1 + 18);
      if (v11 != 29)
        goto LABEL_37;
      v14 = (uint64_t *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
      if (!*v14)
        goto LABEL_36;
      v29 = *v14;
      v6 = v14[4];
      if (!v6)
        goto LABEL_36;
    }
    else
    {
      if (v5 != 57)
        goto LABEL_21;
      if (!*(_QWORD *)(a1 - 64))
        goto LABEL_36;
      v29 = *(_QWORD *)(a1 - 64);
      v6 = *(_QWORD *)(a1 - 32);
      if (!v6)
        goto LABEL_36;
    }
    result = ((uint64_t (*)(void))sub_1C4D898E4)();
    if (!(_DWORD)result)
      return result;
    a1 = v6;
    a2 = v2;
  }
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 != 5)
  {
    if (v4 != 56)
      goto LABEL_16;
    if (!*(_QWORD *)(a1 - 64))
      goto LABEL_16;
    v29 = *(_QWORD *)(a1 - 64);
    if (!sub_1C4D89CC8((uint64_t)&v25, *(llvm::Constant **)(a1 - 32)))
      goto LABEL_16;
LABEL_15:
    *((_BYTE *)v2 + 25) = 1;
    v8 = v29;
    return sub_1C4D898E4(v8);
  }
  if (*(_WORD *)(a1 + 18) == 28)
  {
    v7 = (uint64_t *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF));
    if (*v7)
    {
      v29 = *v7;
      if ((sub_1C4D89E3C((uint64_t)&v25, (llvm::Constant *)v7[4]) & 1) != 0)
        goto LABEL_15;
    }
  }
LABEL_16:
  v5 = *(unsigned __int8 *)(v3 + 16);
  if (v5 == 5)
  {
    v11 = *(unsigned __int16 *)(v3 + 18);
    if (v11 == 28)
    {
      v12 = (uint64_t *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
      v9 = *v12;
      if (!*v12)
        goto LABEL_36;
      v29 = *v12;
      v10 = v12[4];
      if (!v10)
        goto LABEL_36;
LABEL_28:
      result = sub_1C4D898E4(v9);
      if (!(_DWORD)result)
        return result;
      v8 = v10;
      return sub_1C4D898E4(v8);
    }
LABEL_37:
    v26 = 0;
    v27 = 0;
    v25 = &v27;
    if (v11 != 26)
      goto LABEL_40;
    v15 = (uint64_t *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
    if (!*v15)
      goto LABEL_40;
    v28 = *v15;
    if ((sub_1C4D8A004((uint64_t)&v25, (llvm::Constant *)v15[4]) & 1) == 0)
      goto LABEL_40;
  }
  else
  {
    if (v5 == 56)
    {
      v9 = *(_QWORD *)(v3 - 64);
      if (!v9 || (v29 = *(_QWORD *)(v3 - 64), (v10 = *(_QWORD *)(v3 - 32)) == 0))
      {
LABEL_36:
        v27 = 0;
LABEL_40:
        v28 = v3;
        goto LABEL_41;
      }
      goto LABEL_28;
    }
LABEL_21:
    v26 = 0;
    v27 = 0;
    v25 = &v27;
    if (v5 != 54)
      goto LABEL_40;
    if (!*(_QWORD *)(v3 - 64))
      goto LABEL_40;
    v28 = *(_QWORD *)(v3 - 64);
    if (!sub_1C4D89F84((uint64_t)&v25, *(unsigned __int8 **)(v3 - 32)))
      goto LABEL_40;
  }
LABEL_41:
  v16 = *v2;
  if (!*v2)
  {
    v16 = v28;
    *v2 = v28;
  }
  v17 = v27;
  v18 = *((unsigned int *)v2 + 4);
  if (v27)
  {
    v19 = *((_DWORD *)v27 + 2);
    if (v19 >= 0x41)
    {
      if (v19 - llvm::APInt::countLeadingZerosSlowCase(v27) >= 0x41)
        return 0;
      v20 = **(_QWORD **)v17;
    }
    else
    {
      v20 = *(_QWORD *)v27;
    }
    if (v20 < v18)
      goto LABEL_50;
    return 0;
  }
  LODWORD(v20) = 0;
LABEL_50:
  v21 = 1 << v20;
  v23 = v2[1];
  v22 = v2 + 1;
  v24 = (_QWORD *)(v23 + 8 * (v20 >> 6));
  if (v18 < 0x41)
    v24 = v22;
  *v24 |= v21;
  return v16 == v28;
}

uint64_t sub_1C4D89BCC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v18[32];
  __int16 v19;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72));
  if (!result)
  {
    v19 = 257;
    v9 = (char *)operator new(0x80uLL);
    *((_QWORD *)v9 + 8) = *a2;
    v10 = (uint64_t)(v9 + 64);
    *((_QWORD *)v9 + 3) = v9 + 64;
    *((_QWORD *)v9 + 5) = 0;
    v11 = v9 + 40;
    *((_QWORD *)v9 + 6) = 0;
    *((_QWORD *)v9 + 7) = v9 + 64;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0x200000038;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((_DWORD *)v9 + 30) = 0;
    *(_QWORD *)v9 = a2;
    v14 = a2[1];
    v13 = a2 + 1;
    v12 = v14;
    *((_QWORD *)v9 + 1) = v14;
    if (v14)
      *(_QWORD *)(v12 + 16) = v9 + 8;
    *((_QWORD *)v9 + 2) = v13;
    *v13 = v9;
    *((_QWORD *)v9 + 4) = a3;
    if (a3)
    {
      v17 = *(_QWORD *)(a3 + 8);
      v16 = (_QWORD *)(a3 + 8);
      v15 = v17;
      *v11 = v17;
      if (v17)
        *(_QWORD *)(v15 + 16) = v11;
      *((_QWORD *)v9 + 6) = v16;
      *v16 = v9 + 32;
    }
    llvm::Value::setName((uint64_t ***)v9 + 8, (uint64_t)v18);
    return sub_1C4773754((uint64_t *)a1, v10, a4);
  }
  return result;
}

uint64_t sub_1C4D89CC8(uint64_t a1, llvm::Constant *a2)
{
  int v2;
  unsigned int v4;
  llvm::APInt *v5;
  unsigned int v6;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  int v11;
  llvm::APFloatBase *SplatValue;
  unsigned int v13;
  BOOL v14;
  int v16;
  llvm::Type *v17;
  llvm::UndefValue *AggregateElement;
  int v19;
  unsigned int v20;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 16)
  {
    v5 = (llvm::Constant *)((char *)a2 + 24);
    v6 = *((_DWORD *)a2 + 8);
    if (v6 > 0x40)
      return llvm::APInt::countLeadingZerosSlowCase(v5) == v6 - 1;
    else
      return *(_QWORD *)v5 == 1;
  }
  else
  {
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v9 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
    else
      v9 = 0;
    v10 = !v9 || v4 > 0x14;
    v11 = v10;
    if (!v10)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((_BYTE *)SplatValue + 16) == 16)
      {
        v13 = *((_DWORD *)SplatValue + 8);
        if (v13 > 0x40)
          v14 = llvm::APInt::countLeadingZerosSlowCase((llvm::APFloatBase *)((char *)SplatValue + 24)) == v13 - 1;
        else
          v14 = *((_QWORD *)SplatValue + 3) == 1;
        v2 = v14;
      }
      else
      {
        if (*(_BYTE *)(v8 + 8) == 18)
        {
          v16 = *(_DWORD *)(v8 + 32);
          if (v16)
          {
            v17 = 0;
            v2 = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(a2, v17);
              if (!AggregateElement)
                break;
              v19 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v19 - 11) >= 2)
              {
                if (v19 != 16)
                  break;
                v20 = *((_DWORD *)AggregateElement + 8);
                if (v20 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)AggregateElement
                                                                                               + 24)) != v20 - 1)
                    break;
                }
                else if (*((_QWORD *)AggregateElement + 3) != 1)
                {
                  break;
                }
                v2 = 1;
              }
              v17 = (llvm::Type *)((_DWORD)v17 + 1);
              if (v16 == (_DWORD)v17)
                return (v11 ^ 1) & v2;
            }
          }
        }
        v2 = 0;
      }
    }
    return (v11 ^ 1) & v2;
  }
}

uint64_t sub_1C4D89E3C(uint64_t a1, llvm::Constant *a2)
{
  llvm::APInt *v3;
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  BOOL v8;
  llvm::APFloatBase *SplatValue;
  int v10;
  llvm::Type *v11;
  char v12;
  llvm::UndefValue *AggregateElement;
  int v14;
  unsigned int v15;

  if (a2 && *((_BYTE *)a2 + 16) == 16)
  {
    v3 = (llvm::Constant *)((char *)a2 + 24);
    v4 = *((_DWORD *)a2 + 8);
    if (v4 <= 0x40)
    {
      v5 = *(_QWORD *)v3;
LABEL_5:
      v6 = v5 == 1;
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v8 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
  else
    v8 = 0;
  if (!v8)
  {
LABEL_28:
    v12 = 0;
    return v12 & 1;
  }
  SplatValue = llvm::Constant::getSplatValue(a2, 0);
  if (!SplatValue || *((_BYTE *)SplatValue + 16) != 16)
  {
    if (*(_BYTE *)(v7 + 8) == 18)
    {
      v10 = *(_DWORD *)(v7 + 32);
      if (v10)
      {
        v11 = 0;
        v12 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement(a2, v11);
          if (!AggregateElement)
            break;
          v14 = *((unsigned __int8 *)AggregateElement + 16);
          if ((v14 - 11) >= 2)
          {
            if (v14 != 16)
              goto LABEL_28;
            v15 = *((_DWORD *)AggregateElement + 8);
            if (v15 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)AggregateElement
                                                                                           + 24)) != v15 - 1)
                goto LABEL_28;
            }
            else if (*((_QWORD *)AggregateElement + 3) != 1)
            {
              goto LABEL_28;
            }
            v12 = 1;
          }
          v11 = (llvm::Type *)((_DWORD)v11 + 1);
          if (v10 == (_DWORD)v11)
            return v12 & 1;
        }
      }
    }
    goto LABEL_28;
  }
  v4 = *((_DWORD *)SplatValue + 8);
  if (v4 <= 0x40)
  {
    v5 = *((_QWORD *)SplatValue + 3);
    goto LABEL_5;
  }
  v3 = (llvm::APFloatBase *)((char *)SplatValue + 24);
LABEL_30:
  v6 = llvm::APInt::countLeadingZerosSlowCase(v3) == v4 - 1;
LABEL_31:
  v12 = v6;
  return v12 & 1;
}

llvm::APFloatBase *sub_1C4D89F84(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v3;
  llvm::APFloatBase *result;

  v3 = a2[16];
  if (a2 && v3 == 16)
    goto LABEL_3;
  if (v3 <= 0x14 && (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18)
  {
    result = llvm::Constant::getSplatValue((llvm::Constant *)a2, (llvm::Type *)*(unsigned __int8 *)(a1 + 8));
    if (!result)
      return result;
    a2 = (unsigned __int8 *)result;
    if (*((_BYTE *)result + 16) == 16)
    {
LABEL_3:
      **(_QWORD **)a1 = a2 + 24;
      return (llvm::APFloatBase *)1;
    }
  }
  return 0;
}

llvm::APFloatBase *sub_1C4D8A004(uint64_t a1, llvm::Constant *a2)
{
  llvm::APFloatBase *result;

  if (a2 && *((_BYTE *)a2 + 16) == 16)
    goto LABEL_3;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    result = llvm::Constant::getSplatValue(a2, (llvm::Type *)*(unsigned __int8 *)(a1 + 8));
    if (!result)
      return result;
    a2 = result;
    if (*((_BYTE *)result + 16) == 16)
    {
LABEL_3:
      **(_QWORD **)a1 = (char *)a2 + 24;
      return (llvm::APFloatBase *)1;
    }
  }
  return 0;
}

uint64_t sub_1C4D8A080(uint64_t *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t PrimitiveSizeInBits;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t *v60;
  uint64_t v61;

  v61 = 0;
  v8 = *a1;
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
    v8 = **(_QWORD **)(v8 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v8);
  v55 = a2;
  v56 = a4;
  LODWORD(v59) = 64;
  v57 = a3;
  v58 = (uint64_t *)PrimitiveSizeInBits;
  v10 = a1[1];
  v60 = &v61;
  if (!v10 || *(_QWORD *)(v10 + 8))
    goto LABEL_5;
  v13 = *((unsigned __int8 *)a1 + 16);
  if (v13 == 5)
  {
    if (*((_WORD *)a1 + 9) != 29)
      goto LABEL_69;
    v22 = a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
    v23 = *(unsigned __int8 *)(v22 + 16);
    if (v23 == 5)
    {
      if (*(_WORD *)(v22 + 18) != 25)
        goto LABEL_54;
      v37 = *(_QWORD *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
      if (!v37)
        goto LABEL_54;
      *a2 = v37;
      v25 = *(_QWORD *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF) + 32);
      if (!v25)
        goto LABEL_54;
    }
    else
    {
      if (v23 != 53)
        goto LABEL_54;
      v24 = *(_QWORD *)(v22 - 64);
      if (!v24)
        goto LABEL_54;
      *a2 = v24;
      v25 = *(_QWORD *)(v22 - 32);
      if (!v25)
        goto LABEL_54;
    }
    *a4 = v25;
    v38 = (uint64_t)&a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
    if (sub_1C4D8A664(&v57, *(_QWORD *)(v38 + 32), v38))
      goto LABEL_53;
LABEL_54:
    v40 = a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 4];
    v41 = *(unsigned __int8 *)(v40 + 16);
    if (v41 == 5)
    {
      if (*(_WORD *)(v40 + 18) != 25)
        goto LABEL_69;
      v47 = *(_QWORD *)(v40 - 32 * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF));
      if (!v47)
        goto LABEL_69;
      *v55 = v47;
      v43 = *(_QWORD *)(v40 - 32 * (*(_DWORD *)(v40 + 20) & 0x7FFFFFF) + 32);
      if (!v43)
        goto LABEL_69;
    }
    else
    {
      if (v41 != 53)
        goto LABEL_69;
      v42 = *(_QWORD *)(v40 - 64);
      if (!v42)
        goto LABEL_69;
      *v55 = v42;
      v43 = *(_QWORD *)(v40 - 32);
      if (!v43)
        goto LABEL_69;
    }
    *v56 = v43;
    v48 = &a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
    v36 = sub_1C4D8A664(&v57, *v48, (uint64_t)v48);
    goto LABEL_68;
  }
  if (v13 == 57)
  {
    v14 = *(a1 - 8);
    v15 = *(unsigned __int8 *)(v14 + 16);
    if (v15 == 5)
    {
      if (*(_WORD *)(v14 + 18) != 25)
        goto LABEL_40;
      v30 = *(_QWORD *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF));
      if (!v30)
        goto LABEL_40;
      *a2 = v30;
      v17 = *(_QWORD *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) + 32);
      if (!v17)
        goto LABEL_40;
    }
    else
    {
      if (v15 != 53)
        goto LABEL_40;
      v16 = *(_QWORD *)(v14 - 64);
      if (!v16)
        goto LABEL_40;
      *a2 = v16;
      v17 = *(_QWORD *)(v14 - 32);
      if (!v17)
        goto LABEL_40;
    }
    *a4 = v17;
    if (!sub_1C4D8A664(&v57, *(a1 - 4), v17))
    {
LABEL_40:
      v31 = *(a1 - 4);
      v32 = *(unsigned __int8 *)(v31 + 16);
      if (v32 == 5)
      {
        if (*(_WORD *)(v31 + 18) != 25)
          goto LABEL_69;
        v35 = *(_QWORD *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF));
        if (!v35)
          goto LABEL_69;
        *v55 = v35;
        v34 = *(_QWORD *)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF) + 32);
        if (!v34)
          goto LABEL_69;
      }
      else
      {
        if (v32 != 53)
          goto LABEL_69;
        v33 = *(_QWORD *)(v31 - 64);
        if (!v33)
          goto LABEL_69;
        *v55 = v33;
        v34 = *(_QWORD *)(v31 - 32);
        if (!v34)
          goto LABEL_69;
      }
      *v56 = v34;
      v36 = sub_1C4D8A664(&v57, *(a1 - 8), v34);
LABEL_68:
      v39 = v36;
      goto LABEL_70;
    }
LABEL_53:
    v39 = 1;
    goto LABEL_70;
  }
LABEL_69:
  v39 = 0;
LABEL_70:
  if (v59 >= 0x41 && v58)
  {
    MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
    if ((v39 & 1) == 0)
      goto LABEL_5;
  }
  else if (!v39)
  {
    goto LABEL_5;
  }
  if (*a4 == v61)
    return 148;
LABEL_5:
  LODWORD(v57) = 64;
  v55 = a2;
  v56 = (uint64_t *)PrimitiveSizeInBits;
  v11 = a1[1];
  v58 = &v61;
  v59 = a3;
  v60 = a4;
  if (!v11 || *(_QWORD *)(v11 + 8))
    return 0;
  v18 = *((unsigned __int8 *)a1 + 16);
  if ((_DWORD)v18 != 5)
  {
    if ((_DWORD)v18 == 57)
    {
      if (sub_1C4D8AA40(&v55, *(a1 - 8), v18))
      {
        v19 = *(a1 - 4);
        v20 = *(unsigned __int8 *)(v19 + 16);
        if (v20 == 5)
        {
          if (*(_WORD *)(v19 + 18) == 26)
          {
            v44 = *(_QWORD *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF));
            if (v44)
            {
              *v59 = v44;
              v19 = *(_QWORD *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) + 32);
              if (v19)
                goto LABEL_85;
            }
          }
        }
        else if (v20 == 54)
        {
          v21 = *(_QWORD *)(v19 - 64);
          if (v21)
          {
            *v59 = v21;
            v19 = *(_QWORD *)(v19 - 32);
            if (v19)
              goto LABEL_85;
          }
        }
      }
      if (sub_1C4D8AA40(&v55, *(a1 - 4), v19))
      {
        v46 = *(a1 - 8);
        goto LABEL_82;
      }
    }
LABEL_86:
    v53 = 0;
    goto LABEL_87;
  }
  if (*((_WORD *)a1 + 9) != 29)
    goto LABEL_86;
  v26 = &a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
  if (sub_1C4D8AA40(&v55, *v26, (uint64_t)v26))
  {
    v27 = a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF) + 4];
    v28 = *(unsigned __int8 *)(v27 + 16);
    if (v28 == 5)
    {
      if (*(_WORD *)(v27 + 18) == 26)
      {
        v49 = *(_QWORD *)(v27 - 32 * (*(_DWORD *)(v27 + 20) & 0x7FFFFFF));
        if (v49)
        {
          *v59 = v49;
          v19 = *(_QWORD *)(v27 - 32 * (*(_DWORD *)(v27 + 20) & 0x7FFFFFF) + 32);
          if (v19)
            goto LABEL_85;
        }
      }
    }
    else if (v28 == 54)
    {
      v29 = *(_QWORD *)(v27 - 64);
      if (v29)
      {
        *v59 = v29;
        v19 = *(_QWORD *)(v27 - 32);
        if (v19)
          goto LABEL_85;
      }
    }
  }
  v50 = (uint64_t)&a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
  if (!sub_1C4D8AA40(&v55, *(_QWORD *)(v50 + 32), v50))
    goto LABEL_86;
  v46 = a1[-4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
LABEL_82:
  v51 = *(unsigned __int8 *)(v46 + 16);
  if (v51 != 54)
  {
    if (v51 == 5)
    {
      if (*(_WORD *)(v46 + 18) != 26)
        goto LABEL_99;
      v45 = *(_QWORD *)(v46 - 32 * (*(_DWORD *)(v46 + 20) & 0x7FFFFFF));
      if (v45)
      {
        *v59 = v45;
        v54 = *(_QWORD *)(v46 - 32 * (*(_DWORD *)(v46 + 20) & 0x7FFFFFF) + 32);
        if (v54)
        {
          *v60 = v54;
          LOBYTE(v45) = 1;
          goto LABEL_100;
        }
LABEL_99:
        LOBYTE(v45) = 0;
      }
    }
LABEL_100:
    v53 = (v51 == 5) & v45;
    goto LABEL_87;
  }
  v52 = *(_QWORD *)(v46 - 64);
  if (!v52)
    goto LABEL_86;
  *v59 = v52;
  v19 = *(_QWORD *)(v46 - 32);
  if (!v19)
    goto LABEL_86;
LABEL_85:
  *v60 = v19;
  v53 = 1;
LABEL_87:
  if (v57 < 0x41 || !v56)
  {
    if (v53)
      goto LABEL_92;
    return 0;
  }
  MEMORY[0x1CAA32F9C](v56, 0x1000C8000313F17);
  if ((v53 & 1) == 0)
    return 0;
LABEL_92:
  if (*a4 != v61)
    return 0;
  return 149;
}

BOOL sub_1C4D8A664@<W0>(_QWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  llvm::APInt *v6;
  uint64_t v7;
  int v8;
  _BOOL8 result;
  uint64_t v10;
  llvm::APInt *v11;
  uint64_t v12;
  int v13;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 54)
  {
    v5 = *(_QWORD *)(a2 - 64);
    if (v5)
    {
      v6 = (llvm::APInt *)(a1 + 1);
      **a1 = v5;
      v7 = *(_QWORD *)(a2 - 32);
      v8 = *(unsigned __int8 *)(v7 + 16);
      if (v8 == 5)
      {
        if (*(_WORD *)(v7 + 18) != 15)
          return 0;
        result = sub_1C4D8A86C(v6, *(llvm::Constant **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)));
        if (!result)
          return result;
        v10 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32);
        if (!v10)
          return 0;
      }
      else
      {
        if (v8 != 43)
          return 0;
        result = sub_1C4D8A7F0(v6, *(unsigned __int8 **)(v7 - 64));
        if (!result)
          return result;
        v10 = *(_QWORD *)(v7 - 32);
        if (!v10)
          return 0;
      }
      *a1[3] = v10;
      return 1;
    }
    return 0;
  }
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 26)
      goto LABEL_25;
    a3 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (a3)
    {
      v11 = (llvm::APInt *)(a1 + 1);
      **a1 = a3;
      v12 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
      v13 = *(unsigned __int8 *)(v12 + 16);
      if (v13 != 5)
      {
        if (v13 == 43 && sub_1C4D8A7F0(v11, *(unsigned __int8 **)(v12 - 64)))
        {
          a3 = *(_QWORD *)(v12 - 32);
          if (!a3)
            return (v4 == 5) & a3;
          goto LABEL_24;
        }
LABEL_25:
        LOBYTE(a3) = 0;
        return (v4 == 5) & a3;
      }
      if (*(_WORD *)(v12 + 18) != 15
        || !sub_1C4D8A86C(v11, *(llvm::Constant **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF))))
      {
        goto LABEL_25;
      }
      a3 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32);
      if (a3)
      {
LABEL_24:
        *a1[3] = a3;
        LOBYTE(a3) = 1;
      }
    }
  }
  return (v4 == 5) & a3;
}

BOOL sub_1C4D8A7F0(llvm::APInt *this, unsigned __int8 *a2)
{
  unsigned int v3;
  BOOL v5;
  llvm::APFloatBase *SplatValue;

  v3 = a2[16];
  if (a2 && v3 == 16)
    return sub_1C4D8A8E4((uint64_t)(a2 + 24), this);
  v5 = v3 <= 0x14 && (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
  if (v5
    && (SplatValue = llvm::Constant::getSplatValue((llvm::Constant *)a2, 0)) != 0
    && (a2 = (unsigned __int8 *)SplatValue, *((_BYTE *)SplatValue + 16) == 16))
  {
    return sub_1C4D8A8E4((uint64_t)(a2 + 24), this);
  }
  else
  {
    return 0;
  }
}

BOOL sub_1C4D8A86C(llvm::APInt *this, llvm::Constant *a2)
{
  llvm::APFloatBase *SplatValue;

  if (a2 && *((_BYTE *)a2 + 16) == 16)
    return sub_1C4D8A8E4((uint64_t)a2 + 24, this);
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12
    && (SplatValue = llvm::Constant::getSplatValue(a2, 0)) != 0
    && (a2 = SplatValue, *((_BYTE *)SplatValue + 16) == 16))
  {
    return sub_1C4D8A8E4((uint64_t)a2 + 24, this);
  }
  else
  {
    return 0;
  }
}

BOOL sub_1C4D8A8E4(uint64_t a1, llvm::APInt *this)
{
  uint64_t v3;
  unsigned int v4;
  void *v5;
  uint64_t v9;
  void *v10;
  BOOL v11;
  void *v12;
  _BOOL8 v13;
  uint64_t v14;
  void *__s1;
  unsigned int v16;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *((_DWORD *)this + 2);
  if ((_DWORD)v3 == v4)
  {
    if (v3 > 0x40)
      return memcmp(*(const void **)a1, *(const void **)this, ((unint64_t)(v3 + 63) >> 3) & 0x3FFFFFF8) == 0;
    v5 = *(void **)a1;
    return v5 == *(void **)this;
  }
  if (v3 > v4)
  {
    llvm::APInt::zext(this, v3, (uint64_t)&__s1);
    v9 = *(unsigned int *)(a1 + 8);
    v10 = __s1;
    if (v9 > 0x40)
      v11 = memcmp(*(const void **)a1, __s1, ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8) == 0;
    else
      v11 = *(_QWORD *)a1 == (_QWORD)__s1;
    v14 = v11;
    if (v16 >= 0x41 && v10)
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
    return v14;
  }
  else
  {
    llvm::APInt::zext((llvm::APInt *)a1, *((_DWORD *)this + 2), (uint64_t)&__s1);
    if (v16 <= 0x40)
    {
      v5 = __s1;
      return v5 == *(void **)this;
    }
    v12 = __s1;
    v13 = memcmp(__s1, *(const void **)this, (((unint64_t)v16 + 63) >> 3) & 0x3FFFFFF8) == 0;
    if (v12)
      MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
    return v13;
  }
}

BOOL sub_1C4D8AA40@<W0>(_QWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  llvm::APInt *v6;
  uint64_t v7;
  int v8;
  _BOOL8 result;
  uint64_t v10;
  llvm::APInt *v11;
  uint64_t v12;
  int v13;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 53)
  {
    v5 = *(_QWORD *)(a2 - 64);
    if (v5)
    {
      v6 = (llvm::APInt *)(a1 + 1);
      **a1 = v5;
      v7 = *(_QWORD *)(a2 - 32);
      v8 = *(unsigned __int8 *)(v7 + 16);
      if (v8 == 5)
      {
        if (*(_WORD *)(v7 + 18) != 15)
          return 0;
        result = sub_1C4D8A86C(v6, *(llvm::Constant **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)));
        if (!result)
          return result;
        v10 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) + 32);
        if (!v10)
          return 0;
      }
      else
      {
        if (v8 != 43)
          return 0;
        result = sub_1C4D8A7F0(v6, *(unsigned __int8 **)(v7 - 64));
        if (!result)
          return result;
        v10 = *(_QWORD *)(v7 - 32);
        if (!v10)
          return 0;
      }
      *a1[3] = v10;
      return 1;
    }
    return 0;
  }
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 25)
      goto LABEL_25;
    a3 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    if (a3)
    {
      v11 = (llvm::APInt *)(a1 + 1);
      **a1 = a3;
      v12 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
      v13 = *(unsigned __int8 *)(v12 + 16);
      if (v13 != 5)
      {
        if (v13 == 43 && sub_1C4D8A7F0(v11, *(unsigned __int8 **)(v12 - 64)))
        {
          a3 = *(_QWORD *)(v12 - 32);
          if (!a3)
            return (v4 == 5) & a3;
          goto LABEL_24;
        }
LABEL_25:
        LOBYTE(a3) = 0;
        return (v4 == 5) & a3;
      }
      if (*(_WORD *)(v12 + 18) != 15
        || !sub_1C4D8A86C(v11, *(llvm::Constant **)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF))))
      {
        goto LABEL_25;
      }
      a3 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32);
      if (a3)
      {
LABEL_24:
        *a1[3] = a3;
        LOBYTE(a3) = 1;
      }
    }
  }
  return (v4 == 5) & a3;
}

uint64_t sub_1C4D8ABCC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = 0;
  if (a2 && *(_BYTE *)(a2 + 16) == 81)
  {
    if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 - 64))
    {
      result = sub_1C4D8AC3C(a1 + 16, *(llvm::Constant **)(a2 - 32));
      if ((_DWORD)result)
      {
        **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C4D8AC3C(uint64_t a1, llvm::Constant *a2)
{
  int v2;
  unsigned int v4;
  llvm::APInt *v5;
  unsigned int v6;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  int v11;
  llvm::APFloatBase *SplatValue;
  unsigned int v13;
  BOOL v14;
  int v16;
  llvm::Type *v17;
  llvm::UndefValue *AggregateElement;
  int v19;
  unsigned int v20;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 16)
  {
    v5 = (llvm::Constant *)((char *)a2 + 24);
    v6 = *((_DWORD *)a2 + 8);
    if (v6 > 0x40)
      return llvm::APInt::countLeadingZerosSlowCase(v5) == v6;
    else
      return *(_QWORD *)v5 == 0;
  }
  else
  {
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v9 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
    else
      v9 = 0;
    v10 = !v9 || v4 > 0x14;
    v11 = v10;
    if (!v10)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((_BYTE *)SplatValue + 16) == 16)
      {
        v13 = *((_DWORD *)SplatValue + 8);
        if (v13 > 0x40)
          v14 = llvm::APInt::countLeadingZerosSlowCase((llvm::APFloatBase *)((char *)SplatValue + 24)) == v13;
        else
          v14 = *((_QWORD *)SplatValue + 3) == 0;
        v2 = v14;
      }
      else
      {
        if (*(_BYTE *)(v8 + 8) == 18)
        {
          v16 = *(_DWORD *)(v8 + 32);
          if (v16)
          {
            v17 = 0;
            v2 = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(a2, v17);
              if (!AggregateElement)
                break;
              v19 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v19 - 11) >= 2)
              {
                if (v19 != 16)
                  break;
                v20 = *((_DWORD *)AggregateElement + 8);
                if (v20 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase((llvm::UndefValue *)((char *)AggregateElement
                                                                                               + 24)) != v20)
                    break;
                }
                else if (*((_QWORD *)AggregateElement + 3))
                {
                  break;
                }
                v2 = 1;
              }
              v17 = (llvm::Type *)((_DWORD)v17 + 1);
              if (v16 == (_DWORD)v17)
                return (v11 ^ 1) & v2;
            }
          }
        }
        v2 = 0;
      }
    }
    return (v11 ^ 1) & v2;
  }
}

uint64_t sub_1C4D8ADA0(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 120) = &unk_1E8167888;
  *(_QWORD *)(a1 + 128) = &unk_1E8167A08;
  v7 = **a2;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = a1 + 120;
  *(_QWORD *)(a1 + 80) = a1 + 128;
  *(_QWORD *)(a1 + 88) = a4;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 512;
  *(_BYTE *)(a1 + 102) = 7;
  *(_QWORD *)(a1 + 104) = a5;
  *(_QWORD *)(a1 + 112) = a6;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_1C4D8AE2C(a1, (uint64_t)a2, a3);
  return a1;
}

uint64_t sub_1C4D8AE2C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  *(_QWORD *)(result + 48) = a2;
  *(_QWORD *)(result + 56) = a3;
  if (a2 + 40 != a3)
  {
    v4 = result;
    v5 = 0;
    if (a3)
      v6 = a3 - 24;
    else
      v6 = 0;
    v7 = *(unsigned __int8 **)(v6 + 48);
    v8 = v7;
    if (v7)
    {
      llvm::MetadataTracking::track((uint64_t)&v8, v7, 2);
      v5 = v8;
    }
    result = sub_1C4774EF4(v4, 0, (uint64_t)v5);
    if (v8)
      return llvm::MetadataTracking::untrack((uint64_t)&v8, v8);
  }
  return result;
}

BOOL sub_1C4D8AEB4@<W0>(_QWORD **a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 56)
  {
    v6 = *(_QWORD *)(a2 - 64);
    v7 = *(unsigned __int8 *)(v6 + 16);
    if (v7 == 5)
    {
      if (*(_WORD *)(v6 + 18) != 26)
        return 0;
      v10 = v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF);
      if (**a1 != *(_QWORD *)v10 || !sub_1C4D8A86C((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v10 + 32)))
        return 0;
    }
    else if (v7 != 54
           || **a1 != *(_QWORD *)(v6 - 64)
           || !sub_1C4D8A7F0((llvm::APInt *)(a1 + 1), *(unsigned __int8 **)(v6 - 32)))
    {
      return 0;
    }
    return sub_1C4D8A7F0((llvm::APInt *)(a1 + 3), *(unsigned __int8 **)(a2 - 32));
  }
  if (v5 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 28)
      goto LABEL_25;
    v8 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v9 = *(unsigned __int8 *)(v8 + 16);
    if (v9 == 5)
    {
      if (*(_WORD *)(v8 + 18) != 26)
        goto LABEL_25;
      v12 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
      if (**a1 != *(_QWORD *)v12 || !sub_1C4D8A86C((llvm::APInt *)(a1 + 1), *(llvm::Constant **)(v12 + 32)))
        goto LABEL_25;
    }
    else if (v9 != 54
           || **a1 != *(_QWORD *)(v8 - 64)
           || !sub_1C4D8A7F0((llvm::APInt *)(a1 + 1), *(unsigned __int8 **)(v8 - 32)))
    {
      goto LABEL_25;
    }
    if (!sub_1C4D8A86C((llvm::APInt *)(a1 + 3), *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)))
    {
LABEL_25:
      a3 = 0;
      return (v5 == 5) & a3;
    }
    a3 = 1;
  }
  return (v5 == 5) & a3;
}

uint64_t sub_1C4D8B054()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4D897D0(v0);
}

void sub_1C4D8B080(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4D8B0A4(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::BasicAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
}

uint64_t sub_1C4D8B15C(uint64_t a1, llvm::Function *a2)
{
  void **v4;
  void *v5;
  llvm::AssumptionCacheTracker *v6;
  uint64_t AssumptionCache;
  void **v8;
  void *v9;
  uint64_t v10;
  void **v11;
  unint64_t v12;
  uint64_t v13;
  void **v14;
  void *v15;
  uint64_t v16;
  void *v18;
  void **v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22[2];
  int v23;
  uint64_t v24[2];
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  void *__src;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::AssumptionCacheTracker::ID);
  v6 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v6, a2);
  v8 = **(void ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::TargetLibraryInfoWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::TargetLibraryInfoWrapperPass::ID);
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  llvm::TargetLibraryAnalysis::run(v10 + 32, (uint64_t)a2, (uint64_t)&v29);
  *(_QWORD *)(v10 + 240) = v29;
  if (*(_BYTE *)(v10 + 320))
  {
    if ((uint64_t *)(v10 + 240) == &v29)
    {
LABEL_18:
      *(_DWORD *)(v10 + 312) = v33;
      goto LABEL_19;
    }
    v11 = (void **)(v10 + 248);
    v12 = v31;
    v13 = *(unsigned int *)(v10 + 256);
    if (v13 >= v31)
    {
      if (v31)
        memmove(*v11, __src, 8 * v31);
      goto LABEL_17;
    }
    if (*(_DWORD *)(v10 + 260) < v31)
    {
      *(_DWORD *)(v10 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v10 + 248, v10 + 264, v12, 8);
    }
    else if ((_DWORD)v13)
    {
      memmove(*v11, __src, 8 * v13);
      goto LABEL_15;
    }
    v13 = 0;
LABEL_15:
    if (v13 != v31)
      memcpy((char *)*v11 + 8 * v13, (char *)__src + 8 * v13, 8 * v31 - 8 * v13);
LABEL_17:
    *(_DWORD *)(v10 + 256) = v12;
    goto LABEL_18;
  }
  v18 = (void *)(v10 + 264);
  *(_QWORD *)(v10 + 248) = v10 + 264;
  v19 = (void **)(v10 + 248);
  *(_QWORD *)(v10 + 256) = 0x600000000;
  v20 = v31;
  if (v31 && v19 != &__src)
  {
    if (v31 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v10 + 248, v10 + 264, v31, 8);
      v21 = v31;
      if (!v31)
      {
LABEL_31:
        *(_DWORD *)(v10 + 256) = v20;
        goto LABEL_32;
      }
      v18 = *v19;
    }
    else
    {
      v21 = v31;
    }
    memcpy(v18, __src, 8 * v21);
    goto LABEL_31;
  }
LABEL_32:
  *(_DWORD *)(v10 + 312) = v33;
  *(_BYTE *)(v10 + 320) = 1;
LABEL_19:
  if (__src != &v32)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v24);
  sub_1C4D8B52C(v22);
  v14 = **(void ****)(a1 + 8);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != &llvm::DominatorTreeWrapperPass::ID);
  v16 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), &llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4D877DC(a2, AssumptionCache, v10 + 240, v16 + 32);
}

uint64_t *sub_1C4D8B440(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (uint64_t *)(v3 + 8);
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C4D8B4AC(v5);
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

void sub_1C4D8B4AC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        v6 = v3[3];
        v3[3] = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t *sub_1C4D8B52C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (uint64_t *)(v3 + 8);
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

_QWORD *sub_1C4D8B5A8(llvm::SmallPtrSetImplBase *this, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  if (*((_DWORD *)this + 17) != *((_DWORD *)this + 18))
    return sub_1C4774094(this, a2);
  result = sub_1C477672C((uint64_t)this, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v5 = *((_QWORD *)this + 1);
  v6 = 16;
  if (v5 == *(_QWORD *)this)
    v6 = 20;
  if (result == (_QWORD *)(v5 + 8 * *(unsigned int *)((char *)this + v6)))
    return sub_1C4774094(this, a2);
  return result;
}

uint64_t llvm::TruncInstCombine::buildTruncExpressionGraph(llvm::TruncInstCombine *this)
{
  char *v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *__src;
  uint64_t v27;
  _QWORD v28[2];
  void *v29;
  uint64_t v30;
  _BYTE v31[64];
  void *v32;
  uint64_t v33;
  _QWORD v34[10];

  v34[8] = *MEMORY[0x1E0C80C00];
  v32 = v34;
  v33 = 0x800000000;
  v29 = v31;
  v30 = 0x800000000;
  v2 = (char *)this + 88;
  sub_1C4D8D8A8((_DWORD *)this + 22);
  *((_QWORD *)this + 15) = *((_QWORD *)this + 14);
  v3 = *(_QWORD *)(*((_QWORD *)this + 10) - 32);
  v4 = v33;
  if (v33 >= HIDWORD(v33))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v33 + 1, 8);
    v4 = v33;
  }
  *((_QWORD *)v32 + v4) = v3;
  v5 = __CFADD__((_DWORD)v33, 1);
  v6 = v33 + 1;
  LODWORD(v33) = v33 + 1;
  if (v5)
  {
LABEL_5:
    v7 = 1;
    goto LABEL_6;
  }
  while (1)
  {
    v9 = (unsigned __int8 *)*((_QWORD *)v32 + v6 - 1);
    v10 = v9[16];
    if (v10 <= 0x14)
      goto LABEL_23;
    if (v10 < 0x1C)
      break;
    v11 = v30;
    if ((_DWORD)v30 && *((unsigned __int8 **)v29 + v30 - 1) == v9)
    {
      LODWORD(v33) = v6 - 1;
      LODWORD(v30) = v30 - 1;
      __src = v9;
      v27 = 0;
      v28[0] = 0;
      sub_1C6176C34((uint64_t)v2, (uint64_t *)&__src);
LABEL_48:
      v6 = v33;
      goto LABEL_24;
    }
    v12 = *((_QWORD *)this + 11);
    v13 = *((unsigned int *)this + 26);
    if ((_DWORD)v13)
    {
      LODWORD(v14) = (v13 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v15 = (unsigned __int8 **)(v12 + 16 * v14);
      v16 = *v15;
      if (v9 == *v15)
        goto LABEL_22;
      v17 = 1;
      while (v16 != (unsigned __int8 *)-4096)
      {
        v18 = v14 + v17++;
        v14 = v18 & (v13 - 1);
        v16 = *(unsigned __int8 **)(v12 + 16 * v14);
        if (v9 == v16)
        {
          v15 = (unsigned __int8 **)(v12 + 16 * v14);
          goto LABEL_22;
        }
      }
    }
    v15 = (unsigned __int8 **)(v12 + 16 * v13);
LABEL_22:
    if (v15 == (unsigned __int8 **)(v12 + 16 * v13))
    {
      if (v30 >= HIDWORD(v30))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v30 + 1, 8);
        v11 = v30;
      }
      v7 = 0;
      *((_QWORD *)v29 + v11) = v9;
      LODWORD(v30) = v30 + 1;
      v19 = v9[16] - 41;
      if (v19 > 0x31)
        goto LABEL_6;
      if (((1 << (v9[16] - 41)) & 0xE000000) == 0)
      {
        if (v19 == 42)
        {
          __src = v28;
          v27 = 0x200000000;
          sub_1C4D8B9C8(v9, (uint64_t)&__src);
          v20 = (char *)__src;
          v21 = (char *)__src + 8 * v27;
          if ((_DWORD)v27)
          {
            do
            {
              v22 = *(_QWORD *)v20;
              if ((_DWORD)v30)
              {
                v23 = v29;
                v24 = 8 * v30;
                while (*v23 != v22)
                {
                  ++v23;
                  v24 -= 8;
                  if (!v24)
                    goto LABEL_36;
                }
              }
              else
              {
LABEL_36:
                v25 = v33;
                if (v33 >= (unint64_t)HIDWORD(v33))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v33 + 1, 8);
                  v25 = v33;
                }
                *((_QWORD *)v32 + v25) = v22;
                LODWORD(v33) = v33 + 1;
              }
              v20 += 8;
            }
            while (v20 != v21);
            v20 = (char *)__src;
          }
          if (v20 != (char *)v28)
            free(v20);
        }
        else
        {
          if (((1 << (v9[16] - 41)) & 0x310000003F255) == 0)
            goto LABEL_6;
          __src = v28;
          v27 = 0x200000000;
          sub_1C4D8B9C8(v9, (uint64_t)&__src);
          sub_1C6176EC8((unsigned int *)&v32, (uint64_t)v32 + 8 * v33, (uint64_t *)__src, (uint64_t *)__src + v27);
          if (__src != v28)
            free(__src);
        }
      }
      goto LABEL_48;
    }
LABEL_23:
    LODWORD(v33) = --v6;
LABEL_24:
    if (!v6)
      goto LABEL_5;
  }
  v7 = 0;
LABEL_6:
  if (v29 != v31)
    free(v29);
  if (v32 != v34)
    free(v32);
  return v7;
}

_DWORD *sub_1C4D8B9C8(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  int v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;

  v3 = result;
  if (*((unsigned __int8 *)result + 16) <= 0x34u || *((unsigned __int8 *)result + 16) - 53 < 6)
  {
LABEL_6:
    v7 = result[5];
    if ((v7 & 0x40000000) != 0)
      v8 = (uint64_t *)*((_QWORD *)result - 1);
    else
      v8 = (uint64_t *)&result[-8 * (v7 & 0x7FFFFFF)];
    v9 = *v8;
    v10 = *(unsigned int *)(a2 + 8);
    if (v10 >= *(_DWORD *)(a2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v10 + 1, 8);
      LODWORD(v10) = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v10) = v9;
    v11 = *(_DWORD *)(a2 + 8) + 1;
    *(_DWORD *)(a2 + 8) = v11;
    v12 = v3[5];
    if ((v12 & 0x40000000) != 0)
      v13 = (_DWORD *)*((_QWORD *)v3 - 1);
    else
      v13 = &v3[-8 * (v12 & 0x7FFFFFF)];
    v14 = *((_QWORD *)v13 + 4);
LABEL_15:
    if (v11 >= *(_DWORD *)(a2 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v11 + 1, 8);
      v11 = *(_DWORD *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = v14;
    ++*(_DWORD *)(a2 + 8);
  }
  else
  {
    switch(*((_BYTE *)result + 16))
    {
      case 'S':
        v4 = result[5];
        if ((v4 & 0x40000000) != 0)
        {
          v6 = (uint64_t *)*((_QWORD *)result - 1);
          v5 = v4 & 0x7FFFFFF;
        }
        else
        {
          v5 = v4 & 0x7FFFFFF;
          v6 = (uint64_t *)&result[-8 * v5];
        }
        if (v5)
        {
          v19 = *(_DWORD *)(a2 + 8);
          v20 = 32 * v5;
          do
          {
            v21 = *v6;
            if (v19 >= *(_DWORD *)(a2 + 12))
            {
              result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v19 + 1, 8);
              v19 = *(_DWORD *)(a2 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v19) = v21;
            v19 = *(_DWORD *)(a2 + 8) + 1;
            *(_DWORD *)(a2 + 8) = v19;
            v6 += 4;
            v20 -= 32;
          }
          while (v20);
        }
        break;
      case 'T':
      case 'V':
      case 'W':
      case 'X':
        __break(1u);
        break;
      case 'U':
        v17 = result[5];
        if ((v17 & 0x40000000) != 0)
          v18 = (char *)*((_QWORD *)result - 1);
        else
          v18 = (char *)&result[-8 * (v17 & 0x7FFFFFF)];
        v22 = *((_QWORD *)v18 + 4);
        v23 = *(unsigned int *)(a2 + 8);
        if (v23 >= *(_DWORD *)(a2 + 12))
        {
          result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v23 + 1, 8);
          LODWORD(v23) = *(_DWORD *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v23) = v22;
        v11 = *(_DWORD *)(a2 + 8) + 1;
        *(_DWORD *)(a2 + 8) = v11;
        v24 = v3[5];
        if ((v24 & 0x40000000) != 0)
          v25 = (_DWORD *)*((_QWORD *)v3 - 1);
        else
          v25 = &v3[-8 * (v24 & 0x7FFFFFF)];
        v14 = *((_QWORD *)v25 + 8);
        goto LABEL_15;
      case 'Y':
        v15 = result[5];
        if ((v15 & 0x40000000) != 0)
          v16 = (uint64_t *)*((_QWORD *)result - 1);
        else
          v16 = (uint64_t *)&result[-8 * (v15 & 0x7FFFFFF)];
        v14 = *v16;
        v11 = *(_DWORD *)(a2 + 8);
        goto LABEL_15;
      case 'Z':
        goto LABEL_6;
      default:
        return result;
    }
  }
  return result;
}

unint64_t llvm::TruncInstCombine::getMinBitWidth(llvm::TruncInstCombine *this)
{
  llvm::Type **v2;
  unsigned __int8 *v3;
  llvm::Type *v4;
  llvm::Type *v5;
  unint64_t PrimitiveSizeInBits;
  llvm::Type *v7;
  unint64_t v8;
  unint64_t v9;
  char *v11;
  unsigned int i;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  llvm::LLVMContext *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  int v43;
  llvm::Type *IntNTy;
  llvm::TruncInstCombine *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[16];
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  void *v54;
  uint64_t v55;
  _QWORD v56[10];

  v56[8] = *MEMORY[0x1E0C80C00];
  v54 = v56;
  v55 = 0x800000000;
  v51 = v53;
  v52 = 0x800000000;
  v2 = (llvm::Type **)*((_QWORD *)this + 10);
  v3 = (unsigned __int8 *)*(v2 - 4);
  v4 = *v2;
  v5 = *v2;
  if ((*((_DWORD *)*v2 + 2) & 0xFE) == 0x12)
    v5 = (llvm::Type *)**((_QWORD **)v4 + 2);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v5);
  v7 = *(llvm::Type **)v3;
  if ((*(_DWORD *)(*(_QWORD *)v3 + 8) & 0xFE) == 0x12)
    v7 = (llvm::Type *)**((_QWORD **)v7 + 2);
  v8 = llvm::Type::getPrimitiveSizeInBits(v7);
  if (v3[16] >= 0x15u)
  {
    v9 = v8;
    v56[0] = v3;
    LODWORD(v55) = 1;
    v45 = this;
    v11 = (char *)this + 88;
    v48 = v3;
    *(_DWORD *)sub_1C6176CE4((uint64_t)this + 88, (uint64_t *)&v48) = PrimitiveSizeInBits;
    for (i = v55; (_DWORD)v55; i = v55)
    {
      while (1)
      {
        v19 = *((_QWORD *)v54 + i - 1);
        if (*(unsigned __int8 *)(v19 + 16) > 0x14u)
          break;
        LODWORD(v55) = --i;
        if (!i)
          goto LABEL_13;
      }
      v47 = *((_QWORD *)v54 + i - 1);
      v20 = (unsigned int *)sub_1C6176CE4((uint64_t)v11, &v47);
      v48 = v50;
      v49 = 0x200000000;
      sub_1C4D8B9C8((_DWORD *)v19, (uint64_t)&v48);
      v21 = v52;
      if ((_DWORD)v52 && *((_QWORD *)v51 + v52 - 1) == v19)
      {
        LODWORD(v55) = v55 - 1;
        LODWORD(v52) = v52 - 1;
        if ((_DWORD)v49)
        {
          v28 = (uint64_t *)v48;
          v29 = 8 * v49;
          do
          {
            v30 = *v28;
            if (*(unsigned __int8 *)(*v28 + 16) <= 0x1Bu)
              v30 = 0;
            v46 = v30;
            if (v30)
            {
              v31 = sub_1C6176CE4((uint64_t)v11, &v46);
              v32 = v20[1];
              if (v32 <= *(_DWORD *)(v31 + 4))
                v32 = *(_DWORD *)(v31 + 4);
              v20[1] = v32;
            }
            ++v28;
            v29 -= 8;
          }
          while (v29);
        }
      }
      else
      {
        if (v52 >= HIDWORD(v52))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, (uint64_t)v53, v52 + 1, 8);
          v21 = v52;
        }
        *((_QWORD *)v51 + v21) = v19;
        LODWORD(v52) = v52 + 1;
        v23 = *v20;
        v22 = v20[1];
        if (v22 <= *v20)
          v22 = *v20;
        v20[1] = v22;
        if ((_DWORD)v49)
        {
          v24 = (uint64_t *)v48;
          v25 = 8 * v49;
          do
          {
            if (*(unsigned __int8 *)(*v24 + 16) <= 0x1Bu)
              v26 = 0;
            else
              v26 = *v24;
            v46 = v26;
            if (v26 && v23 > sub_1C6176DB8((uint64_t)v11, v26))
            {
              *(_DWORD *)sub_1C6176CE4((uint64_t)v11, &v46) = v23;
              v27 = v55;
              if (v55 >= (unint64_t)HIDWORD(v55))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 8);
                v27 = v55;
              }
              *((_QWORD *)v54 + v27) = v26;
              LODWORD(v55) = v55 + 1;
            }
            ++v24;
            v25 -= 8;
          }
          while (v25);
        }
      }
      if (v48 != v50)
        free(v48);
    }
LABEL_13:
    v13 = sub_1C6176DB8((uint64_t)v11, (uint64_t)v3);
    v14 = HIDWORD(v13);
    if (PrimitiveSizeInBits >= HIDWORD(v13))
    {
      if (HIDWORD(v13) == 1)
      {
        v33 = 0;
        v34 = 1;
      }
      else
      {
        v35 = v13;
        v36 = *((_QWORD *)v45 + 2);
        v37 = *(char **)(v36 + 32);
        v38 = *(_QWORD *)(v36 + 40);
        v39 = &v37[v38];
        v40 = &v37[v38];
        if (v9 <= 0xFF)
        {
          v41 = (char *)memchr(v37, (char)v9, v38);
          if (v41)
            v40 = v41;
          else
            v40 = &v37[v38];
        }
        v33 = v40 - v37 == v38;
        if (!(v35 >> 40))
        {
          v42 = (char *)memchr(v37, (char)v14, v38);
          if (v42)
            v39 = v42;
        }
        v34 = v39 - v37 != v38;
      }
      v43 = (*((_DWORD *)v4 + 2) & 0xFE) == 0x12 || v33;
      if (v43 | v34)
        v9 = v14;
      else
        v9 = v9;
    }
    else if ((*((_DWORD *)v4 + 2) & 0xFE) != 0x12)
    {
      v15 = *((_QWORD *)v45 + 2);
      v16 = *(_QWORD *)(v15 + 40);
      if (v16)
      {
        v17 = *(unsigned __int8 **)(v15 + 32);
        while (1)
        {
          v18 = (llvm::LLVMContext *)*v17;
          if (v18 >= HIDWORD(v13))
            break;
          ++v17;
          if (!--v16)
            goto LABEL_7;
        }
        IntNTy = (llvm::Type *)llvm::Type::getIntNTy(*(llvm::Type **)v4, v18);
        if (IntNTy)
        {
          if ((*((_DWORD *)IntNTy + 2) & 0xFE) == 0x12)
            IntNTy = (llvm::Type *)**((_QWORD **)IntNTy + 2);
          v9 = llvm::Type::getPrimitiveSizeInBits(IntNTy);
        }
      }
    }
  }
  else
  {
    v9 = PrimitiveSizeInBits;
  }
LABEL_7:
  if (v51 != v53)
    free(v51);
  if (v54 != v56)
    free(v54);
  return v9;
}

_QWORD *llvm::TruncInstCombine::getBestTruncatedType(llvm::TruncInstCombine *this)
{
  _DWORD *v2;
  _DWORD *v3;
  unint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t **v20;
  uint64_t v21;
  unint64_t PrimitiveSizeInBits;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  const void *v36;
  char v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int v67;
  BOOL v68;
  int v69;
  int64_t v70;
  BOOL v71;
  unint64_t v72;
  int v73;
  BOOL v74;
  void *v75;
  size_t v76;
  size_t v77;
  int v78;
  int64_t v79;
  unint64_t v80;
  int v81;
  int MinBitWidth;
  _QWORD *v83;
  _QWORD *result;
  _DWORD *v85;
  int v86;
  unint64_t __n;
  unsigned int v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t *v95;
  unsigned int v96;
  const void *v97;
  unsigned int v98;
  void *__src;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  BOOL v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;

  if (!llvm::TruncInstCombine::buildTruncExpressionGraph(this))
    return 0;
  v2 = (_DWORD *)*((_QWORD *)this + 14);
  v3 = (_DWORD *)*((_QWORD *)this + 15);
  if (v2 != v3)
  {
    v4 = 0;
    v5 = (_DWORD *)*((_QWORD *)this + 14);
    while (1)
    {
      v6 = *(_QWORD *)v5;
      v7 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      if (v7)
      {
        if (*(_QWORD *)(v7 + 8))
          break;
      }
      v18 = v4;
LABEL_34:
      v5 += 6;
      v4 = v18;
      if (v5 == v3)
        goto LABEL_37;
    }
    v8 = *(unsigned __int8 *)(v6 + 16) - 67;
    while (1)
    {
      v9 = *(_QWORD *)(v7 + 24);
      if (v9)
        v10 = *(unsigned __int8 *)(v9 + 16) >= 0x1Cu;
      else
        v10 = 0;
      if (!v10 || v9 == *((_QWORD *)this + 10))
      {
LABEL_21:
        v18 = v4;
        goto LABEL_22;
      }
      v11 = *((_QWORD *)this + 11);
      v12 = *((unsigned int *)this + 26);
      if ((_DWORD)v12)
      {
        LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
        v14 = (uint64_t *)(v11 + 16 * v13);
        v15 = *v14;
        if (v9 == *v14)
          goto LABEL_20;
        v16 = 1;
        while (v15 != -4096)
        {
          v17 = v13 + v16++;
          v13 = v17 & (v12 - 1);
          v15 = *(_QWORD *)(v11 + 16 * v13);
          if (v9 == v15)
          {
            v14 = (uint64_t *)(v11 + 16 * v13);
            goto LABEL_20;
          }
        }
      }
      v14 = (uint64_t *)(v11 + 16 * v12);
LABEL_20:
      if (v14 != (uint64_t *)(v11 + 16 * v12))
        goto LABEL_21;
      if (v8 > 1)
        return 0;
      v19 = *(_DWORD *)(v6 + 20);
      if ((v19 & 0x40000000) != 0)
        v20 = *(uint64_t ***)(v6 - 8);
      else
        v20 = (uint64_t **)(v6 - 32 * (v19 & 0x7FFFFFF));
      v21 = **v20;
      if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
        v21 = **(_QWORD **)(v21 + 16);
      PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v21);
      v18 = PrimitiveSizeInBits;
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 != (_DWORD)PrimitiveSizeInBits)
          return 0;
      }
LABEL_22:
      v7 = *(_QWORD *)(v7 + 8);
      v4 = v18;
      if (!v7)
        goto LABEL_34;
    }
  }
  LODWORD(v18) = 0;
LABEL_37:
  v23 = **(_QWORD **)(*((_QWORD *)this + 10) - 32);
  if ((*(_DWORD *)(v23 + 8) & 0xFE) == 0x12)
    v23 = **(_QWORD **)(v23 + 16);
  v24 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v23);
  v25 = v24;
  if (v2 != v3)
  {
    v89 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
    v90 = v24;
    v88 = v24 + 1;
    while (1)
    {
      v26 = *(_QWORD *)v2;
      v27 = *(unsigned __int8 *)(*(_QWORD *)v2 + 16);
      if ((v27 - 53) > 2)
        goto LABEL_94;
      v28 = *(_DWORD *)(v26 + 20);
      if ((v28 & 0x40000000) != 0)
        v29 = *(_QWORD *)(v26 - 8);
      else
        v29 = v26 - 32 * (v28 & 0x7FFFFFF);
      v30 = *(_QWORD *)(v29 + 32);
      v31 = *((_QWORD *)this + 10);
      if (!v31 || !*(_QWORD *)(v31 + 40))
      {
        v74 = v30 && *(unsigned __int8 *)(v30 + 16) >= 0x1Cu;
        if (!v74 || (v31 = v30, !*(_QWORD *)(v30 + 40)))
          v31 = 0;
      }
      v32 = *(_QWORD *)this;
      v33 = *((_QWORD *)this + 3);
      v104 = (void *)*((_QWORD *)this + 2);
      v105 = v32;
      v106 = v31;
      v107 = v33;
      v108 = 0;
      v109 = 1;
      sub_1C4F83784(v30, 0, (uint64_t *)&v104, &__src);
      v34 = v100;
      LODWORD(v105) = v100;
      if (v100 > 0x40)
      {
        v76 = (((unint64_t)v100 + 63) >> 3) & 0x3FFFFFF8;
        v104 = (void *)operator new[]();
        memcpy(v104, __src, v76);
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v104);
        v34 = v105;
        v36 = v104;
      }
      else
      {
        if (v100)
          v35 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v100;
        else
          v35 = 0;
        v36 = (const void *)(v35 & ~(unint64_t)__src);
      }
      v98 = v34;
      v97 = v36;
      v96 = v25;
      if (v25 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v95, 1, 0);
      }
      else
      {
        v37 = v89;
        if (!v25)
          v37 = 0;
        v95 = (uint64_t *)(v37 & 1);
      }
      v103 = 0;
      llvm::APInt::uadd_ov(&v97, &v95, &v103, (uint64_t)&v104);
      if (v103)
      {
        v92 = v34;
        if (v34 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v91, -1, 1);
        }
        else
        {
          if (v34)
            v75 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v34);
          else
            v75 = 0;
          v91 = v75;
        }
        if (v105 >= 0x41 && v104)
          MEMORY[0x1CAA32F9C](v104, 0x1000C8000313F17);
      }
      else
      {
        v92 = v105;
        v91 = v104;
      }
      v38 = sub_1C47EE5B8((uint64_t ***)&v91, v90);
      if (v92 >= 0x41 && v91)
        MEMORY[0x1CAA32F9C](v91, 0x1000C8000313F17);
      if (v96 >= 0x41 && v95)
        MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
      if (v34 >= 0x41 && v36)
        MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
      if (v25 == v38)
      {
LABEL_193:
        if (v102 >= 0x41 && v101)
          MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
        if (v100 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        return 0;
      }
      v39 = *(unsigned __int8 *)(v26 + 16);
      if (v39 == 54)
        break;
LABEL_82:
      if (v39 == 55)
      {
        v49 = *(_DWORD *)(v26 + 20);
        if ((v49 & 0x40000000) != 0)
          v50 = *(uint64_t **)(v26 - 8);
        else
          v50 = (uint64_t *)(v26 - 32 * (v49 & 0x7FFFFFF));
        v51 = *v50;
        v52 = *((_QWORD *)this + 10);
        if (!v52 || !*(_QWORD *)(v52 + 40))
        {
          if (!v51 || *(unsigned __int8 *)(v51 + 16) < 0x1Cu || (v52 = v51, !*(_QWORD *)(v51 + 40)))
            v52 = 0;
        }
        v53 = *(_QWORD *)this;
        v54 = *((_QWORD *)this + 3);
        v104 = (void *)*((_QWORD *)this + 2);
        v105 = v53;
        v106 = v52;
        v107 = v54;
        v108 = 0;
        v109 = 1;
        v55 = v88 - sub_1C4F85990((llvm::Constant *)v51, 0, (uint64_t)&v104);
        if (v38 <= v55)
          v38 = v55;
      }
      if (v38 >= v25)
        goto LABEL_193;
      v2[3] = v38;
      if (v102 >= 0x41 && v101)
        MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
      if (v100 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      v27 = *(unsigned __int8 *)(v26 + 16);
LABEL_94:
      if (v27 == 50 || v27 == 47)
      {
        v56 = *(_DWORD *)(v26 + 20);
        if ((v56 & 0x40000000) != 0)
        {
          v58 = *(uint64_t **)(v26 - 8);
          v57 = v56 & 0x7FFFFFF;
        }
        else
        {
          v57 = v56 & 0x7FFFFFF;
          v58 = (uint64_t *)(v26 - 32 * v57);
        }
        v59 = 0;
        if (v57)
        {
          v60 = &v58[4 * v57];
          while (1)
          {
            v61 = *v58;
            v62 = *((_QWORD *)this + 10);
            if (!v62 || !*(_QWORD *)(v62 + 40))
            {
              v68 = v61 && *(unsigned __int8 *)(v61 + 16) >= 0x1Cu;
              if (!v68 || (v62 = *v58, !*(_QWORD *)(v61 + 40)))
                v62 = 0;
            }
            v63 = *(_QWORD *)this;
            v64 = *((_QWORD *)this + 3);
            v104 = (void *)*((_QWORD *)this + 2);
            v105 = v63;
            v106 = v62;
            v107 = v64;
            v108 = 0;
            v109 = 1;
            sub_1C4F83784(v61, 0, (uint64_t *)&v104, &__src);
            LODWORD(v105) = v100;
            if (v100 <= 0x40)
              break;
            __n = (((unint64_t)v100 + 63) >> 3) & 0x3FFFFFF8;
            v104 = (void *)operator new[]();
            memcpy(v104, __src, __n);
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&v104);
            v66 = (unint64_t)v104;
            if (v105 <= 0x40)
              goto LABEL_108;
            v69 = 0;
            v70 = ((unint64_t)v105 + 63) >> 6;
            do
            {
              v71 = v70-- < 1;
              if (v71)
                break;
              v72 = *((_QWORD *)v104 + v70);
              v69 += __clz(v72);
            }
            while (!v72);
            v73 = v105 | 0xFFFFFFC0;
            if ((v105 & 0x3F) == 0)
              v73 = 0;
            if ((int)v105 - v69 - v73 > v59)
              v59 = v105 - v69 - v73;
            if (v104)
              MEMORY[0x1CAA32F9C](v104, 0x1000C8000313F17);
LABEL_110:
            if (v102 >= 0x41 && v101)
              MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
            if (v100 >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            if (v59 >= v25)
              return 0;
            v58 += 4;
            if (v58 == v60)
              goto LABEL_137;
          }
          if (v100)
            v65 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v100;
          else
            v65 = 0;
          v66 = v65 & ~(unint64_t)__src;
LABEL_108:
          v67 = 64 - __clz(v66);
          if (v67 > v59)
            v59 = v67;
          goto LABEL_110;
        }
LABEL_137:
        v2[3] = v59;
      }
      v2 += 6;
      if (v2 == v3)
        goto LABEL_187;
    }
    v40 = *(_DWORD *)(v26 + 20);
    if ((v40 & 0x40000000) != 0)
      v41 = *(uint64_t **)(v26 - 8);
    else
      v41 = (uint64_t *)(v26 - 32 * (v40 & 0x7FFFFFF));
    v42 = *v41;
    v43 = *((_QWORD *)this + 10);
    if (!v43 || !*(_QWORD *)(v43 + 40))
    {
      if (!v42 || *(unsigned __int8 *)(v42 + 16) < 0x1Cu || (v43 = v42, !*(_QWORD *)(v42 + 40)))
        v43 = 0;
    }
    v44 = *(_QWORD *)this;
    v45 = *((_QWORD *)this + 3);
    v104 = (void *)*((_QWORD *)this + 2);
    v105 = v44;
    v106 = v43;
    v107 = v45;
    v108 = 0;
    v109 = 1;
    sub_1C4F83784(v42, 0, (uint64_t *)&v104, &v91);
    LODWORD(v105) = v92;
    if (v92 > 0x40)
    {
      v77 = (((unint64_t)v92 + 63) >> 3) & 0x3FFFFFF8;
      v104 = (void *)operator new[]();
      memcpy(v104, v91, v77);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v104);
      v47 = (unint64_t)v104;
      if (v105 > 0x40)
      {
        v78 = 0;
        v79 = ((unint64_t)v105 + 63) >> 6;
        do
        {
          v71 = v79-- < 1;
          if (v71)
            break;
          v80 = *((_QWORD *)v104 + v79);
          v78 += __clz(v80);
        }
        while (!v80);
        v81 = v105 | 0xFFFFFFC0;
        if ((v105 & 0x3F) == 0)
          v81 = 0;
        if ((int)v105 - v78 - v81 > v38)
          v38 = v105 - v78 - v81;
        if (v104)
          MEMORY[0x1CAA32F9C](v104, 0x1000C8000313F17);
        goto LABEL_79;
      }
    }
    else
    {
      if (v92)
        v46 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v92;
      else
        v46 = 0;
      v47 = v46 & ~(unint64_t)v91;
    }
    v48 = 64 - __clz(v47);
    if (v48 > v38)
      v38 = v48;
LABEL_79:
    if (v94 >= 0x41 && v93)
      MEMORY[0x1CAA32F9C](v93, 0x1000C8000313F17);
    if (v92 >= 0x41 && v91)
      MEMORY[0x1CAA32F9C](v91, 0x1000C8000313F17);
    v39 = *(unsigned __int8 *)(v26 + 16);
    goto LABEL_82;
  }
LABEL_187:
  MinBitWidth = llvm::TruncInstCombine::getMinBitWidth(this);
  if (MinBitWidth >= v25 || (_DWORD)v18 && (_DWORD)v18 != MinBitWidth)
    return 0;
  v83 = (_QWORD *)***((_QWORD ***)this + 10);
  LODWORD(v104) = MinBitWidth;
  if (MinBitWidth <= 63)
  {
    if (MinBitWidth <= 31)
    {
      switch(MinBitWidth)
      {
        case 16:
          return (_QWORD *)(*v83 + 1936);
        case 8:
          return (_QWORD *)(*v83 + 1912);
        case 1:
          return (_QWORD *)(*v83 + 1888);
      }
    }
    else if (MinBitWidth == 32)
    {
      return (_QWORD *)(*v83 + 1960);
    }
  }
  else
  {
    if (MinBitWidth == 64)
      return (_QWORD *)(*v83 + 1984);
    if (MinBitWidth == 128)
      return (_QWORD *)(*v83 + 2008);
  }
  v85 = sub_1C5270984(*v83 + 2168, &v104);
  result = (_QWORD *)*((_QWORD *)v85 + 1);
  if (!result)
  {
    result = (_QWORD *)sub_1C484358C(*v83 + 2040, 24, 3);
    v86 = (int)v104;
    *result = v83;
    result[2] = 0;
    result[1] = (v86 << 8) | 0xDu;
    *((_QWORD *)v85 + 1) = result;
  }
  return result;
}

llvm::UndefValue *llvm::TruncInstCombine::getReducedOperand(llvm::TruncInstCombine *this, llvm::Value *a2, uint64_t **a3)
{
  int v5;
  BOOL v6;
  llvm::Type *v7;
  llvm::Type *v8;
  uint64_t IntegerCast;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if (*(_QWORD *)a2)
    v6 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
  else
    v6 = 0;
  if (v6)
  {
    v7 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)a2 + 32);
    if (v5 == 19)
      llvm::ScalableVectorType::get(a3, v7);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)a3, v7);
    a3 = (uint64_t **)v8;
  }
  if (*((unsigned __int8 *)a2 + 16) > 0x14u)
  {
    sub_1C6176DB8((uint64_t)this + 88, (uint64_t)a2);
    return (llvm::UndefValue *)v11;
  }
  else
  {
    IntegerCast = llvm::ConstantExpr::getIntegerCast(a2, (llvm::Type ***)a3, 0);
    return llvm::ConstantFoldConstant(IntegerCast, *((llvm::Type **)this + 2), *((_QWORD *)this + 1));
  }
}

void llvm::TruncInstCombine::ReduceExpressionGraph(llvm::TruncInstCombine *this, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  llvm::Value *v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  llvm::Type *v11;
  llvm::Type *v12;
  llvm::Type *v13;
  int v14;
  llvm::Value *v15;
  uint64_t v16;
  llvm::Value **v17;
  int v18;
  llvm::Value **v19;
  llvm::UndefValue *ReducedOperand;
  int v21;
  llvm::Value **v22;
  llvm::UndefValue *v23;
  unsigned __int8 *v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  BOOL v30;
  llvm::Type *v31;
  llvm::Type *v32;
  llvm::Type *v33;
  int v34;
  unsigned __int8 **v35;
  unsigned __int8 *v36;
  llvm::Value **v37;
  uint64_t v38;
  char *v39;
  llvm::Value **v40;
  uint64_t v41;
  BOOL v43;
  int v44;
  int v45;
  llvm::Value **v46;
  int v47;
  llvm::Value **v48;
  int v49;
  llvm::Value **v50;
  llvm::UndefValue *v51;
  int v52;
  llvm::Value **v53;
  llvm::UndefValue *v54;
  int v55;
  char *v56;
  uint64_t v57;
  llvm::Value *Select;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  llvm::Value **v62;
  llvm::UndefValue *v63;
  llvm::UndefValue *v64;
  int v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  llvm::PHINode *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  llvm::UndefValue *v80;
  uint64_t v81;
  uint64_t v82;
  llvm::ValueAsMetadata *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  llvm::Type *v90;
  llvm::PoisonValue ***v91;
  llvm::PoisonValue ***v92;
  llvm::PoisonValue **v93;
  llvm::Value *v94;
  _QWORD *v95;
  _QWORD *v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  int v103;
  int v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  llvm::PoisonValue *v117;
  llvm::PoisonValue *v118;
  uint64_t i;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  char *v125;
  char *v126;
  _BYTE v127[32];
  __int16 v128;
  void *v129[2];
  _BYTE v130[120];
  char *v131;
  uint64_t v132;
  _QWORD v133[6];

  v133[4] = *MEMORY[0x1E0C80C00];
  v131 = (char *)v133;
  v132 = 0x200000000;
  v4 = (uint64_t *)*((_QWORD *)this + 14);
  v5 = (uint64_t *)*((_QWORD *)this + 15);
  if (v4 == v5)
    goto LABEL_114;
  v125 = (char *)this + 48;
  v126 = (char *)this + 32;
  do
  {
    v6 = (llvm::Value *)*v4;
    v7 = (void *)sub_1C4773D54((uint64_t)v129, *v4, 0, 0, 0);
    v8 = *((unsigned __int8 *)v6 + 16);
    v9 = v8 - 28;
    if (v8 <= 0x34 || v8 - 53 < 6)
    {
      v18 = *((_DWORD *)v6 + 5);
      if ((v18 & 0x40000000) != 0)
        v19 = (llvm::Value **)*((_QWORD *)v6 - 1);
      else
        v19 = (llvm::Value **)((char *)v6 - 32 * (v18 & 0x7FFFFFF));
      ReducedOperand = llvm::TruncInstCombine::getReducedOperand(this, *v19, a2);
      v21 = *((_DWORD *)v6 + 5);
      if ((v21 & 0x40000000) != 0)
        v22 = (llvm::Value **)*((_QWORD *)v6 - 1);
      else
        v22 = (llvm::Value **)((char *)v6 - 32 * (v21 & 0x7FFFFFF));
      v23 = llvm::TruncInstCombine::getReducedOperand(this, v22[4], a2);
      v128 = 257;
      v24 = sub_1C4773860((uint64_t)v129, v9, ReducedOperand, (uint64_t)v23, (uint64_t)v127, 0);
      v15 = (llvm::Value *)v24;
      v25 = *((unsigned __int8 *)v6 + 16);
      v26 = v25 > 0x37;
      v27 = (1 << v25) & 0xC1800000000000;
      if (!v26 && v27 != 0 && v24[16] >= 0x1Cu && v24 != 0)
        v24[17] = v24[17] & 0xFD | *((_BYTE *)v6 + 17) & 2;
    }
    else
    {
      switch(*((_BYTE *)v6 + 16))
      {
        case 'S':
          if (*(_QWORD *)v6)
            v10 = (*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 18;
          else
            v10 = 0;
          v11 = (llvm::Type *)a2;
          if (v10)
          {
            v12 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v6 + 32);
            if (*(_DWORD *)(*(_QWORD *)v6 + 8) == 19)
              llvm::ScalableVectorType::get(a2, v12);
            else
              llvm::FixedVectorType::get((llvm::FixedVectorType *)a2, v12);
            v11 = v13;
          }
          v14 = *((_DWORD *)v6 + 5) & 0x7FFFFFF;
          v128 = 257;
          v15 = (llvm::Value *)sub_1C4867E94((uint64_t)v129, (uint64_t)v11, v14, (uint64_t)v127);
          v16 = v132;
          if (v132 >= (unint64_t)HIDWORD(v132))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v131, (uint64_t)v133, v132 + 1, 16);
            v16 = v132;
          }
          v17 = (llvm::Value **)&v131[16 * v16];
          *v17 = v6;
          v17[1] = v15;
          LODWORD(v132) = v132 + 1;
          goto LABEL_91;
        case 'T':
        case 'V':
        case 'W':
        case 'X':
          __break(1u);
          goto LABEL_164;
        case 'U':
          v47 = *((_DWORD *)v6 + 5);
          if ((v47 & 0x40000000) != 0)
            v48 = (llvm::Value **)*((_QWORD *)v6 - 1);
          else
            v48 = (llvm::Value **)((char *)v6 - 32 * (v47 & 0x7FFFFFF));
          v59 = (uint64_t)*v48;
          v60 = (uint64_t *)llvm::TruncInstCombine::getReducedOperand(this, v48[4], a2);
          v61 = *((_DWORD *)v6 + 5);
          if ((v61 & 0x40000000) != 0)
            v62 = (llvm::Value **)*((_QWORD *)v6 - 1);
          else
            v62 = (llvm::Value **)((char *)v6 - 32 * (v61 & 0x7FFFFFF));
          v63 = llvm::TruncInstCombine::getReducedOperand(this, v62[8], a2);
          v128 = 257;
          Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)v129, v59, v60, (uint64_t)v63, (uint64_t)v127, 0);
          goto LABEL_90;
        case 'Y':
          v49 = *((_DWORD *)v6 + 5);
          if ((v49 & 0x40000000) != 0)
            v50 = (llvm::Value **)*((_QWORD *)v6 - 1);
          else
            v50 = (llvm::Value **)((char *)v6 - 32 * (v49 & 0x7FFFFFF));
          v64 = llvm::TruncInstCombine::getReducedOperand(this, *v50, a2);
          v65 = *((_DWORD *)v6 + 5);
          if ((v65 & 0x40000000) != 0)
            v66 = (char *)*((_QWORD *)v6 - 1);
          else
            v66 = (char *)v6 - 32 * (v65 & 0x7FFFFFF);
          v67 = *((_QWORD *)v66 + 4);
          v128 = 257;
          Select = (llvm::Value *)sub_1C4772EE0((uint64_t *)v129, (uint64_t)v64, v67, (uint64_t)v127);
          goto LABEL_90;
        case 'Z':
          v45 = *((_DWORD *)v6 + 5);
          if ((v45 & 0x40000000) != 0)
            v46 = (llvm::Value **)*((_QWORD *)v6 - 1);
          else
            v46 = (llvm::Value **)((char *)v6 - 32 * (v45 & 0x7FFFFFF));
          v51 = llvm::TruncInstCombine::getReducedOperand(this, *v46, a2);
          v52 = *((_DWORD *)v6 + 5);
          if ((v52 & 0x40000000) != 0)
            v53 = (llvm::Value **)*((_QWORD *)v6 - 1);
          else
            v53 = (llvm::Value **)((char *)v6 - 32 * (v52 & 0x7FFFFFF));
          v54 = llvm::TruncInstCombine::getReducedOperand(this, v53[4], a2);
          v55 = *((_DWORD *)v6 + 5);
          if ((v55 & 0x40000000) != 0)
            v56 = (char *)*((_QWORD *)v6 - 1);
          else
            v56 = (char *)v6 - 32 * (v55 & 0x7FFFFFF);
          v57 = *((_QWORD *)v56 + 8);
          v128 = 257;
          Select = (llvm::Value *)sub_1C4773154((uint64_t *)v129, (uint64_t)v51, (uint64_t)v54, v57, (uint64_t)v127);
LABEL_90:
          v15 = Select;
          goto LABEL_91;
        default:
          if (*(_QWORD *)v6)
            v30 = (*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 18;
          else
            v30 = 0;
          v31 = (llvm::Type *)a2;
          if (v30)
          {
            v32 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v6 + 32);
            if (*(_DWORD *)(*(_QWORD *)v6 + 8) == 19)
              llvm::ScalableVectorType::get(a2, v32);
            else
              llvm::FixedVectorType::get((llvm::FixedVectorType *)a2, v32);
            v31 = v33;
          }
          v34 = *((_DWORD *)v6 + 5);
          if ((v34 & 0x40000000) != 0)
            v35 = (unsigned __int8 **)*((_QWORD *)v6 - 1);
          else
            v35 = (unsigned __int8 **)((char *)v6 - 32 * (v34 & 0x7FFFFFF));
          v36 = *v35;
          if (*(llvm::Type **)*v35 == v31)
          {
            v4[2] = (uint64_t)v36;
            goto LABEL_94;
          }
          v128 = 257;
          v15 = (llvm::Value *)sub_1C4D8D514((uint64_t *)v129, v36, (uint64_t)v31, v9 == 40, (uint64_t)v127);
          v37 = (llvm::Value **)*((_QWORD *)this + 4);
          v38 = *((unsigned int *)this + 10);
          v39 = (char *)&v37[v38];
          v40 = v37;
          if (!(_DWORD)v38)
            goto LABEL_49;
          v41 = 8 * v38;
          v40 = (llvm::Value **)*((_QWORD *)this + 4);
          break;
      }
      while (*v40 != v6)
      {
        ++v40;
        v41 -= 8;
        if (!v41)
        {
          v40 = &v37[v38];
          break;
        }
      }
LABEL_49:
      v43 = *((_BYTE *)v15 + 16) != 66 || v15 == 0;
      if (v38 == v40 - v37)
      {
        if (v43)
          goto LABEL_91;
        if (v38 >= *((_DWORD *)this + 11))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v126, (uint64_t)v125, v38 + 1, 8);
          v37 = (llvm::Value **)*((_QWORD *)this + 4);
          v38 = *((unsigned int *)this + 10);
        }
        v37[v38] = v15;
        v44 = *((_DWORD *)this + 10) + 1;
      }
      else
      {
        if (!v43)
        {
          *v40 = v15;
          goto LABEL_91;
        }
        if (v39 != (char *)(v40 + 1))
        {
          memmove(v40, v40 + 1, v39 - (char *)(v40 + 1));
          LODWORD(v38) = *((_DWORD *)this + 10);
        }
        v44 = v38 - 1;
      }
      *((_DWORD *)this + 10) = v44;
    }
LABEL_91:
    v4[2] = (uint64_t)v15;
    if (v15 && *((unsigned __int8 *)v15 + 16) >= 0x1Cu)
      llvm::Value::takeName(v15, v6);
LABEL_94:
    if (v129[0] != v130)
      free(v129[0]);
    v4 += 3;
  }
  while (v4 != v5);
  if ((_DWORD)v132)
  {
    v68 = v131;
    v69 = &v131[16 * v132];
    do
    {
      v70 = *(_QWORD *)v68;
      v71 = *(_DWORD *)(*(_QWORD *)v68 + 20);
      if ((v71 & 0x40000000) != 0)
      {
        v73 = *(_QWORD *)(v70 - 8);
        v72 = v71 & 0x7FFFFFF;
        v74 = v73 + 32 * v72;
      }
      else
      {
        v72 = v71 & 0x7FFFFFF;
        v73 = v70 - 32 * v72;
        v74 = *(_QWORD *)v68;
      }
      if (v73 != v74 && v72 != 0)
      {
        v76 = (llvm::PHINode *)*((_QWORD *)v68 + 1);
        v77 = (uint64_t *)(v73 + 32 * *(unsigned int *)(v70 + 60));
        v78 = 8 * v72 - 8;
        v79 = v73 + 32;
        do
        {
          v80 = llvm::TruncInstCombine::getReducedOperand(this, *(llvm::Value **)(v79 - 32), a2);
          v81 = *v77++;
          sub_1C477667C(v76, (uint64_t)v80, v81);
          if (v79 == v74)
            break;
          v82 = v78;
          v78 -= 8;
          v79 += 32;
        }
        while (v82);
      }
      v68 += 16;
    }
    while (v68 != v69);
  }
LABEL_114:
  a2 = (uint64_t **)llvm::TruncInstCombine::getReducedOperand(this, *(llvm::Value **)(*((_QWORD *)this + 10) - 32), a2);
  v83 = (llvm::ValueAsMetadata *)*((_QWORD *)this + 10);
  v84 = *(_QWORD *)v83;
  if (*a2 != *(uint64_t **)v83)
  {
    sub_1C4773D54((uint64_t)v129, (uint64_t)v83, 0, 0, 0);
    v128 = 257;
    v85 = sub_1C4D8D514((uint64_t *)v129, (unsigned __int8 *)a2, v84, 0, (uint64_t)v127);
    a2 = (uint64_t **)v85;
    if (v85)
      v86 = v85[16] >= 0x1Cu;
    else
      v86 = 0;
    if (v86)
      llvm::Value::takeName((llvm::Value *)v85, *((llvm::Value **)this + 10));
    v7 = v129[0];
    if (v129[0] != v130)
LABEL_164:
      free(v7);
    v83 = (llvm::ValueAsMetadata *)*((_QWORD *)this + 10);
  }
  llvm::Value::doRAUW(v83, (llvm::Value *)a2, (llvm::Value *)1);
  v87 = *((_QWORD *)this + 10);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v87 + 40) + 40, (uint64_t ***)v87);
  v88 = *(_QWORD *)(v87 + 24);
  v89 = *(_QWORD **)(v87 + 32);
  *v89 = v88;
  *(_QWORD *)(v88 + 8) = v89;
  *(_QWORD *)(v87 + 24) = 0;
  *(_QWORD *)(v87 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v87);
  if ((_DWORD)v132)
  {
    v91 = (llvm::PoisonValue ***)v131;
    v92 = (llvm::PoisonValue ***)&v131[16 * v132];
    do
    {
      v93 = *v91;
      v94 = (llvm::Value *)llvm::PoisonValue::get(**v91, v90);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v93, v94, (llvm::Value *)1);
      v95 = (_QWORD *)sub_1C61770D4((uint64_t)this + 88, (uint64_t)v93);
      v96 = (_QWORD *)*((_QWORD *)this + 15);
      if (v96 != v95)
      {
        v97 = *((_DWORD *)this + 26);
        if (v97)
        {
          v98 = *((_QWORD *)this + 11);
          v99 = v97 - 1;
          LODWORD(v100) = ((*v95 >> 4) ^ (*v95 >> 9)) & (v97 - 1);
          v101 = (uint64_t *)(v98 + 16 * v100);
          v102 = *v101;
          if (*v95 == *v101)
          {
LABEL_132:
            *v101 = -8192;
            *((int32x2_t *)this + 12) = vadd_s32(*(int32x2_t *)((char *)this + 96), (int32x2_t)0x1FFFFFFFFLL);
            v96 = (_QWORD *)*((_QWORD *)this + 15);
          }
          else
          {
            v103 = 1;
            while (v102 != -4096)
            {
              v104 = v100 + v103++;
              v100 = v104 & v99;
              v102 = *(_QWORD *)(v98 + 16 * v100);
              if (*v95 == v102)
              {
                v101 = (uint64_t *)(v98 + 16 * v100);
                goto LABEL_132;
              }
            }
          }
        }
        v105 = v95 + 3;
        if (v95 + 3 == v96)
        {
          *((_QWORD *)this + 15) = v95;
        }
        else
        {
          v106 = 0;
          do
          {
            v107 = &v105[v106];
            *(v107 - 3) = v105[v106];
            *((_OWORD *)v107 - 1) = *(_OWORD *)&v105[v106 + 1];
            v106 += 3;
          }
          while (v107 + 3 != v96);
          *((_QWORD *)this + 15) = &v95[v106];
          if (v106 * 8)
          {
            v108 = *((_QWORD *)this + 11);
            v109 = *((unsigned int *)this + 26);
            v110 = v108 + 16 * v109;
            if (*((_DWORD *)this + 24))
            {
              if (*((_DWORD *)this + 26))
              {
                v111 = 16 * v109;
                v112 = *((_QWORD *)this + 11);
                while ((*(_QWORD *)v112 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v112 += 16;
                  v111 -= 16;
                  if (!v111)
                    goto LABEL_142;
                }
              }
              else
              {
                v112 = *((_QWORD *)this + 11);
              }
            }
            else
            {
LABEL_142:
              v112 = v108 + 16 * v109;
            }
            v113 = v108 + 16 * v109;
            if (v112 != v113)
            {
              v114 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v95 - *((_QWORD *)this + 14)) >> 3);
              do
              {
                v115 = *(unsigned int *)(v112 + 8);
                if (v114 < v115)
                  *(_DWORD *)(v112 + 8) = v115 - 1;
                v116 = v112 + 16;
                v112 = v110;
                if (v116 != v110)
                {
                  v112 = v116;
                  while ((*(_QWORD *)v112 | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v112 += 16;
                    if (v112 == v110)
                    {
                      v112 = v110;
                      break;
                    }
                  }
                }
              }
              while (v112 != v113);
            }
          }
        }
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)v93[5] + 40, (uint64_t ***)v93);
      v117 = v93[3];
      v118 = v93[4];
      *(_QWORD *)v118 = v117;
      *((_QWORD *)v117 + 1) = v118;
      v93[3] = 0;
      v93[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v93);
      v91 += 2;
    }
    while (v91 != v92);
  }
  v120 = *((_QWORD *)this + 14);
  for (i = *((_QWORD *)this + 15); i != v120; i -= 24)
  {
    v122 = *(_QWORD *)(i - 24);
    v121 = v122;
    if (!*(_QWORD *)(v122 + 8))
    {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v121 + 40) + 40, (uint64_t ***)v121);
      v123 = *(_QWORD *)(v121 + 24);
      v124 = *(_QWORD **)(v121 + 32);
      *v124 = v123;
      *(_QWORD *)(v123 + 8) = v124;
      *(_QWORD *)(v121 + 24) = 0;
      *(_QWORD *)(v121 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v121);
    }
  }
  if (v131 != (char *)v133)
    free(v131);
}

unsigned __int8 *sub_1C4D8D514(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 **v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 **v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25[4];
  __int16 v26;
  unsigned __int8 *v27;

  v5 = a2;
  if (*(_QWORD *)a2 == a3)
    return v5;
  if (a2[16] <= 0x14u)
  {
    v5 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)a1[9] + 248))(a1[9], a2);
    if (v5)
      v16 = v5[16] >= 0x1Cu;
    else
      v16 = 0;
    if (!v16)
      return v5;
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v5, a5, a1[6], a1[7]);
    v17 = *((unsigned int *)a1 + 2);
    if (!(_DWORD)v17)
      return v5;
    v19 = *a1;
    v20 = *a1 + 16 * v17;
    v21 = (unsigned __int8 **)(v5 + 48);
    while (1)
    {
      v22 = *(_DWORD *)v19;
      v23 = *(unsigned __int8 **)(v19 + 8);
      if (v23)
      {
        if (!v22)
        {
          v25[0] = *(unsigned __int8 **)(v19 + 8);
          llvm::MetadataTracking::track((uint64_t)v25, v23, 2);
LABEL_40:
          if (v25 == v21)
          {
            if (v25[0])
              llvm::MetadataTracking::untrack((uint64_t)v25, v25[0]);
          }
          else
          {
            if (*v21)
              llvm::MetadataTracking::untrack((uint64_t)(v5 + 48), *v21);
            v24 = v25[0];
            *v21 = v25[0];
            if (v24)
              llvm::MetadataTracking::retrack((uint64_t)v25, v24, (uint64_t)(v5 + 48));
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (!*v21 && (v5[23] & 0x20) == 0)
          goto LABEL_37;
        if (!v22)
        {
          v25[0] = 0;
          goto LABEL_40;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v5, v22, (llvm::MDNode *)v23);
LABEL_37:
      v19 += 16;
      if (v19 == v20)
        return v5;
    }
  }
  v26 = 257;
  llvm::CastInst::CreateIntegerCast((uint64_t *)a2, a3, a4);
  v5 = v8;
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v8, a5, a1[6], a1[7]);
  v9 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v9)
  {
    v10 = *a1;
    v11 = *a1 + 16 * v9;
    v12 = (unsigned __int8 **)(v5 + 48);
    do
    {
      v13 = *(_DWORD *)v10;
      v14 = *(unsigned __int8 **)(v10 + 8);
      if (v14)
      {
        if (!v13)
        {
          v27 = *(unsigned __int8 **)(v10 + 8);
          llvm::MetadataTracking::track((uint64_t)&v27, v14, 2);
LABEL_15:
          if (&v27 == v12)
          {
            if (v27)
              llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
          }
          else
          {
            if (*v12)
              llvm::MetadataTracking::untrack((uint64_t)(v5 + 48), *v12);
            v15 = v27;
            *v12 = v27;
            if (v15)
              llvm::MetadataTracking::retrack((uint64_t)&v27, v15, (uint64_t)(v5 + 48));
          }
          goto LABEL_12;
        }
      }
      else
      {
        if (!*v12 && (v5[23] & 0x20) == 0)
          goto LABEL_12;
        if (!v13)
        {
          v27 = 0;
          goto LABEL_15;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v5, v13, (llvm::MDNode *)v14);
LABEL_12:
      v10 += 16;
    }
    while (v10 != v11);
  }
  return v5;
}

uint64_t llvm::TruncInstCombine::run(llvm::TruncInstCombine *this, llvm::Function *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  uint64_t **BestTruncatedType;

  v3 = (char *)a2 + 72;
  v4 = (char *)*((_QWORD *)a2 + 10);
  if (v4 != (char *)a2 + 72)
  {
    do
    {
      if (v4)
        v5 = (uint64_t)(v4 - 24);
      else
        v5 = 0;
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(*((_QWORD *)this + 3), v5))
      {
        v6 = v5 + 40;
        for (i = *(_QWORD *)(v5 + 48); i != v6; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v8 = i - 24;
          else
            v8 = 0;
          if (i && *(_BYTE *)(v8 + 16) == 66)
          {
            v9 = *((unsigned int *)this + 10);
            if (v9 >= *((unsigned int *)this + 11))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 32, (uint64_t)this + 48, v9 + 1, 8);
              v9 = *((unsigned int *)this + 10);
            }
            *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v9) = v8;
            ++*((_DWORD *)this + 10);
          }
        }
      }
      v4 = (char *)*((_QWORD *)v4 + 1);
    }
    while (v4 != v3);
  }
  v10 = *((_DWORD *)this + 10);
  if (v10)
  {
    v11 = 0;
    do
    {
      v12 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v10 - 8);
      *((_DWORD *)this + 10) = v10 - 1;
      *((_QWORD *)this + 10) = v12;
      BestTruncatedType = (uint64_t **)llvm::TruncInstCombine::getBestTruncatedType(this);
      if (BestTruncatedType)
      {
        llvm::TruncInstCombine::ReduceExpressionGraph(this, BestTruncatedType);
        v11 = 1;
      }
      v10 = *((_DWORD *)this + 10);
    }
    while (v10);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

_DWORD *sub_1C4D8D8A8(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C476B2A4(result);
    }
  }
  return result;
}

_QWORD *sub_1C4D8D8F4(_DWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v18;
  _QWORD *v19;

  v4 = a1[2];
  v5 = a1[4];
  if (4 * v4 + 4 >= 3 * v5)
  {
    v18 = (uint64_t)a1;
    sub_1C4D8DA28((uint64_t)a1, 2 * v5);
    v19 = 0;
    sub_1C47AD1C0(v18, a3, &v19);
    a1 = (_DWORD *)v18;
    a4 = v19;
    goto LABEL_3;
  }
  if (v5 + ~v4 - a1[3] > v5 >> 3)
  {
LABEL_3:
    v6 = *a4;
    goto LABEL_4;
  }
  v8 = a1;
  sub_1C4D8DA28((uint64_t)a1, v5);
  a1 = v8;
  v6 = *a3;
  v10 = v8[4] - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)v8 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)v8 + 16 * v11);
      v12 = *a4;
      if (v6 == *a4)
        goto LABEL_4;
    }
    if (v13)
      a4 = v13;
    goto LABEL_3;
  }
LABEL_4:
  ++a1[2];
  if (v6 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_1C4D8DA28(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4D8DAE0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4D8DAE0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v6 = *a2;
    if (*a2 != -4096 && v6 != -8192)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      v9 = *(_QWORD *)result + 16 * v8;
      v10 = *(_QWORD *)v9;
      if (v6 != *(_QWORD *)v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -4096)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -8192;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = *(_QWORD *)result + 16 * (v14 & v7);
          v10 = *(_QWORD *)v9;
          if (v6 == *(_QWORD *)v9)
            goto LABEL_21;
        }
        if (v11)
          v9 = v11;
      }
LABEL_21:
      *(_QWORD *)v9 = v6;
      *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 + 2);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

char *sub_1C4D8DBBC(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  v11 = v10 + 24;
  if (v2 != v3)
  {
    do
    {
      v12 = *(_OWORD *)(v2 - 24);
      *((_QWORD *)v10 - 1) = *((_QWORD *)v2 - 1);
      *(_OWORD *)(v10 - 24) = v12;
      v10 -= 24;
      v2 -= 24;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = &v9[24 * v8];
  if (v2)
    operator delete(v2);
  return v11;
}

_QWORD *llvm::AAResults::AAResults(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  a1[6] = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v3 = (uint64_t *)a1[1];
  v4 = (uint64_t *)a1[2];
  while (v3 != v4)
  {
    v5 = *v3++;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v5 + 16))(v5, a1);
  }
  return a1;
}

void llvm::AAResults::~AAResults(llvm::AAResults *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 8);
  sub_1C4764BBC(&v3);
}

{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 8);
  sub_1C4764BBC(&v3);
}

uint64_t llvm::AAResults::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  BOOL v15;

  v8 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::AAManager::Key);
  v9 = *(_QWORD *)(a3 + 56);
  if (v9 == *(_QWORD *)(a3 + 48))
    v10 = (unsigned int *)(a3 + 68);
  else
    v10 = (unsigned int *)(a3 + 64);
  if (v8 != (_QWORD *)(v9 + 8 * *v10))
    return 1;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  if (v11 == v12)
    return 0;
  v13 = v11 + 8;
  do
  {
    result = llvm::AnalysisManager<llvm::Function>::Invalidator::invalidate(a4, *(_QWORD *)(v13 - 8), a2, a3);
    if ((result & 1) != 0)
      break;
    v15 = v13 == v12;
    v13 += 8;
  }
  while (!v15);
  return result;
}

uint64_t llvm::AAResults::alias(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  _QWORD v16[41];
  void **v17;
  int v18;
  int v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[128];
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v16[0] = 1;
  v5 = 1;
  do
  {
    v6 = &v16[v5];
    *(_OWORD *)v6 = xmmword_1C85F2120;
    *((_OWORD *)v6 + 1) = xmmword_1C85F2120;
    v5 += 5;
  }
  while (v6 + 5 != &v17);
  v17 = &v23;
  v19 = 0;
  v20 = v22;
  v21 = 0x400000000;
  v23 = &unk_1E8134870;
  v24 = 1;
  for (i = 63; i != 79; i += 2)
    v16[i] = -4096;
  v8 = 1;
  v18 = 1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  if (v9 == v10)
  {
    v14 = 0;
  }
  else
  {
    v11 = v9 + 8;
    do
    {
      v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD *))(**(_QWORD **)(v11 - 8) + 24))(*(_QWORD *)(v11 - 8), a2, a3, v16);
      v13 = v12 != 1 || v11 == v10;
      v11 += 8;
    }
    while (!v13);
    v8 = v12;
    v14 = v18 - 1;
  }
  v18 = v14;
  if ((v24 & 1) == 0)
    MEMORY[0x1CAA32FB4](v25, 8);
  if (v20 != v22)
    free(v20);
  if ((v16[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v16[1], 8);
  return v8;
}

uint64_t llvm::AAResults::alias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t result;
  BOOL v12;

  v5 = *(_DWORD *)(a4 + 336);
  *(_DWORD *)(a4 + 336) = v5 + 1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  if (v6 == v7)
  {
    result = 1;
  }
  else
  {
    v10 = v6 + 8;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v10 - 8) + 24))(*(_QWORD *)(v10 - 8), a2, a3, a4);
      v12 = result != 1 || v10 == v7;
      v10 += 8;
    }
    while (!v12);
    v5 = *(_DWORD *)(a4 + 336) - 1;
  }
  *(_DWORD *)(a4 + 336) = v5;
  return result;
}

uint64_t llvm::AAResults::pointsToConstantMemory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD v14[41];
  _QWORD v15[2];
  void *v16;
  uint64_t v17;
  _BYTE v18[128];
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v14[0] = 1;
  v5 = 1;
  do
  {
    v6 = &v14[v5];
    *(_OWORD *)v6 = xmmword_1C85F2120;
    *((_OWORD *)v6 + 1) = xmmword_1C85F2120;
    v5 += 5;
  }
  while (v6 + 5 != v15);
  v15[0] = &v19;
  v15[1] = 0;
  v16 = v18;
  v17 = 0x400000000;
  v19 = &unk_1E8134870;
  v20 = 1;
  for (i = 63; i != 79; i += 2)
    v14[i] = -4096;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v8 == v9)
  {
    v11 = 0;
  }
  else
  {
    v10 = v8 + 8;
    do
    {
      v11 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(v10 - 8) + 32))(*(_QWORD *)(v10 - 8), a2, v14, a3);
      if ((v11 & 1) != 0)
        break;
      v12 = v10 == v9;
      v10 += 8;
    }
    while (!v12);
  }
  if ((v20 & 1) == 0)
    MEMORY[0x1CAA32FB4](v21, 8);
  if (v16 != v18)
    free(v16);
  if ((v14[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v14[1], 8);
  return v11;
}

uint64_t llvm::AAResults::pointsToConstantMemory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t result;
  BOOL v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 == v5)
    return 0;
  v9 = v4 + 8;
  do
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v9 - 8) + 32))(*(_QWORD *)(v9 - 8), a2, a3, a4);
    if ((result & 1) != 0)
      break;
    v11 = v9 == v5;
    v9 += 8;
  }
  while (!v11);
  return result;
}

uint64_t llvm::AAResults::getModRefInfo(llvm::AAResults *this, llvm::Instruction *a2, const llvm::CallBase *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t ModRefInfo;
  _QWORD v8[41];
  _QWORD v9[2];
  void *v10;
  uint64_t v11;
  _BYTE v12[128];
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8[0] = 1;
  v3 = 1;
  do
  {
    v4 = &v8[v3];
    *(_OWORD *)v4 = xmmword_1C85F2120;
    *((_OWORD *)v4 + 1) = xmmword_1C85F2120;
    v3 += 5;
  }
  while (v4 + 5 != v9);
  v9[0] = &v13;
  v9[1] = 0;
  v10 = v12;
  v11 = 0x400000000;
  v13 = &unk_1E8134870;
  v14 = 1;
  for (i = 63; i != 79; i += 2)
    v8[i] = -4096;
  ModRefInfo = llvm::AAResults::getModRefInfo((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)v8);
  if ((v14 & 1) == 0)
    MEMORY[0x1CAA32FB4](v15, 8);
  if (v10 != v12)
    free(v10);
  if ((v8[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v8[1], 8);
  return ModRefInfo;
}

uint64_t llvm::AAResults::getModRefInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  int ModRefInfo;
  _OWORD v10[3];
  _OWORD v11[3];

  v7 = *(unsigned __int8 *)(a2 + 16) - 33;
  if (v7 <= 0x33)
  {
    if (((1 << v7) & 0x800040000010) != 0)
      return 7;
    if (((1 << v7) & 0x8000000000041) != 0)
      return llvm::AAResults::getModRefInfo(a1, a2, a3, a4);
  }
  llvm::MemoryLocation::getOrNone((uint64_t ***)a2, (uint64_t)v11);
  v10[0] = v11[0];
  v10[1] = v11[1];
  v10[2] = v11[2];
  ModRefInfo = llvm::AAResults::getModRefInfo(a1, a3, (uint64_t)v10, a4);
  if ((ModRefInfo & 3) != 0)
    return ModRefInfo | 3u;
  else
    return 4;
}

{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  unsigned int ModRefInfo;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  unint64_t v41;
  __n128 v42;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  char v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  _BYTE v58[48];

  v7 = a1;
  v9 = *(_QWORD **)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = 7;
  if (v9 == v8)
    goto LABEL_13;
  do
  {
    v10 &= (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v9 + 72))(*v9, a2, a3, a4);
    if ((v10 & 3) == 0)
      goto LABEL_16;
    ++v9;
  }
  while (v9 != v8);
  v11 = *(_QWORD **)(v7 + 8);
  v12 = *(_QWORD **)(v7 + 16);
  if (v11 == v12)
  {
LABEL_13:
    v13 = 63;
  }
  else
  {
    v13 = 63;
    do
    {
      v13 &= (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v11 + 48))(*v11, a2);
      if (v13 == 4)
        goto LABEL_16;
      ++v11;
    }
    while (v11 != v12);
    v14 = *(_QWORD **)(v7 + 8);
    v15 = *(_QWORD **)(v7 + 16);
    if (v14 != v15)
    {
      v16 = 63;
      while (1)
      {
        v16 &= (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v14 + 48))(*v14, a3);
        if (v16 == 4)
          goto LABEL_16;
        if (++v14 == v15)
          goto LABEL_15;
      }
    }
  }
  v16 = 63;
LABEL_15:
  if (((v16 | v13) & 2) == 0)
  {
LABEL_16:
    LOBYTE(v17) = 4;
    return v17;
  }
  LODWORD(v17) = v10 & 6;
  if ((v13 & 1) != 0)
    LODWORD(v17) = v10;
  if ((v13 & 2) == 0)
    LODWORD(v17) = v10 & 5;
  v57 = v17;
  if ((v16 & 0x30) != 0)
  {
    if ((v13 & 0x30) != 0)
      return v17;
    LOBYTE(v17) = 4;
    if ((v13 & 3) == 0 || (v13 & 8) == 0)
      return v17;
    v19 = *(_DWORD *)(a2 + 20);
    v20 = a2 - 32 * (v19 & 0x7FFFFFF);
    v21 = *(unsigned __int8 *)(a2 + 16);
    if (v21 == 84)
    {
      v22 = 0;
    }
    else if (v21 == 39)
    {
      v22 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      v22 = 2;
    }
    if (v19 < 0 && (v52 = *(_QWORD *)(v20 - 8), (v52 & 0xFFFFFFFF0) != 0))
      v23 = (*(_DWORD *)(v20 - 12) - *(_DWORD *)(v20 - v52));
    else
      v23 = 0;
    v24 = a2 - 32 * v22 - 32 * v23 - 32;
    if (v20 != v24)
    {
      v25 = 4;
      v26 = 1;
      v53 = a2 - 32 * v22 - 32 * v23 - 32;
      while (1)
      {
        if (*(_BYTE *)(**(_QWORD **)v20 + 8) == 15)
        {
          v55 = v25;
          v27 = (v20 - (a2 + 32 * (unint64_t)-(*(_DWORD *)(a2 + 20) & 0x7FFFFFF))) >> 5;
          v28.n128_f64[0] = llvm::MemoryLocation::getForArgument(a2, v27, *(uint64_t **)v7, (uint64_t)v58);
          v29 = v7;
          v30 = *(_QWORD **)(v7 + 8);
          v31 = *(_QWORD **)(v7 + 16);
          v32 = 7;
          while (v30 != v31)
          {
            v32 &= (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, __n128))(*(_QWORD *)*v30 + 40))(*v30, a2, v27, v28);
            if ((v32 & 3) == 0)
            {
              v32 = 4;
              break;
            }
            ++v30;
          }
          if ((v7 = v29,
                ModRefInfo = llvm::AAResults::getModRefInfo(v29, a3, (uint64_t)v58, a4),
                v24 = v53,
                (v32 & 2) != 0)
            && (ModRefInfo & 3) != 0
            || (v32 & 1) != 0 && (ModRefInfo & 2) != 0)
          {
            v25 = (v32 | v55) & v57;
          }
          else
          {
            v25 = v55;
          }
          v26 &= ModRefInfo < 4;
          if (v57 == v25)
            break;
        }
        v20 += 32;
        if (v20 == v24)
          goto LABEL_79;
      }
      if (v20 + 32 != v53)
        v26 = 0;
      LOBYTE(v25) = v57;
LABEL_79:
      LOBYTE(v17) = v25 & 3;
      if ((v25 & 3) != 0)
      {
        v49 = v25 | 4;
        v50 = (v26 & 1) == 0;
        goto LABEL_81;
      }
    }
    goto LABEL_16;
  }
  LOBYTE(v17) = 4;
  if ((v16 & 3) == 0 || (v16 & 8) == 0)
    return v17;
  v34 = *(_DWORD *)(a3 + 20);
  v35 = a3 - 32 * (v34 & 0x7FFFFFF);
  v36 = *(unsigned __int8 *)(a3 + 16);
  if (v36 == 84)
    v17 = 0;
  else
    v17 = v36 == 39 ? (*(_DWORD *)(a3 + 80) + 1) : 2;
  if (v34 < 0 && (v51 = *(_QWORD *)(v35 - 8), (v51 & 0xFFFFFFFF0) != 0))
    v37 = (*(_DWORD *)(v35 - 12) - *(_DWORD *)(v35 - v51));
  else
    v37 = 0;
  v38 = a3 - 32 * v17 - 32 * v37 - 32;
  LOBYTE(v17) = 4;
  if (v35 == v38)
    return v17;
  v39 = 1;
  v40 = 4;
  v54 = v7;
  v56 = v38;
  while (*(_BYTE *)(**(_QWORD **)v35 + 8) != 15)
  {
LABEL_69:
    v35 += 32;
    if (v35 == v38)
      goto LABEL_74;
  }
  v41 = (v35 - (a3 + 32 * (unint64_t)-(*(_DWORD *)(a3 + 20) & 0x7FFFFFF))) >> 5;
  v42.n128_f64[0] = llvm::MemoryLocation::getForArgument(a3, v41, *(uint64_t **)v7, (uint64_t)v58);
  v43 = *(_QWORD **)(v7 + 8);
  v44 = *(_QWORD **)(v7 + 16);
  v45 = 7;
  while (v43 != v44)
  {
    v45 &= (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, __n128))(*(_QWORD *)*v43 + 40))(*v43, a3, v41, v42);
    if ((v45 & 3) == 0)
    {
      LOBYTE(v45) = 4;
      break;
    }
    ++v43;
  }
  if ((v45 & 1) != 0)
    v46 = 6;
  else
    v46 = 4;
  if ((v45 & 2) != 0)
    v47 = 7;
  else
    v47 = v46;
  v7 = v54;
  v48 = llvm::AAResults::getModRefInfo(v54, a2, (uint64_t)v58, a4);
  v39 &= v48 < 4;
  v40 = (v47 & v48 | v40) & v57;
  if (v40 != v57)
  {
    v38 = v56;
    goto LABEL_69;
  }
  if (v35 + 32 != v56)
    v39 = 0;
  LOBYTE(v40) = v57;
LABEL_74:
  LOBYTE(v17) = v40 & 3;
  if ((v40 & 3) == 0)
    goto LABEL_16;
  v49 = v40 | 4;
  v50 = (v39 & 1) == 0;
LABEL_81:
  if (v50)
    LOBYTE(v17) = v49;
  return v17;
}

{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  __n128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  _BYTE v44[48];

  v7 = a1;
  v8 = *(_QWORD **)(a1 + 8);
  v9 = *(_QWORD **)(a1 + 16);
  if (v8 == v9)
  {
    LOBYTE(v13) = 63;
    LODWORD(v10) = 7;
  }
  else
  {
    LODWORD(v10) = 7;
    do
    {
      LODWORD(v10) = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v8 + 64))(*v8, a2, a3, a4) & v10;
      if ((v10 & 3) == 0)
        return 4;
      ++v8;
    }
    while (v8 != v9);
    v11 = *(_QWORD **)(v7 + 8);
    v12 = *(_QWORD **)(v7 + 16);
    v13 = 63;
    if (v11 != v12)
    {
      do
      {
        v13 &= (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v11 + 48))(*v11, a2);
        if (v13 == 4)
          return 4;
        ++v11;
      }
      while (v11 != v12);
      if ((v13 & 0x28) == 0)
        return 4;
      if ((v13 & 2) == 0)
      {
        v10 &= 5u;
        if ((v13 & 0x20) != 0)
          goto LABEL_48;
        goto LABEL_17;
      }
    }
  }
  if ((v13 & 1) != 0)
    v10 = v10;
  else
    v10 &= 6u;
  if ((v13 & 0x20) != 0)
  {
LABEL_48:
    if ((v10 & 2) != 0)
    {
      v38 = *(_QWORD **)(v7 + 8);
      v37 = *(_QWORD **)(v7 + 16);
      while (v38 != v37)
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v38 + 32))(*v38, a3, a4, 0))
        {
          return v10 & 5;
        }
        ++v38;
      }
    }
    return v10;
  }
LABEL_17:
  result = 4;
  if ((v13 & 3) == 0 || (v13 & 8) == 0)
    return result;
  v15 = *(_DWORD *)(a2 + 20);
  v16 = a2 - 32 * (v15 & 0x7FFFFFF);
  v17 = *(unsigned __int8 *)(a2 + 16);
  v43 = v7;
  if (v17 == 84)
  {
    v18 = 0;
    if ((v15 & 0x80000000) == 0)
    {
LABEL_21:
      v19 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    if (v17 == 39)
      v18 = (*(_DWORD *)(a2 + 80) + 1);
    else
      v18 = 2;
    if ((v15 & 0x80000000) == 0)
      goto LABEL_21;
  }
  v39 = *(_QWORD *)(v16 - 8);
  if ((v39 & 0xFFFFFFFF0) != 0)
    v19 = (*(_DWORD *)(v16 - 12) - *(_DWORD *)(v16 - v39));
  else
    v19 = 0;
LABEL_22:
  v20 = a2 - 32 * v18 - 32 * v19 - 32;
  if (v16 != v20)
  {
    v40 = v10;
    v21 = 0;
    v22 = 1;
    v23 = 4;
    v41 = a2 - 32 * v18 - 32 * v19 - 32;
    while (*(_BYTE *)(**(_QWORD **)v16 + 8) != 15)
    {
LABEL_43:
      v16 += 32;
      v21 = (v21 + 1);
      if (v16 == v20)
      {
        if ((v23 & 3) != 0)
        {
          if ((v22 & 1) != 0)
            v10 = v23 & v40 & 3;
          else
            v10 = v23 & v40 | 4u;
          goto LABEL_48;
        }
        return 4;
      }
    }
    v24.n128_f64[0] = llvm::MemoryLocation::getForArgument(a2, v21, *(uint64_t **)v7, (uint64_t)v44);
    v25 = *(_DWORD *)(a4 + 336);
    *(_DWORD *)(a4 + 336) = v25 + 1;
    v26 = *(_QWORD *)(v7 + 8);
    v27 = *(_QWORD *)(v7 + 16);
    if (v26 == v27)
    {
      v33 = v23;
      *(_DWORD *)(a4 + 336) = v25;
      v36 = 7;
      v31 = 1;
    }
    else
    {
      v28 = v26 + 8;
      do
      {
        v29 = (*(uint64_t (**)(_QWORD, _BYTE *, uint64_t, uint64_t, __n128))(**(_QWORD **)(v28 - 8) + 24))(*(_QWORD *)(v28 - 8), v44, a3, a4, v24);
        v30 = v29 != 1 || v28 == v27;
        v28 += 8;
      }
      while (!v30);
      --*(_DWORD *)(a4 + 336);
      v31 = v29;
      if (!v29)
      {
        v20 = v41;
LABEL_42:
        v22 &= v31 == 3;
        goto LABEL_43;
      }
      v32 = v7;
      v33 = v23;
      v42 = v22;
      v34 = *(_QWORD **)(v32 + 8);
      v35 = *(_QWORD **)(v32 + 16);
      v36 = 7;
      while (v34 != v35)
      {
        v36 &= (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v34 + 40))(*v34, a2, v21);
        if ((v36 & 3) == 0)
        {
          v36 = 4;
          break;
        }
        ++v34;
      }
      v22 = v42;
      v20 = v41;
    }
    v23 = v36 | v33;
    v7 = v43;
    goto LABEL_42;
  }
  return result;
}

uint64_t llvm::AAResults::getModRefInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t ModRefInfo;
  _QWORD v8[41];
  _QWORD v9[2];
  void *v10;
  uint64_t v11;
  _BYTE v12[128];
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8[0] = 1;
  v3 = 1;
  do
  {
    v4 = &v8[v3];
    *(_OWORD *)v4 = xmmword_1C85F2120;
    *((_OWORD *)v4 + 1) = xmmword_1C85F2120;
    v3 += 5;
  }
  while (v4 + 5 != v9);
  v9[0] = &v13;
  v9[1] = 0;
  v10 = v12;
  v11 = 0x400000000;
  v13 = &unk_1E8134870;
  v14 = 1;
  for (i = 63; i != 79; i += 2)
    v8[i] = -4096;
  ModRefInfo = llvm::AAResults::getModRefInfo(a1, a2, a3, (uint64_t)v8);
  if ((v14 & 1) == 0)
    MEMORY[0x1CAA32FB4](v15, 8);
  if (v10 != v12)
    free(v10);
  if ((v8[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v8[1], 8);
  return ModRefInfo;
}

uint64_t llvm::AAResults::getModRefBehavior(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 16);
  if (v2 == v3)
    return 63;
  LODWORD(v5) = 63;
  do
  {
    v5 = (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v2 + 48))(*v2, a2) & v5;
    if ((_DWORD)v5 == 4)
      break;
    ++v2;
  }
  while (v2 != v3);
  return v5;
}

uint64_t llvm::AAResults::getModRefInfo(llvm::AAResults *this, const llvm::CallBase *a2, const llvm::CallBase *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t ModRefInfo;
  _QWORD v8[41];
  _QWORD v9[2];
  void *v10;
  uint64_t v11;
  _BYTE v12[128];
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8[0] = 1;
  v3 = 1;
  do
  {
    v4 = &v8[v3];
    *(_OWORD *)v4 = xmmword_1C85F2120;
    *((_OWORD *)v4 + 1) = xmmword_1C85F2120;
    v3 += 5;
  }
  while (v4 + 5 != v9);
  v9[0] = &v13;
  v9[1] = 0;
  v10 = v12;
  v11 = 0x400000000;
  v13 = &unk_1E8134870;
  v14 = 1;
  for (i = 63; i != 79; i += 2)
    v8[i] = -4096;
  ModRefInfo = llvm::AAResults::getModRefInfo((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (uint64_t)v8);
  if ((v14 & 1) == 0)
    MEMORY[0x1CAA32FB4](v15, 8);
  if (v10 != v12)
    free(v10);
  if ((v8[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v8[1], 8);
  return ModRefInfo;
}

uint64_t llvm::AAResults::getModRefBehavior(llvm::AAResults *this, const Function *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 == v3)
    return 63;
  LODWORD(v5) = 63;
  do
  {
    v5 = (*(unsigned int (**)(_QWORD, const Function *))(*(_QWORD *)*v2 + 56))(*v2, a2) & v5;
    if ((_DWORD)v5 == 4)
      break;
    ++v2;
  }
  while (v2 != v3);
  return v5;
}

uint64_t llvm::AAResults::getModRefInfo(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  unsigned int v21;
  _QWORD v22[2];
  _QWORD v23[4];
  _QWORD v24[41];
  void **v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[128];
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v24[0] = 1;
  v6 = 1;
  do
  {
    v7 = &v24[v6];
    *(_OWORD *)v7 = xmmword_1C85F2120;
    *((_OWORD *)v7 + 1) = xmmword_1C85F2120;
    v6 += 5;
  }
  while (v7 + 5 != &v25);
  v25 = &v30;
  v26 = 0;
  v27 = v29;
  v28 = 0x400000000;
  v30 = &unk_1E8134870;
  v31 = 1;
  for (i = 63; i != 79; i += 2)
    v24[i] = -4096;
  if ((*(_WORD *)(a2 + 18) & 0x300) != 0)
  {
    v9 = 7;
  }
  else
  {
    if (!*a3)
    {
LABEL_7:
      v9 = 5;
      goto LABEL_8;
    }
    v11 = *(_QWORD *)(a2 - 32);
    sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272, *(_QWORD *)a2);
    if (v13 == 1)
      v14 = -2;
    else
      v14 = (unint64_t)(v12 + 7) >> 3;
    llvm::Instruction::getAAMetadata((uint64_t ***)a2, v23);
    v22[0] = v11;
    v22[1] = v14;
    v15 = v26;
    LODWORD(v26) = v26 + 1;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    if (v16 == v17)
    {
      LODWORD(v26) = v15;
      goto LABEL_7;
    }
    v18 = v16 + 8;
    do
    {
      v19 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, _QWORD *))(**(_QWORD **)(v18 - 8) + 24))(*(_QWORD *)(v18 - 8), v22, a3, v24);
      v20 = v19 != 1 || v18 == v17;
      v18 += 8;
    }
    while (!v20);
    if (v19 == 3)
      v21 = 1;
    else
      v21 = 5;
    if (v19)
      v9 = v21;
    else
      v9 = 4;
    LODWORD(v26) = v26 - 1;
  }
LABEL_8:
  if ((v31 & 1) == 0)
    MEMORY[0x1CAA32FB4](v32, 8);
  if (v27 != v29)
    free(v27);
  if ((v24[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v24[1], 8);
  return v9;
}

{
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t ModRefInfo;
  _QWORD v8[41];
  _QWORD v9[2];
  void *v10;
  uint64_t v11;
  _BYTE v12[128];
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8[0] = 1;
  v3 = 1;
  do
  {
    v4 = &v8[v3];
    *(_OWORD *)v4 = xmmword_1C85F2120;
    *((_OWORD *)v4 + 1) = xmmword_1C85F2120;
    v3 += 5;
  }
  while (v4 + 5 != v9);
  v9[0] = &v13;
  v9[1] = 0;
  v10 = v12;
  v11 = 0x400000000;
  v13 = &unk_1E8134870;
  v14 = 1;
  for (i = 63; i != 79; i += 2)
    v8[i] = -4096;
  ModRefInfo = llvm::AAResults::getModRefInfo(a1, a2, a3, (uint64_t)v8);
  if ((v14 & 1) == 0)
    MEMORY[0x1CAA32FB4](v15, 8);
  if (v10 != v12)
    free(v10);
  if ((v8[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v8[1], 8);
  return ModRefInfo;
}

{
  uint64_t v4;
  _QWORD *v5;
  uint64_t i;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[41];
  _QWORD v12[2];
  void *v13;
  uint64_t v14;
  _BYTE v15[128];
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v11[0] = 1;
  v4 = 1;
  do
  {
    v5 = &v11[v4];
    *(_OWORD *)v5 = xmmword_1C85F2120;
    *((_OWORD *)v5 + 1) = xmmword_1C85F2120;
    v4 += 5;
  }
  while (v5 + 5 != v12);
  v12[0] = &v16;
  v12[1] = 0;
  v13 = v15;
  v14 = 0x400000000;
  v16 = &unk_1E8134870;
  v17 = 1;
  for (i = 63; i != 79; i += 2)
    v11[i] = -4096;
  if (*a3)
  {
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD **)(a1 + 16);
    while (v7 != v8)
    {
      if ((*(unsigned int (**)(_QWORD, _QWORD *, _QWORD *, _QWORD))(*(_QWORD *)*v7 + 32))(*v7, a3, v11, 0))
      {
        v9 = 5;
        goto LABEL_11;
      }
      ++v7;
    }
  }
  v9 = 7;
LABEL_11:
  if ((v17 & 1) == 0)
    MEMORY[0x1CAA32FB4](v18, 8);
  if (v13 != v15)
    free(v13);
  if ((v11[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v11[1], 8);
  return v9;
}

{
  uint64_t v4;
  _QWORD *v5;
  uint64_t i;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[41];
  _QWORD v12[2];
  void *v13;
  uint64_t v14;
  _BYTE v15[128];
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v11[0] = 1;
  v4 = 1;
  do
  {
    v5 = &v11[v4];
    *(_OWORD *)v5 = xmmword_1C85F2120;
    *((_OWORD *)v5 + 1) = xmmword_1C85F2120;
    v4 += 5;
  }
  while (v5 + 5 != v12);
  v12[0] = &v16;
  v12[1] = 0;
  v13 = v15;
  v14 = 0x400000000;
  v16 = &unk_1E8134870;
  v17 = 1;
  for (i = 63; i != 79; i += 2)
    v11[i] = -4096;
  if (*a3)
  {
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD **)(a1 + 16);
    while (v7 != v8)
    {
      if ((*(unsigned int (**)(_QWORD, _QWORD *, _QWORD *, _QWORD))(*(_QWORD *)*v7 + 32))(*v7, a3, v11, 0))
      {
        v9 = 4;
        goto LABEL_11;
      }
      ++v7;
    }
  }
  v9 = 7;
LABEL_11:
  if ((v17 & 1) == 0)
    MEMORY[0x1CAA32FB4](v18, 8);
  if (v13 != v15)
    free(v13);
  if ((v11[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v11[1], 8);
  return v9;
}

{
  uint64_t v4;
  _QWORD *v5;
  uint64_t i;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[41];
  _QWORD v12[2];
  void *v13;
  uint64_t v14;
  _BYTE v15[128];
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v11[0] = 1;
  v4 = 1;
  do
  {
    v5 = &v11[v4];
    *(_OWORD *)v5 = xmmword_1C85F2120;
    *((_OWORD *)v5 + 1) = xmmword_1C85F2120;
    v4 += 5;
  }
  while (v5 + 5 != v12);
  v12[0] = &v16;
  v12[1] = 0;
  v13 = v15;
  v14 = 0x400000000;
  v16 = &unk_1E8134870;
  v17 = 1;
  for (i = 63; i != 79; i += 2)
    v11[i] = -4096;
  if (*a3)
  {
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD **)(a1 + 16);
    while (v7 != v8)
    {
      if ((*(unsigned int (**)(_QWORD, _QWORD *, _QWORD *, _QWORD))(*(_QWORD *)*v7 + 32))(*v7, a3, v11, 0))
      {
        v9 = 4;
        goto LABEL_11;
      }
      ++v7;
    }
  }
  v9 = 7;
LABEL_11:
  if ((v17 & 1) == 0)
    MEMORY[0x1CAA32FB4](v18, 8);
  if (v13 != v15)
    free(v13);
  if ((v11[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v11[1], 8);
  return v9;
}

{
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t ModRefInfo;
  _QWORD v8[41];
  _QWORD v9[2];
  void *v10;
  uint64_t v11;
  _BYTE v12[128];
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8[0] = 1;
  v3 = 1;
  do
  {
    v4 = &v8[v3];
    *(_OWORD *)v4 = xmmword_1C85F2120;
    *((_OWORD *)v4 + 1) = xmmword_1C85F2120;
    v3 += 5;
  }
  while (v4 + 5 != v9);
  v9[0] = &v13;
  v9[1] = 0;
  v10 = v12;
  v11 = 0x400000000;
  v13 = &unk_1E8134870;
  v14 = 1;
  for (i = 63; i != 79; i += 2)
    v8[i] = -4096;
  ModRefInfo = llvm::AAResults::getModRefInfo(a1, a2, a3, (uint64_t)v8);
  if ((v14 & 1) == 0)
    MEMORY[0x1CAA32FB4](v15, 8);
  if (v10 != v12)
    free(v10);
  if ((v8[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v8[1], 8);
  return ModRefInfo;
}

{
  uint64_t v6;
  _QWORD *v7;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned __int8 v21;
  _QWORD v23[2];
  _QWORD v24[4];
  _QWORD v25[41];
  void **v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[128];
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v25[0] = 1;
  v6 = 1;
  do
  {
    v7 = &v25[v6];
    *(_OWORD *)v7 = xmmword_1C85F2120;
    *((_OWORD *)v7 + 1) = xmmword_1C85F2120;
    v6 += 5;
  }
  while (v7 + 5 != &v26);
  v26 = &v31;
  v27 = 0;
  v28 = v30;
  v29 = 0x400000000;
  v31 = &unk_1E8134870;
  v32 = 1;
  for (i = 63; i != 79; i += 2)
    v25[i] = -4096;
  if ((((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 7) - 3 < 5 || *a3 == 0)
    goto LABEL_27;
  v10 = *(_QWORD *)(a2 - 64);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272, **(_QWORD **)(a2 - 32));
  if (v12 == 1)
    v13 = -2;
  else
    v13 = (unint64_t)(v11 + 7) >> 3;
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, v24);
  v23[0] = v10;
  v23[1] = v13;
  v14 = v27;
  LODWORD(v27) = v27 + 1;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 16);
  if (v15 == v16)
  {
    LODWORD(v27) = v14;
LABEL_27:
    v21 = 7;
    goto LABEL_28;
  }
  v17 = v15 + 8;
  do
  {
    v18 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, _QWORD *))(**(_QWORD **)(v17 - 8) + 24))(*(_QWORD *)(v17 - 8), v23, a3, v25);
    v19 = v18 != 1 || v17 == v16;
    v17 += 8;
  }
  while (!v19);
  if (v18 == 3)
    v20 = 3;
  else
    v20 = 7;
  if (v18)
    v21 = v20;
  else
    v21 = 4;
  LODWORD(v27) = v27 - 1;
LABEL_28:
  if ((v32 & 1) == 0)
    MEMORY[0x1CAA32FB4](v33, 8);
  if (v28 != v30)
    free(v28);
  if ((v25[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v25[1], 8);
  return v21;
}

uint64_t llvm::AAResults::getModRefInfo(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  BOOL v18;
  unsigned int v19;
  _QWORD v20[2];
  _QWORD v21[4];

  if ((*(_WORD *)(a2 + 18) & 0x300) != 0)
    return 7;
  if (!*a3)
    return 5;
  v9 = *(_QWORD *)(a2 - 32);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272, *(_QWORD *)a2);
  if (v11 == 1)
    v12 = -2;
  else
    v12 = (unint64_t)(v10 + 7) >> 3;
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, v21);
  v20[0] = v9;
  v20[1] = v12;
  v13 = *(_DWORD *)(a4 + 336);
  *(_DWORD *)(a4 + 336) = v13 + 1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  if (v14 == v15)
  {
    *(_DWORD *)(a4 + 336) = v13;
    return 5;
  }
  v16 = v14 + 8;
  do
  {
    v17 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(**(_QWORD **)(v16 - 8) + 24))(*(_QWORD *)(v16 - 8), v20, a3, a4);
    v18 = v17 != 1 || v16 == v15;
    v16 += 8;
  }
  while (!v18);
  if (v17 == 3)
    v19 = 1;
  else
    v19 = 5;
  if (v17)
    result = v19;
  else
    result = 4;
  --*(_DWORD *)(a4 + 336);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  BOOL v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v22[2];
  _QWORD v23[4];

  if ((*(_WORD *)(a2 + 18) & 0x300) != 0)
    return 7;
  if (*a3)
  {
    v9 = *(_QWORD *)(a2 - 32);
    sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272, **(_QWORD **)(a2 - 64));
    if (v11 == 1)
      v12 = -2;
    else
      v12 = (unint64_t)(v10 + 7) >> 3;
    llvm::Instruction::getAAMetadata((uint64_t ***)a2, v23);
    v22[0] = v9;
    v22[1] = v12;
    v13 = *(_DWORD *)(a4 + 336);
    *(_DWORD *)(a4 + 336) = v13 + 1;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v14 == v15)
    {
      *(_DWORD *)(a4 + 336) = v13;
    }
    else
    {
      v16 = v14 + 8;
      do
      {
        v17 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(**(_QWORD **)(v16 - 8) + 24))(*(_QWORD *)(v16 - 8), v22, a3, a4);
        v18 = v17 != 1 || v16 == v15;
        v16 += 8;
      }
      while (!v18);
      --*(_DWORD *)(a4 + 336);
      v19 = v17;
      if (!v17)
        return 4;
      v21 = *(_QWORD **)(a1 + 8);
      v20 = *(_QWORD **)(a1 + 16);
      while (v21 != v20)
      {
        if (((*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)*v21 + 32))(*v21, a3, a4, 0) & 1) != 0)
          return 4;
        ++v21;
      }
      if (v19 == 3)
        return 2;
    }
  }
  return 6;
}

{
  _QWORD *v4;
  _QWORD *v5;

  if (!*a3)
    return 7;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 16);
  if (v4 == v5)
    return 7;
  while (!(*(unsigned int (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)*v4 + 32))(*v4, a3, a4, 0))
  {
    if (++v4 == v5)
      return 7;
  }
  return 5;
}

{
  _QWORD *v4;
  _QWORD *v5;

  if (!*a3)
    return 7;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 16);
  if (v4 == v5)
    return 7;
  while (!(*(unsigned int (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)*v4 + 32))(*v4, a3, a4, 0))
  {
    if (++v4 == v5)
      return 7;
  }
  return 4;
}

{
  _QWORD *v4;
  _QWORD *v5;

  if (!*a3)
    return 7;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 16);
  if (v4 == v5)
    return 7;
  while (!(*(unsigned int (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)*v4 + 32))(*v4, a3, a4, 0))
  {
    if (++v4 == v5)
      return 7;
  }
  return 4;
}

{
  unsigned __int8 v5;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  _QWORD v16[6];

  if ((((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 2) & 7) - 3 < 5 || *a3 == 0)
    return 7;
  llvm::MemoryLocation::get(a2, v16);
  v10 = *(_DWORD *)(a4 + 336);
  *(_DWORD *)(a4 + 336) = v10 + 1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  if (v11 == v12)
  {
    *(_DWORD *)(a4 + 336) = v10;
    return 7;
  }
  v13 = v11 + 8;
  do
  {
    v14 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(**(_QWORD **)(v13 - 8) + 24))(*(_QWORD *)(v13 - 8), v16, a3, a4);
    v15 = v14 != 1 || v13 == v12;
    v13 += 8;
  }
  while (!v15);
  if (v14 == 3)
    v5 = 3;
  else
    v5 = 7;
  if (!v14)
    v5 = 4;
  --*(_DWORD *)(a4 + 336);
  return v5;
}

{
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  BOOL v18;
  unsigned __int8 v19;
  _QWORD v21[2];
  _QWORD v22[4];

  if ((((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 7) - 3 < 5 || *a3 == 0)
    return 7;
  v9 = *(_QWORD *)(a2 - 64);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272, **(_QWORD **)(a2 - 32));
  if (v11 == 1)
    v12 = -2;
  else
    v12 = (unint64_t)(v10 + 7) >> 3;
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, v22);
  v21[0] = v9;
  v21[1] = v12;
  v13 = *(_DWORD *)(a4 + 336);
  *(_DWORD *)(a4 + 336) = v13 + 1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  if (v14 == v15)
  {
    *(_DWORD *)(a4 + 336) = v13;
    return 7;
  }
  v16 = v14 + 8;
  do
  {
    v17 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(**(_QWORD **)(v16 - 8) + 24))(*(_QWORD *)(v16 - 8), v21, a3, a4);
    v18 = v17 != 1 || v16 == v15;
    v16 += 8;
  }
  while (!v18);
  if (v17 == 3)
    v19 = 3;
  else
    v19 = 7;
  if (!v17)
    v19 = 4;
  --*(_DWORD *)(a4 + 336);
  return v19;
}

uint64_t llvm::AAResults::getModRefInfo(uint64_t a1, uint64_t ***a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t ModRefInfo;
  _QWORD v8[41];
  _QWORD v9[2];
  void *v10;
  uint64_t v11;
  _BYTE v12[128];
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8[0] = 1;
  v3 = 1;
  do
  {
    v4 = &v8[v3];
    *(_OWORD *)v4 = xmmword_1C85F2120;
    *((_OWORD *)v4 + 1) = xmmword_1C85F2120;
    v3 += 5;
  }
  while (v4 + 5 != v9);
  v9[0] = &v13;
  v9[1] = 0;
  v10 = v12;
  v11 = 0x400000000;
  v13 = &unk_1E8134870;
  v14 = 1;
  for (i = 63; i != 79; i += 2)
    v8[i] = -4096;
  ModRefInfo = llvm::AAResults::getModRefInfo(a1, a2, a3, (uint64_t)v8);
  if ((v14 & 1) == 0)
    MEMORY[0x1CAA32FB4](v15, 8);
  if (v10 != v12)
    free(v10);
  if ((v8[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v8[1], 8);
  return ModRefInfo;
}

uint64_t llvm::AAResults::getModRefInfo(uint64_t a1, uint64_t ***a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  BOOL v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD v18[2];
  _QWORD v19[4];

  if (*a3)
  {
    v7 = (uint64_t)*(a2 - 4);
    llvm::Instruction::getAAMetadata(a2, v19);
    v18[0] = v7;
    v18[1] = -2;
    v8 = *(_DWORD *)(a4 + 336);
    *(_DWORD *)(a4 + 336) = v8 + 1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    if (v9 == v10)
    {
      *(_DWORD *)(a4 + 336) = v8;
    }
    else
    {
      v11 = v9 + 8;
      do
      {
        v12 = (*(uint64_t (**)(_QWORD, _QWORD *, _QWORD *, uint64_t))(**(_QWORD **)(v11 - 8) + 24))(*(_QWORD *)(v11 - 8), v18, a3, a4);
        v13 = v12 != 1 || v11 == v10;
        v11 += 8;
      }
      while (!v13);
      --*(_DWORD *)(a4 + 336);
      v14 = v12;
      if (!v12)
        return 4;
      v16 = *(_QWORD **)(a1 + 8);
      v15 = *(_QWORD **)(a1 + 16);
      while (v16 != v15)
      {
        if (((*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)*v16 + 32))(*v16, a3, a4, 0) & 1) != 0)
          return 4;
        ++v16;
      }
      if (v14 == 3)
        return 3;
    }
  }
  return 7;
}

uint64_t llvm::AAResults::getModRefInfo(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[2];
  _QWORD v42[4];

  if (*((_BYTE *)a3 + 48))
  {
    v7 = *(unsigned __int8 *)(a2 + 16);
    v8 = a3[1];
    v38 = *a3;
    v39 = v8;
    v9 = a3[2];
  }
  else
  {
    v7 = *(unsigned __int8 *)(a2 + 16);
    if ((v7 - 33) <= 0x33 && ((1 << (v7 - 33)) & 0x8000000000041) != 0)
    {
      v13 = *(_QWORD **)(a1 + 8);
      v12 = *(_QWORD **)(a1 + 16);
      v14 = 63;
      while (v13 != v12)
      {
        v14 &= (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v13 + 48))(*v13, a2);
        if (v14 == 4)
          break;
        ++v13;
      }
      LOBYTE(result) = v14 & 7;
      return result;
    }
    *(_QWORD *)&v38 = 0;
    *((_QWORD *)&v38 + 1) = -1;
    v9 = 0uLL;
    v39 = 0u;
  }
  v40 = v9;
  LOBYTE(result) = 4;
  if (v7 <= 59)
  {
    if (v7 == 33)
      goto LABEL_26;
    if (v7 != 37)
    {
      if (v7 != 39)
        return result;
      goto LABEL_26;
    }
    if ((_QWORD)v38)
    {
      v25 = *(_QWORD **)(a1 + 8);
      v26 = *(_QWORD **)(a1 + 16);
      if (v25 != v26)
      {
        while (!(*(unsigned int (**)(_QWORD, __int128 *, uint64_t, _QWORD))(*(_QWORD *)*v25 + 32))(*v25, &v38, a4, 0))
        {
          ++v25;
          LOBYTE(result) = 7;
          if (v25 == v26)
            return result;
        }
        goto LABEL_63;
      }
    }
LABEL_79:
    LOBYTE(result) = 7;
    return result;
  }
  if (v7 > 79)
  {
    if (v7 != 80)
    {
      if (v7 != 84)
      {
        if (v7 == 88)
          LOBYTE(result) = llvm::AAResults::getModRefInfo(a1, (uint64_t ***)a2, &v38, a4);
        return result;
      }
LABEL_26:
      LOBYTE(result) = llvm::AAResults::getModRefInfo(a1, a2, (uint64_t)&v38, a4);
      return result;
    }
    if ((_QWORD)v38)
    {
      v27 = *(_QWORD **)(a1 + 8);
      v28 = *(_QWORD **)(a1 + 16);
      if (v27 != v28)
      {
        while (((*(uint64_t (**)(_QWORD, __int128 *, uint64_t, _QWORD))(*(_QWORD *)*v27 + 32))(*v27, &v38, a4, 0) & 1) == 0)
        {
          ++v27;
          LOBYTE(result) = 7;
          if (v27 == v28)
            return result;
        }
LABEL_63:
        LOBYTE(result) = 4;
        return result;
      }
    }
    goto LABEL_79;
  }
  switch(v7)
  {
    case '<':
      if ((*(_WORD *)(a2 + 18) & 0x300) != 0)
        goto LABEL_79;
      if (!(_QWORD)v38)
        goto LABEL_8;
      v29 = *(_QWORD *)(a2 - 32);
      sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40) + 272, *(_QWORD *)a2);
      if (v31 == 1)
        v32 = -2;
      else
        v32 = (unint64_t)(v30 + 7) >> 3;
      llvm::Instruction::getAAMetadata((uint64_t ***)a2, v42);
      v41[0] = v29;
      v41[1] = v32;
      v33 = *(_DWORD *)(a4 + 336);
      *(_DWORD *)(a4 + 336) = v33 + 1;
      v34 = *(_QWORD *)(a1 + 8);
      v35 = *(_QWORD *)(a1 + 16);
      if (v34 == v35)
      {
        *(_DWORD *)(a4 + 336) = v33;
        goto LABEL_8;
      }
      v36 = v34 + 8;
      do
      {
        v22 = (*(uint64_t (**)(_QWORD, _QWORD *, __int128 *, uint64_t))(**(_QWORD **)(v36 - 8) + 24))(*(_QWORD *)(v36 - 8), v41, &v38, a4);
        v37 = v22 != 1 || v36 == v35;
        v36 += 8;
      }
      while (!v37);
      if (v22 == 3)
        v24 = 1;
      else
        v24 = 5;
      goto LABEL_49;
    case '=':
      LOBYTE(result) = llvm::AAResults::getModRefInfo(a1, a2, &v38, a4);
      return result;
    case '?':
      if (!(_QWORD)v38)
        goto LABEL_79;
      v15 = *(_QWORD **)(a1 + 8);
      v16 = *(_QWORD **)(a1 + 16);
      if (v15 == v16)
        goto LABEL_79;
      break;
    case '@':
      LOBYTE(result) = llvm::AAResults::getModRefInfo(a1, a2, &v38, a4);
      return result;
    case 'A':
      if ((((unint64_t)*(unsigned __int16 *)(a2 + 18) >> 1) & 7) - 3 < 5 || (_QWORD)v38 == 0)
        goto LABEL_79;
      llvm::MemoryLocation::get((llvm::MemoryLocation *)a2, v41);
      v18 = *(_DWORD *)(a4 + 336);
      *(_DWORD *)(a4 + 336) = v18 + 1;
      v19 = *(_QWORD *)(a1 + 8);
      v20 = *(_QWORD *)(a1 + 16);
      if (v19 == v20)
      {
        *(_DWORD *)(a4 + 336) = v18;
        goto LABEL_79;
      }
      v21 = v19 + 8;
      do
      {
        v22 = (*(uint64_t (**)(_QWORD, _QWORD *, __int128 *, uint64_t))(**(_QWORD **)(v21 - 8) + 24))(*(_QWORD *)(v21 - 8), v41, &v38, a4);
        v23 = v22 != 1 || v21 == v20;
        v21 += 8;
      }
      while (!v23);
      if (v22 == 3)
        v24 = 3;
      else
        v24 = 7;
LABEL_49:
      if (v22)
        LOBYTE(result) = v24;
      else
        LOBYTE(result) = 4;
      --*(_DWORD *)(a4 + 336);
      return result;
    default:
      return result;
  }
  while (((*(uint64_t (**)(_QWORD, __int128 *, uint64_t, _QWORD))(*(_QWORD *)*v15 + 32))(*v15, &v38, a4, 0) & 1) == 0)
  {
    ++v15;
    LOBYTE(result) = 7;
    if (v15 == v16)
      return result;
  }
LABEL_8:
  LOBYTE(result) = 5;
  return result;
}

uint64_t llvm::AAResults::callCapturesBefore(uint64_t a1, uint64_t a2, llvm **a3, uint64_t a4, uint64_t a5)
{
  llvm *UnderlyingObject;
  const llvm::Value *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t (***v17)();
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t (**v40)();
  uint64_t v41;
  __int128 v42;
  __int128 v43;

  if (!a4)
    return 7;
  UnderlyingObject = llvm::getUnderlyingObject(*a3, (const llvm::Value *)6);
  if (!llvm::isIdentifiedFunctionLocal(UnderlyingObject, v10))
    return 7;
  v11 = *(unsigned __int8 *)(a2 + 16) - 33;
  v12 = v11 > 0x33;
  v13 = (1 << v11) & 0x8000000000041;
  if (v12 || v13 == 0)
    return 7;
  if (UnderlyingObject == (llvm *)a2)
    return 7;
  v40 = &off_1E81359B0;
  v41 = a2;
  *(_QWORD *)&v42 = a4;
  WORD4(v42) = 257;
  BYTE10(v42) = 0;
  *(_QWORD *)&v43 = 0;
  llvm::PointerMayBeCaptured(UnderlyingObject, (const llvm::Value *)&v40, 0);
  if (BYTE10(v42))
    return 7;
  v17 = (uint64_t (***)())(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v18 = *(unsigned __int8 *)(a2 + 16);
  if (v18 == 84)
  {
    v19 = 0;
  }
  else if (v18 == 39)
  {
    v19 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v19 = 2;
  }
  v20 = a2 - 32 - 32 * v19;
  if (v17 == (uint64_t (***)())v20)
  {
    v35 = 4;
    return v35 & 3;
  }
  v21 = 0;
  v36 = 4;
  v22 = 1;
  do
  {
    if (*((_BYTE *)**v17 + 8) != 15)
      goto LABEL_41;
    if ((sub_1C4D91D40(a2, v21, 22) & 1) == 0)
    {
      v23 = *(unsigned __int8 *)(a2 + 16);
      if (v23 == 84)
        v24 = 0;
      else
        v24 = v23 == 39 ? (*(_DWORD *)(a2 + 80) + 1) : 2;
      v25 = *(_DWORD *)(a2 + 20);
      if (v25 < 0 && (v34 = v25 & 0x7FFFFFF, (*(_QWORD *)(a2 - 8 - 32 * v34) & 0xFFFFFFFF0) != 0))
      {
        v27 = -v34;
        v26 = *(_DWORD *)(a2 - 32 * v34 - 12) - *(_DWORD *)(a2 - 32 * v34 - *(_QWORD *)(a2 - 32 * v34 - 8));
      }
      else
      {
        v26 = 0;
        v27 = -(uint64_t)(v25 & 0x7FFFFFF);
      }
      if (v21 < ((-32 - 32 * v24 + 32 * (unint64_t)-v26 - 32 * v27) >> 5)
        && !llvm::CallBase::paramHasAttr(a2, v21, 69))
      {
        goto LABEL_41;
      }
    }
    v40 = *v17;
    v41 = -1;
    v42 = 0u;
    v43 = 0u;
    v37[0] = UnderlyingObject;
    v37[1] = -1;
    v38 = 0u;
    v39 = 0u;
    v28 = *(_DWORD *)(a5 + 336);
    *(_DWORD *)(a5 + 336) = v28 + 1;
    v29 = *(_QWORD *)(a1 + 8);
    v30 = *(_QWORD *)(a1 + 16);
    if (v29 == v30)
    {
      v22 = 0;
      *(_DWORD *)(a5 + 336) = v28;
    }
    else
    {
      v31 = v29 + 8;
      do
      {
        v32 = (*(unsigned __int8 (**)(_QWORD, uint64_t (***)(), _QWORD *, uint64_t))(**(_QWORD **)(v31 - 8) + 24))(*(_QWORD *)(v31 - 8), &v40, v37, a5);
        v33 = v32 != 1 || v31 == v30;
        v31 += 8;
      }
      while (!v33);
      --*(_DWORD *)(a5 + 336);
      v22 &= v32 == 3;
      if (!v32)
        goto LABEL_41;
    }
    if ((sub_1C4D91D40(a2, v21, 44) & 1) == 0)
    {
      if ((sub_1C4D91D40(a2, v21, 45) & 1) == 0 && !sub_1C4D91D40(a2, v21, 44))
        return 7;
      v36 = 5;
    }
LABEL_41:
    v17 += 4;
    ++v21;
  }
  while (v17 != (uint64_t (***)())v20);
  if ((v22 & 1) != 0)
  {
    v35 = v36;
    return v35 & 3;
  }
  return (v36 | 4);
}

uint64_t llvm::isIdentifiedFunctionLocal(llvm *this, const llvm::Value *a2)
{
  unsigned int v2;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *((unsigned __int8 *)this + 16);
  if (v2 == 59)
    return 1;
  if (v2 >= 0x1C)
  {
    v5 = v2 - 33;
    v6 = v5 > 0x33;
    v7 = (1 << v5) & 0x8000000000041;
    if (v6 || v7 == 0)
      return 0;
    if ((sub_1C4D91DD8((uint64_t)this, 19) & 1) != 0)
      return 1;
    v2 = *((unsigned __int8 *)this + 16);
  }
  if (v2 != 21)
    return 0;
  if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
    return 0;
  v9 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (!v9)
    return 0;
  v10 = *((_DWORD *)this + 8) + 2;
  if (v10 < *(_DWORD *)(v9 + 8))
  {
    v11 = *(_QWORD *)(v9 + 8 * v10 + 40);
    if (v11)
    {
      if ((*(_BYTE *)(v11 + 14) & 8) != 0)
        return 1;
    }
  }
  if (v10 >= *(_DWORD *)(v9 + 8))
    return 0;
  v12 = *(_QWORD *)(v9 + 8 * v10 + 40);
  if (!v12)
    return 0;
  return (*(unsigned __int8 *)(v12 + 20) >> 5) & 1;
}

uint64_t llvm::AAResults::canBasicBlockModify(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  __int128 v12;
  unsigned int v13;
  char v14;
  uint64_t result;
  __int128 v16[3];
  char v17;

  v4 = *(_QWORD *)(a2 + 40);
  v3 = *(_QWORD *)(a2 + 48);
  if (v3)
    v5 = v3 - 24;
  else
    v5 = 0;
  if (v4)
    v6 = v4 - 24;
  else
    v6 = 0;
  v7 = v5 + 24;
  v8 = *(_QWORD *)(v6 + 32);
  if (v5 + 24 == v8)
    return 0;
  do
  {
    if (v7)
      v11 = v7 - 24;
    else
      v11 = 0;
    v12 = a3[1];
    v16[0] = *a3;
    v16[1] = v12;
    v16[2] = a3[2];
    v17 = 1;
    v13 = sub_1C4D90C64(a1, v11, v16);
    v14 = v13;
    result = (v13 >> 1) & 1;
    if ((v14 & 2) != 0)
      break;
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != v8);
  return result;
}

BOOL llvm::AAResults::canInstructionRangeModRef(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  _BOOL8 result;
  __int128 v14[3];
  char v15;

  v5 = a2 + 24;
  v6 = *(_QWORD *)(a3 + 32);
  if (a2 + 24 == v6)
    return 0;
  v9 = a5 & 3;
  do
  {
    if (v5)
      v10 = v5 - 24;
    else
      v10 = 0;
    v11 = a4[1];
    v14[0] = *a4;
    v14[1] = v11;
    v14[2] = a4[2];
    v15 = 1;
    v12 = v9 & sub_1C4D90C64(a1, v10, v14);
    result = v12 != 0;
    if (v12)
      break;
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5 != v6);
  return result;
}

uint64_t sub_1C4D90C64(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  uint64_t ModRefInfo;
  _QWORD v8[41];
  _QWORD v9[2];
  void *v10;
  uint64_t v11;
  _BYTE v12[128];
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8[0] = 1;
  v3 = 1;
  do
  {
    v4 = &v8[v3];
    *(_OWORD *)v4 = xmmword_1C85F2120;
    *((_OWORD *)v4 + 1) = xmmword_1C85F2120;
    v3 += 5;
  }
  while (v4 + 5 != v9);
  v9[0] = &v13;
  v9[1] = 0;
  v10 = v12;
  v11 = 0x400000000;
  v13 = &unk_1E8134870;
  v14 = 1;
  for (i = 63; i != 79; i += 2)
    v8[i] = -4096;
  ModRefInfo = llvm::AAResults::getModRefInfo(a1, a2, a3, (uint64_t)v8);
  if ((v14 & 1) == 0)
    MEMORY[0x1CAA32FB4](v15, 8);
  if (v10 != v12)
    free(v10);
  if ((v8[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v8[1], 8);
  return ModRefInfo;
}

void llvm::initializeExternalAAWrapperPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EF350);
  if (v1 != -1)
  {
    v4[0] = sub_1C4D90E00;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EF350, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4D90E00(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "External Alias Analysis";
  *(_QWORD *)(v2 + 8) = 23;
  *(_QWORD *)(v2 + 16) = "external-aa";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &llvm::ExternalAAWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::ExternalAAWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4D90E98(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  unint64_t v6;
  llvm::PassRegistry *v7;
  llvm::PassRegistry *v8;
  llvm::PassRegistry *v9;
  llvm::PassRegistry *v10;
  llvm::PassRegistry *v11;
  uint64_t v12;
  llvm *v14;
  _QWORD *v15;
  _QWORD v16[2];

  llvm::initializeBasicAAWrapperPassPass(a1, a2);
  llvm::initializeCFLAndersAAWrapperPassPass(a1, v3);
  llvm::initializeCFLSteensAAWrapperPassPass(a1, v4);
  v14 = a1;
  v6 = atomic_load(&qword_1ED7EF350);
  if (v6 != -1)
  {
    v16[0] = sub_1C4D90E00;
    v16[1] = &v14;
    v15 = v16;
    std::__call_once(&qword_1ED7EF350, &v15, (void (__cdecl *)(void *))sub_1C4776838);
  }
  llvm::initializeGPUAAWrapperPassPass(a1, v5);
  llvm::initializeGlobalsAAWrapperPassPass(a1, v7);
  llvm::initializeObjCARCAAWrapperPassPass(a1, v8);
  llvm::initializeSCEVAAWrapperPassPass(a1, v9);
  llvm::initializeScopedNoAliasAAWrapperPassPass(a1, v10);
  llvm::initializeTypeBasedAAWrapperPassPass(a1, v11);
  v12 = operator new();
  *(_QWORD *)v12 = "Function Alias Analysis Results";
  *(_QWORD *)(v12 + 8) = 31;
  *(_QWORD *)(v12 + 16) = "aa";
  *(_QWORD *)(v12 + 24) = 2;
  *(_QWORD *)(v12 + 32) = &llvm::AAResultsWrapperPass::ID;
  *(_WORD *)(v12 + 40) = 256;
  *(_BYTE *)(v12 + 42) = 0;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = llvm::callDefaultCtor<llvm::AAResultsWrapperPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v12, 1);
  return v12;
}

llvm::AAResultsWrapperPass *llvm::createAAResultsWrapperPass(llvm *this)
{
  llvm::AAResultsWrapperPass *v1;

  v1 = (llvm::AAResultsWrapperPass *)operator new();
  return llvm::AAResultsWrapperPass::AAResultsWrapperPass(v1);
}

uint64_t llvm::AAResultsWrapperPass::runOnFunction(llvm::AAResultsWrapperPass *this, llvm::Function *a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t AnalysisPass;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;

  v4 = operator new();
  v5 = (void **)**((_QWORD **)this + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::TargetLibraryInfoWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::TargetLibraryInfoWrapperPass::ID);
  *(_QWORD *)v4 = sub_1C4D914E8(v7, (uint64_t)a2);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  v8 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v4;
  if (v8)
  {
    v9 = *(void **)(v8 + 32);
    if (v9)
    {
      *(_QWORD *)(v8 + 40) = v9;
      operator delete(v9);
    }
    v52 = (void **)(v8 + 8);
    sub_1C4764BBC(&v52);
    MEMORY[0x1CAA32FC0](v8, 0xE0C40CC0D2FFFLL);
  }
  if (!byte_1ED82C5E0)
  {
    v10 = *((_QWORD *)this + 4);
    v11 = (void **)**((_QWORD **)this + 1);
    do
    {
      v12 = *v11;
      v11 += 2;
    }
    while (v12 != &llvm::BasicAAWrapperPass::ID);
    v13 = *(_QWORD **)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::BasicAAWrapperPass::ID)+ 32);
    v14 = operator new();
    *(_QWORD *)v14 = &unk_1E8134220;
    *(_QWORD *)(v14 + 8) = v13;
    *v13 = v10;
    v52 = (void **)v14;
    v15 = *(uint64_t **)(v10 + 16);
    if ((unint64_t)v15 < *(_QWORD *)(v10 + 24))
    {
      *v15 = v14;
      v16 = (char *)(v15 + 1);
    }
    else
    {
      v16 = sub_1C4D80F34((char **)(v10 + 8), &v52);
    }
    *(_QWORD *)(v10 + 16) = v16;
  }
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::GPUAAWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v18 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::GPUAAWrapperPass::ID);
    if (v18)
    {
      v19 = *((_QWORD *)this + 4);
      v20 = *(_QWORD **)(v18 + 32);
      v21 = operator new();
      *(_QWORD *)v21 = &unk_1E8133F60;
      *(_QWORD *)(v21 + 8) = v20;
      *v20 = v19;
      v52 = (void **)v21;
      v22 = *(uint64_t **)(v19 + 16);
      if ((unint64_t)v22 < *(_QWORD *)(v19 + 24))
      {
        *v22 = v21;
        v23 = (char *)(v22 + 1);
      }
      else
      {
        v23 = sub_1C4D80F34((char **)(v19 + 8), &v52);
      }
      *(_QWORD *)(v19 + 16) = v23;
    }
  }
  v24 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::ScopedNoAliasAAWrapperPass::ID, 1);
  if (v24)
  {
    v25 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v24 + 96))(v24, &llvm::ScopedNoAliasAAWrapperPass::ID);
    if (v25)
    {
      v26 = *((_QWORD *)this + 4);
      v27 = *(_QWORD **)(v25 + 32);
      v28 = operator new();
      *(_QWORD *)v28 = &unk_1E8134280;
      *(_QWORD *)(v28 + 8) = v27;
      *v27 = v26;
      v52 = (void **)v28;
      v29 = *(uint64_t **)(v26 + 16);
      if ((unint64_t)v29 < *(_QWORD *)(v26 + 24))
      {
        *v29 = v28;
        v30 = (char *)(v29 + 1);
      }
      else
      {
        v30 = sub_1C4D80F34((char **)(v26 + 8), &v52);
      }
      *(_QWORD *)(v26 + 16) = v30;
    }
  }
  v31 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::TypeBasedAAWrapperPass::ID, 1);
  if (v31)
  {
    v32 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v31 + 96))(v31, &llvm::TypeBasedAAWrapperPass::ID);
    if (v32)
    {
      v33 = *((_QWORD *)this + 4);
      v34 = *(_QWORD **)(v32 + 32);
      v35 = operator new();
      *(_QWORD *)v35 = &unk_1E81342E0;
      *(_QWORD *)(v35 + 8) = v34;
      *v34 = v33;
      v52 = (void **)v35;
      v36 = *(uint64_t **)(v33 + 16);
      if ((unint64_t)v36 >= *(_QWORD *)(v33 + 24))
      {
        v37 = sub_1C4D80F34((char **)(v33 + 8), &v52);
      }
      else
      {
        *v36 = v35;
        v37 = (char *)(v36 + 1);
      }
      *(_QWORD *)(v33 + 16) = v37;
    }
  }
  v38 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::objcarc::ObjCARCAAWrapperPass::ID, 1);
  if (v38)
  {
    v47 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v38 + 96))(v38, &llvm::objcarc::ObjCARCAAWrapperPass::ID);
    if (v47)
      sub_1C61775CC(*((_QWORD *)this + 4), *(_QWORD **)(v47 + 32));
  }
  v39 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::GlobalsAAWrapperPass::ID, 1);
  if (v39)
  {
    v48 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v39 + 96))(v39, &llvm::GlobalsAAWrapperPass::ID);
    if (v48)
      sub_1C4D916B4(*((_QWORD *)this + 4), *(_QWORD **)(v48 + 32));
  }
  v40 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::SCEVAAWrapperPass::ID, 1);
  if (v40)
  {
    v49 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v40 + 96))(v40, &llvm::SCEVAAWrapperPass::ID);
    if (v49)
      sub_1C617764C(*((_QWORD *)this + 4), *(_QWORD **)(v49 + 32));
  }
  v41 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::CFLAndersAAWrapperPass::ID, 1);
  if (v41)
  {
    v50 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v41 + 96))(v41, &llvm::CFLAndersAAWrapperPass::ID);
    if (v50)
      sub_1C61776CC(*((_QWORD *)this + 4), *(_QWORD **)(v50 + 32));
  }
  v42 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::CFLSteensAAWrapperPass::ID, 1);
  if (v42)
  {
    v51 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v42 + 96))(v42, &llvm::CFLSteensAAWrapperPass::ID);
    if (v51)
      sub_1C617774C(*((_QWORD *)this + 4), *(_QWORD **)(v51 + 32));
  }
  v43 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::ExternalAAWrapperPass::ID, 1);
  if (v43)
  {
    v44 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v43 + 96))(v43, &llvm::ExternalAAWrapperPass::ID);
    if (v44)
    {
      v45 = *(_QWORD *)(v44 + 56);
      if (v45)
        (*(void (**)(uint64_t, llvm::AAResultsWrapperPass *, llvm::Function *, _QWORD))(*(_QWORD *)v45 + 48))(v45, this, a2, *((_QWORD *)this + 4));
    }
  }
  return 0;
}

uint64_t sub_1C4D914E8(uint64_t a1, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7[2];
  int v8;
  uint64_t v9[2];
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *__src;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v9[0] = 0;
  v9[1] = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  llvm::TargetLibraryAnalysis::run(a1 + 32, a2, (uint64_t)&v14);
  *(_QWORD *)(a1 + 240) = v14;
  if (*(_BYTE *)(a1 + 320))
  {
    if ((uint64_t *)(a1 + 240) == &v14)
    {
LABEL_10:
      *(_DWORD *)(a1 + 312) = v18;
      goto LABEL_11;
    }
    v3 = (void **)(a1 + 248);
    v4 = v16;
    v5 = *(unsigned int *)(a1 + 256);
    if (v5 >= v16)
    {
      if (v16)
        memmove(*v3, __src, 8 * v16);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 260) < v16)
    {
      *(_DWORD *)(a1 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 248, a1 + 264, v4, 8);
    }
    else if ((_DWORD)v5)
    {
      memmove(*v3, __src, 8 * v5);
LABEL_7:
      if (v5 != v16)
        memcpy((char *)*v3 + 8 * v5, (char *)__src + 8 * v5, 8 * v16 - 8 * v5);
LABEL_9:
      *(_DWORD *)(a1 + 256) = v4;
      goto LABEL_10;
    }
    v5 = 0;
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 248) = a1 + 264;
  *(_QWORD *)(a1 + 256) = 0x600000000;
  if (v16)
    sub_1C49DA960(a1 + 248, (uint64_t)&__src);
  *(_DWORD *)(a1 + 312) = v18;
  *(_BYTE *)(a1 + 320) = 1;
LABEL_11:
  if (__src != &v17)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v9);
  sub_1C4D8B52C(v7);
  return a1 + 240;
}

char *sub_1C4D916B4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *result;
  _QWORD *v7;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E81343A0;
  v4[1] = a2;
  *a2 = a1;
  v7 = v4;
  v5 = *(_QWORD **)(a1 + 16);
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24))
  {
    result = sub_1C4D80F34((char **)(a1 + 8), &v7);
  }
  else
  {
    *v5 = v4;
    result = (char *)(v5 + 1);
  }
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t llvm::AAManager::run@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t (**v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  result = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetLibraryAnalysis::Key, a2);
  *(_QWORD *)a4 = result + 8;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  v9 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v9)
  {
    v10 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))a1;
    v11 = 8 * v9;
    do
    {
      v12 = *v10++;
      result = v12(a2, a3, a4);
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

_QWORD *llvm::createLegacyPMAAResults@<X0>(llvm *this@<X0>, llvm::Pass *a2@<X1>, llvm::Function *a3@<X2>, llvm::BasicAAResult *a4@<X3>, uint64_t a5@<X8>)
{
  char **v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  uint64_t AnalysisPass;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v9 = (char **)**((_QWORD **)this + 1);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != llvm::TargetLibraryInfoWrapperPass::ID);
  v11 = (*(uint64_t (**)(_QWORD, char *, llvm::Function *, llvm::BasicAAResult *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), llvm::TargetLibraryInfoWrapperPass::ID, a3, a4);
  *(_QWORD *)a5 = sub_1C4D914E8(v11, (uint64_t)a2);
  *(_OWORD *)(a5 + 8) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  if (!byte_1ED82C5E0)
  {
    v12 = (_QWORD *)operator new();
    *v12 = &unk_1E8134220;
    v12[1] = a3;
    *(_QWORD *)a3 = a5;
    v36 = v12;
    v13 = *(_QWORD **)(a5 + 16);
    if ((unint64_t)v13 < *(_QWORD *)(a5 + 24))
    {
      *v13 = v12;
      v14 = (char *)(v13 + 1);
    }
    else
    {
      v14 = sub_1C4D80F34((char **)(a5 + 8), &v36);
    }
    *(_QWORD *)(a5 + 16) = v14;
  }
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::ScopedNoAliasAAWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v16 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::ScopedNoAliasAAWrapperPass::ID);
    if (v16)
    {
      v17 = *(uint64_t **)(v16 + 32);
      v18 = (_QWORD *)operator new();
      *v18 = &unk_1E8134280;
      v18[1] = v17;
      *v17 = a5;
      v36 = v18;
      v19 = *(_QWORD **)(a5 + 16);
      if ((unint64_t)v19 < *(_QWORD *)(a5 + 24))
      {
        *v19 = v18;
        v20 = (char *)(v19 + 1);
      }
      else
      {
        v20 = sub_1C4D80F34((char **)(a5 + 8), &v36);
      }
      *(_QWORD *)(a5 + 16) = v20;
    }
  }
  v21 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::TypeBasedAAWrapperPass::ID, 1);
  if (v21)
  {
    v22 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v21 + 96))(v21, &llvm::TypeBasedAAWrapperPass::ID);
    if (v22)
    {
      v23 = *(uint64_t **)(v22 + 32);
      v24 = (_QWORD *)operator new();
      *v24 = &unk_1E81342E0;
      v24[1] = v23;
      *v23 = a5;
      v36 = v24;
      v25 = *(_QWORD **)(a5 + 16);
      if ((unint64_t)v25 >= *(_QWORD *)(a5 + 24))
      {
        v26 = sub_1C4D80F34((char **)(a5 + 8), &v36);
      }
      else
      {
        *v25 = v24;
        v26 = (char *)(v25 + 1);
      }
      *(_QWORD *)(a5 + 16) = v26;
    }
  }
  v27 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::objcarc::ObjCARCAAWrapperPass::ID, 1);
  if (v27)
  {
    v32 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v27 + 96))(v27, &llvm::objcarc::ObjCARCAAWrapperPass::ID);
    if (v32)
      sub_1C61775CC(a5, *(_QWORD **)(v32 + 32));
  }
  v28 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::GlobalsAAWrapperPass::ID, 1);
  if (v28)
  {
    v33 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v28 + 96))(v28, &llvm::GlobalsAAWrapperPass::ID);
    if (v33)
      sub_1C4D916B4(a5, *(_QWORD **)(v33 + 32));
  }
  v29 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::CFLAndersAAWrapperPass::ID, 1);
  if (v29)
  {
    v34 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v29 + 96))(v29, &llvm::CFLAndersAAWrapperPass::ID);
    if (v34)
      sub_1C61776CC(a5, *(_QWORD **)(v34 + 32));
  }
  v30 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::CFLSteensAAWrapperPass::ID, 1);
  if (v30)
  {
    v35 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v30 + 96))(v30, &llvm::CFLSteensAAWrapperPass::ID);
    if (v35)
      sub_1C617774C(a5, *(_QWORD **)(v35 + 32));
  }
  result = (_QWORD *)llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::ExternalAAWrapperPass::ID, 1);
  if (result)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, void *))(*result + 96))(result, &llvm::ExternalAAWrapperPass::ID);
    if (result)
    {
      result = (_QWORD *)result[7];
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, llvm *, llvm::Pass *, uint64_t))(*result + 48))(result, this, a2, a5);
    }
  }
  return result;
}

uint64_t llvm::isNoAliasCall(llvm *this, const llvm::Value *a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;

  v2 = *((unsigned __int8 *)this + 16);
  if (v2 < 0x1C)
    return 0;
  v3 = v2 - 33;
  v4 = v3 >= 0x33;
  v6 = v3 == 51;
  v5 = (1 << v3) & 0x8000000000041;
  v6 = !v6 && v4 || v5 == 0;
  if (v6)
    return 0;
  else
    return sub_1C4D91DD8((uint64_t)this, 19);
}

uint64_t llvm::isIdentifiedObject(llvm *this, const llvm::Value *a2)
{
  unsigned int v2;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((unsigned __int8 *)this + 16);
  if (v2 == 59)
    return 1;
  if (v2 <= 3 && v2 != 1)
    return 1;
  if (v2 >= 0x1C)
  {
    v5 = v2 - 33;
    v6 = v5 > 0x33;
    v7 = (1 << v5) & 0x8000000000041;
    if (v6 || v7 == 0)
      return 0;
    if ((sub_1C4D91DD8((uint64_t)this, 19) & 1) != 0)
      return 1;
    v2 = *((unsigned __int8 *)this + 16);
  }
  if (v2 != 21)
    return 0;
  if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
    return 0;
  v10 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
  if (!v10)
    return 0;
  v11 = *((_DWORD *)this + 8) + 2;
  if (v11 < *(_DWORD *)(v10 + 8))
  {
    v12 = *(_QWORD *)(v10 + 8 * v11 + 40);
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 14) & 8) != 0)
        return 1;
    }
  }
  if (v11 >= *(_DWORD *)(v10 + 8))
    return 0;
  v13 = *(_QWORD *)(v10 + 8 * v11 + 40);
  if (!v13)
    return 0;
  return (*(unsigned __int8 *)(v13 + 20) >> 5) & 1;
}

uint64_t llvm::isNotVisibleOnUnwind(llvm *this, const llvm::Value *a2, BOOL *a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;

  *(_BYTE *)a2 = 0;
  v3 = *((unsigned __int8 *)this + 16);
  if (v3 == 59)
    return 1;
  if (v3 == 21)
  {
    if (*(_BYTE *)(*(_QWORD *)this + 8) == 15)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 112);
      if (v4)
      {
        v5 = *((_DWORD *)this + 8) + 2;
        if (v5 < *(_DWORD *)(v4 + 8))
        {
          v6 = *(_QWORD *)(v4 + 8 * v5 + 40);
          if (v6)
            return (*(unsigned __int8 *)(v6 + 20) >> 5) & 1;
        }
      }
    }
    return 0;
  }
  if (v3 < 0x1C)
    return 0;
  v8 = v3 - 33;
  v9 = v8 > 0x33;
  v10 = (1 << v8) & 0x8000000000041;
  if (v9 || v10 == 0)
    return 0;
  result = sub_1C4D91DD8((uint64_t)this, 19);
  if ((_DWORD)result)
  {
    result = 1;
    *(_BYTE *)a2 = 1;
  }
  return result;
}

uint64_t sub_1C4D91D40(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 == 84)
  {
    v4 = 0;
  }
  else if (v3 == 39)
  {
    v4 = (*(_DWORD *)(a1 + 80) + 1);
  }
  else
  {
    v4 = 2;
  }
  v5 = 0;
  v6 = *(_DWORD *)(a1 + 20);
  v7 = -(uint64_t)(v6 & 0x7FFFFFF);
  if (v6 < 0)
  {
    v9 = a1 - 32 * (v6 & 0x7FFFFFF);
    v10 = *(_QWORD *)(v9 - 8);
    if ((v10 & 0xFFFFFFFF0) != 0)
      v5 = *(_DWORD *)(v9 - 12) - *(_DWORD *)(v9 - v10);
    else
      v5 = 0;
  }
  if (((-32 * v4 + 32 * (unint64_t)-v5 - 32 * v7 - 32) >> 5) <= a2)
    return sub_1C6177A78(a1, a2, a3);
  else
    return llvm::CallBase::paramHasAttr(a1, a2, a3);
}

uint64_t sub_1C4D91DD8(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    if (*(_DWORD *)(v2 + 8) >= 2u)
    {
      v6 = *(_QWORD *)(v2 + 48);
      if (v6)
      {
        if (((*(unsigned __int8 *)(v6 + a2 / 8 + 12) >> (a2 & 7)) & 1) != 0)
          return 1;
      }
    }
  }
  v3 = *(_QWORD *)(a1 - 32);
  if (v3
    && !*(_BYTE *)(v3 + 16)
    && *(_QWORD *)(v3 + 24) == *(_QWORD *)(a1 + 72)
    && (v4 = *(_QWORD *)(v3 + 112)) != 0
    && *(_DWORD *)(v4 + 8) >= 2u
    && (v7 = *(_QWORD *)(v4 + 48)) != 0)
  {
    return (*(unsigned __int8 *)(v7 + a2 / 8 + 12) >> (a2 & 7)) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::AnalysisManager<llvm::Function>::Invalidator::invalidate(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  _BYTE v18[8];
  uint64_t v19[3];

  v8 = sub_1C4D91F84(*a1, a2);
  v9 = *a1;
  v10 = *a1 + 8;
  if ((*(_BYTE *)*a1 & 1) != 0)
  {
    v11 = 8;
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 16);
  }
  if (v10 + 16 * v11 == v8)
  {
    v12 = a1[1];
    v19[0] = a2;
    v19[1] = a3;
    v17 = 0;
    if (sub_1C4D920B0((uint64_t *)v12, v19, &v17))
      v13 = v17;
    else
      v13 = *(_QWORD *)v12 + 24 * *(unsigned int *)(v12 + 16);
    v14 = *a1;
    v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(v13 + 16) + 24)
                                                                         + 16))(*(_QWORD *)(*(_QWORD *)(v13 + 16) + 24), a3, a4, a1);
    v17 = a2;
    v18[0] = v15;
    sub_1C4D921A4(v14, &v17, v18, (uint64_t)v19);
    v8 = v19[0];
  }
  return *(unsigned __int8 *)(v8 + 8);
}

uint64_t sub_1C4D91F84(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = 0;
  v3 = sub_1C4D92000(a1, &v7, &v8);
  v4 = a1 + 8;
  if (v3)
    return v8;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v5 = 8;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

uint64_t sub_1C4D92000(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_16;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4D920B0(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  uint64_t result;
  BOOL v20;
  unsigned int v22;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = a2[1];
    v7 = ((v6 >> 4) ^ (v6 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
       + ~((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
    v11 = v3 - 1;
    v12 = (v3 - 1) & v10;
    v13 = (_QWORD *)(*a1 + 24 * v12);
    v15 = *v13;
    v14 = v13[1];
    if (v5 == *v13 && v6 == v14)
    {
      result = 1;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      result = 1;
      while (v15 != -4096 || v14 != -4096)
      {
        if (v17)
          v20 = 0;
        else
          v20 = v14 == -8192;
        if (v20 && v15 == -8192)
          v17 = v13;
        v22 = v12 + v18++;
        v12 = v22 & v11;
        v13 = (_QWORD *)(v4 + 24 * (v22 & v11));
        v15 = *v13;
        v14 = v13[1];
        if (v5 == *v13 && v6 == v14)
          goto LABEL_24;
      }
      result = 0;
      if (v17)
        v13 = v17;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_24:
  *a3 = v13;
  return result;
}

uint64_t sub_1C4D921A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_1C4D92268(a1, a2, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v14 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v15 = 8;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(unsigned int *)(a1 + 16);
    }
    v13 = 0;
    v12 = v14 + 16 * v15;
  }
  else
  {
    result = (uint64_t)sub_1C4D92310((_DWORD *)a1, (uint64_t)a2, a2, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_BYTE *)(result + 8) = *a3;
    v10 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v11 = 8;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(unsigned int *)(a1 + 16);
    }
    v12 = v10 + 16 * v11;
    v13 = 1;
  }
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v12;
  *(_BYTE *)(a4 + 16) = v13;
  return result;
}

uint64_t sub_1C4D92268(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4D92310(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C4D923D0((uint64_t)a1, v7);
  v9 = 0;
  sub_1C4D92268((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C4D923D0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4D92548(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      v9[8] = *(_BYTE *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4D92548(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C4D92548(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4D92268((uint64_t)v5, (_QWORD *)a2, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_BYTE *)v10 + 8) = *(_BYTE *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_1C4D9260C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D92620(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(result + 8) = a2;
  return result;
}

uint64_t sub_1C4D9262C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return llvm::BasicAAResult::aliasCheck(*(_QWORD *)(a1 + 8), *(llvm::Value **)a2, *(_QWORD *)(a2 + 8), *(llvm::Value **)a3, *(_QWORD *)(a3 + 8), a4);
}

uint64_t sub_1C4D92648(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  return llvm::BasicAAResult::pointsToConstantMemory(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C4D92650(uint64_t a1, const llvm::CallBase *a2, int a3)
{
  return llvm::BasicAAResult::getArgModRefInfo(*(llvm::BasicAAResult **)(a1 + 8), a2, a3);
}

uint64_t sub_1C4D92658(uint64_t a1, const llvm::CallBase *a2)
{
  return llvm::BasicAAResult::getModRefBehavior(*(llvm::BasicAAResult **)(a1 + 8), a2);
}

uint64_t sub_1C4D92660(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  unsigned int v3;
  char v4;

  v2 = *(_BYTE **)(a2 + 112);
  if (!v2)
    return 63;
  if ((v2[17] & 0x10) != 0)
    return 4;
  if ((v2[17] & 0x20) != 0)
  {
    v3 = 61;
  }
  else if ((v2[20] & 4) != 0)
  {
    v3 = 62;
  }
  else
  {
    v3 = 63;
  }
  if ((v2[12] & 8) != 0)
    return v3 & 0xF;
  v4 = v2[13];
  if ((v4 & 8) != 0)
    return v3 & 0x17;
  if ((v4 & 0x10) != 0)
    return v3 & 0x1F;
  return v3;
}

uint64_t sub_1C4D926D0(uint64_t a1, uint64_t a2, llvm **a3, uint64_t a4)
{
  return llvm::BasicAAResult::getModRefInfo(*(_QWORD *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C4D926D8(uint64_t a1, uint64_t a2, const llvm::CallBase *a3)
{
  return llvm::BasicAAResult::getModRefInfo(*(llvm::BasicAAResult **)(a1 + 8), a2, a3);
}

void sub_1C4D926E0()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D926F4(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(result + 8) = a2;
  return result;
}

uint64_t sub_1C4D92700(llvm::ScopedNoAliasAAResult *a1, uint64_t a2, uint64_t a3)
{
  const llvm::MDNode *v3;
  const llvm::MDNode *v4;
  uint64_t result;

  if (!byte_1ED82EC88)
    return 1;
  v3 = *(const llvm::MDNode **)(a2 + 40);
  v4 = *(const llvm::MDNode **)(a3 + 32);
  result = llvm::ScopedNoAliasAAResult::mayAliasInScopes(a1, *(const llvm::MDNode **)(a2 + 32), *(const llvm::MDNode **)(a3 + 40));
  if ((_DWORD)result)
    return llvm::ScopedNoAliasAAResult::mayAliasInScopes((llvm::ScopedNoAliasAAResult *)result, v4, v3);
  return result;
}

uint64_t sub_1C4D9274C()
{
  return 0;
}

uint64_t sub_1C4D92754()
{
  return 7;
}

uint64_t sub_1C4D9275C()
{
  return 63;
}

uint64_t sub_1C4D92764()
{
  return 63;
}

uint64_t sub_1C4D9276C(uint64_t a1, uint64_t ***a2, uint64_t a3)
{
  return llvm::ScopedNoAliasAAResult::getModRefInfo(*(uint64_t *****)(a1 + 8), a2, a3);
}

uint64_t sub_1C4D92774(uint64_t a1, uint64_t ***a2, uint64_t ***a3)
{
  return llvm::ScopedNoAliasAAResult::getModRefInfo(*(uint64_t *****)(a1 + 8), a2, a3);
}

void sub_1C4D9277C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D92790(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(result + 8) = a2;
  return result;
}

BOOL sub_1C4D9279C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return !byte_1ED82EBC0 || sub_1C4F7FD38(*(_QWORD *)(a2 + 16), *(_QWORD *)(a3 + 16), 0);
}

uint64_t sub_1C4D927D0(uint64_t a1, uint64_t a2)
{
  return llvm::TypeBasedAAResult::pointsToConstantMemory(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1C4D927D8()
{
  return 7;
}

uint64_t sub_1C4D927E0(uint64_t a1, const llvm::CallBase *a2)
{
  return llvm::TypeBasedAAResult::getModRefBehavior(*(llvm::TypeBasedAAResult **)(a1 + 8), a2);
}

uint64_t sub_1C4D927E8()
{
  return 63;
}

uint64_t sub_1C4D927F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::TypeBasedAAResult::getModRefInfo(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_1C4D927F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return llvm::TypeBasedAAResult::getModRefInfo(*(_QWORD *)(a1 + 8), a2, a3);
}

void sub_1C4D92800()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D92814(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(result + 8) = a2;
  return result;
}

BOOL sub_1C4D92820(uint64_t a1, llvm::Value **a2, llvm::Value **a3)
{
  return llvm::GlobalsAAResult::alias(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_1C4D92828()
{
  return 0;
}

uint64_t sub_1C4D92830()
{
  return 7;
}

uint64_t sub_1C4D92838(uint64_t a1, uint64_t a2)
{
  return llvm::GlobalsAAResult::getModRefBehavior(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1C4D92840(uint64_t a1, const Function *a2)
{
  return llvm::GlobalsAAResult::getModRefBehavior(*(llvm::GlobalsAAResult **)(a1 + 8), a2);
}

uint64_t sub_1C4D92848(uint64_t a1, uint64_t a2, llvm **a3)
{
  return llvm::GlobalsAAResult::getModRefInfo(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_1C4D92850()
{
  return 7;
}

uint64_t sub_1C4D92858()
{
  char v1;
  char *v2;
  int v3;

  v3 = 1;
  v1 = 0;
  v2 = &v1;
  sub_1C6177B9C(&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::DisableBasicAA, &dword_1C475E000);
}

_QWORD *llvm::AAEvaluator::runInternal(llvm::AAEvaluator *this, llvm::Function *a2, llvm::AAResults *a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;
  char *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  void (**v12)(llvm::raw_ostream *__hidden);
  int v13;
  void (*v14)(llvm::raw_ostream *__hidden);
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  BOOL v24;
  BOOL v31;
  llvm::raw_ostream *v32;
  llvm::raw_ostream *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Function *v40;
  int v41;
  int v42;
  void (***v43)(llvm::raw_ostream *__hidden);
  void (***v44)(llvm::raw_ostream *__hidden);
  _QWORD *v45;
  const char *v46;
  size_t v47;
  size_t v48;
  _WORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void (***v54)(llvm::raw_ostream *__hidden);
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t *v58;
  void (**v59)(llvm::raw_ostream *__hidden);
  uint64_t v60;
  unint64_t v61;
  int v62;
  int v63;
  char *v64;
  _QWORD *v65;
  void (**v66)(llvm::raw_ostream *__hidden);
  void (*v67)(llvm::raw_ostream *__hidden);
  unint64_t v68;
  llvm::Value *v69;
  unint64_t v70;
  const llvm::Module *v71;
  unint64_t v72;
  void **v73;
  void *v74;
  void *v75;
  void **v76;
  size_t v77;
  llvm *v78;
  _BOOL4 v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  llvm::raw_ostream *v83;
  _WORD *v84;
  llvm::raw_ostream *v85;
  _WORD *v86;
  llvm::raw_ostream *v87;
  llvm *v88;
  llvm::raw_ostream *v89;
  llvm::raw_ostream *v90;
  uint64_t v91;
  _BYTE *v92;
  llvm::raw_ostream *v93;
  _WORD *v94;
  void **v95;
  size_t v96;
  llvm::raw_ostream *v97;
  _WORD *v98;
  llvm::raw_ostream *v99;
  llvm *v100;
  llvm::raw_ostream *v101;
  llvm::raw_ostream *v102;
  uint64_t v103;
  _BYTE *v104;
  llvm::raw_ostream *v105;
  _WORD *v106;
  void **v107;
  size_t v108;
  llvm::raw_ostream *v109;
  _BYTE *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  void (**v115)(llvm::raw_ostream *__hidden);
  uint64_t v116;
  int v117;
  unint64_t v118;
  void (**v119)(llvm::raw_ostream *__hidden);
  uint64_t v120;
  int v121;
  unint64_t v122;
  llvm *v123;
  int v124;
  _QWORD *v125;
  llvm::raw_ostream *v126;
  llvm::raw_ostream *v127;
  _WORD *v128;
  _WORD *v129;
  uint64_t v130;
  _BYTE *v131;
  llvm::raw_ostream *v132;
  llvm::raw_ostream *v133;
  _WORD *v134;
  _WORD *v135;
  uint64_t v136;
  _BYTE *v137;
  llvm::raw_ostream *v138;
  llvm::raw_ostream *v139;
  _WORD *v140;
  _WORD *v141;
  uint64_t v142;
  _BYTE *v143;
  llvm::raw_ostream *v144;
  llvm::raw_ostream *v145;
  _WORD *v146;
  _WORD *v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t ****v150;
  uint64_t ****j;
  uint64_t ***v152;
  void (**v153)(llvm::raw_ostream *__hidden);
  uint64_t v154;
  int v155;
  unint64_t v156;
  uint64_t ***v157;
  void (**v158)(llvm::raw_ostream *__hidden);
  uint64_t v159;
  int v160;
  unint64_t v161;
  llvm *v162;
  int v163;
  _QWORD *v164;
  llvm::Value *v165;
  llvm::raw_ostream *v166;
  llvm::raw_ostream *v167;
  _WORD *v168;
  _WORD *v169;
  uint64_t v170;
  _BYTE *v171;
  llvm::Value *v172;
  llvm::raw_ostream *v173;
  llvm::raw_ostream *v174;
  _WORD *v175;
  _WORD *v176;
  uint64_t v177;
  _BYTE *v178;
  llvm::Value *v179;
  llvm::raw_ostream *v180;
  llvm::raw_ostream *v181;
  _WORD *v182;
  _WORD *v183;
  uint64_t v184;
  _BYTE *v185;
  llvm::Value *v186;
  llvm::raw_ostream *v187;
  llvm::raw_ostream *v188;
  _WORD *v189;
  _WORD *v190;
  uint64_t v191;
  _BYTE *v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  llvm::Function *v196;
  void (***v197)(llvm::raw_ostream *__hidden);
  void (***v198)(llvm::raw_ostream *__hidden);
  llvm::Value *v199;
  uint64_t v200;
  unint64_t v201;
  int v202;
  llvm *ModRefInfo;
  char *v204;
  const char *v205;
  _QWORD *v206;
  void (**v207)(llvm::raw_ostream *__hidden);
  void (*v208)(llvm::raw_ostream *__hidden);
  unsigned int v209;
  llvm::raw_ostream *v210;
  llvm::raw_ostream *v211;
  _WORD *v212;
  _QWORD *v213;
  llvm *v214;
  llvm *v215;
  unsigned int v216;
  llvm::raw_ostream *v217;
  llvm *v218;
  llvm::raw_ostream *v219;
  llvm::raw_ostream *v220;
  uint64_t v221;
  _BYTE *v222;
  llvm::raw_ostream *v223;
  _WORD *v224;
  llvm::raw_ostream *v225;
  llvm *v226;
  llvm::raw_ostream *v227;
  llvm::raw_ostream *v228;
  _DWORD *v229;
  _BYTE *v230;
  uint64_t v231;
  const llvm::CallBase **v232;
  const llvm::CallBase **v233;
  const llvm::CallBase **v234;
  const llvm::CallBase *v235;
  uint64_t v236;
  llvm::Value *v237;
  llvm *v238;
  _QWORD *v239;
  llvm::raw_ostream *v240;
  llvm::raw_ostream *v241;
  _WORD *v242;
  _DWORD *v243;
  _WORD *v244;
  uint64_t v245;
  _BYTE *v246;
  llvm::raw_ostream *v247;
  llvm::raw_ostream *v248;
  _WORD *v249;
  _QWORD *v250;
  _WORD *v251;
  uint64_t v252;
  _BYTE *v253;
  llvm::raw_ostream *v254;
  llvm::raw_ostream *v255;
  _WORD *v256;
  uint64_t v257;
  _WORD *v258;
  uint64_t v259;
  _BYTE *v260;
  llvm::raw_ostream *v261;
  llvm::raw_ostream *v262;
  _WORD *v263;
  uint64_t v264;
  _WORD *v265;
  uint64_t v266;
  _BYTE *v267;
  llvm::raw_ostream *v268;
  llvm::raw_ostream *v269;
  _WORD *v270;
  void *v271;
  _WORD *v272;
  uint64_t v273;
  _BYTE *v274;
  llvm::raw_ostream *v275;
  llvm::raw_ostream *v276;
  _WORD *v277;
  uint64_t v278;
  _WORD *v279;
  uint64_t v280;
  _BYTE *v281;
  llvm::raw_ostream *v282;
  llvm::raw_ostream *v283;
  _WORD *v284;
  _QWORD *v285;
  _WORD *v286;
  uint64_t v287;
  _BYTE *v288;
  llvm::raw_ostream *v289;
  llvm::raw_ostream *v290;
  _WORD *v291;
  _QWORD *v292;
  _WORD *v293;
  uint64_t v294;
  _BYTE *v295;
  llvm::AAEvaluator *v297;
  uint64_t *v298;
  llvm::Value **v299;
  uint64_t v300;
  llvm::Function *v301;
  void (***v302)(llvm::raw_ostream *__hidden);
  llvm::Type *v303;
  void (***v304)(llvm::raw_ostream *__hidden);
  const llvm::Module *v305;
  uint64_t v306;
  llvm::Value *v307;
  unsigned int v308;
  llvm::Value **v309;
  llvm *v310;
  unint64_t v311;
  unint64_t v312;
  llvm::Value *v313;
  llvm::Type *v314;
  llvm::Value *v315;
  llvm::Value *v316;
  llvm::Value *v317;
  llvm::Value *v318;
  llvm::Value *v319;
  uint64_t ****v320;
  unint64_t v321;
  llvm::AAResults *v322;
  _QWORD v323[2];
  int v324;
  void *v325;
  uint64_t *v326;
  uint64_t v327;
  _QWORD v328[2];
  int v329;
  void *v330;
  llvm::Value *v331;
  uint64_t v332;
  _QWORD v333[2];
  int v334;
  void (***v335)(llvm::raw_ostream *__hidden);
  void (***v336)(llvm::raw_ostream *__hidden);
  uint64_t v337;
  void (**v338)(llvm::raw_ostream *__hidden);
  unint64_t v339;
  __int128 v340;
  __int128 v341;
  uint64_t v342;
  int v343;
  void **v344;
  void (**v345)(llvm::raw_ostream *__hidden);
  unint64_t v346;
  __int128 v347;
  __int128 v348;
  uint64_t v349;
  int v350;
  void **v351;
  void *__p[2];
  uint64_t v353;
  void *v354[2];
  uint64_t v355;
  _QWORD v356[17];
  void *v357;
  uint64_t v358;
  _QWORD v359[18];

  v359[16] = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a2 + 5);
  v297 = this;
  ++*(_QWORD *)this;
  v333[0] = 0;
  v333[1] = 0;
  v334 = 0;
  v336 = 0;
  v337 = 0;
  v335 = 0;
  v356[0] = 1;
  v6 = 1;
  v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v356[v6] = v7;
    v6 += 2;
  }
  while (v6 != 17);
  v357 = v359;
  v358 = 0x1000000000;
  v328[0] = 0;
  v328[1] = 0;
  v329 = 0;
  v331 = 0;
  v332 = 0;
  v330 = 0;
  v8 = (char *)a2 + 72;
  v323[0] = 0;
  v323[1] = 0;
  v324 = 0;
  v326 = 0;
  v327 = 0;
  v325 = 0;
  for (i = *((_QWORD *)a2 + 10); ; i = *(_QWORD *)(i + 8))
  {
    if ((char *)i == v8)
      goto LABEL_33;
    v10 = i - 24;
    if (!i)
      v10 = 0;
    v11 = *(_QWORD *)(v10 + 48);
    if (v11 != v10 + 40)
      break;
  }
  while (1)
  {
    if (v11)
      v12 = (void (**)(llvm::raw_ostream *__hidden))(v11 - 24);
    else
      v12 = 0;
    v13 = *((unsigned __int8 *)v12 + 16);
    if (v11 && v13 == 60)
    {
      v14 = *v12;
      v345 = (void (**)(llvm::raw_ostream *__hidden))*(v12 - 4);
      v346 = (unint64_t)v14;
      sub_1C4D9539C(v333, (uint64_t *)&v345);
      v345 = v12;
      v15 = v328;
LABEL_18:
      this = (llvm::AAEvaluator *)sub_1C4D954B8(v15, &v345);
      goto LABEL_19;
    }
    if (v11 && v13 == 61)
    {
      v16 = *(_QWORD *)*(v12 - 8);
      v345 = (void (**)(llvm::raw_ostream *__hidden))*(v12 - 4);
      v346 = v16;
      sub_1C4D9539C(v333, (uint64_t *)&v345);
      v345 = v12;
      v15 = v323;
      goto LABEL_18;
    }
    v19 = v13 - 33;
    v20 = v19 > 0x33;
    v21 = (1 << v19) & 0x8000000000041;
    if (!v20 && v21 != 0)
    {
      v345 = (void (**)(llvm::raw_ostream *__hidden))(v11 - 24);
      this = (llvm::AAEvaluator *)sub_1C4D955D4((uint64_t)v356, (uint64_t *)&v345);
    }
LABEL_19:
    v11 = *(_QWORD *)(v11 + 8);
    v17 = i - 24;
    if (!i)
      v17 = 0;
    if (v11 == v17 + 40)
      break;
LABEL_26:
    if ((char *)i == v8)
      goto LABEL_33;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if ((char *)i == v8)
      break;
    v18 = i - 24;
    if (!i)
      v18 = 0;
    v11 = *(_QWORD *)(v18 + 48);
    if (v11 != v18 + 40)
      goto LABEL_26;
  }
LABEL_33:
  v23 = v5 + 272;
  if (byte_1ED7EF3D8)
    v24 = 0;
  else
    v24 = byte_1ED7EF498 == 0;
  v31 = v24
     && byte_1ED7EF558 == 0
     && byte_1ED7EF618 == 0
     && byte_1ED7EF6D8 == 0
     && byte_1ED7EF798 == 0
     && byte_1ED7EF918 == 0
     && byte_1ED7EF858 == 0
     && byte_1ED7EF9D8 == 0;
  v301 = a2;
  if (v31)
  {
    v44 = v335;
    v43 = v336;
  }
  else
  {
    v32 = (llvm::raw_ostream *)llvm::errs(this);
    v33 = v32;
    v34 = *((_QWORD *)v32 + 4);
    if ((unint64_t)(*((_QWORD *)v32 + 3) - v34) > 9)
    {
      *(_WORD *)(v34 + 8) = 8250;
      *(_QWORD *)v34 = *(_QWORD *)"Function: ";
      *((_QWORD *)v32 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v32, "Function: ", 0xAuLL);
    }
    if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
    {
      v35 = ***(_QWORD ***)a2;
      v36 = *(_QWORD *)(v35 + 152);
      v37 = *(unsigned int *)(v35 + 168);
      if (!(_DWORD)v37)
        goto LABEL_68;
      LODWORD(v38) = (v37 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v39 = v36 + 16 * v38;
      v40 = *(llvm::Function **)v39;
      if (*(llvm::Function **)v39 != a2)
      {
        v41 = 1;
        while (v40 != (llvm::Function *)-4096)
        {
          v42 = v38 + v41++;
          v38 = v42 & (v37 - 1);
          v40 = *(llvm::Function **)(v36 + 16 * v38);
          if (v40 == a2)
          {
            v39 = v36 + 16 * v38;
            goto LABEL_69;
          }
        }
LABEL_68:
        v39 = v36 + 16 * v37;
      }
LABEL_69:
      v45 = *(_QWORD **)(v39 + 8);
      v48 = *v45;
      v46 = (const char *)(v45 + 2);
      v47 = v48;
      v49 = (_WORD *)*((_QWORD *)v33 + 4);
      if (v48 > *((_QWORD *)v33 + 3) - (_QWORD)v49)
      {
        llvm::raw_ostream::write(v33, v46, v47);
        goto LABEL_71;
      }
      if (v47)
      {
        memcpy(v49, v46, v47);
        v49 = (_WORD *)(*((_QWORD *)v33 + 4) + v47);
        *((_QWORD *)v33 + 4) = v49;
      }
    }
    else
    {
LABEL_71:
      v49 = (_WORD *)*((_QWORD *)v33 + 4);
    }
    if (*((_QWORD *)v33 + 3) - (_QWORD)v49 > 1uLL)
    {
      *v49 = 8250;
      *((_QWORD *)v33 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v33, ": ", 2uLL);
    }
    v44 = v335;
    v43 = v336;
    sub_1C5E21910(v33, ((char *)v336 - (char *)v335) >> 4, 0, 0, 0);
    v50 = *((_QWORD *)v33 + 4);
    if ((unint64_t)(*((_QWORD *)v33 + 3) - v50) > 0xA)
    {
      *(_DWORD *)(v50 + 7) = 539784050;
      *(_QWORD *)v50 = *(_QWORD *)" pointers, ";
      *((_QWORD *)v33 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v33, " pointers, ", 0xBuLL);
    }
    sub_1C5E21910(v33, v358, 0, 0, 0);
    v51 = *((_QWORD *)v33 + 4);
    if ((unint64_t)(*((_QWORD *)v33 + 3) - v51) > 0xB)
    {
      *(_DWORD *)(v51 + 8) = 175334772;
      *(_QWORD *)v51 = *(_QWORD *)" call sites\n";
      *((_QWORD *)v33 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v33, " call sites\n", 0xCuLL);
    }
  }
  v322 = a3;
  v300 = v23;
  if (v44 != v43)
  {
    v52 = 0;
    v53 = (_QWORD *)((char *)v297 + 8);
    v298 = (uint64_t *)(v44 + 1);
    v54 = v44;
    v302 = v43;
    v304 = v44;
    do
    {
      sub_1C4768AD0(v23, (uint64_t)v54[1]);
      v56 = (unint64_t)(v55 + 7) >> 3;
      if (v57 == 1)
        v56 = -2;
      v321 = v56;
      v58 = v298;
      v306 = v52;
      if (v44 != v54)
      {
        do
        {
          sub_1C4768AD0(v23, *v58);
          v59 = (void (**)(llvm::raw_ostream *__hidden))*(v58 - 1);
          v61 = (unint64_t)(v60 + 7) >> 3;
          if (v62 == 1)
            v61 = -2;
          v345 = *v54;
          v346 = v321;
          v347 = 0u;
          v348 = 0u;
          v338 = v59;
          v339 = v61;
          v340 = 0u;
          v341 = 0u;
          v63 = llvm::AAResults::alias((uint64_t)a3, (uint64_t)&v345, (uint64_t)&v338);
          v64 = &byte_1ED7EF498;
          v65 = v53;
          switch((char)v63)
          {
            case 0:
              goto LABEL_91;
            case 1:
              v64 = &byte_1ED7EF558;
              v65 = (_QWORD *)((char *)v297 + 16);
              goto LABEL_91;
            case 2:
              v64 = &byte_1ED7EF618;
              v65 = (_QWORD *)((char *)v297 + 24);
              goto LABEL_91;
            case 3:
              v64 = &byte_1ED7EF6D8;
              v65 = (_QWORD *)((char *)v297 + 32);
LABEL_91:
              if (byte_1ED7EF3D8 | *v64)
              {
                v66 = *v54;
                v67 = **v54;
                v68 = *((unsigned int *)v67 + 2);
                if ((v68 & 0xFE) == 0x12)
                  v68 = *(unsigned int *)(**((_QWORD **)v67 + 2) + 8);
                v311 = v68;
                v69 = (llvm::Value *)*(v58 - 1);
                v70 = *(unsigned int *)(*(_QWORD *)v69 + 8);
                if ((v70 & 0xFE) == 0x12)
                  v70 = *(unsigned int *)(**(_QWORD **)(*(_QWORD *)v69 + 16) + 8);
                v310 = (llvm *)v54[1];
                v314 = (llvm::Type *)*v58;
                v71 = (const llvm::Module *)*((_QWORD *)a2 + 5);
                v354[0] = 0;
                v354[1] = 0;
                v355 = 0;
                __p[0] = 0;
                __p[1] = 0;
                v353 = 0;
                LODWORD(v346) = 0;
                BYTE8(v348) = 0;
                v349 = 0;
                v345 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
                v351 = v354;
                v350 = 0;
                *(_QWORD *)&v348 = 0;
                v347 = 0uLL;
                LODWORD(v339) = 0;
                BYTE8(v341) = 0;
                v342 = 0;
                v338 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
                v344 = __p;
                v343 = 0;
                *(_QWORD *)&v341 = 0;
                v340 = 0uLL;
                llvm::Value::printAsOperand((llvm::Value *)v66, (llvm::raw_ostream *)&v345, 0, v71);
                llvm::Value::printAsOperand(v69, (llvm::raw_ostream *)&v338, 0, v71);
                v338 = off_1E81A6E70;
                if (v343 == 1 && (_QWORD)v340)
                  MEMORY[0x1CAA32F9C](v340, 0x1000C8077774924);
                v345 = off_1E81A6E70;
                if (v350 == 1 && (_QWORD)v347)
                  MEMORY[0x1CAA32F9C](v347, 0x1000C8077774924);
                v308 = v63;
                v72 = v311 >> 8;
                v312 = v70 >> 8;
                if (v355 >= 0)
                  v73 = v354;
                else
                  v73 = (void **)v354[0];
                if (v355 >= 0)
                  v74 = (void *)(HIBYTE(v355) & 0x7F);
                else
                  v74 = v354[1];
                if (v353 >= 0)
                  v75 = (void *)(HIBYTE(v353) & 0x7F);
                else
                  v75 = __p[1];
                if (v353 >= 0)
                  v76 = __p;
                else
                  v76 = (void **)__p[0];
                if (v74 >= v75)
                  v77 = (size_t)v75;
                else
                  v77 = (size_t)v74;
                v78 = (llvm *)memcmp(v76, v73, v77);
                v79 = v75 < v74;
                if ((_DWORD)v78)
                  v79 = (int)v78 < 0;
                if (v79)
                {
                  v80 = v355;
                  v81 = *(_OWORD *)v354;
                  *(_OWORD *)v354 = *(_OWORD *)__p;
                  v355 = v353;
                  *(_OWORD *)__p = v81;
                  v353 = v80;
                  a3 = v322;
                  v53 = (_QWORD *)((char *)v297 + 8);
                  if ((v63 & 0x100) == 0 || ((v63 >> 9) + 0x3FFFFF) >> 23)
                  {
                    v78 = v310;
                  }
                  else
                  {
                    v78 = v310;
                    v308 = (v63 - (v63 & 0xFFFFFE00)) | 0x100;
                  }
                  v82 = v312;
                  v310 = v314;
                  v312 = v72;
                  v314 = v78;
                }
                else
                {
                  v82 = v72;
                  a3 = v322;
                  v53 = (_QWORD *)((char *)v297 + 8);
                }
                v83 = (llvm::raw_ostream *)llvm::errs(v78);
                v84 = (_WORD *)*((_QWORD *)v83 + 4);
                v23 = v300;
                if (*((_QWORD *)v83 + 3) - (_QWORD)v84 > 1uLL)
                {
                  *v84 = 8224;
                  *((_QWORD *)v83 + 4) += 2;
                }
                else
                {
                  v83 = llvm::raw_ostream::write(v83, "  ", 2uLL);
                }
                v85 = llvm::operator<<(v83, v308);
                v86 = (_WORD *)*((_QWORD *)v85 + 4);
                if (*((_QWORD *)v85 + 3) - (_QWORD)v86 > 1uLL)
                {
                  *v86 = 2362;
                  *((_QWORD *)v85 + 4) += 2;
                }
                else
                {
                  v85 = llvm::raw_ostream::write(v85, ":\t", 2uLL);
                }
                v87 = (llvm::raw_ostream *)llvm::errs(v85);
                v88 = (llvm *)llvm::Type::print(v310, v87, 0, 1);
                if (v82)
                {
                  v89 = (llvm::raw_ostream *)llvm::errs(v88);
                  v90 = v89;
                  v91 = *((_QWORD *)v89 + 4);
                  if ((unint64_t)(*((_QWORD *)v89 + 3) - v91) > 0xA)
                  {
                    *(_DWORD *)(v91 + 7) = 677733217;
                    *(_QWORD *)v91 = *(_QWORD *)" addrspace(";
                    *((_QWORD *)v89 + 4) += 11;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v89, " addrspace(", 0xBuLL);
                  }
                  v88 = sub_1C5E21910(v90, v82, 0, 0, 0);
                  v92 = (_BYTE *)*((_QWORD *)v90 + 4);
                  if (*((_BYTE **)v90 + 3) == v92)
                  {
                    v88 = llvm::raw_ostream::write(v90, ")", 1uLL);
                  }
                  else
                  {
                    *v92 = 41;
                    ++*((_QWORD *)v90 + 4);
                  }
                  v53 = (_QWORD *)((char *)v297 + 8);
                }
                v93 = (llvm::raw_ostream *)llvm::errs(v88);
                v94 = (_WORD *)*((_QWORD *)v93 + 4);
                if (*((_QWORD *)v93 + 3) - (_QWORD)v94 > 1uLL)
                {
                  *v94 = 8234;
                  *((_QWORD *)v93 + 4) += 2;
                }
                else
                {
                  v93 = llvm::raw_ostream::write(v93, "* ", 2uLL);
                }
                if (v355 >= 0)
                  v95 = v354;
                else
                  v95 = (void **)v354[0];
                if (v355 >= 0)
                  v96 = HIBYTE(v355) & 0x7F;
                else
                  v96 = (size_t)v354[1];
                v97 = llvm::raw_ostream::write(v93, (const char *)v95, v96);
                v98 = (_WORD *)*((_QWORD *)v97 + 4);
                if (*((_QWORD *)v97 + 3) - (_QWORD)v98 > 1uLL)
                {
                  *v98 = 8236;
                  *((_QWORD *)v97 + 4) += 2;
                }
                else
                {
                  v97 = llvm::raw_ostream::write(v97, ", ", 2uLL);
                }
                v99 = (llvm::raw_ostream *)llvm::errs(v97);
                v100 = (llvm *)llvm::Type::print(v314, v99, 0, 1);
                if (v312)
                {
                  v101 = (llvm::raw_ostream *)llvm::errs(v100);
                  v102 = v101;
                  v103 = *((_QWORD *)v101 + 4);
                  if ((unint64_t)(*((_QWORD *)v101 + 3) - v103) > 0xA)
                  {
                    *(_DWORD *)(v103 + 7) = 677733217;
                    *(_QWORD *)v103 = *(_QWORD *)" addrspace(";
                    *((_QWORD *)v101 + 4) += 11;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v101, " addrspace(", 0xBuLL);
                  }
                  v100 = sub_1C5E21910(v102, v312, 0, 0, 0);
                  v104 = (_BYTE *)*((_QWORD *)v102 + 4);
                  if (*((_BYTE **)v102 + 3) == v104)
                  {
                    v100 = llvm::raw_ostream::write(v102, ")", 1uLL);
                  }
                  else
                  {
                    *v104 = 41;
                    ++*((_QWORD *)v102 + 4);
                  }
                  v53 = (_QWORD *)((char *)v297 + 8);
                }
                v105 = (llvm::raw_ostream *)llvm::errs(v100);
                v106 = (_WORD *)*((_QWORD *)v105 + 4);
                if (*((_QWORD *)v105 + 3) - (_QWORD)v106 > 1uLL)
                {
                  *v106 = 8234;
                  *((_QWORD *)v105 + 4) += 2;
                }
                else
                {
                  v105 = llvm::raw_ostream::write(v105, "* ", 2uLL);
                }
                if (v353 >= 0)
                  v107 = __p;
                else
                  v107 = (void **)__p[0];
                if (v353 >= 0)
                  v108 = HIBYTE(v353) & 0x7F;
                else
                  v108 = (size_t)__p[1];
                v109 = llvm::raw_ostream::write(v105, (const char *)v107, v108);
                v110 = (_BYTE *)*((_QWORD *)v109 + 4);
                if (*((_BYTE **)v109 + 3) == v110)
                {
                  llvm::raw_ostream::write(v109, "\n", 1uLL);
                }
                else
                {
                  *v110 = 10;
                  ++*((_QWORD *)v109 + 4);
                }
                if (SHIBYTE(v353) < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v355) < 0)
                  operator delete(v354[0]);
              }
              ++*v65;
              break;
            default:
              break;
          }
          v58 += 2;
          v52 -= 16;
        }
        while (v52);
      }
      v54 += 2;
      v44 = v304;
      v52 = v306 + 16;
    }
    while (v54 != v302);
  }
  if (byte_1ED7EFD98)
  {
    v313 = v331;
    v315 = (llvm::Value *)v330;
    if (v330 != v331)
    {
      do
      {
        v112 = (uint64_t *)v325;
        v111 = v326;
        if (v325 != v326)
        {
          v113 = *(uint64_t **)v315;
          do
          {
            v114 = *v112;
            v115 = (void (**)(llvm::raw_ostream *__hidden))*(v113 - 4);
            sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(v113[5] + 56) + 40) + 272, *v113);
            if (v117 == 1)
              v118 = -2;
            else
              v118 = (unint64_t)(v116 + 7) >> 3;
            llvm::Instruction::getAAMetadata((uint64_t ***)v113, &v347);
            v345 = v115;
            v346 = v118;
            v119 = *(void (***)(llvm::raw_ostream *__hidden))(v114 - 32);
            sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v114 + 40) + 56) + 40) + 272, **(_QWORD **)(v114 - 64));
            if (v121 == 1)
              v122 = -2;
            else
              v122 = (unint64_t)(v120 + 7) >> 3;
            llvm::Instruction::getAAMetadata((uint64_t ***)v114, &v340);
            v338 = v119;
            v339 = v122;
            v123 = (llvm *)llvm::AAResults::alias((uint64_t)v322, (uint64_t)&v345, (uint64_t)&v338);
            v124 = (int)v123;
            switch((char)v123)
            {
              case 0:
                v125 = (_QWORD *)((char *)v297 + 8);
                if (byte_1ED7EF3D8 | byte_1ED7EF498)
                {
                  v126 = (llvm::raw_ostream *)llvm::errs(v123);
                  v127 = v126;
                  v128 = (_WORD *)*((_QWORD *)v126 + 4);
                  if (*((_QWORD *)v126 + 3) - (_QWORD)v128 > 1uLL)
                  {
                    *v128 = 8224;
                    *((_QWORD *)v126 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v126, "  ", 2uLL);
                  }
                  llvm::operator<<(v127, v124);
                  v129 = (_WORD *)*((_QWORD *)v127 + 4);
                  if (*((_QWORD *)v127 + 3) - (_QWORD)v129 > 1uLL)
                  {
                    *v129 = 8250;
                    *((_QWORD *)v127 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v127, ": ", 2uLL);
                  }
                  llvm::Value::print((llvm::Value *)v113, v127, 0);
                  v130 = *((_QWORD *)v127 + 4);
                  if ((unint64_t)(*((_QWORD *)v127 + 3) - v130) > 4)
                  {
                    *(_BYTE *)(v130 + 4) = 32;
                    *(_DWORD *)v130 = 1043151904;
                    *((_QWORD *)v127 + 4) += 5;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v127, " <-> ", 5uLL);
                  }
                  llvm::Value::print((llvm::Value *)v114, v127, 0);
                  v131 = (_BYTE *)*((_QWORD *)v127 + 4);
                  if ((unint64_t)v131 >= *((_QWORD *)v127 + 3))
                  {
                    llvm::raw_ostream::write(v127, 10);
                  }
                  else
                  {
                    *((_QWORD *)v127 + 4) = v131 + 1;
                    *v131 = 10;
                  }
                  v125 = (_QWORD *)((char *)v297 + 8);
                }
                goto LABEL_219;
              case 1:
                v125 = (_QWORD *)((char *)v297 + 16);
                if (byte_1ED7EF3D8 | byte_1ED7EF558)
                {
                  v144 = (llvm::raw_ostream *)llvm::errs(v123);
                  v145 = v144;
                  v146 = (_WORD *)*((_QWORD *)v144 + 4);
                  if (*((_QWORD *)v144 + 3) - (_QWORD)v146 > 1uLL)
                  {
                    *v146 = 8224;
                    *((_QWORD *)v144 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v144, "  ", 2uLL);
                  }
                  llvm::operator<<(v145, v124);
                  v147 = (_WORD *)*((_QWORD *)v145 + 4);
                  if (*((_QWORD *)v145 + 3) - (_QWORD)v147 > 1uLL)
                  {
                    *v147 = 8250;
                    *((_QWORD *)v145 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v145, ": ", 2uLL);
                  }
                  llvm::Value::print((llvm::Value *)v113, v145, 0);
                  v148 = *((_QWORD *)v145 + 4);
                  if ((unint64_t)(*((_QWORD *)v145 + 3) - v148) > 4)
                  {
                    *(_BYTE *)(v148 + 4) = 32;
                    *(_DWORD *)v148 = 1043151904;
                    *((_QWORD *)v145 + 4) += 5;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v145, " <-> ", 5uLL);
                  }
                  llvm::Value::print((llvm::Value *)v114, v145, 0);
                  v149 = (_BYTE *)*((_QWORD *)v145 + 4);
                  if ((unint64_t)v149 >= *((_QWORD *)v145 + 3))
                  {
                    llvm::raw_ostream::write(v145, 10);
                  }
                  else
                  {
                    *((_QWORD *)v145 + 4) = v149 + 1;
                    *v149 = 10;
                  }
                  v125 = (_QWORD *)((char *)v297 + 16);
                }
                goto LABEL_219;
              case 2:
                v125 = (_QWORD *)((char *)v297 + 24);
                if (byte_1ED7EF3D8 | byte_1ED7EF618)
                {
                  v132 = (llvm::raw_ostream *)llvm::errs(v123);
                  v133 = v132;
                  v134 = (_WORD *)*((_QWORD *)v132 + 4);
                  if (*((_QWORD *)v132 + 3) - (_QWORD)v134 > 1uLL)
                  {
                    *v134 = 8224;
                    *((_QWORD *)v132 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v132, "  ", 2uLL);
                  }
                  llvm::operator<<(v133, v124);
                  v135 = (_WORD *)*((_QWORD *)v133 + 4);
                  if (*((_QWORD *)v133 + 3) - (_QWORD)v135 > 1uLL)
                  {
                    *v135 = 8250;
                    *((_QWORD *)v133 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v133, ": ", 2uLL);
                  }
                  llvm::Value::print((llvm::Value *)v113, v133, 0);
                  v136 = *((_QWORD *)v133 + 4);
                  if ((unint64_t)(*((_QWORD *)v133 + 3) - v136) > 4)
                  {
                    *(_BYTE *)(v136 + 4) = 32;
                    *(_DWORD *)v136 = 1043151904;
                    *((_QWORD *)v133 + 4) += 5;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v133, " <-> ", 5uLL);
                  }
                  llvm::Value::print((llvm::Value *)v114, v133, 0);
                  v137 = (_BYTE *)*((_QWORD *)v133 + 4);
                  if ((unint64_t)v137 >= *((_QWORD *)v133 + 3))
                  {
                    llvm::raw_ostream::write(v133, 10);
                  }
                  else
                  {
                    *((_QWORD *)v133 + 4) = v137 + 1;
                    *v137 = 10;
                  }
                  v125 = (_QWORD *)((char *)v297 + 24);
                }
                goto LABEL_219;
              case 3:
                v125 = (_QWORD *)((char *)v297 + 32);
                if (byte_1ED7EF3D8 | byte_1ED7EF6D8)
                {
                  v138 = (llvm::raw_ostream *)llvm::errs(v123);
                  v139 = v138;
                  v140 = (_WORD *)*((_QWORD *)v138 + 4);
                  if (*((_QWORD *)v138 + 3) - (_QWORD)v140 > 1uLL)
                  {
                    *v140 = 8224;
                    *((_QWORD *)v138 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v138, "  ", 2uLL);
                  }
                  llvm::operator<<(v139, v124);
                  v141 = (_WORD *)*((_QWORD *)v139 + 4);
                  if (*((_QWORD *)v139 + 3) - (_QWORD)v141 > 1uLL)
                  {
                    *v141 = 8250;
                    *((_QWORD *)v139 + 4) += 2;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v139, ": ", 2uLL);
                  }
                  llvm::Value::print((llvm::Value *)v113, v139, 0);
                  v142 = *((_QWORD *)v139 + 4);
                  if ((unint64_t)(*((_QWORD *)v139 + 3) - v142) > 4)
                  {
                    *(_BYTE *)(v142 + 4) = 32;
                    *(_DWORD *)v142 = 1043151904;
                    *((_QWORD *)v139 + 4) += 5;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v139, " <-> ", 5uLL);
                  }
                  llvm::Value::print((llvm::Value *)v114, v139, 0);
                  v143 = (_BYTE *)*((_QWORD *)v139 + 4);
                  if ((unint64_t)v143 >= *((_QWORD *)v139 + 3))
                  {
                    llvm::raw_ostream::write(v139, 10);
                  }
                  else
                  {
                    *((_QWORD *)v139 + 4) = v143 + 1;
                    *v143 = 10;
                  }
                  v125 = (_QWORD *)((char *)v297 + 32);
                }
LABEL_219:
                ++*v125;
                break;
              default:
                break;
            }
            ++v112;
          }
          while (v112 != v111);
        }
        v315 = (llvm::Value *)((char *)v315 + 8);
      }
      while (v315 != v313);
    }
    v150 = (uint64_t ****)v325;
    v320 = (uint64_t ****)v326;
    if (v325 != v326)
    {
      do
      {
        for (j = (uint64_t ****)v325; j != v150; ++j)
        {
          v152 = *v150;
          v153 = (void (**)(llvm::raw_ostream *__hidden))*(*v150 - 4);
          sub_1C4768AD0((*v150)[5][7][5] + 272, (uint64_t)**(*v150 - 8));
          if (v155 == 1)
            v156 = -2;
          else
            v156 = (unint64_t)(v154 + 7) >> 3;
          llvm::Instruction::getAAMetadata(v152, &v347);
          v345 = v153;
          v346 = v156;
          v157 = *j;
          v158 = (void (**)(llvm::raw_ostream *__hidden))*(*j - 4);
          sub_1C4768AD0((*j)[5][7][5] + 272, (uint64_t)**(*j - 8));
          if (v160 == 1)
            v161 = -2;
          else
            v161 = (unint64_t)(v159 + 7) >> 3;
          llvm::Instruction::getAAMetadata(v157, &v340);
          v338 = v158;
          v339 = v161;
          v162 = (llvm *)llvm::AAResults::alias((uint64_t)v322, (uint64_t)&v345, (uint64_t)&v338);
          v163 = (int)v162;
          switch((char)v162)
          {
            case 0:
              v164 = (_QWORD *)((char *)v297 + 8);
              if (byte_1ED7EF3D8 | byte_1ED7EF498)
              {
                v316 = (llvm::Value *)*v150;
                v165 = (llvm::Value *)*j;
                v166 = (llvm::raw_ostream *)llvm::errs(v162);
                v167 = v166;
                v168 = (_WORD *)*((_QWORD *)v166 + 4);
                if (*((_QWORD *)v166 + 3) - (_QWORD)v168 > 1uLL)
                {
                  *v168 = 8224;
                  *((_QWORD *)v166 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v166, "  ", 2uLL);
                }
                llvm::operator<<(v167, v163);
                v169 = (_WORD *)*((_QWORD *)v167 + 4);
                if (*((_QWORD *)v167 + 3) - (_QWORD)v169 > 1uLL)
                {
                  *v169 = 8250;
                  *((_QWORD *)v167 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v167, ": ", 2uLL);
                }
                llvm::Value::print(v316, v167, 0);
                v170 = *((_QWORD *)v167 + 4);
                if ((unint64_t)(*((_QWORD *)v167 + 3) - v170) > 4)
                {
                  *(_BYTE *)(v170 + 4) = 32;
                  *(_DWORD *)v170 = 1043151904;
                  *((_QWORD *)v167 + 4) += 5;
                }
                else
                {
                  llvm::raw_ostream::write(v167, " <-> ", 5uLL);
                }
                llvm::Value::print(v165, v167, 0);
                v171 = (_BYTE *)*((_QWORD *)v167 + 4);
                if ((unint64_t)v171 >= *((_QWORD *)v167 + 3))
                {
                  llvm::raw_ostream::write(v167, 10);
                }
                else
                {
                  *((_QWORD *)v167 + 4) = v171 + 1;
                  *v171 = 10;
                }
                v164 = (_QWORD *)((char *)v297 + 8);
              }
              goto LABEL_289;
            case 1:
              v164 = (_QWORD *)((char *)v297 + 16);
              if (byte_1ED7EF3D8 | byte_1ED7EF558)
              {
                v319 = (llvm::Value *)*v150;
                v186 = (llvm::Value *)*j;
                v187 = (llvm::raw_ostream *)llvm::errs(v162);
                v188 = v187;
                v189 = (_WORD *)*((_QWORD *)v187 + 4);
                if (*((_QWORD *)v187 + 3) - (_QWORD)v189 > 1uLL)
                {
                  *v189 = 8224;
                  *((_QWORD *)v187 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v187, "  ", 2uLL);
                }
                llvm::operator<<(v188, v163);
                v190 = (_WORD *)*((_QWORD *)v188 + 4);
                if (*((_QWORD *)v188 + 3) - (_QWORD)v190 > 1uLL)
                {
                  *v190 = 8250;
                  *((_QWORD *)v188 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v188, ": ", 2uLL);
                }
                llvm::Value::print(v319, v188, 0);
                v191 = *((_QWORD *)v188 + 4);
                if ((unint64_t)(*((_QWORD *)v188 + 3) - v191) > 4)
                {
                  *(_BYTE *)(v191 + 4) = 32;
                  *(_DWORD *)v191 = 1043151904;
                  *((_QWORD *)v188 + 4) += 5;
                }
                else
                {
                  llvm::raw_ostream::write(v188, " <-> ", 5uLL);
                }
                llvm::Value::print(v186, v188, 0);
                v192 = (_BYTE *)*((_QWORD *)v188 + 4);
                if ((unint64_t)v192 >= *((_QWORD *)v188 + 3))
                {
                  llvm::raw_ostream::write(v188, 10);
                }
                else
                {
                  *((_QWORD *)v188 + 4) = v192 + 1;
                  *v192 = 10;
                }
                v164 = (_QWORD *)((char *)v297 + 16);
              }
              goto LABEL_289;
            case 2:
              v164 = (_QWORD *)((char *)v297 + 24);
              if (byte_1ED7EF3D8 | byte_1ED7EF618)
              {
                v317 = (llvm::Value *)*v150;
                v172 = (llvm::Value *)*j;
                v173 = (llvm::raw_ostream *)llvm::errs(v162);
                v174 = v173;
                v175 = (_WORD *)*((_QWORD *)v173 + 4);
                if (*((_QWORD *)v173 + 3) - (_QWORD)v175 > 1uLL)
                {
                  *v175 = 8224;
                  *((_QWORD *)v173 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v173, "  ", 2uLL);
                }
                llvm::operator<<(v174, v163);
                v176 = (_WORD *)*((_QWORD *)v174 + 4);
                if (*((_QWORD *)v174 + 3) - (_QWORD)v176 > 1uLL)
                {
                  *v176 = 8250;
                  *((_QWORD *)v174 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v174, ": ", 2uLL);
                }
                llvm::Value::print(v317, v174, 0);
                v177 = *((_QWORD *)v174 + 4);
                if ((unint64_t)(*((_QWORD *)v174 + 3) - v177) > 4)
                {
                  *(_BYTE *)(v177 + 4) = 32;
                  *(_DWORD *)v177 = 1043151904;
                  *((_QWORD *)v174 + 4) += 5;
                }
                else
                {
                  llvm::raw_ostream::write(v174, " <-> ", 5uLL);
                }
                llvm::Value::print(v172, v174, 0);
                v178 = (_BYTE *)*((_QWORD *)v174 + 4);
                if ((unint64_t)v178 >= *((_QWORD *)v174 + 3))
                {
                  llvm::raw_ostream::write(v174, 10);
                }
                else
                {
                  *((_QWORD *)v174 + 4) = v178 + 1;
                  *v178 = 10;
                }
                v164 = (_QWORD *)((char *)v297 + 24);
              }
              goto LABEL_289;
            case 3:
              v164 = (_QWORD *)((char *)v297 + 32);
              if (byte_1ED7EF3D8 | byte_1ED7EF6D8)
              {
                v318 = (llvm::Value *)*v150;
                v179 = (llvm::Value *)*j;
                v180 = (llvm::raw_ostream *)llvm::errs(v162);
                v181 = v180;
                v182 = (_WORD *)*((_QWORD *)v180 + 4);
                if (*((_QWORD *)v180 + 3) - (_QWORD)v182 > 1uLL)
                {
                  *v182 = 8224;
                  *((_QWORD *)v180 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v180, "  ", 2uLL);
                }
                llvm::operator<<(v181, v163);
                v183 = (_WORD *)*((_QWORD *)v181 + 4);
                if (*((_QWORD *)v181 + 3) - (_QWORD)v183 > 1uLL)
                {
                  *v183 = 8250;
                  *((_QWORD *)v181 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v181, ": ", 2uLL);
                }
                llvm::Value::print(v318, v181, 0);
                v184 = *((_QWORD *)v181 + 4);
                if ((unint64_t)(*((_QWORD *)v181 + 3) - v184) > 4)
                {
                  *(_BYTE *)(v184 + 4) = 32;
                  *(_DWORD *)v184 = 1043151904;
                  *((_QWORD *)v181 + 4) += 5;
                }
                else
                {
                  llvm::raw_ostream::write(v181, " <-> ", 5uLL);
                }
                llvm::Value::print(v179, v181, 0);
                v185 = (_BYTE *)*((_QWORD *)v181 + 4);
                if ((unint64_t)v185 >= *((_QWORD *)v181 + 3))
                {
                  llvm::raw_ostream::write(v181, 10);
                }
                else
                {
                  *((_QWORD *)v181 + 4) = v185 + 1;
                  *v185 = 10;
                }
                v164 = (_QWORD *)((char *)v297 + 32);
              }
LABEL_289:
              ++*v164;
              break;
            default:
              continue;
          }
        }
        ++v150;
      }
      while (v150 != v320);
    }
  }
  if ((_DWORD)v358)
  {
    v309 = (llvm::Value **)v357;
    v299 = (llvm::Value **)((char *)v357 + 8 * v358);
    v193 = (_QWORD *)((char *)v297 + 40);
    v194 = (uint64_t)v322;
    v195 = v300;
    v196 = v301;
    do
    {
      v198 = v335;
      v197 = v336;
      if (v335 != v336)
      {
        v199 = *v309;
        do
        {
          sub_1C4768AD0(v195, (uint64_t)v198[1]);
          v201 = (unint64_t)(v200 + 7) >> 3;
          if (v202 == 1)
            v201 = -2;
          v345 = *v198;
          v346 = v201;
          v347 = 0u;
          v348 = 0u;
          ModRefInfo = (llvm *)llvm::AAResults::getModRefInfo(v194, (uint64_t)v199, (uint64_t)&v345);
          v204 = &byte_1ED7EF798;
          v205 = "NoModRef";
          v206 = v193;
          switch((int)ModRefInfo)
          {
            case 0:
              v204 = &byte_1ED7EFA98;
              v205 = "Must";
              v206 = (_QWORD *)((char *)v297 + 72);
              goto LABEL_334;
            case 1:
              v204 = &byte_1ED7EFB58;
              v205 = "Just Ref (MustAlias)";
              v206 = (_QWORD *)((char *)v297 + 80);
              goto LABEL_334;
            case 2:
              v204 = &byte_1ED7EFC18;
              v205 = "Just Mod (MustAlias)";
              v206 = (_QWORD *)((char *)v297 + 88);
              goto LABEL_334;
            case 3:
              v204 = &byte_1ED7EFCD8;
              v205 = "Both ModRef (MustAlias)";
              v206 = (_QWORD *)((char *)v297 + 96);
              goto LABEL_334;
            case 4:
              goto LABEL_334;
            case 5:
              v204 = &byte_1ED7EF858;
              v205 = "Just Ref";
              v206 = (_QWORD *)((char *)v297 + 56);
              goto LABEL_334;
            case 6:
              v204 = &byte_1ED7EF918;
              v205 = "Just Mod";
              v206 = (_QWORD *)((char *)v297 + 48);
              goto LABEL_334;
            case 7:
              v204 = &byte_1ED7EF9D8;
              v205 = "Both ModRef";
              v206 = (_QWORD *)((char *)v297 + 64);
LABEL_334:
              if (byte_1ED7EF3D8 | *v204)
              {
                v207 = *v198;
                v208 = **v198;
                v209 = *((_DWORD *)v208 + 2);
                if ((v209 & 0xFE) == 0x12)
                  v209 = *(_DWORD *)(**((_QWORD **)v208 + 2) + 8);
                v303 = (llvm::Type *)v198[1];
                v305 = (const llvm::Module *)*((_QWORD *)v196 + 5);
                v210 = (llvm::raw_ostream *)llvm::errs(ModRefInfo);
                v211 = v210;
                v212 = (_WORD *)*((_QWORD *)v210 + 4);
                v307 = (llvm::Value *)v207;
                if (*((_QWORD *)v210 + 3) - (_QWORD)v212 > 1uLL)
                {
                  *v212 = 8224;
                  v213 = (_QWORD *)(*((_QWORD *)v210 + 4) + 2);
                  *((_QWORD *)v210 + 4) = v213;
                }
                else
                {
                  llvm::raw_ostream::write(v210, "  ", 2uLL);
                  v213 = (_QWORD *)*((_QWORD *)v211 + 4);
                }
                v214 = (llvm *)strlen(v205);
                v215 = v214;
                if ((unint64_t)v214 <= *((_QWORD *)v211 + 3) - (_QWORD)v213)
                {
                  if (v214)
                  {
                    v214 = (llvm *)memcpy(v213, v205, (size_t)v214);
                    v213 = (_QWORD *)((char *)v215 + *((_QWORD *)v211 + 4));
                    *((_QWORD *)v211 + 4) = v213;
                  }
                }
                else
                {
                  v214 = llvm::raw_ostream::write(v211, v205, (size_t)v214);
                  v213 = (_QWORD *)*((_QWORD *)v211 + 4);
                }
                v216 = v209;
                if (*((_QWORD *)v211 + 3) - (_QWORD)v213 > 7uLL)
                {
                  *v213 = 0x203A72745020203ALL;
                  *((_QWORD *)v211 + 4) += 8;
                }
                else
                {
                  v214 = llvm::raw_ostream::write(v211, ":  Ptr: ", 8uLL);
                }
                v196 = v301;
                v193 = (_QWORD *)((char *)v297 + 40);
                v217 = (llvm::raw_ostream *)llvm::errs(v214);
                v218 = (llvm *)llvm::Type::print(v303, v217, 0, 1);
                v194 = (uint64_t)v322;
                if (v209 >= 0x100)
                {
                  v219 = (llvm::raw_ostream *)llvm::errs(v218);
                  v220 = v219;
                  v221 = *((_QWORD *)v219 + 4);
                  if ((unint64_t)(*((_QWORD *)v219 + 3) - v221) > 0xA)
                  {
                    *(_DWORD *)(v221 + 7) = 677733217;
                    *(_QWORD *)v221 = *(_QWORD *)" addrspace(";
                    *((_QWORD *)v219 + 4) += 11;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v219, " addrspace(", 0xBuLL);
                  }
                  v218 = sub_1C5E21910(v220, v216 >> 8, 0, 0, 0);
                  v222 = (_BYTE *)*((_QWORD *)v220 + 4);
                  if (*((_BYTE **)v220 + 3) == v222)
                  {
                    v218 = llvm::raw_ostream::write(v220, ")", 1uLL);
                  }
                  else
                  {
                    *v222 = 41;
                    ++*((_QWORD *)v220 + 4);
                  }
                }
                v223 = (llvm::raw_ostream *)llvm::errs(v218);
                v224 = (_WORD *)*((_QWORD *)v223 + 4);
                if (*((_QWORD *)v223 + 3) - (_QWORD)v224 > 1uLL)
                {
                  *v224 = 8234;
                  *((_QWORD *)v223 + 4) += 2;
                }
                else
                {
                  v223 = llvm::raw_ostream::write(v223, "* ", 2uLL);
                }
                v225 = (llvm::raw_ostream *)llvm::errs(v223);
                v226 = (llvm *)llvm::Value::printAsOperand(v307, v225, 0, v305);
                v227 = (llvm::raw_ostream *)llvm::errs(v226);
                v228 = v227;
                v229 = (_DWORD *)*((_QWORD *)v227 + 4);
                if (*((_QWORD *)v227 + 3) - (_QWORD)v229 > 3uLL)
                {
                  *v229 = 1043151881;
                  *((_QWORD *)v227 + 4) += 4;
                }
                else
                {
                  llvm::raw_ostream::write(v227, "\t<->", 4uLL);
                }
                llvm::Value::print(v199, v228, 0);
                v230 = (_BYTE *)*((_QWORD *)v228 + 4);
                if ((unint64_t)v230 >= *((_QWORD *)v228 + 3))
                {
                  llvm::raw_ostream::write(v228, 10);
                }
                else
                {
                  *((_QWORD *)v228 + 4) = v230 + 1;
                  *v230 = 10;
                }
                v195 = v300;
              }
              ++*v206;
              break;
            default:
              break;
          }
          v198 += 2;
        }
        while (v198 != v197);
      }
      ++v309;
    }
    while (v309 != v299);
    v231 = v358;
    if ((_DWORD)v358)
    {
      v232 = (const llvm::CallBase **)v357;
      v233 = (const llvm::CallBase **)((char *)v357 + 8 * v358);
      v234 = (const llvm::CallBase **)v357;
LABEL_371:
      v235 = *v234;
      v236 = 8 * v231;
      do
      {
        v237 = *v232;
        if (v235 != *v232)
        {
          v238 = (llvm *)llvm::AAResults::getModRefInfo(v322, v235, *v232);
          switch((int)v238)
          {
            case 0:
              v239 = (_QWORD *)((char *)v297 + 72);
              if (byte_1ED7EF3D8 | byte_1ED7EFA98)
              {
                v240 = (llvm::raw_ostream *)llvm::errs(v238);
                v241 = v240;
                v242 = (_WORD *)*((_QWORD *)v240 + 4);
                if (*((_QWORD *)v240 + 3) - (_QWORD)v242 > 1uLL)
                {
                  *v242 = 8224;
                  v243 = (_DWORD *)(*((_QWORD *)v240 + 4) + 2);
                  *((_QWORD *)v240 + 4) = v243;
                }
                else
                {
                  llvm::raw_ostream::write(v240, "  ", 2uLL);
                  v243 = (_DWORD *)*((_QWORD *)v241 + 4);
                }
                if (*((_QWORD *)v241 + 3) - (_QWORD)v243 > 3uLL)
                {
                  *v243 = 1953723725;
                  v244 = (_WORD *)(*((_QWORD *)v241 + 4) + 4);
                  *((_QWORD *)v241 + 4) = v244;
                }
                else
                {
                  llvm::raw_ostream::write(v241, "Must", 4uLL);
                  v244 = (_WORD *)*((_QWORD *)v241 + 4);
                }
                if (*((_QWORD *)v241 + 3) - (_QWORD)v244 > 1uLL)
                {
                  *v244 = 8250;
                  *((_QWORD *)v241 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v241, ": ", 2uLL);
                }
                llvm::Value::print(v235, v241, 0);
                v245 = *((_QWORD *)v241 + 4);
                if ((unint64_t)(*((_QWORD *)v241 + 3) - v245) > 4)
                {
                  *(_BYTE *)(v245 + 4) = 32;
                  *(_DWORD *)v245 = 1043151904;
                  *((_QWORD *)v241 + 4) += 5;
                }
                else
                {
                  llvm::raw_ostream::write(v241, " <-> ", 5uLL);
                }
                llvm::Value::print(v237, v241, 0);
                v246 = (_BYTE *)*((_QWORD *)v241 + 4);
                if ((unint64_t)v246 >= *((_QWORD *)v241 + 3))
                {
                  llvm::raw_ostream::write(v241, 10);
                }
                else
                {
                  *((_QWORD *)v241 + 4) = v246 + 1;
                  *v246 = 10;
                }
                v239 = (_QWORD *)((char *)v297 + 72);
              }
              goto LABEL_478;
            case 1:
              v239 = (_QWORD *)((char *)v297 + 80);
              if (byte_1ED7EF3D8 | byte_1ED7EFB58)
              {
                v261 = (llvm::raw_ostream *)llvm::errs(v238);
                v262 = v261;
                v263 = (_WORD *)*((_QWORD *)v261 + 4);
                if (*((_QWORD *)v261 + 3) - (_QWORD)v263 > 1uLL)
                {
                  *v263 = 8224;
                  v264 = *((_QWORD *)v261 + 4) + 2;
                  *((_QWORD *)v261 + 4) = v264;
                }
                else
                {
                  llvm::raw_ostream::write(v261, "  ", 2uLL);
                  v264 = *((_QWORD *)v262 + 4);
                }
                if ((unint64_t)(*((_QWORD *)v262 + 3) - v264) > 0x13)
                {
                  *(_DWORD *)(v264 + 16) = 695427433;
                  *(_OWORD *)v264 = *(_OWORD *)"Just Ref (MustAlias)";
                  v265 = (_WORD *)(*((_QWORD *)v262 + 4) + 20);
                  *((_QWORD *)v262 + 4) = v265;
                }
                else
                {
                  llvm::raw_ostream::write(v262, "Just Ref (MustAlias)", 0x14uLL);
                  v265 = (_WORD *)*((_QWORD *)v262 + 4);
                }
                if (*((_QWORD *)v262 + 3) - (_QWORD)v265 > 1uLL)
                {
                  *v265 = 8250;
                  *((_QWORD *)v262 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v262, ": ", 2uLL);
                }
                llvm::Value::print(v235, v262, 0);
                v266 = *((_QWORD *)v262 + 4);
                if ((unint64_t)(*((_QWORD *)v262 + 3) - v266) > 4)
                {
                  *(_BYTE *)(v266 + 4) = 32;
                  *(_DWORD *)v266 = 1043151904;
                  *((_QWORD *)v262 + 4) += 5;
                }
                else
                {
                  llvm::raw_ostream::write(v262, " <-> ", 5uLL);
                }
                llvm::Value::print(v237, v262, 0);
                v267 = (_BYTE *)*((_QWORD *)v262 + 4);
                if ((unint64_t)v267 >= *((_QWORD *)v262 + 3))
                {
                  llvm::raw_ostream::write(v262, 10);
                }
                else
                {
                  *((_QWORD *)v262 + 4) = v267 + 1;
                  *v267 = 10;
                }
                v239 = (_QWORD *)((char *)v297 + 80);
              }
              goto LABEL_478;
            case 2:
              v239 = (_QWORD *)((char *)v297 + 88);
              if (byte_1ED7EF3D8 | byte_1ED7EFC18)
              {
                v254 = (llvm::raw_ostream *)llvm::errs(v238);
                v255 = v254;
                v256 = (_WORD *)*((_QWORD *)v254 + 4);
                if (*((_QWORD *)v254 + 3) - (_QWORD)v256 > 1uLL)
                {
                  *v256 = 8224;
                  v257 = *((_QWORD *)v254 + 4) + 2;
                  *((_QWORD *)v254 + 4) = v257;
                }
                else
                {
                  llvm::raw_ostream::write(v254, "  ", 2uLL);
                  v257 = *((_QWORD *)v255 + 4);
                }
                if ((unint64_t)(*((_QWORD *)v255 + 3) - v257) > 0x13)
                {
                  *(_DWORD *)(v257 + 16) = 695427433;
                  *(_OWORD *)v257 = *(_OWORD *)"Just Mod (MustAlias)";
                  v258 = (_WORD *)(*((_QWORD *)v255 + 4) + 20);
                  *((_QWORD *)v255 + 4) = v258;
                }
                else
                {
                  llvm::raw_ostream::write(v255, "Just Mod (MustAlias)", 0x14uLL);
                  v258 = (_WORD *)*((_QWORD *)v255 + 4);
                }
                if (*((_QWORD *)v255 + 3) - (_QWORD)v258 > 1uLL)
                {
                  *v258 = 8250;
                  *((_QWORD *)v255 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v255, ": ", 2uLL);
                }
                llvm::Value::print(v235, v255, 0);
                v259 = *((_QWORD *)v255 + 4);
                if ((unint64_t)(*((_QWORD *)v255 + 3) - v259) > 4)
                {
                  *(_BYTE *)(v259 + 4) = 32;
                  *(_DWORD *)v259 = 1043151904;
                  *((_QWORD *)v255 + 4) += 5;
                }
                else
                {
                  llvm::raw_ostream::write(v255, " <-> ", 5uLL);
                }
                llvm::Value::print(v237, v255, 0);
                v260 = (_BYTE *)*((_QWORD *)v255 + 4);
                if ((unint64_t)v260 >= *((_QWORD *)v255 + 3))
                {
                  llvm::raw_ostream::write(v255, 10);
                }
                else
                {
                  *((_QWORD *)v255 + 4) = v260 + 1;
                  *v260 = 10;
                }
                v239 = (_QWORD *)((char *)v297 + 88);
              }
              goto LABEL_478;
            case 3:
              v239 = (_QWORD *)((char *)v297 + 96);
              if (byte_1ED7EF3D8 | byte_1ED7EFCD8)
              {
                v268 = (llvm::raw_ostream *)llvm::errs(v238);
                v269 = v268;
                v270 = (_WORD *)*((_QWORD *)v268 + 4);
                if (*((_QWORD *)v268 + 3) - (_QWORD)v270 > 1uLL)
                {
                  *v270 = 8224;
                  v271 = (void *)(*((_QWORD *)v268 + 4) + 2);
                  *((_QWORD *)v268 + 4) = v271;
                }
                else
                {
                  llvm::raw_ostream::write(v268, "  ", 2uLL);
                  v271 = (void *)*((_QWORD *)v269 + 4);
                }
                if (*((_QWORD *)v269 + 3) - (_QWORD)v271 > 0x16uLL)
                {
                  qmemcpy(v271, "Both ModRef (MustAlias)", 23);
                  v272 = (_WORD *)(*((_QWORD *)v269 + 4) + 23);
                  *((_QWORD *)v269 + 4) = v272;
                }
                else
                {
                  llvm::raw_ostream::write(v269, "Both ModRef (MustAlias)", 0x17uLL);
                  v272 = (_WORD *)*((_QWORD *)v269 + 4);
                }
                if (*((_QWORD *)v269 + 3) - (_QWORD)v272 > 1uLL)
                {
                  *v272 = 8250;
                  *((_QWORD *)v269 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v269, ": ", 2uLL);
                }
                llvm::Value::print(v235, v269, 0);
                v273 = *((_QWORD *)v269 + 4);
                if ((unint64_t)(*((_QWORD *)v269 + 3) - v273) > 4)
                {
                  *(_BYTE *)(v273 + 4) = 32;
                  *(_DWORD *)v273 = 1043151904;
                  *((_QWORD *)v269 + 4) += 5;
                }
                else
                {
                  llvm::raw_ostream::write(v269, " <-> ", 5uLL);
                }
                llvm::Value::print(v237, v269, 0);
                v274 = (_BYTE *)*((_QWORD *)v269 + 4);
                if ((unint64_t)v274 >= *((_QWORD *)v269 + 3))
                {
                  llvm::raw_ostream::write(v269, 10);
                }
                else
                {
                  *((_QWORD *)v269 + 4) = v274 + 1;
                  *v274 = 10;
                }
                v239 = (_QWORD *)((char *)v297 + 96);
              }
              goto LABEL_478;
            case 4:
              v239 = (_QWORD *)((char *)v297 + 40);
              if (byte_1ED7EF3D8 | byte_1ED7EF798)
              {
                v247 = (llvm::raw_ostream *)llvm::errs(v238);
                v248 = v247;
                v249 = (_WORD *)*((_QWORD *)v247 + 4);
                if (*((_QWORD *)v247 + 3) - (_QWORD)v249 > 1uLL)
                {
                  *v249 = 8224;
                  v250 = (_QWORD *)(*((_QWORD *)v247 + 4) + 2);
                  *((_QWORD *)v247 + 4) = v250;
                }
                else
                {
                  llvm::raw_ostream::write(v247, "  ", 2uLL);
                  v250 = (_QWORD *)*((_QWORD *)v248 + 4);
                }
                if (*((_QWORD *)v248 + 3) - (_QWORD)v250 > 7uLL)
                {
                  *v250 = 0x666552646F4D6F4ELL;
                  v251 = (_WORD *)(*((_QWORD *)v248 + 4) + 8);
                  *((_QWORD *)v248 + 4) = v251;
                }
                else
                {
                  llvm::raw_ostream::write(v248, "NoModRef", 8uLL);
                  v251 = (_WORD *)*((_QWORD *)v248 + 4);
                }
                if (*((_QWORD *)v248 + 3) - (_QWORD)v251 > 1uLL)
                {
                  *v251 = 8250;
                  *((_QWORD *)v248 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v248, ": ", 2uLL);
                }
                llvm::Value::print(v235, v248, 0);
                v252 = *((_QWORD *)v248 + 4);
                if ((unint64_t)(*((_QWORD *)v248 + 3) - v252) > 4)
                {
                  *(_BYTE *)(v252 + 4) = 32;
                  *(_DWORD *)v252 = 1043151904;
                  *((_QWORD *)v248 + 4) += 5;
                }
                else
                {
                  llvm::raw_ostream::write(v248, " <-> ", 5uLL);
                }
                llvm::Value::print(v237, v248, 0);
                v253 = (_BYTE *)*((_QWORD *)v248 + 4);
                if ((unint64_t)v253 >= *((_QWORD *)v248 + 3))
                {
                  llvm::raw_ostream::write(v248, 10);
                }
                else
                {
                  *((_QWORD *)v248 + 4) = v253 + 1;
                  *v253 = 10;
                }
                v239 = (_QWORD *)((char *)v297 + 40);
              }
              goto LABEL_478;
            case 5:
              v239 = (_QWORD *)((char *)v297 + 56);
              if (byte_1ED7EF3D8 | byte_1ED7EF858)
              {
                v282 = (llvm::raw_ostream *)llvm::errs(v238);
                v283 = v282;
                v284 = (_WORD *)*((_QWORD *)v282 + 4);
                if (*((_QWORD *)v282 + 3) - (_QWORD)v284 > 1uLL)
                {
                  *v284 = 8224;
                  v285 = (_QWORD *)(*((_QWORD *)v282 + 4) + 2);
                  *((_QWORD *)v282 + 4) = v285;
                }
                else
                {
                  llvm::raw_ostream::write(v282, "  ", 2uLL);
                  v285 = (_QWORD *)*((_QWORD *)v283 + 4);
                }
                if (*((_QWORD *)v283 + 3) - (_QWORD)v285 > 7uLL)
                {
                  *v285 = 0x666552207473754ALL;
                  v286 = (_WORD *)(*((_QWORD *)v283 + 4) + 8);
                  *((_QWORD *)v283 + 4) = v286;
                }
                else
                {
                  llvm::raw_ostream::write(v283, "Just Ref", 8uLL);
                  v286 = (_WORD *)*((_QWORD *)v283 + 4);
                }
                if (*((_QWORD *)v283 + 3) - (_QWORD)v286 > 1uLL)
                {
                  *v286 = 8250;
                  *((_QWORD *)v283 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v283, ": ", 2uLL);
                }
                llvm::Value::print(v235, v283, 0);
                v287 = *((_QWORD *)v283 + 4);
                if ((unint64_t)(*((_QWORD *)v283 + 3) - v287) > 4)
                {
                  *(_BYTE *)(v287 + 4) = 32;
                  *(_DWORD *)v287 = 1043151904;
                  *((_QWORD *)v283 + 4) += 5;
                }
                else
                {
                  llvm::raw_ostream::write(v283, " <-> ", 5uLL);
                }
                llvm::Value::print(v237, v283, 0);
                v288 = (_BYTE *)*((_QWORD *)v283 + 4);
                if ((unint64_t)v288 >= *((_QWORD *)v283 + 3))
                {
                  llvm::raw_ostream::write(v283, 10);
                }
                else
                {
                  *((_QWORD *)v283 + 4) = v288 + 1;
                  *v288 = 10;
                }
                v239 = (_QWORD *)((char *)v297 + 56);
              }
              goto LABEL_478;
            case 6:
              v239 = (_QWORD *)((char *)v297 + 48);
              if (byte_1ED7EF3D8 | byte_1ED7EF918)
              {
                v289 = (llvm::raw_ostream *)llvm::errs(v238);
                v290 = v289;
                v291 = (_WORD *)*((_QWORD *)v289 + 4);
                if (*((_QWORD *)v289 + 3) - (_QWORD)v291 > 1uLL)
                {
                  *v291 = 8224;
                  v292 = (_QWORD *)(*((_QWORD *)v289 + 4) + 2);
                  *((_QWORD *)v289 + 4) = v292;
                }
                else
                {
                  llvm::raw_ostream::write(v289, "  ", 2uLL);
                  v292 = (_QWORD *)*((_QWORD *)v290 + 4);
                }
                if (*((_QWORD *)v290 + 3) - (_QWORD)v292 > 7uLL)
                {
                  *v292 = 0x646F4D207473754ALL;
                  v293 = (_WORD *)(*((_QWORD *)v290 + 4) + 8);
                  *((_QWORD *)v290 + 4) = v293;
                }
                else
                {
                  llvm::raw_ostream::write(v290, "Just Mod", 8uLL);
                  v293 = (_WORD *)*((_QWORD *)v290 + 4);
                }
                if (*((_QWORD *)v290 + 3) - (_QWORD)v293 > 1uLL)
                {
                  *v293 = 8250;
                  *((_QWORD *)v290 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v290, ": ", 2uLL);
                }
                llvm::Value::print(v235, v290, 0);
                v294 = *((_QWORD *)v290 + 4);
                if ((unint64_t)(*((_QWORD *)v290 + 3) - v294) > 4)
                {
                  *(_BYTE *)(v294 + 4) = 32;
                  *(_DWORD *)v294 = 1043151904;
                  *((_QWORD *)v290 + 4) += 5;
                }
                else
                {
                  llvm::raw_ostream::write(v290, " <-> ", 5uLL);
                }
                llvm::Value::print(v237, v290, 0);
                v295 = (_BYTE *)*((_QWORD *)v290 + 4);
                if ((unint64_t)v295 >= *((_QWORD *)v290 + 3))
                {
                  llvm::raw_ostream::write(v290, 10);
                }
                else
                {
                  *((_QWORD *)v290 + 4) = v295 + 1;
                  *v295 = 10;
                }
                v239 = (_QWORD *)((char *)v297 + 48);
              }
              goto LABEL_478;
            case 7:
              v239 = (_QWORD *)((char *)v297 + 64);
              if (byte_1ED7EF3D8 | byte_1ED7EF9D8)
              {
                v275 = (llvm::raw_ostream *)llvm::errs(v238);
                v276 = v275;
                v277 = (_WORD *)*((_QWORD *)v275 + 4);
                if (*((_QWORD *)v275 + 3) - (_QWORD)v277 > 1uLL)
                {
                  *v277 = 8224;
                  v278 = *((_QWORD *)v275 + 4) + 2;
                  *((_QWORD *)v275 + 4) = v278;
                }
                else
                {
                  llvm::raw_ostream::write(v275, "  ", 2uLL);
                  v278 = *((_QWORD *)v276 + 4);
                }
                if ((unint64_t)(*((_QWORD *)v276 + 3) - v278) > 0xA)
                {
                  *(_DWORD *)(v278 + 7) = 1717916260;
                  *(_QWORD *)v278 = *(_QWORD *)"Both ModRef";
                  v279 = (_WORD *)(*((_QWORD *)v276 + 4) + 11);
                  *((_QWORD *)v276 + 4) = v279;
                }
                else
                {
                  llvm::raw_ostream::write(v276, "Both ModRef", 0xBuLL);
                  v279 = (_WORD *)*((_QWORD *)v276 + 4);
                }
                if (*((_QWORD *)v276 + 3) - (_QWORD)v279 > 1uLL)
                {
                  *v279 = 8250;
                  *((_QWORD *)v276 + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(v276, ": ", 2uLL);
                }
                llvm::Value::print(v235, v276, 0);
                v280 = *((_QWORD *)v276 + 4);
                if ((unint64_t)(*((_QWORD *)v276 + 3) - v280) > 4)
                {
                  *(_BYTE *)(v280 + 4) = 32;
                  *(_DWORD *)v280 = 1043151904;
                  *((_QWORD *)v276 + 4) += 5;
                }
                else
                {
                  llvm::raw_ostream::write(v276, " <-> ", 5uLL);
                }
                llvm::Value::print(v237, v276, 0);
                v281 = (_BYTE *)*((_QWORD *)v276 + 4);
                if ((unint64_t)v281 >= *((_QWORD *)v276 + 3))
                {
                  llvm::raw_ostream::write(v276, 10);
                }
                else
                {
                  *((_QWORD *)v276 + 4) = v281 + 1;
                  *v281 = 10;
                }
                v239 = (_QWORD *)((char *)v297 + 64);
              }
LABEL_478:
              ++*v239;
              break;
            default:
              break;
          }
        }
        ++v232;
        v236 -= 8;
      }
      while (v236);
      while (++v234 != v233)
      {
        v231 = v358;
        v232 = (const llvm::CallBase **)v357;
        if ((_DWORD)v358)
          goto LABEL_371;
      }
    }
  }
  if (v325)
  {
    v326 = (uint64_t *)v325;
    operator delete(v325);
  }
  MEMORY[0x1CAA32FB4](v323[0], 8);
  if (v330)
  {
    v331 = (llvm::Value *)v330;
    operator delete(v330);
  }
  MEMORY[0x1CAA32FB4](v328[0], 8);
  if (v357 != v359)
    free(v357);
  if ((v356[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v356[1], 8);
  return sub_1C6176BF8(v333);
}

_QWORD *llvm::InstCountPass::run@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = a1 + 32;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = 2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

void sub_1C4D9539C(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  _BYTE v14[24];

  sub_1C6178BCC((uint64_t)v14, (uint64_t)a1, a2);
  if (v14[16])
  {
    v5 = (_OWORD *)a1[4];
    v4 = a1[5];
    if ((unint64_t)v5 >= v4)
    {
      v7 = (_OWORD *)a1[3];
      v8 = v5 - v7;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 60)
        abort();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 3 > v9)
        v9 = v10 >> 3;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
        v11 = 0xFFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        if (v11 >> 60)
          sub_1C4764EE4();
        v12 = (char *)operator new(16 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[16 * v8];
      *(_OWORD *)v13 = *(_OWORD *)a2;
      v6 = v13 + 16;
      if (v5 != v7)
      {
        do
        {
          *((_OWORD *)v13 - 1) = *(v5 - 1);
          v13 -= 16;
          --v5;
        }
        while (v5 != v7);
        v5 = (_OWORD *)a1[3];
      }
      a1[3] = v13;
      a1[4] = v6;
      a1[5] = &v12[16 * v11];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *v5 = *(_OWORD *)a2;
      v6 = v5 + 1;
    }
    a1[4] = v6;
  }
}

BOOL sub_1C4D954B8(_QWORD *a1, _QWORD *a2)
{
  int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 v18;

  sub_1C4D95920((uint64_t)a1, a2, (uint64_t)&v17);
  v4 = v18;
  if (v18)
  {
    v6 = (_QWORD *)a1[4];
    v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      v8 = (_QWORD *)a1[3];
      v9 = v6 - v8;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_1C4764EE4();
        v13 = (char *)operator new(8 * v12);
      }
      else
      {
        v13 = 0;
      }
      v14 = &v13[8 * v9];
      *(_QWORD *)v14 = *a2;
      v7 = v14 + 8;
      if (v6 != v8)
      {
        do
        {
          v15 = *--v6;
          *((_QWORD *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v6 != v8);
        v6 = (_QWORD *)a1[3];
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = &v13[8 * v12];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v6 = *a2;
      v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

BOOL sub_1C4D955D4(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 v9;

  sub_1C4D95BA8(a1, a2, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 144);
    if (v6 >= *(_DWORD *)(a1 + 148))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 136, a1 + 152, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 144);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 144);
  }
  return v4 != 0;
}

llvm::raw_ostream *sub_1C4D95660(llvm *a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  llvm::raw_ostream *result;
  uint64_t v9;

  v4 = (llvm::raw_ostream *)llvm::errs(a1);
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if (*((_BYTE **)v4 + 3) == v5)
  {
    v4 = llvm::raw_ostream::write(v4, "(", 1uLL);
  }
  else
  {
    *v5 = 40;
    ++*((_QWORD *)v4 + 4);
  }
  v6 = llvm::raw_ostream::operator<<(v4, 100 * (uint64_t)a1 / a2);
  v7 = (_BYTE *)*((_QWORD *)v6 + 4);
  if (*((_BYTE **)v6 + 3) == v7)
  {
    v6 = llvm::raw_ostream::write(v6, ".", 1uLL);
  }
  else
  {
    *v7 = 46;
    ++*((_QWORD *)v6 + 4);
  }
  result = llvm::raw_ostream::operator<<(v6, 1000 * (uint64_t)a1 / a2 % 10);
  v9 = *((_QWORD *)result + 4);
  if ((unint64_t)(*((_QWORD *)result + 3) - v9) <= 2)
    return llvm::raw_ostream::write(result, "%)\n", 3uLL);
  *(_BYTE *)(v9 + 2) = 10;
  *(_WORD *)v9 = 10533;
  *((_QWORD *)result + 4) += 3;
  return result;
}

void llvm::initializeAAEvalLegacyPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82C628);
  if (v1 != -1)
  {
    v4[0] = sub_1C4D957C8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82C628, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4D957C8(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Exhaustive Alias Analysis Precision Evaluator";
  *(_QWORD *)(v3 + 8) = 45;
  *(_QWORD *)(v3 + 16) = "aa-eval";
  *(_QWORD *)(v3 + 24) = 7;
  *(_QWORD *)(v3 + 32) = &llvm::AAEvalLegacyPass::ID;
  *(_WORD *)(v3 + 40) = 256;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::AAEvalLegacyPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

void sub_1C4D95860(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  v9 = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v9;
  if (v4)
  {
    sub_1C6178E00(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    memset_pattern16(v9, &unk_1C85F2160, 16 * v10);
}

uint64_t sub_1C4D95920@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C4D959A4((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C4D95A40(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C4D959A4(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_7;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4D95A40(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1C4D95AF0(a1, v7);
    v9 = 0;
    sub_1C4D959A4((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4D95AF0(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6178EC0(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C4D95BA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C49EE218(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 16;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = 0;
    v10 = v12 + 8 * v13;
  }
  else
  {
    result = sub_1C4D95C60((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 16;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = v8 + 8 * v9;
    v11 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

_QWORD *sub_1C4D95C60(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 16;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C4D95D20((uint64_t)a1, v7);
  v9 = 0;
  sub_1C49EE218((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C4D95D20(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4D95E88(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 136; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4D95E88(a1, v14, v8);
}

uint64_t sub_1C4D95E88(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C49EE218((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C4D95F44()
{
  int v1;

  v1 = 2;
  sub_1C61785AC(&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EF358, &dword_1C475E000);
  v1 = 2;
  sub_1C6178658((llvm::cl::Option *)&unk_1ED7EF418, "print-no-aliases", &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EF418, &dword_1C475E000);
  v1 = 2;
  sub_1C6178718(&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EF4D8, &dword_1C475E000);
  v1 = 2;
  sub_1C61787C4(&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EF598, &dword_1C475E000);
  v1 = 2;
  sub_1C6178870(&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EF658, &dword_1C475E000);
  v1 = 2;
  sub_1C617891C(&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EF718, &dword_1C475E000);
  v1 = 2;
  sub_1C6178658((llvm::cl::Option *)&unk_1ED7EF7D8, "print-ref", &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EF7D8, &dword_1C475E000);
  v1 = 2;
  sub_1C6178658((llvm::cl::Option *)&unk_1ED7EF898, "print-mod", &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EF898, &dword_1C475E000);
  v1 = 2;
  sub_1C61789C8(&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EF958, &dword_1C475E000);
  v1 = 2;
  sub_1C6178A74(&v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EFA18, &dword_1C475E000);
  v1 = 2;
  sub_1C6178658((llvm::cl::Option *)&unk_1ED7EFAD8, "print-mustref", &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EFAD8, &dword_1C475E000);
  v1 = 2;
  sub_1C6178658((llvm::cl::Option *)&unk_1ED7EFB98, "print-mustmod", &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EFB98, &dword_1C475E000);
  v1 = 2;
  sub_1C6178658((llvm::cl::Option *)&unk_1ED7EFC58, "print-mustmodref", &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EFC58, &dword_1C475E000);
  v1 = 2;
  sub_1C6178B20(&v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED7EFD18, &dword_1C475E000);
}

uint64_t llvm::cflaa::getAttrNone(llvm::cflaa *this)
{
  return 0;
}

uint64_t llvm::cflaa::hasUnknownAttr(unint64_t a1)
{
  return (a1 >> 1) & 1;
}

uint64_t llvm::cflaa::hasCallerAttr(unint64_t a1)
{
  return (a1 >> 8) & 1;
}

uint64_t llvm::cflaa::hasEscapedAttr(char a1)
{
  return a1 & 1;
}

uint64_t llvm::cflaa::getGlobalOrArgAttrFromValue(uint64_t a1)
{
  unsigned int v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 < 4)
    return 4;
  if (v1 != 21)
    return 0;
  if (*(_BYTE *)(*(_QWORD *)a1 + 8) != 15)
    return 0;
  v3 = *(_DWORD *)(a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 112);
  if (v4)
  {
    if (v3 + 2 < *(_DWORD *)(v4 + 8))
    {
      v5 = *(_QWORD *)(v4 + 8 * (v3 + 2) + 40);
      if (v5)
      {
        if ((*(_BYTE *)(v5 + 14) & 8) != 0)
          return 0;
      }
    }
  }
  if (v3 <= 0x1B)
    return (1 << (v3 + 4));
  return 2;
}

uint64_t llvm::cflaa::instantiateInterfaceValue@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;

  if ((_DWORD)result)
    a2 = *(_DWORD **)&a2[8 * (result - 1) + -8 * (a2[5] & 0x7FFFFFF)];
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15)
  {
    *(_QWORD *)a3 = a2;
    *(_DWORD *)(a3 + 8) = HIDWORD(result);
    v3 = 1;
  }
  else
  {
    v3 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v3;
  return result;
}

uint64_t *llvm::cflaa::instantiateExternalRelation@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *result;
  v4 = a2;
  if (*result)
    v4 = *(_DWORD **)&a2[8 * (v3 - 1) + -8 * (a2[5] & 0x7FFFFFF)];
  if (*(_BYTE *)(*(_QWORD *)v4 + 8) != 15)
    goto LABEL_8;
  v5 = result[1];
  if ((_DWORD)v5)
    a2 = *(_DWORD **)&a2[8 * (v5 - 1) + -8 * (a2[5] & 0x7FFFFFF)];
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15)
  {
    v6 = result[2];
    *(_QWORD *)a3 = v4;
    *(_DWORD *)(a3 + 8) = HIDWORD(v3);
    *(_QWORD *)(a3 + 16) = a2;
    *(_DWORD *)(a3 + 24) = HIDWORD(v5);
    *(_QWORD *)(a3 + 32) = v6;
    v7 = 1;
  }
  else
  {
LABEL_8:
    v7 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 40) = v7;
  return result;
}

uint64_t llvm::cflaa::instantiateExternalAttribute@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  char v4;

  if ((_DWORD)result)
    a3 = *(_DWORD **)&a3[8 * (result - 1) + -8 * (a3[5] & 0x7FFFFFF)];
  if (*(_BYTE *)(*(_QWORD *)a3 + 8) == 15)
  {
    *(_QWORD *)a4 = a3;
    *(_DWORD *)(a4 + 8) = HIDWORD(result);
    *(_QWORD *)(a4 + 16) = a2;
    v4 = 1;
  }
  else
  {
    v4 = 0;
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 24) = v4;
  return result;
}

_QWORD *llvm::AliasSet::mergeSetIn(llvm::AliasSet *this, llvm::AliasSet *a2, llvm::AliasSetTracker *a3)
{
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33[2];
  _QWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37[2];
  _QWORD v38[2];
  __int128 v39;
  __int128 v40;

  v6 = *((_DWORD *)this + 16);
  v7 = *((_DWORD *)a2 + 16) & 0x30000000 | v6;
  *((_DWORD *)this + 16) = v7;
  v8 = *((_DWORD *)a2 + 16) | v6;
  v9 = v7 & 0xBFFFFFFF | (((v8 >> 30) & 1) << 30);
  *((_DWORD *)this + 16) = v9;
  if ((v8 & 0x40000000) == 0)
  {
    v10 = *(_QWORD *)a3;
    v11 = (uint64_t *)*((_QWORD *)this + 2);
    v12 = (uint64_t *)*((_QWORD *)a2 + 2);
    v13 = *v11;
    v14 = v11[4];
    sub_1C4D965B4((uint64_t)v11, v37);
    v38[0] = v13;
    v38[1] = v14;
    v39 = v37[0];
    v40 = v37[1];
    v15 = *v12;
    v16 = v12[4];
    sub_1C4D965B4((uint64_t)v12, v33);
    v34[0] = v15;
    v34[1] = v16;
    v35 = v33[0];
    v36 = v33[1];
    v17 = llvm::AAResults::alias(v10, (uint64_t)v38, (uint64_t)v34);
    v9 = *((_DWORD *)this + 16);
    if (v17 != 3)
    {
      v9 |= 0x40000000u;
      *((_DWORD *)this + 16) = v9;
    }
  }
  if ((v9 & 0x40000000) != 0)
  {
    if ((v6 & 0x40000000) == 0)
      *((_DWORD *)a3 + 12) += *((_DWORD *)this + 17);
    if ((*((_BYTE *)a2 + 67) & 0x40) == 0)
      *((_DWORD *)a3 + 12) += *((_DWORD *)a2 + 17);
  }
  v18 = (uint64_t *)*((_QWORD *)a2 + 5);
  v19 = (uint64_t *)*((_QWORD *)a2 + 6);
  v22 = *((_QWORD *)this + 5);
  v21 = *((_QWORD *)this + 6);
  result = (_QWORD *)((char *)this + 40);
  if (v22 == v21)
  {
    if (v18 != v19)
    {
      *((_QWORD *)this + 5) = v18;
      *((_QWORD *)a2 + 5) = v22;
      v30 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a2 + 6) = v30;
      v31 = *((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
      *((_QWORD *)a2 + 7) = v31;
      *((_DWORD *)this + 16) = *((_DWORD *)this + 16) & 0xF8000000 | (*((_DWORD *)this + 16) + 1) & 0x7FFFFFF;
    }
  }
  else if (v18 != v19)
  {
    v24 = (uint64_t *)*((_QWORD *)a2 + 5);
    v25 = (uint64_t *)*((_QWORD *)a2 + 6);
    result = sub_1C4D99394(result, v21, v18, v19, 0xAAAAAAAAAAAAAAABLL * (v19 - v18));
    v27 = (_QWORD *)*((_QWORD *)a2 + 5);
    v26 = (_QWORD *)*((_QWORD *)a2 + 6);
    while (v26 != v27)
    {
      v28 = *(v26 - 1);
      v26 -= 3;
      if (v28 != -8192 && v28 != -4096 && v28 != 0)
        result = llvm::ValueHandleBase::RemoveFromUseList(v26);
    }
    *((_QWORD *)a2 + 6) = v27;
    v18 = v24;
    v19 = v25;
  }
  *((_QWORD *)a2 + 4) = this;
  *((_DWORD *)this + 16) = *((_DWORD *)this + 16) & 0xF8000000 | (*((_DWORD *)this + 16) + 1) & 0x7FFFFFF;
  v23 = *((_QWORD *)a2 + 2);
  if (v23)
  {
    *((_DWORD *)this + 17) += *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = 0;
    **((_QWORD **)this + 3) = v23;
    *(_QWORD *)(*((_QWORD *)a2 + 2) + 8) = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = (char *)a2 + 16;
  }
  if (v18 != v19)
  {
    v32 = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v32 & 0xF8000000 | (v32 - 1) & 0x7FFFFFF;
    if (((v32 - 1) & 0x7FFFFFF) == 0)
      return (_QWORD *)llvm::AliasSetTracker::removeAliasSet(a3, a2);
  }
  return result;
}

double sub_1C4D965B4@<D0>(uint64_t a1@<X0>, __int128 *a2@<X8>)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v2 = (__int128 *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 != -8192 && v3 != -4096 || *(_QWORD *)(a1 + 48) || *(_QWORD *)(a1 + 56) || *(_QWORD *)(a1 + 64))
  {
    v4 = *v2;
    v5 = *(_OWORD *)(a1 + 56);
    *a2 = *v2;
    a2[1] = v5;
  }
  else
  {
    *(_QWORD *)&v4 = 0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return *(double *)&v4;
}

uint64_t llvm::AliasSetTracker::removeAliasSet(llvm::AliasSetTracker *this, llvm::AliasSet *a2)
{
  llvm::AliasSet *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  void **v9;

  v4 = (llvm::AliasSet *)*((_QWORD *)a2 + 4);
  if (v4)
  {
    v5 = *((_DWORD *)v4 + 16);
    *((_DWORD *)v4 + 16) = v5 & 0xF8000000 | (v5 - 1) & 0x7FFFFFF;
    if (((v5 - 1) & 0x7FFFFFF) == 0)
      llvm::AliasSetTracker::removeAliasSet(this, v4);
    *((_QWORD *)a2 + 4) = 0;
  }
  else if ((*((_BYTE *)a2 + 67) & 0x40) != 0)
  {
    *((_DWORD *)this + 12) -= *((_DWORD *)a2 + 17);
  }
  v7 = *(_QWORD *)a2;
  v6 = (_QWORD *)*((_QWORD *)a2 + 1);
  *v6 = *(_QWORD *)a2;
  *(_QWORD *)(v7 + 8) = v6;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v9 = (void **)((char *)a2 + 40);
  sub_1C4D99900(&v9);
  result = MEMORY[0x1CAA32FC0](a2, 0x10A0C40E86B5DE6);
  if (*((llvm::AliasSet **)this + 7) == a2)
    *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t llvm::AliasSet::removeFromTracker(llvm::AliasSet *this, llvm::AliasSetTracker *a2)
{
  return llvm::AliasSetTracker::removeAliasSet(a2, this);
}

uint64_t llvm::AliasSet::addPointer(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, __int128 *a5, char a6, char a7)
{
  uint64_t *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  _QWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23[2];
  _QWORD v24[2];
  __int128 v25;
  __int128 v26;

  if ((*(_BYTE *)(a1 + 67) & 0x40) == 0)
  {
    v12 = *(uint64_t **)(a1 + 16);
    if (v12)
    {
      if ((a6 & 1) != 0)
      {
        if ((a7 & 1) == 0)
          sub_1C4D96800(v12, a4, (uint64_t)a5);
      }
      else
      {
        v15 = *(_QWORD *)a2;
        v16 = *v12;
        v17 = v12[4];
        sub_1C4D965B4((uint64_t)v12, v23);
        v24[0] = v16;
        v24[1] = v17;
        v25 = v23[0];
        v26 = v23[1];
        v20[0] = *a3;
        v20[1] = a4;
        v18 = a5[1];
        v21 = *a5;
        v22 = v18;
        if (llvm::AAResults::alias(v15, (uint64_t)v24, (uint64_t)v20) != 3)
        {
          v19 = *(_DWORD *)(a1 + 68);
          *(_DWORD *)(a1 + 64) |= 0x40000000u;
          *(_DWORD *)(a2 + 48) += v19;
        }
      }
    }
  }
  a3[3] = a1;
  result = sub_1C4D96800(a3, a4, (uint64_t)a5);
  ++*(_DWORD *)(a1 + 68);
  **(_QWORD **)(a1 + 24) = a3;
  a3[1] = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a3 + 2;
  v14 = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 64) = v14 & 0xF8000000 | (v14 + 1) & 0x7FFFFFF;
  if ((v14 & 0x40000000) != 0)
    ++*(_DWORD *)(a2 + 48);
  return result;
}

uint64_t sub_1C4D96800(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v22;

  v3 = a1[4];
  if (v3 == a2)
  {
    v4 = 0;
  }
  else
  {
    if (v3 == -3)
    {
      v5 = a2;
    }
    else
    {
      v5 = -1;
      if (a2 != -1 && v3 != -1)
      {
        v5 = -2;
        v6 = v3 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v3 & 0x7FFFFFFFFFFFFFFFuLL) <= (a2 & 0x7FFFFFFFFFFFFFFFuLL))
          v6 = a2 & 0x7FFFFFFFFFFFFFFFLL;
        v7 = v6 | 0x8000000000000000;
        if (v6 > 0x7FFFFFFFFFFFFFFBLL)
          v7 = -2;
        if (v6)
          v8 = v7;
        else
          v8 = 0;
        if (v3 == -2)
          v8 = -2;
        if (a2 != -2)
          v5 = v8;
      }
    }
    a1[4] = v5;
    v4 = v3 != v5;
  }
  v9 = a1[5];
  v10 = a1[6];
  v11 = a1[7];
  if (v9 == -4096 && v10 == 0)
  {
    if (!v11)
    {
      if (!a1[8])
      {
        v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)(a1 + 5) = *(_OWORD *)a3;
        *(_OWORD *)(a1 + 7) = v22;
        return v4;
      }
      v11 = 0;
    }
    v10 = 0;
  }
  if (*(_QWORD *)a3 == v9)
    v13 = a1[5];
  else
    v13 = 0;
  if (*(_QWORD *)(a3 + 8) == v10)
    v14 = v10;
  else
    v14 = 0;
  if (*(_QWORD *)(a3 + 16) == v11)
    v15 = v11;
  else
    v15 = 0;
  v16 = a1[8];
  if (*(_QWORD *)(a3 + 24) == v16)
    v17 = a1[8];
  else
    v17 = 0;
  if (v13 == v9 && v14 == v10 && v15 == v11 && v17 == v16)
    v4 = v4;
  else
    v4 = 1;
  a1[5] = v13;
  a1[6] = v14;
  a1[7] = v15;
  a1[8] = v17;
  return v4;
}

uint64_t llvm::AliasSet::addUnknownInst(llvm::AliasSet *this, llvm::Instruction *a2, llvm::AAResults *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  int v21;

  v6 = *((_QWORD *)this + 5);
  v7 = *((_QWORD *)this + 6);
  v5 = (uint64_t *)((char *)this + 40);
  if (v6 == v7)
    *((_DWORD *)this + 16) = *((_DWORD *)this + 16) & 0xF8000000 | (*((_DWORD *)this + 16) + 1) & 0x7FFFFFF;
  result = sub_1C6178FA4(v5, (uint64_t)a2);
  v9 = 1342177280;
  v10 = *((unsigned __int8 *)a2 + 16) - 33;
  if (v10 > 0x37)
    goto LABEL_24;
  if (((1 << (*((_BYTE *)a2 + 16) - 33)) & 0x8000000000041) != 0)
  {
    v11 = *((_QWORD *)a2 + 8);
    if (v11 && (*(_BYTE *)(v11 + 17) & 0x30) != 0)
      goto LABEL_16;
    v12 = *((_DWORD *)a2 + 5);
    if (v12 < 0
      && (v14 = (char *)a2 - 32 * (v12 & 0x7FFFFFF), v17 = *((_QWORD *)v14 - 1), v15 = v14 - 8, (v16 = v17) != 0))
    {
      v18 = -v16;
      while (1)
      {
        v19 = *(_DWORD *)(*(_QWORD *)&v15[v18] + 8);
        v20 = v19 > 7;
        v21 = (1 << v19) & 0x83;
        if (v20 || v21 == 0)
          break;
        v18 += 16;
        if (!v18)
          goto LABEL_11;
      }
    }
    else
    {
LABEL_11:
      result = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 45);
      if ((result & 1) != 0)
        goto LABEL_16;
      result = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44);
      if ((result & 1) != 0)
        goto LABEL_16;
    }
LABEL_15:
    result = llvm::isGuard((uint64_t)a2);
    if ((result & 1) == 0
      && (*((_QWORD *)a2 + 1)
       || *((_BYTE *)a2 + 16) != 84
       || (v13 = *((_QWORD *)a2 - 4)) == 0
       || *(_BYTE *)(v13 + 16)
       || *(_QWORD *)(v13 + 24) != *((_QWORD *)a2 + 9)
       || *(_DWORD *)(v13 + 36) != 164))
    {
      v9 = 1879048192;
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  if (v10 == 27)
  {
    if ((*((_WORD *)a2 + 9) & 0x301) != 0)
      goto LABEL_15;
LABEL_16:
    v9 = 1342177280;
    goto LABEL_24;
  }
  if (((1 << (*((_BYTE *)a2 + 16) - 33)) & 0x808001D0000010) != 0)
    goto LABEL_15;
LABEL_24:
  *((_DWORD *)this + 16) |= v9;
  return result;
}

uint64_t llvm::AliasSet::aliasesPointer(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5)
{
  int v5;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v5 = *(_DWORD *)(a1 + 64);
  if ((v5 & 0x8000000) != 0)
    return 1;
  v11 = *(uint64_t **)(a1 + 16);
  if ((v5 & 0x40000000) == 0)
  {
    v12 = *v11;
    v13 = v11[4];
    sub_1C4D965B4(*(_QWORD *)(a1 + 16), &v36);
    *(_QWORD *)&v28 = v12;
    *((_QWORD *)&v28 + 1) = v13;
    v29 = v36;
    v30 = v37;
    v32 = a2;
    v33 = a3;
    v14 = a4[1];
    v34 = *a4;
    v35 = v14;
    return llvm::AAResults::alias(a5, (uint64_t)&v28, (uint64_t)&v32);
  }
  for (; v11; v11 = (uint64_t *)v11[2])
  {
    *(_QWORD *)&v28 = a2;
    *((_QWORD *)&v28 + 1) = a3;
    v17 = a4[1];
    v29 = *a4;
    v30 = v17;
    v18 = *v11;
    v19 = v11[4];
    sub_1C4D965B4((uint64_t)v11, &v36);
    v32 = v18;
    v33 = v19;
    v34 = v36;
    v35 = v37;
    v15 = llvm::AAResults::alias(a5, (uint64_t)&v28, (uint64_t)&v32);
    if ((_BYTE)v15)
      return v15;
  }
  v20 = *(_QWORD *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 48);
  if (v20 == v21)
    return 0;
  v22 = -1431655765 * ((unint64_t)(v21 - v20) >> 3);
  if (!(_DWORD)v22)
    return 0;
  v23 = 0;
  v24 = 24 * v22;
  v16 = 1;
  while (1)
  {
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + v23 + 16);
    if (v25)
    {
      v26 = a4[1];
      v29 = *a4;
      v30 = v26;
      *(_QWORD *)&v28 = a2;
      *((_QWORD *)&v28 + 1) = a3;
      v31 = 1;
      if ((sub_1C4D90C64(a5, v25, &v28) & 3) != 0)
        break;
    }
    v23 += 24;
    if (v24 == v23)
      return 0;
  }
  return v16;
}

BOOL llvm::AliasSet::aliasesUnknownInst(llvm::AliasSet *this, const llvm::Instruction *a2, llvm::AAResults *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  _BOOL8 result;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int128 v20[2];
  __int128 v21[3];
  char v22;

  if ((*((_BYTE *)this + 67) & 8) != 0)
    return 1;
  v6 = -1431655765 * ((*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 24 * v6;
    do
    {
      v9 = *(unsigned __int8 **)(*((_QWORD *)this + 5) + v7 + 16);
      if (v9)
      {
        v10 = v9[16] - 33;
        v11 = v10 > 0x33;
        v12 = (1 << v10) & 0x8000000000041;
        if (v11 || v12 == 0)
          v9 = 0;
        result = 1;
        v15 = *((unsigned __int8 *)a2 + 16) - 33;
        if (v15 > 0x33 || ((1 << v15) & 0x8000000000041) == 0 || !v9)
          return result;
        if ((llvm::AAResults::getModRefInfo(a3, (const llvm::CallBase *)v9, a2) & 3) != 0
          || (llvm::AAResults::getModRefInfo(a3, a2, (const llvm::CallBase *)v9) & 3) != 0)
        {
          return 1;
        }
      }
      v7 += 24;
    }
    while (v8 != v7);
  }
  v16 = (uint64_t *)*((_QWORD *)this + 2);
  if (!v16)
    return 0;
  do
  {
    v17 = *v16;
    v18 = v16[4];
    sub_1C4D965B4((uint64_t)v16, v20);
    v21[1] = v20[0];
    v21[2] = v20[1];
    *(_QWORD *)&v21[0] = v17;
    *((_QWORD *)&v21[0] + 1) = v18;
    v22 = 1;
    v19 = sub_1C4D90C64((uint64_t)a3, (uint64_t)a2, v21) & 3;
    result = v19 != 0;
    if (v19)
      break;
    v16 = (uint64_t *)v16[2];
  }
  while (v16);
  return result;
}

uint64_t llvm::AliasSet::getUniqueInstruction(llvm::AliasSet *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*((_BYTE *)this + 67) & 8) == 0)
  {
    v1 = (_QWORD *)*((_QWORD *)this + 2);
    if (v1)
    {
      if (*((_QWORD *)this + 5) == *((_QWORD *)this + 6) && !v1[2])
      {
        v2 = *(_QWORD *)(*v1 + 8);
        if (!*(_QWORD *)(v2 + 8))
        {
          v3 = v2 + 24;
          return *(_QWORD *)v3;
        }
      }
    }
    else
    {
      v4 = *((_QWORD *)this + 5);
      if (*((_QWORD *)this + 6) - v4 == 24)
      {
        v3 = v4 + 16;
        return *(_QWORD *)v3;
      }
    }
  }
  return 0;
}

_QWORD *llvm::AliasSetTracker::clear(llvm::AliasSetTracker *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*((_DWORD *)this + 8))
  {
    v2 = *((unsigned int *)this + 10);
    if ((_DWORD)v2)
    {
      v3 = 48 * v2;
      v4 = *((_QWORD *)this + 3);
      while ((*(_QWORD *)(v4 + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 48;
        v3 -= 48;
        if (!v3)
          goto LABEL_6;
      }
    }
    else
    {
      v4 = *((_QWORD *)this + 3);
    }
    if (v4 != *((_QWORD *)this + 3) + 48 * v2)
      sub_1C4D96ECC(*(_QWORD **)(v4 + 40));
  }
LABEL_6:
  sub_1C4D96F18((_QWORD *)this + 3);
  return sub_1C4D99C88((uint64_t)this + 8, *((_QWORD **)this + 2), (_QWORD *)this + 1);
}

void sub_1C4D96ECC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[2];
  if (v1)
    *(_QWORD *)(v1 + 8) = a1[1];
  *(_QWORD *)a1[1] = v1;
  v2 = a1[3];
  if (*(_QWORD **)(v2 + 24) == a1 + 2)
    *(_QWORD *)(v2 + 24) = a1[1];
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4D96F18(_QWORD *a1)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  int32x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;

  if (a1[1])
  {
    v1 = *((_DWORD *)a1 + 4);
    if (v1 > 4 * *((_DWORD *)a1 + 2) && v1 >= 0x41)
    {
      return sub_1C4D99B44(a1);
    }
    else
    {
      if (v1)
      {
        v2 = (_QWORD *)*a1;
        v3 = *a1 + 48 * v1;
        do
        {
          v4 = v2[3];
          if (v4 != -4096)
          {
            if (v4 && v4 != -8192)
            {
              v5 = v2[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v5 = v2[2];
              v6 = (unint64_t *)v2[2];
              if (v6)
              {
                *v6 = *v6 & 7 | v5;
              }
              else
              {
                v7 = v2[3];
                v8 = ***(int32x2_t ****)v7;
                v9 = (unint64_t)v8[303];
                if (v9 <= v5)
                {
                  v10 = v8[305].u32[0];
                  if (v9 + 16 * v10 > v5)
                  {
                    v11 = v10 - 1;
                    LODWORD(v12) = v11 & ((v7 >> 4) ^ (v7 >> 9));
                    v13 = (uint64_t *)(v9 + 16 * v12);
                    v14 = *v13;
                    if (v7 == *v13)
                    {
LABEL_17:
                      *v13 = -8192;
                      v8[304] = vadd_s32(v8[304], (int32x2_t)0x1FFFFFFFFLL);
                      v7 = v2[3];
                    }
                    else
                    {
                      v15 = 1;
                      while (v14 != -4096)
                      {
                        v16 = v12 + v15++;
                        v12 = v16 & v11;
                        v14 = *(_QWORD *)(v9 + 16 * v12);
                        if (v7 == v14)
                        {
                          v13 = (uint64_t *)(v9 + 16 * v12);
                          goto LABEL_17;
                        }
                      }
                    }
                    *(_BYTE *)(v7 + 17) &= ~1u;
                  }
                }
              }
            }
            v2[3] = -4096;
          }
          v2[4] = 0;
          v2 += 6;
        }
        while (v2 != (_QWORD *)v3);
      }
      a1[1] = 0;
    }
  }
  return a1;
}

llvm::AliasSet *llvm::AliasSetTracker::mergeAliasSetsForPointer(uint64_t *a1, uint64_t a2, uint64_t a3, __int128 *a4, _BYTE *a5)
{
  uint64_t *v5;
  llvm::AliasSet *v6;
  llvm::AliasSet *v12;
  uint64_t *v13;
  int v14;

  *a5 = 1;
  v5 = a1 + 1;
  v6 = (llvm::AliasSet *)a1[2];
  if (v6 == (llvm::AliasSet *)(a1 + 1))
    return 0;
  v12 = 0;
  do
  {
    v13 = (uint64_t *)*((_QWORD *)v6 + 1);
    if (!*((_QWORD *)v6 + 4))
    {
      v14 = llvm::AliasSet::aliasesPointer((uint64_t)v6, a2, a3, a4, *a1);
      if (v14)
      {
        if (v14 != 3)
          *a5 = 0;
        if (v12)
          llvm::AliasSet::mergeSetIn(v12, v6, (llvm::AliasSetTracker *)a1);
        else
          v12 = v6;
      }
    }
    v6 = (llvm::AliasSet *)v13;
  }
  while (v13 != v5);
  return v12;
}

uint64_t llvm::AliasSetTracker::getAliasSetFor(uint64_t *a1, _QWORD ****a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  _QWORD *v6;
  uint64_t v7;
  llvm::AliasSet *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::AliasSet *v11;
  uint64_t v12;
  char v14;

  v4 = (uint64_t)*a2;
  v3 = (uint64_t)a2[1];
  v5 = (__int128 *)(a2 + 2);
  v6 = sub_1C4D972CC((uint64_t)a1, *a2);
  v7 = a1[7];
  if (v7)
  {
    if (v6[3])
      sub_1C4D96800(v6, v3, (uint64_t)v5);
    else
      llvm::AliasSet::addPointer(v7, (uint64_t)a1, v6, v3, v5, 0, 0);
    return a1[7];
  }
  else
  {
    v14 = 0;
    if (v6[3])
    {
      if (sub_1C4D96800(v6, v3, (uint64_t)v5))
        llvm::AliasSetTracker::mergeAliasSetsForPointer(a1, v4, v3, v5, &v14);
      v12 = sub_1C4D97660((uint64_t)v6, (llvm::AliasSetTracker *)a1);
      return sub_1C4D976DC(v12, (llvm::AliasSetTracker *)a1);
    }
    else
    {
      v8 = llvm::AliasSetTracker::mergeAliasSetsForPointer(a1, v4, v3, v5, &v14);
      if (v8)
      {
        v11 = v8;
        llvm::AliasSet::addPointer((uint64_t)v8, (uint64_t)a1, v6, v3, v5, v14, 0);
      }
      else
      {
        v9 = operator new();
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)(v9 + 24) = v9 + 16;
        *(_OWORD *)(v9 + 32) = 0u;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_DWORD *)(v9 + 64) &= 0x80000000;
        *(_DWORD *)(v9 + 68) = 0;
        v10 = a1[1];
        *(_QWORD *)v9 = v10;
        *(_QWORD *)(v9 + 8) = a1 + 1;
        *(_QWORD *)(v10 + 8) = v9;
        a1[1] = v9;
        llvm::AliasSet::addPointer(v9, (uint64_t)a1, v6, v3, v5, 1, 0);
        return a1[1];
      }
    }
  }
  return (uint64_t)v11;
}

_QWORD *sub_1C4D972CC(uint64_t a1, _QWORD ***a2)
{
  _QWORD ***v4;
  char v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  _QWORD ***v9;
  _QWORD ***v10;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD ***v16;
  int32x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD ***v23;
  int v24;
  int v25;
  _QWORD *result;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  int32x2_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t *v40;
  _QWORD ***v41;
  uint64_t v42;
  _QWORD *v43;

  v39 = 2;
  v40 = 0;
  v41 = a2;
  v4 = a2;
  if (a2 != (_QWORD ***)-8192)
  {
    v4 = a2;
    if (a2 != (_QWORD ***)-4096)
    {
      v4 = a2;
      if (a2)
      {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v39);
        v4 = v41;
      }
    }
  }
  v42 = a1;
  v43 = 0;
  v5 = sub_1C4D98988(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 40), (uint64_t)v4, &v43);
  v6 = v43;
  if ((v5 & 1) != 0)
    goto LABEL_20;
  v7 = *(_DWORD *)(a1 + 32);
  v8 = *(_DWORD *)(a1 + 40);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_50;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 36) <= v8 >> 3)
  {
LABEL_50:
    sub_1C4D98A20(a1 + 24, v8);
    v43 = 0;
    sub_1C4D98988(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 40), (uint64_t)v41, &v43);
    v6 = v43;
  }
  ++*(_DWORD *)(a1 + 32);
  v9 = (_QWORD ***)v6[3];
  if (v9 != (_QWORD ***)-4096)
    --*(_DWORD *)(a1 + 36);
  v10 = v41;
  if (v9 != v41)
  {
    if (v9 != (_QWORD ***)-4096 && v9 && v9 != (_QWORD ***)-8192)
    {
      v27 = v6[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v27 = v6[2];
      v28 = (unint64_t *)v6[2];
      if (v28)
      {
        *v28 = *v28 & 7 | v27;
      }
      else
      {
        v29 = v6[3];
        v30 = ***(int32x2_t ****)v29;
        v31 = (unint64_t)v30[303];
        if (v31 <= v27)
        {
          v32 = v30[305].u32[0];
          if (v31 + 16 * v32 > v27)
          {
            v33 = v32 - 1;
            LODWORD(v34) = v33 & ((v29 >> 4) ^ (v29 >> 9));
            v35 = (uint64_t *)(v31 + 16 * v34);
            v36 = *v35;
            if (v29 == *v35)
            {
LABEL_47:
              *v35 = -8192;
              v30[304] = vadd_s32(v30[304], (int32x2_t)0x1FFFFFFFFLL);
              v29 = v6[3];
            }
            else
            {
              v37 = 1;
              while (v36 != -4096)
              {
                v38 = v34 + v37++;
                v34 = v38 & v33;
                v36 = *(_QWORD *)(v31 + 16 * v34);
                if (v29 == v36)
                {
                  v35 = (uint64_t *)(v31 + 16 * v34);
                  goto LABEL_47;
                }
              }
            }
            *(_BYTE *)(v29 + 17) &= ~1u;
          }
        }
      }
      v10 = v41;
    }
    v6[3] = v10;
    if (v10 != (_QWORD ***)-4096 && v10 != (_QWORD ***)-8192 && v10 != 0)
    {
      v12 = v39;
      v13 = (_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF8);
      v6[2] = *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF8);
      *v13 = v6 + 1;
      v6[1] = v12 & 0xFFFFFFFFFFFFFFF8 | v6[1] & 7;
      v14 = (unint64_t *)v6[2];
      if (v14)
        *v14 = *v14 & 7 | (unint64_t)(v6 + 2);
    }
  }
  v6[4] = v42;
  v6[5] = 0;
LABEL_20:
  if (v41 != (_QWORD ***)-8192 && v41 != (_QWORD ***)-4096 && v41)
  {
    v15 = v39 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v39 & 0xFFFFFFFFFFFFFFF8) = v40;
    if (v40)
    {
      *v40 = *v40 & 7 | v15;
    }
    else
    {
      v16 = v41;
      v17 = (int32x2_t *)***v41;
      v18 = (unint64_t)v17[303];
      if (v18 <= v15)
      {
        v19 = v17[305].u32[0];
        if (v18 + 16 * v19 > v15)
        {
          v20 = v19 - 1;
          LODWORD(v21) = v20 & ((v41 >> 4) ^ (v41 >> 9));
          v22 = (_QWORD *)(v18 + 16 * v21);
          v23 = (_QWORD ***)*v22;
          if (v41 == (_QWORD ***)*v22)
          {
LABEL_31:
            *v22 = -8192;
            v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
            v16 = v41;
          }
          else
          {
            v24 = 1;
            while (v23 != (_QWORD ***)-4096)
            {
              v25 = v21 + v24++;
              v21 = v25 & v20;
              v23 = *(_QWORD ****)(v18 + 16 * v21);
              if (v41 == v23)
              {
                v22 = (_QWORD *)(v18 + 16 * v21);
                goto LABEL_31;
              }
            }
          }
          *((_BYTE *)v16 + 17) &= ~1u;
        }
      }
    }
  }
  result = (_QWORD *)v6[5];
  if (!result)
  {
    result = (_QWORD *)operator new();
    *result = a2;
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    result[4] = -3;
    result[5] = -4096;
    result[7] = 0;
    result[8] = 0;
    result[6] = 0;
    v6[5] = result;
  }
  return result;
}

uint64_t sub_1C4D97660(uint64_t a1, llvm::AliasSetTracker *a2)
{
  uint64_t v3;
  uint64_t v6;
  int v7;

  v3 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v3 + 32))
  {
    v6 = sub_1C4D976DC(*(_QWORD *)(a1 + 24), a2);
    *(_QWORD *)(a1 + 24) = v6;
    *(_DWORD *)(v6 + 64) = *(_DWORD *)(v6 + 64) & 0xF8000000 | (*(_DWORD *)(v6 + 64) + 1) & 0x7FFFFFF;
    v7 = *(_DWORD *)(v3 + 64);
    *(_DWORD *)(v3 + 64) = v7 & 0xF8000000 | (v7 - 1) & 0x7FFFFFF;
    if (((v7 - 1) & 0x7FFFFFF) == 0)
      llvm::AliasSetTracker::removeAliasSet(a2, (llvm::AliasSet *)v3);
  }
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_1C4D976DC(uint64_t result, llvm::AliasSetTracker *a2)
{
  uint64_t v2;
  llvm::AliasSet *v4;
  int v5;
  uint64_t v6;

  v2 = result;
  if (*(_QWORD *)(result + 32))
  {
    result = sub_1C4D976DC();
    if (result != *(_QWORD *)(v2 + 32))
    {
      v6 = result;
      *(_DWORD *)(result + 64) = *(_DWORD *)(result + 64) & 0xF8000000 | (*(_DWORD *)(result + 64) + 1) & 0x7FFFFFF;
      v4 = *(llvm::AliasSet **)(v2 + 32);
      v5 = *((_DWORD *)v4 + 16);
      *((_DWORD *)v4 + 16) = v5 & 0xF8000000 | (v5 - 1) & 0x7FFFFFF;
      if (((v5 - 1) & 0x7FFFFFF) == 0)
        llvm::AliasSetTracker::removeAliasSet(a2, v4);
      result = v6;
      *(_QWORD *)(v2 + 32) = v6;
    }
  }
  return result;
}

uint64_t llvm::AliasSetTracker::add(uint64_t a1, _QWORD ***a2, _QWORD ***a3, __int128 *a4)
{
  __int128 v4;
  _QWORD ***v6[2];
  __int128 v7;
  __int128 v8;

  v6[0] = a2;
  v6[1] = a3;
  v4 = a4[1];
  v7 = *a4;
  v8 = v4;
  return llvm::AliasSetTracker::addPointer(a1, v6, 0);
}

uint64_t llvm::AliasSetTracker::addPointer(uint64_t a1, _QWORD ****a2, char a3)
{
  uint64_t result;

  result = llvm::AliasSetTracker::getAliasSetFor((uint64_t *)a1, a2);
  *(_DWORD *)(result + 64) |= (a3 & 3) << 28;
  if (!*(_QWORD *)(a1 + 56) && *(_DWORD *)(a1 + 48) > dword_1ED82C6B0)
    return llvm::AliasSetTracker::mergeAllAliasSets((llvm::AliasSetTracker *)a1);
  return result;
}

uint64_t llvm::AliasSetTracker::add(llvm::AliasSetTracker *this, llvm::LoadInst *a2)
{
  _QWORD ***v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  _QWORD ***v9[2];
  _QWORD v10[4];

  if ((((unint64_t)*((unsigned __int16 *)a2 + 9) >> 7) & 7) - 3 <= 4)
    return llvm::AliasSetTracker::addUnknown(this, a2);
  v5 = (_QWORD ***)*((_QWORD *)a2 - 4);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40) + 272, *(_QWORD *)a2);
  if (v7 == 1)
    v8 = -2;
  else
    v8 = (unint64_t)(v6 + 7) >> 3;
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, v10);
  v9[0] = v5;
  v9[1] = (_QWORD ***)v8;
  return llvm::AliasSetTracker::addPointer((uint64_t)this, v9, 1);
}

uint64_t llvm::AliasSetTracker::addUnknown(llvm::AliasSetTracker *this, llvm::Instruction *a2)
{
  uint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AliasSetForUnknownInst;
  llvm::AAResults *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  __int32 v24;

  result = sub_1C4D99D08((uint64_t)a2);
  if ((result & 1) != 0)
    return result;
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 <= 0x3B)
  {
    if (v5 == 37)
      goto LABEL_17;
    if (v5 == 33 || v5 == 39)
      goto LABEL_9;
    goto LABEL_25;
  }
  if (v5 - 60 > 0x1C)
    goto LABEL_25;
  if (v5 == 84)
  {
    v6 = *((_QWORD *)a2 - 4);
    if (v6 && !*(_BYTE *)(v6 + 16) && *(_QWORD *)(v6 + 24) == *((_QWORD *)a2 + 9) && (*(_BYTE *)(v6 + 33) & 0x20) != 0)
    {
      v15 = *(_DWORD *)(v6 + 36);
      if (v15 > 243)
      {
        if (v15 == 244 || v15 == 272)
          return result;
      }
      else if (v15 == 7 || v15 == 126)
      {
        return result;
      }
    }
LABEL_9:
    v7 = *((_QWORD *)a2 + 8);
    if (v7 && ((*(_BYTE *)(v7 + 20) & 4) != 0 || (*(_BYTE *)(v7 + 17) & 0x10) != 0))
      goto LABEL_15;
    v24 = 7;
    if (!sub_1C53E4BBC((uint64_t)a2, &v24, 1uLL)
      || (v16 = *((_QWORD *)a2 - 4)) != 0
      && !*(_BYTE *)(v16 + 16)
      && *(_QWORD *)(v16 + 24) == *((_QWORD *)a2 + 9)
      && *(_DWORD *)(v16 + 36) == 7)
    {
      result = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 66);
      if ((result & 1) != 0)
        goto LABEL_15;
      result = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44);
      if ((_DWORD)result)
        goto LABEL_15;
    }
    goto LABEL_17;
  }
  if (((1 << (v5 - 60)) & 0x10100039) != 0)
    goto LABEL_17;
  if (v5 != 61)
  {
LABEL_25:
    v12 = v5 - 33;
    if (v12 > 0x37)
      return result;
    if (((1 << v12) & 0x8000000000041) != 0)
    {
      v13 = *((_QWORD *)a2 + 8);
      if (v13 && (*(_BYTE *)(v13 + 17) & 0x30) != 0)
        return result;
      v14 = *((_DWORD *)a2 + 5);
      if (v14 < 0
        && (v17 = (char *)a2 - 32 * (v14 & 0x7FFFFFF), v20 = *((_QWORD *)v17 - 1), v18 = v17 - 8, (v19 = v20) != 0))
      {
        v21 = -v19;
        while (1)
        {
          v22 = *(_DWORD *)(*(_QWORD *)&v18[v21] + 8);
          if (v22 >= 2 && v22 != 7)
            break;
          v21 += 16;
          if (!v21)
            goto LABEL_33;
        }
      }
      else
      {
LABEL_33:
        result = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 45);
        if ((result & 1) != 0)
          return result;
        result = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44);
        if ((result & 1) != 0)
          return result;
      }
    }
    else if (v12 == 27)
    {
      if ((*((_WORD *)a2 + 9) & 0x301) == 0)
        return result;
    }
    else if (((1 << v12) & 0x808001D0000010) == 0)
    {
      return result;
    }
    goto LABEL_17;
  }
  if ((*((_WORD *)a2 + 9) & 0x301) == 0)
  {
LABEL_15:
    v5 = *((unsigned __int8 *)a2 + 16);
    goto LABEL_25;
  }
LABEL_17:
  AliasSetForUnknownInst = (uint64_t)llvm::AliasSetTracker::findAliasSetForUnknownInst(this, a2);
  if (!AliasSetForUnknownInst)
  {
    AliasSetForUnknownInst = operator new();
    *(_QWORD *)(AliasSetForUnknownInst + 16) = 0;
    *(_QWORD *)(AliasSetForUnknownInst + 24) = AliasSetForUnknownInst + 16;
    *(_OWORD *)(AliasSetForUnknownInst + 32) = 0u;
    *(_OWORD *)(AliasSetForUnknownInst + 48) = 0u;
    *(_DWORD *)(AliasSetForUnknownInst + 64) &= 0x80000000;
    *(_DWORD *)(AliasSetForUnknownInst + 68) = 0;
    v11 = *((_QWORD *)this + 1);
    v10 = (uint64_t *)((char *)this + 8);
    *(_QWORD *)AliasSetForUnknownInst = v11;
    *(_QWORD *)(AliasSetForUnknownInst + 8) = v10;
    *(_QWORD *)(v11 + 8) = AliasSetForUnknownInst;
    *v10 = AliasSetForUnknownInst;
  }
  return llvm::AliasSet::addUnknownInst((llvm::AliasSet *)AliasSetForUnknownInst, a2, v9);
}

uint64_t llvm::AliasSetTracker::add(llvm::AliasSetTracker *this, llvm::StoreInst *a2)
{
  _QWORD ***v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  _QWORD ***v9[2];
  _QWORD v10[4];

  if ((((unint64_t)*((unsigned __int16 *)a2 + 9) >> 7) & 7) - 3 <= 4)
    return llvm::AliasSetTracker::addUnknown(this, a2);
  v5 = (_QWORD ***)*((_QWORD *)a2 - 4);
  sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 56) + 40) + 272, **((_QWORD **)a2 - 8));
  if (v7 == 1)
    v8 = -2;
  else
    v8 = (unint64_t)(v6 + 7) >> 3;
  llvm::Instruction::getAAMetadata((uint64_t ***)a2, v10);
  v9[0] = v5;
  v9[1] = (_QWORD ***)v8;
  return llvm::AliasSetTracker::addPointer((uint64_t)this, v9, 2);
}

uint64_t llvm::AliasSetTracker::add(uint64_t a1, uint64_t ***a2)
{
  _QWORD ***v3;
  _QWORD ***v5[2];
  _QWORD v6[4];

  v3 = (_QWORD ***)*(a2 - 4);
  llvm::Instruction::getAAMetadata(a2, v6);
  v5[0] = v3;
  v5[1] = (_QWORD ***)-2;
  return llvm::AliasSetTracker::addPointer(a1, v5, 3);
}

uint64_t llvm::AliasSetTracker::add(uint64_t a1, uint64_t a2)
{
  _QWORD ***v4[6];

  llvm::MemoryLocation::getForArgument(a2, 0, 0, (uint64_t)v4);
  return llvm::AliasSetTracker::addPointer(a1, v4, 2);
}

{
  _QWORD ***v5[6];
  _QWORD ***v6[6];

  llvm::MemoryLocation::getForArgument(a2, 0, 0, (uint64_t)v6);
  llvm::AliasSetTracker::addPointer(a1, v6, 2);
  llvm::MemoryLocation::getForArgument(a2, 1u, 0, (uint64_t)v5);
  return llvm::AliasSetTracker::addPointer(a1, v5, 1);
}

void llvm::AliasSetTracker::add(llvm::AliasSetTracker *this, llvm::Instruction *a2)
{
  int v4;
  uint64_t v5;
  llvm::AliasSetTracker *v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[3];
  __int128 v31;
  _OWORD v32[2];

  v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 60)
  {
    llvm::AliasSetTracker::add(this, a2);
    return;
  }
  if (a2 && v4 == 61)
  {
    llvm::AliasSetTracker::add(this, a2);
    return;
  }
  if (a2 && v4 == 88)
  {
    v5 = *((_QWORD *)a2 - 4);
    llvm::Instruction::getAAMetadata((uint64_t ***)a2, v32);
    *(_QWORD *)&v31 = v5;
    *((_QWORD *)&v31 + 1) = -2;
    v6 = this;
    v7 = 3;
LABEL_12:
    llvm::AliasSetTracker::addPointer((uint64_t)v6, (_QWORD ****)&v31, v7);
    return;
  }
  if (sub_1C4D99D58((uint64_t)a2))
  {
    llvm::MemoryLocation::getForArgument((uint64_t)a2, 0, 0, (uint64_t)&v31);
    v6 = this;
    v7 = 2;
    goto LABEL_12;
  }
  if (sub_1C4D99DA8((uint64_t)a2))
  {
    llvm::AliasSetTracker::add((uint64_t)this, (uint64_t)a2);
  }
  else
  {
    v8 = *((unsigned __int8 *)a2 + 16) - 33;
    if (v8 <= 0x33
      && ((1 << v8) & 0x8000000000041) != 0
      && ((v9 = *((_QWORD *)a2 + 8)) != 0 && (*(_BYTE *)(v9 + 12) & 8) != 0
       || ((LODWORD(v31) = 7, !sub_1C53E4BBC((uint64_t)a2, (__int32 *)&v31, 1uLL))
        || (v28 = *((_QWORD *)a2 - 4)) != 0
        && !*(_BYTE *)(v28 + 16)
        && *(_QWORD *)(v28 + 24) == *((_QWORD *)a2 + 9)
        && *(_DWORD *)(v28 + 36) == 7)
       && llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 3)))
    {
      v10 = *(_QWORD **)(*(_QWORD *)this + 8);
      v11 = *(_QWORD **)(*(_QWORD *)this + 16);
      v12 = 63;
      while (v10 != v11)
      {
        v12 &= (*(uint64_t (**)(_QWORD, llvm::Instruction *))(*(_QWORD *)*v10 + 48))(*v10, a2);
        if (v12 == 4)
          break;
        ++v10;
      }
      v13 = v12 & 7;
      v14 = *((unsigned __int8 *)a2 + 16);
      if (*((_QWORD *)a2 + 1) || v14 != 84)
      {
        v17 = *((_DWORD *)a2 + 5);
        if (v14 == 84)
        {
          v16 = 0;
        }
        else if (v14 == 39)
        {
          v16 = (*((_DWORD *)a2 + 20) + 1);
        }
        else
        {
          v16 = 2;
        }
      }
      else
      {
        v15 = *((_QWORD *)a2 - 4);
        if (v15
          && !*(_BYTE *)(v15 + 16)
          && *(_QWORD *)(v15 + 24) == *((_QWORD *)a2 + 9)
          && *(_DWORD *)(v15 + 36) == 164)
        {
          v13 = v12 & 5;
        }
        v16 = 0;
        v17 = *((_DWORD *)a2 + 5);
      }
      v18 = (char *)a2 - 32 * (v17 & 0x7FFFFFF);
      if (v17 < 0 && (v29 = *((_QWORD *)v18 - 1), (v29 & 0xFFFFFFFF0) != 0))
        v19 = (*((_DWORD *)v18 - 3) - *(_DWORD *)&v18[-v29]);
      else
        v19 = 0;
      v20 = (char *)a2 + -32 * v19 + -32 * v16 - 32;
      if (v18 != v20)
      {
        v21 = 0;
        do
        {
          if (*(_BYTE *)(**(_QWORD **)v18 + 8) == 15)
          {
            v22.n128_f64[0] = llvm::MemoryLocation::getForArgument((uint64_t)a2, v21, 0, (uint64_t)&v31);
            v23 = *(_QWORD **)(*(_QWORD *)this + 8);
            v24 = *(_QWORD **)(*(_QWORD *)this + 16);
            v25 = 7;
            while (v23 != v24)
            {
              v25 &= (*(uint64_t (**)(_QWORD, llvm::Instruction *, uint64_t, __n128))(*(_QWORD *)*v23 + 40))(*v23, a2, v21, v22);
              if ((v25 & 3) == 0)
              {
                LOBYTE(v25) = 4;
                break;
              }
              ++v23;
            }
            if ((v25 & v13 & 3) != 0)
            {
              v30[0] = v31;
              v30[1] = v32[0];
              v30[2] = v32[1];
              if ((v25 & v13 & 2) != 0)
                v26 = 2;
              else
                v26 = v25 & v13 & 1;
              if ((v25 & v13 & 3) == 3)
                v27 = 3;
              else
                v27 = v26;
              llvm::AliasSetTracker::addPointer((uint64_t)this, (_QWORD ****)v30, v27);
            }
          }
          v18 += 32;
          v21 = (v21 + 1);
        }
        while (v18 != v20);
      }
    }
    else
    {
      llvm::AliasSetTracker::addUnknown(this, a2);
    }
  }
}

void llvm::AliasSetTracker::add(llvm::AliasSetTracker *this, const llvm::AliasSetTracker *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Instruction *v8;
  _QWORD *i;
  _QWORD ***v10;
  _QWORD ***v11;
  __int128 v12[2];
  _QWORD ***v13[2];
  __int128 v14;
  __int128 v15;

  v2 = (char *)a2 + 8;
  v3 = *((_QWORD *)a2 + 2);
  if ((const llvm::AliasSetTracker *)v3 != (const llvm::AliasSetTracker *)((char *)a2 + 8))
  {
    do
    {
      if (!*(_QWORD *)(v3 + 32))
      {
        v5 = -1431655765 * ((*(_QWORD *)(v3 + 48) - *(_QWORD *)(v3 + 40)) >> 3);
        if ((_DWORD)v5)
        {
          v6 = 0;
          v7 = 24 * v5;
          do
          {
            v8 = *(llvm::Instruction **)(*(_QWORD *)(v3 + 40) + v6 + 16);
            if (v8)
              llvm::AliasSetTracker::add(this, v8);
            v6 += 24;
          }
          while (v7 != v6);
        }
        for (i = *(_QWORD **)(v3 + 16); i; i = (_QWORD *)i[2])
        {
          v10 = (_QWORD ***)*i;
          v11 = (_QWORD ***)i[4];
          sub_1C4D965B4((uint64_t)i, v12);
          v13[0] = v10;
          v13[1] = v11;
          v14 = v12[0];
          v15 = v12[1];
          llvm::AliasSetTracker::addPointer((uint64_t)this, v13, (*(_DWORD *)(v3 + 64) >> 28) & 3);
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while ((char *)v3 != v2);
  }
}

void sub_1C4D98200(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v2 = *(_BYTE **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    v5 = *(_BYTE **)(a1 + 8);
    v6 = (char *)operator new(8 * a2);
    v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF8];
    v8 = v7;
    if (v5 != v2)
    {
      v8 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v9 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v5 != v2);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[8 * a2];
    if (v2)
      operator delete(v2);
  }
}

llvm::AliasSetTracker::ASTCallbackVH *llvm::AliasSetTracker::ASTCallbackVH::ASTCallbackVH(llvm::AliasSetTracker::ASTCallbackVH *this, llvm::Value *a2, llvm::AliasSetTracker *a3)
{
  llvm::ValueHandleBase *v5;

  *((_QWORD *)this + 1) = 2;
  *((_QWORD *)this + 2) = 0;
  v5 = (llvm::AliasSetTracker::ASTCallbackVH *)((char *)this + 8);
  *((_QWORD *)v5 + 2) = a2;
  if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2)
    llvm::ValueHandleBase::AddToUseList(v5);
  *(_QWORD *)this = off_1E81345C0;
  *((_QWORD *)this + 4) = a3;
  return this;
}

_QWORD *llvm::AliasSetTracker::ASTCallbackVH::ASTCallbackVH(_QWORD *this, llvm::Value *a2, llvm::AliasSetTracker *a3)
{
  llvm::AliasSetTracker *v3;
  _QWORD *v4;

  this[1] = 2;
  this[2] = 0;
  this[3] = a2;
  if (a2 != (llvm::Value *)-4096 && a2 != (llvm::Value *)-8192 && a2)
  {
    v3 = a3;
    v4 = this;
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(this + 1));
    a3 = v3;
    this = v4;
  }
  *this = off_1E81345C0;
  this[4] = a3;
  return this;
}

_QWORD *llvm::AliasSetTracker::ASTCallbackVH::operator=(_QWORD *a1, int32x2_t ****a2)
{
  uint64_t v3;
  int32x2_t ****v4;
  BOOL v5;
  uint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v12;
  int32x2_t ****v13;
  int32x2_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int32x2_t *****v19;
  int32x2_t ****v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  int32x2_t *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t *v36;
  int32x2_t ****v37;
  uint64_t v38;

  v3 = a1[4];
  v35 = 2;
  v36 = 0;
  v37 = a2;
  if (a2 != (int32x2_t ****)-8192 && a2 != (int32x2_t ****)-4096 && a2)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v35);
    a2 = v37;
  }
  v38 = v3;
  v4 = (int32x2_t ****)a1[3];
  if (v4 != a2)
  {
    v5 = v4 == (int32x2_t ****)-4096 || v4 == 0;
    if (!v5 && v4 != (int32x2_t ****)-8192)
    {
      v23 = a1[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v23 = a1[2];
      v24 = (unint64_t *)a1[2];
      if (v24)
      {
        *v24 = *v24 & 7 | v23;
      }
      else
      {
        v25 = a1[3];
        v26 = ***(int32x2_t ****)v25;
        v27 = (unint64_t)v26[303];
        if (v27 <= v23)
        {
          v28 = v26[305].u32[0];
          if (v27 + 16 * v28 > v23)
          {
            v29 = v28 - 1;
            LODWORD(v30) = v29 & ((v25 >> 4) ^ (v25 >> 9));
            v31 = (uint64_t *)(v27 + 16 * v30);
            v32 = *v31;
            if (v25 == *v31)
            {
LABEL_45:
              *v31 = -8192;
              v26[304] = vadd_s32(v26[304], (int32x2_t)0x1FFFFFFFFLL);
              v25 = a1[3];
            }
            else
            {
              v33 = 1;
              while (v32 != -4096)
              {
                v34 = v30 + v33++;
                v30 = v34 & v29;
                v32 = *(_QWORD *)(v27 + 16 * v30);
                if (v25 == v32)
                {
                  v31 = (uint64_t *)(v27 + 16 * v30);
                  goto LABEL_45;
                }
              }
            }
            *(_BYTE *)(v25 + 17) &= ~1u;
          }
        }
      }
      a2 = v37;
    }
    a1[3] = a2;
    if (a2 != (int32x2_t ****)-4096 && a2 != (int32x2_t ****)-8192 && a2 != 0)
    {
      v7 = v35;
      v8 = (_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF8);
      a1[2] = *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF8);
      *v8 = a1 + 1;
      a1[1] = v7 & 0xFFFFFFFFFFFFFFF8 | a1[1] & 7;
      v9 = (unint64_t *)a1[2];
      if (v9)
        *v9 = *v9 & 7 | (unint64_t)(a1 + 2);
      a2 = v37;
    }
  }
  a1[4] = v38;
  if (a2 != (int32x2_t ****)-8192 && a2 != (int32x2_t ****)-4096 && a2 != 0)
  {
    v12 = v35 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v35 & 0xFFFFFFFFFFFFFFF8) = v36;
    if (v36)
    {
      *v36 = *v36 & 7 | v12;
    }
    else
    {
      v13 = v37;
      v14 = ***v37;
      v15 = (unint64_t)v14[303];
      if (v15 <= v12)
      {
        v16 = v14[305].u32[0];
        if (v15 + 16 * v16 > v12)
        {
          v17 = v16 - 1;
          LODWORD(v18) = v17 & ((v37 >> 4) ^ (v37 >> 9));
          v19 = (int32x2_t *****)(v15 + 16 * v18);
          v20 = *v19;
          if (v37 == *v19)
          {
LABEL_34:
            *v19 = (int32x2_t ****)-8192;
            v14[304] = vadd_s32(v14[304], (int32x2_t)0x1FFFFFFFFLL);
            v13 = v37;
          }
          else
          {
            v21 = 1;
            while (v20 != (int32x2_t ****)-4096)
            {
              v22 = v18 + v21++;
              v18 = v22 & v17;
              v20 = *(int32x2_t *****)(v15 + 16 * v18);
              if (v37 == v20)
              {
                v19 = (int32x2_t *****)(v15 + 16 * v18);
                goto LABEL_34;
              }
            }
          }
          *((_BYTE *)v13 + 17) &= ~1u;
        }
      }
    }
  }
  return a1;
}

void llvm::initializeAliasSetPrinterPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82C6F0);
  if (v1 != -1)
  {
    v4[0] = sub_1C4D98648;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82C6F0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4D98648(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Alias Set Printer";
  *(_QWORD *)(v3 + 8) = 17;
  *(_QWORD *)(v3 + 16) = "print-alias-sets";
  *(_QWORD *)(v3 + 24) = 16;
  *(_QWORD *)(v3 + 32) = &unk_1EF8EFBB9;
  *(_WORD *)(v3 + 40) = 256;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C4D98F40;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

_QWORD *llvm::AliasSetsPrinterPass::AliasSetsPrinterPass(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t llvm::AliasSetsPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::raw_ostream *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  size_t *v17;
  const void *v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  llvm::Instruction *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD v31[4];
  int v32;
  int v33;
  uint64_t v34;

  v30 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AAManager::Key, a2) + 8;
  v31[0] = v31;
  v34 = 0;
  v33 = 0;
  v32 = 0;
  v31[2] = 0;
  v31[3] = 0;
  v31[1] = v31;
  v7 = *a1;
  v8 = (void *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v8 > 0x18uLL)
  {
    qmemcpy(v8, "Alias sets for function '", 25);
    *((_QWORD *)v7 + 4) += 25;
  }
  else
  {
    llvm::raw_ostream::write(*a1, "Alias sets for function '", 0x19uLL);
  }
  if ((*(_BYTE *)(a2 + 23) & 0x10) == 0)
    goto LABEL_13;
  v9 = ***(_QWORD ***)a2;
  v10 = *(_QWORD *)(v9 + 152);
  v11 = *(unsigned int *)(v9 + 168);
  if (!(_DWORD)v11)
    goto LABEL_10;
  LODWORD(v12) = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v13 = (uint64_t *)(v10 + 16 * v12);
  v14 = *v13;
  if (*v13 != a2)
  {
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(_QWORD *)(v10 + 16 * v12);
      if (v14 == a2)
      {
        v13 = (uint64_t *)(v10 + 16 * v12);
        goto LABEL_11;
      }
    }
LABEL_10:
    v13 = (uint64_t *)(v10 + 16 * v11);
  }
LABEL_11:
  v17 = (size_t *)v13[1];
  v20 = *v17;
  v18 = v17 + 2;
  v19 = v20;
  v21 = (_BYTE *)*((_QWORD *)v7 + 4);
  if (v20 <= *((_QWORD *)v7 + 3) - (_QWORD)v21)
  {
    if (v19)
    {
      memcpy(v21, v18, v19);
      v21 = (_BYTE *)(*((_QWORD *)v7 + 4) + v19);
      *((_QWORD *)v7 + 4) = v21;
    }
    goto LABEL_16;
  }
  llvm::raw_ostream::write(v7, (const char *)v18, v19);
LABEL_13:
  v21 = (_BYTE *)*((_QWORD *)v7 + 4);
LABEL_16:
  if (*((_QWORD *)v7 + 3) - (_QWORD)v21 > 2uLL)
  {
    v21[2] = 10;
    *(_WORD *)v21 = 14887;
    *((_QWORD *)v7 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v7, "':\n", 3uLL);
  }
  v22 = a2 + 72;
  for (i = *(_QWORD *)(a2 + 80); i != v22; i = *(_QWORD *)(i + 8))
  {
    v24 = i - 24;
    if (!i)
      v24 = 0;
    v25 = *(_QWORD *)(v24 + 48);
    if (v25 != v24 + 40)
    {
      while (1)
      {
        if (v25)
          v26 = (llvm::Instruction *)(v25 - 24);
        else
          v26 = 0;
        llvm::AliasSetTracker::add((llvm::AliasSetTracker *)&v30, v26);
        v25 = *(_QWORD *)(v25 + 8);
        v27 = i - 24;
        if (!i)
          v27 = 0;
        if (v25 == v27 + 40)
          break;
LABEL_34:
        if (i == v22)
          goto LABEL_35;
      }
      while (1)
      {
        i = *(_QWORD *)(i + 8);
        if (i == v22)
          goto LABEL_35;
        v28 = i - 24;
        if (!i)
          v28 = 0;
        v25 = *(_QWORD *)(v28 + 48);
        if (v25 != v28 + 40)
          goto LABEL_34;
      }
    }
  }
LABEL_35:
  llvm::AliasSetTracker::print((llvm::AliasSetTracker *)&v30, *a1);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  return sub_1C4D992E4((uint64_t)&v30);
}

uint64_t sub_1C4D98988(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = a1 + 48 * v5;
    v7 = *(_QWORD *)(v6 + 24);
    if (v7 == a3)
    {
      v12 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = a1 + 48 * (v11 & v4);
        v7 = *(_QWORD *)(v6 + 24);
        v12 = 1;
        if (v7 == a3)
          goto LABEL_14;
      }
      v12 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v12 = 0;
  }
LABEL_14:
  *a4 = v6;
  return v12;
}

char *sub_1C4D98A20(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  int32x2_t *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  int32x2_t *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 48 * v10;
      v12 = result + 16;
      do
      {
        *v12 = 0;
        v12[1] = -4096;
        *(v12 - 2) = off_1E81345C0;
        *(v12 - 1) = 2;
        v12[2] = 0;
        v12 += 6;
        v11 -= 48;
      }
      while (v11);
    }
    if (v3)
    {
      v13 = (_QWORD *)(v4 + 48 * v3);
      v14 = (_QWORD *)v4;
      do
      {
        v15 = v14[3];
        if ((v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v51 = 0;
          sub_1C4D98988(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v51);
          v16 = v51;
          v17 = v51[3];
          v18 = v14[3];
          if (v17 != v18)
          {
            v19 = v17 == -4096 || v17 == 0;
            if (!v19 && v17 != -8192)
            {
              v36 = v51[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v36 = v51[2];
              v37 = (unint64_t *)v16[2];
              if (v37)
              {
                *v37 = *v37 & 7 | v36;
              }
              else
              {
                v38 = v16[3];
                v39 = ***(int32x2_t ****)v38;
                v40 = (unint64_t)v39[303];
                if (v40 <= v36)
                {
                  v41 = v39[305].u32[0];
                  if (v40 + 16 * v41 > v36)
                  {
                    v42 = v41 - 1;
                    LODWORD(v43) = v42 & ((v38 >> 4) ^ (v38 >> 9));
                    v44 = (uint64_t *)(v40 + 16 * v43);
                    v45 = *v44;
                    if (v38 != *v44)
                    {
                      v46 = 1;
                      do
                      {
                        if (v45 == -4096)
                          goto LABEL_54;
                        v47 = v43 + v46++;
                        v43 = v47 & v42;
                        v45 = *(_QWORD *)(v40 + 16 * v43);
                      }
                      while (v38 != v45);
                      v44 = (uint64_t *)(v40 + 16 * v43);
                    }
                    *v44 = -8192;
                    v39[304] = vadd_s32(v39[304], (int32x2_t)0x1FFFFFFFFLL);
                    v38 = v16[3];
LABEL_54:
                    *(_BYTE *)(v38 + 17) &= ~1u;
                  }
                }
              }
              v18 = v14[3];
            }
            v16[3] = v18;
            if (v18 != -4096 && v18 != -8192 && v18 != 0)
            {
              v21 = v14[1];
              v16[2] = *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)(v21 & 0xFFFFFFFFFFFFFFF8) = v16 + 1;
              v16[1] = v21 & 0xFFFFFFFFFFFFFFF8 | v16[1] & 7;
              v22 = (unint64_t *)v16[2];
              if (v22)
                *v22 = *v22 & 7 | (unint64_t)(v16 + 2);
            }
          }
          v16[4] = v14[4];
          v16[5] = v14[5];
          ++*(_DWORD *)(a1 + 8);
          v15 = v14[3];
        }
        if (v15 != -8192 && v15 != -4096 && v15 != 0)
        {
          v24 = v14[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v24 = v14[2];
          v25 = (unint64_t *)v14[2];
          if (v25)
          {
            *v25 = *v25 & 7 | v24;
          }
          else
          {
            v26 = v14[3];
            v27 = ***(int32x2_t ****)v26;
            v28 = (unint64_t)v27[303];
            if (v28 <= v24)
            {
              v29 = v27[305].u32[0];
              if (v28 + 16 * v29 > v24)
              {
                v30 = v29 - 1;
                LODWORD(v31) = v30 & ((v26 >> 4) ^ (v26 >> 9));
                v32 = (uint64_t *)(v28 + 16 * v31);
                v33 = *v32;
                if (v26 != *v32)
                {
                  v34 = 1;
                  do
                  {
                    if (v33 == -4096)
                      goto LABEL_42;
                    v35 = v31 + v34++;
                    v31 = v35 & v30;
                    v33 = *(_QWORD *)(v28 + 16 * v31);
                  }
                  while (v26 != v33);
                  v32 = (uint64_t *)(v28 + 16 * v31);
                }
                *v32 = -8192;
                v27[304] = vadd_s32(v27[304], (int32x2_t)0x1FFFFFFFFLL);
                v26 = v14[3];
LABEL_42:
                *(_BYTE *)(v26 + 17) &= ~1u;
              }
            }
          }
        }
        v14 += 6;
      }
      while (v14 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v48 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v48)
  {
    v49 = 48 * v48;
    v50 = result + 16;
    do
    {
      *v50 = 0;
      v50[1] = -4096;
      *(v50 - 2) = off_1E81345C0;
      *(v50 - 1) = 2;
      v50[2] = 0;
      v50 += 6;
      v49 -= 48;
    }
    while (v49);
  }
  return result;
}

unint64_t sub_1C4D98DE0(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int32x2_t *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;

  v2 = a1[2];
  v3 = a2[2];
  if (v2 == v3)
    return a1[2];
  v4 = v2 == -4096 || v2 == 0;
  if (!v4 && v2 != -8192)
  {
    v10 = *a1 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = a1[1];
    v11 = (unint64_t *)a1[1];
    if (v11)
    {
      *v11 = *v11 & 7 | v10;
    }
    else
    {
      v12 = a1[2];
      v13 = ***(int32x2_t ****)v12;
      v14 = (unint64_t)v13[303];
      if (v14 <= v10)
      {
        v15 = v13[305].u32[0];
        if (v14 + 16 * v15 > v10)
        {
          v16 = v15 - 1;
          LODWORD(v17) = v16 & ((v12 >> 4) ^ (v12 >> 9));
          v18 = (uint64_t *)(v14 + 16 * v17);
          v19 = *v18;
          if (v12 == *v18)
          {
LABEL_25:
            *v18 = -8192;
            v13[304] = vadd_s32(v13[304], (int32x2_t)0x1FFFFFFFFLL);
            v12 = a1[2];
          }
          else
          {
            v20 = 1;
            while (v19 != -4096)
            {
              v21 = v17 + v20++;
              v17 = v21 & v16;
              v19 = *(_QWORD *)(v14 + 16 * v17);
              if (v12 == v19)
              {
                v18 = (uint64_t *)(v14 + 16 * v17);
                goto LABEL_25;
              }
            }
          }
          *(_BYTE *)(v12 + 17) &= ~1u;
        }
      }
    }
    v3 = a2[2];
  }
  a1[2] = v3;
  if (v3 != -4096 && v3 != -8192 && v3 != 0)
  {
    v6 = *a2;
    v7 = (unint64_t *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    a1[1] = *v7;
    *v7 = (unint64_t)a1;
    *a1 = v6 & 0xFFFFFFFFFFFFFFF8 | *a1 & 7;
    v8 = (unint64_t *)a1[1];
    if (v8)
      *v8 = *v8 & 7 | (unint64_t)(a1 + 1);
    return a1[2];
  }
  return v3;
}

uint64_t sub_1C4D98F40()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8EFBB9;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E81345E8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED82C6F0);
  if (v2 != -1)
  {
    v6[0] = sub_1C4D98648;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED82C6F0, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C4D99024(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4D99048(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
}

uint64_t sub_1C4D99060(uint64_t a1, uint64_t ***a2)
{
  void **v3;
  void *v4;
  llvm *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  size_t *v17;
  const void *v18;
  size_t v19;
  size_t v20;
  llvm::raw_ostream *v21;
  uint64_t ***v22;
  uint64_t **i;
  uint64_t **v24;
  uint64_t *v25;
  llvm::Instruction *v26;
  uint64_t **v27;
  uint64_t **v28;
  llvm::raw_ostream *v29;
  uint64_t v31;
  _QWORD v32[4];
  int v33;
  int v34;
  uint64_t v35;

  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::AAResultsWrapperPass::ID);
  v5 = (llvm *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::AAResultsWrapperPass::ID);
  v31 = *((_QWORD *)v5 + 4);
  v32[0] = v32;
  v35 = 0;
  v32[1] = v32;
  v32[2] = 0;
  v32[3] = 0;
  v34 = 0;
  v33 = 0;
  v6 = (llvm::raw_ostream *)llvm::errs(v5);
  v7 = v6;
  v8 = (void *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v8 > 0x18uLL)
  {
    qmemcpy(v8, "Alias sets for function '", 25);
    *((_QWORD *)v6 + 4) += 25;
  }
  else
  {
    llvm::raw_ostream::write(v6, "Alias sets for function '", 0x19uLL);
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    goto LABEL_15;
  v9 = ***a2;
  v10 = *(_QWORD *)(v9 + 152);
  v11 = *(unsigned int *)(v9 + 168);
  if (!(_DWORD)v11)
    goto LABEL_12;
  LODWORD(v12) = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v13 = (uint64_t ****)(v10 + 16 * v12);
  v14 = *v13;
  if (*v13 != a2)
  {
    v15 = 1;
    while (v14 != (uint64_t ***)-4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(uint64_t ****)(v10 + 16 * v12);
      if (v14 == a2)
      {
        v13 = (uint64_t ****)(v10 + 16 * v12);
        goto LABEL_13;
      }
    }
LABEL_12:
    v13 = (uint64_t ****)(v10 + 16 * v11);
  }
LABEL_13:
  v17 = (size_t *)v13[1];
  v20 = *v17;
  v18 = v17 + 2;
  v19 = v20;
  v21 = (llvm::raw_ostream *)*((_QWORD *)v7 + 4);
  if (v20 <= *((_QWORD *)v7 + 3) - (_QWORD)v21)
  {
    if (v19)
    {
      memcpy(v21, v18, v19);
      v21 = (llvm::raw_ostream *)(*((_QWORD *)v7 + 4) + v19);
      *((_QWORD *)v7 + 4) = v21;
    }
    goto LABEL_18;
  }
  llvm::raw_ostream::write(v7, (const char *)v18, v19);
LABEL_15:
  v21 = (llvm::raw_ostream *)*((_QWORD *)v7 + 4);
LABEL_18:
  if (*((_QWORD *)v7 + 3) - (_QWORD)v21 > 2uLL)
  {
    *((_BYTE *)v21 + 2) = 10;
    *(_WORD *)v21 = 14887;
    *((_QWORD *)v7 + 4) += 3;
  }
  else
  {
    v21 = llvm::raw_ostream::write(v7, "':\n", 3uLL);
  }
  v22 = a2 + 9;
  for (i = a2[10]; i != (uint64_t **)v22; i = (uint64_t **)i[1])
  {
    v24 = i - 3;
    if (!i)
      v24 = 0;
    v25 = v24[6];
    if (v25 != (uint64_t *)(v24 + 5))
    {
      while (1)
      {
        if (v25)
          v26 = (llvm::Instruction *)(v25 - 3);
        else
          v26 = 0;
        llvm::AliasSetTracker::add((llvm::AliasSetTracker *)&v31, v26);
        v25 = (uint64_t *)v25[1];
        v27 = i - 3;
        if (!i)
          v27 = 0;
        if (v25 == (uint64_t *)(v27 + 5))
          break;
LABEL_36:
        if (i == (uint64_t **)v22)
          goto LABEL_37;
      }
      while (1)
      {
        i = (uint64_t **)i[1];
        if (i == (uint64_t **)v22)
          goto LABEL_37;
        v28 = i - 3;
        if (!i)
          v28 = 0;
        v25 = v28[6];
        if (v25 != (uint64_t *)(v28 + 5))
          goto LABEL_36;
      }
    }
  }
LABEL_37:
  v29 = (llvm::raw_ostream *)llvm::errs(v21);
  llvm::AliasSetTracker::print((llvm::AliasSetTracker *)&v31, v29);
  sub_1C4D992E4((uint64_t)&v31);
  return 0;
}

uint64_t sub_1C4D992E4(uint64_t a1)
{
  llvm::AliasSetTracker::clear((llvm::AliasSetTracker *)a1);
  sub_1C4D9932C((_QWORD *)(a1 + 24));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  sub_1C4D99C88(a1 + 8, *(_QWORD **)(a1 + 16), (_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_1C4D9932C(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  v1 = *((unsigned int *)result + 4);
  if ((_DWORD)v1)
  {
    v2 = 48 * v1;
    v3 = (_QWORD *)(*result + 24);
    do
    {
      v4 = *v3;
      if (*v3 != -4096 && v4 != -8192 && v4 != 0)
      {
        v6 = v3;
        v7 = v2;
        result = llvm::ValueHandleBase::RemoveFromUseList(v3 - 2);
        v3 = v6;
        v2 = v7;
      }
      v3 += 6;
      v2 -= 48;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_1C4D99394(_QWORD *result, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  unint64_t **v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int32x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v50;
  uint64_t *v51;
  unint64_t *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t *v56;
  char *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v61;
  uint64_t *v62;
  unint64_t *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v70;
  uint64_t *v71;
  unint64_t *v72;
  char *v73;
  char *v74;
  char *v75;
  unint64_t *v76;
  char *v77;
  _QWORD *v78;

  if (a5 < 1)
    return result;
  v7 = (unint64_t **)result;
  v8 = (unint64_t *)*result;
  v9 = (a2 - *result) / 24;
  v10 = (unint64_t *)(*result + 24 * v9);
  v11 = result[2];
  v12 = result[1];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) < a5)
  {
    v21 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - (_QWORD)v8) >> 3);
    if (v21 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v22 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v8) >> 3);
    if (2 * v22 > v21)
      v21 = 2 * v22;
    if (v22 >= 0x555555555555555)
      v23 = 0xAAAAAAAAAAAAAAALL;
    else
      v23 = v21;
    v78 = result + 2;
    if (v23)
    {
      if (v23 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v24 = (char *)operator new(24 * v23);
    }
    else
    {
      v24 = 0;
    }
    v44 = 0;
    v45 = &v24[24 * v9];
    v74 = v24;
    v75 = v45;
    v77 = &v24[24 * v23];
    v46 = &v45[24 * a5];
    do
    {
      v47 = (unint64_t *)&v45[v44 * 8];
      *v47 = 4;
      v47[1] = 0;
      v48 = a3[v44 + 2];
      v47[2] = v48;
      if (v48 != -8192 && v48 != -4096 && v48 != 0)
      {
        v50 = a3[v44] & 0xFFFFFFFFFFFFFFF8;
        v47[1] = *(_QWORD *)v50;
        *(_QWORD *)v50 = v47;
        *v47 = v50 | 4;
        v51 = (uint64_t *)v47[1];
        if (v51)
          *v51 = *v51 & 7 | (unint64_t)&v45[v44 * 8 + 8];
      }
      v44 += 3;
    }
    while (3 * a5 != v44);
    v76 = (unint64_t *)&v45[24 * a5];
    v52 = *v7;
    if (*v7 != v10)
    {
      v53 = 24 * v9;
      v54 = v24 - 16;
      v55 = v24;
      v56 = v8;
      do
      {
        v57 = &v55[v53];
        *(_QWORD *)&v55[v53 - 24] = 4;
        v58 = (unint64_t *)&v55[v53 - 24];
        *((_QWORD *)v57 - 2) = 0;
        v59 = v56[(unint64_t)v53 / 8 - 1];
        *((_QWORD *)v57 - 1) = v59;
        if (v59 != -8192 && v59 != -4096 && v59 != 0)
        {
          v61 = v56[(unint64_t)v53 / 8 - 3] & 0xFFFFFFFFFFFFFFF8;
          *((_QWORD *)v57 - 2) = *(_QWORD *)v61;
          *(_QWORD *)v61 = v58;
          *v58 = v61 | 4;
          v62 = (uint64_t *)*((_QWORD *)v57 - 2);
          if (v62)
            *v62 = *v62 & 7 | (unint64_t)&v54[v53];
        }
        v56 -= 3;
        v55 -= 24;
        v54 -= 24;
      }
      while (&v56[(unint64_t)v53 / 8] != v52);
      v45 = &v55[v53];
    }
    v75 = v45;
    v63 = v7[1];
    if (v63 != v10)
    {
      v64 = 3 * v9;
      v65 = &v24[24 * a5];
      v66 = v65 + 8;
      do
      {
        v67 = (unint64_t *)&v65[v64 * 8];
        *v67 = 4;
        v67[1] = 0;
        v68 = v8[v64 + 2];
        v67[2] = v68;
        if (v68 != -8192 && v68 != -4096 && v68 != 0)
        {
          v70 = v8[3 * v9] & 0xFFFFFFFFFFFFFFF8;
          v67[1] = *(_QWORD *)v70;
          *(_QWORD *)v70 = v67;
          *v67 = v70 | 4;
          v71 = (uint64_t *)v67[1];
          if (v71)
            *v71 = *v71 & 7 | (unint64_t)&v66[v64 * 8];
        }
        v8 += 3;
        v65 += 24;
        v66 += 24;
      }
      while (&v8[v64] != v63);
      v45 = v75;
      v10 = v7[1];
      v46 = &v65[24 * v9];
    }
    v72 = *v7;
    *v7 = (unint64_t *)v45;
    v7[1] = (unint64_t *)v46;
    v73 = (char *)v7[2];
    v7[2] = (unint64_t *)v77;
    v76 = v10;
    v77 = v73;
    v74 = (char *)v72;
    v75 = (char *)v72;
    return (_QWORD *)sub_1C6179ABC((uint64_t)&v74);
  }
  else
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v10) >> 3)) >= a5)
    {
      v13 = &a3[3 * a5];
    }
    else
    {
      v13 = &a3[(uint64_t)(v12 - (_QWORD)v10) >> 3];
      if (v13 == a4)
      {
        v20 = result[1];
      }
      else
      {
        v14 = 0;
        do
        {
          v15 = (unint64_t *)(v12 + v14 * 8);
          *v15 = 4;
          v15[1] = 0;
          v16 = v13[v14 + 2];
          v15[2] = v16;
          if (v16 != -8192 && v16 != -4096 && v16 != 0)
          {
            v18 = v13[v14] & 0xFFFFFFFFFFFFFFF8;
            v15[1] = *(_QWORD *)v18;
            *(_QWORD *)v18 = v15;
            *v15 = v18 | 4;
            v19 = (unint64_t *)v15[1];
            if (v19)
              *v19 = *v19 & 7 | (v12 + v14 * 8 + 8);
          }
          v14 += 3;
        }
        while (&v13[v14] != a4);
        v20 = v12 + v14 * 8;
      }
      result[1] = v20;
      if ((uint64_t)(v12 - (_QWORD)v10) < 1)
        return result;
    }
    for (result = (_QWORD *)sub_1C61799C0((unint64_t)result, (uint64_t)v10, v12, (uint64_t)&v10[3 * a5]);
          a3 != v13;
          v10 += 3)
    {
      v25 = v10[2];
      v26 = a3[2];
      if (v25 != v26)
      {
        v27 = v25 == -4096 || v25 == 0;
        if (!v27 && v25 != -8192)
        {
          v32 = *v10 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v32 = v10[1];
          v33 = (unint64_t *)v10[1];
          if (v33)
          {
            *v33 = *v33 & 7 | v32;
          }
          else
          {
            v34 = v10[2];
            v35 = ***(int32x2_t ****)v34;
            v36 = (unint64_t)v35[303];
            if (v36 <= v32)
            {
              v37 = v35[305].u32[0];
              if (v36 + 16 * v37 > v32)
              {
                v38 = v37 - 1;
                LODWORD(v39) = v38 & ((v34 >> 4) ^ (v34 >> 9));
                v40 = (uint64_t *)(v36 + 16 * v39);
                v41 = *v40;
                if (v34 == *v40)
                {
LABEL_52:
                  *v40 = -8192;
                  v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
                  v34 = v10[2];
                }
                else
                {
                  v42 = 1;
                  while (v41 != -4096)
                  {
                    v43 = v39 + v42++;
                    v39 = v43 & v38;
                    v41 = *(_QWORD *)(v36 + 16 * v39);
                    if (v34 == v41)
                    {
                      v40 = (uint64_t *)(v36 + 16 * v39);
                      goto LABEL_52;
                    }
                  }
                }
                *(_BYTE *)(v34 + 17) &= ~1u;
              }
            }
          }
          v26 = a3[2];
        }
        v10[2] = v26;
        if (v26 != -4096 && v26 != -8192 && v26 != 0)
        {
          v29 = *a3;
          v30 = (unint64_t *)(*a3 & 0xFFFFFFFFFFFFFFF8);
          v10[1] = *v30;
          *v30 = (unint64_t)v10;
          *v10 = v29 & 0xFFFFFFFFFFFFFFF8 | *v10 & 7;
          v31 = (unint64_t *)v10[1];
          if (v31)
            *v31 = *v31 & 7 | (unint64_t)(v10 + 1);
        }
      }
      a3 += 3;
    }
  }
  return result;
}

void sub_1C4D99900(void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        if (v5 != -8192 && v5 != -4096 && v5 != 0)
        {
          v7 = *((_QWORD *)v3 - 3) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v7 = *((_QWORD *)v3 - 2);
          v8 = (unint64_t *)*((_QWORD *)v3 - 2);
          if (v8)
          {
            *v8 = *v8 & 7 | v7;
          }
          else
          {
            v9 = *((_QWORD *)v3 - 1);
            v10 = ***(int32x2_t ****)v9;
            v11 = (unint64_t)v10[303];
            if (v11 <= v7)
            {
              v12 = v10[305].u32[0];
              if (v11 + 16 * v12 > v7)
              {
                v13 = v12 - 1;
                LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
                v15 = (uint64_t *)(v11 + 16 * v14);
                v16 = *v15;
                if (v9 == *v15)
                {
LABEL_19:
                  *v15 = -8192;
                  v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                  v9 = *((_QWORD *)v3 - 1);
                }
                else
                {
                  v17 = 1;
                  while (v16 != -4096)
                  {
                    v18 = v14 + v17++;
                    v14 = v18 & v13;
                    v16 = *(_QWORD *)(v11 + 16 * v14);
                    if (v9 == v16)
                    {
                      v15 = (uint64_t *)(v11 + 16 * v14);
                      goto LABEL_19;
                    }
                  }
                }
                *(_BYTE *)(v9 + 17) &= ~1u;
              }
            }
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

uint64_t sub_1C4D99A2C(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  llvm::ValueHandleBase *v8;
  uint64_t v9;
  _QWORD v11[5];

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v11[4] = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (llvm::ValueHandleBase *)&v7[24 * v2];
  v11[0] = v7;
  v11[1] = v8;
  v11[3] = &v7[24 * v6];
  *(_QWORD *)v8 = 4;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = a2;
  if (a2 != -8192 && a2 != -4096 && a2)
    llvm::ValueHandleBase::AddToUseList(v8);
  v11[2] = (char *)v8 + 24;
  sub_1C6179B20(a1, v11);
  v9 = a1[1];
  sub_1C6179ABC((uint64_t)v11);
  return v9;
}

char *sub_1C4D99B44(_QWORD *a1)
{
  int v2;
  char *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = *((_DWORD *)a1 + 2);
  result = (char *)sub_1C4D9932C(a1);
  v4 = 1 << (33 - __clz(v2 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v2)
    v5 = v4;
  else
    v5 = 0;
  if ((_DWORD)v5 == *((_DWORD *)a1 + 4))
  {
    a1[1] = 0;
    if ((_DWORD)v5)
    {
      v6 = 48 * v5;
      v7 = (_QWORD *)(*a1 + 16);
      do
      {
        *v7 = 0;
        v7[1] = -4096;
        *(v7 - 2) = off_1E81345C0;
        *(v7 - 1) = 2;
        v7[2] = 0;
        v7 += 6;
        v6 -= 48;
      }
      while (v6);
    }
  }
  else
  {
    result = (char *)MEMORY[0x1CAA32FB4](*a1, 8);
    if ((_DWORD)v5)
    {
      v8 = (4 * (int)v5 / 3u + 1) | ((unint64_t)(4 * (int)v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *((_DWORD *)a1 + 4) = v9;
      result = (char *)operator new(48 * v9, (std::align_val_t)8uLL);
      *a1 = result;
      a1[1] = 0;
      v10 = *((unsigned int *)a1 + 4);
      if ((_DWORD)v10)
      {
        v11 = 48 * v10;
        v12 = result + 16;
        do
        {
          *v12 = 0;
          v12[1] = -4096;
          *(v12 - 2) = off_1E81345C0;
          *(v12 - 1) = 2;
          v12[2] = 0;
          v12 += 6;
          v11 -= 48;
        }
        while (v11);
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      *((_DWORD *)a1 + 4) = 0;
    }
  }
  return result;
}

_QWORD *sub_1C4D99C88(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  void **v8;

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      v5 = *v4;
      v6 = (_QWORD *)v4[1];
      *v6 = *v4;
      *(_QWORD *)(v5 + 8) = v6;
      *v4 = 0;
      v4[1] = 0;
      v8 = (void **)(v4 + 5);
      sub_1C4D99900(&v8);
      MEMORY[0x1CAA32FC0](v4, 0x10A0C40E86B5DE6);
      v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

BOOL sub_1C4D99D08(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) - 55) < 4;
}

BOOL sub_1C4D99D58(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) - 199) < 2;
}

BOOL sub_1C4D99DA8(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) - 194) < 5;
}

uint64_t sub_1C4D99DF8()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;

  v4 = 1;
  v2 = 250;
  v3 = &v2;
  *(_QWORD *)&v1 = "The maximum number of pointers may-alias sets may contain before degradation";
  *((_QWORD *)&v1 + 1) = 76;
  sub_1C61798D0((uint64_t)&unk_1ED82C630, "alias-set-saturation-threshold", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED82C630, &dword_1C475E000);
}

void llvm::initializeAnalysis(llvm *this, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;
  llvm::PassRegistry *v7;
  llvm::PassRegistry *v8;
  llvm::PassRegistry *v9;
  llvm::PassRegistry *v10;
  llvm::PassRegistry *v11;
  llvm::PassRegistry *v12;
  llvm::PassRegistry *v13;
  llvm::PassRegistry *v14;
  llvm::PassRegistry *v15;
  llvm::PassRegistry *v16;
  llvm::PassRegistry *v17;
  llvm::PassRegistry *v18;
  llvm::PassRegistry *v19;
  llvm::PassRegistry *v20;
  llvm::PassRegistry *v21;
  llvm::PassRegistry *v22;
  llvm::PassRegistry *v23;
  llvm::PassRegistry *v24;
  llvm::PassRegistry *v25;
  llvm::PassRegistry *v26;
  llvm::PassRegistry *v27;
  llvm::PassRegistry *v28;
  llvm::PassRegistry *v29;
  llvm::PassRegistry *v30;
  llvm::PassRegistry *v31;
  llvm::PassRegistry *v32;
  llvm::PassRegistry *v33;
  llvm::PassRegistry *v34;

  llvm::initializeAAEvalLegacyPassPass((uint64_t)this);
  llvm::initializeAliasSetPrinterPass((uint64_t)this);
  llvm::initializeBasicAAWrapperPassPass(this, v3);
  llvm::initializeBlockFrequencyInfoWrapperPassPass(this, v4);
  llvm::initializeBranchProbabilityInfoWrapperPassPass(this, v5);
  llvm::initializeCallGraphWrapperPassPass(this, v6);
  llvm::initializeCallGraphDOTPrinterPass((uint64_t)this);
  llvm::initializeCallGraphPrinterLegacyPassPass((uint64_t)this);
  llvm::initializeCallGraphViewerPass((uint64_t)this);
  llvm::initializeCostModelAnalysisPass((uint64_t)this);
  llvm::initializeCFGViewerLegacyPassPass((uint64_t)this);
  llvm::initializeCFGPrinterLegacyPassPass((uint64_t)this);
  llvm::initializeCFGOnlyViewerLegacyPassPass((uint64_t)this);
  llvm::initializeCFGOnlyPrinterLegacyPassPass((uint64_t)this);
  llvm::initializeCFLAndersAAWrapperPassPass(this, v7);
  llvm::initializeCFLSteensAAWrapperPassPass(this, v8);
  llvm::initializeCycleInfoWrapperPassPass((uint64_t)this);
  llvm::initializeDependenceAnalysisWrapperPassPass(this, v9);
  llvm::initializeDelinearizationPass((uint64_t)this);
  llvm::initializeDemandedBitsWrapperPassPass(this, v10);
  llvm::initializeDominanceFrontierWrapperPassPass(this, v11);
  llvm::initializeDomViewerPass((uint64_t)this);
  llvm::initializeDomPrinterPass((uint64_t)this);
  llvm::initializeDomOnlyViewerPass((uint64_t)this);
  llvm::initializePostDomViewerPass((uint64_t)this);
  llvm::initializeDomOnlyPrinterPass((uint64_t)this);
  llvm::initializePostDomPrinterPass((uint64_t)this);
  llvm::initializePostDomOnlyViewerPass((uint64_t)this);
  llvm::initializePostDomOnlyPrinterPass((uint64_t)this);
  llvm::initializeAAResultsWrapperPassPass(this, v12);
  llvm::initializeGlobalsAAWrapperPassPass(this, v13);
  llvm::initializeIVUsersWrapperPassPass(this, v14);
  llvm::initializeInstCountLegacyPassPass((uint64_t)this);
  llvm::initializeIntervalPartitionPass((uint64_t)this);
  llvm::initializeIRSimilarityIdentifierWrapperPassPass(this, v15);
  llvm::initializeLazyBranchProbabilityInfoPassPass((uint64_t)this);
  llvm::initializeLazyBlockFrequencyInfoPassPass(this, v16);
  llvm::initializeLazyValueInfoWrapperPassPass(this, v17);
  llvm::initializeLazyValueInfoPrinterPass((uint64_t)this);
  llvm::initializeLegacyDivergenceAnalysisPass(this, v18);
  llvm::initializeLintLegacyPassPass((uint64_t)this);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)this);
  llvm::initializeMemDepPrinterPass((uint64_t)this);
  llvm::initializeMemDerefPrinterPass((uint64_t)this);
  llvm::initializeMemoryDependenceWrapperPassPass(this, v19);
  llvm::initializeModuleDebugInfoLegacyPrinterPass((uint64_t)this);
  llvm::initializeModuleSummaryIndexWrapperPassPass(this, v20);
  llvm::initializeMustExecutePrinterPass((uint64_t)this);
  llvm::initializeMustBeExecutedContextPrinterPass((uint64_t)this);
  llvm::initializeObjCARCAAWrapperPassPass(this, v21);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(this, v22);
  llvm::initializePhiValuesWrapperPassPass(this, v23);
  llvm::initializePostDominatorTreeWrapperPassPass((uint64_t)this);
  llvm::initializeRegionInfoPassPass(this, v24);
  llvm::initializeRegionViewerPass((uint64_t)this);
  llvm::initializeRegionPrinterPass((uint64_t)this);
  llvm::initializeRegionOnlyViewerPass((uint64_t)this);
  llvm::initializeRegionOnlyPrinterPass((uint64_t)this);
  llvm::initializeSCEVAAWrapperPassPass(this, v25);
  llvm::initializeScalarEvolutionWrapperPassPass(this, v26);
  llvm::initializeStackSafetyGlobalInfoWrapperPassPass(this, v27);
  llvm::initializeStackSafetyInfoWrapperPassPass(this, v28);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)this);
  llvm::initializeFunctionGroupInfoWrapperPassPass((uint64_t)this);
  llvm::initializeTypeBasedAAWrapperPassPass(this, v29);
  llvm::initializeScopedNoAliasAAWrapperPassPass(this, v30);
  llvm::initializeGPUAAWrapperPassPass(this, v31);
  llvm::initializeLCSSAVerificationPassPass(this, v32);
  llvm::initializeMemorySSAWrapperPassPass(this, v33);
  llvm::initializeMemorySSAPrinterLegacyPassPass((uint64_t)this);
  llvm::initializeGPUFunctionCallInfoWrapperPass(this, v34);
}

uint64_t LLVMVerifyModule(llvm *a1, int a2, char **a3, BOOL *a4)
{
  llvm::raw_ostream *v7;
  const llvm::Module *v8;
  uint64_t v9;
  char v10;
  const char *v11;
  size_t v12;
  int v13;
  const char *v14;
  void (**v16)(llvm::raw_ostream *__hidden);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  void **v24;
  void *v25[2];
  uint64_t v26;

  if (a2 == 2)
    v7 = 0;
  else
    v7 = (llvm::raw_ostream *)llvm::errs(a1);
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  v17 = 0;
  v21 = 0;
  v22 = 0;
  v16 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v24 = v25;
  v23 = 0;
  if (a3)
    v8 = (const llvm::Module *)&v16;
  else
    v8 = v7;
  v19 = 0;
  v20 = 0;
  v18 = 0;
  v9 = llvm::verifyModule(a1, v8, 0, a4);
  if (a3 && v7)
  {
    v10 = *((_BYTE *)v24 + 23);
    if (v10 >= 0)
      v11 = (const char *)v24;
    else
      v11 = (const char *)*v24;
    if (v10 >= 0)
      v12 = v10 & 0x7F;
    else
      v12 = (size_t)v24[1];
    llvm::raw_ostream::write(v7, v11, v12);
  }
  if (a2)
    v13 = 0;
  else
    v13 = v9;
  if (v13 == 1)
    llvm::report_fatal_error((llvm *)"Broken module found, compilation aborted!", (const char *)1);
  if (a3)
  {
    v14 = (const char *)v24;
    if (*((char *)v24 + 23) < 0)
      v14 = (const char *)*v24;
    *a3 = strdup(v14);
  }
  v16 = off_1E81A6E70;
  if (v23 == 1 && v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8077774924);
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
  return v9;
}

llvm *LLVMVerifyFunction(uint64_t a1, int a2, llvm::raw_ostream *a3)
{
  llvm *result;
  const llvm::Function *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;

  if (a2 == 2)
    return (llvm *)llvm::verifyFunction((uint64_t ***)a1, 0, a3);
  v6 = (const llvm::Function *)llvm::errs((llvm *)a1);
  result = (llvm *)llvm::verifyFunction((uint64_t ***)a1, v6, v7);
  if (!a2)
  {
    if ((_DWORD)result)
    {
      v8 = (llvm::raw_ostream *)llvm::errs(result);
      sub_1C4816AD8(v8, "Verifier error:\n");
      llvm::Module::dump(*(llvm::Module **)(a1 + 40));
      llvm::report_fatal_error((llvm *)"Broken function found, compilation aborted!", (const char *)1);
    }
  }
  return result;
}

void LLVMViewFunctionCFG(llvm::Function *a1)
{
  llvm::Function::viewCFG(a1, 0, 0, 0);
}

void LLVMViewFunctionCFGOnly(llvm::Function *a1)
{
  llvm::Function::viewCFG(a1, 1, 0, 0);
}

uint64_t sub_1C4D9A2C4(void *__src, size_t __len, void *a3, std::string::size_type a4)
{
  uint64_t v9;
  void **v10;
  size_t v11;
  size_t v12;
  std::string *p_p;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __p;
  void *__dst[2];
  unint64_t v20;

  if (!atomic_load(qword_1ED836B40))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B40, (void *(*)(void))sub_1C6387C7C, (void (*)(void *))sub_1C6387CC8);
  v9 = qword_1ED836B40[0];
  if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_24:
    abort();
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    v10 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)__len;
    v20 = v12 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_10;
  }
  HIBYTE(v20) = __len;
  v10 = __dst;
  if (__len)
LABEL_10:
    memmove(v10, __src, __len);
  *((_BYTE *)v10 + __len) = 0;
  if (a4 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_24;
  if (a4 >= 0x17)
  {
    v14 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v14 = a4 | 7;
    v15 = v14 + 1;
    p_p = (std::string *)operator new(v14 + 1);
    __p.__r_.__value_.__l.__size_ = a4;
    __p.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_18;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = a4;
  p_p = &__p;
  if (a4)
LABEL_18:
    memmove(p_p, a3, a4);
  p_p->__r_.__value_.__s.__data_[a4] = 0;
  v16 = sub_1C4D9AC74(v9, (uint64_t)__dst, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
  return v16;
}

uint64_t llvm::hasAttributeInAssume(uint64_t a1, uint64_t a2, const void *a3, size_t a4, _QWORD *a5)
{
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v5 = *(_DWORD *)(a1 + 20);
  if ((v5 & 0x80000000) == 0)
    return 0;
  v7 = a1 - 32 * (v5 & 0x7FFFFFF);
  v8 = *(_QWORD *)(v7 - 8);
  if (!v8)
    return 0;
  v9 = -v8;
  while (1)
  {
    v10 = *(uint64_t **)(v7 + v9 - 8);
    v12 = *v10;
    v11 = v10 + 2;
    if (v12 == a4 && (!a4 || !memcmp(v11, a3, a4)))
    {
      if (!a2)
        break;
      v13 = *(unsigned int *)(v7 + v9);
      if (*(_DWORD *)(v7 + v9 + 4) != (_DWORD)v13 && *(_QWORD *)(v7 + 32 * v13) == a2)
        break;
    }
    result = 0;
    v9 += 16;
    if (!v9)
      return result;
  }
  if (a5)
  {
    v14 = *(_QWORD *)(v7 + 32 * *(unsigned int *)(v7 + v9) + 32);
    v15 = (_QWORD *)(v14 + 24);
    if (*(_DWORD *)(v14 + 32) >= 0x41u)
      v15 = (_QWORD *)*v15;
    *a5 = *v15;
  }
  return 1;
}

uint64_t llvm::fillMapFromAssume(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int AttrKindFromName;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v2 = *(_DWORD *)(result + 20);
  if (v2 < 0)
  {
    v3 = v2 & 0x7FFFFFF;
    v4 = result - 32 * v3;
    v7 = *(_QWORD *)(v4 - 8);
    v6 = v4 - 8;
    v5 = v7;
    if (v7)
    {
      v8 = -8 - (v5 + 32 * v3);
      v28 = result;
      v9 = result;
      do
      {
        v10 = result + v8;
        AttrKindFromName = llvm::Attribute::getAttrKindFromName(*(_QWORD *)(result + v8) + 16, **(_QWORD **)(result + v8));
        v12 = 0;
        v30 = 0;
        v31 = AttrKindFromName;
        v13 = *(unsigned int *)(v10 + 8);
        v14 = *(_DWORD *)(v10 + 12);
        if (v14 != (_DWORD)v13)
        {
          v12 = *(_QWORD *)(v28 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF) + 32 * v13);
          v30 = v12;
        }
        if (v12 || AttrKindFromName)
        {
          if ((v14 - v13) <= 1)
          {
            v17 = sub_1C6179D3C((uint64_t *)a2, &v30);
            v32 = v28;
            v18 = sub_1C617A140(v17 + 16, &v32);
            v18[1] = 0;
            v18[2] = 0;
          }
          else
          {
            v15 = *(_QWORD *)(v28 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF) + 32 * v13 + 32);
            if (v15)
              v16 = *(_BYTE *)(v15 + 16) == 16;
            else
              v16 = 0;
            if (v16)
            {
              v19 = (_QWORD *)(v15 + 24);
              if (*(_DWORD *)(v15 + 32) >= 0x41u)
                v19 = (_QWORD *)*v19;
              v20 = (_QWORD *)*v19;
              v32 = 0;
              if (sub_1C6179DA8((uint64_t *)a2, &v30, &v32)
                && v32 != *(_QWORD *)a2 + 40 * *(unsigned int *)(a2 + 16)
                && (v21 = v32 + 16, (sub_1C617A1AC(*(_QWORD *)(v32 + 16), *(_DWORD *)(v32 + 32), v28, &v32) & 1) != 0))
              {
                v32 = v9;
                v22 = sub_1C617A140(v21, &v32);
                if (v22[1] >= (unint64_t)v20)
                  v23 = v20;
                else
                  v23 = (_QWORD *)v22[1];
                v29 = v9;
                sub_1C617A140(v21, &v29)[1] = v23;
                v32 = v9;
                v24 = sub_1C617A140(v21, &v32);
                if ((unint64_t)v20 <= v24[2])
                  v20 = (_QWORD *)v24[2];
                v29 = v9;
                v25 = sub_1C617A140(v21, &v29);
              }
              else
              {
                v26 = sub_1C6179D3C((uint64_t *)a2, &v30);
                v32 = v28;
                v25 = sub_1C617A140(v26 + 16, &v32);
                v25[1] = v20;
              }
              v25[2] = v20;
            }
          }
        }
        v8 += 16;
        result = v28;
      }
      while (v10 + 16 != v6);
    }
  }
  return result;
}

uint64_t llvm::getKnowledgeFromBundle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;

  *(_QWORD *)(a3 + 8) = 0;
  v6 = (uint64_t *)(a3 + 8);
  *(_QWORD *)(a3 + 16) = 0;
  result = llvm::Attribute::getAttrKindFromName(*(_QWORD *)a2 + 16, **(_QWORD **)a2);
  *(_DWORD *)a3 = result;
  v8 = *(unsigned int *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 12);
  if (v9 != (_DWORD)v8)
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * v8);
  v10 = v9 - v8;
  if (v10 >= 2)
  {
    v11 = a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * v8;
    v12 = *(_QWORD *)(v11 + 32);
    if (v12)
      v13 = *(_BYTE *)(v12 + 16) == 16;
    else
      v13 = 0;
    if (v13)
    {
      v15 = (uint64_t *)(v12 + 24);
      if (*(_DWORD *)(v12 + 32) >= 0x41u)
        v15 = (uint64_t *)*v15;
      v14 = *v15;
    }
    else
    {
      v14 = 1;
    }
    *v6 = v14;
    if ((_DWORD)result == 74 && v10 >= 3)
    {
      v17 = *(_QWORD *)(v11 + 64);
      if (v17)
        v18 = *(_BYTE *)(v17 + 16) == 16;
      else
        v18 = 0;
      if (v18)
      {
        v20 = (uint64_t *)(v17 + 24);
        if (*(_DWORD *)(v17 + 32) >= 0x41u)
          v20 = (uint64_t *)*v20;
        v19 = *v20;
      }
      else
      {
        v19 = 1;
      }
      *v6 = (v19 | v14) & -(v19 | v14);
    }
  }
  return result;
}

uint64_t llvm::getKnowledgeFromOperandInAssume@<X0>(char *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v6;

  v6 = *(_OWORD *)llvm::CallBase::getBundleOpInfoForOperand(a1, a2);
  return llvm::getKnowledgeFromBundle((uint64_t)a1, (uint64_t)&v6, a3);
}

uint64_t llvm::isAssumeWithEmptyBundle(uint64_t a1)
{
  int v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 & 0x80000000) == 0)
    return 1;
  v3 = a1 - 32 * (v1 & 0x7FFFFFF);
  v6 = *(_QWORD *)(v3 - 8);
  v4 = v3 - 8;
  v5 = v6;
  if (!v6)
    return 1;
  v7 = -v5;
  result = 1;
  while (1)
  {
    v8 = *(_QWORD *)(v4 + v7);
    if (*(_QWORD *)v8 != 6)
      break;
    v9 = *(_DWORD *)(v8 + 16);
    v10 = *(unsigned __int16 *)(v8 + 20);
    if (v9 != 1869506409 || v10 != 25970)
      break;
    v7 += 16;
    if (!v7)
      return result;
  }
  return 0;
}

char *sub_1C4D9A91C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  char *result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[3];
  v3 = *a1;
  v9 = 7;
  v10 = 0;
  v11 = v3;
  v4 = sub_1C4D9B4C8((uint64_t)&v9, v2);
  result = 0;
  if (v4)
  {
    v6 = a1[3];
    v7 = *(_DWORD *)(v6 + 20);
    if ((v7 & 0x40000000) != 0)
      v8 = *(_QWORD *)(v6 - 8);
    else
      v8 = v6 - 32 * (v7 & 0x7FFFFFF);
    return llvm::CallBase::getBundleOpInfoForOperand((char *)v6, ((unint64_t)a1 - v8) >> 5);
  }
  return result;
}

void llvm::getKnowledgeForValue(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t, __int128 *, uint64_t, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  __int128 v39;
  uint64_t v40;

  if (a4)
  {
    if (!*(_BYTE *)(a4 + 184))
      llvm::AssumptionCache::scanFunction((llvm::AssumptionCache *)a4);
    v14 = *(_QWORD *)(a4 + 160);
    v15 = *(_DWORD *)(a4 + 176);
    if (v15)
    {
      v34 = v15 - 1;
      v35 = (v15 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v16 = v14 + 88 * v35;
      v36 = *(_QWORD *)(v16 + 24);
      if (v36 == a1)
        goto LABEL_6;
      v37 = 1;
      while (v36 != -4096)
      {
        v38 = v35 + v37++;
        v35 = v38 & v34;
        v16 = v14 + 88 * (v38 & v34);
        v36 = *(_QWORD *)(v16 + 24);
        if (v36 == a1)
          goto LABEL_6;
      }
    }
    v16 = v14 + 88 * v15;
LABEL_6:
    if (v16 != v14 + 88 * v15)
    {
      v17 = *(unsigned int *)(v16 + 48);
      if ((_DWORD)v17)
      {
        v18 = *(_QWORD *)(v16 + 40);
        v19 = v18 + 32 * v17;
        do
        {
          v20 = *(_QWORD *)(v18 + 16);
          if (v20)
          {
            v21 = *(unsigned int *)(v18 + 24);
            if ((_DWORD)v21 != -1)
            {
              v22 = *(_DWORD *)(v20 + 20);
              v23 = v22 < 0 ? v20 - 32 * (v22 & 0x7FFFFFF) - 8 - *(_QWORD *)(v20 - 32 * (v22 & 0x7FFFFFF) - 8) : 0;
              llvm::getKnowledgeFromBundle(*(_QWORD *)(v18 + 16), v23 + 16 * v21, a7);
              if (*(_DWORD *)a7)
              {
                if (*(_QWORD *)(a7 + 16) == a1)
                {
                  if (a3)
                  {
                    v24 = 4 * a3;
                    v25 = a2;
                    while (*v25 != *(_DWORD *)a7)
                    {
                      ++v25;
                      v24 -= 4;
                      if (!v24)
                      {
                        v25 = &a2[a3];
                        break;
                      }
                    }
                  }
                  else
                  {
                    v25 = a2;
                  }
                  if (a3 != v25 - a2)
                  {
                    v26 = *(_DWORD *)(v20 + 20);
                    v27 = v26 < 0
                        ? v20 - 32 * (v26 & 0x7FFFFFF) - 8 - *(_QWORD *)(v20 - 32 * (v26 & 0x7FFFFFF) - 8)
                        : 0;
                    v28 = v27 + 16 * *(unsigned int *)(v18 + 24);
                    v39 = *(_OWORD *)a7;
                    v40 = *(_QWORD *)(a7 + 16);
                    if ((a5(a6, &v39, v20, v28) & 1) != 0)
                      return;
                  }
                }
              }
            }
          }
          v18 += 32;
        }
        while (v18 != v19);
      }
    }
LABEL_41:
    *(_DWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    return;
  }
  v29 = *(uint64_t **)(a1 + 8);
  if (!v29)
    goto LABEL_41;
  while (1)
  {
    v30 = sub_1C4D9A91C(v29);
    if (v30)
    {
      v31 = v30;
      llvm::getKnowledgeFromBundle(v29[3], (uint64_t)v30, a7);
      if (*(_DWORD *)a7)
      {
        if (a3)
        {
          v32 = 4 * a3;
          v33 = a2;
          while (*v33 != *(_DWORD *)a7)
          {
            ++v33;
            v32 -= 4;
            if (!v32)
            {
              v33 = &a2[a3];
              break;
            }
          }
        }
        else
        {
          v33 = a2;
        }
        if (a3 != v33 - a2)
        {
          v39 = *(_OWORD *)a7;
          v40 = *(_QWORD *)(a7 + 16);
          if ((a5(a6, &v39, v29[3], (uint64_t)v31) & 1) != 0)
            break;
        }
      }
    }
    v29 = (uint64_t *)v29[1];
    if (!v29)
      goto LABEL_41;
  }
}

void llvm::getKnowledgeValidInContext(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD v7[2];
  uint64_t v8;
  uint64_t v9;

  v9 = a4;
  v7[0] = &v9;
  v7[1] = &v8;
  v8 = a5;
  llvm::getKnowledgeForValue(a1, a2, a3, a6, (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t))sub_1C4D9B788, (uint64_t)v7, a7);
}

uint64_t sub_1C4D9AC74(uint64_t a1, uint64_t a2, const std::string *a3)
{
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  unsigned int v9;

  v9 = sub_1C4D9AD04((unint64_t *)(a1 + 24), a2);
  v5 = sub_1C4D9B074(a1, &v9);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = -1;
  *((_BYTE *)v5 + 32) = 0;
  v6 = v5 + 10;
  if (*((char *)v5 + 63) < 0)
    operator delete(*(void **)v6);
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  v7 = sub_1C4D9B074(a1, &v9);
  std::string::operator=((std::string *)(v7 + 10), a3);
  return v9;
}

uint64_t sub_1C4D9AD04(unint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  __int128 *v10;

  v10 = (__int128 *)a2;
  v4 = sub_1C4D9ADC8((uint64_t)a1, (const void **)a2, (uint64_t)&std::piecewise_construct, &v10);
  result = *((unsigned int *)v4 + 14);
  if (!(_DWORD)result)
  {
    v6 = a1[4];
    v7 = a1[5];
    *((_DWORD *)v4 + 14) = -1431655765 * ((v6 - a1[3]) >> 3) + 1;
    if (v6 >= v7)
    {
      v9 = sub_1C4D9AEFC(a1 + 3, a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1C47EBC30((_BYTE *)v6, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v8 = *(_OWORD *)a2;
        *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 16);
        *(_OWORD *)v6 = v8;
      }
      v9 = v6 + 24;
    }
    a1[4] = v9;
    return *((unsigned int *)v4 + 14);
  }
  return result;
}

uint64_t *sub_1C4D9ADC8(uint64_t a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v6 = (uint64_t **)sub_1C4768D58(a1, &v12, a2);
  result = *v6;
  if (!*v6)
  {
    sub_1C4D9AE88(a1, a4, (uint64_t)&v11);
    v8 = v12;
    v9 = v11;
    *v11 = 0;
    v9[1] = 0;
    v9[2] = v8;
    *v6 = v9;
    v10 = **(_QWORD **)a1;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v9 = *v6;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v9);
    ++*(_QWORD *)(a1 + 16);
    return v11;
  }
  return result;
}

_BYTE *sub_1C4D9AE88@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  result = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_1C47EBC30(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  *((_DWORD *)v6 + 14) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

unint64_t sub_1C4D9AEFC(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  __int128 v12;
  int64x2_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  int64x2_t v18;
  unint64_t v19;
  unint64_t *v20;

  v3 = *a1;
  v2 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - v3) >> 3) > v5)
    v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  v20 = a1 + 2;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C47EBC30(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v2 = a1[1];
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  }
  if (v2 == v3)
  {
    v13 = vdupq_n_s64(v3);
    v11 = (unint64_t)v10;
  }
  else
  {
    v11 = (unint64_t)v10;
    do
    {
      v12 = *(_OWORD *)(v2 - 24);
      *(_QWORD *)(v11 - 8) = *(_QWORD *)(v2 - 8);
      *(_OWORD *)(v11 - 24) = v12;
      v11 -= 24;
      *(_QWORD *)(v2 - 16) = 0;
      *(_QWORD *)(v2 - 8) = 0;
      *(_QWORD *)(v2 - 24) = 0;
      v2 -= 24;
    }
    while (v2 != v3);
    v13 = *(int64x2_t *)a1;
  }
  v14 = (unint64_t)(v10 + 24);
  *a1 = v11;
  a1[1] = v14;
  v18 = v13;
  v15 = a1[2];
  a1[2] = (unint64_t)&v9[24 * v8];
  v19 = v15;
  v17 = v13.i64[0];
  sub_1C4D868F0((uint64_t)&v17);
  return v14;
}

_DWORD *sub_1C4D9B074(uint64_t a1, _DWORD *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  int v11;
  _DWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_1C4D9B148(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    *(_OWORD *)(v6 + 6) = 0u;
    *(_OWORD *)(v6 + 2) = 0u;
    *((_QWORD *)v6 + 3) = -1;
    *((_QWORD *)v6 + 6) = 0;
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 5) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + (v5 << 6));
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + (v5 << 6));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

_DWORD *sub_1C4D9B148(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_1C4D9B2CC(a1, v7);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (37 * *a3) & v18;
      a4 = (_DWORD *)(*(_QWORD *)a1 + (v19 << 6));
      v20 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v21 = 1;
      while (v20 != -1)
      {
        if (v13)
          v22 = 0;
        else
          v22 = v20 == -2;
        if (v22)
          v13 = a4;
        v23 = v19 + v21++;
        v19 = v23 & v18;
        a4 = (_DWORD *)(*(_QWORD *)a1 + (v19 << 6));
        v20 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_29;
    }
LABEL_28:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1C4D9B2CC(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_28;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + (v11 << 6));
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != -1)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -2;
    if (v15)
      v13 = a4;
    v16 = v11 + v14++;
    v11 = v16 & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + (v11 << 6));
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_29:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_1C4D9B2CC(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4D9B384(a1, v4, &v4[16 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = v10 << 6;
    do
    {
      *result = -1;
      result += 16;
      v11 -= 64;
    }
    while (v11);
  }
  return result;
}

void sub_1C4D9B384(uint64_t a1, int *a2, int *a3)
{
  int *v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  BOOL v17;
  int v18;
  __int128 v19;
  __int128 v20;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = v6 << 6;
    do
    {
      *v7 = -1;
      v7 += 16;
      v8 -= 64;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        v10 = *(_DWORD *)(a1 + 16);
        if (v10)
        {
          v11 = v10 - 1;
          v12 = (v10 - 1) & (37 * v9);
          v13 = (int *)(*(_QWORD *)a1 + (v12 << 6));
          v14 = *v13;
          if (v9 != *v13)
          {
            v15 = 0;
            v16 = 1;
            while (v14 != -1)
            {
              if (v15)
                v17 = 0;
              else
                v17 = v14 == -2;
              if (v17)
                v15 = v13;
              v18 = v12 + v16++;
              v12 = v18 & v11;
              v13 = (int *)(*(_QWORD *)a1 + (v12 << 6));
              v14 = *v13;
              if (v9 == *v13)
                goto LABEL_18;
            }
            if (v15)
              v13 = v15;
          }
        }
        else
        {
          v13 = 0;
        }
LABEL_18:
        *v13 = v9;
        v19 = *(_OWORD *)(v4 + 2);
        *(_OWORD *)((char *)v13 + 17) = *(_OWORD *)((char *)v4 + 17);
        *(_OWORD *)(v13 + 2) = v19;
        v20 = *(_OWORD *)(v4 + 10);
        *((_QWORD *)v13 + 7) = *((_QWORD *)v4 + 7);
        *(_OWORD *)(v13 + 10) = v20;
        *((_QWORD *)v4 + 6) = 0;
        *((_QWORD *)v4 + 7) = 0;
        *((_QWORD *)v4 + 5) = 0;
        ++*(_DWORD *)(a1 + 8);
        if (*((char *)v4 + 63) < 0)
          operator delete(*((void **)v4 + 5));
      }
      v4 += 16;
    }
    while (v4 != a3);
  }
}

BOOL sub_1C4D9B4C8(uint64_t a1, uint64_t a2)
{
  return sub_1C4D9B530((_DWORD *)a1, a2)
      && a2
      && *(_BYTE *)(a2 + 16) == 84
      && *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2
                                           - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)
                                           + 32 * *(unsigned int *)(a1 + 8));
}

BOOL sub_1C4D9B530(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = 0;
  if (a2)
  {
    if (*(_BYTE *)(a2 + 16) == 84)
    {
      v2 = *(_QWORD *)(a2 - 32);
      if (v2)
        return !*(_BYTE *)(v2 + 16) && *(_QWORD *)(v2 + 24) == *(_QWORD *)(a2 + 72) && *(_DWORD *)(v2 + 36) == *a1;
    }
  }
  return v2;
}

uint64_t sub_1C4D9B584()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  unint64_t v4;

  v0 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v1 = &unk_1ED7EA000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v1 = &unk_1ED7EA000;
    if (v3)
    {
      v4 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v4 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v4;
      __cxa_guard_release(&qword_1ED7EAC88);
      v1 = (_QWORD *)&unk_1ED7EA000;
    }
  }
  return v1[400];
}

_OWORD *sub_1C4D9B5FC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C617A020(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = xmmword_1C85F2170;
      result = (_OWORD *)((char *)result + 40);
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C4D9B6C4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C617A2F8(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4D9B788(const llvm::Instruction ***a1, uint64_t a2, llvm *a3, const llvm::DominatorTree *a4)
{
  return llvm::isValidAssumeForContext(a3, **a1, *a1[1], a4);
}

uint64_t sub_1C4D9B7A0()
{
  uint64_t result;

  result = sub_1C4D9A2C4("assume-queries-counter", 0x16uLL, "Controls which assumes gets created", 0x23uLL);
  dword_1ED7EFDD8 = result;
  return result;
}

_QWORD *llvm::AssumptionCache::getOrInsertAffectedValues(llvm::AssumptionCache *this, llvm::Value *a2)
{
  uint64_t v3;
  char *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  llvm::Value *v12;
  llvm::Value *v13;
  unint64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  llvm::AssumptionCache *v18;
  unint64_t v19;
  llvm::Value *v20;
  int32x2_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  llvm::Value **v26;
  llvm::Value *v27;
  int v28;
  int v29;
  unsigned int v30;
  llvm::Value *v31;
  int v32;
  unsigned int v33;
  unint64_t v35;
  llvm::Value *v36;
  int32x2_t *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  llvm::Value **v42;
  llvm::Value *v43;
  int v44;
  int v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  int32x2_t *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t *v59;
  llvm::Value *v60;
  llvm::AssumptionCache *v61;
  _QWORD *v62;
  char *v63[2];
  _QWORD v64[5];
  unint64_t v65;
  unint64_t *v66;
  llvm::Value *v67;
  llvm::AssumptionCache *v68;
  char *v69;
  uint64_t v70;
  _QWORD v71[5];

  v71[4] = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 160;
  v3 = *((_QWORD *)this + 20);
  v5 = *((_DWORD *)this + 44);
  if (!v5)
  {
LABEL_2:
    v6 = (_QWORD *)(v3 + 88 * v5);
    goto LABEL_3;
  }
  v30 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = (_QWORD *)(v3 + 88 * v30);
  v31 = (llvm::Value *)v6[3];
  if (v31 != a2)
  {
    v32 = 1;
    while (v31 != (llvm::Value *)-4096)
    {
      v33 = v30 + v32++;
      v30 = v33 & (v5 - 1);
      v6 = (_QWORD *)(v3 + 88 * v30);
      v31 = (llvm::Value *)v6[3];
      if (v31 == a2)
        goto LABEL_3;
    }
    goto LABEL_2;
  }
LABEL_3:
  if (v6 != (_QWORD *)(v3 + 88 * v5))
    return v6 + 5;
  v8 = 2;
  v58 = 2;
  v59 = 0;
  v60 = a2;
  if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v58);
    v8 = v58;
    a2 = v60;
  }
  v61 = this;
  v63[0] = (char *)v64;
  v63[1] = (char *)0x100000000;
  v65 = v8 & 6;
  v66 = 0;
  v67 = a2;
  if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096)
  {
    if (a2)
    {
      v66 = *(unint64_t **)(v8 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(v8 & 0xFFFFFFFFFFFFFFF8) = &v65;
      v65 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if (v66)
        *v66 = *v66 & 7 | (unint64_t)&v66;
    }
  }
  v64[4] = off_1E8134750;
  v68 = v61;
  v69 = (char *)v71;
  v70 = 0x100000000;
  v62 = 0;
  v9 = sub_1C4D9F2EC(*((_QWORD *)this + 20), *((_DWORD *)this + 44), (uint64_t)v67, &v62);
  v6 = v62;
  if ((v9 & 1) == 0)
  {
    v10 = *((_DWORD *)this + 42);
    v11 = *((_DWORD *)this + 44);
    if (4 * v10 + 4 >= 3 * v11)
    {
      v11 *= 2;
    }
    else if (v11 + ~v10 - *((_DWORD *)this + 43) > v11 >> 3)
    {
LABEL_17:
      ++*((_DWORD *)this + 42);
      v12 = (llvm::Value *)v6[3];
      if (v12 != (llvm::Value *)-4096)
        --*((_DWORD *)this + 43);
      v13 = v67;
      if (v12 != v67)
      {
        if (v12 != (llvm::Value *)-4096 && v12 && v12 != (llvm::Value *)-8192)
        {
          v46 = v6[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v46 = v6[2];
          v47 = (unint64_t *)v6[2];
          if (v47)
          {
            *v47 = *v47 & 7 | v46;
          }
          else
          {
            v48 = v6[3];
            v49 = ***(int32x2_t ****)v48;
            v50 = (unint64_t)v49[303];
            if (v50 <= v46)
            {
              v51 = v49[305].u32[0];
              if (v50 + 16 * v51 > v46)
              {
                v52 = v51 - 1;
                LODWORD(v53) = v52 & ((v48 >> 4) ^ (v48 >> 9));
                v54 = (uint64_t *)(v50 + 16 * v53);
                v55 = *v54;
                if (v48 == *v54)
                {
LABEL_75:
                  *v54 = -8192;
                  v49[304] = vadd_s32(v49[304], (int32x2_t)0x1FFFFFFFFLL);
                  v48 = v6[3];
                }
                else
                {
                  v56 = 1;
                  while (v55 != -4096)
                  {
                    v57 = v53 + v56++;
                    v53 = v57 & v52;
                    v55 = *(_QWORD *)(v50 + 16 * v53);
                    if (v48 == v55)
                    {
                      v54 = (uint64_t *)(v50 + 16 * v53);
                      goto LABEL_75;
                    }
                  }
                }
                *(_BYTE *)(v48 + 17) &= ~1u;
              }
            }
          }
          v13 = v67;
        }
        v6[3] = v13;
        if (v13 != (llvm::Value *)-4096 && v13 != (llvm::Value *)-8192 && v13 != 0)
        {
          v15 = v65;
          v16 = (_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF8);
          v6[2] = *(_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF8);
          *v16 = v6 + 1;
          v6[1] = v15 & 0xFFFFFFFFFFFFFFF8 | v6[1] & 7;
          v17 = (unint64_t *)v6[2];
          if (v17)
            *v17 = *v17 & 7 | (unint64_t)(v6 + 2);
        }
      }
      v18 = v68;
      v6[5] = v6 + 7;
      v6[4] = v18;
      v6[6] = 0x100000000;
      if ((_DWORD)v70)
        sub_1C4D9DC84((uint64_t)(v6 + 5), (uint64_t)&v69);
      goto LABEL_30;
    }
    sub_1C4D9F384((uint64_t)v4, v11);
    v62 = 0;
    sub_1C4D9F2EC(*((_QWORD *)this + 20), *((_DWORD *)this + 44), (uint64_t)v67, &v62);
    v6 = v62;
    goto LABEL_17;
  }
LABEL_30:
  sub_1C4D9F1A8(&v69);
  if (v67 != (llvm::Value *)-8192 && v67 != (llvm::Value *)-4096 && v67)
  {
    v19 = v65 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF8) = v66;
    if (v66)
    {
      *v66 = *v66 & 7 | v19;
    }
    else
    {
      v20 = v67;
      v21 = ***(int32x2_t ****)v67;
      v22 = (unint64_t)v21[303];
      if (v22 <= v19)
      {
        v23 = v21[305].u32[0];
        if (v22 + 16 * v23 > v19)
        {
          v24 = v23 - 1;
          LODWORD(v25) = v24 & ((v67 >> 4) ^ (v67 >> 9));
          v26 = (llvm::Value **)(v22 + 16 * v25);
          v27 = *v26;
          if (v67 == *v26)
          {
LABEL_41:
            *v26 = (llvm::Value *)-8192;
            v21[304] = vadd_s32(v21[304], (int32x2_t)0x1FFFFFFFFLL);
            v20 = v67;
          }
          else
          {
            v28 = 1;
            while (v27 != (llvm::Value *)-4096)
            {
              v29 = v25 + v28++;
              v25 = v29 & v24;
              v27 = *(llvm::Value **)(v22 + 16 * v25);
              if (v67 == v27)
              {
                v26 = (llvm::Value **)(v22 + 16 * v25);
                goto LABEL_41;
              }
            }
          }
          *((_BYTE *)v20 + 17) &= ~1u;
        }
      }
    }
  }
  sub_1C4D9F1A8(v63);
  if (v60 != (llvm::Value *)-8192 && v60 != (llvm::Value *)-4096 && v60 != 0)
  {
    v35 = v58 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v58 & 0xFFFFFFFFFFFFFFF8) = v59;
    if (v59)
    {
      *v59 = *v59 & 7 | v35;
    }
    else
    {
      v36 = v60;
      v37 = ***(int32x2_t ****)v60;
      v38 = (unint64_t)v37[303];
      if (v38 <= v35)
      {
        v39 = v37[305].u32[0];
        if (v38 + 16 * v39 > v35)
        {
          v40 = v39 - 1;
          LODWORD(v41) = v40 & ((v60 >> 4) ^ (v60 >> 9));
          v42 = (llvm::Value **)(v38 + 16 * v41);
          v43 = *v42;
          if (v60 == *v42)
          {
LABEL_62:
            *v42 = (llvm::Value *)-8192;
            v37[304] = vadd_s32(v37[304], (int32x2_t)0x1FFFFFFFFLL);
            v36 = v60;
          }
          else
          {
            v44 = 1;
            while (v43 != (llvm::Value *)-4096)
            {
              v45 = v41 + v44++;
              v41 = v45 & v40;
              v43 = *(llvm::Value **)(v38 + 16 * v41);
              if (v60 == v43)
              {
                v42 = (llvm::Value **)(v38 + 16 * v41);
                goto LABEL_62;
              }
            }
          }
          *((_BYTE *)v36 + 17) &= ~1u;
        }
      }
    }
  }
  return v6 + 5;
}

char **llvm::AssumptionCache::updateAffectedValues(llvm::AssumptionCache *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  _QWORD *inserted;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  int32x2_t ****v12;
  int32x2_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int32x2_t ****v19;
  int32x2_t *****v20;
  unsigned int v22;
  uint64_t v23;
  unint64_t *v24;
  int32x2_t ****v25;
  int v26;
  char *v27;
  uint64_t v28;
  _QWORD v29[65];

  v29[64] = *MEMORY[0x1E0C80C00];
  v27 = (char *)v29;
  v28 = 0x1000000000;
  sub_1C4D9BFC4(a2, *((_QWORD **)a1 + 1), (uint64_t)&v27);
  if ((_DWORD)v28)
  {
    v4 = v27;
    v5 = &v27[32 * v28];
    do
    {
      inserted = llvm::AssumptionCache::getOrInsertAffectedValues(a1, *((llvm::Value **)v4 + 2));
      v7 = (uint64_t)inserted;
      v8 = *((unsigned int *)inserted + 2);
      if ((_DWORD)v8)
      {
        v9 = 32 * v8;
        v10 = (_DWORD *)(*inserted + 24);
        while (*((_QWORD *)v10 - 1) != a2 || *v10 != *((_DWORD *)v4 + 6))
        {
          v10 += 8;
          v9 -= 32;
          if (!v9)
            goto LABEL_9;
        }
      }
      else
      {
LABEL_9:
        v23 = 4;
        v24 = 0;
        v25 = (int32x2_t ****)a2;
        if (a2 != -8192 && a2 != -4096 && a2)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v23);
        v26 = *((_DWORD *)v4 + 6);
        sub_1C4D9C1E8(v7, (unint64_t)&v23);
        if (v25 != (int32x2_t ****)-8192 && v25 != (int32x2_t ****)-4096 && v25)
        {
          v11 = v23 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8) = v24;
          if (v24)
          {
            *v24 = *v24 & 7 | v11;
          }
          else
          {
            v12 = v25;
            v13 = ***v25;
            v14 = (unint64_t)v13[303];
            if (v14 <= v11)
            {
              v15 = v13[305].u32[0];
              if (v14 + 16 * v15 > v11)
              {
                v22 = v15 - 1;
                LODWORD(v18) = v22 & ((v25 >> 4) ^ (v25 >> 9));
                v20 = (int32x2_t *****)(v14 + 16 * v18);
                v19 = *v20;
                if (v25 == *v20)
                {
LABEL_23:
                  *v20 = (int32x2_t ****)-8192;
                  v13[304] = vadd_s32(v13[304], (int32x2_t)0x1FFFFFFFFLL);
                  v12 = v25;
                }
                else
                {
                  v17 = 1;
                  while (v19 != (int32x2_t ****)-4096)
                  {
                    v16 = v18 + v17++;
                    v18 = v16 & v22;
                    v19 = *(int32x2_t *****)(v14 + 16 * v18);
                    if (v25 == v19)
                    {
                      v20 = (int32x2_t *****)(v14 + 16 * v18);
                      goto LABEL_23;
                    }
                  }
                }
                *((_BYTE *)v12 + 17) &= ~1u;
              }
            }
          }
        }
      }
      v4 += 32;
    }
    while (v4 != v5);
  }
  return sub_1C4D9F76C(&v27);
}

void sub_1C4D9BFC4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v5 = 0;
  v28 = a3;
  v6 = a1 - 8;
  while (1)
  {
    v7 = *(_DWORD *)(a1 + 20);
    v8 = v7 < 0 ? *(_QWORD *)(v6 - 32 * (v7 & 0x7FFFFFF)) : 0;
    if (v5 == (v8 >> 4))
      break;
    v9 = a1 - 32 * (v7 & 0x7FFFFFF);
    v10 = v9 - 8 - *(_QWORD *)(v9 - 8);
    v11 = v10 + 16 * v5;
    v12 = *(unsigned int *)(v11 + 8);
    if (*(_DWORD *)(v11 + 12) != (_DWORD)v12)
    {
      v13 = *(_QWORD *)(v10 + 16 * v5);
      if (*(_QWORD *)v13 != 6
        || ((v14 = *(_DWORD *)(v13 + 16), v15 = *(unsigned __int16 *)(v13 + 20), v14 == 1869506409)
          ? (v16 = v15 == 25970)
          : (v16 = 0),
            !v16))
      {
        sub_1C4D9E6C0(&v28, *(_QWORD *)(v9 + 32 * v12), v5);
      }
    }
    ++v5;
  }
  v17 = *(_QWORD *)(a1 - 32 * (v7 & 0x7FFFFFF));
  sub_1C4D9E6C0(&v28, v17, -1);
  if (v17)
  {
    if (*(_BYTE *)(v17 + 16) == 81)
    {
      v18 = *(_QWORD *)(v17 - 64);
      if (v18)
      {
        v19 = *(_QWORD *)(v17 - 32);
        if (v19)
        {
          v20 = *(_WORD *)(v17 + 18) & 0x3F;
          sub_1C4D9E6C0(&v28, *(_QWORD *)(v17 - 64), -1);
          sub_1C4D9E6C0(&v28, v19, -1);
          if (v20 == 36)
          {
            v21 = *(unsigned __int8 *)(v18 + 16);
            if (v21 == 5)
            {
              if (*(_WORD *)(v18 + 18) != 13)
                goto LABEL_31;
              v24 = (uint64_t *)(v18 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF));
              v22 = *v24;
              if (!*v24)
                goto LABEL_31;
              v23 = v24[4];
            }
            else
            {
              if (v21 != 41)
                goto LABEL_31;
              v22 = *(_QWORD *)(v18 - 64);
              if (!v22)
                goto LABEL_31;
              v23 = *(_QWORD *)(v18 - 32);
            }
            if (*(_BYTE *)(v23 + 16) == 16 && *(_BYTE *)(v19 + 16) == 16)
              sub_1C4D9E6C0(&v28, v22, -1);
          }
          else if (v20 == 32)
          {
            v27 = &v28;
            sub_1C4D9EAD0(&v27, v18);
            sub_1C4D9EAD0(&v27, v19);
          }
        }
      }
    }
  }
LABEL_31:
  if (a2)
  {
    v25 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 160))(*a2, v17);
    if (v25)
    {
      v26 = llvm::Value::stripInBoundsOffsets(v25, (void (*)(uint64_t, uint64_t))nullsub_1656, (uint64_t)&v27);
      sub_1C4D9E6C0(&v28, v26, -1);
    }
  }
}

void sub_1C4D9C1E8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v11 = v4 + 1;
    v12 = v5 + 32 * v4;
    if (v5 <= a2 && v12 > a2)
    {
      v14 = a2 - v5;
      sub_1C4D9E4C4(a1, v11);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v14;
    }
    else
    {
      sub_1C4D9E4C4(a1, v11);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(unsigned int *)(a1 + 8);
  v7 = v5 + 32 * v6;
  *(_QWORD *)v7 = 4;
  *(_QWORD *)(v7 + 8) = 0;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v7 + 16) = v8;
  if (v8)
  {
    if (v8 != -8192 && v8 != -4096)
    {
      v9 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)v9;
      *(_QWORD *)v9 = v7;
      *(_QWORD *)v7 = v9 | 4;
      v10 = *(uint64_t **)(v7 + 8);
      if (v10)
        *v10 = *v10 & 7 | (v7 + 8);
    }
  }
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

char **llvm::AssumptionCache::unregisterAssumption(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  int32x2_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  int32x2_t *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD v60[65];

  v60[64] = *MEMORY[0x1E0C80C00];
  v58 = (char *)v60;
  v59 = 0x1000000000;
  sub_1C4D9BFC4(a2, *(_QWORD **)(a1 + 8), (uint64_t)&v58);
  if ((_DWORD)v59)
  {
    v4 = v58;
    v5 = &v58[32 * v59];
    do
    {
      v57 = 0;
      v6 = sub_1C617A83C(*(_QWORD *)(a1 + 160), *(_DWORD *)(a1 + 176), *((_QWORD *)v4 + 2), &v57);
      v7 = *(_QWORD *)(a1 + 160);
      v8 = *(_DWORD *)(a1 + 176);
      if (v6)
        v9 = v57;
      else
        v9 = v7 + 88 * v8;
      if (v7 + 88 * v8 != v9)
      {
        v10 = *(unsigned int *)(v9 + 48);
        if (!(_DWORD)v10)
          goto LABEL_31;
        v11 = 0;
        v12 = 0;
        v13 = *(_QWORD **)(v9 + 40);
        v14 = &v13[4 * v10];
        do
        {
          v15 = v13[2];
          if (v15 == a2)
            v16 = 0;
          else
            v16 = v13[2];
          v11 |= v15 == a2;
          if (a2 && v15 == a2)
          {
            if ((a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v17 = *v13 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v17 = v13[1];
              v18 = (unint64_t *)v13[1];
              if (v18)
              {
                *v18 = *v18 & 7 | v17;
              }
              else
              {
                v19 = v13[2];
                v20 = ***(int32x2_t ****)v19;
                v21 = (unint64_t)v20[303];
                if (v21 <= v17)
                {
                  v22 = v20[305].u32[0];
                  if (v21 + 16 * v22 > v17)
                  {
                    v23 = v22 - 1;
                    LODWORD(v24) = v23 & ((v19 >> 4) ^ (v19 >> 9));
                    v25 = (uint64_t *)(v21 + 16 * v24);
                    v26 = *v25;
                    if (v19 == *v25)
                    {
LABEL_27:
                      *v25 = -8192;
                      v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
                      v19 = v13[2];
                    }
                    else
                    {
                      v27 = 1;
                      while (v26 != -4096)
                      {
                        v28 = v24 + v27++;
                        v24 = v28 & v23;
                        v26 = *(_QWORD *)(v21 + 16 * v24);
                        if (v19 == v26)
                        {
                          v25 = (uint64_t *)(v21 + 16 * v24);
                          goto LABEL_27;
                        }
                      }
                    }
                    *(_BYTE *)(v19 + 17) &= ~1u;
                  }
                }
              }
            }
            v16 = 0;
            v13[2] = 0;
            v11 = 1;
          }
          v12 |= v16 != 0;
          if ((v12 & v11 & 1) != 0)
            break;
          v13 += 4;
        }
        while (v13 != v14);
        if ((v12 & 1) == 0)
LABEL_31:
          sub_1C617A3B0((int32x2_t *)(a1 + 160), v9);
      }
      v4 += 32;
    }
    while (v4 != v5);
  }
  v29 = *(_QWORD **)(a1 + 16);
  v30 = *(unsigned int *)(a1 + 24);
  v31 = &v29[4 * v30];
  v32 = v29;
  if ((_DWORD)v30)
  {
    v33 = 32 * v30;
    v32 = *(_QWORD **)(a1 + 16);
    while (v32[2] != a2)
    {
      v32 += 4;
      v33 -= 32;
      if (!v33)
      {
        v32 = &v29[4 * v30];
        break;
      }
    }
  }
  if (v30 == ((char *)v32 - (char *)v29) >> 5 || (v34 = v32 + 4, v32 + 4 == v31))
  {
    v35 = (uint64_t)v32;
  }
  else
  {
    v35 = (uint64_t)v32;
    do
    {
      v36 = v34;
      v37 = v32[6];
      if (v37 != a2)
      {
        v38 = *(_QWORD *)(v35 + 16);
        if (v38 != v37)
        {
          v39 = v38 == -4096 || v38 == 0;
          if (!v39 && v38 != -8192)
          {
            v44 = *(_QWORD *)v35 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v44 = *(_QWORD *)(v35 + 8);
            v45 = *(unint64_t **)(v35 + 8);
            if (v45)
            {
              *v45 = *v45 & 7 | v44;
            }
            else
            {
              v46 = *(_QWORD *)(v35 + 16);
              v47 = ***(int32x2_t ****)v46;
              v48 = (unint64_t)v47[303];
              if (v48 <= v44)
              {
                v49 = v47[305].u32[0];
                if (v48 + 16 * v49 > v44)
                {
                  v50 = v49 - 1;
                  LODWORD(v51) = v50 & ((v46 >> 4) ^ (v46 >> 9));
                  v52 = (uint64_t *)(v48 + 16 * v51);
                  v53 = *v52;
                  if (v46 == *v52)
                  {
LABEL_67:
                    *v52 = -8192;
                    v47[304] = vadd_s32(v47[304], (int32x2_t)0x1FFFFFFFFLL);
                    v46 = *(_QWORD *)(v35 + 16);
                  }
                  else
                  {
                    v54 = 1;
                    while (v53 != -4096)
                    {
                      v55 = v51 + v54++;
                      v51 = v55 & v50;
                      v53 = *(_QWORD *)(v48 + 16 * v51);
                      if (v46 == v53)
                      {
                        v52 = (uint64_t *)(v48 + 16 * v51);
                        goto LABEL_67;
                      }
                    }
                  }
                  *(_BYTE *)(v46 + 17) &= ~1u;
                }
              }
            }
            v37 = v32[6];
          }
          *(_QWORD *)(v35 + 16) = v37;
          if (v37 != -4096 && v37 != -8192 && v37 != 0)
          {
            v41 = *v36;
            v42 = (_QWORD *)(*v36 & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)(v35 + 8) = *v42;
            *v42 = v35;
            *(_QWORD *)v35 = v41 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)v35 & 7;
            v43 = *(uint64_t **)(v35 + 8);
            if (v43)
              *v43 = *v43 & 7 | (v35 + 8);
          }
        }
        *(_DWORD *)(v35 + 24) = *((_DWORD *)v32 + 14);
        v35 += 32;
      }
      v34 = v36 + 4;
      v32 = v36;
    }
    while (v36 + 4 != v31);
    v29 = *(_QWORD **)(a1 + 16);
    v30 = *(unsigned int *)(a1 + 24);
  }
  sub_1C617A8D8((uint64_t *)(a1 + 16), v35, (uint64_t)&v29[4 * v30]);
  return sub_1C4D9F76C(&v58);
}

void llvm::AssumptionCache::AffectedValueCallbackVH::deleted(llvm::AssumptionCache::AffectedValueCallbackVH *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v5;
  int32x2_t ****v6;
  int32x2_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x2_t *****v12;
  int32x2_t ****v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t *v17;
  int32x2_t ****v18;
  uint64_t v19;

  v1 = *((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 4) + 160;
  v16 = 2;
  v17 = 0;
  v18 = (int32x2_t ****)v1;
  if (v1 != -8192 && v1 != -4096 && v1 != 0)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v16);
    v1 = (uint64_t)v18;
  }
  v19 = 0;
  sub_1C4D9C858(v2, v1);
  if (v18 != (int32x2_t ****)-8192 && v18 != (int32x2_t ****)-4096 && v18 != 0)
  {
    v5 = v16 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8) = v17;
    if (v17)
    {
      *v17 = *v17 & 7 | v5;
    }
    else
    {
      v6 = v18;
      v7 = ***v18;
      v8 = (unint64_t)v7[303];
      if (v8 <= v5)
      {
        v9 = v7[305].u32[0];
        if (v8 + 16 * v9 > v5)
        {
          v10 = v9 - 1;
          LODWORD(v11) = v10 & ((v18 >> 4) ^ (v18 >> 9));
          v12 = (int32x2_t *****)(v8 + 16 * v11);
          v13 = *v12;
          if (v18 == *v12)
          {
LABEL_20:
            *v12 = (int32x2_t ****)-8192;
            v7[304] = vadd_s32(v7[304], (int32x2_t)0x1FFFFFFFFLL);
            v6 = v18;
          }
          else
          {
            v14 = 1;
            while (v13 != (int32x2_t ****)-4096)
            {
              v15 = v11 + v14++;
              v11 = v15 & v10;
              v13 = *(int32x2_t *****)(v8 + 16 * v11);
              if (v18 == v13)
              {
                v12 = (int32x2_t *****)(v8 + 16 * v11);
                goto LABEL_20;
              }
            }
          }
          *((_BYTE *)v6 + 17) &= ~1u;
        }
      }
    }
  }
}

int32x2_t sub_1C4D9C858(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  v19 = 0;
  if (sub_1C4D9F2EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v19))
  {
    v4 = (_QWORD *)v19;
    sub_1C4D9F1A8((char **)(v19 + 40));
    v5 = v4[3];
    if (v5 != -8192)
    {
      if (v5 != -4096 && v5 != 0)
      {
        v7 = v4[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v7 = v4[2];
        v8 = (unint64_t *)v4[2];
        if (v8)
        {
          *v8 = *v8 & 7 | v7;
        }
        else
        {
          v9 = v4[3];
          v10 = ***(int32x2_t ****)v9;
          v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              v15 = (uint64_t *)(v11 + 16 * v14);
              v16 = *v15;
              if (v9 == *v15)
              {
LABEL_19:
                *v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                v9 = v4[3];
              }
              else
              {
                v17 = 1;
                while (v16 != -4096)
                {
                  v18 = v14 + v17++;
                  v14 = v18 & v13;
                  v16 = *(_QWORD *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_19;
                  }
                }
              }
              *(_BYTE *)(v9 + 17) &= ~1u;
            }
          }
        }
      }
      v4[3] = -8192;
    }
    v4[4] = 0;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void llvm::AssumptionCache::transferAffectedValuesInCache(llvm::AssumptionCache *this, llvm::Value *a2, llvm::Value *a3)
{
  _QWORD *inserted;
  llvm::Value *v6;
  uint64_t v7;
  unint64_t v8;
  llvm::Value *v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  llvm::Value **v15;
  llvm::Value *v16;
  int v17;
  int v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  llvm::Value *v33;
  int32x2_t *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  llvm::Value **v39;
  llvm::Value *v40;
  int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;

  inserted = llvm::AssumptionCache::getOrInsertAffectedValues(this, a3);
  v46 = 2;
  v47 = 0;
  v48 = a2;
  v6 = a2;
  if (a2 != (llvm::Value *)-8192)
  {
    v6 = a2;
    if (a2 != (llvm::Value *)-4096)
    {
      v6 = a2;
      if (a2)
      {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v46);
        v6 = v48;
      }
    }
  }
  v49 = 0;
  v50 = 0;
  if ((sub_1C4D9F2EC(*((_QWORD *)this + 20), *((_DWORD *)this + 44), (uint64_t)v6, &v50) & 1) != 0)
    v7 = v50;
  else
    v7 = *((_QWORD *)this + 20) + 88 * *((unsigned int *)this + 44);
  if (v48 != (llvm::Value *)-8192 && v48 != (llvm::Value *)-4096 && v48)
  {
    v8 = v46 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF8) = v47;
    if (v47)
    {
      *v47 = *v47 & 7 | v8;
    }
    else
    {
      v9 = v48;
      v10 = ***(int32x2_t ****)v48;
      v11 = (unint64_t)v10[303];
      if (v11 <= v8)
      {
        v12 = v10[305].u32[0];
        if (v11 + 16 * v12 > v8)
        {
          v13 = v12 - 1;
          LODWORD(v14) = v13 & ((v48 >> 4) ^ (v48 >> 9));
          v15 = (llvm::Value **)(v11 + 16 * v14);
          v16 = *v15;
          if (v48 == *v15)
          {
LABEL_18:
            *v15 = (llvm::Value *)-8192;
            v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
            v9 = v48;
          }
          else
          {
            v17 = 1;
            while (v16 != (llvm::Value *)-4096)
            {
              v18 = v14 + v17++;
              v14 = v18 & v13;
              v16 = *(llvm::Value **)(v11 + 16 * v14);
              if (v48 == v16)
              {
                v15 = (llvm::Value **)(v11 + 16 * v14);
                goto LABEL_18;
              }
            }
          }
          *((_BYTE *)v9 + 17) &= ~1u;
        }
      }
    }
  }
  if (v7 != *((_QWORD *)this + 20) + 88 * *((unsigned int *)this + 44))
  {
    v19 = (char *)this + 160;
    v20 = *(unsigned int *)(v7 + 48);
    if ((_DWORD)v20)
    {
      v21 = *(_QWORD *)(v7 + 40);
      v22 = v21 + 32 * v20;
      v23 = *((_DWORD *)inserted + 2);
      do
      {
        v24 = *inserted;
        v25 = *inserted;
        if (v23)
        {
          v43 = 32 * v23;
          v25 = *inserted;
          while (*(_QWORD *)(v25 + 16) != *(_QWORD *)(v21 + 16))
          {
            v25 += 32;
            v43 -= 32;
            if (!v43)
            {
              v25 = *inserted + 32 * v23;
              break;
            }
          }
        }
        if (v23 == (uint64_t)(v25 - v24) >> 5)
        {
          v26 = v21;
          if (v23 >= *((_DWORD *)inserted + 3))
          {
            v44 = v23 + 1;
            if (v24 <= v21 && *inserted + 32 * (unint64_t)v23 > v21)
            {
              v45 = v21 - v24;
              sub_1C4D9E4C4((uint64_t)inserted, v44);
              v24 = *inserted;
              v26 = *inserted + v45;
            }
            else
            {
              sub_1C4D9E4C4((uint64_t)inserted, v44);
              v24 = *inserted;
              v26 = v21;
            }
          }
          v27 = *((unsigned int *)inserted + 2);
          v28 = v24 + 32 * v27;
          *(_QWORD *)v28 = 4;
          *(_QWORD *)(v28 + 8) = 0;
          v29 = *(_QWORD *)(v26 + 16);
          *(_QWORD *)(v28 + 16) = v29;
          if (v29)
          {
            if (v29 != -8192 && v29 != -4096)
            {
              v30 = *(_QWORD *)v26 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v28 + 8) = *(_QWORD *)v30;
              *(_QWORD *)v30 = v28;
              *(_QWORD *)v28 = v30 | 4;
              v31 = *(uint64_t **)(v28 + 8);
              if (v31)
                *v31 = *v31 & 7 | (v28 + 8);
            }
          }
          *(_DWORD *)(v28 + 24) = *(_DWORD *)(v26 + 24);
          v23 = v27 + 1;
          *((_DWORD *)inserted + 2) = v23;
        }
        v21 += 32;
      }
      while (v21 != v22);
    }
    v46 = 2;
    v47 = 0;
    v48 = a2;
    if (a2 != (llvm::Value *)-8192 && a2 != (llvm::Value *)-4096 && a2)
    {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v46);
      a2 = v48;
    }
    v49 = 0;
    sub_1C4D9C858((uint64_t)v19, (uint64_t)a2);
    if (v48 != (llvm::Value *)-8192 && v48 != (llvm::Value *)-4096 && v48)
    {
      v32 = v46 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v46 & 0xFFFFFFFFFFFFFFF8) = v47;
      if (v47)
      {
        *v47 = *v47 & 7 | v32;
      }
      else
      {
        v33 = v48;
        v34 = ***(int32x2_t ****)v48;
        v35 = (unint64_t)v34[303];
        if (v35 <= v32)
        {
          v36 = v34[305].u32[0];
          if (v35 + 16 * v36 > v32)
          {
            v37 = v36 - 1;
            LODWORD(v38) = v37 & ((v48 >> 4) ^ (v48 >> 9));
            v39 = (llvm::Value **)(v35 + 16 * v38);
            v40 = *v39;
            if (v48 == *v39)
            {
LABEL_49:
              *v39 = (llvm::Value *)-8192;
              v34[304] = vadd_s32(v34[304], (int32x2_t)0x1FFFFFFFFLL);
              v33 = v48;
            }
            else
            {
              v41 = 1;
              while (v40 != (llvm::Value *)-4096)
              {
                v42 = v38 + v41++;
                v38 = v42 & v37;
                v40 = *(llvm::Value **)(v35 + 16 * v38);
                if (v48 == v40)
                {
                  v39 = (llvm::Value **)(v35 + 16 * v38);
                  goto LABEL_49;
                }
              }
            }
            *((_BYTE *)v33 + 17) &= ~1u;
          }
        }
      }
    }
  }
}

void llvm::AssumptionCache::AffectedValueCallbackVH::allUsesReplacedWith(llvm::AssumptionCache **this, llvm::Value *a2)
{
  unsigned int v2;

  v2 = *((unsigned __int8 *)a2 + 16);
  if (v2 > 0x1B || v2 == 21)
    llvm::AssumptionCache::transferAffectedValuesInCache(this[4], this[3], a2);
}

void llvm::AssumptionCache::scanFunction(llvm::AssumptionCache *this)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t j;
  uint64_t v7;
  unint64_t v8;
  int32x2_t ****v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int32x2_t *****v15;
  int32x2_t ****v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  int32x2_t ****v25;
  int v26;

  v2 = *(_QWORD *)this + 72;
  for (i = *(_QWORD *)(*(_QWORD *)this + 80); i != v2; i = *(_QWORD *)(i + 8))
  {
    v4 = i - 24;
    if (!i)
      v4 = 0;
    v5 = v4 + 40;
    for (j = *(_QWORD *)(v4 + 48); j != v5; j = *(_QWORD *)(j + 8))
    {
      if (j)
        v7 = j - 24;
      else
        v7 = 0;
      if (sub_1C4D9F8B4(v7))
      {
        v23 = 4;
        v24 = 0;
        v25 = (int32x2_t ****)v7;
        if (v7 != -8192 && v7 != -4096 && v7)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v23);
        v26 = -1;
        sub_1C4D9C1E8((uint64_t)this + 16, (unint64_t)&v23);
        if (v25 != (int32x2_t ****)-8192 && v25 != (int32x2_t ****)-4096 && v25)
        {
          v8 = v23 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8) = v24;
          if (v24)
          {
            *v24 = *v24 & 7 | v8;
          }
          else
          {
            v9 = v25;
            v10 = ***v25;
            v11 = (unint64_t)v10[303];
            if (v11 <= v8)
            {
              v12 = v10[305].u32[0];
              if (v11 + 16 * v12 > v8)
              {
                v13 = v12 - 1;
                LODWORD(v14) = v13 & ((v25 >> 4) ^ (v25 >> 9));
                v15 = (int32x2_t *****)(v11 + 16 * v14);
                v16 = *v15;
                if (v25 == *v15)
                {
LABEL_25:
                  *v15 = (int32x2_t ****)-8192;
                  v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                  v9 = v25;
                }
                else
                {
                  v17 = 1;
                  while (v16 != (int32x2_t ****)-4096)
                  {
                    v18 = v14 + v17++;
                    v14 = v18 & v13;
                    v16 = *(int32x2_t *****)(v11 + 16 * v14);
                    if (v25 == v16)
                    {
                      v15 = (int32x2_t *****)(v11 + 16 * v14);
                      goto LABEL_25;
                    }
                  }
                }
                *((_BYTE *)v9 + 17) &= ~1u;
              }
            }
          }
        }
      }
    }
  }
  *((_BYTE *)this + 184) = 1;
  v19 = *((unsigned int *)this + 6);
  if ((_DWORD)v19)
  {
    v20 = 32 * v19;
    v21 = (uint64_t *)(*((_QWORD *)this + 2) + 16);
    do
    {
      v22 = *v21;
      v21 += 4;
      llvm::AssumptionCache::updateAffectedValues(this, v22);
      v20 -= 32;
    }
    while (v20);
  }
}

char **llvm::AssumptionCache::registerAssumption(char **result, uint64_t a2)
{
  llvm::AssumptionCache *v3;
  uint64_t v4;
  unint64_t v5;
  int32x2_t ****v6;
  int32x2_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x2_t *****v12;
  int32x2_t ****v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t *v17;
  int32x2_t ****v18;
  int v19;

  if (*((_BYTE *)result + 184))
  {
    v3 = (llvm::AssumptionCache *)result;
    v4 = (uint64_t)(result + 2);
    v16 = 4;
    v17 = 0;
    v18 = (int32x2_t ****)a2;
    if (a2 != -8192 && a2 != -4096 && a2)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v16);
    v19 = -1;
    sub_1C4D9C1E8(v4, (unint64_t)&v16);
    if (v18 != (int32x2_t ****)-8192 && v18 != (int32x2_t ****)-4096 && v18)
    {
      v5 = v16 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8) = v17;
      if (v17)
      {
        *v17 = *v17 & 7 | v5;
      }
      else
      {
        v6 = v18;
        v7 = ***v18;
        v8 = (unint64_t)v7[303];
        if (v8 <= v5)
        {
          v9 = v7[305].u32[0];
          if (v8 + 16 * v9 > v5)
          {
            v10 = v9 - 1;
            LODWORD(v11) = v10 & ((v18 >> 4) ^ (v18 >> 9));
            v12 = (int32x2_t *****)(v8 + 16 * v11);
            v13 = *v12;
            if (v18 == *v12)
            {
LABEL_17:
              *v12 = (int32x2_t ****)-8192;
              v7[304] = vadd_s32(v7[304], (int32x2_t)0x1FFFFFFFFLL);
              v6 = v18;
            }
            else
            {
              v14 = 1;
              while (v13 != (int32x2_t ****)-4096)
              {
                v15 = v11 + v14++;
                v11 = v15 & v10;
                v13 = *(int32x2_t *****)(v8 + 16 * v11);
                if (v18 == v13)
                {
                  v12 = (int32x2_t *****)(v8 + 16 * v11);
                  goto LABEL_17;
                }
              }
            }
            *((_BYTE *)v6 + 17) &= ~1u;
          }
        }
      }
    }
    return llvm::AssumptionCache::updateAffectedValues(v3, a2);
  }
  return result;
}

double llvm::AssumptionAnalysis::run@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t ResultImpl;
  double result;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, a1);
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = ResultImpl + 8;
  *(_QWORD *)(a3 + 16) = a3 + 32;
  *(_QWORD *)&result = 0x400000000;
  *(_QWORD *)(a3 + 24) = 0x400000000;
  *(_BYTE *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  *(_DWORD *)(a3 + 176) = 0;
  return result;
}

int32x2_t llvm::AssumptionCacheTracker::FunctionCallbackVH::deleted(llvm::AssumptionCacheTracker::FunctionCallbackVH *this)
{
  int32x2_t *v1;
  int32x2_t v2;
  unsigned __int32 v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x2_t result;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  int32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;

  v1 = (int32x2_t *)*((_QWORD *)this + 4);
  v2 = v1[4];
  v3 = v1[6].u32[0];
  if (v3)
  {
    v4 = *((_QWORD *)this + 3);
    v5 = ((v4 >> 4) ^ (v4 >> 9)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)&v2 + 48 * v5);
    v7 = v6[3];
    if (v4 == v7)
      goto LABEL_3;
    v24 = 1;
    while (v7 != -4096)
    {
      v25 = v5 + v24++;
      v5 = v25 & (v3 - 1);
      v6 = (_QWORD *)(*(_QWORD *)&v2 + 48 * v5);
      v7 = v6[3];
      if (v4 == v7)
        goto LABEL_3;
    }
  }
  v6 = (_QWORD *)(*(_QWORD *)&v2 + 48 * v3);
LABEL_3:
  if ((_QWORD *)(*(_QWORD *)&v2 + 48 * v3) != v6)
  {
    v8 = v6[5];
    v6[5] = 0;
    if (v8)
      sub_1C4D9F9A0((uint64_t)(v6 + 5), v8);
    v9 = v6[3];
    if (v9 != -8192)
    {
      if (v9 != -4096 && v9 != 0)
      {
        v12 = v6[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v12 = v6[2];
        v13 = (unint64_t *)v6[2];
        if (v13)
        {
          *v13 = *v13 & 7 | v12;
        }
        else
        {
          v14 = v6[3];
          v15 = ***(int32x2_t ****)v14;
          v16 = (unint64_t)v15[303];
          if (v16 <= v12)
          {
            v17 = v15[305].u32[0];
            if (v16 + 16 * v17 > v12)
            {
              v18 = v17 - 1;
              LODWORD(v19) = v18 & ((v14 >> 4) ^ (v14 >> 9));
              v20 = (uint64_t *)(v16 + 16 * v19);
              v21 = *v20;
              if (v14 == *v20)
              {
LABEL_23:
                *v20 = -8192;
                v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
                v14 = v6[3];
              }
              else
              {
                v22 = 1;
                while (v21 != -4096)
                {
                  v23 = v19 + v22++;
                  v19 = v23 & v18;
                  v21 = *(_QWORD *)(v16 + 16 * v19);
                  if (v14 == v21)
                  {
                    v20 = (uint64_t *)(v16 + 16 * v19);
                    goto LABEL_23;
                  }
                }
              }
              *(_BYTE *)(v14 + 17) &= ~1u;
            }
          }
        }
      }
      v6[3] = -8192;
    }
    v6[4] = 0;
    result = vadd_s32(v1[5], (int32x2_t)0x1FFFFFFFFLL);
    v1[5] = result;
  }
  return result;
}

uint64_t llvm::AssumptionCacheTracker::getAssumptionCache(llvm::AssumptionCacheTracker *this, llvm::Function *a2)
{
  uint64_t *v2;
  uint64_t (***v3)(llvm::CallbackVH *__hidden);
  uint64_t v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  llvm::Function *v11;
  uint64_t AnalysisPass;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)(llvm::CallbackVH *__hidden);
  uint64_t (**v18)(llvm::CallbackVH *__hidden);
  uint64_t (**v19)(llvm::CallbackVH *__hidden);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int32x2_t ****v24;
  int32x2_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int32x2_t *****v30;
  int32x2_t ****v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unint64_t v37;
  llvm::Function *v38;
  int32x2_t *v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  llvm::Function **v44;
  llvm::Function *v45;
  int v46;
  int v47;
  uint64_t (**v48)(llvm::CallbackVH *__hidden);
  uint64_t v49;
  unint64_t *v50;
  llvm::Function *v51;
  llvm::AssumptionCacheTracker *v52;
  uint64_t v53[3];
  uint64_t (**v54)(llvm::CallbackVH *__hidden);
  unint64_t v55;
  unint64_t *v56;
  int32x2_t ****v57;
  llvm::AssumptionCacheTracker *v58;
  uint64_t v59[3];
  int v60;

  v7 = (char *)this + 32;
  v6 = *((_QWORD *)this + 4);
  v8 = *((_DWORD *)this + 12);
  if (v8)
  {
    v9 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v10 = v6 + 48 * v9;
    v11 = *(llvm::Function **)(v10 + 24);
    if (v11 == a2)
      goto LABEL_3;
    v34 = 1;
    while (v11 != (llvm::Function *)-4096)
    {
      v35 = v9 + v34++;
      v9 = v35 & (v8 - 1);
      v10 = v6 + 48 * v9;
      v11 = *(llvm::Function **)(v10 + 24);
      if (v11 == a2)
        goto LABEL_3;
    }
  }
  v10 = v6 + 48 * v8;
LABEL_3:
  if (v10 != v6 + 48 * v8)
    return *(_QWORD *)(v10 + 40);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::TargetTransformInfoWrapperPass::ID, 1);
  if (AnalysisPass)
  {
    v14 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetTransformInfoWrapperPass::ID);
    if (v14)
    {
      v15 = v14;
      v54 = 0;
      v55 = 0;
      LODWORD(v56) = 0;
      v57 = 0;
      v58 = 0;
      LODWORD(v59[0]) = 0;
      v59[1] = 0;
      v59[2] = 0;
      v60 = 0;
      v16 = *(_QWORD *)(v14 + 56);
      if (v16)
      {
        v2 = (uint64_t *)&v57;
        (*(void (**)(uint64_t (***__return_ptr)(llvm::CallbackVH *__hidden), uint64_t, llvm::Function *))(*(_QWORD *)v16 + 48))(&v48, v16, a2);
        v3 = (uint64_t (***)(llvm::CallbackVH *__hidden))(v15 + 64);
        v17 = v48;
        if (!*(_BYTE *)(v15 + 72))
        {
          *(_QWORD *)(v15 + 64) = v48;
          *(_BYTE *)(v15 + 72) = 1;
LABEL_11:
          MEMORY[0x1CAA32FB4](0, 8);
          sub_1C4D8B440(v2);
          sub_1C4D8B52C((uint64_t *)&v54);
          goto LABEL_13;
        }
        v48 = 0;
        v18 = *v3;
        *v3 = v17;
        if (!v18)
          goto LABEL_11;
        (*((void (**)(uint64_t (**)(llvm::CallbackVH *__hidden)))*v18 + 1))(v18);
        v19 = v48;
        v48 = 0;
        if (!v19)
          goto LABEL_11;
      }
      else
      {
        sub_1C485C2F0();
      }
      (*((void (**)(uint64_t (**)(llvm::CallbackVH *__hidden)))*v19 + 1))(v19);
      goto LABEL_11;
    }
  }
  v3 = 0;
LABEL_13:
  v49 = 2;
  v50 = 0;
  v51 = a2;
  if (a2 != (llvm::Function *)-8192 && a2 != (llvm::Function *)-4096 && a2)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v49);
  v48 = off_1E8134778;
  v52 = this;
  v20 = operator new();
  *(_QWORD *)v20 = a2;
  *(_QWORD *)(v20 + 8) = v3;
  *(_QWORD *)(v20 + 16) = v20 + 32;
  *(_QWORD *)(v20 + 24) = 0x400000000;
  *(_BYTE *)(v20 + 184) = 0;
  *(_QWORD *)(v20 + 160) = 0;
  *(_QWORD *)(v20 + 168) = 0;
  *(_DWORD *)(v20 + 176) = 0;
  v21 = v49;
  v55 = v49 & 6;
  v56 = 0;
  v57 = (int32x2_t ****)v51;
  if (v51 != (llvm::Function *)-8192 && v51 != (llvm::Function *)-4096)
  {
    if (v51)
    {
      v56 = *(unint64_t **)(v49 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF8) = &v55;
      v55 = v21 & 0xFFFFFFFFFFFFFFFELL;
      if (v56)
        *v56 = *v56 & 7 | (unint64_t)&v56;
    }
  }
  v54 = off_1E8134778;
  v58 = v52;
  v59[0] = v20;
  sub_1C4D9FC80((uint64_t)v7, &v54, v59, (uint64_t)v53);
  v22 = v59[0];
  v59[0] = 0;
  if (v22)
    sub_1C4D9F9A0((uint64_t)v59, v22);
  if (v57 != (int32x2_t ****)-8192 && v57 != (int32x2_t ****)-4096 && v57)
  {
    v23 = v55 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF8) = v56;
    if (v56)
    {
      *v56 = *v56 & 7 | v23;
    }
    else
    {
      v24 = v57;
      v25 = ***v57;
      v26 = (unint64_t)v25[303];
      if (v26 <= v23)
      {
        v27 = v25[305].u32[0];
        if (v26 + 16 * v27 > v23)
        {
          v28 = v27 - 1;
          LODWORD(v29) = v28 & ((v57 >> 4) ^ (v57 >> 9));
          v30 = (int32x2_t *****)(v26 + 16 * v29);
          v31 = *v30;
          if (v57 == *v30)
          {
LABEL_35:
            *v30 = (int32x2_t ****)-8192;
            v25[304] = vadd_s32(v25[304], (int32x2_t)0x1FFFFFFFFLL);
            v24 = v57;
          }
          else
          {
            v32 = 1;
            while (v31 != (int32x2_t ****)-4096)
            {
              v33 = v29 + v32++;
              v29 = v33 & v28;
              v31 = *(int32x2_t *****)(v26 + 16 * v29);
              if (v57 == v31)
              {
                v30 = (int32x2_t *****)(v26 + 16 * v29);
                goto LABEL_35;
              }
            }
          }
          *((_BYTE *)v24 + 17) &= ~1u;
        }
      }
    }
  }
  if (v51 != (llvm::Function *)-8192 && v51 != (llvm::Function *)-4096 && v51 != 0)
  {
    v37 = v49 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF8) = v50;
    if (v50)
    {
      *v50 = *v50 & 7 | v37;
    }
    else
    {
      v38 = v51;
      v39 = ***(int32x2_t ****)v51;
      v40 = (unint64_t)v39[303];
      if (v40 <= v37)
      {
        v41 = v39[305].u32[0];
        if (v40 + 16 * v41 > v37)
        {
          v42 = v41 - 1;
          LODWORD(v43) = v42 & ((v51 >> 4) ^ (v51 >> 9));
          v44 = (llvm::Function **)(v40 + 16 * v43);
          v45 = *v44;
          if (v51 == *v44)
          {
LABEL_59:
            *v44 = (llvm::Function *)-8192;
            v39[304] = vadd_s32(v39[304], (int32x2_t)0x1FFFFFFFFLL);
            v38 = v51;
          }
          else
          {
            v46 = 1;
            while (v45 != (llvm::Function *)-4096)
            {
              v47 = v43 + v46++;
              v43 = v47 & v42;
              v45 = *(llvm::Function **)(v40 + 16 * v43);
              if (v51 == v45)
              {
                v44 = (llvm::Function **)(v40 + 16 * v43);
                goto LABEL_59;
              }
            }
          }
          *((_BYTE *)v38 + 17) &= ~1u;
        }
      }
    }
  }
  return *(_QWORD *)(v53[0] + 40);
}

void llvm::AssumptionCacheTracker::verifyAnalysis(llvm::AssumptionCacheTracker *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[32];

  if (byte_1ED7EFE60)
  {
    v22 = v26;
    v23 = v26;
    v24 = 4;
    v25 = 0;
    v2 = sub_1C617A604((uint64_t *)this + 4);
    v4 = *((_QWORD *)this + 4) + 48 * *((unsigned int *)this + 12);
    if (v4 != v2)
    {
      v5 = v2;
      v6 = v3;
      do
      {
        v7 = *(_QWORD *)(v5 + 40);
        if (!*(_BYTE *)(v7 + 184))
          llvm::AssumptionCache::scanFunction(*(llvm::AssumptionCache **)(v5 + 40));
        v8 = *(unsigned int *)(v7 + 24);
        if ((_DWORD)v8)
        {
          v9 = *(_QWORD *)(v7 + 16);
          v10 = 32 * v8;
          v11 = (uint64_t *)(v9 + 16);
          do
          {
            if (*v11)
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v22, *v11);
            v11 += 4;
            v10 -= 32;
          }
          while (v10);
        }
        v12 = *(_QWORD *)(v5 + 24);
        v13 = v12 + 72;
        for (i = *(_QWORD *)(v12 + 80); i != v13; i = *(_QWORD *)(i + 8))
        {
          v15 = i - 24;
          if (!i)
            v15 = 0;
          v16 = v15 + 40;
          for (j = *(_QWORD *)(v15 + 48); j != v16; j = *(_QWORD *)(j + 8))
          {
            if (j)
              v18 = j - 24;
            else
              v18 = 0;
            if (j)
            {
              if (*(_BYTE *)(v18 + 16) == 84)
              {
                v19 = *(_QWORD *)(v18 - 32);
                if (v19)
                {
                  if (!*(_BYTE *)(v19 + 16)
                    && *(_QWORD *)(v19 + 24) == *(_QWORD *)(v18 + 72)
                    && *(_DWORD *)(v19 + 36) == 7)
                  {
                    v20 = (char *)sub_1C477672C((uint64_t)&v22, v18);
                    if (v23 == v22)
                      v21 = (uint64_t *)((char *)&v24 + 4);
                    else
                      v21 = &v24;
                    if (v20 == &v23[8 * *(unsigned int *)v21])
                      llvm::report_fatal_error((llvm *)"Assumption in scanned function not in cache", (const char *)1);
                  }
                }
              }
            }
          }
        }
        while (1)
        {
          v5 += 48;
          if (v5 == v6)
            break;
          if ((*(_QWORD *)(v5 + 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_37;
        }
        v5 = v6;
LABEL_37:
        ;
      }
      while (v5 != v4);
      if (v23 != v22)
        free(v23);
    }
  }
}

void llvm::initializeAssumptionCacheTrackerPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82C6F8);
  if (v1 != -1)
  {
    v4[0] = sub_1C4D9DA70;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82C6F8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void llvm::AssumptionCacheTracker::~AssumptionCacheTracker(llvm::AssumptionCacheTracker *this)
{
  *(_QWORD *)this = &off_1E81346A8;
  sub_1C4D9F050((uint64_t)this + 32);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 4), 8);
  llvm::Pass::~Pass(this);
}

{
  *(_QWORD *)this = &off_1E81346A8;
  sub_1C4D9F050((uint64_t)this + 32);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 4), 8);
  llvm::Pass::~Pass(this);
}

{
  *(_QWORD *)this = &off_1E81346A8;
  sub_1C4D9F050((uint64_t)this + 32);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 4), 8);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4D9DA70(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Assumption Cache Tracker";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "assumption-cache-tracker";
  *(_QWORD *)(v2 + 24) = 24;
  *(_QWORD *)(v2 + 32) = &llvm::AssumptionCacheTracker::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::AssumptionCacheTracker>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4D9DB04(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  return 0;
}

void sub_1C4D9DB24(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 40);
  sub_1C4D9F050(a1 + 32);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 48))
  {
    *(_QWORD *)(a1 + 40) = 0;
    if ((_DWORD)v5)
    {
      v6 = 48 * v5;
      v7 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      do
      {
        *v7 = 0;
        v7[1] = -4096;
        *(v7 - 2) = off_1E8134778;
        *(v7 - 1) = 2;
        v7[2] = 0;
        v7 += 6;
        v6 -= 48;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*v2, 8);
    if ((_DWORD)v5)
    {
      v8 = (4 * (int)v5 / 3u + 1) | ((unint64_t)(4 * (int)v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *(_DWORD *)(a1 + 48) = v9;
      v10 = (char *)operator new(48 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = 0;
      v11 = *(unsigned int *)(a1 + 48);
      if ((_DWORD)v11)
      {
        v12 = 48 * v11;
        v13 = v10 + 16;
        do
        {
          *v13 = 0;
          v13[1] = -4096;
          *(v13 - 2) = off_1E8134778;
          *(v13 - 1) = 2;
          v13[2] = 0;
          v13 += 6;
          v12 -= 48;
        }
        while (v12);
      }
    }
    else
    {
      *v2 = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
    }
  }
}

uint64_t sub_1C4D9DC84(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  int32x2_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  int32x2_t *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  int32x2_t *v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  int v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  int32x2_t *v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  int v90;
  int v91;
  char *i;
  uint64_t v93;
  unint64_t v95;
  unint64_t *v96;
  uint64_t v97;
  int32x2_t *v98;
  unint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  int32x2_t *v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  int v122;
  int v123;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_1C617A77C((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v23 = *(char **)a1;
      if ((_DWORD)v5)
      {
        v24 = &v4[32 * v5];
        do
        {
          v25 = *((_QWORD *)v23 + 2);
          v26 = *((_QWORD *)v4 + 2);
          if (v25 != v26)
          {
            v27 = v25 == -4096 || v25 == 0;
            if (!v27 && v25 != -8192)
            {
              v32 = *(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v32 = *((_QWORD *)v23 + 1);
              v33 = (unint64_t *)*((_QWORD *)v23 + 1);
              if (v33)
              {
                *v33 = *v33 & 7 | v32;
              }
              else
              {
                v34 = *((_QWORD *)v23 + 2);
                v35 = ***(int32x2_t ****)v34;
                v36 = (unint64_t)v35[303];
                if (v36 <= v32)
                {
                  v37 = v35[305].u32[0];
                  if (v36 + 16 * v37 > v32)
                  {
                    v38 = v37 - 1;
                    LODWORD(v39) = v38 & ((v34 >> 4) ^ (v34 >> 9));
                    v40 = (uint64_t *)(v36 + 16 * v39);
                    v41 = *v40;
                    if (v34 == *v40)
                    {
LABEL_52:
                      *v40 = -8192;
                      v35[304] = vadd_s32(v35[304], (int32x2_t)0x1FFFFFFFFLL);
                      v34 = *((_QWORD *)v23 + 2);
                    }
                    else
                    {
                      v42 = 1;
                      while (v41 != -4096)
                      {
                        v43 = v39 + v42++;
                        v39 = v43 & v38;
                        v41 = *(_QWORD *)(v36 + 16 * v39);
                        if (v34 == v41)
                        {
                          v40 = (uint64_t *)(v36 + 16 * v39);
                          goto LABEL_52;
                        }
                      }
                    }
                    *(_BYTE *)(v34 + 17) &= ~1u;
                  }
                }
              }
              v26 = *((_QWORD *)v4 + 2);
            }
            *((_QWORD *)v23 + 2) = v26;
            if (v26 != -4096 && v26 != -8192 && v26 != 0)
            {
              v29 = *(_QWORD *)v4;
              v30 = (_QWORD *)(*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8);
              *((_QWORD *)v23 + 1) = *v30;
              *v30 = v23;
              *(_QWORD *)v23 = v29 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)v23 & 7;
              v31 = (unint64_t *)*((_QWORD *)v23 + 1);
              if (v31)
                *v31 = *v31 & 7 | (unint64_t)(v23 + 8);
            }
          }
          *((_DWORD *)v23 + 6) = *((_DWORD *)v4 + 6);
          v4 += 32;
          v23 += 32;
        }
        while (v4 != v24);
        v6 = *(unsigned int *)(a1 + 8);
        v44 = v23;
        v23 = *(char **)a1;
      }
      else
      {
        v44 = *(char **)a1;
      }
      for (i = &v23[32 * v6]; i != v44; i -= 32)
      {
        v93 = *((_QWORD *)i - 2);
        if (v93 != -8192 && v93 != -4096 && v93 != 0)
        {
          v95 = *((_QWORD *)i - 4) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v95 = *((_QWORD *)i - 3);
          v96 = (unint64_t *)*((_QWORD *)i - 3);
          if (v96)
          {
            *v96 = *v96 & 7 | v95;
          }
          else
          {
            v97 = *((_QWORD *)i - 2);
            v98 = ***(int32x2_t ****)v97;
            v99 = (unint64_t)v98[303];
            if (v99 <= v95)
            {
              v100 = v98[305].u32[0];
              if (v99 + 16 * v100 > v95)
              {
                v101 = v100 - 1;
                LODWORD(v102) = v101 & ((v97 >> 4) ^ (v97 >> 9));
                v103 = (uint64_t *)(v99 + 16 * v102);
                v104 = *v103;
                if (v97 == *v103)
                {
LABEL_136:
                  *v103 = -8192;
                  v98[304] = vadd_s32(v98[304], (int32x2_t)0x1FFFFFFFFLL);
                  v97 = *((_QWORD *)i - 2);
                }
                else
                {
                  v105 = 1;
                  while (v104 != -4096)
                  {
                    v106 = v102 + v105++;
                    v102 = v106 & v101;
                    v104 = *(_QWORD *)(v99 + 16 * v102);
                    if (v97 == v104)
                    {
                      v103 = (uint64_t *)(v99 + 16 * v102);
                      goto LABEL_136;
                    }
                  }
                }
                *(_BYTE *)(v97 + 17) &= ~1u;
              }
            }
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      v107 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v107)
      {
        v108 = *(char **)a2;
        v109 = *(_QWORD *)a2 + 32 * v107;
        do
        {
          v110 = *(_QWORD *)(v109 - 16);
          if (v110 != -8192 && v110 != -4096 && v110 != 0)
          {
            v112 = *(_QWORD *)(v109 - 32) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v112 = *(_QWORD *)(v109 - 24);
            v113 = *(unint64_t **)(v109 - 24);
            if (v113)
            {
              *v113 = *v113 & 7 | v112;
            }
            else
            {
              v114 = *(_QWORD *)(v109 - 16);
              v115 = ***(int32x2_t ****)v114;
              v116 = (unint64_t)v115[303];
              if (v116 <= v112)
              {
                v117 = v115[305].u32[0];
                if (v116 + 16 * v117 > v112)
                {
                  v118 = v117 - 1;
                  LODWORD(v119) = v118 & ((v114 >> 4) ^ (v114 >> 9));
                  v120 = (uint64_t *)(v116 + 16 * v119);
                  v121 = *v120;
                  if (v114 == *v120)
                  {
LABEL_157:
                    *v120 = -8192;
                    v115[304] = vadd_s32(v115[304], (int32x2_t)0x1FFFFFFFFLL);
                    v114 = *(_QWORD *)(v109 - 16);
                  }
                  else
                  {
                    v122 = 1;
                    while (v121 != -4096)
                    {
                      v123 = v119 + v122++;
                      v119 = v123 & v118;
                      v121 = *(_QWORD *)(v116 + 16 * v119);
                      if (v114 == v121)
                      {
                        v120 = (uint64_t *)(v116 + 16 * v119);
                        goto LABEL_157;
                      }
                    }
                  }
                  *(_BYTE *)(v114 + 17) &= ~1u;
                }
              }
            }
          }
          v109 -= 32;
        }
        while ((char *)v109 != v108);
      }
      goto LABEL_160;
    }
    if (*(_DWORD *)(a1 + 12) >= v5)
    {
      if ((_DWORD)v6)
      {
        v45 = &v4[32 * v6];
        v46 = *(char **)a1;
        do
        {
          v47 = *((_QWORD *)v46 + 2);
          v48 = *((_QWORD *)v4 + 2);
          if (v47 != v48)
          {
            v49 = v47 == -4096 || v47 == 0;
            if (!v49 && v47 != -8192)
            {
              v54 = *(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v54 = *((_QWORD *)v46 + 1);
              v55 = (unint64_t *)*((_QWORD *)v46 + 1);
              if (v55)
              {
                *v55 = *v55 & 7 | v54;
              }
              else
              {
                v56 = *((_QWORD *)v46 + 2);
                v57 = ***(int32x2_t ****)v56;
                v58 = (unint64_t)v57[303];
                if (v58 <= v54)
                {
                  v59 = v57[305].u32[0];
                  if (v58 + 16 * v59 > v54)
                  {
                    v60 = v59 - 1;
                    LODWORD(v61) = v60 & ((v56 >> 4) ^ (v56 >> 9));
                    v62 = (uint64_t *)(v58 + 16 * v61);
                    v63 = *v62;
                    if (v56 == *v62)
                    {
LABEL_82:
                      *v62 = -8192;
                      v57[304] = vadd_s32(v57[304], (int32x2_t)0x1FFFFFFFFLL);
                      v56 = *((_QWORD *)v46 + 2);
                    }
                    else
                    {
                      v64 = 1;
                      while (v63 != -4096)
                      {
                        v65 = v61 + v64++;
                        v61 = v65 & v60;
                        v63 = *(_QWORD *)(v58 + 16 * v61);
                        if (v56 == v63)
                        {
                          v62 = (uint64_t *)(v58 + 16 * v61);
                          goto LABEL_82;
                        }
                      }
                    }
                    *(_BYTE *)(v56 + 17) &= ~1u;
                  }
                }
              }
              v48 = *((_QWORD *)v4 + 2);
            }
            *((_QWORD *)v46 + 2) = v48;
            if (v48 != -4096 && v48 != -8192 && v48 != 0)
            {
              v51 = *(_QWORD *)v4;
              v52 = (_QWORD *)(*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8);
              *((_QWORD *)v46 + 1) = *v52;
              *v52 = v46;
              *(_QWORD *)v46 = v51 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)v46 & 7;
              v53 = (unint64_t *)*((_QWORD *)v46 + 1);
              if (v53)
                *v53 = *v53 & 7 | (unint64_t)(v46 + 8);
            }
          }
          *((_DWORD *)v46 + 6) = *((_DWORD *)v4 + 6);
          v4 += 32;
          v46 += 32;
        }
        while (v4 != v45);
        goto LABEL_88;
      }
    }
    else
    {
      if ((_DWORD)v6)
      {
        v7 = *(char **)a1;
        v8 = *(_QWORD *)a1 + 32 * v6;
        do
        {
          v9 = *(_QWORD *)(v8 - 16);
          if (v9 != -8192 && v9 != -4096 && v9 != 0)
          {
            v11 = *(_QWORD *)(v8 - 32) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v11 = *(_QWORD *)(v8 - 24);
            v12 = *(unint64_t **)(v8 - 24);
            if (v12)
            {
              *v12 = *v12 & 7 | v11;
            }
            else
            {
              v13 = *(_QWORD *)(v8 - 16);
              v14 = ***(int32x2_t ****)v13;
              v15 = (unint64_t)v14[303];
              if (v15 <= v11)
              {
                v16 = v14[305].u32[0];
                if (v15 + 16 * v16 > v11)
                {
                  v17 = v16 - 1;
                  LODWORD(v18) = v17 & ((v13 >> 4) ^ (v13 >> 9));
                  v19 = (uint64_t *)(v15 + 16 * v18);
                  v20 = *v19;
                  if (v13 == *v19)
                  {
LABEL_23:
                    *v19 = -8192;
                    v14[304] = vadd_s32(v14[304], (int32x2_t)0x1FFFFFFFFLL);
                    v13 = *(_QWORD *)(v8 - 16);
                  }
                  else
                  {
                    v21 = 1;
                    while (v20 != -4096)
                    {
                      v22 = v18 + v21++;
                      v18 = v22 & v17;
                      v20 = *(_QWORD *)(v15 + 16 * v18);
                      if (v13 == v20)
                      {
                        v19 = (uint64_t *)(v15 + 16 * v18);
                        goto LABEL_23;
                      }
                    }
                  }
                  *(_BYTE *)(v13 + 17) &= ~1u;
                }
              }
            }
          }
          v8 -= 32;
        }
        while ((char *)v8 != v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C4D9E4C4(a1, v5);
    }
    v6 = 0;
LABEL_88:
    v66 = *(char **)a2;
    v67 = *(unsigned int *)(a2 + 8);
    if (v6 != v67)
    {
      v68 = *(char **)a1;
      v69 = 32 * v6;
      v70 = *(_QWORD *)a1 + 8;
      v71 = 32 * v67;
      do
      {
        v72 = &v68[v69];
        *(_QWORD *)v72 = 4;
        *((_QWORD *)v72 + 1) = 0;
        v73 = *(_QWORD *)&v66[v69 + 16];
        *((_QWORD *)v72 + 2) = v73;
        if (v73)
        {
          if (v73 != -8192 && v73 != -4096)
          {
            v74 = *(_QWORD *)&v66[v69] & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)v72 + 1) = *(_QWORD *)v74;
            *(_QWORD *)v74 = v72;
            *(_QWORD *)v72 = v74 | 4;
            v75 = (uint64_t *)*((_QWORD *)v72 + 1);
            if (v75)
              *v75 = *v75 & 7 | (v69 + v70);
          }
        }
        *((_DWORD *)v72 + 6) = *(_DWORD *)&v66[v69 + 24];
        v68 += 32;
        v66 += 32;
        v70 += 32;
        v71 -= 32;
      }
      while (v69 != v71);
      v66 = *(char **)a2;
    }
    *(_DWORD *)(a1 + 8) = v5;
    v76 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v76)
    {
      v77 = &v66[32 * v76];
      do
      {
        v78 = *((_QWORD *)v77 - 2);
        if (v78 != -8192 && v78 != -4096 && v78 != 0)
        {
          v80 = *((_QWORD *)v77 - 4) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v80 = *((_QWORD *)v77 - 3);
          v81 = (unint64_t *)*((_QWORD *)v77 - 3);
          if (v81)
          {
            *v81 = *v81 & 7 | v80;
          }
          else
          {
            v82 = *((_QWORD *)v77 - 2);
            v83 = ***(int32x2_t ****)v82;
            v84 = (unint64_t)v83[303];
            if (v84 <= v80)
            {
              v85 = v83[305].u32[0];
              if (v84 + 16 * v85 > v80)
              {
                v86 = v85 - 1;
                LODWORD(v87) = v86 & ((v82 >> 4) ^ (v82 >> 9));
                v88 = (uint64_t *)(v84 + 16 * v87);
                v89 = *v88;
                if (v82 == *v88)
                {
LABEL_115:
                  *v88 = -8192;
                  v83[304] = vadd_s32(v83[304], (int32x2_t)0x1FFFFFFFFLL);
                  v82 = *((_QWORD *)v77 - 2);
                }
                else
                {
                  v90 = 1;
                  while (v89 != -4096)
                  {
                    v91 = v87 + v90++;
                    v87 = v91 & v86;
                    v89 = *(_QWORD *)(v84 + 16 * v87);
                    if (v82 == v89)
                    {
                      v88 = (uint64_t *)(v84 + 16 * v87);
                      goto LABEL_115;
                    }
                  }
                }
                *(_BYTE *)(v82 + 17) &= ~1u;
              }
            }
          }
        }
        v77 -= 32;
      }
      while (v77 != v66);
    }
LABEL_160:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

void sub_1C4D9E4C4(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 32, &v5);
  sub_1C4D9E534((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t *sub_1C4D9E534(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  int32x2_t *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;

  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *result;
    do
    {
      v5 = a2 + v3;
      *(_QWORD *)v5 = 4;
      *(_QWORD *)(v5 + 8) = 0;
      v6 = *(_QWORD *)(v4 + v3 + 16);
      *(_QWORD *)(v5 + 16) = v6;
      if (v6)
      {
        if (v6 != -8192 && v6 != -4096)
        {
          v7 = *(_QWORD *)(v4 + v3) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v5 + 8) = *(_QWORD *)v7;
          *(_QWORD *)v7 = v5;
          *(_QWORD *)v5 = v7 | 4;
          v8 = *(uint64_t **)(v5 + 8);
          if (v8)
            *v8 = *v8 & 7 | (a2 + 8 + v3);
        }
      }
      *(_DWORD *)(v5 + 24) = *(_DWORD *)(v4 + v3 + 24);
      v3 += 32;
    }
    while (32 * v2 != v3);
    v9 = *result;
    v10 = *result + 32 * v2;
    do
    {
      v11 = *(_QWORD *)(v10 - 16);
      if (v11 && v11 != -8192 && v11 != -4096)
      {
        v12 = *(_QWORD *)(v10 - 32) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v12 = *(_QWORD *)(v10 - 24);
        v13 = *(unint64_t **)(v10 - 24);
        if (v13)
        {
          *v13 = *v13 & 7 | v12;
        }
        else
        {
          v14 = *(_QWORD *)(v10 - 16);
          v15 = ***(int32x2_t ****)v14;
          v16 = (unint64_t)v15[303];
          if (v16 <= v12)
          {
            v17 = v15[305].u32[0];
            if (v16 + 16 * v17 > v12)
            {
              v18 = v17 - 1;
              LODWORD(v19) = v18 & ((v14 >> 4) ^ (v14 >> 9));
              v20 = (uint64_t *)(v16 + 16 * v19);
              v21 = *v20;
              if (v14 == *v20)
              {
LABEL_21:
                *v20 = -8192;
                v15[304] = vadd_s32(v15[304], (int32x2_t)0x1FFFFFFFFLL);
                v14 = *(_QWORD *)(v10 - 16);
              }
              else
              {
                v22 = 1;
                while (v21 != -4096)
                {
                  v23 = v19 + v22++;
                  v19 = v23 & v18;
                  v21 = *(_QWORD *)(v16 + 16 * v19);
                  if (v14 == v21)
                  {
                    v20 = (uint64_t *)(v16 + 16 * v19);
                    goto LABEL_21;
                  }
                }
              }
              *(_BYTE *)(v14 + 17) &= ~1u;
            }
          }
        }
      }
      v10 -= 32;
    }
    while (v10 != v9);
  }
  return result;
}

void sub_1C4D9E6C0(uint64_t *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  int32x2_t ****v10;
  int32x2_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int32x2_t *****v16;
  int32x2_t ****v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int32x2_t ****v22;
  int32x2_t *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int32x2_t *****v28;
  int32x2_t ****v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int32x2_t ****v45;
  int v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  int32x2_t ****v51;
  int v52;

  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 21)
  {
    v7 = *a1;
    v49 = 4;
    v50 = 0;
    v51 = (int32x2_t ****)a2;
    if (a2 != -8192 && a2 != -4096 && a2)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v49);
    v52 = a3;
    sub_1C4D9C1E8(v7, (unint64_t)&v49);
    if (v51 == (int32x2_t ****)-8192 || v51 == (int32x2_t ****)-4096 || !v51)
      return;
    v8 = v49 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF8) = v50;
    v9 = v50;
    if (!v50)
    {
      v10 = v51;
      v11 = ***v51;
      v12 = (unint64_t)v11[303];
      if (v12 <= v8)
      {
        v13 = v11[305].u32[0];
        if (v12 + 16 * v13 > v8)
        {
          v14 = v13 - 1;
          LODWORD(v15) = v14 & ((v51 >> 4) ^ (v51 >> 9));
          v16 = (int32x2_t *****)(v12 + 16 * v15);
          v17 = *v16;
          if (v51 != *v16)
          {
            v18 = 1;
            while (v17 != (int32x2_t ****)-4096)
            {
              v19 = v15 + v18++;
              v15 = v19 & v14;
              v17 = *(int32x2_t *****)(v12 + 16 * v15);
              if (v51 == v17)
                goto LABEL_16;
            }
            goto LABEL_18;
          }
LABEL_17:
          *v16 = (int32x2_t ****)-8192;
          v11[304] = vadd_s32(v11[304], (int32x2_t)0x1FFFFFFFFLL);
          v10 = v51;
LABEL_18:
          *((_BYTE *)v10 + 17) &= ~1u;
          return;
        }
      }
      return;
    }
LABEL_73:
    *v9 = *v9 & 7 | v8;
    return;
  }
  if (v6 < 0x1C)
    return;
  v20 = *a1;
  v49 = 4;
  v50 = 0;
  v51 = (int32x2_t ****)a2;
  if ((a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v49);
  v52 = a3;
  sub_1C4D9C1E8(v20, (unint64_t)&v49);
  if (v51 != (int32x2_t ****)-8192 && v51 != (int32x2_t ****)-4096 && v51)
  {
    v21 = v49 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF8) = v50;
    if (v50)
    {
      *v50 = *v50 & 7 | v21;
    }
    else
    {
      v22 = v51;
      v23 = ***v51;
      v24 = (unint64_t)v23[303];
      if (v24 <= v21)
      {
        v25 = v23[305].u32[0];
        if (v24 + 16 * v25 > v21)
        {
          v26 = v25 - 1;
          LODWORD(v27) = v26 & ((v51 >> 4) ^ (v51 >> 9));
          v28 = (int32x2_t *****)(v24 + 16 * v27);
          v29 = *v28;
          if (v51 == *v28)
          {
LABEL_33:
            *v28 = (int32x2_t ****)-8192;
            v23[304] = vadd_s32(v23[304], (int32x2_t)0x1FFFFFFFFLL);
            v22 = v51;
          }
          else
          {
            v30 = 1;
            while (v29 != (int32x2_t ****)-4096)
            {
              v31 = v27 + v30++;
              v27 = v31 & v26;
              v29 = *(int32x2_t *****)(v24 + 16 * v27);
              if (v51 == v29)
              {
                v28 = (int32x2_t *****)(v24 + 16 * v27);
                goto LABEL_33;
              }
            }
          }
          *((_BYTE *)v22 + 17) &= ~1u;
        }
      }
    }
  }
  v48 = 0;
  v32 = *(unsigned __int8 *)(a2 + 16);
  v33 = v32 - 28;
  v34 = v32 - 28;
  if (v32 <= 0x1B)
    v34 = *(unsigned __int16 *)(a2 + 18);
  if (v34 == 49)
  {
    v35 = *(_DWORD *)(a2 + 20);
    v36 = (v35 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v35 & 0x7FFFFFF));
    v37 = *v36;
    if (v37)
      goto LABEL_50;
  }
  if (v32 <= 0x1B)
    v33 = *(unsigned __int16 *)(a2 + 18);
  if (v33 == 47
    && ((v38 = *(_DWORD *)(a2 + 20), (v38 & 0x40000000) != 0)
      ? (v39 = *(uint64_t **)(a2 - 8))
      : (v39 = (uint64_t *)(a2 - 32 * (v38 & 0x7FFFFFF))),
        (v37 = *v39) != 0))
  {
LABEL_50:
    v48 = v37;
  }
  else
  {
    v49 = (unint64_t)&v48;
    if (!sub_1C4D9EC28((_QWORD **)&v49, 30, a2))
      return;
    v37 = v48;
  }
  v40 = *(unsigned __int8 *)(v37 + 16);
  if (v40 > 0x1B || v40 == 21)
  {
    v42 = *a1;
    v49 = 4;
    v50 = 0;
    v51 = (int32x2_t ****)v37;
    if (v37 != -8192 && v37 != -4096 && v37)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v49);
    v52 = a3;
    sub_1C4D9C1E8(v42, (unint64_t)&v49);
    if (v51 != (int32x2_t ****)-8192 && v51 != (int32x2_t ****)-4096 && v51)
    {
      v8 = v49 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF8) = v50;
      v9 = v50;
      if (v50)
        goto LABEL_73;
      v10 = v51;
      v11 = ***v51;
      v12 = (unint64_t)v11[303];
      if (v12 <= v8)
      {
        v43 = v11[305].u32[0];
        if (v12 + 16 * v43 > v8)
        {
          v44 = v43 - 1;
          LODWORD(v15) = v44 & ((v51 >> 4) ^ (v51 >> 9));
          v16 = (int32x2_t *****)(v12 + 16 * v15);
          v45 = *v16;
          if (v51 != *v16)
          {
            v46 = 1;
            while (v45 != (int32x2_t ****)-4096)
            {
              v47 = v15 + v46++;
              v15 = v47 & v44;
              v45 = *(int32x2_t *****)(v12 + 16 * v15);
              if (v51 == v45)
              {
LABEL_16:
                v16 = (int32x2_t *****)(v12 + 16 * v15);
                goto LABEL_17;
              }
            }
            goto LABEL_18;
          }
          goto LABEL_17;
        }
      }
    }
  }
}

void sub_1C4D9EAD0(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;

  v2 = a2;
  v15 = 0;
  v14 = &v15;
  if (sub_1C4D9EC28(&v14, 30, a2))
  {
    sub_1C4D9E6C0(*a1, v15, -1);
    v2 = v15;
  }
  v4 = *(unsigned __int8 *)(v2 + 16);
  if (!v2 || v4 < 0x1C)
  {
    if (v4 != 5)
      return;
    v9 = *(unsigned __int16 *)(v2 + 18);
    if ((v9 - 28) <= 2)
    {
      v5 = *(_DWORD *)(v2 + 20);
      goto LABEL_12;
    }
    if ((v9 - 25) > 2)
      return;
    v11 = *(_DWORD *)(v2 + 20);
    goto LABEL_22;
  }
  if (v4 - 56 > 2)
  {
    if (v4 - 53 > 2)
      return;
    v11 = *(_DWORD *)(v2 + 20);
    if ((v11 & 0x40000000) != 0)
    {
      v12 = *(uint64_t **)(v2 - 8);
      v10 = *v12;
      if (!*v12)
        return;
      v15 = *v12;
      v13 = *(uint64_t **)(v2 - 8);
      goto LABEL_24;
    }
LABEL_22:
    v13 = (uint64_t *)(v2 - 32 * (v11 & 0x7FFFFFF));
    v10 = *v13;
    if (!*v13)
      return;
    v15 = *v13;
LABEL_24:
    if (*(_BYTE *)(v13[4] + 16) != 16)
      return;
    goto LABEL_25;
  }
  v5 = *(_DWORD *)(v2 + 20);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_12:
    v8 = (uint64_t *)(v2 - 32 * (v5 & 0x7FFFFFF));
    v7 = *v8;
    if (!*v8)
      return;
    v15 = *v8;
    goto LABEL_14;
  }
  v6 = *(uint64_t **)(v2 - 8);
  v7 = *v6;
  if (!*v6)
    return;
  v15 = *v6;
  v8 = *(uint64_t **)(v2 - 8);
LABEL_14:
  v10 = v8[4];
  if (!v10)
    return;
  sub_1C4D9E6C0(*a1, v7, -1);
LABEL_25:
  sub_1C4D9E6C0(*a1, v10, -1);
}

uint64_t sub_1C4D9EC28(_QWORD **a1, int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(unsigned __int8 *)(a3 + 16);
  if (a2 + 28 == v5)
  {
    v6 = *(_QWORD *)(a3 - 64);
    if (!v6 || (**a1 = v6, (sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(a3 - 32)) & 1) == 0))
    {
      v7 = *(_QWORD *)(a3 - 32);
      if (v7)
      {
        **a1 = v7;
        return sub_1C4D9ED34((uint64_t)(a1 + 1), *(llvm::Constant **)(a3 - 64));
      }
      return 0;
    }
    return 1;
  }
  if (v5 == 5 && *(unsigned __int16 *)(a3 + 18) == a2)
  {
    v9 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
    v10 = *(_QWORD *)(a3 - 32 * v9);
    if (v10)
    {
      **a1 = v10;
      if ((sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
        return 1;
      v9 = *(_DWORD *)(a3 + 20) & 0x7FFFFFF;
    }
    v11 = *(_QWORD *)(a3 - 32 * v9 + 32);
    if (v11)
    {
      **a1 = v11;
      return sub_1C4D9EED4((uint64_t)(a1 + 1), *(llvm::Constant **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
    }
  }
  return 0;
}

uint64_t sub_1C4D9ED34(uint64_t a1, llvm::Constant *a2)
{
  int v2;
  unsigned int v4;
  unsigned int v5;
  llvm::APInt *v6;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  int v11;
  llvm::APFloatBase *SplatValue;
  unsigned int v13;
  llvm::APInt *v14;
  BOOL v15;
  int v17;
  llvm::Type *v18;
  llvm::UndefValue *AggregateElement;
  int v20;
  unsigned int v21;
  llvm::APInt *v22;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v4 == 16)
  {
    v5 = *((_DWORD *)a2 + 8);
    if (v5)
    {
      v6 = (llvm::Constant *)((char *)a2 + 24);
      if (v5 > 0x40)
        return llvm::APInt::countTrailingOnesSlowCase(v6) == v5;
      else
        return *(_QWORD *)v6 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v8 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v9 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
    else
      v9 = 0;
    v10 = !v9 || v4 > 0x14;
    v11 = v10;
    if (!v10)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((_BYTE *)SplatValue + 16) == 16)
      {
        v13 = *((_DWORD *)SplatValue + 8);
        if (v13)
        {
          v14 = (llvm::APFloatBase *)((char *)SplatValue + 24);
          if (v13 > 0x40)
            v15 = llvm::APInt::countTrailingOnesSlowCase(v14) == v13;
          else
            v15 = *(_QWORD *)v14 == 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
          v2 = v15;
        }
        else
        {
          v2 = 1;
        }
      }
      else
      {
        if (*(_BYTE *)(v8 + 8) == 18)
        {
          v17 = *(_DWORD *)(v8 + 32);
          if (v17)
          {
            v18 = 0;
            v2 = 0;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement(a2, v18);
              if (!AggregateElement)
                break;
              v20 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v20 - 11) >= 2)
              {
                if (v20 != 16)
                  break;
                v21 = *((_DWORD *)AggregateElement + 8);
                if (v21)
                {
                  v22 = (llvm::UndefValue *)((char *)AggregateElement + 24);
                  if (v21 > 0x40)
                  {
                    if (llvm::APInt::countTrailingOnesSlowCase(v22) != v21)
                      break;
                  }
                  else if (*(_QWORD *)v22 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v21)
                  {
                    break;
                  }
                }
                v2 = 1;
              }
              v18 = (llvm::Type *)((_DWORD)v18 + 1);
              if (v17 == (_DWORD)v18)
                return (v11 ^ 1) & v2;
            }
          }
        }
        v2 = 0;
      }
    }
    return (v11 ^ 1) & v2;
  }
}

uint64_t sub_1C4D9EED4(uint64_t a1, llvm::Constant *a2)
{
  uint64_t v3;
  llvm::APInt *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  llvm::APFloatBase *SplatValue;
  uint64_t v11;
  llvm::APInt *v12;
  char v13;
  int v14;
  llvm::Type *v15;
  llvm::UndefValue *AggregateElement;
  int v17;
  unsigned int v18;
  llvm::APInt *v19;

  if (a2 && *((_BYTE *)a2 + 16) == 16)
  {
    v3 = *((unsigned int *)a2 + 8);
    if ((_DWORD)v3)
    {
      v4 = (llvm::Constant *)((char *)a2 + 24);
      if (v3 <= 0x40)
      {
        v5 = *(_QWORD *)v4;
        v6 = -v3;
LABEL_6:
        v7 = v5 == 0xFFFFFFFFFFFFFFFFLL >> v6;
        goto LABEL_34;
      }
      v7 = llvm::APInt::countTrailingOnesSlowCase(v4) == (_DWORD)v3;
      goto LABEL_34;
    }
LABEL_17:
    v13 = 1;
    return v13 & 1;
  }
  v8 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v9 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
  else
    v9 = 0;
  if (!v9)
  {
LABEL_32:
    v13 = 0;
    return v13 & 1;
  }
  SplatValue = llvm::Constant::getSplatValue(a2, 0);
  if (!SplatValue || *((_BYTE *)SplatValue + 16) != 16)
  {
    if (*(_BYTE *)(v8 + 8) == 18)
    {
      v14 = *(_DWORD *)(v8 + 32);
      if (v14)
      {
        v15 = 0;
        v13 = 0;
        while (1)
        {
          AggregateElement = llvm::Constant::getAggregateElement(a2, v15);
          if (!AggregateElement)
            break;
          v17 = *((unsigned __int8 *)AggregateElement + 16);
          if ((v17 - 11) >= 2)
          {
            if (v17 != 16)
              goto LABEL_32;
            v18 = *((_DWORD *)AggregateElement + 8);
            if (v18)
            {
              v19 = (llvm::UndefValue *)((char *)AggregateElement + 24);
              if (v18 > 0x40)
              {
                if (llvm::APInt::countTrailingOnesSlowCase(v19) != v18)
                  goto LABEL_32;
              }
              else if (*(_QWORD *)v19 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v18)
              {
                goto LABEL_32;
              }
            }
            v13 = 1;
          }
          v15 = (llvm::Type *)((_DWORD)v15 + 1);
          if (v14 == (_DWORD)v15)
            return v13 & 1;
        }
      }
    }
    goto LABEL_32;
  }
  v11 = *((unsigned int *)SplatValue + 8);
  if (!(_DWORD)v11)
    goto LABEL_17;
  v12 = (llvm::APFloatBase *)((char *)SplatValue + 24);
  if (v11 <= 0x40)
  {
    v5 = *(_QWORD *)v12;
    v6 = -v11;
    goto LABEL_6;
  }
  v7 = llvm::APInt::countTrailingOnesSlowCase(v12) == (_DWORD)v11;
LABEL_34:
  v13 = v7;
  return v13 & 1;
}

void sub_1C4D9F050(uint64_t a1)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD **)a1;
    v3 = *(_QWORD *)a1 + 48 * v1;
    do
    {
      v4 = v2[3];
      if ((v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v5 = v2[5];
        v2[5] = 0;
        if (v5)
        {
          sub_1C4D9F9A0((uint64_t)(v2 + 5), v5);
          v4 = v2[3];
        }
      }
      if (v4 != -8192 && v4 != -4096 && v4 != 0)
      {
        v7 = v2[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v7 = v2[2];
        v8 = (unint64_t *)v2[2];
        if (v8)
        {
          *v8 = *v8 & 7 | v7;
        }
        else
        {
          v9 = v2[3];
          v10 = ***(int32x2_t ****)v9;
          v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              v15 = (uint64_t *)(v11 + 16 * v14);
              v16 = *v15;
              if (v9 == *v15)
              {
LABEL_22:
                *v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                v9 = v2[3];
              }
              else
              {
                v17 = 1;
                while (v16 != -4096)
                {
                  v18 = v14 + v17++;
                  v14 = v18 & v13;
                  v16 = *(_QWORD *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_22;
                  }
                }
              }
              *(_BYTE *)(v9 + 17) &= ~1u;
            }
          }
        }
      }
      v2 += 6;
    }
    while (v2 != (_QWORD *)v3);
  }
}

char **sub_1C4D9F1A8(char **a1)
{
  char *v2;
  uint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v5 = &v2[32 * v3];
    do
    {
      v6 = *((_QWORD *)v5 - 2);
      if (v6 && v6 != -8192 && v6 != -4096)
      {
        v7 = *((_QWORD *)v5 - 4) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v7 = *((_QWORD *)v5 - 3);
        v8 = (unint64_t *)*((_QWORD *)v5 - 3);
        if (v8)
        {
          *v8 = *v8 & 7 | v7;
        }
        else
        {
          v9 = *((_QWORD *)v5 - 2);
          v10 = ***(int32x2_t ****)v9;
          v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              v15 = (uint64_t *)(v11 + 16 * v14);
              v16 = *v15;
              if (v9 == *v15)
              {
LABEL_19:
                *v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                v9 = *((_QWORD *)v5 - 2);
              }
              else
              {
                v17 = 1;
                while (v16 != -4096)
                {
                  v18 = v14 + v17++;
                  v14 = v18 & v13;
                  v16 = *(_QWORD *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_19;
                  }
                }
              }
              *(_BYTE *)(v9 + 17) &= ~1u;
            }
          }
        }
      }
      v5 -= 32;
    }
    while (v5 != v2);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C4D9F2EC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = a1 + 88 * v5;
    v7 = *(_QWORD *)(v6 + 24);
    if (v7 == a3)
    {
      v12 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = a1 + 88 * (v11 & v4);
        v7 = *(_QWORD *)(v6 + 24);
        v12 = 1;
        if (v7 == a3)
          goto LABEL_14;
      }
      v12 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v12 = 0;
  }
LABEL_14:
  *a4 = v6;
  return v12;
}

char *sub_1C4D9F384(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  int32x2_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  int32x2_t *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(88 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 88 * v10;
      v12 = result + 16;
      do
      {
        *v12 = 0;
        v12[1] = -4096;
        *(v12 - 2) = off_1E8134750;
        *(v12 - 1) = 2;
        v12[2] = 0;
        v12 += 11;
        v11 -= 88;
      }
      while (v11);
    }
    if (v3)
    {
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)(v13 + 24);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v52 = 0;
          sub_1C4D9F2EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v52);
          v15 = v52;
          v16 = v52[3];
          v17 = *(_QWORD *)(v13 + 24);
          if (v16 != v17)
          {
            v18 = v16 == -4096 || v16 == 0;
            if (!v18 && v16 != -8192)
            {
              v37 = v52[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v37 = v52[2];
              v38 = (unint64_t *)v15[2];
              if (v38)
              {
                *v38 = *v38 & 7 | v37;
              }
              else
              {
                v39 = v15[3];
                v40 = ***(int32x2_t ****)v39;
                v41 = (unint64_t)v40[303];
                if (v41 <= v37)
                {
                  v42 = v40[305].u32[0];
                  if (v41 + 16 * v42 > v37)
                  {
                    v43 = v42 - 1;
                    LODWORD(v44) = v43 & ((v39 >> 4) ^ (v39 >> 9));
                    v45 = (uint64_t *)(v41 + 16 * v44);
                    v46 = *v45;
                    if (v39 != *v45)
                    {
                      v47 = 1;
                      do
                      {
                        if (v46 == -4096)
                          goto LABEL_56;
                        v48 = v44 + v47++;
                        v44 = v48 & v43;
                        v46 = *(_QWORD *)(v41 + 16 * v44);
                      }
                      while (v39 != v46);
                      v45 = (uint64_t *)(v41 + 16 * v44);
                    }
                    *v45 = -8192;
                    v40[304] = vadd_s32(v40[304], (int32x2_t)0x1FFFFFFFFLL);
                    v39 = v15[3];
LABEL_56:
                    *(_BYTE *)(v39 + 17) &= ~1u;
                  }
                }
              }
              v17 = *(_QWORD *)(v13 + 24);
            }
            v15[3] = v17;
            if (v17 != -4096 && v17 != -8192 && v17 != 0)
            {
              v20 = *(_QWORD *)(v13 + 8);
              v15[2] = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8) = v15 + 1;
              v15[1] = v20 & 0xFFFFFFFFFFFFFFF8 | v15[1] & 7;
              v21 = (unint64_t *)v15[2];
              if (v21)
                *v21 = *v21 & 7 | (unint64_t)(v15 + 2);
            }
          }
          v22 = *(_QWORD *)(v13 + 32);
          v15[5] = v15 + 7;
          v23 = (uint64_t)(v15 + 5);
          *(_QWORD *)(v23 - 8) = v22;
          *(_QWORD *)(v23 + 8) = 0x100000000;
          if (*(_DWORD *)(v13 + 48))
            sub_1C4D9DC84(v23, v13 + 40);
          ++*(_DWORD *)(a1 + 8);
          sub_1C4D9F1A8((char **)(v13 + 40));
          v14 = *(_QWORD *)(v13 + 24);
        }
        if (v14 != -8192 && v14 != -4096 && v14 != 0)
        {
          v25 = *(_QWORD *)(v13 + 8) & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v25 = *(_QWORD *)(v13 + 16);
          v26 = *(unint64_t **)(v13 + 16);
          if (v26)
          {
            *v26 = *v26 & 7 | v25;
          }
          else
          {
            v27 = *(_QWORD *)(v13 + 24);
            v28 = ***(int32x2_t ****)v27;
            v29 = (unint64_t)v28[303];
            if (v29 <= v25)
            {
              v30 = v28[305].u32[0];
              if (v29 + 16 * v30 > v25)
              {
                v31 = v30 - 1;
                LODWORD(v32) = v31 & ((v27 >> 4) ^ (v27 >> 9));
                v33 = (uint64_t *)(v29 + 16 * v32);
                v34 = *v33;
                if (v27 != *v33)
                {
                  v35 = 1;
                  do
                  {
                    if (v34 == -4096)
                      goto LABEL_44;
                    v36 = v32 + v35++;
                    v32 = v36 & v31;
                    v34 = *(_QWORD *)(v29 + 16 * v32);
                  }
                  while (v27 != v34);
                  v33 = (uint64_t *)(v29 + 16 * v32);
                }
                *v33 = -8192;
                v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
                v27 = *(_QWORD *)(v13 + 24);
LABEL_44:
                *(_BYTE *)(v27 + 17) &= ~1u;
              }
            }
          }
        }
        v13 += 88;
      }
      while (v13 != v4 + 88 * v3);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v49 = *(_DWORD *)(a1 + 16);
  if (v49)
  {
    v50 = 88 * v49;
    v51 = result + 16;
    do
    {
      *v51 = 0;
      v51[1] = -4096;
      *(v51 - 2) = off_1E8134750;
      *(v51 - 1) = 2;
      v51[2] = 0;
      v51 += 11;
      v50 -= 88;
    }
    while (v50);
  }
  return result;
}

char **sub_1C4D9F76C(char **result)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  char **v18;

  v1 = *result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v3 = &v1[32 * v2];
    do
    {
      v4 = *((_QWORD *)v3 - 2);
      if (v4 != -8192 && v4 != -4096 && v4 != 0)
      {
        v6 = *((_QWORD *)v3 - 4) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v6 = *((_QWORD *)v3 - 3);
        v7 = (unint64_t *)*((_QWORD *)v3 - 3);
        if (v7)
        {
          *v7 = *v7 & 7 | v6;
        }
        else
        {
          v8 = *((_QWORD *)v3 - 2);
          v9 = ***(int32x2_t ****)v8;
          v10 = (unint64_t)v9[303];
          if (v10 <= v6)
          {
            v11 = v9[305].u32[0];
            if (v10 + 16 * v11 > v6)
            {
              v12 = v11 - 1;
              LODWORD(v13) = v12 & ((v8 >> 4) ^ (v8 >> 9));
              v14 = (uint64_t *)(v10 + 16 * v13);
              v15 = *v14;
              if (v8 == *v14)
              {
LABEL_19:
                *v14 = -8192;
                v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
                v8 = *((_QWORD *)v3 - 2);
              }
              else
              {
                v16 = 1;
                while (v15 != -4096)
                {
                  v17 = v13 + v16++;
                  v13 = v17 & v12;
                  v15 = *(_QWORD *)(v10 + 16 * v13);
                  if (v8 == v15)
                  {
                    v14 = (uint64_t *)(v10 + 16 * v13);
                    goto LABEL_19;
                  }
                }
              }
              *(_BYTE *)(v8 + 17) &= ~1u;
            }
          }
        }
      }
      v3 -= 32;
    }
    while (v3 != v1);
    v1 = *result;
  }
  if (v1 != (char *)(result + 2))
  {
    v18 = result;
    free(v1);
    return v18;
  }
  return result;
}

BOOL sub_1C4D9F8B4(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && *(_DWORD *)(v1 + 36) == 7;
}

uint64_t sub_1C4D9F900(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = *a1 + 48 * v6;
    v8 = *(_QWORD *)(v7 + 24);
    if (*a2 == v8)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = v4 + 48 * (v13 & v5);
        v8 = *(_QWORD *)(v7 + 24);
        if (*a2 == v8)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

void sub_1C4D9F9A0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1C4D9F9F4((char **)(a2 + 160));
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a2 + 160), 8);
    sub_1C4D9FB40((char **)(a2 + 16));
    JUMPOUT(0x1CAA32FC0);
  }
}

char **sub_1C4D9F9F4(char **result)
{
  int v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;

  v1 = *((_DWORD *)result + 4);
  if (v1)
  {
    v2 = *result;
    v3 = (uint64_t)&(*result)[88 * v1];
    do
    {
      v4 = *((_QWORD *)v2 + 3);
      if ((v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        result = sub_1C4D9F1A8((char **)v2 + 5);
        v4 = *((_QWORD *)v2 + 3);
      }
      if (v4 != -8192 && v4 != -4096 && v4 != 0)
      {
        v6 = *((_QWORD *)v2 + 1) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v6 = *((_QWORD *)v2 + 2);
        v7 = (unint64_t *)*((_QWORD *)v2 + 2);
        if (v7)
        {
          *v7 = *v7 & 7 | v6;
        }
        else
        {
          v8 = *((_QWORD *)v2 + 3);
          v9 = ***(int32x2_t ****)v8;
          v10 = (unint64_t)v9[303];
          if (v10 <= v6)
          {
            v11 = v9[305].u32[0];
            if (v10 + 16 * v11 > v6)
            {
              v12 = v11 - 1;
              LODWORD(v13) = v12 & ((v8 >> 4) ^ (v8 >> 9));
              v14 = (uint64_t *)(v10 + 16 * v13);
              v15 = *v14;
              if (v8 == *v14)
              {
LABEL_21:
                *v14 = -8192;
                v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
                v8 = *((_QWORD *)v2 + 3);
              }
              else
              {
                v16 = 1;
                while (v15 != -4096)
                {
                  v17 = v13 + v16++;
                  v13 = v17 & v12;
                  v15 = *(_QWORD *)(v10 + 16 * v13);
                  if (v8 == v15)
                  {
                    v14 = (uint64_t *)(v10 + 16 * v13);
                    goto LABEL_21;
                  }
                }
              }
              *(_BYTE *)(v8 + 17) &= ~1u;
            }
          }
        }
      }
      v2 += 88;
    }
    while (v2 != (char *)v3);
  }
  return result;
}

char **sub_1C4D9FB40(char **a1)
{
  char *v2;
  uint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v5 = &v2[32 * v3];
    do
    {
      v6 = *((_QWORD *)v5 - 2);
      if (v6 && v6 != -8192 && v6 != -4096)
      {
        v7 = *((_QWORD *)v5 - 4) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v7 = *((_QWORD *)v5 - 3);
        v8 = (unint64_t *)*((_QWORD *)v5 - 3);
        if (v8)
        {
          *v8 = *v8 & 7 | v7;
        }
        else
        {
          v9 = *((_QWORD *)v5 - 2);
          v10 = ***(int32x2_t ****)v9;
          v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              v15 = (uint64_t *)(v11 + 16 * v14);
              v16 = *v15;
              if (v9 == *v15)
              {
LABEL_19:
                *v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                v9 = *((_QWORD *)v5 - 2);
              }
              else
              {
                v17 = 1;
                while (v16 != -4096)
                {
                  v18 = v14 + v17++;
                  v14 = v18 & v13;
                  v16 = *(_QWORD *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_19;
                  }
                }
              }
              *(_BYTE *)(v9 + 17) &= ~1u;
            }
          }
        }
      }
      v5 -= 32;
    }
    while (v5 != v2);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t sub_1C4D9FC80@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  int32x2_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;

  v31 = 0;
  result = sub_1C4D9FE68((uint64_t *)a1, (uint64_t)a2, &v31);
  v9 = v31;
  if ((result & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    result = sub_1C4D9FF08(a1, (uint64_t)a2, (uint64_t)a2, v31);
    v9 = result;
    v10 = *(_QWORD *)(result + 24);
    v11 = a2[3];
    if (v10 != v11)
    {
      v12 = v10 == -4096 || v10 == 0;
      if (!v12 && v10 != -8192)
      {
        v19 = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v19 = *(_QWORD *)(result + 16);
        v20 = *(unint64_t **)(result + 16);
        if (v20)
        {
          *v20 = *v20 & 7 | v19;
        }
        else
        {
          v21 = *(_QWORD *)(result + 24);
          v22 = ***(int32x2_t ****)v21;
          v23 = (unint64_t)v22[303];
          if (v23 <= v19)
          {
            v24 = v22[305].u32[0];
            if (v23 + 16 * v24 > v19)
            {
              v25 = v24 - 1;
              LODWORD(v26) = v25 & ((v21 >> 4) ^ (v21 >> 9));
              v27 = (uint64_t *)(v23 + 16 * v26);
              v28 = *v27;
              if (v21 == *v27)
              {
LABEL_26:
                *v27 = -8192;
                v22[304] = vadd_s32(v22[304], (int32x2_t)0x1FFFFFFFFLL);
                v21 = *(_QWORD *)(result + 24);
              }
              else
              {
                v29 = 1;
                while (v28 != -4096)
                {
                  v30 = v26 + v29++;
                  v26 = v30 & v25;
                  v28 = *(_QWORD *)(v23 + 16 * v26);
                  if (v21 == v28)
                  {
                    v27 = (uint64_t *)(v23 + 16 * v26);
                    goto LABEL_26;
                  }
                }
              }
              *(_BYTE *)(v21 + 17) &= ~1u;
            }
          }
        }
        v11 = a2[3];
      }
      *(_QWORD *)(result + 24) = v11;
      if (v11 != -4096 && v11 != -8192 && v11 != 0)
      {
        v14 = a2[1];
        *(_QWORD *)(result + 16) = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8) = result + 8;
        *(_QWORD *)(result + 8) = v14 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)(result + 8) & 7;
        v15 = *(uint64_t **)(result + 16);
        if (v15)
          *v15 = *v15 & 7 | (result + 16);
      }
    }
    *(_QWORD *)(result + 32) = a2[4];
    v16 = *a3;
    *a3 = 0;
    *(_QWORD *)(result + 40) = v16;
    v17 = 1;
  }
  v18 = *(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v18;
  *(_BYTE *)(a4 + 16) = v17;
  return result;
}

uint64_t sub_1C4D9FE68(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  BOOL v13;
  unsigned int v14;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *(_QWORD *)(a2 + 24);
    v6 = v3 - 1;
    v7 = ((v5 >> 4) ^ (v5 >> 9)) & (v3 - 1);
    v8 = *a1 + 48 * v7;
    v9 = *(_QWORD *)(v8 + 24);
    if (v5 == v9)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v13 = 0;
        else
          v13 = v9 == -8192;
        if (v13)
          v10 = v8;
        v14 = v7 + v11++;
        v7 = v14 & v6;
        v8 = v4 + 48 * (v14 & v6);
        v9 = *(_QWORD *)(v8 + 24);
        if (v5 == v9)
          goto LABEL_7;
      }
      result = 0;
      if (v10)
        v8 = v10;
    }
  }
  else
  {
    v8 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v8;
  return result;
}

uint64_t sub_1C4D9FF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4D9FFB8(a1, v7);
  v9 = 0;
  sub_1C4D9FE68((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a4 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

char *sub_1C4D9FFB8(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  int32x2_t *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  int32x2_t *v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 48 * v10;
      v12 = result + 16;
      do
      {
        *v12 = 0;
        v12[1] = -4096;
        *(v12 - 2) = off_1E8134778;
        *(v12 - 1) = 2;
        v12[2] = 0;
        v12 += 6;
        v11 -= 48;
      }
      while (v11);
    }
    if (v3)
    {
      v13 = (_QWORD *)(v4 + 48 * v3);
      v14 = (_QWORD *)v4;
      do
      {
        if ((v14[3] | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v53 = 0;
          sub_1C4D9FE68((uint64_t *)a1, (uint64_t)v14, (uint64_t *)&v53);
          v15 = v53;
          v16 = v53[3];
          v17 = v14[3];
          if (v16 != v17)
          {
            v18 = v16 == -4096 || v16 == 0;
            if (!v18 && v16 != -8192)
            {
              v38 = v53[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v38 = v53[2];
              v39 = (unint64_t *)v15[2];
              if (v39)
              {
                *v39 = *v39 & 7 | v38;
              }
              else
              {
                v40 = v15[3];
                v41 = ***(int32x2_t ****)v40;
                v42 = (unint64_t)v41[303];
                if (v42 <= v38)
                {
                  v43 = v41[305].u32[0];
                  if (v42 + 16 * v43 > v38)
                  {
                    v44 = v43 - 1;
                    LODWORD(v45) = v44 & ((v40 >> 4) ^ (v40 >> 9));
                    v46 = (uint64_t *)(v42 + 16 * v45);
                    v47 = *v46;
                    if (v40 != *v46)
                    {
                      v48 = 1;
                      do
                      {
                        if (v47 == -4096)
                          goto LABEL_55;
                        v49 = v45 + v48++;
                        v45 = v49 & v44;
                        v47 = *(_QWORD *)(v42 + 16 * v45);
                      }
                      while (v40 != v47);
                      v46 = (uint64_t *)(v42 + 16 * v45);
                    }
                    *v46 = -8192;
                    v41[304] = vadd_s32(v41[304], (int32x2_t)0x1FFFFFFFFLL);
                    v40 = v15[3];
LABEL_55:
                    *(_BYTE *)(v40 + 17) &= ~1u;
                  }
                }
              }
              v17 = v14[3];
            }
            v15[3] = v17;
            if (v17 != -4096 && v17 != -8192 && v17 != 0)
            {
              v20 = v14[1];
              v15[2] = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8) = v15 + 1;
              v15[1] = v20 & 0xFFFFFFFFFFFFFFF8 | v15[1] & 7;
              v21 = (unint64_t *)v15[2];
              if (v21)
                *v21 = *v21 & 7 | (unint64_t)(v15 + 2);
            }
          }
          v15[4] = v14[4];
          v22 = v14[5];
          v14[5] = 0;
          v15[5] = v22;
          ++*(_DWORD *)(a1 + 8);
          v23 = v14[5];
          v14[5] = 0;
          if (v23)
            sub_1C4D9F9A0((uint64_t)(v14 + 5), v23);
        }
        v24 = v14[3];
        if (v24 != -8192 && v24 != -4096 && v24 != 0)
        {
          v26 = v14[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v26 = v14[2];
          v27 = (unint64_t *)v14[2];
          if (v27)
          {
            *v27 = *v27 & 7 | v26;
          }
          else
          {
            v28 = v14[3];
            v29 = ***(int32x2_t ****)v28;
            v30 = (unint64_t)v29[303];
            if (v30 <= v26)
            {
              v31 = v29[305].u32[0];
              if (v30 + 16 * v31 > v26)
              {
                v32 = v31 - 1;
                LODWORD(v33) = v32 & ((v28 >> 4) ^ (v28 >> 9));
                v34 = (uint64_t *)(v30 + 16 * v33);
                v35 = *v34;
                if (v28 != *v34)
                {
                  v36 = 1;
                  do
                  {
                    if (v35 == -4096)
                      goto LABEL_43;
                    v37 = v33 + v36++;
                    v33 = v37 & v32;
                    v35 = *(_QWORD *)(v30 + 16 * v33);
                  }
                  while (v28 != v35);
                  v34 = (uint64_t *)(v30 + 16 * v33);
                }
                *v34 = -8192;
                v29[304] = vadd_s32(v29[304], (int32x2_t)0x1FFFFFFFFLL);
                v28 = v14[3];
LABEL_43:
                *(_BYTE *)(v28 + 17) &= ~1u;
              }
            }
          }
        }
        v14 += 6;
      }
      while (v14 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v50 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v50)
  {
    v51 = 48 * v50;
    v52 = result + 16;
    do
    {
      *v52 = 0;
      v52[1] = -4096;
      *(v52 - 2) = off_1E8134778;
      *(v52 - 1) = 2;
      v52[2] = 0;
      v52 += 6;
      v51 -= 48;
    }
    while (v51);
  }
  return result;
}

uint64_t sub_1C4DA0390()
{
  char v1;
  char *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Enable verification of assumption cache";
  v3.n128_u64[1] = 39;
  v1 = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED7EFDE0, "verify-assumption-cache", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EFDE0, &dword_1C475E000);
}

BOOL llvm::BasicAAResult::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return (sub_1C4DA944C(a4, (uint64_t)&llvm::AssumptionAnalysis::Key, a2, a3) & 1) != 0
      || *(_QWORD *)(a1 + 48)
      && (llvm::AnalysisManager<llvm::Function>::Invalidator::invalidate(a4, (uint64_t)&llvm::DominatorTreeAnalysis::Key, a2, a3) & 1) != 0|| *(_QWORD *)(a1 + 56) && (sub_1C4DA944C(a4, (uint64_t)&llvm::PhiValuesAnalysis::Key, a2, a3) & 1) != 0;
}

BOOL llvm::SimpleCaptureInfo::isNotCapturedBeforeOrAt(llvm::SimpleCaptureInfo *this, const llvm::Value *a2, const llvm::Instruction *a3)
{
  char *v5;
  char v6;
  char *v7;
  int v8;
  int v9;
  uint64_t v10;
  const llvm::Value **v11;
  const llvm::Value *v12;
  const llvm::Value **v13;
  int v14;
  const llvm::Value **v15;
  _QWORD *v16;
  const llvm::Value *v17;
  _BOOL8 result;
  BOOL v19;
  int v20;
  const llvm::Value *v21;
  char v22;

  v6 = *((_BYTE *)this + 8);
  v5 = (char *)this + 8;
  v21 = a2;
  v22 = 0;
  if ((v6 & 1) != 0)
  {
    v7 = v5 + 8;
    v8 = 8;
  }
  else
  {
    v8 = *((_DWORD *)this + 6);
    if (!v8)
    {
      v15 = 0;
      goto LABEL_9;
    }
    v7 = (char *)*((_QWORD *)this + 2);
  }
  v9 = v8 - 1;
  v10 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (const llvm::Value **)&v7[16 * v10];
  v12 = *v11;
  if (*v11 == a2)
    return v7[16 * v10 + 8] != 0;
  v13 = 0;
  v14 = 1;
  while (v12 != (const llvm::Value *)-4096)
  {
    if (v13)
      v19 = 0;
    else
      v19 = v12 == (const llvm::Value *)-8192;
    if (v19)
      v13 = v11;
    v20 = v10 + v14++;
    v10 = v20 & v9;
    v11 = (const llvm::Value **)&v7[16 * v10];
    v12 = *v11;
    if (*v11 == a2)
      return v7[16 * v10 + 8] != 0;
  }
  if (v13)
    v15 = v13;
  else
    v15 = v11;
LABEL_9:
  v16 = sub_1C4DE86EC((uint64_t)v5, (uint64_t)&v21, &v21, v15);
  *v16 = v21;
  *((_BYTE *)v16 + 8) = v22;
  if ((llvm::isIdentifiedFunctionLocal(a2, v17) & 1) == 0)
    return 0;
  result = !llvm::PointerMayBeCaptured(a2, 0, 0, 0);
  *((_BYTE *)v16 + 8) = result;
  return result;
}

uint64_t llvm::EarliestEscapeInfo::isNotCapturedBeforeOrAt(llvm::EarliestEscapeInfo *this, const llvm::Value *a2, const llvm::Instruction *a3)
{
  uint64_t result;
  const llvm::Instruction *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t (***v13)();
  int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (**v24)();
  uint64_t (**v25)();
  const llvm::Instruction *v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t (***v30)();

  result = llvm::isIdentifiedFunctionLocal(a2, a2);
  if ((_DWORD)result)
  {
    v24 = (uint64_t (**)())a2;
    v25 = 0;
    v30 = 0;
    if (sub_1C4850EC8((uint64_t *)this + 3, &v24, &v30))
    {
      v7 = (const llvm::Instruction *)v30[1];
      goto LABEL_4;
    }
    v8 = sub_1C4DA9548((uint64_t)this + 24, (uint64_t)&v24, &v24, v30);
    *v8 = v24;
    v8[1] = v25;
    v9 = *(_QWORD *)(*((_QWORD *)a3 + 5) + 56);
    v10 = *((_QWORD *)this + 1);
    v11 = *((_QWORD *)this + 9);
    v24 = &off_1E81359F0;
    v25 = (uint64_t (**)())v11;
    v26 = 0;
    v27 = v10;
    v28 = 0;
    v29 = v9;
    llvm::PointerMayBeCaptured(a2, (const llvm::Value *)&v24, 0);
    v7 = v26;
    if (!v26)
    {
LABEL_11:
      v8[1] = v7;
LABEL_4:
      if (!v7)
        return 1;
      if (v7 == a3)
        return 0;
      return llvm::isPotentiallyReachable((uint64_t)v7, (uint64_t)a3, 0, *((_QWORD *)this + 1), *((_QWORD *)this + 2)) ^ 1;
    }
    v23 = 0;
    v24 = (uint64_t (**)())v26;
    v25 = 0;
    v30 = 0;
    v12 = sub_1C477507C((uint64_t *)this + 6, &v24, &v30);
    v13 = v30;
    if ((v12 & 1) != 0)
    {
LABEL_19:
      sub_1C4DA9768((uint64_t *)&v25);
      sub_1C4DA9768(&v23);
      v16 = (unint64_t)v13[1];
      if (v16 > 7)
      {
        if ((v16 & 4) == 0)
        {
          v17 = v16 & 0xFFFFFFFFFFFFFFF8;
          v18 = operator new();
          *(_QWORD *)v18 = v18 + 16;
          *(_QWORD *)(v18 + 8) = 0x400000000;
          v13[1] = (uint64_t (**)())(v18 | 4);
          v19 = v18 & 0xFFFFFFFFFFFFFFF8;
          v20 = *(unsigned int *)((v18 & 0xFFFFFFFFFFFFFFF8) + 8);
          if (v20 >= *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v18 & 0xFFFFFFFFFFFFFFF8, v19 + 16, v20 + 1, 8);
            LODWORD(v20) = *(_DWORD *)(v19 + 8);
          }
          *(_QWORD *)(*(_QWORD *)v19 + 8 * v20) = v17;
          ++*(_DWORD *)(v19 + 8);
          v16 = (unint64_t)v13[1];
        }
        v21 = v16 & 0xFFFFFFFFFFFFFFF8;
        v22 = *(unsigned int *)((v16 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (v22 >= *(_DWORD *)(v21 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v21, v21 + 16, v22 + 1, 8);
          LODWORD(v22) = *(_DWORD *)(v21 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v21 + 8 * v22) = a2;
        ++*(_DWORD *)(v21 + 8);
      }
      else
      {
        v13[1] = (uint64_t (**)())((unint64_t)a2 & 0xFFFFFFFFFFFFFFFBLL);
      }
      goto LABEL_11;
    }
    v14 = *((_DWORD *)this + 14);
    v15 = *((_DWORD *)this + 16);
    if (4 * v14 + 4 < 3 * v15)
    {
      if (v15 + ~v14 - *((_DWORD *)this + 15) > v15 >> 3)
        goto LABEL_16;
    }
    else
    {
      v15 *= 2;
    }
    sub_1C4DA96B0((uint64_t)this + 48, v15);
    v30 = 0;
    sub_1C477507C((uint64_t *)this + 6, &v24, &v30);
    v13 = v30;
LABEL_16:
    ++*((_DWORD *)this + 14);
    if (*v13 != (uint64_t (**)())-4096)
      --*((_DWORD *)this + 15);
    *v13 = v24;
    v13[1] = v25;
    v25 = 0;
    goto LABEL_19;
  }
  return result;
}

uint64_t llvm::EarliestEscapeInfo::removeInstruction(llvm::EarliestEscapeInfo *this, llvm::Instruction *a2)
{
  char *v3;
  uint64_t result;
  unint64_t v5;
  llvm::Instruction **v6;
  uint64_t v7;
  unint64_t v8;
  llvm::Instruction *v9;
  llvm::Instruction *v10;
  _QWORD *v11;

  v9 = a2;
  v10 = a2;
  v3 = (char *)this + 48;
  v11 = 0;
  result = sub_1C4DA97DC((uint64_t *)this + 6, &v10, &v11);
  if ((_DWORD)result && v11 != (_QWORD *)(*((_QWORD *)this + 6) + 16 * *((unsigned int *)this + 16)))
  {
    v6 = (llvm::Instruction **)(v11 + 1);
    v5 = v11[1];
    if ((v5 & 4) != 0)
    {
      v8 = v5 & 0xFFFFFFFFFFFFFFF8;
      v6 = *(llvm::Instruction ***)v8;
      v7 = *(_QWORD *)v8 + 8 * *(unsigned int *)(v8 + 8);
    }
    else
    {
      v7 = (uint64_t)&v6[v5 > 7];
    }
    for (; v6 != (llvm::Instruction **)v7; ++v6)
    {
      v10 = *v6;
      v11 = 0;
      if (sub_1C4850EC8((uint64_t *)this + 3, &v10, &v11))
      {
        *v11 = -8192;
        *((int32x2_t *)this + 4) = vadd_s32(*(int32x2_t *)((char *)this + 32), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    return sub_1C617A9A4((uint64_t)v3, &v9);
  }
  return result;
}

void llvm::BasicAAResult::DecomposeGEPExpression(llvm::BasicAAResult *this@<X0>, const llvm::Value *a2@<X1>, const llvm::DataLayout *a3@<X2>, llvm::AssumptionCache *a4@<X3>, uint64_t a5@<X8>)
{
  llvm::DataLayout *v7;
  llvm::BasicAAResult *v8;
  llvm::BasicAAResult *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL4 v22;
  int v23;
  uint64_t *v24;
  llvm::Module *v25;
  uint64_t ArgumentAliasingToReturnedPointer;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t **v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  uint64_t PointerAlignElem;
  uint64_t v37;
  char *v38;
  int v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  llvm::StructLayout *StructLayout;
  unsigned int v50;
  llvm::UndefValue *AggregateElement;
  BOOL v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t *v64;
  unsigned int v65;
  llvm::APInt *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  llvm::APInt *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _BOOL4 v76;
  unsigned int v77;
  unsigned int v78;
  BOOL v79;
  unsigned int v80;
  unint64_t v81;
  llvm::UndefValue *v82;
  BOOL v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int *v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  unsigned int v103;
  int v104;
  int64_t v105;
  unint64_t v107;
  unsigned int v108;
  char v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _BOOL4 v118;
  uint64_t v119;
  unint64_t *v120;
  uint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _BOOL4 v126;
  int v127;
  unint64_t v128;
  char v129;
  const llvm::DataLayout *v130;
  unsigned int v131;
  llvm::BasicAAResult *v132;
  uint64_t *v134;
  uint64_t v135;
  unsigned int v136;
  llvm::DataLayout *v137;
  void *v138;
  unsigned int v139;
  __int128 v140;
  unsigned int v141;
  void *v142;
  unsigned int v143;
  llvm::BasicAAResult *v144;
  unsigned int v145;
  char v146;
  __int128 v147;
  unsigned int v148;
  void *v149;
  unsigned int v150;
  void *__src;
  unsigned int v152;
  char v153;
  llvm::APInt *v154;
  unsigned int v155;
  llvm::UndefValue **v156;
  uint64_t v157;

  v7 = a2;
  v8 = this;
  if (*((unsigned __int8 *)this + 16) <= 0x1Bu)
    v10 = 0;
  else
    v10 = this;
  v132 = v10;
  v11 = *((unsigned int *)a2 + 60);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 16 * v11;
    v14 = (unsigned int *)(*((_QWORD *)a2 + 29) + 4);
    do
    {
      v15 = *v14;
      v14 += 4;
      v16 = ((unint64_t)v15 + 7) >> 3;
      if (v12 <= v16)
        v12 = v16;
      v13 -= 16;
    }
    while (v13);
    LODWORD(v11) = 8 * v12;
  }
  *(_QWORD *)(a5 + 8) = 0;
  v17 = (unint64_t *)(a5 + 8);
  *(_DWORD *)(a5 + 16) = 1;
  *(_QWORD *)(a5 + 24) = a5 + 40;
  v134 = (uint64_t *)(a5 + 24);
  *(_QWORD *)(a5 + 32) = 0x400000000;
  *(_WORD *)(a5 + 264) = 0;
  DWORD2(v147) = v11;
  v136 = v11;
  if (v11 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v147, 0, 0);
    if (*(_DWORD *)(a5 + 16) >= 0x41u && *v17)
      MEMORY[0x1CAA32F9C](*v17, 0x1000C8000313F17);
  }
  else
  {
    *(_QWORD *)&v147 = 0;
  }
  *(_QWORD *)(a5 + 8) = v147;
  v18 = 6;
  *(_DWORD *)(a5 + 16) = DWORD2(v147);
  do
  {
    v19 = *((unsigned __int8 *)v8 + 16);
    v20 = v19 - 28;
    v22 = v19 < 0x1C && v19 != 5;
    if (!v8 || v22)
    {
      if (v8 && v19 == 1 && ((*((_DWORD *)v8 + 8) & 0xFu) - 5 < 4 || ((1 << (*((_DWORD *)v8 + 8) & 0xF)) & 0x614) == 0))
      {
        v25 = (llvm::Module *)*((_QWORD *)v8 + 5);
        if (!v25 || !llvm::Module::getSemanticInterposition(v25) || (*((_BYTE *)v8 + 33) & 0x40) != 0)
        {
          ArgumentAliasingToReturnedPointer = *((_QWORD *)v8 - 4);
          goto LABEL_237;
        }
      }
      break;
    }
    if (v19 <= 0x1B)
      v20 = *((unsigned __int16 *)v8 + 9);
    if (v20 == 49 || v20 == 50)
    {
      v23 = *((_DWORD *)v8 + 5);
      if ((v23 & 0x40000000) == 0)
      {
        v24 = (uint64_t *)((char *)v8 - 32 * (v23 & 0x7FFFFFF));
        goto LABEL_236;
      }
      goto LABEL_45;
    }
    if (v19 == 83)
    {
      v27 = *((_DWORD *)v8 + 5);
      if ((v27 & 0x7FFFFFF) != 1)
        break;
      if ((v27 & 0x40000000) == 0)
      {
        v24 = (uint64_t *)((char *)v8 - 32);
        goto LABEL_236;
      }
LABEL_45:
      v24 = (uint64_t *)*((_QWORD *)v8 - 1);
      goto LABEL_236;
    }
    if (v19 != 62)
    {
      if (v19 != 5)
      {
        if (v19 >= 0x1C)
        {
          v28 = v19 - 33;
          if (v28 <= 0x33 && ((1 << v28) & 0x8000000000041) != 0)
          {
            ArgumentAliasingToReturnedPointer = llvm::getArgumentAliasingToReturnedPointer(v8, 0);
            if (ArgumentAliasingToReturnedPointer)
              goto LABEL_237;
          }
        }
        break;
      }
      if (*((_WORD *)v8 + 9) != 34)
        break;
    }
    if (*(_BYTE *)(a5 + 265))
    {
      if ((*((_BYTE *)v8 + 17) & 2) == 0)
      {
        *(_BYTE *)(a5 + 264) = 0;
        v19 = *((unsigned __int8 *)v8 + 16);
      }
    }
    else
    {
      *(_BYTE *)(a5 + 264) = (*((_BYTE *)v8 + 17) & 2) != 0;
      *(_BYTE *)(a5 + 265) = 1;
    }
    if (v19 == 62)
      v29 = 64;
    else
      v29 = 24;
    v30 = *(_QWORD *)((char *)v8 + v29);
    if (*(_BYTE *)(v30 + 8) == 19)
      break;
    v31 = *((_DWORD *)v8 + 5);
    if ((v31 & 0x40000000) != 0)
      v32 = (uint64_t **)*((_QWORD *)v8 - 1);
    else
      v32 = (uint64_t **)((char *)v8 - 32 * (v31 & 0x7FFFFFF));
    v33 = **v32;
    v34 = *(_DWORD *)(v33 + 8);
    if ((v34 & 0xFE) == 0x12)
      v34 = *(_DWORD *)(**(_QWORD **)(v33 + 16) + 8);
    if ((v31 & 0x40000000) != 0)
      v35 = (char *)*((_QWORD *)v8 - 1);
    else
      v35 = (char *)v8 - 32 * (v31 & 0x7FFFFFF);
    v156 = (llvm::UndefValue **)(v35 + 32);
    v157 = v30 | 4;
    PointerAlignElem = llvm::DataLayout::getPointerAlignElem(v7, v34 >> 8);
    if ((v31 & 0x40000000) != 0)
    {
      v38 = (char *)*((_QWORD *)v8 - 1);
      v37 = v31 & 0x7FFFFFF;
    }
    else
    {
      v37 = v31 & 0x7FFFFFF;
      v38 = (char *)v8 - 32 * v37;
    }
    v137 = v7;
    v39 = *(_DWORD *)(PointerAlignElem + 12);
    if (v37 == 1)
    {
LABEL_228:
      sub_1C4DA2510((unsigned int *)&v147, (uint64_t)v17, v39);
      if (*(_DWORD *)(a5 + 16) >= 0x41u && *v17)
        MEMORY[0x1CAA32F9C](*v17, 0x1000C8000313F17);
      *(_QWORD *)(a5 + 8) = v147;
      *(_DWORD *)(a5 + 16) = DWORD2(v147);
      goto LABEL_232;
    }
    v40 = &v38[32 * v37];
    v41 = v38 + 32;
    v128 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v39;
    v42 = 1;
    v135 = a5;
    v130 = a3;
    v131 = *(_DWORD *)(PointerAlignElem + 12);
    while (2)
    {
      v129 = v42;
      while (1)
      {
        v43 = *(_QWORD *)v41;
        v44 = v157;
        v45 = v157 & 0xFFFFFFFFFFFFFFF8;
        if ((v157 & 4) == 0 && v45)
        {
          v46 = (unsigned int *)(v43 + 24);
          if (*(_DWORD *)(v43 + 32) >= 0x41u)
            v46 = *(unsigned int **)v46;
          v47 = *v46;
          if (*v46)
          {
            StructLayout = llvm::DataLayout::getStructLayout(v137, (llvm::StructType *)(v157 & 0xFFFFFFFFFFFFFFF8));
            llvm::APInt::operator+=((uint64_t)v17, *((_QWORD *)StructLayout + v47 + 2));
          }
          goto LABEL_112;
        }
        if (*(_BYTE *)(v43 + 16) != 16 || v43 == 0)
          break;
        v50 = *(_DWORD *)(v43 + 32);
        if (v50 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v43 + 24)) != v50)
          {
LABEL_84:
            if ((v44 & 4) == 0 || !v45)
            {
              AggregateElement = *v156;
              if (*v156)
                v52 = *((_BYTE *)*v156 + 16) == 16;
              else
                v52 = 0;
              if (!v52)
                AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
              v55 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
              v53 = (unsigned int *)((char *)AggregateElement + 24);
              v54 = v55;
              if (v53[2] < 0x41)
                v54 = v53;
              v45 = *(_QWORD *)(*(_QWORD *)(v45 + 16) + 8 * *v54);
            }
            sub_1C4768AD0((uint64_t)v137, v45);
            v57 = v56;
            llvm::DataLayout::getAlignment((uint64_t)v137, v45);
            v59 = v58;
            v60 = *(_DWORD *)(v43 + 32);
            if (v60 < v136)
            {
              llvm::APInt::sext((llvm::APInt *)(v43 + 24), v136, (llvm::APInt *)&v154);
            }
            else if (v60 > v136)
            {
              llvm::APInt::trunc((llvm::APInt *)(v43 + 24), v136, (llvm::APInt *)&v154);
            }
            else
            {
              sub_1C5DD14E0((uint64_t)&v154, v43 + 24);
            }
            v61 = ((1 << v59) + ((unint64_t)(v57 + 7) >> 3) - 1) & -(1 << v59);
            v62 = v155;
            if (v155 > 0x40)
            {
              llvm::APInt::tcMultiplyPart(v154, (unint64_t *)v154, (const unint64_t *)v61, 0, ((unint64_t)v155 + 63) >> 6, ((unint64_t)v155 + 63) >> 6, 0);
              v62 = v155;
            }
            else
            {
              v154 = (llvm::APInt *)((_QWORD)v154 * v61);
            }
            if (v62)
            {
              v63 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v62;
              if (v62 < 0x41)
                goto LABEL_101;
              v64 = (unint64_t *)((char *)v154 + 8 * (((unint64_t)v62 + 63) >> 6) - 8);
            }
            else
            {
              v63 = 0;
LABEL_101:
              v64 = (unint64_t *)&v154;
            }
            *v64 &= v63;
            v65 = v155;
            v66 = v154;
            v155 = 0;
            v67 = *(unsigned int *)(v135 + 16);
            if (v67 >= 0x41)
            {
              v69 = 0;
              v70 = (unint64_t *)*v17;
              v71 = (unint64_t)(v67 + 63) >> 6;
              v72 = v154;
              v73 = v71;
              do
              {
                v74 = *(_QWORD *)v72;
                v72 = (llvm::APInt *)((char *)v72 + 8);
                v75 = v74 + *v70;
                v76 = v75 + 1 <= *v70;
                if (v69)
                {
                  ++v75;
                  v69 = v76;
                }
                else
                {
                  v69 = v75 < *v70;
                }
                *v70++ = v75;
                --v73;
              }
              while (v73);
              *(_QWORD *)(*v17 + 8 * (v71 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v67;
            }
            else
            {
              if ((_DWORD)v67)
                v68 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v67;
              else
                v68 = 0;
              *v17 = v68 & ((unint64_t)v154 + *v17);
            }
            if (v65 >= 0x41 && v66)
              MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
            if (v155 >= 0x41 && v154)
              MEMORY[0x1CAA32F9C](v154, 0x1000C8000313F17);
          }
        }
        else if (*(_QWORD *)(v43 + 24))
        {
          goto LABEL_84;
        }
LABEL_112:
        sub_1C4774E38((uint64_t)&v156);
        v41 += 32;
        if (v41 == v40)
        {
          a5 = v135;
          a3 = v130;
          v39 = v131;
          if ((v129 & 1) == 0)
            goto LABEL_232;
          goto LABEL_228;
        }
      }
      v77 = *(_DWORD *)(*(_QWORD *)v43 + 8) >> 8;
      v78 = v131 - v77;
      if (v131 < v77)
        v78 = 0;
      v79 = v77 >= v131;
      v80 = v77 - v131;
      *(_QWORD *)&v140 = *(_QWORD *)v41;
      if (!v79)
        v80 = 0;
      DWORD2(v140) = 0;
      HIDWORD(v140) = v78;
      v141 = v80;
      a3 = v130;
      sub_1C4DA179C((uint64_t)&v147, &v140, v137, 0, v130, a4);
      v81 = v157 & 0xFFFFFFFFFFFFFFF8;
      a5 = v135;
      if ((v157 & 4) == 0 || !v81)
      {
        v82 = *v156;
        if (*v156)
          v83 = *((_BYTE *)*v156 + 16) == 16;
        else
          v83 = 0;
        if (!v83)
          v82 = llvm::Constant::getAggregateElement(v82, 0);
        v86 = (unsigned int *)*((_QWORD *)v82 + 3);
        v84 = (unsigned int *)((char *)v82 + 24);
        v85 = v86;
        if (v84[2] < 0x41)
          v85 = v84;
        v81 = *(_QWORD *)(*(_QWORD *)(v81 + 16) + 8 * *v85);
      }
      sub_1C4768AD0((uint64_t)v137, v81);
      v88 = (unint64_t)(v87 + 7) >> 3;
      llvm::DataLayout::getAlignment((uint64_t)v137, v81);
      v90 = -(1 << v89) & ((1 << v89) + v88 - 1);
      v91 = v131;
      v139 = v131;
      if (v131 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v138, v90, 0);
      }
      else
      {
        v92 = v128;
        if (!v131)
          v92 = 0;
        v138 = (void *)(v92 & v90);
      }
      sub_1C4DA22CC((uint64_t)&v140, (uint64_t)&v147, (llvm::APInt *)&v138, (*((unsigned __int8 *)v8 + 17) >> 1) & 1);
      v147 = v140;
      v148 = v141;
      if (v150 >= 0x41 && v149)
        MEMORY[0x1CAA32F9C](v149, 0x1000C8000313F17);
      v93 = 0;
      v149 = v142;
      v150 = v143;
      v143 = 0;
      if (v152 >= 0x41)
      {
        if (__src)
        {
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          v93 = v143;
        }
        else
        {
          v93 = 0;
        }
      }
      __src = v144;
      v152 = v145;
      v145 = 0;
      v153 = v146;
      if (v93 >= 0x41 && v142)
        MEMORY[0x1CAA32F9C](v142, 0x1000C8000313F17);
      if (v139 >= 0x41 && v138)
        MEMORY[0x1CAA32F9C](v138, 0x1000C8000313F17);
      if (v152 < v136)
      {
        llvm::APInt::sext((llvm::APInt *)&__src, v136, (llvm::APInt *)&v140);
      }
      else
      {
        DWORD2(v140) = v152;
        if (v152 > 0x40)
        {
          *(_QWORD *)&v140 = operator new[]();
          memcpy((void *)v140, __src, (((unint64_t)DWORD2(v140) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *(_QWORD *)&v140 = __src;
        }
      }
      v94 = *(unsigned int *)(v135 + 16);
      if (v94 >= 0x41)
      {
        v111 = 0;
        v112 = (unint64_t *)*v17;
        v113 = (uint64_t *)v140;
        v114 = (unint64_t)(v94 + 63) >> 6;
        v115 = v114;
        do
        {
          v116 = *v113++;
          v117 = v116 + *v112;
          v118 = v117 + 1 <= *v112;
          if (v111)
          {
            ++v117;
            v111 = v118;
          }
          else
          {
            v111 = v117 < *v112;
          }
          *v112++ = v117;
          --v115;
        }
        while (v115);
        *(_QWORD *)(*v17 + 8 * (v114 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v94;
        a5 = v135;
        a3 = v130;
        v91 = v131;
      }
      else
      {
        if ((_DWORD)v94)
          v95 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v94;
        else
          v95 = 0;
        *v17 = v95 & (*v17 + v140);
      }
      v96 = v136;
      if (DWORD2(v140) >= 0x41 && (_QWORD)v140)
      {
        MEMORY[0x1CAA32F9C](v140, 0x1000C8000313F17);
        v96 = v136;
      }
      if (v150 < v96)
      {
        llvm::APInt::sext((llvm::APInt *)&v149, v96, (llvm::APInt *)&v138);
      }
      else
      {
        v139 = v150;
        if (v150 > 0x40)
        {
          v138 = (void *)operator new[]();
          memcpy(v138, v149, (((unint64_t)v139 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v138 = v149;
        }
      }
      v97 = *(unsigned int *)(a5 + 32);
      if ((_DWORD)v97)
      {
        v98 = 0;
        v99 = *v134;
        v100 = 56 * v97;
        while (1)
        {
          if (*(_OWORD *)(v99 + v98) == v147)
          {
            v101 = v99 + v98;
            if (*(_DWORD *)(v99 + v98 + 16) == v148)
              break;
          }
          v98 += 56;
          if (v100 == v98)
            goto LABEL_179;
        }
        v109 = v139;
        if (v139 >= 0x41)
        {
          v119 = 0;
          v120 = (unint64_t *)v138;
          v121 = *(uint64_t **)(v101 + 24);
          v122 = ((unint64_t)v139 + 63) >> 6;
          v123 = v122;
          do
          {
            v124 = *v121++;
            v125 = v124 + *v120;
            v126 = v125 + 1 <= *v120;
            if (v119)
            {
              ++v125;
              v119 = v126;
            }
            else
            {
              v119 = v125 < *v120;
            }
            *v120++ = v125;
            --v123;
          }
          while (v123);
          *((_QWORD *)v138 + (v122 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v109;
          a5 = v135;
          v99 = *v134;
          a3 = v130;
          v91 = v131;
        }
        else
        {
          if (v139)
            v110 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v139;
          else
            v110 = 0;
          v138 = (void *)(v110 & ((unint64_t)v138 + *(_QWORD *)(v101 + 24)));
        }
        sub_1C4DA2414(v134, v99 + v98);
      }
LABEL_179:
      sub_1C4DA2510((unsigned int *)&v140, (uint64_t)&v138, v91);
      if (v139 >= 0x41 && v138)
        MEMORY[0x1CAA32F9C](v138, 0x1000C8000313F17);
      v102 = (void *)v140;
      v138 = (void *)v140;
      v103 = DWORD2(v140);
      v139 = DWORD2(v140);
      if (DWORD2(v140) > 0x40)
      {
        v104 = 0;
        v105 = ((unint64_t)DWORD2(v140) + 63) >> 6;
        do
        {
          if (v105-- < 1)
            break;
          v107 = *(_QWORD *)(v140 + 8 * v105);
          v104 += __clz(v107);
        }
        while (!v107);
        v108 = DWORD2(v140) | 0xFFFFFFC0;
        if ((BYTE8(v140) & 0x3F) == 0)
          v108 = 0;
        if (v104 + v108 != DWORD2(v140))
        {
          v140 = v147;
          v141 = v148;
          v143 = v103;
          v142 = (void *)operator new[]();
          memcpy(v142, v138, (((unint64_t)v143 + 63) >> 3) & 0x3FFFFFF8);
          goto LABEL_192;
        }
LABEL_197:
        if (v102)
          MEMORY[0x1CAA32F9C](v102, 0x1000C8000313F17);
      }
      else if ((_QWORD)v140)
      {
        v140 = v147;
        v141 = v148;
        v143 = v103;
        v142 = v102;
LABEL_192:
        v144 = v132;
        LOBYTE(v145) = v153;
        sub_1C4DA2660((uint64_t)v134, (char *)&v140);
        if (v143 >= 0x41 && v142)
          MEMORY[0x1CAA32F9C](v142, 0x1000C8000313F17);
        if (v139 >= 0x41)
        {
          v102 = v138;
          goto LABEL_197;
        }
      }
      if (v152 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      if (v150 >= 0x41 && v149)
        MEMORY[0x1CAA32F9C](v149, 0x1000C8000313F17);
      sub_1C4774E38((uint64_t)&v156);
      v42 = 0;
      v41 += 32;
      if (v41 != v40)
        continue;
      break;
    }
LABEL_232:
    v127 = *((_DWORD *)v8 + 5);
    if ((v127 & 0x40000000) != 0)
      v24 = (uint64_t *)*((_QWORD *)v8 - 1);
    else
      v24 = (uint64_t *)((char *)v8 - 32 * (v127 & 0x7FFFFFF));
    v7 = v137;
LABEL_236:
    ArgumentAliasingToReturnedPointer = *v24;
LABEL_237:
    v8 = (llvm::BasicAAResult *)ArgumentAliasingToReturnedPointer;
    --v18;
  }
  while (v18);
  *(_QWORD *)a5 = v8;
}

uint64_t **sub_1C4DA179C(uint64_t a1, __int128 *a2, const llvm::APInt *a3, int a4, const llvm::DataLayout *a5, const llvm::Instruction *a6)
{
  uint64_t **result;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  BOOL v16;
  uint64_t v18;
  llvm::Type **v20;
  int v21;
  int v22;
  int v23;
  const char *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  const char *v30;
  int PrimitiveSizeInBits;
  uint64_t v32;
  void *v33;
  size_t v34;
  llvm::Type **v35;
  int v36;
  int v37;
  int v38;
  const char *v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  const void **v43;
  uint64_t v44;
  void *v45;
  unsigned int v46;
  size_t v47;
  unsigned int v48;
  unint64_t v49;
  BOOL v50;
  int v51;
  unsigned int v53;
  int v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  _BOOL4 v59;
  uint64_t v60;
  int v61;
  _BOOL4 v62;
  uint64_t *v63;
  int v64;
  const char *v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  _BOOL4 v69;
  unint64_t v70;
  int v71;
  _BOOL4 v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t **v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t **v81;
  uint64_t **v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  _BOOL4 v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t **v90;
  uint64_t **v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  _BOOL4 v95;
  BOOL v96;
  int v97;
  _QWORD v98[2];
  int v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t **v103;
  unsigned int v104;
  uint64_t **v105;
  unsigned int v106;
  __int128 v107;
  int v108;
  uint64_t **v109;
  unsigned int v110;
  uint64_t **v111;
  unsigned int v112;
  char v113;
  __int128 v114;
  uint64_t v115;
  uint64_t **v116;
  unsigned int v117;
  uint64_t **v118;
  unsigned int v119;
  char v120;
  void *v121;
  unsigned int v122;
  uint64_t **v123;
  unsigned int v124;
  uint64_t **v125;
  unsigned int v126;

  if (a4 == 6)
    return (uint64_t **)sub_1C4DA8D7C(a1, (uint64_t)a2);
  v9 = *(_QWORD *)a2;
  v10 = *(unsigned __int8 *)(*(_QWORD *)a2 + 16);
  if (*(_QWORD *)a2)
    v11 = v10 == 16;
  else
    v11 = 0;
  if (v11)
  {
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v9);
    if ((_DWORD)v30 == 1)
    DWORD2(v114) = PrimitiveSizeInBits - *((_DWORD *)a2 + 4) + *((_DWORD *)a2 + 2) + *((_DWORD *)a2 + 3);
    if (DWORD2(v114) > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v114, 0, 0);
    else
      *(_QWORD *)&v114 = 0;
    v32 = *(unsigned int *)(v9 + 32);
    v126 = v32;
    if (v32 > 0x40)
    {
      v34 = ((unint64_t)(v32 + 63) >> 3) & 0x3FFFFFF8;
      v33 = (void *)operator new[]();
      memcpy(v33, *(const void **)(v9 + 24), v34);
    }
    else
    {
      v33 = *(void **)(v9 + 24);
    }
    v125 = (uint64_t **)v33;
    sub_1C4DA8EE0((uint64_t)&v107, a2, (llvm::APInt *)&v125);
    result = (uint64_t **)sub_1C4DA9024(a1, a2, (uint64_t)&v114, (uint64_t)&v107, 1);
    if (DWORD2(v107) >= 0x41)
    {
      result = (uint64_t **)v107;
      if ((_QWORD)v107)
        result = (uint64_t **)MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
    }
    if (v126 >= 0x41)
    {
      result = v125;
      if (v125)
        result = (uint64_t **)MEMORY[0x1CAA32F9C](v125, 0x1000C8000313F17);
    }
    if (DWORD2(v114) < 0x41)
      return result;
    result = (uint64_t **)v114;
    if (!(_QWORD)v114)
      return result;
    return (uint64_t **)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
  }
  if (v9)
    v16 = v10 >= 0x1C;
  else
    v16 = 0;
  if (v16 && v10 - 59 >= 0xFFFFFFEE)
  {
    v18 = *(_QWORD *)(v9 - 32);
    if (v18 && *(_BYTE *)(v18 + 16) == 16)
    {
      v43 = (const void **)(v18 + 24);
      v44 = *(unsigned int *)(v18 + 32);
      v122 = v44;
      if (v44 > 0x40)
      {
        v47 = ((unint64_t)(v44 + 63) >> 3) & 0x3FFFFFF8;
        v45 = (void *)operator new[]();
        memcpy(v45, *v43, v47);
      }
      else
      {
        v45 = (void *)*v43;
      }
      v121 = v45;
      sub_1C4DA8EE0((uint64_t)&v123, a2, (llvm::APInt *)&v121);
      if (v122 >= 0x41 && v121)
        MEMORY[0x1CAA32F9C](v121, 0x1000C8000313F17);
      HIDWORD(v49) = *(unsigned __int8 *)(v9 + 16) - 41;
      LODWORD(v49) = HIDWORD(v49);
      v48 = v49 >> 1;
      v50 = v48 > 6;
      v51 = (1 << v48) & 0x47;
      if (v50 || v51 == 0)
      {
        v54 = 1;
      }
      else
      {
        v53 = *(unsigned __int8 *)(v9 + 17);
        if ((v53 & 2) == 0 && *((_DWORD *)a2 + 2) || (v54 = (v53 >> 2) & 1, (v53 & 4) == 0) && *((_DWORD *)a2 + 3))
        {
          result = (uint64_t **)sub_1C4DA8D7C(a1, (uint64_t)a2);
          goto LABEL_131;
        }
      }
      if (*((_DWORD *)a2 + 4))
        v55 = 0;
      else
        v55 = v54;
      sub_1C4DA8D7C((uint64_t)&v114, (uint64_t)a2);
      HIDWORD(v56) = *(unsigned __int8 *)(v9 + 16) - 41;
      LODWORD(v56) = HIDWORD(v56);
      switch((v56 >> 1))
      {
        case 0u:
          goto LABEL_94;
        case 1u:
          v57 = *((_QWORD *)a2 + 1);
          v58 = *((_DWORD *)a2 + 4);
          v100 = *(_QWORD *)(v9 - 64);
          v101 = v57;
          v102 = v58;
          result = (uint64_t **)sub_1C4DA179C(&v107, &v100, a3, (a4 + 1), a5, a6);
          v114 = v107;
          LODWORD(v115) = v108;
          if (v117 >= 0x41)
          {
            result = v116;
            if (v116)
              result = (uint64_t **)MEMORY[0x1CAA32F9C](v116, 0x1000C8000313F17);
          }
          v59 = 0;
          v116 = v109;
          v117 = v110;
          v110 = 0;
          if (v119 >= 0x41)
          {
            result = v118;
            if (v118)
            {
              result = (uint64_t **)MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
              v59 = v110 > 0x40;
            }
            else
            {
              v59 = 0;
            }
          }
          v118 = v111;
          v73 = v112;
          v119 = v112;
          v112 = 0;
          v120 = v113;
          if (v59)
          {
            result = v109;
            if (v109)
            {
              result = (uint64_t **)MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
              v73 = v119;
            }
          }
          if (v73 >= 0x41)
          {
            v80 = 0;
            v81 = v118;
            v82 = v123;
            v83 = ((unint64_t)v73 + 63) >> 6;
            v84 = v83;
            do
            {
              v85 = (unint64_t)*v82++;
              v86 = (uint64_t *)((char *)*v81 - v85);
              v87 = (unint64_t)*v81 < v85;
              v88 = (uint64_t *)((char *)*v81 + ~v85);
              if (v80)
              {
                v80 = v88 >= *v81;
              }
              else
              {
                v88 = v86;
                v80 = v87;
              }
              *v81++ = v88;
              --v84;
            }
            while (v84);
            goto LABEL_152;
          }
          v74 = (char *)v118 - (char *)v123;
          if (v73)
            goto LABEL_107;
          goto LABEL_140;
        case 2u:
          v60 = *((_QWORD *)a2 + 1);
          v61 = *((_DWORD *)a2 + 4);
          v98[0] = *(_QWORD *)(v9 - 64);
          v98[1] = v60;
          v99 = v61;
          sub_1C4DA179C(&v100, v98, a3, (a4 + 1), a5, a6);
          result = (uint64_t **)sub_1C4DA22CC((uint64_t)&v107, (uint64_t)&v100, (llvm::APInt *)&v123, v55);
          v114 = v107;
          LODWORD(v115) = v108;
          if (v117 >= 0x41)
          {
            result = v116;
            if (v116)
              result = (uint64_t **)MEMORY[0x1CAA32F9C](v116, 0x1000C8000313F17);
          }
          v62 = 0;
          v116 = v109;
          v117 = v110;
          v110 = 0;
          if (v119 >= 0x41)
          {
            result = v118;
            if (v118)
            {
              result = (uint64_t **)MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
              v62 = v110 > 0x40;
            }
            else
            {
              v62 = 0;
            }
          }
          v118 = v111;
          v119 = v112;
          v112 = 0;
          v120 = v113;
          if (v62)
          {
            result = v109;
            if (v109)
              result = (uint64_t **)MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
          }
          if (v106 >= 0x41)
          {
            result = v105;
            if (v105)
              result = (uint64_t **)MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
          }
          if (v104 >= 0x41)
          {
            result = v103;
            if (v103)
              result = (uint64_t **)MEMORY[0x1CAA32F9C](v103, 0x1000C8000313F17);
          }
          v76 = v120;
          goto LABEL_124;
        case 6u:
          v63 = sub_1C47EE5B8(&v123, 0xFFFFFFFFFFFFFFFFLL);
          v64 = llvm::Type::getPrimitiveSizeInBits(**(llvm::Type ***)a2);
          if ((_DWORD)v65 == 1)
          {
            v97 = v64;
            v64 = v97;
          }
          v67 = *((_DWORD *)a2 + 3);
          v66 = *((_DWORD *)a2 + 4);
          v68 = *((_DWORD *)a2 + 2);
          if ((unint64_t)v63 > v64 - v66 + v68 + v67)
            goto LABEL_100;
          v100 = *(_QWORD *)(v9 - 64);
          v101 = __PAIR64__(v67, v68);
          v102 = v66;
          sub_1C4DA179C(&v107, &v100, a3, (a4 + 1), a5, a6);
          v114 = v107;
          LODWORD(v115) = v108;
          if (v117 >= 0x41 && v116)
            MEMORY[0x1CAA32F9C](v116, 0x1000C8000313F17);
          v69 = 0;
          v116 = v109;
          v117 = v110;
          v110 = 0;
          if (v119 >= 0x41)
          {
            if (v118)
            {
              MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
              v69 = v110 > 0x40;
            }
            else
            {
              v69 = 0;
            }
          }
          v118 = v111;
          v119 = v112;
          v112 = 0;
          v120 = v113;
          if (v69 && v109)
            MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
          v78 = sub_1C47EE5B8(&v123, 0xFFFFFFFFFFFFFFFFLL);
          sub_1C4888094((uint64_t)&v118, v78);
          v79 = sub_1C47EE5B8(&v123, 0xFFFFFFFFFFFFFFFFLL);
          result = (uint64_t **)sub_1C4888094((uint64_t)&v116, v79);
          goto LABEL_109;
        case 8u:
          if (!llvm::MaskedValueIsZero(*(llvm **)(v9 - 64), (const llvm::Value *)v43, a3, 0, a5, (llvm::AssumptionCache *)v9, a6, (const llvm::DominatorTree *)1, v96))goto LABEL_100;
LABEL_94:
          v70 = *((_QWORD *)a2 + 1);
          v71 = *((_DWORD *)a2 + 4);
          v100 = *(_QWORD *)(v9 - 64);
          v101 = v70;
          v102 = v71;
          result = (uint64_t **)sub_1C4DA179C(&v107, &v100, a3, (a4 + 1), a5, a6);
          v114 = v107;
          LODWORD(v115) = v108;
          if (v117 >= 0x41)
          {
            result = v116;
            if (v116)
              result = (uint64_t **)MEMORY[0x1CAA32F9C](v116, 0x1000C8000313F17);
          }
          v72 = 0;
          v116 = v109;
          v117 = v110;
          v110 = 0;
          if (v119 >= 0x41)
          {
            result = v118;
            if (v118)
            {
              result = (uint64_t **)MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
              v72 = v110 > 0x40;
            }
            else
            {
              v72 = 0;
            }
          }
          v118 = v111;
          v73 = v112;
          v119 = v112;
          v112 = 0;
          v120 = v113;
          if (v72)
          {
            result = v109;
            if (v109)
            {
              result = (uint64_t **)MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
              v73 = v119;
            }
          }
          if (v73 >= 0x41)
          {
            v89 = 0;
            v90 = v118;
            v91 = v123;
            v83 = ((unint64_t)v73 + 63) >> 6;
            v92 = v83;
            do
            {
              v93 = (uint64_t)*v91++;
              v94 = (uint64_t *)((char *)*v90 + v93);
              v95 = (uint64_t *)((char *)v94 + 1) <= *v90;
              if (v89)
              {
                v94 = (uint64_t *)((char *)v94 + 1);
                v89 = v95;
              }
              else
              {
                v89 = v94 < *v90;
              }
              *v90++ = v94;
              --v92;
            }
            while (v92);
LABEL_152:
            v118[(v83 - 1)] = (uint64_t *)((unint64_t)v118[(v83 - 1)] & (0xFFFFFFFFFFFFFFFFLL >> -(char)v73));
          }
          else
          {
            v74 = (unint64_t)v123 + (_QWORD)v118;
            if (v73)
LABEL_107:
              v75 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v73;
            else
LABEL_140:
              v75 = 0;
            v118 = (uint64_t **)(v75 & v74);
          }
LABEL_109:
          if (v120)
            v76 = v55;
          else
            v76 = 0;
          v120 = v76;
LABEL_124:
          *(_OWORD *)a1 = v114;
          *(_DWORD *)(a1 + 32) = v117;
          v77 = v116;
          *(_QWORD *)(a1 + 16) = v115;
          *(_QWORD *)(a1 + 24) = v77;
          *(_DWORD *)(a1 + 48) = v119;
          *(_QWORD *)(a1 + 40) = v118;
          v117 = 0;
          v119 = 0;
          *(_BYTE *)(a1 + 56) = v76;
LABEL_125:
          if (v119 >= 0x41)
          {
            result = v118;
            if (v118)
              result = (uint64_t **)MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
          }
          if (v117 >= 0x41)
          {
            result = v116;
            if (v116)
              result = (uint64_t **)MEMORY[0x1CAA32F9C](v116, 0x1000C8000313F17);
          }
          break;
        default:
LABEL_100:
          result = (uint64_t **)sub_1C4DA8D7C(a1, (uint64_t)a2);
          goto LABEL_125;
      }
LABEL_131:
      if (v124 < 0x41)
        return result;
      result = v123;
      if (!v123)
        return result;
      return (uint64_t **)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    }
  }
  if (v10 == 68)
  {
    v35 = *(llvm::Type ***)(v9 - 32);
    v36 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v9);
    v38 = v37;
    v40 = v36 - llvm::Type::getPrimitiveSizeInBits(*v35);
    if (v38 == 1)
    v41 = *((_DWORD *)a2 + 4);
    v29 = v41 - v40;
    if (v41 >= v40)
    {
      v42 = *((_DWORD *)a2 + 3);
    }
    else
    {
      v29 = 0;
      v42 = v40 - v41 + *((_DWORD *)a2 + 3);
    }
    v46 = *((_DWORD *)a2 + 2);
    *(_QWORD *)&v114 = v35;
    *((_QWORD *)&v114 + 1) = __PAIR64__(v42, v46);
  }
  else
  {
    if (v10 != 67)
      return (uint64_t **)sub_1C4DA8D7C(a1, (uint64_t)a2);
    v20 = *(llvm::Type ***)(v9 - 32);
    v21 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v9);
    v23 = v22;
    v25 = v21 - llvm::Type::getPrimitiveSizeInBits(*v20);
    if (v23 == 1)
    v27 = *((_DWORD *)a2 + 3);
    v26 = *((_DWORD *)a2 + 4);
    v28 = *((_DWORD *)a2 + 2);
    if (v25 > v26)
    {
      v28 += v25 - v26 + v27;
      v27 = 0;
    }
    v16 = v26 >= v25;
    v29 = v26 - v25;
    if (!v16)
      v29 = 0;
    *(_QWORD *)&v114 = v20;
    *((_QWORD *)&v114 + 1) = __PAIR64__(v27, v28);
  }
  LODWORD(v115) = v29;
  return (uint64_t **)sub_1C4DA179C(a1, &v114, a3, (a4 + 1), a5, a6);
}

uint64_t sub_1C4DA22CC(uint64_t a1, uint64_t a2, llvm::APInt *this, int a4)
{
  unsigned int v8;
  BOOL v9;
  char v10;
  llvm::APInt *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;

  if (*(_BYTE *)(a2 + 56))
  {
    v8 = *((_DWORD *)this + 2);
    if (v8 > 0x40)
      v9 = llvm::APInt::countLeadingZerosSlowCase(this) == v8 - 1;
    else
      v9 = *(_QWORD *)this == 1;
    v10 = v9;
    if ((v10 & 1) == 0 && a4)
    {
      v11 = (llvm::APInt *)(a2 + 40);
      v12 = *(_DWORD *)(a2 + 48);
      if (v12 > 0x40)
        v13 = llvm::APInt::countLeadingZerosSlowCase(v11) == v12;
      else
        v13 = *(_QWORD *)v11 == 0;
      v10 = v13;
    }
  }
  else
  {
    v10 = 0;
  }
  llvm::APInt::operator*(a2 + 24, this, (uint64_t)&v17);
  llvm::APInt::operator*(a2 + 40, this, (uint64_t)&v15);
  result = sub_1C4DA9024(a1, (__int128 *)a2, (uint64_t)&v17, (uint64_t)&v15, v10);
  if (v16 >= 0x41)
  {
    result = v15;
    if (v15)
      result = MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  }
  if (v18 >= 0x41)
  {
    result = v17;
    if (v17)
      JUMPOUT(0x1CAA32F9CLL);
  }
  return result;
}

uint64_t sub_1C4DA2414(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  v6 = *a1 + 56 * v5;
  v7 = a2 + 56;
  if (a2 + 56 != v6)
  {
    do
    {
      *(_OWORD *)(v7 - 56) = *(_OWORD *)v7;
      *(_DWORD *)(v7 - 40) = *(_DWORD *)(v7 + 16);
      if (*(_DWORD *)(v7 - 24) >= 0x41u)
      {
        v8 = *(_QWORD *)(v7 - 32);
        if (v8)
          MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
      }
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(v7 + 24);
      *(_DWORD *)(v7 - 24) = *(_DWORD *)(v7 + 32);
      *(_DWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(v7 + 40);
      *(_BYTE *)(v7 - 8) = *(_BYTE *)(v7 + 48);
      v7 += 56;
    }
    while (v7 != v6);
    v5 = *((_DWORD *)a1 + 2);
    v4 = *a1;
  }
  v9 = v5 - 1;
  *((_DWORD *)a1 + 2) = v9;
  if (*(_DWORD *)(v4 + 56 * v9 + 32) >= 0x41u)
  {
    v10 = *(_QWORD *)(v4 + 56 * v9 + 24);
    if (v10)
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  }
  return a2;
}

uint64_t sub_1C4DA2510(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned int v6;
  void *v7;
  size_t v8;
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  void *__src;
  unsigned int v17;

  v5 = *(unsigned int *)(a2 + 8);
  v6 = v5 - a3;
  v17 = *(_DWORD *)(a2 + 8);
  if (v5 > 0x40)
  {
    v8 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
    v7 = (void *)operator new[]();
    memcpy(v7, *(const void **)a2, v8);
  }
  else
  {
    v7 = *(void **)a2;
  }
  __src = v7;
  result = sub_1C4888094((uint64_t)&__src, v6);
  v10 = v17;
  a1[2] = v17;
  if (v10 > 0x40)
  {
    v14 = ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8;
    v15 = (void *)operator new[]();
    *(_QWORD *)a1 = v15;
    memcpy(v15, __src, v14);
    result = (uint64_t)llvm::APInt::ashrSlowCase(a1, v6);
  }
  else
  {
    if ((_DWORD)v10 == v6)
      v11 = 63;
    else
      v11 = v6;
    v12 = (uint64_t)((_QWORD)__src << -(char)v10) >> -(char)v10 >> v11;
    if ((_DWORD)v10)
      v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v10;
    else
      v13 = 0;
    *(_QWORD *)a1 = v13 & v12;
  }
  if (v17 >= 0x41)
  {
    result = (uint64_t)__src;
    if (__src)
      return MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  }
  return result;
}

void sub_1C4DA2660(uint64_t a1, char *a2)
{
  char *v2;
  uint64_t v4;
  char *v5;
  char *v6;
  __int128 v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  _BOOL4 v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unsigned int v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(char **)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v15 = v5 <= a2 && &v5[56 * v4] > a2;
    if (v15)
      v16 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v5) >> 3);
    else
      v16 = -1;
    v28 = 0;
    v17 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v4 + 1, 56, &v28);
    v5 = v17;
    v18 = *(char **)a1;
    v19 = *(_DWORD *)(a1 + 8);
    if (v19)
    {
      v20 = &v18[56 * v19];
      v21 = v17;
      do
      {
        v22 = *(_OWORD *)v18;
        *((_QWORD *)v21 + 2) = *((_QWORD *)v18 + 2);
        *(_OWORD *)v21 = v22;
        *((_DWORD *)v21 + 8) = *((_DWORD *)v18 + 8);
        *((_QWORD *)v21 + 3) = *((_QWORD *)v18 + 3);
        *((_DWORD *)v18 + 8) = 0;
        v23 = *((_QWORD *)v18 + 5);
        v21[48] = v18[48];
        *((_QWORD *)v21 + 5) = v23;
        v18 += 56;
        v21 += 56;
      }
      while (v18 != v20);
      v18 = *(char **)a1;
      v24 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v24)
      {
        v25 = 56 * v24;
        do
        {
          if (*(_DWORD *)&v18[v25 - 24] >= 0x41u)
          {
            v26 = *(_QWORD *)&v18[v25 - 32];
            if (v26)
              MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
          }
          v25 -= 56;
        }
        while (v25);
        v18 = *(char **)a1;
      }
    }
    v27 = v28;
    if (v18 != (char *)(a1 + 16))
      free(v18);
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 12) = v27;
    if (v15)
      v2 = &v5[56 * v16];
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  v6 = &v5[56 * v4];
  v7 = *(_OWORD *)v2;
  *((_QWORD *)v6 + 2) = *((_QWORD *)v2 + 2);
  *(_OWORD *)v6 = v7;
  v8 = *((_DWORD *)v2 + 8);
  *((_DWORD *)v6 + 8) = v8;
  v9 = (unsigned int *)(v6 + 32);
  v10 = v9 - 2;
  if (v8 > 0x40)
  {
    v11 = (void *)operator new[]();
    *(_QWORD *)v10 = v11;
    memcpy(v11, *((const void **)v2 + 3), (((unint64_t)*v9 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)v10 = *((_QWORD *)v2 + 3);
  }
  v12 = &v5[56 * v4];
  v13 = *((_QWORD *)v2 + 5);
  v12[48] = v2[48];
  *((_QWORD *)v12 + 5) = v13;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t llvm::BasicAAResult::pointsToConstantMemory(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  llvm *v11;
  llvm *UnderlyingObject;
  char v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  void *v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  void *v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[17];

  v41[16] = *MEMORY[0x1E0C80C00];
  v7 = **a2;
  v8 = *(_DWORD *)(v7 + 8);
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(v7 + 16) + 8);
  if (!(*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 1224))(**(_QWORD **)(a1 + 32), v8 >> 8))return 1;
  v38 = v41;
  v40 = 16;
  v41[0] = *a2;
  v9 = 8;
  v10 = 1;
  while (1)
  {
    v11 = (llvm *)*((_QWORD *)v38 + v10 - 1);
    v39 = v10 - 1;
    UnderlyingObject = llvm::getUnderlyingObject(v11, (const llvm::Value *)6);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 160), (uint64_t)UnderlyingObject);
    if (!v13)
    {
      v24 = *(void **)(a1 + 168);
      v25 = *(void **)(a1 + 160);
      goto LABEL_31;
    }
    v14 = *(_DWORD *)(*(_QWORD *)UnderlyingObject + 8);
    if ((v14 & 0xFE) == 0x12)
      v14 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)UnderlyingObject + 16) + 8);
    if (!(*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 1224))(**(_QWORD **)(a1 + 32), v14 >> 8))goto LABEL_26;
    v15 = *((unsigned __int8 *)UnderlyingObject + 16);
    if (a4)
    {
      if (v15 == 59)
        goto LABEL_26;
    }
    if (v15 == 85)
    {
      v19 = *((_QWORD *)UnderlyingObject - 8);
      v20 = v39;
      if (v39 >= (unint64_t)v40)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v41, v39 + 1, 8);
        v20 = v39;
      }
      *((_QWORD *)v38 + v20) = v19;
      v21 = v39 + 1;
      v39 = v21;
      v22 = *((_QWORD *)UnderlyingObject - 4);
      if (v21 >= v40)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v41, v21 + 1, 8);
        LODWORD(v21) = v39;
      }
      *((_QWORD *)v38 + v21) = v22;
      ++v39;
      goto LABEL_26;
    }
    if (v15 == 83)
    {
      v16 = *((_DWORD *)UnderlyingObject + 5);
      v17 = v16 & 0x7FFFFFF;
      if ((v16 & 0x7FFFFFFu) > v9)
        break;
      if ((v16 & 0x40000000) != 0)
      {
        v18 = (char *)*((_QWORD *)UnderlyingObject - 1);
      }
      else
      {
        v17 = v17;
        v18 = (char *)UnderlyingObject - 32 * v17;
      }
      sub_1C4DA9878((unsigned int *)&v38, (uint64_t)v38 + 8 * v39, v18, &v18[32 * v17]);
      goto LABEL_26;
    }
    if (v15 != 3 || (*((_BYTE *)UnderlyingObject + 80) & 1) == 0)
      break;
LABEL_26:
    v10 = v39;
    --v9;
    if (!v39 || !v9)
    {
      v26 = *(void **)(a1 + 168);
      if (v26 != *(void **)(a1 + 160))
      {
        v29 = *(unsigned int *)(a1 + 176);
        if (v29 >= 0x21 && 4 * (*(_DWORD *)(a1 + 180) - *(_DWORD *)(a1 + 184)) < v29)
        {
          free(v26);
          v34 = *(_DWORD *)(a1 + 180) - *(_DWORD *)(a1 + 184);
          v35 = 1 << (33 - __clz(v34 - 1));
          *(_DWORD *)(a1 + 180) = 0;
          *(_DWORD *)(a1 + 184) = 0;
          if (v34 <= 0x10)
            v36 = 32;
          else
            v36 = v35;
          *(_DWORD *)(a1 + 176) = v36;
          v37 = malloc_type_malloc(8 * v36, 0x4065EBACuLL);
          if (!v37)
            goto LABEL_56;
          *(_QWORD *)(a1 + 168) = v37;
          memset(v37, 255, 8 * *(unsigned int *)(a1 + 176));
LABEL_35:
          v23 = v39 == 0;
          goto LABEL_36;
        }
        memset(v26, 255, 8 * v29);
      }
      *(_DWORD *)(a1 + 180) = 0;
      *(_DWORD *)(a1 + 184) = 0;
      goto LABEL_35;
    }
  }
  v25 = *(void **)(a1 + 160);
  v24 = *(void **)(a1 + 168);
LABEL_31:
  if (v24 != v25)
  {
    v28 = *(unsigned int *)(a1 + 176);
    if (v28 < 0x21 || 4 * (*(_DWORD *)(a1 + 180) - *(_DWORD *)(a1 + 184)) >= v28)
    {
      memset(v24, 255, 8 * v28);
      goto LABEL_32;
    }
    free(v24);
    v30 = *(_DWORD *)(a1 + 180) - *(_DWORD *)(a1 + 184);
    v31 = 1 << (33 - __clz(v30 - 1));
    *(_DWORD *)(a1 + 180) = 0;
    *(_DWORD *)(a1 + 184) = 0;
    if (v30 <= 0x10)
      v32 = 32;
    else
      v32 = v31;
    *(_DWORD *)(a1 + 176) = v32;
    v33 = malloc_type_malloc(8 * v32, 0x4065EBACuLL);
    if (v33)
    {
      *(_QWORD *)(a1 + 168) = v33;
      memset(v33, 255, 8 * *(unsigned int *)(a1 + 176));
      v23 = 0;
      goto LABEL_36;
    }
LABEL_56:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
LABEL_32:
  v23 = 0;
  *(_DWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 184) = 0;
LABEL_36:
  if (v38 != v41)
    free(v38);
  return v23;
}

uint64_t llvm::BasicAAResult::getModRefBehavior(llvm::BasicAAResult *this, const llvm::CallBase *a2)
{
  uint64_t v4;
  uint64_t hasFnAttrOnCalledFunction;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int ModRefBehavior;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int32 v33;

  v4 = *((_QWORD *)a2 + 8);
  if (v4 && (*(_BYTE *)(v4 + 17) & 0x10) != 0)
    return 4;
  v33 = 7;
  hasFnAttrOnCalledFunction = sub_1C53E4BBC((uint64_t)a2, &v33, 1uLL);
  if ((hasFnAttrOnCalledFunction & 1) == 0
    || (v19 = *((_QWORD *)a2 - 4)) != 0
    && !*(_BYTE *)(v19 + 16)
    && *(_QWORD *)(v19 + 24) == *((_QWORD *)a2 + 9)
    && *(_DWORD *)(v19 + 36) == 7)
  {
    hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44);
    if ((hasFnAttrOnCalledFunction & 1) != 0)
      return 4;
  }
  v6 = *((_QWORD *)a2 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 17) & 0x30) == 0)
  {
    v7 = *((_DWORD *)a2 + 5);
    if (v7 < 0)
    {
      v20 = (char *)a2 - 32 * (v7 & 0x7FFFFFF);
      v23 = *((_QWORD *)v20 - 1);
      v21 = v20 - 8;
      v22 = v23;
      if (v23)
      {
        v24 = -v22;
        do
        {
          v25 = *(_DWORD *)(*(_QWORD *)&v21[v24] + 8);
          v26 = v25 > 7;
          v27 = (1 << v25) & 0x83;
          if (v26 || v27 == 0)
            goto LABEL_11;
          v24 += 16;
        }
        while (v24);
      }
    }
    hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 45);
    if ((hasFnAttrOnCalledFunction & 1) == 0)
    {
      hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44);
      if ((hasFnAttrOnCalledFunction & 1) == 0)
      {
        v6 = *((_QWORD *)a2 + 8);
LABEL_11:
        if (v6 && ((*(_BYTE *)(v6 + 20) & 4) != 0 || (*(_BYTE *)(v6 + 17) & 0x10) != 0)
          || ((v33 = 7,
               hasFnAttrOnCalledFunction = sub_1C53E4BBC((uint64_t)a2, &v33, 1uLL),
               (hasFnAttrOnCalledFunction & 1) == 0)
           || (v32 = *((_QWORD *)a2 - 4)) != 0
           && !*(_BYTE *)(v32 + 16)
           && *(_QWORD *)(v32 + 24) == *((_QWORD *)a2 + 9)
           && *(_DWORD *)(v32 + 36) == 7)
          && ((hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 66),
               (hasFnAttrOnCalledFunction & 1) != 0)
           || (hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 44),
               (_DWORD)hasFnAttrOnCalledFunction)))
        {
          v8 = 62;
        }
        else
        {
          v8 = 63;
        }
        goto LABEL_20;
      }
    }
  }
  v8 = 61;
LABEL_20:
  v9 = *((_QWORD *)a2 + 8);
  if (v9 && (*(_BYTE *)(v9 + 12) & 8) != 0
    || ((v33 = 7,
         hasFnAttrOnCalledFunction = sub_1C53E4BBC((uint64_t)a2, &v33, 1uLL),
         (hasFnAttrOnCalledFunction & 1) == 0)
     || (v29 = *((_QWORD *)a2 - 4)) != 0
     && !*(_BYTE *)(v29 + 16)
     && *(_QWORD *)(v29 + 24) == *((_QWORD *)a2 + 9)
     && *(_DWORD *)(v29 + 36) == 7)
    && (hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 3),
        (_DWORD)hasFnAttrOnCalledFunction))
  {
    v8 &= 0xFu;
  }
  else
  {
    v10 = *((_QWORD *)a2 + 8);
    if (v10 && (*(_BYTE *)(v10 + 13) & 8) != 0
      || ((v33 = 7,
           hasFnAttrOnCalledFunction = sub_1C53E4BBC((uint64_t)a2, &v33, 1uLL),
           (hasFnAttrOnCalledFunction & 1) == 0)
       || (v30 = *((_QWORD *)a2 - 4)) != 0
       && !*(_BYTE *)(v30 + 16)
       && *(_QWORD *)(v30 + 24) == *((_QWORD *)a2 + 9)
       && *(_DWORD *)(v30 + 36) == 7)
      && (hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 11),
          (_DWORD)hasFnAttrOnCalledFunction))
    {
      v8 &= 0x17u;
    }
    else
    {
      v11 = *((_QWORD *)a2 + 8);
      if (v11 && (*(_BYTE *)(v11 + 13) & 0x10) != 0
        || ((v33 = 7,
             hasFnAttrOnCalledFunction = sub_1C53E4BBC((uint64_t)a2, &v33, 1uLL),
             (hasFnAttrOnCalledFunction & 1) == 0)
         || (v31 = *((_QWORD *)a2 - 4)) != 0
         && !*(_BYTE *)(v31 + 16)
         && *(_QWORD *)(v31 + 24) == *((_QWORD *)a2 + 9)
         && *(_DWORD *)(v31 + 36) == 7)
        && (hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)a2, 12),
            (_DWORD)hasFnAttrOnCalledFunction))
      {
        v8 &= 0x1Fu;
      }
    }
  }
  v12 = *((_DWORD *)a2 + 5);
  if ((v12 & 0x80000000) == 0 || (*((_QWORD *)a2 - 4 * (v12 & 0x7FFFFFF) - 1) & 0xFFFFFFFF0) == 0)
  {
    v13 = *((_QWORD *)a2 - 4);
    if (v13)
    {
      if (!*(_BYTE *)(v13 + 16) && *(_QWORD *)(v13 + 24) == *((_QWORD *)a2 + 9))
      {
        v14 = *(_QWORD *)this;
        if (*(_QWORD *)this)
        {
          v15 = *(_QWORD **)(v14 + 8);
          v16 = *(_QWORD **)(v14 + 16);
          ModRefBehavior = 63;
          while (v15 != v16)
          {
            ModRefBehavior &= (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v15 + 56))(*v15, v13);
            if (ModRefBehavior == 4)
              break;
            ++v15;
          }
        }
        else
        {
          ModRefBehavior = llvm::BasicAAResult::getModRefBehavior((llvm::BasicAAResult *)hasFnAttrOnCalledFunction, *((const Function **)a2 - 4));
        }
        return ModRefBehavior & v8;
      }
    }
  }
  return v8;
}

uint64_t llvm::BasicAAResult::getModRefBehavior(llvm::BasicAAResult *this, const Function *a2)
{
  _BYTE *v2;
  unsigned int v3;
  char v4;

  v2 = (_BYTE *)*((_QWORD *)a2 + 14);
  if (!v2)
    return 63;
  if ((v2[17] & 0x10) != 0)
    return 4;
  if ((v2[17] & 0x20) != 0)
  {
    v3 = 61;
  }
  else if ((v2[20] & 4) != 0)
  {
    v3 = 62;
  }
  else
  {
    v3 = 63;
  }
  if ((v2[12] & 8) != 0)
    return v3 & 0xF;
  v4 = v2[13];
  if ((v4 & 8) != 0)
    return v3 & 0x17;
  if ((v4 & 0x10) != 0)
    return v3 & 0x1F;
  return v3;
}

uint64_t llvm::BasicAAResult::getArgModRefInfo(llvm::BasicAAResult *this, const llvm::CallBase *a2, int a3)
{
  uint64_t *v5;
  int HasAttr;
  uint64_t ***v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ****v14;
  uint64_t ***v15;
  int v16;
  int v17;
  uint64_t ***v18;
  char *v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  int v23;
  int v24;

  v5 = (uint64_t *)*((_QWORD *)this + 3);
  HasAttr = llvm::CallBase::paramHasAttr((uint64_t)a2, a3, 66);
  if ((HasAttr & 1) != 0)
    return 6;
  v24 = 0;
  v8 = (uint64_t ***)*((_QWORD *)a2 - 4);
  if (v8)
  {
    if (!*((_BYTE *)v8 + 16))
    {
      v9 = (uint64_t)v8[3];
      if (v9 == *((_QWORD *)a2 + 9) && (*((_BYTE *)v8 + 33) & 0x20) == 0)
      {
        if ((*((_BYTE *)v8 + 23) & 0x10) == 0)
        {
          v20 = 0;
          v19 = &byte_1C871356D;
          goto LABEL_22;
        }
        v10 = ***v8;
        v11 = *(_QWORD *)(v10 + 152);
        v12 = *(unsigned int *)(v10 + 168);
        if ((_DWORD)v12)
        {
          LODWORD(v13) = (v12 - 1) & ((v8 >> 4) ^ (v8 >> 9));
          v14 = (uint64_t ****)(v11 + 16 * v13);
          v15 = *v14;
          if (*v14 == v8)
          {
LABEL_21:
            v18 = v14[1];
            v21 = (size_t)*v18;
            v19 = (char *)(v18 + 2);
            v20 = v21;
LABEL_22:
            v22 = *v5;
            if (llvm::TargetLibraryInfoImpl::getLibFunc(HasAttr, v19, v20, &v24))
            {
              v23 = v24;
              if (llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v22, v9, v24))
              {
                if (v23 == 327 && (*(_BYTE *)(v5[1] + 40) & 0x80) == 0 && !a3 && *(unsigned __int8 *)(*v5 + 81) > 0x3Fu)
                  return 6;
              }
            }
            goto LABEL_7;
          }
          v16 = 1;
          while (v15 != (uint64_t ***)-4096)
          {
            v17 = v13 + v16++;
            v13 = v17 & (v12 - 1);
            v15 = *(uint64_t ****)(v11 + 16 * v13);
            if (v15 == v8)
            {
              v14 = (uint64_t ****)(v11 + 16 * v13);
              goto LABEL_21;
            }
          }
        }
        v14 = (uint64_t ****)(v11 + 16 * v12);
        goto LABEL_21;
      }
    }
  }
LABEL_7:
  if ((llvm::CallBase::paramHasAttr((uint64_t)a2, a3, 45) & 1) != 0)
    return 5;
  if (llvm::CallBase::paramHasAttr((uint64_t)a2, a3, 44))
    return 4;
  return 7;
}

uint64_t llvm::BasicAAResult::alias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return llvm::BasicAAResult::aliasCheck(a1, *(llvm::Value **)a2, *(_QWORD *)(a2 + 8), *(llvm::Value **)a3, *(_QWORD *)(a3 + 8), a4);
}

uint64_t llvm::BasicAAResult::aliasCheck(uint64_t a1, llvm::Value *a2, unint64_t a3, llvm::Value *a4, unint64_t a5, uint64_t a6)
{
  int64_t v7;
  int64_t v9;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  llvm *v20;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned __int8 *UnderlyingObject;
  llvm *v27;
  const llvm::Value *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  const llvm::Value *v36;
  int isIdentifiedObject;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  const llvm::DataLayout *v45;
  uint64_t PointerDereferenceableBytes;
  const llvm::Value *v47;
  const llvm::Value *v48;
  const llvm::Value *v49;
  const llvm::DataLayout *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  const llvm::Value *v54;
  __int128 v56;
  char v57;
  uint64_t v58;
  uint64_t *v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  __int128 v65;
  _OWORD *v66;
  _OWORD *v67;
  __int128 v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  BOOL v75[16];
  __int128 v76;
  BOOL v77[16];
  __int128 v78;

  v7 = a5;
  v9 = a3;
  v12 = a3 & 0x7FFFFFFFFFFFFFFFLL;
  if (a3 <= 0xFFFFFFFFFFFFFFFDLL && !v12)
    return v12;
  v13 = a5 & 0x7FFFFFFFFFFFFFFFLL;
  if (a5 <= 0xFFFFFFFFFFFFFFFDLL && !v13)
    return 0;
  if ((*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 1208))(**(_QWORD **)(a1 + 32))
    && (v14 = *(_DWORD *)(*(_QWORD *)a2 + 8), v14 == 15)
    && (v15 = *(_DWORD *)(*(_QWORD *)a4 + 8), v15 == 15))
  {
    if ((v14 & 0xFE) == 0x12)
      v14 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
    v16 = v14 >> 8;
    if ((v15 & 0xFE) == 0x12)
      v15 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a4 + 16) + 8);
    v17 = v15 >> 8;
    if (!(*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 32) + 1216))(**(_QWORD **)(a1 + 32), v16, v17))return 0;
  }
  else
  {
    LODWORD(v17) = 0;
    v16 = 0;
  }
  v18 = (unsigned __int8 *)llvm::Value::stripPointerCastsForAliasAnalysis(a2);
  v19 = (unsigned __int8 *)llvm::Value::stripPointerCastsForAliasAnalysis(a4);
  if (v18[16] - 11 < 2)
    return 0;
  v20 = (llvm *)v19;
  if (v19[16] - 11 < 2)
    return 0;
  if (llvm::BasicAAResult::isValueEqualInPotentialCycles((llvm::BasicAAResult *)a1, (const llvm::Value *)v18, (const llvm::Value *)v19))
  {
    return 3;
  }
  if (*(_BYTE *)(*(_QWORD *)v18 + 8) != 15 || *(_BYTE *)(*(_QWORD *)v20 + 8) != 15)
    return 0;
  if ((*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 1208))(**(_QWORD **)(a1 + 32)))
  {
    v22 = *(_DWORD *)(*(_QWORD *)v18 + 8);
    if ((v22 & 0xFE) == 0x12)
      v22 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v18 + 16) + 8);
    v23 = v22 >> 8;
    v24 = *(_DWORD *)(*(_QWORD *)v20 + 8);
    if ((v24 & 0xFE) == 0x12)
      v24 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v20 + 16) + 8);
    if ((_DWORD)v16 == v23)
    {
      if ((_DWORD)v17 != v24 >> 8
        && !(*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 1216))(**(_QWORD **)(a1 + 32), v16))
      {
        return 0;
      }
    }
    else
    {
      v25 = v24 >> 8;
      v72 = v23;
      if (!(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 1216))(**(_QWORD **)(a1 + 32))
        || (_DWORD)v17 != (_DWORD)v25
        && ((*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 1216))(**(_QWORD **)(a1 + 32), v72, v25) & 1) == 0)
      {
        return 0;
      }
    }
  }
  UnderlyingObject = (unsigned __int8 *)llvm::getUnderlyingObject((llvm *)v18, (const llvm::Value *)6);
  v27 = llvm::getUnderlyingObject(v20, (const llvm::Value *)6);
  v29 = (unsigned __int8 *)v27;
  if (UnderlyingObject[16] == 19 && UnderlyingObject)
  {
    v30 = *(_QWORD *)(a1 + 16);
    v31 = *(_DWORD *)(*(_QWORD *)UnderlyingObject + 8);
    if (v30 && (v32 = *(_QWORD *)(v30 + 112)) != 0)
    {
      if ((*(_BYTE *)(v32 + 17) & 1) == 0 && v31 <= 0xFF)
        return 0;
    }
    else if (v31 < 0x100)
    {
      return 0;
    }
  }
  if (*((_BYTE *)v27 + 16) == 19 && v27)
  {
    v33 = *(_QWORD *)(a1 + 16);
    v34 = *(_DWORD *)(*(_QWORD *)v27 + 8);
    if (v33 && (v35 = *(_QWORD *)(v33 + 112)) != 0)
    {
      if ((*(_BYTE *)(v35 + 17) & 1) == 0 && v34 <= 0xFF)
        return 0;
    }
    else if (v34 < 0x100)
    {
      return 0;
    }
  }
  if (UnderlyingObject != (unsigned __int8 *)v27)
  {
    if (llvm::isIdentifiedObject((llvm *)UnderlyingObject, v28)
      && (llvm::isIdentifiedObject((llvm *)v29, v36) & 1) != 0)
    {
      return 0;
    }
    if (UnderlyingObject[16] <= 0x14u && llvm::isIdentifiedObject((llvm *)v29, v36))
    {
      if (v29[16] >= 0x15u)
        return 0;
    }
    else if (v29[16] >= 0x15u)
    {
      v38 = UnderlyingObject[16];
      goto LABEL_63;
    }
    isIdentifiedObject = llvm::isIdentifiedObject((llvm *)UnderlyingObject, v36);
    v38 = UnderlyingObject[16];
    if (isIdentifiedObject)
    {
      if (v38 >= 0x15)
        return 0;
      goto LABEL_65;
    }
LABEL_63:
    if (v38 == 21 && (llvm::isIdentifiedFunctionLocal((llvm *)v29, v36) & 1) != 0)
      return 0;
LABEL_65:
    if (v29[16] != 21 || (llvm::isIdentifiedFunctionLocal((llvm *)UnderlyingObject, v36) & 1) == 0)
    {
      v39 = UnderlyingObject[16];
      if (v39 < 0x1C
        || (v40 = v39 - 33, v40 > 0x33)
        || ((1 << v40) & 0x8080008000041) == 0
        || ((*(uint64_t (**)(_QWORD, unsigned __int8 *, unsigned __int8 *))(**(_QWORD **)(a6 + 328) + 16))(*(_QWORD *)(a6 + 328), v29, UnderlyingObject) & 1) == 0)
      {
        v41 = v29[16];
        if (v41 < 0x1C)
          goto LABEL_75;
        v42 = v41 - 33;
        if (v42 > 0x33
          || ((1 << v42) & 0x8080008000041) == 0
          || ((*(uint64_t (**)(_QWORD, unsigned __int8 *, unsigned __int8 *))(**(_QWORD **)(a6 + 328) + 16))(*(_QWORD *)(a6 + 328), UnderlyingObject, v29) & 1) == 0)
        {
          goto LABEL_75;
        }
      }
    }
    return 0;
  }
LABEL_75:
  v43 = *(_QWORD *)(a1 + 16);
  v73 = 0;
  if (v43)
  {
    v44 = *(_QWORD *)(v43 + 112);
    if (v44)
    {
      if ((*(_BYTE *)(v44 + 17) & 1) != 0)
        v73 = 1;
    }
  }
  v45 = *(const llvm::DataLayout **)(a1 + 8);
  v77[0] = 0;
  v75[0] = 0;
  PointerDereferenceableBytes = llvm::Value::getPointerDereferenceableBytes((uint64_t ***)v18, v45, v77, v75);
  if ((v73 & v77[0]) != 0)
    v47 = 0;
  else
    v47 = (const llvm::Value *)PointerDereferenceableBytes;
  if ((unint64_t)v47 <= v12)
    v48 = (const llvm::Value *)v12;
  else
    v48 = v47;
  if (v9 >= 0)
    v49 = v48;
  else
    v49 = v47;
  v12 = 0;
  if ((sub_1C4DA82F8((llvm *)v29, v49, *(llvm::DataLayout **)(a1 + 8), *(llvm::DataLayout **)(a1 + 24), v73) & 1) == 0)
  {
    v50 = *(const llvm::DataLayout **)(a1 + 8);
    v77[0] = 0;
    v75[0] = 0;
    v51 = llvm::Value::getPointerDereferenceableBytes((uint64_t ***)v20, v50, v77, v75);
    v52 = (v73 & v77[0]) != 0 ? 0 : v51;
    v53 = v52 <= v13 ? v7 & 0x7FFFFFFFFFFFFFFFLL : v52;
    v54 = (const llvm::Value *)(v7 >= 0 ? v53 : v52);
    v12 = 0;
    if ((sub_1C4DA82F8((llvm *)UnderlyingObject, v54, *(llvm::DataLayout **)(a1 + 8), *(llvm::DataLayout **)(a1 + 24), v73) & 1) == 0)
    {
      if (v9 == -1 || v7 == -1)
      {
        v7 = -2;
        v9 = -2;
      }
      if (*(_DWORD *)(a6 + 336) > 0x1FFu)
        return 1;
      *(_QWORD *)v77 = v18;
      *(_QWORD *)&v77[8] = v9;
      *(_QWORD *)&v78 = v20;
      *((_QWORD *)&v78 + 1) = v7;
      if (v18 > (unsigned __int8 *)v20)
      {
        v56 = *(_OWORD *)v77;
        *(_OWORD *)v77 = v78;
        v78 = v56;
      }
      *(_QWORD *)v75 = 0;
      v57 = sub_1C4DA9A0C(a6, (uint64_t *)v77, (uint64_t **)v75);
      v58 = *(_QWORD *)v75;
      if ((v57 & 1) != 0)
      {
        v69 = *(_DWORD *)(*(_QWORD *)v75 + 36);
        if ((v69 & 0x80000000) == 0)
        {
          *(_DWORD *)(*(_QWORD *)v75 + 36) = v69 + 1;
          ++*(_DWORD *)(a6 + 340);
        }
        v12 = *(unsigned int *)(v58 + 32);
        if (v18 > (unsigned __int8 *)v20 && (v12 & 0x100) != 0 && !((((int)v12 >> 9) + 0x3FFFFF) >> 23))
          return (*(_DWORD *)(v58 + 32) - (*(_DWORD *)(v58 + 32) & 0xFFFFFE00)) | 0x100;
      }
      else
      {
        v59 = sub_1C4DA9B54((_DWORD *)a6, (uint64_t)v77, (uint64_t *)v77, *(uint64_t **)v75);
        *(_OWORD *)v59 = *(_OWORD *)v77;
        *((_OWORD *)v59 + 1) = v78;
        v59[4] = 0;
        v74 = *(_DWORD *)(a6 + 340);
        v60 = *(_DWORD *)(a6 + 352);
        v12 = llvm::BasicAAResult::aliasCheckRecursive((llvm::BasicAAResult *)a1, (llvm::BasicAAResult *)v18, v9, v20, v7, a6, UnderlyingObject, v29);
        *(_QWORD *)v75 = 0;
        if ((sub_1C4DA9A0C(a6, (uint64_t *)v77, (uint64_t **)v75) & 1) != 0)
        {
          v61 = *(_QWORD *)v75;
        }
        else
        {
          if ((*(_DWORD *)a6 & 1) != 0)
            v70 = a6 + 8;
          else
            v70 = *(_QWORD *)(a6 + 8);
          if ((*(_DWORD *)a6 & 1) != 0)
            v71 = 8;
          else
            v71 = *(_DWORD *)(a6 + 16);
          v61 = v70 + 40 * v71;
        }
        v62 = *(_DWORD *)(v61 + 36);
        *(_DWORD *)(a6 + 340) -= v62;
        if (v62 >= 1 && (_BYTE)v12)
        {
          *(_QWORD *)(v61 + 32) = 0xFFFFFFFF00000001;
          while (1)
          {
            v63 = *(_DWORD *)(a6 + 352);
            if (v63 <= v60)
              break;
            v64 = *(_QWORD *)(a6 + 344) + 32 * v63;
            v65 = *(_OWORD *)(v64 - 16);
            *(_OWORD *)v75 = *(_OWORD *)(v64 - 32);
            v76 = v65;
            *(_DWORD *)(a6 + 352) = v63 - 1;
            sub_1C4DA8678((_DWORD *)a6, (uint64_t *)v75);
          }
          return 1;
        }
        *(_DWORD *)(v61 + 32) = v12;
        if (v18 > (unsigned __int8 *)v20 && (v12 & 0x100) != 0 && !((((int)v12 >> 9) + 0x3FFFFF) >> 23))
          *(_DWORD *)(v61 + 32) = (v12 - (v12 & 0xFFFFFE00)) | 0x100;
        *(_DWORD *)(v61 + 36) = -1;
        if (v74 != *(_DWORD *)(a6 + 340) && v12 != 1)
        {
          v66 = (_OWORD *)sub_1C47C0F60(a6 + 344, (unint64_t)v77, 1);
          v67 = (_OWORD *)(*(_QWORD *)(a6 + 344) + 32 * *(unsigned int *)(a6 + 352));
          v68 = v66[1];
          *v67 = *v66;
          v67[1] = v68;
          ++*(_DWORD *)(a6 + 352);
        }
      }
    }
  }
  return v12;
}

uint64_t llvm::BasicAAResult::getModRefInfo(uint64_t a1, uint64_t a2, llvm **a3, uint64_t a4)
{
  llvm *UnderlyingObject;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int ModRefBehavior;
  BOOL v33;
  int v34;
  _BOOL4 v35;
  char v36;
  char v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  uint64_t v59;
  llvm **v60;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70[2];

  UnderlyingObject = llvm::getUnderlyingObject(*a3, (const llvm::Value *)6);
  v8 = (uint64_t)UnderlyingObject;
  v9 = *((unsigned __int8 *)UnderlyingObject + 16);
  if (v9 == 59)
  {
    if (a2)
    {
      if (*(_BYTE *)(a2 + 16) == 84 && (*(_WORD *)(a2 + 18) & 3u) - 1 <= 1)
      {
        v10 = *(_QWORD *)(a2 + 64);
        if (!v10 || (*(_BYTE *)(v10 + 32) & 0x20) == 0)
          return 4;
      }
    }
    if (*(_BYTE *)(*((_QWORD *)UnderlyingObject - 4) + 16) != 16
      || ((v11 = *((_QWORD *)UnderlyingObject + 5), (v12 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 80)) != 0)
        ? (v13 = v12 - 24)
        : (v13 = 0),
          v11 != v13 || (*((_WORD *)UnderlyingObject + 9) & 0x40) != 0))
    {
      if (sub_1C4DA4058(a2, 287))
        return 6;
    }
  }
  v60 = a3;
  v15 = v8 != a2 && v9 >= 0x15;
  if (v15
    && (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 328) + 16))(*(_QWORD *)(a4 + 328), v8, a2))
  {
    v16 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    v17 = *(unsigned __int8 *)(a2 + 16);
    if (v17 == 84)
    {
      v18 = 0;
    }
    else if (v17 == 39)
    {
      v18 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      v18 = 2;
    }
    if (a2 - 32 * v16 == a2 - 32 - 32 * v18)
      return 4;
    v19 = 0;
    v20 = 32 * ~v18;
    v21 = 4;
    v22 = 1;
    v23 = -32 * v16;
    do
    {
      if (*(_BYTE *)(**(_QWORD **)(a2 + v23) + 8) == 15)
      {
        if ((sub_1C4D91D40(a2, v19, 22) & 1) != 0
          || ((v24 = *(unsigned __int8 *)(a2 + 16), v24 != 84)
            ? (v24 != 39
             ? (v25 = 2)
             : (v25 = (*(_DWORD *)(a2 + 80) + 1)))
            : (v25 = 0),
              (v26 = *(_DWORD *)(a2 + 20), (v26 & 0x80000000) == 0)
           || (v30 = v26 & 0x7FFFFFF, (*(_QWORD *)(a2 - 8 - 32 * v30) & 0xFFFFFFFF0) == 0)
            ? (v27 = 0, v28 = -(uint64_t)(v26 & 0x7FFFFFF))
            : (v28 = -v30,
               v27 = *(_DWORD *)(a2 - 32 * v30 - 12) - *(_DWORD *)(a2 - 32 * v30 - *(_QWORD *)(a2 - 32 * v30 - 8))),
              v19 >= ((-32 - 32 * v25 + 32 * (unint64_t)-v27 - 32 * v28) >> 5)
           || llvm::CallBase::paramHasAttr(a2, v19, 69)))
        {
          if ((sub_1C4D91D40(a2, v19, 44) & 1) == 0)
          {
            v70[0] = *(_QWORD *)a1;
            v70[1] = a1;
            v66 = *(_QWORD *)(a2 + v23);
            v67 = -1;
            v68 = 0u;
            v69 = 0u;
            v62 = v8;
            v63 = -1;
            v64 = 0u;
            v65 = 0u;
            v29 = sub_1C4DA40A4(v70, (uint64_t)&v66, (uint64_t)&v62, a4);
            v22 &= v29 == 3;
            if (v29)
            {
              if ((sub_1C4D91D40(a2, v19, 45) & 1) != 0 || sub_1C4D91D40(a2, v19, 44))
              {
                v21 |= 1u;
              }
              else
              {
                if (!sub_1C4D91D40(a2, v19, 66) && !sub_1C4D91D40(a2, v19, 44))
                  goto LABEL_58;
                v21 |= 2u;
              }
            }
          }
        }
      }
      ++v19;
      v23 += 32;
    }
    while (v20 != v23);
    v31 = v21 & 3;
    if ((v21 & 3) != 0 && v31 != 3)
    {
      if ((v22 & 1) != 0)
        return v21 & 3;
      else
        return v21 | 4u;
    }
    if (v31 != 3)
      return 4;
  }
LABEL_58:
  ModRefBehavior = llvm::BasicAAResult::getModRefBehavior((llvm::BasicAAResult *)a1, (const llvm::CallBase *)a2);
  if ((*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 1208))(**(_QWORD **)(a1 + 32)))
    v33 = ModRefBehavior > 0x1F;
  else
    v33 = 1;
  if (!v33)
  {
    v38 = *(_QWORD *)*v60;
    v39 = *(_DWORD *)(v38 + 8);
    if ((v39 & 0xFE) == 0x12)
      v39 = *(_DWORD *)(**(_QWORD **)(v38 + 16) + 8);
    v40 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    v41 = *(unsigned __int8 *)(a2 + 16);
    if (v41 == 84)
    {
      v42 = 0;
    }
    else if (v41 == 39)
    {
      v42 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      v42 = 2;
    }
    if (a2 - 32 * v40 == a2 - 32 * v42 - 32)
      return 4;
    v43 = 0;
    v44 = v39 >> 8;
    v45 = 32 * ~v42;
    v46 = -32 * v40;
    while (1)
    {
      v47 = **(_QWORD **)(a2 + v46);
      if (*(_BYTE *)(v47 + 8) == 15 && (sub_1C4D91D40(a2, v43, 44) & 1) == 0)
      {
        v48 = *(_DWORD *)(v47 + 8);
        if ((v48 & 0xFE) == 0x12)
          v48 = *(_DWORD *)(**(_QWORD **)(v47 + 16) + 8);
        if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 1216))(**(_QWORD **)(a1 + 32), v48 >> 8, v44) & 1) != 0)break;
      }
      ++v43;
      v46 += 32;
      if (v45 == v46)
        return 4;
    }
  }
  if (byte_1ED82E438)
    v34 = 11;
  else
    v34 = 15;
  sub_1C4EBF808(a2, v34, *(uint64_t **)(a1 + 24), &v66);
  if (BYTE8(v68))
  {
    v62 = *(_QWORD *)a1;
    v63 = a1;
    v66 = a2;
    v67 = -1;
    v68 = 0u;
    v69 = 0u;
    if (!sub_1C4DA40A4(&v62, (uint64_t)&v66, (uint64_t)v60, a4))
      return 4;
  }
  v35 = sub_1C4D99DA8(a2);
  if (a2 && v35)
  {
    v62 = *(_QWORD *)a1;
    v63 = a1;
    llvm::MemoryLocation::getForArgument(a2, 1u, 0, (uint64_t)&v66);
    v36 = sub_1C4DA40A4(&v62, (uint64_t)&v66, (uint64_t)v60, a4);
    v62 = *(_QWORD *)a1;
    v63 = a1;
    llvm::MemoryLocation::getForArgument(a2, 0, 0, (uint64_t)&v66);
    v37 = sub_1C4DA40A4(&v62, (uint64_t)&v66, (uint64_t)v60, a4);
    if (v36
      || (LODWORD(v66) = 7, sub_1C53E4BBC(a2, (__int32 *)&v66, 1uLL))
      && ((v59 = *(_QWORD *)(a2 - 32)) == 0
       || *(_BYTE *)(v59 + 16)
       || *(_QWORD *)(v59 + 24) != *(_QWORD *)(a2 + 72)
       || *(_DWORD *)(v59 + 36) != 7))
    {
      v14 = 5;
    }
    else
    {
      v14 = 4;
    }
    if (v37)
    {
LABEL_98:
      v14 |= 2u;
      return v14;
    }
    v50 = *(_DWORD *)(a2 + 20);
    if (v50 < 0)
    {
      v51 = a2 - 32 * (v50 & 0x7FFFFFF);
      v54 = *(_QWORD *)(v51 - 8);
      v52 = v51 - 8;
      v53 = v54;
      if (v54)
      {
        v55 = -v53;
        while (1)
        {
          v56 = *(_DWORD *)(*(_QWORD *)(v52 + v55) + 8);
          v33 = v56 > 7;
          v57 = (1 << v56) & 0x83;
          if (v33 || v57 == 0)
            break;
          v55 += 16;
          if (!v55)
            return v14;
        }
        goto LABEL_98;
      }
    }
  }
  else if (sub_1C4DA4058(a2, 125))
  {
    return 5;
  }
  else
  {
    v14 = 5;
    if (!sub_1C4DA4058(a2, 119))
    {
      if (sub_1C4DA4058(a2, 164))
        return 5;
      else
        return 7;
    }
  }
  return v14;
}

BOOL sub_1C4DA4058(uint64_t a1, int a2)
{
  uint64_t v2;

  return *(_BYTE *)(a1 + 16) == 84
      && (v2 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v2 + 16)
      && *(_QWORD *)(v2 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v2 + 33) & 0x20) != 0
      && *(_DWORD *)(v2 + 36) == a2;
}

uint64_t sub_1C4DA40A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  BOOL v13;

  v7 = *a1;
  if (!*a1)
    return llvm::BasicAAResult::aliasCheck(a1[1], *(llvm::Value **)a2, *(_QWORD *)(a2 + 8), *(llvm::Value **)a3, *(_QWORD *)(a3 + 8), a4);
  v8 = *(_DWORD *)(a4 + 336);
  *(_DWORD *)(a4 + 336) = v8 + 1;
  v9 = *(_QWORD *)(v7 + 8);
  v10 = *(_QWORD *)(v7 + 16);
  if (v9 == v10)
  {
    result = 1;
  }
  else
  {
    v11 = v9 + 8;
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v11 - 8) + 24))(*(_QWORD *)(v11 - 8), a2, a3, a4);
      v13 = result != 1 || v11 == v10;
      v11 += 8;
    }
    while (!v13);
    v8 = *(_DWORD *)(a4 + 336) - 1;
  }
  *(_DWORD *)(a4 + 336) = v8;
  return result;
}

uint64_t llvm::BasicAAResult::getModRefInfo(llvm::BasicAAResult *a1, uint64_t a2, const llvm::CallBase *a3)
{
  unsigned int v6;

  if (sub_1C4DA4058(a2, 125))
  {
    v6 = 5;
  }
  else
  {
    if (!sub_1C4DA4058((uint64_t)a3, 125))
      return 7;
    v6 = 6;
    a3 = (const llvm::CallBase *)a2;
  }
  if ((llvm::BasicAAResult::getModRefBehavior(a1, a3) & 2) != 0)
    return v6;
  else
    return 4;
}

BOOL llvm::BasicAAResult::aliasGEP(llvm::BasicAAResult *a1, llvm::BasicAAResult *this, unint64_t a3, uint64_t a4, unint64_t a5, unsigned __int8 *a6, unsigned __int8 *a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v10;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  _QWORD *p_src;
  int v31;
  int64_t v32;
  BOOL v33;
  unint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unsigned int v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  void *v59;
  unint64_t v60;
  size_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  char *v66;
  const void **v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  void *v72;
  uint64_t v73;
  _QWORD *v74;
  void *v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  size_t v85;
  void *v86;
  size_t v87;
  void *v88;
  unsigned int v89;
  unsigned int v90;
  unint64_t *v91;
  void **v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  unint64_t v97;
  int v98;
  int64_t v99;
  unint64_t v100;
  unsigned int v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v110;
  int v111;
  int64_t v112;
  unint64_t v113;
  unsigned int v114;
  unint64_t v115;
  unsigned int v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  _BOOL8 v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  _BOOL4 v127;
  unint64_t v128;
  _BOOL4 v129;
  int v130;
  unint64_t v131;
  unsigned int v132;
  unint64_t v133;
  unsigned int v134;
  unint64_t v135;
  void *v136;
  void *v137;
  unsigned int v138;
  unsigned int v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unsigned int v143;
  uint64_t v144;
  void *v145;
  BOOL v146;
  char v147;
  char *v149;
  uint64_t v150;
  _QWORD *v151;
  void *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t *v155;
  const void **v156;
  unsigned int v157;
  void *v158;
  unint64_t v159;
  uint64_t v160;
  unsigned int v161;
  int v162;
  const void **v163;
  unsigned int v164;
  int v165;
  int64_t v166;
  unint64_t v167;
  unsigned int v168;
  uint64_t v169;
  unint64_t v170;
  const void **v171;
  unsigned int v172;
  void *v173;
  uint64_t v174;
  BOOL v175;
  BOOL v177;
  uint64_t v178;
  _QWORD *v179;
  void *v180;
  uint64_t v181;
  void *v182;
  int v183;
  int v184;
  int64_t v185;
  unint64_t v186;
  int v187;
  _BOOL4 v188;
  uint64_t v189;
  unint64_t v190;
  unsigned int v191;
  int v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t *v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  _BOOL4 v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  const void **v206;
  llvm::Type *v207;
  const char *v208;
  int PrimitiveSizeInBits;
  const char *v210;
  int v211;
  int v212;
  uint64_t v213;
  void *v214;
  int v215;
  unint64_t v217;
  uint64_t v218;
  unint64_t *v219;
  uint64_t *v220;
  uint64_t v221;
  unint64_t v222;
  _BOOL4 v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  void **p_s1;
  int v228;
  int64_t v229;
  unint64_t v230;
  int v231;
  unsigned int v232;
  uint64_t v233;
  unint64_t v234;
  _BOOL4 v235;
  char v236;
  char v237;
  _QWORD *v238;
  int v239;
  int64_t v240;
  unint64_t v241;
  unsigned int v242;
  int v243;
  int64_t v244;
  unint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  _BOOL4 v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unint64_t v257;
  int v258;
  unsigned int v259;
  unsigned int v260;
  unint64_t v261;
  unsigned int v262;
  unint64_t v263;
  void *v264;
  unsigned int v265;
  void *__s2;
  unsigned int v267;
  unint64_t v268;
  unsigned int v269;
  uint64_t v270;
  unsigned int v271;
  void *v272;
  unsigned int v273;
  void *v274;
  unsigned int v275;
  void *v276;
  unsigned int v277;
  void *v278;
  unsigned int v279;
  void *v280;
  unsigned int v281;
  void *v282;
  unsigned int v283;
  unint64_t v284;
  unsigned int v285;
  void *v286;
  unsigned int v287;
  uint64_t v288;
  unsigned int v289;
  unint64_t v290;
  unsigned int v291;
  void *v292;
  unsigned int v293;
  void *v294;
  unsigned int v295;
  uint64_t v296;
  unsigned int v297;
  void *v298;
  unsigned int v299;
  void *v300;
  unsigned int v301;
  void *v302;
  unsigned int v303;
  unint64_t *v304;
  unsigned int v305;
  void *v306;
  unsigned int v307;
  void *v308;
  unsigned int v309[2];
  __int128 v310;
  __int128 v311;
  void *__s1;
  uint64_t v313;
  void *v314[2];
  __int128 v315;
  unsigned __int8 *v316;
  uint64_t v317;
  void *v318[2];
  __int128 v319;
  char v320;
  unsigned __int8 *v321;
  void *__src;
  void *v323[2];
  __int128 v324;
  char v325;
  uint64_t v326;

  v10 = a5;
  v326 = *MEMORY[0x1E0C80C00];
  if (a3 >= 0xFFFFFFFFFFFFFFFELL && a5 >= 0xFFFFFFFFFFFFFFFELL)
  {
    v15 = *(unsigned __int8 *)(a4 + 16);
    if (v15 != 62 && (v15 != 5 || *(_WORD *)(a4 + 18) != 34))
      return 1;
    v16 = *(_QWORD *)a1;
    v321 = a6;
    __src = (void *)-1;
    *(_OWORD *)v323 = 0u;
    v324 = 0u;
    v316 = a7;
    v317 = -1;
    *(_OWORD *)v318 = 0u;
    v319 = 0u;
    if (v16)
    {
      v17 = *(_DWORD *)(a8 + 336);
      *(_DWORD *)(a8 + 336) = v17 + 1;
      v18 = *(_QWORD *)(v16 + 8);
      v19 = *(_QWORD *)(v16 + 16);
      if (v18 == v19)
      {
        v21 = 1;
      }
      else
      {
        v20 = v18 + 8;
        do
        {
          v21 = (*(uint64_t (**)(_QWORD, unsigned __int8 **, unsigned __int8 **, uint64_t))(**(_QWORD **)(v20 - 8) + 24))(*(_QWORD *)(v20 - 8), &v321, &v316, a8);
          v22 = v21 != 1 || v20 == v19;
          v20 += 8;
        }
        while (!v22);
        v17 = *(_DWORD *)(a8 + 336) - 1;
      }
      *(_DWORD *)(a8 + 336) = v17;
    }
    else
    {
      v21 = llvm::BasicAAResult::aliasCheck(a1);
    }
    return v21 != 0;
  }
  llvm::BasicAAResult::DecomposeGEPExpression(this, *((const llvm::Value **)a1 + 1), *((const llvm::DataLayout **)a1 + 5), *((llvm::AssumptionCache **)a1 + 6), (uint64_t)&v321);
  llvm::BasicAAResult::DecomposeGEPExpression((llvm::BasicAAResult *)a4, *((const llvm::Value **)a1 + 1), *((const llvm::DataLayout **)a1 + 5), *((llvm::AssumptionCache **)a1 + 6), (uint64_t)&v316);
  if (v321 == (unsigned __int8 *)this && v316 == (unsigned __int8 *)a4)
    goto LABEL_280;
  llvm::BasicAAResult::subtractDecomposedGEPs(a1, (uint64_t)&v321, (uint64_t)&v316);
  if (v325)
  {
    if (!(_DWORD)v324
      && v10 <= 0xFFFFFFFFFFFFFFFDLL
      && (sub_1C4DA9220((llvm::APInt *)&__src, v10 & 0x7FFFFFFFFFFFFFFFLL) & 1) == 0)
    {
      v24 = 0;
      v25 = v316[16];
      if (v25 == 3 || v25 == 59)
        goto LABEL_281;
    }
  }
  v26 = *(unsigned __int8 *)(a4 + 16);
  if (v26 == 62 || v26 == 5 && *(_WORD *)(a4 + 18) == 34)
  {
    if (v320)
    {
      if (a3 <= 0xFFFFFFFFFFFFFFFDLL
        && !(_DWORD)v324
        && !sub_1C4DA92C4((llvm::APInt *)&__src, -(uint64_t)(a3 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v24 = 0;
        v27 = v321[16];
        if (v27 == 3 || v27 == 59)
          goto LABEL_281;
      }
    }
  }
  if (LODWORD(v323[0]) > 0x40)
  {
    v31 = 0;
    v32 = ((unint64_t)LODWORD(v323[0]) + 63) >> 6;
    p_src = __src;
    do
    {
      v33 = v32-- < 1;
      if (v33)
        break;
      v34 = *((_QWORD *)__src + v32);
      v31 += __clz(v34);
    }
    while (!v34);
    v35 = LODWORD(v323[0]) | 0xFFFFFFC0;
    if (((uint64_t)v323[0] & 0x3F) == 0)
      v35 = 0;
    v28 = v321;
    v29 = v316;
    if (LODWORD(v323[0]) - v31 - v35 > 0x40)
      goto LABEL_48;
  }
  else
  {
    v28 = v321;
    v29 = v316;
    p_src = &__src;
  }
  if (*p_src)
    v36 = 0;
  else
    v36 = (_DWORD)v324 == 0;
  if (v36)
  {
    v44 = *(_QWORD *)a1;
    __s1 = v28;
    v313 = a3;
    *(_OWORD *)v314 = 0u;
    v315 = 0u;
    v308 = v29;
    *(_QWORD *)v309 = v10;
    v310 = 0u;
    v311 = 0u;
    if (v44)
    {
      v45 = *(_DWORD *)(a8 + 336);
      *(_DWORD *)(a8 + 336) = v45 + 1;
      v46 = *(_QWORD *)(v44 + 8);
      v47 = *(_QWORD *)(v44 + 16);
      if (v46 == v47)
      {
        v24 = 1;
      }
      else
      {
        v48 = v46 + 8;
        do
        {
          v49 = (*(uint64_t (**)(_QWORD, void **, void **, uint64_t))(**(_QWORD **)(v48 - 8) + 24))(*(_QWORD *)(v48 - 8), &__s1, &v308, a8);
          v50 = v49 != 1 || v48 == v47;
          v48 += 8;
        }
        while (!v50);
        v24 = v49;
        v45 = *(_DWORD *)(a8 + 336) - 1;
      }
      *(_DWORD *)(a8 + 336) = v45;
    }
    else
    {
      v24 = llvm::BasicAAResult::aliasCheck(a1);
    }
    goto LABEL_281;
  }
LABEL_48:
  v37 = *(_QWORD *)a1;
  __s1 = v28;
  v313 = -1;
  *(_OWORD *)v314 = 0u;
  v315 = 0u;
  v308 = v29;
  *(_QWORD *)v309 = -1;
  v310 = 0u;
  v311 = 0u;
  if (v37)
  {
    v38 = *(_DWORD *)(a8 + 336);
    *(_DWORD *)(a8 + 336) = v38 + 1;
    v39 = *(_QWORD *)(v37 + 8);
    v40 = *(_QWORD *)(v37 + 16);
    if (v39 == v40)
    {
      v24 = 1;
    }
    else
    {
      v41 = v39 + 8;
      do
      {
        v42 = (*(uint64_t (**)(_QWORD, void **, void **, uint64_t))(**(_QWORD **)(v41 - 8) + 24))(*(_QWORD *)(v41 - 8), &__s1, &v308, a8);
        v43 = v42 != 1 || v41 == v40;
        v41 += 8;
      }
      while (!v43);
      v24 = v42;
      v38 = *(_DWORD *)(a8 + 336) - 1;
    }
    *(_DWORD *)(a8 + 336) = v38;
  }
  else
  {
    v24 = llvm::BasicAAResult::aliasCheck(a1);
  }
  if (v24 != 3)
    goto LABEL_281;
  if (!(_DWORD)v324)
  {
    v53 = v323[0];
    v54 = (uint64_t)__src;
    v55 = (void **)((char *)__src + 8 * ((LODWORD(v323[0]) - 1) >> 6));
    if (LODWORD(v323[0]) < 0x41)
      v55 = &__src;
    v56 = (1 << (LOBYTE(v323[0]) - 1)) & (unint64_t)*v55;
    if (v56)
    {
      v307 = v323[0];
      if (LODWORD(v323[0]) >= 0x41
        && (v54 = operator new[](),
            v306 = (void *)v54,
            memcpy((void *)v54, __src, (((unint64_t)v307 + 63) >> 3) & 0x3FFFFFF8),
            v53 = v307,
            v307 > 0x40))
      {
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v306);
      }
      else
      {
        if (v53)
          v57 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v53;
        else
          v57 = 0;
        v306 = (void *)(v57 & ~v54);
      }
      llvm::APInt::operator++((uint64_t)&v306);
      v58 = v307;
      v59 = v306;
      v307 = 0;
      if (LODWORD(v323[0]) > 0x40 && __src)
      {
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        __src = v59;
        LODWORD(v323[0]) = v58;
        if (v307 >= 0x41 && v306)
          MEMORY[0x1CAA32F9C](v306, 0x1000C8000313F17);
      }
      else
      {
        __src = v306;
        LODWORD(v323[0]) = v58;
      }
      v60 = a3;
    }
    else
    {
      v60 = v10;
      v10 = a3;
    }
    if (v60 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v97 = (unint64_t)__src;
      if (LODWORD(v323[0]) >= 0x41)
      {
        v98 = 0;
        v99 = ((unint64_t)LODWORD(v323[0]) + 63) >> 6;
        do
        {
          v33 = v99-- < 1;
          if (v33)
            break;
          v100 = *((_QWORD *)__src + v99);
          v98 += __clz(v100);
        }
        while (!v100);
        v24 = 0;
        v101 = LODWORD(v323[0]) | 0xFFFFFFC0;
        if (((uint64_t)v323[0] & 0x3F) == 0)
          v101 = 0;
        if (LODWORD(v323[0]) - v98 - v101 > 0x40)
          goto LABEL_281;
        v97 = *(_QWORD *)__src;
      }
      v102 = v60 & 0x7FFFFFFFFFFFFFFFLL;
      if (v97 >= (v60 & 0x7FFFFFFFFFFFFFFFLL))
      {
        v24 = 0;
        goto LABEL_281;
      }
      if (v10 > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_461;
      if (LODWORD(v323[0]) >= 0x41)
      {
        v165 = 0;
        v166 = ((unint64_t)LODWORD(v323[0]) + 63) >> 6;
        do
        {
          v33 = v166-- < 1;
          if (v33)
            break;
          v167 = *((_QWORD *)__src + v166);
          v165 += __clz(v167);
        }
        while (!v167);
        v168 = LODWORD(v323[0]) | 0xFFFFFFC0;
        if (((uint64_t)v323[0] & 0x3F) == 0)
          v168 = 0;
        v24 = 2;
        if (v97 >> 31 || LODWORD(v323[0]) - v165 - v168 >= 0x41)
          goto LABEL_281;
        v305 = v323[0];
        v304 = (unint64_t *)operator new[]();
        memcpy(v304, __src, (((unint64_t)v305 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        if (v97 >> 31)
          goto LABEL_461;
        v305 = v323[0];
        v304 = (unint64_t *)__src;
      }
      llvm::APInt::operator+=((uint64_t)&v304, v10 & 0x7FFFFFFFFFFFFFFFLL);
      v169 = v305;
      v305 = 0;
      if (v169 < 0x41)
      {
        if ((unint64_t)v304 <= v102)
          goto LABEL_463;
LABEL_461:
        v24 = 2;
        goto LABEL_281;
      }
      v184 = 0;
      v185 = (unint64_t)(v169 + 63) >> 6;
      do
      {
        v33 = v185-- < 1;
        if (v33)
          break;
        v186 = v304[v185];
        v184 += __clz(v186);
      }
      while (!v186);
      v187 = v169 | 0xFFFFFFC0;
      if ((v169 & 0x3F) == 0)
        v187 = 0;
      if ((v169 - v184 - v187) <= 0x40)
      {
        v188 = *v304 <= v102;
        if (!v304)
        {
          if (MEMORY[0] <= v102)
            goto LABEL_463;
          goto LABEL_461;
        }
      }
      else
      {
        if (!v304)
          goto LABEL_461;
        v188 = 0;
      }
      MEMORY[0x1CAA32F9C](v304, 0x1000C8000313F17);
      if (v305 >= 0x41 && v304)
      {
        MEMORY[0x1CAA32F9C](v304, 0x1000C8000313F17);
        if (!v188)
          goto LABEL_461;
      }
      else if (!v188)
      {
        goto LABEL_461;
      }
LABEL_463:
      if (LODWORD(v323[0]) > 0x40)
        v189 = *(_QWORD *)__src;
      else
        v189 = (uint64_t)((_QWORD)__src << -(uint64_t)LODWORD(v323[0])) >> -(uint64_t)LODWORD(v323[0]);
      v190 = -(int)v189 + 0x400000;
      v191 = 258 - ((_DWORD)v189 << 9);
      if (v190 >= 0x800000)
        v192 = 2;
      else
        v192 = v191;
      if (!(((v192 >> 9) + 0x3FFFFF) >> 23))
        v191 = 258 - (v192 & 0xFFFFFE00);
      if ((v192 & 0x100) == 0)
        v191 = v192;
      if (v56)
        v24 = v191;
      else
        v24 = v192;
      goto LABEL_281;
    }
LABEL_280:
    v24 = 1;
    goto LABEL_281;
  }
  v24 = 1;
  if (a3 <= 0xFFFFFFFFFFFFFFFDLL && v10 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v263 = v10;
    v303 = 1;
    v302 = 0;
    v51 = v323[0];
    v261 = a3;
    if (LODWORD(v323[0]) > 0x40)
    {
      v61 = (((unint64_t)LODWORD(v323[0]) + 63) >> 3) & 0x3FFFFFF8;
      v62 = (void *)operator new[]();
      memcpy(v62, __src, v61);
      v309[0] = v51;
      v308 = v62;
      LODWORD(v313) = v51;
      v52 = (void *)operator new[]();
      memcpy(v52, v308, v61);
    }
    else
    {
      v52 = __src;
      v309[0] = v323[0];
      v308 = __src;
      LODWORD(v313) = v323[0];
    }
    __s1 = v52;
    llvm::APInt::operator+=((uint64_t)&__s1, 1uLL);
    DWORD2(v310) = v313;
    *(_QWORD *)&v310 = __s1;
    if ((_DWORD)v324)
    {
      v63 = 0;
      v64 = 56 * v324;
      do
      {
        v65 = v323[1];
        v66 = (char *)v323[1] + v63;
        v67 = (const void **)((char *)v323[1] + v63 + 24);
        v301 = *(_DWORD *)((char *)v323[1] + v63 + 32);
        if (v301 > 0x40)
        {
          v300 = (void *)operator new[]();
          memcpy(v300, *v67, (((unint64_t)v301 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v300 = (void *)*v67;
        }
        if (v65[v63 + 48])
        {
          if (!v63)
            goto LABEL_125;
          goto LABEL_101;
        }
        v8 = *((_DWORD *)v66 + 8);
        if (v8 > 0x40)
        {
          v71 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v67);
          LODWORD(v313) = v8;
          llvm::APInt::initSlowCase((llvm::APInt *)&__s1, 0, 0);
          v8 = v313;
          v70 = 1 << v71;
          if (v313 > 0x40)
          {
            v72 = __s1;
            *((_QWORD *)__s1 + (v71 >> 6)) |= v70;
            goto LABEL_121;
          }
          v68 = (unint64_t)__s1;
        }
        else
        {
          v68 = 0;
          v69 = __clz(__rbit64((unint64_t)*v67));
          if (v8 < v69)
            LOBYTE(v69) = *((_DWORD *)v66 + 8);
          v70 = 1 << v69;
        }
        v72 = (void *)(v68 | v70);
LABEL_121:
        if (v301 >= 0x41 && v300)
          MEMORY[0x1CAA32F9C](v300, 0x1000C8000313F17);
        v300 = v72;
        v301 = v8;
        if (!v63)
        {
LABEL_125:
          sub_1C4DA6CE8((const void **)&v300, (uint64_t)&__s1);
          if (v303 >= 0x41 && v302)
            MEMORY[0x1CAA32F9C](v302, 0x1000C8000313F17);
          v302 = __s1;
          v303 = v313;
          goto LABEL_129;
        }
LABEL_101:
        v299 = v303;
        if (v303 > 0x40)
        {
          v298 = (void *)operator new[]();
          memcpy(v298, v302, (((unint64_t)v299 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v298 = v302;
        }
        sub_1C4DA6CE8((const void **)&v300, (uint64_t)&v296);
        llvm::APIntOps::GreatestCommonDivisor((uint64_t)&v298, (uint64_t)&v296, (uint64_t)&__s1);
        if (v303 >= 0x41 && v302)
          MEMORY[0x1CAA32F9C](v302, 0x1000C8000313F17);
        v302 = __s1;
        v303 = v313;
        LODWORD(v313) = 0;
        if (v297 >= 0x41 && v296)
          MEMORY[0x1CAA32F9C](v296, 0x1000C8000313F17);
        if (v299 >= 0x41 && v298)
          MEMORY[0x1CAA32F9C](v298, 0x1000C8000313F17);
LABEL_129:
        llvm::computeConstantRange(*(llvm **)&v65[v63], 0, *(llvm::AssumptionCache **)&v65[v63 + 40], 0, 0, 1, *((_QWORD *)a1 + 5), &v292);
        v73 = *(_QWORD *)&v65[v63];
        v74 = *(_QWORD **)&v65[v63 + 40];
        v76 = *((_QWORD *)a1 + 5);
        v75 = (void *)*((_QWORD *)a1 + 6);
        if (!v74 || !v74[5])
        {
          if (!v73 || *(unsigned __int8 *)(v73 + 16) < 0x1Cu || (v74 = *(_QWORD **)&v65[v63], !*(_QWORD *)(v73 + 40)))
            v74 = 0;
        }
        __s1 = (void *)*((_QWORD *)a1 + 1);
        v313 = v76;
        v314[0] = v74;
        v314[1] = v75;
        *(_QWORD *)&v315 = 0;
        BYTE8(v315) = 1;
        sub_1C4F83784(v73, 0, (uint64_t *)&__s1, &v288);
        llvm::ConstantRange::fromKnownBits((llvm::ConstantRange *)&v288, (const llvm::KnownBits *)1, (uint64_t)&v284);
        llvm::ConstantRange::intersectWith((uint64_t)&v292, (llvm::ConstantRange *)&v284, 2, (uint64_t)&__s1);
        if (v293 >= 0x41 && v292)
          MEMORY[0x1CAA32F9C](v292, 0x1000C8000313F17);
        v292 = __s1;
        v293 = v313;
        LODWORD(v313) = 0;
        if (v295 >= 0x41 && v294)
        {
          MEMORY[0x1CAA32F9C](v294, 0x1000C8000313F17);
          v294 = v314[0];
          v295 = v314[1];
          LODWORD(v314[1]) = 0;
          if (v313 >= 0x41 && __s1)
            MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
        }
        else
        {
          v294 = v314[0];
          v295 = v314[1];
          LODWORD(v314[1]) = 0;
        }
        if (v287 >= 0x41 && v286)
          MEMORY[0x1CAA32F9C](v286, 0x1000C8000313F17);
        if (v285 >= 0x41 && v284)
          MEMORY[0x1CAA32F9C](v284, 0x1000C8000313F17);
        v77 = v293;
        v281 = v293;
        if (v293 > 0x40)
        {
          v280 = (void *)operator new[]();
          v89 = v281;
          memcpy(v280, v292, (((unint64_t)v281 + 63) >> 3) & 0x3FFFFFF8);
          v77 = v89;
        }
        else
        {
          v280 = v292;
        }
        v283 = v295;
        if (v295 > 0x40)
        {
          v282 = (void *)operator new[]();
          memcpy(v282, v294, (((unint64_t)v283 + 63) >> 3) & 0x3FFFFFF8);
          v77 = v281;
        }
        else
        {
          v282 = v294;
        }
        v78 = *(_DWORD *)&v65[v63 + 16];
        if (v78)
        {
          llvm::ConstantRange::truncate((llvm::ConstantRange *)&v280, v77 - v78, (uint64_t)&__s1);
          if (v281 >= 0x41 && v280)
            MEMORY[0x1CAA32F9C](v280, 0x1000C8000313F17);
          v280 = __s1;
          v281 = v313;
          LODWORD(v313) = 0;
          if (v283 >= 0x41 && v282)
          {
            MEMORY[0x1CAA32F9C](v282, 0x1000C8000313F17);
            v282 = v314[0];
            v283 = v314[1];
            LODWORD(v314[1]) = 0;
            if (v313 >= 0x41 && __s1)
              MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
          }
          else
          {
            v282 = v314[0];
            v283 = v314[1];
          }
          v77 = v281;
        }
        v79 = *(_DWORD *)&v65[v63 + 12];
        if (v79)
        {
          llvm::ConstantRange::signExtend((llvm::ConstantRange *)&v280, v79 + v77, (uint64_t)&__s1);
          if (v281 >= 0x41 && v280)
            MEMORY[0x1CAA32F9C](v280, 0x1000C8000313F17);
          v280 = __s1;
          v281 = v313;
          LODWORD(v313) = 0;
          if (v283 >= 0x41 && v282)
          {
            MEMORY[0x1CAA32F9C](v282, 0x1000C8000313F17);
            v282 = v314[0];
            v283 = v314[1];
            LODWORD(v314[1]) = 0;
            if (v313 >= 0x41 && __s1)
              MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
          }
          else
          {
            v282 = v314[0];
            v283 = v314[1];
          }
          v77 = v281;
        }
        v80 = *(_DWORD *)&v65[v63 + 8];
        if (v80)
        {
          llvm::ConstantRange::zeroExtend((llvm::ConstantRange *)&v280, v80 + v77, (uint64_t)&__s1);
          if (v281 >= 0x41 && v280)
            MEMORY[0x1CAA32F9C](v280, 0x1000C8000313F17);
          v280 = __s1;
          v281 = v313;
          LODWORD(v313) = 0;
          if (v283 >= 0x41 && v282)
          {
            MEMORY[0x1CAA32F9C](v282, 0x1000C8000313F17);
            v282 = v314[0];
            v283 = v314[1];
            LODWORD(v314[1]) = 0;
            if (v313 >= 0x41 && __s1)
              MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
          }
          else
          {
            v282 = v314[0];
            v283 = v314[1];
          }
          v77 = v281;
        }
        v285 = v77;
        v284 = (unint64_t)v280;
        v287 = v283;
        v286 = v282;
        v281 = 0;
        v283 = 0;
        llvm::ConstantRange::sextOrTrunc((llvm::ConstantRange *)&v284, v309[0], (uint64_t)&__s1);
        if (v293 >= 0x41 && v292)
          MEMORY[0x1CAA32F9C](v292, 0x1000C8000313F17);
        v292 = __s1;
        v293 = v313;
        LODWORD(v313) = 0;
        if (v295 >= 0x41 && v294)
        {
          MEMORY[0x1CAA32F9C](v294, 0x1000C8000313F17);
          v294 = v314[0];
          v295 = v314[1];
          LODWORD(v314[1]) = 0;
          if (v313 >= 0x41 && __s1)
            MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
        }
        else
        {
          v294 = v314[0];
          v295 = v314[1];
          LODWORD(v314[1]) = 0;
        }
        if (v287 >= 0x41 && v286)
          MEMORY[0x1CAA32F9C](v286, 0x1000C8000313F17);
        if (v285 >= 0x41 && v284)
          MEMORY[0x1CAA32F9C](v284, 0x1000C8000313F17);
        if (v283 >= 0x41 && v282)
          MEMORY[0x1CAA32F9C](v282, 0x1000C8000313F17);
        if (v281 >= 0x41 && v280)
          MEMORY[0x1CAA32F9C](v280, 0x1000C8000313F17);
        if (v65[v63 + 48])
        {
          v81 = *((unsigned int *)v66 + 8);
          if (v81 > 0x40)
          {
            v85 = ((unint64_t)(v81 + 63) >> 3) & 0x3FFFFFF8;
            v86 = (void *)operator new[]();
            memcpy(v86, *v67, v85);
            v277 = v81;
            v276 = v86;
            LODWORD(v313) = v81;
            v82 = (void *)operator new[]();
            memcpy(v82, v276, v85);
          }
          else
          {
            v82 = (void *)*v67;
            v277 = *((_DWORD *)v66 + 8);
            v276 = v82;
            LODWORD(v313) = v81;
          }
          __s1 = v82;
          llvm::APInt::operator+=((uint64_t)&__s1, 1uLL);
          v279 = v313;
          v278 = __s1;
          llvm::ConstantRange::smul_sat((const void **)&v292, (const void **)&v276, (uint64_t)&v284);
        }
        else
        {
          v83 = *((unsigned int *)v66 + 8);
          if (v83 > 0x40)
          {
            v87 = ((unint64_t)(v83 + 63) >> 3) & 0x3FFFFFF8;
            v88 = (void *)operator new[]();
            memcpy(v88, *v67, v87);
            v277 = v83;
            v276 = v88;
            LODWORD(v313) = v83;
            v84 = (void *)operator new[]();
            memcpy(v84, v276, v87);
          }
          else
          {
            v84 = (void *)*v67;
            v277 = *((_DWORD *)v66 + 8);
            v276 = v84;
            LODWORD(v313) = v83;
          }
          __s1 = v84;
          llvm::APInt::operator+=((uint64_t)&__s1, 1uLL);
          v279 = v313;
          v278 = __s1;
          llvm::ConstantRange::smul_fast((llvm::ConstantRange *)&v292, (const llvm::ConstantRange *)&v276, (uint64_t)&v284);
        }
        llvm::ConstantRange::add((llvm::ConstantRange *)&v308, (const llvm::ConstantRange *)&v284, (uint64_t)&__s1);
        if (v309[0] >= 0x41 && v308)
          MEMORY[0x1CAA32F9C](v308, 0x1000C8000313F17);
        v308 = __s1;
        v309[0] = v313;
        LODWORD(v313) = 0;
        if (DWORD2(v310) >= 0x41 && (_QWORD)v310)
        {
          MEMORY[0x1CAA32F9C](v310, 0x1000C8000313F17);
          *(void **)&v310 = v314[0];
          DWORD2(v310) = v314[1];
          LODWORD(v314[1]) = 0;
          if (v313 >= 0x41 && __s1)
            MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
        }
        else
        {
          *(void **)&v310 = v314[0];
          DWORD2(v310) = v314[1];
          LODWORD(v314[1]) = 0;
        }
        if (v287 >= 0x41 && v286)
          MEMORY[0x1CAA32F9C](v286, 0x1000C8000313F17);
        if (v285 >= 0x41 && v284)
          MEMORY[0x1CAA32F9C](v284, 0x1000C8000313F17);
        if (v279 >= 0x41 && v278)
          MEMORY[0x1CAA32F9C](v278, 0x1000C8000313F17);
        if (v277 >= 0x41 && v276)
          MEMORY[0x1CAA32F9C](v276, 0x1000C8000313F17);
        if (v291 >= 0x41 && v290)
          MEMORY[0x1CAA32F9C](v290, 0x1000C8000313F17);
        if (v289 >= 0x41 && v288)
          MEMORY[0x1CAA32F9C](v288, 0x1000C8000313F17);
        if (v295 >= 0x41 && v294)
          MEMORY[0x1CAA32F9C](v294, 0x1000C8000313F17);
        if (v293 >= 0x41 && v292)
          MEMORY[0x1CAA32F9C](v292, 0x1000C8000313F17);
        if (v301 >= 0x41 && v300)
          MEMORY[0x1CAA32F9C](v300, 0x1000C8000313F17);
        v63 += 56;
      }
      while (v64 != v63);
    }
    llvm::APInt::srem((llvm::APInt *)&__src, (const void **)&v302, (llvm::APInt *)&v276);
    v90 = v277;
    v91 = (unint64_t *)v276;
    v92 = (void **)((char *)v276 + 8 * ((v277 - 1) >> 6));
    if (v277 < 0x41)
      v92 = &v276;
    if ((((unint64_t)*v92 >> (v277 - 1)) & 1) != 0)
    {
      v93 = v263;
      v94 = v261;
      if (v277 >= 0x41)
      {
        v247 = 0;
        v248 = (uint64_t *)v302;
        v249 = ((unint64_t)v277 + 63) >> 6;
        v250 = v249;
        do
        {
          v251 = *v248++;
          v252 = v251 + *v91;
          v253 = v252 + 1 <= *v91;
          if (v247)
          {
            ++v252;
            v247 = v253;
          }
          else
          {
            v247 = v252 < *v91;
          }
          *v91++ = v252;
          --v250;
        }
        while (v250);
        *((_QWORD *)v276 + (v249 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v90;
        v90 = v277;
        v96 = v276;
      }
      else
      {
        v95 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v277;
        if (!v277)
          v95 = 0;
        v96 = (void *)(v95 & ((unint64_t)v276 + (_QWORD)v302));
        v276 = v96;
      }
      v91 = (unint64_t *)v96;
    }
    else
    {
      v96 = v276;
      v93 = v263;
      v94 = v261;
    }
    v110 = v93 & 0x7FFFFFFFFFFFFFFFLL;
    if (v90 >= 0x41)
    {
      v111 = 0;
      v112 = ((unint64_t)v90 + 63) >> 6;
      do
      {
        v33 = v112-- < 1;
        if (v33)
          break;
        v113 = v91[v112];
        v111 += __clz(v113);
      }
      while (!v113);
      v114 = v90 | 0xFFFFFFC0;
      if ((v90 & 0x3F) == 0)
        v114 = 0;
      if (v90 - v111 - v114 > 0x40)
        goto LABEL_315;
    }
    else
    {
      v91 = (unint64_t *)&v276;
    }
    if (*v91 < v110)
    {
      v115 = v94 & 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_333;
    }
LABEL_315:
    v116 = v303;
    if (v303 < 0x41)
    {
      v117 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v303;
      if (!v303)
        v117 = 0;
      v115 = v94 & 0x7FFFFFFFFFFFFFFFLL;
      if ((v117 & ((_BYTE *)v302 - (_BYTE *)v96)) >= (v94 & 0x7FFFFFFFFFFFFFFFLL))
        goto LABEL_389;
LABEL_333:
      v134 = v309[0];
      v275 = v309[0];
      if (v309[0] > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v274, 0, 0);
        v273 = v134;
        llvm::APInt::initSlowCase((llvm::APInt *)&v272, v115, 0);
        v139 = v275;
        v136 = v274;
        v138 = v273;
        v137 = v272;
      }
      else
      {
        v274 = 0;
        if (v309[0])
          v135 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v309[0]);
        else
          v135 = 0;
        v136 = 0;
        v137 = (void *)(v135 & v115);
        v272 = v137;
        v138 = v309[0];
        v139 = v309[0];
      }
      LODWORD(v313) = v139;
      __s1 = v136;
      v275 = 0;
      LODWORD(v314[1]) = v138;
      v314[0] = v137;
      v273 = 0;
      llvm::ConstantRange::add((llvm::ConstantRange *)&v308, (const llvm::ConstantRange *)&__s1, (uint64_t)&v292);
      if (LODWORD(v314[1]) >= 0x41 && v314[0])
        MEMORY[0x1CAA32F9C](v314[0], 0x1000C8000313F17);
      if (v313 >= 0x41 && __s1)
        MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
      v271 = v134;
      if (v134 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v270, 0, 0);
        v269 = v134;
        llvm::APInt::initSlowCase((llvm::APInt *)&v268, v93 & 0x7FFFFFFFFFFFFFFFLL, 0);
        v143 = v271;
        v141 = v270;
        v134 = v269;
        v142 = v268;
      }
      else
      {
        v270 = 0;
        if (v134)
          v140 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v134;
        else
          v140 = 0;
        v141 = 0;
        v142 = v140 & v110;
        v268 = v142;
        v143 = v134;
      }
      v289 = v143;
      v288 = v141;
      v271 = 0;
      v291 = v134;
      v290 = v142;
      v269 = 0;
      llvm::ConstantRange::intersectWith((uint64_t)&v292, (llvm::ConstantRange *)&v288, 0, (uint64_t)&__s1);
      v144 = v313;
      if (v313 > 0x40)
      {
        v238 = __s1;
        v145 = v314[0];
        if (memcmp(__s1, v314[0], (((unint64_t)v313 + 63) >> 3) & 0x3FFFFFF8))
        {
          v147 = 0;
LABEL_348:
          if (LODWORD(v314[1]) >= 0x41 && v145 != 0)
          {
            MEMORY[0x1CAA32F9C](v145, 0x1000C8000313F17);
            LODWORD(v144) = v313;
          }
          if (v144 >= 0x41 && __s1)
            MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
          if ((v147 & 1) != 0)
          {
            v24 = 0;
LABEL_382:
            if (v291 >= 0x41 && v290)
              MEMORY[0x1CAA32F9C](v290, 0x1000C8000313F17);
            if (v289 >= 0x41 && v288)
              MEMORY[0x1CAA32F9C](v288, 0x1000C8000313F17);
            if (v295 >= 0x41 && v294)
              MEMORY[0x1CAA32F9C](v294, 0x1000C8000313F17);
            if (v293 >= 0x41 && v292)
              MEMORY[0x1CAA32F9C](v292, 0x1000C8000313F17);
            goto LABEL_390;
          }
          if ((_DWORD)v324 != 2)
          {
            if ((_DWORD)v324 == 1)
            {
              v149 = (char *)v323[1];
              if (!*((_DWORD *)v323[1] + 4))
              {
                v150 = *(_QWORD *)v323[1];
                v151 = (_QWORD *)*((_QWORD *)v323[1] + 5);
                v153 = *((_QWORD *)a1 + 5);
                v152 = (void *)*((_QWORD *)a1 + 6);
                if (!v151 || !v151[5])
                {
                  if (!v150
                    || *(unsigned __int8 *)(v150 + 16) < 0x1Cu
                    || (v151 = *(_QWORD **)v323[1], !*(_QWORD *)(v150 + 40)))
                  {
                    v151 = 0;
                  }
                }
                __s1 = (void *)*((_QWORD *)a1 + 1);
                v313 = v153;
                v314[0] = v151;
                v314[1] = v152;
                *(_QWORD *)&v315 = 0;
                BYTE8(v315) = 1;
                if (sub_1C4F84D74(v150, 0, (uint64_t)&__s1))
                {
                  v8 = *((_DWORD *)v149 + 8);
                  LODWORD(v313) = v8;
                  if (v8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&__s1, 1, 0);
                    v8 = v313;
                    v155 = (unint64_t *)__s1;
                  }
                  else
                  {
                    v154 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v8;
                    if (!v8)
                      LOBYTE(v154) = 0;
                    v155 = (unint64_t *)(v154 & 1);
                  }
                  v156 = (const void **)(v149 + 24);
                  if (v149[48])
                    goto LABEL_367;
                  v206 = (const void **)(v149 + 24);
                  v207 = **(llvm::Type ***)v149;
                  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v207);
                  if ((_DWORD)v208 == 1)
                  {
                    v207 = **(llvm::Type ***)v149;
                  }
                  v211 = llvm::Type::getPrimitiveSizeInBits(v207);
                  if ((_DWORD)v210 == 1)
                  v212 = v211
                       - (*((_DWORD *)v149 + 4)
                        + PrimitiveSizeInBits)
                       + *((_DWORD *)v149 + 2)
                       + *((_DWORD *)v149 + 3);
                  if (v212 < 1)
                  {
                    v93 = v263;
                    goto LABEL_371;
                  }
                  v285 = v211
                       - (*((_DWORD *)v149 + 4)
                        + PrimitiveSizeInBits)
                       + *((_DWORD *)v149 + 2)
                       + *((_DWORD *)v149 + 3);
                  if (v212 > 0x40)
                    llvm::APInt::initSlowCase((llvm::APInt *)&v284, -1, 1);
                  else
                    v284 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v212;
                  llvm::APInt::zext((llvm::APInt *)&v284, *((_DWORD *)v149 + 8), (uint64_t)&__s1);
                  v213 = *((unsigned int *)v149 + 8);
                  if (v213 > 0x40)
                  {
                    v214 = __s1;
                    v254 = ((unint64_t)(v213 + 63) >> 3) & 0x3FFFFFF8;
                    do
                    {
                      if (!v254)
                      {
                        v215 = 0;
                        goto LABEL_497;
                      }
                      v255 = *(_QWORD *)((char *)*v206 + v254 - 8);
                      v256 = *(_QWORD *)((char *)__s1 + v254 - 8);
                      v254 -= 8;
                    }
                    while (v255 == v256);
                    v215 = v255 > v256 ? 1 : -1;
                  }
                  else
                  {
                    v214 = __s1;
                    v215 = *v206 < __s1 ? -1 : *v206 > __s1;
                  }
LABEL_497:
                  if (v313 >= 0x41 && v214 != 0)
                    MEMORY[0x1CAA32F9C]();
                  if (v285 >= 0x41 && v284)
                    MEMORY[0x1CAA32F9C](v284, 0x1000C8000313F17);
                  v93 = v263;
                  v156 = v206;
                  if (v215 <= 0)
                  {
LABEL_367:
                    sub_1C4DA6CE8(v156, (uint64_t)&__s1);
                    if (v8 >= 0x41 && v155)
                      MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
                    v155 = (unint64_t *)__s1;
                    v8 = v313;
                  }
LABEL_371:
                  v157 = v323[0];
                  v262 = v323[0];
                  if (LODWORD(v323[0]) >= 0x41)
                  {
                    v193 = LODWORD(v323[0]) + 63;
                    v160 = operator new[]();
                    v158 = __src;
                    memcpy((void *)v160, __src, (v193 >> 3) & 0x3FFFFFF8);
                    v194 = 0;
                    v195 = v193 >> 6;
                    v196 = (unint64_t *)v160;
                    v197 = v155;
                    v198 = v193 >> 6;
                    do
                    {
                      v199 = *v197++;
                      v200 = *v196 - v199;
                      v201 = *v196 < v199;
                      v202 = *v196 + ~v199;
                      if (v194)
                      {
                        v194 = v202 >= *v196;
                      }
                      else
                      {
                        v202 = v200;
                        v194 = v201;
                      }
                      *v196++ = v202;
                      --v198;
                    }
                    while (v198);
                    v157 = v262;
                    *(_QWORD *)(v160 + 8 * (v195 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v262;
                    v161 = v323[0];
                    if (LODWORD(v323[0]) >= 0x41)
                    {
                      v259 = v323[0];
                      v217 = LODWORD(v323[0]) + 63;
                      v204 = operator new[]();
                      memcpy((void *)v204, __src, (v217 >> 3) & 0x3FFFFFF8);
                      v218 = 0;
                      v219 = (unint64_t *)v204;
                      v220 = (uint64_t *)v155;
                      v205 = v217 >> 6;
                      do
                      {
                        v221 = *v220++;
                        v222 = v221 + *v219;
                        v223 = v222 + 1 <= *v219;
                        if (v218)
                        {
                          ++v222;
                          v218 = v223;
                        }
                        else
                        {
                          v218 = v222 < *v219;
                        }
                        *v219++ = v222;
                        --v205;
                      }
                      while (v205);
                      v161 = v259;
                      *(_QWORD *)(v204 + 8 * ((v217 >> 6) - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v259;
                      v157 = v262;
                      v93 = v263;
LABEL_515:
                      v224 = 1 << (v157 - 1);
                      if (v157 > 0x40)
                      {
                        if ((*(_QWORD *)(v160 + 8 * ((v157 - 1) >> 6)) & v224) == 0)
                          goto LABEL_551;
                        v258 = v205;
                        v260 = v161;
                        v265 = v157;
                        v264 = (void *)operator new[]();
                        memcpy(v264, (const void *)v160, (((unint64_t)v157 + 63) >> 3) & 0x3FFFFFF8);
                        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v264);
                      }
                      else
                      {
                        if ((v160 & v224) == 0)
                          goto LABEL_551;
                        v258 = v205;
                        v260 = v161;
                        v265 = v157;
                        if (v157)
                          v225 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v157;
                        else
                          v225 = 0;
                        v264 = (void *)(v225 & ~v160);
                      }
                      llvm::APInt::operator++((uint64_t)&v264);
                      v226 = v265;
                      __s1 = v264;
                      v265 = 0;
                      if (v226 >= 0x41)
                      {
                        v228 = 0;
                        v229 = (unint64_t)(v226 + 63) >> 6;
                        do
                        {
                          v33 = v229-- < 1;
                          if (v33)
                            break;
                          v230 = *((_QWORD *)v264 + v229);
                          v228 += __clz(v230);
                        }
                        while (!v230);
                        v231 = v226 | 0xFFFFFFC0;
                        if ((v226 & 0x3F) == 0)
                          v231 = 0;
                        v232 = v226 - v228 - v231;
                        p_s1 = (void **)v264;
                        if (v232 > 0x40)
                        {
LABEL_532:
                          v233 = 1 << (v260 - 1);
                          if (v258)
                          {
                            v234 = v204;
                            if ((v204 & v233) == 0)
                            {
LABEL_577:
                              v235 = v234 >= v110;
                              goto LABEL_537;
                            }
                          }
                          else if ((*(_QWORD *)(v204 + 8 * ((v260 - 1) >> 6)) & v233) == 0)
                          {
                            v239 = 0;
                            v240 = ((unint64_t)v260 + 63) >> 6;
                            do
                            {
                              v33 = v240-- < 1;
                              if (v33)
                                break;
                              v241 = *(_QWORD *)(v204 + 8 * v240);
                              v239 += __clz(v241);
                            }
                            while (!v241);
                            v242 = v260 | 0xFFFFFFC0;
                            if ((v260 & 0x3F) == 0)
                              v242 = 0;
                            if (v260 - v239 - v242 > 0x40)
                            {
                              v235 = 1;
                              goto LABEL_537;
                            }
                            v234 = *(_QWORD *)v204;
                            goto LABEL_577;
                          }
LABEL_536:
                          v235 = 0;
LABEL_537:
                          v157 = v262;
                          v93 = v263;
                          if (v226 >= 0x41)
                          {
                            if (v264)
                            {
                              MEMORY[0x1CAA32F9C]();
                              if (v265 >= 0x41)
                              {
                                if (v264)
                                  MEMORY[0x1CAA32F9C](v264, 0x1000C8000313F17);
                              }
                            }
                          }
                          LOBYTE(v205) = v258;
                          if (v235)
                          {
                            if (v204)
                              v236 = v258;
                            else
                              v236 = 1;
                            if ((v236 & 1) == 0)
                              MEMORY[0x1CAA32F9C](v204, 0x1000C8000313F17);
                            v24 = 0;
                            v162 = 1;
                            if (v262 >= 0x41 && v160)
                            {
                              MEMORY[0x1CAA32F9C](v160, 0x1000C8000313F17);
                              v24 = 0;
                            }
                            goto LABEL_378;
                          }
LABEL_551:
                          if (v204)
                            v237 = v205;
                          else
                            v237 = 1;
                          if ((v237 & 1) == 0)
                            MEMORY[0x1CAA32F9C](v204, 0x1000C8000313F17);
                          v162 = 1;
                          if (v157 < 0x41)
                            goto LABEL_377;
                          goto LABEL_557;
                        }
                      }
                      else
                      {
                        p_s1 = &__s1;
                      }
                      if ((unint64_t)*p_s1 < v115)
                        goto LABEL_536;
                      goto LABEL_532;
                    }
                    v93 = v263;
                  }
                  else
                  {
                    v158 = __src;
                    v159 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(v323[0]);
                    if (!LODWORD(v323[0]))
                      v159 = 0;
                    v160 = v159 & ((_BYTE *)__src - (_BYTE *)v155);
                    v161 = v323[0];
                  }
                  if (v161)
                    v203 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v161;
                  else
                    v203 = 0;
                  v204 = v203 & ((unint64_t)v155 + (_QWORD)v158);
                  LODWORD(v205) = 1;
                  goto LABEL_515;
                }
              }
            }
            v155 = 0;
            v162 = 0;
LABEL_377:
            v24 = !llvm::BasicAAResult::constantOffsetHeuristic((const llvm::APInt **)a1, (uint64_t)&v321, v94, v93, *((const llvm::DataLayout **)a1 + 5), *((const llvm::Instruction **)a1 + 6));
LABEL_378:
            if (v162 && v8 >= 0x41 && v155)
              MEMORY[0x1CAA32F9C](v155, 0x1000C8000313F17);
            goto LABEL_382;
          }
          v163 = (const void **)v323[1];
          v164 = *((_DWORD *)v323[1] + 22);
          v267 = v164;
          if (v164 > 0x40)
          {
            __s2 = (void *)operator new[]();
            memcpy(__s2, v163[10], (((unint64_t)v267 + 63) >> 3) & 0x3FFFFFF8);
            v257 = v93;
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&__s2);
          }
          else
          {
            if (v164)
              v170 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v164;
            else
              v170 = 0;
            v257 = v93;
            __s2 = (void *)(v170 & ~*((_QWORD *)v323[1] + 10));
          }
          v171 = v163 + 3;
          llvm::APInt::operator++((uint64_t)&__s2);
          v172 = v267;
          v173 = __s2;
          v267 = 0;
          v174 = *((unsigned int *)v163 + 8);
          if (v174 > 0x40)
            v175 = memcmp(*v171, __s2, ((unint64_t)(v174 + 63) >> 3) & 0x3FFFFFF8) == 0;
          else
            v175 = *v171 == __s2;
          v177 = v175 && *((_DWORD *)v163 + 4) == 0;
          if (v177
            && *((_DWORD *)v163 + 2) == *((_DWORD *)v163 + 16)
            && *((_DWORD *)v163 + 3) == *((_DWORD *)v163 + 17)
            && !*((_DWORD *)v163 + 18)
            && *((_DWORD *)a1 + 21) == *((_DWORD *)a1 + 22))
          {
            v178 = (uint64_t)*v163;
            v179 = v163[7];
            v181 = *((_QWORD *)a1 + 5);
            v180 = (void *)*((_QWORD *)a1 + 6);
            if (!v179 || *((unsigned __int8 *)v179 + 16) < 0x1Cu || (v182 = (void *)v163[7], !v179[5]))
            {
              if (!v178 || *(unsigned __int8 *)(v178 + 16) < 0x1Cu || (v182 = (void *)*v163, !*(_QWORD *)(v178 + 40)))
                v182 = 0;
            }
            __s1 = (void *)*((_QWORD *)a1 + 1);
            v313 = v181;
            v314[0] = v182;
            v314[1] = v180;
            *(_QWORD *)&v315 = 0;
            BYTE8(v315) = 1;
            v183 = sub_1C4F851B8(v178, v179, 0, (uint64_t)&__s1);
            if (v172 >= 0x41 && v173)
              MEMORY[0x1CAA32F9C](v173, 0x1000C8000313F17);
            if (v267 >= 0x41 && __s2)
              MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
            if (v183)
            {
              sub_1C4DA6CE8(v171, (uint64_t)&__s1);
              v8 = v313;
              v155 = (unint64_t *)__s1;
              v93 = v257;
              goto LABEL_371;
            }
            v155 = 0;
            v162 = 0;
          }
          else
          {
            v162 = 0;
            v155 = 0;
            if (v172 >= 0x41)
            {
              v93 = v257;
              if (v173)
              {
                MEMORY[0x1CAA32F9C](v173, 0x1000C8000313F17);
                v162 = 0;
                v155 = 0;
                if (v267 >= 0x41)
                {
                  v160 = (uint64_t)__s2;
LABEL_557:
                  if (v160)
                    MEMORY[0x1CAA32F9C](v160, 0x1000C8000313F17);
                  goto LABEL_377;
                }
              }
              goto LABEL_377;
            }
          }
          v93 = v257;
          goto LABEL_377;
        }
        v243 = 0;
        v244 = (unint64_t)(v144 + 63) >> 6;
        do
        {
          v33 = v244-- < 1;
          if (v33)
            break;
          v245 = v238[v244];
          v243 += __clz(v245);
        }
        while (!v245);
        v246 = v144 | 0xFFFFFFC0;
        if ((v144 & 0x3F) == 0)
          v246 = 0;
        v146 = v243 + v246 == (_DWORD)v144;
      }
      else
      {
        v145 = v314[0];
        v146 = ((unint64_t)v314[0] | (unint64_t)__s1) == 0;
      }
      v147 = v146;
      goto LABEL_348;
    }
    v118 = v303 + 63;
    v119 = (_QWORD *)operator new[]();
    memcpy(v119, v302, (v118 >> 3) & 0x3FFFFFF8);
    v120 = 0;
    v121 = 0;
    v122 = (char *)v276;
    v123 = v118 >> 6;
    do
    {
      v124 = v119[v120];
      v125 = *(_QWORD *)&v122[v120 * 8];
      v126 = v124 - v125;
      v127 = v124 < v125;
      v128 = v124 + ~v125;
      v129 = v128 >= v124;
      if (v121)
      {
        v121 = v129;
      }
      else
      {
        v128 = v126;
        v121 = v127;
      }
      v119[v120++] = v128;
    }
    while (v118 >> 6 != v120);
    v130 = 0;
    v119[(v123 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v116;
    v115 = v94 & 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      v33 = v123-- < 1;
      if (v33)
        break;
      v131 = v119[v123];
      v130 += __clz(v131);
    }
    while (!v131);
    v132 = v116 | 0xFFFFFFC0;
    if ((v116 & 0x3F) == 0)
      v132 = 0;
    if (v116 - v130 - v132 >= 0x41)
    {
      MEMORY[0x1CAA32F9C](v119, 0x1000C8000313F17);
    }
    else
    {
      v133 = *v119;
      MEMORY[0x1CAA32F9C](v119, 0x1000C8000313F17);
      if (v133 < v115)
        goto LABEL_333;
    }
LABEL_389:
    v24 = 0;
LABEL_390:
    if (v277 >= 0x41 && v276)
      MEMORY[0x1CAA32F9C](v276, 0x1000C8000313F17);
    if (DWORD2(v310) >= 0x41 && (_QWORD)v310)
      MEMORY[0x1CAA32F9C](v310, 0x1000C8000313F17);
    if (v309[0] >= 0x41 && v308)
      MEMORY[0x1CAA32F9C](v308, 0x1000C8000313F17);
    if (v303 >= 0x41 && v302)
      MEMORY[0x1CAA32F9C](v302, 0x1000C8000313F17);
  }
LABEL_281:
  v103 = (char *)v318[1];
  if ((_DWORD)v319)
  {
    v104 = 56 * v319;
    do
    {
      if (*(_DWORD *)&v103[v104 - 24] >= 0x41u)
      {
        v105 = *(_QWORD *)&v103[v104 - 32];
        if (v105)
          MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
      }
      v104 -= 56;
    }
    while (v104);
    v103 = (char *)v318[1];
  }
  if (v103 != (char *)&v319 + 8)
    free(v103);
  if (LODWORD(v318[0]) >= 0x41 && v317)
    MEMORY[0x1CAA32F9C](v317, 0x1000C8000313F17);
  v106 = (char *)v323[1];
  if ((_DWORD)v324)
  {
    v107 = 56 * v324;
    do
    {
      if (*(_DWORD *)&v106[v107 - 24] >= 0x41u)
      {
        v108 = *(_QWORD *)&v106[v107 - 32];
        if (v108)
          MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
      }
      v107 -= 56;
    }
    while (v107);
    v106 = (char *)v323[1];
  }
  if (v106 != (char *)&v324 + 8)
    free(v106);
  if (LODWORD(v323[0]) >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return v24;
}

void llvm::BasicAAResult::subtractDecomposedGEPs(llvm::BasicAAResult *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  __int128 *v8;
  __int128 *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BOOL4 v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _BOOL4 v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unsigned int v43;
  __int128 v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  char v49;

  v5 = *(unsigned int *)(a2 + 16);
  if (v5 >= 0x41)
  {
    v31 = 0;
    v32 = *(unint64_t **)(a2 + 8);
    v33 = *(unint64_t **)(a3 + 8);
    v34 = (unint64_t)(v5 + 63) >> 6;
    v35 = v34;
    do
    {
      v36 = *v33++;
      v37 = *v32 - v36;
      v38 = *v32 < v36;
      v39 = *v32 + ~v36;
      if (v31)
      {
        v31 = v39 >= *v32;
      }
      else
      {
        v39 = v37;
        v31 = v38;
      }
      *v32++ = v39;
      --v35;
    }
    while (v35);
    *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * (v34 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
  }
  else
  {
    if ((_DWORD)v5)
      v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    else
      v6 = 0;
    *(_QWORD *)(a2 + 8) = v6 & (*(_QWORD *)(a2 + 8) - *(_QWORD *)(a3 + 8));
  }
  v7 = *(_DWORD *)(a3 + 32);
  if (v7)
  {
    v8 = *(__int128 **)(a3 + 24);
    v9 = (__int128 *)((char *)v8 + 56 * v7);
    v10 = (_QWORD *)(a2 + 24);
    do
    {
      v11 = *(unsigned int *)(a2 + 32);
      if (!(_DWORD)v11)
      {
LABEL_15:
        v16 = *v8;
        v45 = *((_DWORD *)v8 + 4);
        v44 = v16;
        v17 = *((_DWORD *)v8 + 8);
        v43 = v17;
        if (v17 <= 0x40)
        {
          v18 = *((_QWORD *)v8 + 3);
          goto LABEL_18;
        }
        v18 = operator new[]();
        v42 = v18;
        v17 = v43;
        memcpy((void *)v18, *((const void **)v8 + 3), (((unint64_t)v43 + 63) >> 3) & 0x3FFFFFF8);
        if (v17 > 0x40)
        {
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v42);
        }
        else
        {
LABEL_18:
          v19 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v17;
          if (!v17)
            v19 = 0;
          v42 = v19 & ~v18;
        }
        llvm::APInt::operator++((uint64_t)&v42);
        v47 = v43;
        v46 = v42;
        v43 = 0;
        v48 = *((_QWORD *)v8 + 5);
        v49 = *((_BYTE *)v8 + 48);
        sub_1C4DA2660(a2 + 24, (char *)&v44);
        if (v47 >= 0x41)
        {
          if (v46)
            MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
        }
        goto LABEL_24;
      }
      v12 = 0;
      v13 = *(_QWORD *)(a2 + 24);
      v14 = 56 * v11;
      while (1)
      {
        if (llvm::BasicAAResult::isValueEqualInPotentialCycles(a1, *(const llvm::Value **)(v13 + v12), *(const llvm::Value **)v8)&& *(_DWORD *)(v13 + v12 + 8) == *((_DWORD *)v8 + 2)&& *(_DWORD *)(v13 + v12 + 12) == *((_DWORD *)v8 + 3))
        {
          v15 = v13 + v12;
          if (*(_DWORD *)(v13 + v12 + 16) == *((_DWORD *)v8 + 4))
            break;
        }
        v12 += 56;
        if (v14 == v12)
          goto LABEL_15;
      }
      v20 = *(unsigned int *)(v15 + 32);
      if (v20 > 0x40)
      {
        v23 = *(unint64_t **)(v15 + 24);
        v24 = (unint64_t *)*((_QWORD *)v8 + 3);
        v40 = v20 + 63;
        v41 = *(_DWORD *)(v15 + 32);
        if (!memcmp(v23, v24, ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8))
        {
LABEL_39:
          sub_1C4DA2414((uint64_t *)(a2 + 24), *v10 + v12);
          goto LABEL_24;
        }
        v25 = 0;
        v26 = v40 >> 6;
        do
        {
          v27 = *v24++;
          v28 = *v23 - v27;
          v29 = *v23 < v27;
          v30 = *v23 + ~v27;
          if (v25)
          {
            v25 = v30 >= *v23;
          }
          else
          {
            v30 = v28;
            v25 = v29;
          }
          *v23++ = v30;
          --v26;
        }
        while (v26);
        *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8 * ((v40 >> 6) - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v41;
      }
      else
      {
        v21 = *(_QWORD *)(v15 + 24) - *((_QWORD *)v8 + 3);
        if (!v21)
          goto LABEL_39;
        v22 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v20;
        if (!(_DWORD)v20)
          v22 = 0;
        *(_QWORD *)(v15 + 24) = v22 & v21;
      }
      *(_BYTE *)(v13 + v12 + 48) = 0;
LABEL_24:
      v8 = (__int128 *)((char *)v8 + 56);
    }
    while (v8 != v9);
  }
}

const void **sub_1C4DA6CE8@<X0>(const void **result@<X0>, uint64_t a2@<X8>)
{
  const void **v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  void *v9;
  void *v10;
  int v11;

  v2 = result;
  v4 = *((unsigned int *)result + 2);
  v5 = v4 - 1;
  if (v4 > 0x40)
  {
    v8 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
    if (((*((_QWORD *)*result + (v5 >> 6)) >> v5) & 1) != 0)
    {
      v11 = *((_DWORD *)result + 2);
      v10 = (void *)operator new[]();
      memcpy(v10, *v2, v8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v10);
LABEL_9:
      result = (const void **)llvm::APInt::operator++((uint64_t)&v10);
      *(_DWORD *)(a2 + 8) = v11;
      *(_QWORD *)a2 = v10;
      v11 = 0;
      return result;
    }
    *(_DWORD *)(a2 + 8) = v4;
    v9 = (void *)operator new[]();
    *(_QWORD *)a2 = v9;
    return (const void **)memcpy(v9, *v2, v8);
  }
  else
  {
    v6 = (unint64_t)*result;
    if ((((unint64_t)*result >> v5) & 1) != 0)
    {
      v11 = *((_DWORD *)result + 2);
      if ((_DWORD)v4)
        v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
      else
        v7 = 0;
      v10 = (void *)(v7 & ~v6);
      goto LABEL_9;
    }
    *(_DWORD *)(a2 + 8) = v4;
    *(_QWORD *)a2 = v6;
  }
  return result;
}

BOOL llvm::BasicAAResult::constantOffsetHeuristic(const llvm::APInt **a1, uint64_t a2, unint64_t a3, unint64_t a4, const llvm::DataLayout *a5, const llvm::Instruction *a6)
{
  uint64_t v9;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  const void **v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  BOOL v22;
  _BOOL8 v23;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _BOOL4 v38;
  unint64_t v39;
  const void **v40;
  unsigned int v41;
  const void *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  const void **v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  const void **v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  void *v69;
  unsigned int v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t v73;
  unsigned int v74;
  __int128 __src;
  int v76;
  llvm::Value *v77;
  _QWORD v78[2];
  void *__s2;
  unsigned int v80;
  unint64_t *v81;
  unsigned int v82;
  const llvm::Value *v83;
  int v84;
  uint64_t v85;
  void *v86;
  unsigned int v87;
  char *v88;
  unsigned int v89;
  void *v90;
  unsigned int v91;

  if (*(_DWORD *)(a2 + 32) != 2 || a3 > 0xFFFFFFFFFFFFFFFDLL || a4 > 0xFFFFFFFFFFFFFFFDLL)
    return 0;
  v9 = *(_QWORD *)(a2 + 24);
  if (*(_DWORD *)(v9 + 16)
    || *(_DWORD *)(v9 + 8) != *(_DWORD *)(v9 + 64)
    || *(_DWORD *)(v9 + 12) != *(_DWORD *)(v9 + 68)
    || *(_DWORD *)(v9 + 72))
  {
    return 0;
  }
  v15 = *(unsigned int *)(v9 + 88);
  v91 = v15;
  if (v15 > 0x40)
  {
    v17 = ((unint64_t)(v15 + 63) >> 3) & 0x3FFFFFF8;
    v90 = (void *)operator new[]();
    memcpy(v90, *(const void **)(v9 + 80), v17);
    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v90);
  }
  else
  {
    if ((_DWORD)v15)
      v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
    else
      v16 = 0;
    v90 = (void *)(v16 & ~*(_QWORD *)(v9 + 80));
  }
  v18 = (const void **)(v9 + 24);
  llvm::APInt::operator++((uint64_t)&v90);
  v19 = v91;
  v20 = v90;
  v91 = 0;
  v21 = *(unsigned int *)(v9 + 32);
  if (v21 > 0x40)
  {
    if (!memcmp(*v18, v90, ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8))
      goto LABEL_20;
LABEL_22:
    v22 = 1;
    goto LABEL_23;
  }
  if (*v18 != v90)
    goto LABEL_22;
LABEL_20:
  v22 = **(_QWORD **)v9 != **(_QWORD **)(v9 + 56);
LABEL_23:
  if (v19 >= 0x41)
  {
    if (v20)
    {
      MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
      if (v91 >= 0x41)
      {
        if (v90)
          MEMORY[0x1CAA32F9C](v90, 0x1000C8000313F17);
      }
    }
  }
  if (v22)
    return 0;
  v77 = *(llvm::Value **)v9;
  v78[0] = 0;
  LODWORD(v78[1]) = 0;
  sub_1C4DA179C((uint64_t)&v83, (__int128 *)&v77, a1[1], 0, a5, a6);
  __src = *(unint64_t *)(v9 + 56);
  v76 = 0;
  sub_1C4DA179C((uint64_t)&v77, &__src, a1[1], 0, a5, a6);
  if (v87 <= 0x40)
  {
    if (v86 != __s2)
      goto LABEL_42;
LABEL_35:
    if (v84 != LODWORD(v78[0])
      || v85 != *(_QWORD *)((char *)v78 + 4)
      || !llvm::BasicAAResult::isValueEqualInPotentialCycles((llvm::BasicAAResult *)a1, v83, v77))
    {
      goto LABEL_42;
    }
    v25 = v89;
    if (v89 >= 0x41)
    {
      v30 = v89 + 63;
      v31 = (void *)operator new[]();
      memcpy(v31, v88, (v30 >> 3) & 0x3FFFFFF8);
      v32 = 0;
      v33 = v81;
      v34 = (unint64_t *)v31;
      v35 = v30 >> 6;
      do
      {
        v36 = *v33++;
        v37 = *v34 - v36;
        v38 = *v34 < v36;
        v39 = *v34 + ~v36;
        if (v32)
        {
          v32 = v39 >= *v34;
        }
        else
        {
          v39 = v37;
          v32 = v38;
        }
        *v34++ = v39;
        --v35;
      }
      while (v35);
      *((_QWORD *)v31 + (v30 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
      DWORD2(__src) = v25;
      *(_QWORD *)&__src = v31;
      v74 = v25;
      v29 = operator new[]();
      v73 = v29;
      memcpy((void *)v29, (const void *)__src, (((unint64_t)v25 + 63) >> 3) & 0x3FFFFFF8);
      if (v25 > 0x40)
      {
        llvm::APInt::flipAllBitsSlowCase((uint64_t)&v73);
        v40 = (const void **)(v9 + 24);
        goto LABEL_65;
      }
      v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v25;
    }
    else
    {
      v26 = v88 - (char *)v81;
      v27 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v89;
      v28 = v27;
      if (!v89)
        v28 = 0;
      v29 = v28 & v26;
      DWORD2(__src) = v89;
      *(_QWORD *)&__src = v28 & v26;
      v74 = v89;
    }
    v40 = (const void **)(v9 + 24);
    if (!v25)
      v27 = 0;
    v73 = v27 & ~v29;
LABEL_65:
    llvm::APInt::operator++((uint64_t)&v73);
    v41 = v74;
    v42 = (const void *)v73;
    v74 = 0;
    v43 = DWORD2(__src);
    if (DWORD2(__src) > 0x40)
    {
      v52 = v40;
      v53 = (((unint64_t)DWORD2(__src) + 63) >> 3) & 0x3FFFFFF8;
      while (1)
      {
        v40 = v52;
        if (!v53)
          break;
        v54 = *(_QWORD *)(__src - 8 + v53);
        v55 = *(_QWORD *)(v73 - 8 + v53);
        v53 -= 8;
        if (v54 != v55)
        {
          v40 = v52;
          if (v54 <= v55)
            goto LABEL_73;
          break;
        }
      }
    }
    else
    {
      v44 = __src;
      if ((unint64_t)__src >= v73)
        v43 = v41;
      if (v43 < 0x41)
      {
        if ((unint64_t)__src >= v73)
          v44 = v73;
        *(_QWORD *)&__src = v44;
        DWORD2(__src) = v43;
LABEL_73:
        v45 = *(_DWORD *)(v9 + 32);
        if (DWORD2(__src) >= v45)
        {
          if (DWORD2(__src) > v45)
          {
            llvm::APInt::trunc((llvm::APInt *)&__src, v45, (llvm::APInt *)&v69);
          }
          else
          {
            v70 = DWORD2(__src);
            if (DWORD2(__src) > 0x40)
            {
              v69 = (void *)operator new[]();
              memcpy(v69, (const void *)__src, (((unint64_t)v70 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v69 = (void *)__src;
            }
          }
        }
        else
        {
          llvm::APInt::zext((llvm::APInt *)&__src, v45, (uint64_t)&v69);
        }
        v46 = a3 & 0x7FFFFFFFFFFFFFFFLL;
        sub_1C4DA6CE8(v40, (uint64_t)&v67);
        llvm::APInt::operator*((uint64_t)&v69, &v67, (uint64_t)&v71);
        if (v68 >= 0x41 && v67)
          MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
        if (v70 >= 0x41 && v69)
          MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
        v47 = (const void **)(a2 + 8);
        sub_1C4DA6CE8((const void **)(a2 + 8), (uint64_t)&v65);
        llvm::APInt::operator+=((uint64_t)&v65, v46);
        v48 = v66;
        v49 = v65;
        v66 = 0;
        v50 = v72;
        if (v72 > 0x40)
        {
          v51 = v71;
          v56 = (((unint64_t)v72 + 63) >> 3) & 0x3FFFFFF8;
          while (v56)
          {
            v57 = *(_QWORD *)(v71 + v56 - 8);
            v58 = *(_QWORD *)(v65 - 8 + v56);
            v56 -= 8;
            if (v57 != v58)
            {
              if (v57 <= v58)
                goto LABEL_87;
              break;
            }
          }
        }
        else
        {
          v51 = v71;
          if (v71 < v65)
          {
LABEL_87:
            v23 = 0;
LABEL_88:
            if (v48 >= 0x41 && v49)
              MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
            if (v66 >= 0x41 && v65)
              MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
            if (v50 >= 0x41 && v51)
              MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
            if (v41 >= 0x41 && v42)
              MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
            if (DWORD2(__src) >= 0x41 && (_QWORD)__src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            goto LABEL_43;
          }
        }
        sub_1C4DA6CE8(v47, (uint64_t)&v63);
        llvm::APInt::operator+=((uint64_t)&v63, a4 & 0x7FFFFFFFFFFFFFFFLL);
        v59 = v64;
        v64 = 0;
        if (v50 > 0x40)
        {
          v60 = ((unint64_t)(v50 + 63) >> 3) & 0x3FFFFFF8;
          while (v60)
          {
            v61 = *(_QWORD *)(v51 - 8 + v60);
            v62 = *(_QWORD *)(v63 - 8 + v60);
            v60 -= 8;
            if (v61 != v62)
            {
              v23 = v61 > v62;
              goto LABEL_116;
            }
          }
          v23 = 1;
        }
        else
        {
          v23 = v51 >= v63;
        }
LABEL_116:
        if (v59 >= 0x41)
        {
          if (v63)
          {
            MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
            if (v64 >= 0x41)
            {
              if (v63)
                MEMORY[0x1CAA32F9C](v63, 0x1000C8000313F17);
            }
          }
        }
        goto LABEL_88;
      }
      if ((unint64_t)__src < v73)
        goto LABEL_73;
    }
    llvm::APInt::reallocate((uint64_t)&__src, v41);
    if (DWORD2(__src) <= 0x40)
      *(_QWORD *)&__src = v42;
    else
      memcpy((void *)__src, v42, (((unint64_t)DWORD2(__src) + 63) >> 3) & 0x3FFFFFF8);
    goto LABEL_73;
  }
  if (!memcmp(v86, __s2, (((unint64_t)v87 + 63) >> 3) & 0x3FFFFFF8))
    goto LABEL_35;
LABEL_42:
  v23 = 0;
LABEL_43:
  if (v82 >= 0x41 && v81)
    MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
  if (v80 >= 0x41 && __s2)
    MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
  if (v89 >= 0x41 && v88)
    MEMORY[0x1CAA32F9C](v88, 0x1000C8000313F17);
  if (v87 >= 0x41 && v86)
    MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
  return v23;
}

uint64_t llvm::BasicAAResult::aliasSelect(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  BOOL v18;
  unsigned __int8 v19;
  uint64_t result;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  BOOL v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;

  if (a4 && *(_BYTE *)(a4 + 16) == 85 && *(_QWORD *)(a2 - 96) == *(_QWORD *)(a4 - 96))
  {
    v27 = *a1;
    v45 = *(_QWORD *)(a2 - 64);
    v46 = a3;
    v47 = 0u;
    v48 = 0u;
    v41 = *(_QWORD *)(a4 - 64);
    v42 = a5;
    v43 = 0u;
    v44 = 0u;
    if (v27)
    {
      v28 = *(_DWORD *)(a6 + 336);
      *(_DWORD *)(a6 + 336) = v28 + 1;
      v29 = *(_QWORD *)(v27 + 8);
      v30 = *(_QWORD *)(v27 + 16);
      if (v29 == v30)
      {
        v19 = 1;
      }
      else
      {
        v31 = v29 + 8;
        do
        {
          v32 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *, uint64_t))(**(_QWORD **)(v31 - 8) + 24))(*(_QWORD *)(v31 - 8), &v45, &v41, a6);
          v33 = v32 != 1 || v31 == v30;
          v31 += 8;
        }
        while (!v33);
        v19 = v32;
        v28 = *(_DWORD *)(a6 + 336) - 1;
      }
      *(_DWORD *)(a6 + 336) = v28;
    }
    else
    {
      v19 = llvm::BasicAAResult::aliasCheck(a1);
    }
    if (v19 == 1)
      return 1;
    v36 = *a1;
    v45 = *(_QWORD *)(a2 - 32);
    v46 = a3;
    v47 = 0u;
    v48 = 0u;
    v41 = *(_QWORD *)(a4 - 32);
    v42 = a5;
    v43 = 0u;
    v44 = 0u;
    if (v36)
    {
      v22 = *(_DWORD *)(a6 + 336);
      *(_DWORD *)(a6 + 336) = v22 + 1;
      v37 = *(_QWORD *)(v36 + 8);
      v38 = *(_QWORD *)(v36 + 16);
      if (v37 != v38)
      {
        v39 = v37 + 8;
        do
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *, uint64_t))(**(_QWORD **)(v39 - 8) + 24))(*(_QWORD *)(v39 - 8), &v45, &v41, a6);
          v40 = result != 1 || v39 == v38;
          v39 += 8;
        }
        while (!v40);
        goto LABEL_25;
      }
LABEL_63:
      result = 1;
      goto LABEL_26;
    }
    v34 = a1;
  }
  else
  {
    v12 = *a1;
    v45 = a4;
    v46 = a5;
    v47 = 0u;
    v48 = 0u;
    v41 = *(_QWORD *)(a2 - 64);
    v42 = a3;
    v43 = 0u;
    v44 = 0u;
    if (v12)
    {
      v13 = *(_DWORD *)(a6 + 336);
      *(_DWORD *)(a6 + 336) = v13 + 1;
      v14 = *(_QWORD *)(v12 + 8);
      v15 = *(_QWORD *)(v12 + 16);
      if (v14 == v15)
      {
        v19 = 1;
      }
      else
      {
        v16 = v14 + 8;
        do
        {
          v17 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *, uint64_t))(**(_QWORD **)(v16 - 8) + 24))(*(_QWORD *)(v16 - 8), &v45, &v41, a6);
          v18 = v17 != 1 || v16 == v15;
          v16 += 8;
        }
        while (!v18);
        v19 = v17;
        v13 = *(_DWORD *)(a6 + 336) - 1;
      }
      *(_DWORD *)(a6 + 336) = v13;
    }
    else
    {
      v19 = llvm::BasicAAResult::aliasCheck(a1);
    }
    if (v19 == 1)
      return 1;
    v21 = *a1;
    v45 = a4;
    v46 = a5;
    v47 = 0u;
    v48 = 0u;
    v41 = *(_QWORD *)(a2 - 32);
    v42 = a3;
    v43 = 0u;
    v44 = 0u;
    if (v21)
    {
      v22 = *(_DWORD *)(a6 + 336);
      *(_DWORD *)(a6 + 336) = v22 + 1;
      v23 = *(_QWORD *)(v21 + 8);
      v24 = *(_QWORD *)(v21 + 16);
      if (v23 != v24)
      {
        v25 = v23 + 8;
        do
        {
          result = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *, uint64_t))(**(_QWORD **)(v25 - 8) + 24))(*(_QWORD *)(v25 - 8), &v45, &v41, a6);
          v26 = result != 1 || v25 == v24;
          v25 += 8;
        }
        while (!v26);
LABEL_25:
        v22 = *(_DWORD *)(a6 + 336) - 1;
LABEL_26:
        *(_DWORD *)(a6 + 336) = v22;
        goto LABEL_39;
      }
      goto LABEL_63;
    }
    v34 = a1;
  }
  result = llvm::BasicAAResult::aliasCheck(v34);
LABEL_39:
  if (result != v19)
  {
    if (v19 == 3 && result == 2)
    {
      return 2;
    }
    else if (result == 3 && v19 == 2)
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t llvm::BasicAAResult::aliasPHI(uint64_t *a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6;
  uint64_t v8;
  uint64_t *v11;
  llvm::PhiValues *v12;
  uint64_t v13;
  llvm **v14;
  uint64_t v15;
  llvm *v16;
  int v17;
  uint64_t v18;
  llvm *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v25;
  __int128 v26;
  char i;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  _DWORD *ValuesForPhi;
  uint64_t v46;
  llvm **v47;
  uint64_t v48;
  llvm *v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int *v56;
  int *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL4 v70;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v91;
  int v92;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _OWORD *v104;
  __int128 v105;
  _OWORD v106[18];
  uint64_t v107;
  _DWORD v108[2];
  void *v109;
  uint64_t v110;
  _BYTE v111[128];
  uint64_t *v112;
  uint64_t v113;
  _OWORD v114[2];
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 20);
  v91 = v6 & 0x7FFFFFF;
  if ((v6 & 0x7FFFFFF) == 0)
    return 0;
  v8 = a5;
  v11 = a1;
  if (a4 && *(_BYTE *)(a4 + 16) == 83 && *(_QWORD *)(a4 + 40) == *(_QWORD *)(a2 + 40))
  {
    v25 = 0;
    v15 = 0;
    v26 = 0uLL;
    for (i = 1; ; i = 0)
    {
      v28 = *(_DWORD *)(a2 + 20);
      if ((v28 & 0x40000000) != 0)
        v29 = *(_QWORD *)(a2 - 8);
      else
        v29 = a2 - 32 * (v28 & 0x7FFFFFF);
      v30 = *(_QWORD *)(v29 + 32 * v25);
      v105 = v26;
      v106[0] = v26;
      v31 = *v11;
      v103 = v30;
      v104 = a3;
      v32 = *(_DWORD *)(a4 + 20);
      v33 = v32 & 0x7FFFFFF;
      if ((v32 & 0x7FFFFFF) != 0)
      {
        v34 = 0;
        v35 = *(_QWORD *)(v29 + 32 * *(unsigned int *)(a2 + 60) + 8 * v25);
        while (1)
        {
          v36 = a4 - 32 * v33;
          if ((v32 & 0x40000000) != 0)
            v36 = *(_QWORD *)(a4 - 8);
          if (*(_QWORD *)(v36 + 32 * *(unsigned int *)(a4 + 60) + 8 * v34) == v35)
            break;
          if (v33 == ++v34)
            goto LABEL_43;
        }
      }
      else
      {
LABEL_43:
        LODWORD(v34) = -1;
      }
      if ((v32 & 0x40000000) != 0)
        v37 = *(_QWORD *)(a4 - 8);
      else
        v37 = a4 - 32 * v33;
      v112 = *(uint64_t **)(v37 + 32 * v34);
      v113 = v8;
      v114[0] = v26;
      v114[1] = v26;
      if (v31)
      {
        v38 = *(_DWORD *)(a6 + 336);
        *(_DWORD *)(a6 + 336) = v38 + 1;
        v39 = *(_QWORD *)(v31 + 8);
        v40 = *(_QWORD *)(v31 + 16);
        if (v39 == v40)
        {
          v42 = 1;
        }
        else
        {
          v41 = v39 + 8;
          do
          {
            v42 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t **, uint64_t))(**(_QWORD **)(v41 - 8) + 24))(*(_QWORD *)(v41 - 8), &v103, &v112, a6);
            v43 = v42 != 1 || v41 == v40;
            v41 += 8;
          }
          while (!v43);
          v38 = *(_DWORD *)(a6 + 336) - 1;
          v8 = a5;
        }
        *(_DWORD *)(a6 + 336) = v38;
        v11 = a1;
        if ((i & 1) != 0)
        {
LABEL_56:
          v15 = v42;
          v26 = 0uLL;
          goto LABEL_68;
        }
      }
      else
      {
        v42 = llvm::BasicAAResult::aliasCheck(v11);
        if ((i & 1) != 0)
          goto LABEL_56;
      }
      v26 = 0uLL;
      if (v15 == v42)
        goto LABEL_68;
      if (v15 != 2 || v42 != 3)
      {
        if (v42 == 2 && v15 == 3)
          v15 = 2;
        else
          v15 = 1;
LABEL_68:
        if (v15 == 1)
          return v15;
        goto LABEL_69;
      }
      v15 = 2;
LABEL_69:
      if (++v25 == v91)
        return v15;
    }
  }
  v112 = (uint64_t *)v114;
  v113 = 0x400000000;
  v12 = (llvm::PhiValues *)a1[7];
  if (v12)
  {
    ValuesForPhi = llvm::PhiValues::getValuesForPhi(v12, (const llvm::PHINode *)a2);
    v46 = ValuesForPhi[12];
    if (v46 > 6)
    {
      v15 = 1;
      goto LABEL_30;
    }
    v17 = 0;
    if ((_DWORD)v46)
    {
      v47 = (llvm **)*((_QWORD *)ValuesForPhi + 5);
      v48 = 8 * v46;
      do
      {
        v49 = *v47;
        if (byte_1ED7EFF20 && llvm::getUnderlyingObject(*v47, (const llvm::Value *)6) == (llvm *)a2)
        {
          v17 = 1;
        }
        else
        {
          v50 = v113;
          if (v113 >= (unint64_t)HIDWORD(v113))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v113 + 1, 8);
            v50 = v113;
          }
          v112[v50] = (uint64_t)v49;
          LODWORD(v113) = v113 + 1;
        }
        ++v47;
        v48 -= 8;
      }
      while (v48);
    }
  }
  else
  {
    v103 = (uint64_t)v106;
    v104 = v106;
    *(_QWORD *)&v105 = 4;
    DWORD2(v105) = 0;
    if ((v6 & 0x40000000) != 0)
    {
      v14 = *(llvm ***)(a2 - 8);
      v13 = v91;
    }
    else
    {
      v13 = v91;
      v14 = (llvm **)(a2 - 32 * v91);
    }
    v16 = 0;
    v17 = 0;
    v18 = 32 * v13;
    do
    {
      v19 = v16;
      v20 = (uint64_t)*v14;
      if (*((_BYTE *)*v14 + 16) == 83)
      {
        v16 = *v14;
        if (v19)
        {
          v16 = *v14;
          if (v19 != (llvm *)v20)
          {
            v23 = 1;
            goto LABEL_26;
          }
        }
      }
      if (byte_1ED7EFF20 && llvm::getUnderlyingObject(*v14, (const llvm::Value *)6) == (llvm *)a2)
      {
        v17 = 1;
      }
      else
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v103, v20);
        if (v21)
        {
          v22 = v113;
          if (v113 >= (unint64_t)HIDWORD(v113))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v113 + 1, 8);
            v22 = v113;
          }
          v112[v22] = v20;
          LODWORD(v113) = v113 + 1;
        }
      }
      v14 += 4;
      v18 -= 32;
    }
    while (v18);
    if (v16)
      v23 = (DWORD1(v105) - DWORD2(v105)) > 1;
    else
      v23 = 0;
LABEL_26:
    if (v104 != (_OWORD *)v103)
      free(v104);
    if (v23)
      goto LABEL_29;
  }
  if (!(_DWORD)v113)
  {
LABEL_29:
    v15 = 1;
    goto LABEL_30;
  }
  v87 = (uint64_t)(v11 + 8);
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(v11 + 8), *(_QWORD *)(a2 + 40));
  v52 = *(_QWORD *)(a6 + 328);
  v103 = 1;
  v53 = 8;
  do
  {
    v54 = (char *)&v103 + v53;
    *(_OWORD *)v54 = xmmword_1C85F2120;
    *((_OWORD *)v54 + 1) = xmmword_1C85F2120;
    v53 += 40;
  }
  while (v54 + 40 != (char *)&v107);
  if (v17)
    v55 = -1;
  else
    v55 = (uint64_t)a3;
  v107 = v52;
  v56 = v108;
  v108[1] = 0;
  v109 = v111;
  v110 = 0x400000000;
  v57 = (int *)(a6 + 336);
  v108[0] = *(_DWORD *)(a6 + 336);
  if (v51)
    v58 = &v103;
  else
    v58 = (uint64_t *)a6;
  v59 = v55;
  v60 = *a1;
  v99 = a4;
  v100 = a5;
  v101 = 0u;
  v102 = 0u;
  v95 = *v112;
  v96 = v55;
  v97 = 0u;
  v98 = 0u;
  v94 = v58;
  v88 = v51;
  if (v60)
  {
    if (v51)
      v61 = v108;
    else
      v61 = v57;
    v62 = (*v61)++;
    v63 = *(_QWORD *)(v60 + 8);
    v64 = *(_QWORD *)(v60 + 16);
    if (v63 == v64)
    {
      v68 = 1;
    }
    else
    {
      v65 = v63 + 8;
      do
      {
        v66 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *, uint64_t *))(**(_QWORD **)(v65 - 8) + 24))(*(_QWORD *)(v65 - 8), &v99, &v95, v58);
        v58 = v94;
        v67 = v66 != 1 || v65 == v64;
        v65 += 8;
      }
      while (!v67);
      v68 = v66;
      v62 = *v61 - 1;
    }
    *v61 = v62;
  }
  else
  {
    v69 = llvm::BasicAAResult::aliasCheck(a1);
    v58 = v94;
    v68 = v69;
  }
  v70 = v17 == 0;
  if (!(_BYTE)v68)
    v70 = 1;
  if (v68 == 1 || !v70)
  {
    v15 = 1;
    goto LABEL_116;
  }
  v92 = v113;
  if ((_DWORD)v113 != 1)
  {
    if (!v88)
      v56 = v57;
    v75 = 1;
    while (1)
    {
      v76 = v112[v75];
      v77 = *a1;
      v99 = a4;
      v100 = a5;
      v101 = 0u;
      v102 = 0u;
      v95 = v76;
      v96 = v59;
      v97 = 0u;
      v98 = 0u;
      if (v77)
      {
        v78 = (*v56)++;
        v79 = *(_QWORD *)(v77 + 8);
        v80 = *(_QWORD *)(v77 + 16);
        if (v79 == v80)
        {
          v15 = 1;
        }
        else
        {
          v81 = v59;
          v82 = v79 + 8;
          do
          {
            v83 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t *, uint64_t *))(**(_QWORD **)(v82 - 8) + 24))(*(_QWORD *)(v82 - 8), &v99, &v95, v58);
            v58 = v94;
            v84 = v83 != 1 || v82 == v80;
            v82 += 8;
          }
          while (!v84);
          v15 = v83;
          v78 = *v56 - 1;
          v59 = v81;
        }
        *v56 = v78;
      }
      else
      {
        v85 = llvm::BasicAAResult::aliasCheck(a1);
        v58 = v94;
        v15 = v85;
      }
      if (v15 == v68)
        goto LABEL_148;
      if (v68 != 3 || v15 != 2)
        break;
      v15 = 2;
LABEL_149:
      ++v75;
      LOBYTE(v68) = v15;
      if (v92 == (_DWORD)v75)
        goto LABEL_116;
    }
    if (v15 == 3 && v68 == 2)
      v15 = 2;
    else
      v15 = 1;
LABEL_148:
    if (v15 == 1)
      goto LABEL_116;
    goto LABEL_149;
  }
  v15 = v68;
LABEL_116:
  if (v109 != v111)
    free(v109);
  if ((v103 & 1) != 0)
  {
    if (v88)
    {
LABEL_120:
      v72 = sub_1C477672C(v87, *(_QWORD *)(a2 + 40));
      v73 = a1[9];
      v74 = 80;
      if (v73 == a1[8])
        v74 = 84;
      if (v72 != (_QWORD *)(v73 + 8 * *(unsigned int *)((char *)a1 + v74)))
      {
        *v72 = -2;
        ++*((_DWORD *)a1 + 22);
      }
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](v104, 8);
    if (v88)
      goto LABEL_120;
  }
LABEL_30:
  if (v112 != (uint64_t *)v114)
    free(v112);
  return v15;
}

BOOL llvm::BasicAAResult::isValueEqualInPotentialCycles(llvm::BasicAAResult *this, const llvm::Value *a2, const llvm::Value *a3)
{
  _BOOL8 v3;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != a3)
    return 0;
  v3 = 1;
  if (a2)
  {
    if (*((unsigned __int8 *)a2 + 16) >= 0x1Cu)
    {
      v7 = *((_DWORD *)this + 21) - *((_DWORD *)this + 22);
      if (v7)
      {
        if (v7 > 0x14)
          return 0;
        v8 = *((_QWORD *)this + 9);
        v9 = 80;
        if (v8 == *((_QWORD *)this + 8))
          v9 = 84;
        v10 = *(unsigned int *)((char *)this + v9);
        if ((_DWORD)v10)
        {
          v11 = 8 * v10;
          for (i = *((_QWORD *)this + 9); *(_QWORD *)i >= 0xFFFFFFFFFFFFFFFELL; i += 8)
          {
            v11 -= 8;
            if (!v11)
              return v3;
          }
        }
        else
        {
          i = *((_QWORD *)this + 9);
        }
        v13 = v8 + 8 * v10;
        if (i == v13)
          return 1;
        v14 = *(_QWORD *)(*(_QWORD *)i + 48);
        v15 = v14 ? v14 - 24 : 0;
        if ((llvm::isPotentiallyReachable(v15, (uint64_t)a2, 0, *((_QWORD *)this + 6), 0) & 1) != 0)
          return 0;
        while (1)
        {
          i += 8;
          v3 = i == v13;
          if (i == v13)
            break;
          if (*(_QWORD *)i < 0xFFFFFFFFFFFFFFFELL)
          {
            v16 = *(_QWORD *)(*(_QWORD *)i + 48);
            v17 = v16 ? v16 - 24 : 0;
            if (llvm::isPotentiallyReachable(v17, (uint64_t)a2, 0, *((_QWORD *)this + 6), 0))
              break;
          }
        }
      }
    }
  }
  return v3;
}

uint64_t sub_1C4DA82F8(llvm *a1, const llvm::Value *a2, llvm::DataLayout *a3, llvm::DataLayout *a4, int a5)
{
  uint64_t result;
  uint64_t v11;
  unint64_t v12;

  result = llvm::isIdentifiedObject(a1, a2);
  if ((_DWORD)result)
  {
    v12 = 0;
    if (a5)
      v11 = 65792;
    else
      v11 = 256;
    LODWORD(result) = llvm::getObjectSize(a1, &v12, a3, a4, (llvm::DataLayout *)v11, 0);
    if (v12 < (unint64_t)a2)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t llvm::BasicAAResult::aliasCheckRecursive(llvm::BasicAAResult *a1, llvm::BasicAAResult *this, unint64_t a3, llvm::BasicAAResult *a4, unint64_t a5, uint64_t a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  int v16;
  uint64_t result;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::DataLayout *v25;
  llvm::DataLayout *v26;
  _BOOL4 ObjectSize;
  uint64_t v28;
  llvm::DataLayout *v29;
  llvm::DataLayout *v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;

  v16 = *((unsigned __int8 *)this + 16);
  if (v16 == 62 || v16 == 5 && *((_WORD *)this + 9) == 34)
  {
    result = llvm::BasicAAResult::aliasGEP(a1, this, a3, (uint64_t)a4, a5, a7, a8, a6);
  }
  else
  {
    v18 = *((unsigned __int8 *)a4 + 16);
    if (v18 != 62 && (v18 != 5 || *((_WORD *)a4 + 9) != 34))
      goto LABEL_15;
    LODWORD(result) = llvm::BasicAAResult::aliasGEP(a1, a4, a5, (uint64_t)this, a3, a8, a7, a6);
    if ((((int)result >> 9) + 0x3FFFFF) >> 23)
      v19 = result;
    else
      v19 = (result - (result & 0xFFFFFE00)) | 0x100;
    if ((result & 0x100) != 0)
      result = v19;
    else
      result = result;
  }
  if (result != 1)
    return result;
LABEL_15:
  if (*((_BYTE *)this + 16) == 83)
  {
    result = llvm::BasicAAResult::aliasPHI((uint64_t *)a1, (uint64_t)this, (_OWORD *)a3, (uint64_t)a4, a5, a6);
  }
  else
  {
    if (!a4 || *((_BYTE *)a4 + 16) != 83)
      goto LABEL_26;
    LODWORD(result) = llvm::BasicAAResult::aliasPHI((uint64_t *)a1, (uint64_t)a4, (_OWORD *)a5, (uint64_t)this, a3, a6);
    if ((((int)result >> 9) + 0x3FFFFF) >> 23)
      v20 = result;
    else
      v20 = (result - (result & 0xFFFFFE00)) | 0x100;
    if ((result & 0x100) != 0)
      result = v20;
    else
      result = result;
  }
  if (result != 1)
    return result;
LABEL_26:
  if (*((_BYTE *)this + 16) == 85)
  {
    result = llvm::BasicAAResult::aliasSelect(a1, (uint64_t)this, a3, (uint64_t)a4, a5, a6);
  }
  else
  {
    if (!a4 || *((_BYTE *)a4 + 16) != 85)
      goto LABEL_37;
    LODWORD(result) = llvm::BasicAAResult::aliasSelect(a1, (uint64_t)a4, a5, (uint64_t)this, a3, a6);
    if ((((int)result >> 9) + 0x3FFFFF) >> 23)
      v21 = result;
    else
      v21 = (result - (result & 0xFFFFFE00)) | 0x100;
    if ((result & 0x100) != 0)
      result = v21;
    else
      result = result;
  }
  if (result != 1)
    return result;
LABEL_37:
  if (a7 == a8)
  {
    v22 = *((_QWORD *)a1 + 2);
    if (v22 && (v23 = *(_QWORD *)(v22 + 112)) != 0 && (*(_BYTE *)(v23 + 17) & 1) != 0)
    {
      v24 = 0x10000;
      if ((a3 & 0x8000000000000000) != 0)
        return 1;
    }
    else
    {
      v24 = 0;
      if ((a3 & 0x8000000000000000) != 0)
        return 1;
    }
    if ((a5 & 0x8000000000000000) == 0)
    {
      v25 = (llvm::DataLayout *)*((_QWORD *)a1 + 1);
      v26 = (llvm::DataLayout *)*((_QWORD *)a1 + 3);
      v33 = 0;
      ObjectSize = llvm::getObjectSize((llvm::Value *)a7, &v33, v25, v26, (llvm::DataLayout *)v24, 0);
      v28 = v33;
      if (!ObjectSize)
        v28 = -1;
      if (v28 != -1 && v28 == a3)
        return 2;
      v29 = (llvm::DataLayout *)*((_QWORD *)a1 + 1);
      v30 = (llvm::DataLayout *)*((_QWORD *)a1 + 3);
      v33 = 0;
      v31 = llvm::getObjectSize((llvm::Value *)a7, &v33, v29, v30, (llvm::DataLayout *)v24, 0);
      v32 = v33;
      if (!v31)
        v32 = -1;
      if (v32 != -1 && v32 == a5)
        return 2;
    }
  }
  return 1;
}

double sub_1C4DA8678(_DWORD *a1, uint64_t *a2)
{
  double result;
  uint64_t *v4;
  int v5;
  uint64_t *v6;

  v6 = 0;
  if (sub_1C4DA9A0C((uint64_t)a1, a2, &v6))
  {
    v4 = v6;
    result = NAN;
    *(_OWORD *)v6 = xmmword_1C85F21A0;
    *((_OWORD *)v4 + 1) = xmmword_1C85F21A0;
    v5 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v5;
  }
  return result;
}

double llvm::BasicAA::run@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t CachedResultImpl;
  uint64_t v11;
  uint64_t v12;
  double result;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, a1) + 8;
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, a1) + 8;
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AssumptionAnalysis::Key, a1) + 8;
  v9 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1) + 8;
  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a2, (uint64_t)&llvm::PhiValuesAnalysis::Key, a1);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = CachedResultImpl + 8;
  if (!CachedResultImpl)
    v12 = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = v11 + 272;
  *(_QWORD *)(a3 + 16) = a1;
  *(_QWORD *)(a3 + 24) = v6;
  *(_QWORD *)(a3 + 32) = v7;
  *(_QWORD *)(a3 + 40) = v8;
  *(_QWORD *)(a3 + 48) = v9;
  *(_QWORD *)(a3 + 56) = v12;
  *(_QWORD *)(a3 + 64) = a3 + 96;
  *(_QWORD *)(a3 + 72) = a3 + 96;
  *(_QWORD *)(a3 + 80) = 8;
  *(_DWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 160) = a3 + 192;
  *(_QWORD *)(a3 + 168) = a3 + 192;
  *(_QWORD *)&result = 16;
  *(_QWORD *)(a3 + 176) = 16;
  *(_DWORD *)(a3 + 184) = 0;
  return result;
}

uint64_t sub_1C4DA87D4(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializePhiValuesWrapperPassPass(a1, v2);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Basic Alias Analysis (stateless AA impl)";
  *(_QWORD *)(v3 + 8) = 40;
  *(_QWORD *)(v3 + 16) = "basic-aa";
  *(_QWORD *)(v3 + 24) = 8;
  *(_QWORD *)(v3 + 32) = &llvm::BasicAAWrapperPass::ID;
  *(_WORD *)(v3 + 40) = 257;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::BasicAAWrapperPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::BasicAAWrapperPass::runOnFunction(llvm::BasicAAWrapperPass *this, llvm::Function *a2)
{
  uint64_t *v2;
  _QWORD *v3;
  void **v6;
  void *v7;
  void **v8;
  void *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  void **v14;
  void *v15;
  uint64_t v16;
  uint64_t AnalysisPass;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssumptionCache;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  llvm::AssumptionCacheTracker *v32;
  uint64_t v33;
  uint64_t v34[2];
  int v35;
  _QWORD v36[2];
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;

  v6 = (void **)**((_QWORD **)this + 1);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::AssumptionCacheTracker::ID);
  v32 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::AssumptionCacheTracker::ID);
  v8 = (void **)**((_QWORD **)this + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::TargetLibraryInfoWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::TargetLibraryInfoWrapperPass::ID);
  v11 = (void **)**((_QWORD **)this + 1);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::TargetTransformInfoWrapperPass::ID);
  v13 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::TargetTransformInfoWrapperPass::ID);
  v14 = (void **)**((_QWORD **)this + 1);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != &llvm::DominatorTreeWrapperPass::ID);
  v16 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), &llvm::DominatorTreeWrapperPass::ID);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)this + 1) + 24), &llvm::PhiValuesWrapperPass::ID, 1);
  if (AnalysisPass)
    v18 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::PhiValuesWrapperPass::ID);
  else
    v18 = 0;
  v19 = operator new();
  v20 = (uint64_t *)*((_QWORD *)a2 + 5);
  v21 = sub_1C4D914E8(v10, (uint64_t)a2);
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v22 = *(_QWORD *)(v13 + 56);
  if (!v22)
  {
    sub_1C485C2F0();
LABEL_27:
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    goto LABEL_15;
  }
  v3 = v20 + 34;
  v2 = v36;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, llvm::Function *))(*(_QWORD *)v22 + 48))(&v33, v22, a2);
  v20 = (uint64_t *)(v13 + 64);
  v23 = v33;
  if (!*(_BYTE *)(v13 + 72))
  {
    *(_QWORD *)(v13 + 64) = v33;
    *(_BYTE *)(v13 + 72) = 1;
    goto LABEL_15;
  }
  v33 = 0;
  v24 = *v20;
  *v20 = v23;
  if (v24)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v33;
    v33 = 0;
    if (v25)
      goto LABEL_27;
  }
LABEL_15:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(v34);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v32, a2);
  v27 = 0;
  if (v18)
    v27 = *(_QWORD *)(v18 + 32);
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = v3;
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = v21;
  *(_QWORD *)(v19 + 32) = v20;
  *(_QWORD *)(v19 + 40) = AssumptionCache;
  *(_QWORD *)(v19 + 48) = v16 + 32;
  *(_QWORD *)(v19 + 56) = v27;
  *(_QWORD *)(v19 + 64) = v19 + 96;
  *(_QWORD *)(v19 + 72) = v19 + 96;
  *(_QWORD *)(v19 + 80) = 8;
  *(_DWORD *)(v19 + 88) = 0;
  *(_QWORD *)(v19 + 160) = v19 + 192;
  *(_QWORD *)(v19 + 168) = v19 + 192;
  *(_QWORD *)(v19 + 176) = 16;
  *(_DWORD *)(v19 + 184) = 0;
  v28 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v19;
  if (v28)
  {
    v29 = (void *)v28[21];
    if (v29 != (void *)v28[20])
      free(v29);
    v30 = (void *)v28[9];
    if (v30 != (void *)v28[8])
      free(v30);
    MEMORY[0x1CAA32FC0](v28, 0x10E0C40C5342A8FLL);
  }
  return 0;
}

double llvm::createLegacyPMBasicAAResult@<D0>(llvm *this@<X0>, llvm::Pass *a2@<X1>, llvm::Function *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char **v21;
  char *v22;
  llvm::AssumptionCacheTracker *v23;
  uint64_t AssumptionCache;
  double result;
  uint64_t v26;
  uint64_t v27[2];
  int v28;
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;

  v9 = *((_QWORD *)a2 + 5);
  v10 = (char **)**((_QWORD **)this + 1);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::TargetLibraryInfoWrapperPass::ID);
  v12 = (*(uint64_t (**)(_QWORD, char *, llvm::Function *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::TargetLibraryInfoWrapperPass::ID, a3);
  v13 = sub_1C4D914E8(v12, (uint64_t)a2);
  v14 = (char **)**((_QWORD **)this + 1);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != llvm::TargetTransformInfoWrapperPass::ID);
  v16 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v27[0] = 0;
  v27[1] = 0;
  v28 = 0;
  v29[0] = 0;
  v29[1] = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v17 = *(_QWORD *)(v16 + 56);
  if (!v17)
  {
    sub_1C485C2F0();
    goto LABEL_14;
  }
  v4 = v29;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, llvm::Pass *))(*(_QWORD *)v17 + 48))(&v26, v17, a2);
  v5 = (uint64_t *)(v16 + 64);
  v18 = v26;
  if (!*(_BYTE *)(v16 + 72))
  {
    *(_QWORD *)(v16 + 64) = v26;
    *(_BYTE *)(v16 + 72) = 1;
    goto LABEL_9;
  }
  v26 = 0;
  v19 = *v5;
  *v5 = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v26;
    v26 = 0;
    if (v20)
LABEL_14:
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
LABEL_9:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v4);
  sub_1C4D8B52C(v27);
  v21 = (char **)**((_QWORD **)this + 1);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != llvm::AssumptionCacheTracker::ID);
  v23 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v23, a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = v9 + 272;
  *(_QWORD *)(a4 + 16) = a2;
  *(_QWORD *)(a4 + 24) = v13;
  *(_QWORD *)(a4 + 32) = v5;
  *(_QWORD *)(a4 + 40) = AssumptionCache;
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = a4 + 96;
  *(_QWORD *)(a4 + 72) = a4 + 96;
  *(_QWORD *)(a4 + 80) = 8;
  *(_DWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a4 + 160) = a4 + 192;
  *(_QWORD *)(a4 + 168) = a4 + 192;
  *(_QWORD *)&result = 16;
  *(_QWORD *)(a4 + 176) = 16;
  *(_DWORD *)(a4 + 184) = 0;
  return result;
}

uint64_t sub_1C4DA8D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int PrimitiveSizeInBits;
  const char *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  unint64_t v13;
  unsigned int v14;

  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**(llvm::Type ***)a2);
  if ((_DWORD)v6 == 1)
  {
    v12 = PrimitiveSizeInBits;
    PrimitiveSizeInBits = v12;
  }
  v7 = PrimitiveSizeInBits - *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 8) + *(_DWORD *)(a2 + 12);
  v14 = v7;
  if (v7 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v13, 1, 0);
  }
  else
  {
    v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    if (!v7)
      LOBYTE(v8) = 0;
    v13 = v8 & 1;
  }
  if (*(_DWORD *)(a1 + 32) >= 0x41u)
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (v9)
      MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
  }
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = v14;
  v14 = v7;
  if (v7 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v13, 0, 0);
  else
    v13 = 0;
  if (*(_DWORD *)(a1 + 48) >= 0x41u)
  {
    v10 = *(_QWORD *)(a1 + 40);
    if (v10)
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  }
  *(_QWORD *)(a1 + 40) = v13;
  *(_DWORD *)(a1 + 48) = v14;
  return a1;
}

void sub_1C4DA8EE0(uint64_t a1, _DWORD *a2, llvm::APInt *this)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v6 = a2[4];
  if (v6)
  {
    llvm::APInt::trunc(this, *((_DWORD *)this + 2) - v6, (llvm::APInt *)&v11);
    if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
      MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
    *(_QWORD *)this = v11;
    *((_DWORD *)this + 2) = v12;
  }
  v7 = a2[3];
  if (v7)
  {
    llvm::APInt::sext(this, *((_DWORD *)this + 2) + v7, (llvm::APInt *)&v11);
    if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
      MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
    *(_QWORD *)this = v11;
    *((_DWORD *)this + 2) = v12;
  }
  v8 = a2[2];
  if (v8)
  {
    llvm::APInt::zext(this, *((_DWORD *)this + 2) + v8, (uint64_t)&v11);
    if (*((_DWORD *)this + 2) >= 0x41u && *(_QWORD *)this)
      MEMORY[0x1CAA32F9C](*(_QWORD *)this, 0x1000C8000313F17);
    v9 = v11;
    *(_QWORD *)this = v11;
    v10 = v12;
  }
  else
  {
    v10 = *((_DWORD *)this + 2);
    v9 = *(_QWORD *)this;
  }
  *(_DWORD *)(a1 + 8) = v10;
  *(_QWORD *)a1 = v9;
  *((_DWORD *)this + 2) = 0;
}

uint64_t sub_1C4DA9024(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 v9;
  unsigned int v10;
  void *v11;
  unsigned int v12;
  void *v13;

  v9 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v9;
  v10 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a1 + 32) = v10;
  if (v10 > 0x40)
  {
    v11 = (void *)operator new[]();
    *(_QWORD *)(a1 + 24) = v11;
    memcpy(v11, *(const void **)a3, (((unint64_t)*(unsigned int *)(a1 + 32) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)a3;
  }
  v12 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(a1 + 48) = v12;
  if (v12 > 0x40)
  {
    v13 = (void *)operator new[]();
    *(_QWORD *)(a1 + 40) = v13;
    memcpy(v13, *(const void **)a4, (((unint64_t)*(unsigned int *)(a1 + 48) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = *(_QWORD *)a4;
  }
  *(_BYTE *)(a1 + 56) = a5;
  return a1;
}

BOOL sub_1C4DA911C(uint64_t a1, int a2)
{
  _BOOL8 result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  __int32 v16;

  result = 0;
  v4 = (a2 - 3);
  if (v4 <= 0x3F)
  {
    if (((1 << (a2 - 3)) & 0x8000020000000301) != 0)
    {
      v16 = 7;
      result = sub_1C53E4BBC(a1, &v16, 1uLL);
      if (!result)
        return result;
      v6 = *(_QWORD *)(a1 - 32);
      if (v6 && !*(_BYTE *)(v6 + 16) && *(_QWORD *)(v6 + 24) == *(_QWORD *)(a1 + 72))
        return *(_DWORD *)(v6 + 36) != 7;
      return 1;
    }
    if (v4 == 42)
    {
      v5 = *(_DWORD *)(a1 + 20);
      if ((v5 & 0x80000000) == 0)
        return 0;
      v7 = a1 - 32 * (v5 & 0x7FFFFFF);
      v10 = *(_QWORD *)(v7 - 8);
      v8 = v7 - 8;
      v9 = v10;
      if (!v10)
        return 0;
      v11 = -v9;
      while (1)
      {
        v12 = *(_DWORD *)(*(_QWORD *)(v8 + v11) + 8);
        v13 = v12 > 7;
        v14 = (1 << v12) & 0x83;
        if (v13 || v14 == 0)
          break;
        result = 0;
        v11 += 16;
        if (!v11)
          return result;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C4DA9220(llvm::APInt *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;

  v3 = (uint64_t)a1;
  v4 = *((_DWORD *)a1 + 2);
  if (v4 < 0x41)
    goto LABEL_7;
  v5 = v4 - sub_1C4959174(a1) - 64;
  v4 = *(_DWORD *)(v3 + 8);
  if (v5 > 0xFFFFFFBE)
  {
    if (v4 > 0x40)
    {
      v8 = **(_QWORD **)v3;
      return v8 < a2;
    }
LABEL_7:
    v8 = (uint64_t)(*(_QWORD *)v3 << -(char)v4) >> -(char)v4;
    return v8 < a2;
  }
  v6 = v4 - 1;
  if (v4 >= 0x41)
    v3 = *(_QWORD *)v3 + 8 * (v6 >> 6);
  return (*(_QWORD *)v3 >> v6) & 1;
}

BOOL sub_1C4DA92C4(llvm::APInt *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;

  v3 = (uint64_t)a1;
  v4 = *((_DWORD *)a1 + 2);
  if (v4 < 0x41)
    goto LABEL_7;
  v5 = v4 - sub_1C4959174(a1) - 64;
  v4 = *(_DWORD *)(v3 + 8);
  if (v5 > 0xFFFFFFBE)
  {
    if (v4 > 0x40)
    {
      v8 = **(_QWORD **)v3;
      return v8 > a2;
    }
LABEL_7:
    v8 = (uint64_t)(*(_QWORD *)v3 << -(char)v4) >> -(char)v4;
    return v8 > a2;
  }
  v6 = v4 - 1;
  if (v4 >= 0x41)
    v3 = *(_QWORD *)v3 + 8 * (v6 >> 6);
  return ((*(_QWORD *)v3 >> v6) & 1) == 0;
}

int *sub_1C4DA936C(int *result)
{
  int v1;
  unsigned int v2;
  _OWORD *v3;
  _OWORD *v4;

  v1 = *result;
  *(_QWORD *)result = *result & 1;
  if ((v1 & 1) != 0)
  {
    v3 = result + 2;
    v4 = result + 82;
  }
  else
  {
    v2 = result[4];
    if (!v2)
      return result;
    v3 = (_OWORD *)*((_QWORD *)result + 1);
    v4 = (_OWORD *)((char *)v3 + 40 * v2);
  }
  do
  {
    *v3 = xmmword_1C85F2120;
    v3[1] = xmmword_1C85F2120;
    v3 = (_OWORD *)((char *)v3 + 40);
  }
  while (v3 != v4);
  return result;
}

uint64_t sub_1C4DA93B8(uint64_t a1)
{
  sub_1C4DA93EC((uint64_t *)(a1 + 48));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  return a1;
}

uint64_t *sub_1C4DA93EC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (uint64_t *)(v3 + 8);
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v5 = sub_1C4DA9768(v5);
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t sub_1C4DA944C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE v18[8];
  uint64_t v19[3];

  v8 = sub_1C4D91F84(*a1, a2);
  v9 = *a1;
  v10 = *a1 + 8;
  if ((*(_BYTE *)*a1 & 1) != 0)
  {
    v11 = 8;
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 16);
  }
  if (v10 + 16 * v11 == v8)
  {
    v13 = a1[1];
    v19[0] = a2;
    v19[1] = a3;
    v17 = 0;
    if (sub_1C4D920B0((uint64_t *)v13, v19, &v17))
      v14 = v17;
    else
      v14 = *(_QWORD *)v13 + 24 * *(unsigned int *)(v13 + 16);
    v15 = *a1;
    v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(v14 + 16) + 24)
                                                                         + 16))(*(_QWORD *)(*(_QWORD *)(v14 + 16) + 24), a3, a4, a1);
    v17 = a2;
    v18[0] = v16;
    sub_1C4D921A4(v15, &v17, v18, (uint64_t)v19);
    v8 = v19[0];
  }
  return *(unsigned __int8 *)(v8 + 8);
}

_QWORD *sub_1C4DA9548(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DA95F8(a1, v7);
  v9 = 0;
  sub_1C4850EC8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4DA95F8(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C617ADCC(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C4DA96B0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C617AE78((uint64_t *)a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1C4DA9768(uint64_t *a1)
{
  uint64_t v2;
  void **v3;

  v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*v3 != v3 + 2)
        free(*v3);
      MEMORY[0x1CAA32FC0]();
    }
  }
  return a1;
}

uint64_t sub_1C4DA97DC(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_7;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_BYTE *sub_1C4DA9878(unsigned int *a1, uint64_t a2, char *a3, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = a1[2];
  v10 = a1[3];
  v11 = a4 - a3;
  v12 = v9 + ((a4 - a3) >> 5);
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    if (v12 > v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v12, 8);
      v9 = a1[2];
      v7 = *(_QWORD *)a1;
    }
    if (v5 != a4)
    {
      v21 = (_QWORD *)(v7 + 8 * v9);
      do
      {
        v22 = *(_QWORD *)v5;
        v5 += 32;
        *v21++ = v22;
      }
      while (v5 != a4);
      v7 = *(_QWORD *)a1;
    }
    a1[2] = v9 + ((unint64_t)v11 >> 5);
    return (_BYTE *)(v7 + 8 * v8);
  }
  else
  {
    v13 = v11 >> 5;
    if (v12 > v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v12, 8);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v14 = (_BYTE *)(v7 + 8 * v8);
    v15 = (char *)(v7 + 8 * v9);
    v16 = (v15 - v14) >> 3;
    if (v16 >= v13)
    {
      sub_1C6177054(a1, &v15[-8 * v13], (char *)(v7 + 8 * v9));
      if (&v15[-8 * v13] != v14)
        memmove(&v14[8 * v13], v14, &v15[-8 * v13] - v14);
      if (v5 != a4)
      {
        v24 = v14;
        do
        {
          v25 = *(_QWORD *)v5;
          v5 += 32;
          *v24++ = v25;
        }
        while (v5 != a4);
      }
    }
    else
    {
      v17 = v9 + ((unint64_t)v11 >> 5);
      a1[2] = v17;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v17 - 8 * v16), (const void *)(v7 + 8 * v8), v15 - v14);
        v18 = v14;
        do
        {
          v19 = *(_QWORD *)v5;
          v5 += 32;
          *v18++ = v19;
          --v16;
        }
        while (v16);
      }
      while (v5 != a4)
      {
        v20 = *(_QWORD *)v5;
        v5 += 32;
        *(_QWORD *)v15 = v20;
        v15 += 8;
      }
    }
  }
  return v14;
}

uint64_t sub_1C4DA9A0C(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  int i;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  BOOL v26;
  unsigned int v27;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v17 = 0;
      result = 0;
      goto LABEL_26;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = 0;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = (v8 >> 4) ^ (v8 >> 9) ^ (37 * (_DWORD)v9);
  v11 = (v10 | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9) ^ (37 * (_DWORD)v7)) << 32))
      + ~(v10 << 32);
  v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
  v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
  v14 = v4 - 1;
  v15 = v14 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
  for (i = 1; ; ++i)
  {
    v17 = (uint64_t *)(v3 + 40 * v15);
    v18 = *v17;
    v19 = v17[1];
    if (v6 == *v17 && v7 == v19 && v8 == v17[2] && v9 == v17[3])
    {
      result = 1;
      goto LABEL_26;
    }
    if (v18 == -4096 && v19 == -3)
      break;
    if (v18 != -8192 || v19 != -4)
      goto LABEL_31;
    v26 = v17[2] == -8192 && v17[3] == -4;
LABEL_32:
    if (v26 && v5 == 0)
      v5 = (uint64_t *)(v3 + 40 * v15);
    v27 = v15 + i;
    v15 = v27 & v14;
  }
  if (v17[2] != -4096 || v17[3] != -3)
  {
LABEL_31:
    v26 = 0;
    goto LABEL_32;
  }
  result = 0;
  if (v5)
    v17 = v5;
LABEL_26:
  *a3 = v17;
  return result;
}

uint64_t *sub_1C4DA9B54(_DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  uint64_t *v11;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C4DA9C28((uint64_t)a1, v7);
  v11 = 0;
  sub_1C4DA9A0C((uint64_t)a1, a3, &v11);
  a4 = v11;
LABEL_5:
  *a1 += 2;
  v8 = *a4 == -4096 && a4[1] == -3;
  if (!v8 || (a4[2] == -4096 ? (v9 = a4[3] == -3) : (v9 = 0), !v9))
    --a1[1];
  return a4;
}

uint64_t sub_1C4DA9C28(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  _BYTE v23[320];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
  v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
  if ((v5 + 1) > 0x40)
    v6 = v5 + 1;
  else
    v6 = 64;
  if (a2 >= 9)
    v7 = v6;
  else
    v7 = a2;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 16);
    if (v7 > 8)
    {
      *(_QWORD *)(a1 + 8) = operator new(40 * v7, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4DA9DF8((int *)a1, v8, v8 + 40 * v9);
    JUMPOUT(0x1CAA32FB4);
  }
  v10 = 0;
  v11 = v23;
  do
  {
    v12 = a1 + v10;
    v13 = *(_QWORD *)(a1 + v10 + 8);
    v14 = *(_QWORD *)(a1 + v10 + 16);
    if (v13 == -4096 && v14 == -3)
    {
      v19 = *(_QWORD *)(v12 + 24);
      v18 = *(_QWORD *)(v12 + 32);
      if (v19 != -4096 || v18 != -3)
      {
LABEL_30:
        v21 = *(_OWORD *)(a1 + v10 + 24);
        *(_OWORD *)v11 = *(_OWORD *)(a1 + v10 + 8);
        *((_OWORD *)v11 + 1) = v21;
        *((_QWORD *)v11 + 4) = *(_QWORD *)(a1 + v10 + 40);
        v11 += 40;
      }
    }
    else
    {
      if (v13 != -8192 || v14 != -4)
        goto LABEL_30;
      if (*(_QWORD *)(a1 + v10 + 24) != -8192 || *(_QWORD *)(a1 + v10 + 32) != -4)
        goto LABEL_30;
    }
    v10 += 40;
  }
  while (v10 != 320);
  if (v7 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(40 * v7, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v7;
  }
  return sub_1C4DA9DF8((int *)a1, (uint64_t)v23, (uint64_t)v11);
}

uint64_t sub_1C4DA9DF8(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t *v10;
  uint64_t *v13;

  result = (uint64_t)sub_1C4DA936C(a1);
  while (a2 != a3)
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == -4096 && v7 == -3)
    {
      if (*(_QWORD *)(a2 + 16) != -4096 || *(_QWORD *)(a2 + 24) != -3)
      {
LABEL_11:
        v13 = 0;
        result = sub_1C4DA9A0C((uint64_t)a1, (uint64_t *)a2, &v13);
        v10 = v13;
        *(_OWORD *)v13 = *(_OWORD *)a2;
        *((_OWORD *)v10 + 1) = *(_OWORD *)(a2 + 16);
        v10[4] = *(_QWORD *)(a2 + 32);
        *a1 += 2;
      }
    }
    else
    {
      if (*(_QWORD *)a2 != -8192 || v7 != -4)
        goto LABEL_11;
      if (*(_QWORD *)(a2 + 16) != -8192 || *(_QWORD *)(a2 + 24) != -4)
        goto LABEL_11;
    }
    a2 += 40;
  }
  return result;
}

_QWORD *sub_1C4DA9EC0(_QWORD *result)
{
  void *v1;
  void *v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = (void *)result[21];
  if (v1 != (void *)result[20])
  {
    v3 = result;
    free(v1);
    result = v3;
  }
  v2 = (void *)result[9];
  if (v2 != (void *)result[8])
  {
    v4 = result;
    free(v2);
    return v4;
  }
  return result;
}

uint64_t sub_1C4DA9F18()
{
  char v1;
  char *v2;
  int v3;

  v3 = 1;
  v1 = 1;
  v2 = &v1;
  sub_1C617ACEC((uint64_t)&unk_1ED7EFEA0, "basic-aa-recphi", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EFEA0, &dword_1C475E000);
}

_QWORD *llvm::BlockFrequencyInfo::BlockFrequencyInfo(_QWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

uint64_t **llvm::BlockFrequencyInfo::BlockFrequencyInfo(uint64_t **a1, llvm::Value *a2)
{
  *a1 = 0;
  llvm::BlockFrequencyInfo::calculate(a1, a2);
  return a1;
}

{
  *a1 = 0;
  llvm::BlockFrequencyInfo::calculate(a1, a2);
  return a1;
}

void llvm::BlockFrequencyInfo::calculate(uint64_t **a1, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t *v5;
  char *Name;
  int v7;
  size_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  llvm *v16;
  _BYTE v17[32];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  uint64_t **v21;

  if (!*a1)
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = v4 + 32;
    *(_QWORD *)(v4 + 40) = v4 + 32;
    *(_QWORD *)(v4 + 48) = 0;
    *(_QWORD *)(v4 + 56) = v4 + 32;
    *(_QWORD *)(v4 + 64) = 0;
    *(_QWORD *)(v4 + 72) = 0;
    *(_QWORD *)(v4 + 80) = 0;
    *(_QWORD *)(v4 + 88) = v4 + 88;
    *(_QWORD *)(v4 + 96) = v4 + 88;
    *(_QWORD *)(v4 + 104) = 0;
    *(_QWORD *)v4 = &off_1E8134B28;
    *(_QWORD *)(v4 + 8) = 0;
    *(_OWORD *)(v4 + 112) = 0u;
    *(_OWORD *)(v4 + 128) = 0u;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_DWORD *)(v4 + 176) = 0;
    v5 = *a1;
    *a1 = (uint64_t *)v4;
    if (v5)
      (*(void (**)(uint64_t *))(*v5 + 8))(v5);
  }
  sub_1C4DAA540();
  if (dword_1ED7F00A0)
  {
    v7 = byte_1ED82C79F;
    v8 = byte_1ED82C79F >= 0 ? byte_1ED82C79F & 0x7F : qword_1ED82C790;
    if (!v8
      || (Name = llvm::Value::getName(a2), v9 == v8)
      && (v7 >= 0 ? (v10 = &qword_1ED82C788) : (v10 = (uint64_t *)qword_1ED82C788),
          Name = (char *)memcmp(Name, v10, v8),
          !(_DWORD)Name))
    {
      v21 = a1;
      v20 = 261;
      v19[0] = "BlockFrequencyDAGs";
      v19[1] = 18;
      v18 = 257;
      sub_1C4DADF20(&v21, (llvm::Twine *)v19, 0, (llvm::Twine *)v17, 0);
    }
  }
  if (byte_1ED7EFFE0)
  {
    v11 = byte_1ED82CB9F;
    v12 = byte_1ED82CB9F >= 0 ? byte_1ED82CB9F & 0x7F : qword_1ED82CB90;
    if (!v12
      || (v13 = llvm::Value::getName(a2), v14 == v12)
      && (v11 >= 0 ? (v15 = &qword_1ED82CB88) : (v15 = (uint64_t *)qword_1ED82CB88),
          Name = (char *)memcmp(v13, v15, v12),
          !(_DWORD)Name))
    {
      v16 = llvm::dbgs((llvm *)Name);
      if (*a1)
        (*(void (**)(uint64_t *, llvm *))(**a1 + 24))(*a1, v16);
    }
  }
}

_QWORD *llvm::BlockFrequencyInfo::BlockFrequencyInfo(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t *llvm::BlockFrequencyInfo::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *a2;
  *a2 = 0;
  v6 = *a1;
  *a1 = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t llvm::BlockFrequencyInfo::releaseMemory(llvm::BlockFrequencyInfo *this)
{
  uint64_t result;

  result = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void llvm::BlockFrequencyInfo::~BlockFrequencyInfo(llvm::BlockFrequencyInfo *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

BOOL llvm::BlockFrequencyInfo::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &llvm::BlockFrequencyAnalysis::Key;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::BlockFrequencyAnalysis::Key);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C4DAA3F8((uint64_t)v8) && !sub_1C4DAA49C((uint64_t)v8);
}

BOOL sub_1C4DAA35C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 16))
    return 0;
  v2 = *(_QWORD **)a1;
  v3 = sub_1C477672C(*(_QWORD *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v4 = v2[1];
  v5 = 16;
  if (v4 == *v2)
    v5 = 20;
  if (v3 != (_QWORD *)(v4 + 8 * *(unsigned int *)((char *)v2 + v5)))
    return 1;
  v6 = *(_QWORD **)a1;
  v7 = sub_1C477672C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v8 = v6[1];
  v9 = 16;
  if (v8 == *v6)
    v9 = 20;
  return v7 != (_QWORD *)(v8 + 8 * *(unsigned int *)((char *)v6 + v9));
}

BOOL sub_1C4DAA3F8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 16))
    return 0;
  v2 = *(_QWORD **)a1;
  v3 = sub_1C477672C(*(_QWORD *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v4 = v2[1];
  v5 = 16;
  if (v4 == *v2)
    v5 = 20;
  if (v3 != (_QWORD *)(v4 + 8 * *(unsigned int *)((char *)v2 + v5)))
    return 1;
  v6 = *(_QWORD **)a1;
  v7 = sub_1C477672C((uint64_t)v6, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
  v8 = v6[1];
  v9 = 16;
  if (v8 == *v6)
    v9 = 20;
  return v7 != (_QWORD *)(v8 + 8 * *(unsigned int *)((char *)v6 + v9));
}

BOOL sub_1C4DAA49C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 16))
    return 0;
  v2 = *(_QWORD **)a1;
  v3 = sub_1C477672C(*(_QWORD *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v4 = v2[1];
  v5 = 16;
  if (v4 == *v2)
    v5 = 20;
  if (v3 != (_QWORD *)(v4 + 8 * *(unsigned int *)((char *)v2 + v5)))
    return 1;
  v6 = *(_QWORD **)a1;
  v7 = sub_1C477672C((uint64_t)v6, (uint64_t)&llvm::CFGAnalyses::SetKey);
  v8 = v6[1];
  v9 = 16;
  if (v8 == *v6)
    v9 = 20;
  return v7 != (_QWORD *)(v8 + 8 * *(unsigned int *)((char *)v6 + v9));
}

void sub_1C4DAA540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  _BYTE *v16;
  const void *v17;
  const void *v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE *v25;
  void *v26;
  void *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  _BYTE *v31;
  _BYTE *v32;
  unsigned int v33;
  _QWORD ****v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  _QWORD ****v42;
  _BYTE *v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  _DWORD *v52;
  _DWORD *v53;
  char *v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  _BYTE *v73;
  _BYTE *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  char *v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  int v99;
  BOOL v100;
  unsigned int v101;
  uint64_t *v102;
  int32x2_t ****v103;
  int32x2_t ****v104;
  BOOL v105;
  unint64_t v107;
  _QWORD *v108;
  unint64_t *v109;
  unint64_t v111;
  int32x2_t ****v112;
  int32x2_t *v113;
  unint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  int32x2_t *****v118;
  int32x2_t ****v119;
  int v120;
  int v121;
  unint64_t v123;
  uint64_t v124;
  int32x2_t *v125;
  unint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  int v132;
  int v133;
  unint64_t v134;
  unint64_t *v135;
  uint64_t v136;
  int32x2_t *v137;
  unint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  int v144;
  int v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  char *v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t **v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  unsigned int v174;
  uint64_t *v175;
  uint64_t v176;
  int v177;
  unsigned int v178;
  unint64_t *v179;
  int v180;
  uint64_t v181;
  int32x2_t ****v182;
  uint64_t v184;
  unint64_t v185;
  int32x2_t ****v186;
  int32x2_t *v187;
  unint64_t v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  int32x2_t *****v192;
  int32x2_t ****v193;
  int v194;
  int v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  int *v211;
  _BOOL4 v212;
  _QWORD *v213;
  uint64_t *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  unsigned int v228;
  uint64_t *v229;
  uint64_t v230;
  int v231;
  unsigned int v232;
  unint64_t *v233;
  unsigned int v234;
  uint64_t v235;
  int32x2_t ****v236;
  uint64_t v238;
  unint64_t v239;
  int32x2_t ****v240;
  int32x2_t *v241;
  unint64_t v242;
  uint64_t v243;
  unsigned int v244;
  uint64_t v245;
  int32x2_t *****v246;
  int32x2_t ****v247;
  int v248;
  int v249;
  _QWORD *v250;
  unint64_t v251;
  _DWORD *v252;
  _QWORD *v253;
  unint64_t v254;
  uint64_t v255;
  void **v256;
  void **v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t *v264;
  uint64_t v265;
  int v266;
  int v267;
  unsigned int v268;
  int v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t i;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  char **v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  void *v285[2];
  _DWORD v286[48];
  uint64_t v287;
  __int128 v288;
  uint64_t v289;
  int v290;
  _BYTE v291[64];
  void *v292;
  uint64_t v293;
  _BYTE v294[192];
  _BYTE *v295;
  void *v296;
  uint64_t v297;
  int v298;
  _BYTE v299[64];
  void *v300;
  uint64_t v301;
  _BYTE v302[192];
  _BYTE *v303;
  void *__src;
  uint64_t v305;
  int v306;
  _BYTE v307[64];
  void *v308;
  uint64_t v309;
  _BYTE v310[192];
  _BYTE *v311;
  void *v312;
  unsigned int v313;
  unsigned int v314;
  int v315;
  _BYTE v316[64];
  void *v317;
  uint64_t v318;
  _QWORD v319[25];
  _BYTE *v320;
  void *v321;
  unint64_t v322;
  int v323;
  _BYTE v324[64];
  void *v325;
  uint64_t v326;
  _BYTE v327[192];
  _BYTE *v328;
  void *v329;
  unint64_t v330;
  int v331;
  _BYTE v332[64];
  void *v333;
  uint64_t v334;
  _BYTE v335[192];
  _BYTE *v336;
  void *v337;
  unint64_t v338;
  int v339;
  _BYTE v340[64];
  void *v341;
  uint64_t v342;
  _BYTE v343[192];
  _BYTE *v344;
  void *v345;
  unint64_t v346;
  int v347;
  _BYTE v348[64];
  void *v349;
  uint64_t v350;
  _BYTE v351[192];
  _BYTE *v352;
  void *v353;
  unint64_t v354;
  int v355;
  _BYTE v356[64];
  void *v357;
  uint64_t v358;
  _BYTE v359[192];
  _BYTE *v360;
  void *v361;
  unint64_t v362;
  int v363;
  _BYTE v364[64];
  void *v365;
  uint64_t v366;
  _BYTE v367[192];
  _BYTE *v368;
  void *v369;
  unint64_t v370;
  int v371;
  _BYTE v372[64];
  void *v373;
  uint64_t v374;
  _BYTE v375[192];
  _BYTE *v376;
  void *v377;
  int v378;
  int v379;
  int v380;
  _BYTE v381[64];
  void *v382;
  uint64_t v383;
  _BYTE v384[192];
  __int128 v385;
  unint64_t v386;
  int v387;
  _BYTE v388[64];
  void *v389;
  uint64_t v390;
  _BYTE v391[192];
  __int128 __p;
  __int128 v393;
  _OWORD v394[4];
  void *v395;
  uint64_t v396;
  _BYTE v397[192];
  uint64_t v398;
  _BYTE *v399;
  void *v400;
  unint64_t v401;
  int v402;
  _BYTE v403[64];
  void *v404;
  uint64_t v405;
  _BYTE v406[192];
  _BYTE *v407;
  void *v408;
  uint64_t v409;
  int v410;
  _BYTE v411[64];
  void *v412;
  uint64_t v413;
  _BYTE v414[192];
  _QWORD ****v415;
  void *v416;
  unint64_t v417;
  unint64_t *v418;
  int32x2_t ****v419;
  uint64_t v420;
  void *v421;
  uint64_t v422;
  _BYTE v423[192];
  _BYTE *v424;
  void *v425;
  unint64_t v426;
  int v427;
  _BYTE v428[64];
  void *v429;
  uint64_t v430;
  _BYTE v431[192];
  _BYTE *v432;
  void *v433;
  unint64_t v434;
  int v435;
  _BYTE v436[64];
  void *v437;
  uint64_t v438;
  _BYTE v439[192];
  _BYTE *v440;
  void *v441;
  unint64_t v442;
  int v443;
  _BYTE v444[64];
  void *v445;
  uint64_t v446;
  _BYTE v447[192];
  _BYTE *v448;
  void *v449;
  unint64_t v450;
  int v451;
  _BYTE v452[64];
  void *v453;
  uint64_t v454;
  _QWORD v455[27];

  v0 = MEMORY[0x1E0C80A78]();
  v455[24] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(v0 + 112) = v1;
  *(_QWORD *)(v0 + 120) = v2;
  v278 = v3;
  *(_QWORD *)(v0 + 128) = v3;
  llvm::BlockFrequencyInfoImplBase::clear((llvm::BlockFrequencyInfoImplBase *)v0);
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v0 + 136);
  v279 = (_QWORD *)(v0 + 160);
  v280 = (char **)(v0 + 136);
  v4 = *(_DWORD *)(v0 + 168);
  if (v4 || *(_DWORD *)(v0 + 172))
  {
    v270 = *(unsigned int *)(v0 + 176);
    if (v270 > 4 * v4 && v270 >= 0x41)
    {
      sub_1C4DB1C0C((uint64_t)v279);
      goto LABEL_3;
    }
    if (!(_DWORD)v270)
    {
LABEL_592:
      *(_QWORD *)(v0 + 168) = 0;
      goto LABEL_3;
    }
    v271 = (_QWORD *)(*v279 + 24);
    v272 = 56 * v270;
    while (1)
    {
      v273 = *(v271 - 3);
      if (v273 == -8192)
        goto LABEL_590;
      if (v273 != -4096)
        break;
LABEL_591:
      v271 += 7;
      v272 -= 56;
      if (!v272)
        goto LABEL_592;
    }
    v274 = v271[2];
    if (v274 != -8192 && v274 != -4096 && v274 != 0)
      llvm::ValueHandleBase::RemoveFromUseList(v271);
LABEL_590:
    *(v271 - 3) = -4096;
    goto LABEL_591;
  }
LABEL_3:
  v5 = *(_QWORD *)(v0 + 128);
  v6 = v5 + 72;
  v7 = *(_QWORD *)(v5 + 80);
  v8 = -1;
  v9 = v6;
  do
  {
    v9 = *(_QWORD *)(v9 + 8);
    ++v8;
  }
  while (v9 != v6);
  if (v7)
    v10 = v7 - 24;
  else
    v10 = 0;
  sub_1C4DB1D18((uint64_t)v280, v8);
  *(_QWORD *)&v288 = v291;
  *((_QWORD *)&v288 + 1) = v291;
  v289 = 8;
  v290 = 0;
  v292 = v294;
  v293 = 0x800000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v288, v10);
  v11 = *(_QWORD *)(v10 + 40);
  if (v11 == v10 + 40)
  {
    v12 = 0;
  }
  else
  {
    if (v11)
      v12 = (unsigned __int8 *)(v11 - 24);
    else
      v12 = 0;
    if (v12[16] - 29 >= 0xB)
      v12 = 0;
  }
  v415 = (_QWORD ****)v10;
  v416 = v12;
  v417 = 0;
  v13 = sub_1C4926708((uint64_t)&v292, (unint64_t)&v415, 1);
  v14 = (char *)v292 + 24 * v293;
  v15 = *(_OWORD *)v13;
  *((_QWORD *)v14 + 2) = *(_QWORD *)(v13 + 16);
  *(_OWORD *)v14 = v15;
  LODWORD(v293) = v293 + 1;
  sub_1C4DB1EA4(&v288);
  v287 = 0;
  v285[0] = 0;
  memset(v286, 0, sizeof(v286));
  v283 = 0u;
  v284 = 0u;
  v281 = 0u;
  v282 = 0u;
  v285[1] = &v286[2];
  v286[1] = 8;
  v16 = v307;
  v303 = v307;
  v17 = (const void *)*((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1) == (_QWORD)v288)
  {
    __src = v307;
    v18 = (const void *)*((_QWORD *)&v288 + 1);
  }
  else
  {
    v266 = v289;
    v16 = malloc_type_malloc(8 * v289, 0x4065EBACuLL);
    if (!v16)
    {
      if (v266)
        goto LABEL_614;
      v16 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v16)
        goto LABEL_614;
    }
    __src = v16;
    v17 = (const void *)*((_QWORD *)&v288 + 1);
    v18 = (const void *)v288;
  }
  v19 = HIDWORD(v289);
  LODWORD(v305) = v289;
  if (v17 == v18)
    v20 = HIDWORD(v289);
  else
    v20 = v289;
  if (v20)
  {
    memmove(v16, v17, 8 * v20);
    v19 = HIDWORD(v289);
  }
  HIDWORD(v305) = v19;
  v306 = v290;
  v308 = v310;
  v309 = 0x800000000;
  if ((_DWORD)v293)
    sub_1C4DB22B8((uint64_t)&v308, (uint64_t *)&v292);
  v295 = v299;
  v296 = v299;
  v297 = 8;
  v298 = v281;
  v300 = v302;
  v301 = 0x800000000;
  if (v286[0])
    sub_1C4DB22B8((uint64_t)&v300, (uint64_t *)&v285[1]);
  v328 = v332;
  if (__src == v303)
  {
    v329 = v332;
    v21 = HIDWORD(v305);
    if (HIDWORD(v305))
      memmove(v332, __src, 8 * HIDWORD(v305));
  }
  else
  {
    v329 = __src;
    __src = v303;
    v21 = HIDWORD(v305);
  }
  v330 = __PAIR64__(v21, v305);
  v331 = v306;
  v305 = 8;
  v306 = 0;
  v333 = v335;
  v334 = 0x800000000;
  if ((_DWORD)v309)
    sub_1C4DB2150((uint64_t)&v333, (uint64_t *)&v308);
  v320 = v324;
  if (v296 == v295)
  {
    v321 = v324;
    v22 = HIDWORD(v297);
    if (HIDWORD(v297))
      memmove(v324, v296, 8 * HIDWORD(v297));
  }
  else
  {
    v321 = v296;
    v296 = v295;
    v22 = HIDWORD(v297);
  }
  v322 = __PAIR64__(v22, v297);
  v323 = v298;
  v297 = 8;
  v298 = 0;
  v325 = v327;
  v326 = 0x800000000;
  if ((_DWORD)v301)
    sub_1C4DB2150((uint64_t)&v325, (uint64_t *)&v300);
  v344 = v348;
  if (v329 == v328)
  {
    v345 = v348;
    v23 = HIDWORD(v330);
    if (HIDWORD(v330))
      memmove(v348, v329, 8 * HIDWORD(v330));
  }
  else
  {
    v345 = v329;
    v329 = v328;
    v23 = HIDWORD(v330);
  }
  v346 = __PAIR64__(v23, v330);
  v347 = v331;
  v330 = 8;
  v331 = 0;
  v349 = v351;
  v350 = 0x800000000;
  if ((_DWORD)v334)
    sub_1C4DB2150((uint64_t)&v349, (uint64_t *)&v333);
  v336 = v340;
  if (v321 == v320)
  {
    v337 = v340;
    v24 = HIDWORD(v322);
    if (HIDWORD(v322))
      memmove(v340, v321, 8 * HIDWORD(v322));
  }
  else
  {
    v337 = v321;
    v321 = v320;
    v24 = HIDWORD(v322);
  }
  v338 = __PAIR64__(v24, v322);
  v339 = v323;
  v322 = 8;
  v323 = 0;
  v341 = v343;
  v342 = 0x800000000;
  if ((_DWORD)v326)
    sub_1C4DB2150((uint64_t)&v341, (uint64_t *)&v325);
  v25 = v411;
  v407 = v411;
  v26 = v345;
  if (v345 == v344)
  {
    v408 = v411;
    v27 = v345;
  }
  else
  {
    v267 = v346;
    v25 = malloc_type_malloc(8 * v346, 0x4065EBACuLL);
    if (!v25)
    {
      if (v267)
        goto LABEL_614;
      v25 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v25)
        goto LABEL_614;
    }
    v408 = v25;
    v27 = v344;
    v26 = v345;
  }
  v28 = HIDWORD(v346);
  LODWORD(v409) = v346;
  if (v26 == v27)
    v29 = HIDWORD(v346);
  else
    v29 = v346;
  if (v29)
  {
    memmove(v25, v26, 8 * v29);
    v28 = HIDWORD(v346);
  }
  HIDWORD(v409) = v28;
  v410 = v347;
  v412 = v414;
  v413 = 0x800000000;
  if ((_DWORD)v350)
    sub_1C4DB22B8((uint64_t)&v412, (uint64_t *)&v349);
  v399 = v403;
  if (v337 == v336)
  {
    v400 = v403;
    v30 = HIDWORD(v338);
    if (HIDWORD(v338))
      memmove(v403, v337, 8 * HIDWORD(v338));
  }
  else
  {
    v400 = v337;
    v337 = v336;
    v30 = HIDWORD(v338);
  }
  v401 = __PAIR64__(v30, v338);
  v402 = v339;
  v338 = 8;
  v339 = 0;
  v404 = v406;
  v405 = 0x800000000;
  if ((_DWORD)v342)
    sub_1C4DB2150((uint64_t)&v404, (uint64_t *)&v341);
  v31 = v316;
  v311 = v316;
  v32 = v408;
  if (v408 == v407)
  {
    v312 = v316;
    v33 = HIDWORD(v409);
    if (HIDWORD(v409))
      memmove(v316, v408, 8 * HIDWORD(v409));
    v32 = v316;
  }
  else
  {
    v312 = v408;
    v408 = v407;
    v33 = HIDWORD(v409);
  }
  v313 = v409;
  v314 = v33;
  v315 = v410;
  v409 = 8;
  v410 = 0;
  v317 = v319;
  v318 = 0x800000000;
  if ((_DWORD)v413)
  {
    sub_1C4DB2150((uint64_t)&v317, (uint64_t *)&v412);
    v32 = v312;
    v31 = v311;
  }
  v34 = &v419;
  v415 = &v419;
  if (v32 == v31)
  {
    v416 = &v419;
    v35 = (uint64_t)v31;
  }
  else
  {
    v268 = v313;
    v34 = (_QWORD ****)malloc_type_malloc(8 * v313, 0x4065EBACuLL);
    if (!v34)
    {
      if (v268)
        goto LABEL_614;
      v34 = (_QWORD ****)malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v34)
        goto LABEL_614;
    }
    v416 = v34;
    v35 = (uint64_t)v311;
    v31 = v312;
  }
  v36 = v314;
  LODWORD(v417) = v313;
  if (v31 == (_BYTE *)v35)
    v37 = v314;
  else
    v37 = v313;
  if (v37)
  {
    memmove(v34, v31, 8 * v37);
    v36 = v314;
  }
  HIDWORD(v417) = v36;
  LODWORD(v418) = v315;
  v421 = v423;
  v422 = 0x800000000;
  if ((_DWORD)v318)
    sub_1C4DB22B8((uint64_t)&v421, (uint64_t *)&v317);
  *(_QWORD *)&__p = v394;
  if (v416 == v415)
  {
    *((_QWORD *)&__p + 1) = v394;
    v38 = HIDWORD(v417);
    if (HIDWORD(v417))
      memmove(v394, v416, 8 * HIDWORD(v417));
  }
  else
  {
    *((_QWORD *)&__p + 1) = v416;
    v416 = v415;
    v38 = HIDWORD(v417);
  }
  *(_QWORD *)&v393 = __PAIR64__(v38, v417);
  DWORD2(v393) = (_DWORD)v418;
  v417 = 8;
  LODWORD(v418) = 0;
  v395 = v397;
  v396 = 0x800000000;
  if ((_DWORD)v422)
    sub_1C4DB2150((uint64_t)&v395, (uint64_t *)&v421);
  if (v421 != v423)
    free(v421);
  if (v416 != v415)
    free(v416);
  v39 = v444;
  v440 = v444;
  v40 = v400;
  if (v400 == v399)
  {
    v441 = v444;
    v41 = HIDWORD(v401);
    if (HIDWORD(v401))
      memmove(v444, v400, 8 * HIDWORD(v401));
    v40 = v444;
  }
  else
  {
    v441 = v400;
    v400 = v399;
    v41 = HIDWORD(v401);
  }
  v442 = __PAIR64__(v41, v401);
  v443 = v402;
  v401 = 8;
  v402 = 0;
  v445 = v447;
  v446 = 0x800000000;
  if ((_DWORD)v405)
  {
    sub_1C4DB2150((uint64_t)&v445, (uint64_t *)&v404);
    v40 = v441;
    v39 = v440;
  }
  v42 = &v419;
  v415 = &v419;
  if (v40 != v39)
  {
    v269 = v442;
    v42 = (_QWORD ****)malloc_type_malloc(8 * v442, 0x4065EBACuLL);
    if (v42 || !v269 && (v42 = (_QWORD ****)malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v416 = v42;
      v43 = v440;
      v39 = v441;
      goto LABEL_91;
    }
LABEL_614:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v416 = &v419;
  v43 = v39;
LABEL_91:
  v44 = HIDWORD(v442);
  LODWORD(v417) = v442;
  if (v39 == v43)
    v45 = HIDWORD(v442);
  else
    v45 = v442;
  if (v45)
  {
    memmove(v42, v39, 8 * v45);
    v44 = HIDWORD(v442);
  }
  HIDWORD(v417) = v44;
  LODWORD(v418) = v443;
  v421 = v423;
  v422 = 0x800000000;
  if ((_DWORD)v446)
    sub_1C4DB22B8((uint64_t)&v421, (uint64_t *)&v445);
  v448 = v452;
  if (v416 == v415)
  {
    v449 = v452;
    v46 = HIDWORD(v417);
    if (HIDWORD(v417))
      memmove(v452, v416, 8 * HIDWORD(v417));
  }
  else
  {
    v449 = v416;
    v416 = v415;
    v46 = HIDWORD(v417);
  }
  v450 = __PAIR64__(v46, v417);
  v451 = (int)v418;
  v417 = 8;
  LODWORD(v418) = 0;
  v453 = v455;
  v454 = 0x800000000;
  if ((_DWORD)v422)
    sub_1C4DB2150((uint64_t)&v453, (uint64_t *)&v421);
  if (v421 != v423)
    free(v421);
  if (v416 != v415)
    free(v416);
  v415 = &v419;
  if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
  {
    v416 = &v419;
    v47 = DWORD1(v393);
    if (DWORD1(v393))
      memmove(&v419, *((const void **)&__p + 1), 8 * DWORD1(v393));
  }
  else
  {
    v416 = (void *)*((_QWORD *)&__p + 1);
    *((_QWORD *)&__p + 1) = __p;
    v47 = DWORD1(v393);
  }
  v417 = __PAIR64__(v47, v393);
  LODWORD(v418) = DWORD2(v393);
  *(_QWORD *)&v393 = 8;
  DWORD2(v393) = 0;
  v421 = v423;
  v422 = 0x800000000;
  if ((_DWORD)v396)
    sub_1C4DB2150((uint64_t)&v421, (uint64_t *)&v395);
  v424 = v428;
  if (v449 == v448)
  {
    v425 = v428;
    v48 = HIDWORD(v450);
    if (HIDWORD(v450))
      memmove(v428, v449, 8 * HIDWORD(v450));
  }
  else
  {
    v425 = v449;
    v449 = v448;
    v48 = HIDWORD(v450);
  }
  v426 = __PAIR64__(v48, v450);
  v427 = v451;
  v450 = 8;
  v451 = 0;
  v429 = v431;
  v430 = 0x800000000;
  if ((_DWORD)v454)
    sub_1C4DB2150((uint64_t)&v429, (uint64_t *)&v453);
  if (v453 != v455)
    free(v453);
  if (v449 != v448)
    free(v449);
  if (v445 != v447)
    free(v445);
  if (v441 != v440)
    free(v441);
  if (v395 != v397)
    free(v395);
  if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
    free(*((void **)&__p + 1));
  if (v317 != v319)
    free(v317);
  if (v312 != v311)
    free(v312);
  if (v404 != v406)
    free(v404);
  if (v400 != v399)
    free(v400);
  if (v412 != v414)
    free(v412);
  if (v408 != v407)
    free(v408);
  *(_QWORD *)&v385 = v388;
  if (v416 == v415)
  {
    *((_QWORD *)&v385 + 1) = v388;
    v49 = HIDWORD(v417);
    if (HIDWORD(v417))
      memmove(v388, v416, 8 * HIDWORD(v417));
  }
  else
  {
    *((_QWORD *)&v385 + 1) = v416;
    v416 = v415;
    v49 = HIDWORD(v417);
  }
  v386 = __PAIR64__(v49, v417);
  v387 = (int)v418;
  v417 = 8;
  LODWORD(v418) = 0;
  v389 = v391;
  v390 = 0x800000000;
  if ((_DWORD)v422)
    sub_1C4DB2150((uint64_t)&v389, (uint64_t *)&v421);
  v376 = v381;
  if (v425 == v424)
  {
    v377 = v381;
    v50 = HIDWORD(v426);
    if (HIDWORD(v426))
      memmove(v381, v425, 8 * HIDWORD(v426));
  }
  else
  {
    v377 = v425;
    v425 = v424;
    v50 = HIDWORD(v426);
  }
  v378 = v426;
  v379 = v50;
  v380 = v427;
  v426 = 8;
  v427 = 0;
  v382 = v384;
  v383 = 0x800000000;
  if ((_DWORD)v430)
    sub_1C4DB2150((uint64_t)&v382, (uint64_t *)&v429);
  while (1)
  {
    v51 = v390;
    if ((_DWORD)v390 != (_DWORD)v383)
      goto LABEL_161;
    if (!(_DWORD)v390)
      break;
    v52 = v382;
    v53 = v389;
    while (*(_QWORD *)v53 == *(_QWORD *)v52 && v53[4] == v52[4])
    {
      v53 += 6;
      v52 += 6;
      if (v53 == (_DWORD *)((char *)v389 + 24 * v390))
        goto LABEL_180;
    }
LABEL_161:
    v55 = (char *)v389 + 24 * v390;
    v57 = *(char **)(v0 + 144);
    v56 = *(_QWORD *)(v0 + 152);
    if ((unint64_t)v57 >= v56)
    {
      v59 = *v280;
      v60 = (v57 - *v280) >> 3;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 61)
        abort();
      v62 = v56 - (_QWORD)v59;
      if (v62 >> 2 > v61)
        v61 = v62 >> 2;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v63 = v61;
      if (v63)
      {
        if (v63 >> 61)
          sub_1C4764EE4();
        v64 = (char *)operator new(8 * v63);
      }
      else
      {
        v64 = 0;
      }
      v65 = &v64[8 * v60];
      *(_QWORD *)v65 = *((_QWORD *)v55 - 3);
      v58 = v65 + 8;
      if (v57 != v59)
      {
        do
        {
          v66 = *((_QWORD *)v57 - 1);
          v57 -= 8;
          *((_QWORD *)v65 - 1) = v66;
          v65 -= 8;
        }
        while (v57 != v59);
        v57 = *v280;
      }
      *(_QWORD *)(v0 + 136) = v65;
      *(_QWORD *)(v0 + 144) = v58;
      *(_QWORD *)(v0 + 152) = &v64[8 * v63];
      if (v57)
      {
        operator delete(v57);
        v51 = v390;
      }
    }
    else
    {
      *(_QWORD *)v57 = *((_QWORD *)v55 - 3);
      v58 = v57 + 8;
    }
    *(_QWORD *)(v0 + 144) = v58;
    LODWORD(v390) = v51 - 1;
    if (v51 != 1)
      sub_1C4DB1EA4(&v385);
  }
LABEL_180:
  *(_QWORD *)&__p = v394;
  if (*((_QWORD *)&v385 + 1) == (_QWORD)v385)
  {
    *((_QWORD *)&__p + 1) = v394;
    v67 = HIDWORD(v386);
    if (HIDWORD(v386))
      memmove(v394, *((const void **)&v385 + 1), 8 * HIDWORD(v386));
  }
  else
  {
    *((_QWORD *)&__p + 1) = *((_QWORD *)&v385 + 1);
    *((_QWORD *)&v385 + 1) = v385;
    v67 = HIDWORD(v386);
  }
  *(_QWORD *)&v393 = __PAIR64__(v67, v386);
  DWORD2(v393) = v387;
  v386 = 8;
  v387 = 0;
  v395 = v397;
  v396 = 0x800000000;
  if (v51)
    sub_1C4DB2150((uint64_t)&v395, (uint64_t *)&v389);
  v398 = v0 + 136;
  if (v382 != v384)
    free(v382);
  if (v377 != v376)
    free(v377);
  if (v389 != v391)
    free(v389);
  if (*((_QWORD *)&v385 + 1) != (_QWORD)v385)
    free(*((void **)&v385 + 1));
  v360 = v364;
  if (v345 == v344)
  {
    v361 = v364;
    v68 = HIDWORD(v346);
    if (HIDWORD(v346))
      memmove(v364, v345, 8 * HIDWORD(v346));
  }
  else
  {
    v361 = v345;
    v345 = v344;
    v68 = HIDWORD(v346);
  }
  v362 = __PAIR64__(v68, v346);
  v363 = v347;
  v346 = 8;
  v347 = 0;
  v365 = v367;
  v366 = 0x800000000;
  if ((_DWORD)v350)
    sub_1C4DB2150((uint64_t)&v365, (uint64_t *)&v349);
  v352 = v356;
  if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
  {
    v353 = v356;
    v69 = DWORD1(v393);
    if (DWORD1(v393))
      memmove(v356, *((const void **)&__p + 1), 8 * DWORD1(v393));
  }
  else
  {
    v353 = (void *)*((_QWORD *)&__p + 1);
    *((_QWORD *)&__p + 1) = __p;
    v69 = DWORD1(v393);
  }
  v354 = __PAIR64__(v69, v393);
  v355 = DWORD2(v393);
  *(_QWORD *)&v393 = 8;
  DWORD2(v393) = 0;
  v357 = v359;
  v358 = 0x800000000;
  if ((_DWORD)v396)
    sub_1C4DB2150((uint64_t)&v357, (uint64_t *)&v395);
  v440 = v444;
  if (v361 == v360)
  {
    v441 = v444;
    v70 = HIDWORD(v362);
    if (HIDWORD(v362))
      memmove(v444, v361, 8 * HIDWORD(v362));
  }
  else
  {
    v441 = v361;
    v361 = v360;
    v70 = HIDWORD(v362);
  }
  v442 = __PAIR64__(v70, v362);
  v443 = v363;
  v362 = 8;
  v363 = 0;
  v445 = v447;
  v446 = 0x800000000;
  if ((_DWORD)v366)
    sub_1C4DB2150((uint64_t)&v445, (uint64_t *)&v365);
  v432 = v436;
  if (v353 == v352)
  {
    v433 = v436;
    v71 = HIDWORD(v354);
    if (HIDWORD(v354))
      memmove(v436, v353, 8 * HIDWORD(v354));
  }
  else
  {
    v433 = v353;
    v353 = v352;
    v71 = HIDWORD(v354);
  }
  v434 = __PAIR64__(v71, v354);
  v435 = v355;
  v354 = 8;
  v355 = 0;
  v437 = v439;
  v438 = 0x800000000;
  if ((_DWORD)v358)
    sub_1C4DB2150((uint64_t)&v437, (uint64_t *)&v357);
  v311 = v316;
  if (v441 == v440)
  {
    v312 = v316;
    v72 = HIDWORD(v442);
    if (HIDWORD(v442))
      memmove(v316, v441, 8 * HIDWORD(v442));
  }
  else
  {
    v312 = v441;
    v441 = v440;
    v72 = HIDWORD(v442);
  }
  v313 = v442;
  v314 = v72;
  v315 = v443;
  v442 = 8;
  v443 = 0;
  v317 = v319;
  v318 = 0x800000000;
  if ((_DWORD)v446)
    sub_1C4DB2150((uint64_t)&v317, (uint64_t *)&v445);
  v73 = v452;
  v448 = v452;
  v74 = v433;
  if (v433 == v432)
  {
    v449 = v452;
    v75 = HIDWORD(v434);
    if (HIDWORD(v434))
      memmove(v452, v433, 8 * HIDWORD(v434));
    v74 = v452;
  }
  else
  {
    v449 = v433;
    v433 = v432;
    v75 = HIDWORD(v434);
  }
  v450 = __PAIR64__(v75, v434);
  v451 = v435;
  v434 = 8;
  v435 = 0;
  v453 = v455;
  v454 = 0x800000000;
  if ((_DWORD)v438)
  {
    sub_1C4DB2150((uint64_t)&v453, (uint64_t *)&v437);
    v74 = v449;
    v73 = v448;
  }
  v368 = v372;
  if (v74 == v73)
  {
    v369 = v372;
    v76 = HIDWORD(v450);
    if (HIDWORD(v450))
      memmove(v372, v73, 8 * HIDWORD(v450));
  }
  else
  {
    v369 = v74;
    v449 = v73;
    v76 = HIDWORD(v450);
  }
  v370 = __PAIR64__(v76, v450);
  v371 = v451;
  v450 = 8;
  v451 = 0;
  v373 = v375;
  v374 = 0x800000000;
  if ((_DWORD)v454)
    sub_1C4DB2150((uint64_t)&v373, (uint64_t *)&v453);
  if (v453 != v455)
    free(v453);
  if (v449 != v448)
    free(v449);
  if (v317 != v319)
    free(v317);
  if (v312 != v311)
    free(v312);
  if (v437 != v439)
    free(v437);
  if (v433 != v432)
    free(v433);
  if (v445 != v447)
    free(v445);
  if (v441 != v440)
    free(v441);
  v77 = v398;
  v311 = v316;
  if (v369 == v368)
  {
    v312 = v316;
    v78 = HIDWORD(v370);
    if (HIDWORD(v370))
      memmove(v316, v369, 8 * HIDWORD(v370));
  }
  else
  {
    v312 = v369;
    v369 = v368;
    v78 = HIDWORD(v370);
  }
  v313 = v370;
  v314 = v78;
  v315 = v371;
  v370 = 8;
  v371 = 0;
  v317 = v319;
  v318 = 0x800000000;
  if ((_DWORD)v374)
    sub_1C4DB2150((uint64_t)&v317, (uint64_t *)&v373);
  v319[24] = v77;
  if (v373 != v375)
    free(v373);
  if (v369 != v368)
    free(v369);
  if (v357 != v359)
    free(v357);
  if (v353 != v352)
    free(v353);
  if (v365 != v367)
    free(v365);
  if (v361 != v360)
    free(v361);
  if (v395 != v397)
    free(v395);
  if (*((_QWORD *)&__p + 1) != (_QWORD)__p)
    free(*((void **)&__p + 1));
  if (v429 != v431)
    free(v429);
  if (v425 != v424)
    free(v425);
  if (v421 != v423)
    free(v421);
  if (v416 != v415)
    free(v416);
  if (v341 != v343)
    free(v341);
  if (v337 != v336)
    free(v337);
  if (v349 != v351)
    free(v349);
  if (v345 != v344)
    free(v345);
  if (v325 != v327)
    free(v325);
  if (v321 != v320)
    free(v321);
  if (v333 != v335)
    free(v333);
  if (v329 != v328)
    free(v329);
  if (v317 != v319)
    free(v317);
  if (v312 != v311)
    free(v312);
  if (v300 != v302)
    free(v300);
  if (v296 != v295)
    free(v296);
  if (v308 != v310)
    free(v308);
  if (__src != v303)
    free(__src);
  if (v285[1] != &v286[2])
    free(v285[1]);
  if (v292 != v294)
    free(v292);
  if (*((_QWORD *)&v288 + 1) != (_QWORD)v288)
    free(*((void **)&v288 + 1));
  v80 = *(uint64_t **)(v0 + 136);
  v79 = *(uint64_t **)(v0 + 144);
  if (v80 != v79)
  {
    v81 = v79 - 1;
    if (v80 < v79 - 1)
    {
      v82 = v80 + 1;
      do
      {
        v83 = *(v82 - 1);
        *(v82 - 1) = *v81;
        *v81-- = v83;
      }
      while (v82++ < v81);
      v80 = *(uint64_t **)(v0 + 136);
      v79 = *(uint64_t **)(v0 + 144);
    }
  }
  if (v80 != v79)
  {
    while (1)
    {
      v85 = *v280;
      v86 = *v80;
      *((_QWORD *)&__p + 1) = 2;
      *(_QWORD *)&v393 = 0;
      *((_QWORD *)&v393 + 1) = v86;
      if (v86 == -8192)
      {
        v88 = 2;
      }
      else
      {
        v87 = v86 == -4096 || v86 == 0;
        v88 = 2;
        if (!v87)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)((char *)&__p + 8));
          v88 = *((_QWORD *)&__p + 1);
          v86 = *((_QWORD *)&v393 + 1);
        }
      }
      v89 = (unint64_t)((char *)v80 - v85) >> 3;
      *(_QWORD *)&__p = &off_1E8134B58;
      *(_QWORD *)&v394[0] = v0;
      LODWORD(v415) = v89;
      v417 = v88 & 6;
      v418 = 0;
      v419 = (int32x2_t ****)v86;
      v90 = v0;
      if (v86 != -8192)
      {
        v90 = v0;
        if (v86 != -4096)
        {
          v90 = v0;
          if (v86)
          {
            v418 = *(unint64_t **)(v88 & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)(v88 & 0xFFFFFFFFFFFFFFF8) = &v417;
            v417 = v88 & 0xFFFFFFFFFFFFFFFELL;
            if (v418)
              *v418 = *v418 & 7 | (unint64_t)&v418;
            v90 = *(_QWORD *)&v394[0];
          }
        }
      }
      v416 = &off_1E8134B58;
      v420 = v90;
      v91 = *v80;
      v311 = (_BYTE *)*v80;
      v92 = *(_DWORD *)(v0 + 176);
      if (!v92)
        break;
      v93 = *(_QWORD *)(v0 + 160);
      v94 = v92 - 1;
      v95 = ((v91 >> 4) ^ (v91 >> 9)) & v94;
      v96 = (uint64_t *)(v93 + 56 * v95);
      v97 = *v96;
      if (v91 != *v96)
      {
        v98 = 0;
        v99 = 1;
        while (v97 != -4096)
        {
          if (v98)
            v100 = 0;
          else
            v100 = v97 == -8192;
          if (v100)
            v98 = v96;
          v101 = v95 + v99++;
          v95 = v101 & v94;
          v96 = (uint64_t *)(v93 + 56 * v95);
          v97 = *v96;
          if (v91 == *v96)
            goto LABEL_342;
        }
        if (v98)
          v102 = v98;
        else
          v102 = v96;
        goto LABEL_341;
      }
LABEL_342:
      *((_DWORD *)v96 + 2) = v89;
      v103 = (int32x2_t ****)v96[5];
      v104 = v419;
      if (v103 == v419)
      {
        v104 = (int32x2_t ****)v96[5];
      }
      else
      {
        v105 = v103 == (int32x2_t ****)-4096 || v103 == 0;
        if (!v105 && v103 != (int32x2_t ****)-8192)
        {
          v134 = v96[3] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v134 = v96[4];
          v135 = (unint64_t *)v96[4];
          if (v135)
          {
            *v135 = *v135 & 7 | v134;
          }
          else
          {
            v136 = v96[5];
            v137 = ***(int32x2_t ****)v136;
            v138 = (unint64_t)v137[303];
            if (v138 <= v134)
            {
              v139 = v137[305].u32[0];
              if (v138 + 16 * v139 > v134)
              {
                v140 = v139 - 1;
                LODWORD(v141) = v140 & ((v136 >> 4) ^ (v136 >> 9));
                v142 = (uint64_t *)(v138 + 16 * v141);
                v143 = *v142;
                if (v136 == *v142)
                {
LABEL_403:
                  *v142 = -8192;
                  v137[304] = vadd_s32(v137[304], (int32x2_t)0x1FFFFFFFFLL);
                  v136 = v96[5];
                }
                else
                {
                  v144 = 1;
                  while (v143 != -4096)
                  {
                    v145 = v141 + v144++;
                    v141 = v145 & v140;
                    v143 = *(_QWORD *)(v138 + 16 * v141);
                    if (v136 == v143)
                    {
                      v142 = (uint64_t *)(v138 + 16 * v141);
                      goto LABEL_403;
                    }
                  }
                }
                *(_BYTE *)(v136 + 17) &= ~1u;
              }
            }
          }
          v104 = v419;
        }
        v96[5] = (uint64_t)v104;
        if (v104 != (int32x2_t ****)-4096 && v104 != (int32x2_t ****)-8192 && v104 != 0)
        {
          v107 = v417;
          v108 = (_QWORD *)(v417 & 0xFFFFFFFFFFFFFFF8);
          v96[4] = *(_QWORD *)(v417 & 0xFFFFFFFFFFFFFFF8);
          *v108 = v96 + 3;
          v96[3] = v107 & 0xFFFFFFFFFFFFFFF8 | v96[3] & 7;
          v109 = (unint64_t *)v96[4];
          if (v109)
            *v109 = *v109 & 7 | (unint64_t)(v96 + 4);
          v104 = v419;
        }
      }
      v96[6] = v420;
      if (v104 != (int32x2_t ****)-8192 && v104 != (int32x2_t ****)-4096 && v104 != 0)
      {
        v111 = v417 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v417 & 0xFFFFFFFFFFFFFFF8) = v418;
        if (v418)
        {
          *v418 = *v418 & 7 | v111;
        }
        else
        {
          v112 = v419;
          v113 = ***v419;
          v114 = (unint64_t)v113[303];
          if (v114 <= v111)
          {
            v115 = v113[305].u32[0];
            if (v114 + 16 * v115 > v111)
            {
              v116 = v115 - 1;
              LODWORD(v117) = v116 & ((v419 >> 4) ^ (v419 >> 9));
              v118 = (int32x2_t *****)(v114 + 16 * v117);
              v119 = *v118;
              if (v419 == *v118)
              {
LABEL_369:
                *v118 = (int32x2_t ****)-8192;
                v113[304] = vadd_s32(v113[304], (int32x2_t)0x1FFFFFFFFLL);
                v112 = v419;
              }
              else
              {
                v120 = 1;
                while (v119 != (int32x2_t ****)-4096)
                {
                  v121 = v117 + v120++;
                  v117 = v121 & v116;
                  v119 = *(int32x2_t *****)(v114 + 16 * v117);
                  if (v419 == v119)
                  {
                    v118 = (int32x2_t *****)(v114 + 16 * v117);
                    goto LABEL_369;
                  }
                }
              }
              *((_BYTE *)v112 + 17) &= ~1u;
            }
          }
        }
      }
      if (*((_QWORD *)&v393 + 1) != -8192 && *((_QWORD *)&v393 + 1) != -4096 && *((_QWORD *)&v393 + 1) != 0)
      {
        v123 = *((_QWORD *)&__p + 1) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(*((_QWORD *)&__p + 1) & 0xFFFFFFFFFFFFFFF8) = v393;
        if ((_QWORD)v393)
        {
          *(_QWORD *)v393 = *(_QWORD *)v393 & 7 | v123;
        }
        else
        {
          v124 = *((_QWORD *)&v393 + 1);
          v125 = (int32x2_t *)****((_QWORD ****)&v393 + 1);
          v126 = (unint64_t)v125[303];
          if (v126 <= v123)
          {
            v127 = v125[305].u32[0];
            if (v126 + 16 * v127 > v123)
            {
              v128 = v127 - 1;
              LODWORD(v129) = v128 & ((DWORD2(v393) >> 4) ^ (DWORD2(v393) >> 9));
              v130 = (uint64_t *)(v126 + 16 * v129);
              v131 = *v130;
              if (*((_QWORD *)&v393 + 1) == *v130)
              {
LABEL_385:
                *v130 = -8192;
                v125[304] = vadd_s32(v125[304], (int32x2_t)0x1FFFFFFFFLL);
                v124 = *((_QWORD *)&v393 + 1);
              }
              else
              {
                v132 = 1;
                while (v131 != -4096)
                {
                  v133 = v129 + v132++;
                  v129 = v133 & v128;
                  v131 = *(_QWORD *)(v126 + 16 * v129);
                  if (*((_QWORD *)&v393 + 1) == v131)
                  {
                    v130 = (uint64_t *)(v126 + 16 * v129);
                    goto LABEL_385;
                  }
                }
              }
              *(_BYTE *)(v124 + 17) &= ~1u;
            }
          }
        }
      }
      if (++v80 == v79)
      {
        v79 = *(uint64_t **)(v0 + 136);
        v146 = *(uint64_t **)(v0 + 144);
        goto LABEL_405;
      }
    }
    v102 = 0;
LABEL_341:
    v96 = sub_1C4DB23DC((uint64_t)v279, (uint64_t *)&v311, v102);
    *v96 = v91;
    *((_DWORD *)v96 + 2) = -1;
    v96[5] = 0;
    v96[6] = 0;
    v96[3] = 2;
    v96[4] = 0;
    v96[2] = (uint64_t)&off_1E8134B58;
    LODWORD(v89) = (_DWORD)v415;
    goto LABEL_342;
  }
  v146 = v79;
LABEL_405:
  v147 = (uint64_t *)(v0 + 64);
  sub_1C4DB1DB8(v0 + 64, v146 - v79);
  v415 = 0;
  v149 = *(_QWORD *)(v0 + 136);
  v148 = *(_QWORD *)(v0 + 144);
  if (v148 == v149)
  {
    v152 = (v148 - v149) >> 3;
  }
  else
  {
    v150 = 0;
    v151 = *(char **)(v0 + 72);
    do
    {
      if ((unint64_t)v151 >= *(_QWORD *)(v0 + 80))
      {
        v151 = sub_1C4DB27F8((char **)(v0 + 64), &v415);
        v150 = (unint64_t)v415;
        v149 = *(_QWORD *)(v0 + 136);
        v148 = *(_QWORD *)(v0 + 144);
      }
      else
      {
        *(_DWORD *)v151 = v150;
        *((_QWORD *)v151 + 1) = 0;
        *((_QWORD *)v151 + 2) = 0;
        v151 += 24;
      }
      *(_QWORD *)(v0 + 72) = v151;
      v415 = (_QWORD ****)++v150;
    }
    while (v150 < (v148 - v149) >> 3);
    v152 = (v148 - v149) >> 3;
  }
  v153 = *(_QWORD *)(v0 + 8);
  v154 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v0 + 16) - v153) >> 3);
  if (v152 <= v154)
  {
    if (v152 < v154)
      *(_QWORD *)(v0 + 16) = v153 + 24 * v152;
  }
  else
  {
    sub_1C4DB2908((char **)(v0 + 8), v152 - v154);
  }
  v155 = *(_QWORD *)(v0 + 120);
  v156 = *(uint64_t **)(v155 + 24);
  v157 = *(uint64_t **)(v155 + 32);
  if (v156 != v157)
  {
    v158 = 0;
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v393 = 0u;
    v394[0] = 0u;
    __p = 0u;
    do
    {
      v162 = *v156;
      if (v161 == v160)
        v163 = 0;
      else
        v163 = 32 * (v161 - v160) - 1;
      v164 = v159 + v158;
      if (v163 == v159 + v158)
      {
        sub_1C4DB2B30((uint64_t)&__p);
        v160 = *((_QWORD *)&__p + 1);
        v161 = v393;
        v158 = *((_QWORD *)&v394[0] + 1);
        v159 = *(_QWORD *)&v394[0];
        v164 = *(_QWORD *)&v394[0] + *((_QWORD *)&v394[0] + 1);
      }
      v165 = (_QWORD *)(*(_QWORD *)(v160 + ((v164 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v164);
      *v165 = v162;
      v165[1] = 0;
      *((_QWORD *)&v394[0] + 1) = ++v158;
      ++v156;
    }
    while (v156 != v157);
    if (v158)
    {
      v166 = (uint64_t *)(v0 + 88);
      do
      {
        v167 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)&__p + 1) + ((*(_QWORD *)&v394[0] >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * LOBYTE(v394[0]));
        v168 = (uint64_t **)*v167;
        v169 = v167[1];
        *((_QWORD *)&v394[0] + 1) = v158 - 1;
        if (++*(_QWORD *)&v394[0] >= 0x200uLL)
        {
          operator delete(**((void ***)&__p + 1));
          *((_QWORD *)&__p + 1) += 8;
          *(_QWORD *)&v394[0] -= 256;
        }
        v170 = *(_DWORD *)(v0 + 176);
        if (v170)
        {
          v171 = *v168[4];
          v172 = *(_QWORD *)(v0 + 160);
          v173 = v170 - 1;
          v174 = (v170 - 1) & ((v171 >> 4) ^ (v171 >> 9));
          v175 = (uint64_t *)(v172 + 56 * v174);
          v176 = *v175;
          if (*v175 == v171)
          {
LABEL_430:
            v179 = 0;
            v180 = *((_DWORD *)v175 + 2);
            LODWORD(v415) = v180;
            v181 = v175[3];
            v417 = v181 & 6;
            v418 = 0;
            v182 = (int32x2_t ****)v175[5];
            v419 = v182;
            if (v182 != (int32x2_t ****)-8192 && v182 != (int32x2_t ****)-4096 && v182 != 0)
            {
              v418 = *(unint64_t **)(v181 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)(v181 & 0xFFFFFFFFFFFFFFF8) = &v417;
              v417 = v181 & 0xFFFFFFFFFFFFFFFELL;
              v179 = v418;
              if (v418)
                *v418 = *v418 & 7 | (unint64_t)&v418;
              v182 = v419;
            }
            v184 = v175[6];
            v416 = &off_1E8134B58;
            v420 = v184;
            goto LABEL_439;
          }
          v177 = 1;
          while (v176 != -4096)
          {
            v178 = v174 + v177++;
            v174 = v178 & v173;
            v175 = (uint64_t *)(v172 + 56 * (v178 & v173));
            v176 = *v175;
            if (*v175 == v171)
              goto LABEL_430;
          }
        }
        v179 = 0;
        v182 = 0;
        v180 = -1;
        LODWORD(v415) = -1;
        v420 = 0;
        v417 = 2;
        v418 = 0;
        v419 = 0;
LABEL_439:
        if (v182 != (int32x2_t ****)-8192 && v182 != (int32x2_t ****)-4096 && v182)
        {
          v185 = v417 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v417 & 0xFFFFFFFFFFFFFFF8) = v179;
          if (v418)
          {
            *v418 = *v418 & 7 | v185;
          }
          else
          {
            v186 = v419;
            v187 = ***v419;
            v188 = (unint64_t)v187[303];
            if (v188 <= v185)
            {
              v189 = v187[305].u32[0];
              if (v188 + 16 * v189 > v185)
              {
                v190 = v189 - 1;
                LODWORD(v191) = v190 & ((v419 >> 4) ^ (v419 >> 9));
                v192 = (int32x2_t *****)(v188 + 16 * v191);
                v193 = *v192;
                if (v419 == *v192)
                {
LABEL_450:
                  *v192 = (int32x2_t ****)-8192;
                  v187[304] = vadd_s32(v187[304], (int32x2_t)0x1FFFFFFFFLL);
                  v186 = v419;
                }
                else
                {
                  v194 = 1;
                  while (v193 != (int32x2_t ****)-4096)
                  {
                    v195 = v191 + v194++;
                    v191 = v195 & v190;
                    v193 = *(int32x2_t *****)(v188 + 16 * v191);
                    if (v419 == v193)
                    {
                      v192 = (int32x2_t *****)(v188 + 16 * v191);
                      goto LABEL_450;
                    }
                  }
                }
                *((_BYTE *)v186 + 17) &= ~1u;
              }
            }
          }
        }
        LODWORD(v415) = v180;
        v196 = operator new(0xC0uLL);
        *v196 = 0;
        v196[1] = 0;
        v197 = sub_1C4DB2E4C((uint64_t)(v196 + 2), v169, (int *)&v415);
        v198 = *(_QWORD *)(v0 + 88);
        *v196 = v198;
        v196[1] = v166;
        *(_QWORD *)(v198 + 8) = v196;
        *(_QWORD *)(v0 + 88) = v196;
        ++*(_QWORD *)(v0 + 104);
        *(_QWORD *)(*(_QWORD *)(v0 + 64) + 24 * v415 + 8) = v197;
        v200 = v168[1];
        v199 = v168[2];
        v158 = *((_QWORD *)&v394[0] + 1);
        if (v200 != v199)
        {
          v201 = v393;
          v202 = *((_QWORD *)&__p + 1);
          v203 = *(_QWORD *)&v394[0];
          do
          {
            v204 = *v200;
            v205 = *v166;
            if (v201 == v202)
              v206 = 0;
            else
              v206 = 32 * (v201 - v202) - 1;
            v207 = v203 + v158;
            if (v206 == v203 + v158)
            {
              sub_1C4DB2B30((uint64_t)&__p);
              v202 = *((_QWORD *)&__p + 1);
              v201 = v393;
              v158 = *((_QWORD *)&v394[0] + 1);
              v203 = *(_QWORD *)&v394[0];
              v207 = *(_QWORD *)&v394[0] + *((_QWORD *)&v394[0] + 1);
            }
            v208 = (_QWORD *)(*(_QWORD *)(v202 + ((v207 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v207);
            *v208 = v204;
            v208[1] = v205 + 16;
            *((_QWORD *)&v394[0] + 1) = ++v158;
            ++v200;
          }
          while (v200 != v199);
        }
      }
      while (v158);
    }
    if (*(_QWORD *)(v0 + 144) != *(_QWORD *)(v0 + 136))
    {
      v209 = 0;
      while (!sub_1C4DB2AAC((int *)(*v147 + 24 * v209)))
      {
        v214 = *(uint64_t **)(v0 + 120);
        v215 = *((_DWORD *)v214 + 4);
        if (v215)
        {
          v216 = *(_QWORD *)(*(_QWORD *)(v0 + 136) + 8 * v209);
          v217 = *v214;
          v218 = v215 - 1;
          v219 = ((v216 >> 4) ^ (v216 >> 9)) & (v215 - 1);
          v220 = *(_QWORD *)(v217 + 16 * v219);
          if (v216 != v220)
          {
            v221 = 1;
            while (v220 != -4096)
            {
              v222 = v219 + v221++;
              v219 = v222 & v218;
              v220 = *(_QWORD *)(v217 + 16 * v219);
              if (v216 == v220)
                goto LABEL_474;
            }
            goto LABEL_508;
          }
LABEL_474:
          v223 = *(_QWORD *)(v217 + 16 * v219 + 8);
          if (v223)
          {
            v224 = *(_DWORD *)(v0 + 176);
            if (!v224)
              goto LABEL_510;
            v225 = **(_QWORD **)(v223 + 32);
            v226 = *(_QWORD *)(v0 + 160);
            v227 = v224 - 1;
            v228 = (v224 - 1) & ((v225 >> 4) ^ (v225 >> 9));
            v229 = (uint64_t *)(v226 + 56 * v228);
            v230 = *v229;
            if (*v229 == v225)
            {
LABEL_480:
              v233 = 0;
              v234 = *((_DWORD *)v229 + 2);
              LODWORD(v415) = v234;
              v235 = v229[3];
              v417 = v235 & 6;
              v418 = 0;
              v236 = (int32x2_t ****)v229[5];
              v419 = v236;
              if (v236 != (int32x2_t ****)-8192 && v236 != (int32x2_t ****)-4096 && v236 != 0)
              {
                v418 = *(unint64_t **)(v235 & 0xFFFFFFFFFFFFFFF8);
                *(_QWORD *)(v235 & 0xFFFFFFFFFFFFFFF8) = &v417;
                v417 = v235 & 0xFFFFFFFFFFFFFFFELL;
                v233 = v418;
                if (v418)
                  *v418 = *v418 & 7 | (unint64_t)&v418;
                v236 = v419;
              }
              v238 = v229[6];
              v416 = &off_1E8134B58;
              v420 = v238;
            }
            else
            {
              v231 = 1;
              while (v230 != -4096)
              {
                v232 = v228 + v231++;
                v228 = v232 & v227;
                v229 = (uint64_t *)(v226 + 56 * (v232 & v227));
                v230 = *v229;
                if (*v229 == v225)
                  goto LABEL_480;
              }
LABEL_510:
              v233 = 0;
              v236 = 0;
              LODWORD(v415) = -1;
              v420 = 0;
              v417 = 2;
              v234 = -1;
              v418 = 0;
              v419 = 0;
            }
            if (v236 != (int32x2_t ****)-8192 && v236 != (int32x2_t ****)-4096 && v236)
            {
              v239 = v417 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v417 & 0xFFFFFFFFFFFFFFF8) = v233;
              if (v418)
              {
                *v418 = *v418 & 7 | v239;
              }
              else
              {
                v240 = v419;
                v241 = ***v419;
                v242 = (unint64_t)v241[303];
                if (v242 <= v239)
                {
                  v243 = v241[305].u32[0];
                  if (v242 + 16 * v243 > v239)
                  {
                    v244 = v243 - 1;
                    LODWORD(v245) = v244 & ((v419 >> 4) ^ (v419 >> 9));
                    v246 = (int32x2_t *****)(v242 + 16 * v245);
                    v247 = *v246;
                    if (v419 == *v246)
                    {
LABEL_500:
                      *v246 = (int32x2_t ****)-8192;
                      v241[304] = vadd_s32(v241[304], (int32x2_t)0x1FFFFFFFFLL);
                      v240 = v419;
                    }
                    else
                    {
                      v248 = 1;
                      while (v247 != (int32x2_t ****)-4096)
                      {
                        v249 = v245 + v248++;
                        v245 = v249 & v244;
                        v247 = *(int32x2_t *****)(v242 + 16 * v245);
                        if (v419 == v247)
                        {
                          v246 = (int32x2_t *****)(v242 + 16 * v245);
                          goto LABEL_500;
                        }
                      }
                    }
                    *((_BYTE *)v240 + 17) &= ~1u;
                  }
                }
              }
            }
            v255 = *v147 + 24 * v234;
            *(_QWORD *)(*v147 + 24 * v209 + 8) = *(_QWORD *)(v255 + 8);
            v250 = *(_QWORD **)(v255 + 8);
            v253 = v250 + 12;
            v252 = v250 + 13;
            v251 = *((unsigned int *)v250 + 26);
            v254 = *((unsigned int *)v250 + 27);
LABEL_505:
            if (v251 >= v254)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v253, (uint64_t)(v250 + 14), v251 + 1, 4);
              v251 = *((unsigned int *)v250 + 26);
            }
            *(_DWORD *)(*v253 + 4 * v251) = v209;
            ++*v252;
          }
        }
LABEL_508:
        if (++v209 >= (unint64_t)((uint64_t)(*(_QWORD *)(v0 + 144) - *(_QWORD *)(v0 + 136)) >> 3))
          goto LABEL_513;
      }
      v210 = *v147;
      v211 = (int *)(*v147 + 24 * v209);
      if (sub_1C4DB2AAC(v211))
      {
        v212 = sub_1C4DB2ED4((uint64_t)v211);
        v213 = *(_QWORD **)(v210 + 24 * v209 + 8);
        if (v212)
          v213 = (_QWORD *)*v213;
      }
      else
      {
        v213 = (_QWORD *)(v210 + 24 * v209 + 8);
      }
      v250 = (_QWORD *)*v213;
      if (!*v213)
        goto LABEL_508;
      v252 = v250 + 13;
      v251 = *((unsigned int *)v250 + 26);
      v253 = v250 + 12;
      v254 = *((unsigned int *)v250 + 27);
      goto LABEL_505;
    }
LABEL_513:
    v256 = (void **)*((_QWORD *)&__p + 1);
    v257 = (void **)v393;
    *((_QWORD *)&v394[0] + 1) = 0;
    v258 = v393 - *((_QWORD *)&__p + 1);
    if ((_QWORD)v393 - *((_QWORD *)&__p + 1) >= 0x11uLL)
    {
      do
      {
        operator delete(*v256);
        v257 = (void **)v393;
        v256 = (void **)(*((_QWORD *)&__p + 1) + 8);
        *((_QWORD *)&__p + 1) = v256;
        v258 = v393 - (_QWORD)v256;
      }
      while ((_QWORD)v393 - (_QWORD)v256 > 0x10uLL);
    }
    v259 = v258 >> 3;
    if (v259 == 1)
    {
      v260 = 128;
    }
    else
    {
      if (v259 != 2)
        goto LABEL_520;
      v260 = 256;
    }
    *(_QWORD *)&v394[0] = v260;
LABEL_520:
    if (v256 != v257)
    {
      do
      {
        v261 = *v256++;
        operator delete(v261);
      }
      while (v256 != v257);
      if ((_QWORD)v393 != *((_QWORD *)&__p + 1))
        *(_QWORD *)&v393 = v393 + ((*((_QWORD *)&__p + 1) - v393 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    if ((_QWORD)__p)
      operator delete((void *)__p);
  }
  v262 = v0 + 88;
  v263 = *(uint64_t **)(v0 + 96);
  if ((uint64_t *)(v0 + 88) != v263)
  {
    v264 = (uint64_t *)(v0 + 88);
    do
    {
      if ((sub_1C4DB2F68((uint64_t *)v0, *v264 + 16) & 1) == 0)
      {
        v265 = *v264;
        sub_1C4DB3304((uint64_t *)v0, *v264 + 16, v264);
        v264 = *(uint64_t **)(v265 + 8);
        sub_1C4DB2F68((uint64_t *)v0, *v264 + 16);
      }
      v264 = (uint64_t *)*v264;
    }
    while (v264 != v263);
  }
  if ((sub_1C4DB3DF0((uint64_t *)v0) & 1) == 0)
  {
    sub_1C4DB3304((uint64_t *)v0, 0, *(uint64_t **)(v0 + 96));
    sub_1C4DB3DF0((uint64_t *)v0);
  }
  llvm::BlockFrequencyInfoImplBase::unwrapLoops((_QWORD *)v0);
  if (byte_1ED82CD38)
  {
    llvm::Function::getEntryCount(*(uint64_t ****)(v0 + 128), 0, (uint64_t)&v415);
    if ((_BYTE)v417)
    {
      while (v262 != *(_QWORD *)(v0 + 96))
      {
        v262 = *(_QWORD *)v262;
        if (*(_DWORD *)(v262 + 28) >= 2u)
        {
          sub_1C617BC28(v0);
          break;
        }
      }
    }
  }
  llvm::BlockFrequencyInfoImplBase::finalizeMetrics((llvm::BlockFrequencyInfoImplBase *)v0);
  if (byte_1ED82CC78)
  {
    for (i = *(_QWORD *)(v278 + 80); i != v278 + 72; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v277 = i - 24;
      else
        v277 = 0;
      v415 = 0;
      if ((sub_1C4DB1474(*(_QWORD *)(v0 + 160), *(_DWORD *)(v0 + 176), v277, &v415) & 1) == 0)
        sub_1C4DAD074(v0, v277, 0);
    }
  }
}

uint64_t llvm::BlockFrequencyInfo::getBlockFreq(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int32x2_t ****v15;
  unint64_t v18;
  int32x2_t ****v19;
  int32x2_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int32x2_t *****v25;
  int32x2_t ****v26;
  int v27;
  int v28;
  unint64_t v30;
  unint64_t *v31;
  int32x2_t ****v32;
  uint64_t v33;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 + 176);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 160);
      v5 = v3 - 1;
      v6 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v7 = (uint64_t *)(v4 + 56 * v6);
      v8 = *v7;
      if (*v7 == a2)
      {
LABEL_7:
        v11 = 0;
        v12 = *((_DWORD *)v7 + 2);
        v13 = v7[3];
        v14 = v13 & 6;
        v30 = v14;
        v31 = 0;
        v15 = (int32x2_t ****)v7[5];
        v32 = v15;
        if (v15 != (int32x2_t ****)-8192 && v15 != (int32x2_t ****)-4096 && v15 != 0)
        {
          v31 = *(unint64_t **)(v13 & 0xFFFFFFFFFFFFFFF8);
          v11 = v31;
          *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFF8) = &v30;
          v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
          v30 = v13 & 0xFFFFFFFFFFFFFFFELL;
          if (v11)
            *v11 = *v11 & 7 | (unint64_t)&v31;
        }
        v33 = v7[6];
        if (v15 != (int32x2_t ****)-8192 && v15 != (int32x2_t ****)-4096 && v15 != 0)
        {
          v18 = v14 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8) = v11;
          if (v31)
          {
            *v31 = *v31 & 7 | v18;
          }
          else
          {
            v19 = v32;
            v20 = ***v32;
            v21 = (unint64_t)v20[303];
            if (v21 <= v18)
            {
              v22 = v20[305].u32[0];
              if (v21 + 16 * v22 > v18)
              {
                v23 = v22 - 1;
                LODWORD(v24) = v23 & ((v32 >> 4) ^ (v32 >> 9));
                v25 = (int32x2_t *****)(v21 + 16 * v24);
                v26 = *v25;
                if (v32 == *v25)
                {
LABEL_27:
                  *v25 = (int32x2_t ****)-8192;
                  v20[304] = vadd_s32(v20[304], (int32x2_t)0x1FFFFFFFFLL);
                  v19 = v32;
                }
                else
                {
                  v27 = 1;
                  while (v26 != (int32x2_t ****)-4096)
                  {
                    v28 = v24 + v27++;
                    v24 = v28 & v23;
                    v26 = *(int32x2_t *****)(v21 + 16 * v24);
                    if (v32 == v26)
                    {
                      v25 = (int32x2_t *****)(v21 + 16 * v24);
                      goto LABEL_27;
                    }
                  }
                }
                *((_BYTE *)v19 + 17) &= ~1u;
              }
            }
          }
        }
        if (v12 != -1)
          return *(_QWORD *)(*(_QWORD *)(v2 + 8) + 24 * v12 + 16);
      }
      else
      {
        v9 = 1;
        while (v8 != -4096)
        {
          v10 = v6 + v9++;
          v6 = v10 & v5;
          v7 = (uint64_t *)(v4 + 56 * (v10 & v5));
          v8 = *v7;
          if (*v7 == a2)
            goto LABEL_7;
        }
      }
    }
  }
  return 0;
}

uint64_t *llvm::BlockFrequencyInfo::getBlockProfileCount(uint64_t **this, const llvm::BasicBlock *a2, int a3)
{
  uint64_t *result;
  uint64_t ***v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  const llvm::BasicBlock *v12;
  int v13;
  unsigned int v14;
  unint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  int32x2_t ****v19;
  unint64_t v22;
  int32x2_t ****v23;
  int32x2_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int32x2_t *****v29;
  int32x2_t ****v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  int32x2_t ****v36;
  uint64_t v37;

  result = *this;
  if (result)
  {
    v6 = (uint64_t ***)result[16];
    v7 = *((_DWORD *)result + 44);
    if (v7)
    {
      v8 = result[20];
      v9 = v7 - 1;
      v10 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v11 = v8 + 56 * v10;
      v12 = *(const llvm::BasicBlock **)v11;
      if (*(const llvm::BasicBlock **)v11 == a2)
      {
LABEL_7:
        v15 = 0;
        v16 = *(_DWORD *)(v11 + 8);
        v17 = *(_QWORD *)(v11 + 24);
        v18 = v17 & 6;
        v34 = v18;
        v35 = 0;
        v19 = *(int32x2_t *****)(v11 + 40);
        v36 = v19;
        if (v19 != (int32x2_t ****)-8192 && v19 != (int32x2_t ****)-4096 && v19 != 0)
        {
          v35 = *(unint64_t **)(v17 & 0xFFFFFFFFFFFFFFF8);
          v15 = v35;
          *(_QWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) = &v34;
          v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
          v34 = v17 & 0xFFFFFFFFFFFFFFFELL;
          if (v15)
            *v15 = *v15 & 7 | (unint64_t)&v35;
        }
        v37 = *(_QWORD *)(v11 + 48);
        if (v19 != (int32x2_t ****)-8192 && v19 != (int32x2_t ****)-4096 && v19 != 0)
        {
          v22 = v18 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8) = v15;
          if (v35)
          {
            *v35 = *v35 & 7 | v22;
          }
          else
          {
            v23 = v36;
            v24 = ***v36;
            v25 = (unint64_t)v24[303];
            if (v25 <= v22)
            {
              v26 = v24[305].u32[0];
              if (v25 + 16 * v26 > v22)
              {
                v27 = v26 - 1;
                LODWORD(v28) = v27 & ((v36 >> 4) ^ (v36 >> 9));
                v29 = (int32x2_t *****)(v25 + 16 * v28);
                v30 = *v29;
                if (v36 == *v29)
                {
LABEL_27:
                  *v29 = (int32x2_t ****)-8192;
                  v24[304] = vadd_s32(v24[304], (int32x2_t)0x1FFFFFFFFLL);
                  v23 = v36;
                }
                else
                {
                  v31 = 1;
                  while (v30 != (int32x2_t ****)-4096)
                  {
                    v32 = v28 + v31++;
                    v28 = v32 & v27;
                    v30 = *(int32x2_t *****)(v25 + 16 * v28);
                    if (v36 == v30)
                    {
                      v29 = (int32x2_t *****)(v25 + 16 * v28);
                      goto LABEL_27;
                    }
                  }
                }
                *((_BYTE *)v23 + 17) &= ~1u;
              }
            }
          }
        }
        if (v16 != -1)
        {
          v33 = *(_QWORD *)(result[1] + 24 * v16 + 16);
          return llvm::BlockFrequencyInfoImplBase::getProfileCountFromFreq((llvm::BlockFrequencyInfoImplBase *)result, v6, v33, a3);
        }
      }
      else
      {
        v13 = 1;
        while (v12 != (const llvm::BasicBlock *)-4096)
        {
          v14 = v10 + v13++;
          v10 = v14 & v9;
          v11 = v8 + 56 * (v14 & v9);
          v12 = *(const llvm::BasicBlock **)v11;
          if (*(const llvm::BasicBlock **)v11 == a2)
            goto LABEL_7;
        }
      }
    }
    v33 = 0;
    return llvm::BlockFrequencyInfoImplBase::getProfileCountFromFreq((llvm::BlockFrequencyInfoImplBase *)result, v6, v33, a3);
  }
  return result;
}

uint64_t llvm::BlockFrequencyInfo::getFunction(llvm::BlockFrequencyInfo *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)(*(_QWORD *)this + 128);
  else
    return 0;
}

void llvm::BlockFrequencyInfo::setBlockFreq(llvm::BlockFrequencyInfo *this, const llvm::BasicBlock *a2, uint64_t a3)
{
  sub_1C4DAD074(*(_QWORD *)this, (uint64_t)a2, a3);
}

void sub_1C4DAD074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  int32x2_t ****v24;
  unint64_t v27;
  int32x2_t ****v28;
  int32x2_t *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int32x2_t *****v34;
  int32x2_t ****v35;
  int v36;
  int v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  int32x2_t ****v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  BOOL v51;
  unsigned int v52;
  int v53;
  int32x2_t ****v54;
  int32x2_t ****v55;
  BOOL v56;
  unint64_t v58;
  _QWORD *v59;
  unint64_t *v60;
  unint64_t v62;
  int32x2_t ****v63;
  int32x2_t *v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  int32x2_t *****v69;
  int32x2_t ****v70;
  int v71;
  int v72;
  uint64_t *v73;
  unint64_t v75;
  int32x2_t ****v76;
  int32x2_t *v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int32x2_t *****v82;
  int32x2_t ****v83;
  int v84;
  int v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t *v90;
  uint64_t v91;
  int32x2_t *v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  int v99;
  int v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  __int128 v108;
  uint64_t v109[2];
  uint64_t v110;
  unint64_t *v111;
  int32x2_t ****v112;
  uint64_t v113;
  int v114;
  uint64_t (**v115)(llvm::CallbackVH *__hidden);
  unint64_t v116;
  unint64_t *v117;
  int32x2_t ****v118;
  uint64_t v119;

  v7 = a1 + 160;
  v6 = *(_QWORD *)(a1 + 160);
  v8 = *(_DWORD *)(a1 + 176);
  v9 = a2 >> 4;
  if (!v8)
    goto LABEL_31;
  v10 = v8 - 1;
  v11 = (v8 - 1) & (v9 ^ (a2 >> 9));
  v12 = (uint64_t *)(v6 + 56 * v11);
  v13 = *v12;
  if (*v12 != a2)
  {
    v14 = 1;
    v15 = *v12;
    v16 = v10 & (v9 ^ (a2 >> 9));
    while (v15 != -4096)
    {
      v17 = v16 + v14++;
      v16 = v17 & v10;
      v15 = *(_QWORD *)(v6 + 56 * v16);
      if (v15 == a2)
      {
        v18 = 1;
        while (v13 != -4096)
        {
          v19 = v11 + v18++;
          v11 = v19 & v10;
          v12 = (uint64_t *)(v6 + 56 * (v19 & v10));
          v13 = *v12;
          if (*v12 == a2)
            goto LABEL_9;
        }
        v21 = -1;
        goto LABEL_106;
      }
    }
LABEL_31:
    v38 = (_QWORD *)(a1 + 8);
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
    v40 = 2;
    v110 = 2;
    v111 = 0;
    v112 = (int32x2_t ****)a2;
    if (a2 == -8192 || a2 == -4096)
    {
      v41 = (int32x2_t ****)a2;
    }
    else
    {
      v41 = (int32x2_t ****)a2;
      if (a2)
      {
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v110);
        v40 = v110;
        v41 = v112;
      }
    }
    v109[1] = (uint64_t)&off_1E8134B58;
    v113 = a1;
    v114 = v39;
    v116 = v40 & 6;
    v117 = 0;
    v118 = v41;
    v42 = a1;
    if (v41 != (int32x2_t ****)-8192)
    {
      v42 = a1;
      if (v41 != (int32x2_t ****)-4096)
      {
        v42 = a1;
        if (v41)
        {
          v117 = *(unint64_t **)(v40 & 0xFFFFFFFFFFFFFFF8);
          *(_QWORD *)(v40 & 0xFFFFFFFFFFFFFFF8) = &v116;
          v116 = v40 & 0xFFFFFFFFFFFFFFFELL;
          if (v117)
            *v117 = *v117 & 7 | (unint64_t)&v117;
          v42 = v113;
        }
      }
    }
    v115 = &off_1E8134B58;
    v119 = v42;
    v109[0] = a2;
    v43 = *(_DWORD *)(a1 + 176);
    if (v43)
    {
      v44 = *(_QWORD *)(a1 + 160);
      v45 = v43 - 1;
      v46 = v45 & (v9 ^ (a2 >> 9));
      v47 = (uint64_t *)(v44 + 56 * v46);
      v48 = *v47;
      if (*v47 == a2)
      {
LABEL_51:
        v53 = v39;
LABEL_52:
        *((_DWORD *)v47 + 2) = v53;
        v54 = (int32x2_t ****)v47[5];
        v55 = v118;
        if (v54 == v118)
        {
          v55 = (int32x2_t ****)v47[5];
        }
        else
        {
          v56 = v54 == (int32x2_t ****)-4096 || v54 == 0;
          if (!v56 && v54 != (int32x2_t ****)-8192)
          {
            v89 = v47[3] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v89 = v47[4];
            v90 = (unint64_t *)v47[4];
            if (v90)
            {
              *v90 = *v90 & 7 | v89;
            }
            else
            {
              v91 = v47[5];
              v92 = ***(int32x2_t ****)v91;
              v93 = (unint64_t)v92[303];
              if (v93 <= v89)
              {
                v94 = v92[305].u32[0];
                if (v93 + 16 * v94 > v89)
                {
                  v95 = v94 - 1;
                  LODWORD(v96) = v95 & ((v91 >> 4) ^ (v91 >> 9));
                  v97 = (uint64_t *)(v93 + 16 * v96);
                  v98 = *v97;
                  if (v91 == *v97)
                  {
LABEL_118:
                    *v97 = -8192;
                    v92[304] = vadd_s32(v92[304], (int32x2_t)0x1FFFFFFFFLL);
                    v91 = v47[5];
                  }
                  else
                  {
                    v99 = 1;
                    while (v98 != -4096)
                    {
                      v100 = v96 + v99++;
                      v96 = v100 & v95;
                      v98 = *(_QWORD *)(v93 + 16 * v96);
                      if (v91 == v98)
                      {
                        v97 = (uint64_t *)(v93 + 16 * v96);
                        goto LABEL_118;
                      }
                    }
                  }
                  *(_BYTE *)(v91 + 17) &= ~1u;
                }
              }
            }
            v55 = v118;
          }
          v47[5] = (uint64_t)v55;
          if (v55 != (int32x2_t ****)-4096 && v55 != (int32x2_t ****)-8192 && v55 != 0)
          {
            v58 = v116;
            v59 = (_QWORD *)(v116 & 0xFFFFFFFFFFFFFFF8);
            v47[4] = *(_QWORD *)(v116 & 0xFFFFFFFFFFFFFFF8);
            *v59 = v47 + 3;
            v47[3] = v58 & 0xFFFFFFFFFFFFFFF8 | v47[3] & 7;
            v60 = (unint64_t *)v47[4];
            if (v60)
              *v60 = *v60 & 7 | (unint64_t)(v47 + 4);
            v55 = v118;
          }
        }
        v47[6] = v119;
        if (v55 != (int32x2_t ****)-8192 && v55 != (int32x2_t ****)-4096 && v55 != 0)
        {
          v62 = v116 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v116 & 0xFFFFFFFFFFFFFFF8) = v117;
          if (v117)
          {
            *v117 = *v117 & 7 | v62;
          }
          else
          {
            v63 = v118;
            v64 = ***v118;
            v65 = (unint64_t)v64[303];
            if (v65 <= v62)
            {
              v66 = v64[305].u32[0];
              if (v65 + 16 * v66 > v62)
              {
                v67 = v66 - 1;
                LODWORD(v68) = v67 & ((v118 >> 4) ^ (v118 >> 9));
                v69 = (int32x2_t *****)(v65 + 16 * v68);
                v70 = *v69;
                if (v118 == *v69)
                {
LABEL_79:
                  *v69 = (int32x2_t ****)-8192;
                  v64[304] = vadd_s32(v64[304], (int32x2_t)0x1FFFFFFFFLL);
                  v63 = v118;
                }
                else
                {
                  v71 = 1;
                  while (v70 != (int32x2_t ****)-4096)
                  {
                    v72 = v68 + v71++;
                    v68 = v72 & v67;
                    v70 = *(int32x2_t *****)(v65 + 16 * v68);
                    if (v118 == v70)
                    {
                      v69 = (int32x2_t *****)(v65 + 16 * v68);
                      goto LABEL_79;
                    }
                  }
                }
                *((_BYTE *)v63 + 17) &= ~1u;
              }
            }
          }
        }
        if (v112 != (int32x2_t ****)-8192 && v112 != (int32x2_t ****)-4096 && v112 != 0)
        {
          v75 = v110 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v110 & 0xFFFFFFFFFFFFFFF8) = v111;
          if (v111)
          {
            *v111 = *v111 & 7 | v75;
          }
          else
          {
            v76 = v112;
            v77 = ***v112;
            v78 = (unint64_t)v77[303];
            if (v78 <= v75)
            {
              v79 = v77[305].u32[0];
              if (v78 + 16 * v79 > v75)
              {
                v80 = v79 - 1;
                LODWORD(v81) = v80 & ((v112 >> 4) ^ (v112 >> 9));
                v82 = (int32x2_t *****)(v78 + 16 * v81);
                v83 = *v82;
                if (v112 == *v82)
                {
LABEL_99:
                  *v82 = (int32x2_t ****)-8192;
                  v77[304] = vadd_s32(v77[304], (int32x2_t)0x1FFFFFFFFLL);
                  v76 = v112;
                }
                else
                {
                  v84 = 1;
                  while (v83 != (int32x2_t ****)-4096)
                  {
                    v85 = v81 + v84++;
                    v81 = v85 & v80;
                    v83 = *(int32x2_t *****)(v78 + 16 * v81);
                    if (v112 == v83)
                    {
                      v82 = (int32x2_t *****)(v78 + 16 * v81);
                      goto LABEL_99;
                    }
                  }
                }
                *((_BYTE *)v76 + 17) &= ~1u;
              }
            }
          }
        }
        v87 = *(_QWORD **)(a1 + 16);
        v86 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v87 >= v86)
        {
          v101 = (_QWORD *)*v38;
          v102 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v87 - *v38) >> 3);
          v103 = v102 + 1;
          if (v102 + 1 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v86 - (_QWORD)v101) >> 3);
          if (2 * v104 > v103)
            v103 = 2 * v104;
          if (v104 >= 0x555555555555555)
            v105 = 0xAAAAAAAAAAAAAAALL;
          else
            v105 = v103;
          if (v105)
          {
            if (v105 > 0xAAAAAAAAAAAAAAALL)
              sub_1C4764EE4();
            v106 = (char *)operator new(24 * v105);
          }
          else
          {
            v106 = 0;
          }
          v107 = &v106[24 * v102];
          v88 = v107 + 24;
          *(_QWORD *)v107 = 0;
          *((_QWORD *)v107 + 1) = 0;
          *((_QWORD *)v107 + 2) = 0;
          if (v87 != v101)
          {
            do
            {
              v108 = *(_OWORD *)(v87 - 3);
              *((_QWORD *)v107 - 1) = *(v87 - 1);
              *(_OWORD *)(v107 - 24) = v108;
              v107 -= 24;
              v87 -= 3;
            }
            while (v87 != v101);
            v87 = (_QWORD *)*v38;
          }
          *(_QWORD *)(a1 + 8) = v107;
          *(_QWORD *)(a1 + 16) = v88;
          *(_QWORD *)(a1 + 24) = &v106[24 * v105];
          if (v87)
            operator delete(v87);
        }
        else
        {
          v88 = v87 + 3;
          *v87 = 0;
          v87[1] = 0;
          v87[2] = 0;
        }
        *(_QWORD *)(a1 + 16) = v88;
        v21 = v39;
        goto LABEL_107;
      }
      v49 = 0;
      v50 = 1;
      while (v48 != -4096)
      {
        if (v49)
          v51 = 0;
        else
          v51 = v48 == -8192;
        if (v51)
          v49 = v47;
        v52 = v46 + v50++;
        v46 = v52 & v45;
        v47 = (uint64_t *)(v44 + 56 * v46);
        v48 = *v47;
        if (*v47 == a2)
          goto LABEL_51;
      }
      if (v49)
        v73 = v49;
      else
        v73 = v47;
    }
    else
    {
      v73 = 0;
    }
    v47 = sub_1C4DB23DC(v7, v109, v73);
    *v47 = a2;
    *((_DWORD *)v47 + 2) = -1;
    v47[5] = 0;
    v47[6] = 0;
    v47[3] = 2;
    v47[4] = 0;
    v47[2] = (uint64_t)&off_1E8134B58;
    v53 = v114;
    goto LABEL_52;
  }
LABEL_9:
  v20 = 0;
  v21 = *((_DWORD *)v12 + 2);
  v22 = v12[3];
  v23 = v22 & 6;
  v116 = v23;
  v117 = 0;
  v24 = (int32x2_t ****)v12[5];
  v118 = v24;
  if (v24 != (int32x2_t ****)-8192 && v24 != (int32x2_t ****)-4096 && v24 != 0)
  {
    v117 = *(unint64_t **)(v22 & 0xFFFFFFFFFFFFFFF8);
    v20 = v117;
    *(_QWORD *)(v22 & 0xFFFFFFFFFFFFFFF8) = &v116;
    v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
    v116 = v22 & 0xFFFFFFFFFFFFFFFELL;
    if (v20)
      *v20 = *v20 & 7 | (unint64_t)&v117;
  }
  v119 = v12[6];
  if (v24 != (int32x2_t ****)-8192 && v24 != (int32x2_t ****)-4096 && v24 != 0)
  {
    v27 = v23 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v27 = v20;
    if (v117)
    {
      *v117 = *v117 & 7 | v27;
    }
    else
    {
      v28 = v118;
      v29 = ***v118;
      v30 = (unint64_t)v29[303];
      if (v30 <= v27)
      {
        v31 = v29[305].u32[0];
        if (v30 + 16 * v31 > v27)
        {
          v32 = v31 - 1;
          LODWORD(v33) = v32 & ((v118 >> 4) ^ (v118 >> 9));
          v34 = (int32x2_t *****)(v30 + 16 * v33);
          v35 = *v34;
          if (v118 == *v34)
          {
LABEL_29:
            *v34 = (int32x2_t ****)-8192;
            v29[304] = vadd_s32(v29[304], (int32x2_t)0x1FFFFFFFFLL);
            v28 = v118;
          }
          else
          {
            v36 = 1;
            while (v35 != (int32x2_t ****)-4096)
            {
              v37 = v33 + v36++;
              v33 = v37 & v32;
              v35 = *(int32x2_t *****)(v30 + 16 * v33);
              if (v118 == v35)
              {
                v34 = (int32x2_t *****)(v30 + 16 * v33);
                goto LABEL_29;
              }
            }
          }
          *((_BYTE *)v28 + 17) &= ~1u;
        }
      }
    }
  }
LABEL_106:
  v38 = (_QWORD *)(a1 + 8);
LABEL_107:
  *(_QWORD *)(*v38 + 24 * v21 + 16) = a3;
}

void llvm::BlockFrequencyInfo::setBlockFreqAndScale(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  int32x2_t ****v20;
  uint64_t v22;
  unint64_t v23;
  int32x2_t ****v24;
  int32x2_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int32x2_t *****v30;
  int32x2_t ****v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int32x2_t ****v54;
  uint64_t v56;
  unint64_t v57;
  int32x2_t ****v58;
  int32x2_t *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int32x2_t *****v64;
  int32x2_t ****v65;
  int v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t **v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t **v81;
  uint64_t (**v82)(llvm::CallbackVH *__hidden);
  unint64_t v83;
  unint64_t *v84;
  int32x2_t ****v85;
  uint64_t v86;

  v80 = 128;
  llvm::APInt::initSlowCase((llvm::APInt *)&v79, a3, 0);
  v8 = *a1;
  v9 = *(_DWORD *)(*a1 + 176);
  if (!v9)
  {
LABEL_15:
    v17 = 0;
    v20 = 0;
    v18 = -1;
    LODWORD(v81) = -1;
    v85 = 0;
    v86 = 0;
    v83 = 2;
    v84 = 0;
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(v8 + 160);
  v11 = v9 - 1;
  v12 = v11 & ((a2 >> 4) ^ (a2 >> 9));
  v13 = (uint64_t *)(v10 + 56 * v12);
  v14 = *v13;
  if (*v13 != a2)
  {
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & v11;
      v13 = (uint64_t *)(v10 + 56 * (v16 & v11));
      v14 = *v13;
      if (*v13 == a2)
        goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_6:
  v17 = 0;
  v18 = *((_DWORD *)v13 + 2);
  LODWORD(v81) = v18;
  v19 = v13[3];
  v83 = v19 & 6;
  v84 = 0;
  v20 = (int32x2_t ****)v13[5];
  v85 = v20;
  if (v20 != (int32x2_t ****)-8192 && v20 != (int32x2_t ****)-4096 && v20 != 0)
  {
    v84 = *(unint64_t **)(v19 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8) = &v83;
    v83 = v19 & 0xFFFFFFFFFFFFFFFELL;
    v17 = v84;
    if (v84)
      *v84 = *v84 & 7 | (unint64_t)&v84;
    v20 = v85;
  }
  v22 = v13[6];
  v82 = &off_1E8134B58;
  v86 = v22;
LABEL_16:
  if (v20 != (int32x2_t ****)-8192 && v20 != (int32x2_t ****)-4096 && v20)
  {
    v23 = v83 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v83 & 0xFFFFFFFFFFFFFFF8) = v17;
    if (v84)
    {
      *v84 = *v84 & 7 | v23;
    }
    else
    {
      v24 = v85;
      v25 = ***v85;
      v26 = (unint64_t)v25[303];
      if (v26 <= v23)
      {
        v27 = v25[305].u32[0];
        if (v26 + 16 * v27 > v23)
        {
          v28 = v27 - 1;
          LODWORD(v29) = v28 & ((v85 >> 4) ^ (v85 >> 9));
          v30 = (int32x2_t *****)(v26 + 16 * v29);
          v31 = *v30;
          if (v85 == *v30)
          {
LABEL_27:
            *v30 = (int32x2_t ****)-8192;
            v25[304] = vadd_s32(v25[304], (int32x2_t)0x1FFFFFFFFLL);
            v24 = v85;
          }
          else
          {
            v32 = 1;
            while (v31 != (int32x2_t ****)-4096)
            {
              v33 = v29 + v32++;
              v29 = v33 & v28;
              v31 = *(int32x2_t *****)(v26 + 16 * v29);
              if (v85 == v31)
              {
                v30 = (int32x2_t *****)(v26 + 16 * v29);
                goto LABEL_27;
              }
            }
          }
          *((_BYTE *)v24 + 17) &= ~1u;
        }
      }
    }
  }
  if (v18 == -1)
    v34 = 0;
  else
    v34 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 24 * v18 + 16);
  v78 = 128;
  llvm::APInt::initSlowCase((llvm::APInt *)&v77, v34, 0);
  v76 = 128;
  llvm::APInt::initSlowCase((llvm::APInt *)&v75, 0, 0);
  v35 = a4[1];
  if (v35 == *a4)
    v36 = (unsigned int *)a4 + 5;
  else
    v36 = (unsigned int *)(a4 + 2);
  v37 = *v36;
  if ((_DWORD)v37)
  {
    v38 = 8 * v37;
    v39 = (uint64_t *)a4[1];
    while ((unint64_t)*v39 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v39;
      v38 -= 8;
      if (!v38)
        goto LABEL_91;
    }
  }
  else
  {
    v39 = (uint64_t *)a4[1];
  }
  v40 = (_QWORD *)(v35 + 8 * v37);
  if (v39 != v40)
  {
    v41 = *v39;
LABEL_43:
    v42 = *a1;
    v43 = *(_DWORD *)(*a1 + 176);
    if (v43)
    {
      v44 = *(_QWORD *)(v42 + 160);
      v45 = v43 - 1;
      v46 = v45 & ((v41 >> 4) ^ (v41 >> 9));
      v47 = (uint64_t *)(v44 + 56 * v46);
      v48 = *v47;
      if (*v47 == v41)
      {
LABEL_48:
        v51 = 0;
        v52 = *((unsigned int *)v47 + 2);
        LODWORD(v81) = *((_DWORD *)v47 + 2);
        v53 = v47[3];
        v83 = v53 & 6;
        v84 = 0;
        v54 = (int32x2_t ****)v47[5];
        v85 = v54;
        if (v54 != (int32x2_t ****)-8192 && v54 != (int32x2_t ****)-4096 && v54 != 0)
        {
          v84 = *(unint64_t **)(v53 & 0xFFFFFFFFFFFFFFF8);
          *(_QWORD *)(v53 & 0xFFFFFFFFFFFFFFF8) = &v83;
          v83 = v53 & 0xFFFFFFFFFFFFFFFELL;
          v51 = v84;
          if (v84)
            *v84 = *v84 & 7 | (unint64_t)&v84;
          v54 = v85;
        }
        v56 = v47[6];
        v82 = &off_1E8134B58;
        v86 = v56;
        goto LABEL_58;
      }
      v49 = 1;
      while (v48 != -4096)
      {
        v50 = v46 + v49++;
        v46 = v50 & v45;
        v47 = (uint64_t *)(v44 + 56 * (v50 & v45));
        v48 = *v47;
        if (*v47 == v41)
          goto LABEL_48;
      }
    }
    v51 = 0;
    v54 = 0;
    LODWORD(v81) = -1;
    v86 = 0;
    v83 = 2;
    v52 = 0xFFFFFFFFLL;
    v84 = 0;
    v85 = 0;
LABEL_58:
    if (v54 != (int32x2_t ****)-8192 && v54 != (int32x2_t ****)-4096 && v54)
    {
      v57 = v83 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v83 & 0xFFFFFFFFFFFFFFF8) = v51;
      if (v84)
      {
        *v84 = *v84 & 7 | v57;
      }
      else
      {
        v58 = v85;
        v59 = ***v85;
        v60 = (unint64_t)v59[303];
        if (v60 <= v57)
        {
          v61 = v59[305].u32[0];
          if (v60 + 16 * v61 > v57)
          {
            v62 = v61 - 1;
            LODWORD(v63) = v62 & ((v85 >> 4) ^ (v85 >> 9));
            v64 = (int32x2_t *****)(v60 + 16 * v63);
            v65 = *v64;
            if (v85 == *v64)
            {
LABEL_69:
              *v64 = (int32x2_t ****)-8192;
              v59[304] = vadd_s32(v59[304], (int32x2_t)0x1FFFFFFFFLL);
              v58 = v85;
            }
            else
            {
              v66 = 1;
              while (v65 != (int32x2_t ****)-4096)
              {
                v67 = v63 + v66++;
                v63 = v67 & v62;
                v65 = *(int32x2_t *****)(v60 + 16 * v63);
                if (v85 == v65)
                {
                  v64 = (int32x2_t *****)(v60 + 16 * v63);
                  goto LABEL_69;
                }
              }
            }
            *((_BYTE *)v58 + 17) &= ~1u;
          }
        }
      }
    }
    if (v52 == 0xFFFFFFFFLL)
      v68 = 0;
    else
      v68 = *(uint64_t **)(*(_QWORD *)(v42 + 8) + 24 * v52 + 16);
    v69 = v76;
    if (v76 > 0x40)
    {
      *v75 = v68;
      bzero(v75 + 1, (((unint64_t)(v69 + 63) >> 3) - 8) & 0xFFFFFFF8);
    }
    else
    {
      if (v76)
        v70 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v76;
      else
        v70 = 0;
      v75 = (uint64_t **)(v70 & (unint64_t)v68);
    }
    llvm::APInt::operator*((uint64_t)&v75, &v79, (uint64_t)&v81);
    if (v76 >= 0x41 && v75)
      MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
    v75 = v81;
    v76 = v82;
    llvm::APInt::udiv((llvm::APInt *)&v75, (const llvm::APInt *)&v77, (llvm::APInt *)&v81);
    if (v76 >= 0x41 && v75)
      MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
    v75 = v81;
    v76 = v82;
    v71 = *a1;
    v72 = sub_1C47EE5B8(&v75, 0xFFFFFFFFFFFFFFFFLL);
    sub_1C4DAD074(v71, v41, (uint64_t)v72);
    v73 = (unint64_t *)(v39 + 1);
    while (v73 != v40)
    {
      v74 = *v73++;
      v41 = v74;
      if (v74 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v39 = (uint64_t *)(v73 - 1);
        goto LABEL_43;
      }
    }
  }
LABEL_91:
  sub_1C4DAD074(*a1, a2, a3);
  if (v76 >= 0x41 && v75)
    MEMORY[0x1CAA32F9C](v75, 0x1000C8000313F17);
  if (v78 >= 0x41 && v77)
    MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
  if (v80 >= 0x41)
  {
    if (v79)
      MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
  }
}

void sub_1C4DADF20(uint64_t ***a1, llvm::Twine *a2, char a3, llvm::Twine *a4, int a5)
{
  llvm *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  int v17;
  int v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  std::string *v21;
  size_t size;
  llvm::raw_ostream *v23;
  void *v24;
  unint64_t *v25;
  std::string::size_type v26;
  const void *v27;
  unint64_t v28;
  std::string *p_dst;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::raw_ostream *v33;
  uint64_t v34;
  std::string *v35;
  std::string::size_type v36;
  uint64_t v37;
  unint64_t v38;
  std::string *v39;
  size_t v40;
  _DWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  std::string *v44;
  std::string::size_type v45;
  _QWORD *v46;
  std::string *v47;
  size_t v48;
  uint64_t v49;
  llvm::raw_ostream *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  const llvm::BasicBlock *v54;
  uint64_t ***v55;
  uint64_t **v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  int32x2_t ****v76;
  uint64_t v78;
  std::string::size_type v79;
  int32x2_t ****v80;
  int32x2_t *v81;
  std::string::size_type v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  int32x2_t *****v86;
  int32x2_t ****v87;
  int v88;
  int v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  const llvm::BasicBlock *v96;
  int v97;
  unsigned int v98;
  unint64_t *v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  int32x2_t ****v103;
  uint64_t v105;
  unint64_t v107;
  int32x2_t ****v108;
  int32x2_t *v109;
  unint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  int32x2_t *****v114;
  int32x2_t ****v115;
  int v116;
  int v117;
  llvm::raw_ostream *v118;
  uint64_t v119;
  llvm::raw_ostream *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  int v124;
  unint64_t v125;
  llvm::raw_ostream *v126;
  const char *v127;
  size_t v128;
  size_t v129;
  std::string *v130;
  _BYTE *v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  _BOOL4 v140;
  _WORD *v141;
  int v142;
  std::string *v143;
  size_t v144;
  void *v145;
  int v146;
  void *v147;
  _WORD *v148;
  int v149;
  std::string *v150;
  size_t v151;
  uint64_t v152;
  void *v153;
  const char *v154;
  size_t v155;
  _WORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  unint64_t v163;
  int v164;
  int v165;
  BOOL v167;
  int v168;
  int v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  _WORD *v173;
  llvm::raw_ostream *v174;
  _QWORD *v175;
  char v176;
  size_t v177;
  std::string *v178;
  uint64_t v179;
  std::string v180;
  _QWORD v181[4];
  __int16 v182;
  int v183;
  void *v184;
  uint64_t v185;
  char v186;
  void *__p;
  uint64_t ***v188;
  unsigned __int8 v189;
  char v190;
  char v191;
  unint64_t v192;
  void *v193[2];
  uint64_t v194;
  std::string v195;
  std::string __dst;
  unint64_t *v197;
  int32x2_t ****v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  std::string *v202;

  v183 = 0;
  llvm::Twine::str(a2, &__p);
  v182 = 260;
  v181[0] = &__p;
  llvm::createGraphFilename((llvm::Twine *)v181, &v183, &__dst);
  v180 = __dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  if (v190 < 0)
    operator delete(__p);
  v9 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v181, v183, 1, 0, 0);
  if (v183 == -1)
  {
    v19 = (llvm::raw_ostream *)llvm::errs(v9);
    v20 = *((_QWORD *)v19 + 4);
    if ((unint64_t)(*((_QWORD *)v19 + 3) - v20) > 0x13)
    {
      *(_DWORD *)(v20 + 16) = 656434540;
      *(_OWORD *)v20 = *(_OWORD *)"error opening file '";
      *((_QWORD *)v19 + 4) += 20;
    }
    else
    {
      v19 = llvm::raw_ostream::write(v19, "error opening file '", 0x14uLL);
    }
    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v180;
    else
      v21 = (std::string *)v180.__r_.__value_.__r.__words[0];
    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v180.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v180.__r_.__value_.__l.__size_;
    v23 = llvm::raw_ostream::write(v19, (const char *)v21, size);
    v24 = (void *)*((_QWORD *)v23 + 4);
    if (*((_QWORD *)v23 + 3) - (_QWORD)v24 > 0xEuLL)
    {
      qmemcpy(v24, "' for writing!\n", 15);
      *((_QWORD *)v23 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v23, "' for writing!\n", 0xFuLL);
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    __dst.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_321;
  }
  __p = v181;
  v188 = a1;
  v191 = a3;
  v192 = 0;
  v189 = 0;
  llvm::Twine::str(a4, &v184);
  v10 = **a1;
  if (v10)
    v10 = (uint64_t *)v10[16];
  if ((*((_BYTE *)v10 + 23) & 0x10) == 0)
  {
    v26 = 0;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    p_dst = &__dst;
    goto LABEL_33;
  }
  v11 = **(_QWORD **)*v10;
  v12 = *(_QWORD *)(v11 + 152);
  v13 = *(unsigned int *)(v11 + 168);
  if ((_DWORD)v13)
  {
    LODWORD(v14) = (v13 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    v15 = (uint64_t **)(v12 + 16 * v14);
    v16 = *v15;
    if (*v15 == v10)
      goto LABEL_25;
    v17 = 1;
    while (v16 != (uint64_t *)-4096)
    {
      v18 = v14 + v17++;
      v14 = v18 & (v13 - 1);
      v16 = *(uint64_t **)(v12 + 16 * v14);
      if (v16 == v10)
      {
        v15 = (uint64_t **)(v12 + 16 * v14);
        goto LABEL_25;
      }
    }
  }
  v15 = (uint64_t **)(v12 + 16 * v13);
LABEL_25:
  v25 = (unint64_t *)v15[1];
  v28 = *v25;
  v27 = v25 + 2;
  v26 = v28;
  if (v28 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    p_dst = (std::string *)operator new(v30 + 1);
    __dst.__r_.__value_.__l.__size_ = v26;
    __dst.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_32;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v26;
  p_dst = &__dst;
  if (v26)
LABEL_32:
    memmove(p_dst, v27, v26);
LABEL_33:
  p_dst->__r_.__value_.__s.__data_[v26] = 0;
  v32 = v186 & 0x7F;
  if (v186 < 0)
    v32 = v185;
  if (v32)
  {
    v33 = (llvm::raw_ostream *)__p;
    v34 = *((_QWORD *)__p + 4);
    if ((unint64_t)(*((_QWORD *)__p + 3) - v34) > 8)
    {
      *(_BYTE *)(v34 + 8) = 34;
      *(_QWORD *)v34 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v33 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)__p, "digraph \"", 9uLL);
    }
    v35 = (std::string *)&v184;
  }
  else
  {
    v36 = __dst.__r_.__value_.__l.__size_;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
    v33 = (llvm::raw_ostream *)__p;
    v37 = *((_QWORD *)__p + 4);
    v38 = *((_QWORD *)__p + 3) - v37;
    if (!v36)
    {
      if (v38 > 0x11)
      {
        *(_WORD *)(v37 + 16) = 2683;
        *(_OWORD *)v37 = *(_OWORD *)"digraph unnamed {\n";
        *((_QWORD *)v33 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)__p, "digraph unnamed {\n", 0x12uLL);
      }
      goto LABEL_57;
    }
    if (v38 > 8)
    {
      *(_BYTE *)(v37 + 8) = 34;
      *(_QWORD *)v37 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v33 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)__p, "digraph \"", 9uLL);
    }
    v35 = &__dst;
  }
  llvm::DOT::EscapeString((char *)v35, &v195);
  if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = &v195;
  else
    v39 = (std::string *)v195.__r_.__value_.__r.__words[0];
  if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = *((_BYTE *)&v195.__r_.__value_.__s + 23) & 0x7F;
  else
    v40 = v195.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v33, (const char *)v39, v40);
  v41 = (_DWORD *)*((_QWORD *)v33 + 4);
  if (*((_QWORD *)v33 + 3) - (_QWORD)v41 > 3uLL)
  {
    *v41 = 175841314;
    *((_QWORD *)v33 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v33, "\" {\n", 4uLL);
  }
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
LABEL_57:
  v42 = v186 & 0x7F;
  if (v186 < 0)
    v42 = v185;
  if (v42)
  {
    v43 = (_QWORD *)*((_QWORD *)v33 + 4);
    if (*((_QWORD *)v33 + 3) - (_QWORD)v43 > 7uLL)
    {
      *v43 = 0x223D6C6562616C09;
      *((_QWORD *)v33 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v33, "\tlabel=\"", 8uLL);
    }
    v44 = (std::string *)&v184;
  }
  else
  {
    v45 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v45 = __dst.__r_.__value_.__l.__size_;
    if (!v45)
      goto LABEL_79;
    v46 = (_QWORD *)*((_QWORD *)v33 + 4);
    if (*((_QWORD *)v33 + 3) - (_QWORD)v46 > 7uLL)
    {
      *v46 = 0x223D6C6562616C09;
      *((_QWORD *)v33 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v33, "\tlabel=\"", 8uLL);
    }
    v44 = &__dst;
  }
  llvm::DOT::EscapeString((char *)v44, &v195);
  if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = &v195;
  else
    v47 = (std::string *)v195.__r_.__value_.__r.__words[0];
  if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = *((_BYTE *)&v195.__r_.__value_.__s + 23) & 0x7F;
  else
    v48 = v195.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v33, (const char *)v47, v48);
  v49 = *((_QWORD *)v33 + 4);
  if ((unint64_t)(*((_QWORD *)v33 + 3) - v49) > 2)
  {
    *(_BYTE *)(v49 + 2) = 10;
    *(_WORD *)v49 = 15138;
    *((_QWORD *)v33 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v33, "\";\n", 3uLL);
  }
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
LABEL_79:
  *((_BYTE *)&v195.__r_.__value_.__s + 23) = 0;
  v195.__r_.__value_.__s.__data_[0] = 0;
  v50 = llvm::raw_ostream::write(v33, (const char *)&v195, 0);
  if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v195.__r_.__value_.__l.__data_);
  v51 = (_BYTE *)*((_QWORD *)v33 + 4);
  if (*((_BYTE **)v33 + 3) == v51)
  {
    v50 = llvm::raw_ostream::write(v33, "\n", 1uLL);
  }
  else
  {
    *v51 = 10;
    ++*((_QWORD *)v33 + 4);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v52 = (**v188)[16];
  v53 = *(_QWORD *)(v52 + 80);
  v179 = v52 + 72;
  if (v53 != v52 + 72)
  {
    while (1)
    {
      if (v53)
        v54 = (const llvm::BasicBlock *)(v53 - 24);
      else
        v54 = 0;
      v55 = v188;
      v56 = *v188;
      v57 = dword_1ED82C870;
      memset(&v195, 0, sizeof(v195));
      if (!dword_1ED82C870)
        goto LABEL_171;
      v58 = v192;
      v59 = *v56;
      if (v192)
      {
        if (v59)
          goto LABEL_137;
LABEL_135:
        v90 = 0;
        goto LABEL_167;
      }
      v60 = v59[16];
      v61 = v60 + 72;
      v62 = *(_QWORD *)(v60 + 80);
      if (v62 == v61)
      {
        v58 = 0;
        goto LABEL_137;
      }
      v58 = 0;
      do
      {
        v63 = (unint64_t)*v56;
        if (!*v56)
          goto LABEL_129;
        v64 = v62 - 24;
        if (!v62)
          v64 = 0;
        v65 = *(_DWORD *)(v63 + 176);
        if (v65)
        {
          v66 = *(_QWORD *)(v63 + 160);
          v67 = v65 - 1;
          v68 = (v65 - 1) & ((v64 >> 4) ^ (v64 >> 9));
          v69 = (uint64_t *)(v66 + 56 * v68);
          v70 = *v69;
          if (*v69 == v64)
          {
LABEL_103:
            v73 = 0;
            v74 = *((unsigned int *)v69 + 2);
            LODWORD(__dst.__r_.__value_.__l.__data_) = *((_DWORD *)v69 + 2);
            v75 = v69[3];
            __dst.__r_.__value_.__r.__words[2] = v75 & 6;
            v197 = 0;
            v76 = (int32x2_t ****)v69[5];
            v198 = v76;
            if (v76 != (int32x2_t ****)-8192 && v76 != (int32x2_t ****)-4096 && v76 != 0)
            {
              v197 = *(unint64_t **)(v75 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)(v75 & 0xFFFFFFFFFFFFFFF8) = (char *)&__dst.__r_.__value_.__l + 16;
              __dst.__r_.__value_.__r.__words[2] = v75 & 0xFFFFFFFFFFFFFFFELL;
              v73 = v197;
              if (v197)
                *v197 = *v197 & 7 | (unint64_t)&v197;
              v76 = v198;
            }
            v78 = v69[6];
            __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E8134B58;
            v199 = v78;
            goto LABEL_113;
          }
          v71 = 1;
          while (v70 != -4096)
          {
            v72 = v68 + v71++;
            v68 = v72 & v67;
            v69 = (uint64_t *)(v66 + 56 * (v72 & v67));
            v70 = *v69;
            if (*v69 == v64)
              goto LABEL_103;
          }
        }
        v73 = 0;
        v76 = 0;
        LODWORD(__dst.__r_.__value_.__l.__data_) = -1;
        v199 = 0;
        __dst.__r_.__value_.__r.__words[2] = 2;
        v74 = 0xFFFFFFFFLL;
        v197 = 0;
        v198 = 0;
LABEL_113:
        if (v76 != (int32x2_t ****)-8192 && v76 != (int32x2_t ****)-4096 && v76)
        {
          v79 = __dst.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(__dst.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8) = v73;
          if (v197)
          {
            *v197 = *v197 & 7 | v79;
          }
          else
          {
            v80 = v198;
            v81 = ***v198;
            v82 = (std::string::size_type)v81[303];
            if (v82 <= v79)
            {
              v83 = v81[305].u32[0];
              if (v82 + 16 * v83 > v79)
              {
                v84 = v83 - 1;
                LODWORD(v85) = v84 & ((v198 >> 4) ^ (v198 >> 9));
                v86 = (int32x2_t *****)(v82 + 16 * v85);
                v87 = *v86;
                if (v198 == *v86)
                {
LABEL_124:
                  *v86 = (int32x2_t ****)-8192;
                  v81[304] = vadd_s32(v81[304], (int32x2_t)0x1FFFFFFFFLL);
                  v80 = v198;
                }
                else
                {
                  v88 = 1;
                  while (v87 != (int32x2_t ****)-4096)
                  {
                    v89 = v85 + v88++;
                    v85 = v89 & v84;
                    v87 = *(int32x2_t *****)(v82 + 16 * v85);
                    if (v198 == v87)
                    {
                      v86 = (int32x2_t *****)(v82 + 16 * v85);
                      goto LABEL_124;
                    }
                  }
                }
                *((_BYTE *)v80 + 17) &= ~1u;
              }
            }
          }
        }
        if (v74 == 0xFFFFFFFFLL)
          v63 = 0;
        else
          v63 = *(_QWORD *)(*(_QWORD *)(v63 + 8) + 24 * v74 + 16);
LABEL_129:
        if (v58 <= v63)
          v58 = v63;
        v62 = *(_QWORD *)(v62 + 8);
      }
      while (v62 != v61);
      v192 = v58;
      v59 = *v56;
      if (!*v56)
        goto LABEL_135;
LABEL_137:
      v91 = *((_DWORD *)v59 + 44);
      if (!v91)
        goto LABEL_135;
      v92 = v59[20];
      v93 = v91 - 1;
      v94 = (v91 - 1) & ((v54 >> 4) ^ (v54 >> 9));
      v95 = v92 + 56 * v94;
      v96 = *(const llvm::BasicBlock **)v95;
      if (*(const llvm::BasicBlock **)v95 != v54)
      {
        v97 = 1;
        while (v96 != (const llvm::BasicBlock *)-4096)
        {
          v98 = v94 + v97++;
          v94 = v98 & v93;
          v95 = v92 + 56 * (v98 & v93);
          v96 = *(const llvm::BasicBlock **)v95;
          if (*(const llvm::BasicBlock **)v95 == v54)
            goto LABEL_142;
        }
        goto LABEL_135;
      }
LABEL_142:
      v99 = 0;
      v100 = *(_DWORD *)(v95 + 8);
      LODWORD(__dst.__r_.__value_.__l.__data_) = v100;
      v101 = *(_QWORD *)(v95 + 24);
      v102 = v101 & 6;
      __dst.__r_.__value_.__r.__words[2] = v102;
      v197 = 0;
      v103 = *(int32x2_t *****)(v95 + 40);
      v198 = v103;
      if (v103 != (int32x2_t ****)-8192 && v103 != (int32x2_t ****)-4096 && v103 != 0)
      {
        v197 = *(unint64_t **)(v101 & 0xFFFFFFFFFFFFFFF8);
        v99 = v197;
        *(_QWORD *)(v101 & 0xFFFFFFFFFFFFFFF8) = (char *)&__dst.__r_.__value_.__l + 16;
        v102 = v101 & 0xFFFFFFFFFFFFFFFELL;
        __dst.__r_.__value_.__r.__words[2] = v101 & 0xFFFFFFFFFFFFFFFELL;
        if (v99)
          *v99 = *v99 & 7 | (unint64_t)&v197;
      }
      v105 = *(_QWORD *)(v95 + 48);
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E8134B58;
      v199 = v105;
      if (v103 != (int32x2_t ****)-8192 && v103 != (int32x2_t ****)-4096 && v103 != 0)
      {
        v107 = v102 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v102 & 0xFFFFFFFFFFFFFFF8) = v99;
        if (v197)
        {
          *v197 = *v197 & 7 | v107;
        }
        else
        {
          v108 = v198;
          v109 = ***v198;
          v110 = (unint64_t)v109[303];
          if (v110 <= v107)
          {
            v111 = v109[305].u32[0];
            if (v110 + 16 * v111 > v107)
            {
              v112 = v111 - 1;
              LODWORD(v113) = v112 & ((v198 >> 4) ^ (v198 >> 9));
              v114 = (int32x2_t *****)(v110 + 16 * v113);
              v115 = *v114;
              if (v198 == *v114)
              {
LABEL_162:
                *v114 = (int32x2_t ****)-8192;
                v109[304] = vadd_s32(v109[304], (int32x2_t)0x1FFFFFFFFLL);
                v108 = v198;
              }
              else
              {
                v116 = 1;
                while (v115 != (int32x2_t ****)-4096)
                {
                  v117 = v113 + v116++;
                  v113 = v117 & v112;
                  v115 = *(int32x2_t *****)(v110 + 16 * v113);
                  if (v198 == v115)
                  {
                    v114 = (int32x2_t *****)(v110 + 16 * v113);
                    goto LABEL_162;
                  }
                }
              }
              *((_BYTE *)v108 + 17) &= ~1u;
            }
          }
        }
      }
      if (v100 == -1)
        goto LABEL_135;
      v90 = *(_QWORD *)(v59[1] + 24 * v100 + 16);
LABEL_167:
      LODWORD(__dst.__r_.__value_.__l.__data_) = (unint64_t)((((v57 << 31) | 0x30uLL)
                                                                   * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
      if (v90 >= llvm::BranchProbability::scale((llvm::BranchProbability *)&__dst, v58))
      {
        LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
        LOBYTE(v199) = 0;
        v200 = 0;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
        v202 = &v195;
        v201 = 0;
        v197 = 0;
        v198 = 0;
        __dst.__r_.__value_.__r.__words[2] = 0;
        v118 = llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, "color=\"red\"", 0xBuLL);
        v119 = (uint64_t)v198 - __dst.__r_.__value_.__r.__words[2];
        if (v198 != (int32x2_t ****)__dst.__r_.__value_.__r.__words[2])
        {
          v198 = (int32x2_t ****)__dst.__r_.__value_.__r.__words[2];
          llvm::raw_ostream::flush_tied_then_write(v118, (const char *)__dst.__r_.__value_.__r.__words[2], v119);
        }
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
        if (v201 == 1 && __dst.__r_.__value_.__r.__words[2])
          MEMORY[0x1CAA32F9C](__dst.__r_.__value_.__r.__words[2], 0x1000C8077774924, v119);
      }
LABEL_171:
      v120 = (llvm::raw_ostream *)__p;
      v121 = *((_QWORD *)__p + 4);
      if ((unint64_t)(*((_QWORD *)__p + 3) - v121) > 4)
      {
        *(_BYTE *)(v121 + 4) = 101;
        *(_DWORD *)v121 = 1685016073;
        *((_QWORD *)v120 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)__p, "\tNode", 5uLL);
      }
      llvm::write_hex(v120, (unint64_t)v54, 3, 0, 0);
      v122 = (_QWORD *)*((_QWORD *)v120 + 4);
      if (*((_QWORD *)v120 + 3) - (_QWORD)v122 > 7uLL)
      {
        *v122 = 0x3D65706168735B20;
        v123 = *((_QWORD *)v120 + 4) + 8;
        *((_QWORD *)v120 + 4) = v123;
      }
      else
      {
        llvm::raw_ostream::write(v120, " [shape=", 8uLL);
        v123 = *((_QWORD *)v120 + 4);
      }
      v124 = v189;
      v125 = *((_QWORD *)v120 + 3) - v123;
      if (v189)
      {
        if (v125 <= 4)
        {
          v126 = v120;
          v127 = "none,";
          v128 = 5;
          goto LABEL_180;
        }
        *(_BYTE *)(v123 + 4) = 44;
        *(_DWORD *)v123 = 1701736302;
        v170 = *((_QWORD *)v120 + 4) + 5;
LABEL_298:
        *((_QWORD *)v120 + 4) = v170;
      }
      else
      {
        if (v125 > 6)
        {
          *(_DWORD *)(v123 + 3) = 744780399;
          *(_DWORD *)v123 = 1868785010;
          v170 = *((_QWORD *)v120 + 4) + 7;
          goto LABEL_298;
        }
        v126 = v120;
        v127 = "record,";
        v128 = 7;
LABEL_180:
        llvm::raw_ostream::write(v126, v127, v128);
      }
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v129 = *((_BYTE *)&v195.__r_.__value_.__s + 23) & 0x7F;
      else
        v129 = v195.__r_.__value_.__l.__size_;
      if (v129)
      {
        if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v130 = &v195;
        else
          v130 = (std::string *)v195.__r_.__value_.__r.__words[0];
        llvm::raw_ostream::write(v120, (const char *)v130, v129);
        v131 = (_BYTE *)*((_QWORD *)v120 + 4);
        if (*((_BYTE **)v120 + 3) == v131)
        {
          llvm::raw_ostream::write(v120, ",", 1uLL);
        }
        else
        {
          *v131 = 44;
          ++*((_QWORD *)v120 + 4);
        }
      }
      v132 = *((_QWORD *)v120 + 4);
      if ((unint64_t)(*((_QWORD *)v120 + 3) - v132) > 5)
      {
        *(_WORD *)(v132 + 4) = 15724;
        *(_DWORD *)v132 = 1700946284;
        *((_QWORD *)v120 + 4) += 6;
        if (!v124)
          goto LABEL_206;
LABEL_192:
        v133 = (_QWORD *)*((_QWORD *)v54 + 5);
        if (v133 == (_QWORD *)((char *)v54 + 40))
        {
LABEL_224:
          v139 = 0;
          v140 = 0;
        }
        else
        {
          if (v133)
            v134 = v133 - 3;
          else
            v134 = 0;
          v135 = *((unsigned __int8 *)v134 + 16);
          v136 = v135 - 29;
          if (v135 != 30)
          {
            v137 = 2;
            v139 = 0;
            v140 = 0;
            switch(v136)
            {
              case 0:
              case 5:
              case 6:
                goto LABEL_225;
              case 1:
LABEL_348:
                __break(1u);
                return;
              case 2:
                v137 = (*((_DWORD *)v134 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_223;
              case 3:
              case 9:
                v137 = (*((_DWORD *)v134 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_223;
              case 4:
                goto LABEL_200;
              case 7:
                v137 = *((_WORD *)v134 + 9) & 1;
                goto LABEL_223;
              case 8:
                v137 = 1;
                goto LABEL_200;
              case 10:
                v137 = *((_DWORD *)v134 + 20) + 1;
LABEL_223:
                if (!v137)
                  goto LABEL_224;
                goto LABEL_200;
              default:
                goto LABEL_224;
            }
          }
          if ((*((_DWORD *)v134 + 5) & 0x7FFFFFF) == 3)
            v137 = 2;
          else
            v137 = 1;
LABEL_200:
          v138 = v137 - 1;
          if ((v137 - 1) >= 0x3F)
            v138 = 63;
          v139 = v138 + 1;
          v140 = v137 != v139;
        }
LABEL_225:
        if (v139 <= 1)
          v146 = 1;
        else
          v146 = v139;
        v147 = (void *)*((_QWORD *)v120 + 4);
        if (*((_QWORD *)v120 + 3) - (_QWORD)v147 <= 0x30uLL)
        {
          llvm::raw_ostream::write(v120, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
          v171 = (void *)*((_QWORD *)v120 + 4);
        }
        else
        {
          qmemcpy(v147, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
          v171 = (void *)(*((_QWORD *)v120 + 4) + 49);
          *((_QWORD *)v120 + 4) = v171;
        }
        if (*((_QWORD *)v120 + 3) - (_QWORD)v171 <= 0x2EuLL)
        {
          llvm::raw_ostream::write(v120, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
        }
        else
        {
          qmemcpy(v171, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
          *((_QWORD *)v120 + 4) += 47;
        }
        sub_1C5E21910(v120, (v146 + v140), 0, 0, 0);
        v148 = (_WORD *)*((_QWORD *)v120 + 4);
        if (*((_QWORD *)v120 + 3) - (_QWORD)v148 > 1uLL)
        {
          *v148 = 15906;
          *((_QWORD *)v120 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v120, "\">", 2uLL);
        }
        if (dword_1ED82C930 == 1)
          v149 = 3;
        else
          v149 = dword_1ED7F00A0;
        sub_1C4DB65F8(&__dst, v54, *v55, v149);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v150 = &__dst;
        else
          v150 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v151 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        else
          v151 = __dst.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write(v120, (const char *)v150, v151);
        v152 = *((_QWORD *)v120 + 4);
        if ((unint64_t)(*((_QWORD *)v120 + 3) - v152) > 4)
        {
          *(_BYTE *)(v152 + 4) = 62;
          *(_DWORD *)v152 = 1685335868;
          *((_QWORD *)v120 + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(v120, "</td>", 5uLL);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          v145 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_249:
          operator delete(v145);
        }
      }
      else
      {
        llvm::raw_ostream::write(v120, "label=", 6uLL);
        if (v124)
          goto LABEL_192;
LABEL_206:
        v141 = (_WORD *)*((_QWORD *)v120 + 4);
        if (*((_QWORD *)v120 + 3) - (_QWORD)v141 > 1uLL)
        {
          *v141 = 31522;
          *((_QWORD *)v120 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v120, "\"{", 2uLL);
        }
        if (dword_1ED82C930 == 1)
          v142 = 3;
        else
          v142 = dword_1ED7F00A0;
        sub_1C4DB65F8(v193, v54, *v55, v142);
        llvm::DOT::EscapeString((char *)v193, &__dst);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v143 = &__dst;
        else
          v143 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v144 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        else
          v144 = __dst.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write(v120, (const char *)v143, v144);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(v194) < 0)
        {
          v145 = v193[0];
          goto LABEL_249;
        }
      }
      v193[0] = 0;
      v193[1] = 0;
      v194 = 0;
      LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
      LOBYTE(v199) = 0;
      v200 = 0;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
      v202 = (std::string *)v193;
      v201 = 0;
      v197 = 0;
      v198 = 0;
      __dst.__r_.__value_.__r.__words[2] = 0;
      if (v189)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&__dst, "</tr><tr>", 9uLL);
        v50 = (llvm::raw_ostream *)__p;
        v153 = (void *)*((_QWORD *)__p + 4);
        if (*((_QWORD *)__p + 3) - (_QWORD)v153 <= 0xDuLL)
        {
          v154 = "</tr></table>>";
          v155 = 14;
          goto LABEL_255;
        }
        qmemcpy(v153, "</tr></table>>", 14);
        v172 = *((_QWORD *)v50 + 4) + 14;
LABEL_301:
        *((_QWORD *)v50 + 4) = v172;
      }
      else
      {
        v50 = (llvm::raw_ostream *)__p;
        v156 = (_WORD *)*((_QWORD *)__p + 4);
        if (*((_QWORD *)__p + 3) - (_QWORD)v156 > 1uLL)
        {
          *v156 = 8829;
          v172 = *((_QWORD *)v50 + 4) + 2;
          goto LABEL_301;
        }
        v154 = "}\"";
        v155 = 2;
LABEL_255:
        v50 = llvm::raw_ostream::write(v50, v154, v155);
      }
      v157 = *((_QWORD *)v50 + 4);
      if ((unint64_t)(*((_QWORD *)v50 + 3) - v157) > 2)
      {
        *(_BYTE *)(v157 + 2) = 10;
        *(_WORD *)v157 = 15197;
        *((_QWORD *)v50 + 4) += 3;
      }
      else
      {
        v50 = llvm::raw_ostream::write(v50, "];\n", 3uLL);
      }
      v158 = (_QWORD *)*((_QWORD *)v54 + 5);
      if (v158 == (_QWORD *)((char *)v54 + 40))
      {
        v168 = 0;
        v161 = 0;
LABEL_281:
        v163 = 0;
        goto LABEL_282;
      }
      if (v158)
        v159 = (uint64_t)(v158 - 3);
      else
        v159 = 0;
      v160 = *(unsigned __int8 *)(v159 + 16);
      if ((v160 - 29) >= 0xB)
        v161 = 0;
      else
        v161 = v159;
      if (v160 != 30)
      {
        v162 = 2;
        v163 = 0;
        v168 = 0;
        switch(*(_BYTE *)(v159 + 16))
        {
          case 0x1D:
          case 0x22:
          case 0x23:
            goto LABEL_282;
          case 0x1E:
            goto LABEL_348;
          case 0x1F:
            v162 = (*(_DWORD *)(v159 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_279;
          case 0x20:
          case 0x26:
            v162 = (*(_DWORD *)(v159 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_279;
          case 0x21:
            goto LABEL_269;
          case 0x24:
            v162 = *(_WORD *)(v159 + 18) & 1;
            goto LABEL_279;
          case 0x25:
            v162 = 1;
            goto LABEL_269;
          case 0x27:
            v162 = *(_DWORD *)(v159 + 80) + 1;
LABEL_279:
            if (!v162)
              goto LABEL_280;
            goto LABEL_269;
          default:
LABEL_280:
            v168 = 0;
            break;
        }
        goto LABEL_281;
      }
      if ((*(_DWORD *)(v159 + 20) & 0x7FFFFFF) == 3)
        v162 = 2;
      else
        v162 = 1;
LABEL_269:
      v163 = 0;
      v164 = 63;
      do
      {
        sub_1C4DB6128((uint64_t)&__p, (unint64_t)v54, v161, v163);
        v165 = v163 + 1;
        v163 = v163 & 0xFFFFFFFF00000000 | (v163 + 1);
        v167 = v164-- != 0;
      }
      while (v162 != v165 && v167);
      v168 = v162;
LABEL_282:
      if (v168 != (_DWORD)v163)
      {
        do
        {
          sub_1C4DB6128((uint64_t)&__p, (unint64_t)v54, v161, v163);
          v169 = v163 + 1;
          v163 = v163 & 0xFFFFFFFF00000000 | (v163 + 1);
        }
        while (v168 != v169);
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
      if (v201 == 1)
      {
        v50 = (llvm::raw_ostream *)__dst.__r_.__value_.__r.__words[2];
        if (__dst.__r_.__value_.__r.__words[2])
          v50 = (llvm::raw_ostream *)MEMORY[0x1CAA32F9C](__dst.__r_.__value_.__r.__words[2], 0x1000C8077774924);
      }
      if (SHIBYTE(v194) < 0)
        operator delete(v193[0]);
      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v195.__r_.__value_.__l.__data_);
      v53 = *(_QWORD *)(v53 + 8);
      if (v53 == v179)
      {
        v33 = (llvm::raw_ostream *)__p;
        break;
      }
    }
  }
  v173 = (_WORD *)*((_QWORD *)v33 + 4);
  if (*((_QWORD *)v33 + 3) - (_QWORD)v173 > 1uLL)
  {
    *v173 = 2685;
    *((_QWORD *)v33 + 4) += 2;
  }
  else
  {
    v50 = llvm::raw_ostream::write(v33, "}\n", 2uLL);
  }
  if (v186 < 0)
    operator delete(v184);
  v174 = (llvm::raw_ostream *)llvm::errs(v50);
  v175 = (_QWORD *)*((_QWORD *)v174 + 4);
  if (*((_QWORD *)v174 + 3) - (_QWORD)v175 > 7uLL)
  {
    *v175 = 0xA202E656E6F6420;
    *((_QWORD *)v174 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v174, " done. \n", 8uLL);
  }
  __dst = v180;
  memset(&v180, 0, sizeof(v180));
LABEL_321:
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v181);
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v180.__r_.__value_.__l.__data_);
  v176 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v177 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  else
    v177 = __dst.__r_.__value_.__l.__size_;
  if (v177)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v178 = &__dst;
    else
      v178 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    llvm::DisplayGraph(v178, v177, 0, a5);
    v176 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  if (v176 < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

uint64_t llvm::BlockFrequencyInfo::getBPI(llvm::BlockFrequencyInfo *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)(*(_QWORD *)this + 112);
  else
    return 0;
}

llvm::raw_ostream *llvm::BlockFrequencyInfo::printBlockFreq(uint64_t *a1, llvm::ScaledNumberBase *a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v5;

  v5 = a3;
  v3 = *a1;
  if (v3)
    return llvm::BlockFrequencyInfoImplBase::printBlockFreq(v3, a2, &v5);
  return a2;
}

llvm::raw_ostream *llvm::BlockFrequencyInfo::printBlockFreq(llvm::BlockFrequencyInfo *this, llvm::raw_ostream *a2, const llvm::BasicBlock *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  const llvm::BasicBlock *v10;
  int v11;
  unsigned int v12;
  unint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  int32x2_t ****v17;
  unint64_t v20;
  int32x2_t ****v21;
  int32x2_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int32x2_t *****v27;
  int32x2_t ****v28;
  int v29;
  int v30;
  uint64_t v31;
  llvm::raw_ostream *v32;
  __int16 v33;
  unint64_t v35;
  unint64_t *v36;
  int32x2_t ****v37;
  uint64_t v38;

  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = *(_DWORD *)(v4 + 176);
    if (v5)
    {
      v6 = *(_QWORD *)(v4 + 160);
      v7 = v5 - 1;
      v8 = (v5 - 1) & ((a3 >> 4) ^ (a3 >> 9));
      v9 = v6 + 56 * v8;
      v10 = *(const llvm::BasicBlock **)v9;
      if (*(const llvm::BasicBlock **)v9 == a3)
      {
LABEL_7:
        v13 = 0;
        v14 = *(_DWORD *)(v9 + 8);
        v15 = *(_QWORD *)(v9 + 24);
        v16 = v15 & 6;
        v35 = v16;
        v36 = 0;
        v17 = *(int32x2_t *****)(v9 + 40);
        v37 = v17;
        if (v17 != (int32x2_t ****)-8192 && v17 != (int32x2_t ****)-4096 && v17 != 0)
        {
          v36 = *(unint64_t **)(v15 & 0xFFFFFFFFFFFFFFF8);
          v13 = v36;
          *(_QWORD *)(v15 & 0xFFFFFFFFFFFFFFF8) = &v35;
          v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
          v35 = v15 & 0xFFFFFFFFFFFFFFFELL;
          if (v13)
            *v13 = *v13 & 7 | (unint64_t)&v36;
        }
        v38 = *(_QWORD *)(v9 + 48);
        if (v17 != (int32x2_t ****)-8192 && v17 != (int32x2_t ****)-4096 && v17 != 0)
        {
          v20 = v16 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v16 & 0xFFFFFFFFFFFFFFF8) = v13;
          if (v36)
          {
            *v36 = *v36 & 7 | v20;
          }
          else
          {
            v21 = v37;
            v22 = ***v37;
            v23 = (unint64_t)v22[303];
            if (v23 <= v20)
            {
              v24 = v22[305].u32[0];
              if (v23 + 16 * v24 > v20)
              {
                v25 = v24 - 1;
                LODWORD(v26) = v25 & ((v37 >> 4) ^ (v37 >> 9));
                v27 = (int32x2_t *****)(v23 + 16 * v26);
                v28 = *v27;
                if (v37 == *v27)
                {
LABEL_27:
                  *v27 = (int32x2_t ****)-8192;
                  v22[304] = vadd_s32(v22[304], (int32x2_t)0x1FFFFFFFFLL);
                  v21 = v37;
                }
                else
                {
                  v29 = 1;
                  while (v28 != (int32x2_t ****)-4096)
                  {
                    v30 = v26 + v29++;
                    v26 = v30 & v25;
                    v28 = *(int32x2_t *****)(v23 + 16 * v26);
                    if (v37 == v28)
                    {
                      v27 = (int32x2_t *****)(v23 + 16 * v26);
                      goto LABEL_27;
                    }
                  }
                }
                *((_BYTE *)v21 + 17) &= ~1u;
              }
            }
          }
        }
        if (v14 != -1)
        {
          v31 = *(_QWORD *)(v4 + 8) + 24 * v14;
          v32 = *(llvm::raw_ostream **)v31;
          v33 = *(_WORD *)(v31 + 8);
          return llvm::ScaledNumberBase::print(a2, v32, v33, 64, 0xAu);
        }
      }
      else
      {
        v11 = 1;
        while (v10 != (const llvm::BasicBlock *)-4096)
        {
          v12 = v8 + v11++;
          v8 = v12 & v7;
          v9 = v6 + 56 * (v12 & v7);
          v10 = *(const llvm::BasicBlock **)v9;
          if (*(const llvm::BasicBlock **)v9 == a3)
            goto LABEL_7;
        }
      }
    }
    v32 = 0;
    v33 = 0;
    return llvm::ScaledNumberBase::print(a2, v32, v33, 64, 0xAu);
  }
  return a2;
}

llvm *llvm::BlockFrequencyInfo::verifyMatch(llvm *this, llvm::BlockFrequencyInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t ***v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t ***v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  llvm *v40;
  llvm *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ****v47;
  uint64_t ***v48;
  int v49;
  int v50;
  unint64_t *v51;
  size_t v52;
  const void *v53;
  unint64_t v54;
  void **p_dst;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  size_t v59;
  _BYTE *v60;
  _DWORD *v61;
  _BYTE *v62;
  llvm::raw_ostream *v63;
  const char *v64;
  size_t v65;
  int v66;
  unsigned int v67;
  llvm *v68;
  llvm *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t ****v75;
  uint64_t ***v76;
  int v77;
  int v78;
  unint64_t *v79;
  size_t v80;
  const void *v81;
  unint64_t v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  size_t v87;
  _DWORD *v88;
  void *v89;
  llvm *v90;
  llvm *v91;
  void *v92;
  _DWORD *v93;
  _BYTE *v94;
  llvm *v95;
  uint64_t v96;
  llvm *v97;
  llvm *v98;
  llvm *v99;
  uint64_t v100;
  llvm *v101;
  uint64_t v102;
  _QWORD *v103;
  void **__dst;
  size_t v105;
  int64_t v106;
  uint64_t ***v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;

  v2 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3 = *(_QWORD *)a2;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v4 = *(_QWORD *)(v2 + 160);
    v5 = *(unsigned int *)(v2 + 176);
    v6 = v4 + 56 * v5;
    if (*(_DWORD *)(v2 + 168))
    {
      if ((_DWORD)v5)
      {
        v7 = 56 * v5;
        v8 = *(_QWORD *)(v2 + 160);
        while ((*(_QWORD *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v8 += 56;
          v7 -= 56;
          if (!v7)
            goto LABEL_7;
        }
      }
      else
      {
        v8 = *(_QWORD *)(v2 + 160);
      }
    }
    else
    {
LABEL_7:
      v8 = v4 + 56 * v5;
    }
    v9 = v4 + 56 * v5;
LABEL_10:
    while (v8 != v9)
    {
      __dst = 0;
      __dst = *(void ***)v8;
      if (__dst)
      {
        this = (llvm *)sub_1C4DB6BEC((uint64_t)&v111, (uint64_t *)&__dst);
        *((_DWORD *)this + 2) = *(_DWORD *)(v8 + 8);
      }
      v10 = v8 + 56;
      v8 = v6;
      if (v10 != v6)
      {
        v8 = v10;
        while ((*(_QWORD *)v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v8 += 56;
          if (v8 == v6)
          {
            v8 = v6;
            goto LABEL_10;
          }
        }
      }
    }
    v11 = *(_QWORD *)(v3 + 160);
    v12 = *(unsigned int *)(v3 + 176);
    v13 = v11 + 56 * v12;
    if (*(_DWORD *)(v3 + 168))
    {
      if ((_DWORD)v12)
      {
        v14 = 56 * v12;
        v15 = *(_QWORD *)(v3 + 160);
        while ((*(_QWORD *)v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v15 += 56;
          v14 -= 56;
          if (!v14)
            goto LABEL_23;
        }
      }
      else
      {
        v15 = *(_QWORD *)(v3 + 160);
      }
    }
    else
    {
LABEL_23:
      v15 = v11 + 56 * v12;
    }
    v16 = v11 + 56 * v12;
    v103 = (_QWORD *)v2;
    if (v15 == v16)
    {
      v19 = v112;
      if (!(_DWORD)v112)
      {
        v20 = v111;
        v21 = v113;
        v22 = v111 + 16 * v113;
        goto LABEL_43;
      }
      v18 = 0;
    }
    else
    {
      do
      {
        __dst = 0;
        __dst = *(void ***)v15;
        if (__dst)
        {
          this = (llvm *)sub_1C4DB6BEC((uint64_t)&v108, (uint64_t *)&__dst);
          *((_DWORD *)this + 2) = *(_DWORD *)(v15 + 8);
        }
        v17 = v15 + 56;
        v15 = v13;
        if (v17 != v13)
        {
          v15 = v17;
          while ((*(_QWORD *)v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v15 += 56;
            if (v15 == v13)
            {
              v15 = v13;
              break;
            }
          }
        }
      }
      while (v15 != v16);
      v18 = v109;
      v19 = v112;
      if ((_DWORD)v112 == (_DWORD)v109)
      {
        v20 = v111;
        v21 = v113;
        v22 = v111 + 16 * v113;
        if ((_DWORD)v109)
        {
          if (v113)
          {
            v23 = 0;
            while ((*(_QWORD *)(v111 + v23) | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v23 += 16;
              if (16 * v113 == v23)
                goto LABEL_43;
            }
            v24 = v111 + v23;
          }
          else
          {
            v24 = v111;
          }
          goto LABEL_44;
        }
LABEL_43:
        v24 = v22;
LABEL_44:
        v25 = v20 + 16 * v21;
        if (v24 == v25)
          goto LABEL_133;
        v26 = 1;
        v102 = v3;
        while (1)
        {
          v107 = 0;
          v27 = *(uint64_t ****)v24;
          v107 = *(uint64_t ****)v24;
          v28 = *(unsigned int *)(v24 + 8);
          if (!v110)
            goto LABEL_95;
          v29 = (v27 >> 4) ^ (v27 >> 9);
          v30 = (v110 - 1) & v29;
          v31 = *(uint64_t ****)(v108 + 16 * v30);
          if (v27 != v31)
            break;
LABEL_48:
          this = (llvm *)sub_1C4DB6BEC((uint64_t)&v108, (uint64_t *)&v107);
          v32 = v103[1] + 24 * v28;
          v35 = *(_QWORD *)(v32 + 16);
          v34 = (unint64_t *)(v32 + 16);
          v33 = v35;
          v36 = *(_QWORD *)(v3 + 8) + 24 * *((unsigned int *)this + 2);
          v38 = *(_QWORD *)(v36 + 16);
          v37 = (unint64_t *)(v36 + 16);
          if (v33 != v38)
          {
            v40 = llvm::dbgs(this);
            v41 = v40;
            v42 = (void *)*((_QWORD *)v40 + 4);
            if (*((_QWORD *)v40 + 3) - (_QWORD)v42 > 0xEuLL)
            {
              qmemcpy(v42, "Freq mismatch: ", 15);
              *((_QWORD *)v40 + 4) += 15;
            }
            else
            {
              llvm::raw_ostream::write(v40, "Freq mismatch: ", 0xFuLL);
            }
            if ((*((_BYTE *)v27 + 23) & 0x10) == 0)
            {
              v52 = 0;
              HIBYTE(v106) = 0;
              p_dst = (void **)&__dst;
              goto LABEL_74;
            }
            v43 = ***v27;
            v44 = *(_QWORD *)(v43 + 152);
            v45 = *(unsigned int *)(v43 + 168);
            if (!(_DWORD)v45)
              goto LABEL_65;
            LODWORD(v46) = (v45 - 1) & v29;
            v47 = (uint64_t ****)(v44 + 16 * v46);
            v48 = *v47;
            if (*v47 != v27)
            {
              v49 = 1;
              while (v48 != (uint64_t ***)-4096)
              {
                v50 = v46 + v49++;
                v46 = v50 & (v45 - 1);
                v48 = *(uint64_t ****)(v44 + 16 * v46);
                if (v48 == v27)
                {
                  v47 = (uint64_t ****)(v44 + 16 * v46);
                  goto LABEL_66;
                }
              }
LABEL_65:
              v47 = (uint64_t ****)(v44 + 16 * v45);
            }
LABEL_66:
            v51 = (unint64_t *)v47[1];
            v54 = *v51;
            v53 = v51 + 2;
            v52 = v54;
            if (v54 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_154;
            if (v52 >= 0x17)
            {
              v56 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v52 | 7) != 0x17)
                v56 = v52 | 7;
              v57 = v56 + 1;
              p_dst = (void **)operator new(v56 + 1);
              v105 = v52;
              v106 = v57 | 0x8000000000000000;
              __dst = p_dst;
            }
            else
            {
              HIBYTE(v106) = v52;
              p_dst = (void **)&__dst;
              if (!v52)
              {
LABEL_74:
                *((_BYTE *)p_dst + v52) = 0;
                if (v106 >= 0)
                  v58 = (const char *)&__dst;
                else
                  v58 = (const char *)__dst;
                if (v106 >= 0)
                  v59 = HIBYTE(v106) & 0x7F;
                else
                  v59 = v105;
                llvm::raw_ostream::write(v41, v58, v59);
                v60 = (_BYTE *)*((_QWORD *)v41 + 4);
                if (*((_BYTE **)v41 + 3) == v60)
                {
                  llvm::raw_ostream::write(v41, " ", 1uLL);
                }
                else
                {
                  *v60 = 32;
                  ++*((_QWORD *)v41 + 4);
                }
                v3 = v102;
                sub_1C5E21910(v41, *v34, 0, 0, 0);
                v61 = (_DWORD *)*((_QWORD *)v41 + 4);
                if (*((_QWORD *)v41 + 3) - (_QWORD)v61 > 3uLL)
                {
                  *v61 = 544437792;
                  *((_QWORD *)v41 + 4) += 4;
                }
                else
                {
                  llvm::raw_ostream::write(v41, " vs ", 4uLL);
                }
                this = sub_1C5E21910(v41, *v37, 0, 0, 0);
                v62 = (_BYTE *)*((_QWORD *)v41 + 4);
                if (*((_BYTE **)v41 + 3) == v62)
                {
                  v63 = v41;
                  v64 = "\n";
                  v65 = 1;
                  goto LABEL_124;
                }
                *v62 = 10;
                ++*((_QWORD *)v41 + 4);
LABEL_125:
                if (SHIBYTE(v106) < 0)
                  operator delete(__dst);
                v26 = 0;
                goto LABEL_49;
              }
            }
            memmove(p_dst, v53, v52);
            goto LABEL_74;
          }
LABEL_49:
          v39 = v24 + 16;
          v24 = v22;
          if (v39 != v22)
          {
            v24 = v39;
            while ((*(_QWORD *)v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v24 += 16;
              if (v24 == v22)
              {
                v24 = v22;
                break;
              }
            }
          }
          if (v24 == v25)
          {
            if ((v26 & 1) != 0)
              goto LABEL_133;
            goto LABEL_144;
          }
        }
        v66 = 1;
        while (v31 != (uint64_t ***)-4096)
        {
          v67 = v30 + v66++;
          v30 = v67 & (v110 - 1);
          v31 = *(uint64_t ****)(v108 + 16 * v30);
          if (v27 == v31)
            goto LABEL_48;
        }
LABEL_95:
        v68 = llvm::dbgs(this);
        v69 = v68;
        v70 = *((_QWORD *)v68 + 4);
        if ((unint64_t)(*((_QWORD *)v68 + 3) - v70) > 5)
        {
          *(_WORD *)(v70 + 4) = 8299;
          *(_DWORD *)v70 = 1668246594;
          *((_QWORD *)v68 + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(v68, "Block ", 6uLL);
        }
        if ((*((_BYTE *)v27 + 23) & 0x10) == 0)
        {
          v80 = 0;
          HIBYTE(v106) = 0;
          v83 = (void **)&__dst;
LABEL_114:
          *((_BYTE *)v83 + v80) = 0;
          if (v106 >= 0)
            v86 = (const char *)&__dst;
          else
            v86 = (const char *)__dst;
          if (v106 >= 0)
            v87 = HIBYTE(v106) & 0x7F;
          else
            v87 = v105;
          llvm::raw_ostream::write(v69, v86, v87);
          v88 = (_DWORD *)*((_QWORD *)v69 + 4);
          if (*((_QWORD *)v69 + 3) - (_QWORD)v88 > 6uLL)
          {
            *(_DWORD *)((char *)v88 + 3) = 544761188;
            *v88 = 1684957472;
            *((_QWORD *)v69 + 4) += 7;
          }
          else
          {
            llvm::raw_ostream::write(v69, " index ", 7uLL);
          }
          this = sub_1C5E21910(v69, v28, 0, 0, 0);
          v89 = (void *)*((_QWORD *)v69 + 4);
          if (*((_QWORD *)v69 + 3) - (_QWORD)v89 > 0x19uLL)
          {
            qmemcpy(v89, " does not exist in Other.\n", 26);
            *((_QWORD *)v69 + 4) += 26;
          }
          else
          {
            v63 = v69;
            v64 = " does not exist in Other.\n";
            v65 = 26;
LABEL_124:
            this = llvm::raw_ostream::write(v63, v64, v65);
          }
          goto LABEL_125;
        }
        v71 = ***v27;
        v72 = *(_QWORD *)(v71 + 152);
        v73 = *(unsigned int *)(v71 + 168);
        if ((_DWORD)v73)
        {
          LODWORD(v74) = (v73 - 1) & ((v27 >> 4) ^ (v27 >> 9));
          v75 = (uint64_t ****)(v72 + 16 * v74);
          v76 = *v75;
          if (*v75 == v27)
            goto LABEL_105;
          v77 = 1;
          while (v76 != (uint64_t ***)-4096)
          {
            v78 = v74 + v77++;
            v74 = v78 & (v73 - 1);
            v76 = *(uint64_t ****)(v72 + 16 * v74);
            if (v76 == v27)
            {
              v75 = (uint64_t ****)(v72 + 16 * v74);
              goto LABEL_105;
            }
          }
        }
        v75 = (uint64_t ****)(v72 + 16 * v73);
LABEL_105:
        v79 = (unint64_t *)v75[1];
        v82 = *v79;
        v81 = v79 + 2;
        v80 = v82;
        if (v82 > 0x7FFFFFFFFFFFFFF7)
LABEL_154:
          abort();
        if (v80 >= 0x17)
        {
          v84 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v80 | 7) != 0x17)
            v84 = v80 | 7;
          v85 = v84 + 1;
          v83 = (void **)operator new(v84 + 1);
          v105 = v80;
          v106 = v85 | 0x8000000000000000;
          __dst = v83;
        }
        else
        {
          HIBYTE(v106) = v80;
          v83 = (void **)&__dst;
          if (!v80)
            goto LABEL_113;
        }
        memmove(v83, v81, v80);
LABEL_113:
        v3 = v102;
        goto LABEL_114;
      }
    }
    v90 = llvm::dbgs(this);
    v91 = v90;
    v92 = (void *)*((_QWORD *)v90 + 4);
    if (*((_QWORD *)v90 + 3) - (_QWORD)v92 > 0x1AuLL)
    {
      qmemcpy(v92, "Number of blocks mismatch: ", 27);
      *((_QWORD *)v90 + 4) += 27;
    }
    else
    {
      llvm::raw_ostream::write(v90, "Number of blocks mismatch: ", 0x1BuLL);
    }
    sub_1C5E21910(v91, v19, 0, 0, 0);
    v93 = (_DWORD *)*((_QWORD *)v91 + 4);
    if (*((_QWORD *)v91 + 3) - (_QWORD)v93 > 3uLL)
    {
      *v93 = 544437792;
      *((_QWORD *)v91 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v91, " vs ", 4uLL);
    }
    this = sub_1C5E21910(v91, v18, 0, 0, 0);
    v94 = (_BYTE *)*((_QWORD *)v91 + 4);
    if (*((_BYTE **)v91 + 3) == v94)
    {
      this = llvm::raw_ostream::write(v91, "\n", 1uLL);
    }
    else
    {
      *v94 = 10;
      ++*((_QWORD *)v91 + 4);
    }
LABEL_144:
    v95 = llvm::dbgs(this);
    v96 = *((_QWORD *)v95 + 4);
    if ((unint64_t)(*((_QWORD *)v95 + 3) - v96) > 4)
    {
      *(_BYTE *)(v96 + 4) = 10;
      *(_DWORD *)v96 = 1936287828;
      *((_QWORD *)v95 + 4) += 5;
    }
    else
    {
      v95 = llvm::raw_ostream::write(v95, "This\n", 5uLL);
    }
    v97 = llvm::dbgs(v95);
    v98 = (llvm *)(*(uint64_t (**)(_QWORD *, llvm *))(*v103 + 24))(v103, v97);
    v99 = llvm::dbgs(v98);
    v100 = *((_QWORD *)v99 + 4);
    if ((unint64_t)(*((_QWORD *)v99 + 3) - v100) > 5)
    {
      *(_WORD *)(v100 + 4) = 2674;
      *(_DWORD *)v100 = 1701344335;
      *((_QWORD *)v99 + 4) += 6;
    }
    else
    {
      v99 = llvm::raw_ostream::write(v99, "Other\n", 6uLL);
    }
    v101 = llvm::dbgs(v99);
    (*(void (**)(uint64_t, llvm *))(*(_QWORD *)v3 + 24))(v3, v101);
LABEL_133:
    MEMORY[0x1CAA32FB4](v108, 8);
    return (llvm *)MEMORY[0x1CAA32FB4](v111, 8);
  }
  return this;
}

uint64_t sub_1C4DAFFD8(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeBranchProbabilityInfoWrapperPassPass(a1, a2);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Block Frequency Analysis";
  *(_QWORD *)(v3 + 8) = 24;
  *(_QWORD *)(v3 + 16) = "block-freq";
  *(_QWORD *)(v3 + 24) = 10;
  *(_QWORD *)(v3 + 32) = &llvm::BlockFrequencyInfoWrapperPass::ID;
  *(_WORD *)(v3 + 40) = 257;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = llvm::callDefaultCtor<llvm::BlockFrequencyInfoWrapperPass>;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

void llvm::BlockFrequencyInfoWrapperPass::~BlockFrequencyInfoWrapperPass(llvm::BlockFrequencyInfoWrapperPass *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E8134898;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::Pass::~Pass(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E8134898;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::Pass::~Pass(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E8134898;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::BlockFrequencyInfoWrapperPass::releaseMemory(llvm::BlockFrequencyInfoWrapperPass *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::BlockFrequencyInfoWrapperPass::runOnFunction(llvm::BlockFrequencyInfoWrapperPass *this, llvm::Function *a2)
{
  void **v4;
  void *v5;
  void **v6;
  void *v7;

  v4 = (void **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::BranchProbabilityInfoWrapperPass::ID);
  (*(void (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::BranchProbabilityInfoWrapperPass::ID);
  v6 = (void **)**((_QWORD **)this + 1);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::LoopInfoWrapperPass::ID);
  (*(void (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::LoopInfoWrapperPass::ID);
  llvm::BlockFrequencyInfo::calculate((uint64_t **)this + 4, a2);
  return 0;
}

void llvm::BlockFrequencyAnalysis::run(llvm::Value *a1@<X1>, uint64_t a2@<X2>, uint64_t **a3@<X8>)
{
  *a3 = 0;
  llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BranchProbabilityAnalysis::Key, (uint64_t)a1);
  llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, (uint64_t)a1);
  llvm::BlockFrequencyInfo::calculate(a3, a1);
}

_QWORD *sub_1C4DB01FC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = &unk_1E8134938;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &unk_1E81349A0;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C4DB0284(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C4DB0298(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = &unk_1E8134A30;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &unk_1E8134A98;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C4DB0320(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void sub_1C4DB0334(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E8134B28;
  sub_1C4DB1198((uint64_t)(a1 + 20));
  MEMORY[0x1CAA32FB4](a1[20], 8);
  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  sub_1C4DB1064(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4DB0394@<X0>(_QWORD *result@<X0>, unsigned int *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t ***v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ****v9;
  uint64_t ***v10;
  int v11;
  int v12;
  unint64_t *v13;
  size_t v14;
  const void *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;

  v4 = *(uint64_t ****)(result[17] + 8 * *a2);
  if ((*((_BYTE *)v4 + 23) & 0x10) == 0)
  {
    v14 = 0;
    a3[23] = 0;
    goto LABEL_17;
  }
  v5 = ***v4;
  v6 = *(_QWORD *)(v5 + 152);
  v7 = *(unsigned int *)(v5 + 168);
  if (!(_DWORD)v7)
    goto LABEL_8;
  LODWORD(v8) = (v7 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  v9 = (uint64_t ****)(v6 + 16 * v8);
  v10 = *v9;
  if (*v9 != v4)
  {
    v11 = 1;
    while (v10 != (uint64_t ***)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(uint64_t ****)(v6 + 16 * v8);
      if (v10 == v4)
      {
        v9 = (uint64_t ****)(v6 + 16 * v8);
        goto LABEL_9;
      }
    }
LABEL_8:
    v9 = (uint64_t ****)(v6 + 16 * v7);
  }
LABEL_9:
  v13 = (unint64_t *)v9[1];
  v16 = *v13;
  v15 = v13 + 2;
  v14 = v16;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    *((_QWORD *)a3 + 1) = v14;
    *((_QWORD *)a3 + 2) = v18 | 0x8000000000000000;
    *(_QWORD *)a3 = v19;
    a3 = v19;
  }
  else
  {
    a3[23] = v14;
    if (!v14)
      goto LABEL_17;
  }
  result = memmove(a3, v15, v14);
LABEL_17:
  a3[v14] = 0;
  return result;
}

llvm::raw_ostream *sub_1C4DB04B4(uint64_t a1, llvm::raw_ostream *this)
{
  void *v4;
  uint64_t ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ****v10;
  uint64_t ***v11;
  int v12;
  int v13;
  size_t *v14;
  const void *v15;
  size_t v16;
  size_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  llvm::BasicBlock *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::BasicBlock **v29;
  llvm::BasicBlock *v30;
  int v31;
  int v32;
  _QWORD **v33;
  unint64_t *v34;
  const void *v35;
  size_t v36;
  unint64_t v37;
  void **p_dst;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  const char *v43;
  size_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  llvm::BasicBlock *v51;
  int v52;
  unsigned int v53;
  unint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  int32x2_t ****v57;
  uint64_t v59;
  unint64_t v60;
  int32x2_t ****v61;
  int32x2_t *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int32x2_t *****v67;
  int32x2_t ****v68;
  int v69;
  int v70;
  llvm::raw_ostream *v71;
  uint64_t v72;
  uint64_t v73;
  llvm::raw_ostream *v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  llvm::BasicBlock *v81;
  int v82;
  unsigned int v83;
  unint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  int32x2_t ****v87;
  uint64_t v89;
  unint64_t v90;
  int32x2_t ****v91;
  int32x2_t *v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  int32x2_t *****v97;
  int32x2_t ****v98;
  int v99;
  int v100;
  unint64_t v101;
  uint64_t ***v102;
  int v103;
  uint64_t v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  llvm::BasicBlock *v108;
  int v109;
  unsigned int v110;
  unint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  int32x2_t ****v114;
  uint64_t v116;
  unint64_t v117;
  int32x2_t ****v118;
  int32x2_t *v119;
  unint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  int32x2_t *****v124;
  int32x2_t ****v125;
  int v126;
  int v127;
  uint64_t v128;
  uint64_t *ProfileCountFromFreq;
  char v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t IrrLoopHeaderWeight;
  char v134;
  unint64_t v135;
  void *v136;
  _BYTE *v137;
  _BYTE *v138;
  unsigned int v140;
  void **__dst;
  uint64_t (**v142)(llvm::CallbackVH *__hidden);
  int64_t v143;
  unint64_t *v144;
  int32x2_t ****v145;
  uint64_t v146;

  if (!*(_QWORD *)(a1 + 128))
    return this;
  v4 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0x15uLL)
  {
    qmemcpy(v4, "block-frequency-info: ", 22);
    *((_QWORD *)this + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(this, "block-frequency-info: ", 0x16uLL);
  }
  v5 = *(uint64_t ****)(a1 + 128);
  if ((*((_BYTE *)v5 + 23) & 0x10) == 0)
    goto LABEL_14;
  v6 = ***v5;
  v7 = *(_QWORD *)(v6 + 152);
  v8 = *(unsigned int *)(v6 + 168);
  if (!(_DWORD)v8)
    goto LABEL_11;
  LODWORD(v9) = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  v10 = (uint64_t ****)(v7 + 16 * v9);
  v11 = *v10;
  if (*v10 != v5)
  {
    v12 = 1;
    while (v11 != (uint64_t ***)-4096)
    {
      v13 = v9 + v12++;
      v9 = v13 & (v8 - 1);
      v11 = *(uint64_t ****)(v7 + 16 * v9);
      if (v11 == v5)
      {
        v10 = (uint64_t ****)(v7 + 16 * v9);
        goto LABEL_12;
      }
    }
LABEL_11:
    v10 = (uint64_t ****)(v7 + 16 * v8);
  }
LABEL_12:
  v14 = (size_t *)v10[1];
  v17 = *v14;
  v15 = v14 + 2;
  v16 = v17;
  v18 = (_BYTE *)*((_QWORD *)this + 4);
  if (v17 <= *((_QWORD *)this + 3) - (_QWORD)v18)
  {
    if (v16)
    {
      memcpy(v18, v15, v16);
      v18 = (_BYTE *)(*((_QWORD *)this + 4) + v16);
      *((_QWORD *)this + 4) = v18;
    }
    goto LABEL_17;
  }
  llvm::raw_ostream::write(this, (const char *)v15, v16);
LABEL_14:
  v18 = (_BYTE *)*((_QWORD *)this + 4);
LABEL_17:
  if (*((_BYTE **)this + 3) == v18)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *v18 = 10;
    ++*((_QWORD *)this + 4);
  }
  v19 = *(_QWORD *)(a1 + 128);
  v20 = v19 + 72;
  v21 = *(_QWORD *)(v19 + 80);
  if (v21 != v19 + 72)
  {
    v22 = (unint64_t)&v144;
    while (1)
    {
      v23 = v21 ? (llvm::BasicBlock *)(v21 - 24) : 0;
      v24 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v24) > 2)
      {
        *(_BYTE *)(v24 + 2) = 32;
        *(_WORD *)v24 = 11552;
        *((_QWORD *)this + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(this, " - ", 3uLL);
      }
      v140 = v23 >> 4;
      if ((*((_BYTE *)v23 + 23) & 0x10) != 0)
        break;
      v36 = 0;
      HIBYTE(v143) = 0;
      p_dst = (void **)&__dst;
LABEL_43:
      *((_BYTE *)p_dst + v36) = 0;
      if (v143 >= 0)
        v43 = (const char *)&__dst;
      else
        v43 = (const char *)__dst;
      if (v143 >= 0)
        v44 = HIBYTE(v143) & 0x7F;
      else
        v44 = (size_t)v142;
      llvm::raw_ostream::write(this, v43, v44);
      v45 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v45) > 9)
      {
        *(_WORD *)(v45 + 8) = 8253;
        *(_QWORD *)v45 = *(_QWORD *)": float = ";
        *((_QWORD *)this + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(this, ": float = ", 0xAuLL);
      }
      if (SHIBYTE(v143) < 0)
        operator delete(__dst);
      v46 = *(_DWORD *)(a1 + 176);
      if (!v46)
        goto LABEL_67;
      v47 = *(_QWORD *)(a1 + 160);
      v48 = v46 - 1;
      v49 = v48 & (v140 ^ (v23 >> 9));
      v50 = v47 + 56 * v49;
      v51 = *(llvm::BasicBlock **)v50;
      if (*(llvm::BasicBlock **)v50 != v23)
      {
        v52 = 1;
        while (v51 != (llvm::BasicBlock *)-4096)
        {
          v53 = v49 + v52++;
          v49 = v53 & v48;
          v50 = v47 + 56 * (v53 & v48);
          v51 = *(llvm::BasicBlock **)v50;
          if (*(llvm::BasicBlock **)v50 == v23)
            goto LABEL_58;
        }
LABEL_67:
        v54 = 0;
        v57 = 0;
        LODWORD(__dst) = -1;
        v146 = 0;
        v143 = 2;
        v55 = 0xFFFFFFFFLL;
        *(_QWORD *)v22 = 0;
        *(_QWORD *)(v22 + 8) = 0;
        goto LABEL_68;
      }
LABEL_58:
      v54 = 0;
      v55 = *(unsigned int *)(v50 + 8);
      LODWORD(__dst) = *(_DWORD *)(v50 + 8);
      v56 = *(_QWORD *)(v50 + 24);
      v143 = v56 & 6;
      v144 = 0;
      v57 = *(int32x2_t *****)(v50 + 40);
      v145 = v57;
      if (v57 != (int32x2_t ****)-8192 && v57 != (int32x2_t ****)-4096 && v57 != 0)
      {
        v144 = *(unint64_t **)(v56 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v56 & 0xFFFFFFFFFFFFFFF8) = &v143;
        v143 = v56 & 0xFFFFFFFFFFFFFFFELL;
        v54 = v144;
        if (v144)
          *v144 = *v144 & 7 | v22;
        v57 = v145;
      }
      v59 = *(_QWORD *)(v50 + 48);
      v142 = &off_1E8134B58;
      v146 = v59;
LABEL_68:
      if (v57 != (int32x2_t ****)-8192 && v57 != (int32x2_t ****)-4096 && v57)
      {
        v60 = v143 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v143 & 0xFFFFFFFFFFFFFFF8) = v54;
        if (v144)
        {
          *v144 = *v144 & 7 | v60;
        }
        else
        {
          v61 = v145;
          v62 = ***v145;
          v63 = (unint64_t)v62[303];
          if (v63 <= v60)
          {
            v64 = v62[305].u32[0];
            if (v63 + 16 * v64 > v60)
            {
              v65 = v64 - 1;
              LODWORD(v66) = v65 & ((v145 >> 4) ^ (v145 >> 9));
              v67 = (int32x2_t *****)(v63 + 16 * v66);
              v68 = *v67;
              if (v145 == *v67)
              {
LABEL_79:
                *v67 = (int32x2_t ****)-8192;
                v62[304] = vadd_s32(v62[304], (int32x2_t)0x1FFFFFFFFLL);
                v61 = v145;
              }
              else
              {
                v69 = 1;
                while (v68 != (int32x2_t ****)-4096)
                {
                  v70 = v66 + v69++;
                  v66 = v70 & v65;
                  v68 = *(int32x2_t *****)(v63 + 16 * v66);
                  if (v145 == v68)
                  {
                    v67 = (int32x2_t *****)(v63 + 16 * v66);
                    goto LABEL_79;
                  }
                }
              }
              *((_BYTE *)v61 + 17) &= ~1u;
            }
          }
        }
      }
      if (v55 == 0xFFFFFFFFLL)
      {
        v71 = 0;
        LOWORD(v72) = 0;
      }
      else
      {
        v73 = *(_QWORD *)(a1 + 8) + 24 * v55;
        v71 = *(llvm::raw_ostream **)v73;
        v72 = *(_QWORD *)(v73 + 8);
      }
      v74 = llvm::ScaledNumberBase::print(this, v71, (__int16)v72, 64, 5u);
      v75 = (_QWORD *)*((_QWORD *)v74 + 4);
      if (*((_QWORD *)v74 + 3) - (_QWORD)v75 > 7uLL)
      {
        *v75 = 0x203D20746E69202CLL;
        *((_QWORD *)v74 + 4) += 8;
      }
      else
      {
        v74 = llvm::raw_ostream::write(v74, ", int = ", 8uLL);
      }
      v76 = *(_DWORD *)(a1 + 176);
      if (!v76)
        goto LABEL_101;
      v77 = *(_QWORD *)(a1 + 160);
      v78 = v76 - 1;
      v79 = v78 & (v140 ^ (v23 >> 9));
      v80 = v77 + 56 * v79;
      v81 = *(llvm::BasicBlock **)v80;
      if (*(llvm::BasicBlock **)v80 != v23)
      {
        v82 = 1;
        while (v81 != (llvm::BasicBlock *)-4096)
        {
          v83 = v79 + v82++;
          v79 = v83 & v78;
          v80 = v77 + 56 * (v83 & v78);
          v81 = *(llvm::BasicBlock **)v80;
          if (*(llvm::BasicBlock **)v80 == v23)
            goto LABEL_92;
        }
LABEL_101:
        v84 = 0;
        v87 = 0;
        LODWORD(__dst) = -1;
        v146 = 0;
        v143 = 2;
        v85 = 0xFFFFFFFFLL;
        *(_QWORD *)v22 = 0;
        *(_QWORD *)(v22 + 8) = 0;
        goto LABEL_102;
      }
LABEL_92:
      v84 = 0;
      v85 = *(unsigned int *)(v80 + 8);
      LODWORD(__dst) = *(_DWORD *)(v80 + 8);
      v86 = *(_QWORD *)(v80 + 24);
      v143 = v86 & 6;
      v144 = 0;
      v87 = *(int32x2_t *****)(v80 + 40);
      v145 = v87;
      if (v87 != (int32x2_t ****)-8192 && v87 != (int32x2_t ****)-4096 && v87 != 0)
      {
        v144 = *(unint64_t **)(v86 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v86 & 0xFFFFFFFFFFFFFFF8) = &v143;
        v143 = v86 & 0xFFFFFFFFFFFFFFFELL;
        v84 = v144;
        if (v144)
          *v144 = *v144 & 7 | v22;
        v87 = v145;
      }
      v89 = *(_QWORD *)(v80 + 48);
      v142 = &off_1E8134B58;
      v146 = v89;
LABEL_102:
      if (v87 != (int32x2_t ****)-8192 && v87 != (int32x2_t ****)-4096 && v87)
      {
        v90 = v143 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v143 & 0xFFFFFFFFFFFFFFF8) = v84;
        if (v144)
        {
          *v144 = *v144 & 7 | v90;
        }
        else
        {
          v91 = v145;
          v92 = ***v145;
          v93 = (unint64_t)v92[303];
          if (v93 <= v90)
          {
            v94 = v92[305].u32[0];
            if (v93 + 16 * v94 > v90)
            {
              v95 = v94 - 1;
              LODWORD(v96) = v95 & ((v145 >> 4) ^ (v145 >> 9));
              v97 = (int32x2_t *****)(v93 + 16 * v96);
              v98 = *v97;
              if (v145 == *v97)
              {
LABEL_113:
                *v97 = (int32x2_t ****)-8192;
                v92[304] = vadd_s32(v92[304], (int32x2_t)0x1FFFFFFFFLL);
                v91 = v145;
              }
              else
              {
                v99 = 1;
                while (v98 != (int32x2_t ****)-4096)
                {
                  v100 = v96 + v99++;
                  v96 = v100 & v95;
                  v98 = *(int32x2_t *****)(v93 + 16 * v96);
                  if (v145 == v98)
                  {
                    v97 = (int32x2_t *****)(v93 + 16 * v96);
                    goto LABEL_113;
                  }
                }
              }
              *((_BYTE *)v91 + 17) &= ~1u;
            }
          }
        }
      }
      if (v85 == 0xFFFFFFFFLL)
        v101 = 0;
      else
        v101 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * v85 + 16);
      sub_1C5E21910(v74, v101, 0, 0, 0);
      v102 = *(uint64_t ****)(a1 + 128);
      v103 = *(_DWORD *)(a1 + 176);
      if (v103)
      {
        v104 = *(_QWORD *)(a1 + 160);
        v105 = v103 - 1;
        v106 = v105 & (v140 ^ (v23 >> 9));
        v107 = v104 + 56 * v106;
        v108 = *(llvm::BasicBlock **)v107;
        if (*(llvm::BasicBlock **)v107 == v23)
        {
LABEL_123:
          v111 = 0;
          v112 = *(unsigned int *)(v107 + 8);
          LODWORD(__dst) = *(_DWORD *)(v107 + 8);
          v113 = *(_QWORD *)(v107 + 24);
          v143 = v113 & 6;
          v144 = 0;
          v114 = *(int32x2_t *****)(v107 + 40);
          v145 = v114;
          if (v114 != (int32x2_t ****)-8192 && v114 != (int32x2_t ****)-4096 && v114 != 0)
          {
            v144 = *(unint64_t **)(v113 & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)(v113 & 0xFFFFFFFFFFFFFFF8) = &v143;
            v143 = v113 & 0xFFFFFFFFFFFFFFFELL;
            v111 = v144;
            if (v144)
              *v144 = *v144 & 7 | v22;
            v114 = v145;
          }
          v116 = *(_QWORD *)(v107 + 48);
          v142 = &off_1E8134B58;
          v146 = v116;
          goto LABEL_133;
        }
        v109 = 1;
        while (v108 != (llvm::BasicBlock *)-4096)
        {
          v110 = v106 + v109++;
          v106 = v110 & v105;
          v107 = v104 + 56 * (v110 & v105);
          v108 = *(llvm::BasicBlock **)v107;
          if (*(llvm::BasicBlock **)v107 == v23)
            goto LABEL_123;
        }
      }
      v111 = 0;
      v114 = 0;
      LODWORD(__dst) = -1;
      v146 = 0;
      v143 = 2;
      v112 = 0xFFFFFFFFLL;
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = 0;
LABEL_133:
      if (v114 != (int32x2_t ****)-8192 && v114 != (int32x2_t ****)-4096 && v114)
      {
        v117 = v143 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v143 & 0xFFFFFFFFFFFFFFF8) = v111;
        if (v144)
        {
          *v144 = *v144 & 7 | v117;
        }
        else
        {
          v118 = v145;
          v119 = ***v145;
          v120 = (unint64_t)v119[303];
          if (v120 <= v117)
          {
            v121 = v119[305].u32[0];
            if (v120 + 16 * v121 > v117)
            {
              v122 = v121 - 1;
              LODWORD(v123) = v122 & ((v145 >> 4) ^ (v145 >> 9));
              v124 = (int32x2_t *****)(v120 + 16 * v123);
              v125 = *v124;
              if (v145 == *v124)
              {
LABEL_144:
                *v124 = (int32x2_t ****)-8192;
                v119[304] = vadd_s32(v119[304], (int32x2_t)0x1FFFFFFFFLL);
                v118 = v145;
              }
              else
              {
                v126 = 1;
                while (v125 != (int32x2_t ****)-4096)
                {
                  v127 = v123 + v126++;
                  v123 = v127 & v122;
                  v125 = *(int32x2_t *****)(v120 + 16 * v123);
                  if (v145 == v125)
                  {
                    v124 = (int32x2_t *****)(v120 + 16 * v123);
                    goto LABEL_144;
                  }
                }
              }
              *((_BYTE *)v118 + 17) &= ~1u;
            }
          }
        }
      }
      if (v112 == 0xFFFFFFFFLL)
        v128 = 0;
      else
        v128 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * v112 + 16);
      ProfileCountFromFreq = llvm::BlockFrequencyInfoImplBase::getProfileCountFromFreq((llvm::BlockFrequencyInfoImplBase *)a1, v102, v128, 0);
      if (v130)
      {
        v131 = (unint64_t)ProfileCountFromFreq;
        v132 = *((_QWORD *)this + 4);
        if ((unint64_t)(*((_QWORD *)this + 3) - v132) > 9)
        {
          *(_WORD *)(v132 + 8) = 8253;
          *(_QWORD *)v132 = *(_QWORD *)", count = ";
          *((_QWORD *)this + 4) += 10;
        }
        else
        {
          llvm::raw_ostream::write(this, ", count = ", 0xAuLL);
        }
        sub_1C5E21910(this, v131, 0, 0, 0);
      }
      IrrLoopHeaderWeight = llvm::BasicBlock::getIrrLoopHeaderWeight(v23);
      if (v134)
      {
        v135 = IrrLoopHeaderWeight;
        v136 = (void *)*((_QWORD *)this + 4);
        if (*((_QWORD *)this + 3) - (_QWORD)v136 > 0x1AuLL)
        {
          qmemcpy(v136, ", irr_loop_header_weight = ", 27);
          *((_QWORD *)this + 4) += 27;
        }
        else
        {
          llvm::raw_ostream::write(this, ", irr_loop_header_weight = ", 0x1BuLL);
        }
        sub_1C5E21910(this, v135, 0, 0, 0);
      }
      v137 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v137)
      {
        llvm::raw_ostream::write(this, "\n", 1uLL);
      }
      else
      {
        *v137 = 10;
        ++*((_QWORD *)this + 4);
      }
      v21 = *(_QWORD *)(v21 + 8);
      if (v21 == v20)
        goto LABEL_170;
    }
    v25 = ***(_QWORD ***)v23;
    v26 = *(_QWORD *)(v25 + 152);
    v27 = *(unsigned int *)(v25 + 168);
    if ((_DWORD)v27)
    {
      LODWORD(v28) = (v27 - 1) & (v140 ^ (v23 >> 9));
      v29 = (llvm::BasicBlock **)(v26 + 16 * v28);
      v30 = *v29;
      if (*v29 == v23)
        goto LABEL_34;
      v31 = 1;
      while (v30 != (llvm::BasicBlock *)-4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v27 - 1);
        v30 = *(llvm::BasicBlock **)(v26 + 16 * v28);
        if (v30 == v23)
        {
          v29 = (llvm::BasicBlock **)(v26 + 16 * v28);
          goto LABEL_34;
        }
      }
    }
    v29 = (llvm::BasicBlock **)(v26 + 16 * v27);
LABEL_34:
    v33 = (_QWORD **)v22;
    v34 = (unint64_t *)v29[1];
    v37 = *v34;
    v35 = v34 + 2;
    v36 = v37;
    if (v37 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v36 >= 0x17)
    {
      v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17)
        v39 = v36 | 7;
      v40 = v20;
      v41 = v39 + 1;
      p_dst = (void **)operator new(v39 + 1);
      v42 = v41 | 0x8000000000000000;
      v20 = v40;
      v142 = (uint64_t (**)(llvm::CallbackVH *__hidden))v36;
      v143 = v42;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v143) = v36;
      p_dst = (void **)&__dst;
      if (!v36)
        goto LABEL_42;
    }
    memmove(p_dst, v35, v36);
LABEL_42:
    v22 = (unint64_t)v33;
    goto LABEL_43;
  }
LABEL_170:
  v138 = (_BYTE *)*((_QWORD *)this + 4);
  if (*((_BYTE **)this + 3) == v138)
  {
    llvm::raw_ostream::write(this, "\n", 1uLL);
  }
  else
  {
    *v138 = 10;
    ++*((_QWORD *)this + 4);
  }
  return this;
}

_QWORD *sub_1C4DB1018(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E8134B28;
  sub_1C4DB1198((uint64_t)(a1 + 20));
  MEMORY[0x1CAA32FB4](a1[20], 8);
  v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  return sub_1C4DB1064(a1);
}

_QWORD *sub_1C4DB1064(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  *a1 = &unk_1E8134C20;
  if (a1[13])
  {
    v5 = a1 + 11;
    v6 = a1[11];
    v7 = (uint64_t *)a1[12];
    v8 = *v7;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v6 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    a1[13] = 0;
    if (v7 != a1 + 11)
    {
      do
      {
        v9 = (uint64_t *)v7[1];
        v10 = (uint64_t *)v7[18];
        if (v10 != v7 + 20)
          free(v10);
        v11 = (uint64_t *)v7[14];
        if (v11 != v7 + 16)
          free(v11);
        v12 = (uint64_t *)v7[4];
        if (v12 != v7 + 6)
          free(v12);
        operator delete(v7);
        v7 = v9;
      }
      while (v9 != v5);
    }
  }
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  if (a1[6])
  {
    v14 = a1[4];
    v13 = (uint64_t *)a1[5];
    v15 = *v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    a1[6] = 0;
    if (v13 != a1 + 4)
    {
      do
      {
        v16 = (uint64_t *)v13[1];
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != a1 + 4);
    }
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1C4DB1198(uint64_t result)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;

  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD **)result;
    v3 = *(_QWORD *)result + 56 * v1;
    do
    {
      if (*v2 != -4096 && *v2 != -8192)
      {
        v4 = v2[5];
        if (v4 != -8192 && v4 != -4096 && v4 != 0)
        {
          v6 = v2[3] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v6 = v2[4];
          v7 = (unint64_t *)v2[4];
          if (v7)
          {
            *v7 = *v7 & 7 | v6;
          }
          else
          {
            v8 = v2[5];
            v9 = ***(int32x2_t ****)v8;
            v10 = (unint64_t)v9[303];
            if (v10 <= v6)
            {
              v11 = v9[305].u32[0];
              if (v10 + 16 * v11 > v6)
              {
                v12 = v11 - 1;
                LODWORD(v13) = v12 & ((v8 >> 4) ^ (v8 >> 9));
                v14 = (uint64_t *)(v10 + 16 * v13);
                v15 = *v14;
                if (v8 == *v14)
                {
LABEL_20:
                  *v14 = -8192;
                  v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
                  v8 = v2[5];
                }
                else
                {
                  v16 = 1;
                  while (v15 != -4096)
                  {
                    v17 = v13 + v16++;
                    v13 = v17 & v12;
                    v15 = *(_QWORD *)(v10 + 16 * v13);
                    if (v8 == v15)
                    {
                      v14 = (uint64_t *)(v10 + 16 * v13);
                      goto LABEL_20;
                    }
                  }
                }
                *(_BYTE *)(v8 + 17) &= ~1u;
              }
            }
          }
        }
      }
      v2 += 7;
    }
    while (v2 != (_QWORD *)v3);
  }
  return result;
}

uint64_t sub_1C4DB12BC(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  int32x2_t ****v14;
  unint64_t v17;
  int32x2_t ****v18;
  int32x2_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int32x2_t *****v24;
  int32x2_t ****v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t *v29;
  int32x2_t ****v30;
  uint64_t v31;

  v2 = *(_DWORD *)(a1 + 176);
  if (!v2)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 160);
  v4 = v2 - 1;
  v5 = (v2 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = (uint64_t *)(v3 + 56 * v5);
  v7 = *v6;
  if (*v6 != a2)
  {
    v8 = 1;
    while (v7 != -4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & v4;
      v6 = (uint64_t *)(v3 + 56 * (v9 & v4));
      v7 = *v6;
      if (*v6 == a2)
        goto LABEL_6;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_6:
  v10 = 0;
  result = *((unsigned int *)v6 + 2);
  v12 = v6[3];
  v13 = v12 & 6;
  v28 = v13;
  v29 = 0;
  v14 = (int32x2_t ****)v6[5];
  v30 = v14;
  if (v14 != (int32x2_t ****)-8192 && v14 != (int32x2_t ****)-4096 && v14 != 0)
  {
    v29 = *(unint64_t **)(v12 & 0xFFFFFFFFFFFFFFF8);
    v10 = v29;
    *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8) = &v28;
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    v28 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (v10)
      *v10 = *v10 & 7 | (unint64_t)&v29;
  }
  v31 = v6[6];
  if (v14 != (int32x2_t ****)-8192 && v14 != (int32x2_t ****)-4096 && v14 != 0)
  {
    v17 = v13 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v17 = v10;
    if (v29)
    {
      *v29 = *v29 & 7 | v17;
    }
    else
    {
      v18 = v30;
      v19 = ***v30;
      v20 = (unint64_t)v19[303];
      if (v20 <= v17)
      {
        v21 = v19[305].u32[0];
        if (v20 + 16 * v21 > v17)
        {
          v22 = v21 - 1;
          LODWORD(v23) = v22 & ((v30 >> 4) ^ (v30 >> 9));
          v24 = (int32x2_t *****)(v20 + 16 * v23);
          v25 = *v24;
          if (v30 == *v24)
          {
LABEL_26:
            *v24 = (int32x2_t ****)-8192;
            v19[304] = vadd_s32(v19[304], (int32x2_t)0x1FFFFFFFFLL);
            v18 = v30;
          }
          else
          {
            v26 = 1;
            while (v25 != (int32x2_t ****)-4096)
            {
              v27 = v23 + v26++;
              v23 = v27 & v22;
              v25 = *(int32x2_t *****)(v20 + 16 * v23);
              if (v30 == v25)
              {
                v24 = (int32x2_t *****)(v20 + 16 * v23);
                goto LABEL_26;
              }
            }
          }
          *((_BYTE *)v18 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4DB1474(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 56 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 56 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

int32x2_t sub_1C4DB1500(uint64_t a1)
{
  int32x2_t *v1;
  __int32 v2;
  uint64_t v3;
  int32x2_t v4;
  __int32 v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  int32x2_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  int32x2_t result;

  v1 = *(int32x2_t **)(a1 + 32);
  v2 = v1[22].i32[0];
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    v4 = v1[20];
    v5 = v2 - 1;
    v6 = ((v3 >> 4) ^ (v3 >> 9)) & (v2 - 1);
    v7 = (uint64_t *)(*(_QWORD *)&v4 + 56 * v6);
    v8 = *v7;
    if (v3 == *v7)
    {
LABEL_6:
      v11 = v7[5];
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
      {
        v13 = v7[3] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v13 = v7[4];
        v14 = (unint64_t *)v7[4];
        if (v14)
        {
          *v14 = *v14 & 7 | v13;
        }
        else
        {
          v15 = v7[5];
          v16 = ***(int32x2_t ****)v15;
          v17 = (unint64_t)v16[303];
          if (v17 <= v13)
          {
            v18 = v16[305].u32[0];
            if (v17 + 16 * v18 > v13)
            {
              v19 = v18 - 1;
              LODWORD(v20) = v19 & ((v15 >> 4) ^ (v15 >> 9));
              v21 = (uint64_t *)(v17 + 16 * v20);
              v22 = *v21;
              if (v15 == *v21)
              {
LABEL_19:
                *v21 = -8192;
                v16[304] = vadd_s32(v16[304], (int32x2_t)0x1FFFFFFFFLL);
                v15 = v7[5];
              }
              else
              {
                v23 = 1;
                while (v22 != -4096)
                {
                  v24 = v20 + v23++;
                  v20 = v24 & v19;
                  v22 = *(_QWORD *)(v17 + 16 * v20);
                  if (v15 == v22)
                  {
                    v21 = (uint64_t *)(v17 + 16 * v20);
                    goto LABEL_19;
                  }
                }
              }
              *(_BYTE *)(v15 + 17) &= ~1u;
            }
          }
        }
      }
      *v7 = -8192;
      result = vadd_s32(v1[21], (int32x2_t)0x1FFFFFFFFLL);
      v1[21] = result;
    }
    else
    {
      v9 = 1;
      while (v8 != -4096)
      {
        v10 = v6 + v9++;
        v6 = v10 & v5;
        v7 = (uint64_t *)(*(_QWORD *)&v4 + 56 * (v10 & v5));
        v8 = *v7;
        if (v3 == *v7)
          goto LABEL_6;
      }
    }
  }
  return result;
}

void sub_1C4DB1660(_WORD *a1, __int128 *a2, uint64_t *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7F0020, "view-block-freq-propagation-dags", 0x20uLL);
  word_1ED7F002A = (32 * (*a1 & 3)) | word_1ED7F002A & 0xFF9F;
  xmmword_1ED7F0040 = *a2;
  sub_1C4DB16D0(a3, (uint64_t)&qword_1ED7F0020);
}

void sub_1C4DB16D0(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 40 * v2;
    v5 = a2 + 152;
    do
    {
      sub_1C4DB1728(v5, *(unsigned __int8 **)v3, *(_QWORD *)(v3 + 8), (int *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
      v3 += 40;
    }
    while (v3 != v4);
  }
}

void sub_1C4DB1728(uint64_t a1, unsigned __int8 *a2, size_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  _QWORD v14[5];
  int v15;
  char v16;

  v9 = *a4;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = &unk_1E81349F0;
  v16 = 1;
  v15 = v9;
  v10 = sub_1C4DB17EC(a1 + 16, (unint64_t)v14, 1);
  v11 = *(_QWORD *)(a1 + 16) + 48 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 32) = &unk_1E8134A10;
  v13 = *(_BYTE *)(v10 + 44);
  *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);
  *(_BYTE *)(v11 + 44) = v13;
  *(_QWORD *)(v11 + 32) = &unk_1E81349F0;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 8), a2, a3);
}

unint64_t sub_1C4DB17EC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 48 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C617B990(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C617B990(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C4DB1854(uint64_t a1, char *a2, _WORD *a3, _OWORD *a4)
{
  uint64_t v8;
  size_t v9;

  v8 = sub_1C47AD050(a1, 0, 0);
  *(_QWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = 0;
  *(_QWORD *)(v8 + 168) = 0;
  *(_QWORD *)(v8 + 176) = 0;
  *(_QWORD *)(v8 + 160) = 0;
  *(_BYTE *)(v8 + 184) = 0;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 152) = &unk_1E819E950;
  *(_QWORD *)v8 = &unk_1E819E480;
  *(_QWORD *)(v8 + 192) = &unk_1E819E970;
  *(_QWORD *)(v8 + 200) = &off_1E7FA8CB8;
  *(_QWORD *)(v8 + 224) = v8 + 200;
  v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t sub_1C4DB1928(uint64_t a1, char *a2, int **a3, _WORD *a4, _OWORD *a5)
{
  uint64_t v10;
  size_t v11;
  int v12;

  v10 = sub_1C47AD050(a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F952A8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E3B0;
  *(_QWORD *)(v10 + 152) = &unk_1E819E2C0;
  *(_QWORD *)(v10 + 160) = &off_1E7F95260;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  v12 = **a3;
  *(_DWORD *)(a1 + 128) = v12;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v12;
  *(_WORD *)(a1 + 10) = (32 * (*a4 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void sub_1C4DB1A18(_WORD *a1, __int128 *a2, uint64_t *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&llvm::PGOViewCounts, "pgo-view-counts", 0xFuLL);
  word_1ED82C8BA = (32 * (*a1 & 3)) | word_1ED82C8BA & 0xFF9F;
  xmmword_1ED82C8D0 = *a2;
  sub_1C4DB1A88(a3, (uint64_t)&llvm::PGOViewCounts);
}

void sub_1C4DB1A88(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 40 * v2;
    v5 = a2 + 152;
    do
    {
      sub_1C4DB1AE0(v5, *(unsigned __int8 **)v3, *(_QWORD *)(v3 + 8), (int *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
      v3 += 40;
    }
    while (v3 != v4);
  }
}

void sub_1C4DB1AE0(uint64_t a1, unsigned __int8 *a2, size_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  _QWORD v14[5];
  int v15;
  char v16;

  v9 = *a4;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = &unk_1E8134AE8;
  v16 = 1;
  v15 = v9;
  v10 = sub_1C4DB1BA4(a1 + 16, (unint64_t)v14, 1);
  v11 = *(_QWORD *)(a1 + 16) + 48 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 32) = &unk_1E8134B08;
  v13 = *(_BYTE *)(v10 + 44);
  *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);
  *(_BYTE *)(v11 + 44) = v13;
  *(_QWORD *)(v11 + 32) = &unk_1E8134AE8;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 8), a2, a3);
}

unint64_t sub_1C4DB1BA4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 48 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C617BB68(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C617BB68(a1, v5);
    }
  }
  return a2;
}

_QWORD *sub_1C4DB1C0C(uint64_t a1)
{
  int v2;
  _QWORD *result;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 8);
  result = (_QWORD *)sub_1C4DB1198(a1);
  v4 = 1 << (33 - __clz(v2 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v2)
    v5 = v4;
  else
    v5 = 0;
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD **)a1;
      v7 = 56 * v5;
      do
      {
        *v6 = -4096;
        v6 += 7;
        v7 -= 56;
      }
      while (v7);
    }
  }
  else
  {
    result = (_QWORD *)MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v5)
    {
      v8 = (4 * (int)v5 / 3u + 1) | ((unint64_t)(4 * (int)v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v9;
      result = operator new(56 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = result;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 56 * v10;
        do
        {
          *result = -4096;
          result += 7;
          v11 -= 56;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
  return result;
}

void sub_1C4DB1D18(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v2 = *(_BYTE **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = *(_BYTE **)(a1 + 8);
    v6 = (char *)operator new(8 * a2);
    v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF8];
    v8 = v7;
    if (v5 != v2)
    {
      v8 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v9 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v5 != v2);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[8 * a2];
    if (v2)
      operator delete(v2);
  }
}

void sub_1C4DB1DB8(uint64_t a1, unint64_t a2)
{
  _BYTE *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;

  v2 = *(_BYTE **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 3 * a2;
    v6 = (char *)operator new(24 * a2);
    v7 = &v6[24 * ((v4 - v2) / 24)];
    v8 = v7;
    if (v4 != v2)
    {
      v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        v10 = *(_OWORD *)(v4 - 24);
        v8 = v9 - 24;
        *((_QWORD *)v9 - 1) = *((_QWORD *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v10;
        v4 -= 24;
        v9 -= 24;
      }
      while (v4 != v2);
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[8 * v5];
    if (v2)
      operator delete(v2);
  }
}

__int128 *sub_1C4DB1EA4(__int128 *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];

  v2 = (uint64_t)this;
  v3 = (uint64_t)(this + 6);
  while (1)
  {
    v4 = *(_QWORD *)(v2 + 96) + 24 * *(unsigned int *)(v2 + 104);
    v5 = *(_QWORD *)(v4 - 24);
    v6 = *(_QWORD *)(v5 + 40);
    if (v6 == v5 + 40)
    {
LABEL_23:
      LODWORD(v10) = 0;
    }
    else
    {
      v7 = v6 - 24;
      if (!v6)
        v7 = 0;
      v8 = *(unsigned __int8 *)(v7 + 16);
      v9 = v8 - 29;
      if (v8 == 30)
      {
        LODWORD(v10) = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
      }
      else
      {
        v10 = 0;
        switch(v9)
        {
          case 0:
          case 5:
          case 6:
            break;
          case 1:
            __break(1u);
            goto LABEL_25;
          case 2:
            LODWORD(v10) = (*(_DWORD *)(v7 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 3:
          case 9:
            LODWORD(v10) = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) - 1;
            break;
          case 4:
            LODWORD(v10) = 2;
            break;
          case 7:
            LODWORD(v10) = *(_WORD *)(v7 + 18) & 1;
            break;
          case 8:
            LODWORD(v10) = 1;
            break;
          case 10:
            LODWORD(v10) = *(_DWORD *)(v7 + 80) + 1;
            break;
          default:
            goto LABEL_23;
        }
      }
    }
    if (*(_DWORD *)(v4 - 8) == (_DWORD)v10)
      return this;
    v11 = *(_QWORD *)(v4 - 16);
    v12 = *(_QWORD *)(v4 - 8);
    *(_DWORD *)(v4 - 8) = v12 + 1;
    v13 = *(unsigned __int8 *)(v11 + 16);
    if (v13 != 30)
      __asm { BR              X12 }
    v1 = *(_QWORD *)(v11 - 32 * v12 - 32);
    this = (__int128 *)sub_1C4774094((llvm::SmallPtrSetImplBase *)v2, v1);
    if (v14)
    {
      v4 = v1 + 40;
      v10 = *(_QWORD *)(v1 + 40);
      if (v10 == v1 + 40 || v10 == 0)
      {
LABEL_25:
        if (v10 == v4)
        {
          v16 = 0;
          goto LABEL_19;
        }
        v16 = v10 - 24;
        if (!v10)
          v16 = 0;
        v17 = (unsigned __int8 *)(v16 + 16);
      }
      else
      {
        v16 = v10 - 24;
        v17 = (unsigned __int8 *)(v10 - 8);
      }
      if (*v17 - 29 >= 0xB)
        v16 = 0;
LABEL_19:
      v20[0] = v1;
      v20[1] = v16;
      v20[2] = 0;
      this = (__int128 *)sub_1C4926708(v3, (unint64_t)v20, 1);
      v18 = *(_QWORD *)(v2 + 96) + 24 * *(unsigned int *)(v2 + 104);
      v19 = *this;
      *(_QWORD *)(v18 + 16) = *((_QWORD *)this + 2);
      *(_OWORD *)v18 = v19;
      ++*(_DWORD *)(v2 + 104);
    }
  }
}

uint64_t sub_1C4DB2150(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(_DWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_21;
    }
    v7 = a2 + 1;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v10 = v4 + 24 * v8;
        v11 = *(_DWORD **)a1;
        do
        {
          *(_QWORD *)v11 = *(_QWORD *)v4;
          v12 = *(_QWORD *)(v4 + 8);
          v11[4] = *(_DWORD *)(v4 + 16);
          *((_QWORD *)v11 + 1) = v12;
          v4 += 24;
          v11 += 6;
        }
        while (v4 != v10);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        v13 = v4 + 24 * v9;
        v14 = *(_DWORD **)a1;
        do
        {
          *(_QWORD *)v14 = *(_QWORD *)v4;
          v15 = *(_QWORD *)(v4 + 8);
          v14[4] = *(_DWORD *)(v4 + 16);
          *((_QWORD *)v14 + 1) = v15;
          v4 += 24;
          v14 += 6;
        }
        while (v4 != v13);
LABEL_18:
        v16 = *v7;
        if (v9 != v16)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v9), (const void *)(*a2 + 24 * v9), *a2 + 24 * v16 - (*a2 + 24 * v9));
LABEL_20:
        *(_DWORD *)(a1 + 8) = v8;
LABEL_21:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 24);
    }
    v9 = 0;
    goto LABEL_18;
  }
  return a1;
}

uint64_t sub_1C4DB22B8(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((unsigned int *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v6 = *a2;
        v7 = *a2 + 24 * v4;
        v8 = *(_QWORD *)a1;
        do
        {
          *(_QWORD *)v8 = *(_QWORD *)v6;
          v9 = *(_QWORD *)(v6 + 8);
          *(_DWORD *)(v8 + 16) = *(_DWORD *)(v6 + 16);
          *(_QWORD *)(v8 + 8) = v9;
          v6 += 24;
          v8 += 24;
        }
        while (v6 != v7);
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        v10 = *a2;
        v11 = *a2 + 24 * v5;
        v12 = *(_QWORD *)a1;
        do
        {
          *(_QWORD *)v12 = *(_QWORD *)v10;
          v13 = *(_QWORD *)(v10 + 8);
          *(_DWORD *)(v12 + 16) = *(_DWORD *)(v10 + 16);
          *(_QWORD *)(v12 + 8) = v13;
          v10 += 24;
          v12 += 24;
        }
        while (v10 != v11);
LABEL_14:
        v14 = *((unsigned int *)a2 + 2);
        if (v5 != v14)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v5), (const void *)(*a2 + 24 * v5), *a2 + 24 * v14 - (*a2 + 24 * v5));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 24);
    }
    v5 = 0;
    goto LABEL_14;
  }
  return a1;
}

uint64_t *sub_1C4DB23DC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t *v16;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1C4DB2514((uint64_t *)a1, v6);
      v16 = 0;
      sub_1C4DB1474(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    v7 = *a3;
    goto LABEL_5;
  }
  sub_1C4DB2514((uint64_t *)a1, 2 * v6);
  v7 = *a2;
  v9 = *(_DWORD *)(a1 + 16) - 1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(_QWORD *)a1 + 56 * v10);
  v11 = *a3;
  if (*a2 != *a3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = a3;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      a3 = (uint64_t *)(*(_QWORD *)a1 + 56 * v10);
      v11 = *a3;
      if (v7 == *a3)
        goto LABEL_5;
    }
    if (v12)
      a3 = v12;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C4DB2514(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  int32x2_t *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -4096;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v14 = *((_DWORD *)a1 + 4) - 1;
          v15 = v14 & ((v13 >> 4) ^ (v13 >> 9));
          v16 = *a1 + 56 * v15;
          v17 = *(_QWORD *)v16;
          if (v13 != *(_QWORD *)v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -4096)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -8192;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = *a1 + 56 * (v21 & v14);
              v17 = *(_QWORD *)v16;
              if (v13 == *(_QWORD *)v16)
                goto LABEL_23;
            }
            if (v18)
              v16 = v18;
          }
LABEL_23:
          *(_QWORD *)v16 = v13;
          *(_DWORD *)(v16 + 8) = *((_DWORD *)v12 + 2);
          v22 = v12[3] & 6;
          *(_QWORD *)(v16 + 24) = v22;
          v23 = (unint64_t *)(v16 + 24);
          *(_QWORD *)(v16 + 32) = 0;
          v24 = v16 + 32;
          v25 = v12[5];
          *(_QWORD *)(v16 + 40) = v25;
          if (v25 != -8192 && v25 != -4096)
          {
            if (v25)
            {
              v26 = v12[3] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v24 = *(_QWORD *)v26;
              *(_QWORD *)v26 = v23;
              *v23 = v26 | v22;
              if (*(_QWORD *)v24)
                **(_QWORD **)v24 = **(_QWORD **)v24 & 7 | v24;
            }
          }
          *(_QWORD *)(v16 + 16) = &off_1E8134B58;
          v27 = v12[5];
          *(_QWORD *)(v16 + 48) = v12[6];
          ++*((_DWORD *)a1 + 2);
          if (v27 != -8192 && v27 != -4096 && v27)
          {
            v28 = v12[3] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v28 = v12[4];
            v29 = (unint64_t *)v12[4];
            if (v29)
            {
              *v29 = *v29 & 7 | v28;
            }
            else
            {
              v30 = v12[5];
              v31 = ***(int32x2_t ****)v30;
              v32 = (unint64_t)v31[303];
              if (v32 <= v28)
              {
                v33 = v31[305].u32[0];
                if (v32 + 16 * v33 > v28)
                {
                  v34 = v33 - 1;
                  LODWORD(v35) = v34 & ((v30 >> 4) ^ (v30 >> 9));
                  v36 = (uint64_t *)(v32 + 16 * v35);
                  v37 = *v36;
                  if (v30 != *v36)
                  {
                    v38 = 1;
                    do
                    {
                      if (v37 == -4096)
                        goto LABEL_40;
                      v39 = v35 + v38++;
                      v35 = v39 & v34;
                      v37 = *(_QWORD *)(v32 + 16 * v35);
                    }
                    while (v30 != v37);
                    v36 = (uint64_t *)(v32 + 16 * v35);
                  }
                  *v36 = -8192;
                  v31[304] = vadd_s32(v31[304], (int32x2_t)0x1FFFFFFFFLL);
                  v30 = v12[5];
LABEL_40:
                  *(_BYTE *)(v30 + 17) &= ~1u;
                }
              }
            }
          }
        }
        v12 += 7;
      }
      while (v12 != &v4[7 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v40 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v40)
  {
    v41 = 56 * v40;
    do
    {
      *result = -4096;
      result += 7;
      v41 -= 56;
    }
    while (v41);
  }
  return result;
}

char *sub_1C4DB27F8(char **a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - v2) >> 3) > v5)
    v5 = 0x5555555555555556 * ((a1[2] - v2) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v2) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_1C4764EE4();
  v8 = 3 * v5;
  v9 = (char *)operator new(24 * v5);
  v10 = &v9[24 * v4];
  *(_DWORD *)v10 = *a2;
  v11 = v10 + 24;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  if (v3 == v2)
  {
    v13 = &v9[24 * v4];
  }
  else
  {
    do
    {
      v12 = *(_OWORD *)(v3 - 24);
      v13 = v10 - 24;
      *((_QWORD *)v10 - 1) = *((_QWORD *)v3 - 1);
      *(_OWORD *)(v10 - 24) = v12;
      v3 -= 24;
      v10 -= 24;
    }
    while (v3 != v2);
  }
  *a1 = v13;
  a1[1] = v11;
  a1[2] = &v9[8 * v8];
  if (v2)
    operator delete(v2);
  return v11;
}

void sub_1C4DB2908(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      bzero(a1[1], 24 * ((24 * a2 - 24) / 0x18) + 24);
      v5 += 24 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[24 * v7];
    v13 = &v11[24 * v10];
    v14 = 3 * a2;
    bzero(v12, 24 * ((8 * v14 - 24) / 0x18uLL) + 24);
    v15 = &v12[8 * v14];
    if (v5 != v6)
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v12 - 24) = v16;
        v12 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v15;
    a1[2] = v13;
    if (v5)
      operator delete(v5);
  }
}

BOOL sub_1C4DB2AAC(int *a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  v2 = *(unsigned int *)(v1 + 12);
  v3 = *(unsigned int **)(v1 + 96);
  if (v2 >= 2)
  {
    v4 = *a1;
    v5 = v3;
    v6 = v2;
    do
    {
      v7 = v6 >> 1;
      v8 = &v5[v6 >> 1];
      v10 = *v8;
      v9 = v8 + 1;
      v6 += ~(v6 >> 1);
      if (v10 < v4)
        v5 = v9;
      else
        v6 = v7;
    }
    while (v6);
    if (v5 != &v3[v2])
      return v4 >= *v5;
    return 0;
  }
  return *a1 == *v3;
}

void sub_1C4DB2B30(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  void *v28;
  _QWORD *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  void *v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_31:
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v31 = 1;
      else
        v31 = (v6 - v10) >> 2;
      if (v31 >> 61)
        goto LABEL_53;
      v32 = (char *)operator new(8 * v31);
      v33 = &v32[8 * (v31 >> 2)];
      v34 = &v32[8 * v31];
      v36 = v6 - v7;
      v35 = v6 == v7;
      v6 = v33;
      if (!v35)
      {
        v6 = &v33[v36 & 0xFFFFFFFFFFFFFFF8];
        v37 = 8 * (v36 >> 3);
        v38 = &v32[8 * (v31 >> 2)];
        do
        {
          v39 = *(_QWORD *)v7;
          v7 += 8;
          *(_QWORD *)v38 = v39;
          v38 += 8;
          v37 -= 8;
        }
        while (v37);
      }
      goto LABEL_29;
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_31;
  }
  v19 = *(char **)(a1 + 8);
  v18 = *(char **)(a1 + 16);
  v20 = v18 - v19;
  v21 = *(char **)(a1 + 24);
  v22 = (uint64_t)&v21[-*(_QWORD *)a1];
  if (v18 - v19 < (unint64_t)v22)
  {
    if (v21 != v18)
    {
      v50 = (char *)operator new(0x1000uLL);
      sub_1C61351F0(a1, &v50);
      return;
    }
    v50 = (char *)operator new(0x1000uLL);
    sub_1C6135314((void **)a1, &v50);
    v40 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v41 = *v40;
    v7 = (char *)(v40 + 1);
    v8 = v41;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_31;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v42 = 1;
      else
        v42 = (v6 - v10) >> 2;
      if (v42 >> 61)
        goto LABEL_53;
      v32 = (char *)operator new(8 * v42);
      v33 = &v32[8 * (v42 >> 2)];
      v34 = &v32[8 * v42];
      v43 = v6 - v7;
      v35 = v6 == v7;
      v6 = v33;
      if (!v35)
      {
        v6 = &v33[v43 & 0xFFFFFFFFFFFFFFF8];
        v44 = 8 * (v43 >> 3);
        v45 = &v32[8 * (v42 >> 2)];
        do
        {
          v46 = *(_QWORD *)v7;
          v7 += 8;
          *(_QWORD *)v45 = v46;
          v45 += 8;
          v44 -= 8;
        }
        while (v44);
      }
LABEL_29:
      *(_QWORD *)a1 = v32;
      *(_QWORD *)(a1 + 8) = v33;
      *(_QWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 24) = v34;
      if (v10)
      {
        operator delete(v10);
        v6 = *(char **)(a1 + 16);
      }
      goto LABEL_31;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v21 == *(char **)a1)
    v24 = 1;
  else
    v24 = v23;
  v54 = a1 + 24;
  if (v24 >> 61)
    goto LABEL_53;
  v25 = (char *)operator new(8 * v24);
  v26 = &v25[v20];
  v50 = v25;
  v51 = &v25[v20];
  v27 = &v25[8 * v24];
  v53 = v27;
  v28 = operator new(0x1000uLL);
  if (v24 == v20 >> 3)
  {
    v49 = v28;
    if (v20 >= 1)
    {
      v26 -= (4 * v24 + 4) & 0xFFFFFFFFFFFFFFF8;
      v51 = v26;
LABEL_52:
      v28 = v49;
      goto LABEL_17;
    }
    if (v18 == v19)
      v47 = 1;
    else
      v47 = v20 >> 2;
    if (!(v47 >> 61))
    {
      v48 = (char *)operator new(8 * v47);
      v26 = &v48[8 * (v47 >> 2)];
      v27 = &v48[8 * v47];
      v50 = v48;
      v51 = v26;
      v53 = v27;
      operator delete(v25);
      v18 = *(char **)(a1 + 16);
      v25 = v48;
      v19 = *(char **)(a1 + 8);
      goto LABEL_52;
    }
LABEL_53:
    sub_1C4764EE4();
  }
LABEL_17:
  *(_QWORD *)v26 = v28;
  v29 = v26 + 8;
  v52 = v26 + 8;
  if (v18 != v19)
  {
    do
    {
      v18 -= 8;
      sub_1C6135314((void **)&v50, v18);
    }
    while (v18 != *(char **)(a1 + 8));
    v25 = v50;
    v26 = v51;
    v29 = v52;
    v27 = v53;
  }
  v30 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v26;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v27;
  if (v30)
    operator delete(v30);
}

uint64_t sub_1C4DB2E4C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 1;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x400000000;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 0x400000000;
  sub_1C4893E04((char *)(a1 + 96), 1uLL, *a3);
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 136) = 0x100000000;
  sub_1C4765AA4((char *)(a1 + 128), 1uLL, 0);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 168) = 0;
  return a1;
}

BOOL sub_1C4DB2ED4(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;

  result = sub_1C4DB2AAC((int *)a1);
  if (result)
  {
    v3 = **(_QWORD **)(a1 + 8);
    if (!v3)
      return 0;
    v4 = *(unsigned int *)(v3 + 12);
    if (v4 < 2)
      return 0;
    v5 = *(unsigned int **)(v3 + 96);
    v6 = *(_DWORD *)a1;
    v7 = v5;
    v8 = v4;
    do
    {
      v9 = v8 >> 1;
      v10 = &v7[v8 >> 1];
      v12 = *v10;
      v11 = v10 + 1;
      v8 += ~(v8 >> 1);
      if (v12 < v6)
        v7 = v11;
      else
        v8 = v9;
    }
    while (v8);
    return v7 != &v5[v4] && v6 >= *v7;
  }
  return result;
}

uint64_t sub_1C4DB2F68(uint64_t *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  llvm::BasicBlock *v16;
  unint64_t IrrLoopHeaderWeight;
  char v18;
  BOOL v19;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int *v28;
  _DWORD *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int v42;
  void *v43[2];
  _QWORD v44[9];
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 2)
  {
    *(_QWORD *)sub_1C4DB3A24(a1[8] + 24 * **(unsigned int **)(a2 + 96)) = -1;
    LODWORD(v43[0]) = **(_DWORD **)(a2 + 96);
    sub_1C4DB3508((uint64_t)a1, a2, (unsigned int *)v43);
    v5 = *(unsigned int *)(a2 + 12);
    v6 = *(unsigned int *)(a2 + 104);
    if ((_DWORD)v5 == (_DWORD)v6)
      goto LABEL_6;
    v7 = (unsigned int *)(*(_QWORD *)(a2 + 96) + 4 * v5);
    v8 = 4 * v6 - 4 * v5;
    while ((sub_1C4DB3508((uint64_t)a1, a2, v7) & 1) != 0)
    {
      ++v7;
      v8 -= 4;
      if (!v8)
        goto LABEL_6;
    }
    return 0;
  }
  v43[0] = v44;
  v43[1] = (void *)0x400000000;
  v44[8] = 0;
  v45 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  sub_1C617BEE8(&v40, v4);
  v39 = 0;
  if (!*(_DWORD *)(a2 + 12))
  {
    v10 = 0;
    goto LABEL_40;
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  do
  {
    v14 = (unsigned int *)(*(_QWORD *)(a2 + 96) + 4 * v11);
    v15 = *v14;
    v16 = *(llvm::BasicBlock **)(a1[17] + 8 * v15);
    sub_1C4DB3420(a1 + 4, v15);
    IrrLoopHeaderWeight = llvm::BasicBlock::getIrrLoopHeaderWeight(v16);
    if (v18)
    {
      ++v10;
      if (v12)
        v19 = IrrLoopHeaderWeight >= v13;
      else
        v19 = 0;
      if (!v19)
      {
        v13 = IrrLoopHeaderWeight;
        v12 = 1;
      }
      if (IrrLoopHeaderWeight)
        llvm::BlockFrequencyInfoImplBase::Distribution::add(v43, v14, IrrLoopHeaderWeight, 0);
    }
    else
    {
      if (v42)
      {
        v21 = (37 * v39) & (v42 - 1);
        v22 = &v40[v21];
        v23 = *v22;
        if (v39 == *v22)
          goto LABEL_38;
        v24 = 0;
        v25 = 1;
        while (v23 != -1)
        {
          if (v24)
            v26 = 0;
          else
            v26 = v23 == -2;
          if (v26)
            v24 = v22;
          v27 = v21 + v25++;
          v21 = v27 & (v42 - 1);
          v22 = &v40[v21];
          v23 = *v22;
          if (v39 == *v22)
            goto LABEL_38;
        }
        if (v24)
          v28 = v24;
        else
          v28 = v22;
      }
      else
      {
        v28 = 0;
      }
      v29 = sub_1C4A0C948((uint64_t)&v40, (uint64_t)&v39, &v39, v28);
      *v29 = v39;
    }
LABEL_38:
    v11 = v39 + 1;
    v39 = v11;
  }
  while (v11 < *(_DWORD *)(a2 + 12));
  if (!v12)
LABEL_40:
    v13 = 1;
  v30 = &v40[v42];
  if ((_DWORD)v41)
  {
    if (v42)
    {
      v38 = 4 * v42;
      v31 = v40;
      while (*v31 >= 0xFFFFFFFE)
      {
        ++v31;
        v38 -= 4;
        if (!v38)
          goto LABEL_42;
      }
    }
    else
    {
      v31 = v40;
    }
  }
  else
  {
LABEL_42:
    v31 = &v40[v42];
  }
  v32 = &v40[v42];
LABEL_46:
  while (v31 != v32)
  {
    if (v13)
      llvm::BlockFrequencyInfoImplBase::Distribution::add(v43, (unsigned int *)(*(_QWORD *)(a2 + 96) + 4 * *v31), v13, 0);
    v33 = v31 + 1;
    while (v33 != v30)
    {
      v34 = *v33++;
      if (v34 <= 0xFFFFFFFD)
      {
        v31 = v33 - 1;
        goto LABEL_46;
      }
    }
    v31 = v30;
  }
  llvm::BlockFrequencyInfoImplBase::distributeIrrLoopHeaderMass((llvm::BlockFrequencyInfoImplBase *)a1, (llvm::BlockFrequencyInfoImplBase::Distribution *)v43);
  v35 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v35)
  {
    v36 = *(unsigned int **)(a2 + 96);
    v37 = 4 * v35;
    do
    {
      sub_1C4DB3508((uint64_t)a1, a2, v36++);
      v37 -= 4;
    }
    while (v37);
  }
  if (!v10)
    llvm::BlockFrequencyInfoImplBase::adjustLoopHeaderMass((uint64_t)a1, a2);
  MEMORY[0x1CAA32FB4](v40, 4);
  if (v43[0] != v44)
    free(v43[0]);
LABEL_6:
  llvm::BlockFrequencyInfoImplBase::computeLoopScale((uint64_t)a1, a2);
  llvm::BlockFrequencyInfoImplBase::packageLoop((uint64_t)a1, a2);
  return 1;
}

void sub_1C4DB3304(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t *v12;
  int v13;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v13 = -1;
  memset(v14, 0, sizeof(v14));
  v15 = 1;
  for (i = 7; i != 15; i += 2)
    LODWORD((&v12)[i]) = -1;
  sub_1C617BF34((llvm::bfi_detail::IrreducibleGraph *)&v12, a2, (uint64_t)a1);
  v7 = llvm::BlockFrequencyInfoImplBase::analyzeIrreducible((uint64_t)a1, (uint64_t)&v12, a2, a3);
  if (v7 != v8)
  {
    v9 = v7;
    v10 = v8;
    do
    {
      sub_1C4DB2F68(a1, v9 + 16);
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9 != v10);
  }
  if (a2)
    llvm::BlockFrequencyInfoImplBase::updateLoopWithIrreducible((uint64_t)a1, a2);
  if ((v15 & 1) == 0)
    MEMORY[0x1CAA32FB4](v16, 8);
  v11 = (void **)v14 + 1;
  sub_1C4DB3D7C(&v11);
}

uint64_t *sub_1C4DB3420(uint64_t *a1, unsigned int a2)
{
  unsigned int v4;
  uint64_t *result;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2 >> 7;
  if (!a1[2])
  {
    result = (uint64_t *)operator new(0x28uLL);
    *((_DWORD *)result + 4) = v4;
    result[3] = 0;
    result[4] = 0;
    v9 = *a1;
    *(_QWORD *)(v9 + 8) = result;
    *a1 = (uint64_t)result;
    *result = v9;
    result[1] = (uint64_t)a1;
    v10 = 1;
LABEL_6:
    a1[2] = v10;
    goto LABEL_4;
  }
  result = sub_1C4DB3A84(a1, a2 >> 7);
  v6 = a1;
  if (result == a1)
  {
LABEL_9:
    result = (uint64_t *)operator new(0x28uLL);
    *result = 0;
    result[1] = 0;
    *((_DWORD *)result + 4) = v4;
    result[3] = 0;
    result[4] = 0;
    v11 = *v6;
    *(_QWORD *)(v11 + 8) = result;
    *result = v11;
    *v6 = (uint64_t)result;
    result[1] = (uint64_t)v6;
    v10 = a1[2] + 1;
    goto LABEL_6;
  }
  v7 = *((_DWORD *)result + 4);
  if (v7 != v4)
  {
    v6 = result;
    if (v7 < v4)
      v6 = (uint64_t *)result[1];
    goto LABEL_9;
  }
LABEL_4:
  a1[3] = (uint64_t)result;
  v8 = &result[(a2 >> 6) & 1];
  v8[3] |= 1 << a2;
  return result;
}

uint64_t sub_1C4DB3508(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  int32x2_t ****v27;
  uint64_t v29;
  unint64_t v30;
  int32x2_t ****v31;
  int32x2_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int32x2_t *****v37;
  int32x2_t ****v38;
  int v39;
  int v40;
  unsigned int EdgeProbability;
  uint64_t v42;
  uint64_t v43;
  unsigned int v45;
  uint64_t (**v46)(llvm::CallbackVH *__hidden);
  unint64_t v47;
  unint64_t *v48;
  int32x2_t ****v49;
  uint64_t v50;
  void *v51[2];
  _QWORD v52[9];
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v51[0] = v52;
  v51[1] = (void *)0x400000000;
  v52[8] = 0;
  v53 = 0;
  v6 = *a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 24 * v6 + 8);
  if (!v7 || !*(_BYTE *)(v7 + 8))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v6);
    v9 = *(_QWORD *)(v8 + 40);
    if (v9 != v8 + 40)
    {
      if (v9)
        v10 = v9 - 24;
      else
        v10 = 0;
      if (*(_BYTE *)(v10 + 16) != 30)
      {
        v11 = 2;
        switch(*(_BYTE *)(v10 + 16))
        {
          case 0x1E:
            __break(1u);
            JUMPOUT(0x1C4DB3958);
          case 0x1F:
            v11 = (*(_DWORD *)(v10 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_48;
          case 0x20:
          case 0x26:
            v11 = (*(_DWORD *)(v10 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_48;
          case 0x21:
            goto LABEL_11;
          case 0x24:
            v11 = *(_WORD *)(v10 + 18) & 1;
            goto LABEL_48;
          case 0x25:
            v11 = 1;
            goto LABEL_11;
          case 0x27:
            v11 = *(_DWORD *)(v10 + 80) + 1;
LABEL_48:
            if (!v11)
              goto LABEL_53;
            goto LABEL_11;
          default:
            goto LABEL_53;
        }
      }
      if ((*(_DWORD *)(v10 + 20) & 0x7FFFFFF) == 3)
        v11 = 2;
      else
        v11 = 1;
LABEL_11:
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = *(unsigned __int8 *)(v10 + 16);
        if (v14 != 30)
          __asm { BR              X10 }
        v15 = *(_QWORD *)(v10 - 32 - 32 * v12);
        v16 = *(_DWORD *)(a1 + 176);
        if (!v16)
          goto LABEL_38;
        v17 = *(_QWORD *)(a1 + 160);
        v18 = v16 - 1;
        v19 = (v16 - 1) & ((v15 >> 4) ^ (v15 >> 9));
        v20 = (uint64_t *)(v17 + 56 * v19);
        v21 = *v20;
        if (*v20 != v15)
          break;
LABEL_18:
        v24 = 0;
        v25 = *((_DWORD *)v20 + 2);
        v45 = v25;
        v26 = v20[3];
        v47 = v26 & 6;
        v48 = 0;
        v27 = (int32x2_t ****)v20[5];
        v49 = v27;
        if (v27 != (int32x2_t ****)-8192 && v27 != (int32x2_t ****)-4096 && v27 != 0)
        {
          v48 = *(unint64_t **)(v26 & 0xFFFFFFFFFFFFFFF8);
          *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8) = &v47;
          v47 = v26 & 0xFFFFFFFFFFFFFFFELL;
          v24 = v48;
          if (v48)
            *v48 = *v48 & 7 | (unint64_t)&v48;
          v27 = v49;
        }
        v29 = v20[6];
        v46 = &off_1E8134B58;
        v50 = v29;
LABEL_27:
        if (v27 != (int32x2_t ****)-8192 && v27 != (int32x2_t ****)-4096 && v27)
        {
          v30 = v47 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v47 & 0xFFFFFFFFFFFFFFF8) = v24;
          if (v48)
          {
            *v48 = *v48 & 7 | v30;
          }
          else
          {
            v31 = v49;
            v32 = ***v49;
            v33 = (unint64_t)v32[303];
            if (v33 <= v30)
            {
              v34 = v32[305].u32[0];
              if (v33 + 16 * v34 > v30)
              {
                v35 = v34 - 1;
                LODWORD(v36) = v35 & ((v49 >> 4) ^ (v49 >> 9));
                v37 = (int32x2_t *****)(v33 + 16 * v36);
                v38 = *v37;
                if (v49 == *v37)
                {
LABEL_43:
                  *v37 = (int32x2_t ****)-8192;
                  v32[304] = vadd_s32(v32[304], (int32x2_t)0x1FFFFFFFFLL);
                  v31 = v49;
                }
                else
                {
                  v39 = 1;
                  while (v38 != (int32x2_t ****)-4096)
                  {
                    v40 = v36 + v39++;
                    v36 = v40 & v35;
                    v38 = *(int32x2_t *****)(v33 + 16 * v36);
                    if (v49 == v38)
                    {
                      v37 = (int32x2_t *****)(v33 + 16 * v36);
                      goto LABEL_43;
                    }
                  }
                }
                *((_BYTE *)v31 + 17) &= ~1u;
              }
            }
          }
        }
        v45 = v25;
        EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(*(_QWORD *)(a1 + 112), v8, v13);
        if (!llvm::BlockFrequencyInfoImplBase::addToDist(a1, v51, a2, a3, &v45, EdgeProbability))
          goto LABEL_57;
        v12 = ++v13;
        if (v11 == v13)
          goto LABEL_53;
      }
      v22 = 1;
      while (v21 != -4096)
      {
        v23 = v19 + v22++;
        v19 = v23 & v18;
        v20 = (uint64_t *)(v17 + 56 * (v23 & v18));
        v21 = *v20;
        if (*v20 == v15)
          goto LABEL_18;
      }
LABEL_38:
      v24 = 0;
      v27 = 0;
      v25 = -1;
      v45 = -1;
      v50 = 0;
      v47 = 2;
      v48 = 0;
      v49 = 0;
      goto LABEL_27;
    }
    goto LABEL_53;
  }
  do
  {
    v42 = v7;
    v7 = *(_QWORD *)v7;
  }
  while (v7 && *(_BYTE *)(v7 + 8));
  if ((llvm::BlockFrequencyInfoImplBase::addLoopSuccessorsToDist(a1, a2, v42, v51) & 1) != 0)
  {
LABEL_53:
    llvm::BlockFrequencyInfoImplBase::distributeMass(a1, a3, a2, (unsigned int *)v51);
    v43 = 1;
    goto LABEL_54;
  }
LABEL_57:
  v43 = 0;
LABEL_54:
  if (v51[0] != v52)
    free(v51[0]);
  return v43;
}

uint64_t sub_1C4DB3A24(uint64_t a1)
{
  _BOOL4 v2;
  uint64_t v3;

  if (!sub_1C4DB2AAC((int *)a1) || !*(_BYTE *)(*(_QWORD *)(a1 + 8) + 8))
    return a1 + 16;
  v2 = sub_1C4DB2ED4(a1);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 && *(_BYTE *)(*(_QWORD *)v3 + 8))
    return *(_QWORD *)v3 + 152;
  else
    return v3 + 152;
}

uint64_t *sub_1C4DB3A84(uint64_t *a1, unsigned int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned int v4;

  v2 = (uint64_t *)a1[1];
  if (!a1[2])
    goto LABEL_17;
  v3 = (uint64_t *)a1[3];
  if (v3 == a1)
  {
    v3 = (uint64_t *)*a1;
    a1[3] = *a1;
  }
  v4 = *((_DWORD *)v3 + 4);
  if (v4 != a2)
  {
    if (v4 <= a2)
    {
      v2 = a1;
      if (v3 != a1)
      {
        while (*((_DWORD *)v3 + 4) < a2)
        {
          v3 = (uint64_t *)v3[1];
          if (v3 == a1)
          {
            v2 = a1;
            goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
    }
    else if (v2 != v3)
    {
      while (*((_DWORD *)v3 + 4) > a2)
      {
        v3 = (uint64_t *)*v3;
        if (v3 == v2)
          goto LABEL_17;
      }
LABEL_16:
      v2 = v3;
    }
LABEL_17:
    a1[3] = (uint64_t)v2;
    return v2;
  }
  return v3;
}

void sub_1C4DB3B1C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v7 = sub_1C617C028(a1 + 48, a2);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v8 = a1 + 56;
    v9 = 4;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(unsigned int *)(a1 + 64);
  }
  if (v8 + 16 * v9 != v7)
  {
    v10 = *(unsigned int **)(v7 + 8);
    v11 = *a2;
    v12 = *(_QWORD *)(*(_QWORD *)a1 + 64);
    if (sub_1C4DB2AAC((int *)(v12 + 24 * v11)) && (v13 = *(_QWORD *)(v12 + 24 * v11 + 8), *(_BYTE *)(v13 + 8)))
    {
      v14 = *(unsigned int *)(v13 + 24);
      if ((_DWORD)v14)
      {
        v15 = *(unsigned int **)(v13 + 16);
        v16 = 16 * v14;
        do
        {
          llvm::bfi_detail::IrreducibleGraph::addEdge(a1, (uint64_t)v10, v15, a3);
          v15 += 4;
          v16 -= 16;
        }
        while (v16);
      }
    }
    else
    {
      sub_1C617C0A0(&v17, a1, v10, a3);
    }
  }
}

uint64_t sub_1C4DB3C08(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C617C340(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      *(_DWORD *)v9 = v10;
      *((_QWORD *)v9 + 1) = *(_QWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C617C340(a1, (uint64_t)v14, (uint64_t)v9);
}

void sub_1C4DB3D7C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 56;
        sub_1C484143C((uint64_t)(v4 - 48));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C4DB3DF0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  _DWORD *v6;
  uint64_t *v7;
  uint64_t result;
  unsigned int v9;

  *(_QWORD *)sub_1C4DB3A24(a1[8]) = -1;
  v2 = a1[17];
  v3 = a1[18];
  if (v2 == v3)
    return 1;
  while (1)
  {
    v9 = (unint64_t)(v2 - a1[17]) >> 3;
    v4 = a1[8] + 24 * v9;
    v5 = *(uint64_t **)(v4 + 8);
    v6 = (_DWORD *)v4;
    if (v5)
    {
      v6 = (_DWORD *)(a1[8] + 24 * v9);
      if (*((_BYTE *)v5 + 8))
      {
        do
        {
          v7 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5 && *((_BYTE *)v5 + 8));
        v6 = (_DWORD *)v7[12];
      }
    }
    if (*v6 == *(_DWORD *)v4)
    {
      result = sub_1C4DB3508((uint64_t)a1, 0, &v9);
      if (!(_DWORD)result)
        break;
    }
    v2 += 8;
    if (v2 == v3)
      return 1;
  }
  return result;
}

void sub_1C4DB3EBC(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v38;
  char v39;
  unsigned int v40;
  BOOL v41;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t *v62;
  uint64_t v63;
  void **v64;
  void **v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int v75;
  _BYTE v76[64];
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  int v81;
  _BYTE v82[64];
  __int128 v83;
  __int128 v84;
  __int128 v85;

  v84 = 0u;
  v85 = 0u;
  v83 = 0u;
  v78 = v82;
  v79 = v82;
  v80 = 8;
  v81 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  v77 = v4;
  sub_1C4DB5818(&v83, &v77);
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v78, v4);
  while (*((_QWORD *)&v85 + 1))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v83 + 1) + (((unint64_t)v85 >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (v85 & 0x1FF));
    *(_QWORD *)&v85 = v85 + 1;
    --*((_QWORD *)&v85 + 1);
    if ((unint64_t)v85 >= 0x400)
    {
      operator delete(**((void ***)&v83 + 1));
      *((_QWORD *)&v83 + 1) += 8;
      *(_QWORD *)&v85 = v85 - 512;
    }
    v6 = *(_QWORD *)(v5 + 40);
    if (v6 != v5 + 40)
    {
      if (v6)
        v7 = v6 - 24;
      else
        v7 = 0;
      v8 = *(unsigned __int8 *)(v7 + 16);
      v9 = v8 - 29;
      if (v8 != 30)
      {
        v10 = 2;
        switch(v9)
        {
          case 1:
            goto LABEL_140;
          case 2:
            v10 = (*(_DWORD *)(v7 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_26;
          case 3:
          case 9:
            v10 = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_26;
          case 4:
            goto LABEL_16;
          case 7:
            v10 = *(_WORD *)(v7 + 18) & 1;
            goto LABEL_26;
          case 8:
            v10 = 1;
            goto LABEL_16;
          case 10:
            v10 = *(_DWORD *)(v7 + 80) + 1;
LABEL_26:
            if (!v10)
              continue;
            goto LABEL_16;
          default:
            continue;
        }
      }
      if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 3)
        v10 = 2;
      else
        v10 = 1;
LABEL_16:
      v11 = 0;
      v12 = 0;
      v13 = v10;
      v14 = v7 - 64;
      do
      {
        v72 = 0;
        v15 = *(unsigned __int8 *)(v7 + 16);
        if (v15 != 30)
          __asm { BR              X9 }
        v16 = *(_QWORD *)(v7 - 32 - 32 * v12);
        v72 = (char *)v16;
        if (llvm::BranchProbabilityInfo::getEdgeProbability(*(_QWORD *)(a1 + 112), v5, v16))
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v78, v16);
          if (v17)
            sub_1C4DB5818(&v83, &v72);
        }
        ++v12;
        v11 += 2;
        v14 += 32;
      }
      while (v13 != v12);
    }
  }
  v72 = v76;
  v73 = v76;
  v74 = 8;
  v75 = 0;
  v18 = *(_QWORD *)(a1 + 128);
  v19 = v18 + 72;
  v20 = *(_QWORD *)(v18 + 80);
  v21 = a2;
  if (v20 != v18 + 72)
  {
    do
    {
      if (v20)
        v22 = v20 - 24;
      else
        v22 = 0;
      v23 = *(_QWORD *)(v22 + 40);
      if (v23 == v22 + 40)
      {
LABEL_42:
        v25 = (char *)sub_1C477672C((uint64_t)&v78, v22);
        if (v79 == v78)
          v26 = (uint64_t *)((char *)&v80 + 4);
        else
          v26 = &v80;
        if (v25 != &v79[8 * *(unsigned int *)v26])
        {
          v27 = *((_QWORD *)&v83 + 1);
          if ((_QWORD)v84 == *((_QWORD *)&v83 + 1))
            v28 = 0;
          else
            v28 = (((_QWORD)v84 - *((_QWORD *)&v83 + 1)) << 6) - 1;
          v29 = *((_QWORD *)&v85 + 1);
          v30 = *((_QWORD *)&v85 + 1) + v85;
          if (v28 == *((_QWORD *)&v85 + 1) + (_QWORD)v85)
          {
            sub_1C4DB589C((uint64_t)&v83);
            v29 = *((_QWORD *)&v85 + 1);
            v27 = *((_QWORD *)&v83 + 1);
            v30 = v85 + *((_QWORD *)&v85 + 1);
          }
          *(_QWORD *)(*(_QWORD *)(v27 + ((v30 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v30 & 0x1FF)) = v22;
          *((_QWORD *)&v85 + 1) = v29 + 1;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v72, v22);
        }
      }
      else
      {
        if (v23)
          v24 = v23 - 24;
        else
          v24 = 0;
        if (*(_BYTE *)(v24 + 16) != 30)
        {
          switch(*(_BYTE *)(v24 + 16))
          {
            case 0x1E:
LABEL_140:
              __break(1u);
              return;
            case 0x1F:
              v31 = (*(_DWORD *)(v24 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_55;
            case 0x20:
            case 0x26:
              v31 = (*(_DWORD *)(v24 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_55;
            case 0x21:
            case 0x25:
              break;
            case 0x24:
              v31 = *(_WORD *)(v24 + 18) & 1;
              goto LABEL_55;
            case 0x27:
              v31 = *(_DWORD *)(v24 + 80) + 1;
LABEL_55:
              if (!v31)
                goto LABEL_42;
              break;
            default:
              goto LABEL_42;
          }
        }
      }
      v20 = *(_QWORD *)(v20 + 8);
    }
    while (v20 != v19);
LABEL_85:
    while (*((_QWORD *)&v85 + 1))
    {
      v32 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v83 + 1) + (((unint64_t)v85 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v85 & 0x1FF));
      *(_QWORD *)&v85 = v85 + 1;
      --*((_QWORD *)&v85 + 1);
      if ((unint64_t)v85 >= 0x400)
      {
        operator delete(**((void ***)&v83 + 1));
        *((_QWORD *)&v83 + 1) += 8;
        *(_QWORD *)&v85 = v85 - 512;
      }
      v33 = *(_QWORD *)(v32 + 8);
      if (v33)
      {
        while (1)
        {
          v34 = *(_QWORD *)(v33 + 24);
          v35 = *(unsigned __int8 *)(v34 + 16);
          v36 = v34 && v35 >= 0x1C;
          if (v36 && v35 - 29 <= 0xA)
            break;
          v33 = *(_QWORD *)(v33 + 8);
          if (!v33)
            goto LABEL_85;
        }
LABEL_73:
        v38 = *(_QWORD *)(v34 + 40);
        v71 = v38;
        if (llvm::BranchProbabilityInfo::getEdgeProbability(*(_QWORD *)(a1 + 112), v38, v32))
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v72, v38);
          if (v39)
            sub_1C4DB5818(&v83, &v71);
        }
        while (1)
        {
          v33 = *(_QWORD *)(v33 + 8);
          if (!v33)
            break;
          v34 = *(_QWORD *)(v33 + 24);
          v40 = *(unsigned __int8 *)(v34 + 16);
          if (v34)
            v41 = v40 >= 0x1C;
          else
            v41 = 0;
          if (v41 && v40 - 29 < 0xB)
            goto LABEL_73;
        }
      }
    }
  }
  v43 = -1;
  v44 = *(_QWORD *)(a1 + 128) + 72;
  do
  {
    v44 = *(_QWORD *)(v44 + 8);
    ++v43;
  }
  while (v44 != *(_QWORD *)(a1 + 128) + 72);
  sub_1C4DB1D18((uint64_t)a2, v43);
  v45 = *(_QWORD *)(a1 + 128);
  v46 = v45 + 72;
  v47 = *(_QWORD *)(v45 + 80);
  if (v47 != v45 + 72)
  {
    do
    {
      if (v47)
        v48 = v47 - 24;
      else
        v48 = 0;
      v49 = (char *)sub_1C477672C((uint64_t)&v78, v48);
      if (v79 == v78)
        v50 = (uint64_t *)((char *)&v80 + 4);
      else
        v50 = &v80;
      if (v49 != &v79[8 * *(unsigned int *)v50])
      {
        v51 = (char *)sub_1C477672C((uint64_t)&v72, v48);
        v52 = v73 == v72 ? (uint64_t *)((char *)&v74 + 4) : &v74;
        if (v51 != &v73[8 * *(unsigned int *)v52])
        {
          v54 = v21[1];
          v53 = (unint64_t)v21[2];
          if ((unint64_t)v54 >= v53)
          {
            v56 = *v21;
            v57 = v54 - v56;
            v58 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 61)
              abort();
            v59 = v53 - (_QWORD)v56;
            if (v59 >> 2 > v58)
              v58 = v59 >> 2;
            if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
              v60 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v60 = v58;
            if (v60)
            {
              if (v60 >> 61)
                sub_1C4764EE4();
              v61 = (char *)operator new(8 * v60);
            }
            else
            {
              v61 = 0;
            }
            v62 = (uint64_t *)&v61[8 * v57];
            *v62 = v48;
            v55 = v62 + 1;
            if (v54 == v56)
            {
              v21 = a2;
            }
            else
            {
              do
              {
                v63 = *--v54;
                *--v62 = v63;
              }
              while (v54 != v56);
              v21 = a2;
              v54 = *a2;
            }
            *v21 = v62;
            v21[1] = v55;
            v21[2] = (uint64_t *)&v61[8 * v60];
            if (v54)
              operator delete(v54);
          }
          else
          {
            *v54 = v48;
            v55 = v54 + 1;
          }
          v21[1] = v55;
        }
      }
      v47 = *(_QWORD *)(v47 + 8);
    }
    while (v47 != v46);
  }
  if (v73 != v72)
    free(v73);
  if (v79 != v78)
    free(v79);
  v64 = (void **)*((_QWORD *)&v83 + 1);
  v65 = (void **)v84;
  *((_QWORD *)&v85 + 1) = 0;
  v66 = v84 - *((_QWORD *)&v83 + 1);
  if ((_QWORD)v84 - *((_QWORD *)&v83 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v64);
      v65 = (void **)v84;
      v64 = (void **)(*((_QWORD *)&v83 + 1) + 8);
      *((_QWORD *)&v83 + 1) = v64;
      v66 = v84 - (_QWORD)v64;
    }
    while ((_QWORD)v84 - (_QWORD)v64 > 0x10uLL);
  }
  v67 = v66 >> 3;
  if (v67 == 1)
  {
    v68 = 256;
  }
  else
  {
    if (v67 != 2)
      goto LABEL_131;
    v68 = 512;
  }
  *(_QWORD *)&v85 = v68;
LABEL_131:
  if (v64 != v65)
  {
    do
    {
      v69 = *v64++;
      operator delete(v69);
    }
    while (v64 != v65);
    if ((_QWORD)v84 != *((_QWORD *)&v83 + 1))
      *(_QWORD *)&v84 = v84 + ((*((_QWORD *)&v83 + 1) - v84 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if ((_QWORD)v83)
    operator delete((void *)v83);
}

uint64_t sub_1C4DB4640(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  __int16 v4;
  __int16 v5;

  v3 = *(_QWORD *)a1;
  if (v3)
  {
    if (*(_QWORD *)a2)
    {
      v4 = *(_WORD *)(a1 + 8) - *(_WORD *)(a2 + 8);
      *(_QWORD *)a1 = llvm::ScaledNumbers::divide64(v3, *(_QWORD *)a2);
      *(_WORD *)(a1 + 8) = v5;
      sub_1C4DB5C98(a1, v4);
    }
    else
    {
      *(_QWORD *)a1 = -1;
      *(_WORD *)(a1 + 8) = 0x3FFF;
    }
  }
  return a1;
}

void sub_1C4DB46AC(uint64_t a1, _QWORD *a2, uint64_t a3, void **a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  __int16 v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  char *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  BOOL v72;
  char v73;
  unsigned int EdgeProbability;
  unint64_t v75;
  unsigned __int16 v76;
  uint64_t v77;
  int v78;
  llvm::ScaledNumbers *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char *v95;
  _QWORD *v96;
  char *v97;
  char *v98;
  __int128 v99;
  _QWORD *v100;
  char *v101;
  __int16 v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  __int16 v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v121;
  llvm::ScaledNumbers *v122[2];
  __int128 v123;
  uint64_t v124;
  int v125;
  _BYTE v126[24];
  void *v127[3];
  _QWORD v128[4];

  v5 = a2;
  v7 = *a2;
  v6 = a2[1];
  v8 = (v6 - *a2) >> 3;
  sub_1C617C694(v128, v8);
  v110 = v8;
  sub_1C617C408(v127, v8);
  v108 = v7;
  v109 = v6;
  v111 = a3;
  if (v6 != v7)
  {
    v61 = 0;
    if (v8 <= 1)
      v62 = 1;
    else
      v62 = v8;
    v107 = v5;
    v112 = v62;
    do
    {
      v63 = *(_QWORD *)(*v5 + 8 * v61);
      *(_QWORD *)&v123 = v126;
      *((_QWORD *)&v123 + 1) = v126;
      v124 = 2;
      v125 = 0;
      v64 = *(_QWORD *)(v63 + 40);
      if (v64 != v63 + 40)
      {
        if (v64)
          v65 = v64 - 24;
        else
          v65 = 0;
        v66 = *(unsigned __int8 *)(v65 + 16);
        v67 = v66 - 29;
        if (v66 != 30)
        {
          v68 = 2;
          switch(v67)
          {
            case 1:
              __break(1u);
              return;
            case 2:
              v68 = (*(_DWORD *)(v65 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_119;
            case 3:
            case 9:
              v68 = (*(_DWORD *)(v65 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_119;
            case 4:
              goto LABEL_78;
            case 7:
              v68 = *(_WORD *)(v65 + 18) & 1;
              goto LABEL_119;
            case 8:
              v68 = 1;
              goto LABEL_78;
            case 10:
              v68 = *(_DWORD *)(v65 + 80) + 1;
LABEL_119:
              if (!v68)
                goto LABEL_115;
              goto LABEL_78;
            default:
              goto LABEL_115;
          }
        }
        if ((*(_DWORD *)(v65 + 20) & 0x7FFFFFF) == 3)
          v68 = 2;
        else
          v68 = 1;
LABEL_78:
        v69 = 0;
        v119 = v68;
        do
        {
          v70 = *(unsigned __int8 *)(v65 + 16);
          if (v70 != 30)
            __asm { BR              X9 }
          v71 = *(_QWORD *)(v65 - 32 - 32 * v69);
          v122[0] = 0;
          if (sub_1C6144BDC(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v71, v122))
            v72 = v122[0] == (llvm::ScaledNumbers *)(*(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16));
          else
            v72 = 1;
          if (!v72)
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v123, v71);
            if (v73)
            {
              EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(*(_QWORD *)(a1 + 112), v63, v71);
              if (EdgeProbability)
              {
                v75 = llvm::ScaledNumbers::divide64(EdgeProbability, 0x80000000uLL);
                v114 = v76;
                v77 = v76;
                v122[0] = 0;
                v78 = sub_1C6144BDC(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v71, v122);
                v79 = v122[0];
                if (!v78)
                  v79 = (llvm::ScaledNumbers *)(*(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16));
                v80 = *((_QWORD *)v79 + 1);
                v81 = v128[0] + 24 * v61;
                v84 = *(_QWORD **)(v81 + 8);
                v82 = (_QWORD *)(v81 + 8);
                v83 = v84;
                v86 = v82 + 1;
                v85 = v82[1];
                if ((unint64_t)v84 >= v85)
                {
                  v113 = v75;
                  v89 = (_QWORD *)(v128[0] + 24 * v61);
                  v90 = (_QWORD *)*v89;
                  v91 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v83 - *v89) >> 3);
                  v92 = v91 + 1;
                  if (v91 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_125:
                    abort();
                  v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (_QWORD)v90) >> 3);
                  if (2 * v93 > v92)
                    v92 = 2 * v93;
                  if (v93 >= 0x555555555555555)
                    v94 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v94 = v92;
                  if (v94)
                  {
                    v104 = v80;
                    v105 = v128[0] + 24 * v61;
                    v106 = v82 + 1;
                    if (v94 > 0xAAAAAAAAAAAAAAALL)
LABEL_126:
                      sub_1C4764EE4();
                    v96 = v82;
                    v103 = v94;
                    v95 = (char *)operator new(24 * v94);
                    v94 = v103;
                    v80 = v104;
                    v82 = v96;
                    v89 = (_QWORD *)v105;
                    v86 = v106;
                  }
                  else
                  {
                    v95 = 0;
                  }
                  v97 = &v95[24 * v91];
                  v87 = v113;
                  *(_QWORD *)v97 = v80;
                  *((_QWORD *)v97 + 1) = v113;
                  *((_QWORD *)v97 + 2) = v77;
                  v98 = v97;
                  if (v83 == v90)
                  {
                    a3 = v111;
                  }
                  else
                  {
                    a3 = v111;
                    do
                    {
                      v99 = *(_OWORD *)(v83 - 3);
                      *((_QWORD *)v98 - 1) = *(v83 - 1);
                      *(_OWORD *)(v98 - 24) = v99;
                      v98 -= 24;
                      v83 -= 3;
                    }
                    while (v83 != v90);
                    v83 = (_QWORD *)*v89;
                  }
                  *v89 = v98;
                  v88 = v97 + 24;
                  *v82 = v97 + 24;
                  *v86 = &v95[24 * v94];
                  if (v83)
                  {
                    v100 = v82;
                    operator delete(v83);
                    v82 = v100;
                    v87 = v113;
                  }
                  v5 = v107;
                }
                else
                {
                  *v83 = v80;
                  v83[1] = v75;
                  v87 = v75;
                  v88 = v83 + 3;
                  v83[2] = v77;
                }
                v62 = v112;
                *v82 = v88;
                v101 = (char *)v127[0] + 16 * v61;
                *(_QWORD *)v101 = sub_1C617C634(*(_QWORD *)v101, *((_WORD *)v101 + 4), v87, v114);
                *((_WORD *)v101 + 4) = v102;
                if (v102 >= 0x4000)
                {
                  *(_QWORD *)v101 = -1;
                  *((_WORD *)v101 + 4) = 0x3FFF;
                }
              }
            }
          }
          ++v69;
        }
        while (v69 != v119);
        if (*((_QWORD *)&v123 + 1) != (_QWORD)v123)
          free(*((void **)&v123 + 1));
      }
LABEL_115:
      ++v61;
    }
    while (v61 != v62);
  }
  sub_1C617C694(&v123, v110);
  sub_1C617C730(a4);
  *(_OWORD *)a4 = v123;
  a4[2] = (void *)v124;
  v124 = 0;
  v123 = 0uLL;
  v122[0] = (llvm::ScaledNumbers *)&v123;
  sub_1C4DB60AC((void ***)v122);
  if (v109 != v108)
  {
    v9 = 0;
    v10 = v110;
    if (v110 <= 1)
      v10 = 1;
    v116 = v10;
    do
    {
      v11 = (uint64_t **)(v128[0] + 24 * v9);
      v13 = *v11;
      v12 = v11[1];
      v121 = v12;
      while (v13 != v12)
      {
        v14 = *v13;
        *(_OWORD *)v122 = *(_OWORD *)(v13 + 1);
        v15 = (char *)*a4;
        *(llvm::ScaledNumbers **)&v123 = v122[0];
        WORD4(v123) = v122[1];
        if (v122[0])
        {
          v16 = *((_QWORD *)v127[0] + 2 * v9);
          if (v16)
          {
            v17 = WORD4(v123) - *((_WORD *)v127[0] + 8 * v9 + 4);
            *(_QWORD *)&v123 = llvm::ScaledNumbers::divide64((unint64_t)v122[0], v16);
            WORD4(v123) = v18;
            sub_1C4DB5C98((uint64_t)&v123, v17);
            v19 = v123;
          }
          else
          {
            v19 = -1;
            *(_QWORD *)&v123 = -1;
            WORD4(v123) = 0x3FFF;
          }
        }
        else
        {
          v19 = 0;
        }
        v20 = *((_QWORD *)&v123 + 1);
        v21 = &v15[24 * v14];
        v24 = (_QWORD *)*((_QWORD *)v21 + 1);
        v22 = v21 + 8;
        v23 = v24;
        v25 = v22[1];
        if ((unint64_t)v24 >= v25)
        {
          v27 = v9;
          v28 = &v15[24 * v14];
          v29 = *(_QWORD **)v28;
          v30 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - *(_QWORD *)v28) >> 3);
          v31 = v30 + 1;
          if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_125;
          v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v29) >> 3);
          if (2 * v32 > v31)
            v31 = 2 * v32;
          if (v32 >= 0x555555555555555)
            v33 = 0xAAAAAAAAAAAAAAALL;
          else
            v33 = v31;
          if (v33)
          {
            if (v33 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_126;
            v117 = *((_QWORD *)&v123 + 1);
            v34 = (char *)operator new(24 * v33);
            v20 = v117;
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[24 * v30];
          v9 = v27;
          *(_QWORD *)v35 = v27;
          *((_QWORD *)v35 + 1) = v19;
          *((_QWORD *)v35 + 2) = v20;
          v36 = v35;
          if (v23 != v29)
          {
            do
            {
              v37 = *(_OWORD *)(v23 - 3);
              *((_QWORD *)v36 - 1) = *(v23 - 1);
              *(_OWORD *)(v36 - 24) = v37;
              v36 -= 24;
              v23 -= 3;
            }
            while (v23 != v29);
            v23 = *(_QWORD **)v28;
          }
          *(_QWORD *)v28 = v36;
          v26 = v35 + 24;
          *v22 = v35 + 24;
          v22[1] = &v34[24 * v33];
          if (v23)
            operator delete(v23);
        }
        else
        {
          *v23 = v9;
          v23[1] = v19;
          v26 = v23 + 3;
          v23[2] = v20;
        }
        *v22 = v26;
        v13 += 3;
        v12 = v121;
      }
      ++v9;
    }
    while (v9 != v116);
  }
  v38 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 80);
  if (v38)
    v39 = v38 - 24;
  else
    v39 = 0;
  *(_QWORD *)&v123 = 0;
  v40 = sub_1C6144BDC(*(_QWORD *)v111, *(_DWORD *)(v111 + 16), v39, &v123);
  v41 = v123;
  if (!v40)
    v41 = *(_QWORD *)v111 + 16 * *(unsigned int *)(v111 + 16);
  if (v109 != v108)
  {
    v42 = 0;
    v43 = *(_QWORD *)(v41 + 8);
    if (v110 <= 1)
      v44 = 1;
    else
      v44 = v110;
    v118 = *(_QWORD *)(v41 + 8);
    do
    {
      if (*(_QWORD *)(v128[0] + 24 * v42) == *(_QWORD *)(v128[0] + 24 * v42 + 8))
      {
        v45 = (uint64_t)*a4 + 24 * v43;
        v48 = *(_QWORD **)(v45 + 8);
        v47 = (_QWORD *)(v45 + 8);
        v46 = v48;
        v49 = v47[1];
        if ((unint64_t)v48 >= v49)
        {
          v51 = (char *)*a4 + 24 * v43;
          v52 = *(_QWORD **)v51;
          v53 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v46 - *(_QWORD *)v51) >> 3);
          v54 = v53 + 1;
          if (v53 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_125;
          v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - (_QWORD)v52) >> 3);
          if (2 * v55 > v54)
            v54 = 2 * v55;
          if (v55 >= 0x555555555555555)
            v56 = 0xAAAAAAAAAAAAAAALL;
          else
            v56 = v54;
          if (v56)
          {
            if (v56 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_126;
            v57 = (char *)operator new(24 * v56);
          }
          else
          {
            v57 = 0;
          }
          v58 = &v57[24 * v53];
          *(_QWORD *)v58 = v42;
          *(_OWORD *)(v58 + 8) = xmmword_1C64169E0;
          v59 = v58;
          if (v46 != v52)
          {
            do
            {
              v60 = *(_OWORD *)(v46 - 3);
              *((_QWORD *)v59 - 1) = *(v46 - 1);
              *(_OWORD *)(v59 - 24) = v60;
              v59 -= 24;
              v46 -= 3;
            }
            while (v46 != v52);
            v46 = *(_QWORD **)v51;
          }
          *(_QWORD *)v51 = v59;
          v50 = v58 + 24;
          *v47 = v58 + 24;
          v47[1] = &v57[24 * v56];
          if (v46)
            operator delete(v46);
          v43 = v118;
        }
        else
        {
          *v46 = v42;
          *(_OWORD *)(v46 + 1) = xmmword_1C64169E0;
          v50 = v46 + 3;
        }
        *v47 = v50;
      }
      ++v42;
    }
    while (v42 != v44);
  }
  if (v127[0])
  {
    v127[1] = v127[0];
    operator delete(v127[0]);
  }
  *(_QWORD *)&v123 = v128;
  sub_1C4DB60AC((void ***)&v123);
}

void sub_1C4DB4FE8(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  __int16 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  void **v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __int16 v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  __int16 v64;
  __int16 v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  unsigned __int16 v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  __int16 v85;
  int v86;
  char v87;
  unint64_t v88;
  __int16 v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  void **v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  llvm::ScaledNumbers *v105;
  char v106;
  __int16 v107;
  unint64_t v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  llvm::ScaledNumbers *v114;
  __int16 v115;
  uint64_t v116;
  _OWORD v117[2];
  __int128 v118;
  _QWORD v119[3];
  unint64_t v120;
  __int16 v121;
  void **v122[2];
  _DWORD v123[14];
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v2 = (unint64_t)(1.0 / *(double *)&xmmword_1ED82CEB8);
  if (v2)
  {
    v111 = llvm::ScaledNumbers::divide64(1uLL, v2);
    v107 = v3;
  }
  else
  {
    v111 = -1;
    v107 = 0x3FFF;
  }
  v4 = dword_1ED82CDF8;
  v5 = (a2[1] - *a2) >> 4;
  sub_1C617C694(v119, v5);
  v7 = *a2;
  v6 = a2[1];
  if (v6 == *a2)
  {
    LODWORD(v27) = 0;
  }
  else
  {
    v108 = v5;
    v8 = 0;
    do
    {
      v9 = *a1 + 24 * v8;
      v11 = *(_QWORD **)v9;
      v10 = *(_QWORD **)(v9 + 8);
      if (*(_QWORD **)v9 != v10)
      {
        do
        {
          v12 = v119[0] + 24 * *v11;
          v15 = *(unint64_t **)(v12 + 8);
          v14 = (_QWORD *)(v12 + 8);
          v13 = v15;
          v16 = v14[1];
          if ((unint64_t)v15 >= v16)
          {
            v18 = (void **)(v119[0] + 24 * *v11);
            v19 = (unint64_t *)*v18;
            v20 = ((char *)v13 - (_BYTE *)*v18) >> 3;
            v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 61)
              abort();
            v22 = v16 - (_QWORD)v19;
            if (v22 >> 2 > v21)
              v21 = v22 >> 2;
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
              v23 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v23 = v21;
            if (v23)
            {
              if (v23 >> 61)
                sub_1C4764EE4();
              v24 = (char *)operator new(8 * v23);
            }
            else
            {
              v24 = 0;
            }
            v25 = (unint64_t *)&v24[8 * v20];
            *v25 = v8;
            v17 = v25 + 1;
            while (v13 != v19)
            {
              v26 = *--v13;
              *--v25 = v26;
            }
            *v18 = v25;
            *v14 = v17;
            v14[1] = &v24[8 * v23];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *v13 = v8;
            v17 = v13 + 1;
          }
          *v14 = v17;
          v11 += 3;
        }
        while (v11 != v10);
        v7 = *a2;
        v6 = a2[1];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 4);
    v27 = (unint64_t)(v6 - v7) >> 4;
    v5 = v108;
  }
  v122[0] = (void **)v123;
  v122[1] = (void **)0x600000000;
  sub_1C4765AA4((char *)v122, (v27 + 63) >> 6, 0);
  v123[12] = v27;
  v118 = 0u;
  memset(v117, 0, sizeof(v117));
  v120 = 0;
  v29 = *a2;
  v28 = a2[1];
  if (v28 != *a2)
  {
    v30 = 0;
    v110 = v5 * v4;
    do
    {
      if (*(_QWORD *)(v29 + 16 * v30))
      {
        sub_1C4DB5E24(v117, &v120);
        v122[0][v120 >> 6] = (void *)((unint64_t)v122[0][v120 >> 6] | (1 << v120));
        v30 = v120;
        v29 = *a2;
        v28 = a2[1];
      }
      v120 = ++v30;
    }
    while (v30 < (v28 - v29) >> 4);
    if (v110)
    {
      v31 = *((_QWORD *)&v118 + 1);
      if (*((_QWORD *)&v118 + 1))
      {
        v32 = __clz(v111);
        v33 = (v32 ^ 0x3Fu) + v107;
        v34 = 1 << (v32 ^ 0x3Fu);
        v35 = 1 << (62 - v32);
        v36 = (v35 & v111) == 0;
        if ((v35 & v111) != 0)
          v37 = (v33 + 1);
        else
          v37 = v33;
        if (v36)
          v38 = 0xFFFFFFFF00000000;
        else
          v38 = 0x100000000;
        v39 = v38 | v37;
        if (v34 == v111)
          v39 = v33;
        v109 = v39 - (SHIDWORD(v39) > 0);
        v40 = 1;
        while (1)
        {
          v116 = 0;
          v41 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v117[0] + 1) + (((unint64_t)v118 >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * (v118 & 0x1FF));
          v116 = v41;
          *(_QWORD *)&v118 = v118 + 1;
          *((_QWORD *)&v118 + 1) = v31 - 1;
          if ((unint64_t)v118 >= 0x400)
          {
            operator delete(**((void ***)&v117[0] + 1));
            *((_QWORD *)&v117[0] + 1) += 8;
            *(_QWORD *)&v118 = v118 - 512;
            LODWORD(v41) = v116;
          }
          v122[0][v41 >> 6] = (void *)((unint64_t)v122[0][v41 >> 6] & ~(1 << v41));
          v114 = 0;
          v115 = 0;
          v42 = (_QWORD *)(*a1 + 24 * v116);
          v43 = v42[1];
          if (*v42 == v43)
          {
            v44 = 0;
            v46 = 1;
          }
          else
          {
            v44 = 0;
            v45 = *v42 + 8;
            v46 = 1;
            do
            {
              v47 = *(_QWORD *)(v45 - 8);
              if (v47 == v116)
              {
                v46 = sub_1C4DB5EAC(v46, v44, *(_QWORD *)v45, *(_WORD *)(v45 + 8));
                v44 = v48;
              }
              else
              {
                v50 = *a2 + 16 * v47;
                v51 = *(_QWORD *)v50;
                v121 = *(_WORD *)(v50 + 8);
                v120 = v51;
                v52 = sub_1C4DB6028((uint64_t)&v120, v45);
                v114 = (llvm::ScaledNumbers *)sub_1C617C634((unint64_t)v114, v115, *(_QWORD *)v52, *(_WORD *)(v52 + 8));
                v115 = v53;
                if (v53 >= 0x4000)
                {
                  v114 = (llvm::ScaledNumbers *)-1;
                  v115 = 0x3FFF;
                }
              }
              v49 = v45 + 16;
              v45 += 24;
            }
            while (v49 != v43);
            if (!v46)
            {
              if (v114)
              {
                v54 = -1;
                v114 = (llvm::ScaledNumbers *)-1;
                v115 = 0x3FFF;
                goto LABEL_73;
              }
              goto LABEL_139;
            }
          }
          v55 = __clz(v46);
          v56 = (v55 ^ 0x3Fu) + v44;
          v57 = 1 << (v55 ^ 0x3Fu);
          v58 = 1 << (62 - v55);
          v59 = (v58 & v46) == 0;
          if ((v58 & v46) != 0)
            v60 = (v56 + 1);
          else
            v60 = v56;
          if (v59)
            v61 = 0xFFFFFFFF00000000;
          else
            v61 = 0x100000000;
          v62 = v61 | v60;
          if (v57 == v46)
            v62 = v56;
          if (SHIDWORD(v62) <= 0)
            v63 = 0;
          else
            v63 = -1;
          if (!(v63 + (_DWORD)v62))
          {
            if (v44 < 0)
            {
              if (v46 >> -(char)v44 == 1 && 1 << -v44 >= v46)
                goto LABEL_72;
            }
            else
            {
              if (v44)
                v86 = -1;
              else
                v86 = 0;
              if (1uLL >> v44 >= v46 && !v86)
                goto LABEL_72;
            }
          }
          if (v114)
          {
            v64 = v115 - v44;
            v114 = (llvm::ScaledNumbers *)llvm::ScaledNumbers::divide64((unint64_t)v114, v46);
            v115 = v65;
            sub_1C4DB5C98((uint64_t)&v114, v64);
LABEL_72:
            v54 = (unint64_t)v114;
            goto LABEL_73;
          }
LABEL_139:
          v54 = 0;
LABEL_73:
          v66 = *a2 + 16 * v116;
          v67 = *(_QWORD *)v66;
          v68 = *(__int16 *)(v66 + 8);
          v69 = v115;
          if (v67)
          {
            if (!v54)
              goto LABEL_93;
            v70 = __clz(v67);
            v71 = (v70 ^ 0x3Fu) + v68;
            v72 = 1 << (v70 ^ 0x3Fu);
            v73 = 1 << (62 - v70);
            v74 = (v73 & v67) == 0;
            if ((v73 & v67) != 0)
              v75 = (v71 + 1);
            else
              v75 = v71;
            if (v74)
              v76 = 0xFFFFFFFF00000000;
            else
              v76 = 0x100000000;
            v77 = v76 | v75;
            if (v72 == v67)
              v77 = v71;
            v78 = __clz(v54);
            v79 = (v78 ^ 0x3Fu) + v115;
            if (1 << (v78 ^ 0x3Fu) != v54)
            {
              v80 = 1 << (62 - v78);
              if ((v80 & v54) != 0)
                v79 = (v79 + 1);
              else
                v79 = v79;
              if ((v80 & v54) != 0)
                v81 = 0x100000000;
              else
                v81 = 0xFFFFFFFF00000000;
              v79 |= v81;
            }
            v82 = v77 - (SHIDWORD(v77) > 0);
            v83 = v79 - (SHIDWORD(v79) > 0);
            if (v82 == v83)
            {
              v87 = v68 - v115;
              if (v68 < v115)
              {
                if (v67 >> (v115 - v68) >= v54)
                  goto LABEL_93;
              }
              else if (v54 >> v87 < v67 || v54 >> v87 <= v67 && v54 >> v87 << v87 >= v54)
              {
LABEL_93:
                v84 = v67;
                v85 = v68;
                goto LABEL_108;
              }
            }
            else if (v82 >= v83)
            {
              goto LABEL_93;
            }
          }
          else if (!v54)
          {
            goto LABEL_93;
          }
          v84 = v54;
          v85 = v115;
          v54 = v67;
          v69 = v68;
LABEL_108:
          v88 = sub_1C4DB5EAC(v84, v85, v54, v69);
          if (!v88)
            goto LABEL_128;
          if (!v111)
            goto LABEL_120;
          v90 = __clz(v88);
          v91 = (v90 ^ 0x3Fu) + v89;
          v92 = 1 << (v90 ^ 0x3Fu);
          v93 = 1 << (62 - v90);
          v94 = (v93 & v88) == 0;
          if ((v93 & v88) != 0)
            v95 = (v91 + 1);
          else
            v95 = v91;
          if (v94)
            v96 = 0xFFFFFFFF00000000;
          else
            v96 = 0x100000000;
          v97 = v96 | v95;
          if (v92 == v88)
            v97 = v91;
          v98 = v97 - (SHIDWORD(v97) > 0);
          if (v98 == v109)
          {
            if (v89 < v107)
            {
              v106 = v107 - v89;
              if (v88 >> (v107 - v89) < v111)
                goto LABEL_128;
              if (v88 >> v106 > v111)
              {
LABEL_120:
                sub_1C4DB5E24(v117, &v116);
                v99 = v122[0];
                v122[0][v116 >> 6] = (void *)((unint64_t)v122[0][v116 >> 6] | (1 << v116));
                v100 = v119[0] + 24 * v116;
                v101 = *(unint64_t **)v100;
                v102 = *(unint64_t **)(v100 + 8);
                while (v101 != v102)
                {
                  v120 = 0;
                  v120 = *v101;
                  if ((((unint64_t)v99[v120 >> 6] >> v120) & 1) == 0)
                  {
                    sub_1C4DB5E24(v117, &v120);
                    v99 = v122[0];
                    v122[0][v120 >> 6] = (void *)((unint64_t)v122[0][v120 >> 6] | (1 << v120));
                  }
                  ++v101;
                }
                goto LABEL_128;
              }
              v103 = v88 >> v106 << v106;
            }
            else
            {
              v103 = v111 >> (v89 - v107);
            }
            if (v103 < v88)
              goto LABEL_120;
          }
          else if (v98 >= v109)
          {
            goto LABEL_120;
          }
LABEL_128:
          v104 = *a2 + 16 * v116;
          v105 = v114;
          *(_WORD *)(v104 + 8) = v115;
          *(_QWORD *)v104 = v105;
          if (v40 < v110)
          {
            ++v40;
            v31 = *((_QWORD *)&v118 + 1);
            if (*((_QWORD *)&v118 + 1))
              continue;
          }
          break;
        }
      }
    }
  }
  sub_1C484143C((uint64_t)v117);
  if ((_DWORD *)v122[0] != v123)
    free(v122[0]);
  v122[0] = (void **)v119;
  sub_1C4DB60AC(v122);
}

void sub_1C4DB5818(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1C4DB589C((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1C4DB589C(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *i;
  char *v40;
  __int128 v41;
  void *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_20:
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v18 = 1;
      else
        v18 = (v6 - v10) >> 2;
      if (!(v18 >> 61))
      {
        v19 = (char *)operator new(8 * v18);
        v20 = &v19[8 * (v18 >> 2)];
        v21 = &v19[8 * v18];
        v23 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v23 & 0xFFFFFFFFFFFFFFF8];
          v24 = 8 * (v23 >> 3);
          v25 = &v19[8 * (v18 >> 2)];
          do
          {
            v26 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v25 = v26;
            v25 += 8;
            v24 -= 8;
          }
          while (v24);
        }
        goto LABEL_18;
      }
LABEL_44:
      sub_1C4764EE4();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_20;
  }
  v27 = *(_QWORD *)(a1 + 16);
  v28 = v27 - *(_QWORD *)(a1 + 8);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = v29 - *(_QWORD *)a1;
  if (v28 < v30)
  {
    if (v29 != v27)
    {
      *(_QWORD *)&v43 = operator new(0x1000uLL);
      sub_1C61351F0(a1, &v43);
      return;
    }
    *(_QWORD *)&v43 = operator new(0x1000uLL);
    sub_1C6135314((void **)a1, &v43);
    v31 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v32 = *v31;
    v7 = (char *)(v31 + 1);
    v8 = v32;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_20;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v33 = 1;
      else
        v33 = (v6 - v10) >> 2;
      if (!(v33 >> 61))
      {
        v19 = (char *)operator new(8 * v33);
        v20 = &v19[8 * (v33 >> 2)];
        v21 = &v19[8 * v33];
        v34 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v34 & 0xFFFFFFFFFFFFFFF8];
          v35 = 8 * (v34 >> 3);
          v36 = &v19[8 * (v33 >> 2)];
          do
          {
            v37 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v36 = v37;
            v36 += 8;
            v35 -= 8;
          }
          while (v35);
        }
LABEL_18:
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v20;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v21;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_20;
      }
      goto LABEL_44;
    }
    goto LABEL_5;
  }
  if (v29 == *(_QWORD *)a1)
    v38 = 1;
  else
    v38 = v30 >> 2;
  v45 = a1 + 24;
  if (v38 >> 61)
    goto LABEL_44;
  *(_QWORD *)&v43 = operator new(8 * v38);
  *((_QWORD *)&v43 + 1) = v43 + v28;
  *(_QWORD *)&v44 = v43 + v28;
  *((_QWORD *)&v44 + 1) = v43 + 8 * v38;
  v42 = operator new(0x1000uLL);
  sub_1C61351F0((uint64_t)&v43, &v42);
  for (i = *(_QWORD **)(a1 + 16); i != *(_QWORD **)(a1 + 8); sub_1C6135314((void **)&v43, i))
    --i;
  v40 = *(char **)a1;
  v41 = v44;
  *(_OWORD *)a1 = v43;
  *(_OWORD *)(a1 + 16) = v41;
  if (v40)
    operator delete(v40);
}

_QWORD *sub_1C4DB5B2C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C617C588(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4DB5BE4(unint64_t *a1, __int16 *a2, unint64_t *a3, __int16 *a4)
{
  int v4;
  __int16 *v5;
  unint64_t *v6;
  unsigned __int16 v7;
  unint64_t v8;
  int v10;
  int v11;
  int v12;

  LOWORD(v4) = *a2;
  do
  {
    v5 = a4;
    v6 = a3;
    a4 = a2;
    a3 = a1;
    v7 = v4;
    v4 = *v5;
    a1 = v6;
    a2 = v5;
  }
  while (v4 > (__int16)v7);
  v8 = *a3;
  if (*a3)
  {
    if (v7 == (unsigned __int16)v4 || *v6 == 0)
    {
      LOWORD(v4) = v7;
    }
    else
    {
      v10 = (__int16)v7 - v4;
      if (v10 >= 128)
        goto LABEL_15;
      v11 = __clz(v8);
      if (v10 < v11)
        v11 = v10;
      v12 = v10 - v11;
      if (v12 >= 64)
      {
LABEL_15:
        *v6 = 0;
      }
      else
      {
        *a3 = v8 << v11;
        *v6 >>= v12;
        *a4 = v7 - v11;
        *v5 += v12;
      }
      LOWORD(v4) = *a4;
    }
  }
  return (__int16)v4;
}

uint64_t sub_1C4DB5C98(uint64_t result, int a2)
{
  unint64_t v2;
  int v3;
  int v4;
  BOOL v5;
  __int16 v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  char v17;

  if (a2)
  {
    v2 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      if (a2 < 0)
        return sub_1C4DB5DC4(result, -a2);
      v3 = *(__int16 *)(result + 8);
      v4 = 0x3FFF - v3;
      v5 = 0x3FFF - v3 < a2;
      if (0x3FFF - v3 >= a2)
        v4 = a2;
      v6 = v3 + v4;
      *(_WORD *)(result + 8) = v6;
      if (v5)
      {
        v7 = v6;
        v8 = __clz(v2);
        v9 = (v8 ^ 0x3F) + v7;
        v10 = 1 << (62 - v8);
        v11 = (v10 & v2) == 0;
        if ((v10 & v2) != 0)
          v12 = v9 + 1;
        else
          v12 = v9;
        v13 = 0x100000000;
        if (v11)
          v13 = 0xFFFFFFFF00000000;
        v14 = v13 | v12;
        if (1 << (v8 ^ 0x3Fu) == v2)
          v15 = (v8 ^ 0x3Fu) + v7;
        else
          v15 = v14;
        if ((_DWORD)v15 - (SHIDWORD(v15) > 0) == 16446)
        {
          if (v7 <= 16382)
          {
            if (v2 >> ~(_BYTE)v7 == -1 && -1 << (-1 - v7) >= v2)
              return result;
          }
          else
          {
            v17 = v7 + 1;
            if (0xFFFFFFFFFFFFFFFFLL >> v17 == v2 && !(0xFFFFFFFFFFFFFFFFLL >> v17 << v17 == -1 ? 0 : -1))
              return result;
          }
        }
        v16 = a2 - v4;
        if (v16 <= v8)
        {
          *(_QWORD *)result = v2 << v16;
        }
        else
        {
          *(_QWORD *)result = -1;
          *(_WORD *)(result + 8) = 0x3FFF;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4DB5DC4(uint64_t result, int a2)
{
  unint64_t v2;
  int v3;
  int v4;
  int v5;

  if (a2)
  {
    v2 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      if (a2 < 0)
      {
        return sub_1C4DB5C98();
      }
      else
      {
        v3 = *(__int16 *)(result + 8);
        if (v3 + 16382 >= a2)
          v4 = a2;
        else
          v4 = v3 + 16382;
        *(_WORD *)(result + 8) = v3 - v4;
        if (v3 + 16382 < a2)
        {
          v5 = a2 - v4;
          if (v5 < 64)
          {
            *(_QWORD *)result = v2 >> v5;
          }
          else
          {
            *(_QWORD *)result = 0;
            *(_WORD *)(result + 8) = 0;
          }
        }
      }
    }
  }
  return result;
}

void sub_1C4DB5E24(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1C4841174((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[4] + a1[5];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

unint64_t sub_1C4DB5EAC(unint64_t a1, __int16 a2, unint64_t a3, unsigned __int16 a4)
{
  unint64_t result;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unsigned __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;

  v29 = a1;
  v28 = a2;
  v27 = a3;
  v26 = a4;
  sub_1C4DB5BE4(&v29, &v28, &v27, (__int16 *)&v26);
  result = v29;
  if (v29 <= v27)
    return 0;
  if (!a3 || v27)
    return v29 - v27;
  v7 = __clz(a3);
  v8 = (v7 ^ 0x3F) + a4;
  v9 = 1 << (v7 ^ 0x3Fu);
  v10 = 1 << (62 - v7);
  v11 = (v10 & a3) == 0;
  if ((v10 & a3) != 0)
    v12 = (v8 + 1);
  else
    v12 = v8;
  v13 = 0x100000000;
  if (v11)
    v14 = 0xFFFFFFFF00000000;
  else
    v14 = 0x100000000;
  v15 = v14 | v12;
  if (v9 == a3)
    v15 = v8;
  v16 = (__int16)(v15 - (SHIDWORD(v15) > 0) + 64);
  v17 = __clz(v29);
  v18 = (v17 ^ 0x3F) + v28;
  v19 = 1 << (62 - v17);
  v20 = (v19 & v29) == 0;
  if ((v19 & v29) != 0)
    v21 = v18 + 1;
  else
    v21 = v18;
  if (v20)
    v13 = 0xFFFFFFFF00000000;
  v22 = v13 | v21;
  if (1 << (v17 ^ 0x3Fu) == v29)
    v22 = (v17 ^ 0x3Fu) + v28;
  v23 = v22 - (SHIDWORD(v22) > 0);
  if (v23 == v16)
  {
    if (v28 < v16)
    {
      if (v29 >> (v23 - v28) == 1
        && 1 << (v23 - v28) >= v29)
      {
        return -1;
      }
    }
    else
    {
      v11 = v28 == v23;
      v24 = 1uLL >> (v28 - v23);
      if (v11)
        v25 = 0;
      else
        v25 = -1;
      if (v24 >= v29 && !v25)
        return -1;
    }
  }
  return result;
}

uint64_t sub_1C4DB6028(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)a1;
  if (v3)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v5 = *(_WORD *)(a2 + 8) + *(_WORD *)(a1 + 8);
      if ((v4 | v3) >> 32)
      {
        v7 = llvm::ScaledNumbers::multiply64(v3, *(_QWORD *)a2);
      }
      else
      {
        v6 = 0;
        v7 = v4 * v3;
      }
      *(_QWORD *)a1 = v7;
      *(_WORD *)(a1 + 8) = v6;
      sub_1C4DB5C98(a1, v5);
    }
    else
    {
      v8 = *(_QWORD *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      *(_QWORD *)a1 = v8;
    }
  }
  return a1;
}

void sub_1C4DB60AC(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C4DB6128(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4)
{
  int v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int EdgeProbability;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  int32x2_t ****v26;
  uint64_t v28;
  unint64_t v30;
  int32x2_t ****v31;
  int32x2_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int32x2_t *****v37;
  int32x2_t ****v38;
  int v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *__p;
  uint64_t v46;
  uint64_t v47;
  void (**v48)(llvm::raw_ostream *__hidden);
  int v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char v53;
  uint64_t v54;
  int v55;
  void **p_p;
  uint64_t (**v57)(llvm::format_object_base *__hidden);
  const char *v58;
  double v59;
  unint64_t *v60;
  int32x2_t ****v61;
  uint64_t v62;

  v6 = *(unsigned __int8 *)(a3 + 16);
  if (v6 != 30)
    __asm { BR              X10 }
  v7 = *(_QWORD *)(a3 - 32 * a4 - 32);
  if (v7)
  {
    v8 = **(uint64_t ***)(a1 + 8);
    if (!*v8)
    {
      __p = 0;
      v46 = 0;
      v47 = 0;
      goto LABEL_47;
    }
    v9 = *(_QWORD *)(*v8 + 112);
    v10 = dword_1ED82C870;
    v46 = 0;
    v47 = 0;
    __p = 0;
    if (!v9)
    {
LABEL_47:
      sub_1C617C7A0((llvm::raw_ostream **)a1, a2, v7, (uint64_t)&__p);
      if (SHIBYTE(v47) < 0)
        operator delete(__p);
      return;
    }
    EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability(v9, a2, a4);
    v49 = 0;
    v53 = 0;
    v54 = 0;
    v48 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    p_p = &__p;
    v55 = 0;
    v51 = 0;
    v52 = 0;
    v50 = 0;
    v57 = &off_1E7FA8D00;
    v58 = "label=\"%.1f%%\"";
    v59 = (double)EdgeProbability * 100.0 * 4.65661287e-10;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v48, (uint64_t)&v57);
    if (!(_DWORD)v10)
    {
LABEL_44:
      v44 = v52 - v50;
      if (v52 != v50)
      {
        v52 = v50;
        llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v48, v50, v44);
      }
      v48 = off_1E81A6E70;
      if (v55 == 1 && v50)
        MEMORY[0x1CAA32F9C](v50, 0x1000C8077774924, v44);
      goto LABEL_47;
    }
    v12 = *v8;
    if (*v8)
    {
      v14 = *(_DWORD *)(v12 + 176);
      if (v14)
      {
        v15 = *(_QWORD *)(v12 + 160);
        v16 = v14 - 1;
        v17 = (v14 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        v18 = (uint64_t *)(v15 + 56 * v17);
        v19 = *v18;
        if (*v18 == a2)
        {
LABEL_16:
          v22 = 0;
          v23 = *((_DWORD *)v18 + 2);
          LODWORD(v57) = v23;
          v24 = v18[3];
          v25 = v24 & 6;
          v59 = *(double *)&v25;
          v60 = 0;
          v26 = (int32x2_t ****)v18[5];
          v61 = v26;
          if (v26 != (int32x2_t ****)-8192 && v26 != (int32x2_t ****)-4096 && v26 != 0)
          {
            v60 = *(unint64_t **)(v24 & 0xFFFFFFFFFFFFFFF8);
            v22 = v60;
            *(_QWORD *)(v24 & 0xFFFFFFFFFFFFFFF8) = &v59;
            v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
            *(_QWORD *)&v59 = v24 & 0xFFFFFFFFFFFFFFFELL;
            if (v22)
              *v22 = *v22 & 7 | (unint64_t)&v60;
          }
          v28 = v18[6];
          v58 = (const char *)&off_1E8134B58;
          v62 = v28;
          if (v26 != (int32x2_t ****)-8192 && v26 != (int32x2_t ****)-4096 && v26 != 0)
          {
            v30 = v25 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v25 & 0xFFFFFFFFFFFFFFF8) = v22;
            if (v60)
            {
              *v60 = *v60 & 7 | v30;
            }
            else
            {
              v31 = v61;
              v32 = ***v61;
              v33 = (unint64_t)v32[303];
              if (v33 <= v30)
              {
                v34 = v32[305].u32[0];
                if (v33 + 16 * v34 > v30)
                {
                  v35 = v34 - 1;
                  LODWORD(v36) = v35 & ((v61 >> 4) ^ (v61 >> 9));
                  v37 = (int32x2_t *****)(v33 + 16 * v36);
                  v38 = *v37;
                  if (v61 == *v37)
                  {
LABEL_36:
                    *v37 = (int32x2_t ****)-8192;
                    v32[304] = vadd_s32(v32[304], (int32x2_t)0x1FFFFFFFFLL);
                    v31 = v61;
                  }
                  else
                  {
                    v39 = 1;
                    while (v38 != (int32x2_t ****)-4096)
                    {
                      v40 = v36 + v39++;
                      v36 = v40 & v35;
                      v38 = *(int32x2_t *****)(v33 + 16 * v36);
                      if (v61 == v38)
                      {
                        v37 = (int32x2_t *****)(v33 + 16 * v36);
                        goto LABEL_36;
                      }
                    }
                  }
                  *((_BYTE *)v31 + 17) &= ~1u;
                }
              }
            }
          }
          if (v23 != -1)
          {
            v13 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 24 * v23 + 16);
LABEL_41:
            LODWORD(v57) = EdgeProbability;
            v41 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v57, v13);
            v42 = *(_QWORD *)(a1 + 32);
            LODWORD(v57) = (unint64_t)((((v10 << 31) | 0x30uLL) * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
            if (v41 >= llvm::BranchProbability::scale((llvm::BranchProbability *)&v57, v42))
            {
              v43 = v52;
              if ((unint64_t)(v51 - (_QWORD)v52) > 0xB)
              {
                *((_DWORD *)v52 + 2) = 577004914;
                *(_QWORD *)v43 = *(_QWORD *)",color=\"red\"";
                v52 += 12;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v48, ",color=\"red\"", 0xCuLL);
              }
            }
            goto LABEL_44;
          }
        }
        else
        {
          v20 = 1;
          while (v19 != -4096)
          {
            v21 = v17 + v20++;
            v17 = v21 & v16;
            v18 = (uint64_t *)(v15 + 56 * (v21 & v16));
            v19 = *v18;
            if (*v18 == a2)
              goto LABEL_16;
          }
        }
      }
    }
    v13 = 0;
    goto LABEL_41;
  }
}

void sub_1C4DB6564()
{
  JUMPOUT(0x1C4DB6160);
}

void sub_1C4DB6578()
{
  JUMPOUT(0x1C4DB6160);
}

void sub_1C4DB6594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a3 + 18) & 1) != 0)
    JUMPOUT(0x1C4DB61CCLL);
  JUMPOUT(0x1C4DB6168);
}

void sub_1C4DB65AC()
{
  JUMPOUT(0x1C4DB6160);
}

void sub_1C4DB65B4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
    JUMPOUT(0x1C4DB615CLL);
  JUMPOUT(0x1C4DB6160);
}

_QWORD *sub_1C4DB65F8(_QWORD *result, const llvm::BasicBlock *a2, uint64_t **a3, int a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const llvm::BasicBlock **v12;
  const llvm::BasicBlock *v13;
  int v14;
  int v15;
  const llvm::BasicBlock *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  const llvm::BasicBlock *v25;
  int v26;
  unsigned int v27;
  unint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  int32x2_t ****v32;
  uint64_t v34;
  unint64_t v36;
  int32x2_t ****v37;
  int32x2_t *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int32x2_t *****v43;
  int32x2_t ****v44;
  int v45;
  int v46;
  char v47;
  unint64_t v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  const llvm::BasicBlock *v55;
  int v56;
  unsigned int v57;
  unint64_t *v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  int32x2_t ****v62;
  uint64_t v64;
  unint64_t v66;
  int32x2_t ****v67;
  int32x2_t *v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  int32x2_t *****v73;
  int32x2_t ****v74;
  int v75;
  int v76;
  _DWORD *v77;
  uint64_t v78;
  llvm::raw_ostream *v79;
  __int16 v80;
  void (**v81)(llvm::raw_ostream *__hidden);
  int v82;
  _QWORD *v83;
  uint64_t v84;
  _DWORD *v85;
  char v86;
  uint64_t v87;
  int v88;
  _QWORD *v89;
  unsigned int v90;
  uint64_t (**v91)(llvm::CallbackVH *__hidden);
  unint64_t v92;
  unint64_t *v93;
  int32x2_t ****v94;
  uint64_t v95;

  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v82 = 0;
  v86 = 0;
  v87 = 0;
  v81 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v89 = result;
  v88 = 0;
  v84 = 0;
  v85 = 0;
  v83 = 0;
  v7 = a2 >> 4;
  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    goto LABEL_11;
  v8 = ***(_QWORD ***)a2;
  v9 = *(_QWORD *)(v8 + 152);
  v10 = *(unsigned int *)(v8 + 168);
  if ((_DWORD)v10)
  {
    LODWORD(v11) = (v10 - 1) & (v7 ^ (a2 >> 9));
    v12 = (const llvm::BasicBlock **)(v9 + 16 * v11);
    v13 = *v12;
    if (*v12 == a2)
      goto LABEL_9;
    v14 = 1;
    while (v13 != (const llvm::BasicBlock *)-4096)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(const llvm::BasicBlock **)(v9 + 16 * v11);
      if (v13 == a2)
      {
        v12 = (const llvm::BasicBlock **)(v9 + 16 * v11);
        goto LABEL_9;
      }
    }
  }
  v12 = (const llvm::BasicBlock **)(v9 + 16 * v10);
LABEL_9:
  v16 = v12[1];
  if (*(_QWORD *)v16)
  {
    result = llvm::raw_ostream::write((llvm::raw_ostream *)&v81, (const char *)v16 + 16, *(_QWORD *)v16);
    v18 = v84;
    v17 = v85;
    goto LABEL_12;
  }
LABEL_11:
  v18 = 0;
  v17 = 0;
LABEL_12:
  if ((unint64_t)(v18 - (_QWORD)v17) > 2)
  {
    *((_BYTE *)v17 + 2) = 32;
    *(_WORD *)v17 = 14880;
    v85 = (_DWORD *)((char *)v85 + 3);
  }
  else
  {
    result = llvm::raw_ostream::write((llvm::raw_ostream *)&v81, " : ", 3uLL);
  }
  switch(a4)
  {
    case 3:
      result = llvm::BlockFrequencyInfo::getBlockProfileCount(a3, a2, 0);
      if (!v47)
      {
        v77 = v85;
        if ((unint64_t)(v84 - (_QWORD)v85) > 6)
        {
          *(_DWORD *)((char *)v85 + 3) = 1853321070;
          *v77 = 1852534357;
          v85 = (_DWORD *)((char *)v85 + 7);
        }
        else
        {
          result = llvm::raw_ostream::write((llvm::raw_ostream *)&v81, "Unknown", 7uLL);
        }
        break;
      }
      v48 = (unint64_t)result;
      goto LABEL_86;
    case 2:
      v49 = *a3;
      if (!*a3)
        goto LABEL_85;
      v50 = *((_DWORD *)v49 + 44);
      if (!v50)
        goto LABEL_85;
      v51 = v49[20];
      v52 = v50 - 1;
      v53 = (v50 - 1) & (v7 ^ (a2 >> 9));
      v54 = v51 + 56 * v53;
      v55 = *(const llvm::BasicBlock **)v54;
      if (*(const llvm::BasicBlock **)v54 != a2)
      {
        v56 = 1;
        while (v55 != (const llvm::BasicBlock *)-4096)
        {
          v57 = v53 + v56++;
          v53 = v57 & v52;
          v54 = v51 + 56 * (v57 & v52);
          v55 = *(const llvm::BasicBlock **)v54;
          if (*(const llvm::BasicBlock **)v54 == a2)
            goto LABEL_53;
        }
        goto LABEL_85;
      }
LABEL_53:
      v58 = 0;
      v59 = *(_DWORD *)(v54 + 8);
      v90 = v59;
      v60 = *(_QWORD *)(v54 + 24);
      v61 = v60 & 6;
      v92 = v61;
      v93 = 0;
      v62 = *(int32x2_t *****)(v54 + 40);
      v94 = v62;
      if (v62 != (int32x2_t ****)-8192 && v62 != (int32x2_t ****)-4096 && v62 != 0)
      {
        v93 = *(unint64_t **)(v60 & 0xFFFFFFFFFFFFFFF8);
        v58 = v93;
        *(_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF8) = &v92;
        v61 = v60 & 0xFFFFFFFFFFFFFFFELL;
        v92 = v60 & 0xFFFFFFFFFFFFFFFELL;
        if (v58)
          *v58 = *v58 & 7 | (unint64_t)&v93;
      }
      v64 = *(_QWORD *)(v54 + 48);
      v91 = &off_1E8134B58;
      v95 = v64;
      if (v62 != (int32x2_t ****)-8192 && v62 != (int32x2_t ****)-4096 && v62 != 0)
      {
        v66 = v61 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v61 & 0xFFFFFFFFFFFFFFF8) = v58;
        if (v93)
        {
          *v93 = *v93 & 7 | v66;
        }
        else
        {
          v67 = v94;
          v68 = ***v94;
          v69 = (unint64_t)v68[303];
          if (v69 <= v66)
          {
            v70 = v68[305].u32[0];
            if (v69 + 16 * v70 > v66)
            {
              v71 = v70 - 1;
              LODWORD(v72) = v71 & ((v94 >> 4) ^ (v94 >> 9));
              v73 = (int32x2_t *****)(v69 + 16 * v72);
              v74 = *v73;
              if (v94 == *v73)
              {
LABEL_73:
                *v73 = (int32x2_t ****)-8192;
                v68[304] = vadd_s32(v68[304], (int32x2_t)0x1FFFFFFFFLL);
                v67 = v94;
              }
              else
              {
                v75 = 1;
                while (v74 != (int32x2_t ****)-4096)
                {
                  v76 = v72 + v75++;
                  v72 = v76 & v71;
                  v74 = *(int32x2_t *****)(v69 + 16 * v72);
                  if (v94 == v74)
                  {
                    v73 = (int32x2_t *****)(v69 + 16 * v72);
                    goto LABEL_73;
                  }
                }
              }
              *((_BYTE *)v67 + 17) &= ~1u;
            }
          }
        }
      }
      if (v59 == -1)
      {
LABEL_85:
        v48 = 0;
        goto LABEL_86;
      }
      v48 = *(_QWORD *)(v49[1] + 24 * v59 + 16);
LABEL_86:
      result = sub_1C5E21910((llvm::raw_ostream *)&v81, v48, 0, 0, 0);
      break;
    case 1:
      v19 = *a3;
      if (*a3)
      {
        v20 = *((_DWORD *)v19 + 44);
        if (v20)
        {
          v21 = v19[20];
          v22 = v20 - 1;
          v23 = (v20 - 1) & (v7 ^ (a2 >> 9));
          v24 = v21 + 56 * v23;
          v25 = *(const llvm::BasicBlock **)v24;
          if (*(const llvm::BasicBlock **)v24 == a2)
          {
LABEL_23:
            v28 = 0;
            v29 = *(_DWORD *)(v24 + 8);
            v90 = v29;
            v30 = *(_QWORD *)(v24 + 24);
            v31 = v30 & 6;
            v92 = v31;
            v93 = 0;
            v32 = *(int32x2_t *****)(v24 + 40);
            v94 = v32;
            if (v32 != (int32x2_t ****)-8192 && v32 != (int32x2_t ****)-4096 && v32 != 0)
            {
              v93 = *(unint64_t **)(v30 & 0xFFFFFFFFFFFFFFF8);
              v28 = v93;
              *(_QWORD *)(v30 & 0xFFFFFFFFFFFFFFF8) = &v92;
              v31 = v30 & 0xFFFFFFFFFFFFFFFELL;
              v92 = v30 & 0xFFFFFFFFFFFFFFFELL;
              if (v28)
                *v28 = *v28 & 7 | (unint64_t)&v93;
            }
            v34 = *(_QWORD *)(v24 + 48);
            v91 = &off_1E8134B58;
            v95 = v34;
            if (v32 != (int32x2_t ****)-8192 && v32 != (int32x2_t ****)-4096 && v32 != 0)
            {
              v36 = v31 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFF8) = v28;
              if (v93)
              {
                *v93 = *v93 & 7 | v36;
              }
              else
              {
                v37 = v94;
                v38 = ***v94;
                v39 = (unint64_t)v38[303];
                if (v39 <= v36)
                {
                  v40 = v38[305].u32[0];
                  if (v39 + 16 * v40 > v36)
                  {
                    v41 = v40 - 1;
                    LODWORD(v42) = v41 & ((v94 >> 4) ^ (v94 >> 9));
                    v43 = (int32x2_t *****)(v39 + 16 * v42);
                    v44 = *v43;
                    if (v94 == *v43)
                    {
LABEL_43:
                      *v43 = (int32x2_t ****)-8192;
                      v38[304] = vadd_s32(v38[304], (int32x2_t)0x1FFFFFFFFLL);
                      v37 = v94;
                    }
                    else
                    {
                      v45 = 1;
                      while (v44 != (int32x2_t ****)-4096)
                      {
                        v46 = v42 + v45++;
                        v42 = v46 & v41;
                        v44 = *(int32x2_t *****)(v39 + 16 * v42);
                        if (v94 == v44)
                        {
                          v43 = (int32x2_t *****)(v39 + 16 * v42);
                          goto LABEL_43;
                        }
                      }
                    }
                    *((_BYTE *)v37 + 17) &= ~1u;
                  }
                }
              }
            }
            if (v29 != -1)
            {
              v78 = v19[1] + 24 * v29;
              v79 = *(llvm::raw_ostream **)v78;
              v80 = *(_WORD *)(v78 + 8);
LABEL_81:
              result = llvm::ScaledNumberBase::print((llvm::ScaledNumberBase *)&v81, v79, v80, 64, 0xAu);
              break;
            }
          }
          else
          {
            v26 = 1;
            while (v25 != (const llvm::BasicBlock *)-4096)
            {
              v27 = v23 + v26++;
              v23 = v27 & v22;
              v24 = v21 + 56 * (v27 & v22);
              v25 = *(const llvm::BasicBlock **)v24;
              if (*(const llvm::BasicBlock **)v24 == a2)
                goto LABEL_23;
            }
          }
        }
        v79 = 0;
        v80 = 0;
        goto LABEL_81;
      }
      break;
  }
  v81 = off_1E81A6E70;
  if (v88 == 1)
  {
    result = v83;
    if (v83)
      return (_QWORD *)MEMORY[0x1CAA32F9C](v83, 0x1000C8077774924);
  }
  return result;
}

uint64_t sub_1C4DB6BEC(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C4DB6CCC(a1, v7);
    v8 = 0;
    sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)result != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)result = *a2;
  *(_DWORD *)(result + 8) = -1;
  return result;
}

_QWORD *sub_1C4DB6CCC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(_QWORD *)v13;
          *((_DWORD *)v15 + 2) = *(_DWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1C4DB6DFC()
{
  int v1;
  __int128 v2;
  int v3;
  __n128 v4;
  const char *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = 1;
  *(_QWORD *)&v2 = "Pop up a window to show a dag displaying how block frequencies propagation through the CFG.";
  *((_QWORD *)&v2 + 1) = 91;
  v4.n128_u64[0] = (unint64_t)&v5;
  v5 = "none";
  v6 = 4;
  v7 = 0;
  v8 = "do not display graphs.";
  v9 = 22;
  v10 = "fraction";
  v11 = 8;
  v12 = 1;
  v13 = "display a graph using the fractional block frequency representation.";
  v14 = 68;
  v15 = "integer";
  v16 = 7;
  v18 = "display a graph using the raw integer fractional block frequency representation.";
  v19 = 80;
  v20 = "count";
  v21 = 5;
  v17 = 2;
  v22 = 3;
  v23 = "display a graph using the real profile count if available.";
  v24 = 58;
  v4.n128_u64[1] = 0x400000004;
  sub_1C617B878(&v3, &v2, (uint64_t *)&v4);
  if ((const char **)v4.n128_u64[0] != &v5)
    free((void *)v4.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C617AF38, &qword_1ED7F0020, &dword_1C475E000);
  LODWORD(v2) = 1;
  v4.n128_u64[0] = (unint64_t)"The option to specify the name of the function whose CFG will be displayed.";
  v4.n128_u64[1] = 75;
  sub_1C4DB1854((uint64_t)&llvm::ViewBlockFreqFuncName, "view-bfi-func-name", &v2, &v4);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &llvm::ViewBlockFreqFuncName, &dword_1C475E000);
  v3 = 10;
  *(_QWORD *)&v2 = &v3;
  v1 = 1;
  v4.n128_u64[0] = (unint64_t)"An integer in percent used to specify the hot blocks/edges to be displayed in red: "
                                     "a block or edge whose frequency is no less than the max frequency of the function m"
                                     "ultiplied by this percent.";
  v4.n128_u64[1] = 192;
  sub_1C4DB1928((uint64_t)&llvm::ViewHotFreqPercent, "view-hot-freq-percent", (int **)&v2, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &llvm::ViewHotFreqPercent, &dword_1C475E000);
  v3 = 1;
  *(_QWORD *)&v2 = "A BOOLean option to show CFG dag or text with block profile counts and branch probabilities right aft"
                   "er PGO profile annotation step. The profile counts are computed using branch probabilities from the r"
                   "untime profile data and block frequency propagation algorithm. To view the raw counts from the profil"
                   "e, use option -pgo-view-raw-counts instead. To limit graph display to only one function, use filterin"
                   "g option -view-bfi-func-name.";
  *((_QWORD *)&v2 + 1) = 433;
  v4.n128_u64[0] = (unint64_t)&v5;
  v5 = "none";
  v6 = 4;
  v7 = 0;
  v8 = "do not show.";
  v9 = 12;
  v10 = "graph";
  v11 = 5;
  v12 = 1;
  v13 = "show a graph.";
  v14 = 13;
  v15 = "text";
  v16 = 4;
  v17 = 2;
  v18 = "show in text.";
  v19 = 13;
  v4.n128_u64[1] = 0x400000003;
  sub_1C617BA50(&v3, &v2, (uint64_t *)&v4);
  if ((const char **)v4.n128_u64[0] != &v5)
    free((void *)v4.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C617AF3C, &llvm::PGOViewCounts, &dword_1C475E000);
  LOBYTE(v1) = 0;
  *(_QWORD *)&v2 = &v1;
  v3 = 1;
  v4.n128_u64[0] = (unint64_t)"Print the block frequency info.";
  v4.n128_u64[1] = 31;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7EFF60, "print-bfi", (_BYTE **)&v2, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7EFF60, &dword_1C475E000);
  LODWORD(v2) = 1;
  v4.n128_u64[0] = (unint64_t)"The option to specify the name of the function whose block frequency info is printed.";
  v4.n128_u64[1] = 85;
  sub_1C4DB1854((uint64_t)&llvm::PrintBlockFreqFuncName, "print-bfi-func-name", &v2, &v4);
  return __cxa_atexit((void (*)(void *))sub_1C49BEA38, &llvm::PrintBlockFreqFuncName, &dword_1C475E000);
}

_QWORD *sub_1C4DB7184(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E8134C50;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      return sub_1C47A80D0(a1);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  return sub_1C47A80D0(a1);
}

uint64_t llvm::bfi_detail::BlockMass::toScaled(llvm::bfi_detail::BlockMass *this)
{
  if (*(_QWORD *)this == -1)
    return 1;
  else
    return *(_QWORD *)this + 1;
}

_QWORD *llvm::BlockFrequencyInfoImplBase::Distribution::add(_QWORD *result, unsigned int *a2, unint64_t a3, unsigned int a4)
{
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;

  v6 = result;
  v7 = result[10];
  v8 = __CFADD__(v7, a3);
  v9 = v7 + a3;
  v10 = v8;
  *((_BYTE *)result + 88) |= v10;
  result[10] = v9;
  v11 = *a2;
  v12 = *((unsigned int *)result + 2);
  if (v12 >= *((_DWORD *)result + 3))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 2), v12 + 1, 16);
    LODWORD(v12) = *((_DWORD *)v6 + 2);
  }
  v13 = (unint64_t *)(*v6 + 16 * v12);
  *v13 = a4 | (unint64_t)(v11 << 32);
  v13[1] = a3;
  ++*((_DWORD *)v6 + 2);
  return result;
}

void llvm::BlockFrequencyInfoImplBase::Distribution::normalize(llvm::BlockFrequencyInfoImplBase::Distribution *this)
{
  unint64_t v1;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  unint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int v36;
  __int128 v37;
  unsigned int *v38;
  unsigned int v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;

  v1 = *((unsigned int *)this + 2);
  if (!(_DWORD)v1)
    return;
  if ((_DWORD)v1 == 1)
    goto LABEL_63;
  if (v1 < 0x81)
  {
    sub_1C4DB94A4(*(_QWORD *)this, (__int128 *)(*(_QWORD *)this + 16 * v1), 126 - 2 * __clz(v1), 1);
    v7 = *(_QWORD *)this;
    v8 = *((unsigned int *)this + 2);
    if ((_DWORD)v8)
    {
      v9 = v7 + 16 * v8;
      v10 = *(_QWORD *)this;
      do
      {
        *(_OWORD *)v10 = *(_OWORD *)v7;
        for (i = v7 + 16; ; i += 16)
        {
          if (i == v9)
          {
            v10 += 16;
            goto LABEL_21;
          }
          if (*(_DWORD *)(v7 + 4) != *(_DWORD *)(i + 4))
            break;
          v12 = *(_QWORD *)(v10 + 8);
          if (v12)
          {
            v13 = *(_QWORD *)(i + 8);
            v5 = __CFADD__(v13, v12);
            v14 = v13 + v12;
            if (v5)
              *(_QWORD *)(v10 + 8) = -1;
            else
              *(_QWORD *)(v10 + 8) = v14;
          }
          else
          {
            *(_OWORD *)v10 = *(_OWORD *)i;
          }
        }
        v10 += 16;
        v7 = i;
      }
      while (i != v9);
LABEL_21:
      v7 = *(_QWORD *)this;
    }
    else
    {
      v10 = *(_QWORD *)this;
    }
    v33 = (unint64_t)(v10 - v7) >> 4;
    *((_DWORD *)this + 2) = v33;
    goto LABEL_62;
  }
  v3 = v1 | (2 * v1) | ((v1 | (2 * v1)) >> 2);
  v4 = v3 | (v3 >> 4) | ((v3 | (v3 >> 4)) >> 8);
  LODWORD(v4) = ((v4 | (v4 >> 16)) >> 32) | v4 | (v4 >> 16);
  v5 = __CFADD__((_DWORD)v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
    v19 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
  }
  else
  {
    v15 = (4 * v6 / 3u + 1) | ((unint64_t)(4 * v6 / 3u + 1) >> 1);
    v16 = v15 | (v15 >> 2) | ((v15 | (v15 >> 2)) >> 4);
    v17 = ((v16 | (v16 >> 8)) >> 16) | v16 | (v16 >> 8);
    v52 = v17 + 1;
    v18 = (char *)operator new(24 * (v17 + 1), (std::align_val_t)8uLL);
    v19 = (uint64_t)v18;
    v20 = 0;
    v50 = (uint64_t)v18;
    v51 = 0;
    do
    {
      *(_DWORD *)&v18[v20] = -1;
      v20 += 24;
    }
    while (24 * v17 + 24 != v20);
    v1 = *((unsigned int *)this + 2);
    if (!(_DWORD)v1)
      goto LABEL_61;
  }
  v21 = *(_QWORD *)this;
  v22 = *(_QWORD *)this + 16 * v1;
  do
  {
    v53 = 0;
    v23 = v52;
    v24 = sub_1C4DB9344(v19, v52, *(_DWORD *)(v21 + 4), &v53);
    v25 = v53;
    if ((v24 & 1) == 0)
    {
      if (4 * (int)v51 + 4 >= 3 * v23)
      {
        v29 = 2 * v23;
      }
      else
      {
        if (v23 + ~(_DWORD)v51 - HIDWORD(v51) > v23 >> 3)
        {
LABEL_28:
          LODWORD(v51) = v51 + 1;
          if (*(_DWORD *)v25 != -1)
            --HIDWORD(v51);
          *(_DWORD *)v25 = *(_DWORD *)(v21 + 4);
          *(_OWORD *)(v25 + 8) = xmmword_1C85F2270;
LABEL_31:
          *(_OWORD *)(v25 + 8) = *(_OWORD *)v21;
          goto LABEL_32;
        }
        v29 = v23;
      }
      sub_1C4DB93E0((uint64_t)&v50, v29);
      v53 = 0;
      v19 = v50;
      sub_1C4DB9344(v50, v52, *(_DWORD *)(v21 + 4), &v53);
      v25 = v53;
      goto LABEL_28;
    }
    v26 = *(_QWORD *)(v53 + 16);
    if (!v26)
      goto LABEL_31;
    v27 = *(_QWORD *)(v21 + 8);
    v5 = __CFADD__(v27, v26);
    v28 = v27 + v26;
    if (v5)
      *(_QWORD *)(v53 + 16) = -1;
    else
      *(_QWORD *)(v53 + 16) = v28;
LABEL_32:
    v21 += 16;
  }
  while (v21 != v22);
  v30 = v51;
  if (*((_DWORD *)this + 2) != (_DWORD)v51)
  {
    *((_DWORD *)this + 2) = 0;
    if (*((_DWORD *)this + 3) >= v30)
    {
      v31 = v52;
      v32 = (unsigned int *)(v19 + 24 * v52);
      v34 = v32;
      if ((_DWORD)v30)
        goto LABEL_47;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, (uint64_t)this + 16, v30, 16);
      v31 = v52;
      v32 = (unsigned int *)(v19 + 24 * v52);
LABEL_47:
      v34 = (unsigned int *)v19;
      if (v31)
      {
        while (*v34 >= 0xFFFFFFFE)
        {
          v34 += 6;
          if (v34 == v32)
          {
            v34 = v32;
            break;
          }
        }
      }
    }
    v35 = v19 + 24 * v31;
    if (v34 != (unsigned int *)v35)
    {
      v36 = *((_DWORD *)this + 2);
      do
      {
        v37 = *(_OWORD *)(v34 + 2);
        if (v36 >= *((_DWORD *)this + 3))
        {
          v49 = *(_OWORD *)(v34 + 2);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this, (uint64_t)this + 16, v36 + 1, 16);
          v37 = v49;
          v36 = *((_DWORD *)this + 2);
        }
        *(_OWORD *)(*(_QWORD *)this + 16 * v36) = v37;
        v36 = *((_DWORD *)this + 2) + 1;
        *((_DWORD *)this + 2) = v36;
        v38 = v34 + 6;
        while (v38 != v32)
        {
          v39 = *v38;
          v38 += 6;
          if (v39 <= 0xFFFFFFFD)
          {
            v34 = v38 - 6;
            goto LABEL_60;
          }
        }
        v34 = v32;
LABEL_60:
        ;
      }
      while (v34 != (unsigned int *)v35);
    }
  }
LABEL_61:
  MEMORY[0x1CAA32FB4](v19, 8);
  LODWORD(v33) = *((_DWORD *)this + 2);
LABEL_62:
  if ((_DWORD)v33 == 1)
  {
LABEL_63:
    *((_QWORD *)this + 10) = 1;
    *(_QWORD *)(*(_QWORD *)this + 8) = 1;
    return;
  }
  if (*((_BYTE *)this + 88))
  {
    v40 = 33;
LABEL_69:
    *((_QWORD *)this + 10) = 0;
    if ((_DWORD)v33)
    {
      v42 = 0;
      v43 = v33;
      v44 = v40;
      v45 = v40 - 1;
      v46 = 16 * v43;
      v47 = (unint64_t *)(*(_QWORD *)this + 8);
      do
      {
        v48 = ((*v47 >> v45) & 1) + (*v47 >> v44);
        if (v48 <= 1)
          v48 = 1;
        *v47 = v48;
        v47 += 2;
        v42 += v48;
        v46 -= 16;
      }
      while (v46);
      *((_QWORD *)this + 10) = v42;
    }
  }
  else
  {
    v41 = *((_QWORD *)this + 10);
    if (HIDWORD(v41))
    {
      v40 = 33 - __clz(v41);
      goto LABEL_69;
    }
  }
}

void llvm::BlockFrequencyInfoImplBase::clear(llvm::BlockFrequencyInfoImplBase *this)
{
  void *v2;
  void *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  llvm::BlockFrequencyInfoImplBase *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::BlockFrequencyInfoImplBase *v15;

  v2 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    operator delete(v2);
  if (*((_QWORD *)this + 6))
  {
    v13 = *((_QWORD *)this + 4);
    v12 = (llvm::BlockFrequencyInfoImplBase *)*((_QWORD *)this + 5);
    v14 = *(_QWORD *)v12;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v14;
    *((_QWORD *)this + 6) = 0;
    if (v12 != (llvm::BlockFrequencyInfoImplBase *)((char *)this + 32))
    {
      do
      {
        v15 = (llvm::BlockFrequencyInfoImplBase *)*((_QWORD *)v12 + 1);
        operator delete(v12);
        v12 = v15;
      }
      while (v15 != (llvm::BlockFrequencyInfoImplBase *)((char *)this + 32));
    }
  }
  v3 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  if (v3)
    operator delete(v3);
  if (*((_QWORD *)this + 13))
  {
    v4 = (char *)this + 88;
    v5 = *((_QWORD *)this + 11);
    v6 = (char *)*((_QWORD *)this + 12);
    v7 = *(_QWORD *)v6;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v7;
    *((_QWORD *)this + 13) = 0;
    if (v6 != (char *)this + 88)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v6 + 1);
        v9 = (char *)*((_QWORD *)v6 + 18);
        if (v9 != v6 + 160)
          free(v9);
        v10 = (char *)*((_QWORD *)v6 + 14);
        if (v10 != v6 + 128)
          free(v10);
        v11 = (char *)*((_QWORD *)v6 + 4);
        if (v11 != v6 + 48)
          free(v11);
        operator delete(v6);
        v6 = v8;
      }
      while (v8 != v4);
    }
  }
}

uint64_t llvm::BlockFrequencyInfoImplBase::addToDist(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int *a4, unsigned int *a5, unint64_t a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _BOOL4 v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  _DWORD *v28;
  unsigned int *v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t result;
  unsigned int v36;

  if (a6 <= 1)
    v9 = 1;
  else
    v9 = a6;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = v10 + 24 * *a5;
  v12 = *(uint64_t **)(v11 + 8);
  if (v12 && *((_BYTE *)v12 + 8))
  {
    do
    {
      v13 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12 && *((_BYTE *)v12 + 8));
    v11 = v13[12];
  }
  v14 = *(_DWORD *)v11;
  v36 = *(_DWORD *)v11;
  if (a3)
  {
    v15 = *(unsigned int *)(a3 + 12);
    v16 = *(_DWORD **)(a3 + 96);
    if (v15 < 2)
    {
      if (v14 == *v16)
      {
LABEL_18:
        v23 = 2;
LABEL_38:
        llvm::BlockFrequencyInfoImplBase::Distribution::add(a2, &v36, v9, v23);
        return 1;
      }
    }
    else
    {
      v17 = *(unsigned int **)(a3 + 96);
      v18 = *(unsigned int *)(a3 + 12);
      do
      {
        v19 = v18 >> 1;
        v20 = &v17[v18 >> 1];
        v22 = *v20;
        v21 = v20 + 1;
        v18 += ~(v18 >> 1);
        if (v22 < v14)
          v17 = v21;
        else
          v18 = v19;
      }
      while (v18);
      if (v17 != &v16[v15] && v14 >= *v17)
        goto LABEL_18;
    }
  }
  if (sub_1C4DB2AAC((int *)(v10 + 24 * v14)))
  {
    v24 = sub_1C4DB2ED4(v10 + 24 * v14);
    v25 = *(_QWORD **)(v10 + 24 * v14 + 8);
    if (v24)
      v25 = (_QWORD *)*v25;
  }
  else
  {
    v25 = (_QWORD *)(v10 + 24 * v14 + 8);
  }
  if (*v25 != a3)
  {
    v23 = 1;
    goto LABEL_38;
  }
  v26 = *a4;
  if (v14 >= *a4)
  {
    v23 = 0;
    goto LABEL_38;
  }
  if (!a3)
    return 0;
  v27 = *(unsigned int *)(a3 + 12);
  v28 = *(_DWORD **)(a3 + 96);
  if (v27 < 2)
  {
    v23 = 0;
    result = 0;
    if (v26 == *v28)
      goto LABEL_38;
    return result;
  }
  v29 = *(unsigned int **)(a3 + 96);
  v30 = *(unsigned int *)(a3 + 12);
  do
  {
    v31 = v30 >> 1;
    v32 = &v29[v30 >> 1];
    v34 = *v32;
    v33 = v32 + 1;
    v30 += ~(v30 >> 1);
    if (v34 < v26)
      v29 = v33;
    else
      v30 = v31;
  }
  while (v30);
  if (v29 == &v28[v27])
    return 0;
  v23 = 0;
  result = 0;
  if (v26 >= *v29)
    goto LABEL_38;
  return result;
}

uint64_t llvm::BlockFrequencyInfoImplBase::addLoopSuccessorsToDist(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v4 = *(unsigned int *)(a3 + 24);
  if (!(_DWORD)v4)
    return 1;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = 16 * v4 - 16;
  do
  {
    v13 = **(_DWORD **)(a3 + 96);
    result = llvm::BlockFrequencyInfoImplBase::addToDist(a1, a4, a2, &v13, (unsigned int *)v9, *(_QWORD *)(v9 + 8));
    v9 += 16;
    if ((_DWORD)result)
      v12 = v10 == 0;
    else
      v12 = 1;
    v10 -= 16;
  }
  while (!v12);
  return result;
}

void llvm::BlockFrequencyInfoImplBase::computeLoopScale(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  __int16 v15;

  v3 = *(unsigned int *)(a2 + 136);
  if ((_DWORD)v3)
  {
    v7 = 0;
    v8 = *(uint64_t **)(a2 + 128);
    v9 = 8 * v3;
    do
    {
      v10 = *v8++;
      v11 = v7 + v10;
      if (__CFADD__(v7, v10))
        v7 = -1;
      else
        v7 = v11;
      v9 -= 8;
    }
    while (v9);
    if (v7 == -1)
    {
      v6 = 12;
      v5 = 1;
      goto LABEL_6;
    }
    if (v7)
      v12 = -v7;
    else
      v12 = 1;
    if (!v12)
    {
      v5 = -1;
      v14 = -1;
      v15 = 0x3FFF;
      goto LABEL_5;
    }
    v14 = llvm::ScaledNumbers::divide64(1uLL, v12);
    v15 = v13;
    if (v7)
    {
      v4 = 64;
      goto LABEL_4;
    }
  }
  else
  {
    v14 = 1;
    v15 = 0;
  }
  v4 = 0;
LABEL_4:
  sub_1C4DB5C98((uint64_t)&v14, v4);
  v5 = v14;
LABEL_5:
  v6 = v15;
LABEL_6:
  *(_QWORD *)(a2 + 160) = v5;
  *(_WORD *)(a2 + 168) = v6;
}

uint64_t llvm::BlockFrequencyInfoImplBase::packageLoop(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;

  v2 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v2)
  {
    v3 = *(unsigned int **)(a2 + 96);
    v4 = &v3[v2];
    v5 = *(_QWORD *)(result + 64);
    do
    {
      v6 = *(uint64_t **)(v5 + 24 * *v3 + 8);
      if (v6 && *((_BYTE *)v6 + 8))
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6 && *((_BYTE *)v6 + 8));
        *((_DWORD *)v7 + 6) = 0;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

void llvm::BlockFrequencyInfoImplBase::distributeMass(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unsigned int *v20;
  _DWORD *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v32;

  v6 = *(_QWORD *)sub_1C4DB3A24(*(_QWORD *)(a1 + 64) + 24 * *a2);
  llvm::BlockFrequencyInfoImplBase::Distribution::normalize((llvm::BlockFrequencyInfoImplBase::Distribution *)a4);
  v7 = a4[2];
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)a4;
    v9 = *(_QWORD *)a4 + 16 * v7;
    v10 = a4[20];
    do
    {
      v11 = *(_QWORD *)(v8 + 8);
      LODWORD(v12) = v11;
      if (v10 != 0x80000000)
        v12 = ((v10 >> 1) | ((unint64_t)v11 << 31)) / v10;
      v32 = v12;
      v13 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v32, v6);
      v14 = v13;
      if (v6 >= v13)
        v6 -= v13;
      else
        v6 = 0;
      if (*(_DWORD *)v8 == 2)
      {
        v17 = *(unsigned int *)(a3 + 12);
        if (v17 < 2)
        {
          v23 = 0;
        }
        else
        {
          v18 = *(_DWORD **)(a3 + 96);
          do
          {
            v19 = v17 >> 1;
            v20 = &v18[v17 >> 1];
            v22 = *v20;
            v21 = v20 + 1;
            v17 += ~(v17 >> 1);
            if (v22 < *(_DWORD *)(v8 + 4))
              v18 = v21;
            else
              v17 = v19;
          }
          while (v17);
          v23 = ((uint64_t)v18 - *(_QWORD *)(a3 + 96)) >> 2;
        }
        v27 = *(_QWORD *)(a3 + 128);
        v28 = *(_QWORD *)(v27 + 8 * v23);
        v29 = __CFADD__(v28, v13);
        v30 = v28 + v13;
        if (v29)
          v30 = -1;
        *(_QWORD *)(v27 + 8 * v23) = v30;
      }
      else if (*(_DWORD *)v8)
      {
        v24 = *(unsigned int *)(v8 + 4);
        v25 = *(unsigned int *)(a3 + 24);
        if (v25 >= *(unsigned int *)(a3 + 28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 16, a3 + 32, v25 + 1, 16);
          v25 = *(unsigned int *)(a3 + 24);
        }
        v26 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v25);
        *v26 = v24;
        v26[1] = v14;
        ++*(_DWORD *)(a3 + 24);
      }
      else
      {
        v15 = (_QWORD *)sub_1C4DB3A24(*(_QWORD *)(a1 + 64) + 24 * *(unsigned int *)(v8 + 4));
        v16 = *v15 + v14;
        if (__CFADD__(*v15, v14))
          v16 = -1;
        *v15 = v16;
      }
      v10 -= v11;
      v8 += 16;
    }
    while (v8 != v9);
  }
}

_QWORD *llvm::BlockFrequencyInfoImplBase::unwrapLoops(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int32x2_t v15;
  int64x2_t v16;
  int8x16_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  int8x16_t v28;

  v1 = this;
  v2 = this[8];
  if (this[9] != v2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v2 + v3 + 16);
      v6 = __CFADD__(v5, 1);
      v7 = v5 + 1;
      if (v6)
        v7 = 1;
      v8 = this[1] + v3;
      *(_QWORD *)v8 = v7;
      if (v6)
        v9 = 0;
      else
        v9 = -64;
      *(_WORD *)(v8 + 8) = v9;
      ++v4;
      v2 = this[8];
      v3 += 24;
    }
    while (v4 < 0xAAAAAAAAAAAAAAABLL * ((this[9] - v2) >> 3));
  }
  v10 = this + 11;
  v11 = this[12];
  if ((_QWORD *)v11 != this + 11)
  {
    v27 = vdupq_n_s64(0xFFC0uLL);
    do
    {
      v12 = *(_QWORD *)(v11 + 168);
      v6 = __CFADD__(v12, 1);
      v13 = v12 + 1;
      v14 = v6;
      v15 = vdup_n_s32(v14);
      v16.i64[0] = v15.u32[0];
      v16.i64[1] = v15.u32[1];
      v17.i64[1] = v27.i64[1];
      v17.i64[0] = v13;
      v28 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v16, 0x3FuLL)), (int8x16_t)xmmword_1C64169E0, v17);
      this = (_QWORD *)sub_1C4DB6028(v11 + 176, (uint64_t)&v28);
      *(_BYTE *)(v11 + 24) = 0;
      v18 = *(unsigned int *)(v11 + 120);
      if ((_DWORD)v18)
      {
        v19 = *(unsigned int **)(v11 + 112);
        v20 = &v19[v18];
        do
        {
          v21 = *v19;
          v22 = v1[8];
          if (sub_1C4DB2AAC((int *)(v22 + 24 * *v19))
            && (v23 = *(uint64_t **)(v22 + 24 * v21 + 8), *((_BYTE *)v23 + 8)))
          {
            do
            {
              v24 = v23;
              v23 = (uint64_t *)*v23;
            }
            while (v23 && *((_BYTE *)v23 + 8));
            v25 = (uint64_t)(v24 + 20);
          }
          else
          {
            v25 = v1[1] + 24 * *v19;
          }
          v28.i64[0] = *(_QWORD *)(v11 + 176);
          v28.i16[4] = *(_WORD *)(v11 + 184);
          this = (_QWORD *)sub_1C4DB6028((uint64_t)&v28, v25);
          v26 = this[1];
          *(_QWORD *)v25 = *this;
          *(_WORD *)(v25 + 8) = v26;
          ++v19;
        }
        while (v19 != v20);
      }
      v11 = *(_QWORD *)(v11 + 8);
    }
    while ((_QWORD *)v11 != v10);
  }
  return this;
}

uint64_t *llvm::BlockFrequencyInfoImplBase::finalizeMetrics(llvm::BlockFrequencyInfoImplBase *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t *v25;
  char v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  llvm::ScaledNumbers *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  llvm::ScaledNumbers **v47;
  char v48;
  int v49;
  int v50;
  llvm::ScaledNumbers *v51;
  unint64_t v52;
  __int16 v53;
  __int16 v54;
  unint64_t v55;
  __int16 v56;
  int v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t *result;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  llvm::ScaledNumbers *v87;
  uint64_t v88;
  unint64_t v89[2];
  uint64_t v90;
  __int16 v91;
  __int128 v92;
  uint64_t v93;
  __int128 *v94;

  *(_OWORD *)v89 = xmmword_1C85F2280;
  v87 = 0;
  v88 = 0;
  v2 = *((_QWORD *)this + 9) - *((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = v2 / 24;
    if (v4 <= 1)
      v4 = 1;
    do
    {
      v5 = *(_QWORD *)v3;
      v6 = *(__int16 *)(v3 + 8);
      v7 = __clz(*(_QWORD *)v3);
      if (*(_QWORD *)v3)
      {
        if (!v89[0])
          goto LABEL_25;
        v8 = (v7 ^ 0x3F) + v6;
        v9 = 1 << (62 - v7);
        v10 = (v9 & v5) == 0;
        if ((v9 & v5) != 0)
          v11 = v8 + 1;
        else
          v11 = v8;
        if (v10)
          v12 = 0xFFFFFFFF00000000;
        else
          v12 = 0x100000000;
        v13 = v12 | v11;
        if (1 << (v7 ^ 0x3Fu) == v5)
          v14 = (v7 ^ 0x3Fu) + v6;
        else
          v14 = v13;
        v15 = v14 - (SHIDWORD(v14) > 0);
        v16 = __clz(v89[0]);
        v17 = (v16 ^ 0x3Fu) + SLOWORD(v89[1]);
        v18 = 1 << (v16 ^ 0x3Fu);
        v19 = 1 << (62 - v16);
        v20 = (v19 & v89[0]) == 0;
        if ((v19 & v89[0]) != 0)
          v21 = (v17 + 1);
        else
          v21 = v17;
        if (v20)
          v22 = 0xFFFFFFFF00000000;
        else
          v22 = 0x100000000;
        v23 = v22 | v21;
        if (v18 == v89[0])
          v23 = v17;
        v24 = v23 - (SHIDWORD(v23) > 0);
        if (v15 == v24)
        {
          v26 = v6 - LOBYTE(v89[1]);
          if (v6 < SLOWORD(v89[1]))
          {
            if (v5 >> (LOBYTE(v89[1]) - v6) >= v89[0])
              goto LABEL_25;
          }
          else
          {
            if (v89[0] >> v26 < v5)
              goto LABEL_25;
            if (v89[0] >> v26 <= v5)
            {
              v27 = v89[0] >> v26 << v26 >= v89[0] ? 0 : -1;
              if ((v27 & 0x80000000) == 0)
                goto LABEL_25;
            }
          }
        }
        else if (v15 >= v24)
        {
          goto LABEL_25;
        }
      }
      else
      {
        if (v89[0])
          v28 = -1;
        else
          v28 = 0;
        if ((v28 & 0x80000000) == 0)
        {
LABEL_25:
          v25 = v89;
          goto LABEL_39;
        }
      }
      v25 = (unint64_t *)v3;
LABEL_39:
      v29 = *v25;
      LOWORD(v89[1]) = *((_WORD *)v25 + 4);
      v89[0] = v29;
      if (v87)
      {
        if (v5)
        {
          v30 = __clz((unint64_t)v87);
          v31 = (v30 ^ 0x3Fu) + (__int16)v88;
          v32 = (llvm::ScaledNumbers *)(1 << (v30 ^ 0x3Fu));
          v33 = 1 << (62 - v30);
          v34 = (v33 & (unint64_t)v87) == 0;
          if ((v33 & (unint64_t)v87) != 0)
            v35 = (v31 + 1);
          else
            v35 = v31;
          if (v34)
            v36 = 0xFFFFFFFF00000000;
          else
            v36 = 0x100000000;
          v37 = v36 | v35;
          if (v32 == v87)
            v37 = v31;
          v38 = v37 - (SHIDWORD(v37) > 0);
          v39 = (v7 ^ 0x3Fu) + v6;
          v40 = 1 << (v7 ^ 0x3Fu);
          v41 = 1 << (62 - v7);
          v42 = (v41 & v5) == 0;
          if ((v41 & v5) != 0)
            v43 = (v39 + 1);
          else
            v43 = v39;
          if (v42)
            v44 = 0xFFFFFFFF00000000;
          else
            v44 = 0x100000000;
          v45 = v44 | v43;
          if (v40 == v5)
            v45 = v39;
          v46 = v45 - (SHIDWORD(v45) > 0);
          if (v38 == v46)
          {
            if ((__int16)v88 < v6)
            {
              if ((unint64_t)v87 >> (v6 - v88) < v5)
                goto LABEL_72;
            }
            else
            {
              v48 = v88 - v6;
              if (v5 >> v48 >= (unint64_t)v87)
              {
                if (v5 >> v48 > (unint64_t)v87)
                  goto LABEL_72;
                v49 = v5 >> v48 << v48 >= v5 ? 0 : -1;
                if (v49 < 0)
                  goto LABEL_72;
              }
            }
          }
          else if (v38 < v46)
          {
            goto LABEL_72;
          }
        }
      }
      else
      {
        if (v5)
          v50 = -1;
        else
          v50 = 0;
        if (v50 < 0)
        {
LABEL_72:
          v47 = (llvm::ScaledNumbers **)v3;
          goto LABEL_73;
        }
      }
      v47 = &v87;
LABEL_73:
      v51 = *v47;
      LOWORD(v88) = *((_WORD *)v47 + 4);
      v87 = v51;
      v3 += 24;
      --v4;
    }
    while (v4);
  }
  *(_QWORD *)&v92 = v87;
  WORD4(v92) = v88;
  if (!v87)
    goto LABEL_90;
  v52 = v89[0];
  if (v89[0])
  {
    v53 = WORD4(v92) - LOWORD(v89[1]);
    *(_QWORD *)&v92 = llvm::ScaledNumbers::divide64((unint64_t)v87, v89[0]);
    WORD4(v92) = v54;
    sub_1C4DB5C98((uint64_t)&v92, v53);
    v55 = v92;
    if ((_QWORD)v92)
    {
      v56 = WORD4(v92);
      goto LABEL_83;
    }
LABEL_90:
    v90 = 0;
    v91 = 0;
    goto LABEL_91;
  }
  WORD4(v92) = 0x3FFF;
  v56 = 0x3FFF;
  v55 = -1;
LABEL_83:
  v57 = __clz(v55);
  v58 = (v57 ^ 0x3F) + v56;
  v59 = 1 << (v57 ^ 0x3Fu);
  v60 = v58 + ((v55 >> (62 - v57)) & 1);
  if (v59 == v55)
    v61 = v58;
  else
    v61 = v60;
  v90 = 0;
  v91 = 0;
  if (v61 <= 0x3D)
  {
    if (v52)
    {
      v62 = -LOWORD(v89[1]);
      *(_QWORD *)&v92 = llvm::ScaledNumbers::divide64(1uLL, v52);
      WORD4(v92) = v63;
      sub_1C4DB5C98((uint64_t)&v92, (__int16)v62);
      v64 = v92;
    }
    else
    {
      v64 = -1;
      *(_QWORD *)&v92 = -1;
      WORD4(v92) = 0x3FFF;
    }
    v90 = v64;
    v91 = WORD4(v92);
    sub_1C4DB5C98((uint64_t)&v90, 3);
    goto LABEL_94;
  }
LABEL_91:
  if (v87)
  {
    v65 = 64 - v88;
    *(_QWORD *)&v92 = llvm::ScaledNumbers::divide64(1uLL, (unint64_t)v87);
    WORD4(v92) = v66;
    sub_1C4DB5C98((uint64_t)&v92, v65);
    v67 = v92;
  }
  else
  {
    v67 = -1;
    *(_QWORD *)&v92 = -1;
    WORD4(v92) = 0x3FFF;
  }
  v90 = v67;
  v91 = WORD4(v92);
LABEL_94:
  v68 = *((_QWORD *)this + 1);
  v69 = *((_QWORD *)this + 2);
  if (v69 == v68)
  {
    v68 = *((_QWORD *)this + 2);
  }
  else
  {
    v70 = 0;
    v71 = 0;
    do
    {
      v72 = *(_QWORD *)(v68 + v70);
      WORD4(v92) = *(_WORD *)(v68 + v70 + 8);
      *(_QWORD *)&v92 = v72;
      v92 = *(_OWORD *)sub_1C4DB6028((uint64_t)&v92, (uint64_t)&v90);
      v73 = sub_1C4DB9F50((uint64_t)&v92);
      if (v73 <= 1)
        v74 = 1;
      else
        v74 = v73;
      v68 = *((_QWORD *)this + 1);
      *(_QWORD *)(v68 + v70 + 16) = v74;
      ++v71;
      v69 = *((_QWORD *)this + 2);
      v70 += 24;
    }
    while (v71 < 0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 3));
  }
  v75 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v76 = &v92;
  *(_QWORD *)&v92 = &v92;
  *((_QWORD *)&v92 + 1) = &v92;
  v93 = 0;
  v77 = *((_QWORD *)this + 6);
  if (v77)
  {
    v79 = *((_QWORD *)this + 4);
    v78 = (uint64_t *)*((_QWORD *)this + 5);
    v80 = *v78;
    *(_QWORD *)(v80 + 8) = *(_QWORD *)(v79 + 8);
    **(_QWORD **)(v79 + 8) = v80;
    v81 = v92;
    *(_QWORD *)(v92 + 8) = v78;
    *v78 = v81;
    *(_QWORD *)(v79 + 8) = &v92;
    *(_QWORD *)&v92 = v79;
    v93 = v77;
    *((_QWORD *)this + 6) = 0;
    v76 = (__int128 *)*((_QWORD *)&v92 + 1);
  }
  v94 = v76;
  llvm::BlockFrequencyInfoImplBase::clear(this);
  v82 = (void *)*((_QWORD *)this + 1);
  if (v82)
  {
    *((_QWORD *)this + 2) = v82;
    operator delete(v82);
  }
  *((_QWORD *)this + 1) = v68;
  *((_QWORD *)this + 2) = v69;
  *((_QWORD *)this + 3) = v75;
  result = sub_1C4DBA094((uint64_t *)this + 4, &v92);
  *((_QWORD *)this + 7) = *((_QWORD *)this + 5);
  if (v93)
  {
    result = (uint64_t *)*((_QWORD *)&v92 + 1);
    v84 = v92;
    v85 = **((_QWORD **)&v92 + 1);
    *(_QWORD *)(v85 + 8) = *(_QWORD *)(v92 + 8);
    **(_QWORD **)(v84 + 8) = v85;
    v93 = 0;
    if (result != (uint64_t *)&v92)
    {
      do
      {
        v86 = (uint64_t *)result[1];
        operator delete(result);
        result = v86;
      }
      while (v86 != (uint64_t *)&v92);
    }
  }
  return result;
}

uint64_t llvm::BlockFrequencyInfoImplBase::getBlockFreq(uint64_t a1, _DWORD *a2)
{
  if (*a2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * *a2 + 16);
}

uint64_t *llvm::BlockFrequencyInfoImplBase::getProfileCountFromFreq(llvm::BlockFrequencyInfoImplBase *this, uint64_t ***a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t **v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t *v14;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BOOL4 v23;
  void *v24;
  unsigned int v25;
  void *__src;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t **v30;
  unsigned int v31;
  unint64_t v32;
  char v33;
  uint64_t **v34;
  unsigned int v35;

  llvm::Function::getEntryCount(a2, a4, (uint64_t)&v32);
  if (!v33)
    return 0;
  v31 = 128;
  llvm::APInt::initSlowCase((llvm::APInt *)&v30, v32, 0);
  v29 = 128;
  llvm::APInt::initSlowCase((llvm::APInt *)&v28, a3, 0);
  v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  v27 = 128;
  llvm::APInt::initSlowCase((llvm::APInt *)&__src, v6, 0);
  llvm::APInt::operator*((uint64_t)&v30, &v28, (uint64_t)&v34);
  if (v31 >= 0x41 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
  v7 = v34;
  v8 = v35;
  v9 = v27;
  if (v27 > 0x40)
  {
    v16 = v27 + 63;
    v13 = (void *)operator new[]();
    memcpy(v13, __src, (v16 >> 3) & 0x3FFFFFF8);
    llvm::APInt::tcShiftRight((llvm::APInt *)v13, (unint64_t *)(v16 >> 6), 1u);
    v17 = 0;
    v18 = (unint64_t *)v13;
    v19 = v7;
    v20 = v16 >> 6;
    do
    {
      v21 = (uint64_t)*v19++;
      v22 = v21 + *v18;
      v23 = v22 + 1 <= *v18;
      if (v17)
      {
        ++v22;
        v17 = v23;
      }
      else
      {
        v17 = v22 < *v18;
      }
      *v18++ = v22;
      --v20;
    }
    while (v20);
    *((_QWORD *)v13 + (v16 >> 6) - 1) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
  }
  else
  {
    v10 = (unint64_t)__src >> 1;
    if (v27 == 1)
      v10 = 0;
    v11 = (unint64_t)v34 + v10;
    v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
    if (!v27)
      v12 = 0;
    v13 = (void *)(v12 & v11);
  }
  v25 = v9;
  v24 = v13;
  llvm::APInt::udiv((llvm::APInt *)&v24, (const llvm::APInt *)&__src, (llvm::APInt *)&v34);
  if (v8 >= 0x41 && v7)
    MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  v30 = v34;
  v31 = v35;
  v35 = 0;
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  v14 = sub_1C47EE5B8(&v30, 0xFFFFFFFFFFFFFFFFLL);
  if (v27 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  if (v29 >= 0x41 && v28)
    MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  if (v31 >= 0x41 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
  return v14;
}

uint64_t llvm::BlockFrequencyInfoImplBase::setBlockFreq(uint64_t result, unsigned int *a2, uint64_t a3)
{
  *(_QWORD *)(*(_QWORD *)(result + 8) + 24 * *a2 + 16) = a3;
  return result;
}

void llvm::BlockFrequencyInfoImplBase::getBlockName(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void llvm::BlockFrequencyInfoImplBase::getLoopName(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  const std::string::value_type *v5;
  std::string *v6;
  int v7;
  std::string v8;

  v7 = **(_DWORD **)(a2 + 96);
  (*(void (**)(std::string *__return_ptr, uint64_t, int *))(*(_QWORD *)a1 + 16))(&v8, a1, &v7);
  if (*(_DWORD *)(a2 + 12) <= 1u)
    v5 = "*";
  else
    v5 = "**";
  v6 = std::string::append(&v8, v5);
  *a3 = *v6;
  v6->__r_.__value_.__r.__words[0] = 0;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

llvm::raw_ostream *llvm::BlockFrequencyInfoImplBase::printBlockFreq(uint64_t a1, llvm::ScaledNumberBase *a2, unint64_t *a3)
{
  unint64_t v4;
  __int16 v5;
  unint64_t v6;

  if (*a3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
    if (v4)
    {
      v6 = llvm::ScaledNumbers::divide64(*a3, v4);
    }
    else
    {
      v6 = -1;
      v5 = 0x3FFF;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  return llvm::ScaledNumberBase::print(a2, (llvm::raw_ostream *)v6, v5, 64, 0xAu);
}

void sub_1C4DB8928(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  void *__p;
  char *v9;
  char *v10;
  char *v11;
  uint64_t *v12;

  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3) < a2)
  {
    v3 = a1[1] - *a1;
    v12 = a1 + 2;
    v4 = 56 * a2;
    __p = operator new(56 * a2);
    v9 = (char *)__p + v3;
    v10 = (char *)__p + v3;
    v11 = (char *)__p + v4;
    sub_1C4DBA288(a1, &__p);
    v6 = v9;
    v5 = v10;
    if (v10 != v9)
    {
      do
      {
        v7 = v5 - 56;
        sub_1C484143C((uint64_t)(v5 - 48));
        v5 = v7;
      }
      while (v7 != v6);
    }
    if (__p)
      operator delete(__p);
  }
}

_QWORD *llvm::bfi_detail::IrreducibleGraph::indexNodes(_QWORD *this)
{
  _DWORD *v1;
  _DWORD *v2;
  _DWORD *v3;

  v1 = (_DWORD *)this[3];
  v2 = (_DWORD *)this[4];
  if (v1 != v2)
  {
    v3 = this + 6;
    do
    {
      this = sub_1C617C220(v3, v1);
      this[1] = v1;
      v1 += 14;
    }
    while (v1 != v2);
  }
  return this;
}

uint64_t *llvm::bfi_detail::IrreducibleGraph::addNodesInFunction(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  _DWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;

  v1 = this;
  *((_DWORD *)this + 2) = 0;
  v2 = *this;
  v3 = *(_QWORD *)(*this + 64);
  if (*(_QWORD *)(*this + 72) != v3)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = v3 + 24 * v4;
      v7 = *(uint64_t **)(v6 + 8);
      v8 = (_DWORD *)v6;
      if (v7)
      {
        v8 = (_DWORD *)v6;
        if (*((_BYTE *)v7 + 8))
        {
          do
          {
            v9 = v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7 && *((_BYTE *)v7 + 8));
          v8 = (_DWORD *)v9[12];
        }
      }
      if (*v8 == *(_DWORD *)v6)
      {
        v10 = v1[4];
        if (v10 >= v1[5])
        {
          v11 = sub_1C4DBA14C(v1 + 3, v5);
        }
        else
        {
          *(_DWORD *)v10 = v5;
          v11 = v10 + 56;
          *(_OWORD *)(v10 + 4) = 0u;
          *(_OWORD *)(v10 + 20) = 0u;
          *(_OWORD *)(v10 + 36) = 0u;
          *(_DWORD *)(v10 + 52) = 0;
        }
        v1[4] = v11;
        this = (uint64_t *)sub_1C4DB3A24(*(_QWORD *)(*v1 + 64) + 24 * v5);
        *this = 0;
        v2 = *v1;
      }
      v3 = *(_QWORD *)(v2 + 64);
      v4 = ++v5;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v2 + 72) - v3) >> 3) > v5);
  }
  v12 = (_DWORD *)v1[3];
  v13 = (_DWORD *)v1[4];
  if (v12 != v13)
  {
    v14 = v1 + 6;
    do
    {
      this = (uint64_t *)sub_1C617C220(v14, v12);
      this[1] = (uint64_t)v12;
      v12 += 14;
    }
    while (v12 != v13);
  }
  return this;
}

void llvm::bfi_detail::IrreducibleGraph::addEdge(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a4)
    goto LABEL_12;
  v6 = *(unsigned int *)(a4 + 12);
  v7 = *(_DWORD **)(a4 + 96);
  if (v6 < 2)
  {
    if (*a3 == *v7)
      return;
    goto LABEL_12;
  }
  v8 = *a3;
  v9 = *(unsigned int **)(a4 + 96);
  v10 = *(unsigned int *)(a4 + 12);
  do
  {
    v11 = v10 >> 1;
    v12 = &v9[v10 >> 1];
    v14 = *v12;
    v13 = v12 + 1;
    v10 += ~(v10 >> 1);
    if (v14 < v8)
      v9 = v13;
    else
      v10 = v11;
  }
  while (v10);
  if (v9 == &v7[v6] || v8 < *v9)
  {
LABEL_12:
    v15 = sub_1C617C028(a1 + 48, a3);
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    {
      v16 = a1 + 56;
      v17 = 4;
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(unsigned int *)(a1 + 64);
    }
    if (v16 + 16 * v17 != v15)
    {
      v19 = *(_QWORD *)(v15 + 8);
      v18 = v19;
      sub_1C4DB5818((_QWORD *)(a2 + 8), &v19);
      v19 = a2;
      sub_1C617CB38((_QWORD *)(v18 + 8), &v19);
      ++*(_DWORD *)(v18 + 4);
    }
  }
}

uint64_t llvm::BlockFrequencyInfoImplBase::analyzeIrreducible(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  unint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  int *v30;
  size_t v31;
  void *v32;
  size_t v33;
  int *v34;
  uint64_t *v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  int *v41;
  uint64_t v42;
  _QWORD *v43;
  _DWORD **v44;
  _DWORD **v45;
  _DWORD **v46;
  _DWORD *v47;
  _DWORD **v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  int *v55;
  int *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD v68[3];
  int v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  size_t __nel;
  _BYTE v78[16];
  void *__base;
  uint64_t v80;
  _BYTE v81[16];
  uint64_t v82;
  _QWORD *v83;
  unsigned int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  if (a3)
    v5 = *a4;
  else
    v5 = a1 + 88;
  v65 = v5;
  v6 = *(_QWORD *)(a2 + 16);
  LODWORD(v68[0]) = 0;
  v68[1] = 0;
  v68[2] = 0;
  v69 = 0;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0;
  sub_1C617DC3C((int *)v68, v6);
  sub_1C4DBA658(v68);
  v7 = (uint64_t *)*((_QWORD *)&v71 + 1);
  v8 = (uint64_t *)v72;
  if (*((_QWORD *)&v71 + 1) != (_QWORD)v72)
  {
    while ((unint64_t)((char *)v8 - (char *)v7) < 0x10)
    {
LABEL_9:
      sub_1C4DBA658(v68);
      v7 = (uint64_t *)*((_QWORD *)&v71 + 1);
      v8 = (uint64_t *)v72;
      if (*((_QWORD *)&v71 + 1) == (_QWORD)v72)
        goto LABEL_5;
    }
    __base = v81;
    v80 = 0x400000000;
    v76 = v78;
    __nel = 0x400000000;
    v11 = 8;
    v82 = 1;
    do
    {
      *(uint64_t *)((char *)&v82 + v11) = -4096;
      v11 += 16;
    }
    while (v11 != 136);
    while (v7 != v8)
    {
      v12 = *v7++;
      v75 = v12;
      *((_BYTE *)sub_1C617D144(&v82, &v75) + 8) = 0;
    }
    v13 = sub_1C617D0CC((int *)&v82);
    v15 = v82;
    v16 = v83;
    if ((v82 & 1) != 0)
      v16 = &v83;
    v17 = v84;
    if ((v82 & 1) != 0)
      v17 = 8;
    v18 = (int *)&v16[2 * v17];
    if (v18 != v13)
    {
      v19 = v13;
      v20 = v14;
      do
      {
        v21 = *(int **)v19;
        v22 = *(_QWORD *)(*(_QWORD *)v19 + 16);
        v23 = (_QWORD *)(v22 + 8 * (*(_QWORD *)(*(_QWORD *)v19 + 40) >> 9));
        if (*(_QWORD *)(*(_QWORD *)v19 + 24) == v22)
          v24 = 0;
        else
          v24 = (uint64_t *)(*v23 + 8 * (*(_QWORD *)(*(_QWORD *)v19 + 40) & 0x1FFLL));
        sub_1C617D3D8(*(_QWORD *)v19);
        if (v24 != v25)
        {
          v26 = v25;
          while ((sub_1C617D1A8((uint64_t)&v82, *v24, &v75) & 1) != 0)
          {
            if ((uint64_t *)((char *)++v24 - *v23) == (uint64_t *)4096)
            {
              v27 = (uint64_t *)v23[1];
              ++v23;
              v24 = v27;
            }
            if (v24 == v26)
              goto LABEL_35;
          }
          *((_BYTE *)v19 + 8) = 1;
          v28 = *v21;
          v29 = v80;
          if (v80 >= (unint64_t)HIDWORD(v80))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v81, v80 + 1, 4);
            v29 = v80;
          }
          *((_DWORD *)__base + v29) = v28;
          LODWORD(v80) = v80 + 1;
        }
LABEL_35:
        v30 = v19 + 4;
        v19 = v20;
        if (v30 != v20)
        {
          v19 = v30;
          while ((*(_QWORD *)v19 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v19 += 4;
            if (v19 == v20)
            {
              v19 = v20;
              break;
            }
          }
        }
      }
      while (v19 != v18);
      v15 = v82;
    }
    v31 = v80;
    if (v80 == v15 >> 1)
    {
      if (v80 < 2uLL)
      {
LABEL_82:
        if ((v82 & 1) == 0)
          MEMORY[0x1CAA32FB4](v83, 8);
        v53 = __base;
        v54 = (char *)__base + 4 * v80;
        v55 = (int *)v76;
        v56 = (int *)((char *)v76 + 4 * __nel);
        v57 = operator new(0xC0uLL);
        *v57 = 0;
        v57[1] = 0;
        sub_1C617D47C((uint64_t)(v57 + 2), a3, v53, v54, v55, v56);
        v58 = *a4;
        *(_QWORD *)(v58 + 8) = v57;
        *v57 = v58;
        *a4 = (uint64_t)v57;
        v57[1] = a4;
        ++*(_QWORD *)(a1 + 104);
        v59 = *((unsigned int *)v57 + 30);
        if ((_DWORD)v59)
        {
          v60 = (unsigned int *)v57[14];
          v61 = *(_QWORD *)(a1 + 64);
          v62 = 4 * v59;
          do
          {
            v63 = sub_1C4DB2AAC((int *)(v61 + 24 * *v60));
            v61 = *(_QWORD *)(a1 + 64);
            v64 = (_QWORD *)(v61 + 24 * *v60 + 8);
            if (v63)
              v64 = (_QWORD *)*v64;
            *v64 = v57 + 2;
            ++v60;
            v62 -= 4;
          }
          while (v62);
        }
        if (v76 != v78)
          free(v76);
        if (__base != v81)
          free(__base);
        goto LABEL_9;
      }
      v32 = __base;
      v33 = v80;
    }
    else
    {
      v34 = sub_1C617D0CC((int *)&v82);
      v36 = v83;
      if ((v15 & 1) != 0)
        v36 = &v83;
      v37 = v84;
      if ((v15 & 1) != 0)
        v37 = 8;
      v38 = &v36[2 * v37];
      if (v38 != (uint64_t *)v34)
      {
        v39 = (uint64_t *)v34;
        v40 = v35;
        do
        {
          if (*((_BYTE *)v39 + 8))
            goto LABEL_52;
          v41 = (int *)*v39;
          v42 = *(_QWORD *)(*v39 + 16);
          v43 = (_QWORD *)(v42 + 8 * (*(_QWORD *)(*v39 + 40) >> 9));
          if (*(_QWORD *)(*v39 + 24) == v42)
            v44 = 0;
          else
            v44 = (_DWORD **)(*v43 + 8 * (*(_QWORD *)(*v39 + 40) & 0x1FFLL));
          sub_1C617D3D8(*v39);
          if (v44 != v45)
          {
            v46 = v45;
            while (1)
            {
              v47 = *v44;
              if (**v44 >= *v41)
              {
                v75 = 0;
                if (!sub_1C617D1A8((uint64_t)&v82, (uint64_t)v47, &v75) || !*(_BYTE *)(v75 + 8))
                  break;
              }
              if ((_DWORD **)((char *)++v44 - *v43) == (_DWORD **)4096)
              {
                v48 = (_DWORD **)v43[1];
                ++v43;
                v44 = v48;
              }
              if (v44 == v46)
                goto LABEL_73;
            }
            v49 = *v41;
            v50 = v80;
            if (v80 >= (unint64_t)HIDWORD(v80))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v81, v80 + 1, 4);
              v50 = v80;
            }
            *((_DWORD *)__base + v50) = v49;
            LODWORD(v80) = v80 + 1;
          }
LABEL_73:
          v51 = *v41;
          if (*((_DWORD *)__base + v80 - 1) != *v41)
          {
            v52 = __nel;
            if (__nel >= (unint64_t)HIDWORD(__nel))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v76, (uint64_t)v78, __nel + 1, 4);
              v52 = __nel;
            }
            *((_DWORD *)v76 + v52) = v51;
            LODWORD(__nel) = __nel + 1;
          }
LABEL_52:
          while (1)
          {
            v39 += 2;
            if (v39 == v40)
              break;
            if ((*v39 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_56;
          }
          v39 = v40;
LABEL_56:
          ;
        }
        while (v39 != v38);
        v31 = v80;
      }
      if (v31 >= 2)
        qsort(__base, v31, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1C617D460);
      v33 = __nel;
      if (__nel < 2)
        goto LABEL_82;
      v32 = v76;
    }
    qsort(v32, v33, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1C617D460);
    goto LABEL_82;
  }
LABEL_5:
  sub_1C617D7D4(v68);
  v9 = a1 + 96;
  if (a3)
    v9 = v65 + 8;
  return *(_QWORD *)v9;
}

void llvm::BlockFrequencyInfoImplBase::updateLoopWithIrreducible(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  _DWORD *v14;
  uint64_t *v15;

  *(_DWORD *)(a2 + 24) = 0;
  v4 = *(unsigned int *)(a2 + 136);
  if ((_DWORD)v4)
    bzero(*(void **)(a2 + 128), 8 * v4);
  v5 = *(_QWORD *)(a2 + 96);
  v6 = (unsigned int *)(v5 + 4);
  v7 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v7 == 1)
  {
    v8 = (unsigned int *)(v5 + 4);
  }
  else
  {
    v9 = (unsigned int *)(v5 + 4 * v7);
    v10 = *(_QWORD *)(a1 + 64);
    v8 = (unsigned int *)(v5 + 4);
    do
    {
      v11 = *v6;
      v12 = v10 + 24 * *v6;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = (_DWORD *)v12;
      if (v13)
      {
        v14 = (_DWORD *)(v10 + 24 * v11);
        if (*((_BYTE *)v13 + 8))
        {
          do
          {
            v15 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13 && *((_BYTE *)v13 + 8));
          v14 = (_DWORD *)v15[12];
        }
      }
      if (*v14 == *(_DWORD *)v12)
        *v8++ = v11;
      ++v6;
    }
    while (v6 != v9);
  }
  *(_DWORD *)(a2 + 104) = ((unint64_t)v8 - v5) >> 2;
}

uint64_t sub_1C4DB9328(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 152))
    v1 = *(_QWORD *)(result + 144);
  else
    v1 = 0;
  *(_QWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C4DB9344(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -1)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_7;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_7:
  *a4 = v6;
  return v10;
}

_DWORD *sub_1C4DB93E0(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C617D020(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -1;
      result += 6;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

void sub_1C4DB94A4(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  __int128 *v19;
  __int128 *v20;
  unsigned int v21;
  __int128 *v22;
  unsigned int v23;
  __int128 *v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  __int128 *v32;
  __int128 *v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  __int128 *v39;
  __int128 *v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 *v45;
  BOOL v47;
  uint64_t v48;
  _DWORD *v49;
  __int128 *v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  _OWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  __int128 *v85;
  __int128 *v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  __int128 *v91;
  unsigned int v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;

__int128 *sub_1C4DB9C00(__int128 *result, __int128 *a2, __int128 *a3)
{
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *((_DWORD *)a2 + 1);
  v4 = *((_DWORD *)a3 + 1);
  if (v3 >= *((_DWORD *)result + 1))
  {
    if (v4 < v3)
    {
      v6 = *a2;
      *a2 = *a3;
      *a3 = v6;
      if (*((_DWORD *)a2 + 1) < *((_DWORD *)result + 1))
      {
        v7 = *result;
        *result = *a2;
        *a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v8 = *result;
      *result = *a2;
      *a2 = v8;
      if (*((_DWORD *)a3 + 1) >= *((_DWORD *)a2 + 1))
        return result;
      v5 = *a2;
      *a2 = *a3;
    }
    else
    {
      v5 = *result;
      *result = *a3;
    }
    *a3 = v5;
  }
  return result;
}

BOOL sub_1C4DB9CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 4))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v6;
      }
      return result;
    case 3:
      sub_1C4DB9C00((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)(a2 - 16));
      return 1;
    case 4:
      sub_1C4DB9EB4(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      v17 = (__int128 *)(a1 + 16);
      v18 = (__int128 *)(a1 + 32);
      v19 = (__int128 *)(a1 + 48);
      sub_1C4DB9EB4(a1, a1 + 16, a1 + 32, a1 + 48);
      if (*(_DWORD *)(a2 - 12) < *(_DWORD *)(a1 + 52))
      {
        v20 = *v19;
        *v19 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v20;
        if (*(_DWORD *)(a1 + 52) < *(_DWORD *)(a1 + 36))
        {
          v21 = *v18;
          *v18 = *v19;
          *v19 = v21;
          if (*(_DWORD *)(a1 + 36) < *(_DWORD *)(a1 + 20))
          {
            v22 = *v17;
            *v17 = *v18;
            *v18 = v22;
            if (*(_DWORD *)(a1 + 20) < *(_DWORD *)(a1 + 4))
            {
              v23 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *v17 = v23;
            }
          }
        }
      }
      return 1;
    default:
      v7 = a1 + 32;
      sub_1C4DB9C00((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)(a1 + 32));
      v8 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)(v8 + 4);
    if (v11 < *(_DWORD *)(v7 + 4))
    {
      v12 = *(_DWORD *)v8;
      v13 = *(_QWORD *)(v8 + 8);
      v14 = v9;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_DWORD *)(a1 + v14 + 20);
        v14 -= 16;
        if (v11 >= v15)
        {
          v16 = a1 + v14 + 48;
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *(_DWORD *)v16 = v12;
      *(_DWORD *)(v16 + 4) = v11;
      *(_QWORD *)(v16 + 8) = v13;
      if (++v10 == 8)
        return v8 + 16 == a2;
    }
    v7 = v8;
    v9 += 16;
    v8 += 16;
    if (v8 == a2)
      return 1;
  }
}

__n128 sub_1C4DB9EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  sub_1C4DB9C00((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(_DWORD *)(a4 + 4) < *(_DWORD *)(a3 + 4))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_DWORD *)(a3 + 4) < *(_DWORD *)(a2 + 4))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(_DWORD *)(a2 + 4) < *(_DWORD *)(a1 + 4))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t sub_1C4DB9F50(uint64_t a1)
{
  unint64_t v1;
  int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t result;
  unint64_t v19;

  v1 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v2 = *(__int16 *)(a1 + 8);
  v3 = __clz(v1);
  v4 = (v3 ^ 0x3Fu) + v2;
  v5 = 1 << (v3 ^ 0x3Fu);
  v6 = 1 << (62 - v3);
  v7 = (v6 & v1) == 0;
  if ((v6 & v1) != 0)
    v8 = (v4 + 1);
  else
    v8 = v4;
  v9 = 0x100000000;
  if (v7)
    v9 = 0xFFFFFFFF00000000;
  v10 = v9 | v8;
  if (v5 == v1)
    v10 = (v3 ^ 0x3Fu) + v2;
  v11 = v10 - (SHIDWORD(v10) > 0);
  if (v11)
  {
    if ((v11 & 0x80000000) == 0)
      goto LABEL_11;
    return 0;
  }
  if ((v2 & 0x80000000) == 0)
  {
    if (1uLL >> v2 < v1 || !*(_WORD *)(a1 + 8))
      goto LABEL_11;
    return 0;
  }
  if (!(v1 >> -(char)v2))
    return 0;
LABEL_11:
  v12 = 1 << (62 - v3);
  v13 = (v12 & v1) == 0;
  if ((v12 & v1) != 0)
    v14 = (v4 + 1);
  else
    v14 = v4;
  v15 = 0x100000000;
  if (v13)
    v15 = 0xFFFFFFFF00000000;
  v16 = v15 | v14;
  if (v5 != v1)
    v4 = v16;
  v17 = v4 - (SHIDWORD(v4) > 0);
  if (v17 != 63)
  {
    if (v17 >= 63)
      return -1;
LABEL_29:
    if (v2 >= 1)
      return v1 << v2;
    if (v2 < 0)
      return v1 >> -(char)v2;
    return v1;
  }
  if (v2 < 0)
    return v1 >> -(char)v2;
  result = -1;
  v19 = 0xFFFFFFFFFFFFFFFFLL >> v2;
  if (0xFFFFFFFFFFFFFFFFLL >> v2 >= v1 && (v19 > v1 || v19 << v2 != -1))
    goto LABEL_29;
  return result;
}

uint64_t *sub_1C4DBA094(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;

  if (result[2])
  {
    v4 = *result;
    v3 = (uint64_t *)result[1];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(*result + 8);
    **(_QWORD **)(v4 + 8) = v5;
    result[2] = 0;
    if (v3 != result)
    {
      v11 = a2;
      v12 = result;
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        a2 = v11;
        result = v12;
        v3 = v6;
      }
      while (v6 != v12);
    }
  }
  v2 = a2[2];
  if (v2)
  {
    v8 = *a2;
    v7 = (uint64_t *)a2[1];
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = *(_QWORD *)(*a2 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    v10 = *result;
    *(_QWORD *)(v10 + 8) = v7;
    *v7 = v10;
    *result = v8;
    *(_QWORD *)(v8 + 8) = result;
    result[2] += v2;
    a2[2] = 0;
  }
  return result;
}

uint64_t sub_1C4DBA14C(uint64_t *a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v5 = 0x492492492492492;
  else
    v5 = v3;
  v19 = a1 + 2;
  if (v5 > 0x492492492492492)
    sub_1C4764EE4();
  v7 = 56 * v5;
  v8 = (char *)operator new(56 * v5);
  v9 = &v8[56 * v2];
  __p = v8;
  v16 = v9;
  *(_DWORD *)v9 = a2;
  *(_OWORD *)(v9 + 4) = 0u;
  *(_OWORD *)(v9 + 20) = 0u;
  *(_OWORD *)(v9 + 36) = 0u;
  *((_DWORD *)v9 + 13) = 0;
  v17 = v9 + 56;
  v18 = &v8[v7];
  sub_1C4DBA288(a1, &__p);
  v10 = a1[1];
  v12 = v16;
  v11 = v17;
  if (v17 != v16)
  {
    do
    {
      v13 = v11 - 56;
      sub_1C484143C((uint64_t)(v11 - 48));
      v11 = v13;
    }
    while (v13 != v12);
  }
  if (__p)
    operator delete(__p);
  return v10;
}

uint64_t *sub_1C4DBA288(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_QWORD *)(v6 - 56) = *(_QWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 48) = *(_QWORD *)(v2 + v5 - 48);
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      *(_OWORD *)(v7 - 48) = 0uLL;
      *(_OWORD *)(v7 - 32) = 0uLL;
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C4DBA338(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C617D310(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      v9[8] = *(_BYTE *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C617D310(a1, (uint64_t)v14, (uint64_t)v9);
}

__n128 sub_1C4DBA4B0(uint64_t **a1, _WORD *a2, __n128 *a3)
{
  uint64_t *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&llvm::IterativeBFIPrecision, "iterative-bfi-precision", 0x17uLL);
  v6 = *a1;
  *(_QWORD *)&xmmword_1ED82CEB8 = **a1;
  byte_1ED82CED0 = 1;
  qword_1ED82CEC8 = *v6;
  word_1ED82CE42 = (32 * (*a2 & 3)) | word_1ED82CE42 & 0xFF9F;
  result = *a3;
  xmmword_1ED82CE58 = (__int128)*a3;
  return result;
}

void sub_1C4DBA538(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    v6 = *(char **)a1;
    v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(_QWORD *)a1)
    {
      if (v4 == v6)
        v14 = 1;
      else
        v14 = (v4 - v6) >> 2;
      if (v14 >> 61)
        sub_1C4764EE4();
      v15 = (char *)operator new(8 * v14);
      v16 = &v15[8 * (v14 >> 2)];
      v18 = v4 - v5;
      v17 = v4 == v5;
      v4 = v16;
      if (!v17)
      {
        v4 = &v16[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = &v15[8 * (v14 >> 2)];
        do
        {
          v21 = *(_QWORD *)v5;
          v5 += 8;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = &v15[8 * v14];
      if (v6)
      {
        operator delete(v6);
        v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      v7 = (uint64_t)&v5[-*(_QWORD *)a1] >> 3;
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = -(v8 >> 1);
      v10 = v8 >> 1;
      v11 = &v5[-8 * v10];
      v12 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v10], *(const void **)(a1 + 8), v4 - v5);
        v4 = *(char **)(a1 + 8);
      }
      v13 = &v4[8 * v9];
      v4 = &v11[v12];
      *(_QWORD *)(a1 + 8) = v13;
      *(_QWORD *)(a1 + 16) = &v11[v12];
    }
  }
  *(_QWORD *)v4 = *a2;
  *(_QWORD *)(a1 + 16) += 8;
}

_QWORD *sub_1C4DBA658(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  result[8] = result[7];
  if (result[10] != result[11])
  {
    v1 = result;
    v2 = (uint64_t)(result + 1);
    while (1)
    {
      sub_1C617DCF4((uint64_t)v1);
      v4 = v1[10];
      v3 = v1[11];
      v18 = *(_QWORD *)(v3 - 32);
      v5 = *(_DWORD *)(v3 - 8);
      v1[11] = v3 - 32;
      if (v4 != v3 - 32 && *(_DWORD *)(v3 - 40) > v5)
        *(_DWORD *)(v3 - 40) = v5;
      result = sub_1C6144C70(v2, &v18);
      if (v5 == *((_DWORD *)result + 2))
        break;
      if (v1[10] == v1[11])
        return result;
    }
    v6 = (_QWORD *)v1[8];
    do
    {
      v7 = v1[5];
      v8 = v1[9];
      if ((unint64_t)v6 >= v8)
      {
        v10 = (_QWORD *)v1[7];
        v11 = v6 - v10;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          abort();
        v13 = v8 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 >> 61)
            sub_1C4764EE4();
          v15 = (char *)operator new(8 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = *(_QWORD *)(v7 - 8);
        v9 = v16 + 8;
        if (v6 != v10)
        {
          do
          {
            v17 = *--v6;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          while (v6 != v10);
          v6 = (_QWORD *)v1[7];
        }
        v1[7] = v16;
        v1[8] = v9;
        v1[9] = &v15[8 * v14];
        if (v6)
          operator delete(v6);
      }
      else
      {
        *v6 = *(_QWORD *)(v7 - 8);
        v9 = v6 + 1;
      }
      v1[8] = v9;
      v1[5] -= 8;
      result = sub_1C6144C70(v2, v9 - 1);
      *((_DWORD *)result + 2) = -1;
      v6 = (_QWORD *)v1[8];
    }
    while (*(v6 - 1) != v18);
  }
  return result;
}

_OWORD *sub_1C4DBA810(void **a1, _OWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 59)
      sub_1C4764EE4();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v4];
  v12 = a2[1];
  *(_OWORD *)v11 = *a2;
  *((_OWORD *)v11 + 1) = v12;
  v13 = v11 + 32;
  if (v2 != v3)
  {
    do
    {
      v14 = *((_OWORD *)v2 - 2);
      *(_OWORD *)(v11 - 20) = *(_OWORD *)(v2 - 20);
      *((_OWORD *)v11 - 2) = v14;
      v11 -= 32;
      v2 -= 32;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v13;
  a1[2] = &v10[32 * v9];
  if (v2)
    operator delete(v2);
  return v13;
}

uint64_t sub_1C4DBA8FC()
{
  char v1;
  __n128 v2;
  int v3;
  uint64_t v4;
  char *v5;

  LOBYTE(v3) = 0;
  v5 = (char *)&v3;
  LODWORD(v4) = 1;
  v2.n128_u64[0] = (unint64_t)"Check if block frequency is queried for an unknown block for debugging missed BFI updates";
  v2.n128_u64[1] = 89;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::CheckBFIUnknownBlockQueries, "check-bfi-unknown-block-queries", &v5, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::CheckBFIUnknownBlockQueries, &dword_1C475E000);
  v1 = 0;
  v5 = &v1;
  v3 = 1;
  LODWORD(v4) = 1;
  v2.n128_u64[0] = (unint64_t)"Apply an iterative post-processing to infer correct BFI counts";
  v2.n128_u64[1] = 62;
  sub_1C617D830((llvm::cl::Option *)&llvm::UseIterativeBFIInference, "use-iterative-bfi-inference", &v5, &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::UseIterativeBFIInference, &dword_1C475E000);
  v3 = 1;
  LODWORD(v4) = 1000;
  v5 = (char *)&v4;
  v2.n128_u64[0] = (unint64_t)"Iterative inference: maximum number of update iterations per block";
  v2.n128_u64[1] = 66;
  sub_1C4DB1928((uint64_t)&llvm::IterativeBFIMaxIterationsPerBlock, "iterative-bfi-max-iterations-per-block", (int **)&v5, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &llvm::IterativeBFIMaxIterationsPerBlock, &dword_1C475E000);
  v4 = 0x3D719799812DEA11;
  v5 = (char *)&v4;
  v3 = 1;
  v2.n128_u64[0] = (unint64_t)"Iterative inference: delta convergence precision; smaller values typically lead to "
                                     "better results at the cost of worsen runtime";
  v2.n128_u64[1] = 127;
  sub_1C617D984((uint64_t **)&v5, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4DB7184, &llvm::IterativeBFIPrecision, &dword_1C475E000);
}

uint64_t sub_1C4DBAA94(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeLoopInfoWrapperPassPass(a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Branch Probability Analysis";
  *(_QWORD *)(v2 + 8) = 27;
  *(_QWORD *)(v2 + 16) = "branch-prob";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &llvm::BranchProbabilityInfoWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::BranchProbabilityInfoWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C4DBAB48(uint64_t a1)
{
  sub_1C4DC0F58(*(_QWORD **)(a1 + 8));
  return a1;
}

llvm::BranchProbabilityInfo::SccInfo *llvm::BranchProbabilityInfo::SccInfo::SccInfo(llvm::BranchProbabilityInfo::SccInfo *this, const llvm::Function *a2)
{
  uint64_t v3;
  uint64_t v4;
  const llvm::BasicBlock **v5;
  const llvm::BasicBlock **v6;
  int v7;
  const llvm::BasicBlock *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  const llvm::BasicBlock *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  const llvm::BasicBlock *v19;
  int v20;
  unsigned int v21;
  const llvm::BasicBlock *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  void *v32[2];
  __int128 v33;
  __int128 v34;
  void *__p[2];
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  v3 = *((_QWORD *)a2 + 10);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  *(_OWORD *)v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  *(_OWORD *)__p = 0u;
  v36 = 0;
  sub_1C4DC0FA8(&v28, v4);
  sub_1C4DC127C((uint64_t)&v28);
  v5 = (const llvm::BasicBlock **)*((_QWORD *)&v33 + 1);
  v6 = (const llvm::BasicBlock **)v34;
  if (*((_QWORD *)&v33 + 1) != (_QWORD)v34)
  {
    v7 = 0;
    while (v6 == v5 || (char *)v6 - (char *)v5 == 8)
    {
LABEL_44:
      sub_1C4DC127C((uint64_t)&v28);
      ++v7;
      v5 = (const llvm::BasicBlock **)*((_QWORD *)&v33 + 1);
      v6 = (const llvm::BasicBlock **)v34;
      if (*((_QWORD *)&v33 + 1) == (_QWORD)v34)
        goto LABEL_45;
    }
    while (1)
    {
      v8 = *v5;
      v9 = *((_DWORD *)this + 4);
      if (!v9)
      {
        v12 = 0;
        goto LABEL_21;
      }
      v10 = v9 - 1;
      v11 = ((v8 >> 4) ^ (v8 >> 9)) & (v9 - 1);
      v12 = *(_QWORD *)this + 16 * v11;
      v13 = *(const llvm::BasicBlock **)v12;
      if (v8 != *(const llvm::BasicBlock **)v12)
        break;
LABEL_28:
      *(_DWORD *)(v12 + 8) = v7;
      llvm::BranchProbabilityInfo::SccInfo::calculateSccBlockType(this, v8, v7);
      if (++v5 == v6)
        goto LABEL_44;
    }
    v14 = 0;
    v15 = 1;
    while (v13 != (const llvm::BasicBlock *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == (const llvm::BasicBlock *)-8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = *(_QWORD *)this + 16 * (v17 & v10);
      v13 = *(const llvm::BasicBlock **)v12;
      if (v8 == *(const llvm::BasicBlock **)v12)
        goto LABEL_28;
    }
    if (v14)
      v12 = v14;
LABEL_21:
    v18 = *((_DWORD *)this + 2);
    if (4 * v18 + 4 >= 3 * v9)
    {
      sub_1C4DC1944((uint64_t *)this, 2 * v9);
      v20 = *((_DWORD *)this + 4) - 1;
      v21 = v20 & ((v8 >> 4) ^ (v8 >> 9));
      v12 = *(_QWORD *)this + 16 * v21;
      v22 = *(const llvm::BasicBlock **)v12;
      if (v8 == *(const llvm::BasicBlock **)v12)
      {
LABEL_40:
        v19 = v8;
        goto LABEL_25;
      }
      v23 = 0;
      v24 = 1;
      while (v22 != (const llvm::BasicBlock *)-4096)
      {
        if (v23)
          v25 = 0;
        else
          v25 = v22 == (const llvm::BasicBlock *)-8192;
        if (v25)
          v23 = v12;
        v26 = v21 + v24++;
        v21 = v26 & v20;
        v12 = *(_QWORD *)this + 16 * (v26 & v20);
        v22 = *(const llvm::BasicBlock **)v12;
        if (v8 == *(const llvm::BasicBlock **)v12)
          goto LABEL_40;
      }
      if (v23)
        v12 = v23;
    }
    else if (v9 + ~v18 - *((_DWORD *)this + 3) <= v9 >> 3)
    {
      sub_1C4DC1944((uint64_t *)this, v9);
      v37 = 0;
      sub_1C4DC18C8(*(_QWORD *)this, *((_DWORD *)this + 4), (uint64_t)v8, &v37);
      v12 = v37;
    }
    v19 = *(const llvm::BasicBlock **)v12;
LABEL_25:
    ++*((_DWORD *)this + 2);
    if (v19 != (const llvm::BasicBlock *)-4096)
      --*((_DWORD *)this + 3);
    *(_QWORD *)v12 = v8;
    *(_DWORD *)(v12 + 8) = 0;
    goto LABEL_28;
  }
LABEL_45:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
    v5 = (const llvm::BasicBlock **)*((_QWORD *)&v33 + 1);
  }
  if (v5)
  {
    *(_QWORD *)&v34 = v5;
    operator delete(v5);
  }
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  MEMORY[0x1CAA32FB4](v29, 8);
  return this;
}

void llvm::BranchProbabilityInfo::SccInfo::calculateSccBlockType(llvm::BranchProbabilityInfo::SccInfo *this, const llvm::BasicBlock *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v11;
  const llvm::BasicBlock *v12;
  char *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  const llvm::BasicBlock **v33;
  const llvm::BasicBlock *v34;
  const llvm::BasicBlock **v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  const llvm::BasicBlock **v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  BOOL v67;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  const llvm::BasicBlock *v73;
  uint64_t v74;

  v6 = *((_QWORD *)a2 + 1);
  if (!v6)
    goto LABEL_11;
  while (1)
  {
    v7 = *(_QWORD *)(v6 + 24);
    v8 = *(unsigned __int8 *)(v7 + 16);
    v9 = v7 && v8 >= 0x1C;
    if (v9 && v8 - 29 < 0xB)
      break;
    v6 = *(_QWORD *)(v6 + 8);
    if (!v6)
      goto LABEL_11;
  }
  v56 = *(_QWORD *)this;
  v57 = *((unsigned int *)this + 4);
  v58 = v57 - 1;
LABEL_71:
  if (!(_DWORD)v57)
    goto LABEL_79;
  v59 = *(_QWORD *)(v7 + 40);
  LODWORD(v60) = ((v59 >> 4) ^ (v59 >> 9)) & v58;
  v61 = (uint64_t *)(v56 + 16 * v60);
  v62 = *v61;
  if (v59 != *v61)
  {
    v63 = 1;
    while (v62 != -4096)
    {
      v64 = v60 + v63++;
      v60 = v64 & v58;
      v62 = *(_QWORD *)(v56 + 16 * v60);
      if (v59 == v62)
      {
        v61 = (uint64_t *)(v56 + 16 * v60);
        goto LABEL_77;
      }
    }
    goto LABEL_79;
  }
LABEL_77:
  if (v61 == (uint64_t *)(*(_QWORD *)this + 16 * v57))
  {
LABEL_79:
    v65 = -1;
    goto LABEL_80;
  }
  v65 = *((_DWORD *)v61 + 2);
LABEL_80:
  if (v65 != a3)
  {
    v11 = 1;
    goto LABEL_12;
  }
  while (1)
  {
    v6 = *(_QWORD *)(v6 + 8);
    if (!v6)
      break;
    v7 = *(_QWORD *)(v6 + 24);
    v66 = *(unsigned __int8 *)(v7 + 16);
    if (v7)
      v67 = v66 >= 0x1C;
    else
      v67 = 0;
    if (v67 && v66 - 29 < 0xB)
      goto LABEL_71;
  }
LABEL_11:
  v11 = 0;
LABEL_12:
  v12 = (const llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (v12 == (const llvm::BasicBlock *)((char *)a2 + 40))
    goto LABEL_37;
  if (v12)
    v13 = (char *)v12 - 24;
  else
    v13 = 0;
  v14 = v13[16];
  if (v14 != 30)
  {
    v15 = 2;
    switch(v13[16])
    {
      case 30:
        __break(1u);
        goto LABEL_110;
      case 31:
        v15 = (*((_DWORD *)v13 + 5) >> 1) & 0x3FFFFFF;
        goto LABEL_100;
      case 32:
      case 38:
LABEL_110:
        v15 = (*((_DWORD *)v13 + 5) & 0x7FFFFFF) - 1;
        goto LABEL_100;
      case 33:
        goto LABEL_20;
      case 36:
        v15 = *((_WORD *)v13 + 9) & 1;
        goto LABEL_100;
      case 37:
        v15 = 1;
        goto LABEL_20;
      case 39:
        v15 = *((_DWORD *)v13 + 20) + 1;
LABEL_100:
        if (!v15)
          goto LABEL_37;
        goto LABEL_20;
      default:
        goto LABEL_37;
    }
  }
  if ((*((_DWORD *)v13 + 5) & 0x7FFFFFF) == 3)
    v15 = 2;
  else
    v15 = 1;
LABEL_20:
  v16 = 0;
  while (1)
  {
    if (v14 != 30)
      __asm { BR              X1 }
    v17 = *(_QWORD *)&v13[-32 * v16 - 32];
    v18 = *(_QWORD *)this;
    v19 = *((unsigned int *)this + 4);
    if ((_DWORD)v19)
    {
      LODWORD(v20) = ((v17 >> 4) ^ (v17 >> 9)) & (v19 - 1);
      v21 = (uint64_t *)(v18 + 16 * v20);
      v22 = *v21;
      if (v17 == *v21)
        goto LABEL_29;
      v23 = 1;
      while (v22 != -4096)
      {
        v24 = v20 + v23++;
        v20 = v24 & (v19 - 1);
        v22 = *(_QWORD *)(v18 + 16 * v20);
        if (v17 == v22)
        {
          v21 = (uint64_t *)(v18 + 16 * v20);
          goto LABEL_29;
        }
      }
    }
    v21 = (uint64_t *)(v18 + 16 * v19);
LABEL_29:
    v25 = v21 == (uint64_t *)(v18 + 16 * v19) ? -1 : *((_DWORD *)v21 + 2);
    if (v25 != a3)
      break;
    if (++v16 == v15)
      goto LABEL_37;
  }
  v11 |= 2u;
LABEL_37:
  v27 = (_BYTE *)*((_QWORD *)this + 3);
  v26 = (char *)*((_QWORD *)this + 4);
  v28 = 0xAAAAAAAAAAAAAAABLL * ((v26 - v27) >> 3);
  if (v28 <= a3)
  {
    v39 = a3 + 1;
    v40 = v39 - v28;
    if (v39 <= v28)
    {
      if (v39 < v28)
      {
        v69 = &v27[24 * v39];
        while (v26 != v69)
        {
          v70 = *((_QWORD *)v26 - 3);
          v26 -= 24;
          MEMORY[0x1CAA32FB4](v70, 8);
        }
        *((_QWORD *)this + 4) = v69;
      }
    }
    else
    {
      v41 = *((_QWORD *)this + 5);
      if (0xAAAAAAAAAAAAAAABLL * ((v41 - (uint64_t)v26) >> 3) >= v40)
      {
        v71 = &v26[24 * v40];
        v72 = 24 * v39 - 8 * ((v26 - v27) >> 3);
        do
        {
          *(_QWORD *)v26 = 0;
          *((_QWORD *)v26 + 1) = 0;
          *((_DWORD *)v26 + 4) = 0;
          v26 += 24;
          v72 -= 24;
        }
        while (v72);
        *((_QWORD *)this + 4) = v71;
      }
      else
      {
        if (a3 <= -2)
          abort();
        v42 = 0xAAAAAAAAAAAAAAABLL * ((v41 - (uint64_t)v27) >> 3);
        v43 = 0x5555555555555556 * ((v41 - (uint64_t)v27) >> 3);
        if (v43 <= v39)
          v43 = a3 + 1;
        if (v42 >= 0x555555555555555)
          v44 = 0xAAAAAAAAAAAAAAALL;
        else
          v44 = v43;
        if (v44 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v45 = (char *)operator new(24 * v44);
        v46 = &v45[8 * ((v26 - v27) >> 3)];
        v47 = &v45[24 * v39];
        v48 = v46;
        v49 = 24 * v39 - 8 * ((v26 - v27) >> 3);
        do
        {
          *(_QWORD *)v48 = 0;
          *((_QWORD *)v48 + 1) = 0;
          *((_DWORD *)v48 + 4) = 0;
          v48 += 24;
          v49 -= 24;
        }
        while (v49);
        v50 = &v45[24 * v44];
        if (v26 == v27)
        {
          *((_QWORD *)this + 3) = v46;
          *((_QWORD *)this + 4) = v47;
          *((_QWORD *)this + 5) = v50;
        }
        else
        {
          do
          {
            v51 = *((_QWORD *)v26 - 3);
            v26 -= 24;
            *((_QWORD *)v46 - 3) = v51;
            v46 -= 24;
            *(_QWORD *)v26 = 0;
            *((_DWORD *)v46 + 2) = *((_DWORD *)v26 + 2);
            *((_DWORD *)v26 + 2) = 0;
            *((_DWORD *)v46 + 3) = *((_DWORD *)v26 + 3);
            *((_DWORD *)v26 + 3) = 0;
            *((_DWORD *)v46 + 4) = *((_DWORD *)v26 + 4);
            *((_DWORD *)v26 + 4) = 0;
          }
          while (v26 != v27);
          v26 = (char *)*((_QWORD *)this + 3);
          v52 = (char *)*((_QWORD *)this + 4);
          *((_QWORD *)this + 3) = v46;
          *((_QWORD *)this + 4) = v47;
          *((_QWORD *)this + 5) = v50;
          while (v52 != v26)
          {
            v53 = *((_QWORD *)v52 - 3);
            v52 -= 24;
            MEMORY[0x1CAA32FB4](v53, 8);
          }
        }
        if (v26)
          operator delete(v26);
      }
    }
  }
  if (v11)
  {
    v29 = *((_QWORD *)this + 3) + 24 * a3;
    v73 = a2;
    v74 = v11;
    v30 = *(_DWORD *)(v29 + 16);
    if (!v30)
    {
      v54 = 0;
      goto LABEL_69;
    }
    v31 = v30 - 1;
    v32 = v31 & ((a2 >> 4) ^ (a2 >> 9));
    v33 = (const llvm::BasicBlock **)(*(_QWORD *)v29 + 16 * v32);
    v34 = *v33;
    if (*v33 != a2)
    {
      v35 = 0;
      v36 = 1;
      while (v34 != (const llvm::BasicBlock *)-4096)
      {
        if (v35)
          v37 = 0;
        else
          v37 = v34 == (const llvm::BasicBlock *)-8192;
        if (v37)
          v35 = v33;
        v38 = v32 + v36++;
        v32 = v38 & v31;
        v33 = (const llvm::BasicBlock **)(*(_QWORD *)v29 + 16 * v32);
        v34 = *v33;
        if (*v33 == a2)
          return;
      }
      if (v35)
        v54 = v35;
      else
        v54 = v33;
LABEL_69:
      v55 = sub_1C4DC1798(v29, (uint64_t)&v73, (uint64_t *)&v73, v54);
      *v55 = v73;
      *((_DWORD *)v55 + 2) = v74;
    }
  }
}

uint64_t llvm::BranchProbabilityInfo::SccInfo::getSCCNum(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*v5 == a2)
      goto LABEL_8;
    v7 = 1;
    while (v6 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0xFFFFFFFFLL;
  else
    return *((unsigned int *)v5 + 2);
}

uint64_t llvm::BranchProbabilityInfo::SccInfo::getSccEnterBlocks(uint64_t this, int a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  int v7;
  const llvm::BasicBlock **v8;
  uint64_t v9;
  const llvm::BasicBlock **v10;
  uint64_t v11;
  const llvm::BasicBlock **v12;
  const llvm::BasicBlock **v13;
  const llvm::BasicBlock *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  const llvm::BasicBlock **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v34;

  v5 = (unsigned int *)this;
  v6 = *(_QWORD *)(this + 24) + 24 * a2;
  v7 = *(_DWORD *)(v6 + 8);
  v8 = *(const llvm::BasicBlock ***)v6;
  v9 = *(unsigned int *)(v6 + 16);
  v10 = &v8[2 * v9];
  if (v7)
  {
    if ((_DWORD)v9)
    {
      v11 = 16 * v9;
      v12 = v8;
      while (((unint64_t)*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v12 += 2;
        v11 -= 16;
        if (!v11)
          goto LABEL_6;
      }
    }
    else
    {
      v12 = v8;
    }
  }
  else
  {
LABEL_6:
    v12 = &v8[2 * v9];
  }
  v13 = &v8[2 * v9];
  if (v12 != v13)
  {
    while (1)
    {
      v14 = *v12;
      this = llvm::BranchProbabilityInfo::SccInfo::getSccBlockType((llvm::BranchProbabilityInfo::SccInfo *)v5, *v12, a2);
      if ((this & 1) != 0)
      {
        v15 = *((_QWORD *)v14 + 1);
        if (v15)
          break;
      }
LABEL_20:
      v20 = v12 + 2;
      v12 = v10;
      if (v20 != v10)
      {
        v12 = v20;
        while (((unint64_t)*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v12 += 2;
          if (v12 == v10)
          {
            v12 = v10;
            break;
          }
        }
      }
      if (v12 == v13)
        return this;
    }
    while (1)
    {
      v16 = *(_QWORD *)(v15 + 24);
      v17 = *(unsigned __int8 *)(v16 + 16);
      v18 = v16 && v17 >= 0x1C;
      if (v18 && v17 - 29 < 0xB)
        break;
      v15 = *(_QWORD *)(v15 + 8);
      if (!v15)
        goto LABEL_20;
    }
LABEL_27:
    v21 = *(_QWORD *)v5;
    v22 = v5[4];
    if ((_DWORD)v22)
    {
      v23 = *(_QWORD *)(v16 + 40);
      LODWORD(v24) = ((v23 >> 4) ^ (v23 >> 9)) & (v22 - 1);
      v25 = (uint64_t *)(v21 + 16 * v24);
      v26 = *v25;
      if (v23 == *v25)
      {
LABEL_34:
        if (v25 == (uint64_t *)(v21 + 16 * v22))
          v29 = -1;
        else
          v29 = *((_DWORD *)v25 + 2);
        if (v29 != a2)
        {
          v30 = *(unsigned int *)(a3 + 8);
          if (v30 >= *(unsigned int *)(a3 + 12))
          {
            v34 = v15;
            this = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v30 + 1, 8);
            v15 = v34;
            v30 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v30) = v14;
          ++*(_DWORD *)(a3 + 8);
        }
        while (1)
        {
          v15 = *(_QWORD *)(v15 + 8);
          if (!v15)
            goto LABEL_20;
          v16 = *(_QWORD *)(v15 + 24);
          v31 = *(unsigned __int8 *)(v16 + 16);
          if (v16)
            v32 = v31 >= 0x1C;
          else
            v32 = 0;
          if (v32 && v31 - 29 < 0xB)
            goto LABEL_27;
        }
      }
      v27 = 1;
      while (v26 != -4096)
      {
        v28 = v24 + v27++;
        v24 = v28 & (v22 - 1);
        v26 = *(_QWORD *)(v21 + 16 * v24);
        if (v23 == v26)
        {
          v25 = (uint64_t *)(v21 + 16 * v24);
          goto LABEL_34;
        }
      }
    }
    v25 = (uint64_t *)(v21 + 16 * v22);
    goto LABEL_34;
  }
  return this;
}

uint64_t llvm::BranchProbabilityInfo::SccInfo::getSccExitBlocks(uint64_t this, int a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  int v7;
  const llvm::BasicBlock **v8;
  uint64_t v9;
  const llvm::BasicBlock **v10;
  uint64_t v11;
  const llvm::BasicBlock **v12;
  const llvm::BasicBlock *v13;
  const llvm::BasicBlock **v14;
  const llvm::BasicBlock *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const llvm::BasicBlock **v38;

  v5 = (unsigned int *)this;
  v6 = *(_QWORD *)(this + 24) + 24 * a2;
  v7 = *(_DWORD *)(v6 + 8);
  v8 = *(const llvm::BasicBlock ***)v6;
  v9 = *(unsigned int *)(v6 + 16);
  v10 = &v8[2 * v9];
  if (v7)
  {
    if ((_DWORD)v9)
    {
      v11 = 16 * v9;
      v12 = v8;
      while (((unint64_t)*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v12 += 2;
        v11 -= 16;
        if (!v11)
          goto LABEL_6;
      }
    }
    else
    {
      v12 = v8;
    }
  }
  else
  {
LABEL_6:
    v12 = &v8[2 * v9];
  }
  v38 = &v8[2 * v9];
  if (v12 != v38)
  {
    v37 = a3 + 16;
    while (1)
    {
      v13 = *v12;
      this = llvm::BranchProbabilityInfo::SccInfo::getSccBlockType((llvm::BranchProbabilityInfo::SccInfo *)v5, *v12, a2);
      if ((this & 2) != 0)
      {
        v15 = (const llvm::BasicBlock *)*((_QWORD *)v13 + 5);
        if (v15 != (const llvm::BasicBlock *)((char *)v13 + 40))
          break;
      }
LABEL_11:
      v14 = v12 + 2;
      v12 = v10;
      if (v14 != v10)
      {
        v12 = v14;
        while (((unint64_t)*v12 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v12 += 2;
          if (v12 == v10)
          {
            v12 = v10;
            break;
          }
        }
      }
      if (v12 == v38)
        return this;
    }
    if (v15)
      v16 = (uint64_t)v15 - 24;
    else
      v16 = 0;
    v17 = *(unsigned __int8 *)(v16 + 16);
    v18 = v17 - 29;
    if (v17 != 30)
    {
      v19 = 2;
      switch(v18)
      {
        case 1:
          __break(1u);
          return this;
        case 2:
          v19 = (*(_DWORD *)(v16 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_47;
        case 3:
        case 9:
          v19 = (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_47;
        case 4:
          goto LABEL_26;
        case 7:
          v19 = *(_WORD *)(v16 + 18) & 1;
          goto LABEL_47;
        case 8:
          v19 = 1;
          goto LABEL_26;
        case 10:
          v19 = *(_DWORD *)(v16 + 80) + 1;
LABEL_47:
          if (!v19)
            goto LABEL_11;
          goto LABEL_26;
        default:
          goto LABEL_11;
      }
    }
    if ((*(_DWORD *)(v16 + 20) & 0x7FFFFFF) == 3)
      v19 = 2;
    else
      v19 = 1;
LABEL_26:
    v20 = 0;
    v21 = v16 + 32;
    v22 = v16 - 64;
    v23 = v19;
    while (1)
    {
      v24 = *(unsigned __int8 *)(v16 + 16);
      if (v24 != 30)
        __asm { BR              X9 }
      v25 = *(_QWORD *)(v16 - 32 - 32 * v20);
      v26 = *(_QWORD *)v5;
      v27 = v5[4];
      if (!(_DWORD)v27)
        goto LABEL_35;
      LODWORD(v28) = ((v25 >> 4) ^ (v25 >> 9)) & (v27 - 1);
      v29 = (uint64_t *)(v26 + 16 * v28);
      v30 = *v29;
      if (v25 != *v29)
        break;
LABEL_36:
      if (v29 == (uint64_t *)(v26 + 16 * v27))
        v33 = -1;
      else
        v33 = *((_DWORD *)v29 + 2);
      if (v33 != a2)
      {
        v34 = *(unsigned int *)(a3 + 8);
        if (v34 >= *(unsigned int *)(a3 + 12))
        {
          v35 = v22;
          v36 = v21;
          this = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v37, v34 + 1, 8);
          v22 = v35;
          v21 = v36;
          v34 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v34) = v25;
        ++*(_DWORD *)(a3 + 8);
      }
      if (++v20 == v23)
        goto LABEL_11;
    }
    v31 = 1;
    while (v30 != -4096)
    {
      v32 = v28 + v31++;
      v28 = v32 & (v27 - 1);
      v30 = *(_QWORD *)(v26 + 16 * v28);
      if (v25 == v30)
      {
        v29 = (uint64_t *)(v26 + 16 * v28);
        goto LABEL_36;
      }
    }
LABEL_35:
    v29 = (uint64_t *)(v26 + 16 * v27);
    goto LABEL_36;
  }
  return this;
}

uint64_t llvm::BranchProbabilityInfo::LoopBlock::LoopBlock(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = -1;
  v4 = *((_DWORD *)a3 + 4);
  v5 = a2 >> 4;
  if (v4)
  {
    v6 = *a3;
    v7 = v4 - 1;
    v8 = (v4 - 1) & (v5 ^ (a2 >> 9));
    v9 = *(_QWORD *)(*a3 + 16 * v8);
    if (v9 == a2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v6 + 16 * v8 + 8);
      *(_QWORD *)(result + 8) = v12;
      if (v12)
        return result;
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v8 + v10++;
        v8 = v11 & v7;
        v9 = *(_QWORD *)(v6 + 16 * v8);
        if (v9 == a2)
          goto LABEL_6;
      }
    }
  }
  v13 = *((unsigned int *)a4 + 4);
  if (!(_DWORD)v13)
    goto LABEL_15;
  v14 = *a4;
  LODWORD(v15) = (v13 - 1) & (v5 ^ (a2 >> 9));
  v16 = *a4 + 16 * v15;
  v17 = *(_QWORD *)v16;
  if (*(_QWORD *)v16 != a2)
  {
    v18 = 1;
    while (v17 != -4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v13 - 1);
      v17 = *(_QWORD *)(v14 + 16 * v15);
      if (v17 == a2)
      {
        v16 = v14 + 16 * v15;
        goto LABEL_13;
      }
    }
    goto LABEL_15;
  }
LABEL_13:
  if (v16 == v14 + 16 * v13)
  {
LABEL_15:
    v20 = -1;
    goto LABEL_16;
  }
  v20 = *(_DWORD *)(v16 + 8);
LABEL_16:
  *(_DWORD *)(result + 16) = v20;
  return result;
}

BOOL llvm::BranchProbabilityInfo::isLoopEnteringEdge(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *i;
  int v6;

  v2 = *a2;
  v3 = a2[1];
  v4 = *(_QWORD **)(v3 + 8);
  if (v4)
  {
    for (i = *(_QWORD **)(v2 + 8); i != v4; i = (_QWORD *)*i)
    {
      if (!i)
        return 1;
    }
  }
  v6 = *(_DWORD *)(v3 + 16);
  return v6 != -1 && *(_DWORD *)(v2 + 16) != v6;
}

BOOL llvm::BranchProbabilityInfo::isLoopExitingEdge(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *i;
  int v5;

  v2 = a2[1];
  v3 = *(_QWORD **)(*a2 + 8);
  if (v3)
  {
    for (i = *(_QWORD **)(v2 + 8); i != v3; i = (_QWORD *)*i)
    {
      if (!i)
        return 1;
    }
  }
  v5 = *(_DWORD *)(*a2 + 16);
  return v5 != -1 && *(_DWORD *)(v2 + 16) != v5;
}

BOOL llvm::BranchProbabilityInfo::isLoopEnteringExitingEdge(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  BOOL v7;
  int v8;
  _QWORD *i;

  v2 = *a2;
  v3 = a2[1];
  v4 = *(_QWORD **)(v3 + 8);
  if (v4)
  {
    for (i = *(_QWORD **)(v2 + 8); i != v4; i = (_QWORD *)*i)
    {
      if (!i)
        return 1;
    }
  }
  v5 = *(_DWORD *)(v3 + 16);
  if (v5 != -1 && *(_DWORD *)(v2 + 16) != v5)
    return 1;
  v6 = *(_QWORD **)(v2 + 8);
  if (v6)
    v7 = v4 == v6;
  else
    v7 = 1;
  if (!v7)
  {
    while (v4)
    {
      v4 = (_QWORD *)*v4;
      if (v4 == v6)
        goto LABEL_8;
    }
    return 1;
  }
LABEL_8:
  v8 = *(_DWORD *)(v2 + 16);
  return v8 != -1 && v5 != v8;
}

uint64_t llvm::BranchProbabilityInfo::isLoopBackEdge(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const llvm::BasicBlock *v6;

  v3 = *a2;
  v2 = a2[1];
  v4 = *(_QWORD *)(v2 + 8);
  if (v4 && *(_QWORD *)(v3 + 8) == v4)
    goto LABEL_6;
  v5 = *(_DWORD *)(v2 + 16);
  if (v5 == -1 || *(_DWORD *)(v3 + 16) != v5)
    return 0;
  if (v4)
  {
LABEL_6:
    v6 = *(const llvm::BasicBlock **)v2;
    if (**(_QWORD **)(v4 + 32) == *(_QWORD *)v2)
      return 1;
    v5 = *(_DWORD *)(v2 + 16);
    if (v5 == -1)
      return 0;
  }
  else
  {
    v6 = *(const llvm::BasicBlock **)v2;
  }
  return llvm::BranchProbabilityInfo::SccInfo::getSccBlockType(*(llvm::BranchProbabilityInfo::SccInfo **)(a1 + 64), v6, v5) & 1;
}

unsigned int *llvm::BranchProbabilityInfo::getLoopEnterBlocks(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
    return (unsigned int *)llvm::BranchProbabilityInfo::SccInfo::getSccEnterBlocks(*(_QWORD *)(a1 + 64), *(_DWORD *)(a2 + 16), (uint64_t)a3);
  for (i = *(_QWORD *)(**(_QWORD **)(v3 + 32) + 8); i; i = *(_QWORD *)(i + 8))
  {
    v5 = *(_QWORD *)(i + 24);
    v6 = *(unsigned __int8 *)(v5 + 16);
    if (v5)
      v7 = v6 >= 0x1C;
    else
      v7 = 0;
    if (v7 && v6 - 29 < 0xB)
      break;
  }
  return sub_1C4DBBCC0(a3, i, 0);
}

unsigned int *sub_1C4DBBCC0(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;

  v4 = a2;
  v5 = result;
  if (a2 == a3)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = a2;
    do
    {
      ++v6;
      do
      {
        v7 = *(_QWORD *)(v7 + 8);
        if (!v7)
          break;
        v8 = *(_QWORD *)(v7 + 24);
        v9 = *(unsigned __int8 *)(v8 + 16);
        v10 = v8 && v9 >= 0x1C;
      }
      while (!v10 || v9 - 29 > 0xA);
    }
    while (v7 != a3);
  }
  v12 = result[2];
  if (v6 + v12 > (unint64_t)result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + v12, 8);
    v12 = v5[2];
  }
  if (v4 != a3)
  {
    v13 = (_QWORD *)(*(_QWORD *)v5 + 8 * v12);
    do
    {
      *v13 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 40);
      do
      {
        v4 = *(_QWORD *)(v4 + 8);
        if (!v4)
          break;
        v14 = *(_QWORD *)(v4 + 24);
        v15 = *(unsigned __int8 *)(v14 + 16);
        v16 = v14 && v15 >= 0x1C;
      }
      while (!v16 || v15 - 29 > 0xA);
      ++v13;
    }
    while (v4 != a3);
  }
  v5[2] = v12 + v6;
  return result;
}

_QWORD *llvm::BranchProbabilityInfo::getLoopExitBlocks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = *(_QWORD **)(a2 + 8);
  if (v4)
    return llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(v4, a3);
  else
    return (_QWORD *)llvm::BranchProbabilityInfo::SccInfo::getSccExitBlocks(*(_QWORD *)(a1 + 64), *(_DWORD *)(a2 + 16), a3);
}

uint64_t llvm::BranchProbabilityInfo::calcMetadataWeights(uint64_t **this, const llvm::BasicBlock *a2)
{
  const llvm::BasicBlock *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  char **v12;
  char *v13;
  char **v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char **v37;
  char *v38;
  int v39;
  uint64_t *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t EstimatedEdgeWeight;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  BOOL v56;
  unsigned int v57;
  int *v58;
  _DWORD *v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81[2];
  _BYTE v82[24];
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  _QWORD v94[3];

  v94[1] = *MEMORY[0x1E0C80C00];
  v4 = (const llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (v4 == (const llvm::BasicBlock *)((char *)a2 + 40))
  {
    v6 = 0;
  }
  else
  {
    if (v4)
      v5 = (char *)v4 - 24;
    else
      v5 = 0;
    if (v5[16] - 29 >= 0xB)
      v6 = 0;
    else
      v6 = v5;
  }
  if (v6[16] - 30 > 3 || (v6[23] & 0x20) == 0)
    return 0;
  v7 = ***(_QWORD ***)v6;
  v92 = v6;
  v8 = *(_DWORD *)(v7 + 2496);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 2480);
    v10 = v8 - 1;
    v11 = v10 & ((v6 >> 4) ^ (v6 >> 9));
    v12 = (char **)(v9 + 40 * v11);
    v13 = *v12;
    if (*v12 == v6)
      goto LABEL_21;
    v14 = 0;
    v15 = 1;
    while (v13 != (char *)-4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == (char *)-8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = (char **)(v9 + 40 * v11);
      v13 = *v12;
      if (*v12 == v6)
        goto LABEL_21;
    }
    if (v14)
      v37 = v14;
    else
      v37 = v12;
  }
  else
  {
    v37 = 0;
  }
  v12 = (char **)sub_1C541AB24(v7 + 2480, (uint64_t)&v92, (uint64_t *)&v92, v37);
  v38 = v92;
  v12[3] = 0;
  v12[4] = 0;
  *v12 = v38;
  v12[1] = (char *)(v12 + 3);
  v12[2] = (char *)0x100000000;
LABEL_21:
  v18 = *((unsigned int *)v12 + 4);
  if (!(_DWORD)v18)
    return 0;
  v19 = v12[1] + 8;
  v20 = 16 * v18;
  while (*((_DWORD *)v19 - 2) != 2)
  {
    v21 = 0;
    v19 += 2;
    v20 -= 16;
    if (!v20)
      return v21;
  }
  v21 = *v19;
  if (*v19)
  {
    v22 = *(_DWORD *)(v21 + 8);
    v23 = v6[16];
    if (v23 != 30)
      __asm { BR              X13 }
    if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) == 3)
      v24 = 2;
    else
      v24 = 1;
    if (v22 == v24 + 1)
    {
      v92 = (char *)v94;
      v93 = 0x200000000;
      v89 = &v91;
      v90 = 0x200000000;
      v86 = &v88;
      v87 = 0x200000000;
      v80 = v22 - 1;
      if (v22 == 1)
      {
        v25 = v6[16];
      }
      else
      {
        v39 = 0;
        v28 = 0;
        v40 = (uint64_t *)(v6 - 32);
        v41 = 1;
        do
        {
          v42 = *(_QWORD *)(v21 - 8 * *(unsigned int *)(v21 + 8) + 8 * (v39 + 1));
          if (*(_BYTE *)v42 != 1 || (v43 = *(_QWORD *)(v42 + 128), *(_BYTE *)(v43 + 16) != 16))
          {
            v21 = 0;
            goto LABEL_124;
          }
          v44 = (_QWORD *)(v43 + 24);
          if (*(_DWORD *)(v43 + 32) >= 0x41u)
            v44 = (_QWORD *)*v44;
          v45 = *(_DWORD *)v44;
          v46 = v93;
          if (v93 >= (unint64_t)HIDWORD(v93))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, v93 + 1, 4);
            v46 = v93;
          }
          *(_DWORD *)&v92[4 * v46] = v45;
          LODWORD(v93) = v93 + 1;
          v47 = *(unsigned int *)&v92[4 * v93 - 4];
          llvm::BranchProbabilityInfo::LoopBlock::LoopBlock((uint64_t)&v83, (uint64_t)a2, this[7], this[8]);
          v48 = v6[16];
          if (v48 != 30)
            __asm { BR              X9 }
          llvm::BranchProbabilityInfo::LoopBlock::LoopBlock((uint64_t)v82, *v40, this[7], this[8]);
          v81[0] = (uint64_t)&v83;
          v81[1] = (uint64_t)v82;
          EstimatedEdgeWeight = llvm::BranchProbabilityInfo::getEstimatedEdgeWeight((uint64_t)this, v81);
          if (!HIDWORD(EstimatedEdgeWeight) || (_DWORD)EstimatedEdgeWeight)
          {
            v50 = v87;
            v51 = &v86;
            if (v87 >= (unint64_t)HIDWORD(v87))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)&v88, v87 + 1, 4);
              v50 = v87;
            }
          }
          else
          {
            v50 = v90;
            v51 = &v89;
            if (v90 >= (unint64_t)HIDWORD(v90))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, (uint64_t)&v91, v90 + 1, 4);
              v50 = v90;
            }
          }
          v28 += v47;
          *((_DWORD *)*v51 + v50) = v39;
          ++*((_DWORD *)v51 + 2);
          ++v39;
          v40 -= 4;
          v41 += 2;
        }
        while (v80 != v39);
        v25 = v6[16];
        if (HIDWORD(v28))
        {
          if (v25 != 30)
            __asm { BR              X11 }
          if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) == 3)
            LODWORD(v52) = 2;
          else
            LODWORD(v52) = 1;
          v53 = v28 / 0xFFFFFFFF + 1;
          v54 = v92;
          v52 = v52;
          v28 = 0;
          do
          {
            v55 = *(unsigned int *)v54 / v53;
            *(_DWORD *)v54 = v55;
            v54 += 4;
            v28 += v55;
            --v52;
          }
          while (v52);
        }
        if (v28)
          v56 = (_DWORD)v87 == 0;
        else
          v56 = 1;
        if (!v56)
          goto LABEL_42;
      }
      if (v25 != 30)
        __asm { BR              X12 }
      if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) == 3)
        v26 = 2;
      else
        v26 = 1;
      memset_pattern16(v92, &unk_1C85F22D0, 4 * v26);
      if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) == 3)
        v27 = 2;
      else
        v27 = 1;
      LODWORD(v28) = v27;
LABEL_42:
      v83 = &v85;
      v84 = 0x200000000;
      if (v25 != 30)
        __asm { BR              X11 }
      if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) == 3)
        v29 = 2;
      else
        v29 = 1;
      v30 = 0;
      v31 = 0;
      v32 = v28;
      v33 = v28 >> 1;
      v34 = v29;
      do
      {
        v35 = *(unsigned int *)&v92[4 * v31];
        if (v32 != 0x80000000)
          v35 = (v33 | (v35 << 31)) / v32;
        if (v30 >= HIDWORD(v84))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)&v85, v30 + 1, 4);
          v30 = v84;
        }
        *((_DWORD *)v83 + v30) = v35;
        v30 = v84 + 1;
        LODWORD(v84) = v84 + 1;
        ++v31;
      }
      while (v34 != v31);
      if ((_DWORD)v90 && (_DWORD)v87)
      {
        v57 = qword_1ED7F0278;
        v58 = (int *)v89;
        v59 = v83;
        v60 = 4 * v90;
        v61 = (unsigned int *)v89;
        do
        {
          v62 = *v61;
          if (v57 < v59[v62])
            v59[v62] = v57;
          ++v61;
          v60 -= 4;
        }
        while (v60);
        if ((_DWORD)v90)
        {
          v63 = 0;
          v64 = 4 * v90;
          do
          {
            v65 = *v58++;
            v66 = v59[v65];
            v67 = v66 + v63;
            v63 += v66;
            if (v67 > 0x80000000)
              v63 = 0x80000000;
            v64 -= 4;
          }
          while (v64);
        }
        else
        {
          v63 = 0;
        }
        if (v63 <= 0x80000000)
          v68 = 0x80000000 - v63;
        else
          v68 = 0;
        if ((_DWORD)v87)
        {
          LODWORD(v69) = 0;
          v70 = (int *)v86;
          v71 = 4 * v87;
          v72 = v71;
          v73 = (int *)v86;
          do
          {
            v74 = *v73++;
            v75 = v59[v74];
            v76 = v75 + v69;
            LODWORD(v69) = v75 + v69;
            if (v76 <= 0x80000000)
              v69 = v69;
            else
              v69 = 0x80000000;
            v72 -= 4;
          }
          while (v72);
          if ((_DWORD)v69 != v68)
          {
            if ((_DWORD)v69)
            {
              do
              {
                v77 = *v70++;
                v59[v77] = ((v69 >> 1) + v59[v77] * (unint64_t)v68) / v69;
                v71 -= 4;
              }
              while (v71);
            }
            else
            {
              v78 = v68 / v87;
              do
              {
                v79 = *v70++;
                v59[v79] = v78;
                v71 -= 4;
              }
              while (v71);
            }
          }
        }
      }
      llvm::BranchProbabilityInfo::setEdgeProbability((uint64_t)this, a2, (uint64_t *)&v83);
      if (v83 != &v85)
        free(v83);
      v21 = 1;
LABEL_124:
      if (v86 != &v88)
        free(v86);
      if (v89 != &v91)
        free(v89);
      if (v92 != (char *)v94)
        free(v92);
      return v21;
    }
    return 0;
  }
  return v21;
}

void sub_1C4DBC6BC()
{
  JUMPOUT(0x1C4DBBF30);
}

void sub_1C4DBC6CC()
{
  JUMPOUT(0x1C4DBBF30);
}

void sub_1C4DBC6D4()
{
  JUMPOUT(0x1C4DBBF30);
}

void sub_1C4DBC6E0()
{
  JUMPOUT(0x1C4DBBF30);
}

void sub_1C4DBC6E8()
{
  JUMPOUT(0x1C4DBBF30);
}

void sub_1C4DBC6F4()
{
  JUMPOUT(0x1C4DBC670);
}

void sub_1C4DBC704()
{
  JUMPOUT(0x1C4DBC670);
}

void sub_1C4DBC710()
{
  JUMPOUT(0x1C4DBC014);
}

void sub_1C4DBC718()
{
  JUMPOUT(0x1C4DBC670);
}

void sub_1C4DBC724()
{
  JUMPOUT(0x1C4DBC578);
}

void sub_1C4DBC734()
{
  JUMPOUT(0x1C4DBC578);
}

void sub_1C4DBC740()
{
  JUMPOUT(0x1C4DBBFB4);
}

void sub_1C4DBC748()
{
  JUMPOUT(0x1C4DBC578);
}

void sub_1C4DBC754()
{
  JUMPOUT(0x1C4DBC618);
}

void sub_1C4DBC764()
{
  JUMPOUT(0x1C4DBC618);
}

void sub_1C4DBC770()
{
  JUMPOUT(0x1C4DBBFE4);
}

void sub_1C4DBC780()
{
  JUMPOUT(0x1C4DBBFE4);
}

void sub_1C4DBC788()
{
  JUMPOUT(0x1C4DBBFE4);
}

void sub_1C4DBC794()
{
  JUMPOUT(0x1C4DBBFE4);
}

void sub_1C4DBC79C()
{
  JUMPOUT(0x1C4DBBFE4);
}

void sub_1C4DBC7A8()
{
  JUMPOUT(0x1C4DBC6A8);
}

void sub_1C4DBC7B8()
{
  JUMPOUT(0x1C4DBC6A8);
}

void sub_1C4DBC7C4()
{
  JUMPOUT(0x1C4DBC3B8);
}

void sub_1C4DBC7CC()
{
  JUMPOUT(0x1C4DBC6A8);
}

uint64_t llvm::BranchProbabilityInfo::getEstimatedEdgeWeight(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v3 = *a2;
  v2 = (uint64_t *)a2[1];
  v4 = (_QWORD *)v2[1];
  if (v4)
  {
    for (i = *(_QWORD **)(v3 + 8); i != v4; i = (_QWORD *)*i)
    {
      if (!i)
        goto LABEL_10;
    }
  }
  v6 = *((_DWORD *)v2 + 4);
  if (v6 != -1 && *(_DWORD *)(v3 + 16) != v6)
  {
LABEL_10:
    v12 = v2[2];
    v22[0] = v4;
    v22[1] = v12;
    return llvm::BranchProbabilityInfo::getEstimatedLoopWeight(a1, (uint64_t)v22);
  }
  v7 = *v2;
  v8 = *(_DWORD *)(a1 + 72);
  v9 = a1 + 80;
  if ((v8 & 1) != 0)
  {
    v10 = 4;
    v11 = a1 + 80;
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 80);
    v10 = *(_DWORD *)(a1 + 88);
    if (!v10)
    {
      v20 = 0;
LABEL_20:
      v16 = v11 + 16 * v20;
      goto LABEL_21;
    }
  }
  v14 = v10 - 1;
  LODWORD(v15) = (v10 - 1) & ((v7 >> 4) ^ (v7 >> 9));
  v16 = v11 + 16 * v15;
  v17 = *(_QWORD *)v16;
  if (*(_QWORD *)v16 != v7)
  {
    v18 = 1;
    while (v17 != -4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & v14;
      v17 = *(_QWORD *)(v11 + 16 * v15);
      if (v17 == v7)
      {
        v16 = v11 + 16 * v15;
        goto LABEL_21;
      }
    }
    if ((v8 & 1) != 0)
    {
      v20 = 4;
      v11 = a1 + 80;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 80);
      v20 = *(unsigned int *)(a1 + 88);
    }
    goto LABEL_20;
  }
LABEL_21:
  if ((v8 & 1) != 0)
  {
    v21 = 4;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 80);
    v21 = *(unsigned int *)(a1 + 88);
  }
  if (v9 + 16 * v21 == v16)
    return 0;
  else
    return *(unsigned int *)(v16 + 8) | 0x100000000;
}

uint64_t llvm::BranchProbabilityInfo::setEdgeProbability(uint64_t a1, const llvm::BasicBlock *a2, uint64_t *a3)
{
  uint64_t result;
  unint64_t v7;
  int32x2_t ****v8;
  int32x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int32x2_t *****v14;
  int32x2_t ****v15;
  int v16;
  int v17;
  unint64_t i;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  BOOL v32;
  unsigned int v34;
  uint64_t v36;
  uint64_t (**v37)(llvm::CallbackVH *__hidden);
  uint64_t v38;
  unint64_t *v39;
  int32x2_t ****v40;
  uint64_t v41;
  char v42[31];

  result = llvm::BranchProbabilityInfo::eraseBlock(a1, a2);
  if (*((_DWORD *)a3 + 2))
  {
    v38 = 2;
    v39 = 0;
    v40 = (int32x2_t ****)a2;
    if (a2 != (const llvm::BasicBlock *)-8192 && a2 != (const llvm::BasicBlock *)-4096 && a2)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v38);
    v37 = &off_1E8134DC0;
    v41 = a1;
    result = sub_1C4DC41B8(a1, &v37, (uint64_t)v42);
    if (v40 != (int32x2_t ****)-8192 && v40 != (int32x2_t ****)-4096 && v40)
    {
      v7 = v38 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v38 & 0xFFFFFFFFFFFFFFF8) = v39;
      if (v39)
      {
        *v39 = *v39 & 7 | v7;
      }
      else
      {
        v8 = v40;
        v9 = ***v40;
        v10 = (unint64_t)v9[303];
        if (v10 <= v7)
        {
          v11 = v9[305].u32[0];
          if (v10 + 16 * v11 > v7)
          {
            v12 = v11 - 1;
            LODWORD(v13) = v12 & ((v40 >> 4) ^ (v40 >> 9));
            v14 = (int32x2_t *****)(v10 + 16 * v13);
            v15 = *v14;
            if (v40 == *v14)
            {
LABEL_17:
              *v14 = (int32x2_t ****)-8192;
              v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
              v8 = v40;
            }
            else
            {
              v16 = 1;
              while (v15 != (int32x2_t ****)-4096)
              {
                v17 = v13 + v16++;
                v13 = v17 & v12;
                v15 = *(int32x2_t *****)(v10 + 16 * v13);
                if (v40 == v15)
                {
                  v14 = (int32x2_t *****)(v10 + 16 * v13);
                  goto LABEL_17;
                }
              }
            }
            *((_BYTE *)v8 + 17) &= ~1u;
          }
        }
      }
    }
    if (*((_DWORD *)a3 + 2))
    {
      for (i = 0; i < *((unsigned int *)a3 + 2); ++i)
      {
        v19 = *a3;
        v37 = (uint64_t (**)(llvm::CallbackVH *__hidden))a2;
        v38 = i;
        v20 = *(_DWORD *)(a1 + 40);
        if (v20)
        {
          v21 = *(_QWORD *)(a1 + 24);
          v22 = (((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32) | (37 * i))
              + ~((unint64_t)(37 * i) << 32);
          v23 = (v22 ^ (v22 >> 22)) + ~((v22 ^ (v22 >> 22)) << 13);
          v24 = (9 * (v23 ^ (v23 >> 8))) ^ ((9 * (v23 ^ (v23 >> 8))) >> 15);
          v25 = v20 - 1;
          v26 = v25 & (((v24 + ~(v24 << 27)) >> 31) ^ (v24 + ~((_DWORD)v24 << 27)));
          result = v21 + 24 * v26;
          v27 = *(_QWORD *)result;
          v28 = *(unsigned int *)(result + 8);
          if (*(const llvm::BasicBlock **)result == a2 && i == v28)
            goto LABEL_48;
          v30 = 0;
          v31 = 1;
          while (v27 != -4096 || (_DWORD)v28 != -1)
          {
            if (v30)
              v32 = 0;
            else
              v32 = (_DWORD)v28 == -2;
            if (v32 && v27 == -8192)
              v30 = result;
            v34 = v26 + v31++;
            v26 = v34 & v25;
            result = v21 + 24 * v26;
            v27 = *(_QWORD *)result;
            v28 = *(unsigned int *)(result + 8);
            if (*(const llvm::BasicBlock **)result == a2 && i == v28)
              goto LABEL_48;
          }
          if (v30)
            v36 = v30;
          else
            v36 = result;
        }
        else
        {
          v36 = 0;
        }
        result = sub_1C4DC49C4(a1 + 24, (uint64_t)&v37, v36);
        *(_QWORD *)result = v37;
        *(_DWORD *)(result + 8) = v38;
        *(_DWORD *)(result + 16) = -1;
LABEL_48:
        *(_DWORD *)(result + 16) = *(_DWORD *)(v19 + 4 * i);
      }
    }
  }
  return result;
}

uint64_t llvm::BranchProbabilityInfo::calcPointerHeuristics(llvm::BranchProbabilityInfo *this, const llvm::BasicBlock *a2)
{
  const llvm::BasicBlock *v2;
  uint64_t v3;
  char *v4;
  unsigned int v5;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;

  v2 = (const llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (v2 == (const llvm::BasicBlock *)((char *)a2 + 40))
    return 0;
  v3 = 0;
  v4 = (char *)v2 - 24;
  if (!v2)
    v4 = 0;
  v5 = v4[16] - 40;
  if (v5 < 0xFFFFFFF5)
    v4 = 0;
  if (v2)
  {
    if (v4[16] == 30 && v5 >= 0xFFFFFFF5)
    {
      if ((*((_DWORD *)v4 + 5) & 0x7FFFFFF) == 3)
      {
        v3 = 0;
        v7 = *((_QWORD *)v4 - 12);
        if (!v7 || *(_BYTE *)(v7 + 16) != 81)
          return v3;
        v8 = *(_WORD *)(v7 + 18);
        if ((v8 & 0x3E) == 0x20 && *(_BYTE *)(**(_QWORD **)(v7 - 64) + 8) == 15)
        {
          v9 = qword_1ED7F02A8;
          if (qword_1ED7F02A8)
          {
            v10 = v8 & 0x3F;
            v11 = &qword_1ED7F02A8;
            do
            {
              v12 = *(_DWORD *)(v9 + 32);
              v13 = v12 >= v10;
              if (v12 >= v10)
                v14 = (uint64_t *)v9;
              else
                v14 = (uint64_t *)(v9 + 8);
              if (v13)
                v11 = (uint64_t *)v9;
              v9 = *v14;
            }
            while (*v14);
            if (v11 != &qword_1ED7F02A8 && *((_DWORD *)v11 + 8) <= v10)
            {
              llvm::BranchProbabilityInfo::setEdgeProbability((uint64_t)this, a2, v11 + 5);
              return 1;
            }
          }
        }
      }
      return 0;
    }
  }
  return v3;
}

uint64_t llvm::BranchProbabilityInfo::getEstimatedBlockWeight(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v14;

  v2 = *(_DWORD *)(a1 + 72);
  v3 = a1 + 80;
  if ((v2 & 1) != 0)
  {
    v4 = 4;
    v5 = a1 + 80;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 80);
    v4 = *(_DWORD *)(a1 + 88);
    if (!v4)
    {
      v11 = 0;
      goto LABEL_8;
    }
  }
  v6 = v4 - 1;
  LODWORD(v7) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = (uint64_t *)(v5 + 16 * v7);
  v9 = *v8;
  if (*v8 == a2)
    goto LABEL_9;
  v10 = 1;
  while (v9 != -4096)
  {
    v14 = v7 + v10++;
    v7 = v14 & v6;
    v9 = *(_QWORD *)(v5 + 16 * v7);
    if (v9 == a2)
    {
      v8 = (uint64_t *)(v5 + 16 * v7);
      goto LABEL_9;
    }
  }
  if ((v2 & 1) != 0)
  {
    v11 = 4;
    v5 = a1 + 80;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 80);
    v11 = *(unsigned int *)(a1 + 88);
  }
LABEL_8:
  v8 = (uint64_t *)(v5 + 16 * v11);
LABEL_9:
  if ((v2 & 1) != 0)
  {
    v12 = 4;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 80);
    v12 = *(unsigned int *)(a1 + 88);
  }
  if ((uint64_t *)(v3 + 16 * v12) == v8)
    return 0;
  else
    return *((unsigned int *)v8 + 2) | 0x100000000;
}

uint64_t llvm::BranchProbabilityInfo::getEstimatedLoopWeight(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;

  v3 = (int *)(a1 + 144);
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 8);
  v13 = 0;
  if (sub_1C4DC1ABC(a1 + 144, v4, v5, &v13))
  {
    v9 = v13;
    v6 = *v3;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 144);
    if ((v6 & 1) != 0)
    {
      v7 = a1 + 152;
      v8 = 4;
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 152);
      v8 = *(_DWORD *)(a1 + 160);
    }
    v9 = v7 + 24 * v8;
  }
  if ((v6 & 1) != 0)
  {
    v10 = a1 + 152;
    v11 = 4;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 152);
    v11 = *(_DWORD *)(a1 + 160);
  }
  if (v10 + 24 * v11 == v9)
    return 0;
  else
    return *(unsigned int *)(v9 + 16) | 0x100000000;
}

uint64_t llvm::BranchProbabilityInfo::updateEstimatedBlockWeight(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v34;
  _QWORD *v35;
  BOOL v36;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  _DWORD *v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v50;
  BOOL v51;
  int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  unsigned int v69;
  char v70[8];
  _QWORD *v71;
  int v72;
  uint64_t v73;

  v10 = *a2;
  v12 = (unsigned int *)(a1 + 72);
  v11 = *(_DWORD *)(a1 + 72);
  v13 = v11 & 1;
  v14 = a1 + 80;
  v15 = *a2 >> 4;
  if ((v11 & 1) != 0)
  {
    v16 = 4;
    v17 = a1 + 80;
  }
  else
  {
    v16 = *(_DWORD *)(a1 + 88);
    if (!v16)
    {
      v27 = 0;
      v28 = 0;
      goto LABEL_21;
    }
    v17 = *(_QWORD *)(a1 + 80);
  }
  v18 = v16 - 1;
  v19 = v18 & (v15 ^ (v10 >> 9));
  v20 = (_QWORD *)(v17 + 16 * v19);
  v21 = *v20;
  if (v10 == *v20)
    return 0;
  v22 = 0;
  v23 = 1;
  while (v21 != -4096)
  {
    if (v22)
      v24 = 0;
    else
      v24 = v21 == -8192;
    if (v24)
      v22 = v20;
    v25 = v19 + v23++;
    v19 = v25 & v18;
    v20 = (_QWORD *)(v17 + 16 * v19);
    v21 = *v20;
    if (v10 == *v20)
      return 0;
  }
  if (v22)
    v27 = v22;
  else
    v27 = v20;
  if ((v11 & 1) != 0)
    v28 = 4;
  else
    v28 = *(_DWORD *)(a1 + 88);
LABEL_21:
  if (4 * (v11 >> 1) + 4 >= 3 * v28)
  {
    sub_1C4DC1BD4(a1 + 72, 2 * v28);
    v11 = *v12;
    if ((*v12 & 1) != 0)
    {
      v53 = 4;
      v54 = v14;
    }
    else
    {
      v53 = *(_DWORD *)(a1 + 88);
      if (!v53)
        goto LABEL_105;
      v54 = *(_QWORD *)(a1 + 80);
    }
    v13 = *v12 & 1;
    v55 = v53 - 1;
    v56 = (v53 - 1) & (v15 ^ (v10 >> 9));
    v27 = (_QWORD *)(v54 + 16 * v56);
    v57 = *v27;
    if (*v27 == v10)
      goto LABEL_23;
    v58 = 0;
    v59 = 1;
    while (v57 != -4096)
    {
      if (v58)
        v60 = 0;
      else
        v60 = v57 == -8192;
      if (v60)
        v58 = v27;
      v61 = v56 + v59++;
      v56 = v61 & v55;
      v27 = (_QWORD *)(v54 + 16 * (v61 & v55));
      v57 = *v27;
      if (*v27 == v10)
        goto LABEL_23;
    }
LABEL_102:
    if (v58)
      v27 = v58;
    goto LABEL_23;
  }
  if (v28 + ~(v11 >> 1) - *(_DWORD *)(a1 + 76) <= v28 >> 3)
  {
    sub_1C4DC1BD4(a1 + 72, v28);
    v11 = *v12;
    if ((*v12 & 1) != 0)
    {
      v62 = 4;
      v63 = v14;
LABEL_92:
      v13 = *v12 & 1;
      v64 = v62 - 1;
      v65 = (v62 - 1) & (v15 ^ (v10 >> 9));
      v27 = (_QWORD *)(v63 + 16 * v65);
      v66 = *v27;
      if (*v27 == v10)
        goto LABEL_23;
      v58 = 0;
      v67 = 1;
      while (v66 != -4096)
      {
        if (v58)
          v68 = 0;
        else
          v68 = v66 == -8192;
        if (v68)
          v58 = v27;
        v69 = v65 + v67++;
        v65 = v69 & v64;
        v27 = (_QWORD *)(v63 + 16 * (v69 & v64));
        v66 = *v27;
        if (*v27 == v10)
          goto LABEL_23;
      }
      goto LABEL_102;
    }
    v62 = *(_DWORD *)(a1 + 88);
    if (v62)
    {
      v63 = *(_QWORD *)(a1 + 80);
      goto LABEL_92;
    }
LABEL_105:
    v13 = 0;
    v27 = 0;
  }
LABEL_23:
  *v12 = (v11 & 0xFFFFFFFE | v13) + 2;
  if (*v27 != -4096)
    --*(_DWORD *)(a1 + 76);
  *v27 = v10;
  *((_DWORD *)v27 + 2) = a3;
  v29 = *(_QWORD *)(v10 + 8);
  if (v29)
  {
    while (1)
    {
      v30 = *(_QWORD *)(v29 + 24);
      v31 = *(unsigned __int8 *)(v30 + 16);
      v32 = v30 && v31 >= 0x1C;
      if (v32 && v31 - 29 < 0xB)
        break;
      v29 = *(_QWORD *)(v29 + 8);
      if (!v29)
        return 1;
    }
LABEL_36:
    v34 = *(_QWORD *)(v30 + 40);
    llvm::BranchProbabilityInfo::LoopBlock::LoopBlock((uint64_t)v70, v34, *(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64));
    v35 = (_QWORD *)a2[1];
    if (v71)
      v36 = v35 == v71;
    else
      v36 = 1;
    if (!v36)
    {
      while (v35)
      {
        v35 = (_QWORD *)*v35;
        if (v35 == v71)
          goto LABEL_41;
      }
      goto LABEL_51;
    }
LABEL_41:
    if (v72 != -1 && *((_DWORD *)a2 + 4) != v72)
    {
LABEL_51:
      if ((sub_1C4DC1ABC(a1 + 144, (uint64_t)v71, v72, &v73) & 1) != 0)
        goto LABEL_64;
      v40 = sub_1C4DC1E54(a5, (unint64_t)v70);
      v41 = *(_QWORD *)a5 + 24 * *(unsigned int *)(a5 + 8);
      v42 = *(_OWORD *)v40;
      *(_QWORD *)(v41 + 16) = *(_QWORD *)(v40 + 16);
      *(_OWORD *)v41 = v42;
      v43 = (_DWORD *)(a5 + 8);
      goto LABEL_63;
    }
    if ((*(_BYTE *)v12 & 1) != 0)
    {
      v38 = 4;
      v39 = v14;
    }
    else
    {
      v38 = *(_DWORD *)(a1 + 88);
      if (!v38)
      {
LABEL_60:
        v49 = *(unsigned int *)(a4 + 8);
        if (v49 >= *(unsigned int *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v49 + 1, 8);
          v49 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v49) = v34;
        v43 = (_DWORD *)(a4 + 8);
LABEL_63:
        ++*v43;
        goto LABEL_64;
      }
      v39 = *(_QWORD *)(a1 + 80);
    }
    v44 = v38 - 1;
    v45 = v44 & ((v34 >> 4) ^ (v34 >> 9));
    v46 = *(_QWORD *)(v39 + 16 * v45);
    if (v34 == v46)
      goto LABEL_64;
    v47 = 1;
    do
    {
      if (v46 == -4096)
        goto LABEL_60;
      v48 = v45 + v47++;
      v45 = v48 & v44;
      v46 = *(_QWORD *)(v39 + 16 * v45);
    }
    while (v34 != v46);
LABEL_64:
    while (1)
    {
      v29 = *(_QWORD *)(v29 + 8);
      if (!v29)
        break;
      v30 = *(_QWORD *)(v29 + 24);
      v50 = *(unsigned __int8 *)(v30 + 16);
      if (v30)
        v51 = v50 >= 0x1C;
      else
        v51 = 0;
      if (v51 && v50 - 29 < 0xB)
        goto LABEL_36;
    }
  }
  return 1;
}

void llvm::BranchProbabilityInfo::propagateEstimatedBlockWeight(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *i;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50[2];
  uint64_t v51;
  _QWORD *v52;
  int v53;

  v13 = *(_QWORD *)a2;
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(unsigned int *)(a3 + 40);
  v16 = *(_QWORD *)a2 >> 4;
  if ((_DWORD)v15)
  {
    LODWORD(v17) = (v16 ^ (v13 >> 9)) & (v15 - 1);
    v18 = (uint64_t *)(v14 + 16 * v17);
    v19 = *v18;
    if (v13 == *v18)
      goto LABEL_8;
    v20 = 1;
    while (v19 != -4096)
    {
      v21 = v17 + v20++;
      v17 = v21 & (v15 - 1);
      v19 = *(_QWORD *)(v14 + 16 * v17);
      if (v13 == v19)
      {
        v18 = (uint64_t *)(v14 + 16 * v17);
        goto LABEL_8;
      }
    }
  }
  v18 = (uint64_t *)(v14 + 16 * v15);
LABEL_8:
  if (v18 == (uint64_t *)(v14 + 16 * v15))
    v22 = 0;
  else
    v22 = (uint64_t *)v18[1];
  v23 = *(_QWORD *)(a4 + 48);
  v24 = *(unsigned int *)(a4 + 64);
  if ((_DWORD)v24)
  {
    LODWORD(v25) = (v24 - 1) & (v16 ^ (v13 >> 9));
    v26 = (uint64_t *)(v23 + 16 * v25);
    v27 = *v26;
    if (v13 == *v26)
      goto LABEL_18;
    v28 = 1;
    while (v27 != -4096)
    {
      v29 = v25 + v28++;
      v25 = v29 & (v24 - 1);
      v27 = *(_QWORD *)(v23 + 16 * v25);
      if (v13 == v27)
      {
        v26 = (uint64_t *)(v23 + 16 * v25);
        goto LABEL_18;
      }
    }
  }
  v26 = (uint64_t *)(v23 + 16 * v24);
LABEL_18:
  if (v26 == (uint64_t *)(v23 + 16 * v24))
  {
    v30 = 0;
    if (!v22)
      return;
    while (1)
    {
LABEL_22:
      v31 = *v22;
      v32 = *(_QWORD *)(a4 + 48);
      v33 = *(unsigned int *)(a4 + 64);
      if ((_DWORD)v33)
      {
        LODWORD(v34) = ((v31 >> 4) ^ (v31 >> 9)) & (v33 - 1);
        v35 = (uint64_t *)(v32 + 16 * v34);
        v36 = *v35;
        if (v31 == *v35)
          goto LABEL_29;
        v37 = 1;
        while (v36 != -4096)
        {
          v38 = v34 + v37++;
          v34 = v38 & (v33 - 1);
          v36 = *(_QWORD *)(v32 + 16 * v34);
          if (v31 == v36)
          {
            v35 = (uint64_t *)(v32 + 16 * v34);
            goto LABEL_29;
          }
        }
      }
      v35 = (uint64_t *)(v32 + 16 * v33);
LABEL_29:
      if (v35 != (uint64_t *)(v32 + 16 * v33))
      {
        v39 = v35[1];
        if (v39 != v30 && v39 != 0)
        {
          if (!v30)
            return;
          if (*(_QWORD *)(v39 + 8) != v30)
          {
            if (*(_QWORD *)(v30 + 8) == v39)
              return;
            v41 = *(_DWORD *)(v30 + 16);
            if (v41 >= *(_DWORD *)(v39 + 16))
              return;
            if (!*(_BYTE *)(a4 + 88))
            {
              v42 = *(_DWORD *)(a4 + 92) + 1;
              *(_DWORD *)(a4 + 92) = v42;
              if (v42 <= 0x20)
              {
                do
                {
                  v43 = v39;
                  v39 = *(_QWORD *)(v39 + 8);
                }
                while (v39 && *(_DWORD *)(v39 + 16) >= v41);
                if (v43 != v30)
                  return;
                goto LABEL_47;
              }
              llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers(a4);
            }
            if (*(_DWORD *)(v39 + 72) < *(_DWORD *)(v30 + 72) || *(_DWORD *)(v39 + 76) > *(_DWORD *)(v30 + 76))
              return;
          }
        }
      }
LABEL_47:
      v44 = llvm::BranchProbabilityInfo::LoopBlock::LoopBlock((uint64_t)&v51, v31, *(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64));
      v50[0] = (uint64_t)&v51;
      v50[1] = a2;
      if (llvm::BranchProbabilityInfo::isLoopEnteringExitingEdge(v44, v50))
      {
        if (v52)
        {
          for (i = *(_QWORD **)(a2 + 8); i != v52; i = (_QWORD *)*i)
          {
            if (!i)
              goto LABEL_59;
          }
        }
        if (v53 != -1 && *(_DWORD *)(a2 + 16) != v53)
        {
LABEL_59:
          v47 = sub_1C4DC1E54(a7, (unint64_t)&v51);
          v48 = *(_QWORD *)a7 + 24 * *(unsigned int *)(a7 + 8);
          v49 = *(_OWORD *)v47;
          *(_QWORD *)(v48 + 16) = *(_QWORD *)(v47 + 16);
          *(_OWORD *)v48 = v49;
          ++*(_DWORD *)(a7 + 8);
        }
      }
      else if ((llvm::BranchProbabilityInfo::updateEstimatedBlockWeight(a1, &v51, a5, a6, a7) & 1) == 0)
      {
        return;
      }
      v22 = (uint64_t *)v22[1];
      if (!v22)
        return;
    }
  }
  v30 = v26[1];
  if (v22)
    goto LABEL_22;
}

uint64_t llvm::BranchProbabilityInfo::getInitialEstimatedBlockWeight(llvm::BranchProbabilityInfo *this, const llvm::BasicBlock *a2)
{
  char *v2;
  char *v3;
  char *v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  v2 = (char *)a2 + 40;
  v3 = (char *)*((_QWORD *)a2 + 5);
  v4 = v3 - 24;
  if (!v3)
    v4 = 0;
  v5 = v4[16];
  if ((v5 - 29) >= 0xB)
    v6 = 0;
  else
    v6 = v4;
  if (v6[16] == 35)
    goto LABEL_7;
  if (v5 != 29)
    v4 = 0;
  if (v3 && v5 == 29)
  {
    v29 = *((_QWORD *)a2 + 6);
    v30 = v29 ? v29 - 24 : 0;
    if (v4 != (char *)v30)
    {
      v31 = (uint64_t *)(v4 + 24);
      if (*(char **)(*((_QWORD *)v4 + 5) + 48) != v4 + 24)
      {
        v32 = *v31;
        if (*v31)
        {
          if (*(_BYTE *)(v32 - 8) == 84)
          {
            v33 = *(_QWORD *)(v32 - 56);
            if (v33)
            {
              if (!*(_BYTE *)(v33 + 16)
                && *(_QWORD *)(v33 + 24) == *(_QWORD *)(v32 + 48)
                && *(_DWORD *)(v33 + 36) == 119)
              {
LABEL_7:
                v7 = 1;
                while (1)
                {
                  v8 = v3 ? (uint64_t)(v3 - 24) : 0;
                  if (v3 && *(_BYTE *)(v8 + 16) == 84)
                  {
                    v9 = *(_QWORD *)(v8 + 64);
                    if (v9)
                    {
                      if ((*(_BYTE *)(v9 + 16) & 1) != 0)
                        break;
                    }
                    if ((llvm::CallBase::hasFnAttrOnCalledFunction(v8, 32) & 1) != 0)
                      break;
                  }
                  v3 = *(char **)v3;
                  if (v3 == v2)
                  {
                    v7 = 0;
                    break;
                  }
                }
LABEL_18:
                v10 = 0;
                goto LABEL_19;
              }
            }
          }
        }
      }
    }
  }
  v12 = *((_QWORD *)a2 + 1);
  if (v12)
  {
    while (1)
    {
      v13 = *(_QWORD *)(v12 + 24);
      v14 = *(unsigned __int8 *)(v13 + 16);
      v15 = v13 && v14 >= 0x1C;
      if (v15 && v14 - 29 <= 0xA)
        break;
      v12 = *(_QWORD *)(v12 + 8);
      if (!v12)
        goto LABEL_34;
    }
    v7 = 1;
LABEL_47:
    v21 = *(_QWORD *)(v13 + 40);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 40);
      if (v22 != v21 + 40)
      {
        v23 = v22 - 24;
        if (!v22)
          v23 = 0;
        v24 = *(unsigned __int8 *)(v23 + 16) - 40;
        if (v24 < 0xFFFFFFF5)
          v23 = 0;
        if (v22)
        {
          v25 = *(_BYTE *)(v23 + 16) == 33 && v24 >= 0xFFFFFFF5;
          if (v25 && *(const llvm::BasicBlock **)(v23 - 64) == a2)
            goto LABEL_18;
        }
      }
    }
    while (1)
    {
      v12 = *(_QWORD *)(v12 + 8);
      if (!v12)
        break;
      v13 = *(_QWORD *)(v12 + 24);
      v26 = *(unsigned __int8 *)(v13 + 16);
      if (v13)
        v27 = v26 >= 0x1C;
      else
        v27 = 0;
      if (v27 && v26 - 29 < 0xB)
        goto LABEL_47;
    }
  }
LABEL_34:
  v17 = *((_QWORD *)a2 + 6);
  if ((char *)v17 == v2)
  {
LABEL_45:
    v11 = 0;
    v7 = 0;
    v10 = 0;
    return v7 | v11 | v10;
  }
  v10 = 65280;
  v7 = 255;
  while (1)
  {
    v18 = v17 ? v17 - 24 : 0;
    if (v17 && *(_BYTE *)(v18 + 16) == 84)
    {
      v19 = *(_QWORD *)(v18 + 64);
      if (v19)
      {
        if ((*(_BYTE *)(v19 + 12) & 0x20) != 0)
          break;
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v18, 5) & 1) != 0)
        break;
    }
    v17 = *(_QWORD *)(v17 + 8);
    if ((char *)v17 == v2)
      goto LABEL_45;
  }
LABEL_19:
  v11 = 0x100000000;
  return v7 | v11 | v10;
}

void llvm::BranchProbabilityInfo::computeEestimateBlockWeight(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t InitialEstimatedBlockWeight;
  char *v6;
  char *v7;
  uint64_t v8;
  const llvm::BasicBlock *v9;
  int v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int v35;
  unint64_t EstimatedEdgeWeight;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v43;
  uint64_t v44[3];
  __int128 v45;
  int v46;
  void *__p;
  char *v48;
  uint64_t v49;
  _BYTE v50[24];
  void *v51;
  uint64_t v52;
  _BYTE v53[32];
  void *v54;
  uint64_t v55;
  _BYTE v56[192];
  _QWORD *v57;
  uint64_t v58;
  _QWORD v59[10];

  v59[8] = *MEMORY[0x1E0C80C00];
  v57 = v59;
  v58 = 0x800000000;
  v54 = v56;
  v55 = 0x800000000;
  v51 = a2;
  v48 = 0;
  v49 = 0;
  __p = 0;
  sub_1C4DC1ECC((char **)&__p, (uint64_t)&v51);
  v7 = (char *)__p;
  v6 = v48;
  while (v6 != v7)
  {
    v9 = (const llvm::BasicBlock *)*((_QWORD *)v6 - 1);
    v6 -= 8;
    v8 = (uint64_t)v9;
    InitialEstimatedBlockWeight = llvm::BranchProbabilityInfo::getInitialEstimatedBlockWeight((llvm::BranchProbabilityInfo *)InitialEstimatedBlockWeight, v9);
    if (HIDWORD(InitialEstimatedBlockWeight))
    {
      v10 = InitialEstimatedBlockWeight;
      llvm::BranchProbabilityInfo::LoopBlock::LoopBlock((uint64_t)&v51, v8, *(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64));
      llvm::BranchProbabilityInfo::propagateEstimatedBlockWeight(a1, (uint64_t)&v51, a3, a4, v10, (uint64_t)&v57, (uint64_t)&v54);
    }
  }
  v43 = a1 + 144;
  v11 = v55;
  do
  {
    while (v11)
    {
      v12 = (char *)v54 + 24 * v11;
      v13 = *((_QWORD *)v12 - 1);
      *(_OWORD *)v50 = *(_OWORD *)(v12 - 24);
      *(_QWORD *)&v50[16] = v13;
      LODWORD(v55) = v11 - 1;
      if ((sub_1C4DC1ABC(v43, *(uint64_t *)&v50[8], v13, &v51) & 1) == 0)
      {
        v51 = v53;
        v52 = 0x400000000;
        if (*(_QWORD *)&v50[8])
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(*(_QWORD **)&v50[8], (uint64_t)&v51);
        else
          llvm::BranchProbabilityInfo::SccInfo::getSccExitBlocks(*(_QWORD *)(a1 + 64), *(int *)&v50[16], (uint64_t)&v51);
        v39 = sub_1C617DFD4(a1, (uint64_t)v50, (uint64_t *)v51, (uint64_t *)v51 + v52);
        if (HIDWORD(v39))
        {
          if (v39 <= 1)
            v40 = 1;
          else
            v40 = v39;
          v45 = *(_OWORD *)&v50[8];
          v46 = v40;
          sub_1C617E7A8((uint64_t)v44, v43, (uint64_t)&v45, &v46);
          llvm::BranchProbabilityInfo::getLoopEnterBlocks(a1, (uint64_t)v50, (unsigned int *)&v57);
        }
        if (v51 != v53)
          free(v51);
      }
      v11 = v55;
    }
    v14 = v58;
    if (!(_DWORD)v58)
      break;
    do
    {
      v15 = v57[--v14];
      LODWORD(v58) = v14;
      if ((*(_BYTE *)(a1 + 72) & 1) != 0)
      {
        v16 = 4;
        v17 = a1 + 80;
      }
      else
      {
        v16 = *(_DWORD *)(a1 + 88);
        if (!v16)
          goto LABEL_21;
        v17 = *(_QWORD *)(a1 + 80);
      }
      v18 = v16 - 1;
      v19 = v18 & ((v15 >> 4) ^ (v15 >> 9));
      v20 = *(_QWORD *)(v17 + 16 * v19);
      if (v15 == v20)
        continue;
      v21 = 1;
      while (v20 != -4096)
      {
        v22 = v19 + v21++;
        v19 = v22 & v18;
        v20 = *(_QWORD *)(v17 + 16 * v19);
        if (v15 == v20)
          goto LABEL_46;
      }
LABEL_21:
      llvm::BranchProbabilityInfo::LoopBlock::LoopBlock((uint64_t)&v45, v15, *(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64));
      v23 = *(_QWORD *)(v15 + 40);
      if (v23 == v15 + 40)
      {
LABEL_49:
        v30 = 0;
        v31 = 0;
        v38 = 0;
        v51 = v53;
        v52 = 0x400000000;
      }
      else
      {
        if (v23)
          v24 = v23 - 24;
        else
          v24 = 0;
        v25 = *(unsigned __int8 *)(v24 + 16);
        v26 = v25 - 29;
        if (v25 == 30)
        {
          if ((*(_DWORD *)(v24 + 20) & 0x7FFFFFF) == 3)
            v27 = 2;
          else
            v27 = 1;
LABEL_29:
          v51 = v53;
          v52 = 0x400000000;
LABEL_30:
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v32 = v23 - 88;
          v33 = 1;
          v34 = v27;
          while (1)
          {
            v35 = *(unsigned __int8 *)(v23 - 8);
            if (v35 != 30)
              __asm { BR              X9 }
            llvm::BranchProbabilityInfo::LoopBlock::LoopBlock((uint64_t)v50, *(_QWORD *)(v23 - 56 - 32 * v29), *(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64));
            v44[0] = (uint64_t)&v45;
            v44[1] = (uint64_t)v50;
            EstimatedEdgeWeight = llvm::BranchProbabilityInfo::getEstimatedEdgeWeight(a1, v44);
            if (!HIDWORD(EstimatedEdgeWeight))
              break;
            if ((v33 & 1) != 0 || (v31 | (v30 << 8)) < EstimatedEdgeWeight)
            {
              v31 = EstimatedEdgeWeight;
              v30 = EstimatedEdgeWeight >> 8;
            }
            v33 = 0;
            ++v29;
            v28 += 2;
            v32 += 32;
            if (v34 == v29)
            {
              v38 = 0x100000000;
              goto LABEL_41;
            }
          }
          v31 = 0;
          v38 = 0;
        }
        else
        {
          v27 = 2;
          switch(v26)
          {
            case 1:
              __break(1u);
              return;
            case 2:
              v27 = (*(_DWORD *)(v24 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_51;
            case 3:
            case 9:
              v27 = (*(_DWORD *)(v24 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_51;
            case 4:
              goto LABEL_29;
            case 7:
              v27 = *(_WORD *)(v24 + 18) & 1;
              goto LABEL_51;
            case 8:
              v27 = 1;
              goto LABEL_29;
            case 10:
              v27 = *(_DWORD *)(v24 + 80) + 1;
LABEL_51:
              v51 = v53;
              v52 = 0x400000000;
              if (v27)
                goto LABEL_30;
              v30 = 0;
              v31 = 0;
              v38 = 0;
              break;
            default:
              goto LABEL_49;
          }
        }
      }
LABEL_41:
      if (v51 != v53)
        free(v51);
      v37 = v38 | ((unint64_t)v30 << 8);
      if (HIDWORD(v37))
        llvm::BranchProbabilityInfo::propagateEstimatedBlockWeight(a1, (uint64_t)&v45, a3, a4, v37 | v31, (uint64_t)&v57, (uint64_t)&v54);
      v14 = v58;
LABEL_46:
      ;
    }
    while (v14);
    v11 = v55;
  }
  while ((_DWORD)v55);
  if (__p)
  {
    v48 = (char *)__p;
    operator delete(__p);
  }
  if (v54 != v56)
    free(v54);
  if (v57 != v59)
    free(v57);
}

uint64_t llvm::BranchProbabilityInfo::calcEstimatedHeuristics(uint64_t **this, const llvm::BasicBlock *a2)
{
  const llvm::BasicBlock *v2;
  uint64_t v3;
  _QWORD *v4;
  const llvm::BasicBlock *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  llvm::Constant *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  char v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char v51;
  llvm::Constant *v52;
  uint64_t v53;
  _QWORD **v54;
  uint64_t v55;
  llvm::UndefValue *v56;
  llvm::Constant *v57;
  const llvm::BasicBlock *v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t EstimatedEdgeWeight;
  unsigned __int8 v70;
  unint64_t v71;
  unsigned int v72;
  _QWORD *i;
  unsigned int v75;
  char *v76;
  uint64_t *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  _DWORD *v88;
  unint64_t v89;
  unsigned int v90;
  int v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t *v99;
  char *v100;
  uint64_t v101;
  unsigned __int8 *v102;
  const llvm::BasicBlock *v103;
  uint64_t *v104;
  uint64_t v105;
  char *v107;
  char *v108;
  uint64_t v109;
  int v110;
  _BYTE v111[64];
  char v112[8];
  _QWORD *v113;
  int v114;
  char *v115;
  void **v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  _QWORD v123[8];
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  _BYTE v128[64];
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[4];

  v2 = a2;
  v132[2] = *MEMORY[0x1E0C80C00];
  llvm::BranchProbabilityInfo::LoopBlock::LoopBlock((uint64_t)v112, (uint64_t)a2, this[7], this[8]);
  v107 = v111;
  v108 = v111;
  v3 = 8;
  v109 = 8;
  v110 = 0;
  v4 = v113;
  v103 = v2;
  if (v113)
  {
    v6 = (char *)v2 + 40;
    v5 = (const llvm::BasicBlock *)*((_QWORD *)v2 + 5);
    if (v5 != (const llvm::BasicBlock *)((char *)v2 + 40))
    {
      if (v5)
        v7 = (char *)v5 - 24;
      else
        v7 = 0;
      v8 = v7[16] - 40;
      if (v8 < 0xFFFFFFF5)
        v7 = 0;
      if (v5)
      {
        v9 = v7[16] == 30 && v8 >= 0xFFFFFFF5;
        if (v9 && (*((_DWORD *)v7 + 5) & 0x7FFFFFF) == 3)
        {
          v10 = *((_QWORD *)v7 - 12);
          v11 = *(unsigned __int8 *)(v10 + 16);
          v12 = v10 && v11 >= 0x1C;
          if (v12 && v11 - 83 >= 0xFFFFFFFE)
          {
            v14 = *(_QWORD *)(v10 - 64);
            v15 = *(unsigned __int8 *)(v14 + 16);
            if (v15 >= 0x1C)
            {
              v102 = *(unsigned __int8 **)(v10 - 32);
              if (v102[16] <= 0x14u)
              {
                v100 = v7;
                v101 = *((_QWORD *)v7 - 12);
                v129 = &v131;
                v130 = 0x100000000;
                if (v15 == 83)
                {
LABEL_26:
                  v16 = sub_1C477672C((uint64_t)(v4 + 7), *(_QWORD *)(v14 + 40));
                  v17 = v4[8];
                  v18 = 72;
                  if (v17 == v4[7])
                    v18 = 76;
                  if (v16 != (_QWORD *)(v17 + 8 * *(unsigned int *)((char *)v4 + v18)))
                  {
                    v124 = (uint64_t *)v128;
                    v125 = (uint64_t)v128;
                    v126 = 8;
                    v127 = 0;
                    v121 = v123;
                    v123[0] = v14;
                    v122 = 0x800000001;
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v124, v14);
                    v19 = v122;
                    if ((_DWORD)v122)
                    {
                      while (1)
                      {
                        v20 = *((_QWORD *)v121 + --v19);
                        LODWORD(v122) = v19;
                        v21 = *(_DWORD *)(v20 + 20);
                        if ((v21 & 0x40000000) != 0)
                          break;
                        v22 = v21 & 0x7FFFFFF;
                        v23 = v20 - 32 * v22;
                        if (v22)
                          goto LABEL_34;
LABEL_99:
                        if (!v19)
                          goto LABEL_100;
                      }
                      v23 = *(_QWORD *)(v20 - 8);
                      v22 = v21 & 0x7FFFFFF;
                      if (!v22)
                        goto LABEL_99;
LABEL_34:
                      v24 = (uint64_t *)(v23 + 32 * *(unsigned int *)(v20 + 60));
                      v104 = &v24[v22];
                      while (1)
                      {
                        v25 = *v24;
                        v26 = sub_1C477672C((uint64_t)(v4 + 7), *v24);
                        v28 = v4[8];
                        v29 = 72;
                        if (v28 == v4[7])
                          v29 = 76;
                        if (v26 != (_QWORD *)(v28 + 8 * *(unsigned int *)((char *)v4 + v29)))
                        {
                          v30 = *(_DWORD *)(v20 + 20);
                          v31 = v30 & 0x7FFFFFF;
                          if ((v30 & 0x7FFFFFF) != 0)
                          {
                            v32 = 0;
                            while (1)
                            {
                              v33 = v20 - 32 * v31;
                              if ((v30 & 0x40000000) != 0)
                                v33 = *(_QWORD *)(v20 - 8);
                              if (*(_QWORD *)(v33 + 32 * *(unsigned int *)(v20 + 60) + 8 * v32) == v25)
                                break;
                              if (v31 == ++v32)
                                goto LABEL_44;
                            }
                          }
                          else
                          {
LABEL_44:
                            LODWORD(v32) = -1;
                          }
                          if ((v30 & 0x40000000) != 0)
                            v34 = *(_QWORD *)(v20 - 8);
                          else
                            v34 = v20 - 32 * v31;
                          v35 = *(unsigned __int8 **)(v34 + 32 * v32);
                          v36 = v35[16];
                          if (v35 && v36 == 83)
                          {
                            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v124, (uint64_t)v35);
                            if (v37)
                            {
                              v38 = v122;
                              if (v122 >= (unint64_t)HIDWORD(v122))
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v123, v122 + 1, 8);
                                v38 = v122;
                              }
                              *((_QWORD *)v121 + v38) = v35;
                              LODWORD(v122) = v122 + 1;
                            }
                          }
                          else
                          {
                            if (v35)
                              v39 = v36 > 0x14;
                            else
                              v39 = 1;
                            if (!v39)
                            {
                              v40 = *(_QWORD *)v6;
                              if (*(char **)v6 != v6)
                              {
                                if (v40)
                                  v41 = v40 - 24;
                                else
                                  v41 = 0;
                                v42 = *(unsigned __int8 *)(v41 + 16);
                                if (v42 == 30)
                                {
                                  if ((*(_DWORD *)(v41 + 20) & 0x7FFFFFF) == 3)
                                    v43 = 2;
                                  else
                                    v43 = 1;
LABEL_68:
                                  v44 = 0;
                                  v45 = (_QWORD *)(v41 - 32);
                                  while (1)
                                  {
                                    if (v42 != 30)
                                      __asm { BR              X17 }
                                    if (*v45 == v25)
                                      break;
                                    ++v44;
                                    v45 -= 4;
                                    if (v43 == v44)
                                      goto LABEL_58;
                                  }
                                  v46 = (char *)(v129 - 1);
                                  v47 = 8 * v130;
                                  while (v47)
                                  {
                                    v48 = *(_QWORD *)&v46[v47];
                                    v49 = *(_DWORD *)(v48 + 20);
                                    if ((v49 & 0x40000000) != 0)
                                      v50 = *(_QWORD *)(v48 - 8);
                                    else
                                      v50 = v48 - 32 * (v49 & 0x7FFFFFF);
                                    v51 = *(_BYTE *)(v48 + 16) - 28;
                                    v52 = *(llvm::Constant **)(v50 + 32);
                                    v53 = (uint64_t)llvm::ConstantFoldBinaryInstruction((llvm *)(*(unsigned __int8 *)(v48 + 16) - 28), (llvm::Constant *)v35, v52, v27);
                                    if (!v53)
                                    {
                                      v54 = *(_QWORD ***)v35;
                                      if (!*(_QWORD *)v35)
                                        goto LABEL_58;
                                      v132[0] = v35;
                                      v132[1] = v52;
                                      v55 = **v54 + 1512;
                                      LOBYTE(v115) = v51;
                                      BYTE1(v115) = 1;
                                      WORD1(v115) = 0;
                                      v116 = (void **)v132;
                                      v117 = 2;
                                      v118 = 0u;
                                      v119 = 0u;
                                      v120 = 0;
                                      v53 = sub_1C537D4FC(v55, (uint64_t)v54, (unsigned __int8 *)&v115);
                                    }
                                    v47 -= 8;
                                    v35 = (unsigned __int8 *)v53;
                                    if (!v53)
                                      goto LABEL_58;
                                  }
                                  v56 = llvm::ConstantFoldCompareInstruction(*(_WORD *)(v101 + 18) & 0x3F, v35, v102, (BOOL)v27);
                                  if (v56)
                                  {
                                    if ((v57 = v56, llvm::Constant::isZeroValue(v56))
                                      && v25 == *((_QWORD *)v100 - 4)
                                      || llvm::Constant::isOneValue(v57) && v25 == *((_QWORD *)v100 - 8))
                                    {
                                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v107, v25);
                                    }
                                  }
                                  goto LABEL_58;
                                }
                                v43 = 2;
                                switch(*(_BYTE *)(v41 + 16))
                                {
                                  case 0x1E:
LABEL_206:
                                    __break(1u);
LABEL_207:
                                    v61 = (*((_DWORD *)v6 + 5) & 0x7FFFFFF) - 1;
LABEL_186:
                                    if (!v61)
                                      goto LABEL_187;
                                    goto LABEL_115;
                                  case 0x1F:
                                    v43 = (*(_DWORD *)(v41 + 20) >> 1) & 0x3FFFFFF;
                                    break;
                                  case 0x20:
                                  case 0x26:
                                    v43 = (*(_DWORD *)(v41 + 20) & 0x7FFFFFF) - 1;
                                    break;
                                  case 0x21:
                                    goto LABEL_68;
                                  case 0x24:
                                    v43 = *(_WORD *)(v41 + 18) & 1;
                                    break;
                                  case 0x25:
                                    v43 = 1;
                                    goto LABEL_68;
                                  case 0x27:
                                    v43 = *(_DWORD *)(v41 + 80) + 1;
                                    break;
                                  default:
                                    goto LABEL_58;
                                }
                                if (v43)
                                  goto LABEL_68;
                              }
                            }
                          }
                        }
LABEL_58:
                        if (++v24 == v104)
                        {
                          v19 = v122;
                          goto LABEL_99;
                        }
                      }
                    }
LABEL_100:
                    if (v121 != v123)
                      free(v121);
                    if ((uint64_t *)v125 != v124)
                      free((void *)v125);
                  }
                }
                else
                {
                  while (v15 - 41 <= 0x11)
                  {
                    v92 = *(_DWORD *)(v14 + 20);
                    v93 = (v92 & 0x40000000) != 0 ? *(_QWORD *)(v14 - 8) : v14 - 32 * (v92 & 0x7FFFFFF);
                    if (*(unsigned __int8 *)(*(_QWORD *)(v93 + 32) + 16) > 0x14u)
                      break;
                    v94 = sub_1C477672C((uint64_t)(v4 + 7), *(_QWORD *)(v14 + 40));
                    v95 = v4[8];
                    v96 = v95 == v4[7] ? 76 : 72;
                    if (v94 == (_QWORD *)(v95 + 8 * *(unsigned int *)((char *)v4 + v96)))
                      break;
                    v97 = v130;
                    if (v130 >= (unint64_t)HIDWORD(v130))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v129, (uint64_t)&v131, v130 + 1, 8);
                      v97 = v130;
                    }
                    v129[v97] = v14;
                    LODWORD(v130) = v130 + 1;
                    v98 = *(_DWORD *)(v14 + 20);
                    v99 = (v98 & 0x40000000) != 0 ? *(uint64_t **)(v14 - 8) : (uint64_t *)(v14 - 32 * (v98 & 0x7FFFFFF));
                    v14 = *v99;
                    if (!*v99)
                      break;
                    v15 = *(unsigned __int8 *)(v14 + 16);
                    if (v15 < 0x1C)
                      break;
                    if (v15 == 83)
                      goto LABEL_26;
                  }
                }
                if (v129 != &v131)
                  free(v129);
                v2 = v103;
              }
            }
          }
        }
      }
    }
  }
  v24 = &v126;
  v124 = &v126;
  v3 = 0x400000000;
  v125 = 0x400000000;
  v58 = (const llvm::BasicBlock *)*((_QWORD *)v2 + 5);
  if (v58 == (const llvm::BasicBlock *)((char *)v2 + 40))
  {
LABEL_187:
    v86 = 0;
    goto LABEL_179;
  }
  if (v58)
    v6 = (char *)v58 - 24;
  else
    v6 = 0;
  v59 = v6[16];
  v60 = v59 - 29;
  if (v59 == 30)
  {
    if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) == 3)
      v61 = 2;
    else
      v61 = 1;
LABEL_115:
    v105 = (uint64_t)v24;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = v61;
    while (1)
    {
      v66 = v6[16];
      if (v66 != 30)
        __asm { BR              X9 }
      v67 = (uint64_t *)&v6[-32 * v62 - 32];
      v68 = *v67;
      llvm::BranchProbabilityInfo::LoopBlock::LoopBlock((uint64_t)&v121, *v67, this[7], this[8]);
      v115 = v112;
      v116 = &v121;
      EstimatedEdgeWeight = llvm::BranchProbabilityInfo::getEstimatedEdgeWeight((uint64_t)this, (uint64_t *)&v115);
      v70 = EstimatedEdgeWeight;
      v71 = HIDWORD(EstimatedEdgeWeight);
      v72 = EstimatedEdgeWeight >> 8;
      if (v113)
      {
        for (i = (_QWORD *)v122; i != v113; i = (_QWORD *)*i)
        {
          if (!i)
            goto LABEL_126;
        }
      }
      if (v114 == -1 || LODWORD(v123[0]) == v114)
        break;
LABEL_126:
      if (BYTE4(EstimatedEdgeWeight) && !(_DWORD)EstimatedEdgeWeight)
        break;
      v75 = EstimatedEdgeWeight / 0x1F;
      if (EstimatedEdgeWeight / 0x1F <= 1)
        v75 = 1;
      if (BYTE4(EstimatedEdgeWeight))
      {
        v70 = v75;
      }
      else
      {
        v75 = 33825;
        v70 = 33;
      }
      if (BYTE4(EstimatedEdgeWeight))
        v72 = v75 >> 8;
      else
        v72 = 132;
      LOBYTE(v71) = 1;
      if (!v113)
        goto LABEL_154;
LABEL_139:
      v76 = (char *)sub_1C477672C((uint64_t)&v107, v68);
      if (v108 == v107)
        v77 = (uint64_t *)((char *)&v109 + 4);
      else
        v77 = &v109;
      if (v76 != &v108[8 * *(unsigned int *)v77])
      {
        v78 = v70 | (v72 << 8);
        if (!(_BYTE)v71 || v78)
        {
          v79 = v78 >> 1;
          if (v79 <= 1)
            v79 = 1;
          if ((_BYTE)v71)
          {
            v70 = v79;
          }
          else
          {
            v79 = 0x7FFFF;
            v70 = -1;
          }
          if ((_BYTE)v71)
            v72 = v79 >> 8;
          else
            v72 = 2047;
        }
        v80 = v70 | (v72 << 8);
        v63 = 1;
        goto LABEL_156;
      }
LABEL_154:
      v63 |= v71 != 0;
      v80 = v70 | (v72 << 8);
      if (!(_BYTE)v71)
        v80 = 0xFFFFF;
LABEL_156:
      v81 = v125;
      if (v125 >= (unint64_t)HIDWORD(v125))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v124, v105, v125 + 1, 4);
        v81 = v125;
      }
      *((_DWORD *)v124 + v81) = v80;
      v64 += v80;
      v82 = (v125 + 1);
      LODWORD(v125) = v125 + 1;
      if (++v62 == v65)
      {
        if ((v63 & (v64 != 0)) != 0)
        {
          v24 = (uint64_t *)v105;
          if (HIDWORD(v64))
          {
            if ((_DWORD)v82)
            {
              v83 = 0;
              v84 = v64 / 0xFFFFFFFF + 1;
              LODWORD(v64) = 0;
              do
              {
                v85 = *(unsigned int *)((char *)v124 + v83) / v84;
                if (v85 <= 1)
                  LODWORD(v85) = 1;
                *(_DWORD *)((char *)v124 + v83) = v85;
                LODWORD(v64) = v64 + v85;
                v83 += 4;
              }
              while (4 * v82 != v83);
            }
            else
            {
              LODWORD(v64) = 0;
            }
          }
          v121 = v123;
          v122 = v3;
          sub_1C4893E04((char *)&v121, v82, -1);
          if ((_DWORD)v82)
          {
            v87 = v124;
            v88 = v121;
            do
            {
              v90 = *(_DWORD *)v87;
              v87 = (uint64_t *)((char *)v87 + 4);
              v89 = v90;
              if (v64 != 0x80000000)
                v89 = ((v64 >> 1) | (v89 << 31)) / v64;
              *v88++ = v89;
              --v82;
            }
            while (v82);
          }
          llvm::BranchProbabilityInfo::setEdgeProbability((uint64_t)this, v103, (uint64_t *)&v121);
          if (v121 != v123)
            free(v121);
          v86 = 1;
        }
        else
        {
          v86 = 0;
          v24 = (uint64_t *)v105;
        }
        goto LABEL_179;
      }
    }
    if (!v113)
      goto LABEL_154;
    goto LABEL_139;
  }
  v61 = 2;
  v86 = 0;
  switch(v60)
  {
    case 0:
    case 5:
    case 6:
      break;
    case 1:
      goto LABEL_206;
    case 2:
      v61 = (*((_DWORD *)v6 + 5) >> 1) & 0x3FFFFFF;
      goto LABEL_186;
    case 3:
    case 9:
      goto LABEL_207;
    case 4:
      goto LABEL_115;
    case 7:
      v61 = *((_WORD *)v6 + 9) & 1;
      goto LABEL_186;
    case 8:
      v61 = 1;
      goto LABEL_115;
    case 10:
      v61 = *((_DWORD *)v6 + 20) + 1;
      goto LABEL_186;
    default:
      goto LABEL_187;
  }
LABEL_179:
  if (v124 != v24)
    free(v124);
  if (v108 != v107)
    free(v108);
  return v86;
}

uint64_t llvm::BranchProbabilityInfo::calcZeroHeuristics(uint64_t a1, const llvm::BasicBlock *a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t result;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t ***v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ****v26;
  uint64_t ***v27;
  int v28;
  int v29;
  int8x8_t *v30;
  int v31;
  uint64_t v32;
  uint8x8_t v33;
  int v34;
  unint64_t v35;
  int8x8_t *v36;
  int8x8_t v37;
  uint8x8_t v38;
  uint64_t *v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  uint64_t *v46;
  unsigned int v47;
  BOOL v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  uint64_t *v57;
  uint64_t ***v58;
  char *v59;
  size_t v60;
  size_t v61;
  int LibFunc;
  int v63;
  BOOL v64;
  uint64_t v65;
  unsigned int v66;
  BOOL v67;
  uint64_t *v68;
  int v69;
  int v70;

  v3 = (_QWORD *)*((_QWORD *)a2 + 5);
  if (v3 == (_QWORD *)((char *)a2 + 40))
    return 0;
  result = 0;
  v6 = v3 - 3;
  if (!v3)
    v6 = 0;
  v7 = *((unsigned __int8 *)v6 + 16) - 40;
  if (v7 < 0xFFFFFFF5)
    v6 = 0;
  if (v3)
  {
    if (*((_BYTE *)v6 + 16) == 30 && v7 >= 0xFFFFFFF5)
    {
      if ((*((_DWORD *)v6 + 5) & 0x7FFFFFF) != 3)
        return 0;
      result = 0;
      v9 = *(v6 - 12);
      if (!v9 || *(_BYTE *)(v9 + 16) != 81)
        return result;
      v11 = *(_QWORD *)(v9 - 32);
      v12 = *(unsigned __int8 *)(v11 + 16);
      if (v11 && v12 == 77)
      {
        v11 = *(_QWORD *)(v11 - 32);
        v12 = *(unsigned __int8 *)(v11 + 16);
      }
      if (v12 != 16)
        return 0;
      v13 = *(_QWORD *)(v9 - 64);
      v14 = *(unsigned __int8 *)(v13 + 16);
      if (v13 && v14 == 56)
      {
        v15 = *(_DWORD *)(v13 + 20);
        if ((v15 & 0x40000000) != 0)
          v16 = *(_QWORD *)(v13 - 8);
        else
          v16 = v13 - 32 * (v15 & 0x7FFFFFF);
        v30 = *(int8x8_t **)(v16 + 32);
        v31 = v30[2].u8[0];
        if (v30 && v31 == 77)
        {
          v30 = (int8x8_t *)v30[-4];
          v31 = v30[2].u8[0];
        }
        if (v31 == 16)
        {
          v32 = v30[4].u32[0];
          if (v32 > 0x40)
          {
            v34 = 0;
            v35 = (unint64_t)(v32 + 63) >> 6;
            v36 = (int8x8_t *)v30[3];
            do
            {
              v37 = *v36++;
              v38 = (uint8x8_t)vcnt_s8(v37);
              v38.i16[0] = vaddlv_u8(v38);
              v34 += v38.i32[0];
              --v35;
            }
            while (v35);
            if (v34 == 1)
              return 0;
          }
          else
          {
            v33 = (uint8x8_t)vcnt_s8(v30[3]);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] == 1)
              return 0;
          }
        }
        goto LABEL_50;
      }
      v70 = 468;
      if (v13)
        v17 = a3 == 0;
      else
        v17 = 1;
      if (v17)
        goto LABEL_50;
      if (v14 != 84)
        goto LABEL_50;
      v18 = *(uint64_t ****)(v13 - 32);
      if (!v18)
        goto LABEL_50;
      if (*((_BYTE *)v18 + 16))
        goto LABEL_50;
      v19 = (uint64_t)v18[3];
      if (v19 != *(_QWORD *)(v13 + 72) || (*((_BYTE *)v18 + 33) & 0x20) != 0)
        goto LABEL_50;
      v20 = v9;
      v21 = *a3;
      if ((*((_BYTE *)v18 + 23) & 0x10) == 0)
      {
        v60 = 0;
        v59 = &byte_1C871356D;
LABEL_95:
        LibFunc = llvm::TargetLibraryInfoImpl::getLibFunc(0, v59, v60, &v70);
        v63 = v70;
        if (LibFunc)
          llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v21, v19, v70);
        v64 = (v63 - 403) > 0xD || ((1 << (v63 + 109)) & 0x2809) == 0;
        if (!v64 || (v69 = v63, v63 == 321) || (v9 = v20, v69 == 168))
        {
          v65 = qword_1ED7F0308;
          if (!qword_1ED7F0308)
            return 0;
          v44 = *(_WORD *)(v20 + 18) & 0x3F;
          v45 = &qword_1ED7F0308;
          v46 = &qword_1ED7F0308;
          do
          {
            v66 = *(_DWORD *)(v65 + 32);
            v67 = v66 >= v44;
            if (v66 >= v44)
              v68 = (uint64_t *)v65;
            else
              v68 = (uint64_t *)(v65 + 8);
            if (v67)
              v46 = (uint64_t *)v65;
            v65 = *v68;
          }
          while (*v68);
          goto LABEL_88;
        }
LABEL_50:
        v39 = (uint64_t *)(v11 + 24);
        v40 = *(_DWORD *)(v11 + 32);
        if (v40 > 0x40)
        {
          v42 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v11 + 24));
          if (v42 != v40)
          {
            if (v42 != v40 - 1)
            {
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)(v11 + 24)) != v40)
                return 0;
              goto LABEL_79;
            }
            goto LABEL_68;
          }
        }
        else
        {
          v41 = *v39;
          if (*v39)
          {
            if (v41 != 1)
            {
              if (v40 && v41 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v40)
                return 0;
LABEL_79:
              v54 = qword_1ED7F02D8;
              if (qword_1ED7F02D8)
              {
                v44 = *(_WORD *)(v9 + 18) & 0x3F;
                v45 = &qword_1ED7F02D8;
                v46 = &qword_1ED7F02D8;
                do
                {
                  v55 = *(_DWORD *)(v54 + 32);
                  v56 = v55 >= v44;
                  if (v55 >= v44)
                    v57 = (uint64_t *)v54;
                  else
                    v57 = (uint64_t *)(v54 + 8);
                  if (v56)
                    v46 = (uint64_t *)v54;
                  v54 = *v57;
                }
                while (*v57);
                goto LABEL_88;
              }
              return 0;
            }
LABEL_68:
            v50 = qword_1ED7F02F0;
            if (!qword_1ED7F02F0)
              return 0;
            v44 = *(_WORD *)(v9 + 18) & 0x3F;
            v45 = &qword_1ED7F02F0;
            v46 = &qword_1ED7F02F0;
            do
            {
              v51 = *(_DWORD *)(v50 + 32);
              v52 = v51 >= v44;
              if (v51 >= v44)
                v53 = (uint64_t *)v50;
              else
                v53 = (uint64_t *)(v50 + 8);
              if (v52)
                v46 = (uint64_t *)v50;
              v50 = *v53;
            }
            while (*v53);
            goto LABEL_88;
          }
        }
        v43 = qword_1ED7F02C0;
        if (!qword_1ED7F02C0)
          return 0;
        v44 = *(_WORD *)(v9 + 18) & 0x3F;
        v45 = &qword_1ED7F02C0;
        v46 = &qword_1ED7F02C0;
        do
        {
          v47 = *(_DWORD *)(v43 + 32);
          v48 = v47 >= v44;
          if (v47 >= v44)
            v49 = (uint64_t *)v43;
          else
            v49 = (uint64_t *)(v43 + 8);
          if (v48)
            v46 = (uint64_t *)v43;
          v43 = *v49;
        }
        while (*v49);
LABEL_88:
        if (v46 != v45 && *((_DWORD *)v46 + 8) <= v44)
        {
          llvm::BranchProbabilityInfo::setEdgeProbability(a1, a2, v46 + 5);
          return 1;
        }
        return 0;
      }
      v22 = ***v18;
      v23 = *(_QWORD *)(v22 + 152);
      v24 = *(unsigned int *)(v22 + 168);
      if ((_DWORD)v24)
      {
        LODWORD(v25) = (v24 - 1) & ((v18 >> 4) ^ (v18 >> 9));
        v26 = (uint64_t ****)(v23 + 16 * v25);
        v27 = *v26;
        if (*v26 == v18)
        {
LABEL_94:
          v58 = v26[1];
          v61 = (size_t)*v58;
          v59 = (char *)(v58 + 2);
          v60 = v61;
          goto LABEL_95;
        }
        v28 = 1;
        while (v27 != (uint64_t ***)-4096)
        {
          v29 = v25 + v28++;
          v25 = v29 & (v24 - 1);
          v27 = *(uint64_t ****)(v23 + 16 * v25);
          if (v27 == v18)
          {
            v26 = (uint64_t ****)(v23 + 16 * v25);
            goto LABEL_94;
          }
        }
      }
      v26 = (uint64_t ****)(v23 + 16 * v24);
      goto LABEL_94;
    }
  }
  return result;
}

uint64_t llvm::BranchProbabilityInfo::calcFloatingPointHeuristics(llvm::BranchProbabilityInfo *this, const llvm::BasicBlock *a2)
{
  const llvm::BasicBlock *v2;
  uint64_t result;
  char *v5;
  unsigned int v6;
  uint64_t v8;
  int *v10;
  int *v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t *v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  v2 = (const llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (v2 == (const llvm::BasicBlock *)((char *)a2 + 40))
    return 0;
  result = 0;
  v5 = (char *)v2 - 24;
  if (!v2)
    v5 = 0;
  v6 = v5[16] - 40;
  if (v6 < 0xFFFFFFF5)
    v5 = 0;
  if (v2)
  {
    if (v5[16] == 30 && v6 >= 0xFFFFFFF5)
    {
      if ((*((_DWORD *)v5 + 5) & 0x7FFFFFF) == 3)
      {
        result = 0;
        v8 = *((_QWORD *)v5 - 12);
        if (!v8 || *(_BYTE *)(v8 + 16) != 82)
          return result;
        v19 = v21;
        v20 = 0xC00000000;
        v10 = &dword_1ED7F0294;
        v11 = &dword_1ED7F0298;
        v12 = *(_WORD *)(v8 + 18) & 0x3F;
        if ((int)v12 > 8)
        {
          if (v12 == 9)
          {
            v11 = &dword_1ED7F0294;
            v10 = &dword_1ED7F0298;
          }
          else if (v12 != 14)
          {
            goto LABEL_23;
          }
        }
        else if (v12 != 1 && v12 != 6)
        {
LABEL_23:
          v14 = qword_1ED7F0320;
          if (!qword_1ED7F0320)
            return 0;
          v15 = &qword_1ED7F0320;
          do
          {
            v16 = *(_DWORD *)(v14 + 32);
            v17 = v16 >= v12;
            if (v16 >= v12)
              v18 = (uint64_t *)v14;
            else
              v18 = (uint64_t *)(v14 + 8);
            if (v17)
              v15 = (uint64_t *)v14;
            v14 = *v18;
          }
          while (*v18);
          if (v15 == &qword_1ED7F0320 || *((_DWORD *)v15 + 8) > v12)
            return 0;
          sub_1C614CA14((uint64_t)&v19, (uint64_t)(v15 + 5));
LABEL_38:
          llvm::BranchProbabilityInfo::setEdgeProbability((uint64_t)this, a2, (uint64_t *)&v19);
          if (v19 != v21)
            free(v19);
          return 1;
        }
        v21[0] = *v10 | ((unint64_t)*v11 << 32);
        LODWORD(v20) = 2;
        goto LABEL_38;
      }
      return 0;
    }
  }
  return result;
}

uint64_t llvm::BranchProbabilityInfo::releaseMemory(llvm::BranchProbabilityInfo *this)
{
  __n128 v2;

  sub_1C4DBEFB8((_DWORD *)this + 6);
  return sub_1C4DC3D4C((uint64_t)this, v2);
}

_DWORD *sub_1C4DBEFB8(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = result[2];
  if (v2)
  {
    v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64)
        v5 = 64;
      else
        v5 = v4;
LABEL_9:
      if (v5 == v3)
      {
        *((_QWORD *)result + 1) = 0;
        v6 = *(_OWORD **)result;
        v7 = 24 * v3;
        do
        {
          *v6 = xmmword_1C85F22C0;
          v6 = (_OWORD *)((char *)v6 + 24);
          v7 -= 24;
        }
        while (v7);
      }
      else
      {
        result = (_DWORD *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
        if (v5)
        {
          v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
          v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
          LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
          v1[4] = v9;
          result = operator new(24 * v9, (std::align_val_t)8uLL);
          *(_QWORD *)v1 = result;
          *((_QWORD *)v1 + 1) = 0;
          v10 = v1[4];
          if ((_DWORD)v10)
          {
            v11 = 24 * v10;
            do
            {
              *(_OWORD *)result = xmmword_1C85F22C0;
              result += 6;
              v11 -= 24;
            }
            while (v11);
          }
        }
        else
        {
          *(_QWORD *)v1 = 0;
          *((_QWORD *)v1 + 1) = 0;
          v1[4] = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (!result[3])
      return result;
    v3 = result[4];
    if (v3 > 0x40)
    {
      v5 = 0;
      goto LABEL_9;
    }
  }
  if (v3)
  {
    v12 = *(_QWORD *)result;
    v13 = *(_QWORD *)result + 24 * v3;
    do
    {
      *(_QWORD *)v12 = -4096;
      *(_DWORD *)(v12 + 8) = -1;
      v12 += 24;
    }
    while (v12 != v13);
  }
  *((_QWORD *)result + 1) = 0;
  return result;
}

BOOL llvm::BranchProbabilityInfo::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &llvm::BranchProbabilityAnalysis::Key;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::BranchProbabilityAnalysis::Key);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C4DAA3F8((uint64_t)v8) && !sub_1C4DAA49C((uint64_t)v8);
}

BOOL llvm::BranchProbabilityInfo::isEdgeHot(llvm::BranchProbabilityInfo *this, const llvm::BasicBlock *a2, const llvm::BasicBlock *a3)
{
  return llvm::BranchProbabilityInfo::getEdgeProbability((uint64_t)this, (uint64_t)a2, (uint64_t)a3) > 0x66666666;
}

unint64_t llvm::BranchProbabilityInfo::getEdgeProbability(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  unint64_t result;
  int v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v37;
  unsigned int v38;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  _QWORD *v48;
  unsigned int v49;

  v3 = *(_DWORD *)(a1 + 40);
  if (!v3)
    goto LABEL_45;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = (unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32;
  v6 = ((v5 - 1) ^ ((v5 - 1) >> 22)) + ~(((v5 - 1) ^ ((v5 - 1) >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = ((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27));
  v9 = v3 - 1;
  v10 = (v3 - 1) & v8;
  v11 = (uint64_t *)(v4 + 24 * v10);
  v12 = *v11;
  v13 = *((_DWORD *)v11 + 2);
  if (v12 != a2 || v13 != 0)
  {
    v15 = 1;
    while (v12 != -4096 || v13 != -1)
    {
      v16 = v10 + v15++;
      v10 = v16 & v9;
      v17 = (uint64_t *)(v4 + 24 * v10);
      v12 = *v17;
      v13 = *((_DWORD *)v17 + 2);
      if (v12 == a2 && v13 == 0)
        goto LABEL_14;
    }
LABEL_45:
    v42 = *(_QWORD *)(a2 + 40);
    if (v42 == a2 + 40)
    {
LABEL_75:
      v49 = 0;
      v47 = 0;
      return ((v49 >> 1) | ((unint64_t)v47 << 31)) / v49;
    }
    if (v42)
      v43 = v42 - 24;
    else
      v43 = 0;
    v44 = *(unsigned __int8 *)(v43 + 16);
    if (v44 == 30)
    {
      if ((*(_DWORD *)(v43 + 20) & 0x7FFFFFF) == 3)
        v45 = 2;
      else
        v45 = 1;
    }
    else
    {
      v45 = 2;
      v47 = 0;
      switch(*(_BYTE *)(v43 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          goto LABEL_61;
        case 0x1E:
LABEL_74:
          __break(1u);
          goto LABEL_75;
        case 0x1F:
          v45 = (*(_DWORD *)(v43 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
          v45 = (*(_DWORD *)(v43 + 20) & 0x7FFFFFF) - 1;
          break;
        case 0x21:
          goto LABEL_53;
        case 0x24:
          v45 = *(_WORD *)(v43 + 18) & 1;
          break;
        case 0x25:
          v45 = 1;
          goto LABEL_53;
        case 0x27:
          v45 = *(_DWORD *)(v43 + 80) + 1;
          break;
        default:
          goto LABEL_75;
      }
      if (!v45)
      {
        v47 = 0;
LABEL_61:
        if (v44 != 30)
          __asm { BR              X12 }
        if ((*(_DWORD *)(v43 + 20) & 0x7FFFFFF) == 3)
          v49 = 2;
        else
          v49 = 1;
        return ((v49 >> 1) | ((unint64_t)v47 << 31)) / v49;
      }
    }
LABEL_53:
    v46 = 0;
    v47 = 0;
    v48 = (_QWORD *)(v43 - 32);
    do
    {
      if (v44 != 30)
        __asm { BR              X5 }
      if (*v48 == a3)
        ++v47;
      ++v46;
      v48 -= 4;
    }
    while (v45 != v46);
    goto LABEL_61;
  }
LABEL_14:
  v19 = *(_QWORD *)(a2 + 40);
  if (v19 == a2 + 40)
    return 0;
  if (v19)
    v20 = v19 - 24;
  else
    v20 = 0;
  v21 = *(unsigned __int8 *)(v20 + 16);
  v22 = v21 - 29;
  if (v21 != 30)
  {
    v23 = 2;
    result = 0;
    switch(v22)
    {
      case 0:
      case 5:
      case 6:
        return result;
      case 1:
        goto LABEL_74;
      case 2:
        v23 = (*(_DWORD *)(v20 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_72;
      case 3:
      case 9:
        v23 = (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_72;
      case 4:
        goto LABEL_22;
      case 7:
        v23 = *(_WORD *)(v20 + 18) & 1;
        goto LABEL_72;
      case 8:
        v23 = 1;
        goto LABEL_22;
      case 10:
        v23 = *(_DWORD *)(v20 + 80) + 1;
LABEL_72:
        if (!v23)
          return 0;
        goto LABEL_22;
      default:
        return 0;
    }
  }
  if ((*(_DWORD *)(v20 + 20) & 0x7FFFFFF) == 3)
    v23 = 2;
  else
    v23 = 1;
LABEL_22:
  v24 = 0;
  v25 = 0;
  result = 0;
  v27 = *(unsigned __int8 *)(v20 + 16);
  v28 = (uint64_t *)(v4 + 24 * v3);
  do
  {
    if (v27 != 30)
      __asm { BR              X26 }
    if (*(_QWORD *)(v20 - 32 - 32 * v24) == a3)
    {
      v29 = ((37 * v25) | v5) + ~((unint64_t)(37 * v25) << 32);
      v30 = (v29 ^ (v29 >> 22)) + ~((v29 ^ (v29 >> 22)) << 13);
      v31 = (9 * (v30 ^ (v30 >> 8))) ^ ((9 * (v30 ^ (v30 >> 8))) >> 15);
      v32 = v9 & (((v31 + ~(v31 << 27)) >> 31) ^ (v31 + ~((_DWORD)v31 << 27)));
      v33 = (uint64_t *)(v4 + 24 * v32);
      v34 = *v33;
      v35 = *((_DWORD *)v33 + 2);
      if (*v33 != a2 || v35 != v24)
      {
        v37 = 1;
        while (v34 != -4096 || v35 != -1)
        {
          v38 = v32 + v37++;
          v32 = v38 & v9;
          v33 = (uint64_t *)(v4 + 24 * v32);
          v34 = *v33;
          v35 = *((_DWORD *)v33 + 2);
          if (*v33 == a2 && v35 == v24)
            goto LABEL_39;
        }
        v33 = v28;
      }
LABEL_39:
      v40 = *((unsigned int *)v33 + 4);
      v41 = v40 + result;
      LODWORD(result) = v40 + result;
      if (v41 <= 0x80000000)
        result = result;
      else
        result = 0x80000000;
    }
    v24 = ++v25;
  }
  while (v23 != v25);
  return result;
}

uint64_t llvm::BranchProbabilityInfo::getEdgeProbability(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 40);
  if (!v4)
  {
LABEL_15:
    v9 = (uint64_t *)(v3 + 24 * v4);
    goto LABEL_16;
  }
  v5 = ~((unint64_t)(37 * a3) << 32)
     + (37 * a3)
     + ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32);
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = (v4 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
  v9 = (uint64_t *)(v3 + 24 * v8);
  v10 = *v9;
  v11 = *((_DWORD *)v9 + 2);
  if (*v9 != a2 || v11 != a3)
  {
    v13 = 1;
    while (v10 != -4096 || v11 != -1)
    {
      v14 = v8 + v13++;
      v8 = v14 & (v4 - 1);
      v9 = (uint64_t *)(v3 + 24 * v8);
      v10 = *v9;
      v11 = *((_DWORD *)v9 + 2);
      if (*v9 == a2 && v11 == a3)
        goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_16:
  if (v9 != (uint64_t *)(v3 + 24 * v4))
    return *((unsigned int *)v9 + 4);
  v16 = *(_QWORD *)(a2 + 40);
  if (v16 == a2 + 40)
  {
LABEL_28:
    v20 = 0;
  }
  else
  {
    v17 = v16 - 24;
    if (!v16)
      v17 = 0;
    v18 = *(unsigned __int8 *)(v17 + 16);
    v19 = v18 - 29;
    if (v18 != 30)
    {
      v20 = 0;
      switch(v19)
      {
        case 0:
        case 5:
        case 6:
          return ((v20 >> 1) | 0x80000000) / v20;
        case 1:
          __break(1u);
          goto LABEL_30;
        case 2:
          v20 = (*(_DWORD *)(v17 + 20) >> 1) & 0x3FFFFFF;
          return ((v20 >> 1) | 0x80000000) / v20;
        case 3:
        case 9:
LABEL_30:
          v20 = (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) - 1;
          return ((v20 >> 1) | 0x80000000) / v20;
        case 4:
          v20 = 2;
          return ((v20 >> 1) | 0x80000000) / v20;
        case 7:
          v20 = *(_WORD *)(v17 + 18) & 1;
          return ((v20 >> 1) | 0x80000000) / v20;
        case 8:
          v20 = 1;
          return ((v20 >> 1) | 0x80000000) / v20;
        case 10:
          v20 = *(_DWORD *)(v17 + 80) + 1;
          if (*(_DWORD *)(v17 + 80) != 0x7FFFFFFF)
            return ((v20 >> 1) | 0x80000000) / v20;
          return 1;
        default:
          goto LABEL_28;
      }
    }
    if ((*(_DWORD *)(v17 + 20) & 0x7FFFFFF) == 3)
      v20 = 2;
    else
      v20 = 1;
  }
  return ((v20 >> 1) | 0x80000000) / v20;
}

uint64_t llvm::BranchProbabilityInfo::getEdgeProbability(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return llvm::BranchProbabilityInfo::getEdgeProbability(a1, a2, a4);
}

uint64_t llvm::BranchProbabilityInfo::eraseBlock(uint64_t this, const llvm::BasicBlock *a2)
{
  int32x2_t *v3;
  const llvm::BasicBlock *v4;
  __int32 v5;
  __int32 v6;
  unsigned int v7;
  _QWORD *v8;
  const llvm::BasicBlock *v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  const llvm::BasicBlock *v13;
  int32x2_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  const llvm::BasicBlock **v19;
  const llvm::BasicBlock *v20;
  int v21;
  int v22;
  unsigned __int32 v23;
  int v24;
  int32x2_t v25;
  uint64_t v26;
  unsigned __int32 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  const llvm::BasicBlock *v33;
  int v34;
  int v36;
  unsigned int v37;
  unint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  int32x2_t *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t *v52;
  const llvm::BasicBlock *v53;
  int32x2_t *v54;

  v3 = (int32x2_t *)this;
  v51 = 2;
  v52 = 0;
  v53 = a2;
  v4 = a2;
  if (a2 != (const llvm::BasicBlock *)-8192)
  {
    v4 = a2;
    if (a2 != (const llvm::BasicBlock *)-4096)
    {
      v4 = a2;
      if (a2)
      {
        this = (uint64_t)llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v51);
        v4 = v53;
      }
    }
  }
  v54 = v3;
  v5 = v3[2].i32[0];
  if (!v5)
    goto LABEL_13;
  v6 = v5 - 1;
  v7 = (v5 - 1) & ((v4 >> 4) ^ (v4 >> 9));
  v8 = (_QWORD *)(*(_QWORD *)v3 + 40 * v7);
  v9 = (const llvm::BasicBlock *)v8[3];
  if (v4 == v9)
  {
LABEL_10:
    if (v4 != (const llvm::BasicBlock *)-4096 && v4)
    {
      if (v4 == (const llvm::BasicBlock *)-8192)
        goto LABEL_12;
      v39 = v8[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v39 = v8[2];
      v40 = (unint64_t *)v8[2];
      if (v40)
      {
        *v40 = *v40 & 7 | v39;
      }
      else
      {
        v41 = v8[3];
        v42 = ***(int32x2_t ****)v41;
        v43 = (unint64_t)v42[303];
        if (v43 <= v39)
        {
          v44 = v42[305].u32[0];
          if (v43 + 16 * v44 > v39)
          {
            v45 = v44 - 1;
            LODWORD(v46) = v45 & ((v41 >> 4) ^ (v41 >> 9));
            v47 = (uint64_t *)(v43 + 16 * v46);
            v48 = *v47;
            if (v41 == *v47)
            {
LABEL_54:
              *v47 = -8192;
              v42[304] = vadd_s32(v42[304], (int32x2_t)0x1FFFFFFFFLL);
              v41 = v8[3];
            }
            else
            {
              v49 = 1;
              while (v48 != -4096)
              {
                v50 = v46 + v49++;
                v46 = v50 & v45;
                v48 = *(_QWORD *)(v43 + 16 * v46);
                if (v41 == v48)
                {
                  v47 = (uint64_t *)(v43 + 16 * v46);
                  goto LABEL_54;
                }
              }
            }
            *(_BYTE *)(v41 + 17) &= ~1u;
          }
        }
      }
    }
    v8[3] = -8192;
    v4 = v53;
LABEL_12:
    v8[4] = 0;
    v3[1] = vadd_s32(v3[1], (int32x2_t)0x1FFFFFFFFLL);
    goto LABEL_13;
  }
  v10 = 1;
  while (v9 != (const llvm::BasicBlock *)-4096)
  {
    v11 = v7 + v10++;
    v7 = v11 & v6;
    v8 = (_QWORD *)(*(_QWORD *)v3 + 40 * (v11 & v6));
    v9 = (const llvm::BasicBlock *)v8[3];
    if (v4 == v9)
      goto LABEL_10;
  }
LABEL_13:
  if (v4 != (const llvm::BasicBlock *)-8192 && v4 != (const llvm::BasicBlock *)-4096 && v4)
  {
    v12 = v51 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v51 & 0xFFFFFFFFFFFFFFF8) = v52;
    if (v52)
    {
      *v52 = *v52 & 7 | v12;
    }
    else
    {
      v13 = v53;
      v14 = ***(int32x2_t ****)v53;
      v15 = (unint64_t)v14[303];
      if (v15 <= v12)
      {
        v16 = v14[305].u32[0];
        if (v15 + 16 * v16 > v12)
        {
          v17 = v16 - 1;
          LODWORD(v18) = v17 & ((v53 >> 4) ^ (v53 >> 9));
          v19 = (const llvm::BasicBlock **)(v15 + 16 * v18);
          v20 = *v19;
          if (v53 == *v19)
          {
LABEL_24:
            *v19 = (const llvm::BasicBlock *)-8192;
            v14[304] = vadd_s32(v14[304], (int32x2_t)0x1FFFFFFFFLL);
            v13 = v53;
          }
          else
          {
            v21 = 1;
            while (v20 != (const llvm::BasicBlock *)-4096)
            {
              v22 = v18 + v21++;
              v18 = v22 & v17;
              v20 = *(const llvm::BasicBlock **)(v15 + 16 * v18);
              if (v53 == v20)
              {
                v19 = (const llvm::BasicBlock **)(v15 + 16 * v18);
                goto LABEL_24;
              }
            }
          }
          *((_BYTE *)v13 + 17) &= ~1u;
        }
      }
    }
  }
  v23 = v3[5].u32[0];
  if (v23)
  {
    v24 = 0;
    v25 = v3[3];
    v26 = *(_QWORD *)&v25 + 24 * v23;
    v27 = v23 - 1;
    this = 4294967294;
    while (1)
    {
      v28 = (((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32) | (37 * v24))
          + ~((unint64_t)(37 * v24) << 32);
      v29 = (v28 ^ (v28 >> 22)) + ~((v28 ^ (v28 >> 22)) << 13);
      v30 = (9 * (v29 ^ (v29 >> 8))) ^ ((9 * (v29 ^ (v29 >> 8))) >> 15);
      v31 = v27 & (((v30 + ~(v30 << 27)) >> 31) ^ (v30 + ~((_DWORD)v30 << 27)));
      v32 = *(_QWORD *)&v25 + 24 * v31;
      v33 = *(const llvm::BasicBlock **)v32;
      v34 = *(_DWORD *)(v32 + 8);
      if (*(const llvm::BasicBlock **)v32 != a2 || v24 != v34)
        break;
LABEL_41:
      if (v32 == v26)
        return this;
      *(_QWORD *)v32 = -8192;
      *(_DWORD *)(v32 + 8) = -2;
      v3[4] = vadd_s32(v3[4], (int32x2_t)0x1FFFFFFFFLL);
      ++v24;
    }
    v36 = 1;
    while (v33 != (const llvm::BasicBlock *)-4096 || v34 != -1)
    {
      v37 = v31 + v36++;
      v31 = v37 & v27;
      v32 = *(_QWORD *)&v25 + 24 * v31;
      v33 = *(const llvm::BasicBlock **)v32;
      v34 = *(_DWORD *)(v32 + 8);
      if (*(const llvm::BasicBlock **)v32 == a2 && v24 == v34)
        goto LABEL_41;
    }
  }
  return this;
}

void llvm::BranchProbabilityInfo::calculate(uint64_t a1, const llvm::Function *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  llvm::BranchProbabilityInfo::SccInfo *v11;
  llvm::BranchProbabilityInfo::SccInfo *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD **v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  _BYTE *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  _DWORD *v27;
  _DWORD *v28;
  const llvm::BasicBlock *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  llvm *v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const llvm::Function **v45;
  const llvm::Function *v46;
  int v47;
  int v48;
  const llvm::Function *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  llvm *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  llvm *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  _BYTE v80[64];
  void *v81;
  uint64_t v82;
  _BYTE v83[192];
  __int128 v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  _BYTE v88[64];
  void *v89;
  uint64_t v90;
  _BYTE v91[192];
  void *v92;
  void *__src;
  unsigned int v94;
  unsigned int v95;
  int v96;
  void *v97;
  int v98;
  uint64_t v99;
  void *v100;
  void *v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  void *v105;
  int v106;
  _QWORD v107[25];

  v107[24] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  v11 = (llvm::BranchProbabilityInfo::SccInfo *)operator new();
  v12 = llvm::BranchProbabilityInfo::SccInfo::SccInfo(v11, a2);
  v13 = *(_QWORD **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  if (v13)
  {
    v14 = v13[3];
    if (v14)
    {
      v53 = v13[4];
      v54 = (void *)v13[3];
      if (v53 != v14)
      {
        do
        {
          v55 = *(_QWORD *)(v53 - 24);
          v53 -= 24;
          MEMORY[0x1CAA32FB4](v55, 8);
        }
        while (v53 != v14);
        v54 = (void *)v13[3];
      }
      v13[4] = v14;
      operator delete(v54);
    }
    MEMORY[0x1CAA32FB4](*v13, 8);
    MEMORY[0x1CAA32FC0](v13, 0x1020C400B2C5FE4);
  }
  v73 = 0;
  v74 = 0;
  if (a5)
  {
    if (a6)
      goto LABEL_6;
  }
  else
  {
    a5 = operator new();
    *(_QWORD *)a5 = a5 + 16;
    *(_QWORD *)(a5 + 8) = 0x100000000;
    *(_DWORD *)(a5 + 68) = 0;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = 0;
    *(_DWORD *)(a5 + 40) = 0;
    *(_BYTE *)(a5 + 64) = 0;
    *(_QWORD *)(a5 + 48) = 0;
    *(_QWORD *)(a5 + 56) = a2;
    sub_1C53BA620(a5, 0);
    v74 = a5;
    if (a6)
      goto LABEL_6;
  }
  a6 = operator new();
  *(_QWORD *)a6 = a6 + 16;
  *(_QWORD *)(a6 + 8) = 0x400000000;
  *(_DWORD *)(a6 + 92) = 0;
  *(_QWORD *)(a6 + 48) = 0;
  *(_QWORD *)(a6 + 56) = 0;
  *(_DWORD *)(a6 + 64) = 0;
  *(_BYTE *)(a6 + 88) = 0;
  *(_QWORD *)(a6 + 72) = 0;
  *(_QWORD *)(a6 + 80) = a2;
  sub_1C53BA93C(a6, 0);
  v73 = a6;
LABEL_6:
  llvm::BranchProbabilityInfo::computeEestimateBlockWeight(a1, a2, a5, a6);
  v15 = (_QWORD **)*((_QWORD *)a2 + 10);
  if (v15)
    v16 = v15 - 3;
  else
    v16 = 0;
  *(_QWORD *)&v84 = v16;
  sub_1C4DC05B0((uint64_t *)&v84, (uint64_t)&v92);
  v17 = v88;
  *(_QWORD *)&v84 = v88;
  v18 = __src;
  if (__src == v92)
  {
    *((_QWORD *)&v84 + 1) = v88;
    v19 = __src;
  }
  else
  {
    v60 = v94;
    v17 = malloc_type_malloc(8 * v94, 0x4065EBACuLL);
    if (!v17)
    {
      if (v60)
        goto LABEL_135;
      v17 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v17)
        goto LABEL_135;
    }
    *((_QWORD *)&v84 + 1) = v17;
    v19 = v92;
    v18 = __src;
  }
  v20 = v95;
  v85 = v94;
  if (v18 == v19)
    v21 = v95;
  else
    v21 = v94;
  if (v21)
  {
    memmove(v17, v18, 8 * v21);
    v20 = v95;
  }
  v86 = v20;
  v87 = v96;
  v89 = v91;
  v90 = 0x800000000;
  if (v98)
    sub_1C4DB22B8((uint64_t)&v89, (uint64_t *)&v97);
  v22 = v80;
  v75 = v80;
  v23 = v101;
  if (v101 != v100)
  {
    v61 = v102;
    v22 = malloc_type_malloc(8 * v102, 0x4065EBACuLL);
    if (v22 || !v61 && (v22 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v76 = v22;
      v24 = v100;
      v23 = v101;
      goto LABEL_20;
    }
LABEL_135:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v76 = v80;
  v24 = v101;
LABEL_20:
  v77 = v102;
  v25 = v103;
  if (v23 == v24)
    v26 = v103;
  else
    v26 = v102;
  if (v26)
  {
    memmove(v22, v23, 8 * v26);
    v25 = v103;
  }
  v78 = v25;
  v79 = v104;
  v81 = v83;
  v82 = 0x800000000;
  if (v106)
    sub_1C4DB22B8((uint64_t)&v81, (uint64_t *)&v105);
  while (1)
  {
    if ((_DWORD)v90 != (_DWORD)v82)
      goto LABEL_37;
    if (!(_DWORD)v90)
      break;
    v27 = v81;
    v28 = v89;
    while (*(_QWORD *)v28 == *(_QWORD *)v27 && v28[4] == v27[4])
    {
      v28 += 6;
      v27 += 6;
      if (v28 == (_DWORD *)((char *)v89 + 24 * v90))
        goto LABEL_55;
    }
LABEL_37:
    v30 = (const llvm::BasicBlock *)*((_QWORD *)v89 + 3 * v90 - 3);
    v31 = (_QWORD *)*((_QWORD *)v30 + 5);
    if (v31 == (_QWORD *)((char *)v30 + 40))
    {
      v32 = 0;
    }
    else
    {
      if (v31)
        v32 = v31 - 3;
      else
        v32 = 0;
      if (*((unsigned __int8 *)v32 + 16) - 29 >= 0xB)
        v32 = 0;
    }
    v33 = *((unsigned __int8 *)v32 + 16);
    if (v33 != 30)
      __asm { BR              X10 }
    if ((*((_DWORD *)v32 + 5) & 0x7FFFFFF) == 3
      && (llvm::BranchProbabilityInfo::calcMetadataWeights((uint64_t **)a1, v30) & 1) == 0
      && (llvm::BranchProbabilityInfo::calcEstimatedHeuristics((uint64_t **)a1, v30) & 1) == 0
      && (llvm::BranchProbabilityInfo::calcPointerHeuristics((llvm::BranchProbabilityInfo *)a1, v30) & 1) == 0
      && (llvm::BranchProbabilityInfo::calcZeroHeuristics(a1, v30, a4) & 1) == 0)
    {
      llvm::BranchProbabilityInfo::calcFloatingPointHeuristics((llvm::BranchProbabilityInfo *)a1, v30);
    }
    LODWORD(v90) = v90 - 1;
    if ((_DWORD)v90)
      sub_1C4DB1EA4(&v84);
  }
LABEL_55:
  if (v81 != v83)
    free(v81);
  if (v76 != v75)
    free(v76);
  if (v89 != v91)
    free(v89);
  if (*((_QWORD *)&v84 + 1) != (_QWORD)v84)
    free(*((void **)&v84 + 1));
  if (v105 != v107)
    free(v105);
  if (v101 != v100)
    free(v101);
  if (v97 != &v99)
    free(v97);
  v34 = (uint64_t)__src;
  if (__src != v92)
    free(__src);
  v36 = (llvm *)(a1 + 144);
  v35 = *(_DWORD *)(a1 + 144);
  if (v35 > 1 || *(_DWORD *)(a1 + 148))
  {
    if ((v35 & 1) != 0)
    {
      v64 = a1 + 152;
      v65 = a1 + 248;
    }
    else
    {
      v71 = *(_DWORD *)(a1 + 160);
      if (((2 * v35) & 0xFFFFFFFC) < v71)
      {
        if (v71 > 0x40)
        {
          v34 = (uint64_t)sub_1C617EA48((_OWORD *)(a1 + 144));
          goto LABEL_73;
        }
      }
      else if (!v71)
      {
        v66 = 0;
LABEL_129:
        *(_DWORD *)(a1 + 144) = v66;
        *(_DWORD *)(a1 + 148) = 0;
        goto LABEL_73;
      }
      v64 = *(_QWORD *)(a1 + 152);
      v65 = v64 + 24 * v71;
    }
    do
    {
      *(_QWORD *)v64 = -4096;
      *(_DWORD *)(v64 + 8) = 0x7FFFFFFF;
      v64 += 24;
    }
    while (v64 != v65);
    v66 = *(_DWORD *)v36 & 1;
    goto LABEL_129;
  }
LABEL_73:
  v37 = *(_DWORD *)(a1 + 72);
  if (v37 > 1 || *(_DWORD *)(a1 + 76))
  {
    if ((v37 & 1) != 0)
    {
      v63 = (llvm *)(a1 + 80);
      goto LABEL_122;
    }
    v62 = *(unsigned int *)(a1 + 88);
    if (((2 * v37) & 0xFFFFFFFC) >= v62 || v62 < 0x41)
    {
      if (!(_DWORD)v62)
      {
LABEL_124:
        *(_DWORD *)(a1 + 72) = v62;
        *(_DWORD *)(a1 + 76) = 0;
        goto LABEL_75;
      }
      v63 = *(llvm **)(a1 + 80);
      v36 = (llvm *)((char *)v63 + 16 * v62);
      do
      {
LABEL_122:
        *(_QWORD *)v63 = -4096;
        v63 = (llvm *)((char *)v63 + 16);
      }
      while (v63 != v36);
      LODWORD(v62) = *(_DWORD *)(a1 + 72) & 1;
      goto LABEL_124;
    }
    if (v37 >= 2)
    {
      v67 = __clz((v37 >> 1) - 1);
      if (v67 - 28 >= 3)
        v68 = (1 << (33 - v67));
      else
        v68 = 64;
      if ((_DWORD)v68 == (_DWORD)v62)
      {
        *(_QWORD *)(a1 + 72) = 0;
        v69 = 16 * v62;
        v70 = *(_QWORD **)(a1 + 80);
        do
        {
          *v70 = -4096;
          v70 += 2;
          v69 -= 16;
        }
        while (v69);
        goto LABEL_75;
      }
      MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 80), 8);
      if (v68 > 4)
      {
        *(_DWORD *)(a1 + 72) &= ~1u;
        v34 = (uint64_t)operator new(16 * v68, (std::align_val_t)8uLL);
        *(_QWORD *)(a1 + 80) = v34;
        *(_QWORD *)(a1 + 88) = v68;
        v72 = *(_DWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 72) = v72 & 1;
        if ((v72 & 1) == 0)
        {
          v36 = (llvm *)(v34 + 16 * v68);
          do
          {
LABEL_148:
            *(_QWORD *)v34 = -4096;
            v34 += 16;
          }
          while ((llvm *)v34 != v36);
          goto LABEL_75;
        }
LABEL_147:
        v34 = a1 + 80;
        goto LABEL_148;
      }
    }
    else
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 80), 8);
    }
    *(_QWORD *)(a1 + 72) = 1;
    goto LABEL_147;
  }
LABEL_75:
  v38 = *(_QWORD **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v38)
  {
    v39 = v38[3];
    if (v39)
    {
      v56 = v38[4];
      v57 = (void *)v38[3];
      if (v56 != v39)
      {
        do
        {
          v58 = *(_QWORD *)(v56 - 24);
          v56 -= 24;
          MEMORY[0x1CAA32FB4](v58, 8);
        }
        while (v56 != v39);
        v57 = (void *)v38[3];
      }
      v38[4] = v39;
      operator delete(v57);
    }
    MEMORY[0x1CAA32FB4](*v38, 8);
    v34 = MEMORY[0x1CAA32FC0](v38, 0x1020C400B2C5FE4);
  }
  if (byte_1ED7F03B0)
  {
    v40 = byte_1ED82CF97 >= 0 ? byte_1ED82CF97 & 0x7F : qword_1ED82CF88;
    if (!v40)
      goto LABEL_111;
    if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
    {
      v41 = ***(_QWORD ***)a2;
      v42 = *(_QWORD *)(v41 + 152);
      v43 = *(unsigned int *)(v41 + 168);
      if (!(_DWORD)v43)
        goto LABEL_92;
      LODWORD(v44) = (v43 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v45 = (const llvm::Function **)(v42 + 16 * v44);
      v46 = *v45;
      if (*v45 != a2)
      {
        v47 = 1;
        while (v46 != (const llvm::Function *)-4096)
        {
          v48 = v44 + v47++;
          v44 = v48 & (v43 - 1);
          v46 = *(const llvm::Function **)(v42 + 16 * v44);
          if (v46 == a2)
          {
            v45 = (const llvm::Function **)(v42 + 16 * v44);
            goto LABEL_93;
          }
        }
LABEL_92:
        v45 = (const llvm::Function **)(v42 + 16 * v43);
      }
LABEL_93:
      v49 = v45[1];
      if (*(_QWORD *)v49 == v40)
      {
        v50 = byte_1ED82CF97 >= 0 ? &qword_1ED82CF80 : (uint64_t *)qword_1ED82CF80;
        v34 = memcmp((char *)v49 + 16, v50, v40);
        if (!(_DWORD)v34)
        {
LABEL_111:
          v59 = llvm::dbgs((llvm *)v34);
          llvm::BranchProbabilityInfo::print((llvm::BranchProbabilityInfo *)a1, v59);
        }
      }
    }
  }
  v51 = v73;
  v73 = 0;
  if (v51)
    sub_1C4DC4E98((uint64_t)&v73, v51);
  v52 = v74;
  v74 = 0;
  if (v52)
    sub_1C4DC4DE4((uint64_t)&v74, v52);
}

void sub_1C4DC05B0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  __int128 v8;
  _QWORD v9[3];
  char *v10;
  char *v11;
  uint64_t v12;
  _OWORD v13[4];
  void *v14[2];
  _DWORD v15[48];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  _BYTE v20[64];
  void *v21;
  uint64_t v22;
  _QWORD v23[25];

  v23[24] = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  *(_QWORD *)&v17 = v20;
  *((_QWORD *)&v17 + 1) = v20;
  v18 = 8;
  v19 = 0;
  v21 = v23;
  v22 = 0x800000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v17, v3);
  v4 = *(_QWORD *)(v3 + 40);
  if (v4 == v3 + 40)
  {
    v5 = 0;
  }
  else
  {
    if (v4)
      v5 = v4 - 24;
    else
      v5 = 0;
    if (*(unsigned __int8 *)(v5 + 16) - 29 >= 0xB)
      v5 = 0;
  }
  v9[0] = v3;
  v9[1] = v5;
  v9[2] = 0;
  v6 = sub_1C4926708((uint64_t)&v21, (unint64_t)v9, 1);
  v7 = (char *)v21 + 24 * v22;
  v8 = *(_OWORD *)v6;
  *((_QWORD *)v7 + 2) = *(_QWORD *)(v6 + 16);
  *(_OWORD *)v7 = v8;
  LODWORD(v22) = v22 + 1;
  sub_1C4DB1EA4(&v17);
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v14[0] = 0;
  memset(v13, 0, sizeof(v13));
  v10 = (char *)v13 + 8;
  v11 = (char *)v13 + 8;
  v12 = 8;
  v14[1] = &v15[2];
  v15[1] = 8;
  sub_1C4DC4EEC((uint64_t)&v17, (uint64_t)&v10, a2);
  if (v14[1] != &v15[2])
    free(v14[1]);
  if (v11 != v10)
    free(v11);
  if (v21 != v23)
    free(v21);
  if (*((_QWORD *)&v17 + 1) != (_QWORD)v17)
    free(*((void **)&v17 + 1));
}

uint64_t llvm::BranchProbabilityInfoWrapperPass::runOnFunction(llvm::BranchProbabilityInfoWrapperPass *this, llvm::Function *a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  void **v10;
  unint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21[2];
  int v22;
  uint64_t v23[2];
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void *__src;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = (void **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::LoopInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::LoopInfoWrapperPass::ID);
  v7 = (void **)**((_QWORD **)this + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::TargetLibraryInfoWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::TargetLibraryInfoWrapperPass::ID);
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  llvm::TargetLibraryAnalysis::run(v9 + 32, (uint64_t)a2, (uint64_t)&v28);
  *(_QWORD *)(v9 + 240) = v28;
  if (*(_BYTE *)(v9 + 320))
  {
    if ((uint64_t *)(v9 + 240) == &v28)
    {
LABEL_14:
      *(_DWORD *)(v9 + 312) = v32;
      goto LABEL_15;
    }
    v10 = (void **)(v9 + 248);
    v11 = v30;
    v12 = *(unsigned int *)(v9 + 256);
    if (v12 >= v30)
    {
      if (v30)
        memmove(*v10, __src, 8 * v30);
      goto LABEL_13;
    }
    if (*(_DWORD *)(v9 + 260) < v30)
    {
      *(_DWORD *)(v9 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v9 + 248, v9 + 264, v11, 8);
    }
    else if ((_DWORD)v12)
    {
      memmove(*v10, __src, 8 * v12);
LABEL_11:
      if (v12 != v30)
        memcpy((char *)*v10 + 8 * v12, (char *)__src + 8 * v12, 8 * v30 - 8 * v12);
LABEL_13:
      *(_DWORD *)(v9 + 256) = v11;
      goto LABEL_14;
    }
    v12 = 0;
    goto LABEL_11;
  }
  *(_QWORD *)(v9 + 248) = v9 + 264;
  *(_QWORD *)(v9 + 256) = 0x600000000;
  if (v30)
    sub_1C49DA960(v9 + 248, (uint64_t)&__src);
  *(_DWORD *)(v9 + 312) = v32;
  *(_BYTE *)(v9 + 320) = 1;
LABEL_15:
  if (__src != &v31)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v23);
  sub_1C4D8B52C(v21);
  v13 = (void **)**((_QWORD **)this + 1);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::DominatorTreeWrapperPass::ID);
  v15 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v16 = (void **)**((_QWORD **)this + 1);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != &llvm::PostDominatorTreeWrapperPass::ID);
  v18 = v15 + 32;
  v19 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  llvm::BranchProbabilityInfo::calculate((uint64_t)this + 32, a2, v6 + 32, (uint64_t *)(v9 + 240), v18, v19 + 32);
  return 0;
}

uint64_t llvm::BranchProbabilityInfoWrapperPass::releaseMemory(llvm::BranchProbabilityInfoWrapperPass *this)
{
  char *v1;
  __n128 v2;

  v1 = (char *)this + 32;
  sub_1C4DBEFB8((_DWORD *)this + 14);
  return sub_1C4DC3D4C((uint64_t)v1, v2);
}

void llvm::BranchProbabilityAnalysis::run(const llvm::Function *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t i;
  uint64_t j;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 72) = 1;
  for (i = 80; i != 144; i += 16)
    *(_QWORD *)(a3 + i) = -4096;
  *(_QWORD *)(a3 + 144) = 1;
  for (j = 152; j != 248; j += 24)
    *(_OWORD *)(a3 + j) = xmmword_1C85F22B0;
  v8 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, (uint64_t)a1) + 8;
  v9 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetLibraryAnalysis::Key, (uint64_t)a1)+ 8);
  v10 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, (uint64_t)a1) + 8;
  v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::PostDominatorTreeAnalysis::Key, (uint64_t)a1) + 8;
  llvm::BranchProbabilityInfo::calculate(a3, a1, v8, v9, v10, v11);
}

uint64_t sub_1C4DC0BB0(uint64_t a1)
{
  return llvm::BranchProbabilityInfo::eraseBlock(*(_QWORD *)(a1 + 32), *(const llvm::BasicBlock **)(a1 + 24));
}

uint64_t sub_1C4DC0BBC(uint64_t a1)
{
  _QWORD *v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  int32x2_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD *v21;

  if ((*(_BYTE *)(a1 + 144) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 152), 8);
  if ((*(_BYTE *)(a1 + 72) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 80), 8);
  v2 = *(_QWORD **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
  {
    v21 = sub_1C4DC4D74(v2);
    MEMORY[0x1CAA32FC0](v21, 0x1020C400B2C5FE4);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  if (v3)
  {
    v6 = &v4[5 * v3];
    do
    {
      v7 = v4[3];
      if (v7 != -4096 && v7 != -8192 && v7 != 0)
      {
        v9 = v4[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v9 = v4[2];
        v10 = (unint64_t *)v4[2];
        if (v10)
        {
          *v10 = *v10 & 7 | v9;
        }
        else
        {
          v11 = v4[3];
          v12 = ***(int32x2_t ****)v11;
          v13 = (unint64_t)v12[303];
          if (v13 <= v9)
          {
            v14 = v12[305].u32[0];
            if (v13 + 16 * v14 > v9)
            {
              v15 = v14 - 1;
              LODWORD(v16) = v15 & ((v11 >> 4) ^ (v11 >> 9));
              v17 = (uint64_t *)(v13 + 16 * v16);
              v18 = *v17;
              if (v11 == *v17)
              {
LABEL_25:
                *v17 = -8192;
                v12[304] = vadd_s32(v12[304], (int32x2_t)0x1FFFFFFFFLL);
                v11 = v4[3];
              }
              else
              {
                v19 = 1;
                while (v18 != -4096)
                {
                  v20 = v16 + v19++;
                  v16 = v20 & v15;
                  v18 = *(_QWORD *)(v13 + 16 * v16);
                  if (v11 == v18)
                  {
                    v17 = (uint64_t *)(v13 + 16 * v16);
                    goto LABEL_25;
                  }
                }
              }
              *(_BYTE *)(v11 + 17) &= ~1u;
            }
          }
        }
      }
      v4 += 5;
    }
    while (v4 != v6);
    v4 = *(_QWORD **)a1;
  }
  MEMORY[0x1CAA32FB4](v4, 8);
  return a1;
}

uint64_t *sub_1C4DC0D58(uint64_t *result, uint64_t *a2, unsigned int a3, _DWORD *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  unsigned int v24;

  v5 = a2;
  v6 = result;
  v7 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (v8 = *((_DWORD *)a2 + 8), v8 > a3))
  {
    v9 = *a2;
    if ((uint64_t *)*result == a2)
    {
      v11 = a2;
    }
    else
    {
      if (v9)
      {
        v10 = (uint64_t *)*a2;
        do
        {
          v11 = v10;
          v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        v18 = a2;
        do
        {
          v11 = (uint64_t *)v18[2];
          v19 = *v11 == (_QWORD)v18;
          v18 = v11;
        }
        while (v19);
      }
      if (*((_DWORD *)v11 + 8) >= a3)
      {
        v20 = *v7;
        v13 = result + 1;
        v5 = result + 1;
        if (*v7)
        {
          while (1)
          {
            while (1)
            {
              v5 = v20;
              v21 = *((_DWORD *)v20 + 8);
              if (v21 <= a3)
                break;
              v20 = (uint64_t *)*v20;
              v13 = v5;
              if (!*v5)
                goto LABEL_21;
            }
            if (v21 >= a3)
              return result;
            v20 = (uint64_t *)v20[1];
            if (!v20)
              goto LABEL_36;
          }
        }
LABEL_21:
        v16 = operator new(0x68uLL);
        v16[8] = *a4;
        *((_QWORD *)v16 + 5) = v16 + 14;
        *((_QWORD *)v16 + 6) = 0xC00000000;
        if (a4[4])
          sub_1C614CA14((uint64_t)(v16 + 10), (uint64_t)(a4 + 2));
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = v5;
        *v13 = (uint64_t)v16;
        v17 = *(_QWORD *)*v6;
        if (v17)
        {
          *v6 = v17;
          v16 = (_DWORD *)*v13;
        }
        result = sub_1C4768E74((uint64_t *)v6[1], (uint64_t *)v16);
        ++v6[2];
        return result;
      }
    }
    if (v9)
      v15 = v11;
    else
      v15 = a2;
    if (v9)
      v13 = v11 + 1;
    else
      v13 = a2;
    if (*v13)
      return result;
    v5 = v15;
    goto LABEL_21;
  }
  if (v8 >= a3)
    return result;
  v13 = a2 + 1;
  v12 = (uint64_t *)a2[1];
  if (v12)
  {
    do
    {
      v13 = v12;
      v12 = (uint64_t *)*v12;
      v5 = v13;
      v14 = v13;
    }
    while (v12);
  }
  else
  {
    v14 = a2;
    do
    {
      v22 = v14;
      v14 = (uint64_t *)v14[2];
    }
    while ((uint64_t *)*v14 != v22);
  }
  if (v14 == (uint64_t *)v7)
    goto LABEL_21;
  if (*((_DWORD *)v14 + 8) > a3)
    goto LABEL_21;
  v23 = *v7;
  v13 = result + 1;
  v5 = result + 1;
  if (!*v7)
    goto LABEL_21;
  while (1)
  {
    while (1)
    {
      v5 = v23;
      v24 = *((_DWORD *)v23 + 8);
      if (v24 <= a3)
        break;
      v23 = (uint64_t *)*v23;
      v13 = v5;
      if (!*v5)
        goto LABEL_21;
    }
    if (v24 >= a3)
      return result;
    v23 = (uint64_t *)v23[1];
    if (!v23)
    {
LABEL_36:
      v13 = v5 + 1;
      goto LABEL_21;
    }
  }
}

void sub_1C4DC0F58(_QWORD *a1)
{
  _QWORD *v2;

  if (a1)
  {
    sub_1C4DC0F58(*a1);
    sub_1C4DC0F58(a1[1]);
    v2 = (_QWORD *)a1[5];
    if (v2 != a1 + 7)
      free(v2);
    operator delete(a1);
  }
}

void sub_1C4DC0FA8(int *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  char *v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;

  v46 = a2;
  v3 = *a1 + 1;
  *a1 = v3;
  v6 = *((_QWORD *)a1 + 1);
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = a1[6];
  if (v7)
  {
    v8 = v7 - 1;
    v9 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v10 = (_QWORD *)(v5 + 16 * v9);
    v11 = *v10;
    if (*v10 == a2)
      goto LABEL_16;
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (_QWORD *)(v5 + 16 * (v15 & v8));
      v11 = *v10;
      if (*v10 == a2)
        goto LABEL_16;
    }
    if (v12)
      v16 = v12;
    else
      v16 = v10;
  }
  else
  {
    v16 = 0;
  }
  v10 = sub_1C4DC1798(v4, (uint64_t)&v46, &v46, v16);
  *v10 = v46;
  *((_DWORD *)v10 + 2) = 0;
LABEL_16:
  *((_DWORD *)v10 + 2) = v3;
  v18 = (_QWORD *)*((_QWORD *)a1 + 5);
  v17 = *((_QWORD *)a1 + 6);
  if ((unint64_t)v18 < v17)
  {
    *v18 = v46;
    v26 = v18 + 1;
  }
  else
  {
    v19 = (_QWORD *)*((_QWORD *)a1 + 4);
    v20 = v18 - v19;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61)
      goto LABEL_60;
    v22 = v17 - (_QWORD)v19;
    if (v22 >> 2 > v21)
      v21 = v22 >> 2;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 61)
        goto LABEL_61;
      v24 = (char *)operator new(8 * v23);
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[8 * v20];
    *(_QWORD *)v25 = v46;
    v26 = v25 + 8;
    if (v18 != v19)
    {
      do
      {
        v27 = *--v18;
        *((_QWORD *)v25 - 1) = v27;
        v25 -= 8;
      }
      while (v18 != v19);
      v18 = (_QWORD *)*((_QWORD *)a1 + 4);
    }
    *((_QWORD *)a1 + 4) = v25;
    *((_QWORD *)a1 + 5) = v26;
    *((_QWORD *)a1 + 6) = &v24[8 * v23];
    if (v18)
      operator delete(v18);
  }
  *((_QWORD *)a1 + 5) = v26;
  v28 = v46;
  v29 = *(_QWORD *)(v46 + 40);
  if (v29 == v46 + 40 || v29 == 0)
  {
    if (v29 == v46 + 40)
    {
      v33 = 0;
      goto LABEL_39;
    }
    v31 = v29 - 24;
    if (!v29)
      v31 = 0;
    v32 = (unsigned __int8 *)(v31 + 16);
  }
  else
  {
    v31 = v29 - 24;
    v32 = (unsigned __int8 *)(v29 - 8);
  }
  if (*v32 - 29 >= 0xB)
    v33 = 0;
  else
    v33 = v31;
LABEL_39:
  v34 = *a1;
  v36 = (char *)*((_QWORD *)a1 + 11);
  v35 = *((_QWORD *)a1 + 12);
  if ((unint64_t)v36 < v35)
  {
    *(_QWORD *)v36 = v46;
    *((_QWORD *)v36 + 1) = v33;
    *((_QWORD *)v36 + 2) = 0;
    v44 = v36 + 32;
    *((_DWORD *)v36 + 6) = v34;
    goto LABEL_55;
  }
  v37 = (_BYTE *)*((_QWORD *)a1 + 10);
  v38 = (v36 - v37) >> 5;
  v39 = v38 + 1;
  if ((unint64_t)(v38 + 1) >> 59)
LABEL_60:
    abort();
  v40 = v35 - (_QWORD)v37;
  if (v40 >> 4 > v39)
    v39 = v40 >> 4;
  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0)
    v41 = 0x7FFFFFFFFFFFFFFLL;
  else
    v41 = v39;
  if (!v41)
  {
    v42 = 0;
    goto LABEL_49;
  }
  if (v41 >> 59)
LABEL_61:
    sub_1C4764EE4();
  v42 = (char *)operator new(32 * v41);
LABEL_49:
  v43 = &v42[32 * v38];
  *(_QWORD *)v43 = v28;
  *((_QWORD *)v43 + 1) = v33;
  *((_QWORD *)v43 + 2) = 0;
  *((_DWORD *)v43 + 6) = v34;
  v44 = v43 + 32;
  if (v36 != v37)
  {
    do
    {
      v45 = *((_OWORD *)v36 - 2);
      *(_OWORD *)(v43 - 20) = *(_OWORD *)(v36 - 20);
      *((_OWORD *)v43 - 2) = v45;
      v43 -= 32;
      v36 -= 32;
    }
    while (v36 != v37);
    v36 = (char *)*((_QWORD *)a1 + 10);
  }
  *((_QWORD *)a1 + 10) = v43;
  *((_QWORD *)a1 + 11) = v44;
  *((_QWORD *)a1 + 12) = &v42[32 * v41];
  if (v36)
    operator delete(v36);
LABEL_55:
  *((_QWORD *)a1 + 11) = v44;
}

void sub_1C4DC127C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  int v58;
  BOOL v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;

  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
  v1 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 80) == v1)
    return;
  v3 = a1 + 8;
LABEL_3:
  while (2)
  {
    v4 = *(_QWORD *)(v1 - 32);
    v7 = *(_QWORD *)(v4 + 40);
    v5 = v4 + 40;
    v6 = v7;
    v8 = v7 - 24;
    if (!v7)
      v8 = 0;
    while (1)
    {
      if (v6 == v5)
      {
LABEL_25:
        v11 = 0;
      }
      else
      {
        v9 = *(unsigned __int8 *)(v8 + 16);
        v10 = v9 - 29;
        if (v9 != 30)
        {
          v11 = 0;
          switch(v10)
          {
            case 0:
            case 5:
            case 6:
              goto LABEL_10;
            case 1:
              __break(1u);
              break;
            case 2:
              v11 = (*(_DWORD *)(v8 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_10;
            case 3:
            case 9:
              v11 = (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_10;
            case 4:
              v11 = 2;
              goto LABEL_10;
            case 7:
              v11 = *(_WORD *)(v8 + 18) & 1;
              goto LABEL_10;
            case 8:
              v11 = 1;
              goto LABEL_10;
            case 10:
              v11 = *(_DWORD *)(v8 + 80) + 1;
              goto LABEL_10;
            default:
              goto LABEL_25;
          }
          return;
        }
        v11 = (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
      }
LABEL_10:
      if (*(_DWORD *)(v1 - 16) == v11)
        break;
      v12 = *(_QWORD *)(v1 - 24);
      v13 = *(_QWORD *)(v1 - 16);
      *(_DWORD *)(v1 - 16) = v13 + 1;
      v14 = *(unsigned __int8 *)(v12 + 16);
      if (v14 != 30)
        __asm { BR              X16 }
      v15 = *(_QWORD *)(v12 - 32 * v13 - 32);
      v16 = *(_QWORD *)(a1 + 8);
      v17 = *(unsigned int *)(a1 + 24);
      if ((_DWORD)v17)
      {
        LODWORD(v18) = ((v15 >> 4) ^ (v15 >> 9)) & (v17 - 1);
        v19 = (uint64_t *)(v16 + 16 * v18);
        v20 = *v19;
        if (v15 == *v19)
          goto LABEL_19;
        v21 = 1;
        while (v20 != -4096)
        {
          v22 = v18 + v21++;
          v18 = v22 & (v17 - 1);
          v20 = *(_QWORD *)(v16 + 16 * v18);
          if (v15 == v20)
          {
            v19 = (uint64_t *)(v16 + 16 * v18);
            goto LABEL_19;
          }
        }
      }
      v19 = (uint64_t *)(v16 + 16 * v17);
LABEL_19:
      if (v19 == (uint64_t *)(v16 + 16 * v17))
      {
        sub_1C4DC0FA8((int *)a1, v15);
        v1 = *(_QWORD *)(a1 + 88);
        goto LABEL_3;
      }
      v23 = *((_DWORD *)v19 + 2);
      if (*(_DWORD *)(v1 - 8) > v23)
        *(_DWORD *)(v1 - 8) = v23;
    }
    v62 = 0;
    v24 = *(_QWORD *)(v1 - 32);
    v62 = v24;
    v25 = *(_DWORD *)(v1 - 8);
    *(_QWORD *)(a1 + 88) = v1 - 32;
    if (*(_QWORD *)(a1 + 80) != v1 - 32 && *(_DWORD *)(v1 - 40) > v25)
      *(_DWORD *)(v1 - 40) = v25;
    v26 = *(_DWORD *)(a1 + 24);
    if (!v26)
    {
      v36 = 0;
      goto LABEL_49;
    }
    v27 = *(_QWORD *)(a1 + 8);
    v28 = v26 - 1;
    v29 = v28 & ((v24 >> 4) ^ (v24 >> 9));
    v30 = (_QWORD *)(v27 + 16 * v29);
    v31 = *v30;
    if (v24 != *v30)
    {
      v32 = 0;
      v33 = 1;
      while (v31 != -4096)
      {
        if (v32)
          v34 = 0;
        else
          v34 = v31 == -8192;
        if (v34)
          v32 = v30;
        v35 = v29 + v33++;
        v29 = v35 & v28;
        v30 = (_QWORD *)(v27 + 16 * v29);
        v31 = *v30;
        if (v24 == *v30)
          goto LABEL_50;
      }
      if (v32)
        v36 = v32;
      else
        v36 = v30;
LABEL_49:
      v30 = sub_1C4DC1798(v3, (uint64_t)&v62, &v62, v36);
      *v30 = v62;
      *((_DWORD *)v30 + 2) = 0;
    }
LABEL_50:
    if (v25 == *((_DWORD *)v30 + 2))
    {
      v37 = *(_QWORD **)(a1 + 64);
      while (1)
      {
        v38 = *(_QWORD *)(a1 + 40);
        v39 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v37 >= v39)
        {
          v41 = *(_QWORD **)(a1 + 56);
          v42 = v37 - v41;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61)
            abort();
          v44 = v39 - (_QWORD)v41;
          if (v44 >> 2 > v43)
            v43 = v44 >> 2;
          v45 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v43;
          if (v45)
          {
            if (v45 >> 61)
              sub_1C4764EE4();
            v46 = (char *)operator new(8 * v45);
          }
          else
          {
            v46 = 0;
          }
          v47 = &v46[8 * v42];
          *(_QWORD *)v47 = *(_QWORD *)(v38 - 8);
          v40 = v47 + 8;
          if (v37 != v41)
          {
            do
            {
              v48 = *--v37;
              *((_QWORD *)v47 - 1) = v48;
              v47 -= 8;
            }
            while (v37 != v41);
            v37 = *(_QWORD **)(a1 + 56);
          }
          *(_QWORD *)(a1 + 56) = v47;
          *(_QWORD *)(a1 + 64) = v40;
          *(_QWORD *)(a1 + 72) = &v46[8 * v45];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v37 = *(_QWORD *)(v38 - 8);
          v40 = v37 + 1;
        }
        *(_QWORD *)(a1 + 64) = v40;
        *(_QWORD *)(a1 + 40) -= 8;
        v49 = v40 - 1;
        v50 = *(_DWORD *)(a1 + 24);
        if (!v50)
          break;
        v51 = *(_QWORD *)(a1 + 8);
        v52 = *v49;
        v53 = v50 - 1;
        v54 = ((*v49 >> 4) ^ (*v49 >> 9)) & v53;
        v55 = (_QWORD *)(v51 + 16 * v54);
        v56 = *v55;
        if (*v49 != *v55)
        {
          v57 = 0;
          v58 = 1;
          while (v56 != -4096)
          {
            if (v57)
              v59 = 0;
            else
              v59 = v56 == -8192;
            if (v59)
              v57 = v55;
            v60 = v54 + v58++;
            v54 = v60 & v53;
            v55 = (_QWORD *)(v51 + 16 * v54);
            v56 = *v55;
            if (v52 == *v55)
              goto LABEL_87;
          }
          if (v57)
            v61 = v57;
          else
            v61 = v55;
          goto LABEL_86;
        }
LABEL_87:
        *((_DWORD *)v55 + 2) = -1;
        v37 = v40;
        if (v52 == v62)
          return;
      }
      v61 = 0;
LABEL_86:
      v55 = sub_1C4DC1798(v3, (uint64_t)(v40 - 1), v40 - 1, v61);
      *v55 = *v49;
      *((_DWORD *)v55 + 2) = 0;
      v40 = *(_QWORD **)(a1 + 64);
      v52 = *(v40 - 1);
      goto LABEL_87;
    }
    v1 = *(_QWORD *)(a1 + 88);
    if (*(_QWORD *)(a1 + 80) != v1)
      continue;
    break;
  }
}

_QWORD *sub_1C4DC1798(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C49D7AB8(a1, v7);
      v17 = 0;
      sub_1C4926528(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C49D7AB8(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C4DC18C8(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 16 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 16 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_14;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_14:
  *a4 = v6;
  return result;
}

_QWORD *sub_1C4DC1944(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v14 = *((_DWORD *)a1 + 4) - 1;
          v15 = v14 & ((v13 >> 4) ^ (v13 >> 9));
          v16 = *a1 + 16 * v15;
          v17 = *(_QWORD *)v16;
          if (v13 != *(_QWORD *)v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != -4096)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == -8192;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = *a1 + 16 * (v21 & v14);
              v17 = *(_QWORD *)v16;
              if (v13 == *(_QWORD *)v16)
                goto LABEL_23;
            }
            if (v18)
              v16 = v18;
          }
LABEL_23:
          *(_QWORD *)v16 = v13;
          *(_DWORD *)(v16 + 8) = *((_DWORD *)v12 + 2);
          ++*((_DWORD *)a1 + 2);
        }
        v12 += 2;
      }
      while (v12 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v22 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v22)
  {
    v23 = 16 * v22;
    do
    {
      *result = -4096;
      result += 2;
      v23 -= 16;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_1C4DC1ABC(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      v12 = 0;
      result = 0;
      goto LABEL_12;
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v6 = ~((unint64_t)(37 * a3) << 32)
     + (37 * a3)
     + ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
  v10 = v5 - 1;
  v11 = (v5 - 1) & v9;
  v12 = (uint64_t *)(v4 + 24 * v11);
  v13 = *v12;
  v14 = *((_DWORD *)v12 + 2);
  if (*v12 == a2 && v14 == a3)
  {
    result = 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v13 != -4096 || v14 != 0x7FFFFFFF)
    {
      if (v16)
        v19 = 0;
      else
        v19 = v14 == 0x80000000;
      if (v19 && v13 == -8192)
        v16 = v12;
      v21 = v11 + v17++;
      v11 = v21 & v10;
      v12 = (uint64_t *)(v4 + 24 * (v21 & v10));
      v13 = *v12;
      v14 = *((_DWORD *)v12 + 2);
      if (*v12 == a2 && v14 == a3)
        goto LABEL_12;
    }
    result = 0;
    if (v16)
      v12 = v16;
  }
LABEL_12:
  *a4 = v12;
  return result;
}

int *sub_1C4DC1BD4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4DC1D4C((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4DC1D4C((int *)a1, v14, v9);
}

int *sub_1C4DC1D4C(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 18;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 4;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = (uint64_t *)&v9[4 * v11];
      v13 = *v12;
      if (v7 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)&v9[4 * (v17 & v10)];
          v13 = *v12;
          if (v7 == *v12)
            goto LABEL_14;
        }
        if (v14)
          v12 = v14;
      }
LABEL_14:
      *v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

unint64_t sub_1C4DC1E54(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 24 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 24);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 24);
    }
  }
  return v2;
}

void sub_1C4DC1ECC(char **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _OWORD v8[4];
  void *v9[2];
  _OWORD v10[12];
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[25];

  v15[24] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  sub_1C4DC3AB4((uint64_t)&v12, v4);
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v9[0] = 0;
  memset(v8, 0, sizeof(v8));
  v5 = (char *)v8 + 8;
  v6 = (char *)v8 + 8;
  v7 = 8;
  v9[1] = (char *)v10 + 8;
  DWORD1(v10[0]) = 8;
  sub_1C4DC2010((uint64_t)&v12, (uint64_t)&v5, a1);
  if (v9[1] != (char *)v10 + 8)
    free(v9[1]);
  if (v6 != v5)
    free(v6);
  if (v14 != v15)
    free(v14);
  if (v13 != v12)
    free(v13);
}

uint64_t sub_1C4DC2010(uint64_t a1, uint64_t a2, char **a3)
{
  _BYTE *v6;
  const void *v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _BYTE *v13;
  const void *v14;
  const void *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  _BYTE v29[64];
  void *v30[2];
  _BYTE v31[192];
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  _BYTE v37[64];
  void *v38[2];
  _BYTE v39[192];
  void *v40;
  void *v41;
  void *v42;
  _QWORD v43[26];

  v43[25] = *MEMORY[0x1E0C80C00];
  v6 = v37;
  v32 = v37;
  v7 = *(const void **)(a1 + 8);
  if (v7 == *(const void **)a1)
  {
    v33 = v37;
    v8 = v7;
  }
  else
  {
    v22 = *(unsigned int *)(a1 + 16);
    v6 = malloc_type_malloc(8 * v22, 0x4065EBACuLL);
    if (!v6)
    {
      if ((_DWORD)v22)
        goto LABEL_41;
      v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6)
        goto LABEL_41;
    }
    v33 = v6;
    v8 = *(const void **)a1;
    v7 = *(const void **)(a1 + 8);
  }
  v10 = *(_DWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 20);
  v34 = v10;
  if (v7 == v8)
    v11 = v9;
  else
    v11 = v10;
  if (v11)
  {
    memmove(v6, v7, 8 * v11);
    v9 = *(_DWORD *)(a1 + 20);
  }
  v12 = *(_DWORD *)(a1 + 24);
  v35 = v9;
  v36 = v12;
  v38[0] = v39;
  v38[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C4DB22B8((uint64_t)v38, (uint64_t *)(a1 + 96));
  v13 = v29;
  v24 = v29;
  v14 = *(const void **)(a2 + 8);
  if (v14 == *(const void **)a2)
  {
    v25 = v29;
    v15 = v14;
    goto LABEL_12;
  }
  v23 = *(unsigned int *)(a2 + 16);
  v13 = malloc_type_malloc(8 * v23, 0x4065EBACuLL);
  if (!v13 && ((_DWORD)v23 || (v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_41:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v25 = v13;
  v15 = *(const void **)a2;
  v14 = *(const void **)(a2 + 8);
LABEL_12:
  v17 = *(_DWORD *)(a2 + 16);
  v16 = *(_DWORD *)(a2 + 20);
  v26 = v17;
  if (v14 == v15)
    v18 = v16;
  else
    v18 = v17;
  if (v18)
  {
    memmove(v13, v14, 8 * v18);
    v16 = *(_DWORD *)(a2 + 20);
  }
  v19 = *(_DWORD *)(a2 + 24);
  v27 = v16;
  v28 = v19;
  v30[0] = v31;
  v30[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C4DB22B8((uint64_t)v30, (uint64_t *)(a2 + 96));
  sub_1C4DC2278((uint64_t)&v32, (uint64_t)&v24, a3, (uint64_t)&v40);
  v20 = v43[24];
  if (v42 != v43)
    free(v42);
  if (v41 != v40)
    free(v41);
  if (v30[0] != v31)
    free(v30[0]);
  if (v25 != v24)
    free(v25);
  if (v38[0] != v39)
    free(v38[0]);
  if (v33 != v32)
    free(v33);
  return v20;
}

void sub_1C4DC2278(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  const void *v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  _BYTE v19[64];
  void *v20[2];
  _BYTE v21[192];
  _BYTE *v22;
  _BYTE *v23;
  int v24;
  int v25;
  int v26;
  _BYTE v27[64];
  void *v28[2];
  _QWORD v29[25];

  v29[24] = *MEMORY[0x1E0C80C00];
  v22 = v27;
  v9 = *(const void **)a1;
  v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    v23 = v27;
    v10 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v10)
      memmove(v27, v8, 8 * v10);
  }
  else
  {
    v23 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  v24 = *(_DWORD *)(a1 + 16);
  v25 = v10;
  v26 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v28[0] = v29;
  v28[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C4DB2150((uint64_t)v28, (uint64_t *)(a1 + 96));
  v14 = v19;
  v12 = *(const void **)a2;
  v11 = *(const void **)(a2 + 8);
  if (v11 == *(const void **)a2)
  {
    v15 = v19;
    v13 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v13)
      memmove(v19, v11, 8 * v13);
  }
  else
  {
    v15 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v12;
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  v16 = *(_DWORD *)(a2 + 16);
  v17 = v13;
  v18 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v20[0] = v21;
  v20[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C4DB2150((uint64_t)v20, (uint64_t *)(a2 + 96));
  sub_1C4DC2444((uint64_t)&v22, (uint64_t)&v14, a3, a4);
  if (v20[0] != v21)
    free(v20[0]);
  if (v15 != v14)
    free(v15);
  if (v28[0] != v29)
    free(v28[0]);
  if (v23 != v22)
    free(v23);
}

void sub_1C4DC2444(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  const void *v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  _BYTE v19[64];
  void *v20[2];
  _BYTE v21[192];
  _BYTE *v22;
  _BYTE *v23;
  int v24;
  int v25;
  int v26;
  _BYTE v27[64];
  void *v28[2];
  _QWORD v29[25];

  v29[24] = *MEMORY[0x1E0C80C00];
  v22 = v27;
  v9 = *(const void **)a1;
  v8 = *(const void **)(a1 + 8);
  if (v8 == *(const void **)a1)
  {
    v23 = v27;
    v10 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v10)
      memmove(v27, v8, 8 * v10);
  }
  else
  {
    v23 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    LODWORD(v10) = *(_DWORD *)(a1 + 20);
  }
  v24 = *(_DWORD *)(a1 + 16);
  v25 = v10;
  v26 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v28[0] = v29;
  v28[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C4DB2150((uint64_t)v28, (uint64_t *)(a1 + 96));
  v14 = v19;
  v12 = *(const void **)a2;
  v11 = *(const void **)(a2 + 8);
  if (v11 == *(const void **)a2)
  {
    v15 = v19;
    v13 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v13)
      memmove(v19, v11, 8 * v13);
  }
  else
  {
    v15 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v12;
    LODWORD(v13) = *(_DWORD *)(a2 + 20);
  }
  v16 = *(_DWORD *)(a2 + 16);
  v17 = v13;
  v18 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v20[0] = v21;
  v20[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C4DB2150((uint64_t)v20, (uint64_t *)(a2 + 96));
  sub_1C4DC2610((uint64_t)&v22, (uint64_t)&v14, a3, a4);
  if (v20[0] != v21)
    free(v20[0]);
  if (v15 != v14)
    free(v15);
  if (v28[0] != v29)
    free(v28[0]);
  if (v23 != v22)
    free(v23);
}

void sub_1C4DC2610(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE *v8;
  const void *v9;
  const void *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  int v18;
  int v19;
  const void *v20;
  const void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  int v28;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  int v33;
  int v34;
  int v35;
  _BYTE v36[64];
  void *v37[2];
  _BYTE v38[192];
  _BYTE *v39;
  _BYTE *v40;
  int v41;
  int v42;
  int v43;
  _BYTE v44[64];
  void *v45[2];
  _BYTE v46[192];
  void *v47;
  void *v48;
  uint64_t v49;
  int v50;
  void *v51;
  int v52;
  uint64_t v53;
  _BYTE *v54;
  void *v55;
  int v56;
  int v57;
  int v58;
  _BYTE v59[64];
  void *v60[2];
  _BYTE v61[192];
  _BYTE *v62;
  void *v63;
  int v64;
  int v65;
  int v66;
  _BYTE v67[64];
  void *v68[2];
  _BYTE v69[192];
  void *v70;
  void *v71;
  uint64_t v72;
  int v73;
  void *v74;
  int v75;
  _QWORD v76[25];
  _BYTE *v77;
  void *v78;
  int v79;
  int v80;
  int v81;
  _BYTE v82[64];
  void *v83[2];
  _BYTE v84[192];
  _BYTE *v85;
  void *v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  _BYTE v90[64];
  void *v91[2];
  _BYTE v92[192];
  void *v93;
  void *__src;
  uint64_t v95;
  int v96;
  void *v97;
  int v98;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  int v103;
  void *v104;
  int v105;
  _QWORD v106[25];

  v106[24] = *MEMORY[0x1E0C80C00];
  v8 = v90;
  v85 = v90;
  v9 = *(const void **)(a1 + 8);
  if (v9 == *(const void **)a1)
  {
    v86 = v90;
    v10 = v9;
  }
  else
  {
    v30 = *(unsigned int *)(a1 + 16);
    v8 = malloc_type_malloc(8 * v30, 0x4065EBACuLL);
    if (!v8 && ((_DWORD)v30 || (v8 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v86 = v8;
    v10 = *(const void **)a1;
    v9 = *(const void **)(a1 + 8);
  }
  v12 = *(_DWORD *)(a1 + 16);
  v11 = *(_DWORD *)(a1 + 20);
  v87 = v12;
  if (v9 == v10)
    v13 = v11;
  else
    v13 = v12;
  if (v13)
  {
    memmove(v8, v9, 8 * v13);
    v11 = *(_DWORD *)(a1 + 20);
  }
  v14 = *(_DWORD *)(a1 + 24);
  v88 = v11;
  v89 = v14;
  v91[0] = v92;
  v91[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C4DB22B8((uint64_t)v91, (uint64_t *)(a1 + 96));
  v77 = v82;
  v16 = *(const void **)a2;
  v15 = *(const void **)(a2 + 8);
  if (v15 == *(const void **)a2)
  {
    v78 = v82;
    v17 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v17)
      memmove(v82, v15, 8 * v17);
  }
  else
  {
    v78 = *(void **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v16;
    LODWORD(v17) = *(_DWORD *)(a2 + 20);
  }
  v79 = *(_DWORD *)(a2 + 16);
  v80 = v17;
  v81 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v83[0] = v84;
  v83[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C4DB2150((uint64_t)v83, (uint64_t *)(a2 + 96));
  sub_1C4DC2C10((uint64_t)&v85, (uint64_t)&v77, (uint64_t)&v93);
  if (v83[0] != v84)
    free(v83[0]);
  if (v78 != v77)
    free(v78);
  if (v91[0] != v92)
    free(v91[0]);
  if (v86 != v85)
    free(v86);
  v62 = v67;
  if (__src == v93)
  {
    v63 = v67;
    v18 = HIDWORD(v95);
    if (HIDWORD(v95))
      memmove(v67, __src, 8 * HIDWORD(v95));
  }
  else
  {
    v63 = __src;
    __src = v93;
    v18 = HIDWORD(v95);
  }
  v64 = v95;
  v65 = v18;
  v66 = v96;
  v95 = 8;
  v96 = 0;
  v68[0] = v69;
  v68[1] = (void *)0x800000000;
  if (v98)
    sub_1C4DB2150((uint64_t)v68, (uint64_t *)&v97);
  v54 = v59;
  if (v101 == v100)
  {
    v55 = v59;
    v19 = HIDWORD(v102);
    if (HIDWORD(v102))
      memmove(v59, v101, 8 * HIDWORD(v102));
  }
  else
  {
    v55 = v101;
    v101 = v100;
    v19 = HIDWORD(v102);
  }
  v56 = v102;
  v57 = v19;
  v58 = v103;
  v102 = 8;
  v103 = 0;
  v60[0] = v61;
  v60[1] = (void *)0x800000000;
  if (v105)
    sub_1C4DB2150((uint64_t)v60, (uint64_t *)&v104);
  sub_1C4DC31F4((uint64_t *)&v62, (uint64_t)&v54, a3, (uint64_t)&v70);
  if (v60[0] != v61)
    free(v60[0]);
  if (v55 != v54)
    free(v55);
  if (v68[0] != v69)
    free(v68[0]);
  if (v63 != v62)
    free(v63);
  v39 = v44;
  v21 = *(const void **)a1;
  v20 = *(const void **)(a1 + 8);
  if (v20 == *(const void **)a1)
  {
    v40 = v44;
    v22 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v22)
      memmove(v44, v20, 8 * v22);
  }
  else
  {
    v40 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v21;
    LODWORD(v22) = *(_DWORD *)(a1 + 20);
  }
  v41 = *(_DWORD *)(a1 + 16);
  v42 = v22;
  v43 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v45[0] = v46;
  v45[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C4DB2150((uint64_t)v45, (uint64_t *)(a1 + 96));
  v31 = v36;
  if (v71 == v70)
  {
    v32 = v36;
    v23 = HIDWORD(v72);
    if (HIDWORD(v72))
      memmove(v36, v71, 8 * HIDWORD(v72));
  }
  else
  {
    v32 = v71;
    v71 = v70;
    v23 = HIDWORD(v72);
  }
  v33 = v72;
  v34 = v23;
  v35 = v73;
  v72 = 8;
  v73 = 0;
  v37[0] = v38;
  v37[1] = (void *)0x800000000;
  if (v75)
    sub_1C4DB2150((uint64_t)v37, (uint64_t *)&v74);
  sub_1C4DC3408((uint64_t)&v39, (uint64_t)&v31, &v47);
  v24 = v76[24];
  v25 = (void *)(a4 + 32);
  *(_QWORD *)a4 = a4 + 32;
  v26 = v48;
  v27 = v47;
  if (v48 == v47)
  {
    *(_QWORD *)(a4 + 8) = v25;
    v28 = HIDWORD(v49);
    if (HIDWORD(v49))
      memmove(v25, v26, 8 * HIDWORD(v49));
  }
  else
  {
    *(_QWORD *)(a4 + 8) = v48;
    v48 = v27;
    v28 = HIDWORD(v49);
  }
  *(_QWORD *)(a4 + 96) = a4 + 112;
  v29 = v50;
  *(_DWORD *)(a4 + 16) = v49;
  *(_DWORD *)(a4 + 20) = v28;
  *(_DWORD *)(a4 + 24) = v29;
  v49 = 8;
  v50 = 0;
  *(_QWORD *)(a4 + 104) = 0x800000000;
  if (v52)
    sub_1C4DB2150(a4 + 96, (uint64_t *)&v51);
  *(_QWORD *)(a4 + 304) = v24;
  if (v51 != &v53)
    free(v51);
  if (v48 != v47)
    free(v48);
  if (v37[0] != v38)
    free(v37[0]);
  if (v32 != v31)
    free(v32);
  if (v45[0] != v46)
    free(v45[0]);
  if (v40 != v39)
    free(v40);
  if (v74 != v76)
    free(v74);
  if (v71 != v70)
    free(v71);
  if (v104 != v106)
    free(v104);
  if (v101 != v100)
    free(v101);
  if (v97 != &v99)
    free(v97);
  if (__src != v93)
    free(__src);
}

void sub_1C4DC2C10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  void *v23;
  void *v24;
  int v25;
  int v26;
  void *v27;
  const void *v28;
  _BYTE *v29;
  int v30;
  int v31;
  _BYTE *v32;
  unsigned int v33;
  int v34;
  _BYTE v35[64];
  void *v36;
  uint64_t v37;
  _BYTE v38[192];
  _BYTE *v39;
  _BYTE *v40;
  unint64_t v41;
  int v42;
  _BYTE v43[64];
  void *v44;
  uint64_t v45;
  _BYTE v46[192];
  _BYTE *v47;
  void *v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  _BYTE v52[64];
  void *v53;
  uint64_t v54;
  _BYTE v55[192];
  _BYTE *v56;
  void *v57;
  unint64_t v58;
  int v59;
  _BYTE v60[64];
  void *v61;
  uint64_t v62;
  _BYTE v63[192];
  _BYTE *v64;
  void *__src;
  uint64_t v66;
  int v67;
  _BYTE v68[64];
  void *v69;
  uint64_t v70;
  _QWORD v71[25];

  v71[24] = *MEMORY[0x1E0C80C00];
  v6 = v52;
  v47 = v52;
  v8 = *(_BYTE **)a1;
  v7 = *(_BYTE **)(a1 + 8);
  if (v7 == *(_BYTE **)a1)
  {
    v48 = v52;
    v9 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v9)
      memmove(v52, v7, 8 * v9);
    v7 = v52;
  }
  else
  {
    v48 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    LODWORD(v9) = *(_DWORD *)(a1 + 20);
  }
  v49 = *(_DWORD *)(a1 + 16);
  v50 = v9;
  v51 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v53 = v55;
  v54 = 0x800000000;
  if (*(_DWORD *)(a1 + 104))
  {
    sub_1C4DB2150((uint64_t)&v53, (uint64_t *)(a1 + 96));
    v7 = v48;
    v6 = v47;
  }
  v10 = v68;
  v64 = v68;
  if (v7 == v6)
  {
    __src = v68;
    v11 = v6;
  }
  else
  {
    v10 = malloc_type_malloc(8 * v49, 0x4065EBACuLL);
    if (!v10)
    {
      if (v49)
        goto LABEL_91;
      v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v10)
        goto LABEL_91;
    }
    __src = v10;
    v11 = v47;
    v6 = v48;
  }
  v12 = v50;
  LODWORD(v66) = v49;
  if (v6 == v11)
    v13 = v50;
  else
    v13 = v49;
  if (v13)
  {
    memmove(v10, v6, 8 * v13);
    v12 = v50;
  }
  HIDWORD(v66) = v12;
  v67 = v51;
  v69 = v71;
  v70 = 0x800000000;
  if ((_DWORD)v54)
    sub_1C4DB22B8((uint64_t)&v69, (uint64_t *)&v53);
  v56 = v60;
  if (__src == v64)
  {
    v57 = v60;
    v14 = HIDWORD(v66);
    if (HIDWORD(v66))
      memmove(v60, __src, 8 * HIDWORD(v66));
  }
  else
  {
    v57 = __src;
    __src = v64;
    v14 = HIDWORD(v66);
  }
  v58 = __PAIR64__(v14, v66);
  v59 = v67;
  v66 = 8;
  v67 = 0;
  v61 = v63;
  v62 = 0x800000000;
  if ((_DWORD)v70)
    sub_1C4DB2150((uint64_t)&v61, (uint64_t *)&v69);
  if (v69 != v71)
    free(v69);
  if (__src != v64)
    free(__src);
  v15 = v35;
  v16 = *(_BYTE **)(a2 + 8);
  if (v16 == *(_BYTE **)a2)
  {
    v32 = v35;
    v17 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v17)
      memmove(v35, v16, 8 * v17);
    v16 = v35;
  }
  else
  {
    v32 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    LODWORD(v17) = *(_DWORD *)(a2 + 20);
  }
  v33 = *(_DWORD *)(a2 + 16);
  v34 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v36 = v38;
  v37 = 0x800000000;
  if (*(_DWORD *)(a2 + 104))
  {
    sub_1C4DB2150((uint64_t)&v36, (uint64_t *)(a2 + 96));
    v15 = v35;
    v16 = v32;
  }
  v18 = v68;
  v64 = v68;
  if (v16 == v35)
  {
    __src = v68;
    goto LABEL_33;
  }
  v18 = malloc_type_malloc(8 * v33, 0x4065EBACuLL);
  if (!v18 && (v33 || (v18 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_91:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  __src = v18;
  v15 = v32;
LABEL_33:
  v19 = v17;
  LODWORD(v66) = v33;
  if (v15 == v35)
    v20 = v17;
  else
    v20 = v33;
  if (v20)
  {
    memmove(v18, v15, 8 * v20);
    v19 = v17;
  }
  HIDWORD(v66) = v19;
  v67 = v34;
  v69 = v71;
  v70 = 0x800000000;
  if ((_DWORD)v37)
    sub_1C4DB22B8((uint64_t)&v69, (uint64_t *)&v36);
  v39 = v43;
  if (__src == v64)
  {
    v40 = v43;
    v21 = HIDWORD(v66);
    if (HIDWORD(v66))
      memmove(v43, __src, 8 * HIDWORD(v66));
  }
  else
  {
    v40 = __src;
    __src = v64;
    v21 = HIDWORD(v66);
  }
  v41 = __PAIR64__(v21, v66);
  v42 = v67;
  v66 = 8;
  v67 = 0;
  v44 = v46;
  v45 = 0x800000000;
  if ((_DWORD)v70)
    sub_1C4DB2150((uint64_t)&v44, (uint64_t *)&v69);
  if (v69 != v71)
    free(v69);
  if (__src != v64)
    free(__src);
  v22 = (void *)(a3 + 32);
  *(_QWORD *)a3 = a3 + 32;
  v23 = v57;
  v24 = v56;
  if (v57 == v56)
  {
    *(_QWORD *)(a3 + 8) = v22;
    v25 = HIDWORD(v58);
    if (HIDWORD(v58))
      memmove(v22, v23, 8 * HIDWORD(v58));
  }
  else
  {
    *(_QWORD *)(a3 + 8) = v57;
    v57 = v24;
    v25 = HIDWORD(v58);
  }
  *(_QWORD *)(a3 + 96) = a3 + 112;
  v26 = v59;
  *(_DWORD *)(a3 + 16) = v58;
  *(_DWORD *)(a3 + 20) = v25;
  *(_DWORD *)(a3 + 24) = v26;
  v58 = 8;
  v59 = 0;
  *(_QWORD *)(a3 + 104) = 0x800000000;
  if ((_DWORD)v62)
    sub_1C4DB2150(a3 + 96, (uint64_t *)&v61);
  v27 = (void *)(a3 + 336);
  *(_QWORD *)(a3 + 304) = a3 + 336;
  v29 = v39;
  v28 = v40;
  if (v40 == v39)
  {
    *(_QWORD *)(a3 + 312) = v27;
    v30 = HIDWORD(v41);
    if (HIDWORD(v41))
      memmove(v27, v28, 8 * HIDWORD(v41));
  }
  else
  {
    *(_QWORD *)(a3 + 312) = v40;
    v40 = v29;
    v30 = HIDWORD(v41);
  }
  v31 = v42;
  *(_DWORD *)(a3 + 320) = v41;
  *(_DWORD *)(a3 + 324) = v30;
  *(_DWORD *)(a3 + 328) = v31;
  v41 = 8;
  v42 = 0;
  *(_QWORD *)(a3 + 400) = a3 + 416;
  *(_QWORD *)(a3 + 408) = 0x800000000;
  if ((_DWORD)v45)
    sub_1C4DB2150(a3 + 400, (uint64_t *)&v44);
  if (v44 != v46)
    free(v44);
  if (v40 != v39)
    free(v40);
  if (v36 != v38)
    free(v36);
  if (v32 != v35)
    free(v32);
  if (v61 != v63)
    free(v61);
  if (v57 != v56)
    free(v57);
  if (v53 != v55)
    free(v53);
  if (v48 != v47)
    free(v48);
}

uint64_t sub_1C4DC31F4@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, char **a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t *v30;

  v30 = a1 + 12;
  while (1)
  {
    v8 = *((_DWORD *)a1 + 26);
    v9 = a1[12];
    if (v8 != *(_DWORD *)(a2 + 104))
      goto LABEL_12;
    if (!v8)
      break;
    v10 = *(_QWORD *)(a2 + 96);
    v11 = a1[12];
    while (*(_QWORD *)v11 == *(_QWORD *)v10 && *(_DWORD *)(v11 + 16) == *(_DWORD *)(v10 + 16))
    {
      v11 += 24;
      v10 += 24;
      if (v11 == v9 + 24 * v8)
        goto LABEL_31;
    }
LABEL_12:
    v13 = v9 + 24 * v8;
    v15 = a3[1];
    v14 = (unint64_t)a3[2];
    if ((unint64_t)v15 >= v14)
    {
      v17 = *a3;
      v18 = (v15 - *a3) >> 3;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        abort();
      v20 = v14 - (_QWORD)v17;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          sub_1C4764EE4();
        v22 = (char *)operator new(8 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[8 * v18];
      *(_QWORD *)v23 = *(_QWORD *)(v13 - 24);
      v16 = v23 + 8;
      if (v15 != v17)
      {
        do
        {
          v24 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *((_QWORD *)v23 - 1) = v24;
          v23 -= 8;
        }
        while (v15 != v17);
        v15 = *a3;
      }
      *a3 = v23;
      a3[1] = v16;
      a3[2] = &v22[8 * v21];
      if (v15)
      {
        operator delete(v15);
        v8 = *((_DWORD *)a1 + 26);
      }
    }
    else
    {
      *(_QWORD *)v15 = *(_QWORD *)(v13 - 24);
      v16 = v15 + 8;
    }
    a3[1] = v16;
    *((_DWORD *)a1 + 26) = v8 - 1;
    if (v8 != 1)
      sub_1C4DC35CC((__int128 *)a1);
  }
LABEL_31:
  v25 = (void *)(a4 + 32);
  *(_QWORD *)a4 = a4 + 32;
  v27 = *a1;
  v26 = (const void *)a1[1];
  if (v26 == (const void *)*a1)
  {
    *(_QWORD *)(a4 + 8) = v25;
    v28 = *((unsigned int *)a1 + 5);
    if ((_DWORD)v28)
      memmove(v25, v26, 8 * v28);
  }
  else
  {
    *(_QWORD *)(a4 + 8) = v26;
    a1[1] = v27;
    LODWORD(v28) = *((_DWORD *)a1 + 5);
  }
  *(_QWORD *)(a4 + 96) = a4 + 112;
  result = a4 + 96;
  *(_DWORD *)(a4 + 16) = *((_DWORD *)a1 + 4);
  *(_DWORD *)(a4 + 20) = v28;
  *(_DWORD *)(a4 + 24) = *((_DWORD *)a1 + 6);
  a1[2] = 8;
  *((_DWORD *)a1 + 6) = 0;
  *(_QWORD *)(a4 + 104) = 0x800000000;
  if (v8)
    result = sub_1C4DB2150(result, v30);
  *(_QWORD *)(a4 + 304) = a3;
  return result;
}

void sub_1C4DC3408(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const void *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  int v14;
  int v15;
  int v16;
  _BYTE v17[64];
  void *v18[2];
  _BYTE v19[192];
  _BYTE *v20;
  _BYTE *v21;
  int v22;
  int v23;
  int v24;
  _BYTE v25[64];
  void *v26[2];
  _QWORD v27[25];

  v27[24] = *MEMORY[0x1E0C80C00];
  v20 = v25;
  v7 = *(const void **)a1;
  v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    v21 = v25;
    v8 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v8)
      memmove(v25, v6, 8 * v8);
  }
  else
  {
    v21 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  v22 = *(_DWORD *)(a1 + 16);
  v23 = v8;
  v24 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v26[0] = v27;
  v26[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C4DB2150((uint64_t)v26, (uint64_t *)(a1 + 96));
  v12 = v17;
  v10 = *(const void **)a2;
  v9 = *(const void **)(a2 + 8);
  if (v9 == *(const void **)a2)
  {
    v13 = v17;
    v11 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v11)
      memmove(v17, v9, 8 * v11);
  }
  else
  {
    v13 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v10;
    LODWORD(v11) = *(_DWORD *)(a2 + 20);
  }
  v14 = *(_DWORD *)(a2 + 16);
  v15 = v11;
  v16 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v18[0] = v19;
  v18[1] = (void *)0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C4DB2150((uint64_t)v18, (uint64_t *)(a2 + 96));
  sub_1C4DC3878((uint64_t)&v20, (uint64_t)&v12, a3);
  if (v18[0] != v19)
    free(v18[0]);
  if (v13 != v12)
    free(v13);
  if (v26[0] != v27)
    free(v26[0]);
  if (v21 != v20)
    free(v21);
}

__int128 *sub_1C4DC35CC(__int128 *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];

  v2 = (uint64_t)this;
  v3 = (uint64_t)(this + 6);
  while (1)
  {
    v4 = *(_QWORD *)(v2 + 96) + 24 * *(unsigned int *)(v2 + 104);
    v5 = *(_QWORD *)(v4 - 24);
    v6 = *(_QWORD *)(v5 + 40);
    if (v6 == v5 + 40)
    {
LABEL_23:
      LODWORD(v10) = 0;
    }
    else
    {
      v7 = v6 - 24;
      if (!v6)
        v7 = 0;
      v8 = *(unsigned __int8 *)(v7 + 16);
      v9 = v8 - 29;
      if (v8 == 30)
      {
        LODWORD(v10) = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
      }
      else
      {
        v10 = 0;
        switch(v9)
        {
          case 0:
          case 5:
          case 6:
            break;
          case 1:
            __break(1u);
            goto LABEL_25;
          case 2:
            LODWORD(v10) = (*(_DWORD *)(v7 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 3:
          case 9:
            LODWORD(v10) = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) - 1;
            break;
          case 4:
            LODWORD(v10) = 2;
            break;
          case 7:
            LODWORD(v10) = *(_WORD *)(v7 + 18) & 1;
            break;
          case 8:
            LODWORD(v10) = 1;
            break;
          case 10:
            LODWORD(v10) = *(_DWORD *)(v7 + 80) + 1;
            break;
          default:
            goto LABEL_23;
        }
      }
    }
    if (*(_DWORD *)(v4 - 8) == (_DWORD)v10)
      return this;
    v11 = *(_QWORD *)(v4 - 16);
    v12 = *(_QWORD *)(v4 - 8);
    *(_DWORD *)(v4 - 8) = v12 + 1;
    v13 = *(unsigned __int8 *)(v11 + 16);
    if (v13 != 30)
      __asm { BR              X12 }
    v1 = *(_QWORD *)(v11 - 32 * v12 - 32);
    this = (__int128 *)sub_1C4774094((llvm::SmallPtrSetImplBase *)v2, v1);
    if (v14)
    {
      v4 = v1 + 40;
      v10 = *(_QWORD *)(v1 + 40);
      if (v10 == v1 + 40 || v10 == 0)
      {
LABEL_25:
        if (v10 == v4)
        {
          v16 = 0;
          goto LABEL_19;
        }
        v16 = v10 - 24;
        if (!v10)
          v16 = 0;
        v17 = (unsigned __int8 *)(v16 + 16);
      }
      else
      {
        v16 = v10 - 24;
        v17 = (unsigned __int8 *)(v10 - 8);
      }
      if (*v17 - 29 >= 0xB)
        v16 = 0;
LABEL_19:
      v20[0] = v1;
      v20[1] = v16;
      v20[2] = 0;
      this = (__int128 *)sub_1C4926708(v3, (unint64_t)v20, 1);
      v18 = *(_QWORD *)(v2 + 96) + 24 * *(unsigned int *)(v2 + 104);
      v19 = *this;
      *(_QWORD *)(v18 + 16) = *((_QWORD *)this + 2);
      *(_OWORD *)v18 = v19;
      ++*(_DWORD *)(v2 + 104);
    }
  }
}

void sub_1C4DC3878(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const void *v6;
  const void *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  int v16;
  _BYTE v17[64];
  void *v18;
  uint64_t v19;
  _BYTE v20[192];
  _BYTE *v21;
  _BYTE *v22;
  int v23;
  int v24;
  int v25;
  _BYTE v26[64];
  void *v27[2];
  _QWORD v28[25];

  v28[24] = *MEMORY[0x1E0C80C00];
  v21 = v26;
  v7 = *(const void **)a1;
  v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    v22 = v26;
    v8 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v8)
      memmove(v26, v6, 8 * v8);
  }
  else
  {
    v22 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  v23 = *(_DWORD *)(a1 + 16);
  v24 = v8;
  v25 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v27[0] = v28;
  v27[1] = (void *)0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C4DB2150((uint64_t)v27, (uint64_t *)(a1 + 96));
  v9 = *(_BYTE **)(a2 + 8);
  if (v9 == *(_BYTE **)a2)
  {
    v14 = v17;
    v10 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v10)
      memmove(v17, v9, 8 * v10);
    v9 = v17;
  }
  else
  {
    v14 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    LODWORD(v10) = *(_DWORD *)(a2 + 20);
  }
  v15 = *(_DWORD *)(a2 + 16);
  v16 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v18 = v20;
  v19 = 0x800000000;
  if (*(_DWORD *)(a2 + 104))
  {
    sub_1C4DB2150((uint64_t)&v18, (uint64_t *)(a2 + 96));
    v9 = v14;
  }
  v11 = a3 + 4;
  *a3 = a3 + 4;
  if (v9 == v17)
  {
    a3[1] = v11;
    v12 = v10;
    if ((_DWORD)v10)
      memmove(v11, v17, 8 * v10);
  }
  else
  {
    a3[1] = v9;
    v14 = v17;
    v12 = v10;
  }
  a3[12] = a3 + 14;
  v13 = (uint64_t)(a3 + 12);
  *(_DWORD *)(v13 - 80) = v15;
  *(_DWORD *)(v13 - 76) = v12;
  *(_DWORD *)(v13 - 72) = v16;
  *(_QWORD *)(v13 + 8) = 0x800000000;
  if ((_DWORD)v19)
    sub_1C4DB2150(v13, (uint64_t *)&v18);
  if (v18 != v20)
    free(v18);
  if (v14 != v17)
    free(v14);
  if (v27[0] != v28)
    free(v27[0]);
  if (v22 != v21)
    free(v22);
}

uint64_t sub_1C4DC3AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v11[3];

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  v4 = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0x800000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a2);
  v5 = *(_QWORD *)(a2 + 40);
  if (v5 == a2 + 40)
  {
    v6 = 0;
  }
  else
  {
    if (v5)
      v6 = v5 - 24;
    else
      v6 = 0;
    if (*(unsigned __int8 *)(v6 + 16) - 29 >= 0xB)
      v6 = 0;
  }
  v11[0] = a2;
  v11[1] = v6;
  v11[2] = 0;
  v7 = sub_1C4926708(v4, (unint64_t)v11, 1);
  v8 = *(_QWORD *)(a1 + 96) + 24 * *(unsigned int *)(a1 + 104);
  v9 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = v9;
  ++*(_DWORD *)(a1 + 104);
  sub_1C4DC35CC((__int128 *)a1);
  return a1;
}

uint64_t sub_1C4DC3B9C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v14;
  uint64_t v16;
  _BYTE v17[96];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v16 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v16;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C617E954(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v17;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    v11 = *(_DWORD *)(a1 + v8 + 16);
    if ((v10 != -4096 || v11 != 0x7FFFFFFF) && (v10 != -8192 || v11 != 0x80000000))
    {
      *(_OWORD *)v9 = *(_OWORD *)(a1 + v8 + 8);
      *((_DWORD *)v9 + 4) = *(_DWORD *)(a1 + v8 + 24);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 96);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v14 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v14;
  }
  return sub_1C617E954(a1, (uint64_t)v17, (uint64_t)v9);
}

uint64_t sub_1C4DC3D4C(uint64_t result, __n128 a2)
{
  _QWORD *v2;
  int v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  int32x2_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  int32x2_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;

  v2 = (_QWORD *)result;
  v3 = *(_DWORD *)(result + 8);
  if (v3 || *(_DWORD *)(result + 12))
  {
    v4 = *(_DWORD *)(result + 16);
    v5 = *(_QWORD **)result;
    v6 = *(_QWORD *)result + 40 * v4;
    if (v4 <= 4 * v3 || v4 < 0x41)
    {
      if (v4)
      {
        do
        {
          v28 = v5[3];
          if (v28 != -4096)
          {
            if (v28 && v28 != -8192)
            {
              v29 = v5[1] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v29 = v5[2];
              v30 = (unint64_t *)v5[2];
              if (v30)
              {
                *v30 = *v30 & 7 | v29;
              }
              else
              {
                v31 = v5[3];
                v32 = ***(int32x2_t ****)v31;
                v33 = (unint64_t)v32[303];
                if (v33 <= v29)
                {
                  v34 = v32[305].u32[0];
                  if (v33 + 16 * v34 > v29)
                  {
                    v35 = v34 - 1;
                    LODWORD(v36) = v35 & ((v31 >> 4) ^ (v31 >> 9));
                    result = v33 + 16 * v36;
                    v37 = *(_QWORD **)result;
                    if (v31 == *(_QWORD *)result)
                    {
LABEL_52:
                      *(_QWORD *)result = -8192;
                      v32[304] = vadd_s32(v32[304], (int32x2_t)0x1FFFFFFFFLL);
                      v31 = v5[3];
                    }
                    else
                    {
                      result = 1;
                      while (v37 != (_QWORD *)-4096)
                      {
                        v38 = v36 + result;
                        result = (result + 1);
                        v36 = v38 & v35;
                        v37 = *(_QWORD **)(v33 + 16 * v36);
                        if ((_QWORD *)v31 == v37)
                        {
                          result = v33 + 16 * v36;
                          goto LABEL_52;
                        }
                      }
                    }
                    *(_BYTE *)(v31 + 17) &= ~1u;
                  }
                }
              }
            }
            v5[3] = -4096;
          }
          v5[4] = 0;
          v5 += 5;
        }
        while (v5 != (_QWORD *)v6);
      }
      v2[1] = 0;
    }
    else
    {
      a2.n128_u64[0] = 0x1FFFFFFFFLL;
      do
      {
        v7 = v5[3];
        if (v7 != -4096 && v7 != -8192 && v7 != 0)
        {
          v9 = v5[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v9 = v5[2];
          v10 = (unint64_t *)v5[2];
          if (v10)
          {
            *v10 = *v10 & 7 | v9;
          }
          else
          {
            v11 = v5[3];
            v12 = ***(int32x2_t ****)v11;
            v13 = (unint64_t)v12[303];
            if (v13 <= v9)
            {
              v14 = v12[305].u32[0];
              if (v13 + 16 * v14 > v9)
              {
                v15 = v14 - 1;
                LODWORD(v16) = v15 & ((v11 >> 4) ^ (v11 >> 9));
                result = v13 + 16 * v16;
                v17 = *(_QWORD **)result;
                if (v11 == *(_QWORD *)result)
                {
LABEL_22:
                  *(_QWORD *)result = -8192;
                  v12[304] = vadd_s32(v12[304], (int32x2_t)0x1FFFFFFFFLL);
                  v11 = v5[3];
                }
                else
                {
                  result = 1;
                  while (v17 != (_QWORD *)-4096)
                  {
                    v18 = v16 + result;
                    result = (result + 1);
                    v16 = v18 & v15;
                    v17 = *(_QWORD **)(v13 + 16 * v16);
                    if ((_QWORD *)v11 == v17)
                    {
                      result = v13 + 16 * v16;
                      goto LABEL_22;
                    }
                  }
                }
                *(_BYTE *)(v11 + 17) &= ~1u;
              }
            }
          }
        }
        v5 += 5;
      }
      while (v5 != (_QWORD *)v6);
      v19 = 1 << (33 - __clz(v3 - 1));
      if (v19 <= 64)
        v19 = 64;
      if (v3)
        v20 = v19;
      else
        v20 = 0;
      if ((_DWORD)v20 == *((_DWORD *)v2 + 4))
      {
        v2[1] = 0;
        if ((_DWORD)v20)
        {
          v21 = 40 * v20;
          v22 = (_QWORD *)(*v2 + 16);
          do
          {
            *v22 = 0;
            v22[1] = -4096;
            *(v22 - 2) = &off_1E8134DC0;
            *(v22 - 1) = 2;
            v22[2] = 0;
            v22 += 5;
            v21 -= 40;
          }
          while (v21);
        }
      }
      else
      {
        result = MEMORY[0x1CAA32FB4](*v2, 8, a2);
        if ((_DWORD)v20)
        {
          v23 = (4 * (int)v20 / 3u + 1) | ((unint64_t)(4 * (int)v20 / 3u + 1) >> 1);
          v24 = v23 | (v23 >> 2) | ((v23 | (v23 >> 2)) >> 4);
          LODWORD(v24) = (((v24 | (v24 >> 8)) >> 16) | v24 | (v24 >> 8)) + 1;
          *((_DWORD *)v2 + 4) = v24;
          result = (uint64_t)operator new(40 * v24, (std::align_val_t)8uLL);
          *v2 = result;
          v2[1] = 0;
          v25 = *((unsigned int *)v2 + 4);
          if ((_DWORD)v25)
          {
            v26 = 40 * v25;
            v27 = (_QWORD *)(result + 16);
            do
            {
              *v27 = 0;
              v27[1] = -4096;
              *(v27 - 2) = &off_1E8134DC0;
              *(v27 - 1) = 2;
              v27[2] = 0;
              v27 += 5;
              v26 -= 40;
            }
            while (v26);
          }
        }
        else
        {
          *v2 = 0;
          v2[1] = 0;
          *((_DWORD *)v2 + 4) = 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4DC40BC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v20;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = *a2;
    v5 = *((_DWORD *)a2 + 2);
    v6 = ~((unint64_t)(37 * v5) << 32)
       + (37 * v5)
       + ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32);
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
    v10 = v3 - 1;
    v11 = (v3 - 1) & v9;
    v12 = *(_QWORD *)a1 + 24 * v11;
    v13 = *(_QWORD *)v12;
    v14 = *(_DWORD *)(v12 + 8);
    if (v4 == *(_QWORD *)v12 && v5 == v14)
    {
LABEL_22:
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v13 != -4096 || v14 != -1)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == -2;
        if (v18 && v13 == -8192)
          v16 = v12;
        v20 = v11 + v17++;
        v11 = v20 & v10;
        v12 = *(_QWORD *)a1 + 24 * (v20 & v10);
        v13 = *(_QWORD *)v12;
        v14 = *(_DWORD *)(v12 + 8);
        if (v4 == *(_QWORD *)v12 && v5 == v14)
          goto LABEL_22;
      }
      result = 0;
      if (v16)
        v12 = v16;
    }
  }
  else
  {
    v12 = 0;
    result = 0;
  }
  *a3 = v12;
  return result;
}

uint64_t sub_1C4DC41B8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  int32x2_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  BOOL v44;
  unsigned int v45;
  _QWORD *v46;

  v4 = result;
  v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    v7 = *(_QWORD *)result;
    v8 = a2[3];
    v9 = v6 - 1;
    v10 = ((v8 >> 4) ^ (v8 >> 9)) & (v6 - 1);
    v11 = (_QWORD *)(*(_QWORD *)result + 40 * v10);
    v12 = v11[3];
    if (v8 == v12)
    {
LABEL_11:
      v17 = 0;
      goto LABEL_33;
    }
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (_QWORD *)(v7 + 40 * (v16 & v9));
      v12 = v11[3];
      if (v8 == v12)
        goto LABEL_11;
    }
    if (v13)
      v11 = v13;
  }
  else
  {
    v11 = 0;
  }
  v18 = *(_DWORD *)(result + 8);
  if (4 * v18 + 4 >= 3 * v6)
  {
    result = (uint64_t)sub_1C4DC4578(result, 2 * v6);
    v37 = *(_DWORD *)(v4 + 16);
    if (v37)
    {
      v38 = a2[3];
      v39 = v37 - 1;
      v40 = ((v38 >> 4) ^ (v38 >> 9)) & (v37 - 1);
      v11 = (_QWORD *)(*(_QWORD *)v4 + 40 * v40);
      v41 = v11[3];
      if (v38 != v41)
      {
        v42 = 0;
        v43 = 1;
        while (v41 != -4096)
        {
          if (v42)
            v44 = 0;
          else
            v44 = v41 == -8192;
          if (v44)
            v42 = v11;
          v45 = v40 + v43++;
          v40 = v45 & v39;
          v11 = (_QWORD *)(*(_QWORD *)v4 + 40 * (v45 & v39));
          v41 = v11[3];
          if (v38 == v41)
            goto LABEL_17;
        }
        if (v42)
          v11 = v42;
      }
    }
    else
    {
      v11 = 0;
    }
  }
  else if (v6 + ~v18 - *(_DWORD *)(result + 12) <= v6 >> 3)
  {
    sub_1C4DC4578(result, v6);
    v46 = 0;
    result = sub_1C4DC44F8(*(_QWORD *)v4, *(_DWORD *)(v4 + 16), a2[3], &v46);
    v11 = v46;
  }
LABEL_17:
  ++*(_DWORD *)(v4 + 8);
  v19 = v11[3];
  if (v19 != -4096)
    --*(_DWORD *)(v4 + 12);
  v20 = a2[3];
  if (v19 != v20)
  {
    v21 = v19 == -4096 || v19 == 0;
    if (!v21 && v19 != -8192)
    {
      v25 = v11[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v25 = v11[2];
      v26 = (unint64_t *)v11[2];
      if (v26)
      {
        *v26 = *v26 & 7 | v25;
      }
      else
      {
        v27 = v11[3];
        v28 = ***(int32x2_t ****)v27;
        v29 = (unint64_t)v28[303];
        if (v29 <= v25)
        {
          v30 = v28[305].u32[0];
          if (v29 + 16 * v30 > v25)
          {
            v31 = v30 - 1;
            LODWORD(v32) = v31 & ((v27 >> 4) ^ (v27 >> 9));
            v33 = (uint64_t *)(v29 + 16 * v32);
            v34 = *v33;
            if (v27 == *v33)
            {
LABEL_43:
              *v33 = -8192;
              v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
              v27 = v11[3];
            }
            else
            {
              v35 = 1;
              while (v34 != -4096)
              {
                v36 = v32 + v35++;
                v32 = v36 & v31;
                v34 = *(_QWORD *)(v29 + 16 * v32);
                if (v27 == v34)
                {
                  v33 = (uint64_t *)(v29 + 16 * v32);
                  goto LABEL_43;
                }
              }
            }
            *(_BYTE *)(v27 + 17) &= ~1u;
          }
        }
      }
      v20 = a2[3];
    }
    v11[3] = v20;
    if (v20 != -4096 && v20 != -8192 && v20 != 0)
    {
      v23 = a2[1];
      v11[2] = *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8) = v11 + 1;
      v11[1] = v23 & 0xFFFFFFFFFFFFFFF8 | v11[1] & 7;
      v24 = (unint64_t *)v11[2];
      if (v24)
        *v24 = *v24 & 7 | (unint64_t)(v11 + 2);
    }
  }
  v11[4] = a2[4];
  v7 = *(_QWORD *)v4;
  v6 = *(_DWORD *)(v4 + 16);
  v17 = 1;
LABEL_33:
  *(_QWORD *)a3 = v11;
  *(_QWORD *)(a3 + 8) = v7 + 40 * v6;
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

uint64_t sub_1C4DC44F8(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = result + 40 * v5;
    v7 = *(_QWORD *)(v6 + 24);
    if (v7 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = result + 40 * (v11 & v4);
        v7 = *(_QWORD *)(v6 + 24);
        if (v7 == a3)
          goto LABEL_14;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_14:
  *a4 = v6;
  return result;
}

char *sub_1C4DC4578(uint64_t a1, int a2)
{
  unsigned int v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  int32x2_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  int32x2_t *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      v12 = result + 16;
      do
      {
        *v12 = 0;
        v12[1] = -4096;
        *(v12 - 2) = &off_1E8134DC0;
        *(v12 - 1) = 2;
        v12[2] = 0;
        v12 += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      v13 = v4;
      do
      {
        v14 = v13[3];
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = *(_DWORD *)(a1 + 16) - 1;
          v16 = v15 & ((v14 >> 4) ^ (v14 >> 9));
          v17 = (_QWORD *)(*(_QWORD *)a1 + 40 * v16);
          v18 = v17[3];
          if (v14 != v18)
          {
            v19 = 0;
            v20 = 1;
            while (v18 != -4096)
            {
              if (v19)
                v21 = 0;
              else
                v21 = v18 == -8192;
              if (v21)
                v19 = v17;
              v22 = v16 + v20++;
              v16 = v22 & v15;
              v17 = (_QWORD *)(*(_QWORD *)a1 + 40 * (v22 & v15));
              v18 = v17[3];
              if (v14 == v18)
                goto LABEL_36;
            }
            if (v19)
              v17 = v19;
            v23 = v17[3];
            if (v23 != v14)
            {
              v24 = v23 == -4096 || v23 == 0;
              if (!v24 && v23 != -8192)
              {
                v41 = v17[1] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v41 = v17[2];
                v42 = (unint64_t *)v17[2];
                if (v42)
                {
                  *v42 = *v42 & 7 | v41;
                }
                else
                {
                  v43 = v17[3];
                  v44 = ***(int32x2_t ****)v43;
                  v45 = (unint64_t)v44[303];
                  if (v45 <= v41)
                  {
                    v46 = v44[305].u32[0];
                    if (v45 + 16 * v46 > v41)
                    {
                      v47 = v46 - 1;
                      LODWORD(v48) = v47 & ((v43 >> 4) ^ (v43 >> 9));
                      v49 = (uint64_t *)(v45 + 16 * v48);
                      v50 = *v49;
                      if (v43 != *v49)
                      {
                        v51 = 1;
                        do
                        {
                          if (v50 == -4096)
                            goto LABEL_66;
                          v52 = v48 + v51++;
                          v48 = v52 & v47;
                          v50 = *(_QWORD *)(v45 + 16 * v48);
                        }
                        while (v43 != v50);
                        v49 = (uint64_t *)(v45 + 16 * v48);
                      }
                      *v49 = -8192;
                      v44[304] = vadd_s32(v44[304], (int32x2_t)0x1FFFFFFFFLL);
                      v43 = v17[3];
LABEL_66:
                      *(_BYTE *)(v43 + 17) &= ~1u;
                    }
                  }
                }
                v14 = v13[3];
              }
              v17[3] = v14;
              if (v14 != -4096 && v14 != -8192 && v14 != 0)
              {
                v26 = v13[1];
                v17[2] = *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8);
                *(_QWORD *)(v26 & 0xFFFFFFFFFFFFFFF8) = v17 + 1;
                v17[1] = v26 & 0xFFFFFFFFFFFFFFF8 | v17[1] & 7;
                v27 = (unint64_t *)v17[2];
                if (v27)
                  *v27 = *v27 & 7 | (unint64_t)(v17 + 2);
              }
            }
          }
LABEL_36:
          v14 = v13[3];
          v17[4] = v13[4];
          ++*(_DWORD *)(a1 + 8);
        }
        if (v14 != -8192 && v14 != -4096 && v14 != 0)
        {
          v29 = v13[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v29 = v13[2];
          v30 = (unint64_t *)v13[2];
          if (v30)
          {
            *v30 = *v30 & 7 | v29;
          }
          else
          {
            v31 = v13[3];
            v32 = ***(int32x2_t ****)v31;
            v33 = (unint64_t)v32[303];
            if (v33 <= v29)
            {
              v34 = v32[305].u32[0];
              if (v33 + 16 * v34 > v29)
              {
                v35 = v34 - 1;
                LODWORD(v36) = v35 & ((v31 >> 4) ^ (v31 >> 9));
                v37 = (uint64_t *)(v33 + 16 * v36);
                v38 = *v37;
                if (v31 != *v37)
                {
                  v39 = 1;
                  do
                  {
                    if (v38 == -4096)
                      goto LABEL_54;
                    v40 = v36 + v39++;
                    v36 = v40 & v35;
                    v38 = *(_QWORD *)(v33 + 16 * v36);
                  }
                  while (v31 != v38);
                  v37 = (uint64_t *)(v33 + 16 * v36);
                }
                *v37 = -8192;
                v32[304] = vadd_s32(v32[304], (int32x2_t)0x1FFFFFFFFLL);
                v31 = v13[3];
LABEL_54:
                *(_BYTE *)(v31 + 17) &= ~1u;
              }
            }
          }
        }
        v13 += 5;
      }
      while (v13 != &v4[5 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v53 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v53)
  {
    v54 = 40 * v53;
    v55 = result + 16;
    do
    {
      *v55 = 0;
      v55[1] = -4096;
      *(v55 - 2) = &off_1E8134DC0;
      *(v55 - 1) = 2;
      v55[2] = 0;
      v55 += 5;
      v54 -= 40;
    }
    while (v54);
  }
  return result;
}

uint64_t sub_1C4DC495C(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = sub_1C4DC40BC(a1, (uint64_t *)a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4DC49C4(a1, a2, v7);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(v5 + 16) = -1;
  }
  return v5;
}

uint64_t sub_1C4DC49C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v23;
  uint64_t v25;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1C4DC4B70((uint64_t *)a1, 2 * v6);
    v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(_DWORD *)(a2 + 8);
      v11 = ~((unint64_t)(37 * v10) << 32)
          + (37 * v10)
          + ((unint64_t)((*(_QWORD *)a2 >> 4) ^ (*(_QWORD *)a2 >> 9)) << 32);
      v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
      v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
      v14 = v9 - 1;
      v15 = v14 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
      a3 = *(_QWORD *)a1 + 24 * v15;
      v16 = *(_QWORD *)a3;
      v17 = *(_DWORD *)(a3 + 8);
      if (*(_QWORD *)a2 != *(_QWORD *)a3 || v10 != v17)
      {
        v19 = 0;
        v20 = 1;
        while (v16 != -4096 || v17 != -1)
        {
          if (v19)
            v21 = 0;
          else
            v21 = v17 == -2;
          if (v21 && v16 == -8192)
            v19 = a3;
          v23 = v15 + v20++;
          v15 = v23 & v14;
          a3 = *(_QWORD *)a1 + 24 * v15;
          v16 = *(_QWORD *)a3;
          v17 = *(_DWORD *)(a3 + 8);
          if (*(_QWORD *)a2 == *(_QWORD *)a3 && v10 == v17)
            goto LABEL_4;
        }
        if (v19)
          a3 = v19;
      }
    }
    else
    {
      a3 = 0;
    }
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
    sub_1C4DC4B70((uint64_t *)a1, v6);
    v25 = 0;
    sub_1C4DC40BC(a1, (uint64_t *)a2, &v25);
    a3 = v25;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 != -4096 || *(_DWORD *)(a3 + 8) != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_OWORD *sub_1C4DC4B70(uint64_t *a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  int v26;
  char *v28;
  int v29;
  BOOL v30;
  unsigned int v32;
  uint64_t v34;
  uint64_t v35;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (uint64_t *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      v12 = result;
      do
      {
        *v12 = xmmword_1C85F22C0;
        v12 = (_OWORD *)((char *)v12 + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      v13 = 0;
      v14 = v10 - 1;
      v15 = v4;
      do
      {
        v16 = *v15;
        v17 = *((_DWORD *)v15 + 2);
        if ((*v15 != -4096 || v17 != -1) && (v16 != -8192 || v17 != -2))
        {
          v20 = ~((unint64_t)(37 * v17) << 32)
              + (37 * v17)
              + ((unint64_t)((v16 >> 4) ^ (v16 >> 9)) << 32);
          v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
          v22 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
          v23 = v14 & (((v22 + ~(v22 << 27)) >> 31) ^ (v22 + ~((_DWORD)v22 << 27)));
          v24 = (char *)result + 24 * v23;
          v25 = *(_QWORD *)v24;
          v26 = *((_DWORD *)v24 + 2);
          if (v16 != *(_QWORD *)v24 || v17 != v26)
          {
            v28 = 0;
            v29 = 1;
            while (v25 != -4096 || v26 != -1)
            {
              if (v28)
                v30 = 0;
              else
                v30 = v26 == -2;
              if (v30 && v25 == -8192)
                v28 = v24;
              v32 = v23 + v29++;
              v23 = v32 & v14;
              v24 = (char *)result + 24 * (v32 & v14);
              v25 = *(_QWORD *)v24;
              v26 = *((_DWORD *)v24 + 2);
              if (v16 == *(_QWORD *)v24 && v17 == v26)
                goto LABEL_41;
            }
            if (v28)
              v24 = v28;
          }
LABEL_41:
          *(_QWORD *)v24 = v16;
          *((_DWORD *)v24 + 2) = v17;
          *((_DWORD *)v24 + 4) = *((_DWORD *)v15 + 4);
          *((_DWORD *)a1 + 2) = ++v13;
        }
        v15 += 3;
      }
      while (v15 != &v4[3 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v34 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v34)
  {
    v35 = 24 * v34;
    do
    {
      *result = xmmword_1C85F22C0;
      result = (_OWORD *)((char *)result + 24);
      v35 -= 24;
    }
    while (v35);
  }
  return result;
}

_QWORD *sub_1C4DC4D74(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = a1[3];
  if (v2)
  {
    v4 = a1[4];
    v5 = (void *)a1[3];
    if (v4 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v4 - 24);
        v4 -= 24;
        MEMORY[0x1CAA32FB4](v6, 8);
      }
      while (v4 != v2);
      v5 = (void *)a1[3];
    }
    a1[4] = v2;
    operator delete(v5);
  }
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

void sub_1C4DC4DE4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1C4DC4E38((uint64_t *)(a2 + 24));
    if (*(_QWORD *)a2 != a2 + 16)
      free(*(void **)a2);
    JUMPOUT(0x1CAA32FC0);
  }
}

uint64_t *sub_1C4DC4E38(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (uint64_t *)(v3 + 8);
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        v5 = sub_1C48680A4(v5);
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

void sub_1C4DC4E98(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1C4DC4E38((uint64_t *)(a2 + 48));
    if (*(_QWORD *)a2 != a2 + 16)
      free(*(void **)a2);
    JUMPOUT(0x1CAA32FC0);
  }
}

void sub_1C4DC4EEC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  const void *v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  _BYTE *v13;
  int v14;
  int v15;
  void *v16;
  int v17;
  _BYTE *v18;
  int v19;
  int v20;
  _BYTE v21[64];
  void *v22;
  uint64_t v23;
  _BYTE v24[192];
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[64];
  void *v30;
  uint64_t v31;
  _QWORD v32[25];

  v32[24] = *MEMORY[0x1E0C80C00];
  v25 = v29;
  v7 = *(const void **)a1;
  v6 = *(const void **)(a1 + 8);
  if (v6 == *(const void **)a1)
  {
    v26 = v29;
    v8 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v8)
      memmove(v29, v6, 8 * v8);
  }
  else
  {
    v26 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 20);
  }
  LODWORD(v27) = *(_DWORD *)(a1 + 16);
  HIDWORD(v27) = v8;
  v28 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v30 = v32;
  v31 = 0x800000000;
  if (*(_DWORD *)(a1 + 104))
    sub_1C4DB2150((uint64_t)&v30, (uint64_t *)(a1 + 96));
  v9 = *(const void **)(a2 + 8);
  if (v9 == *(const void **)a2)
  {
    v18 = v21;
    v10 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v10)
      memmove(v21, v9, 8 * v10);
  }
  else
  {
    v18 = *(_BYTE **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    LODWORD(v10) = *(_DWORD *)(a2 + 20);
  }
  v19 = *(_DWORD *)(a2 + 16);
  v20 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v22 = v24;
  v23 = 0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C4DB2150((uint64_t)&v22, (uint64_t *)(a2 + 96));
  v11 = (void *)(a3 + 32);
  *(_QWORD *)a3 = a3 + 32;
  v13 = v25;
  v12 = v26;
  if (v26 == v25)
  {
    *(_QWORD *)(a3 + 8) = v11;
    v14 = HIDWORD(v27);
    if (HIDWORD(v27))
      memmove(v11, v12, 8 * HIDWORD(v27));
  }
  else
  {
    *(_QWORD *)(a3 + 8) = v26;
    v26 = v13;
    v14 = HIDWORD(v27);
  }
  *(_QWORD *)(a3 + 96) = a3 + 112;
  v15 = v28;
  *(_DWORD *)(a3 + 16) = v27;
  *(_DWORD *)(a3 + 20) = v14;
  *(_DWORD *)(a3 + 24) = v15;
  v27 = 8;
  v28 = 0;
  *(_QWORD *)(a3 + 104) = 0x800000000;
  if ((_DWORD)v31)
    sub_1C4DB2150(a3 + 96, (uint64_t *)&v30);
  v16 = (void *)(a3 + 336);
  *(_QWORD *)(a3 + 304) = a3 + 336;
  if (v18 == v21)
  {
    *(_QWORD *)(a3 + 312) = v16;
    v17 = v10;
    if ((_DWORD)v10)
      memmove(v16, v18, 8 * v10);
  }
  else
  {
    *(_QWORD *)(a3 + 312) = v18;
    v18 = v21;
    v17 = v10;
  }
  *(_DWORD *)(a3 + 320) = v19;
  *(_DWORD *)(a3 + 324) = v17;
  *(_DWORD *)(a3 + 328) = v20;
  *(_QWORD *)(a3 + 400) = a3 + 416;
  *(_QWORD *)(a3 + 408) = 0x800000000;
  if ((_DWORD)v23)
    sub_1C4DB2150(a3 + 400, (uint64_t *)&v22);
  if (v22 != v24)
    free(v22);
  if (v18 != v21)
    free(v18);
  if (v30 != v32)
    free(v30);
  if (v26 != v25)
    free(v26);
}

uint64_t sub_1C4DC51A4()
{
  uint64_t v0;
  uint64_t i;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t j;
  _BYTE *v8;
  uint64_t v9;
  uint64_t k;
  _BYTE *v11;
  uint64_t v12;
  uint64_t m;
  _BYTE *v14;
  void *v16[2];
  _QWORD v17[6];
  __n128 v18;
  uint64_t v19;
  _BYTE v20[48];
  int v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE v24[48];
  int v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE v28[48];
  int v29;
  _QWORD v30[2];
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD v34[6];
  _QWORD *v35;
  uint64_t v36;
  _QWORD v37[6];
  void **v38;
  uint64_t v39;
  _QWORD v40[7];

  v40[6] = *MEMORY[0x1E0C80C00];
  LOBYTE(v32) = 0;
  v38 = &v32;
  LODWORD(v35) = 1;
  v18.n128_u64[0] = (unint64_t)"Print the branch probability info.";
  v18.n128_u64[1] = 34;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F0330, "print-bpi", (_BYTE **)&v38, &v35, &v18);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F0330, &dword_1C475E000);
  LODWORD(v38) = 1;
  v18.n128_u64[0] = (unint64_t)"The option to specify the name of the function whose branch probability info is printed.";
  v18.n128_u64[1] = 88;
  sub_1C4DB1854((uint64_t)&PrintBranchProbFuncName, "print-bpi-func-name", &v38, &v18);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &PrintBranchProbFuncName, &dword_1C475E000);
  qword_1ED7F0278 = 0x5000000000000001;
  dword_1ED7F0280 = 805306368;
  v38 = (void **)v40;
  v40[0] = 0x3000000050000000;
  v39 = 0xC00000002;
  v18.n128_u32[0] = 33;
  v18.n128_u64[1] = (unint64_t)v20;
  v19 = 0xC00000000;
  sub_1C614CA14((uint64_t)&v18.n128_i64[1], (uint64_t)&v38);
  v35 = v37;
  LODWORD(v37[0]) = dword_1ED7F0280;
  HIDWORD(v37[0]) = HIDWORD(qword_1ED7F0278);
  v36 = 0xC00000002;
  v21 = 32;
  v22 = v24;
  v23 = 0xC00000000;
  sub_1C614CA14((uint64_t)&v22, (uint64_t)&v35);
  v0 = 0;
  qword_1ED7F02A8 = 0;
  unk_1ED7F02B0 = 0;
  qword_1ED7F02A0 = (uint64_t)&qword_1ED7F02A8;
  do
  {
    sub_1C4DC0D58(&qword_1ED7F02A0, &qword_1ED7F02A8, v18.n128_u32[v0], (__n128 *)((char *)&v18 + v0 * 4));
    v0 += 18;
  }
  while (v0 != 36);
  for (i = 0; i != -18; i -= 9)
  {
    v2 = (&v22)[i];
    if (&v24[i * 8] != v2)
      free(v2);
  }
  if (v35 != v37)
    free(v35);
  if (v38 != v40)
    free(v38);
  __cxa_atexit((void (*)(void *))sub_1C4DBAB48, &qword_1ED7F02A0, &dword_1C475E000);
  qword_1ED7F0284 = 0x3000000050000000;
  v38 = (void **)v40;
  v40[0] = 0x5000000030000000;
  v39 = 0xC00000002;
  v18.n128_u32[0] = 32;
  v18.n128_u64[1] = (unint64_t)v20;
  v19 = 0xC00000000;
  sub_1C614CA14((uint64_t)&v18.n128_i64[1], (uint64_t)&v38);
  v35 = v37;
  v37[0] = qword_1ED7F0284;
  v36 = 0xC00000002;
  v21 = 33;
  v22 = v24;
  v23 = 0xC00000000;
  sub_1C614CA14((uint64_t)&v22, (uint64_t)&v35);
  v32 = v34;
  LODWORD(v34[0]) = HIDWORD(qword_1ED7F0284);
  HIDWORD(v34[0]) = qword_1ED7F0284;
  v33 = 0xC00000002;
  v25 = 40;
  v26 = v28;
  v27 = 0xC00000000;
  sub_1C614CA14((uint64_t)&v26, (uint64_t)&v32);
  v16[0] = v17;
  v17[0] = qword_1ED7F0284;
  v16[1] = (void *)0xC00000002;
  v29 = 38;
  v30[0] = &v31;
  v30[1] = 0xC00000000;
  sub_1C614CA14((uint64_t)v30, (uint64_t)v16);
  v3 = 0;
  qword_1ED7F02C0 = 0;
  qword_1ED7F02C8 = 0;
  qword_1ED7F02B8 = (uint64_t)&qword_1ED7F02C0;
  do
  {
    sub_1C4DC0D58(&qword_1ED7F02B8, &qword_1ED7F02C0, v18.n128_u32[v3], (__n128 *)((char *)&v18 + v3 * 4));
    v3 += 18;
  }
  while (v3 != 72);
  v4 = 36;
  do
  {
    v5 = v16[v4];
    if (&v17[v4] != v5)
      free(v5);
    v4 -= 9;
  }
  while (v4 * 8);
  if (v16[0] != v17)
    free(v16[0]);
  if (v32 != v34)
    free(v32);
  if (v35 != v37)
    free(v35);
  if (v38 != v40)
    free(v38);
  __cxa_atexit((void (*)(void *))sub_1C4DBAB48, &qword_1ED7F02B8, &dword_1C475E000);
  v38 = (void **)v40;
  LODWORD(v40[0]) = HIDWORD(qword_1ED7F0284);
  HIDWORD(v40[0]) = qword_1ED7F0284;
  v39 = 0xC00000002;
  v18.n128_u32[0] = 32;
  v18.n128_u64[1] = (unint64_t)v20;
  v19 = 0xC00000000;
  sub_1C614CA14((uint64_t)&v18.n128_i64[1], (uint64_t)&v38);
  v35 = v37;
  v37[0] = qword_1ED7F0284;
  v36 = 0xC00000002;
  v21 = 33;
  v22 = v24;
  v23 = 0xC00000000;
  sub_1C614CA14((uint64_t)&v22, (uint64_t)&v35);
  v32 = v34;
  v34[0] = qword_1ED7F0284;
  v33 = 0xC00000002;
  v25 = 38;
  v26 = v28;
  v27 = 0xC00000000;
  sub_1C614CA14((uint64_t)&v26, (uint64_t)&v32);
  v6 = 0;
  qword_1ED7F02D8 = 0;
  qword_1ED7F02E0 = 0;
  qword_1ED7F02D0 = (uint64_t)&qword_1ED7F02D8;
  do
  {
    sub_1C4DC0D58(&qword_1ED7F02D0, &qword_1ED7F02D8, v18.n128_u32[v6], (__n128 *)((char *)&v18 + v6 * 4));
    v6 += 18;
  }
  while (v6 != 54);
  for (j = 0; j != -27; j -= 9)
  {
    v8 = (&v26)[j];
    if (&v28[j * 8] != v8)
      free(v8);
  }
  if (v32 != v34)
    free(v32);
  if (v35 != v37)
    free(v35);
  if (v38 != v40)
    free(v38);
  __cxa_atexit((void (*)(void *))sub_1C4DBAB48, &qword_1ED7F02D0, &dword_1C475E000);
  v38 = (void **)v40;
  LODWORD(v40[0]) = HIDWORD(qword_1ED7F0284);
  HIDWORD(v40[0]) = qword_1ED7F0284;
  v39 = 0xC00000002;
  v18.n128_u32[0] = 40;
  v18.n128_u64[1] = (unint64_t)v20;
  v19 = 0xC00000000;
  sub_1C614CA14((uint64_t)&v18.n128_i64[1], (uint64_t)&v38);
  qword_1ED7F02F0 = 0;
  qword_1ED7F02E8 = (uint64_t)&qword_1ED7F02F0;
  qword_1ED7F02F8 = 0;
  sub_1C4DC0D58(&qword_1ED7F02E8, &qword_1ED7F02F0, v18.n128_u32[0], &v18);
  if ((_BYTE *)v18.n128_u64[1] != v20)
    free((void *)v18.n128_u64[1]);
  if (v38 != v40)
    free(v38);
  __cxa_atexit((void (*)(void *))sub_1C4DBAB48, &qword_1ED7F02E8, &dword_1C475E000);
  v38 = (void **)v40;
  LODWORD(v40[0]) = HIDWORD(qword_1ED7F0284);
  HIDWORD(v40[0]) = qword_1ED7F0284;
  v39 = 0xC00000002;
  v18.n128_u32[0] = 32;
  v18.n128_u64[1] = (unint64_t)v20;
  v19 = 0xC00000000;
  sub_1C614CA14((uint64_t)&v18.n128_i64[1], (uint64_t)&v38);
  v35 = v37;
  v37[0] = qword_1ED7F0284;
  v36 = 0xC00000002;
  v21 = 33;
  v22 = v24;
  v23 = 0xC00000000;
  sub_1C614CA14((uint64_t)&v22, (uint64_t)&v35);
  v9 = 0;
  qword_1ED7F0308 = 0;
  qword_1ED7F0310 = 0;
  qword_1ED7F0300 = (uint64_t)&qword_1ED7F0308;
  do
  {
    sub_1C4DC0D58(&qword_1ED7F0300, &qword_1ED7F0308, v18.n128_u32[v9], (__n128 *)((char *)&v18 + v9 * 4));
    v9 += 18;
  }
  while (v9 != 36);
  for (k = 0; k != -18; k -= 9)
  {
    v11 = (&v22)[k];
    if (&v24[k * 8] != v11)
      free(v11);
  }
  if (v35 != v37)
    free(v35);
  if (v38 != v40)
    free(v38);
  __cxa_atexit((void (*)(void *))sub_1C4DBAB48, &qword_1ED7F0300, &dword_1C475E000);
  qword_1ED7F028C = 0x8007FFFF800;
  *(_QWORD *)&dword_1ED7F0294 = 0x3000000050000000;
  v38 = (void **)v40;
  v40[0] = 0x8007FFFF800;
  v39 = 0xC00000002;
  v18.n128_u32[0] = 7;
  v18.n128_u64[1] = (unint64_t)v20;
  v19 = 0xC00000000;
  sub_1C614CA14((uint64_t)&v18.n128_i64[1], (uint64_t)&v38);
  v35 = v37;
  LODWORD(v37[0]) = HIDWORD(qword_1ED7F028C);
  HIDWORD(v37[0]) = qword_1ED7F028C;
  v36 = 0xC00000002;
  v21 = 8;
  v22 = v24;
  v23 = 0xC00000000;
  sub_1C614CA14((uint64_t)&v22, (uint64_t)&v35);
  v12 = 0;
  qword_1ED7F0320 = 0;
  qword_1ED7F0328 = 0;
  qword_1ED7F0318 = (uint64_t)&qword_1ED7F0320;
  do
  {
    sub_1C4DC0D58(&qword_1ED7F0318, &qword_1ED7F0320, v18.n128_u32[v12], (__n128 *)((char *)&v18 + v12 * 4));
    v12 += 18;
  }
  while (v12 != 36);
  for (m = 0; m != -18; m -= 9)
  {
    v14 = (&v22)[m];
    if (&v24[m * 8] != v14)
      free(v14);
  }
  if (v35 != v37)
    free(v35);
  if (v38 != v40)
    free(v38);
  return __cxa_atexit((void (*)(void *))sub_1C4DBAB48, &qword_1ED7F0318, &dword_1C475E000);
}

void llvm::FindFunctionBackedges(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  char *v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  __int128 v36;
  int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int v44;
  _BYTE v45[64];
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  int v49;
  _BYTE v50[64];
  void *v51;
  uint64_t v52;
  _QWORD v53[26];

  v53[24] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
    v3 = (char *)(v2 - 24);
  else
    v3 = 0;
  v5 = (uint64_t)(v3 + 40);
  v4 = (char *)*((_QWORD *)v3 + 5);
  if (v4 != v3 + 40)
  {
    if (v4)
      v6 = v4 - 24;
    else
      v6 = 0;
    if (v6[16] != 30)
    {
      switch(v6[16])
      {
        case 30:
LABEL_72:
          __break(1u);
          goto LABEL_73;
        case 31:
          v37 = (*((_DWORD *)v6 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_70;
        case 32:
        case 38:
LABEL_73:
          v37 = (*((_DWORD *)v6 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_70;
        case 33:
        case 37:
          break;
        case 36:
          v37 = *((_WORD *)v6 + 9) & 1;
          goto LABEL_70;
        case 39:
          v37 = *((_DWORD *)v6 + 20) + 1;
LABEL_70:
          if (!v37)
            return;
          break;
        default:
          return;
      }
    }
    v46 = v50;
    v47 = v50;
    v48 = 8;
    v49 = 0;
    v51 = v53;
    v52 = 0x800000000;
    v41 = v45;
    v42 = v45;
    v43 = 8;
    v44 = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v46, (uint64_t)v3);
    v8 = *((_QWORD *)v3 + 5);
    if (v8 == v5)
    {
      v9 = 0;
    }
    else
    {
      if (v8)
        v9 = v8 - 24;
      else
        v9 = 0;
      if (*(unsigned __int8 *)(v9 + 16) - 29 >= 0xB)
        v9 = 0;
    }
    v38 = v3;
    v39 = v9;
    v40 = 0;
    v10 = sub_1C4926708((uint64_t)&v51, (unint64_t)&v38, 1);
    v11 = (char *)v51 + 24 * v52;
    v12 = *(_OWORD *)v10;
    *((_QWORD *)v11 + 2) = *(_QWORD *)(v10 + 16);
    *(_OWORD *)v11 = v12;
    LODWORD(v52) = v52 + 1;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v41, (uint64_t)v3);
    v13 = v52;
LABEL_18:
    while (2)
    {
      v3 = (char *)v51 + 24 * v13;
      v14 = *((_QWORD *)v3 - 3);
      v15 = (_QWORD *)(v14 + 40);
      while (1)
      {
        v16 = (_QWORD *)*v15;
        if ((_QWORD *)*v15 == v15)
        {
LABEL_26:
          LODWORD(v6) = 0;
        }
        else
        {
          v17 = v16 - 3;
          if (!v16)
            v17 = 0;
          v18 = *((unsigned __int8 *)v17 + 16);
          v19 = v18 - 29;
          if (v18 != 30)
          {
            v6 = 0;
            switch(v19)
            {
              case 0:
              case 5:
              case 6:
                goto LABEL_27;
              case 1:
                goto LABEL_72;
              case 2:
                LODWORD(v6) = (*((_DWORD *)v17 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_27;
              case 3:
              case 9:
                LODWORD(v6) = (*((_DWORD *)v17 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_27;
              case 4:
                LODWORD(v6) = 2;
                goto LABEL_27;
              case 7:
                LODWORD(v6) = *((_WORD *)v17 + 9) & 1;
                goto LABEL_27;
              case 8:
                LODWORD(v6) = 1;
                goto LABEL_27;
              case 10:
                LODWORD(v6) = *((_DWORD *)v17 + 20) + 1;
                goto LABEL_27;
              default:
                goto LABEL_26;
            }
          }
          LODWORD(v6) = (*((_DWORD *)v17 + 5) & 0x7FFFFFF) == 3 ? 2 : 1;
        }
LABEL_27:
        v20 = *((_DWORD *)v3 - 2);
        if (v20 == (_DWORD)v6)
          break;
        v22 = *((_QWORD *)v3 - 2);
        v21 = *((_QWORD *)v3 - 1);
        *((_DWORD *)v3 - 2) = v20 + 1;
        v23 = *(unsigned __int8 *)(v22 + 16);
        if (v23 != 30)
          __asm { BR              X11 }
        v5 = *(_QWORD *)(v22 - 32 * v21 - 32);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v46, v5);
        if (v24)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v41, v5);
          v32 = *(_QWORD *)(v5 + 40);
          if (v32 == v5 + 40)
          {
            v33 = 0;
          }
          else
          {
            if (v32)
              v33 = v32 - 24;
            else
              v33 = 0;
            if (*(unsigned __int8 *)(v33 + 16) - 29 >= 0xB)
              v33 = 0;
          }
          v38 = (char *)v5;
          v39 = v33;
          v40 = 0;
          v34 = sub_1C4926708((uint64_t)&v51, (unint64_t)&v38, 1);
          v35 = (char *)v51 + 24 * v52;
          v36 = *(_OWORD *)v34;
          *((_QWORD *)v35 + 2) = *(_QWORD *)(v34 + 16);
          *(_OWORD *)v35 = v36;
          v13 = v52 + 1;
          LODWORD(v52) = v13;
          if (v13)
            goto LABEL_18;
          goto LABEL_61;
        }
        v25 = (char *)sub_1C477672C((uint64_t)&v41, v5);
        if (v42 == v41)
          v26 = (uint64_t *)((char *)&v43 + 4);
        else
          v26 = &v43;
        if (v25 != &v42[8 * *(unsigned int *)v26])
        {
          v27 = *(unsigned int *)(a2 + 8);
          if (v27 >= *(unsigned int *)(a2 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v27 + 1, 16);
            v27 = *(unsigned int *)(a2 + 8);
          }
          v28 = (_QWORD *)(*(_QWORD *)a2 + 16 * v27);
          *v28 = v14;
          v28[1] = v5;
          ++*(_DWORD *)(a2 + 8);
        }
      }
      v29 = *((_QWORD *)v51 + 3 * v52 - 3);
      LODWORD(v52) = v52 - 1;
      v30 = (char *)sub_1C477672C((uint64_t)&v41, v29);
      if (v42 == v41)
        v31 = (uint64_t *)((char *)&v43 + 4);
      else
        v31 = &v43;
      if (v30 != &v42[8 * *(unsigned int *)v31])
      {
        *(_QWORD *)v30 = -2;
        ++v44;
      }
      v13 = v52;
      if ((_DWORD)v52)
        continue;
      break;
    }
LABEL_61:
    if (v42 != v41)
      free(v42);
    if (v51 != v53)
      free(v51);
    if (v47 != v46)
      free(v47);
  }
}

uint64_t llvm::GetSuccessorNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == a1 + 40)
  {
    v3 = 0;
  }
  else
  {
    if (v2)
      v3 = v2 - 24;
    else
      v3 = 0;
    if (*(unsigned __int8 *)(v3 + 16) - 29 >= 0xB)
      v3 = 0;
  }
  v4 = 0;
  v5 = *(unsigned __int8 *)(v3 + 16);
  v6 = 1;
  while (v5 == 30)
  {
    v7 = *(_QWORD *)(v3 - 32 - 32 * v4++);
    v6 += 2;
    if (v7 == a2)
      return v4 - 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_1C4DC5F9C + 4 * byte_1C85F24D4[v5 - 31]))();
}

void sub_1C4DC5FF0()
{
  JUMPOUT(0x1C4DC5FDCLL);
}

void sub_1C4DC6004()
{
  JUMPOUT(0x1C4DC5F9CLL);
}

void sub_1C4DC601C(uint64_t a1@<X8>)
{
  if ((*(_WORD *)(a1 + 18) & 1) == 0)
    JUMPOUT(0x1C4DC5FA0);
  JUMPOUT(0x1C4DC5F9CLL);
}

void sub_1C4DC602C()
{
  JUMPOUT(0x1C4DC5F9CLL);
}

uint64_t llvm::isCriticalEdge(llvm *this, const llvm::Instruction *a2, int a3)
{
  int v3;

  v3 = *((unsigned __int8 *)this + 16);
  if (v3 == 30)
    return llvm::isCriticalEdge((uint64_t)this, *((_QWORD *)this - 4 * a2 - 4), a3);
  else
    return ((uint64_t (*)(void))((char *)sub_1C4DC60BC + 4 * byte_1C85F24DD[v3 - 31]))();
}

void sub_1C4DC60BC()
{
  JUMPOUT(0x1C4DC6098);
}

uint64_t llvm::isCriticalEdge(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t i;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;

  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 != 30)
    return ((uint64_t (*)(_QWORD))((char *)&loc_1C4DC6194 + 4 * byte_1C85F24E6[v3 - 29]))(0);
  if ((*(_DWORD *)(a1 + 20) & 0x7FFFFFF) != 3)
    return 0;
  for (i = *(_QWORD *)(a2 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v5 = *(_QWORD *)(i + 24);
    v6 = *(unsigned __int8 *)(v5 + 16);
    if (v5)
      v7 = v6 >= 0x1C;
    else
      v7 = 0;
    if (v7 && v6 - 29 < 0xB)
      break;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(i + 24) + 40);
  do
  {
    i = *(_QWORD *)(i + 8);
    result = i != 0;
    if (!i)
      return (a3 & 1) == 0 && i != 0;
    v11 = *(_QWORD *)(i + 24);
    v12 = *(unsigned __int8 *)(v11 + 16);
    if (v11)
      v13 = v12 >= 0x1C;
    else
      v13 = 0;
  }
  while (!v13 || v12 - 29 > 0xA);
  if (a3)
  {
    if (*(_QWORD *)(v11 + 40) == v9)
    {
      do
      {
        i = *(_QWORD *)(i + 8);
        result = i != 0;
        if (!i)
          break;
        v15 = *(_QWORD *)(i + 24);
        v16 = *(unsigned __int8 *)(v15 + 16);
        v17 = v15 && v16 >= 0x1C;
        v18 = !v17 || v16 - 29 > 0xA;
      }
      while (v18 || *(_QWORD *)(v15 + 40) == v9);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_1C4DC6290()
{
  JUMPOUT(0x1C4DC627CLL);
}

void sub_1C4DC62A0()
{
  JUMPOUT(0x1C4DC627CLL);
}

void sub_1C4DC62AC()
{
  JUMPOUT(0x1C4DC627CLL);
}

uint64_t llvm::isPotentiallyReachableFromMany(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t result;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  int v73;
  _BYTE v74[256];
  char *v75;
  char *v76;
  uint64_t v77;
  int v78;
  _BYTE v79[72];

  v6 = a4;
  if (a4 && !llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a4, a2))
    v6 = 0;
  if (a3 && *(_DWORD *)(a3 + 20) != *(_DWORD *)(a3 + 24))
    v6 = 0;
  v75 = v79;
  v76 = v79;
  v77 = 8;
  v78 = 0;
  if (a3 && a5)
  {
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 16;
    if (v10 == *(_QWORD *)a3)
      v11 = 20;
    v12 = *(unsigned int *)(a3 + v11);
    if ((_DWORD)v12)
    {
      v13 = 8 * v12;
      v14 = *(unint64_t **)(a3 + 8);
      while (*v14 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v14;
        v13 -= 8;
        if (!v13)
          goto LABEL_31;
      }
    }
    else
    {
      v14 = *(unint64_t **)(a3 + 8);
    }
    v15 = (unint64_t *)(v10 + 8 * v12);
    if (v14 != v15)
    {
      v16 = *v14;
LABEL_19:
      v17 = *((_DWORD *)a5 + 4);
      if (v17)
      {
        v18 = *a5;
        v19 = v17 - 1;
        v20 = ((v16 >> 4) ^ (v16 >> 9)) & (v17 - 1);
        v21 = *(_QWORD *)(*a5 + 16 * v20);
        if (v16 == v21)
        {
LABEL_24:
          v24 = *(_QWORD **)(v18 + 16 * v20 + 8);
          if (v24)
          {
            do
            {
              v25 = (uint64_t)v24;
              v24 = (_QWORD *)*v24;
            }
            while (v24);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v75, v25);
          }
        }
        else
        {
          v22 = 1;
          while (v21 != -4096)
          {
            v23 = v20 + v22++;
            v20 = v23 & v19;
            v21 = *(_QWORD *)(v18 + 16 * v20);
            if (v16 == v21)
              goto LABEL_24;
          }
        }
      }
      v26 = v14 + 1;
      while (v26 != v15)
      {
        v27 = *v26++;
        v16 = v27;
        if (v27 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v14 = v26 - 1;
          goto LABEL_19;
        }
      }
    }
  }
LABEL_31:
  if (a5)
  {
    v28 = *((_DWORD *)a5 + 4);
    if (v28)
    {
      v29 = *a5;
      v30 = v28 - 1;
      v31 = (v28 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v32 = *(_QWORD *)(*a5 + 16 * v31);
      if (v32 == a2)
      {
LABEL_37:
        v35 = *(_QWORD **)(v29 + 16 * v31 + 8);
        if (v35)
        {
          do
          {
            v36 = v35;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
          goto LABEL_41;
        }
      }
      else
      {
        v33 = 1;
        while (v32 != -4096)
        {
          v34 = v31 + v33++;
          v31 = v34 & v30;
          v32 = *(_QWORD *)(v29 + 16 * v31);
          if (v32 == a2)
            goto LABEL_37;
        }
      }
    }
  }
  v36 = 0;
LABEL_41:
  v37 = dword_1ED7F0470;
  v70 = v74;
  v71 = v74;
  v72 = 32;
  v73 = 0;
  v38 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      v39 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v38 - 8);
      *(_DWORD *)(a1 + 8) = v38 - 1;
      result = (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v70, v39);
      if (!v41)
        goto LABEL_71;
      if (v39 == a2)
        goto LABEL_102;
      if (a3)
      {
        result = (uint64_t)sub_1C477672C(a3, v39);
        v42 = *(_QWORD *)(a3 + 8);
        v43 = 16;
        if (v42 == *(_QWORD *)a3)
          v43 = 20;
        if (result != v42 + 8 * *(unsigned int *)(a3 + v43))
          goto LABEL_71;
      }
      if (v6)
      {
        result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v6, v39, a2);
        if ((result & 1) != 0)
          goto LABEL_102;
      }
      if (!a5)
      {
        if (!--v37)
          goto LABEL_102;
        break;
      }
      v44 = *((_DWORD *)a5 + 4);
      if (v44)
      {
        v45 = *a5;
        v46 = v44 - 1;
        v47 = (v44 - 1) & ((v39 >> 4) ^ (v39 >> 9));
        v48 = *(_QWORD *)(*a5 + 16 * v47);
        if (v39 == v48)
        {
LABEL_56:
          v51 = *(_QWORD **)(v45 + 16 * v47 + 8);
          if (v51)
          {
            do
            {
              v52 = (uint64_t)v51;
              v51 = (_QWORD *)*v51;
            }
            while (v51);
            goto LABEL_60;
          }
        }
        else
        {
          v49 = 1;
          while (v48 != -4096)
          {
            v50 = v47 + v49++;
            v47 = v50 & v46;
            v48 = *(_QWORD *)(v45 + 16 * v47);
            if (v39 == v48)
              goto LABEL_56;
          }
        }
      }
      v52 = 0;
LABEL_60:
      v53 = (char *)sub_1C477672C((uint64_t)&v75, v52);
      if (v76 == v75)
        v54 = (uint64_t *)((char *)&v77 + 4);
      else
        v54 = &v77;
      if (v53 == &v76[8 * *(unsigned int *)v54])
        result = v52;
      else
        result = 0;
      if (v36 && (_QWORD *)result == v36 || (--v37, !v37))
      {
LABEL_102:
        v69 = 1;
LABEL_104:
        if (v71 != v70)
          free(v71);
        if (v76 != v75)
          free(v76);
        return v69;
      }
      if (!result)
        break;
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks((_QWORD *)result, a1);
LABEL_71:
      v38 = *(_DWORD *)(a1 + 8);
      if (!v38)
        goto LABEL_103;
    }
    v55 = *(_QWORD *)(v39 + 40);
    if (v55 == v39 + 40)
    {
LABEL_83:
      v56 = 0;
      v61 = 0;
      goto LABEL_84;
    }
    v56 = v55 - 24;
    v57 = v55 ? v55 - 24 : 0;
    v58 = *(unsigned __int8 *)(v57 + 16);
    v59 = v58 - 29;
    if (v58 != 30)
      break;
    if ((*(_DWORD *)(v57 + 20) & 0x7FFFFFF) == 3)
      v60 = 2;
    else
      v60 = 1;
LABEL_82:
    v61 = v60;
LABEL_84:
    v62 = *(unsigned int *)(a1 + 8);
    v63 = v62 + (int)v61;
    if (v63 <= *(unsigned int *)(a1 + 12))
    {
      if ((_DWORD)v61)
        goto LABEL_87;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v63, 8);
      v62 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v61)
      {
LABEL_87:
        v64 = 0;
        v65 = 0;
        v66 = (_QWORD *)(*(_QWORD *)a1 + 8 * v62);
        v67 = *(unsigned __int8 *)(v56 + 16);
        v68 = v56 - 64;
        do
        {
          if (v67 != 30)
            __asm { BR              X1 }
          *v66++ = *(_QWORD *)(v56 - 32 - 32 * v65++);
          v64 += 2;
          v68 += 32;
        }
        while (2 * v61 != v64);
      }
    }
    v38 = v62 + v61;
    *(_DWORD *)(a1 + 8) = v38;
    if (!v38)
    {
LABEL_103:
      v69 = 0;
      goto LABEL_104;
    }
  }
  v60 = 0;
  switch(v59)
  {
    case 0:
    case 5:
    case 6:
      goto LABEL_82;
    case 1:
      __break(1u);
      break;
    case 2:
      v60 = (*(_DWORD *)(v57 + 20) >> 1) & 0x3FFFFFF;
      goto LABEL_82;
    case 3:
    case 9:
      v60 = (*(_DWORD *)(v57 + 20) & 0x7FFFFFF) - 1;
      goto LABEL_82;
    case 4:
      v60 = 2;
      goto LABEL_82;
    case 7:
      v60 = *(_WORD *)(v57 + 18) & 1;
      goto LABEL_82;
    case 8:
      v60 = 1;
      goto LABEL_82;
    case 10:
      v60 = *(_DWORD *)(v57 + 80) + 1;
      goto LABEL_82;
    default:
      goto LABEL_83;
  }
  return result;
}

uint64_t llvm::isPotentiallyReachable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t isPotentiallyReachableFromMany;
  uint64_t v13;
  uint64_t v14;
  void *v16[2];
  _QWORD v17[33];

  v17[32] = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a4, a1)
      && !llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a4, a2))
    {
      return 0;
    }
    if (!a3 || *(_DWORD *)(a3 + 20) == *(_DWORD *)(a3 + 24))
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 80);
      if (v10)
        v11 = v10 - 24;
      else
        v11 = 0;
      if (v11 == a1 && llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a4, a2))
        return 1;
      v13 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 80);
      v14 = v13 ? v13 - 24 : 0;
      if (v14 == a2 && llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry(a4, a1))
        return 0;
    }
  }
  v16[0] = v17;
  v17[0] = a1;
  v16[1] = (void *)0x2000000001;
  isPotentiallyReachableFromMany = llvm::isPotentiallyReachableFromMany((uint64_t)v16, a2, a3, a4, a5);
  if (v16[0] != v17)
    free(v16[0]);
  return isPotentiallyReachableFromMany;
}

uint64_t llvm::isPotentiallyReachable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t isPotentiallyReachableFromMany;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[33];

  v42[32] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 40);
  if (v6 != *(_QWORD *)(a2 + 40))
    return llvm::isPotentiallyReachable(v6, *(_QWORD *)(a2 + 40), a3, a4, (uint64_t *)a5);
  if (a5)
  {
    v8 = *(_DWORD *)(a5 + 16);
    if (v8)
    {
      v9 = *(_QWORD *)a5;
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v12 = *(_QWORD *)(*(_QWORD *)a5 + 16 * v11);
      if (v6 == v12)
      {
LABEL_9:
        v15 = *(_QWORD *)(v9 + 16 * v11 + 8) != 0;
LABEL_13:
        isPotentiallyReachableFromMany = 1;
        if (a1 == a2 || v15)
          return isPotentiallyReachableFromMany;
        goto LABEL_15;
      }
      v13 = 1;
      while (v12 != -4096)
      {
        v14 = v11 + v13++;
        v11 = v14 & v10;
        v12 = *(_QWORD *)(v9 + 16 * v11);
        if (v6 == v12)
          goto LABEL_9;
      }
    }
    v15 = 0;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
LABEL_15:
    v17 = *(__int16 *)(v6 + 18);
    if ((v17 & 0x80000000) == 0)
    {
      v31 = *(_QWORD *)(v6 + 48);
      if (v31 != v6 + 40)
      {
        v32 = 0;
        do
        {
          v33 = v31 - 24;
          if (!v31)
            v33 = 0;
          *(_DWORD *)(v33 + 56) = v32++;
          v31 = *(_QWORD *)(v31 + 8);
        }
        while (v31 != v6 + 40);
      }
      *(_WORD *)(v6 + 18) = v17 | 0x8000;
    }
    if (*(_DWORD *)(a1 + 56) >= *(_DWORD *)(a2 + 56))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 80);
      if (v18)
        v19 = v18 - 24;
      else
        v19 = 0;
      if (v19 == v6)
        return 0;
      v40 = v42;
      v41 = 0x2000000000;
      v20 = *(_QWORD *)(v6 + 40);
      if (v20 == v6 + 40)
      {
LABEL_38:
        v25 = 0;
        v23 = 0;
      }
      else
      {
        if (v20)
          v21 = v20 - 24;
        else
          v21 = 0;
        v22 = *(unsigned __int8 *)(v21 + 16);
        if (v22 == 30)
        {
          if ((*(_DWORD *)(v21 + 20) & 0x7FFFFFF) == 3)
            v23 = 2;
          else
            v23 = 1;
        }
        else
        {
          v34 = v22 - 29;
          v24 = 0;
          v23 = 0;
          v25 = 0;
          switch(v34)
          {
            case 0:
            case 5:
            case 6:
              goto LABEL_32;
            case 1:
              __break(1u);
              break;
            case 2:
              v23 = (*(_DWORD *)(v21 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_30;
            case 3:
            case 9:
              break;
            case 4:
              v24 = 0;
              v25 = 0;
              v23 = 2;
              goto LABEL_32;
            case 7:
              v23 = *(_WORD *)(v21 + 18) & 1;
              goto LABEL_30;
            case 8:
              v24 = 0;
              v25 = 0;
              v23 = 1;
              goto LABEL_32;
            case 10:
              v23 = *(_DWORD *)(v21 + 80) + 1;
              goto LABEL_30;
            default:
              goto LABEL_38;
          }
          v23 = (*(_DWORD *)(v21 + 20) & 0x7FFFFFF) - 1;
        }
LABEL_30:
        if (v23 >= 0x21)
        {
          v39 = a2;
          v35 = v23;
          v38 = a3;
          v36 = a4;
          v37 = a5;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, (int)v23, 8);
          v23 = v35;
          a2 = v39;
          a3 = v38;
          a4 = v36;
          a5 = v37;
          v24 = v41;
          v25 = v41;
        }
        else
        {
          v24 = 0;
          v25 = 0;
        }
LABEL_32:
        if (v23)
        {
          v26 = 0;
          v27 = 0;
          v28 = (char *)v40 + 8 * v24;
          v29 = *(unsigned __int8 *)(v20 - 8);
          v30 = v20 - 88;
          do
          {
            if (v29 != 30)
              __asm { BR              X24 }
            *v28++ = *(_QWORD *)(v20 - 56 - 32 * v27++);
            v26 += 2;
            v30 += 32;
          }
          while (2 * v23 != v26);
        }
      }
      LODWORD(v41) = v25 + v23;
      if (v25 + v23)
        isPotentiallyReachableFromMany = llvm::isPotentiallyReachableFromMany((uint64_t)&v40, *(_QWORD *)(a2 + 40), a3, a4, (uint64_t *)a5);
      else
        isPotentiallyReachableFromMany = 0;
      if (v40 != v42)
        free(v40);
      return isPotentiallyReachableFromMany;
    }
  }
  return 1;
}

uint64_t sub_1C4DC6E24()
{
  int v1;
  int *v2;
  __int128 v3;
  int v4;

  v4 = 1;
  *(_QWORD *)&v3 = "Max number of BBs to explore for reachability analysis";
  *((_QWORD *)&v3 + 1) = 54;
  v1 = 32;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED7F03F0, "dom-tree-reachability-max-bbs-to-explore", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F03F0, &dword_1C475E000);
}

void llvm::initializeCFGViewerLegacyPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82CFF0);
  if (v1 != -1)
  {
    v4[0] = sub_1C4DC6F08;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82CFF0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4DC6F08(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "View CFG of function";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "view-cfg";
  *(_QWORD *)(v2 + 24) = 8;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBC0;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4DC82B0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C4DC6F9C(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ****v9;
  uint64_t ***v10;
  int v11;
  int v12;
  uint64_t ***v13;
  char *v14;
  uint64_t **v15;
  uint64_t **v16;
  _WORD v17[20];
  _QWORD v18[4];
  __int16 v19;
  _QWORD *v20;
  _QWORD v21[4];
  char v22;
  char v23;
  char v24;

  v21[0] = a1;
  v21[1] = a2;
  v21[2] = a3;
  v21[3] = a4;
  v22 = byte_1ED7F06B0;
  v23 = byte_1ED7F0830;
  v24 = byte_1ED7F0770;
  v20 = v21;
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
  {
    v15 = 0;
    v14 = &byte_1C871356D;
    goto LABEL_10;
  }
  v5 = ***a1;
  v6 = *(_QWORD *)(v5 + 152);
  v7 = *(unsigned int *)(v5 + 168);
  if (!(_DWORD)v7)
    goto LABEL_8;
  LODWORD(v8) = (v7 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v9 = (uint64_t ****)(v6 + 16 * v8);
  v10 = *v9;
  if (*v9 != a1)
  {
    v11 = 1;
    while (v10 != (uint64_t ***)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v10 = *(uint64_t ****)(v6 + 16 * v8);
      if (v10 == a1)
      {
        v9 = (uint64_t ****)(v6 + 16 * v8);
        goto LABEL_9;
      }
    }
LABEL_8:
    v9 = (uint64_t ****)(v6 + 16 * v7);
  }
LABEL_9:
  v13 = v9[1];
  v16 = *v13;
  v14 = (char *)(v13 + 2);
  v15 = v16;
LABEL_10:
  v19 = 1283;
  v18[0] = "cfg.";
  v18[2] = v14;
  v18[3] = v15;
  v17[16] = 257;
  sub_1C4DC76F0((uint64_t)&v20, (llvm::Twine *)v18, a5, (llvm::Twine *)v17);
}

void llvm::initializeCFGOnlyViewerLegacyPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82CFF8);
  if (v1 != -1)
  {
    v4[0] = sub_1C4DC7104;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82CFF8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4DC7104(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "View CFG of function (with no function bodies)";
  *(_QWORD *)(v2 + 8) = 46;
  *(_QWORD *)(v2 + 16) = "view-cfg-only";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBC1;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4DC85E8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::initializeCFGPrinterLegacyPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D000);
  if (v1 != -1)
  {
    v4[0] = sub_1C4DC71F8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D000, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4DC71F8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Print CFG of function to 'dot' file";
  *(_QWORD *)(v2 + 8) = 35;
  *(_QWORD *)(v2 + 16) = "dot-cfg";
  *(_QWORD *)(v2 + 24) = 7;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBC2;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4DC8920;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C4DC728C(uint64_t ***a1, uint64_t a2, char *a3, uint64_t **a4, char a5)
{
  size_t v10;
  void **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ****v17;
  uint64_t ***v18;
  int v19;
  int v20;
  uint64_t ***v21;
  char *v22;
  uint64_t **v23;
  uint64_t **v24;
  llvm *v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  const char *v28;
  size_t v29;
  llvm::raw_ostream *v30;
  _DWORD *v31;
  void **v32;
  uint64_t v33;
  llvm *v34;
  llvm::raw_ostream *v35;
  void *v36;
  llvm::raw_ostream *v37;
  _BYTE *v38;
  void *__p[2];
  char v40;
  __int16 v41;
  _QWORD *v42;
  _QWORD v43[4];
  __int16 v44;
  int v45[4];
  _QWORD v46[2];
  char *v47;
  uint64_t **v48;
  __int16 v49;
  char v50;
  char *v51;
  size_t v52;
  char v53;

  if (byte_1ED7F0AB7 >= 0)
    v10 = byte_1ED7F0AB7 & 0x7F;
  else
    v10 = qword_1ED7F0AA8;
  v11 = __p;
  sub_1C484371C((uint64_t)__p, v10 + 1);
  if (v40 < 0)
    v11 = (void **)__p[0];
  if (v10)
  {
    if (byte_1ED7F0AB7 >= 0)
      v12 = &qword_1ED7F0AA0;
    else
      v12 = (uint64_t *)qword_1ED7F0AA0;
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)v11 + v10) = 46;
  if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
  {
    v13 = ***a1;
    v14 = *(_QWORD *)(v13 + 152);
    v15 = *(unsigned int *)(v13 + 168);
    if ((_DWORD)v15)
    {
      LODWORD(v16) = (v15 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      v17 = (uint64_t ****)(v14 + 16 * v16);
      v18 = *v17;
      if (*v17 == a1)
      {
LABEL_19:
        v21 = v17[1];
        v24 = *v21;
        v22 = (char *)(v21 + 2);
        v23 = v24;
        goto LABEL_20;
      }
      v19 = 1;
      while (v18 != (uint64_t ***)-4096)
      {
        v20 = v16 + v19++;
        v16 = v20 & (v15 - 1);
        v18 = *(uint64_t ****)(v14 + 16 * v16);
        if (v18 == a1)
        {
          v17 = (uint64_t ****)(v14 + 16 * v16);
          goto LABEL_19;
        }
      }
    }
    v17 = (uint64_t ****)(v14 + 16 * v15);
    goto LABEL_19;
  }
  v23 = 0;
  v22 = &byte_1C871356D;
LABEL_20:
  v46[0] = __p;
  v47 = v22;
  v48 = v23;
  v49 = 1284;
  v43[0] = v46;
  v43[2] = ".dot";
  v44 = 770;
  llvm::Twine::str((llvm::Twine *)v43, &v51);
  if (v40 < 0)
    operator delete(__p[0]);
  v26 = (llvm::raw_ostream *)llvm::errs(v25);
  v27 = *((_QWORD *)v26 + 4);
  if ((unint64_t)(*((_QWORD *)v26 + 3) - v27) > 8)
  {
    *(_BYTE *)(v27 + 8) = 39;
    *(_QWORD *)v27 = *(_QWORD *)"Writing '";
    *((_QWORD *)v26 + 4) += 9;
  }
  else
  {
    v26 = llvm::raw_ostream::write(v26, "Writing '", 9uLL);
  }
  if (v53 >= 0)
    v28 = (const char *)&v51;
  else
    v28 = v51;
  if (v53 >= 0)
    v29 = v53 & 0x7F;
  else
    v29 = v52;
  v30 = llvm::raw_ostream::write(v26, v28, v29);
  v31 = (_DWORD *)*((_QWORD *)v30 + 4);
  if (*((_QWORD *)v30 + 3) - (_QWORD)v31 > 3uLL)
  {
    *v31 = 774778407;
    *((_QWORD *)v30 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v30, "'...", 4uLL);
  }
  v45[0] = 0;
  std::system_category();
  if (v53 >= 0)
    v32 = (void **)&v51;
  else
    v32 = (void **)v51;
  if (v53 >= 0)
    v33 = v53 & 0x7F;
  else
    v33 = v52;
  v34 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v43, v32, v33, (uint64_t)v45, 1);
  v46[0] = a1;
  v46[1] = a2;
  v47 = a3;
  v48 = a4;
  LOBYTE(v49) = byte_1ED7F06B0;
  HIBYTE(v49) = byte_1ED7F0830;
  v50 = byte_1ED7F0770;
  if (v45[0])
  {
    v35 = (llvm::raw_ostream *)llvm::errs(v34);
    v36 = (void *)*((_QWORD *)v35 + 4);
    if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 0x20uLL)
    {
      qmemcpy(v36, "  error opening file for writing!", 33);
      *((_QWORD *)v35 + 4) += 33;
    }
    else
    {
      v35 = llvm::raw_ostream::write(v35, "  error opening file for writing!", 0x21uLL);
    }
  }
  else
  {
    v42 = v46;
    v41 = 257;
    v35 = (llvm::raw_ostream *)sub_1C4DC8948((uint64_t)v43, (uint64_t)&v42, a5, (llvm::Twine *)__p);
  }
  v37 = (llvm::raw_ostream *)llvm::errs(v35);
  v38 = (_BYTE *)*((_QWORD *)v37 + 4);
  if (*((_BYTE **)v37 + 3) == v38)
  {
    llvm::raw_ostream::write(v37, "\n", 1uLL);
  }
  else
  {
    *v38 = 10;
    ++*((_QWORD *)v37 + 4);
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v43);
  if (v53 < 0)
    operator delete(v51);
}

void llvm::initializeCFGOnlyPrinterLegacyPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82D008);
  if (v1 != -1)
  {
    v4[0] = sub_1C4DC765C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82D008, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4DC765C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Print CFG of function to 'dot' file (with no function bodies)";
  *(_QWORD *)(v2 + 8) = 61;
  *(_QWORD *)(v2 + 16) = "dot-cfg-only";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1EF8EFBC3;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C4DCB11C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C4DC76F0(uint64_t a1, llvm::Twine *a2, char a3, llvm::Twine *a4)
{
  llvm *v7;
  llvm *v8;
  llvm::raw_ostream *v9;
  _QWORD *v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  void **v13;
  size_t v14;
  llvm::raw_ostream *v15;
  void *v16;
  char v17;
  size_t v18;
  __int128 *v19;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;
  void *v24[2];
  char v25;
  __int128 v26;
  uint64_t v27;
  int v28;

  v28 = 0;
  llvm::Twine::str(a2, v24);
  v23 = 260;
  v22[0] = v24;
  llvm::createGraphFilename((llvm::Twine *)v22, &v28, &v26);
  *(_OWORD *)__p = v26;
  v21 = v27;
  HIBYTE(v27) = 0;
  LOBYTE(v26) = 0;
  if (v25 < 0)
    operator delete(v24[0]);
  v7 = (llvm *)llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v22, v28, 1, 0, 0);
  if (v28 == -1)
  {
    v11 = (llvm::raw_ostream *)llvm::errs(v7);
    v12 = *((_QWORD *)v11 + 4);
    if ((unint64_t)(*((_QWORD *)v11 + 3) - v12) > 0x13)
    {
      *(_DWORD *)(v12 + 16) = 656434540;
      *(_OWORD *)v12 = *(_OWORD *)"error opening file '";
      *((_QWORD *)v11 + 4) += 20;
    }
    else
    {
      v11 = llvm::raw_ostream::write(v11, "error opening file '", 0x14uLL);
    }
    if (v21 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (v21 >= 0)
      v14 = HIBYTE(v21) & 0x7F;
    else
      v14 = (size_t)__p[1];
    v15 = llvm::raw_ostream::write(v11, (const char *)v13, v14);
    v16 = (void *)*((_QWORD *)v15 + 4);
    if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 0xEuLL)
    {
      qmemcpy(v16, "' for writing!\n", 15);
      *((_QWORD *)v15 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v15, "' for writing!\n", 0xFuLL);
    }
    HIBYTE(v27) = 0;
    LOBYTE(v26) = 0;
  }
  else
  {
    v8 = (llvm *)sub_1C4DC8948((uint64_t)v22, a1, a3, a4);
    v9 = (llvm::raw_ostream *)llvm::errs(v8);
    v10 = (_QWORD *)*((_QWORD *)v9 + 4);
    if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 7uLL)
    {
      *v10 = 0xA202E656E6F6420;
      *((_QWORD *)v9 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v9, " done. \n", 8uLL);
    }
    v26 = *(_OWORD *)__p;
    v27 = v21;
    __p[1] = 0;
    v21 = 0;
    __p[0] = 0;
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v22);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  v17 = HIBYTE(v27);
  if (v27 >= 0)
    v18 = HIBYTE(v27) & 0x7F;
  else
    v18 = *((_QWORD *)&v26 + 1);
  if (v18)
  {
    if (v27 >= 0)
      v19 = &v26;
    else
      v19 = (__int128 *)v26;
    llvm::DisplayGraph(v19, v18, 0, 0);
    v17 = HIBYTE(v27);
  }
  if (v17 < 0)
    operator delete((void *)v26);
}

void llvm::Function::viewCFGOnly(llvm::Function *this, Function *a2, const llvm::BranchProbabilityInfo *a3)
{
  llvm::Function::viewCFG(this, 1, a2, a3);
}

uint64_t llvm::createCFGPrinterLegacyPassPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C4DC7974(v1);
}

uint64_t sub_1C4DC7974(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBC2;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8134F88;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82D000);
  if (v3 != -1)
  {
    v7[0] = sub_1C4DC71F8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82D000, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t llvm::createCFGOnlyPrinterLegacyPassPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C4DC7A64(v1);
}

uint64_t sub_1C4DC7A64(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8EFBC3;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8135028;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED82D008);
  if (v3 != -1)
  {
    v7[0] = sub_1C4DC765C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED82D008, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void llvm::DOTGraphTraits<llvm::DOTFuncInfo *>::computeDeoptOrUnreachablePaths(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  const void *v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  _BYTE *v11;
  const void *v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE *v16;
  _BYTE *v17;
  void *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int v31;
  _QWORD *v32;
  BOOL v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  void *v53;
  int v54;
  uint64_t v55;
  void *v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  void *v61;
  int v62;
  uint64_t v63;
  _BYTE *v64;
  void *v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  _BYTE v69[64];
  void *v70;
  uint64_t v71;
  _BYTE v72[192];
  __int128 v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  _BYTE v77[64];
  void *v78;
  uint64_t v79;
  _QWORD v80[26];

  v80[24] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  v45 = v4;
  sub_1C4DC05B0(&v45, (uint64_t)&v48);
  v5 = v77;
  *(_QWORD *)&v73 = v77;
  v6 = v49;
  if (v49 == v48)
  {
    *((_QWORD *)&v73 + 1) = v77;
    v7 = v49;
  }
  else
  {
    LODWORD(v10) = v50;
    v5 = malloc_type_malloc(8 * v50, 0x4065EBACuLL);
    if (!v5)
    {
LABEL_114:
      if ((_DWORD)v10)
        goto LABEL_119;
      v5 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v5)
        goto LABEL_119;
    }
    *((_QWORD *)&v73 + 1) = v5;
    v7 = v48;
    v6 = v49;
  }
  v8 = v51;
  v74 = v50;
  if (v6 == v7)
    v9 = v51;
  else
    v9 = v50;
  if (v9)
  {
    memmove(v5, v6, 8 * v9);
    v8 = v51;
  }
  v75 = v8;
  v76 = v52;
  v10 = v80;
  v78 = v80;
  v79 = 0x800000000;
  if (v54)
    sub_1C4DB22B8((uint64_t)&v78, (uint64_t *)&v53);
  v11 = v69;
  v64 = v69;
  v12 = v57;
  if (v57 != v56)
  {
    v44 = v58;
    v11 = malloc_type_malloc(8 * v58, 0x4065EBACuLL);
    if (v11 || !v44 && (v11 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v65 = v11;
      v13 = v56;
      v12 = v57;
      goto LABEL_15;
    }
LABEL_119:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v65 = v69;
  v13 = v57;
LABEL_15:
  v66 = v58;
  v14 = v59;
  if (v12 == v13)
    v15 = v59;
  else
    v15 = v58;
  if (v15)
  {
    memmove(v11, v12, 8 * v15);
    v14 = v59;
  }
  v67 = v14;
  v68 = v60;
  v70 = v72;
  v71 = 0x800000000;
  if (v62)
    sub_1C4DB22B8((uint64_t)&v70, (uint64_t *)&v61);
  ++a1;
  v16 = &unk_1ED7F0000;
  v17 = &unk_1ED7F0000;
  v18 = &unk_1C85F2538;
  while (1)
  {
    if ((_DWORD)v79 != (_DWORD)v71)
      goto LABEL_33;
    if (!(_DWORD)v79)
      break;
    v19 = v70;
    v20 = v78;
    while (*(_QWORD *)v20 == *(_QWORD *)v19 && v20[4] == v19[4])
    {
      v20 += 6;
      v19 += 6;
      if (v20 == (_DWORD *)((char *)v78 + 24 * v79))
        goto LABEL_92;
    }
LABEL_33:
    v22 = *((_QWORD *)v78 + 3 * v79 - 3);
    v46 = v22;
    v23 = *(_QWORD *)(v22 + 40);
    if (v23 == v22 + 40)
    {
      v36 = 0;
LABEL_58:
      if (v16[1328] && *(_BYTE *)(v36 + 16) == 35)
      {
LABEL_73:
        v33 = 1;
        goto LABEL_50;
      }
      v33 = 0;
      if (v17[1520] && v23 != v22 + 40)
      {
        v37 = v23 - 24;
        if (!v23)
          v37 = 0;
        v38 = *(unsigned __int8 *)(v37 + 16);
        if (v38 != 29)
          v37 = 0;
        if (v23)
          v39 = v38 == 29;
        else
          v39 = 0;
        if (v39)
        {
          v40 = *(_QWORD *)(v22 + 48);
          v41 = v40 ? v40 - 24 : 0;
          if (v37 != v41 && *(_QWORD *)(*(_QWORD *)(v37 + 40) + 48) != v37 + 24)
          {
            v42 = *(_QWORD *)(v37 + 24);
            if (v42)
            {
              if (*(_BYTE *)(v42 - 8) == 84)
              {
                v43 = *(_QWORD *)(v42 - 56);
                if (v43)
                {
                  if (!*(_BYTE *)(v43 + 16)
                    && *(_QWORD *)(v43 + 24) == *(_QWORD *)(v42 + 48)
                    && *(_DWORD *)(v43 + 36) == 119)
                  {
                    goto LABEL_73;
                  }
                }
              }
            }
          }
        }
        v33 = 0;
      }
    }
    else
    {
      if (v23)
        v24 = v23 - 24;
      else
        v24 = 0;
      v25 = *(unsigned __int8 *)(v24 + 16);
      if (v25 != 30)
      {
        v26 = 2;
        switch(*(_BYTE *)(v24 + 16))
        {
          case 0x1E:
            __break(1u);
            goto LABEL_114;
          case 0x1F:
            v35 = (*(_DWORD *)(v24 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_54;
          case 0x20:
          case 0x26:
            v35 = (*(_DWORD *)(v24 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_54;
          case 0x21:
            goto LABEL_41;
          case 0x24:
            v35 = *(_WORD *)(v24 + 18) & 1;
            goto LABEL_54;
          case 0x25:
            v26 = 1;
            goto LABEL_41;
          case 0x27:
            v35 = *(_DWORD *)(v24 + 80) + 1;
LABEL_54:
            if (!v35)
              goto LABEL_55;
            if (v25 != 31)
              __asm { BR              X9 }
            v26 = (*(_DWORD *)(v24 + 20) >> 1) & 0x3FFFFFF;
            if (!v26)
              goto LABEL_73;
            goto LABEL_41;
          default:
LABEL_55:
            if (*(unsigned __int8 *)(v24 + 16) - 29 >= 0xB)
              v36 = 0;
            else
              v36 = v24;
            goto LABEL_58;
        }
      }
      if ((*(_DWORD *)(v24 + 20) & 0x7FFFFFF) == 3)
        v26 = 2;
      else
        v26 = 1;
LABEL_41:
      v27 = v18;
      v28 = 0;
      v29 = v26 - 1;
      v30 = (uint64_t *)(v24 - 32);
      do
      {
        v31 = *(unsigned __int8 *)(v24 + 16);
        if (v31 != 30)
          __asm { BR              X9 }
        v47 = *v30;
        v32 = sub_1C617F758(a1, &v47);
        v33 = *((_BYTE *)v32 + 8) != 0;
        if (*((_BYTE *)v32 + 8))
          v34 = v29 == v28;
        else
          v34 = 1;
        ++v28;
        v30 -= 4;
      }
      while (!v34);
      v16 = (_BYTE *)&unk_1ED7F0000;
      v17 = (_BYTE *)&unk_1ED7F0000;
      v18 = v27;
    }
LABEL_50:
    *((_BYTE *)sub_1C617F758(a1, &v46) + 8) = v33;
    LODWORD(v79) = v79 - 1;
    if ((_DWORD)v79)
      sub_1C4DB1EA4(&v73);
  }
LABEL_92:
  if (v70 != v72)
    free(v70);
  if (v65 != v64)
    free(v65);
  if (v78 != v80)
    free(v78);
  if (*((_QWORD *)&v73 + 1) != (_QWORD)v73)
    free(*((void **)&v73 + 1));
  if (v61 != &v63)
    free(v61);
  if (v57 != v56)
    free(v57);
  if (v53 != &v55)
    free(v53);
  if (v49 != v48)
    free(v49);
}

BOOL llvm::DOTGraphTraits<llvm::DOTFuncInfo *>::isNodeHidden(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t BlockFreq;
  double v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a2;
  if (word_1ED7F0878)
  {
    v5 = *(_QWORD *)(a3 + 8);
    if (v5)
    {
      BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(*(uint64_t **)(a3 + 8), a2);
      v7 = *(_QWORD *)v5 ? (double)*(unint64_t *)(*(_QWORD *)(*(_QWORD *)v5 + 8) + 16) : 0.0;
      if ((double)(unint64_t)BlockFreq / v7 < *(double *)&xmmword_1ED7F08F0)
        return 1;
    }
  }
  if (!(byte_1ED7F0530 | byte_1ED7F05F0))
    return 0;
  v10 = a2;
  v11 = 0;
  if (!sub_1C61252B8((uint64_t *)(a1 + 8), &v10, &v11)
    || v11 == *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    llvm::DOTGraphTraits<llvm::DOTFuncInfo *>::computeDeoptOrUnreachablePaths((uint64_t *)a1, *(_QWORD *)(a2 + 56));
  }
  return *((_BYTE *)sub_1C617F758((uint64_t *)(a1 + 8), &v9) + 8) != 0;
}

uint64_t sub_1C4DC82B0()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8EFBC0;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E8134DE8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED82CFF0);
  if (v2 != -1)
  {
    v6[0] = sub_1C4DC6F08;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED82CFF0, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C4DC8394(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4DC83BC(uint64_t a1, uint64_t a2)
{
  void *result;

  sub_1C4771E64(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  result = sub_1C4771E64(a2, a2, (uint64_t)&llvm::BranchProbabilityInfoWrapperPass::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C4DC8404(uint64_t a1, uint64_t ***a2)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ****v9;
  uint64_t ***v10;
  int v11;
  int v12;
  uint64_t ***v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  void **v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t BlockFreq;
  uint64_t v30[2];

  if (byte_1ED7F09CF >= 0)
    v4 = byte_1ED7F09CF & 0x7F;
  else
    v4 = qword_1ED7F09C0;
  if (v4)
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v15 = 0;
      v14 = &byte_1C871356D;
LABEL_14:
      v30[0] = (uint64_t)v14;
      v30[1] = v15;
      if (byte_1ED7F09CF >= 0)
        v17 = (char *)&qword_1ED7F09B8;
      else
        v17 = (char *)qword_1ED7F09B8;
      if (llvm::StringRef::find(v30, v17, v4, 0) == -1)
        return 0;
      goto LABEL_18;
    }
    v5 = ***a2;
    v6 = *(_QWORD *)(v5 + 152);
    v7 = *(unsigned int *)(v5 + 168);
    if ((_DWORD)v7)
    {
      LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v9 = (uint64_t ****)(v6 + 16 * v8);
      v10 = *v9;
      if (*v9 == a2)
      {
LABEL_13:
        v13 = v9[1];
        v16 = (uint64_t)*v13;
        v14 = (char *)(v13 + 2);
        v15 = v16;
        goto LABEL_14;
      }
      v11 = 1;
      while (v10 != (uint64_t ***)-4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v7 - 1);
        v10 = *(uint64_t ****)(v6 + 16 * v8);
        if (v10 == a2)
        {
          v9 = (uint64_t ****)(v6 + 16 * v8);
          goto LABEL_13;
        }
      }
    }
    v9 = (uint64_t ****)(v6 + 16 * v7);
    goto LABEL_13;
  }
LABEL_18:
  v18 = **(void ****)(a1 + 8);
  do
  {
    v19 = *v18;
    v18 += 2;
  }
  while (v19 != &llvm::BranchProbabilityInfoWrapperPass::ID);
  v20 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), &llvm::BranchProbabilityInfoWrapperPass::ID);
  v21 = **(void ****)(a1 + 8);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != &llvm::BlockFrequencyInfoWrapperPass::ID);
  v23 = v20 + 32;
  v24 = (uint64_t *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32);
  v25 = a2[10];
  if (v25 == (uint64_t **)(a2 + 9))
  {
    v26 = 0;
  }
  else
  {
    v26 = 0;
    do
    {
      if (v25)
        v27 = (uint64_t)(v25 - 3);
      else
        v27 = 0;
      BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(v24, v27);
      if (BlockFreq > v26)
        v26 = BlockFreq;
      v25 = (uint64_t **)v25[1];
    }
    while (v25 != (uint64_t **)(a2 + 9));
  }
  sub_1C4DC6F9C(a2, (uint64_t)v24, v23, v26, 0);
  return 0;
}

uint64_t sub_1C4DC85E8()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8EFBC1;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E8134E88;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED82CFF8);
  if (v2 != -1)
  {
    v6[0] = sub_1C4DC7104;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED82CFF8, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C4DC86CC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4DC86F4(uint64_t a1, uint64_t a2)
{
  void *result;

  sub_1C4771E64(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  result = sub_1C4771E64(a2, a2, (uint64_t)&llvm::BranchProbabilityInfoWrapperPass::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C4DC873C(uint64_t a1, uint64_t ***a2)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ****v9;
  uint64_t ***v10;
  int v11;
  int v12;
  uint64_t ***v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  void **v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t BlockFreq;
  uint64_t v30[2];

  if (byte_1ED7F09CF >= 0)
    v4 = byte_1ED7F09CF & 0x7F;
  else
    v4 = qword_1ED7F09C0;
  if (v4)
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v15 = 0;
      v14 = &byte_1C871356D;
LABEL_14:
      v30[0] = (uint64_t)v14;
      v30[1] = v15;
      if (byte_1ED7F09CF >= 0)
        v17 = (char *)&qword_1ED7F09B8;
      else
        v17 = (char *)qword_1ED7F09B8;
      if (llvm::StringRef::find(v30, v17, v4, 0) == -1)
        return 0;
      goto LABEL_18;
    }
    v5 = ***a2;
    v6 = *(_QWORD *)(v5 + 152);
    v7 = *(unsigned int *)(v5 + 168);
    if ((_DWORD)v7)
    {
      LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v9 = (uint64_t ****)(v6 + 16 * v8);
      v10 = *v9;
      if (*v9 == a2)
      {
LABEL_13:
        v13 = v9[1];
        v16 = (uint64_t)*v13;
        v14 = (char *)(v13 + 2);
        v15 = v16;
        goto LABEL_14;
      }
      v11 = 1;
      while (v10 != (uint64_t ***)-4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v7 - 1);
        v10 = *(uint64_t ****)(v6 + 16 * v8);
        if (v10 == a2)
        {
          v9 = (uint64_t ****)(v6 + 16 * v8);
          goto LABEL_13;
        }
      }
    }
    v9 = (uint64_t ****)(v6 + 16 * v7);
    goto LABEL_13;
  }
LABEL_18:
  v18 = **(void ****)(a1 + 8);
  do
  {
    v19 = *v18;
    v18 += 2;
  }
  while (v19 != &llvm::BranchProbabilityInfoWrapperPass::ID);
  v20 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), &llvm::BranchProbabilityInfoWrapperPass::ID);
  v21 = **(void ****)(a1 + 8);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != &llvm::BlockFrequencyInfoWrapperPass::ID);
  v23 = v20 + 32;
  v24 = (uint64_t *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32);
  v25 = a2[10];
  if (v25 == (uint64_t **)(a2 + 9))
  {
    v26 = 0;
  }
  else
  {
    v26 = 0;
    do
    {
      if (v25)
        v27 = (uint64_t)(v25 - 3);
      else
        v27 = 0;
      BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(v24, v27);
      if (BlockFreq > v26)
        v26 = BlockFreq;
      v25 = (uint64_t **)v25[1];
    }
    while (v25 != (uint64_t **)(a2 + 9));
  }
  sub_1C4DC6F9C(a2, (uint64_t)v24, v23, v26, 1);
  return 0;
}

uint64_t sub_1C4DC8920()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4DC7974(v0);
}

uint64_t sub_1C4DC8948(uint64_t a1, uint64_t a2, char a3, llvm::Twine *a4)
{
  uint64_t ***v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  unint64_t *v15;
  std::string::size_type v16;
  const void *v17;
  unint64_t v18;
  std::string *p_dst;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  uint64_t v26;
  void *v27;
  llvm::raw_ostream *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  std::string *v33;
  size_t size;
  _DWORD *v35;
  uint64_t v36;
  void *v37;
  llvm::raw_ostream *v38;
  _QWORD *v39;
  char *v40;
  _QWORD *v41;
  std::string *v42;
  size_t v43;
  uint64_t v44;
  llvm::raw_ostream *v45;
  _BYTE *v46;
  llvm::raw_ostream *v47;
  _WORD *v48;
  void *v50;
  uint64_t v51;
  char v52;
  llvm::raw_ostream *v53[7];
  void *__p[2];
  uint64_t v55;
  std::string __dst;
  std::string v57;

  sub_1C617F014((uint64_t)v53, a1, a2, a3);
  llvm::Twine::str(a4, &v50);
  v6 = **(uint64_t *****)v53[1];
  if ((*((_BYTE *)v6 + 23) & 0x10) == 0)
  {
    v16 = 0;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    p_dst = &__dst;
    goto LABEL_17;
  }
  v7 = ***v6;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if ((_DWORD)v9)
  {
    LODWORD(v10) = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
    v11 = (uint64_t ****)(v8 + 16 * v10);
    v12 = *v11;
    if (*v11 == v6)
      goto LABEL_9;
    v13 = 1;
    while (v12 != (uint64_t ***)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(uint64_t ****)(v8 + 16 * v10);
      if (v12 == v6)
      {
        v11 = (uint64_t ****)(v8 + 16 * v10);
        goto LABEL_9;
      }
    }
  }
  v11 = (uint64_t ****)(v8 + 16 * v9);
LABEL_9:
  v15 = (unint64_t *)v11[1];
  v18 = *v15;
  v17 = v15 + 2;
  v16 = v18;
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    p_dst = (std::string *)operator new(v20 + 1);
    __dst.__r_.__value_.__l.__size_ = v16;
    __dst.__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_16;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v16;
  p_dst = &__dst;
  if (v16)
LABEL_16:
    memmove(p_dst, v17, v16);
LABEL_17:
  p_dst->__r_.__value_.__s.__data_[v16] = 0;
  v22 = std::string::insert(&__dst, 0, "CFG for '");
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v57, "' function");
  v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v55 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v26 = v52 & 0x7F;
  if (v52 < 0)
    v26 = v51;
  if (v26)
  {
    v28 = v53[0];
    v31 = *((_QWORD *)v53[0] + 4);
    if ((unint64_t)(*((_QWORD *)v53[0] + 3) - v31) > 8)
    {
      *(_BYTE *)(v31 + 8) = 34;
      *(_QWORD *)v31 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v28 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v53[0], "digraph \"", 9uLL);
    }
    v32 = (char *)&v50;
  }
  else
  {
    v27 = __p[1];
    if (v55 >= 0)
      v27 = (void *)(HIBYTE(v55) & 0x7F);
    v28 = v53[0];
    v29 = *((_QWORD *)v53[0] + 4);
    v30 = *((_QWORD *)v53[0] + 3) - v29;
    if (!v27)
    {
      if (v30 > 0x11)
      {
        *(_WORD *)(v29 + 16) = 2683;
        *(_OWORD *)v29 = *(_OWORD *)"digraph unnamed {\n";
        *((_QWORD *)v28 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(v53[0], "digraph unnamed {\n", 0x12uLL);
      }
      goto LABEL_45;
    }
    if (v30 > 8)
    {
      *(_BYTE *)(v29 + 8) = 34;
      *(_QWORD *)v29 = *(_QWORD *)"digraph \"";
      *((_QWORD *)v28 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v53[0], "digraph \"", 9uLL);
    }
    v32 = (char *)__p;
  }
  llvm::DOT::EscapeString(v32, &v57);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v57;
  else
    v33 = (std::string *)v57.__r_.__value_.__r.__words[0];
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v57.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v28, (const char *)v33, size);
  v35 = (_DWORD *)*((_QWORD *)v28 + 4);
  if (*((_QWORD *)v28 + 3) - (_QWORD)v35 > 3uLL)
  {
    *v35 = 175841314;
    *((_QWORD *)v28 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v28, "\" {\n", 4uLL);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
LABEL_45:
  v36 = v52 & 0x7F;
  if (v52 < 0)
    v36 = v51;
  if (v36)
  {
    v38 = v53[0];
    v41 = (_QWORD *)*((_QWORD *)v53[0] + 4);
    if (*((_QWORD *)v53[0] + 3) - (_QWORD)v41 > 7uLL)
    {
      *v41 = 0x223D6C6562616C09;
      *((_QWORD *)v38 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v53[0], "\tlabel=\"", 8uLL);
    }
    v40 = (char *)&v50;
LABEL_57:
    llvm::DOT::EscapeString(v40, &v57);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = &v57;
    else
      v42 = (std::string *)v57.__r_.__value_.__r.__words[0];
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = *((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x7F;
    else
      v43 = v57.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v38, (const char *)v42, v43);
    v44 = *((_QWORD *)v38 + 4);
    if ((unint64_t)(*((_QWORD *)v38 + 3) - v44) > 2)
    {
      *(_BYTE *)(v44 + 2) = 10;
      *(_WORD *)v44 = 15138;
      *((_QWORD *)v38 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v38, "\";\n", 3uLL);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    goto LABEL_67;
  }
  v37 = (void *)(HIBYTE(v55) & 0x7F);
  if (v55 < 0)
    v37 = __p[1];
  if (v37)
  {
    v38 = v53[0];
    v39 = (_QWORD *)*((_QWORD *)v53[0] + 4);
    if (*((_QWORD *)v53[0] + 3) - (_QWORD)v39 > 7uLL)
    {
      *v39 = 0x223D6C6562616C09;
      *((_QWORD *)v38 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v53[0], "\tlabel=\"", 8uLL);
    }
    v40 = (char *)__p;
    goto LABEL_57;
  }
LABEL_67:
  *((_BYTE *)&v57.__r_.__value_.__s + 23) = 0;
  v57.__r_.__value_.__s.__data_[0] = 0;
  llvm::raw_ostream::write(v53[0], (const char *)&v57, 0);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  v45 = v53[0];
  v46 = (_BYTE *)*((_QWORD *)v53[0] + 4);
  if (*((_BYTE **)v53[0] + 3) == v46)
  {
    llvm::raw_ostream::write(v53[0], "\n", 1uLL);
  }
  else
  {
    *v46 = 10;
    ++*((_QWORD *)v45 + 4);
  }
  if (SHIBYTE(v55) < 0)
    operator delete(__p[0]);
  sub_1C617F06C((_QWORD **)v53);
  v47 = v53[0];
  v48 = (_WORD *)*((_QWORD *)v53[0] + 4);
  if (*((_QWORD *)v53[0] + 3) - (_QWORD)v48 > 1uLL)
  {
    *v48 = 2685;
    *((_QWORD *)v47 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v53[0], "}\n", 2uLL);
  }
  if (v52 < 0)
    operator delete(v50);
  MEMORY[0x1CAA32FB4](v53[4], 8);
  return a1;
}

void sub_1C4DC8F08(_QWORD **a1, llvm::Value *a2)
{
  uint64_t v4;
  llvm *BlockFreq;
  double v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *p_p;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  _QWORD *v19;
  llvm::raw_ostream *v20;
  uint64_t v21;
  unint64_t v22;
  const char *v23;
  size_t v24;
  size_t v25;
  void **v26;
  llvm::raw_ostream *v27;
  _BYTE *v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  llvm::raw_ostream *v31;
  _WORD *v32;
  const char *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  llvm::raw_ostream *v44;
  void *v45;
  unint64_t v46;
  _WORD *v47;
  llvm::raw_ostream *v48;
  std::string *v49;
  size_t v50;
  void *v51;
  std::string *v52;
  size_t v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  unint64_t v57;
  char v58;
  int v59;
  std::string::size_type v60;
  _BYTE *v61;
  std::string *v62;
  size_t v63;
  _DWORD *v64;
  std::string *v65;
  size_t v66;
  int v67;
  BOOL v68;
  _OWORD *v69;
  unint64_t v70;
  const char *v71;
  size_t v72;
  llvm::raw_ostream *v73;
  _BYTE *v74;
  llvm::raw_ostream *v75;
  char v76;
  const char *v77;
  size_t v78;
  llvm::raw_ostream *v79;
  _WORD *v80;
  unint64_t v81;
  const char *v82;
  size_t v83;
  llvm::raw_ostream *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  llvm::raw_ostream *v94;
  _BYTE *v95;
  char v96;
  const char *v97;
  size_t v98;
  _BYTE *v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  void *v103;
  _BYTE *v104;
  uint64_t v105;
  std::string __p;
  _BYTE *v107;
  _BYTE *v108;
  char v109;
  uint64_t v110;
  int v111;
  std::string *v112;
  void *v113[2];
  uint64_t v114;
  std::string v115;
  std::string v116;
  std::string v117;
  std::string v118;
  std::string v119;

  v4 = *a1[1];
  if (*(_BYTE *)(v4 + 32))
  {
    BlockFreq = (llvm *)llvm::BlockFrequencyInfo::getBlockFreq(*(uint64_t **)(v4 + 8), (uint64_t)a2);
    llvm::getHeatColor(BlockFreq, *(_QWORD *)(v4 + 24), &__p);
    v6 = 0.0;
    if ((unint64_t)BlockFreq > *(_QWORD *)(v4 + 24) >> 1)
      v6 = 1.0;
    llvm::getHeatColor(v6, &v119);
    std::operator+<char>();
    v7 = std::string::append(&v115, "ff\", style=filled,");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v116, " fillcolor=\"");
    v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v117.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v117.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    v13 = std::string::append(&v117, (const std::string::value_type *)p_p, size);
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v118.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v118.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v118, "70\"");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)v113 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v114 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v118.__r_.__value_.__l.__data_);
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v117.__r_.__value_.__l.__data_);
    if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v116.__r_.__value_.__l.__data_);
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v115.__r_.__value_.__l.__data_);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    HIBYTE(v114) = 0;
    LOBYTE(v113[0]) = 0;
  }
  v17 = (llvm::raw_ostream *)*a1;
  v18 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v18) > 4)
  {
    *(_BYTE *)(v18 + 4) = 101;
    *(_DWORD *)v18 = 1685016073;
    *((_QWORD *)v17 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "\tNode", 5uLL);
  }
  llvm::write_hex(v17, (unint64_t)a2, 3, 0, 0);
  v19 = (_QWORD *)*((_QWORD *)v17 + 4);
  if (*((_QWORD *)v17 + 3) - (_QWORD)v19 > 7uLL)
  {
    *v19 = 0x3D65706168735B20;
    *((_QWORD *)v17 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(v17, " [shape=", 8uLL);
  }
  v20 = (llvm::raw_ostream *)*a1;
  v21 = (*a1)[4];
  v22 = (*a1)[3] - v21;
  if (*((_BYTE *)a1 + 16))
  {
    if (v22 <= 4)
    {
      v23 = "none,";
      v24 = 5;
      goto LABEL_32;
    }
    *(_BYTE *)(v21 + 4) = 44;
    *(_DWORD *)v21 = 1701736302;
    v42 = *((_QWORD *)v20 + 4) + 5;
  }
  else
  {
    if (v22 <= 6)
    {
      v23 = "record,";
      v24 = 7;
LABEL_32:
      llvm::raw_ostream::write(v20, v23, v24);
      goto LABEL_33;
    }
    *(_DWORD *)(v21 + 3) = 744780399;
    *(_DWORD *)v21 = 1868785010;
    v42 = *((_QWORD *)v20 + 4) + 7;
  }
  *((_QWORD *)v20 + 4) = v42;
LABEL_33:
  if (v114 >= 0)
    v25 = HIBYTE(v114) & 0x7F;
  else
    v25 = (size_t)v113[1];
  if (v25)
  {
    if (v114 >= 0)
      v26 = v113;
    else
      v26 = (void **)v113[0];
    v27 = llvm::raw_ostream::write((llvm::raw_ostream *)*a1, (const char *)v26, v25);
    v28 = (_BYTE *)*((_QWORD *)v27 + 4);
    if (*((_BYTE **)v27 + 3) == v28)
    {
      llvm::raw_ostream::write(v27, ",", 1uLL);
    }
    else
    {
      *v28 = 44;
      ++*((_QWORD *)v27 + 4);
    }
  }
  v29 = (llvm::raw_ostream *)*a1;
  v30 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v30) > 5)
  {
    *(_WORD *)(v30 + 4) = 15724;
    *(_DWORD *)v30 = 1700946284;
    *((_QWORD *)v29 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v29, "label=", 6uLL);
  }
  if (!*((_BYTE *)a1 + 16))
  {
    v31 = (llvm::raw_ostream *)*a1;
    v32 = (_WORD *)(*a1)[4];
    if ((*a1)[3] - (_QWORD)v32 > 1uLL)
    {
      *v32 = 31522;
      *((_QWORD *)v31 + 4) += 2;
      goto LABEL_82;
    }
    v33 = "\"{";
    goto LABEL_81;
  }
  v34 = (_QWORD *)*((_QWORD *)a2 + 5);
  if (v34 == (_QWORD *)((char *)a2 + 40))
  {
LABEL_69:
    v40 = 0;
    LODWORD(v41) = 0;
  }
  else
  {
    if (v34)
      v35 = v34 - 3;
    else
      v35 = 0;
    v36 = *((unsigned __int8 *)v35 + 16);
    v37 = v36 - 29;
    if (v36 != 30)
    {
      v38 = 2;
      v40 = 0;
      v41 = 0;
      switch(v37)
      {
        case 0:
        case 5:
        case 6:
          goto LABEL_70;
        case 1:
LABEL_256:
          __break(1u);
LABEL_257:
          v56 = (*(_DWORD *)(v38 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_113;
        case 2:
          LODWORD(v38) = (*((_DWORD *)v35 + 5) >> 1) & 0x3FFFFFF;
          goto LABEL_68;
        case 3:
        case 9:
          LODWORD(v38) = (*((_DWORD *)v35 + 5) & 0x7FFFFFF) - 1;
          goto LABEL_68;
        case 4:
          goto LABEL_55;
        case 7:
          LODWORD(v38) = *((_WORD *)v35 + 9) & 1;
          goto LABEL_68;
        case 8:
          LODWORD(v38) = 1;
          goto LABEL_55;
        case 10:
          LODWORD(v38) = *((_DWORD *)v35 + 20) + 1;
LABEL_68:
          if (!(_DWORD)v38)
            goto LABEL_69;
          goto LABEL_55;
        default:
          goto LABEL_69;
      }
    }
    if ((*((_DWORD *)v35 + 5) & 0x7FFFFFF) == 3)
      LODWORD(v38) = 2;
    else
      LODWORD(v38) = 1;
LABEL_55:
    v39 = v38 - 1;
    if ((v38 - 1) >= 0x3F)
      v39 = 63;
    v40 = v39 + 1;
    LODWORD(v41) = v38 != v40;
  }
LABEL_70:
  if (v40 <= 1)
    v43 = 1;
  else
    v43 = v40;
  v44 = (llvm::raw_ostream *)*a1;
  v45 = (void *)(*a1)[4];
  if ((*a1)[3] - (_QWORD)v45 <= 0x30uLL)
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)*a1, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 0x31uLL);
    v103 = (void *)*((_QWORD *)v44 + 4);
  }
  else
  {
    qmemcpy(v45, "<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"", 49);
    v103 = (void *)(*((_QWORD *)v44 + 4) + 49);
    *((_QWORD *)v44 + 4) = v103;
  }
  v46 = (v43 + v41);
  if (*((_QWORD *)v44 + 3) - (_QWORD)v103 <= 0x2EuLL)
  {
    llvm::raw_ostream::write(v44, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 0x2FuLL);
  }
  else
  {
    qmemcpy(v103, " cellpadding=\"0\"><tr><td align=\"text\" colspan=\"", 47);
    *((_QWORD *)v44 + 4) += 47;
  }
  sub_1C5E21910(v44, v46, 0, 0, 0);
  v47 = (_WORD *)*((_QWORD *)v44 + 4);
  if (*((_QWORD *)v44 + 3) - (_QWORD)v47 <= 1uLL)
  {
    v33 = "\">";
    v31 = v44;
LABEL_81:
    llvm::raw_ostream::write(v31, v33, 2uLL);
    goto LABEL_82;
  }
  *v47 = 15906;
  *((_QWORD *)v44 + 4) += 2;
LABEL_82:
  v48 = (llvm::raw_ostream *)*a1;
  if (!*((_BYTE *)a1 + 16))
  {
    sub_1C617F0F4(&v119, *((_BYTE *)a1 + 24), a2);
    llvm::DOT::EscapeString((char *)&v119, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &__p;
    else
      v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      v50 = __p.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(v48, (const char *)v49, v50);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_104;
    v51 = (void *)v119.__r_.__value_.__r.__words[0];
    goto LABEL_103;
  }
  sub_1C617F0F4(&__p, *((_BYTE *)a1 + 24), a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &__p;
  else
    v52 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v53 = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v48, (const char *)v52, v53);
  v54 = *((_QWORD *)v48 + 4);
  if ((unint64_t)(*((_QWORD *)v48 + 3) - v54) > 4)
  {
    *(_BYTE *)(v54 + 4) = 62;
    *(_DWORD *)v54 = 1685335868;
    *((_QWORD *)v48 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v48, "</td>", 5uLL);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v51 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_103:
    operator delete(v51);
  }
LABEL_104:
  memset(&v117, 0, sizeof(v117));
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  v109 = 0;
  v110 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  v112 = &v117;
  v111 = 0;
  v41 = (uint64_t)a2 + 40;
  v55 = (_QWORD *)*((_QWORD *)a2 + 5);
  v107 = 0;
  v108 = 0;
  __p.__r_.__value_.__r.__words[2] = 0;
  if (v55 == (_QWORD *)((char *)a2 + 40))
  {
LABEL_112:
    v56 = 0;
  }
  else
  {
    if (v55)
      v38 = (uint64_t)(v55 - 3);
    else
      v38 = 0;
    if (*(_BYTE *)(v38 + 16) == 30)
    {
      if ((*(_DWORD *)(v38 + 20) & 0x7FFFFFF) == 3)
        v56 = 2;
      else
        v56 = 1;
    }
    else
    {
      v56 = 0;
      switch(*(_BYTE *)(v38 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          break;
        case 0x1E:
          goto LABEL_256;
        case 0x1F:
          v56 = (*(_DWORD *)(v38 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
          goto LABEL_257;
        case 0x21:
          v56 = 2;
          break;
        case 0x24:
          v56 = *(_WORD *)(v38 + 18) & 1;
          break;
        case 0x25:
          v56 = 1;
          break;
        case 0x27:
          v56 = *(_DWORD *)(v38 + 80) + 1;
          break;
        default:
          goto LABEL_112;
      }
    }
  }
LABEL_113:
  if (*((_BYTE *)a1 + 16))
    llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "</tr><tr>", 9uLL);
  if (!v56)
    goto LABEL_181;
  v105 = v41;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  do
  {
    sub_1C4DCAD10((uint64_t)a2, v59, (uint64_t)&v119);
    v60 = *((_BYTE *)&v119.__r_.__value_.__s + 23) & 0x7F;
    if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v60 = v119.__r_.__value_.__l.__size_;
    if (v60)
    {
      v61 = v108;
      if (*((_BYTE *)a1 + 16))
      {
        if ((unint64_t)(v107 - v108) > 0x16)
        {
          *(_OWORD *)v108 = *(_OWORD *)"<td colspan=\"1\" port=\"s";
          *(_QWORD *)(v61 + 15) = *(_QWORD *)" port=\"s";
          v108 += 23;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "<td colspan=\"1\" port=\"s", 0x17uLL);
        }
        sub_1C5E21910((llvm::raw_ostream *)&__p, v57, 0, 0, 0);
        if ((unint64_t)(v107 - v108) > 1)
        {
          *(_WORD *)v108 = 15906;
          v108 += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "\">", 2uLL);
        }
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &v119;
        else
          v62 = (std::string *)v119.__r_.__value_.__r.__words[0];
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = *((_BYTE *)&v119.__r_.__value_.__s + 23) & 0x7F;
        else
          v63 = v119.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, (const char *)v62, v63);
        v64 = v108;
        if ((unint64_t)(v107 - v108) > 4)
        {
          v108[4] = 62;
          *v64 = 1685335868;
          v108 += 5;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "</td>", 5uLL);
        }
      }
      else
      {
        if (v57)
        {
          if (v107 == v108)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "|", 1uLL);
            v61 = v108;
          }
          else
          {
            *v108 = 124;
            v61 = ++v108;
          }
        }
        if ((unint64_t)(v107 - v61) > 1)
        {
          *(_WORD *)v61 = 29500;
          v108 += 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, "<s", 2uLL);
        }
        sub_1C5E21910((llvm::raw_ostream *)&__p, v57, 0, 0, 0);
        if (v107 == v108)
          llvm::raw_ostream::write((llvm::raw_ostream *)&__p, ">", 1uLL);
        else
          *v108++ = 62;
        llvm::DOT::EscapeString((char *)&v119, &v118);
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = &v118;
        else
          v65 = (std::string *)v118.__r_.__value_.__r.__words[0];
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = *((_BYTE *)&v118.__r_.__value_.__s + 23) & 0x7F;
        else
          v66 = v118.__r_.__value_.__l.__size_;
        llvm::raw_ostream::write((llvm::raw_ostream *)&__p, (const char *)v65, v66);
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v118.__r_.__value_.__l.__data_);
      }
      v58 = 1;
    }
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__r_.__value_.__l.__data_);
    v67 = v59 + 1;
    if (v56 == v59 + 1)
      break;
    ++v59;
    v68 = v57++ == 63;
  }
  while (!v68);
  if (((v56 != v67) & v58) == 0)
  {
    v41 = v105;
    if ((v58 & 1) == 0)
      goto LABEL_181;
    goto LABEL_170;
  }
  v69 = v108;
  v70 = v107 - v108;
  v41 = v105;
  if (*((_BYTE *)a1 + 16))
  {
    if (v70 <= 0x2B)
    {
      v71 = "<td colspan=\"1\" port=\"s64\">truncated...</td>";
      v72 = 44;
LABEL_169:
      llvm::raw_ostream::write((llvm::raw_ostream *)&__p, v71, v72);
      goto LABEL_170;
    }
    *(_OWORD *)v108 = *(_OWORD *)"<td colspan=\"1\" port=\"s64\">truncated...</td>";
    qmemcpy(v69 + 1, "port=\"s64\">truncated...</td>", 28);
    v104 = v108 + 44;
  }
  else
  {
    if (v70 <= 0x11)
    {
      v71 = "|<s64>truncated...";
      v72 = 18;
      goto LABEL_169;
    }
    *((_WORD *)v108 + 8) = 11822;
    *v69 = *(_OWORD *)"|<s64>truncated...";
    v104 = v108 + 18;
  }
  v108 = v104;
LABEL_170:
  if (*((_BYTE *)a1 + 16))
    goto LABEL_174;
  v73 = (llvm::raw_ostream *)*a1;
  v74 = (_BYTE *)(*a1)[4];
  if ((_BYTE *)(*a1)[3] == v74)
  {
    llvm::raw_ostream::write(v73, "|", 1uLL);
  }
  else
  {
    *v74 = 124;
    ++*((_QWORD *)v73 + 4);
  }
  if (*((_BYTE *)a1 + 16))
  {
LABEL_174:
    v75 = (llvm::raw_ostream *)*a1;
    v76 = HIBYTE(v112->__r_.__value_.__r.__words[2]);
    if (v76 >= 0)
      v77 = (const char *)v112;
    else
      v77 = (const char *)v112->__r_.__value_.__r.__words[0];
    if (v76 >= 0)
      v78 = v76 & 0x7F;
    else
      v78 = v112->__r_.__value_.__l.__size_;
    goto LABEL_180;
  }
  v94 = (llvm::raw_ostream *)*a1;
  v95 = (_BYTE *)(*a1)[4];
  if ((_BYTE *)(*a1)[3] == v95)
  {
    v94 = llvm::raw_ostream::write(v94, "{", 1uLL);
  }
  else
  {
    *v95 = 123;
    ++*((_QWORD *)v94 + 4);
  }
  v96 = HIBYTE(v112->__r_.__value_.__r.__words[2]);
  if (v96 >= 0)
    v97 = (const char *)v112;
  else
    v97 = (const char *)v112->__r_.__value_.__r.__words[0];
  if (v96 >= 0)
    v98 = v96 & 0x7F;
  else
    v98 = v112->__r_.__value_.__l.__size_;
  v75 = llvm::raw_ostream::write(v94, v97, v98);
  v99 = (_BYTE *)*((_QWORD *)v75 + 4);
  if (*((_BYTE **)v75 + 3) == v99)
  {
    v77 = "}";
    v78 = 1;
LABEL_180:
    llvm::raw_ostream::write(v75, v77, v78);
    goto LABEL_181;
  }
  *v99 = 125;
  ++*((_QWORD *)v75 + 4);
LABEL_181:
  v79 = (llvm::raw_ostream *)*a1;
  v80 = (_WORD *)(*a1)[4];
  v81 = (*a1)[3] - (_QWORD)v80;
  if (*((_BYTE *)a1 + 16))
  {
    if (v81 <= 0xD)
    {
      v82 = "</tr></table>>";
      v83 = 14;
LABEL_186:
      llvm::raw_ostream::write(v79, v82, v83);
      goto LABEL_187;
    }
    qmemcpy(v80, "</tr></table>>", 14);
    v102 = *((_QWORD *)v79 + 4) + 14;
  }
  else
  {
    if (v81 <= 1)
    {
      v82 = "}\"";
      v83 = 2;
      goto LABEL_186;
    }
    *v80 = 8829;
    v102 = *((_QWORD *)v79 + 4) + 2;
  }
  *((_QWORD *)v79 + 4) = v102;
LABEL_187:
  v84 = (llvm::raw_ostream *)*a1;
  v85 = (*a1)[4];
  if ((unint64_t)((*a1)[3] - v85) > 2)
  {
    *(_BYTE *)(v85 + 2) = 10;
    *(_WORD *)v85 = 15197;
    *((_QWORD *)v84 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v84, "];\n", 3uLL);
  }
  v86 = *(_QWORD *)v41;
  if (*(_QWORD *)v41 == v41)
  {
    v93 = 0;
    v41 = 0;
LABEL_227:
    v91 = 0;
    goto LABEL_228;
  }
  if (v86)
    v38 = v86 - 24;
  else
    v38 = 0;
  v87 = *(unsigned __int8 *)(v38 + 16);
  if ((v87 - 29) >= 0xB)
    v41 = 0;
  else
    v41 = v38;
  if (v87 != 30)
  {
    v88 = 2;
    v91 = 0;
    v93 = 0;
    switch(*(_BYTE *)(v38 + 16))
    {
      case 0x1D:
      case 0x22:
      case 0x23:
        goto LABEL_228;
      case 0x1E:
        goto LABEL_256;
      case 0x1F:
        v88 = (*(_DWORD *)(v38 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_225;
      case 0x20:
      case 0x26:
        v88 = (*(_DWORD *)(v38 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_225;
      case 0x21:
        goto LABEL_200;
      case 0x24:
        v88 = *(_WORD *)(v38 + 18) & 1;
        goto LABEL_225;
      case 0x25:
        v88 = 1;
        goto LABEL_200;
      case 0x27:
        v88 = *(_DWORD *)(v38 + 80) + 1;
LABEL_225:
        if (!v88)
          goto LABEL_226;
        goto LABEL_200;
      default:
LABEL_226:
        v93 = 0;
        break;
    }
    goto LABEL_227;
  }
  if ((*(_DWORD *)(v38 + 20) & 0x7FFFFFF) == 3)
    v88 = 2;
  else
    v88 = 1;
LABEL_200:
  v89 = 0;
  v90 = 0;
  v91 = 0;
  do
  {
    v92 = *(unsigned __int8 *)(v41 + 16);
    if (v92 != 30)
      __asm { BR              X10 }
    if (!llvm::DOTGraphTraits<llvm::DOTFuncInfo *>::isNodeHidden((uint64_t)(a1 + 3), *(_QWORD *)(v41 - 32 - 32 * v89), *a1[1]))sub_1C4DC9FC8((uint64_t)a1, (unint64_t)a2, v90, v41, v91);
    v89 = ++v91;
    if (v88 == v91)
      break;
    v68 = v90++ == 63;
  }
  while (!v68);
  v93 = v88;
LABEL_228:
  if (v93 != v91)
  {
    v100 = v91;
    do
    {
      v101 = *(unsigned __int8 *)(v41 + 16);
      if (v101 != 30)
        __asm { BR              X10 }
      if (!llvm::DOTGraphTraits<llvm::DOTFuncInfo *>::isNodeHidden((uint64_t)(a1 + 3), *(_QWORD *)(v41 - 32 - 32 * v100), *a1[1]))sub_1C4DC9FC8((uint64_t)a1, (unint64_t)a2, 64, v41, v91);
      v100 = ++v91;
    }
    while (v93 != v91);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
  if (v111 == 1 && __p.__r_.__value_.__r.__words[2])
    MEMORY[0x1CAA32F9C](__p.__r_.__value_.__r.__words[2], 0x1000C8077774924);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  if (SHIBYTE(v114) < 0)
    operator delete(v113[0]);
}

void sub_1C4DC9FC8(uint64_t a1, unint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  int v9;
  unint64_t v10;
  std::string::size_type size;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string::size_type v15;
  int v16;
  double v17;
  uint64_t BlockFreq;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  _QWORD *v52;
  std::string::size_type v53;
  void *v54[2];
  std::string::size_type v55;
  std::string v56;
  std::string v57;
  std::string v58;
  void *v59[2];
  uint64_t v60;
  std::string __p;
  uint64_t v62;
  void *v63;
  double *v64;
  void *v65;
  double *v66;
  void **v67;
  void **v68;
  double v69;
  double v70;

  v9 = *(unsigned __int8 *)(a4 + 16);
  if (v9 != 30)
    __asm { BR              X10 }
  v10 = *(_QWORD *)(a4 - 32 * a5 - 32);
  if (v10)
  {
    sub_1C4DCAD10(a2, a5, (uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (!size)
      a3 = -1;
    v12 = **(_QWORD **)(a1 + 8);
    if (*(_BYTE *)(v12 + 33))
    {
      v13 = *(_QWORD *)(a2 + 40);
      if (v13 == a2 + 40)
      {
        v14 = 0;
      }
      else
      {
        if (v13)
          v15 = v13 - 24;
        else
          v15 = 0;
        if (*(unsigned __int8 *)(v15 + 16) - 29 >= 0xB)
          v14 = 0;
        else
          v14 = v15;
      }
      v16 = *(unsigned __int8 *)(v14 + 16);
      if (v16 != 30)
        __asm { BR              X12 }
      if ((*(_DWORD *)(v14 + 20) & 0x7FFFFFF) != 3)
      {
        HIBYTE(v55) = 10;
        strcpy((char *)v54, "penwidth=2");
LABEL_49:
        sub_1C617F1B0((llvm::raw_ostream **)a1, a2, a3, v10, (uint64_t)v54);
        if (SHIBYTE(v55) < 0)
          operator delete(v54[0]);
        return;
      }
      if (a5 < 2)
      {
        v17 = (double)llvm::BranchProbabilityInfo::getEdgeProbability(*(_QWORD *)(v12 + 16), a2, *(_QWORD *)(v14 - 32 * a5 - 32))* 4.65661287e-10;
        v69 = v17 + 1.0;
        v70 = v17;
        if (!*(_BYTE *)(v12 + 34))
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"label=\"{0:P}\" penwidth={1}";
          __p.__r_.__value_.__l.__size_ = 26;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v67;
          v62 = 2;
          v63 = &unk_1E8134F28;
          v64 = &v70;
          v65 = &unk_1E8134F28;
          v66 = &v69;
          v67 = &v63;
          v68 = &v65;
          sub_1C4DCAF2C((uint64_t)&__p, v54);
          goto LABEL_49;
        }
        BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(*(uint64_t **)(v12 + 8), a2);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"label=\"W:{0}\" penwidth={1}";
        __p.__r_.__value_.__l.__size_ = 26;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v67;
        v62 = 2;
        v63 = &unk_1E8134F58;
        v64 = (double *)(v17 * (double)(unint64_t)BlockFreq);
        v65 = &unk_1E8134F28;
        v66 = &v69;
        v67 = &v63;
        v68 = &v65;
        sub_1C4DCAF2C((uint64_t)&__p, v59);
        v19 = (void *)(HIBYTE(v60) & 0x7F);
        if (v60 < 0)
          v19 = v59[1];
        if (v19)
        {
          *(_OWORD *)v54 = *(_OWORD *)v59;
          v55 = v60;
          v59[1] = 0;
          v60 = 0;
          v59[0] = 0;
          goto LABEL_78;
        }
        if ((*(_BYTE *)(v14 + 23) & 0x20) == 0)
        {
LABEL_77:
          HIBYTE(v55) = 0;
          LOBYTE(v54[0]) = 0;
LABEL_78:
          if (SHIBYTE(v60) < 0)
            operator delete(v59[0]);
          goto LABEL_49;
        }
        v20 = ***(_QWORD ***)v14;
        __p.__r_.__value_.__r.__words[0] = v14;
        v21 = *(_DWORD *)(v20 + 2496);
        if (v21)
        {
          v22 = *(_QWORD *)(v20 + 2480);
          v23 = v21 - 1;
          v24 = v23 & ((v14 >> 4) ^ (v14 >> 9));
          v25 = (_QWORD *)(v22 + 40 * v24);
          v26 = *v25;
          if (*v25 == v14)
          {
LABEL_40:
            v31 = *((unsigned int *)v25 + 4);
            if ((_DWORD)v31)
            {
              v32 = (_QWORD *)(v25[1] + 8);
              v33 = 16 * v31;
              while (*((_DWORD *)v32 - 2) != 2)
              {
                v32 += 2;
                v33 -= 16;
                if (!v33)
                  goto LABEL_77;
              }
              v34 = *v32;
              if (v34)
              {
                v35 = *(unsigned int *)(v34 + 8);
                v36 = v34 - 8 * v35;
                v37 = *(_QWORD **)(*(_QWORD *)v36 + 8);
                if (*v37 == 14)
                {
                  v38 = v37[3];
                  v39 = *(_QWORD *)((char *)v37 + 30);
                  if (v38 == 0x775F68636E617262 && v39 == 0x737468676965775FLL && a5 + 1 < v35)
                  {
                    v41 = *(_QWORD *)(v36 + 8 * (a5 + 1));
                    if (*(_BYTE *)v41 == 1)
                    {
                      v42 = *(_QWORD *)(v41 + 128);
                      if (*(_BYTE *)(v42 + 16) == 16)
                      {
                        v43 = (unint64_t *)(v42 + 24);
                        if (*(_DWORD *)(v42 + 32) >= 0x41u)
                          v43 = (unint64_t *)*v43;
                        std::to_string(&v57, *v43);
                        v44 = std::string::insert(&v57, 0, "label=\"W:");
                        v45 = v44->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
                        v58.__r_.__value_.__r.__words[2] = v45;
                        v44->__r_.__value_.__l.__size_ = 0;
                        v44->__r_.__value_.__r.__words[2] = 0;
                        v44->__r_.__value_.__r.__words[0] = 0;
                        v46 = std::string::append(&v58, "\" penwidth=");
                        v47 = v46->__r_.__value_.__r.__words[2];
                        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
                        __p.__r_.__value_.__r.__words[2] = v47;
                        v46->__r_.__value_.__l.__size_ = 0;
                        v46->__r_.__value_.__r.__words[2] = 0;
                        v46->__r_.__value_.__r.__words[0] = 0;
                        std::to_string(&v56, v69);
                        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v48 = &v56;
                        else
                          v48 = (std::string *)v56.__r_.__value_.__r.__words[0];
                        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v49 = *((_BYTE *)&v56.__r_.__value_.__s + 23) & 0x7F;
                        else
                          v49 = v56.__r_.__value_.__l.__size_;
                        v50 = std::string::append(&__p, (const std::string::value_type *)v48, v49);
                        v51 = v50->__r_.__value_.__r.__words[2];
                        *(_OWORD *)v54 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
                        v55 = v51;
                        v50->__r_.__value_.__l.__size_ = 0;
                        v50->__r_.__value_.__r.__words[2] = 0;
                        v50->__r_.__value_.__r.__words[0] = 0;
                        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v56.__r_.__value_.__l.__data_);
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__p.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v58.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v57.__r_.__value_.__l.__data_);
                        goto LABEL_78;
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_77;
          }
          v27 = 0;
          v28 = 1;
          while (v26 != -4096)
          {
            if (v27)
              v29 = 0;
            else
              v29 = v26 == -8192;
            if (v29)
              v27 = v25;
            v30 = v24 + v28++;
            v24 = v30 & v23;
            v25 = (_QWORD *)(v22 + 40 * v24);
            v26 = *v25;
            if (*v25 == v14)
              goto LABEL_40;
          }
          if (v27)
            v52 = v27;
          else
            v52 = v25;
        }
        else
        {
          v52 = 0;
        }
        v25 = sub_1C541AB24(v20 + 2480, (uint64_t)&__p, (uint64_t *)&__p, v52);
        v53 = __p.__r_.__value_.__r.__words[0];
        v25[3] = 0;
        v25[4] = 0;
        *v25 = v53;
        v25[1] = v25 + 3;
        v25[2] = 0x100000000;
        goto LABEL_40;
      }
    }
    HIBYTE(v55) = 0;
    LOBYTE(v54[0]) = 0;
    goto LABEL_49;
  }
}

void sub_1C4DCA600()
{
  JUMPOUT(0x1C4DCA010);
}

void sub_1C4DCA614()
{
  JUMPOUT(0x1C4DCA010);
}

void sub_1C4DCA62C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(_WORD *)(a4 + 18) & 1) != 0)
    JUMPOUT(0x1C4DCA0CCLL);
  JUMPOUT(0x1C4DCA018);
}

void sub_1C4DCA644()
{
  JUMPOUT(0x1C4DCA010);
}

void sub_1C4DCA64C()
{
  int v0;

  if (v0)
    JUMPOUT(0x1C4DCA00CLL);
  JUMPOUT(0x1C4DCA010);
}

void sub_1C4DCA690()
{
  JUMPOUT(0x1C4DCA34CLL);
}

void sub_1C4DCA6A0()
{
  JUMPOUT(0x1C4DCA34CLL);
}

void sub_1C4DCA6AC()
{
  JUMPOUT(0x1C4DCA34CLL);
}

void sub_1C4DCA6B8()
{
  JUMPOUT(0x1C4DCA12CLL);
}

void sub_1C4DCA6CC()
{
  JUMPOUT(0x1C4DCA12CLL);
}

void sub_1C4DCA6E4()
{
  uint64_t v0;

  if ((*(_WORD *)(v0 + 18) & 1) == 0)
    JUMPOUT(0x1C4DCA130);
  JUMPOUT(0x1C4DCA40CLL);
}

void sub_1C4DCA6F4()
{
  JUMPOUT(0x1C4DCA12CLL);
}

void sub_1C4DCA6FC()
{
  int v0;

  if (!v0)
    JUMPOUT(0x1C4DCA12CLL);
  JUMPOUT(0x1C4DCA128);
}

void sub_1C4DCA750()
{
  JUMPOUT(0x1C4DCA110);
}

void sub_1C4DCA760()
{
  JUMPOUT(0x1C4DCA110);
}

void sub_1C4DCA76C()
{
  JUMPOUT(0x1C4DCA110);
}

void sub_1C4DCA774()
{
  JUMPOUT(0x1C4DCA110);
}

void sub_1C4DCA780(llvm::Value *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  int v10;
  int v11;
  uint64_t v12;
  llvm::Value **v13;
  llvm::Value *v14;
  int v15;
  int v16;
  unint64_t *v17;
  size_t v18;
  const void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  void (**v25)(llvm::raw_ostream *__hidden);
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  void **v33;
  void *v34[2];
  uint64_t v35;

  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
    goto LABEL_29;
  v3 = ***(_QWORD ***)a1;
  v4 = *(_QWORD *)(v3 + 152);
  v5 = *(unsigned int *)(v3 + 168);
  v6 = a1 >> 4;
  if (!(_DWORD)v5)
    goto LABEL_10;
  LODWORD(v7) = (v5 - 1) & (v6 ^ (a1 >> 9));
  v8 = v4 + 16 * v7;
  v9 = *(llvm::Value **)v8;
  if (*(llvm::Value **)v8 != a1)
  {
    v10 = 1;
    while (v9 != (llvm::Value *)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v5 - 1);
      v9 = *(llvm::Value **)(v4 + 16 * v7);
      if (v9 == a1)
        goto LABEL_11;
    }
LABEL_10:
    v7 = v5;
LABEL_11:
    if (**(_QWORD **)(v4 + 16 * v7 + 8))
    {
      if (!(_DWORD)v5)
        goto LABEL_18;
      goto LABEL_13;
    }
    goto LABEL_29;
  }
  if (**(_QWORD **)(v8 + 8))
  {
LABEL_13:
    LODWORD(v12) = (v5 - 1) & (v6 ^ (a1 >> 9));
    v13 = (llvm::Value **)(v4 + 16 * v12);
    v14 = *v13;
    if (*v13 == a1)
      goto LABEL_19;
    v15 = 1;
    while (v14 != (llvm::Value *)-4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v5 - 1);
      v14 = *(llvm::Value **)(v4 + 16 * v12);
      if (v14 == a1)
      {
        v13 = (llvm::Value **)(v4 + 16 * v12);
        goto LABEL_19;
      }
    }
LABEL_18:
    v13 = (llvm::Value **)(v4 + 16 * v5);
LABEL_19:
    v17 = (unint64_t *)v13[1];
    v20 = *v17;
    v19 = v17 + 2;
    v18 = v20;
    if (v20 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v18 >= 0x17)
    {
      v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v21 = v18 | 7;
      v22 = v21 + 1;
      v23 = operator new(v21 + 1);
      a2[1] = v18;
      a2[2] = v22 | 0x8000000000000000;
      *a2 = v23;
      a2 = v23;
    }
    else
    {
      *((_BYTE *)a2 + 23) = v18;
      if (!v18)
        goto LABEL_27;
    }
    memmove(a2, v19, v18);
LABEL_27:
    *((_BYTE *)a2 + v18) = 0;
    return;
  }
LABEL_29:
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  v26 = 0;
  v30 = 0;
  v31 = 0;
  v25 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v33 = v34;
  v32 = 0;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  llvm::Value::printAsOperand(a1, (llvm::raw_ostream *)&v25, 0, 0);
  if (*((char *)v33 + 23) < 0)
  {
    sub_1C47EBC30(a2, *v33, (unint64_t)v33[1]);
  }
  else
  {
    v24 = *(_OWORD *)v33;
    a2[2] = v33[2];
    *(_OWORD *)a2 = v24;
  }
  v25 = off_1E81A6E70;
  if (v32 == 1 && v27)
    MEMORY[0x1CAA32F9C](v27, 0x1000C8077774924);
  if (SHIBYTE(v35) < 0)
    operator delete(v34[0]);
}

void sub_1C4DCA9C4(llvm::Value *a1@<X0>, void (*a2)(uint64_t, void (***)(llvm::raw_ostream *__hidden this), llvm::Value *)@<X2>, uint64_t a3@<X3>, void (*a4)(uint64_t, std::string *, unsigned int *, std::string::size_type)@<X4>, uint64_t a5@<X5>, std::string *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  int v18;
  int v19;
  __int128 v20;
  int v21;
  std::string *v22;
  BOOL v23;
  std::string::size_type size;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t *v29;
  std::string *v30;
  int v31;
  std::string *v32;
  std::string::const_iterator v33;
  std::string::size_type v34;
  std::string::size_type v35;
  char v36;
  BOOL v37;
  std::string::size_type v38;
  std::string *v39;
  int v40;
  std::string::size_type v41;
  unsigned int v42;
  void (**v43)(llvm::raw_ostream *__hidden);
  int v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  char v48;
  uint64_t v49;
  int v50;
  void **v51;
  void *__p[2];
  uint64_t v53;

  __p[0] = 0;
  __p[1] = 0;
  v53 = 0;
  v44 = 0;
  v48 = 0;
  v49 = 0;
  v43 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v51 = __p;
  v50 = 0;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
    goto LABEL_49;
  v12 = ***(_QWORD ***)a1;
  v13 = *(_QWORD *)(v12 + 152);
  v14 = *(unsigned int *)(v12 + 168);
  if ((_DWORD)v14)
  {
    LODWORD(v15) = (v14 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v16 = v13 + 16 * v15;
    v17 = *(llvm::Value **)v16;
    if (*(llvm::Value **)v16 == a1)
      goto LABEL_9;
    v18 = 1;
    while (v17 != (llvm::Value *)-4096)
    {
      v19 = v15 + v18++;
      v15 = v19 & (v14 - 1);
      v17 = *(llvm::Value **)(v13 + 16 * v15);
      if (v17 == a1)
      {
        v16 = v13 + 16 * v15;
        goto LABEL_9;
      }
    }
  }
  v16 = v13 + 16 * v14;
LABEL_9:
  if (!**(_QWORD **)(v16 + 8))
  {
LABEL_49:
    llvm::Value::printAsOperand(a1, (llvm::raw_ostream *)&v43, 0, 0);
    if (v46 == v47)
      llvm::raw_ostream::write((llvm::raw_ostream *)&v43, ":", 1uLL);
    else
      *v47++ = 58;
  }
  a2(a3, &v43, a1);
  if (*((char *)v51 + 23) < 0)
  {
    sub_1C47EBC30(a6, *v51, (unint64_t)v51[1]);
  }
  else
  {
    v20 = *(_OWORD *)v51;
    a6->__r_.__value_.__r.__words[2] = (std::string::size_type)v51[2];
    *(_OWORD *)&a6->__r_.__value_.__l.__data_ = v20;
  }
  v21 = SHIBYTE(a6->__r_.__value_.__r.__words[2]);
  v22 = (std::string *)a6->__r_.__value_.__r.__words[0];
  if (v21 >= 0)
    v22 = a6;
  if (v22->__r_.__value_.__s.__data_[0] == 10)
  {
    std::string::erase(a6, 0, 1uLL);
    LOBYTE(v21) = *((_BYTE *)&a6->__r_.__value_.__s + 23);
  }
  v42 = 0;
  v37 = (v21 & 0x80u) != 0;
  v23 = v37;
  size = v21 & 0x7F;
  if (v37)
    size = a6->__r_.__value_.__l.__size_;
  if (size)
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = (uint64_t *)a6->__r_.__value_.__r.__words[0];
    do
    {
      if (v23)
        v30 = (std::string *)v29;
      else
        v30 = a6;
      v31 = v30->__r_.__value_.__s.__data_[v25];
      if (v31 == 59)
      {
        v34 = std::string::find(a6, 10, v28 + 1);
        a4(a5, a6, &v42, v34);
      }
      else if (v31 == 10)
      {
        v30->__r_.__value_.__s.__data_[v25] = 92;
        if ((a6->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = a6;
        else
          v32 = (std::string *)a6->__r_.__value_.__r.__words[0];
        v33.__i_ = &v32->__r_.__value_.__s.__data_[v42 + 1];
        std::string::insert(a6, v33, 108);
        v27 = 0;
        v26 = 0;
      }
      else if (v26 == 80)
      {
        if (v27)
          v35 = v27;
        else
          v35 = v28;
        std::string::insert(a6, v35, "\\l...");
        v27 = 0;
        v26 = v42 - v35;
        v42 += 3;
      }
      else
      {
        ++v26;
      }
      v36 = HIBYTE(a6->__r_.__value_.__r.__words[2]);
      v37 = v36 < 0;
      v23 = v37;
      v29 = (uint64_t *)a6->__r_.__value_.__r.__words[0];
      v38 = a6->__r_.__value_.__l.__size_;
      if (v36 >= 0)
        v39 = a6;
      else
        v39 = (std::string *)a6->__r_.__value_.__r.__words[0];
      v40 = v39->__r_.__value_.__s.__data_[v42];
      v41 = v36 & 0x7F;
      if (!v37)
        v38 = v41;
      if (v40 == 32)
        v27 = v42;
      v25 = v42 + 1;
      v42 = v25;
      v28 = v25;
    }
    while (v38 != v25);
  }
  v43 = off_1E81A6E70;
  if (v50 == 1 && v45)
    MEMORY[0x1CAA32F9C](v45, 0x1000C8077774924);
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
}

void sub_1C4DCAD10(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  char v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  void (**v15)(llvm::raw_ostream *__hidden);
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  int v22;
  void **v23;
  void *__p[2];
  uint64_t v25;
  char *v26;
  __int128 v27;
  _QWORD v28[6];

  v28[5] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  if (v4 == a1 + 40)
    goto LABEL_26;
  v5 = v4 - 24;
  if (!v4)
    v5 = 0;
  v6 = *(unsigned __int8 *)(v5 + 16) - 40;
  if (v6 < 0xFFFFFFF5)
    v5 = 0;
  v7 = *(unsigned __int8 *)(v5 + 16);
  if (v4)
  {
    if (v7 == 30 && v6 >= 0xFFFFFFF5)
    {
      if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 3)
      {
        *(_BYTE *)(a3 + 23) = 1;
        if (a2)
          v9 = 70;
        else
          v9 = 84;
        *(_BYTE *)a3 = v9;
        *(_BYTE *)(a3 + 1) = 0;
        return;
      }
LABEL_26:
      *(_BYTE *)(a3 + 23) = 0;
      *(_BYTE *)a3 = 0;
      return;
    }
  }
  if (!v4)
    goto LABEL_26;
  if (v7 != 31 || v6 < 0xFFFFFFF5)
    goto LABEL_26;
  if (a2)
  {
    __p[0] = 0;
    __p[1] = 0;
    v25 = 0;
    v16 = 0;
    v20 = 0;
    v21 = 0;
    v15 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v23 = __p;
    v22 = 0;
    v18 = 0;
    v19 = 0;
    v17 = 0;
    v11 = *(_DWORD *)(v5 + 20);
    if ((v11 & 0x40000000) != 0)
      v12 = *(_QWORD *)(v5 - 8);
    else
      v12 = v5 - 32 * (v11 & 0x7FFFFFF);
    v13 = *(_QWORD *)(v12 + 32 * (2 * a2)) + 24;
    v26 = (char *)v28;
    v27 = xmmword_1C64638D0;
    llvm::APInt::toString(v13, &v26, 0xAu, 1, 0);
    llvm::raw_ostream::write((llvm::raw_ostream *)&v15, v26, v27);
    if (v26 != (char *)v28)
      free(v26);
    if (*((char *)v23 + 23) < 0)
    {
      sub_1C47EBC30((_BYTE *)a3, *v23, (unint64_t)v23[1]);
    }
    else
    {
      v14 = *(_OWORD *)v23;
      *(_QWORD *)(a3 + 16) = v23[2];
      *(_OWORD *)a3 = v14;
    }
    v15 = off_1E81A6E70;
    if (v22 == 1 && v17)
      MEMORY[0x1CAA32F9C](v17, 0x1000C8077774924);
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_BYTE *)(a3 + 23) = 3;
    *(_DWORD *)a3 = 6710628;
  }
}

void sub_1C4DCAF2C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void (**v3)(llvm::raw_ostream *__hidden);
  int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = 0;
  v8 = 0;
  v9 = 0;
  v3 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v11 = a2;
  v10 = 0;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  sub_1C639D338(a1, (llvm::raw_ostream *)&v3);
  v2 = v7 - v5;
  if (v7 != v5)
  {
    v7 = v5;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v3, v5, v2);
  }
  v3 = off_1E81A6E70;
  if (v10 == 1)
  {
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8077774924, v2);
  }
}

void sub_1C4DCAFD8(double *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;

  if (!a4)
  {
    v7 = 2;
    v8 = 2;
    goto LABEL_36;
  }
  v5 = *a3;
  v6 = 3;
  v7 = 2;
  if (v5 > 0x64)
  {
    if (v5 == 101)
    {
      v6 = 0;
      goto LABEL_15;
    }
    if (v5 != 102)
    {
      if (v5 != 112)
        goto LABEL_17;
      goto LABEL_15;
    }
  }
  else
  {
    if (v5 == 69)
    {
      v6 = 1;
      goto LABEL_15;
    }
    if (v5 != 70)
    {
      if (v5 != 80)
        goto LABEL_17;
      goto LABEL_15;
    }
  }
  v6 = 2;
LABEL_15:
  if (!--a4)
  {
LABEL_32:
    if (v6 >= 2)
      v8 = 2;
    else
      v8 = 6;
    v7 = v6;
    goto LABEL_36;
  }
  ++a3;
  v7 = v6;
LABEL_17:
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = a3[v9];
    if ((v11 - 48) >= 0xA)
    {
      if ((v11 - 97) >= 0x1A)
      {
        if ((v11 - 65) > 0x19)
          goto LABEL_31;
        v12 = -55;
      }
      else
      {
        v12 = -87;
      }
    }
    else
    {
      v12 = -48;
    }
    v13 = v12 + v11;
    if (v13 > 9 || (v14 = 10 * v10 + v13, v10 > v14 / 0xA))
    {
LABEL_31:
      v6 = v7;
      goto LABEL_32;
    }
    ++v9;
    v10 = v14;
  }
  while (a4 != v9);
  if (v14 >= 0x63)
    v8 = 99;
  else
    v8 = v14;
LABEL_36:
  llvm::write_double(a2, v7, v8, 1, *a1);
}

uint64_t sub_1C4DCB11C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4DC7A64(v0);
}

void sub_1C4DCB148(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4DCB170(uint64_t a1, uint64_t a2)
{
  void *result;

  sub_1C4771E64(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  result = sub_1C4771E64(a2, a2, (uint64_t)&llvm::BranchProbabilityInfoWrapperPass::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C4DCB1B8(uint64_t a1, uint64_t ***a2)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ****v9;
  uint64_t ***v10;
  int v11;
  int v12;
  uint64_t ***v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  void **v21;
  void *v22;
  char *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t v27;
  unint64_t BlockFreq;
  uint64_t v30[2];

  if (byte_1ED7F09CF >= 0)
    v4 = byte_1ED7F09CF & 0x7F;
  else
    v4 = qword_1ED7F09C0;
  if (v4)
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v15 = 0;
      v14 = &byte_1C871356D;
LABEL_14:
      v30[0] = (uint64_t)v14;
      v30[1] = v15;
      if (byte_1ED7F09CF >= 0)
        v17 = (char *)&qword_1ED7F09B8;
      else
        v17 = (char *)qword_1ED7F09B8;
      if (llvm::StringRef::find(v30, v17, v4, 0) == -1)
        return 0;
      goto LABEL_18;
    }
    v5 = ***a2;
    v6 = *(_QWORD *)(v5 + 152);
    v7 = *(unsigned int *)(v5 + 168);
    if ((_DWORD)v7)
    {
      LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v9 = (uint64_t ****)(v6 + 16 * v8);
      v10 = *v9;
      if (*v9 == a2)
      {
LABEL_13:
        v13 = v9[1];
        v16 = (uint64_t)*v13;
        v14 = (char *)(v13 + 2);
        v15 = v16;
        goto LABEL_14;
      }
      v11 = 1;
      while (v10 != (uint64_t ***)-4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v7 - 1);
        v10 = *(uint64_t ****)(v6 + 16 * v8);
        if (v10 == a2)
        {
          v9 = (uint64_t ****)(v6 + 16 * v8);
          goto LABEL_13;
        }
      }
    }
    v9 = (uint64_t ****)(v6 + 16 * v7);
    goto LABEL_13;
  }
LABEL_18:
  v18 = **(void ****)(a1 + 8);
  do
  {
    v19 = *v18;
    v18 += 2;
  }
  while (v19 != &llvm::BranchProbabilityInfoWrapperPass::ID);
  v20 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), &llvm::BranchProbabilityInfoWrapperPass::ID);
  v21 = **(void ****)(a1 + 8);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != &llvm::BlockFrequencyInfoWrapperPass::ID);
  v23 = (char *)(v20 + 32);
  v24 = (uint64_t *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32);
  v25 = a2[10];
  if (v25 == (uint64_t **)(a2 + 9))
  {
    v26 = 0;
  }
  else
  {
    v26 = 0;
    do
    {
      if (v25)
        v27 = (uint64_t)(v25 - 3);
      else
        v27 = 0;
      BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(v24, v27);
      if (BlockFreq > (unint64_t)v26)
        v26 = (uint64_t **)BlockFreq;
      v25 = (uint64_t **)v25[1];
    }
    while (v25 != (uint64_t **)(a2 + 9));
  }
  sub_1C4DC728C(a2, (uint64_t)v24, v23, v26, 0);
  return 0;
}

void sub_1C4DCB3A0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C4DCB3C8(uint64_t a1, uint64_t a2)
{
  void *result;

  sub_1C4771E64(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  result = sub_1C4771E64(a2, a2, (uint64_t)&llvm::BranchProbabilityInfoWrapperPass::ID);
  *(_BYTE *)(a2 + 160) = 1;
  return result;
}

uint64_t sub_1C4DCB410(uint64_t a1, uint64_t ***a2)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ****v9;
  uint64_t ***v10;
  int v11;
  int v12;
  uint64_t ***v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void **v18;
  void *v19;
  uint64_t v20;
  void **v21;
  void *v22;
  char *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t v27;
  unint64_t BlockFreq;
  uint64_t v30[2];

  if (byte_1ED7F09CF >= 0)
    v4 = byte_1ED7F09CF & 0x7F;
  else
    v4 = qword_1ED7F09C0;
  if (v4)
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v15 = 0;
      v14 = &byte_1C871356D;
LABEL_14:
      v30[0] = (uint64_t)v14;
      v30[1] = v15;
      if (byte_1ED7F09CF >= 0)
        v17 = (char *)&qword_1ED7F09B8;
      else
        v17 = (char *)qword_1ED7F09B8;
      if (llvm::StringRef::find(v30, v17, v4, 0) == -1)
        return 0;
      goto LABEL_18;
    }
    v5 = ***a2;
    v6 = *(_QWORD *)(v5 + 152);
    v7 = *(unsigned int *)(v5 + 168);
    if ((_DWORD)v7)
    {
      LODWORD(v8) = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v9 = (uint64_t ****)(v6 + 16 * v8);
      v10 = *v9;
      if (*v9 == a2)
      {
LABEL_13:
        v13 = v9[1];
        v16 = (uint64_t)*v13;
        v14 = (char *)(v13 + 2);
        v15 = v16;
        goto LABEL_14;
      }
      v11 = 1;
      while (v10 != (uint64_t ***)-4096)
      {
        v12 = v8 + v11++;
        v8 = v12 & (v7 - 1);
        v10 = *(uint64_t ****)(v6 + 16 * v8);
        if (v10 == a2)
        {
          v9 = (uint64_t ****)(v6 + 16 * v8);
          goto LABEL_13;
        }
      }
    }
    v9 = (uint64_t ****)(v6 + 16 * v7);
    goto LABEL_13;
  }
LABEL_18:
  v18 = **(void ****)(a1 + 8);
  do
  {
    v19 = *v18;
    v18 += 2;
  }
  while (v19 != &llvm::BranchProbabilityInfoWrapperPass::ID);
  v20 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), &llvm::BranchProbabilityInfoWrapperPass::ID);
  v21 = **(void ****)(a1 + 8);
  do
  {
    v22 = *v21;
    v21 += 2;
  }
  while (v22 != &llvm::BlockFrequencyInfoWrapperPass::ID);
  v23 = (char *)(v20 + 32);
  v24 = (uint64_t *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32);
  v25 = a2[10];
  if (v25 == (uint64_t **)(a2 + 9))
  {
    v26 = 0;
  }
  else
  {
    v26 = 0;
    do
    {
      if (v25)
        v27 = (uint64_t)(v25 - 3);
      else
        v27 = 0;
      BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(v24, v27);
      if (BlockFreq > (unint64_t)v26)
        v26 = (uint64_t **)BlockFreq;
      v25 = (uint64_t **)v25[1];
    }
    while (v25 != (uint64_t **)(a2 + 9));
  }
  sub_1C4DC728C(a2, (uint64_t)v24, v23, v26, 1);
  return 0;
}

_QWORD *sub_1C4DCB5F4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C617F868(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4DCB6AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  __n128 v4;
  char v5;
  char *v6;

  v0 = sub_1C47AD050((uint64_t)&qword_1ED7F0938, 0, 0);
  qword_1ED7F09C0 = 0;
  qword_1ED7F09B8 = 0;
  unk_1ED7F09C8 = 0;
  qword_1ED7F09D8 = 0;
  qword_1ED7F09E8 = 0;
  qword_1ED7F09E0 = 0;
  byte_1ED7F09F0 = 0;
  qword_1ED7F09D0 = (uint64_t)&unk_1E819E950;
  qword_1ED7F0938 = (uint64_t)&unk_1E819E480;
  qword_1ED7F09F8 = (uint64_t)&unk_1E819E970;
  qword_1ED7F0A00 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED7F0A18 = (uint64_t)&qword_1ED7F0A00;
  llvm::cl::Option::setArgStr(v0, "cfg-func-name", 0xDuLL);
  word_1ED7F0942 = word_1ED7F0942 & 0xFF9F | 0x20;
  qword_1ED7F0958 = (uint64_t)"The name of a function (or its substring) whose CFG is viewed/printed.";
  qword_1ED7F0960 = 70;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F0938);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED7F0938, &dword_1C475E000);
  v1 = sub_1C47AD050((uint64_t)&qword_1ED7F0A20, 0, 0);
  qword_1ED7F0AA8 = 0;
  qword_1ED7F0AA0 = 0;
  unk_1ED7F0AB0 = 0;
  qword_1ED7F0AC0 = 0;
  qword_1ED7F0AD0 = 0;
  qword_1ED7F0AC8 = 0;
  byte_1ED7F0AD8 = 0;
  qword_1ED7F0AB8 = (uint64_t)&unk_1E819E950;
  qword_1ED7F0A20 = (uint64_t)&unk_1E819E480;
  qword_1ED7F0AE0 = (uint64_t)&unk_1E819E970;
  qword_1ED7F0AE8 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED7F0B00 = (uint64_t)&qword_1ED7F0AE8;
  llvm::cl::Option::setArgStr(v1, "cfg-dot-filename-prefix", 0x17uLL);
  word_1ED7F0A2A = word_1ED7F0A2A & 0xFF9F | 0x20;
  qword_1ED7F0A40 = (uint64_t)"The prefix used for the CFG dot file names.";
  qword_1ED7F0A48 = 43;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F0A20);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED7F0A20, &dword_1C475E000);
  LOBYTE(v6) = 0;
  v4.n128_u64[0] = (unint64_t)&v6;
  sub_1C617F530((char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED7F04B0, &dword_1C475E000);
  LOBYTE(v6) = 0;
  v4.n128_u64[0] = (unint64_t)&v6;
  sub_1C617F5E0((char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED7F0570, &dword_1C475E000);
  v6 = (char *)&v3;
  v3 = 0;
  v4.n128_u64[0] = (unint64_t)"Hide blocks with relative frequency below the given value";
  v4.n128_u64[1] = 57;
  sub_1C617F690((uint64_t **)&v6, (__int128 *)&v4);
  __cxa_atexit((void (*)(void *))sub_1C4DB7184, &qword_1ED7F0870, &dword_1C475E000);
  v5 = 1;
  v6 = &v5;
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Show heat colors in CFG";
  v4.n128_u64[1] = 23;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F0630, "cfg-heat-colors", &v6, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F0630, &dword_1C475E000);
  v5 = 0;
  v6 = &v5;
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Use raw weights for labels. Use percentages as default.";
  v4.n128_u64[1] = 55;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F06F0, "cfg-raw-weights", &v6, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F06F0, &dword_1C475E000);
  v5 = 0;
  v6 = &v5;
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Show edges labeled with weights";
  v4.n128_u64[1] = 31;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F07B0, "cfg-weights", &v6, &v3, &v4);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F07B0, &dword_1C475E000);
}

uint64_t llvm::CFLAndersAAResult::CFLAndersAAResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  v3 = a1 + 8;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 32) = v3;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v3);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  v3 = a1 + 8;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 32) = v3;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v3);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  v3 = a1 + 8;
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (v4 == a2 + 8)
    {
      *(_QWORD *)(a1 + 32) = v3;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 32) + 24))(*(_QWORD *)(a2 + 32), v3);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  v3 = a1 + 8;
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (v4 == a2 + 8)
    {
      *(_QWORD *)(a1 + 32) = v3;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 32) + 24))(*(_QWORD *)(a2 + 32), v3);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return a1;
}

BOOL llvm::CFLAndersAAResult::FunctionInfo::mayAlias(int *a1, const llvm::Value *a2, unint64_t a3, const llvm::Value *a4, unint64_t a5)
{
  int Attrs;
  char v11;
  char v12;
  char v13;
  int v14;
  _BOOL8 result;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;

  Attrs = llvm::CFLAndersAAResult::FunctionInfo::getAttrs((llvm::CFLAndersAAResult::FunctionInfo *)a1, a2);
  v12 = v11;
  v14 = llvm::CFLAndersAAResult::FunctionInfo::getAttrs((llvm::CFLAndersAAResult::FunctionInfo *)a1, a4);
  result = 1;
  if (!v12 || !v13)
    return result;
  if ((Attrs & 0xA) != 0)
  {
    v16 = v14 == 0;
    return !v16;
  }
  if ((v14 & 0xA) != 0)
  {
    v16 = Attrs == 0;
    return !v16;
  }
  v17 = v14 & 0xFFFFFFF4;
  if (v17)
    result = (Attrs & 0xFFFFFFF4) != 0;
  else
    result = 0;
  if (Attrs & 0xFFFFFFF4 | v17)
    return result;
  v38 = 0;
  if (sub_1C4DCDF60(*(_QWORD *)a1, a1[4], (uint64_t)a2, &v38))
  {
    v18 = v38;
    v19 = *(_QWORD *)a1;
    v20 = a1[4];
  }
  else
  {
    v19 = *(_QWORD *)a1;
    v20 = a1[4];
    v18 = *(_QWORD *)a1 + 32 * v20;
  }
  if (v18 == v19 + 32 * v20)
    return 0;
  v21 = *(char **)(v18 + 8);
  v22 = *(char **)(v18 + 16);
  if (v22 == v21)
    return 0;
  v23 = (v22 - v21) >> 4;
  while (1)
  {
    v24 = v23 >> 1;
    v25 = &v21[16 * (v23 >> 1)];
    if (*(_QWORD *)v25 >= (unint64_t)a4)
      break;
    v21 = v25 + 16;
    v24 = v23 + ~v24;
LABEL_25:
    result = 0;
    v23 = v24;
    if (!v24)
      return result;
  }
  if (*(_QWORD *)v25 > (unint64_t)a4)
  {
    v22 = &v21[16 * (v23 >> 1)];
    goto LABEL_25;
  }
  if (v23 >= 2)
  {
    do
    {
      v26 = v24 >> 1;
      v27 = (unint64_t *)&v21[16 * (v24 >> 1)];
      v29 = *v27;
      v28 = (char *)(v27 + 2);
      v24 += ~(v24 >> 1);
      if (v29 < (unint64_t)a4)
        v21 = v28;
      else
        v24 = v26;
    }
    while (v24);
  }
  v30 = v25 + 16;
  if (v22 != v25 + 16)
  {
    v31 = (v22 - (v25 + 16)) >> 4;
    v22 = v30;
    do
    {
      v32 = v31 >> 1;
      v33 = (unint64_t *)&v22[16 * (v31 >> 1)];
      v35 = *v33;
      v34 = (char *)(v33 + 2);
      v31 += ~(v31 >> 1);
      if (v35 > (unint64_t)a4)
        v31 = v32;
      else
        v22 = v34;
    }
    while (v31);
  }
  if (v21 == v22)
    return 0;
  result = 1;
  if (a3 <= 0xFFFFFFFFFFFFFFFDLL && a5 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    while (1)
    {
      v36 = *((_QWORD *)v21 + 1);
      if (v36 == 0x7FFFFFFFFFFFFFFFLL)
        break;
      if (v36 >= (uint64_t)(1 - (a3 & 0x7FFFFFFFFFFFFFFFLL)) && v36 < (uint64_t)(a5 & 0x7FFFFFFFFFFFFFFFLL))
        break;
      result = 0;
      v21 += 16;
      if (v21 == v22)
        return result;
    }
    return 1;
  }
  return result;
}

uint64_t *llvm::CFLAndersAAResult::buildInfoFrom@<X0>(llvm::CFLAndersAAResult *this@<X0>, const llvm::Function *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t *v79;
  uint64_t *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t v106;
  int v107;
  uint64_t v110;
  uint64_t *v111;
  int v112;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  char *v118;
  unint64_t *v119;
  unint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t *v137;
  char *v138;
  unint64_t *v139;
  unint64_t *v140;
  char *v141;
  unint64_t *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  unsigned int v146;
  BOOL v147;
  unint64_t *v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  unint64_t *v162;
  char *v163;
  unint64_t *v164;
  int v165;
  uint64_t v168;
  int v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  char *v183;
  unint64_t *v184;
  char *v185;
  char *v186;
  unint64_t v187;
  uint64_t **v188;
  unint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  int v203;
  uint64_t v206;
  uint64_t v207;
  int v208;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  BOOL v216;
  uint64_t v217;
  char *v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t *v222;
  uint64_t v223;
  int v224;
  uint64_t v227;
  int v228;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  unint64_t v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  char v246;
  unint64_t *v247;
  int v248;
  unsigned int v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  int v267;
  uint64_t v270;
  __int128 *v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  BOOL v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  int v286;
  uint64_t v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  _QWORD *v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  BOOL v297;
  uint64_t v298;
  char *v299;
  unint64_t v300;
  uint64_t v301;
  _DWORD *v302;
  uint64_t v303;
  unint64_t v304;
  uint64_t v305;
  __int128 v306;
  int v307;
  uint64_t v310;
  uint64_t v311;
  int v312;
  _DWORD *v313;
  _DWORD *v314;
  uint64_t v315;
  uint64_t v316;
  int *v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unint64_t v325;
  uint64_t v326;
  __int128 v327;
  uint64_t v328;
  size_t v329;
  uint64_t *v330;
  uint64_t v331;
  uint64_t *v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  BOOL v337;
  uint64_t v338;
  int v339;
  _QWORD *v340;
  BOOL v341;
  __int128 v342;
  uint64_t v343;
  _QWORD *v344;
  _QWORD *v345;
  char *v346;
  uint64_t v347;
  llvm::Function *v349;
  unint64_t v350;
  int v351;
  char *v352;
  uint64_t v353;
  unint64_t *v354;
  uint64_t v355;
  unint64_t v356;
  int v357;
  uint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t *v361;
  unint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unsigned int v373;
  void *__p;
  uint64_t *v375;
  uint64_t v376;
  void *v377;
  uint64_t *v378;
  uint64_t v379;
  uint64_t v380[2];
  unsigned int v381;
  uint64_t v382;
  uint64_t v383;
  unsigned int v384;
  __int128 v385;
  uint64_t v386;
  _BYTE v387[24];
  uint64_t *v388;
  void **v389;
  _QWORD v390[2];
  uint64_t *v391;
  uint64_t v392;
  unsigned int v393;
  char *v394;
  uint64_t v395;
  _QWORD v396[6];

  v396[4] = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 4);
  if (!v5)
    sub_1C485C2F0();
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  v390[0] = this;
  v390[1] = v7;
  v391 = 0;
  v392 = 0;
  v393 = 0;
  v394 = (char *)v396;
  v395 = 0x400000000;
  v8 = *((_QWORD *)a2 + 5) + 272;
  *(_QWORD *)v387 = this;
  *(_QWORD *)&v387[8] = v8;
  *(_QWORD *)&v387[16] = v7;
  v388 = (uint64_t *)&v391;
  v389 = (void **)&v394;
  v9 = (char *)a2 + 72;
  v349 = a2;
  for (i = *((_QWORD *)a2 + 10); (char *)i != v9; i = *(_QWORD *)(i + 8))
  {
    v11 = i - 24;
    if (!i)
      v11 = 0;
    v12 = v11 + 40;
    for (j = *(_QWORD *)(v11 + 48); j != v12; j = *(_QWORD *)(j + 8))
    {
      if (j)
        v14 = j - 24;
      else
        v14 = 0;
      v15 = *(unsigned __int8 *)(v14 + 16);
      if ((v15 - 81) >= 2)
      {
        v16 = v15 != 33 && (v15 - 40) >= 0xFFFFFFF5;
        v18 = !v16 || v15 == 29;
        if (v15 != 63 && v18 != 0)
          sub_1C6181270((uint64_t)v387, v14);
      }
    }
  }
  if ((*((_WORD *)v349 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(v349);
    v20 = *((_QWORD *)v349 + 11);
    if ((*((_WORD *)v349 + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(v349);
      v21 = *((_QWORD *)v349 + 11);
      goto LABEL_31;
    }
  }
  else
  {
    v20 = *((_QWORD *)v349 + 11);
  }
  v21 = v20;
LABEL_31:
  v22 = v21 + 40 * *((_QWORD *)v349 + 12);
  while (v20 != v22)
  {
    sub_1C6181204((_BOOL8)v390, v20);
    v20 += 40;
  }
  v382 = 0;
  v383 = 0;
  v384 = 0;
  v380[0] = 0;
  v380[1] = 0;
  v381 = 0;
  v377 = 0;
  v378 = 0;
  v379 = 0;
  __p = 0;
  v375 = 0;
  v23 = &v391[4 * v393];
  v376 = 0;
  if ((_DWORD)v392)
  {
    if (v393)
    {
      v25 = 32 * v393;
      v24 = v391;
      while ((*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v24 += 4;
        v25 -= 32;
        if (!v25)
          goto LABEL_40;
      }
    }
    else
    {
      v24 = v391;
    }
  }
  else
  {
LABEL_40:
    v24 = &v391[4 * v393];
  }
  v26 = &v391[4 * v393];
  if (v24 != v26)
  {
    do
    {
      v27 = -1227133513 * ((unint64_t)(v24[2] - v24[1]) >> 3);
      if ((_DWORD)v27)
      {
        v28 = 0;
        v29 = *v24;
        do
        {
          v30 = v24[1] + 56 * v28;
          v32 = *(uint64_t **)v30;
          v31 = *(uint64_t **)(v30 + 8);
          while (v32 != v31)
          {
            sub_1C4DCDA04(*v32, v32[1], v29, v28, 0, (uint64_t)&v382, (char **)&v377);
            v33 = *v32;
            v34 = v32[1];
            v32 += 3;
            sub_1C4DCDA04(v29, v28, v33, v34, 3, (uint64_t)&v382, (char **)&v377);
          }
          ++v28;
        }
        while (v28 != v27);
      }
      v35 = v24 + 4;
      v24 = v23;
      if (v35 != v23)
      {
        v24 = v35;
        while ((*v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v24 += 4;
          if (v24 == v23)
          {
            v24 = v23;
            break;
          }
        }
      }
    }
    while (v24 != v26);
    v36 = (uint64_t *)v377;
    v361 = v378;
    if (v377 != v378)
    {
      v37 = v379;
      do
      {
        v353 = v37;
        v356 = (unint64_t)v36;
        do
        {
          v38 = *v36;
          v39 = v36[1];
          v40 = v36[2];
          v41 = v36[3];
          v365 = sub_1C6180550((uint64_t)&v391, v40, v41);
          v42 = sub_1C6180550((uint64_t)&v391, v38, (int)v39 + 1);
          v43 = (v41 + 1);
          v44 = sub_1C6180550((uint64_t)&v391, v40, (int)v41 + 1);
          if (v42)
            v45 = v44 == 0;
          else
            v45 = 1;
          if (!v45)
          {
            *(_QWORD *)&v385 = v38;
            *((_QWORD *)&v385 + 1) = (v39 + 1);
            v371 = v40;
            v372 = (v41 + 1);
            v70 = sub_1C6180684((uint64_t)v380, (uint64_t)&v385);
            sub_1C61806F8((uint64_t)v387, v70 + 16, (uint64_t)&v371);
            if (v387[16])
            {
              v351 = v41;
              sub_1C4DCDA04(v38, (v39 + 1), v40, (v41 + 1), 1, (uint64_t)&v382, (char **)&__p);
              sub_1C4DCDD44((uint64_t *)v387, (uint64_t)&v382, v38, v39 + 1);
              v71 = *(uint64_t **)v387;
              v358 = *(uint64_t **)&v387[16];
              if (*(_QWORD *)v387 != *(_QWORD *)&v387[16])
              {
                v72 = *(uint64_t **)&v387[8];
                do
                {
                  v74 = *v71;
                  v73 = v71[1];
                  v75 = v71[2];
                  if ((v75 & 1) != 0)
                  {
                    sub_1C4DCDA04(*v71, v71[1], v40, v43, 2, (uint64_t)&v382, (char **)&__p);
                    v75 = v71[2];
                    if ((v75 & 8) == 0)
                    {
LABEL_86:
                      if ((v75 & 0x10) == 0)
                        goto LABEL_88;
LABEL_87:
                      sub_1C4DCDA04(v74, v73, v40, v43, 6, (uint64_t)&v382, (char **)&__p);
                      goto LABEL_88;
                    }
                  }
                  else if ((v75 & 8) == 0)
                  {
                    goto LABEL_86;
                  }
                  sub_1C4DCDA04(v74, v73, v40, v43, 5, (uint64_t)&v382, (char **)&__p);
                  if ((v71[2] & 0x10) != 0)
                    goto LABEL_87;
LABEL_88:
                  while (1)
                  {
                    v71 += 3;
                    if (v71 == v72)
                      break;
                    v76 = *((_DWORD *)v71 + 2);
                    if ((*v71 != -4096 || v76 != -1) && (*v71 != -8192 || v76 != -2))
                      goto LABEL_99;
                  }
                  v71 = v72;
LABEL_99:
                  ;
                }
                while (v71 != v358);
              }
              LODWORD(v41) = v351;
            }
          }
          switch(*((_BYTE *)v36 + 32))
          {
            case 0:
              v89 = *(uint64_t **)(v365 + 24);
              v90 = *(uint64_t **)(v365 + 32);
              while (v89 != v90)
              {
                v91 = *v89;
                v92 = v89[1];
                v89 += 3;
                sub_1C4DCDA04(v38, v39, v91, v92, 0, (uint64_t)&v382, (char **)&__p);
              }
              v93 = *(uint64_t **)v365;
              v94 = *(uint64_t **)(v365 + 8);
              v81 = v41;
              while (v93 != v94)
              {
                v95 = *v93;
                v96 = v93[1];
                v93 += 3;
                sub_1C4DCDA04(v38, v39, v95, v96, 4, (uint64_t)&v382, (char **)&__p);
              }
              v84 = 2;
              goto LABEL_120;
            case 1:
              v46 = *(uint64_t **)(v365 + 24);
              v47 = *(uint64_t **)(v365 + 32);
              while (v46 != v47)
              {
                v48 = *v46;
                v49 = v46[1];
                v46 += 3;
                sub_1C4DCDA04(v38, v39, v48, v49, 0, (uint64_t)&v382, (char **)&__p);
              }
              v54 = *(uint64_t **)v365;
              v55 = *(uint64_t **)(v365 + 8);
              while (v54 != v55)
              {
                v56 = *v54;
                v57 = v54[1];
                v54 += 3;
                sub_1C4DCDA04(v38, v39, v56, v57, 3, (uint64_t)&v382, (char **)&__p);
              }
              goto LABEL_154;
            case 2:
              v58 = *(uint64_t **)(v365 + 24);
              v59 = *(uint64_t **)(v365 + 32);
              while (v58 != v59)
              {
                v60 = *v58;
                v61 = v58[1];
                v58 += 3;
                sub_1C4DCDA04(v38, v39, v60, v61, 0, (uint64_t)&v382, (char **)&__p);
              }
              v62 = *(uint64_t **)v365;
              v63 = *(uint64_t **)(v365 + 8);
              while (v62 != v63)
              {
                v64 = *v62;
                v65 = v62[1];
                v62 += 3;
                sub_1C4DCDA04(v38, v39, v64, v65, 4, (uint64_t)&v382, (char **)&__p);
              }
              goto LABEL_154;
            case 3:
              v85 = *(uint64_t **)v365;
              v86 = *(uint64_t **)(v365 + 8);
              v81 = v41;
              while (v85 != v86)
              {
                v87 = *v85;
                v88 = v85[1];
                v85 += 3;
                sub_1C4DCDA04(v38, v39, v87, v88, 3, (uint64_t)&v382, (char **)&__p);
              }
              v84 = 5;
              goto LABEL_120;
            case 4:
              v79 = *(uint64_t **)v365;
              v80 = *(uint64_t **)(v365 + 8);
              v81 = v41;
              while (v79 != v80)
              {
                v82 = *v79;
                v83 = v79[1];
                v79 += 3;
                sub_1C4DCDA04(v38, v39, v82, v83, 4, (uint64_t)&v382, (char **)&__p);
              }
              v84 = 6;
LABEL_120:
              *(_QWORD *)v387 = 0;
              v97 = v380[0];
              v98 = v381;
              if (sub_1C617FF94(v380[0], v381, v40, v81, v387))
                v99 = *(_QWORD *)v387;
              else
                v99 = v97 + 40 * v98;
              v100 = v99 + 16;
              if (v99 == v97 + 40 * v98)
                goto LABEL_154;
              v101 = *(_DWORD *)(v99 + 24);
              v102 = *(_QWORD *)(v99 + 16);
              v103 = *(unsigned int *)(v99 + 32);
              v104 = (uint64_t *)(v102 + 16 * v103);
              v105 = v104;
              if (!v101)
                goto LABEL_139;
              if (!(_DWORD)v103)
                goto LABEL_138;
              v106 = 16 * v103;
              break;
            case 5:
              v50 = *(uint64_t **)v365;
              v51 = *(uint64_t **)(v365 + 8);
              while (v50 != v51)
              {
                v52 = *v50;
                v53 = v50[1];
                v50 += 3;
                sub_1C4DCDA04(v38, v39, v52, v53, 3, (uint64_t)&v382, (char **)&__p);
              }
              goto LABEL_154;
            case 6:
              v66 = *(uint64_t **)v365;
              v67 = *(uint64_t **)(v365 + 8);
              while (v66 != v67)
              {
                v68 = *v66;
                v69 = v66[1];
                v66 += 3;
                sub_1C4DCDA04(v38, v39, v68, v69, 4, (uint64_t)&v382, (char **)&__p);
              }
              goto LABEL_154;
            default:
              goto LABEL_154;
          }
          while (1)
          {
            v107 = *(_DWORD *)(v102 + 8);
            if ((*(_QWORD *)v102 != -4096 || v107 != -1) && (*(_QWORD *)v102 != -8192 || v107 != -2))
              break;
            v102 += 16;
            v106 -= 16;
            if (!v106)
            {
              v105 = v104;
              goto LABEL_139;
            }
          }
LABEL_138:
          v105 = (uint64_t *)v102;
LABEL_139:
          v110 = *(_QWORD *)v100 + 16 * *(unsigned int *)(v100 + 16);
LABEL_140:
          while (v105 != (uint64_t *)v110)
          {
            sub_1C4DCDA04(v38, v39, *v105, v105[1], v84, (uint64_t)&v382, (char **)&__p);
            v111 = v105 + 2;
            v105 = v104;
            if (v111 != v104)
            {
              v105 = v111;
              while (1)
              {
                v112 = *((_DWORD *)v105 + 2);
                if ((*v105 != -4096 || v112 != -1) && (*v105 != -8192 || v112 != -2))
                  break;
                v105 += 2;
                if (v105 == v104)
                {
                  v105 = v104;
                  goto LABEL_140;
                }
              }
            }
          }
LABEL_154:
          v36 += 5;
        }
        while (v36 != v361);
        v377 = __p;
        v378 = v375;
        v37 = v376;
        v376 = v353;
        v379 = v37;
        __p = (void *)v356;
        v375 = (uint64_t *)v356;
        v36 = (uint64_t *)v377;
        v361 = v378;
      }
      while (v377 != v378);
    }
  }
  v371 = 0;
  v372 = 0;
  v373 = 0;
  v115 = &v391[4 * v393];
  if ((_DWORD)v392)
  {
    if (v393)
    {
      v117 = 32 * v393;
      v116 = v391;
      while ((*v116 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v116 += 4;
        v117 -= 32;
        if (!v117)
          goto LABEL_162;
      }
    }
    else
    {
      v116 = v391;
    }
  }
  else
  {
LABEL_162:
    v116 = &v391[4 * v393];
  }
  v366 = &v391[4 * v393];
  if (v116 != v366)
  {
    v118 = 0;
    v119 = 0;
    v120 = 0;
    do
    {
      v121 = -1227133513 * ((unint64_t)(v116[2] - v116[1]) >> 3);
      if ((_DWORD)v121)
      {
        v122 = 0;
        v123 = *v116;
        v124 = (char *)v119;
        do
        {
          v125 = *(_QWORD *)(v116[1] + 56 * v122 + 48);
          *(_QWORD *)v387 = v123;
          *(_QWORD *)&v387[8] = v122;
          v126 = sub_1C618025C((uint64_t)&v371, (uint64_t)v387);
          v127 = *(_QWORD *)(v126 + 16);
          if ((v127 | v125) != v127)
            *(_QWORD *)(v126 + 16) = v127 | v125;
          if (v124 >= v118)
          {
            v128 = v118;
            v129 = (v124 - (char *)v120) >> 4;
            v130 = v129 + 1;
            if ((unint64_t)(v129 + 1) >> 60)
LABEL_600:
              abort();
            v131 = v128 - (char *)v120;
            v132 = (v128 - (char *)v120) >> 3;
            if (v132 > v130)
              v130 = v132;
            if (v131 >= 0x7FFFFFFFFFFFFFF0)
              v133 = 0xFFFFFFFFFFFFFFFLL;
            else
              v133 = v130;
            if (v133)
            {
              if (v133 >> 60)
LABEL_601:
                sub_1C4764EE4();
              v134 = (char *)operator new(16 * v133);
            }
            else
            {
              v134 = 0;
            }
            v135 = &v134[16 * v129];
            *(_QWORD *)v135 = v123;
            *((_QWORD *)v135 + 1) = v122;
            if (v124 == (char *)v120)
            {
              v120 = (unint64_t *)&v134[16 * v129];
            }
            else
            {
              v136 = &v134[16 * v129];
              do
              {
                *((_OWORD *)v136 - 1) = *((_OWORD *)v124 - 1);
                v136 -= 16;
                v124 -= 16;
              }
              while (v124 != (char *)v120);
              v124 = (char *)v120;
              v120 = (unint64_t *)v136;
            }
            v118 = &v134[16 * v133];
            v119 = (unint64_t *)(v135 + 16);
            if (v124)
              operator delete(v124);
          }
          else
          {
            *(_QWORD *)v124 = v123;
            *((_QWORD *)v124 + 1) = v122;
            v119 = (unint64_t *)(v124 + 16);
          }
          ++v122;
          v124 = (char *)v119;
        }
        while (v122 != v121);
      }
      v137 = v116 + 4;
      v116 = v115;
      if (v137 != v115)
      {
        v116 = v137;
        while ((*v116 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v116 += 4;
          if (v116 == v115)
          {
            v116 = v115;
            break;
          }
        }
      }
    }
    while (v116 != v366);
    if (v120 != v119)
    {
      v138 = 0;
      v139 = 0;
      do
      {
        v140 = v139;
        v141 = v138;
        v139 = v120;
        v138 = v118;
        v142 = v120;
        v118 = v141;
        v120 = v140;
        do
        {
          v143 = *v142;
          v144 = *((_DWORD *)v142 + 2);
          *(_QWORD *)v387 = 0;
          v145 = v371;
          v146 = v373;
          if (sub_1C61802CC(v371, v373, v143, v144, v387))
            v147 = *(_QWORD *)v387 == v145 + 24 * v146;
          else
            v147 = 1;
          if (!v147 && *(_QWORD *)(*(_QWORD *)v387 + 16))
          {
            v367 = *(_QWORD *)(*(_QWORD *)v387 + 16);
            v352 = v138;
            v354 = v139;
            sub_1C4DCDD44((uint64_t *)v387, (uint64_t)&v382, *v142, v142[1]);
            v148 = *(unint64_t **)v387;
            v362 = *(unint64_t **)&v387[16];
            if (*(_QWORD *)v387 != *(_QWORD *)&v387[16])
            {
              v149 = *(unint64_t **)&v387[8];
              do
              {
                v151 = *v148;
                v150 = v148[1];
                *(_QWORD *)&v385 = *v148;
                *((_QWORD *)&v385 + 1) = v150;
                v152 = sub_1C618025C((uint64_t)&v371, (uint64_t)&v385);
                v153 = *(_QWORD *)(v152 + 16);
                if ((v153 | v367) != v153)
                {
                  *(_QWORD *)(v152 + 16) = v153 | v367;
                  if (v140 >= (unint64_t *)v118)
                  {
                    v154 = v118;
                    v155 = ((char *)v140 - (char *)v120) >> 4;
                    v156 = v155 + 1;
                    if ((unint64_t)(v155 + 1) >> 60)
                      goto LABEL_600;
                    v157 = v154 - (char *)v120;
                    v158 = (v154 - (char *)v120) >> 3;
                    if (v158 > v156)
                      v156 = v158;
                    if (v157 >= 0x7FFFFFFFFFFFFFF0)
                      v159 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v159 = v156;
                    if (v159)
                    {
                      if (v159 >> 60)
                        goto LABEL_601;
                      v359 = v159;
                      v160 = (char *)operator new(16 * v159);
                      v159 = v359;
                    }
                    else
                    {
                      v160 = 0;
                    }
                    v161 = &v160[16 * v155];
                    *(_QWORD *)v161 = v151;
                    *((_QWORD *)v161 + 1) = v150;
                    if (v140 == v120)
                    {
                      v162 = v140;
                      v120 = (unint64_t *)&v160[16 * v155];
                    }
                    else
                    {
                      v163 = &v160[16 * v155];
                      do
                      {
                        *((_OWORD *)v163 - 1) = *((_OWORD *)v140 - 1);
                        v163 -= 16;
                        v140 -= 2;
                      }
                      while (v140 != v120);
                      v162 = v120;
                      v120 = (unint64_t *)v163;
                    }
                    v118 = &v160[16 * v159];
                    v140 = (unint64_t *)(v161 + 16);
                    if (v162)
                      operator delete(v162);
                  }
                  else
                  {
                    *v140 = v151;
                    v140[1] = v150;
                    v140 += 2;
                  }
                }
                v164 = v148 + 3;
                v148 = v149;
                if (v164 != v149)
                {
                  v148 = v164;
                  while (1)
                  {
                    v165 = *((_DWORD *)v148 + 2);
                    if ((*v148 != -4096 || v165 != -1) && (*v148 != -8192 || v165 != -2))
                      break;
                    v148 += 3;
                    if (v148 == v149)
                    {
                      v148 = v149;
                      break;
                    }
                  }
                }
              }
              while (v148 != v362);
            }
            v168 = *v142;
            v169 = *((_DWORD *)v142 + 2);
            v170 = (v169 + 1);
            v171 = sub_1C6180550((uint64_t)&v391, *v142, v169 + 1);
            v172 = v356 & 0xFFFFFFFFFFFFFF00;
            if (v171)
              v172 = v168;
            v356 = v172;
            if (v171)
            {
              v138 = v352;
              v139 = v354;
              v173 = v172;
              while (1)
              {
                *(_QWORD *)v387 = v173;
                *(_QWORD *)&v387[8] = v170;
                v174 = sub_1C618025C((uint64_t)&v371, (uint64_t)v387);
                v175 = *(_QWORD *)(v174 + 16);
                if ((v175 | v367) != v175)
                  break;
                v170 = (v170 + 1);
                v176 = sub_1C6180550((uint64_t)&v391, v173, v170);
                if (!v176)
                  v173 = v350 & 0xFFFFFFFFFFFFFF00;
                v350 = v173;
                if (!v176)
                {
                  v356 = v173;
                  goto LABEL_203;
                }
              }
              v356 = v173;
              *(_QWORD *)(v174 + 16) = v175 | v367;
              if (v140 >= (unint64_t *)v118)
              {
                v177 = v118;
                v178 = ((char *)v140 - (char *)v120) >> 4;
                v179 = v178 + 1;
                if ((unint64_t)(v178 + 1) >> 60)
                  goto LABEL_600;
                v180 = v177 - (char *)v120;
                v181 = (v177 - (char *)v120) >> 3;
                if (v181 > v179)
                  v179 = v181;
                if (v180 >= 0x7FFFFFFFFFFFFFF0)
                  v182 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v182 = v179;
                if (v182)
                {
                  if (v182 >> 60)
                    goto LABEL_601;
                  v183 = (char *)operator new(16 * v182);
                }
                else
                {
                  v183 = 0;
                }
                v184 = (unint64_t *)&v183[16 * v178];
                *v184 = v356;
                v184[1] = v170;
                if (v140 == v120)
                {
                  v186 = &v183[16 * v178];
                }
                else
                {
                  v185 = &v183[16 * v178];
                  do
                  {
                    v186 = v185 - 16;
                    *((_OWORD *)v185 - 1) = *((_OWORD *)v140 - 1);
                    v140 -= 2;
                    v185 -= 16;
                  }
                  while (v140 != v120);
                }
                v118 = &v183[16 * v182];
                v140 = v184 + 2;
                if (v120)
                  operator delete(v120);
                v120 = (unint64_t *)v186;
              }
              else
              {
                *v140 = v173;
                v140[1] = v170;
                v140 += 2;
              }
            }
            else
            {
              v138 = v352;
              v139 = v354;
            }
          }
LABEL_203:
          v142 += 2;
        }
        while (v142 != v119);
        v119 = v140;
      }
      while (v120 != v140);
      if (v139)
        operator delete(v139);
    }
    if (v120)
      operator delete(v120);
  }
  *(_QWORD *)(a3 + 24) = 0;
  v187 = a3 + 24;
  *(_QWORD *)(a3 + 48) = a3 + 64;
  v188 = (uint64_t **)(a3 + 48);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 56) = 0x800000000;
  v189 = a3 + 272;
  *(_QWORD *)(a3 + 256) = a3 + 272;
  *(_QWORD *)(a3 + 264) = 0x800000000;
  v190 = v371;
  v191 = v372;
  v192 = v373;
  v193 = v371 + 24 * v373;
  v194 = v373;
  v195 = v193;
  if ((_DWORD)v372)
  {
    if (v373)
    {
      v196 = 24 * v373;
      v195 = v371;
      do
      {
        v197 = *(_DWORD *)(v195 + 8);
        if ((*(_QWORD *)v195 != -4096 || v197 != -1) && (*(_QWORD *)v195 != -8192 || v197 != -2))
        {
          v194 = v373;
          goto LABEL_293;
        }
        v195 += 24;
        v196 -= 24;
      }
      while (v196);
      v194 = v373;
      v195 = v371 + 24 * v373;
    }
    else
    {
      v194 = 0;
      v195 = v371;
    }
  }
LABEL_293:
  v200 = v371 + 24 * v194;
LABEL_294:
  while (v195 != v200)
  {
    *(_OWORD *)v387 = *(_OWORD *)v195;
    v201 = sub_1C6180A54(a3 + 24, (uint64_t *)v387);
    if (!*(_DWORD *)&v387[8])
      v201[1] |= *(_QWORD *)(v195 + 16);
    v202 = v195 + 24;
    v195 = v193;
    if (v202 != v193)
    {
      v195 = v202;
      while (1)
      {
        v203 = *(_DWORD *)(v195 + 8);
        if ((*(_QWORD *)v195 != -4096 || v203 != -1) && (*(_QWORD *)v195 != -8192 || v203 != -2))
          break;
        v195 += 24;
        if (v195 == v193)
        {
          v195 = v193;
          goto LABEL_294;
        }
      }
    }
  }
  if (v191)
  {
    if ((_DWORD)v192)
    {
      v207 = 24 * v192;
      v206 = v190;
      while (1)
      {
        v208 = *(_DWORD *)(v206 + 8);
        if ((*(_QWORD *)v206 != -4096 || v208 != -1) && (*(_QWORD *)v206 != -8192 || v208 != -2))
          break;
        v206 += 24;
        v207 -= 24;
        if (!v207)
          goto LABEL_324;
      }
    }
    else
    {
      v206 = v190;
    }
  }
  else
  {
LABEL_324:
    v206 = v193;
  }
  v211 = v190 + 24 * v192;
  if (v206 != v211)
  {
    v187 = a3 + 256;
    do
    {
      v215 = *(_QWORD *)v206;
      v214 = *(_QWORD *)(v206 + 8);
      if (*(_QWORD *)v206)
        v216 = *(_BYTE *)(*(_QWORD *)v206 + 16) == 21;
      else
        v216 = 0;
      if (v216)
      {
        v219 = (*(_DWORD *)(v215 + 32) + 1) | (unint64_t)(v214 << 32);
      }
      else
      {
        if ((_DWORD)v395)
        {
          v217 = 8 * v395;
          v218 = v394;
          while (*(_QWORD *)v218 != v215)
          {
            v218 += 8;
            v217 -= 8;
            if (!v217)
            {
              v218 = &v394[8 * v395];
              break;
            }
          }
        }
        else
        {
          v218 = v394;
        }
        if (v395 == (v218 - v394) >> 3)
          goto LABEL_347;
        v219 = v214 << 32;
      }
      v220 = *(_QWORD *)(v206 + 16) & 7;
      if (v220)
      {
        v221 = *(unsigned int *)(a3 + 264);
        if (v221 >= *(unsigned int *)(a3 + 268))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a3 + 256, a3 + 272, v221 + 1, 16);
          v221 = *(unsigned int *)(a3 + 264);
        }
        v222 = (unint64_t *)(*(_QWORD *)(a3 + 256) + 16 * v221);
        *v222 = v219;
        v222[1] = v220;
        ++*(_DWORD *)(a3 + 264);
      }
LABEL_347:
      v223 = v206 + 24;
      v206 = v193;
      if (v223 != v193)
      {
        v206 = v223;
        while (1)
        {
          v224 = *(_DWORD *)(v206 + 8);
          if ((*(_QWORD *)v206 != -4096 || v224 != -1) && (*(_QWORD *)v206 != -8192 || v224 != -2))
            break;
          v206 += 24;
          if (v206 == v193)
          {
            v206 = v193;
            break;
          }
        }
      }
    }
    while (v206 != v211);
  }
  v212 = v382 + 40 * v384;
  if ((_DWORD)v383)
  {
    if (v384)
    {
      v227 = 40 * v384;
      v213 = v382;
      while (1)
      {
        v228 = *(_DWORD *)(v213 + 8);
        if ((*(_QWORD *)v213 != -4096 || v228 != -1) && (*(_QWORD *)v213 != -8192 || v228 != -2))
          break;
        v213 += 40;
        v227 -= 40;
        if (!v227)
          goto LABEL_373;
      }
    }
    else
    {
      v213 = v382;
    }
  }
  else
  {
LABEL_373:
    v213 = v382 + 40 * v384;
  }
  v231 = v382 + 40 * v384;
  if (v213 != v231)
  {
    v363 = v382 + 40 * v384;
    while (*(_DWORD *)(v213 + 8))
    {
LABEL_391:
      v242 = v213 + 40;
      v213 = v212;
      if (v242 != v212)
      {
        v213 = v242;
        while (1)
        {
          v243 = *(_DWORD *)(v213 + 8);
          if ((*(_QWORD *)v213 != -4096 || v243 != -1) && (*(_QWORD *)v213 != -8192 || v243 != -2))
            break;
          v213 += 40;
          if (v213 == v212)
          {
            v213 = v212;
            break;
          }
        }
      }
      if (v213 == v231)
        goto LABEL_375;
    }
    v189 = *(_QWORD *)v213;
    *(_QWORD *)v387 = 0;
    v246 = sub_1C4DCDF60(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v189, v387);
    v247 = *(unint64_t **)v387;
    if ((v246 & 1) != 0)
    {
LABEL_412:
      v250 = sub_1C61809F8((uint64_t *)(v213 + 16));
      v252 = *(_QWORD *)(v213 + 16) + 24 * *(unsigned int *)(v213 + 32);
      if (v252 != v250)
      {
        v187 = v250;
        v189 = v251;
        v368 = *(_QWORD *)(v213 + 16) + 24 * *(unsigned int *)(v213 + 32);
        do
        {
          if (*(_DWORD *)(v187 + 8))
            goto LABEL_434;
          v253 = *(_QWORD *)v187;
          v255 = (_QWORD *)v247[2];
          v254 = v247[3];
          if ((unint64_t)v255 >= v254)
          {
            v257 = v247[1];
            v258 = (uint64_t)((uint64_t)v255 - v257) >> 4;
            v259 = v258 + 1;
            if ((unint64_t)(v258 + 1) >> 60)
              goto LABEL_600;
            v260 = v254 - v257;
            if (v260 >> 3 > v259)
              v259 = v260 >> 3;
            if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFF0)
              v261 = 0xFFFFFFFFFFFFFFFLL;
            else
              v261 = v259;
            if (v261)
            {
              if (v261 >> 60)
                goto LABEL_601;
              v262 = (char *)operator new(16 * v261);
            }
            else
            {
              v262 = 0;
            }
            v263 = &v262[16 * v258];
            *(_QWORD *)v263 = v253;
            *((_QWORD *)v263 + 1) = 0x7FFFFFFFFFFFFFFFLL;
            v265 = (char *)v247[1];
            v264 = (char *)v247[2];
            v266 = v263;
            if (v264 != v265)
            {
              do
              {
                *((_OWORD *)v266 - 1) = *((_OWORD *)v264 - 1);
                v266 -= 16;
                v264 -= 16;
              }
              while (v264 != v265);
              v264 = (char *)v247[1];
            }
            v256 = v263 + 16;
            v247[1] = (unint64_t)v266;
            v247[2] = (unint64_t)(v263 + 16);
            v247[3] = (unint64_t)&v262[16 * v261];
            if (v264)
              operator delete(v264);
            v252 = v368;
          }
          else
          {
            *v255 = v253;
            v255[1] = 0x7FFFFFFFFFFFFFFFLL;
            v256 = v255 + 2;
          }
          v247[2] = (unint64_t)v256;
LABEL_434:
          while (1)
          {
            v187 += 24;
            if (v187 == v189)
              break;
            v267 = *(_DWORD *)(v187 + 8);
            if ((*(_QWORD *)v187 != -4096 || v267 != -1) && (*(_QWORD *)v187 != -8192 || v267 != -2))
              goto LABEL_445;
          }
          v187 = v189;
LABEL_445:
          ;
        }
        while (v187 != v252);
      }
      v270 = v247[1];
      v271 = (__int128 *)v247[2];
      v272 = 126 - 2 * __clz(((uint64_t)v271 - v270) >> 4);
      if (v271 == (__int128 *)v270)
        v273 = 0;
      else
        v273 = v272;
      sub_1C4DCE144(v270, v271, v273, 1);
      v231 = v363;
      goto LABEL_391;
    }
    v248 = *(_DWORD *)(a3 + 8);
    v249 = *(_DWORD *)(a3 + 16);
    if (4 * v248 + 4 >= 3 * v249)
    {
      v249 *= 2;
    }
    else if (v249 + ~v248 - *(_DWORD *)(a3 + 12) > v249 >> 3)
    {
LABEL_409:
      ++*(_DWORD *)(a3 + 8);
      if (*v247 != -4096)
        --*(_DWORD *)(a3 + 12);
      *v247 = v189;
      v247[1] = 0;
      v247[2] = 0;
      v247[3] = 0;
      goto LABEL_412;
    }
    sub_1C4DCDFF4(a3, v249);
    *(_QWORD *)v387 = 0;
    sub_1C4DCDF60(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v189, v387);
    v247 = *(unint64_t **)v387;
    goto LABEL_409;
  }
LABEL_375:
  v232 = sub_1C485F330((uint64_t)v349);
  if (v232 != v233)
  {
    v234 = v232;
    v189 = v233;
    v187 = 24;
    do
    {
      if ((_DWORD)v395)
      {
        v235 = 8 * v395;
        v236 = v394;
        while (*(_QWORD *)v236 != v234)
        {
          v236 += 8;
          v235 -= 8;
          if (!v235)
          {
            v236 = &v394[8 * v395];
            break;
          }
        }
      }
      else
      {
        v236 = v394;
      }
      if (v395 != (v236 - v394) >> 3)
      {
        *(_DWORD *)v387 = *(_DWORD *)(v234 + 32) + 1;
        memset(&v387[4], 0, 20);
        v237 = sub_1C4926708(a3 + 48, (unint64_t)v387, 1);
        v238 = *(_QWORD *)(a3 + 48) + 24 * *(unsigned int *)(a3 + 56);
        v239 = *(_OWORD *)v237;
        *(_QWORD *)(v238 + 16) = *(_QWORD *)(v237 + 16);
        *(_OWORD *)v238 = v239;
        ++*(_DWORD *)(a3 + 56);
      }
      v234 += 40;
    }
    while (v234 != v189);
  }
  memset(v387, 0, 20);
  v240 = v382 + 40 * v384;
  if ((_DWORD)v383)
  {
    if (v384)
    {
      v274 = 40 * v384;
      v241 = v382;
      while (1)
      {
        v275 = *(_DWORD *)(v241 + 8);
        if ((*(_QWORD *)v241 != -4096 || v275 != -1) && (*(_QWORD *)v241 != -8192 || v275 != -2))
          break;
        v241 += 40;
        v274 -= 40;
        if (!v274)
          goto LABEL_463;
      }
    }
    else
    {
      v241 = v382;
    }
  }
  else
  {
LABEL_463:
    v241 = v382 + 40 * v384;
  }
  v369 = v382 + 40 * v384;
  v360 = v382;
  if (v241 == v369)
  {
    LODWORD(v278) = 0;
    v279 = 0;
    goto LABEL_530;
  }
  do
  {
    v281 = *(_QWORD *)v241;
    v280 = *(_QWORD *)(v241 + 8);
    if (*(_QWORD *)v241)
      v282 = *(_BYTE *)(*(_QWORD *)v241 + 16) == 21;
    else
      v282 = 0;
    if (v282)
    {
      v289 = (*(_DWORD *)(v281 + 32) + 1) | (unint64_t)(v280 << 32);
      goto LABEL_494;
    }
    if ((_DWORD)v395)
    {
      v283 = 8 * v395;
      v284 = v394;
      while (*(_QWORD *)v284 != v281)
      {
        v284 += 8;
        v283 -= 8;
        if (!v283)
        {
          v284 = &v394[8 * v395];
          break;
        }
      }
    }
    else
    {
      v284 = v394;
    }
    if (v395 != (v284 - v394) >> 3)
    {
      v289 = v280 << 32;
LABEL_494:
      v290 = sub_1C61809F8((uint64_t *)(v241 + 16));
      v292 = *(_QWORD *)(v241 + 16) + 24 * *(unsigned int *)(v241 + 32);
      if (v292 != v290)
      {
        v293 = (_QWORD *)v290;
        v294 = v291;
        do
        {
          v296 = *v293;
          v295 = v293[1];
          if (*v293)
            v297 = *(_BYTE *)(*v293 + 16) == 21;
          else
            v297 = 0;
          if (v297)
          {
            v300 = (*(_DWORD *)(v296 + 32) + 1) | (unint64_t)(v295 << 32);
          }
          else
          {
            if ((_DWORD)v395)
            {
              v298 = 8 * v395;
              v299 = v394;
              while (*(_QWORD *)v299 != v296)
              {
                v299 += 8;
                v298 -= 8;
                if (!v298)
                {
                  v299 = &v394[8 * v395];
                  break;
                }
              }
            }
            else
            {
              v299 = v394;
            }
            if (v395 == (v299 - v394) >> 3)
            {
              v385 = *(_OWORD *)v293;
              v301 = v293[2];
              if ((v301 & 5) != 0)
              {
                v302 = (_DWORD *)sub_1C4DCEF70((uint64_t)v387, (uint64_t *)&v385);
                v189 = v189 & 0xFFFFFFFF00000000 | DWORD2(v385);
                sub_1C476CB98(v302, v289, v189);
                v301 = v293[2];
              }
              if ((v301 & 0x28) != 0)
              {
                v303 = sub_1C4DCEF70((uint64_t)v387, (uint64_t *)&v385);
                v187 = v187 & 0xFFFFFFFF00000000 | DWORD2(v385);
                sub_1C476CB98((_DWORD *)(v303 + 64), v289, v187);
              }
              goto LABEL_516;
            }
            v300 = v295 << 32;
          }
          if (v289 != v300 && (v293[2] & 5) != 0)
          {
            *(_QWORD *)&v385 = v289;
            *((_QWORD *)&v385 + 1) = v300;
            v386 = 0x7FFFFFFFFFFFFFFFLL;
            v304 = sub_1C4926708(a3 + 48, (unint64_t)&v385, 1);
            v305 = *(_QWORD *)(a3 + 48) + 24 * *(unsigned int *)(a3 + 56);
            v306 = *(_OWORD *)v304;
            *(_QWORD *)(v305 + 16) = *(_QWORD *)(v304 + 16);
            *(_OWORD *)v305 = v306;
            ++*(_DWORD *)(a3 + 56);
          }
LABEL_516:
          while (1)
          {
            v293 += 3;
            if (v293 == v294)
              break;
            v307 = *((_DWORD *)v293 + 2);
            if ((*v293 != -4096 || v307 != -1) && (*v293 != -8192 || v307 != -2))
              goto LABEL_527;
          }
          v293 = v294;
LABEL_527:
          ;
        }
        while (v293 != (_QWORD *)v292);
      }
    }
    v285 = v241 + 40;
    v241 = v240;
    if (v285 != v240)
    {
      v241 = v285;
      while (1)
      {
        v286 = *(_DWORD *)(v241 + 8);
        if ((*(_QWORD *)v241 != -4096 || v286 != -1) && (*(_QWORD *)v241 != -8192 || v286 != -2))
          break;
        v241 += 40;
        if (v241 == v240)
        {
          v241 = v240;
          break;
        }
      }
    }
  }
  while (v241 != v369);
  v279 = *(_QWORD *)v387;
  v278 = *(unsigned int *)&v387[16];
  if (*(_DWORD *)&v387[8])
  {
    v311 = *(_QWORD *)v387 + 136 * *(unsigned int *)&v387[16];
    if (*(_DWORD *)&v387[16])
    {
      v338 = 0;
      while ((*(_QWORD *)(*(_QWORD *)v387 + v338) | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v338 += 136;
        if (136 * *(unsigned int *)&v387[16] == v338)
        {
          v357 = 1;
          v310 = *(_QWORD *)v387 + 136 * *(unsigned int *)&v387[16];
          goto LABEL_531;
        }
      }
      v310 = *(_QWORD *)v387 + v338;
      v357 = 1;
    }
    else
    {
      v278 = 0;
      v357 = 0;
      v310 = *(_QWORD *)v387;
    }
  }
  else
  {
LABEL_530:
    v278 = v278;
    v357 = v278;
    v310 = v279 + 136 * v278;
    v311 = v310;
  }
LABEL_531:
  v355 = v278;
  v364 = v279;
  v370 = v279 + 136 * v278;
  while (v310 != v370)
  {
    v312 = *(_DWORD *)(v310 + 16);
    if (v312)
    {
      v313 = *(_DWORD **)(v310 + 8);
      v314 = &v313[3 * v312];
      do
      {
        v315 = *(unsigned int *)(v310 + 80);
        if ((_DWORD)v315)
        {
          v316 = 12 * v315;
          v317 = (int *)(*(_QWORD *)(v310 + 72) + 4);
          do
          {
            v318 = v317[1];
            v319 = v313[2];
            if (v318 != v319)
            {
              v320 = *(v317 - 1);
              v321 = *v317;
              v322 = v318 - v319;
              if (v318 < v319)
                v322 = 0;
              v323 = v313[1] + v322;
              v16 = v319 >= v318;
              v324 = v319 - v318;
              if (!v16)
                v324 = 0;
              LODWORD(v385) = *v313;
              *(_QWORD *)((char *)&v385 + 4) = __PAIR64__(v320, v323);
              HIDWORD(v385) = v321 + v324;
              v386 = 0x7FFFFFFFFFFFFFFFLL;
              v325 = sub_1C4926708(a3 + 48, (unint64_t)&v385, 1);
              v326 = *(_QWORD *)(a3 + 48) + 24 * *(unsigned int *)(a3 + 56);
              v327 = *(_OWORD *)v325;
              *(_QWORD *)(v326 + 16) = *(_QWORD *)(v325 + 16);
              *(_OWORD *)v326 = v327;
              ++*(_DWORD *)(a3 + 56);
            }
            v317 += 3;
            v316 -= 12;
          }
          while (v316);
        }
        v313 += 3;
      }
      while (v313 != v314);
    }
    v328 = v310 + 136;
    v310 = v311;
    if (v328 != v311)
    {
      v310 = v328;
      while ((*(_QWORD *)v310 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v310 += 136;
        if (v310 == v311)
        {
          v310 = v311;
          break;
        }
      }
    }
  }
  v329 = *(unsigned int *)(a3 + 56);
  if (v329 >= 2)
  {
    qsort(*(void **)(a3 + 48), v329, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_1C6180C20);
    LODWORD(v329) = *(_DWORD *)(a3 + 56);
  }
  v330 = *v188;
  v331 = (uint64_t)&(*v188)[3 * v329];
  v332 = *v188;
  if ((_DWORD)v329)
  {
    if ((_DWORD)v329 != 1)
    {
      v333 = 0;
      v334 = *v330;
      v335 = v364;
      while (1)
      {
        v336 = v330[v333 / 8 + 3];
        v337 = v334 == v336 && v330[v333 / 8 + 1] == v330[v333 / 8 + 4];
        if (v337 && v330[v333 / 8 + 2] == v330[v333 / 8 + 5])
          break;
        v333 += 24;
        v334 = v336;
        if (24 * v329 - 24 == v333)
          goto LABEL_572;
      }
      v332 = &v330[v333 / 8];
      goto LABEL_570;
    }
LABEL_571:
    v335 = v364;
LABEL_572:
    v339 = v357;
  }
  else
  {
LABEL_570:
    if (v332 == (uint64_t *)v331)
      goto LABEL_571;
    v340 = v332 + 6;
    v335 = v364;
    if (v332 + 6 != (uint64_t *)v331)
    {
      do
      {
        v341 = *v332 == *v340 && v332[1] == v340[1];
        if (!v341 || v332[2] != v340[2])
        {
          v342 = *(_OWORD *)v340;
          v332[5] = v340[2];
          *(_OWORD *)(v332 + 3) = v342;
          v332 += 3;
        }
        v340 += 3;
      }
      while (v340 != (_QWORD *)v331);
      v330 = *v188;
    }
    v339 = v357;
    v331 = (uint64_t)(v332 + 3);
  }
  *(_DWORD *)(a3 + 56) = -1431655765 * ((unint64_t)(v331 - (_QWORD)v330) >> 3);
  if (v339)
  {
    v343 = 136 * v355;
    v344 = (_QWORD *)(v335 + 88);
    do
    {
      if ((*(v344 - 11) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v345 = (_QWORD *)*(v344 - 2);
        if (v344 != v345)
          free(v345);
        v346 = (char *)*(v344 - 10);
        if (v344 - 8 != (_QWORD *)v346)
          free(v346);
      }
      v344 += 17;
      v343 -= 136;
    }
    while (v343);
  }
  MEMORY[0x1CAA32FB4](v335, 8);
  MEMORY[0x1CAA32FB4](v371, 8);
  if (__p)
    operator delete(__p);
  if (v377)
    operator delete(v377);
  v347 = v380[0];
  sub_1C6180CAC(v380[0], v381);
  MEMORY[0x1CAA32FB4](v347, 8);
  sub_1C6180CAC(v360, v384);
  MEMORY[0x1CAA32FB4](v360, 8);
  if (v394 != (char *)v396)
    free(v394);
  return sub_1C4DCF3E0((uint64_t *)&v391);
}

int32x2_t llvm::CFLAndersAAResult::evict(llvm::CFLAndersAAResult *this, const llvm::Function *a2)
{
  return sub_1C617FB84((uint64_t)this + 40, (uint64_t)a2);
}

uint64_t llvm::CFLAndersAAResult::ensureCached(llvm::CFLAndersAAResult *this, const llvm::Function *a2)
{
  int v4;
  uint64_t v5;
  int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_1C6181F48(*((_QWORD *)this + 5), *((_DWORD *)this + 14), (uint64_t)a2, &v8);
  v5 = v8;
  if (!v4)
    v5 = *((_QWORD *)this + 5) + 416 * *((unsigned int *)this + 14);
  if (*((_QWORD *)this + 5) + 416 * *((unsigned int *)this + 14) == v5)
  {
    llvm::CFLAndersAAResult::scan(this, a2);
    v8 = 0;
    v7 = sub_1C6181F48(*((_QWORD *)this + 5), *((_DWORD *)this + 14), (uint64_t)a2, &v8);
    v5 = v8;
    if (!v7)
      v5 = *((_QWORD *)this + 5) + 416 * *((unsigned int *)this + 14);
  }
  return v5 + 8;
}

uint64_t llvm::CFLAndersAAResult::getAliasSummary(llvm::CFLAndersAAResult *this, const llvm::Function *a2)
{
  uint64_t v2;

  v2 = llvm::CFLAndersAAResult::ensureCached(this, a2);
  if (*(_BYTE *)(v2 + 400))
    return v2 + 48;
  else
    return 0;
}

BOOL llvm::CFLAndersAAResult::query(llvm::CFLAndersAAResult *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unsigned int v7;
  const llvm::Function **v8;
  const llvm::Function *v10;
  unsigned int v11;
  const llvm::Function **v12;
  int *v13;

  v3 = *a2;
  if (*(_BYTE *)(*(_QWORD *)*a2 + 8) != 15)
    return 0;
  v5 = *a3;
  if (*(_BYTE *)(*(_QWORD *)*a3 + 8) != 15)
    return 0;
  v7 = *(unsigned __int8 *)(v3 + 16);
  if (v7 >= 0x1C)
  {
    v8 = (const llvm::Function **)(*(_QWORD *)(v3 + 40) + 56);
  }
  else
  {
    if (v7 != 21)
      goto LABEL_9;
    v8 = (const llvm::Function **)(v3 + 24);
  }
  v10 = *v8;
  if (*v8)
  {
LABEL_14:
    v13 = (int *)llvm::CFLAndersAAResult::ensureCached(a1, v10);
    return llvm::CFLAndersAAResult::FunctionInfo::mayAlias(v13, (const llvm::Value *)v3, a2[1], (const llvm::Value *)v5, a3[1]);
  }
LABEL_9:
  v11 = *(unsigned __int8 *)(v5 + 16);
  if (v11 >= 0x1C)
  {
    v12 = (const llvm::Function **)(*(_QWORD *)(v5 + 40) + 56);
  }
  else
  {
    if (v11 != 21)
      return 1;
    v12 = (const llvm::Function **)(v5 + 24);
  }
  v10 = *v12;
  if (*v12)
    goto LABEL_14;
  return 1;
}

uint64_t sub_1C4DCD96C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Inclusion-Based CFL Alias Analysis";
  *(_QWORD *)(v2 + 8) = 34;
  *(_QWORD *)(v2 + 16) = "cfl-anders-aa";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &llvm::CFLAndersAAWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::CFLAndersAAWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void sub_1C4DCDA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char **a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[2];
  _QWORD v29[2];

  if (a1 != a3 || (_DWORD)a2 != (_DWORD)a4)
  {
    v29[0] = a1;
    v29[1] = a2;
    v28[0] = a3;
    v28[1] = a4;
    v13 = sub_1C617FF20(a6, (uint64_t)v28);
    v14 = sub_1C618025C(v13 + 16, (uint64_t)v29);
    v15 = *(_QWORD *)(v14 + 16);
    if ((v15 & (1 << a5)) == 0)
    {
      *(_QWORD *)(v14 + 16) = v15 | (1 << a5);
      v17 = a7[1];
      v16 = (unint64_t)a7[2];
      if ((unint64_t)v17 >= v16)
      {
        v19 = *a7;
        v20 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - *a7) >> 3);
        v21 = v20 + 1;
        if (v20 + 1 > 0x666666666666666)
          abort();
        v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - (_QWORD)v19) >> 3);
        if (2 * v22 > v21)
          v21 = 2 * v22;
        if (v22 >= 0x333333333333333)
          v23 = 0x666666666666666;
        else
          v23 = v21;
        if (v23)
        {
          if (v23 > 0x666666666666666)
            sub_1C4764EE4();
          v24 = (char *)operator new(40 * v23);
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[40 * v20];
        *(_QWORD *)v25 = a1;
        *((_QWORD *)v25 + 1) = a2;
        *((_QWORD *)v25 + 2) = a3;
        *((_QWORD *)v25 + 3) = a4;
        v25[32] = a5;
        v18 = v25 + 40;
        if (v17 != v19)
        {
          do
          {
            v26 = *(_OWORD *)(v17 - 40);
            v27 = *(_OWORD *)(v17 - 24);
            *((_QWORD *)v25 - 1) = *((_QWORD *)v17 - 1);
            *(_OWORD *)(v25 - 24) = v27;
            *(_OWORD *)(v25 - 40) = v26;
            v25 -= 40;
            v17 -= 40;
          }
          while (v17 != v19);
          v17 = *a7;
        }
        *a7 = v25;
        a7[1] = v18;
        a7[2] = &v24[40 * v23];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v17 = a1;
        *((_QWORD *)v17 + 1) = a2;
        *((_QWORD *)v17 + 2) = a3;
        *((_QWORD *)v17 + 3) = a4;
        v18 = v17 + 40;
        v17[32] = a5;
      }
      a7[1] = v18;
    }
  }
}

_OWORD *sub_1C4DCDBB4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C618014C(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = xmmword_1C85F22C0;
      result = (_OWORD *)((char *)result + 40);
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

_OWORD *sub_1C4DCDC7C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6180484(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C85F22C0;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4DCDD44(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  if (sub_1C617FF94(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3, a4, &v12))
  {
    v6 = v12;
    v7 = *(_QWORD *)a2;
    v8 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_DWORD *)(a2 + 16);
    v6 = *(_QWORD *)a2 + 40 * v8;
  }
  if (v6 == v7 + 40 * v8)
  {
    result = 0;
    v10 = 0;
    v11 = 0;
  }
  else
  {
    result = sub_1C61809F8((uint64_t *)(v6 + 16));
    v11 = *(_QWORD *)(v6 + 16) + 24 * *(unsigned int *)(v6 + 32);
  }
  *a1 = result;
  a1[1] = v10;
  a1[2] = v11;
  a1[3] = v11;
  return result;
}

_OWORD *sub_1C4DCDDEC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6180938(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result++ = xmmword_1C85F22C0;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C4DCDEA8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6180B6C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4DCDF60(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

_QWORD *sub_1C4DCDFF4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = 32 * v3;
      v14 = v4;
      do
      {
        v15 = *(_QWORD *)v14;
        if ((*(_QWORD *)v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          sub_1C4DCDF60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v19);
          v16 = v19;
          *v19 = v15;
          v16[1] = 0;
          v16[2] = 0;
          v16[3] = 0;
          *(_OWORD *)(v16 + 1) = *(_OWORD *)(v14 + 8);
          v16[3] = *(_QWORD *)(v14 + 24);
          ++v12;
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 16) = 0;
          *(_QWORD *)(v14 + 24) = 0;
          *(_DWORD *)(a1 + 8) = v12;
        }
        v14 += 32;
        v13 -= 32;
      }
      while (v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 32 * v17;
    do
    {
      *result = -4096;
      result += 4;
      v18 -= 32;
    }
    while (v18);
  }
  return result;
}

void sub_1C4DCE144(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  int64_t v26;
  __int128 *v28;
  unint64_t *v29;
  __int128 *v31;
  unint64_t v32;
  BOOL v33;
  unint64_t *v35;
  unint64_t v36;
  int64_t v37;
  BOOL v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  int64_t v43;
  __int128 *i;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int64_t v49;
  unint64_t v51;
  BOOL v52;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  __int128 *v58;
  unint64_t v59;
  BOOL v60;
  __int128 *v61;
  __int128 *v62;
  __int128 *v63;
  __int128 *v64;
  unint64_t v65;
  unint64_t v66;
  __int128 v67;
  BOOL v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  __int128 *v72;
  BOOL v74;
  uint64_t v75;
  unint64_t *v76;
  __int128 *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v81;
  uint64_t v82;
  _OWORD *v83;
  unint64_t v84;
  int64_t v86;
  int64_t v87;
  int64_t v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  BOOL v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  BOOL v101;
  uint64_t v103;
  __int128 *v104;
  __int128 *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  BOOL v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  BOOL v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v124;
  unint64_t v125;
  BOOL v126;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;

__int128 *sub_1C4DCEAB4(__int128 *result, unint64_t *a2, __int128 *a3)
{
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  __int128 v7;
  __int128 v8;
  BOOL v9;
  __int128 v10;
  __int128 v11;

  v3 = *a2;
  if (*a2 < *(_QWORD *)result
    || ((v4 = a2[1], v3 == *(_QWORD *)result) ? (v5 = v4 < *((_QWORD *)result + 1)) : (v5 = 0), v5))
  {
    if (*(_QWORD *)a3 < v3 || (*(_QWORD *)a3 == v3 ? (v9 = *((_QWORD *)a3 + 1) < (uint64_t)a2[1]) : (v9 = 0), v9))
    {
      v11 = *result;
      *result = *a3;
    }
    else
    {
      v10 = *result;
      *result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v10;
      if (*(_QWORD *)a3 >= *a2 && (*(_QWORD *)a3 != *a2 || *((_QWORD *)a3 + 1) >= (int64_t)a2[1]))
        return result;
      v11 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *a3;
    }
    *a3 = v11;
    return result;
  }
  if (*(_QWORD *)a3 < v3 || (*(_QWORD *)a3 == v3 ? (v6 = *((_QWORD *)a3 + 1) < v4) : (v6 = 0), v6))
  {
    v7 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *a3;
    *a3 = v7;
    if (*a2 < *(_QWORD *)result || *a2 == *(_QWORD *)result && (int64_t)a2[1] < *((_QWORD *)result + 1))
    {
      v8 = *result;
      *result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
    }
  }
  return result;
}

BOOL sub_1C4DCEBC0(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  unint64_t v7;
  BOOL v8;
  __int128 v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v21;
  _QWORD *v22;
  __int128 *v23;
  __int128 *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  __int128 v31;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 1;
      v7 = *((_QWORD *)a2 - 2);
      if (v7 < *(_QWORD *)a1 || (v7 == *(_QWORD *)a1 ? (v8 = *((_QWORD *)a2 - 1) < *(_QWORD *)(a1 + 8)) : (v8 = 0), v8))
      {
        v9 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v9;
      }
      return result;
    case 3:
      sub_1C4DCEAB4((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 1);
      return 1;
    case 4:
      sub_1C4DCEE94(a1, (unint64_t *)(a1 + 16), a1 + 32, (uint64_t)(a2 - 1));
      return 1;
    case 5:
      v21 = (_QWORD *)(a1 + 16);
      v22 = (_QWORD *)(a1 + 32);
      v23 = (__int128 *)(a1 + 48);
      sub_1C4DCEE94(a1, (unint64_t *)(a1 + 16), a1 + 32, a1 + 48);
      v24 = a2 - 1;
      v25 = *((_QWORD *)a2 - 2);
      v26 = *(_QWORD *)(a1 + 48);
      if (v25 >= v26)
      {
        result = 1;
        if (v25 != v26 || *((_QWORD *)a2 - 1) >= *(_QWORD *)(a1 + 56))
          return result;
      }
      v27 = *v23;
      *v23 = *v24;
      *v24 = v27;
      if (*(_QWORD *)v23 >= *v22)
      {
        result = 1;
        if (*(_QWORD *)v23 != *v22 || *(_QWORD *)(a1 + 56) >= *(_QWORD *)(a1 + 40))
          return result;
      }
      v28 = *(_OWORD *)v22;
      *(_OWORD *)v22 = *v23;
      *v23 = v28;
      if (*v22 >= *v21)
      {
        result = 1;
        if (*v22 != *v21 || *(_QWORD *)(a1 + 40) >= *(_QWORD *)(a1 + 24))
          return result;
      }
      v29 = *(_OWORD *)v21;
      *(_OWORD *)v21 = *(_OWORD *)v22;
      *(_OWORD *)v22 = v29;
      v30 = *(_QWORD *)(a1 + 16);
      if (v30 >= *(_QWORD *)a1)
      {
        result = 1;
        if (v30 != *(_QWORD *)a1 || *(_QWORD *)(a1 + 24) >= *(_QWORD *)(a1 + 8))
          return result;
      }
      v31 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v21;
      *(_OWORD *)v21 = v31;
      return 1;
    default:
      v10 = (__int128 *)(a1 + 32);
      sub_1C4DCEAB4((__int128 *)a1, (unint64_t *)(a1 + 16), (__int128 *)(a1 + 32));
      v11 = (__int128 *)(a1 + 48);
      if ((__int128 *)(a1 + 48) == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 < *(_QWORD *)v10)
      break;
    v15 = *((_QWORD *)v11 + 1);
    if (v14 == *(_QWORD *)v10 && v15 < *((_QWORD *)v10 + 1))
      goto LABEL_18;
LABEL_29:
    v10 = v11;
    v12 += 16;
    if (++v11 == a2)
      return 1;
  }
  v15 = *((_QWORD *)v11 + 1);
LABEL_18:
  *v11 = *v10;
  v17 = (_QWORD *)a1;
  if (v10 != (__int128 *)a1)
  {
    v18 = v12;
    do
    {
      v19 = *(_QWORD *)(a1 + v18 + 16);
      if (v14 >= v19 && (v14 != v19 || v15 >= *(_QWORD *)(a1 + v18 + 24)))
      {
        v17 = (_QWORD *)(a1 + v18 + 32);
        goto LABEL_28;
      }
      *(_OWORD *)(a1 + v18 + 32) = *(_OWORD *)(a1 + v18 + 16);
      v18 -= 16;
    }
    while (v18 != -32);
    v17 = (_QWORD *)a1;
  }
LABEL_28:
  *v17 = v14;
  v17[1] = v15;
  if (++v13 != 8)
    goto LABEL_29;
  return v11 + 1 == a2;
}

__n128 sub_1C4DCEE94(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  BOOL v9;
  BOOL v10;

  sub_1C4DCEAB4((__int128 *)a1, a2, (__int128 *)a3);
  if (*(_QWORD *)a4 < *(_QWORD *)a3
    || (*(_QWORD *)a4 == *(_QWORD *)a3 ? (v9 = *(_QWORD *)(a4 + 8) < *(_QWORD *)(a3 + 8)) : (v9 = 0), v9))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_QWORD *)a3 < *a2 || (*(_QWORD *)a3 == *a2 ? (v10 = *(_QWORD *)(a3 + 8) < (uint64_t)a2[1]) : (v10 = 0), v10))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1 || *a2 == *(_QWORD *)a1 && (int64_t)a2[1] < *(_QWORD *)(a1 + 8))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t sub_1C4DCEF70(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v27 = 0;
  v4 = sub_1C4DCF1E0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v27);
  v5 = v27;
  if ((v4 & 1) != 0)
    return v5 + 8;
  v28 = v27;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    v8 = 2 * v7;
    goto LABEL_9;
  }
  v8 = *(_DWORD *)(a1 + 16);
  if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    v11 = *(_QWORD *)a1;
    v12 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
    v14 = ((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8);
    if ((v14 + 1) > 0x40)
      v15 = v14 + 1;
    else
      v15 = 64;
    *(_DWORD *)(a1 + 16) = v15;
    v16 = operator new(136 * v15, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v16;
    if (v11)
    {
      *(_QWORD *)(a1 + 8) = 0;
      v17 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v17)
      {
        v18 = 136 * v17;
        do
        {
          *v16 = -4096;
          v16 += 17;
          v18 -= 136;
        }
        while (v18);
      }
      if ((_DWORD)v7)
      {
        v19 = (void **)(v11 + 72);
        v20 = 136 * v7;
        do
        {
          v21 = (uint64_t)*(v19 - 9);
          if ((v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v29 = 0;
            sub_1C4DCF1E0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v21, &v29);
            v22 = v29;
            v23 = v29;
            *v29 = v21;
            sub_1C4DCF278((uint64_t)(v23 + 1), (uint64_t)(v19 - 8));
            sub_1C4DCF278((uint64_t)(v22 + 9), (uint64_t)v19);
            ++*(_DWORD *)(a1 + 8);
            if (v19 + 2 != *v19)
              free(*v19);
            v24 = (void **)*(v19 - 8);
            if (v19 - 6 != v24)
              free(v24);
          }
          v19 += 17;
          v20 -= 136;
        }
        while (v20);
      }
      MEMORY[0x1CAA32FB4](v11, 8);
      v16 = *(_QWORD **)a1;
      LODWORD(v25) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      v25 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v25)
      {
        v26 = 0;
        do
        {
          v16[v26] = -4096;
          v26 += 17;
        }
        while (17 * v25 != v26);
      }
    }
    sub_1C4DCF1E0((uint64_t)v16, v25, *a2, &v28);
    v6 = *(_DWORD *)(a1 + 8);
    v5 = v28;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (*(_QWORD *)v5 != -4096)
    --*(_DWORD *)(a1 + 12);
  v9 = *a2;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_QWORD *)v5 = v9;
  *(_QWORD *)(v5 + 8) = v5 + 24;
  *(_QWORD *)(v5 + 16) = 0x400000000;
  *(_QWORD *)(v5 + 72) = v5 + 88;
  *(_DWORD *)(v5 + 84) = 4;
  return v5 + 8;
}

uint64_t sub_1C4DCF1E0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 136 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 136 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t sub_1C4DCF278(uint64_t a1, uint64_t a2)
{
  void *v3;
  unint64_t v5;
  const void *v6;
  int v7;
  unsigned int v8;

  v3 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  if (a1 != a2)
  {
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v5)
    {
      v6 = *(const void **)a2;
      if (*(_QWORD *)a2 != a2 + 16)
      {
        *(_QWORD *)a1 = v6;
        v7 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v7;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
LABEL_11:
        *(_DWORD *)(a2 + 8) = 0;
        return a1;
      }
      if (v5 < 5)
      {
        v8 = v5;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 12);
        v8 = *(_DWORD *)(a2 + 8);
        if (!v8)
        {
LABEL_10:
          *(_DWORD *)(a1 + 8) = v5;
          goto LABEL_11;
        }
        v6 = *(const void **)a2;
        v3 = *(void **)a1;
      }
      memcpy(v3, v6, 12 * v8);
      goto LABEL_10;
    }
  }
  return a1;
}

BOOL sub_1C4DCF33C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v12;

  v2 = *a1;
  v3 = *a2;
  if (*a1 < *a2)
    return 1;
  if ((_DWORD)v2 == (_DWORD)v3 && HIDWORD(v2) < HIDWORD(v3))
    return 1;
  v5 = 0;
  v7 = (_DWORD)v2 == (_DWORD)v3 && HIDWORD(v3) < HIDWORD(v2);
  if (v3 >= v2 && !v7)
  {
    v8 = a1[1];
    v9 = a2[1];
    if (v8 < v9 || (_DWORD)v8 == (_DWORD)v9 && HIDWORD(v8) < HIDWORD(v9))
      return 1;
    v5 = 0;
    v12 = (_DWORD)v8 == (_DWORD)v9 && HIDWORD(v9) < HIDWORD(v8);
    if (v9 >= v8 && !v12)
      return a1[2] < a2[2];
  }
  return v5;
}

uint64_t *sub_1C4DCF3E0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v7;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (void **)(v3 + 8);
    do
    {
      if (((unint64_t)*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v7 = v5;
        sub_1C4DCF458(&v7);
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

void sub_1C4DCF458(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_1C6180D1C(v4 - 56);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C4DCF4C8(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      if ((*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = (void *)*(v3 - 1);
        if (v4)
        {
          *v3 = v4;
          operator delete(v4);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

void sub_1C4DCF520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t *v7;
  uint64_t GlobalOrArgAttrFromValue;
  uint64_t *v9;
  uint64_t v10;

  v4 = a2;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v6 <= 3)
  {
    v7 = *(uint64_t **)(a1 + 24);
    GlobalOrArgAttrFromValue = llvm::cflaa::getGlobalOrArgAttrFromValue(a2);
    if (sub_1C4DCF5FC(v7, v4, 0, GlobalOrArgAttrFromValue))
    {
      v9 = *(uint64_t **)(a1 + 24);
      a2 = v4;
      v10 = 1;
      a3 = 2;
LABEL_11:
      sub_1C4DCF5FC(v9, a2, v10, a3);
    }
  }
  else
  {
    if (!a2 || v6 != 5)
    {
      v9 = *(uint64_t **)(a1 + 24);
      v10 = 0;
      goto LABEL_11;
    }
    if (*(unsigned __int16 *)(a2 + 18) - 55 <= 0xFFFFFFFD
      && sub_1C4DCF5FC(*(uint64_t **)(a1 + 24), a2, 0, 0))
    {
      sub_1C61814C8(a1, v4);
    }
  }
}

BOOL sub_1C4DCF5FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;

  v12 = a2;
  v13 = a3;
  v5 = sub_1C6181648(a1, &v12);
  v6 = v5[1];
  v7 = v5 + 1;
  v8 = v13;
  v9 = 0x6DB6DB6DB6DB6DB7 * ((v5[2] - v6) >> 3);
  v10 = v13;
  if (v9 <= v13)
  {
    sub_1C6181830(v5 + 1, (v13 + 1));
    v10 = v13;
    v6 = *v7;
  }
  result = v9 <= v8;
  *(_QWORD *)(v6 + 56 * v10 + 48) |= a4;
  return result;
}

_QWORD *sub_1C4DCF69C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6181758(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void sub_1C4DCF754(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - v6) >> 3) >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], 56 * ((56 * a2 - 56) / 0x38) + 56);
      v6 += 56 * a2;
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = 0x6DB6DB6DB6DB6DB7 * ((v6 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492)
      abort();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v7) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x492492492492492)
        sub_1C4764EE4();
      v12 = (char *)operator new(56 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[56 * v8];
    v14 = &v12[56 * v11];
    v15 = 56 * a2;
    bzero(v13, 56 * ((v15 - 56) / 0x38uLL) + 56);
    sub_1C4DCF940(v5, v6, v6, v7, v7, (uint64_t)v13, (uint64_t)v13);
    v17 = (void *)*a1;
    v16 = a1[1];
    *a1 = v18;
    a1[1] = (uint64_t)&v13[v15];
    a1[2] = (uint64_t)v14;
    while ((void *)v16 != v17)
      v16 = sub_1C6180D1C(v16 - 56);
    if (v17)
      operator delete(v17);
  }
}

__n128 sub_1C4DCF940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  if (a3 != a5)
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      *(_QWORD *)(v8 - 56) = 0;
      *(_QWORD *)(v8 - 48) = 0;
      *(_QWORD *)(v8 - 40) = 0;
      *(_OWORD *)(v8 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v9 - 56) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v8 - 32) = 0;
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      result = *(__n128 *)(a3 + v7 - 32);
      *(__n128 *)(v8 - 32) = result;
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 + v7 - 8);
      v7 -= 56;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

char *sub_1C4DCF9BC(uint64_t a1, uint64_t a2)
{
  llvm::DataLayout *v4;
  int v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  char *result;
  uint64_t *v14;
  unsigned int v15;

  v4 = *(llvm::DataLayout **)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 20);
  if ((v5 & 0x40000000) != 0)
    v6 = *(uint64_t ***)(a2 - 8);
  else
    v6 = (uint64_t **)(a2 - 32 * (v5 & 0x7FFFFFF));
  v7 = **v6;
  v8 = *(_DWORD *)(v7 + 8);
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(v7 + 16) + 8);
  v15 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(*(llvm::DataLayout **)(a1 + 8), v8 >> 8) + 4);
  if (v15 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, 0, 0);
    v4 = *(llvm::DataLayout **)(a1 + 8);
  }
  else
  {
    v14 = 0;
  }
  if (llvm::GEPOperator::accumulateConstantOffset(a2, v4, (uint64_t)&v14, 0, v9))
  {
    if (v15 > 0x40)
      v10 = *v14;
    else
      v10 = (uint64_t)((_QWORD)v14 << -(uint64_t)v15) >> -(uint64_t)v15;
  }
  else
  {
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v11 = *(_DWORD *)(a2 + 20);
  if ((v11 & 0x40000000) != 0)
    v12 = *(uint64_t **)(a2 - 8);
  else
    v12 = (uint64_t *)(a2 - 32 * (v11 & 0x7FFFFFF));
  result = sub_1C61818B0((char *)a1, *v12, a2, v10);
  if (v15 >= 0x41)
  {
    result = (char *)v14;
    if (v14)
      return (char *)MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  }
  return result;
}

char *sub_1C4DCFAFC(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0x5555555555555556 * (((_BYTE *)a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v4];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  v11 = v10 + 24;
  if (v2 != v3)
  {
    do
    {
      v12 = *(_OWORD *)(v2 - 24);
      *((_QWORD *)v10 - 1) = *((_QWORD *)v2 - 1);
      *(_OWORD *)(v10 - 24) = v12;
      v10 -= 24;
      v2 -= 24;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = &v9[24 * v8];
  if (v2)
    operator delete(v2);
  return v11;
}

uint64_t sub_1C4DCFC14(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    if (!*(_BYTE *)(result + 16) && *(_QWORD *)(result + 24) == a2)
    {
      v3 = *(unsigned int *)(a3 + 8);
      if (v3 >= *(_DWORD *)(a3 + 12))
      {
        v4 = a3;
        v5 = result;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v3 + 1, 8);
        a3 = v4;
        result = v5;
        LODWORD(v3) = *(_DWORD *)(v4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v3) = result;
      ++*(_DWORD *)(a3 + 8);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C4DCFC98(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  llvm::GlobalValue **v13;
  uint64_t v14;
  llvm::GlobalValue *v15;
  int v16;
  BOOL v17;
  llvm::GlobalValue *Section;
  uint64_t v19;
  llvm::Module *v20;
  uint64_t v22;
  const llvm::Function **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  const llvm::Function **v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::Function **v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v3 = a3;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 84)
  {
    v7 = 0;
  }
  else if (v6 == 39)
  {
    v7 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v7 = 2;
  }
  v8 = *(_DWORD *)(a2 + 20);
  if (v8 < 0 && (v39 = a2 - 32 * (v8 & 0x7FFFFFF), v40 = *(_QWORD *)(v39 - 8), (v40 & 0xFFFFFFFF0) != 0))
  {
    v10 = -(uint64_t)(v8 & 0x7FFFFFF);
    v9 = *(_DWORD *)(v39 - 12) - *(_DWORD *)(v39 - v40);
  }
  else
  {
    v9 = 0;
    v10 = -(uint64_t)(v8 & 0x7FFFFFF);
  }
  result = 0;
  if (((-32 * v7 + 32 * (unint64_t)-v9 - 32 * v10 - 32) >> 5) <= 0x32)
  {
    v12 = *(unsigned int *)(a3 + 8);
    if (!(_DWORD)v12)
      return 1;
    v13 = *(llvm::GlobalValue ***)a3;
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      v16 = *((unsigned __int8 *)*v13 + 16);
      if (*v13)
        v17 = v16 == 3;
      else
        v17 = 0;
      if (v17)
      {
        if ((*((_DWORD *)v15 + 5) & 0x7FFFFFF) == 0)
          return 0;
      }
      else if (!*((_BYTE *)*v13 + 16)
             && *((llvm::GlobalValue **)v15 + 9) == (llvm::GlobalValue *)((char *)v15 + 72)
             && (*((_BYTE *)v15 + 34) & 0x80) == 0)
      {
        return 0;
      }
      result = 0;
      if (((1 << (*((_DWORD *)v15 + 8) & 0xF)) & 0x7D5) == 0)
        return result;
      if (v16 == 3)
      {
        Section = llvm::GlobalValue::getSection(*v13);
        if (v19 == 12
          && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
          && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
        {
          return 0;
        }
      }
      if ((*((_DWORD *)v15 + 8) & 0xFu) - 5 >= 4)
      {
        result = 0;
        if (((1 << (*((_DWORD *)v15 + 8) & 0xF)) & 0x614) != 0)
          return result;
      }
      v20 = (llvm::Module *)*((_QWORD *)v15 + 5);
      if (v20)
      {
        if (llvm::Module::getSemanticInterposition(v20) && (*((_BYTE *)v15 + 33) & 0x40) == 0)
          return 0;
      }
      if (*(_DWORD *)(*((_QWORD *)v15 + 3) + 8) > 0xFFu
        || !*(_BYTE *)(llvm::CFLAndersAAResult::ensureCached(*(llvm::CFLAndersAAResult **)a1, v15) + 400))
      {
        return 0;
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
    v22 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v22)
    {
      v23 = *(const llvm::Function ***)v3;
      v41 = *(_QWORD *)v3 + 8 * v22;
      do
      {
        v42 = v23;
        v24 = llvm::CFLAndersAAResult::ensureCached(*(llvm::CFLAndersAAResult **)a1, *v23);
        if (*(_BYTE *)(v24 + 400))
          v25 = v24 + 48;
        else
          v25 = 0;
        v26 = *(unsigned int *)(v25 + 8);
        if ((_DWORD)v26)
        {
          v27 = *(__int128 **)v25;
          v28 = 24 * v26;
          do
          {
            v43 = *v27;
            v44 = *((_QWORD *)v27 + 2);
            llvm::cflaa::instantiateExternalRelation((uint64_t *)&v43, (_DWORD *)a2, (uint64_t)&v45);
            if (v49)
            {
              v29 = v45;
              v30 = v46;
              sub_1C4DCF5FC(*(uint64_t **)(a1 + 24), v45, v46, 0);
              v31 = v47;
              v32 = v48;
              sub_1C4DCF5FC(*(uint64_t **)(a1 + 24), v47, v48, 0);
              sub_1C6181948(*(_QWORD *)(a1 + 24), v29, v30, v31, v32, 0);
            }
            v27 = (__int128 *)((char *)v27 + 24);
            v28 -= 24;
          }
          while (v28);
        }
        v33 = *(unsigned int *)(v25 + 216);
        if ((_DWORD)v33)
        {
          v34 = *(unint64_t **)(v25 + 208);
          v35 = &v34[2 * v33];
          v36 = v42;
          do
          {
            v37 = *v34;
            v38 = a2;
            if (*v34)
              v38 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * (v37 - 1));
            if (*(_BYTE *)(*(_QWORD *)v38 + 8) == 15)
            {
              v3 = HIDWORD(v37) | v3 & 0xFFFFFFFF00000000;
              sub_1C4DCF5FC(*(uint64_t **)(a1 + 24), v38, v3, v34[1]);
            }
            v34 += 2;
          }
          while (v34 != v35);
        }
        else
        {
          v36 = v42;
        }
        v23 = v36 + 1;
        result = 1;
      }
      while (v23 != (const llvm::Function **)v41);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C4DD000C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 == 84)
  {
    v2 = 0;
  }
  else if (v1 == 39)
  {
    v2 = (*(_DWORD *)(a1 + 80) + 1);
  }
  else
  {
    v2 = 2;
  }
  v3 = *(_DWORD *)(a1 + 20);
  if (v3 < 0 && (v6 = a1 - 32 * (v3 & 0x7FFFFFF), v7 = *(_QWORD *)(v6 - 8), (v7 & 0xFFFFFFFF0) != 0))
    v4 = (*(_DWORD *)(v6 - 12) - *(_DWORD *)(v6 - v7));
  else
    v4 = 0;
  return a1 - 32 * v2 - 32 * v4 - 32;
}

uint64_t sub_1C4DD007C(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 64);
  if (v4 && (((*(unsigned __int8 *)(v4 + a2 / 8 + 12) >> (a2 & 7)) & 1) != 0 || (*(_BYTE *)(v4 + 17) & 0x10) != 0))
    return 1;
  if (!sub_1C4DA911C(a1, a2))
  {
    if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, a2) & 1) == 0)
      return llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44);
    return 1;
  }
  return 0;
}

_QWORD *sub_1C4DD0110(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(416 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6182094(a1, v4, v4 + 416 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 416 * v10;
    do
    {
      *result = -4096;
      result += 52;
      v11 -= 416;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C4DD01D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = operator new(0x30uLL);
  *v6 = a1;
  v6[2] = 2;
  v6[3] = 0;
  v6[4] = a2;
  if (a2 != -8192 && a2 != -4096 && a2)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v6 + 2));
  v6[1] = &off_1E8135170;
  v6[5] = a3;
  return v6;
}

void sub_1C4DD0250()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4DD0264(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8135198;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4DD0298(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8135198;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4DD02B4(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::TargetLibraryAnalysis::Key, a2)+ 8;
}

void sub_1C4DD02E0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4DD02F4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81351E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4DD0328(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81351E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4DD0344(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;
  void **v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14[2];
  int v15;
  uint64_t v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *__src;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = **(void ****)(*(_QWORD *)(a1 + 8) + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::TargetLibraryInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::TargetLibraryInfoWrapperPass::ID);
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  llvm::TargetLibraryAnalysis::run(v5 + 32, a2, (uint64_t)&v21);
  *(_QWORD *)(v5 + 240) = v21;
  if (*(_BYTE *)(v5 + 320))
  {
    if ((uint64_t *)(v5 + 240) == &v21)
    {
LABEL_16:
      *(_DWORD *)(v5 + 312) = v25;
      goto LABEL_17;
    }
    v6 = (void **)(v5 + 248);
    v7 = v23;
    v8 = *(unsigned int *)(v5 + 256);
    if (v8 >= v23)
    {
      if (v23)
        memmove(*v6, __src, 8 * v23);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v5 + 260) < v23)
    {
      *(_DWORD *)(v5 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v7, 8);
    }
    else if ((_DWORD)v8)
    {
      memmove(*v6, __src, 8 * v8);
      goto LABEL_13;
    }
    v8 = 0;
LABEL_13:
    if (v8 != v23)
      memcpy((char *)*v6 + 8 * v8, (char *)__src + 8 * v8, 8 * v23 - 8 * v8);
LABEL_15:
    *(_DWORD *)(v5 + 256) = v7;
    goto LABEL_16;
  }
  v10 = (void *)(v5 + 264);
  *(_QWORD *)(v5 + 248) = v5 + 264;
  v11 = (void **)(v5 + 248);
  *(_QWORD *)(v5 + 256) = 0x600000000;
  v12 = v23;
  if (v23 && v11 != &__src)
  {
    if (v23 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v23, 8);
      v13 = v23;
      if (!v23)
      {
LABEL_27:
        *(_DWORD *)(v5 + 256) = v12;
        goto LABEL_28;
      }
      v10 = *v11;
    }
    else
    {
      v13 = v23;
    }
    memcpy(v10, __src, 8 * v13);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 312) = v25;
  *(_BYTE *)(v5 + 320) = 1;
LABEL_17:
  if (__src != &v24)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v16);
  sub_1C4D8B52C(v14);
  return v5 + 240;
}

uint64_t llvm::CFLSteensAAResult::CFLSteensAAResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  v3 = a1 + 8;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 32) = v3;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v3);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  v3 = a1 + 8;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 32) = v3;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v3);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  v3 = a1 + 8;
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (v4 == a2 + 8)
    {
      *(_QWORD *)(a1 + 32) = v3;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 32) + 24))(*(_QWORD *)(a2 + 32), v3);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  v3 = a1 + 8;
  v4 = *(_QWORD *)(a2 + 32);
  if (v4)
  {
    if (v4 == a2 + 8)
    {
      *(_QWORD *)(a1 + 32) = v3;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 32) + 24))(*(_QWORD *)(a2 + 32), v3);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v4;
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return a1;
}

__n128 sub_1C4DD06E8(uint64_t **a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int *v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  __n128 result;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __n128 *v22;
  __n128 *v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;

  v5 = 0;
  v6 = a1[1];
  v7 = a2;
  while (1)
  {
    v8 = *a1;
    v9 = **a1;
    v10 = *((_DWORD *)*a1 + 4);
    if (v10)
    {
      v11 = (v10 - 1) & (37 * a3);
      v12 = (int *)(v9 + 12 * v11);
      v13 = *v12;
      if (a3 == *v12)
        goto LABEL_9;
      v14 = 1;
      while (v13 != -1)
      {
        v15 = v11 + v14++;
        v11 = v15 & (v10 - 1);
        v12 = (int *)(v9 + 12 * v11);
        v13 = *v12;
        if (a3 == *v12)
          goto LABEL_9;
      }
    }
    v12 = (int *)(v9 + 12 * v10);
LABEL_9:
    if (v12 != (int *)(v9 + 12 * v10))
      break;
    v16 = v6[3];
    LODWORD(v26) = a3;
    *(_QWORD *)((char *)&v26 + 4) = v7 | (v5 << 32);
    v24 = v26;
    v25 = v5;
    sub_1C6182DAC((uint64_t)&v26, (uint64_t)v8, (int *)&v24, (uint64_t *)((char *)&v24 + 4));
    v18 = *(_QWORD *)(v16 + 16 * a3 + 8) & 7;
    if (v18)
    {
      v19 = *((unsigned int *)v6 + 66);
      if (v19 >= *((unsigned int *)v6 + 67))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v6 + 32), (uint64_t)(v6 + 34), v19 + 1, 16);
        v19 = *((unsigned int *)v6 + 66);
      }
      v20 = (uint64_t *)(v6[32] + 16 * v19);
      *v20 = v7 | (v5 << 32);
      v20[1] = v18;
      ++*((_DWORD *)v6 + 66);
    }
    a3 = *(_DWORD *)(v16 + 16 * a3 + 4);
    if (a3 == -1)
      v5 = v5;
    else
      v5 = (v5 + 1);
    if (a3 == -1)
      return result;
  }
  v21 = *(_QWORD *)(v12 + 1);
  if ((v7 | (v5 << 32)) != v21)
  {
    *(_QWORD *)&v26 = v7 | (v5 << 32);
    *((_QWORD *)&v26 + 1) = v21;
    v27 = 0x7FFFFFFFFFFFFFFFLL;
    v22 = (__n128 *)sub_1C4926708((uint64_t)(v6 + 6), (unint64_t)&v26, 1);
    v23 = (__n128 *)(v6[6] + 24 * *((unsigned int *)v6 + 14));
    result = *v22;
    v23[1].n128_u64[0] = v22[1].n128_u64[0];
    *v23 = result;
    ++*((_DWORD *)v6 + 14);
  }
  return result;
}

void llvm::CFLSteensAAResult::buildSetsFrom(llvm::CFLSteensAAResult *this, llvm::Function *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *j;
  uint64_t v11;
  int v12;
  _BOOL4 v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  uint64_t k;
  uint64_t v47;
  __int128 *v48;
  __int128 *v49;
  unsigned int v50;
  uint64_t *v51;
  char v52[48];
  __int128 v53;
  llvm::CFLSteensAAResult *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t **v57;
  void **v58;
  uint64_t v59;
  _QWORD v60[2];
  uint64_t *v61;
  uint64_t v62;
  unsigned int v63;
  void *v64[2];
  _QWORD v65[6];

  v65[4] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 4);
  if (!v3)
    sub_1C485C2F0();
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v60[0] = this;
  v60[1] = v5;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64[0] = v65;
  v64[1] = (void *)0x400000000;
  v6 = *((_QWORD *)a2 + 5) + 272;
  v54 = this;
  v55 = v6;
  v56 = v5;
  v57 = &v61;
  v58 = v64;
  for (i = (_QWORD *)*((_QWORD *)a2 + 10); i != (_QWORD *)((char *)a2 + 72); i = (_QWORD *)i[1])
  {
    v8 = i - 3;
    if (!i)
      v8 = 0;
    v9 = v8 + 5;
    for (j = (_QWORD *)v8[6]; j != v9; j = (_QWORD *)j[1])
    {
      if (j)
        v11 = (uint64_t)(j - 3);
      else
        v11 = 0;
      v12 = *(unsigned __int8 *)(v11 + 16);
      if ((v12 - 81) >= 2)
      {
        v15 = v12 == 33 || (v12 - 40) < 0xFFFFFFF5 || v12 == 29;
        if (v12 != 63 && v15)
          sub_1C6183128((uint64_t)&v54, v11);
      }
    }
  }
  if ((*((_WORD *)a2 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(a2);
    v17 = *((_QWORD *)a2 + 11);
    if ((*((_WORD *)a2 + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(a2);
      v18 = *((_QWORD *)a2 + 11);
      goto LABEL_31;
    }
  }
  else
  {
    v17 = *((_QWORD *)a2 + 11);
  }
  v18 = v17;
LABEL_31:
  v19 = v18 + 40 * *((_QWORD *)a2 + 12);
  while (v17 != v19)
  {
    sub_1C6181204((_BOOL8)v60, v17);
    v17 += 40;
  }
  v54 = 0;
  v55 = 0;
  LODWORD(v56) = 0;
  v58 = 0;
  v59 = 0;
  v57 = 0;
  v20 = v61;
  v21 = v62;
  v22 = v63;
  v23 = &v61[4 * v63];
  v24 = v63;
  v25 = v23;
  if ((_DWORD)v62)
  {
    if (!v63)
    {
      v24 = 0;
      v25 = v61;
      goto LABEL_44;
    }
    v26 = 32 * v63;
    v25 = v61;
    while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v25 += 4;
      v26 -= 32;
      if (!v26)
      {
        v24 = v63;
        v25 = &v61[4 * v63];
        goto LABEL_44;
      }
    }
    v24 = v63;
  }
LABEL_44:
  v27 = &v61[4 * v24];
  if (v25 != v27)
  {
    do
    {
      v28 = *v25;
      if ((*(_BYTE *)(*v25 + 16) - 4) > 0x10u
        || ((v29 = *(unsigned __int8 *)(*v25 + 16), v30 = v29 > 0xA, v31 = (1 << v29) & 0x720, !v30)
          ? (v32 = v31 == 0)
          : (v32 = 1),
            !v32))
      {
        *(_QWORD *)&v53 = *v25;
        DWORD2(v53) = 0;
        sub_1C6182660((uint64_t)&v54, (uint64_t)&v53);
        sub_1C61826B4((uint64_t)&v54, v28, 0, *(_QWORD *)(v25[1] + 48));
        v34 = -1 - 1227133513 * ((unint64_t)(v25[2] - v25[1]) >> 3);
        if ((_DWORD)v34)
        {
          v35 = 0;
          v36 = 104;
          do
          {
            *(_QWORD *)&v53 = v28;
            DWORD2(v53) = v35 + 1;
            sub_1C6182660((uint64_t)&v54, (uint64_t)&v53);
            sub_1C61826B4((uint64_t)&v54, v28, v35 + 1, *(_QWORD *)(v25[1] + v36));
            *(_QWORD *)&v53 = v28;
            DWORD2(v53) = v35 + 1;
            sub_1C6182738((uint64_t)&v54, v28, v35, &v53);
            v36 += 56;
            ++v35;
          }
          while (v34 != v35);
        }
      }
      v33 = v25 + 4;
      v25 = v23;
      if (v33 != v23)
      {
        v25 = v33;
        do
        {
          if ((*v25 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_56;
          v25 += 4;
        }
        while (v25 != v23);
        v25 = v23;
      }
LABEL_56:
      ;
    }
    while (v25 != v27);
    v20 = v61;
    v21 = v62;
    v22 = v63;
  }
  v37 = &v20[4 * v22];
  if (v21)
  {
    if ((_DWORD)v22)
    {
      v39 = 32 * v22;
      v38 = v20;
      while ((*v38 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v38 += 4;
        v39 -= 32;
        if (!v39)
          goto LABEL_68;
      }
    }
    else
    {
      v38 = v20;
    }
  }
  else
  {
LABEL_68:
    v38 = &v20[4 * v22];
  }
  v40 = &v20[4 * v22];
  while (v38 != v40)
  {
    v41 = *v38;
    if ((*(_BYTE *)(*v38 + 16) - 4) > 0x10u
      || ((v42 = *(unsigned __int8 *)(*v38 + 16), v30 = v42 > 0xA, v43 = (1 << v42) & 0x720, !v30)
        ? (v44 = v43 == 0)
        : (v44 = 1),
          !v44))
    {
      v45 = -1227133513 * ((unint64_t)(v38[2] - v38[1]) >> 3);
      if ((_DWORD)v45)
      {
        for (k = 0; k != v45; ++k)
        {
          v47 = v38[1] + 56 * k;
          v49 = *(__int128 **)v47;
          v48 = *(__int128 **)(v47 + 8);
          while (v49 != v48)
          {
            v50 = sub_1C6183FA8((uint64_t)&v54, v41, k);
            sub_1C4DD16C0((uint64_t)&v54, v49, v50);
            v49 = (__int128 *)((char *)v49 + 24);
          }
        }
      }
    }
    v51 = v38 + 4;
    v38 = v37;
    if (v51 != v37)
    {
      v38 = v51;
      do
      {
        if ((*v38 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_86;
        v38 += 4;
      }
      while (v38 != v37);
      v38 = v37;
    }
LABEL_86:
    ;
  }
  sub_1C6182848((uint64_t)v52, (uint64_t)&v54);
}

int32x2_t llvm::CFLSteensAAResult::evict(llvm::CFLSteensAAResult *this, llvm::Function *a2)
{
  return sub_1C61829B0((uint64_t)this + 40, (uint64_t)a2);
}

uint64_t llvm::CFLSteensAAResult::ensureCached(llvm::CFLSteensAAResult *this, llvm::Function *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = sub_1C6181F48(*((_QWORD *)this + 5), *((_DWORD *)this + 14), (uint64_t)a2, &v7);
  v5 = v7;
  if (!v4)
    v5 = *((_QWORD *)this + 5) + 416 * *((unsigned int *)this + 14);
  if (*((_QWORD *)this + 5) + 416 * *((unsigned int *)this + 14) == v5)
    llvm::CFLSteensAAResult::scan(this, a2);
  return v5 + 8;
}

uint64_t llvm::CFLSteensAAResult::getAliasSummary(llvm::CFLSteensAAResult *this, llvm::Function *a2)
{
  uint64_t v2;

  v2 = llvm::CFLSteensAAResult::ensureCached(this, a2);
  if (*(_BYTE *)(v2 + 400))
    return v2 + 48;
  else
    return 0;
}

BOOL llvm::CFLSteensAAResult::query(llvm::CFLSteensAAResult *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  _BOOL8 result;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  llvm::Function *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a2;
  if (*(_BYTE *)(*(_QWORD *)*a2 + 8) != 15)
    return 0;
  v4 = *a3;
  if (*(_BYTE *)(*(_QWORD *)*a3 + 8) != 15)
    return 0;
  v5 = *(unsigned __int8 *)(v3 + 16);
  if (v5 >= 0x1C)
  {
    v6 = (uint64_t *)(*(_QWORD *)(v3 + 40) + 56);
    goto LABEL_8;
  }
  if (v5 == 21)
  {
    v6 = (uint64_t *)(v3 + 24);
LABEL_8:
    v8 = *v6;
    goto LABEL_10;
  }
  v8 = 0;
LABEL_10:
  v9 = *(unsigned __int8 *)(v4 + 16);
  if (v9 >= 0x1C)
  {
    v10 = (uint64_t *)(*(_QWORD *)(v4 + 40) + 56);
  }
  else
  {
    if (v9 != 21)
    {
      v11 = 0;
      goto LABEL_16;
    }
    v10 = (uint64_t *)(v4 + 24);
  }
  v11 = *v10;
LABEL_16:
  if (!(v8 | v11))
    return 1;
  v12 = (llvm::Function *)(v8 ? v8 : v11);
  v13 = llvm::CFLSteensAAResult::ensureCached(a1, v12);
  v14 = sub_1C61825DC(v13, v3, 0);
  if (!HIDWORD(v14))
    return 1;
  v15 = v14;
  v16 = sub_1C61825DC(v13, v4, 0);
  if (!HIDWORD(v16))
    return 1;
  v17 = v16;
  if (v15 == (_DWORD)v16)
    return 1;
  result = 0;
  v18 = *(_QWORD *)(v13 + 24);
  v19 = *(_QWORD *)(v18 + 16 * v15 + 8);
  if ((_DWORD)v19)
  {
    v20 = *(_QWORD *)(v18 + 16 * v17 + 8);
    if ((_DWORD)v20)
    {
      if (((v19 | v20) & 0xA) == 0)
        return (v20 & 0xFFFFFFF4) != 0 && (*(_QWORD *)(v18 + 16 * v15 + 8) & 0xFFFFFFF4) != 0;
      return 1;
    }
  }
  return result;
}

uint64_t sub_1C4DD0FD4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Unification-Based CFL Alias Analysis";
  *(_QWORD *)(v2 + 8) = 36;
  *(_QWORD *)(v2 + 16) = "cfl-steens-aa";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &llvm::CFLSteensAAWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::CFLSteensAAWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_DWORD *sub_1C4DD106C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(12 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6182EF8(a1, v4, v4 + 12 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 12 * v10;
    do
    {
      *result = -1;
      result += 3;
      v11 -= 12;
    }
    while (v11);
  }
  return result;
}

void sub_1C4DD1130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t *v7;
  uint64_t GlobalOrArgAttrFromValue;
  uint64_t *v9;
  uint64_t v10;

  v4 = a2;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v6 <= 3)
  {
    v7 = *(uint64_t **)(a1 + 24);
    GlobalOrArgAttrFromValue = llvm::cflaa::getGlobalOrArgAttrFromValue(a2);
    if (sub_1C4DCF5FC(v7, v4, 0, GlobalOrArgAttrFromValue))
    {
      v9 = *(uint64_t **)(a1 + 24);
      a2 = v4;
      v10 = 1;
      a3 = 2;
LABEL_11:
      sub_1C4DCF5FC(v9, a2, v10, a3);
    }
  }
  else
  {
    if (!a2 || v6 != 5)
    {
      v9 = *(uint64_t **)(a1 + 24);
      v10 = 0;
      goto LABEL_11;
    }
    if (*(unsigned __int16 *)(a2 + 18) - 55 <= 0xFFFFFFFD
      && sub_1C4DCF5FC(*(uint64_t **)(a1 + 24), a2, 0, 0))
    {
      sub_1C6183380(a1, v4);
    }
  }
}

char *sub_1C4DD120C(uint64_t a1, uint64_t a2)
{
  llvm::DataLayout *v4;
  int v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  char *result;
  uint64_t *v14;
  unsigned int v15;

  v4 = *(llvm::DataLayout **)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 20);
  if ((v5 & 0x40000000) != 0)
    v6 = *(uint64_t ***)(a2 - 8);
  else
    v6 = (uint64_t **)(a2 - 32 * (v5 & 0x7FFFFFF));
  v7 = **v6;
  v8 = *(_DWORD *)(v7 + 8);
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(v7 + 16) + 8);
  v15 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(*(llvm::DataLayout **)(a1 + 8), v8 >> 8) + 4);
  if (v15 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v14, 0, 0);
    v4 = *(llvm::DataLayout **)(a1 + 8);
  }
  else
  {
    v14 = 0;
  }
  if (llvm::GEPOperator::accumulateConstantOffset(a2, v4, (uint64_t)&v14, 0, v9))
  {
    if (v15 > 0x40)
      v10 = *v14;
    else
      v10 = (uint64_t)((_QWORD)v14 << -(uint64_t)v15) >> -(uint64_t)v15;
  }
  else
  {
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v11 = *(_DWORD *)(a2 + 20);
  if ((v11 & 0x40000000) != 0)
    v12 = *(uint64_t **)(a2 - 8);
  else
    v12 = (uint64_t *)(a2 - 32 * (v11 & 0x7FFFFFF));
  result = sub_1C6183500((char *)a1, *v12, a2, v10);
  if (v15 >= 0x41)
  {
    result = (char *)v14;
    if (v14)
      return (char *)MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C4DD134C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  llvm::GlobalValue **v13;
  uint64_t v14;
  llvm::GlobalValue *v15;
  int v16;
  BOOL v17;
  llvm::GlobalValue *Section;
  uint64_t v19;
  llvm::Module *v20;
  uint64_t v22;
  llvm::Function **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  llvm::Function **v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::Function **v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v3 = a3;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 == 84)
  {
    v7 = 0;
  }
  else if (v6 == 39)
  {
    v7 = (*(_DWORD *)(a2 + 80) + 1);
  }
  else
  {
    v7 = 2;
  }
  v8 = *(_DWORD *)(a2 + 20);
  if (v8 < 0 && (v39 = a2 - 32 * (v8 & 0x7FFFFFF), v40 = *(_QWORD *)(v39 - 8), (v40 & 0xFFFFFFFF0) != 0))
  {
    v10 = -(uint64_t)(v8 & 0x7FFFFFF);
    v9 = *(_DWORD *)(v39 - 12) - *(_DWORD *)(v39 - v40);
  }
  else
  {
    v9 = 0;
    v10 = -(uint64_t)(v8 & 0x7FFFFFF);
  }
  result = 0;
  if (((-32 * v7 + 32 * (unint64_t)-v9 - 32 * v10 - 32) >> 5) <= 0x32)
  {
    v12 = *(unsigned int *)(a3 + 8);
    if (!(_DWORD)v12)
      return 1;
    v13 = *(llvm::GlobalValue ***)a3;
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      v16 = *((unsigned __int8 *)*v13 + 16);
      if (*v13)
        v17 = v16 == 3;
      else
        v17 = 0;
      if (v17)
      {
        if ((*((_DWORD *)v15 + 5) & 0x7FFFFFF) == 0)
          return 0;
      }
      else if (!*((_BYTE *)*v13 + 16)
             && *((llvm::GlobalValue **)v15 + 9) == (llvm::GlobalValue *)((char *)v15 + 72)
             && (*((_BYTE *)v15 + 34) & 0x80) == 0)
      {
        return 0;
      }
      result = 0;
      if (((1 << (*((_DWORD *)v15 + 8) & 0xF)) & 0x7D5) == 0)
        return result;
      if (v16 == 3)
      {
        Section = llvm::GlobalValue::getSection(*v13);
        if (v19 == 12
          && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
          && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
        {
          return 0;
        }
      }
      if ((*((_DWORD *)v15 + 8) & 0xFu) - 5 >= 4)
      {
        result = 0;
        if (((1 << (*((_DWORD *)v15 + 8) & 0xF)) & 0x614) != 0)
          return result;
      }
      v20 = (llvm::Module *)*((_QWORD *)v15 + 5);
      if (v20)
      {
        if (llvm::Module::getSemanticInterposition(v20) && (*((_BYTE *)v15 + 33) & 0x40) == 0)
          return 0;
      }
      if (*(_DWORD *)(*((_QWORD *)v15 + 3) + 8) > 0xFFu
        || !*(_BYTE *)(llvm::CFLSteensAAResult::ensureCached(*(llvm::CFLSteensAAResult **)a1, v15) + 400))
      {
        return 0;
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
    v22 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v22)
    {
      v23 = *(llvm::Function ***)v3;
      v41 = *(_QWORD *)v3 + 8 * v22;
      do
      {
        v42 = v23;
        v24 = llvm::CFLSteensAAResult::ensureCached(*(llvm::CFLSteensAAResult **)a1, *v23);
        if (*(_BYTE *)(v24 + 400))
          v25 = v24 + 48;
        else
          v25 = 0;
        v26 = *(unsigned int *)(v25 + 8);
        if ((_DWORD)v26)
        {
          v27 = *(__int128 **)v25;
          v28 = 24 * v26;
          do
          {
            v43 = *v27;
            v44 = *((_QWORD *)v27 + 2);
            llvm::cflaa::instantiateExternalRelation((uint64_t *)&v43, (_DWORD *)a2, (uint64_t)&v45);
            if (v49)
            {
              v29 = v45;
              v30 = v46;
              sub_1C4DCF5FC(*(uint64_t **)(a1 + 24), v45, v46, 0);
              v31 = v47;
              v32 = v48;
              sub_1C4DCF5FC(*(uint64_t **)(a1 + 24), v47, v48, 0);
              sub_1C6181948(*(_QWORD *)(a1 + 24), v29, v30, v31, v32, 0);
            }
            v27 = (__int128 *)((char *)v27 + 24);
            v28 -= 24;
          }
          while (v28);
        }
        v33 = *(unsigned int *)(v25 + 216);
        if ((_DWORD)v33)
        {
          v34 = *(unint64_t **)(v25 + 208);
          v35 = &v34[2 * v33];
          v36 = v42;
          do
          {
            v37 = *v34;
            v38 = a2;
            if (*v34)
              v38 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32 * (v37 - 1));
            if (*(_BYTE *)(*(_QWORD *)v38 + 8) == 15)
            {
              v3 = HIDWORD(v37) | v3 & 0xFFFFFFFF00000000;
              sub_1C4DCF5FC(*(uint64_t **)(a1 + 24), v38, v3, v34[1]);
            }
            v34 += 2;
          }
          while (v34 != v35);
        }
        else
        {
          v36 = v42;
        }
        v23 = v36 + 1;
        result = 1;
      }
      while (v23 != (llvm::Function **)v41);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL sub_1C4DD16C0(uint64_t a1, __int128 *a2, unsigned int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  __int128 v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 v31;

  v28 = *a2;
  v29 = a3;
  sub_1C6183A70((uint64_t)&v30, a1, (uint64_t)&v28, &v29);
  v5 = v31;
  if (!v31)
  {
    v6 = *(unsigned int *)(v30 + 16);
    v7 = *(_QWORD *)(a1 + 24);
    v8 = v7 + 32 * v6;
    v11 = *(_DWORD *)(v8 + 24);
    v9 = (_DWORD *)(v8 + 24);
    v10 = v11;
    if (v11 != -1)
    {
      v12 = v10;
      do
      {
        v13 = v12;
        v12 = *(unsigned int *)(v7 + 32 * v12 + 24);
      }
      while ((_DWORD)v12 != -1);
      v14 = *(_DWORD *)(v7 + 32 * v13);
      do
      {
        v6 = v10;
        *v9 = v14;
        v15 = v7 + 32 * v10;
        v16 = *(_DWORD *)(v15 + 24);
        v9 = (_DWORD *)(v15 + 24);
        v10 = v16;
      }
      while (v16 != -1);
    }
    v17 = a3;
    v18 = v7 + 32 * a3;
    v21 = *(_DWORD *)(v18 + 24);
    v19 = (_DWORD *)(v18 + 24);
    v20 = v21;
    if (v21 != -1)
    {
      v22 = v20;
      do
      {
        v23 = v22;
        v22 = *(unsigned int *)(v7 + 32 * v22 + 24);
      }
      while ((_DWORD)v22 != -1);
      v24 = *(_DWORD *)(v7 + 32 * v23);
      do
      {
        v17 = v20;
        *v19 = v24;
        v25 = v7 + 32 * v20;
        v26 = *(_DWORD *)(v25 + 24);
        v19 = (_DWORD *)(v25 + 24);
        v20 = v26;
      }
      while (v26 != -1);
    }
    if (v6 != v17)
      sub_1C6183A0C(a1, *(_DWORD *)(v7 + 32 * v6), *(_DWORD *)(v7 + 32 * v17));
  }
  return v5 != 0;
}

_OWORD *sub_1C4DD17E8(void **a1, _OWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    abort();
  v8 = (_BYTE *)a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  if (v9)
  {
    if (v9 >> 59)
      sub_1C4764EE4();
    v10 = (char *)operator new(32 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[32 * v4];
  v12 = a2[1];
  *(_OWORD *)v11 = *a2;
  *((_OWORD *)v11 + 1) = v12;
  v13 = v11 + 32;
  if (v2 != v3)
  {
    do
    {
      v14 = *((_OWORD *)v2 - 1);
      *((_OWORD *)v11 - 2) = *((_OWORD *)v2 - 2);
      *((_OWORD *)v11 - 1) = v14;
      v11 -= 32;
      v2 -= 32;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v13;
  a1[2] = &v10[32 * v9];
  if (v2)
    operator delete(v2);
  return v13;
}

_OWORD *sub_1C4DD18C8(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6183BCC(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C85F22C0;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4DD1990(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  _BOOL8 v26;
  uint64_t v27;
  unsigned int *v28;
  int v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  void *v63;
  uint64_t v64;
  _QWORD v65[9];

  v65[8] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = v6 + 32 * a2;
  v10 = *(_DWORD *)(v7 + 24);
  v8 = (_DWORD *)(v7 + 24);
  v9 = v10;
  if (v10 != -1)
  {
    v11 = v9;
    do
    {
      v12 = v11;
      v11 = *(unsigned int *)(v6 + 32 * v11 + 24);
    }
    while ((_DWORD)v11 != -1);
    v13 = *(_DWORD *)(v6 + 32 * v12);
    do
    {
      v5 = v9;
      *v8 = v13;
      v14 = v6 + 32 * v9;
      v15 = *(_DWORD *)(v14 + 24);
      v8 = (_DWORD *)(v14 + 24);
      v9 = v15;
    }
    while (v15 != -1);
  }
  v16 = a3;
  v17 = v6 + 32 * a3;
  v20 = *(_DWORD *)(v17 + 24);
  v18 = (_DWORD *)(v17 + 24);
  v19 = v20;
  if (v20 != -1)
  {
    v21 = v19;
    do
    {
      v22 = v21;
      v21 = *(unsigned int *)(v6 + 32 * v21 + 24);
    }
    while ((_DWORD)v21 != -1);
    v23 = *(_DWORD *)(v6 + 32 * v22);
    do
    {
      v16 = v19;
      *v18 = v23;
      v24 = v6 + 32 * v19;
      v25 = *(_DWORD *)(v24 + 24);
      v18 = (_DWORD *)(v24 + 24);
      v19 = v25;
    }
    while (v25 != -1);
  }
  if (v5 == v16)
    return 1;
  v63 = v65;
  v64 = 0x800000000;
  v27 = v6 + 32 * v5;
  v29 = *(_DWORD *)(v27 + 8);
  v28 = (unsigned int *)(v27 + 8);
  if (v29 == -1)
    return 0;
  LODWORD(v30) = 0;
  v31 = (int *)(v6 + 32 * v5);
  v32 = *((_QWORD *)v31 + 2);
  v33 = (int *)(v6 + 32 * v16);
  do
  {
    if (v30 >= HIDWORD(v64))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v30 + 1, 8);
      LODWORD(v30) = v64;
    }
    *((_QWORD *)v63 + v30) = v31;
    v30 = (v64 + 1);
    LODWORD(v64) = v64 + 1;
    v34 = *((_QWORD *)v31 + 2);
    v35 = *v28;
    v36 = *(_QWORD *)(a1 + 24);
    v37 = v36 + 32 * v35;
    v40 = *(_DWORD *)(v37 + 24);
    v38 = (_DWORD *)(v37 + 24);
    v39 = v40;
    if (v40 != -1)
    {
      v41 = v39;
      do
      {
        v42 = v41;
        v41 = *(unsigned int *)(v36 + 32 * v41 + 24);
      }
      while ((_DWORD)v41 != -1);
      v43 = *(_DWORD *)(v36 + 32 * v42);
      do
      {
        v35 = v39;
        *v38 = v43;
        v44 = v36 + 32 * v39;
        v45 = *(_DWORD *)(v44 + 24);
        v38 = (_DWORD *)(v44 + 24);
        v39 = v45;
      }
      while (v45 != -1);
    }
    v32 |= v34;
    v31 = (int *)(v36 + 32 * v35);
    if (v31 == v33)
      break;
    v28 = (unsigned int *)(v31 + 2);
  }
  while (v31[2] != -1);
  if (v31 == v33)
  {
    v47 = v6 + 32 * v16;
    *(_QWORD *)(v47 + 16) |= v32;
    v48 = *(unsigned int *)(v6 + 32 * v5 + 12);
    v49 = (_DWORD *)(v47 + 12);
    if ((_DWORD)v48 == -1)
    {
      *v49 = -1;
    }
    else
    {
      *v49 = v48;
      v50 = v36 + 32 * v48;
      v53 = *(_DWORD *)(v50 + 24);
      v51 = (_DWORD *)(v50 + 24);
      v52 = v53;
      if (v53 != -1)
      {
        v54 = v52;
        do
        {
          v55 = v54;
          v54 = *(unsigned int *)(v36 + 32 * v54 + 24);
        }
        while ((_DWORD)v54 != -1);
        v56 = *(_DWORD *)(v36 + 32 * v55);
        do
        {
          v48 = v52;
          *v51 = v56;
          v57 = v36 + 32 * v52;
          v58 = *(_DWORD *)(v57 + 24);
          v51 = (_DWORD *)(v57 + 24);
          v52 = v58;
        }
        while (v58 != -1);
      }
      *(_DWORD *)(v36 + 32 * v48 + 8) = a3;
    }
    v46 = (char *)v63;
    if ((_DWORD)v30)
    {
      v59 = 0;
      v60 = *v33;
      v61 = 8 * v30;
      do
      {
        *(_DWORD *)(*(_QWORD *)&v46[v59] + 24) = v60;
        v59 += 8;
      }
      while (v61 != v59);
    }
  }
  else
  {
    v46 = (char *)v63;
  }
  v26 = v31 == v33;
  if (v46 != (char *)v65)
    free(v46);
  return v26;
}

uint64_t sub_1C4DD1C80(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _DWORD *v16;
  _DWORD *v17;
  _OWORD *v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  int *v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v55;
  int v56;
  unsigned int v58;
  unsigned int v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  int *v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  int *v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unint64_t v95;
  _QWORD v96[2];
  unsigned int v97;

  v4 = 0;
  v96[0] = 0;
  v96[1] = 0;
  v97 = 0;
  v5 = *(unsigned int **)(a1 + 24);
  v6 = *(unsigned int **)(a1 + 32);
  if (v5 != v6)
  {
    while (v5[6] != -1)
    {
LABEL_36:
      v5 += 8;
      if (v5 == v6)
      {
        v4 = v96[0];
        goto LABEL_39;
      }
    }
    v7 = a2[1];
    v8 = *v5;
    v95 = *v5 | ((unint64_t)((unint64_t)((char *)v7 - (char *)*a2) >> 4) << 32);
    if (v97)
    {
      v9 = (v97 - 1) & (37 * v8);
      v10 = (_DWORD *)(v96[0] + 8 * v9);
      v11 = *v10;
      if (v8 == *v10)
      {
LABEL_18:
        v18 = v5 + 2;
        v19 = (unint64_t)a2[2];
        if ((unint64_t)v7 >= v19)
        {
          v21 = *a2;
          v22 = ((char *)v7 - (char *)*a2) >> 4;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60)
            abort();
          v24 = v19 - (_QWORD)v21;
          if (v24 >> 3 > v23)
            v23 = v24 >> 3;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
            v25 = 0xFFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            if (v25 >> 60)
              sub_1C4764EE4();
            v26 = (char *)operator new(16 * v25);
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[16 * v22];
          *(_OWORD *)v27 = *v18;
          v28 = (unsigned int *)v27;
          if (v7 != v21)
          {
            do
            {
              *((_OWORD *)v28 - 1) = *((_OWORD *)v7 - 1);
              v28 -= 4;
              v7 -= 4;
            }
            while (v7 != v21);
            v7 = *a2;
          }
          v20 = (unsigned int *)(v27 + 16);
          *a2 = v28;
          a2[1] = (unsigned int *)(v27 + 16);
          a2[2] = (unsigned int *)&v26[16 * v25];
          if (v7)
            operator delete(v7);
        }
        else
        {
          *(_OWORD *)v7 = *v18;
          v20 = v7 + 4;
        }
        a2[1] = v20;
        goto LABEL_36;
      }
      v12 = 0;
      v13 = 1;
      while (v11 != -1)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -2;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & (v97 - 1);
        v10 = (_DWORD *)(v96[0] + 8 * v9);
        v11 = *v10;
        if (v8 == *v10)
          goto LABEL_18;
      }
      if (v12)
        v16 = v12;
      else
        v16 = v10;
    }
    else
    {
      v16 = 0;
    }
    v17 = sub_1C476C0AC((uint64_t)v96, (uint64_t)&v95, &v95, v16);
    *(_QWORD *)v17 = v95;
    v7 = a2[1];
    goto LABEL_18;
  }
LABEL_39:
  v29 = *a2;
  v30 = a2[1];
  if (*a2 != v30)
  {
    v58 = v97;
    v59 = v97 - 1;
    v60 = (int *)(v4 + 8 * v97);
    do
    {
      v61 = *v29;
      if ((_DWORD)v61 != -1)
      {
        v62 = *(_QWORD *)(a1 + 24);
        v63 = v62 + 32 * v61;
        v66 = *(_DWORD *)(v63 + 24);
        v64 = (_DWORD *)(v63 + 24);
        v65 = v66;
        if (v66 != -1)
        {
          v67 = v65;
          do
          {
            v68 = v67;
            v67 = *(unsigned int *)(v62 + 32 * v67 + 24);
          }
          while ((_DWORD)v67 != -1);
          v69 = *(_DWORD *)(v62 + 32 * v68);
          do
          {
            v61 = v65;
            *v64 = v69;
            v70 = v62 + 32 * v65;
            v71 = *(_DWORD *)(v70 + 24);
            v64 = (_DWORD *)(v70 + 24);
            v65 = v71;
          }
          while (v71 != -1);
        }
        v72 = v60;
        if (v58)
        {
          v73 = *(_DWORD *)(v62 + 32 * v61);
          LODWORD(v74) = (37 * v73) & v59;
          v72 = (int *)(v4 + 8 * v74);
          v75 = *v72;
          if (v73 != *v72)
          {
            v91 = 1;
            while (v75 != -1)
            {
              v92 = v74 + v91++;
              v74 = v92 & v59;
              v75 = *(_DWORD *)(v4 + 8 * v74);
              if (v73 == v75)
              {
                v72 = (int *)(v4 + 8 * v74);
                goto LABEL_78;
              }
            }
            v72 = v60;
          }
        }
LABEL_78:
        *v29 = v72[1];
      }
      v76 = v29[1];
      if ((_DWORD)v76 != -1)
      {
        v77 = *(_QWORD *)(a1 + 24);
        v78 = v77 + 32 * v76;
        v81 = *(_DWORD *)(v78 + 24);
        v79 = (_DWORD *)(v78 + 24);
        v80 = v81;
        if (v81 != -1)
        {
          v82 = v80;
          do
          {
            v83 = v82;
            v82 = *(unsigned int *)(v77 + 32 * v82 + 24);
          }
          while ((_DWORD)v82 != -1);
          v84 = *(_DWORD *)(v77 + 32 * v83);
          do
          {
            v76 = v80;
            *v79 = v84;
            v85 = v77 + 32 * v80;
            v86 = *(_DWORD *)(v85 + 24);
            v79 = (_DWORD *)(v85 + 24);
            v80 = v86;
          }
          while (v86 != -1);
        }
        v87 = v60;
        if (v58)
        {
          v88 = *(_DWORD *)(v77 + 32 * v76);
          LODWORD(v89) = (37 * v88) & v59;
          v87 = (int *)(v4 + 8 * v89);
          v90 = *v87;
          if (v88 != *v87)
          {
            v93 = 1;
            while (v90 != -1)
            {
              v94 = v89 + v93++;
              v89 = v94 & v59;
              v90 = *(_DWORD *)(v4 + 8 * v89);
              if (v88 == v90)
              {
                v87 = (int *)(v4 + 8 * v89);
                goto LABEL_87;
              }
            }
            v87 = v60;
          }
        }
LABEL_87:
        v29[1] = v87[1];
      }
      v29 += 4;
    }
    while (v29 != v30);
  }
  v31 = sub_1C61809F8((uint64_t *)a1);
  v33 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  if (v33 != v31)
  {
    v34 = *(_QWORD *)(a1 + 24);
    v35 = v97;
    v36 = v97 - 1;
    v37 = (int *)(v4 + 8 * v97);
    do
    {
      v38 = *(unsigned int *)(v31 + 16);
      v39 = v34 + 32 * v38;
      v42 = *(_DWORD *)(v39 + 24);
      v40 = (_DWORD *)(v39 + 24);
      v41 = v42;
      if (v42 != -1)
      {
        v43 = v41;
        do
        {
          v44 = v43;
          v43 = *(unsigned int *)(v34 + 32 * v43 + 24);
        }
        while ((_DWORD)v43 != -1);
        v45 = *(_DWORD *)(v34 + 32 * v44);
        do
        {
          v38 = v41;
          *v40 = v45;
          v46 = v34 + 32 * v41;
          v47 = *(_DWORD *)(v46 + 24);
          v40 = (_DWORD *)(v46 + 24);
          v41 = v47;
        }
        while (v47 != -1);
      }
      v48 = v37;
      if (v35)
      {
        v49 = *(_DWORD *)(v34 + 32 * v38);
        LODWORD(v50) = (37 * v49) & v36;
        v48 = (int *)(v4 + 8 * v50);
        v51 = *v48;
        if (v49 != *v48)
        {
          v55 = 1;
          while (v51 != -1)
          {
            v56 = v50 + v55++;
            v50 = v56 & v36;
            v51 = *(_DWORD *)(v4 + 8 * v50);
            if (v49 == v51)
            {
              v48 = (int *)(v4 + 8 * v50);
              goto LABEL_49;
            }
          }
          v48 = v37;
        }
      }
LABEL_49:
      *(_DWORD *)(v31 + 16) = v48[1];
      while (1)
      {
        v31 += 24;
        if (v31 == v32)
          break;
        v52 = *(_DWORD *)(v31 + 8);
        if ((*(_QWORD *)v31 != -4096 || v52 != -1) && (*(_QWORD *)v31 != -8192 || v52 != -2))
          goto LABEL_61;
      }
      v31 = v32;
LABEL_61:
      ;
    }
    while (v31 != v33);
  }
  return MEMORY[0x1CAA32FB4](v4, 4);
}

_QWORD *sub_1C4DD2170(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(416 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6184314((_QWORD *)a1, v4, v4 + 416 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 416 * v10;
    do
    {
      *result = -4096;
      result += 52;
      v11 -= 416;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C4DD2238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = operator new(0x30uLL);
  *v6 = a1;
  v6[2] = 2;
  v6[3] = 0;
  v6[4] = a2;
  if (a2 != -8192 && a2 != -4096 && a2)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v6 + 2));
  v6[1] = &off_1E81352D0;
  v6[5] = a3;
  return v6;
}

void sub_1C4DD22B0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4DD22C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81352F8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4DD22F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81352F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4DD2314(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::TargetLibraryAnalysis::Key, a2)+ 8;
}

void sub_1C4DD2340()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4DD2354(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8135340;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4DD2388(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8135340;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C4DD23A4(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;
  void **v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14[2];
  int v15;
  uint64_t v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *__src;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = **(void ****)(*(_QWORD *)(a1 + 8) + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::TargetLibraryInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::TargetLibraryInfoWrapperPass::ID);
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  llvm::TargetLibraryAnalysis::run(v5 + 32, a2, (uint64_t)&v21);
  *(_QWORD *)(v5 + 240) = v21;
  if (*(_BYTE *)(v5 + 320))
  {
    if ((uint64_t *)(v5 + 240) == &v21)
    {
LABEL_16:
      *(_DWORD *)(v5 + 312) = v25;
      goto LABEL_17;
    }
    v6 = (void **)(v5 + 248);
    v7 = v23;
    v8 = *(unsigned int *)(v5 + 256);
    if (v8 >= v23)
    {
      if (v23)
        memmove(*v6, __src, 8 * v23);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v5 + 260) < v23)
    {
      *(_DWORD *)(v5 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v7, 8);
    }
    else if ((_DWORD)v8)
    {
      memmove(*v6, __src, 8 * v8);
      goto LABEL_13;
    }
    v8 = 0;
LABEL_13:
    if (v8 != v23)
      memcpy((char *)*v6 + 8 * v8, (char *)__src + 8 * v8, 8 * v23 - 8 * v8);
LABEL_15:
    *(_DWORD *)(v5 + 256) = v7;
    goto LABEL_16;
  }
  v10 = (void *)(v5 + 264);
  *(_QWORD *)(v5 + 248) = v5 + 264;
  v11 = (void **)(v5 + 248);
  *(_QWORD *)(v5 + 256) = 0x600000000;
  v12 = v23;
  if (v23 && v11 != &__src)
  {
    if (v23 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v23, 8);
      v13 = v23;
      if (!v23)
      {
LABEL_27:
        *(_DWORD *)(v5 + 256) = v12;
        goto LABEL_28;
      }
      v10 = *v11;
    }
    else
    {
      v13 = v23;
    }
    memcpy(v10, __src, 8 * v13);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 312) = v25;
  *(_BYTE *)(v5 + 320) = 1;
LABEL_17:
  if (__src != &v24)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v16);
  sub_1C4D8B52C(v14);
  return v5 + 240;
}

void *llvm::AllAnalysesOn<llvm::LazyCallGraph::SCC>::ID()
{
  return &llvm::AllAnalysesOn<llvm::LazyCallGraph::SCC>::SetKey;
}

_QWORD *llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Invalidator::Invalidator(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::AnalysisManager(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::AnalysisManager(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

uint64_t *llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;

  v4 = *((unsigned int *)a1 + 4);
  v5 = *a1;
  if ((_DWORD)v4)
  {
    v6 = (uint64_t *)(v5 + 8);
    v7 = 16 * v4;
    do
    {
      if ((*(v6 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
    v5 = *a1;
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *a2;
  *a2 = 0;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  v10 = a1 + 3;
  v9 = a1[3];
  v11 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v11;
  v12 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  v13 = *((unsigned int *)a1 + 10);
  if ((_DWORD)v13)
  {
    v14 = (uint64_t *)(v9 + 8);
    v15 = 32 * v13;
    do
    {
      if ((*(v14 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C4D8B4AC(v14);
      v14 += 4;
      v15 -= 32;
    }
    while (v15);
    v9 = *v10;
  }
  MEMORY[0x1CAA32FB4](v9, 8);
  *v10 = 0;
  a1[4] = 0;
  *((_DWORD *)a1 + 10) = 0;
  a1[3] = a2[3];
  a2[3] = 0;
  *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  v16 = *((_DWORD *)a1 + 9);
  *((_DWORD *)a1 + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v16;
  v17 = *((_DWORD *)a1 + 10);
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v17;
  MEMORY[0x1CAA32FB4](a1[6], 8);
  a1[6] = 0;
  a1[7] = 0;
  *((_DWORD *)a1 + 16) = 0;
  a1[6] = a2[6];
  a2[6] = 0;
  *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  v18 = *((_DWORD *)a1 + 15);
  *((_DWORD *)a1 + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v18;
  v19 = *((_DWORD *)a1 + 16);
  *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v19;
  return a1;
}

BOOL llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) == 0;
}

void llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::clear(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t CachedResultImpl;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t *i;
  _QWORD *v23;
  uint64_t v24[2];
  _QWORD *v25;

  CachedResultImpl = llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getCachedResultImpl(a1, (uint64_t)&llvm::PassInstrumentationAnalysis::Key, a2);
  if (CachedResultImpl)
  {
    v9 = *(_QWORD *)(CachedResultImpl + 8);
    if (v9)
    {
      v10 = *(unsigned int *)(v9 + 1160);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD **)(v9 + 1152);
        v12 = 32 * v10;
        do
        {
          v13 = v11[3];
          v14 = v11;
          if ((v13 & 2) == 0)
            v14 = (_QWORD *)*v11;
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(v13 & 0xFFFFFFFFFFFFFFF8))(v14, a3, a4);
          v11 += 4;
          v12 -= 32;
        }
        while (v12);
      }
    }
  }
  v15 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a1 + 24);
    v17 = ((_DWORD)v15 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v18 = (uint64_t *)(v16 + 32 * v17);
    v19 = *v18;
    if (*v18 == a2)
    {
LABEL_14:
      if (v18 != (uint64_t *)(v16 + 32 * v15))
      {
        for (i = (uint64_t *)v18[2]; i != v18 + 1; i = (uint64_t *)i[1])
        {
          v24[0] = i[2];
          v24[1] = a2;
          v25 = 0;
          if (sub_1C4DD9D34((uint64_t *)(a1 + 48), v24, &v25))
          {
            v23 = v25;
            *v25 = -8192;
            v23[1] = -8192;
            *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
          }
        }
        sub_1C4D8B4AC(v18 + 1);
        *v18 = -8192;
        *(int32x2_t *)(a1 + 32) = vadd_s32(*(int32x2_t *)(a1 + 32), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    else
    {
      v20 = 1;
      while (v19 != -4096)
      {
        v21 = v17 + v20++;
        v17 = v21 & (v15 - 1);
        v19 = *(_QWORD *)(v16 + 32 * v17);
        if (v19 == a2)
        {
          v18 = (uint64_t *)(v16 + 32 * v17);
          goto LABEL_14;
        }
      }
    }
  }
}

{
  __ZN4llvm15AnalysisManagerINS_13LazyCallGraph3SCCEJRS1_EE5clearERS2_NS_9StringRefE(a1, a2, a3, a4);
}

void llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::clear(uint64_t a1)
{
  sub_1C4DD2B1C((unsigned int *)(a1 + 48));
  sub_1C4DD2B70((_DWORD *)(a1 + 24));
}

unsigned int *sub_1C4DD2B1C(unsigned int *result)
{
  unsigned int v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if (v1)
      {
        v2 = *(_QWORD **)result;
        v3 = *(_QWORD *)result + 24 * v1;
        do
        {
          *v2 = -4096;
          v2[1] = -4096;
          v2 += 3;
        }
        while (v2 != (_QWORD *)v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C4DD9E20(result);
    }
  }
  return result;
}

void sub_1C4DD2B70(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = a1[2];
  if (v2 || a1[3])
  {
    v3 = a1[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1C4DD9F30(a1);
    }
    else
    {
      if ((_DWORD)v3)
      {
        v4 = 32 * v3;
        v5 = (uint64_t *)(*(_QWORD *)a1 + 8);
        do
        {
          v6 = *(v5 - 1);
          if (v6 != -4096)
          {
            if (v6 != -8192)
              sub_1C4D8B4AC(v5);
            *(v5 - 1) = -4096;
          }
          v5 += 4;
          v4 -= 32;
        }
        while (v4);
      }
      *((_QWORD *)a1 + 1) = 0;
    }
  }
}

void llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t CachedResultImpl;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  char v41[8];
  uint64_t v42[3];
  _QWORD v43[2];
  uint64_t v44;
  _QWORD *v45;
  unsigned int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!sub_1C4DDA07C(a3, (uint64_t)&llvm::AllAnalysesOn<llvm::LazyCallGraph::SCC>::SetKey))
  {
    v44 = 1;
    for (i = 8; i != 136; i += 16)
      *(uint64_t *)((char *)&v44 + i) = -4096;
    v43[0] = &v44;
    v43[1] = a1 + 48;
    v42[0] = a2;
    v37 = a1 + 24;
    v38 = (uint64_t *)(a1 + 48);
    v7 = sub_1C4DDA118(a1 + 24, v42);
    v8 = (uint64_t)(v7 + 1);
    v39 = v7;
    v9 = (uint64_t *)v7[2];
    if (v9 != v7 + 1)
    {
      do
      {
        v10 = v9[2];
        v11 = v9[3];
        v12 = sub_1C4D91F84((uint64_t)&v44, v10);
        if ((v44 & 1) != 0)
          v13 = &v45;
        else
          v13 = v45;
        v14 = v46;
        if ((v44 & 1) != 0)
          v14 = 8;
        if (&v13[2 * v14] == (_QWORD *)v12)
        {
          v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v11 + 16))(v11, a2, a3, v43);
          v40 = v10;
          v41[0] = v15;
          sub_1C4D921A4((uint64_t)&v44, &v40, v41, (uint64_t)v42);
        }
        v9 = (uint64_t *)v9[1];
      }
      while (v9 != (uint64_t *)v8);
    }
    v16 = v39;
    if (v44 >= 2)
    {
      v17 = (uint64_t *)v39[2];
      while (v17 != (uint64_t *)v8)
      {
        v18 = v17[2];
        v42[0] = v18;
        v40 = 0;
        if (sub_1C4D92000((uint64_t)&v44, v42, &v40) && *(_BYTE *)(v40 + 8))
        {
          CachedResultImpl = llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getCachedResultImpl(a1, (uint64_t)&llvm::PassInstrumentationAnalysis::Key, a2);
          if (CachedResultImpl)
          {
            v20 = CachedResultImpl;
            v42[0] = 0;
            v36 = a1;
            if ((sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v18, v42) & 1) != 0)
              v21 = v42[0];
            else
              v21 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
            v22 = *(_QWORD *)(v20 + 8);
            if (v22)
            {
              v23 = *(unsigned int *)(v22 + 1016);
              if ((_DWORD)v23)
              {
                v24 = *(_QWORD *)(v21 + 8);
                v25 = *(_QWORD **)(v22 + 1008);
                v26 = 32 * v23;
                do
                {
                  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
                  v29 = v28;
                  v42[0] = 0;
                  v30 = (_QWORD *)operator new();
                  *v30 = &unk_1E8135388;
                  v30[1] = a2;
                  v31 = v42[0];
                  v42[0] = (uint64_t)v30;
                  if (v31)
                    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
                  v32 = v25[3];
                  v33 = v25;
                  if ((v32 & 2) == 0)
                    v33 = (_QWORD *)*v25;
                  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t *))(v32 & 0xFFFFFFFFFFFFFFF8))(v33, v27, v29, v42);
                  v34 = v42[0];
                  v42[0] = 0;
                  if (v34)
                    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
                  v25 += 4;
                  v26 -= 32;
                }
                while (v26);
              }
            }
            a1 = v36;
            v16 = v39;
          }
          v17 = (uint64_t *)sub_1C618472C(v8, v17);
          v42[0] = v18;
          v42[1] = a2;
          v40 = 0;
          if (sub_1C4DD9D34(v38, v42, &v40))
          {
            v35 = v40;
            *(_QWORD *)v40 = -8192;
            *(_QWORD *)(v35 + 8) = -8192;
            *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
          }
        }
        else
        {
          v17 = (uint64_t *)v17[1];
        }
      }
    }
    if (!v16[3])
      sub_1C6184788(v37, a2);
    if ((v44 & 1) == 0)
      MEMORY[0x1CAA32FB4](v45, 8);
  }
}

{
  __ZN4llvm15AnalysisManagerINS_13LazyCallGraph3SCCEJRS1_EE10invalidateERS2_RKNS_17PreservedAnalysesE(a1, a2, a3);
}

uint64_t llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::lookUpPass(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if ((sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5) & 1) != 0)
    v3 = v5;
  else
    v3 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  return *(_QWORD *)(v3 + 8);
}

{
  uint64_t v3;
  uint64_t v5;

  v5 = 0;
  if (sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
    v3 = v5;
  else
    v3 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  return *(_QWORD *)(v3 + 8);
}

uint64_t llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v47 = a2;
  v48 = a3;
  v8 = (uint64_t *)(a1 + 48);
  v49 = 0;
  v50 = 0;
  v9 = sub_1C4DD9D34((uint64_t *)(a1 + 48), (uint64_t *)&v47, &v50);
  v10 = v50;
  if ((v9 & 1) != 0)
  {
    v11 = v50[2];
    return *(_QWORD *)(v11 + 24);
  }
  v13 = *(_DWORD *)(a1 + 56);
  v14 = *(_DWORD *)(a1 + 64);
  if (4 * v13 + 4 >= 3 * v14)
  {
    v14 *= 2;
  }
  else if (v14 + ~v13 - *(_DWORD *)(a1 + 60) > v14 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C4DDA4A0((uint64_t)v8, v14);
  v50 = 0;
  sub_1C4DD9D34(v8, (uint64_t *)&v47, &v50);
  v10 = v50;
LABEL_6:
  ++*(_DWORD *)(a1 + 56);
  if (*v10 != -4096 || v10[1] != -4096)
    --*(_DWORD *)(a1 + 60);
  *v10 = v47;
  v10[1] = v48;
  v10[2] = v49;
  v47 = 0;
  if ((sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)a2, &v47) & 1) != 0)
    v15 = (uint64_t)v47;
  else
    v15 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  v16 = *(_QWORD *)(v15 + 8);
  if (a2 == (_QWORD *)&llvm::PassInstrumentationAnalysis::Key)
  {
    v17 = 0;
  }
  else
  {
    v46 = a4;
    v17 = *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a1, &llvm::PassInstrumentationAnalysis::Key, a3, a4)+ 8);
    if (v17)
    {
      v18 = *(unsigned int *)(v17 + 728);
      if ((_DWORD)v18)
      {
        v19 = *(_QWORD **)(v17 + 720);
        v20 = 32 * v18;
        do
        {
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
          v23 = v22;
          v47 = 0;
          v24 = (_QWORD *)operator new();
          *v24 = &unk_1E8135388;
          v24[1] = a3;
          v25 = (uint64_t)v47;
          v47 = v24;
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          v26 = v19[3];
          v27 = v19;
          if ((v26 & 2) == 0)
            v27 = (_QWORD *)*v19;
          (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v26 & 0xFFFFFFFFFFFFFFF8))(v27, v21, v23, &v47);
          v28 = (uint64_t)v47;
          v47 = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v19 += 4;
          v20 -= 32;
        }
        while (v20);
      }
    }
    a4 = v46;
  }
  v47 = (_QWORD *)a3;
  v29 = sub_1C4DDA118(a1 + 24, (uint64_t *)&v47);
  (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(&v47, v16, a3, a1, a4);
  v30 = operator new(0x20uLL);
  v32 = v29[1];
  v31 = v29 + 1;
  v33 = (uint64_t)v47;
  v30[2] = a2;
  v30[3] = v33;
  *v30 = v32;
  v30[1] = v31;
  *(_QWORD *)(v32 + 8) = v30;
  *v31 = (uint64_t)v30;
  ++v31[2];
  if (v17)
  {
    v34 = *(unsigned int *)(v17 + 872);
    if ((_DWORD)v34)
    {
      v35 = *(_QWORD **)(v17 + 864);
      v36 = 32 * v34;
      do
      {
        v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
        v39 = v38;
        v47 = 0;
        v40 = (_QWORD *)operator new();
        *v40 = &unk_1E8135388;
        v40[1] = a3;
        v41 = (uint64_t)v47;
        v47 = v40;
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        v42 = v35[3];
        v43 = v35;
        if ((v42 & 2) == 0)
          v43 = (_QWORD *)*v35;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v42 & 0xFFFFFFFFFFFFFFF8))(v43, v37, v39, &v47);
        v44 = (uint64_t)v47;
        v47 = 0;
        if (v44)
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
        v35 += 4;
        v36 -= 32;
      }
      while (v36);
    }
  }
  v47 = a2;
  v48 = a3;
  v50 = 0;
  if ((sub_1C4DD9D34(v8, (uint64_t *)&v47, &v50) & 1) != 0)
    v45 = (uint64_t)v50;
  else
    v45 = *(_QWORD *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64);
  v11 = *v31;
  *(_QWORD *)(v45 + 16) = *v31;
  return *(_QWORD *)(v11 + 24);
}

{
  return __ZN4llvm15AnalysisManagerINS_13LazyCallGraph3SCCEJRS1_EE13getResultImplEPNS_11AnalysisKeyERS2_S3_(a1, a2, a3, a4);
}

uint64_t llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getCachedResultImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8[2];
  uint64_t v9;

  v8[0] = a2;
  v8[1] = a3;
  v9 = 0;
  if (sub_1C4DD9D34((uint64_t *)(a1 + 48), v8, &v9))
  {
    v4 = v9;
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a1 + 64);
    v4 = v5 + 24 * v6;
  }
  if (v4 == v5 + 24 * v6)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(v4 + 16) + 24);
}

{
  return __ZNK4llvm15AnalysisManagerINS_13LazyCallGraph3SCCEJRS1_EE19getCachedResultImplEPNS_11AnalysisKeyERS2_(a1, a2, a3);
}

__n128 llvm::PassManager<llvm::LazyCallGraph::SCC,llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::LazyCallGraph&,llvm::CGSCCUpdateResult &>::PassManager(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

_QWORD *llvm::PassManager<llvm::LazyCallGraph::SCC,llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::LazyCallGraph&,llvm::CGSCCUpdateResult &>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (_QWORD *)*a1;
  if (*a1)
  {
    v5 = (_QWORD *)a1[1];
    v6 = (_QWORD *)*a1;
    if (v5 != v4)
    {
      do
      {
        v8 = *--v5;
        v7 = v8;
        *v5 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
      while (v5 != v4);
      v6 = (_QWORD *)*a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return a1;
}

BOOL llvm::PassManager<llvm::LazyCallGraph::SCC,llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::LazyCallGraph&,llvm::CGSCCUpdateResult &>::isEmpty(_QWORD *a1)
{
  return *a1 == a1[1];
}

uint64_t llvm::PassManager<llvm::LazyCallGraph::SCC,llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::LazyCallGraph&,llvm::CGSCCUpdateResult &>::isRequired()
{
  return 1;
}

_QWORD *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Module>::InnerAnalysisManagerProxy(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

_QWORD *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Result::Result(_QWORD *result, uint64_t a2)
{
  uint64_t i;

  *result = a2;
  result[1] = 1;
  for (i = 2; i != 6; i += 2)
    result[i] = -4096;
  return result;
}

{
  uint64_t i;

  *result = a2;
  result[1] = 1;
  for (i = 2; i != 6; i += 2)
    result[i] = -4096;
  return result;
}

uint64_t llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Result::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  void *v29;
  uint64_t v30;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x1E0C80C00];
  v29 = v31;
  v30 = 0x400000000;
  v8 = (_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 > 1)
  {
    if ((v7 & 1) != 0)
    {
      v15 = (_QWORD *)(a1 + 16);
      v12 = (_QWORD *)(a1 + 48);
    }
    else
    {
      v15 = *(_QWORD **)(a1 + 16);
      v26 = *(unsigned int *)(a1 + 24);
      if (!(_DWORD)v26)
      {
        v14 = 0;
        v11 = *(_QWORD **)(a1 + 16);
        v13 = v11;
        goto LABEL_9;
      }
      v12 = &v15[2 * v26];
    }
    v7 = *(_DWORD *)(a1 + 8) & 1;
    v11 = v15;
    while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v11 += 2;
      if (v11 == v12)
      {
        v11 = v12;
        break;
      }
    }
  }
  else
  {
    if (v7)
    {
      v9 = a1 + 16;
      v10 = 2;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(unsigned int *)(a1 + 24);
    }
    v11 = (_QWORD *)(v9 + 16 * v10);
    v12 = v11;
  }
  if (v7)
  {
    v13 = (_QWORD *)(a1 + 16);
    v14 = 2;
  }
  else
  {
    v13 = *(_QWORD **)(a1 + 16);
    v14 = *(unsigned int *)(a1 + 24);
  }
  v15 = v12;
LABEL_9:
  v16 = &v13[2 * v14];
  if (v11 != v16)
  {
    do
    {
      v17 = *v11;
      v28[0] = a4;
      v28[1] = a2;
      v28[2] = a3;
      sub_1C4DD3810(v11 + 1, (uint64_t)v28);
      v18 = v11[1];
      if (v18 < 8 || (v18 & 4) != 0 && (v20 = v18 & 0xFFFFFFFFFFFFFFF8) != 0 && !*(_DWORD *)(v20 + 8))
      {
        v19 = v30;
        if (v30 >= (unint64_t)HIDWORD(v30))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v30 + 1, 8);
          v19 = v30;
        }
        *((_QWORD *)v29 + v19) = v17;
        LODWORD(v30) = v30 + 1;
      }
      v21 = v11 + 2;
      v11 = v15;
      if (v21 != v15)
      {
        v11 = v21;
        while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v11 += 2;
          if (v11 == v15)
          {
            v11 = v15;
            break;
          }
        }
      }
    }
    while (v11 != v16);
    v22 = (uint64_t *)v29;
    if ((_DWORD)v30)
    {
      v23 = 8 * v30;
      do
      {
        v24 = *v22++;
        v27 = v24;
        sub_1C4DD3880(v8, &v27);
        v23 -= 8;
      }
      while (v23);
      v22 = (uint64_t *)v29;
    }
    if (v22 != v31)
      free(v22);
  }
  return 0;
}

{
  return __ZN4llvm25OuterAnalysisManagerProxyINS_15AnalysisManagerINS_6ModuleEJEEENS_13LazyCallGraph3SCCEJRS4_EE6Result10invalidateERS5_RKNS_17PreservedAnalysesERNS1_IS5_JS6_EE11InvalidatorE(a1, a2, a3, a4);
}

unint64_t *sub_1C4DD3810(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  __int128 v7;
  uint64_t v8;

  v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  v3 = sub_1C4DDA6D4(a1, &v7);
  v4 = *a1;
  if ((*a1 & 4) != 0)
    v5 = (unint64_t *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8)
                            + 8 * *(unsigned int *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8));
  else
    v5 = (unint64_t *)&a1[v4 > 7];
  return sub_1C4DDA638((unint64_t *)a1, (unint64_t *)v3, v5);
}

uint64_t sub_1C4DD3880(_DWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  int v5;
  _QWORD *v7;

  v7 = 0;
  v3 = sub_1C4DDA7C8((uint64_t)a1, a2, &v7);
  if ((_DWORD)v3)
  {
    v4 = v7;
    sub_1C4DDA878(v7 + 1);
    *v4 = -8192;
    v5 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v5;
  }
  return v3;
}

uint64_t llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Result::getOuterInvalidations(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::OuterAnalysisManagerProxy(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

_QWORD *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::run@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = 0;
  *a2 = *result;
  a2[1] = 1;
  v3 = a2 + 2;
  do
  {
    v3[v2] = -4096;
    v2 += 2;
  }
  while (v2 != 4);
  return result;
}

_QWORD *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Function>::Result::Result(_QWORD *result, uint64_t a2)
{
  uint64_t i;

  *result = a2;
  result[1] = 1;
  for (i = 2; i != 6; i += 2)
    result[i] = -4096;
  return result;
}

{
  uint64_t i;

  *result = a2;
  result[1] = 1;
  for (i = 2; i != 6; i += 2)
    result[i] = -4096;
  return result;
}

uint64_t llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Function>::Result::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  void *v29;
  uint64_t v30;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x1E0C80C00];
  v29 = v31;
  v30 = 0x400000000;
  v8 = (_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 > 1)
  {
    if ((v7 & 1) != 0)
    {
      v15 = (_QWORD *)(a1 + 16);
      v12 = (_QWORD *)(a1 + 48);
    }
    else
    {
      v15 = *(_QWORD **)(a1 + 16);
      v26 = *(unsigned int *)(a1 + 24);
      if (!(_DWORD)v26)
      {
        v14 = 0;
        v11 = *(_QWORD **)(a1 + 16);
        v13 = v11;
        goto LABEL_9;
      }
      v12 = &v15[2 * v26];
    }
    v7 = *(_DWORD *)(a1 + 8) & 1;
    v11 = v15;
    while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v11 += 2;
      if (v11 == v12)
      {
        v11 = v12;
        break;
      }
    }
  }
  else
  {
    if (v7)
    {
      v9 = a1 + 16;
      v10 = 2;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 16);
      v10 = *(unsigned int *)(a1 + 24);
    }
    v11 = (_QWORD *)(v9 + 16 * v10);
    v12 = v11;
  }
  if (v7)
  {
    v13 = (_QWORD *)(a1 + 16);
    v14 = 2;
  }
  else
  {
    v13 = *(_QWORD **)(a1 + 16);
    v14 = *(unsigned int *)(a1 + 24);
  }
  v15 = v12;
LABEL_9:
  v16 = &v13[2 * v14];
  if (v11 != v16)
  {
    do
    {
      v17 = *v11;
      v28[0] = a4;
      v28[1] = a2;
      v28[2] = a3;
      sub_1C4DD3BCC(v11 + 1, (uint64_t)v28);
      v18 = v11[1];
      if (v18 < 8 || (v18 & 4) != 0 && (v20 = v18 & 0xFFFFFFFFFFFFFFF8) != 0 && !*(_DWORD *)(v20 + 8))
      {
        v19 = v30;
        if (v30 >= (unint64_t)HIDWORD(v30))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v30 + 1, 8);
          v19 = v30;
        }
        *((_QWORD *)v29 + v19) = v17;
        LODWORD(v30) = v30 + 1;
      }
      v21 = v11 + 2;
      v11 = v15;
      if (v21 != v15)
      {
        v11 = v21;
        while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v11 += 2;
          if (v11 == v15)
          {
            v11 = v15;
            break;
          }
        }
      }
    }
    while (v11 != v16);
    v22 = (uint64_t *)v29;
    if ((_DWORD)v30)
    {
      v23 = 8 * v30;
      do
      {
        v24 = *v22++;
        v27 = v24;
        sub_1C4DD3880(v8, &v27);
        v23 -= 8;
      }
      while (v23);
      v22 = (uint64_t *)v29;
    }
    if (v22 != v31)
      free(v22);
  }
  return 0;
}

{
  return __ZN4llvm25OuterAnalysisManagerProxyINS_15AnalysisManagerINS_13LazyCallGraph3SCCEJRS2_EEENS_8FunctionEJEE6Result10invalidateERS6_RKNS_17PreservedAnalysesERNS1_IS6_JEE11InvalidatorE(a1, a2, a3, a4);
}

unint64_t *sub_1C4DD3BCC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  __int128 v7;
  uint64_t v8;

  v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  v3 = sub_1C4DDA8D4(a1, &v7);
  v4 = *a1;
  if ((*a1 & 4) != 0)
    v5 = (unint64_t *)(*(_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8)
                            + 8 * *(unsigned int *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8));
  else
    v5 = (unint64_t *)&a1[v4 > 7];
  return sub_1C4DDA638((unint64_t *)a1, (unint64_t *)v3, v5);
}

uint64_t llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Function>::Result::getOuterInvalidations(uint64_t a1)
{
  return a1 + 8;
}

_QWORD *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Function>::OuterAnalysisManagerProxy(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

_QWORD *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Function>::run@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = 0;
  *a2 = *result;
  a2[1] = 1;
  v3 = a2 + 2;
  do
  {
    v3[v2] = -4096;
    v2 += 2;
  }
  while (v2 != 4);
  return result;
}

_QWORD *llvm::PassManager<llvm::LazyCallGraph::SCC,llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::LazyCallGraph&,llvm::CGSCCUpdateResult &>::run@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t CachedResultImpl;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  const void *v15;
  size_t v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  void *v42;
  void *v43;
  uint64_t v44;
  int v45;
  void *v46;
  void *v47;
  uint64_t v48;
  int v49;
  void *__dst;
  _BYTE *v51;
  uint64_t v52;
  int v53;
  _BYTE v54[16];
  void *v55;
  _BYTE *v56;
  uint64_t v57;
  int v58;
  _BYTE v59[16];
  uint64_t v60;

  v8 = a2;
  v60 = *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a3, &llvm::PassInstrumentationAnalysis::Key, a2, a4)+ 8);
  *(_QWORD *)a6 = a6 + 32;
  *(_QWORD *)(a6 + 8) = a6 + 32;
  *(_QWORD *)(a6 + 16) = 2;
  *(_DWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 48) = a6 + 80;
  *(_QWORD *)(a6 + 56) = a6 + 80;
  *(_QWORD *)(a6 + 64) = 2;
  *(_DWORD *)(a6 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a6, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  CachedResultImpl = llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getCachedResultImpl(a3, (uint64_t)&llvm::FunctionAnalysisManagerCGSCCProxy::Key, v8);
  v12 = *a1;
  v13 = a1[1];
  if (*a1 != v13)
  {
    v40 = *(_QWORD *)(CachedResultImpl + 8);
    v14 = (uint64_t *)off_1EF8EEB50();
    do
    {
      if (sub_1C4DD4084(&v60, *v12, v8))
      {
        __dst = v54;
        v51 = v54;
        v52 = 2;
        v53 = 0;
        v55 = v59;
        v56 = v59;
        v57 = 2;
        v58 = 0;
        v15 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*v12 + 32))(*v12);
        if (*v14)
          llvm::timeTraceProfilerBegin(v15, v16, (uint64_t)"", 0);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)*v12
                                                                                                  + 16))(&v42, *v12, v8, a3, a4, a5);
        if (v51 != __dst)
          free(v51);
        if (v43 == v42)
        {
          v51 = __dst;
          if (HIDWORD(v44))
            memmove(__dst, v43, 8 * HIDWORD(v44));
        }
        else
        {
          v51 = v43;
          v43 = v42;
        }
        v52 = v44;
        v53 = v45;
        v44 = 2;
        v45 = 0;
        if (v56 != v55)
          free(v56);
        v17 = v46;
        v18 = v47;
        if (v47 == v46)
        {
          v56 = v55;
          if (HIDWORD(v48))
          {
            memmove(v55, v47, 8 * HIDWORD(v48));
            v18 = v46;
          }
          v17 = v47;
        }
        else
        {
          v56 = v47;
          v47 = v46;
          v18 = v46;
        }
        v57 = v48;
        v58 = v49;
        v48 = 2;
        v49 = 0;
        if (v17 != v18)
          free(v17);
        if (v43 != v42)
          free(v43);
        if (*v14)
          sub_1C6392DC0(*v14);
        v19 = (_QWORD *)a5[3];
        v20 = sub_1C477672C((uint64_t)v19, v8);
        v21 = v19[1];
        v22 = 16;
        if (v21 == *v19)
          v22 = 20;
        v23 = (_QWORD *)(v21 + 8 * *(unsigned int *)((char *)v19 + v22));
        v24 = *v12;
        if (v20 == v23)
        {
          sub_1C4DD433C(v60, *v12, v8, (uint64_t)&__dst);
        }
        else if (v60)
        {
          v25 = *(unsigned int *)(v60 + 584);
          if ((_DWORD)v25)
          {
            v26 = *(_QWORD **)(v60 + 576);
            v27 = 32 * v25;
            do
            {
              v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
              v30 = v26[3];
              v31 = v26;
              if ((v30 & 2) == 0)
                v31 = (_QWORD *)*v26;
              (*(void (**)(_QWORD *, uint64_t, uint64_t, void **))(v30 & 0xFFFFFFFFFFFFFFF8))(v31, v29, v28, &__dst);
              v26 += 4;
              v27 -= 32;
            }
            while (v27);
          }
        }
        v32 = a5[4];
        if (v32)
        {
          v8 = a5[4];
          *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a3, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, v32, a4)+ 8) = v40;
        }
        v33 = (_QWORD *)a5[3];
        v34 = sub_1C477672C((uint64_t)v33, v8);
        v35 = v34;
        v36 = v33[1];
        v37 = 16;
        if (v36 == *v33)
          v37 = 20;
        v38 = (_QWORD *)(v36 + 8 * *(unsigned int *)((char *)v33 + v37));
        if (v34 == v38)
        {
          llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::invalidate(a3, v8, (uint64_t)&__dst);
          sub_1C4DD4444(a6, (uint64_t)&__dst);
        }
        if (v56 != v55)
          free(v56);
        if (v51 != __dst)
          free(v51);
        if (v35 != v38)
          break;
      }
      ++v12;
    }
    while (v12 != v13);
  }
  sub_1C4DD46F4(a5 + 5, a6);
  return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a6, (uint64_t)&llvm::AllAnalysesOn<llvm::LazyCallGraph::SCC>::SetKey);
}

uint64_t sub_1C4DD4084(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;

  if (!*a1)
    return 1;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v7 = *a1;
  if ((v6 & 1) != 0)
    goto LABEL_13;
  v8 = *(unsigned int *)(v7 + 8);
  if (!(_DWORD)v8)
    goto LABEL_13;
  v9 = *(_QWORD **)v7;
  v10 = 32 * v8;
  v11 = 1;
  do
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v14 = v13;
    v46 = 0;
    v15 = (_QWORD *)operator new();
    *v15 = &unk_1E8135388;
    v15[1] = a3;
    v16 = v46;
    v46 = v15;
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    v17 = v9[3];
    v18 = v9;
    if ((v17 & 2) == 0)
      v18 = (_QWORD *)*v9;
    v19 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v17 & 0xFFFFFFFFFFFFFFF8))(v18, v12, v14, &v46);
    v20 = v46;
    v46 = 0;
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    v11 &= v19;
    v9 += 4;
    v10 -= 32;
  }
  while (v10);
  v7 = *a1;
  if (v11)
  {
LABEL_13:
    v21 = *(unsigned int *)(v7 + 296);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD **)(v7 + 288);
      v23 = 32 * v21;
      do
      {
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        v26 = v25;
        v45 = 0;
        v27 = (_QWORD *)operator new();
        *v27 = &unk_1E8135388;
        v27[1] = a3;
        v28 = v45;
        v45 = v27;
        if (v28)
          (*(void (**)(_QWORD *))(*v28 + 8))(v28);
        v29 = v22[3];
        v30 = v22;
        if ((v29 & 2) == 0)
          v30 = (_QWORD *)*v22;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v29 & 0xFFFFFFFFFFFFFFF8))(v30, v24, v26, &v45);
        v31 = v45;
        v45 = 0;
        if (v31)
          (*(void (**)(_QWORD *))(*v31 + 8))(v31);
        v22 += 4;
        v23 -= 32;
      }
      while (v23);
    }
    return 1;
  }
  v33 = *(unsigned int *)(v7 + 152);
  if ((_DWORD)v33)
  {
    v34 = *(_QWORD **)(v7 + 144);
    v35 = 32 * v33;
    do
    {
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v38 = v37;
      v44 = 0;
      v39 = (_QWORD *)operator new();
      *v39 = &unk_1E8135388;
      v39[1] = a3;
      v40 = v44;
      v44 = v39;
      if (v40)
        (*(void (**)(_QWORD *))(*v40 + 8))(v40);
      v41 = v34[3];
      v42 = v34;
      if ((v41 & 2) == 0)
        v42 = (_QWORD *)*v34;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v41 & 0xFFFFFFFFFFFFFFF8))(v42, v36, v38, &v44);
      v43 = v44;
      v44 = 0;
      if (v43)
        (*(void (**)(_QWORD *))(*v43 + 8))(v43);
      v34 += 4;
      v35 -= 32;
    }
    while (v35);
  }
  return 0;
}

uint64_t sub_1C4DD433C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  if (result)
  {
    v4 = *(unsigned int *)(result + 440);
    if ((_DWORD)v4)
    {
      v8 = *(_QWORD **)(result + 432);
      v9 = 32 * v4;
      do
      {
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        v12 = v11;
        v17 = 0;
        v13 = (_QWORD *)operator new();
        *v13 = &unk_1E8135388;
        v13[1] = a3;
        v14 = v17;
        v17 = v13;
        if (v14)
          (*(void (**)(_QWORD *))(*v14 + 8))(v14);
        v15 = v8[3];
        v16 = v8;
        if ((v15 & 2) == 0)
          v16 = (_QWORD *)*v8;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **, uint64_t))(v15 & 0xFFFFFFFFFFFFFFF8))(v16, v10, v12, &v17, a4);
        result = (uint64_t)v17;
        v17 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v8 += 4;
        v9 -= 32;
      }
      while (v9);
    }
  }
  return result;
}

void sub_1C4DD4444(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *i;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;

  if (*(_DWORD *)(a2 + 68) != *(_DWORD *)(a2 + 72)
    || ((v4 = sub_1C477672C(a2, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey),
         v5 = *(_QWORD *)(a2 + 8),
         v5 != *(_QWORD *)a2)
      ? (v6 = (unsigned int *)(a2 + 16))
      : (v6 = (unsigned int *)(a2 + 20)),
        v4 == (_QWORD *)(v5 + 8 * *v6)))
  {
    if (*(_DWORD *)(a1 + 68) != *(_DWORD *)(a1 + 72))
      goto LABEL_12;
    v7 = sub_1C477672C(a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = 16;
    if (v8 == *(_QWORD *)a1)
      v9 = 20;
    if (v7 == (_QWORD *)(v8 + 8 * *(unsigned int *)(a1 + v9)))
    {
LABEL_12:
      v10 = *(_QWORD *)(a2 + 56);
      if (v10 == *(_QWORD *)(a2 + 48))
        v11 = (unsigned int *)(a2 + 68);
      else
        v11 = (unsigned int *)(a2 + 64);
      v12 = *v11;
      if ((_DWORD)v12)
      {
        v13 = 8 * v12;
        v14 = *(uint64_t **)(a2 + 56);
        while ((unint64_t)*v14 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v14;
          v13 -= 8;
          if (!v13)
            goto LABEL_32;
        }
      }
      else
      {
        v14 = *(uint64_t **)(a2 + 56);
      }
      v15 = (_QWORD *)(v10 + 8 * v12);
      if (v14 != v15)
      {
        v16 = *v14;
LABEL_23:
        v17 = sub_1C477672C(a1, v16);
        v18 = *(_QWORD *)(a1 + 8);
        if (v18 == *(_QWORD *)a1)
          v19 = 20;
        else
          v19 = 16;
        if (v17 != (_QWORD *)(v18 + 8 * *(unsigned int *)(a1 + v19)))
        {
          *v17 = -2;
          ++*(_DWORD *)(a1 + 24);
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 48), v16);
        v20 = (unint64_t *)(v14 + 1);
        while (v20 != v15)
        {
          v21 = *v20++;
          v16 = v21;
          if (v21 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v14 = (uint64_t *)(v20 - 1);
            goto LABEL_23;
          }
        }
      }
LABEL_32:
      v22 = *(_QWORD *)(a1 + 8);
      v23 = 16;
      if (v22 == *(_QWORD *)a1)
        v23 = 20;
      v24 = *(unsigned int *)(a1 + v23);
      if ((_DWORD)v24)
      {
        v25 = 8 * v24;
        for (i = *(uint64_t **)(a1 + 8); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
        {
          v25 -= 8;
          if (!v25)
            return;
        }
      }
      else
      {
        i = *(uint64_t **)(a1 + 8);
      }
      v27 = (_QWORD *)(v22 + 8 * v24);
      if (i != v27)
      {
        v28 = *i;
LABEL_42:
        v29 = sub_1C477672C(a2, v28);
        v30 = *(_QWORD *)(a2 + 8);
        if (v30 == *(_QWORD *)a2)
          v31 = (unsigned int *)(a2 + 20);
        else
          v31 = (unsigned int *)(a2 + 16);
        if (v29 == (_QWORD *)(v30 + 8 * *v31))
        {
          v32 = sub_1C477672C(a1, v28);
          v33 = *(_QWORD *)(a1 + 8);
          if (v33 == *(_QWORD *)a1)
            v34 = 20;
          else
            v34 = 16;
          if (v32 != (_QWORD *)(v33 + 8 * *(unsigned int *)(a1 + v34)))
          {
            *v32 = -2;
            ++*(_DWORD *)(a1 + 24);
          }
        }
        v35 = (unint64_t *)(i + 1);
        while (v35 != v27)
        {
          v36 = *v35++;
          v28 = v36;
          if (v36 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            i = (uint64_t *)(v35 - 1);
            goto LABEL_42;
          }
        }
      }
    }
    else if (a2 != a1)
    {
      llvm::SmallPtrSetImplBase::MoveFrom(a1, 2, (double *)a2);
      llvm::SmallPtrSetImplBase::MoveFrom(a1 + 48, 2, (double *)(a2 + 48));
    }
  }
}

_QWORD *sub_1C4DD46F4(_QWORD *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *i;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;

  v3 = (uint64_t)result;
  if (*(_DWORD *)(a2 + 68) != *(_DWORD *)(a2 + 72)
    || ((result = sub_1C477672C(a2, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey),
         v4 = *(_QWORD *)(a2 + 8),
         v4 != *(_QWORD *)a2)
      ? (v5 = (unsigned int *)(a2 + 16))
      : (v5 = (unsigned int *)(a2 + 20)),
        result == (_QWORD *)(v4 + 8 * *v5)))
  {
    if (*(_DWORD *)(v3 + 68) != *(_DWORD *)(v3 + 72))
      goto LABEL_12;
    result = sub_1C477672C(v3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    v6 = *(_QWORD *)(v3 + 8);
    v7 = 16;
    if (v6 == *(_QWORD *)v3)
      v7 = 20;
    if (result == (_QWORD *)(v6 + 8 * *(unsigned int *)(v3 + v7)))
    {
LABEL_12:
      v8 = *(_QWORD *)(a2 + 56);
      if (v8 == *(_QWORD *)(a2 + 48))
        v9 = (unsigned int *)(a2 + 68);
      else
        v9 = (unsigned int *)(a2 + 64);
      v10 = *v9;
      if ((_DWORD)v10)
      {
        v11 = 8 * v10;
        v12 = *(uint64_t **)(a2 + 56);
        while ((unint64_t)*v12 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v12;
          v11 -= 8;
          if (!v11)
            goto LABEL_32;
        }
      }
      else
      {
        v12 = *(uint64_t **)(a2 + 56);
      }
      v13 = (_QWORD *)(v8 + 8 * v10);
      if (v12 != v13)
      {
        v14 = *v12;
LABEL_23:
        v15 = sub_1C477672C(v3, v14);
        v16 = *(_QWORD *)(v3 + 8);
        if (v16 == *(_QWORD *)v3)
          v17 = 20;
        else
          v17 = 16;
        if (v15 != (_QWORD *)(v16 + 8 * *(unsigned int *)(v3 + v17)))
        {
          *v15 = -2;
          ++*(_DWORD *)(v3 + 24);
        }
        result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(v3 + 48), v14);
        v18 = (unint64_t *)(v12 + 1);
        while (v18 != v13)
        {
          v19 = *v18++;
          v14 = v19;
          if (v19 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v12 = (uint64_t *)(v18 - 1);
            goto LABEL_23;
          }
        }
      }
LABEL_32:
      v20 = *(_QWORD *)(v3 + 8);
      v21 = 16;
      if (v20 == *(_QWORD *)v3)
        v21 = 20;
      v22 = *(unsigned int *)(v3 + v21);
      if ((_DWORD)v22)
      {
        v23 = 8 * v22;
        for (i = *(uint64_t **)(v3 + 8); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
        {
          v23 -= 8;
          if (!v23)
            return result;
        }
      }
      else
      {
        i = *(uint64_t **)(v3 + 8);
      }
      v25 = (_QWORD *)(v20 + 8 * v22);
      if (i != v25)
      {
        v26 = *i;
LABEL_42:
        result = sub_1C477672C(a2, v26);
        v27 = *(_QWORD *)(a2 + 8);
        if (v27 == *(_QWORD *)a2)
          v28 = (unsigned int *)(a2 + 20);
        else
          v28 = (unsigned int *)(a2 + 16);
        if (result == (_QWORD *)(v27 + 8 * *v28))
        {
          result = sub_1C477672C(v3, v26);
          v29 = *(_QWORD *)(v3 + 8);
          if (v29 == *(_QWORD *)v3)
            v30 = 20;
          else
            v30 = 16;
          if (result != (_QWORD *)(v29 + 8 * *(unsigned int *)(v3 + v30)))
          {
            *result = -2;
            ++*(_DWORD *)(v3 + 24);
          }
        }
        v31 = (unint64_t *)(i + 1);
        while (v31 != v25)
        {
          v32 = *v31++;
          v26 = v32;
          if (v32 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            i = (uint64_t *)(v31 - 1);
            goto LABEL_42;
          }
        }
      }
    }
    else if (a2 != v3)
    {
      llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)v3, (const llvm::SmallPtrSetImplBase *)a2);
      return llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(v3 + 48), (const llvm::SmallPtrSetImplBase *)(a2 + 48));
    }
  }
  return result;
}

void llvm::ModuleToPostOrderCGSCCPassAdaptor::run(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t ResultImpl;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char *v37;
  uint64_t *v38;
  uint64_t v40;
  const void *v41;
  size_t v42;
  void *v43;
  void *v44;
  char **v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char **v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  size_t v70;
  _QWORD *v71;
  size_t v72;
  char v73;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  int v80;
  void *v81;
  void *v82;
  uint64_t v83;
  int v84;
  void *__dst;
  _BYTE *v86;
  uint64_t v87;
  int v88;
  _BYTE v89[16];
  void *v90;
  _BYTE *v91;
  uint64_t v92;
  int v93;
  _BYTE v94[16];
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  int v101;
  _BYTE v102[32];
  char *v103;
  char *v104;
  uint64_t v105;
  int v106;
  _BYTE v107[32];
  _QWORD v108[3];
  char **v109;
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  uint64_t v113;
  int v114;
  _BYTE v115[16];
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  int v119;
  _QWORD v120[3];
  uint64_t v121;
  uint64_t v122[32];
  void *v123[2];
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD v128[9];
  void *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[9];
  _QWORD *v133;
  uint64_t v134;
  _QWORD v135[3];

  v135[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Module>::Key, a2)+ 8);
  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::LazyCallGraphAnalysis::Key, a2);
  v75 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(a3, (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a2)+ 8);
  v132[0] = 1;
  for (i = 1; i != 9; i += 2)
    v132[i] = -4096;
  v133 = v135;
  v134 = 0x100000000;
  v128[0] = 1;
  for (j = 1; j != 9; j += 2)
    v128[j] = -4096;
  v129 = &v131;
  v130 = 0x100000000;
  v103 = v107;
  v104 = v107;
  v105 = 4;
  v106 = 0;
  v98 = v102;
  v99 = v102;
  v100 = 4;
  v101 = 0;
  v125 = 1;
  memset_pattern16(&v126, &unk_1C85F2160, 0x40uLL);
  v108[0] = v132;
  v108[1] = v128;
  v108[2] = &v103;
  v109 = &v98;
  v110 = 0;
  v111 = v115;
  v112 = v115;
  v113 = 2;
  v114 = 0;
  v116 = v120;
  v117 = v120;
  v118 = 2;
  v119 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v111, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v120[2] = &v125;
  bzero(v122, 0x310uLL);
  v121 = 1;
  for (k = 19; k != 51; k += 2)
    v108[k] = -4096;
  v123[0] = &v124;
  v123[1] = (void *)0x1000000000;
  v97 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::PassInstrumentationAnalysis::Key, a2)
                  + 8);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  llvm::LazyCallGraph::buildRefSCCs((llvm::LazyCallGraph *)(ResultImpl + 8));
  v76 = ResultImpl + 8;
  sub_1C4DD89C0(ResultImpl + 8);
  v13 = v12;
  v14 = *(unsigned int *)(ResultImpl + 136);
  if ((_DWORD)v14)
  {
    v15 = *(_QWORD **)(ResultImpl + 128);
    v16 = &v15[v14];
    do
    {
      while ((*v15 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        if (++v15 == v16)
          goto LABEL_17;
      }
      if (*(_QWORD *)(*v15++ & 0xFFFFFFFFFFFFFFF8))
        v18 = 1;
      else
        v18 = v15 == v16;
    }
    while (!v18);
  }
LABEL_17:
  v95 = ResultImpl + 8;
  v96 = v12;
  if (!v12)
    goto LABEL_125;
  v19 = (uint64_t *)off_1EF8EEB50(&off_1EF8EEB50);
  do
  {
    do
      sub_1C4DD8A20(&v95);
    while (v96 && !v96[4]);
    __dst = v13;
    sub_1C4DD53DC((uint64_t)v132, (uint64_t *)&__dst);
    v20 = v134;
    do
    {
      v21 = v133[v20 - 1];
      __dst = 0;
      if (sub_1C4DDA9C8((uint64_t)v132, v21, &__dst))
      {
        *(_QWORD *)__dst = -8192;
        LODWORD(v132[0]) -= 2;
        ++HIDWORD(v132[0]);
      }
      v22 = (v134 - 1);
      do
      {
        v23 = v22;
        if (!(_DWORD)v22)
          break;
      }
      while (!v133[--v22]);
      LODWORD(v134) = v23;
      v25 = (char *)sub_1C477672C((uint64_t)&v103, v21);
      if (v104 == v103)
        v26 = (uint64_t *)((char *)&v105 + 4);
      else
        v26 = &v105;
      if (v25 == &v104[8 * *(unsigned int *)v26])
      {
        v27 = *(unsigned int *)(v21 + 16);
        if ((_DWORD)v27)
        {
          v28 = 8 * v27;
          v29 = *(_QWORD *)(v21 + 8) - 8;
          do
          {
            __dst = *(void **)(v29 + v28);
            sub_1C4DD5568((uint64_t)v128, (uint64_t *)&__dst);
            v28 -= 8;
          }
          while (v28);
        }
        v30 = 0;
        v31 = v130;
        do
        {
          v32 = (char *)v129 + 8 * v31;
          v33 = *((_QWORD *)v32 - 1);
          __dst = 0;
          if (sub_1C4DDAD80((uint64_t)v128, (_QWORD *)v32 - 1, &__dst))
          {
            *(_QWORD *)__dst = -8192;
            LODWORD(v128[0]) -= 2;
            ++HIDWORD(v128[0]);
          }
          v34 = (v130 - 1);
          do
          {
            v35 = v34;
            if (!(_DWORD)v34)
              break;
          }
          while (!*((_QWORD *)v129 + --v34));
          LODWORD(v130) = v35;
          v37 = (char *)sub_1C477672C((uint64_t)&v98, v33);
          if (v99 == v98)
            v38 = (uint64_t *)((char *)&v100 + 4);
          else
            v38 = &v100;
          if (v37 == &v99[8 * *(unsigned int *)v38] && v30 != v33)
          {
            *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(v7, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, v33, v76)+ 8) = v75;
            llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::invalidate(v7, v33, (uint64_t)&v111);
            v40 = v110;
            do
            {
              v30 = v40;
              v110 = 0;
              if (sub_1C4DD4084(&v97, *a1, v33))
              {
                __dst = v89;
                v86 = v89;
                v87 = 2;
                v88 = 0;
                v90 = v94;
                v91 = v94;
                v92 = 2;
                v93 = 0;
                v41 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 32))(*a1);
                if (*v19)
                  llvm::timeTraceProfilerBegin(v41, v42, (uint64_t)"", 0);
                (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)*a1 + 16))(&v77, *a1, v33, v7, v76, v108);
                if (v86 != __dst)
                  free(v86);
                if (v78 == v77)
                {
                  v86 = __dst;
                  if (HIDWORD(v79))
                    memmove(__dst, v78, 8 * HIDWORD(v79));
                }
                else
                {
                  v86 = v78;
                  v78 = v77;
                }
                v87 = v79;
                v88 = v80;
                v79 = 2;
                v80 = 0;
                if (v91 != v90)
                  free(v91);
                v43 = v81;
                v44 = v82;
                if (v82 == v81)
                {
                  v91 = v90;
                  if (HIDWORD(v83))
                  {
                    memmove(v90, v82, 8 * HIDWORD(v83));
                    v44 = v81;
                  }
                  v43 = v82;
                }
                else
                {
                  v91 = v82;
                  v82 = v81;
                  v44 = v81;
                }
                v92 = v83;
                v93 = v84;
                v83 = 2;
                v84 = 0;
                if (v43 != v44)
                  free(v43);
                if (v78 != v77)
                  free(v78);
                if (*v19)
                  sub_1C6392DC0(*v19);
                v45 = v109;
                v46 = (char *)sub_1C477672C((uint64_t)v109, v33);
                v47 = v45[1];
                v48 = 20;
                if (v47 != *v45)
                  v48 = 16;
                v49 = &v47[8 * *(unsigned int *)((char *)v45 + v48)];
                v50 = *a1;
                if (v46 == v49)
                {
                  sub_1C4DD433C(v97, *a1, v33, (uint64_t)&__dst);
                }
                else if (v97)
                {
                  v51 = *(unsigned int *)(v97 + 584);
                  if ((_DWORD)v51)
                  {
                    v52 = *(_QWORD **)(v97 + 576);
                    v53 = 32 * v51;
                    do
                    {
                      v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 32))(v50);
                      v56 = v52[3];
                      v57 = v52;
                      if ((v56 & 2) == 0)
                        v57 = (_QWORD *)*v52;
                      (*(void (**)(_QWORD *, uint64_t, uint64_t, void **))(v56 & 0xFFFFFFFFFFFFFFF8))(v57, v55, v54, &__dst);
                      v52 += 4;
                      v53 -= 32;
                    }
                    while (v53);
                  }
                }
                if (v110)
                {
                  v33 = v110;
                  *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(v7, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, v110, v76)+ 8) = v75;
                }
                v58 = v109;
                v59 = (char *)sub_1C477672C((uint64_t)v109, v33);
                v60 = v59;
                v61 = v58[1];
                v62 = 20;
                if (v61 != *v58)
                  v62 = 16;
                v63 = &v61[8 * *(unsigned int *)((char *)v58 + v62)];
                if (v59 == v63)
                {
                  llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::invalidate(v7, v33, (uint64_t)&__dst);
                  sub_1C4DD46F4(&v111, (uint64_t)&__dst);
                  sub_1C4DD4444(a4, (uint64_t)&__dst);
                }
                if (v91 != v90)
                  free(v91);
                if (v86 != __dst)
                  free(v86);
                if (v60 != v63)
                  break;
              }
              v40 = v110;
            }
            while (v110);
          }
          v31 = v130;
        }
        while ((_DWORD)v130);
        if (v125 > 1 || HIDWORD(v125))
        {
          v64 = v128;
          v65 = &v126;
          if ((v125 & 1) != 0)
            goto LABEL_113;
          v66 = v127;
          if (((2 * (_DWORD)v125) & 0xFFFFFFFC) >= v127 || v127 < 0x41)
          {
            if ((_DWORD)v127)
            {
              v65 = v126;
              v64 = &v126[2 * v127];
              do
              {
LABEL_113:
                *v65 = -4096;
                v65[1] = -4096;
                v65 += 2;
              }
              while (v65 != v64);
              v66 = v125 & 1;
            }
            v125 = v66;
            goto LABEL_98;
          }
          v67 = __clz((v125 >> 1) - 1);
          if (v67 - 28 >= 3)
            v68 = 1 << (33 - v67);
          else
            v68 = 64;
          if (v125 >= 2)
            v69 = v68;
          else
            v69 = 0;
          if ((_DWORD)v69 == (_DWORD)v127)
          {
            v125 = 0;
            v70 = 16 * v127;
            v71 = v126;
LABEL_122:
            memset_pattern16(v71, &unk_1C85F2160, v70);
            goto LABEL_98;
          }
          MEMORY[0x1CAA32FB4](v126, 8);
          if (v69 <= 4)
          {
            v125 = 1;
          }
          else
          {
            LODWORD(v125) = v125 & 0xFFFFFFFE;
            v72 = 16 * v69;
            v71 = operator new(v72, (std::align_val_t)8uLL);
            v126 = v71;
            v127 = v69;
            v73 = v125;
            v125 &= 1u;
            if ((v73 & 1) == 0)
              goto LABEL_121;
          }
          v72 = 64;
          v71 = &v126;
LABEL_121:
          v70 = v72;
          goto LABEL_122;
        }
      }
LABEL_98:
      v20 = v134;
    }
    while ((_DWORD)v134);
    v13 = v96;
  }
  while (v95 != v76 || v96);
LABEL_125:
  sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::AllAnalysesOn<llvm::LazyCallGraph::SCC>::SetKey);
  sub_1C4DDB144(a4, (uint64_t)&llvm::LazyCallGraphAnalysis::Key);
  sub_1C4DDB144(a4, (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Module>::Key);
  sub_1C4DDB144(a4, (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key);
  sub_1C6184A18(v123);
  if ((v121 & 1) == 0)
    MEMORY[0x1CAA32FB4](v122[0], 8);
  if (v117 != v116)
    free(v117);
  if (v112 != v111)
    free(v112);
  if ((v125 & 1) == 0)
    MEMORY[0x1CAA32FB4](v126, 8);
  if (v99 != v98)
    free(v99);
  if (v104 != v103)
    free(v104);
  if (v129 != &v131)
    free(v129);
  if ((v128[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v128[1], 8);
  if (v133 != v135)
    free(v133);
  if ((v132[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v132[1], 8);
}

uint64_t sub_1C4DD53DC(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  v4 = (_QWORD *)(a1 + 72);
  v5 = *(unsigned int *)(a1 + 80);
  v6 = *a2;
  v16 = 0;
  result = sub_1C4DDA9C8(a1, v6, &v16);
  v8 = v16;
  if (!(_DWORD)result)
  {
    v9 = *(_DWORD *)a1 >> 1;
    if ((*(_DWORD *)a1 & 1) != 0)
      v10 = 4;
    else
      v10 = *(_DWORD *)(a1 + 16);
    if (4 * v9 + 4 >= 3 * v10)
    {
      v10 *= 2;
    }
    else if (v10 + ~v9 - *(_DWORD *)(a1 + 4) > v10 >> 3)
    {
LABEL_6:
      *(_DWORD *)a1 += 2;
      if (*v8 != -4096)
        --*(_DWORD *)(a1 + 4);
      *v8 = v6;
      v8[1] = v5;
      v11 = *a2;
      v12 = *(unsigned int *)(a1 + 80);
      if (v12 >= *(_DWORD *)(a1 + 84))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4, a1 + 88, v12 + 1, 8);
        LODWORD(v12) = *(_DWORD *)(a1 + 80);
      }
      v13 = (uint64_t *)(*v4 + 8 * v12);
LABEL_11:
      *v13 = v11;
      ++*(_DWORD *)(a1 + 80);
      return result;
    }
    sub_1C4DDAA74(a1, v10);
    v16 = 0;
    result = sub_1C4DDA9C8(a1, v6, &v16);
    v8 = v16;
    goto LABEL_6;
  }
  v14 = v16[1];
  v15 = *(unsigned int *)(a1 + 80);
  if (v14 != v15 - 1)
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v14) = 0;
    v8[1] = v15;
    v11 = *a2;
    if (v15 >= *(_DWORD *)(a1 + 84))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4, a1 + 88, v15 + 1, 8);
      v15 = *(unsigned int *)(a1 + 80);
    }
    v13 = (uint64_t *)(*v4 + 8 * v15);
    goto LABEL_11;
  }
  return result;
}

BOOL sub_1C4DD5568(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;

  v4 = (_QWORD *)(a1 + 72);
  v5 = *(unsigned int *)(a1 + 80);
  v16 = *a2;
  v17 = v5;
  sub_1C4DDACC0(a1, &v16, &v17, (uint64_t)&v18);
  v6 = v19;
  if (v19)
  {
    v7 = *a2;
    v8 = *(unsigned int *)(a1 + 80);
    if (v8 >= *(_DWORD *)(a1 + 84))
    {
      v15 = v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4, a1 + 88, v8 + 1, 8);
      v6 = v15;
      LODWORD(v8) = *(_DWORD *)(a1 + 80);
    }
    v9 = (_QWORD *)(*v4 + 8 * v8);
  }
  else
  {
    v11 = v18;
    v12 = *(_QWORD *)(v18 + 8);
    v13 = *(unsigned int *)(a1 + 80);
    if (v12 == v13 - 1)
      return v6 != 0;
    v14 = v19;
    *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v12) = 0;
    *(_QWORD *)(v11 + 8) = v13;
    v7 = *a2;
    if (v13 >= *(_DWORD *)(a1 + 84))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v4, a1 + 88, v13 + 1, 8);
      v13 = *(unsigned int *)(a1 + 80);
    }
    v9 = (_QWORD *)(*v4 + 8 * v13);
    v6 = v14;
  }
  *v9 = v7;
  ++*(_DWORD *)(a1 + 80);
  return v6 != 0;
}

void llvm::DevirtSCCRepeatedPass::run(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  int i;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  int v57;
  uint64_t j;
  char v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  _QWORD *v63;
  unsigned int *v64;
  unsigned int *v65;
  _QWORD *v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _DWORD *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  int *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  __int128 v85;
  unsigned int v86;
  int v87;
  _QWORD *v88;
  _DWORD v89[14];
  _DWORD v90[2];
  _QWORD *v91;
  _DWORD v92[14];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v12 = a6 + 32;
  *(_QWORD *)a6 = v12;
  *(_QWORD *)(a6 + 8) = v12;
  *(_QWORD *)(a6 + 16) = 2;
  *(_DWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 48) = a6 + 80;
  *(_QWORD *)(a6 + 56) = a6 + 80;
  *(_QWORD *)(a6 + 64) = 2;
  *(_DWORD *)(a6 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a6, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v84 = *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a3, &llvm::PassInstrumentationAnalysis::Key, a2, a4)+ 8);
  sub_1C4DD5D78((int *)(a5 + 144));
  v79 = (int *)(a5 + 144);
  sub_1C4DD5E70((uint64_t)v90, *(uint64_t **)(a2 + 8), *(_DWORD *)(a2 + 16), a5 + 144);
  for (i = 0; ; ++i)
  {
    if (!sub_1C4DD4084(&v84, *a1, a2))
      continue;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(&v80, *a1, a2, a3, a4, a5);
    v14 = *(_QWORD **)(a5 + 24);
    v15 = sub_1C477672C((uint64_t)v14, a2);
    v16 = v14[1];
    v17 = 16;
    if (v16 == *v14)
      v17 = 20;
    v18 = (_QWORD *)(v16 + 8 * *(unsigned int *)((char *)v14 + v17));
    v19 = *a1;
    if (v15 == v18)
    {
      sub_1C4DD433C(v84, *a1, a2, (uint64_t)&v80);
    }
    else if (v84)
    {
      v20 = *(unsigned int *)(v84 + 584);
      if ((_DWORD)v20)
      {
        v21 = *(_QWORD **)(v84 + 576);
        v22 = 32 * v20;
        do
        {
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19);
          v25 = v21[3];
          v26 = v21;
          if ((v25 & 2) == 0)
            v26 = (_QWORD *)*v21;
          (*(void (**)(_QWORD *, uint64_t, uint64_t, void **))(v25 & 0xFFFFFFFFFFFFFFF8))(v26, v24, v23, &v80);
          v21 += 4;
          v22 -= 32;
        }
        while (v22);
      }
    }
    v27 = *(_QWORD *)(a5 + 32);
    if (v27 && v27 != a2)
    {
      sub_1C4DD4444(a6, (uint64_t)&v80);
LABEL_20:
      v32 = 2;
      goto LABEL_21;
    }
    v28 = *(_QWORD **)(a5 + 24);
    v29 = sub_1C477672C((uint64_t)v28, a2);
    v30 = v28[1];
    v31 = 16;
    if (v30 == *v28)
      v31 = 20;
    if (v29 != (_QWORD *)(v30 + 8 * *(unsigned int *)((char *)v28 + v31)))
      goto LABEL_20;
    v33 = *(unsigned int *)(a5 + 416);
    if ((_DWORD)v33)
    {
      v34 = 32 * v33;
      v35 = (uint64_t *)(*(_QWORD *)(a5 + 408) + 24);
      while (1)
      {
        v36 = *v35;
        if (*v35)
        {
          v37 = *(unsigned __int8 *)(v36 + 16);
          if (v37 >= 0x1C)
          {
            v38 = v37 - 33;
            v39 = v38 > 0x33;
            v40 = (1 << v38) & 0x8000000000041;
            if (!v39 && v40 != 0)
            {
              v42 = *(_QWORD *)(v36 - 32);
              if (v42)
              {
                if (!*(_BYTE *)(v42 + 16) && *(_QWORD *)(v42 + 24) == *(_QWORD *)(v36 + 72))
                  break;
              }
            }
          }
        }
        v35 += 4;
        v34 -= 32;
        if (!v34)
          goto LABEL_39;
      }
      sub_1C4DD5D78(v79);
      sub_1C4DD5E70((uint64_t)&v86, *(uint64_t **)(a2 + 8), *(_DWORD *)(a2 + 16), (uint64_t)v79);
    }
    else
    {
LABEL_39:
      sub_1C4DD5D78(v79);
      sub_1C4DD5E70((uint64_t)&v86, *(uint64_t **)(a2 + 8), *(_DWORD *)(a2 + 16), (uint64_t)v79);
      if (v86 > 1)
      {
        if ((v86 & 1) != 0)
          v43 = &v88;
        else
          v43 = v88;
        if ((v86 & 1) != 0)
          v44 = 4;
        else
          v44 = v89[0];
        v46 = &v43[2 * v44];
        if ((_DWORD)v44)
        {
          v47 = 0;
          while ((v43[v47] | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v47 += 2;
            if (2 * v44 == v47)
            {
              v45 = &v43[2 * v44];
              goto LABEL_60;
            }
          }
          v45 = &v43[v47];
        }
        else
        {
          v44 = 0;
          v45 = v43;
        }
      }
      else
      {
        if (v86)
          v43 = &v88;
        else
          v43 = v88;
        if (v86)
          v44 = 4;
        else
          v44 = v89[0];
        v45 = &v43[2 * v44];
        v46 = v45;
      }
LABEL_60:
      v48 = &v43[2 * v44];
      if (v45 == v48)
        goto LABEL_92;
      v49 = &v91;
      if ((v90[0] & 1) == 0)
        v49 = v91;
      v50 = v92[0];
      if ((v90[0] & 1) != 0)
        v50 = 4;
      v51 = v50 - 1;
      while (1)
      {
        if (v50)
        {
          LODWORD(v52) = ((*v45 >> 4) ^ (*v45 >> 9)) & v51;
          v53 = &v49[2 * v52];
          v54 = *v53;
          if (*v53 != *v45)
          {
            v56 = 1;
            do
            {
              if (v54 == -4096)
                goto LABEL_71;
              v57 = v52 + v56++;
              v52 = v57 & v51;
              v54 = v49[2 * v52];
            }
            while (v54 != *v45);
            v53 = &v49[2 * v52];
          }
          if (v53 != &v49[2 * v50]
            && *((_DWORD *)v53 + 3) > *((_DWORD *)v45 + 3)
            && *((_DWORD *)v53 + 2) < *((_DWORD *)v45 + 2))
          {
            break;
          }
        }
LABEL_71:
        v55 = v45 + 2;
        v45 = v46;
        if (v55 != v46)
        {
          v45 = v55;
          while ((*v45 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v45 += 2;
            if (v45 == v46)
            {
              v45 = v46;
              break;
            }
          }
        }
        if (v45 == v48)
          goto LABEL_92;
      }
    }
    if (i >= *((_DWORD *)a1 + 2))
    {
      if (byte_1ED7F0B88)
        llvm::report_fatal_error((llvm *)"Max devirtualization iterations reached", (const char *)1);
LABEL_92:
      v32 = 2;
      goto LABEL_93;
    }
    if ((v90[0] & 1) == 0)
      MEMORY[0x1CAA32FB4](v91, 8);
    v90[0] = 1;
    for (j = 2; j != 18; j += 4)
      *(_QWORD *)&v90[j] = -4096;
    v59 = v90[0];
    v60 = v86 & 1;
    v61 = v90[0] & 0xFFFFFFFE | v60;
    v62 = v86 & 0xFFFFFFFE | v90[0] & 1;
    v90[0] = v62;
    v90[1] = v87;
    v86 = v61;
    v87 = 0;
    if ((v59 & 1) != 0)
    {
      if (!v60)
      {
        v64 = v90;
        v65 = &v86;
        v66 = &v88;
        goto LABEL_98;
      }
      v71 = 0;
      while (1)
      {
        v72 = &v90[v71];
        v73 = (char *)&v86 + v71 * 4;
        v74 = *(_QWORD *)&v90[v71 + 2];
        v75 = *(_QWORD *)&v89[v71 - 2];
        if (v74 == -4096 || v74 == -8192 || v75 == -4096 || v75 == -8192)
        {
          *((_QWORD *)v72 + 1) = v75;
          *((_QWORD *)v73 + 1) = v74;
          if ((v74 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v77 = (char *)&v86 + v71 * 4;
            v78 = (char *)&v90[v71];
            goto LABEL_115;
          }
          if ((v75 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v77 = (char *)&v90[v71];
            v78 = (char *)&v86 + v71 * 4;
LABEL_115:
            *((_QWORD *)v77 + 2) = *((_QWORD *)v78 + 2);
          }
        }
        else
        {
          v76 = *(_QWORD *)&v92[v71];
          *((_QWORD *)v72 + 1) = v75;
          *(_QWORD *)&v92[v71] = *(_QWORD *)&v89[v71];
          *((_QWORD *)v73 + 1) = v74;
          *(_QWORD *)&v89[v71] = v76;
        }
        v71 += 4;
        if (v71 == 16)
          goto LABEL_117;
      }
    }
    if (v60)
    {
      v64 = &v86;
      v65 = v90;
      v61 = v62;
      v66 = &v91;
LABEL_98:
      v67 = 0;
      v68 = v59 & 1;
      v85 = *(_OWORD *)v66;
      *v65 = v61 | 1;
      do
      {
        v69 = *(_QWORD *)&v64[v67 / 4 + 2];
        v66[v67 / 8] = v69;
        if ((v69 | 0x1000) != 0xFFFFFFFFFFFFF000)
          v66[v67 / 8 + 1] = *(_QWORD *)&v64[v67 / 4 + 4];
        v67 += 16;
      }
      while (v67 != 64);
      *v64 &= ~1u;
      v70 = &v91;
      if (!v68)
        v70 = &v88;
      *(_OWORD *)v70 = v85;
      goto LABEL_117;
    }
    v63 = v91;
    v91 = v88;
    v88 = v63;
    LODWORD(v63) = v92[0];
    v92[0] = v89[0];
    v89[0] = (_DWORD)v63;
LABEL_117:
    llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::invalidate(a3, a2, (uint64_t)&v80);
    v32 = 0;
LABEL_93:
    sub_1C4DD4444(a6, (uint64_t)&v80);
    if ((v86 & 1) == 0)
      MEMORY[0x1CAA32FB4](v88, 8);
LABEL_21:
    if (v83 != v82)
      free(v83);
    if (v81 != v80)
      free(v81);
    if (v32)
      break;
  }
  if ((v90[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v91, 8);
}

int *sub_1C4DD5D78(int *result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  int v12;

  v1 = *result;
  if (*result > 1 || result[1])
  {
    if ((v1 & 1) != 0)
    {
      v10 = result + 2;
      v11 = result + 66;
    }
    else
    {
      v3 = result[4];
      if (((2 * v1) & 0xFFFFFFFC) < v3 && v3 >= 0x41)
      {
        v4 = result;
        sub_1C4DDB200(result);
        result = v4;
        goto LABEL_3;
      }
      if (!(_DWORD)v3)
      {
        v12 = 0;
LABEL_21:
        *result = v12;
        result[1] = 0;
        goto LABEL_3;
      }
      v10 = (_QWORD *)*((_QWORD *)result + 1);
      v11 = &v10[2 * v3];
    }
    do
    {
      *v10 = -4096;
      v10 += 2;
    }
    while (v10 != v11);
    v12 = *result & 1;
    goto LABEL_21;
  }
LABEL_3:
  v2 = result[68];
  if ((_DWORD)v2)
  {
    v5 = *((_QWORD *)result + 33);
    v6 = 32 * v2;
    do
    {
      v7 = result;
      v8 = *(_QWORD *)(v5 + v6 - 8);
      if (v8 != -8192 && v8 != -4096 && v8 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((_QWORD *)(v5 + v6 - 24));
      v6 -= 32;
      result = v7;
    }
    while (v6);
  }
  result[68] = 0;
  return result;
}

uint64_t sub_1C4DD5E70(uint64_t result, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  uint64_t v19;
  uint64_t v20;
  int32x2_t ****v21;
  unint64_t v22;
  unint64_t v23;
  int32x2_t ****v24;
  int32x2_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int32x2_t *****v30;
  int32x2_t ****v31;
  int v32;
  int v33;
  unint64_t v35;
  int32x2_t ****v36;
  int32x2_t *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int32x2_t *****v42;
  int32x2_t ****v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  unint64_t *v66;
  int32x2_t ****v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  int32x2_t ****v72;
  uint64_t v73;

  v4 = a2;
  v5 = result;
  v73 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)result = 1;
  for (i = 8; i != 72; i += 16)
    *(_QWORD *)(result + i) = -4096;
  if (a3)
  {
    v7 = &a2[a3];
    while (1)
    {
      v8 = *v4;
      v9 = *(_QWORD *)(*v4 + 8);
      v68 = 0;
      result = sub_1C4DD8B38(v5, v9, &v68);
      v10 = v68;
      if ((result & 1) != 0)
        goto LABEL_14;
      v65 = v68;
      v11 = *(_DWORD *)v5;
      v12 = *(_DWORD *)v5 >> 1;
      v13 = *(_DWORD *)v5 & 1;
      v14 = *(unsigned int *)(v5 + 16);
      v15 = v13 ? 4 : *(_DWORD *)(v5 + 16);
      if (4 * v12 + 4 >= 3 * v15)
        break;
      if (v15 + ~v12 - *(_DWORD *)(v5 + 4) <= v15 >> 3)
        goto LABEL_82;
LABEL_11:
      *(_DWORD *)v5 = ((v11 & 0xFFFFFFFE) + 2) | v13;
      if (*(_QWORD *)v10 != -4096)
        --*(_DWORD *)(v5 + 4);
      *(_QWORD *)v10 = v9;
      *(_QWORD *)(v10 + 8) = 0;
LABEL_14:
      v16 = *(_QWORD *)(v8 + 8);
      v17 = v16 + 72;
      for (j = *(_QWORD *)(v16 + 80); j != v17; j = *(_QWORD *)(j + 8))
      {
        v19 = j - 24;
        if (!j)
          v19 = 0;
        v20 = *(_QWORD *)(v19 + 48);
        if (v20 != v19 + 40)
        {
          while (1)
          {
            if (v20)
              v46 = v20 - 24;
            else
              v46 = 0;
            v47 = *(unsigned __int8 *)(v46 + 16) - 33;
            v48 = v47 > 0x33;
            v49 = (1 << v47) & 0x8000000000041;
            if (!v48 && v49 != 0)
            {
              v51 = *(_QWORD *)(v20 - 56);
              if (v51 && !*(_BYTE *)(v51 + 16) && *(_QWORD *)(v51 + 24) == *(_QWORD *)(v20 + 48))
              {
                ++*(_DWORD *)(v10 + 8);
              }
              else
              {
                ++*(_DWORD *)(v10 + 12);
                v65 = 6;
                v66 = 0;
                v67 = (int32x2_t ****)(v20 - 24);
                if (v20 == -8168 || v20 == -4072)
                {
                  v21 = (int32x2_t ****)(v20 - 24);
                }
                else
                {
                  v21 = (int32x2_t ****)(v20 - 24);
                  if (v20 != 24)
                  {
                    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v65);
                    v21 = v67;
                  }
                }
                v69 = v20 - 24;
                v70 = 6;
                v71 = 0;
                v72 = v21;
                if (v21 != (int32x2_t ****)-8192 && v21 != (int32x2_t ****)-4096)
                {
                  if (v21)
                  {
                    v22 = v65 & 0xFFFFFFFFFFFFFFF8;
                    v71 = *(unint64_t **)(v65 & 0xFFFFFFFFFFFFFFF8);
                    *(_QWORD *)v22 = &v70;
                    v70 = v22 | 6;
                    if (v71)
                      *v71 = *v71 & 7 | (unint64_t)&v71;
                  }
                }
                result = sub_1C6184AB0(a4, (char *)&v69);
                if (v72 != (int32x2_t ****)-8192 && v72 != (int32x2_t ****)-4096 && v72)
                {
                  v23 = v70 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v70 & 0xFFFFFFFFFFFFFFF8) = v71;
                  if (v71)
                  {
                    *v71 = *v71 & 7 | v23;
                  }
                  else
                  {
                    v24 = v72;
                    v25 = ***v72;
                    v26 = (unint64_t)v25[303];
                    if (v26 <= v23)
                    {
                      v27 = v25[305].u32[0];
                      if (v26 + 16 * v27 > v23)
                      {
                        v28 = v27 - 1;
                        LODWORD(v29) = v28 & ((v72 >> 4) ^ (v72 >> 9));
                        v30 = (int32x2_t *****)(v26 + 16 * v29);
                        v31 = *v30;
                        if (v72 == *v30)
                        {
LABEL_41:
                          *v30 = (int32x2_t ****)-8192;
                          v25[304] = vadd_s32(v25[304], (int32x2_t)0x1FFFFFFFFLL);
                          v24 = v72;
                        }
                        else
                        {
                          v32 = 1;
                          while (v31 != (int32x2_t ****)-4096)
                          {
                            v33 = v29 + v32++;
                            v29 = v33 & v28;
                            v31 = *(int32x2_t *****)(v26 + 16 * v29);
                            if (v72 == v31)
                            {
                              v30 = (int32x2_t *****)(v26 + 16 * v29);
                              goto LABEL_41;
                            }
                          }
                        }
                        *((_BYTE *)v24 + 17) &= ~1u;
                      }
                    }
                  }
                }
                if (v67 != (int32x2_t ****)-8192 && v67 != (int32x2_t ****)-4096 && v67 != 0)
                {
                  v35 = v65 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v65 & 0xFFFFFFFFFFFFFFF8) = v66;
                  if (v66)
                  {
                    *v66 = *v66 & 7 | v35;
                  }
                  else
                  {
                    v36 = v67;
                    v37 = ***v67;
                    v38 = (unint64_t)v37[303];
                    if (v38 <= v35)
                    {
                      v39 = v37[305].u32[0];
                      if (v38 + 16 * v39 > v35)
                      {
                        v40 = v39 - 1;
                        LODWORD(v41) = v40 & ((v67 >> 4) ^ (v67 >> 9));
                        v42 = (int32x2_t *****)(v38 + 16 * v41);
                        v43 = *v42;
                        if (v67 == *v42)
                        {
LABEL_57:
                          *v42 = (int32x2_t ****)-8192;
                          v37[304] = vadd_s32(v37[304], (int32x2_t)0x1FFFFFFFFLL);
                          v36 = v67;
                        }
                        else
                        {
                          v44 = 1;
                          while (v43 != (int32x2_t ****)-4096)
                          {
                            v45 = v41 + v44++;
                            v41 = v45 & v40;
                            v43 = *(int32x2_t *****)(v38 + 16 * v41);
                            if (v67 == v43)
                            {
                              v42 = (int32x2_t *****)(v38 + 16 * v41);
                              goto LABEL_57;
                            }
                          }
                        }
                        *((_BYTE *)v36 + 17) &= ~1u;
                      }
                    }
                  }
                }
              }
            }
            v20 = *(_QWORD *)(v20 + 8);
            v52 = j - 24;
            if (!j)
              v52 = 0;
            if (v20 == v52 + 40)
              break;
LABEL_78:
            if (j == v17)
              goto LABEL_79;
          }
          while (1)
          {
            j = *(_QWORD *)(j + 8);
            if (j == v17)
              goto LABEL_79;
            v53 = j - 24;
            if (!j)
              v53 = 0;
            v20 = *(_QWORD *)(v53 + 48);
            if (v20 != v53 + 40)
              goto LABEL_78;
          }
        }
      }
LABEL_79:
      if (++v4 == v7)
        return result;
    }
    v15 *= 2;
LABEL_82:
    if (v15 >= 5)
    {
      v54 = (v15 - 1) | ((unint64_t)(v15 - 1) >> 1);
      v55 = v54 | (v54 >> 2) | ((v54 | (v54 >> 2)) >> 4);
      v56 = ((v55 | (v55 >> 8)) >> 16) | v55 | (v55 >> 8);
      if ((v56 + 1) > 0x40)
        v15 = v56 + 1;
      else
        v15 = 64;
    }
    if (v13)
    {
      v58 = 0;
      v59 = &v69;
      do
      {
        v60 = *(_QWORD *)(v5 + v58 + 8);
        if ((v60 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v61 = *(_QWORD *)(v5 + v58 + 16);
          *v59 = v60;
          v59[1] = v61;
          v59 += 2;
        }
        v58 += 16;
      }
      while (v58 != 64);
      if (v15 > 4)
      {
        *(_DWORD *)v5 &= ~1u;
        v62 = v15;
        *(_QWORD *)(v5 + 8) = operator new(16 * v15, (std::align_val_t)8uLL);
        *(_QWORD *)(v5 + 16) = v62;
      }
      sub_1C4DD8BE4(v5, &v69, v59);
    }
    else
    {
      v57 = *(uint64_t **)(v5 + 8);
      if (v15 > 4)
      {
        v63 = v15;
        *(_QWORD *)(v5 + 8) = operator new(16 * v15, (std::align_val_t)8uLL);
        *(_QWORD *)(v5 + 16) = v63;
      }
      else
      {
        *(_DWORD *)v5 = v11 | 1;
      }
      sub_1C4DD8BE4(v5, v57, &v57[2 * v14]);
      MEMORY[0x1CAA32FB4](v57, 8);
    }
    result = sub_1C4DD8B38(v5, v9, &v65);
    v11 = *(_DWORD *)v5;
    v10 = v65;
    v13 = *(_DWORD *)v5 & 1;
    goto LABEL_11;
  }
  return result;
}

void llvm::CGSCCToFunctionPassAdaptor::run(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  llvm::LazyCallGraph::RefSCC **updated;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  llvm::LazyCallGraph::RefSCC *v12;
  uint64_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  llvm::LazyCallGraph::RefSCC **v19;
  uint64_t v20;
  const void *v21;
  size_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  void *__dst;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  _BYTE v45[16];
  void *v46;
  _BYTE *v47;
  uint64_t v48;
  int v49;
  _BYTE v50[16];
  uint64_t v51;
  void **v52;
  uint64_t v53;
  _QWORD v54[6];

  updated = (llvm::LazyCallGraph::RefSCC **)a2;
  v54[4] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a3, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, a2, a4)+ 8);
  v52 = (void **)v54;
  v53 = 0x400000000;
  v10 = *((unsigned int *)updated + 4);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = updated[1];
    v13 = 8 * v10;
    do
    {
      v14 = *(void **)v12;
      if (v11 >= HIDWORD(v53))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v11 + 1, 8);
        v11 = v53;
      }
      v52[v11] = v14;
      v11 = v53 + 1;
      LODWORD(v53) = v53 + 1;
      v12 = (llvm::LazyCallGraph::RefSCC *)((char *)v12 + 8);
      v13 -= 8;
    }
    while (v13);
  }
  *(_QWORD *)a6 = a6 + 32;
  *(_QWORD *)(a6 + 8) = a6 + 32;
  *(_QWORD *)(a6 + 16) = 2;
  *(_DWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 48) = a6 + 80;
  *(_QWORD *)(a6 + 56) = a6 + 80;
  *(_QWORD *)(a6 + 64) = 2;
  *(_DWORD *)(a6 + 72) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a6, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  if ((_DWORD)v53)
  {
    v15 = v52;
    v31 = (uint64_t *)off_1EF8EEB50(&off_1EF8EEB50);
    v17 = 8 * v16;
    do
    {
      v18 = *v15;
      __dst = *v15;
      v32 = 0;
      if (sub_1C4DD8A9C((uint64_t *)(a4 + 288), &__dst, &v32))
        v19 = (llvm::LazyCallGraph::RefSCC **)v32[1];
      else
        v19 = 0;
      if (v19 == updated)
      {
        v20 = v18[1];
        if (!*((_BYTE *)a1 + 9)
          || !llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(v9, (uint64_t)&llvm::ShouldNotRunFunctionPassesAnalysis::Key, v18[1]))
        {
          v51 = *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v9, &llvm::PassInstrumentationAnalysis::Key, v20)+ 8);
          if (sub_1C4DD69BC(&v51, *a1, v20))
          {
            __dst = v45;
            v42 = v45;
            v43 = 2;
            v44 = 0;
            v46 = v50;
            v47 = v50;
            v48 = 2;
            v49 = 0;
            v21 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 32))(*a1);
            if (*v31)
              llvm::timeTraceProfilerBegin(v21, v22, (uint64_t)"", 0);
            (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 16))(&v32, *a1, v20, v9);
            if (v42 != __dst)
              free(v42);
            if (v33 == v32)
            {
              v42 = __dst;
              if (HIDWORD(v34))
                memmove(__dst, v33, 8 * HIDWORD(v34));
            }
            else
            {
              v42 = v33;
              v33 = v32;
            }
            v43 = v34;
            v44 = v35;
            v34 = 2;
            LODWORD(v35) = 0;
            if (v47 != v46)
              free(v47);
            v23 = v37;
            v24 = (char *)v38;
            if ((char *)v38 == v37)
            {
              v47 = v46;
              if (HIDWORD(v38))
              {
                memmove(v46, (const void *)v38, 8 * HIDWORD(v38));
                v24 = v37;
              }
              v23 = (char *)v38;
            }
            else
            {
              v47 = (_BYTE *)v38;
              *(_QWORD *)&v38 = v37;
              v24 = v37;
            }
            v48 = *((_QWORD *)&v38 + 1);
            v49 = v39;
            *((_QWORD *)&v38 + 1) = 2;
            LODWORD(v39) = 0;
            if (v23 != v24)
              free(v23);
            if (v33 != v32)
              free(v33);
            if (*v31)
              sub_1C6392DC0(*v31);
            sub_1C4DD6C74((uint64_t)&v51, *a1, v20, (uint64_t)&__dst);
            if (*((_BYTE *)a1 + 8))
            {
              v40 = 0;
              v38 = 0u;
              v39 = 0u;
              v35 = 0u;
              v36 = 0;
              v32 = (_QWORD *)&v35 + 1;
              v33 = (_QWORD *)&v35 + 1;
              v34 = 2;
              v37 = (char *)&v39 + 8;
              *(_QWORD *)&v38 = (char *)&v39 + 8;
              DWORD2(v38) = 2;
            }
            else
            {
              llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v32, (const void **)&v35 + 1, (const llvm::SmallPtrSetImplBase *)&__dst);
              llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)&v37, (const void **)&v39 + 1, (const llvm::SmallPtrSetImplBase *)&v46);
            }
            llvm::AnalysisManager<llvm::Function>::invalidate(v9, v20, (uint64_t)&v32);
            if ((char *)v38 != v37)
              free((void *)v38);
            if (v33 != v32)
              free(v33);
            if (*((_BYTE *)a1 + 9))
              llvm::AnalysisManager<llvm::Function>::getResultImpl(v9, &llvm::ShouldNotRunFunctionPassesAnalysis::Key, v20);
            sub_1C4DD4444(a6, (uint64_t)&__dst);
            v32 = (_QWORD *)a6;
            v33 = &llvm::LazyCallGraphAnalysis::Key;
            v25 = sub_1C477672C(a6 + 48, (uint64_t)&llvm::LazyCallGraphAnalysis::Key);
            v26 = *(_QWORD *)(a6 + 56);
            if (v26 == *(_QWORD *)(a6 + 48))
              v27 = (unsigned int *)(a6 + 68);
            else
              v27 = (unsigned int *)(a6 + 64);
            LOBYTE(v34) = v25 != (_QWORD *)(v26 + 8 * *v27);
            if (!sub_1C4DAA35C((uint64_t)&v32) && !sub_1C4DD6D80((uint64_t)&v32))
              updated = llvm::updateCGAndAnalysisManagerForCGSCCPass(a4, updated, (uint64_t)v18, a3, a5, v9);
            if (v47 != v46)
              free(v47);
            if (v42 != __dst)
              free(v42);
          }
        }
      }
      ++v15;
      v17 -= 8;
    }
    while (v17);
  }
  sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a6, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
  sub_1C4DDB144(a6, (uint64_t)&llvm::FunctionAnalysisManagerCGSCCProxy::Key);
  sub_1C4DDB144(a6, (uint64_t)&llvm::LazyCallGraphAnalysis::Key);
  if (v52 != v54)
    free(v52);
}

uint64_t sub_1C4DD69BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;

  if (!*a1)
    return 1;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v7 = *a1;
  if ((v6 & 1) != 0)
    goto LABEL_13;
  v8 = *(unsigned int *)(v7 + 8);
  if (!(_DWORD)v8)
    goto LABEL_13;
  v9 = *(_QWORD **)v7;
  v10 = 32 * v8;
  v11 = 1;
  do
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v14 = v13;
    v46 = 0;
    v15 = (_QWORD *)operator new();
    *v15 = &unk_1E81353E8;
    v15[1] = a3;
    v16 = v46;
    v46 = v15;
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    v17 = v9[3];
    v18 = v9;
    if ((v17 & 2) == 0)
      v18 = (_QWORD *)*v9;
    v19 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v17 & 0xFFFFFFFFFFFFFFF8))(v18, v12, v14, &v46);
    v20 = v46;
    v46 = 0;
    if (v20)
      (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    v11 &= v19;
    v9 += 4;
    v10 -= 32;
  }
  while (v10);
  v7 = *a1;
  if (v11)
  {
LABEL_13:
    v21 = *(unsigned int *)(v7 + 296);
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD **)(v7 + 288);
      v23 = 32 * v21;
      do
      {
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        v26 = v25;
        v45 = 0;
        v27 = (_QWORD *)operator new();
        *v27 = &unk_1E81353E8;
        v27[1] = a3;
        v28 = v45;
        v45 = v27;
        if (v28)
          (*(void (**)(_QWORD *))(*v28 + 8))(v28);
        v29 = v22[3];
        v30 = v22;
        if ((v29 & 2) == 0)
          v30 = (_QWORD *)*v22;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v29 & 0xFFFFFFFFFFFFFFF8))(v30, v24, v26, &v45);
        v31 = v45;
        v45 = 0;
        if (v31)
          (*(void (**)(_QWORD *))(*v31 + 8))(v31);
        v22 += 4;
        v23 -= 32;
      }
      while (v23);
    }
    return 1;
  }
  v33 = *(unsigned int *)(v7 + 152);
  if ((_DWORD)v33)
  {
    v34 = *(_QWORD **)(v7 + 144);
    v35 = 32 * v33;
    do
    {
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v38 = v37;
      v44 = 0;
      v39 = (_QWORD *)operator new();
      *v39 = &unk_1E81353E8;
      v39[1] = a3;
      v40 = v44;
      v44 = v39;
      if (v40)
        (*(void (**)(_QWORD *))(*v40 + 8))(v40);
      v41 = v34[3];
      v42 = v34;
      if ((v41 & 2) == 0)
        v42 = (_QWORD *)*v34;
      (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v41 & 0xFFFFFFFFFFFFFFF8))(v42, v36, v38, &v44);
      v43 = v44;
      v44 = 0;
      if (v43)
        (*(void (**)(_QWORD *))(*v43 + 8))(v43);
      v34 += 4;
      v35 -= 32;
    }
    while (v35);
  }
  return 0;
}

uint64_t sub_1C4DD6C74(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v5 = *(unsigned int *)(v4 + 440);
    if ((_DWORD)v5)
    {
      v9 = *(_QWORD **)(v4 + 432);
      v10 = 32 * v5;
      do
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        v13 = v12;
        v18 = 0;
        v14 = (_QWORD *)operator new();
        *v14 = &unk_1E81353E8;
        v14[1] = a3;
        v15 = v18;
        v18 = v14;
        if (v15)
          (*(void (**)(_QWORD *))(*v15 + 8))(v15);
        v16 = v9[3];
        v17 = v9;
        if ((v16 & 2) == 0)
          v17 = (_QWORD *)*v9;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **, uint64_t))(v16 & 0xFFFFFFFFFFFFFFF8))(v17, v11, v13, &v18, a4);
        result = (uint64_t)v18;
        v18 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v9 += 4;
        v10 -= 32;
      }
      while (v10);
    }
  }
  return result;
}

BOOL sub_1C4DD6D80(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 16))
    return 0;
  v2 = *(_QWORD **)a1;
  v3 = sub_1C477672C(*(_QWORD *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v4 = v2[1];
  v5 = 16;
  if (v4 == *v2)
    v5 = 20;
  if (v3 != (_QWORD *)(v4 + 8 * *(unsigned int *)((char *)v2 + v5)))
    return 1;
  v6 = *(_QWORD **)a1;
  v7 = sub_1C477672C((uint64_t)v6, (uint64_t)&llvm::AllAnalysesOn<llvm::Module>::SetKey);
  v8 = v6[1];
  v9 = 16;
  if (v8 == *v6)
    v9 = 20;
  return v7 != (_QWORD *)(v8 + 8 * *(unsigned int *)((char *)v6 + v9));
}

uint64_t llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Module>::Result::invalidate(uint64_t a1, uint64_t a2, void **a3, uint64_t *a4)
{
  char *v8;
  char *v9;
  unsigned int *v10;
  char *v12;
  char *v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t CachedResultImpl;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *i;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  BOOL v43;
  const void **v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  BOOL v58;

  if (*((_DWORD *)a3 + 17) == *((_DWORD *)a3 + 18))
  {
    v8 = (char *)sub_1C477672C((uint64_t)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    v9 = (char *)a3[1];
    v10 = v9 == *a3 ? (unsigned int *)((char *)a3 + 20) : (unsigned int *)(a3 + 2);
    if (v8 != &v9[8 * *v10])
      return 0;
  }
  v57[0] = a3;
  v57[1] = &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Module>::Key;
  v12 = (char *)sub_1C477672C((uint64_t)(a3 + 6), (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Module>::Key);
  v13 = (char *)a3[7];
  if (v13 == a3[6])
    v14 = (unsigned int *)a3 + 17;
  else
    v14 = (unsigned int *)(a3 + 8);
  v58 = v12 != &v13[8 * *v14];
  if ((sub_1C4DAA35C((uint64_t)v57) || sub_1C4DD6D80((uint64_t)v57))
    && (sub_1C618556C(a4, a2, (uint64_t)a3) & 1) == 0
    && !sub_1C6185670(a4, a2, (uint64_t)a3))
  {
    v47 = sub_1C4DDA07C((uint64_t)a3, (uint64_t)&llvm::AllAnalysesOn<llvm::LazyCallGraph::SCC>::SetKey);
    llvm::LazyCallGraph::buildRefSCCs(*(llvm::LazyCallGraph **)(a1 + 8));
    v16 = *(_QWORD *)(a1 + 8);
    sub_1C4DD89C0(v16);
    v46 = v16;
    v18 = *(unsigned int *)(v16 + 128);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD **)(v16 + 120);
      v20 = &v19[v18];
      do
      {
        while ((*v19 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
          if (++v19 == v20)
            goto LABEL_25;
        }
        if (*(_QWORD *)(*v19++ & 0xFFFFFFFFFFFFFFF8))
          v22 = 1;
        else
          v22 = v19 == v20;
      }
      while (!v22);
    }
LABEL_25:
    v55 = v16;
    v56 = v17;
    if (!v17)
      return 0;
    v49 = a2;
    while (1)
    {
      v23 = *(unsigned int *)(v17 + 16);
      if ((_DWORD)v23)
        break;
      do
      {
LABEL_75:
        sub_1C4DD8A20(&v55);
        v17 = v56;
      }
      while (v56 && !*(_DWORD *)(v56 + 16));
      if (!v56 && v55 == v46)
        return 0;
    }
    v24 = *(uint64_t **)(v17 + 8);
    v48 = &v24[v23];
    while (1)
    {
      v25 = *v24;
      LOBYTE(v50) = 0;
      v54 = 0;
      CachedResultImpl = llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getCachedResultImpl(*(_QWORD *)a1, (uint64_t)&llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Key, v25);
      if (CachedResultImpl)
        break;
LABEL_52:
      v43 = v47;
      if (v54)
        v43 = 0;
      if (!v43)
      {
        v44 = (const void **)(v54 ? &v50 : a3);
        llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::invalidate(*(_QWORD *)a1, v25, (uint64_t)v44);
        if (v54)
        {
          if (v53 != v52)
            free(v53);
          if (v51 != v50)
            free(v51);
        }
      }
      if (++v24 == v48)
        goto LABEL_75;
    }
    v27 = *(_DWORD *)(CachedResultImpl + 16);
    if (v27 > 1)
    {
      if ((v27 & 1) != 0)
      {
        v33 = (uint64_t *)(CachedResultImpl + 24);
        v31 = (uint64_t *)(CachedResultImpl + 56);
      }
      else
      {
        v33 = *(uint64_t **)(CachedResultImpl + 24);
        v45 = *(unsigned int *)(CachedResultImpl + 32);
        if (!(_DWORD)v45)
        {
          v34 = 0;
          v30 = *(uint64_t **)(CachedResultImpl + 24);
          v32 = v30;
          goto LABEL_37;
        }
        v31 = &v33[2 * v45];
      }
      v27 = *(_DWORD *)(CachedResultImpl + 16) & 1;
      v30 = v33;
      while ((*v30 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v30 += 2;
        if (v30 == v31)
        {
          v30 = v31;
          break;
        }
      }
    }
    else
    {
      if (v27)
      {
        v28 = CachedResultImpl + 24;
        v29 = 2;
      }
      else
      {
        v28 = *(_QWORD *)(CachedResultImpl + 24);
        v29 = *(unsigned int *)(CachedResultImpl + 32);
      }
      v30 = (uint64_t *)(v28 + 16 * v29);
      v31 = v30;
    }
    if (v27)
    {
      v32 = (uint64_t *)(CachedResultImpl + 24);
      v33 = v31;
      v34 = 2;
    }
    else
    {
      v32 = *(uint64_t **)(CachedResultImpl + 24);
      v34 = *(unsigned int *)(CachedResultImpl + 32);
      v33 = v31;
    }
LABEL_37:
    for (i = &v32[2 * v34]; v30 != i; a4 = v37)
    {
      v36 = v30 + 1;
      v37 = a4;
      if (llvm::AnalysisManager<llvm::Module>::Invalidator::invalidate(a4, *v30, v49, (uint64_t)a3))
      {
        if (!v54)
          sub_1C6185870((const void **)&v50, (const void **)a3);
        v38 = *v36;
        if ((*v36 & 4) != 0)
        {
          v40 = v38 & 0xFFFFFFFFFFFFFFF8;
          v36 = *(uint64_t **)v40;
          v39 = *(_QWORD *)v40 + 8 * *(unsigned int *)(v40 + 8);
        }
        else
        {
          v39 = (uint64_t)&v36[v38 > 7];
        }
        while (v36 != (uint64_t *)v39)
        {
          v41 = *v36++;
          sub_1C4DD7214((uint64_t)&v50, v41);
        }
      }
      v42 = v30 + 2;
      v30 = v33;
      if (v42 != v33)
      {
        v30 = v42;
        while ((*v30 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v30 += 2;
          if (v30 == v33)
          {
            v30 = v33;
            break;
          }
        }
      }
    }
    goto LABEL_52;
  }
  v15 = *(_QWORD *)a1;
  sub_1C4DD2B1C((unsigned int *)(*(_QWORD *)a1 + 48));
  sub_1C4DD2B70((_DWORD *)(v15 + 24));
  return 1;
}

_QWORD *sub_1C4DD7214(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1C477672C(a1, a2);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = 16;
  if (v5 == *(_QWORD *)a1)
    v6 = 20;
  if (v4 != (_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + v6)))
  {
    *v4 = -2;
    ++*(_DWORD *)(a1 + 24);
  }
  return sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 48), a2);
}

uint64_t llvm::FunctionAnalysisManagerCGSCCProxy::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ResultImpl;

  ResultImpl = llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a3, &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Key, a2, a4);
  llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(*(_QWORD *)(ResultImpl + 8), (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 8) + 40));
  return 0;
}

uint64_t llvm::FunctionAnalysisManagerCGSCCProxy::Result::invalidate(uint64_t *a1, uint64_t a2, void **a3, uint64_t *a4)
{
  char *v7;
  char *v8;
  unsigned int *v9;
  char *v10;
  char *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t CachedResultImpl;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  BOOL v32;
  const void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  BOOL v41;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  char v47;
  _QWORD v48[2];
  BOOL v49;

  if (*((_DWORD *)a3 + 17) != *((_DWORD *)a3 + 18)
    || ((v7 = (char *)sub_1C477672C((uint64_t)a3, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey),
         v8 = (char *)a3[1],
         v8 != *a3)
      ? (v9 = (unsigned int *)(a3 + 2))
      : (v9 = (unsigned int *)a3 + 5),
        v7 == &v8[8 * *v9]))
  {
    v48[0] = a3;
    v48[1] = &llvm::FunctionAnalysisManagerCGSCCProxy::Key;
    v10 = (char *)sub_1C477672C((uint64_t)(a3 + 6), (uint64_t)&llvm::FunctionAnalysisManagerCGSCCProxy::Key);
    v11 = (char *)a3[7];
    if (v11 == a3[6])
      v12 = (unsigned int *)a3 + 17;
    else
      v12 = (unsigned int *)(a3 + 8);
    v49 = v10 != &v11[8 * *v12];
    if (!sub_1C4DAA35C((uint64_t)v48) && !sub_1C61848F4((uint64_t)v48))
    {
      v35 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v35)
      {
        v36 = *(uint64_t **)(a2 + 8);
        v37 = 8 * v35;
        do
        {
          v38 = *v36++;
          llvm::AnalysisManager<llvm::Function>::invalidate(*a1, *(_QWORD *)(v38 + 8), (uint64_t)a3);
          v37 -= 8;
        }
        while (v37);
      }
      return 0;
    }
    v41 = sub_1C4DDA07C((uint64_t)a3, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
    v13 = *(unsigned int *)(a2 + 16);
    if (!(_DWORD)v13)
      return 0;
    v14 = *(_QWORD *)(a2 + 8);
    v40 = v14 + 8 * v13;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)v14 + 8);
      LOBYTE(v43) = 0;
      v47 = 0;
      CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(*a1, (uint64_t)&llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Function>::Key, v15);
      if (CachedResultImpl)
        break;
LABEL_35:
      v32 = v41;
      if (v47)
        v32 = 0;
      if (!v32)
      {
        v33 = (const void **)(v47 ? &v43 : a3);
        llvm::AnalysisManager<llvm::Function>::invalidate(*a1, v15, (uint64_t)v33);
        if (v47)
        {
          if (v46 != v45)
            free(v46);
          if (v44 != v43)
            free(v44);
        }
      }
      v14 += 8;
      if (v14 == v40)
        return 0;
    }
    v17 = *(_DWORD *)(CachedResultImpl + 16);
    if (v17 > 1)
    {
      if ((v17 & 1) != 0)
      {
        v23 = (uint64_t *)(CachedResultImpl + 24);
        v21 = (uint64_t *)(CachedResultImpl + 56);
      }
      else
      {
        v23 = *(uint64_t **)(CachedResultImpl + 24);
        v34 = *(unsigned int *)(CachedResultImpl + 32);
        if (!(_DWORD)v34)
        {
          v24 = 0;
          v20 = *(uint64_t **)(CachedResultImpl + 24);
          v22 = v20;
          goto LABEL_20;
        }
        v21 = &v23[2 * v34];
      }
      v17 = *(_DWORD *)(CachedResultImpl + 16) & 1;
      v20 = v23;
      while ((*v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v20 += 2;
        if (v20 == v21)
        {
          v20 = v21;
          break;
        }
      }
    }
    else
    {
      if (v17)
      {
        v18 = CachedResultImpl + 24;
        v19 = 2;
      }
      else
      {
        v18 = *(_QWORD *)(CachedResultImpl + 24);
        v19 = *(unsigned int *)(CachedResultImpl + 32);
      }
      v20 = (uint64_t *)(v18 + 16 * v19);
      v21 = v20;
    }
    if (v17)
    {
      v22 = (uint64_t *)(CachedResultImpl + 24);
      v23 = v21;
      v24 = 2;
    }
    else
    {
      v22 = *(uint64_t **)(CachedResultImpl + 24);
      v24 = *(unsigned int *)(CachedResultImpl + 32);
      v23 = v21;
    }
LABEL_20:
    v25 = &v22[2 * v24];
LABEL_21:
    while (v20 != v25)
    {
      v26 = v20 + 1;
      if (llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Invalidator::invalidate(a4, *v20, a2, (uint64_t)a3))
      {
        if (!v47)
          sub_1C6185870((const void **)&v43, (const void **)a3);
        v27 = *v26;
        if ((*v26 & 4) != 0)
        {
          v29 = v27 & 0xFFFFFFFFFFFFFFF8;
          v26 = *(uint64_t **)v29;
          v28 = *(_QWORD *)v29 + 8 * *(unsigned int *)(v29 + 8);
        }
        else
        {
          v28 = (uint64_t)&v26[v27 > 7];
        }
        while (v26 != (uint64_t *)v28)
        {
          v30 = *v26++;
          sub_1C4DD7214((uint64_t)&v43, v30);
        }
      }
      v31 = v20 + 2;
      v20 = v23;
      if (v31 != v23)
      {
        v20 = v31;
        while ((*v20 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v20 += 2;
          if (v20 == v23)
          {
            v20 = v23;
            goto LABEL_21;
          }
        }
      }
    }
    goto LABEL_35;
  }
  return 0;
}

llvm::LazyCallGraph::RefSCC **llvm::updateCGAndAnalysisManagerForCGSCCPass(uint64_t a1, llvm::LazyCallGraph::RefSCC **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  llvm::LazyCallGraph::RefSCC *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ***v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  _QWORD *v28;
  _QWORD ***v29;
  _QWORD *v30;
  int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v41;
  unint64_t v42;
  unint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v53;
  unint64_t v54;
  char v55;
  BOOL v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  llvm::SmallPtrSetImplBase *v63;
  int32x2_t *v64;
  unint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  int32x2_t *v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  int v84;
  _QWORD *v85;
  unint64_t v86;
  llvm::SmallPtrSetImplBase *v87;
  unint64_t v88;
  unint64_t v89;
  int32x2_t ****v90;
  int32x2_t *v91;
  unint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  int32x2_t *****v96;
  int32x2_t ****v97;
  int v98;
  int v99;
  int32x2_t *v101;
  unint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  llvm::SmallPtrSetImplBase **v106;
  llvm::SmallPtrSetImplBase *v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  llvm::LazyCallGraph::Node **v123;
  uint64_t v124;
  llvm::LazyCallGraph::Node *v125;
  llvm::LazyCallGraph::Node **v126;
  uint64_t v127;
  llvm::LazyCallGraph::Node *v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t *v134;
  uint64_t v135;
  _BYTE *v136;
  uint64_t **v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  char *v144;
  uint64_t *v145;
  llvm::LazyCallGraph::RefSCC **v146;
  llvm::LazyCallGraph::Node *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  llvm::LazyCallGraph::Node **v161;
  uint64_t v162;
  llvm::LazyCallGraph::Node *v163;
  llvm::LazyCallGraph::RefSCC **v164;
  uint64_t v165;
  unint64_t *v166;
  uint64_t v167;
  unint64_t v168;
  char **v169;
  char **v170;
  uint64_t *v171;
  uint64_t v172;
  char *v173;
  llvm::LazyCallGraph::RefSCC **v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  llvm::LazyCallGraph::RefSCC **v186;
  uint64_t v188;
  uint64_t v190;
  char **v192;
  uint64_t v195;
  uint64_t *v196;
  uint64_t *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int32x2_t ****v201;
  _BYTE v202[16];
  _BYTE *v203;
  _BYTE *v204;
  uint64_t v205;
  int v206;
  _BYTE v207[16];
  uint64_t v208;
  _QWORD *v209;
  llvm::SmallPtrSetImplBase *v210;
  uint64_t *v211;
  uint64_t *v212;
  char *v213;
  char *v214;
  uint64_t v215;
  int v216;
  _BYTE v217[128];
  char *v218;
  char *v219;
  uint64_t v220;
  int v221;
  _BYTE v222[128];
  llvm::LazyCallGraph::RefSCC **v223;
  uint64_t v224;
  void *v225;
  unsigned int v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int64x2_t v233;
  int64x2_t v234;
  void *v235;
  uint64_t v236;
  _BYTE v237[32];
  uint64_t v238;
  int64x2_t v239;
  int64x2_t v240;
  void *v241;
  uint64_t v242;
  _BYTE v243[32];
  uint64_t v244;
  int64x2_t v245;
  int64x2_t v246;
  void *v247;
  uint64_t v248;
  _BYTE v249[32];
  uint64_t v250;
  int64x2_t v251;
  int64x2_t v252;
  void *v253;
  uint64_t v254;
  _BYTE v255[32];
  void *v256;
  uint64_t v257;
  _QWORD v258[18];

  v8 = a1;
  v258[16] = *MEMORY[0x1E0C80C00];
  v9 = *a2;
  v223 = a2;
  v10 = *(_QWORD *)(a3 + 8);
  v256 = v258;
  v257 = 0x1000000000;
  v218 = v222;
  v219 = v222;
  v220 = 16;
  v221 = 0;
  v213 = v217;
  v214 = v217;
  v215 = 16;
  v216 = 0;
  v250 = 1;
  v251 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v252 = v251;
  v253 = v255;
  v254 = 0x400000000;
  v244 = 1;
  v245 = v251;
  v246 = v251;
  v247 = v249;
  v248 = 0x400000000;
  v238 = 1;
  v239 = v251;
  v240 = v251;
  v241 = v243;
  v242 = 0x400000000;
  v232 = 1;
  v233 = v251;
  v234 = v251;
  v235 = v237;
  v236 = 0x400000000;
  v11 = v10 + 72;
  i = *(_QWORD *)(v10 + 80);
  if (i == v10 + 72)
    goto LABEL_199;
  v188 = v10;
  v13 = i - 24;
  if (!i)
    v13 = 0;
  v14 = *(_QWORD *)(v13 + 48);
  if (v14 == v13 + 40)
  {
    v15 = *(_QWORD *)(v10 + 80);
    do
    {
      v15 = *(_QWORD *)(v15 + 8);
      if (v15 == v11)
        goto LABEL_169;
      v16 = v15 - 24;
      if (!v15)
        v16 = 0;
      v14 = *(_QWORD *)(v16 + 48);
    }
    while (v14 == v16 + 40);
  }
  else
  {
    v15 = *(_QWORD *)(v10 + 80);
  }
  v190 = a5 + 144;
  v195 = a3 + 24;
  v197 = (uint64_t *)(a1 + 96);
  while (1)
  {
    v17 = (uint64_t ***)(v14 - 24);
    if (v14)
      v18 = v14 - 24;
    else
      v18 = 0;
    v19 = *(unsigned __int8 *)(v18 + 16) - 33;
    v118 = v19 > 0x33;
    v20 = (1 << v19) & 0x8000000000041;
    if (v118 || v20 == 0)
      goto LABEL_91;
    v228 = &v230;
    v229 = 0x100000000;
    v22 = *(_QWORD *)(v14 - 56);
    if (v22 && !*(_BYTE *)(v22 + 16) && *(_QWORD *)(v22 + 24) == *(_QWORD *)(v14 + 48))
    {
      v230 = *(_QWORD *)(v14 - 56);
      LODWORD(v229) = 1;
      v50 = &v231;
      v51 = &v230;
      goto LABEL_75;
    }
    if ((*(_BYTE *)(v14 - 1) & 0x20) == 0)
      goto LABEL_37;
    v23 = ***v17;
    v198 = v14 - 24;
    v24 = *(_DWORD *)(v23 + 2496);
    if (!v24)
    {
      v85 = 0;
LABEL_125:
      v28 = sub_1C541AB24(v23 + 2480, (uint64_t)&v198, (uint64_t *)&v198, v85);
      v86 = v198;
      v28[4] = 0;
      v28[3] = 0;
      *v28 = v86;
      v28[1] = v28 + 3;
      v28[2] = 0x100000000;
      goto LABEL_33;
    }
    v25 = *(_QWORD *)(v23 + 2480);
    v26 = v24 - 1;
    v27 = v26 & ((v17 >> 4) ^ (v17 >> 9));
    v28 = (_QWORD *)(v25 + 40 * v27);
    v29 = (_QWORD ***)*v28;
    if ((uint64_t ***)*v28 != v17)
    {
      v30 = 0;
      v31 = 1;
      while (v29 != (_QWORD ***)-4096)
      {
        if (v30)
          v32 = 0;
        else
          v32 = v29 == (_QWORD ***)-8192;
        if (v32)
          v30 = v28;
        v33 = v27 + v31++;
        v27 = v33 & v26;
        v28 = (_QWORD *)(v25 + 40 * v27);
        v29 = (_QWORD ***)*v28;
        if ((uint64_t ***)*v28 == v17)
          goto LABEL_33;
      }
      if (v30)
        v85 = v30;
      else
        v85 = v28;
      goto LABEL_125;
    }
LABEL_33:
    v34 = *((unsigned int *)v28 + 4);
    if ((_DWORD)v34)
    {
      v35 = (_QWORD *)(v28[1] + 8);
      v36 = 16 * v34;
      while (*((_DWORD *)v35 - 2) != 23)
      {
        v35 += 2;
        v36 -= 16;
        if (!v36)
          goto LABEL_37;
      }
      v44 = *v35;
      if (*v35)
      {
        v45 = *(unsigned int *)(v44 + 8);
        if ((_DWORD)v45)
        {
          v46 = -8 * v45;
          do
          {
            v47 = *(_QWORD *)(v44 + v46);
            if (v47)
            {
              v48 = *(_QWORD *)(v47 + 128);
              if (v48)
              {
                v49 = v229;
                if (v229 >= (unint64_t)HIDWORD(v229))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v228, (uint64_t)&v230, v229 + 1, 8);
                  v49 = v229;
                }
                *((_QWORD *)v228 + v49) = v48;
                LODWORD(v229) = v229 + 1;
              }
            }
            v46 += 8;
          }
          while (v46);
        }
        goto LABEL_70;
      }
    }
LABEL_37:
    v37 = sub_1C6184F20(v190, v14 - 24);
    if (v37 == *(_QWORD *)(a5 + 408) + 32 * *(unsigned int *)(a5 + 416))
    {
      v208 = 6;
      v209 = 0;
      v210 = (llvm::SmallPtrSetImplBase *)(v14 - 24);
      if (v14 == -8168 || v14 == -4072)
      {
        v87 = (llvm::SmallPtrSetImplBase *)(v14 - 24);
      }
      else
      {
        v87 = (llvm::SmallPtrSetImplBase *)(v14 - 24);
        if (v14 != 24)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v208);
          v87 = v210;
        }
      }
      v198 = v14 - 24;
      v199 = 6;
      v200 = 0;
      v201 = (int32x2_t ****)v87;
      if (v87 != (llvm::SmallPtrSetImplBase *)-8192 && v87 != (llvm::SmallPtrSetImplBase *)-4096)
      {
        if (v87)
        {
          v88 = v208 & 0xFFFFFFFFFFFFFFF8;
          v200 = *(_QWORD *)(v208 & 0xFFFFFFFFFFFFFFF8);
          *(_QWORD *)v88 = &v199;
          v199 = v88 | 6;
          if (v200)
            *(_QWORD *)v200 = *(_QWORD *)v200 & 7 | (unint64_t)&v200;
        }
      }
      sub_1C6184AB0(v190, (char *)&v198);
      if (v201 != (int32x2_t ****)-8192 && v201 != (int32x2_t ****)-4096 && v201)
      {
        v89 = v199 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v199 & 0xFFFFFFFFFFFFFFF8) = v200;
        if (v200)
        {
          *(_QWORD *)v200 = *(_QWORD *)v200 & 7 | v89;
        }
        else
        {
          v90 = v201;
          v91 = ***v201;
          v92 = (unint64_t)v91[303];
          if (v92 <= v89)
          {
            v93 = v91[305].u32[0];
            if (v92 + 16 * v93 > v89)
            {
              v94 = v93 - 1;
              LODWORD(v95) = v94 & ((v201 >> 4) ^ (v201 >> 9));
              v96 = (int32x2_t *****)(v92 + 16 * v95);
              v97 = *v96;
              if (v201 == *v96)
              {
LABEL_147:
                *v96 = (int32x2_t ****)-8192;
                v91[304] = vadd_s32(v91[304], (int32x2_t)0x1FFFFFFFFLL);
                v90 = v201;
              }
              else
              {
                v98 = 1;
                while (v97 != (int32x2_t ****)-4096)
                {
                  v99 = v95 + v98++;
                  v95 = v99 & v94;
                  v97 = *(int32x2_t *****)(v92 + 16 * v95);
                  if (v201 == v97)
                  {
                    v96 = (int32x2_t *****)(v92 + 16 * v95);
                    goto LABEL_147;
                  }
                }
              }
              *((_BYTE *)v90 + 17) &= ~1u;
            }
          }
        }
      }
      if (v210 == (llvm::SmallPtrSetImplBase *)-8192)
        goto LABEL_70;
      if (v210 == (llvm::SmallPtrSetImplBase *)-4096 || v210 == 0)
        goto LABEL_70;
      v61 = v208 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v208 & 0xFFFFFFFFFFFFFFF8) = v209;
      v62 = v209;
      if (v209)
        goto LABEL_166;
      v63 = v210;
      v101 = ***(int32x2_t ****)v210;
      v102 = (unint64_t)v101[303];
      if (v102 > v61)
        goto LABEL_70;
      v103 = v101[305].u32[0];
      if (v102 + 16 * v103 <= v61)
        goto LABEL_70;
      v104 = v103 - 1;
      LODWORD(v105) = v104 & ((v210 >> 4) ^ (v210 >> 9));
      v106 = (llvm::SmallPtrSetImplBase **)(v102 + 16 * v105);
      v107 = *v106;
      if (v210 == *v106)
      {
LABEL_165:
        *v106 = (llvm::SmallPtrSetImplBase *)-8192;
        v101[304] = vadd_s32(v101[304], (int32x2_t)0x1FFFFFFFFLL);
        v63 = v210;
      }
      else
      {
        v108 = 1;
        while (v107 != (llvm::SmallPtrSetImplBase *)-4096)
        {
          v109 = v105 + v108++;
          v105 = v109 & v104;
          v107 = *(llvm::SmallPtrSetImplBase **)(v102 + 16 * v105);
          if (v210 == v107)
          {
            v106 = (llvm::SmallPtrSetImplBase **)(v102 + 16 * v105);
            goto LABEL_165;
          }
        }
      }
    }
    else
    {
      v38 = (_QWORD *)v37;
      v39 = *(_QWORD *)(v37 + 24);
      if (v39)
        goto LABEL_70;
      v198 = 6;
      v199 = 0;
      v200 = v14 - 24;
      if (v14 == -8168
        || v14 == -4072
        || v14 == 24
        || (llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v198),
            v39 = v38[3],
            v17 = (uint64_t ***)v200,
            v39 != v200))
      {
        if (v39 != -4096 && v39 && v39 != -8192)
        {
          v73 = v38[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v73 = v38[2];
          v74 = (unint64_t *)v38[2];
          if (v74)
          {
            *v74 = *v74 & 7 | v73;
          }
          else
          {
            v75 = v38[3];
            v76 = ***(int32x2_t ****)v75;
            v77 = (unint64_t)v76[303];
            if (v77 <= v73)
            {
              v78 = v76[305].u32[0];
              if (v77 + 16 * v78 > v73)
              {
                v79 = v78 - 1;
                LODWORD(v80) = v79 & ((v75 >> 4) ^ (v75 >> 9));
                v81 = (uint64_t *)(v77 + 16 * v80);
                v82 = *v81;
                if (v75 == *v81)
                {
LABEL_120:
                  *v81 = -8192;
                  v76[304] = vadd_s32(v76[304], (int32x2_t)0x1FFFFFFFFLL);
                  v75 = v38[3];
                }
                else
                {
                  v83 = 1;
                  while (v82 != -4096)
                  {
                    v84 = v80 + v83++;
                    v80 = v84 & v79;
                    v82 = *(_QWORD *)(v77 + 16 * v80);
                    if (v75 == v82)
                    {
                      v81 = (uint64_t *)(v77 + 16 * v80);
                      goto LABEL_120;
                    }
                  }
                }
                *(_BYTE *)(v75 + 17) &= ~1u;
              }
            }
          }
          v17 = (uint64_t ***)v200;
        }
        v38[3] = v17;
        if (v17 != (uint64_t ***)-4096 && v17 != (uint64_t ***)-8192 && v17 != 0)
        {
          v41 = v38 + 1;
          v42 = v198 & 0xFFFFFFFFFFFFFFF8;
          v38[2] = *(_QWORD *)(v198 & 0xFFFFFFFFFFFFFFF8);
          v43 = (unint64_t **)(v38 + 2);
          *(_QWORD *)v42 = v41;
          *(v43 - 1) = (unint64_t *)(v42 | (unint64_t)*(v43 - 1) & 7);
          if (*v43)
            **v43 = **v43 & 7 | (unint64_t)v43;
          v17 = (uint64_t ***)v200;
        }
      }
      else
      {
        v17 = (uint64_t ***)v38[3];
      }
      if (v17 == (uint64_t ***)-8192)
        goto LABEL_70;
      if (v17 == (uint64_t ***)-4096 || v17 == 0)
        goto LABEL_70;
      v61 = v198 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v198 & 0xFFFFFFFFFFFFFFF8) = v199;
      v62 = (_QWORD *)v199;
      if (v199)
      {
LABEL_166:
        *v62 = *v62 & 7 | v61;
        goto LABEL_70;
      }
      v63 = (llvm::SmallPtrSetImplBase *)v200;
      v64 = ***(int32x2_t ****)v200;
      v65 = (unint64_t)v64[303];
      if (v65 > v61)
        goto LABEL_70;
      v66 = v64[305].u32[0];
      if (v65 + 16 * v66 <= v61)
        goto LABEL_70;
      v67 = v66 - 1;
      LODWORD(v68) = v67 & ((v200 >> 4) ^ (v200 >> 9));
      v69 = (uint64_t *)(v65 + 16 * v68);
      v70 = *v69;
      if (v200 == *v69)
      {
LABEL_108:
        *v69 = -8192;
        v64[304] = vadd_s32(v64[304], (int32x2_t)0x1FFFFFFFFLL);
        v63 = (llvm::SmallPtrSetImplBase *)v200;
      }
      else
      {
        v71 = 1;
        while (v70 != -4096)
        {
          v72 = v68 + v71++;
          v68 = v72 & v67;
          v70 = *(_QWORD *)(v65 + 16 * v68);
          if (v200 == v70)
          {
            v69 = (uint64_t *)(v65 + 16 * v68);
            goto LABEL_108;
          }
        }
      }
    }
    *((_BYTE *)v63 + 17) &= ~1u;
LABEL_70:
    v51 = (uint64_t *)v228;
    if ((_DWORD)v229)
    {
      v50 = (uint64_t *)((char *)v228 + 8 * v229);
      while (1)
      {
LABEL_75:
        v54 = *v51;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v218, *v51);
        if (v55)
        {
          if (v54)
            v56 = *(_BYTE *)(v54 + 16) == 3;
          else
            v56 = 0;
          if (v56)
          {
            if ((*(_DWORD *)(v54 + 20) & 0x7FFFFFF) == 0)
              goto LABEL_87;
          }
          else if (!*(_BYTE *)(v54 + 16) && *(_QWORD *)(v54 + 72) == v54 + 72 && (*(_BYTE *)(v54 + 34) & 0x80) == 0)
          {
            goto LABEL_87;
          }
          v198 = v54;
          v208 = 0;
          sub_1C4850EC8(v197, &v198, &v208);
          v57 = *(_QWORD *)(v208 + 8);
          v198 = v57;
          v58 = (_BYTE *)sub_1C4DD8F24(v195, v57);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v213, v57);
          if (v58)
          {
            if ((*v58 & 4) != 0)
              goto LABEL_87;
            v53 = &v250;
          }
          else
          {
            v53 = &v238;
          }
          sub_1C6184F7C((uint64_t)v53, (uint64_t *)&v198);
        }
LABEL_87:
        if (++v51 == v50)
        {
          v51 = (uint64_t *)v228;
          break;
        }
      }
    }
    v8 = a1;
    if (v51 != &v230)
      free(v51);
LABEL_91:
    v14 = *(_QWORD *)(v14 + 8);
    v59 = v15 - 24;
    if (!v15)
      v59 = 0;
    if (v14 == v59 + 40)
      break;
LABEL_98:
    if (v15 == v11)
      goto LABEL_168;
  }
  while (1)
  {
    v15 = *(_QWORD *)(v15 + 8);
    if (v15 == v11)
      break;
    v60 = v15 - 24;
    if (!v15)
      v60 = 0;
    v14 = *(_QWORD *)(v60 + 48);
    if (v14 != v60 + 40)
      goto LABEL_98;
  }
LABEL_168:
  for (i = *(_QWORD *)(v188 + 80); ; i = *(_QWORD *)(i + 8))
  {
LABEL_169:
    if (i == v11)
      goto LABEL_199;
    v110 = i - 24;
    if (!i)
      v110 = 0;
    v111 = *(_QWORD *)(v110 + 48);
    if (v111 != v110 + 40)
      break;
  }
  while (2)
  {
    if (v111)
      v112 = v111 - 24;
    else
      v112 = 0;
    v113 = *(_DWORD *)(v112 + 20);
    if ((v113 & 0x40000000) != 0)
    {
      v115 = *(uint64_t **)(v112 - 8);
      v114 = v113 & 0x7FFFFFF;
      if (!v114)
        goto LABEL_191;
    }
    else
    {
      v114 = v113 & 0x7FFFFFF;
      v115 = (uint64_t *)(v112 - 32 * v114);
      if (!v114)
        goto LABEL_191;
    }
    v116 = 32 * v114;
    do
    {
      v117 = *v115;
      if (*v115)
        v118 = *(unsigned __int8 *)(*v115 + 16) > 0x14u;
      else
        v118 = 1;
      if (!v118)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v218, *v115);
        if (v119)
        {
          v120 = v257;
          if (v257 >= (unint64_t)HIDWORD(v257))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v256, (uint64_t)v258, v257 + 1, 8);
            v120 = v257;
          }
          *((_QWORD *)v256 + v120) = v117;
          LODWORD(v257) = v257 + 1;
        }
      }
      v115 += 4;
      v116 -= 32;
    }
    while (v116);
LABEL_191:
    v111 = *(_QWORD *)(v111 + 8);
    v121 = i - 24;
    if (!i)
      v121 = 0;
    if (v111 != v121 + 40)
    {
LABEL_198:
      if (i == v11)
        goto LABEL_199;
      continue;
    }
    break;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if (i == v11)
      break;
    v122 = i - 24;
    if (!i)
      v122 = 0;
    v111 = *(_QWORD *)(v122 + 48);
    if (v111 != v122 + 40)
      goto LABEL_198;
  }
LABEL_199:
  v208 = v8;
  v209 = (_QWORD *)a3;
  v210 = (llvm::SmallPtrSetImplBase *)&v213;
  v211 = &v232;
  v212 = &v244;
  llvm::LazyCallGraph::visitReferences(&v256, (llvm::SmallPtrSetImplBase *)&v218, (uint64_t (*)(uint64_t))sub_1C4DD9134, (uint64_t)&v208);
  if ((_DWORD)v236)
  {
    v123 = (llvm::LazyCallGraph::Node **)v235;
    v124 = 8 * v236;
    do
    {
      v125 = *v123++;
      v198 = (unint64_t)v125;
      v228 = 0;
      sub_1C4DD8A9C((uint64_t *)(v8 + 288), &v198, &v228);
      llvm::LazyCallGraph::RefSCC::insertTrivialRefEdge(v9, (llvm::LazyCallGraph::Node *)a3, v125);
      v124 -= 8;
    }
    while (v124);
  }
  if ((_DWORD)v242)
  {
    v126 = (llvm::LazyCallGraph::Node **)v241;
    v127 = 8 * v242;
    do
    {
      v128 = *v126++;
      v198 = (unint64_t)v128;
      v228 = 0;
      sub_1C4DD8A9C((uint64_t *)(v8 + 288), &v198, &v228);
      llvm::LazyCallGraph::RefSCC::insertTrivialRefEdge(v9, (llvm::LazyCallGraph::Node *)a3, v128);
      v127 -= 8;
    }
    while (v127);
  }
  v129 = *(unsigned int *)(v8 + 624);
  if ((_DWORD)v129)
  {
    v130 = *(uint64_t **)(a1 + 616);
    v131 = 8 * v129;
    do
    {
      v132 = *v130;
      v133 = (char *)sub_1C477672C((uint64_t)&v218, *v130);
      if (v219 == v218)
        v134 = (uint64_t *)((char *)&v220 + 4);
      else
        v134 = &v220;
      if (v133 == &v219[8 * *(unsigned int *)v134])
      {
        v198 = v132;
        v228 = 0;
        sub_1C4850EC8((uint64_t *)(v208 + 96), &v198, &v228);
        v135 = *((_QWORD *)v228 + 1);
        v198 = v135;
        v136 = (_BYTE *)sub_1C4DD8F24((uint64_t)(v209 + 3), v135);
        sub_1C4774094(v210, v135);
        v137 = &v211;
        if (!v136 || (v137 = &v212, (*v136 & 4) != 0))
          sub_1C6184F7C((uint64_t)*v137, (uint64_t *)&v198);
      }
      ++v130;
      v131 -= 8;
    }
    while (v131);
  }
  v228 = &v230;
  v229 = 0x400000000;
  v138 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v138)
  {
    v139 = 8 * v138;
    v140 = *(uint64_t **)(a3 + 24);
    while ((*v140 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_QWORD *)(*v140 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v140;
      v139 -= 8;
      if (!v139)
        goto LABEL_242;
    }
  }
  else
  {
    v140 = *(uint64_t **)(a3 + 24);
  }
  v141 = *(_QWORD *)(a3 + 24) + 8 * v138;
  if (v140 == (uint64_t *)v141)
  {
LABEL_242:
    v151 = &v230;
  }
  else
  {
    v142 = (uint64_t *)(a1 + 288);
    v143 = *v140;
LABEL_225:
    v144 = (char *)sub_1C477672C((uint64_t)&v213, v143 & 0xFFFFFFFFFFFFFFF8);
    if (v214 == v213)
      v145 = (uint64_t *)((char *)&v215 + 4);
    else
      v145 = &v215;
    if (v144 == &v214[8 * *(unsigned int *)v145])
    {
      v198 = *v140 & 0xFFFFFFFFFFFFFFF8;
      v225 = 0;
      sub_1C4DD8A9C(v142, &v198, &v225);
      v146 = (llvm::LazyCallGraph::RefSCC **)*((_QWORD *)v225 + 1);
      if (*v146 == v9 && (*v140 & 4) != 0)
      {
        v147 = (llvm::LazyCallGraph::Node *)(*v140 & 0xFFFFFFFFFFFFFFF8);
        if (v223 == v146)
        {
          v198 = llvm::LazyCallGraph::RefSCC::switchInternalEdgeToRef(v9, (llvm::LazyCallGraph::Node *)a3, v147);
          v199 = v148;
          v223 = (llvm::LazyCallGraph::RefSCC **)sub_1C4DD8FAC((uint64_t)&v198, a1, (uint64_t)v223, a4, a5);
        }
        else
        {
          llvm::LazyCallGraph::RefSCC::switchTrivialInternalEdgeToRef(v9, (llvm::LazyCallGraph::Node *)a3, v147);
        }
      }
      v149 = *v140;
      v150 = v229;
      if (v229 >= (unint64_t)HIDWORD(v229))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v228, (uint64_t)&v230, v229 + 1, 8);
        v150 = v229;
      }
      *((_QWORD *)v228 + v150) = v149 & 0xFFFFFFFFFFFFFFF8;
      LODWORD(v229) = v229 + 1;
    }
    while (++v140 != (uint64_t *)v141)
    {
      v143 = *v140;
      if ((*v140 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_QWORD *)(*v140 & 0xFFFFFFFFFFFFFFF8))
      {
        if (v140 != (uint64_t *)v141)
          goto LABEL_225;
        break;
      }
    }
    v152 = (uint64_t *)v228;
    if (!(_DWORD)v229)
      goto LABEL_255;
    v151 = (uint64_t *)((char *)v228 + 8 * v229);
    v153 = 8 * v229 - 8;
    do
    {
      v154 = *v152;
      v198 = *v152;
      v225 = 0;
      sub_1C4DD8A9C(v142, &v198, &v225);
      if (**((llvm::LazyCallGraph::RefSCC ***)v225 + 1) != v9)
        break;
      ++v152;
      v153 -= 8;
    }
    while (v152 != v151);
    llvm::LazyCallGraph::EdgeSequence::removeEdgeInternal(a3 + 24, v154);
    if (v152 + 1 == v151)
    {
LABEL_255:
      v151 = v152;
    }
    else
    {
      v155 = 1;
      v151 = v152;
      do
      {
        v156 = v152[v155];
        v198 = v156;
        v225 = 0;
        sub_1C4DD8A9C(v142, &v198, &v225);
        if (**((llvm::LazyCallGraph::RefSCC ***)v225 + 1) == v9)
          *v151++ = v152[v155];
        else
          llvm::LazyCallGraph::EdgeSequence::removeEdgeInternal(a3 + 24, v156);
        ++v155;
        v153 -= 8;
      }
      while (v153);
    }
  }
  LODWORD(v229) = (unint64_t)((char *)v151 - (_BYTE *)v228) >> 3;
  llvm::LazyCallGraph::RefSCC::removeInternalRefEdge((uint64_t *)v9, (void *)a3, (void **)v228, v229, (uint64_t)&v225);
  if (v226)
  {
    sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(a5 + 16), (uint64_t)v9);
    v9 = *v223;
    v157 = a4;
    v158 = a1;
    if (v226 != 1)
    {
      v159 = (char *)v225;
      v160 = 8 * v226 - 8;
      do
      {
        v198 = *(_QWORD *)&v159[v160];
        sub_1C4DD53DC(*(_QWORD *)a5, (uint64_t *)&v198);
        v160 -= 8;
      }
      while (v160);
    }
  }
  else
  {
    v157 = a4;
    v158 = a1;
  }
  if ((_DWORD)v248)
  {
    v161 = (llvm::LazyCallGraph::Node **)v247;
    v162 = 8 * v248;
    do
    {
      v163 = *v161;
      v198 = (unint64_t)*v161;
      v224 = 0;
      sub_1C4DD8A9C((uint64_t *)(v158 + 288), &v198, &v224);
      v164 = *(llvm::LazyCallGraph::RefSCC ***)(v224 + 8);
      if (*v164 == v9)
      {
        if (v223 == v164)
        {
          v198 = llvm::LazyCallGraph::RefSCC::switchInternalEdgeToRef(v9, (llvm::LazyCallGraph::Node *)a3, v163);
          v199 = v165;
          v223 = (llvm::LazyCallGraph::RefSCC **)sub_1C4DD8FAC((uint64_t)&v198, v158, (uint64_t)v223, v157, a5);
        }
        else
        {
          llvm::LazyCallGraph::RefSCC::switchTrivialInternalEdgeToRef(v9, (llvm::LazyCallGraph::Node *)a3, v163);
        }
      }
      else
      {
        llvm::LazyCallGraph::RefSCC::switchOutgoingEdgeToRef(v9, (llvm::LazyCallGraph::Node *)a3, v163);
      }
      ++v161;
      v162 -= 8;
    }
    while (v162);
  }
  if ((_DWORD)v242)
  {
    v166 = (unint64_t *)v241;
    v167 = 8 * v242;
    do
    {
      v168 = *v166++;
      v198 = v168;
      sub_1C6184F7C((uint64_t)&v250, (uint64_t *)&v198);
      v167 -= 8;
    }
    while (v167);
  }
  if ((_DWORD)v254)
  {
    v169 = (char **)v253;
    v170 = (char **)((char *)v253 + 8 * v254);
    v171 = (uint64_t *)(v158 + 288);
    v172 = (uint64_t)v9 + 56;
    v196 = (uint64_t *)(v158 + 288);
    v192 = v170;
    do
    {
      v173 = *v169;
      v198 = (unint64_t)*v169;
      v224 = 0;
      v174 = 0;
      if (sub_1C4DD8A9C(v171, &v198, &v224))
        v174 = *(llvm::LazyCallGraph::RefSCC ***)(v224 + 8);
      if (*v174 == v9)
      {
        LOBYTE(v224) = 0;
        v175 = *((_QWORD *)v9 + 1);
        v176 = v172;
        v177 = *(int *)(sub_1C61851D4(v172, (uint64_t)v223) + 8);
        v178 = *((_QWORD *)v9 + 1);
        v198 = (unint64_t)&v224;
        v199 = a4;
        v200 = a5;
        if (llvm::LazyCallGraph::RefSCC::switchInternalEdgeToCall((uint64_t)v9, a3, v173, sub_1C4DD9420, (uint64_t)&v198))
        {
          v223 = v174;
          if ((_BYTE)v224)
            *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a4, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, (uint64_t)v174, a1)+ 8) = a6;
          v198 = (unint64_t)v202;
          v199 = (uint64_t)v202;
          v200 = 2;
          LODWORD(v201) = 0;
          v203 = v207;
          v204 = v207;
          v205 = 2;
          v206 = 0;
          sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)&v198, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
          sub_1C4DDB144((uint64_t)&v198, (uint64_t)&llvm::FunctionAnalysisManagerCGSCCProxy::Key);
          llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::invalidate(a4, (uint64_t)v223, (uint64_t)&v198);
          if (v204 != v203)
            free(v204);
          if (v199 != v198)
            free((void *)v199);
        }
        v179 = (v175 + 8 * v177 - v178) >> 3;
        v172 = v176;
        v180 = 8 * *(int *)(sub_1C61851D4(v176, (uint64_t)v223) + 8);
        if (v179 < v180 >> 3)
        {
          v181 = v180 >> 3;
          sub_1C4DD5568(*(_QWORD *)(a5 + 8), (uint64_t *)&v223);
          v182 = 8 * v179 - 8 * v181;
          v183 = (unint64_t *)(*((_QWORD *)v9 + 1) + 8 * v181 - 8);
          do
          {
            v184 = *v183--;
            v185 = *(_QWORD *)(a5 + 8);
            v198 = v184;
            sub_1C4DD5568(v185, (uint64_t *)&v198);
            v182 += 8;
          }
          while (v182);
        }
        v170 = v192;
        v171 = v196;
      }
      else
      {
        llvm::LazyCallGraph::RefSCC::switchOutgoingEdgeToCall(v9, (llvm::LazyCallGraph::Node *)a3, (llvm::LazyCallGraph::Node *)v173);
      }
      ++v169;
    }
    while (v169 != v170);
  }
  v186 = v223;
  if (v223 != a2)
    *(_QWORD *)(a5 + 32) = v223;
  if (v225 != &v227)
    free(v225);
  if (v228 != &v230)
    free(v228);
  if (v235 != v237)
    free(v235);
  if ((v232 & 1) == 0)
    MEMORY[0x1CAA32FB4](v233.i64[0], 8);
  if (v241 != v243)
    free(v241);
  if ((v238 & 1) == 0)
    MEMORY[0x1CAA32FB4](v239.i64[0], 8);
  if (v247 != v249)
    free(v247);
  if ((v244 & 1) == 0)
    MEMORY[0x1CAA32FB4](v245.i64[0], 8);
  if (v253 != v255)
    free(v253);
  if ((v250 & 1) == 0)
    MEMORY[0x1CAA32FB4](v251.i64[0], 8);
  if (v214 != v213)
    free(v214);
  if (v219 != v218)
    free(v219);
  if (v256 != v258)
    free(v256);
  return v186;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1C4DD89C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(a1 + 416))
  {
    v1 = **(_QWORD **)(a1 + 408);
    v3 = v1;
    if (v1)
    {
      if (!*(_DWORD *)(v1 + 16))
      {
        do
          sub_1C4DD8A20(&v2);
        while (v3 && !*(_DWORD *)(v3 + 16));
      }
    }
  }
}

uint64_t sub_1C4DD8A20(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1;
  v2 = a1[1];
  v4 = (uint64_t *)(*a1 + 552);
  v9 = v2;
  v10 = 0;
  result = sub_1C4DD8A9C(v4, &v9, &v10);
  if ((result & 1) != 0)
    v6 = v10;
  else
    v6 = *(_QWORD *)(v3 + 552) + 16 * *(unsigned int *)(v3 + 568);
  v7 = *(int *)(v6 + 8) + 1;
  if (*(_DWORD *)(v3 + 416) == (_DWORD)v7)
    v8 = 0;
  else
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 408) + 8 * v7);
  a1[1] = v8;
  return result;
}

uint64_t sub_1C4DD8A9C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4DD8B38(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4DD8BE4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C4DD8B38((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_1C4DD8CA4(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  char *v10;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = v5 + 32 * v4;
    if (v5 <= (unint64_t)a2 && v8 > (unint64_t)a2)
    {
      v10 = &a2[-v5];
      sub_1C6184E20(a1, v7);
      v5 = *(_QWORD *)a1;
      a2 = &v10[*(_QWORD *)a1];
    }
    else
    {
      sub_1C6184E20(a1, v7);
      v5 = *(_QWORD *)a1;
    }
  }
  result = sub_1C4DD8EB0((_QWORD *)(v5 + 32 * *(unsigned int *)(a1 + 8)), a2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C4DD8D2C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[256];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6184D58(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6184D58(a1, (uint64_t)v14, (uint64_t)v9);
}

_QWORD *sub_1C4DD8EB0(_QWORD *result, _QWORD *a2)
{
  unint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;

  *result = *a2;
  result[1] = 6;
  v2 = result + 1;
  result[2] = 0;
  v3 = (unint64_t)(result + 2);
  v4 = a2[3];
  result[3] = v4;
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
  {
    v6 = a2[1] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v3 = *(_QWORD *)v6;
    *(_QWORD *)v6 = v2;
    *v2 = v6 | 6;
    if (*(_QWORD *)v3)
      **(_QWORD **)v3 = **(_QWORD **)v3 & 7 | v3;
  }
  return result;
}

uint64_t sub_1C4DD8F24(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  v7 = 0;
  v3 = sub_1C4850EC8((uint64_t *)(a1 + 48), &v6, &v7);
  result = 0;
  if (v3 && v7 != *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64))
  {
    v5 = (_QWORD *)(*(_QWORD *)a1 + 8 * *(int *)(v7 + 8));
    if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*(_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFF8))
        return *(_QWORD *)a1 + 8 * *(int *)(v7 + 8);
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C4DD8FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t CachedResultImpl;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  _BYTE v24[16];
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE v29[16];
  uint64_t v30;

  v5 = a3;
  v30 = a3;
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    sub_1C4DD5568(*(_QWORD *)(a5 + 8), &v30);
    v10 = v30;
    v30 = **(_QWORD **)a1;
    CachedResultImpl = llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getCachedResultImpl(a4, (uint64_t)&llvm::FunctionAnalysisManagerCGSCCProxy::Key, v10);
    if (CachedResultImpl)
      v12 = *(_QWORD *)(CachedResultImpl + 8);
    else
      v12 = 0;
    v20 = v24;
    v21 = v24;
    v22 = 2;
    v23 = 0;
    v25 = v29;
    v26 = v29;
    v27 = 2;
    v28 = 0;
    sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)&v20, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
    sub_1C4DDB144((uint64_t)&v20, (uint64_t)&llvm::FunctionAnalysisManagerCGSCCProxy::Key);
    llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::invalidate(a4, v10, (uint64_t)&v20);
    if (v12)
      sub_1C4DD91CC(v30, a2, a4, v12);
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)a1 + 8;
    while (v13 != v14)
    {
      v16 = *(_QWORD *)(v13 - 8);
      v13 -= 8;
      v15 = v16;
      v17 = *(_QWORD *)(a5 + 8);
      v19 = v16;
      sub_1C4DD5568(v17, &v19);
      if (v12)
        sub_1C4DD91CC(v15, a2, a4, v12);
      llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::invalidate(a4, v15, (uint64_t)&v20);
    }
    v5 = v30;
    if (v26 != v25)
      free(v26);
    if (v21 != v20)
      free(v21);
  }
  return v5;
}

_QWORD *sub_1C4DD9134(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  _QWORD *result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (uint64_t *)(*(_QWORD *)a1 + 96);
  v8 = 0;
  v9 = a2;
  sub_1C4850EC8(v3, &v9, &v8);
  v4 = *(_QWORD *)(v8 + 8);
  v9 = v4;
  v5 = (_BYTE *)sub_1C4DD8F24(*(_QWORD *)(a1 + 8) + 24, v4);
  result = sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(a1 + 16), v4);
  if (!v5)
  {
    v7 = (uint64_t *)(a1 + 24);
    return sub_1C6184F7C(*v7, &v9);
  }
  if ((*v5 & 4) != 0)
  {
    v7 = (uint64_t *)(a1 + 32);
    return sub_1C6184F7C(*v7, &v9);
  }
  return result;
}

void sub_1C4DD91CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t CachedResultImpl;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  _BYTE v32[16];
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  int v36;
  _BYTE v37[16];

  *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a3, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, a1, a2)+ 8) = a4;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v27 = v7 + 8 * v6;
    while (1)
    {
      v8 = *(_QWORD *)(*(_QWORD *)v7 + 8);
      CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(a4, (uint64_t)&llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Function>::Key, v8);
      if (CachedResultImpl)
        break;
LABEL_27:
      v7 += 8;
      if (v7 == v27)
        return;
    }
    v10 = CachedResultImpl;
    v28 = v32;
    v29 = v32;
    v30 = 2;
    v31 = 0;
    v33 = v37;
    v34 = v37;
    v35 = 2;
    v36 = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v28, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    v11 = *(_DWORD *)(v10 + 16);
    if (v11 > 1)
    {
      if ((v11 & 1) != 0)
      {
        v17 = (_QWORD *)(v10 + 24);
        v15 = (_QWORD *)(v10 + 56);
      }
      else
      {
        v17 = *(_QWORD **)(v10 + 24);
        v26 = *(unsigned int *)(v10 + 32);
        if (!(_DWORD)v26)
        {
          v18 = 0;
          v14 = *(_QWORD **)(v10 + 24);
          v16 = v14;
          goto LABEL_11;
        }
        v15 = &v17[2 * v26];
      }
      v11 = *(_DWORD *)(v10 + 16) & 1;
      v14 = v17;
      while ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v14 += 2;
        if (v14 == v15)
        {
          v14 = v15;
          break;
        }
      }
    }
    else
    {
      if (v11)
      {
        v12 = v10 + 24;
        v13 = 2;
      }
      else
      {
        v12 = *(_QWORD *)(v10 + 24);
        v13 = *(unsigned int *)(v10 + 32);
      }
      v14 = (_QWORD *)(v12 + 16 * v13);
      v15 = v14;
    }
    if (v11)
    {
      v16 = (_QWORD *)(v10 + 24);
      v17 = v15;
      v18 = 2;
    }
    else
    {
      v16 = *(_QWORD **)(v10 + 24);
      v18 = *(unsigned int *)(v10 + 32);
      v17 = v15;
    }
LABEL_11:
    v19 = &v16[2 * v18];
LABEL_12:
    while (v14 != v19)
    {
      v21 = v14 + 1;
      v20 = v14[1];
      if ((v20 & 4) != 0)
      {
        v23 = v20 & 0xFFFFFFFFFFFFFFF8;
        v21 = *(uint64_t **)v23;
        v22 = *(_QWORD *)v23 + 8 * *(unsigned int *)(v23 + 8);
      }
      else
      {
        v22 = (uint64_t)&v21[v20 > 7];
      }
      while (v21 != (uint64_t *)v22)
      {
        v24 = *v21++;
        sub_1C4DD7214((uint64_t)&v28, v24);
      }
      v25 = v14 + 2;
      v14 = v17;
      if (v25 != v17)
      {
        v14 = v25;
        while ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v14 += 2;
          if (v14 == v17)
          {
            v14 = v17;
            goto LABEL_12;
          }
        }
      }
    }
    llvm::AnalysisManager<llvm::Function>::invalidate(a4, v8, (uint64_t)&v28);
    if (v34 != v33)
      free(v34);
    if (v29 != v28)
      free(v29);
    goto LABEL_27;
  }
}

void sub_1C4DD9420(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  _BYTE v11[16];
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  _BYTE v16[16];

  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      v6 = *a2;
      **(_BYTE **)a1 |= llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getCachedResultImpl(*(_QWORD *)(a1 + 8), (uint64_t)&llvm::FunctionAnalysisManagerCGSCCProxy::Key, *a2) != 0;
      sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(*(_QWORD *)(a1 + 16) + 24), v6);
      v7 = v11;
      v8 = v11;
      v9 = 2;
      v10 = 0;
      v12 = v16;
      v13 = v16;
      v14 = 2;
      v15 = 0;
      sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)&v7, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
      sub_1C4DDB144((uint64_t)&v7, (uint64_t)&llvm::FunctionAnalysisManagerCGSCCProxy::Key);
      llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::invalidate(*(_QWORD *)(a1 + 8), v6, (uint64_t)&v7);
      if (v13 != v12)
        free(v13);
      if (v8 != v7)
        free(v8);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
}

uint64_t sub_1C4DD953C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(unsigned int *)(v3 + 728);
    if ((_DWORD)v4)
    {
      v7 = *(_QWORD **)(v3 + 720);
      v8 = 32 * v4;
      do
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        v11 = v10;
        v16 = 0;
        v12 = (_QWORD *)operator new();
        *v12 = &unk_1E81353B8;
        v12[1] = a3;
        v13 = v16;
        v16 = v12;
        if (v13)
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        v14 = v7[3];
        v15 = v7;
        if ((v14 & 2) == 0)
          v15 = (_QWORD *)*v7;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v14 & 0xFFFFFFFFFFFFFFF8))(v15, v9, v11, &v16);
        result = (uint64_t)v16;
        v16 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v7 += 4;
        v8 -= 32;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t sub_1C4DD9640(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(unsigned int *)(v3 + 872);
    if ((_DWORD)v4)
    {
      v7 = *(_QWORD **)(v3 + 864);
      v8 = 32 * v4;
      do
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        v11 = v10;
        v16 = 0;
        v12 = (_QWORD *)operator new();
        *v12 = &unk_1E81353B8;
        v12[1] = a3;
        v13 = v16;
        v16 = v12;
        if (v13)
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        v14 = v7[3];
        v15 = v7;
        if ((v14 & 2) == 0)
          v15 = (_QWORD *)*v7;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v14 & 0xFFFFFFFFFFFFFFF8))(v15, v9, v11, &v16);
        result = (uint64_t)v16;
        v16 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v7 += 4;
        v8 -= 32;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t sub_1C4DD9744@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C4DD97E0((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C4DD98D4(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = a2[1];
    *(_QWORD *)(result + 16) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1C4DD97E0(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  uint64_t result;
  BOOL v20;
  unsigned int v22;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = a2[1];
    v7 = ((v6 >> 4) ^ (v6 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
       + ~((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
    v11 = v3 - 1;
    v12 = (v3 - 1) & v10;
    v13 = (_QWORD *)(*a1 + 24 * v12);
    v15 = *v13;
    v14 = v13[1];
    if (v5 == *v13 && v6 == v14)
    {
      result = 1;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      result = 1;
      while (v15 != -4096 || v14 != -4096)
      {
        if (v17)
          v20 = 0;
        else
          v20 = v14 == -8192;
        if (v20 && v15 == -8192)
          v17 = v13;
        v22 = v12 + v18++;
        v12 = v22 & v11;
        v13 = (_QWORD *)(v4 + 24 * (v22 & v11));
        v15 = *v13;
        v14 = v13[1];
        if (v5 == *v13 && v6 == v14)
          goto LABEL_8;
      }
      result = 0;
      if (v17)
        v13 = v17;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v13;
  return result;
}

_QWORD *sub_1C4DD98D4(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1C4DD9990(a1, v7);
    v9 = 0;
    sub_1C4DD97E0((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *sub_1C4DD9990(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61852E4(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

void sub_1C4DD9A58()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4DD9A6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E81353B8;
  result[1] = v5;
  *a2 = result;
  return result;
}

void *sub_1C4DD9ABC()
{
  return &llvm::Any::TypeId<llvm::Module const*>::Id;
}

_QWORD *sub_1C4DD9AC8(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4DD9B30(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4DD9BCC((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 1;
    v5[2] = v5 + 1;
    v5[3] = 0;
  }
  return v5;
}

uint64_t sub_1C4DD9B30(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 32 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 32 * v6);
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4DD9BCC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DD9C7C(a1, v7);
  v9 = 0;
  sub_1C4DD9B30((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4DD9C7C(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61853C0(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4DD9D34(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  int v18;
  BOOL v19;
  unsigned int v21;
  uint64_t result;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = a2[1];
    v7 = ((v6 >> 4) ^ (v6 >> 9) | ((unint64_t)((*a2 >> 4) ^ (*a2 >> 9)) << 32))
       + ~((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
    v8 = (v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13);
    v9 = (9 * (v8 ^ (v8 >> 8))) ^ ((9 * (v8 ^ (v8 >> 8))) >> 15);
    v10 = ((v9 + ~(v9 << 27)) >> 31) ^ (v9 + ~((_DWORD)v9 << 27));
    v11 = v3 - 1;
    v12 = (v3 - 1) & v10;
    v13 = (_QWORD *)(*a1 + 24 * v12);
    v15 = *v13;
    v14 = v13[1];
    if (*a2 == *v13 && v6 == v14)
    {
LABEL_22:
      result = 1;
    }
    else
    {
      v17 = 0;
      v18 = 1;
      while (v15 != -4096 || v14 != -4096)
      {
        if (v17)
          v19 = 0;
        else
          v19 = v14 == -8192;
        if (v19 && v15 == -8192)
          v17 = v13;
        v21 = v12 + v18++;
        v12 = v21 & v11;
        v13 = (_QWORD *)(v4 + 24 * (v21 & v11));
        v15 = *v13;
        v14 = v13[1];
        if (v5 == *v13 && v6 == v14)
          goto LABEL_22;
      }
      result = 0;
      if (v17)
        v13 = v17;
    }
  }
  else
  {
    v13 = 0;
    result = 0;
  }
  *a3 = v13;
  return result;
}

unsigned int *sub_1C4DD9E20(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  int64x2_t *v6;
  uint64_t v7;
  int64x2_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(int64x2_t **)result;
      v7 = 24 * v2;
      v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *v6 = v8;
        v6 = (int64x2_t *)((char *)v6 + 24);
        v7 -= 24;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v9 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
      LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
      v1[4] = v10;
      result = (unsigned int *)operator new(24 * v10, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v11 = v1[4];
      if ((_DWORD)v11)
      {
        v12 = 24 * v11;
        v13 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          *(int64x2_t *)result = v13;
          result += 6;
          v12 -= 24;
        }
        while (v12);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

void sub_1C4DD9F30(_DWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[4];
  v3 = a1[2];
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (uint64_t *)(*(_QWORD *)a1 + 8);
    do
    {
      if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        sub_1C4D8B4AC(v5);
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
  }
  if (v3)
  {
    v6 = 1 << (33 - __clz(v3 - 1));
    if (v6 <= 64)
      v7 = 64;
    else
      v7 = v6;
    if (v7 == a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      v8 = 32 * v7;
      v9 = *(_QWORD **)a1;
      do
      {
        *v9 = -4096;
        v9 += 4;
        v8 -= 32;
      }
      while (v8);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
      v10 = (4 * v7 / 3 + 1) | ((unint64_t)(4 * v7 / 3 + 1) >> 1);
      v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
      LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
      a1[4] = v11;
      v12 = operator new(32 * v11, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v12;
      *((_QWORD *)a1 + 1) = 0;
      v13 = a1[4];
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        do
        {
          *v12 = -4096;
          v12 += 4;
          v14 -= 32;
        }
        while (v14);
      }
    }
  }
  else if (a1[4])
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    a1[4] = 0;
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
}

BOOL sub_1C4DDA07C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_DWORD *)(a1 + 68) != *(_DWORD *)(a1 + 72))
    return 0;
  v4 = sub_1C477672C(a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = 16;
  if (v5 == *(_QWORD *)a1)
    v6 = 20;
  if (v4 != (_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + v6)))
    return 1;
  v8 = sub_1C477672C(a1, a2);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = 16;
  if (v9 == *(_QWORD *)a1)
    v10 = 20;
  return v8 != (_QWORD *)(v9 + 8 * *(unsigned int *)(a1 + v10));
}

uint64_t *sub_1C4DDA118(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C4DDA200(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1C4DDA288(a1, v7);
    v8 = 0;
    sub_1C4DDA200(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = (uint64_t)(result + 1);
  result[2] = (uint64_t)(result + 1);
  result[3] = 0;
  return result;
}

uint64_t sub_1C4DDA200(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t result;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v7 = 0;
      v8 = 1;
      while (v6 != -4096)
      {
        if (v7)
          v9 = 0;
        else
          v9 = v6 == -8192;
        if (v9)
          v7 = v5;
        v10 = v4 + v8++;
        v4 = v10 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        if (*v5 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v7)
        v5 = v7;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
  *a4 = v5;
  return result;
}

_QWORD *sub_1C4DDA288(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4DDA340(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void sub_1C4DDA340(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v17 = 0;
      sub_1C4DDA200(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v17);
      v10 = v17;
      v11 = v17 + 1;
      *v17 = *a2;
      v10[1] = (uint64_t)v11;
      v10[2] = (uint64_t)v11;
      v10[3] = 0;
      v12 = a2[3];
      if (v12)
      {
        v14 = a2[1];
        v13 = (uint64_t *)a2[2];
        v15 = *v13;
        *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
        **(_QWORD **)(v14 + 8) = v15;
        v16 = v10[1];
        *(_QWORD *)(v16 + 8) = v13;
        *v13 = v16;
        v10[1] = v14;
        *(_QWORD *)(v14 + 8) = v11;
        v10[3] = v12;
        a2[3] = 0;
      }
      ++*(_DWORD *)(a1 + 8);
      sub_1C4D8B4AC(a2 + 1);
    }
    a2 += 4;
  }
}

void sub_1C4DDA430()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4DDA444@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E8135388;
  result[1] = v5;
  *a2 = result;
  return result;
}

void *sub_1C4DDA494()
{
  return &llvm::Any::TypeId<llvm::LazyCallGraph::SCC const*>::Id;
}

_OWORD *sub_1C4DDA4A0(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4DDA568(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4DDA568(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6;
    v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v7 = v9;
      v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v10 = a2[1];
    if ((*a2 != -4096 || v10 != -4096) && (*a2 != -8192 || v10 != -8192))
    {
      v12 = 0;
      result = sub_1C4DD9D34((uint64_t *)v5, a2, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      v11[2] = a2[2];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 3;
  }
  return result;
}

unint64_t *sub_1C4DDA638(unint64_t *a1, unint64_t *__dst, unint64_t *__src)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  int64_t v8;

  v3 = __dst;
  v4 = *a1;
  if ((*a1 & 4) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFF8;
    if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v6 = *(_QWORD *)v5;
      v7 = (unint64_t *)(*(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 8));
      v8 = (char *)v7 - (char *)__src;
      if (v7 != __src)
      {
        memmove(__dst, __src, (char *)v7 - (char *)__src);
        v6 = *(_QWORD *)v5;
      }
      *(_DWORD *)(v5 + 8) = ((unint64_t)v3 + v8 - v6) >> 3;
    }
  }
  else
  {
    if (a1 == __dst && __dst != __src)
    {
      v4 = 0;
      *__dst = 0;
    }
    return &a1[v4 > 7];
  }
  return v3;
}

uint64_t *sub_1C4DDA6D4(uint64_t *a1, __int128 *a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  __int128 v6;
  uint64_t v7;

  v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    v4 = v2 & 0xFFFFFFFFFFFFFFF8;
    a1 = *(uint64_t **)v4;
    v3 = (uint64_t *)(*(_QWORD *)v4 + 8 * *(unsigned int *)(v4 + 8));
  }
  else
  {
    v3 = &a1[v2 > 7];
  }
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  return sub_1C4DDA730(a1, v3, (uint64_t)&v6);
}

uint64_t *sub_1C4DDA730(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v9;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = a1;
    while (1)
    {
      v7 = *v6++;
      if (llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Invalidator::invalidate(*(uint64_t **)a3, v7, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16)))break;
      v3 = v6;
      if (v6 == a2)
        return a2;
    }
    if (v6 != a2)
    {
      v9 = v3 + 1;
      do
      {
        if ((llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Invalidator::invalidate(*(uint64_t **)a3, *v9, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16)) & 1) == 0)*v3++ = *v9;
        ++v9;
      }
      while (v9 != a2);
    }
  }
  return v3;
}

uint64_t sub_1C4DDA7C8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 2;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4DDA878(_QWORD *result)
{
  void **v1;
  _QWORD *v2;
  unint64_t v3;

  if ((*result & 4) != 0)
  {
    v1 = (void **)(*result & 0xFFFFFFFFFFFFFFF8);
    if (v1)
    {
      v2 = result;
      v3 = *result & 0xFFFFFFFFFFFFFFF8;
      if (*v1 != v1 + 2)
        free(*v1);
      MEMORY[0x1CAA32FC0](v3, 0x1080C40ED926357);
      return v2;
    }
  }
  return result;
}

uint64_t *sub_1C4DDA8D4(uint64_t *a1, __int128 *a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  __int128 v6;
  uint64_t v7;

  v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    v4 = v2 & 0xFFFFFFFFFFFFFFF8;
    a1 = *(uint64_t **)v4;
    v3 = (uint64_t *)(*(_QWORD *)v4 + 8 * *(unsigned int *)(v4 + 8));
  }
  else
  {
    v3 = &a1[v2 > 7];
  }
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  return sub_1C4DDA930(a1, v3, (uint64_t)&v6);
}

uint64_t *sub_1C4DDA930(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = a1;
    while (1)
    {
      v7 = *v6++;
      if (llvm::AnalysisManager<llvm::Function>::Invalidator::invalidate(*(uint64_t **)a3, v7, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16)))break;
      v3 = v6;
      if (v6 == a2)
        return a2;
    }
    if (v6 != a2)
    {
      v8 = v3 + 1;
      do
      {
        if ((llvm::AnalysisManager<llvm::Function>::Invalidator::invalidate(*(uint64_t **)a3, *v8, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16)) & 1) == 0)*v3++ = *v8;
        ++v8;
      }
      while (v8 != a2);
    }
  }
  return v3;
}

uint64_t sub_1C4DDA9C8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4DDAA74(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4DDABEC(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4DDABEC(a1, v14, v9);
}

uint64_t sub_1C4DDABEC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v13;

  v3 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v3 & 1) != 0)
  {
    v4 = (_QWORD *)(result + 8);
    v5 = (_QWORD *)(result + 72);
  }
  else
  {
    v6 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v6)
      goto LABEL_4;
    v4 = *(_QWORD **)(result + 8);
    v5 = &v4[2 * v6];
  }
  do
  {
    *v4 = -4096;
    v4 += 2;
  }
  while (v4 != v5);
LABEL_4:
  if (a2 != a3)
  {
    do
    {
      v7 = (_DWORD *)result;
      v8 = a2;
      v9 = *a2;
      if ((v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_1C4DDA9C8(result, v9, &v13);
        v10 = v13;
        v11 = v8[1];
        *v13 = *v8;
        v10[1] = v11;
        *v7 += 2;
      }
      a2 = v8 + 2;
      result = (uint64_t)v7;
    }
    while (v8 + 2 != a3);
  }
  return result;
}

_QWORD *sub_1C4DDACC0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v17 = 0;
  result = (_QWORD *)sub_1C4DDAD80(a1, a2, &v17);
  v9 = v17;
  if ((_DWORD)result)
  {
    v15 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v16 = 4;
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 8);
      v16 = *(unsigned int *)(a1 + 16);
    }
    v14 = 0;
    v13 = v15 + 16 * v16;
  }
  else
  {
    result = sub_1C4DDAE30((_DWORD *)a1, (uint64_t)a2, a2, v17);
    v9 = result;
    v10 = *a3;
    *result = *a2;
    result[1] = v10;
    v11 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v12 = 4;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(unsigned int *)(a1 + 16);
    }
    v13 = v11 + 16 * v12;
    v14 = 1;
  }
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = v14;
  return result;
}

uint64_t sub_1C4DDAD80(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4DDAE30(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C4DDAEEC((uint64_t)a1, v7);
  v9 = 0;
  sub_1C4DDAD80((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C4DDAEEC(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4DDB064(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4DDB064(a1, v14, v9);
}

uint64_t sub_1C4DDB064(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v3 & 1) != 0)
  {
    v4 = (_QWORD *)(result + 8);
    v5 = (_QWORD *)(result + 72);
  }
  else
  {
    v6 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v6)
      goto LABEL_4;
    v4 = *(_QWORD **)(result + 8);
    v5 = &v4[2 * v6];
  }
  do
  {
    *v4 = -4096;
    v4 += 2;
  }
  while (v4 != v5);
LABEL_4:
  if (a2 != a3)
  {
    do
    {
      v7 = (_DWORD *)result;
      v8 = a3;
      v9 = a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        sub_1C4DDAD80(result, a2, &v12);
        v10 = v12;
        v11 = v9[1];
        *v12 = *v9;
        v10[1] = v11;
        *v7 += 2;
      }
      a2 = v9 + 2;
      a3 = v8;
      result = (uint64_t)v7;
    }
    while (v9 + 2 != v8);
  }
  return result;
}

_QWORD *sub_1C4DDB144(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_1C477672C(a1 + 48, a2);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = 64;
  if (v5 == *(_QWORD *)(a1 + 48))
    v6 = 68;
  if (v4 == (_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + v6)))
  {
    v7 = *(_DWORD *)(a1 + 72);
  }
  else
  {
    *v4 = -2;
    v7 = *(_DWORD *)(a1 + 72) + 1;
    *(_DWORD *)(a1 + 72) = v7;
  }
  if (*(_DWORD *)(a1 + 68) != v7)
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a2);
  result = sub_1C477672C(a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = 16;
  if (v9 == *(_QWORD *)a1)
    v10 = 20;
  if (result == (_QWORD *)(v9 + 8 * *(unsigned int *)(a1 + v10)))
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a2);
  return result;
}

_QWORD *sub_1C4DDB200(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 == 28)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 0x11)
  {
    v6 = result + 33;
    *result = 1;
    v7 = result + 1;
    goto LABEL_14;
  }
  if ((v2 & 1) != 0)
    return sub_1C6184998(v1, v5);
  if (v5 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C6184998(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v7 = (_QWORD *)result[1];
  v6 = &v7[2 * v5];
  do
  {
LABEL_14:
    *v7 = -4096;
    v7 += 2;
  }
  while (v7 != v6);
  return result;
}

uint64_t sub_1C4DDB2C0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(unsigned int *)(v3 + 728);
    if ((_DWORD)v4)
    {
      v7 = *(_QWORD **)(v3 + 720);
      v8 = 32 * v4;
      do
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        v11 = v10;
        v16 = 0;
        v12 = (_QWORD *)operator new();
        *v12 = &unk_1E81353E8;
        v12[1] = a3;
        v13 = v16;
        v16 = v12;
        if (v13)
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        v14 = v7[3];
        v15 = v7;
        if ((v14 & 2) == 0)
          v15 = (_QWORD *)*v7;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v14 & 0xFFFFFFFFFFFFFFF8))(v15, v9, v11, &v16);
        result = (uint64_t)v16;
        v16 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v7 += 4;
        v8 -= 32;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t sub_1C4DDB3C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(unsigned int *)(v3 + 872);
    if ((_DWORD)v4)
    {
      v7 = *(_QWORD **)(v3 + 864);
      v8 = 32 * v4;
      do
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        v11 = v10;
        v16 = 0;
        v12 = (_QWORD *)operator new();
        *v12 = &unk_1E81353E8;
        v12[1] = a3;
        v13 = v16;
        v16 = v12;
        if (v13)
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        v14 = v7[3];
        v15 = v7;
        if ((v14 & 2) == 0)
          v15 = (_QWORD *)*v7;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v14 & 0xFFFFFFFFFFFFFFF8))(v15, v9, v11, &v16);
        result = (uint64_t)v16;
        v16 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v7 += 4;
        v8 -= 32;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t sub_1C4DDB4C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C4D920B0((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C4DDB564(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = a2[1];
    *(_QWORD *)(result + 16) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_1C4DDB564(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1C4DDB620(a1, v7);
    v9 = 0;
    sub_1C4D920B0((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || a4[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *sub_1C4DDB620(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4DDB6E8(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4DDB6E8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6;
    v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v7 = v9;
      v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v10 = a2[1];
    if ((*a2 != -4096 || v10 != -4096) && (*a2 != -8192 || v10 != -8192))
    {
      v12 = 0;
      result = sub_1C4D920B0((uint64_t *)v5, a2, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      v11[2] = a2[2];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 3;
  }
  return result;
}

void sub_1C4DDB7B8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4DDB7CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E81353E8;
  result[1] = v5;
  *a2 = result;
  return result;
}

void *sub_1C4DDB81C()
{
  return &llvm::Any::TypeId<llvm::Function const*>::Id;
}

_QWORD *sub_1C4DDB828(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4B08104(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4DDB890((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 1;
    v5[2] = v5 + 1;
    v5[3] = 0;
  }
  return v5;
}

_QWORD *sub_1C4DDB890(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DDB940(a1, v7);
  v9 = 0;
  sub_1C4B08104((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C4DDB940(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4DDB9F8(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void sub_1C4DDB9F8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v16 = 0;
      sub_1C4B08104((uint64_t *)a1, a2, &v16);
      v9 = v16;
      v10 = v16 + 1;
      *v16 = *a2;
      v9[1] = v10;
      v9[2] = v10;
      v9[3] = 0;
      v11 = a2[3];
      if (v11)
      {
        v13 = a2[1];
        v12 = (uint64_t *)a2[2];
        v14 = *v12;
        *(_QWORD *)(v14 + 8) = *(_QWORD *)(v13 + 8);
        **(_QWORD **)(v13 + 8) = v14;
        v15 = v9[1];
        *(_QWORD *)(v15 + 8) = v12;
        *v12 = v15;
        v9[1] = v13;
        *(_QWORD *)(v13 + 8) = v10;
        v9[3] = v11;
        a2[3] = 0;
      }
      ++*(_DWORD *)(a1 + 8);
      sub_1C4D8B4AC(a2 + 1);
    }
    a2 += 4;
  }
}

uint64_t sub_1C4DDBAE8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(unsigned int *)(v3 + 1016);
    if ((_DWORD)v4)
    {
      v7 = *(_QWORD **)(v3 + 1008);
      v8 = 32 * v4;
      do
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        v11 = v10;
        v16 = 0;
        v12 = (_QWORD *)operator new();
        *v12 = &unk_1E81353E8;
        v12[1] = a3;
        v13 = v16;
        v16 = v12;
        if (v13)
          (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        v14 = v7[3];
        v15 = v7;
        if ((v14 & 2) == 0)
          v15 = (_QWORD *)*v7;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD **))(v14 & 0xFFFFFFFFFFFFFFF8))(v15, v9, v11, &v16);
        result = (uint64_t)v16;
        v16 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v7 += 4;
        v8 -= 32;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t sub_1C4DDBBEC(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v6 = 0;
  v3 = sub_1C4B08104((uint64_t *)a1, a2, &v6);
  if ((_DWORD)v3)
  {
    v4 = v6;
    sub_1C4D8B4AC(v6 + 1);
    *v4 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

uint64_t sub_1C4DDBC58()
{
  __int128 v1;

  *(_QWORD *)&v1 = "Abort when the max iterations for devirtualization CGSCC repeat pass is reached";
  *((_QWORD *)&v1 + 1) = 79;
  sub_1C61854C8(&v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED7F0B08, &dword_1C475E000);
}

llvm::CallGraph *llvm::CallGraph::CallGraph(llvm::CallGraph *this, llvm::Module *a2)
{
  uint64_t v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t i;
  llvm::Function *v11;
  unint64_t v13;
  unint64_t *v14;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  v13 = 0;
  v14 = &v13;
  v5 = sub_1C4DE25A0((uint64_t **)this + 1, &v13, (uint64_t)&std::piecewise_construct, (uint64_t **)&v14) + 5;
  v4 = (uint64_t)*v5;
  if (!*v5)
  {
    v6 = v13;
    v4 = operator new();
    *(_QWORD *)v4 = this;
    *(_QWORD *)(v4 + 8) = v6;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_DWORD *)(v4 + 40) = 0;
    v7 = (uint64_t)*v5;
    *v5 = (uint64_t *)v4;
    if (v7)
    {
      sub_1C4DDE2A8((uint64_t)v5, v7);
      v4 = (uint64_t)*v5;
    }
  }
  *((_QWORD *)this + 10) = v4;
  v8 = operator new();
  *(_QWORD *)v8 = this;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_DWORD *)(v8 + 40) = 0;
  *((_QWORD *)this + 11) = v8;
  v9 = (char *)a2 + 24;
  for (i = *((_QWORD *)a2 + 4); (char *)i != v9; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v11 = (llvm::Function *)(i - 56);
    else
      v11 = 0;
    if ((*((_DWORD *)v11 + 9) - 55) >= 4)
      llvm::CallGraph::addToCallGraph((uint64_t **)this, v11);
  }
  return this;
}

uint64_t *llvm::CallGraph::getOrInsertFunction(uint64_t **this, const llvm::Function *a2)
{
  uint64_t *result;
  uint64_t **v4;
  unint64_t v5;
  uint64_t v6;
  const llvm::Function *v7;
  const llvm::Function **v8;

  v7 = a2;
  v8 = &v7;
  v4 = sub_1C4DE25A0(this + 1, (unint64_t *)&v7, (uint64_t)&std::piecewise_construct, (uint64_t **)&v8) + 5;
  result = *v4;
  if (!*v4)
  {
    v5 = (unint64_t)v7;
    result = (uint64_t *)operator new();
    *result = (uint64_t)this;
    result[1] = v5;
    result[3] = 0;
    result[4] = 0;
    result[2] = 0;
    *((_DWORD *)result + 10) = 0;
    v6 = (uint64_t)*v4;
    *v4 = result;
    if (v6)
    {
      sub_1C4DDE2A8((uint64_t)v4, v6);
      return *v4;
    }
  }
  return result;
}

void llvm::CallGraph::addToCallGraph(uint64_t **this, llvm::Function *a2)
{
  uint64_t v4;
  uint64_t **v5;
  llvm::Function *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int32x2_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  llvm::Function *v25;

  v25 = a2;
  *(_QWORD *)&v23 = &v25;
  v5 = sub_1C4DE25A0(this + 1, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, (uint64_t **)&v23) + 5;
  v4 = (uint64_t)*v5;
  if (!*v5)
  {
    v6 = v25;
    v4 = operator new();
    *(_QWORD *)v4 = this;
    *(_QWORD *)(v4 + 8) = v6;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_DWORD *)(v4 + 40) = 0;
    v7 = (uint64_t)*v5;
    *v5 = (uint64_t *)v4;
    if (v7)
    {
      sub_1C4DDE2A8((uint64_t)v5, v7);
      v4 = (uint64_t)*v5;
    }
  }
  if ((*((_DWORD *)a2 + 8) & 0xFu) - 7 > 1 || llvm::Function::hasAddressTaken(a2, 0, 1, 1, 0, 0))
  {
    v8 = this[10];
    v25 = (llvm::Function *)v4;
    v23 = 0u;
    v24 = 0u;
    v9 = v8[3];
    if (v9 >= v8[4])
    {
      v10 = sub_1C4DDDA6C((char **)v8 + 2, (uint64_t)&v23, &v25);
      v11 = BYTE8(v24);
      v8[3] = (uint64_t)v10;
      if (v11 && (_QWORD)v24 != -8192 && (_QWORD)v24 != -4096 && (_QWORD)v24)
      {
        v12 = v23 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFF8) = *((_QWORD *)&v23 + 1);
        if (*((_QWORD *)&v23 + 1))
        {
          **((_QWORD **)&v23 + 1) = **((_QWORD **)&v23 + 1) & 7 | v12;
        }
        else
        {
          v13 = v24;
          v14 = ***(int32x2_t ****)v24;
          v15 = (unint64_t)v14[303];
          if (v15 <= v12)
          {
            v16 = v14[305].u32[0];
            if (v15 + 16 * v16 > v12)
            {
              v17 = v16 - 1;
              LODWORD(v18) = v17 & ((v24 >> 4) ^ (v24 >> 9));
              v19 = (uint64_t *)(v15 + 16 * v18);
              v20 = *v19;
              if ((_QWORD)v24 == *v19)
              {
LABEL_21:
                *v19 = -8192;
                v14[304] = vadd_s32(v14[304], (int32x2_t)0x1FFFFFFFFLL);
                v13 = v24;
              }
              else
              {
                v21 = 1;
                while (v20 != -4096)
                {
                  v22 = v18 + v21++;
                  v18 = v22 & v17;
                  v20 = *(_QWORD *)(v15 + 16 * v18);
                  if ((_QWORD)v24 == v20)
                  {
                    v19 = (uint64_t *)(v15 + 16 * v18);
                    goto LABEL_21;
                  }
                }
              }
              *(_BYTE *)(v13 + 17) &= ~1u;
            }
          }
        }
      }
    }
    else
    {
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = v4;
      v8[3] = v9 + 40;
    }
    ++*((_DWORD *)v25 + 10);
  }
  llvm::CallGraph::populateCallGraphNode((llvm::CallGraph *)this, (llvm::CallGraphNode *)v4);
}

uint64_t llvm::CallGraph::CallGraph(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = (_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  v7 = (_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    *(_QWORD *)(v5 + 16) = v7;
    *v4 = v6;
    *v6 = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v7;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  v9 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = v9;
  v10 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = v10;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  sub_1C4DDE2FC((uint64_t)v4, *(_QWORD **)(a2 + 16));
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 80) = 0;
  **(_QWORD **)(a1 + 88) = a1;
  v12 = *(_QWORD **)(a1 + 8);
  if (v12 != v7)
  {
    do
    {
      *(_QWORD *)v12[5] = a1;
      v13 = (_QWORD *)v12[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v12[2];
          v15 = *v14 == (_QWORD)v12;
          v12 = v14;
        }
        while (!v15);
      }
      v12 = v14;
    }
    while (v14 != v7);
  }
  return a1;
}

void llvm::CallGraph::~CallGraph(llvm::CallGraph *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  v4 = *((_QWORD *)this + 11);
  v2 = (_QWORD *)((char *)this + 88);
  v3 = v4;
  if (v4)
  {
    *(_DWORD *)(v3 + 40) = 0;
    *v2 = 0;
    sub_1C4DDE2A8((uint64_t)v2, v3);
  }
  else
  {
    *v2 = 0;
  }
  v5 = (void **)((char *)this + 56);
  sub_1C4DDD9E8(&v5);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 4), 8);
  sub_1C4DDE2FC((uint64_t)this + 8, *((_QWORD **)this + 2));
}

BOOL llvm::CallGraph::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &llvm::CallGraphAnalysis::Key;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::CallGraphAnalysis::Key);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C4DD6D80((uint64_t)v8) && !sub_1C4DAA49C((uint64_t)v8);
}

void *sub_1C4DDC318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  void *result;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = a3;
  if (a2)
  {
    v10[0] = 6;
    v10[1] = 0;
    v11 = a2;
    if (a2 == -8192 || a2 == -4096)
    {
      v8 = a2;
    }
    else
    {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v10);
      v8 = v11;
    }
    v12 = 6uLL;
    *(_QWORD *)&v13 = v8;
    if (v8 != -8192 && v8 != -4096)
    {
      if (v8)
      {
        v9 = v10[0] & 0xFFFFFFFFFFFFFFF8;
        *((_QWORD *)&v12 + 1) = *(_QWORD *)(v10[0] & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)v9 = &v12;
        *(_QWORD *)&v12 = v9 | 6;
        if (*((_QWORD *)&v12 + 1))
          **((_QWORD **)&v12 + 1) = **((_QWORD **)&v12 + 1) & 7 | ((unint64_t)&v12 + 8);
      }
    }
    BYTE8(v13) = 1;
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 >= *(_QWORD *)(a1 + 32))
  {
    result = sub_1C4DDDA6C((char **)(a1 + 16), (uint64_t)&v12, &v14);
  }
  else
  {
    *(_BYTE *)v6 = 0;
    *(_BYTE *)(v6 + 24) = 0;
    if (BYTE8(v13))
      sub_1C4DDDCF8((llvm::ValueHandleBase *)v6, &v12);
    *(_QWORD *)(v6 + 32) = a3;
    result = (void *)(v6 + 40);
  }
  *(_QWORD *)(a1 + 24) = result;
  if (BYTE8(v13))
  {
    if ((_QWORD)v13 != -8192 && (_QWORD)v13 != -4096 && (_QWORD)v13)
      result = llvm::ValueHandleBase::RemoveFromUseList(&v12);
    BYTE8(v13) = 0;
  }
  if (a2 && v11 != -8192 && v11 != -4096 && v11)
    result = llvm::ValueHandleBase::RemoveFromUseList(v10);
  ++*(_DWORD *)(v14 + 40);
  return result;
}

void llvm::CallGraph::populateCallGraphNode(llvm::CallGraph *this, llvm::CallGraphNode *a2)
{
  uint64_t v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  llvm::CallBase *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  int32x2_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  int v28;
  uint64_t v29;
  const llvm::Use **v30;
  llvm::MDNode *MetadataImpl;
  uint64_t *inserted;
  uint64_t v33;
  uint64_t v34;
  llvm::Value *v35;
  uint64_t *v36;
  llvm::CallBase *v37;
  void *v38;
  void *v39[2];
  _OWORD v40[2];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a2 + 1);
  if (v4)
    v5 = *(_BYTE *)(v4 + 16) == 3;
  else
    v5 = 0;
  if (v5)
  {
    if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) != 0)
      goto LABEL_12;
    v6 = *(_DWORD *)(v4 + 32);
  }
  else
  {
    if (*(_BYTE *)(v4 + 16))
      goto LABEL_12;
    if (*(_QWORD *)(v4 + 72) != v4 + 72)
      goto LABEL_12;
    v6 = *(_DWORD *)(v4 + 32);
    if ((v6 & 0x800000) != 0)
      goto LABEL_12;
  }
  if ((v6 & 0x2000) == 0)
  {
    v9 = (llvm::CallBase *)*((_QWORD *)this + 11);
    v37 = v9;
    *(_OWORD *)v39 = 0u;
    v40[0] = 0u;
    v10 = *((_QWORD *)a2 + 3);
    if (v10 >= *((_QWORD *)a2 + 4))
    {
      v11 = sub_1C4DDDA6C((char **)a2 + 2, (uint64_t)v39, &v37);
    }
    else
    {
      *(_BYTE *)v10 = 0;
      *(_BYTE *)(v10 + 24) = 0;
      if (BYTE8(v40[0]))
        sub_1C4DDDCF8((llvm::ValueHandleBase *)v10, v39);
      *(_QWORD *)(v10 + 32) = v9;
      v11 = (char *)(v10 + 40);
    }
    *((_QWORD *)a2 + 3) = v11;
    if (BYTE8(v40[0]) && *(_QWORD *)&v40[0] != -8192 && *(_QWORD *)&v40[0] != -4096 && *(_QWORD *)&v40[0])
    {
      v12 = (unint64_t)v39[0] & 0xFFFFFFFFFFFFFFF8;
      *(void **)((unint64_t)v39[0] & 0xFFFFFFFFFFFFFFF8) = v39[1];
      if (v39[1])
      {
        *(_QWORD *)v39[1] = *(_QWORD *)v39[1] & 7 | v12;
      }
      else
      {
        v13 = *(_QWORD *)&v40[0];
        v14 = ****(int32x2_t *****)&v40[0];
        v15 = (unint64_t)v14[303];
        if (v15 <= v12)
        {
          v16 = v14[305].u32[0];
          if (v15 + 16 * v16 > v12)
          {
            v17 = v16 - 1;
            LODWORD(v18) = v17 & ((LODWORD(v40[0]) >> 4) ^ (LODWORD(v40[0]) >> 9));
            v19 = (uint64_t *)(v15 + 16 * v18);
            v20 = *v19;
            if (*(_QWORD *)&v40[0] == *v19)
            {
LABEL_32:
              *v19 = -8192;
              v14[304] = vadd_s32(v14[304], (int32x2_t)0x1FFFFFFFFLL);
              v13 = *(_QWORD *)&v40[0];
            }
            else
            {
              v21 = 1;
              while (v20 != -4096)
              {
                v22 = v18 + v21++;
                v18 = v22 & v17;
                v20 = *(_QWORD *)(v15 + 16 * v18);
                if (*(_QWORD *)&v40[0] == v20)
                {
                  v19 = (uint64_t *)(v15 + 16 * v18);
                  goto LABEL_32;
                }
              }
            }
            *(_BYTE *)(v13 + 17) &= ~1u;
          }
        }
      }
    }
    ++*((_DWORD *)v37 + 10);
  }
LABEL_12:
  v7 = v4 + 72;
  v8 = *(_QWORD *)(v4 + 80);
  if (v8 != v4 + 72)
  {
    do
    {
      v23 = v8;
      if (v8)
        v24 = v8 - 24;
      else
        v24 = 0;
      v25 = v24 + 40;
      for (i = *(_QWORD *)(v24 + 48); i != v25; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v27 = i - 24;
        else
          v27 = 0;
        v28 = *(unsigned __int8 *)(v27 + 16);
        if (v28 != 84 && v28 != 39 && v28 != 33)
          continue;
        v29 = *(_QWORD *)(i - 56);
        if (!v29 || *(_BYTE *)(v29 + 16) || *(_QWORD *)(v29 + 24) != *(_QWORD *)(i + 48))
          v29 = 0;
        if (*(_QWORD *)(v27 + 48) || (*(_BYTE *)(v27 + 23) & 0x20) != 0)
        {
          MetadataImpl = (llvm::MDNode *)llvm::Instruction::getMetadataImpl((llvm::Instruction *)v27, 23);
          if (!v29)
          {
            if (MetadataImpl)
            {
              inserted = (uint64_t *)llvm::CallGraph::getOrInsertNodeForCalleesMD(this, MetadataImpl);
              goto LABEL_59;
            }
          }
        }
        if (!v29 || (llvm::Intrinsic::isLeaf((llvm::Intrinsic *)*(unsigned int *)(v29 + 36)) & 1) == 0)
        {
          v33 = *((_QWORD *)this + 11);
          goto LABEL_60;
        }
        if ((*(_BYTE *)(v29 + 33) & 0x20) == 0)
        {
          inserted = llvm::CallGraph::getOrInsertFunction((uint64_t **)this, (const llvm::Function *)v29);
LABEL_59:
          v33 = (uint64_t)inserted;
LABEL_60:
          sub_1C4DDC318((uint64_t)a2, i - 24, v33);
        }
        v39[0] = v40;
        v39[1] = (void *)0x400000000;
        llvm::AbstractCallSite::getCallbackUses((_QWORD *)(i - 24), (uint64_t)v39);
        v30 = (const llvm::Use **)v39[0];
        if (LODWORD(v39[1]))
        {
          v34 = 8 * LODWORD(v39[1]);
          do
          {
            llvm::AbstractCallSite::AbstractCallSite((llvm::AbstractCallSite *)&v37, *v30);
            v35 = sub_1C6185E84(&v37);
            if (v35)
            {
              v36 = llvm::CallGraph::getOrInsertFunction((uint64_t **)this, v35);
              sub_1C4DDC318((uint64_t)a2, 0, (uint64_t)v36);
            }
            if (v38 != v39)
              free(v38);
            ++v30;
            v34 -= 8;
          }
          while (v34);
          v30 = (const llvm::Use **)v39[0];
        }
        if (v30 != (const llvm::Use **)v40)
          free(v30);
      }
      v8 = *(_QWORD *)(v23 + 8);
    }
    while (v8 != v7);
  }
}

uint64_t llvm::CallGraph::getOrInsertNodeForCalleesMD(llvm::CallGraph *this, llvm::MDNode *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::MDNode *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  llvm::MDNode *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  int32x2_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  llvm::MDNode *v40;
  int v41;

  v40 = a2;
  v41 = 0;
  sub_1C4DE26F4((uint64_t)this + 32, (uint64_t *)&v40, &v41, (uint64_t)&v37);
  v4 = v37;
  if ((_BYTE)v38)
  {
    v5 = (uint64_t *)((char *)this + 56);
    v39 = (unint64_t)a2;
    v6 = (_QWORD *)*((_QWORD *)this + 8);
    if ((unint64_t)v6 < *((_QWORD *)this + 9))
    {
      *v6 = a2;
      v6[1] = 0;
      v7 = v6 + 2;
      *((_QWORD *)this + 8) = v6 + 2;
    }
    else
    {
      v7 = sub_1C4DE2910((int64x2_t *)((char *)this + 56), &v39);
      v8 = *((_QWORD *)&v39 + 1);
      *((_QWORD *)this + 8) = v7;
      *((_QWORD *)&v39 + 1) = 0;
      if (v8)
      {
        sub_1C4DDE2A8((uint64_t)&v39 + 8, v8);
        v7 = (_OWORD *)*((_QWORD *)this + 8);
      }
    }
    v9 = *v5;
    v10 = (((unint64_t)v7 - *v5) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v10;
  }
  else
  {
    v10 = *(_DWORD *)(v37 + 8);
    v9 = *((_QWORD *)this + 7);
  }
  v11 = v9 + 16 * v10;
  v14 = *(_QWORD *)(v11 + 8);
  v13 = v11 + 8;
  result = v14;
  if (!v14)
  {
    v15 = operator new();
    *(_QWORD *)v15 = this;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
    *(_DWORD *)(v15 + 40) = 0;
    v16 = *(_QWORD *)v13;
    *(_QWORD *)v13 = v15;
    if (v16)
      sub_1C4DDE2A8(v13, v16);
    v17 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v17)
    {
      v18 = (llvm::MDNode *)((char *)a2 - 8 * v17);
      do
      {
        if (*(_QWORD *)v18 && *(_QWORD *)(*(_QWORD *)v18 + 128))
        {
          v19 = *(_QWORD *)v13;
          v40 = *(llvm::MDNode **)(*(_QWORD *)v18 + 128);
          *(_QWORD *)&v37 = &v40;
          v21 = sub_1C4DE25A0((uint64_t **)this + 1, (unint64_t *)&v40, (uint64_t)&std::piecewise_construct, (uint64_t **)&v37)+ 5;
          v20 = (uint64_t)*v21;
          if (!*v21)
          {
            v22 = v40;
            v20 = operator new();
            *(_QWORD *)v20 = this;
            *(_QWORD *)(v20 + 8) = v22;
            *(_QWORD *)(v20 + 24) = 0;
            *(_QWORD *)(v20 + 32) = 0;
            *(_QWORD *)(v20 + 16) = 0;
            *(_DWORD *)(v20 + 40) = 0;
            v23 = (uint64_t)*v21;
            *v21 = (uint64_t *)v20;
            if (v23)
            {
              sub_1C4DDE2A8((uint64_t)v21, v23);
              v20 = (uint64_t)*v21;
            }
          }
          v40 = (llvm::MDNode *)v20;
          v37 = 0u;
          v38 = 0u;
          v24 = *(_QWORD *)(v19 + 24);
          if (v24 >= *(_QWORD *)(v19 + 32))
          {
            v25 = sub_1C4DDDA6C((char **)(v19 + 16), (uint64_t)&v37, &v40);
          }
          else
          {
            *(_BYTE *)v24 = 0;
            *(_BYTE *)(v24 + 24) = 0;
            if (BYTE8(v38))
              sub_1C4DDDCF8((llvm::ValueHandleBase *)v24, &v37);
            *(_QWORD *)(v24 + 32) = v20;
            v25 = (char *)(v24 + 40);
          }
          *(_QWORD *)(v19 + 24) = v25;
          if (BYTE8(v38) && (_QWORD)v38 != -8192 && (_QWORD)v38 != -4096 && (_QWORD)v38)
          {
            v26 = v37 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v37 & 0xFFFFFFFFFFFFFFF8) = *((_QWORD *)&v37 + 1);
            if (*((_QWORD *)&v37 + 1))
            {
              **((_QWORD **)&v37 + 1) = **((_QWORD **)&v37 + 1) & 7 | v26;
            }
            else
            {
              v27 = v38;
              v28 = ***(int32x2_t ****)v38;
              v29 = (unint64_t)v28[303];
              if (v29 <= v26)
              {
                v30 = v28[305].u32[0];
                if (v29 + 16 * v30 > v26)
                {
                  v31 = v30 - 1;
                  LODWORD(v32) = v31 & ((v38 >> 4) ^ (v38 >> 9));
                  v33 = (uint64_t *)(v29 + 16 * v32);
                  v34 = *v33;
                  if ((_QWORD)v38 == *v33)
                  {
LABEL_36:
                    *v33 = -8192;
                    v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
                    v27 = v38;
                  }
                  else
                  {
                    v35 = 1;
                    while (v34 != -4096)
                    {
                      v36 = v32 + v35++;
                      v32 = v36 & v31;
                      v34 = *(_QWORD *)(v29 + 16 * v32);
                      if ((_QWORD)v38 == v34)
                      {
                        v33 = (uint64_t *)(v29 + 16 * v32);
                        goto LABEL_36;
                      }
                    }
                  }
                  *(_BYTE *)(v27 + 17) &= ~1u;
                }
              }
            }
          }
          ++*((_DWORD *)v40 + 10);
        }
        v18 = (llvm::MDNode *)((char *)v18 + 8);
      }
      while (v18 != a2);
    }
    return *(_QWORD *)v13;
  }
  return result;
}

void llvm::CallGraph::print(llvm::CallGraph *this, llvm::raw_ostream *a2)
{
  unint64_t v4;
  unsigned int v5;
  llvm::CallGraph *v6;
  uint64_t v7;
  llvm::CallGraph *v8;
  llvm::CallGraph *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  llvm::CallGraphNode **v13;
  uint64_t v14;
  llvm::CallGraphNode *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x1000000000;
  v4 = *((_QWORD *)this + 3);
  if (v4 < 0x11)
  {
    v5 = 0;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, (uint64_t)v20, v4, 8);
    v5 = v19;
  }
  v6 = (llvm::CallGraph *)*((_QWORD *)this + 1);
  if (v6 != (llvm::CallGraph *)((char *)this + 16))
  {
    do
    {
      v7 = *((_QWORD *)v6 + 5);
      if (v5 >= HIDWORD(v19))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v18, (uint64_t)v20, v5 + 1, 8);
        v5 = v19;
      }
      *((_QWORD *)v18 + v5) = v7;
      v5 = v19 + 1;
      LODWORD(v19) = v19 + 1;
      v8 = (llvm::CallGraph *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(llvm::CallGraph **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (llvm::CallGraph *)*((_QWORD *)v6 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != (llvm::CallGraph *)((char *)this + 16));
  }
  v11 = 126 - 2 * __clz(v5);
  if (v5)
    v12 = v11;
  else
    v12 = 0;
  sub_1C4DDE350((char *)v18, (char *)v18 + 8 * v5, v12, 1);
  if ((_DWORD)v19)
  {
    v13 = (llvm::CallGraphNode **)v18;
    v14 = 8 * v19;
    do
    {
      v15 = *v13++;
      llvm::CallGraphNode::print(v15, a2);
      v14 -= 8;
    }
    while (v14);
  }
  v17 = *((_QWORD *)this + 7);
  v16 = *((_QWORD *)this + 8);
  while (v17 != v16)
  {
    llvm::CallGraphNode::print(*(llvm::CallGraphNode **)(v17 + 8), a2);
    v17 += 16;
  }
  if (v18 != v20)
    free(v18);
}

unint64_t llvm::CallGraph::removeFunctionFromModule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  while (v4 != v5)
  {
    llvm::CallGraphNode::removeAnyCallEdgeTo(*(_QWORD *)(v4 + 8), a2);
    v4 += 16;
  }
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(a1 + 16);
    do
    {
      v9 = v7[4];
      v10 = v9 >= v6;
      if (v9 >= v6)
        v11 = v7;
      else
        v11 = v7 + 1;
      if (v10)
        v8 = v7;
      v7 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != (uint64_t *)(a1 + 16) && v6 >= v8[4])
      sub_1C4DE255C((uint64_t **)(a1 + 8), v8);
  }
  v12 = v6 + 56;
  if (!v6)
    v12 = 0;
  v13 = v12 - 56;
  v14 = *(_QWORD *)a1 + 24;
  if (v6)
    v15 = v13;
  else
    v15 = 0;
  llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList(v14, (uint64_t ***)v15);
  v16 = *(_QWORD *)(v15 + 56);
  v17 = *(_QWORD **)(v15 + 64);
  *v17 = v16;
  *(_QWORD *)(v16 + 8) = v17;
  *(_QWORD *)(v15 + 56) = 0;
  *(_QWORD *)(v15 + 64) = 0;
  return v6;
}

uint64_t llvm::CallGraphNode::removeAnyCallEdgeTo(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  int v3;
  uint64_t v5;
  unsigned int i;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (uint64_t *)(result + 16);
  v3 = -858993459 * ((*(_QWORD *)(result + 24) - *(_QWORD *)(result + 16)) >> 3);
  if (v3)
  {
    v5 = result;
    for (i = 0; i != v3; ++i)
    {
      v7 = *v2;
      v8 = *v2 + 40 * i;
      v10 = *(_QWORD *)(v8 + 32);
      v9 = (_QWORD *)(v8 + 32);
      if (v10 == a2)
      {
        --*(_DWORD *)(a2 + 40);
        v11 = *(_QWORD *)(v5 + 24);
        sub_1C4DDE088((llvm::ValueHandleBase *)(v7 + 40 * i), (uint64_t *)(v11 - 40));
        *v9 = *(_QWORD *)(v11 - 8);
        result = sub_1C4DDDF70((uint64_t)v2, *(_QWORD *)(v5 + 24) - 40);
        --i;
        --v3;
      }
    }
  }
  return result;
}

void llvm::CallGraphNode::removeCallEdgeFor(llvm::CallGraphNode *this, llvm::CallBase *a2)
{
  char *v4;
  uint64_t i;
  uint64_t v6;
  _QWORD *v7;
  const llvm::Use **v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t *inserted;
  llvm::CallBase *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 16;
  for (i = *((_QWORD *)this + 2); !*(_BYTE *)(i + 24) || *(llvm::CallBase **)(i + 16) != a2; i += 40)
    ;
  --*(_DWORD *)(*(_QWORD *)(i + 32) + 40);
  v6 = *((_QWORD *)this + 3);
  sub_1C4DDE088((llvm::ValueHandleBase *)i, (uint64_t *)(v6 - 40));
  *(_QWORD *)(i + 32) = *(_QWORD *)(v6 - 8);
  sub_1C4DDDF70((uint64_t)v4, *((_QWORD *)this + 3) - 40);
  v14 = v16;
  v15 = 0x400000000;
  llvm::AbstractCallSite::getCallbackUses(a2, (uint64_t)&v14);
  v7 = v14;
  if ((_DWORD)v15)
  {
    v8 = (const llvm::Use **)v14;
    v9 = 8 * v15;
    do
    {
      llvm::AbstractCallSite::AbstractCallSite((llvm::AbstractCallSite *)&v12, *v8);
      v10 = sub_1C6185E84(&v12);
      if (v10)
      {
        inserted = llvm::CallGraph::getOrInsertFunction(*(uint64_t ***)this, v10);
        llvm::CallGraphNode::removeOneAbstractEdgeTo((uint64_t)this, (uint64_t)inserted);
      }
      if (v13 != &v14)
        free(v13);
      ++v8;
      v9 -= 8;
    }
    while (v9);
    v7 = v14;
  }
  if (v7 != v16)
    free(v7);
}

uint64_t llvm::CallGraphNode::removeOneAbstractEdgeTo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  v3 = a1 + 16;
  for (i = *(_QWORD *)(a1 + 16); *(_QWORD *)(i + 32) != a2 || *(_BYTE *)(i + 24); i += 40)
    ;
  --*(_DWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 24);
  sub_1C4DDE088((llvm::ValueHandleBase *)i, (uint64_t *)(v5 - 40));
  *(_QWORD *)(i + 32) = *(_QWORD *)(v5 - 8);
  return sub_1C4DDDF70(v3, *(_QWORD *)(a1 + 24) - 40);
}

void llvm::CallGraphNode::replaceCallEdge(llvm::CallGraphNode *this, llvm::CallBase *a2, llvm::CallBase *a3, llvm::CallGraphNode *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  unint64_t v17;
  uint64_t v18;
  int32x2_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  const llvm::Use **v28;
  const llvm::Use **v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  int32x2_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  llvm::Value *v49;
  uint64_t *inserted;
  uint64_t v51;
  uint64_t v52;
  llvm::Value *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *i;
  llvm::CallBase *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  _BYTE v71[32];
  void *v72;
  uint64_t v73;
  _BYTE v74[32];
  void *v75;
  uint64_t v76;
  _QWORD v77[5];

  v77[4] = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)this + 2);
  v9 = v8 + 8;
  while (!*(_BYTE *)(v8 + 24) || *(llvm::CallBase **)(v8 + 16) != a2)
  {
    v8 += 40;
    v9 += 40;
  }
  --*(_DWORD *)(*(_QWORD *)(v8 + 32) + 40);
  v75 = (void *)6;
  v76 = 0;
  v77[0] = a3;
  if (a3 == (llvm::CallBase *)-8192
    || a3 == (llvm::CallBase *)-4096
    || !a3
    || (llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v75), *(_BYTE *)(v8 + 24)))
  {
    v10 = *(_QWORD *)(v8 + 16);
    v11 = v77[0];
    if (v10 != v77[0])
    {
      if (v10 != -4096 && v10 && v10 != -8192)
      {
        v33 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v33 = *(_QWORD *)(v8 + 8);
        v34 = *(unint64_t **)(v8 + 8);
        if (v34)
        {
          *v34 = *v34 & 7 | v33;
        }
        else
        {
          v35 = *(_QWORD *)(v8 + 16);
          v36 = ***(int32x2_t ****)v35;
          v37 = (unint64_t)v36[303];
          if (v37 <= v33)
          {
            v38 = v36[305].u32[0];
            if (v37 + 16 * v38 > v33)
            {
              v39 = v38 - 1;
              LODWORD(v40) = v39 & ((v35 >> 4) ^ (v35 >> 9));
              v41 = (uint64_t *)(v37 + 16 * v40);
              v42 = *v41;
              if (v35 == *v41)
              {
LABEL_57:
                *v41 = -8192;
                v36[304] = vadd_s32(v36[304], (int32x2_t)0x1FFFFFFFFLL);
                v35 = *(_QWORD *)(v8 + 16);
              }
              else
              {
                v43 = 1;
                while (v42 != -4096)
                {
                  v44 = v40 + v43++;
                  v40 = v44 & v39;
                  v42 = *(_QWORD *)(v37 + 16 * v40);
                  if (v35 == v42)
                  {
                    v41 = (uint64_t *)(v37 + 16 * v40);
                    goto LABEL_57;
                  }
                }
              }
              *(_BYTE *)(v35 + 17) &= ~1u;
            }
          }
        }
        v11 = v77[0];
      }
      *(_QWORD *)(v8 + 16) = v11;
      if (v11 != -4096 && v11 != -8192 && v11 != 0)
      {
        v13 = (unint64_t)v75;
        v14 = (_QWORD *)((unint64_t)v75 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v8 + 8) = *(_QWORD *)((unint64_t)v75 & 0xFFFFFFFFFFFFFFF8);
        *v14 = v8;
        v15 = *(uint64_t **)(v8 + 8);
        *(_QWORD *)v8 = v13 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)v8 & 7;
        if (v15)
          *v15 = *v15 & 7 | v9;
      }
    }
  }
  else
  {
    *(_QWORD *)v8 = 6;
    *(_QWORD *)(v8 + 8) = 0;
    v45 = v77[0];
    *(_QWORD *)(v8 + 16) = v77[0];
    if (v45 != -8192 && v45 != -4096)
    {
      if (v45)
      {
        v46 = (unint64_t)v75 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v8 + 8) = *(_QWORD *)((unint64_t)v75 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)v46 = v8;
        *(_QWORD *)v8 = v46 | 6;
        v47 = *(uint64_t **)(v8 + 8);
        if (v47)
          *v47 = *v47 & 7 | v9;
      }
    }
    *(_BYTE *)(v8 + 24) = 1;
  }
  if (v77[0] != -8192 && v77[0] != -4096 && v77[0] != 0)
  {
    v17 = (unint64_t)v75 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)((unint64_t)v75 & 0xFFFFFFFFFFFFFFF8) = v76;
    if (v76)
    {
      *(_QWORD *)v76 = *(_QWORD *)v76 & 7 | v17;
    }
    else
    {
      v18 = v77[0];
      v19 = ***(int32x2_t ****)v77[0];
      v20 = (unint64_t)v19[303];
      if (v20 <= v17)
      {
        v21 = v19[305].u32[0];
        if (v20 + 16 * v21 > v17)
        {
          v22 = v21 - 1;
          LODWORD(v23) = v22 & ((LODWORD(v77[0]) >> 4) ^ (LODWORD(v77[0]) >> 9));
          v24 = (uint64_t *)(v20 + 16 * v23);
          v25 = *v24;
          if (v77[0] == *v24)
          {
LABEL_31:
            *v24 = -8192;
            v19[304] = vadd_s32(v19[304], (int32x2_t)0x1FFFFFFFFLL);
            v18 = v77[0];
          }
          else
          {
            v26 = 1;
            while (v25 != -4096)
            {
              v27 = v23 + v26++;
              v23 = v27 & v22;
              v25 = *(_QWORD *)(v20 + 16 * v23);
              if (v77[0] == v25)
              {
                v24 = (uint64_t *)(v20 + 16 * v23);
                goto LABEL_31;
              }
            }
          }
          *(_BYTE *)(v18 + 17) &= ~1u;
        }
      }
    }
  }
  *(_QWORD *)(v8 + 32) = a4;
  ++*((_DWORD *)a4 + 10);
  v72 = v74;
  v73 = 0x400000000;
  v69 = v71;
  v70 = 0x400000000;
  v75 = v77;
  v76 = 0x400000000;
  llvm::AbstractCallSite::getCallbackUses(a2, (uint64_t)&v75);
  v28 = (const llvm::Use **)v75;
  if ((_DWORD)v76)
  {
    v48 = 8 * v76;
    do
    {
      llvm::AbstractCallSite::AbstractCallSite((llvm::AbstractCallSite *)&v67, *v28);
      v49 = sub_1C6185E84(&v67);
      if (v49)
      {
        inserted = llvm::CallGraph::getOrInsertFunction(*(uint64_t ***)this, v49);
        v51 = v73;
        if (v73 >= (unint64_t)HIDWORD(v73))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v72, (uint64_t)v74, v73 + 1, 8);
          v51 = v73;
        }
        *((_QWORD *)v72 + v51) = inserted;
        LODWORD(v73) = v73 + 1;
      }
      if (v68 != &v69)
        free(v68);
      ++v28;
      v48 -= 8;
    }
    while (v48);
    v28 = (const llvm::Use **)v75;
  }
  if (v28 != v77)
    free(v28);
  v75 = v77;
  v76 = 0x400000000;
  llvm::AbstractCallSite::getCallbackUses(a3, (uint64_t)&v75);
  v29 = (const llvm::Use **)v75;
  if ((_DWORD)v76)
  {
    v52 = 8 * v76;
    do
    {
      llvm::AbstractCallSite::AbstractCallSite((llvm::AbstractCallSite *)&v67, *v29);
      v53 = sub_1C6185E84(&v67);
      if (v53)
      {
        v54 = llvm::CallGraph::getOrInsertFunction(*(uint64_t ***)this, v53);
        v55 = v70;
        if (v70 >= (unint64_t)HIDWORD(v70))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v69, (uint64_t)v71, v70 + 1, 8);
          v55 = v70;
        }
        *((_QWORD *)v69 + v55) = v54;
        LODWORD(v70) = v70 + 1;
      }
      if (v68 != &v69)
        free(v68);
      ++v29;
      v52 -= 8;
    }
    while (v52);
    v29 = (const llvm::Use **)v75;
  }
  if (v29 != v77)
    free(v29);
  v30 = v73;
  v31 = v70;
  if ((_DWORD)v73 == (_DWORD)v70)
  {
    v32 = (uint64_t *)v69;
    if ((_DWORD)v73)
    {
      v61 = 0;
      v62 = v72;
      v63 = *((_QWORD *)this + 2) + 32;
      do
      {
        v64 = v62[v61];
        v65 = v32[v61];
        for (i = (_QWORD *)v63; *((_BYTE *)i - 8) || *i != v64; i += 5)
          ;
        *i = v65;
        --*(_DWORD *)(v64 + 40);
        ++*(_DWORD *)(v65 + 40);
        ++v61;
      }
      while (v61 != v30);
    }
  }
  else
  {
    if ((_DWORD)v73)
    {
      v56 = (uint64_t *)v72;
      v57 = 8 * v73;
      do
      {
        v58 = *v56++;
        llvm::CallGraphNode::removeOneAbstractEdgeTo((uint64_t)this, v58);
        v57 -= 8;
      }
      while (v57);
      v31 = v70;
    }
    v32 = (uint64_t *)v69;
    if (v31)
    {
      v59 = 8 * v31;
      do
      {
        v60 = *v32++;
        sub_1C4DDC318((uint64_t)this, 0, v60);
        v59 -= 8;
      }
      while (v59);
      v32 = (uint64_t *)v69;
    }
  }
  if (v32 != (uint64_t *)v71)
    free(v32);
  if (v72 != v74)
    free(v72);
}

